
stm32f746_disco_no_os.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019548  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000725f0  08019710  08019710  00029710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0808bd00  0808bd00  0009bd00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0808bd08  0808bd08  0009bd08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0808bd0c  0808bd0c  0009bd0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000350  20000000  0808bd10  000a0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00017cf0  20000350  0808c060  000a0350  2**2
                  ALLOC
  8 ._user_heap_stack 00001800  20018040  0808c060  000a8040  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000a0350  2**0
                  CONTENTS, READONLY
 10 .debug_info   0009c5aa  00000000  00000000  000a0380  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0001126c  00000000  00000000  0013c92a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000408f6  00000000  00000000  0014db96  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00003200  00000000  00000000  0018e490  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00009260  00000000  00000000  00191690  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00037527  00000000  00000000  0019a8f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0003fc78  00000000  00000000  001d1e17  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00114eb6  00000000  00000000  00211a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00326945  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000ac58  00000000  00000000  003269c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000350 	.word	0x20000350
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080196f8 	.word	0x080196f8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000354 	.word	0x20000354
 8000204:	080196f8 	.word	0x080196f8

08000208 <strcmp>:
 8000208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000210:	2a01      	cmp	r2, #1
 8000212:	bf28      	it	cs
 8000214:	429a      	cmpcs	r2, r3
 8000216:	d0f7      	beq.n	8000208 <strcmp>
 8000218:	1ad0      	subs	r0, r2, r3
 800021a:	4770      	bx	lr

0800021c <strlen>:
 800021c:	4603      	mov	r3, r0
 800021e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000222:	2a00      	cmp	r2, #0
 8000224:	d1fb      	bne.n	800021e <strlen+0x2>
 8000226:	1a18      	subs	r0, r3, r0
 8000228:	3801      	subs	r0, #1
 800022a:	4770      	bx	lr

0800022c <__aeabi_uldivmod>:
 800022c:	b953      	cbnz	r3, 8000244 <__aeabi_uldivmod+0x18>
 800022e:	b94a      	cbnz	r2, 8000244 <__aeabi_uldivmod+0x18>
 8000230:	2900      	cmp	r1, #0
 8000232:	bf08      	it	eq
 8000234:	2800      	cmpeq	r0, #0
 8000236:	bf1c      	itt	ne
 8000238:	f04f 31ff 	movne.w	r1, #4294967295
 800023c:	f04f 30ff 	movne.w	r0, #4294967295
 8000240:	f000 b97a 	b.w	8000538 <__aeabi_idiv0>
 8000244:	f1ad 0c08 	sub.w	ip, sp, #8
 8000248:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000254:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000258:	b004      	add	sp, #16
 800025a:	4770      	bx	lr

0800025c <__udivmoddi4>:
 800025c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000260:	468c      	mov	ip, r1
 8000262:	460d      	mov	r5, r1
 8000264:	4604      	mov	r4, r0
 8000266:	9e08      	ldr	r6, [sp, #32]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d151      	bne.n	8000310 <__udivmoddi4+0xb4>
 800026c:	428a      	cmp	r2, r1
 800026e:	4617      	mov	r7, r2
 8000270:	d96d      	bls.n	800034e <__udivmoddi4+0xf2>
 8000272:	fab2 fe82 	clz	lr, r2
 8000276:	f1be 0f00 	cmp.w	lr, #0
 800027a:	d00b      	beq.n	8000294 <__udivmoddi4+0x38>
 800027c:	f1ce 0c20 	rsb	ip, lr, #32
 8000280:	fa01 f50e 	lsl.w	r5, r1, lr
 8000284:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000288:	fa02 f70e 	lsl.w	r7, r2, lr
 800028c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000290:	fa00 f40e 	lsl.w	r4, r0, lr
 8000294:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000298:	0c25      	lsrs	r5, r4, #16
 800029a:	fbbc f8fa 	udiv	r8, ip, sl
 800029e:	fa1f f987 	uxth.w	r9, r7
 80002a2:	fb0a cc18 	mls	ip, sl, r8, ip
 80002a6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002aa:	fb08 f309 	mul.w	r3, r8, r9
 80002ae:	42ab      	cmp	r3, r5
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x6c>
 80002b2:	19ed      	adds	r5, r5, r7
 80002b4:	f108 32ff 	add.w	r2, r8, #4294967295
 80002b8:	f080 8123 	bcs.w	8000502 <__udivmoddi4+0x2a6>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	f240 8120 	bls.w	8000502 <__udivmoddi4+0x2a6>
 80002c2:	f1a8 0802 	sub.w	r8, r8, #2
 80002c6:	443d      	add	r5, r7
 80002c8:	1aed      	subs	r5, r5, r3
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb5 f0fa 	udiv	r0, r5, sl
 80002d0:	fb0a 5510 	mls	r5, sl, r0, r5
 80002d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002d8:	fb00 f909 	mul.w	r9, r0, r9
 80002dc:	45a1      	cmp	r9, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x98>
 80002e0:	19e4      	adds	r4, r4, r7
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 810a 	bcs.w	80004fe <__udivmoddi4+0x2a2>
 80002ea:	45a1      	cmp	r9, r4
 80002ec:	f240 8107 	bls.w	80004fe <__udivmoddi4+0x2a2>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	eba4 0409 	sub.w	r4, r4, r9
 80002f8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002fc:	2100      	movs	r1, #0
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d061      	beq.n	80003c6 <__udivmoddi4+0x16a>
 8000302:	fa24 f40e 	lsr.w	r4, r4, lr
 8000306:	2300      	movs	r3, #0
 8000308:	6034      	str	r4, [r6, #0]
 800030a:	6073      	str	r3, [r6, #4]
 800030c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xc8>
 8000314:	2e00      	cmp	r6, #0
 8000316:	d054      	beq.n	80003c2 <__udivmoddi4+0x166>
 8000318:	2100      	movs	r1, #0
 800031a:	e886 0021 	stmia.w	r6, {r0, r5}
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	f040 808e 	bne.w	800044a <__udivmoddi4+0x1ee>
 800032e:	42ab      	cmp	r3, r5
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xdc>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2d0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb65 0503 	sbc.w	r5, r5, r3
 800033e:	2001      	movs	r0, #1
 8000340:	46ac      	mov	ip, r5
 8000342:	2e00      	cmp	r6, #0
 8000344:	d03f      	beq.n	80003c6 <__udivmoddi4+0x16a>
 8000346:	e886 1010 	stmia.w	r6, {r4, ip}
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	b912      	cbnz	r2, 8000356 <__udivmoddi4+0xfa>
 8000350:	2701      	movs	r7, #1
 8000352:	fbb7 f7f2 	udiv	r7, r7, r2
 8000356:	fab7 fe87 	clz	lr, r7
 800035a:	f1be 0f00 	cmp.w	lr, #0
 800035e:	d134      	bne.n	80003ca <__udivmoddi4+0x16e>
 8000360:	1beb      	subs	r3, r5, r7
 8000362:	0c3a      	lsrs	r2, r7, #16
 8000364:	fa1f fc87 	uxth.w	ip, r7
 8000368:	2101      	movs	r1, #1
 800036a:	fbb3 f8f2 	udiv	r8, r3, r2
 800036e:	0c25      	lsrs	r5, r4, #16
 8000370:	fb02 3318 	mls	r3, r2, r8, r3
 8000374:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000378:	fb0c f308 	mul.w	r3, ip, r8
 800037c:	42ab      	cmp	r3, r5
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x134>
 8000380:	19ed      	adds	r5, r5, r7
 8000382:	f108 30ff 	add.w	r0, r8, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x132>
 8000388:	42ab      	cmp	r3, r5
 800038a:	f200 80d1 	bhi.w	8000530 <__udivmoddi4+0x2d4>
 800038e:	4680      	mov	r8, r0
 8000390:	1aed      	subs	r5, r5, r3
 8000392:	b2a3      	uxth	r3, r4
 8000394:	fbb5 f0f2 	udiv	r0, r5, r2
 8000398:	fb02 5510 	mls	r5, r2, r0, r5
 800039c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003a0:	fb0c fc00 	mul.w	ip, ip, r0
 80003a4:	45a4      	cmp	ip, r4
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0x15c>
 80003a8:	19e4      	adds	r4, r4, r7
 80003aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x15a>
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	f200 80b8 	bhi.w	8000526 <__udivmoddi4+0x2ca>
 80003b6:	4618      	mov	r0, r3
 80003b8:	eba4 040c 	sub.w	r4, r4, ip
 80003bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003c0:	e79d      	b.n	80002fe <__udivmoddi4+0xa2>
 80003c2:	4631      	mov	r1, r6
 80003c4:	4630      	mov	r0, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	f1ce 0420 	rsb	r4, lr, #32
 80003ce:	fa05 f30e 	lsl.w	r3, r5, lr
 80003d2:	fa07 f70e 	lsl.w	r7, r7, lr
 80003d6:	fa20 f804 	lsr.w	r8, r0, r4
 80003da:	0c3a      	lsrs	r2, r7, #16
 80003dc:	fa25 f404 	lsr.w	r4, r5, r4
 80003e0:	ea48 0803 	orr.w	r8, r8, r3
 80003e4:	fbb4 f1f2 	udiv	r1, r4, r2
 80003e8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003ec:	fb02 4411 	mls	r4, r2, r1, r4
 80003f0:	fa1f fc87 	uxth.w	ip, r7
 80003f4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003f8:	fb01 f30c 	mul.w	r3, r1, ip
 80003fc:	42ab      	cmp	r3, r5
 80003fe:	fa00 f40e 	lsl.w	r4, r0, lr
 8000402:	d909      	bls.n	8000418 <__udivmoddi4+0x1bc>
 8000404:	19ed      	adds	r5, r5, r7
 8000406:	f101 30ff 	add.w	r0, r1, #4294967295
 800040a:	f080 808a 	bcs.w	8000522 <__udivmoddi4+0x2c6>
 800040e:	42ab      	cmp	r3, r5
 8000410:	f240 8087 	bls.w	8000522 <__udivmoddi4+0x2c6>
 8000414:	3902      	subs	r1, #2
 8000416:	443d      	add	r5, r7
 8000418:	1aeb      	subs	r3, r5, r3
 800041a:	fa1f f588 	uxth.w	r5, r8
 800041e:	fbb3 f0f2 	udiv	r0, r3, r2
 8000422:	fb02 3310 	mls	r3, r2, r0, r3
 8000426:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800042a:	fb00 f30c 	mul.w	r3, r0, ip
 800042e:	42ab      	cmp	r3, r5
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1e6>
 8000432:	19ed      	adds	r5, r5, r7
 8000434:	f100 38ff 	add.w	r8, r0, #4294967295
 8000438:	d26f      	bcs.n	800051a <__udivmoddi4+0x2be>
 800043a:	42ab      	cmp	r3, r5
 800043c:	d96d      	bls.n	800051a <__udivmoddi4+0x2be>
 800043e:	3802      	subs	r0, #2
 8000440:	443d      	add	r5, r7
 8000442:	1aeb      	subs	r3, r5, r3
 8000444:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000448:	e78f      	b.n	800036a <__udivmoddi4+0x10e>
 800044a:	f1c1 0720 	rsb	r7, r1, #32
 800044e:	fa22 f807 	lsr.w	r8, r2, r7
 8000452:	408b      	lsls	r3, r1
 8000454:	fa05 f401 	lsl.w	r4, r5, r1
 8000458:	ea48 0303 	orr.w	r3, r8, r3
 800045c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000460:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000464:	40fd      	lsrs	r5, r7
 8000466:	ea4e 0e04 	orr.w	lr, lr, r4
 800046a:	fbb5 f9fc 	udiv	r9, r5, ip
 800046e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000472:	fb0c 5519 	mls	r5, ip, r9, r5
 8000476:	fa1f f883 	uxth.w	r8, r3
 800047a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800047e:	fb09 f408 	mul.w	r4, r9, r8
 8000482:	42ac      	cmp	r4, r5
 8000484:	fa02 f201 	lsl.w	r2, r2, r1
 8000488:	fa00 fa01 	lsl.w	sl, r0, r1
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x244>
 800048e:	18ed      	adds	r5, r5, r3
 8000490:	f109 30ff 	add.w	r0, r9, #4294967295
 8000494:	d243      	bcs.n	800051e <__udivmoddi4+0x2c2>
 8000496:	42ac      	cmp	r4, r5
 8000498:	d941      	bls.n	800051e <__udivmoddi4+0x2c2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	441d      	add	r5, r3
 80004a0:	1b2d      	subs	r5, r5, r4
 80004a2:	fa1f fe8e 	uxth.w	lr, lr
 80004a6:	fbb5 f0fc 	udiv	r0, r5, ip
 80004aa:	fb0c 5510 	mls	r5, ip, r0, r5
 80004ae:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004b2:	fb00 f808 	mul.w	r8, r0, r8
 80004b6:	45a0      	cmp	r8, r4
 80004b8:	d907      	bls.n	80004ca <__udivmoddi4+0x26e>
 80004ba:	18e4      	adds	r4, r4, r3
 80004bc:	f100 35ff 	add.w	r5, r0, #4294967295
 80004c0:	d229      	bcs.n	8000516 <__udivmoddi4+0x2ba>
 80004c2:	45a0      	cmp	r8, r4
 80004c4:	d927      	bls.n	8000516 <__udivmoddi4+0x2ba>
 80004c6:	3802      	subs	r0, #2
 80004c8:	441c      	add	r4, r3
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	eba4 0408 	sub.w	r4, r4, r8
 80004d2:	fba0 8902 	umull	r8, r9, r0, r2
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c6      	mov	lr, r8
 80004da:	464d      	mov	r5, r9
 80004dc:	d315      	bcc.n	800050a <__udivmoddi4+0x2ae>
 80004de:	d012      	beq.n	8000506 <__udivmoddi4+0x2aa>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x29c>
 80004e2:	ebba 030e 	subs.w	r3, sl, lr
 80004e6:	eb64 0405 	sbc.w	r4, r4, r5
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40cb      	lsrs	r3, r1
 80004f0:	431f      	orrs	r7, r3
 80004f2:	40cc      	lsrs	r4, r1
 80004f4:	6037      	str	r7, [r6, #0]
 80004f6:	6074      	str	r4, [r6, #4]
 80004f8:	2100      	movs	r1, #0
 80004fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fe:	4618      	mov	r0, r3
 8000500:	e6f8      	b.n	80002f4 <__udivmoddi4+0x98>
 8000502:	4690      	mov	r8, r2
 8000504:	e6e0      	b.n	80002c8 <__udivmoddi4+0x6c>
 8000506:	45c2      	cmp	sl, r8
 8000508:	d2ea      	bcs.n	80004e0 <__udivmoddi4+0x284>
 800050a:	ebb8 0e02 	subs.w	lr, r8, r2
 800050e:	eb69 0503 	sbc.w	r5, r9, r3
 8000512:	3801      	subs	r0, #1
 8000514:	e7e4      	b.n	80004e0 <__udivmoddi4+0x284>
 8000516:	4628      	mov	r0, r5
 8000518:	e7d7      	b.n	80004ca <__udivmoddi4+0x26e>
 800051a:	4640      	mov	r0, r8
 800051c:	e791      	b.n	8000442 <__udivmoddi4+0x1e6>
 800051e:	4681      	mov	r9, r0
 8000520:	e7be      	b.n	80004a0 <__udivmoddi4+0x244>
 8000522:	4601      	mov	r1, r0
 8000524:	e778      	b.n	8000418 <__udivmoddi4+0x1bc>
 8000526:	3802      	subs	r0, #2
 8000528:	443c      	add	r4, r7
 800052a:	e745      	b.n	80003b8 <__udivmoddi4+0x15c>
 800052c:	4608      	mov	r0, r1
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xe6>
 8000530:	f1a8 0802 	sub.w	r8, r8, #2
 8000534:	443d      	add	r5, r7
 8000536:	e72b      	b.n	8000390 <__udivmoddi4+0x134>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053e:	2400      	movs	r4, #0
{
 8000540:	b0b5      	sub	sp, #212	; 0xd4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	2230      	movs	r2, #48	; 0x30
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000544:	2502      	movs	r5, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	4621      	mov	r1, r4
 8000548:	a807      	add	r0, sp, #28
 800054a:	f019 f8c4 	bl	80196d6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800054e:	4621      	mov	r1, r4
 8000550:	2284      	movs	r2, #132	; 0x84
 8000552:	a813      	add	r0, sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	9402      	str	r4, [sp, #8]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000556:	2601      	movs	r6, #1
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	9403      	str	r4, [sp, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800055a:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055e:	9404      	str	r4, [sp, #16]
 8000560:	9405      	str	r4, [sp, #20]
 8000562:	9406      	str	r4, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000564:	f019 f8b7 	bl	80196d6 <memset>
  HAL_PWR_EnableBkUpAccess();
 8000568:	f003 f86e 	bl	8003648 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 800056c:	4a2d      	ldr	r2, [pc, #180]	; (8000624 <SystemClock_Config+0xe8>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056e:	4b2e      	ldr	r3, [pc, #184]	; (8000628 <SystemClock_Config+0xec>)
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000570:	f44f 0c80 	mov.w	ip, #4194304	; 0x400000
  __HAL_RCC_PWR_CLK_ENABLE();
 8000574:	6c11      	ldr	r1, [r2, #64]	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000576:	f04f 0e09 	mov.w	lr, #9
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 400;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 8;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057a:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000580:	6411      	str	r1, [r2, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000582:	2119      	movs	r1, #25
  __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000586:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800058a:	9200      	str	r2, [sp, #0]
 800058c:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000594:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000596:	f44f 72c8 	mov.w	r2, #400	; 0x190
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059a:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059c:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80005a4:	f8cd e01c 	str.w	lr, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005a8:	910f      	str	r1, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005aa:	9301      	str	r3, [sp, #4]
 80005ac:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80005ae:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLN = 400;
 80005b0:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80005b2:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b4:	9708      	str	r7, [sp, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005b6:	960c      	str	r6, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b8:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ba:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005bc:	f003 f912 	bl	80037e4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005c0:	f003 f84a 	bl	8003658 <HAL_PWREx_EnableOverDrive>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	f04f 0e0f 	mov.w	lr, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005c8:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80005d0:	a802      	add	r0, sp, #8
 80005d2:	2106      	movs	r1, #6
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d4:	f8cd e008 	str.w	lr, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d8:	9205      	str	r2, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005da:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005dc:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80005e0:	f003 fb0a 	bl	8003bf8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 80005e4:	f8df c044 	ldr.w	ip, [pc, #68]	; 800062c <SystemClock_Config+0xf0>
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80005e8:	f04f 0ec0 	mov.w	lr, #192	; 0xc0
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80005ec:	2105      	movs	r1, #5
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
  PeriphClkInitStruct.PLLSAIDivQ = 1;
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80005ee:	f44f 7200 	mov.w	r2, #512	; 0x200
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80005f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005f6:	a813      	add	r0, sp, #76	; 0x4c
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80005f8:	9519      	str	r5, [sp, #100]	; 0x64
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 80005fa:	961b      	str	r6, [sp, #108]	; 0x6c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80005fc:	961d      	str	r6, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80005fe:	971e      	str	r7, [sp, #120]	; 0x78
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000600:	9423      	str	r4, [sp, #140]	; 0x8c
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000602:	9424      	str	r4, [sp, #144]	; 0x90
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000604:	9429      	str	r4, [sp, #164]	; 0xa4
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000606:	942c      	str	r4, [sp, #176]	; 0xb0
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000608:	942e      	str	r4, [sp, #184]	; 0xb8
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800060a:	9433      	str	r4, [sp, #204]	; 0xcc
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 800060c:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000610:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000614:	911a      	str	r1, [sp, #104]	; 0x68
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000616:	921f      	str	r2, [sp, #124]	; 0x7c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000618:	9332      	str	r3, [sp, #200]	; 0xc8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800061a:	f003 fbcd 	bl	8003db8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800061e:	b035      	add	sp, #212	; 0xd4
 8000620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000622:	bf00      	nop
 8000624:	40023800 	.word	0x40023800
 8000628:	40007000 	.word	0x40007000
 800062c:	00b14868 	.word	0x00b14868

08000630 <main>:
{
 8000630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000634:	b0a9      	sub	sp, #164	; 0xa4
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	2600      	movs	r6, #0
  HAL_Init();
 8000638:	f001 fb20 	bl	8001c7c <HAL_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063c:	2502      	movs	r5, #2
  SystemClock_Config();
 800063e:	f7ff ff7d 	bl	800053c <SystemClock_Config>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000642:	4bc2      	ldr	r3, [pc, #776]	; (800094c <main+0x31c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000644:	961c      	str	r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000646:	f04f 0808 	mov.w	r8, #8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064a:	961b      	str	r6, [sp, #108]	; 0x6c
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800064c:	2201      	movs	r2, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064e:	961d      	str	r6, [sp, #116]	; 0x74
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000650:	2120      	movs	r1, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000652:	961e      	str	r6, [sp, #120]	; 0x78
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000654:	2703      	movs	r7, #3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000656:	961f      	str	r6, [sp, #124]	; 0x7c
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000658:	f04f 0a0b 	mov.w	sl, #11
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800065c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800065e:	f04f 090a 	mov.w	r9, #10
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000662:	48bb      	ldr	r0, [pc, #748]	; (8000950 <main+0x320>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000664:	f04f 0b04 	mov.w	fp, #4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000668:	f044 0c10 	orr.w	ip, r4, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066c:	4614      	mov	r4, r2
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800066e:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 8000672:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8000676:	f00c 0c10 	and.w	ip, ip, #16
 800067a:	f8cd c008 	str.w	ip, [sp, #8]
 800067e:	f8dd c008 	ldr.w	ip, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000682:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8000686:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
 800068a:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 800068e:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8000692:	f00c 0c40 	and.w	ip, ip, #64	; 0x40
 8000696:	f8cd c00c 	str.w	ip, [sp, #12]
 800069a:	f8dd c00c 	ldr.w	ip, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069e:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 80006a2:	ea4c 0c05 	orr.w	ip, ip, r5
 80006a6:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 80006aa:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 80006ae:	ea0c 0c05 	and.w	ip, ip, r5
 80006b2:	f8cd c010 	str.w	ip, [sp, #16]
 80006b6:	f8dd c010 	ldr.w	ip, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ba:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 80006be:	ea4c 0c08 	orr.w	ip, ip, r8
 80006c2:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 80006c6:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 80006ca:	ea0c 0c08 	and.w	ip, ip, r8
 80006ce:	f8cd c014 	str.w	ip, [sp, #20]
 80006d2:	f8dd c014 	ldr.w	ip, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 80006da:	f04c 0c04 	orr.w	ip, ip, #4
 80006de:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 80006e2:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 80006e6:	f00c 0c04 	and.w	ip, ip, #4
 80006ea:	f8cd c018 	str.w	ip, [sp, #24]
 80006ee:	f8dd c018 	ldr.w	ip, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 80006f6:	ea4c 0c02 	orr.w	ip, ip, r2
 80006fa:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 80006fe:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8000702:	ea0c 0c02 	and.w	ip, ip, r2
 8000706:	f8cd c01c 	str.w	ip, [sp, #28]
 800070a:	f8dd c01c 	ldr.w	ip, [sp, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800070e:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8000712:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
 8000716:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 800071a:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800071e:	f40c 7c00 	and.w	ip, ip, #512	; 0x200
 8000722:	f8cd c020 	str.w	ip, [sp, #32]
 8000726:	f8dd c020 	ldr.w	ip, [sp, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800072a:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800072e:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
 8000732:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 8000736:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800073a:	f40c 7c80 	and.w	ip, ip, #256	; 0x100
 800073e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8000742:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000746:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800074a:	f44c 6c80 	orr.w	ip, ip, #1024	; 0x400
 800074e:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 8000752:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8000756:	f40c 6c80 	and.w	ip, ip, #1024	; 0x400
 800075a:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800075e:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000762:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8000766:	ea4c 0c01 	orr.w	ip, ip, r1
 800076a:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 800076e:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8000772:	ea0c 0c01 	and.w	ip, ip, r1
 8000776:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800077a:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077e:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8000782:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 8000786:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 800078a:	f8d3 e030 	ldr.w	lr, [r3, #48]	; 0x30
 800078e:	f00e 0e80 	and.w	lr, lr, #128	; 0x80
 8000792:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
 8000796:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000798:	f002 fa3e 	bl	8002c18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 800079c:	4632      	mov	r2, r6
 800079e:	210c      	movs	r1, #12
 80007a0:	486c      	ldr	r0, [pc, #432]	; (8000954 <main+0x324>)
 80007a2:	f002 fa39 	bl	8002c18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80007a6:	4622      	mov	r2, r4
 80007a8:	4641      	mov	r1, r8
 80007aa:	486b      	ldr	r0, [pc, #428]	; (8000958 <main+0x328>)
 80007ac:	f002 fa34 	bl	8002c18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80007b0:	4622      	mov	r2, r4
 80007b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007b6:	4867      	ldr	r0, [pc, #412]	; (8000954 <main+0x324>)
 80007b8:	f002 fa2e 	bl	8002c18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80007bc:	4632      	mov	r2, r6
 80007be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007c2:	4866      	ldr	r0, [pc, #408]	; (800095c <main+0x32c>)
 80007c4:	f002 fa28 	bl	8002c18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80007c8:	4632      	mov	r2, r6
 80007ca:	21c8      	movs	r1, #200	; 0xc8
 80007cc:	4864      	ldr	r0, [pc, #400]	; (8000960 <main+0x330>)
 80007ce:	f002 fa23 	bl	8002c18 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007d2:	a91b      	add	r1, sp, #108	; 0x6c
 80007d4:	4863      	ldr	r0, [pc, #396]	; (8000964 <main+0x334>)
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80007d6:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007da:	961c      	str	r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	961d      	str	r6, [sp, #116]	; 0x74
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007de:	f002 f82d 	bl	800283c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80007e2:	f44f 42d0 	mov.w	r2, #26624	; 0x6800
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007e6:	a91b      	add	r1, sp, #108	; 0x6c
 80007e8:	485d      	ldr	r0, [pc, #372]	; (8000960 <main+0x330>)
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80007ea:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ec:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ee:	971e      	str	r7, [sp, #120]	; 0x78
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007f0:	f8cd a07c 	str.w	sl, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	961d      	str	r6, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007f6:	f002 f821 	bl	800283c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 80007fa:	f643 4223 	movw	r2, #15395	; 0x3c23
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fe:	a91b      	add	r1, sp, #108	; 0x6c
 8000800:	4859      	ldr	r0, [pc, #356]	; (8000968 <main+0x338>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000802:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000804:	971e      	str	r7, [sp, #120]	; 0x78
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8000806:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000808:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	961d      	str	r6, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080e:	f002 f815 	bl	800283c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000812:	2280      	movs	r2, #128	; 0x80
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000814:	a91b      	add	r1, sp, #108	; 0x6c
 8000816:	484e      	ldr	r0, [pc, #312]	; (8000950 <main+0x320>)
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000818:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081a:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800081c:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	961d      	str	r6, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000824:	f002 f80a 	bl	800283c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800082c:	a91b      	add	r1, sp, #108	; 0x6c
 800082e:	484f      	ldr	r0, [pc, #316]	; (800096c <main+0x33c>)
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000830:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000832:	961c      	str	r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	961d      	str	r6, [sp, #116]	; 0x74
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000836:	f002 f801 	bl	800283c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800083a:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800083c:	a91b      	add	r1, sp, #108	; 0x6c
 800083e:	4844      	ldr	r0, [pc, #272]	; (8000950 <main+0x320>)
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000840:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000842:	4b4b      	ldr	r3, [pc, #300]	; (8000970 <main+0x340>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	961d      	str	r6, [sp, #116]	; 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000846:	931c      	str	r3, [sp, #112]	; 0x70
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000848:	f001 fff8 	bl	800283c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800084c:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000850:	a91b      	add	r1, sp, #108	; 0x6c
 8000852:	4848      	ldr	r0, [pc, #288]	; (8000974 <main+0x344>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000854:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000856:	971e      	str	r7, [sp, #120]	; 0x78
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000858:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800085c:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	961d      	str	r6, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000860:	f001 ffec 	bl	800283c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000864:	2220      	movs	r2, #32
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000866:	a91b      	add	r1, sp, #108	; 0x6c
 8000868:	4839      	ldr	r0, [pc, #228]	; (8000950 <main+0x320>)
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800086a:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086c:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	961d      	str	r6, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000872:	f001 ffe3 	bl	800283c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000876:	f241 020c 	movw	r2, #4108	; 0x100c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800087a:	a91b      	add	r1, sp, #108	; 0x6c
 800087c:	4835      	ldr	r0, [pc, #212]	; (8000954 <main+0x324>)
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800087e:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000880:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	961d      	str	r6, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000886:	f001 ffd9 	bl	800283c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800088a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800088e:	a91b      	add	r1, sp, #108	; 0x6c
 8000890:	4839      	ldr	r0, [pc, #228]	; (8000978 <main+0x348>)
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000892:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000894:	961c      	str	r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	961d      	str	r6, [sp, #116]	; 0x74
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000898:	f001 ffd0 	bl	800283c <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800089c:	a91b      	add	r1, sp, #108	; 0x6c
 800089e:	482e      	ldr	r0, [pc, #184]	; (8000958 <main+0x328>)
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80008a0:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	961d      	str	r6, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f001 ffc7 	bl	800283c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008ae:	2310      	movs	r3, #16
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008b0:	a91b      	add	r1, sp, #108	; 0x6c
 80008b2:	4827      	ldr	r0, [pc, #156]	; (8000950 <main+0x320>)
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008b4:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b6:	961c      	str	r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	961d      	str	r6, [sp, #116]	; 0x74
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f001 ffbf 	bl	800283c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80008be:	f248 0204 	movw	r2, #32772	; 0x8004
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80008c2:	a91b      	add	r1, sp, #108	; 0x6c
 80008c4:	4825      	ldr	r0, [pc, #148]	; (800095c <main+0x32c>)
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80008c6:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c8:	961c      	str	r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	961d      	str	r6, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80008cc:	f001 ffb6 	bl	800283c <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008d0:	2305      	movs	r3, #5
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80008d2:	a91b      	add	r1, sp, #108	; 0x6c
 80008d4:	481f      	ldr	r0, [pc, #124]	; (8000954 <main+0x324>)
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80008d6:	951b      	str	r5, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008da:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	961d      	str	r6, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f001 ffac 	bl	800283c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80008e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80008e8:	a91b      	add	r1, sp, #108	; 0x6c
 80008ea:	481c      	ldr	r0, [pc, #112]	; (800095c <main+0x32c>)
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80008ec:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	961d      	str	r6, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f001 ffa2 	bl	800283c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80008f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80008fc:	a91b      	add	r1, sp, #108	; 0x6c
 80008fe:	4815      	ldr	r0, [pc, #84]	; (8000954 <main+0x324>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000900:	971c      	str	r7, [sp, #112]	; 0x70
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000902:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	961d      	str	r6, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000906:	f001 ff99 	bl	800283c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800090a:	4b19      	ldr	r3, [pc, #100]	; (8000970 <main+0x340>)
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800090c:	a91b      	add	r1, sp, #108	; 0x6c
 800090e:	4811      	ldr	r0, [pc, #68]	; (8000954 <main+0x324>)
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000910:	931c      	str	r3, [sp, #112]	; 0x70
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000912:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	961d      	str	r6, [sp, #116]	; 0x74
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000918:	931b      	str	r3, [sp, #108]	; 0x6c
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800091a:	f001 ff8f 	bl	800283c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800091e:	2310      	movs	r3, #16
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000920:	a91b      	add	r1, sp, #108	; 0x6c
 8000922:	480e      	ldr	r0, [pc, #56]	; (800095c <main+0x32c>)
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000924:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000928:	971e      	str	r7, [sp, #120]	; 0x78
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800092a:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	961d      	str	r6, [sp, #116]	; 0x74
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000930:	f001 ff84 	bl	800283c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000934:	22c8      	movs	r2, #200	; 0xc8
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000936:	a91b      	add	r1, sp, #108	; 0x6c
 8000938:	4809      	ldr	r0, [pc, #36]	; (8000960 <main+0x330>)
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800093a:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093c:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	961d      	str	r6, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000942:	f001 ff7b 	bl	800283c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000946:	2305      	movs	r3, #5
 8000948:	e018      	b.n	800097c <main+0x34c>
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800
 8000950:	40020c00 	.word	0x40020c00
 8000954:	40022000 	.word	0x40022000
 8000958:	40022800 	.word	0x40022800
 800095c:	40021c00 	.word	0x40021c00
 8000960:	40021800 	.word	0x40021800
 8000964:	40021000 	.word	0x40021000
 8000968:	40020400 	.word	0x40020400
 800096c:	40022400 	.word	0x40022400
 8000970:	10120000 	.word	0x10120000
 8000974:	40020000 	.word	0x40020000
 8000978:	40020800 	.word	0x40020800
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800097c:	a91b      	add	r1, sp, #108	; 0x6c
 800097e:	48c3      	ldr	r0, [pc, #780]	; (8000c8c <main+0x65c>)
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000980:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000984:	971e      	str	r7, [sp, #120]	; 0x78
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000986:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	961d      	str	r6, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098c:	f001 ff56 	bl	800283c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000990:	2232      	movs	r2, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000992:	a91b      	add	r1, sp, #108	; 0x6c
 8000994:	48bd      	ldr	r0, [pc, #756]	; (8000c8c <main+0x65c>)
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000996:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000998:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099a:	971e      	str	r7, [sp, #120]	; 0x78
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800099c:	f8cd a07c 	str.w	sl, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	961d      	str	r6, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a2:	f001 ff4b 	bl	800283c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80009a6:	a91b      	add	r1, sp, #108	; 0x6c
 80009a8:	48b9      	ldr	r0, [pc, #740]	; (8000c90 <main+0x660>)
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80009aa:	f8cd b06c 	str.w	fp, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ae:	961c      	str	r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	961d      	str	r6, [sp, #116]	; 0x74
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f001 ff43 	bl	800283c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80009b6:	2286      	movs	r2, #134	; 0x86
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b8:	a91b      	add	r1, sp, #108	; 0x6c
 80009ba:	48b6      	ldr	r0, [pc, #728]	; (8000c94 <main+0x664>)
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80009bc:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c0:	971e      	str	r7, [sp, #120]	; 0x78
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009c2:	f8cd a07c 	str.w	sl, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	961d      	str	r6, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c8:	f001 ff38 	bl	800283c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80009cc:	2328      	movs	r3, #40	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ce:	a91b      	add	r1, sp, #108	; 0x6c
 80009d0:	48b0      	ldr	r0, [pc, #704]	; (8000c94 <main+0x664>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80009d2:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d8:	971e      	str	r7, [sp, #120]	; 0x78
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80009da:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	961d      	str	r6, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009de:	f001 ff2d 	bl	800283c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80009e2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009e6:	2305      	movs	r3, #5
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e8:	a91b      	add	r1, sp, #108	; 0x6c
 80009ea:	48ab      	ldr	r0, [pc, #684]	; (8000c98 <main+0x668>)
  hadc3.Instance = ADC3;
 80009ec:	f8df 92e4 	ldr.w	r9, [pc, #740]	; 8000cd4 <main+0x6a4>
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80009f0:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009f2:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	961d      	str	r6, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fa:	f001 ff1f 	bl	800283c <HAL_GPIO_Init>
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009fe:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  hadc3.Instance = ADC3;
 8000a02:	4ba6      	ldr	r3, [pc, #664]	; (8000c9c <main+0x66c>)
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000a04:	4648      	mov	r0, r9
  hadc3.Init.NbrOfConversion = 1;
 8000a06:	f8c9 401c 	str.w	r4, [r9, #28]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a0a:	f8c9 1004 	str.w	r1, [r9, #4]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a0e:	49a4      	ldr	r1, [pc, #656]	; (8000ca0 <main+0x670>)
  hadc3.Instance = ADC3;
 8000a10:	f8c9 3000 	str.w	r3, [r9]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a14:	f8c9 4014 	str.w	r4, [r9, #20]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a18:	f8c9 1028 	str.w	r1, [r9, #40]	; 0x28
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000a1c:	f8c9 6008 	str.w	r6, [r9, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a20:	f8c9 6010 	str.w	r6, [r9, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000a24:	f8c9 6018 	str.w	r6, [r9, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000a28:	f8c9 6020 	str.w	r6, [r9, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a2c:	f8c9 602c 	str.w	r6, [r9, #44]	; 0x2c
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a30:	f8c9 600c 	str.w	r6, [r9, #12]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000a34:	f8c9 6030 	str.w	r6, [r9, #48]	; 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a38:	961b      	str	r6, [sp, #108]	; 0x6c
 8000a3a:	961c      	str	r6, [sp, #112]	; 0x70
 8000a3c:	961d      	str	r6, [sp, #116]	; 0x74
 8000a3e:	961e      	str	r6, [sp, #120]	; 0x78
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000a40:	f001 f956 	bl	8001cf0 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a44:	4648      	mov	r0, r9
 8000a46:	a91b      	add	r1, sp, #108	; 0x6c
  sConfig.Channel = ADC_CHANNEL_4;
 8000a48:	f8cd b06c 	str.w	fp, [sp, #108]	; 0x6c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a4c:	941c      	str	r4, [sp, #112]	; 0x70
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a4e:	961d      	str	r6, [sp, #116]	; 0x74
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a50:	f001 f9fe 	bl	8001e50 <HAL_ADC_ConfigChannel>
  hdcmi.Instance = DCMI;
 8000a54:	4a93      	ldr	r2, [pc, #588]	; (8000ca4 <main+0x674>)
 8000a56:	4994      	ldr	r1, [pc, #592]	; (8000ca8 <main+0x678>)
  hdma2d.Instance = DMA2D;
 8000a58:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8000cd8 <main+0x6a8>
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000a5c:	4610      	mov	r0, r2
  hdcmi.Instance = DCMI;
 8000a5e:	6011      	str	r1, [r2, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000a60:	6056      	str	r6, [r2, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000a62:	6096      	str	r6, [r2, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000a64:	60d6      	str	r6, [r2, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000a66:	6116      	str	r6, [r2, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000a68:	6156      	str	r6, [r2, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000a6a:	6196      	str	r6, [r2, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000a6c:	6216      	str	r6, [r2, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000a6e:	6256      	str	r6, [r2, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000a70:	6296      	str	r6, [r2, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000a72:	62d6      	str	r6, [r2, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000a74:	6316      	str	r6, [r2, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000a76:	f001 fafb 	bl	8002070 <HAL_DCMI_Init>
  hdma2d.Instance = DMA2D;
 8000a7a:	498c      	ldr	r1, [pc, #560]	; (8000cac <main+0x67c>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000a7c:	4648      	mov	r0, r9
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000a7e:	f8c9 6028 	str.w	r6, [r9, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000a82:	f8c9 602c 	str.w	r6, [r9, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000a86:	f8c9 6030 	str.w	r6, [r9, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000a8a:	f8c9 6034 	str.w	r6, [r9, #52]	; 0x34
  hdma2d.Instance = DMA2D;
 8000a8e:	f8c9 1000 	str.w	r1, [r9]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000a92:	f8c9 6004 	str.w	r6, [r9, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000a96:	f8c9 6008 	str.w	r6, [r9, #8]
  hdma2d.Init.OutputOffset = 0;
 8000a9a:	f8c9 600c 	str.w	r6, [r9, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000a9e:	f001 fd9d 	bl	80025dc <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000aa2:	4621      	mov	r1, r4
 8000aa4:	4648      	mov	r0, r9
 8000aa6:	f001 fe73 	bl	8002790 <HAL_DMA2D_ConfigLayer>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000aaa:	4a81      	ldr	r2, [pc, #516]	; (8000cb0 <main+0x680>)
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000aac:	2340      	movs	r3, #64	; 0x40
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000aae:	2110      	movs	r1, #16
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000ab0:	f8df c228 	ldr.w	ip, [pc, #552]	; 8000cdc <main+0x6ac>
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000ab4:	f44f 7ec0 	mov.w	lr, #384	; 0x180
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000ab8:	6153      	str	r3, [r2, #20]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000aba:	f44f 6300 	mov.w	r3, #2048	; 0x800
  hi2c1.Instance = I2C1;
 8000abe:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8000ce0 <main+0x6b0>
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000ac2:	4610      	mov	r0, r2
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000ac4:	6213      	str	r3, [r2, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000ac6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000aca:	6111      	str	r1, [r2, #16]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000acc:	a91b      	add	r1, sp, #108	; 0x6c
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000ace:	6253      	str	r3, [r2, #36]	; 0x24
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000ad0:	2307      	movs	r3, #7
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000ad2:	f8c2 c000 	str.w	ip, [r2]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000ad6:	f8c2 e018 	str.w	lr, [r2, #24]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000ada:	f8c2 b00c 	str.w	fp, [r2, #12]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000ade:	6056      	str	r6, [r2, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000ae0:	6096      	str	r6, [r2, #8]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000ae2:	61d6      	str	r6, [r2, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000ae4:	6296      	str	r6, [r2, #40]	; 0x28
  SdramTiming.SelfRefreshTime = 4;
 8000ae6:	f8cd b074 	str.w	fp, [sp, #116]	; 0x74
  pLayerCfg.Alpha = 255;
 8000aea:	f04f 0bff 	mov.w	fp, #255	; 0xff
  SdramTiming.WriteRecoveryTime = 3;
 8000aee:	971f      	str	r7, [sp, #124]	; 0x7c
  SdramTiming.LoadToActiveDelay = 2;
 8000af0:	951b      	str	r5, [sp, #108]	; 0x6c
  SdramTiming.RPDelay = 2;
 8000af2:	9520      	str	r5, [sp, #128]	; 0x80
  SdramTiming.RCDDelay = 2;
 8000af4:	9521      	str	r5, [sp, #132]	; 0x84
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000af6:	931c      	str	r3, [sp, #112]	; 0x70
  SdramTiming.RowCycleDelay = 7;
 8000af8:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000afa:	f004 fb29 	bl	8005150 <HAL_SDRAM_Init>
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000afe:	4b6d      	ldr	r3, [pc, #436]	; (8000cb4 <main+0x684>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b00:	4648      	mov	r0, r9
  hi2c1.Instance = I2C1;
 8000b02:	496d      	ldr	r1, [pc, #436]	; (8000cb8 <main+0x688>)
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000b04:	9301      	str	r3, [sp, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b06:	f8c9 400c 	str.w	r4, [r9, #12]
  hi2c1.Init.OwnAddress1 = 0;
 8000b0a:	f8c9 6008 	str.w	r6, [r9, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b0e:	f8c9 6010 	str.w	r6, [r9, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b12:	f8c9 6014 	str.w	r6, [r9, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b16:	f8c9 6018 	str.w	r6, [r9, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b1a:	f8c9 601c 	str.w	r6, [r9, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b1e:	f8c9 6020 	str.w	r6, [r9, #32]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000b22:	e889 000a 	stmia.w	r9, {r1, r3}
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b26:	f002 f9c3 	bl	8002eb0 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b2a:	4631      	mov	r1, r6
 8000b2c:	4648      	mov	r0, r9
 8000b2e:	f002 fbfb 	bl	8003328 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b32:	4631      	mov	r1, r6
 8000b34:	4648      	mov	r0, r9
  hi2c3.Instance = I2C3;
 8000b36:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000ce4 <main+0x6b4>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b3a:	f002 fc1d 	bl	8003378 <HAL_I2CEx_ConfigDigitalFilter>
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000b3e:	9b01      	ldr	r3, [sp, #4]
  hi2c3.Instance = I2C3;
 8000b40:	495e      	ldr	r1, [pc, #376]	; (8000cbc <main+0x68c>)
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b42:	4648      	mov	r0, r9
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000b44:	f8c9 3004 	str.w	r3, [r9, #4]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b48:	f8c9 400c 	str.w	r4, [r9, #12]
  hi2c3.Instance = I2C3;
 8000b4c:	f8c9 1000 	str.w	r1, [r9]
  hi2c3.Init.OwnAddress1 = 0;
 8000b50:	f8c9 6008 	str.w	r6, [r9, #8]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b54:	f8c9 6010 	str.w	r6, [r9, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000b58:	f8c9 6014 	str.w	r6, [r9, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b5c:	f8c9 6018 	str.w	r6, [r9, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b60:	f8c9 601c 	str.w	r6, [r9, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b64:	f8c9 6020 	str.w	r6, [r9, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b68:	f002 f9a2 	bl	8002eb0 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b6c:	4631      	mov	r1, r6
 8000b6e:	4648      	mov	r0, r9
 8000b70:	f002 fbda 	bl	8003328 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b74:	4631      	mov	r1, r6
 8000b76:	4648      	mov	r0, r9
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000b78:	f44f 69c0 	mov.w	r9, #1536	; 0x600
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b7c:	f002 fbfc 	bl	8003378 <HAL_I2CEx_ConfigDigitalFilter>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b80:	4631      	mov	r1, r6
 8000b82:	2234      	movs	r2, #52	; 0x34
 8000b84:	a81b      	add	r0, sp, #108	; 0x6c
 8000b86:	f018 fda6 	bl	80196d6 <memset>
  hltdc.Instance = LTDC;
 8000b8a:	4a4d      	ldr	r2, [pc, #308]	; (8000cc0 <main+0x690>)
 8000b8c:	494d      	ldr	r1, [pc, #308]	; (8000cc4 <main+0x694>)
  hltdc.Init.HorizontalSync = 40;
 8000b8e:	2328      	movs	r3, #40	; 0x28
  hltdc.Init.AccumulatedHBP = 53;
 8000b90:	2035      	movs	r0, #53	; 0x35
  hltdc.Init.VerticalSync = 9;
 8000b92:	f04f 0c09 	mov.w	ip, #9
  hltdc.Init.HorizontalSync = 40;
 8000b96:	6153      	str	r3, [r2, #20]
  hltdc.Init.AccumulatedActiveW = 533;
 8000b98:	f240 2e15 	movw	lr, #533	; 0x215
  hltdc.Init.AccumulatedVBP = 11;
 8000b9c:	f8c2 a020 	str.w	sl, [r2, #32]
  hltdc.Init.TotalWidth = 565;
 8000ba0:	f240 2335 	movw	r3, #565	; 0x235
  hltdc.Instance = LTDC;
 8000ba4:	6011      	str	r1, [r2, #0]
  hltdc.Init.AccumulatedActiveH = 283;
 8000ba6:	f240 1a1b 	movw	sl, #283	; 0x11b
  hltdc.Init.TotalHeigh = 285;
 8000baa:	f240 111d 	movw	r1, #285	; 0x11d
  hltdc.Init.AccumulatedHBP = 53;
 8000bae:	61d0      	str	r0, [r2, #28]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000bb0:	4610      	mov	r0, r2
  hltdc.Init.VerticalSync = 9;
 8000bb2:	f8c2 c018 	str.w	ip, [r2, #24]
  hltdc.Init.AccumulatedActiveW = 533;
 8000bb6:	f8c2 e024 	str.w	lr, [r2, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000bba:	f8c2 a028 	str.w	sl, [r2, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000bbe:	46c2      	mov	sl, r8
  hltdc.Init.TotalWidth = 565;
 8000bc0:	62d3      	str	r3, [r2, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000bc2:	6311      	str	r1, [r2, #48]	; 0x30
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000bc4:	6056      	str	r6, [r2, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000bc6:	6096      	str	r6, [r2, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000bc8:	60d6      	str	r6, [r2, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000bca:	6116      	str	r6, [r2, #16]
  hltdc.Init.Backcolor.Blue = 0;
 8000bcc:	f882 6034 	strb.w	r6, [r2, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000bd0:	f882 6035 	strb.w	r6, [r2, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000bd4:	f882 6036 	strb.w	r6, [r2, #54]	; 0x36
  hltdc.Init.TotalHeigh = 285;
 8000bd8:	9201      	str	r2, [sp, #4]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000bda:	f002 fc85 	bl	80034e8 <HAL_LTDC_Init>
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000bde:	2307      	movs	r3, #7
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000be0:	9a01      	ldr	r2, [sp, #4]
  pLayerCfg.WindowX1 = 480;
 8000be2:	f44f 7cf0 	mov.w	ip, #480	; 0x1e0
  pLayerCfg.WindowY1 = 272;
 8000be6:	f44f 7e88 	mov.w	lr, #272	; 0x110
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000bea:	9323      	str	r3, [sp, #140]	; 0x8c
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000bec:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000bf0:	4610      	mov	r0, r2
 8000bf2:	a91b      	add	r1, sp, #108	; 0x6c
 8000bf4:	4632      	mov	r2, r6
  pLayerCfg.WindowX1 = 480;
 8000bf6:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
  pLayerCfg.ImageWidth = 480;
 8000bfa:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  pLayerCfg.WindowY1 = 272;
 8000bfe:	f8cd e078 	str.w	lr, [sp, #120]	; 0x78
  pLayerCfg.ImageHeight = 272;
 8000c02:	f8cd e098 	str.w	lr, [sp, #152]	; 0x98
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000c06:	9324      	str	r3, [sp, #144]	; 0x90
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000c08:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
  pLayerCfg.WindowX0 = 0;
 8000c0c:	961b      	str	r6, [sp, #108]	; 0x6c
  pLayerCfg.WindowY0 = 0;
 8000c0e:	961d      	str	r6, [sp, #116]	; 0x74
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000c10:	961f      	str	r6, [sp, #124]	; 0x7c
  pLayerCfg.Alpha0 = 0;
 8000c12:	9621      	str	r6, [sp, #132]	; 0x84
  pLayerCfg.Backcolor.Blue = 0;
 8000c14:	f88d 609c 	strb.w	r6, [sp, #156]	; 0x9c
  pLayerCfg.Backcolor.Green = 0;
 8000c18:	f88d 609d 	strb.w	r6, [sp, #157]	; 0x9d
  pLayerCfg.Backcolor.Red = 0;
 8000c1c:	f88d 609e 	strb.w	r6, [sp, #158]	; 0x9e
  pLayerCfg.Alpha = 255;
 8000c20:	f8cd b080 	str.w	fp, [sp, #128]	; 0x80
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000c24:	f002 fcdc 	bl	80035e0 <HAL_LTDC_ConfigLayer>
  hqspi.Instance = QUADSPI;
 8000c28:	4a27      	ldr	r2, [pc, #156]	; (8000cc8 <main+0x698>)
 8000c2a:	4928      	ldr	r1, [pc, #160]	; (8000ccc <main+0x69c>)
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c2c:	4610      	mov	r0, r2
  hrtc.Instance = RTC;
 8000c2e:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8000ce8 <main+0x6b8>
  hqspi.Init.FifoThreshold = 1;
 8000c32:	6094      	str	r4, [r2, #8]
  hqspi.Init.FlashSize = 1;
 8000c34:	6114      	str	r4, [r2, #16]
  hqspi.Instance = QUADSPI;
 8000c36:	6011      	str	r1, [r2, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000c38:	f8c2 b004 	str.w	fp, [r2, #4]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000c3c:	60d6      	str	r6, [r2, #12]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000c3e:	6156      	str	r6, [r2, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c40:	6196      	str	r6, [r2, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000c42:	61d6      	str	r6, [r2, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000c44:	6216      	str	r6, [r2, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c46:	f002 fd6b 	bl	8003720 <HAL_QSPI_Init>
  RTC_AlarmTypeDef sAlarm = {0};
 8000c4a:	4631      	mov	r1, r6
 8000c4c:	222c      	movs	r2, #44	; 0x2c
 8000c4e:	a81b      	add	r0, sp, #108	; 0x6c
  RTC_TimeTypeDef sTime = {0};
 8000c50:	9614      	str	r6, [sp, #80]	; 0x50
  RTC_DateTypeDef sDate = {0};
 8000c52:	9610      	str	r6, [sp, #64]	; 0x40
  RTC_TimeTypeDef sTime = {0};
 8000c54:	9615      	str	r6, [sp, #84]	; 0x54
 8000c56:	9616      	str	r6, [sp, #88]	; 0x58
 8000c58:	9617      	str	r6, [sp, #92]	; 0x5c
 8000c5a:	9618      	str	r6, [sp, #96]	; 0x60
 8000c5c:	9619      	str	r6, [sp, #100]	; 0x64
  RTC_AlarmTypeDef sAlarm = {0};
 8000c5e:	f018 fd3a 	bl	80196d6 <memset>
  hrtc.Instance = RTC;
 8000c62:	491b      	ldr	r1, [pc, #108]	; (8000cd0 <main+0x6a0>)
  hrtc.Init.AsynchPrediv = 127;
 8000c64:	227f      	movs	r2, #127	; 0x7f
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c66:	4648      	mov	r0, r9
  hrtc.Init.SynchPrediv = 255;
 8000c68:	f8c9 b00c 	str.w	fp, [r9, #12]
  hrtc.Instance = RTC;
 8000c6c:	f8c9 1000 	str.w	r1, [r9]
  hrtc.Init.AsynchPrediv = 127;
 8000c70:	f8c9 2008 	str.w	r2, [r9, #8]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c74:	f8c9 6004 	str.w	r6, [r9, #4]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c78:	f8c9 6010 	str.w	r6, [r9, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c7c:	f8c9 6014 	str.w	r6, [r9, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c80:	f8c9 6018 	str.w	r6, [r9, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c84:	f003 fcb8 	bl	80045f8 <HAL_RTC_Init>
 8000c88:	e030      	b.n	8000cec <main+0x6bc>
 8000c8a:	bf00      	nop
 8000c8c:	40020800 	.word	0x40020800
 8000c90:	40021800 	.word	0x40021800
 8000c94:	40020000 	.word	0x40020000
 8000c98:	40020400 	.word	0x40020400
 8000c9c:	40012200 	.word	0x40012200
 8000ca0:	0f000001 	.word	0x0f000001
 8000ca4:	200178f8 	.word	0x200178f8
 8000ca8:	50050000 	.word	0x50050000
 8000cac:	4002b000 	.word	0x4002b000
 8000cb0:	20017b48 	.word	0x20017b48
 8000cb4:	00c0eaff 	.word	0x00c0eaff
 8000cb8:	40005400 	.word	0x40005400
 8000cbc:	40005c00 	.word	0x40005c00
 8000cc0:	20017808 	.word	0x20017808
 8000cc4:	40016800 	.word	0x40016800
 8000cc8:	20017b7c 	.word	0x20017b7c
 8000ccc:	a0001000 	.word	0xa0001000
 8000cd0:	40002800 	.word	0x40002800
 8000cd4:	200178b0 	.word	0x200178b0
 8000cd8:	20017a88 	.word	0x20017a88
 8000cdc:	a0000140 	.word	0xa0000140
 8000ce0:	200176b8 	.word	0x200176b8
 8000ce4:	200175a8 	.word	0x200175a8
 8000ce8:	200179b8 	.word	0x200179b8
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000cec:	4622      	mov	r2, r4
 8000cee:	a914      	add	r1, sp, #80	; 0x50
 8000cf0:	4648      	mov	r0, r9
  sTime.Hours = 0x0;
 8000cf2:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
  sTime.Minutes = 0x0;
 8000cf6:	f88d 6051 	strb.w	r6, [sp, #81]	; 0x51
  sTime.Seconds = 0x0;
 8000cfa:	f88d 6052 	strb.w	r6, [sp, #82]	; 0x52
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000cfe:	9618      	str	r6, [sp, #96]	; 0x60
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d00:	9619      	str	r6, [sp, #100]	; 0x64
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000d02:	f003 fd4b 	bl	800479c <HAL_RTC_SetTime>
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000d06:	4622      	mov	r2, r4
 8000d08:	4648      	mov	r0, r9
 8000d0a:	a910      	add	r1, sp, #64	; 0x40
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000d0c:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
  sDate.Month = RTC_MONTH_JANUARY;
 8000d10:	f88d 4041 	strb.w	r4, [sp, #65]	; 0x41
  sDate.Date = 0x1;
 8000d14:	f88d 4042 	strb.w	r4, [sp, #66]	; 0x42
  sDate.Year = 0x0;
 8000d18:	f88d 6043 	strb.w	r6, [sp, #67]	; 0x43
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000d1c:	f003 fcb6 	bl	800468c <HAL_RTC_SetDate>
  sAlarm.Alarm = RTC_ALARM_A;
 8000d20:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000d24:	4622      	mov	r2, r4
 8000d26:	a91b      	add	r1, sp, #108	; 0x6c
 8000d28:	4648      	mov	r0, r9
  sAlarm.AlarmDateWeekDay = 0x1;
 8000d2a:	f88d 4090 	strb.w	r4, [sp, #144]	; 0x90
  sAlarm.Alarm = RTC_ALARM_A;
 8000d2e:	9325      	str	r3, [sp, #148]	; 0x94
  sAlarm.AlarmTime.Hours = 0x0;
 8000d30:	f88d 606c 	strb.w	r6, [sp, #108]	; 0x6c
  sAlarm.AlarmTime.Minutes = 0x0;
 8000d34:	f88d 606d 	strb.w	r6, [sp, #109]	; 0x6d
  sAlarm.AlarmTime.Seconds = 0x0;
 8000d38:	f88d 606e 	strb.w	r6, [sp, #110]	; 0x6e
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000d3c:	961c      	str	r6, [sp, #112]	; 0x70
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d3e:	961f      	str	r6, [sp, #124]	; 0x7c
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d40:	9620      	str	r6, [sp, #128]	; 0x80
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000d42:	9621      	str	r6, [sp, #132]	; 0x84
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000d44:	9622      	str	r6, [sp, #136]	; 0x88
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000d46:	9623      	str	r6, [sp, #140]	; 0x8c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000d48:	f003 fb3e 	bl	80043c8 <HAL_RTC_SetAlarm>
  sAlarm.Alarm = RTC_ALARM_B;
 8000d4c:	f44f 7300 	mov.w	r3, #512	; 0x200
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000d50:	4622      	mov	r2, r4
 8000d52:	a91b      	add	r1, sp, #108	; 0x6c
 8000d54:	4648      	mov	r0, r9
  sAlarm.Alarm = RTC_ALARM_B;
 8000d56:	9325      	str	r3, [sp, #148]	; 0x94
  sAlarm.AlarmDateWeekDay = 0x1;
 8000d58:	f88d 4090 	strb.w	r4, [sp, #144]	; 0x90
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000d5c:	f003 fb34 	bl	80043c8 <HAL_RTC_SetAlarm>
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000d60:	462a      	mov	r2, r5
 8000d62:	4631      	mov	r1, r6
 8000d64:	4648      	mov	r0, r9
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000d66:	2540      	movs	r5, #64	; 0x40
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000d68:	f003 fdae 	bl	80048c8 <HAL_RTCEx_SetTimeStamp>
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000d6c:	4aa1      	ldr	r2, [pc, #644]	; (8000ff4 <main+0x9c4>)
 8000d6e:	4ba2      	ldr	r3, [pc, #648]	; (8000ff8 <main+0x9c8>)
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000d70:	49a2      	ldr	r1, [pc, #648]	; (8000ffc <main+0x9cc>)
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000d72:	4610      	mov	r0, r2
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000d74:	6355      	str	r5, [r2, #52]	; 0x34
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d76:	2560      	movs	r5, #96	; 0x60
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000d78:	f8c2 8040 	str.w	r8, [r2, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000d7c:	6454      	str	r4, [r2, #68]	; 0x44
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000d7e:	65d4      	str	r4, [r2, #92]	; 0x5c
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000d80:	6013      	str	r3, [r2, #0]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000d82:	61d1      	str	r1, [r2, #28]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000d84:	6316      	str	r6, [r2, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000d86:	6056      	str	r6, [r2, #4]
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000d88:	6396      	str	r6, [r2, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000d8a:	63d6      	str	r6, [r2, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000d8c:	6096      	str	r6, [r2, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d8e:	6116      	str	r6, [r2, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000d90:	6156      	str	r6, [r2, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000d92:	6196      	str	r6, [r2, #24]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d94:	60d6      	str	r6, [r2, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d96:	6256      	str	r6, [r2, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d98:	6296      	str	r6, [r2, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d9a:	62d6      	str	r6, [r2, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000d9c:	6496      	str	r6, [r2, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000d9e:	64d6      	str	r6, [r2, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000da0:	6516      	str	r6, [r2, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000da2:	6556      	str	r6, [r2, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000da4:	6596      	str	r6, [r2, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000da6:	6616      	str	r6, [r2, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000da8:	f003 fdb8 	bl	800491c <HAL_SAI_Init>
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000dac:	4a94      	ldr	r2, [pc, #592]	; (8001000 <main+0x9d0>)
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000dae:	2340      	movs	r3, #64	; 0x40
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000db0:	4994      	ldr	r1, [pc, #592]	; (8001004 <main+0x9d4>)
  hsd1.Instance = SDMMC1;
 8000db2:	f8df 9278 	ldr.w	r9, [pc, #632]	; 800102c <main+0x9fc>
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000db6:	4610      	mov	r0, r2
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000db8:	6353      	str	r3, [r2, #52]	; 0x34
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000dba:	6011      	str	r1, [r2, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000dbc:	6057      	str	r7, [r2, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000dbe:	6094      	str	r4, [r2, #8]
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000dc0:	f8c2 8040 	str.w	r8, [r2, #64]	; 0x40
  huart1.Init.BaudRate = 115200;
 8000dc4:	f44f 38e1 	mov.w	r8, #115200	; 0x1c200
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000dc8:	6454      	str	r4, [r2, #68]	; 0x44
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000dca:	65d4      	str	r4, [r2, #92]	; 0x5c
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000dcc:	6316      	str	r6, [r2, #48]	; 0x30
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000dce:	6396      	str	r6, [r2, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000dd0:	63d6      	str	r6, [r2, #60]	; 0x3c
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000dd2:	6116      	str	r6, [r2, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000dd4:	6196      	str	r6, [r2, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000dd6:	60d6      	str	r6, [r2, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000dd8:	6256      	str	r6, [r2, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000dda:	6296      	str	r6, [r2, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000ddc:	62d6      	str	r6, [r2, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000dde:	6496      	str	r6, [r2, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000de0:	64d6      	str	r6, [r2, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000de2:	6516      	str	r6, [r2, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000de4:	6556      	str	r6, [r2, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000de6:	6596      	str	r6, [r2, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000de8:	6616      	str	r6, [r2, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000dea:	f003 fd97 	bl	800491c <HAL_SAI_Init>
  hsd1.Instance = SDMMC1;
 8000dee:	4a86      	ldr	r2, [pc, #536]	; (8001008 <main+0x9d8>)
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000df0:	4648      	mov	r0, r9
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000df2:	f8c9 6004 	str.w	r6, [r9, #4]
  hsd1.Instance = SDMMC1;
 8000df6:	f8c9 2000 	str.w	r2, [r9]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000dfa:	f8c9 6008 	str.w	r6, [r9, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000dfe:	f8c9 600c 	str.w	r6, [r9, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000e02:	f8c9 6010 	str.w	r6, [r9, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000e06:	f8c9 6014 	str.w	r6, [r9, #20]
  hsd1.Init.ClockDiv = 0;
 8000e0a:	f8c9 6018 	str.w	r6, [r9, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000e0e:	f004 f8f3 	bl	8004ff8 <HAL_SD_Init>
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8000e12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e16:	4648      	mov	r0, r9
 8000e18:	f004 f90a 	bl	8005030 <HAL_SD_ConfigWideBusOperation>
  htim1.Instance = TIM1;
 8000e1c:	4c7b      	ldr	r4, [pc, #492]	; (800100c <main+0x9dc>)
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e1e:	4631      	mov	r1, r6
 8000e20:	222c      	movs	r2, #44	; 0x2c
 8000e22:	a81b      	add	r0, sp, #108	; 0x6c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e24:	9610      	str	r6, [sp, #64]	; 0x40
 8000e26:	9611      	str	r6, [sp, #68]	; 0x44
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e28:	f04f 090c 	mov.w	r9, #12
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e2c:	9612      	str	r6, [sp, #72]	; 0x48
 8000e2e:	9613      	str	r6, [sp, #76]	; 0x4c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e30:	960d      	str	r6, [sp, #52]	; 0x34
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e32:	9614      	str	r6, [sp, #80]	; 0x50
 8000e34:	9615      	str	r6, [sp, #84]	; 0x54
 8000e36:	9616      	str	r6, [sp, #88]	; 0x58
 8000e38:	9617      	str	r6, [sp, #92]	; 0x5c
 8000e3a:	9618      	str	r6, [sp, #96]	; 0x60
 8000e3c:	9619      	str	r6, [sp, #100]	; 0x64
 8000e3e:	961a      	str	r6, [sp, #104]	; 0x68
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e40:	960e      	str	r6, [sp, #56]	; 0x38
 8000e42:	960f      	str	r6, [sp, #60]	; 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e44:	f018 fc47 	bl	80196d6 <memset>
  htim1.Instance = TIM1;
 8000e48:	4a71      	ldr	r2, [pc, #452]	; (8001010 <main+0x9e0>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e4a:	4620      	mov	r0, r4
  htim1.Init.Prescaler = 0;
 8000e4c:	6066      	str	r6, [r4, #4]
  htim1.Instance = TIM1;
 8000e4e:	6022      	str	r2, [r4, #0]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e50:	60a6      	str	r6, [r4, #8]
  htim1.Init.Period = 0;
 8000e52:	60e6      	str	r6, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e54:	6126      	str	r6, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e56:	6166      	str	r6, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e58:	61a6      	str	r6, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e5a:	f004 fbeb 	bl	8005634 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e62:	a910      	add	r1, sp, #64	; 0x40
 8000e64:	4620      	mov	r0, r4
  htim12.Instance = TIM12;
 8000e66:	4f6b      	ldr	r7, [pc, #428]	; (8001014 <main+0x9e4>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e68:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e6a:	f004 f9cd 	bl	8005208 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e6e:	4620      	mov	r0, r4
 8000e70:	f004 fbfc 	bl	800566c <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e74:	a90d      	add	r1, sp, #52	; 0x34
 8000e76:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e78:	960d      	str	r6, [sp, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e7a:	960e      	str	r6, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e7c:	960f      	str	r6, [sp, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e7e:	f004 fd2f 	bl	80058e0 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e82:	4632      	mov	r2, r6
 8000e84:	a914      	add	r1, sp, #80	; 0x50
 8000e86:	4620      	mov	r0, r4
  sConfigOC.Pulse = 0;
 8000e88:	9615      	str	r6, [sp, #84]	; 0x54
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e8a:	9616      	str	r6, [sp, #88]	; 0x58
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e8c:	9617      	str	r6, [sp, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e8e:	9618      	str	r6, [sp, #96]	; 0x60
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e90:	9619      	str	r6, [sp, #100]	; 0x64
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e92:	961a      	str	r6, [sp, #104]	; 0x68
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e94:	9514      	str	r5, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e96:	f004 fda1 	bl	80059dc <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ea2:	a91b      	add	r1, sp, #108	; 0x6c
 8000ea4:	4620      	mov	r0, r4
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ea6:	9320      	str	r3, [sp, #128]	; 0x80
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ea8:	9223      	str	r2, [sp, #140]	; 0x8c
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000eaa:	961b      	str	r6, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000eac:	961c      	str	r6, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000eae:	961d      	str	r6, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.DeadTime = 0;
 8000eb0:	961e      	str	r6, [sp, #120]	; 0x78
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000eb2:	961f      	str	r6, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000eb4:	9621      	str	r6, [sp, #132]	; 0x84
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000eb6:	9622      	str	r6, [sp, #136]	; 0x88
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000eb8:	9624      	str	r6, [sp, #144]	; 0x90
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000eba:	9625      	str	r6, [sp, #148]	; 0x94
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ebc:	f004 fd3c 	bl	8005938 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 8000ec0:	4620      	mov	r0, r4
  htim2.Instance = TIM2;
 8000ec2:	4c55      	ldr	r4, [pc, #340]	; (8001018 <main+0x9e8>)
  HAL_TIM_MspPostInit(&htim1);
 8000ec4:	f000 fc9e 	bl	8001804 <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 8000ec8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ecc:	4620      	mov	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ece:	60a6      	str	r6, [r4, #8]
  htim2.Init.Period = 0;
 8000ed0:	60e6      	str	r6, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed2:	6126      	str	r6, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed4:	61a6      	str	r6, [r4, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ed6:	9614      	str	r6, [sp, #80]	; 0x50
 8000ed8:	9615      	str	r6, [sp, #84]	; 0x54
 8000eda:	9616      	str	r6, [sp, #88]	; 0x58
 8000edc:	9617      	str	r6, [sp, #92]	; 0x5c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ede:	9610      	str	r6, [sp, #64]	; 0x40
 8000ee0:	9611      	str	r6, [sp, #68]	; 0x44
 8000ee2:	9612      	str	r6, [sp, #72]	; 0x48
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ee4:	961b      	str	r6, [sp, #108]	; 0x6c
 8000ee6:	961c      	str	r6, [sp, #112]	; 0x70
 8000ee8:	961d      	str	r6, [sp, #116]	; 0x74
 8000eea:	961e      	str	r6, [sp, #120]	; 0x78
 8000eec:	961f      	str	r6, [sp, #124]	; 0x7c
 8000eee:	9620      	str	r6, [sp, #128]	; 0x80
 8000ef0:	9621      	str	r6, [sp, #132]	; 0x84
  htim2.Init.Prescaler = 0;
 8000ef2:	e884 0044 	stmia.w	r4, {r2, r6}
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ef6:	f004 fb9d 	bl	8005634 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000efa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000efe:	a914      	add	r1, sp, #80	; 0x50
 8000f00:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f02:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f04:	f004 f980 	bl	8005208 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f08:	4620      	mov	r0, r4
 8000f0a:	f004 fbaf 	bl	800566c <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f0e:	a910      	add	r1, sp, #64	; 0x40
 8000f10:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f12:	9610      	str	r6, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f14:	9612      	str	r6, [sp, #72]	; 0x48
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f16:	f004 fce3 	bl	80058e0 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f1a:	a91b      	add	r1, sp, #108	; 0x6c
 8000f1c:	4632      	mov	r2, r6
 8000f1e:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f20:	951b      	str	r5, [sp, #108]	; 0x6c
  sConfigOC.Pulse = 0;
 8000f22:	961c      	str	r6, [sp, #112]	; 0x70
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f24:	961d      	str	r6, [sp, #116]	; 0x74
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f26:	961f      	str	r6, [sp, #124]	; 0x7c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f28:	f004 fd58 	bl	80059dc <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim2);
 8000f2c:	4620      	mov	r0, r4
  htim3.Instance = TIM3;
 8000f2e:	4c3b      	ldr	r4, [pc, #236]	; (800101c <main+0x9ec>)
  HAL_TIM_MspPostInit(&htim2);
 8000f30:	f000 fc68 	bl	8001804 <HAL_TIM_MspPostInit>
  htim3.Instance = TIM3;
 8000f34:	4a3a      	ldr	r2, [pc, #232]	; (8001020 <main+0x9f0>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f36:	4620      	mov	r0, r4
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f38:	60a6      	str	r6, [r4, #8]
  htim3.Init.Period = 0;
 8000f3a:	60e6      	str	r6, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f3c:	6126      	str	r6, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f3e:	61a6      	str	r6, [r4, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f40:	9614      	str	r6, [sp, #80]	; 0x50
 8000f42:	9615      	str	r6, [sp, #84]	; 0x54
 8000f44:	9616      	str	r6, [sp, #88]	; 0x58
 8000f46:	9617      	str	r6, [sp, #92]	; 0x5c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f48:	9610      	str	r6, [sp, #64]	; 0x40
 8000f4a:	9611      	str	r6, [sp, #68]	; 0x44
 8000f4c:	9612      	str	r6, [sp, #72]	; 0x48
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f4e:	961b      	str	r6, [sp, #108]	; 0x6c
 8000f50:	961c      	str	r6, [sp, #112]	; 0x70
 8000f52:	961d      	str	r6, [sp, #116]	; 0x74
 8000f54:	961e      	str	r6, [sp, #120]	; 0x78
 8000f56:	961f      	str	r6, [sp, #124]	; 0x7c
 8000f58:	9620      	str	r6, [sp, #128]	; 0x80
 8000f5a:	9621      	str	r6, [sp, #132]	; 0x84
  htim3.Init.Prescaler = 0;
 8000f5c:	e884 0044 	stmia.w	r4, {r2, r6}
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f60:	f004 fb68 	bl	8005634 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f68:	a914      	add	r1, sp, #80	; 0x50
 8000f6a:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f6c:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f6e:	f004 f94b 	bl	8005208 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f72:	4620      	mov	r0, r4
 8000f74:	f004 fb7a 	bl	800566c <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f78:	a910      	add	r1, sp, #64	; 0x40
 8000f7a:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f7c:	9610      	str	r6, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f7e:	9612      	str	r6, [sp, #72]	; 0x48
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f80:	f004 fcae 	bl	80058e0 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f84:	a91b      	add	r1, sp, #108	; 0x6c
 8000f86:	4632      	mov	r2, r6
 8000f88:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f8a:	951b      	str	r5, [sp, #108]	; 0x6c
  sConfigOC.Pulse = 0;
 8000f8c:	961c      	str	r6, [sp, #112]	; 0x70
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f8e:	961d      	str	r6, [sp, #116]	; 0x74
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f90:	961f      	str	r6, [sp, #124]	; 0x7c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f92:	f004 fd23 	bl	80059dc <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 8000f96:	4620      	mov	r0, r4
  htim5.Instance = TIM5;
 8000f98:	4c22      	ldr	r4, [pc, #136]	; (8001024 <main+0x9f4>)
  HAL_TIM_MspPostInit(&htim3);
 8000f9a:	f000 fc33 	bl	8001804 <HAL_TIM_MspPostInit>
  htim5.Instance = TIM5;
 8000f9e:	4a22      	ldr	r2, [pc, #136]	; (8001028 <main+0x9f8>)
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000fa0:	4620      	mov	r0, r4
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa2:	60a6      	str	r6, [r4, #8]
  htim5.Init.Period = 0;
 8000fa4:	60e6      	str	r6, [r4, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa6:	6126      	str	r6, [r4, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa8:	61a6      	str	r6, [r4, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000faa:	9614      	str	r6, [sp, #80]	; 0x50
 8000fac:	9615      	str	r6, [sp, #84]	; 0x54
 8000fae:	9616      	str	r6, [sp, #88]	; 0x58
 8000fb0:	9617      	str	r6, [sp, #92]	; 0x5c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb2:	9610      	str	r6, [sp, #64]	; 0x40
 8000fb4:	9611      	str	r6, [sp, #68]	; 0x44
 8000fb6:	9612      	str	r6, [sp, #72]	; 0x48
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fb8:	961b      	str	r6, [sp, #108]	; 0x6c
 8000fba:	961c      	str	r6, [sp, #112]	; 0x70
 8000fbc:	961d      	str	r6, [sp, #116]	; 0x74
 8000fbe:	961e      	str	r6, [sp, #120]	; 0x78
 8000fc0:	961f      	str	r6, [sp, #124]	; 0x7c
 8000fc2:	9620      	str	r6, [sp, #128]	; 0x80
 8000fc4:	9621      	str	r6, [sp, #132]	; 0x84
  htim5.Init.Prescaler = 0;
 8000fc6:	e884 0044 	stmia.w	r4, {r2, r6}
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000fca:	f004 fb33 	bl	8005634 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000fd2:	a914      	add	r1, sp, #80	; 0x50
 8000fd4:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fd6:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000fd8:	f004 f916 	bl	8005208 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000fdc:	4620      	mov	r0, r4
 8000fde:	f004 fb45 	bl	800566c <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000fe2:	a910      	add	r1, sp, #64	; 0x40
 8000fe4:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe6:	9610      	str	r6, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe8:	9612      	str	r6, [sp, #72]	; 0x48
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000fea:	f004 fc79 	bl	80058e0 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fee:	a91b      	add	r1, sp, #108	; 0x6c
 8000ff0:	e01e      	b.n	8001030 <main+0xa00>
 8000ff2:	bf00      	nop
 8000ff4:	20017634 	.word	0x20017634
 8000ff8:	40015c04 	.word	0x40015c04
 8000ffc:	0002ee00 	.word	0x0002ee00
 8001000:	20017524 	.word	0x20017524
 8001004:	40015c24 	.word	0x40015c24
 8001008:	40012c00 	.word	0x40012c00
 800100c:	200179d8 	.word	0x200179d8
 8001010:	40010000 	.word	0x40010000
 8001014:	20017b08 	.word	0x20017b08
 8001018:	20017ac8 	.word	0x20017ac8
 800101c:	200177c8 	.word	0x200177c8
 8001020:	40000400 	.word	0x40000400
 8001024:	20017788 	.word	0x20017788
 8001028:	40000c00 	.word	0x40000c00
 800102c:	20017704 	.word	0x20017704
 8001030:	464a      	mov	r2, r9
 8001032:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001034:	951b      	str	r5, [sp, #108]	; 0x6c
  sConfigOC.Pulse = 0;
 8001036:	961c      	str	r6, [sp, #112]	; 0x70
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001038:	961d      	str	r6, [sp, #116]	; 0x74
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800103a:	961f      	str	r6, [sp, #124]	; 0x7c
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800103c:	f004 fcce 	bl	80059dc <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim5);
 8001040:	4620      	mov	r0, r4
  htim8.Instance = TIM8;
 8001042:	4c3b      	ldr	r4, [pc, #236]	; (8001130 <main+0xb00>)
  HAL_TIM_MspPostInit(&htim5);
 8001044:	f000 fbde 	bl	8001804 <HAL_TIM_MspPostInit>
  htim8.Instance = TIM8;
 8001048:	4a3a      	ldr	r2, [pc, #232]	; (8001134 <main+0xb04>)
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800104a:	4620      	mov	r0, r4
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800104c:	961b      	str	r6, [sp, #108]	; 0x6c
  htim8.Instance = TIM8;
 800104e:	6022      	str	r2, [r4, #0]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001050:	961c      	str	r6, [sp, #112]	; 0x70
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001052:	9614      	str	r6, [sp, #80]	; 0x50
 8001054:	9615      	str	r6, [sp, #84]	; 0x54
 8001056:	9616      	str	r6, [sp, #88]	; 0x58
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001058:	961d      	str	r6, [sp, #116]	; 0x74
 800105a:	961e      	str	r6, [sp, #120]	; 0x78
  htim8.Init.Prescaler = 0;
 800105c:	6066      	str	r6, [r4, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105e:	60a6      	str	r6, [r4, #8]
  htim8.Init.Period = 0;
 8001060:	60e6      	str	r6, [r4, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001062:	6126      	str	r6, [r4, #16]
  htim8.Init.RepetitionCounter = 0;
 8001064:	6166      	str	r6, [r4, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001066:	61a6      	str	r6, [r4, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001068:	f004 fae4 	bl	8005634 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800106c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001070:	a91b      	add	r1, sp, #108	; 0x6c
 8001072:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001074:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001076:	f004 f8c7 	bl	8005208 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800107a:	a914      	add	r1, sp, #80	; 0x50
 800107c:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800107e:	9614      	str	r6, [sp, #80]	; 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001080:	9615      	str	r6, [sp, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001082:	9616      	str	r6, [sp, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001084:	f004 fc2c 	bl	80058e0 <HAL_TIMEx_MasterConfigSynchronization>
  htim12.Instance = TIM12;
 8001088:	4a2b      	ldr	r2, [pc, #172]	; (8001138 <main+0xb08>)
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800108a:	4638      	mov	r0, r7
  TIM_OC_InitTypeDef sConfigOC = {0};
 800108c:	961b      	str	r6, [sp, #108]	; 0x6c
  htim12.Instance = TIM12;
 800108e:	603a      	str	r2, [r7, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001090:	961c      	str	r6, [sp, #112]	; 0x70
 8001092:	961d      	str	r6, [sp, #116]	; 0x74
 8001094:	961e      	str	r6, [sp, #120]	; 0x78
 8001096:	961f      	str	r6, [sp, #124]	; 0x7c
 8001098:	9620      	str	r6, [sp, #128]	; 0x80
 800109a:	9621      	str	r6, [sp, #132]	; 0x84
  htim12.Init.Prescaler = 0;
 800109c:	607e      	str	r6, [r7, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109e:	60be      	str	r6, [r7, #8]
  htim12.Init.Period = 0;
 80010a0:	60fe      	str	r6, [r7, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a2:	613e      	str	r6, [r7, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a4:	61be      	str	r6, [r7, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80010a6:	f004 fae1 	bl	800566c <HAL_TIM_PWM_Init>
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010aa:	a91b      	add	r1, sp, #108	; 0x6c
 80010ac:	4632      	mov	r2, r6
 80010ae:	4638      	mov	r0, r7
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010b0:	951b      	str	r5, [sp, #108]	; 0x6c
  sConfigOC.Pulse = 0;
 80010b2:	961c      	str	r6, [sp, #112]	; 0x70
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010b4:	961d      	str	r6, [sp, #116]	; 0x74
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010b6:	961f      	str	r6, [sp, #124]	; 0x7c
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010b8:	f004 fc90 	bl	80059dc <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim12);
 80010bc:	4638      	mov	r0, r7
 80010be:	f000 fba1 	bl	8001804 <HAL_TIM_MspPostInit>
  huart1.Instance = USART1;
 80010c2:	4a1e      	ldr	r2, [pc, #120]	; (800113c <main+0xb0c>)
 80010c4:	491e      	ldr	r1, [pc, #120]	; (8001140 <main+0xb10>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010c6:	4610      	mov	r0, r2
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010c8:	6096      	str	r6, [r2, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010ca:	60d6      	str	r6, [r2, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010cc:	6116      	str	r6, [r2, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ce:	6196      	str	r6, [r2, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d0:	61d6      	str	r6, [r2, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010d2:	6216      	str	r6, [r2, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010d4:	6256      	str	r6, [r2, #36]	; 0x24
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010d6:	f8c2 9014 	str.w	r9, [r2, #20]
  huart1.Init.BaudRate = 115200;
 80010da:	e882 0102 	stmia.w	r2, {r1, r8}
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010de:	f004 ff33 	bl	8005f48 <HAL_UART_Init>
  huart6.Instance = USART6;
 80010e2:	4a18      	ldr	r2, [pc, #96]	; (8001144 <main+0xb14>)
 80010e4:	4918      	ldr	r1, [pc, #96]	; (8001148 <main+0xb18>)
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80010e6:	4610      	mov	r0, r2
  huart6.Init.BaudRate = 115200;
 80010e8:	f8c2 8004 	str.w	r8, [r2, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80010ec:	6096      	str	r6, [r2, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80010ee:	60d6      	str	r6, [r2, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80010f0:	6116      	str	r6, [r2, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80010f2:	f8c2 9014 	str.w	r9, [r2, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010f6:	6196      	str	r6, [r2, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f8:	61d6      	str	r6, [r2, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010fa:	6216      	str	r6, [r2, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010fc:	6256      	str	r6, [r2, #36]	; 0x24
  huart6.Instance = USART6;
 80010fe:	6011      	str	r1, [r2, #0]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001100:	f004 ff22 	bl	8005f48 <HAL_UART_Init>
 8001104:	f10a 3aff 	add.w	sl, sl, #4294967295
      HAL_Delay(50);
 8001108:	2032      	movs	r0, #50	; 0x32
 800110a:	f000 fddf 	bl	8001ccc <HAL_Delay>
  for (i = 0; i < 8; i++) {
 800110e:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
 8001112:	d1f7      	bne.n	8001104 <main+0xad4>
  lv_init();
 8001114:	f008 fbf8 	bl	8009908 <lv_init>
  tft_init();
 8001118:	f006 f84e 	bl	80071b8 <tft_init>
  touchpad_init();
 800111c:	f006 fa46 	bl	80075ac <touchpad_init>
  demo_create();
 8001120:	f006 fb06 	bl	8007730 <demo_create>
      HAL_Delay(5);
 8001124:	2005      	movs	r0, #5
 8001126:	f000 fdd1 	bl	8001ccc <HAL_Delay>
      lv_task_handler();
 800112a:	f00f f94b 	bl	80103c4 <lv_task_handler>
 800112e:	e7f9      	b.n	8001124 <main+0xaf4>
 8001130:	200175f4 	.word	0x200175f4
 8001134:	40010400 	.word	0x40010400
 8001138:	40001800 	.word	0x40001800
 800113c:	20017948 	.word	0x20017948
 8001140:	40011000 	.word	0x40011000
 8001144:	20017a18 	.word	0x20017a18
 8001148:	40011400 	.word	0x40011400

0800114c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800114c:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800114e:	4b08      	ldr	r3, [pc, #32]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001150:	6805      	ldr	r5, [r0, #0]
 8001152:	429d      	cmp	r5, r3
 8001154:	d000      	beq.n	8001158 <HAL_TIM_PeriodElapsedCallback+0xc>
 8001156:	bd38      	pop	{r3, r4, r5, pc}
 8001158:	4604      	mov	r4, r0
    HAL_IncTick();
 800115a:	f000 fda5 	bl	8001ca8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM6) {
 800115e:	6823      	ldr	r3, [r4, #0]
 8001160:	42ab      	cmp	r3, r5
 8001162:	d1f8      	bne.n	8001156 <HAL_TIM_PeriodElapsedCallback+0xa>
    lv_tick_inc(1);
 8001164:	2001      	movs	r0, #1
  }
  /* USER CODE END Callback 1 */
}
 8001166:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_tick_inc(1);
 800116a:	f00e ba65 	b.w	800f638 <lv_tick_inc>
 800116e:	bf00      	nop
 8001170:	40001000 	.word	0x40001000

08001174 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001174:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <HAL_MspInit+0x2c>)
{
 8001176:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8001178:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800117a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800117e:	641a      	str	r2, [r3, #64]	; 0x40
 8001180:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001182:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001186:	9200      	str	r2, [sp, #0]
 8001188:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800118c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001190:	645a      	str	r2, [r3, #68]	; 0x44
 8001192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001194:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001198:	9301      	str	r3, [sp, #4]
 800119a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119c:	b002      	add	sp, #8
 800119e:	4770      	bx	lr
 80011a0:	40023800 	.word	0x40023800

080011a4 <HAL_ADC_MspInit>:
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC3)
 80011a4:	6802      	ldr	r2, [r0, #0]
 80011a6:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <HAL_ADC_MspInit+0x80>)
{
 80011a8:	b570      	push	{r4, r5, r6, lr}
  if(hadc->Instance==ADC3)
 80011aa:	429a      	cmp	r2, r3
{
 80011ac:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ae:	f04f 0400 	mov.w	r4, #0
 80011b2:	9404      	str	r4, [sp, #16]
 80011b4:	9403      	str	r4, [sp, #12]
 80011b6:	9405      	str	r4, [sp, #20]
 80011b8:	9406      	str	r4, [sp, #24]
 80011ba:	9407      	str	r4, [sp, #28]
  if(hadc->Instance==ADC3)
 80011bc:	d001      	beq.n	80011c2 <HAL_ADC_MspInit+0x1e>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80011be:	b008      	add	sp, #32
 80011c0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 80011c2:	f503 338b 	add.w	r3, r3, #71168	; 0x11600
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c6:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 80011c8:	f44f 66f8 	mov.w	r6, #1984	; 0x7c0
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011cc:	a903      	add	r1, sp, #12
    __HAL_RCC_ADC3_CLK_ENABLE();
 80011ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011d0:	4815      	ldr	r0, [pc, #84]	; (8001228 <HAL_ADC_MspInit+0x84>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 80011d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80011d6:	645a      	str	r2, [r3, #68]	; 0x44
 80011d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011da:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80011de:	9200      	str	r2, [sp, #0]
 80011e0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011e4:	f042 0220 	orr.w	r2, r2, #32
 80011e8:	631a      	str	r2, [r3, #48]	; 0x30
 80011ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011ec:	f002 0220 	and.w	r2, r2, #32
 80011f0:	9201      	str	r2, [sp, #4]
 80011f2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011f6:	f042 0201 	orr.w	r2, r2, #1
 80011fa:	631a      	str	r2, [r3, #48]	; 0x30
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 80011fe:	9603      	str	r6, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001200:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001204:	9504      	str	r5, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	9302      	str	r3, [sp, #8]
 8001208:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800120a:	f001 fb17 	bl	800283c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800120e:	2301      	movs	r3, #1
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001210:	a903      	add	r1, sp, #12
 8001212:	4806      	ldr	r0, [pc, #24]	; (800122c <HAL_ADC_MspInit+0x88>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001214:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001218:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800121a:	f001 fb0f 	bl	800283c <HAL_GPIO_Init>
}
 800121e:	b008      	add	sp, #32
 8001220:	bd70      	pop	{r4, r5, r6, pc}
 8001222:	bf00      	nop
 8001224:	40012200 	.word	0x40012200
 8001228:	40021400 	.word	0x40021400
 800122c:	40020000 	.word	0x40020000

08001230 <HAL_DCMI_MspInit>:
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdcmi->Instance==DCMI)
 8001230:	6802      	ldr	r2, [r0, #0]
 8001232:	4b3d      	ldr	r3, [pc, #244]	; (8001328 <HAL_DCMI_MspInit+0xf8>)
{
 8001234:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hdcmi->Instance==DCMI)
 8001236:	429a      	cmp	r2, r3
{
 8001238:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123a:	f04f 0400 	mov.w	r4, #0
 800123e:	9408      	str	r4, [sp, #32]
 8001240:	9407      	str	r4, [sp, #28]
 8001242:	9409      	str	r4, [sp, #36]	; 0x24
 8001244:	940a      	str	r4, [sp, #40]	; 0x28
 8001246:	940b      	str	r4, [sp, #44]	; 0x2c
  if(hdcmi->Instance==DCMI)
 8001248:	d001      	beq.n	800124e <HAL_DCMI_MspInit+0x1e>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800124a:	b00d      	add	sp, #52	; 0x34
 800124c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_DCMI_CLK_ENABLE();
 800124e:	4b37      	ldr	r3, [pc, #220]	; (800132c <HAL_DCMI_MspInit+0xfc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001250:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001252:	250d      	movs	r5, #13
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001254:	2760      	movs	r7, #96	; 0x60
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001256:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001258:	a907      	add	r1, sp, #28
 800125a:	4835      	ldr	r0, [pc, #212]	; (8001330 <HAL_DCMI_MspInit+0x100>)
    __HAL_RCC_DCMI_CLK_ENABLE();
 800125c:	f042 0201 	orr.w	r2, r2, #1
 8001260:	635a      	str	r2, [r3, #52]	; 0x34
 8001262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001264:	f002 0201 	and.w	r2, r2, #1
 8001268:	9201      	str	r2, [sp, #4]
 800126a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800126c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800126e:	f042 0210 	orr.w	r2, r2, #16
 8001272:	631a      	str	r2, [r3, #48]	; 0x30
 8001274:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001276:	f002 0210 	and.w	r2, r2, #16
 800127a:	9202      	str	r2, [sp, #8]
 800127c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800127e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001280:	f042 0208 	orr.w	r2, r2, #8
 8001284:	631a      	str	r2, [r3, #48]	; 0x30
 8001286:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001288:	f002 0208 	and.w	r2, r2, #8
 800128c:	9203      	str	r2, [sp, #12]
 800128e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001292:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001296:	631a      	str	r2, [r3, #48]	; 0x30
 8001298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800129a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800129e:	9204      	str	r2, [sp, #16]
 80012a0:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80012a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012a8:	631a      	str	r2, [r3, #48]	; 0x30
 80012aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012ac:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80012b0:	9205      	str	r2, [sp, #20]
 80012b2:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012b6:	f042 0201 	orr.w	r2, r2, #1
 80012ba:	631a      	str	r2, [r3, #48]	; 0x30
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80012be:	9707      	str	r7, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c0:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c4:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	9306      	str	r3, [sp, #24]
 80012c8:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80012ca:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012cc:	f001 fab6 	bl	800283c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80012d0:	2308      	movs	r3, #8
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80012d2:	a907      	add	r1, sp, #28
 80012d4:	4817      	ldr	r0, [pc, #92]	; (8001334 <HAL_DCMI_MspInit+0x104>)
    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80012d6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d8:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80012da:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80012e0:	f001 faac 	bl	800283c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80012e4:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80012e8:	a907      	add	r1, sp, #28
 80012ea:	4813      	ldr	r0, [pc, #76]	; (8001338 <HAL_DCMI_MspInit+0x108>)
    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80012ec:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80012f0:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f4:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80012f6:	f001 faa1 	bl	800283c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 80012fa:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012fe:	a907      	add	r1, sp, #28
 8001300:	480e      	ldr	r0, [pc, #56]	; (800133c <HAL_DCMI_MspInit+0x10c>)
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 8001302:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001304:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001306:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800130c:	f001 fa96 	bl	800283c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001310:	2350      	movs	r3, #80	; 0x50
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001312:	a907      	add	r1, sp, #28
 8001314:	480a      	ldr	r0, [pc, #40]	; (8001340 <HAL_DCMI_MspInit+0x110>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001318:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800131e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001320:	f001 fa8c 	bl	800283c <HAL_GPIO_Init>
}
 8001324:	b00d      	add	sp, #52	; 0x34
 8001326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001328:	50050000 	.word	0x50050000
 800132c:	40023800 	.word	0x40023800
 8001330:	40021000 	.word	0x40021000
 8001334:	40020c00 	.word	0x40020c00
 8001338:	40021800 	.word	0x40021800
 800133c:	40021c00 	.word	0x40021c00
 8001340:	40020000 	.word	0x40020000

08001344 <HAL_DMA2D_MspInit>:
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{

  if(hdma2d->Instance==DMA2D)
 8001344:	6802      	ldr	r2, [r0, #0]
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <HAL_DMA2D_MspInit+0x28>)
 8001348:	429a      	cmp	r2, r3
 800134a:	d000      	beq.n	800134e <HAL_DMA2D_MspInit+0xa>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800134c:	4770      	bx	lr
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800134e:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
{
 8001352:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001354:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001356:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800135a:	631a      	str	r2, [r3, #48]	; 0x30
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001362:	9301      	str	r3, [sp, #4]
 8001364:	9b01      	ldr	r3, [sp, #4]
}
 8001366:	b002      	add	sp, #8
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	4002b000 	.word	0x4002b000

08001370 <HAL_I2C_MspInit>:
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 8001370:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001372:	2300      	movs	r3, #0
  if(hi2c->Instance==I2C1)
 8001374:	4929      	ldr	r1, [pc, #164]	; (800141c <HAL_I2C_MspInit+0xac>)
{
 8001376:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hi2c->Instance==I2C1)
 8001378:	428a      	cmp	r2, r1
{
 800137a:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	9306      	str	r3, [sp, #24]
 800137e:	9305      	str	r3, [sp, #20]
 8001380:	9307      	str	r3, [sp, #28]
 8001382:	9308      	str	r3, [sp, #32]
 8001384:	9309      	str	r3, [sp, #36]	; 0x24
  if(hi2c->Instance==I2C1)
 8001386:	d028      	beq.n	80013da <HAL_I2C_MspInit+0x6a>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C3)
 8001388:	4b25      	ldr	r3, [pc, #148]	; (8001420 <HAL_I2C_MspInit+0xb0>)
 800138a:	429a      	cmp	r2, r3
 800138c:	d001      	beq.n	8001392 <HAL_I2C_MspInit+0x22>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800138e:	b00b      	add	sp, #44	; 0x2c
 8001390:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001392:	4c24      	ldr	r4, [pc, #144]	; (8001424 <HAL_I2C_MspInit+0xb4>)
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001394:	f44f 7ec0 	mov.w	lr, #384	; 0x180
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001398:	2204      	movs	r2, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800139a:	2712      	movs	r7, #18
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800139c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800139e:	2601      	movs	r6, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a0:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013a2:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80013a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013a8:	481f      	ldr	r0, [pc, #124]	; (8001428 <HAL_I2C_MspInit+0xb8>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80013aa:	6323      	str	r3, [r4, #48]	; 0x30
 80013ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80013ae:	f8cd e014 	str.w	lr, [sp, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80013b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013b6:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013b8:	9607      	str	r6, [sp, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ba:	9303      	str	r3, [sp, #12]
 80013bc:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013be:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80013c0:	9209      	str	r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013c2:	f001 fa3b 	bl	800283c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80013c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013cc:	6423      	str	r3, [r4, #64]	; 0x40
 80013ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013d4:	9304      	str	r3, [sp, #16]
 80013d6:	9b04      	ldr	r3, [sp, #16]
}
 80013d8:	e7d9      	b.n	800138e <HAL_I2C_MspInit+0x1e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013da:	4c12      	ldr	r4, [pc, #72]	; (8001424 <HAL_I2C_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013dc:	2204      	movs	r2, #4
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80013de:	f44f 7740 	mov.w	r7, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013e2:	2612      	movs	r6, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013e6:	2501      	movs	r5, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e8:	a905      	add	r1, sp, #20
 80013ea:	4810      	ldr	r0, [pc, #64]	; (800142c <HAL_I2C_MspInit+0xbc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	6323      	str	r3, [r4, #48]	; 0x30
 80013f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80013f4:	9705      	str	r7, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f6:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013fa:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013fc:	9507      	str	r5, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fe:	9301      	str	r3, [sp, #4]
 8001400:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001402:	9209      	str	r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001404:	f001 fa1a 	bl	800283c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001408:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800140a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800140e:	6423      	str	r3, [r4, #64]	; 0x40
 8001410:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001412:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001416:	9302      	str	r3, [sp, #8]
 8001418:	9b02      	ldr	r3, [sp, #8]
 800141a:	e7b8      	b.n	800138e <HAL_I2C_MspInit+0x1e>
 800141c:	40005400 	.word	0x40005400
 8001420:	40005c00 	.word	0x40005c00
 8001424:	40023800 	.word	0x40023800
 8001428:	40021c00 	.word	0x40021c00
 800142c:	40020400 	.word	0x40020400

08001430 <HAL_I2C_MspDeInit>:
*/

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{

  if(hi2c->Instance==I2C1)
 8001430:	6803      	ldr	r3, [r0, #0]
 8001432:	4a0e      	ldr	r2, [pc, #56]	; (800146c <HAL_I2C_MspDeInit+0x3c>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d00e      	beq.n	8001456 <HAL_I2C_MspDeInit+0x26>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
  else if(hi2c->Instance==I2C3)
 8001438:	4a0d      	ldr	r2, [pc, #52]	; (8001470 <HAL_I2C_MspDeInit+0x40>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d000      	beq.n	8001440 <HAL_I2C_MspDeInit+0x10>
 800143e:	4770      	bx	lr
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001440:	f502 32ee 	add.w	r2, r2, #121856	; 0x1dc00
  
    /**I2C3 GPIO Configuration    
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA 
    */
    HAL_GPIO_DeInit(GPIOH, LCD_SCL_Pin|LCD_SDA_Pin);
 8001444:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001448:	480a      	ldr	r0, [pc, #40]	; (8001474 <HAL_I2C_MspDeInit+0x44>)
    __HAL_RCC_I2C3_CLK_DISABLE();
 800144a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800144c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001450:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOH, LCD_SCL_Pin|LCD_SDA_Pin);
 8001452:	f001 bb1d 	b.w	8002a90 <HAL_GPIO_DeInit>
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001456:	f502 32f2 	add.w	r2, r2, #123904	; 0x1e400
    HAL_GPIO_DeInit(GPIOB, ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin);
 800145a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800145e:	4806      	ldr	r0, [pc, #24]	; (8001478 <HAL_I2C_MspDeInit+0x48>)
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001460:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001462:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001466:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin);
 8001468:	f001 bb12 	b.w	8002a90 <HAL_GPIO_DeInit>
 800146c:	40005400 	.word	0x40005400
 8001470:	40005c00 	.word	0x40005c00
 8001474:	40021c00 	.word	0x40021c00
 8001478:	40020400 	.word	0x40020400

0800147c <HAL_LTDC_MspInit>:
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hltdc->Instance==LTDC)
 800147c:	6802      	ldr	r2, [r0, #0]
 800147e:	4b3e      	ldr	r3, [pc, #248]	; (8001578 <HAL_LTDC_MspInit+0xfc>)
{
 8001480:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hltdc->Instance==LTDC)
 8001482:	429a      	cmp	r2, r3
{
 8001484:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001486:	f04f 0400 	mov.w	r4, #0
 800148a:	9408      	str	r4, [sp, #32]
 800148c:	9407      	str	r4, [sp, #28]
 800148e:	9409      	str	r4, [sp, #36]	; 0x24
 8001490:	940a      	str	r4, [sp, #40]	; 0x28
 8001492:	940b      	str	r4, [sp, #44]	; 0x2c
  if(hltdc->Instance==LTDC)
 8001494:	d001      	beq.n	800149a <HAL_LTDC_MspInit+0x1e>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001496:	b00d      	add	sp, #52	; 0x34
 8001498:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_LTDC_CLK_ENABLE();
 800149a:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800149e:	2710      	movs	r7, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a0:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014a2:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
 80014a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80014a6:	a907      	add	r1, sp, #28
 80014a8:	4834      	ldr	r0, [pc, #208]	; (800157c <HAL_LTDC_MspInit+0x100>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 80014aa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80014ae:	645a      	str	r2, [r3, #68]	; 0x44
 80014b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014b2:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80014b6:	9201      	str	r2, [sp, #4]
 80014b8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014bc:	433a      	orrs	r2, r7
 80014be:	631a      	str	r2, [r3, #48]	; 0x30
 80014c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014c2:	403a      	ands	r2, r7
 80014c4:	9202      	str	r2, [sp, #8]
 80014c6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80014c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014ce:	631a      	str	r2, [r3, #48]	; 0x30
 80014d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014d2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80014d6:	9203      	str	r2, [sp, #12]
 80014d8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80014da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80014e0:	631a      	str	r2, [r3, #48]	; 0x30
 80014e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014e4:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80014e8:	9204      	str	r2, [sp, #16]
 80014ea:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014f2:	631a      	str	r2, [r3, #48]	; 0x30
 80014f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014f6:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80014fa:	9205      	str	r2, [sp, #20]
 80014fc:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80014fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001500:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001504:	631a      	str	r2, [r3, #48]	; 0x30
 8001506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001508:	9707      	str	r7, [sp, #28]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800150a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001510:	9306      	str	r3, [sp, #24]
 8001512:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001514:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001516:	f001 f991 	bl	800283c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 800151a:	f64e 73ff 	movw	r3, #61439	; 0xefff
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800151e:	a907      	add	r1, sp, #28
 8001520:	4817      	ldr	r0, [pc, #92]	; (8001580 <HAL_LTDC_MspInit+0x104>)
    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8001522:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001524:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001526:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152a:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800152c:	f001 f986 	bl	800283c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8001530:	23f7      	movs	r3, #247	; 0xf7
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001532:	a907      	add	r1, sp, #28
 8001534:	4813      	ldr	r0, [pc, #76]	; (8001584 <HAL_LTDC_MspInit+0x108>)
    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8001536:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001538:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800153a:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153e:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001540:	f001 f97c 	bl	800283c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001544:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001548:	2309      	movs	r3, #9
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800154a:	a907      	add	r1, sp, #28
 800154c:	480e      	ldr	r0, [pc, #56]	; (8001588 <HAL_LTDC_MspInit+0x10c>)
    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800154e:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001550:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001556:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001558:	f001 f970 	bl	800283c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800155c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001560:	a907      	add	r1, sp, #28
 8001562:	480a      	ldr	r0, [pc, #40]	; (800158c <HAL_LTDC_MspInit+0x110>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001564:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001566:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800156c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800156e:	f001 f965 	bl	800283c <HAL_GPIO_Init>
}
 8001572:	b00d      	add	sp, #52	; 0x34
 8001574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001576:	bf00      	nop
 8001578:	40016800 	.word	0x40016800
 800157c:	40021000 	.word	0x40021000
 8001580:	40022400 	.word	0x40022400
 8001584:	40022800 	.word	0x40022800
 8001588:	40021800 	.word	0x40021800
 800158c:	40022000 	.word	0x40022000

08001590 <HAL_QSPI_MspInit>:
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hqspi->Instance==QUADSPI)
 8001590:	6802      	ldr	r2, [r0, #0]
 8001592:	4b31      	ldr	r3, [pc, #196]	; (8001658 <HAL_QSPI_MspInit+0xc8>)
{
 8001594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(hqspi->Instance==QUADSPI)
 8001598:	429a      	cmp	r2, r3
{
 800159a:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f04f 0400 	mov.w	r4, #0
 80015a0:	9406      	str	r4, [sp, #24]
 80015a2:	9405      	str	r4, [sp, #20]
 80015a4:	9407      	str	r4, [sp, #28]
 80015a6:	9408      	str	r4, [sp, #32]
 80015a8:	9409      	str	r4, [sp, #36]	; 0x24
  if(hqspi->Instance==QUADSPI)
 80015aa:	d002      	beq.n	80015b2 <HAL_QSPI_MspInit+0x22>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80015ac:	b00a      	add	sp, #40	; 0x28
 80015ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_QSPI_CLK_ENABLE();
 80015b2:	4b2a      	ldr	r3, [pc, #168]	; (800165c <HAL_QSPI_MspInit+0xcc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b6:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80015b8:	2709      	movs	r7, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 80015ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80015bc:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80015c0:	a905      	add	r1, sp, #20
 80015c2:	4827      	ldr	r0, [pc, #156]	; (8001660 <HAL_QSPI_MspInit+0xd0>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 80015c4:	4332      	orrs	r2, r6
 80015c6:	639a      	str	r2, [r3, #56]	; 0x38
 80015c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015ca:	4032      	ands	r2, r6
 80015cc:	9201      	str	r2, [sp, #4]
 80015ce:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015d2:	f042 0210 	orr.w	r2, r2, #16
 80015d6:	631a      	str	r2, [r3, #48]	; 0x30
 80015d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015da:	f002 0210 	and.w	r2, r2, #16
 80015de:	9202      	str	r2, [sp, #8]
 80015e0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015e4:	4332      	orrs	r2, r6
 80015e6:	631a      	str	r2, [r3, #48]	; 0x30
 80015e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015ea:	4032      	ands	r2, r6
 80015ec:	9203      	str	r2, [sp, #12]
 80015ee:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015f2:	f042 0208 	orr.w	r2, r2, #8
 80015f6:	631a      	str	r2, [r3, #48]	; 0x30
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80015fa:	f8cd 8014 	str.w	r8, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015fe:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001602:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001604:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001606:	9304      	str	r3, [sp, #16]
 8001608:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800160a:	9709      	str	r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800160c:	f001 f916 	bl	800283c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001610:	2240      	movs	r2, #64	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001612:	230a      	movs	r3, #10
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001614:	a905      	add	r1, sp, #20
 8001616:	4813      	ldr	r0, [pc, #76]	; (8001664 <HAL_QSPI_MspInit+0xd4>)
    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001618:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800161a:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161e:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001622:	f001 f90b 	bl	800283c <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001626:	a905      	add	r1, sp, #20
 8001628:	480e      	ldr	r0, [pc, #56]	; (8001664 <HAL_QSPI_MspInit+0xd4>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800162a:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001630:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001632:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001636:	f001 f901 	bl	800283c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800163a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800163e:	a905      	add	r1, sp, #20
 8001640:	4809      	ldr	r0, [pc, #36]	; (8001668 <HAL_QSPI_MspInit+0xd8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001642:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001644:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001646:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800164a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800164c:	f001 f8f6 	bl	800283c <HAL_GPIO_Init>
}
 8001650:	b00a      	add	sp, #40	; 0x28
 8001652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001656:	bf00      	nop
 8001658:	a0001000 	.word	0xa0001000
 800165c:	40023800 	.word	0x40023800
 8001660:	40021000 	.word	0x40021000
 8001664:	40020400 	.word	0x40020400
 8001668:	40020c00 	.word	0x40020c00

0800166c <HAL_RTC_MspInit>:
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{

  if(hrtc->Instance==RTC)
 800166c:	6802      	ldr	r2, [r0, #0]
 800166e:	4b05      	ldr	r3, [pc, #20]	; (8001684 <HAL_RTC_MspInit+0x18>)
 8001670:	429a      	cmp	r2, r3
 8001672:	d000      	beq.n	8001676 <HAL_RTC_MspInit+0xa>
 8001674:	4770      	bx	lr
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001676:	4a04      	ldr	r2, [pc, #16]	; (8001688 <HAL_RTC_MspInit+0x1c>)
 8001678:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800167a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800167e:	6713      	str	r3, [r2, #112]	; 0x70
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	40002800 	.word	0x40002800
 8001688:	40023800 	.word	0x40023800

0800168c <HAL_SD_MspInit>:
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hsd->Instance==SDMMC1)
 800168c:	6802      	ldr	r2, [r0, #0]
 800168e:	4b23      	ldr	r3, [pc, #140]	; (800171c <HAL_SD_MspInit+0x90>)
{
 8001690:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hsd->Instance==SDMMC1)
 8001692:	429a      	cmp	r2, r3
{
 8001694:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001696:	f04f 0400 	mov.w	r4, #0
 800169a:	9404      	str	r4, [sp, #16]
 800169c:	9403      	str	r4, [sp, #12]
 800169e:	9405      	str	r4, [sp, #20]
 80016a0:	9406      	str	r4, [sp, #24]
 80016a2:	9407      	str	r4, [sp, #28]
  if(hsd->Instance==SDMMC1)
 80016a4:	d001      	beq.n	80016aa <HAL_SD_MspInit+0x1e>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80016a6:	b009      	add	sp, #36	; 0x24
 80016a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80016aa:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80016ae:	250c      	movs	r5, #12
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 80016b0:	f44f 50f8 	mov.w	r0, #7936	; 0x1f00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b4:	2702      	movs	r7, #2
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80016b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b8:	2603      	movs	r6, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ba:	eb0d 0105 	add.w	r1, sp, r5
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80016be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016c2:	645a      	str	r2, [r3, #68]	; 0x44
 80016c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016c6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80016ca:	9200      	str	r2, [sp, #0]
 80016cc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016d0:	f042 0204 	orr.w	r2, r2, #4
 80016d4:	631a      	str	r2, [r3, #48]	; 0x30
 80016d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016d8:	f002 0204 	and.w	r2, r2, #4
 80016dc:	9201      	str	r2, [sp, #4]
 80016de:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016e2:	f042 0208 	orr.w	r2, r2, #8
 80016e6:	631a      	str	r2, [r3, #48]	; 0x30
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 80016ea:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ec:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f0:	480b      	ldr	r0, [pc, #44]	; (8001720 <HAL_SD_MspInit+0x94>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	9704      	str	r7, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016f4:	9302      	str	r3, [sp, #8]
 80016f6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f8:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80016fa:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016fc:	f001 f89e 	bl	800283c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001700:	2304      	movs	r3, #4
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001702:	eb0d 0105 	add.w	r1, sp, r5
 8001706:	4807      	ldr	r0, [pc, #28]	; (8001724 <HAL_SD_MspInit+0x98>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170a:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800170c:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001710:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001712:	f001 f893 	bl	800283c <HAL_GPIO_Init>
}
 8001716:	b009      	add	sp, #36	; 0x24
 8001718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800171a:	bf00      	nop
 800171c:	40012c00 	.word	0x40012c00
 8001720:	40020800 	.word	0x40020800
 8001724:	40020c00 	.word	0x40020c00

08001728 <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM1)
 8001728:	6803      	ldr	r3, [r0, #0]
{
 800172a:	b086      	sub	sp, #24
  if(htim_base->Instance==TIM1)
 800172c:	4a25      	ldr	r2, [pc, #148]	; (80017c4 <HAL_TIM_Base_MspInit+0x9c>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d019      	beq.n	8001766 <HAL_TIM_Base_MspInit+0x3e>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8001732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001736:	d022      	beq.n	800177e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8001738:	4a23      	ldr	r2, [pc, #140]	; (80017c8 <HAL_TIM_Base_MspInit+0xa0>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d02b      	beq.n	8001796 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 800173e:	4a23      	ldr	r2, [pc, #140]	; (80017cc <HAL_TIM_Base_MspInit+0xa4>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d033      	beq.n	80017ac <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(htim_base->Instance==TIM8)
 8001744:	4a22      	ldr	r2, [pc, #136]	; (80017d0 <HAL_TIM_Base_MspInit+0xa8>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d001      	beq.n	800174e <HAL_TIM_Base_MspInit+0x26>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800174a:	b006      	add	sp, #24
 800174c:	4770      	bx	lr
    __HAL_RCC_TIM8_CLK_ENABLE();
 800174e:	4b21      	ldr	r3, [pc, #132]	; (80017d4 <HAL_TIM_Base_MspInit+0xac>)
 8001750:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001752:	f042 0202 	orr.w	r2, r2, #2
 8001756:	645a      	str	r2, [r3, #68]	; 0x44
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	9305      	str	r3, [sp, #20]
 8001760:	9b05      	ldr	r3, [sp, #20]
}
 8001762:	b006      	add	sp, #24
 8001764:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001766:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <HAL_TIM_Base_MspInit+0xac>)
 8001768:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800176a:	f042 0201 	orr.w	r2, r2, #1
 800176e:	645a      	str	r2, [r3, #68]	; 0x44
 8001770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	9301      	str	r3, [sp, #4]
 8001778:	9b01      	ldr	r3, [sp, #4]
}
 800177a:	b006      	add	sp, #24
 800177c:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 800177e:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8001782:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001784:	f042 0201 	orr.w	r2, r2, #1
 8001788:	641a      	str	r2, [r3, #64]	; 0x40
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	9302      	str	r3, [sp, #8]
 8001792:	9b02      	ldr	r3, [sp, #8]
 8001794:	e7d9      	b.n	800174a <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001796:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <HAL_TIM_Base_MspInit+0xac>)
 8001798:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800179a:	f042 0202 	orr.w	r2, r2, #2
 800179e:	641a      	str	r2, [r3, #64]	; 0x40
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	9303      	str	r3, [sp, #12]
 80017a8:	9b03      	ldr	r3, [sp, #12]
 80017aa:	e7ce      	b.n	800174a <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80017ac:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <HAL_TIM_Base_MspInit+0xac>)
 80017ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017b0:	f042 0208 	orr.w	r2, r2, #8
 80017b4:	641a      	str	r2, [r3, #64]	; 0x40
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	f003 0308 	and.w	r3, r3, #8
 80017bc:	9304      	str	r3, [sp, #16]
 80017be:	9b04      	ldr	r3, [sp, #16]
 80017c0:	e7c3      	b.n	800174a <HAL_TIM_Base_MspInit+0x22>
 80017c2:	bf00      	nop
 80017c4:	40010000 	.word	0x40010000
 80017c8:	40000400 	.word	0x40000400
 80017cc:	40000c00 	.word	0x40000c00
 80017d0:	40010400 	.word	0x40010400
 80017d4:	40023800 	.word	0x40023800

080017d8 <HAL_TIM_PWM_MspInit>:
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM12)
 80017d8:	6802      	ldr	r2, [r0, #0]
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <HAL_TIM_PWM_MspInit+0x28>)
 80017dc:	429a      	cmp	r2, r3
 80017de:	d000      	beq.n	80017e2 <HAL_TIM_PWM_MspInit+0xa>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80017e0:	4770      	bx	lr
    __HAL_RCC_TIM12_CLK_ENABLE();
 80017e2:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
{
 80017e6:	b082      	sub	sp, #8
    __HAL_RCC_TIM12_CLK_ENABLE();
 80017e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017ee:	641a      	str	r2, [r3, #64]	; 0x40
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017f6:	9301      	str	r3, [sp, #4]
 80017f8:	9b01      	ldr	r3, [sp, #4]
}
 80017fa:	b002      	add	sp, #8
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	40001800 	.word	0x40001800

08001804 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8001804:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001806:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8001808:	493e      	ldr	r1, [pc, #248]	; (8001904 <HAL_TIM_MspPostInit+0x100>)
{
 800180a:	b570      	push	{r4, r5, r6, lr}
  if(htim->Instance==TIM1)
 800180c:	428a      	cmp	r2, r1
{
 800180e:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001810:	9306      	str	r3, [sp, #24]
 8001812:	9305      	str	r3, [sp, #20]
 8001814:	9307      	str	r3, [sp, #28]
 8001816:	9308      	str	r3, [sp, #32]
 8001818:	9309      	str	r3, [sp, #36]	; 0x24
  if(htim->Instance==TIM1)
 800181a:	d023      	beq.n	8001864 <HAL_TIM_MspPostInit+0x60>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM2)
 800181c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8001820:	d034      	beq.n	800188c <HAL_TIM_MspPostInit+0x88>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 8001822:	4b39      	ldr	r3, [pc, #228]	; (8001908 <HAL_TIM_MspPostInit+0x104>)
 8001824:	429a      	cmp	r2, r3
 8001826:	d045      	beq.n	80018b4 <HAL_TIM_MspPostInit+0xb0>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(htim->Instance==TIM5)
 8001828:	4b38      	ldr	r3, [pc, #224]	; (800190c <HAL_TIM_MspPostInit+0x108>)
 800182a:	429a      	cmp	r2, r3
 800182c:	d055      	beq.n	80018da <HAL_TIM_MspPostInit+0xd6>

  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }
  else if(htim->Instance==TIM12)
 800182e:	4b38      	ldr	r3, [pc, #224]	; (8001910 <HAL_TIM_MspPostInit+0x10c>)
 8001830:	429a      	cmp	r2, r3
 8001832:	d001      	beq.n	8001838 <HAL_TIM_MspPostInit+0x34>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001834:	b00a      	add	sp, #40	; 0x28
 8001836:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001838:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800183c:	2640      	movs	r6, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001840:	2409      	movs	r4, #9
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001842:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001844:	a905      	add	r1, sp, #20
 8001846:	4833      	ldr	r0, [pc, #204]	; (8001914 <HAL_TIM_MspPostInit+0x110>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001848:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800184c:	631a      	str	r2, [r3, #48]	; 0x30
 800184e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001850:	9605      	str	r6, [sp, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001852:	f003 0380 	and.w	r3, r3, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001856:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001858:	9409      	str	r4, [sp, #36]	; 0x24
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800185a:	9304      	str	r3, [sp, #16]
 800185c:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800185e:	f000 ffed 	bl	800283c <HAL_GPIO_Init>
}
 8001862:	e7e7      	b.n	8001834 <HAL_TIM_MspPostInit+0x30>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001864:	4b2c      	ldr	r3, [pc, #176]	; (8001918 <HAL_TIM_MspPostInit+0x114>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001866:	2401      	movs	r4, #1
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001868:	f44f 7680 	mov.w	r6, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186c:	2502      	movs	r5, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8001870:	a905      	add	r1, sp, #20
 8001872:	482a      	ldr	r0, [pc, #168]	; (800191c <HAL_TIM_MspPostInit+0x118>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001874:	4322      	orrs	r2, r4
 8001876:	631a      	str	r2, [r3, #48]	; 0x30
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800187a:	9605      	str	r6, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187c:	4023      	ands	r3, r4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187e:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001880:	9409      	str	r4, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8001886:	f000 ffd9 	bl	800283c <HAL_GPIO_Init>
 800188a:	e7d3      	b.n	8001834 <HAL_TIM_MspPostInit+0x30>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188c:	4b22      	ldr	r3, [pc, #136]	; (8001918 <HAL_TIM_MspPostInit+0x114>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800188e:	2401      	movs	r4, #1
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8001890:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001894:	2502      	movs	r5, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001896:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8001898:	a905      	add	r1, sp, #20
 800189a:	4820      	ldr	r0, [pc, #128]	; (800191c <HAL_TIM_MspPostInit+0x118>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189c:	4322      	orrs	r2, r4
 800189e:	631a      	str	r2, [r3, #48]	; 0x30
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80018a2:	9605      	str	r6, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a4:	4023      	ands	r3, r4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a6:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018a8:	9409      	str	r4, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018aa:	9301      	str	r3, [sp, #4]
 80018ac:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80018ae:	f000 ffc5 	bl	800283c <HAL_GPIO_Init>
 80018b2:	e7bf      	b.n	8001834 <HAL_TIM_MspPostInit+0x30>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b4:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b8:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80018ba:	2510      	movs	r5, #16
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80018bc:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80018c0:	4817      	ldr	r0, [pc, #92]	; (8001920 <HAL_TIM_MspPostInit+0x11c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c2:	4322      	orrs	r2, r4
 80018c4:	631a      	str	r2, [r3, #48]	; 0x30
 80018c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80018c8:	9505      	str	r5, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ca:	4023      	ands	r3, r4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018cc:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018ce:	9409      	str	r4, [sp, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d0:	9302      	str	r3, [sp, #8]
 80018d2:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80018d4:	f000 ffb2 	bl	800283c <HAL_GPIO_Init>
 80018d8:	e7ac      	b.n	8001834 <HAL_TIM_MspPostInit+0x30>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80018da:	f503 330b 	add.w	r3, r3, #142336	; 0x22c00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018de:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80018e0:	2501      	movs	r5, #1
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80018e2:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80018e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80018e6:	480f      	ldr	r0, [pc, #60]	; (8001924 <HAL_TIM_MspPostInit+0x120>)
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80018e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018ec:	631a      	str	r2, [r3, #48]	; 0x30
 80018ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80018f0:	9505      	str	r5, [sp, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80018f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80018f8:	9409      	str	r4, [sp, #36]	; 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80018fa:	9303      	str	r3, [sp, #12]
 80018fc:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80018fe:	f000 ff9d 	bl	800283c <HAL_GPIO_Init>
 8001902:	e797      	b.n	8001834 <HAL_TIM_MspPostInit+0x30>
 8001904:	40010000 	.word	0x40010000
 8001908:	40000400 	.word	0x40000400
 800190c:	40000c00 	.word	0x40000c00
 8001910:	40001800 	.word	0x40001800
 8001914:	40021c00 	.word	0x40021c00
 8001918:	40023800 	.word	0x40023800
 800191c:	40020000 	.word	0x40020000
 8001920:	40020400 	.word	0x40020400
 8001924:	40022000 	.word	0x40022000

08001928 <HAL_UART_MspInit>:
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 8001928:	6803      	ldr	r3, [r0, #0]
 800192a:	4a30      	ldr	r2, [pc, #192]	; (80019ec <HAL_UART_MspInit+0xc4>)
{
 800192c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(huart->Instance==USART1)
 800192e:	4293      	cmp	r3, r2
{
 8001930:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001932:	f04f 0400 	mov.w	r4, #0
 8001936:	9406      	str	r4, [sp, #24]
 8001938:	9405      	str	r4, [sp, #20]
 800193a:	9407      	str	r4, [sp, #28]
 800193c:	9408      	str	r4, [sp, #32]
 800193e:	9409      	str	r4, [sp, #36]	; 0x24
  if(huart->Instance==USART1)
 8001940:	d024      	beq.n	800198c <HAL_UART_MspInit+0x64>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8001942:	4a2b      	ldr	r2, [pc, #172]	; (80019f0 <HAL_UART_MspInit+0xc8>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d001      	beq.n	800194c <HAL_UART_MspInit+0x24>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001948:	b00b      	add	sp, #44	; 0x2c
 800194a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART6_CLK_ENABLE();
 800194c:	4b29      	ldr	r3, [pc, #164]	; (80019f4 <HAL_UART_MspInit+0xcc>)
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800194e:	27c0      	movs	r7, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001950:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001952:	2503      	movs	r5, #3
    __HAL_RCC_USART6_CLK_ENABLE();
 8001954:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001956:	2408      	movs	r4, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001958:	a905      	add	r1, sp, #20
 800195a:	4827      	ldr	r0, [pc, #156]	; (80019f8 <HAL_UART_MspInit+0xd0>)
    __HAL_RCC_USART6_CLK_ENABLE();
 800195c:	f042 0220 	orr.w	r2, r2, #32
 8001960:	645a      	str	r2, [r3, #68]	; 0x44
 8001962:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001964:	f002 0220 	and.w	r2, r2, #32
 8001968:	9203      	str	r2, [sp, #12]
 800196a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800196c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800196e:	f042 0204 	orr.w	r2, r2, #4
 8001972:	631a      	str	r2, [r3, #48]	; 0x30
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8001976:	9705      	str	r7, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001978:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197e:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001980:	9304      	str	r3, [sp, #16]
 8001982:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001984:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001986:	f000 ff59 	bl	800283c <HAL_GPIO_Init>
}
 800198a:	e7dd      	b.n	8001948 <HAL_UART_MspInit+0x20>
    __HAL_RCC_USART1_CLK_ENABLE();
 800198c:	4b19      	ldr	r3, [pc, #100]	; (80019f4 <HAL_UART_MspInit+0xcc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198e:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001990:	2507      	movs	r5, #7
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001992:	2780      	movs	r7, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8001994:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001996:	a905      	add	r1, sp, #20
 8001998:	4818      	ldr	r0, [pc, #96]	; (80019fc <HAL_UART_MspInit+0xd4>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800199a:	f042 0210 	orr.w	r2, r2, #16
 800199e:	645a      	str	r2, [r3, #68]	; 0x44
 80019a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019a2:	f002 0210 	and.w	r2, r2, #16
 80019a6:	9200      	str	r2, [sp, #0]
 80019a8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019ac:	4332      	orrs	r2, r6
 80019ae:	631a      	str	r2, [r3, #48]	; 0x30
 80019b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019b2:	4032      	ands	r2, r6
 80019b4:	9201      	str	r2, [sp, #4]
 80019b6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019ba:	f042 0201 	orr.w	r2, r2, #1
 80019be:	631a      	str	r2, [r3, #48]	; 0x30
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80019c2:	9705      	str	r7, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c4:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c8:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019ca:	9509      	str	r5, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019cc:	9302      	str	r3, [sp, #8]
 80019ce:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80019d0:	f000 ff34 	bl	800283c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80019d4:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80019d8:	a905      	add	r1, sp, #20
 80019da:	4809      	ldr	r0, [pc, #36]	; (8001a00 <HAL_UART_MspInit+0xd8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019dc:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019de:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e2:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80019e4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80019e6:	f000 ff29 	bl	800283c <HAL_GPIO_Init>
 80019ea:	e7ad      	b.n	8001948 <HAL_UART_MspInit+0x20>
 80019ec:	40011000 	.word	0x40011000
 80019f0:	40011400 	.word	0x40011400
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40020800 	.word	0x40020800
 80019fc:	40020400 	.word	0x40020400
 8001a00:	40020000 	.word	0x40020000

08001a04 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 8001a04:	4b2b      	ldr	r3, [pc, #172]	; (8001ab4 <HAL_SDRAM_MspInit+0xb0>)
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001a06:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (FMC_Initialized) {
 8001a08:	681c      	ldr	r4, [r3, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001a0a:	b087      	sub	sp, #28
  if (FMC_Initialized) {
 8001a0c:	b10c      	cbz	r4, 8001a12 <HAL_SDRAM_MspInit+0xe>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001a0e:	b007      	add	sp, #28
 8001a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_RCC_FMC_CLK_ENABLE();
 8001a12:	4a29      	ldr	r2, [pc, #164]	; (8001ab8 <HAL_SDRAM_MspInit+0xb4>)
  FMC_Initialized = 1;
 8001a14:	2101      	movs	r1, #1
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8001a16:	f64f 7083 	movw	r0, #65411	; 0xff83
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1a:	2702      	movs	r7, #2
  FMC_Initialized = 1;
 8001a1c:	6019      	str	r1, [r3, #0]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1e:	2603      	movs	r6, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8001a20:	6b93      	ldr	r3, [r2, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a22:	250c      	movs	r5, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8001a24:	430b      	orrs	r3, r1
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a26:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 8001a28:	6393      	str	r3, [r2, #56]	; 0x38
 8001a2a:	6b93      	ldr	r3, [r2, #56]	; 0x38
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8001a2c:	9001      	str	r0, [sp, #4]
  __HAL_RCC_FMC_CLK_ENABLE();
 8001a2e:	f003 0301 	and.w	r3, r3, #1
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a32:	4822      	ldr	r0, [pc, #136]	; (8001abc <HAL_SDRAM_MspInit+0xb8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	9403      	str	r4, [sp, #12]
  __HAL_RCC_FMC_CLK_ENABLE();
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3a:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3c:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a3e:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a40:	f000 fefc 	bl	800283c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8001a44:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a48:	a901      	add	r1, sp, #4
 8001a4a:	481d      	ldr	r0, [pc, #116]	; (8001ac0 <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8001a4c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4e:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a50:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a52:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a56:	f000 fef1 	bl	800283c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8001a5a:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a5e:	a901      	add	r1, sp, #4
 8001a60:	4818      	ldr	r0, [pc, #96]	; (8001ac4 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8001a62:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a66:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a68:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a6c:	f000 fee6 	bl	800283c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8001a70:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a74:	a901      	add	r1, sp, #4
 8001a76:	4814      	ldr	r0, [pc, #80]	; (8001ac8 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8001a78:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7a:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7c:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a7e:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a82:	f000 fedb 	bl	800283c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001a86:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a88:	a901      	add	r1, sp, #4
 8001a8a:	4810      	ldr	r0, [pc, #64]	; (8001acc <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001a8c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8e:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a90:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a92:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a96:	f000 fed1 	bl	800283c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001a9a:	2308      	movs	r3, #8
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001a9c:	a901      	add	r1, sp, #4
 8001a9e:	480c      	ldr	r0, [pc, #48]	; (8001ad0 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa0:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa2:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001aa4:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001aa8:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001aaa:	f000 fec7 	bl	800283c <HAL_GPIO_Init>
}
 8001aae:	b007      	add	sp, #28
 8001ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	2000036c 	.word	0x2000036c
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40021800 	.word	0x40021800
 8001ac4:	40020c00 	.word	0x40020c00
 8001ac8:	40021400 	.word	0x40021400
 8001acc:	40021c00 	.word	0x40021c00
 8001ad0:	40020800 	.word	0x40020800

08001ad4 <HAL_SAI_MspInit>:
void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8001ad4:	4a25      	ldr	r2, [pc, #148]	; (8001b6c <HAL_SAI_MspInit+0x98>)
 8001ad6:	6803      	ldr	r3, [r0, #0]
 8001ad8:	4293      	cmp	r3, r2
{
 8001ada:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001adc:	b089      	sub	sp, #36	; 0x24
    if(hsai->Instance==SAI2_Block_A)
 8001ade:	d023      	beq.n	8001b28 <HAL_SAI_MspInit+0x54>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);

    }
    if(hsai->Instance==SAI2_Block_B)
 8001ae0:	4a23      	ldr	r2, [pc, #140]	; (8001b70 <HAL_SAI_MspInit+0x9c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d001      	beq.n	8001aea <HAL_SAI_MspInit+0x16>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);

    }
}
 8001ae6:	b009      	add	sp, #36	; 0x24
 8001ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (SAI2_client == 0)
 8001aea:	4b22      	ldr	r3, [pc, #136]	; (8001b74 <HAL_SAI_MspInit+0xa0>)
 8001aec:	689a      	ldr	r2, [r3, #8]
 8001aee:	b94a      	cbnz	r2, 8001b04 <HAL_SAI_MspInit+0x30>
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001af0:	4921      	ldr	r1, [pc, #132]	; (8001b78 <HAL_SAI_MspInit+0xa4>)
 8001af2:	6c48      	ldr	r0, [r1, #68]	; 0x44
 8001af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001af8:	6448      	str	r0, [r1, #68]	; 0x44
 8001afa:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001afc:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8001b00:	9102      	str	r1, [sp, #8]
 8001b02:	9902      	ldr	r1, [sp, #8]
    SAI2_client ++;
 8001b04:	3201      	adds	r2, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001b08:	f44f 6780 	mov.w	r7, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0c:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001b0e:	250a      	movs	r5, #10
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001b10:	a903      	add	r1, sp, #12
 8001b12:	481a      	ldr	r0, [pc, #104]	; (8001b7c <HAL_SAI_MspInit+0xa8>)
    SAI2_client ++;
 8001b14:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001b16:	9703      	str	r7, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b18:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1c:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001b1e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001b20:	f000 fe8c 	bl	800283c <HAL_GPIO_Init>
}
 8001b24:	b009      	add	sp, #36	; 0x24
 8001b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (SAI2_client == 0)
 8001b28:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <HAL_SAI_MspInit+0xa0>)
 8001b2a:	4604      	mov	r4, r0
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	b94a      	cbnz	r2, 8001b44 <HAL_SAI_MspInit+0x70>
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001b30:	4911      	ldr	r1, [pc, #68]	; (8001b78 <HAL_SAI_MspInit+0xa4>)
 8001b32:	6c48      	ldr	r0, [r1, #68]	; 0x44
 8001b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001b38:	6448      	str	r0, [r1, #68]	; 0x44
 8001b3a:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001b3c:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8001b40:	9101      	str	r1, [sp, #4]
 8001b42:	9901      	ldr	r1, [sp, #4]
    SAI2_client ++;
 8001b44:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001b46:	f04f 0ef0 	mov.w	lr, #240	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4c:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001b4e:	260a      	movs	r6, #10
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001b50:	a903      	add	r1, sp, #12
 8001b52:	480b      	ldr	r0, [pc, #44]	; (8001b80 <HAL_SAI_MspInit+0xac>)
    SAI2_client ++;
 8001b54:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001b56:	f8cd e00c 	str.w	lr, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5a:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5e:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001b60:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001b62:	f000 fe6b 	bl	800283c <HAL_GPIO_Init>
 8001b66:	6823      	ldr	r3, [r4, #0]
 8001b68:	e7ba      	b.n	8001ae0 <HAL_SAI_MspInit+0xc>
 8001b6a:	bf00      	nop
 8001b6c:	40015c04 	.word	0x40015c04
 8001b70:	40015c24 	.word	0x40015c24
 8001b74:	2000036c 	.word	0x2000036c
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40021800 	.word	0x40021800
 8001b80:	40022000 	.word	0x40022000

08001b84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b84:	b570      	push	{r4, r5, r6, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001b86:	4601      	mov	r1, r0
{
 8001b88:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2036      	movs	r0, #54	; 0x36
 8001b8e:	f000 fa29 	bl	8001fe4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001b92:	2036      	movs	r0, #54	; 0x36
 8001b94:	f000 fa60 	bl	8002058 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001b98:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <HAL_InitTick+0x6c>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b9a:	a901      	add	r1, sp, #4
 8001b9c:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001b9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001ba0:	4e14      	ldr	r6, [pc, #80]	; (8001bf4 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001ba2:	f042 0210 	orr.w	r2, r2, #16
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001ba6:	4c14      	ldr	r4, [pc, #80]	; (8001bf8 <HAL_InitTick+0x74>)
 8001ba8:	4d14      	ldr	r5, [pc, #80]	; (8001bfc <HAL_InitTick+0x78>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001baa:	641a      	str	r2, [r3, #64]	; 0x40
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	f003 0310 	and.w	r3, r3, #16
 8001bb2:	9302      	str	r3, [sp, #8]
 8001bb4:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bb6:	f002 f8dd 	bl	8003d74 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001bba:	f002 f8bb 	bl	8003d34 <HAL_RCC_GetPCLK1Freq>
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 8001bbe:	2200      	movs	r2, #0
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001bc0:	0043      	lsls	r3, r0, #1
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001bc2:	f240 31e7 	movw	r1, #999	; 0x3e7
  htim6.Instance = TIM6;
 8001bc6:	6025      	str	r5, [r4, #0]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001bc8:	fba6 0303 	umull	r0, r3, r6, r3
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001bcc:	4620      	mov	r0, r4
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001bce:	60e1      	str	r1, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001bd0:	0c9b      	lsrs	r3, r3, #18
  htim6.Init.ClockDivision = 0;
 8001bd2:	6122      	str	r2, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd4:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001bd6:	3b01      	subs	r3, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 8001bd8:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001bda:	f003 fd2b 	bl	8005634 <HAL_TIM_Base_Init>
 8001bde:	b110      	cbz	r0, 8001be6 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001be0:	2001      	movs	r0, #1
}
 8001be2:	b008      	add	sp, #32
 8001be4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_TIM_Base_Start_IT(&htim6);
 8001be6:	4620      	mov	r0, r4
 8001be8:	f003 fb02 	bl	80051f0 <HAL_TIM_Base_Start_IT>
}
 8001bec:	b008      	add	sp, #32
 8001bee:	bd70      	pop	{r4, r5, r6, pc}
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	431bde83 	.word	0x431bde83
 8001bf8:	20017bc8 	.word	0x20017bc8
 8001bfc:	40001000 	.word	0x40001000

08001c00 <NMI_Handler>:
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop

08001c04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c04:	e7fe      	b.n	8001c04 <HardFault_Handler>
 8001c06:	bf00      	nop

08001c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c08:	e7fe      	b.n	8001c08 <MemManage_Handler>
 8001c0a:	bf00      	nop

08001c0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c0c:	e7fe      	b.n	8001c0c <BusFault_Handler>
 8001c0e:	bf00      	nop

08001c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c10:	e7fe      	b.n	8001c10 <UsageFault_Handler>
 8001c12:	bf00      	nop

08001c14 <SVC_Handler>:
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop

08001c18 <DebugMon_Handler>:
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop

08001c1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop

08001c20 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c20:	4801      	ldr	r0, [pc, #4]	; (8001c28 <TIM6_DAC_IRQHandler+0x8>)
 8001c22:	f003 bbc1 	b.w	80053a8 <HAL_TIM_IRQHandler>
 8001c26:	bf00      	nop
 8001c28:	20017bc8 	.word	0x20017bc8

08001c2c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c2c:	4a0f      	ldr	r2, [pc, #60]	; (8001c6c <SystemInit+0x40>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001c2e:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <SystemInit+0x44>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c30:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001c34:	490f      	ldr	r1, [pc, #60]	; (8001c74 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c36:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
{
 8001c3a:	b470      	push	{r4, r5, r6}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c3c:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
  RCC->CFGR = 0x00000000;
 8001c40:	2400      	movs	r4, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001c42:	6818      	ldr	r0, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c44:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
  RCC->PLLCFGR = 0x24003010;
 8001c48:	4e0b      	ldr	r6, [pc, #44]	; (8001c78 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001;
 8001c4a:	f040 0001 	orr.w	r0, r0, #1
 8001c4e:	6018      	str	r0, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001c50:	609c      	str	r4, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001c52:	6818      	ldr	r0, [r3, #0]
 8001c54:	4001      	ands	r1, r0
 8001c56:	6019      	str	r1, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 8001c58:	605e      	str	r6, [r3, #4]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001c5a:	6819      	ldr	r1, [r3, #0]
 8001c5c:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8001c60:	6019      	str	r1, [r3, #0]
  RCC->CIR = 0x00000000;
 8001c62:	60dc      	str	r4, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c64:	6095      	str	r5, [r2, #8]
#endif
}
 8001c66:	bc70      	pop	{r4, r5, r6}
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	e000ed00 	.word	0xe000ed00
 8001c70:	40023800 	.word	0x40023800
 8001c74:	fef6ffff 	.word	0xfef6ffff
 8001c78:	24003010 	.word	0x24003010

08001c7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c7c:	b508      	push	{r3, lr}
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8001c7e:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <HAL_Init+0x28>)
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c80:	2003      	movs	r0, #3
   __HAL_FLASH_ART_ENABLE();
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c88:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c90:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c92:	f000 f993 	bl	8001fbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c96:	2000      	movs	r0, #0
 8001c98:	f7ff ff74 	bl	8001b84 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001c9c:	f7ff fa6a 	bl	8001174 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	bd08      	pop	{r3, pc}
 8001ca4:	40023c00 	.word	0x40023c00

08001ca8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001ca8:	4a03      	ldr	r2, [pc, #12]	; (8001cb8 <HAL_IncTick+0x10>)
 8001caa:	4b04      	ldr	r3, [pc, #16]	; (8001cbc <HAL_IncTick+0x14>)
 8001cac:	6811      	ldr	r1, [r2, #0]
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	440b      	add	r3, r1
 8001cb2:	6013      	str	r3, [r2, #0]
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	20017c08 	.word	0x20017c08
 8001cbc:	20000004 	.word	0x20000004

08001cc0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001cc0:	4b01      	ldr	r3, [pc, #4]	; (8001cc8 <HAL_GetTick+0x8>)
 8001cc2:	6818      	ldr	r0, [r3, #0]
}
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	20017c08 	.word	0x20017c08

08001ccc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ccc:	b538      	push	{r3, r4, r5, lr}
 8001cce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001cd0:	f7ff fff6 	bl	8001cc0 <HAL_GetTick>
 8001cd4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cd6:	1c63      	adds	r3, r4, #1
 8001cd8:	d002      	beq.n	8001ce0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cda:	4b04      	ldr	r3, [pc, #16]	; (8001cec <HAL_Delay+0x20>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ce0:	f7ff ffee 	bl	8001cc0 <HAL_GetTick>
 8001ce4:	1b40      	subs	r0, r0, r5
 8001ce6:	4284      	cmp	r4, r0
 8001ce8:	d8fa      	bhi.n	8001ce0 <HAL_Delay+0x14>
  {
  }
}
 8001cea:	bd38      	pop	{r3, r4, r5, pc}
 8001cec:	20000004 	.word	0x20000004

08001cf0 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cf0:	2800      	cmp	r0, #0
 8001cf2:	f000 80a4 	beq.w	8001e3e <HAL_ADC_Init+0x14e>
{
 8001cf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001cf8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001cfa:	4604      	mov	r4, r0
 8001cfc:	b13b      	cbz	r3, 8001d0e <HAL_ADC_Init+0x1e>
    HAL_ADC_MspInit(hadc);
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d00:	06db      	lsls	r3, r3, #27
 8001d02:	d50c      	bpl.n	8001d1e <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d04:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 8001d06:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001d08:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 8001d0e:	6443      	str	r3, [r0, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8001d10:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 8001d14:	f7ff fa46 	bl	80011a4 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d1a:	06db      	lsls	r3, r3, #27
 8001d1c:	d4f2      	bmi.n	8001d04 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8001d1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d20:	4a48      	ldr	r2, [pc, #288]	; (8001e44 <HAL_ADC_Init+0x154>)
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001d22:	4949      	ldr	r1, [pc, #292]	; (8001e48 <HAL_ADC_Init+0x158>)
    ADC_STATE_CLR_SET(hadc->State,
 8001d24:	401a      	ands	r2, r3
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d26:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d28:	4e48      	ldr	r6, [pc, #288]	; (8001e4c <HAL_ADC_Init+0x15c>)
    ADC_STATE_CLR_SET(hadc->State,
 8001d2a:	f042 0202 	orr.w	r2, r2, #2
 8001d2e:	6422      	str	r2, [r4, #64]	; 0x40
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001d30:	684a      	ldr	r2, [r1, #4]
 8001d32:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001d36:	604a      	str	r2, [r1, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001d38:	684a      	ldr	r2, [r1, #4]
 8001d3a:	6860      	ldr	r0, [r4, #4]
 8001d3c:	4302      	orrs	r2, r0
 8001d3e:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d40:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d42:	6920      	ldr	r0, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d48:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d4a:	68e7      	ldr	r7, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d4e:	685d      	ldr	r5, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d50:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d52:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d56:	42b2      	cmp	r2, r6
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d58:	605d      	str	r5, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d5a:	685d      	ldr	r5, [r3, #4]
 8001d5c:	f025 7540 	bic.w	r5, r5, #50331648	; 0x3000000
 8001d60:	605d      	str	r5, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d62:	6858      	ldr	r0, [r3, #4]
 8001d64:	ea40 0001 	orr.w	r0, r0, r1
 8001d68:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d6a:	6898      	ldr	r0, [r3, #8]
 8001d6c:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 8001d70:	6098      	str	r0, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d72:	6899      	ldr	r1, [r3, #8]
 8001d74:	ea41 0107 	orr.w	r1, r1, r7
 8001d78:	6099      	str	r1, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d7a:	d048      	beq.n	8001e0e <HAL_ADC_Init+0x11e>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d7c:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d7e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d80:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8001d84:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d86:	6899      	ldr	r1, [r3, #8]
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d8c:	6899      	ldr	r1, [r3, #8]
 8001d8e:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8001d92:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d94:	689a      	ldr	r2, [r3, #8]
 8001d96:	4302      	orrs	r2, r0
 8001d98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d9a:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8001d9c:	69a5      	ldr	r5, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d9e:	f021 0102 	bic.w	r1, r1, #2
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001da2:	6a20      	ldr	r0, [r4, #32]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001da4:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8001dac:	609a      	str	r2, [r3, #8]
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001dae:	2800      	cmp	r0, #0
 8001db0:	d136      	bne.n	8001e20 <HAL_ADC_Init+0x130>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001db8:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001dba:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    ADC_CLEAR_ERRORCODE(hadc);
 8001dbc:	2600      	movs	r6, #0
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001dbe:	69e5      	ldr	r5, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001dc0:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8001dc4:	f8d4 e030 	ldr.w	lr, [r4, #48]	; 0x30
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001dc8:	6967      	ldr	r7, [r4, #20]
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001dca:	1e6a      	subs	r2, r5, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001dcc:	62d8      	str	r0, [r3, #44]	; 0x2c
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dce:	4630      	mov	r0, r6
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001dd0:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8001dd2:	ea45 5502 	orr.w	r5, r5, r2, lsl #20
 8001dd6:	62dd      	str	r5, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001dd8:	689d      	ldr	r5, [r3, #8]
 8001dda:	f425 7500 	bic.w	r5, r5, #512	; 0x200
 8001dde:	609d      	str	r5, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8001de0:	6899      	ldr	r1, [r3, #8]
 8001de2:	ea41 214e 	orr.w	r1, r1, lr, lsl #9
 8001de6:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001de8:	6899      	ldr	r1, [r3, #8]
 8001dea:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001dee:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8001df6:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001df8:	6466      	str	r6, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001dfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001dfc:	f023 0303 	bic.w	r3, r3, #3
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001e06:	2300      	movs	r3, #0
 8001e08:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8001e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e1c:	609a      	str	r2, [r3, #8]
 8001e1e:	e7bc      	b.n	8001d9a <HAL_ADC_Init+0xaa>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e20:	6858      	ldr	r0, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e22:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e24:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e28:	1e51      	subs	r1, r2, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e2a:	6058      	str	r0, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e32:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001e3a:	605a      	str	r2, [r3, #4]
 8001e3c:	e7bd      	b.n	8001dba <HAL_ADC_Init+0xca>
    return HAL_ERROR;
 8001e3e:	2001      	movs	r0, #1
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	ffffeefd 	.word	0xffffeefd
 8001e48:	40012300 	.word	0x40012300
 8001e4c:	0f000001 	.word	0x0f000001

08001e50 <HAL_ADC_ConfigChannel>:
  __HAL_LOCK(hadc);
 8001e50:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  __IO uint32_t counter = 0;
 8001e54:	2200      	movs	r2, #0
{
 8001e56:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8001e58:	2b01      	cmp	r3, #1
{
 8001e5a:	b083      	sub	sp, #12
  __IO uint32_t counter = 0;
 8001e5c:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001e5e:	d05e      	beq.n	8001f1e <HAL_ADC_ConfigChannel+0xce>
	if (sConfig->Channel > ADC_CHANNEL_9)
 8001e60:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8001e62:	2301      	movs	r3, #1
	if (sConfig->Channel > ADC_CHANNEL_9)
 8001e64:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8001e66:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
	if (sConfig->Channel > ADC_CHANNEL_9)
 8001e6a:	462e      	mov	r6, r5
 8001e6c:	d829      	bhi.n	8001ec2 <HAL_ADC_ConfigChannel+0x72>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e6e:	6804      	ldr	r4, [r0, #0]
 8001e70:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 8001e74:	2707      	movs	r7, #7
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e76:	688b      	ldr	r3, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e78:	6922      	ldr	r2, [r4, #16]
 8001e7a:	fa07 f70e 	lsl.w	r7, r7, lr
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e7e:	fa03 f30e 	lsl.w	r3, r3, lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e82:	ea22 0207 	bic.w	r2, r2, r7
 8001e86:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e88:	6922      	ldr	r2, [r4, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	6123      	str	r3, [r4, #16]
  if (sConfig->Rank < 7)
 8001e8e:	684b      	ldr	r3, [r1, #4]
 8001e90:	2b06      	cmp	r3, #6
 8001e92:	d831      	bhi.n	8001ef8 <HAL_ADC_ConfigChannel+0xa8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e94:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001e98:	211f      	movs	r1, #31
 8001e9a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001e9c:	3b05      	subs	r3, #5
 8001e9e:	4099      	lsls	r1, r3
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ea0:	fa06 f303 	lsl.w	r3, r6, r3
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ea4:	ea22 0201 	bic.w	r2, r2, r1
 8001ea8:	6362      	str	r2, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001eaa:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001eac:	4313      	orrs	r3, r2
 8001eae:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001eb0:	4b3e      	ldr	r3, [pc, #248]	; (8001fac <HAL_ADC_ConfigChannel+0x15c>)
 8001eb2:	429c      	cmp	r4, r3
 8001eb4:	d045      	beq.n	8001f42 <HAL_ADC_ConfigChannel+0xf2>
  __HAL_UNLOCK(hadc);
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001ebc:	4618      	mov	r0, r3
}
 8001ebe:	b003      	add	sp, #12
 8001ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ec2:	b2ab      	uxth	r3, r5
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ec4:	6804      	ldr	r4, [r0, #0]
 8001ec6:	f04f 0e07 	mov.w	lr, #7
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eca:	4e39      	ldr	r6, [pc, #228]	; (8001fb0 <HAL_ADC_ConfigChannel+0x160>)
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ecc:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8001ed0:	68e2      	ldr	r2, [r4, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ed2:	42b5      	cmp	r5, r6
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ed4:	f1a7 071e 	sub.w	r7, r7, #30
 8001ed8:	fa0e fe07 	lsl.w	lr, lr, r7
 8001edc:	ea22 020e 	bic.w	r2, r2, lr
 8001ee0:	60e2      	str	r2, [r4, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ee2:	d056      	beq.n	8001f92 <HAL_ADC_ConfigChannel+0x142>
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ee4:	688a      	ldr	r2, [r1, #8]
 8001ee6:	461e      	mov	r6, r3
 8001ee8:	68e3      	ldr	r3, [r4, #12]
 8001eea:	fa02 f707 	lsl.w	r7, r2, r7
 8001eee:	431f      	orrs	r7, r3
  if (sConfig->Rank < 7)
 8001ef0:	684b      	ldr	r3, [r1, #4]
 8001ef2:	2b06      	cmp	r3, #6
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ef4:	60e7      	str	r7, [r4, #12]
  if (sConfig->Rank < 7)
 8001ef6:	d9cd      	bls.n	8001e94 <HAL_ADC_ConfigChannel+0x44>
  else if (sConfig->Rank < 13)
 8001ef8:	2b0c      	cmp	r3, #12
 8001efa:	d813      	bhi.n	8001f24 <HAL_ADC_ConfigChannel+0xd4>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001efc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001f00:	271f      	movs	r7, #31
 8001f02:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001f04:	f1a3 0123 	sub.w	r1, r3, #35	; 0x23
 8001f08:	fa07 f301 	lsl.w	r3, r7, r1
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f0c:	fa06 f101 	lsl.w	r1, r6, r1
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f10:	ea22 0303 	bic.w	r3, r2, r3
 8001f14:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f16:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001f18:	4319      	orrs	r1, r3
 8001f1a:	6321      	str	r1, [r4, #48]	; 0x30
 8001f1c:	e7c8      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 8001f1e:	2002      	movs	r0, #2
}
 8001f20:	b003      	add	sp, #12
 8001f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f24:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8001f28:	271f      	movs	r7, #31
 8001f2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f2c:	3a41      	subs	r2, #65	; 0x41
 8001f2e:	4097      	lsls	r7, r2
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f30:	fa06 f102 	lsl.w	r1, r6, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f34:	ea23 0307 	bic.w	r3, r3, r7
 8001f38:	62e3      	str	r3, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f3a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001f3c:	4311      	orrs	r1, r2
 8001f3e:	62e1      	str	r1, [r4, #44]	; 0x2c
 8001f40:	e7b6      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0x60>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f42:	2d12      	cmp	r5, #18
 8001f44:	d02c      	beq.n	8001fa0 <HAL_ADC_ConfigChannel+0x150>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f46:	4b1a      	ldr	r3, [pc, #104]	; (8001fb0 <HAL_ADC_ConfigChannel+0x160>)
 8001f48:	429d      	cmp	r5, r3
 8001f4a:	d001      	beq.n	8001f50 <HAL_ADC_ConfigChannel+0x100>
 8001f4c:	2d11      	cmp	r5, #17
 8001f4e:	d1b2      	bne.n	8001eb6 <HAL_ADC_ConfigChannel+0x66>
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001f50:	4a18      	ldr	r2, [pc, #96]	; (8001fb4 <HAL_ADC_ConfigChannel+0x164>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f52:	4917      	ldr	r1, [pc, #92]	; (8001fb0 <HAL_ADC_ConfigChannel+0x160>)
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001f54:	6853      	ldr	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f56:	428d      	cmp	r5, r1
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001f58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f5c:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f5e:	d1aa      	bne.n	8001eb6 <HAL_ADC_ConfigChannel+0x66>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001f60:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8001f64:	4b14      	ldr	r3, [pc, #80]	; (8001fb8 <HAL_ADC_ConfigChannel+0x168>)
 8001f66:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f202 3283 	addw	r2, r2, #899	; 0x383
 8001f70:	fba2 2303 	umull	r2, r3, r2, r3
 8001f74:	0c9b      	lsrs	r3, r3, #18
 8001f76:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8001f7e:	9b01      	ldr	r3, [sp, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d098      	beq.n	8001eb6 <HAL_ADC_ConfigChannel+0x66>
        counter--;
 8001f84:	9b01      	ldr	r3, [sp, #4]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8001f8a:	9b01      	ldr	r3, [sp, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1f9      	bne.n	8001f84 <HAL_ADC_ConfigChannel+0x134>
 8001f90:	e791      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x66>
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001f92:	68e3      	ldr	r3, [r4, #12]
 8001f94:	2612      	movs	r6, #18
 8001f96:	688a      	ldr	r2, [r1, #8]
 8001f98:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001f9c:	60e3      	str	r3, [r4, #12]
 8001f9e:	e776      	b.n	8001e8e <HAL_ADC_ConfigChannel+0x3e>
    ADC->CCR |= ADC_CCR_VBATE;
 8001fa0:	4a04      	ldr	r2, [pc, #16]	; (8001fb4 <HAL_ADC_ConfigChannel+0x164>)
 8001fa2:	6853      	ldr	r3, [r2, #4]
 8001fa4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fa8:	6053      	str	r3, [r2, #4]
 8001faa:	e784      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x66>
 8001fac:	40012000 	.word	0x40012000
 8001fb0:	10000012 	.word	0x10000012
 8001fb4:	40012300 	.word	0x40012300
 8001fb8:	20000000 	.word	0x20000000

08001fbc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fbc:	4907      	ldr	r1, [pc, #28]	; (8001fdc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001fbe:	0200      	lsls	r0, r0, #8
 8001fc0:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fc2:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001fc4:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc8:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fca:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8001fce:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001fd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001fd4:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fd6:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 8001fd8:	60c8      	str	r0, [r1, #12]
 8001fda:	4770      	bx	lr
 8001fdc:	e000ed00 	.word	0xe000ed00
 8001fe0:	05fa0000 	.word	0x05fa0000

08001fe4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe4:	4b19      	ldr	r3, [pc, #100]	; (800204c <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fe6:	b470      	push	{r4, r5, r6}
 8001fe8:	68dc      	ldr	r4, [r3, #12]
 8001fea:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fee:	f1c4 0607 	rsb	r6, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ff2:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff4:	2e04      	cmp	r6, #4
 8001ff6:	bf28      	it	cs
 8001ff8:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ffa:	2b06      	cmp	r3, #6
 8001ffc:	d919      	bls.n	8002032 <HAL_NVIC_SetPriority+0x4e>
 8001ffe:	3c03      	subs	r4, #3
 8002000:	2501      	movs	r5, #1
 8002002:	40a5      	lsls	r5, r4
 8002004:	3d01      	subs	r5, #1
 8002006:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002008:	2301      	movs	r3, #1
  if ((int32_t)(IRQn) < 0)
 800200a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800200c:	fa03 f306 	lsl.w	r3, r3, r6
 8002010:	f103 33ff 	add.w	r3, r3, #4294967295
 8002014:	ea01 0103 	and.w	r1, r1, r3
 8002018:	fa01 f104 	lsl.w	r1, r1, r4
 800201c:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) < 0)
 8002020:	db0a      	blt.n	8002038 <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002022:	0109      	lsls	r1, r1, #4
 8002024:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <HAL_NVIC_SetPriority+0x6c>)
 8002026:	b2c9      	uxtb	r1, r1
 8002028:	4403      	add	r3, r0
 800202a:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800202e:	bc70      	pop	{r4, r5, r6}
 8002030:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002032:	2200      	movs	r2, #0
 8002034:	4614      	mov	r4, r2
 8002036:	e7e7      	b.n	8002008 <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002038:	f000 000f 	and.w	r0, r0, #15
 800203c:	0109      	lsls	r1, r1, #4
 800203e:	4b05      	ldr	r3, [pc, #20]	; (8002054 <HAL_NVIC_SetPriority+0x70>)
 8002040:	b2c9      	uxtb	r1, r1
 8002042:	4403      	add	r3, r0
 8002044:	7619      	strb	r1, [r3, #24]
 8002046:	bc70      	pop	{r4, r5, r6}
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	e000ed00 	.word	0xe000ed00
 8002050:	e000e100 	.word	0xe000e100
 8002054:	e000ecfc 	.word	0xe000ecfc

08002058 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002058:	f000 011f 	and.w	r1, r0, #31
 800205c:	2301      	movs	r3, #1
 800205e:	4a03      	ldr	r2, [pc, #12]	; (800206c <HAL_NVIC_EnableIRQ+0x14>)
 8002060:	0940      	lsrs	r0, r0, #5
 8002062:	408b      	lsls	r3, r1
 8002064:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	e000e100 	.word	0xe000e100

08002070 <HAL_DCMI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{     
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8002070:	2800      	cmp	r0, #0
 8002072:	d044      	beq.n	80020fe <HAL_DCMI_Init+0x8e>
{     
 8002074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
                
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8002076:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800207a:	4604      	mov	r4, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d038      	beq.n	80020f2 <HAL_DCMI_Init+0x82>
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002080:	6861      	ldr	r1, [r4, #4]
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8002082:	2602      	movs	r6, #2
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002084:	6963      	ldr	r3, [r4, #20]
 8002086:	68e0      	ldr	r0, [r4, #12]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart);
                                     
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8002088:	2910      	cmp	r1, #16
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800208a:	ea43 0301 	orr.w	r3, r3, r1
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800208e:	6925      	ldr	r5, [r4, #16]
 8002090:	68a2      	ldr	r2, [r4, #8]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002092:	ea43 0300 	orr.w	r3, r3, r0
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002096:	69a0      	ldr	r0, [r4, #24]
 8002098:	6a27      	ldr	r7, [r4, #32]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800209a:	ea43 0305 	orr.w	r3, r3, r5
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 800209e:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80020a2:	6a66      	ldr	r6, [r4, #36]	; 0x24
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80020a4:	ea43 0302 	orr.w	r3, r3, r2
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80020a8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80020aa:	6822      	ldr	r2, [r4, #0]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80020ac:	ea43 0300 	orr.w	r3, r3, r0
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80020b0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80020b2:	ea43 0307 	orr.w	r3, r3, r7
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80020b6:	6817      	ldr	r7, [r2, #0]
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80020b8:	ea43 0306 	orr.w	r3, r3, r6
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80020bc:	4e11      	ldr	r6, [pc, #68]	; (8002104 <HAL_DCMI_Init+0x94>)
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80020be:	ea43 0305 	orr.w	r3, r3, r5
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80020c2:	ea06 0607 	and.w	r6, r6, r7
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80020c6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80020c8:	ea43 0300 	orr.w	r3, r3, r0
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80020cc:	6016      	str	r6, [r2, #0]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80020ce:	6810      	ldr	r0, [r2, #0]
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80020d0:	ea43 0305 	orr.w	r3, r3, r5
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80020d4:	ea43 0300 	orr.w	r3, r3, r0
 80020d8:	6013      	str	r3, [r2, #0]
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80020da:	d00d      	beq.n	80020f8 <HAL_DCMI_Init+0x88>
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80020dc:	68d3      	ldr	r3, [r2, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80020de:	2100      	movs	r1, #0
  
  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80020e0:	2501      	movs	r5, #1
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80020e2:	f043 031e 	orr.w	r3, r3, #30

  return HAL_OK;
 80020e6:	4608      	mov	r0, r1
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80020e8:	60d3      	str	r3, [r2, #12]
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80020ea:	64e1      	str	r1, [r4, #76]	; 0x4c
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80020ec:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  return HAL_OK;
 80020f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_DCMI_MspInit(hdcmi);
 80020f2:	f7ff f89d 	bl	8001230 <HAL_DCMI_MspInit>
 80020f6:	e7c3      	b.n	8002080 <HAL_DCMI_Init+0x10>
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 80020f8:	69e3      	ldr	r3, [r4, #28]
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 80020fa:	6193      	str	r3, [r2, #24]
 80020fc:	e7ee      	b.n	80020dc <HAL_DCMI_Init+0x6c>
     return HAL_ERROR;
 80020fe:	2001      	movs	r0, #1
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	ffe0f007 	.word	0xffe0f007

08002108 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800210a:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 800210c:	f7ff fdd8 	bl	8001cc0 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002110:	2c00      	cmp	r4, #0
 8002112:	d076      	beq.n	8002202 <HAL_DMA_Init+0xfa>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002114:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002116:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8002118:	2100      	movs	r1, #0
 800211a:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 800211c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8002120:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 8002122:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8002126:	f022 0201 	bic.w	r2, r2, #1
 800212a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800212c:	e005      	b.n	800213a <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800212e:	f7ff fdc7 	bl	8001cc0 <HAL_GetTick>
 8002132:	1b40      	subs	r0, r0, r5
 8002134:	2805      	cmp	r0, #5
 8002136:	d83e      	bhi.n	80021b6 <HAL_DMA_Init+0xae>
 8002138:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	07d1      	lsls	r1, r2, #31
 800213e:	d4f6      	bmi.n	800212e <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002140:	68a1      	ldr	r1, [r4, #8]
 8002142:	6862      	ldr	r2, [r4, #4]
 8002144:	68e0      	ldr	r0, [r4, #12]
 8002146:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002148:	6921      	ldr	r1, [r4, #16]
 800214a:	6965      	ldr	r5, [r4, #20]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800214c:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800214e:	69a6      	ldr	r6, [r4, #24]
 8002150:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002152:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002154:	4f37      	ldr	r7, [pc, #220]	; (8002234 <HAL_DMA_Init+0x12c>)
  tmp = hdma->Instance->CR;
 8002156:	6819      	ldr	r1, [r3, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002158:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800215a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800215c:	400f      	ands	r7, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800215e:	6a21      	ldr	r1, [r4, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002160:	4332      	orrs	r2, r6
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002162:	2d04      	cmp	r5, #4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002164:	ea42 0200 	orr.w	r2, r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002168:	ea42 0201 	orr.w	r2, r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800216c:	ea42 0207 	orr.w	r2, r2, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002170:	d028      	beq.n	80021c4 <HAL_DMA_Init+0xbc>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002172:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002174:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002176:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800217a:	4315      	orrs	r5, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800217c:	b2da      	uxtb	r2, r3
 800217e:	482e      	ldr	r0, [pc, #184]	; (8002238 <HAL_DMA_Init+0x130>)
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002180:	492e      	ldr	r1, [pc, #184]	; (800223c <HAL_DMA_Init+0x134>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002182:	3a10      	subs	r2, #16
  hdma->Instance->FCR = tmp;
 8002184:	615d      	str	r5, [r3, #20]
  hdma->State = HAL_DMA_STATE_READY;
 8002186:	2501      	movs	r5, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002188:	fba0 0202 	umull	r0, r2, r0, r2
 800218c:	0912      	lsrs	r2, r2, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800218e:	5c88      	ldrb	r0, [r1, r2]
  
  if (stream_number > 3U)
 8002190:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002192:	4a2b      	ldr	r2, [pc, #172]	; (8002240 <HAL_DMA_Init+0x138>)
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002194:	f04f 0100 	mov.w	r1, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002198:	65e0      	str	r0, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800219a:	ea02 0203 	and.w	r2, r2, r3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800219e:	f04f 033f 	mov.w	r3, #63	; 0x3f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021a2:	bf88      	it	hi
 80021a4:	3204      	addhi	r2, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021a6:	4083      	lsls	r3, r0
  return HAL_OK;
 80021a8:	4608      	mov	r0, r1
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021aa:	65a2      	str	r2, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ac:	6093      	str	r3, [r2, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021ae:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80021b0:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  return HAL_OK;
 80021b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021b8:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 80021ba:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021bc:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021be:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 80021c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021c4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80021c6:	6b21      	ldr	r1, [r4, #48]	; 0x30
    tmp |= hdma->Init.FIFOThreshold;
 80021c8:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021ca:	4301      	orrs	r1, r0
    tmp |= hdma->Init.FIFOThreshold;
 80021cc:	f047 0504 	orr.w	r5, r7, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021d0:	430a      	orrs	r2, r1
  hdma->Instance->CR = tmp;  
 80021d2:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80021d4:	695a      	ldr	r2, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021d6:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 80021da:	4315      	orrs	r5, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021dc:	2800      	cmp	r0, #0
 80021de:	d0cd      	beq.n	800217c <HAL_DMA_Init+0x74>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021e0:	b18e      	cbz	r6, 8002206 <HAL_DMA_Init+0xfe>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021e2:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 80021e6:	d018      	beq.n	800221a <HAL_DMA_Init+0x112>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021e8:	2f02      	cmp	r7, #2
 80021ea:	d903      	bls.n	80021f4 <HAL_DMA_Init+0xec>
 80021ec:	2f03      	cmp	r7, #3
 80021ee:	d1c5      	bne.n	800217c <HAL_DMA_Init+0x74>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021f0:	01c2      	lsls	r2, r0, #7
 80021f2:	d5c3      	bpl.n	800217c <HAL_DMA_Init+0x74>
        hdma->State = HAL_DMA_STATE_READY;
 80021f4:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021f6:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 80021f8:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021fa:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80021fc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8002200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002202:	2001      	movs	r0, #1
 8002204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 8002206:	2f01      	cmp	r7, #1
 8002208:	d003      	beq.n	8002212 <HAL_DMA_Init+0x10a>
 800220a:	d3f1      	bcc.n	80021f0 <HAL_DMA_Init+0xe8>
 800220c:	2f02      	cmp	r7, #2
 800220e:	d1b5      	bne.n	800217c <HAL_DMA_Init+0x74>
 8002210:	e7ee      	b.n	80021f0 <HAL_DMA_Init+0xe8>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002212:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8002216:	d1b1      	bne.n	800217c <HAL_DMA_Init+0x74>
 8002218:	e7ec      	b.n	80021f4 <HAL_DMA_Init+0xec>
    switch (tmp)
 800221a:	2f03      	cmp	r7, #3
 800221c:	d8ae      	bhi.n	800217c <HAL_DMA_Init+0x74>
 800221e:	a201      	add	r2, pc, #4	; (adr r2, 8002224 <HAL_DMA_Init+0x11c>)
 8002220:	f852 f027 	ldr.w	pc, [r2, r7, lsl #2]
 8002224:	080021f5 	.word	0x080021f5
 8002228:	080021f1 	.word	0x080021f1
 800222c:	080021f5 	.word	0x080021f5
 8002230:	08002213 	.word	0x08002213
 8002234:	f010803f 	.word	0xf010803f
 8002238:	aaaaaaab 	.word	0xaaaaaaab
 800223c:	08019728 	.word	0x08019728
 8002240:	fffffc00 	.word	0xfffffc00

08002244 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8002244:	2800      	cmp	r0, #0
 8002246:	d036      	beq.n	80022b6 <HAL_DMA_DeInit+0x72>
 8002248:	4603      	mov	r3, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800224a:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
 800224e:	b2c0      	uxtb	r0, r0
 8002250:	2802      	cmp	r0, #2
 8002252:	d02f      	beq.n	80022b4 <HAL_DMA_DeInit+0x70>
  __HAL_DMA_DISABLE(hdma);
 8002254:	681a      	ldr	r2, [r3, #0]
  hdma->Instance->CR   = 0U;
 8002256:	2000      	movs	r0, #0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002258:	b2d1      	uxtb	r1, r2
{
 800225a:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800225c:	3910      	subs	r1, #16
 800225e:	4f17      	ldr	r7, [pc, #92]	; (80022bc <HAL_DMA_DeInit+0x78>)
  __HAL_DMA_DISABLE(hdma);
 8002260:	6814      	ldr	r4, [r2, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8002262:	2621      	movs	r6, #33	; 0x21
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002264:	fba7 7101 	umull	r7, r1, r7, r1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002268:	4d15      	ldr	r5, [pc, #84]	; (80022c0 <HAL_DMA_DeInit+0x7c>)
  __HAL_DMA_DISABLE(hdma);
 800226a:	f024 0401 	bic.w	r4, r4, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800226e:	0909      	lsrs	r1, r1, #4
  __HAL_DMA_DISABLE(hdma);
 8002270:	6014      	str	r4, [r2, #0]
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002272:	243f      	movs	r4, #63	; 0x3f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002274:	5c6d      	ldrb	r5, [r5, r1]
  if (stream_number > 3U)
 8002276:	2903      	cmp	r1, #3
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002278:	4912      	ldr	r1, [pc, #72]	; (80022c4 <HAL_DMA_DeInit+0x80>)
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800227a:	fa04 f405 	lsl.w	r4, r4, r5
  hdma->Instance->CR   = 0U;
 800227e:	6010      	str	r0, [r2, #0]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002280:	ea01 0102 	and.w	r1, r1, r2
  hdma->Instance->NDTR = 0U;
 8002284:	6050      	str	r0, [r2, #4]
  hdma->Instance->PAR  = 0U;
 8002286:	6090      	str	r0, [r2, #8]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002288:	bf88      	it	hi
 800228a:	3104      	addhi	r1, #4
  hdma->Instance->M0AR = 0U;
 800228c:	60d0      	str	r0, [r2, #12]
  hdma->Instance->M1AR = 0U;
 800228e:	6110      	str	r0, [r2, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8002290:	6156      	str	r6, [r2, #20]
  hdma->XferCpltCallback = NULL;
 8002292:	2200      	movs	r2, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002294:	65dd      	str	r5, [r3, #92]	; 0x5c
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002296:	6599      	str	r1, [r3, #88]	; 0x58
  return HAL_OK;
 8002298:	4610      	mov	r0, r2
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800229a:	608c      	str	r4, [r1, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800229c:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->XferCpltCallback = NULL;
 800229e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80022a0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80022a2:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80022a4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80022a6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80022a8:	651a      	str	r2, [r3, #80]	; 0x50
  hdma->State = HAL_DMA_STATE_RESET;
 80022aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 80022ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 80022b2:	bcf0      	pop	{r4, r5, r6, r7}
 80022b4:	4770      	bx	lr
    return HAL_ERROR;
 80022b6:	2001      	movs	r0, #1
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	aaaaaaab 	.word	0xaaaaaaab
 80022c0:	08019728 	.word	0x08019728
 80022c4:	fffffc00 	.word	0xfffffc00

080022c8 <HAL_DMA_Start_IT>:
{
 80022c8:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 80022ca:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80022ce:	2c01      	cmp	r4, #1
 80022d0:	d00e      	beq.n	80022f0 <HAL_DMA_Start_IT+0x28>
 80022d2:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80022d4:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022d8:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 80022da:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 80022dc:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80022e0:	d00a      	beq.n	80022f8 <HAL_DMA_Start_IT+0x30>
    __HAL_UNLOCK(hdma);	  
 80022e2:	2200      	movs	r2, #0
    status = HAL_BUSY;
 80022e4:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);	  
 80022e6:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	bcf0      	pop	{r4, r5, r6, r7}
 80022ee:	4770      	bx	lr
  __HAL_LOCK(hdma);
 80022f0:	2302      	movs	r3, #2
}
 80022f2:	bcf0      	pop	{r4, r5, r6, r7}
 80022f4:	4618      	mov	r0, r3
 80022f6:	4770      	bx	lr
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022f8:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 80022fa:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022fc:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 80022fe:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002302:	6545      	str	r5, [r0, #84]	; 0x54
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002304:	6887      	ldr	r7, [r0, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002306:	6825      	ldr	r5, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002308:	2f40      	cmp	r7, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800230a:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 800230e:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8002310:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002312:	d019      	beq.n	8002348 <HAL_DMA_Start_IT+0x80>
    hdma->Instance->PAR = SrcAddress;
 8002314:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8002316:	60e2      	str	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002318:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 800231a:	233f      	movs	r3, #63	; 0x3f
    if(hdma->XferHalfCpltCallback != NULL)
 800231c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800231e:	408b      	lsls	r3, r1
 8002320:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002322:	6823      	ldr	r3, [r4, #0]
 8002324:	f043 0316 	orr.w	r3, r3, #22
 8002328:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800232a:	6963      	ldr	r3, [r4, #20]
 800232c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002330:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8002332:	b11a      	cbz	r2, 800233c <HAL_DMA_Start_IT+0x74>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002334:	6823      	ldr	r3, [r4, #0]
 8002336:	f043 0308 	orr.w	r3, r3, #8
 800233a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800233c:	6822      	ldr	r2, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800233e:	2300      	movs	r3, #0
    __HAL_DMA_ENABLE(hdma);
 8002340:	f042 0201 	orr.w	r2, r2, #1
 8002344:	6022      	str	r2, [r4, #0]
 8002346:	e7d0      	b.n	80022ea <HAL_DMA_Start_IT+0x22>
    hdma->Instance->PAR = DstAddress;
 8002348:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 800234a:	60e1      	str	r1, [r4, #12]
 800234c:	e7e4      	b.n	8002318 <HAL_DMA_Start_IT+0x50>
 800234e:	bf00      	nop

08002350 <HAL_DMA_IRQHandler>:
{
 8002350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002352:	4604      	mov	r4, r0
 8002354:	b083      	sub	sp, #12
  __IO uint32_t count = 0;
 8002356:	2000      	movs	r0, #0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002358:	2208      	movs	r2, #8
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800235a:	6da7      	ldr	r7, [r4, #88]	; 0x58
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800235c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  __IO uint32_t count = 0;
 800235e:	9001      	str	r0, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002360:	409a      	lsls	r2, r3
  tmpisr = regs->ISR;
 8002362:	683d      	ldr	r5, [r7, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8002364:	4960      	ldr	r1, [pc, #384]	; (80024e8 <HAL_DMA_IRQHandler+0x198>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002366:	4215      	tst	r5, r2
  uint32_t timeout = SystemCoreClock / 9600;
 8002368:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800236a:	d003      	beq.n	8002374 <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800236c:	6821      	ldr	r1, [r4, #0]
 800236e:	6808      	ldr	r0, [r1, #0]
 8002370:	0740      	lsls	r0, r0, #29
 8002372:	d476      	bmi.n	8002462 <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002374:	2201      	movs	r2, #1
 8002376:	409a      	lsls	r2, r3
 8002378:	4215      	tst	r5, r2
 800237a:	d003      	beq.n	8002384 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800237c:	6821      	ldr	r1, [r4, #0]
 800237e:	6949      	ldr	r1, [r1, #20]
 8002380:	0608      	lsls	r0, r1, #24
 8002382:	d468      	bmi.n	8002456 <HAL_DMA_IRQHandler+0x106>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002384:	2204      	movs	r2, #4
 8002386:	409a      	lsls	r2, r3
 8002388:	4215      	tst	r5, r2
 800238a:	d003      	beq.n	8002394 <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800238c:	6821      	ldr	r1, [r4, #0]
 800238e:	6809      	ldr	r1, [r1, #0]
 8002390:	0789      	lsls	r1, r1, #30
 8002392:	d45a      	bmi.n	800244a <HAL_DMA_IRQHandler+0xfa>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002394:	2210      	movs	r2, #16
 8002396:	409a      	lsls	r2, r3
 8002398:	4215      	tst	r5, r2
 800239a:	d003      	beq.n	80023a4 <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800239c:	6821      	ldr	r1, [r4, #0]
 800239e:	6808      	ldr	r0, [r1, #0]
 80023a0:	0700      	lsls	r0, r0, #28
 80023a2:	d43f      	bmi.n	8002424 <HAL_DMA_IRQHandler+0xd4>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80023a4:	2220      	movs	r2, #32
 80023a6:	409a      	lsls	r2, r3
 80023a8:	4215      	tst	r5, r2
 80023aa:	d003      	beq.n	80023b4 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80023ac:	6821      	ldr	r1, [r4, #0]
 80023ae:	6808      	ldr	r0, [r1, #0]
 80023b0:	06c0      	lsls	r0, r0, #27
 80023b2:	d425      	bmi.n	8002400 <HAL_DMA_IRQHandler+0xb0>
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80023b6:	b30b      	cbz	r3, 80023fc <HAL_DMA_IRQHandler+0xac>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80023ba:	07da      	lsls	r2, r3, #31
 80023bc:	d51a      	bpl.n	80023f4 <HAL_DMA_IRQHandler+0xa4>
      hdma->State = HAL_DMA_STATE_ABORT;
 80023be:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 80023c0:	6821      	ldr	r1, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 80023c2:	4a4a      	ldr	r2, [pc, #296]	; (80024ec <HAL_DMA_IRQHandler+0x19c>)
      hdma->State = HAL_DMA_STATE_ABORT;
 80023c4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  uint32_t timeout = SystemCoreClock / 9600;
 80023c8:	fba2 3206 	umull	r3, r2, r2, r6
      __HAL_DMA_DISABLE(hdma);
 80023cc:	680b      	ldr	r3, [r1, #0]
 80023ce:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 80023d2:	0a92      	lsrs	r2, r2, #10
      __HAL_DMA_DISABLE(hdma);
 80023d4:	600b      	str	r3, [r1, #0]
 80023d6:	e002      	b.n	80023de <HAL_DMA_IRQHandler+0x8e>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023d8:	680b      	ldr	r3, [r1, #0]
 80023da:	07db      	lsls	r3, r3, #31
 80023dc:	d504      	bpl.n	80023e8 <HAL_DMA_IRQHandler+0x98>
        if (++count > timeout)
 80023de:	9b01      	ldr	r3, [sp, #4]
 80023e0:	3301      	adds	r3, #1
 80023e2:	429a      	cmp	r2, r3
 80023e4:	9301      	str	r3, [sp, #4]
 80023e6:	d2f7      	bcs.n	80023d8 <HAL_DMA_IRQHandler+0x88>
      __HAL_UNLOCK(hdma);
 80023e8:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 80023ea:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 80023ec:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80023f0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80023f4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80023f6:	b10b      	cbz	r3, 80023fc <HAL_DMA_IRQHandler+0xac>
      hdma->XferErrorCallback(hdma);
 80023f8:	4620      	mov	r0, r4
 80023fa:	4798      	blx	r3
}
 80023fc:	b003      	add	sp, #12
 80023fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002400:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002402:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8002406:	2a05      	cmp	r2, #5
 8002408:	d03b      	beq.n	8002482 <HAL_DMA_IRQHandler+0x132>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800240a:	680b      	ldr	r3, [r1, #0]
 800240c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002410:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002412:	d054      	beq.n	80024be <HAL_DMA_IRQHandler+0x16e>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002414:	0319      	lsls	r1, r3, #12
 8002416:	d55f      	bpl.n	80024d8 <HAL_DMA_IRQHandler+0x188>
        if(hdma->XferCpltCallback != NULL)
 8002418:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0ca      	beq.n	80023b4 <HAL_DMA_IRQHandler+0x64>
          hdma->XferCpltCallback(hdma);
 800241e:	4620      	mov	r0, r4
 8002420:	4798      	blx	r3
 8002422:	e7c7      	b.n	80023b4 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002424:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002426:	680a      	ldr	r2, [r1, #0]
 8002428:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800242c:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800242e:	d122      	bne.n	8002476 <HAL_DMA_IRQHandler+0x126>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002430:	05d2      	lsls	r2, r2, #23
 8002432:	d403      	bmi.n	800243c <HAL_DMA_IRQHandler+0xec>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002434:	680a      	ldr	r2, [r1, #0]
 8002436:	f022 0208 	bic.w	r2, r2, #8
 800243a:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800243c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800243e:	2a00      	cmp	r2, #0
 8002440:	d0b0      	beq.n	80023a4 <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 8002442:	4620      	mov	r0, r4
 8002444:	4790      	blx	r2
 8002446:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002448:	e7ac      	b.n	80023a4 <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800244a:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800244c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800244e:	f042 0204 	orr.w	r2, r2, #4
 8002452:	6562      	str	r2, [r4, #84]	; 0x54
 8002454:	e79e      	b.n	8002394 <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002456:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002458:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800245a:	f042 0202 	orr.w	r2, r2, #2
 800245e:	6562      	str	r2, [r4, #84]	; 0x54
 8002460:	e790      	b.n	8002384 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002462:	6808      	ldr	r0, [r1, #0]
 8002464:	f020 0004 	bic.w	r0, r0, #4
 8002468:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800246a:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800246c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800246e:	f042 0201 	orr.w	r2, r2, #1
 8002472:	6562      	str	r2, [r4, #84]	; 0x54
 8002474:	e77e      	b.n	8002374 <HAL_DMA_IRQHandler+0x24>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002476:	0311      	lsls	r1, r2, #12
 8002478:	d5e0      	bpl.n	800243c <HAL_DMA_IRQHandler+0xec>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800247a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800247c:	2a00      	cmp	r2, #0
 800247e:	d1e0      	bne.n	8002442 <HAL_DMA_IRQHandler+0xf2>
 8002480:	e790      	b.n	80023a4 <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002482:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002484:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002486:	f022 0216 	bic.w	r2, r2, #22
 800248a:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800248c:	694a      	ldr	r2, [r1, #20]
 800248e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002492:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002494:	b320      	cbz	r0, 80024e0 <HAL_DMA_IRQHandler+0x190>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002496:	680a      	ldr	r2, [r1, #0]
 8002498:	f022 0208 	bic.w	r2, r2, #8
 800249c:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800249e:	223f      	movs	r2, #63	; 0x3f
        __HAL_UNLOCK(hdma);
 80024a0:	2500      	movs	r5, #0
        hdma->State = HAL_DMA_STATE_READY;
 80024a2:	2001      	movs	r0, #1
        if(hdma->XferAbortCallback != NULL)
 80024a4:	6d21      	ldr	r1, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 80024ac:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80024b0:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80024b4:	2900      	cmp	r1, #0
 80024b6:	d0a1      	beq.n	80023fc <HAL_DMA_IRQHandler+0xac>
          hdma->XferAbortCallback(hdma);
 80024b8:	4620      	mov	r0, r4
 80024ba:	4788      	blx	r1
 80024bc:	e79e      	b.n	80023fc <HAL_DMA_IRQHandler+0xac>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024be:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80024c2:	d1a9      	bne.n	8002418 <HAL_DMA_IRQHandler+0xc8>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80024c4:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80024c6:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80024c8:	f022 0210 	bic.w	r2, r2, #16
 80024cc:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 80024ce:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80024d2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 80024d6:	e79f      	b.n	8002418 <HAL_DMA_IRQHandler+0xc8>
          if(hdma->XferM1CpltCallback != NULL)
 80024d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d19f      	bne.n	800241e <HAL_DMA_IRQHandler+0xce>
 80024de:	e769      	b.n	80023b4 <HAL_DMA_IRQHandler+0x64>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024e0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80024e2:	2a00      	cmp	r2, #0
 80024e4:	d1d7      	bne.n	8002496 <HAL_DMA_IRQHandler+0x146>
 80024e6:	e7da      	b.n	800249e <HAL_DMA_IRQHandler+0x14e>
 80024e8:	20000000 	.word	0x20000000
 80024ec:	1b4e81b5 	.word	0x1b4e81b5

080024f0 <HAL_DMA_RegisterCallback>:
{
 80024f0:	4603      	mov	r3, r0
  __HAL_LOCK(hdma);
 80024f2:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 80024f6:	2801      	cmp	r0, #1
 80024f8:	d00d      	beq.n	8002516 <HAL_DMA_RegisterCallback+0x26>
 80024fa:	2001      	movs	r0, #1
{
 80024fc:	b410      	push	{r4}
  if(HAL_DMA_STATE_READY == hdma->State)
 80024fe:	f893 4035 	ldrb.w	r4, [r3, #53]	; 0x35
  __HAL_LOCK(hdma);
 8002502:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002506:	4284      	cmp	r4, r0
 8002508:	d007      	beq.n	800251a <HAL_DMA_RegisterCallback+0x2a>
  __HAL_UNLOCK(hdma);
 800250a:	2200      	movs	r2, #0
}
 800250c:	f85d 4b04 	ldr.w	r4, [sp], #4
  __HAL_UNLOCK(hdma);
 8002510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8002514:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8002516:	2002      	movs	r0, #2
 8002518:	4770      	bx	lr
    switch (CallbackID)
 800251a:	2905      	cmp	r1, #5
 800251c:	d816      	bhi.n	800254c <HAL_DMA_RegisterCallback+0x5c>
 800251e:	e8df f001 	tbb	[pc, r1]
 8002522:	0f12      	.short	0x0f12
 8002524:	0306090c 	.word	0x0306090c
      hdma->XferAbortCallback = pCallback;
 8002528:	651a      	str	r2, [r3, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 800252a:	2000      	movs	r0, #0
      break;
 800252c:	e7ed      	b.n	800250a <HAL_DMA_RegisterCallback+0x1a>
      hdma->XferErrorCallback = pCallback;
 800252e:	64da      	str	r2, [r3, #76]	; 0x4c
  HAL_StatusTypeDef status = HAL_OK;
 8002530:	2000      	movs	r0, #0
      break;
 8002532:	e7ea      	b.n	800250a <HAL_DMA_RegisterCallback+0x1a>
      hdma->XferM1HalfCpltCallback = pCallback;
 8002534:	649a      	str	r2, [r3, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 8002536:	2000      	movs	r0, #0
      break;
 8002538:	e7e7      	b.n	800250a <HAL_DMA_RegisterCallback+0x1a>
      hdma->XferM1CpltCallback = pCallback;
 800253a:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_StatusTypeDef status = HAL_OK;
 800253c:	2000      	movs	r0, #0
      break;
 800253e:	e7e4      	b.n	800250a <HAL_DMA_RegisterCallback+0x1a>
      hdma->XferHalfCpltCallback = pCallback;
 8002540:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_StatusTypeDef status = HAL_OK;
 8002542:	2000      	movs	r0, #0
      break;
 8002544:	e7e1      	b.n	800250a <HAL_DMA_RegisterCallback+0x1a>
      hdma->XferCpltCallback = pCallback;
 8002546:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8002548:	2000      	movs	r0, #0
      break;
 800254a:	e7de      	b.n	800250a <HAL_DMA_RegisterCallback+0x1a>
  HAL_StatusTypeDef status = HAL_OK;
 800254c:	2000      	movs	r0, #0
 800254e:	e7dc      	b.n	800250a <HAL_DMA_RegisterCallback+0x1a>

08002550 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{  
 8002550:	b470      	push	{r4, r5, r6}
 8002552:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp2 = 0;
  uint32_t tmp3 = 0;
  uint32_t tmp4 = 0;
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 8002554:	6805      	ldr	r5, [r0, #0]
 8002556:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800255a:	6846      	ldr	r6, [r0, #4]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 800255c:	6c6c      	ldr	r4, [r5, #68]	; 0x44
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800255e:	f5b6 3f40 	cmp.w	r6, #196608	; 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 8002562:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 8002566:	ea43 0304 	orr.w	r3, r3, r4
 800256a:	646b      	str	r3, [r5, #68]	; 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800256c:	63ea      	str	r2, [r5, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800256e:	d002      	beq.n	8002576 <DMA2D_SetConfig+0x26>
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);    
  } 
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002570:	60e9      	str	r1, [r5, #12]
  }
}
 8002572:	bc70      	pop	{r4, r5, r6}
 8002574:	4770      	bx	lr
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002576:	6882      	ldr	r2, [r0, #8]
 8002578:	b1b2      	cbz	r2, 80025a8 <DMA2D_SetConfig+0x58>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800257a:	2a01      	cmp	r2, #1
 800257c:	d017      	beq.n	80025ae <DMA2D_SetConfig+0x5e>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800257e:	2a02      	cmp	r2, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002580:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002584:	f401 447f 	and.w	r4, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002588:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800258a:	d013      	beq.n	80025b4 <DMA2D_SetConfig+0x64>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800258c:	2a03      	cmp	r2, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800258e:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002592:	d017      	beq.n	80025c4 <DMA2D_SetConfig+0x74>
      tmp2 = (tmp2 >> 20);
 8002594:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12);
 8002596:	0b24      	lsrs	r4, r4, #12
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 8002598:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28);
 800259a:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 800259c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80025a0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80025a4:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);    
 80025a8:	63a9      	str	r1, [r5, #56]	; 0x38
}
 80025aa:	bc70      	pop	{r4, r5, r6}
 80025ac:	4770      	bx	lr
      tmp = (tmp3 | tmp2 | tmp4);  
 80025ae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80025b2:	e7f9      	b.n	80025a8 <DMA2D_SetConfig+0x58>
      tmp2 = (tmp2 >> 19);
 80025b4:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10);
 80025b6:	0aa4      	lsrs	r4, r4, #10
      tmp  = ((tmp3 << 5) | (tmp2 << 11) | tmp4); 
 80025b8:	02c9      	lsls	r1, r1, #11
 80025ba:	ea41 1144 	orr.w	r1, r1, r4, lsl #5
 80025be:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 80025c2:	e7f1      	b.n	80025a8 <DMA2D_SetConfig+0x58>
      tmp2 = (tmp2 >> 19);
 80025c4:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11);
 80025c6:	0ae4      	lsrs	r4, r4, #11
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 80025c8:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31);
 80025ca:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 80025cc:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
 80025d0:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 80025d4:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 80025d8:	e7e6      	b.n	80025a8 <DMA2D_SetConfig+0x58>
 80025da:	bf00      	nop

080025dc <HAL_DMA2D_Init>:
  if(hdma2d == NULL)
 80025dc:	b358      	cbz	r0, 8002636 <HAL_DMA2D_Init+0x5a>
{ 
 80025de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80025e0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80025e4:	4604      	mov	r4, r0
 80025e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80025ea:	b1fb      	cbz	r3, 800262c <HAL_DMA2D_Init+0x50>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 80025ec:	2202      	movs	r2, #2
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80025ee:	f8d4 c008 	ldr.w	ip, [r4, #8]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80025f2:	2600      	movs	r6, #0
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80025f4:	f04f 0e01 	mov.w	lr, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 80025f8:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 80025fc:	4a0f      	ldr	r2, [pc, #60]	; (800263c <HAL_DMA2D_Init+0x60>)
  return HAL_OK;
 80025fe:	4630      	mov	r0, r6
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002600:	e894 0088 	ldmia.w	r4, {r3, r7}
 8002604:	681d      	ldr	r5, [r3, #0]
 8002606:	f425 3540 	bic.w	r5, r5, #196608	; 0x30000
 800260a:	433d      	orrs	r5, r7
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 800260c:	68e7      	ldr	r7, [r4, #12]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800260e:	601d      	str	r5, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002610:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002612:	f021 0107 	bic.w	r1, r1, #7
 8002616:	ea41 010c 	orr.w	r1, r1, ip
 800261a:	6359      	str	r1, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 800261c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800261e:	400a      	ands	r2, r1
 8002620:	433a      	orrs	r2, r7
 8002622:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002624:	63e6      	str	r6, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002626:	f884 e039 	strb.w	lr, [r4, #57]	; 0x39
  return HAL_OK;
 800262a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 800262c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8002630:	f7fe fe88 	bl	8001344 <HAL_DMA2D_MspInit>
 8002634:	e7da      	b.n	80025ec <HAL_DMA2D_Init+0x10>
     return HAL_ERROR;
 8002636:	2001      	movs	r0, #1
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	ffffc000 	.word	0xffffc000

08002640 <HAL_DMA2D_BlendingStart>:
{
 8002640:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 8002642:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
{
 8002646:	b083      	sub	sp, #12
  __HAL_LOCK(hdma2d);
 8002648:	2d01      	cmp	r5, #1
 800264a:	d102      	bne.n	8002652 <HAL_DMA2D_BlendingStart+0x12>
 800264c:	2002      	movs	r0, #2
}
 800264e:	b003      	add	sp, #12
 8002650:	bdf0      	pop	{r4, r5, r6, r7, pc}
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 8002652:	6806      	ldr	r6, [r0, #0]
 8002654:	4615      	mov	r5, r2
  __HAL_LOCK(hdma2d);
 8002656:	f04f 0e01 	mov.w	lr, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY; 
 800265a:	2702      	movs	r7, #2
 800265c:	4604      	mov	r4, r0
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 800265e:	461a      	mov	r2, r3
  __HAL_LOCK(hdma2d);
 8002660:	f880 e038 	strb.w	lr, [r0, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY; 
 8002664:	f880 7039 	strb.w	r7, [r0, #57]	; 0x39
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 8002668:	6175      	str	r5, [r6, #20]
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 800266a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800266c:	9b08      	ldr	r3, [sp, #32]
 800266e:	9500      	str	r5, [sp, #0]
 8002670:	f7ff ff6e 	bl	8002550 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8002674:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
 8002676:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 8002678:	6813      	ldr	r3, [r2, #0]
 800267a:	f043 0301 	orr.w	r3, r3, #1
 800267e:	6013      	str	r3, [r2, #0]
}
 8002680:	b003      	add	sp, #12
 8002682:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002684 <HAL_DMA2D_PollForTransfer>:
{
 8002684:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0;  
 8002686:	2200      	movs	r2, #0
{
 8002688:	b082      	sub	sp, #8
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 800268a:	6803      	ldr	r3, [r0, #0]
{
 800268c:	4605      	mov	r5, r0
  __IO uint32_t isrflags = 0x0;  
 800268e:	9201      	str	r2, [sp, #4]
{
 8002690:	460c      	mov	r4, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	07d6      	lsls	r6, r2, #31
 8002696:	d420      	bmi.n	80026da <HAL_DMA2D_PollForTransfer+0x56>
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8002698:	69da      	ldr	r2, [r3, #28]
 800269a:	0691      	lsls	r1, r2, #26
 800269c:	d402      	bmi.n	80026a4 <HAL_DMA2D_PollForTransfer+0x20>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 800269e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 80026a0:	0692      	lsls	r2, r2, #26
 80026a2:	d50f      	bpl.n	80026c4 <HAL_DMA2D_PollForTransfer+0x40>
    tickstart = HAL_GetTick();
 80026a4:	f7ff fb0c 	bl	8001cc0 <HAL_GetTick>
 80026a8:	4606      	mov	r6, r0
 80026aa:	682b      	ldr	r3, [r5, #0]
 80026ac:	e007      	b.n	80026be <HAL_DMA2D_PollForTransfer+0x3a>
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 80026b2:	9a01      	ldr	r2, [sp, #4]
 80026b4:	f012 0f29 	tst.w	r2, #41	; 0x29
 80026b8:	d12f      	bne.n	800271a <HAL_DMA2D_PollForTransfer+0x96>
      if(Timeout != HAL_MAX_DELAY)
 80026ba:	1c61      	adds	r1, r4, #1
 80026bc:	d14d      	bne.n	800275a <HAL_DMA2D_PollForTransfer+0xd6>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	06d2      	lsls	r2, r2, #27
 80026c2:	d5f4      	bpl.n	80026ae <HAL_DMA2D_PollForTransfer+0x2a>
  __HAL_UNLOCK(hdma2d);
 80026c4:	2200      	movs	r2, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 80026c6:	2412      	movs	r4, #18
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80026c8:	2101      	movs	r1, #1
  return HAL_OK;
 80026ca:	4610      	mov	r0, r2
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 80026cc:	609c      	str	r4, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 80026ce:	f885 2038 	strb.w	r2, [r5, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80026d2:	f885 1039 	strb.w	r1, [r5, #57]	; 0x39
}
 80026d6:	b002      	add	sp, #8
 80026d8:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 80026da:	f7ff faf1 	bl	8001cc0 <HAL_GetTick>
 80026de:	4606      	mov	r6, r0
 80026e0:	682b      	ldr	r3, [r5, #0]
 80026e2:	e001      	b.n	80026e8 <HAL_DMA2D_PollForTransfer+0x64>
      if(Timeout != HAL_MAX_DELAY)
 80026e4:	1c62      	adds	r2, r4, #1
 80026e6:	d14a      	bne.n	800277e <HAL_DMA2D_PollForTransfer+0xfa>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	0790      	lsls	r0, r2, #30
 80026ec:	d4d4      	bmi.n	8002698 <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 80026f2:	9a01      	ldr	r2, [sp, #4]
 80026f4:	f012 0f21 	tst.w	r2, #33	; 0x21
 80026f8:	d0f4      	beq.n	80026e4 <HAL_DMA2D_PollForTransfer+0x60>
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 80026fa:	9a01      	ldr	r2, [sp, #4]
 80026fc:	0690      	lsls	r0, r2, #26
 80026fe:	d503      	bpl.n	8002708 <HAL_DMA2D_PollForTransfer+0x84>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8002700:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002702:	f042 0202 	orr.w	r2, r2, #2
 8002706:	63ea      	str	r2, [r5, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8002708:	9a01      	ldr	r2, [sp, #4]
 800270a:	07d1      	lsls	r1, r2, #31
 800270c:	d503      	bpl.n	8002716 <HAL_DMA2D_PollForTransfer+0x92>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 800270e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002710:	f042 0201 	orr.w	r2, r2, #1
 8002714:	63ea      	str	r2, [r5, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002716:	2421      	movs	r4, #33	; 0x21
 8002718:	e015      	b.n	8002746 <HAL_DMA2D_PollForTransfer+0xc2>
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 800271a:	9a01      	ldr	r2, [sp, #4]
 800271c:	0716      	lsls	r6, r2, #28
 800271e:	d503      	bpl.n	8002728 <HAL_DMA2D_PollForTransfer+0xa4>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;        
 8002720:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002722:	f042 0204 	orr.w	r2, r2, #4
 8002726:	63ea      	str	r2, [r5, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != RESET)             
 8002728:	9a01      	ldr	r2, [sp, #4]
 800272a:	0694      	lsls	r4, r2, #26
 800272c:	d503      	bpl.n	8002736 <HAL_DMA2D_PollForTransfer+0xb2>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 800272e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002730:	f042 0202 	orr.w	r2, r2, #2
 8002734:	63ea      	str	r2, [r5, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8002736:	9a01      	ldr	r2, [sp, #4]
 8002738:	07d0      	lsls	r0, r2, #31
 800273a:	d503      	bpl.n	8002744 <HAL_DMA2D_PollForTransfer+0xc0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 800273c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800273e:	f042 0201 	orr.w	r2, r2, #1
 8002742:	63ea      	str	r2, [r5, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002744:	2429      	movs	r4, #41	; 0x29
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8002746:	2104      	movs	r1, #4
        __HAL_UNLOCK(hdma2d);
 8002748:	2200      	movs	r2, #0
        return HAL_ERROR;      
 800274a:	2001      	movs	r0, #1
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800274c:	609c      	str	r4, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800274e:	f885 1039 	strb.w	r1, [r5, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 8002752:	f885 2038 	strb.w	r2, [r5, #56]	; 0x38
}
 8002756:	b002      	add	sp, #8
 8002758:	bd70      	pop	{r4, r5, r6, pc}
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800275a:	b124      	cbz	r4, 8002766 <HAL_DMA2D_PollForTransfer+0xe2>
 800275c:	f7ff fab0 	bl	8001cc0 <HAL_GetTick>
 8002760:	1b80      	subs	r0, r0, r6
 8002762:	4284      	cmp	r4, r0
 8002764:	d2a1      	bcs.n	80026aa <HAL_DMA2D_PollForTransfer+0x26>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002766:	6beb      	ldr	r3, [r5, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8002768:	2203      	movs	r2, #3
          __HAL_UNLOCK(hdma2d);
 800276a:	2100      	movs	r1, #0
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800276c:	f043 0320 	orr.w	r3, r3, #32
          return HAL_TIMEOUT;
 8002770:	4610      	mov	r0, r2
          __HAL_UNLOCK(hdma2d);
 8002772:	f885 1038 	strb.w	r1, [r5, #56]	; 0x38
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002776:	63eb      	str	r3, [r5, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8002778:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
          return HAL_TIMEOUT;
 800277c:	e7ab      	b.n	80026d6 <HAL_DMA2D_PollForTransfer+0x52>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800277e:	2c00      	cmp	r4, #0
 8002780:	d0f1      	beq.n	8002766 <HAL_DMA2D_PollForTransfer+0xe2>
 8002782:	f7ff fa9d 	bl	8001cc0 <HAL_GetTick>
 8002786:	1b80      	subs	r0, r0, r6
 8002788:	4284      	cmp	r4, r0
 800278a:	d2a9      	bcs.n	80026e0 <HAL_DMA2D_PollForTransfer+0x5c>
 800278c:	e7eb      	b.n	8002766 <HAL_DMA2D_PollForTransfer+0xe2>
 800278e:	bf00      	nop

08002790 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8002790:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8002794:	2a01      	cmp	r2, #1
 8002796:	d026      	beq.n	80027e6 <HAL_DMA2D_ConfigLayer+0x56>
 8002798:	4603      	mov	r3, r0
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800279a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800279e:	69c2      	ldr	r2, [r0, #28]
{ 
 80027a0:	b4f0      	push	{r4, r5, r6, r7}
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80027a2:	f1a2 0409 	sub.w	r4, r2, #9
  __HAL_LOCK(hdma2d);
 80027a6:	2701      	movs	r7, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80027a8:	6a06      	ldr	r6, [r0, #32]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 80027aa:	2502      	movs	r5, #2
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80027ac:	42bc      	cmp	r4, r7
  __HAL_LOCK(hdma2d);
 80027ae:	f883 7038 	strb.w	r7, [r3, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80027b2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 80027b6:	f883 5039 	strb.w	r5, [r3, #57]	; 0x39
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80027ba:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80027bc:	d91e      	bls.n	80027fc <HAL_DMA2D_ConfigLayer+0x6c>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80027be:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
  if(LayerIdx == 0)
 80027c2:	b991      	cbnz	r1, 80027ea <HAL_DMA2D_ConfigLayer+0x5a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80027c4:	6818      	ldr	r0, [r3, #0]
 80027c6:	491c      	ldr	r1, [pc, #112]	; (8002838 <HAL_DMA2D_ConfigLayer+0xa8>)
 80027c8:	6a45      	ldr	r5, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80027ca:	699c      	ldr	r4, [r3, #24]
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80027cc:	4029      	ands	r1, r5
 80027ce:	430a      	orrs	r2, r1
 80027d0:	6242      	str	r2, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80027d2:	6184      	str	r4, [r0, #24]
  __HAL_UNLOCK(hdma2d);  
 80027d4:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80027d6:	2101      	movs	r1, #1
  return HAL_OK;
 80027d8:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80027da:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);  
 80027de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 80027e2:	bcf0      	pop	{r4, r5, r6, r7}
 80027e4:	4770      	bx	lr
  __HAL_LOCK(hdma2d);
 80027e6:	2002      	movs	r0, #2
 80027e8:	4770      	bx	lr
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80027ea:	681c      	ldr	r4, [r3, #0]
 80027ec:	4912      	ldr	r1, [pc, #72]	; (8002838 <HAL_DMA2D_ConfigLayer+0xa8>)
 80027ee:	69e5      	ldr	r5, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 80027f0:	6980      	ldr	r0, [r0, #24]
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80027f2:	4029      	ands	r1, r5
 80027f4:	430a      	orrs	r2, r1
 80027f6:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 80027f8:	6120      	str	r0, [r4, #16]
 80027fa:	e7eb      	b.n	80027d4 <HAL_DMA2D_ConfigLayer+0x44>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80027fc:	f004 457f 	and.w	r5, r4, #4278190080	; 0xff000000
 8002800:	432a      	orrs	r2, r5
  if(LayerIdx == 0)
 8002802:	b961      	cbnz	r1, 800281e <HAL_DMA2D_ConfigLayer+0x8e>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002804:	6818      	ldr	r0, [r3, #0]
 8002806:	490c      	ldr	r1, [pc, #48]	; (8002838 <HAL_DMA2D_ConfigLayer+0xa8>)
 8002808:	6a45      	ldr	r5, [r0, #36]	; 0x24
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800280a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800280c:	4029      	ands	r1, r5
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800280e:	699d      	ldr	r5, [r3, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8002810:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002814:	430a      	orrs	r2, r1
 8002816:	6242      	str	r2, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002818:	6185      	str	r5, [r0, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800281a:	6284      	str	r4, [r0, #40]	; 0x28
 800281c:	e7da      	b.n	80027d4 <HAL_DMA2D_ConfigLayer+0x44>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800281e:	681d      	ldr	r5, [r3, #0]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 8002820:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002824:	4904      	ldr	r1, [pc, #16]	; (8002838 <HAL_DMA2D_ConfigLayer+0xa8>)
 8002826:	69ee      	ldr	r6, [r5, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 8002828:	6980      	ldr	r0, [r0, #24]
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800282a:	4031      	ands	r1, r6
 800282c:	430a      	orrs	r2, r1
 800282e:	61ea      	str	r2, [r5, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 8002830:	6128      	str	r0, [r5, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 8002832:	622c      	str	r4, [r5, #32]
 8002834:	e7ce      	b.n	80027d4 <HAL_DMA2D_ConfigLayer+0x44>
 8002836:	bf00      	nop
 8002838:	00fcfff0 	.word	0x00fcfff0

0800283c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800283c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002840:	f8d1 c000 	ldr.w	ip, [r1]
 8002844:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002846:	2500      	movs	r5, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002848:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8002a78 <HAL_GPIO_Init+0x23c>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800284c:	f8df e22c 	ldr.w	lr, [pc, #556]	; 8002a7c <HAL_GPIO_Init+0x240>
 8002850:	e003      	b.n	800285a <HAL_GPIO_Init+0x1e>
  for(position = 0; position < GPIO_NUMBER; position++)
 8002852:	3501      	adds	r5, #1
 8002854:	2d10      	cmp	r5, #16
 8002856:	f000 80bf 	beq.w	80029d8 <HAL_GPIO_Init+0x19c>
    ioposition = ((uint32_t)0x01) << position;
 800285a:	2301      	movs	r3, #1
 800285c:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800285e:	ea03 020c 	and.w	r2, r3, ip
    if(iocurrent == ioposition)
 8002862:	4293      	cmp	r3, r2
 8002864:	d1f5      	bne.n	8002852 <HAL_GPIO_Init+0x16>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002866:	684e      	ldr	r6, [r1, #4]
 8002868:	f026 0910 	bic.w	r9, r6, #16
 800286c:	f1b9 0f02 	cmp.w	r9, #2
 8002870:	f040 80b5 	bne.w	80029de <HAL_GPIO_Init+0x1a2>
        temp = GPIOx->AFR[position >> 3];
 8002874:	ea4f 09d5 	mov.w	r9, r5, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002878:	f005 0a07 	and.w	sl, r5, #7
 800287c:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002880:	690c      	ldr	r4, [r1, #16]
 8002882:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002886:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800288a:	f8d9 7020 	ldr.w	r7, [r9, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800288e:	fa0b fb0a 	lsl.w	fp, fp, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002892:	fa04 f40a 	lsl.w	r4, r4, sl
 8002896:	ea4f 0a45 	mov.w	sl, r5, lsl #1
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800289a:	ea27 070b 	bic.w	r7, r7, fp
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800289e:	f04f 0b03 	mov.w	fp, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80028a2:	433c      	orrs	r4, r7
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80028a4:	fa0b fb0a 	lsl.w	fp, fp, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80028a8:	f006 0703 	and.w	r7, r6, #3
        GPIOx->AFR[position >> 3] = temp;
 80028ac:	f8c9 4020 	str.w	r4, [r9, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80028b0:	ea6f 040b 	mvn.w	r4, fp
      temp = GPIOx->MODER;
 80028b4:	f8d0 9000 	ldr.w	r9, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80028b8:	fa07 f70a 	lsl.w	r7, r7, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80028bc:	ea09 0904 	and.w	r9, r9, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80028c0:	ea47 0709 	orr.w	r7, r7, r9
      GPIOx->MODER = temp;
 80028c4:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 80028c6:	6887      	ldr	r7, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80028c8:	f3c6 1900 	ubfx	r9, r6, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80028cc:	ea07 0b04 	and.w	fp, r7, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 80028d0:	68cf      	ldr	r7, [r1, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80028d2:	fa09 f905 	lsl.w	r9, r9, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 80028d6:	fa07 f70a 	lsl.w	r7, r7, sl
 80028da:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 80028de:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80028e0:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028e2:	ea27 0303 	bic.w	r3, r7, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80028e6:	ea49 0303 	orr.w	r3, r9, r3
        GPIOx->OTYPER = temp;
 80028ea:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 80028ec:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80028ee:	688b      	ldr	r3, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80028f0:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80028f2:	fa03 f30a 	lsl.w	r3, r3, sl
 80028f6:	4323      	orrs	r3, r4
      GPIOx->PUPDR = temp;
 80028f8:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028fa:	00f3      	lsls	r3, r6, #3
 80028fc:	d5a9      	bpl.n	8002852 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028fe:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44
 8002902:	f025 0703 	bic.w	r7, r5, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002906:	f005 0303 	and.w	r3, r5, #3
 800290a:	f04f 090f 	mov.w	r9, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800290e:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8002912:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002916:	009b      	lsls	r3, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002918:	f8c8 4044 	str.w	r4, [r8, #68]	; 0x44
 800291c:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8002920:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002924:	fa09 f903 	lsl.w	r9, r9, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002928:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 800292c:	9401      	str	r4, [sp, #4]
 800292e:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8002930:	68bc      	ldr	r4, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002932:	ea24 0a09 	bic.w	sl, r4, r9
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002936:	4c4b      	ldr	r4, [pc, #300]	; (8002a64 <HAL_GPIO_Init+0x228>)
 8002938:	42a0      	cmp	r0, r4
 800293a:	d069      	beq.n	8002a10 <HAL_GPIO_Init+0x1d4>
 800293c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002940:	42a0      	cmp	r0, r4
 8002942:	d067      	beq.n	8002a14 <HAL_GPIO_Init+0x1d8>
 8002944:	4c48      	ldr	r4, [pc, #288]	; (8002a68 <HAL_GPIO_Init+0x22c>)
 8002946:	42a0      	cmp	r0, r4
 8002948:	d069      	beq.n	8002a1e <HAL_GPIO_Init+0x1e2>
 800294a:	4c48      	ldr	r4, [pc, #288]	; (8002a6c <HAL_GPIO_Init+0x230>)
 800294c:	42a0      	cmp	r0, r4
 800294e:	d06b      	beq.n	8002a28 <HAL_GPIO_Init+0x1ec>
 8002950:	4c47      	ldr	r4, [pc, #284]	; (8002a70 <HAL_GPIO_Init+0x234>)
 8002952:	42a0      	cmp	r0, r4
 8002954:	d06d      	beq.n	8002a32 <HAL_GPIO_Init+0x1f6>
 8002956:	4c47      	ldr	r4, [pc, #284]	; (8002a74 <HAL_GPIO_Init+0x238>)
 8002958:	42a0      	cmp	r0, r4
 800295a:	d06f      	beq.n	8002a3c <HAL_GPIO_Init+0x200>
 800295c:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8002a80 <HAL_GPIO_Init+0x244>
 8002960:	4548      	cmp	r0, r9
 8002962:	d070      	beq.n	8002a46 <HAL_GPIO_Init+0x20a>
 8002964:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8002a84 <HAL_GPIO_Init+0x248>
 8002968:	4548      	cmp	r0, r9
 800296a:	d071      	beq.n	8002a50 <HAL_GPIO_Init+0x214>
 800296c:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8002a88 <HAL_GPIO_Init+0x24c>
 8002970:	4548      	cmp	r0, r9
 8002972:	d072      	beq.n	8002a5a <HAL_GPIO_Init+0x21e>
 8002974:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8002a8c <HAL_GPIO_Init+0x250>
 8002978:	4548      	cmp	r0, r9
 800297a:	bf0c      	ite	eq
 800297c:	f04f 0909 	moveq.w	r9, #9
 8002980:	f04f 090a 	movne.w	r9, #10
 8002984:	fa09 f303 	lsl.w	r3, r9, r3
 8002988:	ea43 030a 	orr.w	r3, r3, sl
        temp &= ~((uint32_t)iocurrent);
 800298c:	43d4      	mvns	r4, r2
  for(position = 0; position < GPIO_NUMBER; position++)
 800298e:	3501      	adds	r5, #1
        SYSCFG->EXTICR[position >> 2] = temp;
 8002990:	60bb      	str	r3, [r7, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002992:	03f7      	lsls	r7, r6, #15
        temp = EXTI->IMR;
 8002994:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 8002998:	bf54      	ite	pl
 800299a:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 800299c:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800299e:	03b7      	lsls	r7, r6, #14
        EXTI->IMR = temp;
 80029a0:	f8ce 3000 	str.w	r3, [lr]
        temp = EXTI->EMR;
 80029a4:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
 80029a8:	bf54      	ite	pl
 80029aa:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 80029ac:	4313      	orrmi	r3, r2
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029ae:	02f7      	lsls	r7, r6, #11
        EXTI->EMR = temp;
 80029b0:	f8ce 3004 	str.w	r3, [lr, #4]
        temp = EXTI->RTSR;
 80029b4:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
 80029b8:	bf54      	ite	pl
 80029ba:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 80029bc:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029be:	02b6      	lsls	r6, r6, #10
        EXTI->RTSR = temp;
 80029c0:	f8ce 3008 	str.w	r3, [lr, #8]
        temp = EXTI->FTSR;
 80029c4:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
 80029c8:	bf54      	ite	pl
 80029ca:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 80029cc:	4313      	orrmi	r3, r2
  for(position = 0; position < GPIO_NUMBER; position++)
 80029ce:	2d10      	cmp	r5, #16
        }
        EXTI->FTSR = temp;
 80029d0:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80029d4:	f47f af41 	bne.w	800285a <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 80029d8:	b003      	add	sp, #12
 80029da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029de:	ea4f 0a45 	mov.w	sl, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80029e2:	2403      	movs	r4, #3
      temp = GPIOx->MODER;
 80029e4:	f8d0 b000 	ldr.w	fp, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029e8:	f109 39ff 	add.w	r9, r9, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80029ec:	ea06 0704 	and.w	r7, r6, r4
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80029f0:	fa04 f40a 	lsl.w	r4, r4, sl
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029f4:	f1b9 0f01 	cmp.w	r9, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80029f8:	ea6f 0404 	mvn.w	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80029fc:	fa07 f70a 	lsl.w	r7, r7, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002a00:	ea0b 0b04 	and.w	fp, fp, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002a04:	ea47 070b 	orr.w	r7, r7, fp
      GPIOx->MODER = temp;
 8002a08:	6007      	str	r7, [r0, #0]
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a0a:	f63f af6f 	bhi.w	80028ec <HAL_GPIO_Init+0xb0>
 8002a0e:	e75a      	b.n	80028c6 <HAL_GPIO_Init+0x8a>
 8002a10:	2300      	movs	r3, #0
 8002a12:	e7b9      	b.n	8002988 <HAL_GPIO_Init+0x14c>
 8002a14:	f04f 0901 	mov.w	r9, #1
 8002a18:	fa09 f303 	lsl.w	r3, r9, r3
 8002a1c:	e7b4      	b.n	8002988 <HAL_GPIO_Init+0x14c>
 8002a1e:	f04f 0902 	mov.w	r9, #2
 8002a22:	fa09 f303 	lsl.w	r3, r9, r3
 8002a26:	e7af      	b.n	8002988 <HAL_GPIO_Init+0x14c>
 8002a28:	f04f 0903 	mov.w	r9, #3
 8002a2c:	fa09 f303 	lsl.w	r3, r9, r3
 8002a30:	e7aa      	b.n	8002988 <HAL_GPIO_Init+0x14c>
 8002a32:	f04f 0904 	mov.w	r9, #4
 8002a36:	fa09 f303 	lsl.w	r3, r9, r3
 8002a3a:	e7a5      	b.n	8002988 <HAL_GPIO_Init+0x14c>
 8002a3c:	f04f 0905 	mov.w	r9, #5
 8002a40:	fa09 f303 	lsl.w	r3, r9, r3
 8002a44:	e7a0      	b.n	8002988 <HAL_GPIO_Init+0x14c>
 8002a46:	f04f 0906 	mov.w	r9, #6
 8002a4a:	fa09 f303 	lsl.w	r3, r9, r3
 8002a4e:	e79b      	b.n	8002988 <HAL_GPIO_Init+0x14c>
 8002a50:	f04f 0907 	mov.w	r9, #7
 8002a54:	fa09 f303 	lsl.w	r3, r9, r3
 8002a58:	e796      	b.n	8002988 <HAL_GPIO_Init+0x14c>
 8002a5a:	f04f 0908 	mov.w	r9, #8
 8002a5e:	fa09 f303 	lsl.w	r3, r9, r3
 8002a62:	e791      	b.n	8002988 <HAL_GPIO_Init+0x14c>
 8002a64:	40020000 	.word	0x40020000
 8002a68:	40020800 	.word	0x40020800
 8002a6c:	40020c00 	.word	0x40020c00
 8002a70:	40021000 	.word	0x40021000
 8002a74:	40021400 	.word	0x40021400
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	40013c00 	.word	0x40013c00
 8002a80:	40021800 	.word	0x40021800
 8002a84:	40021c00 	.word	0x40021c00
 8002a88:	40022000 	.word	0x40022000
 8002a8c:	40022400 	.word	0x40022400

08002a90 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a94:	2300      	movs	r3, #0
{
 8002a96:	468a      	mov	sl, r1
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002a98:	f8df b178 	ldr.w	fp, [pc, #376]	; 8002c14 <HAL_GPIO_DeInit+0x184>
 8002a9c:	e003      	b.n	8002aa6 <HAL_GPIO_DeInit+0x16>
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	2b10      	cmp	r3, #16
 8002aa2:	f000 8082 	beq.w	8002baa <HAL_GPIO_DeInit+0x11a>
    ioposition = ((uint32_t)0x01) << position;
 8002aa6:	2701      	movs	r7, #1
 8002aa8:	fa07 f103 	lsl.w	r1, r7, r3
    if(iocurrent == ioposition)
 8002aac:	ea31 020a 	bics.w	r2, r1, sl
 8002ab0:	d1f5      	bne.n	8002a9e <HAL_GPIO_DeInit+0xe>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ab2:	f04f 0e03 	mov.w	lr, #3
 8002ab6:	fa03 f207 	lsl.w	r2, r3, r7
 8002aba:	f8d0 9000 	ldr.w	r9, [r0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002abe:	f003 0507 	and.w	r5, r3, #7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ac2:	fa0e f202 	lsl.w	r2, lr, r2
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002ac6:	fa23 f60e 	lsr.w	r6, r3, lr
 8002aca:	f04f 080f 	mov.w	r8, #15
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ace:	43cc      	mvns	r4, r1
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ad0:	43d2      	mvns	r2, r2
 8002ad2:	eb00 0686 	add.w	r6, r0, r6, lsl #2
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002ad6:	00ad      	lsls	r5, r5, #2
 8002ad8:	f023 0c03 	bic.w	ip, r3, #3
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002adc:	ea09 0102 	and.w	r1, r9, r2
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002ae0:	fa08 f505 	lsl.w	r5, r8, r5
 8002ae4:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ae8:	6001      	str	r1, [r0, #0]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002aea:	ea03 010e 	and.w	r1, r3, lr
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002aee:	f8d6 9020 	ldr.w	r9, [r6, #32]
 8002af2:	f50c 3c9c 	add.w	ip, ip, #79872	; 0x13800
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002af6:	0089      	lsls	r1, r1, #2
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002af8:	ea29 0505 	bic.w	r5, r9, r5
 8002afc:	6235      	str	r5, [r6, #32]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002afe:	fa08 f501 	lsl.w	r5, r8, r1
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b02:	6886      	ldr	r6, [r0, #8]
 8002b04:	4016      	ands	r6, r2
 8002b06:	6086      	str	r6, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b08:	6846      	ldr	r6, [r0, #4]
 8002b0a:	4026      	ands	r6, r4
 8002b0c:	6046      	str	r6, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b0e:	68c6      	ldr	r6, [r0, #12]
 8002b10:	4032      	ands	r2, r6
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8002b12:	4e37      	ldr	r6, [pc, #220]	; (8002bf0 <HAL_GPIO_DeInit+0x160>)
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b14:	60c2      	str	r2, [r0, #12]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8002b16:	42b0      	cmp	r0, r6
      tmp = SYSCFG->EXTICR[position >> 2];
 8002b18:	f8dc 2008 	ldr.w	r2, [ip, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b1c:	ea02 0205 	and.w	r2, r2, r5
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8002b20:	d045      	beq.n	8002bae <HAL_GPIO_DeInit+0x11e>
 8002b22:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002b26:	42b0      	cmp	r0, r6
 8002b28:	d043      	beq.n	8002bb2 <HAL_GPIO_DeInit+0x122>
 8002b2a:	4e32      	ldr	r6, [pc, #200]	; (8002bf4 <HAL_GPIO_DeInit+0x164>)
 8002b2c:	42b0      	cmp	r0, r6
 8002b2e:	d043      	beq.n	8002bb8 <HAL_GPIO_DeInit+0x128>
 8002b30:	4e31      	ldr	r6, [pc, #196]	; (8002bf8 <HAL_GPIO_DeInit+0x168>)
 8002b32:	42b0      	cmp	r0, r6
 8002b34:	d044      	beq.n	8002bc0 <HAL_GPIO_DeInit+0x130>
 8002b36:	4e31      	ldr	r6, [pc, #196]	; (8002bfc <HAL_GPIO_DeInit+0x16c>)
 8002b38:	42b0      	cmp	r0, r6
 8002b3a:	d044      	beq.n	8002bc6 <HAL_GPIO_DeInit+0x136>
 8002b3c:	4e30      	ldr	r6, [pc, #192]	; (8002c00 <HAL_GPIO_DeInit+0x170>)
 8002b3e:	42b0      	cmp	r0, r6
 8002b40:	d045      	beq.n	8002bce <HAL_GPIO_DeInit+0x13e>
 8002b42:	4e30      	ldr	r6, [pc, #192]	; (8002c04 <HAL_GPIO_DeInit+0x174>)
 8002b44:	42b0      	cmp	r0, r6
 8002b46:	d046      	beq.n	8002bd6 <HAL_GPIO_DeInit+0x146>
 8002b48:	4e2f      	ldr	r6, [pc, #188]	; (8002c08 <HAL_GPIO_DeInit+0x178>)
 8002b4a:	42b0      	cmp	r0, r6
 8002b4c:	d047      	beq.n	8002bde <HAL_GPIO_DeInit+0x14e>
 8002b4e:	4e2f      	ldr	r6, [pc, #188]	; (8002c0c <HAL_GPIO_DeInit+0x17c>)
 8002b50:	42b0      	cmp	r0, r6
 8002b52:	d048      	beq.n	8002be6 <HAL_GPIO_DeInit+0x156>
 8002b54:	4e2e      	ldr	r6, [pc, #184]	; (8002c10 <HAL_GPIO_DeInit+0x180>)
 8002b56:	42b0      	cmp	r0, r6
 8002b58:	bf0c      	ite	eq
 8002b5a:	2609      	moveq	r6, #9
 8002b5c:	260a      	movne	r6, #10
 8002b5e:	fa06 f101 	lsl.w	r1, r6, r1
 8002b62:	428a      	cmp	r2, r1
 8002b64:	d19b      	bne.n	8002a9e <HAL_GPIO_DeInit+0xe>
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8002b66:	f8dc 2008 	ldr.w	r2, [ip, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b6a:	3301      	adds	r3, #1
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8002b6c:	ea22 0505 	bic.w	r5, r2, r5
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b70:	2b10      	cmp	r3, #16
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8002b72:	f8cc 5008 	str.w	r5, [ip, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002b76:	f8db 2000 	ldr.w	r2, [fp]
 8002b7a:	ea02 0204 	and.w	r2, r2, r4
 8002b7e:	f8cb 2000 	str.w	r2, [fp]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002b82:	f8db 2004 	ldr.w	r2, [fp, #4]
 8002b86:	ea02 0204 	and.w	r2, r2, r4
 8002b8a:	f8cb 2004 	str.w	r2, [fp, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002b8e:	f8db 2008 	ldr.w	r2, [fp, #8]
 8002b92:	ea02 0204 	and.w	r2, r2, r4
 8002b96:	f8cb 2008 	str.w	r2, [fp, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002b9a:	f8db 100c 	ldr.w	r1, [fp, #12]
 8002b9e:	ea01 0104 	and.w	r1, r1, r4
 8002ba2:	f8cb 100c 	str.w	r1, [fp, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ba6:	f47f af7e 	bne.w	8002aa6 <HAL_GPIO_DeInit+0x16>
	  }
    }
  }
}
 8002baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bae:	2100      	movs	r1, #0
 8002bb0:	e7d7      	b.n	8002b62 <HAL_GPIO_DeInit+0xd2>
 8002bb2:	fa07 f101 	lsl.w	r1, r7, r1
 8002bb6:	e7d4      	b.n	8002b62 <HAL_GPIO_DeInit+0xd2>
 8002bb8:	2602      	movs	r6, #2
 8002bba:	fa06 f101 	lsl.w	r1, r6, r1
 8002bbe:	e7d0      	b.n	8002b62 <HAL_GPIO_DeInit+0xd2>
 8002bc0:	fa0e f101 	lsl.w	r1, lr, r1
 8002bc4:	e7cd      	b.n	8002b62 <HAL_GPIO_DeInit+0xd2>
 8002bc6:	2604      	movs	r6, #4
 8002bc8:	fa06 f101 	lsl.w	r1, r6, r1
 8002bcc:	e7c9      	b.n	8002b62 <HAL_GPIO_DeInit+0xd2>
 8002bce:	2605      	movs	r6, #5
 8002bd0:	fa06 f101 	lsl.w	r1, r6, r1
 8002bd4:	e7c5      	b.n	8002b62 <HAL_GPIO_DeInit+0xd2>
 8002bd6:	2606      	movs	r6, #6
 8002bd8:	fa06 f101 	lsl.w	r1, r6, r1
 8002bdc:	e7c1      	b.n	8002b62 <HAL_GPIO_DeInit+0xd2>
 8002bde:	2607      	movs	r6, #7
 8002be0:	fa06 f101 	lsl.w	r1, r6, r1
 8002be4:	e7bd      	b.n	8002b62 <HAL_GPIO_DeInit+0xd2>
 8002be6:	2608      	movs	r6, #8
 8002be8:	fa06 f101 	lsl.w	r1, r6, r1
 8002bec:	e7b9      	b.n	8002b62 <HAL_GPIO_DeInit+0xd2>
 8002bee:	bf00      	nop
 8002bf0:	40020000 	.word	0x40020000
 8002bf4:	40020800 	.word	0x40020800
 8002bf8:	40020c00 	.word	0x40020c00
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	40021400 	.word	0x40021400
 8002c04:	40021800 	.word	0x40021800
 8002c08:	40021c00 	.word	0x40021c00
 8002c0c:	40022000 	.word	0x40022000
 8002c10:	40022400 	.word	0x40022400
 8002c14:	40013c00 	.word	0x40013c00

08002c18 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c18:	b902      	cbnz	r2, 8002c1c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002c1a:	0409      	lsls	r1, r1, #16
 8002c1c:	6181      	str	r1, [r0, #24]
 8002c1e:	4770      	bx	lr

08002c20 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8002c20:	6943      	ldr	r3, [r0, #20]
 8002c22:	4059      	eors	r1, r3
 8002c24:	6141      	str	r1, [r0, #20]
 8002c26:	4770      	bx	lr

08002c28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c2c:	4680      	mov	r8, r0
 8002c2e:	460f      	mov	r7, r1
 8002c30:	4616      	mov	r6, r2
 8002c32:	461d      	mov	r5, r3
 8002c34:	f8d8 4000 	ldr.w	r4, [r8]
 8002c38:	e001      	b.n	8002c3e <I2C_WaitOnFlagUntilTimeout+0x16>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c3a:	1c6b      	adds	r3, r5, #1
 8002c3c:	d10a      	bne.n	8002c54 <I2C_WaitOnFlagUntilTimeout+0x2c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c3e:	69a0      	ldr	r0, [r4, #24]
 8002c40:	ea37 0300 	bics.w	r3, r7, r0
 8002c44:	bf0c      	ite	eq
 8002c46:	2001      	moveq	r0, #1
 8002c48:	2000      	movne	r0, #0
 8002c4a:	42b0      	cmp	r0, r6
 8002c4c:	d0f5      	beq.n	8002c3a <I2C_WaitOnFlagUntilTimeout+0x12>
        __HAL_UNLOCK(hi2c);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002c4e:	2000      	movs	r0, #0
}
 8002c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c54:	b12d      	cbz	r5, 8002c62 <I2C_WaitOnFlagUntilTimeout+0x3a>
 8002c56:	f7ff f833 	bl	8001cc0 <HAL_GetTick>
 8002c5a:	9b06      	ldr	r3, [sp, #24]
 8002c5c:	1ac0      	subs	r0, r0, r3
 8002c5e:	4285      	cmp	r5, r0
 8002c60:	d2e8      	bcs.n	8002c34 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c62:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8002c64:	2220      	movs	r2, #32
        return HAL_TIMEOUT;
 8002c66:	2003      	movs	r0, #3
        hi2c->State = HAL_I2C_STATE_READY;
 8002c68:	f888 2041 	strb.w	r2, [r8, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 8002c6c:	f888 3040 	strb.w	r3, [r8, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c70:	f888 3042 	strb.w	r3, [r8, #66]	; 0x42
        return HAL_TIMEOUT;
 8002c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002c78 <I2C_IsAcknowledgeFailed.part.0>:
  *                the configuration information for the specified I2C.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
 8002c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c7a:	4606      	mov	r6, r0
 8002c7c:	460d      	mov	r5, r1
 8002c7e:	4617      	mov	r7, r2
 8002c80:	6834      	ldr	r4, [r6, #0]
 8002c82:	e001      	b.n	8002c88 <I2C_IsAcknowledgeFailed.part.0+0x10>
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c84:	1c68      	adds	r0, r5, #1
 8002c86:	d122      	bne.n	8002cce <I2C_IsAcknowledgeFailed.part.0+0x56>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c88:	69a3      	ldr	r3, [r4, #24]
 8002c8a:	0699      	lsls	r1, r3, #26
 8002c8c:	d5fa      	bpl.n	8002c84 <I2C_IsAcknowledgeFailed.part.0+0xc>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c8e:	2210      	movs	r2, #16

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c90:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c92:	61e2      	str	r2, [r4, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c94:	61e3      	str	r3, [r4, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c96:	69a3      	ldr	r3, [r4, #24]
 8002c98:	079a      	lsls	r2, r3, #30
 8002c9a:	d501      	bpl.n	8002ca0 <I2C_IsAcknowledgeFailed.part.0+0x28>
    hi2c->Instance->TXDR = 0x00U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ca0:	69a3      	ldr	r3, [r4, #24]
 8002ca2:	07db      	lsls	r3, r3, #31
 8002ca4:	d403      	bmi.n	8002cae <I2C_IsAcknowledgeFailed.part.0+0x36>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ca6:	69a3      	ldr	r3, [r4, #24]
 8002ca8:	f043 0301 	orr.w	r3, r3, #1
 8002cac:	61a3      	str	r3, [r4, #24]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cae:	6863      	ldr	r3, [r4, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb0:	2200      	movs	r2, #0
    I2C_RESET_CR2(hi2c);
 8002cb2:	4f0f      	ldr	r7, [pc, #60]	; (8002cf0 <I2C_IsAcknowledgeFailed.part.0+0x78>)
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002cb4:	2504      	movs	r5, #4
    hi2c->State = HAL_I2C_STATE_READY;
 8002cb6:	2120      	movs	r1, #32

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
 8002cb8:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8002cba:	403b      	ands	r3, r7
 8002cbc:	6063      	str	r3, [r4, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002cbe:	6475      	str	r5, [r6, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8002cc0:	f886 2040 	strb.w	r2, [r6, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8002cc4:	f886 1041 	strb.w	r1, [r6, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc8:	f886 2042 	strb.w	r2, [r6, #66]	; 0x42
  }
  return HAL_OK;
}
 8002ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002cce:	b125      	cbz	r5, 8002cda <I2C_IsAcknowledgeFailed.part.0+0x62>
 8002cd0:	f7fe fff6 	bl	8001cc0 <HAL_GetTick>
 8002cd4:	1bc0      	subs	r0, r0, r7
 8002cd6:	4285      	cmp	r5, r0
 8002cd8:	d2d2      	bcs.n	8002c80 <I2C_IsAcknowledgeFailed.part.0+0x8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cda:	2300      	movs	r3, #0
          hi2c->State = HAL_I2C_STATE_READY;
 8002cdc:	2220      	movs	r2, #32
          return HAL_TIMEOUT;
 8002cde:	2003      	movs	r0, #3
          hi2c->State = HAL_I2C_STATE_READY;
 8002ce0:	f886 2041 	strb.w	r2, [r6, #65]	; 0x41
          __HAL_UNLOCK(hi2c);
 8002ce4:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ce8:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
 8002cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	fe00e800 	.word	0xfe00e800

08002cf4 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002cf4:	b570      	push	{r4, r5, r6, lr}
 8002cf6:	4605      	mov	r5, r0
 8002cf8:	460c      	mov	r4, r1
 8002cfa:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cfc:	e001      	b.n	8002d02 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8002cfe:	1c61      	adds	r1, r4, #1
 8002d00:	d111      	bne.n	8002d26 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d02:	682b      	ldr	r3, [r5, #0]
 8002d04:	699a      	ldr	r2, [r3, #24]
 8002d06:	0792      	lsls	r2, r2, #30
 8002d08:	d40b      	bmi.n	8002d22 <I2C_WaitOnTXISFlagUntilTimeout+0x2e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	06d8      	lsls	r0, r3, #27
 8002d0e:	d5f6      	bpl.n	8002cfe <I2C_WaitOnTXISFlagUntilTimeout+0xa>
 8002d10:	4632      	mov	r2, r6
 8002d12:	4621      	mov	r1, r4
 8002d14:	4628      	mov	r0, r5
 8002d16:	f7ff ffaf 	bl	8002c78 <I2C_IsAcknowledgeFailed.part.0>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d1a:	2800      	cmp	r0, #0
 8002d1c:	d0ef      	beq.n	8002cfe <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      return HAL_ERROR;
 8002d1e:	2001      	movs	r0, #1
}
 8002d20:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8002d22:	2000      	movs	r0, #0
 8002d24:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d26:	b124      	cbz	r4, 8002d32 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002d28:	f7fe ffca 	bl	8001cc0 <HAL_GetTick>
 8002d2c:	1b80      	subs	r0, r0, r6
 8002d2e:	4284      	cmp	r4, r0
 8002d30:	d2e7      	bcs.n	8002d02 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d32:	6c6b      	ldr	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002d34:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d36:	2200      	movs	r2, #0
      __HAL_UNLOCK(hi2c);
 8002d38:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d3a:	430b      	orrs	r3, r1
      __HAL_UNLOCK(hi2c);
 8002d3c:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d40:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002d42:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d46:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
 8002d4a:	bd70      	pop	{r4, r5, r6, pc}

08002d4c <I2C_RequestMemoryWrite>:
{
 8002d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002d50:	6806      	ldr	r6, [r0, #0]
 8002d52:	f3c1 0e09 	ubfx	lr, r1, #0, #10
 8002d56:	4c1d      	ldr	r4, [pc, #116]	; (8002dcc <I2C_RequestMemoryWrite+0x80>)
{
 8002d58:	4617      	mov	r7, r2
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002d5a:	491d      	ldr	r1, [pc, #116]	; (8002dd0 <I2C_RequestMemoryWrite+0x84>)
{
 8002d5c:	4698      	mov	r8, r3
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002d5e:	6872      	ldr	r2, [r6, #4]
 8002d60:	ea4e 0404 	orr.w	r4, lr, r4
 8002d64:	b2db      	uxtb	r3, r3
{
 8002d66:	b082      	sub	sp, #8
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002d68:	400a      	ands	r2, r1
{
 8002d6a:	4605      	mov	r5, r0
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d6c:	9908      	ldr	r1, [sp, #32]
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002d6e:	4314      	orrs	r4, r2
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d70:	9a09      	ldr	r2, [sp, #36]	; 0x24
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002d72:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8002d76:	6074      	str	r4, [r6, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d78:	f7ff ffbc 	bl	8002cf4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d7c:	b958      	cbnz	r0, 8002d96 <I2C_RequestMemoryWrite+0x4a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d7e:	f1b8 0f01 	cmp.w	r8, #1
 8002d82:	d00f      	beq.n	8002da4 <I2C_RequestMemoryWrite+0x58>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d84:	6828      	ldr	r0, [r5, #0]
 8002d86:	0a3b      	lsrs	r3, r7, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d88:	9a09      	ldr	r2, [sp, #36]	; 0x24
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d8a:	6283      	str	r3, [r0, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d8c:	4628      	mov	r0, r5
 8002d8e:	9908      	ldr	r1, [sp, #32]
 8002d90:	f7ff ffb0 	bl	8002cf4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d94:	b130      	cbz	r0, 8002da4 <I2C_RequestMemoryWrite+0x58>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d96:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002d98:	2b04      	cmp	r3, #4
 8002d9a:	d013      	beq.n	8002dc4 <I2C_RequestMemoryWrite+0x78>
      return HAL_TIMEOUT;
 8002d9c:	2003      	movs	r0, #3
}
 8002d9e:	b002      	add	sp, #8
 8002da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002da4:	682b      	ldr	r3, [r5, #0]
 8002da6:	b2ff      	uxtb	r7, r7
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002da8:	4628      	mov	r0, r5
 8002daa:	2200      	movs	r2, #0
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002dac:	629f      	str	r7, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002dae:	2180      	movs	r1, #128	; 0x80
 8002db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	9b08      	ldr	r3, [sp, #32]
 8002db6:	f7ff ff37 	bl	8002c28 <I2C_WaitOnFlagUntilTimeout>
 8002dba:	2800      	cmp	r0, #0
 8002dbc:	d1ee      	bne.n	8002d9c <I2C_RequestMemoryWrite+0x50>
}
 8002dbe:	b002      	add	sp, #8
 8002dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 8002dc4:	2001      	movs	r0, #1
}
 8002dc6:	b002      	add	sp, #8
 8002dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002dcc:	81002000 	.word	0x81002000
 8002dd0:	fc009800 	.word	0xfc009800

08002dd4 <I2C_RequestMemoryRead>:
{
 8002dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002dd8:	6806      	ldr	r6, [r0, #0]
 8002dda:	f3c1 0e09 	ubfx	lr, r1, #0, #10
 8002dde:	4c1d      	ldr	r4, [pc, #116]	; (8002e54 <I2C_RequestMemoryRead+0x80>)
{
 8002de0:	4617      	mov	r7, r2
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002de2:	491d      	ldr	r1, [pc, #116]	; (8002e58 <I2C_RequestMemoryRead+0x84>)
{
 8002de4:	4698      	mov	r8, r3
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002de6:	6872      	ldr	r2, [r6, #4]
 8002de8:	ea4e 0404 	orr.w	r4, lr, r4
 8002dec:	b2db      	uxtb	r3, r3
{
 8002dee:	b082      	sub	sp, #8
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002df0:	400a      	ands	r2, r1
{
 8002df2:	4605      	mov	r5, r0
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002df4:	9908      	ldr	r1, [sp, #32]
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002df6:	4314      	orrs	r4, r2
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002df8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002dfa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8002dfe:	6074      	str	r4, [r6, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e00:	f7ff ff78 	bl	8002cf4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e04:	b958      	cbnz	r0, 8002e1e <I2C_RequestMemoryRead+0x4a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e06:	f1b8 0f01 	cmp.w	r8, #1
 8002e0a:	d00f      	beq.n	8002e2c <I2C_RequestMemoryRead+0x58>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e0c:	6828      	ldr	r0, [r5, #0]
 8002e0e:	0a3b      	lsrs	r3, r7, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e10:	9a09      	ldr	r2, [sp, #36]	; 0x24
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e12:	6283      	str	r3, [r0, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e14:	4628      	mov	r0, r5
 8002e16:	9908      	ldr	r1, [sp, #32]
 8002e18:	f7ff ff6c 	bl	8002cf4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e1c:	b130      	cbz	r0, 8002e2c <I2C_RequestMemoryRead+0x58>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e1e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002e20:	2b04      	cmp	r3, #4
 8002e22:	d013      	beq.n	8002e4c <I2C_RequestMemoryRead+0x78>
      return HAL_TIMEOUT;
 8002e24:	2003      	movs	r0, #3
}
 8002e26:	b002      	add	sp, #8
 8002e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e2c:	682b      	ldr	r3, [r5, #0]
 8002e2e:	b2ff      	uxtb	r7, r7
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002e30:	4628      	mov	r0, r5
 8002e32:	2200      	movs	r2, #0
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e34:	629f      	str	r7, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002e36:	2140      	movs	r1, #64	; 0x40
 8002e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	9b08      	ldr	r3, [sp, #32]
 8002e3e:	f7ff fef3 	bl	8002c28 <I2C_WaitOnFlagUntilTimeout>
 8002e42:	2800      	cmp	r0, #0
 8002e44:	d1ee      	bne.n	8002e24 <I2C_RequestMemoryRead+0x50>
}
 8002e46:	b002      	add	sp, #8
 8002e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 8002e4c:	2001      	movs	r0, #1
}
 8002e4e:	b002      	add	sp, #8
 8002e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e54:	80002000 	.word	0x80002000
 8002e58:	fc009800 	.word	0xfc009800

08002e5c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002e5c:	b570      	push	{r4, r5, r6, lr}
 8002e5e:	4605      	mov	r5, r0
 8002e60:	460c      	mov	r4, r1
 8002e62:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e64:	682b      	ldr	r3, [r5, #0]
 8002e66:	699a      	ldr	r2, [r3, #24]
 8002e68:	0692      	lsls	r2, r2, #26
 8002e6a:	d41e      	bmi.n	8002eaa <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	06d9      	lsls	r1, r3, #27
 8002e70:	d412      	bmi.n	8002e98 <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e72:	b124      	cbz	r4, 8002e7e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
 8002e74:	f7fe ff24 	bl	8001cc0 <HAL_GetTick>
 8002e78:	1b80      	subs	r0, r0, r6
 8002e7a:	4284      	cmp	r4, r0
 8002e7c:	d2f2      	bcs.n	8002e64 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e7e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002e80:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e82:	2200      	movs	r2, #0
      __HAL_UNLOCK(hi2c);
 8002e84:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e86:	430b      	orrs	r3, r1
      __HAL_UNLOCK(hi2c);
 8002e88:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e8c:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002e8e:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e92:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
 8002e96:	bd70      	pop	{r4, r5, r6, pc}
 8002e98:	4632      	mov	r2, r6
 8002e9a:	4621      	mov	r1, r4
 8002e9c:	4628      	mov	r0, r5
 8002e9e:	f7ff feeb 	bl	8002c78 <I2C_IsAcknowledgeFailed.part.0>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ea2:	2800      	cmp	r0, #0
 8002ea4:	d0e5      	beq.n	8002e72 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
      return HAL_ERROR;
 8002ea6:	2001      	movs	r0, #1
}
 8002ea8:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8002eaa:	2000      	movs	r0, #0
 8002eac:	bd70      	pop	{r4, r5, r6, pc}
 8002eae:	bf00      	nop

08002eb0 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002eb0:	2800      	cmp	r0, #0
 8002eb2:	d04f      	beq.n	8002f54 <HAL_I2C_Init+0xa4>
{
 8002eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eb6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002eba:	4604      	mov	r4, r0
 8002ebc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d03e      	beq.n	8002f42 <HAL_I2C_Init+0x92>
  __HAL_I2C_DISABLE(hi2c);
 8002ec4:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ec6:	2124      	movs	r1, #36	; 0x24
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ec8:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002eca:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002ece:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ed0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ed4:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8002ed6:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002eda:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 8002edc:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ede:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ee6:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ee8:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002eea:	d02f      	beq.n	8002f4c <HAL_I2C_Init+0x9c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002eec:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ef0:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ef2:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ef4:	d021      	beq.n	8002f3a <HAL_I2C_Init+0x8a>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ef6:	685e      	ldr	r6, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ef8:	2100      	movs	r1, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002efa:	4d17      	ldr	r5, [pc, #92]	; (8002f58 <HAL_I2C_Init+0xa8>)
  hi2c->State = HAL_I2C_STATE_READY;
 8002efc:	f04f 0e20 	mov.w	lr, #32
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002f00:	6922      	ldr	r2, [r4, #16]
  return HAL_OK;
 8002f02:	4608      	mov	r0, r1
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f04:	4335      	orrs	r5, r6
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002f06:	6966      	ldr	r6, [r4, #20]
 8002f08:	69a7      	ldr	r7, [r4, #24]
 8002f0a:	4332      	orrs	r2, r6
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f0c:	605d      	str	r5, [r3, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f0e:	69e5      	ldr	r5, [r4, #28]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f10:	68de      	ldr	r6, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002f12:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f16:	6a27      	ldr	r7, [r4, #32]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f18:	f426 4600 	bic.w	r6, r6, #32768	; 0x8000
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f1c:	433d      	orrs	r5, r7
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f1e:	60de      	str	r6, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002f20:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f22:	601d      	str	r5, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	f042 0201 	orr.w	r2, r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f2c:	6461      	str	r1, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f2e:	f884 e041 	strb.w	lr, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f32:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f34:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
  return HAL_OK;
 8002f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f3e:	605a      	str	r2, [r3, #4]
 8002f40:	e7d9      	b.n	8002ef6 <HAL_I2C_Init+0x46>
    hi2c->Lock = HAL_UNLOCKED;
 8002f42:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002f46:	f7fe fa13 	bl	8001370 <HAL_I2C_MspInit>
 8002f4a:	e7bb      	b.n	8002ec4 <HAL_I2C_Init+0x14>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f50:	609a      	str	r2, [r3, #8]
 8002f52:	e7d0      	b.n	8002ef6 <HAL_I2C_Init+0x46>
    return HAL_ERROR;
 8002f54:	2001      	movs	r0, #1
 8002f56:	4770      	bx	lr
 8002f58:	02008000 	.word	0x02008000

08002f5c <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8002f5c:	b1b0      	cbz	r0, 8002f8c <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
 8002f5e:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f60:	2324      	movs	r3, #36	; 0x24
{
 8002f62:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f64:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8002f68:	4604      	mov	r4, r0
  __HAL_I2C_DISABLE(hi2c);
 8002f6a:	6813      	ldr	r3, [r2, #0]
 8002f6c:	f023 0301 	bic.w	r3, r3, #1
 8002f70:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8002f72:	f7fe fa5d 	bl	8001430 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f76:	2300      	movs	r3, #0
 8002f78:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8002f7a:	4618      	mov	r0, r3
  hi2c->State = HAL_I2C_STATE_RESET;
 8002f7c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
 8002f80:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f84:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f86:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  return HAL_OK;
 8002f8a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002f8c:	2001      	movs	r0, #1
 8002f8e:	4770      	bx	lr

08002f90 <HAL_I2C_Mem_Write>:
{
 8002f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f94:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 8002f98:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f9a:	2c20      	cmp	r4, #32
{
 8002f9c:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fa0:	d003      	beq.n	8002faa <HAL_I2C_Mem_Write+0x1a>
    return HAL_BUSY;
 8002fa2:	2002      	movs	r0, #2
}
 8002fa4:	b002      	add	sp, #8
 8002fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((pData == NULL) || (Size == 0U))
 8002faa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002fac:	2c00      	cmp	r4, #0
 8002fae:	d03b      	beq.n	8003028 <HAL_I2C_Mem_Write+0x98>
 8002fb0:	2e00      	cmp	r6, #0
 8002fb2:	d039      	beq.n	8003028 <HAL_I2C_Mem_Write+0x98>
    __HAL_LOCK(hi2c);
 8002fb4:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8002fb8:	2c01      	cmp	r4, #1
 8002fba:	d0f2      	beq.n	8002fa2 <HAL_I2C_Mem_Write+0x12>
 8002fbc:	4698      	mov	r8, r3
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	4617      	mov	r7, r2
 8002fc2:	4689      	mov	r9, r1
 8002fc4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8002fc8:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8002fca:	f7fe fe79 	bl	8001cc0 <HAL_GetTick>
 8002fce:	4682      	mov	sl, r0
 8002fd0:	e005      	b.n	8002fde <HAL_I2C_Mem_Write+0x4e>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002fd2:	f7fe fe75 	bl	8001cc0 <HAL_GetTick>
 8002fd6:	eba0 000a 	sub.w	r0, r0, sl
 8002fda:	2819      	cmp	r0, #25
 8002fdc:	d826      	bhi.n	800302c <HAL_I2C_Mem_Write+0x9c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fde:	6823      	ldr	r3, [r4, #0]
 8002fe0:	699d      	ldr	r5, [r3, #24]
 8002fe2:	f415 4500 	ands.w	r5, r5, #32768	; 0x8000
 8002fe6:	d1f4      	bne.n	8002fd2 <HAL_I2C_Mem_Write+0x42>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fe8:	2121      	movs	r1, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fea:	2040      	movs	r0, #64	; 0x40
    hi2c->pBuffPtr  = pData;
 8002fec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fee:	463a      	mov	r2, r7
 8002ff0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    hi2c->pBuffPtr  = pData;
 8002ff2:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ff4:	4643      	mov	r3, r8
    hi2c->XferISR   = NULL;
 8002ff6:	6365      	str	r5, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ff8:	f8cd a004 	str.w	sl, [sp, #4]
 8002ffc:	9700      	str	r7, [sp, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ffe:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003002:	4649      	mov	r1, r9
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003004:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003008:	4620      	mov	r0, r4
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800300a:	6465      	str	r5, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800300c:	8566      	strh	r6, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800300e:	f7ff fe9d 	bl	8002d4c <I2C_RequestMemoryWrite>
 8003012:	b1a8      	cbz	r0, 8003040 <HAL_I2C_Mem_Write+0xb0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003014:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003016:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800301a:	2b04      	cmp	r3, #4
 800301c:	d004      	beq.n	8003028 <HAL_I2C_Mem_Write+0x98>
          return HAL_TIMEOUT;
 800301e:	2003      	movs	r0, #3
 8003020:	e7c0      	b.n	8002fa4 <HAL_I2C_Mem_Write+0x14>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003022:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003024:	2b04      	cmp	r3, #4
 8003026:	d1fa      	bne.n	800301e <HAL_I2C_Mem_Write+0x8e>
        return HAL_ERROR;
 8003028:	2001      	movs	r0, #1
 800302a:	e7bb      	b.n	8002fa4 <HAL_I2C_Mem_Write+0x14>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800302c:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800302e:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8003030:	2003      	movs	r0, #3
        hi2c->State = HAL_I2C_STATE_READY;
 8003032:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 8003036:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800303a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800303e:	e7b1      	b.n	8002fa4 <HAL_I2C_Mem_Write+0x14>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003040:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003042:	b29b      	uxth	r3, r3
 8003044:	2bff      	cmp	r3, #255	; 0xff
 8003046:	d955      	bls.n	80030f4 <HAL_I2C_Mem_Write+0x164>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003048:	6820      	ldr	r0, [r4, #0]
 800304a:	f3c9 0109 	ubfx	r1, r9, #0, #10
 800304e:	4e3d      	ldr	r6, [pc, #244]	; (8003144 <HAL_I2C_Mem_Write+0x1b4>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003050:	25ff      	movs	r5, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003052:	6842      	ldr	r2, [r0, #4]
 8003054:	4b3c      	ldr	r3, [pc, #240]	; (8003148 <HAL_I2C_Mem_Write+0x1b8>)
 8003056:	4032      	ands	r2, r6
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003058:	8525      	strh	r5, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800305a:	430b      	orrs	r3, r1
 800305c:	4313      	orrs	r3, r2
 800305e:	6043      	str	r3, [r0, #4]
 8003060:	b28d      	uxth	r5, r1
 8003062:	4e39      	ldr	r6, [pc, #228]	; (8003148 <HAL_I2C_Mem_Write+0x1b8>)
 8003064:	432e      	orrs	r6, r5
 8003066:	e003      	b.n	8003070 <HAL_I2C_Mem_Write+0xe0>
    while (hi2c->XferCount > 0U);
 8003068:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800306a:	b29b      	uxth	r3, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	d052      	beq.n	8003116 <HAL_I2C_Mem_Write+0x186>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003070:	4652      	mov	r2, sl
 8003072:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003074:	4620      	mov	r0, r4
 8003076:	f7ff fe3d 	bl	8002cf4 <I2C_WaitOnTXISFlagUntilTimeout>
 800307a:	2800      	cmp	r0, #0
 800307c:	d1d1      	bne.n	8003022 <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 800307e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003080:	6823      	ldr	r3, [r4, #0]
 8003082:	1c48      	adds	r0, r1, #1
      hi2c->XferSize--;
 8003084:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8003086:	6260      	str	r0, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003088:	3a01      	subs	r2, #1
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 800308a:	7809      	ldrb	r1, [r1, #0]
      hi2c->XferSize--;
 800308c:	b292      	uxth	r2, r2
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 800308e:	6299      	str	r1, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003090:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003092:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003094:	3b01      	subs	r3, #1
 8003096:	b29b      	uxth	r3, r3
 8003098:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 800309a:	2a00      	cmp	r2, #0
 800309c:	d1e4      	bne.n	8003068 <HAL_I2C_Mem_Write+0xd8>
 800309e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0e0      	beq.n	8003068 <HAL_I2C_Mem_Write+0xd8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030a6:	f8cd a000 	str.w	sl, [sp]
 80030aa:	2180      	movs	r1, #128	; 0x80
 80030ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80030ae:	4620      	mov	r0, r4
 80030b0:	f7ff fdba 	bl	8002c28 <I2C_WaitOnFlagUntilTimeout>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80030b4:	4f23      	ldr	r7, [pc, #140]	; (8003144 <HAL_I2C_Mem_Write+0x1b4>)
 80030b6:	f045 7200 	orr.w	r2, r5, #33554432	; 0x2000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030ba:	f04f 0eff 	mov.w	lr, #255	; 0xff
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030be:	2800      	cmp	r0, #0
 80030c0:	d1ad      	bne.n	800301e <HAL_I2C_Mem_Write+0x8e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	4573      	cmp	r3, lr
 80030c8:	d907      	bls.n	80030da <HAL_I2C_Mem_Write+0x14a>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80030ca:	6822      	ldr	r2, [r4, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030cc:	f8a4 e028 	strh.w	lr, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80030d0:	6853      	ldr	r3, [r2, #4]
 80030d2:	403b      	ands	r3, r7
 80030d4:	4333      	orrs	r3, r6
 80030d6:	6053      	str	r3, [r2, #4]
 80030d8:	e7c6      	b.n	8003068 <HAL_I2C_Mem_Write+0xd8>
 80030da:	6820      	ldr	r0, [r4, #0]
          hi2c->XferSize = hi2c->XferCount;
 80030dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80030de:	6841      	ldr	r1, [r0, #4]
          hi2c->XferSize = hi2c->XferCount;
 80030e0:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80030e2:	4039      	ands	r1, r7
          hi2c->XferSize = hi2c->XferCount;
 80030e4:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80030e6:	b2df      	uxtb	r7, r3
 80030e8:	ea42 0301 	orr.w	r3, r2, r1
 80030ec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80030f0:	6043      	str	r3, [r0, #4]
 80030f2:	e7b9      	b.n	8003068 <HAL_I2C_Mem_Write+0xd8>
 80030f4:	6825      	ldr	r5, [r4, #0]
 80030f6:	f3c9 0109 	ubfx	r1, r9, #0, #10
      hi2c->XferSize = hi2c->XferCount;
 80030fa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80030fc:	4e11      	ldr	r6, [pc, #68]	; (8003144 <HAL_I2C_Mem_Write+0x1b4>)
 80030fe:	f041 7300 	orr.w	r3, r1, #33554432	; 0x2000000
 8003102:	6868      	ldr	r0, [r5, #4]
      hi2c->XferSize = hi2c->XferCount;
 8003104:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003106:	4030      	ands	r0, r6
 8003108:	b2d6      	uxtb	r6, r2
      hi2c->XferSize = hi2c->XferCount;
 800310a:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800310c:	4303      	orrs	r3, r0
 800310e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8003112:	606b      	str	r3, [r5, #4]
 8003114:	e7a4      	b.n	8003060 <HAL_I2C_Mem_Write+0xd0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003116:	4652      	mov	r2, sl
 8003118:	990c      	ldr	r1, [sp, #48]	; 0x30
 800311a:	4620      	mov	r0, r4
 800311c:	f7ff fe9e 	bl	8002e5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003120:	2800      	cmp	r0, #0
 8003122:	f47f af7e 	bne.w	8003022 <HAL_I2C_Mem_Write+0x92>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003126:	6823      	ldr	r3, [r4, #0]
 8003128:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800312a:	4d08      	ldr	r5, [pc, #32]	; (800314c <HAL_I2C_Mem_Write+0x1bc>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800312c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	402a      	ands	r2, r5
 8003132:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003134:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003138:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800313c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8003140:	e730      	b.n	8002fa4 <HAL_I2C_Mem_Write+0x14>
 8003142:	bf00      	nop
 8003144:	fc009c00 	.word	0xfc009c00
 8003148:	01ff0000 	.word	0x01ff0000
 800314c:	fe00e800 	.word	0xfe00e800

08003150 <HAL_I2C_Mem_Read>:
{
 8003150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003154:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 8003158:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 800315a:	2c20      	cmp	r4, #32
{
 800315c:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003160:	d003      	beq.n	800316a <HAL_I2C_Mem_Read+0x1a>
    return HAL_BUSY;
 8003162:	2002      	movs	r0, #2
}
 8003164:	b002      	add	sp, #8
 8003166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((pData == NULL) || (Size == 0U))
 800316a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800316c:	2c00      	cmp	r4, #0
 800316e:	d042      	beq.n	80031f6 <HAL_I2C_Mem_Read+0xa6>
 8003170:	2e00      	cmp	r6, #0
 8003172:	d040      	beq.n	80031f6 <HAL_I2C_Mem_Read+0xa6>
    __HAL_LOCK(hi2c);
 8003174:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8003178:	2c01      	cmp	r4, #1
 800317a:	d0f2      	beq.n	8003162 <HAL_I2C_Mem_Read+0x12>
 800317c:	4698      	mov	r8, r3
 800317e:	2301      	movs	r3, #1
 8003180:	4617      	mov	r7, r2
 8003182:	4689      	mov	r9, r1
 8003184:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8003188:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 800318a:	f7fe fd99 	bl	8001cc0 <HAL_GetTick>
 800318e:	4682      	mov	sl, r0
 8003190:	e005      	b.n	800319e <HAL_I2C_Mem_Read+0x4e>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003192:	f7fe fd95 	bl	8001cc0 <HAL_GetTick>
 8003196:	eba0 000a 	sub.w	r0, r0, sl
 800319a:	2819      	cmp	r0, #25
 800319c:	d82d      	bhi.n	80031fa <HAL_I2C_Mem_Read+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800319e:	6823      	ldr	r3, [r4, #0]
 80031a0:	699d      	ldr	r5, [r3, #24]
 80031a2:	f415 4500 	ands.w	r5, r5, #32768	; 0x8000
 80031a6:	d1f4      	bne.n	8003192 <HAL_I2C_Mem_Read+0x42>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031a8:	2122      	movs	r1, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031aa:	2040      	movs	r0, #64	; 0x40
    hi2c->pBuffPtr  = pData;
 80031ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031ae:	463a      	mov	r2, r7
 80031b0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    hi2c->pBuffPtr  = pData;
 80031b2:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031b4:	4643      	mov	r3, r8
    hi2c->XferISR   = NULL;
 80031b6:	6365      	str	r5, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031b8:	f8cd a004 	str.w	sl, [sp, #4]
 80031bc:	9700      	str	r7, [sp, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031be:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031c2:	4649      	mov	r1, r9
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031c4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031c8:	4620      	mov	r0, r4
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031ca:	6465      	str	r5, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 80031cc:	8566      	strh	r6, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031ce:	f7ff fe01 	bl	8002dd4 <I2C_RequestMemoryRead>
 80031d2:	b1e0      	cbz	r0, 800320e <HAL_I2C_Mem_Read+0xbe>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80031d6:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d00b      	beq.n	80031f6 <HAL_I2C_Mem_Read+0xa6>
        return HAL_TIMEOUT;
 80031de:	2003      	movs	r0, #3
 80031e0:	e7c0      	b.n	8003164 <HAL_I2C_Mem_Read+0x14>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031e2:	4652      	mov	r2, sl
 80031e4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80031e6:	4620      	mov	r0, r4
 80031e8:	f7ff fe38 	bl	8002e5c <I2C_WaitOnSTOPFlagUntilTimeout>
 80031ec:	2800      	cmp	r0, #0
 80031ee:	d07c      	beq.n	80032ea <HAL_I2C_Mem_Read+0x19a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	d1f3      	bne.n	80031de <HAL_I2C_Mem_Read+0x8e>
        return HAL_ERROR;
 80031f6:	2001      	movs	r0, #1
 80031f8:	e7b4      	b.n	8003164 <HAL_I2C_Mem_Read+0x14>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031fa:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80031fc:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 80031fe:	2003      	movs	r0, #3
        hi2c->State = HAL_I2C_STATE_READY;
 8003200:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 8003204:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003208:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800320c:	e7aa      	b.n	8003164 <HAL_I2C_Mem_Read+0x14>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800320e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003210:	b29b      	uxth	r3, r3
 8003212:	2bff      	cmp	r3, #255	; 0xff
 8003214:	d958      	bls.n	80032c8 <HAL_I2C_Mem_Read+0x178>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003216:	6820      	ldr	r0, [r4, #0]
 8003218:	f3c9 0109 	ubfx	r1, r9, #0, #10
 800321c:	4e3a      	ldr	r6, [pc, #232]	; (8003308 <HAL_I2C_Mem_Read+0x1b8>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800321e:	25ff      	movs	r5, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003220:	6842      	ldr	r2, [r0, #4]
 8003222:	4b3a      	ldr	r3, [pc, #232]	; (800330c <HAL_I2C_Mem_Read+0x1bc>)
 8003224:	4032      	ands	r2, r6
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003226:	8525      	strh	r5, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003228:	430b      	orrs	r3, r1
 800322a:	4313      	orrs	r3, r2
 800322c:	6043      	str	r3, [r0, #4]
 800322e:	b28d      	uxth	r5, r1
 8003230:	4e37      	ldr	r6, [pc, #220]	; (8003310 <HAL_I2C_Mem_Read+0x1c0>)
 8003232:	432e      	orrs	r6, r5
 8003234:	e003      	b.n	800323e <HAL_I2C_Mem_Read+0xee>
    while (hi2c->XferCount > 0U);
 8003236:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003238:	b29b      	uxth	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0d1      	beq.n	80031e2 <HAL_I2C_Mem_Read+0x92>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800323e:	f8cd a000 	str.w	sl, [sp]
 8003242:	2200      	movs	r2, #0
 8003244:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003246:	2104      	movs	r1, #4
 8003248:	4620      	mov	r0, r4
 800324a:	f7ff fced 	bl	8002c28 <I2C_WaitOnFlagUntilTimeout>
 800324e:	2800      	cmp	r0, #0
 8003250:	d1c5      	bne.n	80031de <HAL_I2C_Mem_Read+0x8e>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8003252:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003254:	6822      	ldr	r2, [r4, #0]
 8003256:	1c59      	adds	r1, r3, #1
 8003258:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800325a:	6261      	str	r1, [r4, #36]	; 0x24
 800325c:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 800325e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003260:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003262:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8003264:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8003266:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8003268:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800326a:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800326c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 800326e:	2a00      	cmp	r2, #0
 8003270:	d1e1      	bne.n	8003236 <HAL_I2C_Mem_Read+0xe6>
 8003272:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0dd      	beq.n	8003236 <HAL_I2C_Mem_Read+0xe6>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800327a:	f8cd a000 	str.w	sl, [sp]
 800327e:	2180      	movs	r1, #128	; 0x80
 8003280:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003282:	4620      	mov	r0, r4
 8003284:	f7ff fcd0 	bl	8002c28 <I2C_WaitOnFlagUntilTimeout>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003288:	4f22      	ldr	r7, [pc, #136]	; (8003314 <HAL_I2C_Mem_Read+0x1c4>)
 800328a:	f045 7200 	orr.w	r2, r5, #33554432	; 0x2000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800328e:	f04f 0eff 	mov.w	lr, #255	; 0xff
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003292:	2800      	cmp	r0, #0
 8003294:	d1a3      	bne.n	80031de <HAL_I2C_Mem_Read+0x8e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003296:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003298:	b29b      	uxth	r3, r3
 800329a:	4573      	cmp	r3, lr
 800329c:	d907      	bls.n	80032ae <HAL_I2C_Mem_Read+0x15e>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800329e:	6822      	ldr	r2, [r4, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032a0:	f8a4 e028 	strh.w	lr, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80032a4:	6853      	ldr	r3, [r2, #4]
 80032a6:	403b      	ands	r3, r7
 80032a8:	4333      	orrs	r3, r6
 80032aa:	6053      	str	r3, [r2, #4]
 80032ac:	e7c3      	b.n	8003236 <HAL_I2C_Mem_Read+0xe6>
 80032ae:	6820      	ldr	r0, [r4, #0]
          hi2c->XferSize = hi2c->XferCount;
 80032b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80032b2:	6841      	ldr	r1, [r0, #4]
          hi2c->XferSize = hi2c->XferCount;
 80032b4:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80032b6:	4039      	ands	r1, r7
          hi2c->XferSize = hi2c->XferCount;
 80032b8:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80032ba:	b2df      	uxtb	r7, r3
 80032bc:	ea42 0301 	orr.w	r3, r2, r1
 80032c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80032c4:	6043      	str	r3, [r0, #4]
 80032c6:	e7b6      	b.n	8003236 <HAL_I2C_Mem_Read+0xe6>
 80032c8:	6825      	ldr	r5, [r4, #0]
 80032ca:	f3c9 0109 	ubfx	r1, r9, #0, #10
      hi2c->XferSize = hi2c->XferCount;
 80032ce:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80032d0:	4e0d      	ldr	r6, [pc, #52]	; (8003308 <HAL_I2C_Mem_Read+0x1b8>)
 80032d2:	6868      	ldr	r0, [r5, #4]
      hi2c->XferSize = hi2c->XferCount;
 80032d4:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80032d6:	4b10      	ldr	r3, [pc, #64]	; (8003318 <HAL_I2C_Mem_Read+0x1c8>)
 80032d8:	4030      	ands	r0, r6
      hi2c->XferSize = hi2c->XferCount;
 80032da:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80032dc:	430b      	orrs	r3, r1
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	4303      	orrs	r3, r0
 80032e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80032e6:	606b      	str	r3, [r5, #4]
 80032e8:	e7a1      	b.n	800322e <HAL_I2C_Mem_Read+0xde>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032ea:	6823      	ldr	r3, [r4, #0]
 80032ec:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 80032ee:	4d0b      	ldr	r5, [pc, #44]	; (800331c <HAL_I2C_Mem_Read+0x1cc>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032f0:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	402a      	ands	r2, r5
 80032f6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80032f8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80032fc:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003300:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8003304:	e72e      	b.n	8003164 <HAL_I2C_Mem_Read+0x14>
 8003306:	bf00      	nop
 8003308:	fc009800 	.word	0xfc009800
 800330c:	81ff2400 	.word	0x81ff2400
 8003310:	01ff0000 	.word	0x01ff0000
 8003314:	fc009c00 	.word	0xfc009c00
 8003318:	82002400 	.word	0x82002400
 800331c:	fe00e800 	.word	0xfe00e800

08003320 <HAL_I2C_GetState>:
  return hi2c->State;
 8003320:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop

08003328 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003328:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b20      	cmp	r3, #32
 8003330:	d001      	beq.n	8003336 <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003332:	2002      	movs	r0, #2
 8003334:	4770      	bx	lr
 8003336:	4602      	mov	r2, r0
    __HAL_LOCK(hi2c);
 8003338:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 800333c:	2801      	cmp	r0, #1
 800333e:	d0f8      	beq.n	8003332 <HAL_I2CEx_ConfigAnalogFilter+0xa>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003340:	2024      	movs	r0, #36	; 0x24
{
 8003342:	b470      	push	{r4, r5, r6}
    __HAL_I2C_DISABLE(hi2c);
 8003344:	6814      	ldr	r4, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8003346:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003348:	f882 0041 	strb.w	r0, [r2, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800334c:	6825      	ldr	r5, [r4, #0]
    return HAL_OK;
 800334e:	4630      	mov	r0, r6
    __HAL_I2C_DISABLE(hi2c);
 8003350:	f025 0501 	bic.w	r5, r5, #1
 8003354:	6025      	str	r5, [r4, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003356:	6825      	ldr	r5, [r4, #0]
 8003358:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 800335c:	6025      	str	r5, [r4, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800335e:	6825      	ldr	r5, [r4, #0]
 8003360:	4329      	orrs	r1, r5
 8003362:	6021      	str	r1, [r4, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003364:	6821      	ldr	r1, [r4, #0]
 8003366:	f041 0101 	orr.w	r1, r1, #1
 800336a:	6021      	str	r1, [r4, #0]
    __HAL_UNLOCK(hi2c);
 800336c:	f882 6040 	strb.w	r6, [r2, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8003370:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
  }
}
 8003374:	bc70      	pop	{r4, r5, r6}
 8003376:	4770      	bx	lr

08003378 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003378:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b20      	cmp	r3, #32
 8003380:	d001      	beq.n	8003386 <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003382:	2002      	movs	r0, #2
 8003384:	4770      	bx	lr
 8003386:	4602      	mov	r2, r0
    __HAL_LOCK(hi2c);
 8003388:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 800338c:	2801      	cmp	r0, #1
 800338e:	d0f8      	beq.n	8003382 <HAL_I2CEx_ConfigDigitalFilter+0xa>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003390:	2024      	movs	r0, #36	; 0x24
{
 8003392:	b470      	push	{r4, r5, r6}
    __HAL_I2C_DISABLE(hi2c);
 8003394:	6814      	ldr	r4, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8003396:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003398:	f882 0041 	strb.w	r0, [r2, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800339c:	6825      	ldr	r5, [r4, #0]
    return HAL_OK;
 800339e:	4630      	mov	r0, r6
    __HAL_I2C_DISABLE(hi2c);
 80033a0:	f025 0501 	bic.w	r5, r5, #1
 80033a4:	6025      	str	r5, [r4, #0]
    tmpreg = hi2c->Instance->CR1;
 80033a6:	6825      	ldr	r5, [r4, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80033a8:	f425 6570 	bic.w	r5, r5, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 80033ac:	ea45 2101 	orr.w	r1, r5, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 80033b0:	6021      	str	r1, [r4, #0]
    __HAL_I2C_ENABLE(hi2c);
 80033b2:	6821      	ldr	r1, [r4, #0]
 80033b4:	f041 0101 	orr.w	r1, r1, #1
 80033b8:	6021      	str	r1, [r4, #0]
    __HAL_UNLOCK(hi2c);
 80033ba:	f882 6040 	strb.w	r6, [r2, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80033be:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
  }
}
 80033c2:	bc70      	pop	{r4, r5, r6}
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop

080033c8 <LTDC_SetConfig>:
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80033c8:	01d2      	lsls	r2, r2, #7

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
  tmp2 = (pLayerCfg->Alpha0 << 24);  
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80033ca:	f04f 0c00 	mov.w	ip, #0
{
 80033ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80033d2:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 80033d4:	6804      	ldr	r4, [r0, #0]
 80033d6:	6848      	ldr	r0, [r1, #4]
 80033d8:	68e7      	ldr	r7, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80033da:	18a3      	adds	r3, r4, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80033dc:	f8d1 e000 	ldr.w	lr, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80033e0:	685e      	ldr	r6, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 80033e2:	f3c7 470b 	ubfx	r7, r7, #16, #12
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 80033e6:	f8d1 900c 	ldr.w	r9, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80033ea:	f10e 0801 	add.w	r8, lr, #1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 80033ee:	eb07 0a00 	add.w	sl, r7, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80033f2:	f406 4770 	and.w	r7, r6, #61440	; 0xf000
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 80033f6:	688d      	ldr	r5, [r1, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80033f8:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80033fa:	605f      	str	r7, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 80033fc:	3501      	adds	r5, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80033fe:	68e7      	ldr	r7, [r4, #12]
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8003400:	f8d1 b018 	ldr.w	fp, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8003404:	f3c7 470b 	ubfx	r7, r7, #16, #12
 8003408:	4447      	add	r7, r8
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800340a:	f8d1 8014 	ldr.w	r8, [r1, #20]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800340e:	ea47 470a 	orr.w	r7, r7, sl, lsl #16
 8003412:	605f      	str	r7, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8003414:	f8d4 a00c 	ldr.w	sl, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003418:	689f      	ldr	r7, [r3, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 800341a:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800341e:	f407 4770 	and.w	r7, r7, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8003422:	44d1      	add	r9, sl
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003424:	609f      	str	r7, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8003426:	68e7      	ldr	r7, [r4, #12]
 8003428:	f3c7 0a0a 	ubfx	sl, r7, #0, #11

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800342c:	4f2c      	ldr	r7, [pc, #176]	; (80034e0 <LTDC_SetConfig+0x118>)
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 800342e:	4455      	add	r5, sl
 8003430:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8003434:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003436:	691d      	ldr	r5, [r3, #16]
 8003438:	f025 0507 	bic.w	r5, r5, #7
 800343c:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800343e:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003440:	699d      	ldr	r5, [r3, #24]
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 8003442:	f891 a031 	ldrb.w	sl, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 8003446:	f891 9032 	ldrb.w	r9, [r1, #50]	; 0x32
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800344a:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 800344e:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8003452:	ea45 650b 	orr.w	r5, r5, fp, lsl #24
 8003456:	ea45 250a 	orr.w	r5, r5, sl, lsl #8
 800345a:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 800345e:	619d      	str	r5, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003460:	695d      	ldr	r5, [r3, #20]
 8003462:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8003466:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003468:	f8c3 8014 	str.w	r8, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800346c:	69dd      	ldr	r5, [r3, #28]
 800346e:	402f      	ands	r7, r5
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003470:	f101 051c 	add.w	r5, r1, #28
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003474:	61df      	str	r7, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003476:	e895 01a0 	ldmia.w	r5, {r5, r7, r8}
 800347a:	433d      	orrs	r5, r7
 800347c:	61dd      	str	r5, [r3, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800347e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8003480:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003484:	f8c3 8028 	str.w	r8, [r3, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003488:	b326      	cbz	r6, 80034d4 <LTDC_SetConfig+0x10c>
  {
    tmp = 4;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800348a:	2e01      	cmp	r6, #1
 800348c:	d024      	beq.n	80034d8 <LTDC_SetConfig+0x110>
  {
    tmp = 3;
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800348e:	1eb5      	subs	r5, r6, #2
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003490:	2d02      	cmp	r5, #2
 8003492:	d923      	bls.n	80034dc <LTDC_SetConfig+0x114>
 8003494:	2e07      	cmp	r6, #7
 8003496:	d021      	beq.n	80034dc <LTDC_SetConfig+0x114>
  {
    tmp = 2;
  }
  else
  {
    tmp = 1;
 8003498:	2701      	movs	r7, #1
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800349a:	eba0 000e 	sub.w	r0, r0, lr
 800349e:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80034a0:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 80034a2:	fb07 f000 	mul.w	r0, r7, r0

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80034a6:	f8d1 e02c 	ldr.w	lr, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 80034aa:	fb06 f607 	mul.w	r6, r6, r7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80034ae:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 80034b2:	3003      	adds	r0, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80034b4:	490b      	ldr	r1, [pc, #44]	; (80034e4 <LTDC_SetConfig+0x11c>)
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80034b6:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 80034b8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80034bc:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80034be:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80034c0:	4001      	ands	r1, r0
 80034c2:	6319      	str	r1, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80034c4:	f8c3 e030 	str.w	lr, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80034c8:	58a3      	ldr	r3, [r4, r2]
 80034ca:	f043 0301 	orr.w	r3, r3, #1
 80034ce:	50a3      	str	r3, [r4, r2]
 80034d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp = 4;
 80034d4:	2704      	movs	r7, #4
 80034d6:	e7e0      	b.n	800349a <LTDC_SetConfig+0xd2>
    tmp = 3;
 80034d8:	2703      	movs	r7, #3
 80034da:	e7de      	b.n	800349a <LTDC_SetConfig+0xd2>
    tmp = 2;
 80034dc:	2702      	movs	r7, #2
 80034de:	e7dc      	b.n	800349a <LTDC_SetConfig+0xd2>
 80034e0:	fffff8f8 	.word	0xfffff8f8
 80034e4:	fffff800 	.word	0xfffff800

080034e8 <HAL_LTDC_Init>:
  if(hltdc == NULL)
 80034e8:	2800      	cmp	r0, #0
 80034ea:	d075      	beq.n	80035d8 <HAL_LTDC_Init+0xf0>
{
 80034ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hltdc->State == HAL_LTDC_STATE_RESET)
 80034ee:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80034f2:	4604      	mov	r4, r0
 80034f4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d068      	beq.n	80035ce <HAL_LTDC_Init+0xe6>
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80034fc:	6823      	ldr	r3, [r4, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80034fe:	2602      	movs	r6, #2
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003500:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_READY;
 8003502:	2501      	movs	r5, #1
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003504:	6862      	ldr	r2, [r4, #4]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8003506:	2100      	movs	r1, #0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003508:	f884 60a1 	strb.w	r6, [r4, #161]	; 0xa1
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800350c:	68e7      	ldr	r7, [r4, #12]
 800350e:	4302      	orrs	r2, r0
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003510:	6998      	ldr	r0, [r3, #24]
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003512:	6926      	ldr	r6, [r4, #16]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003514:	433a      	orrs	r2, r7
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003516:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  tmp = (hltdc->Init.HorizontalSync << 16);
 800351a:	f8d4 e014 	ldr.w	lr, [r4, #20]
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800351e:	4332      	orrs	r2, r6
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003520:	f8d4 c018 	ldr.w	ip, [r4, #24]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003524:	6198      	str	r0, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003526:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003528:	4f2c      	ldr	r7, [pc, #176]	; (80035dc <HAL_LTDC_Init+0xf4>)
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800352a:	4302      	orrs	r2, r0
  return HAL_OK;
 800352c:	4608      	mov	r0, r1
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800352e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	403a      	ands	r2, r7
 8003534:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003536:	689e      	ldr	r6, [r3, #8]
 8003538:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 800353c:	f8d4 e01c 	ldr.w	lr, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003540:	ea46 060c 	orr.w	r6, r6, ip
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003544:	f8d4 c020 	ldr.w	ip, [r4, #32]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003548:	609e      	str	r6, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800354a:	68de      	ldr	r6, [r3, #12]
 800354c:	403e      	ands	r6, r7
 800354e:	60de      	str	r6, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003550:	68da      	ldr	r2, [r3, #12]
 8003552:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 8003556:	f8d4 e024 	ldr.w	lr, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800355a:	ea42 020c 	orr.w	r2, r2, ip
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800355e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003562:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003564:	691a      	ldr	r2, [r3, #16]
 8003566:	403a      	ands	r2, r7
 8003568:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800356a:	691e      	ldr	r6, [r3, #16]
 800356c:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
  tmp = (hltdc->Init.TotalWidth << 16);
 8003570:	f8d4 e02c 	ldr.w	lr, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003574:	ea46 060c 	orr.w	r6, r6, ip
 8003578:	611e      	str	r6, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800357a:	695e      	ldr	r6, [r3, #20]
 800357c:	4037      	ands	r7, r6
 800357e:	615f      	str	r7, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003580:	695a      	ldr	r2, [r3, #20]
 8003582:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8003584:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8003588:	4332      	orrs	r2, r6
 800358a:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800358c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 800358e:	f894 e035 	ldrb.w	lr, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003592:	f006 467f 	and.w	r6, r6, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 8003596:	f894 7036 	ldrb.w	r7, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800359a:	62de      	str	r6, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800359c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800359e:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80035a2:	4332      	orrs	r2, r6
 80035a4:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
 80035a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80035ac:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 80035ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035b0:	f042 0204 	orr.w	r2, r2, #4
 80035b4:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 80035b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035b8:	f042 0202 	orr.w	r2, r2, #2
 80035bc:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80035be:	699a      	ldr	r2, [r3, #24]
 80035c0:	432a      	orrs	r2, r5
 80035c2:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 80035c4:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80035c8:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  return HAL_OK;
 80035cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hltdc->Lock = HAL_UNLOCKED;
 80035ce:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80035d2:	f7fd ff53 	bl	800147c <HAL_LTDC_MspInit>
 80035d6:	e791      	b.n	80034fc <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
 80035d8:	2001      	movs	r0, #1
 80035da:	4770      	bx	lr
 80035dc:	f000f800 	.word	0xf000f800

080035e0 <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 80035e0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d101      	bne.n	80035ec <HAL_LTDC_ConfigLayer+0xc>
 80035e8:	2002      	movs	r0, #2
 80035ea:	4770      	bx	lr
{   
 80035ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80035f0:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 80035f2:	f04f 0801 	mov.w	r8, #1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80035f6:	2302      	movs	r3, #2
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80035f8:	460d      	mov	r5, r1
 80035fa:	fb04 0402 	mla	r4, r4, r2, r0
 80035fe:	4606      	mov	r6, r0
  __HAL_LOCK(hltdc);
 8003600:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
 8003604:	4696      	mov	lr, r2
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003606:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
 800360a:	460f      	mov	r7, r1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 800360c:	3438      	adds	r4, #56	; 0x38
 800360e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003610:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003612:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003614:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003616:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003618:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800361a:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800361c:	4672      	mov	r2, lr
 800361e:	4630      	mov	r0, r6
 8003620:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8003622:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003624:	f7ff fed0 	bl	80033c8 <LTDC_SetConfig>
  __HAL_UNLOCK(hltdc);
 8003628:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800362a:	6832      	ldr	r2, [r6, #0]
  return HAL_OK;
 800362c:	4618      	mov	r0, r3
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800362e:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003632:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003636:	f886 30a0 	strb.w	r3, [r6, #160]	; 0xa0
  return HAL_OK;
 800363a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800363e:	bf00      	nop

08003640 <HAL_LTDC_GetState>:
  return hltdc->State;
 8003640:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
}
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop

08003648 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003648:	4a02      	ldr	r2, [pc, #8]	; (8003654 <HAL_PWR_EnableBkUpAccess+0xc>)
 800364a:	6813      	ldr	r3, [r2, #0]
 800364c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	4770      	bx	lr
 8003654:	40007000 	.word	0x40007000

08003658 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003658:	4a1b      	ldr	r2, [pc, #108]	; (80036c8 <HAL_PWREx_EnableOverDrive+0x70>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800365a:	4b1c      	ldr	r3, [pc, #112]	; (80036cc <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800365c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800365e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 8003662:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8003664:	6411      	str	r1, [r2, #64]	; 0x40
{
 8003666:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 8003668:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800366a:	461c      	mov	r4, r3
  __HAL_RCC_PWR_CLK_ENABLE();
 800366c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003670:	9201      	str	r2, [sp, #4]
 8003672:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800367a:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800367c:	f7fe fb20 	bl	8001cc0 <HAL_GetTick>
 8003680:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003682:	e005      	b.n	8003690 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003684:	f7fe fb1c 	bl	8001cc0 <HAL_GetTick>
 8003688:	1b40      	subs	r0, r0, r5
 800368a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800368e:	d817      	bhi.n	80036c0 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003690:	6863      	ldr	r3, [r4, #4]
 8003692:	03da      	lsls	r2, r3, #15
 8003694:	d5f6      	bpl.n	8003684 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003696:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003698:	4d0c      	ldr	r5, [pc, #48]	; (80036cc <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800369a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800369e:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80036a0:	f7fe fb0e 	bl	8001cc0 <HAL_GetTick>
 80036a4:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036a6:	e005      	b.n	80036b4 <HAL_PWREx_EnableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036a8:	f7fe fb0a 	bl	8001cc0 <HAL_GetTick>
 80036ac:	1b00      	subs	r0, r0, r4
 80036ae:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80036b2:	d805      	bhi.n	80036c0 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036b4:	686b      	ldr	r3, [r5, #4]
 80036b6:	039b      	lsls	r3, r3, #14
 80036b8:	d5f6      	bpl.n	80036a8 <HAL_PWREx_EnableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80036ba:	2000      	movs	r0, #0
}
 80036bc:	b003      	add	sp, #12
 80036be:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 80036c0:	2003      	movs	r0, #3
}
 80036c2:	b003      	add	sp, #12
 80036c4:	bd30      	pop	{r4, r5, pc}
 80036c6:	bf00      	nop
 80036c8:	40023800 	.word	0x40023800
 80036cc:	40007000 	.word	0x40007000

080036d0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 80036d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036d4:	9d08      	ldr	r5, [sp, #32]
 80036d6:	4680      	mov	r8, r0
 80036d8:	460f      	mov	r7, r1
 80036da:	4616      	mov	r6, r2
 80036dc:	4699      	mov	r9, r3
 80036de:	f8d8 4000 	ldr.w	r4, [r8]
 80036e2:	e001      	b.n	80036e8 <QSPI_WaitFlagStateUntilTimeout+0x18>
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036e4:	1c6b      	adds	r3, r5, #1
 80036e6:	d109      	bne.n	80036fc <QSPI_WaitFlagStateUntilTimeout+0x2c>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80036e8:	68a0      	ldr	r0, [r4, #8]
 80036ea:	4238      	tst	r0, r7
 80036ec:	bf14      	ite	ne
 80036ee:	2001      	movne	r0, #1
 80036f0:	2000      	moveq	r0, #0
 80036f2:	42b0      	cmp	r0, r6
 80036f4:	d1f6      	bne.n	80036e4 <QSPI_WaitFlagStateUntilTimeout+0x14>
        
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80036f6:	2000      	movs	r0, #0
}
 80036f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 80036fc:	b12d      	cbz	r5, 800370a <QSPI_WaitFlagStateUntilTimeout+0x3a>
 80036fe:	f7fe fadf 	bl	8001cc0 <HAL_GetTick>
 8003702:	eba0 0009 	sub.w	r0, r0, r9
 8003706:	4285      	cmp	r5, r0
 8003708:	d2e9      	bcs.n	80036de <QSPI_WaitFlagStateUntilTimeout+0xe>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800370a:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800370c:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800370e:	f888 3041 	strb.w	r3, [r8, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003712:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8003716:	4303      	orrs	r3, r0
 8003718:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
 800371c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003720 <HAL_QSPI_Init>:
{
 8003720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003722:	4604      	mov	r4, r0
 8003724:	b083      	sub	sp, #12
  uint32_t tickstart = HAL_GetTick();
 8003726:	f7fe facb 	bl	8001cc0 <HAL_GetTick>
  if(hqspi == NULL)
 800372a:	2c00      	cmp	r4, #0
 800372c:	d053      	beq.n	80037d6 <HAL_QSPI_Init+0xb6>
  __HAL_LOCK(hqspi);
 800372e:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8003732:	2a01      	cmp	r2, #1
 8003734:	d042      	beq.n	80037bc <HAL_QSPI_Init+0x9c>
 8003736:	2301      	movs	r3, #1
 8003738:	4605      	mov	r5, r0
 800373a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800373e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8003742:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8003746:	2a00      	cmp	r2, #0
 8003748:	d03b      	beq.n	80037c2 <HAL_QSPI_Init+0xa2>
 800374a:	f8d4 e048 	ldr.w	lr, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 800374e:	6827      	ldr	r7, [r4, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003750:	462b      	mov	r3, r5
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8003752:	68a0      	ldr	r0, [r4, #8]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003754:	2200      	movs	r2, #0
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8003756:	683d      	ldr	r5, [r7, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003758:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 800375a:	1e46      	subs	r6, r0, #1
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800375c:	4620      	mov	r0, r4
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 800375e:	f425 55f8 	bic.w	r5, r5, #7936	; 0x1f00
 8003762:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 8003766:	603d      	str	r5, [r7, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003768:	f8cd e000 	str.w	lr, [sp]
 800376c:	f7ff ffb0 	bl	80036d0 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8003770:	b9f8      	cbnz	r0, 80037b2 <HAL_QSPI_Init+0x92>
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8003772:	69e2      	ldr	r2, [r4, #28]
    hqspi->State = HAL_QSPI_STATE_READY;
 8003774:	2501      	movs	r5, #1
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8003776:	68e3      	ldr	r3, [r4, #12]
 8003778:	6a26      	ldr	r6, [r4, #32]
 800377a:	4313      	orrs	r3, r2
 800377c:	4f17      	ldr	r7, [pc, #92]	; (80037dc <HAL_QSPI_Init+0xbc>)
 800377e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8003782:	4333      	orrs	r3, r6
 8003784:	680e      	ldr	r6, [r1, #0]
 8003786:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 800378a:	6962      	ldr	r2, [r4, #20]
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 800378c:	4037      	ands	r7, r6
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 800378e:	69a6      	ldr	r6, [r4, #24]
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8003790:	433b      	orrs	r3, r7
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8003792:	4332      	orrs	r2, r6
 8003794:	4f12      	ldr	r7, [pc, #72]	; (80037e0 <HAL_QSPI_Init+0xc0>)
 8003796:	6926      	ldr	r6, [r4, #16]
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8003798:	600b      	str	r3, [r1, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 800379a:	684b      	ldr	r3, [r1, #4]
 800379c:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80037a0:	401f      	ands	r7, r3
 80037a2:	433a      	orrs	r2, r7
 80037a4:	604a      	str	r2, [r1, #4]
    __HAL_QSPI_ENABLE(hqspi);
 80037a6:	680b      	ldr	r3, [r1, #0]
 80037a8:	432b      	orrs	r3, r5
 80037aa:	600b      	str	r3, [r1, #0]
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 80037ac:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 80037ae:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80037b2:	2300      	movs	r3, #0
 80037b4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80037b8:	b003      	add	sp, #12
 80037ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hqspi);
 80037bc:	2002      	movs	r0, #2
}
 80037be:	b003      	add	sp, #12
 80037c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hqspi->Lock = HAL_UNLOCKED;
 80037c2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 80037c6:	4620      	mov	r0, r4
 80037c8:	f7fd fee2 	bl	8001590 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 80037cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80037d0:	469e      	mov	lr, r3
 80037d2:	64a3      	str	r3, [r4, #72]	; 0x48
 80037d4:	e7bb      	b.n	800374e <HAL_QSPI_Init+0x2e>
    return HAL_ERROR;
 80037d6:	2001      	movs	r0, #1
}
 80037d8:	b003      	add	sp, #12
 80037da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037dc:	00ffff2f 	.word	0x00ffff2f
 80037e0:	ffe0f8fe 	.word	0xffe0f8fe

080037e4 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037e4:	2800      	cmp	r0, #0
 80037e6:	f000 81cf 	beq.w	8003b88 <HAL_RCC_OscConfig+0x3a4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ea:	6803      	ldr	r3, [r0, #0]
{
 80037ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037f0:	07dd      	lsls	r5, r3, #31
{
 80037f2:	b082      	sub	sp, #8
 80037f4:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037f6:	d530      	bpl.n	800385a <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037f8:	49aa      	ldr	r1, [pc, #680]	; (8003aa4 <HAL_RCC_OscConfig+0x2c0>)
 80037fa:	688a      	ldr	r2, [r1, #8]
 80037fc:	f002 020c 	and.w	r2, r2, #12
 8003800:	2a04      	cmp	r2, #4
 8003802:	f000 8119 	beq.w	8003a38 <HAL_RCC_OscConfig+0x254>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003806:	688a      	ldr	r2, [r1, #8]
 8003808:	f002 020c 	and.w	r2, r2, #12
 800380c:	2a08      	cmp	r2, #8
 800380e:	f000 810f 	beq.w	8003a30 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003812:	6863      	ldr	r3, [r4, #4]
 8003814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003818:	f000 8152 	beq.w	8003ac0 <HAL_RCC_OscConfig+0x2dc>
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 80db 	beq.w	80039d8 <HAL_RCC_OscConfig+0x1f4>
 8003822:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003826:	4b9f      	ldr	r3, [pc, #636]	; (8003aa4 <HAL_RCC_OscConfig+0x2c0>)
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	f000 81a5 	beq.w	8003b78 <HAL_RCC_OscConfig+0x394>
 800382e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800383a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383c:	f7fe fa40 	bl	8001cc0 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003840:	4d98      	ldr	r5, [pc, #608]	; (8003aa4 <HAL_RCC_OscConfig+0x2c0>)
        tickstart = HAL_GetTick();
 8003842:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003844:	e005      	b.n	8003852 <HAL_RCC_OscConfig+0x6e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003846:	f7fe fa3b 	bl	8001cc0 <HAL_GetTick>
 800384a:	1b80      	subs	r0, r0, r6
 800384c:	2864      	cmp	r0, #100	; 0x64
 800384e:	f200 80eb 	bhi.w	8003a28 <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003852:	682b      	ldr	r3, [r5, #0]
 8003854:	039a      	lsls	r2, r3, #14
 8003856:	d5f6      	bpl.n	8003846 <HAL_RCC_OscConfig+0x62>
 8003858:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800385a:	079f      	lsls	r7, r3, #30
 800385c:	d529      	bpl.n	80038b2 <HAL_RCC_OscConfig+0xce>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800385e:	4a91      	ldr	r2, [pc, #580]	; (8003aa4 <HAL_RCC_OscConfig+0x2c0>)
 8003860:	6891      	ldr	r1, [r2, #8]
 8003862:	f011 0f0c 	tst.w	r1, #12
 8003866:	f000 8082 	beq.w	800396e <HAL_RCC_OscConfig+0x18a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800386a:	6891      	ldr	r1, [r2, #8]
 800386c:	f001 010c 	and.w	r1, r1, #12
 8003870:	2908      	cmp	r1, #8
 8003872:	d079      	beq.n	8003968 <HAL_RCC_OscConfig+0x184>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003874:	68e3      	ldr	r3, [r4, #12]
 8003876:	2b00      	cmp	r3, #0
 8003878:	f000 8109 	beq.w	8003a8e <HAL_RCC_OscConfig+0x2aa>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800387c:	4b89      	ldr	r3, [pc, #548]	; (8003aa4 <HAL_RCC_OscConfig+0x2c0>)
 800387e:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003880:	461d      	mov	r5, r3
        __HAL_RCC_HSI_ENABLE();
 8003882:	f042 0201 	orr.w	r2, r2, #1
 8003886:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003888:	f7fe fa1a 	bl	8001cc0 <HAL_GetTick>
 800388c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800388e:	e005      	b.n	800389c <HAL_RCC_OscConfig+0xb8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003890:	f7fe fa16 	bl	8001cc0 <HAL_GetTick>
 8003894:	1b80      	subs	r0, r0, r6
 8003896:	2802      	cmp	r0, #2
 8003898:	f200 80c6 	bhi.w	8003a28 <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800389c:	682b      	ldr	r3, [r5, #0]
 800389e:	0798      	lsls	r0, r3, #30
 80038a0:	d5f6      	bpl.n	8003890 <HAL_RCC_OscConfig+0xac>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a2:	682b      	ldr	r3, [r5, #0]
 80038a4:	6922      	ldr	r2, [r4, #16]
 80038a6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80038aa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80038ae:	602b      	str	r3, [r5, #0]
 80038b0:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038b2:	071a      	lsls	r2, r3, #28
 80038b4:	d41f      	bmi.n	80038f6 <HAL_RCC_OscConfig+0x112>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038b6:	075d      	lsls	r5, r3, #29
 80038b8:	d536      	bpl.n	8003928 <HAL_RCC_OscConfig+0x144>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ba:	4b7a      	ldr	r3, [pc, #488]	; (8003aa4 <HAL_RCC_OscConfig+0x2c0>)
 80038bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038be:	00d0      	lsls	r0, r2, #3
 80038c0:	d573      	bpl.n	80039aa <HAL_RCC_OscConfig+0x1c6>
  FlagStatus pwrclkchanged = RESET;
 80038c2:	2500      	movs	r5, #0
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038c4:	4b78      	ldr	r3, [pc, #480]	; (8003aa8 <HAL_RCC_OscConfig+0x2c4>)
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	05d1      	lsls	r1, r2, #23
 80038ca:	f140 809c 	bpl.w	8003a06 <HAL_RCC_OscConfig+0x222>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038ce:	68a3      	ldr	r3, [r4, #8]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	f000 80fb 	beq.w	8003acc <HAL_RCC_OscConfig+0x2e8>
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f000 80b8 	beq.w	8003a4c <HAL_RCC_OscConfig+0x268>
 80038dc:	2b05      	cmp	r3, #5
 80038de:	4b71      	ldr	r3, [pc, #452]	; (8003aa4 <HAL_RCC_OscConfig+0x2c0>)
 80038e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038e2:	f000 810c 	beq.w	8003afe <HAL_RCC_OscConfig+0x31a>
 80038e6:	f022 0201 	bic.w	r2, r2, #1
 80038ea:	671a      	str	r2, [r3, #112]	; 0x70
 80038ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038ee:	f022 0204 	bic.w	r2, r2, #4
 80038f2:	671a      	str	r2, [r3, #112]	; 0x70
 80038f4:	e0ef      	b.n	8003ad6 <HAL_RCC_OscConfig+0x2f2>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038f6:	6963      	ldr	r3, [r4, #20]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d043      	beq.n	8003984 <HAL_RCC_OscConfig+0x1a0>
      __HAL_RCC_LSI_ENABLE();
 80038fc:	4b69      	ldr	r3, [pc, #420]	; (8003aa4 <HAL_RCC_OscConfig+0x2c0>)
 80038fe:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003900:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 8003902:	f042 0201 	orr.w	r2, r2, #1
 8003906:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8003908:	f7fe f9da 	bl	8001cc0 <HAL_GetTick>
 800390c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800390e:	e005      	b.n	800391c <HAL_RCC_OscConfig+0x138>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003910:	f7fe f9d6 	bl	8001cc0 <HAL_GetTick>
 8003914:	1b80      	subs	r0, r0, r6
 8003916:	2802      	cmp	r0, #2
 8003918:	f200 8086 	bhi.w	8003a28 <HAL_RCC_OscConfig+0x244>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800391c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800391e:	079b      	lsls	r3, r3, #30
 8003920:	d5f6      	bpl.n	8003910 <HAL_RCC_OscConfig+0x12c>
 8003922:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003924:	075d      	lsls	r5, r3, #29
 8003926:	d4c8      	bmi.n	80038ba <HAL_RCC_OscConfig+0xd6>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003928:	69a2      	ldr	r2, [r4, #24]
 800392a:	b1ca      	cbz	r2, 8003960 <HAL_RCC_OscConfig+0x17c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800392c:	4b5d      	ldr	r3, [pc, #372]	; (8003aa4 <HAL_RCC_OscConfig+0x2c0>)
 800392e:	6899      	ldr	r1, [r3, #8]
 8003930:	f001 010c 	and.w	r1, r1, #12
 8003934:	2908      	cmp	r1, #8
 8003936:	d021      	beq.n	800397c <HAL_RCC_OscConfig+0x198>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003938:	2a02      	cmp	r2, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393a:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800393c:	f000 80e7 	beq.w	8003b0e <HAL_RCC_OscConfig+0x32a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003940:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003944:	461c      	mov	r4, r3
        __HAL_RCC_PLL_DISABLE();
 8003946:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003948:	f7fe f9ba 	bl	8001cc0 <HAL_GetTick>
 800394c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800394e:	e004      	b.n	800395a <HAL_RCC_OscConfig+0x176>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003950:	f7fe f9b6 	bl	8001cc0 <HAL_GetTick>
 8003954:	1b40      	subs	r0, r0, r5
 8003956:	2802      	cmp	r0, #2
 8003958:	d866      	bhi.n	8003a28 <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395a:	6823      	ldr	r3, [r4, #0]
 800395c:	019b      	lsls	r3, r3, #6
 800395e:	d4f7      	bmi.n	8003950 <HAL_RCC_OscConfig+0x16c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8003960:	2000      	movs	r0, #0
}
 8003962:	b002      	add	sp, #8
 8003964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003968:	6852      	ldr	r2, [r2, #4]
 800396a:	0256      	lsls	r6, r2, #9
 800396c:	d482      	bmi.n	8003874 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800396e:	4a4d      	ldr	r2, [pc, #308]	; (8003aa4 <HAL_RCC_OscConfig+0x2c0>)
 8003970:	6812      	ldr	r2, [r2, #0]
 8003972:	0795      	lsls	r5, r2, #30
 8003974:	d524      	bpl.n	80039c0 <HAL_RCC_OscConfig+0x1dc>
 8003976:	68e2      	ldr	r2, [r4, #12]
 8003978:	2a01      	cmp	r2, #1
 800397a:	d021      	beq.n	80039c0 <HAL_RCC_OscConfig+0x1dc>
    return HAL_ERROR;
 800397c:	2001      	movs	r0, #1
}
 800397e:	b002      	add	sp, #8
 8003980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8003984:	4b47      	ldr	r3, [pc, #284]	; (8003aa4 <HAL_RCC_OscConfig+0x2c0>)
 8003986:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003988:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 800398a:	f022 0201 	bic.w	r2, r2, #1
 800398e:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8003990:	f7fe f996 	bl	8001cc0 <HAL_GetTick>
 8003994:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003996:	e004      	b.n	80039a2 <HAL_RCC_OscConfig+0x1be>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003998:	f7fe f992 	bl	8001cc0 <HAL_GetTick>
 800399c:	1b80      	subs	r0, r0, r6
 800399e:	2802      	cmp	r0, #2
 80039a0:	d842      	bhi.n	8003a28 <HAL_RCC_OscConfig+0x244>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039a2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80039a4:	079f      	lsls	r7, r3, #30
 80039a6:	d4f7      	bmi.n	8003998 <HAL_RCC_OscConfig+0x1b4>
 80039a8:	e7bb      	b.n	8003922 <HAL_RCC_OscConfig+0x13e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80039aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80039ac:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80039b2:	641a      	str	r2, [r3, #64]	; 0x40
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ba:	9301      	str	r3, [sp, #4]
 80039bc:	9b01      	ldr	r3, [sp, #4]
 80039be:	e781      	b.n	80038c4 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c0:	4938      	ldr	r1, [pc, #224]	; (8003aa4 <HAL_RCC_OscConfig+0x2c0>)
 80039c2:	6920      	ldr	r0, [r4, #16]
 80039c4:	680a      	ldr	r2, [r1, #0]
 80039c6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80039ca:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80039ce:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039d0:	071a      	lsls	r2, r3, #28
 80039d2:	f57f af70 	bpl.w	80038b6 <HAL_RCC_OscConfig+0xd2>
 80039d6:	e78e      	b.n	80038f6 <HAL_RCC_OscConfig+0x112>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039d8:	4b32      	ldr	r3, [pc, #200]	; (8003aa4 <HAL_RCC_OscConfig+0x2c0>)
 80039da:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039dc:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039ea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80039ec:	f7fe f968 	bl	8001cc0 <HAL_GetTick>
 80039f0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039f2:	e004      	b.n	80039fe <HAL_RCC_OscConfig+0x21a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039f4:	f7fe f964 	bl	8001cc0 <HAL_GetTick>
 80039f8:	1b80      	subs	r0, r0, r6
 80039fa:	2864      	cmp	r0, #100	; 0x64
 80039fc:	d814      	bhi.n	8003a28 <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039fe:	682b      	ldr	r3, [r5, #0]
 8003a00:	039b      	lsls	r3, r3, #14
 8003a02:	d4f7      	bmi.n	80039f4 <HAL_RCC_OscConfig+0x210>
 8003a04:	e728      	b.n	8003858 <HAL_RCC_OscConfig+0x74>
      PWR->CR1 |= PWR_CR1_DBP;
 8003a06:	681a      	ldr	r2, [r3, #0]
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a08:	461e      	mov	r6, r3
      PWR->CR1 |= PWR_CR1_DBP;
 8003a0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a0e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003a10:	f7fe f956 	bl	8001cc0 <HAL_GetTick>
 8003a14:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a16:	6833      	ldr	r3, [r6, #0]
 8003a18:	05da      	lsls	r2, r3, #23
 8003a1a:	f53f af58 	bmi.w	80038ce <HAL_RCC_OscConfig+0xea>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003a1e:	f7fe f94f 	bl	8001cc0 <HAL_GetTick>
 8003a22:	1bc0      	subs	r0, r0, r7
 8003a24:	2864      	cmp	r0, #100	; 0x64
 8003a26:	d9f6      	bls.n	8003a16 <HAL_RCC_OscConfig+0x232>
            return HAL_TIMEOUT;
 8003a28:	2003      	movs	r0, #3
}
 8003a2a:	b002      	add	sp, #8
 8003a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a30:	684a      	ldr	r2, [r1, #4]
 8003a32:	0250      	lsls	r0, r2, #9
 8003a34:	f57f aeed 	bpl.w	8003812 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a38:	4a1a      	ldr	r2, [pc, #104]	; (8003aa4 <HAL_RCC_OscConfig+0x2c0>)
 8003a3a:	6812      	ldr	r2, [r2, #0]
 8003a3c:	0391      	lsls	r1, r2, #14
 8003a3e:	f57f af0c 	bpl.w	800385a <HAL_RCC_OscConfig+0x76>
 8003a42:	6862      	ldr	r2, [r4, #4]
 8003a44:	2a00      	cmp	r2, #0
 8003a46:	f47f af08 	bne.w	800385a <HAL_RCC_OscConfig+0x76>
 8003a4a:	e797      	b.n	800397c <HAL_RCC_OscConfig+0x198>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a4c:	4b15      	ldr	r3, [pc, #84]	; (8003aa4 <HAL_RCC_OscConfig+0x2c0>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a4e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a54:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a56:	f022 0201 	bic.w	r2, r2, #1
 8003a5a:	671a      	str	r2, [r3, #112]	; 0x70
 8003a5c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a5e:	f022 0204 	bic.w	r2, r2, #4
 8003a62:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003a64:	f7fe f92c 	bl	8001cc0 <HAL_GetTick>
 8003a68:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a6a:	e004      	b.n	8003a76 <HAL_RCC_OscConfig+0x292>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a6c:	f7fe f928 	bl	8001cc0 <HAL_GetTick>
 8003a70:	1bc0      	subs	r0, r0, r7
 8003a72:	4540      	cmp	r0, r8
 8003a74:	d8d8      	bhi.n	8003a28 <HAL_RCC_OscConfig+0x244>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a76:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003a78:	0798      	lsls	r0, r3, #30
 8003a7a:	d4f7      	bmi.n	8003a6c <HAL_RCC_OscConfig+0x288>
    if(pwrclkchanged == SET)
 8003a7c:	2d00      	cmp	r5, #0
 8003a7e:	f43f af53 	beq.w	8003928 <HAL_RCC_OscConfig+0x144>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a82:	4a08      	ldr	r2, [pc, #32]	; (8003aa4 <HAL_RCC_OscConfig+0x2c0>)
 8003a84:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003a86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a8a:	6413      	str	r3, [r2, #64]	; 0x40
 8003a8c:	e74c      	b.n	8003928 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_HSI_DISABLE();
 8003a8e:	4b05      	ldr	r3, [pc, #20]	; (8003aa4 <HAL_RCC_OscConfig+0x2c0>)
 8003a90:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a92:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 8003a94:	f022 0201 	bic.w	r2, r2, #1
 8003a98:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003a9a:	f7fe f911 	bl	8001cc0 <HAL_GetTick>
 8003a9e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aa0:	e009      	b.n	8003ab6 <HAL_RCC_OscConfig+0x2d2>
 8003aa2:	bf00      	nop
 8003aa4:	40023800 	.word	0x40023800
 8003aa8:	40007000 	.word	0x40007000
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aac:	f7fe f908 	bl	8001cc0 <HAL_GetTick>
 8003ab0:	1b80      	subs	r0, r0, r6
 8003ab2:	2802      	cmp	r0, #2
 8003ab4:	d8b8      	bhi.n	8003a28 <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ab6:	682b      	ldr	r3, [r5, #0]
 8003ab8:	0799      	lsls	r1, r3, #30
 8003aba:	d4f7      	bmi.n	8003aac <HAL_RCC_OscConfig+0x2c8>
 8003abc:	6823      	ldr	r3, [r4, #0]
 8003abe:	e6f8      	b.n	80038b2 <HAL_RCC_OscConfig+0xce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ac0:	4a32      	ldr	r2, [pc, #200]	; (8003b8c <HAL_RCC_OscConfig+0x3a8>)
 8003ac2:	6813      	ldr	r3, [r2, #0]
 8003ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac8:	6013      	str	r3, [r2, #0]
 8003aca:	e6b7      	b.n	800383c <HAL_RCC_OscConfig+0x58>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003acc:	4a2f      	ldr	r2, [pc, #188]	; (8003b8c <HAL_RCC_OscConfig+0x3a8>)
 8003ace:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003ad0:	f043 0301 	orr.w	r3, r3, #1
 8003ad4:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003ad6:	f7fe f8f3 	bl	8001cc0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ada:	4e2c      	ldr	r6, [pc, #176]	; (8003b8c <HAL_RCC_OscConfig+0x3a8>)
      tickstart = HAL_GetTick();
 8003adc:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ade:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae2:	e005      	b.n	8003af0 <HAL_RCC_OscConfig+0x30c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ae4:	f7fe f8ec 	bl	8001cc0 <HAL_GetTick>
 8003ae8:	eba0 0008 	sub.w	r0, r0, r8
 8003aec:	42b8      	cmp	r0, r7
 8003aee:	d89b      	bhi.n	8003a28 <HAL_RCC_OscConfig+0x244>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af0:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003af2:	079b      	lsls	r3, r3, #30
 8003af4:	d5f6      	bpl.n	8003ae4 <HAL_RCC_OscConfig+0x300>
    if(pwrclkchanged == SET)
 8003af6:	2d00      	cmp	r5, #0
 8003af8:	f43f af16 	beq.w	8003928 <HAL_RCC_OscConfig+0x144>
 8003afc:	e7c1      	b.n	8003a82 <HAL_RCC_OscConfig+0x29e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003afe:	f042 0204 	orr.w	r2, r2, #4
 8003b02:	671a      	str	r2, [r3, #112]	; 0x70
 8003b04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b06:	f042 0201 	orr.w	r2, r2, #1
 8003b0a:	671a      	str	r2, [r3, #112]	; 0x70
 8003b0c:	e7e3      	b.n	8003ad6 <HAL_RCC_OscConfig+0x2f2>
        __HAL_RCC_PLL_DISABLE();
 8003b0e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b12:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8003b14:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003b16:	f7fe f8d3 	bl	8001cc0 <HAL_GetTick>
 8003b1a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b1c:	e005      	b.n	8003b2a <HAL_RCC_OscConfig+0x346>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b1e:	f7fe f8cf 	bl	8001cc0 <HAL_GetTick>
 8003b22:	1b80      	subs	r0, r0, r6
 8003b24:	2802      	cmp	r0, #2
 8003b26:	f63f af7f 	bhi.w	8003a28 <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b2a:	682b      	ldr	r3, [r5, #0]
 8003b2c:	0199      	lsls	r1, r3, #6
 8003b2e:	d4f6      	bmi.n	8003b1e <HAL_RCC_OscConfig+0x33a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b30:	6a22      	ldr	r2, [r4, #32]
 8003b32:	69e3      	ldr	r3, [r4, #28]
 8003b34:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003b36:	4313      	orrs	r3, r2
 8003b38:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003b3a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003b3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b40:	0852      	lsrs	r2, r2, #1
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b42:	4c12      	ldr	r4, [pc, #72]	; (8003b8c <HAL_RCC_OscConfig+0x3a8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b44:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003b48:	3a01      	subs	r2, #1
 8003b4a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003b4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003b52:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003b54:	682b      	ldr	r3, [r5, #0]
 8003b56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b5a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003b5c:	f7fe f8b0 	bl	8001cc0 <HAL_GetTick>
 8003b60:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b62:	e005      	b.n	8003b70 <HAL_RCC_OscConfig+0x38c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b64:	f7fe f8ac 	bl	8001cc0 <HAL_GetTick>
 8003b68:	1b40      	subs	r0, r0, r5
 8003b6a:	2802      	cmp	r0, #2
 8003b6c:	f63f af5c 	bhi.w	8003a28 <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b70:	6823      	ldr	r3, [r4, #0]
 8003b72:	019a      	lsls	r2, r3, #6
 8003b74:	d5f6      	bpl.n	8003b64 <HAL_RCC_OscConfig+0x380>
 8003b76:	e6f3      	b.n	8003960 <HAL_RCC_OscConfig+0x17c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b78:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003b7c:	601a      	str	r2, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	e659      	b.n	800383c <HAL_RCC_OscConfig+0x58>
    return HAL_ERROR;
 8003b88:	2001      	movs	r0, #1
}
 8003b8a:	4770      	bx	lr
 8003b8c:	40023800 	.word	0x40023800

08003b90 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b90:	4916      	ldr	r1, [pc, #88]	; (8003bec <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8003b92:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b94:	688b      	ldr	r3, [r1, #8]
 8003b96:	f003 030c 	and.w	r3, r3, #12
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d01b      	beq.n	8003bd6 <HAL_RCC_GetSysClockFreq+0x46>
 8003b9e:	2b08      	cmp	r3, #8
 8003ba0:	d117      	bne.n	8003bd2 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ba2:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003ba4:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ba6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003baa:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003bac:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8003bb0:	d113      	bne.n	8003bda <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bb2:	480f      	ldr	r0, [pc, #60]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x60>)
 8003bb4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003bb8:	fba1 0100 	umull	r0, r1, r1, r0
 8003bbc:	f7fc fb36 	bl	800022c <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8003bc0:	4b0a      	ldr	r3, [pc, #40]	; (8003bec <HAL_RCC_GetSysClockFreq+0x5c>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003bc8:	3301      	adds	r3, #1
 8003bca:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8003bcc:	fbb0 f0f3 	udiv	r0, r0, r3
 8003bd0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8003bd2:	4807      	ldr	r0, [pc, #28]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x60>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003bd4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8003bd6:	4807      	ldr	r0, [pc, #28]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x64>)
 8003bd8:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bda:	4806      	ldr	r0, [pc, #24]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x64>)
 8003bdc:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003be0:	2300      	movs	r3, #0
 8003be2:	fba1 0100 	umull	r0, r1, r1, r0
 8003be6:	f7fc fb21 	bl	800022c <__aeabi_uldivmod>
 8003bea:	e7e9      	b.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x30>
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	00f42400 	.word	0x00f42400
 8003bf4:	017d7840 	.word	0x017d7840

08003bf8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003bf8:	b178      	cbz	r0, 8003c1a <HAL_RCC_ClockConfig+0x22>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bfa:	4a4a      	ldr	r2, [pc, #296]	; (8003d24 <HAL_RCC_ClockConfig+0x12c>)
 8003bfc:	6813      	ldr	r3, [r2, #0]
 8003bfe:	f003 030f 	and.w	r3, r3, #15
 8003c02:	428b      	cmp	r3, r1
 8003c04:	d20b      	bcs.n	8003c1e <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c06:	6813      	ldr	r3, [r2, #0]
 8003c08:	f023 030f 	bic.w	r3, r3, #15
 8003c0c:	430b      	orrs	r3, r1
 8003c0e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c10:	6813      	ldr	r3, [r2, #0]
 8003c12:	f003 030f 	and.w	r3, r3, #15
 8003c16:	4299      	cmp	r1, r3
 8003c18:	d001      	beq.n	8003c1e <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 8003c1a:	2001      	movs	r0, #1
}
 8003c1c:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c1e:	6803      	ldr	r3, [r0, #0]
{
 8003c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c24:	079d      	lsls	r5, r3, #30
 8003c26:	d514      	bpl.n	8003c52 <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c28:	075c      	lsls	r4, r3, #29
 8003c2a:	d504      	bpl.n	8003c36 <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c2c:	4c3e      	ldr	r4, [pc, #248]	; (8003d28 <HAL_RCC_ClockConfig+0x130>)
 8003c2e:	68a2      	ldr	r2, [r4, #8]
 8003c30:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8003c34:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c36:	071a      	lsls	r2, r3, #28
 8003c38:	d504      	bpl.n	8003c44 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c3a:	4c3b      	ldr	r4, [pc, #236]	; (8003d28 <HAL_RCC_ClockConfig+0x130>)
 8003c3c:	68a2      	ldr	r2, [r4, #8]
 8003c3e:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8003c42:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c44:	4c38      	ldr	r4, [pc, #224]	; (8003d28 <HAL_RCC_ClockConfig+0x130>)
 8003c46:	6885      	ldr	r5, [r0, #8]
 8003c48:	68a2      	ldr	r2, [r4, #8]
 8003c4a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003c4e:	432a      	orrs	r2, r5
 8003c50:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c52:	07df      	lsls	r7, r3, #31
 8003c54:	4604      	mov	r4, r0
 8003c56:	460d      	mov	r5, r1
 8003c58:	d521      	bpl.n	8003c9e <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c5a:	6842      	ldr	r2, [r0, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c5c:	4b32      	ldr	r3, [pc, #200]	; (8003d28 <HAL_RCC_ClockConfig+0x130>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c5e:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c60:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c62:	d05b      	beq.n	8003d1c <HAL_RCC_ClockConfig+0x124>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c64:	2a02      	cmp	r2, #2
 8003c66:	d053      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x118>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c68:	0799      	lsls	r1, r3, #30
 8003c6a:	d528      	bpl.n	8003cbe <HAL_RCC_ClockConfig+0xc6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c6c:	492e      	ldr	r1, [pc, #184]	; (8003d28 <HAL_RCC_ClockConfig+0x130>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c6e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c72:	688b      	ldr	r3, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c74:	460e      	mov	r6, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c76:	f023 0303 	bic.w	r3, r3, #3
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003c7e:	f7fe f81f 	bl	8001cc0 <HAL_GetTick>
 8003c82:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c84:	e004      	b.n	8003c90 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c86:	f7fe f81b 	bl	8001cc0 <HAL_GetTick>
 8003c8a:	1bc0      	subs	r0, r0, r7
 8003c8c:	4540      	cmp	r0, r8
 8003c8e:	d842      	bhi.n	8003d16 <HAL_RCC_ClockConfig+0x11e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c90:	68b3      	ldr	r3, [r6, #8]
 8003c92:	6862      	ldr	r2, [r4, #4]
 8003c94:	f003 030c 	and.w	r3, r3, #12
 8003c98:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003c9c:	d1f3      	bne.n	8003c86 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c9e:	4a21      	ldr	r2, [pc, #132]	; (8003d24 <HAL_RCC_ClockConfig+0x12c>)
 8003ca0:	6813      	ldr	r3, [r2, #0]
 8003ca2:	f003 030f 	and.w	r3, r3, #15
 8003ca6:	429d      	cmp	r5, r3
 8003ca8:	d20c      	bcs.n	8003cc4 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003caa:	6813      	ldr	r3, [r2, #0]
 8003cac:	f023 030f 	bic.w	r3, r3, #15
 8003cb0:	432b      	orrs	r3, r5
 8003cb2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb4:	6813      	ldr	r3, [r2, #0]
 8003cb6:	f003 030f 	and.w	r3, r3, #15
 8003cba:	429d      	cmp	r5, r3
 8003cbc:	d002      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0xcc>
    return HAL_ERROR;
 8003cbe:	2001      	movs	r0, #1
 8003cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc4:	6823      	ldr	r3, [r4, #0]
 8003cc6:	075a      	lsls	r2, r3, #29
 8003cc8:	d506      	bpl.n	8003cd8 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cca:	4917      	ldr	r1, [pc, #92]	; (8003d28 <HAL_RCC_ClockConfig+0x130>)
 8003ccc:	68e0      	ldr	r0, [r4, #12]
 8003cce:	688a      	ldr	r2, [r1, #8]
 8003cd0:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8003cd4:	4302      	orrs	r2, r0
 8003cd6:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cd8:	071b      	lsls	r3, r3, #28
 8003cda:	d507      	bpl.n	8003cec <HAL_RCC_ClockConfig+0xf4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cdc:	4a12      	ldr	r2, [pc, #72]	; (8003d28 <HAL_RCC_ClockConfig+0x130>)
 8003cde:	6921      	ldr	r1, [r4, #16]
 8003ce0:	6893      	ldr	r3, [r2, #8]
 8003ce2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003ce6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003cea:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cec:	f7ff ff50 	bl	8003b90 <HAL_RCC_GetSysClockFreq>
 8003cf0:	4b0d      	ldr	r3, [pc, #52]	; (8003d28 <HAL_RCC_ClockConfig+0x130>)
 8003cf2:	490e      	ldr	r1, [pc, #56]	; (8003d2c <HAL_RCC_ClockConfig+0x134>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	4a0e      	ldr	r2, [pc, #56]	; (8003d30 <HAL_RCC_ClockConfig+0x138>)
 8003cf8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003cfc:	5ccb      	ldrb	r3, [r1, r3]
 8003cfe:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (TICK_INT_PRIORITY);
 8003d02:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d04:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003d06:	f7fd ff3d 	bl	8001b84 <HAL_InitTick>
  return HAL_OK;
 8003d0a:	2000      	movs	r0, #0
 8003d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d10:	0198      	lsls	r0, r3, #6
 8003d12:	d4ab      	bmi.n	8003c6c <HAL_RCC_ClockConfig+0x74>
 8003d14:	e7d3      	b.n	8003cbe <HAL_RCC_ClockConfig+0xc6>
        return HAL_TIMEOUT;
 8003d16:	2003      	movs	r0, #3
}
 8003d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d1c:	039e      	lsls	r6, r3, #14
 8003d1e:	d4a5      	bmi.n	8003c6c <HAL_RCC_ClockConfig+0x74>
 8003d20:	e7cd      	b.n	8003cbe <HAL_RCC_ClockConfig+0xc6>
 8003d22:	bf00      	nop
 8003d24:	40023c00 	.word	0x40023c00
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	08019710 	.word	0x08019710
 8003d30:	20000000 	.word	0x20000000

08003d34 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d34:	4b04      	ldr	r3, [pc, #16]	; (8003d48 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003d36:	4a05      	ldr	r2, [pc, #20]	; (8003d4c <HAL_RCC_GetPCLK1Freq+0x18>)
 8003d38:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003d3a:	4905      	ldr	r1, [pc, #20]	; (8003d50 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d3c:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003d40:	6808      	ldr	r0, [r1, #0]
 8003d42:	5cd3      	ldrb	r3, [r2, r3]
}
 8003d44:	40d8      	lsrs	r0, r3
 8003d46:	4770      	bx	lr
 8003d48:	40023800 	.word	0x40023800
 8003d4c:	08019720 	.word	0x08019720
 8003d50:	20000000 	.word	0x20000000

08003d54 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d54:	4b04      	ldr	r3, [pc, #16]	; (8003d68 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003d56:	4a05      	ldr	r2, [pc, #20]	; (8003d6c <HAL_RCC_GetPCLK2Freq+0x18>)
 8003d58:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003d5a:	4905      	ldr	r1, [pc, #20]	; (8003d70 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d5c:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003d60:	6808      	ldr	r0, [r1, #0]
 8003d62:	5cd3      	ldrb	r3, [r2, r3]
}
 8003d64:	40d8      	lsrs	r0, r3
 8003d66:	4770      	bx	lr
 8003d68:	40023800 	.word	0x40023800
 8003d6c:	08019720 	.word	0x08019720
 8003d70:	20000000 	.word	0x20000000

08003d74 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d74:	4b0e      	ldr	r3, [pc, #56]	; (8003db0 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d76:	220f      	movs	r2, #15
 8003d78:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	f002 0203 	and.w	r2, r2, #3
 8003d80:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003d88:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8003d90:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	08db      	lsrs	r3, r3, #3
{
 8003d96:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003d98:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003d9c:	4c05      	ldr	r4, [pc, #20]	; (8003db4 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003d9e:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003da0:	6823      	ldr	r3, [r4, #0]
}
 8003da2:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003da6:	f003 030f 	and.w	r3, r3, #15
 8003daa:	600b      	str	r3, [r1, #0]
}
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	40023800 	.word	0x40023800
 8003db4:	40023c00 	.word	0x40023c00

08003db8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003db8:	6803      	ldr	r3, [r0, #0]
{
 8003dba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003dbe:	f013 0601 	ands.w	r6, r3, #1
{
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003dc6:	d00b      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003dc8:	4ab8      	ldr	r2, [pc, #736]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dca:	6891      	ldr	r1, [r2, #8]
 8003dcc:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8003dd0:	6091      	str	r1, [r2, #8]
 8003dd2:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8003dd4:	6891      	ldr	r1, [r2, #8]
 8003dd6:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003dd8:	fab6 f686 	clz	r6, r6
 8003ddc:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003dde:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003de0:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8003de4:	d010      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003de6:	49b1      	ldr	r1, [pc, #708]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003de8:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8003dea:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003dee:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003df2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003df6:	ea42 0205 	orr.w	r2, r2, r5
 8003dfa:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003dfe:	f000 81a1 	beq.w	8004144 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003e02:	fab5 f585 	clz	r5, r5
 8003e06:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003e08:	02d9      	lsls	r1, r3, #11
 8003e0a:	d510      	bpl.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e0c:	48a7      	ldr	r0, [pc, #668]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e0e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003e10:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003e14:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e18:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8003e1c:	ea42 0201 	orr.w	r2, r2, r1
 8003e20:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003e24:	f000 818c 	beq.w	8004140 <HAL_RCCEx_PeriphCLKConfig+0x388>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8003e28:	2900      	cmp	r1, #0
 8003e2a:	bf08      	it	eq
 8003e2c:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8003e2e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003e32:	bf18      	it	ne
 8003e34:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e36:	069a      	lsls	r2, r3, #26
 8003e38:	f100 813a 	bmi.w	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e3c:	06d9      	lsls	r1, r3, #27
 8003e3e:	d50c      	bpl.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e40:	4a9a      	ldr	r2, [pc, #616]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e42:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8003e46:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8003e4a:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8003e4e:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8003e52:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003e54:	4301      	orrs	r1, r0
 8003e56:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e5a:	045a      	lsls	r2, r3, #17
 8003e5c:	d508      	bpl.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e5e:	4993      	ldr	r1, [pc, #588]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e60:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003e62:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003e66:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003e6a:	4302      	orrs	r2, r0
 8003e6c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e70:	041f      	lsls	r7, r3, #16
 8003e72:	d508      	bpl.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e74:	498d      	ldr	r1, [pc, #564]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e76:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8003e78:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003e7c:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8003e80:	4302      	orrs	r2, r0
 8003e82:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e86:	03d8      	lsls	r0, r3, #15
 8003e88:	d508      	bpl.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e8a:	4988      	ldr	r1, [pc, #544]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e8c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003e8e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003e92:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003e96:	4302      	orrs	r2, r0
 8003e98:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e9c:	0399      	lsls	r1, r3, #14
 8003e9e:	d508      	bpl.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ea0:	4982      	ldr	r1, [pc, #520]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ea2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8003ea4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003ea8:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8003eac:	4302      	orrs	r2, r0
 8003eae:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003eb2:	065a      	lsls	r2, r3, #25
 8003eb4:	d508      	bpl.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003eb6:	497d      	ldr	r1, [pc, #500]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003eb8:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003eba:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003ebe:	f022 0203 	bic.w	r2, r2, #3
 8003ec2:	4302      	orrs	r2, r0
 8003ec4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ec8:	061f      	lsls	r7, r3, #24
 8003eca:	d508      	bpl.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ecc:	4977      	ldr	r1, [pc, #476]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ece:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003ed0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003ed4:	f022 020c 	bic.w	r2, r2, #12
 8003ed8:	4302      	orrs	r2, r0
 8003eda:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ede:	05d8      	lsls	r0, r3, #23
 8003ee0:	d508      	bpl.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ee2:	4972      	ldr	r1, [pc, #456]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ee4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003ee6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003eea:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8003eee:	4302      	orrs	r2, r0
 8003ef0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ef4:	0599      	lsls	r1, r3, #22
 8003ef6:	d508      	bpl.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ef8:	496c      	ldr	r1, [pc, #432]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003efa:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003efc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003f00:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003f04:	4302      	orrs	r2, r0
 8003f06:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f0a:	055a      	lsls	r2, r3, #21
 8003f0c:	d508      	bpl.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f0e:	4967      	ldr	r1, [pc, #412]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f12:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003f16:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003f1a:	4302      	orrs	r2, r0
 8003f1c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003f20:	051f      	lsls	r7, r3, #20
 8003f22:	d508      	bpl.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003f24:	4961      	ldr	r1, [pc, #388]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f26:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f28:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003f2c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003f30:	4302      	orrs	r2, r0
 8003f32:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003f36:	04d8      	lsls	r0, r3, #19
 8003f38:	d508      	bpl.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003f3a:	495c      	ldr	r1, [pc, #368]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f3c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8003f3e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003f42:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003f46:	4302      	orrs	r2, r0
 8003f48:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003f4c:	0499      	lsls	r1, r3, #18
 8003f4e:	d508      	bpl.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003f50:	4956      	ldr	r1, [pc, #344]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f52:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003f54:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003f58:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003f5c:	4302      	orrs	r2, r0
 8003f5e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f62:	025a      	lsls	r2, r3, #9
 8003f64:	d508      	bpl.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f66:	4951      	ldr	r1, [pc, #324]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f68:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8003f6a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003f6e:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003f72:	4302      	orrs	r2, r0
 8003f74:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003f78:	029f      	lsls	r7, r3, #10
 8003f7a:	d50c      	bpl.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003f7c:	494b      	ldr	r1, [pc, #300]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f7e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8003f80:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8003f84:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003f88:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8003f8c:	bf08      	it	eq
 8003f8e:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003f90:	4302      	orrs	r2, r0
 8003f92:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8003f96:	f013 0f08 	tst.w	r3, #8
 8003f9a:	bf18      	it	ne
 8003f9c:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f9e:	0358      	lsls	r0, r3, #13
 8003fa0:	d508      	bpl.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fa2:	4942      	ldr	r1, [pc, #264]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fa4:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003fa6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003faa:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003fae:	4302      	orrs	r2, r0
 8003fb0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003fb4:	0219      	lsls	r1, r3, #8
 8003fb6:	d40b      	bmi.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003fb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fbc:	d016      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003fbe:	07f2      	lsls	r2, r6, #31
 8003fc0:	d414      	bmi.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003fc2:	2d01      	cmp	r5, #1
 8003fc4:	f000 80c1 	beq.w	800414a <HAL_RCCEx_PeriphCLKConfig+0x392>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003fc8:	2000      	movs	r0, #0
}
 8003fca:	b003      	add	sp, #12
 8003fcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fd0:	4936      	ldr	r1, [pc, #216]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003fd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fd6:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8003fda:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003fde:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003fe2:	ea42 0200 	orr.w	r2, r2, r0
 8003fe6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003fea:	d1e8      	bne.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_PLLI2S_DISABLE();
 8003fec:	4b2f      	ldr	r3, [pc, #188]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fee:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ff0:	461e      	mov	r6, r3
    __HAL_RCC_PLLI2S_DISABLE();
 8003ff2:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003ff6:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003ff8:	f7fd fe62 	bl	8001cc0 <HAL_GetTick>
 8003ffc:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ffe:	e004      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x252>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004000:	f7fd fe5e 	bl	8001cc0 <HAL_GetTick>
 8004004:	1bc0      	subs	r0, r0, r7
 8004006:	2864      	cmp	r0, #100	; 0x64
 8004008:	d84c      	bhi.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800400a:	6833      	ldr	r3, [r6, #0]
 800400c:	011b      	lsls	r3, r3, #4
 800400e:	d4f7      	bmi.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x248>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004010:	6823      	ldr	r3, [r4, #0]
 8004012:	07df      	lsls	r7, r3, #31
 8004014:	d503      	bpl.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x266>
 8004016:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004018:	2a00      	cmp	r2, #0
 800401a:	f000 8100 	beq.w	800421e <HAL_RCCEx_PeriphCLKConfig+0x466>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800401e:	031e      	lsls	r6, r3, #12
 8004020:	d504      	bpl.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004022:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004024:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8004028:	f000 8124 	beq.w	8004274 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800402c:	02d8      	lsls	r0, r3, #11
 800402e:	d504      	bpl.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x282>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004030:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004032:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8004036:	f000 811d 	beq.w	8004274 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800403a:	01d9      	lsls	r1, r3, #7
 800403c:	d511      	bpl.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800403e:	4e1b      	ldr	r6, [pc, #108]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004040:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004042:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004046:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800404a:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800404e:	6921      	ldr	r1, [r4, #16]
 8004050:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 8004054:	433a      	orrs	r2, r7
 8004056:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800405a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800405e:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004062:	019a      	lsls	r2, r3, #6
 8004064:	d50d      	bpl.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004066:	6923      	ldr	r3, [r4, #16]
 8004068:	6862      	ldr	r2, [r4, #4]
 800406a:	041b      	lsls	r3, r3, #16
 800406c:	68e0      	ldr	r0, [r4, #12]
 800406e:	68a1      	ldr	r1, [r4, #8]
 8004070:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004074:	4a0d      	ldr	r2, [pc, #52]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004076:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800407a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800407e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8004082:	4b0a      	ldr	r3, [pc, #40]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004084:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004086:	461e      	mov	r6, r3
    __HAL_RCC_PLLI2S_ENABLE();
 8004088:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800408c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800408e:	f7fd fe17 	bl	8001cc0 <HAL_GetTick>
 8004092:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004094:	6833      	ldr	r3, [r6, #0]
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	d493      	bmi.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800409a:	f7fd fe11 	bl	8001cc0 <HAL_GetTick>
 800409e:	1bc0      	subs	r0, r0, r7
 80040a0:	2864      	cmp	r0, #100	; 0x64
 80040a2:	d9f7      	bls.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
        return HAL_TIMEOUT;
 80040a4:	2003      	movs	r0, #3
}
 80040a6:	b003      	add	sp, #12
 80040a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80040ac:	40023800 	.word	0x40023800
    __HAL_RCC_PWR_CLK_ENABLE();
 80040b0:	4a8c      	ldr	r2, [pc, #560]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
    PWR->CR1 |= PWR_CR1_DBP;
 80040b2:	4b8d      	ldr	r3, [pc, #564]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80040b4:	6c11      	ldr	r1, [r2, #64]	; 0x40
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80040b6:	461f      	mov	r7, r3
    __HAL_RCC_PWR_CLK_ENABLE();
 80040b8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80040bc:	6411      	str	r1, [r2, #64]	; 0x40
 80040be:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80040c0:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80040c4:	9201      	str	r2, [sp, #4]
 80040c6:	9a01      	ldr	r2, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040ce:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80040d0:	f7fd fdf6 	bl	8001cc0 <HAL_GetTick>
 80040d4:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80040d6:	e005      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040d8:	f7fd fdf2 	bl	8001cc0 <HAL_GetTick>
 80040dc:	eba0 0008 	sub.w	r0, r0, r8
 80040e0:	2864      	cmp	r0, #100	; 0x64
 80040e2:	d8df      	bhi.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	05db      	lsls	r3, r3, #23
 80040e8:	d5f6      	bpl.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x320>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040ea:	4a7e      	ldr	r2, [pc, #504]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040ee:	6f11      	ldr	r1, [r2, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040f0:	f403 7040 	and.w	r0, r3, #768	; 0x300
 80040f4:	f411 7140 	ands.w	r1, r1, #768	; 0x300
 80040f8:	d011      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x366>
 80040fa:	4281      	cmp	r1, r0
 80040fc:	d00f      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x366>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040fe:	6f11      	ldr	r1, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8004100:	6f17      	ldr	r7, [r2, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004102:	f421 7140 	bic.w	r1, r1, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8004106:	f447 3780 	orr.w	r7, r7, #65536	; 0x10000
 800410a:	6717      	str	r7, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800410c:	6f17      	ldr	r7, [r2, #112]	; 0x70
 800410e:	f427 3780 	bic.w	r7, r7, #65536	; 0x10000
 8004112:	6717      	str	r7, [r2, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8004114:	6711      	str	r1, [r2, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004116:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8004118:	07cf      	lsls	r7, r1, #31
 800411a:	f100 8096 	bmi.w	800424a <HAL_RCCEx_PeriphCLKConfig+0x492>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800411e:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 8004122:	f000 80c3 	beq.w	80042ac <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8004126:	496f      	ldr	r1, [pc, #444]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8004128:	688a      	ldr	r2, [r1, #8]
 800412a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800412e:	608a      	str	r2, [r1, #8]
 8004130:	4a6c      	ldr	r2, [pc, #432]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8004132:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004136:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8004138:	430b      	orrs	r3, r1
 800413a:	6713      	str	r3, [r2, #112]	; 0x70
 800413c:	6823      	ldr	r3, [r4, #0]
 800413e:	e67d      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x84>
      plli2sused = 1;
 8004140:	2601      	movs	r6, #1
 8004142:	e674      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x76>
  uint32_t pllsaiused = 0;
 8004144:	2500      	movs	r5, #0
      plli2sused = 1;
 8004146:	2601      	movs	r6, #1
 8004148:	e65e      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x50>
    __HAL_RCC_PLLSAI_DISABLE();
 800414a:	4b66      	ldr	r3, [pc, #408]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800414c:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800414e:	461d      	mov	r5, r3
    __HAL_RCC_PLLSAI_DISABLE();
 8004150:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004154:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8004156:	f7fd fdb3 	bl	8001cc0 <HAL_GetTick>
 800415a:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800415c:	e004      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800415e:	f7fd fdaf 	bl	8001cc0 <HAL_GetTick>
 8004162:	1b80      	subs	r0, r0, r6
 8004164:	2864      	cmp	r0, #100	; 0x64
 8004166:	d89d      	bhi.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004168:	682b      	ldr	r3, [r5, #0]
 800416a:	009f      	lsls	r7, r3, #2
 800416c:	d4f7      	bmi.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800416e:	6823      	ldr	r3, [r4, #0]
 8004170:	031d      	lsls	r5, r3, #12
 8004172:	d466      	bmi.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8004174:	02d8      	lsls	r0, r3, #11
 8004176:	d51d      	bpl.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004178:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800417a:	b9da      	cbnz	r2, 80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800417c:	4959      	ldr	r1, [pc, #356]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800417e:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004180:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004184:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004188:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800418c:	69a0      	ldr	r0, [r4, #24]
 800418e:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 8004192:	4332      	orrs	r2, r6
 8004194:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 8004198:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800419c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80041a0:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 80041a4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80041a6:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 80041aa:	3801      	subs	r0, #1
 80041ac:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80041b0:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80041b4:	0299      	lsls	r1, r3, #10
 80041b6:	d503      	bpl.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80041b8:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80041ba:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 80041be:	d07e      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x506>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80041c0:	071a      	lsls	r2, r3, #28
 80041c2:	d519      	bpl.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x440>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80041c4:	4a47      	ldr	r2, [pc, #284]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80041c6:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80041c8:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041cc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80041d0:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80041d4:	69e0      	ldr	r0, [r4, #28]
 80041d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041da:	430b      	orrs	r3, r1
 80041dc:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 80041e0:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 80041e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80041e8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80041ec:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80041ee:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80041f2:	430b      	orrs	r3, r1
 80041f4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 80041f8:	4b3a      	ldr	r3, [pc, #232]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 80041fa:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041fc:	461c      	mov	r4, r3
    __HAL_RCC_PLLSAI_ENABLE();
 80041fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004202:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8004204:	f7fd fd5c 	bl	8001cc0 <HAL_GetTick>
 8004208:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800420a:	6823      	ldr	r3, [r4, #0]
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	f53f aedb 	bmi.w	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x210>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004212:	f7fd fd55 	bl	8001cc0 <HAL_GetTick>
 8004216:	1b40      	subs	r0, r0, r5
 8004218:	2864      	cmp	r0, #100	; 0x64
 800421a:	d9f6      	bls.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x452>
 800421c:	e742      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800421e:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004222:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004226:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800422a:	6860      	ldr	r0, [r4, #4]
 800422c:	f007 6770 	and.w	r7, r7, #251658240	; 0xf000000
 8004230:	68a1      	ldr	r1, [r4, #8]
 8004232:	433a      	orrs	r2, r7
 8004234:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8004238:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800423c:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
 8004240:	e6ed      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x266>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004242:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004244:	2a00      	cmp	r2, #0
 8004246:	d099      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8004248:	e794      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800424a:	4617      	mov	r7, r2
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800424c:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004250:	f7fd fd36 	bl	8001cc0 <HAL_GetTick>
 8004254:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004256:	e006      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004258:	f7fd fd32 	bl	8001cc0 <HAL_GetTick>
 800425c:	eba0 0009 	sub.w	r0, r0, r9
 8004260:	4540      	cmp	r0, r8
 8004262:	f63f af1f 	bhi.w	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004266:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004268:	0798      	lsls	r0, r3, #30
 800426a:	d5f5      	bpl.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800426c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800426e:	f403 7040 	and.w	r0, r3, #768	; 0x300
 8004272:	e754      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x366>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004274:	4e1b      	ldr	r6, [pc, #108]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004276:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004278:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800427c:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004280:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8004284:	68e1      	ldr	r1, [r4, #12]
 8004286:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 800428a:	433a      	orrs	r2, r7
 800428c:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8004290:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004294:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004298:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 800429c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800429e:	f021 011f 	bic.w	r1, r1, #31
 80042a2:	3a01      	subs	r2, #1
 80042a4:	430a      	orrs	r2, r1
 80042a6:	f8c6 208c 	str.w	r2, [r6, #140]	; 0x8c
 80042aa:	e6c6      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x282>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042ac:	480d      	ldr	r0, [pc, #52]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 80042ae:	490f      	ldr	r1, [pc, #60]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x534>)
 80042b0:	6882      	ldr	r2, [r0, #8]
 80042b2:	4019      	ands	r1, r3
 80042b4:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80042b8:	430a      	orrs	r2, r1
 80042ba:	6082      	str	r2, [r0, #8]
 80042bc:	e738      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x378>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80042be:	4909      	ldr	r1, [pc, #36]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80042c0:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80042c2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80042c6:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80042ca:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80042ce:	6a20      	ldr	r0, [r4, #32]
 80042d0:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 80042d4:	4332      	orrs	r2, r6
 80042d6:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 80042da:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80042de:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
 80042e2:	e76d      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80042e4:	40023800 	.word	0x40023800
 80042e8:	40007000 	.word	0x40007000
 80042ec:	0ffffcff 	.word	0x0ffffcff

080042f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80042f0:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 80042f4:	d010      	beq.n	8004318 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
        break;
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80042f6:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 80042fa:	d10b      	bne.n	8004314 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
  {
    saiclocksource = RCC->DCKCFGR1;
 80042fc:	4a2e      	ldr	r2, [pc, #184]	; (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 80042fe:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8004302:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
    switch (saiclocksource)
 8004306:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800430a:	d033      	beq.n	8004374 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
 800430c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004310:	d00d      	beq.n	800432e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8004312:	b173      	cbz	r3, 8004332 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
  uint32_t frequency = 0;
 8004314:	2000      	movs	r0, #0
      }
    }
  }

  return frequency;
}
 8004316:	4770      	bx	lr
    saiclocksource = RCC->DCKCFGR1;
 8004318:	4a27      	ldr	r2, [pc, #156]	; (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 800431a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800431e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    switch (saiclocksource)
 8004322:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004326:	d025      	beq.n	8004374 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
 8004328:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800432c:	d1f1      	bne.n	8004312 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
        frequency = EXTERNAL_CLOCK_VALUE;
 800432e:	4823      	ldr	r0, [pc, #140]	; (80043bc <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)
 8004330:	4770      	bx	lr
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004332:	6853      	ldr	r3, [r2, #4]
 8004334:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004338:	6853      	ldr	r3, [r2, #4]
 800433a:	bf08      	it	eq
 800433c:	4820      	ldreq	r0, [pc, #128]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800433e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004342:	bf18      	it	ne
 8004344:	481f      	ldrne	r0, [pc, #124]	; (80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>)
 8004346:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800434a:	4b1b      	ldr	r3, [pc, #108]	; (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 800434c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004350:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004354:	f3c2 6203 	ubfx	r2, r2, #24, #4
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004358:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800435c:	f3c1 1188 	ubfx	r1, r1, #6, #9
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004360:	f3c3 2304 	ubfx	r3, r3, #8, #5
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004364:	fb00 f001 	mul.w	r0, r0, r1
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004368:	3301      	adds	r3, #1
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800436a:	fbb0 f0f2 	udiv	r0, r0, r2
        frequency = frequency/(tmpreg);
 800436e:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8004372:	4770      	bx	lr
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004374:	6853      	ldr	r3, [r2, #4]
 8004376:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800437a:	6853      	ldr	r3, [r2, #4]
 800437c:	bf08      	it	eq
 800437e:	4810      	ldreq	r0, [pc, #64]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004380:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004384:	bf18      	it	ne
 8004386:	480f      	ldrne	r0, [pc, #60]	; (80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>)
 8004388:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800438c:	4b0a      	ldr	r3, [pc, #40]	; (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 800438e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004392:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004396:	f3c2 6203 	ubfx	r2, r2, #24, #4
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800439a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800439e:	f3c1 1188 	ubfx	r1, r1, #6, #9
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80043a2:	f003 031f 	and.w	r3, r3, #31
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80043a6:	fb00 f001 	mul.w	r0, r0, r1
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80043aa:	3301      	adds	r3, #1
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80043ac:	fbb0 f0f2 	udiv	r0, r0, r2
        frequency = frequency/(tmpreg);
 80043b0:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	40023800 	.word	0x40023800
 80043bc:	00bb8000 	.word	0x00bb8000
 80043c0:	00f42400 	.word	0x00f42400
 80043c4:	017d7840 	.word	0x017d7840

080043c8 <HAL_RTC_SetAlarm>:
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
  
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 80043c8:	7f03      	ldrb	r3, [r0, #28]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	f000 80ad 	beq.w	800452a <HAL_RTC_SetAlarm+0x162>
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 80043d0:	2302      	movs	r3, #2
{
 80043d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043d6:	4605      	mov	r5, r0
  __HAL_LOCK(hrtc);
 80043d8:	2001      	movs	r0, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 80043da:	776b      	strb	r3, [r5, #29]
  __HAL_LOCK(hrtc);
 80043dc:	7728      	strb	r0, [r5, #28]
  
  if(Format == RTC_FORMAT_BIN)
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80043de:	682f      	ldr	r7, [r5, #0]
  if(Format == RTC_FORMAT_BIN)
 80043e0:	2a00      	cmp	r2, #0
 80043e2:	f040 8088 	bne.w	80044f6 <HAL_RTC_SetAlarm+0x12e>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	f013 0e40 	ands.w	lr, r3, #64	; 0x40
 80043ec:	f000 80a1 	beq.w	8004532 <HAL_RTC_SetAlarm+0x16a>
 80043f0:	f891 e00c 	ldrb.w	lr, [r1, #12]
 80043f4:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80043f8:	780b      	ldrb	r3, [r1, #0]
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
  
  while(Value >= 10)
 80043fa:	2000      	movs	r0, #0
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 80043fc:	6a0e      	ldr	r6, [r1, #32]
  while(Value >= 10)
 80043fe:	2b09      	cmp	r3, #9
 8004400:	d906      	bls.n	8004410 <HAL_RTC_SetAlarm+0x48>
  {
    bcdhigh++;
    Value -= 10;
 8004402:	3b0a      	subs	r3, #10
    bcdhigh++;
 8004404:	3001      	adds	r0, #1
    Value -= 10;
 8004406:	b2db      	uxtb	r3, r3
  while(Value >= 10)
 8004408:	2b09      	cmp	r3, #9
 800440a:	d8fa      	bhi.n	8004402 <HAL_RTC_SetAlarm+0x3a>
 800440c:	0100      	lsls	r0, r0, #4
 800440e:	b2c0      	uxtb	r0, r0
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8004410:	4318      	orrs	r0, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8004412:	784b      	ldrb	r3, [r1, #1]
  while(Value >= 10)
 8004414:	2400      	movs	r4, #0
 8004416:	2b09      	cmp	r3, #9
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8004418:	ea4f 4000 	mov.w	r0, r0, lsl #16
  while(Value >= 10)
 800441c:	d906      	bls.n	800442c <HAL_RTC_SetAlarm+0x64>
    Value -= 10;
 800441e:	3b0a      	subs	r3, #10
    bcdhigh++;
 8004420:	3401      	adds	r4, #1
    Value -= 10;
 8004422:	b2db      	uxtb	r3, r3
  while(Value >= 10)
 8004424:	2b09      	cmp	r3, #9
 8004426:	d8fa      	bhi.n	800441e <HAL_RTC_SetAlarm+0x56>
 8004428:	0124      	lsls	r4, r4, #4
 800442a:	b2e4      	uxtb	r4, r4
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800442c:	4323      	orrs	r3, r4
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800442e:	788c      	ldrb	r4, [r1, #2]
  while(Value >= 10)
 8004430:	2c09      	cmp	r4, #9
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8004432:	ea4f 2303 	mov.w	r3, r3, lsl #8
  while(Value >= 10)
 8004436:	f240 80a6 	bls.w	8004586 <HAL_RTC_SetAlarm+0x1be>
 800443a:	f04f 0c00 	mov.w	ip, #0
    Value -= 10;
 800443e:	3c0a      	subs	r4, #10
    bcdhigh++;
 8004440:	f10c 0c01 	add.w	ip, ip, #1
    Value -= 10;
 8004444:	b2e4      	uxtb	r4, r4
  while(Value >= 10)
 8004446:	2c09      	cmp	r4, #9
 8004448:	d8f9      	bhi.n	800443e <HAL_RTC_SetAlarm+0x76>
 800444a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800444e:	fa5f f88c 	uxtb.w	r8, ip
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8004452:	f891 c024 	ldrb.w	ip, [r1, #36]	; 0x24
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004456:	ea44 0408 	orr.w	r4, r4, r8
  while(Value >= 10)
 800445a:	f1bc 0f09 	cmp.w	ip, #9
 800445e:	f240 8095 	bls.w	800458c <HAL_RTC_SetAlarm+0x1c4>
    Value -= 10;
 8004462:	f1ac 0c0a 	sub.w	ip, ip, #10
    bcdhigh++;
 8004466:	3201      	adds	r2, #1
    Value -= 10;
 8004468:	fa5f fc8c 	uxtb.w	ip, ip
  while(Value >= 10)
 800446c:	f1bc 0f09 	cmp.w	ip, #9
 8004470:	d8f7      	bhi.n	8004462 <HAL_RTC_SetAlarm+0x9a>
 8004472:	0112      	lsls	r2, r2, #4
 8004474:	b2d2      	uxtb	r2, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8004476:	ea4c 0c02 	orr.w	ip, ip, r2
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800447a:	698a      	ldr	r2, [r1, #24]
 800447c:	4316      	orrs	r6, r2
 800447e:	ea46 0e0e 	orr.w	lr, r6, lr
 8004482:	ea4e 0000 	orr.w	r0, lr, r0
 8004486:	4303      	orrs	r3, r0
 8004488:	431c      	orrs	r4, r3
 800448a:	ea44 660c 	orr.w	r6, r4, ip, lsl #24
  if(sAlarm->Alarm == RTC_ALARM_A)
 800448e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004490:	20ca      	movs	r0, #202	; 0xca
 8004492:	2253      	movs	r2, #83	; 0x53
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004494:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8004498:	69cc      	ldr	r4, [r1, #28]
  if(sAlarm->Alarm == RTC_ALARM_A)
 800449a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800449e:	6278      	str	r0, [r7, #36]	; 0x24
 80044a0:	627a      	str	r2, [r7, #36]	; 0x24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80044a2:	ea48 0804 	orr.w	r8, r8, r4
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80044a6:	68bb      	ldr	r3, [r7, #8]
  if(sAlarm->Alarm == RTC_ALARM_A)
 80044a8:	d04f      	beq.n	800454a <HAL_RTC_SetAlarm+0x182>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80044aa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044ae:	60bb      	str	r3, [r7, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044b6:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 80044b8:	f7fd fc02 	bl	8001cc0 <HAL_GetTick>
 80044bc:	4607      	mov	r7, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80044be:	e005      	b.n	80044cc <HAL_RTC_SetAlarm+0x104>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80044c0:	f7fd fbfe 	bl	8001cc0 <HAL_GetTick>
 80044c4:	1bc0      	subs	r0, r0, r7
 80044c6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80044ca:	d835      	bhi.n	8004538 <HAL_RTC_SetAlarm+0x170>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80044cc:	682b      	ldr	r3, [r5, #0]
 80044ce:	68dc      	ldr	r4, [r3, #12]
 80044d0:	f014 0402 	ands.w	r4, r4, #2
 80044d4:	d0f4      	beq.n	80044c0 <HAL_RTC_SetAlarm+0xf8>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80044d6:	621e      	str	r6, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80044d8:	f8c3 8048 	str.w	r8, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc); 
 80044dc:	689a      	ldr	r2, [r3, #8]
 80044de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044e2:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(hrtc);
 80044e4:	2200      	movs	r2, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);   
 80044e6:	20ff      	movs	r0, #255	; 0xff
  hrtc->State = HAL_RTC_STATE_READY; 
 80044e8:	2101      	movs	r1, #1
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);   
 80044ea:	6258      	str	r0, [r3, #36]	; 0x24
  return HAL_OK;
 80044ec:	4610      	mov	r0, r2
  hrtc->State = HAL_RTC_STATE_READY; 
 80044ee:	7769      	strb	r1, [r5, #29]
  __HAL_UNLOCK(hrtc);
 80044f0:	772a      	strb	r2, [r5, #28]
  return HAL_OK;
 80044f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80044f6:	68be      	ldr	r6, [r7, #8]
 80044f8:	f016 0640 	ands.w	r6, r6, #64	; 0x40
 80044fc:	d017      	beq.n	800452e <HAL_RTC_SetAlarm+0x166>
 80044fe:	7b0e      	ldrb	r6, [r1, #12]
 8004500:	0436      	lsls	r6, r6, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8004502:	698a      	ldr	r2, [r1, #24]
 8004504:	6a0b      	ldr	r3, [r1, #32]
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8004506:	f891 c002 	ldrb.w	ip, [r1, #2]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800450a:	4313      	orrs	r3, r2
 800450c:	7808      	ldrb	r0, [r1, #0]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800450e:	784a      	ldrb	r2, [r1, #1]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8004510:	ea43 0c0c 	orr.w	ip, r3, ip
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8004514:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8004518:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
 800451c:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
 8004520:	ea4c 6c03 	orr.w	ip, ip, r3, lsl #24
 8004524:	ea4c 0606 	orr.w	r6, ip, r6
 8004528:	e7b1      	b.n	800448e <HAL_RTC_SetAlarm+0xc6>
  __HAL_LOCK(hrtc);
 800452a:	2002      	movs	r0, #2
 800452c:	4770      	bx	lr
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800452e:	730e      	strb	r6, [r1, #12]
 8004530:	e7e7      	b.n	8004502 <HAL_RTC_SetAlarm+0x13a>
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8004532:	f881 e00c 	strb.w	lr, [r1, #12]
 8004536:	e75f      	b.n	80043f8 <HAL_RTC_SetAlarm+0x30>
        hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 8004538:	2303      	movs	r3, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800453a:	682a      	ldr	r2, [r5, #0]
 800453c:	21ff      	movs	r1, #255	; 0xff
        return HAL_TIMEOUT;
 800453e:	4618      	mov	r0, r3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004540:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 8004542:	772c      	strb	r4, [r5, #28]
        hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 8004544:	776b      	strb	r3, [r5, #29]
        return HAL_TIMEOUT;
 8004546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800454a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800454e:	60bb      	str	r3, [r7, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004556:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 8004558:	f7fd fbb2 	bl	8001cc0 <HAL_GetTick>
 800455c:	4607      	mov	r7, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800455e:	e005      	b.n	800456c <HAL_RTC_SetAlarm+0x1a4>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004560:	f7fd fbae 	bl	8001cc0 <HAL_GetTick>
 8004564:	1bc0      	subs	r0, r0, r7
 8004566:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800456a:	d8e5      	bhi.n	8004538 <HAL_RTC_SetAlarm+0x170>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800456c:	682b      	ldr	r3, [r5, #0]
 800456e:	68dc      	ldr	r4, [r3, #12]
 8004570:	f014 0401 	ands.w	r4, r4, #1
 8004574:	d0f4      	beq.n	8004560 <HAL_RTC_SetAlarm+0x198>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004576:	61de      	str	r6, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004578:	f8c3 8044 	str.w	r8, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800457c:	689a      	ldr	r2, [r3, #8]
 800457e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004582:	609a      	str	r2, [r3, #8]
 8004584:	e7ae      	b.n	80044e4 <HAL_RTC_SetAlarm+0x11c>
  while(Value >= 10)
 8004586:	f04f 0800 	mov.w	r8, #0
 800458a:	e762      	b.n	8004452 <HAL_RTC_SetAlarm+0x8a>
 800458c:	2200      	movs	r2, #0
 800458e:	e772      	b.n	8004476 <HAL_RTC_SetAlarm+0xae>

08004590 <HAL_RTC_WaitForSynchro>:
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004590:	6802      	ldr	r2, [r0, #0]
{
 8004592:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004594:	68d3      	ldr	r3, [r2, #12]
{
 8004596:	4604      	mov	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004598:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800459c:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 800459e:	f7fd fb8f 	bl	8001cc0 <HAL_GetTick>
 80045a2:	4605      	mov	r5, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80045a4:	e005      	b.n	80045b2 <HAL_RTC_WaitForSynchro+0x22>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80045a6:	f7fd fb8b 	bl	8001cc0 <HAL_GetTick>
 80045aa:	1b40      	subs	r0, r0, r5
 80045ac:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80045b0:	d805      	bhi.n	80045be <HAL_RTC_WaitForSynchro+0x2e>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80045b2:	6823      	ldr	r3, [r4, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	069b      	lsls	r3, r3, #26
 80045b8:	d5f5      	bpl.n	80045a6 <HAL_RTC_WaitForSynchro+0x16>
  return HAL_OK;
 80045ba:	2000      	movs	r0, #0
 80045bc:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 80045be:	2003      	movs	r0, #3
}
 80045c0:	bd38      	pop	{r3, r4, r5, pc}
 80045c2:	bf00      	nop

080045c4 <RTC_EnterInitMode>:
{
 80045c4:	b538      	push	{r3, r4, r5, lr}
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80045c6:	6803      	ldr	r3, [r0, #0]
 80045c8:	68da      	ldr	r2, [r3, #12]
 80045ca:	0652      	lsls	r2, r2, #25
 80045cc:	d501      	bpl.n	80045d2 <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 80045ce:	2000      	movs	r0, #0
 80045d0:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80045d2:	f04f 32ff 	mov.w	r2, #4294967295
 80045d6:	4604      	mov	r4, r0
 80045d8:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80045da:	f7fd fb71 	bl	8001cc0 <HAL_GetTick>
 80045de:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80045e0:	6823      	ldr	r3, [r4, #0]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	065b      	lsls	r3, r3, #25
 80045e6:	d4f2      	bmi.n	80045ce <RTC_EnterInitMode+0xa>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80045e8:	f7fd fb6a 	bl	8001cc0 <HAL_GetTick>
 80045ec:	1b40      	subs	r0, r0, r5
 80045ee:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80045f2:	d9f5      	bls.n	80045e0 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 80045f4:	2003      	movs	r0, #3
}
 80045f6:	bd38      	pop	{r3, r4, r5, pc}

080045f8 <HAL_RTC_Init>:
  if(hrtc == NULL)
 80045f8:	2800      	cmp	r0, #0
 80045fa:	d042      	beq.n	8004682 <HAL_RTC_Init+0x8a>
{
 80045fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80045fe:	7f43      	ldrb	r3, [r0, #29]
 8004600:	4604      	mov	r4, r0
 8004602:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004606:	2b00      	cmp	r3, #0
 8004608:	d037      	beq.n	800467a <HAL_RTC_Init+0x82>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 800460a:	2002      	movs	r0, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800460c:	6823      	ldr	r3, [r4, #0]
 800460e:	21ca      	movs	r1, #202	; 0xca
 8004610:	2253      	movs	r2, #83	; 0x53
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8004612:	7760      	strb	r0, [r4, #29]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004614:	4620      	mov	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004616:	6259      	str	r1, [r3, #36]	; 0x24
 8004618:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800461a:	f7ff ffd3 	bl	80045c4 <RTC_EnterInitMode>
 800461e:	bb28      	cbnz	r0, 800466c <HAL_RTC_Init+0x74>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004620:	6823      	ldr	r3, [r4, #0]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8004622:	26ff      	movs	r6, #255	; 0xff
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004624:	4918      	ldr	r1, [pc, #96]	; (8004688 <HAL_RTC_Init+0x90>)
    hrtc->State = HAL_RTC_STATE_READY;
 8004626:	2501      	movs	r5, #1
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004628:	689f      	ldr	r7, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800462a:	6862      	ldr	r2, [r4, #4]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800462c:	4039      	ands	r1, r7
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800462e:	6927      	ldr	r7, [r4, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8004630:	f8d4 e008 	ldr.w	lr, [r4, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004634:	433a      	orrs	r2, r7
 8004636:	6967      	ldr	r7, [r4, #20]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004638:	6099      	str	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800463a:	433a      	orrs	r2, r7
 800463c:	689f      	ldr	r7, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800463e:	68e1      	ldr	r1, [r4, #12]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004640:	433a      	orrs	r2, r7
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType); 
 8004642:	69a7      	ldr	r7, [r4, #24]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004644:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004646:	6119      	str	r1, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8004648:	6919      	ldr	r1, [r3, #16]
 800464a:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800464e:	6119      	str	r1, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8004650:	68d9      	ldr	r1, [r3, #12]
 8004652:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004656:	60d9      	str	r1, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8004658:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800465a:	f021 0108 	bic.w	r1, r1, #8
 800465e:	64d9      	str	r1, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType); 
 8004660:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004662:	433a      	orrs	r2, r7
 8004664:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8004666:	625e      	str	r6, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8004668:	7765      	strb	r5, [r4, #29]
    return HAL_OK;
 800466a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 800466c:	6822      	ldr	r2, [r4, #0]
 800466e:	21ff      	movs	r1, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004670:	2304      	movs	r3, #4
    return HAL_ERROR;
 8004672:	2001      	movs	r0, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8004674:	6251      	str	r1, [r2, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004676:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8004678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Lock = HAL_UNLOCKED;
 800467a:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 800467c:	f7fc fff6 	bl	800166c <HAL_RTC_MspInit>
 8004680:	e7c3      	b.n	800460a <HAL_RTC_Init+0x12>
     return HAL_ERROR;
 8004682:	2001      	movs	r0, #1
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	ff8fffbf 	.word	0xff8fffbf

0800468c <HAL_RTC_SetDate>:
 __HAL_LOCK(hrtc);
 800468c:	7f03      	ldrb	r3, [r0, #28]
 800468e:	2b01      	cmp	r3, #1
{
 8004690:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8004692:	d05d      	beq.n	8004750 <HAL_RTC_SetDate+0xc4>
 8004694:	4604      	mov	r4, r0
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8004696:	2302      	movs	r3, #2
 __HAL_LOCK(hrtc);
 8004698:	2001      	movs	r0, #1
  hrtc->State = HAL_RTC_STATE_BUSY; 
 800469a:	7763      	strb	r3, [r4, #29]
 __HAL_LOCK(hrtc);
 800469c:	7720      	strb	r0, [r4, #28]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800469e:	b33a      	cbz	r2, 80046f0 <HAL_RTC_SetDate+0x64>
                  (((uint32_t)sDate->Month) << 8) | \
 80046a0:	784d      	ldrb	r5, [r1, #1]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80046a2:	78c8      	ldrb	r0, [r1, #3]
                  (((uint32_t)sDate->Month) << 8) | \
 80046a4:	022d      	lsls	r5, r5, #8
                  ((uint32_t)sDate->Date) | \
 80046a6:	788a      	ldrb	r2, [r1, #2]
                  (((uint32_t)sDate->WeekDay) << 13));  
 80046a8:	780b      	ldrb	r3, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80046aa:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
                  (((uint32_t)sDate->Month) << 8) | \
 80046ae:	4315      	orrs	r5, r2
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80046b0:	ea45 3543 	orr.w	r5, r5, r3, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046b4:	6823      	ldr	r3, [r4, #0]
 80046b6:	21ca      	movs	r1, #202	; 0xca
 80046b8:	2253      	movs	r2, #83	; 0x53
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80046ba:	4620      	mov	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046bc:	6259      	str	r1, [r3, #36]	; 0x24
 80046be:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80046c0:	f7ff ff80 	bl	80045c4 <RTC_EnterInitMode>
 80046c4:	4606      	mov	r6, r0
 80046c6:	2800      	cmp	r0, #0
 80046c8:	d145      	bne.n	8004756 <HAL_RTC_SetDate+0xca>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80046ca:	4a33      	ldr	r2, [pc, #204]	; (8004798 <HAL_RTC_SetDate+0x10c>)
 80046cc:	6823      	ldr	r3, [r4, #0]
 80046ce:	402a      	ands	r2, r5
 80046d0:	605a      	str	r2, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 80046d2:	68da      	ldr	r2, [r3, #12]
 80046d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046d8:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80046da:	689a      	ldr	r2, [r3, #8]
 80046dc:	0692      	lsls	r2, r2, #26
 80046de:	d54a      	bpl.n	8004776 <HAL_RTC_SetDate+0xea>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80046e0:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_READY ;
 80046e2:	2101      	movs	r1, #1
    __HAL_UNLOCK(hrtc);
 80046e4:	2200      	movs	r2, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80046e6:	6258      	str	r0, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80046e8:	7761      	strb	r1, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80046ea:	7722      	strb	r2, [r4, #28]
}
 80046ec:	4630      	mov	r0, r6
 80046ee:	bd70      	pop	{r4, r5, r6, pc}
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80046f0:	784b      	ldrb	r3, [r1, #1]
 80046f2:	06d8      	lsls	r0, r3, #27
 80046f4:	d439      	bmi.n	800476a <HAL_RTC_SetDate+0xde>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80046f6:	78c8      	ldrb	r0, [r1, #3]
  while(Value >= 10)
 80046f8:	2500      	movs	r5, #0
 80046fa:	2809      	cmp	r0, #9
 80046fc:	d906      	bls.n	800470c <HAL_RTC_SetDate+0x80>
    Value -= 10;
 80046fe:	380a      	subs	r0, #10
    bcdhigh++;
 8004700:	3501      	adds	r5, #1
    Value -= 10;
 8004702:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8004704:	2809      	cmp	r0, #9
 8004706:	d8fa      	bhi.n	80046fe <HAL_RTC_SetDate+0x72>
 8004708:	012d      	lsls	r5, r5, #4
 800470a:	b2ed      	uxtb	r5, r5
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800470c:	4328      	orrs	r0, r5
  while(Value >= 10)
 800470e:	2b09      	cmp	r3, #9
 8004710:	f04f 0500 	mov.w	r5, #0
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8004714:	ea4f 4000 	mov.w	r0, r0, lsl #16
  while(Value >= 10)
 8004718:	d906      	bls.n	8004728 <HAL_RTC_SetDate+0x9c>
    Value -= 10;
 800471a:	3b0a      	subs	r3, #10
    bcdhigh++;
 800471c:	3501      	adds	r5, #1
    Value -= 10;
 800471e:	b2db      	uxtb	r3, r3
  while(Value >= 10)
 8004720:	2b09      	cmp	r3, #9
 8004722:	d8fa      	bhi.n	800471a <HAL_RTC_SetDate+0x8e>
 8004724:	012d      	lsls	r5, r5, #4
 8004726:	b2ed      	uxtb	r5, r5
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8004728:	432b      	orrs	r3, r5
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800472a:	788d      	ldrb	r5, [r1, #2]
  while(Value >= 10)
 800472c:	2d09      	cmp	r5, #9
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800472e:	ea4f 2303 	mov.w	r3, r3, lsl #8
  while(Value >= 10)
 8004732:	d92e      	bls.n	8004792 <HAL_RTC_SetDate+0x106>
    Value -= 10;
 8004734:	3d0a      	subs	r5, #10
    bcdhigh++;
 8004736:	3201      	adds	r2, #1
    Value -= 10;
 8004738:	b2ed      	uxtb	r5, r5
  while(Value >= 10)
 800473a:	2d09      	cmp	r5, #9
 800473c:	d8fa      	bhi.n	8004734 <HAL_RTC_SetDate+0xa8>
 800473e:	0112      	lsls	r2, r2, #4
 8004740:	b2d2      	uxtb	r2, r2
                 ((uint32_t)sDate->WeekDay << 13));   
 8004742:	7809      	ldrb	r1, [r1, #0]
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004744:	4315      	orrs	r5, r2
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8004746:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
 800474a:	4303      	orrs	r3, r0
 800474c:	431d      	orrs	r5, r3
 800474e:	e7b1      	b.n	80046b4 <HAL_RTC_SetDate+0x28>
 __HAL_LOCK(hrtc);
 8004750:	2602      	movs	r6, #2
}
 8004752:	4630      	mov	r0, r6
 8004754:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8004756:	6821      	ldr	r1, [r4, #0]
 8004758:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 800475a:	2204      	movs	r2, #4
    __HAL_UNLOCK(hrtc);
 800475c:	2300      	movs	r3, #0
    return HAL_ERROR;
 800475e:	2601      	movs	r6, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8004760:	6248      	str	r0, [r1, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004762:	7762      	strb	r2, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8004764:	7723      	strb	r3, [r4, #28]
}
 8004766:	4630      	mov	r0, r6
 8004768:	bd70      	pop	{r4, r5, r6, pc}
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800476a:	f023 0310 	bic.w	r3, r3, #16
 800476e:	330a      	adds	r3, #10
 8004770:	b2db      	uxtb	r3, r3
 8004772:	704b      	strb	r3, [r1, #1]
 8004774:	e7bf      	b.n	80046f6 <HAL_RTC_SetDate+0x6a>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004776:	4620      	mov	r0, r4
 8004778:	f7ff ff0a 	bl	8004590 <HAL_RTC_WaitForSynchro>
 800477c:	b908      	cbnz	r0, 8004782 <HAL_RTC_SetDate+0xf6>
 800477e:	6823      	ldr	r3, [r4, #0]
 8004780:	e7ae      	b.n	80046e0 <HAL_RTC_SetDate+0x54>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8004782:	6822      	ldr	r2, [r4, #0]
 8004784:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004786:	2304      	movs	r3, #4
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8004788:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 800478a:	7726      	strb	r6, [r4, #28]
        return HAL_ERROR;
 800478c:	2601      	movs	r6, #1
        hrtc->State = HAL_RTC_STATE_ERROR;
 800478e:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8004790:	e7ac      	b.n	80046ec <HAL_RTC_SetDate+0x60>
  while(Value >= 10)
 8004792:	2200      	movs	r2, #0
 8004794:	e7d5      	b.n	8004742 <HAL_RTC_SetDate+0xb6>
 8004796:	bf00      	nop
 8004798:	00ffff3f 	.word	0x00ffff3f

0800479c <HAL_RTC_SetTime>:
{
 800479c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800479e:	7f03      	ldrb	r3, [r0, #28]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d06c      	beq.n	800487e <HAL_RTC_SetTime+0xe2>
 80047a4:	460d      	mov	r5, r1
  hrtc->State = HAL_RTC_STATE_BUSY;
 80047a6:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 80047a8:	2101      	movs	r1, #1
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80047aa:	6806      	ldr	r6, [r0, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80047ac:	7743      	strb	r3, [r0, #29]
 80047ae:	4604      	mov	r4, r0
  __HAL_LOCK(hrtc);
 80047b0:	7701      	strb	r1, [r0, #28]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80047b2:	68b7      	ldr	r7, [r6, #8]
  if(Format == RTC_FORMAT_BIN)
 80047b4:	2a00      	cmp	r2, #0
 80047b6:	d155      	bne.n	8004864 <HAL_RTC_SetTime+0xc8>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80047b8:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 80047bc:	d162      	bne.n	8004884 <HAL_RTC_SetTime+0xe8>
      sTime->TimeFormat = 0x00;
 80047be:	732f      	strb	r7, [r5, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80047c0:	782b      	ldrb	r3, [r5, #0]
  while(Value >= 10)
 80047c2:	2100      	movs	r1, #0
 80047c4:	2b09      	cmp	r3, #9
 80047c6:	d906      	bls.n	80047d6 <HAL_RTC_SetTime+0x3a>
    Value -= 10;
 80047c8:	3b0a      	subs	r3, #10
    bcdhigh++;
 80047ca:	3101      	adds	r1, #1
    Value -= 10;
 80047cc:	b2db      	uxtb	r3, r3
  while(Value >= 10)
 80047ce:	2b09      	cmp	r3, #9
 80047d0:	d8fa      	bhi.n	80047c8 <HAL_RTC_SetTime+0x2c>
 80047d2:	0109      	lsls	r1, r1, #4
 80047d4:	b2c9      	uxtb	r1, r1
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80047d6:	4319      	orrs	r1, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80047d8:	786b      	ldrb	r3, [r5, #1]
  while(Value >= 10)
 80047da:	2000      	movs	r0, #0
 80047dc:	2b09      	cmp	r3, #9
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80047de:	ea4f 4101 	mov.w	r1, r1, lsl #16
  while(Value >= 10)
 80047e2:	d906      	bls.n	80047f2 <HAL_RTC_SetTime+0x56>
    Value -= 10;
 80047e4:	3b0a      	subs	r3, #10
    bcdhigh++;
 80047e6:	3001      	adds	r0, #1
    Value -= 10;
 80047e8:	b2db      	uxtb	r3, r3
  while(Value >= 10)
 80047ea:	2b09      	cmp	r3, #9
 80047ec:	d8fa      	bhi.n	80047e4 <HAL_RTC_SetTime+0x48>
 80047ee:	0100      	lsls	r0, r0, #4
 80047f0:	b2c0      	uxtb	r0, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80047f2:	4303      	orrs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80047f4:	78a8      	ldrb	r0, [r5, #2]
  while(Value >= 10)
 80047f6:	2809      	cmp	r0, #9
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80047f8:	ea4f 2303 	mov.w	r3, r3, lsl #8
  while(Value >= 10)
 80047fc:	d960      	bls.n	80048c0 <HAL_RTC_SetTime+0x124>
    Value -= 10;
 80047fe:	380a      	subs	r0, #10
    bcdhigh++;
 8004800:	3201      	adds	r2, #1
    Value -= 10;
 8004802:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8004804:	2809      	cmp	r0, #9
 8004806:	d8fa      	bhi.n	80047fe <HAL_RTC_SetTime+0x62>
 8004808:	0112      	lsls	r2, r2, #4
 800480a:	b2d2      	uxtb	r2, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800480c:	430f      	orrs	r7, r1
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800480e:	4310      	orrs	r0, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8004810:	433b      	orrs	r3, r7
 8004812:	ea43 0700 	orr.w	r7, r3, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004816:	22ca      	movs	r2, #202	; 0xca
 8004818:	2353      	movs	r3, #83	; 0x53
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800481a:	4620      	mov	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800481c:	6272      	str	r2, [r6, #36]	; 0x24
 800481e:	6273      	str	r3, [r6, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004820:	f7ff fed0 	bl	80045c4 <RTC_EnterInitMode>
 8004824:	4606      	mov	r6, r0
 8004826:	2800      	cmp	r0, #0
 8004828:	d132      	bne.n	8004890 <HAL_RTC_SetTime+0xf4>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800482a:	4926      	ldr	r1, [pc, #152]	; (80048c4 <HAL_RTC_SetTime+0x128>)
 800482c:	6823      	ldr	r3, [r4, #0]
 800482e:	4039      	ands	r1, r7
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004830:	692a      	ldr	r2, [r5, #16]
 8004832:	6968      	ldr	r0, [r5, #20]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004834:	6019      	str	r1, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004836:	6899      	ldr	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004838:	4302      	orrs	r2, r0
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800483a:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800483e:	6099      	str	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004840:	6899      	ldr	r1, [r3, #8]
 8004842:	430a      	orrs	r2, r1
 8004844:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8004846:	68da      	ldr	r2, [r3, #12]
 8004848:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800484c:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800484e:	689a      	ldr	r2, [r3, #8]
 8004850:	0692      	lsls	r2, r2, #26
 8004852:	d527      	bpl.n	80048a4 <HAL_RTC_SetTime+0x108>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004854:	20ff      	movs	r0, #255	; 0xff
   hrtc->State = HAL_RTC_STATE_READY;
 8004856:	2101      	movs	r1, #1
   __HAL_UNLOCK(hrtc); 
 8004858:	2200      	movs	r2, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800485a:	6258      	str	r0, [r3, #36]	; 0x24
}
 800485c:	4630      	mov	r0, r6
   hrtc->State = HAL_RTC_STATE_READY;
 800485e:	7761      	strb	r1, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8004860:	7722      	strb	r2, [r4, #28]
}
 8004862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004864:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 8004868:	d10f      	bne.n	800488a <HAL_RTC_SetTime+0xee>
      sTime->TimeFormat = 0x00;
 800486a:	732f      	strb	r7, [r5, #12]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800486c:	7868      	ldrb	r0, [r5, #1]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800486e:	782a      	ldrb	r2, [r5, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8004870:	0200      	lsls	r0, r0, #8
              ((uint32_t)sTime->Seconds) | \
 8004872:	78ab      	ldrb	r3, [r5, #2]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8004874:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8004878:	4318      	orrs	r0, r3
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800487a:	4307      	orrs	r7, r0
 800487c:	e7cb      	b.n	8004816 <HAL_RTC_SetTime+0x7a>
  __HAL_LOCK(hrtc);
 800487e:	2602      	movs	r6, #2
}
 8004880:	4630      	mov	r0, r6
 8004882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004884:	7b2f      	ldrb	r7, [r5, #12]
 8004886:	043f      	lsls	r7, r7, #16
 8004888:	e79a      	b.n	80047c0 <HAL_RTC_SetTime+0x24>
 800488a:	7b2f      	ldrb	r7, [r5, #12]
 800488c:	043f      	lsls	r7, r7, #16
 800488e:	e7ed      	b.n	800486c <HAL_RTC_SetTime+0xd0>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8004890:	6821      	ldr	r1, [r4, #0]
 8004892:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004894:	2204      	movs	r2, #4
    __HAL_UNLOCK(hrtc);
 8004896:	2300      	movs	r3, #0
    return HAL_ERROR;
 8004898:	2601      	movs	r6, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 800489a:	6248      	str	r0, [r1, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800489c:	7762      	strb	r2, [r4, #29]
    __HAL_UNLOCK(hrtc);
 800489e:	7723      	strb	r3, [r4, #28]
}
 80048a0:	4630      	mov	r0, r6
 80048a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80048a4:	4620      	mov	r0, r4
 80048a6:	f7ff fe73 	bl	8004590 <HAL_RTC_WaitForSynchro>
 80048aa:	b908      	cbnz	r0, 80048b0 <HAL_RTC_SetTime+0x114>
 80048ac:	6823      	ldr	r3, [r4, #0]
 80048ae:	e7d1      	b.n	8004854 <HAL_RTC_SetTime+0xb8>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80048b0:	6822      	ldr	r2, [r4, #0]
 80048b2:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 80048b4:	2304      	movs	r3, #4
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80048b6:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 80048b8:	7726      	strb	r6, [r4, #28]
        return HAL_ERROR;
 80048ba:	2601      	movs	r6, #1
        hrtc->State = HAL_RTC_STATE_ERROR;
 80048bc:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 80048be:	e7df      	b.n	8004880 <HAL_RTC_SetTime+0xe4>
  while(Value >= 10)
 80048c0:	2200      	movs	r2, #0
 80048c2:	e7a3      	b.n	800480c <HAL_RTC_SetTime+0x70>
 80048c4:	007f7f7f 	.word	0x007f7f7f

080048c8 <HAL_RTCEx_SetTimeStamp>:
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
  
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 80048c8:	7f03      	ldrb	r3, [r0, #28]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d022      	beq.n	8004914 <HAL_RTCEx_SetTimeStamp+0x4c>
  
  hrtc->State = HAL_RTC_STATE_BUSY;
  
  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80048ce:	6803      	ldr	r3, [r0, #0]
{
 80048d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  hrtc->State = HAL_RTC_STATE_BUSY;
 80048d2:	2602      	movs	r6, #2
    
  tmpreg|= TimeStampEdge;
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048d4:	25ca      	movs	r5, #202	; 0xca
 80048d6:	2453      	movs	r4, #83	; 0x53
  hrtc->Instance->CR = (uint32_t)tmpreg;
  
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
  
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);    
 80048d8:	27ff      	movs	r7, #255	; 0xff
  hrtc->State = HAL_RTC_STATE_BUSY;
 80048da:	7746      	strb	r6, [r0, #29]
  
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY; 
 80048dc:	2601      	movs	r6, #1
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80048de:	f8d3 e008 	ldr.w	lr, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048e2:	625d      	str	r5, [r3, #36]	; 0x24
 80048e4:	625c      	str	r4, [r3, #36]	; 0x24
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80048e6:	f6a4 045c 	subw	r4, r4, #2140	; 0x85c
  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80048ea:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80048ec:	ea0e 0404 	and.w	r4, lr, r4
  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80048f0:	f025 0506 	bic.w	r5, r5, #6
  tmpreg|= TimeStampEdge;
 80048f4:	430c      	orrs	r4, r1
  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80048f6:	64dd      	str	r5, [r3, #76]	; 0x4c
  
  /* Process Unlocked */ 
  __HAL_UNLOCK(hrtc);
 80048f8:	2500      	movs	r5, #0
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin); 
 80048fa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80048fc:	430a      	orrs	r2, r1
 80048fe:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8004900:	609c      	str	r4, [r3, #8]
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8004902:	689a      	ldr	r2, [r3, #8]
 8004904:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004908:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);    
 800490a:	625f      	str	r7, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY; 
 800490c:	7746      	strb	r6, [r0, #29]
  __HAL_UNLOCK(hrtc);
 800490e:	7705      	strb	r5, [r0, #28]
  
  return HAL_OK;
}
 8004910:	4628      	mov	r0, r5
 8004912:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 8004914:	2102      	movs	r1, #2
}
 8004916:	4608      	mov	r0, r1
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop

0800491c <HAL_SAI_Init>:
  uint32_t tmpregisterGCR = 0;
  uint32_t ckstr_bits = 0;
  uint32_t syncen_bits = 0;

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 800491c:	2800      	cmp	r0, #0
 800491e:	f000 80f9 	beq.w	8004b14 <HAL_SAI_Init+0x1f8>
{
 8004922:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));
  
  if(hsai->State == HAL_SAI_STATE_RESET)
 8004924:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 8004928:	4604      	mov	r4, r0
 800492a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 80df 	beq.w	8004af2 <HAL_SAI_Init+0x1d6>
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8004934:	4b78      	ldr	r3, [pc, #480]	; (8004b18 <HAL_SAI_Init+0x1fc>)
  hsai->State = HAL_SAI_STATE_BUSY;
 8004936:	2102      	movs	r1, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004938:	6822      	ldr	r2, [r4, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4877      	ldr	r0, [pc, #476]	; (8004b1c <HAL_SAI_Init+0x200>)
  hsai->State = HAL_SAI_STATE_BUSY;
 800493e:	f884 107d 	strb.w	r1, [r4, #125]	; 0x7d
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8004942:	fba0 0303 	umull	r0, r3, r0, r3
  __HAL_SAI_DISABLE(hsai);
 8004946:	6811      	ldr	r1, [r2, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8004948:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 800494a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 800494e:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 8004950:	6011      	str	r1, [r2, #0]
 8004952:	e002      	b.n	800495a <HAL_SAI_Init+0x3e>
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8004954:	6811      	ldr	r1, [r2, #0]
 8004956:	03c8      	lsls	r0, r1, #15
 8004958:	d508      	bpl.n	800496c <HAL_SAI_Init+0x50>
    if (count-- == 0)
 800495a:	f113 33ff 	adds.w	r3, r3, #4294967295
 800495e:	d2f9      	bcs.n	8004954 <HAL_SAI_Init+0x38>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004960:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004968:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  switch(hsai->Init.SynchroExt)
 800496c:	68e3      	ldr	r3, [r4, #12]
 800496e:	2b01      	cmp	r3, #1
 8004970:	f000 80bd 	beq.w	8004aee <HAL_SAI_Init+0x1d2>
  uint32_t tmpregisterGCR = 0;
 8004974:	2b02      	cmp	r3, #2
 8004976:	bf0c      	ite	eq
 8004978:	2120      	moveq	r1, #32
 800497a:	2100      	movne	r1, #0
  switch(hsai->Init.Synchro)
 800497c:	68a3      	ldr	r3, [r4, #8]
 800497e:	2b02      	cmp	r3, #2
 8004980:	f000 809f 	beq.w	8004ac2 <HAL_SAI_Init+0x1a6>
 8004984:	2b03      	cmp	r3, #3
 8004986:	f000 809a 	beq.w	8004abe <HAL_SAI_Init+0x1a2>
  uint32_t syncen_bits = 0;
 800498a:	2b01      	cmp	r3, #1
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800498c:	4b64      	ldr	r3, [pc, #400]	; (8004b20 <HAL_SAI_Init+0x204>)
  uint32_t syncen_bits = 0;
 800498e:	bf0c      	ite	eq
 8004990:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 8004994:	2700      	movne	r7, #0
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004996:	429a      	cmp	r2, r3
 8004998:	f000 8099 	beq.w	8004ace <HAL_SAI_Init+0x1b2>
 800499c:	4861      	ldr	r0, [pc, #388]	; (8004b24 <HAL_SAI_Init+0x208>)
 800499e:	1a10      	subs	r0, r2, r0
 80049a0:	fab0 f080 	clz	r0, r0
 80049a4:	0940      	lsrs	r0, r0, #5
 80049a6:	2800      	cmp	r0, #0
 80049a8:	f040 8091 	bne.w	8004ace <HAL_SAI_Init+0x1b2>
    SAI2->GCR = tmpregisterGCR;
 80049ac:	4b5e      	ldr	r3, [pc, #376]	; (8004b28 <HAL_SAI_Init+0x20c>)
 80049ae:	6019      	str	r1, [r3, #0]
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80049b0:	69e3      	ldr	r3, [r4, #28]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f000 808f 	beq.w	8004ad6 <HAL_SAI_Init+0x1ba>
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 80049b8:	4b5c      	ldr	r3, [pc, #368]	; (8004b2c <HAL_SAI_Init+0x210>)
 80049ba:	429a      	cmp	r2, r3
 80049bc:	f000 809e 	beq.w	8004afc <HAL_SAI_Init+0x1e0>
 80049c0:	3320      	adds	r3, #32
 80049c2:	429a      	cmp	r2, r3
 80049c4:	f000 809a 	beq.w	8004afc <HAL_SAI_Init+0x1e0>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80049c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80049cc:	69e5      	ldr	r5, [r4, #28]
    hsai->Init.Mckdiv = tmpval / 10;
 80049ce:	4b58      	ldr	r3, [pc, #352]	; (8004b30 <HAL_SAI_Init+0x214>)
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80049d0:	0041      	lsls	r1, r0, #1
 80049d2:	026d      	lsls	r5, r5, #9
 80049d4:	fbb1 f1f5 	udiv	r1, r1, r5
    hsai->Init.Mckdiv = tmpval / 10;
 80049d8:	fba3 0301 	umull	r0, r3, r3, r1
 80049dc:	08d8      	lsrs	r0, r3, #3
    if((tmpval % 10) > 8)
 80049de:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    hsai->Init.Mckdiv = tmpval / 10;
 80049e2:	6220      	str	r0, [r4, #32]
    if((tmpval % 10) > 8)
 80049e4:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
 80049e8:	2909      	cmp	r1, #9
 80049ea:	d101      	bne.n	80049f0 <HAL_SAI_Init+0xd4>
      hsai->Init.Mckdiv+= 1;
 80049ec:	3001      	adds	r0, #1
 80049ee:	6220      	str	r0, [r4, #32]
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80049f0:	6863      	ldr	r3, [r4, #4]
 80049f2:	f033 0102 	bics.w	r1, r3, #2
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80049f6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80049f8:	d173      	bne.n	8004ae2 <HAL_SAI_Init+0x1c6>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80049fa:	2901      	cmp	r1, #1
 80049fc:	bf14      	ite	ne
 80049fe:	f44f 7600 	movne.w	r6, #512	; 0x200
 8004a02:	2600      	moveq	r6, #0
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004a04:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8004a06:	f24f 0c20 	movw	ip, #61472	; 0xf020
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004a0a:	f8d2 e000 	ldr.w	lr, [r2]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004a0e:	430b      	orrs	r3, r1
 8004a10:	6b61      	ldr	r1, [r4, #52]	; 0x34
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8004a12:	6c25      	ldr	r5, [r4, #64]	; 0x40
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004a14:	430b      	orrs	r3, r1
 8004a16:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004a18:	430b      	orrs	r3, r1
 8004a1a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004a1c:	430b      	orrs	r3, r1
 8004a1e:	6921      	ldr	r1, [r4, #16]
 8004a20:	430b      	orrs	r3, r1
 8004a22:	6961      	ldr	r1, [r4, #20]
 8004a24:	430b      	orrs	r3, r1
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004a26:	4943      	ldr	r1, [pc, #268]	; (8004b34 <HAL_SAI_Init+0x218>)
 8004a28:	ea0e 0101 	and.w	r1, lr, r1
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004a2c:	433b      	orrs	r3, r7
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004a2e:	f8df e110 	ldr.w	lr, [pc, #272]	; 8004b40 <HAL_SAI_Init+0x224>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004a32:	2700      	movs	r7, #0
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004a34:	6011      	str	r1, [r2, #0]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004a36:	6811      	ldr	r1, [r2, #0]
 8004a38:	430b      	orrs	r3, r1
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004a3a:	69a1      	ldr	r1, [r4, #24]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004a3c:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004a40:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004a42:	4333      	orrs	r3, r6
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004a44:	4301      	orrs	r1, r0
 8004a46:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004a48:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004a4a:	6856      	ldr	r6, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004a4c:	4301      	orrs	r1, r0
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8004a4e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004a50:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004a52:	ea06 0e0e 	and.w	lr, r6, lr
  hsai->State= HAL_SAI_STATE_READY;
 8004a56:	2601      	movs	r6, #1
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004a58:	f8c2 e004 	str.w	lr, [r2, #4]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8004a5c:	4303      	orrs	r3, r0
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004a5e:	6850      	ldr	r0, [r2, #4]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8004a60:	f8d4 e04c 	ldr.w	lr, [r4, #76]	; 0x4c
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004a64:	4301      	orrs	r1, r0
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004a66:	4834      	ldr	r0, [pc, #208]	; (8004b38 <HAL_SAI_Init+0x21c>)
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8004a68:	ea43 030e 	orr.w	r3, r3, lr
 8004a6c:	f105 3eff 	add.w	lr, r5, #4294967295
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004a70:	6051      	str	r1, [r2, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004a72:	6891      	ldr	r1, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8004a74:	ea43 030e 	orr.w	r3, r3, lr
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004a78:	4008      	ands	r0, r1
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8004a7a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004a7c:	3901      	subs	r1, #1
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004a7e:	6090      	str	r0, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8004a80:	6890      	ldr	r0, [r2, #8]
 8004a82:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004a86:	6d61      	ldr	r1, [r4, #84]	; 0x54
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8004a88:	4303      	orrs	r3, r0
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004a8a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8004a8c:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004a8e:	ea41 0300 	orr.w	r3, r1, r0
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8004a92:	68d1      	ldr	r1, [r2, #12]
  return HAL_OK;
 8004a94:	4638      	mov	r0, r7
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8004a96:	ea0c 0501 	and.w	r5, ip, r1
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8004a9a:	6e21      	ldr	r1, [r4, #96]	; 0x60
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8004a9c:	60d5      	str	r5, [r2, #12]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004a9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004aa2:	68d5      	ldr	r5, [r2, #12]
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8004aa4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004aa6:	3901      	subs	r1, #1
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004aa8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004aac:	432b      	orrs	r3, r5
 8004aae:	60d3      	str	r3, [r2, #12]
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004ab0:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
  __HAL_UNLOCK(hsai);
 8004ab4:	f884 707c 	strb.w	r7, [r4, #124]	; 0x7c
  hsai->State= HAL_SAI_STATE_READY;
 8004ab8:	f884 607d 	strb.w	r6, [r4, #125]	; 0x7d
  return HAL_OK;
 8004abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004abe:	f041 0101 	orr.w	r1, r1, #1
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004ac2:	4b17      	ldr	r3, [pc, #92]	; (8004b20 <HAL_SAI_Init+0x204>)
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8004ac4:	f44f 6700 	mov.w	r7, #2048	; 0x800
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	f47f af67 	bne.w	800499c <HAL_SAI_Init+0x80>
    SAI1->GCR = tmpregisterGCR;
 8004ace:	4b1b      	ldr	r3, [pc, #108]	; (8004b3c <HAL_SAI_Init+0x220>)
 8004ad0:	6019      	str	r1, [r3, #0]
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004ad2:	69e3      	ldr	r3, [r4, #28]
 8004ad4:	b9c3      	cbnz	r3, 8004b08 <HAL_SAI_Init+0x1ec>
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004ad6:	6863      	ldr	r3, [r4, #4]
 8004ad8:	6a20      	ldr	r0, [r4, #32]
 8004ada:	f033 0102 	bics.w	r1, r3, #2
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8004ade:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004ae0:	d08b      	beq.n	80049fa <HAL_SAI_Init+0xde>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8004ae2:	2901      	cmp	r1, #1
 8004ae4:	bf14      	ite	ne
 8004ae6:	2600      	movne	r6, #0
 8004ae8:	f44f 7600 	moveq.w	r6, #512	; 0x200
 8004aec:	e78a      	b.n	8004a04 <HAL_SAI_Init+0xe8>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004aee:	2110      	movs	r1, #16
 8004af0:	e744      	b.n	800497c <HAL_SAI_Init+0x60>
    hsai->Lock = HAL_UNLOCKED;
 8004af2:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 8004af6:	f7fc ffed 	bl	8001ad4 <HAL_SAI_MspInit>
 8004afa:	e71b      	b.n	8004934 <HAL_SAI_Init+0x18>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004afc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004b00:	f7ff fbf6 	bl	80042f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004b04:	6822      	ldr	r2, [r4, #0]
 8004b06:	e75f      	b.n	80049c8 <HAL_SAI_Init+0xac>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004b08:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004b0c:	f7ff fbf0 	bl	80042f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004b10:	6822      	ldr	r2, [r4, #0]
 8004b12:	e751      	b.n	80049b8 <HAL_SAI_Init+0x9c>
    return HAL_ERROR;
 8004b14:	2001      	movs	r0, #1
 8004b16:	4770      	bx	lr
 8004b18:	20000000 	.word	0x20000000
 8004b1c:	95cbec1b 	.word	0x95cbec1b
 8004b20:	40015804 	.word	0x40015804
 8004b24:	40015824 	.word	0x40015824
 8004b28:	40015c00 	.word	0x40015c00
 8004b2c:	40015c04 	.word	0x40015c04
 8004b30:	cccccccd 	.word	0xcccccccd
 8004b34:	ff05c010 	.word	0xff05c010
 8004b38:	fff88000 	.word	0xfff88000
 8004b3c:	40015800 	.word	0x40015800
 8004b40:	ffff1ff0 	.word	0xffff1ff0

08004b44 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004b44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b48:	4605      	mov	r5, r0
 8004b4a:	b089      	sub	sp, #36	; 0x24
 8004b4c:	4688      	mov	r8, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 8004b4e:	f7fd f8b7 	bl	8001cc0 <HAL_GetTick>
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
 8004b52:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 8004b54:	4606      	mov	r6, r0
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8004b56:	2108      	movs	r1, #8
 8004b58:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2] = {0, 0};
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8004b5e:	f001 fc17 	bl	8006390 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_OK)
 8004b62:	4604      	mov	r4, r0
 8004b64:	b118      	cbz	r0, 8004b6e <SD_FindSCR+0x2a>
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
  }

  return HAL_SD_ERROR_NONE;
}
 8004b66:	4620      	mov	r0, r4
 8004b68:	b009      	add	sp, #36	; 0x24
 8004b6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8004b6e:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8004b70:	6828      	ldr	r0, [r5, #0]
 8004b72:	0409      	lsls	r1, r1, #16
 8004b74:	f001 fc96 	bl	80064a4 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_OK)
 8004b78:	4604      	mov	r4, r0
 8004b7a:	2800      	cmp	r0, #0
 8004b7c:	d1f3      	bne.n	8004b66 <SD_FindSCR+0x22>
  config.DataLength    = 8;
 8004b7e:	2008      	movs	r0, #8
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004b80:	f04f 31ff 	mov.w	r1, #4294967295
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004b84:	2202      	movs	r2, #2
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004b86:	2301      	movs	r3, #1
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8004b88:	2730      	movs	r7, #48	; 0x30
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004b8a:	9102      	str	r1, [sp, #8]
  config.DataLength    = 8;
 8004b8c:	9003      	str	r0, [sp, #12]
  SDMMC_ConfigData(hsd->Instance, &config);
 8004b8e:	eb0d 0100 	add.w	r1, sp, r0
 8004b92:	6828      	ldr	r0, [r5, #0]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004b94:	9406      	str	r4, [sp, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004b96:	9205      	str	r2, [sp, #20]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004b98:	9307      	str	r3, [sp, #28]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8004b9a:	9704      	str	r7, [sp, #16]
  SDMMC_ConfigData(hsd->Instance, &config);
 8004b9c:	f001 fbe2 	bl	8006364 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004ba0:	6828      	ldr	r0, [r5, #0]
 8004ba2:	f001 fca3 	bl	80064ec <SDMMC_CmdSendSCR>
  if(errorstate != HAL_OK)
 8004ba6:	4604      	mov	r4, r0
 8004ba8:	2800      	cmp	r0, #0
 8004baa:	d1dc      	bne.n	8004b66 <SD_FindSCR+0x22>
 8004bac:	4681      	mov	r9, r0
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8004bae:	f240 472a 	movw	r7, #1066	; 0x42a
 8004bb2:	e004      	b.n	8004bbe <SD_FindSCR+0x7a>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004bb4:	f7fd f884 	bl	8001cc0 <HAL_GetTick>
 8004bb8:	1b80      	subs	r0, r0, r6
 8004bba:	3001      	adds	r0, #1
 8004bbc:	d015      	beq.n	8004bea <SD_FindSCR+0xa6>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8004bbe:	6828      	ldr	r0, [r5, #0]
 8004bc0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004bc2:	423b      	tst	r3, r7
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8004bc4:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8004bc6:	d10b      	bne.n	8004be0 <SD_FindSCR+0x9c>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8004bc8:	029b      	lsls	r3, r3, #10
 8004bca:	d5f3      	bpl.n	8004bb4 <SD_FindSCR+0x70>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8004bcc:	f001 fbb2 	bl	8006334 <SDMMC_ReadFIFO>
 8004bd0:	ab08      	add	r3, sp, #32
 8004bd2:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8004bd6:	f109 0901 	add.w	r9, r9, #1
 8004bda:	f843 0c20 	str.w	r0, [r3, #-32]
 8004bde:	e7e9      	b.n	8004bb4 <SD_FindSCR+0x70>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004be0:	0719      	lsls	r1, r3, #28
 8004be2:	d505      	bpl.n	8004bf0 <SD_FindSCR+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8004be4:	2408      	movs	r4, #8
 8004be6:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004be8:	e7bd      	b.n	8004b66 <SD_FindSCR+0x22>
      return HAL_SD_ERROR_TIMEOUT;
 8004bea:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004bee:	e7ba      	b.n	8004b66 <SD_FindSCR+0x22>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004bf0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004bf2:	079a      	lsls	r2, r3, #30
 8004bf4:	d502      	bpl.n	8004bfc <SD_FindSCR+0xb8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8004bf6:	2402      	movs	r4, #2
 8004bf8:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004bfa:	e7b4      	b.n	8004b66 <SD_FindSCR+0x22>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004bfc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004bfe:	069b      	lsls	r3, r3, #26
 8004c00:	d502      	bpl.n	8004c08 <SD_FindSCR+0xc4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004c02:	2420      	movs	r4, #32
 8004c04:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8004c06:	e7ae      	b.n	8004b66 <SD_FindSCR+0x22>
 8004c08:	9a00      	ldr	r2, [sp, #0]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004c0a:	f240 51ff 	movw	r1, #1535	; 0x5ff
 8004c0e:	9b01      	ldr	r3, [sp, #4]
 8004c10:	ba12      	rev	r2, r2
 8004c12:	6381      	str	r1, [r0, #56]	; 0x38
 8004c14:	ba1b      	rev	r3, r3
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004c16:	f8c8 2004 	str.w	r2, [r8, #4]
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004c1a:	f8c8 3000 	str.w	r3, [r8]
  return HAL_SD_ERROR_NONE;
 8004c1e:	e7a2      	b.n	8004b66 <SD_FindSCR+0x22>

08004c20 <HAL_SD_GetCardCSD>:
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8004c20:	6e43      	ldr	r3, [r0, #100]	; 0x64
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8004c22:	0f9a      	lsrs	r2, r3, #30
{
 8004c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8004c28:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8004c2a:	f3c3 6783 	ubfx	r7, r3, #26, #4
  pCSD->Reserved1      = tmp & 0x03;
 8004c2e:	f3c3 6501 	ubfx	r5, r3, #24, #2
  pCSD->TAAC = (uint8_t)tmp;
 8004c32:	f3c3 4407 	ubfx	r4, r3, #16, #8
  pCSD->NSAC = (uint8_t)tmp;
 8004c36:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8004c3a:	b2db      	uxtb	r3, r3
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8004c3c:	704f      	strb	r7, [r1, #1]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8004c3e:	2600      	movs	r6, #0
  pCSD->Reserved1      = tmp & 0x03;
 8004c40:	708d      	strb	r5, [r1, #2]
  pCSD->TAAC = (uint8_t)tmp;
 8004c42:	70cc      	strb	r4, [r1, #3]
  pCSD->NSAC = (uint8_t)tmp;
 8004c44:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8004c46:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8004c48:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8004c4a:	0e1d      	lsrs	r5, r3, #24
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8004c4c:	f3c3 5803 	ubfx	r8, r3, #20, #4
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8004c50:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8004c54:	f3c3 4e03 	ubfx	lr, r3, #16, #4
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8004c58:	012d      	lsls	r5, r5, #4
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8004c5a:	ea4f 1cd2 	mov.w	ip, r2, lsr #7
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8004c5e:	f3c2 1780 	ubfx	r7, r2, #6, #1
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8004c62:	80cd      	strh	r5, [r1, #6]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8004c64:	f3c2 1540 	ubfx	r5, r2, #5, #1
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8004c68:	88cc      	ldrh	r4, [r1, #6]
 8004c6a:	b2a4      	uxth	r4, r4
 8004c6c:	ea44 0408 	orr.w	r4, r4, r8
 8004c70:	80cc      	strh	r4, [r1, #6]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8004c72:	f3c2 1400 	ubfx	r4, r2, #4, #1
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8004c76:	f881 e008 	strb.w	lr, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8004c7a:	f881 c009 	strb.w	ip, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8004c7e:	728f      	strb	r7, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8004c80:	72cd      	strb	r5, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8004c82:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8004c84:	734e      	strb	r6, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8004c86:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004c88:	2c00      	cmp	r4, #0
 8004c8a:	f040 808d 	bne.w	8004da8 <HAL_SD_GetCardCSD+0x188>
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8004c8e:	0292      	lsls	r2, r2, #10
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8004c90:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp) << 2;
 8004c92:	009b      	lsls	r3, r3, #2
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8004c94:	2501      	movs	r5, #1
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8004c96:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8004c9a:	0be6      	lsrs	r6, r4, #15
    pCSD->DeviceSize |= (tmp) << 2;
 8004c9c:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8004ca0:	f3c4 6e02 	ubfx	lr, r4, #24, #3
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8004ca4:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8004ca6:	f006 0606 	and.w	r6, r6, #6
    pCSD->DeviceSize |= (tmp) << 2;
 8004caa:	690a      	ldr	r2, [r1, #16]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8004cac:	f3c4 5742 	ubfx	r7, r4, #21, #3
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8004cb0:	f3c4 6cc2 	ubfx	ip, r4, #27, #3
    pCSD->DeviceSize |= (tmp) << 2;
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	610a      	str	r2, [r1, #16]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8004cb8:	f3c4 4282 	ubfx	r2, r4, #18, #3
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8004cbc:	690b      	ldr	r3, [r1, #16]
 8004cbe:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004cc2:	610b      	str	r3, [r1, #16]
 8004cc4:	f3c4 2307 	ubfx	r3, r4, #8, #8
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8004cc8:	f881 c014 	strb.w	ip, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8004ccc:	f881 e015 	strb.w	lr, [r1, #21]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 8004cd0:	f3c4 3ec0 	ubfx	lr, r4, #15, #1
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8004cd4:	758f      	strb	r7, [r1, #22]
    hsd->SdCard.LogBlockSize = 512;
 8004cd6:	f44f 7700 	mov.w	r7, #512	; 0x200
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8004cda:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8004cdc:	760e      	strb	r6, [r1, #24]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 8004cde:	7e0a      	ldrb	r2, [r1, #24]
 8004ce0:	ea42 020e 	orr.w	r2, r2, lr
 8004ce4:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8004ce6:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8004ce8:	7e0e      	ldrb	r6, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8004cea:	442a      	add	r2, r5
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8004cec:	3602      	adds	r6, #2
 8004cee:	40b2      	lsls	r2, r6
 8004cf0:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8004cf2:	7a0e      	ldrb	r6, [r1, #8]
    hsd->SdCard.LogBlockSize = 512;
 8004cf4:	6607      	str	r7, [r0, #96]	; 0x60
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8004cf6:	40b5      	lsls	r5, r6
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8004cf8:	0a6e      	lsrs	r6, r5, #9
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8004cfa:	6585      	str	r5, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8004cfc:	fb02 f206 	mul.w	r2, r2, r6
 8004d00:	65c2      	str	r2, [r0, #92]	; 0x5c
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8004d02:	005d      	lsls	r5, r3, #1
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8004d04:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8004d08:	f3c4 1ec0 	ubfx	lr, r4, #7, #1
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8004d0c:	f004 037f 	and.w	r3, r4, #127	; 0x7f
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8004d10:	f005 047e 	and.w	r4, r5, #126	; 0x7e
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8004d14:	764a      	strb	r2, [r1, #25]
  pCSD->Reserved3           = 0;
 8004d16:	2500      	movs	r5, #0
  pCSD->Reserved4 = 1;
 8004d18:	2601      	movs	r6, #1
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8004d1a:	768c      	strb	r4, [r1, #26]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8004d1c:	7e8a      	ldrb	r2, [r1, #26]
  return HAL_OK;
 8004d1e:	462f      	mov	r7, r5
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8004d20:	ea42 020e 	orr.w	r2, r2, lr
 8004d24:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8004d26:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8004d28:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8004d2a:	0d9c      	lsrs	r4, r3, #22
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8004d2c:	f3c3 7041 	ubfx	r0, r3, #29, #2
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8004d30:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8004d34:	f3c3 6282 	ubfx	r2, r3, #26, #3
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8004d38:	f004 040c 	and.w	r4, r4, #12
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8004d3c:	f3c3 4900 	ubfx	r9, r3, #16, #1
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8004d40:	f881 e01c 	strb.w	lr, [r1, #28]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8004d44:	f3c3 5e81 	ubfx	lr, r3, #22, #2
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8004d48:	7748      	strb	r0, [r1, #29]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8004d4a:	f3c3 5040 	ubfx	r0, r3, #21, #1
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8004d4e:	778a      	strb	r2, [r1, #30]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8004d50:	f3c3 38c0 	ubfx	r8, r3, #15, #1
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8004d54:	77cc      	strb	r4, [r1, #31]
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8004d56:	f3c3 3c80 	ubfx	ip, r3, #14, #1
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8004d5a:	7fca      	ldrb	r2, [r1, #31]
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8004d5c:	f3c3 3400 	ubfx	r4, r3, #12, #1
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8004d60:	ea42 020e 	orr.w	r2, r2, lr
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8004d64:	f3c3 3e40 	ubfx	lr, r3, #13, #1
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8004d68:	77ca      	strb	r2, [r1, #31]
  pCSD->ECC              = (tmp & 0x03);
 8004d6a:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8004d6e:	f881 0020 	strb.w	r0, [r1, #32]
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8004d72:	f3c3 2081 	ubfx	r0, r3, #10, #2
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8004d76:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->Reserved3           = 0;
 8004d7a:	f881 5021 	strb.w	r5, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8004d7e:	f881 9022 	strb.w	r9, [r1, #34]	; 0x22
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8004d82:	f881 8023 	strb.w	r8, [r1, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8004d86:	f881 c024 	strb.w	ip, [r1, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8004d8a:	f881 e025 	strb.w	lr, [r1, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8004d8e:	f881 4026 	strb.w	r4, [r1, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8004d92:	f881 0027 	strb.w	r0, [r1, #39]	; 0x27
}
 8004d96:	4638      	mov	r0, r7
  pCSD->ECC              = (tmp & 0x03);
 8004d98:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8004d9c:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8004da0:	f881 602a 	strb.w	r6, [r1, #42]	; 0x2a
}
 8004da4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004da8:	2c01      	cmp	r4, #1
 8004daa:	d00e      	beq.n	8004dca <HAL_SD_GetCardCSD+0x1aa>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 8004dac:	6803      	ldr	r3, [r0, #0]
 8004dae:	f240 51ff 	movw	r1, #1535	; 0x5ff
    hsd->State = HAL_SD_STATE_READY;
 8004db2:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 8004db4:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004db6:	6b83      	ldr	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8004db8:	4617      	mov	r7, r2
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dbe:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004dc0:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
}
 8004dc4:	4638      	mov	r0, r7
 8004dc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8004dca:	041a      	lsls	r2, r3, #16
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8004dcc:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8004dce:	f44f 7600 	mov.w	r6, #512	; 0x200
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8004dd2:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8004dd6:	0e27      	lsrs	r7, r4, #24
    pCSD->DeviceSize |= (tmp);
 8004dd8:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8004ddc:	f3c4 2307 	ubfx	r3, r4, #8, #8
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8004de0:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp << 8);
 8004de2:	690a      	ldr	r2, [r1, #16]
 8004de4:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8004de8:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 8004dea:	690a      	ldr	r2, [r1, #16]
 8004dec:	432a      	orrs	r2, r5
 8004dee:	610a      	str	r2, [r1, #16]
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8004df0:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8004df2:	6586      	str	r6, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8004df4:	0292      	lsls	r2, r2, #10
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8004df6:	6606      	str	r6, [r0, #96]	; 0x60
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8004df8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004dfc:	6542      	str	r2, [r0, #84]	; 0x54
 8004dfe:	65c2      	str	r2, [r0, #92]	; 0x5c
 8004e00:	e77f      	b.n	8004d02 <HAL_SD_GetCardCSD+0xe2>
 8004e02:	bf00      	nop

08004e04 <HAL_SD_InitCard>:
{
 8004e04:	b570      	push	{r4, r5, r6, lr}
 8004e06:	b098      	sub	sp, #96	; 0x60
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8004e08:	2500      	movs	r5, #0
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8004e0a:	2176      	movs	r1, #118	; 0x76
{
 8004e0c:	4604      	mov	r4, r0
  SDMMC_Init(hsd->Instance, Init);
 8004e0e:	aa0a      	add	r2, sp, #40	; 0x28
 8004e10:	6806      	ldr	r6, [r0, #0]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8004e12:	950a      	str	r5, [sp, #40]	; 0x28
  SDMMC_Init(hsd->Instance, Init);
 8004e14:	ab07      	add	r3, sp, #28
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004e16:	950b      	str	r5, [sp, #44]	; 0x2c
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8004e18:	910c      	str	r1, [sp, #48]	; 0x30
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8004e1a:	9507      	str	r5, [sp, #28]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8004e1c:	9508      	str	r5, [sp, #32]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004e1e:	9509      	str	r5, [sp, #36]	; 0x24
  SDMMC_Init(hsd->Instance, Init);
 8004e20:	ca07      	ldmia	r2, {r0, r1, r2}
 8004e22:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8004e26:	4630      	mov	r0, r6
 8004e28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e2a:	f001 fa65 	bl	80062f8 <SDMMC_Init>
  __HAL_SD_DISABLE(hsd); 
 8004e2e:	6823      	ldr	r3, [r4, #0]
 8004e30:	685a      	ldr	r2, [r3, #4]
  SDMMC_PowerState_ON(hsd->Instance);
 8004e32:	4618      	mov	r0, r3
  __HAL_SD_DISABLE(hsd); 
 8004e34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e38:	605a      	str	r2, [r3, #4]
  SDMMC_PowerState_ON(hsd->Instance);
 8004e3a:	f001 fa7f 	bl	800633c <SDMMC_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8004e3e:	6822      	ldr	r2, [r4, #0]
  HAL_Delay(2);
 8004e40:	2002      	movs	r0, #2
  __HAL_SD_ENABLE(hsd);
 8004e42:	6853      	ldr	r3, [r2, #4]
 8004e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e48:	6053      	str	r3, [r2, #4]
  HAL_Delay(2);
 8004e4a:	f7fc ff3f 	bl	8001ccc <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004e4e:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0;
 8004e50:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004e52:	f001 fabf 	bl	80063d4 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e56:	4605      	mov	r5, r0
 8004e58:	b138      	cbz	r0, 8004e6a <HAL_SD_InitCard+0x66>
    hsd->State = HAL_SD_STATE_READY;
 8004e5a:	2001      	movs	r0, #1
 8004e5c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004e60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004e62:	431d      	orrs	r5, r3
 8004e64:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8004e66:	b018      	add	sp, #96	; 0x60
 8004e68:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004e6a:	6820      	ldr	r0, [r4, #0]
 8004e6c:	f001 fade 	bl	800642c <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e70:	b360      	cbz	r0, 8004ecc <HAL_SD_InitCard+0xc8>
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8004e72:	f64f 76ff 	movw	r6, #65535	; 0xffff
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004e76:	64a5      	str	r5, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8004e78:	9b06      	ldr	r3, [sp, #24]
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004e7a:	2100      	movs	r1, #0
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8004e7c:	1c5a      	adds	r2, r3, #1
 8004e7e:	42b3      	cmp	r3, r6
 8004e80:	9206      	str	r2, [sp, #24]
 8004e82:	d069      	beq.n	8004f58 <HAL_SD_InitCard+0x154>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004e84:	6820      	ldr	r0, [r4, #0]
 8004e86:	f001 fb0d 	bl	80064a4 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8004e8a:	2800      	cmp	r0, #0
 8004e8c:	d167      	bne.n	8004f5e <HAL_SD_InitCard+0x15a>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8004e8e:	4601      	mov	r1, r0
 8004e90:	6820      	ldr	r0, [r4, #0]
 8004e92:	f001 fb19 	bl	80064c8 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8004e96:	2800      	cmp	r0, #0
 8004e98:	d161      	bne.n	8004f5e <HAL_SD_InitCard+0x15a>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004e9a:	4601      	mov	r1, r0
 8004e9c:	6820      	ldr	r0, [r4, #0]
 8004e9e:	f001 fa57 	bl	8006350 <SDMMC_GetResponse>
    while(validvoltage == 0)
 8004ea2:	2800      	cmp	r0, #0
 8004ea4:	dae8      	bge.n	8004e78 <HAL_SD_InitCard+0x74>
    hsd->SdCard.CardType = CARD_SDSC;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	6463      	str	r3, [r4, #68]	; 0x44
  uint16_t sd_rca = 1;
 8004eaa:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8004eac:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1;
 8004eae:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8004eb2:	f001 fa49 	bl	8006348 <SDMMC_GetPowerState>
 8004eb6:	bb60      	cbnz	r0, 8004f12 <HAL_SD_InitCard+0x10e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004eb8:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 8004ebc:	2001      	movs	r0, #1
 8004ebe:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004ec2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ec4:	432b      	orrs	r3, r5
 8004ec6:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8004ec8:	b018      	add	sp, #96	; 0x60
 8004eca:	bd70      	pop	{r4, r5, r6, pc}
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004ecc:	2301      	movs	r3, #1
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8004ece:	f64f 76ff 	movw	r6, #65535	; 0xffff
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004ed2:	64a3      	str	r3, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8004ed4:	9b06      	ldr	r3, [sp, #24]
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004ed6:	2100      	movs	r1, #0
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8004ed8:	1c5a      	adds	r2, r3, #1
 8004eda:	42b3      	cmp	r3, r6
 8004edc:	9206      	str	r2, [sp, #24]
 8004ede:	d03b      	beq.n	8004f58 <HAL_SD_InitCard+0x154>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004ee0:	6820      	ldr	r0, [r4, #0]
 8004ee2:	f001 fadf 	bl	80064a4 <SDMMC_CmdAppCommand>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8004ee6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      if(errorstate != HAL_SD_ERROR_NONE)
 8004eea:	4605      	mov	r5, r0
 8004eec:	2800      	cmp	r0, #0
 8004eee:	d1b4      	bne.n	8004e5a <HAL_SD_InitCard+0x56>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8004ef0:	6820      	ldr	r0, [r4, #0]
 8004ef2:	f001 fae9 	bl	80064c8 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8004ef6:	4605      	mov	r5, r0
 8004ef8:	2800      	cmp	r0, #0
 8004efa:	d1ae      	bne.n	8004e5a <HAL_SD_InitCard+0x56>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004efc:	4601      	mov	r1, r0
 8004efe:	6820      	ldr	r0, [r4, #0]
 8004f00:	f001 fa26 	bl	8006350 <SDMMC_GetResponse>
    while(validvoltage == 0)
 8004f04:	2800      	cmp	r0, #0
 8004f06:	dae5      	bge.n	8004ed4 <HAL_SD_InitCard+0xd0>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004f08:	0043      	lsls	r3, r0, #1
 8004f0a:	d5cc      	bpl.n	8004ea6 <HAL_SD_InitCard+0xa2>
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	6463      	str	r3, [r4, #68]	; 0x44
 8004f10:	e7cb      	b.n	8004eaa <HAL_SD_InitCard+0xa6>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004f12:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004f14:	2b03      	cmp	r3, #3
 8004f16:	d125      	bne.n	8004f64 <HAL_SD_InitCard+0x160>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8004f18:	2104      	movs	r1, #4
 8004f1a:	6820      	ldr	r0, [r4, #0]
 8004f1c:	f001 fa18 	bl	8006350 <SDMMC_GetResponse>
  HAL_SD_GetCardCSD(hsd, &CSD);
 8004f20:	a90d      	add	r1, sp, #52	; 0x34
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8004f22:	0d03      	lsrs	r3, r0, #20
  HAL_SD_GetCardCSD(hsd, &CSD);
 8004f24:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8004f26:	64e3      	str	r3, [r4, #76]	; 0x4c
  HAL_SD_GetCardCSD(hsd, &CSD);
 8004f28:	f7ff fe7a 	bl	8004c20 <HAL_SD_GetCardCSD>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 8004f2c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004f2e:	2300      	movs	r3, #0
 8004f30:	6820      	ldr	r0, [r4, #0]
 8004f32:	0412      	lsls	r2, r2, #16
 8004f34:	f001 fa3c 	bl	80063b0 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f38:	4605      	mov	r5, r0
 8004f3a:	2800      	cmp	r0, #0
 8004f3c:	d1be      	bne.n	8004ebc <HAL_SD_InitCard+0xb8>
  SDMMC_Init(hsd->Instance, hsd->Init);
 8004f3e:	1d23      	adds	r3, r4, #4
 8004f40:	f854 6b10 	ldr.w	r6, [r4], #16
 8004f44:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004f48:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8004f4c:	4630      	mov	r0, r6
 8004f4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f50:	f001 f9d2 	bl	80062f8 <SDMMC_Init>
  return HAL_OK;
 8004f54:	4628      	mov	r0, r5
 8004f56:	e786      	b.n	8004e66 <HAL_SD_InitCard+0x62>
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004f58:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8004f5c:	e77d      	b.n	8004e5a <HAL_SD_InitCard+0x56>
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004f5e:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8004f62:	e77a      	b.n	8004e5a <HAL_SD_InitCard+0x56>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004f64:	6820      	ldr	r0, [r4, #0]
 8004f66:	f001 fad3 	bl	8006510 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f6a:	4605      	mov	r5, r0
 8004f6c:	2800      	cmp	r0, #0
 8004f6e:	d1a5      	bne.n	8004ebc <HAL_SD_InitCard+0xb8>
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004f70:	4601      	mov	r1, r0
 8004f72:	6820      	ldr	r0, [r4, #0]
 8004f74:	f001 f9ec 	bl	8006350 <SDMMC_GetResponse>
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004f78:	2104      	movs	r1, #4
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004f7a:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004f7c:	6820      	ldr	r0, [r4, #0]
 8004f7e:	f001 f9e7 	bl	8006350 <SDMMC_GetResponse>
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004f82:	2108      	movs	r1, #8
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004f84:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004f86:	6820      	ldr	r0, [r4, #0]
 8004f88:	f001 f9e2 	bl	8006350 <SDMMC_GetResponse>
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004f8c:	210c      	movs	r1, #12
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004f8e:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004f90:	6820      	ldr	r0, [r4, #0]
 8004f92:	f001 f9dd 	bl	8006350 <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004f96:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004f98:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004f9c:	2b03      	cmp	r3, #3
 8004f9e:	d0bb      	beq.n	8004f18 <HAL_SD_InitCard+0x114>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004fa0:	f10d 0116 	add.w	r1, sp, #22
 8004fa4:	6820      	ldr	r0, [r4, #0]
 8004fa6:	f001 fad3 	bl	8006550 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004faa:	4605      	mov	r5, r0
 8004fac:	2800      	cmp	r0, #0
 8004fae:	d185      	bne.n	8004ebc <HAL_SD_InitCard+0xb8>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004fb0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004fb2:	2b03      	cmp	r3, #3
 8004fb4:	d0b0      	beq.n	8004f18 <HAL_SD_InitCard+0x114>
    hsd->SdCard.RelCardAdd = sd_rca;
 8004fb6:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004fba:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
 8004fbc:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004fbe:	0409      	lsls	r1, r1, #16
 8004fc0:	f001 fab6 	bl	8006530 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004fc4:	4605      	mov	r5, r0
 8004fc6:	2800      	cmp	r0, #0
 8004fc8:	f47f af78 	bne.w	8004ebc <HAL_SD_InitCard+0xb8>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004fcc:	4601      	mov	r1, r0
 8004fce:	6820      	ldr	r0, [r4, #0]
 8004fd0:	f001 f9be 	bl	8006350 <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004fd4:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004fd6:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004fd8:	6820      	ldr	r0, [r4, #0]
 8004fda:	f001 f9b9 	bl	8006350 <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004fde:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004fe0:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004fe2:	6820      	ldr	r0, [r4, #0]
 8004fe4:	f001 f9b4 	bl	8006350 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004fe8:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004fea:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004fec:	6820      	ldr	r0, [r4, #0]
 8004fee:	f001 f9af 	bl	8006350 <SDMMC_GetResponse>
 8004ff2:	6720      	str	r0, [r4, #112]	; 0x70
 8004ff4:	e790      	b.n	8004f18 <HAL_SD_InitCard+0x114>
 8004ff6:	bf00      	nop

08004ff8 <HAL_SD_Init>:
  if(hsd == NULL)
 8004ff8:	b1c0      	cbz	r0, 800502c <HAL_SD_Init+0x34>
  if(hsd->State == HAL_SD_STATE_RESET)
 8004ffa:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
{
 8004ffe:	b510      	push	{r4, lr}
  if(hsd->State == HAL_SD_STATE_RESET)
 8005000:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005004:	4604      	mov	r4, r0
 8005006:	b16b      	cbz	r3, 8005024 <HAL_SD_Init+0x2c>
  hsd->State = HAL_SD_STATE_BUSY;
 8005008:	2303      	movs	r3, #3
  HAL_SD_InitCard(hsd);
 800500a:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 800500c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_InitCard(hsd);
 8005010:	f7ff fef8 	bl	8004e04 <HAL_SD_InitCard>
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8005014:	2300      	movs	r3, #0
  hsd->State = HAL_SD_STATE_READY;
 8005016:	2201      	movs	r2, #1
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8005018:	63a3      	str	r3, [r4, #56]	; 0x38
  return HAL_OK;
 800501a:	4618      	mov	r0, r3
  hsd->Context = SD_CONTEXT_NONE;
 800501c:	6323      	str	r3, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 800501e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  return HAL_OK;
 8005022:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 8005024:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8005026:	f7fc fb31 	bl	800168c <HAL_SD_MspInit>
 800502a:	e7ed      	b.n	8005008 <HAL_SD_Init+0x10>
    return HAL_ERROR;
 800502c:	2001      	movs	r0, #1
 800502e:	4770      	bx	lr

08005030 <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 8005030:	2203      	movs	r2, #3
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005032:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005034:	4293      	cmp	r3, r2
{
 8005036:	b570      	push	{r4, r5, r6, lr}
 8005038:	4604      	mov	r4, r0
 800503a:	b08a      	sub	sp, #40	; 0x28
 800503c:	460e      	mov	r6, r1
  hsd->State = HAL_SD_STATE_BUSY;
 800503e:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005042:	d017      	beq.n	8005074 <HAL_SD_ConfigWideBusOperation+0x44>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8005044:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8005048:	d014      	beq.n	8005074 <HAL_SD_ConfigWideBusOperation+0x44>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800504a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800504e:	d034      	beq.n	80050ba <HAL_SD_ConfigWideBusOperation+0x8a>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8005050:	2900      	cmp	r1, #0
 8005052:	d040      	beq.n	80050d6 <HAL_SD_ConfigWideBusOperation+0xa6>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005054:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005056:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800505a:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800505c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800505e:	b185      	cbz	r5, 8005082 <HAL_SD_ConfigWideBusOperation+0x52>
    hsd->State = HAL_SD_STATE_READY;
 8005060:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005062:	6822      	ldr	r2, [r4, #0]
 8005064:	f240 51ff 	movw	r1, #1535	; 0x5ff
    return HAL_ERROR;
 8005068:	4618      	mov	r0, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800506a:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800506c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8005070:	b00a      	add	sp, #40	; 0x28
 8005072:	bd70      	pop	{r4, r5, r6, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005074:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005076:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800507a:	63a3      	str	r3, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800507c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800507e:	2d00      	cmp	r5, #0
 8005080:	d1ee      	bne.n	8005060 <HAL_SD_ConfigWideBusOperation+0x30>
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005082:	69a2      	ldr	r2, [r4, #24]
    SDMMC_Init(hsd->Instance, Init);
 8005084:	ab04      	add	r3, sp, #16
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005086:	6961      	ldr	r1, [r4, #20]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005088:	9209      	str	r2, [sp, #36]	; 0x24
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800508a:	6862      	ldr	r2, [r4, #4]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800508c:	9108      	str	r1, [sp, #32]
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800508e:	9204      	str	r2, [sp, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005090:	68e2      	ldr	r2, [r4, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005092:	68a1      	ldr	r1, [r4, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005094:	9206      	str	r2, [sp, #24]
    SDMMC_Init(hsd->Instance, Init);
 8005096:	aa0a      	add	r2, sp, #40	; 0x28
    Init.BusWide             = WideMode;
 8005098:	9607      	str	r6, [sp, #28]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800509a:	9105      	str	r1, [sp, #20]
    SDMMC_Init(hsd->Instance, Init);
 800509c:	6826      	ldr	r6, [r4, #0]
 800509e:	e912 0007 	ldmdb	r2, {r0, r1, r2}
 80050a2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80050a6:	4630      	mov	r0, r6
 80050a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050aa:	f001 f925 	bl	80062f8 <SDMMC_Init>
  return HAL_OK;
 80050ae:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 80050b0:	2301      	movs	r3, #1
 80050b2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80050b6:	b00a      	add	sp, #40	; 0x28
 80050b8:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t scr[2] = {0, 0};
 80050ba:	2300      	movs	r3, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80050bc:	6800      	ldr	r0, [r0, #0]
 80050be:	4619      	mov	r1, r3
  uint32_t scr[2] = {0, 0};
 80050c0:	9304      	str	r3, [sp, #16]
 80050c2:	9305      	str	r3, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80050c4:	f001 f944 	bl	8006350 <SDMMC_GetResponse>
 80050c8:	0180      	lsls	r0, r0, #6
 80050ca:	d51d      	bpl.n	8005108 <HAL_SD_ConfigWideBusOperation+0xd8>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80050cc:	4630      	mov	r0, r6
      hsd->ErrorCode |= errorstate;
 80050ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80050d0:	4318      	orrs	r0, r3
 80050d2:	63a0      	str	r0, [r4, #56]	; 0x38
 80050d4:	e7c2      	b.n	800505c <HAL_SD_ConfigWideBusOperation+0x2c>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80050d6:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 80050d8:	9104      	str	r1, [sp, #16]
 80050da:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80050dc:	f001 f938 	bl	8006350 <SDMMC_GetResponse>
 80050e0:	0182      	lsls	r2, r0, #6
 80050e2:	d505      	bpl.n	80050f0 <HAL_SD_ConfigWideBusOperation+0xc0>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80050e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
      hsd->ErrorCode |= errorstate;
 80050e8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80050ea:	4308      	orrs	r0, r1
 80050ec:	63a0      	str	r0, [r4, #56]	; 0x38
 80050ee:	e7b5      	b.n	800505c <HAL_SD_ConfigWideBusOperation+0x2c>
  errorstate = SD_FindSCR(hsd, scr);
 80050f0:	a904      	add	r1, sp, #16
 80050f2:	4620      	mov	r0, r4
 80050f4:	f7ff fd26 	bl	8004b44 <SD_FindSCR>
  if(errorstate != HAL_OK)
 80050f8:	2800      	cmp	r0, #0
 80050fa:	d1f5      	bne.n	80050e8 <HAL_SD_ConfigWideBusOperation+0xb8>
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80050fc:	9b05      	ldr	r3, [sp, #20]
 80050fe:	03db      	lsls	r3, r3, #15
 8005100:	d40e      	bmi.n	8005120 <HAL_SD_ConfigWideBusOperation+0xf0>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005102:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005106:	e7ef      	b.n	80050e8 <HAL_SD_ConfigWideBusOperation+0xb8>
  errorstate = SD_FindSCR(hsd, scr);
 8005108:	a904      	add	r1, sp, #16
 800510a:	4620      	mov	r0, r4
 800510c:	f7ff fd1a 	bl	8004b44 <SD_FindSCR>
  if(errorstate != HAL_OK)
 8005110:	2800      	cmp	r0, #0
 8005112:	d1dc      	bne.n	80050ce <HAL_SD_ConfigWideBusOperation+0x9e>
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005114:	9b05      	ldr	r3, [sp, #20]
 8005116:	0359      	lsls	r1, r3, #13
 8005118:	d40e      	bmi.n	8005138 <HAL_SD_ConfigWideBusOperation+0x108>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800511a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800511e:	e7d6      	b.n	80050ce <HAL_SD_ConfigWideBusOperation+0x9e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8005120:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005122:	6820      	ldr	r0, [r4, #0]
 8005124:	0409      	lsls	r1, r1, #16
 8005126:	f001 f9bd 	bl	80064a4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 800512a:	2800      	cmp	r0, #0
 800512c:	d1dc      	bne.n	80050e8 <HAL_SD_ConfigWideBusOperation+0xb8>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 800512e:	4601      	mov	r1, r0
 8005130:	6820      	ldr	r0, [r4, #0]
 8005132:	f001 fa79 	bl	8006628 <SDMMC_CmdBusWidth>
 8005136:	e7d7      	b.n	80050e8 <HAL_SD_ConfigWideBusOperation+0xb8>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8005138:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800513a:	6820      	ldr	r0, [r4, #0]
 800513c:	0409      	lsls	r1, r1, #16
 800513e:	f001 f9b1 	bl	80064a4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 8005142:	2800      	cmp	r0, #0
 8005144:	d1c3      	bne.n	80050ce <HAL_SD_ConfigWideBusOperation+0x9e>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 8005146:	2102      	movs	r1, #2
 8005148:	6820      	ldr	r0, [r4, #0]
 800514a:	f001 fa6d 	bl	8006628 <SDMMC_CmdBusWidth>
 800514e:	e7be      	b.n	80050ce <HAL_SD_ConfigWideBusOperation+0x9e>

08005150 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8005150:	b1e8      	cbz	r0, 800518e <HAL_SDRAM_Init+0x3e>
{   
 8005152:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005154:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005158:	4604      	mov	r4, r0
 800515a:	460d      	mov	r5, r1
 800515c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005160:	b183      	cbz	r3, 8005184 <HAL_SDRAM_Init+0x34>
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005162:	2302      	movs	r3, #2
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005164:	1d21      	adds	r1, r4, #4
 8005166:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005168:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800516c:	f000 ff22 	bl	8005fb4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8005170:	4629      	mov	r1, r5
 8005172:	e894 0005 	ldmia.w	r4, {r0, r2}
 8005176:	f000 ff59 	bl	800602c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800517a:	2301      	movs	r3, #1
  
  return HAL_OK;
 800517c:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 800517e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8005182:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8005184:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8005188:	f7fc fc3c 	bl	8001a04 <HAL_SDRAM_MspInit>
 800518c:	e7e9      	b.n	8005162 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 800518e:	2001      	movs	r0, #1
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop

08005194 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005194:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005196:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d101      	bne.n	80051a4 <HAL_SDRAM_SendCommand+0x10>
  {
    return HAL_BUSY;
 80051a0:	4618      	mov	r0, r3
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
}
 80051a2:	bd38      	pop	{r3, r4, r5, pc}
 80051a4:	4604      	mov	r4, r0
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80051a6:	2302      	movs	r3, #2
 80051a8:	460d      	mov	r5, r1
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80051aa:	6800      	ldr	r0, [r0, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80051ac:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80051b0:	f000 ff8a 	bl	80060c8 <FMC_SDRAM_SendCommand>
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80051b4:	682b      	ldr	r3, [r5, #0]
  return HAL_OK;  
 80051b6:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80051b8:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80051ba:	bf0c      	ite	eq
 80051bc:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
 80051be:	2301      	movne	r3, #1
 80051c0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80051c4:	bd38      	pop	{r3, r4, r5, pc}
 80051c6:	bf00      	nop

080051c8 <HAL_SDRAM_ProgramRefreshRate>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80051c8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d101      	bne.n	80051d6 <HAL_SDRAM_ProgramRefreshRate+0xe>
  {
    return HAL_BUSY;
 80051d2:	4618      	mov	r0, r3
 80051d4:	4770      	bx	lr
{
 80051d6:	b510      	push	{r4, lr}
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80051d8:	2302      	movs	r3, #2
 80051da:	4604      	mov	r4, r0
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80051dc:	6800      	ldr	r0, [r0, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80051de:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80051e2:	f000 ff87 	bl	80060f4 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80051e6:	2301      	movs	r3, #1
  
  return HAL_OK;   
 80051e8:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 80051ea:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;   
 80051ee:	bd10      	pop	{r4, pc}

080051f0 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051f0:	6803      	ldr	r3, [r0, #0]
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
      
  /* Return function status */
  return HAL_OK;
}
 80051f2:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051f4:	68da      	ldr	r2, [r3, #12]
 80051f6:	f042 0201 	orr.w	r2, r2, #1
 80051fa:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	f042 0201 	orr.w	r2, r2, #1
 8005202:	601a      	str	r2, [r3, #0]
}
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop

08005208 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8005208:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800520c:	2b01      	cmp	r3, #1
 800520e:	d03f      	beq.n	8005290 <HAL_TIM_ConfigClockSource+0x88>
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005210:	6803      	ldr	r3, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005212:	4a5e      	ldr	r2, [pc, #376]	; (800538c <HAL_TIM_ConfigClockSource+0x184>)
{
 8005214:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8005216:	2402      	movs	r4, #2
  __HAL_LOCK(htim);
 8005218:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800521a:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 800521e:	680c      	ldr	r4, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8005220:	689e      	ldr	r6, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8005222:	2c40      	cmp	r4, #64	; 0x40
  __HAL_LOCK(htim);
 8005224:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005228:	ea02 0206 	and.w	r2, r2, r6
  htim->Instance->SMCR = tmpsmcr;
 800522c:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800522e:	d076      	beq.n	800531e <HAL_TIM_ConfigClockSource+0x116>
 8005230:	d918      	bls.n	8005264 <HAL_TIM_ConfigClockSource+0x5c>
 8005232:	2c70      	cmp	r4, #112	; 0x70
 8005234:	d061      	beq.n	80052fa <HAL_TIM_ConfigClockSource+0xf2>
 8005236:	d92e      	bls.n	8005296 <HAL_TIM_ConfigClockSource+0x8e>
 8005238:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800523c:	d058      	beq.n	80052f0 <HAL_TIM_ConfigClockSource+0xe8>
 800523e:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8005242:	d11c      	bne.n	800527e <HAL_TIM_ConfigClockSource+0x76>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8005244:	688a      	ldr	r2, [r1, #8]
 8005246:	684d      	ldr	r5, [r1, #4]
 8005248:	68cc      	ldr	r4, [r1, #12]
 800524a:	432a      	orrs	r2, r5
  tmpsmcr = TIMx->SMCR;
 800524c:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800524e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005252:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8005256:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005258:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800525a:	689a      	ldr	r2, [r3, #8]
 800525c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005260:	609a      	str	r2, [r3, #8]
    break;
 8005262:	e00c      	b.n	800527e <HAL_TIM_ConfigClockSource+0x76>
  switch (sClockSourceConfig->ClockSource)
 8005264:	2c10      	cmp	r4, #16
 8005266:	d033      	beq.n	80052d0 <HAL_TIM_ConfigClockSource+0xc8>
 8005268:	d939      	bls.n	80052de <HAL_TIM_ConfigClockSource+0xd6>
 800526a:	2c20      	cmp	r4, #32
 800526c:	d06f      	beq.n	800534e <HAL_TIM_ConfigClockSource+0x146>
 800526e:	2c30      	cmp	r4, #48	; 0x30
 8005270:	d105      	bne.n	800527e <HAL_TIM_ConfigClockSource+0x76>
   tmpsmcr = TIMx->SMCR;
 8005272:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8005274:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8005278:	f042 0237 	orr.w	r2, r2, #55	; 0x37
   TIMx->SMCR = tmpsmcr;
 800527c:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 800527e:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8005280:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8005282:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8005286:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 800528a:	4610      	mov	r0, r2
 800528c:	bcf0      	pop	{r4, r5, r6, r7}
 800528e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005290:	2302      	movs	r3, #2
}
 8005292:	4618      	mov	r0, r3
 8005294:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8005296:	2c50      	cmp	r4, #80	; 0x50
 8005298:	d060      	beq.n	800535c <HAL_TIM_ConfigClockSource+0x154>
 800529a:	2c60      	cmp	r4, #96	; 0x60
 800529c:	d1ef      	bne.n	800527e <HAL_TIM_ConfigClockSource+0x76>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800529e:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80052a0:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052a2:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80052a6:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052a8:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052aa:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80052ac:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052ae:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12);
 80052b6:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4);
 80052ba:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80052be:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80052c0:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80052c2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80052c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80052c8:	f042 0267 	orr.w	r2, r2, #103	; 0x67
   TIMx->SMCR = tmpsmcr;
 80052cc:	609a      	str	r2, [r3, #8]
 80052ce:	e7d6      	b.n	800527e <HAL_TIM_ConfigClockSource+0x76>
   tmpsmcr = TIMx->SMCR;
 80052d0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80052d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80052d6:	f042 0217 	orr.w	r2, r2, #23
   TIMx->SMCR = tmpsmcr;
 80052da:	609a      	str	r2, [r3, #8]
 80052dc:	e7cf      	b.n	800527e <HAL_TIM_ConfigClockSource+0x76>
  switch (sClockSourceConfig->ClockSource)
 80052de:	2c00      	cmp	r4, #0
 80052e0:	d1cd      	bne.n	800527e <HAL_TIM_ConfigClockSource+0x76>
   tmpsmcr = TIMx->SMCR;
 80052e2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80052e4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80052e8:	f042 0207 	orr.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 80052ec:	609a      	str	r2, [r3, #8]
 80052ee:	e7c6      	b.n	800527e <HAL_TIM_ConfigClockSource+0x76>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80052f0:	6899      	ldr	r1, [r3, #8]
 80052f2:	4a27      	ldr	r2, [pc, #156]	; (8005390 <HAL_TIM_ConfigClockSource+0x188>)
 80052f4:	400a      	ands	r2, r1
 80052f6:	609a      	str	r2, [r3, #8]
    break;
 80052f8:	e7c1      	b.n	800527e <HAL_TIM_ConfigClockSource+0x76>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80052fa:	684c      	ldr	r4, [r1, #4]
 80052fc:	688a      	ldr	r2, [r1, #8]
 80052fe:	68cd      	ldr	r5, [r1, #12]
 8005300:	4322      	orrs	r2, r4
  tmpsmcr = TIMx->SMCR;
 8005302:	689c      	ldr	r4, [r3, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005304:	4923      	ldr	r1, [pc, #140]	; (8005394 <HAL_TIM_ConfigClockSource+0x18c>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8005306:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800530a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800530e:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8005310:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8005312:	689a      	ldr	r2, [r3, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005314:	4011      	ands	r1, r2
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005316:	f041 0177 	orr.w	r1, r1, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800531a:	6099      	str	r1, [r3, #8]
    break;
 800531c:	e7af      	b.n	800527e <HAL_TIM_ConfigClockSource+0x76>
  tmpccer = TIMx->CCER;
 800531e:	6a1e      	ldr	r6, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005320:	6a1d      	ldr	r5, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8005322:	684c      	ldr	r4, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005324:	f026 060a 	bic.w	r6, r6, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005328:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800532c:	68cf      	ldr	r7, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 800532e:	4334      	orrs	r4, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005330:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8005332:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005334:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8005338:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800533c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800533e:	621c      	str	r4, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8005340:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8005342:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8005346:	f042 0247 	orr.w	r2, r2, #71	; 0x47
   TIMx->SMCR = tmpsmcr;
 800534a:	609a      	str	r2, [r3, #8]
 800534c:	e797      	b.n	800527e <HAL_TIM_ConfigClockSource+0x76>
   tmpsmcr = TIMx->SMCR;
 800534e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8005350:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8005354:	f042 0227 	orr.w	r2, r2, #39	; 0x27
   TIMx->SMCR = tmpsmcr;
 8005358:	609a      	str	r2, [r3, #8]
 800535a:	e790      	b.n	800527e <HAL_TIM_ConfigClockSource+0x76>
  tmpccer = TIMx->CCER;
 800535c:	6a1e      	ldr	r6, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800535e:	6a1d      	ldr	r5, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8005360:	684c      	ldr	r4, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005362:	f026 060a 	bic.w	r6, r6, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005366:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800536a:	68cf      	ldr	r7, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 800536c:	4334      	orrs	r4, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800536e:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8005370:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005372:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8005376:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800537a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800537c:	621c      	str	r4, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800537e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8005380:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8005384:	f042 0257 	orr.w	r2, r2, #87	; 0x57
   TIMx->SMCR = tmpsmcr;
 8005388:	609a      	str	r2, [r3, #8]
 800538a:	e778      	b.n	800527e <HAL_TIM_ConfigClockSource+0x76>
 800538c:	fffe0088 	.word	0xfffe0088
 8005390:	fffefff8 	.word	0xfffefff8
 8005394:	fffeff88 	.word	0xfffeff88

08005398 <HAL_TIM_OC_DelayElapsedCallback>:
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop

0800539c <HAL_TIM_IC_CaptureCallback>:
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop

080053a0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop

080053a4 <HAL_TIM_TriggerCallback>:
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop

080053a8 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053a8:	6803      	ldr	r3, [r0, #0]
 80053aa:	691a      	ldr	r2, [r3, #16]
 80053ac:	0791      	lsls	r1, r2, #30
{
 80053ae:	b510      	push	{r4, lr}
 80053b0:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053b2:	d502      	bpl.n	80053ba <HAL_TIM_IRQHandler+0x12>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80053b4:	68da      	ldr	r2, [r3, #12]
 80053b6:	0792      	lsls	r2, r2, #30
 80053b8:	d465      	bmi.n	8005486 <HAL_TIM_IRQHandler+0xde>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053ba:	691a      	ldr	r2, [r3, #16]
 80053bc:	0752      	lsls	r2, r2, #29
 80053be:	d502      	bpl.n	80053c6 <HAL_TIM_IRQHandler+0x1e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80053c0:	68da      	ldr	r2, [r3, #12]
 80053c2:	0750      	lsls	r0, r2, #29
 80053c4:	d44c      	bmi.n	8005460 <HAL_TIM_IRQHandler+0xb8>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053c6:	691a      	ldr	r2, [r3, #16]
 80053c8:	0711      	lsls	r1, r2, #28
 80053ca:	d502      	bpl.n	80053d2 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80053cc:	68da      	ldr	r2, [r3, #12]
 80053ce:	0712      	lsls	r2, r2, #28
 80053d0:	d434      	bmi.n	800543c <HAL_TIM_IRQHandler+0x94>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053d2:	691a      	ldr	r2, [r3, #16]
 80053d4:	06d0      	lsls	r0, r2, #27
 80053d6:	d502      	bpl.n	80053de <HAL_TIM_IRQHandler+0x36>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80053d8:	68da      	ldr	r2, [r3, #12]
 80053da:	06d1      	lsls	r1, r2, #27
 80053dc:	d41e      	bmi.n	800541c <HAL_TIM_IRQHandler+0x74>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053de:	691a      	ldr	r2, [r3, #16]
 80053e0:	07d2      	lsls	r2, r2, #31
 80053e2:	d502      	bpl.n	80053ea <HAL_TIM_IRQHandler+0x42>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80053e4:	68da      	ldr	r2, [r3, #12]
 80053e6:	07d0      	lsls	r0, r2, #31
 80053e8:	d46b      	bmi.n	80054c2 <HAL_TIM_IRQHandler+0x11a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053ea:	691a      	ldr	r2, [r3, #16]
 80053ec:	0611      	lsls	r1, r2, #24
 80053ee:	d502      	bpl.n	80053f6 <HAL_TIM_IRQHandler+0x4e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80053f0:	68da      	ldr	r2, [r3, #12]
 80053f2:	0612      	lsls	r2, r2, #24
 80053f4:	d46d      	bmi.n	80054d2 <HAL_TIM_IRQHandler+0x12a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80053f6:	691a      	ldr	r2, [r3, #16]
 80053f8:	05d0      	lsls	r0, r2, #23
 80053fa:	d502      	bpl.n	8005402 <HAL_TIM_IRQHandler+0x5a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80053fc:	68da      	ldr	r2, [r3, #12]
 80053fe:	0611      	lsls	r1, r2, #24
 8005400:	d46f      	bmi.n	80054e2 <HAL_TIM_IRQHandler+0x13a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005402:	691a      	ldr	r2, [r3, #16]
 8005404:	0652      	lsls	r2, r2, #25
 8005406:	d502      	bpl.n	800540e <HAL_TIM_IRQHandler+0x66>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8005408:	68da      	ldr	r2, [r3, #12]
 800540a:	0650      	lsls	r0, r2, #25
 800540c:	d451      	bmi.n	80054b2 <HAL_TIM_IRQHandler+0x10a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800540e:	691a      	ldr	r2, [r3, #16]
 8005410:	0691      	lsls	r1, r2, #26
 8005412:	d502      	bpl.n	800541a <HAL_TIM_IRQHandler+0x72>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8005414:	68da      	ldr	r2, [r3, #12]
 8005416:	0692      	lsls	r2, r2, #26
 8005418:	d443      	bmi.n	80054a2 <HAL_TIM_IRQHandler+0xfa>
 800541a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800541c:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005420:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8005422:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005424:	6119      	str	r1, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8005426:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005428:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800542a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800542e:	d06c      	beq.n	800550a <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_IC_CaptureCallback(htim);
 8005430:	f7ff ffb4 	bl	800539c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005434:	2200      	movs	r2, #0
 8005436:	6823      	ldr	r3, [r4, #0]
 8005438:	7722      	strb	r2, [r4, #28]
 800543a:	e7d0      	b.n	80053de <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800543c:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005440:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8005442:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005444:	6119      	str	r1, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8005446:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005448:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 800544a:	079b      	lsls	r3, r3, #30
 800544c:	d15a      	bne.n	8005504 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800544e:	f7ff ffa3 	bl	8005398 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005452:	4620      	mov	r0, r4
 8005454:	f7ff ffa4 	bl	80053a0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005458:	2200      	movs	r2, #0
 800545a:	6823      	ldr	r3, [r4, #0]
 800545c:	7722      	strb	r2, [r4, #28]
 800545e:	e7b8      	b.n	80053d2 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005460:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005464:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8005466:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005468:	6119      	str	r1, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 800546a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800546c:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 800546e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005472:	d144      	bne.n	80054fe <HAL_TIM_IRQHandler+0x156>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005474:	f7ff ff90 	bl	8005398 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005478:	4620      	mov	r0, r4
 800547a:	f7ff ff91 	bl	80053a0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800547e:	2200      	movs	r2, #0
 8005480:	6823      	ldr	r3, [r4, #0]
 8005482:	7722      	strb	r2, [r4, #28]
 8005484:	e79f      	b.n	80053c6 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005486:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800548a:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800548c:	6119      	str	r1, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800548e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005490:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8005492:	0799      	lsls	r1, r3, #30
 8005494:	d02d      	beq.n	80054f2 <HAL_TIM_IRQHandler+0x14a>
          HAL_TIM_IC_CaptureCallback(htim);
 8005496:	f7ff ff81 	bl	800539c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800549a:	2200      	movs	r2, #0
 800549c:	6823      	ldr	r3, [r4, #0]
 800549e:	7722      	strb	r2, [r4, #28]
 80054a0:	e78b      	b.n	80053ba <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054a2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80054a6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054a8:	611a      	str	r2, [r3, #16]
}
 80054aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80054ae:	f000 ba91 	b.w	80059d4 <HAL_TIMEx_CommutationCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80054b6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054b8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80054ba:	f7ff ff73 	bl	80053a4 <HAL_TIM_TriggerCallback>
 80054be:	6823      	ldr	r3, [r4, #0]
 80054c0:	e7a5      	b.n	800540e <HAL_TIM_IRQHandler+0x66>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054c2:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80054c6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054c8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80054ca:	f7fb fe3f 	bl	800114c <HAL_TIM_PeriodElapsedCallback>
 80054ce:	6823      	ldr	r3, [r4, #0]
 80054d0:	e78b      	b.n	80053ea <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80054d6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054d8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80054da:	f000 fa7d 	bl	80059d8 <HAL_TIMEx_BreakCallback>
 80054de:	6823      	ldr	r3, [r4, #0]
 80054e0:	e789      	b.n	80053f6 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80054e6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054e8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80054ea:	f000 fa75 	bl	80059d8 <HAL_TIMEx_BreakCallback>
 80054ee:	6823      	ldr	r3, [r4, #0]
 80054f0:	e787      	b.n	8005402 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054f2:	f7ff ff51 	bl	8005398 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054f6:	4620      	mov	r0, r4
 80054f8:	f7ff ff52 	bl	80053a0 <HAL_TIM_PWM_PulseFinishedCallback>
 80054fc:	e7cd      	b.n	800549a <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 80054fe:	f7ff ff4d 	bl	800539c <HAL_TIM_IC_CaptureCallback>
 8005502:	e7bc      	b.n	800547e <HAL_TIM_IRQHandler+0xd6>
        HAL_TIM_IC_CaptureCallback(htim);
 8005504:	f7ff ff4a 	bl	800539c <HAL_TIM_IC_CaptureCallback>
 8005508:	e7a6      	b.n	8005458 <HAL_TIM_IRQHandler+0xb0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800550a:	f7ff ff45 	bl	8005398 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800550e:	4620      	mov	r0, r4
 8005510:	f7ff ff46 	bl	80053a0 <HAL_TIM_PWM_PulseFinishedCallback>
 8005514:	e78e      	b.n	8005434 <HAL_TIM_IRQHandler+0x8c>
 8005516:	bf00      	nop

08005518 <TIM_Base_SetConfig>:
{
 8005518:	b4f0      	push	{r4, r5, r6, r7}
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800551a:	4c3e      	ldr	r4, [pc, #248]	; (8005614 <TIM_Base_SetConfig+0xfc>)
 800551c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 8005520:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8005522:	eba0 0404 	sub.w	r4, r0, r4
 8005526:	fab4 f484 	clz	r4, r4
 800552a:	ea4f 1454 	mov.w	r4, r4, lsr #5
 800552e:	d04f      	beq.n	80055d0 <TIM_Base_SetConfig+0xb8>
 8005530:	2c00      	cmp	r4, #0
 8005532:	d14d      	bne.n	80055d0 <TIM_Base_SetConfig+0xb8>
 8005534:	4a38      	ldr	r2, [pc, #224]	; (8005618 <TIM_Base_SetConfig+0x100>)
 8005536:	4290      	cmp	r0, r2
 8005538:	d00d      	beq.n	8005556 <TIM_Base_SetConfig+0x3e>
 800553a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800553e:	4290      	cmp	r0, r2
 8005540:	d009      	beq.n	8005556 <TIM_Base_SetConfig+0x3e>
 8005542:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 8005546:	4d35      	ldr	r5, [pc, #212]	; (800561c <TIM_Base_SetConfig+0x104>)
 8005548:	4290      	cmp	r0, r2
 800554a:	bf18      	it	ne
 800554c:	42a8      	cmpne	r0, r5
 800554e:	bf0c      	ite	eq
 8005550:	2201      	moveq	r2, #1
 8005552:	2200      	movne	r2, #0
 8005554:	d111      	bne.n	800557a <TIM_Base_SetConfig+0x62>
 8005556:	4a32      	ldr	r2, [pc, #200]	; (8005620 <TIM_Base_SetConfig+0x108>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800555c:	4d2e      	ldr	r5, [pc, #184]	; (8005618 <TIM_Base_SetConfig+0x100>)
 800555e:	1a82      	subs	r2, r0, r2
    tmpcr1 |= Structure->CounterMode;
 8005560:	684e      	ldr	r6, [r1, #4]
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8005562:	42a8      	cmp	r0, r5
 8005564:	fab2 f282 	clz	r2, r2
    tmpcr1 |= Structure->CounterMode;
 8005568:	ea43 0306 	orr.w	r3, r3, r6
 800556c:	ea4f 1252 	mov.w	r2, r2, lsr #5
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8005570:	d037      	beq.n	80055e2 <TIM_Base_SetConfig+0xca>
 8005572:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005576:	42a8      	cmp	r0, r5
 8005578:	d033      	beq.n	80055e2 <TIM_Base_SetConfig+0xca>
 800557a:	4d28      	ldr	r5, [pc, #160]	; (800561c <TIM_Base_SetConfig+0x104>)
 800557c:	42a8      	cmp	r0, r5
 800557e:	bf14      	ite	ne
 8005580:	4615      	movne	r5, r2
 8005582:	f042 0501 	orreq.w	r5, r2, #1
 8005586:	bb65      	cbnz	r5, 80055e2 <TIM_Base_SetConfig+0xca>
 8005588:	4a26      	ldr	r2, [pc, #152]	; (8005624 <TIM_Base_SetConfig+0x10c>)
 800558a:	4e27      	ldr	r6, [pc, #156]	; (8005628 <TIM_Base_SetConfig+0x110>)
 800558c:	4290      	cmp	r0, r2
 800558e:	bf18      	it	ne
 8005590:	42b0      	cmpne	r0, r6
 8005592:	bf0c      	ite	eq
 8005594:	2201      	moveq	r2, #1
 8005596:	2200      	movne	r2, #0
 8005598:	d039      	beq.n	800560e <TIM_Base_SetConfig+0xf6>
 800559a:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800559e:	4d23      	ldr	r5, [pc, #140]	; (800562c <TIM_Base_SetConfig+0x114>)
 80055a0:	42a8      	cmp	r0, r5
 80055a2:	bf18      	it	ne
 80055a4:	42b0      	cmpne	r0, r6
 80055a6:	d01c      	beq.n	80055e2 <TIM_Base_SetConfig+0xca>
 80055a8:	4a21      	ldr	r2, [pc, #132]	; (8005630 <TIM_Base_SetConfig+0x118>)
 80055aa:	4290      	cmp	r0, r2
 80055ac:	d02f      	beq.n	800560e <TIM_Base_SetConfig+0xf6>
 80055ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055b2:	4290      	cmp	r0, r2
 80055b4:	d02b      	beq.n	800560e <TIM_Base_SetConfig+0xf6>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055b6:	694a      	ldr	r2, [r1, #20]
 80055b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055bc:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055be:	4313      	orrs	r3, r2
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80055c0:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 80055c2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055c4:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80055c6:	6282      	str	r2, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80055c8:	2301      	movs	r3, #1
}
 80055ca:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->EGR = TIM_EGR_UG;
 80055cc:	6143      	str	r3, [r0, #20]
}
 80055ce:	4770      	bx	lr
 80055d0:	4a13      	ldr	r2, [pc, #76]	; (8005620 <TIM_Base_SetConfig+0x108>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80055d6:	684d      	ldr	r5, [r1, #4]
 80055d8:	1a82      	subs	r2, r0, r2
 80055da:	432b      	orrs	r3, r5
 80055dc:	fab2 f282 	clz	r2, r2
 80055e0:	0952      	lsrs	r2, r2, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055e2:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80055e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055e8:	694d      	ldr	r5, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055ea:	4333      	orrs	r3, r6
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055ec:	688f      	ldr	r7, [r1, #8]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80055ee:	680e      	ldr	r6, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055f4:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80055f6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055f8:	62c7      	str	r7, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80055fa:	6286      	str	r6, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80055fc:	b90c      	cbnz	r4, 8005602 <TIM_Base_SetConfig+0xea>
 80055fe:	2a00      	cmp	r2, #0
 8005600:	d0e2      	beq.n	80055c8 <TIM_Base_SetConfig+0xb0>
    TIMx->RCR = Structure->RepetitionCounter;
 8005602:	690b      	ldr	r3, [r1, #16]
 8005604:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005606:	2301      	movs	r3, #1
}
 8005608:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->EGR = TIM_EGR_UG;
 800560a:	6143      	str	r3, [r0, #20]
}
 800560c:	4770      	bx	lr
 800560e:	2200      	movs	r2, #0
 8005610:	e7e7      	b.n	80055e2 <TIM_Base_SetConfig+0xca>
 8005612:	bf00      	nop
 8005614:	40010000 	.word	0x40010000
 8005618:	40000400 	.word	0x40000400
 800561c:	40000c00 	.word	0x40000c00
 8005620:	40010400 	.word	0x40010400
 8005624:	40014400 	.word	0x40014400
 8005628:	40014000 	.word	0x40014000
 800562c:	40001800 	.word	0x40001800
 8005630:	40001c00 	.word	0x40001c00

08005634 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8005634:	b1b8      	cbz	r0, 8005666 <HAL_TIM_Base_Init+0x32>
  if(htim->State == HAL_TIM_STATE_RESET)
 8005636:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{ 
 800563a:	b510      	push	{r4, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 800563c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005640:	4604      	mov	r4, r0
 8005642:	b15b      	cbz	r3, 800565c <HAL_TIM_Base_Init+0x28>
  htim->State= HAL_TIM_STATE_BUSY;
 8005644:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8005646:	6820      	ldr	r0, [r4, #0]
 8005648:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;
 800564a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800564e:	f7ff ff63 	bl	8005518 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8005652:	2301      	movs	r3, #1
  return HAL_OK;
 8005654:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8005656:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800565a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800565c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005660:	f7fc f862 	bl	8001728 <HAL_TIM_Base_MspInit>
 8005664:	e7ee      	b.n	8005644 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8005666:	2001      	movs	r0, #1
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop

0800566c <HAL_TIM_PWM_Init>:
  if(htim == NULL)
 800566c:	b1b8      	cbz	r0, 800569e <HAL_TIM_PWM_Init+0x32>
  if(htim->State == HAL_TIM_STATE_RESET)
 800566e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8005672:	b510      	push	{r4, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 8005674:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005678:	4604      	mov	r4, r0
 800567a:	b15b      	cbz	r3, 8005694 <HAL_TIM_PWM_Init+0x28>
  htim->State= HAL_TIM_STATE_BUSY;  
 800567c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800567e:	6820      	ldr	r0, [r4, #0]
 8005680:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;  
 8005682:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8005686:	f7ff ff47 	bl	8005518 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800568a:	2301      	movs	r3, #1
  return HAL_OK;
 800568c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800568e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005692:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005694:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005698:	f7fc f89e 	bl	80017d8 <HAL_TIM_PWM_MspInit>
 800569c:	e7ee      	b.n	800567c <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 800569e:	2001      	movs	r0, #1
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop

080056a4 <TIM_OC1_SetConfig>:
{
 80056a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056a6:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= OC_Config->OCPolarity;
 80056a8:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056aa:	f024 0401 	bic.w	r4, r4, #1
  tmpccmrx |= OC_Config->OCMode;
 80056ae:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056b0:	4a13      	ldr	r2, [pc, #76]	; (8005700 <TIM_OC1_SetConfig+0x5c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056b2:	6204      	str	r4, [r0, #32]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80056b4:	4d13      	ldr	r5, [pc, #76]	; (8005704 <TIM_OC1_SetConfig+0x60>)
  tmpccer = TIMx->CCER;
 80056b6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 80056b8:	6844      	ldr	r4, [r0, #4]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80056ba:	42a8      	cmp	r0, r5
  tmpccmrx = TIMx->CCMR1;
 80056bc:	f8d0 e018 	ldr.w	lr, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 80056c0:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056c4:	ea0e 0202 	and.w	r2, lr, r2
  tmpccer |= OC_Config->OCPolarity;
 80056c8:	ea43 0307 	orr.w	r3, r3, r7
  tmpccmrx |= OC_Config->OCMode;
 80056cc:	ea42 0206 	orr.w	r2, r2, r6
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80056d0:	d009      	beq.n	80056e6 <TIM_OC1_SetConfig+0x42>
 80056d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80056d6:	42a8      	cmp	r0, r5
 80056d8:	d005      	beq.n	80056e6 <TIM_OC1_SetConfig+0x42>
  TIMx->CCR1 = OC_Config->Pulse;
 80056da:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80056dc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80056de:	6182      	str	r2, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80056e0:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;  
 80056e2:	6203      	str	r3, [r0, #32]
 80056e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccer &= ~TIM_CCER_CC1NP;
 80056e6:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80056ea:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 80056ec:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056ee:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80056f2:	698e      	ldr	r6, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 80056f4:	433b      	orrs	r3, r7
    tmpcr2 |= OC_Config->OCNIdleState;
 80056f6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80056f8:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80056fc:	432c      	orrs	r4, r5
 80056fe:	e7ec      	b.n	80056da <TIM_OC1_SetConfig+0x36>
 8005700:	fffeff8c 	.word	0xfffeff8c
 8005704:	40010000 	.word	0x40010000

08005708 <TIM_OC2_SetConfig>:
{
 8005708:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800570a:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 4);
 800570c:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800570e:	f024 0410 	bic.w	r4, r4, #16
  tmpccmrx |= (OC_Config->OCMode << 8);
 8005712:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005714:	4a14      	ldr	r2, [pc, #80]	; (8005768 <TIM_OC2_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005716:	6204      	str	r4, [r0, #32]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8005718:	4d14      	ldr	r5, [pc, #80]	; (800576c <TIM_OC2_SetConfig+0x64>)
  tmpccer = TIMx->CCER;
 800571a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 800571c:	6844      	ldr	r4, [r0, #4]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800571e:	42a8      	cmp	r0, r5
  tmpccmrx = TIMx->CCMR1;
 8005720:	f8d0 e018 	ldr.w	lr, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8005724:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005728:	ea0e 0202 	and.w	r2, lr, r2
  tmpccer |= (OC_Config->OCPolarity << 4);
 800572c:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8);
 8005730:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8005734:	d009      	beq.n	800574a <TIM_OC2_SetConfig+0x42>
 8005736:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800573a:	42a8      	cmp	r0, r5
 800573c:	d005      	beq.n	800574a <TIM_OC2_SetConfig+0x42>
  TIMx->CCR2 = OC_Config->Pulse;
 800573e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005740:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005742:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005744:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005746:	6203      	str	r3, [r0, #32]
 8005748:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccer &= ~TIM_CCER_CC2NP;
 800574a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4);
 800574e:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8005750:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005752:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8005756:	698e      	ldr	r6, [r1, #24]
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8005758:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800575c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800575e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8005762:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8005766:	e7ea      	b.n	800573e <TIM_OC2_SetConfig+0x36>
 8005768:	feff8cff 	.word	0xfeff8cff
 800576c:	40010000 	.word	0x40010000

08005770 <TIM_OC3_SetConfig>:
{
 8005770:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005772:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 8);
 8005774:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005776:	f424 7480 	bic.w	r4, r4, #256	; 0x100
  tmpccmrx |= OC_Config->OCMode;
 800577a:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 800577c:	4a14      	ldr	r2, [pc, #80]	; (80057d0 <TIM_OC3_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800577e:	6204      	str	r4, [r0, #32]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8005780:	4d14      	ldr	r5, [pc, #80]	; (80057d4 <TIM_OC3_SetConfig+0x64>)
  tmpccer = TIMx->CCER;
 8005782:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8005784:	6844      	ldr	r4, [r0, #4]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8005786:	42a8      	cmp	r0, r5
  tmpccmrx = TIMx->CCMR2;
 8005788:	f8d0 e01c 	ldr.w	lr, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 800578c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8005790:	ea0e 0202 	and.w	r2, lr, r2
  tmpccer |= (OC_Config->OCPolarity << 8);
 8005794:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8005798:	ea42 0206 	orr.w	r2, r2, r6
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800579c:	d009      	beq.n	80057b2 <TIM_OC3_SetConfig+0x42>
 800579e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80057a2:	42a8      	cmp	r0, r5
 80057a4:	d005      	beq.n	80057b2 <TIM_OC3_SetConfig+0x42>
  TIMx->CCR3 = OC_Config->Pulse;
 80057a6:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80057a8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80057aa:	61c2      	str	r2, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80057ac:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80057ae:	6203      	str	r3, [r0, #32]
 80057b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccer &= ~TIM_CCER_CC3NP;
 80057b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80057b6:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 80057b8:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057ba:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80057be:	698e      	ldr	r6, [r1, #24]
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80057c0:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80057c4:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80057c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80057ca:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 80057ce:	e7ea      	b.n	80057a6 <TIM_OC3_SetConfig+0x36>
 80057d0:	fffeff8c 	.word	0xfffeff8c
 80057d4:	40010000 	.word	0x40010000

080057d8 <TIM_OC4_SetConfig>:
{
 80057d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057da:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 12);
 80057dc:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057de:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
  tmpccmrx |= (OC_Config->OCMode << 8);
 80057e2:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057e4:	4a10      	ldr	r2, [pc, #64]	; (8005828 <TIM_OC4_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057e6:	6204      	str	r4, [r0, #32]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80057e8:	4d10      	ldr	r5, [pc, #64]	; (800582c <TIM_OC4_SetConfig+0x54>)
  tmpccer = TIMx->CCER;
 80057ea:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 80057ec:	6844      	ldr	r4, [r0, #4]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80057ee:	42a8      	cmp	r0, r5
  tmpccmrx = TIMx->CCMR2;
 80057f0:	f8d0 e01c 	ldr.w	lr, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 80057f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057f8:	ea0e 0202 	and.w	r2, lr, r2
  tmpccer |= (OC_Config->OCPolarity << 12);
 80057fc:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8);
 8005800:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8005804:	d009      	beq.n	800581a <TIM_OC4_SetConfig+0x42>
 8005806:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800580a:	42a8      	cmp	r0, r5
 800580c:	d005      	beq.n	800581a <TIM_OC4_SetConfig+0x42>
  TIMx->CCR4 = OC_Config->Pulse;
 800580e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005810:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005812:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8005814:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8005816:	6203      	str	r3, [r0, #32]
 8005818:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpcr2 &= ~TIM_CR2_OIS4;
 800581a:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 800581e:	694d      	ldr	r5, [r1, #20]
 8005820:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8005824:	e7f3      	b.n	800580e <TIM_OC4_SetConfig+0x36>
 8005826:	bf00      	nop
 8005828:	feff8cff 	.word	0xfeff8cff
 800582c:	40010000 	.word	0x40010000

08005830 <TIM_OC5_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005830:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005832:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 8005834:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005836:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
  tmpccmrx |= OC_Config->OCMode;
 800583a:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800583c:	4a10      	ldr	r2, [pc, #64]	; (8005880 <TIM_OC5_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800583e:	6204      	str	r4, [r0, #32]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005840:	4d10      	ldr	r5, [pc, #64]	; (8005884 <TIM_OC5_SetConfig+0x54>)
  tmpccer = TIMx->CCER;
 8005842:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2; 
 8005844:	6844      	ldr	r4, [r0, #4]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005846:	42a8      	cmp	r0, r5
  tmpccmrx = TIMx->CCMR3;
 8005848:	f8d0 e054 	ldr.w	lr, [r0, #84]	; 0x54
  tmpccer &= ~TIM_CCER_CC5P;
 800584c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005850:	ea0e 0202 	and.w	r2, lr, r2
  tmpccer |= (OC_Config->OCPolarity << 16);
 8005854:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 8005858:	ea42 0206 	orr.w	r2, r2, r6
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800585c:	d009      	beq.n	8005872 <TIM_OC5_SetConfig+0x42>
 800585e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005862:	42a8      	cmp	r0, r5
 8005864:	d005      	beq.n	8005872 <TIM_OC5_SetConfig+0x42>
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005866:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005868:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 800586a:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 800586c:	6581      	str	r1, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800586e:	6203      	str	r3, [r0, #32]
 8005870:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005872:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8005876:	694d      	ldr	r5, [r1, #20]
 8005878:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 800587c:	e7f3      	b.n	8005866 <TIM_OC5_SetConfig+0x36>
 800587e:	bf00      	nop
 8005880:	fffeff8f 	.word	0xfffeff8f
 8005884:	40010000 	.word	0x40010000

08005888 <TIM_OC6_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005888:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800588a:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 800588c:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800588e:	f424 1480 	bic.w	r4, r4, #1048576	; 0x100000
  tmpccmrx |= (OC_Config->OCMode << 8);
 8005892:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005894:	4a10      	ldr	r2, [pc, #64]	; (80058d8 <TIM_OC6_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005896:	6204      	str	r4, [r0, #32]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005898:	4d10      	ldr	r5, [pc, #64]	; (80058dc <TIM_OC6_SetConfig+0x54>)
  tmpccer = TIMx->CCER;
 800589a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2; 
 800589c:	6844      	ldr	r4, [r0, #4]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800589e:	42a8      	cmp	r0, r5
  tmpccmrx = TIMx->CCMR3;
 80058a0:	f8d0 e054 	ldr.w	lr, [r0, #84]	; 0x54
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80058a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80058a8:	ea0e 0202 	and.w	r2, lr, r2
  tmpccer |= (OC_Config->OCPolarity << 20);
 80058ac:	ea43 5307 	orr.w	r3, r3, r7, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8);
 80058b0:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80058b4:	d009      	beq.n	80058ca <TIM_OC6_SetConfig+0x42>
 80058b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80058ba:	42a8      	cmp	r0, r5
 80058bc:	d005      	beq.n	80058ca <TIM_OC6_SetConfig+0x42>
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80058be:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80058c0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 80058c2:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 80058c4:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80058c6:	6203      	str	r3, [r0, #32]
 80058c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpcr2 &= ~TIM_CR2_OIS6;
 80058ca:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 80058ce:	694d      	ldr	r5, [r1, #20]
 80058d0:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 80058d4:	e7f3      	b.n	80058be <TIM_OC6_SetConfig+0x36>
 80058d6:	bf00      	nop
 80058d8:	feff8fff 	.word	0xfeff8fff
 80058dc:	40010000 	.word	0x40010000

080058e0 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 80058e0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80058e4:	2b01      	cmp	r3, #1
{
 80058e6:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 80058e8:	d01f      	beq.n	800592a <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  tmpcr2 = htim->Instance->CR2;
 80058ea:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058ec:	4d11      	ldr	r5, [pc, #68]	; (8005934 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  tmpcr2 = htim->Instance->CR2;
 80058ee:	6853      	ldr	r3, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058f0:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 80058f2:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058f4:	d014      	beq.n	8005920 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80058f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80058fa:	42aa      	cmp	r2, r5
 80058fc:	d010      	beq.n	8005920 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058fe:	680d      	ldr	r5, [r1, #0]
  __HAL_UNLOCK(htim);
 8005900:	2600      	movs	r6, #0
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005902:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005904:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 &= ~TIM_CR2_MMS;
 8005908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800590c:	4321      	orrs	r1, r4
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800590e:	432b      	orrs	r3, r5
  return HAL_OK;
 8005910:	4635      	mov	r5, r6
  htim->Instance->CR2 = tmpcr2;
 8005912:	6053      	str	r3, [r2, #4]
  htim->Instance->SMCR = tmpsmcr;
 8005914:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8005916:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
} 
 800591a:	4628      	mov	r0, r5
 800591c:	bc70      	pop	{r4, r5, r6}
 800591e:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005920:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005924:	684d      	ldr	r5, [r1, #4]
 8005926:	432b      	orrs	r3, r5
 8005928:	e7e9      	b.n	80058fe <HAL_TIMEx_MasterConfigSynchronization+0x1e>
  __HAL_LOCK(htim);
 800592a:	2502      	movs	r5, #2
} 
 800592c:	4628      	mov	r0, r5
 800592e:	bc70      	pop	{r4, r5, r6}
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	40010000 	.word	0x40010000

08005938 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8005938:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800593c:	2b01      	cmp	r3, #1
 800593e:	d041      	beq.n	80059c4 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005940:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005942:	684a      	ldr	r2, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
{
 8005948:	b4f0      	push	{r4, r5, r6, r7}
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800594a:	688c      	ldr	r4, [r1, #8]
{
 800594c:	b082      	sub	sp, #8
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800594e:	680f      	ldr	r7, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005950:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005952:	694e      	ldr	r6, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005954:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005956:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800595a:	6805      	ldr	r5, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800595c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 800595e:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005960:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8005964:	9201      	str	r2, [sp, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005966:	690a      	ldr	r2, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005968:	433b      	orrs	r3, r7
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800596a:	4f18      	ldr	r7, [pc, #96]	; (80059cc <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800596c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005970:	42bd      	cmp	r5, r7
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005972:	ea43 0302 	orr.w	r3, r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8005976:	9a01      	ldr	r2, [sp, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005978:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800597c:	ea43 0306 	orr.w	r3, r3, r6
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005980:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005984:	ea43 0304 	orr.w	r3, r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8005988:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800598c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005990:	d00a      	beq.n	80059a8 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
 8005992:	4a0f      	ldr	r2, [pc, #60]	; (80059d0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8005994:	4295      	cmp	r5, r2
 8005996:	d007      	beq.n	80059a8 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
  __HAL_UNLOCK(htim);
 8005998:	2200      	movs	r2, #0
  htim->Instance->BDTR = tmpbdtr;
 800599a:	646b      	str	r3, [r5, #68]	; 0x44
  __HAL_UNLOCK(htim);
 800599c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 80059a0:	4610      	mov	r0, r2
 80059a2:	b002      	add	sp, #8
 80059a4:	bcf0      	pop	{r4, r5, r6, r7}
 80059a6:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 80059a8:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80059aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80059ae:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 80059b0:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80059b4:	6a0a      	ldr	r2, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80059b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059ba:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80059bc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80059c0:	4313      	orrs	r3, r2
 80059c2:	e7e9      	b.n	8005998 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
  __HAL_LOCK(htim);
 80059c4:	2302      	movs	r3, #2
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	40010000 	.word	0x40010000
 80059d0:	40010400 	.word	0x40010400

080059d4 <HAL_TIMEx_CommutationCallback>:
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop

080059d8 <HAL_TIMEx_BreakCallback>:
{
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop

080059dc <HAL_TIM_PWM_ConfigChannel>:
{
 80059dc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80059de:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d030      	beq.n	8005a48 <HAL_TIM_PWM_ConfigChannel+0x6c>
 80059e6:	460d      	mov	r5, r1
  htim->State = HAL_TIM_STATE_BUSY;
 80059e8:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 80059ea:	2101      	movs	r1, #1
 80059ec:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 80059ee:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 80059f2:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  switch (Channel)
 80059f6:	2a14      	cmp	r2, #20
 80059f8:	d81e      	bhi.n	8005a38 <HAL_TIM_PWM_ConfigChannel+0x5c>
 80059fa:	e8df f002 	tbb	[pc, r2]
 80059fe:	1d3a      	.short	0x1d3a
 8005a00:	1d4c1d1d 	.word	0x1d4c1d1d
 8005a04:	1d5f1d1d 	.word	0x1d5f1d1d
 8005a08:	1d0b1d1d 	.word	0x1d0b1d1d
 8005a0c:	1d711d1d 	.word	0x1d711d1d
 8005a10:	1d1d      	.short	0x1d1d
 8005a12:	27          	.byte	0x27
 8005a13:	00          	.byte	0x00
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a14:	4629      	mov	r1, r5
 8005a16:	6800      	ldr	r0, [r0, #0]
 8005a18:	f7ff fede 	bl	80057d8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a1c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8005a1e:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a20:	69d9      	ldr	r1, [r3, #28]
 8005a22:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005a26:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a28:	69d9      	ldr	r1, [r3, #28]
 8005a2a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005a2e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8005a30:	69da      	ldr	r2, [r3, #28]
 8005a32:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8005a36:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8005a38:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8005a3a:	2201      	movs	r2, #1
  return HAL_OK;
 8005a3c:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8005a3e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005a42:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return HAL_OK;
 8005a46:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8005a48:	2002      	movs	r0, #2
}
 8005a4a:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a4c:	4629      	mov	r1, r5
 8005a4e:	6800      	ldr	r0, [r0, #0]
 8005a50:	f7ff ff1a 	bl	8005888 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a54:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8005a56:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a5a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005a5e:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a62:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005a66:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8005a68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a6a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8005a6e:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 8005a70:	e7e2      	b.n	8005a38 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a72:	4629      	mov	r1, r5
 8005a74:	6800      	ldr	r0, [r0, #0]
 8005a76:	f7ff fe15 	bl	80056a4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a7a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a7c:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a7e:	6999      	ldr	r1, [r3, #24]
 8005a80:	f041 0108 	orr.w	r1, r1, #8
 8005a84:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a86:	6999      	ldr	r1, [r3, #24]
 8005a88:	f021 0104 	bic.w	r1, r1, #4
 8005a8c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a8e:	699a      	ldr	r2, [r3, #24]
 8005a90:	4302      	orrs	r2, r0
 8005a92:	619a      	str	r2, [r3, #24]
    break;
 8005a94:	e7d0      	b.n	8005a38 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a96:	4629      	mov	r1, r5
 8005a98:	6800      	ldr	r0, [r0, #0]
 8005a9a:	f7ff fe35 	bl	8005708 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a9e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8005aa0:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005aa2:	6999      	ldr	r1, [r3, #24]
 8005aa4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005aa8:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005aaa:	6999      	ldr	r1, [r3, #24]
 8005aac:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005ab0:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8005ab2:	699a      	ldr	r2, [r3, #24]
 8005ab4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8005ab8:	619a      	str	r2, [r3, #24]
    break;
 8005aba:	e7bd      	b.n	8005a38 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005abc:	4629      	mov	r1, r5
 8005abe:	6800      	ldr	r0, [r0, #0]
 8005ac0:	f7ff fe56 	bl	8005770 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ac4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8005ac6:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ac8:	69d9      	ldr	r1, [r3, #28]
 8005aca:	f041 0108 	orr.w	r1, r1, #8
 8005ace:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ad0:	69d9      	ldr	r1, [r3, #28]
 8005ad2:	f021 0104 	bic.w	r1, r1, #4
 8005ad6:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8005ad8:	69da      	ldr	r2, [r3, #28]
 8005ada:	4302      	orrs	r2, r0
 8005adc:	61da      	str	r2, [r3, #28]
    break;
 8005ade:	e7ab      	b.n	8005a38 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ae0:	4629      	mov	r1, r5
 8005ae2:	6800      	ldr	r0, [r0, #0]
 8005ae4:	f7ff fea4 	bl	8005830 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ae8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8005aea:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005aec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005aee:	f041 0108 	orr.w	r1, r1, #8
 8005af2:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005af4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005af6:	f021 0104 	bic.w	r1, r1, #4
 8005afa:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8005afc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005afe:	4302      	orrs	r2, r0
 8005b00:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 8005b02:	e799      	b.n	8005a38 <HAL_TIM_PWM_ConfigChannel+0x5c>

08005b04 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b08:	9d08      	ldr	r5, [sp, #32]
 8005b0a:	4680      	mov	r8, r0
 8005b0c:	460f      	mov	r7, r1
 8005b0e:	4616      	mov	r6, r2
 8005b10:	4699      	mov	r9, r3
 8005b12:	f8d8 4000 	ldr.w	r4, [r8]
 8005b16:	e001      	b.n	8005b1c <UART_WaitOnFlagUntilTimeout+0x18>
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8005b18:	1c6b      	adds	r3, r5, #1
 8005b1a:	d10a      	bne.n	8005b32 <UART_WaitOnFlagUntilTimeout+0x2e>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b1c:	69e0      	ldr	r0, [r4, #28]
 8005b1e:	ea37 0300 	bics.w	r3, r7, r0
 8005b22:	bf0c      	ite	eq
 8005b24:	2001      	moveq	r0, #1
 8005b26:	2000      	movne	r0, #0
 8005b28:	42b0      	cmp	r0, r6
 8005b2a:	d0f5      	beq.n	8005b18 <UART_WaitOnFlagUntilTimeout+0x14>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8005b2c:	2000      	movs	r0, #0
}
 8005b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8005b32:	b13d      	cbz	r5, 8005b44 <UART_WaitOnFlagUntilTimeout+0x40>
 8005b34:	f7fc f8c4 	bl	8001cc0 <HAL_GetTick>
 8005b38:	eba0 0009 	sub.w	r0, r0, r9
 8005b3c:	4285      	cmp	r5, r0
 8005b3e:	d8e8      	bhi.n	8005b12 <UART_WaitOnFlagUntilTimeout+0xe>
 8005b40:	f8d8 4000 	ldr.w	r4, [r8]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b44:	6823      	ldr	r3, [r4, #0]
        huart->gState = HAL_UART_STATE_READY;
 8005b46:	2220      	movs	r2, #32
        __HAL_UNLOCK(huart);
 8005b48:	2100      	movs	r1, #0
 8005b4a:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b50:	6023      	str	r3, [r4, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b52:	68a3      	ldr	r3, [r4, #8]
 8005b54:	f023 0301 	bic.w	r3, r3, #1
 8005b58:	60a3      	str	r3, [r4, #8]
        huart->gState = HAL_UART_STATE_READY;
 8005b5a:	f888 2069 	strb.w	r2, [r8, #105]	; 0x69
        __HAL_UNLOCK(huart);
 8005b5e:	f888 1068 	strb.w	r1, [r8, #104]	; 0x68
        huart->RxState = HAL_UART_STATE_READY;
 8005b62:	f888 206a 	strb.w	r2, [r8, #106]	; 0x6a
 8005b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b6a:	bf00      	nop

08005b6c <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b6e:	4605      	mov	r5, r0
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b70:	6883      	ldr	r3, [r0, #8]
 8005b72:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005b74:	682c      	ldr	r4, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b76:	696a      	ldr	r2, [r5, #20]
 8005b78:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005b7a:	4ea7      	ldr	r6, [pc, #668]	; (8005e18 <UART_SetConfig+0x2ac>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b7c:	69e8      	ldr	r0, [r5, #28]
 8005b7e:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005b80:	6822      	ldr	r2, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b82:	4303      	orrs	r3, r0

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b84:	68ef      	ldr	r7, [r5, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005b86:	4016      	ands	r6, r2
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8005b88:	69aa      	ldr	r2, [r5, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b8a:	49a4      	ldr	r1, [pc, #656]	; (8005e1c <UART_SetConfig+0x2b0>)
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005b8c:	4333      	orrs	r3, r6
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8005b8e:	6a2e      	ldr	r6, [r5, #32]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b90:	428c      	cmp	r4, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005b92:	6023      	str	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8005b94:	ea42 0306 	orr.w	r3, r2, r6
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b98:	6862      	ldr	r2, [r4, #4]
 8005b9a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005b9e:	ea42 0207 	orr.w	r2, r2, r7
 8005ba2:	6062      	str	r2, [r4, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8005ba4:	68a2      	ldr	r2, [r4, #8]
 8005ba6:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8005baa:	ea43 0302 	orr.w	r3, r3, r2
 8005bae:	60a3      	str	r3, [r4, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bb0:	d04d      	beq.n	8005c4e <UART_SetConfig+0xe2>
 8005bb2:	4b9b      	ldr	r3, [pc, #620]	; (8005e20 <UART_SetConfig+0x2b4>)
 8005bb4:	429c      	cmp	r4, r3
 8005bb6:	f000 8099 	beq.w	8005cec <UART_SetConfig+0x180>
 8005bba:	4b9a      	ldr	r3, [pc, #616]	; (8005e24 <UART_SetConfig+0x2b8>)
 8005bbc:	429c      	cmp	r4, r3
 8005bbe:	f000 809e 	beq.w	8005cfe <UART_SetConfig+0x192>
 8005bc2:	4b99      	ldr	r3, [pc, #612]	; (8005e28 <UART_SetConfig+0x2bc>)
 8005bc4:	429c      	cmp	r4, r3
 8005bc6:	d026      	beq.n	8005c16 <UART_SetConfig+0xaa>
 8005bc8:	4b98      	ldr	r3, [pc, #608]	; (8005e2c <UART_SetConfig+0x2c0>)
 8005bca:	429c      	cmp	r4, r3
 8005bcc:	d010      	beq.n	8005bf0 <UART_SetConfig+0x84>
 8005bce:	4b98      	ldr	r3, [pc, #608]	; (8005e30 <UART_SetConfig+0x2c4>)
 8005bd0:	429c      	cmp	r4, r3
 8005bd2:	d05d      	beq.n	8005c90 <UART_SetConfig+0x124>
 8005bd4:	4b97      	ldr	r3, [pc, #604]	; (8005e34 <UART_SetConfig+0x2c8>)
 8005bd6:	429c      	cmp	r4, r3
 8005bd8:	d06e      	beq.n	8005cb8 <UART_SetConfig+0x14c>
 8005bda:	4b97      	ldr	r3, [pc, #604]	; (8005e38 <UART_SetConfig+0x2cc>)
 8005bdc:	429c      	cmp	r4, r3
 8005bde:	f000 8107 	beq.w	8005df0 <UART_SetConfig+0x284>

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005be2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005be6:	f000 80a3 	beq.w	8005d30 <UART_SetConfig+0x1c4>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
    }
  }

  return ret;

}
 8005bec:	4618      	mov	r0, r3
 8005bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bf0:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 8005bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c00:	d063      	beq.n	8005cca <UART_SetConfig+0x15e>
 8005c02:	d912      	bls.n	8005c2a <UART_SetConfig+0xbe>
 8005c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c08:	f000 8084 	beq.w	8005d14 <UART_SetConfig+0x1a8>
 8005c0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c10:	f000 80ad 	beq.w	8005d6e <UART_SetConfig+0x202>
 8005c14:	e7e5      	b.n	8005be2 <UART_SetConfig+0x76>
 8005c16:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8005c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c22:	2b40      	cmp	r3, #64	; 0x40
 8005c24:	d051      	beq.n	8005cca <UART_SetConfig+0x15e>
 8005c26:	f200 809d 	bhi.w	8005d64 <UART_SetConfig+0x1f8>
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1d9      	bne.n	8005be2 <UART_SetConfig+0x76>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c2e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005c32:	f000 80d1 	beq.w	8005dd8 <UART_SetConfig+0x26c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005c36:	f7fe f87d 	bl	8003d34 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005c3a:	686a      	ldr	r2, [r5, #4]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c3c:	2300      	movs	r3, #0
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005c3e:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 8005c42:	fbb0 f0f2 	udiv	r0, r0, r2
 8005c46:	b280      	uxth	r0, r0
 8005c48:	60e0      	str	r0, [r4, #12]
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c4e:	4b7b      	ldr	r3, [pc, #492]	; (8005e3c <UART_SetConfig+0x2d0>)
 8005c50:	4a7b      	ldr	r2, [pc, #492]	; (8005e40 <UART_SetConfig+0x2d4>)
 8005c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c56:	f003 0303 	and.w	r3, r3, #3
 8005c5a:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c5c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005c60:	d069      	beq.n	8005d36 <UART_SetConfig+0x1ca>
    switch (clocksource)
 8005c62:	2b08      	cmp	r3, #8
 8005c64:	d8c1      	bhi.n	8005bea <UART_SetConfig+0x7e>
 8005c66:	a201      	add	r2, pc, #4	; (adr r2, 8005c6c <UART_SetConfig+0x100>)
 8005c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6c:	08005c37 	.word	0x08005c37
 8005c70:	08005cb3 	.word	0x08005cb3
 8005c74:	08005d1b 	.word	0x08005d1b
 8005c78:	08005beb 	.word	0x08005beb
 8005c7c:	08005cd1 	.word	0x08005cd1
 8005c80:	08005beb 	.word	0x08005beb
 8005c84:	08005beb 	.word	0x08005beb
 8005c88:	08005beb 	.word	0x08005beb
 8005c8c:	08005cd7 	.word	0x08005cd7
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c90:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 8005c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ca0:	d013      	beq.n	8005cca <UART_SetConfig+0x15e>
 8005ca2:	f200 808f 	bhi.w	8005dc4 <UART_SetConfig+0x258>
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d19b      	bne.n	8005be2 <UART_SetConfig+0x76>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005caa:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005cae:	f000 809c 	beq.w	8005dea <UART_SetConfig+0x27e>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005cb2:	f7fe f84f 	bl	8003d54 <HAL_RCC_GetPCLK2Freq>
 8005cb6:	e7c0      	b.n	8005c3a <UART_SetConfig+0xce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cb8:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8005cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005cc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cc8:	d162      	bne.n	8005d90 <UART_SetConfig+0x224>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cca:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005cce:	d068      	beq.n	8005da2 <UART_SetConfig+0x236>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005cd0:	f7fd ff5e 	bl	8003b90 <HAL_RCC_GetSysClockFreq>
 8005cd4:	e7b1      	b.n	8005c3a <UART_SetConfig+0xce>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005cd6:	6869      	ldr	r1, [r5, #4]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cd8:	2300      	movs	r3, #0
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005cda:	084a      	lsrs	r2, r1, #1
 8005cdc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8005ce0:	fbb2 f2f1 	udiv	r2, r2, r1
 8005ce4:	b292      	uxth	r2, r2
 8005ce6:	60e2      	str	r2, [r4, #12]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cec:	4a53      	ldr	r2, [pc, #332]	; (8005e3c <UART_SetConfig+0x2d0>)
 8005cee:	4b54      	ldr	r3, [pc, #336]	; (8005e40 <UART_SetConfig+0x2d4>)
 8005cf0:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8005cf4:	f002 020c 	and.w	r2, r2, #12
 8005cf8:	4413      	add	r3, r2
 8005cfa:	791b      	ldrb	r3, [r3, #4]
 8005cfc:	e7ae      	b.n	8005c5c <UART_SetConfig+0xf0>
 8005cfe:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8005d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d06:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d0a:	2b10      	cmp	r3, #16
 8005d0c:	d0dd      	beq.n	8005cca <UART_SetConfig+0x15e>
 8005d0e:	d98c      	bls.n	8005c2a <UART_SetConfig+0xbe>
 8005d10:	2b20      	cmp	r3, #32
 8005d12:	d15e      	bne.n	8005dd2 <UART_SetConfig+0x266>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d14:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005d18:	d061      	beq.n	8005dde <UART_SetConfig+0x272>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005d1a:	6869      	ldr	r1, [r5, #4]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d1c:	2300      	movs	r3, #0
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005d1e:	4a49      	ldr	r2, [pc, #292]	; (8005e44 <UART_SetConfig+0x2d8>)
}
 8005d20:	4618      	mov	r0, r3
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005d22:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 8005d26:	fbb2 f2f1 	udiv	r2, r2, r1
 8005d2a:	b292      	uxth	r2, r2
 8005d2c:	60e2      	str	r2, [r4, #12]
}
 8005d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d30:	2200      	movs	r2, #0
        ret = HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e7d7      	b.n	8005ce6 <UART_SetConfig+0x17a>
    switch (clocksource)
 8005d36:	2b08      	cmp	r3, #8
 8005d38:	d8fa      	bhi.n	8005d30 <UART_SetConfig+0x1c4>
 8005d3a:	a201      	add	r2, pc, #4	; (adr r2, 8005d40 <UART_SetConfig+0x1d4>)
 8005d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d40:	08005dd9 	.word	0x08005dd9
 8005d44:	08005deb 	.word	0x08005deb
 8005d48:	08005ddf 	.word	0x08005ddf
 8005d4c:	08005d31 	.word	0x08005d31
 8005d50:	08005da3 	.word	0x08005da3
 8005d54:	08005d31 	.word	0x08005d31
 8005d58:	08005d31 	.word	0x08005d31
 8005d5c:	08005d31 	.word	0x08005d31
 8005d60:	08005d75 	.word	0x08005d75
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d64:	2b80      	cmp	r3, #128	; 0x80
 8005d66:	d0d5      	beq.n	8005d14 <UART_SetConfig+0x1a8>
 8005d68:	2bc0      	cmp	r3, #192	; 0xc0
 8005d6a:	f47f af3a 	bne.w	8005be2 <UART_SetConfig+0x76>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d6e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005d72:	d1b0      	bne.n	8005cd6 <UART_SetConfig+0x16a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005d74:	686a      	ldr	r2, [r5, #4]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d76:	2300      	movs	r3, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005d78:	0851      	lsrs	r1, r2, #1
 8005d7a:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 8005d7e:	fbb1 f1f2 	udiv	r1, r1, r2
 8005d82:	f3c1 0242 	ubfx	r2, r1, #1, #3
 8005d86:	f021 010f 	bic.w	r1, r1, #15
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	b292      	uxth	r2, r2
      break;
 8005d8e:	e7aa      	b.n	8005ce6 <UART_SetConfig+0x17a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d90:	f67f af4b 	bls.w	8005c2a <UART_SetConfig+0xbe>
 8005d94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d98:	d0bc      	beq.n	8005d14 <UART_SetConfig+0x1a8>
 8005d9a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d9e:	d0e6      	beq.n	8005d6e <UART_SetConfig+0x202>
 8005da0:	e71f      	b.n	8005be2 <UART_SetConfig+0x76>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005da2:	f7fd fef5 	bl	8003b90 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005da6:	6869      	ldr	r1, [r5, #4]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005da8:	2300      	movs	r3, #0
 8005daa:	682c      	ldr	r4, [r5, #0]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005dac:	084a      	lsrs	r2, r1, #1
 8005dae:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8005db2:	fbb0 f0f1 	udiv	r0, r0, r1
 8005db6:	f3c0 0242 	ubfx	r2, r0, #1, #3
 8005dba:	f020 000f 	bic.w	r0, r0, #15
 8005dbe:	4302      	orrs	r2, r0
 8005dc0:	b292      	uxth	r2, r2
      break;
 8005dc2:	e790      	b.n	8005ce6 <UART_SetConfig+0x17a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dc8:	d0a4      	beq.n	8005d14 <UART_SetConfig+0x1a8>
 8005dca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005dce:	d0ce      	beq.n	8005d6e <UART_SetConfig+0x202>
 8005dd0:	e707      	b.n	8005be2 <UART_SetConfig+0x76>
 8005dd2:	2b30      	cmp	r3, #48	; 0x30
 8005dd4:	d0cb      	beq.n	8005d6e <UART_SetConfig+0x202>
 8005dd6:	e704      	b.n	8005be2 <UART_SetConfig+0x76>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005dd8:	f7fd ffac 	bl	8003d34 <HAL_RCC_GetPCLK1Freq>
 8005ddc:	e7e3      	b.n	8005da6 <UART_SetConfig+0x23a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005dde:	686a      	ldr	r2, [r5, #4]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005de0:	2300      	movs	r3, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005de2:	4919      	ldr	r1, [pc, #100]	; (8005e48 <UART_SetConfig+0x2dc>)
 8005de4:	eb01 0152 	add.w	r1, r1, r2, lsr #1
 8005de8:	e7c9      	b.n	8005d7e <UART_SetConfig+0x212>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005dea:	f7fd ffb3 	bl	8003d54 <HAL_RCC_GetPCLK2Freq>
 8005dee:	e7da      	b.n	8005da6 <UART_SetConfig+0x23a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005df0:	f503 33de 	add.w	r3, r3, #113664	; 0x1bc00
 8005df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005dfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e00:	f43f af63 	beq.w	8005cca <UART_SetConfig+0x15e>
 8005e04:	f67f af11 	bls.w	8005c2a <UART_SetConfig+0xbe>
 8005e08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e0c:	d082      	beq.n	8005d14 <UART_SetConfig+0x1a8>
 8005e0e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005e12:	d0ac      	beq.n	8005d6e <UART_SetConfig+0x202>
 8005e14:	e6e5      	b.n	8005be2 <UART_SetConfig+0x76>
 8005e16:	bf00      	nop
 8005e18:	efff69f3 	.word	0xefff69f3
 8005e1c:	40011000 	.word	0x40011000
 8005e20:	40004400 	.word	0x40004400
 8005e24:	40004800 	.word	0x40004800
 8005e28:	40004c00 	.word	0x40004c00
 8005e2c:	40005000 	.word	0x40005000
 8005e30:	40011400 	.word	0x40011400
 8005e34:	40007800 	.word	0x40007800
 8005e38:	40007c00 	.word	0x40007c00
 8005e3c:	40023800 	.word	0x40023800
 8005e40:	08019730 	.word	0x08019730
 8005e44:	00f42400 	.word	0x00f42400
 8005e48:	01e84800 	.word	0x01e84800

08005e4c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005e4e:	07da      	lsls	r2, r3, #31
{
 8005e50:	b410      	push	{r4}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e52:	d506      	bpl.n	8005e62 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e54:	6801      	ldr	r1, [r0, #0]
 8005e56:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8005e58:	684a      	ldr	r2, [r1, #4]
 8005e5a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005e5e:	4322      	orrs	r2, r4
 8005e60:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e62:	079c      	lsls	r4, r3, #30
 8005e64:	d506      	bpl.n	8005e74 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e66:	6801      	ldr	r1, [r0, #0]
 8005e68:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005e6a:	684a      	ldr	r2, [r1, #4]
 8005e6c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005e70:	4322      	orrs	r2, r4
 8005e72:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e74:	0759      	lsls	r1, r3, #29
 8005e76:	d506      	bpl.n	8005e86 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e78:	6801      	ldr	r1, [r0, #0]
 8005e7a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005e7c:	684a      	ldr	r2, [r1, #4]
 8005e7e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e82:	4322      	orrs	r2, r4
 8005e84:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e86:	071a      	lsls	r2, r3, #28
 8005e88:	d506      	bpl.n	8005e98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e8a:	6801      	ldr	r1, [r0, #0]
 8005e8c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005e8e:	684a      	ldr	r2, [r1, #4]
 8005e90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e94:	4322      	orrs	r2, r4
 8005e96:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e98:	06dc      	lsls	r4, r3, #27
 8005e9a:	d506      	bpl.n	8005eaa <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e9c:	6801      	ldr	r1, [r0, #0]
 8005e9e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005ea0:	688a      	ldr	r2, [r1, #8]
 8005ea2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ea6:	4322      	orrs	r2, r4
 8005ea8:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005eaa:	0699      	lsls	r1, r3, #26
 8005eac:	d506      	bpl.n	8005ebc <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005eae:	6801      	ldr	r1, [r0, #0]
 8005eb0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005eb2:	688a      	ldr	r2, [r1, #8]
 8005eb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005eb8:	4322      	orrs	r2, r4
 8005eba:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ebc:	065a      	lsls	r2, r3, #25
 8005ebe:	d50a      	bpl.n	8005ed6 <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ec0:	6801      	ldr	r1, [r0, #0]
 8005ec2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005ec4:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ec6:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005eca:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8005ece:	ea42 0204 	orr.w	r2, r2, r4
 8005ed2:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ed4:	d00b      	beq.n	8005eee <UART_AdvFeatureConfig+0xa2>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ed6:	061b      	lsls	r3, r3, #24
 8005ed8:	d506      	bpl.n	8005ee8 <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005eda:	6802      	ldr	r2, [r0, #0]
 8005edc:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005ede:	6853      	ldr	r3, [r2, #4]
 8005ee0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005ee4:	430b      	orrs	r3, r1
 8005ee6:	6053      	str	r3, [r2, #4]
  }
}
 8005ee8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005eec:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005eee:	684a      	ldr	r2, [r1, #4]
 8005ef0:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005ef2:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8005ef6:	4322      	orrs	r2, r4
 8005ef8:	604a      	str	r2, [r1, #4]
 8005efa:	e7ec      	b.n	8005ed6 <UART_AdvFeatureConfig+0x8a>

08005efc <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005efc:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005efe:	2500      	movs	r5, #0
{
 8005f00:	4604      	mov	r4, r0
 8005f02:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f04:	66c5      	str	r5, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005f06:	f7fb fedb 	bl	8001cc0 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f0a:	6822      	ldr	r2, [r4, #0]
 8005f0c:	6812      	ldr	r2, [r2, #0]
 8005f0e:	0713      	lsls	r3, r2, #28
 8005f10:	d40a      	bmi.n	8005f28 <UART_CheckIdleState+0x2c>
  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f12:	2300      	movs	r3, #0
  huart->gState= HAL_UART_STATE_READY;
 8005f14:	2220      	movs	r2, #32

  return HAL_OK;
 8005f16:	4618      	mov	r0, r3
  huart->gState= HAL_UART_STATE_READY;
 8005f18:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8005f1c:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
  huart->RxState= HAL_UART_STATE_READY;
 8005f20:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
}
 8005f24:	b002      	add	sp, #8
 8005f26:	bd70      	pop	{r4, r5, r6, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f28:	f06f 467e 	mvn.w	r6, #4261412864	; 0xfe000000
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	462a      	mov	r2, r5
 8005f30:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f34:	9600      	str	r6, [sp, #0]
 8005f36:	4620      	mov	r0, r4
 8005f38:	f7ff fde4 	bl	8005b04 <UART_WaitOnFlagUntilTimeout>
 8005f3c:	2800      	cmp	r0, #0
 8005f3e:	d0e8      	beq.n	8005f12 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8005f40:	2003      	movs	r0, #3
}
 8005f42:	b002      	add	sp, #8
 8005f44:	bd70      	pop	{r4, r5, r6, pc}
 8005f46:	bf00      	nop

08005f48 <HAL_UART_Init>:
  if(huart == NULL)
 8005f48:	b390      	cbz	r0, 8005fb0 <HAL_UART_Init+0x68>
  if(huart->gState == HAL_UART_STATE_RESET)
 8005f4a:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
{
 8005f4e:	b510      	push	{r4, lr}
  if(huart->gState == HAL_UART_STATE_RESET)
 8005f50:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005f54:	4604      	mov	r4, r0
 8005f56:	b303      	cbz	r3, 8005f9a <HAL_UART_Init+0x52>
  __HAL_UART_DISABLE(huart);
 8005f58:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005f5a:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f5c:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8005f5e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8005f62:	6813      	ldr	r3, [r2, #0]
 8005f64:	f023 0301 	bic.w	r3, r3, #1
 8005f68:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f6a:	f7ff fdff 	bl	8005b6c <UART_SetConfig>
 8005f6e:	2801      	cmp	r0, #1
 8005f70:	d018      	beq.n	8005fa4 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f74:	b9c3      	cbnz	r3, 8005fa8 <HAL_UART_Init+0x60>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f76:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8005f78:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f80:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f82:	689a      	ldr	r2, [r3, #8]
 8005f84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f88:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	f042 0201 	orr.w	r2, r2, #1
}
 8005f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8005f94:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8005f96:	f7ff bfb1 	b.w	8005efc <UART_CheckIdleState>
    huart->Lock = HAL_UNLOCKED;
 8005f9a:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8005f9e:	f7fb fcc3 	bl	8001928 <HAL_UART_MspInit>
 8005fa2:	e7d9      	b.n	8005f58 <HAL_UART_Init+0x10>
}
 8005fa4:	2001      	movs	r0, #1
 8005fa6:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8005fa8:	4620      	mov	r0, r4
 8005faa:	f7ff ff4f 	bl	8005e4c <UART_AdvFeatureConfig>
 8005fae:	e7e2      	b.n	8005f76 <HAL_UART_Init+0x2e>
}
 8005fb0:	2001      	movs	r0, #1
 8005fb2:	4770      	bx	lr

08005fb4 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005fb4:	680b      	ldr	r3, [r1, #0]
 8005fb6:	2b01      	cmp	r3, #1
{
 8005fb8:	b4f0      	push	{r4, r5, r6, r7}
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005fba:	d018      	beq.n	8005fee <FMC_SDRAM_Init+0x3a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005fbc:	6804      	ldr	r4, [r0, #0]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005fbe:	4b1a      	ldr	r3, [pc, #104]	; (8006028 <FMC_SDRAM_Init+0x74>)
 8005fc0:	684a      	ldr	r2, [r1, #4]
 8005fc2:	4023      	ands	r3, r4
 8005fc4:	688d      	ldr	r5, [r1, #8]
 8005fc6:	68cc      	ldr	r4, [r1, #12]
 8005fc8:	431a      	orrs	r2, r3
 8005fca:	690b      	ldr	r3, [r1, #16]
 8005fcc:	694f      	ldr	r7, [r1, #20]
 8005fce:	432a      	orrs	r2, r5
 8005fd0:	698e      	ldr	r6, [r1, #24]
 8005fd2:	69cd      	ldr	r5, [r1, #28]
 8005fd4:	4322      	orrs	r2, r4
 8005fd6:	6a0c      	ldr	r4, [r1, #32]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005fd8:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	433b      	orrs	r3, r7
 8005fde:	4333      	orrs	r3, r6
 8005fe0:	432b      	orrs	r3, r5
 8005fe2:	4323      	orrs	r3, r4
 8005fe4:	430b      	orrs	r3, r1
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8005fe6:	bcf0      	pop	{r4, r5, r6, r7}
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005fe8:	6003      	str	r3, [r0, #0]
}
 8005fea:	2000      	movs	r0, #0
 8005fec:	4770      	bx	lr
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005fee:	6807      	ldr	r7, [r0, #0]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005ff0:	4b0d      	ldr	r3, [pc, #52]	; (8006028 <FMC_SDRAM_Init+0x74>)
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8005ff2:	6844      	ldr	r4, [r0, #4]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8005ff4:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 8005ff8:	684a      	ldr	r2, [r1, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005ffa:	4023      	ands	r3, r4
 8005ffc:	688e      	ldr	r6, [r1, #8]
 8005ffe:	68cd      	ldr	r5, [r1, #12]
 8006000:	4313      	orrs	r3, r2
 8006002:	690c      	ldr	r4, [r1, #16]
 8006004:	69ca      	ldr	r2, [r1, #28]
 8006006:	4333      	orrs	r3, r6
 8006008:	6a0e      	ldr	r6, [r1, #32]
 800600a:	433a      	orrs	r2, r7
 800600c:	432b      	orrs	r3, r5
 800600e:	694d      	ldr	r5, [r1, #20]
 8006010:	4332      	orrs	r2, r6
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006012:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8006014:	4323      	orrs	r3, r4
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006016:	6989      	ldr	r1, [r1, #24]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006018:	4332      	orrs	r2, r6
 800601a:	432b      	orrs	r3, r5
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800601c:	6002      	str	r2, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800601e:	430b      	orrs	r3, r1
}
 8006020:	bcf0      	pop	{r4, r5, r6, r7}
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8006022:	6043      	str	r3, [r0, #4]
}
 8006024:	2000      	movs	r0, #0
 8006026:	4770      	bx	lr
 8006028:	ffff8000 	.word	0xffff8000

0800602c <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800602c:	2a01      	cmp	r2, #1
{
 800602e:	b4f0      	push	{r4, r5, r6, r7}
  if (Bank != FMC_SDRAM_BANK2) 
 8006030:	d021      	beq.n	8006076 <FMC_SDRAM_Timing_Init+0x4a>
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8006032:	684b      	ldr	r3, [r1, #4]
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006034:	6882      	ldr	r2, [r0, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006036:	680c      	ldr	r4, [r1, #0]
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8006038:	1e5d      	subs	r5, r3, #1
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800603a:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800603e:	688b      	ldr	r3, [r1, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006040:	1e67      	subs	r7, r4, #1
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8006042:	68cc      	ldr	r4, [r1, #12]
 8006044:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8006048:	1e5e      	subs	r6, r3, #1
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800604a:	690d      	ldr	r5, [r1, #16]
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800604c:	1e63      	subs	r3, r4, #1
 800604e:	433a      	orrs	r2, r7
                       (((Timing->RPDelay)-1) << 20)             |\
 8006050:	694c      	ldr	r4, [r1, #20]
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8006052:	3d01      	subs	r5, #1
                       (((Timing->RCDDelay)-1) << 24));
 8006054:	6989      	ldr	r1, [r1, #24]
 8006056:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
                       (((Timing->RPDelay)-1) << 20)             |\
 800605a:	3c01      	subs	r4, #1
                       (((Timing->RCDDelay)-1) << 24));
 800605c:	3901      	subs	r1, #1
 800605e:	ea42 3303 	orr.w	r3, r2, r3, lsl #12
 8006062:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8006066:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800606a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 800606e:	bcf0      	pop	{r4, r5, r6, r7}
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006070:	6083      	str	r3, [r0, #8]
}
 8006072:	2000      	movs	r0, #0
 8006074:	4770      	bx	lr
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006076:	6884      	ldr	r4, [r0, #8]
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8006078:	684a      	ldr	r2, [r1, #4]
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800607a:	68c3      	ldr	r3, [r0, #12]
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800607c:	1e56      	subs	r6, r2, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800607e:	680a      	ldr	r2, [r1, #0]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006080:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8006084:	688f      	ldr	r7, [r1, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006086:	1e55      	subs	r5, r2, #1
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8006088:	4a0e      	ldr	r2, [pc, #56]	; (80060c4 <FMC_SDRAM_Timing_Init+0x98>)
 800608a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800608e:	3f01      	subs	r7, #1
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8006090:	68ce      	ldr	r6, [r1, #12]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8006092:	4022      	ands	r2, r4
 8006094:	432b      	orrs	r3, r5
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8006096:	690d      	ldr	r5, [r1, #16]
                        (((Timing->RPDelay)-1) << 20)); 
 8006098:	694c      	ldr	r4, [r1, #20]
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800609a:	3e01      	subs	r6, #1
                       (((Timing->RCDDelay)-1) << 24));   
 800609c:	6989      	ldr	r1, [r1, #24]
 800609e:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 80060a2:	3d01      	subs	r5, #1
 80060a4:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
                        (((Timing->RPDelay)-1) << 20)); 
 80060a8:	3c01      	subs	r4, #1
                       (((Timing->RCDDelay)-1) << 24));   
 80060aa:	3901      	subs	r1, #1
 80060ac:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80060b0:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80060b4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80060b8:	6082      	str	r2, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80060ba:	60c3      	str	r3, [r0, #12]
}
 80060bc:	2000      	movs	r0, #0
 80060be:	bcf0      	pop	{r4, r5, r6, r7}
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	ff0f0fff 	.word	0xff0f0fff

080060c8 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80060c8:	684a      	ldr	r2, [r1, #4]
 80060ca:	680b      	ldr	r3, [r1, #0]
{
 80060cc:	b470      	push	{r4, r5, r6}
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80060ce:	4313      	orrs	r3, r2
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1) << 5) |\
                    ((Command->ModeRegisterDefinition) << 9)
 80060d0:	68ce      	ldr	r6, [r1, #12]
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 80060d2:	688a      	ldr	r2, [r1, #8]
{
 80060d4:	b083      	sub	sp, #12
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80060d6:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
  __IO uint32_t tmpr = 0;
 80060da:	2400      	movs	r4, #0
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 80060dc:	3a01      	subs	r2, #1
{
 80060de:	4605      	mov	r5, r0
  __IO uint32_t tmpr = 0;
 80060e0:	9401      	str	r4, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
  
  return HAL_OK;  
}
 80060e2:	4620      	mov	r0, r4
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80060e4:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80060e8:	9301      	str	r3, [sp, #4]
  Device->SDCMR = tmpr;
 80060ea:	9b01      	ldr	r3, [sp, #4]
 80060ec:	612b      	str	r3, [r5, #16]
}
 80060ee:	b003      	add	sp, #12
 80060f0:	bc70      	pop	{r4, r5, r6}
 80060f2:	4770      	bx	lr

080060f4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80060f4:	4602      	mov	r2, r0
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
  
  return HAL_OK;   
}
 80060f6:	2000      	movs	r0, #0
  Device->SDRTR |= (RefreshRate<<1);
 80060f8:	6953      	ldr	r3, [r2, #20]
 80060fa:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 80060fe:	6151      	str	r1, [r2, #20]
}
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop

08006104 <SDMMC_GetCmdResp2>:
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006104:	4a15      	ldr	r2, [pc, #84]	; (800615c <SDMMC_GetCmdResp2+0x58>)
{
 8006106:	4601      	mov	r1, r0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006108:	f241 3388 	movw	r3, #5000	; 0x1388
 800610c:	6812      	ldr	r2, [r2, #0]
{
 800610e:	b410      	push	{r4}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006110:	4c13      	ldr	r4, [pc, #76]	; (8006160 <SDMMC_GetCmdResp2+0x5c>)
 8006112:	fba4 0202 	umull	r0, r2, r4, r2
 8006116:	0a52      	lsrs	r2, r2, #9
 8006118:	fb03 f302 	mul.w	r3, r3, r2
 800611c:	e003      	b.n	8006126 <SDMMC_GetCmdResp2+0x22>
    if (count-- == 0)
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800611e:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8006120:	f012 0f45 	tst.w	r2, #69	; 0x45
 8006124:	d107      	bne.n	8006136 <SDMMC_GetCmdResp2+0x32>
    if (count-- == 0)
 8006126:	f113 33ff 	adds.w	r3, r3, #4294967295
 800612a:	d2f8      	bcs.n	800611e <SDMMC_GetCmdResp2+0x1a>
      return SDMMC_ERROR_TIMEOUT;
 800612c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 8006130:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006134:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006136:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8006138:	075b      	lsls	r3, r3, #29
 800613a:	d504      	bpl.n	8006146 <SDMMC_GetCmdResp2+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800613c:	2004      	movs	r0, #4
}
 800613e:	f85d 4b04 	ldr.w	r4, [sp], #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006142:	6388      	str	r0, [r1, #56]	; 0x38
}
 8006144:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006146:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8006148:	f010 0001 	ands.w	r0, r0, #1
 800614c:	d103      	bne.n	8006156 <SDMMC_GetCmdResp2+0x52>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800614e:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8006152:	638b      	str	r3, [r1, #56]	; 0x38
 8006154:	e7ec      	b.n	8006130 <SDMMC_GetCmdResp2+0x2c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006156:	2001      	movs	r0, #1
 8006158:	6388      	str	r0, [r1, #56]	; 0x38
 800615a:	e7e9      	b.n	8006130 <SDMMC_GetCmdResp2+0x2c>
 800615c:	20000000 	.word	0x20000000
 8006160:	10624dd3 	.word	0x10624dd3

08006164 <SDMMC_GetCmdResp3>:
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006164:	4a13      	ldr	r2, [pc, #76]	; (80061b4 <SDMMC_GetCmdResp3+0x50>)
{
 8006166:	4601      	mov	r1, r0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006168:	f241 3388 	movw	r3, #5000	; 0x1388
 800616c:	6812      	ldr	r2, [r2, #0]
{
 800616e:	b410      	push	{r4}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006170:	4c11      	ldr	r4, [pc, #68]	; (80061b8 <SDMMC_GetCmdResp3+0x54>)
 8006172:	fba4 0202 	umull	r0, r2, r4, r2
 8006176:	0a52      	lsrs	r2, r2, #9
 8006178:	fb03 f302 	mul.w	r3, r3, r2
 800617c:	e003      	b.n	8006186 <SDMMC_GetCmdResp3+0x22>
    if (count-- == 0)
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800617e:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8006180:	f012 0f45 	tst.w	r2, #69	; 0x45
 8006184:	d107      	bne.n	8006196 <SDMMC_GetCmdResp3+0x32>
    if (count-- == 0)
 8006186:	f113 33ff 	adds.w	r3, r3, #4294967295
 800618a:	d2f8      	bcs.n	800617e <SDMMC_GetCmdResp3+0x1a>
      return SDMMC_ERROR_TIMEOUT;
 800618c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
  }
  
  return SDMMC_ERROR_NONE;
}
 8006190:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006194:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006196:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8006198:	f010 0004 	ands.w	r0, r0, #4
 800619c:	d004      	beq.n	80061a8 <SDMMC_GetCmdResp3+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800619e:	2004      	movs	r0, #4
}
 80061a0:	f85d 4b04 	ldr.w	r4, [sp], #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80061a4:	6388      	str	r0, [r1, #56]	; 0x38
}
 80061a6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80061a8:	f240 53ff 	movw	r3, #1535	; 0x5ff
}
 80061ac:	f85d 4b04 	ldr.w	r4, [sp], #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80061b0:	638b      	str	r3, [r1, #56]	; 0x38
}
 80061b2:	4770      	bx	lr
 80061b4:	20000000 	.word	0x20000000
 80061b8:	10624dd3 	.word	0x10624dd3

080061bc <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80061bc:	4b4b      	ldr	r3, [pc, #300]	; (80062ec <SDMMC_GetCmdResp1+0x130>)
{
 80061be:	b410      	push	{r4}
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80061c0:	681b      	ldr	r3, [r3, #0]
{
 80061c2:	b083      	sub	sp, #12
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80061c4:	4c4a      	ldr	r4, [pc, #296]	; (80062f0 <SDMMC_GetCmdResp1+0x134>)
 80061c6:	fba4 4303 	umull	r4, r3, r4, r3
 80061ca:	0a5b      	lsrs	r3, r3, #9
 80061cc:	fb02 f203 	mul.w	r2, r2, r3
    if (count-- == 0)
 80061d0:	b172      	cbz	r2, 80061f0 <SDMMC_GetCmdResp1+0x34>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80061d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80061d4:	3a01      	subs	r2, #1
 80061d6:	f013 0f45 	tst.w	r3, #69	; 0x45
 80061da:	d0f9      	beq.n	80061d0 <SDMMC_GetCmdResp1+0x14>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80061dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80061de:	075a      	lsls	r2, r3, #29
 80061e0:	d50c      	bpl.n	80061fc <SDMMC_GetCmdResp1+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80061e2:	2304      	movs	r3, #4
 80061e4:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80061e6:	4618      	mov	r0, r3
}
 80061e8:	b003      	add	sp, #12
 80061ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061ee:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80061f0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80061f4:	b003      	add	sp, #12
 80061f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061fa:	4770      	bx	lr
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80061fc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80061fe:	f012 0201 	ands.w	r2, r2, #1
 8006202:	d105      	bne.n	8006210 <SDMMC_GetCmdResp1+0x54>
  return (uint8_t)(SDMMCx->RESPCMD);
 8006204:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006206:	b2db      	uxtb	r3, r3
 8006208:	4299      	cmp	r1, r3
 800620a:	d005      	beq.n	8006218 <SDMMC_GetCmdResp1+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800620c:	2001      	movs	r0, #1
 800620e:	e7f1      	b.n	80061f4 <SDMMC_GetCmdResp1+0x38>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006210:	2301      	movs	r3, #1
 8006212:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006214:	4618      	mov	r0, r3
 8006216:	e7ed      	b.n	80061f4 <SDMMC_GetCmdResp1+0x38>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8006218:	f240 54ff 	movw	r4, #1535	; 0x5ff
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800621c:	f100 0114 	add.w	r1, r0, #20
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006220:	4b34      	ldr	r3, [pc, #208]	; (80062f4 <SDMMC_GetCmdResp1+0x138>)
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8006222:	6384      	str	r4, [r0, #56]	; 0x38
  __IO uint32_t tmp = 0;
 8006224:	9201      	str	r2, [sp, #4]
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8006226:	9101      	str	r1, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 8006228:	9a01      	ldr	r2, [sp, #4]
 800622a:	6812      	ldr	r2, [r2, #0]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800622c:	4013      	ands	r3, r2
 800622e:	b12b      	cbz	r3, 800623c <SDMMC_GetCmdResp1+0x80>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006230:	2a00      	cmp	r2, #0
 8006232:	db05      	blt.n	8006240 <SDMMC_GetCmdResp1+0x84>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006234:	0053      	lsls	r3, r2, #1
 8006236:	d506      	bpl.n	8006246 <SDMMC_GetCmdResp1+0x8a>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006238:	2040      	movs	r0, #64	; 0x40
 800623a:	e7db      	b.n	80061f4 <SDMMC_GetCmdResp1+0x38>
    return SDMMC_ERROR_NONE;
 800623c:	4618      	mov	r0, r3
 800623e:	e7d9      	b.n	80061f4 <SDMMC_GetCmdResp1+0x38>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006240:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8006244:	e7d6      	b.n	80061f4 <SDMMC_GetCmdResp1+0x38>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006246:	0094      	lsls	r4, r2, #2
 8006248:	d501      	bpl.n	800624e <SDMMC_GetCmdResp1+0x92>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800624a:	2080      	movs	r0, #128	; 0x80
 800624c:	e7d2      	b.n	80061f4 <SDMMC_GetCmdResp1+0x38>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800624e:	00d1      	lsls	r1, r2, #3
 8006250:	d502      	bpl.n	8006258 <SDMMC_GetCmdResp1+0x9c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006252:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006256:	e7cd      	b.n	80061f4 <SDMMC_GetCmdResp1+0x38>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006258:	0113      	lsls	r3, r2, #4
 800625a:	d502      	bpl.n	8006262 <SDMMC_GetCmdResp1+0xa6>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800625c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006260:	e7c8      	b.n	80061f4 <SDMMC_GetCmdResp1+0x38>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006262:	0154      	lsls	r4, r2, #5
 8006264:	d502      	bpl.n	800626c <SDMMC_GetCmdResp1+0xb0>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006266:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800626a:	e7c3      	b.n	80061f4 <SDMMC_GetCmdResp1+0x38>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800626c:	01d1      	lsls	r1, r2, #7
 800626e:	d502      	bpl.n	8006276 <SDMMC_GetCmdResp1+0xba>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006270:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006274:	e7be      	b.n	80061f4 <SDMMC_GetCmdResp1+0x38>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006276:	0213      	lsls	r3, r2, #8
 8006278:	d502      	bpl.n	8006280 <SDMMC_GetCmdResp1+0xc4>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800627a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800627e:	e7b9      	b.n	80061f4 <SDMMC_GetCmdResp1+0x38>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006280:	0254      	lsls	r4, r2, #9
 8006282:	d502      	bpl.n	800628a <SDMMC_GetCmdResp1+0xce>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006284:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006288:	e7b4      	b.n	80061f4 <SDMMC_GetCmdResp1+0x38>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800628a:	0291      	lsls	r1, r2, #10
 800628c:	d502      	bpl.n	8006294 <SDMMC_GetCmdResp1+0xd8>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800628e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006292:	e7af      	b.n	80061f4 <SDMMC_GetCmdResp1+0x38>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006294:	02d3      	lsls	r3, r2, #11
 8006296:	d502      	bpl.n	800629e <SDMMC_GetCmdResp1+0xe2>
    return SDMMC_ERROR_CC_ERR;
 8006298:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800629c:	e7aa      	b.n	80061f4 <SDMMC_GetCmdResp1+0x38>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800629e:	0354      	lsls	r4, r2, #13
 80062a0:	d502      	bpl.n	80062a8 <SDMMC_GetCmdResp1+0xec>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80062a2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80062a6:	e7a5      	b.n	80061f4 <SDMMC_GetCmdResp1+0x38>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80062a8:	0391      	lsls	r1, r2, #14
 80062aa:	d502      	bpl.n	80062b2 <SDMMC_GetCmdResp1+0xf6>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80062ac:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80062b0:	e7a0      	b.n	80061f4 <SDMMC_GetCmdResp1+0x38>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80062b2:	03d3      	lsls	r3, r2, #15
 80062b4:	d502      	bpl.n	80062bc <SDMMC_GetCmdResp1+0x100>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80062b6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80062ba:	e79b      	b.n	80061f4 <SDMMC_GetCmdResp1+0x38>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80062bc:	0414      	lsls	r4, r2, #16
 80062be:	d502      	bpl.n	80062c6 <SDMMC_GetCmdResp1+0x10a>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80062c0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80062c4:	e796      	b.n	80061f4 <SDMMC_GetCmdResp1+0x38>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80062c6:	0451      	lsls	r1, r2, #17
 80062c8:	d502      	bpl.n	80062d0 <SDMMC_GetCmdResp1+0x114>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80062ca:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80062ce:	e791      	b.n	80061f4 <SDMMC_GetCmdResp1+0x38>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80062d0:	0493      	lsls	r3, r2, #18
 80062d2:	d502      	bpl.n	80062da <SDMMC_GetCmdResp1+0x11e>
    return SDMMC_ERROR_ERASE_RESET;
 80062d4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80062d8:	e78c      	b.n	80061f4 <SDMMC_GetCmdResp1+0x38>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80062da:	f012 0f08 	tst.w	r2, #8
 80062de:	bf14      	ite	ne
 80062e0:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 80062e4:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80062e8:	e784      	b.n	80061f4 <SDMMC_GetCmdResp1+0x38>
 80062ea:	bf00      	nop
 80062ec:	20000000 	.word	0x20000000
 80062f0:	10624dd3 	.word	0x10624dd3
 80062f4:	fdffe008 	.word	0xfdffe008

080062f8 <SDMMC_Init>:
{
 80062f8:	b084      	sub	sp, #16
 80062fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062fc:	f10d 0e18 	add.w	lr, sp, #24
             Init.ClockPowerSave      |\
 8006300:	9e09      	ldr	r6, [sp, #36]	; 0x24
{
 8006302:	4607      	mov	r7, r0
             Init.BusWide             |\
 8006304:	9d0a      	ldr	r5, [sp, #40]	; 0x28
             Init.HardwareFlowControl |\
 8006306:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
}
 8006308:	2000      	movs	r0, #0
{
 800630a:	e88e 000e 	stmia.w	lr, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 800630e:	460b      	mov	r3, r1
 8006310:	9907      	ldr	r1, [sp, #28]
             Init.ClockBypass         |\
 8006312:	9a08      	ldr	r2, [sp, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006314:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006316:	6879      	ldr	r1, [r7, #4]
             Init.ClockBypass         |\
 8006318:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800631a:	4a05      	ldr	r2, [pc, #20]	; (8006330 <SDMMC_Init+0x38>)
             Init.ClockPowerSave      |\
 800631c:	4333      	orrs	r3, r6
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800631e:	400a      	ands	r2, r1
             Init.BusWide             |\
 8006320:	432b      	orrs	r3, r5
             Init.HardwareFlowControl |\
 8006322:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006324:	4313      	orrs	r3, r2
 8006326:	607b      	str	r3, [r7, #4]
}
 8006328:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800632c:	b004      	add	sp, #16
 800632e:	4770      	bx	lr
 8006330:	ffff8100 	.word	0xffff8100

08006334 <SDMMC_ReadFIFO>:
 8006334:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop

0800633c <SDMMC_PowerState_ON>:
{  
 800633c:	4603      	mov	r3, r0
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800633e:	2203      	movs	r2, #3
}
 8006340:	2000      	movs	r0, #0
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8006342:	601a      	str	r2, [r3, #0]
}
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop

08006348 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8006348:	6800      	ldr	r0, [r0, #0]
}
 800634a:	f000 0003 	and.w	r0, r0, #3
 800634e:	4770      	bx	lr

08006350 <SDMMC_GetResponse>:
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8006350:	3014      	adds	r0, #20
{
 8006352:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8006354:	2300      	movs	r3, #0
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8006356:	4401      	add	r1, r0
  __IO uint32_t tmp = 0;
 8006358:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800635a:	9101      	str	r1, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 800635c:	9b01      	ldr	r3, [sp, #4]
 800635e:	6818      	ldr	r0, [r3, #0]
}  
 8006360:	b002      	add	sp, #8
 8006362:	4770      	bx	lr

08006364 <SDMMC_ConfigData>:
{
 8006364:	b470      	push	{r4, r5, r6}
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006366:	688b      	ldr	r3, [r1, #8]
{
 8006368:	4602      	mov	r2, r0
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800636a:	68cd      	ldr	r5, [r1, #12]
}
 800636c:	2000      	movs	r0, #0
  SDMMCx->DTIMER = Data->DataTimeOut;
 800636e:	680e      	ldr	r6, [r1, #0]
  SDMMCx->DLEN = Data->DataLength;
 8006370:	684c      	ldr	r4, [r1, #4]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006372:	432b      	orrs	r3, r5
                       Data->TransferDir   |\
 8006374:	690d      	ldr	r5, [r1, #16]
  SDMMCx->DTIMER = Data->DataTimeOut;
 8006376:	6256      	str	r6, [r2, #36]	; 0x24
                       Data->TransferDir   |\
 8006378:	432b      	orrs	r3, r5
  SDMMCx->DLEN = Data->DataLength;
 800637a:	6294      	str	r4, [r2, #40]	; 0x28
                       Data->TransferMode  |\
 800637c:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800637e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                       Data->TransferMode  |\
 8006380:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006382:	f021 01f7 	bic.w	r1, r1, #247	; 0xf7
 8006386:	430b      	orrs	r3, r1
}
 8006388:	bc70      	pop	{r4, r5, r6}
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800638a:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop

08006390 <SDMMC_CmdBlockLength>:
{
 8006390:	b430      	push	{r4, r5}
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006392:	4b06      	ldr	r3, [pc, #24]	; (80063ac <SDMMC_CmdBlockLength+0x1c>)
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8006394:	f241 3288 	movw	r2, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 8006398:	6081      	str	r1, [r0, #8]
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800639a:	2110      	movs	r1, #16
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800639c:	68c5      	ldr	r5, [r0, #12]
 800639e:	402b      	ands	r3, r5
 80063a0:	f443 638a 	orr.w	r3, r3, #1104	; 0x450
}
 80063a4:	bc30      	pop	{r4, r5}
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80063a6:	60c3      	str	r3, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80063a8:	f7ff bf08 	b.w	80061bc <SDMMC_GetCmdResp1>
 80063ac:	fffff000 	.word	0xfffff000

080063b0 <SDMMC_CmdSelDesel>:
{
 80063b0:	b470      	push	{r4, r5, r6}
  SDMMCx->ARG = Command->Argument;
 80063b2:	6082      	str	r2, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80063b4:	f240 4447 	movw	r4, #1095	; 0x447
 80063b8:	68c6      	ldr	r6, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80063ba:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80063be:	4d04      	ldr	r5, [pc, #16]	; (80063d0 <SDMMC_CmdSelDesel+0x20>)
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80063c0:	2107      	movs	r1, #7
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80063c2:	4035      	ands	r5, r6
 80063c4:	432c      	orrs	r4, r5
 80063c6:	60c4      	str	r4, [r0, #12]
}
 80063c8:	bc70      	pop	{r4, r5, r6}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80063ca:	f7ff bef7 	b.w	80061bc <SDMMC_GetCmdResp1>
 80063ce:	bf00      	nop
 80063d0:	fffff000 	.word	0xfffff000

080063d4 <SDMMC_CmdGoIdleState>:
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80063d4:	4b13      	ldr	r3, [pc, #76]	; (8006424 <SDMMC_CmdGoIdleState+0x50>)
{
 80063d6:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 80063d8:	2200      	movs	r2, #0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80063da:	6818      	ldr	r0, [r3, #0]
 80063dc:	f241 3388 	movw	r3, #5000	; 0x1388
{
 80063e0:	b410      	push	{r4}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80063e2:	4c11      	ldr	r4, [pc, #68]	; (8006428 <SDMMC_CmdGoIdleState+0x54>)
  SDMMCx->ARG = Command->Argument;
 80063e4:	608a      	str	r2, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80063e6:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80063ea:	fba4 4000 	umull	r4, r0, r4, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80063ee:	68cc      	ldr	r4, [r1, #12]
 80063f0:	4022      	ands	r2, r4
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80063f2:	0a40      	lsrs	r0, r0, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80063f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80063f8:	fb03 f300 	mul.w	r3, r3, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80063fc:	60ca      	str	r2, [r1, #12]
 80063fe:	e002      	b.n	8006406 <SDMMC_CmdGoIdleState+0x32>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8006400:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8006402:	0612      	lsls	r2, r2, #24
 8006404:	d407      	bmi.n	8006416 <SDMMC_CmdGoIdleState+0x42>
    if (count-- == 0)
 8006406:	f113 33ff 	adds.w	r3, r3, #4294967295
 800640a:	d2f9      	bcs.n	8006400 <SDMMC_CmdGoIdleState+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800640c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8006410:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006414:	4770      	bx	lr
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8006416:	f240 53ff 	movw	r3, #1535	; 0x5ff
  return SDMMC_ERROR_NONE;
 800641a:	2000      	movs	r0, #0
}
 800641c:	f85d 4b04 	ldr.w	r4, [sp], #4
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8006420:	638b      	str	r3, [r1, #56]	; 0x38
}
 8006422:	4770      	bx	lr
 8006424:	20000000 	.word	0x20000000
 8006428:	10624dd3 	.word	0x10624dd3

0800642c <SDMMC_CmdOperCond>:
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800642c:	4b1a      	ldr	r3, [pc, #104]	; (8006498 <SDMMC_CmdOperCond+0x6c>)
{
 800642e:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 8006430:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006434:	6818      	ldr	r0, [r3, #0]
 8006436:	f241 3388 	movw	r3, #5000	; 0x1388
{
 800643a:	b410      	push	{r4}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800643c:	4c17      	ldr	r4, [pc, #92]	; (800649c <SDMMC_CmdOperCond+0x70>)
  SDMMCx->ARG = Command->Argument;
 800643e:	608a      	str	r2, [r1, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006440:	fba4 4000 	umull	r4, r0, r4, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006444:	4a16      	ldr	r2, [pc, #88]	; (80064a0 <SDMMC_CmdOperCond+0x74>)
 8006446:	68cc      	ldr	r4, [r1, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006448:	0a40      	lsrs	r0, r0, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800644a:	4022      	ands	r2, r4
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800644c:	fb03 f300 	mul.w	r3, r3, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006450:	f442 6289 	orr.w	r2, r2, #1096	; 0x448
 8006454:	60ca      	str	r2, [r1, #12]
 8006456:	e003      	b.n	8006460 <SDMMC_CmdOperCond+0x34>
    if (count-- == 0)
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8006458:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800645a:	f012 0f45 	tst.w	r2, #69	; 0x45
 800645e:	d107      	bne.n	8006470 <SDMMC_CmdOperCond+0x44>
    if (count-- == 0)
 8006460:	f113 33ff 	adds.w	r3, r3, #4294967295
 8006464:	d2f8      	bcs.n	8006458 <SDMMC_CmdOperCond+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8006466:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800646a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800646e:	4770      	bx	lr

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006470:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8006472:	f010 0004 	ands.w	r0, r0, #4
 8006476:	d005      	beq.n	8006484 <SDMMC_CmdOperCond+0x58>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8006478:	2340      	movs	r3, #64	; 0x40
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800647a:	2004      	movs	r0, #4
}
 800647c:	f85d 4b04 	ldr.w	r4, [sp], #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8006480:	638b      	str	r3, [r1, #56]	; 0x38
}
 8006482:	4770      	bx	lr
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8006484:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8006486:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800648a:	d002      	beq.n	8006492 <SDMMC_CmdOperCond+0x66>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800648c:	2340      	movs	r3, #64	; 0x40
 800648e:	638b      	str	r3, [r1, #56]	; 0x38
 8006490:	e7eb      	b.n	800646a <SDMMC_CmdOperCond+0x3e>
  }
  
  return SDMMC_ERROR_NONE;
 8006492:	4618      	mov	r0, r3
  return errorstate;
 8006494:	e7e9      	b.n	800646a <SDMMC_CmdOperCond+0x3e>
 8006496:	bf00      	nop
 8006498:	20000000 	.word	0x20000000
 800649c:	10624dd3 	.word	0x10624dd3
 80064a0:	fffff000 	.word	0xfffff000

080064a4 <SDMMC_CmdAppCommand>:
{
 80064a4:	b470      	push	{r4, r5, r6}
  SDMMCx->ARG = Command->Argument;
 80064a6:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80064a8:	f240 4477 	movw	r4, #1143	; 0x477
 80064ac:	68c6      	ldr	r6, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80064ae:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80064b2:	4d04      	ldr	r5, [pc, #16]	; (80064c4 <SDMMC_CmdAppCommand+0x20>)
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80064b4:	2137      	movs	r1, #55	; 0x37
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80064b6:	4035      	ands	r5, r6
 80064b8:	432c      	orrs	r4, r5
 80064ba:	60c4      	str	r4, [r0, #12]
}
 80064bc:	bc70      	pop	{r4, r5, r6}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80064be:	f7ff be7d 	b.w	80061bc <SDMMC_GetCmdResp1>
 80064c2:	bf00      	nop
 80064c4:	fffff000 	.word	0xfffff000

080064c8 <SDMMC_CmdAppOperCommand>:
{
 80064c8:	b430      	push	{r4, r5}
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 80064ca:	4d06      	ldr	r5, [pc, #24]	; (80064e4 <SDMMC_CmdAppOperCommand+0x1c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80064cc:	f240 4269 	movw	r2, #1129	; 0x469
 80064d0:	4c05      	ldr	r4, [pc, #20]	; (80064e8 <SDMMC_CmdAppOperCommand+0x20>)
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 80064d2:	430d      	orrs	r5, r1
  SDMMCx->ARG = Command->Argument;
 80064d4:	6085      	str	r5, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80064d6:	68c1      	ldr	r1, [r0, #12]
 80064d8:	400c      	ands	r4, r1
 80064da:	4322      	orrs	r2, r4
}
 80064dc:	bc30      	pop	{r4, r5}
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80064de:	60c2      	str	r2, [r0, #12]
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80064e0:	f7ff be40 	b.w	8006164 <SDMMC_GetCmdResp3>
 80064e4:	80100000 	.word	0x80100000
 80064e8:	fffff000 	.word	0xfffff000

080064ec <SDMMC_CmdSendSCR>:
  SDMMCx->ARG = Command->Argument;
 80064ec:	2200      	movs	r2, #0
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80064ee:	2133      	movs	r1, #51	; 0x33
{
 80064f0:	b470      	push	{r4, r5, r6}
  SDMMCx->ARG = Command->Argument;
 80064f2:	6082      	str	r2, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80064f4:	f240 4473 	movw	r4, #1139	; 0x473
 80064f8:	68c6      	ldr	r6, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80064fa:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80064fe:	4d03      	ldr	r5, [pc, #12]	; (800650c <SDMMC_CmdSendSCR+0x20>)
 8006500:	4035      	ands	r5, r6
 8006502:	432c      	orrs	r4, r5
 8006504:	60c4      	str	r4, [r0, #12]
}
 8006506:	bc70      	pop	{r4, r5, r6}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8006508:	f7ff be58 	b.w	80061bc <SDMMC_GetCmdResp1>
 800650c:	fffff000 	.word	0xfffff000

08006510 <SDMMC_CmdSendCID>:
{
 8006510:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 8006512:	2400      	movs	r4, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006514:	4905      	ldr	r1, [pc, #20]	; (800652c <SDMMC_CmdSendCID+0x1c>)
 8006516:	f240 42c2 	movw	r2, #1218	; 0x4c2
  SDMMCx->ARG = Command->Argument;
 800651a:	6084      	str	r4, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800651c:	68c4      	ldr	r4, [r0, #12]
 800651e:	4021      	ands	r1, r4
}
 8006520:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006524:	430a      	orrs	r2, r1
 8006526:	60c2      	str	r2, [r0, #12]
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006528:	f7ff bdec 	b.w	8006104 <SDMMC_GetCmdResp2>
 800652c:	fffff000 	.word	0xfffff000

08006530 <SDMMC_CmdSendCSD>:
{
 8006530:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 8006532:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006534:	f240 42c9 	movw	r2, #1225	; 0x4c9
 8006538:	68c1      	ldr	r1, [r0, #12]
 800653a:	4c04      	ldr	r4, [pc, #16]	; (800654c <SDMMC_CmdSendCSD+0x1c>)
 800653c:	400c      	ands	r4, r1
 800653e:	4322      	orrs	r2, r4
}
 8006540:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006544:	60c2      	str	r2, [r0, #12]
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006546:	f7ff bddd 	b.w	8006104 <SDMMC_GetCmdResp2>
 800654a:	bf00      	nop
 800654c:	fffff000 	.word	0xfffff000

08006550 <SDMMC_CmdSetRelAdd>:
{
 8006550:	b470      	push	{r4, r5, r6}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006552:	4b2a      	ldr	r3, [pc, #168]	; (80065fc <SDMMC_CmdSetRelAdd+0xac>)
  SDMMCx->ARG = Command->Argument;
 8006554:	2500      	movs	r5, #0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006556:	4a2a      	ldr	r2, [pc, #168]	; (8006600 <SDMMC_CmdSetRelAdd+0xb0>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006558:	f240 4443 	movw	r4, #1091	; 0x443
  SDMMCx->ARG = Command->Argument;
 800655c:	6085      	str	r5, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800655e:	f5a5 5580 	sub.w	r5, r5, #4096	; 0x1000
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006562:	681b      	ldr	r3, [r3, #0]
{
 8006564:	b083      	sub	sp, #12
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006566:	68c6      	ldr	r6, [r0, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006568:	fba2 3203 	umull	r3, r2, r2, r3
 800656c:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006570:	4035      	ands	r5, r6
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006572:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006574:	432c      	orrs	r4, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006576:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800657a:	60c4      	str	r4, [r0, #12]
 800657c:	e003      	b.n	8006586 <SDMMC_CmdSetRelAdd+0x36>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800657e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8006580:	f012 0f45 	tst.w	r2, #69	; 0x45
 8006584:	d107      	bne.n	8006596 <SDMMC_CmdSetRelAdd+0x46>
    if (count-- == 0)
 8006586:	f113 33ff 	adds.w	r3, r3, #4294967295
 800658a:	d2f8      	bcs.n	800657e <SDMMC_CmdSetRelAdd+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800658c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8006590:	b003      	add	sp, #12
 8006592:	bc70      	pop	{r4, r5, r6}
 8006594:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006596:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006598:	075c      	lsls	r4, r3, #29
 800659a:	d505      	bpl.n	80065a8 <SDMMC_CmdSetRelAdd+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800659c:	2304      	movs	r3, #4
 800659e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80065a0:	4618      	mov	r0, r3
}
 80065a2:	b003      	add	sp, #12
 80065a4:	bc70      	pop	{r4, r5, r6}
 80065a6:	4770      	bx	lr
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80065a8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80065aa:	f013 0301 	ands.w	r3, r3, #1
 80065ae:	d105      	bne.n	80065bc <SDMMC_CmdSetRelAdd+0x6c>
  return (uint8_t)(SDMMCx->RESPCMD);
 80065b0:	6902      	ldr	r2, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80065b2:	b2d2      	uxtb	r2, r2
 80065b4:	2a03      	cmp	r2, #3
 80065b6:	d005      	beq.n	80065c4 <SDMMC_CmdSetRelAdd+0x74>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80065b8:	2001      	movs	r0, #1
 80065ba:	e7e9      	b.n	8006590 <SDMMC_CmdSetRelAdd+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80065bc:	2301      	movs	r3, #1
 80065be:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80065c0:	4618      	mov	r0, r3
 80065c2:	e7e5      	b.n	8006590 <SDMMC_CmdSetRelAdd+0x40>
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 80065c4:	f100 0214 	add.w	r2, r0, #20
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80065c8:	f240 54ff 	movw	r4, #1535	; 0x5ff
 80065cc:	6384      	str	r4, [r0, #56]	; 0x38
  __IO uint32_t tmp = 0;
 80065ce:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 80065d0:	9201      	str	r2, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 80065d2:	9b01      	ldr	r3, [sp, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80065d6:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 80065da:	d004      	beq.n	80065e6 <SDMMC_CmdSetRelAdd+0x96>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80065dc:	045a      	lsls	r2, r3, #17
 80065de:	d505      	bpl.n	80065ec <SDMMC_CmdSetRelAdd+0x9c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80065e0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80065e4:	e7d4      	b.n	8006590 <SDMMC_CmdSetRelAdd+0x40>
    *pRCA = (uint16_t) (response_r1 >> 16);
 80065e6:	0c1b      	lsrs	r3, r3, #16
 80065e8:	800b      	strh	r3, [r1, #0]
 80065ea:	e7d1      	b.n	8006590 <SDMMC_CmdSetRelAdd+0x40>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80065ec:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80065f0:	bf14      	ite	ne
 80065f2:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 80065f6:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80065fa:	e7c9      	b.n	8006590 <SDMMC_CmdSetRelAdd+0x40>
 80065fc:	20000000 	.word	0x20000000
 8006600:	10624dd3 	.word	0x10624dd3

08006604 <SDMMC_CmdSwitch>:
{
 8006604:	b470      	push	{r4, r5, r6}
  SDMMCx->ARG = Command->Argument;
 8006606:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006608:	f240 4446 	movw	r4, #1094	; 0x446
 800660c:	68c6      	ldr	r6, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 800660e:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006612:	4d04      	ldr	r5, [pc, #16]	; (8006624 <SDMMC_CmdSwitch+0x20>)
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 8006614:	2106      	movs	r1, #6
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006616:	4035      	ands	r5, r6
 8006618:	432c      	orrs	r4, r5
 800661a:	60c4      	str	r4, [r0, #12]
}
 800661c:	bc70      	pop	{r4, r5, r6}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 800661e:	f7ff bdcd 	b.w	80061bc <SDMMC_GetCmdResp1>
 8006622:	bf00      	nop
 8006624:	fffff000 	.word	0xfffff000

08006628 <SDMMC_CmdBusWidth>:
 8006628:	f7ff bfec 	b.w	8006604 <SDMMC_CmdSwitch>

0800662c <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 800662c:	2000      	movs	r0, #0
 800662e:	4770      	bx	lr

08006630 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop

08006634 <ft5336_Init>:
{
 8006634:	b510      	push	{r4, lr}
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
 8006636:	4c05      	ldr	r4, [pc, #20]	; (800664c <ft5336_Init+0x18>)
  TS_IO_Delay(200);
 8006638:	20c8      	movs	r0, #200	; 0xc8
 800663a:	f000 fa29 	bl	8006a90 <TS_IO_Delay>
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 800663e:	7823      	ldrb	r3, [r4, #0]
 8006640:	b91b      	cbnz	r3, 800664a <ft5336_Init+0x16>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8006642:	f000 f9f7 	bl	8006a34 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8006646:	2301      	movs	r3, #1
 8006648:	7023      	strb	r3, [r4, #0]
 800664a:	bd10      	pop	{r4, pc}
 800664c:	20000378 	.word	0x20000378

08006650 <ft5336_ReadID>:
{
 8006650:	b530      	push	{r4, r5, lr}
  return(ft5336_handle.i2cInitialized);
 8006652:	4c11      	ldr	r4, [pc, #68]	; (8006698 <ft5336_ReadID+0x48>)
{
 8006654:	b083      	sub	sp, #12
  volatile uint8_t ucReadId = 0;
 8006656:	2200      	movs	r2, #0
{
 8006658:	4605      	mov	r5, r0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 800665a:	7823      	ldrb	r3, [r4, #0]
  volatile uint8_t ucReadId = 0;
 800665c:	f88d 2007 	strb.w	r2, [sp, #7]
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8006660:	b1ab      	cbz	r3, 800668e <ft5336_ReadID+0x3e>
 8006662:	b2ed      	uxtb	r5, r5
{
 8006664:	2400      	movs	r4, #0
 8006666:	e001      	b.n	800666c <ft5336_ReadID+0x1c>
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8006668:	2b51      	cmp	r3, #81	; 0x51
 800666a:	d00c      	beq.n	8006686 <ft5336_ReadID+0x36>
 800666c:	3401      	adds	r4, #1
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800666e:	21a8      	movs	r1, #168	; 0xa8
 8006670:	4628      	mov	r0, r5
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8006672:	b2e4      	uxtb	r4, r4
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8006674:	f000 f9f6 	bl	8006a64 <TS_IO_Read>
 8006678:	f88d 0007 	strb.w	r0, [sp, #7]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800667c:	2c02      	cmp	r4, #2
    if(ucReadId == FT5336_ID_VALUE)
 800667e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006682:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8006684:	d9f0      	bls.n	8006668 <ft5336_ReadID+0x18>
  return (ucReadId);
 8006686:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800668a:	b003      	add	sp, #12
 800668c:	bd30      	pop	{r4, r5, pc}
    TS_IO_Init();
 800668e:	f000 f9d1 	bl	8006a34 <TS_IO_Init>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8006692:	2301      	movs	r3, #1
 8006694:	7023      	strb	r3, [r4, #0]
 8006696:	e7e4      	b.n	8006662 <ft5336_ReadID+0x12>
 8006698:	20000378 	.word	0x20000378

0800669c <ft5336_TS_DetectTouch>:
{
 800669c:	b510      	push	{r4, lr}
  volatile uint8_t nbTouch = 0;
 800669e:	2400      	movs	r4, #0
{
 80066a0:	b082      	sub	sp, #8
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80066a2:	b2c0      	uxtb	r0, r0
 80066a4:	2102      	movs	r1, #2
  volatile uint8_t nbTouch = 0;
 80066a6:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80066aa:	f000 f9db 	bl	8006a64 <TS_IO_Read>
 80066ae:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 80066b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80066b6:	f003 030f 	and.w	r3, r3, #15
 80066ba:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80066be:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80066c2:	2b05      	cmp	r3, #5
 80066c4:	d901      	bls.n	80066ca <ft5336_TS_DetectTouch+0x2e>
    nbTouch = 0;
 80066c6:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 80066ca:	f89d 1007 	ldrb.w	r1, [sp, #7]
  ft5336_handle.currActiveTouchIdx = 0;
 80066ce:	2200      	movs	r2, #0
  ft5336_handle.currActiveTouchNb = nbTouch;
 80066d0:	4b03      	ldr	r3, [pc, #12]	; (80066e0 <ft5336_TS_DetectTouch+0x44>)
  return(nbTouch);
 80066d2:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 80066d6:	7059      	strb	r1, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 80066d8:	709a      	strb	r2, [r3, #2]
}
 80066da:	b002      	add	sp, #8
 80066dc:	bd10      	pop	{r4, pc}
 80066de:	bf00      	nop
 80066e0:	20000378 	.word	0x20000378

080066e4 <ft5336_TS_GetXY>:
{
 80066e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80066e8:	4c2a      	ldr	r4, [pc, #168]	; (8006794 <ft5336_TS_GetXY+0xb0>)
{
 80066ea:	b082      	sub	sp, #8
  volatile uint8_t ucReadData = 0;
 80066ec:	2700      	movs	r7, #0
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80066ee:	78a3      	ldrb	r3, [r4, #2]
 80066f0:	7865      	ldrb	r5, [r4, #1]
  volatile uint8_t ucReadData = 0;
 80066f2:	f88d 7007 	strb.w	r7, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80066f6:	429d      	cmp	r5, r3
 80066f8:	d944      	bls.n	8006784 <ft5336_TS_GetXY+0xa0>
 80066fa:	2b09      	cmp	r3, #9
 80066fc:	d845      	bhi.n	800678a <ft5336_TS_GetXY+0xa6>
 80066fe:	4e26      	ldr	r6, [pc, #152]	; (8006798 <ft5336_TS_GetXY+0xb4>)
 8006700:	18f5      	adds	r5, r6, r3
 8006702:	5cf3      	ldrb	r3, [r6, r3]
 8006704:	f895 a00c 	ldrb.w	sl, [r5, #12]
 8006708:	f895 9018 	ldrb.w	r9, [r5, #24]
 800670c:	f895 7024 	ldrb.w	r7, [r5, #36]	; 0x24
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8006710:	b2c5      	uxtb	r5, r0
 8006712:	4688      	mov	r8, r1
 8006714:	4619      	mov	r1, r3
 8006716:	4616      	mov	r6, r2
 8006718:	4628      	mov	r0, r5
 800671a:	f000 f9a3 	bl	8006a64 <TS_IO_Read>
 800671e:	4603      	mov	r3, r0
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8006720:	4651      	mov	r1, sl
 8006722:	4628      	mov	r0, r5
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8006724:	f88d 3007 	strb.w	r3, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8006728:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800672c:	80a3      	strh	r3, [r4, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800672e:	f000 f999 	bl	8006a64 <TS_IO_Read>
 8006732:	4603      	mov	r3, r0
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8006734:	88a2      	ldrh	r2, [r4, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8006736:	4649      	mov	r1, r9
 8006738:	4628      	mov	r0, r5
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800673a:	f88d 3007 	strb.w	r3, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800673e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006742:	021b      	lsls	r3, r3, #8
 8006744:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006748:	4313      	orrs	r3, r2
    *X = coord;
 800674a:	f8a8 3000 	strh.w	r3, [r8]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800674e:	80a3      	strh	r3, [r4, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8006750:	f000 f988 	bl	8006a64 <TS_IO_Read>
 8006754:	4603      	mov	r3, r0
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8006756:	4639      	mov	r1, r7
 8006758:	4628      	mov	r0, r5
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800675a:	f88d 3007 	strb.w	r3, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800675e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006762:	80a3      	strh	r3, [r4, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8006764:	f000 f97e 	bl	8006a64 <TS_IO_Read>
 8006768:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800676c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006770:	88a1      	ldrh	r1, [r4, #4]
 8006772:	021b      	lsls	r3, r3, #8
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8006774:	78a2      	ldrb	r2, [r4, #2]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8006776:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 800677a:	3201      	adds	r2, #1
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800677c:	430b      	orrs	r3, r1
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 800677e:	70a2      	strb	r2, [r4, #2]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8006780:	80a3      	strh	r3, [r4, #4]
    *Y = coord;
 8006782:	8033      	strh	r3, [r6, #0]
}
 8006784:	b002      	add	sp, #8
 8006786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800678a:	46b9      	mov	r9, r7
 800678c:	46ba      	mov	sl, r7
 800678e:	463b      	mov	r3, r7
 8006790:	e7be      	b.n	8006710 <ft5336_TS_GetXY+0x2c>
 8006792:	bf00      	nop
 8006794:	20000378 	.word	0x20000378
 8006798:	08019744 	.word	0x08019744

0800679c <ft5336_TS_EnableIT>:
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800679c:	b2c0      	uxtb	r0, r0
 800679e:	2201      	movs	r2, #1
 80067a0:	21a4      	movs	r1, #164	; 0xa4
 80067a2:	f000 b94d 	b.w	8006a40 <TS_IO_Write>
 80067a6:	bf00      	nop

080067a8 <ft5336_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80067a8:	b2c0      	uxtb	r0, r0
 80067aa:	2200      	movs	r2, #0
 80067ac:	21a4      	movs	r1, #164	; 0xa4
 80067ae:	f000 b947 	b.w	8006a40 <TS_IO_Write>
 80067b2:	bf00      	nop

080067b4 <ft5336_TS_Start>:
 80067b4:	f7ff bff8 	b.w	80067a8 <ft5336_TS_DisableIT>

080067b8 <ft5336_Reset>:
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop

080067bc <ft5336_TS_GetGestureID>:
{
 80067bc:	b510      	push	{r4, lr}
  volatile uint8_t ucReadData = 0;
 80067be:	2300      	movs	r3, #0
{
 80067c0:	b082      	sub	sp, #8
 80067c2:	460c      	mov	r4, r1
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 80067c4:	b2c0      	uxtb	r0, r0
 80067c6:	2101      	movs	r1, #1
  volatile uint8_t ucReadData = 0;
 80067c8:	f88d 3007 	strb.w	r3, [sp, #7]
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 80067cc:	f000 f94a 	bl	8006a64 <TS_IO_Read>
 80067d0:	f88d 0007 	strb.w	r0, [sp, #7]
  * pGestureId = ucReadData;
 80067d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80067d8:	6023      	str	r3, [r4, #0]
}
 80067da:	b002      	add	sp, #8
 80067dc:	bd10      	pop	{r4, pc}
 80067de:	bf00      	nop

080067e0 <ft5336_TS_GetTouchInfo>:
{
 80067e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80067e4:	4d1e      	ldr	r5, [pc, #120]	; (8006860 <ft5336_TS_GetTouchInfo+0x80>)
{
 80067e6:	b082      	sub	sp, #8
  volatile uint8_t ucReadData = 0;
 80067e8:	2400      	movs	r4, #0
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80067ea:	786d      	ldrb	r5, [r5, #1]
  volatile uint8_t ucReadData = 0;
 80067ec:	f88d 4007 	strb.w	r4, [sp, #7]
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80067f0:	428d      	cmp	r5, r1
 80067f2:	d92e      	bls.n	8006852 <ft5336_TS_GetTouchInfo+0x72>
 80067f4:	2909      	cmp	r1, #9
 80067f6:	d82f      	bhi.n	8006858 <ft5336_TS_GetTouchInfo+0x78>
 80067f8:	4c1a      	ldr	r4, [pc, #104]	; (8006864 <ft5336_TS_GetTouchInfo+0x84>)
 80067fa:	440c      	add	r4, r1
 80067fc:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8006800:	f894 503c 	ldrb.w	r5, [r4, #60]	; 0x3c
 8006804:	f894 6048 	ldrb.w	r6, [r4, #72]	; 0x48
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8006808:	b2c4      	uxtb	r4, r0
 800680a:	4690      	mov	r8, r2
 800680c:	461f      	mov	r7, r3
 800680e:	4620      	mov	r0, r4
 8006810:	f000 f928 	bl	8006a64 <TS_IO_Read>
 8006814:	4603      	mov	r3, r0
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8006816:	4629      	mov	r1, r5
 8006818:	4620      	mov	r0, r4
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800681a:	f88d 3007 	strb.w	r3, [sp, #7]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 800681e:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8006822:	9b08      	ldr	r3, [sp, #32]
 8006824:	09ad      	lsrs	r5, r5, #6
 8006826:	601d      	str	r5, [r3, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8006828:	f000 f91c 	bl	8006a64 <TS_IO_Read>
 800682c:	4603      	mov	r3, r0
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 800682e:	4631      	mov	r1, r6
 8006830:	4620      	mov	r0, r4
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8006832:	f88d 3007 	strb.w	r3, [sp, #7]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8006836:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800683a:	f8c8 3000 	str.w	r3, [r8]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 800683e:	f000 f911 	bl	8006a64 <TS_IO_Read>
 8006842:	f88d 0007 	strb.w	r0, [sp, #7]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8006846:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800684a:	0912      	lsrs	r2, r2, #4
 800684c:	f002 0204 	and.w	r2, r2, #4
 8006850:	603a      	str	r2, [r7, #0]
}
 8006852:	b002      	add	sp, #8
 8006854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8006858:	4626      	mov	r6, r4
 800685a:	4625      	mov	r5, r4
 800685c:	4621      	mov	r1, r4
 800685e:	e7d3      	b.n	8006808 <ft5336_TS_GetTouchInfo+0x28>
 8006860:	20000378 	.word	0x20000378
 8006864:	08019744 	.word	0x08019744

08006868 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8006868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800686a:	b08b      	sub	sp, #44	; 0x2c
 800686c:	4604      	mov	r4, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800686e:	f7fc fd57 	bl	8003320 <HAL_I2C_GetState>
 8006872:	2800      	cmp	r0, #0
 8006874:	d151      	bne.n	800691a <I2Cx_Init+0xb2>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8006876:	4b4c      	ldr	r3, [pc, #304]	; (80069a8 <I2Cx_Init+0x140>)
 8006878:	4605      	mov	r5, r0
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800687a:	4a4c      	ldr	r2, [pc, #304]	; (80069ac <I2Cx_Init+0x144>)
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800687c:	429c      	cmp	r4, r3
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800687e:	4e4c      	ldr	r6, [pc, #304]	; (80069b0 <I2Cx_Init+0x148>)
    i2c_handler->Init.OwnAddress1      = 0;
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8006880:	f04f 0301 	mov.w	r3, #1
    i2c_handler->Init.OwnAddress1      = 0;
 8006884:	60a0      	str	r0, [r4, #8]
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8006886:	d04a      	beq.n	800691e <I2Cx_Init+0xb6>
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8006888:	6062      	str	r2, [r4, #4]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800688a:	2702      	movs	r7, #2
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800688c:	6125      	str	r5, [r4, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800688e:	f44f 7080 	mov.w	r0, #256	; 0x100
    i2c_handler->Init.OwnAddress2      = 0;
 8006892:	6165      	str	r5, [r4, #20]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8006894:	2112      	movs	r1, #18
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8006896:	61e5      	str	r5, [r4, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8006898:	6225      	str	r5, [r4, #32]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800689a:	60e3      	str	r3, [r4, #12]
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800689c:	6b33      	ldr	r3, [r6, #48]	; 0x30
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800689e:	4a45      	ldr	r2, [pc, #276]	; (80069b4 <I2Cx_Init+0x14c>)
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80068a0:	f043 0302 	orr.w	r3, r3, #2
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80068a4:	6022      	str	r2, [r4, #0]
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80068a6:	2204      	movs	r2, #4
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80068a8:	6333      	str	r3, [r6, #48]	; 0x30
 80068aa:	6b33      	ldr	r3, [r6, #48]	; 0x30
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80068ac:	9005      	str	r0, [sp, #20]
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80068ae:	403b      	ands	r3, r7
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80068b0:	9106      	str	r1, [sp, #24]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80068b2:	4841      	ldr	r0, [pc, #260]	; (80069b8 <I2Cx_Init+0x150>)
 80068b4:	a905      	add	r1, sp, #20
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80068b6:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80068b8:	9209      	str	r2, [sp, #36]	; 0x24
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80068ba:	9b03      	ldr	r3, [sp, #12]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80068bc:	9507      	str	r5, [sp, #28]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80068be:	9708      	str	r7, [sp, #32]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80068c0:	f7fb ffbc 	bl	800283c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80068c4:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80068c8:	a905      	add	r1, sp, #20
 80068ca:	483b      	ldr	r0, [pc, #236]	; (80069b8 <I2Cx_Init+0x150>)
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80068cc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80068ce:	f7fb ffb5 	bl	800283c <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80068d2:	6c33      	ldr	r3, [r6, #64]	; 0x40
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80068d4:	462a      	mov	r2, r5
 80068d6:	210f      	movs	r1, #15
 80068d8:	201f      	movs	r0, #31
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80068da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80068de:	6433      	str	r3, [r6, #64]	; 0x40
 80068e0:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80068e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068e6:	9304      	str	r3, [sp, #16]
 80068e8:	9b04      	ldr	r3, [sp, #16]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80068ea:	6a33      	ldr	r3, [r6, #32]
 80068ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80068f0:	6233      	str	r3, [r6, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80068f2:	6a33      	ldr	r3, [r6, #32]
 80068f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80068f8:	6233      	str	r3, [r6, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80068fa:	f7fb fb73 	bl	8001fe4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80068fe:	201f      	movs	r0, #31
 8006900:	f7fb fbaa 	bl	8002058 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8006904:	2020      	movs	r0, #32
 8006906:	462a      	mov	r2, r5
 8006908:	210f      	movs	r1, #15
 800690a:	f7fb fb6b 	bl	8001fe4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800690e:	2020      	movs	r0, #32
 8006910:	f7fb fba2 	bl	8002058 <HAL_NVIC_EnableIRQ>

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
    HAL_I2C_Init(i2c_handler);
 8006914:	4620      	mov	r0, r4
 8006916:	f7fc facb 	bl	8002eb0 <HAL_I2C_Init>
  }
}
 800691a:	b00b      	add	sp, #44	; 0x2c
 800691c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800691e:	6062      	str	r2, [r4, #4]
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8006920:	2080      	movs	r0, #128	; 0x80
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8006922:	6125      	str	r5, [r4, #16]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8006924:	2112      	movs	r1, #18
    i2c_handler->Init.OwnAddress2      = 0;
 8006926:	6165      	str	r5, [r4, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8006928:	2702      	movs	r7, #2
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800692a:	61e5      	str	r5, [r4, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800692c:	6225      	str	r5, [r4, #32]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800692e:	60e3      	str	r3, [r4, #12]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8006930:	6b33      	ldr	r3, [r6, #48]	; 0x30
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8006932:	4a22      	ldr	r2, [pc, #136]	; (80069bc <I2Cx_Init+0x154>)
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8006934:	4303      	orrs	r3, r0
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8006936:	6022      	str	r2, [r4, #0]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8006938:	2204      	movs	r2, #4
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800693a:	6333      	str	r3, [r6, #48]	; 0x30
 800693c:	6b33      	ldr	r3, [r6, #48]	; 0x30
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800693e:	9005      	str	r0, [sp, #20]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8006940:	4003      	ands	r3, r0
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8006942:	9106      	str	r1, [sp, #24]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006944:	481e      	ldr	r0, [pc, #120]	; (80069c0 <I2Cx_Init+0x158>)
 8006946:	a905      	add	r1, sp, #20
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8006948:	9301      	str	r3, [sp, #4]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800694a:	9209      	str	r2, [sp, #36]	; 0x24
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800694c:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800694e:	9507      	str	r5, [sp, #28]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8006950:	9708      	str	r7, [sp, #32]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006952:	f7fb ff73 	bl	800283c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8006956:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800695a:	a905      	add	r1, sp, #20
 800695c:	4818      	ldr	r0, [pc, #96]	; (80069c0 <I2Cx_Init+0x158>)
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800695e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006960:	f7fb ff6c 	bl	800283c <HAL_GPIO_Init>
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8006964:	6c33      	ldr	r3, [r6, #64]	; 0x40
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8006966:	462a      	mov	r2, r5
 8006968:	210f      	movs	r1, #15
 800696a:	2048      	movs	r0, #72	; 0x48
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800696c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006970:	6433      	str	r3, [r6, #64]	; 0x40
 8006972:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8006974:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006978:	9302      	str	r3, [sp, #8]
 800697a:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800697c:	6a33      	ldr	r3, [r6, #32]
 800697e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006982:	6233      	str	r3, [r6, #32]
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8006984:	6a33      	ldr	r3, [r6, #32]
 8006986:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800698a:	6233      	str	r3, [r6, #32]
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800698c:	f7fb fb2a 	bl	8001fe4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8006990:	2048      	movs	r0, #72	; 0x48
 8006992:	f7fb fb61 	bl	8002058 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8006996:	462a      	mov	r2, r5
 8006998:	210f      	movs	r1, #15
 800699a:	2049      	movs	r0, #73	; 0x49
 800699c:	f7fb fb22 	bl	8001fe4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80069a0:	2049      	movs	r0, #73	; 0x49
 80069a2:	f7fb fb59 	bl	8002058 <HAL_NVIC_EnableIRQ>
 80069a6:	e7b5      	b.n	8006914 <I2Cx_Init+0xac>
 80069a8:	20000380 	.word	0x20000380
 80069ac:	40912732 	.word	0x40912732
 80069b0:	40023800 	.word	0x40023800
 80069b4:	40005400 	.word	0x40005400
 80069b8:	40020400 	.word	0x40020400
 80069bc:	40005c00 	.word	0x40005c00
 80069c0:	40021c00 	.word	0x40021c00

080069c4 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80069c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069c6:	b085      	sub	sp, #20
  HAL_StatusTypeDef status = HAL_OK;

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80069c8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 80069cc:	4607      	mov	r7, r0
 80069ce:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80069d0:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80069d4:	9402      	str	r4, [sp, #8]
 80069d6:	9600      	str	r6, [sp, #0]
 80069d8:	9501      	str	r5, [sp, #4]
 80069da:	f7fc fbb9 	bl	8003150 <HAL_I2C_Mem_Read>

  /* Check the communication status */
  if(status != HAL_OK)
 80069de:	4604      	mov	r4, r0
 80069e0:	b128      	cbz	r0, 80069ee <I2Cx_ReadMultiple+0x2a>
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80069e2:	4638      	mov	r0, r7
 80069e4:	f7fc faba 	bl	8002f5c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80069e8:	4638      	mov	r0, r7
 80069ea:	f7ff ff3d 	bl	8006868 <I2Cx_Init>
}
 80069ee:	4620      	mov	r0, r4
 80069f0:	b005      	add	sp, #20
 80069f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080069f4 <I2Cx_WriteMultiple>:
{
 80069f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069f6:	b085      	sub	sp, #20
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80069f8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 80069fc:	4607      	mov	r7, r0
 80069fe:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006a00:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8006a04:	9402      	str	r4, [sp, #8]
 8006a06:	9600      	str	r6, [sp, #0]
 8006a08:	9501      	str	r5, [sp, #4]
 8006a0a:	f7fc fac1 	bl	8002f90 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8006a0e:	4604      	mov	r4, r0
 8006a10:	b128      	cbz	r0, 8006a1e <I2Cx_WriteMultiple+0x2a>
  HAL_I2C_DeInit(i2c_handler);
 8006a12:	4638      	mov	r0, r7
 8006a14:	f7fc faa2 	bl	8002f5c <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 8006a18:	4638      	mov	r0, r7
 8006a1a:	f7ff ff25 	bl	8006868 <I2Cx_Init>
}
 8006a1e:	4620      	mov	r0, r4
 8006a20:	b005      	add	sp, #20
 8006a22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006a24 <BSP_LED_Toggle>:
  if (Led == LED1)	/* Toggle LED connected to GPIO */
 8006a24:	b100      	cbz	r0, 8006a28 <BSP_LED_Toggle+0x4>
 8006a26:	4770      	bx	lr
    HAL_GPIO_TogglePin(gpio_led, GPIO_PIN[Led]);
 8006a28:	2102      	movs	r1, #2
 8006a2a:	4801      	ldr	r0, [pc, #4]	; (8006a30 <BSP_LED_Toggle+0xc>)
 8006a2c:	f7fc b8f8 	b.w	8002c20 <HAL_GPIO_TogglePin>
 8006a30:	40022000 	.word	0x40022000

08006a34 <TS_IO_Init>:
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
  I2Cx_Init(&hI2cAudioHandler);
 8006a34:	4801      	ldr	r0, [pc, #4]	; (8006a3c <TS_IO_Init+0x8>)
 8006a36:	f7ff bf17 	b.w	8006868 <I2Cx_Init>
 8006a3a:	bf00      	nop
 8006a3c:	20000380 	.word	0x20000380

08006a40 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8006a40:	b530      	push	{r4, r5, lr}
 8006a42:	b085      	sub	sp, #20
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8006a44:	2501      	movs	r5, #1
{
 8006a46:	ac04      	add	r4, sp, #16
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8006a48:	462b      	mov	r3, r5
{
 8006a4a:	f804 2d01 	strb.w	r2, [r4, #-1]!
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8006a4e:	460a      	mov	r2, r1
 8006a50:	4601      	mov	r1, r0
 8006a52:	9400      	str	r4, [sp, #0]
 8006a54:	9501      	str	r5, [sp, #4]
 8006a56:	4802      	ldr	r0, [pc, #8]	; (8006a60 <TS_IO_Write+0x20>)
 8006a58:	f7ff ffcc 	bl	80069f4 <I2Cx_WriteMultiple>
}
 8006a5c:	b005      	add	sp, #20
 8006a5e:	bd30      	pop	{r4, r5, pc}
 8006a60:	20000380 	.word	0x20000380

08006a64 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8006a64:	b530      	push	{r4, r5, lr}
 8006a66:	b085      	sub	sp, #20
  uint8_t read_value = 0;

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8006a68:	2401      	movs	r4, #1
  uint8_t read_value = 0;
 8006a6a:	2500      	movs	r5, #0
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8006a6c:	460a      	mov	r2, r1
  uint8_t read_value = 0;
 8006a6e:	ab04      	add	r3, sp, #16
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8006a70:	4601      	mov	r1, r0
 8006a72:	4806      	ldr	r0, [pc, #24]	; (8006a8c <TS_IO_Read+0x28>)
  uint8_t read_value = 0;
 8006a74:	f803 5d01 	strb.w	r5, [r3, #-1]!
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8006a78:	9401      	str	r4, [sp, #4]
 8006a7a:	9300      	str	r3, [sp, #0]
 8006a7c:	4623      	mov	r3, r4
 8006a7e:	f7ff ffa1 	bl	80069c4 <I2Cx_ReadMultiple>

  return read_value;
}
 8006a82:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8006a86:	b005      	add	sp, #20
 8006a88:	bd30      	pop	{r4, r5, pc}
 8006a8a:	bf00      	nop
 8006a8c:	20000380 	.word	0x20000380

08006a90 <TS_IO_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8006a90:	f7fb b91c 	b.w	8001ccc <HAL_Delay>

08006a94 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8006a94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8006a98:	4c25      	ldr	r4, [pc, #148]	; (8006b30 <BSP_SDRAM_Initialization_sequence+0x9c>)
{
 8006a9a:	b083      	sub	sp, #12
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006a9c:	4d25      	ldr	r5, [pc, #148]	; (8006b34 <BSP_SDRAM_Initialization_sequence+0xa0>)
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8006a9e:	2601      	movs	r6, #1
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006aa0:	2710      	movs	r7, #16
  __IO uint32_t tmpmrd = 0;
 8006aa2:	f04f 0800 	mov.w	r8, #0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006aa6:	4621      	mov	r1, r4
{
 8006aa8:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006aaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006aae:	4628      	mov	r0, r5
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8006ab0:	6026      	str	r6, [r4, #0]
  Command.AutoRefreshNumber      = 1;
 8006ab2:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006ab4:	6067      	str	r7, [r4, #4]
  Command.ModeRegisterDefinition = 0;
 8006ab6:	f8c4 800c 	str.w	r8, [r4, #12]
  __IO uint32_t tmpmrd = 0;
 8006aba:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006abe:	f7fe fb69 	bl	8005194 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8006ac2:	4630      	mov	r0, r6
 8006ac4:	f7fb f902 	bl	8001ccc <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8006ac8:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8006aca:	4621      	mov	r1, r4
 8006acc:	4628      	mov	r0, r5
 8006ace:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8006ad2:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006ad4:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8006ad6:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8006ad8:	f8c4 800c 	str.w	r8, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8006adc:	f7fe fb5a 	bl	8005194 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8006ae0:	f04f 0e03 	mov.w	lr, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
 8006ae4:	2308      	movs	r3, #8
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006ae6:	4621      	mov	r1, r4
 8006ae8:	4628      	mov	r0, r5
 8006aea:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8006aee:	f8c4 e000 	str.w	lr, [r4]
  Command.AutoRefreshNumber      = 8;
 8006af2:	60a3      	str	r3, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006af4:	6067      	str	r7, [r4, #4]
  Command.ModeRegisterDefinition = 0;
 8006af6:	f8c4 800c 	str.w	r8, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006afa:	f7fe fb4b 	bl	8005194 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8006afe:	f44f 7308 	mov.w	r3, #544	; 0x220
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8006b02:	f04f 0e04 	mov.w	lr, #4
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006b06:	4621      	mov	r1, r4
 8006b08:	f64f 72ff 	movw	r2, #65535	; 0xffff
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8006b0c:	9301      	str	r3, [sp, #4]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006b0e:	4628      	mov	r0, r5
  Command.ModeRegisterDefinition = tmpmrd;
 8006b10:	9b01      	ldr	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8006b12:	f8c4 e000 	str.w	lr, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
 8006b16:	60e3      	str	r3, [r4, #12]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006b18:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8006b1a:	60a6      	str	r6, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006b1c:	f7fe fb3a 	bl	8005194 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8006b20:	4649      	mov	r1, r9
 8006b22:	4628      	mov	r0, r5
 8006b24:	f7fe fb50 	bl	80051c8 <HAL_SDRAM_ProgramRefreshRate>
}
 8006b28:	b003      	add	sp, #12
 8006b2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b2e:	bf00      	nop
 8006b30:	20000418 	.word	0x20000418
 8006b34:	20017c0c 	.word	0x20017c0c

08006b38 <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8006b38:	4b57      	ldr	r3, [pc, #348]	; (8006c98 <BSP_SDRAM_MspInit+0x160>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8006b3a:	2108      	movs	r1, #8
  __HAL_RCC_FMC_CLK_ENABLE();
 8006b3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{  
 8006b3e:	b5f0      	push	{r4, r5, r6, r7, lr}
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8006b40:	f04f 0e01 	mov.w	lr, #1
{  
 8006b44:	b08f      	sub	sp, #60	; 0x3c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006b46:	2502      	movs	r5, #2
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8006b48:	270c      	movs	r7, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8006b4a:	ea42 020e 	orr.w	r2, r2, lr
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8006b4e:	ac0e      	add	r4, sp, #56	; 0x38
{  
 8006b50:	4606      	mov	r6, r0
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8006b52:	4852      	ldr	r0, [pc, #328]	; (8006c9c <BSP_SDRAM_MspInit+0x164>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8006b54:	639a      	str	r2, [r3, #56]	; 0x38
 8006b56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b58:	ea02 020e 	and.w	r2, r2, lr
 8006b5c:	9201      	str	r2, [sp, #4]
 8006b5e:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 8006b60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b62:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006b66:	631a      	str	r2, [r3, #48]	; 0x30
 8006b68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b6a:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8006b6e:	9202      	str	r2, [sp, #8]
 8006b70:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b74:	f042 0204 	orr.w	r2, r2, #4
 8006b78:	631a      	str	r2, [r3, #48]	; 0x30
 8006b7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b7c:	f002 0204 	and.w	r2, r2, #4
 8006b80:	9203      	str	r2, [sp, #12]
 8006b82:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006b84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b86:	430a      	orrs	r2, r1
 8006b88:	631a      	str	r2, [r3, #48]	; 0x30
 8006b8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b8c:	400a      	ands	r2, r1
 8006b8e:	9204      	str	r2, [sp, #16]
 8006b90:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006b92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b94:	f042 0210 	orr.w	r2, r2, #16
 8006b98:	631a      	str	r2, [r3, #48]	; 0x30
 8006b9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b9c:	f002 0210 	and.w	r2, r2, #16
 8006ba0:	9205      	str	r2, [sp, #20]
 8006ba2:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006ba4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ba6:	f042 0220 	orr.w	r2, r2, #32
 8006baa:	631a      	str	r2, [r3, #48]	; 0x30
 8006bac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bae:	f002 0220 	and.w	r2, r2, #32
 8006bb2:	9206      	str	r2, [sp, #24]
 8006bb4:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006bb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bbc:	631a      	str	r2, [r3, #48]	; 0x30
 8006bbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bc0:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8006bc4:	9207      	str	r2, [sp, #28]
 8006bc6:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006bc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006bce:	631a      	str	r2, [r3, #48]	; 0x30
 8006bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8006bd2:	f844 1d14 	str.w	r1, [r4, #-20]!
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8006bd6:	4621      	mov	r1, r4
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8006bdc:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006be0:	950a      	str	r5, [sp, #40]	; 0x28
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006be2:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8006be4:	950c      	str	r5, [sp, #48]	; 0x30
  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8006be6:	2500      	movs	r5, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006be8:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8006bea:	970d      	str	r7, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8006bec:	f7fb fe26 	bl	800283c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8006bf0:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006bf4:	4621      	mov	r1, r4
 8006bf6:	482a      	ldr	r0, [pc, #168]	; (8006ca0 <BSP_SDRAM_MspInit+0x168>)
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8006bf8:	f44f 4780 	mov.w	r7, #16384	; 0x4000
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8006bfc:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006bfe:	f7fb fe1d 	bl	800283c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8006c02:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006c06:	4621      	mov	r1, r4
 8006c08:	4826      	ldr	r0, [pc, #152]	; (8006ca4 <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8006c0a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006c0c:	f7fb fe16 	bl	800283c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8006c10:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8006c14:	4621      	mov	r1, r4
 8006c16:	4824      	ldr	r0, [pc, #144]	; (8006ca8 <BSP_SDRAM_MspInit+0x170>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8006c18:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8006c1a:	f7fb fe0f 	bl	800283c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8006c1e:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006c22:	4621      	mov	r1, r4
 8006c24:	4821      	ldr	r0, [pc, #132]	; (8006cac <BSP_SDRAM_MspInit+0x174>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8006c26:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006c28:	f7fb fe08 	bl	800283c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8006c2c:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8006c2e:	4621      	mov	r1, r4
 8006c30:	481f      	ldr	r0, [pc, #124]	; (8006cb0 <BSP_SDRAM_MspInit+0x178>)
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8006c32:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8006c34:	f7fb fe02 	bl	800283c <HAL_GPIO_Init>
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8006c38:	4b1e      	ldr	r3, [pc, #120]	; (8006cb4 <BSP_SDRAM_MspInit+0x17c>)
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8006c3a:	2280      	movs	r2, #128	; 0x80
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8006c3c:	491e      	ldr	r1, [pc, #120]	; (8006cb8 <BSP_SDRAM_MspInit+0x180>)
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8006c3e:	f44f 6080 	mov.w	r0, #1024	; 0x400
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8006c42:	461c      	mov	r4, r3
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8006c44:	f44f 7c00 	mov.w	ip, #512	; 0x200
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006c48:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8006c4c:	619a      	str	r2, [r3, #24]
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8006c4e:	f844 1f10 	str.w	r1, [r4, #16]!
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8006c52:	2203      	movs	r2, #3
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8006c54:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8006c58:	641d      	str	r5, [r3, #64]	; 0x40
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8006c5a:	6218      	str	r0, [r3, #32]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8006c5c:	4620      	mov	r0, r4
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8006c5e:	6334      	str	r4, [r6, #48]	; 0x30
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8006c60:	6319      	str	r1, [r3, #48]	; 0x30
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8006c62:	639a      	str	r2, [r3, #56]	; 0x38
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8006c64:	f8c3 c01c 	str.w	ip, [r3, #28]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006c68:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8006c6c:	629f      	str	r7, [r3, #40]	; 0x28
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8006c6e:	615d      	str	r5, [r3, #20]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8006c70:	62dd      	str	r5, [r3, #44]	; 0x2c
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8006c72:	635d      	str	r5, [r3, #52]	; 0x34
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8006c74:	63dd      	str	r5, [r3, #60]	; 0x3c
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8006c76:	649e      	str	r6, [r3, #72]	; 0x48
  HAL_DMA_DeInit(&dma_handle);
 8006c78:	f7fb fae4 	bl	8002244 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	f7fb fa43 	bl	8002108 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8006c82:	462a      	mov	r2, r5
 8006c84:	210f      	movs	r1, #15
 8006c86:	2038      	movs	r0, #56	; 0x38
 8006c88:	f7fb f9ac 	bl	8001fe4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8006c8c:	2038      	movs	r0, #56	; 0x38
 8006c8e:	f7fb f9e3 	bl	8002058 <HAL_NVIC_EnableIRQ>
}
 8006c92:	b00f      	add	sp, #60	; 0x3c
 8006c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c96:	bf00      	nop
 8006c98:	40023800 	.word	0x40023800
 8006c9c:	40020800 	.word	0x40020800
 8006ca0:	40020c00 	.word	0x40020c00
 8006ca4:	40021000 	.word	0x40021000
 8006ca8:	40021400 	.word	0x40021400
 8006cac:	40021800 	.word	0x40021800
 8006cb0:	40021c00 	.word	0x40021c00
 8006cb4:	20000418 	.word	0x20000418
 8006cb8:	40026410 	.word	0x40026410

08006cbc <BSP_SDRAM_Init>:
{ 
 8006cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8006cbe:	2210      	movs	r2, #16
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8006cc0:	4c1e      	ldr	r4, [pc, #120]	; (8006d3c <BSP_SDRAM_Init+0x80>)
 8006cc2:	4f1f      	ldr	r7, [pc, #124]	; (8006d40 <BSP_SDRAM_Init+0x84>)
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8006cc4:	2640      	movs	r6, #64	; 0x40
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8006cc6:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8006cca:	2300      	movs	r3, #0
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8006ccc:	f44f 7080 	mov.w	r0, #256	; 0x100
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8006cd0:	f44f 6100 	mov.w	r1, #2048	; 0x800
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8006cd4:	6027      	str	r7, [r4, #0]
  Timing.SelfRefreshTime      = 4;
 8006cd6:	2704      	movs	r7, #4
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8006cd8:	6122      	str	r2, [r4, #16]
  Timing.LoadToActiveDelay    = 2;
 8006cda:	2202      	movs	r2, #2
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8006cdc:	6166      	str	r6, [r4, #20]
  Timing.ExitSelfRefreshDelay = 7;
 8006cde:	2607      	movs	r6, #7
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8006ce0:	6265      	str	r5, [r4, #36]	; 0x24
  Timing.LoadToActiveDelay    = 2;
 8006ce2:	4d18      	ldr	r5, [pc, #96]	; (8006d44 <BSP_SDRAM_Init+0x88>)
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8006ce4:	61a0      	str	r0, [r4, #24]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8006ce6:	4620      	mov	r0, r4
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8006ce8:	6221      	str	r1, [r4, #32]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8006cea:	4619      	mov	r1, r3
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8006cec:	6063      	str	r3, [r4, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8006cee:	60a3      	str	r3, [r4, #8]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8006cf0:	61e3      	str	r3, [r4, #28]
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8006cf2:	62a3      	str	r3, [r4, #40]	; 0x28
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8006cf4:	60e7      	str	r7, [r4, #12]
  Timing.LoadToActiveDelay    = 2;
 8006cf6:	672a      	str	r2, [r5, #112]	; 0x70
  Timing.WriteRecoveryTime    = 2;
 8006cf8:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
  Timing.RPDelay              = 2;
 8006cfc:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
  Timing.RCDDelay             = 2;
 8006d00:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
  Timing.SelfRefreshTime      = 4;
 8006d04:	67af      	str	r7, [r5, #120]	; 0x78
  Timing.ExitSelfRefreshDelay = 7;
 8006d06:	676e      	str	r6, [r5, #116]	; 0x74
  Timing.RowCycleDelay        = 7;
 8006d08:	67ee      	str	r6, [r5, #124]	; 0x7c
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8006d0a:	f7ff ff15 	bl	8006b38 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8006d0e:	4620      	mov	r0, r4
 8006d10:	f105 0170 	add.w	r1, r5, #112	; 0x70
 8006d14:	f7fe fa1c 	bl	8005150 <HAL_SDRAM_Init>
    sdramstatus = SDRAM_ERROR;
 8006d18:	4c0b      	ldr	r4, [pc, #44]	; (8006d48 <BSP_SDRAM_Init+0x8c>)
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8006d1a:	b930      	cbnz	r0, 8006d2a <BSP_SDRAM_Init+0x6e>
    sdramstatus = SDRAM_OK;
 8006d1c:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8006d1e:	f240 6003 	movw	r0, #1539	; 0x603
 8006d22:	f7ff feb7 	bl	8006a94 <BSP_SDRAM_Initialization_sequence>
}
 8006d26:	7820      	ldrb	r0, [r4, #0]
 8006d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sdramstatus = SDRAM_ERROR;
 8006d2a:	2301      	movs	r3, #1
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8006d2c:	f240 6003 	movw	r0, #1539	; 0x603
    sdramstatus = SDRAM_ERROR;
 8006d30:	7023      	strb	r3, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8006d32:	f7ff feaf 	bl	8006a94 <BSP_SDRAM_Initialization_sequence>
}
 8006d36:	7820      	ldrb	r0, [r4, #0]
 8006d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	20017c0c 	.word	0x20017c0c
 8006d40:	a0000140 	.word	0xa0000140
 8006d44:	20000418 	.word	0x20000418
 8006d48:	20000034 	.word	0x20000034

08006d4c <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8006d4c:	b538      	push	{r3, r4, r5, lr}
  uint8_t status = TS_OK;
  tsXBoundary = ts_SizeX;
 8006d4e:	4c0c      	ldr	r4, [pc, #48]	; (8006d80 <BSP_TS_Init+0x34>)
  tsYBoundary = ts_SizeY;
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8006d50:	4d0c      	ldr	r5, [pc, #48]	; (8006d84 <BSP_TS_Init+0x38>)
  tsXBoundary = ts_SizeX;
 8006d52:	8020      	strh	r0, [r4, #0]
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8006d54:	2070      	movs	r0, #112	; 0x70
 8006d56:	682b      	ldr	r3, [r5, #0]
  tsYBoundary = ts_SizeY;
 8006d58:	8061      	strh	r1, [r4, #2]
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8006d5a:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8006d5c:	686b      	ldr	r3, [r5, #4]
 8006d5e:	2070      	movs	r0, #112	; 0x70
 8006d60:	4798      	blx	r3
 8006d62:	2851      	cmp	r0, #81	; 0x51
 8006d64:	d001      	beq.n	8006d6a <BSP_TS_Init+0x1e>
    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8006d66:	2003      	movs	r0, #3
  }

  return status;
}
 8006d68:	bd38      	pop	{r3, r4, r5, pc}
    I2cAddress = TS_I2C_ADDRESS;
 8006d6a:	2370      	movs	r3, #112	; 0x70
    tsOrientation = TS_SWAP_XY;
 8006d6c:	2108      	movs	r1, #8
    tsDriver->Start(I2cAddress);
 8006d6e:	68ea      	ldr	r2, [r5, #12]
 8006d70:	4618      	mov	r0, r3
    tsDriver = &ft5336_ts_drv;
 8006d72:	6065      	str	r5, [r4, #4]
    I2cAddress = TS_I2C_ADDRESS;
 8006d74:	7223      	strb	r3, [r4, #8]
    tsOrientation = TS_SWAP_XY;
 8006d76:	7261      	strb	r1, [r4, #9]
    tsDriver->Start(I2cAddress);
 8006d78:	4790      	blx	r2
  uint8_t status = TS_OK;
 8006d7a:	2000      	movs	r0, #0
 8006d7c:	bd38      	pop	{r3, r4, r5, pc}
 8006d7e:	bf00      	nop
 8006d80:	20000504 	.word	0x20000504
 8006d84:	2000000c 	.word	0x2000000c

08006d88 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8006d88:	b530      	push	{r4, r5, lr}
 8006d8a:	b083      	sub	sp, #12
  uint32_t gestureId = 0;
  uint8_t  ts_status = TS_OK;

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8006d8c:	4b1e      	ldr	r3, [pc, #120]	; (8006e08 <BSP_TS_Get_GestureId+0x80>)
  uint32_t gestureId = 0;
 8006d8e:	2400      	movs	r4, #0
{
 8006d90:	4605      	mov	r5, r0
  uint32_t gestureId = 0;
 8006d92:	a902      	add	r1, sp, #8
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8006d94:	7a18      	ldrb	r0, [r3, #8]
  uint32_t gestureId = 0;
 8006d96:	f841 4d04 	str.w	r4, [r1, #-4]!
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8006d9a:	f7ff fd0f 	bl	80067bc <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8006d9e:	9801      	ldr	r0, [sp, #4]
 8006da0:	2818      	cmp	r0, #24
 8006da2:	d02b      	beq.n	8006dfc <BSP_TS_Get_GestureId+0x74>
 8006da4:	d908      	bls.n	8006db8 <BSP_TS_Get_GestureId+0x30>
 8006da6:	2840      	cmp	r0, #64	; 0x40
 8006da8:	d019      	beq.n	8006dde <BSP_TS_Get_GestureId+0x56>
 8006daa:	2849      	cmp	r0, #73	; 0x49
 8006dac:	d00d      	beq.n	8006dca <BSP_TS_Get_GestureId+0x42>
 8006dae:	281c      	cmp	r0, #28
 8006db0:	d01a      	beq.n	8006de8 <BSP_TS_Get_GestureId+0x60>
      break;
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
      break;
    default :
      ts_status = TS_ERROR;
 8006db2:	2001      	movs	r0, #1
      break;
  } /* of switch(gestureId) */

  return(ts_status);
}
 8006db4:	b003      	add	sp, #12
 8006db6:	bd30      	pop	{r4, r5, pc}
  switch(gestureId)
 8006db8:	2810      	cmp	r0, #16
 8006dba:	d01a      	beq.n	8006df2 <BSP_TS_Get_GestureId+0x6a>
 8006dbc:	2814      	cmp	r0, #20
 8006dbe:	d009      	beq.n	8006dd4 <BSP_TS_Get_GestureId+0x4c>
 8006dc0:	2800      	cmp	r0, #0
 8006dc2:	d1f6      	bne.n	8006db2 <BSP_TS_Get_GestureId+0x2a>
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8006dc4:	62a8      	str	r0, [r5, #40]	; 0x28
}
 8006dc6:	b003      	add	sp, #12
 8006dc8:	bd30      	pop	{r4, r5, pc}
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8006dca:	2306      	movs	r3, #6
  uint8_t  ts_status = TS_OK;
 8006dcc:	4620      	mov	r0, r4
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8006dce:	62ab      	str	r3, [r5, #40]	; 0x28
}
 8006dd0:	b003      	add	sp, #12
 8006dd2:	bd30      	pop	{r4, r5, pc}
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8006dd4:	2302      	movs	r3, #2
  uint8_t  ts_status = TS_OK;
 8006dd6:	4620      	mov	r0, r4
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8006dd8:	62ab      	str	r3, [r5, #40]	; 0x28
}
 8006dda:	b003      	add	sp, #12
 8006ddc:	bd30      	pop	{r4, r5, pc}
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8006dde:	2305      	movs	r3, #5
  uint8_t  ts_status = TS_OK;
 8006de0:	4620      	mov	r0, r4
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8006de2:	62ab      	str	r3, [r5, #40]	; 0x28
}
 8006de4:	b003      	add	sp, #12
 8006de6:	bd30      	pop	{r4, r5, pc}
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8006de8:	2304      	movs	r3, #4
  uint8_t  ts_status = TS_OK;
 8006dea:	4620      	mov	r0, r4
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8006dec:	62ab      	str	r3, [r5, #40]	; 0x28
}
 8006dee:	b003      	add	sp, #12
 8006df0:	bd30      	pop	{r4, r5, pc}
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8006df2:	2301      	movs	r3, #1
  uint8_t  ts_status = TS_OK;
 8006df4:	4620      	mov	r0, r4
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8006df6:	62ab      	str	r3, [r5, #40]	; 0x28
}
 8006df8:	b003      	add	sp, #12
 8006dfa:	bd30      	pop	{r4, r5, pc}
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8006dfc:	2303      	movs	r3, #3
  uint8_t  ts_status = TS_OK;
 8006dfe:	4620      	mov	r0, r4
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8006e00:	62ab      	str	r3, [r5, #40]	; 0x28
}
 8006e02:	b003      	add	sp, #12
 8006e04:	bd30      	pop	{r4, r5, pc}
 8006e06:	bf00      	nop
 8006e08:	20000504 	.word	0x20000504

08006e0c <BSP_TS_GetState>:
{
 8006e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8006e10:	4d58      	ldr	r5, [pc, #352]	; (8006f74 <BSP_TS_GetState+0x168>)
{
 8006e12:	b095      	sub	sp, #84	; 0x54
  uint32_t weight = 0;
 8006e14:	2400      	movs	r4, #0
{
 8006e16:	4606      	mov	r6, r0
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8006e18:	686b      	ldr	r3, [r5, #4]
{
 8006e1a:	9003      	str	r0, [sp, #12]
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	7a28      	ldrb	r0, [r5, #8]
  uint32_t weight = 0;
 8006e20:	9405      	str	r4, [sp, #20]
  uint32_t area = 0;
 8006e22:	9406      	str	r4, [sp, #24]
  uint32_t event = 0;
 8006e24:	9407      	str	r4, [sp, #28]
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8006e26:	4798      	blx	r3
 8006e28:	7030      	strb	r0, [r6, #0]
  if(TS_State->touchDetected)
 8006e2a:	2800      	cmp	r0, #0
 8006e2c:	d078      	beq.n	8006f20 <BSP_TS_GetState+0x114>
 8006e2e:	4632      	mov	r2, r6
 8006e30:	af0e      	add	r7, sp, #56	; 0x38
 8006e32:	ae11      	add	r6, sp, #68	; 0x44
 8006e34:	f105 0b0c 	add.w	fp, r5, #12
 8006e38:	f102 0916 	add.w	r9, r2, #22
 8006e3c:	f102 0802 	add.w	r8, r2, #2
 8006e40:	f105 0a20 	add.w	sl, r5, #32
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8006e44:	686b      	ldr	r3, [r5, #4]
 8006e46:	4632      	mov	r2, r6
 8006e48:	4639      	mov	r1, r7
 8006e4a:	7a28      	ldrb	r0, [r5, #8]
 8006e4c:	695b      	ldr	r3, [r3, #20]
 8006e4e:	4798      	blx	r3
      if(tsOrientation == TS_SWAP_NONE)
 8006e50:	7a6b      	ldrb	r3, [r5, #9]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d07f      	beq.n	8006f56 <BSP_TS_GetState+0x14a>
      if(tsOrientation & TS_SWAP_X)
 8006e56:	0799      	lsls	r1, r3, #30
 8006e58:	d505      	bpl.n	8006e66 <BSP_TS_GetState+0x5a>
        x[index] = 4096 - brute_x[index];
 8006e5a:	883a      	ldrh	r2, [r7, #0]
 8006e5c:	a908      	add	r1, sp, #32
 8006e5e:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 8006e62:	f821 2014 	strh.w	r2, [r1, r4, lsl #1]
      if(tsOrientation & TS_SWAP_Y)
 8006e66:	075a      	lsls	r2, r3, #29
 8006e68:	d505      	bpl.n	8006e76 <BSP_TS_GetState+0x6a>
        y[index] = 4096 - brute_y[index];
 8006e6a:	8832      	ldrh	r2, [r6, #0]
 8006e6c:	a90b      	add	r1, sp, #44	; 0x2c
 8006e6e:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 8006e72:	f821 2014 	strh.w	r2, [r1, r4, lsl #1]
      if(tsOrientation & TS_SWAP_XY)
 8006e76:	071b      	lsls	r3, r3, #28
 8006e78:	d463      	bmi.n	8006f42 <BSP_TS_GetState+0x136>
 8006e7a:	ab08      	add	r3, sp, #32
 8006e7c:	f833 e014 	ldrh.w	lr, [r3, r4, lsl #1]
 8006e80:	ab0b      	add	r3, sp, #44	; 0x2c
 8006e82:	f833 1014 	ldrh.w	r1, [r3, r4, lsl #1]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8006e86:	f85b 3b04 	ldr.w	r3, [fp], #4
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8006e8a:	f85a 2b04 	ldr.w	r2, [sl], #4
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8006e8e:	459e      	cmp	lr, r3
 8006e90:	bf8c      	ite	hi
 8006e92:	ebae 0303 	subhi.w	r3, lr, r3
 8006e96:	eba3 030e 	subls.w	r3, r3, lr
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8006e9a:	4291      	cmp	r1, r2
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8006e9c:	b29b      	uxth	r3, r3
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8006e9e:	bf8c      	ite	hi
 8006ea0:	1a8a      	subhi	r2, r1, r2
 8006ea2:	1a52      	subls	r2, r2, r1
 8006ea4:	b292      	uxth	r2, r2
      if ((x_diff + y_diff) > 5)
 8006ea6:	441a      	add	r2, r3
 8006ea8:	2a05      	cmp	r2, #5
 8006eaa:	dd03      	ble.n	8006eb4 <BSP_TS_GetState+0xa8>
        _x[index] = x[index];
 8006eac:	f84b ec04 	str.w	lr, [fp, #-4]
        _y[index] = y[index];
 8006eb0:	f84a 1c04 	str.w	r1, [sl, #-4]
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8006eb4:	7a28      	ldrb	r0, [r5, #8]
 8006eb6:	2870      	cmp	r0, #112	; 0x70
 8006eb8:	d056      	beq.n	8006f68 <BSP_TS_GetState+0x15c>
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8006eba:	f85b 2c04 	ldr.w	r2, [fp, #-4]
 8006ebe:	882b      	ldrh	r3, [r5, #0]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8006ec0:	8869      	ldrh	r1, [r5, #2]
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8006ec2:	fb02 f203 	mul.w	r2, r2, r3
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8006ec6:	f85a 3c04 	ldr.w	r3, [sl, #-4]
 8006eca:	fb03 f301 	mul.w	r3, r3, r1
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8006ece:	0b12      	lsrs	r2, r2, #12
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8006ed0:	0b1b      	lsrs	r3, r3, #12
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8006ed2:	f8a8 2000 	strh.w	r2, [r8]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8006ed6:	f8a8 300a 	strh.w	r3, [r8, #10]
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8006eda:	ab07      	add	r3, sp, #28
 8006edc:	aa05      	add	r2, sp, #20
 8006ede:	4621      	mov	r1, r4
 8006ee0:	9300      	str	r3, [sp, #0]
 8006ee2:	ab06      	add	r3, sp, #24
 8006ee4:	f7ff fc7c 	bl	80067e0 <ft5336_TS_GetTouchInfo>
      switch(event)
 8006ee8:	a905      	add	r1, sp, #20
 8006eea:	c90e      	ldmia	r1, {r1, r2, r3}
      TS_State->touchWeight[index] = weight;
 8006eec:	f809 1b01 	strb.w	r1, [r9], #1
      TS_State->touchArea[index]   = area;
 8006ef0:	f889 2009 	strb.w	r2, [r9, #9]
      switch(event)
 8006ef4:	2b03      	cmp	r3, #3
 8006ef6:	d807      	bhi.n	8006f08 <BSP_TS_GetState+0xfc>
 8006ef8:	e8df f003 	tbb	[pc, r3]
 8006efc:	02151e1a 	.word	0x02151e1a
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8006f00:	f04f 0300 	mov.w	r3, #0
 8006f04:	f889 3004 	strb.w	r3, [r9, #4]
    for(index=0; index < TS_State->touchDetected; index++)
 8006f08:	9b03      	ldr	r3, [sp, #12]
 8006f0a:	3401      	adds	r4, #1
 8006f0c:	3702      	adds	r7, #2
 8006f0e:	3602      	adds	r6, #2
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	f108 0802 	add.w	r8, r8, #2
 8006f16:	42a3      	cmp	r3, r4
 8006f18:	d894      	bhi.n	8006e44 <BSP_TS_GetState+0x38>
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8006f1a:	9803      	ldr	r0, [sp, #12]
 8006f1c:	f7ff ff34 	bl	8006d88 <BSP_TS_Get_GestureId>
}
 8006f20:	b015      	add	sp, #84	; 0x54
 8006f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8006f26:	f04f 0303 	mov.w	r3, #3
 8006f2a:	f889 3004 	strb.w	r3, [r9, #4]
          break;
 8006f2e:	e7eb      	b.n	8006f08 <BSP_TS_GetState+0xfc>
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8006f30:	2301      	movs	r3, #1
 8006f32:	f889 3004 	strb.w	r3, [r9, #4]
          break;
 8006f36:	e7e7      	b.n	8006f08 <BSP_TS_GetState+0xfc>
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8006f38:	f04f 0302 	mov.w	r3, #2
 8006f3c:	f889 3004 	strb.w	r3, [r9, #4]
          break;
 8006f40:	e7e2      	b.n	8006f08 <BSP_TS_GetState+0xfc>
        y[index] = brute_x[index];
 8006f42:	ab0b      	add	r3, sp, #44	; 0x2c
 8006f44:	8839      	ldrh	r1, [r7, #0]
        x[index] = brute_y[index];
 8006f46:	f8b6 e000 	ldrh.w	lr, [r6]
        y[index] = brute_x[index];
 8006f4a:	f823 1014 	strh.w	r1, [r3, r4, lsl #1]
        x[index] = brute_y[index];
 8006f4e:	ab08      	add	r3, sp, #32
 8006f50:	f823 e014 	strh.w	lr, [r3, r4, lsl #1]
 8006f54:	e797      	b.n	8006e86 <BSP_TS_GetState+0x7a>
        x[index] = brute_x[index];
 8006f56:	8839      	ldrh	r1, [r7, #0]
 8006f58:	a808      	add	r0, sp, #32
        y[index] = brute_y[index];
 8006f5a:	8832      	ldrh	r2, [r6, #0]
        x[index] = brute_x[index];
 8006f5c:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
        y[index] = brute_y[index];
 8006f60:	a90b      	add	r1, sp, #44	; 0x2c
 8006f62:	f821 2014 	strh.w	r2, [r1, r4, lsl #1]
 8006f66:	e786      	b.n	8006e76 <BSP_TS_GetState+0x6a>
        TS_State->touchX[index] = x[index];
 8006f68:	f8a8 e000 	strh.w	lr, [r8]
        TS_State->touchY[index] = y[index];
 8006f6c:	f8a8 100a 	strh.w	r1, [r8, #10]
 8006f70:	e7b3      	b.n	8006eda <BSP_TS_GetState+0xce>
 8006f72:	bf00      	nop
 8006f74:	20000504 	.word	0x20000504

08006f78 <ex_disp_fill>:


/* Write a pixel array (called 'map') to the a specific area on the display
 * This function is required only when LV_VDB_SIZE == 0 in lv_conf.h*/
static void ex_disp_fill(int32_t x1, int32_t y1, int32_t x2, int32_t y2,  lv_color_t color)
{
 8006f78:	b4f0      	push	{r4, r5, r6, r7}
    /*Return if the area is out the screen*/
    if(x2 < 0) return;
    if(y2 < 0) return;
    if(x1 > TFT_HOR_RES - 1) return;
    if(y1 > TFT_VER_RES - 1) return;
 8006f7a:	f240 160f 	movw	r6, #271	; 0x10f
    if(x1 > TFT_HOR_RES - 1) return;
 8006f7e:	f240 17df 	movw	r7, #479	; 0x1df
{
 8006f82:	9c04      	ldr	r4, [sp, #16]
    if(y1 > TFT_VER_RES - 1) return;
 8006f84:	42b8      	cmp	r0, r7
 8006f86:	bfd8      	it	le
 8006f88:	42b1      	cmple	r1, r6
 8006f8a:	bfcc      	ite	gt
 8006f8c:	2501      	movgt	r5, #1
 8006f8e:	2500      	movle	r5, #0
 8006f90:	ea55 75d3 	orrs.w	r5, r5, r3, lsr #31
 8006f94:	d122      	bne.n	8006fdc <ex_disp_fill+0x64>
 8006f96:	2a00      	cmp	r2, #0
 8006f98:	db20      	blt.n	8006fdc <ex_disp_fill+0x64>

    /*Truncate the area to the screen*/
    int32_t act_x1 = x1 < 0 ? 0 : x1;
    int32_t act_y1 = y1 < 0 ? 0 : y1;
    int32_t act_x2 = x2 > TFT_HOR_RES - 1 ? TFT_HOR_RES - 1 : x2;
 8006f9a:	42ba      	cmp	r2, r7
    int32_t act_x1 = x1 < 0 ? 0 : x1;
 8006f9c:	ea20 75e0 	bic.w	r5, r0, r0, asr #31
    int32_t act_x2 = x2 > TFT_HOR_RES - 1 ? TFT_HOR_RES - 1 : x2;
 8006fa0:	bfa8      	it	ge
 8006fa2:	463a      	movge	r2, r7
    int32_t act_y2 = y2 > TFT_VER_RES - 1 ? TFT_VER_RES - 1 : y2;
 8006fa4:	42b3      	cmp	r3, r6
    int32_t act_y1 = y1 < 0 ? 0 : y1;
 8006fa6:	ea21 77e1 	bic.w	r7, r1, r1, asr #31
    int32_t act_y2 = y2 > TFT_VER_RES - 1 ? TFT_VER_RES - 1 : y2;
 8006faa:	bfa8      	it	ge
 8006fac:	4633      	movge	r3, r6

    uint32_t x;
    uint32_t y;

    /*Fill the remaining area*/
    for(x = act_x1; x <= act_x2; x++) {
 8006fae:	4295      	cmp	r5, r2
 8006fb0:	d814      	bhi.n	8006fdc <ex_disp_fill+0x64>
 8006fb2:	ebc7 1607 	rsb	r6, r7, r7, lsl #4
 8006fb6:	eb05 1646 	add.w	r6, r5, r6, lsl #5
 8006fba:	00b6      	lsls	r6, r6, #2
 8006fbc:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
        for(y = act_y1; y <= act_y2; y++) {
 8006fc0:	42bb      	cmp	r3, r7
 8006fc2:	d307      	bcc.n	8006fd4 <ex_disp_fill+0x5c>
 8006fc4:	4630      	mov	r0, r6
 8006fc6:	4639      	mov	r1, r7
 8006fc8:	3101      	adds	r1, #1
            my_fb[y * TFT_HOR_RES + x] = color.full;
 8006fca:	6004      	str	r4, [r0, #0]
 8006fcc:	f500 60f0 	add.w	r0, r0, #1920	; 0x780
        for(y = act_y1; y <= act_y2; y++) {
 8006fd0:	4299      	cmp	r1, r3
 8006fd2:	d9f9      	bls.n	8006fc8 <ex_disp_fill+0x50>
    for(x = act_x1; x <= act_x2; x++) {
 8006fd4:	3501      	adds	r5, #1
 8006fd6:	3604      	adds	r6, #4
 8006fd8:	4295      	cmp	r5, r2
 8006fda:	d9f1      	bls.n	8006fc0 <ex_disp_fill+0x48>
        }
    }
}
 8006fdc:	bcf0      	pop	{r4, r5, r6, r7}
 8006fde:	4770      	bx	lr

08006fe0 <DMA2D_TransferError>:
  * @note   This example shows a simple way to report DMA2D transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
static void DMA2D_TransferError(DMA2D_HandleTypeDef *hdma2d)
{
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop

08006fe4 <gpu_mem_fill>:
{
 8006fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
    HAL_DMA2D_PollForTransfer(&Dma2dHandle, 100);
 8006fe6:	4c11      	ldr	r4, [pc, #68]	; (800702c <gpu_mem_fill+0x48>)
{
 8006fe8:	b083      	sub	sp, #12
 8006fea:	4605      	mov	r5, r0
 8006fec:	460f      	mov	r7, r1
    HAL_DMA2D_PollForTransfer(&Dma2dHandle, 100);
 8006fee:	4620      	mov	r0, r4
 8006ff0:	2164      	movs	r1, #100	; 0x64
{
 8006ff2:	4616      	mov	r6, r2
    HAL_DMA2D_PollForTransfer(&Dma2dHandle, 100);
 8006ff4:	f7fb fb46 	bl	8002684 <HAL_DMA2D_PollForTransfer>
    Dma2dHandle.Init.Mode = DMA2D_R2M;
 8006ff8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    if(HAL_DMA2D_Init(&Dma2dHandle) != HAL_OK)
 8006ffc:	4620      	mov	r0, r4
    Dma2dHandle.Init.Mode = DMA2D_R2M;
 8006ffe:	6063      	str	r3, [r4, #4]
    if(HAL_DMA2D_Init(&Dma2dHandle) != HAL_OK)
 8007000:	f7fb faec 	bl	80025dc <HAL_DMA2D_Init>
 8007004:	b100      	cbz	r0, 8007008 <gpu_mem_fill+0x24>
 8007006:	e7fe      	b.n	8007006 <gpu_mem_fill+0x22>
    Dma2dHandle.LayerCfg[1].InputAlpha = 0xff;
 8007008:	23ff      	movs	r3, #255	; 0xff
    HAL_DMA2D_ConfigLayer(&Dma2dHandle, 1);
 800700a:	2101      	movs	r1, #1
 800700c:	4620      	mov	r0, r4
    Dma2dHandle.LayerCfg[1].InputAlpha = 0xff;
 800700e:	6363      	str	r3, [r4, #52]	; 0x34
    HAL_DMA2D_ConfigLayer(&Dma2dHandle, 1);
 8007010:	f7fb fbbe 	bl	8002790 <HAL_DMA2D_ConfigLayer>
    HAL_DMA2D_BlendingStart(&Dma2dHandle, (uint32_t) lv_color_to32(color), (uint32_t) dest, (uint32_t)dest, length, 1);
 8007014:	2301      	movs	r3, #1
 8007016:	4631      	mov	r1, r6
 8007018:	462a      	mov	r2, r5
 800701a:	9700      	str	r7, [sp, #0]
 800701c:	9301      	str	r3, [sp, #4]
 800701e:	462b      	mov	r3, r5
 8007020:	4620      	mov	r0, r4
 8007022:	f7fb fb0d 	bl	8002640 <HAL_DMA2D_BlendingStart>
}
 8007026:	b003      	add	sp, #12
 8007028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800702a:	bf00      	nop
 800702c:	20000538 	.word	0x20000538

08007030 <gpu_mem_blend>:
{
 8007030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_DMA2D_PollForTransfer(&Dma2dHandle, 100);
 8007034:	4c11      	ldr	r4, [pc, #68]	; (800707c <gpu_mem_blend+0x4c>)
{
 8007036:	b082      	sub	sp, #8
 8007038:	4605      	mov	r5, r0
 800703a:	460e      	mov	r6, r1
    HAL_DMA2D_PollForTransfer(&Dma2dHandle, 100);
 800703c:	4620      	mov	r0, r4
 800703e:	2164      	movs	r1, #100	; 0x64
{
 8007040:	4698      	mov	r8, r3
 8007042:	4617      	mov	r7, r2
    HAL_DMA2D_PollForTransfer(&Dma2dHandle, 100);
 8007044:	f7fb fb1e 	bl	8002684 <HAL_DMA2D_PollForTransfer>
    Dma2dHandle.Init.Mode         = DMA2D_M2M_BLEND;
 8007048:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    if(HAL_DMA2D_Init(&Dma2dHandle) != HAL_OK)
 800704c:	4620      	mov	r0, r4
    Dma2dHandle.Init.Mode         = DMA2D_M2M_BLEND;
 800704e:	6063      	str	r3, [r4, #4]
    if(HAL_DMA2D_Init(&Dma2dHandle) != HAL_OK)
 8007050:	f7fb fac4 	bl	80025dc <HAL_DMA2D_Init>
 8007054:	b100      	cbz	r0, 8007058 <gpu_mem_blend+0x28>
 8007056:	e7fe      	b.n	8007056 <gpu_mem_blend+0x26>
    HAL_DMA2D_ConfigLayer(&Dma2dHandle, 1);
 8007058:	2101      	movs	r1, #1
 800705a:	4620      	mov	r0, r4
    Dma2dHandle.LayerCfg[1].InputAlpha = opa;
 800705c:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
    HAL_DMA2D_ConfigLayer(&Dma2dHandle, 1);
 8007060:	f7fb fb96 	bl	8002790 <HAL_DMA2D_ConfigLayer>
    HAL_DMA2D_BlendingStart(&Dma2dHandle, (uint32_t) src, (uint32_t) dest, (uint32_t)dest, length, 1);
 8007064:	2301      	movs	r3, #1
 8007066:	4631      	mov	r1, r6
 8007068:	462a      	mov	r2, r5
 800706a:	9700      	str	r7, [sp, #0]
 800706c:	9301      	str	r3, [sp, #4]
 800706e:	462b      	mov	r3, r5
 8007070:	4620      	mov	r0, r4
 8007072:	f7fb fae5 	bl	8002640 <HAL_DMA2D_BlendingStart>
}
 8007076:	b002      	add	sp, #8
 8007078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800707c:	20000538 	.word	0x20000538

08007080 <DMA_TransferComplete>:
{
 8007080:	b570      	push	{r4, r5, r6, lr}
    y_fill_act ++;
 8007082:	4c10      	ldr	r4, [pc, #64]	; (80070c4 <DMA_TransferComplete+0x44>)
 8007084:	6c23      	ldr	r3, [r4, #64]	; 0x40
    if(y_fill_act > y2_fill) {
 8007086:	6c62      	ldr	r2, [r4, #68]	; 0x44
    y_fill_act ++;
 8007088:	3301      	adds	r3, #1
    if(y_fill_act > y2_fill) {
 800708a:	4293      	cmp	r3, r2
    y_fill_act ++;
 800708c:	6423      	str	r3, [r4, #64]	; 0x40
    if(y_fill_act > y2_fill) {
 800708e:	dc15      	bgt.n	80070bc <DMA_TransferComplete+0x3c>
    	uint32_t length = (x2_flush - x1_flush + 1);
 8007090:	6ca6      	ldr	r6, [r4, #72]	; 0x48
        if(HAL_DMA_Start_IT(han,(uint32_t)buf_to_flush, (uint32_t)&my_fb[y_fill_act * TFT_HOR_RES + x1_flush],
 8007092:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    	uint32_t length = (x2_flush - x1_flush + 1);
 8007096:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
        if(HAL_DMA_Start_IT(han,(uint32_t)buf_to_flush, (uint32_t)&my_fb[y_fill_act * TFT_HOR_RES + x1_flush],
 8007098:	eb06 1243 	add.w	r2, r6, r3, lsl #5
        buf_to_flush += x2_flush - x1_flush + 1;
 800709c:	6d25      	ldr	r5, [r4, #80]	; 0x50
    	uint32_t length = (x2_flush - x1_flush + 1);
 800709e:	1b8b      	subs	r3, r1, r6
        if(HAL_DMA_Start_IT(han,(uint32_t)buf_to_flush, (uint32_t)&my_fb[y_fill_act * TFT_HOR_RES + x1_flush],
 80070a0:	0092      	lsls	r2, r2, #2
    	uint32_t length = (x2_flush - x1_flush + 1);
 80070a2:	3301      	adds	r3, #1
        if(HAL_DMA_Start_IT(han,(uint32_t)buf_to_flush, (uint32_t)&my_fb[y_fill_act * TFT_HOR_RES + x1_flush],
 80070a4:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
        buf_to_flush += x2_flush - x1_flush + 1;
 80070a8:	eb05 0583 	add.w	r5, r5, r3, lsl #2
        if(HAL_DMA_Start_IT(han,(uint32_t)buf_to_flush, (uint32_t)&my_fb[y_fill_act * TFT_HOR_RES + x1_flush],
 80070ac:	005b      	lsls	r3, r3, #1
 80070ae:	4629      	mov	r1, r5
        buf_to_flush += x2_flush - x1_flush + 1;
 80070b0:	6525      	str	r5, [r4, #80]	; 0x50
        if(HAL_DMA_Start_IT(han,(uint32_t)buf_to_flush, (uint32_t)&my_fb[y_fill_act * TFT_HOR_RES + x1_flush],
 80070b2:	f7fb f909 	bl	80022c8 <HAL_DMA_Start_IT>
 80070b6:	b100      	cbz	r0, 80070ba <DMA_TransferComplete+0x3a>
 80070b8:	e7fe      	b.n	80070b8 <DMA_TransferComplete+0x38>
 80070ba:	bd70      	pop	{r4, r5, r6, pc}
}
 80070bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_flush_ready();
 80070c0:	f003 baca 	b.w	800a658 <lv_flush_ready>
 80070c4:	20000538 	.word	0x20000538

080070c8 <ex_disp_flush>:
{
 80070c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(x1 > TFT_HOR_RES - 1) return;
 80070ca:	f240 17df 	movw	r7, #479	; 0x1df
    if(y1 > TFT_VER_RES - 1) return;
 80070ce:	f240 1e0f 	movw	lr, #271	; 0x10f
{
 80070d2:	9e06      	ldr	r6, [sp, #24]
    if(y1 > TFT_VER_RES - 1) return;
 80070d4:	4571      	cmp	r1, lr
 80070d6:	bfd8      	it	le
 80070d8:	42b8      	cmple	r0, r7
 80070da:	bfcc      	ite	gt
 80070dc:	2401      	movgt	r4, #1
 80070de:	2400      	movle	r4, #0
 80070e0:	ea54 74d3 	orrs.w	r4, r4, r3, lsr #31
 80070e4:	d125      	bne.n	8007132 <ex_disp_flush+0x6a>
 80070e6:	2a00      	cmp	r2, #0
 80070e8:	db23      	blt.n	8007132 <ex_disp_flush+0x6a>
 80070ea:	4615      	mov	r5, r2
 80070ec:	461a      	mov	r2, r3
    int32_t act_y1 = y1 < 0 ? 0 : y1;
 80070ee:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
    int32_t act_x1 = x1 < 0 ? 0 : x1;
 80070f2:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
    int32_t act_x2 = x2 > TFT_HOR_RES - 1 ? TFT_HOR_RES - 1 : x2;
 80070f6:	42bd      	cmp	r5, r7
    err = HAL_DMA_Start_IT(&DmaHandle,(uint32_t)buf_to_flush, (uint32_t)&my_fb[y_fill_act * TFT_HOR_RES + x1_flush],
 80070f8:	ebc4 1c04 	rsb	ip, r4, r4, lsl #4
    int32_t act_x2 = x2 > TFT_HOR_RES - 1 ? TFT_HOR_RES - 1 : x2;
 80070fc:	bfa8      	it	ge
 80070fe:	463d      	movge	r5, r7
    int32_t act_y2 = y2 > TFT_VER_RES - 1 ? TFT_VER_RES - 1 : y2;
 8007100:	4572      	cmp	r2, lr
    x1_flush = act_x1;
 8007102:	4f0c      	ldr	r7, [pc, #48]	; (8007134 <ex_disp_flush+0x6c>)
    int32_t act_y2 = y2 > TFT_VER_RES - 1 ? TFT_VER_RES - 1 : y2;
 8007104:	bfa8      	it	ge
 8007106:	4672      	movge	r2, lr
    uint32_t length = (x2_flush - x1_flush + 1);
 8007108:	1ae8      	subs	r0, r5, r3
    x1_flush = act_x1;
 800710a:	64bb      	str	r3, [r7, #72]	; 0x48
    int32_t act_y2 = y2 > TFT_VER_RES - 1 ? TFT_VER_RES - 1 : y2;
 800710c:	4611      	mov	r1, r2
    err = HAL_DMA_Start_IT(&DmaHandle,(uint32_t)buf_to_flush, (uint32_t)&my_fb[y_fill_act * TFT_HOR_RES + x1_flush],
 800710e:	eb03 124c 	add.w	r2, r3, ip, lsl #5
    uint32_t length = (x2_flush - x1_flush + 1);
 8007112:	1c43      	adds	r3, r0, #1
    err = HAL_DMA_Start_IT(&DmaHandle,(uint32_t)buf_to_flush, (uint32_t)&my_fb[y_fill_act * TFT_HOR_RES + x1_flush],
 8007114:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8007118:	0092      	lsls	r2, r2, #2
    y2_fill = act_y2;
 800711a:	6479      	str	r1, [r7, #68]	; 0x44
    err = HAL_DMA_Start_IT(&DmaHandle,(uint32_t)buf_to_flush, (uint32_t)&my_fb[y_fill_act * TFT_HOR_RES + x1_flush],
 800711c:	005b      	lsls	r3, r3, #1
 800711e:	4631      	mov	r1, r6
 8007120:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
    x2_flush = act_x2;
 8007124:	64fd      	str	r5, [r7, #76]	; 0x4c
    y_fill_act = act_y1;
 8007126:	643c      	str	r4, [r7, #64]	; 0x40
    buf_to_flush = color_p;
 8007128:	653e      	str	r6, [r7, #80]	; 0x50
    err = HAL_DMA_Start_IT(&DmaHandle,(uint32_t)buf_to_flush, (uint32_t)&my_fb[y_fill_act * TFT_HOR_RES + x1_flush],
 800712a:	f7fb f8cd 	bl	80022c8 <HAL_DMA_Start_IT>
    if(err != HAL_OK)
 800712e:	b100      	cbz	r0, 8007132 <ex_disp_flush+0x6a>
 8007130:	e7fe      	b.n	8007130 <ex_disp_flush+0x68>
 8007132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007134:	20000538 	.word	0x20000538

08007138 <ex_disp_map>:
{
 8007138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(y1 > TFT_VER_RES - 1) return;
 800713c:	f240 150f 	movw	r5, #271	; 0x10f
    if(x1 > TFT_HOR_RES - 1) return;
 8007140:	f240 19df 	movw	r9, #479	; 0x1df
{
 8007144:	9e08      	ldr	r6, [sp, #32]
    if(y1 > TFT_VER_RES - 1) return;
 8007146:	4548      	cmp	r0, r9
 8007148:	bfd8      	it	le
 800714a:	42a9      	cmple	r1, r5
 800714c:	bfcc      	ite	gt
 800714e:	2401      	movgt	r4, #1
 8007150:	2400      	movle	r4, #0
 8007152:	ea54 74d3 	orrs.w	r4, r4, r3, lsr #31
 8007156:	d129      	bne.n	80071ac <ex_disp_map+0x74>
 8007158:	2a00      	cmp	r2, #0
 800715a:	db27      	blt.n	80071ac <ex_disp_map+0x74>
    int32_t act_y2 = y2 > TFT_VER_RES - 1 ? TFT_VER_RES - 1 : y2;
 800715c:	42ab      	cmp	r3, r5
    int32_t act_y1 = y1 < 0 ? 0 : y1;
 800715e:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
    int32_t act_x1 = x1 < 0 ? 0 : x1;
 8007162:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
    int32_t act_y2 = y2 > TFT_VER_RES - 1 ? TFT_VER_RES - 1 : y2;
 8007166:	bfa8      	it	ge
 8007168:	462b      	movge	r3, r5
    int32_t act_x2 = x2 > TFT_HOR_RES - 1 ? TFT_HOR_RES - 1 : x2;
 800716a:	4591      	cmp	r9, r2
 800716c:	bfa8      	it	ge
 800716e:	4691      	movge	r9, r2
    for(y = act_y1; y <= act_y2; y++) {
 8007170:	429c      	cmp	r4, r3
    int32_t act_y2 = y2 > TFT_VER_RES - 1 ? TFT_VER_RES - 1 : y2;
 8007172:	4698      	mov	r8, r3
    for(y = act_y1; y <= act_y2; y++) {
 8007174:	d81a      	bhi.n	80071ac <ex_disp_map+0x74>
 8007176:	ebc4 1504 	rsb	r5, r4, r4, lsl #4
 800717a:	eba9 0901 	sub.w	r9, r9, r1
 800717e:	1a17      	subs	r7, r2, r0
 8007180:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 8007184:	f109 0901 	add.w	r9, r9, #1
 8007188:	3701      	adds	r7, #1
 800718a:	00ad      	lsls	r5, r5, #2
 800718c:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8007190:	00bf      	lsls	r7, r7, #2
 8007192:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007196:	3401      	adds	r4, #1
        memcpy((void*)&my_fb[y * TFT_HOR_RES + act_x1],
 8007198:	4631      	mov	r1, r6
 800719a:	4628      	mov	r0, r5
 800719c:	464a      	mov	r2, r9
 800719e:	f012 fa8f 	bl	80196c0 <memcpy>
    for(y = act_y1; y <= act_y2; y++) {
 80071a2:	4544      	cmp	r4, r8
        color_p += x2 - x1 + 1;    /*Skip the parts out of the screen*/
 80071a4:	443e      	add	r6, r7
 80071a6:	f505 65f0 	add.w	r5, r5, #1920	; 0x780
    for(y = act_y1; y <= act_y2; y++) {
 80071aa:	d9f4      	bls.n	8007196 <ex_disp_map+0x5e>
 80071ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080071b0 <DMA2D_TransferComplete>:
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop

080071b4 <DMA_TransferError>:
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop

080071b8 <tft_init>:
{
 80071b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071bc:	b09c      	sub	sp, #112	; 0x70
    hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80071be:	4cab      	ldr	r4, [pc, #684]	; (800746c <tft_init+0x2b4>)
    hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80071c0:	250b      	movs	r5, #11
    hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80071c2:	f04f 0809 	mov.w	r8, #9
    lv_disp_drv_init(&disp_drv);
 80071c6:	a809      	add	r0, sp, #36	; 0x24
 80071c8:	f008 f97c 	bl	800f4c4 <lv_disp_drv_init>
    hLtdcHandler.Instance = LTDC;
 80071cc:	49a8      	ldr	r1, [pc, #672]	; (8007470 <tft_init+0x2b8>)
    hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80071ce:	2228      	movs	r2, #40	; 0x28
    hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80071d0:	2335      	movs	r3, #53	; 0x35
    hLtdcHandler.Instance = LTDC;
 80071d2:	4620      	mov	r0, r4
    hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80071d4:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
    hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80071d8:	f8c4 20c8 	str.w	r2, [r4, #200]	; 0xc8
    hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80071dc:	f240 2215 	movw	r2, #533	; 0x215
    hLtdcHandler.Instance = LTDC;
 80071e0:	f840 1fb4 	str.w	r1, [r0, #180]!
    hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80071e4:	f240 111b 	movw	r1, #283	; 0x11b
    hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80071e8:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
    hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80071ec:	f240 131d 	movw	r3, #285	; 0x11d
    hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80071f0:	f240 2535 	movw	r5, #565	; 0x235
    hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80071f4:	f8c4 10dc 	str.w	r1, [r4, #220]	; 0xdc
    hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80071f8:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
    hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80071fc:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8007200:	f44f 7288 	mov.w	r2, #272	; 0x110
    hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8007204:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
    hLtdcHandler.Init.Backcolor.Blue = 0;
 8007208:	2300      	movs	r3, #0
    hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800720a:	f8c4 50e0 	str.w	r5, [r4, #224]	; 0xe0
    hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 800720e:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8007212:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
    hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8007216:	f8c4 80cc 	str.w	r8, [r4, #204]	; 0xcc
    hLtdcHandler.Init.Backcolor.Blue = 0;
 800721a:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
    hLtdcHandler.Init.Backcolor.Green = 0;
 800721e:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
    hLtdcHandler.Init.Backcolor.Red = 0;
 8007222:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
    hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8007226:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800722a:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800722e:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
    hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8007232:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8007236:	f7fc fa03 	bl	8003640 <HAL_LTDC_GetState>
 800723a:	2800      	cmp	r0, #0
 800723c:	d07c      	beq.n	8007338 <tft_init+0x180>
 800723e:	ae0f      	add	r6, sp, #60	; 0x3c
    HAL_LTDC_Init(&hLtdcHandler);
 8007240:	488c      	ldr	r0, [pc, #560]	; (8007474 <tft_init+0x2bc>)
        my_fb[i] = 0;
 8007242:	2500      	movs	r5, #0
    HAL_LTDC_Init(&hLtdcHandler);
 8007244:	f7fc f950 	bl	80034e8 <HAL_LTDC_Init>
    HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8007248:	2201      	movs	r2, #1
 800724a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800724e:	488a      	ldr	r0, [pc, #552]	; (8007478 <tft_init+0x2c0>)
 8007250:	f7fb fce2 	bl	8002c18 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8007254:	2201      	movs	r2, #1
 8007256:	2108      	movs	r1, #8
 8007258:	4888      	ldr	r0, [pc, #544]	; (800747c <tft_init+0x2c4>)
 800725a:	f7fb fcdd 	bl	8002c18 <HAL_GPIO_WritePin>
    BSP_SDRAM_Init();
 800725e:	f7ff fd2d 	bl	8006cbc <BSP_SDRAM_Init>
 8007262:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    for(i = 0; i < (TFT_HOR_RES * TFT_VER_RES) ; i++)
 8007266:	4a86      	ldr	r2, [pc, #536]	; (8007480 <tft_init+0x2c8>)
        my_fb[i] = 0;
 8007268:	f843 5b04 	str.w	r5, [r3], #4
    for(i = 0; i < (TFT_HOR_RES * TFT_VER_RES) ; i++)
 800726c:	4293      	cmp	r3, r2
 800726e:	d1fb      	bne.n	8007268 <tft_init+0xb0>
    layer_cfg.WindowX1 = TFT_HOR_RES;
 8007270:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8007274:	2007      	movs	r0, #7
    layer_cfg.FBStartAdress = FB_Address;
 8007276:	f04f 4e40 	mov.w	lr, #3221225472	; 0xc0000000
    layer_cfg.WindowY1 = TFT_VER_RES;
 800727a:	f44f 7388 	mov.w	r3, #272	; 0x110
    layer_cfg.Alpha = 255;
 800727e:	f04f 08ff 	mov.w	r8, #255	; 0xff
    layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8007282:	f44f 67c0 	mov.w	r7, #1536	; 0x600
    HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, 0);
 8007286:	4631      	mov	r1, r6
    layer_cfg.WindowX1 = TFT_HOR_RES;
 8007288:	9210      	str	r2, [sp, #64]	; 0x40
    layer_cfg.ImageWidth = TFT_HOR_RES;
 800728a:	9219      	str	r2, [sp, #100]	; 0x64
    HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, 0);
 800728c:	2200      	movs	r2, #0
    layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800728e:	9017      	str	r0, [sp, #92]	; 0x5c
    DmaHandle.Init.Priority = DMA_PRIORITY_HIGH;                    /* priority level : high            */
 8007290:	f44f 3900 	mov.w	r9, #131072	; 0x20000
    HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, 0);
 8007294:	4877      	ldr	r0, [pc, #476]	; (8007474 <tft_init+0x2bc>)
    DmaHandle.Init.FIFOMode = DMA_FIFOMODE_ENABLE;                  /* FIFO mode enabled                */
 8007296:	f04f 0a04 	mov.w	sl, #4
    layer_cfg.FBStartAdress = FB_Address;
 800729a:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
    layer_cfg.WindowX0 = 0;
 800729e:	950f      	str	r5, [sp, #60]	; 0x3c
    layer_cfg.WindowY0 = 0;
 80072a0:	9511      	str	r5, [sp, #68]	; 0x44
    layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80072a2:	9513      	str	r5, [sp, #76]	; 0x4c
    layer_cfg.Alpha0 = 0;
 80072a4:	9515      	str	r5, [sp, #84]	; 0x54
    layer_cfg.Backcolor.Blue = 0;
 80072a6:	f88d 506c 	strb.w	r5, [sp, #108]	; 0x6c
    layer_cfg.Backcolor.Green = 0;
 80072aa:	f88d 506d 	strb.w	r5, [sp, #109]	; 0x6d
    layer_cfg.Backcolor.Red = 0;
 80072ae:	f88d 506e 	strb.w	r5, [sp, #110]	; 0x6e
    layer_cfg.WindowY1 = TFT_VER_RES;
 80072b2:	9312      	str	r3, [sp, #72]	; 0x48
    layer_cfg.ImageHeight = TFT_VER_RES;
 80072b4:	931a      	str	r3, [sp, #104]	; 0x68
    layer_cfg.Alpha = 255;
 80072b6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
    layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80072ba:	9716      	str	r7, [sp, #88]	; 0x58
    HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, 0);
 80072bc:	f7fc f990 	bl	80035e0 <HAL_LTDC_ConfigLayer>
    __HAL_LTDC_ENABLE(&hLtdcHandler);
 80072c0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80072c4:	2201      	movs	r2, #1
 80072c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    if(HAL_DMA_Init(&DmaHandle) != HAL_OK)
 80072ca:	4e6e      	ldr	r6, [pc, #440]	; (8007484 <tft_init+0x2cc>)
    __HAL_LTDC_ENABLE(&hLtdcHandler);
 80072cc:	6983      	ldr	r3, [r0, #24]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	6183      	str	r3, [r0, #24]
    HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80072d2:	4869      	ldr	r0, [pc, #420]	; (8007478 <tft_init+0x2c0>)
 80072d4:	f7fb fca0 	bl	8002c18 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80072d8:	2201      	movs	r2, #1
 80072da:	2108      	movs	r1, #8
 80072dc:	4867      	ldr	r0, [pc, #412]	; (800747c <tft_init+0x2c4>)
 80072de:	f7fb fc9b 	bl	8002c18 <HAL_GPIO_WritePin>
    __HAL_RCC_DMA2_CLK_ENABLE();
 80072e2:	4b69      	ldr	r3, [pc, #420]	; (8007488 <tft_init+0x2d0>)
    DmaHandle.Init.Direction = DMA_MEMORY_TO_MEMORY;                /* M2M transfer mode                */
 80072e4:	2080      	movs	r0, #128	; 0x80
    DmaHandle.Init.PeriphInc = DMA_PINC_ENABLE;                     /* Peripheral increment mode Enable */
 80072e6:	f44f 7100 	mov.w	r1, #512	; 0x200
    __HAL_RCC_DMA2_CLK_ENABLE();
 80072ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    DmaHandle.Init.Channel = CPY_BUF_DMA_CHANNEL;                   /* DMA_CHANNEL_0                    */
 80072ec:	65a5      	str	r5, [r4, #88]	; 0x58
    __HAL_RCC_DMA2_CLK_ENABLE();
 80072ee:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
    DmaHandle.Init.Mode = DMA_NORMAL;                               /* Normal DMA mode                  */
 80072f2:	6725      	str	r5, [r4, #112]	; 0x70
    DmaHandle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL; /* FIFO threshold: 1/4 full   */
 80072f4:	67e5      	str	r5, [r4, #124]	; 0x7c
    __HAL_RCC_DMA2_CLK_ENABLE();
 80072f6:	631a      	str	r2, [r3, #48]	; 0x30
    DmaHandle.Init.MemInc = DMA_MINC_ENABLE;                        /* Memory increment mode Enable     */
 80072f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_RCC_DMA2_CLK_ENABLE();
 80072fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    DmaHandle.Init.MemInc = DMA_MINC_ENABLE;                        /* Memory increment mode Enable     */
 80072fe:	6662      	str	r2, [r4, #100]	; 0x64
    __HAL_RCC_DMA2_CLK_ENABLE();
 8007300:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    DmaHandle.Instance = CPY_BUF_DMA_STREAM;
 8007304:	4a61      	ldr	r2, [pc, #388]	; (800748c <tft_init+0x2d4>)
    DmaHandle.Init.Direction = DMA_MEMORY_TO_MEMORY;                /* M2M transfer mode                */
 8007306:	65e0      	str	r0, [r4, #92]	; 0x5c
    if(HAL_DMA_Init(&DmaHandle) != HAL_OK)
 8007308:	4630      	mov	r0, r6
    __HAL_RCC_DMA2_CLK_ENABLE();
 800730a:	930f      	str	r3, [sp, #60]	; 0x3c
 800730c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    DmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;   /* Peripheral data alignment : 16bit */
 800730e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    DmaHandle.Init.MemBurst = DMA_MBURST_SINGLE;                    /* Memory burst                     */
 8007312:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    DmaHandle.Init.PeriphBurst = DMA_PBURST_SINGLE;                 /* Peripheral burst                 */
 8007316:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    DmaHandle.Init.PeriphInc = DMA_PINC_ENABLE;                     /* Peripheral increment mode Enable */
 800731a:	6621      	str	r1, [r4, #96]	; 0x60
    DmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;   /* Peripheral data alignment : 16bit */
 800731c:	66a3      	str	r3, [r4, #104]	; 0x68
    DmaHandle.Init.MemDataAlignment = DMA_PDATAALIGN_HALFWORD;      /* memory data alignment : 16bit     */
 800731e:	66e3      	str	r3, [r4, #108]	; 0x6c
    DmaHandle.Init.Priority = DMA_PRIORITY_HIGH;                    /* priority level : high            */
 8007320:	f8c4 9074 	str.w	r9, [r4, #116]	; 0x74
    DmaHandle.Init.FIFOMode = DMA_FIFOMODE_ENABLE;                  /* FIFO mode enabled                */
 8007324:	f8c4 a078 	str.w	sl, [r4, #120]	; 0x78
    DmaHandle.Instance = CPY_BUF_DMA_STREAM;
 8007328:	6562      	str	r2, [r4, #84]	; 0x54
    if(HAL_DMA_Init(&DmaHandle) != HAL_OK)
 800732a:	f7fa feed 	bl	8002108 <HAL_DMA_Init>
 800732e:	4605      	mov	r5, r0
 8007330:	2800      	cmp	r0, #0
 8007332:	f000 80b3 	beq.w	800749c <tft_init+0x2e4>
 8007336:	e7fe      	b.n	8007336 <tft_init+0x17e>
    __HAL_RCC_LTDC_CLK_ENABLE();
 8007338:	4b53      	ldr	r3, [pc, #332]	; (8007488 <tft_init+0x2d0>)
    gpio_init_structure.Pin       = GPIO_PIN_4;
 800733a:	f04f 0e10 	mov.w	lr, #16
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800733e:	ae0f      	add	r6, sp, #60	; 0x3c
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8007340:	2502      	movs	r5, #2
    __HAL_RCC_LTDC_CLK_ENABLE();
 8007342:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8007344:	270e      	movs	r7, #14
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8007346:	4631      	mov	r1, r6
    gpio_init_structure.Pin       = GPIO_PIN_12;
 8007348:	f44f 5980 	mov.w	r9, #4096	; 0x1000
    __HAL_RCC_LTDC_CLK_ENABLE();
 800734c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007350:	645a      	str	r2, [r3, #68]	; 0x44
 8007352:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007354:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8007358:	9200      	str	r2, [sp, #0]
 800735a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800735c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800735e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8007362:	631a      	str	r2, [r3, #48]	; 0x30
 8007364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007366:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 800736a:	9201      	str	r2, [sp, #4]
 800736c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800736e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007370:	ea42 020e 	orr.w	r2, r2, lr
 8007374:	631a      	str	r2, [r3, #48]	; 0x30
 8007376:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007378:	ea02 020e 	and.w	r2, r2, lr
 800737c:	9202      	str	r2, [sp, #8]
 800737e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007382:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007386:	631a      	str	r2, [r3, #48]	; 0x30
 8007388:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800738a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800738e:	9203      	str	r2, [sp, #12]
 8007390:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8007392:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007394:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007398:	631a      	str	r2, [r3, #48]	; 0x30
 800739a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800739c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80073a0:	9204      	str	r2, [sp, #16]
 80073a2:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80073a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073aa:	631a      	str	r2, [r3, #48]	; 0x30
 80073ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073ae:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80073b2:	9205      	str	r2, [sp, #20]
 80073b4:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80073b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80073bc:	631a      	str	r2, [r3, #48]	; 0x30
 80073be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073c0:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80073c4:	9206      	str	r2, [sp, #24]
 80073c6:	9a06      	ldr	r2, [sp, #24]
    LCD_DISP_GPIO_CLK_ENABLE();
 80073c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073ce:	631a      	str	r2, [r3, #48]	; 0x30
 80073d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073d2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80073d6:	9207      	str	r2, [sp, #28]
 80073d8:	9a07      	ldr	r2, [sp, #28]
    LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80073da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80073e0:	631a      	str	r2, [r3, #48]	; 0x30
 80073e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    gpio_init_structure.Pull      = GPIO_NOPULL;
 80073e4:	9011      	str	r0, [sp, #68]	; 0x44
    LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80073e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80073ea:	4829      	ldr	r0, [pc, #164]	; (8007490 <tft_init+0x2d8>)
    gpio_init_structure.Pin       = GPIO_PIN_4;
 80073ec:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
    LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80073f0:	9308      	str	r3, [sp, #32]
 80073f2:	9b08      	ldr	r3, [sp, #32]
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80073f4:	9510      	str	r5, [sp, #64]	; 0x40
    gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80073f6:	9512      	str	r5, [sp, #72]	; 0x48
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80073f8:	9713      	str	r7, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80073fa:	f7fb fa1f 	bl	800283c <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80073fe:	4631      	mov	r1, r6
 8007400:	4824      	ldr	r0, [pc, #144]	; (8007494 <tft_init+0x2dc>)
    gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8007402:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8007406:	f04f 0801 	mov.w	r8, #1
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800740a:	9510      	str	r5, [sp, #64]	; 0x40
    gpio_init_structure.Pin       = GPIO_PIN_12;
 800740c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8007410:	f7fb fa14 	bl	800283c <HAL_GPIO_Init>
    gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8007414:	f44f 4366 	mov.w	r3, #58880	; 0xe600
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8007418:	4631      	mov	r1, r6
 800741a:	4817      	ldr	r0, [pc, #92]	; (8007478 <tft_init+0x2c0>)
    gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 800741c:	930f      	str	r3, [sp, #60]	; 0x3c
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800741e:	9510      	str	r5, [sp, #64]	; 0x40
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8007420:	9713      	str	r7, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8007422:	f7fb fa0b 	bl	800283c <HAL_GPIO_Init>
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8007426:	f64e 73ff 	movw	r3, #61439	; 0xefff
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800742a:	4631      	mov	r1, r6
 800742c:	481a      	ldr	r0, [pc, #104]	; (8007498 <tft_init+0x2e0>)
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800742e:	930f      	str	r3, [sp, #60]	; 0x3c
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8007430:	9510      	str	r5, [sp, #64]	; 0x40
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8007432:	9713      	str	r7, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8007434:	f7fb fa02 	bl	800283c <HAL_GPIO_Init>
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8007438:	23f7      	movs	r3, #247	; 0xf7
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800743a:	4631      	mov	r1, r6
 800743c:	480f      	ldr	r0, [pc, #60]	; (800747c <tft_init+0x2c4>)
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 800743e:	930f      	str	r3, [sp, #60]	; 0x3c
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8007440:	9510      	str	r5, [sp, #64]	; 0x40
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8007442:	9713      	str	r7, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8007444:	f7fb f9fa 	bl	800283c <HAL_GPIO_Init>
    HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8007448:	4631      	mov	r1, r6
 800744a:	480b      	ldr	r0, [pc, #44]	; (8007478 <tft_init+0x2c0>)
    gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 800744c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8007450:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
    HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8007454:	f7fb f9f2 	bl	800283c <HAL_GPIO_Init>
    gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8007458:	2308      	movs	r3, #8
    HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800745a:	4631      	mov	r1, r6
 800745c:	4807      	ldr	r0, [pc, #28]	; (800747c <tft_init+0x2c4>)
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800745e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
    gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8007462:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8007464:	f7fb f9ea 	bl	800283c <HAL_GPIO_Init>
 8007468:	e6ea      	b.n	8007240 <tft_init+0x88>
 800746a:	bf00      	nop
 800746c:	20000538 	.word	0x20000538
 8007470:	40016800 	.word	0x40016800
 8007474:	200005ec 	.word	0x200005ec
 8007478:	40022000 	.word	0x40022000
 800747c:	40022800 	.word	0x40022800
 8007480:	c007f800 	.word	0xc007f800
 8007484:	2000058c 	.word	0x2000058c
 8007488:	40023800 	.word	0x40023800
 800748c:	40026410 	.word	0x40026410
 8007490:	40021000 	.word	0x40021000
 8007494:	40021800 	.word	0x40021800
 8007498:	40022400 	.word	0x40022400
    HAL_DMA_RegisterCallback(&DmaHandle, HAL_DMA_XFER_CPLT_CB_ID, DMA_TransferComplete);
 800749c:	4601      	mov	r1, r0
 800749e:	4a26      	ldr	r2, [pc, #152]	; (8007538 <tft_init+0x380>)
 80074a0:	4630      	mov	r0, r6
    /* DMA2D Callbacks Configuration */
    Dma2dHandle.XferCpltCallback  = DMA2D_TransferComplete;
    Dma2dHandle.XferErrorCallback = DMA2D_TransferError;

    /* Foreground Configuration */
    Dma2dHandle.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 80074a2:	2701      	movs	r7, #1
    HAL_DMA_RegisterCallback(&DmaHandle, HAL_DMA_XFER_CPLT_CB_ID, DMA_TransferComplete);
 80074a4:	f7fb f824 	bl	80024f0 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&DmaHandle, HAL_DMA_XFER_ERROR_CB_ID, DMA_TransferError);
 80074a8:	4651      	mov	r1, sl
 80074aa:	4a24      	ldr	r2, [pc, #144]	; (800753c <tft_init+0x384>)
 80074ac:	4630      	mov	r0, r6
 80074ae:	f7fb f81f 	bl	80024f0 <HAL_DMA_RegisterCallback>
    HAL_NVIC_SetPriority(CPY_BUF_DMA_STREAM_IRQ, 0, 0);
 80074b2:	462a      	mov	r2, r5
 80074b4:	4629      	mov	r1, r5
 80074b6:	2038      	movs	r0, #56	; 0x38
 80074b8:	f7fa fd94 	bl	8001fe4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CPY_BUF_DMA_STREAM_IRQ);
 80074bc:	2038      	movs	r0, #56	; 0x38
 80074be:	f7fa fdcb 	bl	8002058 <HAL_NVIC_EnableIRQ>
    disp_drv.disp_fill = ex_disp_fill;
 80074c2:	f8df a090 	ldr.w	sl, [pc, #144]	; 8007554 <tft_init+0x39c>
    Dma2dHandle.XferCpltCallback  = DMA2D_TransferComplete;
 80074c6:	491e      	ldr	r1, [pc, #120]	; (8007540 <tft_init+0x388>)
    Dma2dHandle.LayerCfg[0].InputOffset = 0x0;

    Dma2dHandle.Instance   = DMA2D;

    /* DMA2D Initialization */
    if(HAL_DMA2D_Init(&Dma2dHandle) != HAL_OK)
 80074c8:	f1a6 0054 	sub.w	r0, r6, #84	; 0x54
    disp_drv.disp_map = ex_disp_map;
 80074cc:	f8df c088 	ldr.w	ip, [pc, #136]	; 8007558 <tft_init+0x3a0>
    disp_drv.disp_flush = ex_disp_flush;
 80074d0:	f8df e088 	ldr.w	lr, [pc, #136]	; 800755c <tft_init+0x3a4>
    Dma2dHandle.XferErrorCallback = DMA2D_TransferError;
 80074d4:	4a1b      	ldr	r2, [pc, #108]	; (8007544 <tft_init+0x38c>)
    Dma2dHandle.Instance   = DMA2D;
 80074d6:	4b1c      	ldr	r3, [pc, #112]	; (8007548 <tft_init+0x390>)
    Dma2dHandle.XferCpltCallback  = DMA2D_TransferComplete;
 80074d8:	6121      	str	r1, [r4, #16]
    Dma2dHandle.Init.Mode         = DMA2D_M2M_BLEND;
 80074da:	f8c4 9004 	str.w	r9, [r4, #4]
    Dma2dHandle.Init.ColorMode    = DMA2D_ARGB8888;
 80074de:	60a5      	str	r5, [r4, #8]
    Dma2dHandle.Init.OutputOffset = 0x0;
 80074e0:	60e5      	str	r5, [r4, #12]
    Dma2dHandle.LayerCfg[1].InputAlpha = 0xFF;
 80074e2:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
    Dma2dHandle.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80074e6:	62e5      	str	r5, [r4, #44]	; 0x2c
    Dma2dHandle.LayerCfg[1].InputOffset = 0x0;
 80074e8:	62a5      	str	r5, [r4, #40]	; 0x28
    Dma2dHandle.LayerCfg[0].InputAlpha = 0xFF;
 80074ea:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    Dma2dHandle.LayerCfg[0].InputColorMode = DMA2D_INPUT_ARGB8888;
 80074ee:	61e5      	str	r5, [r4, #28]
    Dma2dHandle.LayerCfg[0].InputOffset = 0x0;
 80074f0:	61a5      	str	r5, [r4, #24]
    disp_drv.disp_fill = ex_disp_fill;
 80074f2:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
    disp_drv.disp_map = ex_disp_map;
 80074f6:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    disp_drv.disp_flush = ex_disp_flush;
 80074fa:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
    Dma2dHandle.XferErrorCallback = DMA2D_TransferError;
 80074fe:	6162      	str	r2, [r4, #20]
    Dma2dHandle.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8007500:	6327      	str	r7, [r4, #48]	; 0x30
    Dma2dHandle.LayerCfg[0].AlphaMode = DMA2D_REPLACE_ALPHA;
 8007502:	6227      	str	r7, [r4, #32]
    Dma2dHandle.Instance   = DMA2D;
 8007504:	6023      	str	r3, [r4, #0]
    if(HAL_DMA2D_Init(&Dma2dHandle) != HAL_OK)
 8007506:	f7fb f869 	bl	80025dc <HAL_DMA2D_Init>
 800750a:	4601      	mov	r1, r0
 800750c:	b100      	cbz	r0, 8007510 <tft_init+0x358>
 800750e:	e7fe      	b.n	800750e <tft_init+0x356>
    {
        /* Initialization Error */
        Error_Handler();
    }

    HAL_DMA2D_ConfigLayer(&Dma2dHandle, 0);
 8007510:	f1a6 0054 	sub.w	r0, r6, #84	; 0x54
 8007514:	f7fb f93c 	bl	8002790 <HAL_DMA2D_ConfigLayer>
    HAL_DMA2D_ConfigLayer(&Dma2dHandle, 1);
 8007518:	4639      	mov	r1, r7
 800751a:	f1a6 0054 	sub.w	r0, r6, #84	; 0x54
 800751e:	f7fb f937 	bl	8002790 <HAL_DMA2D_ConfigLayer>
    disp_drv.mem_blend = gpu_mem_blend;
 8007522:	4a0a      	ldr	r2, [pc, #40]	; (800754c <tft_init+0x394>)
    disp_drv.mem_fill = gpu_mem_fill;
 8007524:	4b0a      	ldr	r3, [pc, #40]	; (8007550 <tft_init+0x398>)
    lv_disp_drv_register(&disp_drv);
 8007526:	a809      	add	r0, sp, #36	; 0x24
    disp_drv.mem_blend = gpu_mem_blend;
 8007528:	920c      	str	r2, [sp, #48]	; 0x30
    disp_drv.mem_fill = gpu_mem_fill;
 800752a:	930d      	str	r3, [sp, #52]	; 0x34
    lv_disp_drv_register(&disp_drv);
 800752c:	f007 ffd2 	bl	800f4d4 <lv_disp_drv_register>
}
 8007530:	b01c      	add	sp, #112	; 0x70
 8007532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007536:	bf00      	nop
 8007538:	08007081 	.word	0x08007081
 800753c:	080071b5 	.word	0x080071b5
 8007540:	080071b1 	.word	0x080071b1
 8007544:	08006fe1 	.word	0x08006fe1
 8007548:	4002b000 	.word	0x4002b000
 800754c:	08007031 	.word	0x08007031
 8007550:	08006fe5 	.word	0x08006fe5
 8007554:	08006f79 	.word	0x08006f79
 8007558:	08007139 	.word	0x08007139
 800755c:	080070c9 	.word	0x080070c9

08007560 <DMA2_Stream0_IRQHandler>:
    HAL_DMA_IRQHandler(&DmaHandle);
 8007560:	4801      	ldr	r0, [pc, #4]	; (8007568 <DMA2_Stream0_IRQHandler+0x8>)
 8007562:	f7fa bef5 	b.w	8002350 <HAL_DMA_IRQHandler>
 8007566:	bf00      	nop
 8007568:	2000058c 	.word	0x2000058c

0800756c <touchpad_read>:
 * @param x put the x coordinate here
 * @param y put the y coordinate here
 * @return true: the device is pressed, false: released
 */
static bool touchpad_read(lv_indev_data_t *data)
{
 800756c:	b538      	push	{r3, r4, r5, lr}
    /* Read your touchpad */
    static int16_t last_x = 0;
    static int16_t last_y = 0;
    BSP_LED_Toggle(LED1);

    BSP_TS_GetState(&TS_State);
 800756e:	4c0e      	ldr	r4, [pc, #56]	; (80075a8 <touchpad_read+0x3c>)
{
 8007570:	4605      	mov	r5, r0
    BSP_LED_Toggle(LED1);
 8007572:	2000      	movs	r0, #0
 8007574:	f7ff fa56 	bl	8006a24 <BSP_LED_Toggle>
    BSP_TS_GetState(&TS_State);
 8007578:	4620      	mov	r0, r4
 800757a:	f7ff fc47 	bl	8006e0c <BSP_TS_GetState>
    if(TS_State.touchDetected) {
 800757e:	7823      	ldrb	r3, [r4, #0]
 8007580:	b933      	cbnz	r3, 8007590 <touchpad_read+0x24>
            data->point.y = TS_State.touchY[0];
            last_x = data->point.x;
            last_y = data->point.y;
            data->state = LV_INDEV_STATE_PR;
    } else {
            data->point.x = last_x;
 8007582:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
            data->point.y = last_y;
            data->state = LV_INDEV_STATE_REL;
    }

    return false;   /*false: no more data to read because we are no buffering*/
}
 8007584:	2000      	movs	r0, #0
            data->point.y = last_y;
 8007586:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
            data->state = LV_INDEV_STATE_REL;
 8007588:	722b      	strb	r3, [r5, #8]
            data->point.x = last_x;
 800758a:	8029      	strh	r1, [r5, #0]
            data->point.y = last_y;
 800758c:	806a      	strh	r2, [r5, #2]
}
 800758e:	bd38      	pop	{r3, r4, r5, pc}
            data->point.x = TS_State.touchX[0];
 8007590:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
            data->state = LV_INDEV_STATE_PR;
 8007594:	2101      	movs	r1, #1
}
 8007596:	2000      	movs	r0, #0
            data->point.x = TS_State.touchX[0];
 8007598:	802a      	strh	r2, [r5, #0]
            data->point.y = TS_State.touchY[0];
 800759a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
            last_x = data->point.x;
 800759e:	85a2      	strh	r2, [r4, #44]	; 0x2c
            data->point.y = TS_State.touchY[0];
 80075a0:	806b      	strh	r3, [r5, #2]
            last_y = data->point.y;
 80075a2:	85e3      	strh	r3, [r4, #46]	; 0x2e
            data->state = LV_INDEV_STATE_PR;
 80075a4:	7229      	strb	r1, [r5, #8]
}
 80075a6:	bd38      	pop	{r3, r4, r5, pc}
 80075a8:	20000694 	.word	0x20000694

080075ac <touchpad_init>:
{
 80075ac:	b500      	push	{lr}
 80075ae:	b085      	sub	sp, #20
    BSP_TS_Init(TFT_HOR_RES, TFT_VER_RES);
 80075b0:	f44f 7188 	mov.w	r1, #272	; 0x110
 80075b4:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80075b8:	f7ff fbc8 	bl	8006d4c <BSP_TS_Init>
    lv_indev_drv_init(&indev_drv);                  /*Basic initialization*/
 80075bc:	a801      	add	r0, sp, #4
 80075be:	f007 fff5 	bl	800f5ac <lv_indev_drv_init>
    indev_drv.type = LV_INDEV_TYPE_POINTER;         /*The touchpad is pointer type device*/
 80075c2:	2201      	movs	r2, #1
    indev_drv.read = touchpad_read;
 80075c4:	4b04      	ldr	r3, [pc, #16]	; (80075d8 <touchpad_init+0x2c>)
    lv_indev_drv_register(&indev_drv);
 80075c6:	a801      	add	r0, sp, #4
    indev_drv.type = LV_INDEV_TYPE_POINTER;         /*The touchpad is pointer type device*/
 80075c8:	f88d 2004 	strb.w	r2, [sp, #4]
    indev_drv.read = touchpad_read;
 80075cc:	9302      	str	r3, [sp, #8]
    lv_indev_drv_register(&indev_drv);
 80075ce:	f007 fff3 	bl	800f5b8 <lv_indev_drv_register>
}
 80075d2:	b005      	add	sp, #20
 80075d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80075d8:	0800756d 	.word	0x0800756d

080075dc <keyboard_hide_action>:
 * Called when the close or ok button is pressed on the keyboard
 * @param keyboard pointer to the keyboard
 * @return
 */
static lv_res_t keyboard_hide_action(lv_obj_t * keyboard)
{
 80075dc:	b530      	push	{r4, r5, lr}
    (void) keyboard;    /*Unused*/

#if USE_LV_ANIMATION
    lv_obj_animate(kb, LV_ANIM_FLOAT_BOTTOM | LV_ANIM_OUT, 300, 0, kb_hide_anim_end);
 80075de:	4c08      	ldr	r4, [pc, #32]	; (8007600 <keyboard_hide_action+0x24>)
{
 80075e0:	b083      	sub	sp, #12
    lv_obj_animate(kb, LV_ANIM_FLOAT_BOTTOM | LV_ANIM_OUT, 300, 0, kb_hide_anim_end);
 80075e2:	4d08      	ldr	r5, [pc, #32]	; (8007604 <keyboard_hide_action+0x28>)
 80075e4:	2300      	movs	r3, #0
 80075e6:	6820      	ldr	r0, [r4, #0]
 80075e8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80075ec:	2183      	movs	r1, #131	; 0x83
 80075ee:	9500      	str	r5, [sp, #0]
 80075f0:	f002 f8ca 	bl	8009788 <lv_obj_animate>
    kb = NULL;
 80075f4:	2300      	movs	r3, #0
#else
    lv_obj_del(kb);
    kb = NULL;
    return LV_RES_INV;
#endif
}
 80075f6:	2001      	movs	r0, #1
    kb = NULL;
 80075f8:	6023      	str	r3, [r4, #0]
}
 80075fa:	b003      	add	sp, #12
 80075fc:	bd30      	pop	{r4, r5, pc}
 80075fe:	bf00      	nop
 8007600:	200006c4 	.word	0x200006c4
 8007604:	080076dd 	.word	0x080076dd

08007608 <keyboard_open_close>:
{
 8007608:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_obj_t * parent = lv_obj_get_parent(lv_obj_get_parent(ta));   /*Test area is on the scrollable part of the page but we need the page itself*/
 800760a:	4c2e      	ldr	r4, [pc, #184]	; (80076c4 <keyboard_open_close+0xbc>)
{
 800760c:	b083      	sub	sp, #12
    lv_obj_t * parent = lv_obj_get_parent(lv_obj_get_parent(ta));   /*Test area is on the scrollable part of the page but we need the page itself*/
 800760e:	6860      	ldr	r0, [r4, #4]
 8007610:	f002 f942 	bl	8009898 <lv_obj_get_parent>
 8007614:	f002 f940 	bl	8009898 <lv_obj_get_parent>
    if(kb) {
 8007618:	6821      	ldr	r1, [r4, #0]
 800761a:	b169      	cbz	r1, 8007638 <keyboard_open_close+0x30>
    lv_obj_animate(kb, LV_ANIM_FLOAT_BOTTOM | LV_ANIM_OUT, 300, 0, kb_hide_anim_end);
 800761c:	4d2a      	ldr	r5, [pc, #168]	; (80076c8 <keyboard_open_close+0xc0>)
 800761e:	4608      	mov	r0, r1
 8007620:	2300      	movs	r3, #0
 8007622:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007626:	9500      	str	r5, [sp, #0]
 8007628:	2183      	movs	r1, #131	; 0x83
 800762a:	f002 f8ad 	bl	8009788 <lv_obj_animate>
    kb = NULL;
 800762e:	2300      	movs	r3, #0
}
 8007630:	2001      	movs	r0, #1
    kb = NULL;
 8007632:	6023      	str	r3, [r4, #0]
}
 8007634:	b003      	add	sp, #12
 8007636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007638:	4605      	mov	r5, r0
        kb = lv_kb_create(parent, NULL);
 800763a:	f00c fc2b 	bl	8013e94 <lv_kb_create>
 800763e:	4606      	mov	r6, r0
 * @param page pointer to a page object
 * @return the width of the scrollable
 */
static inline lv_coord_t lv_page_get_scrl_width(const lv_obj_t *page)
{
    return lv_obj_get_width(lv_page_get_scrl(page));
 8007640:	4628      	mov	r0, r5
 8007642:	6026      	str	r6, [r4, #0]
 8007644:	f00f f81a 	bl	801667c <lv_page_get_scrl>
 8007648:	f002 f9d6 	bl	80099f8 <lv_obj_get_width>
 800764c:	4607      	mov	r7, r0
        lv_obj_set_size(kb, lv_page_get_scrl_width(parent), lv_obj_get_height(parent) / 2);
 800764e:	4628      	mov	r0, r5
        lv_obj_align(kb, ta, LV_ALIGN_OUT_BOTTOM_MID, 0, 0);
 8007650:	2500      	movs	r5, #0
        lv_obj_set_size(kb, lv_page_get_scrl_width(parent), lv_obj_get_height(parent) / 2);
 8007652:	f002 f9d7 	bl	8009a04 <lv_obj_get_height>
 8007656:	1e02      	subs	r2, r0, #0
 8007658:	4639      	mov	r1, r7
 800765a:	4630      	mov	r0, r6
 800765c:	bfb8      	it	lt
 800765e:	3201      	addlt	r2, #1
 8007660:	f342 024f 	sbfx	r2, r2, #1, #16
 8007664:	f001 fe22 	bl	80092ac <lv_obj_set_size>
        lv_obj_align(kb, ta, LV_ALIGN_OUT_BOTTOM_MID, 0, 0);
 8007668:	462b      	mov	r3, r5
 800766a:	220d      	movs	r2, #13
 800766c:	9500      	str	r5, [sp, #0]
 800766e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007672:	f001 fe61 	bl	8009338 <lv_obj_align>
        lv_kb_set_ta(kb, ta);
 8007676:	e894 0003 	ldmia.w	r4, {r0, r1}
 800767a:	f00c fc9b 	bl	8013fb4 <lv_kb_set_ta>
        lv_kb_set_style(kb, LV_KB_STYLE_BG, &style_kb);
 800767e:	4629      	mov	r1, r5
 8007680:	6820      	ldr	r0, [r4, #0]
 8007682:	4a12      	ldr	r2, [pc, #72]	; (80076cc <keyboard_open_close+0xc4>)
 8007684:	f00c fd9e 	bl	80141c4 <lv_kb_set_style>
        lv_kb_set_style(kb, LV_KB_STYLE_BTN_REL, &style_kb_rel);
 8007688:	6820      	ldr	r0, [r4, #0]
 800768a:	4a11      	ldr	r2, [pc, #68]	; (80076d0 <keyboard_open_close+0xc8>)
 800768c:	2101      	movs	r1, #1
 800768e:	f00c fd99 	bl	80141c4 <lv_kb_set_style>
        lv_kb_set_style(kb, LV_KB_STYLE_BTN_PR, &style_kb_pr);
 8007692:	4a10      	ldr	r2, [pc, #64]	; (80076d4 <keyboard_open_close+0xcc>)
 8007694:	6820      	ldr	r0, [r4, #0]
 8007696:	2102      	movs	r1, #2
 8007698:	f00c fd94 	bl	80141c4 <lv_kb_set_style>
        lv_kb_set_hide_action(kb, keyboard_hide_action);
 800769c:	6820      	ldr	r0, [r4, #0]
 800769e:	490e      	ldr	r1, [pc, #56]	; (80076d8 <keyboard_open_close+0xd0>)
 80076a0:	f00c fd8a 	bl	80141b8 <lv_kb_set_hide_action>
        lv_kb_set_ok_action(kb, keyboard_hide_action);
 80076a4:	6820      	ldr	r0, [r4, #0]
 80076a6:	490c      	ldr	r1, [pc, #48]	; (80076d8 <keyboard_open_close+0xd0>)
 80076a8:	f00c fd80 	bl	80141ac <lv_kb_set_ok_action>
        lv_obj_animate(kb, LV_ANIM_FLOAT_BOTTOM | LV_ANIM_IN, 300, 0, NULL);
 80076ac:	6820      	ldr	r0, [r4, #0]
 80076ae:	9500      	str	r5, [sp, #0]
 80076b0:	462b      	mov	r3, r5
 80076b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80076b6:	2103      	movs	r1, #3
 80076b8:	f002 f866 	bl	8009788 <lv_obj_animate>
}
 80076bc:	2001      	movs	r0, #1
 80076be:	b003      	add	sp, #12
 80076c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076c2:	bf00      	nop
 80076c4:	200006c4 	.word	0x200006c4
 80076c8:	080076dd 	.word	0x080076dd
 80076cc:	200006cc 	.word	0x200006cc
 80076d0:	20000714 	.word	0x20000714
 80076d4:	2000075c 	.word	0x2000075c
 80076d8:	080075dd 	.word	0x080075dd

080076dc <kb_hide_anim_end>:
    lv_obj_align(mbox, parent, LV_ALIGN_IN_TOP_MID, 0, LV_DPI / 2);
}

static void kb_hide_anim_end(lv_obj_t * keyboard)
{
    lv_obj_del(keyboard);
 80076dc:	f001 bc00 	b.w	8008ee0 <lv_obj_del>

080076e0 <list_btn_action>:
 * Called when a a list button is clicked on the List tab
 * @param btn pointer to a list button
 * @return LV_RES_OK because the button is not deleted in the function
 */
static lv_res_t list_btn_action(lv_obj_t * btn)
{
 80076e0:	b538      	push	{r3, r4, r5, lr}
    lv_ta_add_char(ta, '\n');
 80076e2:	4c08      	ldr	r4, [pc, #32]	; (8007704 <list_btn_action+0x24>)
{
 80076e4:	4605      	mov	r5, r0
    lv_ta_add_char(ta, '\n');
 80076e6:	210a      	movs	r1, #10
 80076e8:	6860      	ldr	r0, [r4, #4]
 80076ea:	f010 fe05 	bl	80182f8 <lv_ta_add_char>
    lv_ta_add_text(ta, lv_list_get_btn_text(btn));
 80076ee:	6864      	ldr	r4, [r4, #4]
 80076f0:	4628      	mov	r0, r5
 80076f2:	f00d fce9 	bl	80150c8 <lv_list_get_btn_text>
 80076f6:	4601      	mov	r1, r0
 80076f8:	4620      	mov	r0, r4
 80076fa:	f010 fead 	bl	8018458 <lv_ta_add_text>

    return LV_RES_OK;
}
 80076fe:	2001      	movs	r0, #1
 8007700:	bd38      	pop	{r3, r4, r5, pc}
 8007702:	bf00      	nop
 8007704:	200006c4 	.word	0x200006c4

08007708 <slider_action>:
{
 8007708:	b508      	push	{r3, lr}
    int16_t v = lv_slider_get_value(slider);
 800770a:	f00f fd1d 	bl	8017148 <lv_slider_get_value>
    v = 1000 * 100 / v; /*Convert to range modify values linearly*/
 800770e:	4a06      	ldr	r2, [pc, #24]	; (8007728 <slider_action+0x20>)
    lv_chart_set_range(chart, 0, v);
 8007710:	4b06      	ldr	r3, [pc, #24]	; (800772c <slider_action+0x24>)
 8007712:	2100      	movs	r1, #0
    v = 1000 * 100 / v; /*Convert to range modify values linearly*/
 8007714:	fb92 f2f0 	sdiv	r2, r2, r0
    lv_chart_set_range(chart, 0, v);
 8007718:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 800771c:	b212      	sxth	r2, r2
 800771e:	f00b fcbd 	bl	801309c <lv_chart_set_range>
}
 8007722:	2001      	movs	r0, #1
 8007724:	bd08      	pop	{r3, pc}
 8007726:	bf00      	nop
 8007728:	000186a0 	.word	0x000186a0
 800772c:	200006c4 	.word	0x200006c4

08007730 <demo_create>:
{
 8007730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007734:	b085      	sub	sp, #20
    lv_style_copy(&style_tv_btn_bg, &lv_style_plain);
 8007736:	4ceb      	ldr	r4, [pc, #940]	; (8007ae4 <demo_create+0x3b4>)
    lv_obj_t * wp = lv_img_create(lv_scr_act(), NULL);
 8007738:	f002 f89c 	bl	8009874 <lv_scr_act>
 800773c:	2100      	movs	r1, #0
 800773e:	f00c fad5 	bl	8013cec <lv_img_create>
 8007742:	4607      	mov	r7, r0
    lv_img_set_src(wp, &img_bubble_pattern);
 8007744:	49e8      	ldr	r1, [pc, #928]	; (8007ae8 <demo_create+0x3b8>)
    style_tv_btn_bg.body.main_color = LV_COLOR_HEX(0x487fb7);
 8007746:	25ff      	movs	r5, #255	; 0xff
    lv_img_set_src(wp, &img_bubble_pattern);
 8007748:	f00c fa28 	bl	8013b9c <lv_img_set_src>
    lv_obj_set_width(wp, LV_HOR_RES * 4);
 800774c:	4638      	mov	r0, r7
 800774e:	f44f 61f0 	mov.w	r1, #1920	; 0x780
    style_tv_btn_bg.body.padding.ver = 0;
 8007752:	2600      	movs	r6, #0
    lv_obj_set_width(wp, LV_HOR_RES * 4);
 8007754:	f001 fde0 	bl	8009318 <lv_obj_set_width>
    lv_obj_set_protect(wp, LV_PROTECT_POS);
 8007758:	4638      	mov	r0, r7
 800775a:	2104      	movs	r1, #4
    style_tv_btn_bg.body.main_color = LV_COLOR_HEX(0x487fb7);
 800775c:	f04f 087f 	mov.w	r8, #127	; 0x7f
    lv_obj_set_protect(wp, LV_PROTECT_POS);
 8007760:	f001 ffec 	bl	800973c <lv_obj_set_protect>
    lv_style_copy(&style_tv_btn_bg, &lv_style_plain);
 8007764:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
 8007768:	49e0      	ldr	r1, [pc, #896]	; (8007aec <demo_create+0x3bc>)
    style_kb_rel.body.border.color = LV_COLOR_SILVER;
 800776a:	f04f 0bc0 	mov.w	fp, #192	; 0xc0
    lv_style_copy(&style_tv_btn_bg, &lv_style_plain);
 800776e:	f002 ff49 	bl	800a604 <lv_style_copy>
    style_tv_btn_bg.body.main_color = LV_COLOR_HEX(0x487fb7);
 8007772:	22b7      	movs	r2, #183	; 0xb7
 8007774:	2348      	movs	r3, #72	; 0x48
    lv_style_copy(&style_tv_btn_rel, &lv_style_btn_rel);
 8007776:	f504 7096 	add.w	r0, r4, #300	; 0x12c
 800777a:	49dd      	ldr	r1, [pc, #884]	; (8007af0 <demo_create+0x3c0>)
    style_tv_btn_bg.body.main_color = LV_COLOR_HEX(0x487fb7);
 800777c:	f884 20e8 	strb.w	r2, [r4, #232]	; 0xe8
    style_tv_btn_bg.body.grad_color = LV_COLOR_HEX(0x487fb7);
 8007780:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec
    style_tv_btn_bg.body.main_color = LV_COLOR_HEX(0x487fb7);
 8007784:	f884 80e9 	strb.w	r8, [r4, #233]	; 0xe9
    style_tv_btn_bg.body.grad_color = LV_COLOR_HEX(0x487fb7);
 8007788:	f884 80ed 	strb.w	r8, [r4, #237]	; 0xed
    style_tv_btn_bg.body.main_color = LV_COLOR_HEX(0x487fb7);
 800778c:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
    style_tv_btn_bg.body.grad_color = LV_COLOR_HEX(0x487fb7);
 8007790:	f884 30ee 	strb.w	r3, [r4, #238]	; 0xee
    style_tv_btn_bg.body.main_color = LV_COLOR_HEX(0x487fb7);
 8007794:	f884 50eb 	strb.w	r5, [r4, #235]	; 0xeb
    style_tv_btn_bg.body.grad_color = LV_COLOR_HEX(0x487fb7);
 8007798:	f884 50ef 	strb.w	r5, [r4, #239]	; 0xef
    style_tv_btn_bg.body.padding.ver = 0;
 800779c:	f8a4 6104 	strh.w	r6, [r4, #260]	; 0x104
    lv_style_copy(&style_tv_btn_rel, &lv_style_btn_rel);
 80077a0:	f002 ff30 	bl	800a604 <lv_style_copy>
    style_tv_btn_rel.body.empty = 1;
 80077a4:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
    lv_style_copy(&style_tv_btn_pr, &lv_style_btn_pr);
 80077a8:	f504 70ba 	add.w	r0, r4, #372	; 0x174
 80077ac:	49d1      	ldr	r1, [pc, #836]	; (8007af4 <demo_create+0x3c4>)
    style_tv_btn_rel.body.empty = 1;
 80077ae:	f043 0301 	orr.w	r3, r3, #1
    style_tv_btn_rel.body.border.width = 0;
 80077b2:	f8a4 6140 	strh.w	r6, [r4, #320]	; 0x140
    style_tv_btn_rel.body.empty = 1;
 80077b6:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
    lv_style_copy(&style_tv_btn_pr, &lv_style_btn_pr);
 80077ba:	f002 ff23 	bl	800a604 <lv_style_copy>
    style_tv_btn_pr.text.color = LV_COLOR_GRAY;
 80077be:	2380      	movs	r3, #128	; 0x80
    style_tv_btn_pr.body.opa = LV_OPA_50;
 80077c0:	f884 8182 	strb.w	r8, [r4, #386]	; 0x182
    style_tv_btn_pr.body.radius = 0;
 80077c4:	f8a4 6180 	strh.w	r6, [r4, #384]	; 0x180
    style_tv_btn_pr.text.color = LV_COLOR_GRAY;
 80077c8:	f884 319c 	strb.w	r3, [r4, #412]	; 0x19c
 80077cc:	f884 319d 	strb.w	r3, [r4, #413]	; 0x19d
 80077d0:	f884 319e 	strb.w	r3, [r4, #414]	; 0x19e
    style_tv_btn_pr.body.main_color = LV_COLOR_WHITE;
 80077d4:	f884 5178 	strb.w	r5, [r4, #376]	; 0x178
 80077d8:	f884 5179 	strb.w	r5, [r4, #377]	; 0x179
 80077dc:	f884 517a 	strb.w	r5, [r4, #378]	; 0x17a
 80077e0:	f884 517b 	strb.w	r5, [r4, #379]	; 0x17b
    style_tv_btn_pr.body.grad_color = LV_COLOR_WHITE;
 80077e4:	f884 517c 	strb.w	r5, [r4, #380]	; 0x17c
 80077e8:	f884 517d 	strb.w	r5, [r4, #381]	; 0x17d
 80077ec:	f884 517e 	strb.w	r5, [r4, #382]	; 0x17e
 80077f0:	f884 517f 	strb.w	r5, [r4, #383]	; 0x17f
    style_tv_btn_pr.body.border.width = 0;
 80077f4:	f8a4 6188 	strh.w	r6, [r4, #392]	; 0x188
    style_tv_btn_pr.text.color = LV_COLOR_GRAY;
 80077f8:	f884 519f 	strb.w	r5, [r4, #415]	; 0x19f
    lv_obj_t * tv = lv_tabview_create(lv_scr_act(), NULL);
 80077fc:	f002 f83a 	bl	8009874 <lv_scr_act>
 8007800:	4631      	mov	r1, r6
 8007802:	f011 fdbd 	bl	8019380 <lv_tabview_create>
 8007806:	4681      	mov	r9, r0
    lv_obj_set_parent(wp, ((lv_tabview_ext_t *) tv->ext_attr)->content);
 8007808:	4638      	mov	r0, r7
 800780a:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800780e:	6899      	ldr	r1, [r3, #8]
 8007810:	f001 fcfe 	bl	8009210 <lv_obj_set_parent>
    lv_obj_set_pos(wp, 0, -5);
 8007814:	f06f 0204 	mvn.w	r2, #4
 8007818:	4638      	mov	r0, r7
 800781a:	4631      	mov	r1, r6
 800781c:	f001 fbba 	bl	8008f94 <lv_obj_set_pos>
    lv_obj_t * tab1 = lv_tabview_add_tab(tv, "Write");
 8007820:	4648      	mov	r0, r9
 8007822:	49b5      	ldr	r1, [pc, #724]	; (8007af8 <demo_create+0x3c8>)
 8007824:	f011 fc9a 	bl	801915c <lv_tabview_add_tab>
    lv_obj_t * tab2 = lv_tabview_add_tab(tv, "List");
 8007828:	49b4      	ldr	r1, [pc, #720]	; (8007afc <demo_create+0x3cc>)
    lv_obj_t * tab1 = lv_tabview_add_tab(tv, "Write");
 800782a:	4682      	mov	sl, r0
    lv_obj_t * tab2 = lv_tabview_add_tab(tv, "List");
 800782c:	4648      	mov	r0, r9
 800782e:	f011 fc95 	bl	801915c <lv_tabview_add_tab>
    lv_obj_t * tab3 = lv_tabview_add_tab(tv, "Chart");
 8007832:	49b3      	ldr	r1, [pc, #716]	; (8007b00 <demo_create+0x3d0>)
    lv_obj_t * tab2 = lv_tabview_add_tab(tv, "List");
 8007834:	4680      	mov	r8, r0
    lv_obj_t * tab3 = lv_tabview_add_tab(tv, "Chart");
 8007836:	4648      	mov	r0, r9
 8007838:	f011 fc90 	bl	801915c <lv_tabview_add_tab>
    lv_tabview_set_style(tv, LV_TABVIEW_STYLE_BTN_BG, &style_tv_btn_bg);
 800783c:	f104 02e4 	add.w	r2, r4, #228	; 0xe4
    lv_obj_t * tab3 = lv_tabview_add_tab(tv, "Chart");
 8007840:	4607      	mov	r7, r0
    lv_tabview_set_style(tv, LV_TABVIEW_STYLE_BTN_BG, &style_tv_btn_bg);
 8007842:	2102      	movs	r1, #2
 8007844:	4648      	mov	r0, r9
 8007846:	f011 fd4d 	bl	80192e4 <lv_tabview_set_style>
    lv_tabview_set_style(tv, LV_TABVIEW_STYLE_INDIC, &lv_style_plain);
 800784a:	4648      	mov	r0, r9
 800784c:	4aa7      	ldr	r2, [pc, #668]	; (8007aec <demo_create+0x3bc>)
 800784e:	2101      	movs	r1, #1
 8007850:	f011 fd48 	bl	80192e4 <lv_tabview_set_style>
    lv_tabview_set_style(tv, LV_TABVIEW_STYLE_BTN_REL, &style_tv_btn_rel);
 8007854:	f504 7296 	add.w	r2, r4, #300	; 0x12c
 8007858:	4648      	mov	r0, r9
 800785a:	2103      	movs	r1, #3
 800785c:	f011 fd42 	bl	80192e4 <lv_tabview_set_style>
    lv_tabview_set_style(tv, LV_TABVIEW_STYLE_BTN_PR, &style_tv_btn_pr);
 8007860:	f504 72ba 	add.w	r2, r4, #372	; 0x174
 8007864:	4648      	mov	r0, r9
 8007866:	2104      	movs	r1, #4
 8007868:	f011 fd3c 	bl	80192e4 <lv_tabview_set_style>
    lv_tabview_set_style(tv, LV_TABVIEW_STYLE_BTN_TGL_REL, &style_tv_btn_rel);
 800786c:	f504 7296 	add.w	r2, r4, #300	; 0x12c
 8007870:	4648      	mov	r0, r9
 8007872:	2105      	movs	r1, #5
 8007874:	f011 fd36 	bl	80192e4 <lv_tabview_set_style>
    lv_tabview_set_style(tv, LV_TABVIEW_STYLE_BTN_TGL_PR, &style_tv_btn_pr);
 8007878:	4648      	mov	r0, r9
 800787a:	f504 72ba 	add.w	r2, r4, #372	; 0x174
 800787e:	2106      	movs	r1, #6
 8007880:	f011 fd30 	bl	80192e4 <lv_tabview_set_style>
    lv_page_set_style(parent, LV_PAGE_STYLE_BG, &lv_style_transp_fit);
 8007884:	4631      	mov	r1, r6
 8007886:	4650      	mov	r0, sl
 8007888:	4a9e      	ldr	r2, [pc, #632]	; (8007b04 <demo_create+0x3d4>)
 800788a:	f00e fd99 	bl	80163c0 <lv_page_set_style>
    lv_page_set_style(parent, LV_PAGE_STYLE_SCRL, &lv_style_transp_fit);
 800788e:	4a9d      	ldr	r2, [pc, #628]	; (8007b04 <demo_create+0x3d4>)
 8007890:	4650      	mov	r0, sl
 8007892:	2101      	movs	r1, #1
 8007894:	f00e fd94 	bl	80163c0 <lv_page_set_style>
    lv_page_set_sb_mode(parent, LV_SB_MODE_OFF);
 8007898:	4631      	mov	r1, r6
 800789a:	4650      	mov	r0, sl
    style_kb_rel.body.border.width = 1;
 800789c:	f04f 0901 	mov.w	r9, #1
    lv_page_set_sb_mode(parent, LV_SB_MODE_OFF);
 80078a0:	f00e fd48 	bl	8016334 <lv_page_set_sb_mode>
    lv_style_copy(&style_ta, &lv_style_pretty);
 80078a4:	f504 70de 	add.w	r0, r4, #444	; 0x1bc
 80078a8:	4997      	ldr	r1, [pc, #604]	; (8007b08 <demo_create+0x3d8>)
 80078aa:	f002 feab 	bl	800a604 <lv_style_copy>
    style_ta.text.color = LV_COLOR_HEX3(0x222);
 80078ae:	2322      	movs	r3, #34	; 0x22
    style_ta.body.opa = LV_OPA_30;
 80078b0:	224c      	movs	r2, #76	; 0x4c
    ta = lv_ta_create(parent, NULL);
 80078b2:	4631      	mov	r1, r6
 80078b4:	4650      	mov	r0, sl
    style_ta.text.color = LV_COLOR_HEX3(0x222);
 80078b6:	f884 31e4 	strb.w	r3, [r4, #484]	; 0x1e4
 80078ba:	f884 31e5 	strb.w	r3, [r4, #485]	; 0x1e5
 80078be:	f884 31e6 	strb.w	r3, [r4, #486]	; 0x1e6
    style_ta.body.opa = LV_OPA_30;
 80078c2:	f884 21ca 	strb.w	r2, [r4, #458]	; 0x1ca
    style_ta.body.radius = 0;
 80078c6:	f8a4 61c8 	strh.w	r6, [r4, #456]	; 0x1c8
    style_ta.text.color = LV_COLOR_HEX3(0x222);
 80078ca:	f884 51e7 	strb.w	r5, [r4, #487]	; 0x1e7
    ta = lv_ta_create(parent, NULL);
 80078ce:	f010 fbe9 	bl	80180a4 <lv_ta_create>
 80078d2:	4605      	mov	r5, r0
 80078d4:	4650      	mov	r0, sl
 80078d6:	6065      	str	r5, [r4, #4]
 80078d8:	f00e fed0 	bl	801667c <lv_page_get_scrl>
 80078dc:	f002 f88c 	bl	80099f8 <lv_obj_get_width>
 80078e0:	4606      	mov	r6, r0
    lv_obj_set_size(ta, lv_page_get_scrl_width(parent), lv_obj_get_height(parent) / 2);
 80078e2:	4650      	mov	r0, sl
    style_kb.body.main_color = LV_COLOR_HEX3(0x333);
 80078e4:	f04f 0a33 	mov.w	sl, #51	; 0x33
    lv_obj_set_size(ta, lv_page_get_scrl_width(parent), lv_obj_get_height(parent) / 2);
 80078e8:	f002 f88c 	bl	8009a04 <lv_obj_get_height>
 80078ec:	1e02      	subs	r2, r0, #0
 80078ee:	4631      	mov	r1, r6
 80078f0:	4628      	mov	r0, r5
 80078f2:	bfb8      	it	lt
 80078f4:	3201      	addlt	r2, #1
    style_kb.body.padding.hor = 0;
 80078f6:	2500      	movs	r5, #0
    style_kb.body.main_color = LV_COLOR_HEX3(0x333);
 80078f8:	26ff      	movs	r6, #255	; 0xff
    lv_obj_set_size(ta, lv_page_get_scrl_width(parent), lv_obj_get_height(parent) / 2);
 80078fa:	f342 024f 	sbfx	r2, r2, #1, #16
 80078fe:	f001 fcd5 	bl	80092ac <lv_obj_set_size>
    lv_ta_set_style(ta, LV_TA_STYLE_BG, &style_ta);
 8007902:	4a82      	ldr	r2, [pc, #520]	; (8007b0c <demo_create+0x3dc>)
 8007904:	6860      	ldr	r0, [r4, #4]
 8007906:	2100      	movs	r1, #0
 8007908:	f010 fb9e 	bl	8018048 <lv_ta_set_style>
    lv_ta_set_text(ta, "");
 800790c:	6860      	ldr	r0, [r4, #4]
 800790e:	4980      	ldr	r1, [pc, #512]	; (8007b10 <demo_create+0x3e0>)
 8007910:	f010 fe40 	bl	8018594 <lv_ta_set_text>
    lv_page_set_rel_action(ta, keyboard_open_close);
 8007914:	6860      	ldr	r0, [r4, #4]
 8007916:	497f      	ldr	r1, [pc, #508]	; (8007b14 <demo_create+0x3e4>)
 8007918:	f00e fd06 	bl	8016328 <lv_page_set_rel_action>
    lv_style_copy(&style_kb, &lv_style_plain);
 800791c:	4973      	ldr	r1, [pc, #460]	; (8007aec <demo_create+0x3bc>)
 800791e:	487e      	ldr	r0, [pc, #504]	; (8007b18 <demo_create+0x3e8>)
 8007920:	f002 fe70 	bl	800a604 <lv_style_copy>
    style_kb.body.opa = LV_OPA_70;
 8007924:	22b2      	movs	r2, #178	; 0xb2
    lv_style_copy(&style_kb_rel, &lv_style_plain);
 8007926:	4971      	ldr	r1, [pc, #452]	; (8007aec <demo_create+0x3bc>)
 8007928:	487c      	ldr	r0, [pc, #496]	; (8007b1c <demo_create+0x3ec>)
    style_kb.body.opa = LV_OPA_70;
 800792a:	75a2      	strb	r2, [r4, #22]
    style_kb.body.main_color = LV_COLOR_HEX3(0x333);
 800792c:	f884 a00c 	strb.w	sl, [r4, #12]
 8007930:	f884 a00d 	strb.w	sl, [r4, #13]
 8007934:	f884 a00e 	strb.w	sl, [r4, #14]
    style_kb.body.grad_color = LV_COLOR_HEX3(0x333);
 8007938:	f884 a010 	strb.w	sl, [r4, #16]
 800793c:	f884 a011 	strb.w	sl, [r4, #17]
 8007940:	f884 a012 	strb.w	sl, [r4, #18]
    style_kb.body.main_color = LV_COLOR_HEX3(0x333);
 8007944:	73e6      	strb	r6, [r4, #15]
    style_kb.body.grad_color = LV_COLOR_HEX3(0x333);
 8007946:	74e6      	strb	r6, [r4, #19]
    style_kb.body.padding.hor = 0;
 8007948:	8565      	strh	r5, [r4, #42]	; 0x2a
    style_kb.body.padding.ver = 0;
 800794a:	8525      	strh	r5, [r4, #40]	; 0x28
    style_kb.body.padding.inner = 0;
 800794c:	85a5      	strh	r5, [r4, #44]	; 0x2c
    lv_style_copy(&style_kb_rel, &lv_style_plain);
 800794e:	f002 fe59 	bl	800a604 <lv_style_copy>
    style_kb_rel.body.empty = 1;
 8007952:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
    style_kb_rel.body.border.opa = LV_OPA_50;
 8007956:	f04f 037f 	mov.w	r3, #127	; 0x7f
    lv_style_copy(&style_kb_pr, &lv_style_plain);
 800795a:	4964      	ldr	r1, [pc, #400]	; (8007aec <demo_create+0x3bc>)
    style_kb_rel.body.empty = 1;
 800795c:	ea42 0209 	orr.w	r2, r2, r9
    lv_style_copy(&style_kb_pr, &lv_style_plain);
 8007960:	486f      	ldr	r0, [pc, #444]	; (8007b20 <demo_create+0x3f0>)
    style_kb_rel.body.radius = 0;
 8007962:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
    style_kb_rel.body.empty = 1;
 8007966:	f884 2076 	strb.w	r2, [r4, #118]	; 0x76
    style_kb_rel.body.border.color = LV_COLOR_SILVER;
 800796a:	f884 6063 	strb.w	r6, [r4, #99]	; 0x63
    style_kb_rel.body.main_color = LV_COLOR_HEX3(0x333);    /*Recommended if LV_VDB_SIZE == 0 and bpp > 1 fonts are used*/
 800796e:	f884 a054 	strb.w	sl, [r4, #84]	; 0x54
 8007972:	f884 a055 	strb.w	sl, [r4, #85]	; 0x55
 8007976:	f884 a056 	strb.w	sl, [r4, #86]	; 0x56
 800797a:	f884 6057 	strb.w	r6, [r4, #87]	; 0x57
    style_kb_rel.body.grad_color = LV_COLOR_HEX3(0x333);
 800797e:	f884 a058 	strb.w	sl, [r4, #88]	; 0x58
 8007982:	f884 a059 	strb.w	sl, [r4, #89]	; 0x59
 8007986:	f884 a05a 	strb.w	sl, [r4, #90]	; 0x5a
 800798a:	f884 605b 	strb.w	r6, [r4, #91]	; 0x5b
    style_kb_rel.text.color = LV_COLOR_WHITE;
 800798e:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
 8007992:	f884 6079 	strb.w	r6, [r4, #121]	; 0x79
 8007996:	f884 607a 	strb.w	r6, [r4, #122]	; 0x7a
 800799a:	f884 607b 	strb.w	r6, [r4, #123]	; 0x7b
    style_kb_rel.body.border.width = 1;
 800799e:	f8a4 9064 	strh.w	r9, [r4, #100]	; 0x64
    style_kb_rel.body.border.color = LV_COLOR_SILVER;
 80079a2:	f884 b060 	strb.w	fp, [r4, #96]	; 0x60
 80079a6:	f884 b061 	strb.w	fp, [r4, #97]	; 0x61
 80079aa:	f884 b062 	strb.w	fp, [r4, #98]	; 0x62
    style_kb_rel.body.border.opa = LV_OPA_50;
 80079ae:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
    lv_style_copy(&style_kb_pr, &lv_style_plain);
 80079b2:	f002 fe27 	bl	800a604 <lv_style_copy>
    style_kb_pr.body.opa = LV_OPA_50;
 80079b6:	f04f 037f 	mov.w	r3, #127	; 0x7f
    keyboard_open_close(ta);
 80079ba:	6860      	ldr	r0, [r4, #4]
    style_kb_pr.body.radius = 0;
 80079bc:	f8a4 50a4 	strh.w	r5, [r4, #164]	; 0xa4
    style_kb_pr.body.opa = LV_OPA_50;
 80079c0:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
    style_kb_pr.body.main_color = LV_COLOR_WHITE;
 80079c4:	f884 609c 	strb.w	r6, [r4, #156]	; 0x9c
 80079c8:	f884 609d 	strb.w	r6, [r4, #157]	; 0x9d
 80079cc:	f884 609e 	strb.w	r6, [r4, #158]	; 0x9e
 80079d0:	f884 609f 	strb.w	r6, [r4, #159]	; 0x9f
    style_kb_pr.body.grad_color = LV_COLOR_WHITE;
 80079d4:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
 80079d8:	f884 60a1 	strb.w	r6, [r4, #161]	; 0xa1
 80079dc:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
 80079e0:	f884 60a3 	strb.w	r6, [r4, #163]	; 0xa3
    style_kb_pr.body.border.width = 1;
 80079e4:	f8a4 90ac 	strh.w	r9, [r4, #172]	; 0xac
    style_kb_pr.body.border.color = LV_COLOR_SILVER;
 80079e8:	f884 b0a8 	strb.w	fp, [r4, #168]	; 0xa8
 80079ec:	f884 b0a9 	strb.w	fp, [r4, #169]	; 0xa9
 80079f0:	f884 b0aa 	strb.w	fp, [r4, #170]	; 0xaa
 80079f4:	f884 60ab 	strb.w	r6, [r4, #171]	; 0xab
    keyboard_open_close(ta);
 80079f8:	f7ff fe06 	bl	8007608 <keyboard_open_close>
    lv_page_set_style(parent, LV_PAGE_STYLE_BG, &lv_style_transp_fit);
 80079fc:	4629      	mov	r1, r5
 80079fe:	4640      	mov	r0, r8
 8007a00:	4a40      	ldr	r2, [pc, #256]	; (8007b04 <demo_create+0x3d4>)
 8007a02:	f00e fcdd 	bl	80163c0 <lv_page_set_style>
    lv_page_set_style(parent, LV_PAGE_STYLE_SCRL, &lv_style_transp_fit);
 8007a06:	4649      	mov	r1, r9
 8007a08:	4a3e      	ldr	r2, [pc, #248]	; (8007b04 <demo_create+0x3d4>)
 8007a0a:	4640      	mov	r0, r8
 8007a0c:	f00e fcd8 	bl	80163c0 <lv_page_set_style>
    lv_cont_set_fit(lv_page_get_scrl(page), hor_en, ver_en);
 8007a10:	4640      	mov	r0, r8
 8007a12:	f00e fe33 	bl	801667c <lv_page_get_scrl>
 8007a16:	462a      	mov	r2, r5
 8007a18:	4629      	mov	r1, r5
 8007a1a:	f00b fff1 	bl	8013a00 <lv_cont_set_fit>
    lv_page_set_scrl_height(parent, lv_obj_get_height(parent));
 8007a1e:	4640      	mov	r0, r8
 8007a20:	f001 fff0 	bl	8009a04 <lv_obj_get_height>
 8007a24:	9003      	str	r0, [sp, #12]
    lv_obj_set_height(lv_page_get_scrl(page), h);
 8007a26:	4640      	mov	r0, r8
 8007a28:	f00e fe28 	bl	801667c <lv_page_get_scrl>
 8007a2c:	9903      	ldr	r1, [sp, #12]
 8007a2e:	f001 fc7b 	bl	8009328 <lv_obj_set_height>
    lv_page_set_sb_mode(parent, LV_SB_MODE_OFF);
 8007a32:	4629      	mov	r1, r5
 8007a34:	4640      	mov	r0, r8
 8007a36:	f00e fc7d 	bl	8016334 <lv_page_set_sb_mode>
    lv_style_copy(&style_btn_rel, &lv_style_btn_rel);
 8007a3a:	492d      	ldr	r1, [pc, #180]	; (8007af0 <demo_create+0x3c0>)
 8007a3c:	4839      	ldr	r0, [pc, #228]	; (8007b24 <demo_create+0x3f4>)
 8007a3e:	f002 fde1 	bl	800a604 <lv_style_copy>
    lv_style_copy(&style_btn_pr, &style_btn_rel);
 8007a42:	4938      	ldr	r1, [pc, #224]	; (8007b24 <demo_create+0x3f4>)
    style_btn_rel.body.border.opa = LV_OPA_50;
 8007a44:	f04f 037f 	mov.w	r3, #127	; 0x7f
    style_btn_rel.body.main_color = LV_COLOR_HEX3(0x333);
 8007a48:	f884 a208 	strb.w	sl, [r4, #520]	; 0x208
    lv_style_copy(&style_btn_pr, &style_btn_rel);
 8007a4c:	f101 0048 	add.w	r0, r1, #72	; 0x48
    style_btn_rel.body.main_color = LV_COLOR_HEX3(0x333);
 8007a50:	f884 a209 	strb.w	sl, [r4, #521]	; 0x209
    style_btn_rel.body.border.opa = LV_OPA_50;
 8007a54:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
    style_btn_rel.body.main_color = LV_COLOR_HEX3(0x333);
 8007a58:	f884 a20a 	strb.w	sl, [r4, #522]	; 0x20a
    style_btn_pr.body.grad_color = LV_COLOR_MAKE(0x37, 0x62, 0x90);
 8007a5c:	f04f 0a90 	mov.w	sl, #144	; 0x90
    style_btn_rel.body.main_color = LV_COLOR_HEX3(0x333);
 8007a60:	f884 620b 	strb.w	r6, [r4, #523]	; 0x20b
    style_btn_rel.body.grad_color = LV_COLOR_BLACK;
 8007a64:	f884 520c 	strb.w	r5, [r4, #524]	; 0x20c
 8007a68:	f884 520d 	strb.w	r5, [r4, #525]	; 0x20d
 8007a6c:	f884 520e 	strb.w	r5, [r4, #526]	; 0x20e
 8007a70:	f884 620f 	strb.w	r6, [r4, #527]	; 0x20f
    style_btn_rel.body.border.color = LV_COLOR_SILVER;
 8007a74:	f884 b214 	strb.w	fp, [r4, #532]	; 0x214
 8007a78:	f884 b215 	strb.w	fp, [r4, #533]	; 0x215
 8007a7c:	f884 b216 	strb.w	fp, [r4, #534]	; 0x216
    style_btn_pr.body.main_color = LV_COLOR_MAKE(0x55, 0x96, 0xd8);
 8007a80:	f04f 0b96 	mov.w	fp, #150	; 0x96
    style_btn_rel.body.border.color = LV_COLOR_SILVER;
 8007a84:	f884 6217 	strb.w	r6, [r4, #535]	; 0x217
    style_btn_rel.body.border.width = 1;
 8007a88:	f8a4 9218 	strh.w	r9, [r4, #536]	; 0x218
    style_btn_rel.body.radius = 0;
 8007a8c:	f8a4 5210 	strh.w	r5, [r4, #528]	; 0x210
    lv_style_copy(&style_btn_pr, &style_btn_rel);
 8007a90:	f002 fdb8 	bl	800a604 <lv_style_copy>
    style_btn_pr.body.main_color = LV_COLOR_MAKE(0x55, 0x96, 0xd8);
 8007a94:	23d8      	movs	r3, #216	; 0xd8
    style_btn_pr.text.color = LV_COLOR_MAKE(0xbb, 0xd5, 0xf1);
 8007a96:	22f1      	movs	r2, #241	; 0xf1
    style_btn_pr.body.main_color = LV_COLOR_MAKE(0x55, 0x96, 0xd8);
 8007a98:	2055      	movs	r0, #85	; 0x55
    style_btn_pr.body.grad_color = LV_COLOR_MAKE(0x37, 0x62, 0x90);
 8007a9a:	f04f 0c62 	mov.w	ip, #98	; 0x62
 8007a9e:	f04f 0e37 	mov.w	lr, #55	; 0x37
    style_btn_pr.body.main_color = LV_COLOR_MAKE(0x55, 0x96, 0xd8);
 8007aa2:	f884 3250 	strb.w	r3, [r4, #592]	; 0x250
    style_btn_pr.text.color = LV_COLOR_MAKE(0xbb, 0xd5, 0xf1);
 8007aa6:	f884 2274 	strb.w	r2, [r4, #628]	; 0x274
 8007aaa:	23bb      	movs	r3, #187	; 0xbb
 8007aac:	f06f 022a 	mvn.w	r2, #42	; 0x2a
    lv_obj_t * list = lv_list_create(parent, NULL);
 8007ab0:	4629      	mov	r1, r5
    style_btn_pr.body.main_color = LV_COLOR_MAKE(0x55, 0x96, 0xd8);
 8007ab2:	f884 0252 	strb.w	r0, [r4, #594]	; 0x252
    lv_obj_t * list = lv_list_create(parent, NULL);
 8007ab6:	4640      	mov	r0, r8
    style_btn_pr.body.grad_color = LV_COLOR_MAKE(0x37, 0x62, 0x90);
 8007ab8:	f884 c255 	strb.w	ip, [r4, #597]	; 0x255
 8007abc:	f884 e256 	strb.w	lr, [r4, #598]	; 0x256
    style_btn_pr.text.color = LV_COLOR_MAKE(0xbb, 0xd5, 0xf1);
 8007ac0:	f884 2275 	strb.w	r2, [r4, #629]	; 0x275
 8007ac4:	f884 3276 	strb.w	r3, [r4, #630]	; 0x276
    style_btn_pr.body.main_color = LV_COLOR_MAKE(0x55, 0x96, 0xd8);
 8007ac8:	f884 6253 	strb.w	r6, [r4, #595]	; 0x253
    style_btn_pr.body.grad_color = LV_COLOR_MAKE(0x37, 0x62, 0x90);
 8007acc:	f884 6257 	strb.w	r6, [r4, #599]	; 0x257
    style_btn_pr.text.color = LV_COLOR_MAKE(0xbb, 0xd5, 0xf1);
 8007ad0:	f884 6277 	strb.w	r6, [r4, #631]	; 0x277
    style_btn_pr.body.main_color = LV_COLOR_MAKE(0x55, 0x96, 0xd8);
 8007ad4:	f884 b251 	strb.w	fp, [r4, #593]	; 0x251
    style_btn_pr.body.grad_color = LV_COLOR_MAKE(0x37, 0x62, 0x90);
 8007ad8:	f884 a254 	strb.w	sl, [r4, #596]	; 0x254
    lv_obj_t * list = lv_list_create(parent, NULL);
 8007adc:	f00d fd72 	bl	80155c4 <lv_list_create>
 8007ae0:	e022      	b.n	8007b28 <demo_create+0x3f8>
 8007ae2:	bf00      	nop
 8007ae4:	200006c4 	.word	0x200006c4
 8007ae8:	20000040 	.word	0x20000040
 8007aec:	20017e80 	.word	0x20017e80
 8007af0:	20017cd0 	.word	0x20017cd0
 8007af4:	20017d18 	.word	0x20017d18
 8007af8:	0808b99c 	.word	0x0808b99c
 8007afc:	0808b9a4 	.word	0x0808b9a4
 8007b00:	0808b9ac 	.word	0x0808b9ac
 8007b04:	20017e38 	.word	0x20017e38
 8007b08:	20017d60 	.word	0x20017d60
 8007b0c:	20000880 	.word	0x20000880
 8007b10:	0808ba74 	.word	0x0808ba74
 8007b14:	08007609 	.word	0x08007609
 8007b18:	200006cc 	.word	0x200006cc
 8007b1c:	20000714 	.word	0x20000714
 8007b20:	2000075c 	.word	0x2000075c
 8007b24:	200008c8 	.word	0x200008c8
 8007b28:	4682      	mov	sl, r0
    lv_obj_set_height(list, 2 * lv_obj_get_height(parent) / 3);
 8007b2a:	4640      	mov	r0, r8
 8007b2c:	f001 ff6a 	bl	8009a04 <lv_obj_get_height>
 8007b30:	49da      	ldr	r1, [pc, #872]	; (8007e9c <demo_create+0x76c>)
 8007b32:	fa00 f309 	lsl.w	r3, r0, r9
 8007b36:	4650      	mov	r0, sl
 8007b38:	fb81 2103 	smull	r2, r1, r1, r3
 8007b3c:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8007b40:	b209      	sxth	r1, r1
 8007b42:	f001 fbf1 	bl	8009328 <lv_obj_set_height>
    lv_list_set_style(list, LV_LIST_STYLE_BG, &lv_style_transp_tight);
 8007b46:	4629      	mov	r1, r5
 8007b48:	4650      	mov	r0, sl
 8007b4a:	4ad5      	ldr	r2, [pc, #852]	; (8007ea0 <demo_create+0x770>)
 8007b4c:	f00d fce0 	bl	8015510 <lv_list_set_style>
    lv_list_set_style(list, LV_LIST_STYLE_SCRL, &lv_style_transp_tight);
 8007b50:	4649      	mov	r1, r9
 8007b52:	4650      	mov	r0, sl
 8007b54:	4ad2      	ldr	r2, [pc, #840]	; (8007ea0 <demo_create+0x770>)
 8007b56:	f00d fcdb 	bl	8015510 <lv_list_set_style>
    lv_list_set_style(list, LV_LIST_STYLE_BTN_REL, &style_btn_rel);
 8007b5a:	4650      	mov	r0, sl
 8007b5c:	4ad1      	ldr	r2, [pc, #836]	; (8007ea4 <demo_create+0x774>)
 8007b5e:	2104      	movs	r1, #4
 8007b60:	f00d fcd6 	bl	8015510 <lv_list_set_style>
    lv_list_set_style(list, LV_LIST_STYLE_BTN_PR, &style_btn_pr);
 8007b64:	4650      	mov	r0, sl
 8007b66:	4ad0      	ldr	r2, [pc, #832]	; (8007ea8 <demo_create+0x778>)
 8007b68:	2105      	movs	r1, #5
 8007b6a:	f00d fcd1 	bl	8015510 <lv_list_set_style>
    lv_obj_align(list, NULL, LV_ALIGN_IN_TOP_MID, 0, LV_DPI / 4);
 8007b6e:	2219      	movs	r2, #25
 8007b70:	462b      	mov	r3, r5
 8007b72:	4629      	mov	r1, r5
 8007b74:	4650      	mov	r0, sl
 8007b76:	9200      	str	r2, [sp, #0]
 8007b78:	2202      	movs	r2, #2
 8007b7a:	f001 fbdd 	bl	8009338 <lv_obj_align>
    lv_list_add(list, SYMBOL_FILE, "New", list_btn_action);
 8007b7e:	4650      	mov	r0, sl
 8007b80:	4bca      	ldr	r3, [pc, #808]	; (8007eac <demo_create+0x77c>)
 8007b82:	4acb      	ldr	r2, [pc, #812]	; (8007eb0 <demo_create+0x780>)
 8007b84:	49cb      	ldr	r1, [pc, #812]	; (8007eb4 <demo_create+0x784>)
 8007b86:	f00d f9c5 	bl	8014f14 <lv_list_add>
    lv_list_add(list, SYMBOL_DIRECTORY, "Open", list_btn_action);
 8007b8a:	4650      	mov	r0, sl
 8007b8c:	4bc7      	ldr	r3, [pc, #796]	; (8007eac <demo_create+0x77c>)
 8007b8e:	4aca      	ldr	r2, [pc, #808]	; (8007eb8 <demo_create+0x788>)
 8007b90:	49ca      	ldr	r1, [pc, #808]	; (8007ebc <demo_create+0x78c>)
 8007b92:	f00d f9bf 	bl	8014f14 <lv_list_add>
    lv_list_add(list, SYMBOL_TRASH, "Delete", list_btn_action);
 8007b96:	4650      	mov	r0, sl
 8007b98:	4bc4      	ldr	r3, [pc, #784]	; (8007eac <demo_create+0x77c>)
 8007b9a:	4ac9      	ldr	r2, [pc, #804]	; (8007ec0 <demo_create+0x790>)
 8007b9c:	49c9      	ldr	r1, [pc, #804]	; (8007ec4 <demo_create+0x794>)
 8007b9e:	f00d f9b9 	bl	8014f14 <lv_list_add>
    lv_list_add(list, SYMBOL_EDIT, "Edit", list_btn_action);
 8007ba2:	4650      	mov	r0, sl
 8007ba4:	4bc1      	ldr	r3, [pc, #772]	; (8007eac <demo_create+0x77c>)
 8007ba6:	4ac8      	ldr	r2, [pc, #800]	; (8007ec8 <demo_create+0x798>)
 8007ba8:	49c8      	ldr	r1, [pc, #800]	; (8007ecc <demo_create+0x79c>)
 8007baa:	f00d f9b3 	bl	8014f14 <lv_list_add>
    lv_list_add(list, SYMBOL_SAVE, "Save", list_btn_action);
 8007bae:	4650      	mov	r0, sl
 8007bb0:	4bbe      	ldr	r3, [pc, #760]	; (8007eac <demo_create+0x77c>)
 8007bb2:	4ac7      	ldr	r2, [pc, #796]	; (8007ed0 <demo_create+0x7a0>)
 8007bb4:	49c7      	ldr	r1, [pc, #796]	; (8007ed4 <demo_create+0x7a4>)
 8007bb6:	f00d f9ad 	bl	8014f14 <lv_list_add>
    lv_list_add(list, SYMBOL_WIFI, "WiFi", list_btn_action);
 8007bba:	4650      	mov	r0, sl
 8007bbc:	4bbb      	ldr	r3, [pc, #748]	; (8007eac <demo_create+0x77c>)
 8007bbe:	4ac6      	ldr	r2, [pc, #792]	; (8007ed8 <demo_create+0x7a8>)
 8007bc0:	49c6      	ldr	r1, [pc, #792]	; (8007edc <demo_create+0x7ac>)
 8007bc2:	f00d f9a7 	bl	8014f14 <lv_list_add>
    lv_list_add(list, SYMBOL_GPS, "GPS", list_btn_action);
 8007bc6:	4bb9      	ldr	r3, [pc, #740]	; (8007eac <demo_create+0x77c>)
 8007bc8:	4ac5      	ldr	r2, [pc, #788]	; (8007ee0 <demo_create+0x7b0>)
 8007bca:	4650      	mov	r0, sl
 8007bcc:	49c5      	ldr	r1, [pc, #788]	; (8007ee4 <demo_create+0x7b4>)
 8007bce:	f00d f9a1 	bl	8014f14 <lv_list_add>
    lv_obj_t * mbox = lv_mbox_create(parent, NULL);
 8007bd2:	4629      	mov	r1, r5
 8007bd4:	4640      	mov	r0, r8
 8007bd6:	f00d ff75 	bl	8015ac4 <lv_mbox_create>
 8007bda:	4682      	mov	sl, r0
    lv_mbox_set_text(mbox, "Click a button to copy its text to the Text area ");
 8007bdc:	49c2      	ldr	r1, [pc, #776]	; (8007ee8 <demo_create+0x7b8>)
 8007bde:	f00d ff0f 	bl	8015a00 <lv_mbox_set_text>
    lv_obj_set_width(mbox, LV_HOR_RES - LV_DPI);
 8007be2:	4650      	mov	r0, sl
 8007be4:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8007be8:	f001 fb96 	bl	8009318 <lv_obj_set_width>
    lv_mbox_add_btns(mbox, mbox_btns, NULL);    /*The default action is close*/
 8007bec:	462a      	mov	r2, r5
 8007bee:	4650      	mov	r0, sl
 8007bf0:	49be      	ldr	r1, [pc, #760]	; (8007eec <demo_create+0x7bc>)
 8007bf2:	f00d ffdd 	bl	8015bb0 <lv_mbox_add_btns>
    lv_obj_align(mbox, parent, LV_ALIGN_IN_TOP_MID, 0, LV_DPI / 2);
 8007bf6:	2232      	movs	r2, #50	; 0x32
 8007bf8:	462b      	mov	r3, r5
 8007bfa:	4650      	mov	r0, sl
 8007bfc:	4641      	mov	r1, r8
 8007bfe:	9200      	str	r2, [sp, #0]
 8007c00:	2202      	movs	r2, #2
    style_bar.body.radius = LV_RADIUS_CIRCLE;
 8007c02:	f643 7aff 	movw	sl, #16383	; 0x3fff
    lv_obj_align(mbox, parent, LV_ALIGN_IN_TOP_MID, 0, LV_DPI / 2);
 8007c06:	f001 fb97 	bl	8009338 <lv_obj_align>
    lv_page_set_style(parent, LV_PAGE_STYLE_BG, &lv_style_transp_fit);
 8007c0a:	4629      	mov	r1, r5
 8007c0c:	4638      	mov	r0, r7
 8007c0e:	4ab8      	ldr	r2, [pc, #736]	; (8007ef0 <demo_create+0x7c0>)
 8007c10:	f00e fbd6 	bl	80163c0 <lv_page_set_style>
    lv_page_set_style(parent, LV_PAGE_STYLE_SCRL, &lv_style_transp_fit);
 8007c14:	4649      	mov	r1, r9
 8007c16:	4ab6      	ldr	r2, [pc, #728]	; (8007ef0 <demo_create+0x7c0>)
 8007c18:	4638      	mov	r0, r7
 8007c1a:	f00e fbd1 	bl	80163c0 <lv_page_set_style>
    lv_cont_set_fit(lv_page_get_scrl(page), hor_en, ver_en);
 8007c1e:	4638      	mov	r0, r7
 8007c20:	f00e fd2c 	bl	801667c <lv_page_get_scrl>
 8007c24:	462a      	mov	r2, r5
 8007c26:	4629      	mov	r1, r5
 8007c28:	f00b feea 	bl	8013a00 <lv_cont_set_fit>
    lv_page_set_scrl_height(parent, lv_obj_get_height(parent));
 8007c2c:	4638      	mov	r0, r7
 8007c2e:	f001 fee9 	bl	8009a04 <lv_obj_get_height>
 8007c32:	4680      	mov	r8, r0
    lv_obj_set_height(lv_page_get_scrl(page), h);
 8007c34:	4638      	mov	r0, r7
 8007c36:	f00e fd21 	bl	801667c <lv_page_get_scrl>
 8007c3a:	4641      	mov	r1, r8
 8007c3c:	f001 fb74 	bl	8009328 <lv_obj_set_height>
    lv_page_set_sb_mode(parent, LV_SB_MODE_OFF);
 8007c40:	4629      	mov	r1, r5
 8007c42:	4638      	mov	r0, r7
 8007c44:	f00e fb76 	bl	8016334 <lv_page_set_sb_mode>
    lv_style_copy(&style_chart, &lv_style_pretty);
 8007c48:	49aa      	ldr	r1, [pc, #680]	; (8007ef4 <demo_create+0x7c4>)
 8007c4a:	48ab      	ldr	r0, [pc, #684]	; (8007ef8 <demo_create+0x7c8>)
 8007c4c:	f002 fcda 	bl	800a604 <lv_style_copy>
    style_chart.line.color = LV_COLOR_GRAY;
 8007c50:	2380      	movs	r3, #128	; 0x80
    style_chart.body.opa = LV_OPA_60;
 8007c52:	2299      	movs	r2, #153	; 0x99
    chart = lv_chart_create(parent, NULL);
 8007c54:	4629      	mov	r1, r5
 8007c56:	4638      	mov	r0, r7
    style_chart.line.color = LV_COLOR_GRAY;
 8007c58:	f884 32d4 	strb.w	r3, [r4, #724]	; 0x2d4
    style_chart.body.opa = LV_OPA_60;
 8007c5c:	f884 22a2 	strb.w	r2, [r4, #674]	; 0x2a2
    style_chart.line.color = LV_COLOR_GRAY;
 8007c60:	f884 32d5 	strb.w	r3, [r4, #725]	; 0x2d5
 8007c64:	f884 32d6 	strb.w	r3, [r4, #726]	; 0x2d6
 8007c68:	f884 62d7 	strb.w	r6, [r4, #727]	; 0x2d7
    style_chart.body.radius = 0;
 8007c6c:	f8a4 52a0 	strh.w	r5, [r4, #672]	; 0x2a0
    chart = lv_chart_create(parent, NULL);
 8007c70:	f00b f96a 	bl	8012f48 <lv_chart_create>
 8007c74:	4606      	mov	r6, r0
    lv_obj_set_size(chart, 2 * lv_obj_get_width(parent) / 3, lv_obj_get_height(parent) / 2);
 8007c76:	4638      	mov	r0, r7
    chart = lv_chart_create(parent, NULL);
 8007c78:	f8c4 60e0 	str.w	r6, [r4, #224]	; 0xe0
    lv_obj_set_size(chart, 2 * lv_obj_get_width(parent) / 3, lv_obj_get_height(parent) / 2);
 8007c7c:	f001 febc 	bl	80099f8 <lv_obj_get_width>
 8007c80:	4605      	mov	r5, r0
 8007c82:	4638      	mov	r0, r7
 8007c84:	f001 febe 	bl	8009a04 <lv_obj_get_height>
 8007c88:	4984      	ldr	r1, [pc, #528]	; (8007e9c <demo_create+0x76c>)
 8007c8a:	006b      	lsls	r3, r5, #1
 8007c8c:	1e02      	subs	r2, r0, #0
 8007c8e:	4630      	mov	r0, r6
    style_bar.body.main_color =  LV_COLOR_BLACK;
 8007c90:	f04f 06ff 	mov.w	r6, #255	; 0xff
    lv_obj_set_size(chart, 2 * lv_obj_get_width(parent) / 3, lv_obj_get_height(parent) / 2);
 8007c94:	fb81 5103 	smull	r5, r1, r1, r3
 8007c98:	bfb8      	it	lt
 8007c9a:	444a      	addlt	r2, r9
    style_bar.body.main_color =  LV_COLOR_BLACK;
 8007c9c:	2500      	movs	r5, #0
    style_bar.body.grad_color =  LV_COLOR_GRAY;
 8007c9e:	f04f 0980 	mov.w	r9, #128	; 0x80
    lv_obj_set_size(chart, 2 * lv_obj_get_width(parent) / 3, lv_obj_get_height(parent) / 2);
 8007ca2:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8007ca6:	f342 024f 	sbfx	r2, r2, #1, #16
 8007caa:	b209      	sxth	r1, r1
 8007cac:	f001 fafe 	bl	80092ac <lv_obj_set_size>
    lv_obj_align(chart, NULL,  LV_ALIGN_IN_TOP_MID, 0, LV_DPI / 4);
 8007cb0:	2119      	movs	r1, #25
 8007cb2:	462b      	mov	r3, r5
 8007cb4:	2202      	movs	r2, #2
 8007cb6:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
 8007cba:	9100      	str	r1, [sp, #0]
 8007cbc:	4629      	mov	r1, r5
 8007cbe:	f001 fb3b 	bl	8009338 <lv_obj_align>
    lv_chart_set_type(chart, LV_CHART_TYPE_COLUMN);
 8007cc2:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
 8007cc6:	2102      	movs	r1, #2
 8007cc8:	f00b fa00 	bl	80130cc <lv_chart_set_type>
 * @param chart pointer to a chart object
 * @param style pointer to a style
 */
static inline void lv_chart_set_style(lv_obj_t *chart, lv_style_t *style)
{
    lv_obj_set_style(chart, style);
 8007ccc:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
 8007cd0:	4989      	ldr	r1, [pc, #548]	; (8007ef8 <demo_create+0x7c8>)
 8007cd2:	f001 fe0f 	bl	80098f4 <lv_obj_set_style>
    lv_chart_set_series_opa(chart, LV_OPA_70);
 8007cd6:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
 8007cda:	21b2      	movs	r1, #178	; 0xb2
 8007cdc:	f00b fa0a 	bl	80130f4 <lv_chart_set_series_opa>
    ser1 = lv_chart_add_series(chart, LV_COLOR_RED);
 8007ce0:	4986      	ldr	r1, [pc, #536]	; (8007efc <demo_create+0x7cc>)
 8007ce2:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
 8007ce6:	f00b f9b3 	bl	8013050 <lv_chart_add_series>
 8007cea:	4680      	mov	r8, r0
    lv_chart_set_next(chart, ser1, 40);
 8007cec:	2228      	movs	r2, #40	; 0x28
 8007cee:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
 8007cf2:	4641      	mov	r1, r8
 8007cf4:	f00b fa0e 	bl	8013114 <lv_chart_set_next>
    lv_chart_set_next(chart, ser1, 30);
 8007cf8:	4641      	mov	r1, r8
 8007cfa:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
 8007cfe:	221e      	movs	r2, #30
 8007d00:	f00b fa08 	bl	8013114 <lv_chart_set_next>
    lv_chart_set_next(chart, ser1, 47);
 8007d04:	4641      	mov	r1, r8
 8007d06:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
 8007d0a:	222f      	movs	r2, #47	; 0x2f
 8007d0c:	f00b fa02 	bl	8013114 <lv_chart_set_next>
    lv_chart_set_next(chart, ser1, 59);
 8007d10:	4641      	mov	r1, r8
 8007d12:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
 8007d16:	223b      	movs	r2, #59	; 0x3b
 8007d18:	f00b f9fc 	bl	8013114 <lv_chart_set_next>
    lv_chart_set_next(chart, ser1, 59);
 8007d1c:	4641      	mov	r1, r8
 8007d1e:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
 8007d22:	223b      	movs	r2, #59	; 0x3b
 8007d24:	f00b f9f6 	bl	8013114 <lv_chart_set_next>
    lv_chart_set_next(chart, ser1, 31);
 8007d28:	4641      	mov	r1, r8
 8007d2a:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
 8007d2e:	221f      	movs	r2, #31
 8007d30:	f00b f9f0 	bl	8013114 <lv_chart_set_next>
    lv_chart_set_next(chart, ser1, 55);
 8007d34:	4641      	mov	r1, r8
 8007d36:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
 8007d3a:	2237      	movs	r2, #55	; 0x37
 8007d3c:	f00b f9ea 	bl	8013114 <lv_chart_set_next>
    lv_chart_set_next(chart, ser1, 70);
 8007d40:	4641      	mov	r1, r8
 8007d42:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
 8007d46:	2246      	movs	r2, #70	; 0x46
 8007d48:	f00b f9e4 	bl	8013114 <lv_chart_set_next>
    lv_chart_set_next(chart, ser1, 82);
 8007d4c:	4641      	mov	r1, r8
 8007d4e:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
 8007d52:	2252      	movs	r2, #82	; 0x52
 8007d54:	f00b f9de 	bl	8013114 <lv_chart_set_next>
    lv_chart_set_next(chart, ser1, 91);
 8007d58:	225b      	movs	r2, #91	; 0x5b
 8007d5a:	4641      	mov	r1, r8
 8007d5c:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
 8007d60:	f00b f9d8 	bl	8013114 <lv_chart_set_next>
    lv_style_copy(&style_bar, &lv_style_pretty);
 8007d64:	4963      	ldr	r1, [pc, #396]	; (8007ef4 <demo_create+0x7c4>)
 8007d66:	4866      	ldr	r0, [pc, #408]	; (8007f00 <demo_create+0x7d0>)
    style_bar.body.padding.ver = LV_DPI / 10;
 8007d68:	f04f 080a 	mov.w	r8, #10
    lv_style_copy(&style_bar, &lv_style_pretty);
 8007d6c:	f002 fc4a 	bl	800a604 <lv_style_copy>
    style_bar.body.opa = LV_OPA_60;
 8007d70:	2399      	movs	r3, #153	; 0x99
    lv_style_copy(&style_indic, &lv_style_pretty);
 8007d72:	4960      	ldr	r1, [pc, #384]	; (8007ef4 <demo_create+0x7c4>)
 8007d74:	4863      	ldr	r0, [pc, #396]	; (8007f04 <demo_create+0x7d4>)
    style_bar.body.main_color =  LV_COLOR_BLACK;
 8007d76:	f884 52e0 	strb.w	r5, [r4, #736]	; 0x2e0
 8007d7a:	f884 52e1 	strb.w	r5, [r4, #737]	; 0x2e1
 8007d7e:	f884 52e2 	strb.w	r5, [r4, #738]	; 0x2e2
    style_bar.body.padding.hor = 0;
 8007d82:	f8a4 52fe 	strh.w	r5, [r4, #766]	; 0x2fe
    style_bar.body.main_color =  LV_COLOR_BLACK;
 8007d86:	f884 62e3 	strb.w	r6, [r4, #739]	; 0x2e3
    style_bar.body.grad_color =  LV_COLOR_GRAY;
 8007d8a:	f884 62e7 	strb.w	r6, [r4, #743]	; 0x2e7
    style_bar.body.border.color = LV_COLOR_WHITE;
 8007d8e:	f884 62ec 	strb.w	r6, [r4, #748]	; 0x2ec
 8007d92:	f884 62ed 	strb.w	r6, [r4, #749]	; 0x2ed
 8007d96:	f884 62ee 	strb.w	r6, [r4, #750]	; 0x2ee
 8007d9a:	f884 62ef 	strb.w	r6, [r4, #751]	; 0x2ef
    style_bar.body.grad_color =  LV_COLOR_GRAY;
 8007d9e:	f884 92e4 	strb.w	r9, [r4, #740]	; 0x2e4
 8007da2:	f884 92e5 	strb.w	r9, [r4, #741]	; 0x2e5
 8007da6:	f884 92e6 	strb.w	r9, [r4, #742]	; 0x2e6
    style_bar.body.radius = LV_RADIUS_CIRCLE;
 8007daa:	f8a4 a2e8 	strh.w	sl, [r4, #744]	; 0x2e8
    style_bar.body.opa = LV_OPA_60;
 8007dae:	f884 32ea 	strb.w	r3, [r4, #746]	; 0x2ea
    style_bar.body.padding.ver = LV_DPI / 10;
 8007db2:	f8a4 82fc 	strh.w	r8, [r4, #764]	; 0x2fc
    lv_style_copy(&style_indic, &lv_style_pretty);
 8007db6:	f002 fc25 	bl	800a604 <lv_style_copy>
    style_indic.body.padding.hor = LV_DPI / 30;
 8007dba:	2303      	movs	r3, #3
    lv_style_copy(&style_knob, &lv_style_pretty);
 8007dbc:	494d      	ldr	r1, [pc, #308]	; (8007ef4 <demo_create+0x7c4>)
 8007dbe:	4852      	ldr	r0, [pc, #328]	; (8007f08 <demo_create+0x7d8>)
    style_indic.body.grad_color =  LV_COLOR_MAROON;
 8007dc0:	f884 932e 	strb.w	r9, [r4, #814]	; 0x32e
 8007dc4:	f884 532c 	strb.w	r5, [r4, #812]	; 0x32c
 8007dc8:	f884 532d 	strb.w	r5, [r4, #813]	; 0x32d
 8007dcc:	f884 632f 	strb.w	r6, [r4, #815]	; 0x32f
    style_indic.body.main_color =  LV_COLOR_RED;
 8007dd0:	f884 5328 	strb.w	r5, [r4, #808]	; 0x328
 8007dd4:	f884 5329 	strb.w	r5, [r4, #809]	; 0x329
 8007dd8:	f884 632a 	strb.w	r6, [r4, #810]	; 0x32a
 8007ddc:	f884 632b 	strb.w	r6, [r4, #811]	; 0x32b
    style_indic.body.radius = LV_RADIUS_CIRCLE;
 8007de0:	f8a4 a330 	strh.w	sl, [r4, #816]	; 0x330
    style_indic.body.shadow.width = LV_DPI / 10;
 8007de4:	f8a4 8340 	strh.w	r8, [r4, #832]	; 0x340
    style_indic.body.shadow.color = LV_COLOR_RED;
 8007de8:	f884 533c 	strb.w	r5, [r4, #828]	; 0x33c
 8007dec:	f884 533d 	strb.w	r5, [r4, #829]	; 0x33d
 8007df0:	f884 633e 	strb.w	r6, [r4, #830]	; 0x33e
 8007df4:	f884 633f 	strb.w	r6, [r4, #831]	; 0x33f
    style_indic.body.padding.hor = LV_DPI / 30;
 8007df8:	f8a4 3346 	strh.w	r3, [r4, #838]	; 0x346
    style_indic.body.padding.ver = LV_DPI / 30;
 8007dfc:	f8a4 3344 	strh.w	r3, [r4, #836]	; 0x344
    lv_style_copy(&style_knob, &lv_style_pretty);
 8007e00:	f002 fc00 	bl	800a604 <lv_style_copy>
    style_knob.body.opa = LV_OPA_70;
 8007e04:	23b2      	movs	r3, #178	; 0xb2
    lv_obj_t * slider = lv_slider_create(parent, NULL);
 8007e06:	4629      	mov	r1, r5
 8007e08:	4638      	mov	r0, r7
    style_knob.body.radius = LV_RADIUS_CIRCLE;
 8007e0a:	f8a4 a378 	strh.w	sl, [r4, #888]	; 0x378
    style_knob.body.opa = LV_OPA_70;
 8007e0e:	f884 337a 	strb.w	r3, [r4, #890]	; 0x37a
    lv_obj_t * slider = lv_slider_create(parent, NULL);
 8007e12:	f00f f927 	bl	8017064 <lv_slider_create>
 8007e16:	4606      	mov	r6, r0
    lv_slider_set_style(slider, LV_SLIDER_STYLE_BG, &style_bar);
 8007e18:	4629      	mov	r1, r5
 8007e1a:	4a39      	ldr	r2, [pc, #228]	; (8007f00 <demo_create+0x7d0>)
 8007e1c:	f00f f902 	bl	8017024 <lv_slider_set_style>
    lv_slider_set_style(slider, LV_SLIDER_STYLE_INDIC, &style_indic);
 8007e20:	4630      	mov	r0, r6
 8007e22:	4a38      	ldr	r2, [pc, #224]	; (8007f04 <demo_create+0x7d4>)
 8007e24:	2101      	movs	r1, #1
 8007e26:	f00f f8fd 	bl	8017024 <lv_slider_set_style>
    lv_slider_set_style(slider, LV_SLIDER_STYLE_KNOB, &style_knob);
 8007e2a:	4630      	mov	r0, r6
 8007e2c:	4a36      	ldr	r2, [pc, #216]	; (8007f08 <demo_create+0x7d8>)
 8007e2e:	2102      	movs	r1, #2
 8007e30:	f00f f8f8 	bl	8017024 <lv_slider_set_style>
    lv_obj_set_size(slider, lv_obj_get_width(chart), LV_DPI / 3);
 8007e34:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
 8007e38:	f001 fdde 	bl	80099f8 <lv_obj_get_width>
 8007e3c:	2221      	movs	r2, #33	; 0x21
 8007e3e:	4601      	mov	r1, r0
 8007e40:	4630      	mov	r0, r6
 8007e42:	f001 fa33 	bl	80092ac <lv_obj_set_size>
    lv_obj_align(slider, chart, LV_ALIGN_OUT_BOTTOM_MID, 0, (LV_VER_RES - chart->coords.y2 - lv_obj_get_height(slider)) / 2); /*Align to below the chart*/
 8007e46:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
 8007e4a:	4630      	mov	r0, r6
 8007e4c:	f9b5 4016 	ldrsh.w	r4, [r5, #22]
 8007e50:	f001 fdd8 	bl	8009a04 <lv_obj_get_height>
 8007e54:	2300      	movs	r3, #0
 8007e56:	4629      	mov	r1, r5
 8007e58:	f5c4 7488 	rsb	r4, r4, #272	; 0x110
 8007e5c:	220d      	movs	r2, #13
 8007e5e:	1a20      	subs	r0, r4, r0
 8007e60:	bf48      	it	mi
 8007e62:	3001      	addmi	r0, #1
 8007e64:	f340 004f 	sbfx	r0, r0, #1, #16
 8007e68:	9000      	str	r0, [sp, #0]
 8007e6a:	4630      	mov	r0, r6
 8007e6c:	f001 fa64 	bl	8009338 <lv_obj_align>
    lv_slider_set_action(slider, slider_action);
 8007e70:	4630      	mov	r0, r6
 8007e72:	4926      	ldr	r1, [pc, #152]	; (8007f0c <demo_create+0x7dc>)
 8007e74:	f00f f8d0 	bl	8017018 <lv_slider_set_action>
 * @param min minimum value
 * @param max maximum value
 */
static inline void lv_slider_set_range(lv_obj_t *slider, int16_t min, int16_t max)
{
    lv_bar_set_range(slider, min, max);
 8007e78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007e7c:	4630      	mov	r0, r6
 8007e7e:	210a      	movs	r1, #10
 8007e80:	f009 fa88 	bl	8011394 <lv_bar_set_range>
    lv_bar_set_value(slider, value);
 8007e84:	4630      	mov	r0, r6
 8007e86:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8007e8a:	f009 f8a5 	bl	8010fd8 <lv_bar_set_value>
    slider_action(slider);          /*Simulate a user value set the refresh the chart*/
 8007e8e:	4630      	mov	r0, r6
}
 8007e90:	b005      	add	sp, #20
 8007e92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    slider_action(slider);          /*Simulate a user value set the refresh the chart*/
 8007e96:	f7ff bc37 	b.w	8007708 <slider_action>
 8007e9a:	bf00      	nop
 8007e9c:	55555556 	.word	0x55555556
 8007ea0:	20017da8 	.word	0x20017da8
 8007ea4:	200008c8 	.word	0x200008c8
 8007ea8:	20000910 	.word	0x20000910
 8007eac:	080076e1 	.word	0x080076e1
 8007eb0:	0808b9b4 	.word	0x0808b9b4
 8007eb4:	0808b9b8 	.word	0x0808b9b8
 8007eb8:	0808b9bc 	.word	0x0808b9bc
 8007ebc:	0808b9c4 	.word	0x0808b9c4
 8007ec0:	0808b9c8 	.word	0x0808b9c8
 8007ec4:	0808b9d0 	.word	0x0808b9d0
 8007ec8:	0808b9d4 	.word	0x0808b9d4
 8007ecc:	0808b9dc 	.word	0x0808b9dc
 8007ed0:	0808b9e0 	.word	0x0808b9e0
 8007ed4:	0808b9e8 	.word	0x0808b9e8
 8007ed8:	0808b9ec 	.word	0x0808b9ec
 8007edc:	0808b9f4 	.word	0x0808b9f4
 8007ee0:	0808b9f8 	.word	0x0808b9f8
 8007ee4:	0808b9fc 	.word	0x0808b9fc
 8007ee8:	0808ba00 	.word	0x0808ba00
 8007eec:	20000038 	.word	0x20000038
 8007ef0:	20017e38 	.word	0x20017e38
 8007ef4:	20017d60 	.word	0x20017d60
 8007ef8:	20000958 	.word	0x20000958
 8007efc:	ffff0000 	.word	0xffff0000
 8007f00:	200009a0 	.word	0x200009a0
 8007f04:	200009e8 	.word	0x200009e8
 8007f08:	20000a30 	.word	0x20000a30
 8007f0c:	08007709 	.word	0x08007709

08007f10 <lv_group_focus_next.part.1>:
 */
void lv_group_focus_next(lv_group_t * group)
{
    if(group->frozen) return;

    if(group->obj_focus) {
 8007f10:	68c3      	ldr	r3, [r0, #12]
void lv_group_focus_next(lv_group_t * group)
 8007f12:	b510      	push	{r4, lr}
 8007f14:	4604      	mov	r4, r0
    if(group->obj_focus) {
 8007f16:	b34b      	cbz	r3, 8007f6c <lv_group_focus_next.part.1+0x5c>
        (*group->obj_focus)->signal_func(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 8007f18:	6818      	ldr	r0, [r3, #0]
 8007f1a:	2111      	movs	r1, #17
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	6983      	ldr	r3, [r0, #24]
 8007f20:	4798      	blx	r3
        lv_obj_invalidate(*group->obj_focus);
 8007f22:	68e3      	ldr	r3, [r4, #12]
 8007f24:	6818      	ldr	r0, [r3, #0]
 8007f26:	f000 ff87 	bl	8008e38 <lv_obj_invalidate>
    }

    lv_obj_t ** obj_next;
    if(group->obj_focus == NULL) obj_next = lv_ll_get_head(&group->obj_ll);
 8007f2a:	68e1      	ldr	r1, [r4, #12]
 8007f2c:	b1f1      	cbz	r1, 8007f6c <lv_group_focus_next.part.1+0x5c>
    else obj_next = lv_ll_get_next(&group->obj_ll, group->obj_focus);
 8007f2e:	4620      	mov	r0, r4
 8007f30:	f008 f83a 	bl	800ffa8 <lv_ll_get_next>

    if(obj_next == NULL) {
 8007f34:	b178      	cbz	r0, 8007f56 <lv_group_focus_next.part.1+0x46>
        if(group->wrap) obj_next = lv_ll_get_head(&group->obj_ll);
        else obj_next = lv_ll_get_tail(&group->obj_ll);
    }
    group->obj_focus = obj_next;
 8007f36:	60e0      	str	r0, [r4, #12]

    if(group->obj_focus) {
        (*group->obj_focus)->signal_func(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 8007f38:	6800      	ldr	r0, [r0, #0]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	2110      	movs	r1, #16
 8007f3e:	6983      	ldr	r3, [r0, #24]
 8007f40:	4798      	blx	r3
        lv_obj_invalidate(*group->obj_focus);
 8007f42:	68e3      	ldr	r3, [r4, #12]
 8007f44:	6818      	ldr	r0, [r3, #0]
 8007f46:	f000 ff77 	bl	8008e38 <lv_obj_invalidate>

        if(group->focus_cb) group->focus_cb(group);
 8007f4a:	69a3      	ldr	r3, [r4, #24]
 8007f4c:	b16b      	cbz	r3, 8007f6a <lv_group_focus_next.part.1+0x5a>
 8007f4e:	4620      	mov	r0, r4
    }
}
 8007f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        if(group->focus_cb) group->focus_cb(group);
 8007f54:	4718      	bx	r3
        if(group->wrap) obj_next = lv_ll_get_head(&group->obj_ll);
 8007f56:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	06db      	lsls	r3, r3, #27
 8007f5e:	d509      	bpl.n	8007f74 <lv_group_focus_next.part.1+0x64>
 8007f60:	f008 f81a 	bl	800ff98 <lv_ll_get_head>
    group->obj_focus = obj_next;
 8007f64:	60e0      	str	r0, [r4, #12]
    if(group->obj_focus) {
 8007f66:	2800      	cmp	r0, #0
 8007f68:	d1e6      	bne.n	8007f38 <lv_group_focus_next.part.1+0x28>
 8007f6a:	bd10      	pop	{r4, pc}
    if(group->obj_focus == NULL) obj_next = lv_ll_get_head(&group->obj_ll);
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	f008 f813 	bl	800ff98 <lv_ll_get_head>
 8007f72:	e7df      	b.n	8007f34 <lv_group_focus_next.part.1+0x24>
        else obj_next = lv_ll_get_tail(&group->obj_ll);
 8007f74:	f008 f814 	bl	800ffa0 <lv_ll_get_tail>
 8007f78:	e7f4      	b.n	8007f64 <lv_group_focus_next.part.1+0x54>
 8007f7a:	bf00      	nop

08007f7c <lv_group_focus_prev.part.2>:
 */
void lv_group_focus_prev(lv_group_t * group)
{
    if(group->frozen) return;

    if(group->obj_focus) {
 8007f7c:	68c3      	ldr	r3, [r0, #12]
void lv_group_focus_prev(lv_group_t * group)
 8007f7e:	b510      	push	{r4, lr}
 8007f80:	4604      	mov	r4, r0
    if(group->obj_focus) {
 8007f82:	b34b      	cbz	r3, 8007fd8 <lv_group_focus_prev.part.2+0x5c>
        (*group->obj_focus)->signal_func(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 8007f84:	6818      	ldr	r0, [r3, #0]
 8007f86:	2111      	movs	r1, #17
 8007f88:	2200      	movs	r2, #0
 8007f8a:	6983      	ldr	r3, [r0, #24]
 8007f8c:	4798      	blx	r3
        lv_obj_invalidate(*group->obj_focus);
 8007f8e:	68e3      	ldr	r3, [r4, #12]
 8007f90:	6818      	ldr	r0, [r3, #0]
 8007f92:	f000 ff51 	bl	8008e38 <lv_obj_invalidate>
    }

    lv_obj_t ** obj_next;
    if(group->obj_focus == NULL) obj_next = lv_ll_get_tail(&group->obj_ll);
 8007f96:	68e1      	ldr	r1, [r4, #12]
 8007f98:	b1f1      	cbz	r1, 8007fd8 <lv_group_focus_prev.part.2+0x5c>
    else obj_next = lv_ll_get_prev(&group->obj_ll, group->obj_focus);
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	f008 f80a 	bl	800ffb4 <lv_ll_get_prev>

    if(obj_next == NULL) {
 8007fa0:	b178      	cbz	r0, 8007fc2 <lv_group_focus_prev.part.2+0x46>
        if(group->wrap) obj_next = lv_ll_get_tail(&group->obj_ll);
        else  obj_next = lv_ll_get_head(&group->obj_ll);
    }
    group->obj_focus = obj_next;
 8007fa2:	60e0      	str	r0, [r4, #12]

    if(group->obj_focus != NULL) {
        (*group->obj_focus)->signal_func(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 8007fa4:	6800      	ldr	r0, [r0, #0]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	2110      	movs	r1, #16
 8007faa:	6983      	ldr	r3, [r0, #24]
 8007fac:	4798      	blx	r3
        lv_obj_invalidate(*group->obj_focus);
 8007fae:	68e3      	ldr	r3, [r4, #12]
 8007fb0:	6818      	ldr	r0, [r3, #0]
 8007fb2:	f000 ff41 	bl	8008e38 <lv_obj_invalidate>

        if(group->focus_cb) group->focus_cb(group);
 8007fb6:	69a3      	ldr	r3, [r4, #24]
 8007fb8:	b16b      	cbz	r3, 8007fd6 <lv_group_focus_prev.part.2+0x5a>
 8007fba:	4620      	mov	r0, r4
    }

}
 8007fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        if(group->focus_cb) group->focus_cb(group);
 8007fc0:	4718      	bx	r3
        if(group->wrap) obj_next = lv_ll_get_tail(&group->obj_ll);
 8007fc2:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 8007fc6:	4620      	mov	r0, r4
 8007fc8:	06db      	lsls	r3, r3, #27
 8007fca:	d509      	bpl.n	8007fe0 <lv_group_focus_prev.part.2+0x64>
 8007fcc:	f007 ffe8 	bl	800ffa0 <lv_ll_get_tail>
    group->obj_focus = obj_next;
 8007fd0:	60e0      	str	r0, [r4, #12]
    if(group->obj_focus != NULL) {
 8007fd2:	2800      	cmp	r0, #0
 8007fd4:	d1e6      	bne.n	8007fa4 <lv_group_focus_prev.part.2+0x28>
 8007fd6:	bd10      	pop	{r4, pc}
    if(group->obj_focus == NULL) obj_next = lv_ll_get_tail(&group->obj_ll);
 8007fd8:	4620      	mov	r0, r4
 8007fda:	f007 ffe1 	bl	800ffa0 <lv_ll_get_tail>
 8007fde:	e7df      	b.n	8007fa0 <lv_group_focus_prev.part.2+0x24>
        else  obj_next = lv_ll_get_head(&group->obj_ll);
 8007fe0:	f007 ffda 	bl	800ff98 <lv_ll_get_head>
 8007fe4:	e7f4      	b.n	8007fd0 <lv_group_focus_prev.part.2+0x54>
 8007fe6:	bf00      	nop

08007fe8 <lv_group_refocus>:

void lv_group_set_refocus_policy(lv_group_t * group, lv_group_refocus_policy_t policy) {
    group->refocus_policy = policy & 0x01;
}

static void lv_group_refocus(lv_group_t *g) {
 8007fe8:	b538      	push	{r3, r4, r5, lr}
    /*Refocus must temporarily allow wrapping to work correctly*/
    uint8_t temp_wrap = g->wrap;
 8007fea:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
static void lv_group_refocus(lv_group_t *g) {
 8007fee:	4604      	mov	r4, r0
    g->wrap = 1;
 8007ff0:	f043 0210 	orr.w	r2, r3, #16
    uint8_t temp_wrap = g->wrap;
 8007ff4:	f3c3 1500 	ubfx	r5, r3, #4, #1

    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 8007ff8:	0711      	lsls	r1, r2, #28
 8007ffa:	4613      	mov	r3, r2
    g->wrap = 1;
 8007ffc:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 8008000:	d408      	bmi.n	8008014 <lv_group_refocus+0x2c>
    if(group->frozen) return;
 8008002:	07da      	lsls	r2, r3, #31
 8008004:	d511      	bpl.n	800802a <lv_group_refocus+0x42>
        lv_group_focus_next(g);
    else if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_PREV)
        lv_group_focus_prev(g);
    /*Restore wrap property*/
    g->wrap = temp_wrap;
 8008006:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 800800a:	f365 1304 	bfi	r3, r5, #4, #1
 800800e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8008012:	bd38      	pop	{r3, r4, r5, pc}
    if(group->frozen) return;
 8008014:	07db      	lsls	r3, r3, #31
 8008016:	d4f6      	bmi.n	8008006 <lv_group_refocus+0x1e>
 8008018:	f7ff ffb0 	bl	8007f7c <lv_group_focus_prev.part.2>
    g->wrap = temp_wrap;
 800801c:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 8008020:	f365 1304 	bfi	r3, r5, #4, #1
 8008024:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8008028:	bd38      	pop	{r3, r4, r5, pc}
 800802a:	f7ff ff71 	bl	8007f10 <lv_group_focus_next.part.1>
 800802e:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 8008032:	f365 1304 	bfi	r3, r5, #4, #1
 8008036:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 800803a:	bd38      	pop	{r3, r4, r5, pc}

0800803c <lv_group_add_obj>:
    if(group == NULL) return;
 800803c:	b1d0      	cbz	r0, 8008074 <lv_group_add_obj+0x38>
    if(obj->group_p) {
 800803e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
{
 8008040:	b570      	push	{r4, r5, r6, lr}
 8008042:	4604      	mov	r4, r0
 8008044:	460d      	mov	r5, r1
    if(obj->group_p) {
 8008046:	b11b      	cbz	r3, 8008050 <lv_group_add_obj+0x14>
        if(lv_obj_is_focused(obj)) {
 8008048:	4608      	mov	r0, r1
 800804a:	f001 fdff 	bl	8009c4c <lv_obj_is_focused>
 800804e:	b968      	cbnz	r0, 800806c <lv_group_add_obj+0x30>
    obj->group_p = group;
 8008050:	62ec      	str	r4, [r5, #44]	; 0x2c
    lv_obj_t ** next = lv_ll_ins_tail(&group->obj_ll);
 8008052:	4620      	mov	r0, r4
 8008054:	f007 ff12 	bl	800fe7c <lv_ll_ins_tail>
    lv_mem_assert(next);
 8008058:	4606      	mov	r6, r0
 800805a:	b130      	cbz	r0, 800806a <lv_group_add_obj+0x2e>
    *next = obj;
 800805c:	6005      	str	r5, [r0, #0]
    if(lv_ll_get_head(&group->obj_ll) == next) {
 800805e:	4620      	mov	r0, r4
 8008060:	f007 ff9a 	bl	800ff98 <lv_ll_get_head>
 8008064:	4286      	cmp	r6, r0
 8008066:	d006      	beq.n	8008076 <lv_group_add_obj+0x3a>
 8008068:	bd70      	pop	{r4, r5, r6, pc}
 800806a:	e7fe      	b.n	800806a <lv_group_add_obj+0x2e>
            lv_group_refocus(obj->group_p);
 800806c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800806e:	f7ff ffbb 	bl	8007fe8 <lv_group_refocus>
 8008072:	e7ed      	b.n	8008050 <lv_group_add_obj+0x14>
 8008074:	4770      	bx	lr
        lv_group_refocus(group);
 8008076:	4620      	mov	r0, r4
}
 8008078:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_group_refocus(group);
 800807c:	f7ff bfb4 	b.w	8007fe8 <lv_group_refocus>

08008080 <lv_group_remove_obj>:
{
 8008080:	b570      	push	{r4, r5, r6, lr}
    lv_group_t * g = obj->group_p;
 8008082:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
    if(g == NULL) return;
 8008084:	b1f6      	cbz	r6, 80080c4 <lv_group_remove_obj+0x44>
    if(g->obj_focus == NULL) return;        /*Just to be sure (Not possible if there is at least one object in the group)*/
 8008086:	68f3      	ldr	r3, [r6, #12]
 8008088:	b1e3      	cbz	r3, 80080c4 <lv_group_remove_obj+0x44>
    if(*g->obj_focus == obj) {
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4605      	mov	r5, r0
 800808e:	4298      	cmp	r0, r3
 8008090:	d019      	beq.n	80080c6 <lv_group_remove_obj+0x46>
    LL_READ(g->obj_ll, i) {
 8008092:	4630      	mov	r0, r6
 8008094:	f007 ff80 	bl	800ff98 <lv_ll_get_head>
 8008098:	4604      	mov	r4, r0
 800809a:	b930      	cbnz	r0, 80080aa <lv_group_remove_obj+0x2a>
 800809c:	e012      	b.n	80080c4 <lv_group_remove_obj+0x44>
 800809e:	4621      	mov	r1, r4
 80080a0:	4630      	mov	r0, r6
 80080a2:	f007 ff81 	bl	800ffa8 <lv_ll_get_next>
 80080a6:	4604      	mov	r4, r0
 80080a8:	b160      	cbz	r0, 80080c4 <lv_group_remove_obj+0x44>
        if(*i == obj) {
 80080aa:	6823      	ldr	r3, [r4, #0]
 80080ac:	429d      	cmp	r5, r3
 80080ae:	d1f6      	bne.n	800809e <lv_group_remove_obj+0x1e>
            lv_ll_rem(&g->obj_ll, i);
 80080b0:	4630      	mov	r0, r6
 80080b2:	4621      	mov	r1, r4
 80080b4:	f007 ff04 	bl	800fec0 <lv_ll_rem>
            lv_mem_free(i);
 80080b8:	4620      	mov	r0, r4
 80080ba:	f007 ffe5 	bl	8010088 <lv_mem_free>
            obj->group_p = NULL;
 80080be:	2300      	movs	r3, #0
 80080c0:	62eb      	str	r3, [r5, #44]	; 0x2c
            break;
 80080c2:	bd70      	pop	{r4, r5, r6, pc}
 80080c4:	bd70      	pop	{r4, r5, r6, pc}
        if(lv_ll_get_head(&g->obj_ll) == g->obj_focus && lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 80080c6:	4630      	mov	r0, r6
 80080c8:	f007 ff66 	bl	800ff98 <lv_ll_get_head>
 80080cc:	68f3      	ldr	r3, [r6, #12]
 80080ce:	4283      	cmp	r3, r0
 80080d0:	d009      	beq.n	80080e6 <lv_group_remove_obj+0x66>
            lv_group_refocus(g);
 80080d2:	4630      	mov	r0, r6
 80080d4:	f7ff ff88 	bl	8007fe8 <lv_group_refocus>
    if(*g->obj_focus == obj) {
 80080d8:	68f3      	ldr	r3, [r6, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	429d      	cmp	r5, r3
 80080de:	d1d8      	bne.n	8008092 <lv_group_remove_obj+0x12>
        g->obj_focus = NULL;
 80080e0:	2300      	movs	r3, #0
 80080e2:	60f3      	str	r3, [r6, #12]
 80080e4:	e7d5      	b.n	8008092 <lv_group_remove_obj+0x12>
        if(lv_ll_get_head(&g->obj_ll) == g->obj_focus && lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 80080e6:	4630      	mov	r0, r6
 80080e8:	f007 ff5a 	bl	800ffa0 <lv_ll_get_tail>
 80080ec:	68f3      	ldr	r3, [r6, #12]
 80080ee:	4298      	cmp	r0, r3
 80080f0:	d1ef      	bne.n	80080d2 <lv_group_remove_obj+0x52>
            (*g->obj_focus)->signal_func(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 80080f2:	6800      	ldr	r0, [r0, #0]
 80080f4:	2200      	movs	r2, #0
 80080f6:	2111      	movs	r1, #17
 80080f8:	6983      	ldr	r3, [r0, #24]
 80080fa:	4798      	blx	r3
 80080fc:	e7ec      	b.n	80080d8 <lv_group_remove_obj+0x58>
 80080fe:	bf00      	nop

08008100 <lv_group_focus_next>:
    if(group->frozen) return;
 8008100:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 8008104:	07db      	lsls	r3, r3, #31
 8008106:	d401      	bmi.n	800810c <lv_group_focus_next+0xc>
 8008108:	f7ff bf02 	b.w	8007f10 <lv_group_focus_next.part.1>
 800810c:	4770      	bx	lr
 800810e:	bf00      	nop

08008110 <lv_group_focus_prev>:
    if(group->frozen) return;
 8008110:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 8008114:	07db      	lsls	r3, r3, #31
 8008116:	d401      	bmi.n	800811c <lv_group_focus_prev+0xc>
 8008118:	f7ff bf30 	b.w	8007f7c <lv_group_focus_prev.part.2>
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop

08008120 <lv_group_send_data>:
{
 8008120:	b500      	push	{lr}
 8008122:	b083      	sub	sp, #12
 8008124:	9101      	str	r1, [sp, #4]
 * @param group pointer to a group
 * @return pointer to the focused object
 */
lv_obj_t * lv_group_get_focused(const lv_group_t * group)
{
    if(!group) return NULL;
 8008126:	b150      	cbz	r0, 800813e <lv_group_send_data+0x1e>
    if(group->obj_focus == NULL) return NULL;
 8008128:	68c3      	ldr	r3, [r0, #12]
 800812a:	b143      	cbz	r3, 800813e <lv_group_send_data+0x1e>

    return *group->obj_focus;
 800812c:	6818      	ldr	r0, [r3, #0]
    if(act == NULL) return LV_RES_OK;
 800812e:	b130      	cbz	r0, 800813e <lv_group_send_data+0x1e>
    return act->signal_func(act, LV_SIGNAL_CONTROLL, &c);
 8008130:	6983      	ldr	r3, [r0, #24]
 8008132:	aa01      	add	r2, sp, #4
 8008134:	2112      	movs	r1, #18
 8008136:	4798      	blx	r3
}
 8008138:	b003      	add	sp, #12
 800813a:	f85d fb04 	ldr.w	pc, [sp], #4
    if(act == NULL) return LV_RES_OK;
 800813e:	2001      	movs	r0, #1
}
 8008140:	b003      	add	sp, #12
 8008142:	f85d fb04 	ldr.w	pc, [sp], #4
 8008146:	bf00      	nop

08008148 <lv_group_set_editing>:
    if(en_val == group->editing) return;        /*Do not set the same mode again*/
 8008148:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 800814c:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8008150:	428a      	cmp	r2, r1
 8008152:	d012      	beq.n	800817a <lv_group_set_editing+0x32>
    group->editing = en_val;
 8008154:	f361 0341 	bfi	r3, r1, #1, #1
{
 8008158:	b510      	push	{r4, lr}
    if(group->obj_focus == NULL) return NULL;
 800815a:	68c4      	ldr	r4, [r0, #12]
    group->editing = en_val;
 800815c:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
    if(group->obj_focus == NULL) return NULL;
 8008160:	b134      	cbz	r4, 8008170 <lv_group_set_editing+0x28>
    return *group->obj_focus;
 8008162:	6824      	ldr	r4, [r4, #0]
    if(focused) focused->signal_func(focused, LV_SIGNAL_FOCUS, NULL);       /*Focus again to properly leave edit mode*/
 8008164:	b124      	cbz	r4, 8008170 <lv_group_set_editing+0x28>
 8008166:	69a3      	ldr	r3, [r4, #24]
 8008168:	2200      	movs	r2, #0
 800816a:	2110      	movs	r1, #16
 800816c:	4620      	mov	r0, r4
 800816e:	4798      	blx	r3
    lv_obj_invalidate(focused);
 8008170:	4620      	mov	r0, r4
}
 8008172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(focused);
 8008176:	f000 be5f 	b.w	8008e38 <lv_obj_invalidate>
 800817a:	4770      	bx	lr

0800817c <lv_group_focus_obj>:
{
 800817c:	b570      	push	{r4, r5, r6, lr}
    lv_group_t * g = obj->group_p;
 800817e:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
    if(g == NULL) return;
 8008180:	b125      	cbz	r5, 800818c <lv_group_focus_obj+0x10>
    if(g->frozen != 0) return;
 8008182:	f895 1064 	ldrb.w	r1, [r5, #100]	; 0x64
 8008186:	f011 0101 	ands.w	r1, r1, #1
 800818a:	d000      	beq.n	800818e <lv_group_focus_obj+0x12>
 800818c:	bd70      	pop	{r4, r5, r6, pc}
 800818e:	4606      	mov	r6, r0
    lv_group_set_editing(g, false);
 8008190:	4628      	mov	r0, r5
 8008192:	f7ff ffd9 	bl	8008148 <lv_group_set_editing>
    LL_READ(g->obj_ll, i) {
 8008196:	4628      	mov	r0, r5
 8008198:	f007 fefe 	bl	800ff98 <lv_ll_get_head>
 800819c:	4604      	mov	r4, r0
 800819e:	b938      	cbnz	r0, 80081b0 <lv_group_focus_obj+0x34>
 80081a0:	e7f4      	b.n	800818c <lv_group_focus_obj+0x10>
 80081a2:	4621      	mov	r1, r4
 80081a4:	4628      	mov	r0, r5
 80081a6:	f007 feff 	bl	800ffa8 <lv_ll_get_next>
 80081aa:	4604      	mov	r4, r0
 80081ac:	2800      	cmp	r0, #0
 80081ae:	d0ed      	beq.n	800818c <lv_group_focus_obj+0x10>
        if(*i == obj) {
 80081b0:	6823      	ldr	r3, [r4, #0]
 80081b2:	429e      	cmp	r6, r3
 80081b4:	d1f5      	bne.n	80081a2 <lv_group_focus_obj+0x26>
            if(g->obj_focus == i) return;       /*Don't focus the already focused object again*/
 80081b6:	68eb      	ldr	r3, [r5, #12]
 80081b8:	42a3      	cmp	r3, r4
 80081ba:	d0e7      	beq.n	800818c <lv_group_focus_obj+0x10>
            if(g->obj_focus != NULL) {
 80081bc:	b143      	cbz	r3, 80081d0 <lv_group_focus_obj+0x54>
                (*g->obj_focus)->signal_func(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 80081be:	6818      	ldr	r0, [r3, #0]
 80081c0:	2200      	movs	r2, #0
 80081c2:	2111      	movs	r1, #17
 80081c4:	6983      	ldr	r3, [r0, #24]
 80081c6:	4798      	blx	r3
                lv_obj_invalidate(*g->obj_focus);
 80081c8:	68eb      	ldr	r3, [r5, #12]
 80081ca:	6818      	ldr	r0, [r3, #0]
 80081cc:	f000 fe34 	bl	8008e38 <lv_obj_invalidate>
                (*g->obj_focus)->signal_func(*g->obj_focus, LV_SIGNAL_FOCUS, NULL);
 80081d0:	6820      	ldr	r0, [r4, #0]
 80081d2:	2200      	movs	r2, #0
            g->obj_focus = i;
 80081d4:	60ec      	str	r4, [r5, #12]
                (*g->obj_focus)->signal_func(*g->obj_focus, LV_SIGNAL_FOCUS, NULL);
 80081d6:	2110      	movs	r1, #16
 80081d8:	6983      	ldr	r3, [r0, #24]
 80081da:	4798      	blx	r3
                if(g->focus_cb) g->focus_cb(g);
 80081dc:	69ab      	ldr	r3, [r5, #24]
 80081de:	b10b      	cbz	r3, 80081e4 <lv_group_focus_obj+0x68>
 80081e0:	4628      	mov	r0, r5
 80081e2:	4798      	blx	r3
                lv_obj_invalidate(*g->obj_focus);
 80081e4:	68eb      	ldr	r3, [r5, #12]
}
 80081e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                lv_obj_invalidate(*g->obj_focus);
 80081ea:	6818      	ldr	r0, [r3, #0]
 80081ec:	f000 be24 	b.w	8008e38 <lv_obj_invalidate>

080081f0 <lv_group_mod_style>:
{
 80081f0:	b538      	push	{r3, r4, r5, lr}
    lv_style_copy(&group->style_tmp, style);
 80081f2:	f100 051c 	add.w	r5, r0, #28
{
 80081f6:	4604      	mov	r4, r0
    lv_style_copy(&group->style_tmp, style);
 80081f8:	4628      	mov	r0, r5
 80081fa:	f002 fa03 	bl	800a604 <lv_style_copy>
    if(group->editing) {
 80081fe:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 8008202:	079b      	lsls	r3, r3, #30
 8008204:	d505      	bpl.n	8008212 <lv_group_mod_style+0x22>
        if(group->style_mod_edit) group->style_mod_edit(&group->style_tmp);
 8008206:	6963      	ldr	r3, [r4, #20]
 8008208:	b10b      	cbz	r3, 800820e <lv_group_mod_style+0x1e>
        if(group->style_mod) group->style_mod(&group->style_tmp);
 800820a:	4628      	mov	r0, r5
 800820c:	4798      	blx	r3
}
 800820e:	4628      	mov	r0, r5
 8008210:	bd38      	pop	{r3, r4, r5, pc}
        if(group->style_mod) group->style_mod(&group->style_tmp);
 8008212:	6923      	ldr	r3, [r4, #16]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d1f8      	bne.n	800820a <lv_group_mod_style+0x1a>
}
 8008218:	4628      	mov	r0, r5
 800821a:	bd38      	pop	{r3, r4, r5, pc}

0800821c <lv_group_get_focused>:
    if(!group) return NULL;
 800821c:	b110      	cbz	r0, 8008224 <lv_group_get_focused+0x8>
    if(group->obj_focus == NULL) return NULL;
 800821e:	68c0      	ldr	r0, [r0, #12]
 8008220:	b100      	cbz	r0, 8008224 <lv_group_get_focused+0x8>
    return *group->obj_focus;
 8008222:	6800      	ldr	r0, [r0, #0]
}
 8008224:	4770      	bx	lr
 8008226:	bf00      	nop

08008228 <lv_group_get_editing>:
 * @param group pointer to group
 * @return true: edit mode; false: navigate mode
 */
bool lv_group_get_editing(const lv_group_t * group)
{
    if(!group) return false;
 8008228:	b118      	cbz	r0, 8008232 <lv_group_get_editing+0xa>
    return group->editing ? true : false;
 800822a:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
 800822e:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
 8008232:	4770      	bx	lr

08008234 <lv_group_get_click_focus>:
 * @param group pointer to group
 * @return true: `click_focus` is enabled; false: disabled
 */
bool lv_group_get_click_focus(const lv_group_t * group)
{
    if(!group) return false;
 8008234:	b118      	cbz	r0, 800823e <lv_group_get_click_focus+0xa>
    return group->click_focus ? true : false;
 8008236:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
 800823a:	f3c0 0080 	ubfx	r0, r0, #2, #1
}
 800823e:	4770      	bx	lr

08008240 <indev_search_obj>:
 * @param proc pointer to  the `lv_indev_proc_t` part of the input device
 * @param obj pointer to a start object, typically the screen
 * @return pointer to the found object or NULL if there was no suitable object
 */
static lv_obj_t * indev_search_obj(const lv_indev_proc_t * proc, lv_obj_t * obj)
{
 8008240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008242:	460f      	mov	r7, r1
 8008244:	4605      	mov	r5, r0
    lv_obj_t * found_p = NULL;

    /*If the point is on this object*/
    /*Check its children too*/
    if(lv_area_is_point_on(&obj->coords, &proc->act_point)) {
 8008246:	1d01      	adds	r1, r0, #4
 8008248:	f107 0010 	add.w	r0, r7, #16
 800824c:	f007 fbec 	bl	800fa28 <lv_area_is_point_on>
 8008250:	b320      	cbz	r0, 800829c <indev_search_obj+0x5c>
        lv_obj_t * i;

        LL_READ(obj->child_ll, i) {
 8008252:	1d3e      	adds	r6, r7, #4
 8008254:	4630      	mov	r0, r6
 8008256:	f007 fe9f 	bl	800ff98 <lv_ll_get_head>
 800825a:	4604      	mov	r4, r0
 800825c:	b928      	cbnz	r0, 800826a <indev_search_obj+0x2a>
 800825e:	e00c      	b.n	800827a <indev_search_obj+0x3a>
 8008260:	4630      	mov	r0, r6
 8008262:	f007 fea1 	bl	800ffa8 <lv_ll_get_next>
 8008266:	4604      	mov	r4, r0
 8008268:	b138      	cbz	r0, 800827a <indev_search_obj+0x3a>
            found_p = indev_search_obj(proc, i);
 800826a:	4621      	mov	r1, r4
 800826c:	4628      	mov	r0, r5
 800826e:	f7ff ffe7 	bl	8008240 <indev_search_obj>
        LL_READ(obj->child_ll, i) {
 8008272:	4621      	mov	r1, r4

            /*If a child was found then break*/
            if(found_p != NULL) {
 8008274:	2800      	cmp	r0, #0
 8008276:	d0f3      	beq.n	8008260 <indev_search_obj+0x20>
        }

    }

    return found_p;
}
 8008278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(found_p == NULL && lv_obj_get_click(obj) != false) {
 800827a:	4638      	mov	r0, r7
 800827c:	f001 fcaa 	bl	8009bd4 <lv_obj_get_click>
 8008280:	b160      	cbz	r0, 800829c <indev_search_obj+0x5c>
            while(hidden_i != NULL) {
 8008282:	b15f      	cbz	r7, 800829c <indev_search_obj+0x5c>
 8008284:	463c      	mov	r4, r7
 8008286:	e004      	b.n	8008292 <indev_search_obj+0x52>
                hidden_i = lv_obj_get_parent(hidden_i);
 8008288:	4620      	mov	r0, r4
 800828a:	f001 fb05 	bl	8009898 <lv_obj_get_parent>
            while(hidden_i != NULL) {
 800828e:	4604      	mov	r4, r0
 8008290:	b130      	cbz	r0, 80082a0 <indev_search_obj+0x60>
                if(lv_obj_get_hidden(hidden_i) == true) break;
 8008292:	4620      	mov	r0, r4
 8008294:	f001 fc98 	bl	8009bc8 <lv_obj_get_hidden>
 8008298:	2800      	cmp	r0, #0
 800829a:	d0f5      	beq.n	8008288 <indev_search_obj+0x48>
    lv_obj_t * found_p = NULL;
 800829c:	2000      	movs	r0, #0
 800829e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082a0:	4638      	mov	r0, r7
    return found_p;
 80082a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080082a4 <indev_proc_press>:
    if(proc->wait_unil_release != 0) return;
 80082a4:	7f03      	ldrb	r3, [r0, #28]
 80082a6:	075a      	lsls	r2, r3, #29
 80082a8:	d420      	bmi.n	80082ec <indev_proc_press+0x48>
{
 80082aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_t * pr_obj = proc->act_obj;
 80082ae:	6946      	ldr	r6, [r0, #20]
{
 80082b0:	b085      	sub	sp, #20
 80082b2:	4604      	mov	r4, r0
    if(proc->act_obj == NULL) {
 80082b4:	2e00      	cmp	r6, #0
 80082b6:	f000 810f 	beq.w	80084d8 <indev_proc_press+0x234>
    else if(proc->drag_in_prog == 0 &&
 80082ba:	079b      	lsls	r3, r3, #30
 80082bc:	d517      	bpl.n	80082ee <indev_proc_press+0x4a>
 80082be:	4633      	mov	r3, r6
    proc->vect.x = proc->act_point.x - proc->last_point.x;
 80082c0:	88a1      	ldrh	r1, [r4, #4]
 80082c2:	8925      	ldrh	r5, [r4, #8]
    proc->vect.y = proc->act_point.y - proc->last_point.y;
 80082c4:	88e2      	ldrh	r2, [r4, #6]
 80082c6:	8960      	ldrh	r0, [r4, #10]
    proc->vect.x = proc->act_point.x - proc->last_point.x;
 80082c8:	1b49      	subs	r1, r1, r5
    proc->vect.y = proc->act_point.y - proc->last_point.y;
 80082ca:	1a12      	subs	r2, r2, r0
    proc->vect.x = proc->act_point.x - proc->last_point.x;
 80082cc:	81a1      	strh	r1, [r4, #12]
    proc->vect.y = proc->act_point.y - proc->last_point.y;
 80082ce:	81e2      	strh	r2, [r4, #14]
    if(proc->act_obj != NULL) {
 80082d0:	b14b      	cbz	r3, 80082e6 <indev_proc_press+0x42>
        proc->act_obj->signal_func(proc->act_obj, LV_SIGNAL_PRESSING, indev_act);
 80082d2:	4faa      	ldr	r7, [pc, #680]	; (800857c <indev_proc_press+0x2d8>)
 80082d4:	4618      	mov	r0, r3
 80082d6:	2109      	movs	r1, #9
 80082d8:	699b      	ldr	r3, [r3, #24]
 80082da:	683a      	ldr	r2, [r7, #0]
 80082dc:	4798      	blx	r3
        if(proc->reset_query != 0) return;
 80082de:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80082e2:	0798      	lsls	r0, r3, #30
 80082e4:	d55b      	bpl.n	800839e <indev_proc_press+0xfa>
}
 80082e6:	b005      	add	sp, #20
 80082e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ec:	4770      	bx	lr
            lv_obj_is_protected(proc->act_obj, LV_PROTECT_PRESS_LOST) == false) {/*Now act_obj != NULL*/
 80082ee:	2110      	movs	r1, #16
 80082f0:	4630      	mov	r0, r6
 80082f2:	f001 fc9b 	bl	8009c2c <lv_obj_is_protected>
    else if(proc->drag_in_prog == 0 &&
 80082f6:	2800      	cmp	r0, #0
 80082f8:	f000 80ee 	beq.w	80084d8 <indev_proc_press+0x234>
    if(pr_obj != proc->act_obj) {
 80082fc:	6963      	ldr	r3, [r4, #20]
 80082fe:	429e      	cmp	r6, r3
 8008300:	d0de      	beq.n	80082c0 <indev_proc_press+0x1c>
        proc->last_point.x = proc->act_point.x;
 8008302:	88a1      	ldrh	r1, [r4, #4]
        proc->last_point.y = proc->act_point.y;
 8008304:	88e2      	ldrh	r2, [r4, #6]
        proc->last_point.x = proc->act_point.x;
 8008306:	8121      	strh	r1, [r4, #8]
        proc->last_point.y = proc->act_point.y;
 8008308:	8162      	strh	r2, [r4, #10]
        if(proc->act_obj != NULL) {
 800830a:	b14b      	cbz	r3, 8008320 <indev_proc_press+0x7c>
            proc->act_obj->signal_func(proc->act_obj, LV_SIGNAL_PRESS_LOST, indev_act);
 800830c:	4a9b      	ldr	r2, [pc, #620]	; (800857c <indev_proc_press+0x2d8>)
 800830e:	4618      	mov	r0, r3
 8008310:	210a      	movs	r1, #10
 8008312:	699b      	ldr	r3, [r3, #24]
 8008314:	6812      	ldr	r2, [r2, #0]
 8008316:	4798      	blx	r3
            if(proc->reset_query != 0) return;
 8008318:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800831c:	079f      	lsls	r7, r3, #30
 800831e:	d4e2      	bmi.n	80082e6 <indev_proc_press+0x42>
        proc->act_obj = pr_obj;           /*Save the pressed object*/
 8008320:	6166      	str	r6, [r4, #20]
        proc->last_obj = proc->act_obj;   /*Refresh the last_obj*/
 8008322:	61a6      	str	r6, [r4, #24]
        if(proc->act_obj != NULL) {
 8008324:	2e00      	cmp	r6, #0
 8008326:	d0ca      	beq.n	80082be <indev_proc_press+0x1a>
            proc->pr_timestamp = lv_tick_get();
 8008328:	f007 f990 	bl	800f64c <lv_tick_get>
            proc->drag_range_out = 0;
 800832c:	7f22      	ldrb	r2, [r4, #28]
            proc->long_pr_sent = 0;
 800832e:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
            proc->drag_sum.x = 0;
 8008332:	2500      	movs	r5, #0
            proc->drag_in_prog = 0;
 8008334:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
            lv_obj_t * i = proc->act_obj;
 8008338:	6963      	ldr	r3, [r4, #20]
            proc->long_pr_sent = 0;
 800833a:	f36f 0100 	bfc	r1, #0, #1
            proc->pr_timestamp = lv_tick_get();
 800833e:	6220      	str	r0, [r4, #32]
            proc->drag_in_prog = 0;
 8008340:	f36f 0241 	bfc	r2, #1, #1
            proc->drag_sum.x = 0;
 8008344:	8225      	strh	r5, [r4, #16]
            proc->long_pr_sent = 0;
 8008346:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
            proc->drag_in_prog = 0;
 800834a:	7722      	strb	r2, [r4, #28]
            proc->drag_sum.y = 0;
 800834c:	8265      	strh	r5, [r4, #18]
            proc->vect.x = 0;
 800834e:	81a5      	strh	r5, [r4, #12]
            proc->vect.y = 0;
 8008350:	81e5      	strh	r5, [r4, #14]
            while(i != NULL) {
 8008352:	b1c3      	cbz	r3, 8008386 <indev_proc_press+0xe2>
                if(i->top != 0) last_top = i;
 8008354:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
                i = lv_obj_get_parent(i);
 8008358:	4618      	mov	r0, r3
 800835a:	f012 0f20 	tst.w	r2, #32
 800835e:	bf18      	it	ne
 8008360:	461d      	movne	r5, r3
 8008362:	f001 fa99 	bl	8009898 <lv_obj_get_parent>
            while(i != NULL) {
 8008366:	4603      	mov	r3, r0
 8008368:	2800      	cmp	r0, #0
 800836a:	d1f3      	bne.n	8008354 <indev_proc_press+0xb0>
            if(last_top != NULL) {
 800836c:	b155      	cbz	r5, 8008384 <indev_proc_press+0xe0>
                lv_obj_t * par = lv_obj_get_parent(last_top);
 800836e:	4628      	mov	r0, r5
 8008370:	f001 fa92 	bl	8009898 <lv_obj_get_parent>
                lv_ll_chg_list(&par->child_ll, &par->child_ll, last_top);
 8008374:	1d01      	adds	r1, r0, #4
 8008376:	462a      	mov	r2, r5
 8008378:	4608      	mov	r0, r1
 800837a:	f007 fde7 	bl	800ff4c <lv_ll_chg_list>
                lv_obj_invalidate(last_top);
 800837e:	4628      	mov	r0, r5
 8008380:	f000 fd5a 	bl	8008e38 <lv_obj_invalidate>
 8008384:	6963      	ldr	r3, [r4, #20]
            proc->act_obj->signal_func(proc->act_obj, LV_SIGNAL_PRESSED, indev_act);
 8008386:	4a7d      	ldr	r2, [pc, #500]	; (800857c <indev_proc_press+0x2d8>)
 8008388:	4618      	mov	r0, r3
 800838a:	2108      	movs	r1, #8
 800838c:	699b      	ldr	r3, [r3, #24]
 800838e:	6812      	ldr	r2, [r2, #0]
 8008390:	4798      	blx	r3
            if(proc->reset_query != 0) return;
 8008392:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8008396:	079d      	lsls	r5, r3, #30
 8008398:	d4a5      	bmi.n	80082e6 <indev_proc_press+0x42>
 800839a:	6963      	ldr	r3, [r4, #20]
 800839c:	e790      	b.n	80082c0 <indev_proc_press+0x1c>
 * Handle the dragging of indev_proc_p->act_obj
 * @param indev pointer to a input device state
 */
static void indev_drag(lv_indev_proc_t * state)
{
    lv_obj_t * drag_obj = state->act_obj;
 800839e:	6965      	ldr	r5, [r4, #20]
 80083a0:	e006      	b.n	80083b0 <indev_proc_press+0x10c>

    /*If drag parent is active check recursively the drag_parent attribute*/
    while(lv_obj_get_drag_parent(drag_obj) != false &&
            drag_obj != NULL) {
        drag_obj = lv_obj_get_parent(drag_obj);
 80083a2:	4628      	mov	r0, r5
    while(lv_obj_get_drag_parent(drag_obj) != false &&
 80083a4:	2d00      	cmp	r5, #0
 80083a6:	f000 8092 	beq.w	80084ce <indev_proc_press+0x22a>
        drag_obj = lv_obj_get_parent(drag_obj);
 80083aa:	f001 fa75 	bl	8009898 <lv_obj_get_parent>
 80083ae:	4605      	mov	r5, r0
    while(lv_obj_get_drag_parent(drag_obj) != false &&
 80083b0:	4628      	mov	r0, r5
 80083b2:	f001 fc21 	bl	8009bf8 <lv_obj_get_drag_parent>
 80083b6:	2800      	cmp	r0, #0
 80083b8:	d1f3      	bne.n	80083a2 <indev_proc_press+0xfe>
    }

    if(drag_obj == NULL) return;
 80083ba:	2d00      	cmp	r5, #0
 80083bc:	f000 8087 	beq.w	80084ce <indev_proc_press+0x22a>

    if(lv_obj_get_drag(drag_obj) == false) return;
 80083c0:	4628      	mov	r0, r5
 80083c2:	f001 fc0d 	bl	8009be0 <lv_obj_get_drag>
 80083c6:	2800      	cmp	r0, #0
 80083c8:	f000 8081 	beq.w	80084ce <indev_proc_press+0x22a>

    /*Count the movement by drag*/
    state->drag_sum.x += state->vect.x;
 80083cc:	8a23      	ldrh	r3, [r4, #16]
 80083ce:	89a1      	ldrh	r1, [r4, #12]
    state->drag_sum.y += state->vect.y;
 80083d0:	8a62      	ldrh	r2, [r4, #18]
 80083d2:	89e0      	ldrh	r0, [r4, #14]
    state->drag_sum.x += state->vect.x;
 80083d4:	440b      	add	r3, r1

    /*Enough move?*/
    if(state->drag_range_out == 0) {
 80083d6:	7f21      	ldrb	r1, [r4, #28]
    state->drag_sum.y += state->vect.y;
 80083d8:	4402      	add	r2, r0
    state->drag_sum.x += state->vect.x;
 80083da:	b21b      	sxth	r3, r3
    if(state->drag_range_out == 0) {
 80083dc:	07c9      	lsls	r1, r1, #31
    state->drag_sum.y += state->vect.y;
 80083de:	b212      	sxth	r2, r2
    state->drag_sum.x += state->vect.x;
 80083e0:	8223      	strh	r3, [r4, #16]
    state->drag_sum.y += state->vect.y;
 80083e2:	8262      	strh	r2, [r4, #18]
    if(state->drag_range_out == 0) {
 80083e4:	f140 808a 	bpl.w	80084fc <indev_proc_press+0x258>
    }

    /*If the drag limit is stepped over then handle the dragging*/
    if(state->drag_range_out != 0) {
        /*Set new position if the vector is not zero*/
        if(state->vect.x != 0 ||
 80083e8:	68e3      	ldr	r3, [r4, #12]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d06f      	beq.n	80084ce <indev_proc_press+0x22a>
                state->vect.y != 0) {
            /*Get the coordinates of the object and modify them*/
            lv_coord_t act_x = lv_obj_get_x(drag_obj);
 80083ee:	4628      	mov	r0, r5
 80083f0:	f001 faf6 	bl	80099e0 <lv_obj_get_x>
 80083f4:	4682      	mov	sl, r0
            lv_coord_t act_y = lv_obj_get_y(drag_obj);
 80083f6:	4628      	mov	r0, r5
 80083f8:	f001 faf8 	bl	80099ec <lv_obj_get_y>
 80083fc:	4681      	mov	r9, r0
            uint16_t inv_buf_size = lv_refr_get_buf_size(); /*Get the number of currently invalidated areas*/
 80083fe:	f001 fecf 	bl	800a1a0 <lv_refr_get_buf_size>
 8008402:	9001      	str	r0, [sp, #4]

            lv_coord_t prev_x = drag_obj->coords.x1;
            lv_coord_t prev_y = drag_obj->coords.y1;
            lv_coord_t prev_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
 8008404:	4628      	mov	r0, r5
            lv_coord_t prev_x = drag_obj->coords.x1;
 8008406:	f9b5 8010 	ldrsh.w	r8, [r5, #16]
            lv_coord_t prev_y = drag_obj->coords.y1;
 800840a:	f9b5 b012 	ldrsh.w	fp, [r5, #18]
            lv_coord_t prev_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
 800840e:	f001 fa43 	bl	8009898 <lv_obj_get_parent>
 8008412:	f001 faf1 	bl	80099f8 <lv_obj_get_width>
 8008416:	9002      	str	r0, [sp, #8]
            lv_coord_t prev_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
 8008418:	4628      	mov	r0, r5
 800841a:	f001 fa3d 	bl	8009898 <lv_obj_get_parent>
 800841e:	f001 faf1 	bl	8009a04 <lv_obj_get_height>

            lv_obj_set_pos(drag_obj, act_x + state->vect.x, act_y + state->vect.y);
 8008422:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
 8008426:	f8b4 e00e 	ldrh.w	lr, [r4, #14]
 800842a:	eb0a 010c 	add.w	r1, sl, ip
            lv_coord_t prev_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
 800842e:	9003      	str	r0, [sp, #12]
            lv_obj_set_pos(drag_obj, act_x + state->vect.x, act_y + state->vect.y);
 8008430:	eb09 020e 	add.w	r2, r9, lr
 8008434:	4628      	mov	r0, r5
 8008436:	b209      	sxth	r1, r1
 8008438:	b212      	sxth	r2, r2
 800843a:	f000 fdab 	bl	8008f94 <lv_obj_set_pos>

            /*Set the drag in progress flag if the object is really moved*/

            if(drag_obj->coords.x1 != prev_x || drag_obj->coords.y1 != prev_y) {
 800843e:	f9b5 2010 	ldrsh.w	r2, [r5, #16]
 8008442:	4542      	cmp	r2, r8
 8008444:	d027      	beq.n	8008496 <indev_proc_press+0x1f2>
                if(state->drag_range_out != 0) { /*Send the drag begin signal on first move*/
 8008446:	7f23      	ldrb	r3, [r4, #28]
 8008448:	07d9      	lsls	r1, r3, #31
 800844a:	d478      	bmi.n	800853e <indev_proc_press+0x29a>
 800844c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8008450:	f003 0202 	and.w	r2, r3, #2
                    drag_obj->signal_func(drag_obj,  LV_SIGNAL_DRAG_BEGIN, indev_act);
                    if(state->reset_query != 0) return;
                }
                state->drag_in_prog = 1;
 8008454:	7f21      	ldrb	r1, [r4, #28]
 8008456:	f041 0102 	orr.w	r1, r1, #2
 800845a:	7721      	strb	r1, [r4, #28]
        if(proc->reset_query != 0) return;
 800845c:	2a00      	cmp	r2, #0
 800845e:	f47f af42 	bne.w	80082e6 <indev_proc_press+0x42>
        if(proc->drag_in_prog == 0 && proc->long_pr_sent == 0) {
 8008462:	7f22      	ldrb	r2, [r4, #28]
 8008464:	0792      	lsls	r2, r2, #30
 8008466:	f53f af3e 	bmi.w	80082e6 <indev_proc_press+0x42>
 800846a:	07dd      	lsls	r5, r3, #31
 800846c:	d557      	bpl.n	800851e <indev_proc_press+0x27a>
            if(lv_tick_elaps(proc->longpr_rep_timestamp) > LV_INDEV_LONG_PRESS_REP_TIME) {
 800846e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008470:	f007 f8f6 	bl	800f660 <lv_tick_elaps>
 8008474:	2864      	cmp	r0, #100	; 0x64
 8008476:	f67f af36 	bls.w	80082e6 <indev_proc_press+0x42>
                pr_obj->signal_func(pr_obj, LV_SIGNAL_LONG_PRESS_REP, indev_act);
 800847a:	69b3      	ldr	r3, [r6, #24]
 800847c:	4630      	mov	r0, r6
 800847e:	683a      	ldr	r2, [r7, #0]
 8008480:	210d      	movs	r1, #13
 8008482:	4798      	blx	r3
                if(proc->reset_query != 0) return;
 8008484:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8008488:	079b      	lsls	r3, r3, #30
 800848a:	f53f af2c 	bmi.w	80082e6 <indev_proc_press+0x42>
                proc->longpr_rep_timestamp = lv_tick_get();
 800848e:	f007 f8dd 	bl	800f64c <lv_tick_get>
 8008492:	6260      	str	r0, [r4, #36]	; 0x24
 8008494:	e727      	b.n	80082e6 <indev_proc_press+0x42>
            if(drag_obj->coords.x1 != prev_x || drag_obj->coords.y1 != prev_y) {
 8008496:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
 800849a:	455b      	cmp	r3, fp
 800849c:	d1d3      	bne.n	8008446 <indev_proc_press+0x1a2>
            /*If the object didn't moved then clear the invalidated areas*/
            else {
                /*In a special case if the object is moved on a page and
                 * the scrollable has fit == true and the object is dragged of the page then
                 * while its coordinate is not changing only the parent's size is reduced */
                lv_coord_t act_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
 800849e:	4628      	mov	r0, r5
 80084a0:	f001 f9fa 	bl	8009898 <lv_obj_get_parent>
 80084a4:	f001 faa8 	bl	80099f8 <lv_obj_get_width>
 80084a8:	4683      	mov	fp, r0
                lv_coord_t act_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
 80084aa:	4628      	mov	r0, r5
 80084ac:	f001 f9f4 	bl	8009898 <lv_obj_get_parent>
 80084b0:	f001 faa8 	bl	8009a04 <lv_obj_get_height>
                if(act_par_w == prev_par_w && act_par_h == prev_par_h) {
 80084b4:	9b02      	ldr	r3, [sp, #8]
 80084b6:	455b      	cmp	r3, fp
 80084b8:	d109      	bne.n	80084ce <indev_proc_press+0x22a>
 80084ba:	9b03      	ldr	r3, [sp, #12]
 80084bc:	4283      	cmp	r3, r0
 80084be:	d106      	bne.n	80084ce <indev_proc_press+0x22a>
                    uint16_t new_inv_buf_size = lv_refr_get_buf_size();
 80084c0:	f001 fe6e 	bl	800a1a0 <lv_refr_get_buf_size>
                    lv_refr_pop_from_buf(new_inv_buf_size - inv_buf_size);
 80084c4:	9b01      	ldr	r3, [sp, #4]
 80084c6:	1ac0      	subs	r0, r0, r3
 80084c8:	b280      	uxth	r0, r0
 80084ca:	f001 fe6f 	bl	800a1ac <lv_refr_pop_from_buf>
 80084ce:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80084d2:	f003 0202 	and.w	r2, r3, #2
 80084d6:	e7c1      	b.n	800845c <indev_proc_press+0x1b8>
        pr_obj = indev_search_obj(proc, lv_layer_top());
 80084d8:	f001 f9d2 	bl	8009880 <lv_layer_top>
 80084dc:	4601      	mov	r1, r0
 80084de:	4620      	mov	r0, r4
 80084e0:	f7ff feae 	bl	8008240 <indev_search_obj>
        if(pr_obj == NULL) pr_obj = indev_search_obj(proc, lv_scr_act());
 80084e4:	4606      	mov	r6, r0
 80084e6:	2800      	cmp	r0, #0
 80084e8:	f47f af08 	bne.w	80082fc <indev_proc_press+0x58>
 80084ec:	f001 f9c2 	bl	8009874 <lv_scr_act>
 80084f0:	4601      	mov	r1, r0
 80084f2:	4620      	mov	r0, r4
 80084f4:	f7ff fea4 	bl	8008240 <indev_search_obj>
 80084f8:	4606      	mov	r6, r0
 80084fa:	e6ff      	b.n	80082fc <indev_proc_press+0x58>
        if(LV_MATH_ABS(state->drag_sum.x) >= LV_INDEV_DRAG_LIMIT ||
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	bfb8      	it	lt
 8008500:	425b      	neglt	r3, r3
 8008502:	2b09      	cmp	r3, #9
 8008504:	dc04      	bgt.n	8008510 <indev_proc_press+0x26c>
                LV_MATH_ABS(state->drag_sum.y) >= LV_INDEV_DRAG_LIMIT) {
 8008506:	2a00      	cmp	r2, #0
 8008508:	bfb8      	it	lt
 800850a:	4252      	neglt	r2, r2
        if(LV_MATH_ABS(state->drag_sum.x) >= LV_INDEV_DRAG_LIMIT ||
 800850c:	2a09      	cmp	r2, #9
 800850e:	ddde      	ble.n	80084ce <indev_proc_press+0x22a>
            state->drag_range_out = 1;
 8008510:	7f23      	ldrb	r3, [r4, #28]
 8008512:	f043 0301 	orr.w	r3, r3, #1
    if(state->drag_range_out != 0) {
 8008516:	07d8      	lsls	r0, r3, #31
            state->drag_range_out = 1;
 8008518:	7723      	strb	r3, [r4, #28]
    if(state->drag_range_out != 0) {
 800851a:	d5d8      	bpl.n	80084ce <indev_proc_press+0x22a>
 800851c:	e764      	b.n	80083e8 <indev_proc_press+0x144>
            if(lv_tick_elaps(proc->pr_timestamp) > LV_INDEV_LONG_PRESS_TIME) {
 800851e:	6a20      	ldr	r0, [r4, #32]
 8008520:	f007 f89e 	bl	800f660 <lv_tick_elaps>
 8008524:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 8008528:	d815      	bhi.n	8008556 <indev_proc_press+0x2b2>
        if(proc->drag_in_prog == 0 && proc->long_pr_sent == 1) {
 800852a:	7f23      	ldrb	r3, [r4, #28]
 800852c:	0799      	lsls	r1, r3, #30
 800852e:	f53f aeda 	bmi.w	80082e6 <indev_proc_press+0x42>
 8008532:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8008536:	07da      	lsls	r2, r3, #31
 8008538:	f57f aed5 	bpl.w	80082e6 <indev_proc_press+0x42>
 800853c:	e797      	b.n	800846e <indev_proc_press+0x1ca>
                    drag_obj->signal_func(drag_obj,  LV_SIGNAL_DRAG_BEGIN, indev_act);
 800853e:	69ab      	ldr	r3, [r5, #24]
 8008540:	4628      	mov	r0, r5
 8008542:	683a      	ldr	r2, [r7, #0]
 8008544:	210e      	movs	r1, #14
 8008546:	4798      	blx	r3
                    if(state->reset_query != 0) return;
 8008548:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800854c:	f013 0202 	ands.w	r2, r3, #2
 8008550:	f47f aec9 	bne.w	80082e6 <indev_proc_press+0x42>
 8008554:	e77e      	b.n	8008454 <indev_proc_press+0x1b0>
                pr_obj->signal_func(pr_obj, LV_SIGNAL_LONG_PRESS, indev_act);
 8008556:	69b3      	ldr	r3, [r6, #24]
 8008558:	210c      	movs	r1, #12
 800855a:	683a      	ldr	r2, [r7, #0]
 800855c:	4630      	mov	r0, r6
 800855e:	4798      	blx	r3
                if(proc->reset_query != 0) return;
 8008560:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8008564:	0798      	lsls	r0, r3, #30
 8008566:	f53f aebe 	bmi.w	80082e6 <indev_proc_press+0x42>
                proc->long_pr_sent = 1;
 800856a:	f043 0301 	orr.w	r3, r3, #1
 800856e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
                proc->longpr_rep_timestamp = lv_tick_get();
 8008572:	f007 f86b 	bl	800f64c <lv_tick_get>
 8008576:	6260      	str	r0, [r4, #36]	; 0x24
 8008578:	e7d7      	b.n	800852a <indev_proc_press+0x286>
 800857a:	bf00      	nop
 800857c:	20000a78 	.word	0x20000a78

08008580 <indev_proc_release>:
    if(proc->wait_unil_release != 0) {
 8008580:	7f03      	ldrb	r3, [r0, #28]
 8008582:	0759      	lsls	r1, r3, #29
 8008584:	d508      	bpl.n	8008598 <indev_proc_release+0x18>
        proc->act_obj = NULL;
 8008586:	2200      	movs	r2, #0
        proc->wait_unil_release = 0;
 8008588:	f362 0382 	bfi	r3, r2, #2, #1
        proc->act_obj = NULL;
 800858c:	6142      	str	r2, [r0, #20]
        proc->last_obj = NULL;
 800858e:	6182      	str	r2, [r0, #24]
        proc->wait_unil_release = 0;
 8008590:	7703      	strb	r3, [r0, #28]
        proc->pr_timestamp = 0;
 8008592:	6202      	str	r2, [r0, #32]
        proc->longpr_rep_timestamp = 0;
 8008594:	6242      	str	r2, [r0, #36]	; 0x24
 8008596:	4770      	bx	lr
{
 8008598:	b570      	push	{r4, r5, r6, lr}
 800859a:	4604      	mov	r4, r0
    if(proc->act_obj != NULL) {
 800859c:	6940      	ldr	r0, [r0, #20]
{
 800859e:	b084      	sub	sp, #16
    if(proc->act_obj != NULL) {
 80085a0:	2800      	cmp	r0, #0
 80085a2:	f000 80e4 	beq.w	800876e <indev_proc_release+0x1ee>
        if(lv_obj_is_protected(proc->act_obj, LV_PROTECT_PRESS_LOST)) {
 80085a6:	2110      	movs	r1, #16
 80085a8:	f001 fb40 	bl	8009c2c <lv_obj_is_protected>
 80085ac:	b960      	cbnz	r0, 80085c8 <indev_proc_release+0x48>
            proc->act_obj->signal_func(proc->act_obj, LV_SIGNAL_RELEASED, indev_act);
 80085ae:	6960      	ldr	r0, [r4, #20]
 80085b0:	210b      	movs	r1, #11
 80085b2:	4a74      	ldr	r2, [pc, #464]	; (8008784 <indev_proc_release+0x204>)
 80085b4:	6983      	ldr	r3, [r0, #24]
 80085b6:	6812      	ldr	r2, [r2, #0]
 80085b8:	4798      	blx	r3
        if(proc->reset_query != 0) return;
 80085ba:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 80085be:	f011 0502 	ands.w	r5, r1, #2
 80085c2:	d014      	beq.n	80085ee <indev_proc_release+0x6e>
}
 80085c4:	b004      	add	sp, #16
 80085c6:	bd70      	pop	{r4, r5, r6, pc}
            lv_obj_t * obj_on = indev_search_obj(proc, proc->act_obj);
 80085c8:	6961      	ldr	r1, [r4, #20]
 80085ca:	4620      	mov	r0, r4
 80085cc:	f7ff fe38 	bl	8008240 <indev_search_obj>
            if(obj_on == proc->act_obj) proc->act_obj->signal_func(proc->act_obj, LV_SIGNAL_RELEASED, indev_act);
 80085d0:	6963      	ldr	r3, [r4, #20]
 80085d2:	4298      	cmp	r0, r3
 80085d4:	f000 80ae 	beq.w	8008734 <indev_proc_release+0x1b4>
            else proc->act_obj->signal_func(proc->act_obj, LV_SIGNAL_PRESS_LOST, indev_act);
 80085d8:	4a6a      	ldr	r2, [pc, #424]	; (8008784 <indev_proc_release+0x204>)
 80085da:	4618      	mov	r0, r3
 80085dc:	210a      	movs	r1, #10
 80085de:	699b      	ldr	r3, [r3, #24]
 80085e0:	6812      	ldr	r2, [r2, #0]
 80085e2:	4798      	blx	r3
        if(proc->reset_query != 0) return;
 80085e4:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 80085e8:	f011 0502 	ands.w	r5, r1, #2
 80085ec:	d1ea      	bne.n	80085c4 <indev_proc_release+0x44>
        lv_group_t * act_g = lv_obj_get_group(proc->act_obj);
 80085ee:	6960      	ldr	r0, [r4, #20]
 80085f0:	f001 fb2a 	bl	8009c48 <lv_obj_get_group>
 80085f4:	4606      	mov	r6, r0
        if(lv_group_get_editing(act_g)) {
 80085f6:	f7ff fe17 	bl	8008228 <lv_group_get_editing>
 80085fa:	2800      	cmp	r0, #0
 80085fc:	f040 8095 	bne.w	800872a <indev_proc_release+0x1aa>
        if(lv_obj_is_protected(proc->act_obj, LV_PROTECT_CLICK_FOCUS) == false) {       /*Respect the click protection*/
 8008600:	2120      	movs	r1, #32
 8008602:	6960      	ldr	r0, [r4, #20]
 8008604:	f001 fb12 	bl	8009c2c <lv_obj_is_protected>
 8008608:	2800      	cmp	r0, #0
 800860a:	d077      	beq.n	80086fc <indev_proc_release+0x17c>
        if(proc->reset_query != 0) return;
 800860c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8008610:	f013 0302 	ands.w	r3, r3, #2
 8008614:	d1d6      	bne.n	80085c4 <indev_proc_release+0x44>
    if(proc->last_obj != NULL && proc->reset_query == 0) {
 8008616:	69a5      	ldr	r5, [r4, #24]
        proc->act_obj = NULL;
 8008618:	6163      	str	r3, [r4, #20]
        proc->pr_timestamp = 0;
 800861a:	6223      	str	r3, [r4, #32]
        proc->longpr_rep_timestamp = 0;
 800861c:	6263      	str	r3, [r4, #36]	; 0x24
    if(proc->last_obj != NULL && proc->reset_query == 0) {
 800861e:	2d00      	cmp	r5, #0
 8008620:	d0d0      	beq.n	80085c4 <indev_proc_release+0x44>
 8008622:	7f23      	ldrb	r3, [r4, #28]
 * Handle throwing by drag if the drag is ended
 * @param indev pointer to an input device state
 */
static void indev_drag_throw(lv_indev_proc_t * state)
{
    if(state->drag_in_prog == 0) return;
 8008624:	079b      	lsls	r3, r3, #30
 8008626:	d406      	bmi.n	8008636 <indev_proc_release+0xb6>
 8008628:	e7cc      	b.n	80085c4 <indev_proc_release+0x44>
    lv_obj_t * drag_obj = state->last_obj;

    /*If drag parent is active check recursively the drag_parent attribute*/
    while(lv_obj_get_drag_parent(drag_obj) != false &&
            drag_obj != NULL) {
        drag_obj = lv_obj_get_parent(drag_obj);
 800862a:	4628      	mov	r0, r5
    while(lv_obj_get_drag_parent(drag_obj) != false &&
 800862c:	2d00      	cmp	r5, #0
 800862e:	d0c9      	beq.n	80085c4 <indev_proc_release+0x44>
        drag_obj = lv_obj_get_parent(drag_obj);
 8008630:	f001 f932 	bl	8009898 <lv_obj_get_parent>
 8008634:	4605      	mov	r5, r0
    while(lv_obj_get_drag_parent(drag_obj) != false &&
 8008636:	4628      	mov	r0, r5
 8008638:	f001 fade 	bl	8009bf8 <lv_obj_get_drag_parent>
 800863c:	2800      	cmp	r0, #0
 800863e:	d1f4      	bne.n	800862a <indev_proc_release+0xaa>
    }

    if(drag_obj == NULL) return;
 8008640:	2d00      	cmp	r5, #0
 8008642:	d0bf      	beq.n	80085c4 <indev_proc_release+0x44>

    /*Return if the drag throw is not enabled*/
    if(lv_obj_get_drag_throw(drag_obj) == false) {
 8008644:	4628      	mov	r0, r5
 8008646:	f001 fad1 	bl	8009bec <lv_obj_get_drag_throw>
 800864a:	4603      	mov	r3, r0
 800864c:	2800      	cmp	r0, #0
 800864e:	d077      	beq.n	8008740 <indev_proc_release+0x1c0>
        drag_obj->signal_func(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
        return;
    }

    /*Reduce the vectors*/
    state->vect.x = state->vect.x * (100 - LV_INDEV_DRAG_THROW) / 100;
 8008650:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    state->vect.y = state->vect.y * (100 - LV_INDEV_DRAG_THROW) / 100;
 8008654:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    state->vect.x = state->vect.x * (100 - LV_INDEV_DRAG_THROW) / 100;
 8008658:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800865c:	494a      	ldr	r1, [pc, #296]	; (8008788 <indev_proc_release+0x208>)
    state->vect.y = state->vect.y * (100 - LV_INDEV_DRAG_THROW) / 100;
 800865e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    state->vect.x = state->vect.x * (100 - LV_INDEV_DRAG_THROW) / 100;
 8008662:	0112      	lsls	r2, r2, #4
    state->vect.y = state->vect.y * (100 - LV_INDEV_DRAG_THROW) / 100;
 8008664:	011b      	lsls	r3, r3, #4
    state->vect.x = state->vect.x * (100 - LV_INDEV_DRAG_THROW) / 100;
 8008666:	fb81 6002 	smull	r6, r0, r1, r2
 800866a:	17d2      	asrs	r2, r2, #31
    state->vect.y = state->vect.y * (100 - LV_INDEV_DRAG_THROW) / 100;
 800866c:	fb81 6103 	smull	r6, r1, r1, r3
 8008670:	17db      	asrs	r3, r3, #31
    state->vect.x = state->vect.x * (100 - LV_INDEV_DRAG_THROW) / 100;
 8008672:	ebc2 1260 	rsb	r2, r2, r0, asr #5
    state->vect.y = state->vect.y * (100 - LV_INDEV_DRAG_THROW) / 100;
 8008676:	ebc3 1361 	rsb	r3, r3, r1, asr #5
    state->vect.x = state->vect.x * (100 - LV_INDEV_DRAG_THROW) / 100;
 800867a:	81a2      	strh	r2, [r4, #12]
    state->vect.y = state->vect.y * (100 - LV_INDEV_DRAG_THROW) / 100;
 800867c:	81e3      	strh	r3, [r4, #14]

    if(state->vect.x != 0 ||
 800867e:	68e3      	ldr	r3, [r4, #12]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d05d      	beq.n	8008740 <indev_proc_release+0x1c0>
            state->vect.y != 0) {
        /*Get the coordinates and modify them*/
        lv_area_t coords_ori;
        lv_obj_get_coords(drag_obj, &coords_ori);
 8008684:	4669      	mov	r1, sp
 8008686:	4628      	mov	r0, r5
 8008688:	f001 f9a4 	bl	80099d4 <lv_obj_get_coords>
        lv_coord_t act_x = lv_obj_get_x(drag_obj) + state->vect.x;
 800868c:	4628      	mov	r0, r5
 800868e:	f001 f9a7 	bl	80099e0 <lv_obj_get_x>
 8008692:	89a6      	ldrh	r6, [r4, #12]
 8008694:	4406      	add	r6, r0
        lv_coord_t act_y = lv_obj_get_y(drag_obj) + state->vect.y;
 8008696:	4628      	mov	r0, r5
 8008698:	f001 f9a8 	bl	80099ec <lv_obj_get_y>
 800869c:	89e2      	ldrh	r2, [r4, #14]
        lv_coord_t act_x = lv_obj_get_x(drag_obj) + state->vect.x;
 800869e:	b236      	sxth	r6, r6
        lv_coord_t act_y = lv_obj_get_y(drag_obj) + state->vect.y;
 80086a0:	4402      	add	r2, r0
        lv_obj_set_pos(drag_obj, act_x, act_y);
 80086a2:	4628      	mov	r0, r5
 80086a4:	4631      	mov	r1, r6
 80086a6:	b212      	sxth	r2, r2
 80086a8:	f000 fc74 	bl	8008f94 <lv_obj_set_pos>

        lv_area_t coord_new;
        lv_obj_get_coords(drag_obj, &coord_new);
 80086ac:	a902      	add	r1, sp, #8
 80086ae:	4628      	mov	r0, r5
 80086b0:	f001 f990 	bl	80099d4 <lv_obj_get_coords>

        /*If non of the coordinates are changed then do not continue throwing*/
        if((coords_ori.x1 == coord_new.x1 || state->vect.x == 0) &&
 80086b4:	f9bd 2000 	ldrsh.w	r2, [sp]
 80086b8:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d004      	beq.n	80086ca <indev_proc_release+0x14a>
 80086c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	f47f af7d 	bne.w	80085c4 <indev_proc_release+0x44>
 80086ca:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 80086ce:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d004      	beq.n	80086e0 <indev_proc_release+0x160>
                (coords_ori.y1 == coord_new.y1 || state->vect.y == 0)) {
 80086d6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	f47f af72 	bne.w	80085c4 <indev_proc_release+0x44>
            state->drag_in_prog = 0;
 80086e0:	7f23      	ldrb	r3, [r4, #28]
            state->vect.x = 0;
 80086e2:	2200      	movs	r2, #0
            state->vect.y = 0;
            drag_obj->signal_func(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 80086e4:	4e27      	ldr	r6, [pc, #156]	; (8008784 <indev_proc_release+0x204>)
 80086e6:	4628      	mov	r0, r5
            state->drag_in_prog = 0;
 80086e8:	f36f 0341 	bfc	r3, #1, #1
            state->vect.x = 0;
 80086ec:	81a2      	strh	r2, [r4, #12]
            state->vect.y = 0;
 80086ee:	81e2      	strh	r2, [r4, #14]
            drag_obj->signal_func(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 80086f0:	210f      	movs	r1, #15
            state->drag_in_prog = 0;
 80086f2:	7723      	strb	r3, [r4, #28]
            drag_obj->signal_func(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 80086f4:	6832      	ldr	r2, [r6, #0]
 80086f6:	69ab      	ldr	r3, [r5, #24]
 80086f8:	4798      	blx	r3
 80086fa:	e763      	b.n	80085c4 <indev_proc_release+0x44>
            lv_group_t * g = lv_obj_get_group(proc->act_obj);
 80086fc:	6960      	ldr	r0, [r4, #20]
 80086fe:	f001 faa3 	bl	8009c48 <lv_obj_get_group>
            lv_obj_t * parent = proc->act_obj;
 8008702:	6965      	ldr	r5, [r4, #20]
            while(g == NULL) {
 8008704:	b148      	cbz	r0, 800871a <indev_proc_release+0x19a>
 8008706:	e026      	b.n	8008756 <indev_proc_release+0x1d6>
                if(lv_obj_is_protected(parent, LV_PROTECT_CLICK_FOCUS)) {   /*Ignore is the protected against click focus*/
 8008708:	f001 fa90 	bl	8009c2c <lv_obj_is_protected>
 800870c:	2800      	cmp	r0, #0
 800870e:	f47f af7d 	bne.w	800860c <indev_proc_release+0x8c>
                g = lv_obj_get_group(parent);
 8008712:	4628      	mov	r0, r5
 8008714:	f001 fa98 	bl	8009c48 <lv_obj_get_group>
            while(g == NULL) {
 8008718:	bb00      	cbnz	r0, 800875c <indev_proc_release+0x1dc>
                parent = lv_obj_get_parent(parent);
 800871a:	4628      	mov	r0, r5
 800871c:	f001 f8bc 	bl	8009898 <lv_obj_get_parent>
                if(lv_obj_is_protected(parent, LV_PROTECT_CLICK_FOCUS)) {   /*Ignore is the protected against click focus*/
 8008720:	2120      	movs	r1, #32
                if(parent == NULL) break;
 8008722:	4605      	mov	r5, r0
 8008724:	2800      	cmp	r0, #0
 8008726:	d1ef      	bne.n	8008708 <indev_proc_release+0x188>
 8008728:	e770      	b.n	800860c <indev_proc_release+0x8c>
            lv_group_set_editing(act_g, false);
 800872a:	4629      	mov	r1, r5
 800872c:	4630      	mov	r0, r6
 800872e:	f7ff fd0b 	bl	8008148 <lv_group_set_editing>
 8008732:	e765      	b.n	8008600 <indev_proc_release+0x80>
            if(obj_on == proc->act_obj) proc->act_obj->signal_func(proc->act_obj, LV_SIGNAL_RELEASED, indev_act);
 8008734:	4d13      	ldr	r5, [pc, #76]	; (8008784 <indev_proc_release+0x204>)
 8008736:	210b      	movs	r1, #11
 8008738:	6983      	ldr	r3, [r0, #24]
 800873a:	682a      	ldr	r2, [r5, #0]
 800873c:	4798      	blx	r3
 800873e:	e73c      	b.n	80085ba <indev_proc_release+0x3a>

        }
    }
    /*If the vectors become 0 -> drag_in_prog = 0 and send a drag end signal*/
    else {
        state->drag_in_prog = 0;
 8008740:	7f26      	ldrb	r6, [r4, #28]
        drag_obj->signal_func(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8008742:	4628      	mov	r0, r5
 8008744:	4a0f      	ldr	r2, [pc, #60]	; (8008784 <indev_proc_release+0x204>)
 8008746:	210f      	movs	r1, #15
        state->drag_in_prog = 0;
 8008748:	f363 0641 	bfi	r6, r3, #1, #1
        drag_obj->signal_func(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 800874c:	6812      	ldr	r2, [r2, #0]
        state->drag_in_prog = 0;
 800874e:	7726      	strb	r6, [r4, #28]
        drag_obj->signal_func(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8008750:	69ab      	ldr	r3, [r5, #24]
 8008752:	4798      	blx	r3
 8008754:	e736      	b.n	80085c4 <indev_proc_release+0x44>
            if(g != NULL && parent != NULL)
 8008756:	2d00      	cmp	r5, #0
 8008758:	f43f af58 	beq.w	800860c <indev_proc_release+0x8c>
                if(lv_group_get_click_focus(g)) {
 800875c:	f7ff fd6a 	bl	8008234 <lv_group_get_click_focus>
 8008760:	2800      	cmp	r0, #0
 8008762:	f43f af53 	beq.w	800860c <indev_proc_release+0x8c>
                    lv_group_focus_obj(parent);
 8008766:	4628      	mov	r0, r5
 8008768:	f7ff fd08 	bl	800817c <lv_group_focus_obj>
 800876c:	e74e      	b.n	800860c <indev_proc_release+0x8c>
 800876e:	69a5      	ldr	r5, [r4, #24]
    if(proc->last_obj != NULL && proc->reset_query == 0) {
 8008770:	2d00      	cmp	r5, #0
 8008772:	f43f af27 	beq.w	80085c4 <indev_proc_release+0x44>
 8008776:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800877a:	0792      	lsls	r2, r2, #30
 800877c:	f57f af52 	bpl.w	8008624 <indev_proc_release+0xa4>
}
 8008780:	b004      	add	sp, #16
 8008782:	bd70      	pop	{r4, r5, r6, pc}
 8008784:	20000a78 	.word	0x20000a78
 8008788:	51eb851f 	.word	0x51eb851f

0800878c <lv_indev_reset.part.3>:
void lv_indev_reset(lv_indev_t * indev)
 800878c:	b508      	push	{r3, lr}
        lv_indev_t * i = lv_indev_next(NULL);
 800878e:	2000      	movs	r0, #0
 8008790:	f006 ff3c 	bl	800f60c <lv_indev_next>
        while(i) {
 8008794:	b160      	cbz	r0, 80087b0 <lv_indev_reset.part.3+0x24>
 8008796:	4603      	mov	r3, r0
            i->proc.reset_query = 1;
 8008798:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
            i = lv_indev_next(i);
 800879c:	4618      	mov	r0, r3
            i->proc.reset_query = 1;
 800879e:	f042 0202 	orr.w	r2, r2, #2
 80087a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            i = lv_indev_next(i);
 80087a6:	f006 ff31 	bl	800f60c <lv_indev_next>
        while(i) {
 80087aa:	4603      	mov	r3, r0
 80087ac:	2800      	cmp	r0, #0
 80087ae:	d1f3      	bne.n	8008798 <lv_indev_reset.part.3+0xc>
 80087b0:	bd08      	pop	{r3, pc}
 80087b2:	bf00      	nop

080087b4 <indev_proc_task>:
{
 80087b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    i = lv_indev_next(NULL);
 80087b8:	2000      	movs	r0, #0
{
 80087ba:	b084      	sub	sp, #16
    i = lv_indev_next(NULL);
 80087bc:	f006 ff26 	bl	800f60c <lv_indev_next>
    while(i) {
 80087c0:	2800      	cmp	r0, #0
 80087c2:	f000 8208 	beq.w	8008bd6 <indev_proc_task+0x422>
 80087c6:	4604      	mov	r4, r0
 80087c8:	4fba      	ldr	r7, [pc, #744]	; (8008ab4 <indev_proc_task+0x300>)
        indev->proc.act_obj = NULL;
 80087ca:	2500      	movs	r5, #0
    if(indev->proc.reset_query) {
 80087cc:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
        indev_act = i;
 80087d0:	603c      	str	r4, [r7, #0]
    if(indev->proc.reset_query) {
 80087d2:	0798      	lsls	r0, r3, #30
 80087d4:	f100 80d2 	bmi.w	800897c <indev_proc_task+0x1c8>
        if(i->proc.disabled == 0) {
 80087d8:	0759      	lsls	r1, r3, #29
 80087da:	d420      	bmi.n	800881e <indev_proc_task+0x6a>
        indev_proc_release(&i->proc);
 80087dc:	f104 060c 	add.w	r6, r4, #12
                more_to_read = lv_indev_read(i, &data);
 80087e0:	a901      	add	r1, sp, #4
 80087e2:	4620      	mov	r0, r4
 80087e4:	f006 ff1a 	bl	800f61c <lv_indev_read>
    if(indev->proc.reset_query) {
 80087e8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
                more_to_read = lv_indev_read(i, &data);
 80087ec:	4680      	mov	r8, r0
    if(indev->proc.reset_query) {
 80087ee:	079a      	lsls	r2, r3, #30
 80087f0:	d43a      	bmi.n	8008868 <indev_proc_task+0xb4>
                i->proc.state = data.state;
 80087f2:	f89d 300c 	ldrb.w	r3, [sp, #12]
                if(i->proc.state == LV_INDEV_STATE_PR) {
 80087f6:	2b01      	cmp	r3, #1
                i->proc.state = data.state;
 80087f8:	7323      	strb	r3, [r4, #12]
                if(i->proc.state == LV_INDEV_STATE_PR) {
 80087fa:	d04e      	beq.n	800889a <indev_proc_task+0xe6>
                if(i->driver.type == LV_INDEV_TYPE_POINTER) {
 80087fc:	7823      	ldrb	r3, [r4, #0]
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d051      	beq.n	80088a6 <indev_proc_task+0xf2>
                } else if(i->driver.type == LV_INDEV_TYPE_KEYPAD) {
 8008802:	2b02      	cmp	r3, #2
 8008804:	d06f      	beq.n	80088e6 <indev_proc_task+0x132>
                } else if(i->driver.type == LV_INDEV_TYPE_ENCODER) {
 8008806:	2b04      	cmp	r3, #4
 8008808:	d07f      	beq.n	800890a <indev_proc_task+0x156>
                } else if(i->driver.type == LV_INDEV_TYPE_BUTTON) {
 800880a:	2b03      	cmp	r3, #3
 800880c:	f000 8099 	beq.w	8008942 <indev_proc_task+0x18e>
 8008810:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    if(indev->proc.reset_query) {
 8008814:	079b      	lsls	r3, r3, #30
 8008816:	d40d      	bmi.n	8008834 <indev_proc_task+0x80>
            } while(more_to_read);
 8008818:	f1b8 0f00 	cmp.w	r8, #0
 800881c:	d1e0      	bne.n	80087e0 <indev_proc_task+0x2c>
        i = lv_indev_next(i);    /*Go to the next indev*/
 800881e:	4620      	mov	r0, r4
 8008820:	f006 fef4 	bl	800f60c <lv_indev_next>
    while(i) {
 8008824:	4604      	mov	r4, r0
 8008826:	2800      	cmp	r0, #0
 8008828:	d1d0      	bne.n	80087cc <indev_proc_task+0x18>
    indev_act = NULL;   /*End of indev processing, so no act indev*/
 800882a:	2300      	movs	r3, #0
 800882c:	603b      	str	r3, [r7, #0]
}
 800882e:	b004      	add	sp, #16
 8008830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        indev->proc.drag_range_out = 0;
 8008834:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
        indev->proc.long_pr_sent = 0;
 8008838:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
        indev->proc.drag_in_prog = 0;
 800883c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
        indev->proc.act_obj = NULL;
 8008840:	6225      	str	r5, [r4, #32]
        indev->proc.reset_query = 0;
 8008842:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
        indev->proc.last_obj = NULL;
 8008846:	6265      	str	r5, [r4, #36]	; 0x24
        indev->proc.drag_in_prog = 0;
 8008848:	f365 0241 	bfi	r2, r5, #1, #1
        indev->proc.pr_timestamp = 0;
 800884c:	62e5      	str	r5, [r4, #44]	; 0x2c
        indev->proc.reset_query = 0;
 800884e:	f365 0341 	bfi	r3, r5, #1, #1
        indev->proc.longpr_rep_timestamp = 0;
 8008852:	6325      	str	r5, [r4, #48]	; 0x30
        indev->proc.drag_sum.x = 0;
 8008854:	83a5      	strh	r5, [r4, #28]
        indev->proc.drag_sum.y = 0;
 8008856:	83e5      	strh	r5, [r4, #30]
        indev->proc.drag_in_prog = 0;
 8008858:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        indev->proc.reset_query = 0;
 800885c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            } while(more_to_read);
 8008860:	f1b8 0f00 	cmp.w	r8, #0
 8008864:	d1bc      	bne.n	80087e0 <indev_proc_task+0x2c>
 8008866:	e7da      	b.n	800881e <indev_proc_task+0x6a>
        indev->proc.reset_query = 0;
 8008868:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
        indev->proc.drag_range_out = 0;
 800886c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
        indev->proc.act_obj = NULL;
 8008870:	6225      	str	r5, [r4, #32]
        indev->proc.reset_query = 0;
 8008872:	f365 0341 	bfi	r3, r5, #1, #1
        indev->proc.drag_in_prog = 0;
 8008876:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
        indev->proc.last_obj = NULL;
 800887a:	6265      	str	r5, [r4, #36]	; 0x24
        indev->proc.reset_query = 0;
 800887c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        indev->proc.drag_in_prog = 0;
 8008880:	f365 0241 	bfi	r2, r5, #1, #1
                i->proc.state = data.state;
 8008884:	f89d 300c 	ldrb.w	r3, [sp, #12]
        indev->proc.pr_timestamp = 0;
 8008888:	62e5      	str	r5, [r4, #44]	; 0x2c
                if(i->proc.state == LV_INDEV_STATE_PR) {
 800888a:	2b01      	cmp	r3, #1
        indev->proc.longpr_rep_timestamp = 0;
 800888c:	6325      	str	r5, [r4, #48]	; 0x30
        indev->proc.drag_sum.x = 0;
 800888e:	83a5      	strh	r5, [r4, #28]
        indev->proc.drag_sum.y = 0;
 8008890:	83e5      	strh	r5, [r4, #30]
        indev->proc.drag_in_prog = 0;
 8008892:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
                i->proc.state = data.state;
 8008896:	7323      	strb	r3, [r4, #12]
                if(i->proc.state == LV_INDEV_STATE_PR) {
 8008898:	d1b0      	bne.n	80087fc <indev_proc_task+0x48>
                    i->last_activity_time = lv_tick_get();
 800889a:	f006 fed7 	bl	800f64c <lv_tick_get>
                if(i->driver.type == LV_INDEV_TYPE_POINTER) {
 800889e:	7823      	ldrb	r3, [r4, #0]
                    i->last_activity_time = lv_tick_get();
 80088a0:	63e0      	str	r0, [r4, #60]	; 0x3c
                if(i->driver.type == LV_INDEV_TYPE_POINTER) {
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d1ad      	bne.n	8008802 <indev_proc_task+0x4e>
    if(i->cursor != NULL &&
 80088a6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80088a8:	b148      	cbz	r0, 80088be <indev_proc_task+0x10a>
 80088aa:	6962      	ldr	r2, [r4, #20]
 80088ac:	9b01      	ldr	r3, [sp, #4]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d005      	beq.n	80088be <indev_proc_task+0x10a>
        lv_obj_set_pos(i->cursor, data->point.x, data->point.y);
 80088b2:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 80088b6:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 80088ba:	f000 fb6b 	bl	8008f94 <lv_obj_set_pos>
    if(i->proc.state == LV_INDEV_STATE_PR) {
 80088be:	7b23      	ldrb	r3, [r4, #12]
        indev_proc_press(&i->proc);
 80088c0:	4630      	mov	r0, r6
    i->proc.act_point.x = data->point.x;
 80088c2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    i->proc.act_point.y = data->point.y;
 80088c6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    if(i->proc.state == LV_INDEV_STATE_PR) {
 80088ca:	2b01      	cmp	r3, #1
    i->proc.act_point.x = data->point.x;
 80088cc:	8221      	strh	r1, [r4, #16]
    i->proc.act_point.y = data->point.y;
 80088ce:	8262      	strh	r2, [r4, #18]
    if(i->proc.state == LV_INDEV_STATE_PR) {
 80088d0:	f000 8092 	beq.w	80089f8 <indev_proc_task+0x244>
        indev_proc_release(&i->proc);
 80088d4:	f7ff fe54 	bl	8008580 <indev_proc_release>
    i->proc.last_point.y = i->proc.act_point.y;
 80088d8:	8a63      	ldrh	r3, [r4, #18]
    i->proc.last_point.x = i->proc.act_point.x;
 80088da:	8a22      	ldrh	r2, [r4, #16]
    i->proc.last_point.y = i->proc.act_point.y;
 80088dc:	82e3      	strh	r3, [r4, #22]
    i->proc.last_point.x = i->proc.act_point.x;
 80088de:	82a2      	strh	r2, [r4, #20]
 80088e0:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80088e4:	e796      	b.n	8008814 <indev_proc_task+0x60>
    if(i->group == NULL) return;
 80088e6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80088e8:	2800      	cmp	r0, #0
 80088ea:	d091      	beq.n	8008810 <indev_proc_task+0x5c>
    if(data->state == LV_INDEV_STATE_PR &&
 80088ec:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80088f0:	2a01      	cmp	r2, #1
 80088f2:	d059      	beq.n	80089a8 <indev_proc_task+0x1f4>
    else if(data->state == LV_INDEV_STATE_REL && i->proc.last_state == LV_INDEV_STATE_PR) {
 80088f4:	b91a      	cbnz	r2, 80088fe <indev_proc_task+0x14a>
 80088f6:	7c23      	ldrb	r3, [r4, #16]
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	f000 80eb 	beq.w	8008ad4 <indev_proc_task+0x320>
 80088fe:	9901      	ldr	r1, [sp, #4]
 8008900:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    i->proc.last_state = data->state;
 8008904:	7422      	strb	r2, [r4, #16]
    i->proc.last_key = data->key;
 8008906:	6161      	str	r1, [r4, #20]
 8008908:	e784      	b.n	8008814 <indev_proc_task+0x60>
    if(i->group == NULL) return;
 800890a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800890c:	2800      	cmp	r0, #0
 800890e:	f43f af7f 	beq.w	8008810 <indev_proc_task+0x5c>
    if(data->state == LV_INDEV_STATE_REL) {
 8008912:	f89d 900c 	ldrb.w	r9, [sp, #12]
 8008916:	f1b9 0f00 	cmp.w	r9, #0
 800891a:	d070      	beq.n	80089fe <indev_proc_task+0x24a>
    if(data->state == LV_INDEV_STATE_PR &&
 800891c:	f1b9 0f01 	cmp.w	r9, #1
 8008920:	d108      	bne.n	8008934 <indev_proc_task+0x180>
            i->proc.last_state == LV_INDEV_STATE_REL) {
 8008922:	7c22      	ldrb	r2, [r4, #16]
    if(data->state == LV_INDEV_STATE_PR &&
 8008924:	2a00      	cmp	r2, #0
 8008926:	f000 810b 	beq.w	8008b40 <indev_proc_task+0x38c>
    else if(data->state == LV_INDEV_STATE_PR && i->proc.last_state == LV_INDEV_STATE_PR) {
 800892a:	2a01      	cmp	r2, #1
 800892c:	f000 8110 	beq.w	8008b50 <indev_proc_task+0x39c>
 8008930:	f04f 0901 	mov.w	r9, #1
 8008934:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    i->proc.last_key = data->key;
 8008938:	9a01      	ldr	r2, [sp, #4]
    i->proc.last_state = data->state;
 800893a:	f884 9010 	strb.w	r9, [r4, #16]
    i->proc.last_key = data->key;
 800893e:	6162      	str	r2, [r4, #20]
 8008940:	e768      	b.n	8008814 <indev_proc_task+0x60>
    i->proc.act_point.x = i->btn_points[data->btn].x;
 8008942:	9901      	ldr	r1, [sp, #4]
 8008944:	6c23      	ldr	r3, [r4, #64]	; 0x40
    if(i->proc.last_point.x == i->proc.act_point.x &&
 8008946:	6962      	ldr	r2, [r4, #20]
    i->proc.act_point.x = i->btn_points[data->btn].x;
 8008948:	f933 0021 	ldrsh.w	r0, [r3, r1, lsl #2]
 800894c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8008950:	8220      	strh	r0, [r4, #16]
        indev_proc_press(&i->proc);
 8008952:	4630      	mov	r0, r6
    i->proc.act_point.y = i->btn_points[data->btn].y;
 8008954:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008958:	8263      	strh	r3, [r4, #18]
    if(i->proc.last_point.x == i->proc.act_point.x &&
 800895a:	6923      	ldr	r3, [r4, #16]
 800895c:	429a      	cmp	r2, r3
 800895e:	d104      	bne.n	800896a <indev_proc_task+0x1b6>
            i->proc.last_point.y == i->proc.act_point.y &&
 8008960:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8008964:	2b01      	cmp	r3, #1
 8008966:	f000 80fa 	beq.w	8008b5e <indev_proc_task+0x3aa>
        indev_proc_release(&i->proc);
 800896a:	f7ff fe09 	bl	8008580 <indev_proc_release>
    i->proc.last_point.x = i->proc.act_point.x;
 800896e:	8a21      	ldrh	r1, [r4, #16]
    i->proc.last_point.y = i->proc.act_point.y;
 8008970:	8a62      	ldrh	r2, [r4, #18]
 8008972:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    i->proc.last_point.x = i->proc.act_point.x;
 8008976:	82a1      	strh	r1, [r4, #20]
    i->proc.last_point.y = i->proc.act_point.y;
 8008978:	82e2      	strh	r2, [r4, #22]
 800897a:	e74b      	b.n	8008814 <indev_proc_task+0x60>
        indev->proc.drag_range_out = 0;
 800897c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
        indev->proc.reset_query = 0;
 8008980:	f003 01fe 	and.w	r1, r3, #254	; 0xfe
        indev->proc.act_obj = NULL;
 8008984:	6225      	str	r5, [r4, #32]
        indev->proc.drag_in_prog = 0;
 8008986:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
        indev->proc.reset_query = 0;
 800898a:	f365 0141 	bfi	r1, r5, #1, #1
        indev->proc.last_obj = NULL;
 800898e:	6265      	str	r5, [r4, #36]	; 0x24
        indev->proc.drag_in_prog = 0;
 8008990:	f365 0241 	bfi	r2, r5, #1, #1
 8008994:	b2cb      	uxtb	r3, r1
        indev->proc.reset_query = 0;
 8008996:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
        indev->proc.pr_timestamp = 0;
 800899a:	62e5      	str	r5, [r4, #44]	; 0x2c
        indev->proc.longpr_rep_timestamp = 0;
 800899c:	6325      	str	r5, [r4, #48]	; 0x30
        indev->proc.drag_sum.x = 0;
 800899e:	83a5      	strh	r5, [r4, #28]
        indev->proc.drag_sum.y = 0;
 80089a0:	83e5      	strh	r5, [r4, #30]
        indev->proc.drag_in_prog = 0;
 80089a2:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
 80089a6:	e717      	b.n	80087d8 <indev_proc_task+0x24>
            i->proc.last_state == LV_INDEV_STATE_REL) {
 80089a8:	7c23      	ldrb	r3, [r4, #16]
    if(data->state == LV_INDEV_STATE_PR &&
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f000 80b8 	beq.w	8008b20 <indev_proc_task+0x36c>
    else if(data->state == LV_INDEV_STATE_PR && i->proc.last_state == LV_INDEV_STATE_PR) {
 80089b0:	2b01      	cmp	r3, #1
        if(data->key == LV_GROUP_KEY_ENTER &&
 80089b2:	9901      	ldr	r1, [sp, #4]
    else if(data->state == LV_INDEV_STATE_PR && i->proc.last_state == LV_INDEV_STATE_PR) {
 80089b4:	d1a4      	bne.n	8008900 <indev_proc_task+0x14c>
        if(data->key == LV_GROUP_KEY_ENTER &&
 80089b6:	290a      	cmp	r1, #10
                i->proc.long_pr_sent == 0 &&
 80089b8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
        if(data->key == LV_GROUP_KEY_ENTER &&
 80089bc:	d1a2      	bne.n	8008904 <indev_proc_task+0x150>
 80089be:	07d8      	lsls	r0, r3, #31
 80089c0:	d4a0      	bmi.n	8008904 <indev_proc_task+0x150>
                lv_tick_elaps(i->proc.pr_timestamp) > LV_INDEV_LONG_PRESS_TIME) {
 80089c2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80089c4:	f006 fe4c 	bl	800f660 <lv_tick_elaps>
                i->proc.long_pr_sent == 0 &&
 80089c8:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 80089cc:	f240 80fd 	bls.w	8008bca <indev_proc_task+0x416>
            lv_obj_t * focused = lv_group_get_focused(i->group);
 80089d0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80089d2:	f7ff fc23 	bl	800821c <lv_group_get_focused>
            if(focused) {
 80089d6:	2800      	cmp	r0, #0
 80089d8:	f000 80f7 	beq.w	8008bca <indev_proc_task+0x416>
                focused->signal_func(focused, LV_SIGNAL_LONG_PRESS, indev_act);
 80089dc:	6983      	ldr	r3, [r0, #24]
 80089de:	210c      	movs	r1, #12
 80089e0:	683a      	ldr	r2, [r7, #0]
 80089e2:	4798      	blx	r3
                i->proc.long_pr_sent = 1;
 80089e4:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80089e8:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80089ec:	f043 0301 	orr.w	r3, r3, #1
 80089f0:	9901      	ldr	r1, [sp, #4]
 80089f2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80089f6:	e785      	b.n	8008904 <indev_proc_task+0x150>
        indev_proc_press(&i->proc);
 80089f8:	f7ff fc54 	bl	80082a4 <indev_proc_press>
 80089fc:	e76c      	b.n	80088d8 <indev_proc_task+0x124>
        if(lv_group_get_editing(i->group)) {
 80089fe:	f7ff fc13 	bl	8008228 <lv_group_get_editing>
            if(data->enc_diff < 0) {
 8008a02:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
        if(lv_group_get_editing(i->group)) {
 8008a06:	2800      	cmp	r0, #0
 8008a08:	d056      	beq.n	8008ab8 <indev_proc_task+0x304>
            if(data->enc_diff < 0) {
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	db46      	blt.n	8008a9c <indev_proc_task+0x2e8>
                for(s = 0; s < data->enc_diff; s++) lv_group_send_data(i->group, LV_GROUP_KEY_RIGHT);
 8008a0e:	d009      	beq.n	8008a24 <indev_proc_task+0x270>
 8008a10:	2113      	movs	r1, #19
 8008a12:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008a14:	f7ff fb84 	bl	8008120 <lv_group_send_data>
 8008a18:	f109 0901 	add.w	r9, r9, #1
 8008a1c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8008a20:	4599      	cmp	r9, r3
 8008a22:	dbf5      	blt.n	8008a10 <indev_proc_task+0x25c>
    if(data->state == LV_INDEV_STATE_PR &&
 8008a24:	f89d 900c 	ldrb.w	r9, [sp, #12]
 8008a28:	f1b9 0f01 	cmp.w	r9, #1
 8008a2c:	f43f af79 	beq.w	8008922 <indev_proc_task+0x16e>
    else if(data->state == LV_INDEV_STATE_REL && i->proc.last_state == LV_INDEV_STATE_PR) {
 8008a30:	f1b9 0f00 	cmp.w	r9, #0
 8008a34:	f47f af7e 	bne.w	8008934 <indev_proc_task+0x180>
 8008a38:	7c23      	ldrb	r3, [r4, #16]
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	f47f af7a 	bne.w	8008934 <indev_proc_task+0x180>
        lv_obj_t * focused = lv_group_get_focused(i->group);
 8008a40:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008a42:	f7ff fbeb 	bl	800821c <lv_group_get_focused>
        bool editable = false;
 8008a46:	f88d 9003 	strb.w	r9, [sp, #3]
        if(focused) focused->signal_func(focused, LV_SIGNAL_GET_EDITABLE, &editable);
 8008a4a:	2800      	cmp	r0, #0
 8008a4c:	f000 80c5 	beq.w	8008bda <indev_proc_task+0x426>
 8008a50:	6983      	ldr	r3, [r0, #24]
 8008a52:	f10d 0203 	add.w	r2, sp, #3
 8008a56:	2114      	movs	r1, #20
 8008a58:	4798      	blx	r3
        if(!editable) {
 8008a5a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	f000 80bb 	beq.w	8008bda <indev_proc_task+0x426>
        else if(i->group->editing) {
 8008a64:	f8d4 9040 	ldr.w	r9, [r4, #64]	; 0x40
 8008a68:	f899 3064 	ldrb.w	r3, [r9, #100]	; 0x64
 8008a6c:	f013 0f02 	tst.w	r3, #2
            if(!i->proc.long_pr_sent || i->group->obj_ll.head == i->group->obj_ll.tail)
 8008a70:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
        else if(i->group->editing) {
 8008a74:	f040 808e 	bne.w	8008b94 <indev_proc_task+0x3e0>
        else if(editable && !i->group->editing && !i->proc.long_pr_sent) {
 8008a78:	07da      	lsls	r2, r3, #31
 8008a7a:	f140 80ee 	bpl.w	8008c5a <indev_proc_task+0x4a6>
        if(i->proc.reset_query) return;     /*The object might be deleted in `focus_cb` or due to any other user event*/
 8008a7e:	f013 0302 	ands.w	r3, r3, #2
 8008a82:	f47f aed7 	bne.w	8008834 <indev_proc_task+0x80>
        i->proc.long_pr_sent = 0;
 8008a86:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
        i->proc.pr_timestamp = 0;
 8008a8a:	62e3      	str	r3, [r4, #44]	; 0x2c
        i->proc.long_pr_sent = 0;
 8008a8c:	f363 0200 	bfi	r2, r3, #0, #1
 8008a90:	f89d 900c 	ldrb.w	r9, [sp, #12]
 8008a94:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
 8008a98:	b2d3      	uxtb	r3, r2
 8008a9a:	e74d      	b.n	8008938 <indev_proc_task+0x184>
                for(s = 0; s < -data->enc_diff; s++) lv_group_send_data(i->group, LV_GROUP_KEY_LEFT);
 8008a9c:	2114      	movs	r1, #20
 8008a9e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008aa0:	f7ff fb3e 	bl	8008120 <lv_group_send_data>
 8008aa4:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8008aa8:	f109 0901 	add.w	r9, r9, #1
 8008aac:	425b      	negs	r3, r3
 8008aae:	4599      	cmp	r9, r3
 8008ab0:	dbf4      	blt.n	8008a9c <indev_proc_task+0x2e8>
 8008ab2:	e7b7      	b.n	8008a24 <indev_proc_task+0x270>
 8008ab4:	20000a78 	.word	0x20000a78
            if(data->enc_diff < 0) {
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	db5f      	blt.n	8008b7c <indev_proc_task+0x3c8>
                for(s = 0; s < data->enc_diff; s++) lv_group_focus_next(i->group);
 8008abc:	d0b2      	beq.n	8008a24 <indev_proc_task+0x270>
 8008abe:	4681      	mov	r9, r0
 8008ac0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008ac2:	f109 0901 	add.w	r9, r9, #1
 8008ac6:	f7ff fb1b 	bl	8008100 <lv_group_focus_next>
 8008aca:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8008ace:	4599      	cmp	r9, r3
 8008ad0:	dbf6      	blt.n	8008ac0 <indev_proc_task+0x30c>
 8008ad2:	e7a7      	b.n	8008a24 <indev_proc_task+0x270>
        data->key = i->proc.last_key;
 8008ad4:	6961      	ldr	r1, [r4, #20]
        if(data->key == LV_GROUP_KEY_NEXT || data->key == LV_GROUP_KEY_PREV) {
 8008ad6:	f021 0302 	bic.w	r3, r1, #2
        data->key = i->proc.last_key;
 8008ada:	9101      	str	r1, [sp, #4]
        if(data->key == LV_GROUP_KEY_NEXT || data->key == LV_GROUP_KEY_PREV) {
 8008adc:	2b09      	cmp	r3, #9
 8008ade:	d041      	beq.n	8008b64 <indev_proc_task+0x3b0>
        if(data->key == LV_GROUP_KEY_NEXT) {
 8008ae0:	2909      	cmp	r1, #9
 8008ae2:	d045      	beq.n	8008b70 <indev_proc_task+0x3bc>
        } else if(data->key == LV_GROUP_KEY_PREV) {
 8008ae4:	290b      	cmp	r1, #11
 8008ae6:	d07f      	beq.n	8008be8 <indev_proc_task+0x434>
        } else if(data->key == LV_GROUP_KEY_ENTER) {
 8008ae8:	290a      	cmp	r1, #10
 8008aea:	d014      	beq.n	8008b16 <indev_proc_task+0x362>
            lv_group_send_data(i->group, data->key);
 8008aec:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008aee:	f7ff fb17 	bl	8008120 <lv_group_send_data>
 8008af2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
        if(i->proc.reset_query) return;     /*The object might be deleted in `focus_cb` or due to any other user event*/
 8008af6:	f013 0302 	ands.w	r3, r3, #2
 8008afa:	f47f ae9b 	bne.w	8008834 <indev_proc_task+0x80>
        i->proc.long_pr_sent = 0;
 8008afe:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
        i->proc.pr_timestamp = 0;
 8008b02:	62e3      	str	r3, [r4, #44]	; 0x2c
        i->proc.long_pr_sent = 0;
 8008b04:	f363 0000 	bfi	r0, r3, #0, #1
 8008b08:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8008b0c:	9901      	ldr	r1, [sp, #4]
 8008b0e:	b2c3      	uxtb	r3, r0
 8008b10:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
 8008b14:	e6f6      	b.n	8008904 <indev_proc_task+0x150>
            if(!i->proc.long_pr_sent) {
 8008b16:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008b1a:	07d8      	lsls	r0, r3, #31
 8008b1c:	d4eb      	bmi.n	8008af6 <indev_proc_task+0x342>
 8008b1e:	e7e5      	b.n	8008aec <indev_proc_task+0x338>
        i->proc.pr_timestamp = lv_tick_get();
 8008b20:	f006 fd94 	bl	800f64c <lv_tick_get>
 8008b24:	62e0      	str	r0, [r4, #44]	; 0x2c
        lv_obj_t * focused = lv_group_get_focused(i->group);
 8008b26:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008b28:	f7ff fb78 	bl	800821c <lv_group_get_focused>
        if(focused && data->key == LV_GROUP_KEY_ENTER) {
 8008b2c:	2800      	cmp	r0, #0
 8008b2e:	d04c      	beq.n	8008bca <indev_proc_task+0x416>
 8008b30:	9901      	ldr	r1, [sp, #4]
 8008b32:	290a      	cmp	r1, #10
 8008b34:	d05e      	beq.n	8008bf4 <indev_proc_task+0x440>
 8008b36:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8008b3a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008b3e:	e6e1      	b.n	8008904 <indev_proc_task+0x150>
        i->proc.pr_timestamp = lv_tick_get();
 8008b40:	f006 fd84 	bl	800f64c <lv_tick_get>
 8008b44:	f89d 900c 	ldrb.w	r9, [sp, #12]
 8008b48:	62e0      	str	r0, [r4, #44]	; 0x2c
 8008b4a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008b4e:	e6f3      	b.n	8008938 <indev_proc_task+0x184>
        if(i->proc.long_pr_sent == 0 &&
 8008b50:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008b54:	f013 0901 	ands.w	r9, r3, #1
 8008b58:	d02c      	beq.n	8008bb4 <indev_proc_task+0x400>
 8008b5a:	4691      	mov	r9, r2
 8008b5c:	e6ec      	b.n	8008938 <indev_proc_task+0x184>
        indev_proc_press(&i->proc);
 8008b5e:	f7ff fba1 	bl	80082a4 <indev_proc_press>
 8008b62:	e704      	b.n	800896e <indev_proc_task+0x1ba>
            lv_group_set_editing(i->group, false);
 8008b64:	4611      	mov	r1, r2
 8008b66:	f7ff faef 	bl	8008148 <lv_group_set_editing>
 8008b6a:	9901      	ldr	r1, [sp, #4]
        if(data->key == LV_GROUP_KEY_NEXT) {
 8008b6c:	2909      	cmp	r1, #9
 8008b6e:	d1b9      	bne.n	8008ae4 <indev_proc_task+0x330>
            lv_group_focus_next(i->group);
 8008b70:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008b72:	f7ff fac5 	bl	8008100 <lv_group_focus_next>
 8008b76:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008b7a:	e7bc      	b.n	8008af6 <indev_proc_task+0x342>
            if(data->enc_diff < 0) {
 8008b7c:	4681      	mov	r9, r0
                for(s = 0; s < -data->enc_diff; s++) lv_group_focus_prev(i->group);
 8008b7e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008b80:	f109 0901 	add.w	r9, r9, #1
 8008b84:	f7ff fac4 	bl	8008110 <lv_group_focus_prev>
 8008b88:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8008b8c:	425b      	negs	r3, r3
 8008b8e:	4599      	cmp	r9, r3
 8008b90:	dbf5      	blt.n	8008b7e <indev_proc_task+0x3ca>
 8008b92:	e747      	b.n	8008a24 <indev_proc_task+0x270>
            if(!i->proc.long_pr_sent || i->group->obj_ll.head == i->group->obj_ll.tail)
 8008b94:	07d9      	lsls	r1, r3, #31
 8008b96:	d506      	bpl.n	8008ba6 <indev_proc_task+0x3f2>
 8008b98:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008b9c:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8008ba0:	4291      	cmp	r1, r2
 8008ba2:	f47f af6c 	bne.w	8008a7e <indev_proc_task+0x2ca>
                lv_group_send_data(i->group, LV_GROUP_KEY_ENTER);  /*Ignore long pressed enter release because it comes from mode switch*/
 8008ba6:	4648      	mov	r0, r9
 8008ba8:	210a      	movs	r1, #10
 8008baa:	f7ff fab9 	bl	8008120 <lv_group_send_data>
 8008bae:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008bb2:	e764      	b.n	8008a7e <indev_proc_task+0x2ca>
                lv_tick_elaps(i->proc.pr_timestamp) > LV_INDEV_LONG_PRESS_TIME) {
 8008bb4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008bb6:	f006 fd53 	bl	800f660 <lv_tick_elaps>
        if(i->proc.long_pr_sent == 0 &&
 8008bba:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 8008bbe:	d823      	bhi.n	8008c08 <indev_proc_task+0x454>
 8008bc0:	f89d 900c 	ldrb.w	r9, [sp, #12]
 8008bc4:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008bc8:	e6b6      	b.n	8008938 <indev_proc_task+0x184>
 8008bca:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8008bce:	9901      	ldr	r1, [sp, #4]
 8008bd0:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008bd4:	e696      	b.n	8008904 <indev_proc_task+0x150>
 8008bd6:	4f2a      	ldr	r7, [pc, #168]	; (8008c80 <indev_proc_task+0x4cc>)
 8008bd8:	e627      	b.n	800882a <indev_proc_task+0x76>
            lv_group_send_data(i->group, LV_GROUP_KEY_ENTER);
 8008bda:	210a      	movs	r1, #10
 8008bdc:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008bde:	f7ff fa9f 	bl	8008120 <lv_group_send_data>
 8008be2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008be6:	e74a      	b.n	8008a7e <indev_proc_task+0x2ca>
            lv_group_focus_prev(i->group);
 8008be8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008bea:	f7ff fa91 	bl	8008110 <lv_group_focus_prev>
 8008bee:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008bf2:	e780      	b.n	8008af6 <indev_proc_task+0x342>
            focused->signal_func(focused, LV_SIGNAL_PRESSED, indev_act);
 8008bf4:	6983      	ldr	r3, [r0, #24]
 8008bf6:	2108      	movs	r1, #8
 8008bf8:	683a      	ldr	r2, [r7, #0]
 8008bfa:	4798      	blx	r3
 8008bfc:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8008c00:	9901      	ldr	r1, [sp, #4]
 8008c02:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008c06:	e67d      	b.n	8008904 <indev_proc_task+0x150>
            lv_obj_t * focused = lv_group_get_focused(i->group);
 8008c08:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008c0a:	f7ff fb07 	bl	800821c <lv_group_get_focused>
            bool editable = false;
 8008c0e:	f88d 9003 	strb.w	r9, [sp, #3]
            if(focused) focused->signal_func(focused, LV_SIGNAL_GET_EDITABLE, &editable);
 8008c12:	4681      	mov	r9, r0
 8008c14:	b1c0      	cbz	r0, 8008c48 <indev_proc_task+0x494>
 8008c16:	6983      	ldr	r3, [r0, #24]
 8008c18:	f10d 0203 	add.w	r2, sp, #3
 8008c1c:	2114      	movs	r1, #20
 8008c1e:	4798      	blx	r3
            if(editable) {
 8008c20:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008c24:	b32b      	cbz	r3, 8008c72 <indev_proc_task+0x4be>
                if(i->group->obj_ll.head != i->group->obj_ll.tail)
 8008c26:	f8d4 a040 	ldr.w	sl, [r4, #64]	; 0x40
 8008c2a:	f8da 2004 	ldr.w	r2, [sl, #4]
 8008c2e:	f8da 3008 	ldr.w	r3, [sl, #8]
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d01d      	beq.n	8008c72 <indev_proc_task+0x4be>
                    lv_group_set_editing(i->group, lv_group_get_editing(i->group) ? false : true);  /*Toggle edit mode on long press*/
 8008c36:	4650      	mov	r0, sl
 8008c38:	f7ff faf6 	bl	8008228 <lv_group_get_editing>
 8008c3c:	f080 0101 	eor.w	r1, r0, #1
 8008c40:	4650      	mov	r0, sl
 8008c42:	b2c9      	uxtb	r1, r1
 8008c44:	f7ff fa80 	bl	8008148 <lv_group_set_editing>
            i->proc.long_pr_sent = 1;
 8008c48:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008c4c:	f89d 900c 	ldrb.w	r9, [sp, #12]
 8008c50:	f043 0301 	orr.w	r3, r3, #1
 8008c54:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8008c58:	e66e      	b.n	8008938 <indev_proc_task+0x184>
            lv_group_set_editing(i->group, lv_group_get_editing(i->group) ? false : true);  /*Toggle edit mode on long press*/
 8008c5a:	4648      	mov	r0, r9
 8008c5c:	f7ff fae4 	bl	8008228 <lv_group_get_editing>
 8008c60:	f080 0101 	eor.w	r1, r0, #1
 8008c64:	4648      	mov	r0, r9
 8008c66:	b2c9      	uxtb	r1, r1
 8008c68:	f7ff fa6e 	bl	8008148 <lv_group_set_editing>
 8008c6c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008c70:	e705      	b.n	8008a7e <indev_proc_task+0x2ca>
                    focused->signal_func(focused, LV_SIGNAL_LONG_PRESS, indev_act);
 8008c72:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8008c76:	4648      	mov	r0, r9
 8008c78:	683a      	ldr	r2, [r7, #0]
 8008c7a:	210c      	movs	r1, #12
 8008c7c:	4798      	blx	r3
 8008c7e:	e7e3      	b.n	8008c48 <indev_proc_task+0x494>
 8008c80:	20000a78 	.word	0x20000a78

08008c84 <lv_indev_init>:
{
 8008c84:	b508      	push	{r3, lr}
    lv_task_create(indev_proc_task, LV_INDEV_READ_PERIOD, LV_TASK_PRIO_MID, NULL);
 8008c86:	2203      	movs	r2, #3
 8008c88:	2300      	movs	r3, #0
 8008c8a:	2132      	movs	r1, #50	; 0x32
 8008c8c:	4803      	ldr	r0, [pc, #12]	; (8008c9c <lv_indev_init+0x18>)
 8008c8e:	f007 fb1b 	bl	80102c8 <lv_task_create>
}
 8008c92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008c96:	f7ff bd79 	b.w	800878c <lv_indev_reset.part.3>
 8008c9a:	bf00      	nop
 8008c9c:	080087b5 	.word	0x080087b5

08008ca0 <lv_indev_get_act>:
    return indev_act;
 8008ca0:	4b01      	ldr	r3, [pc, #4]	; (8008ca8 <lv_indev_get_act+0x8>)
}
 8008ca2:	6818      	ldr	r0, [r3, #0]
 8008ca4:	4770      	bx	lr
 8008ca6:	bf00      	nop
 8008ca8:	20000a78 	.word	0x20000a78

08008cac <lv_indev_get_type>:
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
 8008cac:	b100      	cbz	r0, 8008cb0 <lv_indev_get_type+0x4>
    return indev->driver.type;
 8008cae:	7800      	ldrb	r0, [r0, #0]
}
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop

08008cb4 <lv_indev_reset>:
    if(indev) indev->proc.reset_query = 1;
 8008cb4:	b130      	cbz	r0, 8008cc4 <lv_indev_reset+0x10>
 8008cb6:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8008cba:	f043 0302 	orr.w	r3, r3, #2
 8008cbe:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
 8008cc2:	4770      	bx	lr
 8008cc4:	f7ff bd62 	b.w	800878c <lv_indev_reset.part.3>

08008cc8 <lv_indev_reset_lpr>:
    indev->proc.long_pr_sent = 0;
 8008cc8:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8008ccc:	f36f 0300 	bfc	r3, #0, #1
{
 8008cd0:	b510      	push	{r4, lr}
 8008cd2:	4604      	mov	r4, r0
    indev->proc.long_pr_sent = 0;
 8008cd4:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    indev->proc.longpr_rep_timestamp = lv_tick_get();
 8008cd8:	f006 fcb8 	bl	800f64c <lv_tick_get>
 8008cdc:	6320      	str	r0, [r4, #48]	; 0x30
    indev->proc.pr_timestamp = lv_tick_get();
 8008cde:	f006 fcb5 	bl	800f64c <lv_tick_get>
 8008ce2:	62e0      	str	r0, [r4, #44]	; 0x2c
 8008ce4:	bd10      	pop	{r4, pc}
 8008ce6:	bf00      	nop

08008ce8 <lv_indev_get_point>:
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) {
 8008ce8:	7803      	ldrb	r3, [r0, #0]
 8008cea:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d106      	bne.n	8008d00 <lv_indev_get_point+0x18>
        point->x = indev->proc.act_point.x;
 8008cf2:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 8008cf6:	800b      	strh	r3, [r1, #0]
        point->y = indev->proc.act_point.y;
 8008cf8:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
 8008cfc:	804b      	strh	r3, [r1, #2]
 8008cfe:	4770      	bx	lr
        point->x = -1;
 8008d00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008d04:	800b      	strh	r3, [r1, #0]
        point->y = -1;
 8008d06:	804b      	strh	r3, [r1, #2]
 8008d08:	4770      	bx	lr
 8008d0a:	bf00      	nop

08008d0c <lv_indev_is_dragging>:
    if(indev == NULL) return false;
 8008d0c:	b150      	cbz	r0, 8008d24 <lv_indev_is_dragging+0x18>
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) return false;
 8008d0e:	7803      	ldrb	r3, [r0, #0]
 8008d10:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d104      	bne.n	8008d22 <lv_indev_is_dragging+0x16>
    return indev->proc.drag_in_prog == 0 ? false : true;
 8008d18:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
 8008d1c:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8008d20:	4770      	bx	lr
    if(indev == NULL) return false;
 8008d22:	2000      	movs	r0, #0
}
 8008d24:	4770      	bx	lr
 8008d26:	bf00      	nop

08008d28 <lv_indev_get_vect>:
    if(indev == NULL) {
 8008d28:	b158      	cbz	r0, 8008d42 <lv_indev_get_vect+0x1a>
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) {
 8008d2a:	7803      	ldrb	r3, [r0, #0]
 8008d2c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d106      	bne.n	8008d42 <lv_indev_get_vect+0x1a>
        point->x = indev->proc.vect.x;
 8008d34:	f9b0 3018 	ldrsh.w	r3, [r0, #24]
 8008d38:	800b      	strh	r3, [r1, #0]
        point->y = indev->proc.vect.y;
 8008d3a:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 8008d3e:	804b      	strh	r3, [r1, #2]
 8008d40:	4770      	bx	lr
        point->x = 0;
 8008d42:	2300      	movs	r3, #0
 8008d44:	800b      	strh	r3, [r1, #0]
        point->y = 0;
 8008d46:	804b      	strh	r3, [r1, #2]
        return;
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop

08008d4c <refresh_childen_position>:
 * @param obj pointer to an object which children will be repositioned
 * @param x_diff x coordinate shift
 * @param y_diff y coordinate shift
 */
static void refresh_childen_position(lv_obj_t * obj, lv_coord_t x_diff, lv_coord_t y_diff)
{
 8008d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    lv_obj_t * i;
    LL_READ(obj->child_ll, i) {
 8008d50:	1d06      	adds	r6, r0, #4
{
 8008d52:	4688      	mov	r8, r1
 8008d54:	4617      	mov	r7, r2
    LL_READ(obj->child_ll, i) {
 8008d56:	4630      	mov	r0, r6
 8008d58:	f007 f91e 	bl	800ff98 <lv_ll_get_head>
 8008d5c:	b1f8      	cbz	r0, 8008d9e <refresh_childen_position+0x52>
 8008d5e:	4604      	mov	r4, r0
 8008d60:	fa1f f988 	uxth.w	r9, r8
 8008d64:	b2bd      	uxth	r5, r7
        i->coords.x1 += x_diff;
 8008d66:	f8b4 c010 	ldrh.w	ip, [r4, #16]
        i->coords.y1 += y_diff;
        i->coords.x2 += x_diff;
        i->coords.y2 += y_diff;

        refresh_childen_position(i, x_diff, y_diff);
 8008d6a:	463a      	mov	r2, r7
        i->coords.y1 += y_diff;
 8008d6c:	f8b4 e012 	ldrh.w	lr, [r4, #18]
        refresh_childen_position(i, x_diff, y_diff);
 8008d70:	4641      	mov	r1, r8
        i->coords.x2 += x_diff;
 8008d72:	8aa0      	ldrh	r0, [r4, #20]
        i->coords.x1 += x_diff;
 8008d74:	44cc      	add	ip, r9
        i->coords.y2 += y_diff;
 8008d76:	8ae3      	ldrh	r3, [r4, #22]
        i->coords.y1 += y_diff;
 8008d78:	44ae      	add	lr, r5
        i->coords.x2 += x_diff;
 8008d7a:	4448      	add	r0, r9
        i->coords.x1 += x_diff;
 8008d7c:	f8a4 c010 	strh.w	ip, [r4, #16]
        i->coords.y2 += y_diff;
 8008d80:	442b      	add	r3, r5
        i->coords.y1 += y_diff;
 8008d82:	f8a4 e012 	strh.w	lr, [r4, #18]
        i->coords.x2 += x_diff;
 8008d86:	82a0      	strh	r0, [r4, #20]
        refresh_childen_position(i, x_diff, y_diff);
 8008d88:	4620      	mov	r0, r4
        i->coords.y2 += y_diff;
 8008d8a:	82e3      	strh	r3, [r4, #22]
        refresh_childen_position(i, x_diff, y_diff);
 8008d8c:	f7ff ffde 	bl	8008d4c <refresh_childen_position>
    LL_READ(obj->child_ll, i) {
 8008d90:	4621      	mov	r1, r4
 8008d92:	4630      	mov	r0, r6
 8008d94:	f007 f908 	bl	800ffa8 <lv_ll_get_next>
 8008d98:	4604      	mov	r4, r0
 8008d9a:	2800      	cmp	r0, #0
 8008d9c:	d1e3      	bne.n	8008d66 <refresh_childen_position+0x1a>
 8008d9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008da2:	bf00      	nop

08008da4 <delete_children>:
/**
 * Called by 'lv_obj_del' to delete the children objects
 * @param obj pointer to an object (all of its children will be deleted)
 */
static void delete_children(lv_obj_t * obj)
{
 8008da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_obj_t * i;
    lv_obj_t * i_next;
    i = lv_ll_get_head(&(obj->child_ll));
 8008da6:	1d07      	adds	r7, r0, #4
{
 8008da8:	4605      	mov	r5, r0
    i = lv_ll_get_head(&(obj->child_ll));
 8008daa:	4638      	mov	r0, r7
 8008dac:	f007 f8f4 	bl	800ff98 <lv_ll_get_head>

    /*Remove from the group; remove before transversing children so that 
     * the object still has access to all children during the 
     * LV_SIGNAL_DEFOCUS call*/
#if USE_LV_GROUP
    if(obj->group_p != NULL) lv_group_remove_obj(obj);
 8008db0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    i = lv_ll_get_head(&(obj->child_ll));
 8008db2:	4604      	mov	r4, r0
    if(obj->group_p != NULL) lv_group_remove_obj(obj);
 8008db4:	b113      	cbz	r3, 8008dbc <delete_children+0x18>
 8008db6:	4628      	mov	r0, r5
 8008db8:	f7ff f962 	bl	8008080 <lv_group_remove_obj>
#endif

    while(i != NULL) {
 8008dbc:	b154      	cbz	r4, 8008dd4 <delete_children+0x30>
        /*Get the next object before delete this*/
        i_next = lv_ll_get_next(&(obj->child_ll), i);
 8008dbe:	4621      	mov	r1, r4
 8008dc0:	4638      	mov	r0, r7
 8008dc2:	f007 f8f1 	bl	800ffa8 <lv_ll_get_next>
 8008dc6:	4606      	mov	r6, r0

        /*Call the recursive del to the child too*/
        delete_children(i);
 8008dc8:	4620      	mov	r0, r4
    while(i != NULL) {
 8008dca:	4634      	mov	r4, r6
        delete_children(i);
 8008dcc:	f7ff ffea 	bl	8008da4 <delete_children>
    while(i != NULL) {
 8008dd0:	2c00      	cmp	r4, #0
 8008dd2:	d1f4      	bne.n	8008dbe <delete_children+0x1a>
        i = i_next;
    }

    /*Remove the animations from this object*/
#if USE_LV_ANIMATION
    lv_anim_del(obj, NULL);
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	4628      	mov	r0, r5
 8008dd8:	f006 fcf8 	bl	800f7cc <lv_anim_del>
#endif


    /* Reset the input devices if
     * the currently pressed object is deleted*/
    lv_indev_t * indev = lv_indev_next(NULL);
 8008ddc:	2000      	movs	r0, #0
 8008dde:	f006 fc15 	bl	800f60c <lv_indev_next>
    while(indev) {
 8008de2:	4604      	mov	r4, r0
 8008de4:	b928      	cbnz	r0, 8008df2 <delete_children+0x4e>
 8008de6:	e013      	b.n	8008e10 <delete_children+0x6c>
        if(indev->proc.act_obj == obj || indev->proc.last_obj == obj) {
            lv_indev_reset(indev);
        }
        indev = lv_indev_next(indev);
 8008de8:	4620      	mov	r0, r4
 8008dea:	f006 fc0f 	bl	800f60c <lv_indev_next>
    while(indev) {
 8008dee:	4604      	mov	r4, r0
 8008df0:	b170      	cbz	r0, 8008e10 <delete_children+0x6c>
        if(indev->proc.act_obj == obj || indev->proc.last_obj == obj) {
 8008df2:	6a23      	ldr	r3, [r4, #32]
 8008df4:	429d      	cmp	r5, r3
 8008df6:	d002      	beq.n	8008dfe <delete_children+0x5a>
 8008df8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008dfa:	429d      	cmp	r5, r3
 8008dfc:	d1f4      	bne.n	8008de8 <delete_children+0x44>
            lv_indev_reset(indev);
 8008dfe:	4620      	mov	r0, r4
 8008e00:	f7ff ff58 	bl	8008cb4 <lv_indev_reset>
        indev = lv_indev_next(indev);
 8008e04:	4620      	mov	r0, r4
 8008e06:	f006 fc01 	bl	800f60c <lv_indev_next>
    while(indev) {
 8008e0a:	4604      	mov	r4, r0
 8008e0c:	2800      	cmp	r0, #0
 8008e0e:	d1f0      	bne.n	8008df2 <delete_children+0x4e>
    }

    /*Remove the object from parent's children list*/
    lv_obj_t * par = lv_obj_get_parent(obj);
    lv_ll_rem(&(par->child_ll), obj);
 8008e10:	6828      	ldr	r0, [r5, #0]
 8008e12:	4629      	mov	r1, r5
 8008e14:	3004      	adds	r0, #4
 8008e16:	f007 f853 	bl	800fec0 <lv_ll_rem>

    /* Clean up the object specific data*/
    obj->signal_func(obj, LV_SIGNAL_CLEANUP, NULL);
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	69ab      	ldr	r3, [r5, #24]
 8008e1e:	4628      	mov	r0, r5
 8008e20:	4611      	mov	r1, r2
 8008e22:	4798      	blx	r3

    /*Delete the base objects*/
    if(obj->ext_attr != NULL)  lv_mem_free(obj->ext_attr);
 8008e24:	6a28      	ldr	r0, [r5, #32]
 8008e26:	b108      	cbz	r0, 8008e2c <delete_children+0x88>
 8008e28:	f007 f92e 	bl	8010088 <lv_mem_free>
    lv_mem_free(obj); /*Free the object itself*/
 8008e2c:	4628      	mov	r0, r5

}
 8008e2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_mem_free(obj); /*Free the object itself*/
 8008e32:	f007 b929 	b.w	8010088 <lv_mem_free>
 8008e36:	bf00      	nop

08008e38 <lv_obj_invalidate>:
    return obj->hidden == 0 ? false : true;
 8008e38:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    if(lv_obj_get_hidden(obj)) return;
 8008e3c:	06da      	lsls	r2, r3, #27
 8008e3e:	d411      	bmi.n	8008e64 <lv_obj_invalidate+0x2c>
 8008e40:	4602      	mov	r2, r0
 8008e42:	e000      	b.n	8008e46 <lv_obj_invalidate+0xe>
    } while(par != NULL);
 8008e44:	461a      	mov	r2, r3
    return obj->par;
 8008e46:	6813      	ldr	r3, [r2, #0]
    } while(par != NULL);
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d1fb      	bne.n	8008e44 <lv_obj_invalidate+0xc>
    return LV_GC_ROOT(_lv_act_scr);
 8008e4c:	4b21      	ldr	r3, [pc, #132]	; (8008ed4 <lv_obj_invalidate+0x9c>)
    if(obj_scr == lv_scr_act() ||
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d008      	beq.n	8008e66 <lv_obj_invalidate+0x2e>
    return LV_GC_ROOT(_lv_top_layer);
 8008e54:	4b20      	ldr	r3, [pc, #128]	; (8008ed8 <lv_obj_invalidate+0xa0>)
    if(obj_scr == lv_scr_act() ||
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d004      	beq.n	8008e66 <lv_obj_invalidate+0x2e>
    return LV_GC_ROOT(_lv_sys_layer);
 8008e5c:	4b1f      	ldr	r3, [pc, #124]	; (8008edc <lv_obj_invalidate+0xa4>)
            obj_scr == lv_layer_top() ||
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d000      	beq.n	8008e66 <lv_obj_invalidate+0x2e>
 8008e64:	4770      	bx	lr
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    memcpy(dest, src, sizeof(lv_area_t));
 8008e66:	4601      	mov	r1, r0
 8008e68:	4603      	mov	r3, r0
        lv_coord_t ext_size = obj->ext_size;
 8008e6a:	f9b0 2034 	ldrsh.w	r2, [r0, #52]	; 0x34
{
 8008e6e:	b530      	push	{r4, r5, lr}
 8008e70:	b083      	sub	sp, #12
 8008e72:	f851 0f10 	ldr.w	r0, [r1, #16]!
        area_trunc.x1 -= ext_size;
 8008e76:	b292      	uxth	r2, r2
    return obj->par;
 8008e78:	681c      	ldr	r4, [r3, #0]
 8008e7a:	6849      	ldr	r1, [r1, #4]
 8008e7c:	466d      	mov	r5, sp
 8008e7e:	c503      	stmia	r5!, {r0, r1}
        area_trunc.x1 -= ext_size;
 8008e80:	f8bd 0000 	ldrh.w	r0, [sp]
        area_trunc.y1 -= ext_size;
 8008e84:	f8bd 1002 	ldrh.w	r1, [sp, #2]
        area_trunc.x2 += ext_size;
 8008e88:	f8bd 3004 	ldrh.w	r3, [sp, #4]
        area_trunc.x1 -= ext_size;
 8008e8c:	1a80      	subs	r0, r0, r2
        area_trunc.y2 += ext_size;
 8008e8e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
        area_trunc.y1 -= ext_size;
 8008e92:	1a89      	subs	r1, r1, r2
        area_trunc.x2 += ext_size;
 8008e94:	4413      	add	r3, r2
        area_trunc.x1 -= ext_size;
 8008e96:	f8ad 0000 	strh.w	r0, [sp]
        area_trunc.y2 += ext_size;
 8008e9a:	442a      	add	r2, r5
        area_trunc.y1 -= ext_size;
 8008e9c:	f8ad 1002 	strh.w	r1, [sp, #2]
        area_trunc.x2 += ext_size;
 8008ea0:	f8ad 3004 	strh.w	r3, [sp, #4]
        area_trunc.y2 += ext_size;
 8008ea4:	f8ad 2006 	strh.w	r2, [sp, #6]
        while(par != NULL) {
 8008ea8:	b934      	cbnz	r4, 8008eb8 <lv_obj_invalidate+0x80>
 8008eaa:	e00f      	b.n	8008ecc <lv_obj_invalidate+0x94>
    return obj->hidden == 0 ? false : true;
 8008eac:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
            if(lv_obj_get_hidden(par)) return;  /*If the parent is hidden then the child is hidden and won't be drawn*/
 8008eb0:	06db      	lsls	r3, r3, #27
 8008eb2:	d409      	bmi.n	8008ec8 <lv_obj_invalidate+0x90>
    return obj->par;
 8008eb4:	6824      	ldr	r4, [r4, #0]
        while(par != NULL) {
 8008eb6:	b14c      	cbz	r4, 8008ecc <lv_obj_invalidate+0x94>
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 8008eb8:	f104 0210 	add.w	r2, r4, #16
 8008ebc:	4669      	mov	r1, sp
 8008ebe:	4668      	mov	r0, sp
 8008ec0:	f006 fd62 	bl	800f988 <lv_area_intersect>
            if(union_ok == false) break;        /*If no common parts with parent break;*/
 8008ec4:	2800      	cmp	r0, #0
 8008ec6:	d1f1      	bne.n	8008eac <lv_obj_invalidate+0x74>
}
 8008ec8:	b003      	add	sp, #12
 8008eca:	bd30      	pop	{r4, r5, pc}
        if(union_ok != false) lv_inv_area(&area_trunc);
 8008ecc:	4668      	mov	r0, sp
 8008ece:	f001 f919 	bl	800a104 <lv_inv_area>
 8008ed2:	e7f9      	b.n	8008ec8 <lv_obj_invalidate+0x90>
 8008ed4:	20017ff8 	.word	0x20017ff8
 8008ed8:	20017ff4 	.word	0x20017ff4
 8008edc:	2001801c 	.word	0x2001801c

08008ee0 <lv_obj_del>:
{
 8008ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ee2:	4605      	mov	r5, r0
    lv_obj_invalidate(obj);
 8008ee4:	f7ff ffa8 	bl	8008e38 <lv_obj_invalidate>
    if(obj->group_p != NULL) lv_group_remove_obj(obj);
 8008ee8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008eea:	b113      	cbz	r3, 8008ef2 <lv_obj_del+0x12>
 8008eec:	4628      	mov	r0, r5
 8008eee:	f7ff f8c7 	bl	8008080 <lv_group_remove_obj>
    i = lv_ll_get_head(&(obj->child_ll));
 8008ef2:	1d2f      	adds	r7, r5, #4
    lv_anim_del(obj, NULL);
 8008ef4:	2100      	movs	r1, #0
 8008ef6:	4628      	mov	r0, r5
 8008ef8:	f006 fc68 	bl	800f7cc <lv_anim_del>
    i = lv_ll_get_head(&(obj->child_ll));
 8008efc:	4638      	mov	r0, r7
 8008efe:	f007 f84b 	bl	800ff98 <lv_ll_get_head>
    while(i != NULL) {
 8008f02:	4604      	mov	r4, r0
 8008f04:	b150      	cbz	r0, 8008f1c <lv_obj_del+0x3c>
        i_next = lv_ll_get_next(&(obj->child_ll), i);
 8008f06:	4621      	mov	r1, r4
 8008f08:	4638      	mov	r0, r7
 8008f0a:	f007 f84d 	bl	800ffa8 <lv_ll_get_next>
 8008f0e:	4606      	mov	r6, r0
        delete_children(i);
 8008f10:	4620      	mov	r0, r4
 8008f12:	f7ff ff47 	bl	8008da4 <delete_children>
    while(i != NULL) {
 8008f16:	4634      	mov	r4, r6
 8008f18:	2e00      	cmp	r6, #0
 8008f1a:	d1f4      	bne.n	8008f06 <lv_obj_del+0x26>
    return obj->par;
 8008f1c:	682e      	ldr	r6, [r5, #0]
    if(par == NULL) { /*It is a screen*/
 8008f1e:	b38e      	cbz	r6, 8008f84 <lv_obj_del+0xa4>
        lv_ll_rem(&(par->child_ll), obj);
 8008f20:	4629      	mov	r1, r5
 8008f22:	1d30      	adds	r0, r6, #4
 8008f24:	f006 ffcc 	bl	800fec0 <lv_ll_rem>
    lv_indev_t * indev = lv_indev_next(NULL);
 8008f28:	2000      	movs	r0, #0
 8008f2a:	f006 fb6f 	bl	800f60c <lv_indev_next>
    while(indev) {
 8008f2e:	4604      	mov	r4, r0
 8008f30:	b928      	cbnz	r0, 8008f3e <lv_obj_del+0x5e>
 8008f32:	e013      	b.n	8008f5c <lv_obj_del+0x7c>
        indev = lv_indev_next(indev);
 8008f34:	4620      	mov	r0, r4
 8008f36:	f006 fb69 	bl	800f60c <lv_indev_next>
    while(indev) {
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	b170      	cbz	r0, 8008f5c <lv_obj_del+0x7c>
        if(indev->proc.act_obj == obj || indev->proc.last_obj == obj) {
 8008f3e:	6a23      	ldr	r3, [r4, #32]
 8008f40:	429d      	cmp	r5, r3
 8008f42:	d002      	beq.n	8008f4a <lv_obj_del+0x6a>
 8008f44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f46:	429d      	cmp	r5, r3
 8008f48:	d1f4      	bne.n	8008f34 <lv_obj_del+0x54>
            lv_indev_reset(indev);
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	f7ff feb2 	bl	8008cb4 <lv_indev_reset>
        indev = lv_indev_next(indev);
 8008f50:	4620      	mov	r0, r4
 8008f52:	f006 fb5b 	bl	800f60c <lv_indev_next>
    while(indev) {
 8008f56:	4604      	mov	r4, r0
 8008f58:	2800      	cmp	r0, #0
 8008f5a:	d1f0      	bne.n	8008f3e <lv_obj_del+0x5e>
    obj->signal_func(obj, LV_SIGNAL_CLEANUP, NULL);
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	69ab      	ldr	r3, [r5, #24]
 8008f60:	4628      	mov	r0, r5
 8008f62:	4611      	mov	r1, r2
 8008f64:	4798      	blx	r3
    if(obj->ext_attr != NULL)  lv_mem_free(obj->ext_attr);
 8008f66:	6a28      	ldr	r0, [r5, #32]
 8008f68:	b108      	cbz	r0, 8008f6e <lv_obj_del+0x8e>
 8008f6a:	f007 f88d 	bl	8010088 <lv_mem_free>
    lv_mem_free(obj); /*Free the object itself*/
 8008f6e:	4628      	mov	r0, r5
 8008f70:	f007 f88a 	bl	8010088 <lv_mem_free>
    if(par != NULL) {
 8008f74:	b126      	cbz	r6, 8008f80 <lv_obj_del+0xa0>
        par->signal_func(par, LV_SIGNAL_CHILD_CHG, NULL);
 8008f76:	69b3      	ldr	r3, [r6, #24]
 8008f78:	4630      	mov	r0, r6
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	2101      	movs	r1, #1
 8008f7e:	4798      	blx	r3
}
 8008f80:	2000      	movs	r0, #0
 8008f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_ll_rem(&LV_GC_ROOT(_lv_scr_ll), obj);
 8008f84:	4629      	mov	r1, r5
 8008f86:	4802      	ldr	r0, [pc, #8]	; (8008f90 <lv_obj_del+0xb0>)
 8008f88:	f006 ff9a 	bl	800fec0 <lv_ll_rem>
 8008f8c:	e7cc      	b.n	8008f28 <lv_obj_del+0x48>
 8008f8e:	bf00      	nop
 8008f90:	2001800c 	.word	0x2001800c

08008f94 <lv_obj_set_pos>:
{
 8008f94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    lv_obj_t * par = obj->par;
 8008f98:	6806      	ldr	r6, [r0, #0]
{
 8008f9a:	b083      	sub	sp, #12
    diff.x =  x - obj->coords.x1;
 8008f9c:	8a04      	ldrh	r4, [r0, #16]
 8008f9e:	8a35      	ldrh	r5, [r6, #16]
    diff.y =  y - obj->coords.y1;
 8008fa0:	8a73      	ldrh	r3, [r6, #18]
    diff.x =  x - obj->coords.x1;
 8008fa2:	1b2d      	subs	r5, r5, r4
    diff.y =  y - obj->coords.y1;
 8008fa4:	8a44      	ldrh	r4, [r0, #18]
    diff.x =  x - obj->coords.x1;
 8008fa6:	440d      	add	r5, r1
    diff.y =  y - obj->coords.y1;
 8008fa8:	1b1b      	subs	r3, r3, r4
    diff.x =  x - obj->coords.x1;
 8008faa:	b2ad      	uxth	r5, r5
    diff.y =  y - obj->coords.y1;
 8008fac:	4413      	add	r3, r2
    diff.x =  x - obj->coords.x1;
 8008fae:	fa0f f885 	sxth.w	r8, r5
    diff.y =  y - obj->coords.y1;
 8008fb2:	b29f      	uxth	r7, r3
 8008fb4:	fa0f f987 	sxth.w	r9, r7
    if(diff.x == 0 && diff.y == 0) return;
 8008fb8:	f1b8 0f00 	cmp.w	r8, #0
 8008fbc:	d105      	bne.n	8008fca <lv_obj_set_pos+0x36>
 8008fbe:	f1b9 0f00 	cmp.w	r9, #0
 8008fc2:	d102      	bne.n	8008fca <lv_obj_set_pos+0x36>
}
 8008fc4:	b003      	add	sp, #12
 8008fc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fca:	4604      	mov	r4, r0
    lv_obj_invalidate(obj);
 8008fcc:	f7ff ff34 	bl	8008e38 <lv_obj_invalidate>
    refresh_childen_position(obj, diff.x, diff.y);
 8008fd0:	464a      	mov	r2, r9
 8008fd2:	46ee      	mov	lr, sp
    obj->coords.x1 += diff.x;
 8008fd4:	8a23      	ldrh	r3, [r4, #16]
 8008fd6:	4621      	mov	r1, r4
    obj->coords.y1 += diff.y;
 8008fd8:	f8b4 c012 	ldrh.w	ip, [r4, #18]
 8008fdc:	f851 0f10 	ldr.w	r0, [r1, #16]!
    obj->coords.x1 += diff.x;
 8008fe0:	442b      	add	r3, r5
    obj->coords.x2 += diff.x;
 8008fe2:	f8b4 9014 	ldrh.w	r9, [r4, #20]
    obj->coords.y1 += diff.y;
 8008fe6:	44bc      	add	ip, r7
 8008fe8:	6849      	ldr	r1, [r1, #4]
    obj->coords.x1 += diff.x;
 8008fea:	8223      	strh	r3, [r4, #16]
    obj->coords.x2 += diff.x;
 8008fec:	444d      	add	r5, r9
    obj->coords.y2 += diff.y;
 8008fee:	8ae3      	ldrh	r3, [r4, #22]
    obj->coords.y1 += diff.y;
 8008ff0:	f8a4 c012 	strh.w	ip, [r4, #18]
    obj->coords.y2 += diff.y;
 8008ff4:	443b      	add	r3, r7
    obj->coords.x2 += diff.x;
 8008ff6:	82a5      	strh	r5, [r4, #20]
 8008ff8:	e8ae 0003 	stmia.w	lr!, {r0, r1}
    obj->coords.y2 += diff.y;
 8008ffc:	82e3      	strh	r3, [r4, #22]
    refresh_childen_position(obj, diff.x, diff.y);
 8008ffe:	4641      	mov	r1, r8
 8009000:	4620      	mov	r0, r4
 8009002:	f7ff fea3 	bl	8008d4c <refresh_childen_position>
    obj->signal_func(obj, LV_SIGNAL_CORD_CHG, &ori);
 8009006:	466a      	mov	r2, sp
 8009008:	69a3      	ldr	r3, [r4, #24]
 800900a:	2102      	movs	r1, #2
 800900c:	4620      	mov	r0, r4
 800900e:	4798      	blx	r3
    par->signal_func(par, LV_SIGNAL_CHILD_CHG, obj);
 8009010:	69b3      	ldr	r3, [r6, #24]
 8009012:	4622      	mov	r2, r4
 8009014:	2101      	movs	r1, #1
 8009016:	4630      	mov	r0, r6
 8009018:	4798      	blx	r3
    lv_obj_invalidate(obj);
 800901a:	4620      	mov	r0, r4
 800901c:	f7ff ff0c 	bl	8008e38 <lv_obj_invalidate>
}
 8009020:	b003      	add	sp, #12
 8009022:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009026:	bf00      	nop

08009028 <lv_obj_create>:
{
 8009028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800902a:	460d      	mov	r5, r1
    if(parent == NULL) {
 800902c:	4606      	mov	r6, r0
 800902e:	2800      	cmp	r0, #0
 8009030:	f000 80ad 	beq.w	800918e <lv_obj_create+0x166>
        new_obj = lv_ll_ins_head(&(parent)->child_ll);
 8009034:	3004      	adds	r0, #4
 8009036:	f006 fed5 	bl	800fde4 <lv_ll_ins_head>
        lv_mem_assert(new_obj);
 800903a:	4604      	mov	r4, r0
 800903c:	2800      	cmp	r0, #0
 800903e:	f000 80a5 	beq.w	800918c <lv_obj_create+0x164>
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 8009042:	213c      	movs	r1, #60	; 0x3c
        new_obj->par = parent; /*Set the parent*/
 8009044:	f840 6b04 	str.w	r6, [r0], #4
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 8009048:	f006 fec2 	bl	800fdd0 <lv_ll_init>
        new_obj->coords.x1 = parent->coords.x1;
 800904c:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
        new_obj->coords.y1 = parent->coords.y1;
 8009050:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
        new_obj->ext_size = 0;
 8009054:	2100      	movs	r1, #0
        new_obj->coords.x1 = parent->coords.x1;
 8009056:	8222      	strh	r2, [r4, #16]
        new_obj->coords.y1 = parent->coords.y1;
 8009058:	8263      	strh	r3, [r4, #18]
        new_obj->coords.x2 = parent->coords.x1 +
 800905a:	8a32      	ldrh	r2, [r6, #16]
        new_obj->coords.y2 = parent->coords.y1 +
 800905c:	8a73      	ldrh	r3, [r6, #18]
        new_obj->coords.x2 = parent->coords.x1 +
 800905e:	3264      	adds	r2, #100	; 0x64
        new_obj->ext_size = 0;
 8009060:	86a1      	strh	r1, [r4, #52]	; 0x34
        new_obj->coords.y2 = parent->coords.y1 +
 8009062:	3342      	adds	r3, #66	; 0x42
        new_obj->coords.x2 = parent->coords.x1 +
 8009064:	82a2      	strh	r2, [r4, #20]
        new_obj->coords.y2 = parent->coords.y1 +
 8009066:	82e3      	strh	r3, [r4, #22]
        lv_theme_t * th = lv_theme_get_current();
 8009068:	f010 fad6 	bl	8019618 <lv_theme_get_current>
        if(th) {
 800906c:	2800      	cmp	r0, #0
 800906e:	f000 80be 	beq.w	80091ee <lv_obj_create+0x1c6>
            new_obj->style_p = th->panel;
 8009072:	6843      	ldr	r3, [r0, #4]
 8009074:	6263      	str	r3, [r4, #36]	; 0x24
        new_obj->click = 1;
 8009076:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
        new_obj->free_num = 0;
 800907a:	2200      	movs	r2, #0
    obj->signal_func = fp;
 800907c:	4f5f      	ldr	r7, [pc, #380]	; (80091fc <lv_obj_create+0x1d4>)
        new_obj->opa_scale = LV_OPA_COVER;
 800907e:	21ff      	movs	r1, #255	; 0xff
        new_obj->drag = 0;
 8009080:	f043 0301 	orr.w	r3, r3, #1
    obj->design_func = fp;
 8009084:	485e      	ldr	r0, [pc, #376]	; (8009200 <lv_obj_create+0x1d8>)
        new_obj->free_num = 0;
 8009086:	63a2      	str	r2, [r4, #56]	; 0x38
        new_obj->opa_scale_en = 0;
 8009088:	f003 03c1 	and.w	r3, r3, #193	; 0xc1
        new_obj->free_ptr = NULL;
 800908c:	62a2      	str	r2, [r4, #40]	; 0x28
        new_obj->group_p = NULL;
 800908e:	62e2      	str	r2, [r4, #44]	; 0x2c
        new_obj->opa_scale_en = 0;
 8009090:	f362 1386 	bfi	r3, r2, #6, #1
        new_obj->protect = LV_PROTECT_NONE;
 8009094:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
        new_obj->ext_attr = NULL;
 8009098:	6222      	str	r2, [r4, #32]
        new_obj->opa_scale_en = 0;
 800909a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    obj->signal_func = fp;
 800909e:	61a7      	str	r7, [r4, #24]
    obj->design_func = fp;
 80090a0:	61e0      	str	r0, [r4, #28]
        new_obj->opa_scale = LV_OPA_COVER;
 80090a2:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
    if(copy != NULL) {
 80090a6:	2d00      	cmp	r5, #0
 80090a8:	d065      	beq.n	8009176 <lv_obj_create+0x14e>
 80090aa:	462b      	mov	r3, r5
        new_obj->click = copy->click;
 80090ac:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 80090b0:	f853 1f10 	ldr.w	r1, [r3, #16]!
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	6121      	str	r1, [r4, #16]
 80090b8:	6163      	str	r3, [r4, #20]
        new_obj->ext_size = copy->ext_size;
 80090ba:	f9b5 1034 	ldrsh.w	r1, [r5, #52]	; 0x34
        new_obj->free_num = copy->free_num;
 80090be:	6bab      	ldr	r3, [r5, #56]	; 0x38
        new_obj->ext_size = copy->ext_size;
 80090c0:	86a1      	strh	r1, [r4, #52]	; 0x34
        new_obj->free_num = copy->free_num;
 80090c2:	63a3      	str	r3, [r4, #56]	; 0x38
        new_obj->click = copy->click;
 80090c4:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
        new_obj->free_ptr = copy->free_ptr;
 80090c8:	6aab      	ldr	r3, [r5, #40]	; 0x28
        new_obj->click = copy->click;
 80090ca:	f361 0200 	bfi	r2, r1, #0, #1
        new_obj->free_ptr = copy->free_ptr;
 80090ce:	62a3      	str	r3, [r4, #40]	; 0x28
        new_obj->click = copy->click;
 80090d0:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->drag = copy->drag;
 80090d4:	b2d2      	uxtb	r2, r2
 80090d6:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 80090da:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80090de:	f363 0241 	bfi	r2, r3, #1, #1
 80090e2:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->drag_throw = copy->drag_throw;
 80090e6:	b2d2      	uxtb	r2, r2
 80090e8:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 80090ec:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80090f0:	f363 0282 	bfi	r2, r3, #2, #1
 80090f4:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->drag_parent = copy->drag_parent;
 80090f8:	b2d2      	uxtb	r2, r2
 80090fa:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 80090fe:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009102:	f363 02c3 	bfi	r2, r3, #3, #1
 8009106:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->hidden = copy->hidden;
 800910a:	b2d2      	uxtb	r2, r2
 800910c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8009110:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009114:	f363 1204 	bfi	r2, r3, #4, #1
 8009118:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->top = copy->top;
 800911c:	b2d2      	uxtb	r2, r2
 800911e:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8009122:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009126:	f363 1245 	bfi	r2, r3, #5, #1
 800912a:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->opa_scale_en = copy->opa_scale_en;
 800912e:	b2d2      	uxtb	r2, r2
 8009130:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8009134:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009138:	f363 1286 	bfi	r2, r3, #6, #1
 800913c:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->protect = copy->protect;
 8009140:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 8009144:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
        new_obj->opa_scale = copy->opa_scale;
 8009148:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
 800914c:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        new_obj->style_p = copy->style_p;
 8009150:	6a6b      	ldr	r3, [r5, #36]	; 0x24
        if(copy->group_p != NULL) {
 8009152:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
        new_obj->style_p = copy->style_p;
 8009154:	6263      	str	r3, [r4, #36]	; 0x24
        if(copy->group_p != NULL) {
 8009156:	b110      	cbz	r0, 800915e <lv_obj_create+0x136>
            lv_group_add_obj(copy->group_p, new_obj);
 8009158:	4621      	mov	r1, r4
 800915a:	f7fe ff6f 	bl	800803c <lv_group_add_obj>
    return obj->par;
 800915e:	682b      	ldr	r3, [r5, #0]
        lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
 8009160:	4620      	mov	r0, r4
    rel_y = obj->coords.y1 - parent->coords.y1;
 8009162:	8a6a      	ldrh	r2, [r5, #18]
 8009164:	8a5f      	ldrh	r7, [r3, #18]
    rel_x = obj->coords.x1 - parent->coords.x1;
 8009166:	8a29      	ldrh	r1, [r5, #16]
 8009168:	8a1b      	ldrh	r3, [r3, #16]
    rel_y = obj->coords.y1 - parent->coords.y1;
 800916a:	1bd2      	subs	r2, r2, r7
    rel_x = obj->coords.x1 - parent->coords.x1;
 800916c:	1ac9      	subs	r1, r1, r3
        lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
 800916e:	b212      	sxth	r2, r2
 8009170:	b209      	sxth	r1, r1
 8009172:	f7ff ff0f 	bl	8008f94 <lv_obj_set_pos>
    if(parent != NULL) {
 8009176:	b13e      	cbz	r6, 8009188 <lv_obj_create+0x160>
        parent->signal_func(parent, LV_SIGNAL_CHILD_CHG, new_obj);
 8009178:	69b3      	ldr	r3, [r6, #24]
 800917a:	4630      	mov	r0, r6
 800917c:	4622      	mov	r2, r4
 800917e:	2101      	movs	r1, #1
 8009180:	4798      	blx	r3
        lv_obj_invalidate(new_obj);
 8009182:	4620      	mov	r0, r4
 8009184:	f7ff fe58 	bl	8008e38 <lv_obj_invalidate>
}
 8009188:	4620      	mov	r0, r4
 800918a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800918c:	e7fe      	b.n	800918c <lv_obj_create+0x164>
        new_obj = lv_ll_ins_head(&LV_GC_ROOT(_lv_scr_ll));
 800918e:	481d      	ldr	r0, [pc, #116]	; (8009204 <lv_obj_create+0x1dc>)
 8009190:	f006 fe28 	bl	800fde4 <lv_ll_ins_head>
        lv_mem_assert(new_obj);
 8009194:	4604      	mov	r4, r0
 8009196:	b348      	cbz	r0, 80091ec <lv_obj_create+0x1c4>
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 8009198:	213c      	movs	r1, #60	; 0x3c
        new_obj->par = NULL; /*Screens has no a parent*/
 800919a:	f840 6b04 	str.w	r6, [r0], #4
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 800919e:	f006 fe17 	bl	800fdd0 <lv_ll_init>
        new_obj->coords.x2 = LV_HOR_RES - 1;
 80091a2:	f240 12df 	movw	r2, #479	; 0x1df
        new_obj->coords.y2 = LV_VER_RES - 1;
 80091a6:	f240 130f 	movw	r3, #271	; 0x10f
        new_obj->coords.x1 = 0;
 80091aa:	8226      	strh	r6, [r4, #16]
        new_obj->coords.y1 = 0;
 80091ac:	8266      	strh	r6, [r4, #18]
        new_obj->ext_size = 0;
 80091ae:	86a6      	strh	r6, [r4, #52]	; 0x34
        new_obj->coords.x2 = LV_HOR_RES - 1;
 80091b0:	82a2      	strh	r2, [r4, #20]
        new_obj->coords.y2 = LV_VER_RES - 1;
 80091b2:	82e3      	strh	r3, [r4, #22]
        lv_theme_t * th = lv_theme_get_current();
 80091b4:	f010 fa30 	bl	8019618 <lv_theme_get_current>
        if(th) {
 80091b8:	b1e0      	cbz	r0, 80091f4 <lv_obj_create+0x1cc>
            new_obj->style_p = th->bg;
 80091ba:	6803      	ldr	r3, [r0, #0]
 80091bc:	6263      	str	r3, [r4, #36]	; 0x24
        new_obj->click = 0;
 80091be:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
        new_obj->free_num = 0;
 80091c2:	2300      	movs	r3, #0
    obj->signal_func = fp;
 80091c4:	4f0d      	ldr	r7, [pc, #52]	; (80091fc <lv_obj_create+0x1d4>)
        new_obj->opa_scale = LV_OPA_COVER;
 80091c6:	21ff      	movs	r1, #255	; 0xff
        new_obj->opa_scale_en = 0;
 80091c8:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    obj->design_func = fp;
 80091cc:	480c      	ldr	r0, [pc, #48]	; (8009200 <lv_obj_create+0x1d8>)
        new_obj->free_num = 0;
 80091ce:	63a3      	str	r3, [r4, #56]	; 0x38
        new_obj->opa_scale_en = 0;
 80091d0:	f363 1286 	bfi	r2, r3, #6, #1
        new_obj->free_ptr = NULL;
 80091d4:	62a3      	str	r3, [r4, #40]	; 0x28
        new_obj->group_p = NULL;
 80091d6:	62e3      	str	r3, [r4, #44]	; 0x2c
        new_obj->opa_scale_en = 0;
 80091d8:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->protect = LV_PROTECT_NONE;
 80091dc:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
        new_obj->ext_attr = NULL;
 80091e0:	6223      	str	r3, [r4, #32]
    obj->signal_func = fp;
 80091e2:	61a7      	str	r7, [r4, #24]
    obj->design_func = fp;
 80091e4:	61e0      	str	r0, [r4, #28]
        new_obj->opa_scale = LV_OPA_COVER;
 80091e6:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
 80091ea:	e75c      	b.n	80090a6 <lv_obj_create+0x7e>
 80091ec:	e7fe      	b.n	80091ec <lv_obj_create+0x1c4>
            new_obj->style_p = &lv_style_plain_color;
 80091ee:	4b06      	ldr	r3, [pc, #24]	; (8009208 <lv_obj_create+0x1e0>)
 80091f0:	6263      	str	r3, [r4, #36]	; 0x24
 80091f2:	e740      	b.n	8009076 <lv_obj_create+0x4e>
            new_obj->style_p = &lv_style_scr;
 80091f4:	4b05      	ldr	r3, [pc, #20]	; (800920c <lv_obj_create+0x1e4>)
 80091f6:	6263      	str	r3, [r4, #36]	; 0x24
 80091f8:	e7e1      	b.n	80091be <lv_obj_create+0x196>
 80091fa:	bf00      	nop
 80091fc:	08009b51 	.word	0x08009b51
 8009200:	08009a91 	.word	0x08009a91
 8009204:	2001800c 	.word	0x2001800c
 8009208:	20017fa0 	.word	0x20017fa0
 800920c:	20017f10 	.word	0x20017f10

08009210 <lv_obj_set_parent>:
{
 8009210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(obj->par == NULL) {
 8009214:	6803      	ldr	r3, [r0, #0]
    if(parent == NULL) {
 8009216:	b38b      	cbz	r3, 800927c <lv_obj_set_parent+0x6c>
 8009218:	fab1 f681 	clz	r6, r1
 800921c:	0976      	lsrs	r6, r6, #5
 800921e:	bb6e      	cbnz	r6, 800927c <lv_obj_set_parent+0x6c>
 8009220:	4604      	mov	r4, r0
 8009222:	460d      	mov	r5, r1
    lv_obj_invalidate(obj);
 8009224:	f7ff fe08 	bl	8008e38 <lv_obj_invalidate>
    return obj->par;
 8009228:	6827      	ldr	r7, [r4, #0]
    lv_ll_chg_list(&obj->par->child_ll, &parent->child_ll, obj);
 800922a:	4622      	mov	r2, r4
    rel_x = obj->coords.x1 - parent->coords.x1;
 800922c:	f8b4 9010 	ldrh.w	r9, [r4, #16]
    lv_ll_chg_list(&obj->par->child_ll, &parent->child_ll, obj);
 8009230:	1d29      	adds	r1, r5, #4
    rel_x = obj->coords.x1 - parent->coords.x1;
 8009232:	f8b7 e010 	ldrh.w	lr, [r7, #16]
    lv_ll_chg_list(&obj->par->child_ll, &parent->child_ll, obj);
 8009236:	1d38      	adds	r0, r7, #4
    rel_y = obj->coords.y1 - parent->coords.y1;
 8009238:	8a7b      	ldrh	r3, [r7, #18]
 800923a:	f8b4 8012 	ldrh.w	r8, [r4, #18]
    rel_x = obj->coords.x1 - parent->coords.x1;
 800923e:	eba9 090e 	sub.w	r9, r9, lr
    rel_y = obj->coords.y1 - parent->coords.y1;
 8009242:	eba8 0803 	sub.w	r8, r8, r3
    rel_x = obj->coords.x1 - parent->coords.x1;
 8009246:	fa0f f989 	sxth.w	r9, r9
    lv_ll_chg_list(&obj->par->child_ll, &parent->child_ll, obj);
 800924a:	f006 fe7f 	bl	800ff4c <lv_ll_chg_list>
    lv_obj_set_pos(obj, old_pos.x, old_pos.y);
 800924e:	4620      	mov	r0, r4
    rel_y = obj->coords.y1 - parent->coords.y1;
 8009250:	fa0f f888 	sxth.w	r8, r8
    lv_obj_set_pos(obj, old_pos.x, old_pos.y);
 8009254:	4649      	mov	r1, r9
    obj->par = parent;
 8009256:	6025      	str	r5, [r4, #0]
    lv_obj_set_pos(obj, old_pos.x, old_pos.y);
 8009258:	4642      	mov	r2, r8
 800925a:	f7ff fe9b 	bl	8008f94 <lv_obj_set_pos>
    old_par->signal_func(old_par, LV_SIGNAL_CHILD_CHG, NULL);
 800925e:	4632      	mov	r2, r6
 8009260:	69bb      	ldr	r3, [r7, #24]
 8009262:	4638      	mov	r0, r7
 8009264:	2101      	movs	r1, #1
 8009266:	4798      	blx	r3
    parent->signal_func(parent, LV_SIGNAL_CHILD_CHG, obj);
 8009268:	69ab      	ldr	r3, [r5, #24]
 800926a:	4628      	mov	r0, r5
 800926c:	4622      	mov	r2, r4
 800926e:	2101      	movs	r1, #1
 8009270:	4798      	blx	r3
    lv_obj_invalidate(obj);
 8009272:	4620      	mov	r0, r4
}
 8009274:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    lv_obj_invalidate(obj);
 8009278:	f7ff bdde 	b.w	8008e38 <lv_obj_invalidate>
 800927c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08009280 <lv_obj_set_x>:
{
 8009280:	b410      	push	{r4}
    rel_y = obj->coords.y1 - parent->coords.y1;
 8009282:	6804      	ldr	r4, [r0, #0]
 8009284:	8a42      	ldrh	r2, [r0, #18]
 8009286:	8a63      	ldrh	r3, [r4, #18]
}
 8009288:	f85d 4b04 	ldr.w	r4, [sp], #4
    rel_y = obj->coords.y1 - parent->coords.y1;
 800928c:	1ad2      	subs	r2, r2, r3
    lv_obj_set_pos(obj, x, lv_obj_get_y(obj));
 800928e:	b212      	sxth	r2, r2
 8009290:	f7ff be80 	b.w	8008f94 <lv_obj_set_pos>

08009294 <lv_obj_set_y>:
{
 8009294:	b410      	push	{r4}
    rel_x = obj->coords.x1 - parent->coords.x1;
 8009296:	6804      	ldr	r4, [r0, #0]
    lv_obj_set_pos(obj, lv_obj_get_x(obj), y);
 8009298:	460a      	mov	r2, r1
    rel_x = obj->coords.x1 - parent->coords.x1;
 800929a:	8a01      	ldrh	r1, [r0, #16]
 800929c:	8a23      	ldrh	r3, [r4, #16]
}
 800929e:	f85d 4b04 	ldr.w	r4, [sp], #4
    rel_x = obj->coords.x1 - parent->coords.x1;
 80092a2:	1ac9      	subs	r1, r1, r3
    lv_obj_set_pos(obj, lv_obj_get_x(obj), y);
 80092a4:	b209      	sxth	r1, r1
 80092a6:	f7ff be75 	b.w	8008f94 <lv_obj_set_pos>
 80092aa:	bf00      	nop

080092ac <lv_obj_set_size>:
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 80092ac:	8a83      	ldrh	r3, [r0, #20]
{
 80092ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092b0:	3301      	adds	r3, #1
 80092b2:	8a04      	ldrh	r4, [r0, #16]
 80092b4:	b083      	sub	sp, #12
 80092b6:	1b1b      	subs	r3, r3, r4
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
 80092b8:	b21b      	sxth	r3, r3
 80092ba:	4299      	cmp	r1, r3
 80092bc:	d022      	beq.n	8009304 <lv_obj_set_size+0x58>
 80092be:	4604      	mov	r4, r0
 80092c0:	4616      	mov	r6, r2
 80092c2:	460d      	mov	r5, r1
    lv_obj_invalidate(obj);
 80092c4:	f7ff fdb8 	bl	8008e38 <lv_obj_invalidate>
    memcpy(dest, src, sizeof(lv_area_t));
 80092c8:	4627      	mov	r7, r4
    obj->coords.y2 = obj->coords.y1 + h - 1;
 80092ca:	1e72      	subs	r2, r6, #1
    obj->coords.x2 = obj->coords.x1 + w - 1;
 80092cc:	8a21      	ldrh	r1, [r4, #16]
 80092ce:	3d01      	subs	r5, #1
 80092d0:	f857 0f10 	ldr.w	r0, [r7, #16]!
 80092d4:	466e      	mov	r6, sp
    obj->coords.y2 = obj->coords.y1 + h - 1;
 80092d6:	8a63      	ldrh	r3, [r4, #18]
    obj->coords.x2 = obj->coords.x1 + w - 1;
 80092d8:	440d      	add	r5, r1
 80092da:	6879      	ldr	r1, [r7, #4]
    obj->coords.y2 = obj->coords.y1 + h - 1;
 80092dc:	4413      	add	r3, r2
    obj->coords.x2 = obj->coords.x1 + w - 1;
 80092de:	82a5      	strh	r5, [r4, #20]
    obj->signal_func(obj, LV_SIGNAL_CORD_CHG, &ori);
 80092e0:	466a      	mov	r2, sp
 80092e2:	69a5      	ldr	r5, [r4, #24]
    obj->coords.y2 = obj->coords.y1 + h - 1;
 80092e4:	82e3      	strh	r3, [r4, #22]
 80092e6:	c603      	stmia	r6!, {r0, r1}
    obj->signal_func(obj, LV_SIGNAL_CORD_CHG, &ori);
 80092e8:	2102      	movs	r1, #2
 80092ea:	4620      	mov	r0, r4
 80092ec:	47a8      	blx	r5
    return obj->par;
 80092ee:	6820      	ldr	r0, [r4, #0]
    if(par != NULL) par->signal_func(par, LV_SIGNAL_CHILD_CHG, obj);
 80092f0:	b118      	cbz	r0, 80092fa <lv_obj_set_size+0x4e>
 80092f2:	6983      	ldr	r3, [r0, #24]
 80092f4:	4622      	mov	r2, r4
 80092f6:	2101      	movs	r1, #1
 80092f8:	4798      	blx	r3
    lv_obj_invalidate(obj);
 80092fa:	4620      	mov	r0, r4
 80092fc:	f7ff fd9c 	bl	8008e38 <lv_obj_invalidate>
}
 8009300:	b003      	add	sp, #12
 8009302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 8009304:	8ac3      	ldrh	r3, [r0, #22]
 8009306:	8a44      	ldrh	r4, [r0, #18]
 8009308:	3301      	adds	r3, #1
 800930a:	1b1b      	subs	r3, r3, r4
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
 800930c:	b21b      	sxth	r3, r3
 800930e:	429a      	cmp	r2, r3
 8009310:	d1d5      	bne.n	80092be <lv_obj_set_size+0x12>
}
 8009312:	b003      	add	sp, #12
 8009314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009316:	bf00      	nop

08009318 <lv_obj_set_width>:
 8009318:	8ac2      	ldrh	r2, [r0, #22]
 800931a:	8a43      	ldrh	r3, [r0, #18]
 800931c:	3201      	adds	r2, #1
 800931e:	1ad2      	subs	r2, r2, r3
    lv_obj_set_size(obj, w, lv_obj_get_height(obj));
 8009320:	b212      	sxth	r2, r2
 8009322:	f7ff bfc3 	b.w	80092ac <lv_obj_set_size>
 8009326:	bf00      	nop

08009328 <lv_obj_set_height>:
    lv_obj_set_size(obj, lv_obj_get_width(obj), h);
 8009328:	460a      	mov	r2, r1
    return area_p->x2 - area_p->x1 + 1;
 800932a:	8a81      	ldrh	r1, [r0, #20]
 800932c:	8a03      	ldrh	r3, [r0, #16]
 800932e:	3101      	adds	r1, #1
 8009330:	1ac9      	subs	r1, r1, r3
 8009332:	b209      	sxth	r1, r1
 8009334:	f7ff bfba 	b.w	80092ac <lv_obj_set_size>

08009338 <lv_obj_align>:
{
 8009338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return obj->par;
 800933c:	6805      	ldr	r5, [r0, #0]
{
 800933e:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
    rel_x = obj->coords.x1 - parent->coords.x1;
 8009342:	f8b0 9010 	ldrh.w	r9, [r0, #16]
 8009346:	f8b5 e010 	ldrh.w	lr, [r5, #16]
    rel_y = obj->coords.y1 - parent->coords.y1;
 800934a:	f8b5 c012 	ldrh.w	ip, [r5, #18]
 800934e:	f8b0 8012 	ldrh.w	r8, [r0, #18]
    if(base == NULL) {
 8009352:	b1d9      	cbz	r1, 800938c <lv_obj_align+0x54>
 8009354:	8a0d      	ldrh	r5, [r1, #16]
 8009356:	8a4c      	ldrh	r4, [r1, #18]
    switch(align) {
 8009358:	2a14      	cmp	r2, #20
 800935a:	f200 8197 	bhi.w	800968c <lv_obj_align+0x354>
 800935e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009362:	0029      	.short	0x0029
 8009364:	017e0019 	.word	0x017e0019
 8009368:	01690174 	.word	0x01690174
 800936c:	01340146 	.word	0x01340146
 8009370:	0108011a 	.word	0x0108011a
 8009374:	00e20101 	.word	0x00e20101
 8009378:	00cd00d4 	.word	0x00cd00d4
 800937c:	00a000af 	.word	0x00a000af
 8009380:	008c0099 	.word	0x008c0099
 8009384:	0077007e 	.word	0x0077007e
 8009388:	00580068 	.word	0x00580068
 800938c:	4629      	mov	r1, r5
 800938e:	4664      	mov	r4, ip
 8009390:	4675      	mov	r5, lr
 8009392:	e7e1      	b.n	8009358 <lv_obj_align+0x20>
 8009394:	2200      	movs	r2, #0
 8009396:	4617      	mov	r7, r2
    new_y -= par_abs_y;
 8009398:	eba6 060c 	sub.w	r6, r6, ip
    new_x -= par_abs_x;
 800939c:	eba3 010e 	sub.w	r1, r3, lr
    new_y -= par_abs_y;
 80093a0:	4434      	add	r4, r6
    new_x -= par_abs_x;
 80093a2:	4429      	add	r1, r5
    new_y -= par_abs_y;
 80093a4:	4422      	add	r2, r4
    new_x -= par_abs_x;
 80093a6:	4439      	add	r1, r7
    lv_obj_set_pos(obj, new_x, new_y);
 80093a8:	b212      	sxth	r2, r2
 80093aa:	b209      	sxth	r1, r1
}
 80093ac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    lv_obj_set_pos(obj, new_x, new_y);
 80093b0:	f7ff bdf0 	b.w	8008f94 <lv_obj_set_pos>
 80093b4:	8a8a      	ldrh	r2, [r1, #20]
 80093b6:	f1c5 0701 	rsb	r7, r5, #1
    return area_p->y2 - area_p->y1 + 1;
 80093ba:	8ac9      	ldrh	r1, [r1, #22]
    return area_p->x2 - area_p->x1 + 1;
 80093bc:	4417      	add	r7, r2
 80093be:	8a82      	ldrh	r2, [r0, #20]
 80093c0:	3201      	adds	r2, #1
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 80093c2:	b23f      	sxth	r7, r7
 80093c4:	eba2 0909 	sub.w	r9, r2, r9
 80093c8:	2f00      	cmp	r7, #0
    return area_p->y2 - area_p->y1 + 1;
 80093ca:	f1c4 0201 	rsb	r2, r4, #1
 80093ce:	fa0f f989 	sxth.w	r9, r9
 80093d2:	bfb8      	it	lt
 80093d4:	3701      	addlt	r7, #1
 80093d6:	440a      	add	r2, r1
 80093d8:	f1b9 0f00 	cmp.w	r9, #0
 80093dc:	ea4f 0767 	mov.w	r7, r7, asr #1
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 80093e0:	b212      	sxth	r2, r2
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 80093e2:	bfb8      	it	lt
 80093e4:	f109 0901 	addlt.w	r9, r9, #1
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 80093e8:	2a00      	cmp	r2, #0
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 80093ea:	eba7 0769 	sub.w	r7, r7, r9, asr #1
 80093ee:	b2bf      	uxth	r7, r7
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 80093f0:	db2c      	blt.n	800944c <lv_obj_align+0x114>
 80093f2:	8ac1      	ldrh	r1, [r0, #22]
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 80093f4:	1052      	asrs	r2, r2, #1
 80093f6:	3101      	adds	r1, #1
 80093f8:	eba1 0808 	sub.w	r8, r1, r8
 80093fc:	fa0f f888 	sxth.w	r8, r8
 8009400:	f1b8 0f00 	cmp.w	r8, #0
 8009404:	bfb8      	it	lt
 8009406:	f108 0801 	addlt.w	r8, r8, #1
 800940a:	eba2 0268 	sub.w	r2, r2, r8, asr #1
 800940e:	b292      	uxth	r2, r2
            break;
 8009410:	e7c2      	b.n	8009398 <lv_obj_align+0x60>
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 8009412:	8ac2      	ldrh	r2, [r0, #22]
    return area_p->x2 - area_p->x1 + 1;
 8009414:	f1c5 0701 	rsb	r7, r5, #1
 8009418:	f8b1 9014 	ldrh.w	r9, [r1, #20]
 800941c:	eba2 0808 	sub.w	r8, r2, r8
 8009420:	8aca      	ldrh	r2, [r1, #22]
 8009422:	4639      	mov	r1, r7
 8009424:	eba2 0208 	sub.w	r2, r2, r8
 8009428:	4449      	add	r1, r9
 800942a:	1b12      	subs	r2, r2, r4
 800942c:	b28f      	uxth	r7, r1
 800942e:	b292      	uxth	r2, r2
            break;
 8009430:	e7b2      	b.n	8009398 <lv_obj_align+0x60>
    return area_p->y2 - area_p->y1 + 1;
 8009432:	f8b1 9016 	ldrh.w	r9, [r1, #22]
 8009436:	f1c4 0201 	rsb	r2, r4, #1
    return area_p->x2 - area_p->x1 + 1;
 800943a:	8a8f      	ldrh	r7, [r1, #20]
 800943c:	f1c5 0101 	rsb	r1, r5, #1
    return area_p->y2 - area_p->y1 + 1;
 8009440:	444a      	add	r2, r9
    return area_p->x2 - area_p->x1 + 1;
 8009442:	4439      	add	r1, r7
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 8009444:	b212      	sxth	r2, r2
 8009446:	b28f      	uxth	r7, r1
 8009448:	2a00      	cmp	r2, #0
 800944a:	dad2      	bge.n	80093f2 <lv_obj_align+0xba>
 800944c:	3201      	adds	r2, #1
 800944e:	e7d0      	b.n	80093f2 <lv_obj_align+0xba>
 8009450:	8a8f      	ldrh	r7, [r1, #20]
 8009452:	f1c5 0101 	rsb	r1, r5, #1
            break;
 8009456:	2200      	movs	r2, #0
 8009458:	4439      	add	r1, r7
 800945a:	b28f      	uxth	r7, r1
 800945c:	e79c      	b.n	8009398 <lv_obj_align+0x60>
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 800945e:	8ac7      	ldrh	r7, [r0, #22]
 8009460:	8aca      	ldrh	r2, [r1, #22]
 8009462:	eba7 0808 	sub.w	r8, r7, r8
 8009466:	8a81      	ldrh	r1, [r0, #20]
 8009468:	eba2 0208 	sub.w	r2, r2, r8
 800946c:	eba1 0109 	sub.w	r1, r1, r9
 8009470:	1b12      	subs	r2, r2, r4
            new_x = - lv_obj_get_width(obj);
 8009472:	43c9      	mvns	r1, r1
 8009474:	b292      	uxth	r2, r2
 8009476:	b28f      	uxth	r7, r1
            break;
 8009478:	e78e      	b.n	8009398 <lv_obj_align+0x60>
    return area_p->y2 - area_p->y1 + 1;
 800947a:	8acf      	ldrh	r7, [r1, #22]
 800947c:	f1c4 0201 	rsb	r2, r4, #1
    return area_p->x2 - area_p->x1 + 1;
 8009480:	8a81      	ldrh	r1, [r0, #20]
    return area_p->y2 - area_p->y1 + 1;
 8009482:	443a      	add	r2, r7
    return area_p->x2 - area_p->x1 + 1;
 8009484:	eba1 0109 	sub.w	r1, r1, r9
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 8009488:	b212      	sxth	r2, r2
            new_x = - lv_obj_get_width(obj);
 800948a:	43c9      	mvns	r1, r1
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 800948c:	2a00      	cmp	r2, #0
 800948e:	b28f      	uxth	r7, r1
 8009490:	daaf      	bge.n	80093f2 <lv_obj_align+0xba>
 8009492:	e7db      	b.n	800944c <lv_obj_align+0x114>
 8009494:	8a81      	ldrh	r1, [r0, #20]
            break;
 8009496:	2200      	movs	r2, #0
 8009498:	eba1 0109 	sub.w	r1, r1, r9
            new_x = - lv_obj_get_width(obj);
 800949c:	43c9      	mvns	r1, r1
 800949e:	b28f      	uxth	r7, r1
            break;
 80094a0:	e77a      	b.n	8009398 <lv_obj_align+0x60>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 80094a2:	8a87      	ldrh	r7, [r0, #20]
    return area_p->y2 - area_p->y1 + 1;
 80094a4:	f1c4 0201 	rsb	r2, r4, #1
 80094a8:	f8b1 8016 	ldrh.w	r8, [r1, #22]
 80094ac:	eba7 0909 	sub.w	r9, r7, r9
 80094b0:	8a8f      	ldrh	r7, [r1, #20]
 80094b2:	4442      	add	r2, r8
 80094b4:	eba7 0109 	sub.w	r1, r7, r9
 80094b8:	b292      	uxth	r2, r2
 80094ba:	1b49      	subs	r1, r1, r5
 80094bc:	b28f      	uxth	r7, r1
            break;
 80094be:	e76b      	b.n	8009398 <lv_obj_align+0x60>
    return area_p->x2 - area_p->x1 + 1;
 80094c0:	8a8a      	ldrh	r2, [r1, #20]
 80094c2:	f1c5 0701 	rsb	r7, r5, #1
    return area_p->y2 - area_p->y1 + 1;
 80094c6:	8ac9      	ldrh	r1, [r1, #22]
    return area_p->x2 - area_p->x1 + 1;
 80094c8:	4417      	add	r7, r2
 80094ca:	8a82      	ldrh	r2, [r0, #20]
 80094cc:	3201      	adds	r2, #1
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 80094ce:	b23f      	sxth	r7, r7
 80094d0:	eba2 0909 	sub.w	r9, r2, r9
 80094d4:	2f00      	cmp	r7, #0
    return area_p->y2 - area_p->y1 + 1;
 80094d6:	f1c4 0201 	rsb	r2, r4, #1
 80094da:	fa0f f989 	sxth.w	r9, r9
 80094de:	bfb8      	it	lt
 80094e0:	3701      	addlt	r7, #1
 80094e2:	440a      	add	r2, r1
 80094e4:	f1b9 0f00 	cmp.w	r9, #0
 80094e8:	ea4f 0767 	mov.w	r7, r7, asr #1
 80094ec:	b292      	uxth	r2, r2
 80094ee:	bfb8      	it	lt
 80094f0:	f109 0901 	addlt.w	r9, r9, #1
 80094f4:	eba7 0769 	sub.w	r7, r7, r9, asr #1
 80094f8:	b2bf      	uxth	r7, r7
            break;
 80094fa:	e74d      	b.n	8009398 <lv_obj_align+0x60>
 80094fc:	8ac9      	ldrh	r1, [r1, #22]
 80094fe:	f1c4 0201 	rsb	r2, r4, #1
            break;
 8009502:	2700      	movs	r7, #0
 8009504:	440a      	add	r2, r1
 8009506:	b292      	uxth	r2, r2
 8009508:	e746      	b.n	8009398 <lv_obj_align+0x60>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800950a:	8a82      	ldrh	r2, [r0, #20]
 800950c:	8a89      	ldrh	r1, [r1, #20]
 800950e:	eba2 0909 	sub.w	r9, r2, r9
 8009512:	8ac2      	ldrh	r2, [r0, #22]
 8009514:	eba1 0109 	sub.w	r1, r1, r9
 8009518:	eba2 0208 	sub.w	r2, r2, r8
 800951c:	1b49      	subs	r1, r1, r5
            new_y = - lv_obj_get_height(obj);
 800951e:	43d2      	mvns	r2, r2
 8009520:	b28f      	uxth	r7, r1
 8009522:	b292      	uxth	r2, r2
            break;
 8009524:	e738      	b.n	8009398 <lv_obj_align+0x60>
    return area_p->x2 - area_p->x1 + 1;
 8009526:	8a8a      	ldrh	r2, [r1, #20]
 8009528:	f1c5 0101 	rsb	r1, r5, #1
 800952c:	4411      	add	r1, r2
 800952e:	8a82      	ldrh	r2, [r0, #20]
 8009530:	3201      	adds	r2, #1
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8009532:	b209      	sxth	r1, r1
 8009534:	eba2 0909 	sub.w	r9, r2, r9
 8009538:	2900      	cmp	r1, #0
    return area_p->y2 - area_p->y1 + 1;
 800953a:	8ac2      	ldrh	r2, [r0, #22]
 800953c:	fa0f f989 	sxth.w	r9, r9
 8009540:	bfb8      	it	lt
 8009542:	3101      	addlt	r1, #1
 8009544:	eba2 0208 	sub.w	r2, r2, r8
 8009548:	f1b9 0f00 	cmp.w	r9, #0
 800954c:	ea4f 0161 	mov.w	r1, r1, asr #1
            new_y = - lv_obj_get_height(obj);
 8009550:	ea6f 0202 	mvn.w	r2, r2
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8009554:	bfb8      	it	lt
 8009556:	f109 0901 	addlt.w	r9, r9, #1
 800955a:	b292      	uxth	r2, r2
 800955c:	eba1 0169 	sub.w	r1, r1, r9, asr #1
 8009560:	b28f      	uxth	r7, r1
            break;
 8009562:	e719      	b.n	8009398 <lv_obj_align+0x60>
 8009564:	8ac2      	ldrh	r2, [r0, #22]
            break;
 8009566:	2700      	movs	r7, #0
 8009568:	eba2 0208 	sub.w	r2, r2, r8
            new_y = -lv_obj_get_height(obj);
 800956c:	43d2      	mvns	r2, r2
 800956e:	b292      	uxth	r2, r2
            break;
 8009570:	e712      	b.n	8009398 <lv_obj_align+0x60>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8009572:	8a87      	ldrh	r7, [r0, #20]
 8009574:	f1c4 0201 	rsb	r2, r4, #1
 8009578:	f8b1 a016 	ldrh.w	sl, [r1, #22]
 800957c:	eba7 0909 	sub.w	r9, r7, r9
 8009580:	8a8f      	ldrh	r7, [r1, #20]
 8009582:	4452      	add	r2, sl
 8009584:	eba7 0109 	sub.w	r1, r7, r9
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 8009588:	b212      	sxth	r2, r2
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800958a:	1b49      	subs	r1, r1, r5
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 800958c:	2a00      	cmp	r2, #0
 800958e:	b28f      	uxth	r7, r1
 8009590:	f6bf af2f 	bge.w	80093f2 <lv_obj_align+0xba>
 8009594:	e75a      	b.n	800944c <lv_obj_align+0x114>
 8009596:	8ac9      	ldrh	r1, [r1, #22]
 8009598:	f1c4 0201 	rsb	r2, r4, #1
            break;
 800959c:	2700      	movs	r7, #0
 800959e:	440a      	add	r2, r1
 80095a0:	8ac1      	ldrh	r1, [r0, #22]
 80095a2:	3101      	adds	r1, #1
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 80095a4:	b212      	sxth	r2, r2
 80095a6:	eba1 0808 	sub.w	r8, r1, r8
 80095aa:	2a00      	cmp	r2, #0
 80095ac:	fa0f f888 	sxth.w	r8, r8
 80095b0:	bfb8      	it	lt
 80095b2:	3201      	addlt	r2, #1
 80095b4:	f1b8 0f00 	cmp.w	r8, #0
 80095b8:	ea4f 0262 	mov.w	r2, r2, asr #1
 80095bc:	bfb8      	it	lt
 80095be:	f108 0801 	addlt.w	r8, r8, #1
 80095c2:	eba2 0268 	sub.w	r2, r2, r8, asr #1
 80095c6:	b292      	uxth	r2, r2
            break;
 80095c8:	e6e6      	b.n	8009398 <lv_obj_align+0x60>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 80095ca:	8a82      	ldrh	r2, [r0, #20]
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 80095cc:	f8b0 a016 	ldrh.w	sl, [r0, #22]
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 80095d0:	eba2 0909 	sub.w	r9, r2, r9
 80095d4:	8a8f      	ldrh	r7, [r1, #20]
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 80095d6:	8aca      	ldrh	r2, [r1, #22]
 80095d8:	ebaa 0808 	sub.w	r8, sl, r8
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 80095dc:	eba7 0109 	sub.w	r1, r7, r9
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 80095e0:	eba2 0208 	sub.w	r2, r2, r8
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 80095e4:	1b49      	subs	r1, r1, r5
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 80095e6:	1b12      	subs	r2, r2, r4
 80095e8:	b28f      	uxth	r7, r1
 80095ea:	b292      	uxth	r2, r2
            break;
 80095ec:	e6d4      	b.n	8009398 <lv_obj_align+0x60>
    return area_p->x2 - area_p->x1 + 1;
 80095ee:	8a8a      	ldrh	r2, [r1, #20]
 80095f0:	f1c5 0701 	rsb	r7, r5, #1
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 80095f4:	f8b0 a016 	ldrh.w	sl, [r0, #22]
 80095f8:	4417      	add	r7, r2
 80095fa:	8a82      	ldrh	r2, [r0, #20]
 80095fc:	ebaa 0808 	sub.w	r8, sl, r8
 8009600:	3201      	adds	r2, #1
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8009602:	b23f      	sxth	r7, r7
 8009604:	eba2 0909 	sub.w	r9, r2, r9
 8009608:	2f00      	cmp	r7, #0
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 800960a:	8aca      	ldrh	r2, [r1, #22]
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800960c:	fa0f f989 	sxth.w	r9, r9
 8009610:	bfb8      	it	lt
 8009612:	3701      	addlt	r7, #1
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 8009614:	eba2 0208 	sub.w	r2, r2, r8
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8009618:	f1b9 0f00 	cmp.w	r9, #0
 800961c:	ea4f 0767 	mov.w	r7, r7, asr #1
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 8009620:	eba2 0204 	sub.w	r2, r2, r4
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8009624:	bfb8      	it	lt
 8009626:	f109 0901 	addlt.w	r9, r9, #1
 800962a:	b292      	uxth	r2, r2
 800962c:	eba7 0769 	sub.w	r7, r7, r9, asr #1
 8009630:	b2bf      	uxth	r7, r7
            break;
 8009632:	e6b1      	b.n	8009398 <lv_obj_align+0x60>
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 8009634:	f8b0 9016 	ldrh.w	r9, [r0, #22]
            break;
 8009638:	2700      	movs	r7, #0
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 800963a:	8aca      	ldrh	r2, [r1, #22]
 800963c:	eba9 0808 	sub.w	r8, r9, r8
 8009640:	eba2 0208 	sub.w	r2, r2, r8
 8009644:	1b12      	subs	r2, r2, r4
 8009646:	b292      	uxth	r2, r2
            break;
 8009648:	e6a6      	b.n	8009398 <lv_obj_align+0x60>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800964a:	8a87      	ldrh	r7, [r0, #20]
            break;
 800964c:	2200      	movs	r2, #0
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800964e:	8a89      	ldrh	r1, [r1, #20]
 8009650:	eba7 0909 	sub.w	r9, r7, r9
 8009654:	eba1 0109 	sub.w	r1, r1, r9
 8009658:	1b49      	subs	r1, r1, r5
 800965a:	b28f      	uxth	r7, r1
            break;
 800965c:	e69c      	b.n	8009398 <lv_obj_align+0x60>
 800965e:	8a89      	ldrh	r1, [r1, #20]
 8009660:	f1c5 0201 	rsb	r2, r5, #1
 8009664:	440a      	add	r2, r1
 8009666:	8a81      	ldrh	r1, [r0, #20]
 8009668:	3101      	adds	r1, #1
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800966a:	b212      	sxth	r2, r2
 800966c:	eba1 0109 	sub.w	r1, r1, r9
 8009670:	2a00      	cmp	r2, #0
 8009672:	b209      	sxth	r1, r1
 8009674:	bfb8      	it	lt
 8009676:	3201      	addlt	r2, #1
 8009678:	2900      	cmp	r1, #0
 800967a:	ea4f 0262 	mov.w	r2, r2, asr #1
 800967e:	bfb8      	it	lt
 8009680:	3101      	addlt	r1, #1
 8009682:	eba2 0161 	sub.w	r1, r2, r1, asr #1
            break;
 8009686:	2200      	movs	r2, #0
 8009688:	b28f      	uxth	r7, r1
 800968a:	e685      	b.n	8009398 <lv_obj_align+0x60>
    rel_x = obj->coords.x1 - parent->coords.x1;
 800968c:	eba9 010e 	sub.w	r1, r9, lr
    rel_y = obj->coords.y1 - parent->coords.y1;
 8009690:	eba8 020c 	sub.w	r2, r8, ip
 8009694:	b28f      	uxth	r7, r1
 8009696:	b292      	uxth	r2, r2
 8009698:	e67e      	b.n	8009398 <lv_obj_align+0x60>
 800969a:	bf00      	nop

0800969c <lv_obj_refresh_style>:
{
 800969c:	b510      	push	{r4, lr}
 800969e:	4604      	mov	r4, r0
    lv_obj_invalidate(obj);
 80096a0:	f7ff fbca 	bl	8008e38 <lv_obj_invalidate>
    obj->signal_func(obj, LV_SIGNAL_STYLE_CHG, NULL);
 80096a4:	2200      	movs	r2, #0
 80096a6:	2103      	movs	r1, #3
 80096a8:	69a3      	ldr	r3, [r4, #24]
 80096aa:	4620      	mov	r0, r4
 80096ac:	4798      	blx	r3
    lv_obj_invalidate(obj);
 80096ae:	4620      	mov	r0, r4
}
 80096b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(obj);
 80096b4:	f7ff bbc0 	b.w	8008e38 <lv_obj_invalidate>

080096b8 <lv_obj_set_hidden>:
    if(!obj->hidden) lv_obj_invalidate(obj);    /*Invalidate when not hidden (hidden objects are ignored) */
 80096b8:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 80096bc:	06da      	lsls	r2, r3, #27
{
 80096be:	b570      	push	{r4, r5, r6, lr}
 80096c0:	4604      	mov	r4, r0
 80096c2:	460d      	mov	r5, r1
    if(!obj->hidden) lv_obj_invalidate(obj);    /*Invalidate when not hidden (hidden objects are ignored) */
 80096c4:	d511      	bpl.n	80096ea <lv_obj_set_hidden+0x32>
    obj->hidden = en == false ? 0 : 1;
 80096c6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80096ca:	f365 1304 	bfi	r3, r5, #4, #1
 80096ce:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    if(!obj->hidden) lv_obj_invalidate(obj);    /*Invalidate when not hidden (hidden objects are ignored) */
 80096d2:	06db      	lsls	r3, r3, #27
 80096d4:	d402      	bmi.n	80096dc <lv_obj_set_hidden+0x24>
 80096d6:	4620      	mov	r0, r4
 80096d8:	f7ff fbae 	bl	8008e38 <lv_obj_invalidate>
    return obj->par;
 80096dc:	6820      	ldr	r0, [r4, #0]
    par->signal_func(par, LV_SIGNAL_CHILD_CHG, obj);
 80096de:	4622      	mov	r2, r4
 80096e0:	2101      	movs	r1, #1
 80096e2:	6983      	ldr	r3, [r0, #24]
}
 80096e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    par->signal_func(par, LV_SIGNAL_CHILD_CHG, obj);
 80096e8:	4718      	bx	r3
    if(!obj->hidden) lv_obj_invalidate(obj);    /*Invalidate when not hidden (hidden objects are ignored) */
 80096ea:	f7ff fba5 	bl	8008e38 <lv_obj_invalidate>
 80096ee:	e7ea      	b.n	80096c6 <lv_obj_set_hidden+0xe>

080096f0 <lv_obj_set_click>:
    obj->click = (en == true ? 1 : 0);
 80096f0:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 80096f4:	f361 0300 	bfi	r3, r1, #0, #1
 80096f8:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 80096fc:	4770      	bx	lr
 80096fe:	bf00      	nop

08009700 <lv_obj_set_drag>:
    if(en == true) lv_obj_set_click(obj, true);     /*Drag is useless without enabled clicking*/
 8009700:	b129      	cbz	r1, 800970e <lv_obj_set_drag+0xe>
    obj->click = (en == true ? 1 : 0);
 8009702:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8009706:	f043 0301 	orr.w	r3, r3, #1
 800970a:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    obj->drag = (en == true ? 1 : 0);
 800970e:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8009712:	f361 0341 	bfi	r3, r1, #1, #1
 8009716:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 800971a:	4770      	bx	lr

0800971c <lv_obj_set_drag_throw>:
    obj->drag_throw = (en == true ? 1 : 0);
 800971c:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8009720:	f361 0382 	bfi	r3, r1, #2, #1
 8009724:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 8009728:	4770      	bx	lr
 800972a:	bf00      	nop

0800972c <lv_obj_set_drag_parent>:
    obj->drag_parent = (en == true ? 1 : 0);
 800972c:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8009730:	f361 03c3 	bfi	r3, r1, #3, #1
 8009734:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 8009738:	4770      	bx	lr
 800973a:	bf00      	nop

0800973c <lv_obj_set_protect>:
    obj->protect |= prot;
 800973c:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8009740:	4319      	orrs	r1, r3
 8009742:	f880 1031 	strb.w	r1, [r0, #49]	; 0x31
 8009746:	4770      	bx	lr

08009748 <lv_obj_clear_protect>:
    obj->protect &= prot;
 8009748:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800974c:	ea23 0101 	bic.w	r1, r3, r1
 8009750:	f880 1031 	strb.w	r1, [r0, #49]	; 0x31
 8009754:	4770      	bx	lr
 8009756:	bf00      	nop

08009758 <lv_obj_set_signal_func>:
    obj->signal_func = fp;
 8009758:	6181      	str	r1, [r0, #24]
 800975a:	4770      	bx	lr

0800975c <lv_obj_set_design_func>:
    obj->design_func = fp;
 800975c:	61c1      	str	r1, [r0, #28]
 800975e:	4770      	bx	lr

08009760 <lv_obj_allocate_ext_attr>:
{
 8009760:	b510      	push	{r4, lr}
 8009762:	4604      	mov	r4, r0
    obj->ext_attr = lv_mem_realloc(obj->ext_attr, ext_size);
 8009764:	6a00      	ldr	r0, [r0, #32]
 8009766:	f006 fce7 	bl	8010138 <lv_mem_realloc>
 800976a:	6220      	str	r0, [r4, #32]
}
 800976c:	bd10      	pop	{r4, pc}
 800976e:	bf00      	nop

08009770 <lv_obj_refresh_ext_size>:
    obj->ext_size = 0;
 8009770:	2200      	movs	r2, #0
    obj->signal_func(obj, LV_SIGNAL_REFR_EXT_SIZE, NULL);
 8009772:	2104      	movs	r1, #4
 8009774:	6983      	ldr	r3, [r0, #24]
{
 8009776:	b510      	push	{r4, lr}
 8009778:	4604      	mov	r4, r0
    obj->ext_size = 0;
 800977a:	8682      	strh	r2, [r0, #52]	; 0x34
    obj->signal_func(obj, LV_SIGNAL_REFR_EXT_SIZE, NULL);
 800977c:	4798      	blx	r3
    lv_obj_invalidate(obj);
 800977e:	4620      	mov	r0, r4
}
 8009780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(obj);
 8009784:	f7ff bb58 	b.w	8008e38 <lv_obj_invalidate>

08009788 <lv_obj_animate>:
{
 8009788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800978a:	b08b      	sub	sp, #44	; 0x2c
    a.playback_pause = 0;
 800978c:	2500      	movs	r5, #0
    a.act_time = (int32_t) - delay;
 800978e:	425b      	negs	r3, r3
    switch(type) {
 8009790:	f001 067f 	and.w	r6, r1, #127	; 0x7f
    a.playback = 0;
 8009794:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
    bool out = (type & LV_ANIM_DIR_MASK) == LV_ANIM_IN ? false : true;
 8009798:	b249      	sxtb	r1, r1
{
 800979a:	9f10      	ldr	r7, [sp, #64]	; 0x40
    a.repeat = 0;
 800979c:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
    a.act_time = (int32_t) - delay;
 80097a0:	f8ad 301e 	strh.w	r3, [sp, #30]
    a.path = lv_anim_path_linear;
 80097a4:	4b2e      	ldr	r3, [pc, #184]	; (8009860 <lv_obj_animate+0xd8>)
    a.repeat = 0;
 80097a6:	f365 0441 	bfi	r4, r5, #1, #1
    a.time = time;
 80097aa:	f8ad 201c 	strh.w	r2, [sp, #28]
    a.var = obj;
 80097ae:	9001      	str	r0, [sp, #4]
    a.repeat = 0;
 80097b0:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
    a.playback_pause = 0;
 80097b4:	f8ad 5020 	strh.w	r5, [sp, #32]
    a.repeat_pause = 0;
 80097b8:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
    return obj->par;
 80097bc:	6802      	ldr	r2, [r0, #0]
    a.end_cb = (void(*)(void *))cb;
 80097be:	9703      	str	r7, [sp, #12]
    a.path = lv_anim_path_linear;
 80097c0:	9304      	str	r3, [sp, #16]
    switch(type) {
 80097c2:	2e06      	cmp	r6, #6
 80097c4:	d811      	bhi.n	80097ea <lv_obj_animate+0x62>
 80097c6:	e8df f006 	tbb	[pc, r6]
 80097ca:	2b26      	.short	0x2b26
 80097cc:	453f0439 	.word	0x453f0439
 80097d0:	1b          	.byte	0x1b
 80097d1:	00          	.byte	0x00
    return area_p->y2 - area_p->y1 + 1;
 80097d2:	8ad3      	ldrh	r3, [r2, #22]
    rel_y = obj->coords.y1 - parent->coords.y1;
 80097d4:	8a40      	ldrh	r0, [r0, #18]
 80097d6:	3301      	adds	r3, #1
 80097d8:	8a52      	ldrh	r2, [r2, #18]
            a.fp = (void(*)(void *, int32_t))lv_obj_set_y;
 80097da:	4c22      	ldr	r4, [pc, #136]	; (8009864 <lv_obj_animate+0xdc>)
 80097dc:	1a9b      	subs	r3, r3, r2
    rel_y = obj->coords.y1 - parent->coords.y1;
 80097de:	1a82      	subs	r2, r0, r2
            a.fp = (void(*)(void *, int32_t))lv_obj_set_y;
 80097e0:	9402      	str	r4, [sp, #8]
            a.start = lv_obj_get_height(par);
 80097e2:	b21b      	sxth	r3, r3
            a.end = lv_obj_get_y(obj);
 80097e4:	b212      	sxth	r2, r2
            a.start = lv_obj_get_height(par);
 80097e6:	9305      	str	r3, [sp, #20]
            a.end = lv_obj_get_y(obj);
 80097e8:	9206      	str	r2, [sp, #24]
    if(out != false) {
 80097ea:	2900      	cmp	r1, #0
 80097ec:	da03      	bge.n	80097f6 <lv_obj_animate+0x6e>
        int32_t tmp = a.start;
 80097ee:	9a05      	ldr	r2, [sp, #20]
        a.start = a.end;
 80097f0:	9b06      	ldr	r3, [sp, #24]
        a.end = tmp;
 80097f2:	9206      	str	r2, [sp, #24]
        a.start = a.end;
 80097f4:	9305      	str	r3, [sp, #20]
    lv_anim_create(&a);
 80097f6:	a801      	add	r0, sp, #4
 80097f8:	f006 f822 	bl	800f840 <lv_anim_create>
}
 80097fc:	b00b      	add	sp, #44	; 0x2c
 80097fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009800:	8ac3      	ldrh	r3, [r0, #22]
            a.start = 0;
 8009802:	2400      	movs	r4, #0
 8009804:	8a40      	ldrh	r0, [r0, #18]
 8009806:	3301      	adds	r3, #1
            a.fp = (void(*)(void *, int32_t))lv_obj_set_height;
 8009808:	4a17      	ldr	r2, [pc, #92]	; (8009868 <lv_obj_animate+0xe0>)
 800980a:	1a1b      	subs	r3, r3, r0
            a.start = 0;
 800980c:	9405      	str	r4, [sp, #20]
            a.fp = (void(*)(void *, int32_t))lv_obj_set_height;
 800980e:	9202      	str	r2, [sp, #8]
            a.end = lv_obj_get_height(obj);
 8009810:	b21b      	sxth	r3, r3
 8009812:	9306      	str	r3, [sp, #24]
            break;
 8009814:	e7e9      	b.n	80097ea <lv_obj_animate+0x62>
            a.fp = NULL;
 8009816:	2300      	movs	r3, #0
 8009818:	9302      	str	r3, [sp, #8]
            a.start = 0;
 800981a:	9305      	str	r3, [sp, #20]
            a.end = 0;
 800981c:	9306      	str	r3, [sp, #24]
            break;
 800981e:	e7e4      	b.n	80097ea <lv_obj_animate+0x62>
 8009820:	8ac3      	ldrh	r3, [r0, #22]
    rel_y = obj->coords.y1 - parent->coords.y1;
 8009822:	8a54      	ldrh	r4, [r2, #18]
 8009824:	8a40      	ldrh	r0, [r0, #18]
 8009826:	3301      	adds	r3, #1
            a.fp = (void(*)(void *, int32_t))lv_obj_set_y;
 8009828:	4a0e      	ldr	r2, [pc, #56]	; (8009864 <lv_obj_animate+0xdc>)
 800982a:	1a1b      	subs	r3, r3, r0
    rel_y = obj->coords.y1 - parent->coords.y1;
 800982c:	1b00      	subs	r0, r0, r4
            a.fp = (void(*)(void *, int32_t))lv_obj_set_y;
 800982e:	9202      	str	r2, [sp, #8]
            a.start = -lv_obj_get_height(obj);
 8009830:	b21b      	sxth	r3, r3
            a.end = lv_obj_get_y(obj);
 8009832:	b200      	sxth	r0, r0
            a.start = -lv_obj_get_height(obj);
 8009834:	425b      	negs	r3, r3
            a.end = lv_obj_get_y(obj);
 8009836:	9006      	str	r0, [sp, #24]
            a.start = -lv_obj_get_height(obj);
 8009838:	9305      	str	r3, [sp, #20]
            break;
 800983a:	e7d6      	b.n	80097ea <lv_obj_animate+0x62>
    return area_p->x2 - area_p->x1 + 1;
 800983c:	8a83      	ldrh	r3, [r0, #20]
    rel_x = obj->coords.x1 - parent->coords.x1;
 800983e:	8a14      	ldrh	r4, [r2, #16]
 8009840:	8a00      	ldrh	r0, [r0, #16]
 8009842:	3301      	adds	r3, #1
            a.fp = (void(*)(void *, int32_t))lv_obj_set_x;
 8009844:	4a09      	ldr	r2, [pc, #36]	; (800986c <lv_obj_animate+0xe4>)
 8009846:	e7f0      	b.n	800982a <lv_obj_animate+0xa2>
 8009848:	8a93      	ldrh	r3, [r2, #20]
    rel_x = obj->coords.x1 - parent->coords.x1;
 800984a:	8a00      	ldrh	r0, [r0, #16]
 800984c:	3301      	adds	r3, #1
 800984e:	8a12      	ldrh	r2, [r2, #16]
            a.fp = (void(*)(void *, int32_t))lv_obj_set_x;
 8009850:	4c06      	ldr	r4, [pc, #24]	; (800986c <lv_obj_animate+0xe4>)
 8009852:	e7c3      	b.n	80097dc <lv_obj_animate+0x54>
 8009854:	8a83      	ldrh	r3, [r0, #20]
            a.start = 0;
 8009856:	2400      	movs	r4, #0
 8009858:	8a00      	ldrh	r0, [r0, #16]
 800985a:	3301      	adds	r3, #1
            a.fp = (void(*)(void *, int32_t))lv_obj_set_width;
 800985c:	4a04      	ldr	r2, [pc, #16]	; (8009870 <lv_obj_animate+0xe8>)
 800985e:	e7d4      	b.n	800980a <lv_obj_animate+0x82>
 8009860:	0800f8dd 	.word	0x0800f8dd
 8009864:	08009295 	.word	0x08009295
 8009868:	08009329 	.word	0x08009329
 800986c:	08009281 	.word	0x08009281
 8009870:	08009319 	.word	0x08009319

08009874 <lv_scr_act>:
    return LV_GC_ROOT(_lv_act_scr);
 8009874:	4b01      	ldr	r3, [pc, #4]	; (800987c <lv_scr_act+0x8>)
}
 8009876:	6818      	ldr	r0, [r3, #0]
 8009878:	4770      	bx	lr
 800987a:	bf00      	nop
 800987c:	20017ff8 	.word	0x20017ff8

08009880 <lv_layer_top>:
    return LV_GC_ROOT(_lv_top_layer);
 8009880:	4b01      	ldr	r3, [pc, #4]	; (8009888 <lv_layer_top+0x8>)
}
 8009882:	6818      	ldr	r0, [r3, #0]
 8009884:	4770      	bx	lr
 8009886:	bf00      	nop
 8009888:	20017ff4 	.word	0x20017ff4

0800988c <lv_layer_sys>:
    return LV_GC_ROOT(_lv_sys_layer);
 800988c:	4b01      	ldr	r3, [pc, #4]	; (8009894 <lv_layer_sys+0x8>)
}
 800988e:	6818      	ldr	r0, [r3, #0]
 8009890:	4770      	bx	lr
 8009892:	bf00      	nop
 8009894:	2001801c 	.word	0x2001801c

08009898 <lv_obj_get_parent>:
}
 8009898:	6800      	ldr	r0, [r0, #0]
 800989a:	4770      	bx	lr

0800989c <lv_obj_get_child>:
        result = lv_ll_get_head(&obj->child_ll);
 800989c:	3004      	adds	r0, #4
    if(child == NULL) {
 800989e:	b109      	cbz	r1, 80098a4 <lv_obj_get_child+0x8>
        result = lv_ll_get_next(&obj->child_ll, child);
 80098a0:	f006 bb82 	b.w	800ffa8 <lv_ll_get_next>
        result = lv_ll_get_head(&obj->child_ll);
 80098a4:	f006 bb78 	b.w	800ff98 <lv_ll_get_head>

080098a8 <refresh_childen_style>:
{
 80098a8:	b538      	push	{r3, r4, r5, lr}
 80098aa:	4605      	mov	r5, r0
        result = lv_ll_get_head(&obj->child_ll);
 80098ac:	3004      	adds	r0, #4
 80098ae:	f006 fb73 	bl	800ff98 <lv_ll_get_head>
    while(child != NULL) {
 80098b2:	b1b0      	cbz	r0, 80098e2 <refresh_childen_style+0x3a>
 80098b4:	4604      	mov	r4, r0
 80098b6:	e005      	b.n	80098c4 <refresh_childen_style+0x1c>
        child = lv_obj_get_child(obj, child);
 80098b8:	4621      	mov	r1, r4
 80098ba:	4628      	mov	r0, r5
 80098bc:	f7ff ffee 	bl	800989c <lv_obj_get_child>
    while(child != NULL) {
 80098c0:	4604      	mov	r4, r0
 80098c2:	b170      	cbz	r0, 80098e2 <refresh_childen_style+0x3a>
        if(child->style_p == NULL) {
 80098c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098c6:	b16b      	cbz	r3, 80098e4 <refresh_childen_style+0x3c>
        } else if(child->style_p->glass) {
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	07db      	lsls	r3, r3, #31
 80098cc:	d5f4      	bpl.n	80098b8 <refresh_childen_style+0x10>
            refresh_childen_style(child);
 80098ce:	4620      	mov	r0, r4
 80098d0:	f7ff ffea 	bl	80098a8 <refresh_childen_style>
        child = lv_obj_get_child(obj, child);
 80098d4:	4621      	mov	r1, r4
 80098d6:	4628      	mov	r0, r5
 80098d8:	f7ff ffe0 	bl	800989c <lv_obj_get_child>
    while(child != NULL) {
 80098dc:	4604      	mov	r4, r0
 80098de:	2800      	cmp	r0, #0
 80098e0:	d1f0      	bne.n	80098c4 <refresh_childen_style+0x1c>
 80098e2:	bd38      	pop	{r3, r4, r5, pc}
            refresh_childen_style(child);     /*Check children too*/
 80098e4:	4620      	mov	r0, r4
 80098e6:	f7ff ffdf 	bl	80098a8 <refresh_childen_style>
            lv_obj_refresh_style(child);       /*Notify the child about the style change*/
 80098ea:	4620      	mov	r0, r4
 80098ec:	f7ff fed6 	bl	800969c <lv_obj_refresh_style>
 80098f0:	e7e2      	b.n	80098b8 <refresh_childen_style+0x10>
 80098f2:	bf00      	nop

080098f4 <lv_obj_set_style>:
{
 80098f4:	b510      	push	{r4, lr}
 80098f6:	4604      	mov	r4, r0
    obj->style_p = style;
 80098f8:	6241      	str	r1, [r0, #36]	; 0x24
    refresh_childen_style(obj);
 80098fa:	f7ff ffd5 	bl	80098a8 <refresh_childen_style>
    lv_obj_refresh_style(obj);
 80098fe:	4620      	mov	r0, r4
}
 8009900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_refresh_style(obj);
 8009904:	f7ff beca 	b.w	800969c <lv_obj_refresh_style>

08009908 <lv_init>:
{
 8009908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    LV_GC_ROOT(_lv_disp_list) = NULL;
 800990c:	4a26      	ldr	r2, [pc, #152]	; (80099a8 <lv_init+0xa0>)
    LV_GC_ROOT(_lv_def_scr) = NULL;
 800990e:	2400      	movs	r4, #0
    LV_GC_ROOT(_lv_indev_list) = NULL;
 8009910:	4b26      	ldr	r3, [pc, #152]	; (80099ac <lv_init+0xa4>)
    LV_GC_ROOT(_lv_act_scr) = NULL;
 8009912:	4d27      	ldr	r5, [pc, #156]	; (80099b0 <lv_init+0xa8>)
    LV_GC_ROOT(_lv_def_scr) = NULL;
 8009914:	4e27      	ldr	r6, [pc, #156]	; (80099b4 <lv_init+0xac>)
    LV_GC_ROOT(_lv_top_layer) = NULL;
 8009916:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80099c0 <lv_init+0xb8>
    LV_GC_ROOT(_lv_sys_layer) = NULL;
 800991a:	4f27      	ldr	r7, [pc, #156]	; (80099b8 <lv_init+0xb0>)
    LV_GC_ROOT(_lv_disp_list) = NULL;
 800991c:	6014      	str	r4, [r2, #0]
    LV_GC_ROOT(_lv_indev_list) = NULL;
 800991e:	601c      	str	r4, [r3, #0]
    LV_GC_ROOT(_lv_def_scr) = NULL;
 8009920:	6034      	str	r4, [r6, #0]
    LV_GC_ROOT(_lv_act_scr) = NULL;
 8009922:	602c      	str	r4, [r5, #0]
    LV_GC_ROOT(_lv_top_layer) = NULL;
 8009924:	f8c9 4000 	str.w	r4, [r9]
    LV_GC_ROOT(_lv_sys_layer) = NULL;
 8009928:	603c      	str	r4, [r7, #0]
    lv_mem_init();
 800992a:	f006 fb95 	bl	8010058 <lv_mem_init>
    lv_task_init();
 800992e:	f006 fcbd 	bl	80102ac <lv_task_init>
    obj->style_p = style;
 8009932:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80099c4 <lv_init+0xbc>
    lv_fs_init();
 8009936:	f006 f9a9 	bl	800fc8c <lv_fs_init>
    lv_ufs_init();
 800993a:	f007 faf3 	bl	8010f24 <lv_ufs_init>
    lv_font_init();
 800993e:	f006 f8fb 	bl	800fb38 <lv_font_init>
    lv_anim_init();
 8009942:	f005 ff2b 	bl	800f79c <lv_anim_init>
    lv_style_init();
 8009946:	f000 fc3b 	bl	800a1c0 <lv_style_init>
    lv_refr_init();
 800994a:	f000 fbc3 	bl	800a0d4 <lv_refr_init>
    lv_ll_init(&LV_GC_ROOT(_lv_scr_ll), sizeof(lv_obj_t));
 800994e:	213c      	movs	r1, #60	; 0x3c
 8009950:	481a      	ldr	r0, [pc, #104]	; (80099bc <lv_init+0xb4>)
 8009952:	f006 fa3d 	bl	800fdd0 <lv_ll_init>
    LV_GC_ROOT(_lv_def_scr) = lv_obj_create(NULL, NULL);
 8009956:	4621      	mov	r1, r4
 8009958:	4620      	mov	r0, r4
 800995a:	f7ff fb65 	bl	8009028 <lv_obj_create>
 800995e:	4603      	mov	r3, r0
    LV_GC_ROOT(_lv_top_layer) = lv_obj_create(NULL, NULL);
 8009960:	4621      	mov	r1, r4
 8009962:	4620      	mov	r0, r4
    LV_GC_ROOT(_lv_def_scr) = lv_obj_create(NULL, NULL);
 8009964:	6033      	str	r3, [r6, #0]
    LV_GC_ROOT(_lv_act_scr) = LV_GC_ROOT(_lv_def_scr);
 8009966:	602b      	str	r3, [r5, #0]
    LV_GC_ROOT(_lv_top_layer) = lv_obj_create(NULL, NULL);
 8009968:	f7ff fb5e 	bl	8009028 <lv_obj_create>
 800996c:	4606      	mov	r6, r0
    obj->style_p = style;
 800996e:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
    LV_GC_ROOT(_lv_top_layer) = lv_obj_create(NULL, NULL);
 8009972:	f8c9 0000 	str.w	r0, [r9]
    refresh_childen_style(obj);
 8009976:	f7ff ff97 	bl	80098a8 <refresh_childen_style>
    lv_obj_refresh_style(obj);
 800997a:	4630      	mov	r0, r6
 800997c:	f7ff fe8e 	bl	800969c <lv_obj_refresh_style>
    LV_GC_ROOT(_lv_sys_layer) = lv_obj_create(NULL, NULL);
 8009980:	4621      	mov	r1, r4
 8009982:	4620      	mov	r0, r4
 8009984:	f7ff fb50 	bl	8009028 <lv_obj_create>
 8009988:	4604      	mov	r4, r0
    obj->style_p = style;
 800998a:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
    LV_GC_ROOT(_lv_sys_layer) = lv_obj_create(NULL, NULL);
 800998e:	6038      	str	r0, [r7, #0]
    refresh_childen_style(obj);
 8009990:	f7ff ff8a 	bl	80098a8 <refresh_childen_style>
    lv_obj_refresh_style(obj);
 8009994:	4620      	mov	r0, r4
 8009996:	f7ff fe81 	bl	800969c <lv_obj_refresh_style>
    lv_obj_invalidate(LV_GC_ROOT(_lv_act_scr));
 800999a:	6828      	ldr	r0, [r5, #0]
 800999c:	f7ff fa4c 	bl	8008e38 <lv_obj_invalidate>
}
 80099a0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    lv_indev_init();
 80099a4:	f7ff b96e 	b.w	8008c84 <lv_indev_init>
 80099a8:	2001803c 	.word	0x2001803c
 80099ac:	20018020 	.word	0x20018020
 80099b0:	20017ff8 	.word	0x20017ff8
 80099b4:	20017ffc 	.word	0x20017ffc
 80099b8:	2001801c 	.word	0x2001801c
 80099bc:	2001800c 	.word	0x2001800c
 80099c0:	20017ff4 	.word	0x20017ff4
 80099c4:	20017e38 	.word	0x20017e38

080099c8 <lv_obj_get_child_back>:
        result = lv_ll_get_tail(&obj->child_ll);
 80099c8:	3004      	adds	r0, #4
    if(child == NULL) {
 80099ca:	b109      	cbz	r1, 80099d0 <lv_obj_get_child_back+0x8>
        result = lv_ll_get_prev(&obj->child_ll, child);
 80099cc:	f006 baf2 	b.w	800ffb4 <lv_ll_get_prev>
        result = lv_ll_get_tail(&obj->child_ll);
 80099d0:	f006 bae6 	b.w	800ffa0 <lv_ll_get_tail>

080099d4 <lv_obj_get_coords>:
    memcpy(dest, src, sizeof(lv_area_t));
 80099d4:	f850 2f10 	ldr.w	r2, [r0, #16]!
 80099d8:	6843      	ldr	r3, [r0, #4]
 80099da:	600a      	str	r2, [r1, #0]
 80099dc:	604b      	str	r3, [r1, #4]
 80099de:	4770      	bx	lr

080099e0 <lv_obj_get_x>:
    rel_x = obj->coords.x1 - parent->coords.x1;
 80099e0:	6803      	ldr	r3, [r0, #0]
 80099e2:	8a00      	ldrh	r0, [r0, #16]
 80099e4:	8a1b      	ldrh	r3, [r3, #16]
 80099e6:	1ac0      	subs	r0, r0, r3
}
 80099e8:	b200      	sxth	r0, r0
 80099ea:	4770      	bx	lr

080099ec <lv_obj_get_y>:
    rel_y = obj->coords.y1 - parent->coords.y1;
 80099ec:	6803      	ldr	r3, [r0, #0]
 80099ee:	8a40      	ldrh	r0, [r0, #18]
 80099f0:	8a5b      	ldrh	r3, [r3, #18]
 80099f2:	1ac0      	subs	r0, r0, r3
}
 80099f4:	b200      	sxth	r0, r0
 80099f6:	4770      	bx	lr

080099f8 <lv_obj_get_width>:
    return area_p->x2 - area_p->x1 + 1;
 80099f8:	8a83      	ldrh	r3, [r0, #20]
 80099fa:	8a02      	ldrh	r2, [r0, #16]
 80099fc:	1c58      	adds	r0, r3, #1
 80099fe:	1a80      	subs	r0, r0, r2
}
 8009a00:	b200      	sxth	r0, r0
 8009a02:	4770      	bx	lr

08009a04 <lv_obj_get_height>:
    return area_p->y2 - area_p->y1 + 1;
 8009a04:	8ac3      	ldrh	r3, [r0, #22]
 8009a06:	8a42      	ldrh	r2, [r0, #18]
 8009a08:	1c58      	adds	r0, r3, #1
 8009a0a:	1a80      	subs	r0, r0, r2
}
 8009a0c:	b200      	sxth	r0, r0
 8009a0e:	4770      	bx	lr

08009a10 <lv_obj_get_style>:
{
 8009a10:	b570      	push	{r4, r5, r6, lr}
    lv_style_t * style_act = obj->style_p;
 8009a12:	6a46      	ldr	r6, [r0, #36]	; 0x24
{
 8009a14:	4605      	mov	r5, r0
    if(style_act == NULL) {
 8009a16:	b13e      	cbz	r6, 8009a28 <lv_obj_get_style+0x18>
    if(obj->group_p) {
 8009a18:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8009a1a:	b118      	cbz	r0, 8009a24 <lv_obj_get_style+0x14>
        if(lv_group_get_focused(obj->group_p) == obj) {
 8009a1c:	f7fe fbfe 	bl	800821c <lv_group_get_focused>
 8009a20:	4285      	cmp	r5, r0
 8009a22:	d024      	beq.n	8009a6e <lv_obj_get_style+0x5e>
}
 8009a24:	4630      	mov	r0, r6
 8009a26:	bd70      	pop	{r4, r5, r6, pc}
        lv_obj_t * par = obj->par;
 8009a28:	6804      	ldr	r4, [r0, #0]
        while(par) {
 8009a2a:	b13c      	cbz	r4, 8009a3c <lv_obj_get_style+0x2c>
            if(par->style_p) {
 8009a2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a2e:	b113      	cbz	r3, 8009a36 <lv_obj_get_style+0x26>
                if(par->style_p->glass == 0) {
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	07db      	lsls	r3, r3, #31
 8009a34:	d50b      	bpl.n	8009a4e <lv_obj_get_style+0x3e>
            par = par->par;
 8009a36:	6824      	ldr	r4, [r4, #0]
        while(par) {
 8009a38:	2c00      	cmp	r4, #0
 8009a3a:	d1f7      	bne.n	8009a2c <lv_obj_get_style+0x1c>
    if(obj->group_p) {
 8009a3c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8009a3e:	b118      	cbz	r0, 8009a48 <lv_obj_get_style+0x38>
        if(lv_group_get_focused(obj->group_p) == obj) {
 8009a40:	f7fe fbec 	bl	800821c <lv_group_get_focused>
 8009a44:	4285      	cmp	r5, r0
 8009a46:	d012      	beq.n	8009a6e <lv_obj_get_style+0x5e>
    if(style_act == NULL) style_act = &lv_style_plain;
 8009a48:	4e10      	ldr	r6, [pc, #64]	; (8009a8c <lv_obj_get_style+0x7c>)
}
 8009a4a:	4630      	mov	r0, r6
 8009a4c:	bd70      	pop	{r4, r5, r6, pc}
    return obj->group_p;
 8009a4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
                    if(lv_group_get_focused(g) == par) {
 8009a50:	4630      	mov	r0, r6
 8009a52:	f7fe fbe3 	bl	800821c <lv_group_get_focused>
 8009a56:	4284      	cmp	r4, r0
 8009a58:	d011      	beq.n	8009a7e <lv_obj_get_style+0x6e>
                        style_act = par->style_p;
 8009a5a:	6a66      	ldr	r6, [r4, #36]	; 0x24
    if(obj->group_p) {
 8009a5c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8009a5e:	b118      	cbz	r0, 8009a68 <lv_obj_get_style+0x58>
        if(lv_group_get_focused(obj->group_p) == obj) {
 8009a60:	f7fe fbdc 	bl	800821c <lv_group_get_focused>
 8009a64:	4285      	cmp	r5, r0
 8009a66:	d002      	beq.n	8009a6e <lv_obj_get_style+0x5e>
    if(style_act == NULL) style_act = &lv_style_plain;
 8009a68:	2e00      	cmp	r6, #0
 8009a6a:	d0ed      	beq.n	8009a48 <lv_obj_get_style+0x38>
 8009a6c:	e7da      	b.n	8009a24 <lv_obj_get_style+0x14>
            style_act = lv_group_mod_style(obj->group_p, style_act);
 8009a6e:	4631      	mov	r1, r6
 8009a70:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8009a72:	f7fe fbbd 	bl	80081f0 <lv_group_mod_style>
 8009a76:	4606      	mov	r6, r0
    if(style_act == NULL) style_act = &lv_style_plain;
 8009a78:	2e00      	cmp	r6, #0
 8009a7a:	d0e5      	beq.n	8009a48 <lv_obj_get_style+0x38>
 8009a7c:	e7d2      	b.n	8009a24 <lv_obj_get_style+0x14>
                        style_act = lv_group_mod_style(g, par->style_p);
 8009a7e:	4630      	mov	r0, r6
 8009a80:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009a82:	f7fe fbb5 	bl	80081f0 <lv_group_mod_style>
 8009a86:	4606      	mov	r6, r0
 8009a88:	e7e8      	b.n	8009a5c <lv_obj_get_style+0x4c>
 8009a8a:	bf00      	nop
 8009a8c:	20017e80 	.word	0x20017e80

08009a90 <lv_obj_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 8009a90:	2a02      	cmp	r2, #2
{
 8009a92:	b570      	push	{r4, r5, r6, lr}
 8009a94:	460d      	mov	r5, r1
 8009a96:	b082      	sub	sp, #8
 8009a98:	4604      	mov	r4, r0
    if(mode == LV_DESIGN_COVER_CHK) {
 8009a9a:	d021      	beq.n	8009ae0 <lv_obj_design+0x50>
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 8009a9c:	b112      	cbz	r2, 8009aa4 <lv_obj_design+0x14>
    return true;
 8009a9e:	2001      	movs	r0, #1
}
 8009aa0:	b002      	add	sp, #8
 8009aa2:	bd70      	pop	{r4, r5, r6, pc}
        lv_style_t * style = lv_obj_get_style(obj);
 8009aa4:	f7ff ffb4 	bl	8009a10 <lv_obj_get_style>
 8009aa8:	4602      	mov	r2, r0
        lv_draw_rect(&obj->coords, mask_p, style, lv_obj_get_opa_scale(obj));
 8009aaa:	f104 0010 	add.w	r0, r4, #16
    while(parent) {
 8009aae:	b16c      	cbz	r4, 8009acc <lv_obj_design+0x3c>
        if(parent->opa_scale_en) return parent->opa_scale;
 8009ab0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8009ab4:	4621      	mov	r1, r4
 8009ab6:	065c      	lsls	r4, r3, #25
 8009ab8:	d504      	bpl.n	8009ac4 <lv_obj_design+0x34>
 8009aba:	e00e      	b.n	8009ada <lv_obj_design+0x4a>
 8009abc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009ac0:	065b      	lsls	r3, r3, #25
 8009ac2:	d40a      	bmi.n	8009ada <lv_obj_design+0x4a>
    return obj->par;
 8009ac4:	680b      	ldr	r3, [r1, #0]
 8009ac6:	4619      	mov	r1, r3
    while(parent) {
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d1f7      	bne.n	8009abc <lv_obj_design+0x2c>
    return LV_OPA_COVER;
 8009acc:	23ff      	movs	r3, #255	; 0xff
        lv_draw_rect(&obj->coords, mask_p, style, lv_obj_get_opa_scale(obj));
 8009ace:	4629      	mov	r1, r5
 8009ad0:	f003 f8aa 	bl	800cc28 <lv_draw_rect>
    return true;
 8009ad4:	2001      	movs	r0, #1
}
 8009ad6:	b002      	add	sp, #8
 8009ad8:	bd70      	pop	{r4, r5, r6, pc}
        if(parent->opa_scale_en) return parent->opa_scale;
 8009ada:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8009ade:	e7f6      	b.n	8009ace <lv_obj_design+0x3e>
        lv_style_t * style = lv_obj_get_style(obj);
 8009ae0:	f7ff ff96 	bl	8009a10 <lv_obj_get_style>
        if(style->body.empty != 0) return false;
 8009ae4:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 8009ae8:	07de      	lsls	r6, r3, #31
 8009aea:	d418      	bmi.n	8009b1e <lv_obj_design+0x8e>
        uint16_t r = style->body.radius;
 8009aec:	8986      	ldrh	r6, [r0, #12]
        if(r == LV_RADIUS_CIRCLE) return false;
 8009aee:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8009af2:	429e      	cmp	r6, r3
 8009af4:	d013      	beq.n	8009b1e <lv_obj_design+0x8e>
    memcpy(dest, src, sizeof(lv_area_t));
 8009af6:	f854 0f10 	ldr.w	r0, [r4, #16]!
 8009afa:	466b      	mov	r3, sp
 8009afc:	6861      	ldr	r1, [r4, #4]
 8009afe:	c303      	stmia	r3!, {r0, r1}
        area_tmp.x1 += r;
 8009b00:	f8bd 2000 	ldrh.w	r2, [sp]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8009b04:	4669      	mov	r1, sp
        area_tmp.x2 -= r;
 8009b06:	f8bd 3004 	ldrh.w	r3, [sp, #4]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8009b0a:	4628      	mov	r0, r5
        area_tmp.x1 += r;
 8009b0c:	4432      	add	r2, r6
        area_tmp.x2 -= r;
 8009b0e:	1b9b      	subs	r3, r3, r6
        area_tmp.x1 += r;
 8009b10:	f8ad 2000 	strh.w	r2, [sp]
        area_tmp.x2 -= r;
 8009b14:	f8ad 3004 	strh.w	r3, [sp, #4]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8009b18:	f005 ffbe 	bl	800fa98 <lv_area_is_in>
 8009b1c:	b910      	cbnz	r0, 8009b24 <lv_obj_design+0x94>
        if(style->body.empty != 0) return false;
 8009b1e:	2000      	movs	r0, #0
}
 8009b20:	b002      	add	sp, #8
 8009b22:	bd70      	pop	{r4, r5, r6, pc}
 8009b24:	6820      	ldr	r0, [r4, #0]
 8009b26:	466b      	mov	r3, sp
 8009b28:	6861      	ldr	r1, [r4, #4]
 8009b2a:	c303      	stmia	r3!, {r0, r1}
        area_tmp.y1 += r;
 8009b2c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8009b30:	4669      	mov	r1, sp
        area_tmp.y2 -= r;
 8009b32:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8009b36:	4628      	mov	r0, r5
        area_tmp.y1 += r;
 8009b38:	4432      	add	r2, r6
        area_tmp.y2 -= r;
 8009b3a:	1b9e      	subs	r6, r3, r6
        area_tmp.y1 += r;
 8009b3c:	f8ad 2002 	strh.w	r2, [sp, #2]
        area_tmp.y2 -= r;
 8009b40:	f8ad 6006 	strh.w	r6, [sp, #6]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8009b44:	f005 ffa8 	bl	800fa98 <lv_area_is_in>
 8009b48:	2800      	cmp	r0, #0
 8009b4a:	d1a9      	bne.n	8009aa0 <lv_obj_design+0x10>
 8009b4c:	e7e7      	b.n	8009b1e <lv_obj_design+0x8e>
 8009b4e:	bf00      	nop

08009b50 <lv_obj_signal>:
{
 8009b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b52:	460c      	mov	r4, r1
 8009b54:	4617      	mov	r7, r2
 8009b56:	4605      	mov	r5, r0
    lv_style_t * style = lv_obj_get_style(obj);
 8009b58:	f7ff ff5a 	bl	8009a10 <lv_obj_get_style>
 8009b5c:	4606      	mov	r6, r0
    lv_indev_t *indev_act = lv_indev_get_act();
 8009b5e:	f7ff f89f 	bl	8008ca0 <lv_indev_get_act>
    if(sign > _LV_SIGNAL_FEEDBACK_SECTION_START && sign < _LV_SIGNAL_FEEDBACK_SECTION_END) {
 8009b62:	f1a4 0308 	sub.w	r3, r4, #8
 8009b66:	2b0a      	cmp	r3, #10
 8009b68:	d80a      	bhi.n	8009b80 <lv_obj_signal+0x30>
		if(indev_act != NULL && indev_act->feedback != NULL)
 8009b6a:	b118      	cbz	r0, 8009b74 <lv_obj_signal+0x24>
 8009b6c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009b6e:	b10b      	cbz	r3, 8009b74 <lv_obj_signal+0x24>
			indev_act->feedback(indev_act, sign);
 8009b70:	4621      	mov	r1, r4
 8009b72:	4798      	blx	r3
    } else if(sign ==  LV_SIGNAL_STYLE_CHG) {
 8009b74:	2c03      	cmp	r4, #3
 8009b76:	d01a      	beq.n	8009bae <lv_obj_signal+0x5e>
    } else if(sign ==  LV_SIGNAL_GET_TYPE) {
 8009b78:	2c06      	cmp	r4, #6
 8009b7a:	d014      	beq.n	8009ba6 <lv_obj_signal+0x56>
    lv_res_t res = LV_RES_OK;
 8009b7c:	2001      	movs	r0, #1
}
 8009b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(sign == LV_SIGNAL_CHILD_CHG) {
 8009b80:	2c01      	cmp	r4, #1
 8009b82:	d105      	bne.n	8009b90 <lv_obj_signal+0x40>
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
 8009b84:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
 8009b88:	43c0      	mvns	r0, r0
 8009b8a:	f000 0001 	and.w	r0, r0, #1
 8009b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if(sign == LV_SIGNAL_REFR_EXT_SIZE) {
 8009b90:	2c04      	cmp	r4, #4
 8009b92:	d1ef      	bne.n	8009b74 <lv_obj_signal+0x24>
        if(style->body.shadow.width > obj->ext_size) obj->ext_size = style->body.shadow.width;
 8009b94:	f9b6 301c 	ldrsh.w	r3, [r6, #28]
 8009b98:	f9b5 2034 	ldrsh.w	r2, [r5, #52]	; 0x34
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	daed      	bge.n	8009b7c <lv_obj_signal+0x2c>
 8009ba0:	86ab      	strh	r3, [r5, #52]	; 0x34
    lv_res_t res = LV_RES_OK;
 8009ba2:	2001      	movs	r0, #1
 8009ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        buf->type[0] = "lv_obj";
 8009ba6:	4b07      	ldr	r3, [pc, #28]	; (8009bc4 <lv_obj_signal+0x74>)
 8009ba8:	2001      	movs	r0, #1
 8009baa:	603b      	str	r3, [r7, #0]
 8009bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    obj->ext_size = 0;
 8009bae:	2200      	movs	r2, #0
    obj->signal_func(obj, LV_SIGNAL_REFR_EXT_SIZE, NULL);
 8009bb0:	69ab      	ldr	r3, [r5, #24]
 8009bb2:	2104      	movs	r1, #4
 8009bb4:	4628      	mov	r0, r5
    obj->ext_size = 0;
 8009bb6:	86aa      	strh	r2, [r5, #52]	; 0x34
    obj->signal_func(obj, LV_SIGNAL_REFR_EXT_SIZE, NULL);
 8009bb8:	4798      	blx	r3
    lv_obj_invalidate(obj);
 8009bba:	4628      	mov	r0, r5
 8009bbc:	f7ff f93c 	bl	8008e38 <lv_obj_invalidate>
 8009bc0:	2001      	movs	r0, #1
 8009bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bc4:	0808ba3c 	.word	0x0808ba3c

08009bc8 <lv_obj_get_hidden>:
    return obj->hidden == 0 ? false : true;
 8009bc8:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
}
 8009bcc:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8009bd0:	4770      	bx	lr
 8009bd2:	bf00      	nop

08009bd4 <lv_obj_get_click>:
    return obj->click == 0 ? false : true;
 8009bd4:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
}
 8009bd8:	f000 0001 	and.w	r0, r0, #1
 8009bdc:	4770      	bx	lr
 8009bde:	bf00      	nop

08009be0 <lv_obj_get_drag>:
    return obj->drag == 0 ? false : true;
 8009be0:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
}
 8009be4:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8009be8:	4770      	bx	lr
 8009bea:	bf00      	nop

08009bec <lv_obj_get_drag_throw>:
    return obj->drag_throw == 0 ? false : true;
 8009bec:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
}
 8009bf0:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8009bf4:	4770      	bx	lr
 8009bf6:	bf00      	nop

08009bf8 <lv_obj_get_drag_parent>:
    return obj->drag_parent == 0 ? false : true;
 8009bf8:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
}
 8009bfc:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8009c00:	4770      	bx	lr
 8009c02:	bf00      	nop

08009c04 <lv_obj_get_opa_scale>:
    while(parent) {
 8009c04:	b160      	cbz	r0, 8009c20 <lv_obj_get_opa_scale+0x1c>
        if(parent->opa_scale_en) return parent->opa_scale;
 8009c06:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8009c0a:	065a      	lsls	r2, r3, #25
 8009c0c:	d504      	bpl.n	8009c18 <lv_obj_get_opa_scale+0x14>
 8009c0e:	e009      	b.n	8009c24 <lv_obj_get_opa_scale+0x20>
 8009c10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009c14:	065b      	lsls	r3, r3, #25
 8009c16:	d405      	bmi.n	8009c24 <lv_obj_get_opa_scale+0x20>
    return obj->par;
 8009c18:	6803      	ldr	r3, [r0, #0]
 8009c1a:	4618      	mov	r0, r3
    while(parent) {
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d1f7      	bne.n	8009c10 <lv_obj_get_opa_scale+0xc>
    return LV_OPA_COVER;
 8009c20:	20ff      	movs	r0, #255	; 0xff
}
 8009c22:	4770      	bx	lr
        if(parent->opa_scale_en) return parent->opa_scale;
 8009c24:	f890 0032 	ldrb.w	r0, [r0, #50]	; 0x32
 8009c28:	4770      	bx	lr
 8009c2a:	bf00      	nop

08009c2c <lv_obj_is_protected>:
    return (obj->protect & prot) == 0 ? false : true ;
 8009c2c:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8009c30:	4219      	tst	r1, r3
}
 8009c32:	bf14      	ite	ne
 8009c34:	2001      	movne	r0, #1
 8009c36:	2000      	moveq	r0, #0
 8009c38:	4770      	bx	lr
 8009c3a:	bf00      	nop

08009c3c <lv_obj_get_signal_func>:
}
 8009c3c:	6980      	ldr	r0, [r0, #24]
 8009c3e:	4770      	bx	lr

08009c40 <lv_obj_get_design_func>:
}
 8009c40:	69c0      	ldr	r0, [r0, #28]
 8009c42:	4770      	bx	lr

08009c44 <lv_obj_get_ext_attr>:
}
 8009c44:	6a00      	ldr	r0, [r0, #32]
 8009c46:	4770      	bx	lr

08009c48 <lv_obj_get_group>:
}
 8009c48:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8009c4a:	4770      	bx	lr

08009c4c <lv_obj_is_focused>:
    if(obj->group_p) {
 8009c4c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009c4e:	b14b      	cbz	r3, 8009c64 <lv_obj_is_focused+0x18>
{
 8009c50:	b510      	push	{r4, lr}
 8009c52:	4604      	mov	r4, r0
        if(lv_group_get_focused(obj->group_p) == obj) return true;
 8009c54:	4618      	mov	r0, r3
 8009c56:	f7fe fae1 	bl	800821c <lv_group_get_focused>
 8009c5a:	1a20      	subs	r0, r4, r0
 8009c5c:	fab0 f080 	clz	r0, r0
 8009c60:	0940      	lsrs	r0, r0, #5
 8009c62:	bd10      	pop	{r4, pc}
    return false;
 8009c64:	4618      	mov	r0, r3
 8009c66:	4770      	bx	lr

08009c68 <lv_refr_get_top_obj>:
 * @param area_p pointer to an area
 * @param obj the first object to start the searching (typically a screen)
 * @return
 */
static lv_obj_t * lv_refr_get_top_obj(const lv_area_t * area_p, lv_obj_t * obj)
{
 8009c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c6a:	460f      	mov	r7, r1
    lv_obj_t * i;
    lv_obj_t * found_p = NULL;

    /*If this object is fully cover the draw area check the children too */
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 8009c6c:	3110      	adds	r1, #16
{
 8009c6e:	4606      	mov	r6, r0
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 8009c70:	f005 ff12 	bl	800fa98 <lv_area_is_in>
 8009c74:	b1e8      	cbz	r0, 8009cb2 <lv_refr_get_top_obj+0x4a>
 8009c76:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8009c7a:	06db      	lsls	r3, r3, #27
 8009c7c:	d419      	bmi.n	8009cb2 <lv_refr_get_top_obj+0x4a>
        LL_READ(obj->child_ll, i)        {
 8009c7e:	1d3d      	adds	r5, r7, #4
 8009c80:	4628      	mov	r0, r5
 8009c82:	f006 f989 	bl	800ff98 <lv_ll_get_head>
 8009c86:	4604      	mov	r4, r0
 8009c88:	b928      	cbnz	r0, 8009c96 <lv_refr_get_top_obj+0x2e>
 8009c8a:	e00c      	b.n	8009ca6 <lv_refr_get_top_obj+0x3e>
 8009c8c:	4628      	mov	r0, r5
 8009c8e:	f006 f98b 	bl	800ffa8 <lv_ll_get_next>
 8009c92:	4604      	mov	r4, r0
 8009c94:	b138      	cbz	r0, 8009ca6 <lv_refr_get_top_obj+0x3e>
            found_p = lv_refr_get_top_obj(area_p, i);
 8009c96:	4621      	mov	r1, r4
 8009c98:	4630      	mov	r0, r6
 8009c9a:	f7ff ffe5 	bl	8009c68 <lv_refr_get_top_obj>
        LL_READ(obj->child_ll, i)        {
 8009c9e:	4621      	mov	r1, r4

            /*If a children is ok then break*/
            if(found_p != NULL) {
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	d0f3      	beq.n	8009c8c <lv_refr_get_top_obj+0x24>
            }
        }
    }

    return found_p;
}
 8009ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_style_t * style = lv_obj_get_style(obj);
 8009ca6:	4638      	mov	r0, r7
 8009ca8:	f7ff feb2 	bl	8009a10 <lv_obj_get_style>
            if(style->body.opa == LV_OPA_COVER &&
 8009cac:	7b83      	ldrb	r3, [r0, #14]
 8009cae:	2bff      	cmp	r3, #255	; 0xff
 8009cb0:	d001      	beq.n	8009cb6 <lv_refr_get_top_obj+0x4e>
    lv_obj_t * found_p = NULL;
 8009cb2:	2000      	movs	r0, #0
 8009cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    obj->design_func(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
 8009cb6:	4631      	mov	r1, r6
 8009cb8:	69fb      	ldr	r3, [r7, #28]
 8009cba:	2202      	movs	r2, #2
 8009cbc:	4638      	mov	r0, r7
 8009cbe:	4798      	blx	r3
            if(style->body.opa == LV_OPA_COVER &&
 8009cc0:	2800      	cmp	r0, #0
 8009cc2:	d0f6      	beq.n	8009cb2 <lv_refr_get_top_obj+0x4a>
                    lv_obj_get_opa_scale(obj) == LV_OPA_COVER) {
 8009cc4:	4638      	mov	r0, r7
 8009cc6:	f7ff ff9d 	bl	8009c04 <lv_obj_get_opa_scale>
                    obj->design_func(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
 8009cca:	28ff      	cmp	r0, #255	; 0xff
 8009ccc:	d1f1      	bne.n	8009cb2 <lv_refr_get_top_obj+0x4a>
 8009cce:	4638      	mov	r0, r7
    return found_p;
 8009cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cd2:	bf00      	nop

08009cd4 <lv_refr_obj.part.2>:
/**
 * Refresh an object an all of its children. (Called recursively)
 * @param obj pointer to an object to refresh
 * @param mask_ori_p pointer to an area, the objects will be drawn only here
 */
static void lv_refr_obj(lv_obj_t * obj, const lv_area_t * mask_ori_p)
 8009cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cd6:	b08b      	sub	sp, #44	; 0x2c
    /* Truncate the original mask to the coordinates of the parent
     * because the parent and its children are visible only here */
    lv_area_t obj_mask;
    lv_area_t obj_ext_mask;
    lv_area_t obj_area;
    lv_coord_t ext_size = obj->ext_size;
 8009cd8:	f9b0 4034 	ldrsh.w	r4, [r0, #52]	; 0x34
static void lv_refr_obj(lv_obj_t * obj, const lv_area_t * mask_ori_p)
 8009cdc:	460e      	mov	r6, r1
 8009cde:	4605      	mov	r5, r0
    lv_obj_get_coords(obj, &obj_area);
 8009ce0:	a904      	add	r1, sp, #16
 8009ce2:	f7ff fe77 	bl	80099d4 <lv_obj_get_coords>
    obj_area.x1 -= ext_size;
 8009ce6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8009cea:	b2a3      	uxth	r3, r4
    obj_area.y1 -= ext_size;
 8009cec:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    obj_area.x2 += ext_size;
 8009cf0:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    obj_area.y2 += ext_size;
 8009cf4:	f8bd 4016 	ldrh.w	r4, [sp, #22]
    obj_area.x1 -= ext_size;
 8009cf8:	1ad2      	subs	r2, r2, r3
    obj_area.y1 -= ext_size;
 8009cfa:	1ac9      	subs	r1, r1, r3
    obj_area.x2 += ext_size;
 8009cfc:	4418      	add	r0, r3
    obj_area.y2 += ext_size;
 8009cfe:	4423      	add	r3, r4
    obj_area.x1 -= ext_size;
 8009d00:	f8ad 2010 	strh.w	r2, [sp, #16]
    obj_area.y1 -= ext_size;
 8009d04:	f8ad 1012 	strh.w	r1, [sp, #18]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 8009d08:	aa04      	add	r2, sp, #16
    obj_area.x2 += ext_size;
 8009d0a:	f8ad 0014 	strh.w	r0, [sp, #20]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 8009d0e:	4631      	mov	r1, r6
 8009d10:	a802      	add	r0, sp, #8
    obj_area.y2 += ext_size;
 8009d12:	f8ad 3016 	strh.w	r3, [sp, #22]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 8009d16:	f005 fe37 	bl	800f988 <lv_area_intersect>

    /*Draw the parent and its children only if they ore on 'mask_parent'*/
    if(union_ok != false) {
 8009d1a:	b908      	cbnz	r0, 8009d20 <lv_refr_obj.part.2+0x4c>

        /* If all the children are redrawn make 'post draw' design */
        obj->design_func(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);

    }
}
 8009d1c:	b00b      	add	sp, #44	; 0x2c
 8009d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        obj->design_func(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
 8009d20:	2200      	movs	r2, #0
 8009d22:	69eb      	ldr	r3, [r5, #28]
 8009d24:	a902      	add	r1, sp, #8
 8009d26:	4628      	mov	r0, r5
 8009d28:	4798      	blx	r3
        lv_obj_get_coords(obj, &obj_area);
 8009d2a:	a904      	add	r1, sp, #16
 8009d2c:	4628      	mov	r0, r5
 8009d2e:	f7ff fe51 	bl	80099d4 <lv_obj_get_coords>
        union_ok = lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
 8009d32:	aa04      	add	r2, sp, #16
 8009d34:	4631      	mov	r1, r6
 8009d36:	4668      	mov	r0, sp
 8009d38:	f005 fe26 	bl	800f988 <lv_area_intersect>
        if(union_ok != false) {
 8009d3c:	b930      	cbnz	r0, 8009d4c <lv_refr_obj.part.2+0x78>
        obj->design_func(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
 8009d3e:	a902      	add	r1, sp, #8
 8009d40:	69eb      	ldr	r3, [r5, #28]
 8009d42:	2201      	movs	r2, #1
 8009d44:	4628      	mov	r0, r5
 8009d46:	4798      	blx	r3
}
 8009d48:	b00b      	add	sp, #44	; 0x2c
 8009d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            LL_READ_BACK(obj->child_ll, child_p) {
 8009d4c:	1d2e      	adds	r6, r5, #4
 8009d4e:	4630      	mov	r0, r6
 8009d50:	f006 f926 	bl	800ffa0 <lv_ll_get_tail>
 8009d54:	4604      	mov	r4, r0
 8009d56:	b938      	cbnz	r0, 8009d68 <lv_refr_obj.part.2+0x94>
 8009d58:	e7f1      	b.n	8009d3e <lv_refr_obj.part.2+0x6a>
 8009d5a:	4621      	mov	r1, r4
 8009d5c:	4630      	mov	r0, r6
 8009d5e:	f006 f929 	bl	800ffb4 <lv_ll_get_prev>
 8009d62:	4604      	mov	r4, r0
 8009d64:	2800      	cmp	r0, #0
 8009d66:	d0ea      	beq.n	8009d3e <lv_refr_obj.part.2+0x6a>
                lv_obj_get_coords(child_p, &child_area);
 8009d68:	a908      	add	r1, sp, #32
 8009d6a:	4620      	mov	r0, r4
 8009d6c:	f7ff fe32 	bl	80099d4 <lv_obj_get_coords>
                child_area.x1 -= ext_size;
 8009d70:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
                child_area.y1 -= ext_size;
 8009d72:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8009d76:	aa08      	add	r2, sp, #32
                child_area.x2 += ext_size;
 8009d78:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
                child_area.x1 -= ext_size;
 8009d7c:	f8bd 7020 	ldrh.w	r7, [sp, #32]
                child_area.y1 -= ext_size;
 8009d80:	1ac9      	subs	r1, r1, r3
                child_area.y2 += ext_size;
 8009d82:	f8bd e026 	ldrh.w	lr, [sp, #38]	; 0x26
                child_area.x2 += ext_size;
 8009d86:	4418      	add	r0, r3
                child_area.x1 -= ext_size;
 8009d88:	1aff      	subs	r7, r7, r3
                child_area.y1 -= ext_size;
 8009d8a:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
                child_area.y2 += ext_size;
 8009d8e:	4473      	add	r3, lr
                child_area.x2 += ext_size;
 8009d90:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8009d94:	4669      	mov	r1, sp
 8009d96:	a806      	add	r0, sp, #24
                child_area.x1 -= ext_size;
 8009d98:	f8ad 7020 	strh.w	r7, [sp, #32]
                child_area.y2 += ext_size;
 8009d9c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8009da0:	f005 fdf2 	bl	800f988 <lv_area_intersect>
                if(union_ok) {
 8009da4:	2800      	cmp	r0, #0
 8009da6:	d0d8      	beq.n	8009d5a <lv_refr_obj.part.2+0x86>
    if(obj->hidden != 0) return;
 8009da8:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8009dac:	06db      	lsls	r3, r3, #27
 8009dae:	d4d4      	bmi.n	8009d5a <lv_refr_obj.part.2+0x86>
 8009db0:	a906      	add	r1, sp, #24
 8009db2:	4620      	mov	r0, r4
 8009db4:	f7ff ff8e 	bl	8009cd4 <lv_refr_obj.part.2>
 8009db8:	e7cf      	b.n	8009d5a <lv_refr_obj.part.2+0x86>
 8009dba:	bf00      	nop

08009dbc <lv_refr_obj_and_children>:
{
 8009dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dc0:	460f      	mov	r7, r1
    if(top_p == NULL) top_p = lv_scr_act();
 8009dc2:	2800      	cmp	r0, #0
 8009dc4:	d046      	beq.n	8009e54 <lv_refr_obj_and_children+0x98>
 8009dc6:	4680      	mov	r8, r0
    if(obj->hidden != 0) return;
 8009dc8:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
 8009dcc:	06da      	lsls	r2, r3, #27
 8009dce:	d53a      	bpl.n	8009e46 <lv_refr_obj_and_children+0x8a>
    par = lv_obj_get_parent(top_p);
 8009dd0:	4640      	mov	r0, r8
 8009dd2:	f7ff fd61 	bl	8009898 <lv_obj_get_parent>
    while(par != NULL) {
 8009dd6:	4606      	mov	r6, r0
 8009dd8:	b318      	cbz	r0, 8009e22 <lv_refr_obj_and_children+0x66>
 8009dda:	4641      	mov	r1, r8
        i = lv_ll_get_prev(&(par->child_ll), border_p);
 8009ddc:	1d35      	adds	r5, r6, #4
 8009dde:	4628      	mov	r0, r5
 8009de0:	f006 f8e8 	bl	800ffb4 <lv_ll_get_prev>
        while(i != NULL) {
 8009de4:	4604      	mov	r4, r0
 8009de6:	b930      	cbnz	r0, 8009df6 <lv_refr_obj_and_children+0x3a>
 8009de8:	e014      	b.n	8009e14 <lv_refr_obj_and_children+0x58>
            i = lv_ll_get_prev(&(par->child_ll), i);
 8009dea:	4621      	mov	r1, r4
 8009dec:	4628      	mov	r0, r5
 8009dee:	f006 f8e1 	bl	800ffb4 <lv_ll_get_prev>
        while(i != NULL) {
 8009df2:	4604      	mov	r4, r0
 8009df4:	b170      	cbz	r0, 8009e14 <lv_refr_obj_and_children+0x58>
    if(obj->hidden != 0) return;
 8009df6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8009dfa:	06db      	lsls	r3, r3, #27
 8009dfc:	d4f5      	bmi.n	8009dea <lv_refr_obj_and_children+0x2e>
 8009dfe:	4620      	mov	r0, r4
 8009e00:	4639      	mov	r1, r7
 8009e02:	f7ff ff67 	bl	8009cd4 <lv_refr_obj.part.2>
            i = lv_ll_get_prev(&(par->child_ll), i);
 8009e06:	4621      	mov	r1, r4
 8009e08:	4628      	mov	r0, r5
 8009e0a:	f006 f8d3 	bl	800ffb4 <lv_ll_get_prev>
        while(i != NULL) {
 8009e0e:	4604      	mov	r4, r0
 8009e10:	2800      	cmp	r0, #0
 8009e12:	d1f0      	bne.n	8009df6 <lv_refr_obj_and_children+0x3a>
        par = lv_obj_get_parent(par);
 8009e14:	4630      	mov	r0, r6
 8009e16:	f7ff fd3f 	bl	8009898 <lv_obj_get_parent>
 8009e1a:	4631      	mov	r1, r6
    while(par != NULL) {
 8009e1c:	b108      	cbz	r0, 8009e22 <lv_refr_obj_and_children+0x66>
 8009e1e:	4606      	mov	r6, r0
 8009e20:	e7dc      	b.n	8009ddc <lv_refr_obj_and_children+0x20>
    par = lv_obj_get_parent(top_p);
 8009e22:	4640      	mov	r0, r8
 8009e24:	f7ff fd38 	bl	8009898 <lv_obj_get_parent>
    while(par != NULL) {
 8009e28:	4604      	mov	r4, r0
 8009e2a:	b188      	cbz	r0, 8009e50 <lv_refr_obj_and_children+0x94>
        par->design_func(par, mask_p, LV_DESIGN_DRAW_POST);
 8009e2c:	69e3      	ldr	r3, [r4, #28]
 8009e2e:	2201      	movs	r2, #1
 8009e30:	4639      	mov	r1, r7
 8009e32:	4620      	mov	r0, r4
 8009e34:	4798      	blx	r3
        par = lv_obj_get_parent(par);
 8009e36:	4620      	mov	r0, r4
 8009e38:	f7ff fd2e 	bl	8009898 <lv_obj_get_parent>
    while(par != NULL) {
 8009e3c:	4604      	mov	r4, r0
 8009e3e:	2800      	cmp	r0, #0
 8009e40:	d1f4      	bne.n	8009e2c <lv_refr_obj_and_children+0x70>
 8009e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e46:	4639      	mov	r1, r7
 8009e48:	4640      	mov	r0, r8
 8009e4a:	f7ff ff43 	bl	8009cd4 <lv_refr_obj.part.2>
 8009e4e:	e7bf      	b.n	8009dd0 <lv_refr_obj_and_children+0x14>
 8009e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(top_p == NULL) top_p = lv_scr_act();
 8009e54:	f7ff fd0e 	bl	8009874 <lv_scr_act>
 8009e58:	4680      	mov	r8, r0
 8009e5a:	e7b5      	b.n	8009dc8 <lv_refr_obj_and_children+0xc>

08009e5c <lv_refr_area_part_vdb>:
{
 8009e5c:	b510      	push	{r4, lr}
 8009e5e:	b082      	sub	sp, #8
 8009e60:	4604      	mov	r4, r0
    lv_vdb_t * vdb_p = lv_vdb_get();
 8009e62:	f000 fbd3 	bl	800a60c <lv_vdb_get>
    if(!vdb_p) {
 8009e66:	b1c8      	cbz	r0, 8009e9c <lv_refr_area_part_vdb+0x40>
    lv_area_intersect(&start_mask, area_p, &vdb_p->area);
 8009e68:	4602      	mov	r2, r0
 8009e6a:	4621      	mov	r1, r4
 8009e6c:	4668      	mov	r0, sp
 8009e6e:	f005 fd8b 	bl	800f988 <lv_area_intersect>
    top_p = lv_refr_get_top_obj(&start_mask, lv_scr_act());
 8009e72:	f7ff fcff 	bl	8009874 <lv_scr_act>
 8009e76:	4601      	mov	r1, r0
 8009e78:	4668      	mov	r0, sp
 8009e7a:	f7ff fef5 	bl	8009c68 <lv_refr_get_top_obj>
    lv_refr_obj_and_children(top_p, &start_mask);
 8009e7e:	4669      	mov	r1, sp
 8009e80:	f7ff ff9c 	bl	8009dbc <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_layer_top(), &start_mask);
 8009e84:	f7ff fcfc 	bl	8009880 <lv_layer_top>
 8009e88:	4669      	mov	r1, sp
 8009e8a:	f7ff ff97 	bl	8009dbc <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_layer_sys(), &start_mask);
 8009e8e:	f7ff fcfd 	bl	800988c <lv_layer_sys>
 8009e92:	4669      	mov	r1, sp
 8009e94:	f7ff ff92 	bl	8009dbc <lv_refr_obj_and_children>
    lv_vdb_flush();
 8009e98:	f000 fbc2 	bl	800a620 <lv_vdb_flush>
}
 8009e9c:	b002      	add	sp, #8
 8009e9e:	bd10      	pop	{r4, pc}

08009ea0 <lv_refr_task>:
{
 8009ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea4:	b087      	sub	sp, #28
    uint32_t start = lv_tick_get();
 8009ea6:	f005 fbd1 	bl	800f64c <lv_tick_get>
 8009eaa:	9003      	str	r0, [sp, #12]
    if(lv_disp_get_active() == NULL) {
 8009eac:	f005 fb3c 	bl	800f528 <lv_disp_get_active>
 8009eb0:	2800      	cmp	r0, #0
 8009eb2:	f000 80d6 	beq.w	800a062 <lv_refr_task+0x1c2>
    for(join_in = 0; join_in < inv_buf_p; join_in++) {
 8009eb6:	4c85      	ldr	r4, [pc, #532]	; (800a0cc <lv_refr_task+0x22c>)
 8009eb8:	8823      	ldrh	r3, [r4, #0]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	f000 80fc 	beq.w	800a0b8 <lv_refr_task+0x218>
 8009ec0:	f04f 0a00 	mov.w	sl, #0
                inv_buf[join_from].joined = 1;
 8009ec4:	f04f 0801 	mov.w	r8, #1
    for(join_in = 0; join_in < inv_buf_p; join_in++) {
 8009ec8:	1d27      	adds	r7, r4, #4
        if(inv_buf[join_in].joined != 0) continue;
 8009eca:	7a3e      	ldrb	r6, [r7, #8]
 8009ecc:	bb96      	cbnz	r6, 8009f34 <lv_refr_task+0x94>
        for(join_from = 0; join_from < inv_buf_p; join_from++) {
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	f000 80f2 	beq.w	800a0b8 <lv_refr_task+0x218>
 8009ed4:	4d7e      	ldr	r5, [pc, #504]	; (800a0d0 <lv_refr_task+0x230>)
 8009ed6:	e004      	b.n	8009ee2 <lv_refr_task+0x42>
 8009ed8:	3601      	adds	r6, #1
 8009eda:	8823      	ldrh	r3, [r4, #0]
 8009edc:	350a      	adds	r5, #10
 8009ede:	429e      	cmp	r6, r3
 8009ee0:	d228      	bcs.n	8009f34 <lv_refr_task+0x94>
            if(inv_buf[join_from].joined != 0 || join_in == join_from) {
 8009ee2:	7a2b      	ldrb	r3, [r5, #8]
            if(lv_area_is_on(&inv_buf[join_in].area,
 8009ee4:	4629      	mov	r1, r5
 8009ee6:	4638      	mov	r0, r7
            if(inv_buf[join_from].joined != 0 || join_in == join_from) {
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d1f5      	bne.n	8009ed8 <lv_refr_task+0x38>
 8009eec:	4556      	cmp	r6, sl
 8009eee:	d0f3      	beq.n	8009ed8 <lv_refr_task+0x38>
            if(lv_area_is_on(&inv_buf[join_in].area,
 8009ef0:	f005 fdb4 	bl	800fa5c <lv_area_is_on>
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	d0ef      	beq.n	8009ed8 <lv_refr_task+0x38>
            lv_area_join(&joined_area, &inv_buf[join_in].area,
 8009ef8:	462a      	mov	r2, r5
 8009efa:	4639      	mov	r1, r7
 8009efc:	a804      	add	r0, sp, #16
 8009efe:	f005 fd6f 	bl	800f9e0 <lv_area_join>
            if(lv_area_get_size(&joined_area) <
 8009f02:	a804      	add	r0, sp, #16
 8009f04:	f005 fd32 	bl	800f96c <lv_area_get_size>
 8009f08:	4683      	mov	fp, r0
                    (lv_area_get_size(&inv_buf[join_in].area) + lv_area_get_size(&inv_buf[join_from].area))) {
 8009f0a:	4638      	mov	r0, r7
 8009f0c:	f005 fd2e 	bl	800f96c <lv_area_get_size>
 8009f10:	4681      	mov	r9, r0
 8009f12:	4628      	mov	r0, r5
 8009f14:	f005 fd2a 	bl	800f96c <lv_area_get_size>
 8009f18:	4448      	add	r0, r9
 8009f1a:	ab04      	add	r3, sp, #16
            if(lv_area_get_size(&joined_area) <
 8009f1c:	4583      	cmp	fp, r0
 8009f1e:	d2db      	bcs.n	8009ed8 <lv_refr_task+0x38>
        for(join_from = 0; join_from < inv_buf_p; join_from++) {
 8009f20:	3601      	adds	r6, #1
 8009f22:	350a      	adds	r5, #10
 8009f24:	cb03      	ldmia	r3!, {r0, r1}
 8009f26:	8823      	ldrh	r3, [r4, #0]
 8009f28:	6038      	str	r0, [r7, #0]
 8009f2a:	429e      	cmp	r6, r3
 8009f2c:	6079      	str	r1, [r7, #4]
                inv_buf[join_from].joined = 1;
 8009f2e:	f805 8c02 	strb.w	r8, [r5, #-2]
        for(join_from = 0; join_from < inv_buf_p; join_from++) {
 8009f32:	d3d6      	bcc.n	8009ee2 <lv_refr_task+0x42>
    for(join_in = 0; join_in < inv_buf_p; join_in++) {
 8009f34:	f10a 0a01 	add.w	sl, sl, #1
 8009f38:	370a      	adds	r7, #10
 8009f3a:	459a      	cmp	sl, r3
 8009f3c:	d3c5      	bcc.n	8009eca <lv_refr_task+0x2a>
    px_num = 0;
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f8c4 2144 	str.w	r2, [r4, #324]	; 0x144
    for(i = 0; i < inv_buf_p; i++) {
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	f000 808c 	beq.w	800a062 <lv_refr_task+0x1c2>
 8009f4a:	4691      	mov	r9, r2
 8009f4c:	4f60      	ldr	r7, [pc, #384]	; (800a0d0 <lv_refr_task+0x230>)
 8009f4e:	e005      	b.n	8009f5c <lv_refr_task+0xbc>
 8009f50:	f109 0901 	add.w	r9, r9, #1
 8009f54:	8823      	ldrh	r3, [r4, #0]
 8009f56:	370a      	adds	r7, #10
 8009f58:	4599      	cmp	r9, r3
 8009f5a:	d270      	bcs.n	800a03e <lv_refr_task+0x19e>
        if(inv_buf[i].joined == 0) {
 8009f5c:	7a39      	ldrb	r1, [r7, #8]
 8009f5e:	2900      	cmp	r1, #0
 8009f60:	d1f6      	bne.n	8009f50 <lv_refr_task+0xb0>
    return area_p->x2 - area_p->x1 + 1;
 8009f62:	88ba      	ldrh	r2, [r7, #4]
 8009f64:	883b      	ldrh	r3, [r7, #0]
 8009f66:	3201      	adds	r2, #1
 8009f68:	f9b7 8006 	ldrsh.w	r8, [r7, #6]
    return area_p->y2 - area_p->y1 + 1;
 8009f6c:	8878      	ldrh	r0, [r7, #2]
    return area_p->x2 - area_p->x1 + 1;
 8009f6e:	1ad2      	subs	r2, r2, r3
    return area_p->y2 - area_p->y1 + 1;
 8009f70:	f108 0601 	add.w	r6, r8, #1
    if(round_cb) {
 8009f74:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8009f78:	1a36      	subs	r6, r6, r0
    int32_t max_row = (uint32_t) LV_VDB_SIZE / w;
 8009f7a:	b212      	sxth	r2, r2
 8009f7c:	f44f 5061 	mov.w	r0, #14400	; 0x3840
    if(max_row > h) max_row = h;
 8009f80:	b236      	sxth	r6, r6
    int32_t max_row = (uint32_t) LV_VDB_SIZE / w;
 8009f82:	fbb0 f2f2 	udiv	r2, r0, r2
 8009f86:	4296      	cmp	r6, r2
 8009f88:	bfa8      	it	ge
 8009f8a:	4616      	movge	r6, r2
    if(round_cb) {
 8009f8c:	b1eb      	cbz	r3, 8009fca <lv_refr_task+0x12a>
        tmp.y2 = max_row;
 8009f8e:	b235      	sxth	r5, r6
        tmp.x1 = 0;
 8009f90:	f8ad 1010 	strh.w	r1, [sp, #16]
        tmp.x2 = 0;
 8009f94:	f8ad 1014 	strh.w	r1, [sp, #20]
        tmp.y1 = 0;
 8009f98:	f8ad 1012 	strh.w	r1, [sp, #18]
 8009f9c:	e003      	b.n	8009fa6 <lv_refr_task+0x106>
        } while(lv_area_get_height(&tmp) > max_row && y_tmp != 0);
 8009f9e:	2d00      	cmp	r5, #0
 8009fa0:	d079      	beq.n	800a096 <lv_refr_task+0x1f6>
 8009fa2:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
            tmp.y2 = y_tmp;
 8009fa6:	f8ad 5016 	strh.w	r5, [sp, #22]
            round_cb(&tmp);
 8009faa:	a804      	add	r0, sp, #16
 8009fac:	4798      	blx	r3
 8009fae:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 8009fb2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8009fb6:	3d01      	subs	r5, #1
 8009fb8:	3201      	adds	r2, #1
 8009fba:	b22d      	sxth	r5, r5
 8009fbc:	1ad3      	subs	r3, r2, r3
        } while(lv_area_get_height(&tmp) > max_row && y_tmp != 0);
 8009fbe:	b21b      	sxth	r3, r3
 8009fc0:	42b3      	cmp	r3, r6
 8009fc2:	dcec      	bgt.n	8009f9e <lv_refr_task+0xfe>
        if(y_tmp == 0) {
 8009fc4:	2d00      	cmp	r5, #0
 8009fc6:	d066      	beq.n	800a096 <lv_refr_task+0x1f6>
            max_row = tmp.y2 + 1;
 8009fc8:	4616      	mov	r6, r2
 8009fca:	f240 130f 	movw	r3, #271	; 0x10f
    for(row = area_p->y1; row  + max_row - 1 <= y2; row += max_row)  {
 8009fce:	f9b7 b002 	ldrsh.w	fp, [r7, #2]
 8009fd2:	4598      	cmp	r8, r3
 8009fd4:	eb0b 0206 	add.w	r2, fp, r6
 8009fd8:	bfa8      	it	ge
 8009fda:	4698      	movge	r8, r3
 8009fdc:	3a01      	subs	r2, #1
 8009fde:	4542      	cmp	r2, r8
 8009fe0:	dc70      	bgt.n	800a0c4 <lv_refr_task+0x224>
        vdb_p->area.y2 = row + max_row - 1;
 8009fe2:	b2b3      	uxth	r3, r6
 8009fe4:	f8cd 9008 	str.w	r9, [sp, #8]
 8009fe8:	46d9      	mov	r9, fp
 8009fea:	9301      	str	r3, [sp, #4]
 8009fec:	3b01      	subs	r3, #1
 8009fee:	469a      	mov	sl, r3
 8009ff0:	e00d      	b.n	800a00e <lv_refr_task+0x16e>
 8009ff2:	f8a0 b006 	strh.w	fp, [r0, #6]
        lv_refr_area_part_vdb(area_p);
 8009ff6:	4638      	mov	r0, r7
 8009ff8:	f7ff ff30 	bl	8009e5c <lv_refr_area_part_vdb>
 8009ffc:	9b01      	ldr	r3, [sp, #4]
 8009ffe:	441d      	add	r5, r3
 800a000:	fa0f f985 	sxth.w	r9, r5
    for(row = area_p->y1; row  + max_row - 1 <= y2; row += max_row)  {
 800a004:	eb09 0106 	add.w	r1, r9, r6
 800a008:	3901      	subs	r1, #1
 800a00a:	4541      	cmp	r1, r8
 800a00c:	dc2c      	bgt.n	800a068 <lv_refr_task+0x1c8>
 800a00e:	fa1f f589 	uxth.w	r5, r9
        lv_vdb_t * vdb_p = lv_vdb_get();
 800a012:	f000 fafb 	bl	800a60c <lv_vdb_get>
 800a016:	eb05 030a 	add.w	r3, r5, sl
        if(!vdb_p) {
 800a01a:	2800      	cmp	r0, #0
 800a01c:	d049      	beq.n	800a0b2 <lv_refr_task+0x212>
        vdb_p->area.x1 = area_p->x1;
 800a01e:	f9b7 1000 	ldrsh.w	r1, [r7]
 800a022:	fa0f fb83 	sxth.w	fp, r3
 800a026:	8001      	strh	r1, [r0, #0]
        if(vdb_p->area.y2 > y2) vdb_p->area.y2 = y2;
 800a028:	45d8      	cmp	r8, fp
        vdb_p->area.x2 = area_p->x2;
 800a02a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
        vdb_p->area.y1 = row;
 800a02e:	f8a0 9002 	strh.w	r9, [r0, #2]
        vdb_p->area.x2 = area_p->x2;
 800a032:	8081      	strh	r1, [r0, #4]
        if(vdb_p->area.y2 > y2) vdb_p->area.y2 = y2;
 800a034:	dadd      	bge.n	8009ff2 <lv_refr_task+0x152>
 800a036:	46c3      	mov	fp, r8
 800a038:	f8a0 8006 	strh.w	r8, [r0, #6]
 800a03c:	e7db      	b.n	8009ff6 <lv_refr_task+0x156>
    if(inv_buf_p != 0) {
 800a03e:	b183      	cbz	r3, 800a062 <lv_refr_task+0x1c2>
        memset(inv_buf, 0, sizeof(inv_buf));
 800a040:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800a044:	2100      	movs	r1, #0
 800a046:	4822      	ldr	r0, [pc, #136]	; (800a0d0 <lv_refr_task+0x230>)
 800a048:	f00f fb45 	bl	80196d6 <memset>
        inv_buf_p = 0;
 800a04c:	2300      	movs	r3, #0
        if(monitor_cb != NULL) {
 800a04e:	f8d4 514c 	ldr.w	r5, [r4, #332]	; 0x14c
        inv_buf_p = 0;
 800a052:	8023      	strh	r3, [r4, #0]
        if(monitor_cb != NULL) {
 800a054:	b12d      	cbz	r5, 800a062 <lv_refr_task+0x1c2>
            monitor_cb(lv_tick_elaps(start), px_num);
 800a056:	9803      	ldr	r0, [sp, #12]
 800a058:	f005 fb02 	bl	800f660 <lv_tick_elaps>
 800a05c:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
 800a060:	47a8      	blx	r5
}
 800a062:	b007      	add	sp, #28
 800a064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a068:	46da      	mov	sl, fp
 800a06a:	46cb      	mov	fp, r9
 800a06c:	f8dd 9008 	ldr.w	r9, [sp, #8]
    if(y2 != row_last) {
 800a070:	45d0      	cmp	r8, sl
 800a072:	d010      	beq.n	800a096 <lv_refr_task+0x1f6>
        lv_vdb_t * vdb_p = lv_vdb_get();
 800a074:	f000 faca 	bl	800a60c <lv_vdb_get>
        if(!vdb_p) {
 800a078:	4602      	mov	r2, r0
 800a07a:	b160      	cbz	r0, 800a096 <lv_refr_task+0x1f6>
        vdb_p->area.x1 = area_p->x1;
 800a07c:	f9b7 1000 	ldrsh.w	r1, [r7]
        lv_refr_area_part_vdb(area_p);
 800a080:	4638      	mov	r0, r7
        vdb_p->area.x1 = area_p->x1;
 800a082:	8011      	strh	r1, [r2, #0]
        vdb_p->area.x2 = area_p->x2;
 800a084:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
        vdb_p->area.y1 = row;
 800a088:	f8a2 b002 	strh.w	fp, [r2, #2]
        vdb_p->area.x2 = area_p->x2;
 800a08c:	8091      	strh	r1, [r2, #4]
        vdb_p->area.y2 = y2;
 800a08e:	f8a2 8006 	strh.w	r8, [r2, #6]
        lv_refr_area_part_vdb(area_p);
 800a092:	f7ff fee3 	bl	8009e5c <lv_refr_area_part_vdb>
            if(monitor_cb != NULL) px_num += lv_area_get_size(&inv_buf[i].area);
 800a096:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	f43f af58 	beq.w	8009f50 <lv_refr_task+0xb0>
 800a0a0:	4638      	mov	r0, r7
 800a0a2:	f005 fc63 	bl	800f96c <lv_area_get_size>
 800a0a6:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 800a0aa:	4403      	add	r3, r0
 800a0ac:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
 800a0b0:	e74e      	b.n	8009f50 <lv_refr_task+0xb0>
 800a0b2:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800a0b6:	e7ee      	b.n	800a096 <lv_refr_task+0x1f6>
    px_num = 0;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
}
 800a0be:	b007      	add	sp, #28
 800a0c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_coord_t row_last = 0;
 800a0c4:	f04f 0a00 	mov.w	sl, #0
 800a0c8:	e7d2      	b.n	800a070 <lv_refr_task+0x1d0>
 800a0ca:	bf00      	nop
 800a0cc:	20000a7c 	.word	0x20000a7c
 800a0d0:	20000a80 	.word	0x20000a80

0800a0d4 <lv_refr_init>:
{
 800a0d4:	b510      	push	{r4, lr}
    inv_buf_p = 0;
 800a0d6:	4809      	ldr	r0, [pc, #36]	; (800a0fc <lv_refr_init+0x28>)
 800a0d8:	2400      	movs	r4, #0
    memset(inv_buf, 0, sizeof(inv_buf));
 800a0da:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800a0de:	4621      	mov	r1, r4
    inv_buf_p = 0;
 800a0e0:	f820 4b04 	strh.w	r4, [r0], #4
    memset(inv_buf, 0, sizeof(inv_buf));
 800a0e4:	f00f faf7 	bl	80196d6 <memset>
    task = lv_task_create(lv_refr_task, LV_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 800a0e8:	4623      	mov	r3, r4
 800a0ea:	2203      	movs	r2, #3
 800a0ec:	2132      	movs	r1, #50	; 0x32
 800a0ee:	4804      	ldr	r0, [pc, #16]	; (800a100 <lv_refr_init+0x2c>)
 800a0f0:	f006 f8ea 	bl	80102c8 <lv_task_create>
}
 800a0f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_task_ready(task);        /*Be sure the screen will be refreshed immediately on start up*/
 800a0f8:	f006 b9d8 	b.w	80104ac <lv_task_ready>
 800a0fc:	20000a7c 	.word	0x20000a7c
 800a100:	08009ea1 	.word	0x08009ea1

0800a104 <lv_inv_area>:
    if(area_p == NULL) {
 800a104:	b380      	cbz	r0, 800a168 <lv_inv_area+0x64>
    scr_area.x1 = 0;
 800a106:	2300      	movs	r3, #0
 800a108:	4601      	mov	r1, r0
{
 800a10a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a10c:	b085      	sub	sp, #20
    scr_area.x2 = LV_HOR_RES - 1;
 800a10e:	f240 15df 	movw	r5, #479	; 0x1df
    scr_area.y2 = LV_VER_RES - 1;
 800a112:	f240 140f 	movw	r4, #271	; 0x10f
    suc = lv_area_intersect(&com_area, area_p, &scr_area);
 800a116:	466a      	mov	r2, sp
 800a118:	a802      	add	r0, sp, #8
 800a11a:	466f      	mov	r7, sp
    scr_area.x1 = 0;
 800a11c:	f8ad 3000 	strh.w	r3, [sp]
    scr_area.y1 = 0;
 800a120:	f8ad 3002 	strh.w	r3, [sp, #2]
    scr_area.x2 = LV_HOR_RES - 1;
 800a124:	f8ad 5004 	strh.w	r5, [sp, #4]
    scr_area.y2 = LV_VER_RES - 1;
 800a128:	f8ad 4006 	strh.w	r4, [sp, #6]
    suc = lv_area_intersect(&com_area, area_p, &scr_area);
 800a12c:	f005 fc2c 	bl	800f988 <lv_area_intersect>
    if(suc != false) {
 800a130:	b1c0      	cbz	r0, 800a164 <lv_inv_area+0x60>
        if(round_cb) round_cb(&com_area);
 800a132:	4d19      	ldr	r5, [pc, #100]	; (800a198 <lv_inv_area+0x94>)
 800a134:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800a138:	b10b      	cbz	r3, 800a13e <lv_inv_area+0x3a>
 800a13a:	a802      	add	r0, sp, #8
 800a13c:	4798      	blx	r3
        for(i = 0; i < inv_buf_p; i++) {
 800a13e:	882b      	ldrh	r3, [r5, #0]
 800a140:	b1fb      	cbz	r3, 800a182 <lv_inv_area+0x7e>
 800a142:	2400      	movs	r4, #0
 800a144:	4e15      	ldr	r6, [pc, #84]	; (800a19c <lv_inv_area+0x98>)
 800a146:	e003      	b.n	800a150 <lv_inv_area+0x4c>
 800a148:	b2a4      	uxth	r4, r4
 800a14a:	882b      	ldrh	r3, [r5, #0]
 800a14c:	42a3      	cmp	r3, r4
 800a14e:	d90e      	bls.n	800a16e <lv_inv_area+0x6a>
            if(lv_area_is_in(&com_area, &inv_buf[i].area) != false) return;
 800a150:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 800a154:	a802      	add	r0, sp, #8
        for(i = 0; i < inv_buf_p; i++) {
 800a156:	3401      	adds	r4, #1
            if(lv_area_is_in(&com_area, &inv_buf[i].area) != false) return;
 800a158:	eb06 0141 	add.w	r1, r6, r1, lsl #1
 800a15c:	f005 fc9c 	bl	800fa98 <lv_area_is_in>
 800a160:	2800      	cmp	r0, #0
 800a162:	d0f1      	beq.n	800a148 <lv_inv_area+0x44>
}
 800a164:	b005      	add	sp, #20
 800a166:	bdf0      	pop	{r4, r5, r6, r7, pc}
        inv_buf_p = 0;
 800a168:	4b0b      	ldr	r3, [pc, #44]	; (800a198 <lv_inv_area+0x94>)
 800a16a:	8018      	strh	r0, [r3, #0]
        return;
 800a16c:	4770      	bx	lr
        if(inv_buf_p < LV_INV_FIFO_SIZE) {
 800a16e:	2b1f      	cmp	r3, #31
 800a170:	d907      	bls.n	800a182 <lv_inv_area+0x7e>
    memcpy(dest, src, sizeof(lv_area_t));
 800a172:	2301      	movs	r3, #1
 800a174:	e897 0003 	ldmia.w	r7, {r0, r1}
 800a178:	e886 0003 	stmia.w	r6, {r0, r1}
        inv_buf_p ++;
 800a17c:	802b      	strh	r3, [r5, #0]
}
 800a17e:	b005      	add	sp, #20
 800a180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a182:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 800a186:	aa02      	add	r2, sp, #8
 800a188:	3301      	adds	r3, #1
 800a18a:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 800a18e:	b29b      	uxth	r3, r3
 800a190:	ca03      	ldmia	r2!, {r0, r1}
 800a192:	6060      	str	r0, [r4, #4]
 800a194:	60a1      	str	r1, [r4, #8]
 800a196:	e7f1      	b.n	800a17c <lv_inv_area+0x78>
 800a198:	20000a7c 	.word	0x20000a7c
 800a19c:	20000a80 	.word	0x20000a80

0800a1a0 <lv_refr_get_buf_size>:
    return inv_buf_p;
 800a1a0:	4b01      	ldr	r3, [pc, #4]	; (800a1a8 <lv_refr_get_buf_size+0x8>)
}
 800a1a2:	8818      	ldrh	r0, [r3, #0]
 800a1a4:	4770      	bx	lr
 800a1a6:	bf00      	nop
 800a1a8:	20000a7c 	.word	0x20000a7c

0800a1ac <lv_refr_pop_from_buf>:
    if(inv_buf_p < num) inv_buf_p = 0;
 800a1ac:	4a03      	ldr	r2, [pc, #12]	; (800a1bc <lv_refr_pop_from_buf+0x10>)
 800a1ae:	8813      	ldrh	r3, [r2, #0]
 800a1b0:	4283      	cmp	r3, r0
 800a1b2:	bf34      	ite	cc
 800a1b4:	2300      	movcc	r3, #0
    else inv_buf_p -= num;
 800a1b6:	1a1b      	subcs	r3, r3, r0
 800a1b8:	8013      	strh	r3, [r2, #0]
 800a1ba:	4770      	bx	lr
 800a1bc:	20000a7c 	.word	0x20000a7c

0800a1c0 <lv_style_init>:

/**
 *  Init the basic styles
 */
void lv_style_init(void)
{
 800a1c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /* Not White/Black/Gray colors are created by HSV model with
     * HUE = 210*/

    /*Screen style*/
    lv_style_scr.glass = 0;
 800a1c4:	4bf2      	ldr	r3, [pc, #968]	; (800a590 <lv_style_init+0x3d0>)
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
    lv_style_scr.body.border.opa = LV_OPA_COVER;
    lv_style_scr.body.border.width = 0;
    lv_style_scr.body.border.part = LV_BORDER_FULL;

    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 800a1c6:	2480      	movs	r4, #128	; 0x80
    lv_style_scr.body.opa = LV_OPA_COVER;
 800a1c8:	27ff      	movs	r7, #255	; 0xff
    lv_style_scr.body.radius = 0;
 800a1ca:	f04f 0a00 	mov.w	sl, #0
    lv_style_scr.glass = 0;
 800a1ce:	781a      	ldrb	r2, [r3, #0]
    lv_style_scr.body.padding.ver = LV_DPI / 12;
 800a1d0:	f04f 0e08 	mov.w	lr, #8
    lv_style_scr.body.shadow.type = LV_SHADOW_FULL;
    lv_style_scr.body.shadow.width = 0;

    lv_style_scr.text.opa = LV_OPA_COVER;
    lv_style_scr.text.color = LV_COLOR_MAKE(0x30, 0x30, 0x30);
 800a1d4:	2030      	movs	r0, #48	; 0x30
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 800a1d6:	761c      	strb	r4, [r3, #24]
 800a1d8:	765c      	strb	r4, [r3, #25]
    lv_style_scr.body.border.part = LV_BORDER_FULL;
 800a1da:	210f      	movs	r1, #15
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 800a1dc:	769c      	strb	r4, [r3, #26]
    lv_style_scr.glass = 0;
 800a1de:	f36f 0200 	bfc	r2, #0, #1
    lv_style_scr.body.shadow.type = LV_SHADOW_FULL;
 800a1e2:	f04f 0401 	mov.w	r4, #1
    lv_style_scr.body.padding.ver = LV_DPI / 12;
 800a1e6:	f8a3 e020 	strh.w	lr, [r3, #32]
    lv_style_scr.body.padding.hor = LV_DPI / 12;
 800a1ea:	f8a3 e022 	strh.w	lr, [r3, #34]	; 0x22
    lv_style_scr.line.color = LV_COLOR_MAKE(0x20, 0x20, 0x20);
    lv_style_scr.line.width = 2;
    lv_style_scr.line.rounded = 0;

    /*Plain style (by default near the same as the screen style)*/
    memcpy(&lv_style_plain, &lv_style_scr, sizeof(lv_style_t));
 800a1ee:	2648      	movs	r6, #72	; 0x48
    lv_style_scr.body.padding.inner = LV_DPI / 12;
 800a1f0:	f8a3 e024 	strh.w	lr, [r3, #36]	; 0x24
    lv_style_scr.image.color = LV_COLOR_MAKE(0x20, 0x20, 0x20);
 800a1f4:	f04f 0920 	mov.w	r9, #32
    lv_style_scr.body.border.part = LV_BORDER_FULL;
 800a1f8:	7599      	strb	r1, [r3, #22]
    memcpy(&lv_style_plain, &lv_style_scr, sizeof(lv_style_t));
 800a1fa:	4619      	mov	r1, r3
    lv_style_scr.glass = 0;
 800a1fc:	701a      	strb	r2, [r3, #0]
    memcpy(&lv_style_plain, &lv_style_scr, sizeof(lv_style_t));
 800a1fe:	4632      	mov	r2, r6
    lv_style_scr.body.opa = LV_OPA_COVER;
 800a200:	739f      	strb	r7, [r3, #14]
    memcpy(&lv_style_pretty, &lv_style_plain, sizeof(lv_style_t));
    lv_style_pretty.text.color = LV_COLOR_MAKE(0x20, 0x20, 0x20);
    lv_style_pretty.image.color = LV_COLOR_MAKE(0x20, 0x20, 0x20);
    lv_style_pretty.line.color = LV_COLOR_MAKE(0x20, 0x20, 0x20);
    lv_style_pretty.body.main_color = LV_COLOR_WHITE;
    lv_style_pretty.body.grad_color = LV_COLOR_SILVER;
 800a202:	25c0      	movs	r5, #192	; 0xc0
    lv_style_scr.body.main_color = LV_COLOR_WHITE;
 800a204:	711f      	strb	r7, [r3, #4]
 800a206:	715f      	strb	r7, [r3, #5]
 800a208:	719f      	strb	r7, [r3, #6]
 800a20a:	71df      	strb	r7, [r3, #7]
    lv_style_scr.body.grad_color = LV_COLOR_WHITE;
 800a20c:	721f      	strb	r7, [r3, #8]
 800a20e:	725f      	strb	r7, [r3, #9]
 800a210:	729f      	strb	r7, [r3, #10]
 800a212:	72df      	strb	r7, [r3, #11]
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 800a214:	74df      	strb	r7, [r3, #19]
    lv_style_scr.body.border.opa = LV_OPA_COVER;
 800a216:	75df      	strb	r7, [r3, #23]
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 800a218:	76df      	strb	r7, [r3, #27]
    lv_style_scr.text.opa = LV_OPA_COVER;
 800a21a:	f883 7034 	strb.w	r7, [r3, #52]	; 0x34
    lv_style_scr.body.radius = 0;
 800a21e:	f8a3 a00c 	strh.w	sl, [r3, #12]
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 800a222:	f883 a010 	strb.w	sl, [r3, #16]
 800a226:	f883 a011 	strb.w	sl, [r3, #17]
 800a22a:	f883 a012 	strb.w	sl, [r3, #18]
    lv_style_scr.body.border.width = 0;
 800a22e:	f8a3 a014 	strh.w	sl, [r3, #20]
    lv_style_scr.body.shadow.width = 0;
 800a232:	f8a3 a01c 	strh.w	sl, [r3, #28]
    lv_style_scr.body.shadow.type = LV_SHADOW_FULL;
 800a236:	779c      	strb	r4, [r3, #30]
    lv_style_scr.text.color = LV_COLOR_MAKE(0x30, 0x30, 0x30);
 800a238:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
 800a23c:	f883 0029 	strb.w	r0, [r3, #41]	; 0x29
 800a240:	f883 002a 	strb.w	r0, [r3, #42]	; 0x2a
    lv_style_scr.line.rounded = 0;
 800a244:	f893 4047 	ldrb.w	r4, [r3, #71]	; 0x47
    memcpy(&lv_style_plain, &lv_style_scr, sizeof(lv_style_t));
 800a248:	f8df 8370 	ldr.w	r8, [pc, #880]	; 800a5bc <lv_style_init+0x3fc>
    lv_style_scr.line.rounded = 0;
 800a24c:	f36a 0400 	bfi	r4, sl, #0, #1
    lv_style_scr.text.font = LV_FONT_DEFAULT;
 800a250:	48d0      	ldr	r0, [pc, #832]	; (800a594 <lv_style_init+0x3d4>)
    memcpy(&lv_style_plain_color, &lv_style_plain, sizeof(lv_style_t));
 800a252:	f8df b36c 	ldr.w	fp, [pc, #876]	; 800a5c0 <lv_style_init+0x400>
    lv_style_scr.line.rounded = 0;
 800a256:	f883 4047 	strb.w	r4, [r3, #71]	; 0x47
    lv_style_scr.text.letter_space = 2;
 800a25a:	f04f 0402 	mov.w	r4, #2
    lv_style_scr.text.font = LV_FONT_DEFAULT;
 800a25e:	62d8      	str	r0, [r3, #44]	; 0x2c
    memcpy(&lv_style_plain, &lv_style_scr, sizeof(lv_style_t));
 800a260:	4640      	mov	r0, r8
    lv_style_scr.text.color = LV_COLOR_MAKE(0x30, 0x30, 0x30);
 800a262:	f883 702b 	strb.w	r7, [r3, #43]	; 0x2b
    lv_style_scr.image.opa = LV_OPA_COVER;
 800a266:	f883 703d 	strb.w	r7, [r3, #61]	; 0x3d
    lv_style_scr.image.color = LV_COLOR_MAKE(0x20, 0x20, 0x20);
 800a26a:	f883 703b 	strb.w	r7, [r3, #59]	; 0x3b
    lv_style_scr.image.intense = LV_OPA_TRANSP;
 800a26e:	f883 a03c 	strb.w	sl, [r3, #60]	; 0x3c
    lv_style_scr.line.opa = LV_OPA_COVER;
 800a272:	f883 7046 	strb.w	r7, [r3, #70]	; 0x46
    lv_style_scr.line.color = LV_COLOR_MAKE(0x20, 0x20, 0x20);
 800a276:	f883 7043 	strb.w	r7, [r3, #67]	; 0x43
    lv_style_scr.text.letter_space = 2;
 800a27a:	861c      	strh	r4, [r3, #48]	; 0x30
    lv_style_scr.text.line_space = 2;
 800a27c:	865c      	strh	r4, [r3, #50]	; 0x32
    lv_style_scr.line.width = 2;
 800a27e:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
    lv_style_scr.image.color = LV_COLOR_MAKE(0x20, 0x20, 0x20);
 800a282:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
 800a286:	f883 9039 	strb.w	r9, [r3, #57]	; 0x39
 800a28a:	f883 903a 	strb.w	r9, [r3, #58]	; 0x3a
    lv_style_scr.line.color = LV_COLOR_MAKE(0x20, 0x20, 0x20);
 800a28e:	f883 9040 	strb.w	r9, [r3, #64]	; 0x40
 800a292:	f883 9041 	strb.w	r9, [r3, #65]	; 0x41
 800a296:	f883 9042 	strb.w	r9, [r3, #66]	; 0x42
    memcpy(&lv_style_plain, &lv_style_scr, sizeof(lv_style_t));
 800a29a:	f00f fa11 	bl	80196c0 <memcpy>
    memcpy(&lv_style_plain_color, &lv_style_plain, sizeof(lv_style_t));
 800a29e:	4641      	mov	r1, r8
 800a2a0:	4632      	mov	r2, r6
 800a2a2:	4658      	mov	r0, fp
    memcpy(&lv_style_pretty, &lv_style_plain, sizeof(lv_style_t));
 800a2a4:	4cbc      	ldr	r4, [pc, #752]	; (800a598 <lv_style_init+0x3d8>)
    memcpy(&lv_style_plain_color, &lv_style_plain, sizeof(lv_style_t));
 800a2a6:	f00f fa0b 	bl	80196c0 <memcpy>
    lv_style_plain_color.body.main_color = LV_COLOR_MAKE(0x55, 0x96, 0xd8);
 800a2aa:	2396      	movs	r3, #150	; 0x96
 800a2ac:	2255      	movs	r2, #85	; 0x55
 800a2ae:	f06f 0127 	mvn.w	r1, #39	; 0x27
 800a2b2:	f88b 3005 	strb.w	r3, [fp, #5]
    lv_style_plain_color.text.color = LV_COLOR_MAKE(0xf0, 0xf0, 0xf0);
 800a2b6:	23f0      	movs	r3, #240	; 0xf0
    lv_style_plain_color.body.main_color = LV_COLOR_MAKE(0x55, 0x96, 0xd8);
 800a2b8:	f88b 1004 	strb.w	r1, [fp, #4]
    memcpy(&lv_style_pretty, &lv_style_plain, sizeof(lv_style_t));
 800a2bc:	4641      	mov	r1, r8
    lv_style_plain_color.body.main_color = LV_COLOR_MAKE(0x55, 0x96, 0xd8);
 800a2be:	f88b 2006 	strb.w	r2, [fp, #6]
    memcpy(&lv_style_pretty, &lv_style_plain, sizeof(lv_style_t));
 800a2c2:	4632      	mov	r2, r6
    lv_style_plain_color.body.grad_color = lv_style_plain_color.body.main_color;
 800a2c4:	f8db 0004 	ldr.w	r0, [fp, #4]
    lv_style_plain_color.text.color = LV_COLOR_MAKE(0xf0, 0xf0, 0xf0);
 800a2c8:	f88b 3028 	strb.w	r3, [fp, #40]	; 0x28
    lv_style_plain_color.body.grad_color = lv_style_plain_color.body.main_color;
 800a2cc:	f8cb 0008 	str.w	r0, [fp, #8]
    memcpy(&lv_style_pretty, &lv_style_plain, sizeof(lv_style_t));
 800a2d0:	4620      	mov	r0, r4
    lv_style_plain_color.text.color = LV_COLOR_MAKE(0xf0, 0xf0, 0xf0);
 800a2d2:	f88b 3029 	strb.w	r3, [fp, #41]	; 0x29
 800a2d6:	f88b 302a 	strb.w	r3, [fp, #42]	; 0x2a
    lv_style_plain_color.image.color = LV_COLOR_MAKE(0xf0, 0xf0, 0xf0);
 800a2da:	f88b 3038 	strb.w	r3, [fp, #56]	; 0x38
 800a2de:	f88b 3039 	strb.w	r3, [fp, #57]	; 0x39
 800a2e2:	f88b 303a 	strb.w	r3, [fp, #58]	; 0x3a
    lv_style_plain_color.line.color = LV_COLOR_MAKE(0xf0, 0xf0, 0xf0);
 800a2e6:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
 800a2ea:	f88b 3041 	strb.w	r3, [fp, #65]	; 0x41
 800a2ee:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
    memcpy(&lv_style_pretty, &lv_style_plain, sizeof(lv_style_t));
 800a2f2:	f00f f9e5 	bl	80196c0 <memcpy>
    lv_style_pretty.body.border.color = LV_COLOR_MAKE(0x40, 0x40, 0x40);
    lv_style_pretty.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50  : 1;
    lv_style_pretty.body.border.opa = LV_OPA_30;

    /*Pretty color style*/
    memcpy(&lv_style_pretty_color, &lv_style_pretty, sizeof(lv_style_t));
 800a2f6:	4ba9      	ldr	r3, [pc, #676]	; (800a59c <lv_style_init+0x3dc>)
    lv_style_pretty.body.border.color = LV_COLOR_MAKE(0x40, 0x40, 0x40);
 800a2f8:	f04f 0e40 	mov.w	lr, #64	; 0x40
    memcpy(&lv_style_pretty_color, &lv_style_pretty, sizeof(lv_style_t));
 800a2fc:	4621      	mov	r1, r4
 800a2fe:	4632      	mov	r2, r6
 800a300:	4618      	mov	r0, r3
    lv_style_pretty.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50  : 1;
 800a302:	f04f 0302 	mov.w	r3, #2
    lv_style_pretty.text.color = LV_COLOR_MAKE(0x20, 0x20, 0x20);
 800a306:	f884 9028 	strb.w	r9, [r4, #40]	; 0x28
    lv_style_btn_pr.line.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);

    /*Button toggle released style*/
    memcpy(&lv_style_btn_tgl_rel, &lv_style_btn_rel, sizeof(lv_style_t));
    lv_style_btn_tgl_rel.body.main_color = LV_COLOR_MAKE(0x0a, 0x11, 0x22);
    lv_style_btn_tgl_rel.body.grad_color = LV_COLOR_MAKE(0x37, 0x62, 0x90);
 800a30a:	f04f 0b90 	mov.w	fp, #144	; 0x90
    lv_style_pretty.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50  : 1;
 800a30e:	82a3      	strh	r3, [r4, #20]
    lv_style_pretty.body.radius = LV_DPI / 15;
 800a310:	f04f 0306 	mov.w	r3, #6
    lv_style_pretty.text.color = LV_COLOR_MAKE(0x20, 0x20, 0x20);
 800a314:	f884 9029 	strb.w	r9, [r4, #41]	; 0x29
    lv_style_pretty.body.radius = LV_DPI / 15;
 800a318:	81a3      	strh	r3, [r4, #12]
    lv_style_pretty.body.border.opa = LV_OPA_30;
 800a31a:	f04f 034c 	mov.w	r3, #76	; 0x4c
    lv_style_pretty.text.color = LV_COLOR_MAKE(0x20, 0x20, 0x20);
 800a31e:	f884 902a 	strb.w	r9, [r4, #42]	; 0x2a
    lv_style_pretty_color.body.main_color = LV_COLOR_MAKE(0x6b, 0x9a, 0xc7);
 800a322:	f04f 096b 	mov.w	r9, #107	; 0x6b
    lv_style_pretty.body.grad_color = LV_COLOR_SILVER;
 800a326:	7225      	strb	r5, [r4, #8]
 800a328:	7265      	strb	r5, [r4, #9]
 800a32a:	72a5      	strb	r5, [r4, #10]
    lv_style_pretty.body.border.color = LV_COLOR_MAKE(0x40, 0x40, 0x40);
 800a32c:	f884 e010 	strb.w	lr, [r4, #16]
 800a330:	f884 e011 	strb.w	lr, [r4, #17]
 800a334:	f884 e012 	strb.w	lr, [r4, #18]
    lv_style_pretty.body.border.opa = LV_OPA_30;
 800a338:	75e3      	strb	r3, [r4, #23]
    memcpy(&lv_style_pretty_color, &lv_style_pretty, sizeof(lv_style_t));
 800a33a:	f00f f9c1 	bl	80196c0 <memcpy>
 800a33e:	4603      	mov	r3, r0
    lv_style_pretty_color.body.main_color = LV_COLOR_MAKE(0x6b, 0x9a, 0xc7);
 800a340:	20c7      	movs	r0, #199	; 0xc7
 800a342:	f04f 0e9a 	mov.w	lr, #154	; 0x9a
    memcpy(&lv_style_transp, &lv_style_plain, sizeof(lv_style_t));
 800a346:	4c96      	ldr	r4, [pc, #600]	; (800a5a0 <lv_style_init+0x3e0>)
    lv_style_pretty_color.line.color = LV_COLOR_MAKE(0xc0, 0xc0, 0xc0);
 800a348:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
    lv_style_pretty_color.body.grad_color = LV_COLOR_MAKE(0x2b, 0x59, 0x8b);
 800a34c:	2259      	movs	r2, #89	; 0x59
    lv_style_pretty_color.line.color = LV_COLOR_MAKE(0xc0, 0xc0, 0xc0);
 800a34e:	f883 5041 	strb.w	r5, [r3, #65]	; 0x41
    lv_style_pretty_color.body.border.color = LV_COLOR_MAKE(0x15, 0x2c, 0x42);
 800a352:	2142      	movs	r1, #66	; 0x42
    lv_style_pretty_color.line.color = LV_COLOR_MAKE(0xc0, 0xc0, 0xc0);
 800a354:	f883 5042 	strb.w	r5, [r3, #66]	; 0x42
    lv_style_pretty_color.text.color = LV_COLOR_MAKE(0xe0, 0xe0, 0xe0);
 800a358:	25e0      	movs	r5, #224	; 0xe0
    lv_style_pretty_color.body.main_color = LV_COLOR_MAKE(0x6b, 0x9a, 0xc7);
 800a35a:	7118      	strb	r0, [r3, #4]
    lv_style_pretty_color.body.border.color = LV_COLOR_MAKE(0x15, 0x2c, 0x42);
 800a35c:	202c      	movs	r0, #44	; 0x2c
    lv_style_pretty_color.body.grad_color = LV_COLOR_MAKE(0x2b, 0x59, 0x8b);
 800a35e:	f04f 0c8b 	mov.w	ip, #139	; 0x8b
    lv_style_pretty_color.body.main_color = LV_COLOR_MAKE(0x6b, 0x9a, 0xc7);
 800a362:	f883 e005 	strb.w	lr, [r3, #5]
    lv_style_pretty_color.text.color = LV_COLOR_MAKE(0xe0, 0xe0, 0xe0);
 800a366:	f883 5028 	strb.w	r5, [r3, #40]	; 0x28
    lv_style_pretty_color.body.border.color = LV_COLOR_MAKE(0x15, 0x2c, 0x42);
 800a36a:	f04f 0e15 	mov.w	lr, #21
    lv_style_pretty_color.text.color = LV_COLOR_MAKE(0xe0, 0xe0, 0xe0);
 800a36e:	f883 5029 	strb.w	r5, [r3, #41]	; 0x29
 800a372:	f883 502a 	strb.w	r5, [r3, #42]	; 0x2a
    lv_style_pretty_color.image.color = LV_COLOR_MAKE(0xe0, 0xe0, 0xe0);
 800a376:	f883 5038 	strb.w	r5, [r3, #56]	; 0x38
 800a37a:	f883 5039 	strb.w	r5, [r3, #57]	; 0x39
 800a37e:	f883 503a 	strb.w	r5, [r3, #58]	; 0x3a
    lv_style_pretty_color.body.grad_color = LV_COLOR_MAKE(0x2b, 0x59, 0x8b);
 800a382:	f04f 052b 	mov.w	r5, #43	; 0x2b
 800a386:	725a      	strb	r2, [r3, #9]
    memcpy(&lv_style_transp, &lv_style_plain, sizeof(lv_style_t));
 800a388:	4632      	mov	r2, r6
    lv_style_pretty_color.body.border.color = LV_COLOR_MAKE(0x15, 0x2c, 0x42);
 800a38a:	7419      	strb	r1, [r3, #16]
    memcpy(&lv_style_transp, &lv_style_plain, sizeof(lv_style_t));
 800a38c:	4641      	mov	r1, r8
    lv_style_pretty_color.body.border.color = LV_COLOR_MAKE(0x15, 0x2c, 0x42);
 800a38e:	7458      	strb	r0, [r3, #17]
    memcpy(&lv_style_transp, &lv_style_plain, sizeof(lv_style_t));
 800a390:	4620      	mov	r0, r4
    lv_style_pretty_color.body.grad_color = LV_COLOR_MAKE(0x2b, 0x59, 0x8b);
 800a392:	f883 c008 	strb.w	ip, [r3, #8]
    lv_style_pretty_color.body.border.color = LV_COLOR_MAKE(0x15, 0x2c, 0x42);
 800a396:	f883 e012 	strb.w	lr, [r3, #18]
    lv_style_pretty_color.body.main_color = LV_COLOR_MAKE(0x6b, 0x9a, 0xc7);
 800a39a:	f883 9006 	strb.w	r9, [r3, #6]
    lv_style_pretty_color.body.grad_color = LV_COLOR_MAKE(0x2b, 0x59, 0x8b);
 800a39e:	729d      	strb	r5, [r3, #10]
    memcpy(&lv_style_transp, &lv_style_plain, sizeof(lv_style_t));
 800a3a0:	f00f f98e 	bl	80196c0 <memcpy>
    lv_style_transp.glass = 1;
 800a3a4:	7820      	ldrb	r0, [r4, #0]
    memcpy(&lv_style_transp_fit, &lv_style_transp, sizeof(lv_style_t));
 800a3a6:	4621      	mov	r1, r4
    lv_style_transp.body.empty = 1;
 800a3a8:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
    memcpy(&lv_style_transp_fit, &lv_style_transp, sizeof(lv_style_t));
 800a3ac:	4632      	mov	r2, r6
 800a3ae:	4b7d      	ldr	r3, [pc, #500]	; (800a5a4 <lv_style_init+0x3e4>)
    lv_style_transp.glass = 1;
 800a3b0:	f040 0001 	orr.w	r0, r0, #1
    lv_style_transp.body.empty = 1;
 800a3b4:	f045 0501 	orr.w	r5, r5, #1
    memcpy(&lv_style_transp_tight, &lv_style_transp_fit, sizeof(lv_style_t));
 800a3b8:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800a5c4 <lv_style_init+0x404>
    lv_style_transp.glass = 1;
 800a3bc:	7020      	strb	r0, [r4, #0]
    memcpy(&lv_style_transp_fit, &lv_style_transp, sizeof(lv_style_t));
 800a3be:	4618      	mov	r0, r3
    lv_style_transp.body.empty = 1;
 800a3c0:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    memcpy(&lv_style_transp_fit, &lv_style_transp, sizeof(lv_style_t));
 800a3c4:	f00f f97c 	bl	80196c0 <memcpy>
    memcpy(&lv_style_btn_rel, &lv_style_plain, sizeof(lv_style_t));
 800a3c8:	4c77      	ldr	r4, [pc, #476]	; (800a5a8 <lv_style_init+0x3e8>)
    memcpy(&lv_style_transp_fit, &lv_style_transp, sizeof(lv_style_t));
 800a3ca:	4603      	mov	r3, r0
    memcpy(&lv_style_transp_tight, &lv_style_transp_fit, sizeof(lv_style_t));
 800a3cc:	4601      	mov	r1, r0
    lv_style_transp_fit.body.padding.hor = 0;
 800a3ce:	f8a0 a022 	strh.w	sl, [r0, #34]	; 0x22
    memcpy(&lv_style_transp_tight, &lv_style_transp_fit, sizeof(lv_style_t));
 800a3d2:	4632      	mov	r2, r6
 800a3d4:	4648      	mov	r0, r9
    lv_style_transp_fit.body.padding.ver = 0;
 800a3d6:	f8a3 a020 	strh.w	sl, [r3, #32]
    memcpy(&lv_style_transp_tight, &lv_style_transp_fit, sizeof(lv_style_t));
 800a3da:	f00f f971 	bl	80196c0 <memcpy>
    memcpy(&lv_style_btn_rel, &lv_style_plain, sizeof(lv_style_t));
 800a3de:	4641      	mov	r1, r8
 800a3e0:	4632      	mov	r2, r6
 800a3e2:	4620      	mov	r0, r4
    lv_style_transp_tight.body.padding.inner = 0;
 800a3e4:	f8a9 a024 	strh.w	sl, [r9, #36]	; 0x24
    memcpy(&lv_style_btn_rel, &lv_style_plain, sizeof(lv_style_t));
 800a3e8:	f00f f96a 	bl	80196c0 <memcpy>
    lv_style_btn_rel.body.radius = LV_DPI / 15;
 800a3ec:	f04f 0306 	mov.w	r3, #6
    memcpy(&lv_style_btn_pr, &lv_style_btn_rel, sizeof(lv_style_t));
 800a3f0:	4d6e      	ldr	r5, [pc, #440]	; (800a5ac <lv_style_init+0x3ec>)
    lv_style_btn_rel.body.main_color = LV_COLOR_MAKE(0x76, 0xa2, 0xd0);
 800a3f2:	22a2      	movs	r2, #162	; 0xa2
    lv_style_btn_rel.body.radius = LV_DPI / 15;
 800a3f4:	81a3      	strh	r3, [r4, #12]
    lv_style_btn_rel.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50  : 1;
 800a3f6:	f04f 0302 	mov.w	r3, #2
    lv_style_btn_rel.body.main_color = LV_COLOR_MAKE(0x76, 0xa2, 0xd0);
 800a3fa:	2176      	movs	r1, #118	; 0x76
    lv_style_btn_rel.body.grad_color = LV_COLOR_MAKE(0x19, 0x3a, 0x5d);
 800a3fc:	205d      	movs	r0, #93	; 0x5d
    lv_style_btn_rel.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50  : 1;
 800a3fe:	82a3      	strh	r3, [r4, #20]
    lv_style_btn_rel.body.grad_color = LV_COLOR_MAKE(0x19, 0x3a, 0x5d);
 800a400:	2319      	movs	r3, #25
    lv_style_btn_rel.body.border.color = LV_COLOR_MAKE(0x0b, 0x19, 0x28);
 800a402:	f04f 0c0b 	mov.w	ip, #11
    lv_style_btn_rel.body.border.opa = LV_OPA_70;
 800a406:	f04f 0eb2 	mov.w	lr, #178	; 0xb2
    lv_style_btn_rel.body.grad_color = LV_COLOR_MAKE(0x19, 0x3a, 0x5d);
 800a40a:	72a3      	strb	r3, [r4, #10]
    lv_style_btn_rel.body.main_color = LV_COLOR_MAKE(0x76, 0xa2, 0xd0);
 800a40c:	f04f 0ad0 	mov.w	sl, #208	; 0xd0
    lv_style_btn_rel.body.padding.hor = LV_DPI / 4;
 800a410:	8463      	strh	r3, [r4, #34]	; 0x22
    lv_style_btn_rel.body.grad_color = LV_COLOR_MAKE(0x19, 0x3a, 0x5d);
 800a412:	f04f 093a 	mov.w	r9, #58	; 0x3a
    lv_style_btn_rel.body.border.color = LV_COLOR_MAKE(0x0b, 0x19, 0x28);
 800a416:	7463      	strb	r3, [r4, #17]
    lv_style_btn_rel.body.padding.ver = LV_DPI / 6;
 800a418:	f04f 0310 	mov.w	r3, #16
    lv_style_btn_rel.body.border.color = LV_COLOR_MAKE(0x0b, 0x19, 0x28);
 800a41c:	f04f 0828 	mov.w	r8, #40	; 0x28
    lv_style_btn_rel.body.main_color = LV_COLOR_MAKE(0x76, 0xa2, 0xd0);
 800a420:	7162      	strb	r2, [r4, #5]
    lv_style_btn_rel.body.padding.ver = LV_DPI / 6;
 800a422:	8423      	strh	r3, [r4, #32]
    lv_style_btn_rel.body.padding.inner = LV_DPI / 10;
 800a424:	f04f 030a 	mov.w	r3, #10
    memcpy(&lv_style_btn_pr, &lv_style_btn_rel, sizeof(lv_style_t));
 800a428:	4632      	mov	r2, r6
    lv_style_btn_rel.body.main_color = LV_COLOR_MAKE(0x76, 0xa2, 0xd0);
 800a42a:	71a1      	strb	r1, [r4, #6]
    lv_style_btn_rel.body.grad_color = LV_COLOR_MAKE(0x19, 0x3a, 0x5d);
 800a42c:	7220      	strb	r0, [r4, #8]
    memcpy(&lv_style_btn_pr, &lv_style_btn_rel, sizeof(lv_style_t));
 800a42e:	4621      	mov	r1, r4
 800a430:	4628      	mov	r0, r5
    lv_style_btn_rel.body.border.color = LV_COLOR_MAKE(0x0b, 0x19, 0x28);
 800a432:	f884 c012 	strb.w	ip, [r4, #18]
    lv_style_btn_rel.body.border.opa = LV_OPA_70;
 800a436:	f884 e017 	strb.w	lr, [r4, #23]
    lv_style_btn_rel.text.color = LV_COLOR_MAKE(0xff, 0xff, 0xff);
 800a43a:	f884 7028 	strb.w	r7, [r4, #40]	; 0x28
 800a43e:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
 800a442:	f884 702a 	strb.w	r7, [r4, #42]	; 0x2a
    lv_style_btn_rel.image.color = LV_COLOR_MAKE(0xff, 0xff, 0xff);
 800a446:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
 800a44a:	f884 7039 	strb.w	r7, [r4, #57]	; 0x39
 800a44e:	f884 703a 	strb.w	r7, [r4, #58]	; 0x3a
    lv_style_btn_pr.text.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 800a452:	27a4      	movs	r7, #164	; 0xa4
    lv_style_btn_rel.body.main_color = LV_COLOR_MAKE(0x76, 0xa2, 0xd0);
 800a454:	f884 a004 	strb.w	sl, [r4, #4]
    lv_style_btn_pr.body.main_color = LV_COLOR_MAKE(0x33, 0x62, 0x94);
 800a458:	f04f 0a62 	mov.w	sl, #98	; 0x62
    lv_style_btn_rel.body.grad_color = LV_COLOR_MAKE(0x19, 0x3a, 0x5d);
 800a45c:	f884 9009 	strb.w	r9, [r4, #9]
    lv_style_btn_pr.text.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 800a460:	f04f 09c6 	mov.w	r9, #198	; 0xc6
    lv_style_btn_rel.body.border.color = LV_COLOR_MAKE(0x0b, 0x19, 0x28);
 800a464:	f884 8010 	strb.w	r8, [r4, #16]
    lv_style_btn_pr.text.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 800a468:	f04f 08b5 	mov.w	r8, #181	; 0xb5
    lv_style_btn_rel.body.padding.inner = LV_DPI / 10;
 800a46c:	84a3      	strh	r3, [r4, #36]	; 0x24
    memcpy(&lv_style_btn_pr, &lv_style_btn_rel, sizeof(lv_style_t));
 800a46e:	f00f f927 	bl	80196c0 <memcpy>
    lv_style_btn_pr.body.main_color = LV_COLOR_MAKE(0x33, 0x62, 0x94);
 800a472:	2094      	movs	r0, #148	; 0x94
    lv_style_btn_pr.body.grad_color = LV_COLOR_MAKE(0x10, 0x26, 0x3c);
 800a474:	f04f 0110 	mov.w	r1, #16
    memcpy(&lv_style_btn_tgl_rel, &lv_style_btn_rel, sizeof(lv_style_t));
 800a478:	4b4d      	ldr	r3, [pc, #308]	; (800a5b0 <lv_style_init+0x3f0>)
    lv_style_btn_pr.body.main_color = LV_COLOR_MAKE(0x33, 0x62, 0x94);
 800a47a:	2233      	movs	r2, #51	; 0x33
    lv_style_btn_pr.body.grad_color = LV_COLOR_MAKE(0x10, 0x26, 0x3c);
 800a47c:	72a9      	strb	r1, [r5, #10]
 800a47e:	213c      	movs	r1, #60	; 0x3c
    lv_style_btn_pr.body.main_color = LV_COLOR_MAKE(0x33, 0x62, 0x94);
 800a480:	7128      	strb	r0, [r5, #4]
    lv_style_btn_pr.body.grad_color = LV_COLOR_MAKE(0x10, 0x26, 0x3c);
 800a482:	2026      	movs	r0, #38	; 0x26
    lv_style_btn_pr.body.main_color = LV_COLOR_MAKE(0x33, 0x62, 0x94);
 800a484:	71aa      	strb	r2, [r5, #6]
    memcpy(&lv_style_btn_tgl_rel, &lv_style_btn_rel, sizeof(lv_style_t));
 800a486:	4632      	mov	r2, r6
    lv_style_btn_pr.body.grad_color = LV_COLOR_MAKE(0x10, 0x26, 0x3c);
 800a488:	7229      	strb	r1, [r5, #8]
    memcpy(&lv_style_btn_tgl_rel, &lv_style_btn_rel, sizeof(lv_style_t));
 800a48a:	4621      	mov	r1, r4
    lv_style_btn_pr.body.grad_color = LV_COLOR_MAKE(0x10, 0x26, 0x3c);
 800a48c:	7268      	strb	r0, [r5, #9]
    memcpy(&lv_style_btn_tgl_rel, &lv_style_btn_rel, sizeof(lv_style_t));
 800a48e:	4618      	mov	r0, r3
    lv_style_btn_pr.body.main_color = LV_COLOR_MAKE(0x33, 0x62, 0x94);
 800a490:	f885 a005 	strb.w	sl, [r5, #5]
    lv_style_btn_pr.text.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 800a494:	f885 9028 	strb.w	r9, [r5, #40]	; 0x28
    lv_style_btn_pr.image.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 800a498:	f885 9038 	strb.w	r9, [r5, #56]	; 0x38
    lv_style_btn_pr.line.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 800a49c:	f885 9040 	strb.w	r9, [r5, #64]	; 0x40
    lv_style_btn_pr.text.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 800a4a0:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    lv_style_btn_pr.image.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 800a4a4:	f885 8039 	strb.w	r8, [r5, #57]	; 0x39
    lv_style_btn_pr.line.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 800a4a8:	f885 8041 	strb.w	r8, [r5, #65]	; 0x41
    lv_style_btn_pr.text.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 800a4ac:	f885 702a 	strb.w	r7, [r5, #42]	; 0x2a
    lv_style_btn_pr.image.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 800a4b0:	f885 703a 	strb.w	r7, [r5, #58]	; 0x3a
    lv_style_btn_pr.line.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 800a4b4:	f885 7042 	strb.w	r7, [r5, #66]	; 0x42
    memcpy(&lv_style_btn_tgl_rel, &lv_style_btn_rel, sizeof(lv_style_t));
 800a4b8:	f00f f902 	bl	80196c0 <memcpy>
    lv_style_btn_tgl_rel.body.border.color = LV_COLOR_MAKE(0x01, 0x07, 0x0d);
 800a4bc:	f04f 0201 	mov.w	r2, #1
    memcpy(&lv_style_btn_tgl_rel, &lv_style_btn_rel, sizeof(lv_style_t));
 800a4c0:	4603      	mov	r3, r0
    lv_style_btn_tgl_rel.body.main_color = LV_COLOR_MAKE(0x0a, 0x11, 0x22);
 800a4c2:	f04f 0c22 	mov.w	ip, #34	; 0x22
 800a4c6:	f04f 0e11 	mov.w	lr, #17
    lv_style_btn_tgl_rel.body.border.color = LV_COLOR_MAKE(0x01, 0x07, 0x0d);
 800a4ca:	7482      	strb	r2, [r0, #18]
    lv_style_btn_tgl_rel.body.main_color = LV_COLOR_MAKE(0x0a, 0x11, 0x22);
 800a4cc:	f04f 020a 	mov.w	r2, #10
    lv_style_btn_tgl_rel.text.color = LV_COLOR_MAKE(0xc8, 0xdd, 0xf4);
    lv_style_btn_tgl_rel.image.color = LV_COLOR_MAKE(0xc8, 0xdd, 0xf4);
    lv_style_btn_tgl_rel.line.color = LV_COLOR_MAKE(0xc8, 0xdd, 0xf4);

    /*Button toggle pressed style*/
    memcpy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel, sizeof(lv_style_t));
 800a4d0:	4d38      	ldr	r5, [pc, #224]	; (800a5b4 <lv_style_init+0x3f4>)
    lv_style_btn_tgl_rel.body.grad_color = LV_COLOR_MAKE(0x37, 0x62, 0x90);
 800a4d2:	2037      	movs	r0, #55	; 0x37
    lv_style_btn_tgl_rel.body.main_color = LV_COLOR_MAKE(0x0a, 0x11, 0x22);
 800a4d4:	719a      	strb	r2, [r3, #6]
    lv_style_btn_tgl_rel.body.border.color = LV_COLOR_MAKE(0x01, 0x07, 0x0d);
 800a4d6:	2107      	movs	r1, #7
 800a4d8:	220d      	movs	r2, #13
    lv_style_btn_tgl_rel.body.grad_color = LV_COLOR_MAKE(0x37, 0x62, 0x90);
 800a4da:	f883 a009 	strb.w	sl, [r3, #9]
    lv_style_btn_tgl_rel.body.main_color = LV_COLOR_MAKE(0x0a, 0x11, 0x22);
 800a4de:	f883 c004 	strb.w	ip, [r3, #4]
    lv_style_btn_tgl_rel.text.color = LV_COLOR_MAKE(0xc8, 0xdd, 0xf4);
 800a4e2:	f04f 0af4 	mov.w	sl, #244	; 0xf4
 800a4e6:	f04f 0cdd 	mov.w	ip, #221	; 0xdd
    lv_style_btn_tgl_rel.body.main_color = LV_COLOR_MAKE(0x0a, 0x11, 0x22);
 800a4ea:	f883 e005 	strb.w	lr, [r3, #5]
    lv_style_btn_tgl_rel.text.color = LV_COLOR_MAKE(0xc8, 0xdd, 0xf4);
 800a4ee:	f04f 0ec8 	mov.w	lr, #200	; 0xc8
    lv_style_btn_tgl_rel.body.grad_color = LV_COLOR_MAKE(0x37, 0x62, 0x90);
 800a4f2:	7298      	strb	r0, [r3, #10]
    lv_style_btn_tgl_rel.body.border.color = LV_COLOR_MAKE(0x01, 0x07, 0x0d);
 800a4f4:	741a      	strb	r2, [r3, #16]
    memcpy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel, sizeof(lv_style_t));
 800a4f6:	4628      	mov	r0, r5
    lv_style_btn_tgl_rel.body.border.color = LV_COLOR_MAKE(0x01, 0x07, 0x0d);
 800a4f8:	7459      	strb	r1, [r3, #17]
    memcpy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel, sizeof(lv_style_t));
 800a4fa:	4632      	mov	r2, r6
 800a4fc:	4619      	mov	r1, r3
    lv_style_btn_tgl_rel.text.color = LV_COLOR_MAKE(0xc8, 0xdd, 0xf4);
 800a4fe:	f883 a028 	strb.w	sl, [r3, #40]	; 0x28
    lv_style_btn_tgl_rel.image.color = LV_COLOR_MAKE(0xc8, 0xdd, 0xf4);
 800a502:	f883 a038 	strb.w	sl, [r3, #56]	; 0x38
    lv_style_btn_tgl_rel.line.color = LV_COLOR_MAKE(0xc8, 0xdd, 0xf4);
 800a506:	f883 a040 	strb.w	sl, [r3, #64]	; 0x40
    lv_style_btn_tgl_pr.body.main_color = LV_COLOR_MAKE(0x02, 0x14, 0x27);
    lv_style_btn_tgl_pr.body.grad_color = LV_COLOR_MAKE(0x2b, 0x4c, 0x70);
 800a50a:	f04f 0a70 	mov.w	sl, #112	; 0x70
    lv_style_btn_tgl_rel.text.color = LV_COLOR_MAKE(0xc8, 0xdd, 0xf4);
 800a50e:	f883 c029 	strb.w	ip, [r3, #41]	; 0x29
    lv_style_btn_tgl_rel.image.color = LV_COLOR_MAKE(0xc8, 0xdd, 0xf4);
 800a512:	f883 c039 	strb.w	ip, [r3, #57]	; 0x39
    lv_style_btn_tgl_rel.line.color = LV_COLOR_MAKE(0xc8, 0xdd, 0xf4);
 800a516:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    lv_style_btn_tgl_rel.text.color = LV_COLOR_MAKE(0xc8, 0xdd, 0xf4);
 800a51a:	f883 e02a 	strb.w	lr, [r3, #42]	; 0x2a
    lv_style_btn_tgl_rel.image.color = LV_COLOR_MAKE(0xc8, 0xdd, 0xf4);
 800a51e:	f883 e03a 	strb.w	lr, [r3, #58]	; 0x3a
    lv_style_btn_tgl_rel.line.color = LV_COLOR_MAKE(0xc8, 0xdd, 0xf4);
 800a522:	f883 e042 	strb.w	lr, [r3, #66]	; 0x42
    lv_style_btn_tgl_rel.body.grad_color = LV_COLOR_MAKE(0x37, 0x62, 0x90);
 800a526:	f883 b008 	strb.w	fp, [r3, #8]
    memcpy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel, sizeof(lv_style_t));
 800a52a:	f00f f8c9 	bl	80196c0 <memcpy>
    lv_style_btn_tgl_pr.text.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
    lv_style_btn_tgl_pr.image.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
    lv_style_btn_tgl_pr.line.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);

    /*Button inactive style*/
    memcpy(&lv_style_btn_ina, &lv_style_btn_rel, sizeof(lv_style_t));
 800a52e:	4b22      	ldr	r3, [pc, #136]	; (800a5b8 <lv_style_init+0x3f8>)
    lv_style_btn_tgl_pr.body.main_color = LV_COLOR_MAKE(0x02, 0x14, 0x27);
 800a530:	f04f 0c27 	mov.w	ip, #39	; 0x27
 800a534:	f04f 0e14 	mov.w	lr, #20
    memcpy(&lv_style_btn_ina, &lv_style_btn_rel, sizeof(lv_style_t));
 800a538:	4632      	mov	r2, r6
 800a53a:	4618      	mov	r0, r3
    lv_style_btn_tgl_pr.body.main_color = LV_COLOR_MAKE(0x02, 0x14, 0x27);
 800a53c:	f04f 0302 	mov.w	r3, #2
    memcpy(&lv_style_btn_ina, &lv_style_btn_rel, sizeof(lv_style_t));
 800a540:	4621      	mov	r1, r4
    lv_style_btn_tgl_pr.text.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 800a542:	f885 9028 	strb.w	r9, [r5, #40]	; 0x28
    lv_style_btn_tgl_pr.body.main_color = LV_COLOR_MAKE(0x02, 0x14, 0x27);
 800a546:	71ab      	strb	r3, [r5, #6]
    lv_style_btn_tgl_pr.body.grad_color = LV_COLOR_MAKE(0x2b, 0x4c, 0x70);
 800a548:	f04f 034c 	mov.w	r3, #76	; 0x4c
    lv_style_btn_tgl_pr.text.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 800a54c:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    lv_style_btn_tgl_pr.body.grad_color = LV_COLOR_MAKE(0x2b, 0x4c, 0x70);
 800a550:	726b      	strb	r3, [r5, #9]
 800a552:	f04f 032b 	mov.w	r3, #43	; 0x2b
    lv_style_btn_tgl_pr.text.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 800a556:	f885 702a 	strb.w	r7, [r5, #42]	; 0x2a
    lv_style_btn_tgl_pr.body.grad_color = LV_COLOR_MAKE(0x2b, 0x4c, 0x70);
 800a55a:	72ab      	strb	r3, [r5, #10]
    lv_style_btn_tgl_pr.image.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 800a55c:	f885 9038 	strb.w	r9, [r5, #56]	; 0x38
 800a560:	f885 8039 	strb.w	r8, [r5, #57]	; 0x39
 800a564:	f885 703a 	strb.w	r7, [r5, #58]	; 0x3a
    lv_style_btn_tgl_pr.line.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 800a568:	f885 9040 	strb.w	r9, [r5, #64]	; 0x40
 800a56c:	f885 8041 	strb.w	r8, [r5, #65]	; 0x41
 800a570:	f885 7042 	strb.w	r7, [r5, #66]	; 0x42
    lv_style_btn_tgl_pr.body.main_color = LV_COLOR_MAKE(0x02, 0x14, 0x27);
 800a574:	f885 c004 	strb.w	ip, [r5, #4]
 800a578:	f885 e005 	strb.w	lr, [r5, #5]
    lv_style_btn_tgl_pr.body.grad_color = LV_COLOR_MAKE(0x2b, 0x4c, 0x70);
 800a57c:	f885 a008 	strb.w	sl, [r5, #8]
    memcpy(&lv_style_btn_ina, &lv_style_btn_rel, sizeof(lv_style_t));
 800a580:	f00f f89e 	bl	80196c0 <memcpy>
    lv_style_btn_ina.body.main_color = LV_COLOR_MAKE(0xd8, 0xd8, 0xd8);
 800a584:	f06f 0227 	mvn.w	r2, #39	; 0x27
    lv_style_btn_ina.body.grad_color = LV_COLOR_MAKE(0xd8, 0xd8, 0xd8);
    lv_style_btn_ina.body.border.color = LV_COLOR_MAKE(0x90, 0x90, 0x90);
 800a588:	f880 b010 	strb.w	fp, [r0, #16]
 800a58c:	e01c      	b.n	800a5c8 <lv_style_init+0x408>
 800a58e:	bf00      	nop
 800a590:	20017f10 	.word	0x20017f10
 800a594:	2000005c 	.word	0x2000005c
 800a598:	20017d60 	.word	0x20017d60
 800a59c:	20017c40 	.word	0x20017c40
 800a5a0:	20017c88 	.word	0x20017c88
 800a5a4:	20017e38 	.word	0x20017e38
 800a5a8:	20017cd0 	.word	0x20017cd0
 800a5ac:	20017d18 	.word	0x20017d18
 800a5b0:	20017ec8 	.word	0x20017ec8
 800a5b4:	20017f58 	.word	0x20017f58
 800a5b8:	20017df0 	.word	0x20017df0
 800a5bc:	20017e80 	.word	0x20017e80
 800a5c0:	20017fa0 	.word	0x20017fa0
 800a5c4:	20017da8 	.word	0x20017da8
 800a5c8:	f880 b011 	strb.w	fp, [r0, #17]
    lv_style_btn_ina.body.main_color = LV_COLOR_MAKE(0xd8, 0xd8, 0xd8);
 800a5cc:	7102      	strb	r2, [r0, #4]
 800a5ce:	7142      	strb	r2, [r0, #5]
 800a5d0:	7182      	strb	r2, [r0, #6]
    lv_style_btn_ina.body.grad_color = LV_COLOR_MAKE(0xd8, 0xd8, 0xd8);
 800a5d2:	7202      	strb	r2, [r0, #8]
 800a5d4:	7242      	strb	r2, [r0, #9]
 800a5d6:	7282      	strb	r2, [r0, #10]
    lv_style_btn_ina.body.border.color = LV_COLOR_MAKE(0x90, 0x90, 0x90);
 800a5d8:	f880 b012 	strb.w	fp, [r0, #18]
    lv_style_btn_ina.text.color = LV_COLOR_MAKE(0x70, 0x70, 0x70);
 800a5dc:	f880 a028 	strb.w	sl, [r0, #40]	; 0x28
 800a5e0:	f880 a029 	strb.w	sl, [r0, #41]	; 0x29
 800a5e4:	f880 a02a 	strb.w	sl, [r0, #42]	; 0x2a
    lv_style_btn_ina.image.color = LV_COLOR_MAKE(0x70, 0x70, 0x70);
 800a5e8:	f880 a038 	strb.w	sl, [r0, #56]	; 0x38
 800a5ec:	f880 a039 	strb.w	sl, [r0, #57]	; 0x39
 800a5f0:	f880 a03a 	strb.w	sl, [r0, #58]	; 0x3a
    lv_style_btn_ina.line.color = LV_COLOR_MAKE(0x70, 0x70, 0x70);
 800a5f4:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
 800a5f8:	f880 a041 	strb.w	sl, [r0, #65]	; 0x41
 800a5fc:	f880 a042 	strb.w	sl, [r0, #66]	; 0x42
 800a600:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a604 <lv_style_copy>:
 * @param dest pointer to the destination style
 * @param src pointer to the source style
 */
void lv_style_copy(lv_style_t * dest, const lv_style_t * src)
{
    memcpy(dest, src, sizeof(lv_style_t));
 800a604:	2248      	movs	r2, #72	; 0x48
 800a606:	f00f b85b 	b.w	80196c0 <memcpy>
 800a60a:	bf00      	nop

0800a60c <lv_vdb_get>:
/**
 * Get the 'vdb' variable or allocate one in LV_VDB_DOUBLE mode
 * @return pointer to a 'vdb' variable
 */
lv_vdb_t * lv_vdb_get(void)
{
 800a60c:	4a02      	ldr	r2, [pc, #8]	; (800a618 <lv_vdb_get+0xc>)
#if LV_VDB_DOUBLE == 0
    /* Wait until VDB is flushing.
     * (Until this user calls of 'lv_flush_ready()' in the display drivers's flush function*/
    while(vdb_flushing);
 800a60e:	7813      	ldrb	r3, [r2, #0]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d1fc      	bne.n	800a60e <lv_vdb_get+0x2>
    return &vdb;
#else
    /*If already there is an active do nothing*/
    return &vdb[vdb_active];
#endif
}
 800a614:	4801      	ldr	r0, [pc, #4]	; (800a61c <lv_vdb_get+0x10>)
 800a616:	4770      	bx	lr
 800a618:	20000bcc 	.word	0x20000bcc
 800a61c:	2000004c 	.word	0x2000004c

0800a620 <lv_vdb_flush>:

/**
 * Flush the content of the VDB
 */
void lv_vdb_flush(void)
{
 800a620:	b570      	push	{r4, r5, r6, lr}
 800a622:	4c0b      	ldr	r4, [pc, #44]	; (800a650 <lv_vdb_flush+0x30>)
 800a624:	b082      	sub	sp, #8
    while(vdb_flushing);
 800a626:	7823      	ldrb	r3, [r4, #0]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d1fc      	bne.n	800a626 <lv_vdb_flush+0x6>
#endif  /*LV_VDB_DOUBLE*/

    vdb_flushing = true;

    /*Flush the rendered content to the display*/
    lv_disp_flush(vdb_act->area.x1, vdb_act->area.y1, vdb_act->area.x2, vdb_act->area.y2, vdb_act->buf);
 800a62c:	4d09      	ldr	r5, [pc, #36]	; (800a654 <lv_vdb_flush+0x34>)
    vdb_flushing = true;
 800a62e:	2601      	movs	r6, #1
    lv_disp_flush(vdb_act->area.x1, vdb_act->area.y1, vdb_act->area.x2, vdb_act->area.y2, vdb_act->buf);
 800a630:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800a634:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800a638:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 800a63c:	f9b5 0000 	ldrsh.w	r0, [r5]
 800a640:	68ad      	ldr	r5, [r5, #8]
    vdb_flushing = true;
 800a642:	7026      	strb	r6, [r4, #0]
    lv_disp_flush(vdb_act->area.x1, vdb_act->area.y1, vdb_act->area.x2, vdb_act->area.y2, vdb_act->buf);
 800a644:	9500      	str	r5, [sp, #0]
 800a646:	f004 ff75 	bl	800f534 <lv_disp_flush>
        memset(vdb[vdb_active].buf, 0x00, LV_VDB_SIZE_IN_BYTES);
#  endif  /*LV_COLOR_SCREEN_TRANSP*/

#endif  /*#if LV_VDB_DOUBLE*/

}
 800a64a:	b002      	add	sp, #8
 800a64c:	bd70      	pop	{r4, r5, r6, pc}
 800a64e:	bf00      	nop
 800a650:	20000bcc 	.word	0x20000bcc
 800a654:	2000004c 	.word	0x2000004c

0800a658 <lv_flush_ready>:
/**
 * Call in the display driver's  'disp_flush' function when the flushing is finished
 */
LV_ATTRIBUTE_FLUSH_READY void lv_flush_ready(void)
{
    vdb_flushing = false;
 800a658:	4b01      	ldr	r3, [pc, #4]	; (800a660 <lv_flush_ready+0x8>)
 800a65a:	2200      	movs	r2, #0
 800a65c:	701a      	strb	r2, [r3, #0]
 800a65e:	4770      	bx	lr
 800a660:	20000bcc 	.word	0x20000bcc

0800a664 <lv_draw_aa_get_opa>:

    static const lv_opa_t * seg_map[] = {seg1, seg2, seg3, seg4,
                                         seg5, seg6, seg7, seg8
                                        };

    if(seg == 0) return LV_OPA_TRANSP;
 800a664:	b140      	cbz	r0, 800a678 <lv_draw_aa_get_opa+0x14>
    else if(seg < 8) return (uint32_t)((uint32_t)seg_map[seg - 1][px_id] * base_opa) >> 8;
 800a666:	2807      	cmp	r0, #7
 800a668:	dd07      	ble.n	800a67a <lv_draw_aa_get_opa+0x16>
    else {
        return ((px_id * 2 + 1) * base_opa) / (2 * seg);
 800a66a:	0049      	lsls	r1, r1, #1
 800a66c:	0040      	lsls	r0, r0, #1
 800a66e:	fb01 2202 	mla	r2, r1, r2, r2
 800a672:	fb92 f0f0 	sdiv	r0, r2, r0
 800a676:	b2c0      	uxtb	r0, r0
    }

}
 800a678:	4770      	bx	lr
    else if(seg < 8) return (uint32_t)((uint32_t)seg_map[seg - 1][px_id] * base_opa) >> 8;
 800a67a:	3801      	subs	r0, #1
 800a67c:	4b03      	ldr	r3, [pc, #12]	; (800a68c <lv_draw_aa_get_opa+0x28>)
 800a67e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800a682:	5c58      	ldrb	r0, [r3, r1]
 800a684:	fb10 f002 	smulbb	r0, r0, r2
 800a688:	0a00      	lsrs	r0, r0, #8
 800a68a:	4770      	bx	lr
 800a68c:	08087298 	.word	0x08087298

0800a690 <lv_draw_aa_ver_seg>:
 * @param mask draw only in this area
 * @param color color of pixels
 * @param opa maximum opacity
 */
void lv_draw_aa_ver_seg(lv_coord_t x, lv_coord_t y, lv_coord_t length, const lv_area_t * mask, lv_color_t color, lv_opa_t opa)
{
 800a690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bool aa_inv = false;
    if(length < 0) {
 800a694:	1e15      	subs	r5, r2, #0
{
 800a696:	b083      	sub	sp, #12
 800a698:	4680      	mov	r8, r0
 800a69a:	4699      	mov	r9, r3
 800a69c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a6a0:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
    if(length < 0) {
 800a6a4:	db22      	blt.n	800a6ec <lv_draw_aa_ver_seg+0x5c>
    bool aa_inv = false;
 800a6a6:	f04f 0b00 	mov.w	fp, #0
        aa_inv = true;
        length = -length;
    }

    lv_coord_t i;
    for(i = 0; i < length; i++) {
 800a6aa:	2d00      	cmp	r5, #0
 800a6ac:	dd1b      	ble.n	800a6e6 <lv_draw_aa_ver_seg+0x56>
 800a6ae:	2400      	movs	r4, #0
 800a6b0:	b28f      	uxth	r7, r1
 800a6b2:	4621      	mov	r1, r4
        lv_opa_t px_opa = lv_draw_aa_get_opa(length, i, opa);
 800a6b4:	4632      	mov	r2, r6
 800a6b6:	4628      	mov	r0, r5
 800a6b8:	f7ff ffd4 	bl	800a664 <lv_draw_aa_get_opa>
        if(aa_inv) px_opa = opa - px_opa;
        px_fp(x, y + i, mask, color, px_opa);
 800a6bc:	1939      	adds	r1, r7, r4
        lv_opa_t px_opa = lv_draw_aa_get_opa(length, i, opa);
 800a6be:	4686      	mov	lr, r0
        px_fp(x, y + i, mask, color, px_opa);
 800a6c0:	4653      	mov	r3, sl
 800a6c2:	464a      	mov	r2, r9
 800a6c4:	b209      	sxth	r1, r1
 800a6c6:	3401      	adds	r4, #1
 800a6c8:	4640      	mov	r0, r8
        if(aa_inv) px_opa = opa - px_opa;
 800a6ca:	eba6 0c0e 	sub.w	ip, r6, lr
 800a6ce:	f1bb 0f00 	cmp.w	fp, #0
 800a6d2:	d001      	beq.n	800a6d8 <lv_draw_aa_ver_seg+0x48>
 800a6d4:	fa5f fe8c 	uxtb.w	lr, ip
        px_fp(x, y + i, mask, color, px_opa);
 800a6d8:	f8cd e000 	str.w	lr, [sp]
 800a6dc:	f004 f99a 	bl	800ea14 <lv_vpx>
    for(i = 0; i < length; i++) {
 800a6e0:	b221      	sxth	r1, r4
 800a6e2:	428d      	cmp	r5, r1
 800a6e4:	dce6      	bgt.n	800a6b4 <lv_draw_aa_ver_seg+0x24>
    }
}
 800a6e6:	b003      	add	sp, #12
 800a6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        length = -length;
 800a6ec:	426d      	negs	r5, r5
        aa_inv = true;
 800a6ee:	f04f 0b01 	mov.w	fp, #1
        length = -length;
 800a6f2:	b22d      	sxth	r5, r5
 800a6f4:	e7d9      	b.n	800a6aa <lv_draw_aa_ver_seg+0x1a>
 800a6f6:	bf00      	nop

0800a6f8 <lv_draw_aa_hor_seg>:
 * @param mask draw only in this area
 * @param color color of pixels
 * @param opa maximum opacity
 */
void lv_draw_aa_hor_seg(lv_coord_t x, lv_coord_t y, lv_coord_t length, const lv_area_t * mask, lv_color_t color, lv_opa_t opa)
{
 800a6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bool aa_inv = false;
    if(length < 0) {
 800a6fc:	1e15      	subs	r5, r2, #0
{
 800a6fe:	b083      	sub	sp, #12
 800a700:	4688      	mov	r8, r1
 800a702:	4699      	mov	r9, r3
 800a704:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a708:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
    if(length < 0) {
 800a70c:	db22      	blt.n	800a754 <lv_draw_aa_hor_seg+0x5c>
    bool aa_inv = false;
 800a70e:	f04f 0b00 	mov.w	fp, #0
        aa_inv = true;
        length = -length;
    }

    lv_coord_t i;
    for(i = 0; i < length; i++) {
 800a712:	2d00      	cmp	r5, #0
 800a714:	dd1b      	ble.n	800a74e <lv_draw_aa_hor_seg+0x56>
 800a716:	2400      	movs	r4, #0
 800a718:	b287      	uxth	r7, r0
 800a71a:	4621      	mov	r1, r4
        lv_opa_t px_opa = lv_draw_aa_get_opa(length, i, opa);
 800a71c:	4632      	mov	r2, r6
 800a71e:	4628      	mov	r0, r5
 800a720:	f7ff ffa0 	bl	800a664 <lv_draw_aa_get_opa>
 800a724:	4686      	mov	lr, r0
        if(aa_inv) px_opa = opa - px_opa;
        px_fp(x + i, y, mask, color, px_opa);
 800a726:	1938      	adds	r0, r7, r4
 800a728:	4653      	mov	r3, sl
 800a72a:	464a      	mov	r2, r9
 800a72c:	4641      	mov	r1, r8
 800a72e:	b200      	sxth	r0, r0
 800a730:	3401      	adds	r4, #1
        if(aa_inv) px_opa = opa - px_opa;
 800a732:	eba6 0c0e 	sub.w	ip, r6, lr
 800a736:	f1bb 0f00 	cmp.w	fp, #0
 800a73a:	d001      	beq.n	800a740 <lv_draw_aa_hor_seg+0x48>
 800a73c:	fa5f fe8c 	uxtb.w	lr, ip
        px_fp(x + i, y, mask, color, px_opa);
 800a740:	f8cd e000 	str.w	lr, [sp]
 800a744:	f004 f966 	bl	800ea14 <lv_vpx>
    for(i = 0; i < length; i++) {
 800a748:	b221      	sxth	r1, r4
 800a74a:	428d      	cmp	r5, r1
 800a74c:	dce6      	bgt.n	800a71c <lv_draw_aa_hor_seg+0x24>
    }
}
 800a74e:	b003      	add	sp, #12
 800a750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        length = -length;
 800a754:	426d      	negs	r5, r5
        aa_inv = true;
 800a756:	f04f 0b01 	mov.w	fp, #1
        length = -length;
 800a75a:	b22d      	sxth	r5, r5
 800a75c:	e7d9      	b.n	800a712 <lv_draw_aa_hor_seg+0x1a>
 800a75e:	bf00      	nop

0800a760 <lv_img_decoder_close>:

    return true;
}

static void lv_img_decoder_close(void)
{
 800a760:	b510      	push	{r4, lr}
    /*Try to close with the custom functions*/
    if(decoder_custom) {
 800a762:	4c0b      	ldr	r4, [pc, #44]	; (800a790 <lv_img_decoder_close+0x30>)
 800a764:	7823      	ldrb	r3, [r4, #0]
 800a766:	b123      	cbz	r3, 800a772 <lv_img_decoder_close+0x12>
        if(lv_img_decoder_close_custom) lv_img_decoder_close_custom();
 800a768:	6863      	ldr	r3, [r4, #4]
 800a76a:	b15b      	cbz	r3, 800a784 <lv_img_decoder_close+0x24>
        }
#endif
        decoder_src_type = LV_IMG_SRC_UNKNOWN;
        decoder_src = NULL;
    }
}
 800a76c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        if(lv_img_decoder_close_custom) lv_img_decoder_close_custom();
 800a770:	4718      	bx	r3
    if(decoder_src) {
 800a772:	68a3      	ldr	r3, [r4, #8]
 800a774:	b133      	cbz	r3, 800a784 <lv_img_decoder_close+0x24>
        if(decoder_src_type == LV_IMG_SRC_FILE) {
 800a776:	7b23      	ldrb	r3, [r4, #12]
 800a778:	2b01      	cmp	r3, #1
 800a77a:	d004      	beq.n	800a786 <lv_img_decoder_close+0x26>
        decoder_src_type = LV_IMG_SRC_UNKNOWN;
 800a77c:	2203      	movs	r2, #3
        decoder_src = NULL;
 800a77e:	2300      	movs	r3, #0
        decoder_src_type = LV_IMG_SRC_UNKNOWN;
 800a780:	7322      	strb	r2, [r4, #12]
        decoder_src = NULL;
 800a782:	60a3      	str	r3, [r4, #8]
 800a784:	bd10      	pop	{r4, pc}
            lv_fs_close(&decoder_file);
 800a786:	f104 0010 	add.w	r0, r4, #16
 800a78a:	f005 fac9 	bl	800fd20 <lv_fs_close>
 800a78e:	e7f5      	b.n	800a77c <lv_img_decoder_close+0x1c>
 800a790:	2000ecd0 	.word	0x2000ecd0

0800a794 <lv_img_dsc_get_info>:
    header->always_zero = 0;
 800a794:	780b      	ldrb	r3, [r1, #0]
    if(lv_img_decoder_info_custom) {
 800a796:	4a33      	ldr	r2, [pc, #204]	; (800a864 <lv_img_dsc_get_info+0xd0>)
    header->always_zero = 0;
 800a798:	f36f 1347 	bfc	r3, #5, #3
    if(lv_img_decoder_info_custom) {
 800a79c:	6992      	ldr	r2, [r2, #24]
{
 800a79e:	b570      	push	{r4, r5, r6, lr}
 800a7a0:	460c      	mov	r4, r1
 800a7a2:	b084      	sub	sp, #16
 800a7a4:	4605      	mov	r5, r0
    header->always_zero = 0;
 800a7a6:	700b      	strb	r3, [r1, #0]
    if(lv_img_decoder_info_custom) {
 800a7a8:	b112      	cbz	r2, 800a7b0 <lv_img_dsc_get_info+0x1c>
        custom_res = lv_img_decoder_info_custom(src, header);
 800a7aa:	4790      	blx	r2
        if(custom_res == LV_RES_OK) return LV_RES_OK;       /*Custom info has supported this source*/
 800a7ac:	2801      	cmp	r0, #1
 800a7ae:	d01e      	beq.n	800a7ee <lv_img_dsc_get_info+0x5a>
    if(src == NULL) return img_src_type;
 800a7b0:	2d00      	cmp	r5, #0
 800a7b2:	d047      	beq.n	800a844 <lv_img_dsc_get_info+0xb0>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 800a7b4:	782b      	ldrb	r3, [r5, #0]
 800a7b6:	f1a3 0220 	sub.w	r2, r3, #32
 800a7ba:	2a5f      	cmp	r2, #95	; 0x5f
 800a7bc:	d819      	bhi.n	800a7f2 <lv_img_dsc_get_info+0x5e>
        res = lv_fs_open(&file, src, LV_FS_MODE_RD);
 800a7be:	4629      	mov	r1, r5
 800a7c0:	2202      	movs	r2, #2
 800a7c2:	a802      	add	r0, sp, #8
 800a7c4:	f005 fa68 	bl	800fc98 <lv_fs_open>
        if(res == LV_FS_RES_OK) {
 800a7c8:	2800      	cmp	r0, #0
 800a7ca:	d03e      	beq.n	800a84a <lv_img_dsc_get_info+0xb6>
            header->w = LV_DPI;
 800a7cc:	6823      	ldr	r3, [r4, #0]
 800a7ce:	2064      	movs	r0, #100	; 0x64
 800a7d0:	f360 2394 	bfi	r3, r0, #10, #11
            header->h = LV_DPI;
 800a7d4:	0c19      	lsrs	r1, r3, #16
            header->cf = LV_IMG_CF_UNKOWN;
 800a7d6:	461a      	mov	r2, r3
            header->w = LV_DPI;
 800a7d8:	6023      	str	r3, [r4, #0]
            header->h = LV_DPI;
 800a7da:	f360 114f 	bfi	r1, r0, #5, #11
            header->cf = LV_IMG_CF_UNKOWN;
 800a7de:	f36f 0204 	bfc	r2, #0, #5
            header->h = LV_DPI;
 800a7e2:	8061      	strh	r1, [r4, #2]
            header->cf = LV_IMG_CF_UNKOWN;
 800a7e4:	7022      	strb	r2, [r4, #0]
        lv_fs_close(&file);
 800a7e6:	a802      	add	r0, sp, #8
 800a7e8:	f005 fa9a 	bl	800fd20 <lv_fs_close>
    return true;
 800a7ec:	2001      	movs	r0, #1
}
 800a7ee:	b004      	add	sp, #16
 800a7f0:	bd70      	pop	{r4, r5, r6, pc}
    } else if(u8_p[0] >= 0x80) {
 800a7f2:	061b      	lsls	r3, r3, #24
 800a7f4:	d415      	bmi.n	800a822 <lv_img_dsc_get_info+0x8e>
        header->w = ((lv_img_dsc_t *)src)->header.w;
 800a7f6:	682b      	ldr	r3, [r5, #0]
    return true;
 800a7f8:	2001      	movs	r0, #1
        header->w = ((lv_img_dsc_t *)src)->header.w;
 800a7fa:	6822      	ldr	r2, [r4, #0]
 800a7fc:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800a800:	f363 2294 	bfi	r2, r3, #10, #11
 800a804:	6022      	str	r2, [r4, #0]
        header->h = ((lv_img_dsc_t *)src)->header.h;
 800a806:	886b      	ldrh	r3, [r5, #2]
 800a808:	8861      	ldrh	r1, [r4, #2]
 800a80a:	f3c3 134a 	ubfx	r3, r3, #5, #11
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 800a80e:	7822      	ldrb	r2, [r4, #0]
        header->h = ((lv_img_dsc_t *)src)->header.h;
 800a810:	f363 114f 	bfi	r1, r3, #5, #11
 800a814:	8061      	strh	r1, [r4, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 800a816:	782b      	ldrb	r3, [r5, #0]
 800a818:	f363 0204 	bfi	r2, r3, #0, #5
 800a81c:	7022      	strb	r2, [r4, #0]
}
 800a81e:	b004      	add	sp, #16
 800a820:	bd70      	pop	{r4, r5, r6, pc}
        header->w = 1;
 800a822:	6823      	ldr	r3, [r4, #0]
 800a824:	2201      	movs	r2, #1
        header->cf  = LV_IMG_CF_ALPHA_1BIT;
 800a826:	260b      	movs	r6, #11
        header->w = 1;
 800a828:	f362 2394 	bfi	r3, r2, #10, #11
    return true;
 800a82c:	4610      	mov	r0, r2
        header->h = 1;
 800a82e:	0c1d      	lsrs	r5, r3, #16
        header->cf  = LV_IMG_CF_ALPHA_1BIT;
 800a830:	4619      	mov	r1, r3
        header->w = 1;
 800a832:	6023      	str	r3, [r4, #0]
        header->h = 1;
 800a834:	f362 154f 	bfi	r5, r2, #5, #11
        header->cf  = LV_IMG_CF_ALPHA_1BIT;
 800a838:	f366 0104 	bfi	r1, r6, #0, #5
        header->h = 1;
 800a83c:	8065      	strh	r5, [r4, #2]
        header->cf  = LV_IMG_CF_ALPHA_1BIT;
 800a83e:	7021      	strb	r1, [r4, #0]
}
 800a840:	b004      	add	sp, #16
 800a842:	bd70      	pop	{r4, r5, r6, pc}
        return false;
 800a844:	4628      	mov	r0, r5
}
 800a846:	b004      	add	sp, #16
 800a848:	bd70      	pop	{r4, r5, r6, pc}
            res = lv_fs_read(&file, header, sizeof(lv_img_header_t), &rn);
 800a84a:	ab01      	add	r3, sp, #4
 800a84c:	2204      	movs	r2, #4
 800a84e:	4621      	mov	r1, r4
 800a850:	a802      	add	r0, sp, #8
 800a852:	f005 fa7d 	bl	800fd50 <lv_fs_read>
        if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
 800a856:	2800      	cmp	r0, #0
 800a858:	d1b8      	bne.n	800a7cc <lv_img_dsc_get_info+0x38>
 800a85a:	9b01      	ldr	r3, [sp, #4]
 800a85c:	2b04      	cmp	r3, #4
 800a85e:	d1b5      	bne.n	800a7cc <lv_img_dsc_get_info+0x38>
 800a860:	e7c1      	b.n	800a7e6 <lv_img_dsc_get_info+0x52>
 800a862:	bf00      	nop
 800a864:	2000ecd0 	.word	0x2000ecd0

0800a868 <lv_draw_img>:
{
 800a868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a86c:	b097      	sub	sp, #92	; 0x5c
 800a86e:	4680      	mov	r8, r0
 800a870:	4689      	mov	r9, r1
    if(src == NULL) {
 800a872:	4614      	mov	r4, r2
{
 800a874:	af04      	add	r7, sp, #16
 800a876:	f897 6070 	ldrb.w	r6, [r7, #112]	; 0x70
    if(src == NULL) {
 800a87a:	2a00      	cmp	r2, #0
 800a87c:	f000 80a3 	beq.w	800a9c6 <lv_draw_img+0x15e>
    union_ok = lv_area_intersect(&mask_com, mask, coords);
 800a880:	f107 0a38 	add.w	sl, r7, #56	; 0x38
 800a884:	4602      	mov	r2, r0
 800a886:	461d      	mov	r5, r3
 800a888:	4650      	mov	r0, sl
 800a88a:	f005 f87d 	bl	800f988 <lv_area_intersect>
    if(union_ok == false) {
 800a88e:	2800      	cmp	r0, #0
 800a890:	d045      	beq.n	800a91e <lv_draw_img+0xb6>
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->image.opa : (uint16_t)((uint16_t) style->image.opa * opa_scale) >> 8;
 800a892:	2eff      	cmp	r6, #255	; 0xff
 800a894:	d06f      	beq.n	800a976 <lv_draw_img+0x10e>
 800a896:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 800a89a:	fb03 f606 	mul.w	r6, r3, r6
 800a89e:	f3c6 2b07 	ubfx	fp, r6, #8, #8
    header_res = lv_img_dsc_get_info(src, &header);
 800a8a2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	f7ff ff74 	bl	800a794 <lv_img_dsc_get_info>
    if(header_res != LV_RES_OK) {
 800a8ac:	2801      	cmp	r0, #1
 800a8ae:	d13d      	bne.n	800a92c <lv_draw_img+0xc4>
    bool chroma_keyed = lv_img_color_format_is_chroma_keyed(header.cf);
 800a8b0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800a8b4:	f003 031f 	and.w	r3, r3, #31
 800a8b8:	2b0a      	cmp	r3, #10
 800a8ba:	d94e      	bls.n	800a95a <lv_draw_img+0xf2>
 800a8bc:	3b02      	subs	r3, #2
            is_chroma_keyed = false;
 800a8be:	2200      	movs	r2, #0
 800a8c0:	b2db      	uxtb	r3, r3
 800a8c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a8c4:	2b0c      	cmp	r3, #12
 800a8c6:	d853      	bhi.n	800a970 <lv_draw_img+0x108>
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	f641 6109 	movw	r1, #7689	; 0x1e09
 800a8ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a8d2:	420b      	tst	r3, r1
 800a8d4:	bf14      	ite	ne
 800a8d6:	4613      	movne	r3, r2
 800a8d8:	2300      	moveq	r3, #0
 800a8da:	62bb      	str	r3, [r7, #40]	; 0x28
    decoder_custom = false;
 800a8dc:	4ea9      	ldr	r6, [pc, #676]	; (800ab84 <lv_draw_img+0x31c>)
 800a8de:	2200      	movs	r2, #0
    if(lv_img_decoder_open_custom) {
 800a8e0:	69f3      	ldr	r3, [r6, #28]
    decoder_custom = false;
 800a8e2:	7032      	strb	r2, [r6, #0]
    if(lv_img_decoder_open_custom) {
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d049      	beq.n	800a97c <lv_draw_img+0x114>
        custom_res = lv_img_decoder_open_custom(src, style);
 800a8e8:	4629      	mov	r1, r5
 800a8ea:	4620      	mov	r0, r4
 800a8ec:	4798      	blx	r3
        if(custom_res != LV_IMG_DECODER_OPEN_FAIL) {
 800a8ee:	1c41      	adds	r1, r0, #1
        custom_res = lv_img_decoder_open_custom(src, style);
 800a8f0:	4602      	mov	r2, r0
        if(custom_res != LV_IMG_DECODER_OPEN_FAIL) {
 800a8f2:	d043      	beq.n	800a97c <lv_draw_img+0x114>
            decoder_custom = true;  /*Mark that custom decoder function should be used for this img source.*/
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	7033      	strb	r3, [r6, #0]
    if(img_data) {
 800a8f8:	2a00      	cmp	r2, #0
 800a8fa:	d078      	beq.n	800a9ee <lv_draw_img+0x186>
        map_fp(coords, mask, img_data, opa, chroma_keyed, alpha_byte, style->image.color, style->image.intense);
 800a8fc:	f895 103c 	ldrb.w	r1, [r5, #60]	; 0x3c
 800a900:	465b      	mov	r3, fp
 800a902:	4ea1      	ldr	r6, [pc, #644]	; (800ab88 <lv_draw_img+0x320>)
 800a904:	4640      	mov	r0, r8
 800a906:	9103      	str	r1, [sp, #12]
 800a908:	4649      	mov	r1, r9
 800a90a:	6bac      	ldr	r4, [r5, #56]	; 0x38
 800a90c:	6abd      	ldr	r5, [r7, #40]	; 0x28
 800a90e:	9402      	str	r4, [sp, #8]
 800a910:	9501      	str	r5, [sp, #4]
 800a912:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800a914:	9400      	str	r4, [sp, #0]
 800a916:	6834      	ldr	r4, [r6, #0]
 800a918:	47a0      	blx	r4
    lv_img_decoder_close();
 800a91a:	f7ff ff21 	bl	800a760 <lv_img_decoder_close>
}
 800a91e:	374c      	adds	r7, #76	; 0x4c
 800a920:	46bd      	mov	sp, r7
 800a922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        decoder_src_type = LV_IMG_SRC_UNKNOWN;
 800a926:	2303      	movs	r3, #3
        decoder_src = NULL;
 800a928:	60b0      	str	r0, [r6, #8]
        decoder_src_type = LV_IMG_SRC_UNKNOWN;
 800a92a:	7333      	strb	r3, [r6, #12]
        lv_img_decoder_close();
 800a92c:	f7ff ff18 	bl	800a760 <lv_img_decoder_close>
        lv_draw_rect(coords, mask, &lv_style_plain, LV_OPA_COVER);
 800a930:	4649      	mov	r1, r9
 800a932:	4640      	mov	r0, r8
 800a934:	23ff      	movs	r3, #255	; 0xff
 800a936:	4a95      	ldr	r2, [pc, #596]	; (800ab8c <lv_draw_img+0x324>)
 800a938:	f002 f976 	bl	800cc28 <lv_draw_rect>
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, "No\ndata", LV_TXT_FLAG_NONE, NULL);
 800a93c:	2300      	movs	r3, #0
 800a93e:	4a94      	ldr	r2, [pc, #592]	; (800ab90 <lv_draw_img+0x328>)
 800a940:	4649      	mov	r1, r9
 800a942:	9302      	str	r3, [sp, #8]
 800a944:	4640      	mov	r0, r8
 800a946:	9301      	str	r3, [sp, #4]
 800a948:	23ff      	movs	r3, #255	; 0xff
 800a94a:	9200      	str	r2, [sp, #0]
 800a94c:	4a8f      	ldr	r2, [pc, #572]	; (800ab8c <lv_draw_img+0x324>)
 800a94e:	f000 f947 	bl	800abe0 <lv_draw_label>
}
 800a952:	374c      	adds	r7, #76	; 0x4c
 800a954:	46bd      	mov	sp, r7
 800a956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a95a:	4098      	lsls	r0, r3
 800a95c:	3b02      	subs	r3, #2
 800a95e:	f410 6ff9 	tst.w	r0, #1992	; 0x7c8
 800a962:	b2db      	uxtb	r3, r3
 800a964:	bf14      	ite	ne
 800a966:	2201      	movne	r2, #1
 800a968:	2200      	moveq	r2, #0
 800a96a:	2b0c      	cmp	r3, #12
 800a96c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a96e:	d9ab      	bls.n	800a8c8 <lv_draw_img+0x60>
            has_alpha = false;
 800a970:	2300      	movs	r3, #0
 800a972:	62bb      	str	r3, [r7, #40]	; 0x28
 800a974:	e7b2      	b.n	800a8dc <lv_draw_img+0x74>
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->image.opa : (uint16_t)((uint16_t) style->image.opa * opa_scale) >> 8;
 800a976:	f895 b03d 	ldrb.w	fp, [r5, #61]	; 0x3d
 800a97a:	e792      	b.n	800a8a2 <lv_draw_img+0x3a>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 800a97c:	7823      	ldrb	r3, [r4, #0]
    decoder_src = src;
 800a97e:	60b4      	str	r4, [r6, #8]
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 800a980:	f1a3 0220 	sub.w	r2, r3, #32
 800a984:	2a5f      	cmp	r2, #95	; 0x5f
 800a986:	d930      	bls.n	800a9ea <lv_draw_img+0x182>
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
 800a988:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a98c:	bf14      	ite	ne
 800a98e:	2302      	movne	r3, #2
 800a990:	2300      	moveq	r3, #0
    header_res = lv_img_dsc_get_info(src, &decoder_header);
 800a992:	4980      	ldr	r1, [pc, #512]	; (800ab94 <lv_draw_img+0x32c>)
 800a994:	4620      	mov	r0, r4
    decoder_src_type = lv_img_src_get_type(src);
 800a996:	7333      	strb	r3, [r6, #12]
    header_res = lv_img_dsc_get_info(src, &decoder_header);
 800a998:	f7ff fefc 	bl	800a794 <lv_img_dsc_get_info>
    if(header_res == LV_RES_INV) {
 800a99c:	2800      	cmp	r0, #0
 800a99e:	d0c2      	beq.n	800a926 <lv_draw_img+0xbe>
    if(decoder_src_type == LV_IMG_SRC_FILE) {
 800a9a0:	7b33      	ldrb	r3, [r6, #12]
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	f000 80e5 	beq.w	800ab72 <lv_draw_img+0x30a>
    lv_img_cf_t cf = decoder_header.cf;
 800a9a8:	f896 3020 	ldrb.w	r3, [r6, #32]
 800a9ac:	f3c3 0304 	ubfx	r3, r3, #0, #5
            cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800a9b0:	3b04      	subs	r3, #4
    if(cf == LV_IMG_CF_TRUE_COLOR ||
 800a9b2:	b2db      	uxtb	r3, r3
 800a9b4:	2b02      	cmp	r3, #2
 800a9b6:	d8b9      	bhi.n	800a92c <lv_draw_img+0xc4>
        if(decoder_src_type == LV_IMG_SRC_VARIABLE) {
 800a9b8:	7b33      	ldrb	r3, [r6, #12]
 800a9ba:	b9c3      	cbnz	r3, 800a9ee <lv_draw_img+0x186>
            return ((lv_img_dsc_t *)decoder_src)->data;
 800a9bc:	68b3      	ldr	r3, [r6, #8]
 800a9be:	689a      	ldr	r2, [r3, #8]
    if(img_data == LV_IMG_DECODER_OPEN_FAIL) {
 800a9c0:	1c53      	adds	r3, r2, #1
 800a9c2:	d199      	bne.n	800a8f8 <lv_draw_img+0x90>
 800a9c4:	e7b2      	b.n	800a92c <lv_draw_img+0xc4>
        lv_draw_rect(coords, mask, &lv_style_plain, LV_OPA_COVER);
 800a9c6:	23ff      	movs	r3, #255	; 0xff
 800a9c8:	4a70      	ldr	r2, [pc, #448]	; (800ab8c <lv_draw_img+0x324>)
 800a9ca:	f002 f92d 	bl	800cc28 <lv_draw_rect>
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, "No\ndata", LV_TXT_FLAG_NONE, NULL);
 800a9ce:	4b70      	ldr	r3, [pc, #448]	; (800ab90 <lv_draw_img+0x328>)
 800a9d0:	9402      	str	r4, [sp, #8]
 800a9d2:	4649      	mov	r1, r9
 800a9d4:	9300      	str	r3, [sp, #0]
 800a9d6:	4640      	mov	r0, r8
 800a9d8:	9401      	str	r4, [sp, #4]
 800a9da:	23ff      	movs	r3, #255	; 0xff
 800a9dc:	4a6b      	ldr	r2, [pc, #428]	; (800ab8c <lv_draw_img+0x324>)
 800a9de:	f000 f8ff 	bl	800abe0 <lv_draw_label>
}
 800a9e2:	374c      	adds	r7, #76	; 0x4c
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        img_src_type = LV_IMG_SRC_FILE;     /*If it's an ASCII character then it's file name*/
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	e7d1      	b.n	800a992 <lv_draw_img+0x12a>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 800a9ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a9f0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800a9f2:	3301      	adds	r3, #1
    else {
 800a9f4:	f8c7 d004 	str.w	sp, [r7, #4]
 800a9f8:	1a9b      	subs	r3, r3, r2
    memcpy(dest, src, sizeof(lv_area_t));
 800a9fa:	f107 0240 	add.w	r2, r7, #64	; 0x40
    return area_p->x2 - area_p->x1 + 1;
 800a9fe:	b21b      	sxth	r3, r3
 800aa00:	60fb      	str	r3, [r7, #12]
        uint8_t buf[(lv_area_get_width(&mask_com) * ((LV_COLOR_DEPTH >> 3) + 1))];
 800aa02:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800aa06:	3307      	adds	r3, #7
 800aa08:	f023 0307 	bic.w	r3, r3, #7
    memcpy(dest, src, sizeof(lv_area_t));
 800aa0c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800aa10:	ebad 0d03 	sub.w	sp, sp, r3
 800aa14:	e882 0003 	stmia.w	r2, {r0, r1}
        lv_area_set_height(&line, 1);
 800aa18:	4610      	mov	r0, r2
 800aa1a:	2101      	movs	r1, #1
 800aa1c:	f004 ff90 	bl	800f940 <lv_area_set_height>
        lv_coord_t y = mask_com.y1 - coords->y1;
 800aa20:	f9b7 103a 	ldrsh.w	r1, [r7, #58]	; 0x3a
        uint8_t buf[(lv_area_get_width(&mask_com) * ((LV_COLOR_DEPTH >> 3) + 1))];
 800aa24:	ab04      	add	r3, sp, #16
        lv_coord_t y = mask_com.y1 - coords->y1;
 800aa26:	f8b8 2002 	ldrh.w	r2, [r8, #2]
        lv_coord_t x = mask_com.x1 - coords->x1;
 800aa2a:	f8b8 4000 	ldrh.w	r4, [r8]
        uint8_t buf[(lv_area_get_width(&mask_com) * ((LV_COLOR_DEPTH >> 3) + 1))];
 800aa2e:	469e      	mov	lr, r3
        lv_coord_t y = mask_com.y1 - coords->y1;
 800aa30:	b28b      	uxth	r3, r1
 800aa32:	4618      	mov	r0, r3
 800aa34:	61fb      	str	r3, [r7, #28]
        lv_coord_t x = mask_com.x1 - coords->x1;
 800aa36:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
        lv_coord_t y = mask_com.y1 - coords->y1;
 800aa38:	1a82      	subs	r2, r0, r2
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800aa3a:	f9b7 003e 	ldrsh.w	r0, [r7, #62]	; 0x3e
        lv_coord_t x = mask_com.x1 - coords->x1;
 800aa3e:	1b1b      	subs	r3, r3, r4
        lv_coord_t y = mask_com.y1 - coords->y1;
 800aa40:	b292      	uxth	r2, r2
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800aa42:	4288      	cmp	r0, r1
        lv_coord_t x = mask_com.x1 - coords->x1;
 800aa44:	b21b      	sxth	r3, r3
        lv_coord_t y = mask_com.y1 - coords->y1;
 800aa46:	623a      	str	r2, [r7, #32]
        lv_coord_t x = mask_com.x1 - coords->x1;
 800aa48:	613b      	str	r3, [r7, #16]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800aa4a:	f2c0 808f 	blt.w	800ab6c <lv_draw_img+0x304>
            map_fp(&line, mask, buf, opa, chroma_keyed, alpha_byte, style->image.color, style->image.intense);
 800aa4e:	f8c7 b018 	str.w	fp, [r7, #24]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800aa52:	f04f 0a00 	mov.w	sl, #0
            map_fp(&line, mask, buf, opa, chroma_keyed, alpha_byte, style->image.color, style->image.intense);
 800aa56:	f8c7 8008 	str.w	r8, [r7, #8]
 800aa5a:	46f3      	mov	fp, lr
 800aa5c:	617d      	str	r5, [r7, #20]
 800aa5e:	e033      	b.n	800aac8 <lv_draw_img+0x260>
        if(lv_img_decoder_read_line_custom) {
 800aa60:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aa64:	f1b8 0f00 	cmp.w	r8, #0
 800aa68:	d043      	beq.n	800aaf2 <lv_draw_img+0x28a>
            custom_res = lv_img_decoder_read_line_custom(x, y, len, buf);
 800aa6a:	465b      	mov	r3, fp
 800aa6c:	68fa      	ldr	r2, [r7, #12]
 800aa6e:	6938      	ldr	r0, [r7, #16]
 800aa70:	47c0      	blx	r8
            if(read_res != LV_RES_OK) {
 800aa72:	2801      	cmp	r0, #1
 800aa74:	d13d      	bne.n	800aaf2 <lv_draw_img+0x28a>
            map_fp(&line, mask, buf, opa, chroma_keyed, alpha_byte, style->image.color, style->image.intense);
 800aa76:	6978      	ldr	r0, [r7, #20]
 800aa78:	f10a 0a01 	add.w	sl, sl, #1
 800aa7c:	69bb      	ldr	r3, [r7, #24]
 800aa7e:	f890 103c 	ldrb.w	r1, [r0, #60]	; 0x3c
 800aa82:	4a41      	ldr	r2, [pc, #260]	; (800ab88 <lv_draw_img+0x320>)
 800aa84:	9103      	str	r1, [sp, #12]
 800aa86:	4649      	mov	r1, r9
 800aa88:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800aa8a:	6812      	ldr	r2, [r2, #0]
 800aa8c:	9002      	str	r0, [sp, #8]
 800aa8e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800aa92:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800aa94:	4615      	mov	r5, r2
 800aa96:	465a      	mov	r2, fp
 800aa98:	9401      	str	r4, [sp, #4]
 800aa9a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800aa9c:	9400      	str	r4, [sp, #0]
 800aa9e:	47a8      	blx	r5
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800aaa0:	69fb      	ldr	r3, [r7, #28]
 800aaa2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aaa4:	3301      	adds	r3, #1
            line.y1++;
 800aaa6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800aaaa:	4419      	add	r1, r3
            line.y2++;
 800aaac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
            line.y1++;
 800aab0:	3201      	adds	r2, #1
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800aab2:	460c      	mov	r4, r1
 800aab4:	f9b7 103e 	ldrsh.w	r1, [r7, #62]	; 0x3e
            line.y2++;
 800aab8:	3301      	adds	r3, #1
            line.y1++;
 800aaba:	f8a7 2042 	strh.w	r2, [r7, #66]	; 0x42
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800aabe:	b224      	sxth	r4, r4
            line.y2++;
 800aac0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800aac4:	42a1      	cmp	r1, r4
 800aac6:	db51      	blt.n	800ab6c <lv_draw_img+0x304>
 800aac8:	fa1f f18a 	uxth.w	r1, sl
 800aacc:	6a3a      	ldr	r2, [r7, #32]
    if(decoder_custom) {
 800aace:	7833      	ldrb	r3, [r6, #0]
 800aad0:	6279      	str	r1, [r7, #36]	; 0x24
 800aad2:	1851      	adds	r1, r2, r1
 800aad4:	b209      	sxth	r1, r1
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d1c2      	bne.n	800aa60 <lv_draw_img+0x1f8>
    if(decoder_src_type == LV_IMG_SRC_FILE) {
 800aada:	7b32      	ldrb	r2, [r6, #12]
 800aadc:	2a01      	cmp	r2, #1
 800aade:	d00f      	beq.n	800ab00 <lv_draw_img+0x298>
    } else if(decoder_src_type == LV_IMG_SRC_VARIABLE) {
 800aae0:	2a00      	cmp	r2, #0
 800aae2:	d1c8      	bne.n	800aa76 <lv_draw_img+0x20e>
        if(img_dsc->header.cf == LV_IMG_CF_ALPHA_1BIT ||
 800aae4:	68b3      	ldr	r3, [r6, #8]
                img_dsc->header.cf == LV_IMG_CF_ALPHA_4BIT ||
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	f003 031f 	and.w	r3, r3, #31
        } else if(img_dsc->header.cf == LV_IMG_CF_INDEXED_1BIT ||
 800aaec:	3b07      	subs	r3, #7
 800aaee:	2b07      	cmp	r3, #7
 800aaf0:	d9c1      	bls.n	800aa76 <lv_draw_img+0x20e>
 800aaf2:	f8d7 8008 	ldr.w	r8, [r7, #8]
                lv_img_decoder_close();
 800aaf6:	f7ff fe33 	bl	800a760 <lv_img_decoder_close>
 800aafa:	f8d7 d004 	ldr.w	sp, [r7, #4]
 800aafe:	e717      	b.n	800a930 <lv_draw_img+0xc8>
        uint8_t px_size = lv_img_color_format_get_px_size(decoder_header.cf);
 800ab00:	f896 2020 	ldrb.w	r2, [r6, #32]
 800ab04:	f3c2 0204 	ubfx	r2, r2, #0, #5
 800ab08:	3a04      	subs	r2, #4
 800ab0a:	b2d2      	uxtb	r2, r2
 800ab0c:	2a0a      	cmp	r2, #10
 800ab0e:	d82b      	bhi.n	800ab68 <lv_draw_img+0x300>
 800ab10:	4b21      	ldr	r3, [pc, #132]	; (800ab98 <lv_draw_img+0x330>)
 800ab12:	f813 8002 	ldrb.w	r8, [r3, r2]
                decoder_header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800ab16:	f896 3020 	ldrb.w	r3, [r6, #32]
 800ab1a:	f003 031f 	and.w	r3, r3, #31
        if(decoder_header.cf == LV_IMG_CF_TRUE_COLOR ||
 800ab1e:	1f1a      	subs	r2, r3, #4
 800ab20:	2a02      	cmp	r2, #2
 800ab22:	d8e3      	bhi.n	800aaec <lv_draw_img+0x284>
            uint32_t pos = ((y * decoder_header.w + x) * px_size) >> 3;
 800ab24:	6a33      	ldr	r3, [r6, #32]
 800ab26:	693a      	ldr	r2, [r7, #16]
 800ab28:	f3c3 238a 	ubfx	r3, r3, #10, #11
            res = lv_fs_seek(&decoder_file, pos);
 800ab2c:	481b      	ldr	r0, [pc, #108]	; (800ab9c <lv_draw_img+0x334>)
            uint32_t pos = ((y * decoder_header.w + x) * px_size) >> 3;
 800ab2e:	fb11 2103 	smlabb	r1, r1, r3, r2
 800ab32:	fb08 f101 	mul.w	r1, r8, r1
 800ab36:	10c9      	asrs	r1, r1, #3
            res = lv_fs_seek(&decoder_file, pos);
 800ab38:	3104      	adds	r1, #4
 800ab3a:	f005 f925 	bl	800fd88 <lv_fs_seek>
            if(res != LV_FS_RES_OK) {
 800ab3e:	4602      	mov	r2, r0
 800ab40:	2800      	cmp	r0, #0
 800ab42:	d1d6      	bne.n	800aaf2 <lv_draw_img+0x28a>
            uint32_t btr = len * (px_size >> 3);
 800ab44:	89bc      	ldrh	r4, [r7, #12]
 800ab46:	ea4f 08d8 	mov.w	r8, r8, lsr #3
            uint32_t br = 0;
 800ab4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
            lv_fs_read(&decoder_file, buf, btr, &br);
 800ab4e:	4659      	mov	r1, fp
            uint32_t btr = len * (px_size >> 3);
 800ab50:	fb18 f804 	smulbb	r8, r8, r4
            lv_fs_read(&decoder_file, buf, btr, &br);
 800ab54:	4811      	ldr	r0, [pc, #68]	; (800ab9c <lv_draw_img+0x334>)
            uint32_t br = 0;
 800ab56:	f843 2d14 	str.w	r2, [r3, #-20]!
            lv_fs_read(&decoder_file, buf, btr, &br);
 800ab5a:	4642      	mov	r2, r8
 800ab5c:	f005 f8f8 	bl	800fd50 <lv_fs_read>
            if(res != LV_FS_RES_OK || btr != br) {
 800ab60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab62:	4598      	cmp	r8, r3
 800ab64:	d1c5      	bne.n	800aaf2 <lv_draw_img+0x28a>
 800ab66:	e786      	b.n	800aa76 <lv_draw_img+0x20e>
        uint8_t px_size = lv_img_color_format_get_px_size(decoder_header.cf);
 800ab68:	4698      	mov	r8, r3
 800ab6a:	e7d4      	b.n	800ab16 <lv_draw_img+0x2ae>
 800ab6c:	f8d7 d004 	ldr.w	sp, [r7, #4]
 800ab70:	e6d3      	b.n	800a91a <lv_draw_img+0xb2>
        lv_fs_res_t res = lv_fs_open(&decoder_file, src, LV_FS_MODE_RD);
 800ab72:	4621      	mov	r1, r4
 800ab74:	2202      	movs	r2, #2
 800ab76:	4809      	ldr	r0, [pc, #36]	; (800ab9c <lv_draw_img+0x334>)
 800ab78:	f005 f88e 	bl	800fc98 <lv_fs_open>
        if(res != LV_FS_RES_OK) {
 800ab7c:	2800      	cmp	r0, #0
 800ab7e:	f43f af13 	beq.w	800a9a8 <lv_draw_img+0x140>
 800ab82:	e6d3      	b.n	800a92c <lv_draw_img+0xc4>
 800ab84:	2000ecd0 	.word	0x2000ecd0
 800ab88:	080872e8 	.word	0x080872e8
 800ab8c:	20017e80 	.word	0x20017e80
 800ab90:	0808ba44 	.word	0x0808ba44
 800ab94:	2000ecf0 	.word	0x2000ecf0
 800ab98:	080872f8 	.word	0x080872f8
 800ab9c:	2000ece0 	.word	0x2000ece0

0800aba0 <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
 800aba0:	b160      	cbz	r0, 800abbc <lv_img_src_get_type+0x1c>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 800aba2:	7803      	ldrb	r3, [r0, #0]
 800aba4:	f1a3 0220 	sub.w	r2, r3, #32
 800aba8:	2a5f      	cmp	r2, #95	; 0x5f
 800abaa:	d905      	bls.n	800abb8 <lv_img_src_get_type+0x18>
    } else if(u8_p[0] >= 0x80) {
 800abac:	f013 0f80 	tst.w	r3, #128	; 0x80
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
 800abb0:	bf14      	ite	ne
 800abb2:	2002      	movne	r0, #2
 800abb4:	2000      	moveq	r0, #0
 800abb6:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE;     /*If it's an ASCII character then it's file name*/
 800abb8:	2001      	movs	r0, #1
}
 800abba:	4770      	bx	lr
    if(src == NULL) return img_src_type;
 800abbc:	2003      	movs	r0, #3
 800abbe:	4770      	bx	lr

0800abc0 <hex_char_to_num.part.1>:

    if(hex >= '0' && hex <= '9') {
        result = hex - '0';
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A';    /*Convert to upper case*/
 800abc0:	2860      	cmp	r0, #96	; 0x60
 800abc2:	d901      	bls.n	800abc8 <hex_char_to_num.part.1+0x8>
 800abc4:	3820      	subs	r0, #32
 800abc6:	b2c0      	uxtb	r0, r0
 800abc8:	3841      	subs	r0, #65	; 0x41
 800abca:	b2c0      	uxtb	r0, r0
 800abcc:	2805      	cmp	r0, #5
 800abce:	d802      	bhi.n	800abd6 <hex_char_to_num.part.1+0x16>
 800abd0:	4b02      	ldr	r3, [pc, #8]	; (800abdc <hex_char_to_num.part.1+0x1c>)
 800abd2:	5c18      	ldrb	r0, [r3, r0]
 800abd4:	4770      	bx	lr
static uint8_t hex_char_to_num(char hex)
 800abd6:	2000      	movs	r0, #0
                break;
        }
    }

    return result;
}
 800abd8:	4770      	bx	lr
 800abda:	bf00      	nop
 800abdc:	08087304 	.word	0x08087304

0800abe0 <lv_draw_label>:
{
 800abe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abe4:	b095      	sub	sp, #84	; 0x54
 800abe6:	4617      	mov	r7, r2
 800abe8:	4698      	mov	r8, r3
 800abea:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
 800abee:	9106      	str	r1, [sp, #24]
    if((flag & LV_TXT_FLAG_EXPAND) == 0) {
 800abf0:	0791      	lsls	r1, r2, #30
{
 800abf2:	9208      	str	r2, [sp, #32]
 800abf4:	900b      	str	r0, [sp, #44]	; 0x2c
    const lv_font_t * font = style->text.font;
 800abf6:	6afe      	ldr	r6, [r7, #44]	; 0x2c
{
 800abf8:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
    if((flag & LV_TXT_FLAG_EXPAND) == 0) {
 800abfc:	f100 812b 	bmi.w	800ae56 <lv_draw_label+0x276>
    return area_p->x2 - area_p->x1 + 1;
 800ac00:	8883      	ldrh	r3, [r0, #4]
 800ac02:	f9b0 4000 	ldrsh.w	r4, [r0]
 800ac06:	3301      	adds	r3, #1
 800ac08:	1b1b      	subs	r3, r3, r4
 800ac0a:	b21b      	sxth	r3, r3
 800ac0c:	930c      	str	r3, [sp, #48]	; 0x30
    lv_coord_t line_height = lv_font_get_height(font) + style->text.line_space;
 800ac0e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
    uint32_t line_end = lv_txt_get_next_line(txt, font, style->text.letter_space, w, flag);
 800ac10:	4631      	mov	r1, r6
    lv_coord_t line_height = lv_font_get_height(font) + style->text.line_space;
 800ac12:	f896 5020 	ldrb.w	r5, [r6, #32]
    uint32_t line_end = lv_txt_get_next_line(txt, font, style->text.letter_space, w, flag);
 800ac16:	9808      	ldr	r0, [sp, #32]
    lv_coord_t line_height = lv_font_get_height(font) + style->text.line_space;
 800ac18:	4415      	add	r5, r2
    pos.x = coords->x1;
 800ac1a:	f8ad 4040 	strh.w	r4, [sp, #64]	; 0x40
    uint32_t line_end = lv_txt_get_next_line(txt, font, style->text.letter_space, w, flag);
 800ac1e:	9000      	str	r0, [sp, #0]
 800ac20:	4648      	mov	r0, r9
    lv_coord_t line_height = lv_font_get_height(font) + style->text.line_space;
 800ac22:	b2ac      	uxth	r4, r5
    pos.y = coords->y1;
 800ac24:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    uint32_t line_end = lv_txt_get_next_line(txt, font, style->text.letter_space, w, flag);
 800ac26:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
    lv_coord_t line_height = lv_font_get_height(font) + style->text.line_space;
 800ac2a:	9409      	str	r4, [sp, #36]	; 0x24
    pos.y = coords->y1;
 800ac2c:	886c      	ldrh	r4, [r5, #2]
    uint32_t line_end = lv_txt_get_next_line(txt, font, style->text.letter_space, w, flag);
 800ac2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    pos.y = coords->y1;
 800ac30:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
    uint32_t line_end = lv_txt_get_next_line(txt, font, style->text.letter_space, w, flag);
 800ac34:	f005 fda2 	bl	801077c <lv_txt_get_next_line>
    uint32_t line_start = 0;
 800ac38:	2400      	movs	r4, #0
 800ac3a:	f8cd 8014 	str.w	r8, [sp, #20]
    uint32_t line_end = lv_txt_get_next_line(txt, font, style->text.letter_space, w, flag);
 800ac3e:	4605      	mov	r5, r0
 800ac40:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 800ac44:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 800ac48:	f8dd b018 	ldr.w	fp, [sp, #24]
 800ac4c:	9704      	str	r7, [sp, #16]
 800ac4e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    while(pos.y + line_height < mask->y1) {
 800ac52:	e014      	b.n	800ac7e <lv_draw_label+0x9e>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800ac54:	9a04      	ldr	r2, [sp, #16]
 800ac56:	462c      	mov	r4, r5
 800ac58:	9f08      	ldr	r7, [sp, #32]
 800ac5a:	f9b2 2030 	ldrsh.w	r2, [r2, #48]	; 0x30
 800ac5e:	9700      	str	r7, [sp, #0]
 800ac60:	f005 fd8c 	bl	801077c <lv_txt_get_next_line>
        pos.y += line_height;
 800ac64:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800ac68:	9909      	ldr	r1, [sp, #36]	; 0x24
        if(txt[line_start] == '\0') return;
 800ac6a:	f819 3005 	ldrb.w	r3, [r9, r5]
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800ac6e:	4405      	add	r5, r0
        pos.y += line_height;
 800ac70:	440a      	add	r2, r1
 800ac72:	b212      	sxth	r2, r2
 800ac74:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
        if(txt[line_start] == '\0') return;
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	f000 809b 	beq.w	800adb4 <lv_draw_label+0x1d4>
    while(pos.y + line_height < mask->y1) {
 800ac7e:	4452      	add	r2, sl
 800ac80:	f9bb e002 	ldrsh.w	lr, [fp, #2]
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800ac84:	eb09 0005 	add.w	r0, r9, r5
 800ac88:	4643      	mov	r3, r8
    while(pos.y + line_height < mask->y1) {
 800ac8a:	4572      	cmp	r2, lr
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800ac8c:	4631      	mov	r1, r6
    while(pos.y + line_height < mask->y1) {
 800ac8e:	dbe1      	blt.n	800ac54 <lv_draw_label+0x74>
    if(flag & LV_TXT_FLAG_CENTER) {
 800ac90:	9b08      	ldr	r3, [sp, #32]
 800ac92:	9f04      	ldr	r7, [sp, #16]
 800ac94:	f013 0304 	ands.w	r3, r3, #4
 800ac98:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800ac9c:	930e      	str	r3, [sp, #56]	; 0x38
 800ac9e:	f040 8134 	bne.w	800af0a <lv_draw_label+0x32a>
    else if(flag & LV_TXT_FLAG_RIGHT) {
 800aca2:	9b08      	ldr	r3, [sp, #32]
 800aca4:	071a      	lsls	r2, r3, #28
 800aca6:	f100 8163 	bmi.w	800af70 <lv_draw_label+0x390>
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->text.opa : (uint16_t)((uint16_t) style->text.opa * opa_scale) >> 8;
 800acaa:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800acae:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800acb2:	d003      	beq.n	800acbc <lv_draw_label+0xdc>
 800acb4:	fb03 f808 	mul.w	r8, r3, r8
 800acb8:	f3c8 2307 	ubfx	r3, r8, #8, #8
 800acbc:	9307      	str	r3, [sp, #28]
    if(offset != NULL) {
 800acbe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	f000 816d 	beq.w	800afa0 <lv_draw_label+0x3c0>
        pos.y += y_ofs;
 800acc6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800acc8:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 800accc:	8852      	ldrh	r2, [r2, #2]
        x_ofs = offset->x;
 800acce:	9920      	ldr	r1, [sp, #128]	; 0x80
        pos.y += y_ofs;
 800acd0:	4413      	add	r3, r2
        x_ofs = offset->x;
 800acd2:	f9b1 1000 	ldrsh.w	r1, [r1]
        pos.y += y_ofs;
 800acd6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        x_ofs = offset->x;
 800acda:	910f      	str	r1, [sp, #60]	; 0x3c
    lv_coord_t x_ofs = 0;
 800acdc:	2300      	movs	r3, #0
            letter = lv_txt_encoded_next(txt, &i);
 800acde:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 800afa8 <lv_draw_label+0x3c8>
            letter_fp(&pos, mask, font, letter, color, opa);
 800ace2:	f8df b2c8 	ldr.w	fp, [pc, #712]	; 800afac <lv_draw_label+0x3cc>
    lv_coord_t x_ofs = 0;
 800ace6:	930d      	str	r3, [sp, #52]	; 0x34
    while(txt[line_start] != '\0') {
 800ace8:	f819 3004 	ldrb.w	r3, [r9, r4]
            letter_fp(&pos, mask, font, letter, color, opa);
 800acec:	46a8      	mov	r8, r5
    while(txt[line_start] != '\0') {
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d060      	beq.n	800adb4 <lv_draw_label+0x1d4>
        if(offset != NULL) {
 800acf2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800acf4:	b12b      	cbz	r3, 800ad02 <lv_draw_label+0x122>
            pos.x += x_ofs;
 800acf6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800acfa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800acfc:	4413      	add	r3, r2
 800acfe:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800ad02:	9b08      	ldr	r3, [sp, #32]
        cmd_state = CMD_STATE_WAIT;
 800ad04:	2500      	movs	r5, #0
        i = line_start;
 800ad06:	9411      	str	r4, [sp, #68]	; 0x44
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800ad08:	f003 0301 	and.w	r3, r3, #1
 800ad0c:	9704      	str	r7, [sp, #16]
 800ad0e:	9305      	str	r3, [sp, #20]
        while(i < line_end) {
 800ad10:	45a0      	cmp	r8, r4
 800ad12:	d92a      	bls.n	800ad6a <lv_draw_label+0x18a>
            letter = lv_txt_encoded_next(txt, &i);
 800ad14:	f8da 3000 	ldr.w	r3, [sl]
 800ad18:	a911      	add	r1, sp, #68	; 0x44
 800ad1a:	4648      	mov	r0, r9
 800ad1c:	4798      	blx	r3
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800ad1e:	9b05      	ldr	r3, [sp, #20]
            letter = lv_txt_encoded_next(txt, &i);
 800ad20:	4604      	mov	r4, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800ad22:	b11b      	cbz	r3, 800ad2c <lv_draw_label+0x14c>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800ad24:	2823      	cmp	r0, #35	; 0x23
 800ad26:	d04a      	beq.n	800adbe <lv_draw_label+0x1de>
                if(cmd_state == CMD_STATE_PAR) {
 800ad28:	2d01      	cmp	r5, #1
 800ad2a:	d04e      	beq.n	800adca <lv_draw_label+0x1ea>
            if(cmd_state == CMD_STATE_IN) color = recolor;
 800ad2c:	2d02      	cmp	r5, #2
 800ad2e:	d044      	beq.n	800adba <lv_draw_label+0x1da>
            lv_color_t color = style->text.color;
 800ad30:	9b04      	ldr	r3, [sp, #16]
 800ad32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
            letter_fp(&pos, mask, font, letter, color, opa);
 800ad34:	9b07      	ldr	r3, [sp, #28]
 800ad36:	a810      	add	r0, sp, #64	; 0x40
 800ad38:	f8db 1000 	ldr.w	r1, [fp]
 800ad3c:	9301      	str	r3, [sp, #4]
 800ad3e:	4623      	mov	r3, r4
 800ad40:	9200      	str	r2, [sp, #0]
 800ad42:	460f      	mov	r7, r1
 800ad44:	4632      	mov	r2, r6
 800ad46:	9906      	ldr	r1, [sp, #24]
 800ad48:	47b8      	blx	r7
            letter_w = lv_font_get_width(font, letter);
 800ad4a:	4621      	mov	r1, r4
 800ad4c:	4630      	mov	r0, r6
 800ad4e:	f004 ff29 	bl	800fba4 <lv_font_get_width>
            if(letter_w > 0){
 800ad52:	b138      	cbz	r0, 800ad64 <lv_draw_label+0x184>
                pos.x += letter_w + style->text.letter_space;
 800ad54:	9a04      	ldr	r2, [sp, #16]
 800ad56:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800ad5a:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 800ad5c:	4413      	add	r3, r2
 800ad5e:	4418      	add	r0, r3
 800ad60:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800ad64:	9c11      	ldr	r4, [sp, #68]	; 0x44
        while(i < line_end) {
 800ad66:	45a0      	cmp	r8, r4
 800ad68:	d8d4      	bhi.n	800ad14 <lv_draw_label+0x134>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800ad6a:	9b08      	ldr	r3, [sp, #32]
 800ad6c:	eb09 0408 	add.w	r4, r9, r8
 800ad70:	9f04      	ldr	r7, [sp, #16]
 800ad72:	4631      	mov	r1, r6
 800ad74:	4620      	mov	r0, r4
 800ad76:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 800ad7a:	9300      	str	r3, [sp, #0]
 800ad7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad7e:	f005 fcfd 	bl	801077c <lv_txt_get_next_line>
        pos.x = coords->x1;
 800ad82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800ad84:	eb00 0508 	add.w	r5, r0, r8
        pos.x = coords->x1;
 800ad88:	881b      	ldrh	r3, [r3, #0]
 800ad8a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        if(flag & LV_TXT_FLAG_CENTER) {
 800ad8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d12d      	bne.n	800adf0 <lv_draw_label+0x210>
        else if(flag & LV_TXT_FLAG_RIGHT) {
 800ad94:	9b08      	ldr	r3, [sp, #32]
 800ad96:	071b      	lsls	r3, r3, #28
 800ad98:	d443      	bmi.n	800ae22 <lv_draw_label+0x242>
        pos.y += line_height;
 800ad9a:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 800ad9e:	4644      	mov	r4, r8
 800ada0:	9909      	ldr	r1, [sp, #36]	; 0x24
        if(pos.y > mask->y2) return;
 800ada2:	9a06      	ldr	r2, [sp, #24]
        pos.y += line_height;
 800ada4:	440b      	add	r3, r1
        if(pos.y > mask->y2) return;
 800ada6:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
        pos.y += line_height;
 800adaa:	b21b      	sxth	r3, r3
        if(pos.y > mask->y2) return;
 800adac:	429a      	cmp	r2, r3
        pos.y += line_height;
 800adae:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        if(pos.y > mask->y2) return;
 800adb2:	da99      	bge.n	800ace8 <lv_draw_label+0x108>
}
 800adb4:	b015      	add	sp, #84	; 0x54
 800adb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(cmd_state == CMD_STATE_IN) color = recolor;
 800adba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800adbc:	e7ba      	b.n	800ad34 <lv_draw_label+0x154>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 800adbe:	b985      	cbnz	r5, 800ade2 <lv_draw_label+0x202>
                        par_start = i;
 800adc0:	9c11      	ldr	r4, [sp, #68]	; 0x44
                        cmd_state = CMD_STATE_PAR;
 800adc2:	2501      	movs	r5, #1
                        par_start = i;
 800adc4:	b2a3      	uxth	r3, r4
 800adc6:	930d      	str	r3, [sp, #52]	; 0x34
                        continue;
 800adc8:	e7a2      	b.n	800ad10 <lv_draw_label+0x130>
                    if(letter == ' ') {
 800adca:	2820      	cmp	r0, #32
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 800adcc:	9c11      	ldr	r4, [sp, #68]	; 0x44
                    if(letter == ' ') {
 800adce:	d19f      	bne.n	800ad10 <lv_draw_label+0x130>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 800add0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800add2:	1ae3      	subs	r3, r4, r3
 800add4:	2b07      	cmp	r3, #7
 800add6:	d054      	beq.n	800ae82 <lv_draw_label+0x2a2>
                            recolor.full = style->text.color.full;
 800add8:	9b04      	ldr	r3, [sp, #16]
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 800adda:	2502      	movs	r5, #2
                            recolor.full = style->text.color.full;
 800addc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adde:	930a      	str	r3, [sp, #40]	; 0x28
 800ade0:	e796      	b.n	800ad10 <lv_draw_label+0x130>
                    } else if(cmd_state == CMD_STATE_PAR) { /*Other start char in parameter escaped cmd. char */
 800ade2:	2d01      	cmp	r5, #1
 800ade4:	d033      	beq.n	800ae4e <lv_draw_label+0x26e>
                    } else if(cmd_state == CMD_STATE_IN) { /*Command end */
 800ade6:	2d02      	cmp	r5, #2
 800ade8:	d1a2      	bne.n	800ad30 <lv_draw_label+0x150>
 800adea:	9c11      	ldr	r4, [sp, #68]	; 0x44
                        cmd_state = CMD_STATE_WAIT;
 800adec:	2500      	movs	r5, #0
 800adee:	e78f      	b.n	800ad10 <lv_draw_label+0x130>
            line_width = lv_txt_get_width(&txt[line_start], line_end - line_start,
 800adf0:	9a08      	ldr	r2, [sp, #32]
 800adf2:	4601      	mov	r1, r0
 800adf4:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800adf8:	4620      	mov	r0, r4
 800adfa:	9200      	str	r2, [sp, #0]
 800adfc:	4632      	mov	r2, r6
 800adfe:	f005 fe03 	bl	8010a08 <lv_txt_get_width>
 800ae02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ae04:	8893      	ldrh	r3, [r2, #4]
 800ae06:	8812      	ldrh	r2, [r2, #0]
 800ae08:	3301      	adds	r3, #1
 800ae0a:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800ae0c:	b21b      	sxth	r3, r3
 800ae0e:	1a18      	subs	r0, r3, r0
 800ae10:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800ae14:	bf48      	it	mi
 800ae16:	3001      	addmi	r0, #1
 800ae18:	eb03 0360 	add.w	r3, r3, r0, asr #1
 800ae1c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800ae20:	e7bb      	b.n	800ad9a <lv_draw_label+0x1ba>
            line_width = lv_txt_get_width(&txt[line_start], line_end - line_start,
 800ae22:	9a08      	ldr	r2, [sp, #32]
 800ae24:	4601      	mov	r1, r0
 800ae26:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800ae2a:	4620      	mov	r0, r4
 800ae2c:	9200      	str	r2, [sp, #0]
 800ae2e:	4632      	mov	r2, r6
 800ae30:	f005 fdea 	bl	8010a08 <lv_txt_get_width>
 800ae34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ae36:	8893      	ldrh	r3, [r2, #4]
 800ae38:	8811      	ldrh	r1, [r2, #0]
 800ae3a:	3301      	adds	r3, #1
            pos.x += lv_area_get_width(coords) - line_width;
 800ae3c:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800ae40:	1a5b      	subs	r3, r3, r1
 800ae42:	b21b      	sxth	r3, r3
 800ae44:	1a1b      	subs	r3, r3, r0
 800ae46:	4413      	add	r3, r2
 800ae48:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800ae4c:	e7a5      	b.n	800ad9a <lv_draw_label+0x1ba>
            lv_color_t color = style->text.color;
 800ae4e:	9b04      	ldr	r3, [sp, #16]
                        cmd_state = CMD_STATE_WAIT;
 800ae50:	2500      	movs	r5, #0
            lv_color_t color = style->text.color;
 800ae52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae54:	e76e      	b.n	800ad34 <lv_draw_label+0x154>
        lv_txt_get_size(&p, txt, style->text.font, style->text.letter_space, style->text.line_space, LV_COORD_MAX, flag);
 800ae56:	f9b7 0032 	ldrsh.w	r0, [r7, #50]	; 0x32
 800ae5a:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800ae5e:	9c08      	ldr	r4, [sp, #32]
 800ae60:	4632      	mov	r2, r6
 800ae62:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800ae66:	9402      	str	r4, [sp, #8]
 800ae68:	9101      	str	r1, [sp, #4]
 800ae6a:	4649      	mov	r1, r9
 800ae6c:	9000      	str	r0, [sp, #0]
 800ae6e:	a812      	add	r0, sp, #72	; 0x48
 800ae70:	f005 fe1e 	bl	8010ab0 <lv_txt_get_size>
        w = p.x;
 800ae74:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 800ae78:	930c      	str	r3, [sp, #48]	; 0x30
 800ae7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae7c:	f9b3 4000 	ldrsh.w	r4, [r3]
 800ae80:	e6c5      	b.n	800ac0e <lv_draw_label+0x2e>
                            memcpy(buf, &txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 800ae82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae84:	444b      	add	r3, r9
 800ae86:	6818      	ldr	r0, [r3, #0]
 800ae88:	889a      	ldrh	r2, [r3, #4]
                            r = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 800ae8a:	b2c3      	uxtb	r3, r0
                            memcpy(buf, &txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 800ae8c:	9012      	str	r0, [sp, #72]	; 0x48
 800ae8e:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
    if(hex >= '0' && hex <= '9') {
 800ae92:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800ae96:	b2c0      	uxtb	r0, r0
 800ae98:	2809      	cmp	r0, #9
 800ae9a:	d865      	bhi.n	800af68 <lv_draw_label+0x388>
                            r = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 800ae9c:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
 800aea0:	0101      	lsls	r1, r0, #4
    if(hex >= '0' && hex <= '9') {
 800aea2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800aea6:	b2d2      	uxtb	r2, r2
 800aea8:	2a09      	cmp	r2, #9
 800aeaa:	d858      	bhi.n	800af5e <lv_draw_label+0x37e>
                            g = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 800aeac:	f89d 004a 	ldrb.w	r0, [sp, #74]	; 0x4a
                            r = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 800aeb0:	440a      	add	r2, r1
    if(hex >= '0' && hex <= '9') {
 800aeb2:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
 800aeb6:	b2c9      	uxtb	r1, r1
 800aeb8:	2909      	cmp	r1, #9
 800aeba:	d84c      	bhi.n	800af56 <lv_draw_label+0x376>
                            g = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 800aebc:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
 800aec0:	010d      	lsls	r5, r1, #4
    if(hex >= '0' && hex <= '9') {
 800aec2:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
 800aec6:	b2c9      	uxtb	r1, r1
 800aec8:	2909      	cmp	r1, #9
 800aeca:	d840      	bhi.n	800af4e <lv_draw_label+0x36e>
                            b = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 800aecc:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
                            g = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 800aed0:	4429      	add	r1, r5
    if(hex >= '0' && hex <= '9') {
 800aed2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800aed6:	b2db      	uxtb	r3, r3
 800aed8:	2b09      	cmp	r3, #9
 800aeda:	d831      	bhi.n	800af40 <lv_draw_label+0x360>
                            b = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 800aedc:	f89d 004d 	ldrb.w	r0, [sp, #77]	; 0x4d
 800aee0:	011d      	lsls	r5, r3, #4
    if(hex >= '0' && hex <= '9') {
 800aee2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800aee6:	b2db      	uxtb	r3, r3
 800aee8:	2b09      	cmp	r3, #9
 800aeea:	d82d      	bhi.n	800af48 <lv_draw_label+0x368>
 800aeec:	4618      	mov	r0, r3
                            b = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 800aeee:	1943      	adds	r3, r0, r5
                            recolor = LV_COLOR_MAKE(r, g, b);
 800aef0:	980a      	ldr	r0, [sp, #40]	; 0x28
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 800aef2:	2502      	movs	r5, #2
                            recolor = LV_COLOR_MAKE(r, g, b);
 800aef4:	f363 0007 	bfi	r0, r3, #0, #8
 800aef8:	4603      	mov	r3, r0
 800aefa:	f361 230f 	bfi	r3, r1, #8, #8
 800aefe:	f362 4317 	bfi	r3, r2, #16, #8
 800af02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af06:	930a      	str	r3, [sp, #40]	; 0x28
 800af08:	e702      	b.n	800ad10 <lv_draw_label+0x130>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start,
 800af0a:	9a08      	ldr	r2, [sp, #32]
 800af0c:	1b29      	subs	r1, r5, r4
 800af0e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800af12:	eb09 0004 	add.w	r0, r9, r4
 800af16:	9200      	str	r2, [sp, #0]
 800af18:	b289      	uxth	r1, r1
 800af1a:	4632      	mov	r2, r6
 800af1c:	f005 fd74 	bl	8010a08 <lv_txt_get_width>
 800af20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800af22:	8893      	ldrh	r3, [r2, #4]
 800af24:	8812      	ldrh	r2, [r2, #0]
 800af26:	3301      	adds	r3, #1
 800af28:	1a9b      	subs	r3, r3, r2
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800af2a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800af2e:	b21b      	sxth	r3, r3
 800af30:	1a1b      	subs	r3, r3, r0
 800af32:	bf48      	it	mi
 800af34:	3301      	addmi	r3, #1
 800af36:	eb02 0363 	add.w	r3, r2, r3, asr #1
 800af3a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800af3e:	e6b4      	b.n	800acaa <lv_draw_label+0xca>
 800af40:	f7ff fe3e 	bl	800abc0 <hex_char_to_num.part.1>
 800af44:	4603      	mov	r3, r0
 800af46:	e7c9      	b.n	800aedc <lv_draw_label+0x2fc>
 800af48:	f7ff fe3a 	bl	800abc0 <hex_char_to_num.part.1>
 800af4c:	e7cf      	b.n	800aeee <lv_draw_label+0x30e>
 800af4e:	f7ff fe37 	bl	800abc0 <hex_char_to_num.part.1>
 800af52:	4601      	mov	r1, r0
 800af54:	e7ba      	b.n	800aecc <lv_draw_label+0x2ec>
 800af56:	f7ff fe33 	bl	800abc0 <hex_char_to_num.part.1>
 800af5a:	4601      	mov	r1, r0
 800af5c:	e7ae      	b.n	800aebc <lv_draw_label+0x2dc>
 800af5e:	4618      	mov	r0, r3
 800af60:	f7ff fe2e 	bl	800abc0 <hex_char_to_num.part.1>
 800af64:	4602      	mov	r2, r0
 800af66:	e7a1      	b.n	800aeac <lv_draw_label+0x2cc>
 800af68:	4618      	mov	r0, r3
 800af6a:	f7ff fe29 	bl	800abc0 <hex_char_to_num.part.1>
 800af6e:	e795      	b.n	800ae9c <lv_draw_label+0x2bc>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start,
 800af70:	9a08      	ldr	r2, [sp, #32]
 800af72:	1b29      	subs	r1, r5, r4
 800af74:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800af78:	eb09 0004 	add.w	r0, r9, r4
 800af7c:	9200      	str	r2, [sp, #0]
 800af7e:	b289      	uxth	r1, r1
 800af80:	4632      	mov	r2, r6
 800af82:	f005 fd41 	bl	8010a08 <lv_txt_get_width>
 800af86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800af88:	8893      	ldrh	r3, [r2, #4]
 800af8a:	8811      	ldrh	r1, [r2, #0]
 800af8c:	3301      	adds	r3, #1
        pos.x += lv_area_get_width(coords) - line_width;
 800af8e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800af92:	1a5b      	subs	r3, r3, r1
 800af94:	b21b      	sxth	r3, r3
 800af96:	1a1b      	subs	r3, r3, r0
 800af98:	4413      	add	r3, r2
 800af9a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800af9e:	e684      	b.n	800acaa <lv_draw_label+0xca>
    lv_coord_t x_ofs = 0;
 800afa0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800afa2:	930f      	str	r3, [sp, #60]	; 0x3c
 800afa4:	e69a      	b.n	800acdc <lv_draw_label+0xfc>
 800afa6:	bf00      	nop
 800afa8:	200000b0 	.word	0x200000b0
 800afac:	080872ec 	.word	0x080872ec

0800afb0 <line_init>:
    }
}


static void line_init(line_draw_t * line, const lv_point_t * p1, const lv_point_t * p2)
{
 800afb0:	b4f0      	push	{r4, r5, r6, r7}
    line->p1.x = p1->x;
 800afb2:	f9b1 5000 	ldrsh.w	r5, [r1]
    line->p1.y = p1->y;
 800afb6:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
    line->p1.x = p1->x;
 800afba:	8005      	strh	r5, [r0, #0]
    line->p2.x = p2->x;
 800afbc:	f9b2 6000 	ldrsh.w	r6, [r2]
    line->p1.y = p1->y;
 800afc0:	8044      	strh	r4, [r0, #2]
    line->p2.y = p2->y;

    line->dx = LV_MATH_ABS(line->p2.x - line->p1.x);
 800afc2:	1b73      	subs	r3, r6, r5
    line->p2.y = p2->y;
 800afc4:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
    line->sx = line->p1.x < line->p2.x ? 1 : -1;
 800afc8:	42b5      	cmp	r5, r6
 800afca:	bfb4      	ite	lt
 800afcc:	2701      	movlt	r7, #1
 800afce:	f04f 37ff 	movge.w	r7, #4294967295
    line->p2.x = p2->x;
 800afd2:	8086      	strh	r6, [r0, #4]
    line->dy = LV_MATH_ABS(line->p2.y - line->p1.y);
 800afd4:	1b0a      	subs	r2, r1, r4
    line->dx = LV_MATH_ABS(line->p2.x - line->p1.x);
 800afd6:	2b00      	cmp	r3, #0
    line->p2.y = p2->y;
 800afd8:	80c1      	strh	r1, [r0, #6]
    line->dx = LV_MATH_ABS(line->p2.x - line->p1.x);
 800afda:	bfb8      	it	lt
 800afdc:	425b      	neglt	r3, r3
    line->dy = LV_MATH_ABS(line->p2.y - line->p1.y);
 800afde:	2a00      	cmp	r2, #0
    line->sx = line->p1.x < line->p2.x ? 1 : -1;
 800afe0:	81c7      	strh	r7, [r0, #14]
    line->dy = LV_MATH_ABS(line->p2.y - line->p1.y);
 800afe2:	bfb8      	it	lt
 800afe4:	4252      	neglt	r2, r2
    line->dx = LV_MATH_ABS(line->p2.x - line->p1.x);
 800afe6:	b21b      	sxth	r3, r3
    line->sy = line->p1.y < line->p2.y ? 1 : -1;
 800afe8:	428c      	cmp	r4, r1
 800afea:	bfb4      	ite	lt
 800afec:	2101      	movlt	r1, #1
 800afee:	f04f 31ff 	movge.w	r1, #4294967295
    line->dy = LV_MATH_ABS(line->p2.y - line->p1.y);
 800aff2:	b212      	sxth	r2, r2
    line->dx = LV_MATH_ABS(line->p2.x - line->p1.x);
 800aff4:	8183      	strh	r3, [r0, #12]
    line->sy = line->p1.y < line->p2.y ? 1 : -1;
 800aff6:	8241      	strh	r1, [r0, #18]
    line->err = (line->dx > line->dy ? line->dx : -line->dy) / 2;
 800aff8:	4293      	cmp	r3, r2
    line->dy = LV_MATH_ABS(line->p2.y - line->p1.y);
 800affa:	8202      	strh	r2, [r0, #16]
    line->err = (line->dx > line->dy ? line->dx : -line->dy) / 2;
 800affc:	dc13      	bgt.n	800b026 <line_init+0x76>
 800affe:	2a00      	cmp	r2, #0
 800b000:	4611      	mov	r1, r2
 800b002:	bfb8      	it	lt
 800b004:	1c51      	addlt	r1, r2, #1
 800b006:	1049      	asrs	r1, r1, #1
 800b008:	4249      	negs	r1, r1
 800b00a:	b209      	sxth	r1, r1
    line->e2 = 0;
    line->hor = line->dx > line->dy ? true : false; /*Rather horizontal or vertical*/
 800b00c:	4293      	cmp	r3, r2
    line->e2 = 0;
 800b00e:	f04f 0200 	mov.w	r2, #0

    line->p_act.x = line->p1.x;
 800b012:	8105      	strh	r5, [r0, #8]
    line->hor = line->dx > line->dy ? true : false; /*Rather horizontal or vertical*/
 800b014:	bfd4      	ite	le
 800b016:	2300      	movle	r3, #0
 800b018:	2301      	movgt	r3, #1
    line->p_act.y = line->p1.y;
 800b01a:	8144      	strh	r4, [r0, #10]
    line->err = (line->dx > line->dy ? line->dx : -line->dy) / 2;
 800b01c:	8281      	strh	r1, [r0, #20]
    line->hor = line->dx > line->dy ? true : false; /*Rather horizontal or vertical*/
 800b01e:	7603      	strb	r3, [r0, #24]
    line->e2 = 0;
 800b020:	82c2      	strh	r2, [r0, #22]
}
 800b022:	bcf0      	pop	{r4, r5, r6, r7}
 800b024:	4770      	bx	lr
    line->err = (line->dx > line->dy ? line->dx : -line->dy) / 2;
 800b026:	2b00      	cmp	r3, #0
 800b028:	4619      	mov	r1, r3
 800b02a:	bfb8      	it	lt
 800b02c:	1c59      	addlt	r1, r3, #1
 800b02e:	1049      	asrs	r1, r1, #1
 800b030:	e7ec      	b.n	800b00c <line_init+0x5c>
 800b032:	bf00      	nop

0800b034 <line_next>:

static bool line_next(line_draw_t * line)
{
 800b034:	4603      	mov	r3, r0
    if(line->p_act.x == line->p2.x && line->p_act.y == line->p2.y) return false;
 800b036:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 800b03a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800b03e:	4282      	cmp	r2, r0
 800b040:	d020      	beq.n	800b084 <line_next+0x50>
    line->e2 = line->err;
    if(line->e2 > -line->dx) {
 800b042:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
    line->e2 = line->err;
 800b046:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
{
 800b04a:	b470      	push	{r4, r5, r6}
    if(line->e2 > -line->dx) {
 800b04c:	424c      	negs	r4, r1
    line->e2 = line->err;
 800b04e:	82da      	strh	r2, [r3, #22]
    if(line->e2 > -line->dx) {
 800b050:	42a2      	cmp	r2, r4
        line->err -= line->dy;
 800b052:	f9b3 4010 	ldrsh.w	r4, [r3, #16]
    if(line->e2 > -line->dx) {
 800b056:	dc0b      	bgt.n	800b070 <line_next+0x3c>
        line->p_act.x += line->sx;
    }
    if(line->e2 < line->dy) {
 800b058:	42a2      	cmp	r2, r4
 800b05a:	da10      	bge.n	800b07e <line_next+0x4a>
        line->err += line->dx;
 800b05c:	8a9d      	ldrh	r5, [r3, #20]
        line->p_act.y += line->sy;
    }
    return true;
 800b05e:	2001      	movs	r0, #1
        line->p_act.y += line->sy;
 800b060:	895a      	ldrh	r2, [r3, #10]
 800b062:	8a5c      	ldrh	r4, [r3, #18]
        line->err += line->dx;
 800b064:	4429      	add	r1, r5
        line->p_act.y += line->sy;
 800b066:	4422      	add	r2, r4
        line->err += line->dx;
 800b068:	8299      	strh	r1, [r3, #20]
        line->p_act.y += line->sy;
 800b06a:	815a      	strh	r2, [r3, #10]
}
 800b06c:	bc70      	pop	{r4, r5, r6}
 800b06e:	4770      	bx	lr
        line->p_act.x += line->sx;
 800b070:	89de      	ldrh	r6, [r3, #14]
        line->err -= line->dy;
 800b072:	1b15      	subs	r5, r2, r4
    if(line->e2 < line->dy) {
 800b074:	42a2      	cmp	r2, r4
        line->p_act.x += line->sx;
 800b076:	4430      	add	r0, r6
        line->err -= line->dy;
 800b078:	829d      	strh	r5, [r3, #20]
        line->p_act.x += line->sx;
 800b07a:	8118      	strh	r0, [r3, #8]
    if(line->e2 < line->dy) {
 800b07c:	dbee      	blt.n	800b05c <line_next+0x28>
    return true;
 800b07e:	2001      	movs	r0, #1
}
 800b080:	bc70      	pop	{r4, r5, r6}
 800b082:	4770      	bx	lr
    if(line->p_act.x == line->p2.x && line->p_act.y == line->p2.y) return false;
 800b084:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 800b088:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800b08c:	4291      	cmp	r1, r2
 800b08e:	d1d8      	bne.n	800b042 <line_next+0xe>
 800b090:	2000      	movs	r0, #0
 800b092:	4770      	bx	lr

0800b094 <lv_draw_line>:
{
 800b094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b098:	b0a5      	sub	sp, #148	; 0x94
 800b09a:	af02      	add	r7, sp, #8
    if(style->line.width == 0) return;
 800b09c:	f9b3 4044 	ldrsh.w	r4, [r3, #68]	; 0x44
{
 800b0a0:	f897 80b0 	ldrb.w	r8, [r7, #176]	; 0xb0
    if(style->line.width == 0) return;
 800b0a4:	2c00      	cmp	r4, #0
 800b0a6:	f000 814b 	beq.w	800b340 <lv_draw_line+0x2ac>
    if(point1->x == point2->x && point1->y == point2->y) return;
 800b0aa:	f9b0 4000 	ldrsh.w	r4, [r0]
 800b0ae:	f9b1 6000 	ldrsh.w	r6, [r1]
 800b0b2:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 800b0b6:	42b4      	cmp	r4, r6
 800b0b8:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 800b0bc:	f000 8156 	beq.w	800b36c <lv_draw_line+0x2d8>
    if(LV_MATH_ABS(point1->x - point2->x) > LV_MATH_ABS(point1->y - point2->y)) {
 800b0c0:	1ba0      	subs	r0, r4, r6
 800b0c2:	eba5 010e 	sub.w	r1, r5, lr
 800b0c6:	4684      	mov	ip, r0
 800b0c8:	ea80 70e0 	eor.w	r0, r0, r0, asr #31
 800b0cc:	eba0 70ec 	sub.w	r0, r0, ip, asr #31
 800b0d0:	468c      	mov	ip, r1
 800b0d2:	ea81 71e1 	eor.w	r1, r1, r1, asr #31
 800b0d6:	eba1 71ec 	sub.w	r1, r1, ip, asr #31
 800b0da:	4288      	cmp	r0, r1
 800b0dc:	f340 8134 	ble.w	800b348 <lv_draw_line+0x2b4>
        if(point1->x < point2->x) {
 800b0e0:	42b4      	cmp	r4, r6
 800b0e2:	f2c0 8134 	blt.w	800b34e <lv_draw_line+0x2ba>
            p1.x = point2->x;
 800b0e6:	87be      	strh	r6, [r7, #60]	; 0x3c
            p1.y = point2->y;
 800b0e8:	f8a7 e03e 	strh.w	lr, [r7, #62]	; 0x3e
            p2.x = point1->x;
 800b0ec:	f8a7 4040 	strh.w	r4, [r7, #64]	; 0x40
            p2.y = point1->y;
 800b0f0:	f8a7 5042 	strh.w	r5, [r7, #66]	; 0x42
    line_init(&main_line, &p1, &p2);
 800b0f4:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800b0f8:	4615      	mov	r5, r2
 800b0fa:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800b0fe:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b102:	4699      	mov	r9, r3
 800b104:	f7ff ff54 	bl	800afb0 <line_init>
    if(main_line.p1.y == main_line.p2.y) {
 800b108:	f9b7 0052 	ldrsh.w	r0, [r7, #82]	; 0x52
 800b10c:	f9b7 4056 	ldrsh.w	r4, [r7, #86]	; 0x56
 800b110:	42a0      	cmp	r0, r4
 800b112:	f000 8435 	beq.w	800b980 <lv_draw_line+0x8ec>
    else if(main_line.p1.x == main_line.p2.x) {
 800b116:	f9b7 e050 	ldrsh.w	lr, [r7, #80]	; 0x50
 800b11a:	f9b7 c054 	ldrsh.w	ip, [r7, #84]	; 0x54
 800b11e:	45e6      	cmp	lr, ip
 800b120:	f000 846d 	beq.w	800b9fe <lv_draw_line+0x96a>
        if(main_line.hor) {
 800b124:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800b128:	2a00      	cmp	r2, #0
 800b12a:	f040 8117 	bne.w	800b35c <lv_draw_line+0x2c8>
            if(main_line.p1.x < main_line.p2.x) {
 800b12e:	45e6      	cmp	lr, ip
 800b130:	f2c0 84c3 	blt.w	800baba <lv_draw_line+0xa26>
            else if(main_line.p1.x > main_line.p2.x) {
 800b134:	f300 8644 	bgt.w	800bdc0 <lv_draw_line+0xd2c>
 800b138:	62fa      	str	r2, [r7, #44]	; 0x2c
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t) style->line.opa * opa_scale) >> 8;
 800b13a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
{
 800b13e:	f8c7 d000 	str.w	sp, [r7]
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t) style->line.opa * opa_scale) >> 8;
 800b142:	f000 8409 	beq.w	800b958 <lv_draw_line+0x8c4>
 800b146:	f899 3046 	ldrb.w	r3, [r9, #70]	; 0x46
 800b14a:	fb03 f808 	mul.w	r8, r3, r8
 800b14e:	f3c8 2a07 	ubfx	sl, r8, #8, #8
    vect_main.x = main_line->p2.x - main_line->p1.x;
 800b152:	ebac 010e 	sub.w	r1, ip, lr
    vect_main.y = main_line->p2.y - main_line->p1.y;
 800b156:	1a23      	subs	r3, r4, r0
    vect_main.x = main_line->p2.x - main_line->p1.x;
 800b158:	b28e      	uxth	r6, r1
    vect_main.y = main_line->p2.y - main_line->p1.y;
 800b15a:	fa1f fb83 	uxth.w	fp, r3
        if(main_line->p1.y < main_line->p2.y + dir_ori) {
 800b15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    vect_main.x = main_line->p2.x - main_line->p1.x;
 800b160:	b231      	sxth	r1, r6
    vect_main.y = main_line->p2.y - main_line->p1.y;
 800b162:	fa0f f88b 	sxth.w	r8, fp
    if(main_line->hor) {
 800b166:	2a00      	cmp	r2, #0
 800b168:	f000 8195 	beq.w	800b496 <lv_draw_line+0x402>
        if(main_line->p1.y < main_line->p2.y + dir_ori) {
 800b16c:	441c      	add	r4, r3
 800b16e:	42a0      	cmp	r0, r4
 800b170:	f280 8195 	bge.w	800b49e <lv_draw_line+0x40a>
            vect_norm.x = - vect_main.y;
 800b174:	f1cb 0300 	rsb	r3, fp, #0
 800b178:	fa0f f883 	sxth.w	r8, r3
    width = style->line.width;
 800b17c:	f9b9 3044 	ldrsh.w	r3, [r9, #68]	; 0x44
    vect_norm.x = vect_norm.x << 4;
 800b180:	ea4f 1808 	mov.w	r8, r8, lsl #4
    vect_norm.y = vect_norm.y << 4;
 800b184:	0109      	lsls	r1, r1, #4
    lv_point_t pattern[width * 2];
 800b186:	00dc      	lsls	r4, r3, #3
    width = style->line.width;
 800b188:	461e      	mov	r6, r3
 800b18a:	637b      	str	r3, [r7, #52]	; 0x34
    lv_point_t pattern[width * 2];
 800b18c:	f104 0308 	add.w	r3, r4, #8
    vect_norm.x = vect_norm.x << 4;
 800b190:	f8a7 8048 	strh.w	r8, [r7, #72]	; 0x48
    vect_norm.y = vect_norm.y << 4;
 800b194:	f8a7 104a 	strh.w	r1, [r7, #74]	; 0x4a
    lv_point_t pattern[width * 2];
 800b198:	ebad 0d03 	sub.w	sp, sp, r3
 800b19c:	ab02      	add	r3, sp, #8
 800b19e:	627b      	str	r3, [r7, #36]	; 0x24
    if(width != 0) {
 800b1a0:	2e00      	cmp	r6, #0
 800b1a2:	f040 82c0 	bne.w	800b726 <lv_draw_line+0x692>
 800b1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b1ac:	623b      	str	r3, [r7, #32]
        if(main_line->hor && main_line->p1.y >= main_line->p2.y + dir_ori) pattern[0].y --;
 800b1ae:	62ba      	str	r2, [r7, #40]	; 0x28
 800b1b0:	2a00      	cmp	r2, #0
 800b1b2:	f040 83d5 	bne.w	800b960 <lv_draw_line+0x8cc>
        if(!main_line->hor && main_line->p1.x >= main_line->p2.x + dir_ori) pattern[0].x --;
 800b1b6:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 800b1ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1bc:	441a      	add	r2, r3
 800b1be:	4596      	cmp	lr, r2
 800b1c0:	f280 85b7 	bge.w	800bd32 <lv_draw_line+0xc9e>
 800b1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b1ca:	60fb      	str	r3, [r7, #12]
 800b1cc:	8c3b      	ldrh	r3, [r7, #32]
 800b1ce:	89b9      	ldrh	r1, [r7, #12]
 800b1d0:	461a      	mov	r2, r3
 800b1d2:	61fb      	str	r3, [r7, #28]
    for(i = 0; i < width; i++) {
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	61b9      	str	r1, [r7, #24]
 800b1d8:	617a      	str	r2, [r7, #20]
 800b1da:	637b      	str	r3, [r7, #52]	; 0x34
 800b1dc:	6139      	str	r1, [r7, #16]
    if(main_line->hor == false) {
 800b1de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1e0:	2a00      	cmp	r2, #0
 800b1e2:	f040 815f 	bne.w	800b4a4 <lv_draw_line+0x410>
        if(main_line->sx < 0) {
 800b1e6:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 800b1ea:	2a00      	cmp	r2, #0
 800b1ec:	f2c0 85c8 	blt.w	800bd80 <lv_draw_line+0xcec>
 800b1f0:	b29b      	uxth	r3, r3
 800b1f2:	60bb      	str	r3, [r7, #8]
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	607b      	str	r3, [r7, #4]
    prev_p.y = main_line->p1.y;
 800b1f8:	2301      	movs	r3, #1
    prev_p.x = main_line->p1.x;
 800b1fa:	f8a7 e04c 	strh.w	lr, [r7, #76]	; 0x4c
 800b1fe:	f9b7 4058 	ldrsh.w	r4, [r7, #88]	; 0x58
    prev_p.y = main_line->p1.y;
 800b202:	62bb      	str	r3, [r7, #40]	; 0x28
 800b204:	f8a7 004e 	strh.w	r0, [r7, #78]	; 0x4e
 800b208:	e004      	b.n	800b214 <lv_draw_line+0x180>
{
    lv_coord_t last_x = line->p_act.x;

    do {
        if(!line_next(line)) return false;
    } while(last_x == line->p_act.x);
 800b20a:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 800b20e:	42a3      	cmp	r3, r4
 800b210:	f040 80b0 	bne.w	800b374 <lv_draw_line+0x2e0>
        if(!line_next(line)) return false;
 800b214:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800b218:	f7ff ff0c 	bl	800b034 <line_next>
 800b21c:	2800      	cmp	r0, #0
 800b21e:	d1f4      	bne.n	800b20a <lv_draw_line+0x176>
        for(i = 0; i < width; i++) {
 800b220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b222:	2b00      	cmp	r3, #0
 800b224:	dd50      	ble.n	800b2c8 <lv_draw_line+0x234>
 800b226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b228:	4606      	mov	r6, r0
 800b22a:	4bb6      	ldr	r3, [pc, #728]	; (800b504 <lv_draw_line+0x470>)
 800b22c:	f102 0804 	add.w	r8, r2, #4
 800b230:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	633a      	str	r2, [r7, #48]	; 0x30
 800b238:	627b      	str	r3, [r7, #36]	; 0x24
                px_fp(draw_area.x1 - main_line->sx, draw_area.y1, mask, style->line.color, opa);
 800b23a:	f8df b2cc 	ldr.w	fp, [pc, #716]	; 800b508 <lv_draw_line+0x474>
 800b23e:	6a38      	ldr	r0, [r7, #32]
 800b240:	68fc      	ldr	r4, [r7, #12]
 800b242:	62fd      	str	r5, [r7, #44]	; 0x2c
 800b244:	e003      	b.n	800b24e <lv_draw_line+0x1ba>
 800b246:	f938 0c04 	ldrsh.w	r0, [r8, #-4]
 800b24a:	f938 4c02 	ldrsh.w	r4, [r8, #-2]
            draw_area.x1 = prev_p.x + pattern[i].x;
 800b24e:	f8b7 e04c 	ldrh.w	lr, [r7, #76]	; 0x4c
            fill_fp(&draw_area, mask, style->line.color, opa);
 800b252:	4653      	mov	r3, sl
            draw_area.y1 = prev_p.y + pattern[i].y;
 800b254:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
            draw_area.x1 = prev_p.x + pattern[i].x;
 800b258:	4470      	add	r0, lr
            draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y;
 800b25a:	f8b7 c04e 	ldrh.w	ip, [r7, #78]	; 0x4e
            draw_area.y1 = prev_p.y + pattern[i].y;
 800b25e:	4422      	add	r2, r4
            draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y;
 800b260:	f8b7 e05a 	ldrh.w	lr, [r7, #90]	; 0x5a
            draw_area.x1 = prev_p.x + pattern[i].x;
 800b264:	b200      	sxth	r0, r0
            fill_fp(&draw_area, mask, style->line.color, opa);
 800b266:	6af9      	ldr	r1, [r7, #44]	; 0x2c
            draw_area.y1 = prev_p.y + pattern[i].y;
 800b268:	b292      	uxth	r2, r2
            draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y;
 800b26a:	ebae 0e0c 	sub.w	lr, lr, ip
            draw_area.x1 = prev_p.x + pattern[i].x;
 800b26e:	f8a7 006c 	strh.w	r0, [r7, #108]	; 0x6c
            draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y;
 800b272:	4496      	add	lr, r2
            draw_area.x2 = draw_area.x1;
 800b274:	f8a7 0070 	strh.w	r0, [r7, #112]	; 0x70
            draw_area.y1 = prev_p.y + pattern[i].y;
 800b278:	f8a7 206e 	strh.w	r2, [r7, #110]	; 0x6e
            fill_fp(&draw_area, mask, style->line.color, opa);
 800b27c:	6b38      	ldr	r0, [r7, #48]	; 0x30
            draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y;
 800b27e:	f8a7 e072 	strh.w	lr, [r7, #114]	; 0x72
            fill_fp(&draw_area, mask, style->line.color, opa);
 800b282:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
 800b286:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800b288:	47a8      	blx	r5
            if(i != 0 && pattern[i].y != pattern[i - 1].y && !first_run) {
 800b28a:	b1ae      	cbz	r6, 800b2b8 <lv_draw_line+0x224>
 800b28c:	f938 3c06 	ldrsh.w	r3, [r8, #-6]
 800b290:	42a3      	cmp	r3, r4
 800b292:	d011      	beq.n	800b2b8 <lv_draw_line+0x224>
 800b294:	6abb      	ldr	r3, [r7, #40]	; 0x28
                px_fp(draw_area.x1 - main_line->sx, draw_area.y1, mask, style->line.color, opa);
 800b296:	6afa      	ldr	r2, [r7, #44]	; 0x2c
            if(i != 0 && pattern[i].y != pattern[i - 1].y && !first_run) {
 800b298:	b973      	cbnz	r3, 800b2b8 <lv_draw_line+0x224>
                px_fp(draw_area.x1 - main_line->sx, draw_area.y1, mask, style->line.color, opa);
 800b29a:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 800b29e:	f8b7 006c 	ldrh.w	r0, [r7, #108]	; 0x6c
 800b2a2:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800b2a6:	1a40      	subs	r0, r0, r1
 800b2a8:	f8db 4000 	ldr.w	r4, [fp]
 800b2ac:	f9b7 106e 	ldrsh.w	r1, [r7, #110]	; 0x6e
 800b2b0:	b200      	sxth	r0, r0
 800b2b2:	f8cd a000 	str.w	sl, [sp]
 800b2b6:	47a0      	blx	r4
 800b2b8:	3601      	adds	r6, #1
        for(i = 0; i < width; i++) {
 800b2ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2bc:	f108 0804 	add.w	r8, r8, #4
 800b2c0:	b233      	sxth	r3, r6
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	dcbf      	bgt.n	800b246 <lv_draw_line+0x1b2>
 800b2c6:	6afd      	ldr	r5, [r7, #44]	; 0x2c
        lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
 800b2c8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800b2cc:	462b      	mov	r3, r5
 800b2ce:	697a      	ldr	r2, [r7, #20]
 800b2d0:	f8b7 104e 	ldrh.w	r1, [r7, #78]	; 0x4e
 800b2d4:	693e      	ldr	r6, [r7, #16]
 800b2d6:	4402      	add	r2, r0
                -(main_line->p_act.y - prev_p.y + 1), mask, style->line.color, opa);
 800b2d8:	f8b7 404e 	ldrh.w	r4, [r7, #78]	; 0x4e
        lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
 800b2dc:	4610      	mov	r0, r2
 800b2de:	440e      	add	r6, r1
                -(main_line->p_act.y - prev_p.y + 1), mask, style->line.color, opa);
 800b2e0:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
        lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
 800b2e4:	4631      	mov	r1, r6
 800b2e6:	68be      	ldr	r6, [r7, #8]
                -(main_line->p_act.y - prev_p.y + 1), mask, style->line.color, opa);
 800b2e8:	1b12      	subs	r2, r2, r4
        lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
 800b2ea:	f8cd a004 	str.w	sl, [sp, #4]
 800b2ee:	1b80      	subs	r0, r0, r6
 800b2f0:	f8d9 4040 	ldr.w	r4, [r9, #64]	; 0x40
 800b2f4:	43d2      	mvns	r2, r2
 800b2f6:	b209      	sxth	r1, r1
 800b2f8:	b200      	sxth	r0, r0
 800b2fa:	9400      	str	r4, [sp, #0]
 800b2fc:	b212      	sxth	r2, r2
 800b2fe:	f7ff f9c7 	bl	800a690 <lv_draw_aa_ver_seg>
        lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2, prev_p.y + pattern[width_safe - 1].y,
 800b302:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800b306:	69f9      	ldr	r1, [r7, #28]
 800b308:	462b      	mov	r3, r5
 800b30a:	687d      	ldr	r5, [r7, #4]
 800b30c:	4401      	add	r1, r0
                main_line->p_act.y - prev_p.y + 1, mask, style->line.color, opa);
 800b30e:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
        lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2, prev_p.y + pattern[width_safe - 1].y,
 800b312:	4608      	mov	r0, r1
                main_line->p_act.y - prev_p.y + 1, mask, style->line.color, opa);
 800b314:	3201      	adds	r2, #1
        lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2, prev_p.y + pattern[width_safe - 1].y,
 800b316:	f8b7 104e 	ldrh.w	r1, [r7, #78]	; 0x4e
 800b31a:	4405      	add	r5, r0
                main_line->p_act.y - prev_p.y + 1, mask, style->line.color, opa);
 800b31c:	f8b7 404e 	ldrh.w	r4, [r7, #78]	; 0x4e
        lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2, prev_p.y + pattern[width_safe - 1].y,
 800b320:	4628      	mov	r0, r5
 800b322:	69bd      	ldr	r5, [r7, #24]
                main_line->p_act.y - prev_p.y + 1, mask, style->line.color, opa);
 800b324:	1b12      	subs	r2, r2, r4
        lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2, prev_p.y + pattern[width_safe - 1].y,
 800b326:	f8cd a004 	str.w	sl, [sp, #4]
 800b32a:	440d      	add	r5, r1
 800b32c:	f8d9 4040 	ldr.w	r4, [r9, #64]	; 0x40
 800b330:	b200      	sxth	r0, r0
 800b332:	b229      	sxth	r1, r5
 800b334:	9400      	str	r4, [sp, #0]
 800b336:	b212      	sxth	r2, r2
 800b338:	f7ff f9aa 	bl	800a690 <lv_draw_aa_ver_seg>
 800b33c:	f8d7 d000 	ldr.w	sp, [r7]
}
 800b340:	378c      	adds	r7, #140	; 0x8c
 800b342:	46bd      	mov	sp, r7
 800b344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(point1->y < point2->y) {
 800b348:	4575      	cmp	r5, lr
 800b34a:	f6bf aecc 	bge.w	800b0e6 <lv_draw_line+0x52>
            p1.x = point1->x;
 800b34e:	87bc      	strh	r4, [r7, #60]	; 0x3c
            p1.y = point1->y;
 800b350:	87fd      	strh	r5, [r7, #62]	; 0x3e
            p2.x = point2->x;
 800b352:	f8a7 6040 	strh.w	r6, [r7, #64]	; 0x40
            p2.y = point2->y;
 800b356:	f8a7 e042 	strh.w	lr, [r7, #66]	; 0x42
 800b35a:	e6cb      	b.n	800b0f4 <lv_draw_line+0x60>
            if(main_line.p1.y < main_line.p2.y) {
 800b35c:	42a0      	cmp	r0, r4
 800b35e:	f2c0 8389 	blt.w	800ba74 <lv_draw_line+0x9e0>
            else if(main_line.p1.y > main_line.p2.y) {
 800b362:	f300 8515 	bgt.w	800bd90 <lv_draw_line+0xcfc>
 800b366:	2300      	movs	r3, #0
 800b368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b36a:	e6e6      	b.n	800b13a <lv_draw_line+0xa6>
    if(point1->x == point2->x && point1->y == point2->y) return;
 800b36c:	4575      	cmp	r5, lr
 800b36e:	f47f aea7 	bne.w	800b0c0 <lv_draw_line+0x2c>
 800b372:	e7e5      	b.n	800b340 <lv_draw_line+0x2ac>
            for(i = 0; i < width; i++) {
 800b374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b376:	2b00      	cmp	r3, #0
 800b378:	dd4e      	ble.n	800b418 <lv_draw_line+0x384>
 800b37a:	4b62      	ldr	r3, [pc, #392]	; (800b504 <lv_draw_line+0x470>)
 800b37c:	2600      	movs	r6, #0
 800b37e:	f8d7 b00c 	ldr.w	fp, [r7, #12]
 800b382:	f107 086c 	add.w	r8, r7, #108	; 0x6c
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	6a38      	ldr	r0, [r7, #32]
 800b38a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b38e:	633d      	str	r5, [r7, #48]	; 0x30
 800b390:	1d1c      	adds	r4, r3, #4
 800b392:	e003      	b.n	800b39c <lv_draw_line+0x308>
 800b394:	f934 0c04 	ldrsh.w	r0, [r4, #-4]
 800b398:	f934 bc02 	ldrsh.w	fp, [r4, #-2]
                draw_area.x1 = prev_p.x + pattern[i].x;
 800b39c:	f8b7 c04c 	ldrh.w	ip, [r7, #76]	; 0x4c
                fill_fp(&draw_area, mask, style->line.color, opa);
 800b3a0:	4653      	mov	r3, sl
                draw_area.y1 = prev_p.y + pattern[i].y;
 800b3a2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
                draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y - 1;
 800b3a6:	f8b7 e05a 	ldrh.w	lr, [r7, #90]	; 0x5a
                draw_area.x1 = prev_p.x + pattern[i].x;
 800b3aa:	4460      	add	r0, ip
                draw_area.y1 = prev_p.y + pattern[i].y;
 800b3ac:	445a      	add	r2, fp
                draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y - 1;
 800b3ae:	f8b7 c04e 	ldrh.w	ip, [r7, #78]	; 0x4e
 800b3b2:	f10e 3eff 	add.w	lr, lr, #4294967295
                draw_area.x1 = prev_p.x + pattern[i].x;
 800b3b6:	b200      	sxth	r0, r0
                draw_area.y1 = prev_p.y + pattern[i].y;
 800b3b8:	b292      	uxth	r2, r2
                fill_fp(&draw_area, mask, style->line.color, opa);
 800b3ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
                draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y - 1;
 800b3bc:	ebae 0e0c 	sub.w	lr, lr, ip
                draw_area.x1 = prev_p.x + pattern[i].x;
 800b3c0:	f8a7 006c 	strh.w	r0, [r7, #108]	; 0x6c
                draw_area.x2 = draw_area.x1;
 800b3c4:	f8a7 0070 	strh.w	r0, [r7, #112]	; 0x70
                fill_fp(&draw_area, mask, style->line.color, opa);
 800b3c8:	4640      	mov	r0, r8
                draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y - 1;
 800b3ca:	4496      	add	lr, r2
                draw_area.y1 = prev_p.y + pattern[i].y;
 800b3cc:	f8a7 206e 	strh.w	r2, [r7, #110]	; 0x6e
                fill_fp(&draw_area, mask, style->line.color, opa);
 800b3d0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800b3d2:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
                draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y - 1;
 800b3d6:	f8a7 e072 	strh.w	lr, [r7, #114]	; 0x72
                fill_fp(&draw_area, mask, style->line.color, opa);
 800b3da:	47a8      	blx	r5
                if(i != 0 && pattern[i].y != pattern[i - 1].y && !first_run) {
 800b3dc:	b1ae      	cbz	r6, 800b40a <lv_draw_line+0x376>
 800b3de:	f934 3c06 	ldrsh.w	r3, [r4, #-6]
 800b3e2:	455b      	cmp	r3, fp
 800b3e4:	d011      	beq.n	800b40a <lv_draw_line+0x376>
 800b3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
                    px_fp(draw_area.x1 - main_line->sx, draw_area.y1, mask, style->line.color, opa);
 800b3e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
                if(i != 0 && pattern[i].y != pattern[i - 1].y && !first_run) {
 800b3ea:	b973      	cbnz	r3, 800b40a <lv_draw_line+0x376>
                    px_fp(draw_area.x1 - main_line->sx, draw_area.y1, mask, style->line.color, opa);
 800b3ec:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 800b3f0:	f8b7 006c 	ldrh.w	r0, [r7, #108]	; 0x6c
 800b3f4:	4d44      	ldr	r5, [pc, #272]	; (800b508 <lv_draw_line+0x474>)
 800b3f6:	1a40      	subs	r0, r0, r1
 800b3f8:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800b3fc:	f9b7 106e 	ldrsh.w	r1, [r7, #110]	; 0x6e
 800b400:	b200      	sxth	r0, r0
 800b402:	f8cd a000 	str.w	sl, [sp]
 800b406:	682d      	ldr	r5, [r5, #0]
 800b408:	47a8      	blx	r5
 800b40a:	3601      	adds	r6, #1
            for(i = 0; i < width; i++) {
 800b40c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b40e:	3404      	adds	r4, #4
 800b410:	b233      	sxth	r3, r6
 800b412:	429a      	cmp	r2, r3
 800b414:	dcbe      	bgt.n	800b394 <lv_draw_line+0x300>
 800b416:	6b3d      	ldr	r5, [r7, #48]	; 0x30
            lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
 800b418:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800b41c:	462b      	mov	r3, r5
 800b41e:	697a      	ldr	r2, [r7, #20]
 800b420:	f8b7 104e 	ldrh.w	r1, [r7, #78]	; 0x4e
                    -(main_line->p_act.y - prev_p.y), mask, style->line.color, opa);
 800b424:	f8b7 405a 	ldrh.w	r4, [r7, #90]	; 0x5a
            lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
 800b428:	4410      	add	r0, r2
 800b42a:	693e      	ldr	r6, [r7, #16]
                    -(main_line->p_act.y - prev_p.y), mask, style->line.color, opa);
 800b42c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
            lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
 800b430:	4431      	add	r1, r6
 800b432:	68be      	ldr	r6, [r7, #8]
                    -(main_line->p_act.y - prev_p.y), mask, style->line.color, opa);
 800b434:	1b12      	subs	r2, r2, r4
            lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
 800b436:	f8cd a004 	str.w	sl, [sp, #4]
 800b43a:	f8d9 4040 	ldr.w	r4, [r9, #64]	; 0x40
 800b43e:	1b80      	subs	r0, r0, r6
 800b440:	b209      	sxth	r1, r1
 800b442:	9400      	str	r4, [sp, #0]
            first_run = false;
 800b444:	2400      	movs	r4, #0
            lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
 800b446:	b200      	sxth	r0, r0
 800b448:	b212      	sxth	r2, r2
            first_run = false;
 800b44a:	62bc      	str	r4, [r7, #40]	; 0x28
            lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
 800b44c:	f7ff f920 	bl	800a690 <lv_draw_aa_ver_seg>
            lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2, prev_p.y + pattern[width_safe - 1].y,
 800b450:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800b454:	69fb      	ldr	r3, [r7, #28]
 800b456:	687c      	ldr	r4, [r7, #4]
 800b458:	4418      	add	r0, r3
 800b45a:	f8b7 104e 	ldrh.w	r1, [r7, #78]	; 0x4e
                    main_line->p_act.y - prev_p.y, mask, style->line.color, opa);
 800b45e:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 800b462:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
            lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2, prev_p.y + pattern[width_safe - 1].y,
 800b466:	4420      	add	r0, r4
 800b468:	69bc      	ldr	r4, [r7, #24]
                    main_line->p_act.y - prev_p.y, mask, style->line.color, opa);
 800b46a:	1ad2      	subs	r2, r2, r3
            lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2, prev_p.y + pattern[width_safe - 1].y,
 800b46c:	f8cd a004 	str.w	sl, [sp, #4]
 800b470:	4421      	add	r1, r4
 800b472:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800b476:	b200      	sxth	r0, r0
 800b478:	9300      	str	r3, [sp, #0]
 800b47a:	b209      	sxth	r1, r1
 800b47c:	462b      	mov	r3, r5
 800b47e:	b212      	sxth	r2, r2
 800b480:	f7ff f906 	bl	800a690 <lv_draw_aa_ver_seg>
            prev_p.x = main_line->p_act.x;
 800b484:	f9b7 4058 	ldrsh.w	r4, [r7, #88]	; 0x58
            prev_p.y = main_line->p_act.y;
 800b488:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
            prev_p.x = main_line->p_act.x;
 800b48c:	f8a7 404c 	strh.w	r4, [r7, #76]	; 0x4c
            prev_p.y = main_line->p_act.y;
 800b490:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800b494:	e6be      	b.n	800b214 <lv_draw_line+0x180>
        if(main_line->p1.x < main_line->p2.x + dir_ori) {
 800b496:	449c      	add	ip, r3
 800b498:	45e6      	cmp	lr, ip
 800b49a:	f6bf ae6b 	bge.w	800b174 <lv_draw_line+0xe0>
            vect_norm.y = - vect_main.x;
 800b49e:	4271      	negs	r1, r6
 800b4a0:	b209      	sxth	r1, r1
 800b4a2:	e66b      	b.n	800b17c <lv_draw_line+0xe8>
        if(main_line->sy < 0) {
 800b4a4:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 800b4a8:	2a00      	cmp	r2, #0
 800b4aa:	f2c0 8461 	blt.w	800bd70 <lv_draw_line+0xcdc>
 800b4ae:	b29b      	uxth	r3, r3
 800b4b0:	60bb      	str	r3, [r7, #8]
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	607b      	str	r3, [r7, #4]
    prev_p.x = main_line->p1.x;
 800b4b6:	f8a7 e04c 	strh.w	lr, [r7, #76]	; 0x4c
 800b4ba:	f9b7 405a 	ldrsh.w	r4, [r7, #90]	; 0x5a
    prev_p.y = main_line->p1.y;
 800b4be:	f8a7 004e 	strh.w	r0, [r7, #78]	; 0x4e
 800b4c2:	e004      	b.n	800b4ce <lv_draw_line+0x43a>
    } while(last_y == line->p_act.y);
 800b4c4:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800b4c8:	42a3      	cmp	r3, r4
 800b4ca:	f040 809b 	bne.w	800b604 <lv_draw_line+0x570>
        if(!line_next(line)) return false;
 800b4ce:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800b4d2:	f7ff fdaf 	bl	800b034 <line_next>
 800b4d6:	2800      	cmp	r0, #0
 800b4d8:	d1f4      	bne.n	800b4c4 <lv_draw_line+0x430>
        for(i = 0; i < width; i++) {
 800b4da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	dd56      	ble.n	800b58e <lv_draw_line+0x4fa>
 800b4e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4e2:	4606      	mov	r6, r0
 800b4e4:	4b07      	ldr	r3, [pc, #28]	; (800b504 <lv_draw_line+0x470>)
 800b4e6:	f102 0804 	add.w	r8, r2, #4
 800b4ea:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	633a      	str	r2, [r7, #48]	; 0x30
 800b4f2:	627b      	str	r3, [r7, #36]	; 0x24
                px_fp(draw_area.x1, draw_area.y1 - main_line->sy, mask, style->line.color, opa);
 800b4f4:	f8df b010 	ldr.w	fp, [pc, #16]	; 800b508 <lv_draw_line+0x474>
 800b4f8:	6a3c      	ldr	r4, [r7, #32]
 800b4fa:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800b4fe:	62fd      	str	r5, [r7, #44]	; 0x2c
 800b500:	e008      	b.n	800b514 <lv_draw_line+0x480>
 800b502:	bf00      	nop
 800b504:	080872f0 	.word	0x080872f0
 800b508:	080872f4 	.word	0x080872f4
 800b50c:	f938 4c04 	ldrsh.w	r4, [r8, #-4]
 800b510:	f938 ec02 	ldrsh.w	lr, [r8, #-2]
            draw_area.x1 = prev_p.x + pattern[i].x;
 800b514:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
            fill_fp(&draw_area, mask, style->line.color, opa);
 800b518:	4653      	mov	r3, sl
            draw_area.y1 = prev_p.y + pattern[i].y;
 800b51a:	f8b7 004e 	ldrh.w	r0, [r7, #78]	; 0x4e
            draw_area.x1 = prev_p.x + pattern[i].x;
 800b51e:	4422      	add	r2, r4
            draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x;
 800b520:	f8b7 c04c 	ldrh.w	ip, [r7, #76]	; 0x4c
            draw_area.y1 = prev_p.y + pattern[i].y;
 800b524:	4470      	add	r0, lr
            draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x;
 800b526:	f8b7 e058 	ldrh.w	lr, [r7, #88]	; 0x58
            draw_area.x1 = prev_p.x + pattern[i].x;
 800b52a:	b292      	uxth	r2, r2
            fill_fp(&draw_area, mask, style->line.color, opa);
 800b52c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
            draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x;
 800b52e:	ebae 0e0c 	sub.w	lr, lr, ip
            draw_area.y1 = prev_p.y + pattern[i].y;
 800b532:	b200      	sxth	r0, r0
            draw_area.x1 = prev_p.x + pattern[i].x;
 800b534:	f8a7 206c 	strh.w	r2, [r7, #108]	; 0x6c
            draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x;
 800b538:	4472      	add	r2, lr
            draw_area.y1 = prev_p.y + pattern[i].y;
 800b53a:	f8a7 006e 	strh.w	r0, [r7, #110]	; 0x6e
            draw_area.y2 = draw_area.y1;
 800b53e:	f8a7 0072 	strh.w	r0, [r7, #114]	; 0x72
            draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x;
 800b542:	f8a7 2070 	strh.w	r2, [r7, #112]	; 0x70
            fill_fp(&draw_area, mask, style->line.color, opa);
 800b546:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b548:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
 800b54c:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800b54e:	47a8      	blx	r5
            if(i != 0 && pattern[i].x != pattern[i - 1].x && !first_run) {
 800b550:	b1ae      	cbz	r6, 800b57e <lv_draw_line+0x4ea>
 800b552:	f938 3c08 	ldrsh.w	r3, [r8, #-8]
 800b556:	42a3      	cmp	r3, r4
 800b558:	d011      	beq.n	800b57e <lv_draw_line+0x4ea>
 800b55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
                px_fp(draw_area.x1, draw_area.y1 - main_line->sy, mask, style->line.color, opa);
 800b55c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
            if(i != 0 && pattern[i].x != pattern[i - 1].x && !first_run) {
 800b55e:	b973      	cbnz	r3, 800b57e <lv_draw_line+0x4ea>
                px_fp(draw_area.x1, draw_area.y1 - main_line->sy, mask, style->line.color, opa);
 800b560:	f8b7 0062 	ldrh.w	r0, [r7, #98]	; 0x62
 800b564:	f8b7 106e 	ldrh.w	r1, [r7, #110]	; 0x6e
 800b568:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800b56c:	1a09      	subs	r1, r1, r0
 800b56e:	f8db 4000 	ldr.w	r4, [fp]
 800b572:	f9b7 006c 	ldrsh.w	r0, [r7, #108]	; 0x6c
 800b576:	b209      	sxth	r1, r1
 800b578:	f8cd a000 	str.w	sl, [sp]
 800b57c:	47a0      	blx	r4
 800b57e:	3601      	adds	r6, #1
        for(i = 0; i < width; i++) {
 800b580:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b582:	f108 0804 	add.w	r8, r8, #4
 800b586:	b233      	sxth	r3, r6
 800b588:	429a      	cmp	r2, r3
 800b58a:	dcbf      	bgt.n	800b50c <lv_draw_line+0x478>
 800b58c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
        lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 800b58e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800b592:	462b      	mov	r3, r5
 800b594:	697a      	ldr	r2, [r7, #20]
 800b596:	f8b7 104e 	ldrh.w	r1, [r7, #78]	; 0x4e
 800b59a:	4402      	add	r2, r0
                -(main_line->p_act.x - prev_p.x + 1), mask, style->line.color, opa);
 800b59c:	f8b7 404c 	ldrh.w	r4, [r7, #76]	; 0x4c
        lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 800b5a0:	4610      	mov	r0, r2
 800b5a2:	693a      	ldr	r2, [r7, #16]
 800b5a4:	440a      	add	r2, r1
 800b5a6:	b200      	sxth	r0, r0
 800b5a8:	4611      	mov	r1, r2
                -(main_line->p_act.x - prev_p.x + 1), mask, style->line.color, opa);
 800b5aa:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
        lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 800b5ae:	f8cd a004 	str.w	sl, [sp, #4]
                -(main_line->p_act.x - prev_p.x + 1), mask, style->line.color, opa);
 800b5b2:	1b12      	subs	r2, r2, r4
        lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 800b5b4:	68bc      	ldr	r4, [r7, #8]
 800b5b6:	43d2      	mvns	r2, r2
 800b5b8:	1b09      	subs	r1, r1, r4
 800b5ba:	f8d9 4040 	ldr.w	r4, [r9, #64]	; 0x40
 800b5be:	b209      	sxth	r1, r1
 800b5c0:	9400      	str	r4, [sp, #0]
 800b5c2:	b212      	sxth	r2, r2
 800b5c4:	f7ff f898 	bl	800a6f8 <lv_draw_aa_hor_seg>
        lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x, prev_p.y + pattern[width_safe - 1].y + aa_shift2,
 800b5c8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800b5cc:	69fc      	ldr	r4, [r7, #28]
 800b5ce:	462b      	mov	r3, r5
 800b5d0:	f8b7 104e 	ldrh.w	r1, [r7, #78]	; 0x4e
 800b5d4:	69bd      	ldr	r5, [r7, #24]
 800b5d6:	4404      	add	r4, r0
                main_line->p_act.x - prev_p.x + 1, mask, style->line.color, opa);
 800b5d8:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
        lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x, prev_p.y + pattern[width_safe - 1].y + aa_shift2,
 800b5dc:	440d      	add	r5, r1
 800b5de:	4620      	mov	r0, r4
                main_line->p_act.x - prev_p.x + 1, mask, style->line.color, opa);
 800b5e0:	f8b7 404c 	ldrh.w	r4, [r7, #76]	; 0x4c
 800b5e4:	3201      	adds	r2, #1
        lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x, prev_p.y + pattern[width_safe - 1].y + aa_shift2,
 800b5e6:	f8cd a004 	str.w	sl, [sp, #4]
 800b5ea:	4629      	mov	r1, r5
 800b5ec:	687d      	ldr	r5, [r7, #4]
                main_line->p_act.x - prev_p.x + 1, mask, style->line.color, opa);
 800b5ee:	1b12      	subs	r2, r2, r4
        lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x, prev_p.y + pattern[width_safe - 1].y + aa_shift2,
 800b5f0:	f8d9 4040 	ldr.w	r4, [r9, #64]	; 0x40
 800b5f4:	b200      	sxth	r0, r0
 800b5f6:	440d      	add	r5, r1
 800b5f8:	b212      	sxth	r2, r2
 800b5fa:	9400      	str	r4, [sp, #0]
 800b5fc:	b229      	sxth	r1, r5
 800b5fe:	f7ff f87b 	bl	800a6f8 <lv_draw_aa_hor_seg>
 800b602:	e69b      	b.n	800b33c <lv_draw_line+0x2a8>
            for(i = 0; i < width; i++) {
 800b604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b606:	2b00      	cmp	r3, #0
 800b608:	dd4e      	ble.n	800b6a8 <lv_draw_line+0x614>
 800b60a:	4b83      	ldr	r3, [pc, #524]	; (800b818 <lv_draw_line+0x784>)
 800b60c:	2600      	movs	r6, #0
 800b60e:	68f8      	ldr	r0, [r7, #12]
 800b610:	f107 086c 	add.w	r8, r7, #108	; 0x6c
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f8d7 b020 	ldr.w	fp, [r7, #32]
 800b61a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b61e:	633d      	str	r5, [r7, #48]	; 0x30
 800b620:	1d1c      	adds	r4, r3, #4
 800b622:	e003      	b.n	800b62c <lv_draw_line+0x598>
 800b624:	f934 bc04 	ldrsh.w	fp, [r4, #-4]
 800b628:	f934 0c02 	ldrsh.w	r0, [r4, #-2]
                draw_area.x1 = prev_p.x + pattern[i].x;
 800b62c:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
                fill_fp(&draw_area, mask, style->line.color, opa);
 800b630:	4653      	mov	r3, sl
                draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x - 1;
 800b632:	f8b7 e058 	ldrh.w	lr, [r7, #88]	; 0x58
                draw_area.y1 = prev_p.y + pattern[i].y;
 800b636:	f8b7 c04e 	ldrh.w	ip, [r7, #78]	; 0x4e
                draw_area.x1 = prev_p.x + pattern[i].x;
 800b63a:	4459      	add	r1, fp
                draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x - 1;
 800b63c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800b640:	f10e 3eff 	add.w	lr, lr, #4294967295
                draw_area.x1 = prev_p.x + pattern[i].x;
 800b644:	b289      	uxth	r1, r1
                draw_area.y1 = prev_p.y + pattern[i].y;
 800b646:	4460      	add	r0, ip
                draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x - 1;
 800b648:	ebae 0e02 	sub.w	lr, lr, r2
                fill_fp(&draw_area, mask, style->line.color, opa);
 800b64c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
                draw_area.y1 = prev_p.y + pattern[i].y;
 800b64e:	b200      	sxth	r0, r0
                draw_area.x1 = prev_p.x + pattern[i].x;
 800b650:	f8a7 106c 	strh.w	r1, [r7, #108]	; 0x6c
                draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x - 1;
 800b654:	448e      	add	lr, r1
                fill_fp(&draw_area, mask, style->line.color, opa);
 800b656:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
                draw_area.y1 = prev_p.y + pattern[i].y;
 800b65a:	f8a7 006e 	strh.w	r0, [r7, #110]	; 0x6e
                draw_area.y2 = draw_area.y1;
 800b65e:	f8a7 0072 	strh.w	r0, [r7, #114]	; 0x72
                fill_fp(&draw_area, mask, style->line.color, opa);
 800b662:	4640      	mov	r0, r8
 800b664:	6b39      	ldr	r1, [r7, #48]	; 0x30
                draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x - 1;
 800b666:	f8a7 e070 	strh.w	lr, [r7, #112]	; 0x70
                fill_fp(&draw_area, mask, style->line.color, opa);
 800b66a:	47a8      	blx	r5
                if(i != 0 && pattern[i].x != pattern[i - 1].x && !first_run) {
 800b66c:	b1ae      	cbz	r6, 800b69a <lv_draw_line+0x606>
 800b66e:	f934 3c08 	ldrsh.w	r3, [r4, #-8]
 800b672:	455b      	cmp	r3, fp
 800b674:	d011      	beq.n	800b69a <lv_draw_line+0x606>
 800b676:	6abb      	ldr	r3, [r7, #40]	; 0x28
                    px_fp(draw_area.x1, draw_area.y1 - main_line->sy, mask, style->line.color, opa);
 800b678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
                if(i != 0 && pattern[i].x != pattern[i - 1].x && !first_run) {
 800b67a:	b973      	cbnz	r3, 800b69a <lv_draw_line+0x606>
                    px_fp(draw_area.x1, draw_area.y1 - main_line->sy, mask, style->line.color, opa);
 800b67c:	f8b7 0062 	ldrh.w	r0, [r7, #98]	; 0x62
 800b680:	f8b7 106e 	ldrh.w	r1, [r7, #110]	; 0x6e
 800b684:	4d65      	ldr	r5, [pc, #404]	; (800b81c <lv_draw_line+0x788>)
 800b686:	1a09      	subs	r1, r1, r0
 800b688:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800b68c:	f9b7 006c 	ldrsh.w	r0, [r7, #108]	; 0x6c
 800b690:	b209      	sxth	r1, r1
 800b692:	f8cd a000 	str.w	sl, [sp]
 800b696:	682d      	ldr	r5, [r5, #0]
 800b698:	47a8      	blx	r5
 800b69a:	3601      	adds	r6, #1
            for(i = 0; i < width; i++) {
 800b69c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b69e:	3404      	adds	r4, #4
 800b6a0:	b233      	sxth	r3, r6
 800b6a2:	429a      	cmp	r2, r3
 800b6a4:	dcbe      	bgt.n	800b624 <lv_draw_line+0x590>
 800b6a6:	6b3d      	ldr	r5, [r7, #48]	; 0x30
            lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 800b6a8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800b6ac:	462b      	mov	r3, r5
 800b6ae:	697a      	ldr	r2, [r7, #20]
 800b6b0:	f8b7 104e 	ldrh.w	r1, [r7, #78]	; 0x4e
 800b6b4:	4410      	add	r0, r2
 800b6b6:	693a      	ldr	r2, [r7, #16]
                    -(main_line->p_act.x - prev_p.x), mask, style->line.color, opa);
 800b6b8:	f8b7 4058 	ldrh.w	r4, [r7, #88]	; 0x58
            lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 800b6bc:	4411      	add	r1, r2
                    -(main_line->p_act.x - prev_p.x), mask, style->line.color, opa);
 800b6be:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
            lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 800b6c2:	f8cd a004 	str.w	sl, [sp, #4]
 800b6c6:	b200      	sxth	r0, r0
 800b6c8:	68be      	ldr	r6, [r7, #8]
                    -(main_line->p_act.x - prev_p.x), mask, style->line.color, opa);
 800b6ca:	1b12      	subs	r2, r2, r4
            lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 800b6cc:	f8d9 4040 	ldr.w	r4, [r9, #64]	; 0x40
 800b6d0:	1b89      	subs	r1, r1, r6
 800b6d2:	b212      	sxth	r2, r2
 800b6d4:	9400      	str	r4, [sp, #0]
 800b6d6:	b209      	sxth	r1, r1
 800b6d8:	f7ff f80e 	bl	800a6f8 <lv_draw_aa_hor_seg>
            lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x, prev_p.y + pattern[width_safe - 1].y + aa_shift2,
 800b6dc:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800b6e0:	69fa      	ldr	r2, [r7, #28]
 800b6e2:	462b      	mov	r3, r5
 800b6e4:	f8b7 104e 	ldrh.w	r1, [r7, #78]	; 0x4e
 800b6e8:	4410      	add	r0, r2
 800b6ea:	69ba      	ldr	r2, [r7, #24]
                    main_line->p_act.x - prev_p.x, mask, style->line.color, opa);
 800b6ec:	f8b7 404c 	ldrh.w	r4, [r7, #76]	; 0x4c
            lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x, prev_p.y + pattern[width_safe - 1].y + aa_shift2,
 800b6f0:	4411      	add	r1, r2
                    main_line->p_act.x - prev_p.x, mask, style->line.color, opa);
 800b6f2:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
            lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x, prev_p.y + pattern[width_safe - 1].y + aa_shift2,
 800b6f6:	f8cd a004 	str.w	sl, [sp, #4]
 800b6fa:	b200      	sxth	r0, r0
 800b6fc:	687e      	ldr	r6, [r7, #4]
                    main_line->p_act.x - prev_p.x, mask, style->line.color, opa);
 800b6fe:	1b12      	subs	r2, r2, r4
            lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x, prev_p.y + pattern[width_safe - 1].y + aa_shift2,
 800b700:	f8d9 4040 	ldr.w	r4, [r9, #64]	; 0x40
 800b704:	4431      	add	r1, r6
 800b706:	b212      	sxth	r2, r2
 800b708:	9400      	str	r4, [sp, #0]
 800b70a:	b209      	sxth	r1, r1
 800b70c:	f7fe fff4 	bl	800a6f8 <lv_draw_aa_hor_seg>
            first_run = false;
 800b710:	2300      	movs	r3, #0
            prev_p.y = main_line->p_act.y;
 800b712:	f9b7 405a 	ldrsh.w	r4, [r7, #90]	; 0x5a
            first_run = false;
 800b716:	62bb      	str	r3, [r7, #40]	; 0x28
            prev_p.x = main_line->p_act.x;
 800b718:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 800b71c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
            prev_p.y = main_line->p_act.y;
 800b720:	f8a7 404e 	strh.w	r4, [r7, #78]	; 0x4e
 800b724:	e6d3      	b.n	800b4ce <lv_draw_line+0x43a>
        line_init(&pattern_line, &p0, &vect_norm);
 800b726:	f107 036c 	add.w	r3, r7, #108	; 0x6c
        lv_point_t p0 = {0, 0};
 800b72a:	2600      	movs	r6, #0
        for(i = 0; i < (lv_coord_t)sizeof(pattern); i ++) {
 800b72c:	b224      	sxth	r4, r4
        line_init(&pattern_line, &p0, &vect_norm);
 800b72e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b732:	4618      	mov	r0, r3
 800b734:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800b738:	633b      	str	r3, [r7, #48]	; 0x30
        lv_point_t p0 = {0, 0};
 800b73a:	f8a7 604c 	strh.w	r6, [r7, #76]	; 0x4c
 800b73e:	f8a7 604e 	strh.w	r6, [r7, #78]	; 0x4e
        line_init(&pattern_line, &p0, &vect_norm);
 800b742:	f7ff fc35 	bl	800afb0 <line_init>
        uint32_t width_sqr = width * width;
 800b746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        for(i = 0; i < (lv_coord_t)sizeof(pattern); i ++) {
 800b748:	42b4      	cmp	r4, r6
        uint32_t width_sqr = width * width;
 800b74a:	fb03 f803 	mul.w	r8, r3, r3
        for(i = 0; i < (lv_coord_t)sizeof(pattern); i ++) {
 800b74e:	dd30      	ble.n	800b7b2 <lv_draw_line+0x71e>
            pattern[i].x = pattern_line.p_act.x;
 800b750:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
            pattern[i].y = pattern_line.p_act.y;
 800b754:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
            pattern[i].x = pattern_line.p_act.x;
 800b758:	4618      	mov	r0, r3
 800b75a:	623b      	str	r3, [r7, #32]
            uint32_t  sqr = pattern_line.p_act.x * pattern_line.p_act.x + pattern_line.p_act.y * pattern_line.p_act.y;
 800b75c:	fb03 f303 	mul.w	r3, r3, r3
            pattern[i].x = pattern_line.p_act.x;
 800b760:	6a79      	ldr	r1, [r7, #36]	; 0x24
            uint32_t  sqr = pattern_line.p_act.x * pattern_line.p_act.x + pattern_line.p_act.y * pattern_line.p_act.y;
 800b762:	fb02 3302 	mla	r3, r2, r2, r3
            pattern[i].x = pattern_line.p_act.x;
 800b766:	8008      	strh	r0, [r1, #0]
            if(sqr >= width_sqr) {
 800b768:	4598      	cmp	r8, r3
            pattern[i].y = pattern_line.p_act.y;
 800b76a:	804a      	strh	r2, [r1, #2]
            if(sqr >= width_sqr) {
 800b76c:	f240 8389 	bls.w	800be82 <lv_draw_line+0xdee>
 800b770:	f8d7 b024 	ldr.w	fp, [r7, #36]	; 0x24
 800b774:	62bd      	str	r5, [r7, #40]	; 0x28
 800b776:	4635      	mov	r5, r6
 800b778:	465e      	mov	r6, fp
 800b77a:	46c3      	mov	fp, r8
 800b77c:	f8d7 8030 	ldr.w	r8, [r7, #48]	; 0x30
 800b780:	e00f      	b.n	800b7a2 <lv_draw_line+0x70e>
            pattern[i].y = pattern_line.p_act.y;
 800b782:	f9b7 e076 	ldrsh.w	lr, [r7, #118]	; 0x76
 800b786:	3604      	adds	r6, #4
            pattern[i].x = pattern_line.p_act.x;
 800b788:	f9b7 0074 	ldrsh.w	r0, [r7, #116]	; 0x74
            uint32_t  sqr = pattern_line.p_act.x * pattern_line.p_act.x + pattern_line.p_act.y * pattern_line.p_act.y;
 800b78c:	fb0e f10e 	mul.w	r1, lr, lr
            pattern[i].y = pattern_line.p_act.y;
 800b790:	f8a6 e002 	strh.w	lr, [r6, #2]
            uint32_t  sqr = pattern_line.p_act.x * pattern_line.p_act.x + pattern_line.p_act.y * pattern_line.p_act.y;
 800b794:	fb00 1100 	mla	r1, r0, r0, r1
            pattern[i].x = pattern_line.p_act.x;
 800b798:	8030      	strh	r0, [r6, #0]
            if(sqr >= width_sqr) {
 800b79a:	458b      	cmp	fp, r1
 800b79c:	f240 82d4 	bls.w	800bd48 <lv_draw_line+0xcb4>
 800b7a0:	461d      	mov	r5, r3
            line_next(&pattern_line);
 800b7a2:	4640      	mov	r0, r8
 800b7a4:	f7ff fc46 	bl	800b034 <line_next>
 800b7a8:	1c6b      	adds	r3, r5, #1
 800b7aa:	b21b      	sxth	r3, r3
        for(i = 0; i < (lv_coord_t)sizeof(pattern); i ++) {
 800b7ac:	42a3      	cmp	r3, r4
 800b7ae:	d1e8      	bne.n	800b782 <lv_draw_line+0x6ee>
 800b7b0:	6abd      	ldr	r5, [r7, #40]	; 0x28
 800b7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b7b8:	623b      	str	r3, [r7, #32]
 800b7ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    for(i = 0; i < width; i++) {
 800b7be:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b7c0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800b7c4:	613b      	str	r3, [r7, #16]
        x_center_ofs = pattern[width - 1].x / 2;
 800b7c6:	f933 6c04 	ldrsh.w	r6, [r3, #-4]
        y_center_ofs = pattern[width - 1].y / 2;
 800b7ca:	693a      	ldr	r2, [r7, #16]
        x_center_ofs = pattern[width - 1].x / 2;
 800b7cc:	2e00      	cmp	r6, #0
 800b7ce:	4633      	mov	r3, r6
        y_center_ofs = pattern[width - 1].y / 2;
 800b7d0:	f932 4c02 	ldrsh.w	r4, [r2, #-2]
        x_center_ofs = pattern[width - 1].x / 2;
 800b7d4:	bfb8      	it	lt
 800b7d6:	1c73      	addlt	r3, r6, #1
        y_center_ofs = pattern[width - 1].y / 2;
 800b7d8:	2c00      	cmp	r4, #0
        x_center_ofs = pattern[width - 1].x / 2;
 800b7da:	ea4f 0263 	mov.w	r2, r3, asr #1
        y_center_ofs = pattern[width - 1].y / 2;
 800b7de:	4623      	mov	r3, r4
 800b7e0:	bfb8      	it	lt
 800b7e2:	1c63      	addlt	r3, r4, #1
    for(i = 0; i < width; i++) {
 800b7e4:	2900      	cmp	r1, #0
        y_center_ofs = pattern[width - 1].y / 2;
 800b7e6:	ea4f 0363 	mov.w	r3, r3, asr #1
    for(i = 0; i < width; i++) {
 800b7ea:	f340 834e 	ble.w	800be8a <lv_draw_line+0xdf6>
 800b7ee:	b29b      	uxth	r3, r3
 800b7f0:	f04f 0b00 	mov.w	fp, #0
 800b7f4:	b292      	uxth	r2, r2
 800b7f6:	62fd      	str	r5, [r7, #44]	; 0x2c
 800b7f8:	61bb      	str	r3, [r7, #24]
 800b7fa:	4659      	mov	r1, fp
 800b7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7fe:	465d      	mov	r5, fp
 800b800:	61fa      	str	r2, [r7, #28]
 800b802:	f1a3 0804 	sub.w	r8, r3, #4
 800b806:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800b80a:	f8c7 a014 	str.w	sl, [r7, #20]
 800b80e:	6a3c      	ldr	r4, [r7, #32]
 800b810:	f8c7 b030 	str.w	fp, [r7, #48]	; 0x30
 800b814:	e04d      	b.n	800b8b2 <lv_draw_line+0x81e>
 800b816:	bf00      	nop
 800b818:	080872f0 	.word	0x080872f0
 800b81c:	080872f4 	.word	0x080872f4
                if(pattern[i - 1].x != pattern[i].x) {
 800b820:	f9b8 0000 	ldrsh.w	r0, [r8]
 800b824:	4570      	cmp	r0, lr
 800b826:	f000 816c 	beq.w	800bb02 <lv_draw_line+0xa6e>
 800b82a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
                    if(main_line->sy < 0) {
 800b82c:	f9b7 0062 	ldrsh.w	r0, [r7, #98]	; 0x62
 800b830:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800b834:	2800      	cmp	r0, #0
                    lv_coord_t seg_w = pattern[i].y - pattern[aa_last_corner].y;
 800b836:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 800b83a:	eba3 040a 	sub.w	r4, r3, sl
 800b83e:	b2a3      	uxth	r3, r4
 800b840:	623b      	str	r3, [r7, #32]
 800b842:	b21a      	sxth	r2, r3
                    if(main_line->sy < 0) {
 800b844:	f2c0 818e 	blt.w	800bb64 <lv_draw_line+0xad0>
                        lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1, main_line->p1.y + pattern[aa_last_corner].y,
 800b848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b84a:	f8b7 0050 	ldrh.w	r0, [r7, #80]	; 0x50
 800b84e:	f833 b021 	ldrh.w	fp, [r3, r1, lsl #2]
 800b852:	697e      	ldr	r6, [r7, #20]
 800b854:	3801      	subs	r0, #1
 800b856:	f8b7 1052 	ldrh.w	r1, [r7, #82]	; 0x52
 800b85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b85c:	4458      	add	r0, fp
 800b85e:	9601      	str	r6, [sp, #4]
 800b860:	4451      	add	r1, sl
 800b862:	f8d9 4040 	ldr.w	r4, [r9, #64]	; 0x40
 800b866:	b200      	sxth	r0, r0
 800b868:	b209      	sxth	r1, r1
 800b86a:	9400      	str	r4, [sp, #0]
 800b86c:	f7fe ff10 	bl	800a690 <lv_draw_aa_ver_seg>
                        lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1, main_line->p2.y + pattern[aa_last_corner].y,
 800b870:	f8b7 0054 	ldrh.w	r0, [r7, #84]	; 0x54
 800b874:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 800b878:	6a3a      	ldr	r2, [r7, #32]
 800b87a:	3001      	adds	r0, #1
 800b87c:	9601      	str	r6, [sp, #4]
 800b87e:	4451      	add	r1, sl
 800b880:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800b884:	4252      	negs	r2, r2
 800b886:	4458      	add	r0, fp
 800b888:	b209      	sxth	r1, r1
 800b88a:	9300      	str	r3, [sp, #0]
 800b88c:	b212      	sxth	r2, r2
 800b88e:	b200      	sxth	r0, r0
 800b890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b892:	f7fe fefd 	bl	800a690 <lv_draw_aa_ver_seg>
 800b896:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b898:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800b89c:	3501      	adds	r5, #1
    for(i = 0; i < width; i++) {
 800b89e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8a0:	f108 0804 	add.w	r8, r8, #4
 800b8a4:	b228      	sxth	r0, r5
 800b8a6:	4298      	cmp	r0, r3
 800b8a8:	6338      	str	r0, [r7, #48]	; 0x30
 800b8aa:	f280 818e 	bge.w	800bbca <lv_draw_line+0xb36>
 800b8ae:	f9b8 4004 	ldrsh.w	r4, [r8, #4]
        pattern[i].x -= x_center_ofs;
 800b8b2:	69f8      	ldr	r0, [r7, #28]
        pattern[i].y -= y_center_ofs;
 800b8b4:	f8b8 3006 	ldrh.w	r3, [r8, #6]
        pattern[i].x -= x_center_ofs;
 800b8b8:	1a24      	subs	r4, r4, r0
        pattern[i].y -= y_center_ofs;
 800b8ba:	69b8      	ldr	r0, [r7, #24]
        pattern[i].x -= x_center_ofs;
 800b8bc:	62bd      	str	r5, [r7, #40]	; 0x28
        pattern[i].y -= y_center_ofs;
 800b8be:	1a1b      	subs	r3, r3, r0
        pattern[i].x -= x_center_ofs;
 800b8c0:	b2a4      	uxth	r4, r4
        pattern[i].y -= y_center_ofs;
 800b8c2:	b29b      	uxth	r3, r3
        pattern[i].x -= x_center_ofs;
 800b8c4:	fa0f fe84 	sxth.w	lr, r4
        pattern[i].y -= y_center_ofs;
 800b8c8:	b218      	sxth	r0, r3
        pattern[i].x -= x_center_ofs;
 800b8ca:	f8a8 e004 	strh.w	lr, [r8, #4]
        pattern[i].y -= y_center_ofs;
 800b8ce:	f8a8 0006 	strh.w	r0, [r8, #6]
        if(i != 0) {
 800b8d2:	2d00      	cmp	r5, #0
 800b8d4:	f000 8115 	beq.w	800bb02 <lv_draw_line+0xa6e>
            if(main_line->hor) {
 800b8d8:	2a00      	cmp	r2, #0
 800b8da:	d1a1      	bne.n	800b820 <lv_draw_line+0x78c>
                if(pattern[i - 1].y != pattern[i].y) {
 800b8dc:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 800b8e0:	4283      	cmp	r3, r0
 800b8e2:	f000 810e 	beq.w	800bb02 <lv_draw_line+0xa6e>
                    lv_coord_t seg_w = pattern[i].x - pattern[aa_last_corner].x;
 800b8e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
                    if(main_line->sx < 0) {
 800b8e8:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
                    lv_coord_t seg_w = pattern[i].x - pattern[aa_last_corner].x;
 800b8ec:	f832 a021 	ldrh.w	sl, [r2, r1, lsl #2]
 800b8f0:	eb02 0e81 	add.w	lr, r2, r1, lsl #2
                    if(main_line->sx < 0) {
 800b8f4:	2b00      	cmp	r3, #0
                    lv_coord_t seg_w = pattern[i].x - pattern[aa_last_corner].x;
 800b8f6:	eba4 040a 	sub.w	r4, r4, sl
 800b8fa:	b2a2      	uxth	r2, r4
 800b8fc:	623a      	str	r2, [r7, #32]
 800b8fe:	b212      	sxth	r2, r2
                    if(main_line->sx < 0) {
 800b900:	f2c0 8101 	blt.w	800bb06 <lv_draw_line+0xa72>
                        lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x, main_line->p1.y + pattern[aa_last_corner].y - 1,
 800b904:	f8b7 1052 	ldrh.w	r1, [r7, #82]	; 0x52
 800b908:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b90c:	f8b7 0050 	ldrh.w	r0, [r7, #80]	; 0x50
 800b910:	3901      	subs	r1, #1
 800b912:	697e      	ldr	r6, [r7, #20]
 800b914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b916:	4459      	add	r1, fp
 800b918:	9601      	str	r6, [sp, #4]
 800b91a:	4450      	add	r0, sl
 800b91c:	f8d9 4040 	ldr.w	r4, [r9, #64]	; 0x40
 800b920:	b209      	sxth	r1, r1
 800b922:	b200      	sxth	r0, r0
 800b924:	9400      	str	r4, [sp, #0]
 800b926:	f7fe fee7 	bl	800a6f8 <lv_draw_aa_hor_seg>
                        lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x, main_line->p2.y + pattern[aa_last_corner].y + 1,
 800b92a:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 800b92e:	f8b7 0054 	ldrh.w	r0, [r7, #84]	; 0x54
 800b932:	6a3a      	ldr	r2, [r7, #32]
 800b934:	3101      	adds	r1, #1
 800b936:	9601      	str	r6, [sp, #4]
 800b938:	4450      	add	r0, sl
 800b93a:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800b93e:	4252      	negs	r2, r2
 800b940:	4459      	add	r1, fp
 800b942:	b200      	sxth	r0, r0
 800b944:	9300      	str	r3, [sp, #0]
 800b946:	b212      	sxth	r2, r2
 800b948:	b209      	sxth	r1, r1
 800b94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b94c:	f7fe fed4 	bl	800a6f8 <lv_draw_aa_hor_seg>
 800b950:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b952:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800b956:	e7a1      	b.n	800b89c <lv_draw_line+0x808>
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t) style->line.opa * opa_scale) >> 8;
 800b958:	f899 a046 	ldrb.w	sl, [r9, #70]	; 0x46
 800b95c:	f7ff bbf9 	b.w	800b152 <lv_draw_line+0xbe>
        if(main_line->hor && main_line->p1.y >= main_line->p2.y + dir_ori) pattern[0].y --;
 800b960:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800b964:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b966:	441a      	add	r2, r3
 800b968:	4290      	cmp	r0, r2
 800b96a:	f6ff ac2b 	blt.w	800b1c4 <lv_draw_line+0x130>
 800b96e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b970:	8853      	ldrh	r3, [r2, #2]
 800b972:	3b01      	subs	r3, #1
 800b974:	b21b      	sxth	r3, r3
 800b976:	4619      	mov	r1, r3
 800b978:	60fb      	str	r3, [r7, #12]
 800b97a:	4613      	mov	r3, r2
 800b97c:	8059      	strh	r1, [r3, #2]
 800b97e:	e425      	b.n	800b1cc <lv_draw_line+0x138>
 800b980:	f9b9 1044 	ldrsh.w	r1, [r9, #68]	; 0x44
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t) style->line.opa * opa_scale) >> 8;
 800b984:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800b988:	f899 3046 	ldrb.w	r3, [r9, #70]	; 0x46
    lv_coord_t width = style->line.width - 1;
 800b98c:	f101 31ff 	add.w	r1, r1, #4294967295
 800b990:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
 800b994:	f9b7 e050 	ldrsh.w	lr, [r7, #80]	; 0x50
 800b998:	b209      	sxth	r1, r1
 800b99a:	f9b7 c054 	ldrsh.w	ip, [r7, #84]	; 0x54
    lv_coord_t width_half = width >> 1;
 800b99e:	ea4f 0661 	mov.w	r6, r1, asr #1
    lv_coord_t width_1 = width & 0x1;
 800b9a2:	f001 0901 	and.w	r9, r1, #1
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t) style->line.opa * opa_scale) >> 8;
 800b9a6:	d003      	beq.n	800b9b0 <lv_draw_line+0x91c>
 800b9a8:	fb03 f308 	mul.w	r3, r3, r8
 800b9ac:	f3c3 2307 	ubfx	r3, r3, #8, #8
    act_area.y1 = main_line->p1.y - width_half - width_1;
 800b9b0:	b2b6      	uxth	r6, r6
    fill_fp(&draw_area, mask, style->line.color, opa);
 800b9b2:	4629      	mov	r1, r5
    draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
 800b9b4:	45e6      	cmp	lr, ip
    act_area.y1 = main_line->p1.y - width_half - width_1;
 800b9b6:	eba0 0506 	sub.w	r5, r0, r6
    act_area.y2 = main_line->p2.y + width_half ;
 800b9ba:	4434      	add	r4, r6
    draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
 800b9bc:	4676      	mov	r6, lr
 800b9be:	bfa8      	it	ge
 800b9c0:	4666      	movge	r6, ip
    act_area.y1 = main_line->p1.y - width_half - width_1;
 800b9c2:	eba5 0509 	sub.w	r5, r5, r9
    act_area.y2 = main_line->p2.y + width_half ;
 800b9c6:	b224      	sxth	r4, r4
    draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
 800b9c8:	45e6      	cmp	lr, ip
    draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
 800b9ca:	f8a7 606c 	strh.w	r6, [r7, #108]	; 0x6c
    act_area.y1 = main_line->p1.y - width_half - width_1;
 800b9ce:	b22d      	sxth	r5, r5
    fill_fp(&draw_area, mask, style->line.color, opa);
 800b9d0:	f107 006c 	add.w	r0, r7, #108	; 0x6c
    draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
 800b9d4:	bfb8      	it	lt
 800b9d6:	46e6      	movlt	lr, ip
    fill_fp(&draw_area, mask, style->line.color, opa);
 800b9d8:	f8df c390 	ldr.w	ip, [pc, #912]	; 800bd6c <lv_draw_line+0xcd8>
    draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
 800b9dc:	42a5      	cmp	r5, r4
 800b9de:	462e      	mov	r6, r5
    draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
 800b9e0:	f8a7 e070 	strh.w	lr, [r7, #112]	; 0x70
    draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
 800b9e4:	bfa8      	it	ge
 800b9e6:	4626      	movge	r6, r4
    draw_area.y2 = LV_MATH_MAX(act_area.y1, act_area.y2);
 800b9e8:	42ac      	cmp	r4, r5
 800b9ea:	bfb8      	it	lt
 800b9ec:	462c      	movlt	r4, r5
    draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
 800b9ee:	f8a7 606e 	strh.w	r6, [r7, #110]	; 0x6e
    fill_fp(&draw_area, mask, style->line.color, opa);
 800b9f2:	f8dc 5000 	ldr.w	r5, [ip]
    draw_area.y2 = LV_MATH_MAX(act_area.y1, act_area.y2);
 800b9f6:	f8a7 4072 	strh.w	r4, [r7, #114]	; 0x72
    fill_fp(&draw_area, mask, style->line.color, opa);
 800b9fa:	47a8      	blx	r5
 800b9fc:	e4a0      	b.n	800b340 <lv_draw_line+0x2ac>
 800b9fe:	f9b9 1044 	ldrsh.w	r1, [r9, #68]	; 0x44
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t) style->line.opa * opa_scale) >> 8;
 800ba02:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800ba06:	f899 3046 	ldrb.w	r3, [r9, #70]	; 0x46
    lv_coord_t width = style->line.width - 1;
 800ba0a:	f101 31ff 	add.w	r1, r1, #4294967295
 800ba0e:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
 800ba12:	b209      	sxth	r1, r1
    lv_coord_t width_half = width >> 1;
 800ba14:	ea4f 0661 	mov.w	r6, r1, asr #1
    lv_coord_t width_1 = width & 0x1;
 800ba18:	f001 0901 	and.w	r9, r1, #1
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t) style->line.opa * opa_scale) >> 8;
 800ba1c:	d003      	beq.n	800ba26 <lv_draw_line+0x992>
 800ba1e:	fb03 f308 	mul.w	r3, r3, r8
 800ba22:	f3c3 2307 	ubfx	r3, r3, #8, #8
    act_area.x1 = main_line->p1.x - width_half;
 800ba26:	b2b6      	uxth	r6, r6
    draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
 800ba28:	42a0      	cmp	r0, r4
    fill_fp(&draw_area, mask, style->line.color, opa);
 800ba2a:	4629      	mov	r1, r5
    act_area.x2 = main_line->p2.x + width_half + width_1;
 800ba2c:	eb06 0809 	add.w	r8, r6, r9
    act_area.x1 = main_line->p1.x - width_half;
 800ba30:	ebae 0506 	sub.w	r5, lr, r6
    draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
 800ba34:	4686      	mov	lr, r0
 800ba36:	bfa8      	it	ge
 800ba38:	46a6      	movge	lr, r4
    act_area.x2 = main_line->p2.x + width_half + width_1;
 800ba3a:	eb08 060c 	add.w	r6, r8, ip
    act_area.x1 = main_line->p1.x - width_half;
 800ba3e:	b22d      	sxth	r5, r5
    draw_area.y2 = LV_MATH_MAX(act_area.y1, act_area.y2);
 800ba40:	42a0      	cmp	r0, r4
    draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
 800ba42:	f8a7 e06e 	strh.w	lr, [r7, #110]	; 0x6e
    act_area.x2 = main_line->p2.x + width_half + width_1;
 800ba46:	b236      	sxth	r6, r6
    draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
 800ba48:	46ae      	mov	lr, r5
    draw_area.y2 = LV_MATH_MAX(act_area.y1, act_area.y2);
 800ba4a:	bfb8      	it	lt
 800ba4c:	4620      	movlt	r0, r4
    fill_fp(&draw_area, mask, style->line.color, opa);
 800ba4e:	4cc7      	ldr	r4, [pc, #796]	; (800bd6c <lv_draw_line+0xcd8>)
    draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
 800ba50:	42b5      	cmp	r5, r6
    draw_area.y2 = LV_MATH_MAX(act_area.y1, act_area.y2);
 800ba52:	4681      	mov	r9, r0
    fill_fp(&draw_area, mask, style->line.color, opa);
 800ba54:	6824      	ldr	r4, [r4, #0]
    draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
 800ba56:	bfa8      	it	ge
 800ba58:	46b6      	movge	lr, r6
    draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
 800ba5a:	42b5      	cmp	r5, r6
    fill_fp(&draw_area, mask, style->line.color, opa);
 800ba5c:	f107 006c 	add.w	r0, r7, #108	; 0x6c
    draw_area.y2 = LV_MATH_MAX(act_area.y1, act_area.y2);
 800ba60:	f8a7 9072 	strh.w	r9, [r7, #114]	; 0x72
    draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
 800ba64:	bfb8      	it	lt
 800ba66:	4635      	movlt	r5, r6
    draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
 800ba68:	f8a7 e06c 	strh.w	lr, [r7, #108]	; 0x6c
    draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
 800ba6c:	f8a7 5070 	strh.w	r5, [r7, #112]	; 0x70
    fill_fp(&draw_area, mask, style->line.color, opa);
 800ba70:	47a0      	blx	r4
 800ba72:	e465      	b.n	800b340 <lv_draw_line+0x2ac>
 800ba74:	2301      	movs	r3, #1
                p_tmp.y = main_line.p2.y - 1;
 800ba76:	3c01      	subs	r4, #1
                line_init(&main_line, &p1, &p_tmp);
 800ba78:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800ba7c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800ba80:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800ba84:	62fb      	str	r3, [r7, #44]	; 0x2c
                p_tmp.x = main_line.p2.x;
 800ba86:	f8a7 c044 	strh.w	ip, [r7, #68]	; 0x44
                p_tmp.y = main_line.p2.y - 1;
 800ba8a:	f8a7 4046 	strh.w	r4, [r7, #70]	; 0x46
                line_init(&main_line, &p1, &p_tmp);
 800ba8e:	f7ff fa8f 	bl	800afb0 <line_init>
                main_line.sy = LV_MATH_ABS(main_line.sy);   /*The sign can change if the line becomes horizontal*/
 800ba92:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 800ba96:	f9b7 c054 	ldrsh.w	ip, [r7, #84]	; 0x54
 800ba9a:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 800ba9e:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 800baa2:	f9b7 e050 	ldrsh.w	lr, [r7, #80]	; 0x50
 800baa6:	f9b7 4056 	ldrsh.w	r4, [r7, #86]	; 0x56
                main_line.sy = -LV_MATH_ABS(main_line.sy);  /*The sign can change if the line becomes horizontal*/
 800baaa:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800baae:	f9b7 0052 	ldrsh.w	r0, [r7, #82]	; 0x52
 800bab2:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800bab6:	f7ff bb40 	b.w	800b13a <lv_draw_line+0xa6>
                p_tmp.x = main_line.p2.x - 1;
 800baba:	f10c 3cff 	add.w	ip, ip, #4294967295
 800babe:	2301      	movs	r3, #1
                line_init(&main_line, &p1, &p_tmp);
 800bac0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800bac4:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800bac8:	f107 0050 	add.w	r0, r7, #80	; 0x50
                p_tmp.x = main_line.p2.x - 1;
 800bacc:	f8a7 c044 	strh.w	ip, [r7, #68]	; 0x44
 800bad0:	62fb      	str	r3, [r7, #44]	; 0x2c
                p_tmp.y = main_line.p2.y;
 800bad2:	f8a7 4046 	strh.w	r4, [r7, #70]	; 0x46
                line_init(&main_line, &p1, &p_tmp);
 800bad6:	f7ff fa6b 	bl	800afb0 <line_init>
                main_line.sx = LV_MATH_ABS(main_line.sx);   /*The sign can change if the line becomes vertical*/
 800bada:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 800bade:	f9b7 c054 	ldrsh.w	ip, [r7, #84]	; 0x54
 800bae2:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 800bae6:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 800baea:	f9b7 e050 	ldrsh.w	lr, [r7, #80]	; 0x50
 800baee:	f9b7 4056 	ldrsh.w	r4, [r7, #86]	; 0x56
                main_line.sx = -LV_MATH_ABS(main_line.sx);  /*The sign can change if the line becomes vertical*/
 800baf2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800baf6:	f9b7 0052 	ldrsh.w	r0, [r7, #82]	; 0x52
 800bafa:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800bafe:	f7ff bb1c 	b.w	800b13a <lv_draw_line+0xa6>
 800bb02:	62b9      	str	r1, [r7, #40]	; 0x28
 800bb04:	e6ca      	b.n	800b89c <lv_draw_line+0x808>
                        lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w + 1, main_line->p1.y + pattern[aa_last_corner].y - 1,
 800bb06:	f8b7 0050 	ldrh.w	r0, [r7, #80]	; 0x50
 800bb0a:	697c      	ldr	r4, [r7, #20]
 800bb0c:	f8b7 1052 	ldrh.w	r1, [r7, #82]	; 0x52
 800bb10:	3001      	adds	r0, #1
 800bb12:	f8be b002 	ldrh.w	fp, [lr, #2]
 800bb16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb18:	3901      	subs	r1, #1
 800bb1a:	9401      	str	r4, [sp, #4]
 800bb1c:	4450      	add	r0, sl
 800bb1e:	6a3e      	ldr	r6, [r7, #32]
 800bb20:	4459      	add	r1, fp
 800bb22:	4430      	add	r0, r6
 800bb24:	f8d9 6040 	ldr.w	r6, [r9, #64]	; 0x40
 800bb28:	b209      	sxth	r1, r1
 800bb2a:	9600      	str	r6, [sp, #0]
 800bb2c:	b200      	sxth	r0, r0
 800bb2e:	f7fe fde3 	bl	800a6f8 <lv_draw_aa_hor_seg>
                        lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x + seg_w + 1, main_line->p2.y + pattern[aa_last_corner].y + 1,
 800bb32:	f8b7 0054 	ldrh.w	r0, [r7, #84]	; 0x54
 800bb36:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 800bb3a:	3001      	adds	r0, #1
 800bb3c:	6a3e      	ldr	r6, [r7, #32]
 800bb3e:	3101      	adds	r1, #1
 800bb40:	9401      	str	r4, [sp, #4]
 800bb42:	4450      	add	r0, sl
 800bb44:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800bb48:	4272      	negs	r2, r6
 800bb4a:	4459      	add	r1, fp
 800bb4c:	4430      	add	r0, r6
 800bb4e:	9300      	str	r3, [sp, #0]
 800bb50:	b212      	sxth	r2, r2
 800bb52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb54:	b209      	sxth	r1, r1
 800bb56:	b200      	sxth	r0, r0
 800bb58:	f7fe fdce 	bl	800a6f8 <lv_draw_aa_hor_seg>
 800bb5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bb5e:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800bb62:	e69b      	b.n	800b89c <lv_draw_line+0x808>
                        lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1, main_line->p1.y + pattern[aa_last_corner].y + seg_w + 1,
 800bb64:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800bb66:	f8b7 0052 	ldrh.w	r0, [r7, #82]	; 0x52
 800bb6a:	f834 b021 	ldrh.w	fp, [r4, r1, lsl #2]
 800bb6e:	697c      	ldr	r4, [r7, #20]
 800bb70:	3001      	adds	r0, #1
 800bb72:	f8b7 e050 	ldrh.w	lr, [r7, #80]	; 0x50
 800bb76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb78:	eb0a 0100 	add.w	r1, sl, r0
 800bb7c:	9401      	str	r4, [sp, #4]
 800bb7e:	f10e 3eff 	add.w	lr, lr, #4294967295
 800bb82:	6a3e      	ldr	r6, [r7, #32]
 800bb84:	eb0b 000e 	add.w	r0, fp, lr
 800bb88:	4431      	add	r1, r6
 800bb8a:	f8d9 6040 	ldr.w	r6, [r9, #64]	; 0x40
 800bb8e:	b200      	sxth	r0, r0
 800bb90:	9600      	str	r6, [sp, #0]
 800bb92:	b209      	sxth	r1, r1
 800bb94:	f7fe fd7c 	bl	800a690 <lv_draw_aa_ver_seg>
                        lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1, main_line->p2.y + pattern[aa_last_corner].y + seg_w + 1,
 800bb98:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 800bb9c:	f8b7 0054 	ldrh.w	r0, [r7, #84]	; 0x54
 800bba0:	3101      	adds	r1, #1
 800bba2:	6a3e      	ldr	r6, [r7, #32]
 800bba4:	3001      	adds	r0, #1
 800bba6:	9401      	str	r4, [sp, #4]
 800bba8:	4451      	add	r1, sl
 800bbaa:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800bbae:	4272      	negs	r2, r6
 800bbb0:	4458      	add	r0, fp
 800bbb2:	4431      	add	r1, r6
 800bbb4:	9300      	str	r3, [sp, #0]
 800bbb6:	b212      	sxth	r2, r2
 800bbb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbba:	b209      	sxth	r1, r1
 800bbbc:	b200      	sxth	r0, r0
 800bbbe:	f7fe fd67 	bl	800a690 <lv_draw_aa_ver_seg>
 800bbc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bbc4:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800bbc8:	e668      	b.n	800b89c <lv_draw_line+0x808>
 800bbca:	6939      	ldr	r1, [r7, #16]
 800bbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbce:	f931 4c02 	ldrsh.w	r4, [r1, #-2]
 800bbd2:	f931 6c04 	ldrsh.w	r6, [r1, #-4]
 800bbd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bbd8:	f8d7 a014 	ldr.w	sl, [r7, #20]
 800bbdc:	f933 3021 	ldrsh.w	r3, [r3, r1, lsl #2]
 800bbe0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800bbe2:	623b      	str	r3, [r7, #32]
        if(main_line->hor) {
 800bbe4:	2a00      	cmp	r2, #0
 800bbe6:	d055      	beq.n	800bc94 <lv_draw_line+0xc00>
            lv_coord_t seg_w = pattern[width_safe - 1].y - pattern[aa_last_corner].y;
 800bbe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbea:	b2a1      	uxth	r1, r4
 800bbec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bbee:	61b9      	str	r1, [r7, #24]
 800bbf0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            if(main_line->sy < 0) {
 800bbf4:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
            lv_coord_t seg_w = pattern[width_safe - 1].y - pattern[aa_last_corner].y;
 800bbf8:	8854      	ldrh	r4, [r2, #2]
            if(main_line->sy < 0) {
 800bbfa:	2b00      	cmp	r3, #0
            lv_coord_t seg_w = pattern[width_safe - 1].y - pattern[aa_last_corner].y;
 800bbfc:	eba1 0204 	sub.w	r2, r1, r4
 800bc00:	fa1f fb82 	uxth.w	fp, r2
            if(main_line->sy < 0) {
 800bc04:	f2c0 8115 	blt.w	800be32 <lv_draw_line+0xd9e>
                lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1, main_line->p1.y + pattern[aa_last_corner].y,
 800bc08:	f8b7 0050 	ldrh.w	r0, [r7, #80]	; 0x50
                        seg_w + main_line->sy, mask, style->line.color, opa);
 800bc0c:	eb0b 0203 	add.w	r2, fp, r3
                lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1, main_line->p1.y + pattern[aa_last_corner].y,
 800bc10:	f8b7 8020 	ldrh.w	r8, [r7, #32]
 800bc14:	f8b7 1052 	ldrh.w	r1, [r7, #82]	; 0x52
 800bc18:	3801      	subs	r0, #1
 800bc1a:	f8cd a004 	str.w	sl, [sp, #4]
 800bc1e:	b212      	sxth	r2, r2
 800bc20:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800bc24:	4421      	add	r1, r4
 800bc26:	4440      	add	r0, r8
 800bc28:	b209      	sxth	r1, r1
 800bc2a:	9300      	str	r3, [sp, #0]
 800bc2c:	b200      	sxth	r0, r0
 800bc2e:	462b      	mov	r3, r5
 800bc30:	f7fe fd2e 	bl	800a690 <lv_draw_aa_ver_seg>
                lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1, main_line->p2.y + pattern[aa_last_corner].y,
 800bc34:	f8b7 0054 	ldrh.w	r0, [r7, #84]	; 0x54
                        -(seg_w + main_line->sy), mask, style->line.color, opa);
 800bc38:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
                lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1, main_line->p2.y + pattern[aa_last_corner].y,
 800bc3c:	462b      	mov	r3, r5
 800bc3e:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 800bc42:	3001      	adds	r0, #1
                        -(seg_w + main_line->sy), mask, style->line.color, opa);
 800bc44:	445a      	add	r2, fp
                lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1, main_line->p2.y + pattern[aa_last_corner].y,
 800bc46:	f8cd a004 	str.w	sl, [sp, #4]
 800bc4a:	4421      	add	r1, r4
 800bc4c:	4440      	add	r0, r8
 800bc4e:	4252      	negs	r2, r2
 800bc50:	f8d9 4040 	ldr.w	r4, [r9, #64]	; 0x40
 800bc54:	b212      	sxth	r2, r2
 800bc56:	9400      	str	r4, [sp, #0]
 800bc58:	b209      	sxth	r1, r1
 800bc5a:	b200      	sxth	r0, r0
 800bc5c:	f7fe fd18 	bl	800a690 <lv_draw_aa_ver_seg>
 800bc60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc62:	b2b1      	uxth	r1, r6
 800bc64:	f9b2 3000 	ldrsh.w	r3, [r2]
 800bc68:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800bc6c:	623b      	str	r3, [r7, #32]
 800bc6e:	b29b      	uxth	r3, r3
 800bc70:	60fa      	str	r2, [r7, #12]
 800bc72:	617b      	str	r3, [r7, #20]
 800bc74:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800bc78:	61f9      	str	r1, [r7, #28]
 800bc7a:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc7c:	b293      	uxth	r3, r2
 800bc7e:	613b      	str	r3, [r7, #16]
 800bc80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc82:	f9b7 e050 	ldrsh.w	lr, [r7, #80]	; 0x50
 800bc86:	3300      	adds	r3, #0
 800bc88:	f9b7 0052 	ldrsh.w	r0, [r7, #82]	; 0x52
 800bc8c:	bf18      	it	ne
 800bc8e:	2301      	movne	r3, #1
 800bc90:	f7ff baa5 	b.w	800b1de <lv_draw_line+0x14a>
            lv_coord_t seg_w = pattern[width_safe - 1].x - pattern[aa_last_corner].x;
 800bc94:	b2b3      	uxth	r3, r6
 800bc96:	8c3e      	ldrh	r6, [r7, #32]
                lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w, main_line->p1.y + pattern[aa_last_corner].y - 1,
 800bc98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
            lv_coord_t seg_w = pattern[width_safe - 1].x - pattern[aa_last_corner].x;
 800bc9a:	461a      	mov	r2, r3
 800bc9c:	61fb      	str	r3, [r7, #28]
            if(main_line->sx < 0) {
 800bc9e:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
            lv_coord_t seg_w = pattern[width_safe - 1].x - pattern[aa_last_corner].x;
 800bca2:	1b92      	subs	r2, r2, r6
                lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w, main_line->p1.y + pattern[aa_last_corner].y - 1,
 800bca4:	f8b7 0050 	ldrh.w	r0, [r7, #80]	; 0x50
            if(main_line->sx < 0) {
 800bca8:	2b00      	cmp	r3, #0
            lv_coord_t seg_w = pattern[width_safe - 1].x - pattern[aa_last_corner].x;
 800bcaa:	fa1f fb82 	uxth.w	fp, r2
                lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w, main_line->p1.y + pattern[aa_last_corner].y - 1,
 800bcae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcb0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800bcb4:	f8b7 1052 	ldrh.w	r1, [r7, #82]	; 0x52
                        seg_w + main_line->sx, mask, style->line.color, opa);
 800bcb8:	445b      	add	r3, fp
                lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w, main_line->p1.y + pattern[aa_last_corner].y - 1,
 800bcba:	f8b2 8002 	ldrh.w	r8, [r2, #2]
 800bcbe:	f101 31ff 	add.w	r1, r1, #4294967295
            if(main_line->sx < 0) {
 800bcc2:	f2c0 8096 	blt.w	800bdf2 <lv_draw_line+0xd5e>
                lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x, main_line->p1.y + pattern[aa_last_corner].y - 1,
 800bcc6:	eb00 0e06 	add.w	lr, r0, r6
 800bcca:	f8cd a004 	str.w	sl, [sp, #4]
 800bcce:	4441      	add	r1, r8
 800bcd0:	f8d9 0040 	ldr.w	r0, [r9, #64]	; 0x40
 800bcd4:	b21a      	sxth	r2, r3
 800bcd6:	462b      	mov	r3, r5
 800bcd8:	b209      	sxth	r1, r1
 800bcda:	9000      	str	r0, [sp, #0]
 800bcdc:	fa0f f08e 	sxth.w	r0, lr
 800bce0:	f7fe fd0a 	bl	800a6f8 <lv_draw_aa_hor_seg>
                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x, main_line->p2.y + pattern[aa_last_corner].y + 1,
 800bce4:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
                        -(seg_w + main_line->sx), mask, style->line.color, opa);
 800bce8:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x, main_line->p2.y + pattern[aa_last_corner].y + 1,
 800bcec:	462b      	mov	r3, r5
 800bcee:	f8b7 0054 	ldrh.w	r0, [r7, #84]	; 0x54
 800bcf2:	3101      	adds	r1, #1
                        -(seg_w + main_line->sx), mask, style->line.color, opa);
 800bcf4:	445a      	add	r2, fp
                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x, main_line->p2.y + pattern[aa_last_corner].y + 1,
 800bcf6:	f8cd a004 	str.w	sl, [sp, #4]
 800bcfa:	4430      	add	r0, r6
 800bcfc:	4441      	add	r1, r8
 800bcfe:	4252      	negs	r2, r2
 800bd00:	f8d9 6040 	ldr.w	r6, [r9, #64]	; 0x40
 800bd04:	b209      	sxth	r1, r1
 800bd06:	9600      	str	r6, [sp, #0]
 800bd08:	b212      	sxth	r2, r2
 800bd0a:	b200      	sxth	r0, r0
 800bd0c:	f7fe fcf4 	bl	800a6f8 <lv_draw_aa_hor_seg>
 800bd10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd12:	f9b2 3000 	ldrsh.w	r3, [r2]
 800bd16:	4619      	mov	r1, r3
 800bd18:	623b      	str	r3, [r7, #32]
 800bd1a:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800bd1e:	b2a2      	uxth	r2, r4
 800bd20:	61ba      	str	r2, [r7, #24]
 800bd22:	b28a      	uxth	r2, r1
 800bd24:	60fb      	str	r3, [r7, #12]
 800bd26:	b29b      	uxth	r3, r3
 800bd28:	617a      	str	r2, [r7, #20]
 800bd2a:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800bd2e:	62ba      	str	r2, [r7, #40]	; 0x28
 800bd30:	e7a5      	b.n	800bc7e <lv_draw_line+0xbea>
        if(!main_line->hor && main_line->p1.x >= main_line->p2.x + dir_ori) pattern[0].x --;
 800bd32:	6a3b      	ldr	r3, [r7, #32]
 800bd34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bd36:	3b01      	subs	r3, #1
 800bd38:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 800bd3c:	b21b      	sxth	r3, r3
 800bd3e:	60fa      	str	r2, [r7, #12]
 800bd40:	623b      	str	r3, [r7, #32]
 800bd42:	800b      	strh	r3, [r1, #0]
 800bd44:	f7ff ba42 	b.w	800b1cc <lv_draw_line+0x138>
 800bd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd4a:	462e      	mov	r6, r5
 800bd4c:	6abd      	ldr	r5, [r7, #40]	; 0x28
 800bd4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bd52:	637e      	str	r6, [r7, #52]	; 0x34
 800bd54:	623b      	str	r3, [r7, #32]
    if(width == 0) width_safe = 1;
 800bd56:	2e00      	cmp	r6, #0
 800bd58:	f47f ad2f 	bne.w	800b7ba <lv_draw_line+0x726>
 800bd5c:	f9b7 0052 	ldrsh.w	r0, [r7, #82]	; 0x52
 800bd60:	f9b7 e050 	ldrsh.w	lr, [r7, #80]	; 0x50
 800bd64:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800bd68:	f7ff ba21 	b.w	800b1ae <lv_draw_line+0x11a>
 800bd6c:	080872f0 	.word	0x080872f0
            aa_shift2 = width == 0 ? 0 : aa_shift1;
 800bd70:	425b      	negs	r3, r3
 800bd72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd76:	b29b      	uxth	r3, r3
 800bd78:	60ba      	str	r2, [r7, #8]
 800bd7a:	607b      	str	r3, [r7, #4]
 800bd7c:	f7ff bb9b 	b.w	800b4b6 <lv_draw_line+0x422>
            aa_shift2 = width == 0 ? 0 : aa_shift1;
 800bd80:	425b      	negs	r3, r3
 800bd82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd86:	b29b      	uxth	r3, r3
 800bd88:	60ba      	str	r2, [r7, #8]
 800bd8a:	607b      	str	r3, [r7, #4]
 800bd8c:	f7ff ba34 	b.w	800b1f8 <lv_draw_line+0x164>
                main_line.sy = -LV_MATH_ABS(main_line.sy);  /*The sign can change if the line becomes horizontal*/
 800bd90:	2300      	movs	r3, #0
                p_tmp.y = main_line.p2.y + 1;
 800bd92:	3401      	adds	r4, #1
                line_init(&main_line, &p1, &p_tmp);
 800bd94:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800bd98:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800bd9c:	f107 0050 	add.w	r0, r7, #80	; 0x50
                main_line.sy = -LV_MATH_ABS(main_line.sy);  /*The sign can change if the line becomes horizontal*/
 800bda0:	62fb      	str	r3, [r7, #44]	; 0x2c
                p_tmp.x = main_line.p2.x;
 800bda2:	f8a7 c044 	strh.w	ip, [r7, #68]	; 0x44
                p_tmp.y = main_line.p2.y + 1;
 800bda6:	f8a7 4046 	strh.w	r4, [r7, #70]	; 0x46
                line_init(&main_line, &p1, &p_tmp);
 800bdaa:	f7ff f901 	bl	800afb0 <line_init>
                main_line.sy = -LV_MATH_ABS(main_line.sy);  /*The sign can change if the line becomes horizontal*/
 800bdae:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 800bdb2:	f9b7 c054 	ldrsh.w	ip, [r7, #84]	; 0x54
 800bdb6:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 800bdba:	ebc3 73e2 	rsb	r3, r3, r2, asr #31
 800bdbe:	e670      	b.n	800baa2 <lv_draw_line+0xa0e>
                p_tmp.x = main_line.p2.x + 1;
 800bdc0:	f10c 0c01 	add.w	ip, ip, #1
                main_line.sx = -LV_MATH_ABS(main_line.sx);  /*The sign can change if the line becomes vertical*/
 800bdc4:	2300      	movs	r3, #0
                line_init(&main_line, &p1, &p_tmp);
 800bdc6:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800bdca:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800bdce:	f107 0050 	add.w	r0, r7, #80	; 0x50
                p_tmp.x = main_line.p2.x + 1;
 800bdd2:	f8a7 c044 	strh.w	ip, [r7, #68]	; 0x44
                main_line.sx = -LV_MATH_ABS(main_line.sx);  /*The sign can change if the line becomes vertical*/
 800bdd6:	62fb      	str	r3, [r7, #44]	; 0x2c
                p_tmp.y = main_line.p2.y;
 800bdd8:	f8a7 4046 	strh.w	r4, [r7, #70]	; 0x46
                line_init(&main_line, &p1, &p_tmp);
 800bddc:	f7ff f8e8 	bl	800afb0 <line_init>
                main_line.sx = -LV_MATH_ABS(main_line.sx);  /*The sign can change if the line becomes vertical*/
 800bde0:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 800bde4:	f9b7 c054 	ldrsh.w	ip, [r7, #84]	; 0x54
 800bde8:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 800bdec:	ebc3 73e2 	rsb	r3, r3, r2, asr #31
 800bdf0:	e67b      	b.n	800baea <lv_draw_line+0xa56>
                lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w, main_line->p1.y + pattern[aa_last_corner].y - 1,
 800bdf2:	4430      	add	r0, r6
 800bdf4:	b21a      	sxth	r2, r3
 800bdf6:	f8cd a004 	str.w	sl, [sp, #4]
 800bdfa:	4441      	add	r1, r8
 800bdfc:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800be00:	4458      	add	r0, fp
 800be02:	b209      	sxth	r1, r1
 800be04:	9300      	str	r3, [sp, #0]
 800be06:	b200      	sxth	r0, r0
 800be08:	462b      	mov	r3, r5
 800be0a:	f7fe fc75 	bl	800a6f8 <lv_draw_aa_hor_seg>
                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x + seg_w, main_line->p2.y + pattern[aa_last_corner].y + 1,
 800be0e:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
                        -(seg_w + main_line->sx), mask, style->line.color, opa);
 800be12:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x + seg_w, main_line->p2.y + pattern[aa_last_corner].y + 1,
 800be16:	462b      	mov	r3, r5
 800be18:	f8b7 0054 	ldrh.w	r0, [r7, #84]	; 0x54
 800be1c:	3101      	adds	r1, #1
                        -(seg_w + main_line->sx), mask, style->line.color, opa);
 800be1e:	445a      	add	r2, fp
                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x + seg_w, main_line->p2.y + pattern[aa_last_corner].y + 1,
 800be20:	f8cd a004 	str.w	sl, [sp, #4]
 800be24:	4430      	add	r0, r6
 800be26:	4441      	add	r1, r8
 800be28:	4252      	negs	r2, r2
 800be2a:	f8d9 6040 	ldr.w	r6, [r9, #64]	; 0x40
 800be2e:	4458      	add	r0, fp
 800be30:	e768      	b.n	800bd04 <lv_draw_line+0xc70>
                lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1, main_line->p1.y + pattern[aa_last_corner].y + seg_w,
 800be32:	f8b7 1052 	ldrh.w	r1, [r7, #82]	; 0x52
                        seg_w + main_line->sy, mask, style->line.color, opa);
 800be36:	445b      	add	r3, fp
                lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1, main_line->p1.y + pattern[aa_last_corner].y + seg_w,
 800be38:	f8b7 0050 	ldrh.w	r0, [r7, #80]	; 0x50
 800be3c:	f8b7 8020 	ldrh.w	r8, [r7, #32]
 800be40:	4421      	add	r1, r4
 800be42:	3801      	subs	r0, #1
 800be44:	b21a      	sxth	r2, r3
 800be46:	f8cd a004 	str.w	sl, [sp, #4]
 800be4a:	4459      	add	r1, fp
 800be4c:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800be50:	4440      	add	r0, r8
 800be52:	b209      	sxth	r1, r1
 800be54:	9300      	str	r3, [sp, #0]
 800be56:	b200      	sxth	r0, r0
 800be58:	462b      	mov	r3, r5
 800be5a:	f7fe fc19 	bl	800a690 <lv_draw_aa_ver_seg>
                lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1, main_line->p2.y + pattern[aa_last_corner].y + seg_w,
 800be5e:	f8b7 0054 	ldrh.w	r0, [r7, #84]	; 0x54
                        -(seg_w + main_line->sy), mask, style->line.color, opa);
 800be62:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
                lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1, main_line->p2.y + pattern[aa_last_corner].y + seg_w,
 800be66:	462b      	mov	r3, r5
 800be68:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 800be6c:	3001      	adds	r0, #1
                        -(seg_w + main_line->sy), mask, style->line.color, opa);
 800be6e:	445a      	add	r2, fp
                lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1, main_line->p2.y + pattern[aa_last_corner].y + seg_w,
 800be70:	f8cd a004 	str.w	sl, [sp, #4]
 800be74:	4421      	add	r1, r4
 800be76:	4440      	add	r0, r8
 800be78:	4252      	negs	r2, r2
 800be7a:	f8d9 4040 	ldr.w	r4, [r9, #64]	; 0x40
 800be7e:	4459      	add	r1, fp
 800be80:	e6e8      	b.n	800bc54 <lv_draw_line+0xbc0>
 800be82:	f04f 33ff 	mov.w	r3, #4294967295
 800be86:	637b      	str	r3, [r7, #52]	; 0x34
 800be88:	e497      	b.n	800b7ba <lv_draw_line+0x726>
    for(i = 0; i < width; i++) {
 800be8a:	2300      	movs	r3, #0
 800be8c:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800be90:	62bb      	str	r3, [r7, #40]	; 0x28
 800be92:	e6a7      	b.n	800bbe4 <lv_draw_line+0xb50>

0800be94 <lv_draw_rect_main_corner>:
 * @param mask the rectangle will be drawn only  on this area
 * @param rects_p pointer to a rectangle style
 * @param opa_scale scale down all opacities by the factor
 */
static void lv_draw_rect_main_corner(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style, lv_opa_t opa_scale)
{
 800be94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be98:	b0b1      	sub	sp, #196	; 0xc4
 800be9a:	468a      	mov	sl, r1
    uint16_t radius = style->body.radius;
 800be9c:	4611      	mov	r1, r2

    lv_color_t mcolor = style->body.main_color;
    lv_color_t gcolor = style->body.grad_color;
    lv_color_t act_color;
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t) style->body.opa * opa_scale) >> 8;
 800be9e:	2bff      	cmp	r3, #255	; 0xff
{
 800bea0:	9225      	str	r2, [sp, #148]	; 0x94
    uint16_t radius = style->body.radius;
 800bea2:	8992      	ldrh	r2, [r2, #12]
{
 800bea4:	9020      	str	r0, [sp, #128]	; 0x80
    uint16_t radius = style->body.radius;
 800bea6:	921f      	str	r2, [sp, #124]	; 0x7c
    lv_color_t mcolor = style->body.main_color;
 800bea8:	460a      	mov	r2, r1
 800beaa:	6849      	ldr	r1, [r1, #4]
 800beac:	9119      	str	r1, [sp, #100]	; 0x64
    lv_color_t gcolor = style->body.grad_color;
 800beae:	4611      	mov	r1, r2
 800beb0:	6892      	ldr	r2, [r2, #8]
 800beb2:	921a      	str	r2, [sp, #104]	; 0x68
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t) style->body.opa * opa_scale) >> 8;
 800beb4:	f000 862b 	beq.w	800cb0e <lv_draw_rect_main_corner+0xc7a>
 800beb8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800beba:	7b92      	ldrb	r2, [r2, #14]
 800bebc:	fb02 f303 	mul.w	r3, r2, r3
 800bec0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800bec4:	9317      	str	r3, [sp, #92]	; 0x5c
 800bec6:	9820      	ldr	r0, [sp, #128]	; 0x80
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 800bec8:	88c4      	ldrh	r4, [r0, #6]
    return area_p->x2 - area_p->x1 + 1;
 800beca:	8881      	ldrh	r1, [r0, #4]
    return area_p->y2 - area_p->y1 + 1;
 800becc:	8845      	ldrh	r5, [r0, #2]
 800bece:	1c62      	adds	r2, r4, #1
    return area_p->x2 - area_p->x1 + 1;
 800bed0:	8806      	ldrh	r6, [r0, #0]
 800bed2:	1c4b      	adds	r3, r1, #1
    return area_p->y2 - area_p->y1 + 1;
 800bed4:	1b52      	subs	r2, r2, r5
    return area_p->x2 - area_p->x1 + 1;
 800bed6:	1b9b      	subs	r3, r3, r6
    return area_p->y2 - area_p->y1 + 1;
 800bed8:	b212      	sxth	r2, r2
#endif


static uint16_t lv_draw_cont_radius_corr(uint16_t r, lv_coord_t w, lv_coord_t h)
{
    if(r >= (w >> 1)) {
 800beda:	f343 034e 	sbfx	r3, r3, #1, #15
 800bede:	920e      	str	r2, [sp, #56]	; 0x38
 800bee0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800bee2:	4293      	cmp	r3, r2
 800bee4:	dc07      	bgt.n	800bef6 <lv_draw_rect_main_corner+0x62>
        r = (w >> 1);
 800bee6:	b29b      	uxth	r3, r3
 800bee8:	931f      	str	r3, [sp, #124]	; 0x7c
        if(r != 0) r--;
 800beea:	2b00      	cmp	r3, #0
 800beec:	f000 81ef 	beq.w	800c2ce <lv_draw_rect_main_corner+0x43a>
 800bef0:	1e5a      	subs	r2, r3, #1
 800bef2:	b293      	uxth	r3, r2
 800bef4:	931f      	str	r3, [sp, #124]	; 0x7c
    }
    if(r >= (h >> 1)) {
 800bef6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bef8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800befa:	105b      	asrs	r3, r3, #1
 800befc:	4293      	cmp	r3, r2
 800befe:	f340 81ea 	ble.w	800c2d6 <lv_draw_rect_main_corner+0x442>
        r = (h >> 1);
        if(r != 0) r--;
    }

    if(r > 0) r -= LV_ANTIALIAS;
 800bf02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	f000 81f0 	beq.w	800c2ea <lv_draw_rect_main_corner+0x456>
 800bf0a:	1e5a      	subs	r2, r3, #1
 800bf0c:	b293      	uxth	r3, r2
 800bf0e:	931f      	str	r3, [sp, #124]	; 0x7c
 800bf10:	b21b      	sxth	r3, r3
 800bf12:	931d      	str	r3, [sp, #116]	; 0x74
    rt_origo.x = coords->x2 - radius - LV_ANTIALIAS;
 800bf14:	1e4b      	subs	r3, r1, #1
    lt_origo.x = coords->x1 + radius + LV_ANTIALIAS;
 800bf16:	3601      	adds	r6, #1
 800bf18:	991f      	ldr	r1, [sp, #124]	; 0x7c
    lt_origo.y = coords->y1 + radius + LV_ANTIALIAS;
 800bf1a:	3501      	adds	r5, #1
    lb_origo.y = coords->y2 - radius - LV_ANTIALIAS;
 800bf1c:	3c01      	subs	r4, #1
    lv_circ_init(&cir, &cir_tmp, radius);
 800bf1e:	f8dd 9074 	ldr.w	r9, [sp, #116]	; 0x74
    lt_origo.x = coords->x1 + radius + LV_ANTIALIAS;
 800bf22:	440e      	add	r6, r1
    lt_origo.y = coords->y1 + radius + LV_ANTIALIAS;
 800bf24:	440d      	add	r5, r1
    lb_origo.y = coords->y2 - radius - LV_ANTIALIAS;
 800bf26:	1a64      	subs	r4, r4, r1
    rt_origo.x = coords->x2 - radius - LV_ANTIALIAS;
 800bf28:	1a5b      	subs	r3, r3, r1
    lt_origo.x = coords->x1 + radius + LV_ANTIALIAS;
 800bf2a:	b2b6      	uxth	r6, r6
    lv_circ_init(&cir, &cir_tmp, radius);
 800bf2c:	f10d 019a 	add.w	r1, sp, #154	; 0x9a
    rt_origo.x = coords->x2 - radius - LV_ANTIALIAS;
 800bf30:	b29b      	uxth	r3, r3
    lv_circ_init(&cir, &cir_tmp, radius);
 800bf32:	a827      	add	r0, sp, #156	; 0x9c
    lb_origo.y = coords->y2 - radius - LV_ANTIALIAS;
 800bf34:	b2a4      	uxth	r4, r4
    lv_circ_init(&cir, &cir_tmp, radius);
 800bf36:	464a      	mov	r2, r9
    lt_origo.y = coords->y1 + radius + LV_ANTIALIAS;
 800bf38:	b2ad      	uxth	r5, r5
    rt_origo.x = coords->x2 - radius - LV_ANTIALIAS;
 800bf3a:	9321      	str	r3, [sp, #132]	; 0x84
    lb_origo.y = coords->y2 - radius - LV_ANTIALIAS;
 800bf3c:	4627      	mov	r7, r4
 800bf3e:	941e      	str	r4, [sp, #120]	; 0x78
    lt_origo.y = coords->y1 + radius + LV_ANTIALIAS;
 800bf40:	951b      	str	r5, [sp, #108]	; 0x6c
    rt_origo.x = coords->x2 - radius - LV_ANTIALIAS;
 800bf42:	461c      	mov	r4, r3
    lt_origo.x = coords->x1 + radius + LV_ANTIALIAS;
 800bf44:	961c      	str	r6, [sp, #112]	; 0x70
    lv_circ_init(&cir, &cir_tmp, radius);
 800bf46:	f003 fdc5 	bl	800fad4 <lv_circ_init>
                lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800bf4a:	f8bd 209e 	ldrh.w	r2, [sp, #158]	; 0x9e
    lv_coord_t out_y_seg_start = 0;
 800bf4e:	f04f 0e00 	mov.w	lr, #0
 800bf52:	9d1a      	ldr	r5, [sp, #104]	; 0x68
                rb_origo.x + LV_CIRC_OCT1_X(cir),
 800bf54:	4623      	mov	r3, r4
    lv_area_set(&mid_bot_area,  lb_origo.x + LV_CIRC_OCT4_X(cir),
 800bf56:	f8bd 109c 	ldrh.w	r1, [sp, #156]	; 0x9c
                lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800bf5a:	443a      	add	r2, r7
    lv_coord_t out_y_seg_start = 0;
 800bf5c:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
 800bf60:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 800bf64:	9d19      	ldr	r5, [sp, #100]	; 0x64
    lv_area_set(&mid_bot_area,  lb_origo.x + LV_CIRC_OCT4_X(cir),
 800bf66:	b212      	sxth	r2, r2
                rb_origo.x + LV_CIRC_OCT1_X(cir),
 800bf68:	440b      	add	r3, r1
    lv_area_set(&mid_bot_area,  lb_origo.x + LV_CIRC_OCT4_X(cir),
 800bf6a:	1a71      	subs	r1, r6, r1
 800bf6c:	f8cd e018 	str.w	lr, [sp, #24]
 800bf70:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 800bf74:	a82c      	add	r0, sp, #176	; 0xb0
 800bf76:	b21b      	sxth	r3, r3
 800bf78:	9200      	str	r2, [sp, #0]
 800bf7a:	b209      	sxth	r1, r1
 800bf7c:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 800bf80:	f003 fcce 	bl	800f920 <lv_area_set>
    lt_origo.y = coords->y1 + radius + LV_ANTIALIAS;
 800bf84:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir),
 800bf88:	a82e      	add	r0, sp, #184	; 0xb8
                lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800bf8a:	f8bd 209c 	ldrh.w	r2, [sp, #156]	; 0x9c
    lt_origo.y = coords->y1 + radius + LV_ANTIALIAS;
 800bf8e:	fa0f f388 	sxth.w	r3, r8
 800bf92:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir),
 800bf94:	f8bd 109e 	ldrh.w	r1, [sp, #158]	; 0x9e
                lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800bf98:	443a      	add	r2, r7
    lt_origo.y = coords->y1 + radius + LV_ANTIALIAS;
 800bf9a:	9323      	str	r3, [sp, #140]	; 0x8c
                rb_origo.x + LV_CIRC_OCT2_X(cir),
 800bf9c:	4623      	mov	r3, r4
 800bf9e:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 800bfa2:	9d19      	ldr	r5, [sp, #100]	; 0x64
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir),
 800bfa4:	b212      	sxth	r2, r2
                rb_origo.x + LV_CIRC_OCT2_X(cir),
 800bfa6:	440b      	add	r3, r1
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir),
 800bfa8:	1a71      	subs	r1, r6, r1
 800bfaa:	f8cd e014 	str.w	lr, [sp, #20]
 800bfae:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 800bfb2:	b21b      	sxth	r3, r3
 800bfb4:	9200      	str	r2, [sp, #0]
 800bfb6:	b209      	sxth	r1, r1
 800bfb8:	f8cd e020 	str.w	lr, [sp, #32]
                lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800bfbc:	4645      	mov	r5, r8
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir),
 800bfbe:	f003 fcaf 	bl	800f920 <lv_area_set>
                lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800bfc2:	f8bd 209e 	ldrh.w	r2, [sp, #158]	; 0x9e
    lb_origo.y = coords->y2 - radius - LV_ANTIALIAS;
 800bfc6:	b23b      	sxth	r3, r7
    lv_area_set(&mid_top_area,  lt_origo.x + LV_CIRC_OCT5_X(cir),
 800bfc8:	f8bd 109c 	ldrh.w	r1, [sp, #156]	; 0x9c
                lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800bfcc:	1aaa      	subs	r2, r5, r2
    lv_area_set(&mid_top_area,  lt_origo.x + LV_CIRC_OCT5_X(cir),
 800bfce:	a82a      	add	r0, sp, #168	; 0xa8
    lb_origo.y = coords->y2 - radius - LV_ANTIALIAS;
 800bfd0:	9324      	str	r3, [sp, #144]	; 0x90
                rt_origo.x + LV_CIRC_OCT8_X(cir),
 800bfd2:	4623      	mov	r3, r4
    lv_area_set(&mid_top_area,  lt_origo.x + LV_CIRC_OCT5_X(cir),
 800bfd4:	b212      	sxth	r2, r2
                rt_origo.x + LV_CIRC_OCT8_X(cir),
 800bfd6:	440b      	add	r3, r1
    lv_area_set(&mid_top_area,  lt_origo.x + LV_CIRC_OCT5_X(cir),
 800bfd8:	1a71      	subs	r1, r6, r1
 800bfda:	9200      	str	r2, [sp, #0]
 800bfdc:	b21b      	sxth	r3, r3
 800bfde:	b209      	sxth	r1, r1
 800bfe0:	f003 fc9e 	bl	800f920 <lv_area_set>
                lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800bfe4:	f8bd 209c 	ldrh.w	r2, [sp, #156]	; 0x9c
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir),
 800bfe8:	f8bd 109e 	ldrh.w	r1, [sp, #158]	; 0x9e
                rt_origo.x + LV_CIRC_OCT7_X(cir),
 800bfec:	4623      	mov	r3, r4
                lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800bfee:	1aaa      	subs	r2, r5, r2
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir),
 800bff0:	a828      	add	r0, sp, #160	; 0xa0
                rt_origo.x + LV_CIRC_OCT7_X(cir),
 800bff2:	440b      	add	r3, r1
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir),
 800bff4:	1a71      	subs	r1, r6, r1
 800bff6:	b212      	sxth	r2, r2
 800bff8:	b21b      	sxth	r3, r3
 800bffa:	9200      	str	r2, [sp, #0]
 800bffc:	b209      	sxth	r1, r1
 800bffe:	f003 fc8f 	bl	800f920 <lv_area_set>
 800c002:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
    while(lv_circ_cont(&cir)) {
 800c006:	a827      	add	r0, sp, #156	; 0x9c
 800c008:	9304      	str	r3, [sp, #16]
 800c00a:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800c00e:	9307      	str	r3, [sp, #28]
 800c010:	f003 fd6a 	bl	800fae8 <lv_circ_cont>
 800c014:	2800      	cmp	r0, #0
 800c016:	f000 82dd 	beq.w	800c5d4 <lv_draw_rect_main_corner+0x740>
        if(out_x_last != cir.x) {
 800c01a:	f9bd 809c 	ldrsh.w	r8, [sp, #156]	; 0x9c
 800c01e:	45c1      	cmp	r9, r8
 800c020:	f000 8559 	beq.w	800cad6 <lv_draw_rect_main_corner+0xc42>
            mix = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800c024:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
            out_y_seg_end = cir.y;
 800c026:	f9bd 109e 	ldrsh.w	r1, [sp, #158]	; 0x9e
            mix = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800c02a:	eba3 0309 	sub.w	r3, r3, r9
    ret.green_h = g_out >> 3;
    ret.green_l = g_out & 0x7;
#  else
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
#  endif
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c02e:	9e07      	ldr	r6, [sp, #28]
            out_y_seg_end = cir.y;
 800c030:	460f      	mov	r7, r1
 800c032:	9122      	str	r1, [sp, #136]	; 0x88
            mix = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800c034:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 800c038:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c03a:	9a04      	ldr	r2, [sp, #16]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c03c:	f8dd e020 	ldr.w	lr, [sp, #32]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c040:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800c044:	fbb3 f3f1 	udiv	r3, r3, r1
 800c048:	b2db      	uxtb	r3, r3
 800c04a:	f1c3 04ff 	rsb	r4, r3, #255	; 0xff
 800c04e:	b29b      	uxth	r3, r3
 800c050:	b2a4      	uxth	r4, r4
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c052:	fb14 f006 	smulbb	r0, r4, r6
 800c056:	fb14 f102 	smulbb	r1, r4, r2
 800c05a:	fb03 0002 	mla	r0, r3, r2, r0
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c05e:	fb14 f50e 	smulbb	r5, r4, lr
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c062:	fb03 1106 	mla	r1, r3, r6, r1
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c066:	9a05      	ldr	r2, [sp, #20]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c068:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800c06c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c06e:	fb03 5502 	mla	r5, r3, r2, r5
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c072:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800c076:	f360 0607 	bfi	r6, r0, #0, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c07a:	fb14 f002 	smulbb	r0, r4, r2
 800c07e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c080:	f3c5 2507 	ubfx	r5, r5, #8, #8
 800c084:	f361 0207 	bfi	r2, r1, #0, #8
 800c088:	fb03 000e 	mla	r0, r3, lr, r0
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c08c:	fb1c f104 	smulbb	r1, ip, r4
 800c090:	f8dd e018 	ldr.w	lr, [sp, #24]
 800c094:	920d      	str	r2, [sp, #52]	; 0x34
 800c096:	4632      	mov	r2, r6
 800c098:	fb0e 1103 	mla	r1, lr, r3, r1
 800c09c:	fb1e f404 	smulbb	r4, lr, r4
            lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800c0a0:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800c0a4:	f365 220f 	bfi	r2, r5, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c0a8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800c0ac:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c0ae:	fb03 430c 	mla	r3, r3, ip, r4
 800c0b2:	fa1f f68e 	uxth.w	r6, lr
 800c0b6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800c0ba:	f360 250f 	bfi	r5, r0, #8, #8
 800c0be:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800c0c2:	1bb8      	subs	r0, r7, r6
 800c0c4:	f361 4217 	bfi	r2, r1, #16, #8
 800c0c8:	f363 4517 	bfi	r5, r3, #16, #8
 800c0cc:	b203      	sxth	r3, r0
 800c0ce:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
            for(i = 0; i  < seg_size; i++) {
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	930a      	str	r3, [sp, #40]	; 0x28
 800c0d6:	920f      	str	r2, [sp, #60]	; 0x3c
 800c0d8:	f045 427f 	orr.w	r2, r5, #4278190080	; 0xff000000
 800c0dc:	920d      	str	r2, [sp, #52]	; 0x34
 800c0de:	f340 8500 	ble.w	800cae2 <lv_draw_rect_main_corner+0xc4e>
 800c0e2:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800c0e4:	fa1f f089 	uxth.w	r0, r9
 800c0e8:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c0ea:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800c0ec:	1e63      	subs	r3, r4, #1
 800c0ee:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 800c0f0:	1c4f      	adds	r7, r1, #1
 800c0f2:	1e69      	subs	r1, r5, #1
 800c0f4:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800c0f6:	eba4 0e0e 	sub.w	lr, r4, lr
 800c0fa:	4407      	add	r7, r0
 800c0fc:	eba1 0900 	sub.w	r9, r1, r0
 800c100:	462a      	mov	r2, r5
 800c102:	1a1b      	subs	r3, r3, r0
 800c104:	ebce 210e 	rsb	r1, lr, lr, lsl #8
 800c108:	eb05 0c06 	add.w	ip, r5, r6
 800c10c:	3201      	adds	r2, #1
 800c10e:	b21b      	sxth	r3, r3
 800c110:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800c112:	910b      	str	r1, [sp, #44]	; 0x2c
 800c114:	b239      	sxth	r1, r7
 800c116:	4402      	add	r2, r0
 800c118:	1ba4      	subs	r4, r4, r6
 800c11a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800c11c:	981e      	ldr	r0, [sp, #120]	; 0x78
 800c11e:	9111      	str	r1, [sp, #68]	; 0x44
 800c120:	9315      	str	r3, [sp, #84]	; 0x54
 800c122:	fa1f f38c 	uxth.w	r3, ip
 800c126:	4972      	ldr	r1, [pc, #456]	; (800c2f0 <lv_draw_rect_main_corner+0x45c>)
 800c128:	4430      	add	r0, r6
 800c12a:	9310      	str	r3, [sp, #64]	; 0x40
 800c12c:	1bae      	subs	r6, r5, r6
 800c12e:	b2a3      	uxth	r3, r4
 800c130:	2500      	movs	r5, #0
 800c132:	f8d1 8000 	ldr.w	r8, [r1]
 800c136:	fa0f f189 	sxth.w	r1, r9
 800c13a:	9502      	str	r5, [sp, #8]
 800c13c:	9113      	str	r1, [sp, #76]	; 0x4c
 800c13e:	4629      	mov	r1, r5
 800c140:	9312      	str	r3, [sp, #72]	; 0x48
 800c142:	b215      	sxth	r5, r2
 800c144:	b283      	uxth	r3, r0

    if(seg == 0) return LV_OPA_TRANSP;
    else if(seg == 1) return LV_OPA_80;
    else {

        uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map) - 1)) / (seg - 1);
 800c146:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c148:	950c      	str	r5, [sp, #48]	; 0x30
 800c14a:	3a01      	subs	r2, #1
 800c14c:	9314      	str	r3, [sp, #80]	; 0x50
 800c14e:	b2b3      	uxth	r3, r6
 800c150:	921d      	str	r2, [sp, #116]	; 0x74
 800c152:	9316      	str	r3, [sp, #88]	; 0x58
 800c154:	e0af      	b.n	800c2b6 <lv_draw_rect_main_corner+0x422>
 800c156:	9b02      	ldr	r3, [sp, #8]
 800c158:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c15a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800c15e:	fbb3 f3f2 	udiv	r3, r3, r2
        return (uint32_t)((uint32_t) opa_map[id] * opa) >> 8;
 800c162:	4a64      	ldr	r2, [pc, #400]	; (800c2f4 <lv_draw_rect_main_corner+0x460>)
 800c164:	b2db      	uxtb	r3, r3
 800c166:	5cd6      	ldrb	r6, [r2, r3]
 800c168:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 800c16c:	fb16 f603 	smulbb	r6, r6, r3
 800c170:	0a36      	lsrs	r6, r6, #8
 800c172:	9802      	ldr	r0, [sp, #8]
                px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask, aa_color_hor_bottom, aa_opa);
 800c174:	4652      	mov	r2, sl
 800c176:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c178:	b287      	uxth	r7, r0
 800c17a:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 800c17e:	3001      	adds	r0, #1
 800c180:	9600      	str	r6, [sp, #0]
 800c182:	187c      	adds	r4, r7, r1
 800c184:	463d      	mov	r5, r7
 800c186:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800c188:	464b      	mov	r3, r9
 800c18a:	b224      	sxth	r4, r4
 800c18c:	9002      	str	r0, [sp, #8]
 800c18e:	4639      	mov	r1, r7
 800c190:	4620      	mov	r0, r4
 800c192:	47c0      	blx	r8
 800c194:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c196:	9503      	str	r5, [sp, #12]
                px_fp(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask, aa_color_hor_bottom, aa_opa);
 800c198:	464b      	mov	r3, r9
 800c19a:	1b55      	subs	r5, r2, r5
 800c19c:	4639      	mov	r1, r7
 800c19e:	4652      	mov	r2, sl
 800c1a0:	9600      	str	r6, [sp, #0]
 800c1a2:	b22d      	sxth	r5, r5
 800c1a4:	4628      	mov	r0, r5
 800c1a6:	47c0      	blx	r8
                px_fp(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask, aa_color_hor_top, aa_opa);
 800c1a8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800c1aa:	4628      	mov	r0, r5
 800c1ac:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800c1ae:	463b      	mov	r3, r7
 800c1b0:	4652      	mov	r2, sl
 800c1b2:	4629      	mov	r1, r5
 800c1b4:	9600      	str	r6, [sp, #0]
 800c1b6:	47c0      	blx	r8
                px_fp(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask, aa_color_hor_top, aa_opa);
 800c1b8:	4620      	mov	r0, r4
 800c1ba:	463b      	mov	r3, r7
 800c1bc:	4629      	mov	r1, r5
 800c1be:	4652      	mov	r2, sl
 800c1c0:	9600      	str	r6, [sp, #0]
 800c1c2:	47c0      	blx	r8
                mix = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800c1c4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800c1c6:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c1c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c1ca:	9a03      	ldr	r2, [sp, #12]
 800c1cc:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 800c1d0:	eb02 0903 	add.w	r9, r2, r3
 800c1d4:	462b      	mov	r3, r5
                px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, aa_color_ver, aa_opa);
 800c1d6:	4652      	mov	r2, sl
 800c1d8:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c1da:	33ff      	adds	r3, #255	; 0xff
 800c1dc:	fa0f f989 	sxth.w	r9, r9
 800c1e0:	9600      	str	r6, [sp, #0]
 800c1e2:	930b      	str	r3, [sp, #44]	; 0x2c
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c1e4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
                mix = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800c1e8:	fbb5 f4f1 	udiv	r4, r5, r1
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c1ec:	b2e4      	uxtb	r4, r4
                px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, aa_color_ver, aa_opa);
 800c1ee:	4649      	mov	r1, r9
 800c1f0:	f1c4 05ff 	rsb	r5, r4, #255	; 0xff
 800c1f4:	b2a4      	uxth	r4, r4
 800c1f6:	b2ad      	uxth	r5, r5
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c1f8:	fb13 fc05 	smulbb	ip, r3, r5
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c1fc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800c200:	fb13 fe05 	smulbb	lr, r3, r5
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c204:	9b07      	ldr	r3, [sp, #28]
 800c206:	fb03 cc04 	mla	ip, r3, r4, ip
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c20a:	fb17 f305 	smulbb	r3, r7, r5
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c20e:	9f08      	ldr	r7, [sp, #32]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c210:	f3cc 2c07 	ubfx	ip, ip, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c214:	fb07 ee04 	mla	lr, r7, r4, lr
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c218:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c21a:	f36c 0b07 	bfi	fp, ip, #0, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c21e:	f3ce 2e07 	ubfx	lr, lr, #8, #8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c222:	fb07 3304 	mla	r3, r7, r4, r3
 800c226:	f36e 2b0f 	bfi	fp, lr, #8, #8
 800c22a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800c22e:	f363 4b17 	bfi	fp, r3, #16, #8
 800c232:	f04b 4b7f 	orr.w	fp, fp, #4278190080	; 0xff000000
 800c236:	465b      	mov	r3, fp
 800c238:	47c0      	blx	r8
                px_fp(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask, aa_color_ver, aa_opa);
 800c23a:	4649      	mov	r1, r9
 800c23c:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
 800c240:	465b      	mov	r3, fp
 800c242:	4652      	mov	r2, sl
 800c244:	9600      	str	r6, [sp, #0]
 800c246:	4648      	mov	r0, r9
 800c248:	47c0      	blx	r8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c24a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800c24e:	9916      	ldr	r1, [sp, #88]	; 0x58
                px_fp(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, aa_color_ver, aa_opa);
 800c250:	4648      	mov	r0, r9
 800c252:	9f03      	ldr	r7, [sp, #12]
 800c254:	fb13 f205 	smulbb	r2, r3, r5
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c258:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800c25c:	1bcf      	subs	r7, r1, r7
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c25e:	9904      	ldr	r1, [sp, #16]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c260:	f8bd e024 	ldrh.w	lr, [sp, #36]	; 0x24
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c264:	fb13 f305 	smulbb	r3, r3, r5
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c268:	fb01 2204 	mla	r2, r1, r4, r2
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c26c:	9905      	ldr	r1, [sp, #20]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c26e:	fb1e f505 	smulbb	r5, lr, r5
 800c272:	b23f      	sxth	r7, r7
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c274:	fb01 3304 	mla	r3, r1, r4, r3
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c278:	f3c2 2207 	ubfx	r2, r2, #8, #8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c27c:	9906      	ldr	r1, [sp, #24]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c27e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800c282:	f362 0b07 	bfi	fp, r2, #0, #8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c286:	fb01 5404 	mla	r4, r1, r4, r5
 800c28a:	4652      	mov	r2, sl
 800c28c:	f363 2b0f 	bfi	fp, r3, #8, #8
 800c290:	4639      	mov	r1, r7
 800c292:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800c296:	9600      	str	r6, [sp, #0]
 800c298:	f364 4b17 	bfi	fp, r4, #16, #8
 800c29c:	465b      	mov	r3, fp
 800c29e:	47c0      	blx	r8
                px_fp(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask, aa_color_ver, aa_opa);
 800c2a0:	4639      	mov	r1, r7
 800c2a2:	465b      	mov	r3, fp
 800c2a4:	9600      	str	r6, [sp, #0]
 800c2a6:	4652      	mov	r2, sl
 800c2a8:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c2aa:	47c0      	blx	r8
            for(i = 0; i  < seg_size; i++) {
 800c2ac:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 800c2b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2b2:	428b      	cmp	r3, r1
 800c2b4:	dd20      	ble.n	800c2f8 <lv_draw_rect_main_corner+0x464>
                if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) {    /*Use non-linear opa mapping on the first segment*/
 800c2b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2b8:	2b05      	cmp	r3, #5
 800c2ba:	f73f af4c 	bgt.w	800c156 <lv_draw_rect_main_corner+0x2c2>
                    aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800c2be:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800c2c0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c2c2:	4622      	mov	r2, r4
 800c2c4:	f7fe f9ce 	bl	800a664 <lv_draw_aa_get_opa>
 800c2c8:	1a20      	subs	r0, r4, r0
 800c2ca:	b2c6      	uxtb	r6, r0
 800c2cc:	e751      	b.n	800c172 <lv_draw_rect_main_corner+0x2de>
    if(r >= (h >> 1)) {
 800c2ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c2d0:	105b      	asrs	r3, r3, #1
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	dc09      	bgt.n	800c2ea <lv_draw_rect_main_corner+0x456>
        r = (h >> 1);
 800c2d6:	b29b      	uxth	r3, r3
 800c2d8:	931f      	str	r3, [sp, #124]	; 0x7c
        if(r != 0) r--;
 800c2da:	b133      	cbz	r3, 800c2ea <lv_draw_rect_main_corner+0x456>
 800c2dc:	1e5a      	subs	r2, r3, #1
 800c2de:	b293      	uxth	r3, r2
 800c2e0:	931f      	str	r3, [sp, #124]	; 0x7c
    if(r > 0) r -= LV_ANTIALIAS;
 800c2e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	f47f ae10 	bne.w	800bf0a <lv_draw_rect_main_corner+0x76>
 800c2ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c2ec:	931d      	str	r3, [sp, #116]	; 0x74
 800c2ee:	e611      	b.n	800bf14 <lv_draw_rect_main_corner+0x80>
 800c2f0:	080872f4 	.word	0x080872f4
 800c2f4:	0808730c 	.word	0x0808730c
 800c2f8:	f9bd 909c 	ldrsh.w	r9, [sp, #156]	; 0x9c
 800c2fc:	f9bd 509e 	ldrsh.w	r5, [sp, #158]	; 0x9e
            out_y_seg_start = out_y_seg_end;
 800c300:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c302:	9310      	str	r3, [sp, #64]	; 0x40
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
 800c304:	9e24      	ldr	r6, [sp, #144]	; 0x90
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 800c306:	9823      	ldr	r0, [sp, #140]	; 0x8c
        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
 800c308:	f9bd 30ba 	ldrsh.w	r3, [sp, #186]	; 0xba
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
 800c30c:	19af      	adds	r7, r5, r6
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 800c30e:	f9bd 10a2 	ldrsh.w	r1, [sp, #162]	; 0xa2
 800c312:	eba0 0209 	sub.w	r2, r0, r9
        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
 800c316:	9302      	str	r3, [sp, #8]
 800c318:	4633      	mov	r3, r6
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 800c31a:	4291      	cmp	r1, r2
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
 800c31c:	f9bd 80b2 	ldrsh.w	r8, [sp, #178]	; 0xb2
        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
 800c320:	444b      	add	r3, r9
        if(mid_top_area.y1 != LV_CIRC_OCT8_Y(cir) + lt_origo.y) mid_top_refr = 1;
 800c322:	eba0 0505 	sub.w	r5, r0, r5
 800c326:	f9bd 60aa 	ldrsh.w	r6, [sp, #170]	; 0xaa
        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
 800c32a:	9303      	str	r3, [sp, #12]
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 800c32c:	d03f      	beq.n	800c3ae <lv_draw_rect_main_corner+0x51a>
            if(mcolor.full == gcolor.full) act_color = mcolor;
 800c32e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c330:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c332:	4293      	cmp	r3, r2
 800c334:	f000 83d2 	beq.w	800cadc <lv_draw_rect_main_corner+0xc48>
                mix = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1)  * 255) / height;
 800c338:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c33a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c33c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c340:	9c07      	ldr	r4, [sp, #28]
 800c342:	1a5b      	subs	r3, r3, r1
 800c344:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800c348:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 800c34c:	fbb3 f3f2 	udiv	r3, r3, r2
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c350:	b2db      	uxtb	r3, r3
 800c352:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 800c356:	b29b      	uxth	r3, r3
 800c358:	b292      	uxth	r2, r2
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c35a:	fb12 f001 	smulbb	r0, r2, r1
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c35e:	f8bd 1014 	ldrh.w	r1, [sp, #20]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c362:	fb03 0004 	mla	r0, r3, r4, r0
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c366:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c36a:	fb12 f101 	smulbb	r1, r2, r1
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c36e:	fb12 f204 	smulbb	r2, r2, r4
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c372:	9c08      	ldr	r4, [sp, #32]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c374:	f3c0 2007 	ubfx	r0, r0, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c378:	fb03 1104 	mla	r1, r3, r4, r1
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c37c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800c37e:	fb03 2304 	mla	r3, r3, r4, r2
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c382:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800c386:	9918      	ldr	r1, [sp, #96]	; 0x60
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c388:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800c38c:	f360 0107 	bfi	r1, r0, #0, #8
 800c390:	f362 210f 	bfi	r1, r2, #8, #8
 800c394:	f363 4117 	bfi	r1, r3, #16, #8
 800c398:	f041 437f 	orr.w	r3, r1, #4278190080	; 0xff000000
 800c39c:	9318      	str	r3, [sp, #96]	; 0x60
            fill_fp(&edge_top_area, mask, act_color, opa);
 800c39e:	4bb2      	ldr	r3, [pc, #712]	; (800c668 <lv_draw_rect_main_corner+0x7d4>)
 800c3a0:	4651      	mov	r1, sl
 800c3a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c3a4:	a828      	add	r0, sp, #160	; 0xa0
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	461c      	mov	r4, r3
 800c3aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c3ac:	47a0      	blx	r4
        if(mid_top_refr != 0) {
 800c3ae:	42ae      	cmp	r6, r5
 800c3b0:	d03f      	beq.n	800c432 <lv_draw_rect_main_corner+0x59e>
            if(mcolor.full == gcolor.full) act_color = mcolor;
 800c3b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c3b4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c3b6:	4293      	cmp	r3, r2
 800c3b8:	d033      	beq.n	800c422 <lv_draw_rect_main_corner+0x58e>
                mix = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 800c3ba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c3bc:	f9bd 20aa 	ldrsh.w	r2, [sp, #170]	; 0xaa
 800c3c0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c3c4:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800c3c8:	1a9b      	subs	r3, r3, r2
 800c3ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c3cc:	9c07      	ldr	r4, [sp, #28]
 800c3ce:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 800c3d2:	fbb3 f3f2 	udiv	r3, r3, r2
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c3d6:	b2db      	uxtb	r3, r3
 800c3d8:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 800c3dc:	b29b      	uxth	r3, r3
 800c3de:	b292      	uxth	r2, r2
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c3e0:	fb12 f001 	smulbb	r0, r2, r1
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c3e4:	f8bd 1014 	ldrh.w	r1, [sp, #20]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c3e8:	fb03 0004 	mla	r0, r3, r4, r0
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c3ec:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c3f0:	fb12 f101 	smulbb	r1, r2, r1
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c3f4:	fb12 f204 	smulbb	r2, r2, r4
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c3f8:	9c08      	ldr	r4, [sp, #32]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c3fa:	f3c0 2007 	ubfx	r0, r0, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c3fe:	fb03 1104 	mla	r1, r3, r4, r1
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c402:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800c404:	fb03 2304 	mla	r3, r3, r4, r2
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c408:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800c40c:	9918      	ldr	r1, [sp, #96]	; 0x60
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c40e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800c412:	f360 0107 	bfi	r1, r0, #0, #8
 800c416:	f362 210f 	bfi	r1, r2, #8, #8
 800c41a:	f363 4117 	bfi	r1, r3, #16, #8
 800c41e:	f041 437f 	orr.w	r3, r1, #4278190080	; 0xff000000
 800c422:	9318      	str	r3, [sp, #96]	; 0x60
            fill_fp(&mid_top_area, mask, act_color, opa);
 800c424:	4651      	mov	r1, sl
 800c426:	4b90      	ldr	r3, [pc, #576]	; (800c668 <lv_draw_rect_main_corner+0x7d4>)
 800c428:	a82a      	add	r0, sp, #168	; 0xa8
 800c42a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c42c:	681d      	ldr	r5, [r3, #0]
 800c42e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c430:	47a8      	blx	r5
        if(mid_bot_refr != 0) {
 800c432:	45b8      	cmp	r8, r7
 800c434:	d03f      	beq.n	800c4b6 <lv_draw_rect_main_corner+0x622>
            if(mcolor.full == gcolor.full) act_color = mcolor;
 800c436:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c438:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c43a:	4293      	cmp	r3, r2
 800c43c:	d033      	beq.n	800c4a6 <lv_draw_rect_main_corner+0x612>
                mix = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800c43e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c440:	f9bd 20b2 	ldrsh.w	r2, [sp, #178]	; 0xb2
 800c444:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c448:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800c44c:	1a9b      	subs	r3, r3, r2
 800c44e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c450:	9c07      	ldr	r4, [sp, #28]
 800c452:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 800c456:	fbb3 f3f2 	udiv	r3, r3, r2
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c45a:	b2db      	uxtb	r3, r3
 800c45c:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 800c460:	b29b      	uxth	r3, r3
 800c462:	b292      	uxth	r2, r2
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c464:	fb12 f001 	smulbb	r0, r2, r1
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c468:	f8bd 1014 	ldrh.w	r1, [sp, #20]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c46c:	fb03 0004 	mla	r0, r3, r4, r0
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c470:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c474:	fb12 f101 	smulbb	r1, r2, r1
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c478:	fb12 f204 	smulbb	r2, r2, r4
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c47c:	9c08      	ldr	r4, [sp, #32]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c47e:	f3c0 2007 	ubfx	r0, r0, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c482:	fb03 1104 	mla	r1, r3, r4, r1
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c486:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800c488:	fb03 2304 	mla	r3, r3, r4, r2
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c48c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800c490:	9918      	ldr	r1, [sp, #96]	; 0x60
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c492:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800c496:	f360 0107 	bfi	r1, r0, #0, #8
 800c49a:	f362 210f 	bfi	r1, r2, #8, #8
 800c49e:	f363 4117 	bfi	r1, r3, #16, #8
 800c4a2:	f041 437f 	orr.w	r3, r1, #4278190080	; 0xff000000
 800c4a6:	9318      	str	r3, [sp, #96]	; 0x60
            fill_fp(&mid_bot_area, mask, act_color, opa);
 800c4a8:	4651      	mov	r1, sl
 800c4aa:	4b6f      	ldr	r3, [pc, #444]	; (800c668 <lv_draw_rect_main_corner+0x7d4>)
 800c4ac:	a82c      	add	r0, sp, #176	; 0xb0
 800c4ae:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c4b0:	681d      	ldr	r5, [r3, #0]
 800c4b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c4b4:	47a8      	blx	r5
        if(edge_bot_refr != 0) {
 800c4b6:	9b03      	ldr	r3, [sp, #12]
 800c4b8:	9a02      	ldr	r2, [sp, #8]
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	d03f      	beq.n	800c53e <lv_draw_rect_main_corner+0x6aa>
            if(mcolor.full == gcolor.full) act_color = mcolor;
 800c4be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c4c0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c4c2:	4293      	cmp	r3, r2
 800c4c4:	d033      	beq.n	800c52e <lv_draw_rect_main_corner+0x69a>
                mix = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 800c4c6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c4c8:	f9bd 20ba 	ldrsh.w	r2, [sp, #186]	; 0xba
 800c4cc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c4d0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800c4d4:	1a9b      	subs	r3, r3, r2
 800c4d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c4d8:	9c07      	ldr	r4, [sp, #28]
 800c4da:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 800c4de:	fbb3 f3f2 	udiv	r3, r3, r2
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c4e2:	b2db      	uxtb	r3, r3
 800c4e4:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 800c4e8:	b29b      	uxth	r3, r3
 800c4ea:	b292      	uxth	r2, r2
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c4ec:	fb12 f001 	smulbb	r0, r2, r1
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c4f0:	f8bd 1014 	ldrh.w	r1, [sp, #20]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c4f4:	fb03 0004 	mla	r0, r3, r4, r0
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c4f8:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c4fc:	fb12 f101 	smulbb	r1, r2, r1
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c500:	fb12 f204 	smulbb	r2, r2, r4
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c504:	9c08      	ldr	r4, [sp, #32]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c506:	f3c0 2007 	ubfx	r0, r0, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c50a:	fb03 1104 	mla	r1, r3, r4, r1
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c50e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800c510:	fb03 2304 	mla	r3, r3, r4, r2
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c514:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800c518:	9918      	ldr	r1, [sp, #96]	; 0x60
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c51a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800c51e:	f360 0107 	bfi	r1, r0, #0, #8
 800c522:	f362 210f 	bfi	r1, r2, #8, #8
 800c526:	f363 4117 	bfi	r1, r3, #16, #8
 800c52a:	f041 437f 	orr.w	r3, r1, #4278190080	; 0xff000000
 800c52e:	9318      	str	r3, [sp, #96]	; 0x60
            fill_fp(&edge_bot_area, mask, act_color, opa);
 800c530:	4651      	mov	r1, sl
 800c532:	4b4d      	ldr	r3, [pc, #308]	; (800c668 <lv_draw_rect_main_corner+0x7d4>)
 800c534:	a82e      	add	r0, sp, #184	; 0xb8
 800c536:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c538:	681c      	ldr	r4, [r3, #0]
 800c53a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c53c:	47a0      	blx	r4
                    rb_origo.x + LV_CIRC_OCT1_X(cir),
 800c53e:	9c21      	ldr	r4, [sp, #132]	; 0x84
        lv_area_set(&mid_bot_area,  lb_origo.x + LV_CIRC_OCT4_X(cir),
 800c540:	a82c      	add	r0, sp, #176	; 0xb0
                    lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800c542:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c544:	f8bd 209e 	ldrh.w	r2, [sp, #158]	; 0x9e
                    rb_origo.x + LV_CIRC_OCT1_X(cir),
 800c548:	4623      	mov	r3, r4
        lv_area_set(&mid_bot_area,  lb_origo.x + LV_CIRC_OCT4_X(cir),
 800c54a:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800c54c:	f8bd 109c 	ldrh.w	r1, [sp, #156]	; 0x9c
                    lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800c550:	4432      	add	r2, r6
                    rb_origo.x + LV_CIRC_OCT1_X(cir),
 800c552:	440b      	add	r3, r1
        lv_area_set(&mid_bot_area,  lb_origo.x + LV_CIRC_OCT4_X(cir),
 800c554:	b212      	sxth	r2, r2
 800c556:	1a69      	subs	r1, r5, r1
 800c558:	b21b      	sxth	r3, r3
 800c55a:	9200      	str	r2, [sp, #0]
 800c55c:	b209      	sxth	r1, r1
 800c55e:	f003 f9df 	bl	800f920 <lv_area_set>
                    lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800c562:	f8bd 209c 	ldrh.w	r2, [sp, #156]	; 0x9c
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir),
 800c566:	f8bd 109e 	ldrh.w	r1, [sp, #158]	; 0x9e
                    rb_origo.x + LV_CIRC_OCT2_X(cir),
 800c56a:	4623      	mov	r3, r4
                    lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800c56c:	4432      	add	r2, r6
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir),
 800c56e:	a82e      	add	r0, sp, #184	; 0xb8
                    rb_origo.x + LV_CIRC_OCT2_X(cir),
 800c570:	440b      	add	r3, r1
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir),
 800c572:	1a69      	subs	r1, r5, r1
 800c574:	b212      	sxth	r2, r2
 800c576:	b21b      	sxth	r3, r3
 800c578:	9200      	str	r2, [sp, #0]
 800c57a:	b209      	sxth	r1, r1
 800c57c:	f003 f9d0 	bl	800f920 <lv_area_set>
                    lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800c580:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800c582:	f8bd 209e 	ldrh.w	r2, [sp, #158]	; 0x9e
                    rt_origo.x + LV_CIRC_OCT8_X(cir),
 800c586:	4623      	mov	r3, r4
        lv_area_set(&mid_top_area,  lt_origo.x + LV_CIRC_OCT5_X(cir),
 800c588:	f8bd 109c 	ldrh.w	r1, [sp, #156]	; 0x9c
 800c58c:	a82a      	add	r0, sp, #168	; 0xa8
                    lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800c58e:	1ab2      	subs	r2, r6, r2
                    rt_origo.x + LV_CIRC_OCT8_X(cir),
 800c590:	440b      	add	r3, r1
        lv_area_set(&mid_top_area,  lt_origo.x + LV_CIRC_OCT5_X(cir),
 800c592:	1a69      	subs	r1, r5, r1
 800c594:	b212      	sxth	r2, r2
 800c596:	b21b      	sxth	r3, r3
 800c598:	9200      	str	r2, [sp, #0]
 800c59a:	b209      	sxth	r1, r1
 800c59c:	f003 f9c0 	bl	800f920 <lv_area_set>
                    lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800c5a0:	f8bd 209c 	ldrh.w	r2, [sp, #156]	; 0x9c
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir),
 800c5a4:	f8bd 109e 	ldrh.w	r1, [sp, #158]	; 0x9e
                    rt_origo.x + LV_CIRC_OCT7_X(cir),
 800c5a8:	4623      	mov	r3, r4
                    lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800c5aa:	1ab2      	subs	r2, r6, r2
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir),
 800c5ac:	a828      	add	r0, sp, #160	; 0xa0
                    rt_origo.x + LV_CIRC_OCT7_X(cir),
 800c5ae:	440b      	add	r3, r1
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir),
 800c5b0:	1a69      	subs	r1, r5, r1
 800c5b2:	b212      	sxth	r2, r2
 800c5b4:	b21b      	sxth	r3, r3
 800c5b6:	9200      	str	r2, [sp, #0]
 800c5b8:	b209      	sxth	r1, r1
 800c5ba:	f003 f9b1 	bl	800f920 <lv_area_set>
        lv_circ_next(&cir, &cir_tmp);
 800c5be:	a827      	add	r0, sp, #156	; 0x9c
 800c5c0:	f10d 019a 	add.w	r1, sp, #154	; 0x9a
 800c5c4:	f003 fa9a 	bl	800fafc <lv_circ_next>
    while(lv_circ_cont(&cir)) {
 800c5c8:	a827      	add	r0, sp, #156	; 0x9c
 800c5ca:	f003 fa8d 	bl	800fae8 <lv_circ_cont>
 800c5ce:	2800      	cmp	r0, #0
 800c5d0:	f47f ad23 	bne.w	800c01a <lv_draw_rect_main_corner+0x186>
    if(mcolor.full == gcolor.full) act_color = mcolor;
 800c5d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c5d6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c5d8:	f8cd 9074 	str.w	r9, [sp, #116]	; 0x74
 800c5dc:	4293      	cmp	r3, r2
 800c5de:	f000 8286 	beq.w	800caee <lv_draw_rect_main_corner+0xc5a>
        mix = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1)  * 255) / height;
 800c5e2:	9b20      	ldr	r3, [sp, #128]	; 0x80
    fill_fp(&edge_top_area, mask, act_color, opa);
 800c5e4:	4651      	mov	r1, sl
        mix = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1)  * 255) / height;
 800c5e6:	f9bd 00a2 	ldrsh.w	r0, [sp, #162]	; 0xa2
 800c5ea:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
    fill_fp(&edge_top_area, mask, act_color, opa);
 800c5ee:	4c1e      	ldr	r4, [pc, #120]	; (800c668 <lv_draw_rect_main_corner+0x7d4>)
        mix = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1)  * 255) / height;
 800c5f0:	1a12      	subs	r2, r2, r0
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c5f2:	f8bd 5010 	ldrh.w	r5, [sp, #16]
    fill_fp(&edge_top_area, mask, act_color, opa);
 800c5f6:	6827      	ldr	r7, [r4, #0]
 800c5f8:	a828      	add	r0, sp, #160	; 0xa0
        mix = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1)  * 255) / height;
 800c5fa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800c5fc:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c600:	f8bd e018 	ldrh.w	lr, [sp, #24]
    fill_fp(&edge_top_area, mask, act_color, opa);
 800c604:	9b17      	ldr	r3, [sp, #92]	; 0x5c
        mix = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1)  * 255) / height;
 800c606:	fbb2 f2f4 	udiv	r2, r2, r4
 800c60a:	b2d2      	uxtb	r2, r2
 800c60c:	f1c2 04ff 	rsb	r4, r2, #255	; 0xff
 800c610:	b292      	uxth	r2, r2
 800c612:	b2a4      	uxth	r4, r4
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c614:	fb14 f605 	smulbb	r6, r4, r5
 800c618:	9d07      	ldr	r5, [sp, #28]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c61a:	fb1e fe04 	smulbb	lr, lr, r4
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c61e:	fb02 6605 	mla	r6, r2, r5, r6
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c622:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 800c626:	fb14 f505 	smulbb	r5, r4, r5
 800c62a:	9c08      	ldr	r4, [sp, #32]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c62c:	f3c6 2607 	ubfx	r6, r6, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c630:	fb02 5504 	mla	r5, r2, r4, r5
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c634:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800c636:	fb04 e202 	mla	r2, r4, r2, lr
 800c63a:	9c18      	ldr	r4, [sp, #96]	; 0x60
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c63c:	f3c5 2507 	ubfx	r5, r5, #8, #8
 800c640:	f366 0407 	bfi	r4, r6, #0, #8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c644:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800c648:	f365 240f 	bfi	r4, r5, #8, #8
 800c64c:	f362 4417 	bfi	r4, r2, #16, #8
 800c650:	f044 427f 	orr.w	r2, r4, #4278190080	; 0xff000000
 800c654:	9218      	str	r2, [sp, #96]	; 0x60
    fill_fp(&edge_top_area, mask, act_color, opa);
 800c656:	47b8      	blx	r7
    if(edge_top_area.y1 != mid_top_area.y1) {
 800c658:	f9bd 20aa 	ldrsh.w	r2, [sp, #170]	; 0xaa
 800c65c:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	; 0xa2
 800c660:	4293      	cmp	r3, r2
 800c662:	d040      	beq.n	800c6e6 <lv_draw_rect_main_corner+0x852>
 800c664:	e002      	b.n	800c66c <lv_draw_rect_main_corner+0x7d8>
 800c666:	bf00      	nop
 800c668:	080872f0 	.word	0x080872f0
            mix = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 800c66c:	9b20      	ldr	r3, [sp, #128]	; 0x80
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c66e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800c672:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c676:	9c07      	ldr	r4, [sp, #28]
 800c678:	1a9b      	subs	r3, r3, r2
 800c67a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c67c:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 800c680:	fbb3 f3f2 	udiv	r3, r3, r2
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c684:	b2db      	uxtb	r3, r3
 800c686:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 800c68a:	b29b      	uxth	r3, r3
 800c68c:	b292      	uxth	r2, r2
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c68e:	fb11 f002 	smulbb	r0, r1, r2
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c692:	f8bd 1014 	ldrh.w	r1, [sp, #20]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c696:	fb04 0003 	mla	r0, r4, r3, r0
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c69a:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c69e:	fb11 f102 	smulbb	r1, r1, r2
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c6a2:	fb14 f202 	smulbb	r2, r4, r2
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c6a6:	9c08      	ldr	r4, [sp, #32]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c6a8:	f3c0 2007 	ubfx	r0, r0, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c6ac:	fb04 1103 	mla	r1, r4, r3, r1
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c6b0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800c6b2:	fb04 2303 	mla	r3, r4, r3, r2
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c6b6:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800c6ba:	9918      	ldr	r1, [sp, #96]	; 0x60
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c6bc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800c6c0:	f360 0107 	bfi	r1, r0, #0, #8
 800c6c4:	f362 210f 	bfi	r1, r2, #8, #8
 800c6c8:	f363 4117 	bfi	r1, r3, #16, #8
 800c6cc:	f041 437f 	orr.w	r3, r1, #4278190080	; 0xff000000
 800c6d0:	9318      	str	r3, [sp, #96]	; 0x60
        fill_fp(&mid_top_area, mask, act_color, opa);
 800c6d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c6d4:	a82a      	add	r0, sp, #168	; 0xa8
 800c6d6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c6d8:	4651      	mov	r1, sl
 800c6da:	47b8      	blx	r7
    if(mcolor.full == gcolor.full) act_color = mcolor;
 800c6dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c6de:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	f000 8201 	beq.w	800cae8 <lv_draw_rect_main_corner+0xc54>
        mix = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800c6e6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c6e8:	f9bd 20b2 	ldrsh.w	r2, [sp, #178]	; 0xb2
 800c6ec:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c6f0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800c6f4:	1a9b      	subs	r3, r3, r2
 800c6f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c6f8:	9c07      	ldr	r4, [sp, #28]
 800c6fa:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 800c6fe:	fbb3 f3f2 	udiv	r3, r3, r2
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c702:	b2db      	uxtb	r3, r3
 800c704:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 800c708:	b29b      	uxth	r3, r3
 800c70a:	b292      	uxth	r2, r2
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c70c:	fb12 f001 	smulbb	r0, r2, r1
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c710:	f8bd 1014 	ldrh.w	r1, [sp, #20]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c714:	fb03 0004 	mla	r0, r3, r4, r0
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c718:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c71c:	fb12 f101 	smulbb	r1, r2, r1
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c720:	fb12 f204 	smulbb	r2, r2, r4
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c724:	9c08      	ldr	r4, [sp, #32]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c726:	f3c0 2007 	ubfx	r0, r0, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c72a:	fb03 1104 	mla	r1, r3, r4, r1
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c72e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800c730:	fb03 2304 	mla	r3, r3, r4, r2
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c734:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800c738:	9918      	ldr	r1, [sp, #96]	; 0x60
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c73a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800c73e:	f360 0107 	bfi	r1, r0, #0, #8
 800c742:	f362 210f 	bfi	r1, r2, #8, #8
 800c746:	f363 4117 	bfi	r1, r3, #16, #8
 800c74a:	f041 437f 	orr.w	r3, r1, #4278190080	; 0xff000000
 800c74e:	9318      	str	r3, [sp, #96]	; 0x60
    fill_fp(&mid_bot_area, mask, act_color, opa);
 800c750:	4b83      	ldr	r3, [pc, #524]	; (800c960 <lv_draw_rect_main_corner+0xacc>)
 800c752:	a82c      	add	r0, sp, #176	; 0xb0
 800c754:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c756:	4651      	mov	r1, sl
 800c758:	681c      	ldr	r4, [r3, #0]
 800c75a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c75c:	47a0      	blx	r4
    if(edge_bot_area.y1 != mid_bot_area.y1) {
 800c75e:	f9bd 20ba 	ldrsh.w	r2, [sp, #186]	; 0xba
 800c762:	f9bd 30b2 	ldrsh.w	r3, [sp, #178]	; 0xb2
 800c766:	4293      	cmp	r3, r2
 800c768:	d03b      	beq.n	800c7e2 <lv_draw_rect_main_corner+0x94e>
        if(mcolor.full == gcolor.full) act_color = mcolor;
 800c76a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c76c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c76e:	428b      	cmp	r3, r1
 800c770:	d031      	beq.n	800c7d6 <lv_draw_rect_main_corner+0x942>
            mix = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 800c772:	9b20      	ldr	r3, [sp, #128]	; 0x80
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c774:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800c778:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c77c:	9d07      	ldr	r5, [sp, #28]
 800c77e:	1a9b      	subs	r3, r3, r2
 800c780:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c782:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 800c786:	fbb3 f3f2 	udiv	r3, r3, r2
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c78a:	b2db      	uxtb	r3, r3
 800c78c:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 800c790:	b29b      	uxth	r3, r3
 800c792:	b292      	uxth	r2, r2
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c794:	fb12 f001 	smulbb	r0, r2, r1
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c798:	f8bd 1014 	ldrh.w	r1, [sp, #20]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c79c:	fb03 0005 	mla	r0, r3, r5, r0
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c7a0:	f8bd 5018 	ldrh.w	r5, [sp, #24]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c7a4:	fb12 f101 	smulbb	r1, r2, r1
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c7a8:	fb12 f205 	smulbb	r2, r2, r5
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c7ac:	9d08      	ldr	r5, [sp, #32]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c7ae:	f3c0 2007 	ubfx	r0, r0, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c7b2:	fb03 1105 	mla	r1, r3, r5, r1
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c7b6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c7b8:	fb03 2305 	mla	r3, r3, r5, r2
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c7bc:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800c7c0:	9918      	ldr	r1, [sp, #96]	; 0x60
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c7c2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800c7c6:	f360 0107 	bfi	r1, r0, #0, #8
 800c7ca:	f362 210f 	bfi	r1, r2, #8, #8
 800c7ce:	f363 4117 	bfi	r1, r3, #16, #8
 800c7d2:	f041 437f 	orr.w	r3, r1, #4278190080	; 0xff000000
 800c7d6:	9318      	str	r3, [sp, #96]	; 0x60
        fill_fp(&edge_bot_area, mask, act_color, opa);
 800c7d8:	a82e      	add	r0, sp, #184	; 0xb8
 800c7da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c7dc:	4651      	mov	r1, sl
 800c7de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c7e0:	47a0      	blx	r4
    edge_top_area.x1 = coords->x1 + radius + 2;
 800c7e2:	9e20      	ldr	r6, [sp, #128]	; 0x80
    fill_fp(&edge_top_area, mask, style->body.main_color, opa);
 800c7e4:	4651      	mov	r1, sl
    edge_top_area.x1 = coords->x1 + radius + 2;
 800c7e6:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800c7e8:	8835      	ldrh	r5, [r6, #0]
    edge_top_area.x2 = coords->x2 - radius - 2;
 800c7ea:	88b2      	ldrh	r2, [r6, #4]
    edge_top_area.x1 = coords->x1 + radius + 2;
 800c7ec:	3502      	adds	r5, #2
    edge_top_area.y1 = coords->y1;
 800c7ee:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
    edge_top_area.x2 = coords->x2 - radius - 2;
 800c7f2:	3a02      	subs	r2, #2
    fill_fp(&edge_top_area, mask, style->body.main_color, opa);
 800c7f4:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
    edge_top_area.x1 = coords->x1 + radius + 2;
 800c7f8:	443d      	add	r5, r7
    edge_top_area.y1 = coords->y1;
 800c7fa:	f8ad 00a2 	strh.w	r0, [sp, #162]	; 0xa2
    edge_top_area.x2 = coords->x2 - radius - 2;
 800c7fe:	1bd2      	subs	r2, r2, r7
    fill_fp(&edge_top_area, mask, style->body.main_color, opa);
 800c800:	4643      	mov	r3, r8
    edge_top_area.x1 = coords->x1 + radius + 2;
 800c802:	f8ad 50a0 	strh.w	r5, [sp, #160]	; 0xa0
    fill_fp(&edge_top_area, mask, style->body.main_color, opa);
 800c806:	9d25      	ldr	r5, [sp, #148]	; 0x94
    edge_top_area.y2 = coords->y1;
 800c808:	f8ad 00a6 	strh.w	r0, [sp, #166]	; 0xa6
    fill_fp(&edge_top_area, mask, style->body.main_color, opa);
 800c80c:	a828      	add	r0, sp, #160	; 0xa0
    edge_top_area.x2 = coords->x2 - radius - 2;
 800c80e:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
    fill_fp(&edge_top_area, mask, style->body.main_color, opa);
 800c812:	686a      	ldr	r2, [r5, #4]
 800c814:	47a0      	blx	r4
    edge_top_area.y1 = coords->y2;
 800c816:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
    fill_fp(&edge_top_area, mask, style->body.grad_color, opa);
 800c81a:	68aa      	ldr	r2, [r5, #8]
 800c81c:	4643      	mov	r3, r8
 800c81e:	a828      	add	r0, sp, #160	; 0xa0
    edge_top_area.y1 = coords->y2;
 800c820:	f8ad 10a2 	strh.w	r1, [sp, #162]	; 0xa2
    edge_top_area.y2 = coords->y2;
 800c824:	f8ad 10a6 	strh.w	r1, [sp, #166]	; 0xa6
    fill_fp(&edge_top_area, mask, style->body.grad_color, opa);
 800c828:	4651      	mov	r1, sl
 800c82a:	47a0      	blx	r4
    mix = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800c82c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c82e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c830:	1afb      	subs	r3, r7, r3
    lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800c832:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800c836:	f8bd 209e 	ldrh.w	r2, [sp, #158]	; 0x9e
    mix = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800c83a:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c83e:	9807      	ldr	r0, [sp, #28]
    lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800c840:	fa1f fc88 	uxth.w	ip, r8
    mix = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800c844:	971f      	str	r7, [sp, #124]	; 0x7c
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c846:	f8dd e020 	ldr.w	lr, [sp, #32]
    lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800c84a:	eba2 020c 	sub.w	r2, r2, ip
    mix = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800c84e:	fbb3 f3f1 	udiv	r3, r3, r1
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c852:	b2db      	uxtb	r3, r3
    lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800c854:	b211      	sxth	r1, r2
 800c856:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 800c85a:	b29b      	uxth	r3, r3
 800c85c:	460f      	mov	r7, r1
 800c85e:	910a      	str	r1, [sp, #40]	; 0x28
 800c860:	b292      	uxth	r2, r2
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c862:	9904      	ldr	r1, [sp, #16]
    for(i = 0; i  < seg_size; i++) {
 800c864:	2f00      	cmp	r7, #0
 800c866:	fb12 f600 	smulbb	r6, r2, r0
 800c86a:	fb12 f501 	smulbb	r5, r2, r1
 800c86e:	fb03 6601 	mla	r6, r3, r1, r6
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c872:	9905      	ldr	r1, [sp, #20]
 800c874:	fb12 f40e 	smulbb	r4, r2, lr
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c878:	fb03 5500 	mla	r5, r3, r0, r5
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c87c:	fb12 f001 	smulbb	r0, r2, r1
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c880:	f3c6 2607 	ubfx	r6, r6, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c884:	fb03 4401 	mla	r4, r3, r1, r4
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c888:	f3c5 2507 	ubfx	r5, r5, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c88c:	fb03 010e 	mla	r1, r3, lr, r0
 800c890:	980d      	ldr	r0, [sp, #52]	; 0x34
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c892:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c896:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800c89a:	f366 0007 	bfi	r0, r6, #0, #8
 800c89e:	9102      	str	r1, [sp, #8]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c8a0:	fb12 f10e 	smulbb	r1, r2, lr
 800c8a4:	4606      	mov	r6, r0
 800c8a6:	9806      	ldr	r0, [sp, #24]
 800c8a8:	fb03 1900 	mla	r9, r3, r0, r1
 800c8ac:	fb12 f200 	smulbb	r2, r2, r0
 800c8b0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800c8b2:	f364 260f 	bfi	r6, r4, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c8b6:	9902      	ldr	r1, [sp, #8]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c8b8:	fb03 230e 	mla	r3, r3, lr, r2
 800c8bc:	f365 0007 	bfi	r0, r5, #0, #8
 800c8c0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800c8c4:	4605      	mov	r5, r0
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c8c6:	f3c1 2007 	ubfx	r0, r1, #8, #8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c8ca:	f3c9 2107 	ubfx	r1, r9, #8, #8
 800c8ce:	462c      	mov	r4, r5
 800c8d0:	f361 4617 	bfi	r6, r1, #16, #8
 800c8d4:	f360 240f 	bfi	r4, r0, #8, #8
 800c8d8:	f046 417f 	orr.w	r1, r6, #4278190080	; 0xff000000
 800c8dc:	f363 4417 	bfi	r4, r3, #16, #8
 800c8e0:	910d      	str	r1, [sp, #52]	; 0x34
 800c8e2:	f044 417f 	orr.w	r1, r4, #4278190080	; 0xff000000
 800c8e6:	910f      	str	r1, [sp, #60]	; 0x3c
 800c8e8:	f340 80e9 	ble.w	800cabe <lv_draw_rect_main_corner+0xc2a>
 800c8ec:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c8ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c8f0:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800c8f2:	1c70      	adds	r0, r6, #1
 800c8f4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800c8f6:	1e5f      	subs	r7, r3, #1
 800c8f8:	f8bd 1074 	ldrh.w	r1, [sp, #116]	; 0x74
 800c8fc:	f105 0e01 	add.w	lr, r5, #1
 800c900:	1e63      	subs	r3, r4, #1
 800c902:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c904:	4644      	mov	r4, r8
 800c906:	1a7f      	subs	r7, r7, r1
 800c908:	eb01 0800 	add.w	r8, r1, r0
 800c90c:	eba3 0901 	sub.w	r9, r3, r1
 800c910:	1b12      	subs	r2, r2, r4
 800c912:	448e      	add	lr, r1
 800c914:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800c916:	2300      	movs	r3, #0
 800c918:	eb06 000c 	add.w	r0, r6, ip
 800c91c:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 800c920:	eba1 060c 	sub.w	r6, r1, ip
 800c924:	490f      	ldr	r1, [pc, #60]	; (800c964 <lv_draw_rect_main_corner+0xad0>)
 800c926:	9303      	str	r3, [sp, #12]
 800c928:	4465      	add	r5, ip
 800c92a:	920b      	str	r2, [sp, #44]	; 0x2c
 800c92c:	fa0f f288 	sxth.w	r2, r8
 800c930:	f8d1 8000 	ldr.w	r8, [r1]
 800c934:	4619      	mov	r1, r3
 800c936:	fa0f f38e 	sxth.w	r3, lr
 800c93a:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800c93c:	9212      	str	r2, [sp, #72]	; 0x48
 800c93e:	b23a      	sxth	r2, r7
 800c940:	930c      	str	r3, [sp, #48]	; 0x30
 800c942:	fa0f f389 	sxth.w	r3, r9
 800c946:	eba4 040c 	sub.w	r4, r4, ip
 800c94a:	9214      	str	r2, [sp, #80]	; 0x50
 800c94c:	9316      	str	r3, [sp, #88]	; 0x58
 800c94e:	b2ab      	uxth	r3, r5
 800c950:	9311      	str	r3, [sp, #68]	; 0x44
 800c952:	b2a3      	uxth	r3, r4
 800c954:	9313      	str	r3, [sp, #76]	; 0x4c
 800c956:	b283      	uxth	r3, r0
 800c958:	9315      	str	r3, [sp, #84]	; 0x54
 800c95a:	b2b3      	uxth	r3, r6
 800c95c:	9318      	str	r3, [sp, #96]	; 0x60
 800c95e:	e003      	b.n	800c968 <lv_draw_rect_main_corner+0xad4>
 800c960:	080872f0 	.word	0x080872f0
 800c964:	080872f4 	.word	0x080872f4
        lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800c968:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800c96a:	9e03      	ldr	r6, [sp, #12]
 800c96c:	462a      	mov	r2, r5
 800c96e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c970:	f7fd fe78 	bl	800a664 <lv_draw_aa_get_opa>
 800c974:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c976:	b2b7      	uxth	r7, r6
 800c978:	1a28      	subs	r0, r5, r0
        px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask, aa_color_hor_top, aa_opa);
 800c97a:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 800c97e:	3601      	adds	r6, #1
 800c980:	19dc      	adds	r4, r3, r7
        lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800c982:	b2c5      	uxtb	r5, r0
 800c984:	9702      	str	r7, [sp, #8]
        px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask, aa_color_hor_top, aa_opa);
 800c986:	464b      	mov	r3, r9
 800c988:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800c98a:	b224      	sxth	r4, r4
 800c98c:	4652      	mov	r2, sl
 800c98e:	9500      	str	r5, [sp, #0]
 800c990:	4639      	mov	r1, r7
 800c992:	4620      	mov	r0, r4
 800c994:	9603      	str	r6, [sp, #12]
 800c996:	47c0      	blx	r8
 800c998:	9a13      	ldr	r2, [sp, #76]	; 0x4c
        px_fp(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask, aa_color_hor_top, aa_opa);
 800c99a:	4639      	mov	r1, r7
 800c99c:	9b02      	ldr	r3, [sp, #8]
 800c99e:	9500      	str	r5, [sp, #0]
 800c9a0:	1ad6      	subs	r6, r2, r3
 800c9a2:	464b      	mov	r3, r9
 800c9a4:	4652      	mov	r2, sl
 800c9a6:	b236      	sxth	r6, r6
 800c9a8:	4630      	mov	r0, r6
 800c9aa:	47c0      	blx	r8
        px_fp(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask, aa_color_hor_bottom, aa_opa);
 800c9ac:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 800c9b0:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800c9b2:	4630      	mov	r0, r6
 800c9b4:	464b      	mov	r3, r9
 800c9b6:	4652      	mov	r2, sl
 800c9b8:	4639      	mov	r1, r7
 800c9ba:	9500      	str	r5, [sp, #0]
 800c9bc:	47c0      	blx	r8
        px_fp(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask, aa_color_hor_bottom, aa_opa);
 800c9be:	4620      	mov	r0, r4
 800c9c0:	464b      	mov	r3, r9
 800c9c2:	4639      	mov	r1, r7
 800c9c4:	4652      	mov	r2, sl
 800c9c6:	9500      	str	r5, [sp, #0]
 800c9c8:	47c0      	blx	r8
        mix = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800c9ca:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c9cc:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c9ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c9d0:	9a02      	ldr	r2, [sp, #8]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c9d2:	f8bd 7010 	ldrh.w	r7, [sp, #16]
 800c9d6:	eb03 0902 	add.w	r9, r3, r2
 800c9da:	4633      	mov	r3, r6
        px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, aa_color_ver, aa_opa);
 800c9dc:	4652      	mov	r2, sl
 800c9de:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c9e0:	33ff      	adds	r3, #255	; 0xff
 800c9e2:	fa0f f989 	sxth.w	r9, r9
 800c9e6:	9500      	str	r5, [sp, #0]
 800c9e8:	930b      	str	r3, [sp, #44]	; 0x2c
 800c9ea:	9b07      	ldr	r3, [sp, #28]
        mix = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800c9ec:	fbb6 f4f1 	udiv	r4, r6, r1
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c9f0:	b2e4      	uxtb	r4, r4
        px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, aa_color_ver, aa_opa);
 800c9f2:	4649      	mov	r1, r9
 800c9f4:	f1c4 06ff 	rsb	r6, r4, #255	; 0xff
 800c9f8:	b2a4      	uxth	r4, r4
 800c9fa:	b2b6      	uxth	r6, r6
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c9fc:	fb16 fc07 	smulbb	ip, r6, r7
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800ca00:	f8bd 7014 	ldrh.w	r7, [sp, #20]
 800ca04:	fb16 fe07 	smulbb	lr, r6, r7
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800ca08:	f8bd 7018 	ldrh.w	r7, [sp, #24]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800ca0c:	fb04 cc03 	mla	ip, r4, r3, ip
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800ca10:	fb16 f307 	smulbb	r3, r6, r7
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800ca14:	9f08      	ldr	r7, [sp, #32]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800ca16:	f3cc 2c07 	ubfx	ip, ip, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800ca1a:	fb04 ee07 	mla	lr, r4, r7, lr
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800ca1e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ca20:	f36c 0b07 	bfi	fp, ip, #0, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800ca24:	f3ce 2e07 	ubfx	lr, lr, #8, #8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800ca28:	fb04 3307 	mla	r3, r4, r7, r3
 800ca2c:	f36e 2b0f 	bfi	fp, lr, #8, #8
 800ca30:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800ca34:	f363 4b17 	bfi	fp, r3, #16, #8
 800ca38:	f04b 4b7f 	orr.w	fp, fp, #4278190080	; 0xff000000
 800ca3c:	465b      	mov	r3, fp
 800ca3e:	47c0      	blx	r8
        px_fp(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask, aa_color_ver, aa_opa);
 800ca40:	4649      	mov	r1, r9
 800ca42:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
 800ca46:	465b      	mov	r3, fp
 800ca48:	4652      	mov	r2, sl
 800ca4a:	9500      	str	r5, [sp, #0]
 800ca4c:	4648      	mov	r0, r9
 800ca4e:	47c0      	blx	r8
 800ca50:	9918      	ldr	r1, [sp, #96]	; 0x60
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800ca52:	f8bd 201c 	ldrh.w	r2, [sp, #28]
        px_fp(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, aa_color_ver, aa_opa);
 800ca56:	4648      	mov	r0, r9
 800ca58:	9f02      	ldr	r7, [sp, #8]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800ca5a:	f8bd e020 	ldrh.w	lr, [sp, #32]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800ca5e:	fb16 f202 	smulbb	r2, r6, r2
 800ca62:	1bcf      	subs	r7, r1, r7
 800ca64:	9904      	ldr	r1, [sp, #16]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800ca66:	fb16 f30e 	smulbb	r3, r6, lr
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800ca6a:	f8bd e024 	ldrh.w	lr, [sp, #36]	; 0x24
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800ca6e:	fb04 2201 	mla	r2, r4, r1, r2
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800ca72:	9905      	ldr	r1, [sp, #20]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800ca74:	fb16 f60e 	smulbb	r6, r6, lr
 800ca78:	b23f      	sxth	r7, r7
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800ca7a:	fb04 3301 	mla	r3, r4, r1, r3
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800ca7e:	f3c2 2207 	ubfx	r2, r2, #8, #8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800ca82:	9906      	ldr	r1, [sp, #24]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800ca84:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800ca88:	f362 0b07 	bfi	fp, r2, #0, #8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800ca8c:	fb04 6401 	mla	r4, r4, r1, r6
 800ca90:	4652      	mov	r2, sl
 800ca92:	f363 2b0f 	bfi	fp, r3, #8, #8
 800ca96:	4639      	mov	r1, r7
 800ca98:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800ca9c:	9500      	str	r5, [sp, #0]
 800ca9e:	f364 4b17 	bfi	fp, r4, #16, #8
 800caa2:	465b      	mov	r3, fp
 800caa4:	47c0      	blx	r8
        px_fp(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask, aa_color_ver, aa_opa);
 800caa6:	4639      	mov	r1, r7
 800caa8:	465b      	mov	r3, fp
 800caaa:	9500      	str	r5, [sp, #0]
 800caac:	4652      	mov	r2, sl
 800caae:	980c      	ldr	r0, [sp, #48]	; 0x30
 800cab0:	47c0      	blx	r8
    for(i = 0; i  < seg_size; i++) {
 800cab2:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 800cab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cab8:	428b      	cmp	r3, r1
 800caba:	f73f af55 	bgt.w	800c968 <lv_draw_rect_main_corner+0xad4>
    if(LV_MATH_ABS(aa_p.x - aa_p.y) == seg_size) {
 800cabe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cac0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cac2:	1a9b      	subs	r3, r3, r2
 800cac4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	bfb8      	it	lt
 800caca:	425b      	neglt	r3, r3
 800cacc:	4293      	cmp	r3, r2
 800cace:	d022      	beq.n	800cb16 <lv_draw_rect_main_corner+0xc82>
}
 800cad0:	b031      	add	sp, #196	; 0xc4
 800cad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cad6:	f9bd 509e 	ldrsh.w	r5, [sp, #158]	; 0x9e
 800cada:	e413      	b.n	800c304 <lv_draw_rect_main_corner+0x470>
            if(mcolor.full == gcolor.full) act_color = mcolor;
 800cadc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cade:	9318      	str	r3, [sp, #96]	; 0x60
 800cae0:	e45d      	b.n	800c39e <lv_draw_rect_main_corner+0x50a>
            for(i = 0; i  < seg_size; i++) {
 800cae2:	46c1      	mov	r9, r8
 800cae4:	9d22      	ldr	r5, [sp, #136]	; 0x88
 800cae6:	e40b      	b.n	800c300 <lv_draw_rect_main_corner+0x46c>
    if(mcolor.full == gcolor.full) act_color = mcolor;
 800cae8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800caea:	9318      	str	r3, [sp, #96]	; 0x60
 800caec:	e630      	b.n	800c750 <lv_draw_rect_main_corner+0x8bc>
    fill_fp(&edge_top_area, mask, act_color, opa);
 800caee:	4b4c      	ldr	r3, [pc, #304]	; (800cc20 <lv_draw_rect_main_corner+0xd8c>)
 800caf0:	4651      	mov	r1, sl
 800caf2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800caf4:	a828      	add	r0, sp, #160	; 0xa0
 800caf6:	681f      	ldr	r7, [r3, #0]
 800caf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cafa:	47b8      	blx	r7
    if(edge_top_area.y1 != mid_top_area.y1) {
 800cafc:	f9bd 20aa 	ldrsh.w	r2, [sp, #170]	; 0xaa
 800cb00:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	; 0xa2
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d0ef      	beq.n	800cae8 <lv_draw_rect_main_corner+0xc54>
        if(mcolor.full == gcolor.full) act_color = mcolor;
 800cb08:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cb0a:	9318      	str	r3, [sp, #96]	; 0x60
 800cb0c:	e5e1      	b.n	800c6d2 <lv_draw_rect_main_corner+0x83e>
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t) style->body.opa * opa_scale) >> 8;
 800cb0e:	7b8b      	ldrb	r3, [r1, #14]
 800cb10:	9317      	str	r3, [sp, #92]	; 0x5c
 800cb12:	f7ff b9d8 	b.w	800bec6 <lv_draw_rect_main_corner+0x32>
        mix = (uint32_t)((uint32_t)(out_x_last) * 255) / height;
 800cb16:	991d      	ldr	r1, [sp, #116]	; 0x74
        px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask, aa_color_hor_bottom, aa_opa);
 800cb18:	4a42      	ldr	r2, [pc, #264]	; (800cc24 <lv_draw_rect_main_corner+0xd90>)
        mix = (uint32_t)((uint32_t)(out_x_last) * 255) / height;
 800cb1a:	ebc1 2301 	rsb	r3, r1, r1, lsl #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800cb1e:	f8dd c014 	ldr.w	ip, [sp, #20]
        px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask, aa_color_hor_bottom, aa_opa);
 800cb22:	b289      	uxth	r1, r1
 800cb24:	6812      	ldr	r2, [r2, #0]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800cb26:	9e04      	ldr	r6, [sp, #16]
 800cb28:	4608      	mov	r0, r1
        lv_opa_t aa_opa = opa >> 1;
 800cb2a:	9917      	ldr	r1, [sp, #92]	; 0x5c
        px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask, aa_color_hor_bottom, aa_opa);
 800cb2c:	9203      	str	r2, [sp, #12]
        lv_opa_t aa_opa = opa >> 1;
 800cb2e:	ea4f 0851 	mov.w	r8, r1, lsr #1
        px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask, aa_color_hor_bottom, aa_opa);
 800cb32:	9921      	ldr	r1, [sp, #132]	; 0x84
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800cb34:	9f08      	ldr	r7, [sp, #32]
 800cb36:	4401      	add	r1, r0
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800cb38:	9d07      	ldr	r5, [sp, #28]
 800cb3a:	9002      	str	r0, [sp, #8]
 800cb3c:	460a      	mov	r2, r1
 800cb3e:	991e      	ldr	r1, [sp, #120]	; 0x78
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800cb40:	f8dd e018 	ldr.w	lr, [sp, #24]
 800cb44:	4401      	add	r1, r0
 800cb46:	fa0f fb82 	sxth.w	fp, r2
 800cb4a:	f8cd 8000 	str.w	r8, [sp]
 800cb4e:	fa0f f981 	sxth.w	r9, r1
        mix = (uint32_t)((uint32_t)(out_x_last) * 255) / height;
 800cb52:	990e      	ldr	r1, [sp, #56]	; 0x38
 800cb54:	fbb3 f3f1 	udiv	r3, r3, r1
 800cb58:	b2db      	uxtb	r3, r3
        px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask, aa_color_hor_bottom, aa_opa);
 800cb5a:	4649      	mov	r1, r9
 800cb5c:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 800cb60:	b29b      	uxth	r3, r3
 800cb62:	b292      	uxth	r2, r2
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800cb64:	fb12 f00c 	smulbb	r0, r2, ip
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800cb68:	fb12 f406 	smulbb	r4, r2, r6
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800cb6c:	fb03 0007 	mla	r0, r3, r7, r0
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800cb70:	fb03 4405 	mla	r4, r3, r5, r4
 800cb74:	fb12 f505 	smulbb	r5, r2, r5
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800cb78:	f3c0 2007 	ubfx	r0, r0, #8, #8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800cb7c:	fb03 5506 	mla	r5, r3, r6, r5
 800cb80:	f3c4 2407 	ubfx	r4, r4, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800cb84:	fb12 f607 	smulbb	r6, r2, r7
 800cb88:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800cb8a:	9004      	str	r0, [sp, #16]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800cb8c:	f3c5 2507 	ubfx	r5, r5, #8, #8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800cb90:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb92:	f364 0707 	bfi	r7, r4, #0, #8
 800cb96:	fb12 f40e 	smulbb	r4, r2, lr
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800cb9a:	fb03 660c 	mla	r6, r3, ip, r6
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800cb9e:	fb12 f200 	smulbb	r2, r2, r0
 800cba2:	fb03 4400 	mla	r4, r3, r0, r4
 800cba6:	9804      	ldr	r0, [sp, #16]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800cba8:	f3c6 2607 	ubfx	r6, r6, #8, #8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800cbac:	fb03 220e 	mla	r2, r3, lr, r2
 800cbb0:	f360 270f 	bfi	r7, r0, #8, #8
 800cbb4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800cbb6:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800cbba:	f365 0007 	bfi	r0, r5, #0, #8
 800cbbe:	f364 4717 	bfi	r7, r4, #16, #8
 800cbc2:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800cbc6:	f366 200f 	bfi	r0, r6, #8, #8
 800cbca:	4652      	mov	r2, sl
 800cbcc:	9e03      	ldr	r6, [sp, #12]
 800cbce:	463b      	mov	r3, r7
 800cbd0:	4605      	mov	r5, r0
 800cbd2:	4658      	mov	r0, fp
 800cbd4:	970d      	str	r7, [sp, #52]	; 0x34
 800cbd6:	47b0      	blx	r6
        px_fp(lb_origo.x + LV_CIRC_OCT4_X(aa_p), lb_origo.y + LV_CIRC_OCT4_Y(aa_p), mask, aa_color_hor_bottom, aa_opa);
 800cbd8:	9902      	ldr	r1, [sp, #8]
 800cbda:	f364 4517 	bfi	r5, r4, #16, #8
 800cbde:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800cbe0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cbe2:	462f      	mov	r7, r5
 800cbe4:	1a52      	subs	r2, r2, r1
 800cbe6:	f8cd 8000 	str.w	r8, [sp]
 800cbea:	4649      	mov	r1, r9
 800cbec:	b214      	sxth	r4, r2
 800cbee:	4652      	mov	r2, sl
 800cbf0:	4620      	mov	r0, r4
 800cbf2:	47b0      	blx	r6
        px_fp(lt_origo.x + LV_CIRC_OCT6_X(aa_p), lt_origo.y + LV_CIRC_OCT6_Y(aa_p), mask, aa_color_hor_top, aa_opa);
 800cbf4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cbf6:	9a02      	ldr	r2, [sp, #8]
 800cbf8:	4620      	mov	r0, r4
 800cbfa:	f8cd 8000 	str.w	r8, [sp]
 800cbfe:	1a9d      	subs	r5, r3, r2
 800cc00:	463b      	mov	r3, r7
 800cc02:	4652      	mov	r2, sl
 800cc04:	b22d      	sxth	r5, r5
 800cc06:	4629      	mov	r1, r5
 800cc08:	47b0      	blx	r6
        px_fp(rt_origo.x + LV_CIRC_OCT8_X(aa_p), rt_origo.y + LV_CIRC_OCT8_Y(aa_p), mask, aa_color_hor_top, aa_opa);
 800cc0a:	463b      	mov	r3, r7
 800cc0c:	4629      	mov	r1, r5
 800cc0e:	4658      	mov	r0, fp
 800cc10:	4652      	mov	r2, sl
 800cc12:	f8cd 8000 	str.w	r8, [sp]
 800cc16:	47b0      	blx	r6
}
 800cc18:	b031      	add	sp, #196	; 0xc4
 800cc1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc1e:	bf00      	nop
 800cc20:	080872f0 	.word	0x080872f0
 800cc24:	080872f4 	.word	0x080872f4

0800cc28 <lv_draw_rect>:
{
 800cc28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc2c:	b0ab      	sub	sp, #172	; 0xac
 800cc2e:	88c4      	ldrh	r4, [r0, #6]
 800cc30:	8845      	ldrh	r5, [r0, #2]
 800cc32:	af02      	add	r7, sp, #8
 800cc34:	3401      	adds	r4, #1
 800cc36:	1b64      	subs	r4, r4, r5
 800cc38:	b224      	sxth	r4, r4
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 800cc3a:	2c00      	cmp	r4, #0
 800cc3c:	dd25      	ble.n	800cc8a <lv_draw_rect+0x62>
    return area_p->x2 - area_p->x1 + 1;
 800cc3e:	8886      	ldrh	r6, [r0, #4]
 800cc40:	f8b0 e000 	ldrh.w	lr, [r0]
 800cc44:	1c75      	adds	r5, r6, #1
 800cc46:	eba5 050e 	sub.w	r5, r5, lr
 800cc4a:	b22d      	sxth	r5, r5
 800cc4c:	2d00      	cmp	r5, #0
 800cc4e:	dd1c      	ble.n	800cc8a <lv_draw_rect+0x62>
 800cc50:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc52:	4692      	mov	sl, r2
    if(style->body.shadow.width != 0) {
 800cc54:	f9b2 301c 	ldrsh.w	r3, [r2, #28]
 800cc58:	66f9      	str	r1, [r7, #108]	; 0x6c
 800cc5a:	6678      	str	r0, [r7, #100]	; 0x64
 800cc5c:	b9cb      	cbnz	r3, 800cc92 <lv_draw_rect+0x6a>
    if(style->body.empty == 0 && style->body.opa >= LV_OPA_MIN) {
 800cc5e:	f89a 3026 	ldrb.w	r3, [sl, #38]	; 0x26
 800cc62:	07da      	lsls	r2, r3, #31
 800cc64:	d405      	bmi.n	800cc72 <lv_draw_rect+0x4a>
 800cc66:	f89a 800e 	ldrb.w	r8, [sl, #14]
 800cc6a:	f1b8 0f0f 	cmp.w	r8, #15
 800cc6e:	f200 8137 	bhi.w	800cee0 <lv_draw_rect+0x2b8>
    if(style->body.border.width != 0 && style->body.border.part != LV_BORDER_NONE && style->body.border.opa >= LV_OPA_MIN) {
 800cc72:	f9ba 3014 	ldrsh.w	r3, [sl, #20]
 800cc76:	b143      	cbz	r3, 800cc8a <lv_draw_rect+0x62>
 800cc78:	f89a 4016 	ldrb.w	r4, [sl, #22]
 800cc7c:	b12c      	cbz	r4, 800cc8a <lv_draw_rect+0x62>
 800cc7e:	f89a 9017 	ldrb.w	r9, [sl, #23]
 800cc82:	f1b9 0f0f 	cmp.w	r9, #15
 800cc86:	f200 81f1 	bhi.w	800d06c <lv_draw_rect+0x444>
}
 800cc8a:	37a4      	adds	r7, #164	; 0xa4
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(r >= (w >> 1)) {
 800cc92:	106b      	asrs	r3, r5, #1
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800cc94:	8995      	ldrh	r5, [r2, #12]
    if(r >= (w >> 1)) {
 800cc96:	429d      	cmp	r5, r3
 800cc98:	db04      	blt.n	800cca4 <lv_draw_rect+0x7c>
        if(r != 0) r--;
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	f000 84bf 	beq.w	800d61e <lv_draw_rect+0x9f6>
 800cca0:	1e5d      	subs	r5, r3, #1
 800cca2:	b2ad      	uxth	r5, r5
    if(r >= (h >> 1)) {
 800cca4:	1064      	asrs	r4, r4, #1
 800cca6:	42ac      	cmp	r4, r5
 800cca8:	dc04      	bgt.n	800ccb4 <lv_draw_rect+0x8c>
        if(r != 0) r--;
 800ccaa:	2c00      	cmp	r4, #0
 800ccac:	f000 84c0 	beq.w	800d630 <lv_draw_rect+0xa08>
 800ccb0:	3c01      	subs	r4, #1
 800ccb2:	b2a5      	uxth	r5, r4
    if(r > 0) r -= LV_ANTIALIAS;
 800ccb4:	b10d      	cbz	r5, 800ccba <lv_draw_rect+0x92>
 800ccb6:	3d01      	subs	r5, #1
 800ccb8:	b2ad      	uxth	r5, r5
    memcpy(dest, src, sizeof(lv_area_t));
 800ccba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ccbc:	f107 0378 	add.w	r3, r7, #120	; 0x78
    area_tmp.x1 += radius;
 800ccc0:	44ae      	add	lr, r5
    area_tmp.x2 -= radius;
 800ccc2:	1b76      	subs	r6, r6, r5
 800ccc4:	6810      	ldr	r0, [r2, #0]
 800ccc6:	6851      	ldr	r1, [r2, #4]
 800ccc8:	c303      	stmia	r3!, {r0, r1}
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800ccca:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800ccce:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
    area_tmp.x1 += radius;
 800ccd0:	f8a7 e078 	strh.w	lr, [r7, #120]	; 0x78
    area_tmp.x2 -= radius;
 800ccd4:	f8a7 607c 	strh.w	r6, [r7, #124]	; 0x7c
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800ccd8:	f002 fede 	bl	800fa98 <lv_area_is_in>
 800ccdc:	2800      	cmp	r0, #0
 800ccde:	d1be      	bne.n	800cc5e <lv_draw_rect+0x36>
 800cce0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800cce2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800cce6:	6808      	ldr	r0, [r1, #0]
 800cce8:	6849      	ldr	r1, [r1, #4]
 800ccea:	c303      	stmia	r3!, {r0, r1}
    area_tmp.y1 += radius;
 800ccec:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800ccf0:	f107 0178 	add.w	r1, r7, #120	; 0x78
    area_tmp.y2 -= radius;
 800ccf4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
    area_tmp.y1 += radius;
 800ccf8:	442a      	add	r2, r5
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800ccfa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
    area_tmp.y2 -= radius;
 800ccfc:	1b5d      	subs	r5, r3, r5
    area_tmp.y1 += radius;
 800ccfe:	f8a7 207a 	strh.w	r2, [r7, #122]	; 0x7a
    area_tmp.y2 -= radius;
 800cd02:	f8a7 507e 	strh.w	r5, [r7, #126]	; 0x7e
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800cd06:	f002 fec7 	bl	800fa98 <lv_area_is_in>
 800cd0a:	2800      	cmp	r0, #0
 800cd0c:	d1a7      	bne.n	800cc5e <lv_draw_rect+0x36>
    if(style->body.shadow.type == LV_SHADOW_FULL) {
 800cd0e:	f89a 101e 	ldrb.w	r1, [sl, #30]
 800cd12:	2901      	cmp	r1, #1
 800cd14:	f001 824a 	beq.w	800e1ac <lv_draw_rect+0x1584>
    } else if(style->body.shadow.type == LV_SHADOW_BOTTOM) {
 800cd18:	2900      	cmp	r1, #0
 800cd1a:	d1a0      	bne.n	800cc5e <lv_draw_rect+0x36>
    return area_p->x2 - area_p->x1 + 1;
 800cd1c:	6e78      	ldr	r0, [r7, #100]	; 0x64
{
 800cd1e:	f8c7 d020 	str.w	sp, [r7, #32]
 800cd22:	8882      	ldrh	r2, [r0, #4]
 800cd24:	8801      	ldrh	r1, [r0, #0]
 800cd26:	3201      	adds	r2, #1
    return area_p->y2 - area_p->y1 + 1;
 800cd28:	88c3      	ldrh	r3, [r0, #6]
 800cd2a:	8840      	ldrh	r0, [r0, #2]
    return area_p->x2 - area_p->x1 + 1;
 800cd2c:	1a52      	subs	r2, r2, r1
    return area_p->y2 - area_p->y1 + 1;
 800cd2e:	3301      	adds	r3, #1
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800cd30:	f8ba 100c 	ldrh.w	r1, [sl, #12]
    if(r >= (w >> 1)) {
 800cd34:	f342 024e 	sbfx	r2, r2, #1, #15
 800cd38:	1a1b      	subs	r3, r3, r0
    lv_coord_t swidth = style->body.shadow.width;
 800cd3a:	f9ba 501c 	ldrsh.w	r5, [sl, #28]
    if(r >= (w >> 1)) {
 800cd3e:	4291      	cmp	r1, r2
 800cd40:	b21b      	sxth	r3, r3
 800cd42:	db05      	blt.n	800cd50 <lv_draw_rect+0x128>
        r = (w >> 1);
 800cd44:	b292      	uxth	r2, r2
        if(r != 0) r--;
 800cd46:	2a00      	cmp	r2, #0
 800cd48:	f001 8226 	beq.w	800e198 <lv_draw_rect+0x1570>
 800cd4c:	3a01      	subs	r2, #1
 800cd4e:	b291      	uxth	r1, r2
    if(r >= (h >> 1)) {
 800cd50:	105b      	asrs	r3, r3, #1
 800cd52:	428b      	cmp	r3, r1
 800cd54:	dc05      	bgt.n	800cd62 <lv_draw_rect+0x13a>
        r = (h >> 1);
 800cd56:	b29b      	uxth	r3, r3
        if(r != 0) r--;
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	f001 8221 	beq.w	800e1a0 <lv_draw_rect+0x1578>
 800cd5e:	3b01      	subs	r3, #1
 800cd60:	b299      	uxth	r1, r3
    if(r > 0) r -= LV_ANTIALIAS;
 800cd62:	2900      	cmp	r1, #0
 800cd64:	f001 821c 	beq.w	800e1a0 <lv_draw_rect+0x1578>
 800cd68:	1c8b      	adds	r3, r1, #2
 800cd6a:	b29c      	uxth	r4, r3
 800cd6c:	b223      	sxth	r3, r4
 800cd6e:	643b      	str	r3, [r7, #64]	; 0x40
 800cd70:	3301      	adds	r3, #1
 800cd72:	005b      	lsls	r3, r3, #1
    lv_coord_t curve_x[radius + 1];             /*Stores the 'x' coordinates of a quarter circle.*/
 800cd74:	3308      	adds	r3, #8
    swidth += LV_ANTIALIAS;
 800cd76:	b2ad      	uxth	r5, r5
    lv_circ_init(&circ, &circ_tmp, radius);
 800cd78:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800cd7c:	f107 0288 	add.w	r2, r7, #136	; 0x88
    lv_coord_t curve_x[radius + 1];             /*Stores the 'x' coordinates of a quarter circle.*/
 800cd80:	f023 0307 	bic.w	r3, r3, #7
    swidth += LV_ANTIALIAS;
 800cd84:	1c6e      	adds	r6, r5, #1
    lv_circ_init(&circ, &circ_tmp, radius);
 800cd86:	4608      	mov	r0, r1
 800cd88:	4691      	mov	r9, r2
    lv_coord_t curve_x[radius + 1];             /*Stores the 'x' coordinates of a quarter circle.*/
 800cd8a:	ebad 0d03 	sub.w	sp, sp, r3
    swidth += LV_ANTIALIAS;
 800cd8e:	b233      	sxth	r3, r6
    lv_circ_init(&circ, &circ_tmp, radius);
 800cd90:	4611      	mov	r1, r2
 800cd92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    swidth += LV_ANTIALIAS;
 800cd94:	65bb      	str	r3, [r7, #88]	; 0x58
    lv_coord_t curve_x[radius + 1];             /*Stores the 'x' coordinates of a quarter circle.*/
 800cd96:	ab02      	add	r3, sp, #8
    lv_circ_init(&circ, &circ_tmp, radius);
 800cd98:	6138      	str	r0, [r7, #16]
    lv_coord_t curve_x[radius + 1];             /*Stores the 'x' coordinates of a quarter circle.*/
 800cd9a:	461e      	mov	r6, r3
 800cd9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    lv_circ_init(&circ, &circ_tmp, radius);
 800cd9e:	f002 fe99 	bl	800fad4 <lv_circ_init>
 800cda2:	46b0      	mov	r8, r6
 800cda4:	693e      	ldr	r6, [r7, #16]
 800cda6:	e00a      	b.n	800cdbe <lv_draw_rect+0x196>
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 800cda8:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
        lv_circ_next(&circ, &circ_tmp);
 800cdac:	4630      	mov	r0, r6
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 800cdae:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 800cdb2:	f828 3012 	strh.w	r3, [r8, r2, lsl #1]
        curve_x[LV_CIRC_OCT2_Y(circ)] = LV_CIRC_OCT2_X(circ);
 800cdb6:	f828 2013 	strh.w	r2, [r8, r3, lsl #1]
        lv_circ_next(&circ, &circ_tmp);
 800cdba:	f002 fe9f 	bl	800fafc <lv_circ_next>
    while(lv_circ_cont(&circ)) {
 800cdbe:	4630      	mov	r0, r6
 800cdc0:	f002 fe92 	bl	800fae8 <lv_circ_cont>
        lv_circ_next(&circ, &circ_tmp);
 800cdc4:	4649      	mov	r1, r9
    while(lv_circ_cont(&circ)) {
 800cdc6:	2800      	cmp	r0, #0
 800cdc8:	d1ee      	bne.n	800cda8 <lv_draw_rect+0x180>
    lv_opa_t line_1d_blur[swidth];
 800cdca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t) style->body.opa * opa_scale) >> 8;
 800cdcc:	f89a 000e 	ldrb.w	r0, [sl, #14]
    lv_opa_t line_1d_blur[swidth];
 800cdd0:	3307      	adds	r3, #7
 800cdd2:	f023 0307 	bic.w	r3, r3, #7
 800cdd6:	ebad 0d03 	sub.w	sp, sp, r3
 800cdda:	ab02      	add	r3, sp, #8
 800cddc:	62fb      	str	r3, [r7, #44]	; 0x2c
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t) style->body.opa * opa_scale) >> 8;
 800cdde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cde0:	2bff      	cmp	r3, #255	; 0xff
 800cde2:	d004      	beq.n	800cdee <lv_draw_rect+0x1c6>
 800cde4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cde6:	fb00 f003 	mul.w	r0, r0, r3
 800cdea:	f3c0 2007 	ubfx	r0, r0, #8, #8
    for(col = 0; col < swidth; col++) {
 800cdee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	dd0d      	ble.n	800ce10 <lv_draw_rect+0x1e8>
 800cdf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cdf6:	6dbe      	ldr	r6, [r7, #88]	; 0x58
 800cdf8:	4415      	add	r5, r2
 800cdfa:	1e51      	subs	r1, r2, #1
 800cdfc:	fb10 f206 	smulbb	r2, r0, r6
        line_1d_blur[col] = (uint32_t)((uint32_t)(swidth - col) * opa / 2) / (swidth);
 800ce00:	0853      	lsrs	r3, r2, #1
 800ce02:	1a12      	subs	r2, r2, r0
 800ce04:	fbb3 f3f6 	udiv	r3, r3, r6
 800ce08:	f801 3f01 	strb.w	r3, [r1, #1]!
    for(col = 0; col < swidth; col++) {
 800ce0c:	428d      	cmp	r5, r1
 800ce0e:	d1f7      	bne.n	800ce00 <lv_draw_rect+0x1d8>
    ofs_l.x = coords->x1 + radius;
 800ce10:	6e79      	ldr	r1, [r7, #100]	; 0x64
    ofs_l.y = coords->y2 - radius + 1 - LV_ANTIALIAS;
 800ce12:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
    ofs_l.x = coords->x1 + radius;
 800ce16:	880a      	ldrh	r2, [r1, #0]
    ofs_l.y = coords->y2 - radius + 1 - LV_ANTIALIAS;
 800ce18:	4618      	mov	r0, r3
 800ce1a:	61fb      	str	r3, [r7, #28]
    ofs_l.x = coords->x1 + radius;
 800ce1c:	4422      	add	r2, r4
    ofs_r.x = coords->x2 - radius;
 800ce1e:	888b      	ldrh	r3, [r1, #4]
    ofs_l.y = coords->y2 - radius + 1 - LV_ANTIALIAS;
 800ce20:	1b01      	subs	r1, r0, r4
    ofs_l.x = coords->x1 + radius;
 800ce22:	b292      	uxth	r2, r2
    ofs_r.x = coords->x2 - radius;
 800ce24:	1b1c      	subs	r4, r3, r4
    ofs_l.y = coords->y2 - radius + 1 - LV_ANTIALIAS;
 800ce26:	b28b      	uxth	r3, r1
    ofs_l.x = coords->x1 + radius;
 800ce28:	62ba      	str	r2, [r7, #40]	; 0x28
    ofs_l.y = coords->y2 - radius + 1 - LV_ANTIALIAS;
 800ce2a:	63bb      	str	r3, [r7, #56]	; 0x38
    ofs_l.x = coords->x1 + radius;
 800ce2c:	b213      	sxth	r3, r2
 800ce2e:	64fb      	str	r3, [r7, #76]	; 0x4c
    ofs_r.x = coords->x2 - radius;
 800ce30:	b2a3      	uxth	r3, r4
 800ce32:	627b      	str	r3, [r7, #36]	; 0x24
    for(col = 0; col <= radius; col++) {
 800ce34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	f2c1 812a 	blt.w	800e090 <lv_draw_rect+0x1468>
        point_l.x = ofs_l.x - col ;
 800ce3c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
        point_r.x = ofs_r.x + col;
 800ce3e:	2200      	movs	r2, #0
        point_l.y = ofs_l.y + curve_x[col];
 800ce40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        point_l.x = ofs_l.x - col ;
 800ce42:	6538      	str	r0, [r7, #80]	; 0x50
        point_r.x = ofs_r.x + col;
 800ce44:	4690      	mov	r8, r2
        point_l.y = ofs_l.y + curve_x[col];
 800ce46:	881b      	ldrh	r3, [r3, #0]
 800ce48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
        point_r.x = ofs_r.x + col;
 800ce4a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
        point_l.y = ofs_l.y + curve_x[col];
 800ce4c:	4403      	add	r3, r0
        point_r.x = ofs_r.x + col;
 800ce4e:	647a      	str	r2, [r7, #68]	; 0x44
 800ce50:	b221      	sxth	r1, r4
 800ce52:	6aba      	ldr	r2, [r7, #40]	; 0x28
        point_l.y = ofs_l.y + curve_x[col];
 800ce54:	b21b      	sxth	r3, r3
 800ce56:	f8c7 b018 	str.w	fp, [r7, #24]
 800ce5a:	3a01      	subs	r2, #1
 800ce5c:	f8c7 a05c 	str.w	sl, [r7, #92]	; 0x5c
 800ce60:	657b      	str	r3, [r7, #84]	; 0x54
 800ce62:	4623      	mov	r3, r4
 800ce64:	f8d7 b02c 	ldr.w	fp, [r7, #44]	; 0x2c
 800ce68:	468a      	mov	sl, r1
 800ce6a:	3301      	adds	r3, #1
 800ce6c:	637a      	str	r2, [r7, #52]	; 0x34
 800ce6e:	633b      	str	r3, [r7, #48]	; 0x30
        for(d = 0; d < swidth; d++) {
 800ce70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce72:	fa0f f888 	sxth.w	r8, r8
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	f340 8490 	ble.w	800d79c <lv_draw_rect+0xb74>
 800ce7c:	4b79      	ldr	r3, [pc, #484]	; (800d064 <lv_draw_rect+0x43c>)
 800ce7e:	f04f 0900 	mov.w	r9, #0
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	663b      	str	r3, [r7, #96]	; 0x60
 800ce86:	464b      	mov	r3, r9
 800ce88:	e017      	b.n	800ceba <lv_draw_rect+0x292>
                px_opa = line_1d_blur[d];
 800ce8a:	f81b 3003 	ldrb.w	r3, [fp, r3]
 800ce8e:	66bb      	str	r3, [r7, #104]	; 0x68
            px_fp(point_l.x, point_l.y, mask, style->body.shadow.color, px_opa);
 800ce90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce92:	f109 0901 	add.w	r9, r9, #1
 800ce96:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ce98:	699b      	ldr	r3, [r3, #24]
 800ce9a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ce9c:	9100      	str	r1, [sp, #0]
 800ce9e:	4631      	mov	r1, r6
 800cea0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800cea2:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 800cea4:	47a8      	blx	r5
            if(point_r.x > ofs_l.x) {
 800cea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cea8:	4553      	cmp	r3, sl
 800ceaa:	f2c0 83c4 	blt.w	800d636 <lv_draw_rect+0xa0e>
        for(d = 0; d < swidth; d++) {
 800ceae:	3401      	adds	r4, #1
 800ceb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ceb2:	b2a3      	uxth	r3, r4
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	f340 8471 	ble.w	800d79c <lv_draw_rect+0xb74>
 800ceba:	fa1f f489 	uxth.w	r4, r9
 800cebe:	6d79      	ldr	r1, [r7, #84]	; 0x54
                px_opa = (uint16_t)((uint16_t)line_1d_blur[d] + line_1d_blur[d - diff]) >> 1;
 800cec0:	eba3 0208 	sub.w	r2, r3, r8
 800cec4:	1866      	adds	r6, r4, r1
 800cec6:	b236      	sxth	r6, r6
            if(diff == 0) {
 800cec8:	f1b8 0f00 	cmp.w	r8, #0
 800cecc:	d0dd      	beq.n	800ce8a <lv_draw_rect+0x262>
                px_opa = (uint16_t)((uint16_t)line_1d_blur[d] + line_1d_blur[d - diff]) >> 1;
 800cece:	f81b 3003 	ldrb.w	r3, [fp, r3]
 800ced2:	f81b 5002 	ldrb.w	r5, [fp, r2]
 800ced6:	441d      	add	r5, r3
 800ced8:	f3c5 0347 	ubfx	r3, r5, #1, #8
 800cedc:	66bb      	str	r3, [r7, #104]	; 0x68
 800cede:	e7d7      	b.n	800ce90 <lv_draw_rect+0x268>
 800cee0:	6e79      	ldr	r1, [r7, #100]	; 0x64
    uint16_t radius = style->body.radius;
 800cee2:	f9ba 600c 	ldrsh.w	r6, [sl, #12]
 800cee6:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 800ceea:	f9b1 4000 	ldrsh.w	r4, [r1]
    return area_p->x2 - area_p->x1 + 1;
 800ceee:	1c68      	adds	r0, r5, #1
 800cef0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
    return area_p->y2 - area_p->y1 + 1;
 800cef4:	f8b1 c002 	ldrh.w	ip, [r1, #2]
 800cef8:	b2b1      	uxth	r1, r6
    return area_p->x2 - area_p->x1 + 1;
 800cefa:	1b00      	subs	r0, r0, r4
    return area_p->y2 - area_p->y1 + 1;
 800cefc:	b29a      	uxth	r2, r3
    return area_p->x2 - area_p->x1 + 1;
 800cefe:	b200      	sxth	r0, r0
    return area_p->y2 - area_p->y1 + 1;
 800cf00:	f102 0e01 	add.w	lr, r2, #1
 800cf04:	663a      	str	r2, [r7, #96]	; 0x60
    return area_p->x2 - area_p->x1 + 1;
 800cf06:	66b8      	str	r0, [r7, #104]	; 0x68
    return area_p->y2 - area_p->y1 + 1;
 800cf08:	ebae 090c 	sub.w	r9, lr, ip
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t) style->body.opa * opa_scale) >> 8;
 800cf0c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    lv_color_t mcolor = style->body.main_color;
 800cf0e:	f8da 2004 	ldr.w	r2, [sl, #4]
 800cf12:	fa0f f989 	sxth.w	r9, r9
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t) style->body.opa * opa_scale) >> 8;
 800cf16:	28ff      	cmp	r0, #255	; 0xff
    lv_color_t gcolor = style->body.grad_color;
 800cf18:	f8da e008 	ldr.w	lr, [sl, #8]
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t) style->body.opa * opa_scale) >> 8;
 800cf1c:	d003      	beq.n	800cf26 <lv_draw_rect+0x2fe>
 800cf1e:	fb08 f800 	mul.w	r8, r8, r0
 800cf22:	f3c8 2807 	ubfx	r8, r8, #8, #8
    if(r >= (w >> 1)) {
 800cf26:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800cf28:	1040      	asrs	r0, r0, #1
 800cf2a:	4281      	cmp	r1, r0
 800cf2c:	db05      	blt.n	800cf3a <lv_draw_rect+0x312>
        r = (w >> 1);
 800cf2e:	b281      	uxth	r1, r0
        if(r != 0) r--;
 800cf30:	2900      	cmp	r1, #0
 800cf32:	f000 8781 	beq.w	800de38 <lv_draw_rect+0x1210>
 800cf36:	3901      	subs	r1, #1
 800cf38:	b289      	uxth	r1, r1
    if(r >= (h >> 1)) {
 800cf3a:	ea4f 0069 	mov.w	r0, r9, asr #1
 800cf3e:	4288      	cmp	r0, r1
 800cf40:	dc03      	bgt.n	800cf4a <lv_draw_rect+0x322>
        r = (h >> 1);
 800cf42:	b281      	uxth	r1, r0
        if(r != 0) r--;
 800cf44:	b121      	cbz	r1, 800cf50 <lv_draw_rect+0x328>
 800cf46:	3901      	subs	r1, #1
 800cf48:	b289      	uxth	r1, r1
    if(r > 0) r -= LV_ANTIALIAS;
 800cf4a:	b109      	cbz	r1, 800cf50 <lv_draw_rect+0x328>
 800cf4c:	3901      	subs	r1, #1
 800cf4e:	b289      	uxth	r1, r1
    if(radius > height / 2)  return;
 800cf50:	f1b9 0f00 	cmp.w	r9, #0
 800cf54:	4648      	mov	r0, r9
 800cf56:	bfb8      	it	lt
 800cf58:	f109 0001 	addlt.w	r0, r9, #1
 800cf5c:	ebb1 0f60 	cmp.w	r1, r0, asr #1
 800cf60:	dc76      	bgt.n	800d050 <lv_draw_rect+0x428>
    if(mcolor.full == gcolor.full) {
 800cf62:	4572      	cmp	r2, lr
    work_area.x1 = coords->x1;
 800cf64:	f8a7 4098 	strh.w	r4, [r7, #152]	; 0x98
    work_area.x2 = coords->x2;
 800cf68:	f8a7 509c 	strh.w	r5, [r7, #156]	; 0x9c
    if(mcolor.full == gcolor.full) {
 800cf6c:	f000 8778 	beq.w	800de60 <lv_draw_rect+0x1238>
        lv_coord_t row_end = coords->y2 - radius;
 800cf70:	6e38      	ldr	r0, [r7, #96]	; 0x60
        lv_coord_t row_start = coords->y1 + radius;
 800cf72:	eb0c 0401 	add.w	r4, ip, r1
        lv_coord_t row_end = coords->y2 - radius;
 800cf76:	1a45      	subs	r5, r0, r1
        lv_coord_t row_start = coords->y1 + radius;
 800cf78:	b2a4      	uxth	r4, r4
        lv_coord_t row_end = coords->y2 - radius;
 800cf7a:	b2ad      	uxth	r5, r5
        if(style->body.radius != 0) {
 800cf7c:	b10e      	cbz	r6, 800cf82 <lv_draw_rect+0x35a>
            row_start += 2;
 800cf7e:	3402      	adds	r4, #2
            row_end -= 2;
 800cf80:	3d02      	subs	r5, #2
 800cf82:	b229      	sxth	r1, r5
            row_start += 2;
 800cf84:	b224      	sxth	r4, r4
            row_end -= 2;
 800cf86:	66b9      	str	r1, [r7, #104]	; 0x68
 800cf88:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        for(row = row_start; row <= row_end; row ++) {
 800cf8c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cf8e:	428c      	cmp	r4, r1
 800cf90:	dc5e      	bgt.n	800d050 <lv_draw_rect+0x428>
 800cf92:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800cf96:	4934      	ldr	r1, [pc, #208]	; (800d068 <lv_draw_rect+0x440>)
 800cf98:	f107 0698 	add.w	r6, r7, #152	; 0x98
 800cf9c:	f8c7 a040 	str.w	sl, [r7, #64]	; 0x40
 800cfa0:	65f8      	str	r0, [r7, #92]	; 0x5c
 800cfa2:	f3ce 4007 	ubfx	r0, lr, #16, #8
 800cfa6:	6809      	ldr	r1, [r1, #0]
 800cfa8:	65b8      	str	r0, [r7, #88]	; 0x58
 800cfaa:	f3c2 2007 	ubfx	r0, r2, #8, #8
 800cfae:	b2d2      	uxtb	r2, r2
 800cfb0:	6639      	str	r1, [r7, #96]	; 0x60
 800cfb2:	6578      	str	r0, [r7, #84]	; 0x54
 800cfb4:	64fa      	str	r2, [r7, #76]	; 0x4c
 800cfb6:	f3ce 2207 	ubfx	r2, lr, #8, #8
 800cfba:	653a      	str	r2, [r7, #80]	; 0x50
 800cfbc:	fa5f f28e 	uxtb.w	r2, lr
 800cfc0:	4615      	mov	r5, r2
 800cfc2:	461a      	mov	r2, r3
 800cfc4:	647d      	str	r5, [r7, #68]	; 0x44
 800cfc6:	e002      	b.n	800cfce <lv_draw_rect+0x3a6>
 800cfc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cfca:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
            mix = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 800cfce:	1b12      	subs	r2, r2, r4
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800cfd0:	f8b7 5044 	ldrh.w	r5, [r7, #68]	; 0x44
            work_area.y1 = row;
 800cfd4:	f8a7 409a 	strh.w	r4, [r7, #154]	; 0x9a
            fill_fp(&work_area, mask, act_color, opa);
 800cfd8:	4643      	mov	r3, r8
            mix = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 800cfda:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
            work_area.y2 = row;
 800cfde:	f8a7 409e 	strh.w	r4, [r7, #158]	; 0x9e
 800cfe2:	3401      	adds	r4, #1
            fill_fp(&work_area, mask, act_color, opa);
 800cfe4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800cfe6:	4630      	mov	r0, r6
 800cfe8:	b224      	sxth	r4, r4
            mix = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 800cfea:	fbb2 f2f9 	udiv	r2, r2, r9
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800cfee:	b2d2      	uxtb	r2, r2
 800cff0:	f1c2 0eff 	rsb	lr, r2, #255	; 0xff
 800cff4:	b292      	uxth	r2, r2
 800cff6:	fa1f fe8e 	uxth.w	lr, lr
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800cffa:	fb1e fa05 	smulbb	sl, lr, r5
 800cffe:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 800d000:	fb02 aa05 	mla	sl, r2, r5, sl
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800d004:	f8b7 5050 	ldrh.w	r5, [r7, #80]	; 0x50
 800d008:	fb1e fc05 	smulbb	ip, lr, r5
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800d00c:	f8b7 5058 	ldrh.w	r5, [r7, #88]	; 0x58
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800d010:	f3ca 2a07 	ubfx	sl, sl, #8, #8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800d014:	fb1e fe05 	smulbb	lr, lr, r5
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800d018:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 800d01a:	f36a 0b07 	bfi	fp, sl, #0, #8
 800d01e:	fb02 cc05 	mla	ip, r2, r5, ip
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800d022:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800d024:	f3cc 2c07 	ubfx	ip, ip, #8, #8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800d028:	fb02 e205 	mla	r2, r2, r5, lr
            fill_fp(&work_area, mask, act_color, opa);
 800d02c:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 800d02e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800d032:	f36c 2b0f 	bfi	fp, ip, #8, #8
 800d036:	f362 4b17 	bfi	fp, r2, #16, #8
 800d03a:	f04b 4b7f 	orr.w	fp, fp, #4278190080	; 0xff000000
 800d03e:	465a      	mov	r2, fp
 800d040:	47a8      	blx	r5
        for(row = row_start; row <= row_end; row ++) {
 800d042:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d044:	42a3      	cmp	r3, r4
 800d046:	dabf      	bge.n	800cfc8 <lv_draw_rect+0x3a0>
 800d048:	f8d7 a040 	ldr.w	sl, [r7, #64]	; 0x40
 800d04c:	f9ba 600c 	ldrsh.w	r6, [sl, #12]
        if(style->body.radius != 0) {
 800d050:	2e00      	cmp	r6, #0
 800d052:	f43f ae0e 	beq.w	800cc72 <lv_draw_rect+0x4a>
            lv_draw_rect_main_corner(coords, mask, style, opa_scale);
 800d056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d058:	4652      	mov	r2, sl
 800d05a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d05c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800d05e:	f7fe ff19 	bl	800be94 <lv_draw_rect_main_corner>
 800d062:	e606      	b.n	800cc72 <lv_draw_rect+0x4a>
 800d064:	080872f4 	.word	0x080872f4
 800d068:	080872f0 	.word	0x080872f0
 800d06c:	6e79      	ldr	r1, [r7, #100]	; 0x64
    uint16_t bwidth = style->body.border.width;
 800d06e:	b29b      	uxth	r3, r3
 800d070:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 800d074:	f8b1 e006 	ldrh.w	lr, [r1, #6]
 800d078:	b290      	uxth	r0, r2
 800d07a:	657a      	str	r2, [r7, #84]	; 0x54
 800d07c:	f10e 0201 	add.w	r2, lr, #1
 800d080:	f9b1 c004 	ldrsh.w	ip, [r1, #4]
 800d084:	66bb      	str	r3, [r7, #104]	; 0x68
 800d086:	1a12      	subs	r2, r2, r0
 800d088:	f9b1 3000 	ldrsh.w	r3, [r1]
    return area_p->x2 - area_p->x1 + 1;
 800d08c:	fa1f f58c 	uxth.w	r5, ip
    uint16_t radius = style->body.radius;
 800d090:	f9ba 100c 	ldrsh.w	r1, [sl, #12]
    return area_p->y2 - area_p->y1 + 1;
 800d094:	b212      	sxth	r2, r2
 800d096:	65bb      	str	r3, [r7, #88]	; 0x58
    return area_p->x2 - area_p->x1 + 1;
 800d098:	b29e      	uxth	r6, r3
 800d09a:	1c6b      	adds	r3, r5, #1
    return area_p->y2 - area_p->y1 + 1;
 800d09c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d09e:	fa1f f881 	uxth.w	r8, r1
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.border.opa : (uint16_t)((uint16_t) style->body.border.opa * opa_scale) >> 8;
 800d0a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
    return area_p->x2 - area_p->x1 + 1;
 800d0a4:	1b9b      	subs	r3, r3, r6
 800d0a6:	2aff      	cmp	r2, #255	; 0xff
 800d0a8:	b21b      	sxth	r3, r3
 800d0aa:	d003      	beq.n	800d0b4 <lv_draw_rect+0x48c>
 800d0ac:	fb09 f902 	mul.w	r9, r9, r2
 800d0b0:	f3c9 2907 	ubfx	r9, r9, #8, #8
    bwidth--;
 800d0b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
    if(r >= (w >> 1)) {
 800d0b6:	105b      	asrs	r3, r3, #1
    bwidth--;
 800d0b8:	f102 3bff 	add.w	fp, r2, #4294967295
    if(r >= (w >> 1)) {
 800d0bc:	4598      	cmp	r8, r3
    lv_color_t color = style->body.border.color;
 800d0be:	f8da 2010 	ldr.w	r2, [sl, #16]
    bwidth--;
 800d0c2:	fa1f fb8b 	uxth.w	fp, fp
    lv_color_t color = style->body.border.color;
 800d0c6:	663a      	str	r2, [r7, #96]	; 0x60
    if(r >= (w >> 1)) {
 800d0c8:	db09      	blt.n	800d0de <lv_draw_rect+0x4b6>
        r = (w >> 1);
 800d0ca:	fa1f f883 	uxth.w	r8, r3
        if(r != 0) r--;
 800d0ce:	f1b8 0f00 	cmp.w	r8, #0
 800d0d2:	f000 86aa 	beq.w	800de2a <lv_draw_rect+0x1202>
 800d0d6:	f108 38ff 	add.w	r8, r8, #4294967295
 800d0da:	fa1f f888 	uxth.w	r8, r8
    if(r >= (h >> 1)) {
 800d0de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d0e0:	105a      	asrs	r2, r3, #1
 800d0e2:	4542      	cmp	r2, r8
 800d0e4:	dc08      	bgt.n	800d0f8 <lv_draw_rect+0x4d0>
        r = (h >> 1);
 800d0e6:	fa1f f882 	uxth.w	r8, r2
        if(r != 0) r--;
 800d0ea:	f1b8 0f00 	cmp.w	r8, #0
 800d0ee:	d00a      	beq.n	800d106 <lv_draw_rect+0x4de>
 800d0f0:	f108 38ff 	add.w	r8, r8, #4294967295
 800d0f4:	fa1f f888 	uxth.w	r8, r8
    if(r > 0) r -= LV_ANTIALIAS;
 800d0f8:	f1b8 0f00 	cmp.w	r8, #0
 800d0fc:	d003      	beq.n	800d106 <lv_draw_rect+0x4de>
 800d0fe:	f108 38ff 	add.w	r8, r8, #4294967295
 800d102:	fa1f f888 	uxth.w	r8, r8
    if(radius < bwidth) {
 800d106:	45c3      	cmp	fp, r8
 800d108:	f240 828c 	bls.w	800d624 <lv_draw_rect+0x9fc>
        length_corr = bwidth - radius - LV_ANTIALIAS;
 800d10c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d10e:	1e9a      	subs	r2, r3, #2
        corner_size = bwidth;
 800d110:	fa0f f38b 	sxth.w	r3, fp
        length_corr = bwidth - radius - LV_ANTIALIAS;
 800d114:	eba2 0208 	sub.w	r2, r2, r8
 800d118:	b212      	sxth	r2, r2
 800d11a:	65fa      	str	r2, [r7, #92]	; 0x5c
    if(style->body.radius == 0) {
 800d11c:	2900      	cmp	r1, #0
 800d11e:	f040 841e 	bne.w	800d95e <lv_draw_rect+0xd36>
        if(part & LV_BORDER_TOP) {
 800d122:	f014 0802 	ands.w	r8, r4, #2
 800d126:	f040 86d4 	bne.w	800ded2 <lv_draw_rect+0x12aa>
        if(part & LV_BORDER_RIGHT) {
 800d12a:	0722      	lsls	r2, r4, #28
 800d12c:	f100 8770 	bmi.w	800e010 <lv_draw_rect+0x13e8>
 800d130:	f004 0301 	and.w	r3, r4, #1
 800d134:	65fb      	str	r3, [r7, #92]	; 0x5c
        if(part & LV_BORDER_LEFT) {
 800d136:	0763      	lsls	r3, r4, #29
 800d138:	d523      	bpl.n	800d182 <lv_draw_rect+0x55a>
            work_area.x1 = coords->x1;
 800d13a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800d13c:	f107 0698 	add.w	r6, r7, #152	; 0x98
 800d140:	f9b0 2000 	ldrsh.w	r2, [r0]
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800d144:	8843      	ldrh	r3, [r0, #2]
            work_area.x1 = coords->x1;
 800d146:	f8a7 2098 	strh.w	r2, [r7, #152]	; 0x98
            work_area.x2 = coords->x1 + bwidth;
 800d14a:	eb0b 0002 	add.w	r0, fp, r2
 800d14e:	4a6c      	ldr	r2, [pc, #432]	; (800d300 <lv_draw_rect+0x6d8>)
 800d150:	f8a7 009c 	strh.w	r0, [r7, #156]	; 0x9c
 800d154:	653a      	str	r2, [r7, #80]	; 0x50
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800d156:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800d158:	4419      	add	r1, r3
            fill_fp(&work_area, mask, color, opa);
 800d15a:	4630      	mov	r0, r6
 800d15c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800d15e:	2a00      	cmp	r2, #0
 800d160:	6e7a      	ldr	r2, [r7, #100]	; 0x64
            fill_fp(&work_area, mask, color, opa);
 800d162:	681c      	ldr	r4, [r3, #0]
 800d164:	464b      	mov	r3, r9
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800d166:	f8b2 e006 	ldrh.w	lr, [r2, #6]
 800d16a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d16c:	bf08      	it	eq
 800d16e:	2200      	moveq	r2, #0
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800d170:	f8a7 109a 	strh.w	r1, [r7, #154]	; 0x9a
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800d174:	ebae 0602 	sub.w	r6, lr, r2
            fill_fp(&work_area, mask, color, opa);
 800d178:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d17a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800d17c:	f8a7 609e 	strh.w	r6, [r7, #158]	; 0x9e
            fill_fp(&work_area, mask, color, opa);
 800d180:	47a0      	blx	r4
        if(part & LV_BORDER_BOTTOM) {
 800d182:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d184:	2b00      	cmp	r3, #0
 800d186:	f040 868b 	bne.w	800dea0 <lv_draw_rect+0x1278>
 800d18a:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
        if(style->body.radius != 0) {
 800d18e:	2b00      	cmp	r3, #0
 800d190:	f43f ad7b 	beq.w	800cc8a <lv_draw_rect+0x62>
    uint16_t radius = style->body.radius ;
 800d194:	b29c      	uxth	r4, r3
    lv_color_t color = style->body.border.color;
 800d196:	f8da 3010 	ldr.w	r3, [sl, #16]
    uint16_t bwidth = style->body.border.width;
 800d19a:	f8ba 5014 	ldrh.w	r5, [sl, #20]
    lv_color_t color = style->body.border.color;
 800d19e:	623b      	str	r3, [r7, #32]
    lv_border_part_t part = style->body.border.part;
 800d1a0:	f89a 3016 	ldrb.w	r3, [sl, #22]
 800d1a4:	62bb      	str	r3, [r7, #40]	; 0x28
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.border.opa : (uint16_t)((uint16_t) style->body.border.opa * opa_scale) >> 8;
 800d1a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1a8:	2bff      	cmp	r3, #255	; 0xff
 800d1aa:	f89a 3017 	ldrb.w	r3, [sl, #23]
 800d1ae:	d004      	beq.n	800d1ba <lv_draw_rect+0x592>
 800d1b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d1b2:	fb03 f302 	mul.w	r3, r3, r2
 800d1b6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800d1ba:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800d1bc:	f1c5 0502 	rsb	r5, r5, #2
 800d1c0:	663b      	str	r3, [r7, #96]	; 0x60
 800d1c2:	8883      	ldrh	r3, [r0, #4]
 800d1c4:	b2ad      	uxth	r5, r5
 800d1c6:	f8b0 c000 	ldrh.w	ip, [r0]
 800d1ca:	1c59      	adds	r1, r3, #1
    return area_p->y2 - area_p->y1 + 1;
 800d1cc:	88c6      	ldrh	r6, [r0, #6]
 800d1ce:	f8b0 e002 	ldrh.w	lr, [r0, #2]
    return area_p->x2 - area_p->x1 + 1;
 800d1d2:	eba1 010c 	sub.w	r1, r1, ip
    return area_p->y2 - area_p->y1 + 1;
 800d1d6:	1c72      	adds	r2, r6, #1
    if(r >= (w >> 1)) {
 800d1d8:	f341 014e 	sbfx	r1, r1, #1, #15
 800d1dc:	eba2 020e 	sub.w	r2, r2, lr
 800d1e0:	428c      	cmp	r4, r1
 800d1e2:	b212      	sxth	r2, r2
 800d1e4:	f2c0 862f 	blt.w	800de46 <lv_draw_rect+0x121e>
        r = (w >> 1);
 800d1e8:	b28c      	uxth	r4, r1
        if(r != 0) r--;
 800d1ea:	2c00      	cmp	r4, #0
 800d1ec:	f000 8631 	beq.w	800de52 <lv_draw_rect+0x122a>
 800d1f0:	3c01      	subs	r4, #1
    if(r >= (h >> 1)) {
 800d1f2:	1052      	asrs	r2, r2, #1
        if(r != 0) r--;
 800d1f4:	b2a4      	uxth	r4, r4
    if(r >= (h >> 1)) {
 800d1f6:	4294      	cmp	r4, r2
 800d1f8:	db05      	blt.n	800d206 <lv_draw_rect+0x5de>
        r = (h >> 1);
 800d1fa:	b294      	uxth	r4, r2
        if(r != 0) r--;
 800d1fc:	2c00      	cmp	r4, #0
 800d1fe:	f000 862c 	beq.w	800de5a <lv_draw_rect+0x1232>
 800d202:	3c01      	subs	r4, #1
 800d204:	b2a4      	uxth	r4, r4
    if(r > 0) r -= LV_ANTIALIAS;
 800d206:	2c00      	cmp	r4, #0
 800d208:	f000 8627 	beq.w	800de5a <lv_draw_rect+0x1232>
 800d20c:	3c01      	subs	r4, #1
 800d20e:	b2a4      	uxth	r4, r4
 800d210:	b222      	sxth	r2, r4
 800d212:	643a      	str	r2, [r7, #64]	; 0x40
    lt_origo.x = coords->x1 + radius + LV_ANTIALIAS;
 800d214:	f10c 0c01 	add.w	ip, ip, #1
    rt_origo.x = coords->x2 - radius - LV_ANTIALIAS;
 800d218:	3b01      	subs	r3, #1
    lt_origo.y = coords->y1 + radius + LV_ANTIALIAS;
 800d21a:	f10e 0e01 	add.w	lr, lr, #1
    lb_origo.y = coords->y2 - radius - LV_ANTIALIAS;
 800d21e:	3e01      	subs	r6, #1
    lt_origo.x = coords->x1 + radius + LV_ANTIALIAS;
 800d220:	44a4      	add	ip, r4
    rt_origo.x = coords->x2 - radius - LV_ANTIALIAS;
 800d222:	eba3 0804 	sub.w	r8, r3, r4
    lt_origo.y = coords->y1 + radius + LV_ANTIALIAS;
 800d226:	44a6      	add	lr, r4
    lb_origo.y = coords->y2 - radius - LV_ANTIALIAS;
 800d228:	1b36      	subs	r6, r6, r4
    lt_origo.x = coords->x1 + radius + LV_ANTIALIAS;
 800d22a:	fa1f f38c 	uxth.w	r3, ip
    lv_circ_init(&cir_out, &tmp_out, radius);
 800d22e:	f107 0288 	add.w	r2, r7, #136	; 0x88
    lb_origo.y = coords->y2 - radius - LV_ANTIALIAS;
 800d232:	b2b6      	uxth	r6, r6
    lv_circ_init(&cir_out, &tmp_out, radius);
 800d234:	f107 0178 	add.w	r1, r7, #120	; 0x78
    lt_origo.x = coords->x1 + radius + LV_ANTIALIAS;
 800d238:	65bb      	str	r3, [r7, #88]	; 0x58
    lt_origo.y = coords->y1 + radius + LV_ANTIALIAS;
 800d23a:	fa1f f38e 	uxth.w	r3, lr
    lv_circ_init(&cir_in, &tmp_in, radius_in);
 800d23e:	f107 0e90 	add.w	lr, r7, #144	; 0x90
    lv_circ_init(&cir_out, &tmp_out, radius);
 800d242:	4610      	mov	r0, r2
    lt_origo.y = coords->y1 + radius + LV_ANTIALIAS;
 800d244:	657b      	str	r3, [r7, #84]	; 0x54
    lv_circ_init(&cir_in, &tmp_in, radius_in);
 800d246:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800d24a:	f8c7 e010 	str.w	lr, [r7, #16]
    rt_origo.x = coords->x2 - radius - LV_ANTIALIAS;
 800d24e:	fa1f fe88 	uxth.w	lr, r8
    lv_circ_init(&cir_out, &tmp_out, radius);
 800d252:	61fa      	str	r2, [r7, #28]
    lv_coord_t radius_in = radius - bwidth;
 800d254:	442c      	add	r4, r5
    rt_origo.x = coords->x2 - radius - LV_ANTIALIAS;
 800d256:	f8c7 e03c 	str.w	lr, [r7, #60]	; 0x3c
    lv_coord_t in_y_seg_start = 0;
 800d25a:	f04f 0e00 	mov.w	lr, #0
    lv_circ_init(&cir_out, &tmp_out, radius);
 800d25e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    lv_coord_t radius_in = radius - bwidth;
 800d260:	b224      	sxth	r4, r4
    lv_circ_init(&cir_in, &tmp_in, radius_in);
 800d262:	60fb      	str	r3, [r7, #12]
 800d264:	46d3      	mov	fp, sl
    lv_coord_t in_y_seg_start = 0;
 800d266:	f8c7 e05c 	str.w	lr, [r7, #92]	; 0x5c
    lb_origo.y = coords->y2 - radius - LV_ANTIALIAS;
 800d26a:	653e      	str	r6, [r7, #80]	; 0x50
    lv_circ_init(&cir_out, &tmp_out, radius);
 800d26c:	f002 fc32 	bl	800fad4 <lv_circ_init>
    lt_origo.y = coords->y1 + radius + LV_ANTIALIAS;
 800d270:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
    lv_coord_t out_y_seg_start = 0;
 800d274:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    lt_origo.y = coords->y1 + radius + LV_ANTIALIAS;
 800d276:	61bb      	str	r3, [r7, #24]
    lb_origo.y = coords->y2 - radius - LV_ANTIALIAS;
 800d278:	b233      	sxth	r3, r6
    lv_coord_t out_y_seg_start = 0;
 800d27a:	637a      	str	r2, [r7, #52]	; 0x34
    lv_circ_init(&cir_in, &tmp_in, radius_in);
 800d27c:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
 800d280:	68f9      	ldr	r1, [r7, #12]
 800d282:	6938      	ldr	r0, [r7, #16]
    lb_origo.y = coords->y2 - radius - LV_ANTIALIAS;
 800d284:	617b      	str	r3, [r7, #20]
    lv_coord_t radius_in = radius - bwidth;
 800d286:	647c      	str	r4, [r7, #68]	; 0x44
    lv_circ_init(&cir_in, &tmp_in, radius_in);
 800d288:	f002 fc24 	bl	800fad4 <lv_circ_init>
 800d28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d28e:	f003 0309 	and.w	r3, r3, #9
 800d292:	66bb      	str	r3, [r7, #104]	; 0x68
    while(cir_out.y <= cir_out.x) {
 800d294:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800d298:	461a      	mov	r2, r3
 800d29a:	63bb      	str	r3, [r7, #56]	; 0x38
 800d29c:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 800d2a0:	4293      	cmp	r3, r2
 800d2a2:	f2c0 83d3 	blt.w	800da4c <lv_draw_rect+0xe24>
        if(cir_in.y < cir_in.x) {
 800d2a6:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 800d2aa:	f9b7 1092 	ldrsh.w	r1, [r7, #146]	; 0x92
 800d2ae:	4291      	cmp	r1, r2
 800d2b0:	f280 8235 	bge.w	800d71e <lv_draw_rect+0xaf6>
            act_w1 = cir_out.x - cir_in.x;
 800d2b4:	1a99      	subs	r1, r3, r2
 800d2b6:	b209      	sxth	r1, r1
 800d2b8:	62f9      	str	r1, [r7, #44]	; 0x2c
            act_w2 = act_w1;
 800d2ba:	6279      	str	r1, [r7, #36]	; 0x24
        if(out_x_last != cir_out.x) {
 800d2bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d2be:	428b      	cmp	r3, r1
 800d2c0:	f000 8239 	beq.w	800d736 <lv_draw_rect+0xb0e>
            lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800d2c4:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 800d2c6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d2c8:	64f9      	str	r1, [r7, #76]	; 0x4c
 800d2ca:	1a46      	subs	r6, r0, r1
 800d2cc:	b235      	sxth	r5, r6
            for(i = 0; i  < seg_size; i++) {
 800d2ce:	2d00      	cmp	r5, #0
 800d2d0:	f340 859c 	ble.w	800de0c <lv_draw_rect+0x11e4>
                    px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 800d2d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
            for(i = 0; i  < seg_size; i++) {
 800d2d8:	2400      	movs	r4, #0
 800d2da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
                    px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 800d2dc:	4618      	mov	r0, r3
 800d2de:	643b      	str	r3, [r7, #64]	; 0x40
 800d2e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2e2:	f001 0805 	and.w	r8, r1, #5
 800d2e6:	460a      	mov	r2, r1
 800d2e8:	f001 0606 	and.w	r6, r1, #6
 800d2ec:	3301      	adds	r3, #1
 800d2ee:	4621      	mov	r1, r4
 800d2f0:	f002 0a0a 	and.w	sl, r2, #10
 800d2f4:	46b1      	mov	r9, r6
 800d2f6:	18c3      	adds	r3, r0, r3
 800d2f8:	f8c7 8048 	str.w	r8, [r7, #72]	; 0x48
 800d2fc:	637b      	str	r3, [r7, #52]	; 0x34
 800d2fe:	e022      	b.n	800d346 <lv_draw_rect+0x71e>
 800d300:	080872f0 	.word	0x080872f0
        uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map) - 1)) / (seg - 1);
 800d304:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800d308:	1e68      	subs	r0, r5, #1
        return (uint32_t)((uint32_t) opa_map[id] * opa) >> 8;
 800d30a:	497d      	ldr	r1, [pc, #500]	; (800d500 <lv_draw_rect+0x8d8>)
        uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map) - 1)) / (seg - 1);
 800d30c:	461a      	mov	r2, r3
 800d30e:	fbb2 f3f0 	udiv	r3, r2, r0
        return (uint32_t)((uint32_t) opa_map[id] * opa) >> 8;
 800d312:	b2db      	uxtb	r3, r3
 800d314:	5cce      	ldrb	r6, [r1, r3]
 800d316:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800d31a:	fb16 f603 	smulbb	r6, r6, r3
 800d31e:	0a33      	lsrs	r3, r6, #8
 800d320:	667b      	str	r3, [r7, #100]	; 0x64
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800d322:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d324:	2b09      	cmp	r3, #9
 800d326:	d01b      	beq.n	800d360 <lv_draw_rect+0x738>
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800d328:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d32a:	2b05      	cmp	r3, #5
 800d32c:	d03f      	beq.n	800d3ae <lv_draw_rect+0x786>
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800d32e:	f1b9 0f06 	cmp.w	r9, #6
 800d332:	d067      	beq.n	800d404 <lv_draw_rect+0x7dc>
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800d334:	f1ba 0f0a 	cmp.w	sl, #10
 800d338:	f000 8091 	beq.w	800d45e <lv_draw_rect+0x836>
 800d33c:	3401      	adds	r4, #1
            for(i = 0; i  < seg_size; i++) {
 800d33e:	b221      	sxth	r1, r4
 800d340:	428d      	cmp	r5, r1
 800d342:	f340 80b6 	ble.w	800d4b2 <lv_draw_rect+0x88a>
                if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) {    /*Use non-linear opa mapping on the first segment*/
 800d346:	2d05      	cmp	r5, #5
 800d348:	dcdc      	bgt.n	800d304 <lv_draw_rect+0x6dc>
                    aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800d34a:	6e3e      	ldr	r6, [r7, #96]	; 0x60
 800d34c:	4628      	mov	r0, r5
 800d34e:	4632      	mov	r2, r6
 800d350:	f7fd f988 	bl	800a664 <lv_draw_aa_get_opa>
 800d354:	1a30      	subs	r0, r6, r0
 800d356:	b2c3      	uxtb	r3, r0
 800d358:	667b      	str	r3, [r7, #100]	; 0x64
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800d35a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d35c:	2b09      	cmp	r3, #9
 800d35e:	d1e3      	bne.n	800d328 <lv_draw_rect+0x700>
                    px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 800d360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d362:	fa1f f884 	uxth.w	r8, r4
 800d366:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d368:	4866      	ldr	r0, [pc, #408]	; (800d504 <lv_draw_rect+0x8dc>)
 800d36a:	1899      	adds	r1, r3, r2
 800d36c:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 800d36e:	6800      	ldr	r0, [r0, #0]
 800d370:	f8db 3010 	ldr.w	r3, [fp, #16]
 800d374:	4441      	add	r1, r8
 800d376:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d378:	9600      	str	r6, [sp, #0]
 800d37a:	4606      	mov	r6, r0
 800d37c:	b209      	sxth	r1, r1
 800d37e:	f9b7 0034 	ldrsh.w	r0, [r7, #52]	; 0x34
 800d382:	633e      	str	r6, [r7, #48]	; 0x30
 800d384:	47b0      	blx	r6
                    px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask, style->body.border.color, aa_opa);
 800d386:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d388:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d38a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d38c:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 800d38e:	4408      	add	r0, r1
 800d390:	1c59      	adds	r1, r3, #1
 800d392:	f8db 3010 	ldr.w	r3, [fp, #16]
 800d396:	9600      	str	r6, [sp, #0]
 800d398:	4440      	add	r0, r8
 800d39a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d39c:	b200      	sxth	r0, r0
 800d39e:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 800d3a0:	4411      	add	r1, r2
 800d3a2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d3a4:	b209      	sxth	r1, r1
 800d3a6:	47b0      	blx	r6
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800d3a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d3aa:	2b05      	cmp	r3, #5
 800d3ac:	d1bf      	bne.n	800d32e <lv_draw_rect+0x706>
                    px_fp(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask, style->body.border.color, aa_opa);
 800d3ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d3b0:	fa1f f884 	uxth.w	r8, r4
 800d3b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d3b6:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 800d3b8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d3ba:	1a98      	subs	r0, r3, r2
 800d3bc:	f8db 3010 	ldr.w	r3, [fp, #16]
 800d3c0:	9600      	str	r6, [sp, #0]
 800d3c2:	3101      	adds	r1, #1
 800d3c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d3c6:	eba0 0008 	sub.w	r0, r0, r8
 800d3ca:	4e4e      	ldr	r6, [pc, #312]	; (800d504 <lv_draw_rect+0x8dc>)
 800d3cc:	4411      	add	r1, r2
 800d3ce:	b200      	sxth	r0, r0
 800d3d0:	6832      	ldr	r2, [r6, #0]
 800d3d2:	b209      	sxth	r1, r1
 800d3d4:	4616      	mov	r6, r2
 800d3d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d3d8:	633e      	str	r6, [r7, #48]	; 0x30
 800d3da:	47b0      	blx	r6
                    px_fp(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 800d3dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d3e0:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 800d3e2:	4419      	add	r1, r3
 800d3e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d3e6:	1e58      	subs	r0, r3, #1
 800d3e8:	f8db 3010 	ldr.w	r3, [fp, #16]
 800d3ec:	9600      	str	r6, [sp, #0]
 800d3ee:	4441      	add	r1, r8
 800d3f0:	6c3e      	ldr	r6, [r7, #64]	; 0x40
 800d3f2:	b209      	sxth	r1, r1
 800d3f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d3f6:	1b80      	subs	r0, r0, r6
 800d3f8:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 800d3fa:	b200      	sxth	r0, r0
 800d3fc:	47b0      	blx	r6
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800d3fe:	f1b9 0f06 	cmp.w	r9, #6
 800d402:	d197      	bne.n	800d334 <lv_draw_rect+0x70c>
                    px_fp(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, style->body.border.color, aa_opa);
 800d404:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d406:	fa1f f884 	uxth.w	r8, r4
 800d40a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d40c:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 800d40e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d410:	1a99      	subs	r1, r3, r2
 800d412:	f8db 3010 	ldr.w	r3, [fp, #16]
 800d416:	9600      	str	r6, [sp, #0]
 800d418:	3801      	subs	r0, #1
 800d41a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d41c:	eba1 0108 	sub.w	r1, r1, r8
 800d420:	4e38      	ldr	r6, [pc, #224]	; (800d504 <lv_draw_rect+0x8dc>)
 800d422:	1a80      	subs	r0, r0, r2
 800d424:	b209      	sxth	r1, r1
 800d426:	6832      	ldr	r2, [r6, #0]
 800d428:	b200      	sxth	r0, r0
 800d42a:	4616      	mov	r6, r2
 800d42c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d42e:	633e      	str	r6, [r7, #48]	; 0x30
 800d430:	47b0      	blx	r6
                    px_fp(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask, style->body.border.color, aa_opa);
 800d432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d434:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d436:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 800d438:	1ac0      	subs	r0, r0, r3
 800d43a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d43c:	1e59      	subs	r1, r3, #1
 800d43e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800d442:	9600      	str	r6, [sp, #0]
 800d444:	eba0 0008 	sub.w	r0, r0, r8
 800d448:	6c3e      	ldr	r6, [r7, #64]	; 0x40
 800d44a:	b200      	sxth	r0, r0
 800d44c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d44e:	1b89      	subs	r1, r1, r6
 800d450:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 800d452:	b209      	sxth	r1, r1
 800d454:	47b0      	blx	r6
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800d456:	f1ba 0f0a 	cmp.w	sl, #10
 800d45a:	f47f af6f 	bne.w	800d33c <lv_draw_rect+0x714>
                    px_fp(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask, style->body.border.color, aa_opa);
 800d45e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d460:	fa1f f884 	uxth.w	r8, r4
 800d464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d466:	3401      	adds	r4, #1
 800d468:	18d0      	adds	r0, r2, r3
 800d46a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d46c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d46e:	1e59      	subs	r1, r3, #1
 800d470:	f8db 3010 	ldr.w	r3, [fp, #16]
 800d474:	9200      	str	r2, [sp, #0]
 800d476:	4440      	add	r0, r8
 800d478:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d47a:	b200      	sxth	r0, r0
 800d47c:	1a89      	subs	r1, r1, r2
 800d47e:	4a21      	ldr	r2, [pc, #132]	; (800d504 <lv_draw_rect+0x8dc>)
 800d480:	6812      	ldr	r2, [r2, #0]
 800d482:	b209      	sxth	r1, r1
 800d484:	4616      	mov	r6, r2
 800d486:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d488:	633e      	str	r6, [r7, #48]	; 0x30
 800d48a:	47b0      	blx	r6
                    px_fp(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask, style->body.border.color, aa_opa);
 800d48c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d48e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d490:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800d492:	1ac9      	subs	r1, r1, r3
 800d494:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d496:	f8db 3010 	ldr.w	r3, [fp, #16]
 800d49a:	eba1 0108 	sub.w	r1, r1, r8
 800d49e:	9000      	str	r0, [sp, #0]
 800d4a0:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 800d4a2:	b209      	sxth	r1, r1
 800d4a4:	f9b7 0034 	ldrsh.w	r0, [r7, #52]	; 0x34
 800d4a8:	47b0      	blx	r6
            for(i = 0; i  < seg_size; i++) {
 800d4aa:	b221      	sxth	r1, r4
 800d4ac:	428d      	cmp	r5, r1
 800d4ae:	f73f af4a 	bgt.w	800d346 <lv_draw_rect+0x71e>
 800d4b2:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 800d4b6:	464e      	mov	r6, r9
 800d4b8:	f8d7 8048 	ldr.w	r8, [r7, #72]	; 0x48
 800d4bc:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 800d4c0:	643b      	str	r3, [r7, #64]	; 0x40
        if(out_x_last != cir_out.x) {
 800d4c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4c4:	637b      	str	r3, [r7, #52]	; 0x34
        if(in_x_last != cir_in.x) {
 800d4c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d4c8:	4291      	cmp	r1, r2
 800d4ca:	f000 80c4 	beq.w	800d656 <lv_draw_rect+0xa2e>
            in_y_seg_end = cir_out.y;
 800d4ce:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
            lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 800d4d2:	f8b7 005c 	ldrh.w	r0, [r7, #92]	; 0x5c
            in_y_seg_end = cir_out.y;
 800d4d6:	633b      	str	r3, [r7, #48]	; 0x30
            lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 800d4d8:	eba3 0900 	sub.w	r9, r3, r0
 800d4dc:	64b8      	str	r0, [r7, #72]	; 0x48
 800d4de:	fa0f f989 	sxth.w	r9, r9
            for(i = 0; i  < seg_size; i++) {
 800d4e2:	f1b9 0f00 	cmp.w	r9, #0
 800d4e6:	f340 848f 	ble.w	800de08 <lv_draw_rect+0x11e0>
                    px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 800d4ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4ec:	1e4a      	subs	r2, r1, #1
            for(i = 0; i  < seg_size; i++) {
 800d4ee:	2400      	movs	r4, #0
                    px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 800d4f0:	667e      	str	r6, [r7, #100]	; 0x64
 800d4f2:	3b01      	subs	r3, #1
 800d4f4:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d4f6:	440b      	add	r3, r1
 800d4f8:	4621      	mov	r1, r4
 800d4fa:	b21b      	sxth	r3, r3
 800d4fc:	63bb      	str	r3, [r7, #56]	; 0x38
 800d4fe:	e038      	b.n	800d572 <lv_draw_rect+0x94a>
 800d500:	0808730c 	.word	0x0808730c
 800d504:	080872f4 	.word	0x080872f4
        uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map) - 1)) / (seg - 1);
 800d508:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800d50c:	f109 30ff 	add.w	r0, r9, #4294967295
        return (uint32_t)((uint32_t) opa_map[id] * opa) >> 8;
 800d510:	499f      	ldr	r1, [pc, #636]	; (800d790 <lv_draw_rect+0xb68>)
        uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map) - 1)) / (seg - 1);
 800d512:	461a      	mov	r2, r3
 800d514:	fbb2 f3f0 	udiv	r3, r2, r0
        return (uint32_t)((uint32_t) opa_map[id] * opa) >> 8;
 800d518:	b2db      	uxtb	r3, r3
 800d51a:	5ccd      	ldrb	r5, [r1, r3]
 800d51c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d51e:	fb15 f503 	smulbb	r5, r5, r3
                    aa_opa = opa - antialias_get_opa_circ(seg_size, i, opa);
 800d522:	eba3 2515 	sub.w	r5, r3, r5, lsr #8
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800d526:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d528:	2b09      	cmp	r3, #9
                    aa_opa = opa - antialias_get_opa_circ(seg_size, i, opa);
 800d52a:	b2ed      	uxtb	r5, r5
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800d52c:	d02c      	beq.n	800d588 <lv_draw_rect+0x960>
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800d52e:	f1b8 0f05 	cmp.w	r8, #5
 800d532:	d03a      	beq.n	800d5aa <lv_draw_rect+0x982>
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800d534:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d536:	2b06      	cmp	r3, #6
 800d538:	d04b      	beq.n	800d5d2 <lv_draw_rect+0x9aa>
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800d53a:	f1ba 0f0a 	cmp.w	sl, #10
 800d53e:	d05c      	beq.n	800d5fa <lv_draw_rect+0x9d2>
                if(LV_CIRC_OCT1_X(aa_p) - 1 != LV_CIRC_OCT2_X(aa_p) + i) {
 800d540:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d542:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d544:	4423      	add	r3, r4
 800d546:	4293      	cmp	r3, r2
 800d548:	d00f      	beq.n	800d56a <lv_draw_rect+0x942>
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800d54a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d54c:	2b09      	cmp	r3, #9
 800d54e:	f000 80d4 	beq.w	800d6fa <lv_draw_rect+0xad2>
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800d552:	f1b8 0f05 	cmp.w	r8, #5
 800d556:	f000 80be 	beq.w	800d6d6 <lv_draw_rect+0xaae>
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800d55a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d55c:	2b06      	cmp	r3, #6
 800d55e:	f000 80a8 	beq.w	800d6b2 <lv_draw_rect+0xa8a>
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800d562:	f1ba 0f0a 	cmp.w	sl, #10
 800d566:	f000 8095 	beq.w	800d694 <lv_draw_rect+0xa6c>
 800d56a:	3401      	adds	r4, #1
            for(i = 0; i  < seg_size; i++) {
 800d56c:	b221      	sxth	r1, r4
 800d56e:	4589      	cmp	r9, r1
 800d570:	dd6b      	ble.n	800d64a <lv_draw_rect+0xa22>
                if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) {    /*Use non-linear opa mapping on the first segment*/
 800d572:	f1b9 0f05 	cmp.w	r9, #5
 800d576:	dcc7      	bgt.n	800d508 <lv_draw_rect+0x8e0>
                    aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 800d578:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d57a:	4648      	mov	r0, r9
 800d57c:	f7fd f872 	bl	800a664 <lv_draw_aa_get_opa>
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800d580:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                    aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 800d582:	4605      	mov	r5, r0
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800d584:	2b09      	cmp	r3, #9
 800d586:	d1d2      	bne.n	800d52e <lv_draw_rect+0x906>
                    px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 800d588:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d58a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d58c:	1899      	adds	r1, r3, r2
 800d58e:	4a81      	ldr	r2, [pc, #516]	; (800d794 <lv_draw_rect+0xb6c>)
 800d590:	f8db 3010 	ldr.w	r3, [fp, #16]
 800d594:	6812      	ldr	r2, [r2, #0]
 800d596:	4421      	add	r1, r4
 800d598:	4616      	mov	r6, r2
 800d59a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d59c:	9500      	str	r5, [sp, #0]
 800d59e:	b209      	sxth	r1, r1
 800d5a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d5a2:	47b0      	blx	r6
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800d5a4:	f1b8 0f05 	cmp.w	r8, #5
 800d5a8:	d1c4      	bne.n	800d534 <lv_draw_rect+0x90c>
                    px_fp(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) - 1, mask, style->body.border.color, aa_opa);
 800d5aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d5ae:	1e59      	subs	r1, r3, #1
 800d5b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d5b2:	6c7e      	ldr	r6, [r7, #68]	; 0x44
 800d5b4:	1a98      	subs	r0, r3, r2
 800d5b6:	f8db 3010 	ldr.w	r3, [fp, #16]
 800d5ba:	4431      	add	r1, r6
 800d5bc:	4e75      	ldr	r6, [pc, #468]	; (800d794 <lv_draw_rect+0xb6c>)
 800d5be:	1b00      	subs	r0, r0, r4
 800d5c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d5c2:	b209      	sxth	r1, r1
 800d5c4:	9500      	str	r5, [sp, #0]
 800d5c6:	6836      	ldr	r6, [r6, #0]
 800d5c8:	b200      	sxth	r0, r0
 800d5ca:	47b0      	blx	r6
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800d5cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d5ce:	2b06      	cmp	r3, #6
 800d5d0:	d1b3      	bne.n	800d53a <lv_draw_rect+0x912>
                    px_fp(lt_origo.x + LV_CIRC_OCT5_X(aa_p) + 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, style->body.border.color, aa_opa);
 800d5d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d5d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d5d6:	6c7e      	ldr	r6, [r7, #68]	; 0x44
 800d5d8:	1a99      	subs	r1, r3, r2
 800d5da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d5dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d5de:	1c58      	adds	r0, r3, #1
 800d5e0:	1b09      	subs	r1, r1, r4
 800d5e2:	f8db 3010 	ldr.w	r3, [fp, #16]
 800d5e6:	1b80      	subs	r0, r0, r6
 800d5e8:	4e6a      	ldr	r6, [pc, #424]	; (800d794 <lv_draw_rect+0xb6c>)
 800d5ea:	9500      	str	r5, [sp, #0]
 800d5ec:	b209      	sxth	r1, r1
 800d5ee:	6836      	ldr	r6, [r6, #0]
 800d5f0:	b200      	sxth	r0, r0
 800d5f2:	47b0      	blx	r6
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800d5f4:	f1ba 0f0a 	cmp.w	sl, #10
 800d5f8:	d1a2      	bne.n	800d540 <lv_draw_rect+0x918>
                    px_fp(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) + 1, mask, style->body.border.color, aa_opa);
 800d5fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d5fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d5fe:	1c59      	adds	r1, r3, #1
 800d600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d602:	6c7e      	ldr	r6, [r7, #68]	; 0x44
 800d604:	1898      	adds	r0, r3, r2
 800d606:	f8db 3010 	ldr.w	r3, [fp, #16]
 800d60a:	1b89      	subs	r1, r1, r6
 800d60c:	4e61      	ldr	r6, [pc, #388]	; (800d794 <lv_draw_rect+0xb6c>)
 800d60e:	4420      	add	r0, r4
 800d610:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d612:	b209      	sxth	r1, r1
 800d614:	9500      	str	r5, [sp, #0]
 800d616:	6836      	ldr	r6, [r6, #0]
 800d618:	b200      	sxth	r0, r0
 800d61a:	47b0      	blx	r6
 800d61c:	e790      	b.n	800d540 <lv_draw_rect+0x918>
        if(r != 0) r--;
 800d61e:	461d      	mov	r5, r3
 800d620:	f7ff bb4b 	b.w	800ccba <lv_draw_rect+0x92>
        corner_size = radius + LV_ANTIALIAS;
 800d624:	f108 0301 	add.w	r3, r8, #1
    lv_coord_t length_corr = 0;
 800d628:	2200      	movs	r2, #0
        corner_size = radius + LV_ANTIALIAS;
 800d62a:	b21b      	sxth	r3, r3
    lv_coord_t length_corr = 0;
 800d62c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d62e:	e575      	b.n	800d11c <lv_draw_rect+0x4f4>
        if(r != 0) r--;
 800d630:	4625      	mov	r5, r4
 800d632:	f7ff bb42 	b.w	800ccba <lv_draw_rect+0x92>
                px_fp(point_r.x, point_r.y, mask, style->body.shadow.color, px_opa);
 800d636:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d638:	4631      	mov	r1, r6
 800d63a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d63c:	4650      	mov	r0, sl
 800d63e:	699b      	ldr	r3, [r3, #24]
 800d640:	9200      	str	r2, [sp, #0]
 800d642:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d644:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 800d646:	47a8      	blx	r5
 800d648:	e431      	b.n	800ceae <lv_draw_rect+0x286>
 800d64a:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 800d64e:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 800d650:	647b      	str	r3, [r7, #68]	; 0x44
            in_y_seg_start = in_y_seg_end;
 800d652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d654:	65fb      	str	r3, [r7, #92]	; 0x5c
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800d656:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d658:	2b09      	cmp	r3, #9
 800d65a:	f000 8144 	beq.w	800d8e6 <lv_draw_rect+0xcbe>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800d65e:	f1b8 0f05 	cmp.w	r8, #5
 800d662:	f000 8102 	beq.w	800d86a <lv_draw_rect+0xc42>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800d666:	2e06      	cmp	r6, #6
 800d668:	d06d      	beq.n	800d746 <lv_draw_rect+0xb1e>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800d66a:	f1ba 0f0a 	cmp.w	sl, #10
 800d66e:	f000 80be 	beq.w	800d7ee <lv_draw_rect+0xbc6>
        lv_circ_next(&cir_out, &tmp_out);
 800d672:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800d676:	69f8      	ldr	r0, [r7, #28]
 800d678:	f002 fa40 	bl	800fafc <lv_circ_next>
        if(cir_in.y < cir_in.x) {
 800d67c:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 800d680:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 800d684:	429a      	cmp	r2, r3
 800d686:	f6bf ae05 	bge.w	800d294 <lv_draw_rect+0x66c>
            lv_circ_next(&cir_in, &tmp_in);
 800d68a:	68f9      	ldr	r1, [r7, #12]
 800d68c:	6938      	ldr	r0, [r7, #16]
 800d68e:	f002 fa35 	bl	800fafc <lv_circ_next>
 800d692:	e5ff      	b.n	800d294 <lv_draw_rect+0x66c>
                        px_fp(rt_origo.x + LV_CIRC_OCT8_X(aa_p) - 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask, style->body.border.color, aa_opa);
 800d694:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d696:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d698:	1a99      	subs	r1, r3, r2
 800d69a:	4a3e      	ldr	r2, [pc, #248]	; (800d794 <lv_draw_rect+0xb6c>)
 800d69c:	f8db 3010 	ldr.w	r3, [fp, #16]
 800d6a0:	6812      	ldr	r2, [r2, #0]
 800d6a2:	1b09      	subs	r1, r1, r4
 800d6a4:	4616      	mov	r6, r2
 800d6a6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d6a8:	9500      	str	r5, [sp, #0]
 800d6aa:	b209      	sxth	r1, r1
 800d6ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d6ae:	47b0      	blx	r6
 800d6b0:	e75b      	b.n	800d56a <lv_draw_rect+0x942>
                        px_fp(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) + 1, mask, style->body.border.color, aa_opa);
 800d6b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d6b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d6b6:	1c59      	adds	r1, r3, #1
 800d6b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d6ba:	6c7e      	ldr	r6, [r7, #68]	; 0x44
 800d6bc:	1a98      	subs	r0, r3, r2
 800d6be:	f8db 3010 	ldr.w	r3, [fp, #16]
 800d6c2:	1b89      	subs	r1, r1, r6
 800d6c4:	4e33      	ldr	r6, [pc, #204]	; (800d794 <lv_draw_rect+0xb6c>)
 800d6c6:	1b00      	subs	r0, r0, r4
 800d6c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d6ca:	b209      	sxth	r1, r1
 800d6cc:	9500      	str	r5, [sp, #0]
 800d6ce:	6836      	ldr	r6, [r6, #0]
 800d6d0:	b200      	sxth	r0, r0
 800d6d2:	47b0      	blx	r6
 800d6d4:	e745      	b.n	800d562 <lv_draw_rect+0x93a>
                        px_fp(lb_origo.x + LV_CIRC_OCT4_X(aa_p) + 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 800d6d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d6da:	6c7e      	ldr	r6, [r7, #68]	; 0x44
 800d6dc:	1899      	adds	r1, r3, r2
 800d6de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d6e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d6e2:	1c58      	adds	r0, r3, #1
 800d6e4:	4421      	add	r1, r4
 800d6e6:	f8db 3010 	ldr.w	r3, [fp, #16]
 800d6ea:	1b80      	subs	r0, r0, r6
 800d6ec:	4e29      	ldr	r6, [pc, #164]	; (800d794 <lv_draw_rect+0xb6c>)
 800d6ee:	9500      	str	r5, [sp, #0]
 800d6f0:	b209      	sxth	r1, r1
 800d6f2:	6836      	ldr	r6, [r6, #0]
 800d6f4:	b200      	sxth	r0, r0
 800d6f6:	47b0      	blx	r6
 800d6f8:	e72f      	b.n	800d55a <lv_draw_rect+0x932>
                        px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) - 1, mask, style->body.border.color, aa_opa);
 800d6fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d6fe:	1e59      	subs	r1, r3, #1
 800d700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d702:	6c7e      	ldr	r6, [r7, #68]	; 0x44
 800d704:	1898      	adds	r0, r3, r2
 800d706:	f8db 3010 	ldr.w	r3, [fp, #16]
 800d70a:	4431      	add	r1, r6
 800d70c:	4e21      	ldr	r6, [pc, #132]	; (800d794 <lv_draw_rect+0xb6c>)
 800d70e:	4420      	add	r0, r4
 800d710:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d712:	b209      	sxth	r1, r1
 800d714:	9500      	str	r5, [sp, #0]
 800d716:	6836      	ldr	r6, [r6, #0]
 800d718:	b200      	sxth	r0, r0
 800d71a:	47b0      	blx	r6
 800d71c:	e719      	b.n	800d552 <lv_draw_rect+0x92a>
            act_w1 = cir_out.x - cir_out.y;
 800d71e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d720:	1a59      	subs	r1, r3, r1
 800d722:	b289      	uxth	r1, r1
            act_w2 = act_w1 - 1;
 800d724:	1e48      	subs	r0, r1, #1
            act_w1 = cir_out.x - cir_out.y;
 800d726:	b209      	sxth	r1, r1
 800d728:	62f9      	str	r1, [r7, #44]	; 0x2c
            act_w2 = act_w1 - 1;
 800d72a:	b201      	sxth	r1, r0
 800d72c:	6279      	str	r1, [r7, #36]	; 0x24
        if(out_x_last != cir_out.x) {
 800d72e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d730:	428b      	cmp	r3, r1
 800d732:	f47f adc7 	bne.w	800d2c4 <lv_draw_rect+0x69c>
 800d736:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d738:	f001 0805 	and.w	r8, r1, #5
 800d73c:	f001 0606 	and.w	r6, r1, #6
 800d740:	f001 0a0a 	and.w	sl, r1, #10
 800d744:	e6bf      	b.n	800d4c6 <lv_draw_rect+0x89e>
            if(lb_origo.y + LV_CIRC_OCT4_Y(cir_out) > lt_origo.y + LV_CIRC_OCT5_Y(cir_out)) {
 800d746:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800d74a:	697a      	ldr	r2, [r7, #20]
 800d74c:	18d1      	adds	r1, r2, r3
 800d74e:	69ba      	ldr	r2, [r7, #24]
 800d750:	1ad2      	subs	r2, r2, r3
 800d752:	4291      	cmp	r1, r2
 800d754:	f300 833a 	bgt.w	800ddcc <lv_draw_rect+0x11a4>
 800d758:	4a0f      	ldr	r2, [pc, #60]	; (800d798 <lv_draw_rect+0xb70>)
 800d75a:	f107 0498 	add.w	r4, r7, #152	; 0x98
 800d75e:	6815      	ldr	r5, [r2, #0]
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 800d760:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
            fill_fp(&circ_area, mask, color, opa);
 800d764:	4620      	mov	r0, r4
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 800d766:	6d7c      	ldr	r4, [r7, #84]	; 0x54
            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 800d768:	6db9      	ldr	r1, [r7, #88]	; 0x58
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 800d76a:	1aa4      	subs	r4, r4, r2
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
 800d76c:	6afe      	ldr	r6, [r7, #44]	; 0x2c
            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 800d76e:	1ac9      	subs	r1, r1, r3
            fill_fp(&circ_area, mask, color, opa);
 800d770:	6a3a      	ldr	r2, [r7, #32]
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 800d772:	b2a4      	uxth	r4, r4
            fill_fp(&circ_area, mask, color, opa);
 800d774:	6e3b      	ldr	r3, [r7, #96]	; 0x60
            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 800d776:	b209      	sxth	r1, r1
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
 800d778:	19a6      	adds	r6, r4, r6
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 800d77a:	f8a7 409a 	strh.w	r4, [r7, #154]	; 0x9a
            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 800d77e:	f8a7 1098 	strh.w	r1, [r7, #152]	; 0x98
            circ_area.x2 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 800d782:	f8a7 109c 	strh.w	r1, [r7, #156]	; 0x9c
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
 800d786:	f8a7 609e 	strh.w	r6, [r7, #158]	; 0x9e
            fill_fp(&circ_area, mask, color, opa);
 800d78a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d78c:	47a8      	blx	r5
 800d78e:	e76c      	b.n	800d66a <lv_draw_rect+0xa42>
 800d790:	0808730c 	.word	0x0808730c
 800d794:	080872f4 	.word	0x080872f4
 800d798:	080872f0 	.word	0x080872f0
 800d79c:	f8b7 a044 	ldrh.w	sl, [r7, #68]	; 0x44
    for(col = 0; col <= radius; col++) {
 800d7a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d7a2:	f10a 0301 	add.w	r3, sl, #1
 800d7a6:	b21b      	sxth	r3, r3
 800d7a8:	429a      	cmp	r2, r3
 800d7aa:	f2c0 846d 	blt.w	800e088 <lv_draw_rect+0x1460>
        point_l.y = ofs_l.y + curve_x[col];
 800d7ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d7b0:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800d7b2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d7b4:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800d7b8:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800d7bc:	eba0 000a 	sub.w	r0, r0, sl
 800d7c0:	44a2      	add	sl, r4
 800d7c2:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800d7c4:	b200      	sxth	r0, r0
 800d7c6:	4414      	add	r4, r2
 800d7c8:	fa0f fa8a 	sxth.w	sl, sl
 800d7cc:	6538      	str	r0, [r7, #80]	; 0x50
 800d7ce:	b220      	sxth	r0, r4
 800d7d0:	6578      	str	r0, [r7, #84]	; 0x54
        int16_t diff = col == 0 ? 0 : curve_x[col - 1] - curve_x[col];
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	f001 802c 	beq.w	800e830 <lv_draw_rect+0x1c08>
 800d7d8:	f831 8c02 	ldrh.w	r8, [r1, #-2]
 800d7dc:	eba8 0802 	sub.w	r8, r8, r2
 800d7e0:	fa1f f888 	uxth.w	r8, r8
 800d7e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7e6:	3301      	adds	r3, #1
 800d7e8:	647b      	str	r3, [r7, #68]	; 0x44
 800d7ea:	f7ff bb41 	b.w	800ce70 <lv_draw_rect+0x248>
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 800d7ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
            fill_fp(&circ_area, mask, color, opa);
 800d7f0:	f107 0498 	add.w	r4, r7, #152	; 0x98
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 800d7f4:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 800d7f8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d7fa:	f8b7 608a 	ldrh.w	r6, [r7, #138]	; 0x8a
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 800d7fe:	1a8a      	subs	r2, r1, r2
            fill_fp(&circ_area, mask, color, opa);
 800d800:	49a5      	ldr	r1, [pc, #660]	; (800da98 <lv_draw_rect+0xe70>)
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 800d802:	b292      	uxth	r2, r2
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 800d804:	4406      	add	r6, r0
            fill_fp(&circ_area, mask, color, opa);
 800d806:	680d      	ldr	r5, [r1, #0]
 800d808:	4620      	mov	r0, r4
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
 800d80a:	6a79      	ldr	r1, [r7, #36]	; 0x24
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 800d80c:	b236      	sxth	r6, r6
            fill_fp(&circ_area, mask, color, opa);
 800d80e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
 800d810:	4411      	add	r1, r2
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 800d812:	f8a7 209a 	strh.w	r2, [r7, #154]	; 0x9a
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 800d816:	f8a7 6098 	strh.w	r6, [r7, #152]	; 0x98
            fill_fp(&circ_area, mask, color, opa);
 800d81a:	6a3a      	ldr	r2, [r7, #32]
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
 800d81c:	f8a7 109e 	strh.w	r1, [r7, #158]	; 0x9e
            circ_area.x2 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 800d820:	f8a7 609c 	strh.w	r6, [r7, #156]	; 0x9c
            fill_fp(&circ_area, mask, color, opa);
 800d824:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d826:	47a8      	blx	r5
            if(rb_origo.y + LV_CIRC_OCT1_Y(cir_out) > rt_origo.y + LV_CIRC_OCT8_Y(cir_out)) {
 800d828:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800d82c:	697a      	ldr	r2, [r7, #20]
 800d82e:	18d1      	adds	r1, r2, r3
 800d830:	69ba      	ldr	r2, [r7, #24]
 800d832:	1ad2      	subs	r2, r2, r3
 800d834:	4291      	cmp	r1, r2
 800d836:	f77f af1c 	ble.w	800d672 <lv_draw_rect+0xa4a>
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
 800d83a:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
                fill_fp(&circ_area, mask, color, opa);
 800d83e:	4620      	mov	r0, r4
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
 800d840:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 800d842:	6d7a      	ldr	r2, [r7, #84]	; 0x54
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
 800d844:	4421      	add	r1, r4
 800d846:	6afc      	ldr	r4, [r7, #44]	; 0x2c
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 800d848:	1ad2      	subs	r2, r2, r3
                fill_fp(&circ_area, mask, color, opa);
 800d84a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
 800d84c:	b289      	uxth	r1, r1
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 800d84e:	b212      	sxth	r2, r2
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
 800d850:	1b0c      	subs	r4, r1, r4
                circ_area.x2 = rt_origo.x + LV_CIRC_OCT8_X(cir_out);
 800d852:	f8a7 109c 	strh.w	r1, [r7, #156]	; 0x9c
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 800d856:	f8a7 209a 	strh.w	r2, [r7, #154]	; 0x9a
                circ_area.y2 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 800d85a:	f8a7 209e 	strh.w	r2, [r7, #158]	; 0x9e
                fill_fp(&circ_area, mask, color, opa);
 800d85e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d860:	6a3a      	ldr	r2, [r7, #32]
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
 800d862:	f8a7 4098 	strh.w	r4, [r7, #152]	; 0x98
                fill_fp(&circ_area, mask, color, opa);
 800d866:	47a8      	blx	r5
 800d868:	e703      	b.n	800d672 <lv_draw_rect+0xa4a>
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 800d86a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
            fill_fp(&circ_area, mask, color, opa);
 800d86c:	f107 0498 	add.w	r4, r7, #152	; 0x98
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 800d870:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 800d874:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d876:	f8b7 508a 	ldrh.w	r5, [r7, #138]	; 0x8a
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 800d87a:	4411      	add	r1, r2
            fill_fp(&circ_area, mask, color, opa);
 800d87c:	f8d7 906c 	ldr.w	r9, [r7, #108]	; 0x6c
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 800d880:	fa1f fc81 	uxth.w	ip, r1
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 800d884:	1b45      	subs	r5, r0, r5
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 800d886:	6a79      	ldr	r1, [r7, #36]	; 0x24
            fill_fp(&circ_area, mask, color, opa);
 800d888:	4620      	mov	r0, r4
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 800d88a:	b22d      	sxth	r5, r5
            fill_fp(&circ_area, mask, color, opa);
 800d88c:	4a82      	ldr	r2, [pc, #520]	; (800da98 <lv_draw_rect+0xe70>)
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 800d88e:	ebac 0e01 	sub.w	lr, ip, r1
            fill_fp(&circ_area, mask, color, opa);
 800d892:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d894:	f8d2 8000 	ldr.w	r8, [r2]
 800d898:	4649      	mov	r1, r9
 800d89a:	6a3a      	ldr	r2, [r7, #32]
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out);
 800d89c:	f8a7 c09e 	strh.w	ip, [r7, #158]	; 0x9e
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 800d8a0:	f8a7 5098 	strh.w	r5, [r7, #152]	; 0x98
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 800d8a4:	f8a7 e09a 	strh.w	lr, [r7, #154]	; 0x9a
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 800d8a8:	f8a7 509c 	strh.w	r5, [r7, #156]	; 0x9c
            fill_fp(&circ_area, mask, color, opa);
 800d8ac:	47c0      	blx	r8
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 800d8ae:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 800d8b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
            fill_fp(&circ_area, mask, color, opa);
 800d8b4:	4620      	mov	r0, r4
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 800d8b6:	f8b7 5088 	ldrh.w	r5, [r7, #136]	; 0x88
            fill_fp(&circ_area, mask, color, opa);
 800d8ba:	4649      	mov	r1, r9
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 800d8bc:	6d3c      	ldr	r4, [r7, #80]	; 0x50
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 800d8be:	1b5d      	subs	r5, r3, r5
            fill_fp(&circ_area, mask, color, opa);
 800d8c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 800d8c2:	4414      	add	r4, r2
            fill_fp(&circ_area, mask, color, opa);
 800d8c4:	6a3a      	ldr	r2, [r7, #32]
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 800d8c6:	b2ad      	uxth	r5, r5
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 800d8c8:	fa0f fc84 	sxth.w	ip, r4
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT4_X(cir_out) + act_w1;
 800d8cc:	6afc      	ldr	r4, [r7, #44]	; 0x2c
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 800d8ce:	f8a7 5098 	strh.w	r5, [r7, #152]	; 0x98
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT4_X(cir_out) + act_w1;
 800d8d2:	eb05 0e04 	add.w	lr, r5, r4
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 800d8d6:	f8a7 c09a 	strh.w	ip, [r7, #154]	; 0x9a
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 800d8da:	f8a7 c09e 	strh.w	ip, [r7, #158]	; 0x9e
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT4_X(cir_out) + act_w1;
 800d8de:	f8a7 e09c 	strh.w	lr, [r7, #156]	; 0x9c
            fill_fp(&circ_area, mask, color, opa);
 800d8e2:	47c0      	blx	r8
 800d8e4:	e6bf      	b.n	800d666 <lv_draw_rect+0xa3e>
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
 800d8e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
            fill_fp(&circ_area, mask, color, opa);
 800d8e8:	f107 0498 	add.w	r4, r7, #152	; 0x98
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
 800d8ec:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 800d8f0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d8f2:	f8b7 508a 	ldrh.w	r5, [r7, #138]	; 0x8a
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
 800d8f6:	4411      	add	r1, r2
            fill_fp(&circ_area, mask, color, opa);
 800d8f8:	4a67      	ldr	r2, [pc, #412]	; (800da98 <lv_draw_rect+0xe70>)
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
 800d8fa:	fa1f fc81 	uxth.w	ip, r1
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 800d8fe:	4405      	add	r5, r0
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
 800d900:	6a79      	ldr	r1, [r7, #36]	; 0x24
            fill_fp(&circ_area, mask, color, opa);
 800d902:	4620      	mov	r0, r4
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 800d904:	b22d      	sxth	r5, r5
            fill_fp(&circ_area, mask, color, opa);
 800d906:	6e3b      	ldr	r3, [r7, #96]	; 0x60
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
 800d908:	ebac 0e01 	sub.w	lr, ip, r1
            fill_fp(&circ_area, mask, color, opa);
 800d90c:	f8d2 9000 	ldr.w	r9, [r2]
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT1_X(cir_out);
 800d910:	f8a7 c09c 	strh.w	ip, [r7, #156]	; 0x9c
            fill_fp(&circ_area, mask, color, opa);
 800d914:	6a3a      	ldr	r2, [r7, #32]
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 800d916:	f8a7 509a 	strh.w	r5, [r7, #154]	; 0x9a
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
 800d91a:	f8a7 e098 	strh.w	lr, [r7, #152]	; 0x98
            fill_fp(&circ_area, mask, color, opa);
 800d91e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 800d920:	f8a7 509e 	strh.w	r5, [r7, #158]	; 0x9e
            fill_fp(&circ_area, mask, color, opa);
 800d924:	47c8      	blx	r9
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 800d926:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 800d92a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
            fill_fp(&circ_area, mask, color, opa);
 800d92c:	4620      	mov	r0, r4
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 800d92e:	f8b7 5088 	ldrh.w	r5, [r7, #136]	; 0x88
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 800d932:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 800d934:	441d      	add	r5, r3
            fill_fp(&circ_area, mask, color, opa);
 800d936:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 800d938:	4414      	add	r4, r2
            fill_fp(&circ_area, mask, color, opa);
 800d93a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 800d93c:	b2ad      	uxth	r5, r5
            fill_fp(&circ_area, mask, color, opa);
 800d93e:	6a3a      	ldr	r2, [r7, #32]
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 800d940:	fa0f fc84 	sxth.w	ip, r4
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 800d944:	6afc      	ldr	r4, [r7, #44]	; 0x2c
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out);
 800d946:	f8a7 509e 	strh.w	r5, [r7, #158]	; 0x9e
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 800d94a:	eba5 0e04 	sub.w	lr, r5, r4
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 800d94e:	f8a7 c098 	strh.w	ip, [r7, #152]	; 0x98
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 800d952:	f8a7 c09c 	strh.w	ip, [r7, #156]	; 0x9c
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 800d956:	f8a7 e09a 	strh.w	lr, [r7, #154]	; 0x9a
            fill_fp(&circ_area, mask, color, opa);
 800d95a:	47c8      	blx	r9
 800d95c:	e67f      	b.n	800d65e <lv_draw_rect+0xa36>
    corner_size ++;
 800d95e:	3301      	adds	r3, #1
    if(part & LV_BORDER_TOP) work_area.y1 = coords->y1 + corner_size;
 800d960:	f014 0202 	ands.w	r2, r4, #2
    corner_size ++;
 800d964:	b29b      	uxth	r3, r3
    else  work_area.y1 = coords->y1 + radius;
 800d966:	bf08      	it	eq
 800d968:	4440      	addeq	r0, r8
    if(part & LV_BORDER_TOP) work_area.y1 = coords->y1 + corner_size;
 800d96a:	657a      	str	r2, [r7, #84]	; 0x54
 800d96c:	bf18      	it	ne
 800d96e:	18c0      	addne	r0, r0, r3
    corner_size ++;
 800d970:	66bb      	str	r3, [r7, #104]	; 0x68
    if(part & LV_BORDER_BOTTOM) work_area.y2 = coords->y2 - corner_size;
 800d972:	f014 0301 	ands.w	r3, r4, #1
    else  work_area.y1 = coords->y1 + radius;
 800d976:	f8a7 009a 	strh.w	r0, [r7, #154]	; 0x9a
    if(part & LV_BORDER_BOTTOM) work_area.y2 = coords->y2 - corner_size;
 800d97a:	653b      	str	r3, [r7, #80]	; 0x50
 800d97c:	f000 8250 	beq.w	800de20 <lv_draw_rect+0x11f8>
 800d980:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d982:	ebae 0e03 	sub.w	lr, lr, r3
 800d986:	f8a7 e09e 	strh.w	lr, [r7, #158]	; 0x9e
    if(part & LV_BORDER_LEFT) {
 800d98a:	0760      	lsls	r0, r4, #29
 800d98c:	f100 8319 	bmi.w	800dfc2 <lv_draw_rect+0x139a>
    if(part & LV_BORDER_RIGHT) {
 800d990:	0721      	lsls	r1, r4, #28
 800d992:	f100 8304 	bmi.w	800df9e <lv_draw_rect+0x1376>
    work_area.x1 = coords->x1 + corner_size - length_corr;
 800d996:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800d99a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d99c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800d99e:	8811      	ldrh	r1, [r2, #0]
 800d9a0:	1ac2      	subs	r2, r0, r3
    work_area.x2 = coords->x2 - corner_size + length_corr;
 800d9a2:	1a1b      	subs	r3, r3, r0
    work_area.x1 = coords->x1 + corner_size - length_corr;
 800d9a4:	440a      	add	r2, r1
    work_area.x2 = coords->x2 - corner_size + length_corr;
 800d9a6:	441d      	add	r5, r3
    if(part & LV_BORDER_TOP) {
 800d9a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    work_area.x1 = coords->x1 + corner_size - length_corr;
 800d9aa:	f8a7 2098 	strh.w	r2, [r7, #152]	; 0x98
    work_area.x2 = coords->x2 - corner_size + length_corr;
 800d9ae:	f8a7 509c 	strh.w	r5, [r7, #156]	; 0x9c
    if(part & LV_BORDER_TOP) {
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	f040 831a 	bne.w	800dfec <lv_draw_rect+0x13c4>
    if(part & LV_BORDER_BOTTOM) {
 800d9b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	f040 82dd 	bne.w	800df7a <lv_draw_rect+0x1352>
    if(length_corr != 0) {
 800d9c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d9c2:	b19b      	cbz	r3, 800d9ec <lv_draw_rect+0xdc4>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800d9c4:	f004 0306 	and.w	r3, r4, #6
 800d9c8:	2b06      	cmp	r3, #6
 800d9ca:	f000 86c9 	beq.w	800e760 <lv_draw_rect+0x1b38>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800d9ce:	f004 030a 	and.w	r3, r4, #10
 800d9d2:	2b0a      	cmp	r3, #10
 800d9d4:	f000 86a3 	beq.w	800e71e <lv_draw_rect+0x1af6>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800d9d8:	f004 0305 	and.w	r3, r4, #5
 800d9dc:	2b05      	cmp	r3, #5
 800d9de:	f000 8680 	beq.w	800e6e2 <lv_draw_rect+0x1aba>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800d9e2:	f004 0309 	and.w	r3, r4, #9
 800d9e6:	2b09      	cmp	r3, #9
 800d9e8:	f000 865d 	beq.w	800e6a6 <lv_draw_rect+0x1a7e>
    if(style->body.radius == 0) {
 800d9ec:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	f47f abcf 	bne.w	800d194 <lv_draw_rect+0x56c>
        if(part & (LV_BORDER_TOP | LV_BORDER_LEFT)) {
 800d9f6:	f014 0f06 	tst.w	r4, #6
 800d9fa:	f040 83b5 	bne.w	800e168 <lv_draw_rect+0x1540>
        if(part & (LV_BORDER_TOP | LV_BORDER_RIGHT)) {
 800d9fe:	f014 0f0a 	tst.w	r4, #10
 800da02:	f040 8399 	bne.w	800e138 <lv_draw_rect+0x1510>
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_LEFT)) {
 800da06:	f014 0f05 	tst.w	r4, #5
 800da0a:	f040 837d 	bne.w	800e108 <lv_draw_rect+0x14e0>
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_RIGHT)) {
 800da0e:	f014 0f09 	tst.w	r4, #9
 800da12:	f43f abba 	beq.w	800d18a <lv_draw_rect+0x562>
            work_area.x1 = coords->x2 - LV_ANTIALIAS;
 800da16:	6e7a      	ldr	r2, [r7, #100]	; 0x64
            fill_fp(&work_area, mask, color, opa);
 800da18:	464b      	mov	r3, r9
 800da1a:	4c1f      	ldr	r4, [pc, #124]	; (800da98 <lv_draw_rect+0xe70>)
            work_area.x1 = coords->x2 - LV_ANTIALIAS;
 800da1c:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
            work_area.y1 = coords->y2 - LV_ANTIALIAS;
 800da20:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
            work_area.x1 = coords->x2 - LV_ANTIALIAS;
 800da24:	1e4e      	subs	r6, r1, #1
            work_area.x2 = coords->x2;
 800da26:	f8a7 109c 	strh.w	r1, [r7, #156]	; 0x9c
            work_area.y1 = coords->y2 - LV_ANTIALIAS;
 800da2a:	1e45      	subs	r5, r0, #1
            work_area.y2 = coords->y2;
 800da2c:	f8a7 009e 	strh.w	r0, [r7, #158]	; 0x9e
            fill_fp(&work_area, mask, color, opa);
 800da30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800da32:	f107 0098 	add.w	r0, r7, #152	; 0x98
            work_area.x1 = coords->x2 - LV_ANTIALIAS;
 800da36:	f8a7 6098 	strh.w	r6, [r7, #152]	; 0x98
            fill_fp(&work_area, mask, color, opa);
 800da3a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
            work_area.y1 = coords->y2 - LV_ANTIALIAS;
 800da3c:	f8a7 509a 	strh.w	r5, [r7, #154]	; 0x9a
            fill_fp(&work_area, mask, color, opa);
 800da40:	6824      	ldr	r4, [r4, #0]
 800da42:	47a0      	blx	r4
 800da44:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 800da48:	f7ff bba1 	b.w	800d18e <lv_draw_rect+0x566>
    lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800da4c:	f8b7 8034 	ldrh.w	r8, [r7, #52]	; 0x34
 800da50:	46da      	mov	sl, fp
 800da52:	eba2 0908 	sub.w	r9, r2, r8
 800da56:	fa0f f989 	sxth.w	r9, r9
    for(i = 0; i  < seg_size; i++) {
 800da5a:	f1b9 0f00 	cmp.w	r9, #0
 800da5e:	f340 80d7 	ble.w	800dc10 <lv_draw_rect+0xfe8>
            px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 800da62:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
    for(i = 0; i  < seg_size; i++) {
 800da66:	2500      	movs	r5, #0
 800da68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
            px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 800da6a:	461c      	mov	r4, r3
 800da6c:	633b      	str	r3, [r7, #48]	; 0x30
 800da6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da70:	4602      	mov	r2, r0
 800da72:	f000 0b09 	and.w	fp, r0, #9
 800da76:	f000 0005 	and.w	r0, r0, #5
 800da7a:	3301      	adds	r3, #1
 800da7c:	4629      	mov	r1, r5
 800da7e:	64b8      	str	r0, [r7, #72]	; 0x48
 800da80:	18e3      	adds	r3, r4, r3
 800da82:	6e3e      	ldr	r6, [r7, #96]	; 0x60
 800da84:	f8c7 8038 	str.w	r8, [r7, #56]	; 0x38
 800da88:	627b      	str	r3, [r7, #36]	; 0x24
 800da8a:	f002 0306 	and.w	r3, r2, #6
 800da8e:	667b      	str	r3, [r7, #100]	; 0x64
 800da90:	f002 030a 	and.w	r3, r2, #10
 800da94:	64fb      	str	r3, [r7, #76]	; 0x4c
 800da96:	e010      	b.n	800daba <lv_draw_rect+0xe92>
 800da98:	080872f0 	.word	0x080872f0
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800da9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da9e:	2b05      	cmp	r3, #5
 800daa0:	f000 808c 	beq.w	800dbbc <lv_draw_rect+0xf94>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800daa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800daa6:	2b06      	cmp	r3, #6
 800daa8:	d05d      	beq.n	800db66 <lv_draw_rect+0xf3e>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800daaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800daac:	2b0a      	cmp	r3, #10
 800daae:	d034      	beq.n	800db1a <lv_draw_rect+0xef2>
 800dab0:	3501      	adds	r5, #1
    for(i = 0; i  < seg_size; i++) {
 800dab2:	b229      	sxth	r1, r5
 800dab4:	4589      	cmp	r9, r1
 800dab6:	f340 80ab 	ble.w	800dc10 <lv_draw_rect+0xfe8>
        lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800daba:	4632      	mov	r2, r6
 800dabc:	4648      	mov	r0, r9
 800dabe:	f7fc fdd1 	bl	800a664 <lv_draw_aa_get_opa>
 800dac2:	1a30      	subs	r0, r6, r0
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800dac4:	f1bb 0f09 	cmp.w	fp, #9
        lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800dac8:	b2c3      	uxtb	r3, r0
 800daca:	66bb      	str	r3, [r7, #104]	; 0x68
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800dacc:	d1e6      	bne.n	800da9c <lv_draw_rect+0xe74>
            px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 800dace:	48a3      	ldr	r0, [pc, #652]	; (800dd5c <lv_draw_rect+0x1134>)
 800dad0:	fa1f f885 	uxth.w	r8, r5
 800dad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dad6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dad8:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 800dada:	6800      	ldr	r0, [r0, #0]
 800dadc:	1899      	adds	r1, r3, r2
 800dade:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dae0:	62f8      	str	r0, [r7, #44]	; 0x2c
 800dae2:	4441      	add	r1, r8
 800dae4:	f8da 3010 	ldr.w	r3, [sl, #16]
 800dae8:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
 800daec:	b209      	sxth	r1, r1
 800daee:	9400      	str	r4, [sp, #0]
 800daf0:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800daf2:	623c      	str	r4, [r7, #32]
 800daf4:	47a0      	blx	r4
            px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask, style->body.border.color, aa_opa);
 800daf6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800daf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dafa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dafc:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 800dafe:	4408      	add	r0, r1
 800db00:	1c59      	adds	r1, r3, #1
 800db02:	f8da 3010 	ldr.w	r3, [sl, #16]
 800db06:	9400      	str	r4, [sp, #0]
 800db08:	4440      	add	r0, r8
 800db0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db0c:	b200      	sxth	r0, r0
 800db0e:	6a3c      	ldr	r4, [r7, #32]
 800db10:	4411      	add	r1, r2
 800db12:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800db14:	b209      	sxth	r1, r1
 800db16:	47a0      	blx	r4
 800db18:	e7c0      	b.n	800da9c <lv_draw_rect+0xe74>
            px_fp(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask, style->body.border.color, aa_opa);
 800db1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800db1c:	fa1f f885 	uxth.w	r8, r5
 800db20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db22:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800db24:	18d0      	adds	r0, r2, r3
 800db26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db28:	4a8c      	ldr	r2, [pc, #560]	; (800dd5c <lv_draw_rect+0x1134>)
 800db2a:	1e59      	subs	r1, r3, #1
 800db2c:	4440      	add	r0, r8
 800db2e:	6812      	ldr	r2, [r2, #0]
 800db30:	1b09      	subs	r1, r1, r4
 800db32:	f8da 3010 	ldr.w	r3, [sl, #16]
 800db36:	4614      	mov	r4, r2
 800db38:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800db3a:	b200      	sxth	r0, r0
 800db3c:	9200      	str	r2, [sp, #0]
 800db3e:	b209      	sxth	r1, r1
 800db40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800db42:	62fc      	str	r4, [r7, #44]	; 0x2c
 800db44:	47a0      	blx	r4
            px_fp(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask, style->body.border.color, aa_opa);
 800db46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800db4a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800db4c:	1ac9      	subs	r1, r1, r3
 800db4e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800db50:	f8da 3010 	ldr.w	r3, [sl, #16]
 800db54:	eba1 0108 	sub.w	r1, r1, r8
 800db58:	9000      	str	r0, [sp, #0]
 800db5a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800db5c:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
 800db60:	b209      	sxth	r1, r1
 800db62:	47a0      	blx	r4
 800db64:	e7a4      	b.n	800dab0 <lv_draw_rect+0xe88>
            px_fp(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, style->body.border.color, aa_opa);
 800db66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db68:	fa1f f885 	uxth.w	r8, r5
 800db6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db6e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800db70:	1a99      	subs	r1, r3, r2
 800db72:	4a7a      	ldr	r2, [pc, #488]	; (800dd5c <lv_draw_rect+0x1134>)
 800db74:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800db76:	3801      	subs	r0, #1
 800db78:	6812      	ldr	r2, [r2, #0]
 800db7a:	eba1 0108 	sub.w	r1, r1, r8
 800db7e:	1b00      	subs	r0, r0, r4
 800db80:	f8da 3010 	ldr.w	r3, [sl, #16]
 800db84:	4614      	mov	r4, r2
 800db86:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800db88:	b209      	sxth	r1, r1
 800db8a:	9200      	str	r2, [sp, #0]
 800db8c:	46a4      	mov	ip, r4
 800db8e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800db90:	b200      	sxth	r0, r0
 800db92:	62fc      	str	r4, [r7, #44]	; 0x2c
 800db94:	47e0      	blx	ip
            px_fp(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask, style->body.border.color, aa_opa);
 800db96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db98:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800db9a:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 800db9c:	1ac0      	subs	r0, r0, r3
 800db9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dba0:	1e59      	subs	r1, r3, #1
 800dba2:	f8da 3010 	ldr.w	r3, [sl, #16]
 800dba6:	9400      	str	r4, [sp, #0]
 800dba8:	eba0 0008 	sub.w	r0, r0, r8
 800dbac:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800dbae:	b200      	sxth	r0, r0
 800dbb0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dbb2:	1b09      	subs	r1, r1, r4
 800dbb4:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800dbb6:	b209      	sxth	r1, r1
 800dbb8:	47a0      	blx	r4
 800dbba:	e776      	b.n	800daaa <lv_draw_rect+0xe82>
            px_fp(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask, style->body.border.color, aa_opa);
 800dbbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dbbe:	fa1f f885 	uxth.w	r8, r5
 800dbc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dbc4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dbc6:	1a98      	subs	r0, r3, r2
 800dbc8:	4a64      	ldr	r2, [pc, #400]	; (800dd5c <lv_draw_rect+0x1134>)
 800dbca:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800dbcc:	3101      	adds	r1, #1
 800dbce:	6812      	ldr	r2, [r2, #0]
 800dbd0:	eba0 0008 	sub.w	r0, r0, r8
 800dbd4:	4421      	add	r1, r4
 800dbd6:	f8da 3010 	ldr.w	r3, [sl, #16]
 800dbda:	4614      	mov	r4, r2
 800dbdc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dbde:	b200      	sxth	r0, r0
 800dbe0:	9200      	str	r2, [sp, #0]
 800dbe2:	46a4      	mov	ip, r4
 800dbe4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dbe6:	b209      	sxth	r1, r1
 800dbe8:	62fc      	str	r4, [r7, #44]	; 0x2c
 800dbea:	47e0      	blx	ip
            px_fp(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 800dbec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dbf0:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 800dbf2:	4419      	add	r1, r3
 800dbf4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dbf6:	1e58      	subs	r0, r3, #1
 800dbf8:	f8da 3010 	ldr.w	r3, [sl, #16]
 800dbfc:	9400      	str	r4, [sp, #0]
 800dbfe:	4441      	add	r1, r8
 800dc00:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800dc02:	b209      	sxth	r1, r1
 800dc04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dc06:	1b00      	subs	r0, r0, r4
 800dc08:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800dc0a:	b200      	sxth	r0, r0
 800dc0c:	47a0      	blx	r4
 800dc0e:	e749      	b.n	800daa4 <lv_draw_rect+0xe7c>
    if(LV_MATH_ABS(aa_p.x - aa_p.y) == seg_size) {
 800dc10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc14:	1a9b      	subs	r3, r3, r2
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	bfb8      	it	lt
 800dc1a:	425b      	neglt	r3, r3
 800dc1c:	454b      	cmp	r3, r9
 800dc1e:	f000 8209 	beq.w	800e034 <lv_draw_rect+0x140c>
    seg_size = in_y_seg_end - in_y_seg_start;
 800dc22:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800dc26:	f8b7 8092 	ldrh.w	r8, [r7, #146]	; 0x92
 800dc2a:	64bb      	str	r3, [r7, #72]	; 0x48
 800dc2c:	eba8 0803 	sub.w	r8, r8, r3
 800dc30:	fa0f f888 	sxth.w	r8, r8
    for(i = 0; i  < seg_size; i++) {
 800dc34:	f1b8 0f00 	cmp.w	r8, #0
 800dc38:	f77f a827 	ble.w	800cc8a <lv_draw_rect+0x62>
            px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 800dc3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    for(i = 0; i  < seg_size; i++) {
 800dc3e:	2500      	movs	r5, #0
            px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 800dc40:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800dc42:	3b01      	subs	r3, #1
 800dc44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc46:	4423      	add	r3, r4
 800dc48:	f000 0105 	and.w	r1, r0, #5
 800dc4c:	f000 020a 	and.w	r2, r0, #10
 800dc50:	f000 0909 	and.w	r9, r0, #9
 800dc54:	b21b      	sxth	r3, r3
 800dc56:	66b9      	str	r1, [r7, #104]	; 0x68
 800dc58:	f000 0b06 	and.w	fp, r0, #6
 800dc5c:	4629      	mov	r1, r5
 800dc5e:	643b      	str	r3, [r7, #64]	; 0x40
 800dc60:	1e63      	subs	r3, r4, #1
 800dc62:	667a      	str	r2, [r7, #100]	; 0x64
 800dc64:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dc66:	e01f      	b.n	800dca8 <lv_draw_rect+0x1080>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800dc68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc6a:	2b05      	cmp	r3, #5
 800dc6c:	d044      	beq.n	800dcf8 <lv_draw_rect+0x10d0>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800dc6e:	f1bb 0f06 	cmp.w	fp, #6
 800dc72:	d02f      	beq.n	800dcd4 <lv_draw_rect+0x10ac>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800dc74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dc76:	2b0a      	cmp	r3, #10
 800dc78:	d050      	beq.n	800dd1c <lv_draw_rect+0x10f4>
        if(LV_CIRC_OCT1_X(aa_p) - 1 != LV_CIRC_OCT2_X(aa_p) + i) {
 800dc7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dc7e:	442b      	add	r3, r5
 800dc80:	429a      	cmp	r2, r3
 800dc82:	d00c      	beq.n	800dc9e <lv_draw_rect+0x1076>
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800dc84:	f1b9 0f09 	cmp.w	r9, #9
 800dc88:	f000 808e 	beq.w	800dda8 <lv_draw_rect+0x1180>
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800dc8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc8e:	2b05      	cmp	r3, #5
 800dc90:	d078      	beq.n	800dd84 <lv_draw_rect+0x115c>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800dc92:	f1bb 0f06 	cmp.w	fp, #6
 800dc96:	d063      	beq.n	800dd60 <lv_draw_rect+0x1138>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800dc98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dc9a:	2b0a      	cmp	r3, #10
 800dc9c:	d050      	beq.n	800dd40 <lv_draw_rect+0x1118>
 800dc9e:	3501      	adds	r5, #1
    for(i = 0; i  < seg_size; i++) {
 800dca0:	b229      	sxth	r1, r5
 800dca2:	4588      	cmp	r8, r1
 800dca4:	f77e aff1 	ble.w	800cc8a <lv_draw_rect+0x62>
        lv_opa_t aa_opa =  lv_draw_aa_get_opa(seg_size, i, opa);
 800dca8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dcaa:	4640      	mov	r0, r8
 800dcac:	f7fc fcda 	bl	800a664 <lv_draw_aa_get_opa>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800dcb0:	f1b9 0f09 	cmp.w	r9, #9
        lv_opa_t aa_opa =  lv_draw_aa_get_opa(seg_size, i, opa);
 800dcb4:	4606      	mov	r6, r0
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800dcb6:	d1d7      	bne.n	800dc68 <lv_draw_rect+0x1040>
            px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 800dcb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dcbc:	4c27      	ldr	r4, [pc, #156]	; (800dd5c <lv_draw_rect+0x1134>)
 800dcbe:	1899      	adds	r1, r3, r2
 800dcc0:	f8da 3010 	ldr.w	r3, [sl, #16]
 800dcc4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dcc6:	4429      	add	r1, r5
 800dcc8:	9000      	str	r0, [sp, #0]
 800dcca:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800dccc:	b209      	sxth	r1, r1
 800dcce:	6824      	ldr	r4, [r4, #0]
 800dcd0:	47a0      	blx	r4
 800dcd2:	e7c9      	b.n	800dc68 <lv_draw_rect+0x1040>
            px_fp(lt_origo.x + LV_CIRC_OCT5_X(aa_p) + 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, style->body.border.color, aa_opa);
 800dcd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dcd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dcd8:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800dcda:	1a99      	subs	r1, r3, r2
 800dcdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dcde:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dce0:	1c58      	adds	r0, r3, #1
 800dce2:	1b49      	subs	r1, r1, r5
 800dce4:	f8da 3010 	ldr.w	r3, [sl, #16]
 800dce8:	1b00      	subs	r0, r0, r4
 800dcea:	4c1c      	ldr	r4, [pc, #112]	; (800dd5c <lv_draw_rect+0x1134>)
 800dcec:	b209      	sxth	r1, r1
 800dcee:	9600      	str	r6, [sp, #0]
 800dcf0:	b200      	sxth	r0, r0
 800dcf2:	6824      	ldr	r4, [r4, #0]
 800dcf4:	47a0      	blx	r4
 800dcf6:	e7bd      	b.n	800dc74 <lv_draw_rect+0x104c>
            px_fp(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) - 1, mask, style->body.border.color, aa_opa);
 800dcf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dcfc:	1e59      	subs	r1, r3, #1
 800dcfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dd00:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800dd02:	1a98      	subs	r0, r3, r2
 800dd04:	f8da 3010 	ldr.w	r3, [sl, #16]
 800dd08:	4421      	add	r1, r4
 800dd0a:	4c14      	ldr	r4, [pc, #80]	; (800dd5c <lv_draw_rect+0x1134>)
 800dd0c:	1b40      	subs	r0, r0, r5
 800dd0e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dd10:	b209      	sxth	r1, r1
 800dd12:	9600      	str	r6, [sp, #0]
 800dd14:	b200      	sxth	r0, r0
 800dd16:	6824      	ldr	r4, [r4, #0]
 800dd18:	47a0      	blx	r4
 800dd1a:	e7a8      	b.n	800dc6e <lv_draw_rect+0x1046>
            px_fp(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) + 1, mask, style->body.border.color, aa_opa);
 800dd1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd20:	1c59      	adds	r1, r3, #1
 800dd22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd24:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800dd26:	1898      	adds	r0, r3, r2
 800dd28:	f8da 3010 	ldr.w	r3, [sl, #16]
 800dd2c:	1b09      	subs	r1, r1, r4
 800dd2e:	4c0b      	ldr	r4, [pc, #44]	; (800dd5c <lv_draw_rect+0x1134>)
 800dd30:	4428      	add	r0, r5
 800dd32:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dd34:	b209      	sxth	r1, r1
 800dd36:	9600      	str	r6, [sp, #0]
 800dd38:	b200      	sxth	r0, r0
 800dd3a:	6824      	ldr	r4, [r4, #0]
 800dd3c:	47a0      	blx	r4
 800dd3e:	e79c      	b.n	800dc7a <lv_draw_rect+0x1052>
                px_fp(rt_origo.x + LV_CIRC_OCT8_X(aa_p) - 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask, style->body.border.color, aa_opa);
 800dd40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd44:	4c05      	ldr	r4, [pc, #20]	; (800dd5c <lv_draw_rect+0x1134>)
 800dd46:	1a99      	subs	r1, r3, r2
 800dd48:	f8da 3010 	ldr.w	r3, [sl, #16]
 800dd4c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dd4e:	1b49      	subs	r1, r1, r5
 800dd50:	9600      	str	r6, [sp, #0]
 800dd52:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800dd54:	b209      	sxth	r1, r1
 800dd56:	6824      	ldr	r4, [r4, #0]
 800dd58:	47a0      	blx	r4
 800dd5a:	e7a0      	b.n	800dc9e <lv_draw_rect+0x1076>
 800dd5c:	080872f4 	.word	0x080872f4
                px_fp(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) + 1, mask, style->body.border.color, aa_opa);
 800dd60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd64:	1c59      	adds	r1, r3, #1
 800dd66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dd68:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800dd6a:	1a98      	subs	r0, r3, r2
 800dd6c:	f8da 3010 	ldr.w	r3, [sl, #16]
 800dd70:	1b09      	subs	r1, r1, r4
 800dd72:	4cae      	ldr	r4, [pc, #696]	; (800e02c <lv_draw_rect+0x1404>)
 800dd74:	1b40      	subs	r0, r0, r5
 800dd76:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dd78:	b209      	sxth	r1, r1
 800dd7a:	9600      	str	r6, [sp, #0]
 800dd7c:	b200      	sxth	r0, r0
 800dd7e:	6824      	ldr	r4, [r4, #0]
 800dd80:	47a0      	blx	r4
 800dd82:	e789      	b.n	800dc98 <lv_draw_rect+0x1070>
                px_fp(lb_origo.x + LV_CIRC_OCT4_X(aa_p) + 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 800dd84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd88:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800dd8a:	1899      	adds	r1, r3, r2
 800dd8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dd8e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dd90:	1c58      	adds	r0, r3, #1
 800dd92:	4429      	add	r1, r5
 800dd94:	f8da 3010 	ldr.w	r3, [sl, #16]
 800dd98:	1b00      	subs	r0, r0, r4
 800dd9a:	4ca4      	ldr	r4, [pc, #656]	; (800e02c <lv_draw_rect+0x1404>)
 800dd9c:	b209      	sxth	r1, r1
 800dd9e:	9600      	str	r6, [sp, #0]
 800dda0:	b200      	sxth	r0, r0
 800dda2:	6824      	ldr	r4, [r4, #0]
 800dda4:	47a0      	blx	r4
 800dda6:	e774      	b.n	800dc92 <lv_draw_rect+0x106a>
                px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) - 1, mask, style->body.border.color, aa_opa);
 800dda8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ddac:	1e59      	subs	r1, r3, #1
 800ddae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddb0:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800ddb2:	1898      	adds	r0, r3, r2
 800ddb4:	f8da 3010 	ldr.w	r3, [sl, #16]
 800ddb8:	4421      	add	r1, r4
 800ddba:	4c9c      	ldr	r4, [pc, #624]	; (800e02c <lv_draw_rect+0x1404>)
 800ddbc:	4428      	add	r0, r5
 800ddbe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ddc0:	b209      	sxth	r1, r1
 800ddc2:	9600      	str	r6, [sp, #0]
 800ddc4:	b200      	sxth	r0, r0
 800ddc6:	6824      	ldr	r4, [r4, #0]
 800ddc8:	47a0      	blx	r4
 800ddca:	e75f      	b.n	800dc8c <lv_draw_rect+0x1064>
                circ_area.y1 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 800ddcc:	6d79      	ldr	r1, [r7, #84]	; 0x54
                fill_fp(&circ_area, mask, color, opa);
 800ddce:	f107 0498 	add.w	r4, r7, #152	; 0x98
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
 800ddd2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ddd4:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
                circ_area.y1 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 800ddd8:	1acb      	subs	r3, r1, r3
                fill_fp(&circ_area, mask, color, opa);
 800ddda:	4995      	ldr	r1, [pc, #596]	; (800e030 <lv_draw_rect+0x1408>)
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
 800dddc:	1a82      	subs	r2, r0, r2
                circ_area.y1 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 800ddde:	b21b      	sxth	r3, r3
                fill_fp(&circ_area, mask, color, opa);
 800dde0:	680d      	ldr	r5, [r1, #0]
 800dde2:	4620      	mov	r0, r4
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
 800dde4:	b292      	uxth	r2, r2
                circ_area.x2 = lt_origo.x + LV_CIRC_OCT5_X(cir_out) + act_w2;
 800dde6:	6a79      	ldr	r1, [r7, #36]	; 0x24
                circ_area.y1 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 800dde8:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
                circ_area.x2 = lt_origo.x + LV_CIRC_OCT5_X(cir_out) + act_w2;
 800ddec:	1856      	adds	r6, r2, r1
                circ_area.y2 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 800ddee:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
 800ddf2:	f8a7 2098 	strh.w	r2, [r7, #152]	; 0x98
                fill_fp(&circ_area, mask, color, opa);
 800ddf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ddf8:	6a3a      	ldr	r2, [r7, #32]
 800ddfa:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
                circ_area.x2 = lt_origo.x + LV_CIRC_OCT5_X(cir_out) + act_w2;
 800ddfc:	f8a7 609c 	strh.w	r6, [r7, #156]	; 0x9c
                fill_fp(&circ_area, mask, color, opa);
 800de00:	47a8      	blx	r5
 800de02:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800de06:	e4ab      	b.n	800d760 <lv_draw_rect+0xb38>
            for(i = 0; i  < seg_size; i++) {
 800de08:	647a      	str	r2, [r7, #68]	; 0x44
 800de0a:	e422      	b.n	800d652 <lv_draw_rect+0xa2a>
 800de0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
            for(i = 0; i  < seg_size; i++) {
 800de0e:	643b      	str	r3, [r7, #64]	; 0x40
 800de10:	f001 0805 	and.w	r8, r1, #5
 800de14:	f001 0606 	and.w	r6, r1, #6
 800de18:	f001 0a0a 	and.w	sl, r1, #10
 800de1c:	f7ff bb51 	b.w	800d4c2 <lv_draw_rect+0x89a>
    else work_area.y2 = coords->y2 - radius;
 800de20:	ebae 0e08 	sub.w	lr, lr, r8
 800de24:	f8a7 e09e 	strh.w	lr, [r7, #158]	; 0x9e
 800de28:	e5af      	b.n	800d98a <lv_draw_rect+0xd62>
    if(r >= (h >> 1)) {
 800de2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de2c:	105a      	asrs	r2, r3, #1
 800de2e:	2a00      	cmp	r2, #0
 800de30:	f73f a969 	bgt.w	800d106 <lv_draw_rect+0x4de>
 800de34:	f7ff b957 	b.w	800d0e6 <lv_draw_rect+0x4be>
 800de38:	ea4f 0069 	mov.w	r0, r9, asr #1
 800de3c:	2800      	cmp	r0, #0
 800de3e:	f73f a887 	bgt.w	800cf50 <lv_draw_rect+0x328>
 800de42:	f7ff b87e 	b.w	800cf42 <lv_draw_rect+0x31a>
 800de46:	1052      	asrs	r2, r2, #1
 800de48:	4294      	cmp	r4, r2
 800de4a:	f6ff a9df 	blt.w	800d20c <lv_draw_rect+0x5e4>
 800de4e:	f7ff b9d4 	b.w	800d1fa <lv_draw_rect+0x5d2>
 800de52:	1052      	asrs	r2, r2, #1
 800de54:	2a00      	cmp	r2, #0
 800de56:	f77f a9d0 	ble.w	800d1fa <lv_draw_rect+0x5d2>
    if(r > 0) r -= LV_ANTIALIAS;
 800de5a:	643c      	str	r4, [r7, #64]	; 0x40
 800de5c:	f7ff b9da 	b.w	800d214 <lv_draw_rect+0x5ec>
        work_area.y2 = coords->y2 - radius;
 800de60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        work_area.y1 = coords->y1 + radius;
 800de62:	448c      	add	ip, r1
        work_area.y2 = coords->y2 - radius;
 800de64:	1a5b      	subs	r3, r3, r1
        work_area.y1 = coords->y1 + radius;
 800de66:	fa1f f18c 	uxth.w	r1, ip
        work_area.y2 = coords->y2 - radius;
 800de6a:	b29b      	uxth	r3, r3
        work_area.y1 = coords->y1 + radius;
 800de6c:	f8a7 109a 	strh.w	r1, [r7, #154]	; 0x9a
        work_area.y2 = coords->y2 - radius;
 800de70:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
        if(style->body.radius != 0) {
 800de74:	b12e      	cbz	r6, 800de82 <lv_draw_rect+0x125a>
            work_area.y1 += 2;
 800de76:	3102      	adds	r1, #2
            work_area.y2 -= 2;
 800de78:	3b02      	subs	r3, #2
            work_area.y1 += 2;
 800de7a:	f8a7 109a 	strh.w	r1, [r7, #154]	; 0x9a
            work_area.y2 -= 2;
 800de7e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
        fill_fp(&work_area, mask, mcolor, opa);
 800de82:	4b6b      	ldr	r3, [pc, #428]	; (800e030 <lv_draw_rect+0x1408>)
 800de84:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800de86:	4618      	mov	r0, r3
 800de88:	4643      	mov	r3, r8
 800de8a:	6804      	ldr	r4, [r0, #0]
 800de8c:	f107 0098 	add.w	r0, r7, #152	; 0x98
 800de90:	47a0      	blx	r4
 800de92:	f9ba 600c 	ldrsh.w	r6, [sl, #12]
        if(style->body.radius != 0) {
 800de96:	2e00      	cmp	r6, #0
 800de98:	f43e aeeb 	beq.w	800cc72 <lv_draw_rect+0x4a>
 800de9c:	f7ff b8db 	b.w	800d056 <lv_draw_rect+0x42e>
            work_area.y1 = coords->y2 - bwidth;
 800dea0:	6e78      	ldr	r0, [r7, #100]	; 0x64
            fill_fp(&work_area, mask, color, opa);
 800dea2:	464b      	mov	r3, r9
 800dea4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
            work_area.y1 = coords->y2 - bwidth;
 800dea6:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
            work_area.x1 = coords->x1;
 800deaa:	8804      	ldrh	r4, [r0, #0]
            work_area.y1 = coords->y2 - bwidth;
 800deac:	eba1 0b0b 	sub.w	fp, r1, fp
            work_area.x2 = coords->x2;
 800deb0:	8885      	ldrh	r5, [r0, #4]
            work_area.x1 = coords->x1;
 800deb2:	f8a7 4098 	strh.w	r4, [r7, #152]	; 0x98
            fill_fp(&work_area, mask, color, opa);
 800deb6:	f107 0098 	add.w	r0, r7, #152	; 0x98
 800deba:	4c5d      	ldr	r4, [pc, #372]	; (800e030 <lv_draw_rect+0x1408>)
            work_area.y2 = coords->y2;
 800debc:	f8a7 109e 	strh.w	r1, [r7, #158]	; 0x9e
            work_area.y1 = coords->y2 - bwidth;
 800dec0:	f8a7 b09a 	strh.w	fp, [r7, #154]	; 0x9a
            fill_fp(&work_area, mask, color, opa);
 800dec4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
            work_area.x2 = coords->x2;
 800dec6:	f8a7 509c 	strh.w	r5, [r7, #156]	; 0x9c
            fill_fp(&work_area, mask, color, opa);
 800deca:	6824      	ldr	r4, [r4, #0]
 800decc:	47a0      	blx	r4
 800dece:	f7ff b95c 	b.w	800d18a <lv_draw_rect+0x562>
            fill_fp(&work_area, mask, color, opa);
 800ded2:	4b57      	ldr	r3, [pc, #348]	; (800e030 <lv_draw_rect+0x1408>)
            work_area.y2 = coords->y1 + bwidth;
 800ded4:	4458      	add	r0, fp
            work_area.y1 = coords->y1;
 800ded6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
            fill_fp(&work_area, mask, color, opa);
 800deda:	f107 0698 	add.w	r6, r7, #152	; 0x98
 800dede:	4619      	mov	r1, r3
 800dee0:	653b      	str	r3, [r7, #80]	; 0x50
            work_area.x1 = coords->x1;
 800dee2:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
            fill_fp(&work_area, mask, color, opa);
 800dee6:	6809      	ldr	r1, [r1, #0]
            work_area.x1 = coords->x1;
 800dee8:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
            fill_fp(&work_area, mask, color, opa);
 800deec:	464b      	mov	r3, r9
            work_area.y2 = coords->y1 + bwidth;
 800deee:	f8a7 009e 	strh.w	r0, [r7, #158]	; 0x9e
            fill_fp(&work_area, mask, color, opa);
 800def2:	460d      	mov	r5, r1
            work_area.y1 = coords->y1;
 800def4:	f8a7 209a 	strh.w	r2, [r7, #154]	; 0x9a
            fill_fp(&work_area, mask, color, opa);
 800def8:	4630      	mov	r0, r6
 800defa:	65b9      	str	r1, [r7, #88]	; 0x58
            work_area.x2 = coords->x2;
 800defc:	f8a7 c09c 	strh.w	ip, [r7, #156]	; 0x9c
            fill_fp(&work_area, mask, color, opa);
 800df00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800df02:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800df04:	47a8      	blx	r5
        if(part & LV_BORDER_RIGHT) {
 800df06:	0723      	lsls	r3, r4, #28
 800df08:	f140 845f 	bpl.w	800e7ca <lv_draw_rect+0x1ba2>
            work_area.x1 = coords->x2 - bwidth;
 800df0c:	6e7d      	ldr	r5, [r7, #100]	; 0x64
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800df0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
            work_area.x1 = coords->x2 - bwidth;
 800df10:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800df14:	8868      	ldrh	r0, [r5, #2]
            work_area.x1 = coords->x2 - bwidth;
 800df16:	eba3 020b 	sub.w	r2, r3, fp
 800df1a:	f8b5 e006 	ldrh.w	lr, [r5, #6]
            work_area.x2 = coords->x2;
 800df1e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
            work_area.x1 = coords->x2 - bwidth;
 800df22:	f8a7 2098 	strh.w	r2, [r7, #152]	; 0x98
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800df26:	f014 0301 	ands.w	r3, r4, #1
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800df2a:	4408      	add	r0, r1
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800df2c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800df2e:	bf08      	it	eq
 800df30:	f04f 0c00 	moveq.w	ip, #0
 800df34:	65fb      	str	r3, [r7, #92]	; 0x5c
 800df36:	bf18      	it	ne
 800df38:	468c      	movne	ip, r1
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800df3a:	f8a7 009a 	strh.w	r0, [r7, #154]	; 0x9a
            fill_fp(&work_area, mask, color, opa);
 800df3e:	464b      	mov	r3, r9
 800df40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800df42:	ebae 0e0c 	sub.w	lr, lr, ip
            fill_fp(&work_area, mask, color, opa);
 800df46:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800df48:	4630      	mov	r0, r6
 800df4a:	6dbd      	ldr	r5, [r7, #88]	; 0x58
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800df4c:	f8a7 e09e 	strh.w	lr, [r7, #158]	; 0x9e
            fill_fp(&work_area, mask, color, opa);
 800df50:	47a8      	blx	r5
        if(part & LV_BORDER_LEFT) {
 800df52:	0764      	lsls	r4, r4, #29
 800df54:	f57f a915 	bpl.w	800d182 <lv_draw_rect+0x55a>
            work_area.x1 = coords->x1;
 800df58:	6e78      	ldr	r0, [r7, #100]	; 0x64
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800df5a:	f1b8 0f00 	cmp.w	r8, #0
 800df5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
            work_area.x1 = coords->x1;
 800df60:	f9b0 2000 	ldrsh.w	r2, [r0]
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800df64:	bf08      	it	eq
 800df66:	2100      	moveq	r1, #0
 800df68:	8843      	ldrh	r3, [r0, #2]
            work_area.x2 = coords->x1 + bwidth;
 800df6a:	eb0b 0002 	add.w	r0, fp, r2
            work_area.x1 = coords->x1;
 800df6e:	f8a7 2098 	strh.w	r2, [r7, #152]	; 0x98
            work_area.x2 = coords->x1 + bwidth;
 800df72:	f8a7 009c 	strh.w	r0, [r7, #156]	; 0x9c
 800df76:	f7ff b8ee 	b.w	800d156 <lv_draw_rect+0x52e>
        work_area.y2 = coords->y2;
 800df7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
        fill_fp(&work_area, mask, color, opa);
 800df7c:	4d2c      	ldr	r5, [pc, #176]	; (800e030 <lv_draw_rect+0x1408>)
        work_area.y2 = coords->y2;
 800df7e:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
        fill_fp(&work_area, mask, color, opa);
 800df82:	464b      	mov	r3, r9
 800df84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
        work_area.y1 = work_area.y2 - bwidth;
 800df86:	eba1 000b 	sub.w	r0, r1, fp
        work_area.y2 = coords->y2;
 800df8a:	f8a7 109e 	strh.w	r1, [r7, #158]	; 0x9e
        fill_fp(&work_area, mask, color, opa);
 800df8e:	682d      	ldr	r5, [r5, #0]
        work_area.y1 = work_area.y2 - bwidth;
 800df90:	f8a7 009a 	strh.w	r0, [r7, #154]	; 0x9a
        fill_fp(&work_area, mask, color, opa);
 800df94:	f107 0098 	add.w	r0, r7, #152	; 0x98
 800df98:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800df9a:	47a8      	blx	r5
 800df9c:	e510      	b.n	800d9c0 <lv_draw_rect+0xd98>
        work_area.x1 = work_area.x2 - bwidth;
 800df9e:	eba5 010b 	sub.w	r1, r5, fp
 800dfa2:	f107 06a0 	add.w	r6, r7, #160	; 0xa0
        fill_fp(&work_area, mask, color, opa);
 800dfa6:	4d22      	ldr	r5, [pc, #136]	; (800e030 <lv_draw_rect+0x1408>)
 800dfa8:	464b      	mov	r3, r9
        work_area.x1 = work_area.x2 - bwidth;
 800dfaa:	f826 1d08 	strh.w	r1, [r6, #-8]!
        fill_fp(&work_area, mask, color, opa);
 800dfae:	4630      	mov	r0, r6
 800dfb0:	682d      	ldr	r5, [r5, #0]
        work_area.x2 = coords->x2;
 800dfb2:	f8a7 c09c 	strh.w	ip, [r7, #156]	; 0x9c
        fill_fp(&work_area, mask, color, opa);
 800dfb6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dfb8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800dfba:	47a8      	blx	r5
 800dfbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dfbe:	889d      	ldrh	r5, [r3, #4]
 800dfc0:	e4e9      	b.n	800d996 <lv_draw_rect+0xd6e>
        work_area.x1 = coords->x1;
 800dfc2:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
        work_area.x2 = work_area.x1 + bwidth;
 800dfc6:	445e      	add	r6, fp
        fill_fp(&work_area, mask, color, opa);
 800dfc8:	4919      	ldr	r1, [pc, #100]	; (800e030 <lv_draw_rect+0x1408>)
 800dfca:	f107 0098 	add.w	r0, r7, #152	; 0x98
        work_area.x1 = coords->x1;
 800dfce:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
        fill_fp(&work_area, mask, color, opa);
 800dfd2:	464b      	mov	r3, r9
 800dfd4:	680d      	ldr	r5, [r1, #0]
        work_area.x2 = work_area.x1 + bwidth;
 800dfd6:	f8a7 609c 	strh.w	r6, [r7, #156]	; 0x9c
        fill_fp(&work_area, mask, color, opa);
 800dfda:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dfdc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800dfde:	47a8      	blx	r5
 800dfe0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dfe2:	f9b3 c004 	ldrsh.w	ip, [r3, #4]
 800dfe6:	fa1f f58c 	uxth.w	r5, ip
 800dfea:	e4d1      	b.n	800d990 <lv_draw_rect+0xd68>
        work_area.y1 = coords->y1;
 800dfec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
        fill_fp(&work_area, mask, color, opa);
 800dfee:	4d10      	ldr	r5, [pc, #64]	; (800e030 <lv_draw_rect+0x1408>)
        work_area.y1 = coords->y1;
 800dff0:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
        fill_fp(&work_area, mask, color, opa);
 800dff4:	464b      	mov	r3, r9
 800dff6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
        work_area.y2 = coords->y1 + bwidth;
 800dff8:	eb0b 0001 	add.w	r0, fp, r1
        work_area.y1 = coords->y1;
 800dffc:	f8a7 109a 	strh.w	r1, [r7, #154]	; 0x9a
        fill_fp(&work_area, mask, color, opa);
 800e000:	682d      	ldr	r5, [r5, #0]
        work_area.y2 = coords->y1 + bwidth;
 800e002:	f8a7 009e 	strh.w	r0, [r7, #158]	; 0x9e
        fill_fp(&work_area, mask, color, opa);
 800e006:	f107 0098 	add.w	r0, r7, #152	; 0x98
 800e00a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e00c:	47a8      	blx	r5
 800e00e:	e4d3      	b.n	800d9b8 <lv_draw_rect+0xd90>
 800e010:	4b07      	ldr	r3, [pc, #28]	; (800e030 <lv_draw_rect+0x1408>)
            work_area.x1 = coords->x2 - bwidth;
 800e012:	eba5 050b 	sub.w	r5, r5, fp
            work_area.x2 = coords->x2;
 800e016:	f8a7 c09c 	strh.w	ip, [r7, #156]	; 0x9c
 800e01a:	f107 0698 	add.w	r6, r7, #152	; 0x98
 800e01e:	653b      	str	r3, [r7, #80]	; 0x50
 800e020:	681b      	ldr	r3, [r3, #0]
            work_area.x1 = coords->x2 - bwidth;
 800e022:	f8a7 5098 	strh.w	r5, [r7, #152]	; 0x98
 800e026:	65bb      	str	r3, [r7, #88]	; 0x58
 800e028:	e77d      	b.n	800df26 <lv_draw_rect+0x12fe>
 800e02a:	bf00      	nop
 800e02c:	080872f4 	.word	0x080872f4
 800e030:	080872f0 	.word	0x080872f0
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800e034:	6abb      	ldr	r3, [r7, #40]	; 0x28
        lv_opa_t aa_opa = opa >> 1;
 800e036:	6e3a      	ldr	r2, [r7, #96]	; 0x60
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800e038:	f003 0309 	and.w	r3, r3, #9
        lv_opa_t aa_opa = opa >> 1;
 800e03c:	0855      	lsrs	r5, r2, #1
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800e03e:	2b09      	cmp	r3, #9
 800e040:	f000 83e6 	beq.w	800e810 <lv_draw_rect+0x1be8>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800e044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e046:	f003 0305 	and.w	r3, r3, #5
 800e04a:	2b05      	cmp	r3, #5
 800e04c:	f000 83d0 	beq.w	800e7f0 <lv_draw_rect+0x1bc8>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800e050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e052:	f003 0306 	and.w	r3, r3, #6
 800e056:	2b06      	cmp	r3, #6
 800e058:	f000 83a7 	beq.w	800e7aa <lv_draw_rect+0x1b82>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800e05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e05e:	f003 030a 	and.w	r3, r3, #10
 800e062:	2b0a      	cmp	r3, #10
 800e064:	f47f addd 	bne.w	800dc22 <lv_draw_rect+0xffa>
            px_fp(rt_origo.x + LV_CIRC_OCT8_X(aa_p), rt_origo.y + LV_CIRC_OCT8_Y(aa_p), mask, style->body.border.color, aa_opa);
 800e068:	f8b7 0040 	ldrh.w	r0, [r7, #64]	; 0x40
 800e06c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e06e:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 800e070:	1a09      	subs	r1, r1, r0
 800e072:	4cba      	ldr	r4, [pc, #744]	; (800e35c <lv_draw_rect+0x1734>)
 800e074:	4430      	add	r0, r6
 800e076:	f8da 3010 	ldr.w	r3, [sl, #16]
 800e07a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e07c:	b209      	sxth	r1, r1
 800e07e:	9500      	str	r5, [sp, #0]
 800e080:	b200      	sxth	r0, r0
 800e082:	6824      	ldr	r4, [r4, #0]
 800e084:	47a0      	blx	r4
 800e086:	e5cc      	b.n	800dc22 <lv_draw_rect+0xffa>
 800e088:	f8d7 b018 	ldr.w	fp, [r7, #24]
 800e08c:	f8d7 a05c 	ldr.w	sl, [r7, #92]	; 0x5c
    area_mid.x2 = ofs_r.x - 1;
 800e090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    area_mid.x1 = ofs_l.x + 1;
 800e092:	6aba      	ldr	r2, [r7, #40]	; 0x28
    area_mid.x2 = ofs_r.x - 1;
 800e094:	3b01      	subs	r3, #1
    area_mid.y1 = ofs_l.y + radius;
 800e096:	69f9      	ldr	r1, [r7, #28]
    area_mid.x1 = ofs_l.x + 1;
 800e098:	3201      	adds	r2, #1
    area_mid.x2 = ofs_r.x - 1;
 800e09a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
    for(d = 0; d < swidth; d++) {
 800e09e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    area_mid.y1 = ofs_l.y + radius;
 800e0a0:	f8a7 109a 	strh.w	r1, [r7, #154]	; 0x9a
    for(d = 0; d < swidth; d++) {
 800e0a4:	2b00      	cmp	r3, #0
    area_mid.x1 = ofs_l.x + 1;
 800e0a6:	f8a7 2098 	strh.w	r2, [r7, #152]	; 0x98
    area_mid.y2 = area_mid.y1;
 800e0aa:	f8a7 109e 	strh.w	r1, [r7, #158]	; 0x9e
    for(d = 0; d < swidth; d++) {
 800e0ae:	dd27      	ble.n	800e100 <lv_draw_rect+0x14d8>
 800e0b0:	4bab      	ldr	r3, [pc, #684]	; (800e360 <lv_draw_rect+0x1738>)
 800e0b2:	2400      	movs	r4, #0
 800e0b4:	f8c7 b068 	str.w	fp, [r7, #104]	; 0x68
 800e0b8:	f107 0698 	add.w	r6, r7, #152	; 0x98
 800e0bc:	681d      	ldr	r5, [r3, #0]
 800e0be:	4621      	mov	r1, r4
 800e0c0:	f8d7 8058 	ldr.w	r8, [r7, #88]	; 0x58
 800e0c4:	f8d7 902c 	ldr.w	r9, [r7, #44]	; 0x2c
 800e0c8:	f8d7 b06c 	ldr.w	fp, [r7, #108]	; 0x6c
 800e0cc:	3401      	adds	r4, #1
        fill_fp(&area_mid, mask, style->body.shadow.color, line_1d_blur[d]);
 800e0ce:	f819 3001 	ldrb.w	r3, [r9, r1]
 800e0d2:	f8da 2018 	ldr.w	r2, [sl, #24]
 800e0d6:	4659      	mov	r1, fp
 800e0d8:	4630      	mov	r0, r6
    for(d = 0; d < swidth; d++) {
 800e0da:	b2a4      	uxth	r4, r4
        fill_fp(&area_mid, mask, style->body.shadow.color, line_1d_blur[d]);
 800e0dc:	47a8      	blx	r5
        area_mid.y1 ++;
 800e0de:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
        area_mid.y2 ++;
 800e0e2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
    for(d = 0; d < swidth; d++) {
 800e0e6:	45a0      	cmp	r8, r4
        area_mid.y1 ++;
 800e0e8:	f102 0201 	add.w	r2, r2, #1
    for(d = 0; d < swidth; d++) {
 800e0ec:	4621      	mov	r1, r4
        area_mid.y2 ++;
 800e0ee:	f103 0301 	add.w	r3, r3, #1
        area_mid.y1 ++;
 800e0f2:	f8a7 209a 	strh.w	r2, [r7, #154]	; 0x9a
        area_mid.y2 ++;
 800e0f6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    for(d = 0; d < swidth; d++) {
 800e0fa:	dce7      	bgt.n	800e0cc <lv_draw_rect+0x14a4>
 800e0fc:	f8d7 b068 	ldr.w	fp, [r7, #104]	; 0x68
 800e100:	f8d7 d020 	ldr.w	sp, [r7, #32]
 800e104:	f7fe bdab 	b.w	800cc5e <lv_draw_rect+0x36>
            work_area.x1 = coords->x1;
 800e108:	6e7a      	ldr	r2, [r7, #100]	; 0x64
            fill_fp(&work_area, mask, color, opa);
 800e10a:	464b      	mov	r3, r9
 800e10c:	4d94      	ldr	r5, [pc, #592]	; (800e360 <lv_draw_rect+0x1738>)
            work_area.x1 = coords->x1;
 800e10e:	f9b2 6000 	ldrsh.w	r6, [r2]
            work_area.y1 = coords->y2 - LV_ANTIALIAS;
 800e112:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
            work_area.x2 = coords->x1 + LV_ANTIALIAS;
 800e116:	1c71      	adds	r1, r6, #1
            work_area.x1 = coords->x1;
 800e118:	f8a7 6098 	strh.w	r6, [r7, #152]	; 0x98
            work_area.y1 = coords->y2 - LV_ANTIALIAS;
 800e11c:	1e46      	subs	r6, r0, #1
            work_area.y2 = coords->y2;
 800e11e:	f8a7 009e 	strh.w	r0, [r7, #158]	; 0x9e
            work_area.x2 = coords->x1 + LV_ANTIALIAS;
 800e122:	f8a7 109c 	strh.w	r1, [r7, #156]	; 0x9c
            fill_fp(&work_area, mask, color, opa);
 800e126:	f107 0098 	add.w	r0, r7, #152	; 0x98
 800e12a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e12c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
            work_area.y1 = coords->y2 - LV_ANTIALIAS;
 800e12e:	f8a7 609a 	strh.w	r6, [r7, #154]	; 0x9a
            fill_fp(&work_area, mask, color, opa);
 800e132:	682d      	ldr	r5, [r5, #0]
 800e134:	47a8      	blx	r5
 800e136:	e46a      	b.n	800da0e <lv_draw_rect+0xde6>
            work_area.x1 = coords->x2 - LV_ANTIALIAS;
 800e138:	6e7a      	ldr	r2, [r7, #100]	; 0x64
            fill_fp(&work_area, mask, color, opa);
 800e13a:	464b      	mov	r3, r9
 800e13c:	4d88      	ldr	r5, [pc, #544]	; (800e360 <lv_draw_rect+0x1738>)
            work_area.x1 = coords->x2 - LV_ANTIALIAS;
 800e13e:	f9b2 6004 	ldrsh.w	r6, [r2, #4]
            work_area.y1 = coords->y1;
 800e142:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
            work_area.x1 = coords->x2 - LV_ANTIALIAS;
 800e146:	1e71      	subs	r1, r6, #1
            work_area.x2 = coords->x2;
 800e148:	f8a7 609c 	strh.w	r6, [r7, #156]	; 0x9c
            work_area.y2 = coords->y1 + LV_ANTIALIAS;
 800e14c:	1c46      	adds	r6, r0, #1
            work_area.y1 = coords->y1;
 800e14e:	f8a7 009a 	strh.w	r0, [r7, #154]	; 0x9a
            work_area.x1 = coords->x2 - LV_ANTIALIAS;
 800e152:	f8a7 1098 	strh.w	r1, [r7, #152]	; 0x98
            fill_fp(&work_area, mask, color, opa);
 800e156:	f107 0098 	add.w	r0, r7, #152	; 0x98
 800e15a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e15c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
            work_area.y2 = coords->y1 + LV_ANTIALIAS;
 800e15e:	f8a7 609e 	strh.w	r6, [r7, #158]	; 0x9e
            fill_fp(&work_area, mask, color, opa);
 800e162:	682d      	ldr	r5, [r5, #0]
 800e164:	47a8      	blx	r5
 800e166:	e44e      	b.n	800da06 <lv_draw_rect+0xdde>
            work_area.x1 = coords->x1;
 800e168:	6e7a      	ldr	r2, [r7, #100]	; 0x64
            fill_fp(&work_area, mask, color, opa);
 800e16a:	464b      	mov	r3, r9
 800e16c:	4d7c      	ldr	r5, [pc, #496]	; (800e360 <lv_draw_rect+0x1738>)
            work_area.x1 = coords->x1;
 800e16e:	f9b2 6000 	ldrsh.w	r6, [r2]
            work_area.y1 = coords->y1;
 800e172:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
            work_area.x2 = coords->x1 + LV_ANTIALIAS;
 800e176:	1c71      	adds	r1, r6, #1
            work_area.x1 = coords->x1;
 800e178:	f8a7 6098 	strh.w	r6, [r7, #152]	; 0x98
            work_area.y2 = coords->y1 + LV_ANTIALIAS;
 800e17c:	1c46      	adds	r6, r0, #1
            work_area.y1 = coords->y1;
 800e17e:	f8a7 009a 	strh.w	r0, [r7, #154]	; 0x9a
            work_area.x2 = coords->x1 + LV_ANTIALIAS;
 800e182:	f8a7 109c 	strh.w	r1, [r7, #156]	; 0x9c
            fill_fp(&work_area, mask, color, opa);
 800e186:	f107 0098 	add.w	r0, r7, #152	; 0x98
 800e18a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e18c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
            work_area.y2 = coords->y1 + LV_ANTIALIAS;
 800e18e:	f8a7 609e 	strh.w	r6, [r7, #158]	; 0x9e
            fill_fp(&work_area, mask, color, opa);
 800e192:	682d      	ldr	r5, [r5, #0]
 800e194:	47a8      	blx	r5
 800e196:	e432      	b.n	800d9fe <lv_draw_rect+0xdd6>
    if(r >= (h >> 1)) {
 800e198:	105b      	asrs	r3, r3, #1
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	f77e addb 	ble.w	800cd56 <lv_draw_rect+0x12e>
    if(r > 0) r -= LV_ANTIALIAS;
 800e1a0:	2303      	movs	r3, #3
 800e1a2:	461c      	mov	r4, r3
 800e1a4:	643b      	str	r3, [r7, #64]	; 0x40
 800e1a6:	2308      	movs	r3, #8
 800e1a8:	f7fe bde4 	b.w	800cd74 <lv_draw_rect+0x14c>
    return area_p->x2 - area_p->x1 + 1;
 800e1ac:	6e7c      	ldr	r4, [r7, #100]	; 0x64
{
 800e1ae:	f8c7 d008 	str.w	sp, [r7, #8]
 800e1b2:	88a0      	ldrh	r0, [r4, #4]
 800e1b4:	8822      	ldrh	r2, [r4, #0]
 800e1b6:	3001      	adds	r0, #1
    return area_p->y2 - area_p->y1 + 1;
 800e1b8:	88e3      	ldrh	r3, [r4, #6]
 800e1ba:	8864      	ldrh	r4, [r4, #2]
    return area_p->x2 - area_p->x1 + 1;
 800e1bc:	1a80      	subs	r0, r0, r2
    return area_p->y2 - area_p->y1 + 1;
 800e1be:	3301      	adds	r3, #1
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800e1c0:	f8ba 200c 	ldrh.w	r2, [sl, #12]
    if(r >= (w >> 1)) {
 800e1c4:	f340 004e 	sbfx	r0, r0, #1, #15
 800e1c8:	1b1b      	subs	r3, r3, r4
    lv_coord_t swidth = style->body.shadow.width;
 800e1ca:	f9ba 801c 	ldrsh.w	r8, [sl, #28]
    if(r >= (w >> 1)) {
 800e1ce:	4282      	cmp	r2, r0
 800e1d0:	b21b      	sxth	r3, r3
 800e1d2:	db05      	blt.n	800e1e0 <lv_draw_rect+0x15b8>
        r = (w >> 1);
 800e1d4:	b282      	uxth	r2, r0
        if(r != 0) r--;
 800e1d6:	2a00      	cmp	r2, #0
 800e1d8:	f000 82de 	beq.w	800e798 <lv_draw_rect+0x1b70>
 800e1dc:	3a01      	subs	r2, #1
 800e1de:	b292      	uxth	r2, r2
    if(r >= (h >> 1)) {
 800e1e0:	105b      	asrs	r3, r3, #1
 800e1e2:	4293      	cmp	r3, r2
 800e1e4:	dc05      	bgt.n	800e1f2 <lv_draw_rect+0x15ca>
        r = (h >> 1);
 800e1e6:	b29b      	uxth	r3, r3
        if(r != 0) r--;
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	f000 82d9 	beq.w	800e7a0 <lv_draw_rect+0x1b78>
 800e1ee:	3b01      	subs	r3, #1
 800e1f0:	b29a      	uxth	r2, r3
    if(r > 0) r -= LV_ANTIALIAS;
 800e1f2:	2a00      	cmp	r2, #0
 800e1f4:	f000 82d4 	beq.w	800e7a0 <lv_draw_rect+0x1b78>
 800e1f8:	b215      	sxth	r5, r2
 800e1fa:	633a      	str	r2, [r7, #48]	; 0x30
 800e1fc:	66bd      	str	r5, [r7, #104]	; 0x68
    lv_coord_t curve_x[radius + swidth + 1];     /*Stores the 'x' coordinates of a quarter circle.*/
 800e1fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    memset(curve_x, 0, sizeof(curve_x));
 800e200:	2100      	movs	r1, #0
    lv_coord_t curve_x[radius + swidth + 1];     /*Stores the 'x' coordinates of a quarter circle.*/
 800e202:	4443      	add	r3, r8
 800e204:	1c5c      	adds	r4, r3, #1
 800e206:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e208:	0062      	lsls	r2, r4, #1
 800e20a:	f102 0308 	add.w	r3, r2, #8
 800e20e:	f023 0307 	bic.w	r3, r3, #7
 800e212:	ebad 0d03 	sub.w	sp, sp, r3
 800e216:	ab02      	add	r3, sp, #8
 800e218:	461e      	mov	r6, r3
    memset(curve_x, 0, sizeof(curve_x));
 800e21a:	4618      	mov	r0, r3
    lv_coord_t curve_x[radius + swidth + 1];     /*Stores the 'x' coordinates of a quarter circle.*/
 800e21c:	4699      	mov	r9, r3
    memset(curve_x, 0, sizeof(curve_x));
 800e21e:	f00b fa5a 	bl	80196d6 <memset>
    lv_circ_init(&circ, &circ_tmp, radius);
 800e222:	462a      	mov	r2, r5
 800e224:	f107 0172 	add.w	r1, r7, #114	; 0x72
 800e228:	f107 0074 	add.w	r0, r7, #116	; 0x74
 800e22c:	4635      	mov	r5, r6
 800e22e:	f001 fc51 	bl	800fad4 <lv_circ_init>
 800e232:	e00b      	b.n	800e24c <lv_draw_rect+0x1624>
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 800e234:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
        lv_circ_next(&circ, &circ_tmp);
 800e238:	f107 0074 	add.w	r0, r7, #116	; 0x74
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 800e23c:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 800e240:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
        curve_x[LV_CIRC_OCT2_Y(circ)] = LV_CIRC_OCT2_X(circ);
 800e244:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
        lv_circ_next(&circ, &circ_tmp);
 800e248:	f001 fc58 	bl	800fafc <lv_circ_next>
    while(lv_circ_cont(&circ)) {
 800e24c:	f107 0074 	add.w	r0, r7, #116	; 0x74
 800e250:	f001 fc4a 	bl	800fae8 <lv_circ_cont>
        lv_circ_next(&circ, &circ_tmp);
 800e254:	f107 0172 	add.w	r1, r7, #114	; 0x72
    while(lv_circ_cont(&circ)) {
 800e258:	2800      	cmp	r0, #0
 800e25a:	d1eb      	bne.n	800e234 <lv_draw_rect+0x160c>
    int16_t filter_width = 2 * swidth + 1;
 800e25c:	fa1f fe88 	uxth.w	lr, r8
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t) style->body.opa * opa_scale) >> 8;
 800e260:	f89a 000e 	ldrb.w	r0, [sl, #14]
    int16_t filter_width = 2 * swidth + 1;
 800e264:	ea4f 054e 	mov.w	r5, lr, lsl #1
 800e268:	b2ad      	uxth	r5, r5
 800e26a:	1c6b      	adds	r3, r5, #1
 800e26c:	b21b      	sxth	r3, r3
    uint32_t line_1d_blur[filter_width];
 800e26e:	009a      	lsls	r2, r3, #2
 800e270:	320a      	adds	r2, #10
 800e272:	f022 0207 	bic.w	r2, r2, #7
 800e276:	ebad 0d02 	sub.w	sp, sp, r2
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t) style->body.opa * opa_scale) >> 8;
 800e27a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e27c:	2aff      	cmp	r2, #255	; 0xff
    uint32_t line_1d_blur[filter_width];
 800e27e:	ae02      	add	r6, sp, #8
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t) style->body.opa * opa_scale) >> 8;
 800e280:	d004      	beq.n	800e28c <lv_draw_rect+0x1664>
 800e282:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e284:	fb00 f002 	mul.w	r0, r0, r2
 800e288:	f3c0 2007 	ubfx	r0, r0, #8, #8
    for(line = 0; line < filter_width; line++) {
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	dd13      	ble.n	800e2b8 <lv_draw_rect+0x1690>
 800e290:	b200      	sxth	r0, r0
 800e292:	fb03 fc03 	mul.w	ip, r3, r3
 800e296:	021b      	lsls	r3, r3, #8
 800e298:	1f32      	subs	r2, r6, #4
 800e29a:	0041      	lsls	r1, r0, #1
 800e29c:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 800e2a0:	ebc1 6040 	rsb	r0, r1, r0, lsl #25
 800e2a4:	fb01 f303 	mul.w	r3, r1, r3
 800e2a8:	0200      	lsls	r0, r0, #8
        line_1d_blur[line] = (uint32_t)((uint32_t)(filter_width - line) * (opa * 2)  << SHADOW_OPA_EXTRA_PRECISION) / (filter_width * filter_width);
 800e2aa:	fbb3 f1fc 	udiv	r1, r3, ip
 800e2ae:	f842 1f04 	str.w	r1, [r2, #4]!
    for(line = 0; line < filter_width; line++) {
 800e2b2:	4295      	cmp	r5, r2
 800e2b4:	4403      	add	r3, r0
 800e2b6:	d1f8      	bne.n	800e2aa <lv_draw_rect+0x1682>
    ofs_rb.x = coords->x2 - radius - LV_ANTIALIAS;
 800e2b8:	6e7d      	ldr	r5, [r7, #100]	; 0x64
    lv_opa_t line_2d_blur[radius + swidth + 1];
 800e2ba:	3407      	adds	r4, #7
    ofs_rt.y = coords->y1 + radius + LV_ANTIALIAS;
 800e2bc:	8869      	ldrh	r1, [r5, #2]
    lv_opa_t line_2d_blur[radius + swidth + 1];
 800e2be:	f024 0407 	bic.w	r4, r4, #7
    ofs_rb.x = coords->x2 - radius - LV_ANTIALIAS;
 800e2c2:	88aa      	ldrh	r2, [r5, #4]
    ofs_rb.y = coords->y2 - radius - LV_ANTIALIAS;
 800e2c4:	88e8      	ldrh	r0, [r5, #6]
    ofs_rt.y = coords->y1 + radius + LV_ANTIALIAS;
 800e2c6:	3101      	adds	r1, #1
    ofs_lb.x = coords->x1 + radius + LV_ANTIALIAS;
 800e2c8:	882b      	ldrh	r3, [r5, #0]
    ofs_rb.x = coords->x2 - radius - LV_ANTIALIAS;
 800e2ca:	3a01      	subs	r2, #1
 800e2cc:	6b3d      	ldr	r5, [r7, #48]	; 0x30
    ofs_rb.y = coords->y2 - radius - LV_ANTIALIAS;
 800e2ce:	3801      	subs	r0, #1
    ofs_lb.x = coords->x1 + radius + LV_ANTIALIAS;
 800e2d0:	3301      	adds	r3, #1
    lv_opa_t line_2d_blur[radius + swidth + 1];
 800e2d2:	ebad 0d04 	sub.w	sp, sp, r4
    ofs_rt.y = coords->y1 + radius + LV_ANTIALIAS;
 800e2d6:	4429      	add	r1, r5
    ofs_rb.x = coords->x2 - radius - LV_ANTIALIAS;
 800e2d8:	1b52      	subs	r2, r2, r5
    ofs_lb.x = coords->x1 + radius + LV_ANTIALIAS;
 800e2da:	442b      	add	r3, r5
    ofs_rb.y = coords->y2 - radius - LV_ANTIALIAS;
 800e2dc:	1b40      	subs	r0, r0, r5
    ofs_rt.y = coords->y1 + radius + LV_ANTIALIAS;
 800e2de:	b289      	uxth	r1, r1
    lv_opa_t line_2d_blur[radius + swidth + 1];
 800e2e0:	ac02      	add	r4, sp, #8
    ofs_lb.x = coords->x1 + radius + LV_ANTIALIAS;
 800e2e2:	b29b      	uxth	r3, r3
    ofs_rt.y = coords->y1 + radius + LV_ANTIALIAS;
 800e2e4:	6179      	str	r1, [r7, #20]
 800e2e6:	b209      	sxth	r1, r1
    ofs_rb.y = coords->y2 - radius - LV_ANTIALIAS;
 800e2e8:	b280      	uxth	r0, r0
    lv_opa_t line_2d_blur[radius + swidth + 1];
 800e2ea:	663c      	str	r4, [r7, #96]	; 0x60
    ofs_rt.y = coords->y1 + radius + LV_ANTIALIAS;
 800e2ec:	6479      	str	r1, [r7, #68]	; 0x44
    ofs_lb.x = coords->x1 + radius + LV_ANTIALIAS;
 800e2ee:	b219      	sxth	r1, r3
    ofs_rb.x = coords->x2 - radius - LV_ANTIALIAS;
 800e2f0:	b292      	uxth	r2, r2
    ofs_rb.y = coords->y2 - radius - LV_ANTIALIAS;
 800e2f2:	61b8      	str	r0, [r7, #24]
    ofs_lb.x = coords->x1 + radius + LV_ANTIALIAS;
 800e2f4:	6439      	str	r1, [r7, #64]	; 0x40
    ofs_rb.y = coords->y2 - radius - LV_ANTIALIAS;
 800e2f6:	b200      	sxth	r0, r0
    for(line = 0; line <= radius + swidth; line++) {        /*Check all rows and make the 1D blur to 2D*/
 800e2f8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    ofs_rb.x = coords->x2 - radius - LV_ANTIALIAS;
 800e2fa:	b214      	sxth	r4, r2
    ofs_rb.y = coords->y2 - radius - LV_ANTIALIAS;
 800e2fc:	64f8      	str	r0, [r7, #76]	; 0x4c
    for(line = 0; line <= radius + swidth; line++) {        /*Check all rows and make the 1D blur to 2D*/
 800e2fe:	2900      	cmp	r1, #0
    ofs_rb.x = coords->x2 - radius - LV_ANTIALIAS;
 800e300:	653c      	str	r4, [r7, #80]	; 0x50
    for(line = 0; line <= radius + swidth; line++) {        /*Check all rows and make the 1D blur to 2D*/
 800e302:	f2c0 80ef 	blt.w	800e4e4 <lv_draw_rect+0x18bc>
 800e306:	f1ce 0e00 	rsb	lr, lr, #0
 800e30a:	2100      	movs	r1, #0
 800e30c:	3201      	adds	r2, #1
 800e30e:	3b01      	subs	r3, #1
 800e310:	fa0f f08e 	sxth.w	r0, lr
 800e314:	f8c7 a01c 	str.w	sl, [r7, #28]
 800e318:	b292      	uxth	r2, r2
 800e31a:	f8d7 a068 	ldr.w	sl, [r7, #104]	; 0x68
 800e31e:	6578      	str	r0, [r7, #84]	; 0x54
 800e320:	b29b      	uxth	r3, r3
 800e322:	4608      	mov	r0, r1
 800e324:	63b9      	str	r1, [r7, #56]	; 0x38
 800e326:	613a      	str	r2, [r7, #16]
 800e328:	60fb      	str	r3, [r7, #12]
 800e32a:	f8c7 b004 	str.w	fp, [r7, #4]
    if(r >= (h >> 1)) {
 800e32e:	2300      	movs	r3, #0
 800e330:	f839 e010 	ldrh.w	lr, [r9, r0, lsl #1]
                    col_rel = radius - curve_x[line] - col;
 800e334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
                if(col_rel < -swidth) {                         /*Outside of the blurred area. */
 800e336:	f1c8 0500 	rsb	r5, r8, #0
    if(r >= (h >> 1)) {
 800e33a:	461c      	mov	r4, r3
 800e33c:	66bb      	str	r3, [r7, #104]	; 0x68
                    col_rel = radius - curve_x[line] - col;
 800e33e:	eba2 020e 	sub.w	r2, r2, lr
 800e342:	65ba      	str	r2, [r7, #88]	; 0x58
            for(line_rel = -swidth; line_rel <= swidth; line_rel ++) {
 800e344:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e346:	4590      	cmp	r8, r2
 800e348:	f2c0 80d0 	blt.w	800e4ec <lv_draw_rect+0x18c4>
 800e34c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e34e:	2100      	movs	r1, #0
 800e350:	eba3 0c04 	sub.w	ip, r3, r4
 800e354:	fa0f fc8c 	sxth.w	ip, ip
 800e358:	e01a      	b.n	800e390 <lv_draw_rect+0x1768>
 800e35a:	bf00      	nop
 800e35c:	080872f4 	.word	0x080872f4
 800e360:	080872f0 	.word	0x080872f0
                } else if(line + line_rel > radius) {           /*Above the radius, here won't be more 1D blur*/
 800e364:	4553      	cmp	r3, sl
 800e366:	dc23      	bgt.n	800e3b0 <lv_draw_rect+0x1788>
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 800e368:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
 800e36c:	eba3 030e 	sub.w	r3, r3, lr
 800e370:	1b1b      	subs	r3, r3, r4
 800e372:	b21b      	sxth	r3, r3
                if(col_rel < -swidth) {                         /*Outside of the blurred area. */
 800e374:	42ab      	cmp	r3, r5
                else px_opa_sum += line_1d_blur[swidth - col_rel];              /*On the 1D blur (+ swidth to align to the center)*/
 800e376:	eba8 0b03 	sub.w	fp, r8, r3
                if(col_rel < -swidth) {                         /*Outside of the blurred area. */
 800e37a:	db10      	blt.n	800e39e <lv_draw_rect+0x1776>
 800e37c:	3201      	adds	r2, #1
                } else if(col_rel > swidth) px_opa_sum += line_1d_blur[0];      /*Inside the not blurred area*/
 800e37e:	4598      	cmp	r8, r3
 800e380:	b212      	sxth	r2, r2
 800e382:	bfb4      	ite	lt
 800e384:	6833      	ldrlt	r3, [r6, #0]
                else px_opa_sum += line_1d_blur[swidth - col_rel];              /*On the 1D blur (+ swidth to align to the center)*/
 800e386:	f856 302b 	ldrge.w	r3, [r6, fp, lsl #2]
            for(line_rel = -swidth; line_rel <= swidth; line_rel ++) {
 800e38a:	4590      	cmp	r8, r2
                else px_opa_sum += line_1d_blur[swidth - col_rel];              /*On the 1D blur (+ swidth to align to the center)*/
 800e38c:	4419      	add	r1, r3
            for(line_rel = -swidth; line_rel <= swidth; line_rel ++) {
 800e38e:	db0f      	blt.n	800e3b0 <lv_draw_rect+0x1788>
                if(line + line_rel < 0) {                       /*Below the radius, here is the blur of the edge */
 800e390:	1813      	adds	r3, r2, r0
 800e392:	d5e7      	bpl.n	800e364 <lv_draw_rect+0x173c>
 800e394:	4663      	mov	r3, ip
                if(col_rel < -swidth) {                         /*Outside of the blurred area. */
 800e396:	42ab      	cmp	r3, r5
                else px_opa_sum += line_1d_blur[swidth - col_rel];              /*On the 1D blur (+ swidth to align to the center)*/
 800e398:	eba8 0b03 	sub.w	fp, r8, r3
                if(col_rel < -swidth) {                         /*Outside of the blurred area. */
 800e39c:	daee      	bge.n	800e37c <lv_draw_rect+0x1754>
                    if(line_rel == -swidth) line_ready = true;  /*If no data even on the very first line then it wont't be anything else in this line*/
 800e39e:	42aa      	cmp	r2, r5
 800e3a0:	d106      	bne.n	800e3b0 <lv_draw_rect+0x1788>
            line_2d_blur[col] = px_opa_sum >> SHADOW_OPA_EXTRA_PRECISION;
 800e3a2:	0a09      	lsrs	r1, r1, #8
                col++;      /*To make this line to the last one ( drawing will go to '< col')*/
 800e3a4:	3401      	adds	r4, #1
            line_2d_blur[col] = px_opa_sum >> SHADOW_OPA_EXTRA_PRECISION;
 800e3a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e3a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
                col++;      /*To make this line to the last one ( drawing will go to '< col')*/
 800e3aa:	b2a4      	uxth	r4, r4
            line_2d_blur[col] = px_opa_sum >> SHADOW_OPA_EXTRA_PRECISION;
 800e3ac:	5499      	strb	r1, [r3, r2]
 800e3ae:	e00a      	b.n	800e3c6 <lv_draw_rect+0x179e>
 800e3b0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800e3b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        for(col = 0; col <= radius + swidth; col++) {        /*Check all pixels in a 1D blur line (from the origo to last shadow pixel (radius + swidth))*/
 800e3b6:	3401      	adds	r4, #1
            line_2d_blur[col] = px_opa_sum >> SHADOW_OPA_EXTRA_PRECISION;
 800e3b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
        for(col = 0; col <= radius + swidth; col++) {        /*Check all pixels in a 1D blur line (from the origo to last shadow pixel (radius + swidth))*/
 800e3ba:	b2a4      	uxth	r4, r4
            line_2d_blur[col] = px_opa_sum >> SHADOW_OPA_EXTRA_PRECISION;
 800e3bc:	5499      	strb	r1, [r3, r2]
        for(col = 0; col <= radius + swidth; col++) {        /*Check all pixels in a 1D blur line (from the origo to last shadow pixel (radius + swidth))*/
 800e3be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e3c0:	66bc      	str	r4, [r7, #104]	; 0x68
 800e3c2:	42a3      	cmp	r3, r4
 800e3c4:	dabe      	bge.n	800e344 <lv_draw_rect+0x171c>
        point_rt.x = curve_x[line] + ofs_rt.x + 1;
 800e3c6:	693a      	ldr	r2, [r7, #16]
        for(d = 1; d < col; d++) {
 800e3c8:	2c01      	cmp	r4, #1
 800e3ca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
        point_rt.x = curve_x[line] + ofs_rt.x + 1;
 800e3cc:	eb02 010e 	add.w	r1, r2, lr
        point_lt.x = ofs_lt.x -  curve_x[line] - 1;
 800e3d0:	68fa      	ldr	r2, [r7, #12]
 800e3d2:	69bd      	ldr	r5, [r7, #24]
 800e3d4:	eba2 000e 	sub.w	r0, r2, lr
 800e3d8:	697a      	ldr	r2, [r7, #20]
 800e3da:	637b      	str	r3, [r7, #52]	; 0x34
        point_rt.x = curve_x[line] + ofs_rt.x + 1;
 800e3dc:	b289      	uxth	r1, r1
 800e3de:	eba2 0203 	sub.w	r2, r2, r3
 800e3e2:	442b      	add	r3, r5
        point_lt.x = ofs_lt.x -  curve_x[line] - 1;
 800e3e4:	b280      	uxth	r0, r0
 800e3e6:	b212      	sxth	r2, r2
 800e3e8:	b21b      	sxth	r3, r3
 800e3ea:	4696      	mov	lr, r2
 800e3ec:	469c      	mov	ip, r3
        for(d = 1; d < col; d++) {
 800e3ee:	d968      	bls.n	800e4c2 <lv_draw_rect+0x189a>
 800e3f0:	1ea3      	subs	r3, r4, #2
 800e3f2:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 800e3f4:	f8c7 802c 	str.w	r8, [r7, #44]	; 0x2c
 800e3f8:	46f0      	mov	r8, lr
 800e3fa:	b29b      	uxth	r3, r3
 800e3fc:	f8c7 9028 	str.w	r9, [r7, #40]	; 0x28
 800e400:	b2aa      	uxth	r2, r5
 800e402:	f8c7 a020 	str.w	sl, [r7, #32]
 800e406:	3301      	adds	r3, #1
 800e408:	462c      	mov	r4, r5
 800e40a:	4410      	add	r0, r2
 800e40c:	1a8a      	subs	r2, r1, r2
 800e40e:	18eb      	adds	r3, r5, r3
 800e410:	627e      	str	r6, [r7, #36]	; 0x24
 800e412:	65b8      	str	r0, [r7, #88]	; 0x58
 800e414:	46e1      	mov	r9, ip
 800e416:	66bb      	str	r3, [r7, #104]	; 0x68
 800e418:	4692      	mov	sl, r2
 800e41a:	69fb      	ldr	r3, [r7, #28]
 800e41c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e41e:	e00f      	b.n	800e440 <lv_draw_rect+0x1818>
            if(point_lb.x < ofs_lb.x && point_lb.y > ofs_lb.y) {
 800e420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e422:	454b      	cmp	r3, r9
 800e424:	db3b      	blt.n	800e49e <lv_draw_rect+0x1876>
            if(point_rt.x > ofs_rt.x && point_rt.y < ofs_rt.y) {
 800e426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e428:	42ab      	cmp	r3, r5
 800e42a:	da05      	bge.n	800e438 <lv_draw_rect+0x1810>
 800e42c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e42e:	4543      	cmp	r3, r8
 800e430:	dc2a      	bgt.n	800e488 <lv_draw_rect+0x1860>
            if(point_rb.x > ofs_rb.x && point_rb.y > ofs_rb.y) {
 800e432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e434:	454b      	cmp	r3, r9
 800e436:	db1c      	blt.n	800e472 <lv_draw_rect+0x184a>
 800e438:	3401      	adds	r4, #1
        for(d = 1; d < col; d++) {
 800e43a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e43c:	42a3      	cmp	r3, r4
 800e43e:	d039      	beq.n	800e4b4 <lv_draw_rect+0x188c>
 800e440:	b2a5      	uxth	r5, r4
 800e442:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e444:	eba3 0b05 	sub.w	fp, r3, r5
            if(point_lt.x < ofs_lt.x && point_lt.y < ofs_lt.y) {
 800e448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e44a:	4455      	add	r5, sl
 800e44c:	fa0f fb8b 	sxth.w	fp, fp
 800e450:	b22d      	sxth	r5, r5
 800e452:	455b      	cmp	r3, fp
 800e454:	dde7      	ble.n	800e426 <lv_draw_rect+0x17fe>
 800e456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e458:	4543      	cmp	r3, r8
 800e45a:	dde1      	ble.n	800e420 <lv_draw_rect+0x17f8>
                px_fp(point_lt.x, point_lt.y, mask, style->body.shadow.color, line_2d_blur[d]);
 800e45c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e45e:	4641      	mov	r1, r8
 800e460:	7860      	ldrb	r0, [r4, #1]
 800e462:	4ebd      	ldr	r6, [pc, #756]	; (800e758 <lv_draw_rect+0x1b30>)
 800e464:	699b      	ldr	r3, [r3, #24]
 800e466:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e468:	6836      	ldr	r6, [r6, #0]
 800e46a:	9000      	str	r0, [sp, #0]
 800e46c:	4658      	mov	r0, fp
 800e46e:	47b0      	blx	r6
 800e470:	e7d6      	b.n	800e420 <lv_draw_rect+0x17f8>
                px_fp(point_rb.x, point_rb.y, mask, style->body.shadow.color, line_2d_blur[d]);
 800e472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e474:	4628      	mov	r0, r5
 800e476:	7861      	ldrb	r1, [r4, #1]
 800e478:	4db7      	ldr	r5, [pc, #732]	; (800e758 <lv_draw_rect+0x1b30>)
 800e47a:	699b      	ldr	r3, [r3, #24]
 800e47c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e47e:	682d      	ldr	r5, [r5, #0]
 800e480:	9100      	str	r1, [sp, #0]
 800e482:	4649      	mov	r1, r9
 800e484:	47a8      	blx	r5
 800e486:	e7d7      	b.n	800e438 <lv_draw_rect+0x1810>
                px_fp(point_rt.x, point_rt.y, mask, style->body.shadow.color, line_2d_blur[d]);
 800e488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e48a:	4641      	mov	r1, r8
 800e48c:	7860      	ldrb	r0, [r4, #1]
 800e48e:	4eb2      	ldr	r6, [pc, #712]	; (800e758 <lv_draw_rect+0x1b30>)
 800e490:	699b      	ldr	r3, [r3, #24]
 800e492:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e494:	6836      	ldr	r6, [r6, #0]
 800e496:	9000      	str	r0, [sp, #0]
 800e498:	4628      	mov	r0, r5
 800e49a:	47b0      	blx	r6
 800e49c:	e7c9      	b.n	800e432 <lv_draw_rect+0x180a>
                px_fp(point_lb.x, point_lb.y, mask, style->body.shadow.color, line_2d_blur[d]);
 800e49e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4a0:	4658      	mov	r0, fp
 800e4a2:	7861      	ldrb	r1, [r4, #1]
 800e4a4:	4eac      	ldr	r6, [pc, #688]	; (800e758 <lv_draw_rect+0x1b30>)
 800e4a6:	699b      	ldr	r3, [r3, #24]
 800e4a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e4aa:	6836      	ldr	r6, [r6, #0]
 800e4ac:	9100      	str	r1, [sp, #0]
 800e4ae:	4649      	mov	r1, r9
 800e4b0:	47b0      	blx	r6
 800e4b2:	e7b8      	b.n	800e426 <lv_draw_rect+0x17fe>
 800e4b4:	f8d7 802c 	ldr.w	r8, [r7, #44]	; 0x2c
 800e4b8:	f8d7 9028 	ldr.w	r9, [r7, #40]	; 0x28
 800e4bc:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800e4be:	f8d7 a020 	ldr.w	sl, [r7, #32]
        if(line == 0) lv_draw_shadow_full_straight(coords, mask, style, line_2d_blur);
 800e4c2:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800e4c6:	b19b      	cbz	r3, 800e4f0 <lv_draw_rect+0x18c8>
 800e4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    for(line = 0; line <= radius + swidth; line++) {        /*Check all rows and make the 1D blur to 2D*/
 800e4ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e4cc:	3301      	adds	r3, #1
 800e4ce:	3001      	adds	r0, #1
 800e4d0:	63bb      	str	r3, [r7, #56]	; 0x38
 800e4d2:	b200      	sxth	r0, r0
 800e4d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e4d6:	4283      	cmp	r3, r0
 800e4d8:	f6bf af29 	bge.w	800e32e <lv_draw_rect+0x1706>
 800e4dc:	f8d7 b004 	ldr.w	fp, [r7, #4]
 800e4e0:	f8d7 a01c 	ldr.w	sl, [r7, #28]
 800e4e4:	f8d7 d008 	ldr.w	sp, [r7, #8]
 800e4e8:	f7fe bbb9 	b.w	800cc5e <lv_draw_rect+0x36>
            for(line_rel = -swidth; line_rel <= swidth; line_rel ++) {
 800e4ec:	2100      	movs	r1, #0
 800e4ee:	e761      	b.n	800e3b4 <lv_draw_rect+0x178c>
 800e4f0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e4f2:	69f8      	ldr	r0, [r7, #28]
 800e4f4:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 800e4f8:	f9b2 e000 	ldrsh.w	lr, [r2]
 800e4fc:	f100 0b18 	add.w	fp, r0, #24
    return area_p->x2 - area_p->x1 + 1;
 800e500:	b2ab      	uxth	r3, r5
 800e502:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 800e506:	4619      	mov	r1, r3
 800e508:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e50a:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 800e50e:	3101      	adds	r1, #1
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800e510:	8982      	ldrh	r2, [r0, #12]
 800e512:	461c      	mov	r4, r3
 800e514:	62bb      	str	r3, [r7, #40]	; 0x28
 800e516:	fa1f f38e 	uxth.w	r3, lr
 800e51a:	f9b0 001c 	ldrsh.w	r0, [r0, #28]
    return area_p->y2 - area_p->y1 + 1;
 800e51e:	b2a4      	uxth	r4, r4
    return area_p->x2 - area_p->x1 + 1;
 800e520:	65bb      	str	r3, [r7, #88]	; 0x58
    return area_p->y2 - area_p->y1 + 1;
 800e522:	fa1f f38c 	uxth.w	r3, ip
 800e526:	66b8      	str	r0, [r7, #104]	; 0x68
 800e528:	63fb      	str	r3, [r7, #60]	; 0x3c
    return area_p->x2 - area_p->x1 + 1;
 800e52a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    return area_p->y2 - area_p->y1 + 1;
 800e52c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    return area_p->x2 - area_p->x1 + 1;
 800e52e:	1ac9      	subs	r1, r1, r3
    return area_p->y2 - area_p->y1 + 1;
 800e530:	1c63      	adds	r3, r4, #1
    if(r >= (w >> 1)) {
 800e532:	f341 014e 	sbfx	r1, r1, #1, #15
 800e536:	1a1b      	subs	r3, r3, r0
 800e538:	428a      	cmp	r2, r1
 800e53a:	b21b      	sxth	r3, r3
 800e53c:	db05      	blt.n	800e54a <lv_draw_rect+0x1922>
        r = (w >> 1);
 800e53e:	b289      	uxth	r1, r1
        if(r != 0) r--;
 800e540:	2900      	cmp	r1, #0
 800e542:	f000 80a6 	beq.w	800e692 <lv_draw_rect+0x1a6a>
 800e546:	1e4a      	subs	r2, r1, #1
 800e548:	b292      	uxth	r2, r2
    if(r >= (h >> 1)) {
 800e54a:	105b      	asrs	r3, r3, #1
 800e54c:	4293      	cmp	r3, r2
 800e54e:	f340 80a3 	ble.w	800e698 <lv_draw_rect+0x1a70>
    if(r > 0) r -= LV_ANTIALIAS;
 800e552:	2a00      	cmp	r2, #0
 800e554:	bf08      	it	eq
 800e556:	2201      	moveq	r2, #1
    right_area.y1 = coords->y1 + radius + LV_ANTIALIAS;
 800e558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    right_area.y2 = coords->y2 - radius - LV_ANTIALIAS;
 800e55a:	3c01      	subs	r4, #1
    top_area.x1 = coords->x1 + radius + LV_ANTIALIAS;
 800e55c:	6db8      	ldr	r0, [r7, #88]	; 0x58
    right_area.y1 = coords->y1 + radius + LV_ANTIALIAS;
 800e55e:	3301      	adds	r3, #1
    top_area.x2 = coords->x2 - radius - LV_ANTIALIAS;
 800e560:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    top_area.x1 = coords->x1 + radius + LV_ANTIALIAS;
 800e562:	3001      	adds	r0, #1
    right_area.y2 = coords->y2 - radius - LV_ANTIALIAS;
 800e564:	1aa4      	subs	r4, r4, r2
    right_area.y1 = coords->y1 + radius + LV_ANTIALIAS;
 800e566:	4413      	add	r3, r2
    top_area.x2 = coords->x2 - radius - LV_ANTIALIAS;
 800e568:	3901      	subs	r1, #1
    top_area.x1 = coords->x1 + radius + LV_ANTIALIAS;
 800e56a:	4410      	add	r0, r2
    right_area.y2 = coords->y2 - radius - LV_ANTIALIAS;
 800e56c:	b224      	sxth	r4, r4
    right_area.y1 = coords->y1 + radius + LV_ANTIALIAS;
 800e56e:	b21b      	sxth	r3, r3
    top_area.x2 = coords->x2 - radius - LV_ANTIALIAS;
 800e570:	1a8a      	subs	r2, r1, r2
    top_area.x1 = coords->x1 + radius + LV_ANTIALIAS;
 800e572:	b200      	sxth	r0, r0
    right_area.x1 = coords->x2 + 1 - LV_ANTIALIAS;
 800e574:	f8a7 5080 	strh.w	r5, [r7, #128]	; 0x80
    right_area.y1 = coords->y1 + radius + LV_ANTIALIAS;
 800e578:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
    top_area.x2 = coords->x2 - radius - LV_ANTIALIAS;
 800e57c:	b212      	sxth	r2, r2
    left_area.y1 = coords->y1 + radius + LV_ANTIALIAS;
 800e57e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    bottom_area.y1 = coords->y2 + 1 - LV_ANTIALIAS;
 800e582:	6abb      	ldr	r3, [r7, #40]	; 0x28
    right_area.x2 = right_area.x1;
 800e584:	f8a7 5084 	strh.w	r5, [r7, #132]	; 0x84
    bottom_area.y1 = coords->y2 + 1 - LV_ANTIALIAS;
 800e588:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
    bottom_area.y2 = bottom_area.y1;
 800e58c:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    for(d = 1 /*+ LV_ANTIALIAS*/; d <= swidth/* - LV_ANTIALIAS*/; d++) {
 800e590:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    right_area.y2 = coords->y2 - radius - LV_ANTIALIAS;
 800e592:	f8a7 4086 	strh.w	r4, [r7, #134]	; 0x86
    for(d = 1 /*+ LV_ANTIALIAS*/; d <= swidth/* - LV_ANTIALIAS*/; d++) {
 800e596:	2b00      	cmp	r3, #0
    left_area.y2 = coords->y2 - radius - LV_ANTIALIAS;
 800e598:	f8a7 408e 	strh.w	r4, [r7, #142]	; 0x8e
    top_area.x1 = coords->x1 + radius + LV_ANTIALIAS;
 800e59c:	f8a7 0090 	strh.w	r0, [r7, #144]	; 0x90
    bottom_area.x1 = coords->x1 + radius + LV_ANTIALIAS;
 800e5a0:	f8a7 0098 	strh.w	r0, [r7, #152]	; 0x98
    top_area.x2 = coords->x2 - radius - LV_ANTIALIAS;
 800e5a4:	f8a7 2094 	strh.w	r2, [r7, #148]	; 0x94
    bottom_area.x2 = coords->x2 - radius - LV_ANTIALIAS;
 800e5a8:	f8a7 209c 	strh.w	r2, [r7, #156]	; 0x9c
    left_area.x1 = coords->x1 - 1 + LV_ANTIALIAS;
 800e5ac:	f8a7 e088 	strh.w	lr, [r7, #136]	; 0x88
    left_area.x2 = left_area.x1;
 800e5b0:	f8a7 e08c 	strh.w	lr, [r7, #140]	; 0x8c
    top_area.y1 = coords->y1 - 1 + LV_ANTIALIAS;
 800e5b4:	f8a7 c092 	strh.w	ip, [r7, #146]	; 0x92
    top_area.y2 = top_area.y1;
 800e5b8:	f8a7 c096 	strh.w	ip, [r7, #150]	; 0x96
    for(d = 1 /*+ LV_ANTIALIAS*/; d <= swidth/* - LV_ANTIALIAS*/; d++) {
 800e5bc:	dd84      	ble.n	800e4c8 <lv_draw_rect+0x18a0>
 800e5be:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800e5c2:	4b66      	ldr	r3, [pc, #408]	; (800e75c <lv_draw_rect+0x1b34>)
 800e5c4:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800e5c8:	f8c7 802c 	str.w	r8, [r7, #44]	; 0x2c
 800e5cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e5ce:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	2401      	movs	r4, #1
 800e5d6:	65ba      	str	r2, [r7, #88]	; 0x58
 800e5d8:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800e5dc:	f8c7 9028 	str.w	r9, [r7, #40]	; 0x28
 800e5e0:	627e      	str	r6, [r7, #36]	; 0x24
 800e5e2:	4691      	mov	r9, r2
 800e5e4:	f8c7 a020 	str.w	sl, [r7, #32]
 800e5e8:	461e      	mov	r6, r3
 800e5ea:	468a      	mov	sl, r1
 800e5ec:	f8d7 806c 	ldr.w	r8, [r7, #108]	; 0x6c
        opa_act = map[d];
 800e5f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        fill_fp(&right_area, mask, style->body.shadow.color, opa_act);
 800e5f2:	4641      	mov	r1, r8
 800e5f4:	f8db 2000 	ldr.w	r2, [fp]
        opa_act = map[d];
 800e5f8:	5d1d      	ldrb	r5, [r3, r4]
 800e5fa:	3401      	adds	r4, #1
        fill_fp(&right_area, mask, style->body.shadow.color, opa_act);
 800e5fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e5fe:	462b      	mov	r3, r5
 800e600:	b224      	sxth	r4, r4
 800e602:	47b0      	blx	r6
        right_area.x1++;
 800e604:	f8b7 0080 	ldrh.w	r0, [r7, #128]	; 0x80
        right_area.x2++;
 800e608:	f8b7 e084 	ldrh.w	lr, [r7, #132]	; 0x84
        fill_fp(&left_area, mask, style->body.shadow.color, opa_act);
 800e60c:	462b      	mov	r3, r5
        right_area.x1++;
 800e60e:	3001      	adds	r0, #1
        fill_fp(&left_area, mask, style->body.shadow.color, opa_act);
 800e610:	f8db 2000 	ldr.w	r2, [fp]
        right_area.x2++;
 800e614:	f10e 0e01 	add.w	lr, lr, #1
        fill_fp(&left_area, mask, style->body.shadow.color, opa_act);
 800e618:	4641      	mov	r1, r8
        right_area.x1++;
 800e61a:	f8a7 0080 	strh.w	r0, [r7, #128]	; 0x80
        right_area.x2++;
 800e61e:	f8a7 e084 	strh.w	lr, [r7, #132]	; 0x84
        fill_fp(&left_area, mask, style->body.shadow.color, opa_act);
 800e622:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e624:	47b0      	blx	r6
        left_area.x1--;
 800e626:	f8b7 0088 	ldrh.w	r0, [r7, #136]	; 0x88
        left_area.x2--;
 800e62a:	f8b7 e08c 	ldrh.w	lr, [r7, #140]	; 0x8c
        fill_fp(&top_area, mask, style->body.shadow.color, opa_act);
 800e62e:	462b      	mov	r3, r5
        left_area.x1--;
 800e630:	3801      	subs	r0, #1
        fill_fp(&top_area, mask, style->body.shadow.color, opa_act);
 800e632:	f8db 2000 	ldr.w	r2, [fp]
        left_area.x2--;
 800e636:	f10e 3eff 	add.w	lr, lr, #4294967295
        fill_fp(&top_area, mask, style->body.shadow.color, opa_act);
 800e63a:	4641      	mov	r1, r8
        left_area.x1--;
 800e63c:	f8a7 0088 	strh.w	r0, [r7, #136]	; 0x88
        fill_fp(&top_area, mask, style->body.shadow.color, opa_act);
 800e640:	4648      	mov	r0, r9
        left_area.x2--;
 800e642:	f8a7 e08c 	strh.w	lr, [r7, #140]	; 0x8c
        fill_fp(&top_area, mask, style->body.shadow.color, opa_act);
 800e646:	47b0      	blx	r6
        top_area.y2--;
 800e648:	f8b7 1096 	ldrh.w	r1, [r7, #150]	; 0x96
        top_area.y1--;
 800e64c:	f8b7 0092 	ldrh.w	r0, [r7, #146]	; 0x92
        fill_fp(&bottom_area, mask, style->body.shadow.color, opa_act);
 800e650:	462b      	mov	r3, r5
        top_area.y2--;
 800e652:	1e4d      	subs	r5, r1, #1
        fill_fp(&bottom_area, mask, style->body.shadow.color, opa_act);
 800e654:	f8db 2000 	ldr.w	r2, [fp]
        top_area.y1--;
 800e658:	3801      	subs	r0, #1
        fill_fp(&bottom_area, mask, style->body.shadow.color, opa_act);
 800e65a:	4641      	mov	r1, r8
        top_area.y2--;
 800e65c:	f8a7 5096 	strh.w	r5, [r7, #150]	; 0x96
        top_area.y1--;
 800e660:	f8a7 0092 	strh.w	r0, [r7, #146]	; 0x92
        fill_fp(&bottom_area, mask, style->body.shadow.color, opa_act);
 800e664:	4650      	mov	r0, sl
 800e666:	47b0      	blx	r6
        bottom_area.y2++;
 800e668:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
        bottom_area.y1++;
 800e66c:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
        bottom_area.y2++;
 800e670:	3301      	adds	r3, #1
        bottom_area.y1++;
 800e672:	3201      	adds	r2, #1
        bottom_area.y2++;
 800e674:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    for(d = 1 /*+ LV_ANTIALIAS*/; d <= swidth/* - LV_ANTIALIAS*/; d++) {
 800e678:	6ebb      	ldr	r3, [r7, #104]	; 0x68
        bottom_area.y1++;
 800e67a:	f8a7 209a 	strh.w	r2, [r7, #154]	; 0x9a
    for(d = 1 /*+ LV_ANTIALIAS*/; d <= swidth/* - LV_ANTIALIAS*/; d++) {
 800e67e:	42a3      	cmp	r3, r4
 800e680:	dab6      	bge.n	800e5f0 <lv_draw_rect+0x19c8>
 800e682:	f8d7 802c 	ldr.w	r8, [r7, #44]	; 0x2c
 800e686:	f8d7 9028 	ldr.w	r9, [r7, #40]	; 0x28
 800e68a:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800e68c:	f8d7 a020 	ldr.w	sl, [r7, #32]
 800e690:	e71a      	b.n	800e4c8 <lv_draw_rect+0x18a0>
    if(r >= (h >> 1)) {
 800e692:	105b      	asrs	r3, r3, #1
 800e694:	2b00      	cmp	r3, #0
 800e696:	dc04      	bgt.n	800e6a2 <lv_draw_rect+0x1a7a>
        r = (h >> 1);
 800e698:	b29b      	uxth	r3, r3
        if(r != 0) r--;
 800e69a:	b113      	cbz	r3, 800e6a2 <lv_draw_rect+0x1a7a>
 800e69c:	3b01      	subs	r3, #1
 800e69e:	b29a      	uxth	r2, r3
 800e6a0:	e757      	b.n	800e552 <lv_draw_rect+0x192a>
 800e6a2:	2201      	movs	r2, #1
 800e6a4:	e758      	b.n	800e558 <lv_draw_rect+0x1930>
            work_area.x1 = coords->x2 - radius - LV_ANTIALIAS;
 800e6a6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
            fill_fp(&work_area, mask, color, opa);
 800e6a8:	464b      	mov	r3, r9
            work_area.x1 = coords->x2 - radius - LV_ANTIALIAS;
 800e6aa:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
            work_area.y1 = coords->y2 - bwidth;
 800e6ae:	88d0      	ldrh	r0, [r2, #6]
            work_area.x1 = coords->x2 - radius - LV_ANTIALIAS;
 800e6b0:	1e69      	subs	r1, r5, #1
            work_area.x2 = coords->x2;
 800e6b2:	f8a7 509c 	strh.w	r5, [r7, #156]	; 0x9c
            work_area.y2 = coords->y2 - radius - 1 - LV_ANTIALIAS;
 800e6b6:	1e85      	subs	r5, r0, #2
            work_area.y1 = coords->y2 - bwidth;
 800e6b8:	eba0 0b0b 	sub.w	fp, r0, fp
            work_area.x1 = coords->x2 - radius - LV_ANTIALIAS;
 800e6bc:	eba1 0108 	sub.w	r1, r1, r8
            fill_fp(&work_area, mask, color, opa);
 800e6c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
            work_area.y2 = coords->y2 - radius - 1 - LV_ANTIALIAS;
 800e6c2:	eba5 0808 	sub.w	r8, r5, r8
            fill_fp(&work_area, mask, color, opa);
 800e6c6:	4d25      	ldr	r5, [pc, #148]	; (800e75c <lv_draw_rect+0x1b34>)
            work_area.x1 = coords->x2 - radius - LV_ANTIALIAS;
 800e6c8:	f8a7 1098 	strh.w	r1, [r7, #152]	; 0x98
            fill_fp(&work_area, mask, color, opa);
 800e6cc:	f107 0098 	add.w	r0, r7, #152	; 0x98
 800e6d0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
            work_area.y2 = coords->y2 - radius - 1 - LV_ANTIALIAS;
 800e6d2:	f8a7 809e 	strh.w	r8, [r7, #158]	; 0x9e
            work_area.y1 = coords->y2 - bwidth;
 800e6d6:	f8a7 b09a 	strh.w	fp, [r7, #154]	; 0x9a
            fill_fp(&work_area, mask, color, opa);
 800e6da:	682d      	ldr	r5, [r5, #0]
 800e6dc:	47a8      	blx	r5
 800e6de:	f7ff b985 	b.w	800d9ec <lv_draw_rect+0xdc4>
            work_area.x1 = coords->x1;
 800e6e2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
            fill_fp(&work_area, mask, color, opa);
 800e6e4:	464b      	mov	r3, r9
 800e6e6:	4d1d      	ldr	r5, [pc, #116]	; (800e75c <lv_draw_rect+0x1b34>)
            work_area.x1 = coords->x1;
 800e6e8:	f9b2 1000 	ldrsh.w	r1, [r2]
            work_area.y1 = coords->y2 - bwidth;
 800e6ec:	88d0      	ldrh	r0, [r2, #6]
            work_area.x2 = coords->x1 + radius + LV_ANTIALIAS;
 800e6ee:	1c4e      	adds	r6, r1, #1
            work_area.x1 = coords->x1;
 800e6f0:	f8a7 1098 	strh.w	r1, [r7, #152]	; 0x98
            work_area.y2 = coords->y2 - radius - 1 - LV_ANTIALIAS;
 800e6f4:	f1a0 0e02 	sub.w	lr, r0, #2
            work_area.y1 = coords->y2 - bwidth;
 800e6f8:	eba0 000b 	sub.w	r0, r0, fp
            work_area.x2 = coords->x1 + radius + LV_ANTIALIAS;
 800e6fc:	4446      	add	r6, r8
            fill_fp(&work_area, mask, color, opa);
 800e6fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
            work_area.y2 = coords->y2 - radius - 1 - LV_ANTIALIAS;
 800e700:	ebae 0e08 	sub.w	lr, lr, r8
            work_area.y1 = coords->y2 - bwidth;
 800e704:	f8a7 009a 	strh.w	r0, [r7, #154]	; 0x9a
            work_area.x2 = coords->x1 + radius + LV_ANTIALIAS;
 800e708:	f8a7 609c 	strh.w	r6, [r7, #156]	; 0x9c
            fill_fp(&work_area, mask, color, opa);
 800e70c:	f107 0098 	add.w	r0, r7, #152	; 0x98
 800e710:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
            work_area.y2 = coords->y2 - radius - 1 - LV_ANTIALIAS;
 800e712:	f8a7 e09e 	strh.w	lr, [r7, #158]	; 0x9e
            fill_fp(&work_area, mask, color, opa);
 800e716:	682d      	ldr	r5, [r5, #0]
 800e718:	47a8      	blx	r5
 800e71a:	f7ff b962 	b.w	800d9e2 <lv_draw_rect+0xdba>
            work_area.x1 = coords->x2 - radius - LV_ANTIALIAS;
 800e71e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
            fill_fp(&work_area, mask, color, opa);
 800e720:	464b      	mov	r3, r9
 800e722:	4d0e      	ldr	r5, [pc, #56]	; (800e75c <lv_draw_rect+0x1b34>)
            work_area.x1 = coords->x2 - radius - LV_ANTIALIAS;
 800e724:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
            work_area.y1 = coords->y1 + radius + 1 + LV_ANTIALIAS;
 800e728:	8850      	ldrh	r0, [r2, #2]
            work_area.x1 = coords->x2 - radius - LV_ANTIALIAS;
 800e72a:	1e4e      	subs	r6, r1, #1
            work_area.x2 = coords->x2;
 800e72c:	f8a7 109c 	strh.w	r1, [r7, #156]	; 0x9c
            work_area.y1 = coords->y1 + radius + 1 + LV_ANTIALIAS;
 800e730:	f100 0e02 	add.w	lr, r0, #2
            work_area.y2 = coords->y1 + bwidth;
 800e734:	4458      	add	r0, fp
            work_area.x1 = coords->x2 - radius - LV_ANTIALIAS;
 800e736:	eba6 0608 	sub.w	r6, r6, r8
            fill_fp(&work_area, mask, color, opa);
 800e73a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
            work_area.y1 = coords->y1 + radius + 1 + LV_ANTIALIAS;
 800e73c:	44c6      	add	lr, r8
            work_area.y2 = coords->y1 + bwidth;
 800e73e:	f8a7 009e 	strh.w	r0, [r7, #158]	; 0x9e
            work_area.x1 = coords->x2 - radius - LV_ANTIALIAS;
 800e742:	f8a7 6098 	strh.w	r6, [r7, #152]	; 0x98
            fill_fp(&work_area, mask, color, opa);
 800e746:	f107 0098 	add.w	r0, r7, #152	; 0x98
 800e74a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
            work_area.y1 = coords->y1 + radius + 1 + LV_ANTIALIAS;
 800e74c:	f8a7 e09a 	strh.w	lr, [r7, #154]	; 0x9a
            fill_fp(&work_area, mask, color, opa);
 800e750:	682d      	ldr	r5, [r5, #0]
 800e752:	47a8      	blx	r5
 800e754:	f7ff b940 	b.w	800d9d8 <lv_draw_rect+0xdb0>
 800e758:	080872f4 	.word	0x080872f4
 800e75c:	080872f0 	.word	0x080872f0
            work_area.x1 = coords->x1;
 800e760:	6e7a      	ldr	r2, [r7, #100]	; 0x64
            fill_fp(&work_area, mask, color, opa);
 800e762:	464b      	mov	r3, r9
 800e764:	4d34      	ldr	r5, [pc, #208]	; (800e838 <lv_draw_rect+0x1c10>)
            work_area.x1 = coords->x1;
 800e766:	f9b2 1000 	ldrsh.w	r1, [r2]
            work_area.y1 = coords->y1 + radius + 1 + LV_ANTIALIAS;
 800e76a:	8850      	ldrh	r0, [r2, #2]
            work_area.x2 = coords->x1 + radius + LV_ANTIALIAS;
 800e76c:	1c4e      	adds	r6, r1, #1
            work_area.x1 = coords->x1;
 800e76e:	f8a7 1098 	strh.w	r1, [r7, #152]	; 0x98
            work_area.y1 = coords->y1 + radius + 1 + LV_ANTIALIAS;
 800e772:	f100 0e02 	add.w	lr, r0, #2
            work_area.y2 = coords->y1 + bwidth;
 800e776:	4458      	add	r0, fp
            work_area.x2 = coords->x1 + radius + LV_ANTIALIAS;
 800e778:	4446      	add	r6, r8
            fill_fp(&work_area, mask, color, opa);
 800e77a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
            work_area.y1 = coords->y1 + radius + 1 + LV_ANTIALIAS;
 800e77c:	44c6      	add	lr, r8
            work_area.y2 = coords->y1 + bwidth;
 800e77e:	f8a7 009e 	strh.w	r0, [r7, #158]	; 0x9e
            work_area.x2 = coords->x1 + radius + LV_ANTIALIAS;
 800e782:	f8a7 609c 	strh.w	r6, [r7, #156]	; 0x9c
            fill_fp(&work_area, mask, color, opa);
 800e786:	f107 0098 	add.w	r0, r7, #152	; 0x98
 800e78a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
            work_area.y1 = coords->y1 + radius + 1 + LV_ANTIALIAS;
 800e78c:	f8a7 e09a 	strh.w	lr, [r7, #154]	; 0x9a
            fill_fp(&work_area, mask, color, opa);
 800e790:	682d      	ldr	r5, [r5, #0]
 800e792:	47a8      	blx	r5
 800e794:	f7ff b91b 	b.w	800d9ce <lv_draw_rect+0xda6>
    if(r >= (h >> 1)) {
 800e798:	105b      	asrs	r3, r3, #1
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	f77f ad23 	ble.w	800e1e6 <lv_draw_rect+0x15be>
    if(r > 0) r -= LV_ANTIALIAS;
 800e7a0:	2301      	movs	r3, #1
 800e7a2:	66bb      	str	r3, [r7, #104]	; 0x68
 800e7a4:	461d      	mov	r5, r3
 800e7a6:	633b      	str	r3, [r7, #48]	; 0x30
 800e7a8:	e529      	b.n	800e1fe <lv_draw_rect+0x15d6>
            px_fp(lt_origo.x + LV_CIRC_OCT6_X(aa_p), lt_origo.y + LV_CIRC_OCT6_Y(aa_p), mask, style->body.border.color, aa_opa);
 800e7aa:	f8b7 0040 	ldrh.w	r0, [r7, #64]	; 0x40
 800e7ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e7b0:	6dbe      	ldr	r6, [r7, #88]	; 0x58
 800e7b2:	1a09      	subs	r1, r1, r0
 800e7b4:	4c21      	ldr	r4, [pc, #132]	; (800e83c <lv_draw_rect+0x1c14>)
 800e7b6:	1a30      	subs	r0, r6, r0
 800e7b8:	f8da 3010 	ldr.w	r3, [sl, #16]
 800e7bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e7be:	b209      	sxth	r1, r1
 800e7c0:	9500      	str	r5, [sp, #0]
 800e7c2:	b200      	sxth	r0, r0
 800e7c4:	6824      	ldr	r4, [r4, #0]
 800e7c6:	47a0      	blx	r4
 800e7c8:	e448      	b.n	800e05c <lv_draw_rect+0x1434>
 800e7ca:	f004 0301 	and.w	r3, r4, #1
        if(part & LV_BORDER_LEFT) {
 800e7ce:	0765      	lsls	r5, r4, #29
 800e7d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e7d2:	f57e acd6 	bpl.w	800d182 <lv_draw_rect+0x55a>
            work_area.x1 = coords->x1;
 800e7d6:	6e78      	ldr	r0, [r7, #100]	; 0x64
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800e7d8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
            work_area.x1 = coords->x1;
 800e7da:	f9b0 2000 	ldrsh.w	r2, [r0]
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800e7de:	8843      	ldrh	r3, [r0, #2]
            work_area.x2 = coords->x1 + bwidth;
 800e7e0:	eb0b 0002 	add.w	r0, fp, r2
            work_area.x1 = coords->x1;
 800e7e4:	f8a7 2098 	strh.w	r2, [r7, #152]	; 0x98
            work_area.x2 = coords->x1 + bwidth;
 800e7e8:	f8a7 009c 	strh.w	r0, [r7, #156]	; 0x9c
 800e7ec:	f7fe bcb3 	b.w	800d156 <lv_draw_rect+0x52e>
            px_fp(lb_origo.x + LV_CIRC_OCT4_X(aa_p), lb_origo.y + LV_CIRC_OCT4_Y(aa_p), mask, style->body.border.color, aa_opa);
 800e7f0:	f8b7 0040 	ldrh.w	r0, [r7, #64]	; 0x40
 800e7f4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e7f6:	6dbe      	ldr	r6, [r7, #88]	; 0x58
 800e7f8:	4401      	add	r1, r0
 800e7fa:	4c10      	ldr	r4, [pc, #64]	; (800e83c <lv_draw_rect+0x1c14>)
 800e7fc:	1a30      	subs	r0, r6, r0
 800e7fe:	f8da 3010 	ldr.w	r3, [sl, #16]
 800e802:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e804:	b209      	sxth	r1, r1
 800e806:	9500      	str	r5, [sp, #0]
 800e808:	b200      	sxth	r0, r0
 800e80a:	6824      	ldr	r4, [r4, #0]
 800e80c:	47a0      	blx	r4
 800e80e:	e41f      	b.n	800e050 <lv_draw_rect+0x1428>
            px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask, style->body.border.color, aa_opa);
 800e810:	f8b7 0040 	ldrh.w	r0, [r7, #64]	; 0x40
 800e814:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e816:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 800e818:	4401      	add	r1, r0
 800e81a:	4c08      	ldr	r4, [pc, #32]	; (800e83c <lv_draw_rect+0x1c14>)
 800e81c:	4430      	add	r0, r6
 800e81e:	f8da 3010 	ldr.w	r3, [sl, #16]
 800e822:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e824:	b209      	sxth	r1, r1
 800e826:	9500      	str	r5, [sp, #0]
 800e828:	b200      	sxth	r0, r0
 800e82a:	6824      	ldr	r4, [r4, #0]
 800e82c:	47a0      	blx	r4
 800e82e:	e409      	b.n	800e044 <lv_draw_rect+0x141c>
        int16_t diff = col == 0 ? 0 : curve_x[col - 1] - curve_x[col];
 800e830:	4698      	mov	r8, r3
 800e832:	f7fe bfd7 	b.w	800d7e4 <lv_draw_rect+0xbbc>
 800e836:	bf00      	nop
 800e838:	080872f0 	.word	0x080872f0
 800e83c:	080872f4 	.word	0x080872f4

0800e840 <sw_color_fill>:
 * @param fill_area coordinates of an area to fill. Relative to 'mem_area'.
 * @param color fill color
 * @param opa opacity (0, LV_OPA_TRANSP: transparent ... 255, LV_OPA_COVER, fully cover)
 */
static void sw_color_fill(lv_area_t * mem_area, lv_color_t * mem, const lv_area_t * fill_area, lv_color_t color, lv_opa_t opa)
{
 800e840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e844:	461d      	mov	r5, r3
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 800e846:	8883      	ldrh	r3, [r0, #4]
 800e848:	b089      	sub	sp, #36	; 0x24
 800e84a:	4690      	mov	r8, r2
 800e84c:	3301      	adds	r3, #1
 800e84e:	8802      	ldrh	r2, [r0, #0]
 800e850:	9106      	str	r1, [sp, #24]
 800e852:	b2e9      	uxtb	r1, r5
 800e854:	1a9b      	subs	r3, r3, r2
 800e856:	f3c5 2907 	ubfx	r9, r5, #8, #8
 800e85a:	9104      	str	r1, [sp, #16]
 800e85c:	f3c5 4b07 	ubfx	fp, r5, #16, #8
 800e860:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 800e864:	b21b      	sxth	r3, r3
 800e866:	9105      	str	r1, [sp, #20]
 800e868:	9303      	str	r3, [sp, #12]
    /*Set all row in vdb to the given color*/
    lv_coord_t row;
    lv_coord_t col;
    lv_coord_t mem_width = lv_area_get_width(mem_area);

    lv_disp_t * disp = lv_disp_get_active();
 800e86a:	f000 fe5d 	bl	800f528 <lv_disp_get_active>
    if(disp->driver.vdb_wr) {
 800e86e:	6942      	ldr	r2, [r0, #20]
 800e870:	b362      	cbz	r2, 800e8cc <sw_color_fill+0x8c>
        for(col = fill_area->x1; col <= fill_area->x2; col++) {
 800e872:	f9b8 7000 	ldrsh.w	r7, [r8]
 800e876:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 800e87a:	42ba      	cmp	r2, r7
 800e87c:	db23      	blt.n	800e8c6 <sw_color_fill+0x86>
 800e87e:	4682      	mov	sl, r0
 800e880:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 800e884:	f9b8 4002 	ldrsh.w	r4, [r8, #2]
 800e888:	42a3      	cmp	r3, r4
 800e88a:	db18      	blt.n	800e8be <sw_color_fill+0x7e>
                disp->driver.vdb_wr((uint8_t *)mem, mem_width, col, row, color, opa);
 800e88c:	9b04      	ldr	r3, [sp, #16]
 800e88e:	9a05      	ldr	r2, [sp, #20]
 800e890:	f363 0507 	bfi	r5, r3, #0, #8
 800e894:	4623      	mov	r3, r4
 800e896:	3401      	adds	r4, #1
 800e898:	f8da 6014 	ldr.w	r6, [sl, #20]
 800e89c:	f369 250f 	bfi	r5, r9, #8, #8
 800e8a0:	9201      	str	r2, [sp, #4]
 800e8a2:	9903      	ldr	r1, [sp, #12]
 800e8a4:	463a      	mov	r2, r7
 800e8a6:	f36b 4517 	bfi	r5, fp, #16, #8
 800e8aa:	9806      	ldr	r0, [sp, #24]
 800e8ac:	b224      	sxth	r4, r4
 800e8ae:	9500      	str	r5, [sp, #0]
 800e8b0:	47b0      	blx	r6
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 800e8b2:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 800e8b6:	42a3      	cmp	r3, r4
 800e8b8:	dae8      	bge.n	800e88c <sw_color_fill+0x4c>
 800e8ba:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 800e8be:	3701      	adds	r7, #1
 800e8c0:	b23f      	sxth	r7, r7
        for(col = fill_area->x1; col <= fill_area->x2; col++) {
 800e8c2:	42ba      	cmp	r2, r7
 800e8c4:	dade      	bge.n	800e884 <sw_color_fill+0x44>
                }
                mem += mem_width;
            }
        }
    }
}
 800e8c6:	b009      	add	sp, #36	; 0x24
 800e8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        mem += fill_area->y1 * mem_width;  /*Go to the first row*/
 800e8cc:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 800e8d0:	9903      	ldr	r1, [sp, #12]
 800e8d2:	9307      	str	r3, [sp, #28]
 800e8d4:	fb03 f601 	mul.w	r6, r3, r1
 800e8d8:	9b06      	ldr	r3, [sp, #24]
 800e8da:	eb03 0686 	add.w	r6, r3, r6, lsl #2
        if(opa == LV_OPA_COVER) {
 800e8de:	9b05      	ldr	r3, [sp, #20]
 800e8e0:	2bff      	cmp	r3, #255	; 0xff
 800e8e2:	d060      	beq.n	800e9a6 <sw_color_fill+0x166>
            lv_color_t bg_tmp = LV_COLOR_BLACK;
 800e8e4:	2700      	movs	r7, #0
static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800e8e6:	9b05      	ldr	r3, [sp, #20]
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 800e8e8:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
            lv_color_t bg_tmp = LV_COLOR_BLACK;
 800e8ec:	f362 0707 	bfi	r7, r2, #0, #8
 800e8f0:	fa1f fc83 	uxth.w	ip, r3
    ret.green_h = g_out >> 3;
    ret.green_l = g_out & 0x7;
#  else
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
#  endif
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800e8f4:	9c04      	ldr	r4, [sp, #16]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800e8f6:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800e8fa:	f362 270f 	bfi	r7, r2, #8, #8
 800e8fe:	fb0b f00c 	mul.w	r0, fp, ip
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800e902:	fb09 f90c 	mul.w	r9, r9, ip
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800e906:	b29b      	uxth	r3, r3
 800e908:	f362 4717 	bfi	r7, r2, #16, #8
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 800e90c:	9a07      	ldr	r2, [sp, #28]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800e90e:	fb04 fc0c 	mul.w	ip, r4, ip
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800e912:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800e916:	428a      	cmp	r2, r1
 800e918:	9005      	str	r0, [sp, #20]
 800e91a:	9106      	str	r1, [sp, #24]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800e91c:	f3c9 2407 	ubfx	r4, r9, #8, #8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800e920:	f3cc 2007 	ubfx	r0, ip, #8, #8
            lv_color_t bg_tmp = LV_COLOR_BLACK;
 800e924:	f047 477f 	orr.w	r7, r7, #4278190080	; 0xff000000
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 800e928:	dccd      	bgt.n	800e8c6 <sw_color_fill+0x86>
 800e92a:	9a03      	ldr	r2, [sp, #12]
                    mem[col] = opa_tmp;
 800e92c:	f04f 0bff 	mov.w	fp, #255	; 0xff
 800e930:	f9b8 a004 	ldrsh.w	sl, [r8, #4]
 800e934:	469e      	mov	lr, r3
 800e936:	0092      	lsls	r2, r2, #2
 800e938:	9204      	str	r2, [sp, #16]
 800e93a:	f9b8 2000 	ldrsh.w	r2, [r8]
 800e93e:	9203      	str	r2, [sp, #12]
                for(col = fill_area->x1; col <= fill_area->x2; col++) {
 800e940:	9a03      	ldr	r2, [sp, #12]
 800e942:	4552      	cmp	r2, sl
 800e944:	dc23      	bgt.n	800e98e <sw_color_fill+0x14e>
                    if(mem[col].full != bg_tmp.full) {
 800e946:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
 800e94a:	f102 0801 	add.w	r8, r2, #1
 800e94e:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 800e952:	42b9      	cmp	r1, r7
 800e954:	fa0f f288 	sxth.w	r2, r8
 800e958:	d012      	beq.n	800e980 <sw_color_fill+0x140>
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800e95a:	f3c1 4507 	ubfx	r5, r1, #16, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800e95e:	f3c1 2407 	ubfx	r4, r1, #8, #8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800e962:	b2c8      	uxtb	r0, r1
                        bg_tmp = mem[col];
 800e964:	460f      	mov	r7, r1
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800e966:	9905      	ldr	r1, [sp, #20]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800e968:	fb0e 9404 	mla	r4, lr, r4, r9
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800e96c:	fb0e c000 	mla	r0, lr, r0, ip
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800e970:	fb0e 1505 	mla	r5, lr, r5, r1
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800e974:	f3c4 2407 	ubfx	r4, r4, #8, #8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800e978:	f3c0 2007 	ubfx	r0, r0, #8, #8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800e97c:	f3c5 2507 	ubfx	r5, r5, #8, #8
                for(col = fill_area->x1; col <= fill_area->x2; col++) {
 800e980:	4552      	cmp	r2, sl
                    mem[col] = opa_tmp;
 800e982:	705c      	strb	r4, [r3, #1]
 800e984:	7018      	strb	r0, [r3, #0]
 800e986:	709d      	strb	r5, [r3, #2]
 800e988:	f883 b003 	strb.w	fp, [r3, #3]
                for(col = fill_area->x1; col <= fill_area->x2; col++) {
 800e98c:	dddb      	ble.n	800e946 <sw_color_fill+0x106>
 800e98e:	9b07      	ldr	r3, [sp, #28]
                mem += mem_width;
 800e990:	9a04      	ldr	r2, [sp, #16]
 800e992:	3301      	adds	r3, #1
 800e994:	4416      	add	r6, r2
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 800e996:	9a06      	ldr	r2, [sp, #24]
 800e998:	b21b      	sxth	r3, r3
 800e99a:	4293      	cmp	r3, r2
 800e99c:	9307      	str	r3, [sp, #28]
 800e99e:	ddcf      	ble.n	800e940 <sw_color_fill+0x100>
}
 800e9a0:	b009      	add	sp, #36	; 0x24
 800e9a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            for(col = fill_area->x1; col <= fill_area->x2; col++) {
 800e9a6:	f9b8 0000 	ldrsh.w	r0, [r8]
 800e9aa:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 800e9ae:	4290      	cmp	r0, r2
 800e9b0:	dc0d      	bgt.n	800e9ce <sw_color_fill+0x18e>
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	9c04      	ldr	r4, [sp, #16]
                mem[col] = color;
 800e9b6:	f364 0507 	bfi	r5, r4, #0, #8
 800e9ba:	1c59      	adds	r1, r3, #1
 800e9bc:	f369 250f 	bfi	r5, r9, #8, #8
 800e9c0:	f36b 4517 	bfi	r5, fp, #16, #8
 800e9c4:	f846 5023 	str.w	r5, [r6, r3, lsl #2]
 800e9c8:	b20b      	sxth	r3, r1
            for(col = fill_area->x1; col <= fill_area->x2; col++) {
 800e9ca:	4293      	cmp	r3, r2
 800e9cc:	ddf3      	ble.n	800e9b6 <sw_color_fill+0x176>
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 800e9ce:	9c07      	ldr	r4, [sp, #28]
            lv_coord_t copy_size = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 800e9d0:	1a15      	subs	r5, r2, r0
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 800e9d2:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
            lv_color_t * mem_first = &mem[fill_area->x1];
 800e9d6:	0080      	lsls	r0, r0, #2
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 800e9d8:	3401      	adds	r4, #1
            lv_coord_t copy_size = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 800e9da:	3501      	adds	r5, #1
            mem += mem_width;
 800e9dc:	9a03      	ldr	r2, [sp, #12]
            lv_color_t * mem_first = &mem[fill_area->x1];
 800e9de:	eb06 0900 	add.w	r9, r6, r0
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 800e9e2:	b224      	sxth	r4, r4
            mem += mem_width;
 800e9e4:	0097      	lsls	r7, r2, #2
            lv_coord_t copy_size = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 800e9e6:	00ad      	lsls	r5, r5, #2
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 800e9e8:	42a3      	cmp	r3, r4
            mem += mem_width;
 800e9ea:	443e      	add	r6, r7
            lv_coord_t copy_size = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 800e9ec:	b22d      	sxth	r5, r5
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 800e9ee:	da03      	bge.n	800e9f8 <sw_color_fill+0x1b8>
 800e9f0:	e769      	b.n	800e8c6 <sw_color_fill+0x86>
 800e9f2:	f9b8 0000 	ldrsh.w	r0, [r8]
 800e9f6:	0080      	lsls	r0, r0, #2
 800e9f8:	3401      	adds	r4, #1
                memcpy(&mem[fill_area->x1], mem_first, copy_size);
 800e9fa:	4430      	add	r0, r6
 800e9fc:	462a      	mov	r2, r5
 800e9fe:	4649      	mov	r1, r9
 800ea00:	f00a fe5e 	bl	80196c0 <memcpy>
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 800ea04:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 800ea08:	b224      	sxth	r4, r4
                mem += mem_width;
 800ea0a:	443e      	add	r6, r7
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 800ea0c:	42a3      	cmp	r3, r4
 800ea0e:	daf0      	bge.n	800e9f2 <sw_color_fill+0x1b2>
 800ea10:	e759      	b.n	800e8c6 <sw_color_fill+0x86>
 800ea12:	bf00      	nop

0800ea14 <lv_vpx>:
{
 800ea14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea18:	b082      	sub	sp, #8
 800ea1a:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
    if(opa < LV_OPA_MIN) return;
 800ea1e:	2c0f      	cmp	r4, #15
 800ea20:	d91a      	bls.n	800ea58 <lv_vpx+0x44>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800ea22:	2cfc      	cmp	r4, #252	; 0xfc
 800ea24:	461f      	mov	r7, r3
 800ea26:	4615      	mov	r5, r2
 800ea28:	4688      	mov	r8, r1
 800ea2a:	4606      	mov	r6, r0
 800ea2c:	bf28      	it	cs
 800ea2e:	24ff      	movcs	r4, #255	; 0xff
    lv_vdb_t * vdb_p = lv_vdb_get();
 800ea30:	f7fb fdec 	bl	800a60c <lv_vdb_get>
    if(!vdb_p) {
 800ea34:	4681      	mov	r9, r0
 800ea36:	b178      	cbz	r0, 800ea58 <lv_vpx+0x44>
    if(x < mask_p->x1 || x > mask_p->x2 ||
 800ea38:	f9b5 3000 	ldrsh.w	r3, [r5]
 800ea3c:	42b3      	cmp	r3, r6
 800ea3e:	dc0b      	bgt.n	800ea58 <lv_vpx+0x44>
 800ea40:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800ea44:	42b3      	cmp	r3, r6
 800ea46:	db07      	blt.n	800ea58 <lv_vpx+0x44>
 800ea48:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800ea4c:	4543      	cmp	r3, r8
 800ea4e:	dc03      	bgt.n	800ea58 <lv_vpx+0x44>
            y < mask_p->y1 || y > mask_p->y2) {
 800ea50:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800ea54:	4543      	cmp	r3, r8
 800ea56:	da02      	bge.n	800ea5e <lv_vpx+0x4a>
}
 800ea58:	b002      	add	sp, #8
 800ea5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea5e:	8881      	ldrh	r1, [r0, #4]
 800ea60:	8803      	ldrh	r3, [r0, #0]
 800ea62:	3101      	adds	r1, #1
    y -= vdb_p->area.y1;
 800ea64:	8840      	ldrh	r0, [r0, #2]
    x -= vdb_p->area.x1;
 800ea66:	1af2      	subs	r2, r6, r3
 800ea68:	1ac9      	subs	r1, r1, r3
    y -= vdb_p->area.y1;
 800ea6a:	eba8 0800 	sub.w	r8, r8, r0
    x -= vdb_p->area.x1;
 800ea6e:	b215      	sxth	r5, r2
 800ea70:	b20e      	sxth	r6, r1
    lv_disp_t * disp = lv_disp_get_active();
 800ea72:	f000 fd59 	bl	800f528 <lv_disp_get_active>
    if(disp->driver.vdb_wr) {
 800ea76:	f8d0 a014 	ldr.w	sl, [r0, #20]
    y -= vdb_p->area.y1;
 800ea7a:	fa0f f888 	sxth.w	r8, r8
    if(disp->driver.vdb_wr) {
 800ea7e:	f1ba 0f00 	cmp.w	sl, #0
 800ea82:	d008      	beq.n	800ea96 <lv_vpx+0x82>
        disp->driver.vdb_wr((uint8_t *)vdb_p->buf, vdb_width, x, y, color, opa);
 800ea84:	f8d9 0008 	ldr.w	r0, [r9, #8]
 800ea88:	4643      	mov	r3, r8
 800ea8a:	9401      	str	r4, [sp, #4]
 800ea8c:	462a      	mov	r2, r5
 800ea8e:	9700      	str	r7, [sp, #0]
 800ea90:	4631      	mov	r1, r6
 800ea92:	47d0      	blx	sl
 800ea94:	e7e0      	b.n	800ea58 <lv_vpx+0x44>
        lv_color_t * vdb_px_p = vdb_p->buf + y * vdb_width + x;
 800ea96:	fb06 5808 	mla	r8, r6, r8, r5
        if(opa == LV_OPA_COVER) {
 800ea9a:	2cff      	cmp	r4, #255	; 0xff
        lv_color_t * vdb_px_p = vdb_p->buf + y * vdb_width + x;
 800ea9c:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800eaa0:	eb05 0388 	add.w	r3, r5, r8, lsl #2
        if(opa == LV_OPA_COVER) {
 800eaa4:	d026      	beq.n	800eaf4 <lv_vpx+0xe0>
 800eaa6:	f1c4 06ff 	rsb	r6, r4, #255	; 0xff
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800eaaa:	f815 9028 	ldrb.w	r9, [r5, r8, lsl #2]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800eaae:	f893 c002 	ldrb.w	ip, [r3, #2]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800eab2:	b2f8      	uxtb	r0, r7
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800eab4:	b2b6      	uxth	r6, r6
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800eab6:	f893 e001 	ldrb.w	lr, [r3, #1]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800eaba:	f3c7 4107 	ubfx	r1, r7, #16, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800eabe:	f3c7 2207 	ubfx	r2, r7, #8, #8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800eac2:	fb19 f906 	smulbb	r9, r9, r6
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800eac6:	fb1c f706 	smulbb	r7, ip, r6
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800eaca:	fb1e f606 	smulbb	r6, lr, r6
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800eace:	fb00 9004 	mla	r0, r0, r4, r9
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800ead2:	fb04 7101 	mla	r1, r4, r1, r7
            *vdb_px_p = lv_color_mix(color, *vdb_px_p, opa);
 800ead6:	27ff      	movs	r7, #255	; 0xff
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800ead8:	fb04 6202 	mla	r2, r4, r2, r6
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800eadc:	f3c0 2007 	ubfx	r0, r0, #8, #8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800eae0:	f3c1 2107 	ubfx	r1, r1, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800eae4:	f3c2 2207 	ubfx	r2, r2, #8, #8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800eae8:	f805 0028 	strb.w	r0, [r5, r8, lsl #2]
 800eaec:	7099      	strb	r1, [r3, #2]
 800eaee:	705a      	strb	r2, [r3, #1]
 800eaf0:	70df      	strb	r7, [r3, #3]
 800eaf2:	e7b1      	b.n	800ea58 <lv_vpx+0x44>
            *vdb_px_p = color;
 800eaf4:	f845 7028 	str.w	r7, [r5, r8, lsl #2]
 800eaf8:	e7ae      	b.n	800ea58 <lv_vpx+0x44>
 800eafa:	bf00      	nop

0800eafc <lv_vfill>:
    if(opa < LV_OPA_MIN) return;
 800eafc:	2b0f      	cmp	r3, #15
 800eafe:	d976      	bls.n	800ebee <lv_vfill+0xf2>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800eb00:	2bfc      	cmp	r3, #252	; 0xfc
{
 800eb02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eb06:	b087      	sub	sp, #28
 800eb08:	461c      	mov	r4, r3
 800eb0a:	4605      	mov	r5, r0
 800eb0c:	460f      	mov	r7, r1
 800eb0e:	4616      	mov	r6, r2
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800eb10:	bf28      	it	cs
 800eb12:	24ff      	movcs	r4, #255	; 0xff
    lv_vdb_t * vdb_p = lv_vdb_get();
 800eb14:	f7fb fd7a 	bl	800a60c <lv_vdb_get>
    if(!vdb_p) {
 800eb18:	4681      	mov	r9, r0
 800eb1a:	2800      	cmp	r0, #0
 800eb1c:	d064      	beq.n	800ebe8 <lv_vfill+0xec>
    union_ok = lv_area_intersect(&res_a, cords_p, mask_p);
 800eb1e:	463a      	mov	r2, r7
 800eb20:	4629      	mov	r1, r5
 800eb22:	a802      	add	r0, sp, #8
 800eb24:	f000 ff30 	bl	800f988 <lv_area_intersect>
    if(union_ok == false) return;
 800eb28:	2800      	cmp	r0, #0
 800eb2a:	d05d      	beq.n	800ebe8 <lv_vfill+0xec>
    vdb_rel_a.x1 = res_a.x1 - vdb_p->area.x1;
 800eb2c:	f8b9 7000 	ldrh.w	r7, [r9]
    vdb_rel_a.x2 = res_a.x2 - vdb_p->area.x1;
 800eb30:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    vdb_rel_a.x1 = res_a.x1 - vdb_p->area.x1;
 800eb34:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    vdb_rel_a.x2 = res_a.x2 - vdb_p->area.x1;
 800eb38:	1bd2      	subs	r2, r2, r7
    vdb_rel_a.y1 = res_a.y1 - vdb_p->area.y1;
 800eb3a:	f8b9 5002 	ldrh.w	r5, [r9, #2]
    vdb_rel_a.x1 = res_a.x1 - vdb_p->area.x1;
 800eb3e:	1bc9      	subs	r1, r1, r7
    vdb_rel_a.y1 = res_a.y1 - vdb_p->area.y1;
 800eb40:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    vdb_rel_a.x2 = res_a.x2 - vdb_p->area.x1;
 800eb44:	b292      	uxth	r2, r2
    vdb_rel_a.y2 = res_a.y2 - vdb_p->area.y1;
 800eb46:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    vdb_rel_a.x1 = res_a.x1 - vdb_p->area.x1;
 800eb4a:	b289      	uxth	r1, r1
    vdb_rel_a.y1 = res_a.y1 - vdb_p->area.y1;
 800eb4c:	1b5b      	subs	r3, r3, r5
 800eb4e:	1c57      	adds	r7, r2, #1
    vdb_rel_a.y2 = res_a.y2 - vdb_p->area.y1;
 800eb50:	1b40      	subs	r0, r0, r5
    vdb_rel_a.y1 = res_a.y1 - vdb_p->area.y1;
 800eb52:	b21b      	sxth	r3, r3
    vdb_rel_a.x1 = res_a.x1 - vdb_p->area.x1;
 800eb54:	f8ad 1010 	strh.w	r1, [sp, #16]
 800eb58:	1a7f      	subs	r7, r7, r1
    vdb_rel_a.x2 = res_a.x2 - vdb_p->area.x1;
 800eb5a:	f8ad 2014 	strh.w	r2, [sp, #20]
    vdb_rel_a.y1 = res_a.y1 - vdb_p->area.y1;
 800eb5e:	f8ad 3012 	strh.w	r3, [sp, #18]
 800eb62:	b23f      	sxth	r7, r7
    vdb_rel_a.y2 = res_a.y2 - vdb_p->area.y1;
 800eb64:	f8ad 0016 	strh.w	r0, [sp, #22]
    lv_color_t * vdb_buf_tmp = vdb_p->buf;
 800eb68:	f8d9 1008 	ldr.w	r1, [r9, #8]
    if(w < VFILL_HW_ACC_SIZE_LIMIT) {
 800eb6c:	2f31      	cmp	r7, #49	; 0x31
 800eb6e:	dd3f      	ble.n	800ebf0 <lv_vfill+0xf4>
 800eb70:	f8b9 8004 	ldrh.w	r8, [r9, #4]
    vdb_buf_tmp += vdb_width * vdb_rel_a.y1;
 800eb74:	009b      	lsls	r3, r3, #2
 800eb76:	f8b9 2000 	ldrh.w	r2, [r9]
    else if(opa == LV_OPA_COVER) {
 800eb7a:	2cff      	cmp	r4, #255	; 0xff
 800eb7c:	f108 0801 	add.w	r8, r8, #1
 800eb80:	eba8 0802 	sub.w	r8, r8, r2
 800eb84:	fa0f f888 	sxth.w	r8, r8
    vdb_buf_tmp += vdb_width * vdb_rel_a.y1;
 800eb88:	fb08 1503 	mla	r5, r8, r3, r1
    else if(opa == LV_OPA_COVER) {
 800eb8c:	d03c      	beq.n	800ec08 <lv_vfill+0x10c>
        if(lv_disp_is_mem_blend_supported()) {
 800eb8e:	f000 fcf9 	bl	800f584 <lv_disp_is_mem_blend_supported>
 800eb92:	2800      	cmp	r0, #0
 800eb94:	d053      	beq.n	800ec3e <lv_vfill+0x142>
            if(color_array_tmp[0].full != color.full || last_width != w) {
 800eb96:	4950      	ldr	r1, [pc, #320]	; (800ecd8 <lv_vfill+0x1dc>)
 800eb98:	4850      	ldr	r0, [pc, #320]	; (800ecdc <lv_vfill+0x1e0>)
 800eb9a:	680b      	ldr	r3, [r1, #0]
 800eb9c:	429e      	cmp	r6, r3
 800eb9e:	d02e      	beq.n	800ebfe <lv_vfill+0x102>
                for(i = 0; i < w; i++) {
 800eba0:	2200      	movs	r2, #0
 800eba2:	4613      	mov	r3, r2
 800eba4:	3301      	adds	r3, #1
                    color_array_tmp[i].full = color.full;
 800eba6:	f841 6022 	str.w	r6, [r1, r2, lsl #2]
                for(i = 0; i < w; i++) {
 800ebaa:	b29b      	uxth	r3, r3
 800ebac:	42bb      	cmp	r3, r7
 800ebae:	461a      	mov	r2, r3
 800ebb0:	dbf8      	blt.n	800eba4 <lv_vfill+0xa8>
                last_width = w;
 800ebb2:	8007      	strh	r7, [r0, #0]
            for(row = vdb_rel_a.y1; row <= vdb_rel_a.y2; row++) {
 800ebb4:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 800ebb8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800ebbc:	42b3      	cmp	r3, r6
 800ebbe:	db13      	blt.n	800ebe8 <lv_vfill+0xec>
 800ebc0:	ea4f 0888 	mov.w	r8, r8, lsl #2
                lv_disp_mem_blend(&vdb_buf_tmp[vdb_rel_a.x1], color_array_tmp, w, opa);
 800ebc4:	f8df 9110 	ldr.w	r9, [pc, #272]	; 800ecd8 <lv_vfill+0x1dc>
 800ebc8:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 800ebcc:	3601      	adds	r6, #1
 800ebce:	4623      	mov	r3, r4
 800ebd0:	463a      	mov	r2, r7
 800ebd2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800ebd6:	4649      	mov	r1, r9
 800ebd8:	f000 fcba 	bl	800f550 <lv_disp_mem_blend>
            for(row = vdb_rel_a.y1; row <= vdb_rel_a.y2; row++) {
 800ebdc:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800ebe0:	b236      	sxth	r6, r6
                vdb_buf_tmp += vdb_width;
 800ebe2:	4445      	add	r5, r8
            for(row = vdb_rel_a.y1; row <= vdb_rel_a.y2; row++) {
 800ebe4:	42b3      	cmp	r3, r6
 800ebe6:	daef      	bge.n	800ebc8 <lv_vfill+0xcc>
}
 800ebe8:	b007      	add	sp, #28
 800ebea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebee:	4770      	bx	lr
        sw_color_fill(&vdb_p->area, vdb_p->buf, &vdb_rel_a, color, opa);
 800ebf0:	9400      	str	r4, [sp, #0]
 800ebf2:	4633      	mov	r3, r6
 800ebf4:	4648      	mov	r0, r9
 800ebf6:	aa04      	add	r2, sp, #16
 800ebf8:	f7ff fe22 	bl	800e840 <sw_color_fill>
 800ebfc:	e7f4      	b.n	800ebe8 <lv_vfill+0xec>
            if(color_array_tmp[0].full != color.full || last_width != w) {
 800ebfe:	f9b0 3000 	ldrsh.w	r3, [r0]
 800ec02:	42bb      	cmp	r3, r7
 800ec04:	d1cc      	bne.n	800eba0 <lv_vfill+0xa4>
 800ec06:	e7d5      	b.n	800ebb4 <lv_vfill+0xb8>
        if(lv_disp_is_mem_fill_supported()) {
 800ec08:	f000 fcc6 	bl	800f598 <lv_disp_is_mem_fill_supported>
 800ec0c:	b300      	cbz	r0, 800ec50 <lv_vfill+0x154>
            for(row = vdb_rel_a.y1; row <= vdb_rel_a.y2; row++) {
 800ec0e:	f9bd 4012 	ldrsh.w	r4, [sp, #18]
 800ec12:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800ec16:	42a3      	cmp	r3, r4
 800ec18:	dbe6      	blt.n	800ebe8 <lv_vfill+0xec>
 800ec1a:	ea4f 0888 	mov.w	r8, r8, lsl #2
                lv_disp_mem_fill(&vdb_buf_tmp[vdb_rel_a.x1], w, color);
 800ec1e:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 800ec22:	3401      	adds	r4, #1
 800ec24:	4632      	mov	r2, r6
 800ec26:	4639      	mov	r1, r7
 800ec28:	eb05 0080 	add.w	r0, r5, r0, lsl #2
                vdb_buf_tmp += vdb_width;
 800ec2c:	4445      	add	r5, r8
                lv_disp_mem_fill(&vdb_buf_tmp[vdb_rel_a.x1], w, color);
 800ec2e:	f000 fc9f 	bl	800f570 <lv_disp_mem_fill>
            for(row = vdb_rel_a.y1; row <= vdb_rel_a.y2; row++) {
 800ec32:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800ec36:	b224      	sxth	r4, r4
 800ec38:	42a3      	cmp	r3, r4
 800ec3a:	daf0      	bge.n	800ec1e <lv_vfill+0x122>
 800ec3c:	e7d4      	b.n	800ebe8 <lv_vfill+0xec>
            sw_color_fill(&vdb_p->area, vdb_p->buf, &vdb_rel_a, color, opa);
 800ec3e:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800ec42:	4633      	mov	r3, r6
 800ec44:	9400      	str	r4, [sp, #0]
 800ec46:	4648      	mov	r0, r9
 800ec48:	aa04      	add	r2, sp, #16
 800ec4a:	f7ff fdf9 	bl	800e840 <sw_color_fill>
 800ec4e:	e7cb      	b.n	800ebe8 <lv_vfill+0xec>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 800ec50:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800ec54:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800ec58:	3301      	adds	r3, #1
 800ec5a:	1a9b      	subs	r3, r3, r2
        else if(lv_area_get_height(&vdb_rel_a) > VFILL_HW_ACC_SIZE_LIMIT &&
 800ec5c:	b21b      	sxth	r3, r3
 800ec5e:	2b32      	cmp	r3, #50	; 0x32
 800ec60:	dd2b      	ble.n	800ecba <lv_vfill+0x1be>
                lv_disp_is_mem_blend_supported()) {
 800ec62:	f000 fc8f 	bl	800f584 <lv_disp_is_mem_blend_supported>
        else if(lv_area_get_height(&vdb_rel_a) > VFILL_HW_ACC_SIZE_LIMIT &&
 800ec66:	b340      	cbz	r0, 800ecba <lv_vfill+0x1be>
            if(color_array_tmp[0].full != color.full || last_width != w) {
 800ec68:	491b      	ldr	r1, [pc, #108]	; (800ecd8 <lv_vfill+0x1dc>)
 800ec6a:	481c      	ldr	r0, [pc, #112]	; (800ecdc <lv_vfill+0x1e0>)
 800ec6c:	680b      	ldr	r3, [r1, #0]
 800ec6e:	429e      	cmp	r6, r3
 800ec70:	d02d      	beq.n	800ecce <lv_vfill+0x1d2>
                for(i = 0; i < w; i++) {
 800ec72:	2200      	movs	r2, #0
 800ec74:	4613      	mov	r3, r2
 800ec76:	3301      	adds	r3, #1
                    color_array_tmp[i].full = color.full;
 800ec78:	f841 6022 	str.w	r6, [r1, r2, lsl #2]
                for(i = 0; i < w; i++) {
 800ec7c:	b29b      	uxth	r3, r3
 800ec7e:	42bb      	cmp	r3, r7
 800ec80:	461a      	mov	r2, r3
 800ec82:	dbf8      	blt.n	800ec76 <lv_vfill+0x17a>
                last_width = w;
 800ec84:	8007      	strh	r7, [r0, #0]
            for(row = vdb_rel_a.y1; row <= vdb_rel_a.y2; row++) {
 800ec86:	f9bd 4012 	ldrsh.w	r4, [sp, #18]
 800ec8a:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800ec8e:	42a3      	cmp	r3, r4
 800ec90:	dbaa      	blt.n	800ebe8 <lv_vfill+0xec>
 800ec92:	ea4f 0888 	mov.w	r8, r8, lsl #2
                lv_disp_mem_blend(&vdb_buf_tmp[vdb_rel_a.x1], color_array_tmp, w, opa);
 800ec96:	4e10      	ldr	r6, [pc, #64]	; (800ecd8 <lv_vfill+0x1dc>)
 800ec98:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 800ec9c:	3401      	adds	r4, #1
 800ec9e:	23ff      	movs	r3, #255	; 0xff
 800eca0:	463a      	mov	r2, r7
 800eca2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800eca6:	4631      	mov	r1, r6
 800eca8:	f000 fc52 	bl	800f550 <lv_disp_mem_blend>
            for(row = vdb_rel_a.y1; row <= vdb_rel_a.y2; row++) {
 800ecac:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800ecb0:	b224      	sxth	r4, r4
                vdb_buf_tmp += vdb_width;
 800ecb2:	4445      	add	r5, r8
            for(row = vdb_rel_a.y1; row <= vdb_rel_a.y2; row++) {
 800ecb4:	42a3      	cmp	r3, r4
 800ecb6:	daef      	bge.n	800ec98 <lv_vfill+0x19c>
 800ecb8:	e796      	b.n	800ebe8 <lv_vfill+0xec>
            sw_color_fill(&vdb_p->area, vdb_p->buf, &vdb_rel_a, color, opa);
 800ecba:	22ff      	movs	r2, #255	; 0xff
 800ecbc:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800ecc0:	4633      	mov	r3, r6
 800ecc2:	4648      	mov	r0, r9
 800ecc4:	9200      	str	r2, [sp, #0]
 800ecc6:	aa04      	add	r2, sp, #16
 800ecc8:	f7ff fdba 	bl	800e840 <sw_color_fill>
 800eccc:	e78c      	b.n	800ebe8 <lv_vfill+0xec>
            if(color_array_tmp[0].full != color.full || last_width != w) {
 800ecce:	f9b0 3000 	ldrsh.w	r3, [r0]
 800ecd2:	42bb      	cmp	r3, r7
 800ecd4:	d1cd      	bne.n	800ec72 <lv_vfill+0x176>
 800ecd6:	e7d6      	b.n	800ec86 <lv_vfill+0x18a>
 800ecd8:	2000ecf8 	.word	0x2000ecf8
 800ecdc:	20000058 	.word	0x20000058

0800ece0 <lv_vletter>:
{
 800ece0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ece4:	4694      	mov	ip, r2
 800ece6:	b0a1      	sub	sp, #132	; 0x84
    const uint8_t bpp1_opa_table[2] =  {0, 255};                   /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800ece8:	2200      	movs	r2, #0
{
 800ecea:	461e      	mov	r6, r3
    const uint8_t bpp1_opa_table[2] =  {0, 255};                   /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800ecec:	23ff      	movs	r3, #255	; 0xff
    const uint8_t bpp4_opa_table[16] = {0,   17,  34,  51,         /*Opacity mapping with bpp = 4*/
 800ecee:	4d93      	ldr	r5, [pc, #588]	; (800ef3c <lv_vletter+0x25c>)
    const uint8_t bpp1_opa_table[2] =  {0, 255};                   /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800ecf0:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
{
 800ecf4:	4686      	mov	lr, r0
    const uint8_t bpp2_opa_table[4] =  {0, 85, 170, 255};          /*Opacity mapping with bpp = 2*/
 800ecf6:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 800ecfa:	2255      	movs	r2, #85	; 0x55
    const uint8_t bpp1_opa_table[2] =  {0, 255};                   /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800ecfc:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
{
 800ed00:	460f      	mov	r7, r1
    const uint8_t bpp2_opa_table[4] =  {0, 85, 170, 255};          /*Opacity mapping with bpp = 2*/
 800ed02:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800ed06:	23aa      	movs	r3, #170	; 0xaa
{
 800ed08:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
    const uint8_t bpp4_opa_table[16] = {0,   17,  34,  51,         /*Opacity mapping with bpp = 4*/
 800ed0c:	ac1c      	add	r4, sp, #112	; 0x70
    const uint8_t bpp2_opa_table[4] =  {0, 85, 170, 255};          /*Opacity mapping with bpp = 2*/
 800ed0e:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 800ed12:	f88d 306e 	strb.w	r3, [sp, #110]	; 0x6e
    if(opa < LV_OPA_MIN) return;
 800ed16:	f1bb 0f0f 	cmp.w	fp, #15
    const uint8_t bpp4_opa_table[16] = {0,   17,  34,  51,         /*Opacity mapping with bpp = 4*/
 800ed1a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ed1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if(opa < LV_OPA_MIN) return;
 800ed22:	d946      	bls.n	800edb2 <lv_vletter+0xd2>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800ed24:	f1bb 0ffc 	cmp.w	fp, #252	; 0xfc
 800ed28:	bf28      	it	cs
 800ed2a:	f04f 0bff 	movcs.w	fp, #255	; 0xff
    if(font_p == NULL) {
 800ed2e:	f1bc 0f00 	cmp.w	ip, #0
 800ed32:	d03e      	beq.n	800edb2 <lv_vletter+0xd2>
    lv_coord_t pos_x = pos_p->x;
 800ed34:	f9be 3000 	ldrsh.w	r3, [lr]
 800ed38:	4665      	mov	r5, ip
    uint8_t letter_w = lv_font_get_real_width(font_p, letter);
 800ed3a:	4631      	mov	r1, r6
 800ed3c:	4660      	mov	r0, ip
    lv_coord_t pos_x = pos_p->x;
 800ed3e:	9303      	str	r3, [sp, #12]
    lv_coord_t pos_y = pos_p->y;
 800ed40:	f9be 3002 	ldrsh.w	r3, [lr, #2]
 800ed44:	9307      	str	r3, [sp, #28]
    uint8_t letter_w = lv_font_get_real_width(font_p, letter);
 800ed46:	f000 ff45 	bl	800fbd4 <lv_font_get_real_width>
    uint8_t bpp = lv_font_get_bpp(font_p, letter);  /*Bit per pixel (1,2, 4 or 8)*/
 800ed4a:	4631      	mov	r1, r6
    uint8_t letter_w = lv_font_get_real_width(font_p, letter);
 800ed4c:	4680      	mov	r8, r0
    uint8_t bpp = lv_font_get_bpp(font_p, letter);  /*Bit per pixel (1,2, 4 or 8)*/
 800ed4e:	4628      	mov	r0, r5
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline uint8_t lv_font_get_height(const lv_font_t * font_p)
{
    return font_p->h_px;
 800ed50:	f895 9020 	ldrb.w	r9, [r5, #32]
 800ed54:	f000 ff52 	bl	800fbfc <lv_font_get_bpp>
    if(lv_font_is_monospace(font_p, letter)) {
 800ed58:	4631      	mov	r1, r6
    uint8_t bpp = lv_font_get_bpp(font_p, letter);  /*Bit per pixel (1,2, 4 or 8)*/
 800ed5a:	4682      	mov	sl, r0
    if(lv_font_is_monospace(font_p, letter)) {
 800ed5c:	4628      	mov	r0, r5
 800ed5e:	f000 fef7 	bl	800fb50 <lv_font_is_monospace>
 800ed62:	2800      	cmp	r0, #0
 800ed64:	d136      	bne.n	800edd4 <lv_vletter+0xf4>
    switch(bpp) {
 800ed66:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ed6a:	2b07      	cmp	r3, #7
 800ed6c:	d821      	bhi.n	800edb2 <lv_vletter+0xd2>
 800ed6e:	e8df f003 	tbb	[pc, r3]
 800ed72:	0423      	.short	0x0423
 800ed74:	20202d20 	.word	0x20202d20
 800ed78:	2820      	.short	0x2820
            mask_init = 0xC0;
 800ed7a:	23c0      	movs	r3, #192	; 0xc0
 800ed7c:	9308      	str	r3, [sp, #32]
            bpp_opa_table = bpp2_opa_table;
 800ed7e:	ab1b      	add	r3, sp, #108	; 0x6c
 800ed80:	930a      	str	r3, [sp, #40]	; 0x28
    const uint8_t * map_p = lv_font_get_bitmap(font_p, letter);
 800ed82:	4631      	mov	r1, r6
 800ed84:	4628      	mov	r0, r5
 800ed86:	f000 fefb 	bl	800fb80 <lv_font_get_bitmap>
    if(map_p == NULL) return;
 800ed8a:	4604      	mov	r4, r0
 800ed8c:	b188      	cbz	r0, 800edb2 <lv_vletter+0xd2>
    if(pos_x + letter_w < mask_p->x1 || pos_x > mask_p->x2 ||
 800ed8e:	9a03      	ldr	r2, [sp, #12]
 800ed90:	f9b7 3000 	ldrsh.w	r3, [r7]
 800ed94:	eb08 0502 	add.w	r5, r8, r2
 800ed98:	429d      	cmp	r5, r3
 800ed9a:	db0a      	blt.n	800edb2 <lv_vletter+0xd2>
 800ed9c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800eda0:	4293      	cmp	r3, r2
 800eda2:	db06      	blt.n	800edb2 <lv_vletter+0xd2>
            pos_y + letter_h < mask_p->y1 || pos_y > mask_p->y2) return;
 800eda4:	9a07      	ldr	r2, [sp, #28]
 800eda6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800edaa:	eb09 0602 	add.w	r6, r9, r2
    if(pos_x + letter_w < mask_p->x1 || pos_x > mask_p->x2 ||
 800edae:	429e      	cmp	r6, r3
 800edb0:	da1e      	bge.n	800edf0 <lv_vletter+0x110>
}
 800edb2:	b021      	add	sp, #132	; 0x84
 800edb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            mask_init = 0x80;
 800edb8:	2380      	movs	r3, #128	; 0x80
 800edba:	9308      	str	r3, [sp, #32]
            bpp_opa_table = bpp1_opa_table;
 800edbc:	ab1a      	add	r3, sp, #104	; 0x68
 800edbe:	930a      	str	r3, [sp, #40]	; 0x28
 800edc0:	e7df      	b.n	800ed82 <lv_vletter+0xa2>
            mask_init = 0xFF;
 800edc2:	23ff      	movs	r3, #255	; 0xff
 800edc4:	9308      	str	r3, [sp, #32]
            bpp_opa_table = NULL;
 800edc6:	2300      	movs	r3, #0
 800edc8:	930a      	str	r3, [sp, #40]	; 0x28
            break;             /*No opa table, pixel value will be used directly*/
 800edca:	e7da      	b.n	800ed82 <lv_vletter+0xa2>
            mask_init = 0xF0;
 800edcc:	23f0      	movs	r3, #240	; 0xf0
            bpp_opa_table = bpp4_opa_table;
 800edce:	940a      	str	r4, [sp, #40]	; 0x28
            mask_init = 0xF0;
 800edd0:	9308      	str	r3, [sp, #32]
            break;
 800edd2:	e7d6      	b.n	800ed82 <lv_vletter+0xa2>
        pos_x += (lv_font_get_width(font_p, letter) - letter_w) / 2;
 800edd4:	4631      	mov	r1, r6
 800edd6:	4628      	mov	r0, r5
 800edd8:	f000 fee4 	bl	800fba4 <lv_font_get_width>
 800eddc:	ebb0 0008 	subs.w	r0, r0, r8
 800ede0:	9b03      	ldr	r3, [sp, #12]
 800ede2:	bf48      	it	mi
 800ede4:	3001      	addmi	r0, #1
 800ede6:	eb03 0060 	add.w	r0, r3, r0, asr #1
 800edea:	b203      	sxth	r3, r0
 800edec:	9303      	str	r3, [sp, #12]
 800edee:	e7ba      	b.n	800ed66 <lv_vletter+0x86>
            pos_y + letter_h < mask_p->y1 || pos_y > mask_p->y2) return;
 800edf0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800edf4:	4293      	cmp	r3, r2
 800edf6:	dbdc      	blt.n	800edb2 <lv_vletter+0xd2>
    lv_vdb_t * vdb_p = lv_vdb_get();
 800edf8:	f7fb fc08 	bl	800a60c <lv_vdb_get>
    if(!vdb_p) {
 800edfc:	9006      	str	r0, [sp, #24]
 800edfe:	2800      	cmp	r0, #0
 800ee00:	d0d7      	beq.n	800edb2 <lv_vletter+0xd2>
    return area_p->x2 - area_p->x1 + 1;
 800ee02:	8883      	ldrh	r3, [r0, #4]
    uint8_t width_byte_bpp = (letter_w * bpp) >> 3;    /*Letter width in byte. Real width in the font*/
 800ee04:	fb1a f208 	smulbb	r2, sl, r8
 800ee08:	f9b0 e000 	ldrsh.w	lr, [r0]
 800ee0c:	3301      	adds	r3, #1
 800ee0e:	f3c2 01c7 	ubfx	r1, r2, #3, #8
    lv_color_t * vdb_buf_tmp = vdb_p->buf;
 800ee12:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800ee16:	eba3 030e 	sub.w	r3, r3, lr
    uint8_t width_byte_bpp = (letter_w * bpp) >> 3;    /*Letter width in byte. Real width in the font*/
 800ee1a:	9113      	str	r1, [sp, #76]	; 0x4c
 800ee1c:	b218      	sxth	r0, r3
    if((letter_w * bpp) & 0x7) width_byte_bpp++;
 800ee1e:	0753      	lsls	r3, r2, #29
 800ee20:	900e      	str	r0, [sp, #56]	; 0x38
 800ee22:	d003      	beq.n	800ee2c <lv_vletter+0x14c>
 800ee24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ee26:	3301      	adds	r3, #1
 800ee28:	b2db      	uxtb	r3, r3
 800ee2a:	9313      	str	r3, [sp, #76]	; 0x4c
    lv_coord_t col_start = pos_x >= mask_p->x1 ? 0 : mask_p->x1 - pos_x;
 800ee2c:	f9b7 3000 	ldrsh.w	r3, [r7]
 800ee30:	9903      	ldr	r1, [sp, #12]
 800ee32:	4299      	cmp	r1, r3
 800ee34:	f280 8126 	bge.w	800f084 <lv_vletter+0x3a4>
 800ee38:	1a5b      	subs	r3, r3, r1
 800ee3a:	b21b      	sxth	r3, r3
 800ee3c:	fb1a f203 	smulbb	r2, sl, r3
 800ee40:	9315      	str	r3, [sp, #84]	; 0x54
 800ee42:	9302      	str	r3, [sp, #8]
 800ee44:	10d1      	asrs	r1, r2, #3
 800ee46:	9205      	str	r2, [sp, #20]
    lv_coord_t col_end = pos_x + letter_w <= mask_p->x2 ? letter_w : mask_p->x2 - pos_x + 1;
 800ee48:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800ee4c:	429d      	cmp	r5, r3
 800ee4e:	dd03      	ble.n	800ee58 <lv_vletter+0x178>
 800ee50:	3301      	adds	r3, #1
 800ee52:	9a03      	ldr	r2, [sp, #12]
 800ee54:	eba3 0802 	sub.w	r8, r3, r2
 800ee58:	fa0f f388 	sxth.w	r3, r8
    lv_coord_t row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
 800ee5c:	9a07      	ldr	r2, [sp, #28]
    lv_coord_t col_end = pos_x + letter_w <= mask_p->x2 ? letter_w : mask_p->x2 - pos_x + 1;
 800ee5e:	9304      	str	r3, [sp, #16]
    lv_coord_t row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
 800ee60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ee64:	429a      	cmp	r2, r3
 800ee66:	f2c0 8100 	blt.w	800f06a <lv_vletter+0x38a>
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	930f      	str	r3, [sp, #60]	; 0x3c
    lv_coord_t row_end  = pos_y + letter_h <= mask_p->y2 ? letter_h : mask_p->y2 - pos_y + 1;
 800ee70:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ee74:	4296      	cmp	r6, r2
 800ee76:	dd03      	ble.n	800ee80 <lv_vletter+0x1a0>
 800ee78:	3201      	adds	r2, #1
 800ee7a:	9d07      	ldr	r5, [sp, #28]
 800ee7c:	eba2 0905 	sub.w	r9, r2, r5
 800ee80:	fa0f f289 	sxth.w	r2, r9
    map_p += (row_start * width_byte_bpp) + ((col_start * bpp) >> 3);
 800ee84:	440b      	add	r3, r1
    vdb_buf_tmp += ((pos_y - vdb_p->area.y1) * vdb_width)
 800ee86:	9907      	ldr	r1, [sp, #28]
    lv_coord_t row_end  = pos_y + letter_h <= mask_p->y2 ? letter_h : mask_p->y2 - pos_y + 1;
 800ee88:	9214      	str	r2, [sp, #80]	; 0x50
    map_p += (row_start * width_byte_bpp) + ((col_start * bpp) >> 3);
 800ee8a:	eb04 0903 	add.w	r9, r4, r3
    vdb_buf_tmp += ((pos_y - vdb_p->area.y1) * vdb_width)
 800ee8e:	9a06      	ldr	r2, [sp, #24]
                   + pos_x - vdb_p->area.x1;
 800ee90:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    vdb_buf_tmp += ((pos_y - vdb_p->area.y1) * vdb_width)
 800ee92:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
    vdb_buf_tmp += (row_start * vdb_width) + col_start;
 800ee96:	9e02      	ldr	r6, [sp, #8]
    vdb_buf_tmp += ((pos_y - vdb_p->area.y1) * vdb_width)
 800ee98:	1a8a      	subs	r2, r1, r2
                   + pos_x - vdb_p->area.x1;
 800ee9a:	9903      	ldr	r1, [sp, #12]
    vdb_buf_tmp += (row_start * vdb_width) + col_start;
 800ee9c:	4430      	add	r0, r6
                   + pos_x - vdb_p->area.x1;
 800ee9e:	fb04 1202 	mla	r2, r4, r2, r1
 800eea2:	eba2 0e0e 	sub.w	lr, r2, lr
    vdb_buf_tmp += (row_start * vdb_width) + col_start;
 800eea6:	4470      	add	r0, lr
 800eea8:	eb0c 0380 	add.w	r3, ip, r0, lsl #2
 800eeac:	930c      	str	r3, [sp, #48]	; 0x30
    lv_disp_t * disp = lv_disp_get_active();
 800eeae:	f000 fb3b 	bl	800f528 <lv_disp_get_active>
    for(row = row_start; row < row_end; row ++) {
 800eeb2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800eeb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    lv_disp_t * disp = lv_disp_get_active();
 800eeb6:	900b      	str	r0, [sp, #44]	; 0x2c
    for(row = row_start; row < row_end; row ++) {
 800eeb8:	4293      	cmp	r3, r2
 800eeba:	f77f af7a 	ble.w	800edb2 <lv_vletter+0xd2>
 800eebe:	9a05      	ldr	r2, [sp, #20]
 800eec0:	9f04      	ldr	r7, [sp, #16]
 800eec2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eec4:	4251      	negs	r1, r2
 800eec6:	f002 0007 	and.w	r0, r2, #7
 800eeca:	eba7 0206 	sub.w	r2, r7, r6
 800eece:	ea6f 0303 	mvn.w	r3, r3
 800eed2:	f001 0107 	and.w	r1, r1, #7
 800eed6:	eba4 0202 	sub.w	r2, r4, r2
 800eeda:	f89d 50a8 	ldrb.w	r5, [sp, #168]	; 0xa8
 800eede:	443b      	add	r3, r7
 800eee0:	bf58      	it	pl
 800eee2:	4248      	negpl	r0, r1
 800eee4:	0092      	lsls	r2, r2, #2
 800eee6:	9512      	str	r5, [sp, #72]	; 0x48
 800eee8:	b29b      	uxth	r3, r3
 800eeea:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800eeee:	b2c1      	uxtb	r1, r0
 800eef0:	9216      	str	r2, [sp, #88]	; 0x58
 800eef2:	3301      	adds	r3, #1
 800eef4:	9a08      	ldr	r2, [sp, #32]
 800eef6:	9118      	str	r1, [sp, #96]	; 0x60
 800eef8:	009b      	lsls	r3, r3, #2
 800eefa:	410a      	asrs	r2, r1
 800eefc:	9317      	str	r3, [sp, #92]	; 0x5c
 800eefe:	b2d3      	uxtb	r3, r2
 800ef00:	9319      	str	r3, [sp, #100]	; 0x64
        for(col = col_start; col < col_end; col ++) {
 800ef02:	9b04      	ldr	r3, [sp, #16]
 800ef04:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800ef06:	461a      	mov	r2, r3
 800ef08:	42a2      	cmp	r2, r4
 800ef0a:	f340 80ab 	ble.w	800f064 <lv_vletter+0x384>
 800ef0e:	f1ca 0308 	rsb	r3, sl, #8
 800ef12:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800ef14:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800ef16:	f04f 0800 	mov.w	r8, #0
 800ef1a:	9305      	str	r3, [sp, #20]
 800ef1c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800ef20:	930d      	str	r3, [sp, #52]	; 0x34
 800ef22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef24:	1d1f      	adds	r7, r3, #4
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800ef26:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800ef28:	f3c3 4307 	ubfx	r3, r3, #16, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800ef2c:	9702      	str	r7, [sp, #8]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800ef2e:	9310      	str	r3, [sp, #64]	; 0x40
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800ef30:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800ef32:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800ef36:	9311      	str	r3, [sp, #68]	; 0x44
 800ef38:	e00f      	b.n	800ef5a <lv_vletter+0x27a>
 800ef3a:	bf00      	nop
 800ef3c:	08087314 	.word	0x08087314
                col_bit += bpp;
 800ef40:	4455      	add	r5, sl
                mask = mask >> bpp;
 800ef42:	fa46 f60a 	asr.w	r6, r6, sl
                col_bit += bpp;
 800ef46:	b2ed      	uxtb	r5, r5
                mask = mask >> bpp;
 800ef48:	b2f6      	uxtb	r6, r6
 800ef4a:	9b02      	ldr	r3, [sp, #8]
 800ef4c:	3401      	adds	r4, #1
 800ef4e:	3304      	adds	r3, #4
 800ef50:	b224      	sxth	r4, r4
 800ef52:	9302      	str	r3, [sp, #8]
        for(col = col_start; col < col_end; col ++) {
 800ef54:	9b04      	ldr	r3, [sp, #16]
 800ef56:	42a3      	cmp	r3, r4
 800ef58:	d06f      	beq.n	800f03a <lv_vletter+0x35a>
            letter_px = (*map_p & mask) >> (8 - col_bit - bpp);
 800ef5a:	f899 2000 	ldrb.w	r2, [r9]
 800ef5e:	f1c5 0308 	rsb	r3, r5, #8
 800ef62:	4032      	ands	r2, r6
 800ef64:	eba3 030a 	sub.w	r3, r3, sl
 800ef68:	fa42 f303 	asr.w	r3, r2, r3
            if(letter_px != 0) {
 800ef6c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800ef70:	d027      	beq.n	800efc2 <lv_vletter+0x2e2>
                if(opa == LV_OPA_COVER) {
 800ef72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef74:	2aff      	cmp	r2, #255	; 0xff
 800ef76:	d05a      	beq.n	800f02e <lv_vletter+0x34e>
                    px_opa = bpp == 8 ?
 800ef78:	f1ba 0f08 	cmp.w	sl, #8
 800ef7c:	d001      	beq.n	800ef82 <lv_vletter+0x2a2>
                             (uint16_t)((uint16_t)bpp_opa_table[letter_px] * opa) >> 8;
 800ef7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ef80:	5cd3      	ldrb	r3, [r2, r3]
                    px_opa = bpp == 8 ?
 800ef82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef84:	fb03 f302 	mul.w	r3, r3, r2
 800ef88:	f3c3 2307 	ubfx	r3, r3, #8, #8
                if(disp->driver.vdb_wr) {
 800ef8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ef8e:	f8d2 b014 	ldr.w	fp, [r2, #20]
 800ef92:	f1bb 0f00 	cmp.w	fp, #0
 800ef96:	d020      	beq.n	800efda <lv_vletter+0x2fa>
                                        (col + pos_x) - vdb_p->area.x1, (row + pos_y) - vdb_p->area.y1,
 800ef98:	9806      	ldr	r0, [sp, #24]
 800ef9a:	9f03      	ldr	r7, [sp, #12]
 800ef9c:	f8b0 e002 	ldrh.w	lr, [r0, #2]
 800efa0:	8802      	ldrh	r2, [r0, #0]
 800efa2:	9807      	ldr	r0, [sp, #28]
 800efa4:	1aba      	subs	r2, r7, r2
                    disp->driver.vdb_wr((uint8_t *)vdb_p->buf, vdb_width,
 800efa6:	9f2a      	ldr	r7, [sp, #168]	; 0xa8
                                        (col + pos_x) - vdb_p->area.x1, (row + pos_y) - vdb_p->area.y1,
 800efa8:	eba0 0e0e 	sub.w	lr, r0, lr
                    disp->driver.vdb_wr((uint8_t *)vdb_p->buf, vdb_width,
 800efac:	9806      	ldr	r0, [sp, #24]
                                        (col + pos_x) - vdb_p->area.x1, (row + pos_y) - vdb_p->area.y1,
 800efae:	4422      	add	r2, r4
                    disp->driver.vdb_wr((uint8_t *)vdb_p->buf, vdb_width,
 800efb0:	990e      	ldr	r1, [sp, #56]	; 0x38
 800efb2:	6880      	ldr	r0, [r0, #8]
 800efb4:	9301      	str	r3, [sp, #4]
 800efb6:	b212      	sxth	r2, r2
                                        (col + pos_x) - vdb_p->area.x1, (row + pos_y) - vdb_p->area.y1,
 800efb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                    disp->driver.vdb_wr((uint8_t *)vdb_p->buf, vdb_width,
 800efba:	9700      	str	r7, [sp, #0]
                                        (col + pos_x) - vdb_p->area.x1, (row + pos_y) - vdb_p->area.y1,
 800efbc:	4473      	add	r3, lr
                    disp->driver.vdb_wr((uint8_t *)vdb_p->buf, vdb_width,
 800efbe:	b21b      	sxth	r3, r3
 800efc0:	47d8      	blx	fp
            if(col_bit < 8 - bpp) {
 800efc2:	9b05      	ldr	r3, [sp, #20]
 800efc4:	429d      	cmp	r5, r3
 800efc6:	dbbb      	blt.n	800ef40 <lv_vletter+0x260>
                col_byte_cnt ++;
 800efc8:	f108 0801 	add.w	r8, r8, #1
                map_p ++;
 800efcc:	f109 0901 	add.w	r9, r9, #1
                mask = mask_init;
 800efd0:	9e08      	ldr	r6, [sp, #32]
                col_bit = 0;
 800efd2:	2500      	movs	r5, #0
                col_byte_cnt ++;
 800efd4:	fa5f f888 	uxtb.w	r8, r8
 800efd8:	e7b7      	b.n	800ef4a <lv_vletter+0x26a>
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800efda:	9f02      	ldr	r7, [sp, #8]
 800efdc:	f1c3 00ff 	rsb	r0, r3, #255	; 0xff
 800efe0:	f817 1c02 	ldrb.w	r1, [r7, #-2]
 800efe4:	b280      	uxth	r0, r0
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800efe6:	f817 2c03 	ldrb.w	r2, [r7, #-3]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800efea:	f817 ec04 	ldrb.w	lr, [r7, #-4]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800efee:	fb11 f100 	smulbb	r1, r1, r0
 800eff2:	9f10      	ldr	r7, [sp, #64]	; 0x40
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800eff4:	fb12 f200 	smulbb	r2, r2, r0
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800eff8:	fb1e f000 	smulbb	r0, lr, r0
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800effc:	fb03 1107 	mla	r1, r3, r7, r1
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f000:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800f002:	fb03 2207 	mla	r2, r3, r7, r2
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f006:	9f12      	ldr	r7, [sp, #72]	; 0x48
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f008:	f3c1 2107 	ubfx	r1, r1, #8, #8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f00c:	fb07 0303 	mla	r3, r7, r3, r0
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f010:	f3c2 2207 	ubfx	r2, r2, #8, #8
                    *vdb_buf_tmp = lv_color_mix(color, *vdb_buf_tmp, px_opa);
 800f014:	9f02      	ldr	r7, [sp, #8]
 800f016:	20ff      	movs	r0, #255	; 0xff
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f018:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800f01c:	f807 1c02 	strb.w	r1, [r7, #-2]
 800f020:	f807 2c03 	strb.w	r2, [r7, #-3]
 800f024:	f807 3c04 	strb.w	r3, [r7, #-4]
 800f028:	f807 0c01 	strb.w	r0, [r7, #-1]
 800f02c:	e7c9      	b.n	800efc2 <lv_vletter+0x2e2>
                    px_opa = bpp == 8 ? letter_px : bpp_opa_table[letter_px];
 800f02e:	f1ba 0f08 	cmp.w	sl, #8
 800f032:	d0ab      	beq.n	800ef8c <lv_vletter+0x2ac>
 800f034:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f036:	5cd3      	ldrb	r3, [r2, r3]
 800f038:	e7a8      	b.n	800ef8c <lv_vletter+0x2ac>
 800f03a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f03c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f03e:	4413      	add	r3, r2
 800f040:	930c      	str	r3, [sp, #48]	; 0x30
        map_p += (width_byte_bpp) - col_byte_cnt;
 800f042:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f044:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f046:	eba2 0808 	sub.w	r8, r2, r8
        vdb_buf_tmp += vdb_width  - (col_end - col_start); /*Next row in VDB*/
 800f04a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f04c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f04e:	3301      	adds	r3, #1
        map_p += (width_byte_bpp) - col_byte_cnt;
 800f050:	44c1      	add	r9, r8
        vdb_buf_tmp += vdb_width  - (col_end - col_start); /*Next row in VDB*/
 800f052:	440a      	add	r2, r1
 800f054:	b21b      	sxth	r3, r3
 800f056:	920c      	str	r2, [sp, #48]	; 0x30
    for(row = row_start; row < row_end; row ++) {
 800f058:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f05a:	930f      	str	r3, [sp, #60]	; 0x3c
 800f05c:	429a      	cmp	r2, r3
 800f05e:	f47f af50 	bne.w	800ef02 <lv_vletter+0x222>
 800f062:	e6a6      	b.n	800edb2 <lv_vletter+0xd2>
        for(col = col_start; col < col_end; col ++) {
 800f064:	f04f 0800 	mov.w	r8, #0
 800f068:	e7eb      	b.n	800f042 <lv_vletter+0x362>
    lv_coord_t row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
 800f06a:	9a07      	ldr	r2, [sp, #28]
 800f06c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f06e:	1a9b      	subs	r3, r3, r2
 800f070:	b21b      	sxth	r3, r3
 800f072:	461a      	mov	r2, r3
 800f074:	930f      	str	r3, [sp, #60]	; 0x3c
 800f076:	fb03 f000 	mul.w	r0, r3, r0
 800f07a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800f07e:	fb13 f302 	smulbb	r3, r3, r2
 800f082:	e6f5      	b.n	800ee70 <lv_vletter+0x190>
 800f084:	2100      	movs	r1, #0
 800f086:	9105      	str	r1, [sp, #20]
 800f088:	9102      	str	r1, [sp, #8]
 800f08a:	9115      	str	r1, [sp, #84]	; 0x54
 800f08c:	e6dc      	b.n	800ee48 <lv_vletter+0x168>
 800f08e:	bf00      	nop

0800f090 <lv_vmap>:
{
 800f090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f094:	b097      	sub	sp, #92	; 0x5c
 800f096:	4688      	mov	r8, r1
    if(opa < LV_OPA_MIN) return;
 800f098:	2b0f      	cmp	r3, #15
{
 800f09a:	f89d 1080 	ldrb.w	r1, [sp, #128]	; 0x80
 800f09e:	920c      	str	r2, [sp, #48]	; 0x30
 800f0a0:	9103      	str	r1, [sp, #12]
 800f0a2:	f89d 1084 	ldrb.w	r1, [sp, #132]	; 0x84
 800f0a6:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800f0a8:	468b      	mov	fp, r1
 800f0aa:	f89d 108c 	ldrb.w	r1, [sp, #140]	; 0x8c
 800f0ae:	9106      	str	r1, [sp, #24]
    if(opa < LV_OPA_MIN) return;
 800f0b0:	f240 80a9 	bls.w	800f206 <lv_vmap+0x176>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800f0b4:	2bfc      	cmp	r3, #252	; 0xfc
 800f0b6:	4607      	mov	r7, r0
 800f0b8:	4691      	mov	r9, r2
 800f0ba:	b2f4      	uxtb	r4, r6
 800f0bc:	bf28      	it	cs
 800f0be:	23ff      	movcs	r3, #255	; 0xff
 800f0c0:	f3c6 2507 	ubfx	r5, r6, #8, #8
 800f0c4:	f3c6 4607 	ubfx	r6, r6, #16, #8
 800f0c8:	9305      	str	r3, [sp, #20]
    lv_vdb_t * vdb_p = lv_vdb_get();
 800f0ca:	f7fb fa9f 	bl	800a60c <lv_vdb_get>
    if(!vdb_p) {
 800f0ce:	9004      	str	r0, [sp, #16]
 800f0d0:	2800      	cmp	r0, #0
 800f0d2:	f000 8098 	beq.w	800f206 <lv_vmap+0x176>
    union_ok = lv_area_intersect(&masked_a, cords_p, mask_p);
 800f0d6:	4642      	mov	r2, r8
 800f0d8:	4639      	mov	r1, r7
 800f0da:	a814      	add	r0, sp, #80	; 0x50
 800f0dc:	f000 fc54 	bl	800f988 <lv_area_intersect>
    if(union_ok == false)  return;
 800f0e0:	2800      	cmp	r0, #0
 800f0e2:	f000 8090 	beq.w	800f206 <lv_vmap+0x176>
 800f0e6:	88bb      	ldrh	r3, [r7, #4]
 800f0e8:	f9b7 1000 	ldrsh.w	r1, [r7]
 800f0ec:	3301      	adds	r3, #1
    if(cords_p->y1 < masked_a.y1) {
 800f0ee:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800f0f2:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
 800f0f6:	1a5b      	subs	r3, r3, r1
 800f0f8:	4290      	cmp	r0, r2
 800f0fa:	b21b      	sxth	r3, r3
 800f0fc:	461f      	mov	r7, r3
 800f0fe:	9309      	str	r3, [sp, #36]	; 0x24
 800f100:	da05      	bge.n	800f10e <lv_vmap+0x7e>
        map_p += (uint32_t) map_width * ((masked_a.y1 - cords_p->y1)) * px_size_byte;
 800f102:	1a13      	subs	r3, r2, r0
 800f104:	4638      	mov	r0, r7
 800f106:	009b      	lsls	r3, r3, #2
 800f108:	fb00 9303 	mla	r3, r0, r3, r9
 800f10c:	930c      	str	r3, [sp, #48]	; 0x30
    if(cords_p->x1 < masked_a.x1) {
 800f10e:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
 800f112:	428b      	cmp	r3, r1
 800f114:	dd04      	ble.n	800f120 <lv_vmap+0x90>
        map_p += (masked_a.x1 - cords_p->x1) * px_size_byte;
 800f116:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f118:	1a59      	subs	r1, r3, r1
 800f11a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f11e:	910c      	str	r1, [sp, #48]	; 0x30
    masked_a.x1 = masked_a.x1 - vdb_p->area.x1;
 800f120:	9804      	ldr	r0, [sp, #16]
    masked_a.x2 = masked_a.x2 - vdb_p->area.x1;
 800f122:	f8bd e054 	ldrh.w	lr, [sp, #84]	; 0x54
    masked_a.x1 = masked_a.x1 - vdb_p->area.x1;
 800f126:	8807      	ldrh	r7, [r0, #0]
    masked_a.y1 = masked_a.y1 - vdb_p->area.y1;
 800f128:	8840      	ldrh	r0, [r0, #2]
    masked_a.x1 = masked_a.x1 - vdb_p->area.x1;
 800f12a:	1bd9      	subs	r1, r3, r7
    masked_a.x2 = masked_a.x2 - vdb_p->area.x1;
 800f12c:	ebae 0307 	sub.w	r3, lr, r7
    masked_a.y2 = masked_a.y2 - vdb_p->area.y1;
 800f130:	f8bd 7056 	ldrh.w	r7, [sp, #86]	; 0x56
    masked_a.y1 = masked_a.y1 - vdb_p->area.y1;
 800f134:	1a12      	subs	r2, r2, r0
    masked_a.x1 = masked_a.x1 - vdb_p->area.x1;
 800f136:	b289      	uxth	r1, r1
    masked_a.y2 = masked_a.y2 - vdb_p->area.y1;
 800f138:	1a3f      	subs	r7, r7, r0
    masked_a.x2 = masked_a.x2 - vdb_p->area.x1;
 800f13a:	b29b      	uxth	r3, r3
    masked_a.x1 = masked_a.x1 - vdb_p->area.x1;
 800f13c:	b208      	sxth	r0, r1
    masked_a.y2 = masked_a.y2 - vdb_p->area.y1;
 800f13e:	f8ad 7056 	strh.w	r7, [sp, #86]	; 0x56
    masked_a.y1 = masked_a.y1 - vdb_p->area.y1;
 800f142:	b212      	sxth	r2, r2
 800f144:	9f04      	ldr	r7, [sp, #16]
 800f146:	f103 0801 	add.w	r8, r3, #1
    masked_a.x2 = masked_a.x2 - vdb_p->area.x1;
 800f14a:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
 800f14e:	88bb      	ldrh	r3, [r7, #4]
 800f150:	eba8 0801 	sub.w	r8, r8, r1
    masked_a.y1 = masked_a.y1 - vdb_p->area.y1;
 800f154:	f8ad 2052 	strh.w	r2, [sp, #82]	; 0x52
 800f158:	4639      	mov	r1, r7
    masked_a.x1 = masked_a.x1 - vdb_p->area.x1;
 800f15a:	f8ad 0050 	strh.w	r0, [sp, #80]	; 0x50
 800f15e:	3301      	adds	r3, #1
 800f160:	883f      	ldrh	r7, [r7, #0]
 800f162:	fa0f f888 	sxth.w	r8, r8
    lv_color_t * vdb_buf_tmp = vdb_p->buf;
 800f166:	6889      	ldr	r1, [r1, #8]
 800f168:	1bdb      	subs	r3, r3, r7
 800f16a:	b21b      	sxth	r3, r3
    vdb_buf_tmp += (uint32_t) masked_a.x1; /*Move to the first col*/
 800f16c:	fb03 0202 	mla	r2, r3, r2, r0
 800f170:	930a      	str	r3, [sp, #40]	; 0x28
 800f172:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800f176:	920d      	str	r2, [sp, #52]	; 0x34
    lv_disp_t * disp = lv_disp_get_active();
 800f178:	f000 f9d6 	bl	800f528 <lv_disp_get_active>
    if(chroma_key == false && alpha_byte == false && opa == LV_OPA_COVER && recolor_opa == LV_OPA_TRANSP) {
 800f17c:	9a03      	ldr	r2, [sp, #12]
    lv_disp_t * disp = lv_disp_get_active();
 800f17e:	4682      	mov	sl, r0
    if(chroma_key == false && alpha_byte == false && opa == LV_OPA_COVER && recolor_opa == LV_OPA_TRANSP) {
 800f180:	2a00      	cmp	r2, #0
 800f182:	d143      	bne.n	800f20c <lv_vmap+0x17c>
 800f184:	465a      	mov	r2, fp
 800f186:	2a00      	cmp	r2, #0
 800f188:	d140      	bne.n	800f20c <lv_vmap+0x17c>
 800f18a:	9a05      	ldr	r2, [sp, #20]
 800f18c:	2aff      	cmp	r2, #255	; 0xff
 800f18e:	d13d      	bne.n	800f20c <lv_vmap+0x17c>
 800f190:	9a06      	ldr	r2, [sp, #24]
 800f192:	2a00      	cmp	r2, #0
 800f194:	d13a      	bne.n	800f20c <lv_vmap+0x17c>
        if(disp->driver.vdb_wr) {
 800f196:	6943      	ldr	r3, [r0, #20]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	f000 8157 	beq.w	800f44c <lv_vmap+0x3bc>
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 800f19e:	f9bd 7052 	ldrsh.w	r7, [sp, #82]	; 0x52
 800f1a2:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 800f1a6:	42bb      	cmp	r3, r7
 800f1a8:	db2d      	blt.n	800f206 <lv_vmap+0x176>
 800f1aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
                    disp->driver.vdb_wr((uint8_t *)vdb_p->buf, vdb_width, col + masked_a.x1, row, px_color, opa);
 800f1ac:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800f1b0:	f1a2 0b04 	sub.w	fp, r2, #4
 800f1b4:	f8cd b00c 	str.w	fp, [sp, #12]
 800f1b8:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
                for(col = 0; col < map_useful_w; col++) {
 800f1bc:	f1b8 0f00 	cmp.w	r8, #0
 800f1c0:	dd18      	ble.n	800f1f4 <lv_vmap+0x164>
 800f1c2:	9d03      	ldr	r5, [sp, #12]
 800f1c4:	2400      	movs	r4, #0
                    disp->driver.vdb_wr((uint8_t *)vdb_p->buf, vdb_width, col + masked_a.x1, row, px_color, opa);
 800f1c6:	b2a4      	uxth	r4, r4
 800f1c8:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
                    lv_color_t px_color = *((lv_color_t *)&map_p[(uint32_t)col * px_size_byte]);
 800f1cc:	f855 6f04 	ldr.w	r6, [r5, #4]!
                    disp->driver.vdb_wr((uint8_t *)vdb_p->buf, vdb_width, col + masked_a.x1, row, px_color, opa);
 800f1d0:	463b      	mov	r3, r7
 800f1d2:	4422      	add	r2, r4
 800f1d4:	3401      	adds	r4, #1
 800f1d6:	9904      	ldr	r1, [sp, #16]
 800f1d8:	b224      	sxth	r4, r4
 800f1da:	6888      	ldr	r0, [r1, #8]
 800f1dc:	b212      	sxth	r2, r2
 800f1de:	9600      	str	r6, [sp, #0]
 800f1e0:	4659      	mov	r1, fp
 800f1e2:	f8cd 9004 	str.w	r9, [sp, #4]
 800f1e6:	f8da 6014 	ldr.w	r6, [sl, #20]
 800f1ea:	47b0      	blx	r6
                for(col = 0; col < map_useful_w; col++) {
 800f1ec:	45a0      	cmp	r8, r4
 800f1ee:	d1ea      	bne.n	800f1c6 <lv_vmap+0x136>
 800f1f0:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 800f1f4:	3701      	adds	r7, #1
 800f1f6:	9a03      	ldr	r2, [sp, #12]
 800f1f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f1fa:	b23f      	sxth	r7, r7
 800f1fc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 800f200:	42bb      	cmp	r3, r7
 800f202:	9203      	str	r2, [sp, #12]
 800f204:	dada      	bge.n	800f1bc <lv_vmap+0x12c>
}
 800f206:	b017      	add	sp, #92	; 0x5c
 800f208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f20c:	9806      	ldr	r0, [sp, #24]
 800f20e:	2700      	movs	r7, #0
 800f210:	b283      	uxth	r3, r0
        lv_color_t last_img_px = LV_COLOR_BLACK;
 800f212:	46b9      	mov	r9, r7
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f214:	fb04 f203 	mul.w	r2, r4, r3
        lv_color_t chroma_key_color = LV_COLOR_TRANSP;
 800f218:	463c      	mov	r4, r7
        lv_color_t last_img_px = LV_COLOR_BLACK;
 800f21a:	f36f 0907 	bfc	r9, #0, #8
 800f21e:	4611      	mov	r1, r2
        lv_color_t chroma_key_color = LV_COLOR_TRANSP;
 800f220:	f36f 0407 	bfc	r4, #0, #8
 800f224:	9210      	str	r2, [sp, #64]	; 0x40
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f226:	f1c0 02ff 	rsb	r2, r0, #255	; 0xff
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f22a:	0a09      	lsrs	r1, r1, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f22c:	fb05 f003 	mul.w	r0, r5, r3
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f230:	fb06 f303 	mul.w	r3, r6, r3
 800f234:	4625      	mov	r5, r4
 800f236:	f361 0707 	bfi	r7, r1, #0, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f23a:	900f      	str	r0, [sp, #60]	; 0x3c
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f23c:	461c      	mov	r4, r3
 800f23e:	930e      	str	r3, [sp, #56]	; 0x38
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f240:	0a03      	lsrs	r3, r0, #8
 800f242:	f445 407f 	orr.w	r0, r5, #65280	; 0xff00
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f246:	0a21      	lsrs	r1, r4, #8
        lv_color_t last_img_px = LV_COLOR_BLACK;
 800f248:	f36f 290f 	bfc	r9, #8, #8
 800f24c:	f363 270f 	bfi	r7, r3, #8, #8
        for(row = masked_a.y1; row <= masked_a.y2; row++) {
 800f250:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
        lv_color_t chroma_key_color = LV_COLOR_TRANSP;
 800f254:	4604      	mov	r4, r0
 800f256:	b292      	uxth	r2, r2
        for(row = masked_a.y1; row <= masked_a.y2; row++) {
 800f258:	4618      	mov	r0, r3
 800f25a:	9308      	str	r3, [sp, #32]
 800f25c:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
        lv_color_t chroma_key_color = LV_COLOR_TRANSP;
 800f260:	f6cf 7400 	movt	r4, #65280	; 0xff00
 800f264:	f361 4717 	bfi	r7, r1, #16, #8
        lv_color_t last_img_px = LV_COLOR_BLACK;
 800f268:	f6cf 7900 	movt	r9, #65280	; 0xff00
        for(row = masked_a.y1; row <= masked_a.y2; row++) {
 800f26c:	4283      	cmp	r3, r0
        lv_color_t chroma_key_color = LV_COLOR_TRANSP;
 800f26e:	940b      	str	r4, [sp, #44]	; 0x2c
 800f270:	9207      	str	r2, [sp, #28]
 800f272:	f047 477f 	orr.w	r7, r7, #4278190080	; 0xff000000
        for(row = masked_a.y1; row <= masked_a.y2; row++) {
 800f276:	dbc6      	blt.n	800f206 <lv_vmap+0x176>
 800f278:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f27a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800f27e:	46da      	mov	sl, fp
 800f280:	0092      	lsls	r2, r2, #2
 800f282:	9212      	str	r2, [sp, #72]	; 0x48
 800f284:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f286:	0092      	lsls	r2, r2, #2
 800f288:	9213      	str	r2, [sp, #76]	; 0x4c
            for(col = 0; col < map_useful_w; col++) {
 800f28a:	f1b8 0f00 	cmp.w	r8, #0
 800f28e:	dd54      	ble.n	800f33a <lv_vmap+0x2aa>
 800f290:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f292:	2400      	movs	r4, #0
 800f294:	9e0d      	ldr	r6, [sp, #52]	; 0x34
                if(alpha_byte) {
 800f296:	f1ba 0f00 	cmp.w	sl, #0
 800f29a:	d05f      	beq.n	800f35c <lv_vmap+0x2cc>
                    lv_opa_t px_opa = *(px_color_p + LV_IMG_PX_SIZE_ALPHA_BYTE - 1);
 800f29c:	78eb      	ldrb	r3, [r5, #3]
                    px_color = *((lv_color_t *)px_color_p);
 800f29e:	6829      	ldr	r1, [r5, #0]
                    if(px_opa == LV_OPA_TRANSP) continue;
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d042      	beq.n	800f32a <lv_vmap+0x29a>
                    else if(px_opa != LV_OPA_COVER) opa_result = (uint32_t)((uint32_t)px_opa * opa_result) >> 8;
 800f2a4:	2bff      	cmp	r3, #255	; 0xff
 800f2a6:	f000 80ca 	beq.w	800f43e <lv_vmap+0x3ae>
 800f2aa:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800f2ae:	fb13 f302 	smulbb	r3, r3, r2
 800f2b2:	f3c3 2c07 	ubfx	ip, r3, #8, #8
                if(chroma_key && px_color.full == chroma_key_color.full) continue;
 800f2b6:	9b03      	ldr	r3, [sp, #12]
 800f2b8:	b113      	cbz	r3, 800f2c0 <lv_vmap+0x230>
 800f2ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f2bc:	4299      	cmp	r1, r3
 800f2be:	d034      	beq.n	800f32a <lv_vmap+0x29a>
                if(recolor_opa != LV_OPA_TRANSP) {
 800f2c0:	9b06      	ldr	r3, [sp, #24]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d04e      	beq.n	800f364 <lv_vmap+0x2d4>
                    if(last_img_px.full != px_color.full) {     /*Minor acceleration: calculate only for new colors (save the last)*/
 800f2c6:	4589      	cmp	r9, r1
 800f2c8:	d01e      	beq.n	800f308 <lv_vmap+0x278>
                        last_img_px = px_color;
 800f2ca:	4689      	mov	r9, r1
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f2cc:	9807      	ldr	r0, [sp, #28]
 800f2ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f2d0:	b2c9      	uxtb	r1, r1
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f2d2:	4686      	mov	lr, r0
 800f2d4:	f3c9 2207 	ubfx	r2, r9, #8, #8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f2d8:	fb00 3101 	mla	r1, r0, r1, r3
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f2dc:	980f      	ldr	r0, [sp, #60]	; 0x3c
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f2de:	f3c9 4307 	ubfx	r3, r9, #16, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f2e2:	fb0e 0202 	mla	r2, lr, r2, r0
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f2e6:	f3c1 2107 	ubfx	r1, r1, #8, #8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f2ea:	980e      	ldr	r0, [sp, #56]	; 0x38
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f2ec:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800f2f0:	f361 0707 	bfi	r7, r1, #0, #8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f2f4:	fb0e 0303 	mla	r3, lr, r3, r0
 800f2f8:	f362 270f 	bfi	r7, r2, #8, #8
 800f2fc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800f300:	f363 4717 	bfi	r7, r3, #16, #8
 800f304:	f047 477f 	orr.w	r7, r7, #4278190080	; 0xff000000
                    if(disp->driver.vdb_wr) {
 800f308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f30a:	f8d3 b014 	ldr.w	fp, [r3, #20]
 800f30e:	f1bb 0f00 	cmp.w	fp, #0
 800f312:	d039      	beq.n	800f388 <lv_vmap+0x2f8>
                        disp->driver.vdb_wr((uint8_t *)vdb_p->buf, vdb_width, col + masked_a.x1, row, recolored_px, opa_result);
 800f314:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 800f318:	9904      	ldr	r1, [sp, #16]
 800f31a:	4422      	add	r2, r4
 800f31c:	9b08      	ldr	r3, [sp, #32]
 800f31e:	6888      	ldr	r0, [r1, #8]
 800f320:	b212      	sxth	r2, r2
 800f322:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f324:	e88d 1080 	stmia.w	sp, {r7, ip}
 800f328:	47d8      	blx	fp
 800f32a:	3401      	adds	r4, #1
 800f32c:	3504      	adds	r5, #4
 800f32e:	3604      	adds	r6, #4
 800f330:	b224      	sxth	r4, r4
            for(col = 0; col < map_useful_w; col++) {
 800f332:	4544      	cmp	r4, r8
 800f334:	d1af      	bne.n	800f296 <lv_vmap+0x206>
 800f336:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 800f33a:	9a08      	ldr	r2, [sp, #32]
            map_p += map_width * px_size_byte;  /*Next row on the map*/
 800f33c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f33e:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f340:	3201      	adds	r2, #1
 800f342:	4401      	add	r1, r0
 800f344:	b212      	sxth	r2, r2
            vdb_buf_tmp += vdb_width;           /*Next row on the VDB*/
 800f346:	9813      	ldr	r0, [sp, #76]	; 0x4c
            map_p += map_width * px_size_byte;  /*Next row on the map*/
 800f348:	910c      	str	r1, [sp, #48]	; 0x30
        for(row = masked_a.y1; row <= masked_a.y2; row++) {
 800f34a:	4293      	cmp	r3, r2
            vdb_buf_tmp += vdb_width;           /*Next row on the VDB*/
 800f34c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f34e:	9208      	str	r2, [sp, #32]
 800f350:	4401      	add	r1, r0
 800f352:	910d      	str	r1, [sp, #52]	; 0x34
        for(row = masked_a.y1; row <= masked_a.y2; row++) {
 800f354:	da99      	bge.n	800f28a <lv_vmap+0x1fa>
}
 800f356:	b017      	add	sp, #92	; 0x5c
 800f358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    px_color = *((lv_color_t *)px_color_p);
 800f35c:	6829      	ldr	r1, [r5, #0]
 800f35e:	f8dd c014 	ldr.w	ip, [sp, #20]
 800f362:	e7a8      	b.n	800f2b6 <lv_vmap+0x226>
                    if(disp->driver.vdb_wr) {
 800f364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f366:	f8d3 b014 	ldr.w	fp, [r3, #20]
 800f36a:	f1bb 0f00 	cmp.w	fp, #0
 800f36e:	d037      	beq.n	800f3e0 <lv_vmap+0x350>
                        disp->driver.vdb_wr((uint8_t *)vdb_p->buf, vdb_width, col + masked_a.x1, row, px_color, opa_result);
 800f370:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 800f374:	9804      	ldr	r0, [sp, #16]
 800f376:	4422      	add	r2, r4
 800f378:	9b08      	ldr	r3, [sp, #32]
 800f37a:	6880      	ldr	r0, [r0, #8]
 800f37c:	b212      	sxth	r2, r2
 800f37e:	e88d 1002 	stmia.w	sp, {r1, ip}
 800f382:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f384:	47d8      	blx	fp
 800f386:	e7d0      	b.n	800f32a <lv_vmap+0x29a>
                        if(opa_result == LV_OPA_COVER) vdb_buf_tmp[col].full = recolored_px.full;
 800f388:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 800f38c:	d05a      	beq.n	800f444 <lv_vmap+0x3b4>
 800f38e:	f1cc 01ff 	rsb	r1, ip, #255	; 0xff
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f392:	7833      	ldrb	r3, [r6, #0]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f394:	f896 e002 	ldrb.w	lr, [r6, #2]
                        else vdb_buf_tmp[col] = lv_color_mix(recolored_px, vdb_buf_tmp[col], opa_result);
 800f398:	f04f 3bff 	mov.w	fp, #4294967295
 800f39c:	b289      	uxth	r1, r1
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f39e:	7870      	ldrb	r0, [r6, #1]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f3a0:	fa1f fc8c 	uxth.w	ip, ip
 800f3a4:	f3c7 4207 	ubfx	r2, r7, #16, #8
 800f3a8:	fb1e fe01 	smulbb	lr, lr, r1
 800f3ac:	f886 b003 	strb.w	fp, [r6, #3]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f3b0:	fb10 f001 	smulbb	r0, r0, r1
 800f3b4:	f3c7 2b07 	ubfx	fp, r7, #8, #8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f3b8:	fb13 f101 	smulbb	r1, r3, r1
 800f3bc:	b2fb      	uxtb	r3, r7
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f3be:	fb0c ee02 	mla	lr, ip, r2, lr
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f3c2:	fb0c 000b 	mla	r0, ip, fp, r0
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f3c6:	fb0c 1303 	mla	r3, ip, r3, r1
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f3ca:	f3ce 2e07 	ubfx	lr, lr, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f3ce:	f3c0 2007 	ubfx	r0, r0, #8, #8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f3d2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800f3d6:	f886 e002 	strb.w	lr, [r6, #2]
 800f3da:	7070      	strb	r0, [r6, #1]
 800f3dc:	7033      	strb	r3, [r6, #0]
 800f3de:	e7a4      	b.n	800f32a <lv_vmap+0x29a>
                        if(opa_result == LV_OPA_COVER) vdb_buf_tmp[col] = px_color;
 800f3e0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 800f3e4:	d030      	beq.n	800f448 <lv_vmap+0x3b8>
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f3e6:	78b3      	ldrb	r3, [r6, #2]
 800f3e8:	f1cc 00ff 	rsb	r0, ip, #255	; 0xff
                            vdb_buf_tmp[col] = lv_color_mix(px_color, vdb_buf_tmp[col], opa_result);
 800f3ec:	f04f 32ff 	mov.w	r2, #4294967295
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f3f0:	f896 b000 	ldrb.w	fp, [r6]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f3f4:	9311      	str	r3, [sp, #68]	; 0x44
 800f3f6:	b280      	uxth	r0, r0
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f3f8:	f896 e001 	ldrb.w	lr, [r6, #1]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f3fc:	fa1f f38c 	uxth.w	r3, ip
 800f400:	70f2      	strb	r2, [r6, #3]
 800f402:	f3c1 4c07 	ubfx	ip, r1, #16, #8
 800f406:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f40a:	fb1e fe00 	smulbb	lr, lr, r0
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f40e:	fb12 f200 	smulbb	r2, r2, r0
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f412:	fb1b f000 	smulbb	r0, fp, r0
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f416:	f3c1 2b07 	ubfx	fp, r1, #8, #8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f41a:	b2c9      	uxtb	r1, r1
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f41c:	fb03 220c 	mla	r2, r3, ip, r2
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f420:	fb03 ee0b 	mla	lr, r3, fp, lr
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f424:	fb03 0301 	mla	r3, r3, r1, r0
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f428:	f3c2 2207 	ubfx	r2, r2, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f42c:	f3ce 2e07 	ubfx	lr, lr, #8, #8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f430:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800f434:	70b2      	strb	r2, [r6, #2]
 800f436:	f886 e001 	strb.w	lr, [r6, #1]
 800f43a:	7033      	strb	r3, [r6, #0]
 800f43c:	e775      	b.n	800f32a <lv_vmap+0x29a>
 800f43e:	f8dd c014 	ldr.w	ip, [sp, #20]
 800f442:	e738      	b.n	800f2b6 <lv_vmap+0x226>
                        if(opa_result == LV_OPA_COVER) vdb_buf_tmp[col].full = recolored_px.full;
 800f444:	6037      	str	r7, [r6, #0]
 800f446:	e770      	b.n	800f32a <lv_vmap+0x29a>
                        if(opa_result == LV_OPA_COVER) vdb_buf_tmp[col] = px_color;
 800f448:	6031      	str	r1, [r6, #0]
 800f44a:	e76e      	b.n	800f32a <lv_vmap+0x29a>
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 800f44c:	f9bd 4052 	ldrsh.w	r4, [sp, #82]	; 0x52
 800f450:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 800f454:	42a3      	cmp	r3, r4
 800f456:	f6ff aed6 	blt.w	800f206 <lv_vmap+0x176>
 800f45a:	9b09      	ldr	r3, [sp, #36]	; 0x24
        memcpy(dest, src, length * sizeof(lv_color_t));
 800f45c:	ea4f 0588 	mov.w	r5, r8, lsl #2
 800f460:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 800f464:	009e      	lsls	r6, r3, #2
 800f466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f468:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800f46c:	009f      	lsls	r7, r3, #2
 800f46e:	e00b      	b.n	800f488 <lv_vmap+0x3f8>
 800f470:	4650      	mov	r0, sl
 800f472:	f00a f925 	bl	80196c0 <memcpy>
 800f476:	3401      	adds	r4, #1
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 800f478:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
                map_p += map_width * px_size_byte;               /*Next row on the map*/
 800f47c:	44b1      	add	r9, r6
                vdb_buf_tmp += vdb_width;                        /*Next row on the VDB*/
 800f47e:	44ba      	add	sl, r7
 800f480:	b224      	sxth	r4, r4
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 800f482:	42a3      	cmp	r3, r4
 800f484:	f6ff aebf 	blt.w	800f206 <lv_vmap+0x176>
                if(lv_disp_is_mem_blend_supported() == false) {
 800f488:	f000 f87c 	bl	800f584 <lv_disp_is_mem_blend_supported>
        memcpy(dest, src, length * sizeof(lv_color_t));
 800f48c:	462a      	mov	r2, r5
 800f48e:	4649      	mov	r1, r9
                    lv_disp_mem_blend(vdb_buf_tmp, (lv_color_t *)map_p, map_useful_w, opa);
 800f490:	23ff      	movs	r3, #255	; 0xff
                if(lv_disp_is_mem_blend_supported() == false) {
 800f492:	2800      	cmp	r0, #0
 800f494:	d0ec      	beq.n	800f470 <lv_vmap+0x3e0>
                    lv_disp_mem_blend(vdb_buf_tmp, (lv_color_t *)map_p, map_useful_w, opa);
 800f496:	4642      	mov	r2, r8
 800f498:	4649      	mov	r1, r9
 800f49a:	4650      	mov	r0, sl
 800f49c:	f000 f858 	bl	800f550 <lv_disp_mem_blend>
 800f4a0:	e7e9      	b.n	800f476 <lv_vmap+0x3e6>
 800f4a2:	bf00      	nop

0800f4a4 <lv_font_builtin_init>:

/**
 * Initialize the built-in fonts
 */
void lv_font_builtin_init(void)
{
 800f4a4:	b510      	push	{r4, lr}
#endif


    /*DEJAVU 20*/
#if USE_LV_FONT_DEJAVU_20 != 0
    lv_font_add(&lv_font_dejavu_20, NULL);
 800f4a6:	4c05      	ldr	r4, [pc, #20]	; (800f4bc <lv_font_builtin_init+0x18>)
 800f4a8:	2100      	movs	r1, #0
 800f4aa:	4620      	mov	r0, r4
 800f4ac:	f000 fb46 	bl	800fb3c <lv_font_add>
#endif

    /*SYMBOL 20*/
#if USE_LV_FONT_SYMBOL_20 != 0
#if USE_LV_FONT_DEJAVU_20 != 0
    lv_font_add(&lv_font_symbol_20, &lv_font_dejavu_20);
 800f4b0:	4621      	mov	r1, r4
 800f4b2:	4803      	ldr	r0, [pc, #12]	; (800f4c0 <lv_font_builtin_init+0x1c>)
    lv_font_add(&lv_font_symbol_40, &lv_font_dejavu_40);
#else
    lv_font_add(&lv_font_symbol_40, NULL);
#endif
#endif
}
 800f4b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_font_add(&lv_font_symbol_20, &lv_font_dejavu_20);
 800f4b8:	f000 bb40 	b.w	800fb3c <lv_font_add>
 800f4bc:	2000005c 	.word	0x2000005c
 800f4c0:	20000084 	.word	0x20000084

0800f4c4 <lv_disp_drv_init>:
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
    driver->disp_fill = NULL;
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	6043      	str	r3, [r0, #4]
    driver->disp_map = NULL;
 800f4c8:	6083      	str	r3, [r0, #8]
    driver->disp_flush = NULL;
 800f4ca:	6003      	str	r3, [r0, #0]

#if USE_LV_GPU
    driver->mem_blend = NULL;
 800f4cc:	60c3      	str	r3, [r0, #12]
    driver->mem_fill = NULL;
 800f4ce:	6103      	str	r3, [r0, #16]
#endif

#if LV_VDB_SIZE
    driver->vdb_wr = NULL;
 800f4d0:	6143      	str	r3, [r0, #20]
 800f4d2:	4770      	bx	lr

0800f4d4 <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable (can be local variable)
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
 800f4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4d6:	4605      	mov	r5, r0
    lv_disp_t * node;

    node = lv_mem_alloc(sizeof(lv_disp_t));
 800f4d8:	201c      	movs	r0, #28
 800f4da:	f000 fdcd 	bl	8010078 <lv_mem_alloc>
    lv_mem_assert(node);
 800f4de:	b1a0      	cbz	r0, 800f50a <lv_disp_drv_register+0x36>
 800f4e0:	4604      	mov	r4, r0
    if(node == NULL) return NULL;

    memcpy(&node->driver, driver, sizeof(lv_disp_drv_t));
 800f4e2:	682a      	ldr	r2, [r5, #0]
 800f4e4:	686b      	ldr	r3, [r5, #4]
    node->next = NULL;
 800f4e6:	2600      	movs	r6, #0
    memcpy(&node->driver, driver, sizeof(lv_disp_drv_t));
 800f4e8:	68e9      	ldr	r1, [r5, #12]
 800f4ea:	68af      	ldr	r7, [r5, #8]

    /* Set first display as active by default */
    if(LV_GC_ROOT(_lv_disp_list) == NULL) {
 800f4ec:	480c      	ldr	r0, [pc, #48]	; (800f520 <lv_disp_drv_register+0x4c>)
    memcpy(&node->driver, driver, sizeof(lv_disp_drv_t));
 800f4ee:	6022      	str	r2, [r4, #0]
 800f4f0:	60e1      	str	r1, [r4, #12]
 800f4f2:	6063      	str	r3, [r4, #4]
 800f4f4:	60a7      	str	r7, [r4, #8]
    if(LV_GC_ROOT(_lv_disp_list) == NULL) {
 800f4f6:	6801      	ldr	r1, [r0, #0]
    memcpy(&node->driver, driver, sizeof(lv_disp_drv_t));
 800f4f8:	692a      	ldr	r2, [r5, #16]
 800f4fa:	696b      	ldr	r3, [r5, #20]
 800f4fc:	6122      	str	r2, [r4, #16]
 800f4fe:	6163      	str	r3, [r4, #20]
    node->next = NULL;
 800f500:	61a6      	str	r6, [r4, #24]
    if(LV_GC_ROOT(_lv_disp_list) == NULL) {
 800f502:	b119      	cbz	r1, 800f50c <lv_disp_drv_register+0x38>
        LV_GC_ROOT(_lv_disp_list) = node;
        active = node;
        lv_obj_invalidate(lv_scr_act());
    } else {
        ((lv_disp_t*)LV_GC_ROOT(_lv_disp_list))->next = node;
 800f504:	618c      	str	r4, [r1, #24]
    }

    return node;
}
 800f506:	4620      	mov	r0, r4
 800f508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f50a:	e7fe      	b.n	800f50a <lv_disp_drv_register+0x36>
        active = node;
 800f50c:	4b05      	ldr	r3, [pc, #20]	; (800f524 <lv_disp_drv_register+0x50>)
        LV_GC_ROOT(_lv_disp_list) = node;
 800f50e:	6004      	str	r4, [r0, #0]
        active = node;
 800f510:	601c      	str	r4, [r3, #0]
        lv_obj_invalidate(lv_scr_act());
 800f512:	f7fa f9af 	bl	8009874 <lv_scr_act>
 800f516:	f7f9 fc8f 	bl	8008e38 <lv_obj_invalidate>
}
 800f51a:	4620      	mov	r0, r4
 800f51c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f51e:	bf00      	nop
 800f520:	2001803c 	.word	0x2001803c
 800f524:	2000f478 	.word	0x2000f478

0800f528 <lv_disp_get_active>:
 * Get a pointer to the active display
 * @return pointer to the active display
 */
lv_disp_t * lv_disp_get_active(void)
{
    return active;
 800f528:	4b01      	ldr	r3, [pc, #4]	; (800f530 <lv_disp_get_active+0x8>)
}
 800f52a:	6818      	ldr	r0, [r3, #0]
 800f52c:	4770      	bx	lr
 800f52e:	bf00      	nop
 800f530:	2000f478 	.word	0x2000f478

0800f534 <lv_disp_flush>:
 * @param y1 top coordinate of the rectangle
 * @param y2 bottom coordinate of the rectangle
 * @param color_p pointer to an array of colors
 */
void lv_disp_flush(int32_t x1, int32_t y1, int32_t x2, int32_t y2, lv_color_t * color_p)
{
 800f534:	b430      	push	{r4, r5}
    if(active == NULL) return;
 800f536:	4c05      	ldr	r4, [pc, #20]	; (800f54c <lv_disp_flush+0x18>)
 800f538:	6824      	ldr	r4, [r4, #0]
 800f53a:	b124      	cbz	r4, 800f546 <lv_disp_flush+0x12>
    if(active->driver.disp_flush != NULL) {
 800f53c:	6824      	ldr	r4, [r4, #0]
 800f53e:	b114      	cbz	r4, 800f546 <lv_disp_flush+0x12>

        LV_LOG_TRACE("disp flush  started");
        active->driver.disp_flush(x1, y1, x2, y2, color_p);
 800f540:	46a4      	mov	ip, r4
        LV_LOG_TRACE("disp flush ready");

    } else {
        LV_LOG_WARN("disp flush function registered");
    }
}
 800f542:	bc30      	pop	{r4, r5}
        active->driver.disp_flush(x1, y1, x2, y2, color_p);
 800f544:	4760      	bx	ip
}
 800f546:	bc30      	pop	{r4, r5}
 800f548:	4770      	bx	lr
 800f54a:	bf00      	nop
 800f54c:	2000f478 	.word	0x2000f478

0800f550 <lv_disp_mem_blend>:
 * @param src pointer to pixel map. Blend it to 'dest'.
 * @param length number of pixels in 'src'
 * @param opa opacity (0, LV_OPA_TRANSP: transparent ... 255, LV_OPA_COVER, fully cover)
 */
void lv_disp_mem_blend(lv_color_t * dest, const lv_color_t * src, uint32_t length, lv_opa_t opa)
{
 800f550:	b410      	push	{r4}
    if(active == NULL) return;
 800f552:	4c06      	ldr	r4, [pc, #24]	; (800f56c <lv_disp_mem_blend+0x1c>)
 800f554:	6824      	ldr	r4, [r4, #0]
 800f556:	b12c      	cbz	r4, 800f564 <lv_disp_mem_blend+0x14>
    if(active->driver.mem_blend != NULL) active->driver.mem_blend(dest, src, length, opa);
 800f558:	68e4      	ldr	r4, [r4, #12]
 800f55a:	b11c      	cbz	r4, 800f564 <lv_disp_mem_blend+0x14>
 800f55c:	46a4      	mov	ip, r4
}
 800f55e:	f85d 4b04 	ldr.w	r4, [sp], #4
    if(active->driver.mem_blend != NULL) active->driver.mem_blend(dest, src, length, opa);
 800f562:	4760      	bx	ip
}
 800f564:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f568:	4770      	bx	lr
 800f56a:	bf00      	nop
 800f56c:	2000f478 	.word	0x2000f478

0800f570 <lv_disp_mem_fill>:
 * @param length number of pixels in 'src'
 * @param opa opacity (0, LV_OPA_TRANSP: transparent ... 255, LV_OPA_COVER, fully cover)
 */
void lv_disp_mem_fill(lv_color_t * dest, uint32_t length, lv_color_t color)
{
    if(active == NULL) return;
 800f570:	4b03      	ldr	r3, [pc, #12]	; (800f580 <lv_disp_mem_fill+0x10>)
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	b113      	cbz	r3, 800f57c <lv_disp_mem_fill+0xc>
    if(active->driver.mem_fill != NULL) active->driver.mem_fill(dest, length, color);
 800f576:	691b      	ldr	r3, [r3, #16]
 800f578:	b103      	cbz	r3, 800f57c <lv_disp_mem_fill+0xc>
 800f57a:	4718      	bx	r3
 800f57c:	4770      	bx	lr
 800f57e:	bf00      	nop
 800f580:	2000f478 	.word	0x2000f478

0800f584 <lv_disp_is_mem_blend_supported>:
 * Shows if memory blending (by GPU) is supported or not
 * @return false: 'mem_blend' is not supported in the driver; true: 'mem_blend' is supported in the driver
 */
bool lv_disp_is_mem_blend_supported(void)
{
    if(active == NULL) return false;
 800f584:	4b03      	ldr	r3, [pc, #12]	; (800f594 <lv_disp_is_mem_blend_supported+0x10>)
 800f586:	6818      	ldr	r0, [r3, #0]
 800f588:	b118      	cbz	r0, 800f592 <lv_disp_is_mem_blend_supported+0xe>
    if(active->driver.mem_blend) return true;
 800f58a:	68c0      	ldr	r0, [r0, #12]
 800f58c:	3000      	adds	r0, #0
 800f58e:	bf18      	it	ne
 800f590:	2001      	movne	r0, #1
    else return false;
}
 800f592:	4770      	bx	lr
 800f594:	2000f478 	.word	0x2000f478

0800f598 <lv_disp_is_mem_fill_supported>:
 * Shows if memory fill (by GPU) is supported or not
 * @return false: 'mem_fill' is not supported in the drover; true: 'mem_fill' is supported in the driver
 */
bool lv_disp_is_mem_fill_supported(void)
{
    if(active == NULL) return false;
 800f598:	4b03      	ldr	r3, [pc, #12]	; (800f5a8 <lv_disp_is_mem_fill_supported+0x10>)
 800f59a:	6818      	ldr	r0, [r3, #0]
 800f59c:	b118      	cbz	r0, 800f5a6 <lv_disp_is_mem_fill_supported+0xe>
    if(active->driver.mem_fill) return true;
 800f59e:	6900      	ldr	r0, [r0, #16]
 800f5a0:	3000      	adds	r0, #0
 800f5a2:	bf18      	it	ne
 800f5a4:	2001      	movne	r0, #1
    else return false;
}
 800f5a6:	4770      	bx	lr
 800f5a8:	2000f478 	.word	0x2000f478

0800f5ac <lv_indev_drv_init>:
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_indev_drv_init(lv_indev_drv_t * driver)
{
    driver->read = NULL;
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	6043      	str	r3, [r0, #4]
    driver->type = LV_INDEV_TYPE_NONE;
 800f5b0:	7003      	strb	r3, [r0, #0]
    driver->user_data = NULL;
 800f5b2:	6083      	str	r3, [r0, #8]
 800f5b4:	4770      	bx	lr
 800f5b6:	bf00      	nop

0800f5b8 <lv_indev_drv_register>:
 * Register an initialized input device driver.
 * @param driver pointer to an initialized 'lv_indev_drv_t' variable (can be local variable)
 * @return pointer to the new input device or NULL on error
 */
lv_indev_t * lv_indev_drv_register(lv_indev_drv_t * driver)
{
 800f5b8:	b570      	push	{r4, r5, r6, lr}
 800f5ba:	4605      	mov	r5, r0
    lv_indev_t * node;

    node = lv_mem_alloc(sizeof(lv_indev_t));
 800f5bc:	2048      	movs	r0, #72	; 0x48
 800f5be:	f000 fd5b 	bl	8010078 <lv_mem_alloc>
    if(!node) return NULL;
 800f5c2:	4604      	mov	r4, r0
 800f5c4:	b1d8      	cbz	r0, 800f5fe <lv_indev_drv_register+0x46>

    memset(node, 0, sizeof(lv_indev_t));
 800f5c6:	2248      	movs	r2, #72	; 0x48
 800f5c8:	2100      	movs	r1, #0
 800f5ca:	f00a f884 	bl	80196d6 <memset>
    memcpy(&node->driver, driver, sizeof(lv_indev_drv_t));
 800f5ce:	682a      	ldr	r2, [r5, #0]

    node->next = NULL;
    node->proc.reset_query = 1;
 800f5d0:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    node->next = NULL;
 800f5d4:	2100      	movs	r1, #0
    node->cursor = NULL;
    node->group = NULL;
    node->btn_points = NULL;

    if(LV_GC_ROOT(_lv_indev_list) == NULL) {
 800f5d6:	480c      	ldr	r0, [pc, #48]	; (800f608 <lv_indev_drv_register+0x50>)
    memcpy(&node->driver, driver, sizeof(lv_indev_drv_t));
 800f5d8:	686e      	ldr	r6, [r5, #4]
    node->proc.reset_query = 1;
 800f5da:	f043 0302 	orr.w	r3, r3, #2
    memcpy(&node->driver, driver, sizeof(lv_indev_drv_t));
 800f5de:	68ad      	ldr	r5, [r5, #8]
 800f5e0:	6022      	str	r2, [r4, #0]
    if(LV_GC_ROOT(_lv_indev_list) == NULL) {
 800f5e2:	6802      	ldr	r2, [r0, #0]
    memcpy(&node->driver, driver, sizeof(lv_indev_drv_t));
 800f5e4:	6066      	str	r6, [r4, #4]
 800f5e6:	60a5      	str	r5, [r4, #8]
    node->proc.reset_query = 1;
 800f5e8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    node->next = NULL;
 800f5ec:	6461      	str	r1, [r4, #68]	; 0x44
    node->cursor = NULL;
 800f5ee:	6421      	str	r1, [r4, #64]	; 0x40
    if(LV_GC_ROOT(_lv_indev_list) == NULL) {
 800f5f0:	b90a      	cbnz	r2, 800f5f6 <lv_indev_drv_register+0x3e>
 800f5f2:	e006      	b.n	800f602 <lv_indev_drv_register+0x4a>
 800f5f4:	461a      	mov	r2, r3
        LV_GC_ROOT(_lv_indev_list) = node;
    } else {
        lv_indev_t * last = LV_GC_ROOT(_lv_indev_list);
        while(last->next)
 800f5f6:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d1fb      	bne.n	800f5f4 <lv_indev_drv_register+0x3c>
            last = last->next;

        last->next = node;
 800f5fc:	6454      	str	r4, [r2, #68]	; 0x44
    }

    return node;
}
 800f5fe:	4620      	mov	r0, r4
 800f600:	bd70      	pop	{r4, r5, r6, pc}
        LV_GC_ROOT(_lv_indev_list) = node;
 800f602:	6004      	str	r4, [r0, #0]
 800f604:	e7fb      	b.n	800f5fe <lv_indev_drv_register+0x46>
 800f606:	bf00      	nop
 800f608:	20018020 	.word	0x20018020

0800f60c <lv_indev_next>:
 * @return the next input devise or NULL if no more. Give the first input device when the parameter is NULL
 */
lv_indev_t * lv_indev_next(lv_indev_t * indev)
{

    if(indev == NULL) {
 800f60c:	b108      	cbz	r0, 800f612 <lv_indev_next+0x6>
        return LV_GC_ROOT(_lv_indev_list);
    } else {
        if(indev->next == NULL) return NULL;
 800f60e:	6c40      	ldr	r0, [r0, #68]	; 0x44
        else return indev->next;
    }
}
 800f610:	4770      	bx	lr
        return LV_GC_ROOT(_lv_indev_list);
 800f612:	4b01      	ldr	r3, [pc, #4]	; (800f618 <lv_indev_next+0xc>)
 800f614:	6818      	ldr	r0, [r3, #0]
 800f616:	4770      	bx	lr
 800f618:	20018020 	.word	0x20018020

0800f61c <lv_indev_read>:
 */
bool lv_indev_read(lv_indev_t * indev, lv_indev_data_t * data)
{
    bool cont = false;

    memset(data, 0, sizeof(lv_indev_data_t));
 800f61c:	2300      	movs	r3, #0
 800f61e:	608b      	str	r3, [r1, #8]
 800f620:	600b      	str	r3, [r1, #0]
 800f622:	604b      	str	r3, [r1, #4]
    data->state = LV_INDEV_STATE_REL;
 800f624:	720b      	strb	r3, [r1, #8]

    if(indev->driver.read) {
 800f626:	6843      	ldr	r3, [r0, #4]
 800f628:	b11b      	cbz	r3, 800f632 <lv_indev_read+0x16>
        data->user_data = indev->driver.user_data;
 800f62a:	6882      	ldr	r2, [r0, #8]

        LV_LOG_TRACE("idnev read started");
        cont = indev->driver.read(data);
 800f62c:	4608      	mov	r0, r1
        data->user_data = indev->driver.user_data;
 800f62e:	604a      	str	r2, [r1, #4]
        cont = indev->driver.read(data);
 800f630:	4718      	bx	r3
    } else {
        LV_LOG_WARN("indev function registered");
    }

    return cont;
}
 800f632:	4618      	mov	r0, r3
 800f634:	4770      	bx	lr
 800f636:	bf00      	nop

0800f638 <lv_tick_inc>:
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
    tick_irq_flag = 0;
 800f638:	4b03      	ldr	r3, [pc, #12]	; (800f648 <lv_tick_inc+0x10>)
 800f63a:	2100      	movs	r1, #0
    sys_time += tick_period;
 800f63c:	685a      	ldr	r2, [r3, #4]
    tick_irq_flag = 0;
 800f63e:	7019      	strb	r1, [r3, #0]
    sys_time += tick_period;
 800f640:	4410      	add	r0, r2
 800f642:	6058      	str	r0, [r3, #4]
 800f644:	4770      	bx	lr
 800f646:	bf00      	nop
 800f648:	2000f47c 	.word	0x2000f47c

0800f64c <lv_tick_get>:
/**
 * Get the elapsed milliseconds since start up
 * @return the elapsed milliseconds
 */
uint32_t lv_tick_get(void)
{
 800f64c:	4b03      	ldr	r3, [pc, #12]	; (800f65c <lv_tick_get+0x10>)
#if LV_TICK_CUSTOM == 0
    uint32_t result;
    do {
        tick_irq_flag = 1;
 800f64e:	2101      	movs	r1, #1
 800f650:	6858      	ldr	r0, [r3, #4]
 800f652:	7019      	strb	r1, [r3, #0]
        result = sys_time;
    } while(!tick_irq_flag);     /*'lv_tick_inc()' clears this flag which can be in an interrupt. Continue until make a non interrupted cycle */
 800f654:	781a      	ldrb	r2, [r3, #0]
 800f656:	2a00      	cmp	r2, #0
 800f658:	d0fb      	beq.n	800f652 <lv_tick_get+0x6>

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 800f65a:	4770      	bx	lr
 800f65c:	2000f47c 	.word	0x2000f47c

0800f660 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of systick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 800f660:	4b05      	ldr	r3, [pc, #20]	; (800f678 <lv_tick_elaps+0x18>)
        tick_irq_flag = 1;
 800f662:	2101      	movs	r1, #1
{
 800f664:	b410      	push	{r4}
 800f666:	685c      	ldr	r4, [r3, #4]
        tick_irq_flag = 1;
 800f668:	7019      	strb	r1, [r3, #0]
    } while(!tick_irq_flag);     /*'lv_tick_inc()' clears this flag which can be in an interrupt. Continue until make a non interrupted cycle */
 800f66a:	781a      	ldrb	r2, [r3, #0]
 800f66c:	2a00      	cmp	r2, #0
 800f66e:	d0fb      	beq.n	800f668 <lv_tick_elaps+0x8>
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
}
 800f670:	1a20      	subs	r0, r4, r0
 800f672:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f676:	4770      	bx	lr
 800f678:	2000f47c 	.word	0x2000f47c

0800f67c <anim_task>:
/**
 * Periodically handle the animations.
 * @param param unused
 */
static void anim_task(void * param)
{
 800f67c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)param;

    lv_anim_t * a;
    LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
 800f680:	4844      	ldr	r0, [pc, #272]	; (800f794 <anim_task+0x118>)
 800f682:	f000 fc89 	bl	800ff98 <lv_ll_get_head>
 800f686:	b170      	cbz	r0, 800f6a6 <anim_task+0x2a>
 800f688:	4603      	mov	r3, r0
 800f68a:	4c42      	ldr	r4, [pc, #264]	; (800f794 <anim_task+0x118>)
        a->has_run = 0;
 800f68c:	f893 2020 	ldrb.w	r2, [r3, #32]
    LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
 800f690:	4619      	mov	r1, r3
 800f692:	4620      	mov	r0, r4
        a->has_run = 0;
 800f694:	f36f 02c3 	bfc	r2, #3, #1
 800f698:	f883 2020 	strb.w	r2, [r3, #32]
    LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
 800f69c:	f000 fc84 	bl	800ffa8 <lv_ll_get_next>
 800f6a0:	4603      	mov	r3, r0
 800f6a2:	2800      	cmp	r0, #0
 800f6a4:	d1f2      	bne.n	800f68c <anim_task+0x10>
    }

    uint32_t elaps = lv_tick_elaps(last_task_run);
 800f6a6:	4d3c      	ldr	r5, [pc, #240]	; (800f798 <anim_task+0x11c>)
 800f6a8:	6828      	ldr	r0, [r5, #0]
 800f6aa:	f7ff ffd9 	bl	800f660 <lv_tick_elaps>
 800f6ae:	4680      	mov	r8, r0
    a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800f6b0:	4838      	ldr	r0, [pc, #224]	; (800f794 <anim_task+0x118>)
 800f6b2:	f000 fc71 	bl	800ff98 <lv_ll_get_head>

    while(a != NULL) {
 800f6b6:	4604      	mov	r4, r0
 800f6b8:	b358      	cbz	r0, 800f712 <anim_task+0x96>
        /*It can be set by `lv_anim_del()` typically in `end_cb`. If set then an animation delete happened in `anim_ready_handler`
         * which could make this linked list reading corrupt because the list is changed meanwhile
         */
        anim_list_changed = false;
 800f6ba:	2700      	movs	r7, #0
        }

        /* If the linked list changed due to anim. delete then it's not safe to continue
         * the reading of the list from here -> start from the head*/
        if(anim_list_changed) a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
        else a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800f6bc:	4e35      	ldr	r6, [pc, #212]	; (800f794 <anim_task+0x118>)
            (a->repeat == 0 && a->playback == 1 && a->playback_now == 1)) {
        void (*cb)(void *) = a->end_cb;
        void * p = a->var;
        lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
        lv_mem_free(a);
        anim_list_changed = true;
 800f6be:	f04f 0901 	mov.w	r9, #1
        if(!a->has_run) {
 800f6c2:	f894 2020 	ldrb.w	r2, [r4, #32]
        anim_list_changed = false;
 800f6c6:	712f      	strb	r7, [r5, #4]
        if(!a->has_run) {
 800f6c8:	0710      	lsls	r0, r2, #28
 800f6ca:	d427      	bmi.n	800f71c <anim_task+0xa0>
            a->act_time += elaps;
 800f6cc:	8b63      	ldrh	r3, [r4, #26]
            a->has_run = 1;         /*The list readying might be reseted so need to know which anim has run already*/
 800f6ce:	f042 0208 	orr.w	r2, r2, #8
            a->act_time += elaps;
 800f6d2:	4443      	add	r3, r8
            a->has_run = 1;         /*The list readying might be reseted so need to know which anim has run already*/
 800f6d4:	f884 2020 	strb.w	r2, [r4, #32]
            a->act_time += elaps;
 800f6d8:	b21b      	sxth	r3, r3
            if(a->act_time >= 0) {
 800f6da:	2b00      	cmp	r3, #0
            a->act_time += elaps;
 800f6dc:	8363      	strh	r3, [r4, #26]
            if(a->act_time >= 0) {
 800f6de:	db1d      	blt.n	800f71c <anim_task+0xa0>
                if(a->act_time > a->time) a->act_time = a->time;
 800f6e0:	8b22      	ldrh	r2, [r4, #24]
                new_value = a->path(a);
 800f6e2:	4620      	mov	r0, r4
                if(a->act_time > a->time) a->act_time = a->time;
 800f6e4:	4293      	cmp	r3, r2
                new_value = a->path(a);
 800f6e6:	68e3      	ldr	r3, [r4, #12]
                if(a->act_time > a->time) a->act_time = a->time;
 800f6e8:	bfc8      	it	gt
 800f6ea:	8362      	strhgt	r2, [r4, #26]
                new_value = a->path(a);
 800f6ec:	4798      	blx	r3
                if(a->fp != NULL) a->fp(a->var, new_value); /*Apply the calculated value*/
 800f6ee:	6863      	ldr	r3, [r4, #4]
 800f6f0:	b113      	cbz	r3, 800f6f8 <anim_task+0x7c>
 800f6f2:	4601      	mov	r1, r0
 800f6f4:	6820      	ldr	r0, [r4, #0]
 800f6f6:	4798      	blx	r3
                if(a->act_time >= a->time) {
 800f6f8:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
 800f6fc:	8b23      	ldrh	r3, [r4, #24]
 800f6fe:	429a      	cmp	r2, r3
 800f700:	da14      	bge.n	800f72c <anim_task+0xb0>
        if(anim_list_changed) a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800f702:	792b      	ldrb	r3, [r5, #4]
 800f704:	b153      	cbz	r3, 800f71c <anim_task+0xa0>
 800f706:	4630      	mov	r0, r6
 800f708:	f000 fc46 	bl	800ff98 <lv_ll_get_head>
 800f70c:	4604      	mov	r4, r0
    while(a != NULL) {
 800f70e:	2c00      	cmp	r4, #0
 800f710:	d1d7      	bne.n	800f6c2 <anim_task+0x46>
    last_task_run = lv_tick_get();
 800f712:	f7ff ff9b 	bl	800f64c <lv_tick_get>
 800f716:	6028      	str	r0, [r5, #0]
}
 800f718:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800f71c:	4621      	mov	r1, r4
 800f71e:	4630      	mov	r0, r6
 800f720:	f000 fc42 	bl	800ffa8 <lv_ll_get_next>
 800f724:	4604      	mov	r4, r0
    while(a != NULL) {
 800f726:	2c00      	cmp	r4, #0
 800f728:	d1cb      	bne.n	800f6c2 <anim_task+0x46>
 800f72a:	e7f2      	b.n	800f712 <anim_task+0x96>
    if((a->repeat == 0 && a->playback == 0) ||
 800f72c:	f894 3020 	ldrb.w	r3, [r4, #32]
 800f730:	0799      	lsls	r1, r3, #30
 800f732:	d01c      	beq.n	800f76e <anim_task+0xf2>
 800f734:	f003 0207 	and.w	r2, r3, #7
 800f738:	2a05      	cmp	r2, #5
 800f73a:	d018      	beq.n	800f76e <anim_task+0xf2>
         * if yes then the caller function has to know this*/
        if(cb != NULL) cb(p);
    }
    /*If the animation is not deleted then restart it*/
    else {
        a->act_time = - a->repeat_pause;    /*Restart the animation*/
 800f73c:	8be2      	ldrh	r2, [r4, #30]
 800f73e:	4252      	negs	r2, r2
 800f740:	8362      	strh	r2, [r4, #26]
        /*Swap the start and end values in play back mode*/
        if(a->playback != 0) {
 800f742:	07da      	lsls	r2, r3, #31
 800f744:	d5dd      	bpl.n	800f702 <anim_task+0x86>
            /*If now turning back use the 'playback_pause*/
            if(a->playback_now == 0) a->act_time = - a->playback_pause;
 800f746:	f013 0304 	ands.w	r3, r3, #4
 800f74a:	d102      	bne.n	800f752 <anim_task+0xd6>
 800f74c:	8ba2      	ldrh	r2, [r4, #28]
 800f74e:	4252      	negs	r2, r2
 800f750:	8362      	strh	r2, [r4, #26]

            /*Toggle the play back state*/
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 800f752:	fab3 f383 	clz	r3, r3
 800f756:	f894 2020 	ldrb.w	r2, [r4, #32]
            /*Swap the start and end values*/
            int32_t tmp;
            tmp = a->start;
 800f75a:	6921      	ldr	r1, [r4, #16]
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 800f75c:	095b      	lsrs	r3, r3, #5
            a->start = a->end;
 800f75e:	6960      	ldr	r0, [r4, #20]
            a->end = tmp;
 800f760:	6161      	str	r1, [r4, #20]
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 800f762:	f363 0282 	bfi	r2, r3, #2, #1
            a->start = a->end;
 800f766:	6120      	str	r0, [r4, #16]
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 800f768:	f884 2020 	strb.w	r2, [r4, #32]
 800f76c:	e7c9      	b.n	800f702 <anim_task+0x86>
        lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
 800f76e:	4621      	mov	r1, r4
 800f770:	4630      	mov	r0, r6
        void (*cb)(void *) = a->end_cb;
 800f772:	f8d4 a008 	ldr.w	sl, [r4, #8]
        void * p = a->var;
 800f776:	f8d4 b000 	ldr.w	fp, [r4]
        lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
 800f77a:	f000 fba1 	bl	800fec0 <lv_ll_rem>
        lv_mem_free(a);
 800f77e:	4620      	mov	r0, r4
 800f780:	f000 fc82 	bl	8010088 <lv_mem_free>
        anim_list_changed = true;
 800f784:	f885 9004 	strb.w	r9, [r5, #4]
        if(cb != NULL) cb(p);
 800f788:	f1ba 0f00 	cmp.w	sl, #0
 800f78c:	d0bb      	beq.n	800f706 <anim_task+0x8a>
 800f78e:	4658      	mov	r0, fp
 800f790:	47d0      	blx	sl
 800f792:	e7b6      	b.n	800f702 <anim_task+0x86>
 800f794:	20018024 	.word	0x20018024
 800f798:	2000f484 	.word	0x2000f484

0800f79c <lv_anim_init>:
{
 800f79c:	b510      	push	{r4, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 800f79e:	2124      	movs	r1, #36	; 0x24
 800f7a0:	4807      	ldr	r0, [pc, #28]	; (800f7c0 <lv_anim_init+0x24>)
 800f7a2:	f000 fb15 	bl	800fdd0 <lv_ll_init>
    last_task_run = lv_tick_get();
 800f7a6:	f7ff ff51 	bl	800f64c <lv_tick_get>
 800f7aa:	4906      	ldr	r1, [pc, #24]	; (800f7c4 <lv_anim_init+0x28>)
    lv_task_create(anim_task, LV_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	2203      	movs	r2, #3
    last_task_run = lv_tick_get();
 800f7b0:	6008      	str	r0, [r1, #0]
    lv_task_create(anim_task, LV_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 800f7b2:	2132      	movs	r1, #50	; 0x32
 800f7b4:	4804      	ldr	r0, [pc, #16]	; (800f7c8 <lv_anim_init+0x2c>)
}
 800f7b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_task_create(anim_task, LV_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 800f7ba:	f000 bd85 	b.w	80102c8 <lv_task_create>
 800f7be:	bf00      	nop
 800f7c0:	20018024 	.word	0x20018024
 800f7c4:	2000f484 	.word	0x2000f484
 800f7c8:	0800f67d 	.word	0x0800f67d

0800f7cc <lv_anim_del>:
{
 800f7cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7d0:	4607      	mov	r7, r0
    a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800f7d2:	4819      	ldr	r0, [pc, #100]	; (800f838 <lv_anim_del+0x6c>)
{
 800f7d4:	4688      	mov	r8, r1
    a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800f7d6:	f000 fbdf 	bl	800ff98 <lv_ll_get_head>
    while(a != NULL) {
 800f7da:	4604      	mov	r4, r0
 800f7dc:	b350      	cbz	r0, 800f834 <lv_anim_del+0x68>
 800f7de:	f04f 0900 	mov.w	r9, #0
        a_next = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800f7e2:	4e15      	ldr	r6, [pc, #84]	; (800f838 <lv_anim_del+0x6c>)
            anim_list_changed = true;       /*Read by `anim_task`. It need to know if a delete occurred in the linked list*/
 800f7e4:	f8df b054 	ldr.w	fp, [pc, #84]	; 800f83c <lv_anim_del+0x70>
 800f7e8:	f04f 0a01 	mov.w	sl, #1
 800f7ec:	e001      	b.n	800f7f2 <lv_anim_del+0x26>
    while(a != NULL) {
 800f7ee:	462c      	mov	r4, r5
 800f7f0:	b1ed      	cbz	r5, 800f82e <lv_anim_del+0x62>
        a_next = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800f7f2:	4621      	mov	r1, r4
 800f7f4:	4630      	mov	r0, r6
 800f7f6:	f000 fbd7 	bl	800ffa8 <lv_ll_get_next>
        if(a->var == var && (a->fp == fp || fp == NULL)) {
 800f7fa:	6823      	ldr	r3, [r4, #0]
        a_next = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800f7fc:	4605      	mov	r5, r0
        if(a->var == var && (a->fp == fp || fp == NULL)) {
 800f7fe:	42bb      	cmp	r3, r7
 800f800:	d1f5      	bne.n	800f7ee <lv_anim_del+0x22>
 800f802:	6863      	ldr	r3, [r4, #4]
 800f804:	f1b8 0f00 	cmp.w	r8, #0
 800f808:	bf18      	it	ne
 800f80a:	4543      	cmpne	r3, r8
 800f80c:	bf0c      	ite	eq
 800f80e:	2301      	moveq	r3, #1
 800f810:	2300      	movne	r3, #0
 800f812:	d1ec      	bne.n	800f7ee <lv_anim_del+0x22>
            lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
 800f814:	4621      	mov	r1, r4
 800f816:	4630      	mov	r0, r6
            del = true;
 800f818:	4699      	mov	r9, r3
            lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
 800f81a:	f000 fb51 	bl	800fec0 <lv_ll_rem>
            lv_mem_free(a);
 800f81e:	4620      	mov	r0, r4
    while(a != NULL) {
 800f820:	462c      	mov	r4, r5
            lv_mem_free(a);
 800f822:	f000 fc31 	bl	8010088 <lv_mem_free>
            anim_list_changed = true;       /*Read by `anim_task`. It need to know if a delete occurred in the linked list*/
 800f826:	f88b a004 	strb.w	sl, [fp, #4]
    while(a != NULL) {
 800f82a:	2d00      	cmp	r5, #0
 800f82c:	d1e1      	bne.n	800f7f2 <lv_anim_del+0x26>
}
 800f82e:	4648      	mov	r0, r9
 800f830:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bool del = false;
 800f834:	4681      	mov	r9, r0
 800f836:	e7fa      	b.n	800f82e <lv_anim_del+0x62>
 800f838:	20018024 	.word	0x20018024
 800f83c:	2000f484 	.word	0x2000f484

0800f840 <lv_anim_create>:
    if(anim_p->fp != NULL) lv_anim_del(anim_p->var, anim_p->fp);       /*fp == NULL would delete all animations of var*/
 800f840:	6841      	ldr	r1, [r0, #4]
{
 800f842:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f844:	4604      	mov	r4, r0
    if(anim_p->fp != NULL) lv_anim_del(anim_p->var, anim_p->fp);       /*fp == NULL would delete all animations of var*/
 800f846:	b111      	cbz	r1, 800f84e <lv_anim_create+0xe>
 800f848:	6800      	ldr	r0, [r0, #0]
 800f84a:	f7ff ffbf 	bl	800f7cc <lv_anim_del>
    lv_anim_t * new_anim = lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
 800f84e:	4816      	ldr	r0, [pc, #88]	; (800f8a8 <lv_anim_create+0x68>)
 800f850:	f000 fac8 	bl	800fde4 <lv_ll_ins_head>
    lv_mem_assert(new_anim);
 800f854:	b338      	cbz	r0, 800f8a6 <lv_anim_create+0x66>
    anim_p->playback_now = 0;
 800f856:	f894 1020 	ldrb.w	r1, [r4, #32]
    memcpy(new_anim, anim_p, sizeof(lv_anim_t));
 800f85a:	4623      	mov	r3, r4
 800f85c:	4602      	mov	r2, r0
 800f85e:	f104 0520 	add.w	r5, r4, #32
    anim_p->playback_now = 0;
 800f862:	f36f 0182 	bfc	r1, #2, #1
 800f866:	f884 1020 	strb.w	r1, [r4, #32]
    memcpy(new_anim, anim_p, sizeof(lv_anim_t));
 800f86a:	681f      	ldr	r7, [r3, #0]
 800f86c:	3310      	adds	r3, #16
 800f86e:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 800f872:	3210      	adds	r2, #16
 800f874:	f853 4c08 	ldr.w	r4, [r3, #-8]
 800f878:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800f87c:	42ab      	cmp	r3, r5
 800f87e:	f842 7c10 	str.w	r7, [r2, #-16]
 800f882:	f842 6c0c 	str.w	r6, [r2, #-12]
 800f886:	f842 4c08 	str.w	r4, [r2, #-8]
 800f88a:	f842 1c04 	str.w	r1, [r2, #-4]
 800f88e:	d1ec      	bne.n	800f86a <lv_anim_create+0x2a>
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	6013      	str	r3, [r2, #0]
    if(new_anim->fp != NULL) new_anim->fp(new_anim->var, new_anim->start);
 800f894:	6843      	ldr	r3, [r0, #4]
 800f896:	b113      	cbz	r3, 800f89e <lv_anim_create+0x5e>
 800f898:	6901      	ldr	r1, [r0, #16]
 800f89a:	6800      	ldr	r0, [r0, #0]
 800f89c:	4798      	blx	r3
    anim_list_changed = true;
 800f89e:	4b03      	ldr	r3, [pc, #12]	; (800f8ac <lv_anim_create+0x6c>)
 800f8a0:	2201      	movs	r2, #1
 800f8a2:	711a      	strb	r2, [r3, #4]
 800f8a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8a6:	e7fe      	b.n	800f8a6 <lv_anim_create+0x66>
 800f8a8:	20018024 	.word	0x20018024
 800f8ac:	2000f484 	.word	0x2000f484

0800f8b0 <lv_anim_speed_to_time>:
    int32_t d = LV_MATH_ABS((int32_t) start - end);
 800f8b0:	1a8a      	subs	r2, r1, r2
    uint32_t time = (int32_t)((int32_t)(d * 1000) / speed);
 800f8b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    int32_t d = LV_MATH_ABS((int32_t) start - end);
 800f8b6:	2a00      	cmp	r2, #0
 800f8b8:	bfb8      	it	lt
 800f8ba:	4252      	neglt	r2, r2
    uint32_t time = (int32_t)((int32_t)(d * 1000) / speed);
 800f8bc:	fb03 f202 	mul.w	r2, r3, r2
 800f8c0:	fb92 f0f0 	sdiv	r0, r2, r0
    if(time > UINT16_MAX) time = UINT16_MAX;
 800f8c4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800f8c8:	da02      	bge.n	800f8d0 <lv_anim_speed_to_time+0x20>
    if(time == 0) {
 800f8ca:	b920      	cbnz	r0, 800f8d6 <lv_anim_speed_to_time+0x26>
 800f8cc:	2001      	movs	r0, #1
}
 800f8ce:	4770      	bx	lr
 800f8d0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800f8d4:	4770      	bx	lr
 800f8d6:	b280      	uxth	r0, r0
 800f8d8:	4770      	bx	lr
 800f8da:	bf00      	nop

0800f8dc <lv_anim_path_linear>:
    if(a->time == a->act_time) step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
 800f8dc:	8b02      	ldrh	r2, [r0, #24]
 800f8de:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 800f8e2:	429a      	cmp	r2, r3
 800f8e4:	d00b      	beq.n	800f8fe <lv_anim_path_linear+0x22>
    else step = (a->act_time * LV_ANIM_RESOLUTION) / a->time;
 800f8e6:	029b      	lsls	r3, r3, #10
 800f8e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800f8ec:	b29b      	uxth	r3, r3
    new_value = (int32_t) step * (a->end - a->start);
 800f8ee:	6901      	ldr	r1, [r0, #16]
 800f8f0:	6942      	ldr	r2, [r0, #20]
 800f8f2:	1a52      	subs	r2, r2, r1
 800f8f4:	fb03 f302 	mul.w	r3, r3, r2
}
 800f8f8:	eb01 20a3 	add.w	r0, r1, r3, asr #10
 800f8fc:	4770      	bx	lr
 800f8fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f902:	e7f4      	b.n	800f8ee <lv_anim_path_linear+0x12>

0800f904 <lv_anim_path_step>:
{
 800f904:	b410      	push	{r4}
    else return a->start;
 800f906:	6903      	ldr	r3, [r0, #16]
    if(a->act_time >= a->time) return a->end;
 800f908:	f9b0 401a 	ldrsh.w	r4, [r0, #26]
 800f90c:	6942      	ldr	r2, [r0, #20]
 800f90e:	8b00      	ldrh	r0, [r0, #24]
}
 800f910:	4284      	cmp	r4, r0
 800f912:	bfac      	ite	ge
 800f914:	4610      	movge	r0, r2
 800f916:	4618      	movlt	r0, r3
 800f918:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f91c:	4770      	bx	lr
 800f91e:	bf00      	nop

0800f920 <lv_area_set>:
 * @param y1 top coordinate of the area
 * @param x2 right coordinate of the area
 * @param y2 bottom coordinate of the area
 */
void lv_area_set(lv_area_t * area_p, lv_coord_t x1, lv_coord_t y1, lv_coord_t x2, lv_coord_t y2)
{
 800f920:	b410      	push	{r4}
 800f922:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
    area_p->x1 = x1;
 800f926:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
    area_p->x2 = x2;
    area_p->y2 = y2;
 800f928:	80c4      	strh	r4, [r0, #6]
    area_p->y1 = y1;
 800f92a:	8042      	strh	r2, [r0, #2]
    area_p->x2 = x2;
 800f92c:	8083      	strh	r3, [r0, #4]
}
 800f92e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f932:	4770      	bx	lr

0800f934 <lv_area_set_width>:
 * @param area_p pointer to an area
 * @param w the new width of the area (w == 1 makes x1 == x2)
 */
void lv_area_set_width(lv_area_t * area_p, lv_coord_t w)
{
    area_p->x2 = area_p->x1 + w - 1;
 800f934:	3901      	subs	r1, #1
 800f936:	8803      	ldrh	r3, [r0, #0]
 800f938:	4419      	add	r1, r3
 800f93a:	8081      	strh	r1, [r0, #4]
 800f93c:	4770      	bx	lr
 800f93e:	bf00      	nop

0800f940 <lv_area_set_height>:
 * @param area_p pointer to an area
 * @param h the new height of the area (h == 1 makes y1 == y2)
 */
void lv_area_set_height(lv_area_t * area_p, lv_coord_t h)
{
    area_p->y2 = area_p->y1 + h - 1;
 800f940:	3901      	subs	r1, #1
 800f942:	8843      	ldrh	r3, [r0, #2]
 800f944:	4419      	add	r1, r3
 800f946:	80c1      	strh	r1, [r0, #6]
 800f948:	4770      	bx	lr
 800f94a:	bf00      	nop

0800f94c <lv_area_set_pos>:
 * @param area_p pointer to an area
 * @param x the new x coordinate of the area
 * @param y the new y coordinate of the area
 */
void lv_area_set_pos(lv_area_t * area_p, lv_coord_t x, lv_coord_t y)
{
 800f94c:	b470      	push	{r4, r5, r6}
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 800f94e:	88c3      	ldrh	r3, [r0, #6]
    return area_p->x2 - area_p->x1 + 1;
 800f950:	8884      	ldrh	r4, [r0, #4]
 800f952:	8806      	ldrh	r6, [r0, #0]
    area_p->y2 = area_p->y1 + h - 1;
 800f954:	4413      	add	r3, r2
    return area_p->y2 - area_p->y1 + 1;
 800f956:	8845      	ldrh	r5, [r0, #2]
    area_p->x2 = area_p->x1 + w - 1;
 800f958:	440c      	add	r4, r1
    lv_coord_t w = lv_area_get_width(area_p);
    lv_coord_t h = lv_area_get_height(area_p);
    area_p->x1 = x;
 800f95a:	8001      	strh	r1, [r0, #0]
    area_p->x2 = area_p->x1 + w - 1;
 800f95c:	1ba4      	subs	r4, r4, r6
    area_p->y2 = area_p->y1 + h - 1;
 800f95e:	1b5b      	subs	r3, r3, r5
    area_p->y1 = y;
 800f960:	8042      	strh	r2, [r0, #2]
    area_p->x2 = area_p->x1 + w - 1;
 800f962:	8084      	strh	r4, [r0, #4]
    area_p->y2 = area_p->y1 + h - 1;
 800f964:	80c3      	strh	r3, [r0, #6]
    lv_area_set_width(area_p, w);
    lv_area_set_height(area_p, h);
}
 800f966:	bc70      	pop	{r4, r5, r6}
 800f968:	4770      	bx	lr
 800f96a:	bf00      	nop

0800f96c <lv_area_get_size>:
uint32_t lv_area_get_size(const lv_area_t * area_p)
{
    uint32_t size;

    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) *
           (area_p->y2 - area_p->y1 + 1);
 800f96c:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800f970:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) *
 800f974:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
           (area_p->y2 - area_p->y1 + 1);
 800f978:	1a5b      	subs	r3, r3, r1
    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) *
 800f97a:	f9b0 1000 	ldrsh.w	r1, [r0]
           (area_p->y2 - area_p->y1 + 1);
 800f97e:	1c58      	adds	r0, r3, #1
    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) *
 800f980:	1a52      	subs	r2, r2, r1

    return size;
}
 800f982:	fb02 0000 	mla	r0, r2, r0, r0
 800f986:	4770      	bx	lr

0800f988 <lv_area_intersect>:
 * @return false: the two area has NO common parts, res_p is invalid
 */
bool lv_area_intersect(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    /* Get the smaller area from 'a1_p' and 'a2_p' */
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 800f988:	f9b2 3000 	ldrsh.w	r3, [r2]
{
 800f98c:	b4f0      	push	{r4, r5, r6, r7}
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 800f98e:	f9b1 5000 	ldrsh.w	r5, [r1]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800f992:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 800f996:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 800f99a:	42ab      	cmp	r3, r5
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800f99c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 800f9a0:	bfb8      	it	lt
 800f9a2:	462b      	movlt	r3, r5
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800f9a4:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800f9a8:	42b4      	cmp	r4, r6
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 800f9aa:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800f9ae:	bfb8      	it	lt
 800f9b0:	4634      	movlt	r4, r6
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 800f9b2:	f9b1 6006 	ldrsh.w	r6, [r1, #6]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800f9b6:	42bd      	cmp	r5, r7
 800f9b8:	4629      	mov	r1, r5
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 800f9ba:	8003      	strh	r3, [r0, #0]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800f9bc:	bfa8      	it	ge
 800f9be:	4639      	movge	r1, r7
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 800f9c0:	42b2      	cmp	r2, r6
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800f9c2:	8044      	strh	r4, [r0, #2]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 800f9c4:	bfa8      	it	ge
 800f9c6:	4632      	movge	r2, r6
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800f9c8:	8081      	strh	r1, [r0, #4]

    /*If x1 or y1 greater then x2 or y2 then the areas union is empty*/
    bool union_ok = true;
    if((res_p->x1 > res_p->x2) ||
 800f9ca:	4294      	cmp	r4, r2
 800f9cc:	bfd8      	it	le
 800f9ce:	428b      	cmple	r3, r1
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 800f9d0:	80c2      	strh	r2, [r0, #6]
    if((res_p->x1 > res_p->x2) ||
 800f9d2:	bfcc      	ite	gt
 800f9d4:	2301      	movgt	r3, #1
 800f9d6:	2300      	movle	r3, #0
            (res_p->y1 > res_p->y2)) {
        union_ok = false;
    }

    return union_ok;
}
 800f9d8:	bcf0      	pop	{r4, r5, r6, r7}
 800f9da:	f083 0001 	eor.w	r0, r3, #1
 800f9de:	4770      	bx	lr

0800f9e0 <lv_area_join>:
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 */
void lv_area_join(lv_area_t * a_res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 800f9e0:	f9b1 3000 	ldrsh.w	r3, [r1]
{
 800f9e4:	b4f0      	push	{r4, r5, r6, r7}
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 800f9e6:	f9b2 6000 	ldrsh.w	r6, [r2]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 800f9ea:	f9b2 5002 	ldrsh.w	r5, [r2, #2]
 800f9ee:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 800f9f2:	429e      	cmp	r6, r3
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 800f9f4:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 800f9f8:	bfa8      	it	ge
 800f9fa:	461e      	movge	r6, r3
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
 800f9fc:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 800fa00:	42bd      	cmp	r5, r7
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 800fa02:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
 800fa06:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 800fa0a:	bfa8      	it	ge
 800fa0c:	463d      	movge	r5, r7
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 800fa0e:	42a2      	cmp	r2, r4
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 800fa10:	8006      	strh	r6, [r0, #0]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 800fa12:	bfb8      	it	lt
 800fa14:	4622      	movlt	r2, r4
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
 800fa16:	428b      	cmp	r3, r1
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 800fa18:	8045      	strh	r5, [r0, #2]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
 800fa1a:	bfb8      	it	lt
 800fa1c:	460b      	movlt	r3, r1
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 800fa1e:	8082      	strh	r2, [r0, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
 800fa20:	80c3      	strh	r3, [r0, #6]
}
 800fa22:	bcf0      	pop	{r4, r5, r6, r7}
 800fa24:	4770      	bx	lr
 800fa26:	bf00      	nop

0800fa28 <lv_area_is_point_on>:
 */
bool lv_area_is_point_on(const lv_area_t * a_p, const lv_point_t * p_p)
{
    bool is_on = false;

    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) &&
 800fa28:	f9b0 2000 	ldrsh.w	r2, [r0]
 800fa2c:	f9b1 3000 	ldrsh.w	r3, [r1]
 800fa30:	429a      	cmp	r2, r3
 800fa32:	dc10      	bgt.n	800fa56 <lv_area_is_point_on+0x2e>
 800fa34:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800fa38:	429a      	cmp	r2, r3
 800fa3a:	db0c      	blt.n	800fa56 <lv_area_is_point_on+0x2e>
            ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 800fa3c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) &&
 800fa40:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800fa44:	429a      	cmp	r2, r3
 800fa46:	dc06      	bgt.n	800fa56 <lv_area_is_point_on+0x2e>
            ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 800fa48:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800fa4c:	4298      	cmp	r0, r3
 800fa4e:	bfb4      	ite	lt
 800fa50:	2000      	movlt	r0, #0
 800fa52:	2001      	movge	r0, #1
 800fa54:	4770      	bx	lr
    bool is_on = false;
 800fa56:	2000      	movs	r0, #0
        is_on = true;
    }

    return is_on;
}
 800fa58:	4770      	bx	lr
 800fa5a:	bf00      	nop

0800fa5c <lv_area_is_on>:
 * @param a2_p pointer to an other area
 * @return false: a1_p and a2_p has no common parts
 */
bool lv_area_is_on(const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    if((a1_p->x1 <= a2_p->x2) &&
 800fa5c:	f9b0 2000 	ldrsh.w	r2, [r0]
 800fa60:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800fa64:	429a      	cmp	r2, r3
 800fa66:	dc14      	bgt.n	800fa92 <lv_area_is_on+0x36>
 800fa68:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800fa6c:	f9b1 3000 	ldrsh.w	r3, [r1]
 800fa70:	429a      	cmp	r2, r3
 800fa72:	db0e      	blt.n	800fa92 <lv_area_is_on+0x36>
            (a1_p->x2 >= a2_p->x1) &&
 800fa74:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800fa78:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800fa7c:	429a      	cmp	r2, r3
 800fa7e:	dc08      	bgt.n	800fa92 <lv_area_is_on+0x36>
            (a1_p->y1 <= a2_p->y2) &&
 800fa80:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800fa84:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800fa88:	4298      	cmp	r0, r3
 800fa8a:	bfb4      	ite	lt
 800fa8c:	2000      	movlt	r0, #0
 800fa8e:	2001      	movge	r0, #1
 800fa90:	4770      	bx	lr
            (a1_p->y2 >= a2_p->y1)) {
        return true;
    } else {
        return false;
 800fa92:	2000      	movs	r0, #0
    }

}
 800fa94:	4770      	bx	lr
 800fa96:	bf00      	nop

0800fa98 <lv_area_is_in>:
 */
bool lv_area_is_in(const lv_area_t * ain_p, const lv_area_t * aholder_p)
{
    bool is_in = false;

    if(ain_p->x1  >= aholder_p->x1 &&
 800fa98:	f9b0 2000 	ldrsh.w	r2, [r0]
 800fa9c:	f9b1 3000 	ldrsh.w	r3, [r1]
 800faa0:	429a      	cmp	r2, r3
 800faa2:	db14      	blt.n	800face <lv_area_is_in+0x36>
 800faa4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800faa8:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800faac:	429a      	cmp	r2, r3
 800faae:	db0e      	blt.n	800face <lv_area_is_in+0x36>
            ain_p->y1  >= aholder_p->y1 &&
 800fab0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800fab4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800fab8:	429a      	cmp	r2, r3
 800faba:	dc08      	bgt.n	800face <lv_area_is_in+0x36>
            ain_p->x2  <= aholder_p->x2 &&
 800fabc:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800fac0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800fac4:	4298      	cmp	r0, r3
 800fac6:	bfcc      	ite	gt
 800fac8:	2000      	movgt	r0, #0
 800faca:	2001      	movle	r0, #1
 800facc:	4770      	bx	lr
    bool is_in = false;
 800face:	2000      	movs	r0, #0
            ain_p->y2  <= aholder_p->y2) {
        is_in = true;
    }

    return is_in;
}
 800fad0:	4770      	bx	lr
 800fad2:	bf00      	nop

0800fad4 <lv_circ_init>:
 * @param c pointer to a point. The coordinates will be calculated here
 * @param tmp point to a variable. It will store temporary data
 * @param radius radius of the circle
 */
void lv_circ_init(lv_point_t * c, lv_coord_t * tmp, lv_coord_t radius)
{
 800fad4:	b410      	push	{r4}
    c->x = radius;
    c->y = 0;
    *tmp = 1 - radius;
 800fad6:	f1c2 0301 	rsb	r3, r2, #1
    c->y = 0;
 800fada:	2400      	movs	r4, #0
    c->x = radius;
 800fadc:	8002      	strh	r2, [r0, #0]
    c->y = 0;
 800fade:	8044      	strh	r4, [r0, #2]
    *tmp = 1 - radius;
 800fae0:	800b      	strh	r3, [r1, #0]
}
 800fae2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fae6:	4770      	bx	lr

0800fae8 <lv_circ_cont>:
 * @param c same as in circ_init
 * @return true if the circle is not ready yet
 */
bool lv_circ_cont(lv_point_t * c)
{
    return c->y <= c->x ? true : false;
 800fae8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800faec:	f9b0 0000 	ldrsh.w	r0, [r0]
}
 800faf0:	4282      	cmp	r2, r0
 800faf2:	bfcc      	ite	gt
 800faf4:	2000      	movgt	r0, #0
 800faf6:	2001      	movle	r0, #1
 800faf8:	4770      	bx	lr
 800fafa:	bf00      	nop

0800fafc <lv_circ_next>:
 * @param c same as in circ_init. The next point stored here.
 * @param tmp same as in circ_init.
 */
void lv_circ_next(lv_point_t * c, lv_coord_t * tmp)
{
    c->y++;
 800fafc:	8843      	ldrh	r3, [r0, #2]
 800fafe:	3301      	adds	r3, #1
 800fb00:	b29b      	uxth	r3, r3
 800fb02:	b21a      	sxth	r2, r3
{
 800fb04:	b410      	push	{r4}
    c->y++;
 800fb06:	8042      	strh	r2, [r0, #2]

    if(*tmp <= 0) {
 800fb08:	f9b1 4000 	ldrsh.w	r4, [r1]
 800fb0c:	2c00      	cmp	r4, #0
 800fb0e:	dd0c      	ble.n	800fb2a <lv_circ_next+0x2e>
        (*tmp) += 2 * c->y + 1;   // Change in decision criterion for y -> y+1
    } else {
        c->x--;
 800fb10:	8803      	ldrh	r3, [r0, #0]
        (*tmp) += 2 * (c->y - c->x) + 1;   // Change for y -> y+1, x -> x-1
    }
}
 800fb12:	f85d 4b04 	ldr.w	r4, [sp], #4
        c->x--;
 800fb16:	3b01      	subs	r3, #1
 800fb18:	b21b      	sxth	r3, r3
 800fb1a:	8003      	strh	r3, [r0, #0]
        (*tmp) += 2 * (c->y - c->x) + 1;   // Change for y -> y+1, x -> x-1
 800fb1c:	1ad2      	subs	r2, r2, r3
 800fb1e:	880b      	ldrh	r3, [r1, #0]
 800fb20:	3301      	adds	r3, #1
 800fb22:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800fb26:	800b      	strh	r3, [r1, #0]
}
 800fb28:	4770      	bx	lr
        (*tmp) += 2 * c->y + 1;   // Change in decision criterion for y -> y+1
 800fb2a:	3401      	adds	r4, #1
 800fb2c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
}
 800fb30:	f85d 4b04 	ldr.w	r4, [sp], #4
        (*tmp) += 2 * c->y + 1;   // Change in decision criterion for y -> y+1
 800fb34:	800b      	strh	r3, [r1, #0]
}
 800fb36:	4770      	bx	lr

0800fb38 <lv_font_init>:
/**
 * Initialize the fonts
 */
void lv_font_init(void)
{
    lv_font_builtin_init();
 800fb38:	f7ff bcb4 	b.w	800f4a4 <lv_font_builtin_init>

0800fb3c <lv_font_add>:
 * @param child the font to add
 * @param parent this font will be extended. Using it later will contain the characters from `child`
 */
void lv_font_add(lv_font_t * child, lv_font_t * parent)
{
    if(parent == NULL) return;
 800fb3c:	b909      	cbnz	r1, 800fb42 <lv_font_add+0x6>
 800fb3e:	e005      	b.n	800fb4c <lv_font_add+0x10>
 800fb40:	4619      	mov	r1, r3

    while(parent->next_page != NULL) {
 800fb42:	69cb      	ldr	r3, [r1, #28]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d1fb      	bne.n	800fb40 <lv_font_add+0x4>
        parent = parent->next_page; /*Got to the last page and add the new font there*/
    }

    parent->next_page = child;
 800fb48:	61c8      	str	r0, [r1, #28]
 800fb4a:	4770      	bx	lr
 800fb4c:	4770      	bx	lr
 800fb4e:	bf00      	nop

0800fb50 <lv_font_is_monospace>:
 */
bool lv_font_is_monospace(const lv_font_t * font_p, uint32_t letter)
{
    const lv_font_t * font_i = font_p;
    int16_t w;
    while(font_i != NULL) {
 800fb50:	b1a0      	cbz	r0, 800fb7c <lv_font_is_monospace+0x2c>
{
 800fb52:	b538      	push	{r3, r4, r5, lr}
 800fb54:	460d      	mov	r5, r1
 800fb56:	4604      	mov	r4, r0
 800fb58:	e001      	b.n	800fb5e <lv_font_is_monospace+0xe>
            /*Glyph found*/
            if(font_i->monospace) return true;
            return false;
        }

        font_i = font_i->next_page;
 800fb5a:	69e4      	ldr	r4, [r4, #28]
    while(font_i != NULL) {
 800fb5c:	b164      	cbz	r4, 800fb78 <lv_font_is_monospace+0x28>
        w = font_i->get_width(font_i, letter);
 800fb5e:	69a3      	ldr	r3, [r4, #24]
 800fb60:	4629      	mov	r1, r5
 800fb62:	4620      	mov	r0, r4
 800fb64:	4798      	blx	r3
        if(w >= 0) {
 800fb66:	2800      	cmp	r0, #0
 800fb68:	dbf7      	blt.n	800fb5a <lv_font_is_monospace+0xa>
            if(font_i->monospace) return true;
 800fb6a:	6a23      	ldr	r3, [r4, #32]
 800fb6c:	f413 2f7f 	tst.w	r3, #1044480	; 0xff000
 800fb70:	bf14      	ite	ne
 800fb72:	2001      	movne	r0, #1
 800fb74:	2000      	moveq	r0, #0
 800fb76:	bd38      	pop	{r3, r4, r5, pc}
    }

    return 0;
 800fb78:	2000      	movs	r0, #0
 800fb7a:	bd38      	pop	{r3, r4, r5, pc}
 800fb7c:	2000      	movs	r0, #0
}
 800fb7e:	4770      	bx	lr

0800fb80 <lv_font_get_bitmap>:
 * @return  pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_bitmap(const lv_font_t * font_p, uint32_t letter)
{
    const lv_font_t * font_i = font_p;
    while(font_i != NULL) {
 800fb80:	b170      	cbz	r0, 800fba0 <lv_font_get_bitmap+0x20>
{
 800fb82:	b538      	push	{r3, r4, r5, lr}
 800fb84:	460d      	mov	r5, r1
 800fb86:	4604      	mov	r4, r0
 800fb88:	e001      	b.n	800fb8e <lv_font_get_bitmap+0xe>
        const uint8_t * bitmap = font_i->get_bitmap(font_i, letter);
        if(bitmap) return bitmap;

        font_i = font_i->next_page;
 800fb8a:	69e4      	ldr	r4, [r4, #28]
    while(font_i != NULL) {
 800fb8c:	b134      	cbz	r4, 800fb9c <lv_font_get_bitmap+0x1c>
        const uint8_t * bitmap = font_i->get_bitmap(font_i, letter);
 800fb8e:	6963      	ldr	r3, [r4, #20]
 800fb90:	4629      	mov	r1, r5
 800fb92:	4620      	mov	r0, r4
 800fb94:	4798      	blx	r3
        if(bitmap) return bitmap;
 800fb96:	2800      	cmp	r0, #0
 800fb98:	d0f7      	beq.n	800fb8a <lv_font_get_bitmap+0xa>
    }

    return NULL;
}
 800fb9a:	bd38      	pop	{r3, r4, r5, pc}
    return NULL;
 800fb9c:	2000      	movs	r0, #0
 800fb9e:	bd38      	pop	{r3, r4, r5, pc}
 800fba0:	2000      	movs	r0, #0
}
 800fba2:	4770      	bx	lr

0800fba4 <lv_font_get_width>:
 */
uint8_t lv_font_get_width(const lv_font_t * font_p, uint32_t letter)
{
    const lv_font_t * font_i = font_p;
    int16_t w;
    while(font_i != NULL) {
 800fba4:	b1a0      	cbz	r0, 800fbd0 <lv_font_get_width+0x2c>
{
 800fba6:	b538      	push	{r3, r4, r5, lr}
 800fba8:	460d      	mov	r5, r1
 800fbaa:	4604      	mov	r4, r0
 800fbac:	e001      	b.n	800fbb2 <lv_font_get_width+0xe>
            uint8_t m = font_i->monospace;
            if(m) w = m;
            return w;
        }

        font_i = font_i->next_page;
 800fbae:	69e4      	ldr	r4, [r4, #28]
    while(font_i != NULL) {
 800fbb0:	b164      	cbz	r4, 800fbcc <lv_font_get_width+0x28>
        w = font_i->get_width(font_i, letter);
 800fbb2:	69a3      	ldr	r3, [r4, #24]
 800fbb4:	4629      	mov	r1, r5
 800fbb6:	4620      	mov	r0, r4
 800fbb8:	4798      	blx	r3
        if(w >= 0) {
 800fbba:	2800      	cmp	r0, #0
 800fbbc:	dbf7      	blt.n	800fbae <lv_font_get_width+0xa>
            uint8_t m = font_i->monospace;
 800fbbe:	6a23      	ldr	r3, [r4, #32]
 800fbc0:	f3c3 3307 	ubfx	r3, r3, #12, #8
            if(m) w = m;
 800fbc4:	b103      	cbz	r3, 800fbc8 <lv_font_get_width+0x24>
 800fbc6:	b218      	sxth	r0, r3
            return w;
 800fbc8:	b2c0      	uxtb	r0, r0
 800fbca:	bd38      	pop	{r3, r4, r5, pc}
    }

    return 0;
 800fbcc:	2000      	movs	r0, #0
 800fbce:	bd38      	pop	{r3, r4, r5, pc}
 800fbd0:	2000      	movs	r0, #0

}
 800fbd2:	4770      	bx	lr

0800fbd4 <lv_font_get_real_width>:
 */
uint8_t lv_font_get_real_width(const lv_font_t * font_p, uint32_t letter)
{
    const lv_font_t * font_i = font_p;
    int16_t w;
    while(font_i != NULL) {
 800fbd4:	b178      	cbz	r0, 800fbf6 <lv_font_get_real_width+0x22>
{
 800fbd6:	b538      	push	{r3, r4, r5, lr}
 800fbd8:	460d      	mov	r5, r1
 800fbda:	4604      	mov	r4, r0
 800fbdc:	e001      	b.n	800fbe2 <lv_font_get_real_width+0xe>
        w = font_i->get_width(font_i, letter);
        if(w >= 0) return w;

        font_i = font_i->next_page;
 800fbde:	69e4      	ldr	r4, [r4, #28]
    while(font_i != NULL) {
 800fbe0:	b13c      	cbz	r4, 800fbf2 <lv_font_get_real_width+0x1e>
        w = font_i->get_width(font_i, letter);
 800fbe2:	69a3      	ldr	r3, [r4, #24]
 800fbe4:	4629      	mov	r1, r5
 800fbe6:	4620      	mov	r0, r4
 800fbe8:	4798      	blx	r3
        if(w >= 0) return w;
 800fbea:	2800      	cmp	r0, #0
 800fbec:	dbf7      	blt.n	800fbde <lv_font_get_real_width+0xa>
 800fbee:	b2c0      	uxtb	r0, r0
 800fbf0:	bd38      	pop	{r3, r4, r5, pc}
    }

    return 0;
 800fbf2:	2000      	movs	r0, #0
 800fbf4:	bd38      	pop	{r3, r4, r5, pc}
 800fbf6:	2000      	movs	r0, #0
}
 800fbf8:	4770      	bx	lr
 800fbfa:	bf00      	nop

0800fbfc <lv_font_get_bpp>:
 * @return bpp of the font (or font extension)
 */
uint8_t lv_font_get_bpp(const lv_font_t * font, uint32_t letter)
{
    const lv_font_t * font_i = font;
    while(font_i != NULL) {
 800fbfc:	b140      	cbz	r0, 800fc10 <lv_font_get_bpp+0x14>
        if(letter >= font_i->unicode_first && letter <= font_i->unicode_last) {
 800fbfe:	6803      	ldr	r3, [r0, #0]
 800fc00:	428b      	cmp	r3, r1
 800fc02:	d802      	bhi.n	800fc0a <lv_font_get_bpp+0xe>
 800fc04:	6843      	ldr	r3, [r0, #4]
 800fc06:	4299      	cmp	r1, r3
 800fc08:	d903      	bls.n	800fc12 <lv_font_get_bpp+0x16>
            return font_i->bpp;
        }
        font_i = font_i->next_page;
 800fc0a:	69c0      	ldr	r0, [r0, #28]
    while(font_i != NULL) {
 800fc0c:	2800      	cmp	r0, #0
 800fc0e:	d1f6      	bne.n	800fbfe <lv_font_get_bpp+0x2>
    }

    return 0;

}
 800fc10:	4770      	bx	lr
            return font_i->bpp;
 800fc12:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
 800fc16:	f000 000f 	and.w	r0, r0, #15
 800fc1a:	4770      	bx	lr

0800fc1c <lv_font_get_bitmap_continuous>:
 * @return pointer to the bitmap or NULL if not found
 */
const uint8_t * lv_font_get_bitmap_continuous(const lv_font_t * font, uint32_t unicode_letter)
{
    /*Check the range*/
    if(unicode_letter < font->unicode_first || unicode_letter > font->unicode_last) return NULL;
 800fc1c:	6803      	ldr	r3, [r0, #0]
 800fc1e:	428b      	cmp	r3, r1
 800fc20:	d80a      	bhi.n	800fc38 <lv_font_get_bitmap_continuous+0x1c>
 800fc22:	6842      	ldr	r2, [r0, #4]
 800fc24:	4291      	cmp	r1, r2
 800fc26:	d807      	bhi.n	800fc38 <lv_font_get_bitmap_continuous+0x1c>

    uint32_t index = (unicode_letter - font->unicode_first);
 800fc28:	1ac9      	subs	r1, r1, r3
    return &font->glyph_bitmap[font->glyph_dsc[index].glyph_index];
 800fc2a:	68c3      	ldr	r3, [r0, #12]
 800fc2c:	6880      	ldr	r0, [r0, #8]
 800fc2e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fc32:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 800fc36:	4770      	bx	lr
    if(unicode_letter < font->unicode_first || unicode_letter > font->unicode_last) return NULL;
 800fc38:	2000      	movs	r0, #0
}
 800fc3a:	4770      	bx	lr

0800fc3c <lv_font_get_width_continuous>:
 * @return width of the gylph or -1 if not found
 */
int16_t lv_font_get_width_continuous(const lv_font_t * font, uint32_t unicode_letter)
{
    /*Check the range*/
    if(unicode_letter < font->unicode_first || unicode_letter > font->unicode_last) {
 800fc3c:	6803      	ldr	r3, [r0, #0]
 800fc3e:	428b      	cmp	r3, r1
 800fc40:	d807      	bhi.n	800fc52 <lv_font_get_width_continuous+0x16>
 800fc42:	6842      	ldr	r2, [r0, #4]
 800fc44:	4291      	cmp	r1, r2
 800fc46:	d804      	bhi.n	800fc52 <lv_font_get_width_continuous+0x16>
        return -1;
    }

    uint32_t index = (unicode_letter - font->unicode_first);
 800fc48:	1ac9      	subs	r1, r1, r3
    return font->glyph_dsc[index].w_px;
 800fc4a:	68c3      	ldr	r3, [r0, #12]
 800fc4c:	f813 0021 	ldrb.w	r0, [r3, r1, lsl #2]
 800fc50:	4770      	bx	lr
        return -1;
 800fc52:	f04f 30ff 	mov.w	r0, #4294967295
}
 800fc56:	4770      	bx	lr

0800fc58 <lv_fs_get_drv>:
 * Give a pointer to a driver from its letter
 * @param letter the driver letter
 * @return pointer to a driver or NULL if not found
 */
static lv_fs_drv_t * lv_fs_get_drv(char letter)
{
 800fc58:	b538      	push	{r3, r4, r5, lr}
 800fc5a:	4604      	mov	r4, r0
    lv_fs_drv_t * drv;

    LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
 800fc5c:	480a      	ldr	r0, [pc, #40]	; (800fc88 <lv_fs_get_drv+0x30>)
 800fc5e:	f000 f99b 	bl	800ff98 <lv_ll_get_head>
 800fc62:	b168      	cbz	r0, 800fc80 <lv_fs_get_drv+0x28>
        if(drv->letter == letter) {
 800fc64:	7803      	ldrb	r3, [r0, #0]
 800fc66:	42a3      	cmp	r3, r4
 800fc68:	d00d      	beq.n	800fc86 <lv_fs_get_drv+0x2e>
    LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
 800fc6a:	4d07      	ldr	r5, [pc, #28]	; (800fc88 <lv_fs_get_drv+0x30>)
 800fc6c:	e002      	b.n	800fc74 <lv_fs_get_drv+0x1c>
        if(drv->letter == letter) {
 800fc6e:	7803      	ldrb	r3, [r0, #0]
 800fc70:	42a3      	cmp	r3, r4
 800fc72:	d007      	beq.n	800fc84 <lv_fs_get_drv+0x2c>
    LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
 800fc74:	4601      	mov	r1, r0
 800fc76:	4628      	mov	r0, r5
 800fc78:	f000 f996 	bl	800ffa8 <lv_ll_get_next>
 800fc7c:	2800      	cmp	r0, #0
 800fc7e:	d1f6      	bne.n	800fc6e <lv_fs_get_drv+0x16>
            return drv;
        }
    }

    return NULL;
 800fc80:	2000      	movs	r0, #0
 800fc82:	bd38      	pop	{r3, r4, r5, pc}
 800fc84:	bd38      	pop	{r3, r4, r5, pc}
 800fc86:	bd38      	pop	{r3, r4, r5, pc}
 800fc88:	20018000 	.word	0x20018000

0800fc8c <lv_fs_init>:
    lv_ll_init(&LV_GC_ROOT(_lv_drv_ll), sizeof(lv_fs_drv_t));
 800fc8c:	2144      	movs	r1, #68	; 0x44
 800fc8e:	4801      	ldr	r0, [pc, #4]	; (800fc94 <lv_fs_init+0x8>)
 800fc90:	f000 b89e 	b.w	800fdd0 <lv_ll_init>
 800fc94:	20018000 	.word	0x20018000

0800fc98 <lv_fs_open>:
{
 800fc98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    file_p->drv = NULL;
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	6043      	str	r3, [r0, #4]
    file_p->file_d = NULL;
 800fc9e:	6003      	str	r3, [r0, #0]
    if(path == NULL) return LV_FS_RES_INV_PARAM;
 800fca0:	b369      	cbz	r1, 800fcfe <lv_fs_open+0x66>
 800fca2:	4605      	mov	r5, r0
    file_p->drv = lv_fs_get_drv(letter);
 800fca4:	7808      	ldrb	r0, [r1, #0]
 800fca6:	460c      	mov	r4, r1
 800fca8:	4616      	mov	r6, r2
 800fcaa:	f7ff ffd5 	bl	800fc58 <lv_fs_get_drv>
 800fcae:	6068      	str	r0, [r5, #4]
    if(file_p->drv == NULL) {
 800fcb0:	b348      	cbz	r0, 800fd06 <lv_fs_open+0x6e>
    if(file_p->drv->ready != NULL) {
 800fcb2:	6883      	ldr	r3, [r0, #8]
 800fcb4:	b113      	cbz	r3, 800fcbc <lv_fs_open+0x24>
        if(file_p->drv->ready() == false) {
 800fcb6:	4798      	blx	r3
 800fcb8:	b360      	cbz	r0, 800fd14 <lv_fs_open+0x7c>
 800fcba:	6868      	ldr	r0, [r5, #4]
    file_p->file_d = lv_mem_alloc(file_p->drv->file_size);
 800fcbc:	8840      	ldrh	r0, [r0, #2]
 800fcbe:	f000 f9db 	bl	8010078 <lv_mem_alloc>
 800fcc2:	6028      	str	r0, [r5, #0]
    lv_mem_assert(file_p->file_d);
 800fcc4:	b1f0      	cbz	r0, 800fd04 <lv_fs_open+0x6c>
    if(file_p->drv->open == NULL) {
 800fcc6:	686b      	ldr	r3, [r5, #4]
 800fcc8:	68df      	ldr	r7, [r3, #12]
 800fcca:	b307      	cbz	r7, 800fd0e <lv_fs_open+0x76>
    while(*path != '\0') {
 800fccc:	7863      	ldrb	r3, [r4, #1]
    path ++; /*Ignore the driver letter*/
 800fcce:	1c61      	adds	r1, r4, #1
    while(*path != '\0') {
 800fcd0:	b91b      	cbnz	r3, 800fcda <lv_fs_open+0x42>
 800fcd2:	e008      	b.n	800fce6 <lv_fs_open+0x4e>
 800fcd4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fcd8:	b12b      	cbz	r3, 800fce6 <lv_fs_open+0x4e>
        if(*path == ':' || *path == '\\' || *path == '/') {
 800fcda:	2b5c      	cmp	r3, #92	; 0x5c
 800fcdc:	bf18      	it	ne
 800fcde:	2b3a      	cmpne	r3, #58	; 0x3a
 800fce0:	d0f8      	beq.n	800fcd4 <lv_fs_open+0x3c>
 800fce2:	2b2f      	cmp	r3, #47	; 0x2f
 800fce4:	d0f6      	beq.n	800fcd4 <lv_fs_open+0x3c>
    lv_fs_res_t res = file_p->drv->open(file_p->file_d, real_path, mode);
 800fce6:	4632      	mov	r2, r6
 800fce8:	47b8      	blx	r7
    if(res != LV_FS_RES_OK) {
 800fcea:	4604      	mov	r4, r0
 800fcec:	b140      	cbz	r0, 800fd00 <lv_fs_open+0x68>
        lv_mem_free(file_p->file_d);
 800fcee:	6828      	ldr	r0, [r5, #0]
 800fcf0:	f000 f9ca 	bl	8010088 <lv_mem_free>
        file_p->file_d = NULL;
 800fcf4:	2300      	movs	r3, #0
}
 800fcf6:	4620      	mov	r0, r4
        file_p->file_d = NULL;
 800fcf8:	602b      	str	r3, [r5, #0]
        file_p->drv = NULL;
 800fcfa:	606b      	str	r3, [r5, #4]
}
 800fcfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(path == NULL) return LV_FS_RES_INV_PARAM;
 800fcfe:	240b      	movs	r4, #11
}
 800fd00:	4620      	mov	r0, r4
 800fd02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd04:	e7fe      	b.n	800fd04 <lv_fs_open+0x6c>
        return LV_FS_RES_NOT_EX;
 800fd06:	2403      	movs	r4, #3
        file_p->file_d = NULL;
 800fd08:	6028      	str	r0, [r5, #0]
}
 800fd0a:	4620      	mov	r0, r4
 800fd0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LV_FS_RES_NOT_IMP;
 800fd0e:	2409      	movs	r4, #9
}
 800fd10:	4620      	mov	r0, r4
 800fd12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return LV_FS_RES_HW_ERR;
 800fd14:	2401      	movs	r4, #1
            file_p->drv = NULL;
 800fd16:	6068      	str	r0, [r5, #4]
            file_p->file_d = NULL;
 800fd18:	6028      	str	r0, [r5, #0]
}
 800fd1a:	4620      	mov	r0, r4
 800fd1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd1e:	bf00      	nop

0800fd20 <lv_fs_close>:
{
 800fd20:	b538      	push	{r3, r4, r5, lr}
    if(file_p->drv == NULL) {
 800fd22:	6843      	ldr	r3, [r0, #4]
 800fd24:	b183      	cbz	r3, 800fd48 <lv_fs_close+0x28>
    if(file_p->drv->close == NULL) {
 800fd26:	691b      	ldr	r3, [r3, #16]
 800fd28:	b15b      	cbz	r3, 800fd42 <lv_fs_close+0x22>
 800fd2a:	4604      	mov	r4, r0
    lv_fs_res_t res = file_p->drv->close(file_p->file_d);
 800fd2c:	6800      	ldr	r0, [r0, #0]
 800fd2e:	4798      	blx	r3
 800fd30:	4605      	mov	r5, r0
    lv_mem_free(file_p->file_d);   /*Clean up*/
 800fd32:	6820      	ldr	r0, [r4, #0]
 800fd34:	f000 f9a8 	bl	8010088 <lv_mem_free>
    file_p->file_d = NULL;
 800fd38:	2300      	movs	r3, #0
}
 800fd3a:	4628      	mov	r0, r5
    file_p->file_d = NULL;
 800fd3c:	6023      	str	r3, [r4, #0]
    file_p->drv = NULL;
 800fd3e:	6063      	str	r3, [r4, #4]
}
 800fd40:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_NOT_IMP;
 800fd42:	2509      	movs	r5, #9
}
 800fd44:	4628      	mov	r0, r5
 800fd46:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
 800fd48:	250b      	movs	r5, #11
}
 800fd4a:	4628      	mov	r0, r5
 800fd4c:	bd38      	pop	{r3, r4, r5, pc}
 800fd4e:	bf00      	nop

0800fd50 <lv_fs_read>:
{
 800fd50:	b570      	push	{r4, r5, r6, lr}
 800fd52:	b082      	sub	sp, #8
    if(br != NULL) *br = 0;
 800fd54:	b10b      	cbz	r3, 800fd5a <lv_fs_read+0xa>
 800fd56:	2400      	movs	r4, #0
 800fd58:	601c      	str	r4, [r3, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 800fd5a:	6844      	ldr	r4, [r0, #4]
 800fd5c:	b184      	cbz	r4, 800fd80 <lv_fs_read+0x30>
    if(file_p->drv->read == NULL) return LV_FS_RES_NOT_IMP;
 800fd5e:	69a5      	ldr	r5, [r4, #24]
 800fd60:	b15d      	cbz	r5, 800fd7a <lv_fs_read+0x2a>
 800fd62:	461c      	mov	r4, r3
    uint32_t br_tmp = 0;
 800fd64:	2600      	movs	r6, #0
 800fd66:	ab02      	add	r3, sp, #8
    lv_fs_res_t res = file_p->drv->read(file_p->file_d, buf, btr, &br_tmp);
 800fd68:	6800      	ldr	r0, [r0, #0]
    uint32_t br_tmp = 0;
 800fd6a:	f843 6d04 	str.w	r6, [r3, #-4]!
    lv_fs_res_t res = file_p->drv->read(file_p->file_d, buf, btr, &br_tmp);
 800fd6e:	47a8      	blx	r5
    if(br != NULL) *br = br_tmp;
 800fd70:	b10c      	cbz	r4, 800fd76 <lv_fs_read+0x26>
 800fd72:	9b01      	ldr	r3, [sp, #4]
 800fd74:	6023      	str	r3, [r4, #0]
}
 800fd76:	b002      	add	sp, #8
 800fd78:	bd70      	pop	{r4, r5, r6, pc}
    if(file_p->drv->read == NULL) return LV_FS_RES_NOT_IMP;
 800fd7a:	2009      	movs	r0, #9
}
 800fd7c:	b002      	add	sp, #8
 800fd7e:	bd70      	pop	{r4, r5, r6, pc}
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 800fd80:	200b      	movs	r0, #11
}
 800fd82:	b002      	add	sp, #8
 800fd84:	bd70      	pop	{r4, r5, r6, pc}
 800fd86:	bf00      	nop

0800fd88 <lv_fs_seek>:
    if(file_p->drv == NULL) {
 800fd88:	6843      	ldr	r3, [r0, #4]
 800fd8a:	b12b      	cbz	r3, 800fd98 <lv_fs_seek+0x10>
    if(file_p->drv->seek == NULL) {
 800fd8c:	6a1b      	ldr	r3, [r3, #32]
 800fd8e:	b10b      	cbz	r3, 800fd94 <lv_fs_seek+0xc>
    lv_fs_res_t res = file_p->drv->seek(file_p->file_d, pos);
 800fd90:	6800      	ldr	r0, [r0, #0]
 800fd92:	4718      	bx	r3
        return LV_FS_RES_NOT_IMP;
 800fd94:	2009      	movs	r0, #9
}
 800fd96:	4770      	bx	lr
        return LV_FS_RES_INV_PARAM;
 800fd98:	200b      	movs	r0, #11
 800fd9a:	4770      	bx	lr

0800fd9c <lv_fs_add_drv>:
{
 800fd9c:	b510      	push	{r4, lr}
 800fd9e:	4604      	mov	r4, r0
    new_drv =  lv_ll_ins_head(&LV_GC_ROOT(_lv_drv_ll));
 800fda0:	4805      	ldr	r0, [pc, #20]	; (800fdb8 <lv_fs_add_drv+0x1c>)
 800fda2:	f000 f81f 	bl	800fde4 <lv_ll_ins_head>
    lv_mem_assert(new_drv);
 800fda6:	b128      	cbz	r0, 800fdb4 <lv_fs_add_drv+0x18>
    memcpy(new_drv, drv_p, sizeof(lv_fs_drv_t));
 800fda8:	4621      	mov	r1, r4
 800fdaa:	2244      	movs	r2, #68	; 0x44
}
 800fdac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memcpy(new_drv, drv_p, sizeof(lv_fs_drv_t));
 800fdb0:	f009 bc86 	b.w	80196c0 <memcpy>
 800fdb4:	e7fe      	b.n	800fdb4 <lv_fs_add_drv+0x18>
 800fdb6:	bf00      	nop
 800fdb8:	20018000 	.word	0x20018000

0800fdbc <node_set_next.isra.0.part.1>:
{
    if(act == NULL) return;     /*Can't set the next node of `NULL`*/

    uint32_t node_p_size = sizeof(lv_ll_node_t *);
    if(next) memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
    else memset(act + LL_NEXT_P_OFFSET(ll_p), 0, node_p_size);
 800fdbc:	6803      	ldr	r3, [r0, #0]
 800fdbe:	2200      	movs	r2, #0
 800fdc0:	3304      	adds	r3, #4
 800fdc2:	50ca      	str	r2, [r1, r3]
 800fdc4:	4770      	bx	lr
 800fdc6:	bf00      	nop

0800fdc8 <node_set_prev.isra.2.part.3>:
    else memset(act + LL_PREV_P_OFFSET(ll_p), 0, node_p_size);
 800fdc8:	6803      	ldr	r3, [r0, #0]
 800fdca:	2200      	movs	r2, #0
 800fdcc:	50ca      	str	r2, [r1, r3]
 800fdce:	4770      	bx	lr

0800fdd0 <lv_ll_init>:
    ll_p->head = NULL;
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	6043      	str	r3, [r0, #4]
    ll_p->tail = NULL;
 800fdd4:	6083      	str	r3, [r0, #8]
    if(node_size & 0x3) {
 800fdd6:	078b      	lsls	r3, r1, #30
 800fdd8:	d002      	beq.n	800fde0 <lv_ll_init+0x10>
        node_size = node_size & (~0x3);
 800fdda:	f021 0103 	bic.w	r1, r1, #3
        node_size += 4;
 800fdde:	3104      	adds	r1, #4
    ll_p->n_size = node_size;
 800fde0:	6001      	str	r1, [r0, #0]
 800fde2:	4770      	bx	lr

0800fde4 <lv_ll_ins_head>:
{
 800fde4:	b538      	push	{r3, r4, r5, lr}
 800fde6:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800fde8:	6800      	ldr	r0, [r0, #0]
 800fdea:	3008      	adds	r0, #8
 800fdec:	f000 f944 	bl	8010078 <lv_mem_alloc>
    if(n_new != NULL) {
 800fdf0:	4605      	mov	r5, r0
 800fdf2:	b178      	cbz	r0, 800fe14 <lv_ll_ins_head+0x30>
 800fdf4:	4601      	mov	r1, r0
 800fdf6:	4620      	mov	r0, r4
 800fdf8:	f7ff ffe6 	bl	800fdc8 <node_set_prev.isra.2.part.3>
        node_set_next(ll_p, n_new, ll_p->head);     /*After new comes the old head*/
 800fdfc:	6862      	ldr	r2, [r4, #4]
    if(next) memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
 800fdfe:	b172      	cbz	r2, 800fe1e <lv_ll_ins_head+0x3a>
 800fe00:	6823      	ldr	r3, [r4, #0]
 800fe02:	442b      	add	r3, r5
 800fe04:	605a      	str	r2, [r3, #4]
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 800fe06:	6863      	ldr	r3, [r4, #4]
 800fe08:	b10b      	cbz	r3, 800fe0e <lv_ll_ins_head+0x2a>
    if(prev) memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
 800fe0a:	6822      	ldr	r2, [r4, #0]
 800fe0c:	509d      	str	r5, [r3, r2]
        if(ll_p->tail == NULL) {/*If there is no tail (1. node) set the tail too*/
 800fe0e:	68a3      	ldr	r3, [r4, #8]
        ll_p->head = n_new;         /*Set the new head in the dsc.*/
 800fe10:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) {/*If there is no tail (1. node) set the tail too*/
 800fe12:	b10b      	cbz	r3, 800fe18 <lv_ll_ins_head+0x34>
}
 800fe14:	4628      	mov	r0, r5
 800fe16:	bd38      	pop	{r3, r4, r5, pc}
            ll_p->tail = n_new;
 800fe18:	60a5      	str	r5, [r4, #8]
}
 800fe1a:	4628      	mov	r0, r5
 800fe1c:	bd38      	pop	{r3, r4, r5, pc}
 800fe1e:	4629      	mov	r1, r5
 800fe20:	4620      	mov	r0, r4
 800fe22:	f7ff ffcb 	bl	800fdbc <node_set_next.isra.0.part.1>
 800fe26:	e7ee      	b.n	800fe06 <lv_ll_ins_head+0x22>

0800fe28 <lv_ll_ins_prev>:
    if(NULL == ll_p || NULL == n_act) return NULL;
 800fe28:	b328      	cbz	r0, 800fe76 <lv_ll_ins_prev+0x4e>
 800fe2a:	b321      	cbz	r1, 800fe76 <lv_ll_ins_prev+0x4e>
    if(lv_ll_get_head(ll_p) == n_act) {
 800fe2c:	6843      	ldr	r3, [r0, #4]
 800fe2e:	4299      	cmp	r1, r3
{
 800fe30:	b570      	push	{r4, r5, r6, lr}
 800fe32:	4604      	mov	r4, r0
    if(lv_ll_get_head(ll_p) == n_act) {
 800fe34:	d014      	beq.n	800fe60 <lv_ll_ins_prev+0x38>
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800fe36:	6800      	ldr	r0, [r0, #0]
 800fe38:	460e      	mov	r6, r1
 800fe3a:	3008      	adds	r0, #8
 800fe3c:	f000 f91c 	bl	8010078 <lv_mem_alloc>
        if(n_new == NULL) return NULL;
 800fe40:	4605      	mov	r5, r0
 800fe42:	b1b0      	cbz	r0, 800fe72 <lv_ll_ins_prev+0x4a>
        memcpy(&prev, n_act_d + LL_PREV_P_OFFSET(ll_p), sizeof(void *));
 800fe44:	6823      	ldr	r3, [r4, #0]
 800fe46:	58f2      	ldr	r2, [r6, r3]
    if(act == NULL) return;     /*Can't set the next node of `NULL`*/
 800fe48:	b172      	cbz	r2, 800fe68 <lv_ll_ins_prev+0x40>
    if(next) memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
 800fe4a:	4413      	add	r3, r2
 800fe4c:	6058      	str	r0, [r3, #4]
    if(prev) memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
 800fe4e:	6823      	ldr	r3, [r4, #0]
 800fe50:	50c2      	str	r2, [r0, r3]
 800fe52:	6823      	ldr	r3, [r4, #0]
    if(next) memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
 800fe54:	4628      	mov	r0, r5
    if(prev) memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
 800fe56:	50f5      	str	r5, [r6, r3]
    if(next) memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
 800fe58:	6823      	ldr	r3, [r4, #0]
 800fe5a:	441d      	add	r5, r3
 800fe5c:	606e      	str	r6, [r5, #4]
 800fe5e:	bd70      	pop	{r4, r5, r6, pc}
}
 800fe60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        n_new = lv_ll_ins_head(ll_p);
 800fe64:	f7ff bfbe 	b.w	800fde4 <lv_ll_ins_head>
 800fe68:	4601      	mov	r1, r0
 800fe6a:	4620      	mov	r0, r4
 800fe6c:	f7ff ffac 	bl	800fdc8 <node_set_prev.isra.2.part.3>
 800fe70:	e7ef      	b.n	800fe52 <lv_ll_ins_prev+0x2a>
    if(NULL == ll_p || NULL == n_act) return NULL;
 800fe72:	2000      	movs	r0, #0
 800fe74:	bd70      	pop	{r4, r5, r6, pc}
 800fe76:	2000      	movs	r0, #0
}
 800fe78:	4770      	bx	lr
 800fe7a:	bf00      	nop

0800fe7c <lv_ll_ins_tail>:
{
 800fe7c:	b538      	push	{r3, r4, r5, lr}
 800fe7e:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800fe80:	6800      	ldr	r0, [r0, #0]
 800fe82:	3008      	adds	r0, #8
 800fe84:	f000 f8f8 	bl	8010078 <lv_mem_alloc>
    if(n_new == NULL) return NULL;
 800fe88:	4605      	mov	r5, r0
 800fe8a:	b178      	cbz	r0, 800feac <lv_ll_ins_tail+0x30>
 800fe8c:	4601      	mov	r1, r0
 800fe8e:	4620      	mov	r0, r4
 800fe90:	f7ff ff94 	bl	800fdbc <node_set_next.isra.0.part.1>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is tho old tail*/
 800fe94:	68a3      	ldr	r3, [r4, #8]
    if(prev) memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
 800fe96:	b173      	cbz	r3, 800feb6 <lv_ll_ins_tail+0x3a>
 800fe98:	6822      	ldr	r2, [r4, #0]
 800fe9a:	50ab      	str	r3, [r5, r2]
        if(ll_p->tail != NULL) {    /*If there is old tail then the new comes after it*/
 800fe9c:	68a3      	ldr	r3, [r4, #8]
 800fe9e:	b113      	cbz	r3, 800fea6 <lv_ll_ins_tail+0x2a>
    if(next) memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
 800fea0:	6822      	ldr	r2, [r4, #0]
 800fea2:	4413      	add	r3, r2
 800fea4:	605d      	str	r5, [r3, #4]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 800fea6:	6863      	ldr	r3, [r4, #4]
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 800fea8:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 800feaa:	b10b      	cbz	r3, 800feb0 <lv_ll_ins_tail+0x34>
}
 800feac:	4628      	mov	r0, r5
 800feae:	bd38      	pop	{r3, r4, r5, pc}
            ll_p->head = n_new;
 800feb0:	6065      	str	r5, [r4, #4]
}
 800feb2:	4628      	mov	r0, r5
 800feb4:	bd38      	pop	{r3, r4, r5, pc}
 800feb6:	4629      	mov	r1, r5
 800feb8:	4620      	mov	r0, r4
 800feba:	f7ff ff85 	bl	800fdc8 <node_set_prev.isra.2.part.3>
 800febe:	e7ed      	b.n	800fe9c <lv_ll_ins_tail+0x20>

0800fec0 <lv_ll_rem>:
    if(ll_p != NULL)    {
 800fec0:	b190      	cbz	r0, 800fee8 <lv_ll_rem+0x28>
    if(lv_ll_get_head(ll_p) == node_p) {
 800fec2:	6842      	ldr	r2, [r0, #4]
 800fec4:	4291      	cmp	r1, r2
 800fec6:	d013      	beq.n	800fef0 <lv_ll_rem+0x30>
    } else if(lv_ll_get_tail(ll_p) == node_p) {
 800fec8:	6882      	ldr	r2, [r0, #8]
 800feca:	4291      	cmp	r1, r2
 800fecc:	d017      	beq.n	800fefe <lv_ll_rem+0x3e>
        memcpy(&prev, n_act_d + LL_PREV_P_OFFSET(ll_p), sizeof(void *));
 800fece:	6802      	ldr	r2, [r0, #0]
{
 800fed0:	b410      	push	{r4}
        memcpy(&next, n_act_d + LL_NEXT_P_OFFSET(ll_p), sizeof(void *));
 800fed2:	1d14      	adds	r4, r2, #4
        memcpy(&prev, n_act_d + LL_PREV_P_OFFSET(ll_p), sizeof(void *));
 800fed4:	588a      	ldr	r2, [r1, r2]
        memcpy(&next, n_act_d + LL_NEXT_P_OFFSET(ll_p), sizeof(void *));
 800fed6:	5909      	ldr	r1, [r1, r4]
    if(act == NULL) return;     /*Can't set the next node of `NULL`*/
 800fed8:	b1fa      	cbz	r2, 800ff1a <lv_ll_rem+0x5a>
    if(next) memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
 800feda:	b1c1      	cbz	r1, 800ff0e <lv_ll_rem+0x4e>
 800fedc:	5111      	str	r1, [r2, r4]
    if(prev) memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
 800fede:	6803      	ldr	r3, [r0, #0]
 800fee0:	50ca      	str	r2, [r1, r3]
}
 800fee2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fee6:	4770      	bx	lr
    if(lv_ll_get_head(ll_p) == node_p) {
 800fee8:	2900      	cmp	r1, #0
 800feea:	d1fc      	bne.n	800fee6 <lv_ll_rem+0x26>
        ll_p->head = lv_ll_get_next(ll_p, node_p);
 800feec:	6049      	str	r1, [r1, #4]
 800feee:	deff      	udf	#255	; 0xff
        memcpy(&next, n_act_d + LL_NEXT_P_OFFSET(ll_p), sizeof(void *));
 800fef0:	6802      	ldr	r2, [r0, #0]
 800fef2:	4411      	add	r1, r2
 800fef4:	6849      	ldr	r1, [r1, #4]
        ll_p->head = lv_ll_get_next(ll_p, node_p);
 800fef6:	6041      	str	r1, [r0, #4]
        if(ll_p->head == NULL) {
 800fef8:	b139      	cbz	r1, 800ff0a <lv_ll_rem+0x4a>
 800fefa:	f7ff bf65 	b.w	800fdc8 <node_set_prev.isra.2.part.3>
        memcpy(&prev, n_act_d + LL_PREV_P_OFFSET(ll_p), sizeof(void *));
 800fefe:	6802      	ldr	r2, [r0, #0]
 800ff00:	5889      	ldr	r1, [r1, r2]
        ll_p->tail = lv_ll_get_prev(ll_p, node_p);
 800ff02:	6081      	str	r1, [r0, #8]
        if(ll_p->tail == NULL) {
 800ff04:	b139      	cbz	r1, 800ff16 <lv_ll_rem+0x56>
 800ff06:	f7ff bf59 	b.w	800fdbc <node_set_next.isra.0.part.1>
            ll_p->tail = NULL;
 800ff0a:	6081      	str	r1, [r0, #8]
 800ff0c:	4770      	bx	lr
 800ff0e:	4611      	mov	r1, r2
}
 800ff10:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff14:	e7f7      	b.n	800ff06 <lv_ll_rem+0x46>
            ll_p->head = NULL;
 800ff16:	6041      	str	r1, [r0, #4]
 800ff18:	4770      	bx	lr
    if(act == NULL) return;     /*Can't set the prev node of `NULL`*/
 800ff1a:	2900      	cmp	r1, #0
 800ff1c:	d0e1      	beq.n	800fee2 <lv_ll_rem+0x22>
}
 800ff1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff22:	e7ea      	b.n	800fefa <lv_ll_rem+0x3a>

0800ff24 <lv_ll_clear>:
    if(ll_p != NULL)    {
 800ff24:	b188      	cbz	r0, 800ff4a <lv_ll_clear+0x26>
{
 800ff26:	b570      	push	{r4, r5, r6, lr}
        head = ll_p->head;
 800ff28:	6844      	ldr	r4, [r0, #4]
 800ff2a:	4605      	mov	r5, r0
    while(i != NULL) {
 800ff2c:	b164      	cbz	r4, 800ff48 <lv_ll_clear+0x24>
        memcpy(&next, n_act_d + LL_NEXT_P_OFFSET(ll_p), sizeof(void *));
 800ff2e:	682b      	ldr	r3, [r5, #0]
        lv_ll_rem(ll_p, i);
 800ff30:	4621      	mov	r1, r4
 800ff32:	4628      	mov	r0, r5
        memcpy(&next, n_act_d + LL_NEXT_P_OFFSET(ll_p), sizeof(void *));
 800ff34:	4423      	add	r3, r4
 800ff36:	685e      	ldr	r6, [r3, #4]
        lv_ll_rem(ll_p, i);
 800ff38:	f7ff ffc2 	bl	800fec0 <lv_ll_rem>
        lv_mem_free(i);
 800ff3c:	4620      	mov	r0, r4
 800ff3e:	f000 f8a3 	bl	8010088 <lv_mem_free>
    while(i != NULL) {
 800ff42:	4634      	mov	r4, r6
 800ff44:	2e00      	cmp	r6, #0
 800ff46:	d1f2      	bne.n	800ff2e <lv_ll_clear+0xa>
 800ff48:	bd70      	pop	{r4, r5, r6, pc}
 800ff4a:	4770      	bx	lr

0800ff4c <lv_ll_chg_list>:
{
 800ff4c:	b538      	push	{r3, r4, r5, lr}
 800ff4e:	4615      	mov	r5, r2
 800ff50:	460c      	mov	r4, r1
    lv_ll_rem(ll_ori_p, node);
 800ff52:	4611      	mov	r1, r2
 800ff54:	f7ff ffb4 	bl	800fec0 <lv_ll_rem>
    if(act == NULL) return;     /*Can't set the prev node of `NULL`*/
 800ff58:	b185      	cbz	r5, 800ff7c <lv_ll_chg_list+0x30>
 800ff5a:	4629      	mov	r1, r5
 800ff5c:	4620      	mov	r0, r4
 800ff5e:	f7ff ff33 	bl	800fdc8 <node_set_prev.isra.2.part.3>
    node_set_next(ll_new_p, node, ll_new_p->head);
 800ff62:	6862      	ldr	r2, [r4, #4]
    if(next) memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
 800ff64:	b19a      	cbz	r2, 800ff8e <lv_ll_chg_list+0x42>
 800ff66:	6823      	ldr	r3, [r4, #0]
 800ff68:	442b      	add	r3, r5
 800ff6a:	605a      	str	r2, [r3, #4]
    if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
 800ff6c:	6863      	ldr	r3, [r4, #4]
 800ff6e:	b10b      	cbz	r3, 800ff74 <lv_ll_chg_list+0x28>
    if(prev) memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
 800ff70:	6822      	ldr	r2, [r4, #0]
 800ff72:	509d      	str	r5, [r3, r2]
    if(ll_new_p->tail == NULL) {     /*If there is no tail (first node) set the tail too*/
 800ff74:	68a3      	ldr	r3, [r4, #8]
    ll_new_p->head = node;        /*Set the new head in the dsc.*/
 800ff76:	6065      	str	r5, [r4, #4]
    if(ll_new_p->tail == NULL) {     /*If there is no tail (first node) set the tail too*/
 800ff78:	b13b      	cbz	r3, 800ff8a <lv_ll_chg_list+0x3e>
 800ff7a:	bd38      	pop	{r3, r4, r5, pc}
    if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
 800ff7c:	6861      	ldr	r1, [r4, #4]
 800ff7e:	2900      	cmp	r1, #0
 800ff80:	d0f8      	beq.n	800ff74 <lv_ll_chg_list+0x28>
 800ff82:	4620      	mov	r0, r4
 800ff84:	f7ff ff20 	bl	800fdc8 <node_set_prev.isra.2.part.3>
 800ff88:	e7f4      	b.n	800ff74 <lv_ll_chg_list+0x28>
        ll_new_p->tail = node;
 800ff8a:	60a5      	str	r5, [r4, #8]
}
 800ff8c:	bd38      	pop	{r3, r4, r5, pc}
 800ff8e:	4629      	mov	r1, r5
 800ff90:	4620      	mov	r0, r4
 800ff92:	f7ff ff13 	bl	800fdbc <node_set_next.isra.0.part.1>
 800ff96:	e7e9      	b.n	800ff6c <lv_ll_chg_list+0x20>

0800ff98 <lv_ll_get_head>:
    if(ll_p != NULL)    {
 800ff98:	b100      	cbz	r0, 800ff9c <lv_ll_get_head+0x4>
        head = ll_p->head;
 800ff9a:	6840      	ldr	r0, [r0, #4]
}
 800ff9c:	4770      	bx	lr
 800ff9e:	bf00      	nop

0800ffa0 <lv_ll_get_tail>:
    if(ll_p != NULL)    {
 800ffa0:	b100      	cbz	r0, 800ffa4 <lv_ll_get_tail+0x4>
        tail = ll_p->tail;
 800ffa2:	6880      	ldr	r0, [r0, #8]
}
 800ffa4:	4770      	bx	lr
 800ffa6:	bf00      	nop

0800ffa8 <lv_ll_get_next>:
    if(ll_p != NULL)    {
 800ffa8:	b110      	cbz	r0, 800ffb0 <lv_ll_get_next+0x8>
        memcpy(&next, n_act_d + LL_NEXT_P_OFFSET(ll_p), sizeof(void *));
 800ffaa:	6803      	ldr	r3, [r0, #0]
 800ffac:	4419      	add	r1, r3
 800ffae:	6848      	ldr	r0, [r1, #4]
}
 800ffb0:	4770      	bx	lr
 800ffb2:	bf00      	nop

0800ffb4 <lv_ll_get_prev>:
    if(ll_p != NULL) {
 800ffb4:	b108      	cbz	r0, 800ffba <lv_ll_get_prev+0x6>
        memcpy(&prev, n_act_d + LL_PREV_P_OFFSET(ll_p), sizeof(void *));
 800ffb6:	6803      	ldr	r3, [r0, #0]
 800ffb8:	58c8      	ldr	r0, [r1, r3]
}
 800ffba:	4770      	bx	lr

0800ffbc <lv_mem_alloc.part.0>:
/**
 * Allocate a memory dynamically
 * @param size size of the memory to allocate in bytes
 * @return pointer to the allocated memory
 */
void * lv_mem_alloc(uint32_t size)
 800ffbc:	4602      	mov	r2, r0
        size = size & (~0x7);
        size += 8;
    }
#else
    /*Round the size up to 4*/
    if(size & 0x3) {
 800ffbe:	0780      	lsls	r0, r0, #30
void * lv_mem_alloc(uint32_t size)
 800ffc0:	b410      	push	{r4}
    if(size & 0x3) {
 800ffc2:	d002      	beq.n	800ffca <lv_mem_alloc.part.0+0xe>
        size = size & (~0x3);
 800ffc4:	f022 0203 	bic.w	r2, r2, #3
        size += 4;
 800ffc8:	3204      	adds	r2, #4
        next_e = (lv_mem_ent_t *) work_mem;
    } else { /*Get the next entry */
        uint8_t * data = &act_e->first_data;
        next_e = (lv_mem_ent_t *)&data[act_e->header.d_size];

        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 800ffca:	4922      	ldr	r1, [pc, #136]	; (8010054 <lv_mem_alloc.part.0+0x98>)
    lv_mem_ent_t * e = NULL;
 800ffcc:	2300      	movs	r3, #0
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 800ffce:	6808      	ldr	r0, [r1, #0]
 800ffd0:	f500 4400 	add.w	r4, r0, #32768	; 0x8000
        uint8_t * data = &act_e->first_data;
 800ffd4:	1d19      	adds	r1, r3, #4
    if(act_e == NULL) { /*NULL means: get the first entry*/
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d038      	beq.n	801004c <lv_mem_alloc.part.0+0x90>
        next_e = (lv_mem_ent_t *)&data[act_e->header.d_size];
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	eb01 0353 	add.w	r3, r1, r3, lsr #1
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 800ffe0:	1d19      	adds	r1, r3, #4
 800ffe2:	428c      	cmp	r4, r1
 800ffe4:	d929      	bls.n	801003a <lv_mem_alloc.part.0+0x7e>
        if(e != NULL) {
 800ffe6:	b363      	cbz	r3, 8010042 <lv_mem_alloc.part.0+0x86>
static void * ent_alloc(lv_mem_ent_t * e, uint32_t size)
{
    void * alloc = NULL;

    /*If the memory is free and big enough then use it */
    if(e->header.used == 0 && e->header.d_size >= size) {
 800ffe8:	7819      	ldrb	r1, [r3, #0]
 800ffea:	07c9      	lsls	r1, r1, #31
 800ffec:	d4f2      	bmi.n	800ffd4 <lv_mem_alloc.part.0+0x18>
 800ffee:	6819      	ldr	r1, [r3, #0]
 800fff0:	f3c1 015e 	ubfx	r1, r1, #1, #31
 800fff4:	428a      	cmp	r2, r1
 800fff6:	d8ed      	bhi.n	800ffd4 <lv_mem_alloc.part.0+0x18>
        size = size & (~0x7);
        size += 8;
    }
#else
    /*Round the size up to 4*/
    if(size & 0x3) {
 800fff8:	0790      	lsls	r0, r2, #30
 800fffa:	d002      	beq.n	8010002 <lv_mem_alloc.part.0+0x46>
        size = size & (~0x3);
 800fffc:	f022 0203 	bic.w	r2, r2, #3
        size += 4;
 8010000:	3204      	adds	r2, #4
    }
#endif

    /*Don't let empty space only for a header without data*/
    if(e->header.d_size == size + sizeof(lv_mem_header_t)) {
 8010002:	1d10      	adds	r0, r2, #4
 8010004:	4281      	cmp	r1, r0
 8010006:	d01e      	beq.n	8010046 <lv_mem_alloc.part.0+0x8a>
        size = e->header.d_size;
    }

    /* Create the new entry after the current if there is space for it */
    if(e->header.d_size != size) {
 8010008:	4291      	cmp	r1, r2
        uint8_t * e_data = &e->first_data;
 801000a:	f103 0004 	add.w	r0, r3, #4
    if(e->header.d_size != size) {
 801000e:	d009      	beq.n	8010024 <lv_mem_alloc.part.0+0x68>
        lv_mem_ent_t * after_new_e = (lv_mem_ent_t *)&e_data[size];
        after_new_e->header.used = 0;
 8010010:	5c84      	ldrb	r4, [r0, r2]
        after_new_e->header.d_size = e->header.d_size - size - sizeof(lv_mem_header_t);
 8010012:	3904      	subs	r1, #4
        after_new_e->header.used = 0;
 8010014:	f36f 0400 	bfc	r4, #0, #1
        after_new_e->header.d_size = e->header.d_size - size - sizeof(lv_mem_header_t);
 8010018:	1a89      	subs	r1, r1, r2
        after_new_e->header.used = 0;
 801001a:	5484      	strb	r4, [r0, r2]
        after_new_e->header.d_size = e->header.d_size - size - sizeof(lv_mem_header_t);
 801001c:	5884      	ldr	r4, [r0, r2]
 801001e:	f361 045f 	bfi	r4, r1, #1, #31
 8010022:	5084      	str	r4, [r0, r2]
    }

    /* Set the new size for the original entry */
    e->header.d_size = size;
 8010024:	6819      	ldr	r1, [r3, #0]
 8010026:	f362 015f 	bfi	r1, r2, #1, #31
                  e->header.used = 1;
 801002a:	b2ca      	uxtb	r2, r1
    e->header.d_size = size;
 801002c:	6019      	str	r1, [r3, #0]
                  e->header.used = 1;
 801002e:	f042 0201 	orr.w	r2, r2, #1
 8010032:	701a      	strb	r2, [r3, #0]
}
 8010034:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010038:	4770      	bx	lr
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 801003a:	2000      	movs	r0, #0
}
 801003c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010040:	4770      	bx	lr
        if(e != NULL) {
 8010042:	4618      	mov	r0, r3
 8010044:	e7f6      	b.n	8010034 <lv_mem_alloc.part.0+0x78>
    if(e->header.d_size == size + sizeof(lv_mem_header_t)) {
 8010046:	460a      	mov	r2, r1
 8010048:	1d18      	adds	r0, r3, #4
 801004a:	e7eb      	b.n	8010024 <lv_mem_alloc.part.0+0x68>
        if(e != NULL) {
 801004c:	4603      	mov	r3, r0
 801004e:	2800      	cmp	r0, #0
 8010050:	d1ca      	bne.n	800ffe8 <lv_mem_alloc.part.0+0x2c>
 8010052:	e7ef      	b.n	8010034 <lv_mem_alloc.part.0+0x78>
 8010054:	2000f48c 	.word	0x2000f48c

08010058 <lv_mem_init>:
    work_mem = (uint8_t *) work_mem_int;
 8010058:	4b06      	ldr	r3, [pc, #24]	; (8010074 <lv_mem_init+0x1c>)
    full->header.d_size = LV_MEM_SIZE - sizeof(lv_mem_header_t);
 801005a:	f647 71fc 	movw	r1, #32764	; 0x7ffc
    full->header.used = 0;
 801005e:	791a      	ldrb	r2, [r3, #4]
    work_mem = (uint8_t *) work_mem_int;
 8010060:	1d18      	adds	r0, r3, #4
    full->header.used = 0;
 8010062:	f36f 0200 	bfc	r2, #0, #1
    work_mem = (uint8_t *) work_mem_int;
 8010066:	6018      	str	r0, [r3, #0]
    full->header.used = 0;
 8010068:	711a      	strb	r2, [r3, #4]
    full->header.d_size = LV_MEM_SIZE - sizeof(lv_mem_header_t);
 801006a:	685a      	ldr	r2, [r3, #4]
 801006c:	f361 025f 	bfi	r2, r1, #1, #31
 8010070:	605a      	str	r2, [r3, #4]
 8010072:	4770      	bx	lr
 8010074:	2000f48c 	.word	0x2000f48c

08010078 <lv_mem_alloc>:
    if(size == 0) {
 8010078:	b108      	cbz	r0, 801007e <lv_mem_alloc+0x6>
 801007a:	f7ff bf9f 	b.w	800ffbc <lv_mem_alloc.part.0>
}
 801007e:	4801      	ldr	r0, [pc, #4]	; (8010084 <lv_mem_alloc+0xc>)
 8010080:	4770      	bx	lr
 8010082:	bf00      	nop
 8010084:	20017490 	.word	0x20017490

08010088 <lv_mem_free>:
    if(data == NULL) return;
 8010088:	2800      	cmp	r0, #0
 801008a:	d04d      	beq.n	8010128 <lv_mem_free+0xa0>
    if(data == &zero_mem) return;
 801008c:	4b28      	ldr	r3, [pc, #160]	; (8010130 <lv_mem_free+0xa8>)
    if(data == NULL) return;
 801008e:	1ac3      	subs	r3, r0, r3
 8010090:	fab3 f383 	clz	r3, r3
 8010094:	095b      	lsrs	r3, r3, #5
 8010096:	2b00      	cmp	r3, #0
 8010098:	d146      	bne.n	8010128 <lv_mem_free+0xa0>
    e->header.used = 0;
 801009a:	f810 1c04 	ldrb.w	r1, [r0, #-4]
 801009e:	4602      	mov	r2, r0
 80100a0:	f363 0100 	bfi	r1, r3, #0, #1
{
 80100a4:	b470      	push	{r4, r5, r6}
    e->header.used = 0;
 80100a6:	f802 1d04 	strb.w	r1, [r2, #-4]!
    if(act_e == NULL) { /*NULL means: get the first entry*/
 80100aa:	2a00      	cmp	r2, #0
 80100ac:	d03d      	beq.n	801012a <lv_mem_free+0xa2>
        next_e = (lv_mem_ent_t *)&data[act_e->header.d_size];
 80100ae:	f850 2c04 	ldr.w	r2, [r0, #-4]
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 80100b2:	4c20      	ldr	r4, [pc, #128]	; (8010134 <lv_mem_free+0xac>)
        next_e = (lv_mem_ent_t *)&data[act_e->header.d_size];
 80100b4:	eb00 0252 	add.w	r2, r0, r2, lsr #1
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 80100b8:	6823      	ldr	r3, [r4, #0]
 80100ba:	1d11      	adds	r1, r2, #4
 80100bc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80100c0:	4299      	cmp	r1, r3
 80100c2:	d230      	bcs.n	8010126 <lv_mem_free+0x9e>
    while(e_next != NULL) {
 80100c4:	b37a      	cbz	r2, 8010126 <lv_mem_free+0x9e>
        if(e_next->header.used == 0) {
 80100c6:	7813      	ldrb	r3, [r2, #0]
 80100c8:	07db      	lsls	r3, r3, #31
 80100ca:	d42c      	bmi.n	8010126 <lv_mem_free+0x9e>
            e->header.d_size += e_next->header.d_size + sizeof(e->header);
 80100cc:	f850 1c04 	ldr.w	r1, [r0, #-4]
 80100d0:	4613      	mov	r3, r2
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 80100d2:	6826      	ldr	r6, [r4, #0]
            e->header.d_size += e_next->header.d_size + sizeof(e->header);
 80100d4:	f3c1 045e 	ubfx	r4, r1, #1, #31
 80100d8:	f853 5b04 	ldr.w	r5, [r3], #4
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 80100dc:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
            e->header.d_size += e_next->header.d_size + sizeof(e->header);
 80100e0:	3404      	adds	r4, #4
 80100e2:	eb04 0455 	add.w	r4, r4, r5, lsr #1
 80100e6:	f364 015f 	bfi	r1, r4, #1, #31
 80100ea:	f840 1c04 	str.w	r1, [r0, #-4]
        next_e = (lv_mem_ent_t *)&data[act_e->header.d_size];
 80100ee:	6812      	ldr	r2, [r2, #0]
 80100f0:	eb03 0352 	add.w	r3, r3, r2, lsr #1
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 80100f4:	1d1c      	adds	r4, r3, #4
 80100f6:	42a6      	cmp	r6, r4
 80100f8:	d915      	bls.n	8010126 <lv_mem_free+0x9e>
    while(e_next != NULL) {
 80100fa:	b1a3      	cbz	r3, 8010126 <lv_mem_free+0x9e>
        if(e_next->header.used == 0) {
 80100fc:	781a      	ldrb	r2, [r3, #0]
 80100fe:	07d2      	lsls	r2, r2, #31
 8010100:	d411      	bmi.n	8010126 <lv_mem_free+0x9e>
            e->header.d_size += e_next->header.d_size + sizeof(e->header);
 8010102:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8010106:	681d      	ldr	r5, [r3, #0]
 8010108:	f3c2 015e 	ubfx	r1, r2, #1, #31
 801010c:	3104      	adds	r1, #4
 801010e:	eb01 0155 	add.w	r1, r1, r5, lsr #1
 8010112:	f361 025f 	bfi	r2, r1, #1, #31
 8010116:	f840 2c04 	str.w	r2, [r0, #-4]
        next_e = (lv_mem_ent_t *)&data[act_e->header.d_size];
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	eb04 0353 	add.w	r3, r4, r3, lsr #1
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 8010120:	1d1c      	adds	r4, r3, #4
 8010122:	42a6      	cmp	r6, r4
 8010124:	d8e9      	bhi.n	80100fa <lv_mem_free+0x72>
}
 8010126:	bc70      	pop	{r4, r5, r6}
 8010128:	4770      	bx	lr
        next_e = (lv_mem_ent_t *) work_mem;
 801012a:	4c02      	ldr	r4, [pc, #8]	; (8010134 <lv_mem_free+0xac>)
 801012c:	6822      	ldr	r2, [r4, #0]
 801012e:	e7c9      	b.n	80100c4 <lv_mem_free+0x3c>
 8010130:	20017490 	.word	0x20017490
 8010134:	2000f48c 	.word	0x2000f48c

08010138 <lv_mem_realloc>:
{
 8010138:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(data_p != NULL) {
 801013a:	4604      	mov	r4, r0
{
 801013c:	b083      	sub	sp, #12
    if(data_p != NULL) {
 801013e:	b370      	cbz	r0, 801019e <lv_mem_realloc+0x66>
        if(e->header.used == 0) {
 8010140:	f810 3c04 	ldrb.w	r3, [r0, #-4]
 8010144:	f013 0301 	ands.w	r3, r3, #1
 8010148:	d028      	beq.n	801019c <lv_mem_realloc+0x64>
    if(data == &zero_mem) return 0;
 801014a:	4e2b      	ldr	r6, [pc, #172]	; (80101f8 <lv_mem_realloc+0xc0>)
 801014c:	42b0      	cmp	r0, r6
 801014e:	d026      	beq.n	801019e <lv_mem_realloc+0x66>
    return e->header.d_size;
 8010150:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8010154:	f3c5 055e 	ubfx	r5, r5, #1, #31
    if(old_size == new_size) return data_p;     /*Also avoid reallocating the same memory*/
 8010158:	42a9      	cmp	r1, r5
 801015a:	d048      	beq.n	80101ee <lv_mem_realloc+0xb6>
    if(new_size < old_size) {
 801015c:	d240      	bcs.n	80101e0 <lv_mem_realloc+0xa8>
    if(size & 0x3) {
 801015e:	078b      	lsls	r3, r1, #30
 8010160:	d039      	beq.n	80101d6 <lv_mem_realloc+0x9e>
        size = size & (~0x3);
 8010162:	f021 0103 	bic.w	r1, r1, #3
    if(e->header.d_size == size + sizeof(lv_mem_header_t)) {
 8010166:	f101 0308 	add.w	r3, r1, #8
 801016a:	429d      	cmp	r5, r3
 801016c:	d036      	beq.n	80101dc <lv_mem_realloc+0xa4>
        size += 4;
 801016e:	3104      	adds	r1, #4
    if(e->header.d_size != size) {
 8010170:	428d      	cmp	r5, r1
 8010172:	d009      	beq.n	8010188 <lv_mem_realloc+0x50>
        after_new_e->header.used = 0;
 8010174:	5c63      	ldrb	r3, [r4, r1]
        after_new_e->header.d_size = e->header.d_size - size - sizeof(lv_mem_header_t);
 8010176:	3d04      	subs	r5, #4
        after_new_e->header.used = 0;
 8010178:	f36f 0300 	bfc	r3, #0, #1
        after_new_e->header.d_size = e->header.d_size - size - sizeof(lv_mem_header_t);
 801017c:	1a6d      	subs	r5, r5, r1
        after_new_e->header.used = 0;
 801017e:	5463      	strb	r3, [r4, r1]
        after_new_e->header.d_size = e->header.d_size - size - sizeof(lv_mem_header_t);
 8010180:	5863      	ldr	r3, [r4, r1]
 8010182:	f365 035f 	bfi	r3, r5, #1, #31
 8010186:	5063      	str	r3, [r4, r1]
    e->header.d_size = size;
 8010188:	f854 3c04 	ldr.w	r3, [r4, #-4]
        return &e->first_data;
 801018c:	4626      	mov	r6, r4
    e->header.d_size = size;
 801018e:	f361 035f 	bfi	r3, r1, #1, #31
 8010192:	f844 3c04 	str.w	r3, [r4, #-4]
}
 8010196:	4630      	mov	r0, r6
 8010198:	b003      	add	sp, #12
 801019a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801019c:	461c      	mov	r4, r3
    if(old_size == new_size) return data_p;     /*Also avoid reallocating the same memory*/
 801019e:	b331      	cbz	r1, 80101ee <lv_mem_realloc+0xb6>
 80101a0:	2700      	movs	r7, #0
 80101a2:	463d      	mov	r5, r7
 80101a4:	4608      	mov	r0, r1
 80101a6:	9101      	str	r1, [sp, #4]
 80101a8:	f7ff ff08 	bl	800ffbc <lv_mem_alloc.part.0>
 80101ac:	1c03      	adds	r3, r0, #0
 80101ae:	4606      	mov	r6, r0
 80101b0:	9901      	ldr	r1, [sp, #4]
 80101b2:	bf18      	it	ne
 80101b4:	2301      	movne	r3, #1
        if(old_size != 0) {
 80101b6:	2c00      	cmp	r4, #0
 80101b8:	d0ed      	beq.n	8010196 <lv_mem_realloc+0x5e>
 80101ba:	421f      	tst	r7, r3
 80101bc:	d0eb      	beq.n	8010196 <lv_mem_realloc+0x5e>
            memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
 80101be:	42a9      	cmp	r1, r5
 80101c0:	460a      	mov	r2, r1
 80101c2:	4630      	mov	r0, r6
 80101c4:	4621      	mov	r1, r4
 80101c6:	bf28      	it	cs
 80101c8:	462a      	movcs	r2, r5
 80101ca:	f009 fa79 	bl	80196c0 <memcpy>
            lv_mem_free(data_p);
 80101ce:	4620      	mov	r0, r4
 80101d0:	f7ff ff5a 	bl	8010088 <lv_mem_free>
 80101d4:	e7df      	b.n	8010196 <lv_mem_realloc+0x5e>
    if(e->header.d_size == size + sizeof(lv_mem_header_t)) {
 80101d6:	1d0b      	adds	r3, r1, #4
 80101d8:	429d      	cmp	r5, r3
 80101da:	d1cb      	bne.n	8010174 <lv_mem_realloc+0x3c>
 80101dc:	4629      	mov	r1, r5
 80101de:	e7d3      	b.n	8010188 <lv_mem_realloc+0x50>
 80101e0:	1c2f      	adds	r7, r5, #0
 80101e2:	bf18      	it	ne
 80101e4:	2701      	movne	r7, #1
    if(size == 0) {
 80101e6:	2900      	cmp	r1, #0
 80101e8:	d1dc      	bne.n	80101a4 <lv_mem_realloc+0x6c>
 80101ea:	2301      	movs	r3, #1
 80101ec:	e7e3      	b.n	80101b6 <lv_mem_realloc+0x7e>
    if(old_size == new_size) return data_p;     /*Also avoid reallocating the same memory*/
 80101ee:	4626      	mov	r6, r4
}
 80101f0:	4630      	mov	r0, r6
 80101f2:	b003      	add	sp, #12
 80101f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101f6:	bf00      	nop
 80101f8:	20017490 	.word	0x20017490

080101fc <lv_mem_monitor>:
        next_e = (lv_mem_ent_t *) work_mem;
 80101fc:	4b23      	ldr	r3, [pc, #140]	; (801028c <lv_mem_monitor+0x90>)
    memset(mon_p, 0, sizeof(lv_mem_monitor_t));
 80101fe:	2200      	movs	r2, #0
        next_e = (lv_mem_ent_t *) work_mem;
 8010200:	681b      	ldr	r3, [r3, #0]
    memset(mon_p, 0, sizeof(lv_mem_monitor_t));
 8010202:	6002      	str	r2, [r0, #0]
 8010204:	6042      	str	r2, [r0, #4]
 8010206:	6082      	str	r2, [r0, #8]
 8010208:	60c2      	str	r2, [r0, #12]
 801020a:	6102      	str	r2, [r0, #16]
 801020c:	6142      	str	r2, [r0, #20]
{
 801020e:	b4f0      	push	{r4, r5, r6, r7}
 8010210:	6805      	ldr	r5, [r0, #0]
    while(e != NULL)  {
 8010212:	2b00      	cmp	r3, #0
 8010214:	d037      	beq.n	8010286 <lv_mem_monitor+0x8a>
 8010216:	1d19      	adds	r1, r3, #4
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 8010218:	f503 4700 	add.w	r7, r3, #32768	; 0x8000
 801021c:	462e      	mov	r6, r5
        if(e->header.used == 0) {
 801021e:	781a      	ldrb	r2, [r3, #0]
 8010220:	07d2      	lsls	r2, r2, #31
 8010222:	d423      	bmi.n	801026c <lv_mem_monitor+0x70>
            mon_p->free_size += e->header.d_size;
 8010224:	681a      	ldr	r2, [r3, #0]
            mon_p->free_cnt++;
 8010226:	6843      	ldr	r3, [r0, #4]
            mon_p->free_size += e->header.d_size;
 8010228:	f3c2 025e 	ubfx	r2, r2, #1, #31
            mon_p->free_cnt++;
 801022c:	1c5c      	adds	r4, r3, #1
            mon_p->free_size += e->header.d_size;
 801022e:	4415      	add	r5, r2
            if(e->header.d_size > mon_p->free_biggest_size) {
 8010230:	42b2      	cmp	r2, r6
 8010232:	4613      	mov	r3, r2
            mon_p->free_cnt++;
 8010234:	6044      	str	r4, [r0, #4]
            mon_p->free_size += e->header.d_size;
 8010236:	6085      	str	r5, [r0, #8]
            if(e->header.d_size > mon_p->free_biggest_size) {
 8010238:	d901      	bls.n	801023e <lv_mem_monitor+0x42>
                mon_p->free_biggest_size = e->header.d_size;
 801023a:	4616      	mov	r6, r2
 801023c:	60c2      	str	r2, [r0, #12]
        next_e = (lv_mem_ent_t *)&data[act_e->header.d_size];
 801023e:	440b      	add	r3, r1
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 8010240:	1d19      	adds	r1, r3, #4
 8010242:	42b9      	cmp	r1, r7
 8010244:	d31c      	bcc.n	8010280 <lv_mem_monitor+0x84>
    mon_p->used_pct = 100 - (100U * mon_p->free_size) / mon_p->total_size;
 8010246:	2364      	movs	r3, #100	; 0x64
    mon_p->total_size = LV_MEM_SIZE;
 8010248:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    mon_p->frag_pct = (uint32_t)mon_p->free_biggest_size * 100U / mon_p->free_size;
 801024c:	fb03 f606 	mul.w	r6, r3, r6
    mon_p->used_pct = 100 - (100U * mon_p->free_size) / mon_p->total_size;
 8010250:	fb03 f305 	mul.w	r3, r3, r5
    mon_p->total_size = LV_MEM_SIZE;
 8010254:	6002      	str	r2, [r0, #0]
    mon_p->used_pct = 100 - (100U * mon_p->free_size) / mon_p->total_size;
 8010256:	0bdb      	lsrs	r3, r3, #15
    mon_p->frag_pct = (uint32_t)mon_p->free_biggest_size * 100U / mon_p->free_size;
 8010258:	fbb6 f5f5 	udiv	r5, r6, r5
    mon_p->used_pct = 100 - (100U * mon_p->free_size) / mon_p->total_size;
 801025c:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
    mon_p->frag_pct = 100 - mon_p->frag_pct;
 8010260:	f1c5 0564 	rsb	r5, r5, #100	; 0x64
    mon_p->used_pct = 100 - (100U * mon_p->free_size) / mon_p->total_size;
 8010264:	7503      	strb	r3, [r0, #20]
    mon_p->frag_pct = 100 - mon_p->frag_pct;
 8010266:	7545      	strb	r5, [r0, #21]
}
 8010268:	bcf0      	pop	{r4, r5, r6, r7}
 801026a:	4770      	bx	lr
 801026c:	681b      	ldr	r3, [r3, #0]
            mon_p->used_cnt++;
 801026e:	6902      	ldr	r2, [r0, #16]
 8010270:	f3c3 035e 	ubfx	r3, r3, #1, #31
 8010274:	3201      	adds	r2, #1
        next_e = (lv_mem_ent_t *)&data[act_e->header.d_size];
 8010276:	440b      	add	r3, r1
            mon_p->used_cnt++;
 8010278:	6102      	str	r2, [r0, #16]
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 801027a:	1d19      	adds	r1, r3, #4
 801027c:	42b9      	cmp	r1, r7
 801027e:	d2e2      	bcs.n	8010246 <lv_mem_monitor+0x4a>
    while(e != NULL)  {
 8010280:	2b00      	cmp	r3, #0
 8010282:	d1cc      	bne.n	801021e <lv_mem_monitor+0x22>
 8010284:	e7df      	b.n	8010246 <lv_mem_monitor+0x4a>
 8010286:	462e      	mov	r6, r5
 8010288:	e7dd      	b.n	8010246 <lv_mem_monitor+0x4a>
 801028a:	bf00      	nop
 801028c:	2000f48c 	.word	0x2000f48c

08010290 <lv_mem_get_size>:
    if(data == &zero_mem) return 0;
 8010290:	4b05      	ldr	r3, [pc, #20]	; (80102a8 <lv_mem_get_size+0x18>)
 8010292:	4298      	cmp	r0, r3
 8010294:	d005      	beq.n	80102a2 <lv_mem_get_size+0x12>
 8010296:	b120      	cbz	r0, 80102a2 <lv_mem_get_size+0x12>
    return e->header.d_size;
 8010298:	f850 0c04 	ldr.w	r0, [r0, #-4]
 801029c:	f3c0 005e 	ubfx	r0, r0, #1, #31
 80102a0:	4770      	bx	lr
 80102a2:	2000      	movs	r0, #0
}
 80102a4:	4770      	bx	lr
 80102a6:	bf00      	nop
 80102a8:	20017490 	.word	0x20017490

080102ac <lv_task_init>:

/**
 * Init the lv_task module
 */
void lv_task_init(void)
{
 80102ac:	b508      	push	{r3, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
 80102ae:	2114      	movs	r1, #20
 80102b0:	4803      	ldr	r0, [pc, #12]	; (80102c0 <lv_task_init+0x14>)
 80102b2:	f7ff fd8d 	bl	800fdd0 <lv_ll_init>
 * Enable or disable the whole lv_task handling
 * @param en: true: lv_task handling is running, false: lv_task handling is suspended
 */
void lv_task_enable(bool en)
{
    lv_task_run = en;
 80102b6:	4b03      	ldr	r3, [pc, #12]	; (80102c4 <lv_task_init+0x18>)
 80102b8:	2201      	movs	r2, #1
 80102ba:	701a      	strb	r2, [r3, #0]
 80102bc:	bd08      	pop	{r3, pc}
 80102be:	bf00      	nop
 80102c0:	20017fe8 	.word	0x20017fe8
 80102c4:	20017494 	.word	0x20017494

080102c8 <lv_task_create>:
{
 80102c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102cc:	4606      	mov	r6, r0
    tmp = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 80102ce:	481e      	ldr	r0, [pc, #120]	; (8010348 <lv_task_create+0x80>)
{
 80102d0:	460f      	mov	r7, r1
 80102d2:	4614      	mov	r4, r2
 80102d4:	4698      	mov	r8, r3
    tmp = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 80102d6:	f7ff fe5f 	bl	800ff98 <lv_ll_get_head>
    if(NULL == tmp) {                               /*First task*/
 80102da:	b368      	cbz	r0, 8010338 <lv_task_create+0x70>
 80102dc:	4603      	mov	r3, r0
            tmp = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
 80102de:	4d1a      	ldr	r5, [pc, #104]	; (8010348 <lv_task_create+0x80>)
 80102e0:	e003      	b.n	80102ea <lv_task_create+0x22>
 80102e2:	f7ff fe61 	bl	800ffa8 <lv_ll_get_next>
        } while(tmp != NULL);
 80102e6:	4603      	mov	r3, r0
 80102e8:	b1f8      	cbz	r0, 801032a <lv_task_create+0x62>
            if(tmp->prio <= prio) {
 80102ea:	7c1a      	ldrb	r2, [r3, #16]
            tmp = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
 80102ec:	4619      	mov	r1, r3
 80102ee:	4628      	mov	r0, r5
            if(tmp->prio <= prio) {
 80102f0:	f002 0207 	and.w	r2, r2, #7
 80102f4:	42a2      	cmp	r2, r4
 80102f6:	dcf4      	bgt.n	80102e2 <lv_task_create+0x1a>
                new_lv_task = lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
 80102f8:	4813      	ldr	r0, [pc, #76]	; (8010348 <lv_task_create+0x80>)
 80102fa:	f7ff fd95 	bl	800fe28 <lv_ll_ins_prev>
                lv_mem_assert(new_lv_task);
 80102fe:	4605      	mov	r5, r0
 8010300:	b190      	cbz	r0, 8010328 <lv_task_create+0x60>
    new_lv_task->prio = prio;
 8010302:	7c2b      	ldrb	r3, [r5, #16]
    new_lv_task->period = period;
 8010304:	602f      	str	r7, [r5, #0]
    new_lv_task->prio = prio;
 8010306:	f364 0302 	bfi	r3, r4, #0, #3
    new_lv_task->task = task;
 801030a:	60ae      	str	r6, [r5, #8]
    new_lv_task->param = param;
 801030c:	f8c5 800c 	str.w	r8, [r5, #12]
    new_lv_task->once = 0;
 8010310:	f36f 03c3 	bfc	r3, #3, #1
 8010314:	742b      	strb	r3, [r5, #16]
    new_lv_task->last_run = lv_tick_get();
 8010316:	f7ff f999 	bl	800f64c <lv_tick_get>
    task_created = true;
 801031a:	4b0c      	ldr	r3, [pc, #48]	; (801034c <lv_task_create+0x84>)
 801031c:	2201      	movs	r2, #1
    new_lv_task->last_run = lv_tick_get();
 801031e:	6068      	str	r0, [r5, #4]
}
 8010320:	4628      	mov	r0, r5
    task_created = true;
 8010322:	705a      	strb	r2, [r3, #1]
}
 8010324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010328:	e7fe      	b.n	8010328 <lv_task_create+0x60>
            new_lv_task = lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
 801032a:	4807      	ldr	r0, [pc, #28]	; (8010348 <lv_task_create+0x80>)
 801032c:	f7ff fda6 	bl	800fe7c <lv_ll_ins_tail>
            lv_mem_assert(new_lv_task);
 8010330:	4605      	mov	r5, r0
 8010332:	2800      	cmp	r0, #0
 8010334:	d1e5      	bne.n	8010302 <lv_task_create+0x3a>
 8010336:	e7fe      	b.n	8010336 <lv_task_create+0x6e>
        new_lv_task = lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
 8010338:	4803      	ldr	r0, [pc, #12]	; (8010348 <lv_task_create+0x80>)
 801033a:	f7ff fd53 	bl	800fde4 <lv_ll_ins_head>
        lv_mem_assert(new_lv_task);
 801033e:	4605      	mov	r5, r0
 8010340:	2800      	cmp	r0, #0
 8010342:	d1de      	bne.n	8010302 <lv_task_create+0x3a>
 8010344:	e7fe      	b.n	8010344 <lv_task_create+0x7c>
 8010346:	bf00      	nop
 8010348:	20017fe8 	.word	0x20017fe8
 801034c:	20017494 	.word	0x20017494

08010350 <lv_task_del>:
{
 8010350:	b510      	push	{r4, lr}
 8010352:	4604      	mov	r4, r0
    lv_ll_rem(&LV_GC_ROOT(_lv_task_ll), lv_task_p);
 8010354:	4807      	ldr	r0, [pc, #28]	; (8010374 <lv_task_del+0x24>)
 8010356:	4621      	mov	r1, r4
 8010358:	f7ff fdb2 	bl	800fec0 <lv_ll_rem>
    lv_mem_free(lv_task_p);
 801035c:	4620      	mov	r0, r4
 801035e:	f7ff fe93 	bl	8010088 <lv_mem_free>
    if(LV_GC_ROOT(_lv_task_act) == lv_task_p) task_deleted = true;      /*The active task was deleted*/
 8010362:	4b05      	ldr	r3, [pc, #20]	; (8010378 <lv_task_del+0x28>)
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	429c      	cmp	r4, r3
 8010368:	d000      	beq.n	801036c <lv_task_del+0x1c>
 801036a:	bd10      	pop	{r4, pc}
 801036c:	4b03      	ldr	r3, [pc, #12]	; (801037c <lv_task_del+0x2c>)
 801036e:	2201      	movs	r2, #1
 8010370:	709a      	strb	r2, [r3, #2]
 8010372:	bd10      	pop	{r4, pc}
 8010374:	20017fe8 	.word	0x20017fe8
 8010378:	20018018 	.word	0x20018018
 801037c:	20017494 	.word	0x20017494

08010380 <lv_task_exec>:
 * Execute task if its the priority is appropriate
 * @param lv_task_p pointer to lv_task
 * @return true: execute, false: not executed
 */
static bool lv_task_exec(lv_task_t * lv_task_p)
{
 8010380:	b538      	push	{r3, r4, r5, lr}
 8010382:	4604      	mov	r4, r0
    bool exec = false;

    /*Execute if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(lv_task_p->last_run);
 8010384:	6840      	ldr	r0, [r0, #4]
 8010386:	f7ff f96b 	bl	800f660 <lv_tick_elaps>
    if(elp >= lv_task_p->period) {
 801038a:	6823      	ldr	r3, [r4, #0]
 801038c:	4298      	cmp	r0, r3
 801038e:	d201      	bcs.n	8010394 <lv_task_exec+0x14>
    bool exec = false;
 8010390:	2000      	movs	r0, #0
 8010392:	bd38      	pop	{r3, r4, r5, pc}
        lv_task_p->last_run = lv_tick_get();
 8010394:	f7ff f95a 	bl	800f64c <lv_tick_get>
        task_deleted = false;
 8010398:	4d09      	ldr	r5, [pc, #36]	; (80103c0 <lv_task_exec+0x40>)
 801039a:	2300      	movs	r3, #0
        lv_task_p->last_run = lv_tick_get();
 801039c:	6060      	str	r0, [r4, #4]
        task_created = false;
        lv_task_p->task(lv_task_p->param);
 801039e:	68a2      	ldr	r2, [r4, #8]
 80103a0:	68e0      	ldr	r0, [r4, #12]
        task_deleted = false;
 80103a2:	70ab      	strb	r3, [r5, #2]
        task_created = false;
 80103a4:	706b      	strb	r3, [r5, #1]
        lv_task_p->task(lv_task_p->param);
 80103a6:	4790      	blx	r2

        /*Delete if it was a one shot lv_task*/
        if(task_deleted == false) {			/*The task might be deleted by itself as well*/
 80103a8:	78a8      	ldrb	r0, [r5, #2]
 80103aa:	b918      	cbnz	r0, 80103b4 <lv_task_exec+0x34>
        	if(lv_task_p->once != 0) {
 80103ac:	7c23      	ldrb	r3, [r4, #16]
 80103ae:	071b      	lsls	r3, r3, #28
 80103b0:	d401      	bmi.n	80103b6 <lv_task_exec+0x36>
        	    lv_task_del(lv_task_p);
        	}
        }
        exec = true;
 80103b2:	2001      	movs	r0, #1
    }

    return exec;
}
 80103b4:	bd38      	pop	{r3, r4, r5, pc}
        	    lv_task_del(lv_task_p);
 80103b6:	4620      	mov	r0, r4
 80103b8:	f7ff ffca 	bl	8010350 <lv_task_del>
 80103bc:	2001      	movs	r0, #1
 80103be:	bd38      	pop	{r3, r4, r5, pc}
 80103c0:	20017494 	.word	0x20017494

080103c4 <lv_task_handler>:
{
 80103c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(task_handler_mutex) return;
 80103c8:	4e34      	ldr	r6, [pc, #208]	; (801049c <lv_task_handler+0xd8>)
 80103ca:	78f5      	ldrb	r5, [r6, #3]
 80103cc:	b91d      	cbnz	r5, 80103d6 <lv_task_handler+0x12>
    task_handler_mutex = true;
 80103ce:	2201      	movs	r2, #1
    if(lv_task_run == false) return;
 80103d0:	7833      	ldrb	r3, [r6, #0]
    task_handler_mutex = true;
 80103d2:	70f2      	strb	r2, [r6, #3]
    if(lv_task_run == false) return;
 80103d4:	b90b      	cbnz	r3, 80103da <lv_task_handler+0x16>
 80103d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103da:	4f31      	ldr	r7, [pc, #196]	; (80104a0 <lv_task_handler+0xdc>)
        task_deleted = false;
 80103dc:	46a9      	mov	r9, r5
        LV_GC_ROOT(_lv_task_act) = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 80103de:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80104a8 <lv_task_handler+0xe4>
    handler_start = lv_tick_get();
 80103e2:	f7ff f933 	bl	800f64c <lv_tick_get>
 80103e6:	6070      	str	r0, [r6, #4]
        LV_GC_ROOT(_lv_task_act) = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 80103e8:	4640      	mov	r0, r8
        task_deleted = false;
 80103ea:	f886 9002 	strb.w	r9, [r6, #2]
        task_created = false;
 80103ee:	f886 9001 	strb.w	r9, [r6, #1]
        LV_GC_ROOT(_lv_task_act) = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 80103f2:	f7ff fdd1 	bl	800ff98 <lv_ll_get_head>
 80103f6:	4601      	mov	r1, r0
 80103f8:	6038      	str	r0, [r7, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
 80103fa:	b1e1      	cbz	r1, 8010436 <lv_task_handler+0x72>
            next = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
 80103fc:	4640      	mov	r0, r8
 80103fe:	f7ff fdd3 	bl	800ffa8 <lv_ll_get_next>
 8010402:	4604      	mov	r4, r0
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_OFF) {
 8010404:	6838      	ldr	r0, [r7, #0]
 8010406:	7c03      	ldrb	r3, [r0, #16]
 8010408:	f013 0207 	ands.w	r2, r3, #7
 801040c:	d013      	beq.n	8010436 <lv_task_handler+0x72>
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
 801040e:	4285      	cmp	r5, r0
 8010410:	d039      	beq.n	8010486 <lv_task_handler+0xc2>
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_HIGHEST) {
 8010412:	2a05      	cmp	r2, #5
 8010414:	d03b      	beq.n	801048e <lv_task_handler+0xca>
            else if(task_interrupter) {
 8010416:	b385      	cbz	r5, 801047a <lv_task_handler+0xb6>
                if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio > task_interrupter->prio) {
 8010418:	7c2a      	ldrb	r2, [r5, #16]
 801041a:	f003 0307 	and.w	r3, r3, #7
 801041e:	f002 0207 	and.w	r2, r2, #7
 8010422:	4293      	cmp	r3, r2
 8010424:	dc29      	bgt.n	801047a <lv_task_handler+0xb6>
            if(task_deleted) break;     /*If a task was deleted then this or the next item might be corrupted*/
 8010426:	78b3      	ldrb	r3, [r6, #2]
 8010428:	b92b      	cbnz	r3, 8010436 <lv_task_handler+0x72>
            if(task_created) break;     /*If a task was deleted then this or the next item might be corrupted*/
 801042a:	7873      	ldrb	r3, [r6, #1]
 801042c:	b91b      	cbnz	r3, 8010436 <lv_task_handler+0x72>
 801042e:	4621      	mov	r1, r4
            LV_GC_ROOT(_lv_task_act) = next;         /*Load the next task*/
 8010430:	603c      	str	r4, [r7, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
 8010432:	2900      	cmp	r1, #0
 8010434:	d1e2      	bne.n	80103fc <lv_task_handler+0x38>
    busy_time += lv_tick_elaps(handler_start);
 8010436:	6870      	ldr	r0, [r6, #4]
 8010438:	f7ff f912 	bl	800f660 <lv_tick_elaps>
 801043c:	68b3      	ldr	r3, [r6, #8]
 801043e:	4403      	add	r3, r0
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 8010440:	6930      	ldr	r0, [r6, #16]
    busy_time += lv_tick_elaps(handler_start);
 8010442:	60b3      	str	r3, [r6, #8]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 8010444:	f7ff f90c 	bl	800f660 <lv_tick_elaps>
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 8010448:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 801044c:	d311      	bcc.n	8010472 <lv_task_handler+0xae>
        idle_last = (uint32_t)((uint32_t)busy_time * 100) / IDLE_MEAS_PERIOD;   /*Calculate the busy percentage*/
 801044e:	68b1      	ldr	r1, [r6, #8]
 8010450:	2364      	movs	r3, #100	; 0x64
 8010452:	4a14      	ldr	r2, [pc, #80]	; (80104a4 <lv_task_handler+0xe0>)
 8010454:	fb03 f301 	mul.w	r3, r3, r1
 8010458:	fba2 2303 	umull	r2, r3, r2, r3
 801045c:	f3c3 1347 	ubfx	r3, r3, #5, #8
        idle_last = idle_last > 100 ? 0 : 100 - idle_last;                      /*But we need idle time*/
 8010460:	2b64      	cmp	r3, #100	; 0x64
 8010462:	d917      	bls.n	8010494 <lv_task_handler+0xd0>
 8010464:	2300      	movs	r3, #0
        busy_time = 0;
 8010466:	2200      	movs	r2, #0
        idle_last = idle_last > 100 ? 0 : 100 - idle_last;                      /*But we need idle time*/
 8010468:	7333      	strb	r3, [r6, #12]
        busy_time = 0;
 801046a:	60b2      	str	r2, [r6, #8]
        idle_period_start = lv_tick_get();
 801046c:	f7ff f8ee 	bl	800f64c <lv_tick_get>
 8010470:	6130      	str	r0, [r6, #16]
    task_handler_mutex = false;     /*Release the mutex*/
 8010472:	2300      	movs	r3, #0
 8010474:	70f3      	strb	r3, [r6, #3]
 8010476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
 801047a:	f7ff ff81 	bl	8010380 <lv_task_exec>
 801047e:	2800      	cmp	r0, #0
 8010480:	d0d1      	beq.n	8010426 <lv_task_handler+0x62>
                    task_interrupter = LV_GC_ROOT(_lv_task_act);  /*Check all tasks again from the highest priority */
 8010482:	683d      	ldr	r5, [r7, #0]
                    break;
 8010484:	e7b0      	b.n	80103e8 <lv_task_handler+0x24>
                LV_GC_ROOT(_lv_task_act) = next;
 8010486:	603c      	str	r4, [r7, #0]
                task_interrupter = NULL;     /*From this point only task after the interrupter comes, so the interrupter is not interesting anymore*/
 8010488:	2500      	movs	r5, #0
 801048a:	4621      	mov	r1, r4
 801048c:	e7d1      	b.n	8010432 <lv_task_handler+0x6e>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
 801048e:	f7ff ff77 	bl	8010380 <lv_task_exec>
 8010492:	e7c8      	b.n	8010426 <lv_task_handler+0x62>
        idle_last = idle_last > 100 ? 0 : 100 - idle_last;                      /*But we need idle time*/
 8010494:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8010498:	b2db      	uxtb	r3, r3
 801049a:	e7e4      	b.n	8010466 <lv_task_handler+0xa2>
 801049c:	20017494 	.word	0x20017494
 80104a0:	20018018 	.word	0x20018018
 80104a4:	10624dd3 	.word	0x10624dd3
 80104a8:	20017fe8 	.word	0x20017fe8

080104ac <lv_task_ready>:
{
 80104ac:	b510      	push	{r4, lr}
 80104ae:	4604      	mov	r4, r0
    lv_task_p->last_run = lv_tick_get() - lv_task_p->period - 1;
 80104b0:	f7ff f8cc 	bl	800f64c <lv_tick_get>
 80104b4:	6823      	ldr	r3, [r4, #0]
 80104b6:	43db      	mvns	r3, r3
 80104b8:	4403      	add	r3, r0
 80104ba:	6063      	str	r3, [r4, #4]
 80104bc:	bd10      	pop	{r4, pc}
 80104be:	bf00      	nop

080104c0 <lv_txt_utf8_size>:
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4). O on invalid code
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
    if((str[0] & 0x80) == 0) return 1;
 80104c0:	7803      	ldrb	r3, [r0, #0]
 80104c2:	061a      	lsls	r2, r3, #24
 80104c4:	d401      	bmi.n	80104ca <lv_txt_utf8_size+0xa>
 80104c6:	2001      	movs	r0, #1
 80104c8:	4770      	bx	lr
    else if((str[0] & 0xE0) == 0xC0) return 2;
 80104ca:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
 80104ce:	2ac0      	cmp	r2, #192	; 0xc0
 80104d0:	d00c      	beq.n	80104ec <lv_txt_utf8_size+0x2c>
    else if((str[0] & 0xF0) == 0xE0) return 3;
 80104d2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80104d6:	2ae0      	cmp	r2, #224	; 0xe0
 80104d8:	d006      	beq.n	80104e8 <lv_txt_utf8_size+0x28>
    else if((str[0] & 0xF8) == 0xF0) return 4;
 80104da:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80104de:	2bf0      	cmp	r3, #240	; 0xf0
    return 0;
 80104e0:	bf0c      	ite	eq
 80104e2:	2004      	moveq	r0, #4
 80104e4:	2000      	movne	r0, #0
 80104e6:	4770      	bx	lr
    else if((str[0] & 0xF0) == 0xE0) return 3;
 80104e8:	2003      	movs	r0, #3
}
 80104ea:	4770      	bx	lr
    else if((str[0] & 0xE0) == 0xC0) return 2;
 80104ec:	2002      	movs	r0, #2
 80104ee:	4770      	bx	lr

080104f0 <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
 80104f0:	b470      	push	{r4, r5, r6}
     * */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 80104f2:	2300      	movs	r3, #0
{
 80104f4:	b083      	sub	sp, #12
    uint32_t i_tmp = 0;
 80104f6:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
 80104f8:	b321      	cbz	r1, 8010544 <lv_txt_utf8_next+0x54>
 80104fa:	680a      	ldr	r2, [r1, #0]
 80104fc:	1c54      	adds	r4, r2, #1

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
 80104fe:	5c83      	ldrb	r3, [r0, r2]
 8010500:	061d      	lsls	r5, r3, #24
 8010502:	d404      	bmi.n	801050e <lv_txt_utf8_next+0x1e>
        result = txt[*i];
 8010504:	4618      	mov	r0, r3
        (*i)++;
 8010506:	600c      	str	r4, [r1, #0]
        } else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
 8010508:	b003      	add	sp, #12
 801050a:	bc70      	pop	{r4, r5, r6}
 801050c:	4770      	bx	lr
        if((txt[*i] & 0xE0) == 0xC0) {
 801050e:	f003 05e0 	and.w	r5, r3, #224	; 0xe0
 8010512:	2dc0      	cmp	r5, #192	; 0xc0
 8010514:	d01a      	beq.n	801054c <lv_txt_utf8_next+0x5c>
        else if((txt[*i] & 0xF0) == 0xE0) {
 8010516:	f003 05f0 	and.w	r5, r3, #240	; 0xf0
 801051a:	2de0      	cmp	r5, #224	; 0xe0
 801051c:	d008      	beq.n	8010530 <lv_txt_utf8_next+0x40>
        else if((txt[*i] & 0xF8) == 0xF0) {
 801051e:	f003 05f8 	and.w	r5, r3, #248	; 0xf8
 8010522:	2df0      	cmp	r5, #240	; 0xf0
 8010524:	d021      	beq.n	801056a <lv_txt_utf8_next+0x7a>
    uint32_t result = 0;
 8010526:	2000      	movs	r0, #0
            (*i)++; /*Not UTF-8 char. Go the next.*/
 8010528:	600c      	str	r4, [r1, #0]
}
 801052a:	b003      	add	sp, #12
 801052c:	bc70      	pop	{r4, r5, r6}
 801052e:	4770      	bx	lr
            (*i)++;
 8010530:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0;  /*Invalid UTF-8 code*/
 8010532:	5d04      	ldrb	r4, [r0, r4]
 8010534:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
 8010538:	2d80      	cmp	r5, #128	; 0x80
 801053a:	d03b      	beq.n	80105b4 <lv_txt_utf8_next+0xc4>
            if((txt[*i] & 0xC0) != 0x80) return 0;  /*Invalid UTF-8 code*/
 801053c:	2000      	movs	r0, #0
}
 801053e:	b003      	add	sp, #12
 8010540:	bc70      	pop	{r4, r5, r6}
 8010542:	4770      	bx	lr
 8010544:	460a      	mov	r2, r1
 8010546:	2401      	movs	r4, #1
    if(i == NULL) i = &i_tmp;
 8010548:	a901      	add	r1, sp, #4
 801054a:	e7d8      	b.n	80104fe <lv_txt_utf8_next+0xe>
            (*i)++;
 801054c:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0;  /*Invalid UTF-8 code*/
 801054e:	5d00      	ldrb	r0, [r0, r4]
 8010550:	f000 04c0 	and.w	r4, r0, #192	; 0xc0
 8010554:	2c80      	cmp	r4, #128	; 0x80
 8010556:	d1f1      	bne.n	801053c <lv_txt_utf8_next+0x4c>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 8010558:	019b      	lsls	r3, r3, #6
            result += (txt[*i] & 0x3F);
 801055a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            (*i)++;
 801055e:	3202      	adds	r2, #2
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 8010560:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
            (*i)++;
 8010564:	600a      	str	r2, [r1, #0]
            result += (txt[*i] & 0x3F);
 8010566:	4418      	add	r0, r3
 8010568:	e7ce      	b.n	8010508 <lv_txt_utf8_next+0x18>
            (*i)++;
 801056a:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0;  /*Invalid UTF-8 code*/
 801056c:	5d04      	ldrb	r4, [r0, r4]
 801056e:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
 8010572:	2d80      	cmp	r5, #128	; 0x80
 8010574:	d1e2      	bne.n	801053c <lv_txt_utf8_next+0x4c>
            (*i)++;
 8010576:	1c95      	adds	r5, r2, #2
 8010578:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0;  /*Invalid UTF-8 code*/
 801057a:	5d45      	ldrb	r5, [r0, r5]
 801057c:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
 8010580:	2e80      	cmp	r6, #128	; 0x80
 8010582:	d1db      	bne.n	801053c <lv_txt_utf8_next+0x4c>
            (*i)++;
 8010584:	1cd6      	adds	r6, r2, #3
 8010586:	600e      	str	r6, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0;  /*Invalid UTF-8 code*/
 8010588:	5d80      	ldrb	r0, [r0, r6]
 801058a:	f000 06c0 	and.w	r6, r0, #192	; 0xc0
 801058e:	2e80      	cmp	r6, #128	; 0x80
 8010590:	d1d4      	bne.n	801053c <lv_txt_utf8_next+0x4c>
            result += txt[*i] & 0x3F;
 8010592:	f000 063f 	and.w	r6, r0, #63	; 0x3f
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 8010596:	049b      	lsls	r3, r3, #18
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 8010598:	0320      	lsls	r0, r4, #12
            (*i)++;
 801059a:	3204      	adds	r2, #4
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 801059c:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 80105a0:	01ad      	lsls	r5, r5, #6
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 80105a2:	f400 307c 	and.w	r0, r0, #258048	; 0x3f000
            (*i)++;
 80105a6:	600a      	str	r2, [r1, #0]
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 80105a8:	f405 627c 	and.w	r2, r5, #4032	; 0xfc0
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 80105ac:	4303      	orrs	r3, r0
 80105ae:	4413      	add	r3, r2
            result += txt[*i] & 0x3F;
 80105b0:	18f0      	adds	r0, r6, r3
 80105b2:	e7a9      	b.n	8010508 <lv_txt_utf8_next+0x18>
            (*i)++;
 80105b4:	1c95      	adds	r5, r2, #2
 80105b6:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0;  /*Invalid UTF-8 code*/
 80105b8:	5d40      	ldrb	r0, [r0, r5]
 80105ba:	f000 05c0 	and.w	r5, r0, #192	; 0xc0
 80105be:	2d80      	cmp	r5, #128	; 0x80
 80105c0:	d1bc      	bne.n	801053c <lv_txt_utf8_next+0x4c>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 80105c2:	031b      	lsls	r3, r3, #12
            result += (txt[*i] & 0x3F);
 80105c4:	f000 053f 	and.w	r5, r0, #63	; 0x3f
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 80105c8:	01a0      	lsls	r0, r4, #6
            (*i)++;
 80105ca:	3203      	adds	r2, #3
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 80105cc:	b29b      	uxth	r3, r3
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 80105ce:	f400 607c 	and.w	r0, r0, #4032	; 0xfc0
            (*i)++;
 80105d2:	600a      	str	r2, [r1, #0]
 80105d4:	442b      	add	r3, r5
            result += (txt[*i] & 0x3F);
 80105d6:	4418      	add	r0, r3
 80105d8:	e796      	b.n	8010508 <lv_txt_utf8_next+0x18>
 80105da:	bf00      	nop

080105dc <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
 80105dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t i;
    uint32_t byte_cnt = 0;
    for(i = 0; i < utf8_id; i++) {
 80105e0:	b181      	cbz	r1, 8010604 <lv_txt_utf8_get_byte_id+0x28>
 80105e2:	2400      	movs	r4, #0
 80105e4:	460e      	mov	r6, r1
 80105e6:	4607      	mov	r7, r0
 80105e8:	f8df 801c 	ldr.w	r8, [pc, #28]	; 8010608 <lv_txt_utf8_get_byte_id+0x2c>
 80105ec:	4625      	mov	r5, r4
 80105ee:	3501      	adds	r5, #1
        byte_cnt += lv_txt_encoded_size(&txt[byte_cnt]);
 80105f0:	1938      	adds	r0, r7, r4
 80105f2:	f8d8 3000 	ldr.w	r3, [r8]
 80105f6:	4798      	blx	r3
    for(i = 0; i < utf8_id; i++) {
 80105f8:	42ae      	cmp	r6, r5
        byte_cnt += lv_txt_encoded_size(&txt[byte_cnt]);
 80105fa:	4404      	add	r4, r0
    for(i = 0; i < utf8_id; i++) {
 80105fc:	d1f7      	bne.n	80105ee <lv_txt_utf8_get_byte_id+0x12>
    }

    return byte_cnt;

}
 80105fe:	4620      	mov	r0, r4
 8010600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t byte_cnt = 0;
 8010604:	460c      	mov	r4, r1
    return byte_cnt;
 8010606:	e7fa      	b.n	80105fe <lv_txt_utf8_get_byte_id+0x22>
 8010608:	200000ac 	.word	0x200000ac

0801060c <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 801060c:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t i = 0;
 801060e:	2400      	movs	r4, #0
{
 8010610:	b083      	sub	sp, #12
    uint32_t i = 0;
 8010612:	9401      	str	r4, [sp, #4]
    uint32_t char_cnt = 0;

    while(i < byte_id) {
 8010614:	b169      	cbz	r1, 8010632 <lv_txt_utf8_get_char_id+0x26>
 8010616:	460d      	mov	r5, r1
 8010618:	4606      	mov	r6, r0
 801061a:	4f07      	ldr	r7, [pc, #28]	; (8010638 <lv_txt_utf8_get_char_id+0x2c>)
        lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	a901      	add	r1, sp, #4
 8010620:	4630      	mov	r0, r6
        char_cnt++;
 8010622:	3401      	adds	r4, #1
        lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 8010624:	4798      	blx	r3
    while(i < byte_id) {
 8010626:	9b01      	ldr	r3, [sp, #4]
 8010628:	42ab      	cmp	r3, r5
 801062a:	d3f7      	bcc.n	801061c <lv_txt_utf8_get_char_id+0x10>
    }

    return char_cnt;
}
 801062c:	4620      	mov	r0, r4
 801062e:	b003      	add	sp, #12
 8010630:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t char_cnt = 0;
 8010632:	460c      	mov	r4, r1
    return char_cnt;
 8010634:	e7fa      	b.n	801062c <lv_txt_utf8_get_char_id+0x20>
 8010636:	bf00      	nop
 8010638:	200000ac 	.word	0x200000ac

0801063c <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
 801063c:	b570      	push	{r4, r5, r6, lr}
#if LV_TXT_UTF8 == 0
    return strlen(txt);
#else
    uint32_t len = 0;
    uint32_t i = 0;
 801063e:	2400      	movs	r4, #0
{
 8010640:	b082      	sub	sp, #8

    while(txt[i] != '\0') {
 8010642:	7803      	ldrb	r3, [r0, #0]
    uint32_t i = 0;
 8010644:	9401      	str	r4, [sp, #4]
    while(txt[i] != '\0') {
 8010646:	b16b      	cbz	r3, 8010664 <lv_txt_utf8_get_length+0x28>
 8010648:	4605      	mov	r5, r0
 801064a:	4e07      	ldr	r6, [pc, #28]	; (8010668 <lv_txt_utf8_get_length+0x2c>)
        lv_txt_encoded_next(txt, &i);
 801064c:	6873      	ldr	r3, [r6, #4]
 801064e:	a901      	add	r1, sp, #4
 8010650:	4628      	mov	r0, r5
        len++;
 8010652:	3401      	adds	r4, #1
        lv_txt_encoded_next(txt, &i);
 8010654:	4798      	blx	r3
    while(txt[i] != '\0') {
 8010656:	9b01      	ldr	r3, [sp, #4]
 8010658:	5ceb      	ldrb	r3, [r5, r3]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d1f6      	bne.n	801064c <lv_txt_utf8_get_length+0x10>
    }

    return len;
#endif
}
 801065e:	4620      	mov	r0, r4
 8010660:	b002      	add	sp, #8
 8010662:	bd70      	pop	{r4, r5, r6, pc}
    uint32_t len = 0;
 8010664:	461c      	mov	r4, r3
    return len;
 8010666:	e7fa      	b.n	801065e <lv_txt_utf8_get_length+0x22>
 8010668:	200000ac 	.word	0x200000ac

0801066c <lv_txt_unicode_to_utf8>:
    if(letter_uni < 128) return letter_uni;
 801066c:	287f      	cmp	r0, #127	; 0x7f
 801066e:	d915      	bls.n	801069c <lv_txt_unicode_to_utf8+0x30>
    if(letter_uni < 0x0800) {
 8010670:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
{
 8010674:	b082      	sub	sp, #8
    if(letter_uni < 0x0800) {
 8010676:	d212      	bcs.n	801069e <lv_txt_unicode_to_utf8+0x32>
        bytes[0] = ((letter_uni >> 6)  & 0x1F) | 0xC0;
 8010678:	0983      	lsrs	r3, r0, #6
        bytes[1] = ((letter_uni >> 0)  & 0x3F) | 0x80;
 801067a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        bytes[2] = 0;
 801067e:	2200      	movs	r2, #0
        bytes[0] = ((letter_uni >> 6)  & 0x1F) | 0xC0;
 8010680:	f063 033f 	orn	r3, r3, #63	; 0x3f
        bytes[1] = ((letter_uni >> 0)  & 0x3F) | 0x80;
 8010684:	f060 007f 	orn	r0, r0, #127	; 0x7f
        bytes[2] = 0;
 8010688:	f88d 2006 	strb.w	r2, [sp, #6]
        bytes[0] = ((letter_uni >> 6)  & 0x1F) | 0xC0;
 801068c:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 0)  & 0x3F) | 0x80;
 8010690:	f88d 0005 	strb.w	r0, [sp, #5]
        bytes[3] = 0;
 8010694:	f88d 2007 	strb.w	r2, [sp, #7]
    return *res_p;
 8010698:	9801      	ldr	r0, [sp, #4]
}
 801069a:	b002      	add	sp, #8
 801069c:	4770      	bx	lr
    } else if(letter_uni < 0x010000) {
 801069e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80106a2:	d31a      	bcc.n	80106da <lv_txt_unicode_to_utf8+0x6e>
    } else if(letter_uni < 0x110000) {
 80106a4:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
 80106a8:	d2f6      	bcs.n	8010698 <lv_txt_unicode_to_utf8+0x2c>
        bytes[0] = ((letter_uni >> 18) & 0x07) | 0xF0;
 80106aa:	0c81      	lsrs	r1, r0, #18
        bytes[1] = ((letter_uni >> 12) & 0x3F) | 0x80;
 80106ac:	f3c0 3205 	ubfx	r2, r0, #12, #6
        bytes[2] = ((letter_uni >> 6)  & 0x3F) | 0x80;
 80106b0:	f3c0 1385 	ubfx	r3, r0, #6, #6
        bytes[3] = ((letter_uni >> 0)  & 0x3F) | 0x80;
 80106b4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        bytes[0] = ((letter_uni >> 18) & 0x07) | 0xF0;
 80106b8:	f061 010f 	orn	r1, r1, #15
        bytes[1] = ((letter_uni >> 12) & 0x3F) | 0x80;
 80106bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
        bytes[2] = ((letter_uni >> 6)  & 0x3F) | 0x80;
 80106c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
        bytes[3] = ((letter_uni >> 0)  & 0x3F) | 0x80;
 80106c4:	f060 007f 	orn	r0, r0, #127	; 0x7f
        bytes[0] = ((letter_uni >> 18) & 0x07) | 0xF0;
 80106c8:	f88d 1004 	strb.w	r1, [sp, #4]
        bytes[1] = ((letter_uni >> 12) & 0x3F) | 0x80;
 80106cc:	f88d 2005 	strb.w	r2, [sp, #5]
        bytes[2] = ((letter_uni >> 6)  & 0x3F) | 0x80;
 80106d0:	f88d 3006 	strb.w	r3, [sp, #6]
        bytes[3] = ((letter_uni >> 0)  & 0x3F) | 0x80;
 80106d4:	f88d 0007 	strb.w	r0, [sp, #7]
 80106d8:	e7de      	b.n	8010698 <lv_txt_unicode_to_utf8+0x2c>
        bytes[0] = ((letter_uni >> 12) & 0x0F) | 0xE0;
 80106da:	0b02      	lsrs	r2, r0, #12
        bytes[1] = ((letter_uni >> 6)  & 0x3F) | 0x80;
 80106dc:	f3c0 1385 	ubfx	r3, r0, #6, #6
        bytes[2] = ((letter_uni >> 0)  & 0x3F) | 0x80;
 80106e0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        bytes[3] = 0;
 80106e4:	2100      	movs	r1, #0
        bytes[0] = ((letter_uni >> 12) & 0x0F) | 0xE0;
 80106e6:	f062 021f 	orn	r2, r2, #31
        bytes[1] = ((letter_uni >> 6)  & 0x3F) | 0x80;
 80106ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
        bytes[2] = ((letter_uni >> 0)  & 0x3F) | 0x80;
 80106ee:	f060 007f 	orn	r0, r0, #127	; 0x7f
        bytes[3] = 0;
 80106f2:	f88d 1007 	strb.w	r1, [sp, #7]
        bytes[0] = ((letter_uni >> 12) & 0x0F) | 0xE0;
 80106f6:	f88d 2004 	strb.w	r2, [sp, #4]
        bytes[1] = ((letter_uni >> 6)  & 0x3F) | 0x80;
 80106fa:	f88d 3005 	strb.w	r3, [sp, #5]
        bytes[2] = ((letter_uni >> 0)  & 0x3F) | 0x80;
 80106fe:	f88d 0006 	strb.w	r0, [sp, #6]
 8010702:	e7c9      	b.n	8010698 <lv_txt_unicode_to_utf8+0x2c>

08010704 <lv_txt_utf8_conv_wc>:
    if((c & 0x80) != 0) {
 8010704:	0603      	lsls	r3, r0, #24
{
 8010706:	b082      	sub	sp, #8
    if((c & 0x80) != 0) {
 8010708:	d514      	bpl.n	8010734 <lv_txt_utf8_conv_wc+0x30>
        swapped = (c8[0] << 24) + (c8[1] << 16) + (c8[2] << 8) + (c8[3]);
 801070a:	f3c0 2207 	ubfx	r2, r0, #8, #8
 801070e:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8010712:	2304      	movs	r3, #4
 8010714:	0412      	lsls	r2, r2, #16
 8010716:	eb02 6200 	add.w	r2, r2, r0, lsl #24
 801071a:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 801071e:	eb02 6010 	add.w	r0, r2, r0, lsr #24
            if((swapped & 0xFF) == 0) swapped = (swapped >> 8); /*Ignore leading zeros (they were in the end originally)*/
 8010722:	f010 0fff 	tst.w	r0, #255	; 0xff
 8010726:	f103 33ff 	add.w	r3, r3, #4294967295
 801072a:	bf08      	it	eq
 801072c:	0a00      	lsreq	r0, r0, #8
        for(i = 0; i < 4; i++) {
 801072e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8010732:	d1f6      	bne.n	8010722 <lv_txt_utf8_conv_wc+0x1e>
}
 8010734:	b002      	add	sp, #8
 8010736:	4770      	bx	lr

08010738 <lv_txt_utf8_prev>:
{
 8010738:	b5f0      	push	{r4, r5, r6, r7, lr}
 801073a:	4606      	mov	r6, r0
    (*i)--;
 801073c:	6808      	ldr	r0, [r1, #0]
{
 801073e:	b083      	sub	sp, #12
 8010740:	460d      	mov	r5, r1
    (*i)--;
 8010742:	3801      	subs	r0, #1
 8010744:	2404      	movs	r4, #4
 8010746:	4f0c      	ldr	r7, [pc, #48]	; (8010778 <lv_txt_utf8_prev+0x40>)
 8010748:	6008      	str	r0, [r1, #0]
        c_size = lv_txt_encoded_size(&txt[*i]);
 801074a:	683b      	ldr	r3, [r7, #0]
 801074c:	4430      	add	r0, r6
 801074e:	4798      	blx	r3
 8010750:	1e63      	subs	r3, r4, #1
            if(*i != 0)(*i)--;
 8010752:	682a      	ldr	r2, [r5, #0]
        if(c_size == 0) {
 8010754:	b940      	cbnz	r0, 8010768 <lv_txt_utf8_prev+0x30>
            if(*i != 0)(*i)--;
 8010756:	1e50      	subs	r0, r2, #1
 8010758:	b11a      	cbz	r2, 8010762 <lv_txt_utf8_prev+0x2a>
        if(cnt >= 4) return 0;      /*No UTF-8 char found before the initial*/
 801075a:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
            if(*i != 0)(*i)--;
 801075e:	6028      	str	r0, [r5, #0]
        if(cnt >= 4) return 0;      /*No UTF-8 char found before the initial*/
 8010760:	d1f3      	bne.n	801074a <lv_txt_utf8_prev+0x12>
            else return 0;
 8010762:	2000      	movs	r0, #0
}
 8010764:	b003      	add	sp, #12
 8010766:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t i_tmp = *i;
 8010768:	a902      	add	r1, sp, #8
    uint32_t letter = lv_txt_encoded_next(txt, &i_tmp);   /*Character found, get it*/
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	4630      	mov	r0, r6
    uint32_t i_tmp = *i;
 801076e:	f841 2d04 	str.w	r2, [r1, #-4]!
    uint32_t letter = lv_txt_encoded_next(txt, &i_tmp);   /*Character found, get it*/
 8010772:	4798      	blx	r3
}
 8010774:	b003      	add	sp, #12
 8010776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010778:	200000ac 	.word	0x200000ac

0801077c <lv_txt_get_next_line>:
{
 801077c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010780:	b08b      	sub	sp, #44	; 0x2c
 8010782:	9205      	str	r2, [sp, #20]
 8010784:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
    if(font == NULL) return 0;
 8010788:	9101      	str	r1, [sp, #4]
 801078a:	2900      	cmp	r1, #0
 801078c:	f000 812b 	beq.w	80109e6 <lv_txt_get_next_line+0x26a>
 8010790:	461c      	mov	r4, r3
 8010792:	fab0 f380 	clz	r3, r0
 8010796:	4606      	mov	r6, r0
 8010798:	095b      	lsrs	r3, r3, #5
 801079a:	2b00      	cmp	r3, #0
 801079c:	f040 8123 	bne.w	80109e6 <lv_txt_get_next_line+0x26a>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 80107a0:	f017 0f02 	tst.w	r7, #2
 80107a4:	f643 71ff 	movw	r1, #16383	; 0x3fff
    while(txt[i] != '\0') {
 80107a8:	4618      	mov	r0, r3
    uint32_t i = 0;
 80107aa:	9308      	str	r3, [sp, #32]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 80107ac:	9304      	str	r3, [sp, #16]
    uint32_t n_char_since_last_break = 0; /* Used count word length of long words */
 80107ae:	4698      	mov	r8, r3
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 80107b0:	4623      	mov	r3, r4
 80107b2:	bf18      	it	ne
 80107b4:	460b      	movne	r3, r1
    lv_coord_t cur_w = 0;
 80107b6:	4605      	mov	r5, r0
        letter = lv_txt_encoded_next(txt, &i);
 80107b8:	f8df 9248 	ldr.w	r9, [pc, #584]	; 8010a04 <lv_txt_get_next_line+0x288>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 80107bc:	9303      	str	r3, [sp, #12]
    uint32_t last_break = NO_BREAK_FOUND;
 80107be:	f04f 33ff 	mov.w	r3, #4294967295
{
    uint8_t i;
    bool ret = false;

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 80107c2:	f8df b23c 	ldr.w	fp, [pc, #572]	; 8010a00 <lv_txt_get_next_line+0x284>
    lv_coord_t w_at_last_break = 0;
 80107c6:	9006      	str	r0, [sp, #24]
    uint32_t last_break = NO_BREAK_FOUND;
 80107c8:	9302      	str	r3, [sp, #8]
    while(txt[i] != '\0') {
 80107ca:	5c33      	ldrb	r3, [r6, r0]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d03e      	beq.n	801084e <lv_txt_get_next_line+0xd2>
        letter = lv_txt_encoded_next(txt, &i);
 80107d0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80107d4:	4630      	mov	r0, r6
 80107d6:	a908      	add	r1, sp, #32
 80107d8:	4798      	blx	r3
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 80107da:	f017 0a01 	ands.w	sl, r7, #1
        letter = lv_txt_encoded_next(txt, &i);
 80107de:	4604      	mov	r4, r0
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 80107e0:	d004      	beq.n	80107ec <lv_txt_get_next_line+0x70>
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 80107e2:	2823      	cmp	r0, #35	; 0x23
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 80107e4:	9b04      	ldr	r3, [sp, #16]
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 80107e6:	d042      	beq.n	801086e <lv_txt_get_next_line+0xf2>
    if(*state == LV_TXT_CMD_STATE_PAR) {
 80107e8:	2b01      	cmp	r3, #1
 80107ea:	d04c      	beq.n	8010886 <lv_txt_get_next_line+0x10a>
        if(letter == '\n' || letter == '\r') {
 80107ec:	f1a4 020d 	sub.w	r2, r4, #13
 80107f0:	2c0a      	cmp	r4, #10
 80107f2:	fab2 f282 	clz	r2, r2
 80107f6:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80107fa:	f000 80c6 	beq.w	801098a <lv_txt_get_next_line+0x20e>
 80107fe:	2a00      	cmp	r2, #0
 8010800:	f040 80c3 	bne.w	801098a <lv_txt_get_next_line+0x20e>
            letter_width = lv_font_get_width(font, letter);
 8010804:	4621      	mov	r1, r4
 8010806:	9801      	ldr	r0, [sp, #4]
 8010808:	f7ff f9cc 	bl	800fba4 <lv_font_get_width>
            cur_w += letter_width; 
 801080c:	4405      	add	r5, r0
            if(cur_w > max_width) {
 801080e:	9b03      	ldr	r3, [sp, #12]
            n_char_since_last_break++;
 8010810:	f108 0201 	add.w	r2, r8, #1
            cur_w += letter_width; 
 8010814:	fa1f fe85 	uxth.w	lr, r5
            letter_width = lv_font_get_width(font, letter);
 8010818:	b200      	sxth	r0, r0
            cur_w += letter_width; 
 801081a:	fa0f f58e 	sxth.w	r5, lr
            if(cur_w > max_width) {
 801081e:	42ab      	cmp	r3, r5
 8010820:	db50      	blt.n	80108c4 <lv_txt_get_next_line+0x148>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 8010822:	2c20      	cmp	r4, #32
 8010824:	d017      	beq.n	8010856 <lv_txt_get_next_line+0xda>
            if(cur_w > max_width) {
 8010826:	2301      	movs	r3, #1
 8010828:	212c      	movs	r1, #44	; 0x2c
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 801082a:	3301      	adds	r3, #1
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 801082c:	428c      	cmp	r4, r1
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 801082e:	b2db      	uxtb	r3, r3
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 8010830:	d011      	beq.n	8010856 <lv_txt_get_next_line+0xda>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 8010832:	f81b 1003 	ldrb.w	r1, [fp, r3]
 8010836:	2900      	cmp	r1, #0
 8010838:	d1f7      	bne.n	801082a <lv_txt_get_next_line+0xae>
        if(letter_width > 0) {
 801083a:	b1e8      	cbz	r0, 8010878 <lv_txt_get_next_line+0xfc>
 801083c:	9b05      	ldr	r3, [sp, #20]
 801083e:	4690      	mov	r8, r2
 8010840:	9808      	ldr	r0, [sp, #32]
 8010842:	eb0e 0503 	add.w	r5, lr, r3
    while(txt[i] != '\0') {
 8010846:	5c33      	ldrb	r3, [r6, r0]
 8010848:	b22d      	sxth	r5, r5
 801084a:	2b00      	cmp	r3, #0
 801084c:	d1c0      	bne.n	80107d0 <lv_txt_get_next_line+0x54>
    return i;
 801084e:	b280      	uxth	r0, r0
}
 8010850:	b00b      	add	sp, #44	; 0x2c
 8010852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                last_break = i; /*Save the first char index  after break*/
 8010856:	9b08      	ldr	r3, [sp, #32]
 8010858:	9302      	str	r3, [sp, #8]
                if(letter_width > 0) {
 801085a:	b180      	cbz	r0, 801087e <lv_txt_get_next_line+0x102>
                    w_at_last_break += letter_space;
 801085c:	9b05      	ldr	r3, [sp, #20]
                n_char_since_last_break = 0;
 801085e:	f04f 0800 	mov.w	r8, #0
                    w_at_last_break += letter_space;
 8010862:	9802      	ldr	r0, [sp, #8]
 8010864:	eb0e 0503 	add.w	r5, lr, r3
 8010868:	b22d      	sxth	r5, r5
 801086a:	9506      	str	r5, [sp, #24]
 801086c:	e7ad      	b.n	80107ca <lv_txt_get_next_line+0x4e>
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 801086e:	b983      	cbnz	r3, 8010892 <lv_txt_get_next_line+0x116>
 8010870:	2301      	movs	r3, #1
 8010872:	9808      	ldr	r0, [sp, #32]
 8010874:	9304      	str	r3, [sp, #16]
 8010876:	e7a8      	b.n	80107ca <lv_txt_get_next_line+0x4e>
        if(letter_width > 0) {
 8010878:	4690      	mov	r8, r2
 801087a:	9808      	ldr	r0, [sp, #32]
 801087c:	e7a5      	b.n	80107ca <lv_txt_get_next_line+0x4e>
                n_char_since_last_break = 0;
 801087e:	4680      	mov	r8, r0
 8010880:	9506      	str	r5, [sp, #24]
 8010882:	4618      	mov	r0, r3
 8010884:	e7a1      	b.n	80107ca <lv_txt_get_next_line+0x4e>
        if(c == ' ') {
 8010886:	2c20      	cmp	r4, #32
 8010888:	9808      	ldr	r0, [sp, #32]
 801088a:	d19e      	bne.n	80107ca <lv_txt_get_next_line+0x4e>
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 801088c:	2302      	movs	r3, #2
 801088e:	9304      	str	r3, [sp, #16]
 8010890:	e79b      	b.n	80107ca <lv_txt_get_next_line+0x4e>
            if(lv_txt_is_cmd(&cmd_state, letter) != false) {
 8010892:	9b04      	ldr	r3, [sp, #16]
 8010894:	2b01      	cmp	r3, #1
 8010896:	d003      	beq.n	80108a0 <lv_txt_get_next_line+0x124>
 8010898:	2300      	movs	r3, #0
 801089a:	9808      	ldr	r0, [sp, #32]
 801089c:	9304      	str	r3, [sp, #16]
 801089e:	e794      	b.n	80107ca <lv_txt_get_next_line+0x4e>
            letter_width = lv_font_get_width(font, letter);
 80108a0:	4601      	mov	r1, r0
 80108a2:	9801      	ldr	r0, [sp, #4]
 80108a4:	f7ff f97e 	bl	800fba4 <lv_font_get_width>
            cur_w += letter_width; 
 80108a8:	4405      	add	r5, r0
            if(cur_w > max_width) {
 80108aa:	9b03      	ldr	r3, [sp, #12]
            n_char_since_last_break++;
 80108ac:	f108 0201 	add.w	r2, r8, #1
            cur_w += letter_width; 
 80108b0:	fa1f fe85 	uxth.w	lr, r5
            letter_width = lv_font_get_width(font, letter);
 80108b4:	b200      	sxth	r0, r0
            cur_w += letter_width; 
 80108b6:	fa0f f58e 	sxth.w	r5, lr
            if(cur_w > max_width) {
 80108ba:	42ab      	cmp	r3, r5
 80108bc:	f04f 0300 	mov.w	r3, #0
 80108c0:	9304      	str	r3, [sp, #16]
 80108c2:	dab0      	bge.n	8010826 <lv_txt_get_next_line+0xaa>
                if( last_break != NO_BREAK_FOUND ) {
 80108c4:	9902      	ldr	r1, [sp, #8]
 80108c6:	460b      	mov	r3, r1
 80108c8:	3101      	adds	r1, #1
 80108ca:	d050      	beq.n	801096e <lv_txt_get_next_line+0x1f2>
                    if(  n_char_since_last_break <= LV_TXT_LINE_BREAK_LONG_PRE_MIN_LEN ) {
 80108cc:	2a03      	cmp	r2, #3
 80108ce:	d971      	bls.n	80109b4 <lv_txt_get_next_line+0x238>
                        cur_w -= w_at_last_break + letter_space; /*ignore the first letter_space after the break char */
 80108d0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
                        uint32_t i_tmp = i;
 80108d4:	ad0a      	add	r5, sp, #40	; 0x28
 80108d6:	4693      	mov	fp, r2
 80108d8:	f8cd 8014 	str.w	r8, [sp, #20]
                        cur_w -= w_at_last_break + letter_space; /*ignore the first letter_space after the break char */
 80108dc:	4619      	mov	r1, r3
 80108de:	9307      	str	r3, [sp, #28]
                        uint32_t i_tmp = i;
 80108e0:	9b08      	ldr	r3, [sp, #32]
                        cur_w -= w_at_last_break + letter_space; /*ignore the first letter_space after the break char */
 80108e2:	ebae 0401 	sub.w	r4, lr, r1
 80108e6:	9906      	ldr	r1, [sp, #24]
                        uint32_t i_tmp = i;
 80108e8:	f845 3d04 	str.w	r3, [r5, #-4]!
 80108ec:	462a      	mov	r2, r5
                        cur_w -= w_at_last_break + letter_space; /*ignore the first letter_space after the break char */
 80108ee:	1a64      	subs	r4, r4, r1
 80108f0:	4655      	mov	r5, sl
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 80108f2:	4f43      	ldr	r7, [pc, #268]	; (8010a00 <lv_txt_get_next_line+0x284>)
 80108f4:	4692      	mov	sl, r2
                        cur_w -= w_at_last_break + letter_space; /*ignore the first letter_space after the break char */
 80108f6:	b224      	sxth	r4, r4
 80108f8:	f8dd 8010 	ldr.w	r8, [sp, #16]
                        while(txt[i_tmp] != '\0') {
 80108fc:	5cf3      	ldrb	r3, [r6, r3]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d052      	beq.n	80109a8 <lv_txt_get_next_line+0x22c>
                            letter = lv_txt_encoded_next(txt, &i_tmp);
 8010902:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8010906:	4651      	mov	r1, sl
 8010908:	4630      	mov	r0, r6
 801090a:	4798      	blx	r3
                            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 801090c:	b125      	cbz	r5, 8010918 <lv_txt_get_next_line+0x19c>
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 801090e:	2823      	cmp	r0, #35	; 0x23
 8010910:	d060      	beq.n	80109d4 <lv_txt_get_next_line+0x258>
    if(*state == LV_TXT_CMD_STATE_PAR) {
 8010912:	f1b8 0f01 	cmp.w	r8, #1
 8010916:	d06d      	beq.n	80109f4 <lv_txt_get_next_line+0x278>
                            if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
 8010918:	280a      	cmp	r0, #10
 801091a:	d045      	beq.n	80109a8 <lv_txt_get_next_line+0x22c>
 801091c:	280d      	cmp	r0, #13
 801091e:	d043      	beq.n	80109a8 <lv_txt_get_next_line+0x22c>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 8010920:	2820      	cmp	r0, #32
 8010922:	d041      	beq.n	80109a8 <lv_txt_get_next_line+0x22c>
 8010924:	2301      	movs	r3, #1
 8010926:	222c      	movs	r2, #44	; 0x2c
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 8010928:	3301      	adds	r3, #1
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 801092a:	4290      	cmp	r0, r2
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 801092c:	b2db      	uxtb	r3, r3
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 801092e:	d03b      	beq.n	80109a8 <lv_txt_get_next_line+0x22c>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 8010930:	5cfa      	ldrb	r2, [r7, r3]
 8010932:	2a00      	cmp	r2, #0
 8010934:	d1f8      	bne.n	8010928 <lv_txt_get_next_line+0x1ac>
                            lv_coord_t letter_width2 = lv_font_get_width(font, letter);
 8010936:	4601      	mov	r1, r0
 8010938:	9801      	ldr	r0, [sp, #4]
 801093a:	f7ff f933 	bl	800fba4 <lv_font_get_width>
                            cur_w += letter_width2;
 801093e:	1823      	adds	r3, r4, r0
                            if(cur_w > max_width) {
 8010940:	9a03      	ldr	r2, [sp, #12]
                            n_char_since_last_break++;
 8010942:	f10b 0b01 	add.w	fp, fp, #1
                            cur_w += letter_width2;
 8010946:	b29b      	uxth	r3, r3
 8010948:	b21c      	sxth	r4, r3
                            if(cur_w > max_width) {
 801094a:	42a2      	cmp	r2, r4
 801094c:	db0f      	blt.n	801096e <lv_txt_get_next_line+0x1f2>
                            if(letter_width2 > 0){
 801094e:	b110      	cbz	r0, 8010956 <lv_txt_get_next_line+0x1da>
                                cur_w += letter_space;
 8010950:	9a07      	ldr	r2, [sp, #28]
 8010952:	4413      	add	r3, r2
 8010954:	b21c      	sxth	r4, r3
 8010956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010958:	e7d0      	b.n	80108fc <lv_txt_get_next_line+0x180>
 801095a:	f8cd b004 	str.w	fp, [sp, #4]
                                lv_txt_encoded_prev(txt, &i);
 801095e:	a908      	add	r1, sp, #32
 8010960:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8010964:	4630      	mov	r0, r6
 8010966:	4798      	blx	r3
                                for(char_remain=n_char_since_last_break - n_char_fit;
 8010968:	9a01      	ldr	r2, [sp, #4]
 801096a:	4542      	cmp	r2, r8
 801096c:	d104      	bne.n	8010978 <lv_txt_get_next_line+0x1fc>
                    lv_txt_encoded_prev(txt, &i);
 801096e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8010972:	a908      	add	r1, sp, #32
 8010974:	4630      	mov	r0, r6
 8010976:	4798      	blx	r3
 8010978:	9b08      	ldr	r3, [sp, #32]
 801097a:	9302      	str	r3, [sp, #8]
                if(i == 0) lv_txt_encoded_next(txt, &i);
 801097c:	9b02      	ldr	r3, [sp, #8]
 801097e:	b1eb      	cbz	r3, 80109bc <lv_txt_get_next_line+0x240>
                return i;
 8010980:	f8bd 0008 	ldrh.w	r0, [sp, #8]
}
 8010984:	b00b      	add	sp, #44	; 0x2c
 8010986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            uint32_t i_tmp = i;
 801098a:	9c08      	ldr	r4, [sp, #32]
 801098c:	a90a      	add	r1, sp, #40	; 0x28
            uint32_t letter_next = lv_txt_encoded_next(txt, &i_tmp);
 801098e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8010992:	4630      	mov	r0, r6
            uint32_t i_tmp = i;
 8010994:	f841 4d04 	str.w	r4, [r1, #-4]!
 8010998:	9201      	str	r2, [sp, #4]
            uint32_t letter_next = lv_txt_encoded_next(txt, &i_tmp);
 801099a:	4798      	blx	r3
            if(letter == '\r' &&  letter_next == '\n') i = i_tmp;
 801099c:	280a      	cmp	r0, #10
 801099e:	d117      	bne.n	80109d0 <lv_txt_get_next_line+0x254>
 80109a0:	9a01      	ldr	r2, [sp, #4]
 80109a2:	b1aa      	cbz	r2, 80109d0 <lv_txt_get_next_line+0x254>
 80109a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80109a6:	e752      	b.n	801084e <lv_txt_get_next_line+0xd2>
 80109a8:	465a      	mov	r2, fp
 80109aa:	f8dd 8014 	ldr.w	r8, [sp, #20]
                            if(n_char_since_last_break >= LV_TXT_LINE_BREAK_LONG_LEN) {
 80109ae:	2a0b      	cmp	r2, #11
 80109b0:	d8d3      	bhi.n	801095a <lv_txt_get_next_line+0x1de>
                                i = last_break;
 80109b2:	9b02      	ldr	r3, [sp, #8]
 80109b4:	9308      	str	r3, [sp, #32]
                if(i == 0) lv_txt_encoded_next(txt, &i);
 80109b6:	9b02      	ldr	r3, [sp, #8]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d1e1      	bne.n	8010980 <lv_txt_get_next_line+0x204>
 80109bc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80109c0:	a908      	add	r1, sp, #32
 80109c2:	4630      	mov	r0, r6
 80109c4:	4798      	blx	r3
 80109c6:	9b08      	ldr	r3, [sp, #32]
 80109c8:	9302      	str	r3, [sp, #8]
                return i;
 80109ca:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 80109ce:	e7d9      	b.n	8010984 <lv_txt_get_next_line+0x208>
 80109d0:	9808      	ldr	r0, [sp, #32]
 80109d2:	e73c      	b.n	801084e <lv_txt_get_next_line+0xd2>
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 80109d4:	f1b8 0f00 	cmp.w	r8, #0
 80109d8:	d009      	beq.n	80109ee <lv_txt_get_next_line+0x272>
                                if(lv_txt_is_cmd(&cmd_state, letter) != false) {
 80109da:	f1b8 0f01 	cmp.w	r8, #1
 80109de:	f04f 0800 	mov.w	r8, #0
 80109e2:	d1b8      	bne.n	8010956 <lv_txt_get_next_line+0x1da>
 80109e4:	e79e      	b.n	8010924 <lv_txt_get_next_line+0x1a8>
    if(font == NULL) return 0;
 80109e6:	2000      	movs	r0, #0
}
 80109e8:	b00b      	add	sp, #44	; 0x2c
 80109ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 80109ee:	f04f 0801 	mov.w	r8, #1
 80109f2:	e7b0      	b.n	8010956 <lv_txt_get_next_line+0x1da>
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 80109f4:	2820      	cmp	r0, #32
 80109f6:	bf08      	it	eq
 80109f8:	f04f 0802 	moveq.w	r8, #2
 80109fc:	e7ab      	b.n	8010956 <lv_txt_get_next_line+0x1da>
 80109fe:	bf00      	nop
 8010a00:	0808ba4c 	.word	0x0808ba4c
 8010a04:	200000ac 	.word	0x200000ac

08010a08 <lv_txt_get_width>:
{
 8010a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a0c:	b085      	sub	sp, #20
 8010a0e:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
    if(font == NULL) return 0;
 8010a12:	2a00      	cmp	r2, #0
 8010a14:	d03f      	beq.n	8010a96 <lv_txt_get_width+0x8e>
 8010a16:	fab0 f580 	clz	r5, r0
 8010a1a:	096d      	lsrs	r5, r5, #5
 8010a1c:	2d00      	cmp	r5, #0
 8010a1e:	d13a      	bne.n	8010a96 <lv_txt_get_width+0x8e>
    uint32_t i = 0;
 8010a20:	9503      	str	r5, [sp, #12]
    if(length != 0) {
 8010a22:	2900      	cmp	r1, #0
 8010a24:	d037      	beq.n	8010a96 <lv_txt_get_width+0x8e>
 8010a26:	4617      	mov	r7, r2
 8010a28:	9301      	str	r3, [sp, #4]
 8010a2a:	4688      	mov	r8, r1
 8010a2c:	4606      	mov	r6, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8010a2e:	f009 0901 	and.w	r9, r9, #1
 8010a32:	f8df a078 	ldr.w	sl, [pc, #120]	; 8010aac <lv_txt_get_width+0xa4>
    if(length != 0) {
 8010a36:	462c      	mov	r4, r5
 8010a38:	e011      	b.n	8010a5e <lv_txt_get_width+0x56>
    if(*state == LV_TXT_CMD_STATE_PAR) {
 8010a3a:	2d01      	cmp	r5, #1
 8010a3c:	d032      	beq.n	8010aa4 <lv_txt_get_width+0x9c>
            lv_coord_t char_width = lv_font_get_width(font, letter);
 8010a3e:	4659      	mov	r1, fp
 8010a40:	4638      	mov	r0, r7
 8010a42:	f7ff f8af 	bl	800fba4 <lv_font_get_width>
            if(char_width > 0){
 8010a46:	b138      	cbz	r0, 8010a58 <lv_txt_get_width+0x50>
                width += lv_font_get_width(font, letter);
 8010a48:	4659      	mov	r1, fp
 8010a4a:	4638      	mov	r0, r7
 8010a4c:	f7ff f8aa 	bl	800fba4 <lv_font_get_width>
                width += letter_space;
 8010a50:	9b01      	ldr	r3, [sp, #4]
 8010a52:	441c      	add	r4, r3
 8010a54:	4404      	add	r4, r0
 8010a56:	b224      	sxth	r4, r4
        while(i< length){
 8010a58:	9b03      	ldr	r3, [sp, #12]
 8010a5a:	4543      	cmp	r3, r8
 8010a5c:	d212      	bcs.n	8010a84 <lv_txt_get_width+0x7c>
            letter = lv_txt_encoded_next(txt, &i);
 8010a5e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8010a62:	a903      	add	r1, sp, #12
 8010a64:	4630      	mov	r0, r6
 8010a66:	4798      	blx	r3
 8010a68:	4683      	mov	fp, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8010a6a:	f1b9 0f00 	cmp.w	r9, #0
 8010a6e:	d0e6      	beq.n	8010a3e <lv_txt_get_width+0x36>
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8010a70:	2823      	cmp	r0, #35	; 0x23
 8010a72:	d1e2      	bne.n	8010a3a <lv_txt_get_width+0x32>
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 8010a74:	b1a5      	cbz	r5, 8010aa0 <lv_txt_get_width+0x98>
                if(lv_txt_is_cmd(&cmd_state, letter) != false) {
 8010a76:	2d01      	cmp	r5, #1
 8010a78:	f04f 0500 	mov.w	r5, #0
 8010a7c:	d0df      	beq.n	8010a3e <lv_txt_get_width+0x36>
        while(i< length){
 8010a7e:	9b03      	ldr	r3, [sp, #12]
 8010a80:	4543      	cmp	r3, r8
 8010a82:	d3ec      	bcc.n	8010a5e <lv_txt_get_width+0x56>
        if(width > 0) {
 8010a84:	2c00      	cmp	r4, #0
 8010a86:	dd07      	ble.n	8010a98 <lv_txt_get_width+0x90>
            width -= letter_space;  /*Trim the last letter space. Important if the text is center aligned */
 8010a88:	9b01      	ldr	r3, [sp, #4]
 8010a8a:	1ae4      	subs	r4, r4, r3
 8010a8c:	b224      	sxth	r4, r4
}
 8010a8e:	4620      	mov	r0, r4
 8010a90:	b005      	add	sp, #20
 8010a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(font == NULL) return 0;
 8010a96:	2400      	movs	r4, #0
}
 8010a98:	4620      	mov	r0, r4
 8010a9a:	b005      	add	sp, #20
 8010a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 8010aa0:	2501      	movs	r5, #1
 8010aa2:	e7d9      	b.n	8010a58 <lv_txt_get_width+0x50>
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 8010aa4:	2820      	cmp	r0, #32
 8010aa6:	bf08      	it	eq
 8010aa8:	2502      	moveq	r5, #2
 8010aaa:	e7d5      	b.n	8010a58 <lv_txt_get_width+0x50>
 8010aac:	200000ac 	.word	0x200000ac

08010ab0 <lv_txt_get_size>:
{
 8010ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_res->x = 0;
 8010ab4:	2400      	movs	r4, #0
{
 8010ab6:	b087      	sub	sp, #28
    size_res->x = 0;
 8010ab8:	8004      	strh	r4, [r0, #0]
    size_res->y = 0;
 8010aba:	8044      	strh	r4, [r0, #2]
{
 8010abc:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
 8010ac0:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8010ac4:	9404      	str	r4, [sp, #16]
 8010ac6:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    if(font == NULL) return;
 8010aca:	2a00      	cmp	r2, #0
 8010acc:	d048      	beq.n	8010b60 <lv_txt_get_size+0xb0>
 8010ace:	fab1 f581 	clz	r5, r1
 8010ad2:	096d      	lsrs	r5, r5, #5
 8010ad4:	2d00      	cmp	r5, #0
 8010ad6:	d143      	bne.n	8010b60 <lv_txt_get_size+0xb0>
 8010ad8:	4690      	mov	r8, r2
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8010ada:	f01a 0f02 	tst.w	sl, #2
 8010ade:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8010ae2:	4699      	mov	r9, r3
    while(text[line_start] != '\0') {
 8010ae4:	780b      	ldrb	r3, [r1, #0]
 8010ae6:	4626      	mov	r6, r4
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8010ae8:	bf18      	it	ne
 8010aea:	4693      	movne	fp, r2
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline uint8_t lv_font_get_height(const lv_font_t * font_p)
{
    return font_p->h_px;
 8010aec:	f898 2020 	ldrb.w	r2, [r8, #32]
 8010af0:	4604      	mov	r4, r0
 8010af2:	9205      	str	r2, [sp, #20]
    while(text[line_start] != '\0') {
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d036      	beq.n	8010b66 <lv_txt_get_size+0xb6>
 8010af8:	4633      	mov	r3, r6
 8010afa:	4657      	mov	r7, sl
 8010afc:	460e      	mov	r6, r1
 8010afe:	468a      	mov	sl, r1
 8010b00:	4413      	add	r3, r2
 8010b02:	b29b      	uxth	r3, r3
 8010b04:	9303      	str	r3, [sp, #12]
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 8010b06:	465b      	mov	r3, fp
 8010b08:	464a      	mov	r2, r9
 8010b0a:	4641      	mov	r1, r8
 8010b0c:	4630      	mov	r0, r6
 8010b0e:	9700      	str	r7, [sp, #0]
 8010b10:	f7ff fe34 	bl	801077c <lv_txt_get_next_line>
        size_res->y += line_space;
 8010b14:	8863      	ldrh	r3, [r4, #2]
 8010b16:	9a03      	ldr	r2, [sp, #12]
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 8010b18:	4686      	mov	lr, r0
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start,
 8010b1a:	4630      	mov	r0, r6
 8010b1c:	9700      	str	r7, [sp, #0]
        size_res->y += line_space;
 8010b1e:	18d6      	adds	r6, r2, r3
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start,
 8010b20:	4671      	mov	r1, lr
 8010b22:	464b      	mov	r3, r9
 8010b24:	4642      	mov	r2, r8
        size_res->y += line_space;
 8010b26:	8066      	strh	r6, [r4, #2]
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 8010b28:	4475      	add	r5, lr
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start,
 8010b2a:	f7ff ff6d 	bl	8010a08 <lv_txt_get_width>
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
 8010b2e:	f9b4 3000 	ldrsh.w	r3, [r4]
    while(text[line_start] != '\0') {
 8010b32:	eb0a 0605 	add.w	r6, sl, r5
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
 8010b36:	4298      	cmp	r0, r3
 8010b38:	bfb8      	it	lt
 8010b3a:	4618      	movlt	r0, r3
 8010b3c:	8020      	strh	r0, [r4, #0]
    while(text[line_start] != '\0') {
 8010b3e:	f81a 3005 	ldrb.w	r3, [sl, r5]
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d1df      	bne.n	8010b06 <lv_txt_get_size+0x56>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 8010b46:	b12d      	cbz	r5, 8010b54 <lv_txt_get_size+0xa4>
 8010b48:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010b4c:	2b0a      	cmp	r3, #10
 8010b4e:	d010      	beq.n	8010b72 <lv_txt_get_size+0xc2>
 8010b50:	2b0d      	cmp	r3, #13
 8010b52:	d00e      	beq.n	8010b72 <lv_txt_get_size+0xc2>
 8010b54:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    if(size_res->y == 0) size_res->y = letter_height;
 8010b58:	b12b      	cbz	r3, 8010b66 <lv_txt_get_size+0xb6>
    else size_res->y -= line_space;
 8010b5a:	9a04      	ldr	r2, [sp, #16]
 8010b5c:	1a9b      	subs	r3, r3, r2
 8010b5e:	8063      	strh	r3, [r4, #2]
}
 8010b60:	b007      	add	sp, #28
 8010b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(size_res->y == 0) size_res->y = letter_height;
 8010b66:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8010b6a:	8063      	strh	r3, [r4, #2]
}
 8010b6c:	b007      	add	sp, #28
 8010b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        size_res->y += letter_height + line_space;
 8010b72:	8863      	ldrh	r3, [r4, #2]
 8010b74:	9a03      	ldr	r2, [sp, #12]
 8010b76:	441a      	add	r2, r3
 8010b78:	b213      	sxth	r3, r2
 8010b7a:	8063      	strh	r3, [r4, #2]
    if(size_res->y == 0) size_res->y = letter_height;
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d1ec      	bne.n	8010b5a <lv_txt_get_size+0xaa>
 8010b80:	e7f1      	b.n	8010b66 <lv_txt_get_size+0xb6>
 8010b82:	bf00      	nop

08010b84 <lv_txt_is_cmd>:
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8010b84:	2923      	cmp	r1, #35	; 0x23
{
 8010b86:	4602      	mov	r2, r0
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 8010b88:	7803      	ldrb	r3, [r0, #0]
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8010b8a:	d009      	beq.n	8010ba0 <lv_txt_is_cmd+0x1c>
    if(*state == LV_TXT_CMD_STATE_PAR) {
 8010b8c:	2b01      	cmp	r3, #1
 8010b8e:	d001      	beq.n	8010b94 <lv_txt_is_cmd+0x10>
    bool ret = false;
 8010b90:	2000      	movs	r0, #0
}
 8010b92:	4770      	bx	lr
        if(c == ' ') {
 8010b94:	2920      	cmp	r1, #32
 8010b96:	d110      	bne.n	8010bba <lv_txt_is_cmd+0x36>
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 8010b98:	2102      	movs	r1, #2
        ret = true;
 8010b9a:	4618      	mov	r0, r3
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 8010b9c:	7011      	strb	r1, [r2, #0]
 8010b9e:	4770      	bx	lr
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 8010ba0:	b13b      	cbz	r3, 8010bb2 <lv_txt_is_cmd+0x2e>
        } else if(*state == LV_TXT_CMD_STATE_PAR) { /*Other start char in parameter is escaped cmd. char */
 8010ba2:	2b01      	cmp	r3, #1
 8010ba4:	d00b      	beq.n	8010bbe <lv_txt_is_cmd+0x3a>
        } else if(*state == LV_TXT_CMD_STATE_IN) { /*Command end */
 8010ba6:	2b02      	cmp	r3, #2
 8010ba8:	d1f2      	bne.n	8010b90 <lv_txt_is_cmd+0xc>
            *state = LV_TXT_CMD_STATE_WAIT;
 8010baa:	2300      	movs	r3, #0
            ret = true;
 8010bac:	2001      	movs	r0, #1
            *state = LV_TXT_CMD_STATE_WAIT;
 8010bae:	7013      	strb	r3, [r2, #0]
 8010bb0:	4770      	bx	lr
            *state = LV_TXT_CMD_STATE_PAR;
 8010bb2:	2301      	movs	r3, #1
 8010bb4:	7003      	strb	r3, [r0, #0]
        ret = true;
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	4770      	bx	lr
 8010bba:	4618      	mov	r0, r3
 8010bbc:	4770      	bx	lr
            *state = LV_TXT_CMD_STATE_WAIT;
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	7003      	strb	r3, [r0, #0]
    bool ret = false;
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	4770      	bx	lr
 8010bc6:	bf00      	nop

08010bc8 <lv_txt_ins>:
{
 8010bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bcc:	4617      	mov	r7, r2
 8010bce:	460c      	mov	r4, r1
 8010bd0:	4606      	mov	r6, r0
    uint32_t old_len = strlen(txt_buf);
 8010bd2:	f7ef fb23 	bl	800021c <strlen>
 8010bd6:	4605      	mov	r5, r0
    uint32_t ins_len = strlen(ins_txt);
 8010bd8:	4638      	mov	r0, r7
 8010bda:	f7ef fb1f 	bl	800021c <strlen>
    pos = lv_txt_encoded_get_byte_id(txt_buf, pos);   /*Convert to byte index instead of letter index*/
 8010bde:	4b0e      	ldr	r3, [pc, #56]	; (8010c18 <lv_txt_ins+0x50>)
    uint32_t ins_len = strlen(ins_txt);
 8010be0:	4680      	mov	r8, r0
    pos = lv_txt_encoded_get_byte_id(txt_buf, pos);   /*Convert to byte index instead of letter index*/
 8010be2:	4621      	mov	r1, r4
 8010be4:	4630      	mov	r0, r6
 8010be6:	68db      	ldr	r3, [r3, #12]
 8010be8:	4798      	blx	r3
    uint32_t new_len = ins_len + old_len;
 8010bea:	eb05 0408 	add.w	r4, r5, r8
    for(i = new_len; i >= pos + ins_len; i--) {
 8010bee:	eb08 0e00 	add.w	lr, r8, r0
 8010bf2:	4574      	cmp	r4, lr
 8010bf4:	d308      	bcc.n	8010c08 <lv_txt_ins+0x40>
 8010bf6:	1971      	adds	r1, r6, r5
 8010bf8:	1933      	adds	r3, r6, r4
        txt_buf[i] = txt_buf[i - ins_len];
 8010bfa:	f811 4901 	ldrb.w	r4, [r1], #-1
 8010bfe:	f803 4901 	strb.w	r4, [r3], #-1
    for(i = new_len; i >= pos + ins_len; i--) {
 8010c02:	1b9c      	subs	r4, r3, r6
 8010c04:	45a6      	cmp	lr, r4
 8010c06:	d9f8      	bls.n	8010bfa <lv_txt_ins+0x32>
    memcpy(txt_buf + pos, ins_txt, ins_len);
 8010c08:	4642      	mov	r2, r8
 8010c0a:	4639      	mov	r1, r7
 8010c0c:	4430      	add	r0, r6
}
 8010c0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    memcpy(txt_buf + pos, ins_txt, ins_len);
 8010c12:	f008 bd55 	b.w	80196c0 <memcpy>
 8010c16:	bf00      	nop
 8010c18:	200000ac 	.word	0x200000ac

08010c1c <lv_txt_cut>:
{
 8010c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c20:	460c      	mov	r4, r1
 8010c22:	4605      	mov	r5, r0
    pos = lv_txt_encoded_get_byte_id(txt, pos);   /*Convert to byte index instead of letter index*/
 8010c24:	4e0e      	ldr	r6, [pc, #56]	; (8010c60 <lv_txt_cut+0x44>)
{
 8010c26:	4690      	mov	r8, r2
    uint32_t old_len = strlen(txt);
 8010c28:	f7ef faf8 	bl	800021c <strlen>
    pos = lv_txt_encoded_get_byte_id(txt, pos);   /*Convert to byte index instead of letter index*/
 8010c2c:	4621      	mov	r1, r4
 8010c2e:	68f3      	ldr	r3, [r6, #12]
    uint32_t old_len = strlen(txt);
 8010c30:	4607      	mov	r7, r0
    pos = lv_txt_encoded_get_byte_id(txt, pos);   /*Convert to byte index instead of letter index*/
 8010c32:	4628      	mov	r0, r5
 8010c34:	4798      	blx	r3
    len = lv_txt_encoded_get_byte_id(&txt[pos], len);
 8010c36:	68f3      	ldr	r3, [r6, #12]
 8010c38:	182e      	adds	r6, r5, r0
    pos = lv_txt_encoded_get_byte_id(txt, pos);   /*Convert to byte index instead of letter index*/
 8010c3a:	4604      	mov	r4, r0
    len = lv_txt_encoded_get_byte_id(&txt[pos], len);
 8010c3c:	4641      	mov	r1, r8
 8010c3e:	4630      	mov	r0, r6
 8010c40:	4798      	blx	r3
    for(i = pos; i <= old_len - len; i++) {
 8010c42:	1a39      	subs	r1, r7, r0
 8010c44:	428c      	cmp	r4, r1
 8010c46:	d809      	bhi.n	8010c5c <lv_txt_cut+0x40>
 8010c48:	1823      	adds	r3, r4, r0
 8010c4a:	4630      	mov	r0, r6
 8010c4c:	442b      	add	r3, r5
 8010c4e:	3401      	adds	r4, #1
        txt[i] = txt[i + len];
 8010c50:	f813 2b01 	ldrb.w	r2, [r3], #1
    for(i = pos; i <= old_len - len; i++) {
 8010c54:	428c      	cmp	r4, r1
        txt[i] = txt[i + len];
 8010c56:	f800 2b01 	strb.w	r2, [r0], #1
    for(i = pos; i <= old_len - len; i++) {
 8010c5a:	d9f8      	bls.n	8010c4e <lv_txt_cut+0x32>
 8010c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c60:	200000ac 	.word	0x200000ac

08010c64 <lv_ufs_ready>:
 * Give the state of the ufs
 * @return true if ufs is initialized and can be used else false
 */
bool lv_ufs_ready(void)
{
    return inited;
 8010c64:	4b01      	ldr	r3, [pc, #4]	; (8010c6c <lv_ufs_ready+0x8>)
}
 8010c66:	7818      	ldrb	r0, [r3, #0]
 8010c68:	4770      	bx	lr
 8010c6a:	bf00      	nop
 8010c6c:	200174a8 	.word	0x200174a8

08010c70 <lv_ufs_close>:
 */
lv_fs_res_t lv_ufs_close(void * file_p)
{
    lv_ufs_file_t * fp = file_p;    /*Convert type*/

    if(fp->ent == NULL) return LV_FS_RES_OK;
 8010c70:	6803      	ldr	r3, [r0, #0]
 8010c72:	b11b      	cbz	r3, 8010c7c <lv_ufs_close+0xc>

    /*Decrement the Open counter*/
    if(fp->ent->oc > 0) {
 8010c74:	899a      	ldrh	r2, [r3, #12]
 8010c76:	b10a      	cbz	r2, 8010c7c <lv_ufs_close+0xc>
        fp->ent->oc--;
 8010c78:	3a01      	subs	r2, #1
 8010c7a:	819a      	strh	r2, [r3, #12]
    }

    return LV_FS_RES_OK;
}
 8010c7c:	2000      	movs	r0, #0
 8010c7e:	4770      	bx	lr

08010c80 <lv_ufs_tell>:
 */
lv_fs_res_t lv_ufs_tell(void * file_p, uint32_t * pos_p)
{
    lv_ufs_file_t * fp = file_p;    /*Convert type*/

    *pos_p = fp->rwp;
 8010c80:	6843      	ldr	r3, [r0, #4]

    return LV_FS_RES_OK;
}
 8010c82:	2000      	movs	r0, #0
    *pos_p = fp->rwp;
 8010c84:	600b      	str	r3, [r1, #0]
}
 8010c86:	4770      	bx	lr

08010c88 <lv_ufs_size>:
lv_fs_res_t lv_ufs_size(void * file_p, uint32_t * size_p)
{
    lv_ufs_file_t * fp = file_p;    /*Convert type*/
    lv_ufs_ent_t * ent = fp->ent;

    *size_p = ent->size;
 8010c88:	6803      	ldr	r3, [r0, #0]

    return LV_FS_RES_OK;
}
 8010c8a:	2000      	movs	r0, #0
    *size_p = ent->size;
 8010c8c:	689b      	ldr	r3, [r3, #8]
 8010c8e:	600b      	str	r3, [r1, #0]
}
 8010c90:	4770      	bx	lr
 8010c92:	bf00      	nop

08010c94 <lv_ufs_dir_open>:
 */
lv_fs_res_t lv_ufs_dir_open(void * rddir_p, const char * path)
{
    lv_ufs_dir_t * lv_ufs_rddir_p = rddir_p;

    lv_ufs_rddir_p->last_ent = NULL;
 8010c94:	2300      	movs	r3, #0
 8010c96:	6003      	str	r3, [r0, #0]

    if(path[0] != '\0') return LV_FS_RES_NOT_EX;       /*Must be "" */
 8010c98:	780b      	ldrb	r3, [r1, #0]
 8010c9a:	2b00      	cmp	r3, #0
    else return LV_FS_RES_OK;
}
 8010c9c:	bf14      	ite	ne
 8010c9e:	2003      	movne	r0, #3
 8010ca0:	2000      	moveq	r0, #0
 8010ca2:	4770      	bx	lr

08010ca4 <lv_ufs_dir_close>:
 */
lv_fs_res_t lv_ufs_dir_close(void * rddir_p)
{
    (void)rddir_p;
    return LV_FS_RES_OK;
}
 8010ca4:	2000      	movs	r0, #0
 8010ca6:	4770      	bx	lr

08010ca8 <lv_ufs_ent_get>:
 * @param fn filename ('\0' terminated string)
 * @return pointer to the dynamically allocated entry with 'fn' filename.
 *         NULL if no entry found with that name.
 */
static lv_ufs_ent_t * lv_ufs_ent_get(const char * fn)
{
 8010ca8:	b570      	push	{r4, r5, r6, lr}
 8010caa:	4605      	mov	r5, r0
    lv_ufs_ent_t * fp;

    LL_READ(LV_GC_ROOT(_lv_file_ll), fp) {
 8010cac:	480b      	ldr	r0, [pc, #44]	; (8010cdc <lv_ufs_ent_get+0x34>)
 8010cae:	f7ff f973 	bl	800ff98 <lv_ll_get_head>
 8010cb2:	b180      	cbz	r0, 8010cd6 <lv_ufs_ent_get+0x2e>
 8010cb4:	4604      	mov	r4, r0
 8010cb6:	4e09      	ldr	r6, [pc, #36]	; (8010cdc <lv_ufs_ent_get+0x34>)
 8010cb8:	e004      	b.n	8010cc4 <lv_ufs_ent_get+0x1c>
 8010cba:	4630      	mov	r0, r6
 8010cbc:	f7ff f974 	bl	800ffa8 <lv_ll_get_next>
 8010cc0:	4604      	mov	r4, r0
 8010cc2:	b140      	cbz	r0, 8010cd6 <lv_ufs_ent_get+0x2e>
        if(strcmp(fp->fn_d, fn) == 0) {
 8010cc4:	4629      	mov	r1, r5
 8010cc6:	6820      	ldr	r0, [r4, #0]
 8010cc8:	f7ef fa9e 	bl	8000208 <strcmp>
    LL_READ(LV_GC_ROOT(_lv_file_ll), fp) {
 8010ccc:	4621      	mov	r1, r4
        if(strcmp(fp->fn_d, fn) == 0) {
 8010cce:	2800      	cmp	r0, #0
 8010cd0:	d1f3      	bne.n	8010cba <lv_ufs_ent_get+0x12>
            return fp;
        }
    }

    return NULL;
}
 8010cd2:	4620      	mov	r0, r4
 8010cd4:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
 8010cd6:	2400      	movs	r4, #0
}
 8010cd8:	4620      	mov	r0, r4
 8010cda:	bd70      	pop	{r4, r5, r6, pc}
 8010cdc:	20018030 	.word	0x20018030

08010ce0 <lv_ufs_open>:
{
 8010ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ce4:	4606      	mov	r6, r0
    fp->ent = NULL;
 8010ce6:	2700      	movs	r7, #0
    lv_ufs_ent_t * ent = lv_ufs_ent_get(fn);
 8010ce8:	4608      	mov	r0, r1
{
 8010cea:	4688      	mov	r8, r1
 8010cec:	4615      	mov	r5, r2
    lv_ufs_ent_t * ent = lv_ufs_ent_get(fn);
 8010cee:	f7ff ffdb 	bl	8010ca8 <lv_ufs_ent_get>
    fp->ent = NULL;
 8010cf2:	6037      	str	r7, [r6, #0]
    if(ent == NULL) {
 8010cf4:	b1c0      	cbz	r0, 8010d28 <lv_ufs_open+0x48>
    if((mode & LV_FS_MODE_WR) != 0) {
 8010cf6:	f015 0101 	ands.w	r1, r5, #1
 8010cfa:	4604      	mov	r4, r0
 8010cfc:	d10f      	bne.n	8010d1e <lv_ufs_open+0x3e>
 8010cfe:	8982      	ldrh	r2, [r0, #12]
    fp->ar = mode & LV_FS_MODE_RD ? 1 : 0;
 8010d00:	7a33      	ldrb	r3, [r6, #8]
 8010d02:	f3c5 0540 	ubfx	r5, r5, #1, #1
    ent->oc ++;
 8010d06:	3201      	adds	r2, #1
    fp->rwp = 0;
 8010d08:	2000      	movs	r0, #0
    fp->ar = mode & LV_FS_MODE_RD ? 1 : 0;
 8010d0a:	f365 0300 	bfi	r3, r5, #0, #1
    fp->ent = ent;
 8010d0e:	6034      	str	r4, [r6, #0]
    fp->rwp = 0;
 8010d10:	6070      	str	r0, [r6, #4]
    fp->aw = mode & LV_FS_MODE_WR ? 1 : 0;
 8010d12:	f361 0341 	bfi	r3, r1, #1, #1
 8010d16:	7233      	strb	r3, [r6, #8]
    ent->oc ++;
 8010d18:	81a2      	strh	r2, [r4, #12]
    return LV_FS_RES_OK;
 8010d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(ent->oc != 0) return LV_FS_RES_LOCKED;
 8010d1e:	8983      	ldrh	r3, [r0, #12]
 8010d20:	b1f3      	cbz	r3, 8010d60 <lv_ufs_open+0x80>
 8010d22:	2005      	movs	r0, #5
 8010d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((mode & LV_FS_MODE_WR) != 0) {  /*Create the file if opened for write*/
 8010d28:	07eb      	lsls	r3, r5, #31
 8010d2a:	d402      	bmi.n	8010d32 <lv_ufs_open+0x52>
            return LV_FS_RES_NOT_EX;       /*Can not read not existing file*/
 8010d2c:	2003      	movs	r0, #3
 8010d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 *         NULL if no space for the entry.
 */
static lv_ufs_ent_t * lv_ufs_ent_new(const char * fn)
{
    lv_ufs_ent_t * new_ent = NULL;
    new_ent = lv_ll_ins_head(&LV_GC_ROOT(_lv_file_ll));                 /*Create a new file*/
 8010d32:	4811      	ldr	r0, [pc, #68]	; (8010d78 <lv_ufs_open+0x98>)
 8010d34:	f7ff f856 	bl	800fde4 <lv_ll_ins_head>
    lv_mem_assert(new_ent);
 8010d38:	4604      	mov	r4, r0
 8010d3a:	b1d0      	cbz	r0, 8010d72 <lv_ufs_open+0x92>
    if(new_ent == NULL) return NULL;

    new_ent->fn_d = lv_mem_alloc(strlen(fn)  + 1); /*Save the name*/
 8010d3c:	4640      	mov	r0, r8
 8010d3e:	f7ef fa6d 	bl	800021c <strlen>
 8010d42:	3001      	adds	r0, #1
 8010d44:	f7ff f998 	bl	8010078 <lv_mem_alloc>
 8010d48:	6020      	str	r0, [r4, #0]
    lv_mem_assert(new_ent->fn_d);
 8010d4a:	b198      	cbz	r0, 8010d74 <lv_ufs_open+0x94>
    if(new_ent->fn_d == NULL) return NULL;

    strcpy(new_ent->fn_d, fn);
 8010d4c:	4641      	mov	r1, r8
 8010d4e:	f008 fcca 	bl	80196e6 <strcpy>
    new_ent->data_d = NULL;
    new_ent->size = 0;
    new_ent->oc = 0;
    new_ent->const_data = 0;
 8010d52:	7ba3      	ldrb	r3, [r4, #14]
    new_ent->data_d = NULL;
 8010d54:	6067      	str	r7, [r4, #4]
    new_ent->const_data = 0;
 8010d56:	f367 0300 	bfi	r3, r7, #0, #1
    new_ent->size = 0;
 8010d5a:	60a7      	str	r7, [r4, #8]
    new_ent->oc = 0;
 8010d5c:	81a7      	strh	r7, [r4, #12]
    new_ent->const_data = 0;
 8010d5e:	73a3      	strb	r3, [r4, #14]
        if(ent->const_data != 0) return LV_FS_RES_DENIED;
 8010d60:	7ba3      	ldrb	r3, [r4, #14]
 8010d62:	f013 0201 	ands.w	r2, r3, #1
 8010d66:	d002      	beq.n	8010d6e <lv_ufs_open+0x8e>
 8010d68:	2006      	movs	r0, #6
}
 8010d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d6e:	2101      	movs	r1, #1
 8010d70:	e7c6      	b.n	8010d00 <lv_ufs_open+0x20>
 8010d72:	e7fe      	b.n	8010d72 <lv_ufs_open+0x92>
 8010d74:	e7fe      	b.n	8010d74 <lv_ufs_open+0x94>
 8010d76:	bf00      	nop
 8010d78:	20018030 	.word	0x20018030

08010d7c <lv_ufs_dir_read>:
{
 8010d7c:	b538      	push	{r3, r4, r5, lr}
 8010d7e:	460d      	mov	r5, r1
    if(ufs_dir_p->last_ent == NULL) {
 8010d80:	6801      	ldr	r1, [r0, #0]
{
 8010d82:	4604      	mov	r4, r0
        ufs_dir_p->last_ent = lv_ll_get_head(&LV_GC_ROOT(_lv_file_ll));
 8010d84:	480a      	ldr	r0, [pc, #40]	; (8010db0 <lv_ufs_dir_read+0x34>)
    if(ufs_dir_p->last_ent == NULL) {
 8010d86:	b169      	cbz	r1, 8010da4 <lv_ufs_dir_read+0x28>
        ufs_dir_p->last_ent = lv_ll_get_next(&LV_GC_ROOT(_lv_file_ll), ufs_dir_p->last_ent);
 8010d88:	f7ff f90e 	bl	800ffa8 <lv_ll_get_next>
 8010d8c:	4603      	mov	r3, r0
 8010d8e:	6020      	str	r0, [r4, #0]
    if(ufs_dir_p->last_ent != NULL) {
 8010d90:	b12b      	cbz	r3, 8010d9e <lv_ufs_dir_read+0x22>
        strcpy(fn, ufs_dir_p->last_ent->fn_d);
 8010d92:	6819      	ldr	r1, [r3, #0]
 8010d94:	4628      	mov	r0, r5
 8010d96:	f008 fca6 	bl	80196e6 <strcpy>
}
 8010d9a:	2000      	movs	r0, #0
 8010d9c:	bd38      	pop	{r3, r4, r5, pc}
        fn[0] = '\0';
 8010d9e:	702b      	strb	r3, [r5, #0]
}
 8010da0:	2000      	movs	r0, #0
 8010da2:	bd38      	pop	{r3, r4, r5, pc}
        ufs_dir_p->last_ent = lv_ll_get_head(&LV_GC_ROOT(_lv_file_ll));
 8010da4:	f7ff f8f8 	bl	800ff98 <lv_ll_get_head>
 8010da8:	6020      	str	r0, [r4, #0]
 8010daa:	4603      	mov	r3, r0
 8010dac:	e7f0      	b.n	8010d90 <lv_ufs_dir_read+0x14>
 8010dae:	bf00      	nop
 8010db0:	20018030 	.word	0x20018030

08010db4 <lv_ufs_remove>:
{
 8010db4:	b538      	push	{r3, r4, r5, lr}
    lv_ufs_ent_t * ent = lv_ufs_ent_get(fn);
 8010db6:	f7ff ff77 	bl	8010ca8 <lv_ufs_ent_get>
    if(ent == NULL) return LV_FS_RES_DENIED;    /*File not exists*/
 8010dba:	b110      	cbz	r0, 8010dc2 <lv_ufs_remove+0xe>
    if(ent->oc != 0) return LV_FS_RES_DENIED;
 8010dbc:	8985      	ldrh	r5, [r0, #12]
 8010dbe:	4604      	mov	r4, r0
 8010dc0:	b10d      	cbz	r5, 8010dc6 <lv_ufs_remove+0x12>
    if(ent == NULL) return LV_FS_RES_DENIED;    /*File not exists*/
 8010dc2:	2006      	movs	r0, #6
}
 8010dc4:	bd38      	pop	{r3, r4, r5, pc}
    lv_ll_rem(&LV_GC_ROOT(_lv_file_ll), ent);
 8010dc6:	4601      	mov	r1, r0
 8010dc8:	480a      	ldr	r0, [pc, #40]	; (8010df4 <lv_ufs_remove+0x40>)
 8010dca:	f7ff f879 	bl	800fec0 <lv_ll_rem>
    lv_mem_free(ent->fn_d);
 8010dce:	6820      	ldr	r0, [r4, #0]
 8010dd0:	f7ff f95a 	bl	8010088 <lv_mem_free>
    if(ent->const_data == 0) {
 8010dd4:	7ba3      	ldrb	r3, [r4, #14]
    ent->fn_d = NULL;
 8010dd6:	6025      	str	r5, [r4, #0]
    if(ent->const_data == 0) {
 8010dd8:	f013 0501 	ands.w	r5, r3, #1
 8010ddc:	d004      	beq.n	8010de8 <lv_ufs_remove+0x34>
    lv_mem_free(ent);
 8010dde:	4620      	mov	r0, r4
 8010de0:	f7ff f952 	bl	8010088 <lv_mem_free>
    return LV_FS_RES_OK;
 8010de4:	2000      	movs	r0, #0
 8010de6:	bd38      	pop	{r3, r4, r5, pc}
        lv_mem_free(ent->data_d);
 8010de8:	6860      	ldr	r0, [r4, #4]
 8010dea:	f7ff f94d 	bl	8010088 <lv_mem_free>
        ent->data_d = NULL;
 8010dee:	6065      	str	r5, [r4, #4]
 8010df0:	e7f5      	b.n	8010dde <lv_ufs_remove+0x2a>
 8010df2:	bf00      	nop
 8010df4:	20018030 	.word	0x20018030

08010df8 <lv_ufs_read>:
{
 8010df8:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_ufs_ent_t * ent = fp->ent;
 8010dfa:	6806      	ldr	r6, [r0, #0]
    *br = 0;
 8010dfc:	2400      	movs	r4, #0
{
 8010dfe:	b083      	sub	sp, #12
    if(ent->data_d == NULL || ent->size == 0) { /*Don't read empty files*/
 8010e00:	6877      	ldr	r7, [r6, #4]
    *br = 0;
 8010e02:	601c      	str	r4, [r3, #0]
    if(ent->data_d == NULL || ent->size == 0) { /*Don't read empty files*/
 8010e04:	b1ff      	cbz	r7, 8010e46 <lv_ufs_read+0x4e>
 8010e06:	68b4      	ldr	r4, [r6, #8]
 8010e08:	b134      	cbz	r4, 8010e18 <lv_ufs_read+0x20>
 8010e0a:	4605      	mov	r5, r0
    } else if(fp->ar == 0) {    /*The file is not opened for read*/
 8010e0c:	7a00      	ldrb	r0, [r0, #8]
 8010e0e:	07c0      	lsls	r0, r0, #31
 8010e10:	d405      	bmi.n	8010e1e <lv_ufs_read+0x26>
        return LV_FS_RES_DENIED;
 8010e12:	2006      	movs	r0, #6
}
 8010e14:	b003      	add	sp, #12
 8010e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LV_FS_RES_OK;
 8010e18:	4620      	mov	r0, r4
}
 8010e1a:	b003      	add	sp, #12
 8010e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(fp->rwp + btr > ent->size) {  /*Check too much bytes read*/
 8010e1e:	6868      	ldr	r0, [r5, #4]
 8010e20:	9301      	str	r3, [sp, #4]
 8010e22:	1886      	adds	r6, r0, r2
 8010e24:	42b4      	cmp	r4, r6
        *br =  ent->size - fp->rwp;
 8010e26:	bf38      	it	cc
 8010e28:	1a22      	subcc	r2, r4, r0
    memcpy(buf, data8_p, *br);
 8010e2a:	4608      	mov	r0, r1
        *br = btr;
 8010e2c:	601a      	str	r2, [r3, #0]
    data8_p += fp->rwp;
 8010e2e:	686c      	ldr	r4, [r5, #4]
    memcpy(buf, data8_p, *br);
 8010e30:	1939      	adds	r1, r7, r4
 8010e32:	f008 fc45 	bl	80196c0 <memcpy>
    fp->rwp += *br; /*Refresh the read write pointer*/
 8010e36:	9b01      	ldr	r3, [sp, #4]
    return LV_FS_RES_OK;
 8010e38:	2000      	movs	r0, #0
    fp->rwp += *br; /*Refresh the read write pointer*/
 8010e3a:	681a      	ldr	r2, [r3, #0]
 8010e3c:	686b      	ldr	r3, [r5, #4]
 8010e3e:	4413      	add	r3, r2
 8010e40:	606b      	str	r3, [r5, #4]
}
 8010e42:	b003      	add	sp, #12
 8010e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LV_FS_RES_OK;
 8010e46:	4638      	mov	r0, r7
}
 8010e48:	b003      	add	sp, #12
 8010e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010e4c <lv_ufs_seek>:
{
 8010e4c:	b570      	push	{r4, r5, r6, lr}
    lv_ufs_ent_t * ent = fp->ent;
 8010e4e:	6806      	ldr	r6, [r0, #0]
{
 8010e50:	460d      	mov	r5, r1
    if(pos < ent->size) {
 8010e52:	68b2      	ldr	r2, [r6, #8]
 8010e54:	428a      	cmp	r2, r1
 8010e56:	d804      	bhi.n	8010e62 <lv_ufs_seek+0x16>
        if(fp->aw == 0) return LV_FS_RES_DENIED;       /*Not opened for write*/
 8010e58:	7a02      	ldrb	r2, [r0, #8]
 8010e5a:	0793      	lsls	r3, r2, #30
 8010e5c:	d404      	bmi.n	8010e68 <lv_ufs_seek+0x1c>
 8010e5e:	2006      	movs	r0, #6
}
 8010e60:	bd70      	pop	{r4, r5, r6, pc}
        fp->rwp = pos;
 8010e62:	6041      	str	r1, [r0, #4]
    return LV_FS_RES_OK;
 8010e64:	2000      	movs	r0, #0
 8010e66:	bd70      	pop	{r4, r5, r6, pc}
 8010e68:	4604      	mov	r4, r0
        uint8_t * new_data = lv_mem_realloc(ent->data_d, pos);
 8010e6a:	6870      	ldr	r0, [r6, #4]
 8010e6c:	f7ff f964 	bl	8010138 <lv_mem_realloc>
        lv_mem_assert(new_data);
 8010e70:	b120      	cbz	r0, 8010e7c <lv_ufs_seek+0x30>
        ent->data_d = new_data;
 8010e72:	6070      	str	r0, [r6, #4]
    return LV_FS_RES_OK;
 8010e74:	2000      	movs	r0, #0
        ent->size = pos;
 8010e76:	60b5      	str	r5, [r6, #8]
        fp->rwp = pos;
 8010e78:	6065      	str	r5, [r4, #4]
 8010e7a:	bd70      	pop	{r4, r5, r6, pc}
 8010e7c:	e7fe      	b.n	8010e7c <lv_ufs_seek+0x30>
 8010e7e:	bf00      	nop

08010e80 <lv_ufs_trunc>:
{
 8010e80:	b538      	push	{r3, r4, r5, lr}
    if(fp->aw == 0) return LV_FS_RES_DENIED; /*Not opened for write*/
 8010e82:	7a03      	ldrb	r3, [r0, #8]
 8010e84:	079b      	lsls	r3, r3, #30
 8010e86:	d401      	bmi.n	8010e8c <lv_ufs_trunc+0xc>
 8010e88:	2006      	movs	r0, #6
}
 8010e8a:	bd38      	pop	{r3, r4, r5, pc}
    lv_ufs_ent_t * ent = fp->ent;
 8010e8c:	6805      	ldr	r5, [r0, #0]
 8010e8e:	4604      	mov	r4, r0
    void * new_data = lv_mem_realloc(ent->data_d, fp->rwp);
 8010e90:	6841      	ldr	r1, [r0, #4]
 8010e92:	6868      	ldr	r0, [r5, #4]
 8010e94:	f7ff f950 	bl	8010138 <lv_mem_realloc>
    lv_mem_assert(new_data);
 8010e98:	4603      	mov	r3, r0
 8010e9a:	b120      	cbz	r0, 8010ea6 <lv_ufs_trunc+0x26>
    ent->size = fp->rwp;
 8010e9c:	6862      	ldr	r2, [r4, #4]
    return LV_FS_RES_OK;
 8010e9e:	2000      	movs	r0, #0
    ent->data_d = new_data;
 8010ea0:	606b      	str	r3, [r5, #4]
    ent->size = fp->rwp;
 8010ea2:	60aa      	str	r2, [r5, #8]
    return LV_FS_RES_OK;
 8010ea4:	bd38      	pop	{r3, r4, r5, pc}
 8010ea6:	e7fe      	b.n	8010ea6 <lv_ufs_trunc+0x26>

08010ea8 <lv_ufs_free>:
{
 8010ea8:	b530      	push	{r4, r5, lr}
 8010eaa:	b087      	sub	sp, #28
 8010eac:	4605      	mov	r5, r0
 8010eae:	460c      	mov	r4, r1
    lv_mem_monitor(&mon);
 8010eb0:	4668      	mov	r0, sp
 8010eb2:	f7ff f9a3 	bl	80101fc <lv_mem_monitor>
    *free_p = mon.free_size >> 10;
 8010eb6:	9b02      	ldr	r3, [sp, #8]
    *total_p = LV_MEM_SIZE >> 10;    /*Convert bytes to kB*/
 8010eb8:	2220      	movs	r2, #32
}
 8010eba:	2000      	movs	r0, #0
    *free_p = mon.free_size >> 10;
 8010ebc:	0a9b      	lsrs	r3, r3, #10
    *total_p = LV_MEM_SIZE >> 10;    /*Convert bytes to kB*/
 8010ebe:	602a      	str	r2, [r5, #0]
    *free_p = mon.free_size >> 10;
 8010ec0:	6023      	str	r3, [r4, #0]
}
 8010ec2:	b007      	add	sp, #28
 8010ec4:	bd30      	pop	{r4, r5, pc}
 8010ec6:	bf00      	nop

08010ec8 <lv_ufs_write>:
{
 8010ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    *bw = 0;
 8010ecc:	2400      	movs	r4, #0
 8010ece:	601c      	str	r4, [r3, #0]
    if(fp->aw == 0) return LV_FS_RES_DENIED; /*Not opened for write*/
 8010ed0:	7a04      	ldrb	r4, [r0, #8]
 8010ed2:	07a4      	lsls	r4, r4, #30
 8010ed4:	d402      	bmi.n	8010edc <lv_ufs_write+0x14>
 8010ed6:	2006      	movs	r0, #6
}
 8010ed8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010edc:	4616      	mov	r6, r2
    lv_ufs_ent_t * ent = fp->ent;
 8010ede:	6807      	ldr	r7, [r0, #0]
 8010ee0:	4605      	mov	r5, r0
    uint32_t new_size = fp->rwp + btw;
 8010ee2:	6840      	ldr	r0, [r0, #4]
    if(new_size > ent->size) {
 8010ee4:	68ba      	ldr	r2, [r7, #8]
 8010ee6:	4688      	mov	r8, r1
    uint32_t new_size = fp->rwp + btw;
 8010ee8:	eb06 0900 	add.w	r9, r6, r0
 8010eec:	461c      	mov	r4, r3
    if(new_size > ent->size) {
 8010eee:	4591      	cmp	r9, r2
 8010ef0:	d90a      	bls.n	8010f08 <lv_ufs_write+0x40>
        uint8_t * new_data = lv_mem_realloc(ent->data_d, new_size);
 8010ef2:	4649      	mov	r1, r9
 8010ef4:	6878      	ldr	r0, [r7, #4]
 8010ef6:	f7ff f91f 	bl	8010138 <lv_mem_realloc>
        lv_mem_assert(new_data);
 8010efa:	b190      	cbz	r0, 8010f22 <lv_ufs_write+0x5a>
        ent->size = new_size;
 8010efc:	4602      	mov	r2, r0
        ent->data_d = new_data;
 8010efe:	6078      	str	r0, [r7, #4]
 8010f00:	6868      	ldr	r0, [r5, #4]
        ent->size = new_size;
 8010f02:	f8c7 9008 	str.w	r9, [r7, #8]
 8010f06:	e000      	b.n	8010f0a <lv_ufs_write+0x42>
 8010f08:	687a      	ldr	r2, [r7, #4]
    memcpy(data8_p, buf, btw);
 8010f0a:	4641      	mov	r1, r8
 8010f0c:	4410      	add	r0, r2
 8010f0e:	4632      	mov	r2, r6
 8010f10:	f008 fbd6 	bl	80196c0 <memcpy>
    *bw = btw;
 8010f14:	6026      	str	r6, [r4, #0]
    fp->rwp += *bw;
 8010f16:	686b      	ldr	r3, [r5, #4]
 8010f18:	2000      	movs	r0, #0
 8010f1a:	4433      	add	r3, r6
 8010f1c:	606b      	str	r3, [r5, #4]
 8010f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f22:	e7fe      	b.n	8010f22 <lv_ufs_write+0x5a>

08010f24 <lv_ufs_init>:
{
 8010f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f26:	b093      	sub	sp, #76	; 0x4c
    lv_ll_init(&LV_GC_ROOT(_lv_file_ll), sizeof(lv_ufs_ent_t));
 8010f28:	2110      	movs	r1, #16
 8010f2a:	481b      	ldr	r0, [pc, #108]	; (8010f98 <lv_ufs_init+0x74>)
 8010f2c:	f7fe ff50 	bl	800fdd0 <lv_ll_init>
    memset(&ufs_drv, 0, sizeof(lv_fs_drv_t));    /*Initialization*/
 8010f30:	a801      	add	r0, sp, #4
 8010f32:	2244      	movs	r2, #68	; 0x44
 8010f34:	2100      	movs	r1, #0
 8010f36:	f008 fbce 	bl	80196d6 <memset>
    ufs_drv.rddir_size = sizeof(lv_ufs_dir_t);
 8010f3a:	2204      	movs	r2, #4
    ufs_drv.file_size = sizeof(lv_ufs_file_t);
 8010f3c:	210c      	movs	r1, #12
    ufs_drv.letter = UFS_LETTER;
 8010f3e:	2355      	movs	r3, #85	; 0x55
    lv_fs_add_drv(&ufs_drv);
 8010f40:	eb0d 0002 	add.w	r0, sp, r2
    ufs_drv.rddir_size = sizeof(lv_ufs_dir_t);
 8010f44:	f8ad 2008 	strh.w	r2, [sp, #8]
    ufs_drv.file_size = sizeof(lv_ufs_file_t);
 8010f48:	f8ad 1006 	strh.w	r1, [sp, #6]
    ufs_drv.letter = UFS_LETTER;
 8010f4c:	f88d 3004 	strb.w	r3, [sp, #4]
    ufs_drv.ready = lv_ufs_ready;
 8010f50:	4f12      	ldr	r7, [pc, #72]	; (8010f9c <lv_ufs_init+0x78>)
    ufs_drv.open = lv_ufs_open;
 8010f52:	4e13      	ldr	r6, [pc, #76]	; (8010fa0 <lv_ufs_init+0x7c>)
    ufs_drv.close = lv_ufs_close;
 8010f54:	4d13      	ldr	r5, [pc, #76]	; (8010fa4 <lv_ufs_init+0x80>)
    ufs_drv.remove = lv_ufs_remove;
 8010f56:	4c14      	ldr	r4, [pc, #80]	; (8010fa8 <lv_ufs_init+0x84>)
    ufs_drv.read = lv_ufs_read;
 8010f58:	4914      	ldr	r1, [pc, #80]	; (8010fac <lv_ufs_init+0x88>)
    ufs_drv.write = lv_ufs_write;
 8010f5a:	4a15      	ldr	r2, [pc, #84]	; (8010fb0 <lv_ufs_init+0x8c>)
    ufs_drv.seek = lv_ufs_seek;
 8010f5c:	4b15      	ldr	r3, [pc, #84]	; (8010fb4 <lv_ufs_init+0x90>)
    ufs_drv.ready = lv_ufs_ready;
 8010f5e:	9703      	str	r7, [sp, #12]
    ufs_drv.open = lv_ufs_open;
 8010f60:	9604      	str	r6, [sp, #16]
    ufs_drv.close = lv_ufs_close;
 8010f62:	9505      	str	r5, [sp, #20]
    ufs_drv.remove = lv_ufs_remove;
 8010f64:	9406      	str	r4, [sp, #24]
    ufs_drv.read = lv_ufs_read;
 8010f66:	9107      	str	r1, [sp, #28]
    ufs_drv.write = lv_ufs_write;
 8010f68:	9208      	str	r2, [sp, #32]
    ufs_drv.dir_open = lv_ufs_dir_open;
 8010f6a:	4913      	ldr	r1, [pc, #76]	; (8010fb8 <lv_ufs_init+0x94>)
    ufs_drv.dir_read = lv_ufs_dir_read;
 8010f6c:	4a13      	ldr	r2, [pc, #76]	; (8010fbc <lv_ufs_init+0x98>)
    ufs_drv.seek = lv_ufs_seek;
 8010f6e:	9309      	str	r3, [sp, #36]	; 0x24
    ufs_drv.tell = lv_ufs_tell;
 8010f70:	4f13      	ldr	r7, [pc, #76]	; (8010fc0 <lv_ufs_init+0x9c>)
    ufs_drv.dir_close = lv_ufs_dir_close;
 8010f72:	4b14      	ldr	r3, [pc, #80]	; (8010fc4 <lv_ufs_init+0xa0>)
    ufs_drv.size = lv_ufs_size;
 8010f74:	4e14      	ldr	r6, [pc, #80]	; (8010fc8 <lv_ufs_init+0xa4>)
    ufs_drv.trunc = lv_ufs_trunc;
 8010f76:	4d15      	ldr	r5, [pc, #84]	; (8010fcc <lv_ufs_init+0xa8>)
    ufs_drv.free = lv_ufs_free;
 8010f78:	4c15      	ldr	r4, [pc, #84]	; (8010fd0 <lv_ufs_init+0xac>)
    ufs_drv.dir_read = lv_ufs_dir_read;
 8010f7a:	9210      	str	r2, [sp, #64]	; 0x40
    ufs_drv.dir_close = lv_ufs_dir_close;
 8010f7c:	9311      	str	r3, [sp, #68]	; 0x44
    ufs_drv.tell = lv_ufs_tell;
 8010f7e:	970a      	str	r7, [sp, #40]	; 0x28
    ufs_drv.size = lv_ufs_size;
 8010f80:	960c      	str	r6, [sp, #48]	; 0x30
    ufs_drv.trunc = lv_ufs_trunc;
 8010f82:	950b      	str	r5, [sp, #44]	; 0x2c
    ufs_drv.free = lv_ufs_free;
 8010f84:	940e      	str	r4, [sp, #56]	; 0x38
    ufs_drv.dir_open = lv_ufs_dir_open;
 8010f86:	910f      	str	r1, [sp, #60]	; 0x3c
    lv_fs_add_drv(&ufs_drv);
 8010f88:	f7fe ff08 	bl	800fd9c <lv_fs_add_drv>
    inited = true;
 8010f8c:	4b11      	ldr	r3, [pc, #68]	; (8010fd4 <lv_ufs_init+0xb0>)
 8010f8e:	2201      	movs	r2, #1
 8010f90:	701a      	strb	r2, [r3, #0]
}
 8010f92:	b013      	add	sp, #76	; 0x4c
 8010f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f96:	bf00      	nop
 8010f98:	20018030 	.word	0x20018030
 8010f9c:	08010c65 	.word	0x08010c65
 8010fa0:	08010ce1 	.word	0x08010ce1
 8010fa4:	08010c71 	.word	0x08010c71
 8010fa8:	08010db5 	.word	0x08010db5
 8010fac:	08010df9 	.word	0x08010df9
 8010fb0:	08010ec9 	.word	0x08010ec9
 8010fb4:	08010e4d 	.word	0x08010e4d
 8010fb8:	08010c95 	.word	0x08010c95
 8010fbc:	08010d7d 	.word	0x08010d7d
 8010fc0:	08010c81 	.word	0x08010c81
 8010fc4:	08010ca5 	.word	0x08010ca5
 8010fc8:	08010c89 	.word	0x08010c89
 8010fcc:	08010e81 	.word	0x08010e81
 8010fd0:	08010ea9 	.word	0x08010ea9
 8010fd4:	200174a8 	.word	0x200174a8

08010fd8 <lv_bar_set_value>:
 * Set a new value on the bar
 * @param bar pointer to a bar object
 * @param value new value
 */
void lv_bar_set_value(lv_obj_t * bar, int16_t value)
{
 8010fd8:	b538      	push	{r3, r4, r5, lr}
 8010fda:	460c      	mov	r4, r1
 8010fdc:	4605      	mov	r5, r0
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8010fde:	f7f8 fe31 	bl	8009c44 <lv_obj_get_ext_attr>
    if(ext->cur_value == value) return;
 8010fe2:	f9b0 2000 	ldrsh.w	r2, [r0]
 8010fe6:	42a2      	cmp	r2, r4
 8010fe8:	d011      	beq.n	801100e <lv_bar_set_value+0x36>

    ext->cur_value = value > ext->max_value ? ext->max_value : value;
 8010fea:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8010fee:	4603      	mov	r3, r0
    ext->cur_value = ext->cur_value < ext->min_value ? ext->min_value : ext->cur_value;
    lv_obj_invalidate(bar);
 8010ff0:	4628      	mov	r0, r5
    ext->cur_value = ext->cur_value < ext->min_value ? ext->min_value : ext->cur_value;
 8010ff2:	42a2      	cmp	r2, r4
 8010ff4:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
 8010ff8:	bfa8      	it	ge
 8010ffa:	4622      	movge	r2, r4
 8010ffc:	42aa      	cmp	r2, r5
 8010ffe:	4611      	mov	r1, r2
 8011000:	bfb8      	it	lt
 8011002:	4629      	movlt	r1, r5
 8011004:	8019      	strh	r1, [r3, #0]
}
 8011006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(bar);
 801100a:	f7f7 bf15 	b.w	8008e38 <lv_obj_invalidate>
 801100e:	bd38      	pop	{r3, r4, r5, pc}

08011010 <lv_bar_design>:
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_bar_design(lv_obj_t * bar, const lv_area_t * mask, lv_design_mode_t mode)
{
    if(mode == LV_DESIGN_COVER_CHK) {
 8011010:	2a02      	cmp	r2, #2
{
 8011012:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011016:	b093      	sub	sp, #76	; 0x4c
    if(mode == LV_DESIGN_COVER_CHK) {
 8011018:	f000 80f2 	beq.w	8011200 <lv_bar_design+0x1f0>
 801101c:	4614      	mov	r4, r2
 801101e:	4605      	mov	r5, r0
 8011020:	460e      	mov	r6, r1
        /*Return false if the object is not covers the mask area*/
        return  ancestor_design_f(bar, mask, mode);
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 8011022:	b13a      	cbz	r2, 8011034 <lv_bar_design+0x24>


            /*Draw the indicator*/
            lv_draw_rect(&indic_area, mask, style_indic, opa_scale);
        }
    } else if(mode == LV_DESIGN_DRAW_POST) {
 8011024:	2a01      	cmp	r2, #1
 8011026:	f000 8097 	beq.w	8011158 <lv_bar_design+0x148>
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
        }
#endif

    }
    return true;
 801102a:	2401      	movs	r4, #1
}
 801102c:	4620      	mov	r0, r4
 801102e:	b013      	add	sp, #76	; 0x4c
 8011030:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        lv_opa_t opa_scale = lv_obj_get_opa_scale(bar);
 8011034:	f7f8 fde6 	bl	8009c04 <lv_obj_get_opa_scale>
 8011038:	4607      	mov	r7, r0
        if(lv_obj_is_focused(bar)) {
 801103a:	4628      	mov	r0, r5
 801103c:	f7f8 fe06 	bl	8009c4c <lv_obj_is_focused>
 8011040:	2800      	cmp	r0, #0
 8011042:	d175      	bne.n	8011130 <lv_bar_design+0x120>
            ancestor_design_f(bar, mask, mode);
 8011044:	4b76      	ldr	r3, [pc, #472]	; (8011220 <lv_bar_design+0x210>)
 8011046:	4602      	mov	r2, r0
 8011048:	4631      	mov	r1, r6
 801104a:	4628      	mov	r0, r5
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	4798      	blx	r3
        lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8011050:	4628      	mov	r0, r5
 8011052:	f7f8 fdf7 	bl	8009c44 <lv_obj_get_ext_attr>
        if(ext->cur_value != ext->min_value || ext->sym) {
 8011056:	f9b0 2000 	ldrsh.w	r2, [r0]
 801105a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
        lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 801105e:	4604      	mov	r4, r0
        if(ext->cur_value != ext->min_value || ext->sym) {
 8011060:	429a      	cmp	r2, r3
 8011062:	d102      	bne.n	801106a <lv_bar_design+0x5a>
 8011064:	7983      	ldrb	r3, [r0, #6]
 8011066:	07db      	lsls	r3, r3, #31
 8011068:	d5df      	bpl.n	801102a <lv_bar_design+0x1a>
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 801106a:	4628      	mov	r0, r5
 801106c:	f7f8 fdea 	bl	8009c44 <lv_obj_get_ext_attr>
            style = ext->style_indic;
 8011070:	6882      	ldr	r2, [r0, #8]
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    memcpy(dest, src, sizeof(lv_area_t));
 8011072:	f855 0f10 	ldr.w	r0, [r5, #16]!
 8011076:	466b      	mov	r3, sp
 8011078:	6869      	ldr	r1, [r5, #4]
 801107a:	c303      	stmia	r3!, {r0, r1}
            indic_area.y1 += style_indic->body.padding.ver;
 801107c:	8c13      	ldrh	r3, [r2, #32]
            indic_area.y2 -= style_indic->body.padding.ver;
 801107e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
            indic_area.x1 += style_indic->body.padding.hor;
 8011082:	8c51      	ldrh	r1, [r2, #34]	; 0x22
            indic_area.y2 -= style_indic->body.padding.ver;
 8011084:	1ac0      	subs	r0, r0, r3
            indic_area.x2 -= style_indic->body.padding.hor;
 8011086:	f8bd 5004 	ldrh.w	r5, [sp, #4]
            indic_area.y1 += style_indic->body.padding.ver;
 801108a:	f8bd e002 	ldrh.w	lr, [sp, #2]
            indic_area.x2 -= style_indic->body.padding.hor;
 801108e:	1a6d      	subs	r5, r5, r1
            indic_area.y2 -= style_indic->body.padding.ver;
 8011090:	b280      	uxth	r0, r0
            indic_area.x1 += style_indic->body.padding.hor;
 8011092:	f8bd 8000 	ldrh.w	r8, [sp]
            indic_area.y1 += style_indic->body.padding.ver;
 8011096:	4473      	add	r3, lr
 8011098:	f100 0c01 	add.w	ip, r0, #1
            indic_area.x2 -= style_indic->body.padding.hor;
 801109c:	fa1f fe85 	uxth.w	lr, r5
            indic_area.x1 += style_indic->body.padding.hor;
 80110a0:	4441      	add	r1, r8
            indic_area.y1 += style_indic->body.padding.ver;
 80110a2:	b29b      	uxth	r3, r3
 80110a4:	fa1f fc8c 	uxth.w	ip, ip
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 80110a8:	f10e 0501 	add.w	r5, lr, #1
            indic_area.x1 += style_indic->body.padding.hor;
 80110ac:	b289      	uxth	r1, r1
            indic_area.y1 += style_indic->body.padding.ver;
 80110ae:	f8ad 3002 	strh.w	r3, [sp, #2]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 80110b2:	ebac 0303 	sub.w	r3, ip, r3
            indic_area.y2 -= style_indic->body.padding.ver;
 80110b6:	f8ad 0006 	strh.w	r0, [sp, #6]
    return area_p->x2 - area_p->x1 + 1;
 80110ba:	1a6d      	subs	r5, r5, r1
            indic_area.x2 -= style_indic->body.padding.hor;
 80110bc:	f8ad e004 	strh.w	lr, [sp, #4]
    return area_p->y2 - area_p->y1 + 1;
 80110c0:	b21b      	sxth	r3, r3
            indic_area.x1 += style_indic->body.padding.hor;
 80110c2:	f8ad 1000 	strh.w	r1, [sp]
    return area_p->x2 - area_p->x1 + 1;
 80110c6:	b22d      	sxth	r5, r5
            if(w >= h) {
 80110c8:	42ab      	cmp	r3, r5
 80110ca:	dc6b      	bgt.n	80111a4 <lv_bar_design+0x194>
                indic_area.x2 = (int32_t)((int32_t)w * (ext->cur_value - ext->min_value)) / (ext->max_value - ext->min_value);
 80110cc:	f9b4 e002 	ldrsh.w	lr, [r4, #2]
                indic_area.x2 = indic_area.x1 + indic_area.x2 - 1;
 80110d0:	1e4b      	subs	r3, r1, #1
                indic_area.x2 = (int32_t)((int32_t)w * (ext->cur_value - ext->min_value)) / (ext->max_value - ext->min_value);
 80110d2:	f9b4 0000 	ldrsh.w	r0, [r4]
 80110d6:	f9b4 8004 	ldrsh.w	r8, [r4, #4]
 80110da:	eba0 000e 	sub.w	r0, r0, lr
 80110de:	eba8 0c0e 	sub.w	ip, r8, lr
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 80110e2:	f1b8 0f00 	cmp.w	r8, #0
                indic_area.x2 = (int32_t)((int32_t)w * (ext->cur_value - ext->min_value)) / (ext->max_value - ext->min_value);
 80110e6:	fb05 f000 	mul.w	r0, r5, r0
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 80110ea:	bfd4      	ite	le
 80110ec:	f04f 0800 	movle.w	r8, #0
 80110f0:	f04f 0801 	movgt.w	r8, #1
                indic_area.x2 = (int32_t)((int32_t)w * (ext->cur_value - ext->min_value)) / (ext->max_value - ext->min_value);
 80110f4:	fb90 f0fc 	sdiv	r0, r0, ip
                indic_area.x2 = indic_area.x1 + indic_area.x2 - 1;
 80110f8:	4403      	add	r3, r0
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 80110fa:	ea18 70de 	ands.w	r0, r8, lr, lsr #31
                indic_area.x2 = indic_area.x1 + indic_area.x2 - 1;
 80110fe:	b21b      	sxth	r3, r3
 8011100:	f8ad 3004 	strh.w	r3, [sp, #4]
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 8011104:	d00e      	beq.n	8011124 <lv_bar_design+0x114>
 8011106:	79a0      	ldrb	r0, [r4, #6]
 8011108:	07c0      	lsls	r0, r0, #31
 801110a:	d50b      	bpl.n	8011124 <lv_bar_design+0x114>
                    zero = indic_area.x1 + (-ext->min_value * w) / (ext->max_value - ext->min_value);
 801110c:	f1ce 0e00 	rsb	lr, lr, #0
 8011110:	fb05 f50e 	mul.w	r5, r5, lr
 8011114:	fb95 f5fc 	sdiv	r5, r5, ip
 8011118:	4429      	add	r1, r5
 801111a:	b209      	sxth	r1, r1
                    if(indic_area.x2 > zero) indic_area.x1 = zero;
 801111c:	428b      	cmp	r3, r1
 801111e:	dd79      	ble.n	8011214 <lv_bar_design+0x204>
 8011120:	f8ad 1000 	strh.w	r1, [sp]
            lv_draw_rect(&indic_area, mask, style_indic, opa_scale);
 8011124:	463b      	mov	r3, r7
 8011126:	4631      	mov	r1, r6
 8011128:	4668      	mov	r0, sp
 801112a:	f7fb fd7d 	bl	800cc28 <lv_draw_rect>
 801112e:	e77c      	b.n	801102a <lv_bar_design+0x1a>
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8011130:	4628      	mov	r0, r5
 8011132:	f7f8 fd87 	bl	8009c44 <lv_obj_get_ext_attr>
            style = lv_obj_get_style(bar);
 8011136:	4628      	mov	r0, r5
 8011138:	f7f8 fc6a 	bl	8009a10 <lv_obj_get_style>
            lv_style_copy(&style_tmp, style_bg);
 801113c:	4601      	mov	r1, r0
 801113e:	4668      	mov	r0, sp
 8011140:	f7f9 fa60 	bl	800a604 <lv_style_copy>
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
 8011144:	466a      	mov	r2, sp
 8011146:	463b      	mov	r3, r7
 8011148:	4631      	mov	r1, r6
 801114a:	f105 0010 	add.w	r0, r5, #16
            style_tmp.body.border.width = 0;
 801114e:	f8ad 4014 	strh.w	r4, [sp, #20]
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
 8011152:	f7fb fd69 	bl	800cc28 <lv_draw_rect>
 8011156:	e77b      	b.n	8011050 <lv_bar_design+0x40>
        if(lv_obj_is_focused(bar)) {
 8011158:	f7f8 fd78 	bl	8009c4c <lv_obj_is_focused>
 801115c:	4604      	mov	r4, r0
 801115e:	2800      	cmp	r0, #0
 8011160:	f43f af63 	beq.w	801102a <lv_bar_design+0x1a>
            lv_opa_t opa_scale = lv_obj_get_opa_scale(bar);
 8011164:	4628      	mov	r0, r5
 8011166:	f7f8 fd4d 	bl	8009c04 <lv_obj_get_opa_scale>
 801116a:	4680      	mov	r8, r0
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 801116c:	4628      	mov	r0, r5
 801116e:	f7f8 fd69 	bl	8009c44 <lv_obj_get_ext_attr>
            style = lv_obj_get_style(bar);
 8011172:	4628      	mov	r0, r5
 8011174:	f7f8 fc4c 	bl	8009a10 <lv_obj_get_style>
            lv_style_copy(&style_tmp, style_bg);
 8011178:	4601      	mov	r1, r0
 801117a:	4668      	mov	r0, sp
 801117c:	f7f9 fa42 	bl	800a604 <lv_style_copy>
            style_tmp.body.empty = 1;
 8011180:	f89d 7026 	ldrb.w	r7, [sp, #38]	; 0x26
            style_tmp.body.shadow.width = 0;
 8011184:	f04f 0e00 	mov.w	lr, #0
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
 8011188:	4643      	mov	r3, r8
            style_tmp.body.empty = 1;
 801118a:	f047 0701 	orr.w	r7, r7, #1
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
 801118e:	466a      	mov	r2, sp
 8011190:	4631      	mov	r1, r6
 8011192:	f105 0010 	add.w	r0, r5, #16
            style_tmp.body.empty = 1;
 8011196:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
            style_tmp.body.shadow.width = 0;
 801119a:	f8ad e01c 	strh.w	lr, [sp, #28]
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
 801119e:	f7fb fd43 	bl	800cc28 <lv_draw_rect>
 80111a2:	e743      	b.n	801102c <lv_bar_design+0x1c>
                indic_area.y1 = (int32_t)((int32_t)h * (ext->cur_value - ext->min_value)) / (ext->max_value - ext->min_value);
 80111a4:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
 80111a8:	f9b4 1000 	ldrsh.w	r1, [r4]
 80111ac:	f9b4 e004 	ldrsh.w	lr, [r4, #4]
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 80111b0:	ea4f 79d5 	mov.w	r9, r5, lsr #31
                indic_area.y1 = (int32_t)((int32_t)h * (ext->cur_value - ext->min_value)) / (ext->max_value - ext->min_value);
 80111b4:	1b49      	subs	r1, r1, r5
 80111b6:	ebae 0805 	sub.w	r8, lr, r5
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 80111ba:	f1be 0f00 	cmp.w	lr, #0
 80111be:	bfd4      	ite	le
 80111c0:	f04f 0e00 	movle.w	lr, #0
 80111c4:	f009 0e01 	andgt.w	lr, r9, #1
                indic_area.y1 = (int32_t)((int32_t)h * (ext->cur_value - ext->min_value)) / (ext->max_value - ext->min_value);
 80111c8:	fb03 f101 	mul.w	r1, r3, r1
 80111cc:	fb91 f1f8 	sdiv	r1, r1, r8
                indic_area.y1 = indic_area.y2 - indic_area.y1 + 1;
 80111d0:	ebac 0101 	sub.w	r1, ip, r1
 80111d4:	b209      	sxth	r1, r1
 80111d6:	f8ad 1002 	strh.w	r1, [sp, #2]
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 80111da:	f1be 0f00 	cmp.w	lr, #0
 80111de:	d0a1      	beq.n	8011124 <lv_bar_design+0x114>
 80111e0:	79a4      	ldrb	r4, [r4, #6]
 80111e2:	07e4      	lsls	r4, r4, #31
 80111e4:	d59e      	bpl.n	8011124 <lv_bar_design+0x114>
                    zero = indic_area.y2 - (-ext->min_value * h) / (ext->max_value - ext->min_value);
 80111e6:	426d      	negs	r5, r5
 80111e8:	fb03 f305 	mul.w	r3, r3, r5
 80111ec:	fb93 f8f8 	sdiv	r8, r3, r8
 80111f0:	eba0 0008 	sub.w	r0, r0, r8
 80111f4:	b200      	sxth	r0, r0
                    if(indic_area.y1 < zero) indic_area.y2 = zero;
 80111f6:	4281      	cmp	r1, r0
 80111f8:	da07      	bge.n	801120a <lv_bar_design+0x1fa>
 80111fa:	f8ad 0006 	strh.w	r0, [sp, #6]
 80111fe:	e791      	b.n	8011124 <lv_bar_design+0x114>
        return  ancestor_design_f(bar, mask, mode);
 8011200:	4b07      	ldr	r3, [pc, #28]	; (8011220 <lv_bar_design+0x210>)
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	4798      	blx	r3
 8011206:	4604      	mov	r4, r0
 8011208:	e710      	b.n	801102c <lv_bar_design+0x1c>
                        indic_area.y2 = indic_area.y1;
 801120a:	f8ad 1006 	strh.w	r1, [sp, #6]
                        indic_area.y1 = zero;
 801120e:	f8ad 0002 	strh.w	r0, [sp, #2]
 8011212:	e787      	b.n	8011124 <lv_bar_design+0x114>
                        indic_area.x1 = indic_area.x2;
 8011214:	f8ad 3000 	strh.w	r3, [sp]
                        indic_area.x2 = zero;
 8011218:	f8ad 1004 	strh.w	r1, [sp, #4]
 801121c:	e782      	b.n	8011124 <lv_bar_design+0x114>
 801121e:	bf00      	nop
 8011220:	200174ac 	.word	0x200174ac

08011224 <lv_bar_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_bar_signal(lv_obj_t * bar, lv_signal_t sign, void * param)
{
 8011224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(bar, sign, param);
 8011226:	4b14      	ldr	r3, [pc, #80]	; (8011278 <lv_bar_signal+0x54>)
{
 8011228:	4607      	mov	r7, r0
 801122a:	460d      	mov	r5, r1
 801122c:	4616      	mov	r6, r2
    res = ancestor_signal(bar, sign, param);
 801122e:	685b      	ldr	r3, [r3, #4]
 8011230:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8011232:	2801      	cmp	r0, #1
    res = ancestor_signal(bar, sign, param);
 8011234:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
 8011236:	d001      	beq.n	801123c <lv_bar_signal+0x18>
        }
        buf->type[i] = "lv_bar";
    }

    return res;
}
 8011238:	4620      	mov	r0, r4
 801123a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(sign == LV_SIGNAL_REFR_EXT_SIZE) {
 801123c:	2d04      	cmp	r5, #4
 801123e:	d00e      	beq.n	801125e <lv_bar_signal+0x3a>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8011240:	2d06      	cmp	r5, #6
 8011242:	d1f9      	bne.n	8011238 <lv_bar_signal+0x14>
 8011244:	1f32      	subs	r2, r6, #4
 8011246:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 8011248:	f852 1f04 	ldr.w	r1, [r2, #4]!
 801124c:	b111      	cbz	r1, 8011254 <lv_bar_signal+0x30>
 801124e:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) {  /*Find the last set data*/
 8011250:	2b07      	cmp	r3, #7
 8011252:	d1f9      	bne.n	8011248 <lv_bar_signal+0x24>
        buf->type[i] = "lv_bar";
 8011254:	4a09      	ldr	r2, [pc, #36]	; (801127c <lv_bar_signal+0x58>)
}
 8011256:	4620      	mov	r0, r4
        buf->type[i] = "lv_bar";
 8011258:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
}
 801125c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 801125e:	4638      	mov	r0, r7
 8011260:	f7f8 fcf0 	bl	8009c44 <lv_obj_get_ext_attr>
        if(style_indic->body.shadow.width > bar->ext_size) bar->ext_size = style_indic->body.shadow.width;
 8011264:	6883      	ldr	r3, [r0, #8]
 8011266:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 801126a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801126e:	429a      	cmp	r2, r3
 8011270:	dae2      	bge.n	8011238 <lv_bar_signal+0x14>
 8011272:	86bb      	strh	r3, [r7, #52]	; 0x34
 8011274:	e7e0      	b.n	8011238 <lv_bar_signal+0x14>
 8011276:	bf00      	nop
 8011278:	200174ac 	.word	0x200174ac
 801127c:	0808ba54 	.word	0x0808ba54

08011280 <lv_bar_create>:
{
 8011280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011282:	460e      	mov	r6, r1
    lv_obj_t * new_bar = lv_obj_create(par, copy);
 8011284:	f7f7 fed0 	bl	8009028 <lv_obj_create>
    lv_mem_assert(new_bar);
 8011288:	2800      	cmp	r0, #0
 801128a:	d042      	beq.n	8011312 <lv_bar_create+0x92>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_bar);
 801128c:	4d3c      	ldr	r5, [pc, #240]	; (8011380 <lv_bar_create+0x100>)
 801128e:	4604      	mov	r4, r0
 8011290:	686b      	ldr	r3, [r5, #4]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d03e      	beq.n	8011314 <lv_bar_create+0x94>
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_func(new_bar);
 8011296:	682b      	ldr	r3, [r5, #0]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d041      	beq.n	8011320 <lv_bar_create+0xa0>
    lv_bar_ext_t * ext = lv_obj_allocate_ext_attr(new_bar, sizeof(lv_bar_ext_t));
 801129c:	210c      	movs	r1, #12
 801129e:	4620      	mov	r0, r4
 80112a0:	f7f8 fa5e 	bl	8009760 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 80112a4:	4605      	mov	r5, r0
 80112a6:	2800      	cmp	r0, #0
 80112a8:	d032      	beq.n	8011310 <lv_bar_create+0x90>
    ext->sym = 0;
 80112aa:	7982      	ldrb	r2, [r0, #6]
    ext->min_value = 0;
 80112ac:	2300      	movs	r3, #0
    ext->style_indic = &lv_style_pretty_color;
 80112ae:	4935      	ldr	r1, [pc, #212]	; (8011384 <lv_bar_create+0x104>)
    ext->max_value = 100;
 80112b0:	2764      	movs	r7, #100	; 0x64
    ext->sym = 0;
 80112b2:	f363 0200 	bfi	r2, r3, #0, #1
    ext->min_value = 0;
 80112b6:	8043      	strh	r3, [r0, #2]
    ext->cur_value = 0;
 80112b8:	8003      	strh	r3, [r0, #0]
    lv_obj_set_signal_func(new_bar, lv_bar_signal);
 80112ba:	4620      	mov	r0, r4
    ext->style_indic = &lv_style_pretty_color;
 80112bc:	60a9      	str	r1, [r5, #8]
    ext->sym = 0;
 80112be:	71aa      	strb	r2, [r5, #6]
    lv_obj_set_signal_func(new_bar, lv_bar_signal);
 80112c0:	4931      	ldr	r1, [pc, #196]	; (8011388 <lv_bar_create+0x108>)
    ext->max_value = 100;
 80112c2:	80af      	strh	r7, [r5, #4]
    lv_obj_set_signal_func(new_bar, lv_bar_signal);
 80112c4:	f7f8 fa48 	bl	8009758 <lv_obj_set_signal_func>
    lv_obj_set_design_func(new_bar, lv_bar_design);
 80112c8:	4930      	ldr	r1, [pc, #192]	; (801138c <lv_bar_create+0x10c>)
 80112ca:	4620      	mov	r0, r4
 80112cc:	f7f8 fa46 	bl	800975c <lv_obj_set_design_func>
    if(copy == NULL) {
 80112d0:	b35e      	cbz	r6, 801132a <lv_bar_create+0xaa>
        lv_bar_ext_t * ext_copy = lv_obj_get_ext_attr(copy);
 80112d2:	4630      	mov	r0, r6
 80112d4:	f7f8 fcb6 	bl	8009c44 <lv_obj_get_ext_attr>
 80112d8:	4603      	mov	r3, r0
        ext->sym = ext_copy->sym;
 80112da:	79aa      	ldrb	r2, [r5, #6]
        lv_obj_refresh_style(new_bar);
 80112dc:	4620      	mov	r0, r4
        ext->style_indic = ext_copy->style_indic;
 80112de:	689f      	ldr	r7, [r3, #8]
        ext->min_value = ext_copy->min_value;
 80112e0:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
        ext->max_value = ext_copy->max_value;
 80112e4:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
        ext->cur_value = ext_copy->cur_value;
 80112e8:	f9b3 1000 	ldrsh.w	r1, [r3]
        ext->style_indic = ext_copy->style_indic;
 80112ec:	60af      	str	r7, [r5, #8]
        ext->sym = ext_copy->sym;
 80112ee:	799b      	ldrb	r3, [r3, #6]
        ext->min_value = ext_copy->min_value;
 80112f0:	f8a5 e002 	strh.w	lr, [r5, #2]
        ext->sym = ext_copy->sym;
 80112f4:	f363 0200 	bfi	r2, r3, #0, #1
        ext->cur_value = ext_copy->cur_value;
 80112f8:	8029      	strh	r1, [r5, #0]
        ext->max_value = ext_copy->max_value;
 80112fa:	80ae      	strh	r6, [r5, #4]
        ext->sym = ext_copy->sym;
 80112fc:	71aa      	strb	r2, [r5, #6]
        lv_obj_refresh_style(new_bar);
 80112fe:	f7f8 f9cd 	bl	800969c <lv_obj_refresh_style>
        lv_bar_set_value(new_bar, ext->cur_value);
 8011302:	4620      	mov	r0, r4
 8011304:	f9b5 1000 	ldrsh.w	r1, [r5]
 8011308:	f7ff fe66 	bl	8010fd8 <lv_bar_set_value>
}
 801130c:	4620      	mov	r0, r4
 801130e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011310:	e7fe      	b.n	8011310 <lv_bar_create+0x90>
 8011312:	e7fe      	b.n	8011312 <lv_bar_create+0x92>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_bar);
 8011314:	f7f8 fc92 	bl	8009c3c <lv_obj_get_signal_func>
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_func(new_bar);
 8011318:	682b      	ldr	r3, [r5, #0]
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_bar);
 801131a:	6068      	str	r0, [r5, #4]
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_func(new_bar);
 801131c:	2b00      	cmp	r3, #0
 801131e:	d1bd      	bne.n	801129c <lv_bar_create+0x1c>
 8011320:	4620      	mov	r0, r4
 8011322:	f7f8 fc8d 	bl	8009c40 <lv_obj_get_design_func>
 8011326:	6028      	str	r0, [r5, #0]
 8011328:	e7b8      	b.n	801129c <lv_bar_create+0x1c>
        lv_obj_set_click(new_bar, false);
 801132a:	4631      	mov	r1, r6
 801132c:	4620      	mov	r0, r4
 801132e:	f7f8 f9df 	bl	80096f0 <lv_obj_set_click>
        lv_obj_set_size(new_bar, LV_DPI * 2, LV_DPI / 3);
 8011332:	2221      	movs	r2, #33	; 0x21
 8011334:	21c8      	movs	r1, #200	; 0xc8
 8011336:	4620      	mov	r0, r4
 8011338:	f7f7 ffb8 	bl	80092ac <lv_obj_set_size>
        lv_bar_set_value(new_bar, ext->cur_value);
 801133c:	f9b5 1000 	ldrsh.w	r1, [r5]
 8011340:	4620      	mov	r0, r4
 8011342:	f7ff fe49 	bl	8010fd8 <lv_bar_set_value>
        lv_theme_t * th = lv_theme_get_current();
 8011346:	f008 f967 	bl	8019618 <lv_theme_get_current>
        if(th) {
 801134a:	4605      	mov	r5, r0
 801134c:	b188      	cbz	r0, 8011372 <lv_bar_create+0xf2>
            lv_bar_set_style(new_bar, LV_BAR_STYLE_BG, th->bar.bg);
 801134e:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8011350:	4620      	mov	r0, r4
 8011352:	f7f8 fc77 	bl	8009c44 <lv_obj_get_ext_attr>
            lv_obj_set_style(bar, style);
 8011356:	4620      	mov	r0, r4
 8011358:	4631      	mov	r1, r6
 801135a:	f7f8 facb 	bl	80098f4 <lv_obj_set_style>
            lv_bar_set_style(new_bar, LV_BAR_STYLE_INDIC, th->bar.indic);
 801135e:	6c2d      	ldr	r5, [r5, #64]	; 0x40
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8011360:	4620      	mov	r0, r4
 8011362:	f7f8 fc6f 	bl	8009c44 <lv_obj_get_ext_attr>
            ext->style_indic = style;
 8011366:	6085      	str	r5, [r0, #8]
            lv_obj_refresh_ext_size(bar);
 8011368:	4620      	mov	r0, r4
 801136a:	f7f8 fa01 	bl	8009770 <lv_obj_refresh_ext_size>
}
 801136e:	4620      	mov	r0, r4
 8011370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_obj_set_style(new_bar, &lv_style_pretty);
 8011372:	4620      	mov	r0, r4
 8011374:	4906      	ldr	r1, [pc, #24]	; (8011390 <lv_bar_create+0x110>)
 8011376:	f7f8 fabd 	bl	80098f4 <lv_obj_set_style>
}
 801137a:	4620      	mov	r0, r4
 801137c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801137e:	bf00      	nop
 8011380:	200174ac 	.word	0x200174ac
 8011384:	20017c40 	.word	0x20017c40
 8011388:	08011225 	.word	0x08011225
 801138c:	08011011 	.word	0x08011011
 8011390:	20017d60 	.word	0x20017d60

08011394 <lv_bar_set_range>:
{
 8011394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011396:	460d      	mov	r5, r1
 8011398:	4616      	mov	r6, r2
 801139a:	4607      	mov	r7, r0
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 801139c:	f7f8 fc52 	bl	8009c44 <lv_obj_get_ext_attr>
    if(ext->min_value == min && ext->max_value == max) return;
 80113a0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 80113a4:	4604      	mov	r4, r0
    if(ext->min_value == min && ext->max_value == max) return;
 80113a6:	42ab      	cmp	r3, r5
 80113a8:	d00c      	beq.n	80113c4 <lv_bar_set_range+0x30>
    if(ext->cur_value > max) {
 80113aa:	f9b4 3000 	ldrsh.w	r3, [r4]
    ext->max_value = max;
 80113ae:	80a6      	strh	r6, [r4, #4]
    if(ext->cur_value > max) {
 80113b0:	429e      	cmp	r6, r3
    ext->min_value = min;
 80113b2:	8065      	strh	r5, [r4, #2]
    if(ext->cur_value > max) {
 80113b4:	db15      	blt.n	80113e2 <lv_bar_set_range+0x4e>
    if(ext->cur_value < min) {
 80113b6:	429d      	cmp	r5, r3
 80113b8:	dc09      	bgt.n	80113ce <lv_bar_set_range+0x3a>
    lv_obj_invalidate(bar);
 80113ba:	4638      	mov	r0, r7
}
 80113bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_obj_invalidate(bar);
 80113c0:	f7f7 bd3a 	b.w	8008e38 <lv_obj_invalidate>
    if(ext->min_value == min && ext->max_value == max) return;
 80113c4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80113c8:	42b3      	cmp	r3, r6
 80113ca:	d1ee      	bne.n	80113aa <lv_bar_set_range+0x16>
 80113cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_bar_set_value(bar, ext->cur_value);
 80113ce:	4638      	mov	r0, r7
        ext->cur_value = min;
 80113d0:	8025      	strh	r5, [r4, #0]
        lv_bar_set_value(bar, ext->cur_value);
 80113d2:	4629      	mov	r1, r5
 80113d4:	f7ff fe00 	bl	8010fd8 <lv_bar_set_value>
    lv_obj_invalidate(bar);
 80113d8:	4638      	mov	r0, r7
}
 80113da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_obj_invalidate(bar);
 80113de:	f7f7 bd2b 	b.w	8008e38 <lv_obj_invalidate>
        ext->cur_value = max;
 80113e2:	8026      	strh	r6, [r4, #0]
        lv_bar_set_value(bar, ext->cur_value);
 80113e4:	4631      	mov	r1, r6
 80113e6:	4638      	mov	r0, r7
 80113e8:	f7ff fdf6 	bl	8010fd8 <lv_bar_set_value>
 80113ec:	f9b4 3000 	ldrsh.w	r3, [r4]
 80113f0:	e7e1      	b.n	80113b6 <lv_bar_set_range+0x22>
 80113f2:	bf00      	nop

080113f4 <lv_bar_set_style>:
{
 80113f4:	b570      	push	{r4, r5, r6, lr}
 80113f6:	460c      	mov	r4, r1
 80113f8:	4616      	mov	r6, r2
 80113fa:	4605      	mov	r5, r0
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 80113fc:	f7f8 fc22 	bl	8009c44 <lv_obj_get_ext_attr>
    switch(type) {
 8011400:	b144      	cbz	r4, 8011414 <lv_bar_set_style+0x20>
 8011402:	2c01      	cmp	r4, #1
 8011404:	d105      	bne.n	8011412 <lv_bar_set_style+0x1e>
            ext->style_indic = style;
 8011406:	6086      	str	r6, [r0, #8]
            lv_obj_refresh_ext_size(bar);
 8011408:	4628      	mov	r0, r5
}
 801140a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_obj_refresh_ext_size(bar);
 801140e:	f7f8 b9af 	b.w	8009770 <lv_obj_refresh_ext_size>
 8011412:	bd70      	pop	{r4, r5, r6, pc}
            lv_obj_set_style(bar, style);
 8011414:	4631      	mov	r1, r6
 8011416:	4628      	mov	r0, r5
}
 8011418:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_obj_set_style(bar, style);
 801141c:	f7f8 ba6a 	b.w	80098f4 <lv_obj_set_style>

08011420 <lv_bar_get_value>:
{
 8011420:	b508      	push	{r3, lr}
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8011422:	f7f8 fc0f 	bl	8009c44 <lv_obj_get_ext_attr>
}
 8011426:	f9b0 0000 	ldrsh.w	r0, [r0]
 801142a:	bd08      	pop	{r3, pc}

0801142c <lv_bar_get_min_value>:
{
 801142c:	b508      	push	{r3, lr}
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 801142e:	f7f8 fc09 	bl	8009c44 <lv_obj_get_ext_attr>
}
 8011432:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 8011436:	bd08      	pop	{r3, pc}

08011438 <lv_bar_get_max_value>:
{
 8011438:	b508      	push	{r3, lr}
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 801143a:	f7f8 fc03 	bl	8009c44 <lv_obj_get_ext_attr>
}
 801143e:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8011442:	bd08      	pop	{r3, pc}

08011444 <lv_bar_get_style>:
{
 8011444:	b538      	push	{r3, r4, r5, lr}
 8011446:	460c      	mov	r4, r1
 8011448:	4605      	mov	r5, r0
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 801144a:	f7f8 fbfb 	bl	8009c44 <lv_obj_get_ext_attr>
    switch(type) {
 801144e:	b12c      	cbz	r4, 801145c <lv_bar_get_style+0x18>
 8011450:	2c01      	cmp	r4, #1
 8011452:	d101      	bne.n	8011458 <lv_bar_get_style+0x14>
            style = ext->style_indic;
 8011454:	6880      	ldr	r0, [r0, #8]
            break;
 8011456:	bd38      	pop	{r3, r4, r5, pc}
            style = NULL;
 8011458:	2000      	movs	r0, #0
}
 801145a:	bd38      	pop	{r3, r4, r5, pc}
            style = lv_obj_get_style(bar);
 801145c:	4628      	mov	r0, r5
}
 801145e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            style = lv_obj_get_style(bar);
 8011462:	f7f8 bad5 	b.w	8009a10 <lv_obj_get_style>
 8011466:	bf00      	nop

08011468 <lv_btn_design>:
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_btn_design(lv_obj_t * btn, const lv_area_t * mask, lv_design_mode_t mode)
{
    if(mode == LV_DESIGN_COVER_CHK) {
 8011468:	2a02      	cmp	r2, #2
 801146a:	d006      	beq.n	801147a <lv_btn_design+0x12>
{
 801146c:	b510      	push	{r4, lr}
 801146e:	4614      	mov	r4, r2
        return false;
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 8011470:	b12a      	cbz	r2, 801147e <lv_btn_design+0x16>
            }
        }
#else
        ancestor_design(btn, mask, mode);
#endif
    } else if(mode == LV_DESIGN_DRAW_POST) {
 8011472:	2a01      	cmp	r2, #1
 8011474:	d008      	beq.n	8011488 <lv_btn_design+0x20>
        ancestor_design(btn, mask, mode);
    }

    return true;
 8011476:	2001      	movs	r0, #1
}
 8011478:	bd10      	pop	{r4, pc}
        return false;
 801147a:	2000      	movs	r0, #0
 801147c:	4770      	bx	lr
        ancestor_design(btn, mask, mode);
 801147e:	4b05      	ldr	r3, [pc, #20]	; (8011494 <lv_btn_design+0x2c>)
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	4798      	blx	r3
    return true;
 8011484:	2001      	movs	r0, #1
 8011486:	bd10      	pop	{r4, pc}
        ancestor_design(btn, mask, mode);
 8011488:	4b02      	ldr	r3, [pc, #8]	; (8011494 <lv_btn_design+0x2c>)
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	4798      	blx	r3
 801148e:	4620      	mov	r0, r4
 8011490:	bd10      	pop	{r4, pc}
 8011492:	bf00      	nop
 8011494:	200174b4 	.word	0x200174b4

08011498 <lv_btn_set_state>:
{
 8011498:	b538      	push	{r3, r4, r5, lr}
 801149a:	460c      	mov	r4, r1
 801149c:	4605      	mov	r5, r0
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 801149e:	f7f8 fbd1 	bl	8009c44 <lv_obj_get_ext_attr>
    if(ext->state != state) {
 80114a2:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 80114a6:	42a3      	cmp	r3, r4
 80114a8:	d009      	beq.n	80114be <lv_btn_set_state+0x26>
        lv_obj_set_style(btn, ext->styles[state]);
 80114aa:	eb00 0384 	add.w	r3, r0, r4, lsl #2
        ext->state = state;
 80114ae:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
        lv_obj_set_style(btn, ext->styles[state]);
 80114b2:	4628      	mov	r0, r5
 80114b4:	6959      	ldr	r1, [r3, #20]
}
 80114b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_obj_set_style(btn, ext->styles[state]);
 80114ba:	f7f8 ba1b 	b.w	80098f4 <lv_obj_set_style>
 80114be:	bd38      	pop	{r3, r4, r5, pc}

080114c0 <lv_btn_signal>:
static lv_res_t lv_btn_signal(lv_obj_t * btn, lv_signal_t sign, void * param)
{
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(btn, sign, param);
 80114c0:	4b8c      	ldr	r3, [pc, #560]	; (80116f4 <lv_btn_signal+0x234>)
{
 80114c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    res = ancestor_signal(btn, sign, param);
 80114c6:	685b      	ldr	r3, [r3, #4]
{
 80114c8:	4606      	mov	r6, r0
 80114ca:	460d      	mov	r5, r1
 80114cc:	4617      	mov	r7, r2
    res = ancestor_signal(btn, sign, param);
 80114ce:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 80114d0:	2801      	cmp	r0, #1
    res = ancestor_signal(btn, sign, param);
 80114d2:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
 80114d4:	d002      	beq.n	80114dc <lv_btn_signal+0x1c>
        }
        buf->type[i] = "lv_btn";
    }

    return res;
}
 80114d6:	4620      	mov	r0, r4
 80114d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 80114dc:	4630      	mov	r0, r6
 80114de:	f7f8 fbb1 	bl	8009c44 <lv_obj_get_ext_attr>
 80114e2:	4680      	mov	r8, r0
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 80114e4:	4630      	mov	r0, r6
 80114e6:	f7f8 fbad 	bl	8009c44 <lv_obj_get_ext_attr>
    return ext->state;
 80114ea:	f890 9028 	ldrb.w	r9, [r0, #40]	; 0x28
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 80114ee:	4630      	mov	r0, r6
 80114f0:	f7f8 fba8 	bl	8009c44 <lv_obj_get_ext_attr>
    if(sign == LV_SIGNAL_PRESSED) {
 80114f4:	2d08      	cmp	r5, #8
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 80114f6:	4603      	mov	r3, r0
    if(sign == LV_SIGNAL_PRESSED) {
 80114f8:	d029      	beq.n	801154e <lv_btn_signal+0x8e>
    } else if(sign == LV_SIGNAL_PRESS_LOST) {
 80114fa:	2d0a      	cmp	r5, #10
 80114fc:	d01c      	beq.n	8011538 <lv_btn_signal+0x78>
    } else if(sign == LV_SIGNAL_PRESSING) {
 80114fe:	2d09      	cmp	r5, #9
 8011500:	d015      	beq.n	801152e <lv_btn_signal+0x6e>
    } else if(sign == LV_SIGNAL_RELEASED) {
 8011502:	2d0b      	cmp	r5, #11
 8011504:	d05a      	beq.n	80115bc <lv_btn_signal+0xfc>
    } else if(sign == LV_SIGNAL_LONG_PRESS) {
 8011506:	2d0c      	cmp	r5, #12
 8011508:	d047      	beq.n	801159a <lv_btn_signal+0xda>
    } else if(sign == LV_SIGNAL_LONG_PRESS_REP) {
 801150a:	2d0d      	cmp	r5, #13
 801150c:	d03a      	beq.n	8011584 <lv_btn_signal+0xc4>
    } else if(sign == LV_SIGNAL_CONTROLL) {
 801150e:	2d12      	cmp	r5, #18
 8011510:	d06d      	beq.n	80115ee <lv_btn_signal+0x12e>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8011512:	2d06      	cmp	r5, #6
 8011514:	d1df      	bne.n	80114d6 <lv_btn_signal+0x16>
 8011516:	1f3a      	subs	r2, r7, #4
 8011518:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 801151a:	f852 1f04 	ldr.w	r1, [r2, #4]!
 801151e:	b111      	cbz	r1, 8011526 <lv_btn_signal+0x66>
 8011520:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) {  /*Find the last set data*/
 8011522:	2b07      	cmp	r3, #7
 8011524:	d1f9      	bne.n	801151a <lv_btn_signal+0x5a>
        buf->type[i] = "lv_btn";
 8011526:	4a74      	ldr	r2, [pc, #464]	; (80116f8 <lv_btn_signal+0x238>)
 8011528:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 801152c:	e7d3      	b.n	80114d6 <lv_btn_signal+0x16>
        if(lv_indev_is_dragging(param) != false) {
 801152e:	4638      	mov	r0, r7
 8011530:	f7f7 fbec 	bl	8008d0c <lv_indev_is_dragging>
 8011534:	2800      	cmp	r0, #0
 8011536:	d0ce      	beq.n	80114d6 <lv_btn_signal+0x16>
        if(ext->state == LV_BTN_STATE_PR) lv_btn_set_state(btn, LV_BTN_STATE_REL);
 8011538:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
 801153c:	2b01      	cmp	r3, #1
 801153e:	d072      	beq.n	8011626 <lv_btn_signal+0x166>
        else if(ext->state == LV_BTN_STATE_TGL_PR) lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 8011540:	2b03      	cmp	r3, #3
 8011542:	d1c8      	bne.n	80114d6 <lv_btn_signal+0x16>
 8011544:	4630      	mov	r0, r6
 8011546:	2102      	movs	r1, #2
 8011548:	f7ff ffa6 	bl	8011498 <lv_btn_set_state>
 801154c:	e7c3      	b.n	80114d6 <lv_btn_signal+0x16>
        if(ext->state == LV_BTN_STATE_REL) {
 801154e:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
 8011552:	b193      	cbz	r3, 801157a <lv_btn_signal+0xba>
        } else if(ext->state == LV_BTN_STATE_TGL_REL) {
 8011554:	2b02      	cmp	r3, #2
 8011556:	d061      	beq.n	801161c <lv_btn_signal+0x15c>
        ext->long_pr_action_executed = 0;
 8011558:	f898 3029 	ldrb.w	r3, [r8, #41]	; 0x29
        if(ext->actions[LV_BTN_ACTION_PR] && state != LV_BTN_STATE_INA) {
 801155c:	f1b9 0f04 	cmp.w	r9, #4
 8011560:	f8d8 2008 	ldr.w	r2, [r8, #8]
        ext->long_pr_action_executed = 0;
 8011564:	f36f 0341 	bfc	r3, #1, #1
 8011568:	f888 3029 	strb.w	r3, [r8, #41]	; 0x29
        if(ext->actions[LV_BTN_ACTION_PR] && state != LV_BTN_STATE_INA) {
 801156c:	d0b3      	beq.n	80114d6 <lv_btn_signal+0x16>
 801156e:	2a00      	cmp	r2, #0
 8011570:	d0b1      	beq.n	80114d6 <lv_btn_signal+0x16>
            res = ext->actions[LV_BTN_ACTION_PR](btn);
 8011572:	4630      	mov	r0, r6
}
 8011574:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            res = ext->actions[LV_BTN_ACTION_PR](btn);
 8011578:	4710      	bx	r2
            lv_btn_set_state(btn, LV_BTN_STATE_PR);
 801157a:	4621      	mov	r1, r4
 801157c:	4630      	mov	r0, r6
 801157e:	f7ff ff8b 	bl	8011498 <lv_btn_set_state>
 8011582:	e7e9      	b.n	8011558 <lv_btn_signal+0x98>
        if(ext->actions[LV_BTN_ACTION_LONG_PR_REPEAT] && state != LV_BTN_STATE_INA) {
 8011584:	f1b9 0f04 	cmp.w	r9, #4
 8011588:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801158c:	d0a3      	beq.n	80114d6 <lv_btn_signal+0x16>
 801158e:	2b00      	cmp	r3, #0
 8011590:	d0a1      	beq.n	80114d6 <lv_btn_signal+0x16>
                res = ext->actions[LV_BTN_ACTION_CLICK](btn);
 8011592:	4630      	mov	r0, r6
}
 8011594:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                res = ext->actions[LV_BTN_ACTION_CLICK](btn);
 8011598:	4718      	bx	r3
        if(ext->actions[LV_BTN_ACTION_LONG_PR] && state != LV_BTN_STATE_INA) {
 801159a:	f1b9 0f04 	cmp.w	r9, #4
 801159e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80115a2:	d098      	beq.n	80114d6 <lv_btn_signal+0x16>
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d096      	beq.n	80114d6 <lv_btn_signal+0x16>
            ext->long_pr_action_executed = 1;
 80115a8:	f898 2029 	ldrb.w	r2, [r8, #41]	; 0x29
            res = ext->actions[LV_BTN_ACTION_LONG_PR](btn);
 80115ac:	4630      	mov	r0, r6
            ext->long_pr_action_executed = 1;
 80115ae:	f042 0202 	orr.w	r2, r2, #2
 80115b2:	f888 2029 	strb.w	r2, [r8, #41]	; 0x29
}
 80115b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            res = ext->actions[LV_BTN_ACTION_LONG_PR](btn);
 80115ba:	4718      	bx	r3
        if(lv_indev_is_dragging(param) == false && ext->long_pr_action_executed == 0) {
 80115bc:	4638      	mov	r0, r7
    return ext->toggle != 0 ? true : false;
 80115be:	f893 5029 	ldrb.w	r5, [r3, #41]	; 0x29
        if(lv_indev_is_dragging(param) == false && ext->long_pr_action_executed == 0) {
 80115c2:	f7f7 fba3 	bl	8008d0c <lv_indev_is_dragging>
 80115c6:	2800      	cmp	r0, #0
 80115c8:	d1b6      	bne.n	8011538 <lv_btn_signal+0x78>
 80115ca:	f898 3029 	ldrb.w	r3, [r8, #41]	; 0x29
 80115ce:	079f      	lsls	r7, r3, #30
 80115d0:	d4b2      	bmi.n	8011538 <lv_btn_signal+0x78>
            if(ext->state == LV_BTN_STATE_PR && tgl == false) {
 80115d2:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
    return ext->toggle != 0 ? true : false;
 80115d6:	f005 0501 	and.w	r5, r5, #1
            if(ext->state == LV_BTN_STATE_PR && tgl == false) {
 80115da:	2b01      	cmp	r3, #1
 80115dc:	d04b      	beq.n	8011676 <lv_btn_signal+0x1b6>
            } else if(ext->state == LV_BTN_STATE_TGL_PR && tgl == false) {
 80115de:	2b03      	cmp	r3, #3
 80115e0:	d054      	beq.n	801168c <lv_btn_signal+0x1cc>
            if(ext->actions[LV_BTN_ACTION_CLICK] && state != LV_BTN_STATE_INA) {
 80115e2:	f1b9 0f04 	cmp.w	r9, #4
 80115e6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80115ea:	d1d0      	bne.n	801158e <lv_btn_signal+0xce>
 80115ec:	e773      	b.n	80114d6 <lv_btn_signal+0x16>
        char c = *((char *)param);
 80115ee:	783b      	ldrb	r3, [r7, #0]
        if(c == LV_GROUP_KEY_RIGHT || c == LV_GROUP_KEY_UP) {
 80115f0:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 80115f4:	2a11      	cmp	r2, #17
 80115f6:	d01b      	beq.n	8011630 <lv_btn_signal+0x170>
        } else if(c == LV_GROUP_KEY_LEFT || c == LV_GROUP_KEY_DOWN) {
 80115f8:	2b14      	cmp	r3, #20
 80115fa:	d030      	beq.n	801165e <lv_btn_signal+0x19e>
 80115fc:	2b12      	cmp	r3, #18
 80115fe:	d02e      	beq.n	801165e <lv_btn_signal+0x19e>
        } else if(c == LV_GROUP_KEY_ENTER) {
 8011600:	2b0a      	cmp	r3, #10
 8011602:	f47f af68 	bne.w	80114d6 <lv_btn_signal+0x16>
            if(!ext->long_pr_action_executed) {
 8011606:	f898 3029 	ldrb.w	r3, [r8, #41]	; 0x29
 801160a:	079a      	lsls	r2, r3, #30
 801160c:	d545      	bpl.n	801169a <lv_btn_signal+0x1da>
                ext->long_pr_action_executed  = 0;
 801160e:	f898 3029 	ldrb.w	r3, [r8, #41]	; 0x29
 8011612:	f36f 0341 	bfc	r3, #1, #1
 8011616:	f888 3029 	strb.w	r3, [r8, #41]	; 0x29
 801161a:	e75c      	b.n	80114d6 <lv_btn_signal+0x16>
            lv_btn_set_state(btn, LV_BTN_STATE_TGL_PR);
 801161c:	2103      	movs	r1, #3
 801161e:	4630      	mov	r0, r6
 8011620:	f7ff ff3a 	bl	8011498 <lv_btn_set_state>
 8011624:	e798      	b.n	8011558 <lv_btn_signal+0x98>
        if(ext->state == LV_BTN_STATE_PR) lv_btn_set_state(btn, LV_BTN_STATE_REL);
 8011626:	4630      	mov	r0, r6
 8011628:	2100      	movs	r1, #0
 801162a:	f7ff ff35 	bl	8011498 <lv_btn_set_state>
 801162e:	e752      	b.n	80114d6 <lv_btn_signal+0x16>
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8011630:	4630      	mov	r0, r6
 8011632:	f7f8 fb07 	bl	8009c44 <lv_obj_get_ext_attr>
    return ext->toggle != 0 ? true : false;
 8011636:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
            if(lv_btn_get_toggle(btn) != false) lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 801163a:	07d8      	lsls	r0, r3, #31
 801163c:	d421      	bmi.n	8011682 <lv_btn_signal+0x1c2>
            if(ext->actions[LV_BTN_ACTION_CLICK] && lv_btn_get_state(btn) != LV_BTN_STATE_INA) {
 801163e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011642:	2b00      	cmp	r3, #0
 8011644:	f43f af47 	beq.w	80114d6 <lv_btn_signal+0x16>
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8011648:	4630      	mov	r0, r6
 801164a:	f7f8 fafb 	bl	8009c44 <lv_obj_get_ext_attr>
            if(ext->actions[LV_BTN_ACTION_CLICK] && lv_btn_get_state(btn) != LV_BTN_STATE_INA) {
 801164e:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8011652:	2b04      	cmp	r3, #4
 8011654:	f43f af3f 	beq.w	80114d6 <lv_btn_signal+0x16>
                res = ext->actions[LV_BTN_ACTION_CLICK](btn);
 8011658:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801165c:	e799      	b.n	8011592 <lv_btn_signal+0xd2>
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 801165e:	4630      	mov	r0, r6
 8011660:	f7f8 faf0 	bl	8009c44 <lv_obj_get_ext_attr>
    return ext->toggle != 0 ? true : false;
 8011664:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
            if(lv_btn_get_toggle(btn) != false) lv_btn_set_state(btn, LV_BTN_STATE_REL);
 8011668:	07d9      	lsls	r1, r3, #31
 801166a:	d5e8      	bpl.n	801163e <lv_btn_signal+0x17e>
 801166c:	2100      	movs	r1, #0
 801166e:	4630      	mov	r0, r6
 8011670:	f7ff ff12 	bl	8011498 <lv_btn_set_state>
 8011674:	e7e3      	b.n	801163e <lv_btn_signal+0x17e>
            if(ext->state == LV_BTN_STATE_PR && tgl == false) {
 8011676:	b15d      	cbz	r5, 8011690 <lv_btn_signal+0x1d0>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 8011678:	2102      	movs	r1, #2
 801167a:	4630      	mov	r0, r6
 801167c:	f7ff ff0c 	bl	8011498 <lv_btn_set_state>
 8011680:	e7af      	b.n	80115e2 <lv_btn_signal+0x122>
            if(lv_btn_get_toggle(btn) != false) lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 8011682:	2102      	movs	r1, #2
 8011684:	4630      	mov	r0, r6
 8011686:	f7ff ff07 	bl	8011498 <lv_btn_set_state>
 801168a:	e7d8      	b.n	801163e <lv_btn_signal+0x17e>
            } else if(ext->state == LV_BTN_STATE_TGL_PR && tgl == false) {
 801168c:	2d00      	cmp	r5, #0
 801168e:	d0f3      	beq.n	8011678 <lv_btn_signal+0x1b8>
                lv_btn_set_state(btn, LV_BTN_STATE_REL);
 8011690:	2100      	movs	r1, #0
 8011692:	4630      	mov	r0, r6
 8011694:	f7ff ff00 	bl	8011498 <lv_btn_set_state>
 8011698:	e7a3      	b.n	80115e2 <lv_btn_signal+0x122>
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 801169a:	4630      	mov	r0, r6
 801169c:	f7f8 fad2 	bl	8009c44 <lv_obj_get_ext_attr>
    return ext->toggle != 0 ? true : false;
 80116a0:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
                if(lv_btn_get_toggle(btn)) {
 80116a4:	07db      	lsls	r3, r3, #31
 80116a6:	d514      	bpl.n	80116d2 <lv_btn_signal+0x212>
                    if(state == LV_BTN_STATE_REL || state == LV_BTN_STATE_PR) lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 80116a8:	f1b9 0f01 	cmp.w	r9, #1
 80116ac:	d918      	bls.n	80116e0 <lv_btn_signal+0x220>
                    else if(state == LV_BTN_STATE_TGL_REL || state == LV_BTN_STATE_TGL_PR) lv_btn_set_state(btn, LV_BTN_STATE_REL);
 80116ae:	f1a9 0302 	sub.w	r3, r9, #2
 80116b2:	2b01      	cmp	r3, #1
 80116b4:	d919      	bls.n	80116ea <lv_btn_signal+0x22a>
                if(ext->actions[LV_BTN_ACTION_CLICK] && state != LV_BTN_STATE_INA) {
 80116b6:	f1b9 0f04 	cmp.w	r9, #4
 80116ba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80116be:	d0a6      	beq.n	801160e <lv_btn_signal+0x14e>
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d0a4      	beq.n	801160e <lv_btn_signal+0x14e>
                    res = ext->actions[LV_BTN_ACTION_CLICK](btn);
 80116c4:	4630      	mov	r0, r6
 80116c6:	4798      	blx	r3
            if(res != LV_RES_INV) {
 80116c8:	4604      	mov	r4, r0
 80116ca:	2800      	cmp	r0, #0
 80116cc:	f43f af03 	beq.w	80114d6 <lv_btn_signal+0x16>
 80116d0:	e79d      	b.n	801160e <lv_btn_signal+0x14e>
                    if(state == LV_BTN_STATE_REL || state == LV_BTN_STATE_PR) lv_btn_set_state(btn, LV_BTN_STATE_REL);
 80116d2:	f1b9 0f01 	cmp.w	r9, #1
 80116d6:	d908      	bls.n	80116ea <lv_btn_signal+0x22a>
                    else if(state == LV_BTN_STATE_TGL_REL || state == LV_BTN_STATE_TGL_PR) lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 80116d8:	f1a9 0302 	sub.w	r3, r9, #2
 80116dc:	2b01      	cmp	r3, #1
 80116de:	d8ea      	bhi.n	80116b6 <lv_btn_signal+0x1f6>
                    if(state == LV_BTN_STATE_REL || state == LV_BTN_STATE_PR) lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 80116e0:	2102      	movs	r1, #2
 80116e2:	4630      	mov	r0, r6
 80116e4:	f7ff fed8 	bl	8011498 <lv_btn_set_state>
 80116e8:	e7e5      	b.n	80116b6 <lv_btn_signal+0x1f6>
                    else if(state == LV_BTN_STATE_TGL_REL || state == LV_BTN_STATE_TGL_PR) lv_btn_set_state(btn, LV_BTN_STATE_REL);
 80116ea:	2100      	movs	r1, #0
 80116ec:	4630      	mov	r0, r6
 80116ee:	f7ff fed3 	bl	8011498 <lv_btn_set_state>
 80116f2:	e7e0      	b.n	80116b6 <lv_btn_signal+0x1f6>
 80116f4:	200174b4 	.word	0x200174b4
 80116f8:	0808ba5c 	.word	0x0808ba5c

080116fc <lv_btn_set_action>:
    if(type >= LV_BTN_ACTION_NUM) return;
 80116fc:	2903      	cmp	r1, #3
 80116fe:	d900      	bls.n	8011702 <lv_btn_set_action+0x6>
 8011700:	4770      	bx	lr
{
 8011702:	b538      	push	{r3, r4, r5, lr}
 8011704:	460c      	mov	r4, r1
 8011706:	4615      	mov	r5, r2
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8011708:	f7f8 fa9c 	bl	8009c44 <lv_obj_get_ext_attr>
    ext->actions[type] = action;
 801170c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8011710:	6045      	str	r5, [r0, #4]
 8011712:	bd38      	pop	{r3, r4, r5, pc}

08011714 <lv_btn_set_style>:
{
 8011714:	b570      	push	{r4, r5, r6, lr}
 8011716:	460c      	mov	r4, r1
 8011718:	4616      	mov	r6, r2
 801171a:	4605      	mov	r5, r0
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 801171c:	f7f8 fa92 	bl	8009c44 <lv_obj_get_ext_attr>
 8011720:	4603      	mov	r3, r0
    switch(type) {
 8011722:	2c04      	cmp	r4, #4
 8011724:	d805      	bhi.n	8011732 <lv_btn_set_style+0x1e>
 8011726:	e8df f004 	tbb	[pc, r4]
 801172a:	100e      	.short	0x100e
 801172c:	1412      	.short	0x1412
 801172e:	03          	.byte	0x03
 801172f:	00          	.byte	0x00
            ext->styles[LV_BTN_STATE_INA] = style;
 8011730:	6246      	str	r6, [r0, #36]	; 0x24
    lv_obj_set_style(btn, ext->styles[ext->state]);
 8011732:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8011736:	4628      	mov	r0, r5
 8011738:	eb03 0382 	add.w	r3, r3, r2, lsl #2
}
 801173c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_set_style(btn, ext->styles[ext->state]);
 8011740:	6959      	ldr	r1, [r3, #20]
 8011742:	f7f8 b8d7 	b.w	80098f4 <lv_obj_set_style>
            ext->styles[LV_BTN_STATE_REL] = style;
 8011746:	6146      	str	r6, [r0, #20]
            break;
 8011748:	e7f3      	b.n	8011732 <lv_btn_set_style+0x1e>
            ext->styles[LV_BTN_STATE_PR] = style;
 801174a:	6186      	str	r6, [r0, #24]
            break;
 801174c:	e7f1      	b.n	8011732 <lv_btn_set_style+0x1e>
            ext->styles[LV_BTN_STATE_TGL_REL] = style;
 801174e:	61c6      	str	r6, [r0, #28]
            break;
 8011750:	e7ef      	b.n	8011732 <lv_btn_set_style+0x1e>
            ext->styles[LV_BTN_STATE_TGL_PR] = style;
 8011752:	6206      	str	r6, [r0, #32]
            break;
 8011754:	e7ed      	b.n	8011732 <lv_btn_set_style+0x1e>
 8011756:	bf00      	nop

08011758 <lv_btn_create>:
{
 8011758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801175a:	4607      	mov	r7, r0
 801175c:	460e      	mov	r6, r1
    new_btn = lv_cont_create(par, copy);
 801175e:	f002 f8db 	bl	8013918 <lv_cont_create>
    lv_mem_assert(new_btn);
 8011762:	2800      	cmp	r0, #0
 8011764:	d064      	beq.n	8011830 <lv_btn_create+0xd8>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_btn);
 8011766:	4c4e      	ldr	r4, [pc, #312]	; (80118a0 <lv_btn_create+0x148>)
 8011768:	4605      	mov	r5, r0
 801176a:	6863      	ldr	r3, [r4, #4]
 801176c:	2b00      	cmp	r3, #0
 801176e:	f000 808d 	beq.w	801188c <lv_btn_create+0x134>
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_func(new_btn);
 8011772:	6823      	ldr	r3, [r4, #0]
 8011774:	2b00      	cmp	r3, #0
 8011776:	f000 8084 	beq.w	8011882 <lv_btn_create+0x12a>
    lv_btn_ext_t * ext = lv_obj_allocate_ext_attr(new_btn, sizeof(lv_btn_ext_t));
 801177a:	212c      	movs	r1, #44	; 0x2c
 801177c:	4628      	mov	r0, r5
 801177e:	f7f7 ffef 	bl	8009760 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 8011782:	4604      	mov	r4, r0
 8011784:	2800      	cmp	r0, #0
 8011786:	d052      	beq.n	801182e <lv_btn_create+0xd6>
    ext->long_pr_action_executed = 0;
 8011788:	f890 2029 	ldrb.w	r2, [r0, #41]	; 0x29
    ext->state = LV_BTN_STATE_REL;
 801178c:	2300      	movs	r3, #0
    ext->styles[LV_BTN_STATE_REL] = &lv_style_btn_rel;
 801178e:	f8df c128 	ldr.w	ip, [pc, #296]	; 80118b8 <lv_btn_create+0x160>
    lv_obj_set_signal_func(new_btn, lv_btn_signal);
 8011792:	4628      	mov	r0, r5
    ext->toggle = 0;
 8011794:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    ext->styles[LV_BTN_STATE_PR] = &lv_style_btn_pr;
 8011798:	f8df e120 	ldr.w	lr, [pc, #288]	; 80118bc <lv_btn_create+0x164>
    ext->state = LV_BTN_STATE_REL;
 801179c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    ext->toggle = 0;
 80117a0:	f363 0200 	bfi	r2, r3, #0, #1
    ext->actions[LV_BTN_ACTION_PR] = NULL;
 80117a4:	60a3      	str	r3, [r4, #8]
    ext->actions[LV_BTN_ACTION_CLICK] = NULL;
 80117a6:	6063      	str	r3, [r4, #4]
    ext->toggle = 0;
 80117a8:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
    ext->actions[LV_BTN_ACTION_LONG_PR] = NULL;
 80117ac:	60e3      	str	r3, [r4, #12]
    ext->actions[LV_BTN_ACTION_LONG_PR_REPEAT] = NULL;
 80117ae:	6123      	str	r3, [r4, #16]
    ext->styles[LV_BTN_STATE_TGL_REL] = &lv_style_btn_tgl_rel;
 80117b0:	493c      	ldr	r1, [pc, #240]	; (80118a4 <lv_btn_create+0x14c>)
    ext->styles[LV_BTN_STATE_TGL_PR] = &lv_style_btn_tgl_pr;
 80117b2:	4a3d      	ldr	r2, [pc, #244]	; (80118a8 <lv_btn_create+0x150>)
    ext->styles[LV_BTN_STATE_INA] = &lv_style_btn_ina;
 80117b4:	4b3d      	ldr	r3, [pc, #244]	; (80118ac <lv_btn_create+0x154>)
    ext->styles[LV_BTN_STATE_TGL_REL] = &lv_style_btn_tgl_rel;
 80117b6:	61e1      	str	r1, [r4, #28]
    ext->styles[LV_BTN_STATE_REL] = &lv_style_btn_rel;
 80117b8:	f8c4 c014 	str.w	ip, [r4, #20]
    lv_obj_set_signal_func(new_btn, lv_btn_signal);
 80117bc:	493c      	ldr	r1, [pc, #240]	; (80118b0 <lv_btn_create+0x158>)
    ext->styles[LV_BTN_STATE_PR] = &lv_style_btn_pr;
 80117be:	f8c4 e018 	str.w	lr, [r4, #24]
    ext->styles[LV_BTN_STATE_TGL_PR] = &lv_style_btn_tgl_pr;
 80117c2:	6222      	str	r2, [r4, #32]
    ext->styles[LV_BTN_STATE_INA] = &lv_style_btn_ina;
 80117c4:	6263      	str	r3, [r4, #36]	; 0x24
    lv_obj_set_signal_func(new_btn, lv_btn_signal);
 80117c6:	f7f7 ffc7 	bl	8009758 <lv_obj_set_signal_func>
    lv_obj_set_design_func(new_btn, lv_btn_design);
 80117ca:	493a      	ldr	r1, [pc, #232]	; (80118b4 <lv_btn_create+0x15c>)
 80117cc:	4628      	mov	r0, r5
 80117ce:	f7f7 ffc5 	bl	800975c <lv_obj_set_design_func>
    if(copy == NULL) {
 80117d2:	b376      	cbz	r6, 8011832 <lv_btn_create+0xda>
        lv_btn_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 80117d4:	4630      	mov	r0, r6
 80117d6:	f7f8 fa35 	bl	8009c44 <lv_obj_get_ext_attr>
        ext->state = copy_ext->state;
 80117da:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
        memcpy(ext->styles, copy_ext->styles, sizeof(ext->styles));
 80117de:	4603      	mov	r3, r0
        memcpy(ext->actions, copy_ext->actions, sizeof(ext->actions));
 80117e0:	4602      	mov	r2, r0
        ext->state = copy_ext->state;
 80117e2:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
        ext->toggle = copy_ext->toggle;
 80117e6:	f894 7029 	ldrb.w	r7, [r4, #41]	; 0x29
 80117ea:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 80117ee:	f360 0700 	bfi	r7, r0, #0, #1
 80117f2:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
        memcpy(ext->actions, copy_ext->actions, sizeof(ext->actions));
 80117f6:	f852 ef04 	ldr.w	lr, [r2, #4]!
 80117fa:	6857      	ldr	r7, [r2, #4]
 80117fc:	6890      	ldr	r0, [r2, #8]
 80117fe:	68d2      	ldr	r2, [r2, #12]
 8011800:	60e0      	str	r0, [r4, #12]
        lv_obj_refresh_style(new_btn);
 8011802:	4628      	mov	r0, r5
        memcpy(ext->actions, copy_ext->actions, sizeof(ext->actions));
 8011804:	f8c4 e004 	str.w	lr, [r4, #4]
 8011808:	60a7      	str	r7, [r4, #8]
 801180a:	6122      	str	r2, [r4, #16]
        memcpy(ext->styles, copy_ext->styles, sizeof(ext->styles));
 801180c:	f853 2f14 	ldr.w	r2, [r3, #20]!
 8011810:	f8d3 e004 	ldr.w	lr, [r3, #4]
 8011814:	689f      	ldr	r7, [r3, #8]
 8011816:	68de      	ldr	r6, [r3, #12]
 8011818:	6162      	str	r2, [r4, #20]
 801181a:	f8c4 e018 	str.w	lr, [r4, #24]
 801181e:	61e7      	str	r7, [r4, #28]
 8011820:	6226      	str	r6, [r4, #32]
 8011822:	691a      	ldr	r2, [r3, #16]
 8011824:	6262      	str	r2, [r4, #36]	; 0x24
        lv_obj_refresh_style(new_btn);
 8011826:	f7f7 ff39 	bl	800969c <lv_obj_refresh_style>
}
 801182a:	4628      	mov	r0, r5
 801182c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801182e:	e7fe      	b.n	801182e <lv_btn_create+0xd6>
 8011830:	e7fe      	b.n	8011830 <lv_btn_create+0xd8>
        if(par != NULL) {
 8011832:	b11f      	cbz	r7, 801183c <lv_btn_create+0xe4>
 * @param btn pointer to a button object
 * @param layout a layout from 'lv_cont_layout_t'
 */
static inline void lv_btn_set_layout(lv_obj_t * btn, lv_layout_t layout)
{
    lv_cont_set_layout(btn, layout);
 8011834:	2101      	movs	r1, #1
 8011836:	4628      	mov	r0, r5
 8011838:	f002 f8c8 	bl	80139cc <lv_cont_set_layout>
        lv_obj_set_click(new_btn, true);        /*Be sure the button is clickable*/
 801183c:	2101      	movs	r1, #1
 801183e:	4628      	mov	r0, r5
 8011840:	f7f7 ff56 	bl	80096f0 <lv_obj_set_click>
        lv_theme_t * th = lv_theme_get_current();
 8011844:	f007 fee8 	bl	8019618 <lv_theme_get_current>
        if(th) {
 8011848:	4606      	mov	r6, r0
 801184a:	b318      	cbz	r0, 8011894 <lv_btn_create+0x13c>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_REL, th->btn.rel);
 801184c:	68c2      	ldr	r2, [r0, #12]
 801184e:	2100      	movs	r1, #0
 8011850:	4628      	mov	r0, r5
 8011852:	f7ff ff5f 	bl	8011714 <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_PR, th->btn.pr);
 8011856:	6932      	ldr	r2, [r6, #16]
 8011858:	4628      	mov	r0, r5
 801185a:	2101      	movs	r1, #1
 801185c:	f7ff ff5a 	bl	8011714 <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_TGL_REL, th->btn.tgl_rel);
 8011860:	6972      	ldr	r2, [r6, #20]
 8011862:	4628      	mov	r0, r5
 8011864:	2102      	movs	r1, #2
 8011866:	f7ff ff55 	bl	8011714 <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_TGL_PR, th->btn.tgl_pr);
 801186a:	69b2      	ldr	r2, [r6, #24]
 801186c:	4628      	mov	r0, r5
 801186e:	2103      	movs	r1, #3
 8011870:	f7ff ff50 	bl	8011714 <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_INA, th->btn.ina);
 8011874:	4628      	mov	r0, r5
 8011876:	69f2      	ldr	r2, [r6, #28]
 8011878:	2104      	movs	r1, #4
 801187a:	f7ff ff4b 	bl	8011714 <lv_btn_set_style>
}
 801187e:	4628      	mov	r0, r5
 8011880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_func(new_btn);
 8011882:	4628      	mov	r0, r5
 8011884:	f7f8 f9dc 	bl	8009c40 <lv_obj_get_design_func>
 8011888:	6020      	str	r0, [r4, #0]
 801188a:	e776      	b.n	801177a <lv_btn_create+0x22>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_btn);
 801188c:	f7f8 f9d6 	bl	8009c3c <lv_obj_get_signal_func>
 8011890:	6060      	str	r0, [r4, #4]
 8011892:	e76e      	b.n	8011772 <lv_btn_create+0x1a>
            lv_obj_set_style(new_btn, ext->styles[LV_BTN_STATE_REL]);
 8011894:	4628      	mov	r0, r5
 8011896:	6961      	ldr	r1, [r4, #20]
 8011898:	f7f8 f82c 	bl	80098f4 <lv_obj_set_style>
}
 801189c:	4628      	mov	r0, r5
 801189e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118a0:	200174b4 	.word	0x200174b4
 80118a4:	20017ec8 	.word	0x20017ec8
 80118a8:	20017f58 	.word	0x20017f58
 80118ac:	20017df0 	.word	0x20017df0
 80118b0:	080114c1 	.word	0x080114c1
 80118b4:	08011469 	.word	0x08011469
 80118b8:	20017cd0 	.word	0x20017cd0
 80118bc:	20017d18 	.word	0x20017d18

080118c0 <lv_btn_get_state>:
{
 80118c0:	b508      	push	{r3, lr}
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 80118c2:	f7f8 f9bf 	bl	8009c44 <lv_obj_get_ext_attr>
}
 80118c6:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
 80118ca:	bd08      	pop	{r3, pc}

080118cc <lv_btn_get_action>:
    if(type >= LV_BTN_ACTION_NUM) return NULL;
 80118cc:	2903      	cmp	r1, #3
 80118ce:	d807      	bhi.n	80118e0 <lv_btn_get_action+0x14>
{
 80118d0:	b510      	push	{r4, lr}
 80118d2:	460c      	mov	r4, r1
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 80118d4:	f7f8 f9b6 	bl	8009c44 <lv_obj_get_ext_attr>
    return ext->actions[type];
 80118d8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80118dc:	6840      	ldr	r0, [r0, #4]
 80118de:	bd10      	pop	{r4, pc}
    if(type >= LV_BTN_ACTION_NUM) return NULL;
 80118e0:	2000      	movs	r0, #0
 80118e2:	4770      	bx	lr

080118e4 <get_button_text>:
 * @param btnm pointer to a button matrix object
 * @param btn_id button id
 * @return text id in ext->map_p or LV_BTNM_PR_NONE if 'btn_id' was invalid
 */
static uint16_t get_button_text(lv_obj_t * btnm, uint16_t btn_id)
{
 80118e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118e8:	460f      	mov	r7, r1
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 80118ea:	f7f8 f9ab 	bl	8009c44 <lv_obj_get_ext_attr>
    if(btn_id > ext->btn_cnt) return LV_BTNM_PR_NONE;
 80118ee:	f8b0 a020 	ldrh.w	sl, [r0, #32]
 80118f2:	45ba      	cmp	sl, r7
 80118f4:	d204      	bcs.n	8011900 <get_button_text+0x1c>
 80118f6:	f64f 74ff 	movw	r4, #65535	; 0xffff
    }

    if(btn_i == ext->btn_cnt) return  LV_BTNM_PR_NONE;

    return txt_i;
}
 80118fa:	4620      	mov	r0, r4
 80118fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while(btn_i != btn_id) {
 8011900:	b307      	cbz	r7, 8011944 <get_button_text+0x60>
 8011902:	2500      	movs	r5, #0
 8011904:	f8d0 9000 	ldr.w	r9, [r0]
        if(strcmp(ext->map_p[txt_i], "\n") == 0) txt_i ++;
 8011908:	f8df 8040 	ldr.w	r8, [pc, #64]	; 801194c <get_button_text+0x68>
    while(btn_i != btn_id) {
 801190c:	462c      	mov	r4, r5
 801190e:	e002      	b.n	8011916 <get_button_text+0x32>
 8011910:	42af      	cmp	r7, r5
        if(strcmp(ext->map_p[txt_i], "\n") == 0) txt_i ++;
 8011912:	b2a4      	uxth	r4, r4
    while(btn_i != btn_id) {
 8011914:	d00e      	beq.n	8011934 <get_button_text+0x50>
        txt_i ++;
 8011916:	1c66      	adds	r6, r4, #1
        btn_i ++;
 8011918:	3501      	adds	r5, #1
        if(strcmp(ext->map_p[txt_i], "\n") == 0) txt_i ++;
 801191a:	4641      	mov	r1, r8
 801191c:	3402      	adds	r4, #2
        txt_i ++;
 801191e:	b2b6      	uxth	r6, r6
        btn_i ++;
 8011920:	b2ad      	uxth	r5, r5
        if(strcmp(ext->map_p[txt_i], "\n") == 0) txt_i ++;
 8011922:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
 8011926:	f7ee fc6f 	bl	8000208 <strcmp>
 801192a:	2800      	cmp	r0, #0
 801192c:	d0f0      	beq.n	8011910 <get_button_text+0x2c>
    while(btn_i != btn_id) {
 801192e:	42af      	cmp	r7, r5
        txt_i ++;
 8011930:	4634      	mov	r4, r6
    while(btn_i != btn_id) {
 8011932:	d1f0      	bne.n	8011916 <get_button_text+0x32>
    if(btn_id > ext->btn_cnt) return LV_BTNM_PR_NONE;
 8011934:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011938:	45aa      	cmp	sl, r5
 801193a:	bf08      	it	eq
 801193c:	461c      	moveq	r4, r3
}
 801193e:	4620      	mov	r0, r4
 8011940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while(btn_i != btn_id) {
 8011944:	463d      	mov	r5, r7
 8011946:	463c      	mov	r4, r7
 8011948:	e7f4      	b.n	8011934 <get_button_text+0x50>
 801194a:	bf00      	nop
 801194c:	0808ba64 	.word	0x0808ba64

08011950 <get_button_from_point>:
{
 8011950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011954:	4604      	mov	r4, r0
 8011956:	b084      	sub	sp, #16
 8011958:	460d      	mov	r5, r1
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801195a:	f7f8 f973 	bl	8009c44 <lv_obj_get_ext_attr>
 801195e:	4607      	mov	r7, r0
    lv_obj_get_coords(btnm, &btnm_cords);
 8011960:	4669      	mov	r1, sp
 8011962:	4620      	mov	r0, r4
 8011964:	f7f8 f836 	bl	80099d4 <lv_obj_get_coords>
    for(i = 0; i < ext->btn_cnt; i++) {
 8011968:	8c3b      	ldrh	r3, [r7, #32]
 801196a:	b38b      	cbz	r3, 80119d0 <get_button_from_point+0x80>
 801196c:	2600      	movs	r6, #0
 801196e:	e002      	b.n	8011976 <get_button_from_point+0x26>
 8011970:	b296      	uxth	r6, r2
 8011972:	42b3      	cmp	r3, r6
 8011974:	d926      	bls.n	80119c4 <get_button_from_point+0x74>
        lv_area_copy(&btn_area, &ext->button_areas[i]);
 8011976:	6879      	ldr	r1, [r7, #4]
    memcpy(dest, src, sizeof(lv_area_t));
 8011978:	ac02      	add	r4, sp, #8
        btn_area.x1 += btnm_cords.x1;
 801197a:	f8bd 2000 	ldrh.w	r2, [sp]
        lv_area_copy(&btn_area, &ext->button_areas[i]);
 801197e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
        btn_area.y1 += btnm_cords.y1;
 8011982:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011986:	6808      	ldr	r0, [r1, #0]
 8011988:	6849      	ldr	r1, [r1, #4]
 801198a:	c403      	stmia	r4!, {r0, r1}
        btn_area.x1 += btnm_cords.x1;
 801198c:	f8bd e008 	ldrh.w	lr, [sp, #8]
        if(lv_area_is_point_on(&btn_area, p) != false) {
 8011990:	4629      	mov	r1, r5
        btn_area.x2 += btnm_cords.x1;
 8011992:	f8bd 800c 	ldrh.w	r8, [sp, #12]
        if(lv_area_is_point_on(&btn_area, p) != false) {
 8011996:	a802      	add	r0, sp, #8
        btn_area.y1 += btnm_cords.y1;
 8011998:	f8bd 400a 	ldrh.w	r4, [sp, #10]
        btn_area.x1 += btnm_cords.x1;
 801199c:	4496      	add	lr, r2
        btn_area.y2 += btnm_cords.y1;
 801199e:	f8bd c00e 	ldrh.w	ip, [sp, #14]
        btn_area.x2 += btnm_cords.x1;
 80119a2:	4442      	add	r2, r8
        btn_area.y1 += btnm_cords.y1;
 80119a4:	441c      	add	r4, r3
        btn_area.x1 += btnm_cords.x1;
 80119a6:	f8ad e008 	strh.w	lr, [sp, #8]
        btn_area.y2 += btnm_cords.y1;
 80119aa:	4463      	add	r3, ip
        btn_area.x2 += btnm_cords.x1;
 80119ac:	f8ad 200c 	strh.w	r2, [sp, #12]
        btn_area.y1 += btnm_cords.y1;
 80119b0:	f8ad 400a 	strh.w	r4, [sp, #10]
        btn_area.y2 += btnm_cords.y1;
 80119b4:	f8ad 300e 	strh.w	r3, [sp, #14]
        if(lv_area_is_point_on(&btn_area, p) != false) {
 80119b8:	f7fe f836 	bl	800fa28 <lv_area_is_point_on>
    for(i = 0; i < ext->btn_cnt; i++) {
 80119bc:	1c72      	adds	r2, r6, #1
 80119be:	8c3b      	ldrh	r3, [r7, #32]
        if(lv_area_is_point_on(&btn_area, p) != false) {
 80119c0:	2800      	cmp	r0, #0
 80119c2:	d0d5      	beq.n	8011970 <get_button_from_point+0x20>
    if(i == ext->btn_cnt) i = LV_BTNM_PR_NONE;
 80119c4:	429e      	cmp	r6, r3
 80119c6:	d003      	beq.n	80119d0 <get_button_from_point+0x80>
}
 80119c8:	4630      	mov	r0, r6
 80119ca:	b004      	add	sp, #16
 80119cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(i == ext->btn_cnt) i = LV_BTNM_PR_NONE;
 80119d0:	f64f 76ff 	movw	r6, #65535	; 0xffff
}
 80119d4:	4630      	mov	r0, r6
 80119d6:	b004      	add	sp, #16
 80119d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080119dc <lv_btnm_design>:
{
 80119dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
 80119e0:	2a02      	cmp	r2, #2
{
 80119e2:	b0a5      	sub	sp, #148	; 0x94
 80119e4:	9006      	str	r0, [sp, #24]
 80119e6:	9107      	str	r1, [sp, #28]
    if(mode == LV_DESIGN_COVER_CHK) {
 80119e8:	f000 8159 	beq.w	8011c9e <lv_btnm_design+0x2c2>
 80119ec:	4614      	mov	r4, r2
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 80119ee:	b11a      	cbz	r2, 80119f8 <lv_btnm_design+0x1c>
    return true;
 80119f0:	2001      	movs	r0, #1
}
 80119f2:	b025      	add	sp, #148	; 0x94
 80119f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ancestor_design_f(btnm, mask, mode);
 80119f8:	4bab      	ldr	r3, [pc, #684]	; (8011ca8 <lv_btnm_design+0x2cc>)
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	4798      	blx	r3
        lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 80119fe:	9d06      	ldr	r5, [sp, #24]
 8011a00:	4628      	mov	r0, r5
 8011a02:	f7f8 f91f 	bl	8009c44 <lv_obj_get_ext_attr>
 8011a06:	4683      	mov	fp, r0
        lv_style_t * bg_style = lv_obj_get_style(btnm);
 8011a08:	4628      	mov	r0, r5
 8011a0a:	f7f8 f801 	bl	8009a10 <lv_obj_get_style>
 8011a0e:	900a      	str	r0, [sp, #40]	; 0x28
        lv_opa_t opa_scale = lv_obj_get_opa_scale(btnm);
 8011a10:	4628      	mov	r0, r5
 8011a12:	f7f8 f8f7 	bl	8009c04 <lv_obj_get_opa_scale>
        lv_obj_get_coords(btnm, &area_btnm);
 8011a16:	a90e      	add	r1, sp, #56	; 0x38
        lv_opa_t opa_scale = lv_obj_get_opa_scale(btnm);
 8011a18:	9008      	str	r0, [sp, #32]
        lv_obj_get_coords(btnm, &area_btnm);
 8011a1a:	4628      	mov	r0, r5
 8011a1c:	f7f7 ffda 	bl	80099d4 <lv_obj_get_coords>
        if(ext->recolor) txt_flag = LV_TXT_FLAG_RECOLOR;
 8011a20:	f89b 3026 	ldrb.w	r3, [fp, #38]	; 0x26
        for(btn_i = 0; btn_i < ext->btn_cnt; btn_i ++, txt_i ++) {
 8011a24:	f8bb 5020 	ldrh.w	r5, [fp, #32]
        lv_txt_flag_t txt_flag = LV_TXT_FLAG_NONE;
 8011a28:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8011a2c:	9309      	str	r3, [sp, #36]	; 0x24
        for(btn_i = 0; btn_i < ext->btn_cnt; btn_i ++, txt_i ++) {
 8011a2e:	2d00      	cmp	r5, #0
 8011a30:	d0de      	beq.n	80119f0 <lv_btnm_design+0x14>
 8011a32:	46a0      	mov	r8, r4
            while(strcmp(ext->map_p[txt_i], "\n") == 0) {
 8011a34:	f8df a274 	ldr.w	sl, [pc, #628]	; 8011cac <lv_btnm_design+0x2d0>
        for(btn_i = 0; btn_i < ext->btn_cnt; btn_i ++, txt_i ++) {
 8011a38:	46a9      	mov	r9, r5
 8011a3a:	f8db 7000 	ldr.w	r7, [fp]
 8011a3e:	e000      	b.n	8011a42 <lv_btnm_design+0x66>
                txt_i ++;
 8011a40:	b29c      	uxth	r4, r3
            while(strcmp(ext->map_p[txt_i], "\n") == 0) {
 8011a42:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8011a46:	4651      	mov	r1, sl
 8011a48:	00a6      	lsls	r6, r4, #2
 8011a4a:	4628      	mov	r0, r5
 8011a4c:	f7ee fbdc 	bl	8000208 <strcmp>
                txt_i ++;
 8011a50:	1c63      	adds	r3, r4, #1
            while(strcmp(ext->map_p[txt_i], "\n") == 0) {
 8011a52:	2800      	cmp	r0, #0
 8011a54:	d0f4      	beq.n	8011a40 <lv_btnm_design+0x64>
    if(((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) &&
 8011a56:	782b      	ldrb	r3, [r5, #0]
 8011a58:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 8011a5c:	2b88      	cmp	r3, #136	; 0x88
 8011a5e:	f000 80b3 	beq.w	8011bc8 <lv_btnm_design+0x1ec>
            lv_area_copy(&area_tmp, &ext->button_areas[btn_i]);
 8011a62:	f8db 1004 	ldr.w	r1, [fp, #4]
 8011a66:	ab10      	add	r3, sp, #64	; 0x40
            area_tmp.y1 += area_btnm.y1;
 8011a68:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
            lv_area_copy(&area_tmp, &ext->button_areas[btn_i]);
 8011a6c:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
            area_tmp.x1 += area_btnm.x1;
 8011a70:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8011a74:	6808      	ldr	r0, [r1, #0]
 8011a76:	6849      	ldr	r1, [r1, #4]
 8011a78:	c303      	stmia	r3!, {r0, r1}
            area_tmp.x2 += area_btnm.x1;
 8011a7a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
            area_tmp.x1 += area_btnm.x1;
 8011a7e:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
            area_tmp.y1 += area_btnm.y1;
 8011a82:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
            area_tmp.y2 += area_btnm.y1;
 8011a86:	f8bd 7046 	ldrh.w	r7, [sp, #70]	; 0x46
            area_tmp.x1 += area_btnm.x1;
 8011a8a:	4428      	add	r0, r5
            area_tmp.y1 += area_btnm.y1;
 8011a8c:	4411      	add	r1, r2
            area_tmp.x2 += area_btnm.x1;
 8011a8e:	441d      	add	r5, r3
            area_tmp.y2 += area_btnm.y1;
 8011a90:	4417      	add	r7, r2
            if(button_is_inactive(ext->map_p[txt_i])) btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_INA);
 8011a92:	f8db 3000 	ldr.w	r3, [fp]
            area_tmp.x1 += area_btnm.x1;
 8011a96:	b282      	uxth	r2, r0
    if(((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) &&
 8011a98:	599b      	ldr	r3, [r3, r6]
            area_tmp.y1 += area_btnm.y1;
 8011a9a:	b289      	uxth	r1, r1
            area_tmp.x2 += area_btnm.x1;
 8011a9c:	b2ad      	uxth	r5, r5
            area_tmp.x1 += area_btnm.x1;
 8011a9e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
            area_tmp.y2 += area_btnm.y1;
 8011aa2:	b2bf      	uxth	r7, r7
            area_tmp.y1 += area_btnm.y1;
 8011aa4:	f8ad 1042 	strh.w	r1, [sp, #66]	; 0x42
            area_tmp.x2 += area_btnm.x1;
 8011aa8:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
            area_tmp.y2 += area_btnm.y1;
 8011aac:	f8ad 7046 	strh.w	r7, [sp, #70]	; 0x46
    if(((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) &&
 8011ab0:	781b      	ldrb	r3, [r3, #0]
            area_tmp.x1 += area_btnm.x1;
 8011ab2:	9204      	str	r2, [sp, #16]
    if(((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) &&
 8011ab4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
            area_tmp.y1 += area_btnm.y1;
 8011ab8:	9105      	str	r1, [sp, #20]
    if(((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) &&
 8011aba:	2ba0      	cmp	r3, #160	; 0xa0
 8011abc:	f000 80b4 	beq.w	8011c28 <lv_btnm_design+0x24c>
            else if(btn_i != ext->btn_id_pr && btn_i != ext->btn_id_tgl) btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_REL);
 8011ac0:	f8bb 3022 	ldrh.w	r3, [fp, #34]	; 0x22
 8011ac4:	4543      	cmp	r3, r8
 8011ac6:	f000 80db 	beq.w	8011c80 <lv_btnm_design+0x2a4>
 8011aca:	f8bb 3024 	ldrh.w	r3, [fp, #36]	; 0x24
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8011ace:	9806      	ldr	r0, [sp, #24]
            else if(btn_i != ext->btn_id_pr && btn_i != ext->btn_id_tgl) btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_REL);
 8011ad0:	4543      	cmp	r3, r8
 8011ad2:	f000 80af 	beq.w	8011c34 <lv_btnm_design+0x258>
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8011ad6:	f7f8 f8b5 	bl	8009c44 <lv_obj_get_ext_attr>
            style = ext->styles_btn[LV_BTN_STATE_REL];
 8011ada:	f8d0 900c 	ldr.w	r9, [r0, #12]
            lv_style_copy(&style_tmp, btn_style);
 8011ade:	4649      	mov	r1, r9
 8011ae0:	a812      	add	r0, sp, #72	; 0x48
 8011ae2:	f7f8 fd8f 	bl	800a604 <lv_style_copy>
            if(style_tmp.body.border.part & LV_BORDER_INTERNAL) {
 8011ae6:	f89d 305e 	ldrb.w	r3, [sp, #94]	; 0x5e
 8011aea:	06da      	lsls	r2, r3, #27
 8011aec:	d46e      	bmi.n	8011bcc <lv_btnm_design+0x1f0>
 8011aee:	3401      	adds	r4, #1
            lv_draw_rect(&area_tmp, mask, &style_tmp, opa_scale);
 8011af0:	9b08      	ldr	r3, [sp, #32]
 8011af2:	aa12      	add	r2, sp, #72	; 0x48
 8011af4:	9907      	ldr	r1, [sp, #28]
 8011af6:	a810      	add	r0, sp, #64	; 0x40
 8011af8:	f7fb f896 	bl	800cc28 <lv_draw_rect>
    return area_p->x2 - area_p->x1 + 1;
 8011afc:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
            if(btn_style->glass) btn_style = bg_style;
 8011b00:	f899 2000 	ldrb.w	r2, [r9]
            lv_txt_get_size(&txt_size, ext->map_p[txt_i], font,
 8011b04:	a80d      	add	r0, sp, #52	; 0x34
 8011b06:	f8db 3000 	ldr.w	r3, [fp]
 8011b0a:	f10e 0e01 	add.w	lr, lr, #1
 8011b0e:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
        lv_style_t * bg_style = lv_obj_get_style(btnm);
 8011b12:	f012 0f01 	tst.w	r2, #1
            lv_txt_get_size(&txt_size, ext->map_p[txt_i], font,
 8011b16:	9a09      	ldr	r2, [sp, #36]	; 0x24
    return area_p->y2 - area_p->y1 + 1;
 8011b18:	f107 0701 	add.w	r7, r7, #1
    return area_p->x2 - area_p->x1 + 1;
 8011b1c:	ebae 0e01 	sub.w	lr, lr, r1
 8011b20:	5999      	ldr	r1, [r3, r6]
        lv_style_t * bg_style = lv_obj_get_style(btnm);
 8011b22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            lv_txt_get_size(&txt_size, ext->map_p[txt_i], font,
 8011b24:	fa0f fe8e 	sxth.w	lr, lr
        lv_style_t * bg_style = lv_obj_get_style(btnm);
 8011b28:	bf18      	it	ne
 8011b2a:	4699      	movne	r9, r3
            lv_txt_get_size(&txt_size, ext->map_p[txt_i], font,
 8011b2c:	f8d9 c02c 	ldr.w	ip, [r9, #44]	; 0x2c
 8011b30:	f9b9 3030 	ldrsh.w	r3, [r9, #48]	; 0x30
 8011b34:	9202      	str	r2, [sp, #8]
 8011b36:	4662      	mov	r2, ip
 8011b38:	f8cd e004 	str.w	lr, [sp, #4]
 8011b3c:	f9b9 e032 	ldrsh.w	lr, [r9, #50]	; 0x32
 8011b40:	f8cd e000 	str.w	lr, [sp]
 8011b44:	f7fe ffb4 	bl	8010ab0 <lv_txt_get_size>
 8011b48:	9904      	ldr	r1, [sp, #16]
 8011b4a:	1c6b      	adds	r3, r5, #1
            area_tmp.x1 += (btn_w - txt_size.x) / 2;
 8011b4c:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8011b50:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
            lv_draw_label(&area_tmp, mask, btn_style, opa_scale,  ext->map_p[txt_i], txt_flag, NULL);
 8011b54:	f04f 0e00 	mov.w	lr, #0
 8011b58:	1a5b      	subs	r3, r3, r1
    return area_p->y2 - area_p->y1 + 1;
 8011b5a:	9905      	ldr	r1, [sp, #20]
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
 8011b5c:	f8bd 5042 	ldrh.w	r5, [sp, #66]	; 0x42
            area_tmp.x1 += (btn_w - txt_size.x) / 2;
 8011b60:	b21b      	sxth	r3, r3
 8011b62:	1a7f      	subs	r7, r7, r1
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
 8011b64:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
            area_tmp.x1 += (btn_w - txt_size.x) / 2;
 8011b68:	1a9b      	subs	r3, r3, r2
            lv_draw_label(&area_tmp, mask, btn_style, opa_scale,  ext->map_p[txt_i], txt_flag, NULL);
 8011b6a:	f8cd e008 	str.w	lr, [sp, #8]
            area_tmp.x1 += (btn_w - txt_size.x) / 2;
 8011b6e:	bf48      	it	mi
 8011b70:	3301      	addmi	r3, #1
 8011b72:	eb00 0063 	add.w	r0, r0, r3, asr #1
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
 8011b76:	b23b      	sxth	r3, r7
            lv_draw_label(&area_tmp, mask, btn_style, opa_scale,  ext->map_p[txt_i], txt_flag, NULL);
 8011b78:	9f09      	ldr	r7, [sp, #36]	; 0x24
            area_tmp.x1 += (btn_w - txt_size.x) / 2;
 8011b7a:	b280      	uxth	r0, r0
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
 8011b7c:	1a5b      	subs	r3, r3, r1
            lv_draw_label(&area_tmp, mask, btn_style, opa_scale,  ext->map_p[txt_i], txt_flag, NULL);
 8011b7e:	9701      	str	r7, [sp, #4]
            area_tmp.x1 += (btn_w - txt_size.x) / 2;
 8011b80:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
            area_tmp.x2 = area_tmp.x1 + txt_size.x;
 8011b84:	4410      	add	r0, r2
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
 8011b86:	bf48      	it	mi
 8011b88:	3301      	addmi	r3, #1
            lv_draw_label(&area_tmp, mask, btn_style, opa_scale,  ext->map_p[txt_i], txt_flag, NULL);
 8011b8a:	464a      	mov	r2, r9
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
 8011b8c:	eb05 0563 	add.w	r5, r5, r3, asr #1
            lv_draw_label(&area_tmp, mask, btn_style, opa_scale,  ext->map_p[txt_i], txt_flag, NULL);
 8011b90:	f8db 3000 	ldr.w	r3, [fp]
            area_tmp.x2 = area_tmp.x1 + txt_size.x;
 8011b94:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
 8011b98:	b2ad      	uxth	r5, r5
            lv_draw_label(&area_tmp, mask, btn_style, opa_scale,  ext->map_p[txt_i], txt_flag, NULL);
 8011b9a:	5998      	ldr	r0, [r3, r6]
 8011b9c:	9b08      	ldr	r3, [sp, #32]
            area_tmp.y2 = area_tmp.y1 + txt_size.y;
 8011b9e:	186e      	adds	r6, r5, r1
            lv_draw_label(&area_tmp, mask, btn_style, opa_scale,  ext->map_p[txt_i], txt_flag, NULL);
 8011ba0:	9000      	str	r0, [sp, #0]
 8011ba2:	9907      	ldr	r1, [sp, #28]
 8011ba4:	a810      	add	r0, sp, #64	; 0x40
            area_tmp.y2 = area_tmp.y1 + txt_size.y;
 8011ba6:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
 8011baa:	f8ad 5042 	strh.w	r5, [sp, #66]	; 0x42
            lv_draw_label(&area_tmp, mask, btn_style, opa_scale,  ext->map_p[txt_i], txt_flag, NULL);
 8011bae:	f7f9 f817 	bl	800abe0 <lv_draw_label>
 8011bb2:	f8bb 9020 	ldrh.w	r9, [fp, #32]
        for(btn_i = 0; btn_i < ext->btn_cnt; btn_i ++, txt_i ++) {
 8011bb6:	f108 0801 	add.w	r8, r8, #1
 8011bba:	b2a4      	uxth	r4, r4
 8011bbc:	fa1f f888 	uxth.w	r8, r8
 8011bc0:	45c1      	cmp	r9, r8
 8011bc2:	f63f af3a 	bhi.w	8011a3a <lv_btnm_design+0x5e>
 8011bc6:	e713      	b.n	80119f0 <lv_btnm_design+0x14>
 8011bc8:	3401      	adds	r4, #1
 8011bca:	e7f4      	b.n	8011bb6 <lv_btnm_design+0x1da>
                if(area_tmp.y1 == btnm->coords.y1 + bg_style->body.padding.ver) {
 8011bcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011bce:	f9bd 0042 	ldrsh.w	r0, [sp, #66]	; 0x42
 8011bd2:	f9b2 1020 	ldrsh.w	r1, [r2, #32]
 8011bd6:	9a06      	ldr	r2, [sp, #24]
 8011bd8:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8011bdc:	440a      	add	r2, r1
 8011bde:	4290      	cmp	r0, r2
 8011be0:	d049      	beq.n	8011c76 <lv_btnm_design+0x29a>
                if(area_tmp.y2 == btnm->coords.y2 - bg_style->body.padding.ver) {
 8011be2:	9b06      	ldr	r3, [sp, #24]
 8011be4:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8011be8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8011bec:	1a5b      	subs	r3, r3, r1
 8011bee:	429a      	cmp	r2, r3
 8011bf0:	d03a      	beq.n	8011c68 <lv_btnm_design+0x28c>
                if(txt_i == 0) {
 8011bf2:	bb24      	cbnz	r4, 8011c3e <lv_btnm_design+0x262>
                    style_tmp.body.border.part &= ~LV_BORDER_LEFT;
 8011bf4:	f89d 305e 	ldrb.w	r3, [sp, #94]	; 0x5e
 8011bf8:	f023 0304 	bic.w	r3, r3, #4
 8011bfc:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
 8011c00:	f8db 3000 	ldr.w	r3, [fp]
                if(ext->map_p[txt_i + 1][0] == '\0' || strcmp(ext->map_p[txt_i + 1], "\n") == 0) {
 8011c04:	3401      	adds	r4, #1
 8011c06:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011c0a:	7803      	ldrb	r3, [r0, #0]
 8011c0c:	b12b      	cbz	r3, 8011c1a <lv_btnm_design+0x23e>
 8011c0e:	4651      	mov	r1, sl
 8011c10:	f7ee fafa 	bl	8000208 <strcmp>
 8011c14:	2800      	cmp	r0, #0
 8011c16:	f47f af6b 	bne.w	8011af0 <lv_btnm_design+0x114>
                        style_tmp.body.border.part &= ~LV_BORDER_RIGHT;
 8011c1a:	f89d 305e 	ldrb.w	r3, [sp, #94]	; 0x5e
 8011c1e:	f023 0308 	bic.w	r3, r3, #8
 8011c22:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
 8011c26:	e763      	b.n	8011af0 <lv_btnm_design+0x114>
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8011c28:	9806      	ldr	r0, [sp, #24]
 8011c2a:	f7f8 f80b 	bl	8009c44 <lv_obj_get_ext_attr>
            style = ext->styles_btn[LV_BTN_STATE_INA];
 8011c2e:	f8d0 901c 	ldr.w	r9, [r0, #28]
 8011c32:	e754      	b.n	8011ade <lv_btnm_design+0x102>
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8011c34:	f7f8 f806 	bl	8009c44 <lv_obj_get_ext_attr>
            style = ext->styles_btn[LV_BTN_STATE_TGL_REL];
 8011c38:	f8d0 9014 	ldr.w	r9, [r0, #20]
 8011c3c:	e74f      	b.n	8011ade <lv_btnm_design+0x102>
                else if(strcmp(ext->map_p[txt_i - 1],"\n") == 0) {
 8011c3e:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8011c42:	f8db 3000 	ldr.w	r3, [fp]
 8011c46:	4651      	mov	r1, sl
 8011c48:	4422      	add	r2, r4
 8011c4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8011c4c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011c50:	f7ee fada 	bl	8000208 <strcmp>
 8011c54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011c56:	2800      	cmp	r0, #0
 8011c58:	d1d4      	bne.n	8011c04 <lv_btnm_design+0x228>
                    style_tmp.body.border.part &= ~LV_BORDER_LEFT;
 8011c5a:	f89d 205e 	ldrb.w	r2, [sp, #94]	; 0x5e
 8011c5e:	f022 0204 	bic.w	r2, r2, #4
 8011c62:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
 8011c66:	e7cd      	b.n	8011c04 <lv_btnm_design+0x228>
                    style_tmp.body.border.part &= ~LV_BORDER_BOTTOM;
 8011c68:	f89d 305e 	ldrb.w	r3, [sp, #94]	; 0x5e
 8011c6c:	f023 0301 	bic.w	r3, r3, #1
 8011c70:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
 8011c74:	e7bd      	b.n	8011bf2 <lv_btnm_design+0x216>
                    style_tmp.body.border.part &= ~LV_BORDER_TOP;
 8011c76:	f023 0302 	bic.w	r3, r3, #2
 8011c7a:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
 8011c7e:	e7b0      	b.n	8011be2 <lv_btnm_design+0x206>
            else if(btn_i == ext->btn_id_pr && btn_i != ext->btn_id_tgl) btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_PR);
 8011c80:	f8bb 3024 	ldrh.w	r3, [fp, #36]	; 0x24
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8011c84:	9806      	ldr	r0, [sp, #24]
            else if(btn_i == ext->btn_id_pr && btn_i != ext->btn_id_tgl) btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_PR);
 8011c86:	4543      	cmp	r3, r8
 8011c88:	d004      	beq.n	8011c94 <lv_btnm_design+0x2b8>
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8011c8a:	f7f7 ffdb 	bl	8009c44 <lv_obj_get_ext_attr>
            style = ext->styles_btn[LV_BTN_STATE_PR];
 8011c8e:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8011c92:	e724      	b.n	8011ade <lv_btnm_design+0x102>
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8011c94:	f7f7 ffd6 	bl	8009c44 <lv_obj_get_ext_attr>
            style = ext->styles_btn[LV_BTN_STATE_TGL_PR];
 8011c98:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8011c9c:	e71f      	b.n	8011ade <lv_btnm_design+0x102>
        return ancestor_design_f(btnm, mask, mode);
 8011c9e:	4b02      	ldr	r3, [pc, #8]	; (8011ca8 <lv_btnm_design+0x2cc>)
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	4798      	blx	r3
 8011ca4:	e6a5      	b.n	80119f2 <lv_btnm_design+0x16>
 8011ca6:	bf00      	nop
 8011ca8:	200174bc 	.word	0x200174bc
 8011cac:	0808ba64 	.word	0x0808ba64

08011cb0 <lv_btnm_set_map>:
{
 8011cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cb4:	b091      	sub	sp, #68	; 0x44
 8011cb6:	900b      	str	r0, [sp, #44]	; 0x2c
    if(map == NULL) return;
 8011cb8:	2900      	cmp	r1, #0
 8011cba:	f000 813e 	beq.w	8011f3a <lv_btnm_set_map+0x28a>
 8011cbe:	468a      	mov	sl, r1
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8011cc0:	f7f7 ffc0 	bl	8009c44 <lv_obj_get_ext_attr>
 8011cc4:	4603      	mov	r3, r0
 8011cc6:	900c      	str	r0, [sp, #48]	; 0x30
    while(strlen(map[i]) != 0) {
 8011cc8:	f8da 0000 	ldr.w	r0, [sl]
    ext->map_p = map;
 8011ccc:	f8c3 a000 	str.w	sl, [r3]
    while(strlen(map[i]) != 0) {
 8011cd0:	7804      	ldrb	r4, [r0, #0]
 8011cd2:	2c00      	cmp	r4, #0
 8011cd4:	f000 8136 	beq.w	8011f44 <lv_btnm_set_map+0x294>
 8011cd8:	2400      	movs	r4, #0
        if(strcmp(map[i], "\n") != 0) { /*Do not count line breaks*/
 8011cda:	4e9b      	ldr	r6, [pc, #620]	; (8011f48 <lv_btnm_set_map+0x298>)
    while(strlen(map[i]) != 0) {
 8011cdc:	4625      	mov	r5, r4
        if(strcmp(map[i], "\n") != 0) { /*Do not count line breaks*/
 8011cde:	4631      	mov	r1, r6
        i++;
 8011ce0:	3401      	adds	r4, #1
        if(strcmp(map[i], "\n") != 0) { /*Do not count line breaks*/
 8011ce2:	f7ee fa91 	bl	8000208 <strcmp>
            btn_cnt ++;
 8011ce6:	1c6b      	adds	r3, r5, #1
        if(strcmp(map[i], "\n") != 0) { /*Do not count line breaks*/
 8011ce8:	b100      	cbz	r0, 8011cec <lv_btnm_set_map+0x3c>
            btn_cnt ++;
 8011cea:	b29d      	uxth	r5, r3
        i++;
 8011cec:	b2a4      	uxth	r4, r4
    while(strlen(map[i]) != 0) {
 8011cee:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
 8011cf2:	7803      	ldrb	r3, [r0, #0]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d1f2      	bne.n	8011cde <lv_btnm_set_map+0x2e>
 8011cf8:	00ec      	lsls	r4, r5, #3
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8011cfa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8011cfc:	f7f7 ffa2 	bl	8009c44 <lv_obj_get_ext_attr>
 8011d00:	4606      	mov	r6, r0
    if(ext->button_areas != NULL) {
 8011d02:	6840      	ldr	r0, [r0, #4]
 8011d04:	b118      	cbz	r0, 8011d0e <lv_btnm_set_map+0x5e>
        lv_mem_free(ext->button_areas);
 8011d06:	f7fe f9bf 	bl	8010088 <lv_mem_free>
        ext->button_areas = NULL;
 8011d0a:	2300      	movs	r3, #0
 8011d0c:	6073      	str	r3, [r6, #4]
    ext->button_areas = lv_mem_alloc(sizeof(lv_area_t) * btn_cnt);
 8011d0e:	4620      	mov	r0, r4
 8011d10:	f7fe f9b2 	bl	8010078 <lv_mem_alloc>
 8011d14:	6070      	str	r0, [r6, #4]
    lv_mem_assert(ext->button_areas);
 8011d16:	2800      	cmp	r0, #0
 8011d18:	d07a      	beq.n	8011e10 <lv_btnm_set_map+0x160>
    ext->btn_cnt = btn_cnt;
 8011d1a:	8435      	strh	r5, [r6, #32]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8011d1c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8011d1e:	4628      	mov	r0, r5
 8011d20:	f7f7 ff90 	bl	8009c44 <lv_obj_get_ext_attr>
            style = lv_obj_get_style(btnm);
 8011d24:	4628      	mov	r0, r5
 8011d26:	f7f7 fe73 	bl	8009a10 <lv_obj_get_style>
 8011d2a:	4604      	mov	r4, r0
 8011d2c:	9008      	str	r0, [sp, #32]
    lv_coord_t max_w = lv_obj_get_width(btnm) - 2 * style_bg->body.padding.hor;
 8011d2e:	4628      	mov	r0, r5
 8011d30:	f7f7 fe62 	bl	80099f8 <lv_obj_get_width>
 8011d34:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8011d36:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
    lv_coord_t max_h = lv_obj_get_height(btnm) - 2 * style_bg->body.padding.ver;
 8011d3a:	4628      	mov	r0, r5
    lv_coord_t max_w = lv_obj_get_width(btnm) - 2 * style_bg->body.padding.hor;
 8011d3c:	b29b      	uxth	r3, r3
 8011d3e:	930d      	str	r3, [sp, #52]	; 0x34
    lv_coord_t max_h = lv_obj_get_height(btnm) - 2 * style_bg->body.padding.ver;
 8011d40:	f7f7 fe60 	bl	8009a04 <lv_obj_get_height>
 8011d44:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
    for(li = 0; strlen(map[li]) != 0; li++) {
 8011d48:	f8da 2000 	ldr.w	r2, [sl]
    lv_coord_t max_h = lv_obj_get_height(btnm) - 2 * style_bg->body.padding.ver;
 8011d4c:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 8011d50:	9303      	str	r3, [sp, #12]
    for(li = 0; strlen(map[li]) != 0; li++) {
 8011d52:	7813      	ldrb	r3, [r2, #0]
    lv_coord_t max_h = lv_obj_get_height(btnm) - 2 * style_bg->body.padding.ver;
 8011d54:	b281      	uxth	r1, r0
 8011d56:	910a      	str	r1, [sp, #40]	; 0x28
    for(li = 0; strlen(map[li]) != 0; li++) {
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	f000 80f1 	beq.w	8011f40 <lv_btnm_set_map+0x290>
 8011d5e:	2500      	movs	r5, #0
 8011d60:	2601      	movs	r6, #1
        if(strcmp(map[li], "\n") == 0) line_cnt ++;
 8011d62:	4c79      	ldr	r4, [pc, #484]	; (8011f48 <lv_btnm_set_map+0x298>)
 8011d64:	4610      	mov	r0, r2
 8011d66:	4621      	mov	r1, r4
    for(li = 0; strlen(map[li]) != 0; li++) {
 8011d68:	3501      	adds	r5, #1
        if(strcmp(map[li], "\n") == 0) line_cnt ++;
 8011d6a:	f7ee fa4d 	bl	8000208 <strcmp>
 8011d6e:	1c73      	adds	r3, r6, #1
 8011d70:	b900      	cbnz	r0, 8011d74 <lv_btnm_set_map+0xc4>
 8011d72:	b2de      	uxtb	r6, r3
    for(li = 0; strlen(map[li]) != 0; li++) {
 8011d74:	b2ed      	uxtb	r5, r5
 8011d76:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 8011d7a:	7803      	ldrb	r3, [r0, #0]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d1f2      	bne.n	8011d66 <lv_btnm_set_map+0xb6>
 8011d80:	1e73      	subs	r3, r6, #1
 8011d82:	b29b      	uxth	r3, r3
    lv_coord_t btn_h = max_h - ((line_cnt - 1) * style_bg->body.padding.inner);
 8011d84:	9a08      	ldr	r2, [sp, #32]
 8011d86:	f9b2 b024 	ldrsh.w	fp, [r2, #36]	; 0x24
    uint16_t btn_i = 0;     /*Act. index of button areas*/
 8011d8a:	2200      	movs	r2, #0
    lv_coord_t btn_h = max_h - ((line_cnt - 1) * style_bg->body.padding.inner);
 8011d8c:	fb1b f303 	smulbb	r3, fp, r3
    uint16_t btn_i = 0;     /*Act. index of button areas*/
 8011d90:	9204      	str	r2, [sp, #16]
    lv_coord_t btn_h = max_h - ((line_cnt - 1) * style_bg->body.padding.inner);
 8011d92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011d94:	1ad3      	subs	r3, r2, r3
    btn_h = btn_h / line_cnt;
 8011d96:	b21b      	sxth	r3, r3
 8011d98:	fb93 f3f6 	sdiv	r3, r3, r6
    btn_h --;                              /*-1 because e.g. height = 100 means 101 pixels (0..100)*/
 8011d9c:	3b01      	subs	r3, #1
 8011d9e:	b21b      	sxth	r3, r3
 8011da0:	9307      	str	r3, [sp, #28]
        while(strcmp(map_p_tmp[btn_cnt], "\n") != 0 &&
 8011da2:	2500      	movs	r5, #0
        unit_cnt = 0;
 8011da4:	462c      	mov	r4, r5
        while(strcmp(map_p_tmp[btn_cnt], "\n") != 0 &&
 8011da6:	e00b      	b.n	8011dc0 <lv_btnm_set_map+0x110>
                strlen(map_p_tmp[btn_cnt]) != 0) { /*Check a line*/
 8011da8:	783a      	ldrb	r2, [r7, #0]
    if((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) {
 8011daa:	f002 01c0 	and.w	r1, r2, #192	; 0xc0
        while(strcmp(map_p_tmp[btn_cnt], "\n") != 0 &&
 8011dae:	b382      	cbz	r2, 8011e12 <lv_btnm_set_map+0x162>
    if((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) {
 8011db0:	2980      	cmp	r1, #128	; 0x80
 8011db2:	f105 0501 	add.w	r5, r5, #1
        return btn_str[0] & LV_BTNM_WIDTH_MASK;
 8011db6:	bf08      	it	eq
 8011db8:	f002 0307 	andeq.w	r3, r2, #7
            unit_cnt += get_button_width(map_p_tmp[btn_cnt]);
 8011dbc:	4423      	add	r3, r4
 8011dbe:	b29c      	uxth	r4, r3
 8011dc0:	b2ae      	uxth	r6, r5
        while(strcmp(map_p_tmp[btn_cnt], "\n") != 0 &&
 8011dc2:	4961      	ldr	r1, [pc, #388]	; (8011f48 <lv_btnm_set_map+0x298>)
 8011dc4:	f85a 7026 	ldr.w	r7, [sl, r6, lsl #2]
 8011dc8:	eb0a 0986 	add.w	r9, sl, r6, lsl #2
 8011dcc:	4638      	mov	r0, r7
 8011dce:	f7ee fa1b 	bl	8000208 <strcmp>
    if((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) {
 8011dd2:	2301      	movs	r3, #1
        while(strcmp(map_p_tmp[btn_cnt], "\n") != 0 &&
 8011dd4:	2800      	cmp	r0, #0
 8011dd6:	d1e7      	bne.n	8011da8 <lv_btnm_set_map+0xf8>
 8011dd8:	463b      	mov	r3, r7
 8011dda:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8011dde:	4637      	mov	r7, r6
 8011de0:	4698      	mov	r8, r3
        if(map_p_tmp[btn_cnt][0] == '\0') {         /*Last row?*/
 8011de2:	781b      	ldrb	r3, [r3, #0]
 8011de4:	b1d3      	cbz	r3, 8011e1c <lv_btnm_set_map+0x16c>
 8011de6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
        if(btn_cnt != 0) {
 8011dea:	bb1f      	cbnz	r7, 8011e34 <lv_btnm_set_map+0x184>
 8011dec:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8011df0:	fa12 f383 	uxtah	r3, r2, r3
 8011df4:	9306      	str	r3, [sp, #24]
        act_y += btn_h + style_bg->body.padding.inner;
 8011df6:	9b06      	ldr	r3, [sp, #24]
        if(strlen(map_p_tmp[btn_cnt]) == 0) break; /*Break on end of map*/
 8011df8:	f898 2000 	ldrb.w	r2, [r8]
        act_y += btn_h + style_bg->body.padding.inner;
 8011dfc:	445b      	add	r3, fp
 8011dfe:	b21b      	sxth	r3, r3
 8011e00:	9303      	str	r3, [sp, #12]
        if(strlen(map_p_tmp[btn_cnt]) == 0) break; /*Break on end of map*/
 8011e02:	2a00      	cmp	r2, #0
 8011e04:	f000 8093 	beq.w	8011f2e <lv_btnm_set_map+0x27e>
        map_p_tmp = &map_p_tmp[btn_cnt + 1]; /*Set the map to the next line*/
 8011e08:	3601      	adds	r6, #1
 8011e0a:	eb0a 0a86 	add.w	sl, sl, r6, lsl #2
        unit_cnt = 0;
 8011e0e:	e7c8      	b.n	8011da2 <lv_btnm_set_map+0xf2>
 8011e10:	e7fe      	b.n	8011e10 <lv_btnm_set_map+0x160>
 8011e12:	463b      	mov	r3, r7
 8011e14:	4637      	mov	r7, r6
 8011e16:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8011e1a:	4698      	mov	r8, r3
            btn_h = max_h - act_y + style_bg->body.padding.ver - 1;
 8011e1c:	9b08      	ldr	r3, [sp, #32]
 8011e1e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011e20:	8c1b      	ldrh	r3, [r3, #32]
 8011e22:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8011e26:	3b01      	subs	r3, #1
 8011e28:	440b      	add	r3, r1
 8011e2a:	1a9b      	subs	r3, r3, r2
 8011e2c:	b21b      	sxth	r3, r3
 8011e2e:	9307      	str	r3, [sp, #28]
        if(btn_cnt != 0) {
 8011e30:	2f00      	cmp	r7, #0
 8011e32:	d0db      	beq.n	8011dec <lv_btnm_set_map+0x13c>
 8011e34:	f8bd 101c 	ldrh.w	r1, [sp, #28]
            lv_coord_t all_unit_w = max_w - ((btn_cnt - 1) * style_bg->body.padding.inner);
 8011e38:	1e73      	subs	r3, r6, #1
 8011e3a:	f04f 0800 	mov.w	r8, #0
 8011e3e:	f1aa 0904 	sub.w	r9, sl, #4
 8011e42:	fa12 f281 	uxtah	r2, r2, r1
 8011e46:	46de      	mov	lr, fp
 8011e48:	fb13 f30b 	smulbb	r3, r3, fp
 8011e4c:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8011e50:	9206      	str	r2, [sp, #24]
                    lv_area_set(&ext->button_areas[btn_i],  act_x, act_y,
 8011e52:	b212      	sxth	r2, r2
            lv_coord_t all_unit_w = max_w - ((btn_cnt - 1) * style_bg->body.padding.inner);
 8011e54:	960f      	str	r6, [sp, #60]	; 0x3c
 8011e56:	4645      	mov	r5, r8
                    lv_area_set(&ext->button_areas[btn_i],  act_x, act_y,
 8011e58:	9205      	str	r2, [sp, #20]
 8011e5a:	4641      	mov	r1, r8
            lv_coord_t all_unit_w = max_w - ((btn_cnt - 1) * style_bg->body.padding.inner);
 8011e5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011e5e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8011e62:	1ad3      	subs	r3, r2, r3
 8011e64:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011e68:	b21b      	sxth	r3, r3
 8011e6a:	461e      	mov	r6, r3
 8011e6c:	e023      	b.n	8011eb6 <lv_btnm_set_map+0x206>
                if(style_bg->body.padding.inner == 0 && act_x != style_bg->body.padding.hor) {
 8011e6e:	458c      	cmp	ip, r1
 8011e70:	d043      	beq.n	8011efa <lv_btnm_set_map+0x24a>
                    lv_area_set(&ext->button_areas[btn_i],  ext->button_areas[btn_i - 1].x2, act_y,
 8011e72:	f8db 1004 	ldr.w	r1, [fp, #4]
                                act_x + act_unit_w, act_y + btn_h);
 8011e76:	4413      	add	r3, r2
                    lv_area_set(&ext->button_areas[btn_i],  ext->button_areas[btn_i - 1].x2, act_y,
 8011e78:	9a03      	ldr	r2, [sp, #12]
 8011e7a:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8011e7e:	9905      	ldr	r1, [sp, #20]
 8011e80:	b21b      	sxth	r3, r3
 8011e82:	f930 ec04 	ldrsh.w	lr, [r0, #-4]
 8011e86:	9100      	str	r1, [sp, #0]
 8011e88:	4671      	mov	r1, lr
 8011e8a:	f7fd fd49 	bl	800f920 <lv_area_set>
 8011e8e:	f859 3f04 	ldr.w	r3, [r9, #4]!
 8011e92:	f108 0801 	add.w	r8, r8, #1
 8011e96:	781b      	ldrb	r3, [r3, #0]
            for(i = 0; i < btn_cnt; i++) {
 8011e98:	fa1f f188 	uxth.w	r1, r8
    if((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) {
 8011e9c:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8011ea0:	2a80      	cmp	r2, #128	; 0x80
        return btn_str[0] & LV_BTNM_WIDTH_MASK;
 8011ea2:	bf0c      	ite	eq
 8011ea4:	f003 0307 	andeq.w	r3, r3, #7
    if((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) {
 8011ea8:	2301      	movne	r3, #1
            for(i = 0; i < btn_cnt; i++) {
 8011eaa:	428f      	cmp	r7, r1
                unit_act_cnt += get_button_width(map_p_tmp[i]);
 8011eac:	441d      	add	r5, r3
 8011eae:	b2ad      	uxth	r5, r5
            for(i = 0; i < btn_cnt; i++) {
 8011eb0:	d92f      	bls.n	8011f12 <lv_btnm_set_map+0x262>
 8011eb2:	f9ba e024 	ldrsh.w	lr, [sl, #36]	; 0x24
 8011eb6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8011eba:	9a04      	ldr	r2, [sp, #16]
 8011ebc:	781b      	ldrb	r3, [r3, #0]
 8011ebe:	1850      	adds	r0, r2, r1
                act_x = (unit_act_cnt * all_unit_w) / unit_cnt + i * style_bg->body.padding.inner + style_bg->body.padding.hor;
 8011ec0:	f9ba c022 	ldrsh.w	ip, [sl, #34]	; 0x22
 8011ec4:	fb1e f101 	smulbb	r1, lr, r1
    if((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) {
 8011ec8:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8011ecc:	b280      	uxth	r0, r0
 8011ece:	2a80      	cmp	r2, #128	; 0x80
                act_x = (unit_act_cnt * all_unit_w) / unit_cnt + i * style_bg->body.padding.inner + style_bg->body.padding.hor;
 8011ed0:	fb06 f205 	mul.w	r2, r6, r5
 8011ed4:	4461      	add	r1, ip
        return btn_str[0] & LV_BTNM_WIDTH_MASK;
 8011ed6:	bf0c      	ite	eq
 8011ed8:	f003 0307 	andeq.w	r3, r3, #7
    if((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) {
 8011edc:	2301      	movne	r3, #1
                act_x = (unit_act_cnt * all_unit_w) / unit_cnt + i * style_bg->body.padding.inner + style_bg->body.padding.hor;
 8011ede:	fb92 f2f4 	sdiv	r2, r2, r4
                act_unit_w = (all_unit_w * get_button_width(map_p_tmp[i])) / unit_cnt;
 8011ee2:	fb13 f306 	smulbb	r3, r3, r6
                act_x = (unit_act_cnt * all_unit_w) / unit_cnt + i * style_bg->body.padding.inner + style_bg->body.padding.hor;
 8011ee6:	440a      	add	r2, r1
                act_unit_w = (all_unit_w * get_button_width(map_p_tmp[i])) / unit_cnt;
 8011ee8:	fb93 f3f4 	sdiv	r3, r3, r4
                act_x = (unit_act_cnt * all_unit_w) / unit_cnt + i * style_bg->body.padding.inner + style_bg->body.padding.hor;
 8011eec:	b292      	uxth	r2, r2
                act_unit_w --;                              /*-1 because e.g. width = 100 means 101 pixels (0..100)*/
 8011eee:	3b01      	subs	r3, #1
                act_x = (unit_act_cnt * all_unit_w) / unit_cnt + i * style_bg->body.padding.inner + style_bg->body.padding.hor;
 8011ef0:	b211      	sxth	r1, r2
                act_unit_w --;                              /*-1 because e.g. width = 100 means 101 pixels (0..100)*/
 8011ef2:	b29b      	uxth	r3, r3
                if(style_bg->body.padding.inner == 0 && act_x != style_bg->body.padding.hor) {
 8011ef4:	f1be 0f00 	cmp.w	lr, #0
 8011ef8:	d0b9      	beq.n	8011e6e <lv_btnm_set_map+0x1be>
                    lv_area_set(&ext->button_areas[btn_i],  act_x, act_y,
 8011efa:	f8db e004 	ldr.w	lr, [fp, #4]
                                act_x + act_unit_w, act_y + btn_h);
 8011efe:	4413      	add	r3, r2
                    lv_area_set(&ext->button_areas[btn_i],  act_x, act_y,
 8011f00:	9a05      	ldr	r2, [sp, #20]
 8011f02:	b21b      	sxth	r3, r3
 8011f04:	9200      	str	r2, [sp, #0]
 8011f06:	eb0e 00c0 	add.w	r0, lr, r0, lsl #3
 8011f0a:	9a03      	ldr	r2, [sp, #12]
 8011f0c:	f7fd fd08 	bl	800f920 <lv_area_set>
 8011f10:	e7bd      	b.n	8011e8e <lv_btnm_set_map+0x1de>
 8011f12:	9b04      	ldr	r3, [sp, #16]
 8011f14:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8011f18:	441f      	add	r7, r3
 8011f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f1c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8011f1e:	f8d3 8000 	ldr.w	r8, [r3]
 8011f22:	9b08      	ldr	r3, [sp, #32]
 8011f24:	f9b3 b024 	ldrsh.w	fp, [r3, #36]	; 0x24
 8011f28:	b2bb      	uxth	r3, r7
 8011f2a:	9304      	str	r3, [sp, #16]
 8011f2c:	e763      	b.n	8011df6 <lv_btnm_set_map+0x146>
    lv_obj_invalidate(btnm);
 8011f2e:	980b      	ldr	r0, [sp, #44]	; 0x2c
}
 8011f30:	b011      	add	sp, #68	; 0x44
 8011f32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_invalidate(btnm);
 8011f36:	f7f6 bf7f 	b.w	8008e38 <lv_obj_invalidate>
}
 8011f3a:	b011      	add	sp, #68	; 0x44
 8011f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for(li = 0; strlen(map[li]) != 0; li++) {
 8011f40:	2601      	movs	r6, #1
 8011f42:	e71f      	b.n	8011d84 <lv_btnm_set_map+0xd4>
    uint16_t btn_cnt = 0;
 8011f44:	4625      	mov	r5, r4
 8011f46:	e6d8      	b.n	8011cfa <lv_btnm_set_map+0x4a>
 8011f48:	0808ba64 	.word	0x0808ba64

08011f4c <lv_btnm_signal>:
    res = ancestor_signal(btnm, sign, param);
 8011f4c:	4bcc      	ldr	r3, [pc, #816]	; (8012280 <lv_btnm_signal+0x334>)
{
 8011f4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    res = ancestor_signal(btnm, sign, param);
 8011f52:	685b      	ldr	r3, [r3, #4]
{
 8011f54:	b087      	sub	sp, #28
 8011f56:	4606      	mov	r6, r0
 8011f58:	460d      	mov	r5, r1
 8011f5a:	4617      	mov	r7, r2
    res = ancestor_signal(btnm, sign, param);
 8011f5c:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8011f5e:	2801      	cmp	r0, #1
    res = ancestor_signal(btnm, sign, param);
 8011f60:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
 8011f62:	d003      	beq.n	8011f6c <lv_btnm_signal+0x20>
}
 8011f64:	4620      	mov	r0, r4
 8011f66:	b007      	add	sp, #28
 8011f68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8011f6c:	4630      	mov	r0, r6
 8011f6e:	f7f7 fe69 	bl	8009c44 <lv_obj_get_ext_attr>
 8011f72:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CLEANUP) {
 8011f74:	b3c5      	cbz	r5, 8011fe8 <lv_btnm_signal+0x9c>
    } else if(sign == LV_SIGNAL_STYLE_CHG || sign == LV_SIGNAL_CORD_CHG) {
 8011f76:	1eab      	subs	r3, r5, #2
 8011f78:	2b01      	cmp	r3, #1
 8011f7a:	f240 811f 	bls.w	80121bc <lv_btnm_signal+0x270>
    } else if(sign == LV_SIGNAL_PRESSING) {
 8011f7e:	2d09      	cmp	r5, #9
 8011f80:	f000 80b5 	beq.w	80120ee <lv_btnm_signal+0x1a2>
    else if(sign == LV_SIGNAL_LONG_PRESS_REP) {
 8011f84:	2d0d      	cmp	r5, #13
 8011f86:	d033      	beq.n	8011ff0 <lv_btnm_signal+0xa4>
    } else if(sign == LV_SIGNAL_RELEASED) {
 8011f88:	2d0b      	cmp	r5, #11
 8011f8a:	d056      	beq.n	801203a <lv_btnm_signal+0xee>
    } else if(sign == LV_SIGNAL_PRESS_LOST || sign == LV_SIGNAL_DEFOCUS) {
 8011f8c:	2d0a      	cmp	r5, #10
 8011f8e:	f000 811a 	beq.w	80121c6 <lv_btnm_signal+0x27a>
 8011f92:	2d11      	cmp	r5, #17
 8011f94:	f000 8117 	beq.w	80121c6 <lv_btnm_signal+0x27a>
    } else if(sign == LV_SIGNAL_FOCUS) {
 8011f98:	2d10      	cmp	r5, #16
 8011f9a:	d013      	beq.n	8011fc4 <lv_btnm_signal+0x78>
    } else if(sign == LV_SIGNAL_CONTROLL) {
 8011f9c:	2d12      	cmp	r5, #18
 8011f9e:	f000 811a 	beq.w	80121d6 <lv_btnm_signal+0x28a>
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 8011fa2:	2d14      	cmp	r5, #20
 8011fa4:	f000 813f 	beq.w	8012226 <lv_btnm_signal+0x2da>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8011fa8:	2d06      	cmp	r5, #6
 8011faa:	d1db      	bne.n	8011f64 <lv_btnm_signal+0x18>
 8011fac:	1f3a      	subs	r2, r7, #4
 8011fae:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 8011fb0:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8011fb4:	b111      	cbz	r1, 8011fbc <lv_btnm_signal+0x70>
 8011fb6:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) {  /*Find the last set data*/
 8011fb8:	2b07      	cmp	r3, #7
 8011fba:	d1f9      	bne.n	8011fb0 <lv_btnm_signal+0x64>
        buf->type[i] = "lv_btnm";
 8011fbc:	4ab1      	ldr	r2, [pc, #708]	; (8012284 <lv_btnm_signal+0x338>)
 8011fbe:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 8011fc2:	e7cf      	b.n	8011f64 <lv_btnm_signal+0x18>
        lv_indev_t * indev = lv_indev_get_act();
 8011fc4:	f7f6 fe6c 	bl	8008ca0 <lv_indev_get_act>
 8011fc8:	4605      	mov	r5, r0
        lv_hal_indev_type_t indev_type = lv_indev_get_type(indev);
 8011fca:	f7f6 fe6f 	bl	8008cac <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_POINTER) {
 8011fce:	2801      	cmp	r0, #1
 8011fd0:	f000 8148 	beq.w	8012264 <lv_btnm_signal+0x318>
        } else  if(indev_type == LV_INDEV_TYPE_ENCODER) {
 8011fd4:	2804      	cmp	r0, #4
 8011fd6:	f000 8197 	beq.w	8012308 <lv_btnm_signal+0x3bc>
            ext->btn_id_pr = 0;
 8011fda:	2300      	movs	r3, #0
 8011fdc:	f8a8 3022 	strh.w	r3, [r8, #34]	; 0x22
        lv_obj_invalidate(btnm);
 8011fe0:	4630      	mov	r0, r6
 8011fe2:	f7f6 ff29 	bl	8008e38 <lv_obj_invalidate>
 8011fe6:	e7bd      	b.n	8011f64 <lv_btnm_signal+0x18>
        lv_mem_free(ext->button_areas);
 8011fe8:	6840      	ldr	r0, [r0, #4]
 8011fea:	f7fe f84d 	bl	8010088 <lv_mem_free>
 8011fee:	e7b9      	b.n	8011f64 <lv_btnm_signal+0x18>
        if(ext->action && ext->btn_id_pr != LV_BTNM_PR_NONE) {
 8011ff0:	6883      	ldr	r3, [r0, #8]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d0b6      	beq.n	8011f64 <lv_btnm_signal+0x18>
 8011ff6:	8c41      	ldrh	r1, [r0, #34]	; 0x22
 8011ff8:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8011ffc:	42a9      	cmp	r1, r5
 8011ffe:	d0b1      	beq.n	8011f64 <lv_btnm_signal+0x18>
            uint16_t txt_i = get_button_text(btnm, ext->btn_id_pr);
 8012000:	4630      	mov	r0, r6
 8012002:	f7ff fc6f 	bl	80118e4 <get_button_text>
            if(txt_i != LV_BTNM_PR_NONE) {
 8012006:	42a8      	cmp	r0, r5
 8012008:	d0ac      	beq.n	8011f64 <lv_btnm_signal+0x18>
                if(button_is_repeat_disabled(ext->map_p[txt_i]) == false &&
 801200a:	f8d8 3000 	ldr.w	r3, [r8]
 801200e:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 8012012:	780b      	ldrb	r3, [r1, #0]
    if(((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) &&
 8012014:	f003 02d0 	and.w	r2, r3, #208	; 0xd0
 8012018:	2a90      	cmp	r2, #144	; 0x90
 801201a:	d0a3      	beq.n	8011f64 <lv_btnm_signal+0x18>
    if(((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) &&
 801201c:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
 8012020:	2aa0      	cmp	r2, #160	; 0xa0
 8012022:	d09f      	beq.n	8011f64 <lv_btnm_signal+0x18>
    if((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) return &btn_str[1];
 8012024:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
                    res = ext->action(btnm, cut_ctrl_byte(ext->map_p[txt_i]));
 8012028:	f8d8 2008 	ldr.w	r2, [r8, #8]
    if((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) return &btn_str[1];
 801202c:	2b80      	cmp	r3, #128	; 0x80
 801202e:	f000 80f8 	beq.w	8012222 <lv_btnm_signal+0x2d6>
                    res = ext->action(btnm, cut_ctrl_byte(ext->map_p[txt_i]));
 8012032:	4630      	mov	r0, r6
 8012034:	4790      	blx	r2
 8012036:	4604      	mov	r4, r0
 8012038:	e794      	b.n	8011f64 <lv_btnm_signal+0x18>
        if(ext->btn_id_pr != LV_BTNM_PR_NONE) {
 801203a:	8c41      	ldrh	r1, [r0, #34]	; 0x22
 801203c:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8012040:	42a9      	cmp	r1, r5
 8012042:	d08f      	beq.n	8011f64 <lv_btnm_signal+0x18>
            uint16_t txt_i = get_button_text(btnm, ext->btn_id_pr);
 8012044:	4630      	mov	r0, r6
 8012046:	f7ff fc4d 	bl	80118e4 <get_button_text>
            if(button_is_inactive(ext->map_p[txt_i]) == false && txt_i != LV_BTNM_PR_NONE) {        /*Ignore the inactive buttons anf click between the buttons*/
 801204a:	f8d8 3000 	ldr.w	r3, [r8]
 801204e:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 8012052:	780b      	ldrb	r3, [r1, #0]
    if(((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) &&
 8012054:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
            if(button_is_inactive(ext->map_p[txt_i]) == false && txt_i != LV_BTNM_PR_NONE) {        /*Ignore the inactive buttons anf click between the buttons*/
 8012058:	2aa0      	cmp	r2, #160	; 0xa0
 801205a:	d083      	beq.n	8011f64 <lv_btnm_signal+0x18>
 801205c:	42a8      	cmp	r0, r5
 801205e:	d081      	beq.n	8011f64 <lv_btnm_signal+0x18>
                if(ext->action) res = ext->action(btnm, cut_ctrl_byte(ext->map_p[txt_i]));
 8012060:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8012064:	b142      	cbz	r2, 8012078 <lv_btnm_signal+0x12c>
    if((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) return &btn_str[1];
 8012066:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
                if(ext->action) res = ext->action(btnm, cut_ctrl_byte(ext->map_p[txt_i]));
 801206a:	4630      	mov	r0, r6
    if((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) return &btn_str[1];
 801206c:	2b80      	cmp	r3, #128	; 0x80
 801206e:	bf08      	it	eq
 8012070:	3101      	addeq	r1, #1
                if(ext->action) res = ext->action(btnm, cut_ctrl_byte(ext->map_p[txt_i]));
 8012072:	4790      	blx	r2
                if(res == LV_RES_OK) {
 8012074:	2801      	cmp	r0, #1
 8012076:	d1de      	bne.n	8012036 <lv_btnm_signal+0xea>
                    lv_obj_get_coords(btnm, &btnm_area);
 8012078:	a902      	add	r1, sp, #8
 801207a:	4630      	mov	r0, r6
 801207c:	f7f7 fcaa 	bl	80099d4 <lv_obj_get_coords>
                    lv_area_copy(&btn_area, &ext->button_areas[ext->btn_id_pr]);
 8012080:	f8b8 3022 	ldrh.w	r3, [r8, #34]	; 0x22
 8012084:	f8d8 1004 	ldr.w	r1, [r8, #4]
                    btn_area.x1 += btnm_area.x1;
 8012088:	f8bd 2008 	ldrh.w	r2, [sp, #8]
                    lv_area_copy(&btn_area, &ext->button_areas[ext->btn_id_pr]);
 801208c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    memcpy(dest, src, sizeof(lv_area_t));
 8012090:	ab04      	add	r3, sp, #16
 8012092:	6808      	ldr	r0, [r1, #0]
 8012094:	6849      	ldr	r1, [r1, #4]
 8012096:	c303      	stmia	r3!, {r0, r1}
                    btn_area.x2 += btnm_area.x1;
 8012098:	f8bd 7014 	ldrh.w	r7, [sp, #20]
                    lv_inv_area(&btn_area);
 801209c:	a804      	add	r0, sp, #16
                    btn_area.x1 += btnm_area.x1;
 801209e:	f8bd 5010 	ldrh.w	r5, [sp, #16]
                    btn_area.y1 += btnm_area.y1;
 80120a2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80120a6:	f8bd 1012 	ldrh.w	r1, [sp, #18]
                    btn_area.x1 += btnm_area.x1;
 80120aa:	4415      	add	r5, r2
                    btn_area.x2 += btnm_area.x1;
 80120ac:	443a      	add	r2, r7
                    btn_area.y2 += btnm_area.y1;
 80120ae:	f8bd 7016 	ldrh.w	r7, [sp, #22]
                    btn_area.y1 += btnm_area.y1;
 80120b2:	4419      	add	r1, r3
                    btn_area.x1 += btnm_area.x1;
 80120b4:	f8ad 5010 	strh.w	r5, [sp, #16]
                    btn_area.y2 += btnm_area.y1;
 80120b8:	443b      	add	r3, r7
                    btn_area.x2 += btnm_area.x1;
 80120ba:	f8ad 2014 	strh.w	r2, [sp, #20]
                    btn_area.y1 += btnm_area.y1;
 80120be:	f8ad 1012 	strh.w	r1, [sp, #18]
                    btn_area.y2 += btnm_area.y1;
 80120c2:	f8ad 3016 	strh.w	r3, [sp, #22]
                    lv_inv_area(&btn_area);
 80120c6:	f7f8 f81d 	bl	800a104 <lv_inv_area>
                    if(ext->toggle != 0) {
 80120ca:	f898 3026 	ldrb.w	r3, [r8, #38]	; 0x26
 80120ce:	07d9      	lsls	r1, r3, #31
 80120d0:	f100 8162 	bmi.w	8012398 <lv_btnm_signal+0x44c>
                    lv_group_t * g = lv_obj_get_group(btnm);
 80120d4:	4630      	mov	r0, r6
 80120d6:	f7f7 fdb7 	bl	8009c48 <lv_obj_get_group>
                    if(lv_group_get_focused(g) != btnm) {
 80120da:	f7f6 f89f 	bl	800821c <lv_group_get_focused>
 80120de:	4286      	cmp	r6, r0
 80120e0:	f43f af40 	beq.w	8011f64 <lv_btnm_signal+0x18>
                        ext->btn_id_pr = LV_BTNM_PR_NONE;
 80120e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80120e8:	f8a8 3022 	strh.w	r3, [r8, #34]	; 0x22
 80120ec:	e73a      	b.n	8011f64 <lv_btnm_signal+0x18>
        lv_indev_get_point(param, &p);
 80120ee:	4638      	mov	r0, r7
 80120f0:	a901      	add	r1, sp, #4
 80120f2:	f7f6 fdf9 	bl	8008ce8 <lv_indev_get_point>
        btn_pr = get_button_from_point(btnm, &p);
 80120f6:	a901      	add	r1, sp, #4
 80120f8:	4630      	mov	r0, r6
 80120fa:	f7ff fc29 	bl	8011950 <get_button_from_point>
        lv_obj_get_coords(btnm, &btnm_area);
 80120fe:	a902      	add	r1, sp, #8
        btn_pr = get_button_from_point(btnm, &p);
 8012100:	4605      	mov	r5, r0
        lv_obj_get_coords(btnm, &btnm_area);
 8012102:	4630      	mov	r0, r6
 8012104:	f7f7 fc66 	bl	80099d4 <lv_obj_get_coords>
        if(btn_pr != ext->btn_id_pr) {
 8012108:	f8b8 3022 	ldrh.w	r3, [r8, #34]	; 0x22
 801210c:	42ab      	cmp	r3, r5
 801210e:	d052      	beq.n	80121b6 <lv_btnm_signal+0x26a>
            lv_indev_reset_lpr(param);
 8012110:	4638      	mov	r0, r7
 8012112:	f7f6 fdd9 	bl	8008cc8 <lv_indev_reset_lpr>
            if(ext->btn_id_pr != LV_BTNM_PR_NONE) {
 8012116:	f8b8 3022 	ldrh.w	r3, [r8, #34]	; 0x22
 801211a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801211e:	4293      	cmp	r3, r2
 8012120:	d022      	beq.n	8012168 <lv_btnm_signal+0x21c>
                lv_area_copy(&btn_area, &ext->button_areas[ext->btn_id_pr]);
 8012122:	f8d8 1004 	ldr.w	r1, [r8, #4]
                btn_area.x1 += btnm_area.x1;
 8012126:	f8bd 2008 	ldrh.w	r2, [sp, #8]
                lv_area_copy(&btn_area, &ext->button_areas[ext->btn_id_pr]);
 801212a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801212e:	ab04      	add	r3, sp, #16
 8012130:	6808      	ldr	r0, [r1, #0]
 8012132:	6849      	ldr	r1, [r1, #4]
 8012134:	c303      	stmia	r3!, {r0, r1}
                btn_area.x2 += btnm_area.x1;
 8012136:	f8bd 7014 	ldrh.w	r7, [sp, #20]
                lv_inv_area(&btn_area);
 801213a:	a804      	add	r0, sp, #16
                btn_area.x1 += btnm_area.x1;
 801213c:	f8bd 6010 	ldrh.w	r6, [sp, #16]
                btn_area.y1 += btnm_area.y1;
 8012140:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8012144:	f8bd 1012 	ldrh.w	r1, [sp, #18]
                btn_area.x1 += btnm_area.x1;
 8012148:	4416      	add	r6, r2
                btn_area.x2 += btnm_area.x1;
 801214a:	443a      	add	r2, r7
                btn_area.y2 += btnm_area.y1;
 801214c:	f8bd 7016 	ldrh.w	r7, [sp, #22]
                btn_area.y1 += btnm_area.y1;
 8012150:	4419      	add	r1, r3
                btn_area.x1 += btnm_area.x1;
 8012152:	f8ad 6010 	strh.w	r6, [sp, #16]
                btn_area.y2 += btnm_area.y1;
 8012156:	443b      	add	r3, r7
                btn_area.x2 += btnm_area.x1;
 8012158:	f8ad 2014 	strh.w	r2, [sp, #20]
                btn_area.y1 += btnm_area.y1;
 801215c:	f8ad 1012 	strh.w	r1, [sp, #18]
                btn_area.y2 += btnm_area.y1;
 8012160:	f8ad 3016 	strh.w	r3, [sp, #22]
                lv_inv_area(&btn_area);
 8012164:	f7f7 ffce 	bl	800a104 <lv_inv_area>
            if(btn_pr != LV_BTNM_PR_NONE) {
 8012168:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801216c:	429d      	cmp	r5, r3
 801216e:	d022      	beq.n	80121b6 <lv_btnm_signal+0x26a>
                lv_area_copy(&btn_area, &ext->button_areas[btn_pr]);
 8012170:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012174:	ae04      	add	r6, sp, #16
                btn_area.x1 += btnm_area.x1;
 8012176:	f8bd 2008 	ldrh.w	r2, [sp, #8]
                lv_area_copy(&btn_area, &ext->button_areas[btn_pr]);
 801217a:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
                btn_area.y1 += btnm_area.y1;
 801217e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8012182:	6808      	ldr	r0, [r1, #0]
 8012184:	6849      	ldr	r1, [r1, #4]
 8012186:	c603      	stmia	r6!, {r0, r1}
                btn_area.x2 += btnm_area.x1;
 8012188:	f8bd 7014 	ldrh.w	r7, [sp, #20]
                lv_inv_area(&btn_area);
 801218c:	a804      	add	r0, sp, #16
                btn_area.x1 += btnm_area.x1;
 801218e:	f8bd 6010 	ldrh.w	r6, [sp, #16]
                btn_area.y1 += btnm_area.y1;
 8012192:	f8bd 1012 	ldrh.w	r1, [sp, #18]
                btn_area.x1 += btnm_area.x1;
 8012196:	4416      	add	r6, r2
                btn_area.x2 += btnm_area.x1;
 8012198:	443a      	add	r2, r7
                btn_area.y2 += btnm_area.y1;
 801219a:	f8bd 7016 	ldrh.w	r7, [sp, #22]
                btn_area.y1 += btnm_area.y1;
 801219e:	4419      	add	r1, r3
                btn_area.x1 += btnm_area.x1;
 80121a0:	f8ad 6010 	strh.w	r6, [sp, #16]
                btn_area.y2 += btnm_area.y1;
 80121a4:	443b      	add	r3, r7
                btn_area.x2 += btnm_area.x1;
 80121a6:	f8ad 2014 	strh.w	r2, [sp, #20]
                btn_area.y1 += btnm_area.y1;
 80121aa:	f8ad 1012 	strh.w	r1, [sp, #18]
                btn_area.y2 += btnm_area.y1;
 80121ae:	f8ad 3016 	strh.w	r3, [sp, #22]
                lv_inv_area(&btn_area);
 80121b2:	f7f7 ffa7 	bl	800a104 <lv_inv_area>
        ext->btn_id_pr = btn_pr;
 80121b6:	f8a8 5022 	strh.w	r5, [r8, #34]	; 0x22
 80121ba:	e6d3      	b.n	8011f64 <lv_btnm_signal+0x18>
        lv_btnm_set_map(btnm, ext->map_p);
 80121bc:	6801      	ldr	r1, [r0, #0]
 80121be:	4630      	mov	r0, r6
 80121c0:	f7ff fd76 	bl	8011cb0 <lv_btnm_set_map>
 80121c4:	e6ce      	b.n	8011f64 <lv_btnm_signal+0x18>
        ext->btn_id_pr = LV_BTNM_PR_NONE;
 80121c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
        lv_obj_invalidate(btnm);
 80121ca:	4630      	mov	r0, r6
        ext->btn_id_pr = LV_BTNM_PR_NONE;
 80121cc:	f8a8 3022 	strh.w	r3, [r8, #34]	; 0x22
        lv_obj_invalidate(btnm);
 80121d0:	f7f6 fe32 	bl	8008e38 <lv_obj_invalidate>
 80121d4:	e6c6      	b.n	8011f64 <lv_btnm_signal+0x18>
        char c = *((char *)param);
 80121d6:	783b      	ldrb	r3, [r7, #0]
        if(c == LV_GROUP_KEY_RIGHT) {
 80121d8:	2b13      	cmp	r3, #19
 80121da:	d027      	beq.n	801222c <lv_btnm_signal+0x2e0>
        } else if(c == LV_GROUP_KEY_LEFT) {
 80121dc:	2b14      	cmp	r3, #20
 80121de:	d035      	beq.n	801224c <lv_btnm_signal+0x300>
        } else if(c == LV_GROUP_KEY_DOWN) {
 80121e0:	2b12      	cmp	r3, #18
 80121e2:	d051      	beq.n	8012288 <lv_btnm_signal+0x33c>
        } else if(c == LV_GROUP_KEY_UP) {
 80121e4:	2b11      	cmp	r3, #17
 80121e6:	f000 809c 	beq.w	8012322 <lv_btnm_signal+0x3d6>
        } else if(c == LV_GROUP_KEY_ENTER) {
 80121ea:	2b0a      	cmp	r3, #10
 80121ec:	f47f aeba 	bne.w	8011f64 <lv_btnm_signal+0x18>
            if(ext->action != NULL) {
 80121f0:	6883      	ldr	r3, [r0, #8]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	f43f aeb6 	beq.w	8011f64 <lv_btnm_signal+0x18>
                uint16_t txt_i = get_button_text(btnm, ext->btn_id_pr);
 80121f8:	8c41      	ldrh	r1, [r0, #34]	; 0x22
 80121fa:	4630      	mov	r0, r6
 80121fc:	f7ff fb72 	bl	80118e4 <get_button_text>
                if(txt_i != LV_BTNM_PR_NONE) {
 8012200:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012204:	4298      	cmp	r0, r3
 8012206:	f43f aead 	beq.w	8011f64 <lv_btnm_signal+0x18>
                    res = ext->action(btnm, cut_ctrl_byte(ext->map_p[txt_i]));
 801220a:	f8d8 3000 	ldr.w	r3, [r8]
 801220e:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8012212:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
    if((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) return &btn_str[1];
 8012216:	780b      	ldrb	r3, [r1, #0]
 8012218:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801221c:	2b80      	cmp	r3, #128	; 0x80
 801221e:	f47f af08 	bne.w	8012032 <lv_btnm_signal+0xe6>
 8012222:	3101      	adds	r1, #1
 8012224:	e705      	b.n	8012032 <lv_btnm_signal+0xe6>
        *editable = true;
 8012226:	2301      	movs	r3, #1
 8012228:	703b      	strb	r3, [r7, #0]
 801222a:	e69b      	b.n	8011f64 <lv_btnm_signal+0x18>
            if(ext->btn_id_pr  == LV_BTNM_PR_NONE) ext->btn_id_pr = 0;
 801222c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 801222e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012232:	4293      	cmp	r3, r2
 8012234:	d021      	beq.n	801227a <lv_btnm_signal+0x32e>
            else ext->btn_id_pr++;
 8012236:	3301      	adds	r3, #1
 8012238:	b29b      	uxth	r3, r3
 801223a:	461a      	mov	r2, r3
 801223c:	8443      	strh	r3, [r0, #34]	; 0x22
            if(ext->btn_id_pr >= ext->btn_cnt - 1) ext->btn_id_pr = ext->btn_cnt - 1;
 801223e:	f8b8 3020 	ldrh.w	r3, [r8, #32]
 8012242:	3b01      	subs	r3, #1
 8012244:	4293      	cmp	r3, r2
 8012246:	f77f aec9 	ble.w	8011fdc <lv_btnm_signal+0x90>
 801224a:	e6c9      	b.n	8011fe0 <lv_btnm_signal+0x94>
            if(ext->btn_id_pr  == LV_BTNM_PR_NONE) ext->btn_id_pr = 0;
 801224c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 801224e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012252:	4293      	cmp	r3, r2
 8012254:	f43f aec1 	beq.w	8011fda <lv_btnm_signal+0x8e>
            if(ext->btn_id_pr > 0) ext->btn_id_pr--;
 8012258:	2b00      	cmp	r3, #0
 801225a:	f43f aec1 	beq.w	8011fe0 <lv_btnm_signal+0x94>
 801225e:	3b01      	subs	r3, #1
 8012260:	8443      	strh	r3, [r0, #34]	; 0x22
 8012262:	e6bd      	b.n	8011fe0 <lv_btnm_signal+0x94>
            lv_indev_get_point(indev, &p1);
 8012264:	4628      	mov	r0, r5
 8012266:	a904      	add	r1, sp, #16
 8012268:	f7f6 fd3e 	bl	8008ce8 <lv_indev_get_point>
            uint16_t btn_i = get_button_from_point(btnm, &p1);
 801226c:	a904      	add	r1, sp, #16
 801226e:	4630      	mov	r0, r6
 8012270:	f7ff fb6e 	bl	8011950 <get_button_from_point>
            ext->btn_id_pr = btn_i;
 8012274:	f8a8 0022 	strh.w	r0, [r8, #34]	; 0x22
 8012278:	e6b2      	b.n	8011fe0 <lv_btnm_signal+0x94>
            if(ext->btn_id_pr  == LV_BTNM_PR_NONE) ext->btn_id_pr = 0;
 801227a:	2200      	movs	r2, #0
 801227c:	8442      	strh	r2, [r0, #34]	; 0x22
 801227e:	e7de      	b.n	801223e <lv_btnm_signal+0x2f2>
 8012280:	200174bc 	.word	0x200174bc
 8012284:	0808ba68 	.word	0x0808ba68
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8012288:	4630      	mov	r0, r6
 801228a:	f7f7 fcdb 	bl	8009c44 <lv_obj_get_ext_attr>
            style = lv_obj_get_style(btnm);
 801228e:	4630      	mov	r0, r6
 8012290:	f7f7 fbbe 	bl	8009a10 <lv_obj_get_style>
            if(ext->btn_id_pr  == LV_BTNM_PR_NONE) {
 8012294:	f8b8 2022 	ldrh.w	r2, [r8, #34]	; 0x22
 8012298:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801229c:	429a      	cmp	r2, r3
 801229e:	f43f ae9c 	beq.w	8011fda <lv_btnm_signal+0x8e>
                lv_coord_t pr_center = ext->button_areas[ext->btn_id_pr].x1 + (lv_area_get_width(&ext->button_areas[ext->btn_id_pr]) >> 1);
 80122a2:	f8d8 1004 	ldr.w	r1, [r8, #4]
                for(area_below = ext->btn_id_pr; area_below < ext->btn_cnt; area_below ++) {
 80122a6:	f8b8 7020 	ldrh.w	r7, [r8, #32]
                lv_coord_t pr_center = ext->button_areas[ext->btn_id_pr].x1 + (lv_area_get_width(&ext->button_areas[ext->btn_id_pr]) >> 1);
 80122aa:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 80122ae:	f831 5032 	ldrh.w	r5, [r1, r2, lsl #3]
                for(area_below = ext->btn_id_pr; area_below < ext->btn_cnt; area_below ++) {
 80122b2:	4297      	cmp	r7, r2
    return area_p->x2 - area_p->x1 + 1;
 80122b4:	8899      	ldrh	r1, [r3, #4]
 80122b6:	f101 0101 	add.w	r1, r1, #1
 80122ba:	eba1 0105 	sub.w	r1, r1, r5
                lv_coord_t pr_center = ext->button_areas[ext->btn_id_pr].x1 + (lv_area_get_width(&ext->button_areas[ext->btn_id_pr]) >> 1);
 80122be:	f341 014e 	sbfx	r1, r1, #1, #15
 80122c2:	4429      	add	r1, r5
 80122c4:	fa0f fe81 	sxth.w	lr, r1
                for(area_below = ext->btn_id_pr; area_below < ext->btn_cnt; area_below ++) {
 80122c8:	f67f ae8a 	bls.w	8011fe0 <lv_btnm_signal+0x94>
 80122cc:	f9b3 c002 	ldrsh.w	ip, [r3, #2]
 80122d0:	e004      	b.n	80122dc <lv_btnm_signal+0x390>
 80122d2:	b28a      	uxth	r2, r1
 80122d4:	3308      	adds	r3, #8
 80122d6:	4297      	cmp	r7, r2
 80122d8:	f67f ae82 	bls.w	8011fe0 <lv_btnm_signal+0x94>
                    if(ext->button_areas[area_below].y1 >  ext->button_areas[ext->btn_id_pr].y1 &&
 80122dc:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
                for(area_below = ext->btn_id_pr; area_below < ext->btn_cnt; area_below ++) {
 80122e0:	1c51      	adds	r1, r2, #1
                    if(ext->button_areas[area_below].y1 >  ext->button_areas[ext->btn_id_pr].y1 &&
 80122e2:	4565      	cmp	r5, ip
 80122e4:	ddf5      	ble.n	80122d2 <lv_btnm_signal+0x386>
 80122e6:	f9b3 5000 	ldrsh.w	r5, [r3]
 80122ea:	4575      	cmp	r5, lr
 80122ec:	dcf1      	bgt.n	80122d2 <lv_btnm_signal+0x386>
                            pr_center <=  ext->button_areas[area_below].x2 + style->body.padding.hor) {
 80122ee:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 80122f2:	f9b0 9022 	ldrsh.w	r9, [r0, #34]	; 0x22
 80122f6:	444d      	add	r5, r9
                            pr_center >=  ext->button_areas[area_below].x1 &&
 80122f8:	45ae      	cmp	lr, r5
 80122fa:	dcea      	bgt.n	80122d2 <lv_btnm_signal+0x386>
                if(area_below < ext->btn_cnt) ext->btn_id_pr = area_below;
 80122fc:	4297      	cmp	r7, r2
 80122fe:	f67f ae6f 	bls.w	8011fe0 <lv_btnm_signal+0x94>
 8012302:	f8a8 2022 	strh.w	r2, [r8, #34]	; 0x22
 8012306:	e66b      	b.n	8011fe0 <lv_btnm_signal+0x94>
            if(lv_group_get_editing(lv_obj_get_group(btnm))) ext->btn_id_pr = 0;
 8012308:	4630      	mov	r0, r6
 801230a:	f7f7 fc9d 	bl	8009c48 <lv_obj_get_group>
 801230e:	f7f5 ff8b 	bl	8008228 <lv_group_get_editing>
 8012312:	2800      	cmp	r0, #0
 8012314:	f47f ae61 	bne.w	8011fda <lv_btnm_signal+0x8e>
            else ext->btn_id_pr = LV_BTNM_PR_NONE;
 8012318:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801231c:	f8a8 3022 	strh.w	r3, [r8, #34]	; 0x22
 8012320:	e65e      	b.n	8011fe0 <lv_btnm_signal+0x94>
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8012322:	4630      	mov	r0, r6
 8012324:	f7f7 fc8e 	bl	8009c44 <lv_obj_get_ext_attr>
            style = lv_obj_get_style(btnm);
 8012328:	4630      	mov	r0, r6
 801232a:	f7f7 fb71 	bl	8009a10 <lv_obj_get_style>
            if(ext->btn_id_pr  == LV_BTNM_PR_NONE) {
 801232e:	f8b8 2022 	ldrh.w	r2, [r8, #34]	; 0x22
 8012332:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012336:	429a      	cmp	r2, r3
 8012338:	f43f ae4f 	beq.w	8011fda <lv_btnm_signal+0x8e>
                lv_coord_t pr_center = ext->button_areas[ext->btn_id_pr].x1 + (lv_area_get_width(&ext->button_areas[ext->btn_id_pr]) >> 1);
 801233c:	f8d8 7004 	ldr.w	r7, [r8, #4]
                for(area_above = ext->btn_id_pr; area_above >= 0; area_above --) {
 8012340:	b213      	sxth	r3, r2
                lv_coord_t pr_center = ext->button_areas[ext->btn_id_pr].x1 + (lv_area_get_width(&ext->button_areas[ext->btn_id_pr]) >> 1);
 8012342:	eb07 05c2 	add.w	r5, r7, r2, lsl #3
 8012346:	f837 1032 	ldrh.w	r1, [r7, r2, lsl #3]
                for(area_above = ext->btn_id_pr; area_above >= 0; area_above --) {
 801234a:	2b00      	cmp	r3, #0
 801234c:	88aa      	ldrh	r2, [r5, #4]
 801234e:	f102 0201 	add.w	r2, r2, #1
 8012352:	eba2 0201 	sub.w	r2, r2, r1
                lv_coord_t pr_center = ext->button_areas[ext->btn_id_pr].x1 + (lv_area_get_width(&ext->button_areas[ext->btn_id_pr]) >> 1);
 8012356:	f342 024e 	sbfx	r2, r2, #1, #15
 801235a:	440a      	add	r2, r1
 801235c:	fa0f fe82 	sxth.w	lr, r2
                for(area_above = ext->btn_id_pr; area_above >= 0; area_above --) {
 8012360:	f6ff ae3e 	blt.w	8011fe0 <lv_btnm_signal+0x94>
 8012364:	f9b5 c002 	ldrsh.w	ip, [r5, #2]
                    if(ext->button_areas[area_above].y1 < ext->button_areas[ext->btn_id_pr].y1 &&
 8012368:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
 801236c:	1e59      	subs	r1, r3, #1
 801236e:	f9b2 5002 	ldrsh.w	r5, [r2, #2]
 8012372:	4565      	cmp	r5, ip
 8012374:	da0c      	bge.n	8012390 <lv_btnm_signal+0x444>
                            pr_center >=  ext->button_areas[area_above].x1 - style->body.padding.hor &&
 8012376:	f937 5033 	ldrsh.w	r5, [r7, r3, lsl #3]
 801237a:	f9b0 9022 	ldrsh.w	r9, [r0, #34]	; 0x22
 801237e:	eba5 0509 	sub.w	r5, r5, r9
                    if(ext->button_areas[area_above].y1 < ext->button_areas[ext->btn_id_pr].y1 &&
 8012382:	45ae      	cmp	lr, r5
 8012384:	db04      	blt.n	8012390 <lv_btnm_signal+0x444>
                            pr_center >=  ext->button_areas[area_above].x1 - style->body.padding.hor &&
 8012386:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 801238a:	4572      	cmp	r2, lr
 801238c:	f6bf ae26 	bge.w	8011fdc <lv_btnm_signal+0x90>
 8012390:	b20b      	sxth	r3, r1
                for(area_above = ext->btn_id_pr; area_above >= 0; area_above --) {
 8012392:	1c5a      	adds	r2, r3, #1
 8012394:	d1e8      	bne.n	8012368 <lv_btnm_signal+0x41c>
 8012396:	e623      	b.n	8011fe0 <lv_btnm_signal+0x94>
                        lv_area_copy(&btn_area, &ext->button_areas[ext->btn_id_tgl]);
 8012398:	f8b8 3024 	ldrh.w	r3, [r8, #36]	; 0x24
    memcpy(dest, src, sizeof(lv_area_t));
 801239c:	ad04      	add	r5, sp, #16
 801239e:	f8d8 1004 	ldr.w	r1, [r8, #4]
                        btn_area.x1 += btnm_area.x1;
 80123a2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
                        lv_area_copy(&btn_area, &ext->button_areas[ext->btn_id_tgl]);
 80123a6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
                        btn_area.y1 += btnm_area.y1;
 80123aa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80123ae:	6808      	ldr	r0, [r1, #0]
 80123b0:	6849      	ldr	r1, [r1, #4]
 80123b2:	c503      	stmia	r5!, {r0, r1}
                        btn_area.x2 += btnm_area.x1;
 80123b4:	f8bd 7014 	ldrh.w	r7, [sp, #20]
                        lv_inv_area(&btn_area);
 80123b8:	a804      	add	r0, sp, #16
                        btn_area.x1 += btnm_area.x1;
 80123ba:	f8bd 5010 	ldrh.w	r5, [sp, #16]
                        btn_area.y1 += btnm_area.y1;
 80123be:	f8bd 1012 	ldrh.w	r1, [sp, #18]
                        btn_area.x1 += btnm_area.x1;
 80123c2:	4415      	add	r5, r2
                        btn_area.x2 += btnm_area.x1;
 80123c4:	443a      	add	r2, r7
                        btn_area.y2 += btnm_area.y1;
 80123c6:	f8bd 7016 	ldrh.w	r7, [sp, #22]
                        btn_area.y1 += btnm_area.y1;
 80123ca:	4419      	add	r1, r3
                        btn_area.x1 += btnm_area.x1;
 80123cc:	f8ad 5010 	strh.w	r5, [sp, #16]
                        btn_area.y2 += btnm_area.y1;
 80123d0:	443b      	add	r3, r7
                        btn_area.x2 += btnm_area.x1;
 80123d2:	f8ad 2014 	strh.w	r2, [sp, #20]
                        btn_area.y1 += btnm_area.y1;
 80123d6:	f8ad 1012 	strh.w	r1, [sp, #18]
                        btn_area.y2 += btnm_area.y1;
 80123da:	f8ad 3016 	strh.w	r3, [sp, #22]
                        lv_inv_area(&btn_area);
 80123de:	f7f7 fe91 	bl	800a104 <lv_inv_area>
                        ext->btn_id_tgl = ext->btn_id_pr;
 80123e2:	f8b8 3022 	ldrh.w	r3, [r8, #34]	; 0x22
 80123e6:	f8a8 3024 	strh.w	r3, [r8, #36]	; 0x24
 80123ea:	e673      	b.n	80120d4 <lv_btnm_signal+0x188>

080123ec <lv_btnm_set_action>:
{
 80123ec:	b510      	push	{r4, lr}
 80123ee:	460c      	mov	r4, r1
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 80123f0:	f7f7 fc28 	bl	8009c44 <lv_obj_get_ext_attr>
    ext->action = action;
 80123f4:	6084      	str	r4, [r0, #8]
 80123f6:	bd10      	pop	{r4, pc}

080123f8 <lv_btnm_set_toggle>:
{
 80123f8:	b570      	push	{r4, r5, r6, lr}
 80123fa:	460e      	mov	r6, r1
 80123fc:	4614      	mov	r4, r2
 80123fe:	4605      	mov	r5, r0
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8012400:	f7f7 fc20 	bl	8009c44 <lv_obj_get_ext_attr>
    ext->toggle = en == false ? 0 : 1;
 8012404:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 8012408:	f366 0300 	bfi	r3, r6, #0, #1
 801240c:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
    if(ext->toggle != 0) {
 8012410:	07db      	lsls	r3, r3, #31
 8012412:	d50a      	bpl.n	801242a <lv_btnm_set_toggle+0x32>
        if(id >= ext->btn_cnt) id = ext->btn_cnt - 1;
 8012414:	8c02      	ldrh	r2, [r0, #32]
 8012416:	42a2      	cmp	r2, r4
 8012418:	d801      	bhi.n	801241e <lv_btnm_set_toggle+0x26>
 801241a:	3a01      	subs	r2, #1
 801241c:	b294      	uxth	r4, r2
        ext->btn_id_tgl = id;
 801241e:	8484      	strh	r4, [r0, #36]	; 0x24
    lv_obj_invalidate(btnm);
 8012420:	4628      	mov	r0, r5
}
 8012422:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_invalidate(btnm);
 8012426:	f7f6 bd07 	b.w	8008e38 <lv_obj_invalidate>
        ext->btn_id_tgl = LV_BTNM_PR_NONE;
 801242a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801242e:	8483      	strh	r3, [r0, #36]	; 0x24
    lv_obj_invalidate(btnm);
 8012430:	4628      	mov	r0, r5
}
 8012432:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_invalidate(btnm);
 8012436:	f7f6 bcff 	b.w	8008e38 <lv_obj_invalidate>
 801243a:	bf00      	nop

0801243c <lv_btnm_set_style>:
{
 801243c:	b570      	push	{r4, r5, r6, lr}
 801243e:	460c      	mov	r4, r1
 8012440:	4616      	mov	r6, r2
 8012442:	4605      	mov	r5, r0
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8012444:	f7f7 fbfe 	bl	8009c44 <lv_obj_get_ext_attr>
    switch(type) {
 8012448:	2c05      	cmp	r4, #5
 801244a:	d828      	bhi.n	801249e <lv_btnm_set_style+0x62>
 801244c:	e8df f004 	tbb	[pc, r4]
 8012450:	1b150f09 	.word	0x1b150f09
 8012454:	0321      	.short	0x0321
            ext->styles_btn[LV_BTN_STATE_INA] = style;
 8012456:	61c6      	str	r6, [r0, #28]
            lv_obj_invalidate(btnm);
 8012458:	4628      	mov	r0, r5
}
 801245a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_obj_invalidate(btnm);
 801245e:	f7f6 bceb 	b.w	8008e38 <lv_obj_invalidate>
            lv_obj_set_style(btnm, style);
 8012462:	4631      	mov	r1, r6
 8012464:	4628      	mov	r0, r5
}
 8012466:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_obj_set_style(btnm, style);
 801246a:	f7f7 ba43 	b.w	80098f4 <lv_obj_set_style>
            ext->styles_btn[LV_BTN_STATE_REL] = style;
 801246e:	60c6      	str	r6, [r0, #12]
            lv_obj_invalidate(btnm);
 8012470:	4628      	mov	r0, r5
}
 8012472:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_obj_invalidate(btnm);
 8012476:	f7f6 bcdf 	b.w	8008e38 <lv_obj_invalidate>
            ext->styles_btn[LV_BTN_STATE_PR] = style;
 801247a:	6106      	str	r6, [r0, #16]
            lv_obj_invalidate(btnm);
 801247c:	4628      	mov	r0, r5
}
 801247e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_obj_invalidate(btnm);
 8012482:	f7f6 bcd9 	b.w	8008e38 <lv_obj_invalidate>
            ext->styles_btn[LV_BTN_STATE_TGL_REL] = style;
 8012486:	6146      	str	r6, [r0, #20]
            lv_obj_invalidate(btnm);
 8012488:	4628      	mov	r0, r5
}
 801248a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_obj_invalidate(btnm);
 801248e:	f7f6 bcd3 	b.w	8008e38 <lv_obj_invalidate>
            ext->styles_btn[LV_BTN_STATE_TGL_PR] = style;
 8012492:	6186      	str	r6, [r0, #24]
            lv_obj_invalidate(btnm);
 8012494:	4628      	mov	r0, r5
}
 8012496:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_obj_invalidate(btnm);
 801249a:	f7f6 bccd 	b.w	8008e38 <lv_obj_invalidate>
 801249e:	bd70      	pop	{r4, r5, r6, pc}

080124a0 <lv_btnm_create>:
{
 80124a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124a2:	460e      	mov	r6, r1
    lv_obj_t * new_btnm = lv_obj_create(par, copy);
 80124a4:	f7f6 fdc0 	bl	8009028 <lv_obj_create>
    lv_mem_assert(new_btnm);
 80124a8:	2800      	cmp	r0, #0
 80124aa:	d05e      	beq.n	801256a <lv_btnm_create+0xca>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_btnm);
 80124ac:	4f51      	ldr	r7, [pc, #324]	; (80125f4 <lv_btnm_create+0x154>)
 80124ae:	4605      	mov	r5, r0
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	f000 8094 	beq.w	80125e0 <lv_btnm_create+0x140>
    lv_btnm_ext_t * ext = lv_obj_allocate_ext_attr(new_btnm, sizeof(lv_btnm_ext_t));
 80124b8:	2128      	movs	r1, #40	; 0x28
 80124ba:	4628      	mov	r0, r5
 80124bc:	f7f7 f950 	bl	8009760 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 80124c0:	4604      	mov	r4, r0
 80124c2:	2800      	cmp	r0, #0
 80124c4:	d052      	beq.n	801256c <lv_btnm_create+0xcc>
    ext->toggle = 0;
 80124c6:	f890 1026 	ldrb.w	r1, [r0, #38]	; 0x26
    ext->btn_cnt = 0;
 80124ca:	2300      	movs	r3, #0
    ext->btn_id_pr = LV_BTNM_PR_NONE;
 80124cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ext->styles_btn[LV_BTN_STATE_REL] = &lv_style_btn_rel;
 80124d0:	f8df c140 	ldr.w	ip, [pc, #320]	; 8012614 <lv_btnm_create+0x174>
    ext->toggle = 0;
 80124d4:	f363 0100 	bfi	r1, r3, #0, #1
    ext->btn_cnt = 0;
 80124d8:	8403      	strh	r3, [r0, #32]
    ext->button_areas = NULL;
 80124da:	6043      	str	r3, [r0, #4]
    ext->action = NULL;
 80124dc:	6083      	str	r3, [r0, #8]
    ext->map_p = NULL;
 80124de:	6003      	str	r3, [r0, #0]
    ext->toggle = 0;
 80124e0:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    ext->styles_btn[LV_BTN_STATE_PR] = &lv_style_btn_pr;
 80124e4:	f8df e130 	ldr.w	lr, [pc, #304]	; 8012618 <lv_btnm_create+0x178>
    ext->styles_btn[LV_BTN_STATE_TGL_REL] = &lv_style_btn_tgl_rel;
 80124e8:	4843      	ldr	r0, [pc, #268]	; (80125f8 <lv_btnm_create+0x158>)
    ext->btn_id_pr = LV_BTNM_PR_NONE;
 80124ea:	8462      	strh	r2, [r4, #34]	; 0x22
    ext->btn_id_tgl = LV_BTNM_PR_NONE;
 80124ec:	84a2      	strh	r2, [r4, #36]	; 0x24
    ext->styles_btn[LV_BTN_STATE_TGL_PR] = &lv_style_btn_tgl_pr;
 80124ee:	4943      	ldr	r1, [pc, #268]	; (80125fc <lv_btnm_create+0x15c>)
    ext->styles_btn[LV_BTN_STATE_INA] = &lv_style_btn_ina;
 80124f0:	4a43      	ldr	r2, [pc, #268]	; (8012600 <lv_btnm_create+0x160>)
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_func(new_btnm);
 80124f2:	683b      	ldr	r3, [r7, #0]
    ext->styles_btn[LV_BTN_STATE_REL] = &lv_style_btn_rel;
 80124f4:	f8c4 c00c 	str.w	ip, [r4, #12]
    ext->styles_btn[LV_BTN_STATE_PR] = &lv_style_btn_pr;
 80124f8:	f8c4 e010 	str.w	lr, [r4, #16]
    ext->styles_btn[LV_BTN_STATE_TGL_REL] = &lv_style_btn_tgl_rel;
 80124fc:	6160      	str	r0, [r4, #20]
    ext->styles_btn[LV_BTN_STATE_TGL_PR] = &lv_style_btn_tgl_pr;
 80124fe:	61a1      	str	r1, [r4, #24]
    ext->styles_btn[LV_BTN_STATE_INA] = &lv_style_btn_ina;
 8012500:	61e2      	str	r2, [r4, #28]
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_func(new_btnm);
 8012502:	2b00      	cmp	r3, #0
 8012504:	d070      	beq.n	80125e8 <lv_btnm_create+0x148>
    lv_obj_set_signal_func(new_btnm, lv_btnm_signal);
 8012506:	493f      	ldr	r1, [pc, #252]	; (8012604 <lv_btnm_create+0x164>)
 8012508:	4628      	mov	r0, r5
 801250a:	f7f7 f925 	bl	8009758 <lv_obj_set_signal_func>
    lv_obj_set_design_func(new_btnm, lv_btnm_design);
 801250e:	493e      	ldr	r1, [pc, #248]	; (8012608 <lv_btnm_create+0x168>)
 8012510:	4628      	mov	r0, r5
 8012512:	f7f7 f923 	bl	800975c <lv_obj_set_design_func>
    if(copy == NULL) {
 8012516:	b356      	cbz	r6, 801256e <lv_btnm_create+0xce>
        lv_btnm_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8012518:	4630      	mov	r0, r6
 801251a:	f7f7 fb93 	bl	8009c44 <lv_obj_get_ext_attr>
 801251e:	4602      	mov	r2, r0
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8012520:	4630      	mov	r0, r6
        memcpy(ext->styles_btn, copy_ext->styles_btn, sizeof(ext->styles_btn));
 8012522:	4613      	mov	r3, r2
 8012524:	f853 6f0c 	ldr.w	r6, [r3, #12]!
 8012528:	f8d3 c004 	ldr.w	ip, [r3, #4]
 801252c:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8012530:	68df      	ldr	r7, [r3, #12]
 8012532:	f8c4 c010 	str.w	ip, [r4, #16]
 8012536:	f8c4 e014 	str.w	lr, [r4, #20]
 801253a:	60e6      	str	r6, [r4, #12]
 801253c:	61a7      	str	r7, [r4, #24]
 801253e:	691e      	ldr	r6, [r3, #16]
        ext->toggle = copy_ext->toggle;
 8012540:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
        memcpy(ext->styles_btn, copy_ext->styles_btn, sizeof(ext->styles_btn));
 8012544:	61e6      	str	r6, [r4, #28]
        ext->toggle = copy_ext->toggle;
 8012546:	f892 6026 	ldrb.w	r6, [r2, #38]	; 0x26
        ext->action = copy_ext->action;
 801254a:	6891      	ldr	r1, [r2, #8]
        ext->toggle = copy_ext->toggle;
 801254c:	f366 0300 	bfi	r3, r6, #0, #1
        ext->action = copy_ext->action;
 8012550:	60a1      	str	r1, [r4, #8]
        ext->toggle = copy_ext->toggle;
 8012552:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        ext->btn_id_tgl = copy_ext->btn_id_tgl;
 8012556:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 8012558:	84a3      	strh	r3, [r4, #36]	; 0x24
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801255a:	f7f7 fb73 	bl	8009c44 <lv_obj_get_ext_attr>
        lv_btnm_set_map(new_btnm, lv_btnm_get_map(copy));
 801255e:	6801      	ldr	r1, [r0, #0]
 8012560:	4628      	mov	r0, r5
 8012562:	f7ff fba5 	bl	8011cb0 <lv_btnm_set_map>
}
 8012566:	4628      	mov	r0, r5
 8012568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801256a:	e7fe      	b.n	801256a <lv_btnm_create+0xca>
 801256c:	e7fe      	b.n	801256c <lv_btnm_create+0xcc>
        lv_obj_set_size(new_btnm, LV_HOR_RES / 2, LV_VER_RES / 4);
 801256e:	2244      	movs	r2, #68	; 0x44
 8012570:	21f0      	movs	r1, #240	; 0xf0
 8012572:	4628      	mov	r0, r5
 8012574:	f7f6 fe9a 	bl	80092ac <lv_obj_set_size>
        lv_btnm_set_map(new_btnm, lv_btnm_def_map);
 8012578:	4924      	ldr	r1, [pc, #144]	; (801260c <lv_btnm_create+0x16c>)
 801257a:	4628      	mov	r0, r5
 801257c:	f7ff fb98 	bl	8011cb0 <lv_btnm_set_map>
        lv_theme_t * th = lv_theme_get_current();
 8012580:	f007 f84a 	bl	8019618 <lv_theme_get_current>
        if(th) {
 8012584:	4604      	mov	r4, r0
 8012586:	b328      	cbz	r0, 80125d4 <lv_btnm_create+0x134>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BG, th->btnm.bg);
 8012588:	4631      	mov	r1, r6
 801258a:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 801258e:	4628      	mov	r0, r5
 8012590:	f7ff ff54 	bl	801243c <lv_btnm_set_style>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_REL, th->btnm.btn.rel);
 8012594:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8012598:	4628      	mov	r0, r5
 801259a:	2101      	movs	r1, #1
 801259c:	f7ff ff4e 	bl	801243c <lv_btnm_set_style>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_PR, th->btnm.btn.pr);
 80125a0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80125a4:	4628      	mov	r0, r5
 80125a6:	2102      	movs	r1, #2
 80125a8:	f7ff ff48 	bl	801243c <lv_btnm_set_style>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_TGL_REL, th->btnm.btn.tgl_rel);
 80125ac:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80125b0:	4628      	mov	r0, r5
 80125b2:	2103      	movs	r1, #3
 80125b4:	f7ff ff42 	bl	801243c <lv_btnm_set_style>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_TGL_PR, th->btnm.btn.tgl_pr);
 80125b8:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 80125bc:	4628      	mov	r0, r5
 80125be:	2104      	movs	r1, #4
 80125c0:	f7ff ff3c 	bl	801243c <lv_btnm_set_style>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_INA, th->btnm.btn.ina);
 80125c4:	4628      	mov	r0, r5
 80125c6:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80125ca:	2105      	movs	r1, #5
 80125cc:	f7ff ff36 	bl	801243c <lv_btnm_set_style>
}
 80125d0:	4628      	mov	r0, r5
 80125d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_obj_set_style(new_btnm, &lv_style_pretty);
 80125d4:	4628      	mov	r0, r5
 80125d6:	490e      	ldr	r1, [pc, #56]	; (8012610 <lv_btnm_create+0x170>)
 80125d8:	f7f7 f98c 	bl	80098f4 <lv_obj_set_style>
}
 80125dc:	4628      	mov	r0, r5
 80125de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_btnm);
 80125e0:	f7f7 fb2c 	bl	8009c3c <lv_obj_get_signal_func>
 80125e4:	6078      	str	r0, [r7, #4]
 80125e6:	e767      	b.n	80124b8 <lv_btnm_create+0x18>
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_func(new_btnm);
 80125e8:	4628      	mov	r0, r5
 80125ea:	f7f7 fb29 	bl	8009c40 <lv_obj_get_design_func>
 80125ee:	6038      	str	r0, [r7, #0]
 80125f0:	e789      	b.n	8012506 <lv_btnm_create+0x66>
 80125f2:	bf00      	nop
 80125f4:	200174bc 	.word	0x200174bc
 80125f8:	20017ec8 	.word	0x20017ec8
 80125fc:	20017f58 	.word	0x20017f58
 8012600:	20017df0 	.word	0x20017df0
 8012604:	08011f4d 	.word	0x08011f4d
 8012608:	080119dd 	.word	0x080119dd
 801260c:	200000cc 	.word	0x200000cc
 8012610:	20017d60 	.word	0x20017d60
 8012614:	20017cd0 	.word	0x20017cd0
 8012618:	20017d18 	.word	0x20017d18

0801261c <lv_btnm_get_map>:
{
 801261c:	b508      	push	{r3, lr}
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801261e:	f7f7 fb11 	bl	8009c44 <lv_obj_get_ext_attr>
}
 8012622:	6800      	ldr	r0, [r0, #0]
 8012624:	bd08      	pop	{r3, pc}
 8012626:	bf00      	nop

08012628 <lv_btnm_get_style>:
{
 8012628:	b538      	push	{r3, r4, r5, lr}
 801262a:	460c      	mov	r4, r1
 801262c:	4605      	mov	r5, r0
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801262e:	f7f7 fb09 	bl	8009c44 <lv_obj_get_ext_attr>
    switch(type) {
 8012632:	2c05      	cmp	r4, #5
 8012634:	d813      	bhi.n	801265e <lv_btnm_get_style+0x36>
 8012636:	e8df f004 	tbb	[pc, r4]
 801263a:	0a05      	.short	0x0a05
 801263c:	03100e0c 	.word	0x03100e0c
            style = ext->styles_btn[LV_BTN_STATE_INA];
 8012640:	69c0      	ldr	r0, [r0, #28]
            break;
 8012642:	bd38      	pop	{r3, r4, r5, pc}
            style = lv_obj_get_style(btnm);
 8012644:	4628      	mov	r0, r5
}
 8012646:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            style = lv_obj_get_style(btnm);
 801264a:	f7f7 b9e1 	b.w	8009a10 <lv_obj_get_style>
            style = ext->styles_btn[LV_BTN_STATE_REL];
 801264e:	68c0      	ldr	r0, [r0, #12]
            break;
 8012650:	bd38      	pop	{r3, r4, r5, pc}
            style = ext->styles_btn[LV_BTN_STATE_PR];
 8012652:	6900      	ldr	r0, [r0, #16]
            break;
 8012654:	bd38      	pop	{r3, r4, r5, pc}
            style = ext->styles_btn[LV_BTN_STATE_TGL_REL];
 8012656:	6940      	ldr	r0, [r0, #20]
            break;
 8012658:	bd38      	pop	{r3, r4, r5, pc}
            style = ext->styles_btn[LV_BTN_STATE_TGL_PR];
 801265a:	6980      	ldr	r0, [r0, #24]
            break;
 801265c:	bd38      	pop	{r3, r4, r5, pc}
            style = NULL;
 801265e:	2000      	movs	r0, #0
}
 8012660:	bd38      	pop	{r3, r4, r5, pc}
 8012662:	bf00      	nop

08012664 <lv_chart_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_chart_design(lv_obj_t * chart, const lv_area_t * mask, lv_design_mode_t mode)
{
 8012664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
 8012668:	2a02      	cmp	r2, #2
{
 801266a:	b0a5      	sub	sp, #148	; 0x94
 801266c:	9005      	str	r0, [sp, #20]
 801266e:	9103      	str	r1, [sp, #12]
    if(mode == LV_DESIGN_COVER_CHK) {
 8012670:	f000 83f1 	beq.w	8012e56 <lv_chart_design+0x7f2>
        /*Return false if the object is not covers the mask_p area*/
        return ancestor_design_f(chart, mask, mode);
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 8012674:	b11a      	cbz	r2, 801267e <lv_chart_design+0x1a>
 8012676:	2001      	movs	r0, #1
        if(ext->type & LV_CHART_TYPE_COLUMN) lv_chart_draw_cols(chart, mask);
        if(ext->type & LV_CHART_TYPE_POINT) lv_chart_draw_points(chart, mask);
        if(ext->type & LV_CHART_TYPE_VERTICAL_LINE) lv_chart_draw_vertical_lines(chart, mask);
    }
    return true;
}
 8012678:	b025      	add	sp, #148	; 0x94
 801267a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_draw_rect(&chart->coords, mask, lv_obj_get_style(chart), lv_obj_get_opa_scale(chart));
 801267e:	f7f7 f9c7 	bl	8009a10 <lv_obj_get_style>
 8012682:	9e05      	ldr	r6, [sp, #20]
 8012684:	4604      	mov	r4, r0
 8012686:	4633      	mov	r3, r6
 8012688:	4630      	mov	r0, r6
 801268a:	3310      	adds	r3, #16
 801268c:	461d      	mov	r5, r3
 801268e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012690:	f7f7 fab8 	bl	8009c04 <lv_obj_get_opa_scale>
 8012694:	4622      	mov	r2, r4
 8012696:	4603      	mov	r3, r0
 8012698:	9903      	ldr	r1, [sp, #12]
 801269a:	4628      	mov	r0, r5
 * @param chart pointer to chart object
 * @param mask mask, inherited from the design function
 */
static void lv_chart_draw_div(lv_obj_t * chart, const lv_area_t * mask)
{
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 801269c:	4634      	mov	r4, r6
        lv_draw_rect(&chart->coords, mask, lv_obj_get_style(chart), lv_obj_get_opa_scale(chart));
 801269e:	f7fa fac3 	bl	800cc28 <lv_draw_rect>
        lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 80126a2:	4630      	mov	r0, r6
 80126a4:	f7f7 face 	bl	8009c44 <lv_obj_get_ext_attr>
 80126a8:	900d      	str	r0, [sp, #52]	; 0x34
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 80126aa:	4630      	mov	r0, r6
 80126ac:	f7f7 faca 	bl	8009c44 <lv_obj_get_ext_attr>
 80126b0:	4681      	mov	r9, r0
    lv_style_t * style = lv_obj_get_style(chart);
 80126b2:	4630      	mov	r0, r6
 80126b4:	f7f7 f9ac 	bl	8009a10 <lv_obj_get_style>
 80126b8:	4605      	mov	r5, r0
    lv_opa_t opa_scale = lv_obj_get_opa_scale(chart);
 80126ba:	4630      	mov	r0, r6
 80126bc:	f7f7 faa2 	bl	8009c04 <lv_obj_get_opa_scale>
 80126c0:	4683      	mov	fp, r0
    uint8_t div_i;
    uint8_t div_i_end;
    uint8_t div_i_start;
    lv_point_t p1;
    lv_point_t p2;
    lv_coord_t w = lv_obj_get_width(chart);
 80126c2:	4630      	mov	r0, r6
 80126c4:	f7f7 f998 	bl	80099f8 <lv_obj_get_width>
 80126c8:	9006      	str	r0, [sp, #24]
    lv_coord_t h = lv_obj_get_height(chart);
 80126ca:	4630      	mov	r0, r6
 80126cc:	f7f7 f99a 	bl	8009a04 <lv_obj_get_height>
    lv_coord_t x_ofs = chart->coords.x1;
 80126d0:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
    lv_coord_t y_ofs = chart->coords.y1;

    if(ext->hdiv_cnt != 0) {
 80126d4:	f899 6010 	ldrb.w	r6, [r9, #16]
    lv_coord_t h = lv_obj_get_height(chart);
 80126d8:	4607      	mov	r7, r0
    lv_coord_t x_ofs = chart->coords.x1;
 80126da:	9309      	str	r3, [sp, #36]	; 0x24
    lv_coord_t y_ofs = chart->coords.y1;
 80126dc:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 80126e0:	930a      	str	r3, [sp, #40]	; 0x28
    if(ext->hdiv_cnt != 0) {
 80126e2:	2e00      	cmp	r6, #0
 80126e4:	d045      	beq.n	8012772 <lv_chart_design+0x10e>
        /*Draw slide lines if no border*/
        if(style->body.border.width != 0) {
 80126e6:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	f040 83b7 	bne.w	8012e5e <lv_chart_design+0x7fa>
            div_i_start = 0;
            div_i_end = ext->hdiv_cnt + 1;
        }

        p1.x = 0 + x_ofs;
        p2.x = w + x_ofs;
 80126f0:	9909      	ldr	r1, [sp, #36]	; 0x24
            div_i_end = ext->hdiv_cnt + 1;
 80126f2:	f106 0e01 	add.w	lr, r6, #1
        p2.x = w + x_ofs;
 80126f6:	9806      	ldr	r0, [sp, #24]
            div_i_start = 0;
 80126f8:	4698      	mov	r8, r3
        p2.x = w + x_ofs;
 80126fa:	460a      	mov	r2, r1
            div_i_end = ext->hdiv_cnt + 1;
 80126fc:	fa5f f68e 	uxtb.w	r6, lr
        p1.x = 0 + x_ofs;
 8012700:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
        p2.x = w + x_ofs;
 8012704:	4402      	add	r2, r0
 8012706:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 801270a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
            div_i_start = 0;
 801270e:	4644      	mov	r4, r8
 8012710:	f8cd b01c 	str.w	fp, [sp, #28]
 8012714:	f10d 0a40 	add.w	sl, sp, #64	; 0x40
 8012718:	9308      	str	r3, [sp, #32]
 801271a:	ab12      	add	r3, sp, #72	; 0x48
 801271c:	46f4      	mov	ip, lr
 801271e:	46bb      	mov	fp, r7
 8012720:	9304      	str	r3, [sp, #16]
 8012722:	e003      	b.n	801272c <lv_chart_design+0xc8>
 8012724:	f899 e010 	ldrb.w	lr, [r9, #16]
 8012728:	f10e 0c01 	add.w	ip, lr, #1
        for(div_i = div_i_start; div_i <= div_i_end; div_i++) {
            p1.y = (int32_t)((int32_t)h * div_i) / (ext->hdiv_cnt + 1);
 801272c:	fb0b fe04 	mul.w	lr, fp, r4
            p1.y +=  y_ofs;
 8012730:	9f08      	ldr	r7, [sp, #32]
            if(div_i == div_i_start) p1.y += (style->line.width >> 1) + 1;  /*The first line might not be visible*/
 8012732:	45a0      	cmp	r8, r4
            if(div_i == div_i_end) p1.y -= (style->line.width >> 1) + 1;  /*The last line might not be visible*/

            p2.y = p1.y;
            lv_draw_line(&p1, &p2, mask, style, opa_scale);
 8012734:	462b      	mov	r3, r5
 8012736:	9a03      	ldr	r2, [sp, #12]
 8012738:	4650      	mov	r0, sl
 801273a:	9904      	ldr	r1, [sp, #16]
            p1.y = (int32_t)((int32_t)h * div_i) / (ext->hdiv_cnt + 1);
 801273c:	fb9e fefc 	sdiv	lr, lr, ip
            p1.y +=  y_ofs;
 8012740:	44be      	add	lr, r7
 8012742:	fa1f fe8e 	uxth.w	lr, lr
 8012746:	fa0f fc8e 	sxth.w	ip, lr
 801274a:	f8ad c042 	strh.w	ip, [sp, #66]	; 0x42
            if(div_i == div_i_start) p1.y += (style->line.width >> 1) + 1;  /*The first line might not be visible*/
 801274e:	f000 8393 	beq.w	8012e78 <lv_chart_design+0x814>
            if(div_i == div_i_end) p1.y -= (style->line.width >> 1) + 1;  /*The last line might not be visible*/
 8012752:	42a6      	cmp	r6, r4
 8012754:	f000 83b5 	beq.w	8012ec2 <lv_chart_design+0x85e>
        for(div_i = div_i_start; div_i <= div_i_end; div_i++) {
 8012758:	3401      	adds	r4, #1
            lv_draw_line(&p1, &p2, mask, style, opa_scale);
 801275a:	9f07      	ldr	r7, [sp, #28]
            p2.y = p1.y;
 801275c:	f8ad c04a 	strh.w	ip, [sp, #74]	; 0x4a
        for(div_i = div_i_start; div_i <= div_i_end; div_i++) {
 8012760:	b2e4      	uxtb	r4, r4
            lv_draw_line(&p1, &p2, mask, style, opa_scale);
 8012762:	9700      	str	r7, [sp, #0]
 8012764:	f7f8 fc96 	bl	800b094 <lv_draw_line>
        for(div_i = div_i_start; div_i <= div_i_end; div_i++) {
 8012768:	42a6      	cmp	r6, r4
 801276a:	d2db      	bcs.n	8012724 <lv_chart_design+0xc0>
 801276c:	465f      	mov	r7, fp
 801276e:	f8dd b01c 	ldr.w	fp, [sp, #28]
        }
    }

    if(ext->vdiv_cnt != 0) {
 8012772:	f899 6011 	ldrb.w	r6, [r9, #17]
 8012776:	2e00      	cmp	r6, #0
 8012778:	d03e      	beq.n	80127f8 <lv_chart_design+0x194>
        /*Draw slide lines if no border*/
        if(style->body.border.width != 0) {
 801277a:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 801277e:	2b00      	cmp	r3, #0
 8012780:	f040 80eb 	bne.w	801295a <lv_chart_design+0x2f6>
            div_i_start = 0;
            div_i_end = ext->vdiv_cnt + 1;
        }

        p1.y = 0 + y_ofs;
        p2.y = h + y_ofs;
 8012784:	990a      	ldr	r1, [sp, #40]	; 0x28
            div_i_end = ext->vdiv_cnt + 1;
 8012786:	f106 0e01 	add.w	lr, r6, #1
            div_i_start = 0;
 801278a:	4698      	mov	r8, r3
        p2.y = h + y_ofs;
 801278c:	440f      	add	r7, r1
            div_i_end = ext->vdiv_cnt + 1;
 801278e:	fa5f f68e 	uxtb.w	r6, lr
        p1.y = 0 + y_ofs;
 8012792:	f8ad 1042 	strh.w	r1, [sp, #66]	; 0x42
        p2.y = h + y_ofs;
 8012796:	f8ad 704a 	strh.w	r7, [sp, #74]	; 0x4a
 801279a:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 801279e:	ab12      	add	r3, sp, #72	; 0x48
            div_i_start = 0;
 80127a0:	4644      	mov	r4, r8
 80127a2:	f10d 0a40 	add.w	sl, sp, #64	; 0x40
 80127a6:	9304      	str	r3, [sp, #16]
 80127a8:	463b      	mov	r3, r7
 80127aa:	46f4      	mov	ip, lr
 80127ac:	465f      	mov	r7, fp
 80127ae:	469b      	mov	fp, r3
 80127b0:	e003      	b.n	80127ba <lv_chart_design+0x156>
 80127b2:	f899 e011 	ldrb.w	lr, [r9, #17]
 80127b6:	f10e 0c01 	add.w	ip, lr, #1
        for(div_i = div_i_start; div_i <= div_i_end; div_i ++) {
            p1.x = (int32_t)((int32_t)w * div_i) / (ext->vdiv_cnt + 1);
 80127ba:	9b06      	ldr	r3, [sp, #24]
            p1.x +=  x_ofs;
            if(div_i == div_i_start) p1.x += (style->line.width >> 1) + 1;  /*The first line might not be visible*/
 80127bc:	45a0      	cmp	r8, r4
            if(div_i == div_i_end) p1.x -= (style->line.width >> 1) + 1;  /*The last line might not be visible*/
            p2.x = p1.x;
            lv_draw_line(&p1, &p2, mask, style, opa_scale);
 80127be:	9a03      	ldr	r2, [sp, #12]
 80127c0:	4650      	mov	r0, sl
            p1.x = (int32_t)((int32_t)w * div_i) / (ext->vdiv_cnt + 1);
 80127c2:	fb03 fe04 	mul.w	lr, r3, r4
            lv_draw_line(&p1, &p2, mask, style, opa_scale);
 80127c6:	9904      	ldr	r1, [sp, #16]
 80127c8:	462b      	mov	r3, r5
            p1.x = (int32_t)((int32_t)w * div_i) / (ext->vdiv_cnt + 1);
 80127ca:	fb9e fefc 	sdiv	lr, lr, ip
            p1.x +=  x_ofs;
 80127ce:	44de      	add	lr, fp
 80127d0:	fa1f fe8e 	uxth.w	lr, lr
 80127d4:	fa0f fc8e 	sxth.w	ip, lr
 80127d8:	f8ad c040 	strh.w	ip, [sp, #64]	; 0x40
            if(div_i == div_i_start) p1.x += (style->line.width >> 1) + 1;  /*The first line might not be visible*/
 80127dc:	f000 8366 	beq.w	8012eac <lv_chart_design+0x848>
            if(div_i == div_i_end) p1.x -= (style->line.width >> 1) + 1;  /*The last line might not be visible*/
 80127e0:	42a6      	cmp	r6, r4
 80127e2:	f000 8354 	beq.w	8012e8e <lv_chart_design+0x82a>
        for(div_i = div_i_start; div_i <= div_i_end; div_i ++) {
 80127e6:	3401      	adds	r4, #1
            lv_draw_line(&p1, &p2, mask, style, opa_scale);
 80127e8:	9700      	str	r7, [sp, #0]
            p2.x = p1.x;
 80127ea:	f8ad c048 	strh.w	ip, [sp, #72]	; 0x48
            lv_draw_line(&p1, &p2, mask, style, opa_scale);
 80127ee:	f7f8 fc51 	bl	800b094 <lv_draw_line>
        for(div_i = div_i_start; div_i <= div_i_end; div_i ++) {
 80127f2:	b2e4      	uxtb	r4, r4
 80127f4:	42b4      	cmp	r4, r6
 80127f6:	d9dc      	bls.n	80127b2 <lv_chart_design+0x14e>
        if(ext->type & LV_CHART_TYPE_LINE) lv_chart_draw_lines(chart, mask);
 80127f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80127fa:	7d1b      	ldrb	r3, [r3, #20]
 80127fc:	f003 030f 	and.w	r3, r3, #15
 8012800:	07d8      	lsls	r0, r3, #31
 8012802:	f100 8277 	bmi.w	8012cf4 <lv_chart_design+0x690>
        if(ext->type & LV_CHART_TYPE_COLUMN) lv_chart_draw_cols(chart, mask);
 8012806:	0799      	lsls	r1, r3, #30
 8012808:	f100 81a6 	bmi.w	8012b58 <lv_chart_design+0x4f4>
        if(ext->type & LV_CHART_TYPE_POINT) lv_chart_draw_points(chart, mask);
 801280c:	075a      	lsls	r2, r3, #29
 801280e:	f100 80f3 	bmi.w	80129f8 <lv_chart_design+0x394>
        if(ext->type & LV_CHART_TYPE_VERTICAL_LINE) lv_chart_draw_vertical_lines(chart, mask);
 8012812:	071b      	lsls	r3, r3, #28
 8012814:	f57f af2f 	bpl.w	8012676 <lv_chart_design+0x12>
 * Draw the data lines as vertical lines on a chart if there is only 1px between point
 * @param obj pointer to chart object
 */
static void lv_chart_draw_vertical_lines(lv_obj_t * chart, const lv_area_t * mask)
{
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 8012818:	9c05      	ldr	r4, [sp, #20]
    lv_coord_t y_ofs = chart->coords.y1;
    int32_t y_tmp;
    lv_chart_series_t * ser;
    lv_opa_t opa_scale = lv_obj_get_opa_scale(chart);
    lv_style_t style;
    lv_style_copy(&style, &lv_style_plain);
 801281a:	ab12      	add	r3, sp, #72	; 0x48
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 801281c:	4620      	mov	r0, r4
    lv_style_copy(&style, &lv_style_plain);
 801281e:	461d      	mov	r5, r3
 8012820:	9304      	str	r3, [sp, #16]
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 8012822:	f7f7 fa0f 	bl	8009c44 <lv_obj_get_ext_attr>
 8012826:	4606      	mov	r6, r0
    lv_coord_t w = lv_obj_get_width(chart);
 8012828:	4620      	mov	r0, r4
 801282a:	f7f7 f8e5 	bl	80099f8 <lv_obj_get_width>
 801282e:	4681      	mov	r9, r0
    lv_coord_t h = lv_obj_get_height(chart);
 8012830:	4620      	mov	r0, r4
 8012832:	f7f7 f8e7 	bl	8009a04 <lv_obj_get_height>
    lv_coord_t x_ofs = chart->coords.x1;
 8012836:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
    lv_coord_t h = lv_obj_get_height(chart);
 801283a:	4683      	mov	fp, r0
    lv_opa_t opa_scale = lv_obj_get_opa_scale(chart);
 801283c:	4620      	mov	r0, r4
    lv_coord_t x_ofs = chart->coords.x1;
 801283e:	9309      	str	r3, [sp, #36]	; 0x24
    lv_coord_t y_ofs = chart->coords.y1;
 8012840:	f9b4 4012 	ldrsh.w	r4, [r4, #18]
    lv_opa_t opa_scale = lv_obj_get_opa_scale(chart);
 8012844:	f7f7 f9de 	bl	8009c04 <lv_obj_get_opa_scale>
    lv_style_copy(&style, &lv_style_plain);
 8012848:	49c1      	ldr	r1, [pc, #772]	; (8012b50 <lv_chart_design+0x4ec>)
    lv_opa_t opa_scale = lv_obj_get_opa_scale(chart);
 801284a:	9006      	str	r0, [sp, #24]
    lv_style_copy(&style, &lv_style_plain);
 801284c:	4628      	mov	r0, r5
 801284e:	f7f7 fed9 	bl	800a604 <lv_style_copy>
    style.line.opa = ext->series.opa;
 8012852:	7e73      	ldrb	r3, [r6, #25]
    style.line.width = ext->series.width;

    /*Go through all data lines*/
    LL_READ_BACK(ext->series_ll, ser) {
 8012854:	4630      	mov	r0, r6
    style.line.opa = ext->series.opa;
 8012856:	f88d 308e 	strb.w	r3, [sp, #142]	; 0x8e
    style.line.width = ext->series.width;
 801285a:	8af3      	ldrh	r3, [r6, #22]
 801285c:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
    LL_READ_BACK(ext->series_ll, ser) {
 8012860:	f7fd fb9e 	bl	800ffa0 <lv_ll_get_tail>
 8012864:	4680      	mov	r8, r0
 8012866:	2800      	cmp	r0, #0
 8012868:	f43f af05 	beq.w	8012676 <lv_chart_design+0x12>
 801286c:	445c      	add	r4, fp
 801286e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8012872:	464f      	mov	r7, r9
 8012874:	fa1f fa84 	uxth.w	sl, r4
 8012878:	9305      	str	r3, [sp, #20]
        style.line.color = ser->color;

        p1.x = 0 + x_ofs;
 801287a:	9a09      	ldr	r2, [sp, #36]	; 0x24
        p2.x = 0 + x_ofs;
        y_tmp = (int32_t)((int32_t) ser->points[0] - ext->ymin) * h;
 801287c:	f9b6 e00c 	ldrsh.w	lr, [r6, #12]
        y_tmp = y_tmp / (ext->ymax - ext->ymin);
 8012880:	f9b6 400e 	ldrsh.w	r4, [r6, #14]
        p1.y = LV_COORD_MIN;
        p2.y = h - y_tmp + y_ofs;

        if(ext->point_cnt == w)
 8012884:	f8b6 c012 	ldrh.w	ip, [r6, #18]
        y_tmp = y_tmp / (ext->ymax - ext->ymin);
 8012888:	eba4 040e 	sub.w	r4, r4, lr
        if(ext->point_cnt == w)
 801288c:	45bc      	cmp	ip, r7
        style.line.color = ser->color;
 801288e:	e898 000a 	ldmia.w	r8, {r1, r3}
        p1.x = 0 + x_ofs;
 8012892:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        p2.x = 0 + x_ofs;
 8012896:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
        y_tmp = (int32_t)((int32_t) ser->points[0] - ext->ymin) * h;
 801289a:	f9b1 0000 	ldrsh.w	r0, [r1]
        style.line.color = ser->color;
 801289e:	9322      	str	r3, [sp, #136]	; 0x88
        p1.y = LV_COORD_MIN;
 80128a0:	f24c 0300 	movw	r3, #49152	; 0xc000
        y_tmp = (int32_t)((int32_t) ser->points[0] - ext->ymin) * h;
 80128a4:	eba0 000e 	sub.w	r0, r0, lr
        p1.y = LV_COORD_MIN;
 80128a8:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
        y_tmp = (int32_t)((int32_t) ser->points[0] - ext->ymin) * h;
 80128ac:	fb0b f000 	mul.w	r0, fp, r0
        y_tmp = y_tmp / (ext->ymax - ext->ymin);
 80128b0:	fb90 f0f4 	sdiv	r0, r0, r4
        p2.y = h - y_tmp + y_ofs;
 80128b4:	ebaa 0000 	sub.w	r0, sl, r0
 80128b8:	b200      	sxth	r0, r0
 80128ba:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
        if(ext->point_cnt == w)
 80128be:	d057      	beq.n	8012970 <lv_chart_design+0x30c>
                p1.y = p2.y;
            }
        }
        else
        {
            for(i = 1; i < ext->point_cnt; i ++) {
 80128c0:	f1bc 0f01 	cmp.w	ip, #1
 80128c4:	d941      	bls.n	801294a <lv_chart_design+0x2e6>
 80128c6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80128ca:	2501      	movs	r5, #1
 80128cc:	e00b      	b.n	80128e6 <lv_chart_design+0x282>
 80128ce:	f9b6 e00c 	ldrsh.w	lr, [r6, #12]
 80128d2:	f9b6 400e 	ldrsh.w	r4, [r6, #14]
 80128d6:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 80128da:	eba4 040e 	sub.w	r4, r4, lr
 80128de:	f9bd 0042 	ldrsh.w	r0, [sp, #66]	; 0x42
 80128e2:	f8d8 1000 	ldr.w	r1, [r8]
                p1.x = p2.x;
                p1.y = p2.y;

                p2.x = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 80128e6:	f10c 32ff 	add.w	r2, ip, #4294967295
 80128ea:	fb07 f305 	mul.w	r3, r7, r5
                p1.y = p2.y;
 80128ee:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a

                y_tmp = (int32_t)((int32_t) ser->points[i] - ext->ymin) * h;
 80128f2:	eb01 0045 	add.w	r0, r1, r5, lsl #1
                p1.x = p2.x;
 80128f6:	f8ad 9038 	strh.w	r9, [sp, #56]	; 0x38
                p2.x = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 80128fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80128fe:	9a05      	ldr	r2, [sp, #20]
 8012900:	4413      	add	r3, r2
 8012902:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
                y_tmp = (int32_t)((int32_t) ser->points[i] - ext->ymin) * h;
 8012906:	f931 3015 	ldrsh.w	r3, [r1, r5, lsl #1]
 801290a:	eba3 0e0e 	sub.w	lr, r3, lr
 801290e:	fb0b fe0e 	mul.w	lr, fp, lr
                y_tmp = y_tmp / (ext->ymax - ext->ymin);
 8012912:	fb9e f4f4 	sdiv	r4, lr, r4
                p2.y = h - y_tmp + y_ofs;
 8012916:	ebaa 0404 	sub.w	r4, sl, r4
 801291a:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42

                if(ser->points[i - 1] >= 0 && ser->points[i] >= 0)
 801291e:	f930 3c02 	ldrsh.w	r3, [r0, #-2]
 8012922:	2b00      	cmp	r3, #0
 8012924:	db0d      	blt.n	8012942 <lv_chart_design+0x2de>
 8012926:	f931 4015 	ldrsh.w	r4, [r1, r5, lsl #1]
                {
                    lv_draw_line(&p1, &p2, mask, &style, opa_scale);
 801292a:	a80e      	add	r0, sp, #56	; 0x38
 801292c:	9b04      	ldr	r3, [sp, #16]
 801292e:	a910      	add	r1, sp, #64	; 0x40
                if(ser->points[i - 1] >= 0 && ser->points[i] >= 0)
 8012930:	2c00      	cmp	r4, #0
                    lv_draw_line(&p1, &p2, mask, &style, opa_scale);
 8012932:	9a03      	ldr	r2, [sp, #12]
                if(ser->points[i - 1] >= 0 && ser->points[i] >= 0)
 8012934:	db05      	blt.n	8012942 <lv_chart_design+0x2de>
                    lv_draw_line(&p1, &p2, mask, &style, opa_scale);
 8012936:	9c06      	ldr	r4, [sp, #24]
 8012938:	9400      	str	r4, [sp, #0]
 801293a:	f7f8 fbab 	bl	800b094 <lv_draw_line>
 801293e:	f8b6 c012 	ldrh.w	ip, [r6, #18]
            for(i = 1; i < ext->point_cnt; i ++) {
 8012942:	3501      	adds	r5, #1
 8012944:	b2ad      	uxth	r5, r5
 8012946:	45ac      	cmp	ip, r5
 8012948:	d8c1      	bhi.n	80128ce <lv_chart_design+0x26a>
    LL_READ_BACK(ext->series_ll, ser) {
 801294a:	4641      	mov	r1, r8
 801294c:	4630      	mov	r0, r6
 801294e:	f7fd fb31 	bl	800ffb4 <lv_ll_get_prev>
 8012952:	4680      	mov	r8, r0
 8012954:	2800      	cmp	r0, #0
 8012956:	d190      	bne.n	801287a <lv_chart_design+0x216>
 8012958:	e68d      	b.n	8012676 <lv_chart_design+0x12>
        p2.y = h + y_ofs;
 801295a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
            div_i_start = 1;
 801295c:	f04f 0801 	mov.w	r8, #1
        p2.y = h + y_ofs;
 8012960:	4417      	add	r7, r2
        p1.y = 0 + y_ofs;
 8012962:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 8012966:	eb06 0e08 	add.w	lr, r6, r8
        p2.y = h + y_ofs;
 801296a:	f8ad 704a 	strh.w	r7, [sp, #74]	; 0x4a
 801296e:	e714      	b.n	801279a <lv_chart_design+0x136>
            for(i = 0; i < ext->point_cnt; i++)
 8012970:	2f00      	cmp	r7, #0
 8012972:	d0ea      	beq.n	801294a <lv_chart_design+0x2e6>
 8012974:	ab10      	add	r3, sp, #64	; 0x40
 8012976:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 8012b54 <lv_chart_design+0x4f0>
 801297a:	2500      	movs	r5, #0
 801297c:	9308      	str	r3, [sp, #32]
 801297e:	ab0e      	add	r3, sp, #56	; 0x38
 8012980:	9307      	str	r3, [sp, #28]
 8012982:	e020      	b.n	80129c6 <lv_chart_design+0x362>
                lv_draw_line(&p1, &p2, mask, &style, opa_scale);
 8012984:	9c06      	ldr	r4, [sp, #24]
 8012986:	9400      	str	r4, [sp, #0]
 8012988:	f7f8 fb84 	bl	800b094 <lv_draw_line>
                p2.x = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 801298c:	8a72      	ldrh	r2, [r6, #18]
 801298e:	fb07 f305 	mul.w	r3, r7, r5
            for(i = 0; i < ext->point_cnt; i++)
 8012992:	3501      	adds	r5, #1
                p2.x = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 8012994:	1e51      	subs	r1, r2, #1
                p1.y = p2.y;
 8012996:	f9bd 9042 	ldrsh.w	r9, [sp, #66]	; 0x42
            for(i = 0; i < ext->point_cnt; i++)
 801299a:	b2ad      	uxth	r5, r5
                p1.y = p2.y;
 801299c:	f8ad 903a 	strh.w	r9, [sp, #58]	; 0x3a
            for(i = 0; i < ext->point_cnt; i++)
 80129a0:	42aa      	cmp	r2, r5
                p2.x = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 80129a2:	fb93 f3f1 	sdiv	r3, r3, r1
 80129a6:	9905      	ldr	r1, [sp, #20]
 80129a8:	440b      	add	r3, r1
 80129aa:	b21b      	sxth	r3, r3
 80129ac:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
                p1.x = p2.x;
 80129b0:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
            for(i = 0; i < ext->point_cnt; i++)
 80129b4:	d9c9      	bls.n	801294a <lv_chart_design+0x2e6>
 80129b6:	f9b6 e00c 	ldrsh.w	lr, [r6, #12]
 80129ba:	f9b6 400e 	ldrsh.w	r4, [r6, #14]
 80129be:	f8d8 1000 	ldr.w	r1, [r8]
 80129c2:	eba4 040e 	sub.w	r4, r4, lr
                y_tmp = (int32_t)((int32_t) ser->points[i] - ext->ymin) * h;
 80129c6:	f931 c015 	ldrsh.w	ip, [r1, r5, lsl #1]
                lv_draw_line(&p1, &p2, mask, &style, opa_scale);
 80129ca:	9b04      	ldr	r3, [sp, #16]
                y_tmp = (int32_t)((int32_t) ser->points[i] - ext->ymin) * h;
 80129cc:	ebac 0c0e 	sub.w	ip, ip, lr
                lv_draw_line(&p1, &p2, mask, &style, opa_scale);
 80129d0:	9a03      	ldr	r2, [sp, #12]
 80129d2:	9908      	ldr	r1, [sp, #32]
                y_tmp = (int32_t)((int32_t) ser->points[i] - ext->ymin) * h;
 80129d4:	fb0b fc0c 	mul.w	ip, fp, ip
                lv_draw_line(&p1, &p2, mask, &style, opa_scale);
 80129d8:	9807      	ldr	r0, [sp, #28]
                y_tmp = y_tmp / (ext->ymax - ext->ymin);
 80129da:	fb9c f4f4 	sdiv	r4, ip, r4
                p2.y = h - y_tmp + y_ofs;
 80129de:	ebaa 0404 	sub.w	r4, sl, r4
 80129e2:	b224      	sxth	r4, r4
                if(p1.y == p2.y)
 80129e4:	454c      	cmp	r4, r9
                p2.y = h - y_tmp + y_ofs;
 80129e6:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
                if(p1.y == p2.y)
 80129ea:	d1cb      	bne.n	8012984 <lv_chart_design+0x320>
                    p2.x++;
 80129ec:	f8bd 4040 	ldrh.w	r4, [sp, #64]	; 0x40
 80129f0:	3401      	adds	r4, #1
 80129f2:	f8ad 4040 	strh.w	r4, [sp, #64]	; 0x40
 80129f6:	e7c5      	b.n	8012984 <lv_chart_design+0x320>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 80129f8:	9e05      	ldr	r6, [sp, #20]
    lv_style_copy(&style_point, &lv_style_plain);
 80129fa:	ab12      	add	r3, sp, #72	; 0x48
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 80129fc:	4630      	mov	r0, r6
    lv_style_copy(&style_point, &lv_style_plain);
 80129fe:	461c      	mov	r4, r3
 8012a00:	9304      	str	r3, [sp, #16]
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 8012a02:	f7f7 f91f 	bl	8009c44 <lv_obj_get_ext_attr>
 8012a06:	4605      	mov	r5, r0
    lv_coord_t w = lv_obj_get_width(chart);
 8012a08:	4630      	mov	r0, r6
 8012a0a:	f7f6 fff5 	bl	80099f8 <lv_obj_get_width>
 8012a0e:	4681      	mov	r9, r0
    lv_coord_t h = lv_obj_get_height(chart);
 8012a10:	4630      	mov	r0, r6
 8012a12:	f7f6 fff7 	bl	8009a04 <lv_obj_get_height>
    lv_coord_t x_ofs = chart->coords.x1;
 8012a16:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
    lv_style_copy(&style_point, &lv_style_plain);
 8012a1a:	494d      	ldr	r1, [pc, #308]	; (8012b50 <lv_chart_design+0x4ec>)
    lv_coord_t h = lv_obj_get_height(chart);
 8012a1c:	4680      	mov	r8, r0
    lv_style_copy(&style_point, &lv_style_plain);
 8012a1e:	4620      	mov	r0, r4
    lv_coord_t x_ofs = chart->coords.x1;
 8012a20:	9308      	str	r3, [sp, #32]
    lv_coord_t y_ofs = chart->coords.y1;
 8012a22:	f9b6 4012 	ldrsh.w	r4, [r6, #18]
    lv_style_copy(&style_point, &lv_style_plain);
 8012a26:	f7f7 fded 	bl	800a604 <lv_style_copy>
    style_point.body.border.width = 0;
 8012a2a:	2200      	movs	r2, #0
    style_point.body.empty = 0;
 8012a2c:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
    LL_READ_BACK(ext->series_ll, ser) {
 8012a30:	4628      	mov	r0, r5
    style_point.body.empty = 0;
 8012a32:	f362 0300 	bfi	r3, r2, #0, #1
    style_point.body.border.width = 0;
 8012a36:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
    style_point.body.empty = 0;
 8012a3a:	f88d 306e 	strb.w	r3, [sp, #110]	; 0x6e
    style_point.body.opa = ext->series.opa;
 8012a3e:	7e6b      	ldrb	r3, [r5, #25]
 8012a40:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    style_point.body.radius = ext->series.width;
 8012a44:	8aeb      	ldrh	r3, [r5, #22]
 8012a46:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    LL_READ_BACK(ext->series_ll, ser) {
 8012a4a:	f7fd faa9 	bl	800ffa0 <lv_ll_get_tail>
 8012a4e:	4606      	mov	r6, r0
 8012a50:	2800      	cmp	r0, #0
 8012a52:	d078      	beq.n	8012b46 <lv_chart_design+0x4e2>
 8012a54:	4444      	add	r4, r8
 8012a56:	b2a3      	uxth	r3, r4
 8012a58:	9307      	str	r3, [sp, #28]
        style_point.body.main_color = ser->color;
 8012a5a:	6873      	ldr	r3, [r6, #4]
static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 8012a5c:	79b1      	ldrb	r1, [r6, #6]
 8012a5e:	9313      	str	r3, [sp, #76]	; 0x4c
 8012a60:	7eab      	ldrb	r3, [r5, #26]
    uint16_t g_2 = (c2.green_h << 3) + c2.green_l;
    uint16_t g_out = (uint16_t)((uint16_t) g_1 * mix + (g_2 * (255 - mix))) >> 8;
    ret.green_h = g_out >> 3;
    ret.green_l = g_out & 0x7;
#  else
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 8012a62:	7972      	ldrb	r2, [r6, #5]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 8012a64:	f1c3 00ff 	rsb	r0, r3, #255	; 0xff
        style_point.body.grad_color = lv_color_mix(LV_COLOR_BLACK, ser->color, ext->series.dark);
 8012a68:	f04f 33ff 	mov.w	r3, #4294967295
#  endif
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 8012a6c:	7934      	ldrb	r4, [r6, #4]
 8012a6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 8012a72:	b283      	uxth	r3, r0
        for(i = 0; i < ext->point_cnt; i ++) {
 8012a74:	f8b5 a012 	ldrh.w	sl, [r5, #18]
 8012a78:	fb11 f103 	smulbb	r1, r1, r3
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 8012a7c:	fb12 f203 	smulbb	r2, r2, r3
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 8012a80:	fb14 f303 	smulbb	r3, r4, r3
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 8012a84:	f3c1 2107 	ubfx	r1, r1, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 8012a88:	f3c2 2207 	ubfx	r2, r2, #8, #8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 8012a8c:	f3c3 2307 	ubfx	r3, r3, #8, #8
        style_point.body.grad_color = lv_color_mix(LV_COLOR_BLACK, ser->color, ext->series.dark);
 8012a90:	f88d 1052 	strb.w	r1, [sp, #82]	; 0x52
 8012a94:	f88d 2051 	strb.w	r2, [sp, #81]	; 0x51
 8012a98:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
        for(i = 0; i < ext->point_cnt; i ++) {
 8012a9c:	f1ba 0f00 	cmp.w	sl, #0
 8012aa0:	d04a      	beq.n	8012b38 <lv_chart_design+0x4d4>
 8012aa2:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 8012aa6:	2400      	movs	r4, #0
                lv_draw_rect(&cir_a, mask, &style_point, lv_obj_get_opa_scale(chart));
 8012aa8:	9706      	str	r7, [sp, #24]
            p_act = (ser->start_point + i) % ext->point_cnt;
 8012aaa:	8932      	ldrh	r2, [r6, #8]
            cir_a.x1 = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 8012aac:	fb09 fe04 	mul.w	lr, r9, r4
 8012ab0:	f10a 33ff 	add.w	r3, sl, #4294967295
 8012ab4:	9f06      	ldr	r7, [sp, #24]
            p_act = (ser->start_point + i) % ext->point_cnt;
 8012ab6:	4422      	add	r2, r4
            cir_a.x2 = cir_a.x1 + style_point.body.radius;
 8012ab8:	f8bd 1054 	ldrh.w	r1, [sp, #84]	; 0x54
            y_tmp = (int32_t)((int32_t) ser->points[p_act] - ext->ymin) * h;
 8012abc:	f8d6 c000 	ldr.w	ip, [r6]
 8012ac0:	f9b5 b00c 	ldrsh.w	fp, [r5, #12]
                lv_draw_rect(&cir_a, mask, &style_point, lv_obj_get_opa_scale(chart));
 8012ac4:	9805      	ldr	r0, [sp, #20]
            cir_a.x1 = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 8012ac6:	fb9e f3f3 	sdiv	r3, lr, r3
            p_act = (ser->start_point + i) % ext->point_cnt;
 8012aca:	fb92 fefa 	sdiv	lr, r2, sl
            cir_a.x1 = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 8012ace:	443b      	add	r3, r7
            p_act = (ser->start_point + i) % ext->point_cnt;
 8012ad0:	fb0a 221e 	mls	r2, sl, lr, r2
            cir_a.y1 = h - y_tmp + y_ofs;
 8012ad4:	9f07      	ldr	r7, [sp, #28]
            cir_a.x1 = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 8012ad6:	b29b      	uxth	r3, r3
            y_tmp = (int32_t)((int32_t) ser->points[p_act] - ext->ymin) * h;
 8012ad8:	b212      	sxth	r2, r2
            cir_a.x2 = cir_a.x1 + style_point.body.radius;
 8012ada:	eb03 0e01 	add.w	lr, r3, r1
            cir_a.x1 -= style_point.body.radius;
 8012ade:	1a5b      	subs	r3, r3, r1
            cir_a.x2 = cir_a.x1 + style_point.body.radius;
 8012ae0:	f8ad e044 	strh.w	lr, [sp, #68]	; 0x44
            cir_a.x1 -= style_point.body.radius;
 8012ae4:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            y_tmp = (int32_t)((int32_t) ser->points[p_act] - ext->ymin) * h;
 8012ae8:	f93c 3012 	ldrsh.w	r3, [ip, r2, lsl #1]
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
 8012aec:	f9b5 e00e 	ldrsh.w	lr, [r5, #14]
            y_tmp = (int32_t)((int32_t) ser->points[p_act] - ext->ymin) * h;
 8012af0:	eba3 030b 	sub.w	r3, r3, fp
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
 8012af4:	ebae 0e0b 	sub.w	lr, lr, fp
            y_tmp = (int32_t)((int32_t) ser->points[p_act] - ext->ymin) * h;
 8012af8:	fb08 f303 	mul.w	r3, r8, r3
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
 8012afc:	fb93 f3fe 	sdiv	r3, r3, lr
            cir_a.y1 = h - y_tmp + y_ofs;
 8012b00:	1afb      	subs	r3, r7, r3
 8012b02:	b29b      	uxth	r3, r3
            cir_a.y2 = cir_a.y1 + style_point.body.radius;
 8012b04:	eb01 0e03 	add.w	lr, r1, r3
            cir_a.y1 -= style_point.body.radius;
 8012b08:	1a59      	subs	r1, r3, r1
            cir_a.y2 = cir_a.y1 + style_point.body.radius;
 8012b0a:	f8ad e046 	strh.w	lr, [sp, #70]	; 0x46
            cir_a.y1 -= style_point.body.radius;
 8012b0e:	f8ad 1042 	strh.w	r1, [sp, #66]	; 0x42
            if(ser->points[p_act] != LV_CHART_POINT_DEF)
 8012b12:	f93c 3012 	ldrsh.w	r3, [ip, r2, lsl #1]
 8012b16:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 8012b1a:	d009      	beq.n	8012b30 <lv_chart_design+0x4cc>
                lv_draw_rect(&cir_a, mask, &style_point, lv_obj_get_opa_scale(chart));
 8012b1c:	f7f7 f872 	bl	8009c04 <lv_obj_get_opa_scale>
 8012b20:	9a04      	ldr	r2, [sp, #16]
 8012b22:	4603      	mov	r3, r0
 8012b24:	9903      	ldr	r1, [sp, #12]
 8012b26:	a810      	add	r0, sp, #64	; 0x40
 8012b28:	f7fa f87e 	bl	800cc28 <lv_draw_rect>
 8012b2c:	f8b5 a012 	ldrh.w	sl, [r5, #18]
        for(i = 0; i < ext->point_cnt; i ++) {
 8012b30:	3401      	adds	r4, #1
 8012b32:	b2a4      	uxth	r4, r4
 8012b34:	45a2      	cmp	sl, r4
 8012b36:	d8b8      	bhi.n	8012aaa <lv_chart_design+0x446>
    LL_READ_BACK(ext->series_ll, ser) {
 8012b38:	4631      	mov	r1, r6
 8012b3a:	4628      	mov	r0, r5
 8012b3c:	f7fd fa3a 	bl	800ffb4 <lv_ll_get_prev>
 8012b40:	4606      	mov	r6, r0
 8012b42:	2800      	cmp	r0, #0
 8012b44:	d189      	bne.n	8012a5a <lv_chart_design+0x3f6>
 8012b46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012b48:	7d1b      	ldrb	r3, [r3, #20]
 8012b4a:	f003 030f 	and.w	r3, r3, #15
 8012b4e:	e660      	b.n	8012812 <lv_chart_design+0x1ae>
 8012b50:	20017e80 	.word	0x20017e80
 8012b54:	ffffc000 	.word	0xffffc000
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 8012b58:	9c05      	ldr	r4, [sp, #20]
    rects.body.border.width = 0;
 8012b5a:	2700      	movs	r7, #0
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 8012b5c:	4620      	mov	r0, r4
 8012b5e:	f7f7 f871 	bl	8009c44 <lv_obj_get_ext_attr>
 8012b62:	4606      	mov	r6, r0
    lv_coord_t w = lv_obj_get_width(chart);
 8012b64:	4620      	mov	r0, r4
 8012b66:	f7f6 ff47 	bl	80099f8 <lv_obj_get_width>
 8012b6a:	4605      	mov	r5, r0
 8012b6c:	900c      	str	r0, [sp, #48]	; 0x30
    lv_coord_t h = lv_obj_get_height(chart);
 8012b6e:	4620      	mov	r0, r4
 8012b70:	f7f6 ff48 	bl	8009a04 <lv_obj_get_height>
    lv_coord_t col_w = w / ((ext->series.num + 1) * ext->point_cnt); /* Suppose + 1 series as separator*/
 8012b74:	7e33      	ldrb	r3, [r6, #24]
 8012b76:	8a74      	ldrh	r4, [r6, #18]
    lv_coord_t h = lv_obj_get_height(chart);
 8012b78:	4682      	mov	sl, r0
    lv_style_copy(&rects, &lv_style_plain);
 8012b7a:	49ca      	ldr	r1, [pc, #808]	; (8012ea4 <lv_chart_design+0x840>)
    lv_coord_t col_w = w / ((ext->series.num + 1) * ext->point_cnt); /* Suppose + 1 series as separator*/
 8012b7c:	fb03 4404 	mla	r4, r3, r4, r4
    lv_style_copy(&rects, &lv_style_plain);
 8012b80:	ab12      	add	r3, sp, #72	; 0x48
    lv_coord_t col_w = w / ((ext->series.num + 1) * ext->point_cnt); /* Suppose + 1 series as separator*/
 8012b82:	fb95 f4f4 	sdiv	r4, r5, r4
    lv_coord_t x_ofs = col_w / 2; /*Shift with a half col.*/
 8012b86:	fa0f f884 	sxth.w	r8, r4
    lv_style_copy(&rects, &lv_style_plain);
 8012b8a:	4618      	mov	r0, r3
 8012b8c:	9304      	str	r3, [sp, #16]
    lv_coord_t x_ofs = col_w / 2; /*Shift with a half col.*/
 8012b8e:	f1b8 0f00 	cmp.w	r8, #0
 8012b92:	bfb8      	it	lt
 8012b94:	f108 0801 	addlt.w	r8, r8, #1
    lv_style_copy(&rects, &lv_style_plain);
 8012b98:	f7f7 fd34 	bl	800a604 <lv_style_copy>
    rects.body.empty = 0;
 8012b9c:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
    rects.body.border.width = 0;
 8012ba0:	f8ad 705c 	strh.w	r7, [sp, #92]	; 0x5c
    lv_coord_t x_ofs = col_w / 2; /*Shift with a half col.*/
 8012ba4:	ea4f 0868 	mov.w	r8, r8, asr #1
    rects.body.empty = 0;
 8012ba8:	f367 0300 	bfi	r3, r7, #0, #1
    rects.body.radius = 0;
 8012bac:	f8ad 7054 	strh.w	r7, [sp, #84]	; 0x54
    col_a.y2 = chart->coords.y2;
 8012bb0:	9a05      	ldr	r2, [sp, #20]
    rects.body.empty = 0;
 8012bb2:	f88d 306e 	strb.w	r3, [sp, #110]	; 0x6e
    rects.body.opa = ext->series.opa;
 8012bb6:	7e73      	ldrb	r3, [r6, #25]
    col_a.y2 = chart->coords.y2;
 8012bb8:	8ad2      	ldrh	r2, [r2, #22]
    rects.body.opa = ext->series.opa;
 8012bba:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    for(i = 0; i < ext->point_cnt; i ++) {
 8012bbe:	8a73      	ldrh	r3, [r6, #18]
    col_a.y2 = chart->coords.y2;
 8012bc0:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    for(i = 0; i < ext->point_cnt; i ++) {
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	f000 8090 	beq.w	8012cea <lv_chart_design+0x686>
 8012bca:	fa1f f288 	uxth.w	r2, r8
 8012bce:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8012bd2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8012bd6:	920a      	str	r2, [sp, #40]	; 0x28
 8012bd8:	b2a2      	uxth	r2, r4
 8012bda:	9207      	str	r2, [sp, #28]
 8012bdc:	fa1f f28a 	uxth.w	r2, sl
 8012be0:	9208      	str	r2, [sp, #32]
        x_act = (int32_t)((int32_t) w * i) / ext->point_cnt;
 8012be2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        LL_READ_BACK(ext->series_ll, ser) {
 8012be4:	4630      	mov	r0, r6
        x_act += chart->coords.x1 + x_ofs;
 8012be6:	990a      	ldr	r1, [sp, #40]	; 0x28
        x_act = (int32_t)((int32_t) w * i) / ext->point_cnt;
 8012be8:	fb07 f502 	mul.w	r5, r7, r2
        x_act += chart->coords.x1 + x_ofs;
 8012bec:	f8b8 2010 	ldrh.w	r2, [r8, #16]
        x_act = (int32_t)((int32_t) w * i) / ext->point_cnt;
 8012bf0:	fb95 f5f3 	sdiv	r5, r5, r3
        x_act += chart->coords.x1 + x_ofs;
 8012bf4:	440a      	add	r2, r1
 8012bf6:	4415      	add	r5, r2
        LL_READ_BACK(ext->series_ll, ser) {
 8012bf8:	f7fd f9d2 	bl	800ffa0 <lv_ll_get_tail>
 8012bfc:	4604      	mov	r4, r0
        x_act += chart->coords.x1 + x_ofs;
 8012bfe:	b22d      	sxth	r5, r5
        LL_READ_BACK(ext->series_ll, ser) {
 8012c00:	2800      	cmp	r0, #0
 8012c02:	d06c      	beq.n	8012cde <lv_chart_design+0x67a>
 8012c04:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
            rects.body.grad_color = lv_color_mix(LV_COLOR_BLACK, ser->color, ext->series.dark);
 8012c08:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8012c0c:	9706      	str	r7, [sp, #24]
 8012c0e:	9b07      	ldr	r3, [sp, #28]
            lv_coord_t p_act = (ser->start_point + i) % ext->point_cnt;
 8012c10:	f8b4 b008 	ldrh.w	fp, [r4, #8]
 8012c14:	eb03 0e05 	add.w	lr, r3, r5
 8012c18:	9b06      	ldr	r3, [sp, #24]
 8012c1a:	f8b6 c012 	ldrh.w	ip, [r6, #18]
 8012c1e:	445b      	add	r3, fp
            rects.body.main_color = ser->color;
 8012c20:	6862      	ldr	r2, [r4, #4]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 8012c22:	79a1      	ldrb	r1, [r4, #6]
 8012c24:	9213      	str	r2, [sp, #76]	; 0x4c
 8012c26:	7eb0      	ldrb	r0, [r6, #26]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 8012c28:	7962      	ldrb	r2, [r4, #5]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 8012c2a:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
            y_tmp = (int32_t)((int32_t) ser->points[p_act] - ext->ymin) * h;
 8012c2e:	9f09      	ldr	r7, [sp, #36]	; 0x24
            lv_coord_t p_act = (ser->start_point + i) % ext->point_cnt;
 8012c30:	fb93 fbfc 	sdiv	fp, r3, ip
 8012c34:	fb0c 3b1b 	mls	fp, ip, fp, r3
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 8012c38:	7923      	ldrb	r3, [r4, #4]
            col_a.x1 = x_act;
 8012c3a:	f8ad 5038 	strh.w	r5, [sp, #56]	; 0x38
 8012c3e:	fa0f f58e 	sxth.w	r5, lr
            y_tmp = (int32_t)((int32_t) ser->points[p_act] - ext->ymin) * h;
 8012c42:	fa0f fb8b 	sxth.w	fp, fp
 8012c46:	f8d4 e000 	ldr.w	lr, [r4]
 8012c4a:	f9b6 c00c 	ldrsh.w	ip, [r6, #12]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 8012c4e:	b280      	uxth	r0, r0
            col_a.x2 = col_a.x1 + col_w;
 8012c50:	f8ad 503c 	strh.w	r5, [sp, #60]	; 0x3c
            y_tmp = (int32_t)((int32_t) ser->points[p_act] - ext->ymin) * h;
 8012c54:	f93e e01b 	ldrsh.w	lr, [lr, fp, lsl #1]
 8012c58:	fb11 f100 	smulbb	r1, r1, r0
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 8012c5c:	fb12 f200 	smulbb	r2, r2, r0
            rects.body.grad_color = lv_color_mix(LV_COLOR_BLACK, ser->color, ext->series.dark);
 8012c60:	f88d 9053 	strb.w	r9, [sp, #83]	; 0x53
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 8012c64:	fb13 f000 	smulbb	r0, r3, r0
            y_tmp = (int32_t)((int32_t) ser->points[p_act] - ext->ymin) * h;
 8012c68:	ebae 0e0c 	sub.w	lr, lr, ip
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
 8012c6c:	f9b6 300e 	ldrsh.w	r3, [r6, #14]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 8012c70:	f3c1 2107 	ubfx	r1, r1, #8, #8
            y_tmp = (int32_t)((int32_t) ser->points[p_act] - ext->ymin) * h;
 8012c74:	fb07 fe0e 	mul.w	lr, r7, lr
            col_a.y1 = h - y_tmp + chart->coords.y1;
 8012c78:	9f08      	ldr	r7, [sp, #32]
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
 8012c7a:	eba3 030c 	sub.w	r3, r3, ip
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 8012c7e:	f3c2 2207 	ubfx	r2, r2, #8, #8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 8012c82:	f3c0 2007 	ubfx	r0, r0, #8, #8
            rects.body.grad_color = lv_color_mix(LV_COLOR_BLACK, ser->color, ext->series.dark);
 8012c86:	f88d 1052 	strb.w	r1, [sp, #82]	; 0x52
 8012c8a:	f88d 2051 	strb.w	r2, [sp, #81]	; 0x51
            mask_ret = lv_area_intersect(&col_mask, mask, &col_a);
 8012c8e:	4652      	mov	r2, sl
 8012c90:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
 8012c94:	a810      	add	r0, sp, #64	; 0x40
 8012c96:	9903      	ldr	r1, [sp, #12]
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
 8012c98:	fb9e f3f3 	sdiv	r3, lr, r3
            col_a.y1 = h - y_tmp + chart->coords.y1;
 8012c9c:	f8b8 e012 	ldrh.w	lr, [r8, #18]
 8012ca0:	44be      	add	lr, r7
 8012ca2:	ebae 0303 	sub.w	r3, lr, r3
 8012ca6:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
            mask_ret = lv_area_intersect(&col_mask, mask, &col_a);
 8012caa:	f7fc fe6d 	bl	800f988 <lv_area_intersect>
            if(mask_ret != false && ser->points[p_act] != LV_CHART_POINT_DEF) {
 8012cae:	b170      	cbz	r0, 8012cce <lv_chart_design+0x66a>
 8012cb0:	6823      	ldr	r3, [r4, #0]
                lv_draw_rect(&chart->coords, &col_mask, &rects, lv_obj_get_opa_scale(chart));
 8012cb2:	4640      	mov	r0, r8
            if(mask_ret != false && ser->points[p_act] != LV_CHART_POINT_DEF) {
 8012cb4:	f933 301b 	ldrsh.w	r3, [r3, fp, lsl #1]
 8012cb8:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 8012cbc:	d007      	beq.n	8012cce <lv_chart_design+0x66a>
                lv_draw_rect(&chart->coords, &col_mask, &rects, lv_obj_get_opa_scale(chart));
 8012cbe:	f7f6 ffa1 	bl	8009c04 <lv_obj_get_opa_scale>
 8012cc2:	9a04      	ldr	r2, [sp, #16]
 8012cc4:	4603      	mov	r3, r0
 8012cc6:	a910      	add	r1, sp, #64	; 0x40
 8012cc8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8012cca:	f7f9 ffad 	bl	800cc28 <lv_draw_rect>
        LL_READ_BACK(ext->series_ll, ser) {
 8012cce:	4621      	mov	r1, r4
 8012cd0:	4630      	mov	r0, r6
 8012cd2:	f7fd f96f 	bl	800ffb4 <lv_ll_get_prev>
 8012cd6:	4604      	mov	r4, r0
 8012cd8:	2800      	cmp	r0, #0
 8012cda:	d198      	bne.n	8012c0e <lv_chart_design+0x5aa>
 8012cdc:	9f06      	ldr	r7, [sp, #24]
    for(i = 0; i < ext->point_cnt; i ++) {
 8012cde:	3701      	adds	r7, #1
 8012ce0:	8a73      	ldrh	r3, [r6, #18]
 8012ce2:	b2bf      	uxth	r7, r7
 8012ce4:	42bb      	cmp	r3, r7
 8012ce6:	f63f af7c 	bhi.w	8012be2 <lv_chart_design+0x57e>
 8012cea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012cec:	7d1b      	ldrb	r3, [r3, #20]
 8012cee:	f003 030f 	and.w	r3, r3, #15
 8012cf2:	e58b      	b.n	801280c <lv_chart_design+0x1a8>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 8012cf4:	9c05      	ldr	r4, [sp, #20]
    lv_style_copy(&style, &lv_style_plain);
 8012cf6:	ab12      	add	r3, sp, #72	; 0x48
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 8012cf8:	4620      	mov	r0, r4
    lv_style_copy(&style, &lv_style_plain);
 8012cfa:	461d      	mov	r5, r3
 8012cfc:	9304      	str	r3, [sp, #16]
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 8012cfe:	f7f6 ffa1 	bl	8009c44 <lv_obj_get_ext_attr>
 8012d02:	4606      	mov	r6, r0
    lv_coord_t w = lv_obj_get_width(chart);
 8012d04:	4620      	mov	r0, r4
 8012d06:	f7f6 fe77 	bl	80099f8 <lv_obj_get_width>
 8012d0a:	9008      	str	r0, [sp, #32]
    lv_coord_t h = lv_obj_get_height(chart);
 8012d0c:	4620      	mov	r0, r4
 8012d0e:	f7f6 fe79 	bl	8009a04 <lv_obj_get_height>
    lv_coord_t x_ofs = chart->coords.x1;
 8012d12:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
    lv_coord_t h = lv_obj_get_height(chart);
 8012d16:	4680      	mov	r8, r0
    lv_opa_t opa_scale = lv_obj_get_opa_scale(chart);
 8012d18:	4620      	mov	r0, r4
    lv_coord_t x_ofs = chart->coords.x1;
 8012d1a:	930c      	str	r3, [sp, #48]	; 0x30
    lv_coord_t y_ofs = chart->coords.y1;
 8012d1c:	f9b4 4012 	ldrsh.w	r4, [r4, #18]
    lv_opa_t opa_scale = lv_obj_get_opa_scale(chart);
 8012d20:	f7f6 ff70 	bl	8009c04 <lv_obj_get_opa_scale>
    lv_style_copy(&style, &lv_style_plain);
 8012d24:	495f      	ldr	r1, [pc, #380]	; (8012ea4 <lv_chart_design+0x840>)
    lv_opa_t opa_scale = lv_obj_get_opa_scale(chart);
 8012d26:	900a      	str	r0, [sp, #40]	; 0x28
    lv_style_copy(&style, &lv_style_plain);
 8012d28:	4628      	mov	r0, r5
 8012d2a:	f7f7 fc6b 	bl	800a604 <lv_style_copy>
    style.line.opa = ext->series.opa;
 8012d2e:	7e73      	ldrb	r3, [r6, #25]
    LL_READ_BACK(ext->series_ll, ser) {
 8012d30:	4630      	mov	r0, r6
    style.line.opa = ext->series.opa;
 8012d32:	f88d 308e 	strb.w	r3, [sp, #142]	; 0x8e
    style.line.width = ext->series.width;
 8012d36:	8af3      	ldrh	r3, [r6, #22]
 8012d38:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
    LL_READ_BACK(ext->series_ll, ser) {
 8012d3c:	f7fd f930 	bl	800ffa0 <lv_ll_get_tail>
 8012d40:	4607      	mov	r7, r0
 8012d42:	2800      	cmp	r0, #0
 8012d44:	f000 8082 	beq.w	8012e4c <lv_chart_design+0x7e8>
 8012d48:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8012d4c:	4444      	add	r4, r8
 8012d4e:	9309      	str	r3, [sp, #36]	; 0x24
 8012d50:	b2a3      	uxth	r3, r4
 8012d52:	9306      	str	r3, [sp, #24]
        p_prev = ser->start_point;
 8012d54:	8938      	ldrh	r0, [r7, #8]
        y_tmp = (int32_t)((int32_t) ser->points[p_prev] - ext->ymin) * h;
 8012d56:	f8d7 c000 	ldr.w	ip, [r7]
        p_prev = ser->start_point;
 8012d5a:	b203      	sxth	r3, r0
        p1.x = 0 + x_ofs;
 8012d5c:	990c      	ldr	r1, [sp, #48]	; 0x30
        y_tmp = (int32_t)((int32_t) ser->points[p_prev] - ext->ymin) * h;
 8012d5e:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
        style.line.color = ser->color;
 8012d62:	687a      	ldr	r2, [r7, #4]
        y_tmp = (int32_t)((int32_t) ser->points[p_prev] - ext->ymin) * h;
 8012d64:	ea4f 0b43 	mov.w	fp, r3, lsl #1
        p1.x = 0 + x_ofs;
 8012d68:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
        p2.x = 0 + x_ofs;
 8012d6c:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
        y_tmp = (int32_t)((int32_t) ser->points[p_prev] - ext->ymin) * h;
 8012d70:	f93c a013 	ldrsh.w	sl, [ip, r3, lsl #1]
        y_tmp = y_tmp / (ext->ymax - ext->ymin);
 8012d74:	f9b6 300e 	ldrsh.w	r3, [r6, #14]
        y_tmp = (int32_t)((int32_t) ser->points[p_prev] - ext->ymin) * h;
 8012d78:	ebaa 0a09 	sub.w	sl, sl, r9
        style.line.color = ser->color;
 8012d7c:	9222      	str	r2, [sp, #136]	; 0x88
        y_tmp = y_tmp / (ext->ymax - ext->ymin);
 8012d7e:	eba3 0309 	sub.w	r3, r3, r9
        p2.y = h - y_tmp + y_ofs;
 8012d82:	9a06      	ldr	r2, [sp, #24]
        y_tmp = (int32_t)((int32_t) ser->points[p_prev] - ext->ymin) * h;
 8012d84:	fb08 fa0a 	mul.w	sl, r8, sl
        for(i = 1; i < ext->point_cnt; i ++) {
 8012d88:	f8b6 e012 	ldrh.w	lr, [r6, #18]
        y_tmp = y_tmp / (ext->ymax - ext->ymin);
 8012d8c:	fb9a faf3 	sdiv	sl, sl, r3
        p2.y = h - y_tmp + y_ofs;
 8012d90:	eba2 0a0a 	sub.w	sl, r2, sl
        for(i = 1; i < ext->point_cnt; i ++) {
 8012d94:	f1be 0f01 	cmp.w	lr, #1
        p2.y = h - y_tmp + y_ofs;
 8012d98:	fa0f fa8a 	sxth.w	sl, sl
 8012d9c:	f8ad a042 	strh.w	sl, [sp, #66]	; 0x42
        for(i = 1; i < ext->point_cnt; i ++) {
 8012da0:	d94d      	bls.n	8012e3e <lv_chart_design+0x7da>
 8012da2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8012da4:	2501      	movs	r5, #1
                lv_draw_line(&p1, &p2, mask, &style, opa_scale);
 8012da6:	9707      	str	r7, [sp, #28]
 8012da8:	e00d      	b.n	8012dc6 <lv_chart_design+0x762>
 8012daa:	9a07      	ldr	r2, [sp, #28]
 8012dac:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8012db0:	f9b6 300e 	ldrsh.w	r3, [r6, #14]
 8012db4:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
 8012db8:	eba3 0309 	sub.w	r3, r3, r9
 8012dbc:	f9bd a042 	ldrsh.w	sl, [sp, #66]	; 0x42
 8012dc0:	8910      	ldrh	r0, [r2, #8]
 8012dc2:	f8d2 c000 	ldr.w	ip, [r2]
            p_act = (ser->start_point + i) % ext->point_cnt;
 8012dc6:	4428      	add	r0, r5
            p2.x = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 8012dc8:	9a08      	ldr	r2, [sp, #32]
            p1.x = p2.x;
 8012dca:	f8ad 4038 	strh.w	r4, [sp, #56]	; 0x38
            p2.x = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 8012dce:	fb02 f105 	mul.w	r1, r2, r5
 8012dd2:	f10e 32ff 	add.w	r2, lr, #4294967295
            p1.y = p2.y;
 8012dd6:	f8ad a03a 	strh.w	sl, [sp, #58]	; 0x3a
            p_act = (ser->start_point + i) % ext->point_cnt;
 8012dda:	fb90 f4fe 	sdiv	r4, r0, lr
            p2.x = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 8012dde:	fb91 f1f2 	sdiv	r1, r1, r2
            p_act = (ser->start_point + i) % ext->point_cnt;
 8012de2:	fb0e 0414 	mls	r4, lr, r4, r0
            p2.x = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 8012de6:	9a09      	ldr	r2, [sp, #36]	; 0x24
            p_act = (ser->start_point + i) % ext->point_cnt;
 8012de8:	b224      	sxth	r4, r4
            p2.x = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 8012dea:	4411      	add	r1, r2
 8012dec:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
            y_tmp = (int32_t)((int32_t) ser->points[p_act] - ext->ymin) * h;
 8012df0:	f93c 2014 	ldrsh.w	r2, [ip, r4, lsl #1]
 8012df4:	eba2 0909 	sub.w	r9, r2, r9
            p2.y = h - y_tmp + y_ofs;
 8012df8:	9a06      	ldr	r2, [sp, #24]
            y_tmp = (int32_t)((int32_t) ser->points[p_act] - ext->ymin) * h;
 8012dfa:	fb08 f909 	mul.w	r9, r8, r9
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
 8012dfe:	fb99 f3f3 	sdiv	r3, r9, r3
            p2.y = h - y_tmp + y_ofs;
 8012e02:	1ad3      	subs	r3, r2, r3
 8012e04:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            if(ser->points[p_prev] != LV_CHART_POINT_DEF && ser->points[p_act] != LV_CHART_POINT_DEF)
 8012e08:	f93c 300b 	ldrsh.w	r3, [ip, fp]
 8012e0c:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 8012e10:	d00e      	beq.n	8012e30 <lv_chart_design+0x7cc>
 8012e12:	f93c c014 	ldrsh.w	ip, [ip, r4, lsl #1]
                lv_draw_line(&p1, &p2, mask, &style, opa_scale);
 8012e16:	a910      	add	r1, sp, #64	; 0x40
 8012e18:	9b04      	ldr	r3, [sp, #16]
 8012e1a:	a80e      	add	r0, sp, #56	; 0x38
            if(ser->points[p_prev] != LV_CHART_POINT_DEF && ser->points[p_act] != LV_CHART_POINT_DEF)
 8012e1c:	f51c 4f80 	cmn.w	ip, #16384	; 0x4000
                lv_draw_line(&p1, &p2, mask, &style, opa_scale);
 8012e20:	9a03      	ldr	r2, [sp, #12]
            if(ser->points[p_prev] != LV_CHART_POINT_DEF && ser->points[p_act] != LV_CHART_POINT_DEF)
 8012e22:	d005      	beq.n	8012e30 <lv_chart_design+0x7cc>
                lv_draw_line(&p1, &p2, mask, &style, opa_scale);
 8012e24:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8012e26:	9700      	str	r7, [sp, #0]
 8012e28:	f7f8 f934 	bl	800b094 <lv_draw_line>
 8012e2c:	f8b6 e012 	ldrh.w	lr, [r6, #18]
        for(i = 1; i < ext->point_cnt; i ++) {
 8012e30:	3501      	adds	r5, #1
 8012e32:	ea4f 0b44 	mov.w	fp, r4, lsl #1
 8012e36:	b2ad      	uxth	r5, r5
 8012e38:	45ae      	cmp	lr, r5
 8012e3a:	d8b6      	bhi.n	8012daa <lv_chart_design+0x746>
 8012e3c:	9f07      	ldr	r7, [sp, #28]
    LL_READ_BACK(ext->series_ll, ser) {
 8012e3e:	4639      	mov	r1, r7
 8012e40:	4630      	mov	r0, r6
 8012e42:	f7fd f8b7 	bl	800ffb4 <lv_ll_get_prev>
 8012e46:	4607      	mov	r7, r0
 8012e48:	2800      	cmp	r0, #0
 8012e4a:	d183      	bne.n	8012d54 <lv_chart_design+0x6f0>
 8012e4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012e4e:	7d1b      	ldrb	r3, [r3, #20]
 8012e50:	f003 030f 	and.w	r3, r3, #15
 8012e54:	e4d7      	b.n	8012806 <lv_chart_design+0x1a2>
        return ancestor_design_f(chart, mask, mode);
 8012e56:	4b14      	ldr	r3, [pc, #80]	; (8012ea8 <lv_chart_design+0x844>)
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	4798      	blx	r3
 8012e5c:	e40c      	b.n	8012678 <lv_chart_design+0x14>
        p2.x = w + x_ofs;
 8012e5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
            div_i_start = 1;
 8012e60:	f04f 0801 	mov.w	r8, #1
        p2.x = w + x_ofs;
 8012e64:	9906      	ldr	r1, [sp, #24]
 8012e66:	4613      	mov	r3, r2
        p1.x = 0 + x_ofs;
 8012e68:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8012e6c:	eb06 0e08 	add.w	lr, r6, r8
        p2.x = w + x_ofs;
 8012e70:	440b      	add	r3, r1
 8012e72:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 8012e76:	e448      	b.n	801270a <lv_chart_design+0xa6>
            if(div_i == div_i_start) p1.y += (style->line.width >> 1) + 1;  /*The first line might not be visible*/
 8012e78:	f9b5 c044 	ldrsh.w	ip, [r5, #68]	; 0x44
 8012e7c:	eb0e 0e6c 	add.w	lr, lr, ip, asr #1
 8012e80:	f10e 0e01 	add.w	lr, lr, #1
 8012e84:	fa0f fc8e 	sxth.w	ip, lr
 8012e88:	f8ad c042 	strh.w	ip, [sp, #66]	; 0x42
 8012e8c:	e461      	b.n	8012752 <lv_chart_design+0xee>
            if(div_i == div_i_end) p1.x -= (style->line.width >> 1) + 1;  /*The last line might not be visible*/
 8012e8e:	f9b5 e044 	ldrsh.w	lr, [r5, #68]	; 0x44
 8012e92:	ea6f 0e6e 	mvn.w	lr, lr, asr #1
 8012e96:	44e6      	add	lr, ip
 8012e98:	fa0f fc8e 	sxth.w	ip, lr
 8012e9c:	f8ad c040 	strh.w	ip, [sp, #64]	; 0x40
 8012ea0:	e4a1      	b.n	80127e6 <lv_chart_design+0x182>
 8012ea2:	bf00      	nop
 8012ea4:	20017e80 	.word	0x20017e80
 8012ea8:	200174c4 	.word	0x200174c4
            if(div_i == div_i_start) p1.x += (style->line.width >> 1) + 1;  /*The first line might not be visible*/
 8012eac:	f9b5 c044 	ldrsh.w	ip, [r5, #68]	; 0x44
 8012eb0:	eb0e 0e6c 	add.w	lr, lr, ip, asr #1
 8012eb4:	f10e 0e01 	add.w	lr, lr, #1
 8012eb8:	fa0f fc8e 	sxth.w	ip, lr
 8012ebc:	f8ad c040 	strh.w	ip, [sp, #64]	; 0x40
 8012ec0:	e48e      	b.n	80127e0 <lv_chart_design+0x17c>
            if(div_i == div_i_end) p1.y -= (style->line.width >> 1) + 1;  /*The last line might not be visible*/
 8012ec2:	f9b5 e044 	ldrsh.w	lr, [r5, #68]	; 0x44
 8012ec6:	ea6f 0e6e 	mvn.w	lr, lr, asr #1
 8012eca:	44e6      	add	lr, ip
 8012ecc:	fa0f fc8e 	sxth.w	ip, lr
 8012ed0:	f8ad c042 	strh.w	ip, [sp, #66]	; 0x42
 8012ed4:	e440      	b.n	8012758 <lv_chart_design+0xf4>
 8012ed6:	bf00      	nop

08012ed8 <lv_chart_signal>:
{
 8012ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    res = ancestor_signal(chart, sign, param);
 8012eda:	4b19      	ldr	r3, [pc, #100]	; (8012f40 <lv_chart_signal+0x68>)
{
 8012edc:	4607      	mov	r7, r0
 8012ede:	460c      	mov	r4, r1
 8012ee0:	4616      	mov	r6, r2
    res = ancestor_signal(chart, sign, param);
 8012ee2:	685b      	ldr	r3, [r3, #4]
 8012ee4:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8012ee6:	2801      	cmp	r0, #1
    res = ancestor_signal(chart, sign, param);
 8012ee8:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 8012eea:	d001      	beq.n	8012ef0 <lv_chart_signal+0x18>
}
 8012eec:	4628      	mov	r0, r5
 8012eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(sign == LV_SIGNAL_CLEANUP) {
 8012ef0:	b174      	cbz	r4, 8012f10 <lv_chart_signal+0x38>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8012ef2:	2c06      	cmp	r4, #6
 8012ef4:	d1fa      	bne.n	8012eec <lv_chart_signal+0x14>
 8012ef6:	1f32      	subs	r2, r6, #4
 8012ef8:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 8012efa:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8012efe:	b111      	cbz	r1, 8012f06 <lv_chart_signal+0x2e>
 8012f00:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) {  /*Find the last set data*/
 8012f02:	2b07      	cmp	r3, #7
 8012f04:	d1f9      	bne.n	8012efa <lv_chart_signal+0x22>
        buf->type[i] = "lv_chart";
 8012f06:	4a0f      	ldr	r2, [pc, #60]	; (8012f44 <lv_chart_signal+0x6c>)
}
 8012f08:	4628      	mov	r0, r5
        buf->type[i] = "lv_chart";
 8012f0a:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
}
 8012f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 8012f10:	4638      	mov	r0, r7
 8012f12:	f7f6 fe97 	bl	8009c44 <lv_obj_get_ext_attr>
 8012f16:	4606      	mov	r6, r0
        LL_READ(ext->series_ll, datal) {
 8012f18:	f7fd f83e 	bl	800ff98 <lv_ll_get_head>
 8012f1c:	4604      	mov	r4, r0
 8012f1e:	b148      	cbz	r0, 8012f34 <lv_chart_signal+0x5c>
            lv_mem_free(*datal);
 8012f20:	6820      	ldr	r0, [r4, #0]
 8012f22:	f7fd f8b1 	bl	8010088 <lv_mem_free>
        LL_READ(ext->series_ll, datal) {
 8012f26:	4621      	mov	r1, r4
 8012f28:	4630      	mov	r0, r6
 8012f2a:	f7fd f83d 	bl	800ffa8 <lv_ll_get_next>
 8012f2e:	4604      	mov	r4, r0
 8012f30:	2800      	cmp	r0, #0
 8012f32:	d1f5      	bne.n	8012f20 <lv_chart_signal+0x48>
        lv_ll_clear(&ext->series_ll);
 8012f34:	4630      	mov	r0, r6
 8012f36:	f7fc fff5 	bl	800ff24 <lv_ll_clear>
}
 8012f3a:	4628      	mov	r0, r5
 8012f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f3e:	bf00      	nop
 8012f40:	200174c4 	.word	0x200174c4
 8012f44:	0808ba98 	.word	0x0808ba98

08012f48 <lv_chart_create>:
{
 8012f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f4c:	460f      	mov	r7, r1
    lv_obj_t * new_chart = lv_obj_create(par, copy);
 8012f4e:	f7f6 f86b 	bl	8009028 <lv_obj_create>
    lv_mem_assert(new_chart);
 8012f52:	2800      	cmp	r0, #0
 8012f54:	d050      	beq.n	8012ff8 <lv_chart_create+0xb0>
    lv_chart_ext_t * ext = lv_obj_allocate_ext_attr(new_chart, sizeof(lv_chart_ext_t));
 8012f56:	211c      	movs	r1, #28
 8012f58:	4605      	mov	r5, r0
 8012f5a:	f7f6 fc01 	bl	8009760 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 8012f5e:	4604      	mov	r4, r0
 8012f60:	2800      	cmp	r0, #0
 8012f62:	d04a      	beq.n	8012ffa <lv_chart_create+0xb2>
    lv_ll_init(&ext->series_ll, sizeof(lv_chart_series_t));
 8012f64:	210c      	movs	r1, #12
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_func(new_chart);
 8012f66:	4e36      	ldr	r6, [pc, #216]	; (8013040 <lv_chart_create+0xf8>)
    lv_ll_init(&ext->series_ll, sizeof(lv_chart_series_t));
 8012f68:	f7fc ff32 	bl	800fdd0 <lv_ll_init>
    ext->type = LV_CHART_TYPE_LINE;
 8012f6c:	7d22      	ldrb	r2, [r4, #20]
 8012f6e:	2001      	movs	r0, #1
    ext->series.num = 0;
 8012f70:	2300      	movs	r3, #0
    ext->hdiv_cnt = LV_CHART_HDIV_DEF;
 8012f72:	f04f 0803 	mov.w	r8, #3
    ext->vdiv_cnt = LV_CHART_VDIV_DEF;
 8012f76:	f04f 0c05 	mov.w	ip, #5
    ext->type = LV_CHART_TYPE_LINE;
 8012f7a:	f360 0203 	bfi	r2, r0, #0, #4
    ext->ymax = LV_CHART_YMAX_DEF;
 8012f7e:	2064      	movs	r0, #100	; 0x64
    ext->series.num = 0;
 8012f80:	7623      	strb	r3, [r4, #24]
    ext->point_cnt = LV_CHART_PNUM_DEF;
 8012f82:	f04f 0e0a 	mov.w	lr, #10
    ext->type = LV_CHART_TYPE_LINE;
 8012f86:	7522      	strb	r2, [r4, #20]
    ext->series.dark = LV_OPA_50;
 8012f88:	227f      	movs	r2, #127	; 0x7f
    ext->ymin = LV_CHART_YMIN_DEF;
 8012f8a:	81a3      	strh	r3, [r4, #12]
    ext->series.width = 2;
 8012f8c:	2302      	movs	r3, #2
    ext->ymax = LV_CHART_YMAX_DEF;
 8012f8e:	81e0      	strh	r0, [r4, #14]
    ext->series.opa = LV_OPA_COVER;
 8012f90:	20ff      	movs	r0, #255	; 0xff
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_func(new_chart);
 8012f92:	6831      	ldr	r1, [r6, #0]
    ext->hdiv_cnt = LV_CHART_HDIV_DEF;
 8012f94:	f884 8010 	strb.w	r8, [r4, #16]
    ext->vdiv_cnt = LV_CHART_VDIV_DEF;
 8012f98:	f884 c011 	strb.w	ip, [r4, #17]
    ext->point_cnt = LV_CHART_PNUM_DEF;
 8012f9c:	f8a4 e012 	strh.w	lr, [r4, #18]
    ext->series.opa = LV_OPA_COVER;
 8012fa0:	7660      	strb	r0, [r4, #25]
    ext->series.dark = LV_OPA_50;
 8012fa2:	76a2      	strb	r2, [r4, #26]
    ext->series.width = 2;
 8012fa4:	82e3      	strh	r3, [r4, #22]
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_func(new_chart);
 8012fa6:	b349      	cbz	r1, 8012ffc <lv_chart_create+0xb4>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_chart);
 8012fa8:	6873      	ldr	r3, [r6, #4]
 8012faa:	b373      	cbz	r3, 801300a <lv_chart_create+0xc2>
    lv_obj_set_signal_func(new_chart, lv_chart_signal);
 8012fac:	4925      	ldr	r1, [pc, #148]	; (8013044 <lv_chart_create+0xfc>)
 8012fae:	4628      	mov	r0, r5
 8012fb0:	f7f6 fbd2 	bl	8009758 <lv_obj_set_signal_func>
    lv_obj_set_design_func(new_chart, lv_chart_design);
 8012fb4:	4924      	ldr	r1, [pc, #144]	; (8013048 <lv_chart_create+0x100>)
 8012fb6:	4628      	mov	r0, r5
 8012fb8:	f7f6 fbd0 	bl	800975c <lv_obj_set_design_func>
    if(copy == NULL) {
 8012fbc:	b357      	cbz	r7, 8013014 <lv_chart_create+0xcc>
        lv_chart_ext_t * ext_copy = lv_obj_get_ext_attr(copy);
 8012fbe:	4638      	mov	r0, r7
 8012fc0:	f7f6 fe40 	bl	8009c44 <lv_obj_get_ext_attr>
 8012fc4:	4603      	mov	r3, r0
        ext->type = ext_copy->type;
 8012fc6:	7d22      	ldrb	r2, [r4, #20]
        lv_obj_refresh_style(new_chart);
 8012fc8:	4628      	mov	r0, r5
        ext->type = ext_copy->type;
 8012fca:	7d19      	ldrb	r1, [r3, #20]
 8012fcc:	f361 0203 	bfi	r2, r1, #0, #4
 8012fd0:	7522      	strb	r2, [r4, #20]
        ext->ymin = ext_copy->ymin;
 8012fd2:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
        ext->ymax = ext_copy->ymax;
 8012fd6:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
        ext->ymin = ext_copy->ymin;
 8012fda:	81a1      	strh	r1, [r4, #12]
        ext->ymax = ext_copy->ymax;
 8012fdc:	81e2      	strh	r2, [r4, #14]
        ext->hdiv_cnt = ext_copy->hdiv_cnt;
 8012fde:	7c1a      	ldrb	r2, [r3, #16]
 8012fe0:	7422      	strb	r2, [r4, #16]
        ext->vdiv_cnt = ext_copy->vdiv_cnt;
 8012fe2:	7c5a      	ldrb	r2, [r3, #17]
 8012fe4:	7462      	strb	r2, [r4, #17]
        ext->point_cnt = ext_copy->point_cnt;
 8012fe6:	8a5a      	ldrh	r2, [r3, #18]
 8012fe8:	8262      	strh	r2, [r4, #18]
        ext->series.opa =  ext_copy->series.opa;
 8012fea:	7e5b      	ldrb	r3, [r3, #25]
 8012fec:	7663      	strb	r3, [r4, #25]
        lv_obj_refresh_style(new_chart);
 8012fee:	f7f6 fb55 	bl	800969c <lv_obj_refresh_style>
}
 8012ff2:	4628      	mov	r0, r5
 8012ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ff8:	e7fe      	b.n	8012ff8 <lv_chart_create+0xb0>
 8012ffa:	e7fe      	b.n	8012ffa <lv_chart_create+0xb2>
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_func(new_chart);
 8012ffc:	4628      	mov	r0, r5
 8012ffe:	f7f6 fe1f 	bl	8009c40 <lv_obj_get_design_func>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_chart);
 8013002:	6873      	ldr	r3, [r6, #4]
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_func(new_chart);
 8013004:	6030      	str	r0, [r6, #0]
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_chart);
 8013006:	2b00      	cmp	r3, #0
 8013008:	d1d0      	bne.n	8012fac <lv_chart_create+0x64>
 801300a:	4628      	mov	r0, r5
 801300c:	f7f6 fe16 	bl	8009c3c <lv_obj_get_signal_func>
 8013010:	6070      	str	r0, [r6, #4]
 8013012:	e7cb      	b.n	8012fac <lv_chart_create+0x64>
        lv_obj_set_size(new_chart, LV_HOR_RES / 3, LV_VER_RES / 3);
 8013014:	225a      	movs	r2, #90	; 0x5a
 8013016:	21a0      	movs	r1, #160	; 0xa0
 8013018:	4628      	mov	r0, r5
 801301a:	f7f6 f947 	bl	80092ac <lv_obj_set_size>
        lv_theme_t * th = lv_theme_get_current();
 801301e:	f006 fafb 	bl	8019618 <lv_theme_get_current>
        if(th) {
 8013022:	b130      	cbz	r0, 8013032 <lv_chart_create+0xea>
 * @param chart pointer to a chart object
 * @param style pointer to a style
 */
static inline void lv_chart_set_style(lv_obj_t *chart, lv_style_t *style)
{
    lv_obj_set_style(chart, style);
 8013024:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8013026:	4628      	mov	r0, r5
 8013028:	f7f6 fc64 	bl	80098f4 <lv_obj_set_style>
}
 801302c:	4628      	mov	r0, r5
 801302e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013032:	4628      	mov	r0, r5
 8013034:	4905      	ldr	r1, [pc, #20]	; (801304c <lv_chart_create+0x104>)
 8013036:	f7f6 fc5d 	bl	80098f4 <lv_obj_set_style>
 801303a:	4628      	mov	r0, r5
 801303c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013040:	200174c4 	.word	0x200174c4
 8013044:	08012ed9 	.word	0x08012ed9
 8013048:	08012665 	.word	0x08012665
 801304c:	20017d60 	.word	0x20017d60

08013050 <lv_chart_add_series>:
{
 8013050:	b570      	push	{r4, r5, r6, lr}
 8013052:	460e      	mov	r6, r1
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 8013054:	f7f6 fdf6 	bl	8009c44 <lv_obj_get_ext_attr>
 8013058:	4604      	mov	r4, r0
    lv_chart_series_t * ser = lv_ll_ins_head(&ext->series_ll);
 801305a:	f7fc fec3 	bl	800fde4 <lv_ll_ins_head>
    lv_mem_assert(ser);
 801305e:	b1d0      	cbz	r0, 8013096 <lv_chart_add_series+0x46>
 8013060:	4605      	mov	r5, r0
    ser->points = lv_mem_alloc(sizeof(lv_coord_t) * ext->point_cnt);
 8013062:	8a60      	ldrh	r0, [r4, #18]
    ser->color = color;
 8013064:	606e      	str	r6, [r5, #4]
    ser->points = lv_mem_alloc(sizeof(lv_coord_t) * ext->point_cnt);
 8013066:	0040      	lsls	r0, r0, #1
 8013068:	f7fd f806 	bl	8010078 <lv_mem_alloc>
 801306c:	6028      	str	r0, [r5, #0]
    lv_mem_assert(ser->points);
 801306e:	b198      	cbz	r0, 8013098 <lv_chart_add_series+0x48>
    ser->start_point = 0;
 8013070:	2300      	movs	r3, #0
    for(i = 0; i < ext->point_cnt; i++) {
 8013072:	8a62      	ldrh	r2, [r4, #18]
    ser->start_point = 0;
 8013074:	812b      	strh	r3, [r5, #8]
    for(i = 0; i < ext->point_cnt; i++) {
 8013076:	b14a      	cbz	r2, 801308c <lv_chart_add_series+0x3c>
 8013078:	4602      	mov	r2, r0
        *p_tmp = def;
 801307a:	f44f 4040 	mov.w	r0, #49152	; 0xc000
    for(i = 0; i < ext->point_cnt; i++) {
 801307e:	3301      	adds	r3, #1
        *p_tmp = def;
 8013080:	f822 0b02 	strh.w	r0, [r2], #2
    for(i = 0; i < ext->point_cnt; i++) {
 8013084:	8a61      	ldrh	r1, [r4, #18]
 8013086:	b29b      	uxth	r3, r3
 8013088:	4299      	cmp	r1, r3
 801308a:	d8f8      	bhi.n	801307e <lv_chart_add_series+0x2e>
    ext->series.num++;
 801308c:	7e23      	ldrb	r3, [r4, #24]
}
 801308e:	4628      	mov	r0, r5
    ext->series.num++;
 8013090:	3301      	adds	r3, #1
 8013092:	7623      	strb	r3, [r4, #24]
}
 8013094:	bd70      	pop	{r4, r5, r6, pc}
 8013096:	e7fe      	b.n	8013096 <lv_chart_add_series+0x46>
 8013098:	e7fe      	b.n	8013098 <lv_chart_add_series+0x48>
 801309a:	bf00      	nop

0801309c <lv_chart_set_range>:
{
 801309c:	b570      	push	{r4, r5, r6, lr}
 801309e:	460c      	mov	r4, r1
 80130a0:	4615      	mov	r5, r2
 80130a2:	4606      	mov	r6, r0
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 80130a4:	f7f6 fdce 	bl	8009c44 <lv_obj_get_ext_attr>
    if(ext->ymin == ymin && ext->ymax == ymax) return;
 80130a8:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 80130ac:	4603      	mov	r3, r0
    if(ext->ymin == ymin && ext->ymax == ymax) return;
 80130ae:	42a2      	cmp	r2, r4
 80130b0:	d006      	beq.n	80130c0 <lv_chart_set_range+0x24>
    ext->ymin = ymin;
 80130b2:	819c      	strh	r4, [r3, #12]
    lv_obj_invalidate(chart);
 80130b4:	4630      	mov	r0, r6
    ext->ymax = ymax;
 80130b6:	81dd      	strh	r5, [r3, #14]
}
 80130b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_invalidate(chart);
 80130bc:	f7f5 bebc 	b.w	8008e38 <lv_obj_invalidate>
    if(ext->ymin == ymin && ext->ymax == ymax) return;
 80130c0:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 80130c4:	42aa      	cmp	r2, r5
 80130c6:	d1f4      	bne.n	80130b2 <lv_chart_set_range+0x16>
 80130c8:	bd70      	pop	{r4, r5, r6, pc}
 80130ca:	bf00      	nop

080130cc <lv_chart_set_type>:
{
 80130cc:	b538      	push	{r3, r4, r5, lr}
 80130ce:	460c      	mov	r4, r1
 80130d0:	4605      	mov	r5, r0
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 80130d2:	f7f6 fdb7 	bl	8009c44 <lv_obj_get_ext_attr>
    if(ext->type == type) return;
 80130d6:	7d03      	ldrb	r3, [r0, #20]
 80130d8:	f003 010f 	and.w	r1, r3, #15
 80130dc:	42a1      	cmp	r1, r4
 80130de:	d008      	beq.n	80130f2 <lv_chart_set_type+0x26>
 80130e0:	4602      	mov	r2, r0
    ext->type = type;
 80130e2:	f364 0303 	bfi	r3, r4, #0, #4
    lv_obj_invalidate(chart);
 80130e6:	4628      	mov	r0, r5
    ext->type = type;
 80130e8:	7513      	strb	r3, [r2, #20]
}
 80130ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(chart);
 80130ee:	f7f5 bea3 	b.w	8008e38 <lv_obj_invalidate>
 80130f2:	bd38      	pop	{r3, r4, r5, pc}

080130f4 <lv_chart_set_series_opa>:
{
 80130f4:	b538      	push	{r3, r4, r5, lr}
 80130f6:	460c      	mov	r4, r1
 80130f8:	4605      	mov	r5, r0
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 80130fa:	f7f6 fda3 	bl	8009c44 <lv_obj_get_ext_attr>
    if(ext->series.opa == opa) return;
 80130fe:	7e43      	ldrb	r3, [r0, #25]
 8013100:	42a3      	cmp	r3, r4
 8013102:	d005      	beq.n	8013110 <lv_chart_set_series_opa+0x1c>
    ext->series.opa = opa;
 8013104:	7644      	strb	r4, [r0, #25]
    lv_obj_invalidate(chart);
 8013106:	4628      	mov	r0, r5
}
 8013108:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(chart);
 801310c:	f7f5 be94 	b.w	8008e38 <lv_obj_invalidate>
 8013110:	bd38      	pop	{r3, r4, r5, pc}
 8013112:	bf00      	nop

08013114 <lv_chart_set_next>:
{
 8013114:	b570      	push	{r4, r5, r6, lr}
 8013116:	460c      	mov	r4, r1
 8013118:	4616      	mov	r6, r2
 801311a:	4605      	mov	r5, r0
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 801311c:	f7f6 fd92 	bl	8009c44 <lv_obj_get_ext_attr>
    ser->points[ser->start_point] = y;  /*This was the place of the former left most value, after shifting it is the rightmost*/
 8013120:	8921      	ldrh	r1, [r4, #8]
 8013122:	6823      	ldr	r3, [r4, #0]
 8013124:	f823 6011 	strh.w	r6, [r3, r1, lsl #1]
    ser->start_point = (ser->start_point + 1) % ext->point_cnt;
 8013128:	8923      	ldrh	r3, [r4, #8]
 801312a:	8a41      	ldrh	r1, [r0, #18]
    lv_obj_invalidate(chart);
 801312c:	4628      	mov	r0, r5
    ser->start_point = (ser->start_point + 1) % ext->point_cnt;
 801312e:	3301      	adds	r3, #1
 8013130:	fb93 f2f1 	sdiv	r2, r3, r1
 8013134:	fb01 3312 	mls	r3, r1, r2, r3
 8013138:	8123      	strh	r3, [r4, #8]
}
 801313a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_invalidate(chart);
 801313e:	f7f5 be7b 	b.w	8008e38 <lv_obj_invalidate>
 8013142:	bf00      	nop

08013144 <lv_cont_refr_layout>:
/**
 * Refresh the layout of a container
 * @param cont pointer to an object which layout should be refreshed
 */
static void lv_cont_refr_layout(lv_obj_t * cont)
{
 8013144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013148:	b087      	sub	sp, #28
 801314a:	4604      	mov	r4, r0
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 801314c:	f7f6 fd7a 	bl	8009c44 <lv_obj_get_ext_attr>
    return ext->layout;
 8013150:	7805      	ldrb	r5, [r0, #0]
    lv_layout_t type = lv_cont_get_layout(cont);

    /*'cont' has to be at least 1 child*/
    if(lv_obj_get_child(cont, NULL) == NULL) return;
 8013152:	2100      	movs	r1, #0
 8013154:	4620      	mov	r0, r4
    return ext->layout;
 8013156:	f005 050f 	and.w	r5, r5, #15
    if(lv_obj_get_child(cont, NULL) == NULL) return;
 801315a:	f7f6 fb9f 	bl	800989c <lv_obj_get_child>

    if(type == LV_LAYOUT_OFF) return;
 801315e:	b195      	cbz	r5, 8013186 <lv_cont_refr_layout+0x42>
 8013160:	fab0 f680 	clz	r6, r0
 8013164:	0976      	lsrs	r6, r6, #5
 8013166:	b976      	cbnz	r6, 8013186 <lv_cont_refr_layout+0x42>

    if(type == LV_LAYOUT_CENTER) {
 8013168:	2d01      	cmp	r5, #1
 801316a:	d07d      	beq.n	8013268 <lv_cont_refr_layout+0x124>
        lv_cont_layout_center(cont);
    } else if(type == LV_LAYOUT_COL_L || type == LV_LAYOUT_COL_M || type == LV_LAYOUT_COL_R) {
 801316c:	1eab      	subs	r3, r5, #2
 801316e:	2b02      	cmp	r3, #2
 8013170:	f240 80a5 	bls.w	80132be <lv_cont_refr_layout+0x17a>
        lv_cont_layout_col(cont);
    } else if(type == LV_LAYOUT_ROW_T || type == LV_LAYOUT_ROW_M || type == LV_LAYOUT_ROW_B) {
 8013174:	1f6b      	subs	r3, r5, #5
 8013176:	2b02      	cmp	r3, #2
 8013178:	f240 80e5 	bls.w	8013346 <lv_cont_refr_layout+0x202>
        lv_cont_layout_row(cont);
    } else if(type == LV_LAYOUT_PRETTY) {
 801317c:	2d08      	cmp	r5, #8
 801317e:	f000 8197 	beq.w	80134b0 <lv_cont_refr_layout+0x36c>
        lv_cont_layout_pretty(cont);
    }  else if(type == LV_LAYOUT_GRID) {
 8013182:	2d09      	cmp	r5, #9
 8013184:	d002      	beq.n	801318c <lv_cont_refr_layout+0x48>
        lv_cont_layout_grid(cont);
    }
}
 8013186:	b007      	add	sp, #28
 8013188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 * @param cont pointer to an object which layout should be handled
 */
static void lv_cont_layout_grid(lv_obj_t * cont)
{
    lv_obj_t * child;
    lv_style_t * style = lv_obj_get_style(cont);
 801318c:	4620      	mov	r0, r4
 801318e:	f7f6 fc3f 	bl	8009a10 <lv_obj_get_style>
 8013192:	4682      	mov	sl, r0
    lv_coord_t w_tot = lv_obj_get_width(cont);
 8013194:	4620      	mov	r0, r4
 8013196:	f7f6 fc2f 	bl	80099f8 <lv_obj_get_width>
    lv_coord_t w_obj = lv_obj_get_width(lv_obj_get_child(cont, NULL));
 801319a:	4631      	mov	r1, r6
    lv_coord_t w_tot = lv_obj_get_width(cont);
 801319c:	4607      	mov	r7, r0
    lv_coord_t w_obj = lv_obj_get_width(lv_obj_get_child(cont, NULL));
 801319e:	4620      	mov	r0, r4
 80131a0:	f7f6 fb7c 	bl	800989c <lv_obj_get_child>
 80131a4:	f7f6 fc28 	bl	80099f8 <lv_obj_get_width>
    lv_coord_t h_obj = lv_obj_get_height(lv_obj_get_child(cont, NULL));
 80131a8:	4631      	mov	r1, r6
    lv_coord_t w_obj = lv_obj_get_width(lv_obj_get_child(cont, NULL));
 80131aa:	4605      	mov	r5, r0
    lv_coord_t h_obj = lv_obj_get_height(lv_obj_get_child(cont, NULL));
 80131ac:	4620      	mov	r0, r4
 80131ae:	f7f6 fb75 	bl	800989c <lv_obj_get_child>
 80131b2:	f7f6 fc27 	bl	8009a04 <lv_obj_get_height>
    uint16_t obj_row = (w_tot - (2 * style->body.padding.hor)) / (w_obj + style->body.padding.inner); /*Obj. num. in a row*/
 80131b6:	f9ba 3022 	ldrsh.w	r3, [sl, #34]	; 0x22
 80131ba:	f9ba 1024 	ldrsh.w	r1, [sl, #36]	; 0x24
 80131be:	eba7 0343 	sub.w	r3, r7, r3, lsl #1
 80131c2:	194a      	adds	r2, r1, r5
 80131c4:	fb93 f2f2 	sdiv	r2, r3, r2
 80131c8:	fa1f fb82 	uxth.w	fp, r2
    lv_coord_t x_ofs;
    if(obj_row > 1) {
 80131cc:	f1bb 0f01 	cmp.w	fp, #1
 80131d0:	f240 810c 	bls.w	80133ec <lv_cont_refr_layout+0x2a8>
        x_ofs = w_obj + (w_tot - (2 * style->body.padding.hor) - (obj_row * w_obj)) / (obj_row - 1);
 80131d4:	fb0b 3815 	mls	r8, fp, r5, r3
 80131d8:	f10b 32ff 	add.w	r2, fp, #4294967295
 80131dc:	fb98 f8f2 	sdiv	r8, r8, r2
 80131e0:	44a8      	add	r8, r5
 80131e2:	fa0f f388 	sxth.w	r3, r8
 80131e6:	9303      	str	r3, [sp, #12]
    } else {
        x_ofs = w_tot / 2 - w_obj / 2;
    }
    lv_coord_t y_ofs = h_obj + style->body.padding.inner;
 80131e8:	180b      	adds	r3, r1, r0

    /* Align the children */
    lv_coord_t act_x = style->body.padding.hor;
    lv_coord_t act_y = style->body.padding.ver;
    uint16_t obj_cnt = 0;
    LL_READ_BACK(cont->child_ll, child) {
 80131ea:	1d25      	adds	r5, r4, #4
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 80131ec:	2101      	movs	r1, #1
 80131ee:	4620      	mov	r0, r4
    lv_coord_t y_ofs = h_obj + style->body.padding.inner;
 80131f0:	b29b      	uxth	r3, r3
 80131f2:	9304      	str	r3, [sp, #16]
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 80131f4:	f7f6 faa2 	bl	800973c <lv_obj_set_protect>
    LL_READ_BACK(cont->child_ll, child) {
 80131f8:	4628      	mov	r0, r5
    lv_coord_t act_x = style->body.padding.hor;
 80131fa:	f9ba 6022 	ldrsh.w	r6, [sl, #34]	; 0x22
    lv_coord_t act_y = style->body.padding.ver;
 80131fe:	f9ba 9020 	ldrsh.w	r9, [sl, #32]
    LL_READ_BACK(cont->child_ll, child) {
 8013202:	f7fc fecd 	bl	800ffa0 <lv_ll_get_tail>
 8013206:	4680      	mov	r8, r0
 8013208:	2800      	cmp	r0, #0
 801320a:	f000 8100 	beq.w	801340e <lv_cont_refr_layout+0x2ca>
 801320e:	2700      	movs	r7, #0
 8013210:	e007      	b.n	8013222 <lv_cont_refr_layout+0xde>
 8013212:	4641      	mov	r1, r8
 8013214:	4628      	mov	r0, r5
 8013216:	f7fc fecd 	bl	800ffb4 <lv_ll_get_prev>
 801321a:	4680      	mov	r8, r0
 801321c:	2800      	cmp	r0, #0
 801321e:	f000 80f6 	beq.w	801340e <lv_cont_refr_layout+0x2ca>
        if(lv_obj_get_hidden(child) != false ||
 8013222:	4640      	mov	r0, r8
 8013224:	f7f6 fcd0 	bl	8009bc8 <lv_obj_get_hidden>
 8013228:	2800      	cmp	r0, #0
 801322a:	d1f2      	bne.n	8013212 <lv_cont_refr_layout+0xce>
                lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801322c:	2104      	movs	r1, #4
 801322e:	4640      	mov	r0, r8
 8013230:	f7f6 fcfc 	bl	8009c2c <lv_obj_is_protected>
        if(lv_obj_get_hidden(child) != false ||
 8013234:	2800      	cmp	r0, #0
 8013236:	d1ec      	bne.n	8013212 <lv_cont_refr_layout+0xce>

        if(obj_row > 1) {
 8013238:	f1bb 0f01 	cmp.w	fp, #1
            lv_obj_set_pos(child, act_x, act_y);
 801323c:	4631      	mov	r1, r6
 801323e:	464a      	mov	r2, r9
 8013240:	4640      	mov	r0, r8
        if(obj_row > 1) {
 8013242:	f240 820a 	bls.w	801365a <lv_cont_refr_layout+0x516>
            act_x += x_ofs;
        } else {
            lv_obj_set_pos(child, x_ofs, act_y);
        }
        obj_cnt ++;
 8013246:	3701      	adds	r7, #1
            lv_obj_set_pos(child, act_x, act_y);
 8013248:	f7f5 fea4 	bl	8008f94 <lv_obj_set_pos>
            act_x += x_ofs;
 801324c:	9b03      	ldr	r3, [sp, #12]
        obj_cnt ++;
 801324e:	b2bf      	uxth	r7, r7
            act_x += x_ofs;
 8013250:	441e      	add	r6, r3

        if(obj_cnt >= obj_row) {
 8013252:	45bb      	cmp	fp, r7
            act_x += x_ofs;
 8013254:	b236      	sxth	r6, r6
        if(obj_cnt >= obj_row) {
 8013256:	d8dc      	bhi.n	8013212 <lv_cont_refr_layout+0xce>
            obj_cnt = 0;
            act_x = style->body.padding.hor;
            act_y += y_ofs;
 8013258:	9b04      	ldr	r3, [sp, #16]
            obj_cnt = 0;
 801325a:	2700      	movs	r7, #0
            act_x = style->body.padding.hor;
 801325c:	f9ba 6022 	ldrsh.w	r6, [sl, #34]	; 0x22
            act_y += y_ofs;
 8013260:	4499      	add	r9, r3
 8013262:	fa0f f989 	sxth.w	r9, r9
 8013266:	e7d4      	b.n	8013212 <lv_cont_refr_layout+0xce>
    LL_READ(cont->child_ll, child) {
 8013268:	1d27      	adds	r7, r4, #4
    lv_style_t * style = lv_obj_get_style(cont);
 801326a:	4620      	mov	r0, r4
 801326c:	f7f6 fbd0 	bl	8009a10 <lv_obj_get_style>
 8013270:	4681      	mov	r9, r0
    LL_READ(cont->child_ll, child) {
 8013272:	4638      	mov	r0, r7
 8013274:	f7fc fe90 	bl	800ff98 <lv_ll_get_head>
 8013278:	4605      	mov	r5, r0
 801327a:	2800      	cmp	r0, #0
 801327c:	d083      	beq.n	8013186 <lv_cont_refr_layout+0x42>
 801327e:	46b0      	mov	r8, r6
 8013280:	e007      	b.n	8013292 <lv_cont_refr_layout+0x14e>
 8013282:	4629      	mov	r1, r5
 8013284:	4638      	mov	r0, r7
 8013286:	f7fc fe8f 	bl	800ffa8 <lv_ll_get_next>
 801328a:	4605      	mov	r5, r0
 801328c:	2800      	cmp	r0, #0
 801328e:	f000 80c5 	beq.w	801341c <lv_cont_refr_layout+0x2d8>
        if(lv_obj_get_hidden(child) != false ||
 8013292:	4628      	mov	r0, r5
 8013294:	f7f6 fc98 	bl	8009bc8 <lv_obj_get_hidden>
 8013298:	2800      	cmp	r0, #0
 801329a:	d1f2      	bne.n	8013282 <lv_cont_refr_layout+0x13e>
                lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801329c:	2104      	movs	r1, #4
 801329e:	4628      	mov	r0, r5
 80132a0:	f7f6 fcc4 	bl	8009c2c <lv_obj_is_protected>
        if(lv_obj_get_hidden(child) != false ||
 80132a4:	2800      	cmp	r0, #0
 80132a6:	d1ec      	bne.n	8013282 <lv_cont_refr_layout+0x13e>
        h_tot += lv_obj_get_height(child) + style->body.padding.inner;
 80132a8:	4628      	mov	r0, r5
        obj_num ++;
 80132aa:	3601      	adds	r6, #1
        h_tot += lv_obj_get_height(child) + style->body.padding.inner;
 80132ac:	f7f6 fbaa 	bl	8009a04 <lv_obj_get_height>
 80132b0:	f9b9 3024 	ldrsh.w	r3, [r9, #36]	; 0x24
 80132b4:	4403      	add	r3, r0
 80132b6:	4498      	add	r8, r3
 80132b8:	fa0f f888 	sxth.w	r8, r8
 80132bc:	e7e1      	b.n	8013282 <lv_cont_refr_layout+0x13e>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 80132be:	4620      	mov	r0, r4
 80132c0:	f7f6 fcc0 	bl	8009c44 <lv_obj_get_ext_attr>
    return ext->layout;
 80132c4:	7805      	ldrb	r5, [r0, #0]
    lv_style_t * style = lv_obj_get_style(cont);
 80132c6:	4620      	mov	r0, r4
    return ext->layout;
 80132c8:	f005 050f 	and.w	r5, r5, #15
    lv_style_t * style = lv_obj_get_style(cont);
 80132cc:	f7f6 fba0 	bl	8009a10 <lv_obj_get_style>
 80132d0:	4680      	mov	r8, r0
    switch(type) {
 80132d2:	2d03      	cmp	r5, #3
 80132d4:	f000 81bd 	beq.w	8013652 <lv_cont_refr_layout+0x50e>
 80132d8:	2d04      	cmp	r5, #4
 80132da:	f000 81b3 	beq.w	8013644 <lv_cont_refr_layout+0x500>
 80132de:	2d02      	cmp	r5, #2
 80132e0:	d07f      	beq.n	80133e2 <lv_cont_refr_layout+0x29e>
            hpad_corr = 0;
 80132e2:	46b1      	mov	r9, r6
            align = LV_ALIGN_IN_TOP_LEFT;
 80132e4:	f04f 0a01 	mov.w	sl, #1
    LL_READ_BACK(cont->child_ll, child) {
 80132e8:	1d27      	adds	r7, r4, #4
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 80132ea:	2101      	movs	r1, #1
 80132ec:	4620      	mov	r0, r4
 80132ee:	f7f6 fa25 	bl	800973c <lv_obj_set_protect>
    LL_READ_BACK(cont->child_ll, child) {
 80132f2:	4638      	mov	r0, r7
    lv_coord_t last_cord = style->body.padding.ver;
 80132f4:	f9b8 6020 	ldrsh.w	r6, [r8, #32]
    LL_READ_BACK(cont->child_ll, child) {
 80132f8:	f7fc fe52 	bl	800ffa0 <lv_ll_get_tail>
 80132fc:	4605      	mov	r5, r0
 80132fe:	b938      	cbnz	r0, 8013310 <lv_cont_refr_layout+0x1cc>
 8013300:	e085      	b.n	801340e <lv_cont_refr_layout+0x2ca>
 8013302:	4629      	mov	r1, r5
 8013304:	4638      	mov	r0, r7
 8013306:	f7fc fe55 	bl	800ffb4 <lv_ll_get_prev>
 801330a:	4605      	mov	r5, r0
 801330c:	2800      	cmp	r0, #0
 801330e:	d07e      	beq.n	801340e <lv_cont_refr_layout+0x2ca>
        if(lv_obj_get_hidden(child) != false ||
 8013310:	4628      	mov	r0, r5
 8013312:	f7f6 fc59 	bl	8009bc8 <lv_obj_get_hidden>
 8013316:	2800      	cmp	r0, #0
 8013318:	d1f3      	bne.n	8013302 <lv_cont_refr_layout+0x1be>
                lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801331a:	2104      	movs	r1, #4
 801331c:	4628      	mov	r0, r5
 801331e:	f7f6 fc85 	bl	8009c2c <lv_obj_is_protected>
        if(lv_obj_get_hidden(child) != false ||
 8013322:	2800      	cmp	r0, #0
 8013324:	d1ed      	bne.n	8013302 <lv_cont_refr_layout+0x1be>
        lv_obj_align(child, cont, align, hpad_corr, last_cord);
 8013326:	464b      	mov	r3, r9
 8013328:	9600      	str	r6, [sp, #0]
 801332a:	4652      	mov	r2, sl
 801332c:	4621      	mov	r1, r4
 801332e:	4628      	mov	r0, r5
 8013330:	f7f6 f802 	bl	8009338 <lv_obj_align>
        last_cord += lv_obj_get_height(child) + style->body.padding.inner;
 8013334:	4628      	mov	r0, r5
 8013336:	f7f6 fb65 	bl	8009a04 <lv_obj_get_height>
 801333a:	f9b8 3024 	ldrsh.w	r3, [r8, #36]	; 0x24
 801333e:	4403      	add	r3, r0
 8013340:	4433      	add	r3, r6
 8013342:	b21e      	sxth	r6, r3
 8013344:	e7dd      	b.n	8013302 <lv_cont_refr_layout+0x1be>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8013346:	4620      	mov	r0, r4
 8013348:	f7f6 fc7c 	bl	8009c44 <lv_obj_get_ext_attr>
    return ext->layout;
 801334c:	7805      	ldrb	r5, [r0, #0]
    lv_style_t * style = lv_obj_get_style(cont);
 801334e:	4620      	mov	r0, r4
    return ext->layout;
 8013350:	f005 050f 	and.w	r5, r5, #15
    lv_style_t * style = lv_obj_get_style(cont);
 8013354:	f7f6 fb5c 	bl	8009a10 <lv_obj_get_style>
 8013358:	4681      	mov	r9, r0
    lv_coord_t vpad_corr = style->body.padding.ver;
 801335a:	f9b0 8020 	ldrsh.w	r8, [r0, #32]
    switch(type) {
 801335e:	2d06      	cmp	r5, #6
 8013360:	f000 8181 	beq.w	8013666 <lv_cont_refr_layout+0x522>
 8013364:	2d07      	cmp	r5, #7
 8013366:	d035      	beq.n	80133d4 <lv_cont_refr_layout+0x290>
            vpad_corr = 0;
 8013368:	2d05      	cmp	r5, #5
 801336a:	f04f 0a01 	mov.w	sl, #1
 801336e:	bf18      	it	ne
 8013370:	f04f 0800 	movne.w	r8, #0
    LL_READ_BACK(cont->child_ll, child) {
 8013374:	1d26      	adds	r6, r4, #4
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8013376:	2101      	movs	r1, #1
 8013378:	4620      	mov	r0, r4
 801337a:	f7f6 f9df 	bl	800973c <lv_obj_set_protect>
    LL_READ_BACK(cont->child_ll, child) {
 801337e:	4630      	mov	r0, r6
    lv_coord_t last_cord = style->body.padding.hor;
 8013380:	f9b9 7022 	ldrsh.w	r7, [r9, #34]	; 0x22
    LL_READ_BACK(cont->child_ll, child) {
 8013384:	f7fc fe0c 	bl	800ffa0 <lv_ll_get_tail>
 8013388:	4605      	mov	r5, r0
 801338a:	b938      	cbnz	r0, 801339c <lv_cont_refr_layout+0x258>
 801338c:	e03f      	b.n	801340e <lv_cont_refr_layout+0x2ca>
 801338e:	4629      	mov	r1, r5
 8013390:	4630      	mov	r0, r6
 8013392:	f7fc fe0f 	bl	800ffb4 <lv_ll_get_prev>
 8013396:	4605      	mov	r5, r0
 8013398:	2800      	cmp	r0, #0
 801339a:	d038      	beq.n	801340e <lv_cont_refr_layout+0x2ca>
        if(lv_obj_get_hidden(child) != false ||
 801339c:	4628      	mov	r0, r5
 801339e:	f7f6 fc13 	bl	8009bc8 <lv_obj_get_hidden>
 80133a2:	2800      	cmp	r0, #0
 80133a4:	d1f3      	bne.n	801338e <lv_cont_refr_layout+0x24a>
                lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 80133a6:	2104      	movs	r1, #4
 80133a8:	4628      	mov	r0, r5
 80133aa:	f7f6 fc3f 	bl	8009c2c <lv_obj_is_protected>
        if(lv_obj_get_hidden(child) != false ||
 80133ae:	2800      	cmp	r0, #0
 80133b0:	d1ed      	bne.n	801338e <lv_cont_refr_layout+0x24a>
        lv_obj_align(child, cont, align, last_cord, vpad_corr);
 80133b2:	463b      	mov	r3, r7
 80133b4:	4652      	mov	r2, sl
 80133b6:	4621      	mov	r1, r4
 80133b8:	4628      	mov	r0, r5
 80133ba:	f8cd 8000 	str.w	r8, [sp]
 80133be:	f7f5 ffbb 	bl	8009338 <lv_obj_align>
        last_cord += lv_obj_get_width(child) + style->body.padding.inner;
 80133c2:	4628      	mov	r0, r5
 80133c4:	f7f6 fb18 	bl	80099f8 <lv_obj_get_width>
 80133c8:	f9b9 3024 	ldrsh.w	r3, [r9, #36]	; 0x24
 80133cc:	4403      	add	r3, r0
 80133ce:	443b      	add	r3, r7
 80133d0:	b21f      	sxth	r7, r3
 80133d2:	e7dc      	b.n	801338e <lv_cont_refr_layout+0x24a>
            vpad_corr = -style->body.padding.ver;
 80133d4:	f1c8 0800 	rsb	r8, r8, #0
            align = LV_ALIGN_IN_BOTTOM_LEFT;
 80133d8:	f04f 0a04 	mov.w	sl, #4
            vpad_corr = -style->body.padding.ver;
 80133dc:	fa0f f888 	sxth.w	r8, r8
 80133e0:	e7c8      	b.n	8013374 <lv_cont_refr_layout+0x230>
            hpad_corr = style->body.padding.hor;
 80133e2:	f9b0 9022 	ldrsh.w	r9, [r0, #34]	; 0x22
            align = LV_ALIGN_IN_TOP_LEFT;
 80133e6:	f04f 0a01 	mov.w	sl, #1
 80133ea:	e77d      	b.n	80132e8 <lv_cont_refr_layout+0x1a4>
        x_ofs = w_tot / 2 - w_obj / 2;
 80133ec:	2f00      	cmp	r7, #0
 80133ee:	bfb8      	it	lt
 80133f0:	3701      	addlt	r7, #1
 80133f2:	2d00      	cmp	r5, #0
 80133f4:	ea4f 0767 	mov.w	r7, r7, asr #1
 80133f8:	bfb8      	it	lt
 80133fa:	3501      	addlt	r5, #1
 80133fc:	eba7 0565 	sub.w	r5, r7, r5, asr #1
 8013400:	b22b      	sxth	r3, r5
 8013402:	9303      	str	r3, [sp, #12]
 8013404:	e6f0      	b.n	80131e8 <lv_cont_refr_layout+0xa4>
        } while(child_rc != NULL);
 8013406:	4680      	mov	r8, r0
 8013408:	2800      	cmp	r0, #0
 801340a:	d170      	bne.n	80134ee <lv_cont_refr_layout+0x3aa>
 801340c:	9c04      	ldr	r4, [sp, #16]
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 801340e:	4620      	mov	r0, r4
 8013410:	2101      	movs	r1, #1
}
 8013412:	b007      	add	sp, #28
 8013414:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 8013418:	f7f6 b996 	b.w	8009748 <lv_obj_clear_protect>
    if(obj_num == 0) return;
 801341c:	2e00      	cmp	r6, #0
 801341e:	f43f aeb2 	beq.w	8013186 <lv_cont_refr_layout+0x42>
    h_tot -= style->body.padding.inner;
 8013422:	f8b9 3024 	ldrh.w	r3, [r9, #36]	; 0x24
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8013426:	2101      	movs	r1, #1
 8013428:	4620      	mov	r0, r4
    h_tot -= style->body.padding.inner;
 801342a:	eba8 0303 	sub.w	r3, r8, r3
 801342e:	b29d      	uxth	r5, r3
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8013430:	f7f6 f984 	bl	800973c <lv_obj_set_protect>
    LL_READ_BACK(cont->child_ll, child) {
 8013434:	4638      	mov	r0, r7
    lv_coord_t last_cord = - (h_tot / 2);
 8013436:	b22b      	sxth	r3, r5
 8013438:	2b00      	cmp	r3, #0
 801343a:	bfb8      	it	lt
 801343c:	3301      	addlt	r3, #1
 801343e:	105e      	asrs	r6, r3, #1
    LL_READ_BACK(cont->child_ll, child) {
 8013440:	f7fc fdae 	bl	800ffa0 <lv_ll_get_tail>
 8013444:	4605      	mov	r5, r0
    lv_coord_t last_cord = - (h_tot / 2);
 8013446:	4276      	negs	r6, r6
 8013448:	b236      	sxth	r6, r6
    LL_READ_BACK(cont->child_ll, child) {
 801344a:	b938      	cbnz	r0, 801345c <lv_cont_refr_layout+0x318>
 801344c:	e7df      	b.n	801340e <lv_cont_refr_layout+0x2ca>
 801344e:	4629      	mov	r1, r5
 8013450:	4638      	mov	r0, r7
 8013452:	f7fc fdaf 	bl	800ffb4 <lv_ll_get_prev>
 8013456:	4605      	mov	r5, r0
 8013458:	2800      	cmp	r0, #0
 801345a:	d0d8      	beq.n	801340e <lv_cont_refr_layout+0x2ca>
        if(lv_obj_get_hidden(child) != false ||
 801345c:	4628      	mov	r0, r5
 801345e:	f7f6 fbb3 	bl	8009bc8 <lv_obj_get_hidden>
 8013462:	2800      	cmp	r0, #0
 8013464:	d1f3      	bne.n	801344e <lv_cont_refr_layout+0x30a>
                lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8013466:	2104      	movs	r1, #4
 8013468:	4628      	mov	r0, r5
 801346a:	f7f6 fbdf 	bl	8009c2c <lv_obj_is_protected>
        if(lv_obj_get_hidden(child) != false ||
 801346e:	2800      	cmp	r0, #0
 8013470:	d1ed      	bne.n	801344e <lv_cont_refr_layout+0x30a>
        lv_obj_align(child, cont, LV_ALIGN_CENTER, 0, last_cord + lv_obj_get_height(child) / 2);
 8013472:	4628      	mov	r0, r5
 8013474:	b2b6      	uxth	r6, r6
 8013476:	f7f6 fac5 	bl	8009a04 <lv_obj_get_height>
 801347a:	f1b0 0e00 	subs.w	lr, r0, #0
 801347e:	f04f 0300 	mov.w	r3, #0
 8013482:	4621      	mov	r1, r4
 8013484:	bfb8      	it	lt
 8013486:	f10e 0e01 	addlt.w	lr, lr, #1
 801348a:	4628      	mov	r0, r5
 801348c:	461a      	mov	r2, r3
 801348e:	eb06 0e6e 	add.w	lr, r6, lr, asr #1
 8013492:	fa0f fe8e 	sxth.w	lr, lr
 8013496:	f8cd e000 	str.w	lr, [sp]
 801349a:	f7f5 ff4d 	bl	8009338 <lv_obj_align>
        last_cord += lv_obj_get_height(child) + style->body.padding.inner;
 801349e:	4628      	mov	r0, r5
 80134a0:	f7f6 fab0 	bl	8009a04 <lv_obj_get_height>
 80134a4:	f9b9 3024 	ldrsh.w	r3, [r9, #36]	; 0x24
 80134a8:	4403      	add	r3, r0
 80134aa:	441e      	add	r6, r3
 80134ac:	b236      	sxth	r6, r6
 80134ae:	e7ce      	b.n	801344e <lv_cont_refr_layout+0x30a>
    lv_style_t * style = lv_obj_get_style(cont);
 80134b0:	4620      	mov	r0, r4
    child_rs = lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
 80134b2:	1d27      	adds	r7, r4, #4
    lv_style_t * style = lv_obj_get_style(cont);
 80134b4:	f7f6 faac 	bl	8009a10 <lv_obj_get_style>
 80134b8:	4681      	mov	r9, r0
    lv_coord_t w_obj = lv_obj_get_width(cont);
 80134ba:	4620      	mov	r0, r4
 80134bc:	f7f6 fa9c 	bl	80099f8 <lv_obj_get_width>
    lv_coord_t act_y = style->body.padding.ver;
 80134c0:	f9b9 3020 	ldrsh.w	r3, [r9, #32]
    lv_coord_t w_obj = lv_obj_get_width(cont);
 80134c4:	4683      	mov	fp, r0
    child_rs = lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
 80134c6:	4638      	mov	r0, r7
    lv_coord_t act_y = style->body.padding.ver;
 80134c8:	9303      	str	r3, [sp, #12]
    child_rs = lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
 80134ca:	f7fc fd69 	bl	800ffa0 <lv_ll_get_tail>
    if(child_rs == NULL) return;    /*Return if no child*/
 80134ce:	4605      	mov	r5, r0
 80134d0:	2800      	cmp	r0, #0
 80134d2:	f43f ae58 	beq.w	8013186 <lv_cont_refr_layout+0x42>
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 80134d6:	2101      	movs	r1, #1
 80134d8:	4620      	mov	r0, r4
 80134da:	f7f6 f92f 	bl	800973c <lv_obj_set_protect>
 80134de:	9404      	str	r4, [sp, #16]
        lv_coord_t w_row = style->body.padding.hor * 2; /*The width is at least the left+right hpad*/
 80134e0:	f8b9 4022 	ldrh.w	r4, [r9, #34]	; 0x22
        uint32_t obj_num = 0;
 80134e4:	2600      	movs	r6, #0
        lv_coord_t w_row = style->body.padding.hor * 2; /*The width is at least the left+right hpad*/
 80134e6:	46a8      	mov	r8, r5
 80134e8:	0064      	lsls	r4, r4, #1
        lv_coord_t h_row = 0;
 80134ea:	46b2      	mov	sl, r6
        lv_coord_t w_row = style->body.padding.hor * 2; /*The width is at least the left+right hpad*/
 80134ec:	b224      	sxth	r4, r4
            if(lv_obj_get_hidden(child_rc) == false &&
 80134ee:	4628      	mov	r0, r5
 80134f0:	f7f6 fb6a 	bl	8009bc8 <lv_obj_get_hidden>
                    lv_obj_is_protected(child_rc, LV_PROTECT_POS) == false) {
 80134f4:	2104      	movs	r1, #4
            if(lv_obj_get_hidden(child_rc) == false &&
 80134f6:	b920      	cbnz	r0, 8013502 <lv_cont_refr_layout+0x3be>
                    lv_obj_is_protected(child_rc, LV_PROTECT_POS) == false) {
 80134f8:	4628      	mov	r0, r5
 80134fa:	f7f6 fb97 	bl	8009c2c <lv_obj_is_protected>
            if(lv_obj_get_hidden(child_rc) == false &&
 80134fe:	2800      	cmp	r0, #0
 8013500:	d04f      	beq.n	80135a2 <lv_cont_refr_layout+0x45e>
            child_rc = lv_ll_get_prev(&cont->child_ll, child_rc); /*Load the next object*/
 8013502:	4629      	mov	r1, r5
 8013504:	4638      	mov	r0, r7
 8013506:	f7fc fd55 	bl	800ffb4 <lv_ll_get_prev>
 801350a:	4605      	mov	r5, r0
            if(obj_num == 0) child_rs = child_rc; /*If the first object was hidden (or too long) then set the next as first */
 801350c:	2e00      	cmp	r6, #0
 801350e:	f43f af7a 	beq.w	8013406 <lv_cont_refr_layout+0x2c2>
        } while(child_rc != NULL);
 8013512:	2800      	cmp	r0, #0
 8013514:	d1eb      	bne.n	80134ee <lv_cont_refr_layout+0x3aa>
        else if(obj_num == 1) {
 8013516:	2e01      	cmp	r6, #1
 8013518:	f000 8081 	beq.w	801361e <lv_cont_refr_layout+0x4da>
        else if(obj_num == 2) {
 801351c:	2e02      	cmp	r6, #2
 801351e:	f000 80a6 	beq.w	801366e <lv_cont_refr_layout+0x52a>
            w_row -= style->body.padding.inner * obj_num;
 8013522:	f9b9 3024 	ldrsh.w	r3, [r9, #36]	; 0x24
            lv_coord_t new_opad = (w_obj -  w_row) / (obj_num  - 1);
 8013526:	1e72      	subs	r2, r6, #1
            w_row -= style->body.padding.inner * obj_num;
 8013528:	fb13 f306 	smulbb	r3, r3, r6
            lv_coord_t act_x = style->body.padding.hor; /*x init*/
 801352c:	f9b9 6022 	ldrsh.w	r6, [r9, #34]	; 0x22
            w_row -= style->body.padding.inner * obj_num;
 8013530:	1ae4      	subs	r4, r4, r3
            lv_coord_t new_opad = (w_obj -  w_row) / (obj_num  - 1);
 8013532:	b224      	sxth	r4, r4
 8013534:	ebab 0404 	sub.w	r4, fp, r4
 8013538:	fbb4 f4f2 	udiv	r4, r4, r2
 801353c:	b224      	sxth	r4, r4
 801353e:	9405      	str	r4, [sp, #20]
 8013540:	e008      	b.n	8013554 <lv_cont_refr_layout+0x410>
                if(child_tmp == child_rc) break;
 8013542:	45a8      	cmp	r8, r5
                child_tmp = lv_ll_get_prev(&cont->child_ll, child_tmp);
 8013544:	4641      	mov	r1, r8
 8013546:	4638      	mov	r0, r7
                if(child_tmp == child_rc) break;
 8013548:	d053      	beq.n	80135f2 <lv_cont_refr_layout+0x4ae>
                child_tmp = lv_ll_get_prev(&cont->child_ll, child_tmp);
 801354a:	f7fc fd33 	bl	800ffb4 <lv_ll_get_prev>
            while(child_tmp != NULL) {
 801354e:	4680      	mov	r8, r0
 8013550:	2800      	cmp	r0, #0
 8013552:	d06c      	beq.n	801362e <lv_cont_refr_layout+0x4ea>
                if(lv_obj_get_hidden(child_tmp) == false &&
 8013554:	4640      	mov	r0, r8
 8013556:	f7f6 fb37 	bl	8009bc8 <lv_obj_get_hidden>
 801355a:	2800      	cmp	r0, #0
 801355c:	d1f1      	bne.n	8013542 <lv_cont_refr_layout+0x3fe>
                        lv_obj_is_protected(child_tmp, LV_PROTECT_POS) == false) {
 801355e:	2104      	movs	r1, #4
 8013560:	4640      	mov	r0, r8
 8013562:	f7f6 fb63 	bl	8009c2c <lv_obj_is_protected>
                if(lv_obj_get_hidden(child_tmp) == false &&
 8013566:	2800      	cmp	r0, #0
 8013568:	d1eb      	bne.n	8013542 <lv_cont_refr_layout+0x3fe>
                    lv_obj_align(child_tmp, cont, LV_ALIGN_IN_TOP_LEFT, act_x, act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
 801356a:	4640      	mov	r0, r8
 801356c:	f7f6 fa4a 	bl	8009a04 <lv_obj_get_height>
 8013570:	2201      	movs	r2, #1
 8013572:	ebba 0e00 	subs.w	lr, sl, r0
 8013576:	9c03      	ldr	r4, [sp, #12]
 8013578:	4633      	mov	r3, r6
 801357a:	9904      	ldr	r1, [sp, #16]
 801357c:	bf48      	it	mi
 801357e:	4496      	addmi	lr, r2
 8013580:	4640      	mov	r0, r8
 8013582:	eb04 0e6e 	add.w	lr, r4, lr, asr #1
 8013586:	fa0f fe8e 	sxth.w	lr, lr
 801358a:	f8cd e000 	str.w	lr, [sp]
 801358e:	f7f5 fed3 	bl	8009338 <lv_obj_align>
                    act_x += lv_obj_get_width(child_tmp) + new_opad;
 8013592:	4640      	mov	r0, r8
 8013594:	f7f6 fa30 	bl	80099f8 <lv_obj_get_width>
 8013598:	9b05      	ldr	r3, [sp, #20]
 801359a:	4418      	add	r0, r3
 801359c:	4406      	add	r6, r0
 801359e:	b236      	sxth	r6, r6
 80135a0:	e7cf      	b.n	8013542 <lv_cont_refr_layout+0x3fe>
                if(w_row + lv_obj_get_width(child_rc) > w_obj) {
 80135a2:	4628      	mov	r0, r5
 80135a4:	f7f6 fa28 	bl	80099f8 <lv_obj_get_width>
 80135a8:	1823      	adds	r3, r4, r0
                w_row += lv_obj_get_width(child_rc) + style->body.padding.inner; /*Add the object width + opad*/
 80135aa:	4628      	mov	r0, r5
                if(w_row + lv_obj_get_width(child_rc) > w_obj) {
 80135ac:	455b      	cmp	r3, fp
 80135ae:	dc41      	bgt.n	8013634 <lv_cont_refr_layout+0x4f0>
                w_row += lv_obj_get_width(child_rc) + style->body.padding.inner; /*Add the object width + opad*/
 80135b0:	f7f6 fa22 	bl	80099f8 <lv_obj_get_width>
 80135b4:	f9b9 3024 	ldrsh.w	r3, [r9, #36]	; 0x24
                obj_num ++;
 80135b8:	3601      	adds	r6, #1
                w_row += lv_obj_get_width(child_rc) + style->body.padding.inner; /*Add the object width + opad*/
 80135ba:	4403      	add	r3, r0
                h_row = LV_MATH_MAX(h_row, lv_obj_get_height(child_rc)); /*Search the highest object*/
 80135bc:	4628      	mov	r0, r5
                w_row += lv_obj_get_width(child_rc) + style->body.padding.inner; /*Add the object width + opad*/
 80135be:	441c      	add	r4, r3
                h_row = LV_MATH_MAX(h_row, lv_obj_get_height(child_rc)); /*Search the highest object*/
 80135c0:	f7f6 fa20 	bl	8009a04 <lv_obj_get_height>
 80135c4:	4550      	cmp	r0, sl
                w_row += lv_obj_get_width(child_rc) + style->body.padding.inner; /*Add the object width + opad*/
 80135c6:	b224      	sxth	r4, r4
                h_row = LV_MATH_MAX(h_row, lv_obj_get_height(child_rc)); /*Search the highest object*/
 80135c8:	da24      	bge.n	8013614 <lv_cont_refr_layout+0x4d0>
                if(lv_obj_is_protected(child_rc, LV_PROTECT_FOLLOW)) break; /*If can not be followed by an other object then break here*/
 80135ca:	2108      	movs	r1, #8
 80135cc:	4628      	mov	r0, r5
 80135ce:	f7f6 fb2d 	bl	8009c2c <lv_obj_is_protected>
 80135d2:	2800      	cmp	r0, #0
 80135d4:	d095      	beq.n	8013502 <lv_cont_refr_layout+0x3be>
        if(obj_num == 0) {
 80135d6:	2e00      	cmp	r6, #0
 80135d8:	d19d      	bne.n	8013516 <lv_cont_refr_layout+0x3d2>
                lv_obj_align(child_rc, cont, LV_ALIGN_IN_TOP_MID, 0, act_y);
 80135da:	9b03      	ldr	r3, [sp, #12]
 80135dc:	2202      	movs	r2, #2
 80135de:	9904      	ldr	r1, [sp, #16]
 80135e0:	4628      	mov	r0, r5
 80135e2:	9300      	str	r3, [sp, #0]
 80135e4:	2300      	movs	r3, #0
 80135e6:	f7f5 fea7 	bl	8009338 <lv_obj_align>
                h_row = lv_obj_get_height(child_rc);    /*Not set previously because of the early break*/
 80135ea:	4628      	mov	r0, r5
 80135ec:	f7f6 fa0a 	bl	8009a04 <lv_obj_get_height>
 80135f0:	4682      	mov	sl, r0
        act_y += style->body.padding.inner + h_row; /*y increment*/
 80135f2:	f8b9 3024 	ldrh.w	r3, [r9, #36]	; 0x24
        child_rs = lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
 80135f6:	4629      	mov	r1, r5
        act_y += style->body.padding.inner + h_row; /*y increment*/
 80135f8:	9a03      	ldr	r2, [sp, #12]
        child_rs = lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
 80135fa:	4638      	mov	r0, r7
        act_y += style->body.padding.inner + h_row; /*y increment*/
 80135fc:	441a      	add	r2, r3
 80135fe:	4492      	add	sl, r2
 8013600:	fa0f f38a 	sxth.w	r3, sl
 8013604:	9303      	str	r3, [sp, #12]
        child_rs = lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
 8013606:	f7fc fcd5 	bl	800ffb4 <lv_ll_get_prev>
    while(child_rs != NULL) {
 801360a:	4605      	mov	r5, r0
 801360c:	2800      	cmp	r0, #0
 801360e:	f47f af67 	bne.w	80134e0 <lv_cont_refr_layout+0x39c>
 8013612:	e6fb      	b.n	801340c <lv_cont_refr_layout+0x2c8>
                h_row = LV_MATH_MAX(h_row, lv_obj_get_height(child_rc)); /*Search the highest object*/
 8013614:	4628      	mov	r0, r5
 8013616:	f7f6 f9f5 	bl	8009a04 <lv_obj_get_height>
 801361a:	4682      	mov	sl, r0
 801361c:	e7d5      	b.n	80135ca <lv_cont_refr_layout+0x486>
            lv_obj_align(child_rs, cont, LV_ALIGN_IN_TOP_MID, 0, act_y);
 801361e:	9b03      	ldr	r3, [sp, #12]
 8013620:	4640      	mov	r0, r8
 8013622:	2202      	movs	r2, #2
 8013624:	9904      	ldr	r1, [sp, #16]
 8013626:	9300      	str	r3, [sp, #0]
 8013628:	2300      	movs	r3, #0
 801362a:	f7f5 fe85 	bl	8009338 <lv_obj_align>
        if(child_rc == NULL) break;
 801362e:	2d00      	cmp	r5, #0
 8013630:	d1df      	bne.n	80135f2 <lv_cont_refr_layout+0x4ae>
 8013632:	e6eb      	b.n	801340c <lv_cont_refr_layout+0x2c8>
                    if(child_rc != NULL  && obj_num != 0) {
 8013634:	2e00      	cmp	r6, #0
 8013636:	d0d0      	beq.n	80135da <lv_cont_refr_layout+0x496>
                        child_rc = lv_ll_get_next(&cont->child_ll, child_rc);
 8013638:	4629      	mov	r1, r5
 801363a:	4638      	mov	r0, r7
 801363c:	f7fc fcb4 	bl	800ffa8 <lv_ll_get_next>
 8013640:	4605      	mov	r5, r0
 8013642:	e768      	b.n	8013516 <lv_cont_refr_layout+0x3d2>
            hpad_corr = -style->body.padding.hor;
 8013644:	8c46      	ldrh	r6, [r0, #34]	; 0x22
            align = LV_ALIGN_IN_TOP_RIGHT;
 8013646:	f04f 0a03 	mov.w	sl, #3
            hpad_corr = -style->body.padding.hor;
 801364a:	4276      	negs	r6, r6
 801364c:	fa0f f986 	sxth.w	r9, r6
 8013650:	e64a      	b.n	80132e8 <lv_cont_refr_layout+0x1a4>
            hpad_corr = 0;
 8013652:	46b1      	mov	r9, r6
            align = LV_ALIGN_IN_TOP_MID;
 8013654:	f04f 0a02 	mov.w	sl, #2
 8013658:	e646      	b.n	80132e8 <lv_cont_refr_layout+0x1a4>
            lv_obj_set_pos(child, x_ofs, act_y);
 801365a:	464a      	mov	r2, r9
 801365c:	9903      	ldr	r1, [sp, #12]
 801365e:	4640      	mov	r0, r8
 8013660:	f7f5 fc98 	bl	8008f94 <lv_obj_set_pos>
 8013664:	e5f8      	b.n	8013258 <lv_cont_refr_layout+0x114>
            vpad_corr = 0;
 8013666:	46b0      	mov	r8, r6
            align = LV_ALIGN_IN_LEFT_MID;
 8013668:	f04f 0a07 	mov.w	sl, #7
 801366c:	e682      	b.n	8013374 <lv_cont_refr_layout+0x230>
            lv_obj_t * obj2 = lv_ll_get_prev(&cont->child_ll, child_rs);
 801366e:	4641      	mov	r1, r8
 8013670:	4638      	mov	r0, r7
 8013672:	f7fc fc9f 	bl	800ffb4 <lv_ll_get_prev>
 8013676:	4604      	mov	r4, r0
            w_row = lv_obj_get_width(obj1) + lv_obj_get_width(obj2);
 8013678:	4640      	mov	r0, r8
 801367a:	f7f6 f9bd 	bl	80099f8 <lv_obj_get_width>
 801367e:	4606      	mov	r6, r0
 8013680:	4620      	mov	r0, r4
 8013682:	f7f6 f9b9 	bl	80099f8 <lv_obj_get_width>
 8013686:	4406      	add	r6, r0
            lv_obj_align(obj1, cont, LV_ALIGN_IN_TOP_LEFT, pad, act_y + (h_row - lv_obj_get_height(obj1)) / 2);
 8013688:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801368c:	4640      	mov	r0, r8
            lv_coord_t pad = (w_obj - w_row) / 3;
 801368e:	b236      	sxth	r6, r6
            lv_obj_align(obj1, cont, LV_ALIGN_IN_TOP_LEFT, pad, act_y + (h_row - lv_obj_get_height(obj1)) / 2);
 8013690:	9305      	str	r3, [sp, #20]
            lv_coord_t pad = (w_obj - w_row) / 3;
 8013692:	ebab 0606 	sub.w	r6, fp, r6
 8013696:	4b18      	ldr	r3, [pc, #96]	; (80136f8 <lv_cont_refr_layout+0x5b4>)
 8013698:	fb83 2306 	smull	r2, r3, r3, r6
 801369c:	eba3 76e6 	sub.w	r6, r3, r6, asr #31
            lv_obj_align(obj1, cont, LV_ALIGN_IN_TOP_LEFT, pad, act_y + (h_row - lv_obj_get_height(obj1)) / 2);
 80136a0:	f7f6 f9b0 	bl	8009a04 <lv_obj_get_height>
 80136a4:	ebba 0000 	subs.w	r0, sl, r0
 80136a8:	9a05      	ldr	r2, [sp, #20]
 80136aa:	b233      	sxth	r3, r6
 80136ac:	bf48      	it	mi
 80136ae:	3001      	addmi	r0, #1
 80136b0:	9904      	ldr	r1, [sp, #16]
 80136b2:	eb02 0e60 	add.w	lr, r2, r0, asr #1
 80136b6:	2201      	movs	r2, #1
 80136b8:	4640      	mov	r0, r8
 80136ba:	fa0f fe8e 	sxth.w	lr, lr
 80136be:	f8cd e000 	str.w	lr, [sp]
 80136c2:	f7f5 fe39 	bl	8009338 <lv_obj_align>
            lv_obj_align(obj2, cont, LV_ALIGN_IN_TOP_RIGHT, -pad, act_y + (h_row - lv_obj_get_height(obj2)) / 2);
 80136c6:	4620      	mov	r0, r4
 80136c8:	f7f6 f99c 	bl	8009a04 <lv_obj_get_height>
 80136cc:	ebba 0100 	subs.w	r1, sl, r0
 80136d0:	9a05      	ldr	r2, [sp, #20]
 80136d2:	f1c6 0300 	rsb	r3, r6, #0
 80136d6:	bf48      	it	mi
 80136d8:	3101      	addmi	r1, #1
 80136da:	4620      	mov	r0, r4
 80136dc:	b21b      	sxth	r3, r3
 80136de:	eb02 0161 	add.w	r1, r2, r1, asr #1
 80136e2:	2203      	movs	r2, #3
 80136e4:	b20c      	sxth	r4, r1
 80136e6:	9904      	ldr	r1, [sp, #16]
 80136e8:	9400      	str	r4, [sp, #0]
 80136ea:	f7f5 fe25 	bl	8009338 <lv_obj_align>
        if(child_rc == NULL) break;
 80136ee:	2d00      	cmp	r5, #0
 80136f0:	f47f af7f 	bne.w	80135f2 <lv_cont_refr_layout+0x4ae>
 80136f4:	e68a      	b.n	801340c <lv_cont_refr_layout+0x2c8>
 80136f6:	bf00      	nop
 80136f8:	55555556 	.word	0x55555556

080136fc <lv_cont_refr_autofit>:
/**
 * Handle auto fit. Set the size of the object to involve all children.
 * @param cont pointer to an object which size will be modified
 */
static void lv_cont_refr_autofit(lv_obj_t * cont)
{
 80136fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013700:	b085      	sub	sp, #20
 8013702:	4605      	mov	r5, r0
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8013704:	f7f6 fa9e 	bl	8009c44 <lv_obj_get_ext_attr>

    if(ext->hor_fit == 0 &&
 8013708:	7803      	ldrb	r3, [r0, #0]
 801370a:	f013 0f30 	tst.w	r3, #48	; 0x30
 801370e:	d102      	bne.n	8013716 <lv_cont_refr_autofit+0x1a>
            /*Inform the parent about the new coordinates*/
            lv_obj_t * par = lv_obj_get_parent(cont);
            par->signal_func(par, LV_SIGNAL_CHILD_CHG, cont);
        }
    }
}
 8013710:	b005      	add	sp, #20
 8013712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013716:	4607      	mov	r7, r0
    lv_style_t * style = lv_obj_get_style(cont);
 8013718:	4628      	mov	r0, r5
 801371a:	f7f6 f979 	bl	8009a10 <lv_obj_get_style>
 801371e:	4603      	mov	r3, r0
    lv_obj_get_coords(cont, &ori);
 8013720:	a902      	add	r1, sp, #8
 8013722:	4628      	mov	r0, r5
    lv_coord_t hpad = style->body.padding.hor;
 8013724:	f9b3 9022 	ldrsh.w	r9, [r3, #34]	; 0x22
    LL_READ(cont->child_ll, i) {
 8013728:	1d2e      	adds	r6, r5, #4
    lv_coord_t vpad = style->body.padding.ver;
 801372a:	f9b3 8020 	ldrsh.w	r8, [r3, #32]
    lv_obj_get_coords(cont, &ori);
 801372e:	f7f6 f951 	bl	80099d4 <lv_obj_get_coords>
    lv_obj_get_coords(cont, &new_cords);
 8013732:	4669      	mov	r1, sp
 8013734:	4628      	mov	r0, r5
 8013736:	f7f6 f94d 	bl	80099d4 <lv_obj_get_coords>
    new_cords.x1 = LV_COORD_MAX;
 801373a:	f643 72ff 	movw	r2, #16383	; 0x3fff
    new_cords.x2 = LV_COORD_MIN;
 801373e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    LL_READ(cont->child_ll, i) {
 8013742:	4630      	mov	r0, r6
    new_cords.x1 = LV_COORD_MAX;
 8013744:	f8ad 2000 	strh.w	r2, [sp]
    new_cords.y1 = LV_COORD_MAX;
 8013748:	f8ad 2002 	strh.w	r2, [sp, #2]
    new_cords.x2 = LV_COORD_MIN;
 801374c:	f8ad 3004 	strh.w	r3, [sp, #4]
    new_cords.y2 = LV_COORD_MIN;
 8013750:	f8ad 3006 	strh.w	r3, [sp, #6]
    LL_READ(cont->child_ll, i) {
 8013754:	f7fc fc20 	bl	800ff98 <lv_ll_get_head>
 8013758:	4604      	mov	r4, r0
 801375a:	b370      	cbz	r0, 80137ba <lv_cont_refr_autofit+0xbe>
        if(lv_obj_get_hidden(i) != false) continue;
 801375c:	4620      	mov	r0, r4
 801375e:	f7f6 fa33 	bl	8009bc8 <lv_obj_get_hidden>
    LL_READ(cont->child_ll, i) {
 8013762:	4621      	mov	r1, r4
        if(lv_obj_get_hidden(i) != false) continue;
 8013764:	bb18      	cbnz	r0, 80137ae <lv_cont_refr_autofit+0xb2>
        new_cords.x1 = LV_MATH_MIN(new_cords.x1, i->coords.x1);
 8013766:	f9b4 e010 	ldrsh.w	lr, [r4, #16]
 801376a:	f9bd 3000 	ldrsh.w	r3, [sp]
        new_cords.y1 = LV_MATH_MIN(new_cords.y1, i->coords.y1);
 801376e:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
        new_cords.x1 = LV_MATH_MIN(new_cords.x1, i->coords.x1);
 8013772:	459e      	cmp	lr, r3
        new_cords.y1 = LV_MATH_MIN(new_cords.y1, i->coords.y1);
 8013774:	f9bd c002 	ldrsh.w	ip, [sp, #2]
        new_cords.x2 = LV_MATH_MAX(new_cords.x2, i->coords.x2);
 8013778:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
        new_cords.x1 = LV_MATH_MIN(new_cords.x1, i->coords.x1);
 801377c:	bfa8      	it	ge
 801377e:	469e      	movge	lr, r3
        new_cords.y2 = LV_MATH_MAX(new_cords.y2, i->coords.y2);
 8013780:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
        new_cords.y1 = LV_MATH_MIN(new_cords.y1, i->coords.y1);
 8013784:	4560      	cmp	r0, ip
        new_cords.x2 = LV_MATH_MAX(new_cords.x2, i->coords.x2);
 8013786:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
        new_cords.x1 = LV_MATH_MIN(new_cords.x1, i->coords.x1);
 801378a:	f8ad e000 	strh.w	lr, [sp]
        new_cords.y1 = LV_MATH_MIN(new_cords.y1, i->coords.y1);
 801378e:	bfa8      	it	ge
 8013790:	4660      	movge	r0, ip
        new_cords.x2 = LV_MATH_MAX(new_cords.x2, i->coords.x2);
 8013792:	42a2      	cmp	r2, r4
 8013794:	bfb8      	it	lt
 8013796:	4622      	movlt	r2, r4
        new_cords.y2 = LV_MATH_MAX(new_cords.y2, i->coords.y2);
 8013798:	f9bd 4006 	ldrsh.w	r4, [sp, #6]
        new_cords.y1 = LV_MATH_MIN(new_cords.y1, i->coords.y1);
 801379c:	f8ad 0002 	strh.w	r0, [sp, #2]
        new_cords.y2 = LV_MATH_MAX(new_cords.y2, i->coords.y2);
 80137a0:	42a3      	cmp	r3, r4
        new_cords.x2 = LV_MATH_MAX(new_cords.x2, i->coords.x2);
 80137a2:	f8ad 2004 	strh.w	r2, [sp, #4]
        new_cords.y2 = LV_MATH_MAX(new_cords.y2, i->coords.y2);
 80137a6:	bfb8      	it	lt
 80137a8:	4623      	movlt	r3, r4
 80137aa:	f8ad 3006 	strh.w	r3, [sp, #6]
    LL_READ(cont->child_ll, i) {
 80137ae:	4630      	mov	r0, r6
 80137b0:	f7fc fbfa 	bl	800ffa8 <lv_ll_get_next>
 80137b4:	4604      	mov	r4, r0
 80137b6:	2800      	cmp	r0, #0
 80137b8:	d1d0      	bne.n	801375c <lv_cont_refr_autofit+0x60>
    if(new_cords.x1 != LV_COORD_MAX) {
 80137ba:	f9bd 3000 	ldrsh.w	r3, [sp]
 80137be:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80137c2:	4293      	cmp	r3, r2
 80137c4:	d0a4      	beq.n	8013710 <lv_cont_refr_autofit+0x14>
        if(ext->hor_fit != 0) {
 80137c6:	783a      	ldrb	r2, [r7, #0]
 80137c8:	06d1      	lsls	r1, r2, #27
 80137ca:	d436      	bmi.n	801383a <lv_cont_refr_autofit+0x13e>
            new_cords.x1 = cont->coords.x1;
 80137cc:	f9b5 1010 	ldrsh.w	r1, [r5, #16]
        if(ext->ver_fit != 0) {
 80137d0:	0692      	lsls	r2, r2, #26
            new_cords.x2 = cont->coords.x2;
 80137d2:	8aa8      	ldrh	r0, [r5, #20]
 80137d4:	460b      	mov	r3, r1
            new_cords.x1 = cont->coords.x1;
 80137d6:	f8ad 1000 	strh.w	r1, [sp]
            new_cords.x2 = cont->coords.x2;
 80137da:	f8ad 0004 	strh.w	r0, [sp, #4]
        if(ext->ver_fit != 0) {
 80137de:	d53c      	bpl.n	801385a <lv_cont_refr_autofit+0x15e>
            new_cords.y1 -= vpad;
 80137e0:	fa1f f888 	uxth.w	r8, r8
 80137e4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
            new_cords.y2 += vpad;
 80137e8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
        if(cont->coords.x1 != new_cords.x1 ||
 80137ec:	4299      	cmp	r1, r3
            new_cords.y1 -= vpad;
 80137ee:	eba2 0208 	sub.w	r2, r2, r8
            new_cords.y2 += vpad;
 80137f2:	4480      	add	r8, r0
            new_cords.y1 -= vpad;
 80137f4:	b212      	sxth	r2, r2
            new_cords.y2 += vpad;
 80137f6:	f8ad 8006 	strh.w	r8, [sp, #6]
            new_cords.y1 -= vpad;
 80137fa:	f8ad 2002 	strh.w	r2, [sp, #2]
        if(cont->coords.x1 != new_cords.x1 ||
 80137fe:	d103      	bne.n	8013808 <lv_cont_refr_autofit+0x10c>
 8013800:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
 8013804:	4293      	cmp	r3, r2
 8013806:	d037      	beq.n	8013878 <lv_cont_refr_autofit+0x17c>
            lv_obj_invalidate(cont);
 8013808:	4628      	mov	r0, r5
 801380a:	f7f5 fb15 	bl	8008e38 <lv_obj_invalidate>
 801380e:	466b      	mov	r3, sp
 8013810:	cb03      	ldmia	r3!, {r0, r1}
 8013812:	6128      	str	r0, [r5, #16]
            lv_obj_invalidate(cont);
 8013814:	4628      	mov	r0, r5
 8013816:	6169      	str	r1, [r5, #20]
 8013818:	f7f5 fb0e 	bl	8008e38 <lv_obj_invalidate>
            cont->signal_func(cont, LV_SIGNAL_CORD_CHG, &ori);
 801381c:	aa02      	add	r2, sp, #8
 801381e:	69ab      	ldr	r3, [r5, #24]
 8013820:	2102      	movs	r1, #2
 8013822:	4628      	mov	r0, r5
 8013824:	4798      	blx	r3
            lv_obj_t * par = lv_obj_get_parent(cont);
 8013826:	4628      	mov	r0, r5
 8013828:	f7f6 f836 	bl	8009898 <lv_obj_get_parent>
            par->signal_func(par, LV_SIGNAL_CHILD_CHG, cont);
 801382c:	462a      	mov	r2, r5
 801382e:	6983      	ldr	r3, [r0, #24]
 8013830:	2101      	movs	r1, #1
 8013832:	4798      	blx	r3
}
 8013834:	b005      	add	sp, #20
 8013836:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            new_cords.x1 -= hpad;
 801383a:	fa1f f989 	uxth.w	r9, r9
            new_cords.x2 += hpad;
 801383e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
        if(ext->ver_fit != 0) {
 8013842:	0692      	lsls	r2, r2, #26
 8013844:	f9b5 1010 	ldrsh.w	r1, [r5, #16]
            new_cords.x1 -= hpad;
 8013848:	eba3 0309 	sub.w	r3, r3, r9
            new_cords.x2 += hpad;
 801384c:	4481      	add	r9, r0
            new_cords.x1 -= hpad;
 801384e:	b21b      	sxth	r3, r3
            new_cords.x2 += hpad;
 8013850:	f8ad 9004 	strh.w	r9, [sp, #4]
            new_cords.x1 -= hpad;
 8013854:	f8ad 3000 	strh.w	r3, [sp]
        if(ext->ver_fit != 0) {
 8013858:	d4c2      	bmi.n	80137e0 <lv_cont_refr_autofit+0xe4>
            new_cords.y1 = cont->coords.y1;
 801385a:	8a68      	ldrh	r0, [r5, #18]
        if(cont->coords.x1 != new_cords.x1 ||
 801385c:	4299      	cmp	r1, r3
            new_cords.y2 = cont->coords.y2;
 801385e:	8aea      	ldrh	r2, [r5, #22]
            new_cords.y1 = cont->coords.y1;
 8013860:	f8ad 0002 	strh.w	r0, [sp, #2]
            new_cords.y2 = cont->coords.y2;
 8013864:	f8ad 2006 	strh.w	r2, [sp, #6]
        if(cont->coords.x1 != new_cords.x1 ||
 8013868:	d1ce      	bne.n	8013808 <lv_cont_refr_autofit+0x10c>
                cont->coords.y1 != new_cords.y1 ||
 801386a:	f9b5 2014 	ldrsh.w	r2, [r5, #20]
 801386e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8013872:	429a      	cmp	r2, r3
 8013874:	d1c8      	bne.n	8013808 <lv_cont_refr_autofit+0x10c>
 8013876:	e74b      	b.n	8013710 <lv_cont_refr_autofit+0x14>
 8013878:	f9b5 2014 	ldrsh.w	r2, [r5, #20]
 801387c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8013880:	429a      	cmp	r2, r3
 8013882:	d1c1      	bne.n	8013808 <lv_cont_refr_autofit+0x10c>
                cont->coords.x2 != new_cords.x2 ||
 8013884:	f9b5 2016 	ldrsh.w	r2, [r5, #22]
 8013888:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801388c:	429a      	cmp	r2, r3
 801388e:	d1bb      	bne.n	8013808 <lv_cont_refr_autofit+0x10c>
 8013890:	e73e      	b.n	8013710 <lv_cont_refr_autofit+0x14>
 8013892:	bf00      	nop

08013894 <lv_cont_signal>:
{
 8013894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    res = ancestor_signal(cont, sign, param);
 8013896:	4b1e      	ldr	r3, [pc, #120]	; (8013910 <lv_cont_signal+0x7c>)
{
 8013898:	4607      	mov	r7, r0
 801389a:	460d      	mov	r5, r1
 801389c:	4616      	mov	r6, r2
    res = ancestor_signal(cont, sign, param);
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 80138a2:	2801      	cmp	r0, #1
    res = ancestor_signal(cont, sign, param);
 80138a4:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
 80138a6:	d001      	beq.n	80138ac <lv_cont_signal+0x18>
}
 80138a8:	4620      	mov	r0, r4
 80138aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if(sign == LV_SIGNAL_CHILD_CHG) {
 80138ac:	f005 03fd 	and.w	r3, r5, #253	; 0xfd
 80138b0:	2b01      	cmp	r3, #1
 80138b2:	d024      	beq.n	80138fe <lv_cont_signal+0x6a>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 80138b4:	2d02      	cmp	r5, #2
 80138b6:	d00e      	beq.n	80138d6 <lv_cont_signal+0x42>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 80138b8:	2d06      	cmp	r5, #6
 80138ba:	d1f5      	bne.n	80138a8 <lv_cont_signal+0x14>
 80138bc:	1f32      	subs	r2, r6, #4
 80138be:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 80138c0:	f852 1f04 	ldr.w	r1, [r2, #4]!
 80138c4:	b111      	cbz	r1, 80138cc <lv_cont_signal+0x38>
 80138c6:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) {  /*Find the last set data*/
 80138c8:	2b07      	cmp	r3, #7
 80138ca:	d1f9      	bne.n	80138c0 <lv_cont_signal+0x2c>
        buf->type[i] = "lv_cont";
 80138cc:	4a11      	ldr	r2, [pc, #68]	; (8013914 <lv_cont_signal+0x80>)
}
 80138ce:	4620      	mov	r0, r4
        buf->type[i] = "lv_cont";
 80138d0:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
}
 80138d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(lv_obj_get_width(cont) != lv_area_get_width(param) ||
 80138d6:	4638      	mov	r0, r7
 80138d8:	f7f6 f88e 	bl	80099f8 <lv_obj_get_width>
    return area_p->x2 - area_p->x1 + 1;
 80138dc:	88b3      	ldrh	r3, [r6, #4]
 80138de:	8832      	ldrh	r2, [r6, #0]
 80138e0:	3301      	adds	r3, #1
 80138e2:	1a9b      	subs	r3, r3, r2
 80138e4:	b21b      	sxth	r3, r3
 80138e6:	4298      	cmp	r0, r3
 80138e8:	d109      	bne.n	80138fe <lv_cont_signal+0x6a>
                lv_obj_get_height(cont) != lv_area_get_height(param)) {
 80138ea:	4638      	mov	r0, r7
 80138ec:	f7f6 f88a 	bl	8009a04 <lv_obj_get_height>
    return area_p->y2 - area_p->y1 + 1;
 80138f0:	88f3      	ldrh	r3, [r6, #6]
 80138f2:	8872      	ldrh	r2, [r6, #2]
 80138f4:	3301      	adds	r3, #1
 80138f6:	1a9b      	subs	r3, r3, r2
        if(lv_obj_get_width(cont) != lv_area_get_width(param) ||
 80138f8:	b21b      	sxth	r3, r3
 80138fa:	4298      	cmp	r0, r3
 80138fc:	d0d4      	beq.n	80138a8 <lv_cont_signal+0x14>
        lv_cont_refr_layout(cont);
 80138fe:	4638      	mov	r0, r7
 8013900:	f7ff fc20 	bl	8013144 <lv_cont_refr_layout>
        lv_cont_refr_autofit(cont);
 8013904:	4638      	mov	r0, r7
 8013906:	f7ff fef9 	bl	80136fc <lv_cont_refr_autofit>
}
 801390a:	4620      	mov	r0, r4
 801390c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801390e:	bf00      	nop
 8013910:	200174cc 	.word	0x200174cc
 8013914:	0808baa4 	.word	0x0808baa4

08013918 <lv_cont_create>:
{
 8013918:	b570      	push	{r4, r5, r6, lr}
 801391a:	460e      	mov	r6, r1
    lv_obj_t * new_cont = lv_obj_create(par, copy);
 801391c:	f7f5 fb84 	bl	8009028 <lv_obj_create>
    lv_mem_assert(new_cont);
 8013920:	2800      	cmp	r0, #0
 8013922:	d035      	beq.n	8013990 <lv_cont_create+0x78>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_cont);
 8013924:	4c26      	ldr	r4, [pc, #152]	; (80139c0 <lv_cont_create+0xa8>)
 8013926:	4605      	mov	r5, r0
 8013928:	6823      	ldr	r3, [r4, #0]
 801392a:	2b00      	cmp	r3, #0
 801392c:	d040      	beq.n	80139b0 <lv_cont_create+0x98>
    lv_obj_allocate_ext_attr(new_cont, sizeof(lv_cont_ext_t));
 801392e:	2101      	movs	r1, #1
 8013930:	4628      	mov	r0, r5
 8013932:	f7f5 ff15 	bl	8009760 <lv_obj_allocate_ext_attr>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(new_cont);
 8013936:	4628      	mov	r0, r5
 8013938:	f7f6 f984 	bl	8009c44 <lv_obj_get_ext_attr>
    if(ext == NULL) return NULL;
 801393c:	4604      	mov	r4, r0
 801393e:	2800      	cmp	r0, #0
 8013940:	d03a      	beq.n	80139b8 <lv_cont_create+0xa0>
    ext->hor_fit = 0;
 8013942:	7803      	ldrb	r3, [r0, #0]
    lv_obj_set_signal_func(new_cont, lv_cont_signal);
 8013944:	4628      	mov	r0, r5
 8013946:	491f      	ldr	r1, [pc, #124]	; (80139c4 <lv_cont_create+0xac>)
    ext->layout = LV_LAYOUT_OFF;
 8013948:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
 801394c:	f36f 0303 	bfc	r3, #0, #4
 8013950:	7023      	strb	r3, [r4, #0]
    lv_obj_set_signal_func(new_cont, lv_cont_signal);
 8013952:	f7f5 ff01 	bl	8009758 <lv_obj_set_signal_func>
    if(copy == NULL) {
 8013956:	b1e6      	cbz	r6, 8013992 <lv_cont_create+0x7a>
        lv_cont_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8013958:	4630      	mov	r0, r6
 801395a:	f7f6 f973 	bl	8009c44 <lv_obj_get_ext_attr>
 801395e:	4603      	mov	r3, r0
        ext->hor_fit = copy_ext->hor_fit;
 8013960:	7821      	ldrb	r1, [r4, #0]
        lv_obj_refresh_style(new_cont);
 8013962:	4628      	mov	r0, r5
        ext->hor_fit = copy_ext->hor_fit;
 8013964:	781a      	ldrb	r2, [r3, #0]
 8013966:	f3c2 1200 	ubfx	r2, r2, #4, #1
 801396a:	f362 1104 	bfi	r1, r2, #4, #1
 801396e:	7021      	strb	r1, [r4, #0]
        ext->ver_fit = copy_ext->ver_fit;
 8013970:	b2c9      	uxtb	r1, r1
 8013972:	781a      	ldrb	r2, [r3, #0]
 8013974:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8013978:	f362 1145 	bfi	r1, r2, #5, #1
 801397c:	7021      	strb	r1, [r4, #0]
        ext->layout = copy_ext->layout;
 801397e:	781a      	ldrb	r2, [r3, #0]
 8013980:	b2cb      	uxtb	r3, r1
 8013982:	f362 0303 	bfi	r3, r2, #0, #4
 8013986:	7023      	strb	r3, [r4, #0]
        lv_obj_refresh_style(new_cont);
 8013988:	f7f5 fe88 	bl	800969c <lv_obj_refresh_style>
}
 801398c:	4628      	mov	r0, r5
 801398e:	bd70      	pop	{r4, r5, r6, pc}
 8013990:	e7fe      	b.n	8013990 <lv_cont_create+0x78>
        lv_theme_t * th = lv_theme_get_current();
 8013992:	f005 fe41 	bl	8019618 <lv_theme_get_current>
        if(th) {
 8013996:	b128      	cbz	r0, 80139a4 <lv_cont_create+0x8c>
 * @param cont pointer to a container object
 * @param style pointer to the new style
 */
static inline void lv_cont_set_style(lv_obj_t *cont, lv_style_t * style)
{
    lv_obj_set_style(cont, style);
 8013998:	6881      	ldr	r1, [r0, #8]
 801399a:	4628      	mov	r0, r5
 801399c:	f7f5 ffaa 	bl	80098f4 <lv_obj_set_style>
}
 80139a0:	4628      	mov	r0, r5
 80139a2:	bd70      	pop	{r4, r5, r6, pc}
 80139a4:	4628      	mov	r0, r5
 80139a6:	4908      	ldr	r1, [pc, #32]	; (80139c8 <lv_cont_create+0xb0>)
 80139a8:	f7f5 ffa4 	bl	80098f4 <lv_obj_set_style>
 80139ac:	4628      	mov	r0, r5
 80139ae:	bd70      	pop	{r4, r5, r6, pc}
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_cont);
 80139b0:	f7f6 f944 	bl	8009c3c <lv_obj_get_signal_func>
 80139b4:	6020      	str	r0, [r4, #0]
 80139b6:	e7ba      	b.n	801392e <lv_cont_create+0x16>
    if(ext == NULL) return NULL;
 80139b8:	4605      	mov	r5, r0
}
 80139ba:	4628      	mov	r0, r5
 80139bc:	bd70      	pop	{r4, r5, r6, pc}
 80139be:	bf00      	nop
 80139c0:	200174cc 	.word	0x200174cc
 80139c4:	08013895 	.word	0x08013895
 80139c8:	20017d60 	.word	0x20017d60

080139cc <lv_cont_set_layout>:
{
 80139cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139d0:	460d      	mov	r5, r1
 80139d2:	4606      	mov	r6, r0
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 80139d4:	f7f6 f936 	bl	8009c44 <lv_obj_get_ext_attr>
    if(ext->layout == layout) return;
 80139d8:	7803      	ldrb	r3, [r0, #0]
 80139da:	f003 020f 	and.w	r2, r3, #15
 80139de:	42aa      	cmp	r2, r5
 80139e0:	d00b      	beq.n	80139fa <lv_cont_set_layout+0x2e>
 80139e2:	4604      	mov	r4, r0
    cont->signal_func(cont, LV_SIGNAL_CHILD_CHG, NULL);
 80139e4:	69b7      	ldr	r7, [r6, #24]
    ext->layout = layout;
 80139e6:	f365 0303 	bfi	r3, r5, #0, #4
    cont->signal_func(cont, LV_SIGNAL_CHILD_CHG, NULL);
 80139ea:	4630      	mov	r0, r6
 80139ec:	2200      	movs	r2, #0
 80139ee:	2101      	movs	r1, #1
    ext->layout = layout;
 80139f0:	7023      	strb	r3, [r4, #0]
    cont->signal_func(cont, LV_SIGNAL_CHILD_CHG, NULL);
 80139f2:	463b      	mov	r3, r7
}
 80139f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cont->signal_func(cont, LV_SIGNAL_CHILD_CHG, NULL);
 80139f8:	4718      	bx	r3
 80139fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139fe:	bf00      	nop

08013a00 <lv_cont_set_fit>:
{
 8013a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a04:	4605      	mov	r5, r0
 8013a06:	460e      	mov	r6, r1
 8013a08:	4617      	mov	r7, r2
    lv_obj_invalidate(cont);
 8013a0a:	f7f5 fa15 	bl	8008e38 <lv_obj_invalidate>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8013a0e:	4628      	mov	r0, r5
 8013a10:	f7f6 f918 	bl	8009c44 <lv_obj_get_ext_attr>
    if(ext->hor_fit == hor_en && ext->ver_fit == ver_en) return;
 8013a14:	7803      	ldrb	r3, [r0, #0]
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8013a16:	4604      	mov	r4, r0
    if(ext->hor_fit == hor_en && ext->ver_fit == ver_en) return;
 8013a18:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8013a1c:	42b2      	cmp	r2, r6
 8013a1e:	d00d      	beq.n	8013a3c <lv_cont_set_fit+0x3c>
    ext->hor_fit = hor_en == false ? 0 : 1;
 8013a20:	7823      	ldrb	r3, [r4, #0]
    cont->signal_func(cont, LV_SIGNAL_CHILD_CHG, NULL);
 8013a22:	4628      	mov	r0, r5
 8013a24:	69ad      	ldr	r5, [r5, #24]
 8013a26:	2200      	movs	r2, #0
    ext->hor_fit = hor_en == false ? 0 : 1;
 8013a28:	f366 1304 	bfi	r3, r6, #4, #1
    cont->signal_func(cont, LV_SIGNAL_CHILD_CHG, NULL);
 8013a2c:	2101      	movs	r1, #1
    ext->ver_fit = ver_en == false ? 0 : 1;
 8013a2e:	f367 1345 	bfi	r3, r7, #5, #1
 8013a32:	7023      	strb	r3, [r4, #0]
    cont->signal_func(cont, LV_SIGNAL_CHILD_CHG, NULL);
 8013a34:	462b      	mov	r3, r5
}
 8013a36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cont->signal_func(cont, LV_SIGNAL_CHILD_CHG, NULL);
 8013a3a:	4718      	bx	r3
    if(ext->hor_fit == hor_en && ext->ver_fit == ver_en) return;
 8013a3c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8013a40:	42bb      	cmp	r3, r7
 8013a42:	d1ed      	bne.n	8013a20 <lv_cont_set_fit+0x20>
 8013a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013a48 <lv_cont_get_hor_fit>:
{
 8013a48:	b508      	push	{r3, lr}
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8013a4a:	f7f6 f8fb 	bl	8009c44 <lv_obj_get_ext_attr>
    return ext->hor_fit == 0 ? false : true;
 8013a4e:	7800      	ldrb	r0, [r0, #0]
}
 8013a50:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8013a54:	bd08      	pop	{r3, pc}
 8013a56:	bf00      	nop

08013a58 <lv_img_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_img_design(lv_obj_t * img, const lv_area_t * mask, lv_design_mode_t mode)
{
 8013a58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013a5c:	4680      	mov	r8, r0
 8013a5e:	4691      	mov	r9, r2
 8013a60:	b099      	sub	sp, #100	; 0x64
 8013a62:	460d      	mov	r5, r1
    lv_style_t * style = lv_obj_get_style(img);
 8013a64:	f7f5 ffd4 	bl	8009a10 <lv_obj_get_style>
 8013a68:	4606      	mov	r6, r0
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 8013a6a:	4640      	mov	r0, r8
 8013a6c:	f7f6 f8ea 	bl	8009c44 <lv_obj_get_ext_attr>

    if(mode == LV_DESIGN_COVER_CHK) {
 8013a70:	f1b9 0f02 	cmp.w	r9, #2
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 8013a74:	4604      	mov	r4, r0
    if(mode == LV_DESIGN_COVER_CHK) {
 8013a76:	d00c      	beq.n	8013a92 <lv_img_design+0x3a>
        if(ext->src_type == LV_IMG_SRC_UNKNOWN || ext->src_type == LV_IMG_SRC_SYMBOL) return false;

        if(ext->cf == LV_IMG_CF_TRUE_COLOR || ext->cf == LV_IMG_CF_RAW) cover = lv_area_is_in(mask, &img->coords);

        return cover;
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 8013a78:	f1b9 0f00 	cmp.w	r9, #0
 8013a7c:	d105      	bne.n	8013a8a <lv_img_design+0x32>
        if(ext->h == 0 || ext->w == 0) return true;
 8013a7e:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8013a82:	b113      	cbz	r3, 8013a8a <lv_img_design+0x32>
 8013a84:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013a88:	b9c3      	cbnz	r3, 8013abc <lv_img_design+0x64>
            LV_LOG_WARN("lv_img_design: image source type is unknown");
            lv_draw_img(&img->coords, mask, NULL, style, opa_scale);
        }
    }

    return true;
 8013a8a:	2001      	movs	r0, #1
}
 8013a8c:	b019      	add	sp, #100	; 0x64
 8013a8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if(ext->src_type == LV_IMG_SRC_UNKNOWN || ext->src_type == LV_IMG_SRC_SYMBOL) return false;
 8013a92:	7a00      	ldrb	r0, [r0, #8]
 8013a94:	f000 0303 	and.w	r3, r0, #3
 8013a98:	3b02      	subs	r3, #2
 8013a9a:	2b01      	cmp	r3, #1
 8013a9c:	d926      	bls.n	8013aec <lv_img_design+0x94>
        if(ext->cf == LV_IMG_CF_TRUE_COLOR || ext->cf == LV_IMG_CF_RAW) cover = lv_area_is_in(mask, &img->coords);
 8013a9e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8013aa2:	2808      	cmp	r0, #8
 8013aa4:	bf18      	it	ne
 8013aa6:	2820      	cmpne	r0, #32
 8013aa8:	bf0c      	ite	eq
 8013aaa:	2001      	moveq	r0, #1
 8013aac:	2000      	movne	r0, #0
 8013aae:	d1ed      	bne.n	8013a8c <lv_img_design+0x34>
 8013ab0:	f108 0110 	add.w	r1, r8, #16
 8013ab4:	4628      	mov	r0, r5
 8013ab6:	f7fb ffef 	bl	800fa98 <lv_area_is_in>
 8013aba:	e7e7      	b.n	8013a8c <lv_img_design+0x34>
        lv_opa_t opa_scale = lv_obj_get_opa_scale(img);
 8013abc:	4640      	mov	r0, r8
 8013abe:	f7f6 f8a1 	bl	8009c04 <lv_obj_get_opa_scale>
        lv_obj_get_coords(img, &coords);
 8013ac2:	a904      	add	r1, sp, #16
        lv_opa_t opa_scale = lv_obj_get_opa_scale(img);
 8013ac4:	4607      	mov	r7, r0
        lv_obj_get_coords(img, &coords);
 8013ac6:	4640      	mov	r0, r8
 8013ac8:	f7f5 ff84 	bl	80099d4 <lv_obj_get_coords>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_VARIABLE) {
 8013acc:	7a23      	ldrb	r3, [r4, #8]
 8013ace:	f003 0303 	and.w	r3, r3, #3
 8013ad2:	2b01      	cmp	r3, #1
 8013ad4:	d90c      	bls.n	8013af0 <lv_img_design+0x98>
        } else if(ext->src_type == LV_IMG_SRC_SYMBOL) {
 8013ad6:	2b02      	cmp	r3, #2
 8013ad8:	d04d      	beq.n	8013b76 <lv_img_design+0x11e>
            lv_draw_img(&img->coords, mask, NULL, style, opa_scale);
 8013ada:	9700      	str	r7, [sp, #0]
 8013adc:	4633      	mov	r3, r6
 8013ade:	464a      	mov	r2, r9
 8013ae0:	4629      	mov	r1, r5
 8013ae2:	f108 0010 	add.w	r0, r8, #16
 8013ae6:	f7f6 febf 	bl	800a868 <lv_draw_img>
 8013aea:	e7ce      	b.n	8013a8a <lv_img_design+0x32>
        if(ext->src_type == LV_IMG_SRC_UNKNOWN || ext->src_type == LV_IMG_SRC_SYMBOL) return false;
 8013aec:	2000      	movs	r0, #0
 8013aee:	e7cd      	b.n	8013a8c <lv_img_design+0x34>
            cords_tmp.y1 = coords.y1;
 8013af0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
            cords_tmp.y2 = coords.y1 + ext->h - 1;
 8013af4:	88e1      	ldrh	r1, [r4, #6]
 8013af6:	1e5a      	subs	r2, r3, #1
            for(; cords_tmp.y1 < coords.y2; cords_tmp.y1 += ext->h, cords_tmp.y2 += ext->h) {
 8013af8:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
            cords_tmp.y1 = coords.y1;
 8013afc:	f8ad 301a 	strh.w	r3, [sp, #26]
            cords_tmp.y2 = coords.y1 + ext->h - 1;
 8013b00:	440a      	add	r2, r1
            for(; cords_tmp.y1 < coords.y2; cords_tmp.y1 += ext->h, cords_tmp.y2 += ext->h) {
 8013b02:	4298      	cmp	r0, r3
            cords_tmp.y2 = coords.y1 + ext->h - 1;
 8013b04:	f8ad 201e 	strh.w	r2, [sp, #30]
            for(; cords_tmp.y1 < coords.y2; cords_tmp.y1 += ext->h, cords_tmp.y2 += ext->h) {
 8013b08:	ddbf      	ble.n	8013a8a <lv_img_design+0x32>
 8013b0a:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
                cords_tmp.x1 = coords.x1;
 8013b0e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
                cords_tmp.x2 = coords.x1 + ext->w - 1;
 8013b12:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 8013b16:	1e5a      	subs	r2, r3, #1
                for(; cords_tmp.x1 < coords.x2; cords_tmp.x1 += ext->w, cords_tmp.x2 += ext->w) {
 8013b18:	4299      	cmp	r1, r3
                cords_tmp.x1 = coords.x1;
 8013b1a:	f8ad 3018 	strh.w	r3, [sp, #24]
                cords_tmp.x2 = coords.x1 + ext->w - 1;
 8013b1e:	4472      	add	r2, lr
 8013b20:	f8ad 201c 	strh.w	r2, [sp, #28]
                for(; cords_tmp.x1 < coords.x2; cords_tmp.x1 += ext->w, cords_tmp.x2 += ext->w) {
 8013b24:	dd18      	ble.n	8013b58 <lv_img_design+0x100>
                    lv_draw_img(&cords_tmp, mask, ext->src, style, opa_scale);
 8013b26:	6822      	ldr	r2, [r4, #0]
 8013b28:	4633      	mov	r3, r6
 8013b2a:	4629      	mov	r1, r5
 8013b2c:	a806      	add	r0, sp, #24
 8013b2e:	9700      	str	r7, [sp, #0]
 8013b30:	f7f6 fe9a 	bl	800a868 <lv_draw_img>
                for(; cords_tmp.x1 < coords.x2; cords_tmp.x1 += ext->w, cords_tmp.x2 += ext->w) {
 8013b34:	88a2      	ldrh	r2, [r4, #4]
 8013b36:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8013b3a:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 8013b3e:	4413      	add	r3, r2
 8013b40:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
 8013b44:	4402      	add	r2, r0
 8013b46:	b21b      	sxth	r3, r3
 8013b48:	f8ad 201c 	strh.w	r2, [sp, #28]
 8013b4c:	4299      	cmp	r1, r3
 8013b4e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013b52:	dce8      	bgt.n	8013b26 <lv_img_design+0xce>
 8013b54:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
            for(; cords_tmp.y1 < coords.y2; cords_tmp.y1 += ext->h, cords_tmp.y2 += ext->h) {
 8013b58:	88e2      	ldrh	r2, [r4, #6]
 8013b5a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8013b5e:	f8bd e01e 	ldrh.w	lr, [sp, #30]
 8013b62:	4413      	add	r3, r2
 8013b64:	4472      	add	r2, lr
 8013b66:	b21b      	sxth	r3, r3
 8013b68:	f8ad 201e 	strh.w	r2, [sp, #30]
 8013b6c:	4298      	cmp	r0, r3
 8013b6e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013b72:	dccc      	bgt.n	8013b0e <lv_img_design+0xb6>
 8013b74:	e789      	b.n	8013a8a <lv_img_design+0x32>
            lv_style_copy(&style_mod, style);
 8013b76:	4631      	mov	r1, r6
 8013b78:	a806      	add	r0, sp, #24
 8013b7a:	f7f6 fd43 	bl	800a604 <lv_style_copy>
            style_mod.text.color = style->image.color;
 8013b7e:	6bb6      	ldr	r6, [r6, #56]	; 0x38
            lv_draw_label(&coords, mask, &style_mod, opa_scale, ext->src, LV_TXT_FLAG_NONE, NULL);
 8013b80:	f8cd 9008 	str.w	r9, [sp, #8]
 8013b84:	aa06      	add	r2, sp, #24
 8013b86:	f8cd 9004 	str.w	r9, [sp, #4]
 8013b8a:	463b      	mov	r3, r7
 8013b8c:	6824      	ldr	r4, [r4, #0]
 8013b8e:	4629      	mov	r1, r5
 8013b90:	a804      	add	r0, sp, #16
            style_mod.text.color = style->image.color;
 8013b92:	9610      	str	r6, [sp, #64]	; 0x40
            lv_draw_label(&coords, mask, &style_mod, opa_scale, ext->src, LV_TXT_FLAG_NONE, NULL);
 8013b94:	9400      	str	r4, [sp, #0]
 8013b96:	f7f7 f823 	bl	800abe0 <lv_draw_label>
 8013b9a:	e776      	b.n	8013a8a <lv_img_design+0x32>

08013b9c <lv_img_set_src>:
{
 8013b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ba0:	4606      	mov	r6, r0
 8013ba2:	b086      	sub	sp, #24
    lv_img_src_t src_type = lv_img_src_get_type(src_img);
 8013ba4:	4608      	mov	r0, r1
{
 8013ba6:	460d      	mov	r5, r1
    lv_img_src_t src_type = lv_img_src_get_type(src_img);
 8013ba8:	f7f6 fffa 	bl	800aba0 <lv_img_src_get_type>
 8013bac:	4607      	mov	r7, r0
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 8013bae:	4630      	mov	r0, r6
 8013bb0:	f7f6 f848 	bl	8009c44 <lv_obj_get_ext_attr>
    if(src_type == LV_IMG_SRC_UNKNOWN) {
 8013bb4:	2f03      	cmp	r7, #3
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 8013bb6:	4604      	mov	r4, r0
    if(src_type == LV_IMG_SRC_UNKNOWN) {
 8013bb8:	d035      	beq.n	8013c26 <lv_img_set_src+0x8a>
    lv_img_dsc_get_info(src_img, &header);
 8013bba:	a904      	add	r1, sp, #16
 8013bbc:	4628      	mov	r0, r5
 8013bbe:	f7f6 fde9 	bl	800a794 <lv_img_dsc_get_info>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8013bc2:	bb27      	cbnz	r7, 8013c0e <lv_img_set_src+0x72>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 8013bc4:	7a23      	ldrb	r3, [r4, #8]
 8013bc6:	f003 0303 	and.w	r3, r3, #3
 8013bca:	3b01      	subs	r3, #1
 8013bcc:	2b01      	cmp	r3, #1
 8013bce:	f240 8085 	bls.w	8013cdc <lv_img_set_src+0x140>
 8013bd2:	9904      	ldr	r1, [sp, #16]
 8013bd4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8013bd8:	f3c1 218a 	ubfx	r1, r1, #10, #11
        ext->src = src_img;
 8013bdc:	6025      	str	r5, [r4, #0]
 8013bde:	f3c2 124a 	ubfx	r2, r2, #5, #11
    ext->src_type = src_type;
 8013be2:	7a23      	ldrb	r3, [r4, #8]
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 8013be4:	4630      	mov	r0, r6
    ext->w = header.w;
 8013be6:	80a1      	strh	r1, [r4, #4]
    ext->src_type = src_type;
 8013be8:	f367 0301 	bfi	r3, r7, #0, #2
    ext->cf = header.cf;
 8013bec:	f89d 1010 	ldrb.w	r1, [sp, #16]
    ext->h = header.h;
 8013bf0:	80e2      	strh	r2, [r4, #6]
    ext->cf = header.cf;
 8013bf2:	f361 03c7 	bfi	r3, r1, #3, #5
 8013bf6:	7223      	strb	r3, [r4, #8]
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 8013bf8:	f7f6 f824 	bl	8009c44 <lv_obj_get_ext_attr>
    return ext->auto_size == 0 ? false : true;
 8013bfc:	7a03      	ldrb	r3, [r0, #8]
    if(lv_img_get_auto_size(img) != false) {
 8013bfe:	075b      	lsls	r3, r3, #29
 8013c00:	d460      	bmi.n	8013cc4 <lv_img_set_src+0x128>
    lv_obj_invalidate(img);
 8013c02:	4630      	mov	r0, r6
 8013c04:	f7f5 f918 	bl	8008e38 <lv_obj_invalidate>
}
 8013c08:	b006      	add	sp, #24
 8013c0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_SYMBOL) {
 8013c0e:	1e7b      	subs	r3, r7, #1
 8013c10:	b2db      	uxtb	r3, r3
 8013c12:	2b01      	cmp	r3, #1
 8013c14:	d916      	bls.n	8013c44 <lv_img_set_src+0xa8>
 8013c16:	9904      	ldr	r1, [sp, #16]
 8013c18:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8013c1c:	f3c1 218a 	ubfx	r1, r1, #10, #11
 8013c20:	f3c2 124a 	ubfx	r2, r2, #5, #11
 8013c24:	e7dd      	b.n	8013be2 <lv_img_set_src+0x46>
        if(ext->src_type == LV_IMG_SRC_SYMBOL || ext->src_type == LV_IMG_SRC_FILE) {
 8013c26:	7a03      	ldrb	r3, [r0, #8]
 8013c28:	f003 0303 	and.w	r3, r3, #3
 8013c2c:	3b01      	subs	r3, #1
 8013c2e:	2b01      	cmp	r3, #1
 8013c30:	d950      	bls.n	8013cd4 <lv_img_set_src+0x138>
        ext->src_type = LV_IMG_SRC_UNKNOWN;
 8013c32:	7a23      	ldrb	r3, [r4, #8]
        ext->src = NULL;
 8013c34:	2200      	movs	r2, #0
        ext->src_type = LV_IMG_SRC_UNKNOWN;
 8013c36:	f043 0303 	orr.w	r3, r3, #3
        ext->src = NULL;
 8013c3a:	6022      	str	r2, [r4, #0]
        ext->src_type = LV_IMG_SRC_UNKNOWN;
 8013c3c:	7223      	strb	r3, [r4, #8]
}
 8013c3e:	b006      	add	sp, #24
 8013c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(ext->src != src_img) {
 8013c44:	6820      	ldr	r0, [r4, #0]
 8013c46:	4285      	cmp	r5, r0
 8013c48:	d012      	beq.n	8013c70 <lv_img_set_src+0xd4>
            if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 8013c4a:	7a23      	ldrb	r3, [r4, #8]
 8013c4c:	f003 0303 	and.w	r3, r3, #3
 8013c50:	3b01      	subs	r3, #1
 8013c52:	2b01      	cmp	r3, #1
 8013c54:	d946      	bls.n	8013ce4 <lv_img_set_src+0x148>
        	char * new_str = lv_mem_alloc(strlen(src_img) + 1);
 8013c56:	4628      	mov	r0, r5
 8013c58:	f7ec fae0 	bl	800021c <strlen>
 8013c5c:	3001      	adds	r0, #1
 8013c5e:	f7fc fa0b 	bl	8010078 <lv_mem_alloc>
            lv_mem_assert(new_str);
 8013c62:	4680      	mov	r8, r0
 8013c64:	b368      	cbz	r0, 8013cc2 <lv_img_set_src+0x126>
            strcpy(new_str, src_img);
 8013c66:	4629      	mov	r1, r5
 8013c68:	f005 fd3d 	bl	80196e6 <strcpy>
            ext->src = new_str;
 8013c6c:	f8c4 8000 	str.w	r8, [r4]
    if(src_type == LV_IMG_SRC_SYMBOL) {
 8013c70:	2f02      	cmp	r7, #2
 8013c72:	d1d0      	bne.n	8013c16 <lv_img_set_src+0x7a>
 * @param img pointer to an image object
 * @return pointer to the image's style
 */
static inline lv_style_t* lv_img_get_style(const lv_obj_t *img)
{
    return lv_obj_get_style(img);
 8013c74:	4630      	mov	r0, r6
 8013c76:	f7f5 fecb 	bl	8009a10 <lv_obj_get_style>
        lv_txt_get_size(&size, src_img, style->text.font, style->text.letter_space, style->text.line_space, LV_COORD_MAX, LV_TXT_FLAG_NONE);
 8013c7a:	f04f 0c00 	mov.w	ip, #0
 8013c7e:	f643 7eff 	movw	lr, #16383	; 0x3fff
 8013c82:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	; 0x30
 8013c86:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8013c88:	4629      	mov	r1, r5
 8013c8a:	f8cd c008 	str.w	ip, [sp, #8]
 8013c8e:	f8cd e004 	str.w	lr, [sp, #4]
 8013c92:	f9b0 5032 	ldrsh.w	r5, [r0, #50]	; 0x32
 8013c96:	a805      	add	r0, sp, #20
 8013c98:	9500      	str	r5, [sp, #0]
 8013c9a:	f7fc ff09 	bl	8010ab0 <lv_txt_get_size>
        header.w = size.x;
 8013c9e:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8013ca2:	9b04      	ldr	r3, [sp, #16]
 8013ca4:	f3c1 010a 	ubfx	r1, r1, #0, #11
        header.h = size.y;
 8013ca8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
        header.w = size.x;
 8013cac:	f361 2394 	bfi	r3, r1, #10, #11
        header.h = size.y;
 8013cb0:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8013cb4:	0c18      	lsrs	r0, r3, #16
        header.w = size.x;
 8013cb6:	9304      	str	r3, [sp, #16]
        header.h = size.y;
 8013cb8:	f362 104f 	bfi	r0, r2, #5, #11
 8013cbc:	f8ad 0012 	strh.w	r0, [sp, #18]
 8013cc0:	e78f      	b.n	8013be2 <lv_img_set_src+0x46>
 8013cc2:	e7fe      	b.n	8013cc2 <lv_img_set_src+0x126>
        lv_obj_set_size(img, ext->w, ext->h);
 8013cc4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8013cc8:	4630      	mov	r0, r6
 8013cca:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8013cce:	f7f5 faed 	bl	80092ac <lv_obj_set_size>
 8013cd2:	e796      	b.n	8013c02 <lv_img_set_src+0x66>
            lv_mem_free(ext->src);
 8013cd4:	6800      	ldr	r0, [r0, #0]
 8013cd6:	f7fc f9d7 	bl	8010088 <lv_mem_free>
 8013cda:	e7aa      	b.n	8013c32 <lv_img_set_src+0x96>
            lv_mem_free(ext->src);
 8013cdc:	6820      	ldr	r0, [r4, #0]
 8013cde:	f7fc f9d3 	bl	8010088 <lv_mem_free>
 8013ce2:	e776      	b.n	8013bd2 <lv_img_set_src+0x36>
                lv_mem_free(ext->src);
 8013ce4:	f7fc f9d0 	bl	8010088 <lv_mem_free>
 8013ce8:	e7b5      	b.n	8013c56 <lv_img_set_src+0xba>
 8013cea:	bf00      	nop

08013cec <lv_img_create>:
{
 8013cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cee:	4607      	mov	r7, r0
 8013cf0:	460e      	mov	r6, r1
    new_img = lv_obj_create(par, copy);
 8013cf2:	f7f5 f999 	bl	8009028 <lv_obj_create>
    lv_mem_assert(new_img);
 8013cf6:	2800      	cmp	r0, #0
 8013cf8:	d03c      	beq.n	8013d74 <lv_img_create+0x88>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_img);
 8013cfa:	4c2d      	ldr	r4, [pc, #180]	; (8013db0 <lv_img_create+0xc4>)
 8013cfc:	4605      	mov	r5, r0
 8013cfe:	6823      	ldr	r3, [r4, #0]
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d038      	beq.n	8013d76 <lv_img_create+0x8a>
    lv_img_ext_t * ext = lv_obj_allocate_ext_attr(new_img, sizeof(lv_img_ext_t));
 8013d04:	210c      	movs	r1, #12
 8013d06:	4628      	mov	r0, r5
 8013d08:	f7f5 fd2a 	bl	8009760 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 8013d0c:	4604      	mov	r4, r0
 8013d0e:	b380      	cbz	r0, 8013d72 <lv_img_create+0x86>
    ext->src_type = LV_IMG_SRC_UNKNOWN;
 8013d10:	7a03      	ldrb	r3, [r0, #8]
    ext->src = NULL;
 8013d12:	2200      	movs	r2, #0
    ext->w = lv_obj_get_width(new_img);
 8013d14:	4628      	mov	r0, r5
    ext->cf = LV_IMG_CF_UNKOWN;
 8013d16:	f043 0303 	orr.w	r3, r3, #3
    ext->src = NULL;
 8013d1a:	6022      	str	r2, [r4, #0]
    ext->cf = LV_IMG_CF_UNKOWN;
 8013d1c:	f362 03c7 	bfi	r3, r2, #3, #5
 8013d20:	7223      	strb	r3, [r4, #8]
    ext->w = lv_obj_get_width(new_img);
 8013d22:	f7f5 fe69 	bl	80099f8 <lv_obj_get_width>
 8013d26:	80a0      	strh	r0, [r4, #4]
    ext->h = lv_obj_get_height(new_img);
 8013d28:	4628      	mov	r0, r5
 8013d2a:	f7f5 fe6b 	bl	8009a04 <lv_obj_get_height>
    ext->auto_size = 1;
 8013d2e:	7a23      	ldrb	r3, [r4, #8]
    ext->h = lv_obj_get_height(new_img);
 8013d30:	80e0      	strh	r0, [r4, #6]
    lv_obj_set_signal_func(new_img, lv_img_signal);
 8013d32:	4628      	mov	r0, r5
    ext->auto_size = 1;
 8013d34:	f043 0304 	orr.w	r3, r3, #4
    lv_obj_set_signal_func(new_img, lv_img_signal);
 8013d38:	491e      	ldr	r1, [pc, #120]	; (8013db4 <lv_img_create+0xc8>)
    ext->auto_size = 1;
 8013d3a:	7223      	strb	r3, [r4, #8]
    lv_obj_set_signal_func(new_img, lv_img_signal);
 8013d3c:	f7f5 fd0c 	bl	8009758 <lv_obj_set_signal_func>
    lv_obj_set_design_func(new_img, lv_img_design);
 8013d40:	491d      	ldr	r1, [pc, #116]	; (8013db8 <lv_img_create+0xcc>)
 8013d42:	4628      	mov	r0, r5
 8013d44:	f7f5 fd0a 	bl	800975c <lv_obj_set_design_func>
    if(copy == NULL) {
 8013d48:	b1ce      	cbz	r6, 8013d7e <lv_img_create+0x92>
        lv_img_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8013d4a:	4630      	mov	r0, r6
 8013d4c:	f7f5 ff7a 	bl	8009c44 <lv_obj_get_ext_attr>
 8013d50:	4602      	mov	r2, r0
        ext->auto_size = copy_ext->auto_size;
 8013d52:	7a21      	ldrb	r1, [r4, #8]
        lv_img_set_src(new_img, copy_ext->src);
 8013d54:	4628      	mov	r0, r5
        ext->auto_size = copy_ext->auto_size;
 8013d56:	7a13      	ldrb	r3, [r2, #8]
 8013d58:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8013d5c:	f363 0182 	bfi	r1, r3, #2, #1
 8013d60:	7221      	strb	r1, [r4, #8]
        lv_img_set_src(new_img, copy_ext->src);
 8013d62:	6811      	ldr	r1, [r2, #0]
 8013d64:	f7ff ff1a 	bl	8013b9c <lv_img_set_src>
        lv_obj_refresh_style(new_img);
 8013d68:	4628      	mov	r0, r5
 8013d6a:	f7f5 fc97 	bl	800969c <lv_obj_refresh_style>
}
 8013d6e:	4628      	mov	r0, r5
 8013d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d72:	e7fe      	b.n	8013d72 <lv_img_create+0x86>
 8013d74:	e7fe      	b.n	8013d74 <lv_img_create+0x88>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_img);
 8013d76:	f7f5 ff61 	bl	8009c3c <lv_obj_get_signal_func>
 8013d7a:	6020      	str	r0, [r4, #0]
 8013d7c:	e7c2      	b.n	8013d04 <lv_img_create+0x18>
        lv_obj_set_click(new_img, false);
 8013d7e:	4631      	mov	r1, r6
 8013d80:	4628      	mov	r0, r5
 8013d82:	f7f5 fcb5 	bl	80096f0 <lv_obj_set_click>
            ext->auto_size = 1;
 8013d86:	7a23      	ldrb	r3, [r4, #8]
        if(par != NULL) {
 8013d88:	b147      	cbz	r7, 8013d9c <lv_img_create+0xb0>
            ext->auto_size = 1;
 8013d8a:	f043 0304 	orr.w	r3, r3, #4
            lv_obj_set_style(new_img, NULL);                        /*Inherit the style  by default*/
 8013d8e:	4628      	mov	r0, r5
 8013d90:	4631      	mov	r1, r6
            ext->auto_size = 1;
 8013d92:	7223      	strb	r3, [r4, #8]
            lv_obj_set_style(new_img, NULL);                        /*Inherit the style  by default*/
 8013d94:	f7f5 fdae 	bl	80098f4 <lv_obj_set_style>
}
 8013d98:	4628      	mov	r0, r5
 8013d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            ext->auto_size = 0;
 8013d9c:	f367 0382 	bfi	r3, r7, #2, #1
            lv_obj_set_style(new_img, &lv_style_plain);            /*Set a style for screens*/
 8013da0:	4628      	mov	r0, r5
 8013da2:	4906      	ldr	r1, [pc, #24]	; (8013dbc <lv_img_create+0xd0>)
            ext->auto_size = 0;
 8013da4:	7223      	strb	r3, [r4, #8]
            lv_obj_set_style(new_img, &lv_style_plain);            /*Set a style for screens*/
 8013da6:	f7f5 fda5 	bl	80098f4 <lv_obj_set_style>
}
 8013daa:	4628      	mov	r0, r5
 8013dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013dae:	bf00      	nop
 8013db0:	200174d0 	.word	0x200174d0
 8013db4:	08013dc1 	.word	0x08013dc1
 8013db8:	08013a59 	.word	0x08013a59
 8013dbc:	20017e80 	.word	0x20017e80

08013dc0 <lv_img_signal>:
static lv_res_t lv_img_signal(lv_obj_t * img, lv_signal_t sign, void * param)
{
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(img, sign, param);
 8013dc0:	4b1f      	ldr	r3, [pc, #124]	; (8013e40 <lv_img_signal+0x80>)
{
 8013dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = ancestor_signal(img, sign, param);
 8013dc6:	681b      	ldr	r3, [r3, #0]
{
 8013dc8:	4606      	mov	r6, r0
 8013dca:	460d      	mov	r5, r1
 8013dcc:	4617      	mov	r7, r2
    res = ancestor_signal(img, sign, param);
 8013dce:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8013dd0:	2801      	cmp	r0, #1
    res = ancestor_signal(img, sign, param);
 8013dd2:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
 8013dd4:	d002      	beq.n	8013ddc <lv_img_signal+0x1c>
        }
        buf->type[i] = "lv_img";
    }

    return res;
}
 8013dd6:	4620      	mov	r0, r4
 8013dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 8013ddc:	4630      	mov	r0, r6
 8013dde:	f7f5 ff31 	bl	8009c44 <lv_obj_get_ext_attr>
 8013de2:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CLEANUP) {
 8013de4:	b98d      	cbnz	r5, 8013e0a <lv_img_signal+0x4a>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 8013de6:	7a03      	ldrb	r3, [r0, #8]
 8013de8:	f003 0303 	and.w	r3, r3, #3
 8013dec:	3b01      	subs	r3, #1
 8013dee:	2b01      	cmp	r3, #1
 8013df0:	d8f1      	bhi.n	8013dd6 <lv_img_signal+0x16>
            lv_mem_free(ext->src);
 8013df2:	6800      	ldr	r0, [r0, #0]
 8013df4:	f7fc f948 	bl	8010088 <lv_mem_free>
            ext->src_type = LV_IMG_SRC_UNKNOWN;
 8013df8:	f898 3008 	ldrb.w	r3, [r8, #8]
            ext->src = NULL;
 8013dfc:	f8c8 5000 	str.w	r5, [r8]
            ext->src_type = LV_IMG_SRC_UNKNOWN;
 8013e00:	f043 0303 	orr.w	r3, r3, #3
 8013e04:	f888 3008 	strb.w	r3, [r8, #8]
 8013e08:	e7e5      	b.n	8013dd6 <lv_img_signal+0x16>
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 8013e0a:	2d03      	cmp	r5, #3
 8013e0c:	d00d      	beq.n	8013e2a <lv_img_signal+0x6a>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8013e0e:	2d06      	cmp	r5, #6
 8013e10:	d1e1      	bne.n	8013dd6 <lv_img_signal+0x16>
 8013e12:	1f3a      	subs	r2, r7, #4
 8013e14:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 8013e16:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8013e1a:	b111      	cbz	r1, 8013e22 <lv_img_signal+0x62>
 8013e1c:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) {  /*Find the last set data*/
 8013e1e:	2b07      	cmp	r3, #7
 8013e20:	d1f9      	bne.n	8013e16 <lv_img_signal+0x56>
        buf->type[i] = "lv_img";
 8013e22:	4a08      	ldr	r2, [pc, #32]	; (8013e44 <lv_img_signal+0x84>)
 8013e24:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 8013e28:	e7d5      	b.n	8013dd6 <lv_img_signal+0x16>
        if(ext->src_type == LV_IMG_SRC_SYMBOL) {
 8013e2a:	7a03      	ldrb	r3, [r0, #8]
 8013e2c:	f003 0303 	and.w	r3, r3, #3
 8013e30:	2b02      	cmp	r3, #2
 8013e32:	d1d0      	bne.n	8013dd6 <lv_img_signal+0x16>
            lv_img_set_src(img, ext->src);
 8013e34:	6801      	ldr	r1, [r0, #0]
 8013e36:	4630      	mov	r0, r6
 8013e38:	f7ff feb0 	bl	8013b9c <lv_img_set_src>
 8013e3c:	e7cb      	b.n	8013dd6 <lv_img_signal+0x16>
 8013e3e:	bf00      	nop
 8013e40:	200174d0 	.word	0x200174d0
 8013e44:	0808baac 	.word	0x0808baac

08013e48 <lv_img_get_src>:
{
 8013e48:	b508      	push	{r3, lr}
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 8013e4a:	f7f5 fefb 	bl	8009c44 <lv_obj_get_ext_attr>
}
 8013e4e:	6800      	ldr	r0, [r0, #0]
 8013e50:	bd08      	pop	{r3, pc}
 8013e52:	bf00      	nop

08013e54 <lv_kb_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_kb_signal(lv_obj_t * kb, lv_signal_t sign, void * param)
{
 8013e54:	b538      	push	{r3, r4, r5, lr}
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(kb, sign, param);
 8013e56:	4b0d      	ldr	r3, [pc, #52]	; (8013e8c <lv_kb_signal+0x38>)
{
 8013e58:	460c      	mov	r4, r1
 8013e5a:	4615      	mov	r5, r2
    res = ancestor_signal(kb, sign, param);
 8013e5c:	681b      	ldr	r3, [r3, #0]
 8013e5e:	4798      	blx	r3
    if(res != LV_RES_OK) return res;

    if(sign == LV_SIGNAL_CLEANUP) {
 8013e60:	fab4 f384 	clz	r3, r4
 8013e64:	095b      	lsrs	r3, r3, #5
 8013e66:	2801      	cmp	r0, #1
 8013e68:	bf18      	it	ne
 8013e6a:	f043 0301 	orrne.w	r3, r3, #1
        /*Nothing to cleanup. (No dynamically allocated memory in 'ext')*/
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8013e6e:	b95b      	cbnz	r3, 8013e88 <lv_kb_signal+0x34>
 8013e70:	2c06      	cmp	r4, #6
 8013e72:	d109      	bne.n	8013e88 <lv_kb_signal+0x34>
 8013e74:	1f2a      	subs	r2, r5, #4
        lv_obj_type_t * buf = param;
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) {  /*Find the last set data*/
            if(buf->type[i] == NULL) break;
 8013e76:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8013e7a:	b111      	cbz	r1, 8013e82 <lv_kb_signal+0x2e>
 8013e7c:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) {  /*Find the last set data*/
 8013e7e:	2b07      	cmp	r3, #7
 8013e80:	d1f9      	bne.n	8013e76 <lv_kb_signal+0x22>
        }
        buf->type[i] = "lv_kb";
 8013e82:	4a03      	ldr	r2, [pc, #12]	; (8013e90 <lv_kb_signal+0x3c>)
 8013e84:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
    }

    return res;
}
 8013e88:	bd38      	pop	{r3, r4, r5, pc}
 8013e8a:	bf00      	nop
 8013e8c:	200174d4 	.word	0x200174d4
 8013e90:	0808bab4 	.word	0x0808bab4

08013e94 <lv_kb_create>:
{
 8013e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e96:	b083      	sub	sp, #12
 8013e98:	460f      	mov	r7, r1
    lv_obj_t * new_kb = lv_btnm_create(par, copy);
 8013e9a:	f7fe fb01 	bl	80124a0 <lv_btnm_create>
    lv_mem_assert(new_kb);
 8013e9e:	2800      	cmp	r0, #0
 8013ea0:	d039      	beq.n	8013f16 <lv_kb_create+0x82>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_kb);
 8013ea2:	4d40      	ldr	r5, [pc, #256]	; (8013fa4 <lv_kb_create+0x110>)
 8013ea4:	4604      	mov	r4, r0
 8013ea6:	682b      	ldr	r3, [r5, #0]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d035      	beq.n	8013f18 <lv_kb_create+0x84>
    lv_kb_ext_t * ext = lv_obj_allocate_ext_attr(new_kb, sizeof(lv_kb_ext_t));
 8013eac:	2138      	movs	r1, #56	; 0x38
 8013eae:	4620      	mov	r0, r4
 8013eb0:	f7f5 fc56 	bl	8009760 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 8013eb4:	4605      	mov	r5, r0
 8013eb6:	b368      	cbz	r0, 8013f14 <lv_kb_create+0x80>
    ext->cursor_mng = 0;
 8013eb8:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
    ext->ta = NULL;
 8013ebc:	2600      	movs	r6, #0
    lv_obj_set_signal_func(new_kb, lv_kb_signal);
 8013ebe:	493a      	ldr	r1, [pc, #232]	; (8013fa8 <lv_kb_create+0x114>)
 8013ec0:	4620      	mov	r0, r4
    ext->cursor_mng = 0;
 8013ec2:	f366 0300 	bfi	r3, r6, #0, #1
    ext->ta = NULL;
 8013ec6:	62ae      	str	r6, [r5, #40]	; 0x28
    ext->mode = LV_KB_MODE_TEXT;
 8013ec8:	f885 602c 	strb.w	r6, [r5, #44]	; 0x2c
    ext->hide_action = NULL;
 8013ecc:	636e      	str	r6, [r5, #52]	; 0x34
    ext->ok_action = NULL;
 8013ece:	632e      	str	r6, [r5, #48]	; 0x30
    ext->cursor_mng = 0;
 8013ed0:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
    lv_obj_set_signal_func(new_kb, lv_kb_signal);
 8013ed4:	f7f5 fc40 	bl	8009758 <lv_obj_set_signal_func>
    if(copy == NULL) {
 8013ed8:	b317      	cbz	r7, 8013f20 <lv_kb_create+0x8c>
        lv_kb_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8013eda:	4638      	mov	r0, r7
 8013edc:	f7f5 feb2 	bl	8009c44 <lv_obj_get_ext_attr>
 8013ee0:	4603      	mov	r3, r0
        ext->ta = NULL;
 8013ee2:	62ae      	str	r6, [r5, #40]	; 0x28
        lv_obj_refresh_style(new_kb);
 8013ee4:	4620      	mov	r0, r4
        ext->ta = copy_ext->ta;
 8013ee6:	6a99      	ldr	r1, [r3, #40]	; 0x28
        ext->cursor_mng = copy_ext->cursor_mng;
 8013ee8:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
        ext->ta = copy_ext->ta;
 8013eec:	62a9      	str	r1, [r5, #40]	; 0x28
        ext->mode = copy_ext->mode;
 8013eee:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8013ef2:	f885 102c 	strb.w	r1, [r5, #44]	; 0x2c
        ext->cursor_mng = copy_ext->cursor_mng;
 8013ef6:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 8013efa:	f361 0200 	bfi	r2, r1, #0, #1
 8013efe:	f885 202d 	strb.w	r2, [r5, #45]	; 0x2d
        ext->hide_action = copy_ext->hide_action;
 8013f02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
        ext->ok_action = copy_ext->ok_action;
 8013f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        ext->hide_action = copy_ext->hide_action;
 8013f06:	636a      	str	r2, [r5, #52]	; 0x34
        ext->ok_action = copy_ext->ok_action;
 8013f08:	632b      	str	r3, [r5, #48]	; 0x30
        lv_obj_refresh_style(new_kb);
 8013f0a:	f7f5 fbc7 	bl	800969c <lv_obj_refresh_style>
}
 8013f0e:	4620      	mov	r0, r4
 8013f10:	b003      	add	sp, #12
 8013f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f14:	e7fe      	b.n	8013f14 <lv_kb_create+0x80>
 8013f16:	e7fe      	b.n	8013f16 <lv_kb_create+0x82>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_kb);
 8013f18:	f7f5 fe90 	bl	8009c3c <lv_obj_get_signal_func>
 8013f1c:	6028      	str	r0, [r5, #0]
 8013f1e:	e7c5      	b.n	8013eac <lv_kb_create+0x18>
        lv_obj_set_size(new_kb, LV_HOR_RES, LV_VER_RES / 2);
 8013f20:	2288      	movs	r2, #136	; 0x88
 8013f22:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8013f26:	4620      	mov	r0, r4
 8013f28:	f7f5 f9c0 	bl	80092ac <lv_obj_set_size>
        lv_obj_align(new_kb, NULL, LV_ALIGN_IN_BOTTOM_MID, 0, 0);
 8013f2c:	463b      	mov	r3, r7
 8013f2e:	2205      	movs	r2, #5
 8013f30:	4639      	mov	r1, r7
 8013f32:	4620      	mov	r0, r4
 8013f34:	9700      	str	r7, [sp, #0]
 8013f36:	f7f5 f9ff 	bl	8009338 <lv_obj_align>
        lv_btnm_set_action(new_kb, lv_kb_def_action);
 8013f3a:	491c      	ldr	r1, [pc, #112]	; (8013fac <lv_kb_create+0x118>)
 8013f3c:	4620      	mov	r0, r4
 8013f3e:	f7fe fa55 	bl	80123ec <lv_btnm_set_action>
        lv_btnm_set_map(new_kb, kb_map_lc);
 8013f42:	491b      	ldr	r1, [pc, #108]	; (8013fb0 <lv_kb_create+0x11c>)
 8013f44:	4620      	mov	r0, r4
 8013f46:	f7fd feb3 	bl	8011cb0 <lv_btnm_set_map>
        lv_theme_t * th = lv_theme_get_current();
 8013f4a:	f005 fb65 	bl	8019618 <lv_theme_get_current>
        if(th) {
 8013f4e:	4605      	mov	r5, r0
 8013f50:	2800      	cmp	r0, #0
 8013f52:	d0dc      	beq.n	8013f0e <lv_kb_create+0x7a>
            lv_btnm_set_style(kb, LV_BTNM_STYLE_BG, style);
 8013f54:	4639      	mov	r1, r7
 8013f56:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 8013f5a:	4620      	mov	r0, r4
 8013f5c:	f7fe fa6e 	bl	801243c <lv_btnm_set_style>
            lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_REL, style);
 8013f60:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
 8013f64:	4620      	mov	r0, r4
 8013f66:	2101      	movs	r1, #1
 8013f68:	f7fe fa68 	bl	801243c <lv_btnm_set_style>
            lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_PR, style);
 8013f6c:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
 8013f70:	4620      	mov	r0, r4
 8013f72:	2102      	movs	r1, #2
 8013f74:	f7fe fa62 	bl	801243c <lv_btnm_set_style>
            lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_TGL_REL, style);
 8013f78:	f8d5 20a8 	ldr.w	r2, [r5, #168]	; 0xa8
 8013f7c:	4620      	mov	r0, r4
 8013f7e:	2103      	movs	r1, #3
 8013f80:	f7fe fa5c 	bl	801243c <lv_btnm_set_style>
            lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_TGL_PR, style);
 8013f84:	f8d5 20ac 	ldr.w	r2, [r5, #172]	; 0xac
 8013f88:	4620      	mov	r0, r4
 8013f8a:	2104      	movs	r1, #4
 8013f8c:	f7fe fa56 	bl	801243c <lv_btnm_set_style>
            lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_INA, style);
 8013f90:	4620      	mov	r0, r4
 8013f92:	f8d5 20b0 	ldr.w	r2, [r5, #176]	; 0xb0
 8013f96:	2105      	movs	r1, #5
 8013f98:	f7fe fa50 	bl	801243c <lv_btnm_set_style>
}
 8013f9c:	4620      	mov	r0, r4
 8013f9e:	b003      	add	sp, #12
 8013fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013fa2:	bf00      	nop
 8013fa4:	200174d4 	.word	0x200174d4
 8013fa8:	08013e55 	.word	0x08013e55
 8013fac:	08014001 	.word	0x08014001
 8013fb0:	200000e8 	.word	0x200000e8

08013fb4 <lv_kb_set_ta>:
{
 8013fb4:	b538      	push	{r3, r4, r5, lr}
 8013fb6:	460d      	mov	r5, r1
    lv_kb_ext_t * ext = lv_obj_get_ext_attr(kb);
 8013fb8:	f7f5 fe44 	bl	8009c44 <lv_obj_get_ext_attr>
 8013fbc:	4604      	mov	r4, r0
    if(ext->ta && ext->cursor_mng) {
 8013fbe:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8013fc0:	b118      	cbz	r0, 8013fca <lv_kb_set_ta+0x16>
 8013fc2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8013fc6:	07da      	lsls	r2, r3, #31
 8013fc8:	d410      	bmi.n	8013fec <lv_kb_set_ta+0x38>
    ext->ta = ta;
 8013fca:	62a5      	str	r5, [r4, #40]	; 0x28
    if(ext->ta && ext->cursor_mng) {
 8013fcc:	b11d      	cbz	r5, 8013fd6 <lv_kb_set_ta+0x22>
 8013fce:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8013fd2:	07db      	lsls	r3, r3, #31
 8013fd4:	d400      	bmi.n	8013fd8 <lv_kb_set_ta+0x24>
 8013fd6:	bd38      	pop	{r3, r4, r5, pc}
        cur_type = lv_ta_get_cursor_type(ext->ta);
 8013fd8:	4628      	mov	r0, r5
 8013fda:	f004 fb77 	bl	80186cc <lv_ta_get_cursor_type>
        lv_ta_set_cursor_type(ext->ta,  cur_type & (~LV_CURSOR_HIDDEN));
 8013fde:	f000 01f7 	and.w	r1, r0, #247	; 0xf7
 8013fe2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
 8013fe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_ta_set_cursor_type(ext->ta,  cur_type & (~LV_CURSOR_HIDDEN));
 8013fe8:	f003 bfa8 	b.w	8017f3c <lv_ta_set_cursor_type>
        cur_type = lv_ta_get_cursor_type(ext->ta);
 8013fec:	f004 fb6e 	bl	80186cc <lv_ta_get_cursor_type>
        lv_ta_set_cursor_type(ext->ta,  cur_type | LV_CURSOR_HIDDEN);
 8013ff0:	f040 0108 	orr.w	r1, r0, #8
 8013ff4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8013ff6:	b2c9      	uxtb	r1, r1
 8013ff8:	f003 ffa0 	bl	8017f3c <lv_ta_set_cursor_type>
 8013ffc:	e7e5      	b.n	8013fca <lv_kb_set_ta+0x16>
 8013ffe:	bf00      	nop

08014000 <lv_kb_def_action>:
 * @param btnm pointer to 'kb_btnm'
 * @param i the index of the released button from the current btnm map
 * @return LV_ACTION_RES_INV if the btnm is deleted else LV_ACTION_RES_OK
 */
static lv_res_t lv_kb_def_action(lv_obj_t * kb, const char * txt)
{
 8014000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014004:	460c      	mov	r4, r1
 8014006:	4605      	mov	r5, r0
    lv_kb_ext_t * ext = lv_obj_get_ext_attr(kb);
 8014008:	f7f5 fe1c 	bl	8009c44 <lv_obj_get_ext_attr>
    lv_res_t res = LV_RES_OK;

    /*Do the corresponding action according to the text of the button*/
    if(strcmp(txt, "abc") == 0) {
 801400c:	495a      	ldr	r1, [pc, #360]	; (8014178 <lv_kb_def_action+0x178>)
    lv_kb_ext_t * ext = lv_obj_get_ext_attr(kb);
 801400e:	4606      	mov	r6, r0
    if(strcmp(txt, "abc") == 0) {
 8014010:	4620      	mov	r0, r4
 8014012:	f7ec f8f9 	bl	8000208 <strcmp>
 8014016:	2800      	cmp	r0, #0
 8014018:	d059      	beq.n	80140ce <lv_kb_def_action+0xce>
        lv_btnm_set_map(kb, kb_map_lc);
        return LV_RES_OK;
    } else if(strcmp(txt, "ABC") == 0) {
 801401a:	4958      	ldr	r1, [pc, #352]	; (801417c <lv_kb_def_action+0x17c>)
 801401c:	4620      	mov	r0, r4
 801401e:	f7ec f8f3 	bl	8000208 <strcmp>
 8014022:	2800      	cmp	r0, #0
 8014024:	d06c      	beq.n	8014100 <lv_kb_def_action+0x100>
        lv_btnm_set_map(kb, kb_map_uc);
        return LV_RES_OK;
    } else if(strcmp(txt, "1#") == 0) {
 8014026:	4956      	ldr	r1, [pc, #344]	; (8014180 <lv_kb_def_action+0x180>)
 8014028:	4620      	mov	r0, r4
 801402a:	f7ec f8ed 	bl	8000208 <strcmp>
 801402e:	2800      	cmp	r0, #0
 8014030:	d054      	beq.n	80140dc <lv_kb_def_action+0xdc>
        lv_btnm_set_map(kb, kb_map_spec);
        return LV_RES_OK;
    } else if(strcmp(txt, SYMBOL_CLOSE) == 0) {
 8014032:	4954      	ldr	r1, [pc, #336]	; (8014184 <lv_kb_def_action+0x184>)
 8014034:	4620      	mov	r0, r4
 8014036:	f7ec f8e7 	bl	8000208 <strcmp>
 801403a:	b930      	cbnz	r0, 801404a <lv_kb_def_action+0x4a>
        if(ext->hide_action) res = ext->hide_action(kb);
 801403c:	6b71      	ldr	r1, [r6, #52]	; 0x34
 801403e:	4628      	mov	r0, r5
 8014040:	2900      	cmp	r1, #0
 8014042:	d068      	beq.n	8014116 <lv_kb_def_action+0x116>
        }
    } else {
        lv_ta_add_text(ext->ta, txt);
    }
    return LV_RES_OK;
}
 8014044:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        if(ext->ok_action) res = ext->ok_action(kb);
 8014048:	4708      	bx	r1
    } else if(strcmp(txt, SYMBOL_OK) == 0) {
 801404a:	494f      	ldr	r1, [pc, #316]	; (8014188 <lv_kb_def_action+0x188>)
 801404c:	4620      	mov	r0, r4
 801404e:	f7ec f8db 	bl	8000208 <strcmp>
 8014052:	2800      	cmp	r0, #0
 8014054:	d049      	beq.n	80140ea <lv_kb_def_action+0xea>
    if(ext->ta == NULL) return res;
 8014056:	6ab5      	ldr	r5, [r6, #40]	; 0x28
 8014058:	2d00      	cmp	r5, #0
 801405a:	d03c      	beq.n	80140d6 <lv_kb_def_action+0xd6>
    if(strcmp(txt, "Enter") == 0)lv_ta_add_char(ext->ta, '\n');
 801405c:	494b      	ldr	r1, [pc, #300]	; (801418c <lv_kb_def_action+0x18c>)
 801405e:	4620      	mov	r0, r4
 8014060:	f7ec f8d2 	bl	8000208 <strcmp>
 8014064:	2800      	cmp	r0, #0
 8014066:	d05c      	beq.n	8014122 <lv_kb_def_action+0x122>
    else if(strcmp(txt, SYMBOL_LEFT) == 0) lv_ta_cursor_left(ext->ta);
 8014068:	4949      	ldr	r1, [pc, #292]	; (8014190 <lv_kb_def_action+0x190>)
 801406a:	4620      	mov	r0, r4
 801406c:	f7ec f8cc 	bl	8000208 <strcmp>
 8014070:	2800      	cmp	r0, #0
 8014072:	d060      	beq.n	8014136 <lv_kb_def_action+0x136>
    else if(strcmp(txt, SYMBOL_RIGHT) == 0) lv_ta_cursor_right(ext->ta);
 8014074:	4947      	ldr	r1, [pc, #284]	; (8014194 <lv_kb_def_action+0x194>)
 8014076:	4620      	mov	r0, r4
 8014078:	f7ec f8c6 	bl	8000208 <strcmp>
 801407c:	2800      	cmp	r0, #0
 801407e:	d05e      	beq.n	801413e <lv_kb_def_action+0x13e>
    else if(strcmp(txt, "Bksp") == 0)  lv_ta_del_char(ext->ta);
 8014080:	4945      	ldr	r1, [pc, #276]	; (8014198 <lv_kb_def_action+0x198>)
 8014082:	4620      	mov	r0, r4
 8014084:	f7ec f8c0 	bl	8000208 <strcmp>
 8014088:	2800      	cmp	r0, #0
 801408a:	d040      	beq.n	801410e <lv_kb_def_action+0x10e>
    else if(strcmp(txt, "+/-") == 0) {
 801408c:	4943      	ldr	r1, [pc, #268]	; (801419c <lv_kb_def_action+0x19c>)
 801408e:	4620      	mov	r0, r4
 8014090:	f7ec f8ba 	bl	8000208 <strcmp>
 8014094:	4607      	mov	r7, r0
 8014096:	2800      	cmp	r0, #0
 8014098:	d148      	bne.n	801412c <lv_kb_def_action+0x12c>
        uint16_t cur = lv_ta_get_cursor_pos(ext->ta);
 801409a:	4628      	mov	r0, r5
 801409c:	f004 fb10 	bl	80186c0 <lv_ta_get_cursor_pos>
 80140a0:	4604      	mov	r4, r0
        const char * ta_txt = lv_ta_get_text(ext->ta);
 80140a2:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 80140a4:	f004 f91a 	bl	80182dc <lv_ta_get_text>
        if(ta_txt[0] == '-') {
 80140a8:	7803      	ldrb	r3, [r0, #0]
 80140aa:	2b2d      	cmp	r3, #45	; 0x2d
 80140ac:	d05b      	beq.n	8014166 <lv_kb_def_action+0x166>
        } else if(ta_txt[0] == '+') {
 80140ae:	2b2b      	cmp	r3, #43	; 0x2b
 80140b0:	d049      	beq.n	8014146 <lv_kb_def_action+0x146>
            lv_ta_set_cursor_pos(ext->ta, 0);
 80140b2:	4639      	mov	r1, r7
 80140b4:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 80140b6:	f003 fe2b 	bl	8017d10 <lv_ta_set_cursor_pos>
            lv_ta_add_char(ext->ta, '-');
 80140ba:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 80140bc:	212d      	movs	r1, #45	; 0x2d
 80140be:	f004 f91b 	bl	80182f8 <lv_ta_add_char>
            lv_ta_set_cursor_pos(ext->ta, cur + 1);
 80140c2:	1c61      	adds	r1, r4, #1
 80140c4:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 80140c6:	b209      	sxth	r1, r1
 80140c8:	f003 fe22 	bl	8017d10 <lv_ta_set_cursor_pos>
 80140cc:	e003      	b.n	80140d6 <lv_kb_def_action+0xd6>
        lv_btnm_set_map(kb, kb_map_lc);
 80140ce:	4628      	mov	r0, r5
 80140d0:	4933      	ldr	r1, [pc, #204]	; (80141a0 <lv_kb_def_action+0x1a0>)
 80140d2:	f7fd fded 	bl	8011cb0 <lv_btnm_set_map>
}
 80140d6:	2001      	movs	r0, #1
 80140d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_btnm_set_map(kb, kb_map_spec);
 80140dc:	4628      	mov	r0, r5
 80140de:	4931      	ldr	r1, [pc, #196]	; (80141a4 <lv_kb_def_action+0x1a4>)
 80140e0:	f7fd fde6 	bl	8011cb0 <lv_btnm_set_map>
}
 80140e4:	2001      	movs	r0, #1
 80140e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(ext->ok_action) res = ext->ok_action(kb);
 80140ea:	6b31      	ldr	r1, [r6, #48]	; 0x30
 80140ec:	4628      	mov	r0, r5
 80140ee:	2900      	cmp	r1, #0
 80140f0:	d1a8      	bne.n	8014044 <lv_kb_def_action+0x44>
            lv_kb_set_ta(kb, NULL);         /*De-assign the text area to hide it cursor if needed*/
 80140f2:	f7ff ff5f 	bl	8013fb4 <lv_kb_set_ta>
            res = lv_obj_del(kb);
 80140f6:	4628      	mov	r0, r5
}
 80140f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            res = lv_obj_del(kb);
 80140fc:	f7f4 bef0 	b.w	8008ee0 <lv_obj_del>
        lv_btnm_set_map(kb, kb_map_uc);
 8014100:	4628      	mov	r0, r5
 8014102:	4929      	ldr	r1, [pc, #164]	; (80141a8 <lv_kb_def_action+0x1a8>)
 8014104:	f7fd fdd4 	bl	8011cb0 <lv_btnm_set_map>
}
 8014108:	2001      	movs	r0, #1
 801410a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(strcmp(txt, "Bksp") == 0)  lv_ta_del_char(ext->ta);
 801410e:	4628      	mov	r0, r5
 8014110:	f003 fec0 	bl	8017e94 <lv_ta_del_char>
 8014114:	e7df      	b.n	80140d6 <lv_kb_def_action+0xd6>
            lv_kb_set_ta(kb, NULL);         /*De-assign the text area  to hide it cursor if needed*/
 8014116:	f7ff ff4d 	bl	8013fb4 <lv_kb_set_ta>
            lv_obj_del(kb);
 801411a:	4628      	mov	r0, r5
 801411c:	f7f4 fee0 	bl	8008ee0 <lv_obj_del>
 8014120:	e7d9      	b.n	80140d6 <lv_kb_def_action+0xd6>
    if(strcmp(txt, "Enter") == 0)lv_ta_add_char(ext->ta, '\n');
 8014122:	4628      	mov	r0, r5
 8014124:	210a      	movs	r1, #10
 8014126:	f004 f8e7 	bl	80182f8 <lv_ta_add_char>
 801412a:	e7d4      	b.n	80140d6 <lv_kb_def_action+0xd6>
        lv_ta_add_text(ext->ta, txt);
 801412c:	4621      	mov	r1, r4
 801412e:	4628      	mov	r0, r5
 8014130:	f004 f992 	bl	8018458 <lv_ta_add_text>
 8014134:	e7cf      	b.n	80140d6 <lv_kb_def_action+0xd6>
    else if(strcmp(txt, SYMBOL_LEFT) == 0) lv_ta_cursor_left(ext->ta);
 8014136:	4628      	mov	r0, r5
 8014138:	f004 fade 	bl	80186f8 <lv_ta_cursor_left>
 801413c:	e7cb      	b.n	80140d6 <lv_kb_def_action+0xd6>
    else if(strcmp(txt, SYMBOL_RIGHT) == 0) lv_ta_cursor_right(ext->ta);
 801413e:	4628      	mov	r0, r5
 8014140:	f004 facc 	bl	80186dc <lv_ta_cursor_right>
 8014144:	e7c7      	b.n	80140d6 <lv_kb_def_action+0xd6>
            lv_ta_set_cursor_pos(ext->ta, 1);
 8014146:	2101      	movs	r1, #1
 8014148:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 801414a:	f003 fde1 	bl	8017d10 <lv_ta_set_cursor_pos>
            lv_ta_del_char(ext->ta);
 801414e:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8014150:	f003 fea0 	bl	8017e94 <lv_ta_del_char>
            lv_ta_add_char(ext->ta, '-');
 8014154:	212d      	movs	r1, #45	; 0x2d
 8014156:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8014158:	f004 f8ce 	bl	80182f8 <lv_ta_add_char>
            lv_ta_set_cursor_pos(ext->ta, cur);
 801415c:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 801415e:	b221      	sxth	r1, r4
 8014160:	f003 fdd6 	bl	8017d10 <lv_ta_set_cursor_pos>
 8014164:	e7b7      	b.n	80140d6 <lv_kb_def_action+0xd6>
            lv_ta_set_cursor_pos(ext->ta, 1);
 8014166:	2101      	movs	r1, #1
 8014168:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 801416a:	f003 fdd1 	bl	8017d10 <lv_ta_set_cursor_pos>
            lv_ta_del_char(ext->ta);
 801416e:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8014170:	f003 fe90 	bl	8017e94 <lv_ta_del_char>
            lv_ta_add_char(ext->ta, '+');
 8014174:	212b      	movs	r1, #43	; 0x2b
 8014176:	e7ee      	b.n	8014156 <lv_kb_def_action+0x156>
 8014178:	0808babc 	.word	0x0808babc
 801417c:	0808bac0 	.word	0x0808bac0
 8014180:	0808bac4 	.word	0x0808bac4
 8014184:	0808bac8 	.word	0x0808bac8
 8014188:	0808bacc 	.word	0x0808bacc
 801418c:	0808bad0 	.word	0x0808bad0
 8014190:	0808bad8 	.word	0x0808bad8
 8014194:	0808badc 	.word	0x0808badc
 8014198:	0808bae0 	.word	0x0808bae0
 801419c:	0808bae8 	.word	0x0808bae8
 80141a0:	200000e8 	.word	0x200000e8
 80141a4:	20000248 	.word	0x20000248
 80141a8:	20000198 	.word	0x20000198

080141ac <lv_kb_set_ok_action>:
{
 80141ac:	b510      	push	{r4, lr}
 80141ae:	460c      	mov	r4, r1
    lv_kb_ext_t * ext = lv_obj_get_ext_attr(kb);
 80141b0:	f7f5 fd48 	bl	8009c44 <lv_obj_get_ext_attr>
    ext->ok_action = action;
 80141b4:	6304      	str	r4, [r0, #48]	; 0x30
 80141b6:	bd10      	pop	{r4, pc}

080141b8 <lv_kb_set_hide_action>:
{
 80141b8:	b510      	push	{r4, lr}
 80141ba:	460c      	mov	r4, r1
    lv_kb_ext_t * ext = lv_obj_get_ext_attr(kb);
 80141bc:	f7f5 fd42 	bl	8009c44 <lv_obj_get_ext_attr>
    ext->hide_action = action;
 80141c0:	6344      	str	r4, [r0, #52]	; 0x34
 80141c2:	bd10      	pop	{r4, pc}

080141c4 <lv_kb_set_style>:
    switch(type) {
 80141c4:	2905      	cmp	r1, #5
 80141c6:	d816      	bhi.n	80141f6 <lv_kb_set_style+0x32>
 80141c8:	e8df f001 	tbb	[pc, r1]
 80141cc:	0f0c0906 	.word	0x0f0c0906
 80141d0:	0312      	.short	0x0312
            lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_INA, style);
 80141d2:	2105      	movs	r1, #5
 80141d4:	f7fe b932 	b.w	801243c <lv_btnm_set_style>
            lv_btnm_set_style(kb, LV_BTNM_STYLE_BG, style);
 80141d8:	2100      	movs	r1, #0
 80141da:	f7fe b92f 	b.w	801243c <lv_btnm_set_style>
            lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_REL, style);
 80141de:	2101      	movs	r1, #1
 80141e0:	f7fe b92c 	b.w	801243c <lv_btnm_set_style>
            lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_PR, style);
 80141e4:	2102      	movs	r1, #2
 80141e6:	f7fe b929 	b.w	801243c <lv_btnm_set_style>
            lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_TGL_REL, style);
 80141ea:	2103      	movs	r1, #3
 80141ec:	f7fe b926 	b.w	801243c <lv_btnm_set_style>
            lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_TGL_PR, style);
 80141f0:	2104      	movs	r1, #4
 80141f2:	f7fe b923 	b.w	801243c <lv_btnm_set_style>
 80141f6:	4770      	bx	lr

080141f8 <lv_label_revert_dots>:

    lv_obj_invalidate(label);
}

static void lv_label_revert_dots(lv_obj_t * label)
{
 80141f8:	b538      	push	{r3, r4, r5, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80141fa:	f7f5 fd23 	bl	8009c44 <lv_obj_get_ext_attr>
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
 80141fe:	7903      	ldrb	r3, [r0, #4]
 8014200:	2b03      	cmp	r3, #3
 8014202:	d000      	beq.n	8014206 <lv_label_revert_dots+0xe>
 8014204:	bd38      	pop	{r3, r4, r5, pc}
    if(ext->dot_end == LV_LABEL_DOT_END_INV) return;
 8014206:	8a41      	ldrh	r1, [r0, #18]
 8014208:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801420c:	4604      	mov	r4, r0
 801420e:	4299      	cmp	r1, r3
 8014210:	d0f8      	beq.n	8014204 <lv_label_revert_dots+0xc>
    for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
        ext->text[ext->dot_end - i] = ext->dot_tmp[LV_LABEL_DOT_NUM - i];
    }
#else
    uint32_t letter_i = ext->dot_end - LV_LABEL_DOT_NUM;
    uint32_t byte_i = lv_txt_encoded_get_byte_id(ext->text, letter_i);
 8014212:	4b0a      	ldr	r3, [pc, #40]	; (801423c <lv_label_revert_dots+0x44>)
 8014214:	3903      	subs	r1, #3
 8014216:	6800      	ldr	r0, [r0, #0]
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	4798      	blx	r3

    /*Restore the characters*/
    uint8_t i = 0;
    while(ext->dot_tmp[i] != '\0') {
 801421c:	7961      	ldrb	r1, [r4, #5]
 801421e:	b149      	cbz	r1, 8014234 <lv_label_revert_dots+0x3c>
 8014220:	2300      	movs	r3, #0
        ext->text[byte_i + i] = ext->dot_tmp[i];
 8014222:	6822      	ldr	r2, [r4, #0]
        i++;
 8014224:	1c5d      	adds	r5, r3, #1
        ext->text[byte_i + i] = ext->dot_tmp[i];
 8014226:	4402      	add	r2, r0
 8014228:	54d1      	strb	r1, [r2, r3]
        i++;
 801422a:	b2eb      	uxtb	r3, r5
    while(ext->dot_tmp[i] != '\0') {
 801422c:	18e2      	adds	r2, r4, r3
 801422e:	7951      	ldrb	r1, [r2, #5]
 8014230:	2900      	cmp	r1, #0
 8014232:	d1f6      	bne.n	8014222 <lv_label_revert_dots+0x2a>
    }
#endif

    ext->dot_end = LV_LABEL_DOT_END_INV;
 8014234:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014238:	8263      	strh	r3, [r4, #18]
 801423a:	bd38      	pop	{r3, r4, r5, pc}
 801423c:	200000b8 	.word	0x200000b8

08014240 <lv_label_set_offset_y>:
    ext->offset.x = x;
    lv_obj_invalidate(label);
}

static void lv_label_set_offset_y(lv_obj_t * label, lv_coord_t y)
{
 8014240:	b538      	push	{r3, r4, r5, lr}
 8014242:	460d      	mov	r5, r1
 8014244:	4604      	mov	r4, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8014246:	f7f5 fcfd 	bl	8009c44 <lv_obj_get_ext_attr>
    ext->offset.y = y;
 801424a:	8305      	strh	r5, [r0, #24]
    lv_obj_invalidate(label);
 801424c:	4620      	mov	r0, r4
}
 801424e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label);
 8014252:	f7f4 bdf1 	b.w	8008e38 <lv_obj_invalidate>
 8014256:	bf00      	nop

08014258 <lv_label_set_offset_x>:
{
 8014258:	b538      	push	{r3, r4, r5, lr}
 801425a:	460d      	mov	r5, r1
 801425c:	4604      	mov	r4, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801425e:	f7f5 fcf1 	bl	8009c44 <lv_obj_get_ext_attr>
    ext->offset.x = x;
 8014262:	82c5      	strh	r5, [r0, #22]
    lv_obj_invalidate(label);
 8014264:	4620      	mov	r0, r4
}
 8014266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label);
 801426a:	f7f4 bde5 	b.w	8008e38 <lv_obj_invalidate>
 801426e:	bf00      	nop

08014270 <lv_label_design>:
    if(mode == LV_DESIGN_COVER_CHK) return false;
 8014270:	2a02      	cmp	r2, #2
 8014272:	d05c      	beq.n	801432e <lv_label_design+0xbe>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 8014274:	b10a      	cbz	r2, 801427a <lv_label_design+0xa>
    return true;
 8014276:	2001      	movs	r0, #1
 8014278:	4770      	bx	lr
{
 801427a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801427e:	4604      	mov	r4, r0
 8014280:	b088      	sub	sp, #32
 8014282:	460f      	mov	r7, r1
        lv_style_t * style = lv_obj_get_style(label);
 8014284:	f7f5 fbc4 	bl	8009a10 <lv_obj_get_style>
 8014288:	4680      	mov	r8, r0
        lv_opa_t opa_scale = lv_obj_get_opa_scale(label);
 801428a:	4620      	mov	r0, r4
 801428c:	f7f5 fcba 	bl	8009c04 <lv_obj_get_opa_scale>
        lv_obj_get_coords(label, &coords);
 8014290:	a904      	add	r1, sp, #16
        lv_opa_t opa_scale = lv_obj_get_opa_scale(label);
 8014292:	4681      	mov	r9, r0
        lv_obj_get_coords(label, &coords);
 8014294:	4620      	mov	r0, r4
 8014296:	f7f5 fb9d 	bl	80099d4 <lv_obj_get_coords>
        lv_group_t * g = lv_obj_get_group(label);
 801429a:	4620      	mov	r0, r4
 801429c:	f7f5 fcd4 	bl	8009c48 <lv_obj_get_group>
        if(lv_group_get_focused(g) == label) {
 80142a0:	f7f3 ffbc 	bl	800821c <lv_group_get_focused>
 80142a4:	4284      	cmp	r4, r0
 80142a6:	d06e      	beq.n	8014386 <lv_label_design+0x116>
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80142a8:	4620      	mov	r0, r4
 80142aa:	f7f5 fccb 	bl	8009c44 <lv_obj_get_ext_attr>
        if(ext->body_draw) {
 80142ae:	7e83      	ldrb	r3, [r0, #26]
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80142b0:	4605      	mov	r5, r0
        if(ext->body_draw) {
 80142b2:	0699      	lsls	r1, r3, #26
 80142b4:	d43d      	bmi.n	8014332 <lv_label_design+0xc2>
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 80142b6:	06da      	lsls	r2, r3, #27
        lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 80142b8:	f3c3 06c0 	ubfx	r6, r3, #3, #1
        if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 80142bc:	f003 0306 	and.w	r3, r3, #6
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 80142c0:	bf48      	it	mi
 80142c2:	f046 0602 	orrmi.w	r6, r6, #2
        if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 80142c6:	2b02      	cmp	r3, #2
 80142c8:	d05a      	beq.n	8014380 <lv_label_design+0x110>
        if(ext->align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
 80142ca:	2b04      	cmp	r3, #4
 80142cc:	d00f      	beq.n	80142ee <lv_label_design+0x7e>
        lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ext->offset);
 80142ce:	f105 0116 	add.w	r1, r5, #22
 80142d2:	9601      	str	r6, [sp, #4]
 80142d4:	a804      	add	r0, sp, #16
 80142d6:	464b      	mov	r3, r9
 80142d8:	9102      	str	r1, [sp, #8]
 80142da:	4642      	mov	r2, r8
 80142dc:	682c      	ldr	r4, [r5, #0]
 80142de:	4639      	mov	r1, r7
 80142e0:	9400      	str	r4, [sp, #0]
 80142e2:	f7f6 fc7d 	bl	800abe0 <lv_draw_label>
 80142e6:	2001      	movs	r0, #1
}
 80142e8:	b008      	add	sp, #32
 80142ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(ext->align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
 80142ee:	f046 0608 	orr.w	r6, r6, #8
        if((ext->long_mode == LV_LABEL_LONG_ROLL) &&
 80142f2:	792b      	ldrb	r3, [r5, #4]
 80142f4:	2b04      	cmp	r3, #4
 80142f6:	d1ea      	bne.n	80142ce <lv_label_design+0x5e>
            lv_txt_get_size(&size, ext->text, style->text.font, style->text.letter_space, style->text.line_space, LV_COORD_MAX, flag);
 80142f8:	f643 7eff 	movw	lr, #16383	; 0x3fff
 80142fc:	f9b8 3030 	ldrsh.w	r3, [r8, #48]	; 0x30
 8014300:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8014304:	a806      	add	r0, sp, #24
 8014306:	6829      	ldr	r1, [r5, #0]
 8014308:	f8cd e004 	str.w	lr, [sp, #4]
 801430c:	9602      	str	r6, [sp, #8]
 801430e:	f9b8 e032 	ldrsh.w	lr, [r8, #50]	; 0x32
 8014312:	f8cd e000 	str.w	lr, [sp]
 8014316:	f7fc fbcb 	bl	8010ab0 <lv_txt_get_size>
            if(size.x > lv_obj_get_width(label)) {
 801431a:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 801431e:	4620      	mov	r0, r4
 8014320:	f7f5 fb6a 	bl	80099f8 <lv_obj_get_width>
 8014324:	4582      	cmp	sl, r0
 8014326:	ddd2      	ble.n	80142ce <lv_label_design+0x5e>
                flag &= ~LV_TXT_FLAG_CENTER;
 8014328:	f006 06f3 	and.w	r6, r6, #243	; 0xf3
 801432c:	e7cf      	b.n	80142ce <lv_label_design+0x5e>
    if(mode == LV_DESIGN_COVER_CHK) return false;
 801432e:	2000      	movs	r0, #0
 8014330:	4770      	bx	lr
            lv_obj_get_coords(label, &bg);
 8014332:	4620      	mov	r0, r4
 8014334:	a906      	add	r1, sp, #24
 8014336:	f7f5 fb4d 	bl	80099d4 <lv_obj_get_coords>
            bg.x1 -= style->body.padding.hor;
 801433a:	f8b8 2022 	ldrh.w	r2, [r8, #34]	; 0x22
            bg.x2 += style->body.padding.hor;
 801433e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
            lv_draw_rect(&bg, mask, style, lv_obj_get_opa_scale(label));
 8014342:	4620      	mov	r0, r4
            bg.x1 -= style->body.padding.hor;
 8014344:	f8bd 6018 	ldrh.w	r6, [sp, #24]
            bg.y1 -= style->body.padding.ver;
 8014348:	f8b8 3020 	ldrh.w	r3, [r8, #32]
            bg.y2 += style->body.padding.ver;
 801434c:	f8bd e01e 	ldrh.w	lr, [sp, #30]
            bg.x1 -= style->body.padding.hor;
 8014350:	1ab6      	subs	r6, r6, r2
            bg.x2 += style->body.padding.hor;
 8014352:	440a      	add	r2, r1
            bg.y1 -= style->body.padding.ver;
 8014354:	f8bd 101a 	ldrh.w	r1, [sp, #26]
            bg.x1 -= style->body.padding.hor;
 8014358:	f8ad 6018 	strh.w	r6, [sp, #24]
            bg.y1 -= style->body.padding.ver;
 801435c:	1ac9      	subs	r1, r1, r3
            bg.y2 += style->body.padding.ver;
 801435e:	4473      	add	r3, lr
            bg.x2 += style->body.padding.hor;
 8014360:	f8ad 201c 	strh.w	r2, [sp, #28]
            bg.y1 -= style->body.padding.ver;
 8014364:	f8ad 101a 	strh.w	r1, [sp, #26]
            bg.y2 += style->body.padding.ver;
 8014368:	f8ad 301e 	strh.w	r3, [sp, #30]
            lv_draw_rect(&bg, mask, style, lv_obj_get_opa_scale(label));
 801436c:	f7f5 fc4a 	bl	8009c04 <lv_obj_get_opa_scale>
 8014370:	4642      	mov	r2, r8
 8014372:	4603      	mov	r3, r0
 8014374:	4639      	mov	r1, r7
 8014376:	a806      	add	r0, sp, #24
 8014378:	f7f8 fc56 	bl	800cc28 <lv_draw_rect>
 801437c:	7eab      	ldrb	r3, [r5, #26]
 801437e:	e79a      	b.n	80142b6 <lv_label_design+0x46>
        if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 8014380:	f046 0604 	orr.w	r6, r6, #4
 8014384:	e7b5      	b.n	80142f2 <lv_label_design+0x82>
            lv_draw_rect(&coords, mask, style, opa_scale);
 8014386:	464b      	mov	r3, r9
 8014388:	4642      	mov	r2, r8
 801438a:	4639      	mov	r1, r7
 801438c:	a804      	add	r0, sp, #16
 801438e:	f7f8 fc4b 	bl	800cc28 <lv_draw_rect>
 8014392:	e789      	b.n	80142a8 <lv_label_design+0x38>

08014394 <lv_label_set_align>:
{
 8014394:	b538      	push	{r3, r4, r5, lr}
 8014396:	460c      	mov	r4, r1
 8014398:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801439a:	f7f5 fc53 	bl	8009c44 <lv_obj_get_ext_attr>
    if(ext->align == align) return;
 801439e:	7e83      	ldrb	r3, [r0, #26]
 80143a0:	f3c3 0141 	ubfx	r1, r3, #1, #2
 80143a4:	42a1      	cmp	r1, r4
 80143a6:	d008      	beq.n	80143ba <lv_label_set_align+0x26>
 80143a8:	4602      	mov	r2, r0
    ext->align = align;
 80143aa:	f364 0342 	bfi	r3, r4, #1, #2
    lv_obj_invalidate(label);       /*Enough to invalidate because alignment is only drawing related (lv_refr_label_text() not required)*/
 80143ae:	4628      	mov	r0, r5
    ext->align = align;
 80143b0:	7693      	strb	r3, [r2, #26]
}
 80143b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label);       /*Enough to invalidate because alignment is only drawing related (lv_refr_label_text() not required)*/
 80143b6:	f7f4 bd3f 	b.w	8008e38 <lv_obj_invalidate>
 80143ba:	bd38      	pop	{r3, r4, r5, pc}

080143bc <lv_label_set_body_draw>:
{
 80143bc:	b538      	push	{r3, r4, r5, lr}
 80143be:	460c      	mov	r4, r1
 80143c0:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80143c2:	f7f5 fc3f 	bl	8009c44 <lv_obj_get_ext_attr>
    if(ext->body_draw == en) return;
 80143c6:	7e83      	ldrb	r3, [r0, #26]
 80143c8:	f3c3 1140 	ubfx	r1, r3, #5, #1
 80143cc:	42a1      	cmp	r1, r4
 80143ce:	d00b      	beq.n	80143e8 <lv_label_set_body_draw+0x2c>
 80143d0:	4602      	mov	r2, r0
    ext->body_draw = en == false ? 0 : 1;
 80143d2:	f364 1345 	bfi	r3, r4, #5, #1
    lv_obj_refresh_ext_size(label);
 80143d6:	4628      	mov	r0, r5
    ext->body_draw = en == false ? 0 : 1;
 80143d8:	7693      	strb	r3, [r2, #26]
    lv_obj_refresh_ext_size(label);
 80143da:	f7f5 f9c9 	bl	8009770 <lv_obj_refresh_ext_size>
    lv_obj_invalidate(label);
 80143de:	4628      	mov	r0, r5
}
 80143e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label);
 80143e4:	f7f4 bd28 	b.w	8008e38 <lv_obj_invalidate>
 80143e8:	bd38      	pop	{r3, r4, r5, pc}
 80143ea:	bf00      	nop

080143ec <lv_label_get_text>:
{
 80143ec:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80143ee:	f7f5 fc29 	bl	8009c44 <lv_obj_get_ext_attr>
}
 80143f2:	6800      	ldr	r0, [r0, #0]
 80143f4:	bd08      	pop	{r3, pc}
 80143f6:	bf00      	nop

080143f8 <lv_label_get_align>:
{
 80143f8:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80143fa:	f7f5 fc23 	bl	8009c44 <lv_obj_get_ext_attr>
    return ext->align;
 80143fe:	7e80      	ldrb	r0, [r0, #26]
}
 8014400:	f3c0 0041 	ubfx	r0, r0, #1, #2
 8014404:	bd08      	pop	{r3, pc}
 8014406:	bf00      	nop

08014408 <lv_label_get_letter_pos>:
{
 8014408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801440c:	4605      	mov	r5, r0
 801440e:	b08b      	sub	sp, #44	; 0x2c
 8014410:	460c      	mov	r4, r1
 8014412:	9207      	str	r2, [sp, #28]
 8014414:	9008      	str	r0, [sp, #32]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8014416:	f7f5 fc15 	bl	8009c44 <lv_obj_get_ext_attr>
    return ext->text;
 801441a:	6806      	ldr	r6, [r0, #0]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801441c:	4628      	mov	r0, r5
 801441e:	f7f5 fc11 	bl	8009c44 <lv_obj_get_ext_attr>
 8014422:	4680      	mov	r8, r0
 8014424:	9005      	str	r0, [sp, #20]
    lv_coord_t max_w = lv_obj_get_width(label);
 8014426:	4628      	mov	r0, r5
 8014428:	f7f5 fae6 	bl	80099f8 <lv_obj_get_width>
 801442c:	4682      	mov	sl, r0
    lv_style_t * style = lv_obj_get_style(label);
 801442e:	4628      	mov	r0, r5
 8014430:	f7f5 faee 	bl	8009a10 <lv_obj_get_style>
    const lv_font_t * font = style->text.font;
 8014434:	f8d0 b02c 	ldr.w	fp, [r0, #44]	; 0x2c
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 8014438:	f898 301a 	ldrb.w	r3, [r8, #26]
    lv_style_t * style = lv_obj_get_style(label);
 801443c:	4607      	mov	r7, r0
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline uint8_t lv_font_get_height(const lv_font_t * font_p)
{
    return font_p->h_px;
 801443e:	f89b 1020 	ldrb.w	r1, [fp, #32]
    lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 8014442:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8014446:	9103      	str	r1, [sp, #12]
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 8014448:	06d9      	lsls	r1, r3, #27
    lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 801444a:	9204      	str	r2, [sp, #16]
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 801444c:	d502      	bpl.n	8014454 <lv_label_get_letter_pos+0x4c>
 801444e:	f042 0202 	orr.w	r2, r2, #2
 8014452:	9204      	str	r2, [sp, #16]
    if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 8014454:	f003 0306 	and.w	r3, r3, #6
 8014458:	2b02      	cmp	r3, #2
 801445a:	d072      	beq.n	8014542 <lv_label_get_letter_pos+0x13a>
    if(ext->long_mode == LV_LABEL_LONG_EXPAND || ext->long_mode == LV_LABEL_LONG_SCROLL) {
 801445c:	9b05      	ldr	r3, [sp, #20]
        max_w = LV_COORD_MAX;
 801445e:	f643 72ff 	movw	r2, #16383	; 0x3fff
    index = lv_txt_encoded_get_byte_id(txt, index);
 8014462:	4621      	mov	r1, r4
    if(ext->long_mode == LV_LABEL_LONG_EXPAND || ext->long_mode == LV_LABEL_LONG_SCROLL) {
 8014464:	7918      	ldrb	r0, [r3, #4]
    index = lv_txt_encoded_get_byte_id(txt, index);
 8014466:	4b54      	ldr	r3, [pc, #336]	; (80145b8 <lv_label_get_letter_pos+0x1b0>)
        max_w = LV_COORD_MAX;
 8014468:	f010 0ffd 	tst.w	r0, #253	; 0xfd
    index = lv_txt_encoded_get_byte_id(txt, index);
 801446c:	4630      	mov	r0, r6
 801446e:	681b      	ldr	r3, [r3, #0]
        max_w = LV_COORD_MAX;
 8014470:	bf08      	it	eq
 8014472:	4692      	moveq	sl, r2
    index = lv_txt_encoded_get_byte_id(txt, index);
 8014474:	4798      	blx	r3
    while(txt[new_line_start] != '\0') {
 8014476:	7834      	ldrb	r4, [r6, #0]
    index = lv_txt_encoded_get_byte_id(txt, index);
 8014478:	b283      	uxth	r3, r0
 801447a:	9306      	str	r3, [sp, #24]
    while(txt[new_line_start] != '\0') {
 801447c:	2c00      	cmp	r4, #0
 801447e:	f000 8095 	beq.w	80145ac <lv_label_get_letter_pos+0x1a4>
 8014482:	2400      	movs	r4, #0
 8014484:	4699      	mov	r9, r3
 8014486:	4630      	mov	r0, r6
 8014488:	9d04      	ldr	r5, [sp, #16]
 801448a:	46a0      	mov	r8, r4
 801448c:	e007      	b.n	801449e <lv_label_get_letter_pos+0x96>
        if(index < new_line_start || txt[new_line_start] == '\0') break; /*The line of 'index' letter begins at 'line_start'*/
 801448e:	5cb3      	ldrb	r3, [r6, r2]
 8014490:	b193      	cbz	r3, 80144b8 <lv_label_get_letter_pos+0xb0>
        y += letter_height + style->text.line_space;
 8014492:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8014494:	4690      	mov	r8, r2
 8014496:	9a03      	ldr	r2, [sp, #12]
 8014498:	4413      	add	r3, r2
 801449a:	441c      	add	r4, r3
 801449c:	b224      	sxth	r4, r4
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
 801449e:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80144a2:	4653      	mov	r3, sl
 80144a4:	9500      	str	r5, [sp, #0]
 80144a6:	4659      	mov	r1, fp
 80144a8:	f7fc f968 	bl	801077c <lv_txt_get_next_line>
 80144ac:	eb00 0208 	add.w	r2, r0, r8
        if(index < new_line_start || txt[new_line_start] == '\0') break; /*The line of 'index' letter begins at 'line_start'*/
 80144b0:	4591      	cmp	r9, r2
 80144b2:	eb06 0002 	add.w	r0, r6, r2
 80144b6:	d2ea      	bcs.n	801448e <lv_label_get_letter_pos+0x86>
 80144b8:	4615      	mov	r5, r2
    if(index > 0) {
 80144ba:	9b06      	ldr	r3, [sp, #24]
 80144bc:	b13b      	cbz	r3, 80144ce <lv_label_get_letter_pos+0xc6>
        if((txt[index - 1] == '\n' || txt[index - 1] == '\r') && txt[index] == '\0') {
 80144be:	eb06 0a09 	add.w	sl, r6, r9
 80144c2:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
 80144c6:	2b0a      	cmp	r3, #10
 80144c8:	d026      	beq.n	8014518 <lv_label_get_letter_pos+0x110>
 80144ca:	2b0d      	cmp	r3, #13
 80144cc:	d024      	beq.n	8014518 <lv_label_get_letter_pos+0x110>
    lv_coord_t x = lv_txt_get_width(&txt[line_start], index - line_start,
 80144ce:	fa1f f388 	uxth.w	r3, r8
 80144d2:	9806      	ldr	r0, [sp, #24]
 80144d4:	eb06 0a08 	add.w	sl, r6, r8
 80144d8:	9e04      	ldr	r6, [sp, #16]
 80144da:	4619      	mov	r1, r3
 80144dc:	9309      	str	r3, [sp, #36]	; 0x24
 80144de:	465a      	mov	r2, fp
 80144e0:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80144e4:	1a41      	subs	r1, r0, r1
 80144e6:	9600      	str	r6, [sp, #0]
 80144e8:	4650      	mov	r0, sl
 80144ea:	b289      	uxth	r1, r1
 80144ec:	f7fc fa8c 	bl	8010a08 <lv_txt_get_width>
    if(index != line_start) x += style->text.letter_space;
 80144f0:	45c1      	cmp	r9, r8
    lv_coord_t x = lv_txt_get_width(&txt[line_start], index - line_start,
 80144f2:	4606      	mov	r6, r0
    if(index != line_start) x += style->text.letter_space;
 80144f4:	d002      	beq.n	80144fc <lv_label_get_letter_pos+0xf4>
 80144f6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80144f8:	441e      	add	r6, r3
 80144fa:	b236      	sxth	r6, r6
    if(ext->align == LV_LABEL_ALIGN_CENTER) {
 80144fc:	9b05      	ldr	r3, [sp, #20]
 80144fe:	7e9b      	ldrb	r3, [r3, #26]
 8014500:	f003 0306 	and.w	r3, r3, #6
 8014504:	2b02      	cmp	r3, #2
 8014506:	d034      	beq.n	8014572 <lv_label_get_letter_pos+0x16a>
    } else if(ext->align == LV_LABEL_ALIGN_RIGHT) {
 8014508:	2b04      	cmp	r3, #4
 801450a:	d01f      	beq.n	801454c <lv_label_get_letter_pos+0x144>
    pos->x = x;
 801450c:	9a07      	ldr	r2, [sp, #28]
 801450e:	8016      	strh	r6, [r2, #0]
    pos->y = y;
 8014510:	8054      	strh	r4, [r2, #2]
}
 8014512:	b00b      	add	sp, #44	; 0x2c
 8014514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if((txt[index - 1] == '\n' || txt[index - 1] == '\r') && txt[index] == '\0') {
 8014518:	f816 1009 	ldrb.w	r1, [r6, r9]
 801451c:	2900      	cmp	r1, #0
 801451e:	d1d6      	bne.n	80144ce <lv_label_get_letter_pos+0xc6>
    lv_coord_t x = lv_txt_get_width(&txt[line_start], index - line_start,
 8014520:	9806      	ldr	r0, [sp, #24]
            y += letter_height + style->text.line_space;
 8014522:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
    lv_coord_t x = lv_txt_get_width(&txt[line_start], index - line_start,
 8014524:	9009      	str	r0, [sp, #36]	; 0x24
            y += letter_height + style->text.line_space;
 8014526:	9803      	ldr	r0, [sp, #12]
    lv_coord_t x = lv_txt_get_width(&txt[line_start], index - line_start,
 8014528:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
            y += letter_height + style->text.line_space;
 801452c:	4410      	add	r0, r2
    lv_coord_t x = lv_txt_get_width(&txt[line_start], index - line_start,
 801452e:	9a04      	ldr	r2, [sp, #16]
            y += letter_height + style->text.line_space;
 8014530:	4404      	add	r4, r0
    lv_coord_t x = lv_txt_get_width(&txt[line_start], index - line_start,
 8014532:	9200      	str	r2, [sp, #0]
 8014534:	4650      	mov	r0, sl
 8014536:	465a      	mov	r2, fp
 8014538:	f7fc fa66 	bl	8010a08 <lv_txt_get_width>
 801453c:	4606      	mov	r6, r0
            y += letter_height + style->text.line_space;
 801453e:	b224      	sxth	r4, r4
 8014540:	e7dc      	b.n	80144fc <lv_label_get_letter_pos+0xf4>
    if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 8014542:	9b04      	ldr	r3, [sp, #16]
 8014544:	f043 0304 	orr.w	r3, r3, #4
 8014548:	9304      	str	r3, [sp, #16]
 801454a:	e787      	b.n	801445c <lv_label_get_letter_pos+0x54>
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start,
 801454c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801454e:	4650      	mov	r0, sl
 8014550:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8014554:	1aa9      	subs	r1, r5, r2
 8014556:	9a04      	ldr	r2, [sp, #16]
 8014558:	b289      	uxth	r1, r1
 801455a:	9200      	str	r2, [sp, #0]
 801455c:	465a      	mov	r2, fp
 801455e:	f7fc fa53 	bl	8010a08 <lv_txt_get_width>
 8014562:	4605      	mov	r5, r0
        x += lv_obj_get_width(label) - line_w;
 8014564:	9808      	ldr	r0, [sp, #32]
 8014566:	f7f5 fa47 	bl	80099f8 <lv_obj_get_width>
 801456a:	1b40      	subs	r0, r0, r5
 801456c:	4406      	add	r6, r0
 801456e:	b236      	sxth	r6, r6
 8014570:	e7cc      	b.n	801450c <lv_label_get_letter_pos+0x104>
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start,
 8014572:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014574:	4650      	mov	r0, sl
 8014576:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801457a:	1aa9      	subs	r1, r5, r2
 801457c:	9a04      	ldr	r2, [sp, #16]
 801457e:	b289      	uxth	r1, r1
 8014580:	9200      	str	r2, [sp, #0]
 8014582:	465a      	mov	r2, fp
 8014584:	f7fc fa40 	bl	8010a08 <lv_txt_get_width>
 8014588:	4605      	mov	r5, r0
        x += lv_obj_get_width(label) / 2 - line_w / 2;
 801458a:	9808      	ldr	r0, [sp, #32]
 801458c:	f7f5 fa34 	bl	80099f8 <lv_obj_get_width>
 8014590:	2800      	cmp	r0, #0
 8014592:	bfb8      	it	lt
 8014594:	3001      	addlt	r0, #1
 8014596:	2d00      	cmp	r5, #0
 8014598:	bfb8      	it	lt
 801459a:	3501      	addlt	r5, #1
 801459c:	f340 034f 	sbfx	r3, r0, #1, #16
 80145a0:	f345 054f 	sbfx	r5, r5, #1, #16
 80145a4:	1b5b      	subs	r3, r3, r5
 80145a6:	441e      	add	r6, r3
 80145a8:	b236      	sxth	r6, r6
 80145aa:	e7af      	b.n	801450c <lv_label_get_letter_pos+0x104>
 80145ac:	fa1f f980 	uxth.w	r9, r0
    uint32_t line_start = 0;
 80145b0:	46a0      	mov	r8, r4
 80145b2:	4625      	mov	r5, r4
 80145b4:	e781      	b.n	80144ba <lv_label_get_letter_pos+0xb2>
 80145b6:	bf00      	nop
 80145b8:	200000b8 	.word	0x200000b8

080145bc <lv_label_get_letter_on>:
{
 80145bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145c0:	4604      	mov	r4, r0
 80145c2:	b089      	sub	sp, #36	; 0x24
 80145c4:	9103      	str	r1, [sp, #12]
 80145c6:	9005      	str	r0, [sp, #20]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80145c8:	f7f5 fb3c 	bl	8009c44 <lv_obj_get_ext_attr>
    return ext->text;
 80145cc:	6806      	ldr	r6, [r0, #0]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80145ce:	4620      	mov	r0, r4
 80145d0:	f7f5 fb38 	bl	8009c44 <lv_obj_get_ext_attr>
 80145d4:	4605      	mov	r5, r0
 80145d6:	9004      	str	r0, [sp, #16]
    lv_coord_t max_w = lv_obj_get_width(label);
 80145d8:	4620      	mov	r0, r4
 80145da:	f7f5 fa0d 	bl	80099f8 <lv_obj_get_width>
 80145de:	4682      	mov	sl, r0
    lv_style_t * style = lv_obj_get_style(label);
 80145e0:	4620      	mov	r0, r4
 80145e2:	f7f5 fa15 	bl	8009a10 <lv_obj_get_style>
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 80145e6:	7eab      	ldrb	r3, [r5, #26]
    const lv_font_t * font = style->text.font;
 80145e8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    lv_style_t * style = lv_obj_get_style(label);
 80145ea:	4607      	mov	r7, r0
    lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 80145ec:	f3c3 0bc0 	ubfx	fp, r3, #3, #1
    while(txt[line_start] != '\0') {
 80145f0:	7835      	ldrb	r5, [r6, #0]
    const lv_font_t * font = style->text.font;
 80145f2:	9202      	str	r2, [sp, #8]
 80145f4:	f892 9020 	ldrb.w	r9, [r2, #32]
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 80145f8:	06da      	lsls	r2, r3, #27
    if(ext->long_mode == LV_LABEL_LONG_EXPAND || ext->long_mode == LV_LABEL_LONG_SCROLL) {
 80145fa:	9a04      	ldr	r2, [sp, #16]
    if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 80145fc:	f003 0306 	and.w	r3, r3, #6
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 8014600:	bf48      	it	mi
 8014602:	f04b 0b02 	orrmi.w	fp, fp, #2
    if(ext->long_mode == LV_LABEL_LONG_EXPAND || ext->long_mode == LV_LABEL_LONG_SCROLL) {
 8014606:	7911      	ldrb	r1, [r2, #4]
    if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 8014608:	2b02      	cmp	r3, #2
        max_w = LV_COORD_MAX;
 801460a:	f643 72ff 	movw	r2, #16383	; 0x3fff
    if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 801460e:	bf08      	it	eq
 8014610:	f04b 0b04 	orreq.w	fp, fp, #4
        max_w = LV_COORD_MAX;
 8014614:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 8014618:	bf08      	it	eq
 801461a:	4692      	moveq	sl, r2
    while(txt[line_start] != '\0') {
 801461c:	2d00      	cmp	r5, #0
 801461e:	f000 808c 	beq.w	801473a <lv_label_get_letter_on+0x17e>
 8014622:	2400      	movs	r4, #0
 8014624:	46b0      	mov	r8, r6
 8014626:	4625      	mov	r5, r4
 8014628:	e009      	b.n	801463e <lv_label_get_letter_on+0x82>
        y += letter_height + style->text.line_space;
 801462a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
    while(txt[line_start] != '\0') {
 801462c:	eb06 0800 	add.w	r8, r6, r0
 8014630:	5c32      	ldrb	r2, [r6, r0]
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
 8014632:	4605      	mov	r5, r0
        y += letter_height + style->text.line_space;
 8014634:	444b      	add	r3, r9
 8014636:	441c      	add	r4, r3
 8014638:	b224      	sxth	r4, r4
    while(txt[line_start] != '\0') {
 801463a:	2a00      	cmp	r2, #0
 801463c:	d055      	beq.n	80146ea <lv_label_get_letter_on+0x12e>
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
 801463e:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8014642:	4653      	mov	r3, sl
 8014644:	f8cd b000 	str.w	fp, [sp]
 8014648:	4640      	mov	r0, r8
 801464a:	9902      	ldr	r1, [sp, #8]
 801464c:	f7fc f896 	bl	801077c <lv_txt_get_next_line>
        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 8014650:	9b03      	ldr	r3, [sp, #12]
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
 8014652:	4428      	add	r0, r5
        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 8014654:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8014658:	eb04 0309 	add.w	r3, r4, r9
 801465c:	429a      	cmp	r2, r3
 801465e:	dce4      	bgt.n	801462a <lv_label_get_letter_on+0x6e>
 8014660:	9b04      	ldr	r3, [sp, #16]
 8014662:	f100 3aff 	add.w	sl, r0, #4294967295
 8014666:	7e9b      	ldrb	r3, [r3, #26]
 8014668:	f003 0306 	and.w	r3, r3, #6
    if(ext->align == LV_LABEL_ALIGN_CENTER) {
 801466c:	2b02      	cmp	r3, #2
 801466e:	d044      	beq.n	80146fa <lv_label_get_letter_on+0x13e>
    lv_coord_t x = 0;
 8014670:	2400      	movs	r4, #0
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 8014672:	2300      	movs	r3, #0
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8014674:	f00b 0801 	and.w	r8, fp, #1
    while(i < new_line_start - 1) {
 8014678:	46a9      	mov	r9, r5
        letter = lv_txt_encoded_next(txt, &i);    /*Be careful 'i' already points to the next character*/
 801467a:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 8014748 <lv_label_get_letter_on+0x18c>
    uint32_t i = line_start;
 801467e:	9507      	str	r5, [sp, #28]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 8014680:	f88d 301b 	strb.w	r3, [sp, #27]
    while(i < new_line_start - 1) {
 8014684:	45aa      	cmp	sl, r5
        letter = lv_txt_encoded_next(txt, &i);    /*Be careful 'i' already points to the next character*/
 8014686:	a907      	add	r1, sp, #28
 8014688:	4630      	mov	r0, r6
    while(i < new_line_start - 1) {
 801468a:	d912      	bls.n	80146b2 <lv_label_get_letter_on+0xf6>
        letter = lv_txt_encoded_next(txt, &i);    /*Be careful 'i' already points to the next character*/
 801468c:	f8db 3000 	ldr.w	r3, [fp]
 8014690:	4798      	blx	r3
 8014692:	4605      	mov	r5, r0
            if(lv_txt_is_cmd(&cmd_state, txt[i]) != false) {
 8014694:	f10d 001b 	add.w	r0, sp, #27
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8014698:	f1b8 0f00 	cmp.w	r8, #0
 801469c:	d012      	beq.n	80146c4 <lv_label_get_letter_on+0x108>
            if(lv_txt_is_cmd(&cmd_state, txt[i]) != false) {
 801469e:	9b07      	ldr	r3, [sp, #28]
 80146a0:	5cf1      	ldrb	r1, [r6, r3]
 80146a2:	f7fc fa6f 	bl	8010b84 <lv_txt_is_cmd>
 80146a6:	b168      	cbz	r0, 80146c4 <lv_label_get_letter_on+0x108>
 80146a8:	9d07      	ldr	r5, [sp, #28]
        letter = lv_txt_encoded_next(txt, &i);    /*Be careful 'i' already points to the next character*/
 80146aa:	a907      	add	r1, sp, #28
 80146ac:	4630      	mov	r0, r6
    while(i < new_line_start - 1) {
 80146ae:	45aa      	cmp	sl, r5
 80146b0:	d8ec      	bhi.n	801468c <lv_label_get_letter_on+0xd0>
    return lv_encoded_get_char_id(txt, i);
 80146b2:	4b24      	ldr	r3, [pc, #144]	; (8014744 <lv_label_get_letter_on+0x188>)
 80146b4:	4629      	mov	r1, r5
 80146b6:	4630      	mov	r0, r6
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	4798      	blx	r3
}
 80146bc:	b280      	uxth	r0, r0
 80146be:	b009      	add	sp, #36	; 0x24
 80146c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        x += lv_font_get_width(font, letter);
 80146c4:	4629      	mov	r1, r5
 80146c6:	9802      	ldr	r0, [sp, #8]
 80146c8:	f7fb fa6c 	bl	800fba4 <lv_font_get_width>
 80146cc:	4420      	add	r0, r4
        if(pos->x < x) {
 80146ce:	9b03      	ldr	r3, [sp, #12]
        x += lv_font_get_width(font, letter);
 80146d0:	b280      	uxth	r0, r0
        if(pos->x < x) {
 80146d2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80146d6:	b203      	sxth	r3, r0
 80146d8:	429a      	cmp	r2, r3
 80146da:	db2a      	blt.n	8014732 <lv_label_get_letter_on+0x176>
        x += style->text.letter_space;
 80146dc:	8e3c      	ldrh	r4, [r7, #48]	; 0x30
        i_current = i;
 80146de:	f8dd 901c 	ldr.w	r9, [sp, #28]
        x += style->text.letter_space;
 80146e2:	4420      	add	r0, r4
        i_current = i;
 80146e4:	464d      	mov	r5, r9
        x += style->text.letter_space;
 80146e6:	b204      	sxth	r4, r0
 80146e8:	e7cc      	b.n	8014684 <lv_label_get_letter_on+0xc8>
 80146ea:	9b04      	ldr	r3, [sp, #16]
 80146ec:	f100 3aff 	add.w	sl, r0, #4294967295
 80146f0:	7e9b      	ldrb	r3, [r3, #26]
 80146f2:	f003 0306 	and.w	r3, r3, #6
    if(ext->align == LV_LABEL_ALIGN_CENTER) {
 80146f6:	2b02      	cmp	r3, #2
 80146f8:	d1ba      	bne.n	8014670 <lv_label_get_letter_on+0xb4>
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start,
 80146fa:	1b41      	subs	r1, r0, r5
 80146fc:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8014700:	4640      	mov	r0, r8
 8014702:	9a02      	ldr	r2, [sp, #8]
 8014704:	b289      	uxth	r1, r1
 8014706:	f8cd b000 	str.w	fp, [sp]
 801470a:	f7fc f97d 	bl	8010a08 <lv_txt_get_width>
 801470e:	4680      	mov	r8, r0
        x += lv_obj_get_width(label) / 2 - line_w / 2;
 8014710:	9805      	ldr	r0, [sp, #20]
 8014712:	f7f5 f971 	bl	80099f8 <lv_obj_get_width>
 8014716:	2800      	cmp	r0, #0
 8014718:	bfb8      	it	lt
 801471a:	3001      	addlt	r0, #1
 801471c:	f1b8 0f00 	cmp.w	r8, #0
 8014720:	ea4f 0460 	mov.w	r4, r0, asr #1
 8014724:	bfb8      	it	lt
 8014726:	f108 0801 	addlt.w	r8, r8, #1
 801472a:	eba4 0468 	sub.w	r4, r4, r8, asr #1
 801472e:	b224      	sxth	r4, r4
 8014730:	e79f      	b.n	8014672 <lv_label_get_letter_on+0xb6>
            i = i_current;
 8014732:	f8cd 901c 	str.w	r9, [sp, #28]
            break;
 8014736:	464d      	mov	r5, r9
 8014738:	e7bb      	b.n	80146b2 <lv_label_get_letter_on+0xf6>
    while(txt[line_start] != '\0') {
 801473a:	46b0      	mov	r8, r6
 801473c:	f04f 3aff 	mov.w	sl, #4294967295
 8014740:	4628      	mov	r0, r5
 8014742:	e793      	b.n	801466c <lv_label_get_letter_on+0xb0>
 8014744:	200000c0 	.word	0x200000c0
 8014748:	200000b0 	.word	0x200000b0

0801474c <lv_label_refr_text>:
{
 801474c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014750:	b093      	sub	sp, #76	; 0x4c
 8014752:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8014754:	f7f5 fa76 	bl	8009c44 <lv_obj_get_ext_attr>
    if(ext->text == NULL) return;
 8014758:	6803      	ldr	r3, [r0, #0]
 801475a:	b38b      	cbz	r3, 80147c0 <lv_label_refr_text+0x74>
 801475c:	4604      	mov	r4, r0
    lv_coord_t max_w = lv_obj_get_width(label);
 801475e:	4628      	mov	r0, r5
 8014760:	f7f5 f94a 	bl	80099f8 <lv_obj_get_width>
 8014764:	4606      	mov	r6, r0
    lv_style_t * style = lv_obj_get_style(label);
 8014766:	4628      	mov	r0, r5
 8014768:	f7f5 f952 	bl	8009a10 <lv_obj_get_style>
    if(ext->long_mode == LV_LABEL_LONG_EXPAND ||
 801476c:	7921      	ldrb	r1, [r4, #4]
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 801476e:	7ea3      	ldrb	r3, [r4, #26]
        max_w = LV_COORD_MAX;
 8014770:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8014774:	f011 0ffd 	tst.w	r1, #253	; 0xfd
    const lv_font_t * font = style->text.font;
 8014778:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
    lv_style_t * style = lv_obj_get_style(label);
 801477a:	4680      	mov	r8, r0
    lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 801477c:	f3c3 00c0 	ubfx	r0, r3, #3, #1
        max_w = LV_COORD_MAX;
 8014780:	bf08      	it	eq
 8014782:	4616      	moveq	r6, r2
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 8014784:	06db      	lsls	r3, r3, #27
    lv_txt_get_size(&size, ext->text, font, style->text.letter_space, style->text.line_space, max_w, flag);
 8014786:	6821      	ldr	r1, [r4, #0]
 8014788:	463a      	mov	r2, r7
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 801478a:	bf48      	it	mi
 801478c:	f040 0002 	orrmi.w	r0, r0, #2
    lv_txt_get_size(&size, ext->text, font, style->text.letter_space, style->text.line_space, max_w, flag);
 8014790:	f9b8 3030 	ldrsh.w	r3, [r8, #48]	; 0x30
 8014794:	9601      	str	r6, [sp, #4]
 8014796:	9002      	str	r0, [sp, #8]
 8014798:	a807      	add	r0, sp, #28
 801479a:	f9b8 6032 	ldrsh.w	r6, [r8, #50]	; 0x32
 801479e:	9600      	str	r6, [sp, #0]
 80147a0:	f7fc f986 	bl	8010ab0 <lv_txt_get_size>
    if(ext->long_mode == LV_LABEL_LONG_EXPAND || ext->long_mode == LV_LABEL_LONG_SCROLL) {
 80147a4:	7923      	ldrb	r3, [r4, #4]
 80147a6:	f013 06fd 	ands.w	r6, r3, #253	; 0xfd
 80147aa:	d00c      	beq.n	80147c6 <lv_label_refr_text+0x7a>
    else if(ext->long_mode == LV_LABEL_LONG_ROLL) {
 80147ac:	2b04      	cmp	r3, #4
 80147ae:	d06d      	beq.n	801488c <lv_label_refr_text+0x140>
    } else if(ext->long_mode == LV_LABEL_LONG_DOT) {
 80147b0:	2b03      	cmp	r3, #3
 80147b2:	f000 80aa 	beq.w	801490a <lv_label_refr_text+0x1be>
    else if(ext->long_mode == LV_LABEL_LONG_BREAK) {
 80147b6:	2b01      	cmp	r3, #1
 80147b8:	d062      	beq.n	8014880 <lv_label_refr_text+0x134>
    lv_obj_invalidate(label);
 80147ba:	4628      	mov	r0, r5
 80147bc:	f7f4 fb3c 	bl	8008e38 <lv_obj_invalidate>
}
 80147c0:	b013      	add	sp, #76	; 0x4c
 80147c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_obj_set_size(label, size.x, size.y);
 80147c6:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 80147ca:	4628      	mov	r0, r5
 80147cc:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
 80147d0:	f7f4 fd6c 	bl	80092ac <lv_obj_set_size>
        if(ext->long_mode == LV_LABEL_LONG_SCROLL) {
 80147d4:	7923      	ldrb	r3, [r4, #4]
 80147d6:	2b02      	cmp	r3, #2
 80147d8:	d1ef      	bne.n	80147ba <lv_label_refr_text+0x6e>
            lv_anim_del(label, (lv_anim_fp_t) lv_obj_set_x);
 80147da:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 8014a9c <lv_label_refr_text+0x350>
            lv_obj_t * parent = lv_obj_get_parent(label);
 80147de:	4628      	mov	r0, r5
            lv_anim_del(label, (lv_anim_fp_t) lv_obj_set_y);
 80147e0:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 8014aa0 <lv_label_refr_text+0x354>
            lv_obj_t * parent = lv_obj_get_parent(label);
 80147e4:	f7f5 f858 	bl	8009898 <lv_obj_get_parent>
            lv_anim_del(label, (lv_anim_fp_t) lv_obj_set_x);
 80147e8:	4651      	mov	r1, sl
            lv_obj_t * parent = lv_obj_get_parent(label);
 80147ea:	4681      	mov	r9, r0
            lv_anim_del(label, (lv_anim_fp_t) lv_obj_set_x);
 80147ec:	4628      	mov	r0, r5
 80147ee:	f7fa ffed 	bl	800f7cc <lv_anim_del>
            lv_anim_del(label, (lv_anim_fp_t) lv_obj_set_y);
 80147f2:	4659      	mov	r1, fp
 80147f4:	4628      	mov	r0, r5
 80147f6:	f7fa ffe9 	bl	800f7cc <lv_anim_del>
            anim.repeat = 1;
 80147fa:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
            anim.path = lv_anim_path_linear;
 80147fe:	4aa2      	ldr	r2, [pc, #648]	; (8014a88 <lv_label_refr_text+0x33c>)
            anim.playback_pause = (((lv_font_get_width(style->text.font, ' ') +
 8014800:	2120      	movs	r1, #32
            anim.playback = 1;
 8014802:	f043 0303 	orr.w	r3, r3, #3
            anim.start = 0;
 8014806:	960d      	str	r6, [sp, #52]	; 0x34
            anim.var = label;
 8014808:	9509      	str	r5, [sp, #36]	; 0x24
            anim.playback = 1;
 801480a:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
            anim.playback_pause = (((lv_font_get_width(style->text.font, ' ') +
 801480e:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
            anim.act_time = 0;
 8014812:	f8ad 603e 	strh.w	r6, [sp, #62]	; 0x3e
            anim.end_cb = NULL;
 8014816:	960b      	str	r6, [sp, #44]	; 0x2c
            anim.path = lv_anim_path_linear;
 8014818:	920c      	str	r2, [sp, #48]	; 0x30
            anim.playback_pause = (((lv_font_get_width(style->text.font, ' ') +
 801481a:	f7fb f9c3 	bl	800fba4 <lv_font_get_width>
                                     style->text.letter_space) * 1000) / ext->anim_speed) * ANIM_WAIT_CHAR_COUNT;
 801481e:	f9b8 2030 	ldrsh.w	r2, [r8, #48]	; 0x30
 8014822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014826:	8aa1      	ldrh	r1, [r4, #20]
            anim.playback_pause = (((lv_font_get_width(style->text.font, ' ') +
 8014828:	4402      	add	r2, r0
            if(lv_obj_get_width(label) > lv_obj_get_width(parent)) {
 801482a:	4628      	mov	r0, r5
                                     style->text.letter_space) * 1000) / ext->anim_speed) * ANIM_WAIT_CHAR_COUNT;
 801482c:	fb03 f302 	mul.w	r3, r3, r2
 8014830:	fb93 f3f1 	sdiv	r3, r3, r1
            anim.playback_pause = (((lv_font_get_width(style->text.font, ' ') +
 8014834:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014838:	b29b      	uxth	r3, r3
 801483a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            anim.repeat_pause = anim.playback_pause;
 801483e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            if(lv_obj_get_width(label) > lv_obj_get_width(parent)) {
 8014842:	f7f5 f8d9 	bl	80099f8 <lv_obj_get_width>
 8014846:	4606      	mov	r6, r0
 8014848:	4648      	mov	r0, r9
 801484a:	f7f5 f8d5 	bl	80099f8 <lv_obj_get_width>
 801484e:	4286      	cmp	r6, r0
 8014850:	f340 80cf 	ble.w	80149f2 <lv_label_refr_text+0x2a6>
                anim.end = lv_obj_get_width(parent) - lv_obj_get_width(label);
 8014854:	4648      	mov	r0, r9
 8014856:	f7f5 f8cf 	bl	80099f8 <lv_obj_get_width>
 801485a:	4606      	mov	r6, r0
 801485c:	4628      	mov	r0, r5
 801485e:	f7f5 f8cb 	bl	80099f8 <lv_obj_get_width>
 8014862:	1a36      	subs	r6, r6, r0
                anim.time = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 8014864:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014866:	8aa0      	ldrh	r0, [r4, #20]
 8014868:	4632      	mov	r2, r6
                anim.end = lv_obj_get_width(parent) - lv_obj_get_width(label);
 801486a:	960e      	str	r6, [sp, #56]	; 0x38
                anim.fp = (lv_anim_fp_t) lv_obj_set_x;
 801486c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
                anim.time = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 8014870:	f7fb f81e 	bl	800f8b0 <lv_anim_speed_to_time>
 8014874:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
                lv_anim_create(&anim);
 8014878:	a809      	add	r0, sp, #36	; 0x24
 801487a:	f7fa ffe1 	bl	800f840 <lv_anim_create>
 801487e:	e79c      	b.n	80147ba <lv_label_refr_text+0x6e>
        lv_obj_set_height(label, size.y);
 8014880:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8014884:	4628      	mov	r0, r5
 8014886:	f7f4 fd4f 	bl	8009328 <lv_obj_set_height>
 801488a:	e796      	b.n	80147ba <lv_label_refr_text+0x6e>
        anim.repeat = 1;
 801488c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
        anim.start = 0;
 8014890:	2600      	movs	r6, #0
        anim.path = lv_anim_path_linear;
 8014892:	4a7d      	ldr	r2, [pc, #500]	; (8014a88 <lv_label_refr_text+0x33c>)
        anim.playback_pause = (((lv_font_get_width(style->text.font, ' ') + style->text.letter_space) * 1000) / ext->anim_speed) * ANIM_WAIT_CHAR_COUNT;;
 8014894:	2120      	movs	r1, #32
        anim.playback = 1;
 8014896:	f043 0303 	orr.w	r3, r3, #3
        anim.var = label;
 801489a:	9509      	str	r5, [sp, #36]	; 0x24
        anim.start = 0;
 801489c:	960d      	str	r6, [sp, #52]	; 0x34
        anim.playback = 1;
 801489e:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
        anim.playback_pause = (((lv_font_get_width(style->text.font, ' ') + style->text.letter_space) * 1000) / ext->anim_speed) * ANIM_WAIT_CHAR_COUNT;;
 80148a2:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
        anim.path = lv_anim_path_linear;
 80148a6:	920c      	str	r2, [sp, #48]	; 0x30
        anim.act_time = 0;
 80148a8:	f8ad 603e 	strh.w	r6, [sp, #62]	; 0x3e
        anim.end_cb = NULL;
 80148ac:	960b      	str	r6, [sp, #44]	; 0x2c
        anim.playback_pause = (((lv_font_get_width(style->text.font, ' ') + style->text.letter_space) * 1000) / ext->anim_speed) * ANIM_WAIT_CHAR_COUNT;;
 80148ae:	f7fb f979 	bl	800fba4 <lv_font_get_width>
 80148b2:	f9b8 2030 	ldrsh.w	r2, [r8, #48]	; 0x30
 80148b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80148ba:	8aa1      	ldrh	r1, [r4, #20]
 80148bc:	4410      	add	r0, r2
        if(size.x > lv_obj_get_width(label)) {
 80148be:	f9bd 801c 	ldrsh.w	r8, [sp, #28]
        anim.playback_pause = (((lv_font_get_width(style->text.font, ' ') + style->text.letter_space) * 1000) / ext->anim_speed) * ANIM_WAIT_CHAR_COUNT;;
 80148c2:	fb03 f300 	mul.w	r3, r3, r0
        if(size.x > lv_obj_get_width(label)) {
 80148c6:	4628      	mov	r0, r5
        anim.playback_pause = (((lv_font_get_width(style->text.font, ' ') + style->text.letter_space) * 1000) / ext->anim_speed) * ANIM_WAIT_CHAR_COUNT;;
 80148c8:	fb93 f3f1 	sdiv	r3, r3, r1
 80148cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80148d0:	b29b      	uxth	r3, r3
 80148d2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        anim.repeat_pause =  anim.playback_pause;
 80148d6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        if(size.x > lv_obj_get_width(label)) {
 80148da:	f7f5 f88d 	bl	80099f8 <lv_obj_get_width>
 80148de:	4580      	cmp	r8, r0
 80148e0:	dc1e      	bgt.n	8014920 <lv_label_refr_text+0x1d4>
            lv_anim_del(label, (lv_anim_fp_t) lv_label_set_offset_x);
 80148e2:	496a      	ldr	r1, [pc, #424]	; (8014a8c <lv_label_refr_text+0x340>)
 80148e4:	4628      	mov	r0, r5
 80148e6:	f7fa ff71 	bl	800f7cc <lv_anim_del>
        if(size.y > lv_obj_get_height(label) && hor_anim == false) {
 80148ea:	f9bd 801e 	ldrsh.w	r8, [sp, #30]
            ext->offset.x = 0;
 80148ee:	82e6      	strh	r6, [r4, #22]
        if(size.y > lv_obj_get_height(label) && hor_anim == false) {
 80148f0:	4628      	mov	r0, r5
 80148f2:	f7f5 f887 	bl	8009a04 <lv_obj_get_height>
 80148f6:	4580      	cmp	r8, r0
 80148f8:	f300 809e 	bgt.w	8014a38 <lv_label_refr_text+0x2ec>
            lv_anim_del(label, (lv_anim_fp_t) lv_label_set_offset_y);
 80148fc:	4964      	ldr	r1, [pc, #400]	; (8014a90 <lv_label_refr_text+0x344>)
 80148fe:	4628      	mov	r0, r5
 8014900:	f7fa ff64 	bl	800f7cc <lv_anim_del>
            ext->offset.y = 0;
 8014904:	2300      	movs	r3, #0
 8014906:	8323      	strh	r3, [r4, #24]
 8014908:	e757      	b.n	80147ba <lv_label_refr_text+0x6e>
        if(size.y <= lv_obj_get_height(label)) {                /*No dots are required, the text is short enough*/
 801490a:	f9bd 601e 	ldrsh.w	r6, [sp, #30]
 801490e:	4628      	mov	r0, r5
 8014910:	f7f5 f878 	bl	8009a04 <lv_obj_get_height>
 8014914:	4286      	cmp	r6, r0
 8014916:	dc1a      	bgt.n	801494e <lv_label_refr_text+0x202>
            ext->dot_end = LV_LABEL_DOT_END_INV;
 8014918:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801491c:	8263      	strh	r3, [r4, #18]
 801491e:	e74c      	b.n	80147ba <lv_label_refr_text+0x6e>
            anim.end = lv_obj_get_width(label) - size.x;
 8014920:	4628      	mov	r0, r5
            anim.fp = (lv_anim_fp_t) lv_label_set_offset_x;
 8014922:	4e5a      	ldr	r6, [pc, #360]	; (8014a8c <lv_label_refr_text+0x340>)
            anim.end = lv_obj_get_width(label) - size.x;
 8014924:	f7f5 f868 	bl	80099f8 <lv_obj_get_width>
 8014928:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
            anim.time = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 801492c:	990d      	ldr	r1, [sp, #52]	; 0x34
            anim.end = lv_obj_get_width(label) - size.x;
 801492e:	1ac3      	subs	r3, r0, r3
            anim.time = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 8014930:	8aa0      	ldrh	r0, [r4, #20]
            anim.fp = (lv_anim_fp_t) lv_label_set_offset_x;
 8014932:	960a      	str	r6, [sp, #40]	; 0x28
            anim.time = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 8014934:	461a      	mov	r2, r3
            anim.end = lv_obj_get_width(label) - size.x;
 8014936:	930e      	str	r3, [sp, #56]	; 0x38
            anim.time = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 8014938:	f7fa ffba 	bl	800f8b0 <lv_anim_speed_to_time>
 801493c:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
            lv_anim_create(&anim);
 8014940:	a809      	add	r0, sp, #36	; 0x24
 8014942:	f7fa ff7d 	bl	800f840 <lv_anim_create>
        if(size.y > lv_obj_get_height(label) && hor_anim == false) {
 8014946:	4628      	mov	r0, r5
 8014948:	f7f5 f85c 	bl	8009a04 <lv_obj_get_height>
 801494c:	e7d6      	b.n	80148fc <lv_label_refr_text+0x1b0>
        } else if(lv_txt_get_encoded_length(ext->text) <= LV_LABEL_DOT_NUM) {     /*Don't turn to dots all the characters*/
 801494e:	4b51      	ldr	r3, [pc, #324]	; (8014a94 <lv_label_refr_text+0x348>)
 8014950:	6820      	ldr	r0, [r4, #0]
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	4798      	blx	r3
 8014956:	2803      	cmp	r0, #3
 8014958:	d9de      	bls.n	8014918 <lv_label_refr_text+0x1cc>
            p.x = lv_obj_get_width(label) - (lv_font_get_width(style->text.font, '.') + style->text.letter_space) * LV_LABEL_DOT_NUM; /*Shrink with dots*/
 801495a:	4628      	mov	r0, r5
            uint32_t byte_id = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 801495c:	2704      	movs	r7, #4
            p.x = lv_obj_get_width(label) - (lv_font_get_width(style->text.font, '.') + style->text.letter_space) * LV_LABEL_DOT_NUM; /*Shrink with dots*/
 801495e:	f7f5 f84b 	bl	80099f8 <lv_obj_get_width>
 8014962:	212e      	movs	r1, #46	; 0x2e
 8014964:	4681      	mov	r9, r0
 8014966:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
 801496a:	f7fb f91b 	bl	800fba4 <lv_font_get_width>
 801496e:	f9b8 3030 	ldrsh.w	r3, [r8, #48]	; 0x30
            uint8_t len = 0;
 8014972:	2600      	movs	r6, #0
 8014974:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8014aa4 <lv_label_refr_text+0x358>
            p.x = lv_obj_get_width(label) - (lv_font_get_width(style->text.font, '.') + style->text.letter_space) * LV_LABEL_DOT_NUM; /*Shrink with dots*/
 8014978:	4403      	add	r3, r0
            p.y = lv_obj_get_height(label);
 801497a:	4628      	mov	r0, r5
 801497c:	f8df a128 	ldr.w	sl, [pc, #296]	; 8014aa8 <lv_label_refr_text+0x35c>
            p.x = lv_obj_get_width(label) - (lv_font_get_width(style->text.font, '.') + style->text.letter_space) * LV_LABEL_DOT_NUM; /*Shrink with dots*/
 8014980:	ebc3 3283 	rsb	r2, r3, r3, lsl #14
 8014984:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8014988:	444b      	add	r3, r9
            uint32_t byte_id = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 801498a:	f10d 0948 	add.w	r9, sp, #72	; 0x48
            p.x = lv_obj_get_width(label) - (lv_font_get_width(style->text.font, '.') + style->text.letter_space) * LV_LABEL_DOT_NUM; /*Shrink with dots*/
 801498e:	f8ad 3020 	strh.w	r3, [sp, #32]
            p.y = lv_obj_get_height(label);
 8014992:	f7f5 f837 	bl	8009a04 <lv_obj_get_height>
 8014996:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 801499a:	4603      	mov	r3, r0
            p.y -= p.y  % (lv_font_get_height(style->text.font) + style->text.line_space);   /*Round down to the last line*/
 801499c:	f9b8 e032 	ldrsh.w	lr, [r8, #50]	; 0x32
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 80149a0:	a908      	add	r1, sp, #32
            p.y -= p.y  % (lv_font_get_height(style->text.font) + style->text.line_space);   /*Round down to the last line*/
 80149a2:	f892 2020 	ldrb.w	r2, [r2, #32]
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 80149a6:	4628      	mov	r0, r5
            p.y -= p.y  % (lv_font_get_height(style->text.font) + style->text.line_space);   /*Round down to the last line*/
 80149a8:	4472      	add	r2, lr
 80149aa:	fb93 fcf2 	sdiv	ip, r3, r2
 80149ae:	fb02 321c 	mls	r2, r2, ip, r3
 80149b2:	1a9b      	subs	r3, r3, r2
            p.y -= style->text.line_space;                                                      /*Trim the last line space*/
 80149b4:	eba3 030e 	sub.w	r3, r3, lr
 80149b8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 80149bc:	f7ff fdfe 	bl	80145bc <lv_label_get_letter_on>
            uint32_t byte_id = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 80149c0:	4b35      	ldr	r3, [pc, #212]	; (8014a98 <lv_label_refr_text+0x34c>)
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 80149c2:	4601      	mov	r1, r0
 80149c4:	9005      	str	r0, [sp, #20]
            uint32_t byte_id = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	6820      	ldr	r0, [r4, #0]
 80149ca:	4798      	blx	r3
 80149cc:	4680      	mov	r8, r0
 80149ce:	f849 0d24 	str.w	r0, [r9, #-36]!
                len += lv_txt_encoded_size(&ext->text[byte_id]);
 80149d2:	6822      	ldr	r2, [r4, #0]
 80149d4:	f8db 3000 	ldr.w	r3, [fp]
 80149d8:	4410      	add	r0, r2
 80149da:	4798      	blx	r3
                lv_txt_encoded_next(ext->text, &byte_id);
 80149dc:	f8da 3000 	ldr.w	r3, [sl]
                len += lv_txt_encoded_size(&ext->text[byte_id]);
 80149e0:	4406      	add	r6, r0
                lv_txt_encoded_next(ext->text, &byte_id);
 80149e2:	4649      	mov	r1, r9
 80149e4:	6820      	ldr	r0, [r4, #0]
 80149e6:	4798      	blx	r3
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++)  {
 80149e8:	3f01      	subs	r7, #1
                len += lv_txt_encoded_size(&ext->text[byte_id]);
 80149ea:	b2f6      	uxtb	r6, r6
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++)  {
 80149ec:	d032      	beq.n	8014a54 <lv_label_refr_text+0x308>
 80149ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80149f0:	e7ef      	b.n	80149d2 <lv_label_refr_text+0x286>
            } else if(lv_obj_get_height(label) > lv_obj_get_height(parent)) {
 80149f2:	4628      	mov	r0, r5
 80149f4:	f7f5 f806 	bl	8009a04 <lv_obj_get_height>
 80149f8:	4606      	mov	r6, r0
 80149fa:	4648      	mov	r0, r9
 80149fc:	f7f5 f802 	bl	8009a04 <lv_obj_get_height>
 8014a00:	4286      	cmp	r6, r0
 8014a02:	f77f aeda 	ble.w	80147ba <lv_label_refr_text+0x6e>
                anim.end =  lv_obj_get_height(parent) - lv_obj_get_height(label) - lv_font_get_height(font);
 8014a06:	4648      	mov	r0, r9
 8014a08:	f7f4 fffc 	bl	8009a04 <lv_obj_get_height>
 8014a0c:	4606      	mov	r6, r0
 8014a0e:	4628      	mov	r0, r5
 8014a10:	f7f4 fff8 	bl	8009a04 <lv_obj_get_height>
 8014a14:	f897 2020 	ldrb.w	r2, [r7, #32]
 8014a18:	1a33      	subs	r3, r6, r0
                anim.time = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 8014a1a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014a1c:	8aa0      	ldrh	r0, [r4, #20]
                anim.end =  lv_obj_get_height(parent) - lv_obj_get_height(label) - lv_font_get_height(font);
 8014a1e:	1a9b      	subs	r3, r3, r2
                anim.fp = (lv_anim_fp_t)lv_obj_set_y;
 8014a20:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
            anim.time = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 8014a24:	461a      	mov	r2, r3
            anim.end =  lv_obj_get_height(label) - size.y - (lv_font_get_height(font));
 8014a26:	930e      	str	r3, [sp, #56]	; 0x38
            anim.time = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 8014a28:	f7fa ff42 	bl	800f8b0 <lv_anim_speed_to_time>
 8014a2c:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
            lv_anim_create(&anim);
 8014a30:	a809      	add	r0, sp, #36	; 0x24
 8014a32:	f7fa ff05 	bl	800f840 <lv_anim_create>
 8014a36:	e6c0      	b.n	80147ba <lv_label_refr_text+0x6e>
            anim.end =  lv_obj_get_height(label) - size.y - (lv_font_get_height(font));
 8014a38:	4628      	mov	r0, r5
 8014a3a:	f7f4 ffe3 	bl	8009a04 <lv_obj_get_height>
 8014a3e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8014a42:	f897 1020 	ldrb.w	r1, [r7, #32]
 8014a46:	1ac3      	subs	r3, r0, r3
            anim.fp = (lv_anim_fp_t)lv_label_set_offset_y;
 8014a48:	4a11      	ldr	r2, [pc, #68]	; (8014a90 <lv_label_refr_text+0x344>)
            anim.time = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 8014a4a:	8aa0      	ldrh	r0, [r4, #20]
            anim.end =  lv_obj_get_height(label) - size.y - (lv_font_get_height(font));
 8014a4c:	1a5b      	subs	r3, r3, r1
            anim.fp = (lv_anim_fp_t)lv_label_set_offset_y;
 8014a4e:	920a      	str	r2, [sp, #40]	; 0x28
            anim.time = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 8014a50:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014a52:	e7e7      	b.n	8014a24 <lv_label_refr_text+0x2d8>
            memcpy(ext->dot_tmp, &ext->text[byte_id_ori], len);
 8014a54:	4620      	mov	r0, r4
 8014a56:	4632      	mov	r2, r6
            ext->dot_tmp[len] = '\0';       /*Close with a zero*/
 8014a58:	4426      	add	r6, r4
            memcpy(ext->dot_tmp, &ext->text[byte_id_ori], len);
 8014a5a:	f850 9b05 	ldr.w	r9, [r0], #5
 8014a5e:	eb09 0108 	add.w	r1, r9, r8
 8014a62:	f004 fe2d 	bl	80196c0 <memcpy>
                ext->text[byte_id_ori + i] = '.';
 8014a66:	212e      	movs	r1, #46	; 0x2e
            ext->dot_tmp[len] = '\0';       /*Close with a zero*/
 8014a68:	7177      	strb	r7, [r6, #5]
                ext->text[byte_id_ori + i] = '.';
 8014a6a:	f809 1008 	strb.w	r1, [r9, r8]
 8014a6e:	6822      	ldr	r2, [r4, #0]
            ext->dot_end = letter_id + LV_LABEL_DOT_NUM;
 8014a70:	9b05      	ldr	r3, [sp, #20]
                ext->text[byte_id_ori + i] = '.';
 8014a72:	4442      	add	r2, r8
            ext->dot_end = letter_id + LV_LABEL_DOT_NUM;
 8014a74:	3303      	adds	r3, #3
                ext->text[byte_id_ori + i] = '.';
 8014a76:	7051      	strb	r1, [r2, #1]
 8014a78:	6822      	ldr	r2, [r4, #0]
 8014a7a:	4442      	add	r2, r8
 8014a7c:	7091      	strb	r1, [r2, #2]
            ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 8014a7e:	6822      	ldr	r2, [r4, #0]
 8014a80:	4442      	add	r2, r8
 8014a82:	70d7      	strb	r7, [r2, #3]
            ext->dot_end = letter_id + LV_LABEL_DOT_NUM;
 8014a84:	8263      	strh	r3, [r4, #18]
 8014a86:	e698      	b.n	80147ba <lv_label_refr_text+0x6e>
 8014a88:	0800f8dd 	.word	0x0800f8dd
 8014a8c:	08014259 	.word	0x08014259
 8014a90:	08014241 	.word	0x08014241
 8014a94:	200000bc 	.word	0x200000bc
 8014a98:	200000b8 	.word	0x200000b8
 8014a9c:	08009281 	.word	0x08009281
 8014aa0:	08009295 	.word	0x08009295
 8014aa4:	200000ac 	.word	0x200000ac
 8014aa8:	200000b0 	.word	0x200000b0

08014aac <lv_label_signal>:
    res = ancestor_signal(label, sign, param);
 8014aac:	4b31      	ldr	r3, [pc, #196]	; (8014b74 <lv_label_signal+0xc8>)
{
 8014aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = ancestor_signal(label, sign, param);
 8014ab2:	681b      	ldr	r3, [r3, #0]
{
 8014ab4:	4606      	mov	r6, r0
 8014ab6:	460d      	mov	r5, r1
 8014ab8:	4617      	mov	r7, r2
    res = ancestor_signal(label, sign, param);
 8014aba:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8014abc:	2801      	cmp	r0, #1
    res = ancestor_signal(label, sign, param);
 8014abe:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
 8014ac0:	d002      	beq.n	8014ac8 <lv_label_signal+0x1c>
}
 8014ac2:	4620      	mov	r0, r4
 8014ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8014ac8:	4630      	mov	r0, r6
 8014aca:	f7f5 f8bb 	bl	8009c44 <lv_obj_get_ext_attr>
 8014ace:	4680      	mov	r8, r0
    if(sign ==  LV_SIGNAL_CLEANUP) {
 8014ad0:	b94d      	cbnz	r5, 8014ae6 <lv_label_signal+0x3a>
        if(ext->static_txt == 0) {
 8014ad2:	7e83      	ldrb	r3, [r0, #26]
 8014ad4:	f013 0501 	ands.w	r5, r3, #1
 8014ad8:	d1f3      	bne.n	8014ac2 <lv_label_signal+0x16>
            lv_mem_free(ext->text);
 8014ada:	6800      	ldr	r0, [r0, #0]
 8014adc:	f7fb fad4 	bl	8010088 <lv_mem_free>
            ext->text = NULL;
 8014ae0:	f8c8 5000 	str.w	r5, [r8]
 8014ae4:	e7ed      	b.n	8014ac2 <lv_label_signal+0x16>
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 8014ae6:	2d03      	cmp	r5, #3
 8014ae8:	d03d      	beq.n	8014b66 <lv_label_signal+0xba>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 8014aea:	2d02      	cmp	r5, #2
 8014aec:	d023      	beq.n	8014b36 <lv_label_signal+0x8a>
    } else if(sign == LV_SIGNAL_REFR_EXT_SIZE) {
 8014aee:	2d04      	cmp	r5, #4
 8014af0:	d00d      	beq.n	8014b0e <lv_label_signal+0x62>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8014af2:	2d06      	cmp	r5, #6
 8014af4:	d1e5      	bne.n	8014ac2 <lv_label_signal+0x16>
 8014af6:	1f3a      	subs	r2, r7, #4
 8014af8:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 8014afa:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8014afe:	b111      	cbz	r1, 8014b06 <lv_label_signal+0x5a>
 8014b00:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) {  /*Find the last set data*/
 8014b02:	2b07      	cmp	r3, #7
 8014b04:	d1f9      	bne.n	8014afa <lv_label_signal+0x4e>
        buf->type[i] = "lv_label";
 8014b06:	4a1c      	ldr	r2, [pc, #112]	; (8014b78 <lv_label_signal+0xcc>)
 8014b08:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 8014b0c:	e7d9      	b.n	8014ac2 <lv_label_signal+0x16>
        if(ext->body_draw) {
 8014b0e:	7e83      	ldrb	r3, [r0, #26]
 8014b10:	069b      	lsls	r3, r3, #26
 8014b12:	d5d6      	bpl.n	8014ac2 <lv_label_signal+0x16>
 * @param label pointer to an label object
 * @return pointer to the label's style
 */
static inline lv_style_t* lv_label_get_style(const lv_obj_t *label)
{
    return lv_obj_get_style(label);
 8014b14:	4630      	mov	r0, r6
 8014b16:	f7f4 ff7b 	bl	8009a10 <lv_obj_get_style>
            label->ext_size = LV_MATH_MAX(label->ext_size, style->body.padding.ver);
 8014b1a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8014b1e:	f9b0 1020 	ldrsh.w	r1, [r0, #32]
 8014b22:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
 8014b26:	428b      	cmp	r3, r1
 8014b28:	bfb8      	it	lt
 8014b2a:	460b      	movlt	r3, r1
 8014b2c:	4293      	cmp	r3, r2
 8014b2e:	bfb8      	it	lt
 8014b30:	4613      	movlt	r3, r2
 8014b32:	86b3      	strh	r3, [r6, #52]	; 0x34
 8014b34:	e7c5      	b.n	8014ac2 <lv_label_signal+0x16>
    return area_p->x2 - area_p->x1 + 1;
 8014b36:	8ab2      	ldrh	r2, [r6, #20]
 8014b38:	88bb      	ldrh	r3, [r7, #4]
 8014b3a:	3201      	adds	r2, #1
 8014b3c:	8a30      	ldrh	r0, [r6, #16]
 8014b3e:	3301      	adds	r3, #1
 8014b40:	8839      	ldrh	r1, [r7, #0]
 8014b42:	1a12      	subs	r2, r2, r0
 8014b44:	1a5b      	subs	r3, r3, r1
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
 8014b46:	b292      	uxth	r2, r2
 8014b48:	b29b      	uxth	r3, r3
 8014b4a:	429a      	cmp	r2, r3
 8014b4c:	d10b      	bne.n	8014b66 <lv_label_signal+0xba>
    return area_p->y2 - area_p->y1 + 1;
 8014b4e:	8af2      	ldrh	r2, [r6, #22]
 8014b50:	88fb      	ldrh	r3, [r7, #6]
 8014b52:	3201      	adds	r2, #1
 8014b54:	8a70      	ldrh	r0, [r6, #18]
 8014b56:	3301      	adds	r3, #1
 8014b58:	8879      	ldrh	r1, [r7, #2]
 8014b5a:	1a12      	subs	r2, r2, r0
 8014b5c:	1a5b      	subs	r3, r3, r1
 8014b5e:	b292      	uxth	r2, r2
 8014b60:	b29b      	uxth	r3, r3
 8014b62:	429a      	cmp	r2, r3
 8014b64:	d0ad      	beq.n	8014ac2 <lv_label_signal+0x16>
        lv_label_revert_dots(label);
 8014b66:	4630      	mov	r0, r6
 8014b68:	f7ff fb46 	bl	80141f8 <lv_label_revert_dots>
        lv_label_refr_text(label);
 8014b6c:	4630      	mov	r0, r6
 8014b6e:	f7ff fded 	bl	801474c <lv_label_refr_text>
 8014b72:	e7a6      	b.n	8014ac2 <lv_label_signal+0x16>
 8014b74:	200174d8 	.word	0x200174d8
 8014b78:	0808bca0 	.word	0x0808bca0

08014b7c <lv_label_set_text>:
{
 8014b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014b80:	4680      	mov	r8, r0
 8014b82:	460d      	mov	r5, r1
    lv_obj_invalidate(label);
 8014b84:	f7f4 f958 	bl	8008e38 <lv_obj_invalidate>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8014b88:	4640      	mov	r0, r8
 8014b8a:	f7f5 f85b 	bl	8009c44 <lv_obj_get_ext_attr>
    if(text == NULL) {
 8014b8e:	b1ed      	cbz	r5, 8014bcc <lv_label_set_text+0x50>
    if(ext->text == text) {
 8014b90:	6807      	ldr	r7, [r0, #0]
 8014b92:	4604      	mov	r4, r0
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
 8014b94:	4628      	mov	r0, r5
    if(ext->text == text) {
 8014b96:	42bd      	cmp	r5, r7
 8014b98:	d01e      	beq.n	8014bd8 <lv_label_set_text+0x5c>
        uint32_t len = strlen(text) + 1;
 8014b9a:	f7eb fb3f 	bl	800021c <strlen>
 8014b9e:	f100 0901 	add.w	r9, r0, #1
        if(ext->text != NULL && ext->static_txt == 0) {
 8014ba2:	b13f      	cbz	r7, 8014bb4 <lv_label_set_text+0x38>
 8014ba4:	7ea3      	ldrb	r3, [r4, #26]
 8014ba6:	f013 0601 	ands.w	r6, r3, #1
 8014baa:	d103      	bne.n	8014bb4 <lv_label_set_text+0x38>
            lv_mem_free(ext->text);
 8014bac:	4638      	mov	r0, r7
 8014bae:	f7fb fa6b 	bl	8010088 <lv_mem_free>
            ext->text = NULL;
 8014bb2:	6026      	str	r6, [r4, #0]
        ext->text = lv_mem_alloc(len);
 8014bb4:	4648      	mov	r0, r9
 8014bb6:	f7fb fa5f 	bl	8010078 <lv_mem_alloc>
 8014bba:	6020      	str	r0, [r4, #0]
        lv_mem_assert(ext->text);
 8014bbc:	b158      	cbz	r0, 8014bd6 <lv_label_set_text+0x5a>
        strcpy(ext->text, text);
 8014bbe:	4629      	mov	r1, r5
 8014bc0:	f004 fd91 	bl	80196e6 <strcpy>
        ext->static_txt = 0;    /*Now the text is dynamically allocated*/
 8014bc4:	7ea3      	ldrb	r3, [r4, #26]
 8014bc6:	f36f 0300 	bfc	r3, #0, #1
 8014bca:	76a3      	strb	r3, [r4, #26]
        lv_label_refr_text(label);
 8014bcc:	4640      	mov	r0, r8
}
 8014bce:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        lv_label_refr_text(label);
 8014bd2:	f7ff bdbb 	b.w	801474c <lv_label_refr_text>
 8014bd6:	e7fe      	b.n	8014bd6 <lv_label_set_text+0x5a>
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
 8014bd8:	f7eb fb20 	bl	800021c <strlen>
 8014bdc:	1c41      	adds	r1, r0, #1
 8014bde:	4628      	mov	r0, r5
 8014be0:	f7fb faaa 	bl	8010138 <lv_mem_realloc>
 8014be4:	6020      	str	r0, [r4, #0]
        lv_mem_assert(ext->text);
 8014be6:	2800      	cmp	r0, #0
 8014be8:	d1f0      	bne.n	8014bcc <lv_label_set_text+0x50>
 8014bea:	e7fe      	b.n	8014bea <lv_label_set_text+0x6e>

08014bec <lv_label_set_static_text>:
{
 8014bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bee:	460e      	mov	r6, r1
 8014bf0:	4607      	mov	r7, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8014bf2:	f7f5 f827 	bl	8009c44 <lv_obj_get_ext_attr>
    if(ext->static_txt == 0 && ext->text != NULL) {
 8014bf6:	7e83      	ldrb	r3, [r0, #26]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8014bf8:	4604      	mov	r4, r0
    if(ext->static_txt == 0 && ext->text != NULL) {
 8014bfa:	f013 0501 	ands.w	r5, r3, #1
 8014bfe:	d104      	bne.n	8014c0a <lv_label_set_static_text+0x1e>
 8014c00:	6800      	ldr	r0, [r0, #0]
 8014c02:	b110      	cbz	r0, 8014c0a <lv_label_set_static_text+0x1e>
        lv_mem_free(ext->text);
 8014c04:	f7fb fa40 	bl	8010088 <lv_mem_free>
        ext->text = NULL;
 8014c08:	6025      	str	r5, [r4, #0]
    if(text != NULL) {
 8014c0a:	b126      	cbz	r6, 8014c16 <lv_label_set_static_text+0x2a>
        ext->static_txt = 1;
 8014c0c:	7ea3      	ldrb	r3, [r4, #26]
        ext->text = (char *) text;
 8014c0e:	6026      	str	r6, [r4, #0]
        ext->static_txt = 1;
 8014c10:	f043 0301 	orr.w	r3, r3, #1
 8014c14:	76a3      	strb	r3, [r4, #26]
    lv_label_refr_text(label);
 8014c16:	4638      	mov	r0, r7
}
 8014c18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_label_refr_text(label);
 8014c1c:	f7ff bd96 	b.w	801474c <lv_label_refr_text>

08014c20 <lv_label_set_long_mode>:
{
 8014c20:	b570      	push	{r4, r5, r6, lr}
 8014c22:	4605      	mov	r5, r0
 8014c24:	460e      	mov	r6, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8014c26:	f7f5 f80d 	bl	8009c44 <lv_obj_get_ext_attr>
    lv_anim_del(label, (lv_anim_fp_t) lv_obj_set_x);
 8014c2a:	491b      	ldr	r1, [pc, #108]	; (8014c98 <lv_label_set_long_mode+0x78>)
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8014c2c:	4604      	mov	r4, r0
    lv_anim_del(label, (lv_anim_fp_t) lv_obj_set_x);
 8014c2e:	4628      	mov	r0, r5
 8014c30:	f7fa fdcc 	bl	800f7cc <lv_anim_del>
    lv_anim_del(label, (lv_anim_fp_t) lv_obj_set_y);
 8014c34:	4919      	ldr	r1, [pc, #100]	; (8014c9c <lv_label_set_long_mode+0x7c>)
 8014c36:	4628      	mov	r0, r5
 8014c38:	f7fa fdc8 	bl	800f7cc <lv_anim_del>
    lv_anim_del(label, (lv_anim_fp_t) lv_label_set_offset_x);
 8014c3c:	4918      	ldr	r1, [pc, #96]	; (8014ca0 <lv_label_set_long_mode+0x80>)
 8014c3e:	4628      	mov	r0, r5
 8014c40:	f7fa fdc4 	bl	800f7cc <lv_anim_del>
    lv_anim_del(label, (lv_anim_fp_t) lv_label_set_offset_y);
 8014c44:	4628      	mov	r0, r5
 8014c46:	4917      	ldr	r1, [pc, #92]	; (8014ca4 <lv_label_set_long_mode+0x84>)
 8014c48:	f7fa fdc0 	bl	800f7cc <lv_anim_del>
    if(long_mode == LV_LABEL_LONG_ROLL || long_mode == LV_LABEL_LONG_CROP) ext->expand = 1;
 8014c4c:	1f32      	subs	r2, r6, #4
    ext->offset.x = 0;
 8014c4e:	2300      	movs	r3, #0
    if(long_mode == LV_LABEL_LONG_ROLL || long_mode == LV_LABEL_LONG_CROP) ext->expand = 1;
 8014c50:	2a01      	cmp	r2, #1
    ext->offset.x = 0;
 8014c52:	82e3      	strh	r3, [r4, #22]
    ext->offset.y = 0;
 8014c54:	8323      	strh	r3, [r4, #24]
    if(long_mode == LV_LABEL_LONG_ROLL || long_mode == LV_LABEL_LONG_CROP) ext->expand = 1;
 8014c56:	d91a      	bls.n	8014c8e <lv_label_set_long_mode+0x6e>
    else ext->expand = 0;
 8014c58:	7ea2      	ldrb	r2, [r4, #26]
 8014c5a:	f363 1204 	bfi	r2, r3, #4, #1
 8014c5e:	76a2      	strb	r2, [r4, #26]
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
 8014c60:	7923      	ldrb	r3, [r4, #4]
 8014c62:	2b03      	cmp	r3, #3
 8014c64:	d005      	beq.n	8014c72 <lv_label_set_long_mode+0x52>
    ext->long_mode = long_mode;
 8014c66:	7126      	strb	r6, [r4, #4]
    lv_label_refr_text(label);
 8014c68:	4628      	mov	r0, r5
}
 8014c6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_label_refr_text(label);
 8014c6e:	f7ff bd6d 	b.w	801474c <lv_label_refr_text>
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
 8014c72:	8a62      	ldrh	r2, [r4, #18]
 8014c74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014c78:	429a      	cmp	r2, r3
 8014c7a:	d0f4      	beq.n	8014c66 <lv_label_set_long_mode+0x46>
        lv_label_revert_dots(label);
 8014c7c:	4628      	mov	r0, r5
 8014c7e:	f7ff fabb 	bl	80141f8 <lv_label_revert_dots>
    ext->long_mode = long_mode;
 8014c82:	7126      	strb	r6, [r4, #4]
    lv_label_refr_text(label);
 8014c84:	4628      	mov	r0, r5
}
 8014c86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_label_refr_text(label);
 8014c8a:	f7ff bd5f 	b.w	801474c <lv_label_refr_text>
    if(long_mode == LV_LABEL_LONG_ROLL || long_mode == LV_LABEL_LONG_CROP) ext->expand = 1;
 8014c8e:	7ea3      	ldrb	r3, [r4, #26]
 8014c90:	f043 0310 	orr.w	r3, r3, #16
 8014c94:	76a3      	strb	r3, [r4, #26]
 8014c96:	e7e3      	b.n	8014c60 <lv_label_set_long_mode+0x40>
 8014c98:	08009281 	.word	0x08009281
 8014c9c:	08009295 	.word	0x08009295
 8014ca0:	08014259 	.word	0x08014259
 8014ca4:	08014241 	.word	0x08014241

08014ca8 <lv_label_set_recolor>:
{
 8014ca8:	b538      	push	{r3, r4, r5, lr}
 8014caa:	460c      	mov	r4, r1
 8014cac:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8014cae:	f7f4 ffc9 	bl	8009c44 <lv_obj_get_ext_attr>
    if(ext->recolor == en) return;
 8014cb2:	7e83      	ldrb	r3, [r0, #26]
 8014cb4:	f3c3 01c0 	ubfx	r1, r3, #3, #1
 8014cb8:	42a1      	cmp	r1, r4
 8014cba:	d008      	beq.n	8014cce <lv_label_set_recolor+0x26>
 8014cbc:	4602      	mov	r2, r0
    ext->recolor = en == false ? 0 : 1;
 8014cbe:	f364 03c3 	bfi	r3, r4, #3, #1
    lv_label_refr_text(label);  /*Refresh the text because the potential colo codes in text needs to be hided or revealed*/
 8014cc2:	4628      	mov	r0, r5
    ext->recolor = en == false ? 0 : 1;
 8014cc4:	7693      	strb	r3, [r2, #26]
}
 8014cc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_label_refr_text(label);  /*Refresh the text because the potential colo codes in text needs to be hided or revealed*/
 8014cca:	f7ff bd3f 	b.w	801474c <lv_label_refr_text>
 8014cce:	bd38      	pop	{r3, r4, r5, pc}

08014cd0 <lv_label_create>:
{
 8014cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cd4:	460e      	mov	r6, r1
    lv_obj_t * new_label = lv_obj_create(par, copy);
 8014cd6:	f7f4 f9a7 	bl	8009028 <lv_obj_create>
    lv_mem_assert(new_label);
 8014cda:	2800      	cmp	r0, #0
 8014cdc:	d072      	beq.n	8014dc4 <lv_label_create+0xf4>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_label);
 8014cde:	4d55      	ldr	r5, [pc, #340]	; (8014e34 <lv_label_create+0x164>)
 8014ce0:	4604      	mov	r4, r0
 8014ce2:	682b      	ldr	r3, [r5, #0]
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	f000 80a1 	beq.w	8014e2c <lv_label_create+0x15c>
    lv_obj_allocate_ext_attr(new_label, sizeof(lv_label_ext_t));
 8014cea:	211c      	movs	r1, #28
 8014cec:	4620      	mov	r0, r4
 8014cee:	f7f4 fd37 	bl	8009760 <lv_obj_allocate_ext_attr>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(new_label);
 8014cf2:	4620      	mov	r0, r4
 8014cf4:	f7f4 ffa6 	bl	8009c44 <lv_obj_get_ext_attr>
    lv_mem_assert(ext);
 8014cf8:	4605      	mov	r5, r0
 8014cfa:	2800      	cmp	r0, #0
 8014cfc:	d061      	beq.n	8014dc2 <lv_label_create+0xf2>
    ext->static_txt = 0;
 8014cfe:	7e82      	ldrb	r2, [r0, #26]
    ext->text = NULL;
 8014d00:	2300      	movs	r3, #0
    ext->anim_speed = LV_LABEL_SCROLL_SPEED;
 8014d02:	2119      	movs	r1, #25
    ext->dot_end = LV_LABEL_DOT_END_INV;
 8014d04:	f64f 77ff 	movw	r7, #65535	; 0xffff
    ext->align = LV_LABEL_ALIGN_LEFT;
 8014d08:	f002 02d6 	and.w	r2, r2, #214	; 0xd6
    ext->text = NULL;
 8014d0c:	6003      	str	r3, [r0, #0]
    ext->long_mode = LV_LABEL_LONG_EXPAND;
 8014d0e:	7103      	strb	r3, [r0, #4]
    lv_obj_set_design_func(new_label, lv_label_design);
 8014d10:	4620      	mov	r0, r4
    ext->align = LV_LABEL_ALIGN_LEFT;
 8014d12:	f363 0242 	bfi	r2, r3, #1, #2
    ext->anim_speed = LV_LABEL_SCROLL_SPEED;
 8014d16:	82a9      	strh	r1, [r5, #20]
    ext->offset.x = 0;
 8014d18:	82eb      	strh	r3, [r5, #22]
    lv_obj_set_design_func(new_label, lv_label_design);
 8014d1a:	4947      	ldr	r1, [pc, #284]	; (8014e38 <lv_label_create+0x168>)
    ext->offset.y = 0;
 8014d1c:	832b      	strh	r3, [r5, #24]
    ext->align = LV_LABEL_ALIGN_LEFT;
 8014d1e:	76aa      	strb	r2, [r5, #26]
    ext->dot_end = LV_LABEL_DOT_END_INV;
 8014d20:	826f      	strh	r7, [r5, #18]
    lv_obj_set_design_func(new_label, lv_label_design);
 8014d22:	f7f4 fd1b 	bl	800975c <lv_obj_set_design_func>
    lv_obj_set_signal_func(new_label, lv_label_signal);
 8014d26:	4945      	ldr	r1, [pc, #276]	; (8014e3c <lv_label_create+0x16c>)
 8014d28:	4620      	mov	r0, r4
 8014d2a:	f7f4 fd15 	bl	8009758 <lv_obj_set_signal_func>
    if(copy == NULL) {
 8014d2e:	2e00      	cmp	r6, #0
 8014d30:	d069      	beq.n	8014e06 <lv_label_create+0x136>
        lv_label_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8014d32:	4630      	mov	r0, r6
 8014d34:	f7f4 ff86 	bl	8009c44 <lv_obj_get_ext_attr>
 8014d38:	4607      	mov	r7, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8014d3a:	4630      	mov	r0, r6
 8014d3c:	f7f4 ff82 	bl	8009c44 <lv_obj_get_ext_attr>
        lv_label_set_long_mode(new_label, lv_label_get_long_mode(copy));
 8014d40:	7901      	ldrb	r1, [r0, #4]
 8014d42:	4620      	mov	r0, r4
 8014d44:	f7ff ff6c 	bl	8014c20 <lv_label_set_long_mode>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8014d48:	4630      	mov	r0, r6
 8014d4a:	f7f4 ff7b 	bl	8009c44 <lv_obj_get_ext_attr>
    return ext->recolor == 0 ? false : true;
 8014d4e:	7e81      	ldrb	r1, [r0, #26]
        lv_label_set_recolor(new_label, lv_label_get_recolor(copy));
 8014d50:	4620      	mov	r0, r4
 8014d52:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 8014d56:	f7ff ffa7 	bl	8014ca8 <lv_label_set_recolor>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8014d5a:	4630      	mov	r0, r6
 8014d5c:	f7f4 ff72 	bl	8009c44 <lv_obj_get_ext_attr>
    return ext->body_draw == 0 ? false : true;
 8014d60:	7e81      	ldrb	r1, [r0, #26]
        lv_label_set_body_draw(new_label, lv_label_get_body_draw(copy));
 8014d62:	4620      	mov	r0, r4
 8014d64:	f3c1 1140 	ubfx	r1, r1, #5, #1
 8014d68:	f7ff fb28 	bl	80143bc <lv_label_set_body_draw>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8014d6c:	4630      	mov	r0, r6
 8014d6e:	f7f4 ff69 	bl	8009c44 <lv_obj_get_ext_attr>
    return ext->align;
 8014d72:	7e81      	ldrb	r1, [r0, #26]
        lv_label_set_align(new_label, lv_label_get_align(copy));
 8014d74:	4620      	mov	r0, r4
 8014d76:	f3c1 0141 	ubfx	r1, r1, #1, #2
 8014d7a:	f7ff fb0b 	bl	8014394 <lv_label_set_align>
        if(copy_ext->static_txt == 0) lv_label_set_text(new_label, lv_label_get_text(copy));
 8014d7e:	7ebb      	ldrb	r3, [r7, #26]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8014d80:	4630      	mov	r0, r6
        if(copy_ext->static_txt == 0) lv_label_set_text(new_label, lv_label_get_text(copy));
 8014d82:	07db      	lsls	r3, r3, #31
 8014d84:	d51f      	bpl.n	8014dc6 <lv_label_create+0xf6>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8014d86:	f7f4 ff5d 	bl	8009c44 <lv_obj_get_ext_attr>
        else lv_label_set_static_text(new_label, lv_label_get_text(copy));
 8014d8a:	6801      	ldr	r1, [r0, #0]
 8014d8c:	4620      	mov	r0, r4
 8014d8e:	f7ff ff2d 	bl	8014bec <lv_label_set_static_text>
        if(copy_ext->long_mode == LV_LABEL_LONG_DOT) {
 8014d92:	793b      	ldrb	r3, [r7, #4]
 8014d94:	2b03      	cmp	r3, #3
 8014d96:	d01f      	beq.n	8014dd8 <lv_label_create+0x108>
        memcpy(ext->dot_tmp, copy_ext->dot_tmp, sizeof(ext->dot_tmp));
 8014d98:	463b      	mov	r3, r7
        lv_obj_refresh_style(new_label);
 8014d9a:	4620      	mov	r0, r4
        memcpy(ext->dot_tmp, copy_ext->dot_tmp, sizeof(ext->dot_tmp));
 8014d9c:	f853 ef05 	ldr.w	lr, [r3, #5]!
 8014da0:	685e      	ldr	r6, [r3, #4]
 8014da2:	6899      	ldr	r1, [r3, #8]
 8014da4:	f8c5 e005 	str.w	lr, [r5, #5]
 8014da8:	f8c5 6009 	str.w	r6, [r5, #9]
 8014dac:	f8c5 100d 	str.w	r1, [r5, #13]
 8014db0:	7b1b      	ldrb	r3, [r3, #12]
 8014db2:	746b      	strb	r3, [r5, #17]
        ext->dot_end = copy_ext->dot_end;
 8014db4:	8a7b      	ldrh	r3, [r7, #18]
 8014db6:	826b      	strh	r3, [r5, #18]
        lv_obj_refresh_style(new_label);
 8014db8:	f7f4 fc70 	bl	800969c <lv_obj_refresh_style>
}
 8014dbc:	4620      	mov	r0, r4
 8014dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014dc2:	e7fe      	b.n	8014dc2 <lv_label_create+0xf2>
 8014dc4:	e7fe      	b.n	8014dc4 <lv_label_create+0xf4>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8014dc6:	f7f4 ff3d 	bl	8009c44 <lv_obj_get_ext_attr>
        if(copy_ext->static_txt == 0) lv_label_set_text(new_label, lv_label_get_text(copy));
 8014dca:	6801      	ldr	r1, [r0, #0]
 8014dcc:	4620      	mov	r0, r4
 8014dce:	f7ff fed5 	bl	8014b7c <lv_label_set_text>
        if(copy_ext->long_mode == LV_LABEL_LONG_DOT) {
 8014dd2:	793b      	ldrb	r3, [r7, #4]
 8014dd4:	2b03      	cmp	r3, #3
 8014dd6:	d1df      	bne.n	8014d98 <lv_label_create+0xc8>
            ext->text = lv_mem_realloc(ext->text, lv_mem_get_size(copy_ext->text));
 8014dd8:	682e      	ldr	r6, [r5, #0]
 8014dda:	6838      	ldr	r0, [r7, #0]
 8014ddc:	f7fb fa58 	bl	8010290 <lv_mem_get_size>
 8014de0:	4601      	mov	r1, r0
 8014de2:	4630      	mov	r0, r6
 8014de4:	f7fb f9a8 	bl	8010138 <lv_mem_realloc>
 8014de8:	4606      	mov	r6, r0
 8014dea:	6028      	str	r0, [r5, #0]
            lv_mem_assert(ext->text);
 8014dec:	b150      	cbz	r0, 8014e04 <lv_label_create+0x134>
            memcpy(ext->text, copy_ext->text, lv_mem_get_size(copy_ext->text));
 8014dee:	f8d7 8000 	ldr.w	r8, [r7]
 8014df2:	4640      	mov	r0, r8
 8014df4:	f7fb fa4c 	bl	8010290 <lv_mem_get_size>
 8014df8:	4641      	mov	r1, r8
 8014dfa:	4602      	mov	r2, r0
 8014dfc:	4630      	mov	r0, r6
 8014dfe:	f004 fc5f 	bl	80196c0 <memcpy>
 8014e02:	e7c9      	b.n	8014d98 <lv_label_create+0xc8>
 8014e04:	e7fe      	b.n	8014e04 <lv_label_create+0x134>
        lv_obj_set_click(new_label, false);
 8014e06:	4631      	mov	r1, r6
 8014e08:	4620      	mov	r0, r4
 8014e0a:	f7f4 fc71 	bl	80096f0 <lv_obj_set_click>
        lv_label_set_long_mode(new_label, LV_LABEL_LONG_EXPAND);
 8014e0e:	4631      	mov	r1, r6
 8014e10:	4620      	mov	r0, r4
 8014e12:	f7ff ff05 	bl	8014c20 <lv_label_set_long_mode>
        lv_label_set_text(new_label, "Text");
 8014e16:	4620      	mov	r0, r4
 8014e18:	4909      	ldr	r1, [pc, #36]	; (8014e40 <lv_label_create+0x170>)
 8014e1a:	f7ff feaf 	bl	8014b7c <lv_label_set_text>
    lv_obj_set_style(label, style);
 8014e1e:	4620      	mov	r0, r4
 8014e20:	4631      	mov	r1, r6
 8014e22:	f7f4 fd67 	bl	80098f4 <lv_obj_set_style>
}
 8014e26:	4620      	mov	r0, r4
 8014e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_label);
 8014e2c:	f7f4 ff06 	bl	8009c3c <lv_obj_get_signal_func>
 8014e30:	6028      	str	r0, [r5, #0]
 8014e32:	e75a      	b.n	8014cea <lv_label_create+0x1a>
 8014e34:	200174d8 	.word	0x200174d8
 8014e38:	08014271 	.word	0x08014271
 8014e3c:	08014aad 	.word	0x08014aad
 8014e40:	0808bcac 	.word	0x0808bcac

08014e44 <lv_label_ins_text>:
{
 8014e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014e48:	460d      	mov	r5, r1
 8014e4a:	4690      	mov	r8, r2
 8014e4c:	4607      	mov	r7, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8014e4e:	f7f4 fef9 	bl	8009c44 <lv_obj_get_ext_attr>
    if(ext->static_txt != 0) return;
 8014e52:	7e83      	ldrb	r3, [r0, #26]
 8014e54:	07db      	lsls	r3, r3, #31
 8014e56:	d501      	bpl.n	8014e5c <lv_label_ins_text+0x18>
 8014e58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014e5c:	4604      	mov	r4, r0
    lv_obj_invalidate(label);
 8014e5e:	4638      	mov	r0, r7
 8014e60:	f7f3 ffea 	bl	8008e38 <lv_obj_invalidate>
    uint32_t old_len = strlen(ext->text);
 8014e64:	f8d4 9000 	ldr.w	r9, [r4]
 8014e68:	4648      	mov	r0, r9
 8014e6a:	f7eb f9d7 	bl	800021c <strlen>
 8014e6e:	4606      	mov	r6, r0
    uint32_t ins_len = strlen(txt);
 8014e70:	4640      	mov	r0, r8
 8014e72:	f7eb f9d3 	bl	800021c <strlen>
    uint32_t new_len = ins_len + old_len;
 8014e76:	1831      	adds	r1, r6, r0
    ext->text = lv_mem_realloc(ext->text, new_len + 1);
 8014e78:	4648      	mov	r0, r9
 8014e7a:	3101      	adds	r1, #1
 8014e7c:	f7fb f95c 	bl	8010138 <lv_mem_realloc>
 8014e80:	6020      	str	r0, [r4, #0]
    lv_mem_assert(ext->text);
 8014e82:	b160      	cbz	r0, 8014e9e <lv_label_ins_text+0x5a>
    if(pos == LV_LABEL_POS_LAST) {
 8014e84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014e88:	4295      	cmp	r5, r2
 8014e8a:	d009      	beq.n	8014ea0 <lv_label_ins_text+0x5c>
    lv_txt_ins(ext->text, pos, txt);
 8014e8c:	4642      	mov	r2, r8
 8014e8e:	4629      	mov	r1, r5
 8014e90:	f7fb fe9a 	bl	8010bc8 <lv_txt_ins>
    lv_label_refr_text(label);
 8014e94:	4638      	mov	r0, r7
}
 8014e96:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    lv_label_refr_text(label);
 8014e9a:	f7ff bc57 	b.w	801474c <lv_label_refr_text>
 8014e9e:	e7fe      	b.n	8014e9e <lv_label_ins_text+0x5a>
        pos = lv_txt_get_encoded_length(ext->text);
 8014ea0:	4b02      	ldr	r3, [pc, #8]	; (8014eac <lv_label_ins_text+0x68>)
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	4798      	blx	r3
 8014ea6:	4605      	mov	r5, r0
 8014ea8:	6820      	ldr	r0, [r4, #0]
 8014eaa:	e7ef      	b.n	8014e8c <lv_label_ins_text+0x48>
 8014eac:	200000bc 	.word	0x200000bc

08014eb0 <lv_list_set_btn_selected>:
 * Make a button selected
 * @param list pointer to a list object
 * @param btn pointer to a button to selectthe
 */
void lv_list_set_btn_selected(lv_obj_t * list, lv_obj_t * btn)
{
 8014eb0:	b570      	push	{r4, r5, r6, lr}
 8014eb2:	460d      	mov	r5, r1
 8014eb4:	4606      	mov	r6, r0
    lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 8014eb6:	f7f4 fec5 	bl	8009c44 <lv_obj_get_ext_attr>
 8014eba:	4604      	mov	r4, r0

    if(ext->selected_btn) {
 8014ebc:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8014ebe:	b128      	cbz	r0, 8014ecc <lv_list_set_btn_selected+0x1c>
        lv_btn_state_t s = lv_btn_get_state(ext->selected_btn);
 8014ec0:	f7fc fcfe 	bl	80118c0 <lv_btn_get_state>
        if(s == LV_BTN_STATE_PR) lv_btn_set_state(ext->selected_btn, LV_BTN_STATE_REL);
 8014ec4:	2801      	cmp	r0, #1
 8014ec6:	d01b      	beq.n	8014f00 <lv_list_set_btn_selected+0x50>
        else if(s == LV_BTN_STATE_TGL_PR) lv_btn_set_state(ext->selected_btn, LV_BTN_STATE_TGL_REL);
 8014ec8:	2803      	cmp	r0, #3
 8014eca:	d01e      	beq.n	8014f0a <lv_list_set_btn_selected+0x5a>
    }

    ext->selected_btn = btn;
 8014ecc:	6625      	str	r5, [r4, #96]	; 0x60

    if(ext->selected_btn) {
 8014ece:	b18d      	cbz	r5, 8014ef4 <lv_list_set_btn_selected+0x44>
        lv_btn_state_t s = lv_btn_get_state(ext->selected_btn);
 8014ed0:	4628      	mov	r0, r5
 8014ed2:	f7fc fcf5 	bl	80118c0 <lv_btn_get_state>
        if(s == LV_BTN_STATE_REL) lv_btn_set_state(ext->selected_btn, LV_BTN_STATE_PR);
 8014ed6:	b140      	cbz	r0, 8014eea <lv_list_set_btn_selected+0x3a>
        else if(s == LV_BTN_STATE_TGL_REL) lv_btn_set_state(ext->selected_btn, LV_BTN_STATE_TGL_PR);
 8014ed8:	2802      	cmp	r0, #2
 8014eda:	d00c      	beq.n	8014ef6 <lv_list_set_btn_selected+0x46>

        lv_page_focus(list, ext->selected_btn, ext->anim_time);
 8014edc:	4630      	mov	r0, r6
 8014ede:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8014ee0:	6e21      	ldr	r1, [r4, #96]	; 0x60
    }
}
 8014ee2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_page_focus(list, ext->selected_btn, ext->anim_time);
 8014ee6:	f001 bbff 	b.w	80166e8 <lv_page_focus>
        if(s == LV_BTN_STATE_REL) lv_btn_set_state(ext->selected_btn, LV_BTN_STATE_PR);
 8014eea:	2101      	movs	r1, #1
 8014eec:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8014eee:	f7fc fad3 	bl	8011498 <lv_btn_set_state>
 8014ef2:	e7f3      	b.n	8014edc <lv_list_set_btn_selected+0x2c>
 8014ef4:	bd70      	pop	{r4, r5, r6, pc}
        else if(s == LV_BTN_STATE_TGL_REL) lv_btn_set_state(ext->selected_btn, LV_BTN_STATE_TGL_PR);
 8014ef6:	2103      	movs	r1, #3
 8014ef8:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8014efa:	f7fc facd 	bl	8011498 <lv_btn_set_state>
 8014efe:	e7ed      	b.n	8014edc <lv_list_set_btn_selected+0x2c>
        if(s == LV_BTN_STATE_PR) lv_btn_set_state(ext->selected_btn, LV_BTN_STATE_REL);
 8014f00:	2100      	movs	r1, #0
 8014f02:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8014f04:	f7fc fac8 	bl	8011498 <lv_btn_set_state>
 8014f08:	e7e0      	b.n	8014ecc <lv_list_set_btn_selected+0x1c>
        else if(s == LV_BTN_STATE_TGL_PR) lv_btn_set_state(ext->selected_btn, LV_BTN_STATE_TGL_REL);
 8014f0a:	2102      	movs	r1, #2
 8014f0c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8014f0e:	f7fc fac3 	bl	8011498 <lv_btn_set_state>
 8014f12:	e7db      	b.n	8014ecc <lv_list_set_btn_selected+0x1c>

08014f14 <lv_list_add>:
{
 8014f14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f18:	4606      	mov	r6, r0
 8014f1a:	468a      	mov	sl, r1
 8014f1c:	4691      	mov	r9, r2
 8014f1e:	461f      	mov	r7, r3
    lv_style_t * style = lv_obj_get_style(list);
 8014f20:	f7f4 fd76 	bl	8009a10 <lv_obj_get_style>
 8014f24:	4683      	mov	fp, r0
    lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 8014f26:	4630      	mov	r0, r6
    if(ancestor_btn_signal == NULL) ancestor_btn_signal = lv_obj_get_signal_func(liste);
 8014f28:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8015090 <lv_list_add+0x17c>
    lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 8014f2c:	f7f4 fe8a 	bl	8009c44 <lv_obj_get_ext_attr>
 8014f30:	4605      	mov	r5, r0
    liste = lv_btn_create(list, NULL);
 8014f32:	2100      	movs	r1, #0
 8014f34:	4630      	mov	r0, r6
    ext->size ++;
 8014f36:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8014f38:	3301      	adds	r3, #1
 8014f3a:	656b      	str	r3, [r5, #84]	; 0x54
    liste = lv_btn_create(list, NULL);
 8014f3c:	f7fc fc0c 	bl	8011758 <lv_btn_create>
    if(ancestor_btn_signal == NULL) ancestor_btn_signal = lv_obj_get_signal_func(liste);
 8014f40:	f8d8 3000 	ldr.w	r3, [r8]
    liste = lv_btn_create(list, NULL);
 8014f44:	4604      	mov	r4, r0
    if(ancestor_btn_signal == NULL) ancestor_btn_signal = lv_obj_get_signal_func(liste);
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	f000 808f 	beq.w	801506a <lv_list_add+0x156>
    lv_btn_set_style(liste, LV_BTN_STYLE_REL, ext->styles_btn[LV_BTN_STATE_REL]);
 8014f4c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8014f4e:	2100      	movs	r1, #0
 8014f50:	4620      	mov	r0, r4
 8014f52:	f7fc fbdf 	bl	8011714 <lv_btn_set_style>
    lv_btn_set_style(liste, LV_BTN_STYLE_PR, ext->styles_btn[LV_BTN_STATE_PR]);
 8014f56:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8014f58:	2101      	movs	r1, #1
 8014f5a:	4620      	mov	r0, r4
 8014f5c:	f7fc fbda 	bl	8011714 <lv_btn_set_style>
    lv_btn_set_style(liste, LV_BTN_STYLE_TGL_REL, ext->styles_btn[LV_BTN_STATE_TGL_REL]);
 8014f60:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8014f62:	2102      	movs	r1, #2
 8014f64:	4620      	mov	r0, r4
 8014f66:	f7fc fbd5 	bl	8011714 <lv_btn_set_style>
    lv_btn_set_style(liste, LV_BTN_STYLE_TGL_PR, ext->styles_btn[LV_BTN_STATE_TGL_PR]);
 8014f6a:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8014f6c:	2103      	movs	r1, #3
 8014f6e:	4620      	mov	r0, r4
 8014f70:	f7fc fbd0 	bl	8011714 <lv_btn_set_style>
    lv_btn_set_style(liste, LV_BTN_STYLE_INA, ext->styles_btn[LV_BTN_STATE_INA]);
 8014f74:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8014f76:	2104      	movs	r1, #4
 8014f78:	4620      	mov	r0, r4
 8014f7a:	f7fc fbcb 	bl	8011714 <lv_btn_set_style>
    lv_btn_set_action(liste, LV_BTN_ACTION_CLICK, rel_action);
 8014f7e:	463a      	mov	r2, r7
 8014f80:	2100      	movs	r1, #0
 8014f82:	4620      	mov	r0, r4
 8014f84:	f7fc fbba 	bl	80116fc <lv_btn_set_action>
    lv_page_glue_obj(liste, true);
 8014f88:	2101      	movs	r1, #1
 8014f8a:	4620      	mov	r0, r4
 8014f8c:	f001 fba0 	bl	80166d0 <lv_page_glue_obj>
 8014f90:	2106      	movs	r1, #6
 8014f92:	4620      	mov	r0, r4
 8014f94:	f7fe fd1a 	bl	80139cc <lv_cont_set_layout>
 * @param hor_en true: enable the horizontal fit
 * @param ver_en true: enable the vertical fit
 */
static inline void lv_btn_set_fit(lv_obj_t * btn, bool hor_en, bool ver_en)
{
    lv_cont_set_fit(btn, hor_en, ver_en);
 8014f98:	2201      	movs	r2, #1
 8014f9a:	2100      	movs	r1, #0
 8014f9c:	4620      	mov	r0, r4
 8014f9e:	f7fe fd2f 	bl	8013a00 <lv_cont_set_fit>
    lv_obj_set_protect(liste, LV_PROTECT_PRESS_LOST);
 8014fa2:	2110      	movs	r1, #16
 8014fa4:	4620      	mov	r0, r4
 8014fa6:	f7f4 fbc9 	bl	800973c <lv_obj_set_protect>
    lv_obj_set_signal_func(liste, lv_list_btn_signal);
 8014faa:	4938      	ldr	r1, [pc, #224]	; (801508c <lv_list_add+0x178>)
 8014fac:	4620      	mov	r0, r4
 8014fae:	f7f4 fbd3 	bl	8009758 <lv_obj_set_signal_func>
    lv_coord_t w = lv_obj_get_width(list);
 8014fb2:	4630      	mov	r0, r6
 8014fb4:	f7f4 fd20 	bl	80099f8 <lv_obj_get_width>
 8014fb8:	4607      	mov	r7, r0
    lv_style_t  * style_scrl = lv_obj_get_style(lv_page_get_scrl(list));
 8014fba:	4630      	mov	r0, r6
 8014fbc:	f001 fb5e 	bl	801667c <lv_page_get_scrl>
 8014fc0:	f7f4 fd26 	bl	8009a10 <lv_obj_get_style>
    lv_coord_t pad_hor_tot = style->body.padding.hor + style_scrl->body.padding.hor;
 8014fc4:	f8bb 1022 	ldrh.w	r1, [fp, #34]	; 0x22
 8014fc8:	8c43      	ldrh	r3, [r0, #34]	; 0x22
    lv_obj_set_width(liste, w);
 8014fca:	4620      	mov	r0, r4
    lv_coord_t pad_hor_tot = style->body.padding.hor + style_scrl->body.padding.hor;
 8014fcc:	4419      	add	r1, r3
    w -= pad_hor_tot * 2;
 8014fce:	eba7 0141 	sub.w	r1, r7, r1, lsl #1
    lv_obj_set_width(liste, w);
 8014fd2:	b209      	sxth	r1, r1
 8014fd4:	f7f4 f9a0 	bl	8009318 <lv_obj_set_width>
    if(img_src) {
 8014fd8:	f1ba 0f00 	cmp.w	sl, #0
 8014fdc:	d012      	beq.n	8015004 <lv_list_add+0xf0>
        img = lv_img_create(liste, NULL);
 8014fde:	2100      	movs	r1, #0
 8014fe0:	4620      	mov	r0, r4
 8014fe2:	f7fe fe83 	bl	8013cec <lv_img_create>
 8014fe6:	4607      	mov	r7, r0
        lv_img_set_src(img, img_src);
 8014fe8:	4651      	mov	r1, sl
 8014fea:	f7fe fdd7 	bl	8013b9c <lv_img_set_src>
        lv_obj_set_style(img, ext->style_img);
 8014fee:	4638      	mov	r0, r7
 8014ff0:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8014ff2:	f7f4 fc7f 	bl	80098f4 <lv_obj_set_style>
        lv_obj_set_click(img, false);
 8014ff6:	4638      	mov	r0, r7
 8014ff8:	2100      	movs	r1, #0
 8014ffa:	f7f4 fb79 	bl	80096f0 <lv_obj_set_click>
        if(img_signal == NULL) img_signal = lv_obj_get_signal_func(img);
 8014ffe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015002:	b3bb      	cbz	r3, 8015074 <lv_list_add+0x160>
    if(txt != NULL) {
 8015004:	f1b9 0f00 	cmp.w	r9, #0
 8015008:	d01e      	beq.n	8015048 <lv_list_add+0x134>
        lv_coord_t btn_hor_pad = ext->styles_btn[LV_BTN_STYLE_REL]->body.padding.hor;
 801500a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
        lv_obj_t * label = lv_label_create(liste, NULL);
 801500c:	2100      	movs	r1, #0
 801500e:	4620      	mov	r0, r4
        lv_coord_t btn_hor_pad = ext->styles_btn[LV_BTN_STYLE_REL]->body.padding.hor;
 8015010:	f9b3 a022 	ldrsh.w	sl, [r3, #34]	; 0x22
        lv_obj_t * label = lv_label_create(liste, NULL);
 8015014:	f7ff fe5c 	bl	8014cd0 <lv_label_create>
 8015018:	4607      	mov	r7, r0
        lv_label_set_text(label, txt);
 801501a:	4649      	mov	r1, r9
 801501c:	f7ff fdae 	bl	8014b7c <lv_label_set_text>
        lv_obj_set_click(label, false);
 8015020:	2100      	movs	r1, #0
 8015022:	4638      	mov	r0, r7
 8015024:	f7f4 fb64 	bl	80096f0 <lv_obj_set_click>
        lv_label_set_long_mode(label, LV_LABEL_LONG_ROLL);
 8015028:	4638      	mov	r0, r7
 801502a:	2104      	movs	r1, #4
 801502c:	f7ff fdf8 	bl	8014c20 <lv_label_set_long_mode>
        lv_obj_set_width(label, liste->coords.x2 - label->coords.x1 - btn_hor_pad);
 8015030:	8a3b      	ldrh	r3, [r7, #16]
 8015032:	8aa1      	ldrh	r1, [r4, #20]
 8015034:	4638      	mov	r0, r7
 8015036:	1ac9      	subs	r1, r1, r3
 8015038:	eba1 010a 	sub.w	r1, r1, sl
 801503c:	b209      	sxth	r1, r1
 801503e:	f7f4 f96b 	bl	8009318 <lv_obj_set_width>
        if(label_signal == NULL) label_signal = lv_obj_get_signal_func(label);
 8015042:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015046:	b1db      	cbz	r3, 8015080 <lv_list_add+0x16c>
        lv_group_t *g = lv_obj_get_group(list);
 8015048:	4630      	mov	r0, r6
 801504a:	f7f4 fdfd 	bl	8009c48 <lv_obj_get_group>
        if(ext->size == 1 && lv_group_get_focused(g) == list) {
 801504e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8015050:	2b01      	cmp	r3, #1
 8015052:	d002      	beq.n	801505a <lv_list_add+0x146>
}
 8015054:	4620      	mov	r0, r4
 8015056:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(ext->size == 1 && lv_group_get_focused(g) == list) {
 801505a:	f7f3 f8df 	bl	800821c <lv_group_get_focused>
 801505e:	4286      	cmp	r6, r0
 8015060:	d1f8      	bne.n	8015054 <lv_list_add+0x140>
            lv_list_set_btn_selected(list, liste);
 8015062:	4621      	mov	r1, r4
 8015064:	f7ff ff24 	bl	8014eb0 <lv_list_set_btn_selected>
    return liste;
 8015068:	e7f4      	b.n	8015054 <lv_list_add+0x140>
    if(ancestor_btn_signal == NULL) ancestor_btn_signal = lv_obj_get_signal_func(liste);
 801506a:	f7f4 fde7 	bl	8009c3c <lv_obj_get_signal_func>
 801506e:	f8c8 0000 	str.w	r0, [r8]
 8015072:	e76b      	b.n	8014f4c <lv_list_add+0x38>
        if(img_signal == NULL) img_signal = lv_obj_get_signal_func(img);
 8015074:	4638      	mov	r0, r7
 8015076:	f7f4 fde1 	bl	8009c3c <lv_obj_get_signal_func>
 801507a:	f8c8 0004 	str.w	r0, [r8, #4]
 801507e:	e7c1      	b.n	8015004 <lv_list_add+0xf0>
        if(label_signal == NULL) label_signal = lv_obj_get_signal_func(label);
 8015080:	4638      	mov	r0, r7
 8015082:	f7f4 fddb 	bl	8009c3c <lv_obj_get_signal_func>
 8015086:	f8c8 0008 	str.w	r0, [r8, #8]
 801508a:	e7dd      	b.n	8015048 <lv_list_add+0x134>
 801508c:	08015185 	.word	0x08015185
 8015090:	200174dc 	.word	0x200174dc

08015094 <lv_list_get_btn_label>:
 * Get the label object from a list element
 * @param btn pointer to a list element (button)
 * @return pointer to the label from the list element or NULL if not found
 */
lv_obj_t * lv_list_get_btn_label(const lv_obj_t * btn)
{
 8015094:	b570      	push	{r4, r5, r6, lr}
    lv_obj_t * label = lv_obj_get_child(btn, NULL);
 8015096:	2100      	movs	r1, #0
{
 8015098:	4605      	mov	r5, r0
    lv_obj_t * label = lv_obj_get_child(btn, NULL);
 801509a:	f7f4 fbff 	bl	800989c <lv_obj_get_child>
    if(label == NULL) return NULL;
 801509e:	b170      	cbz	r0, 80150be <lv_list_get_btn_label+0x2a>
 80150a0:	4603      	mov	r3, r0
 80150a2:	4e08      	ldr	r6, [pc, #32]	; (80150c4 <lv_list_get_btn_label+0x30>)
 80150a4:	e003      	b.n	80150ae <lv_list_get_btn_label+0x1a>

    while(label->signal_func != label_signal) {
        label = lv_obj_get_child(btn, label);
 80150a6:	f7f4 fbf9 	bl	800989c <lv_obj_get_child>
        if(label == NULL) break;
 80150aa:	4603      	mov	r3, r0
 80150ac:	b138      	cbz	r0, 80150be <lv_list_get_btn_label+0x2a>
    while(label->signal_func != label_signal) {
 80150ae:	699c      	ldr	r4, [r3, #24]
        label = lv_obj_get_child(btn, label);
 80150b0:	4619      	mov	r1, r3
    while(label->signal_func != label_signal) {
 80150b2:	68b2      	ldr	r2, [r6, #8]
        label = lv_obj_get_child(btn, label);
 80150b4:	4628      	mov	r0, r5
    while(label->signal_func != label_signal) {
 80150b6:	4294      	cmp	r4, r2
 80150b8:	d1f5      	bne.n	80150a6 <lv_list_get_btn_label+0x12>
    }

    return label;
}
 80150ba:	4618      	mov	r0, r3
 80150bc:	bd70      	pop	{r4, r5, r6, pc}
    if(label == NULL) return NULL;
 80150be:	2300      	movs	r3, #0
}
 80150c0:	4618      	mov	r0, r3
 80150c2:	bd70      	pop	{r4, r5, r6, pc}
 80150c4:	200174dc 	.word	0x200174dc

080150c8 <lv_list_get_btn_text>:
{
 80150c8:	b508      	push	{r3, lr}
    lv_obj_t * label = lv_list_get_btn_label(btn);
 80150ca:	f7ff ffe3 	bl	8015094 <lv_list_get_btn_label>
    if(label == NULL) return "";
 80150ce:	b118      	cbz	r0, 80150d8 <lv_list_get_btn_text+0x10>
}
 80150d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return lv_label_get_text(label);
 80150d4:	f7ff b98a 	b.w	80143ec <lv_label_get_text>
}
 80150d8:	4800      	ldr	r0, [pc, #0]	; (80150dc <lv_list_get_btn_text+0x14>)
 80150da:	bd08      	pop	{r3, pc}
 80150dc:	0808ba74 	.word	0x0808ba74

080150e0 <lv_list_get_btn_img>:
 * Get the image object from a list element
 * @param btn pointer to a list element (button)
 * @return pointer to the image from the list element or NULL if not found
 */
lv_obj_t * lv_list_get_btn_img(const lv_obj_t * btn)
{
 80150e0:	b570      	push	{r4, r5, r6, lr}
#if USE_LV_IMG != 0
    lv_obj_t * img = lv_obj_get_child(btn, NULL);
 80150e2:	2100      	movs	r1, #0
{
 80150e4:	4605      	mov	r5, r0
    lv_obj_t * img = lv_obj_get_child(btn, NULL);
 80150e6:	f7f4 fbd9 	bl	800989c <lv_obj_get_child>
    if(img == NULL) return NULL;
 80150ea:	b170      	cbz	r0, 801510a <lv_list_get_btn_img+0x2a>
 80150ec:	4603      	mov	r3, r0
 80150ee:	4e08      	ldr	r6, [pc, #32]	; (8015110 <lv_list_get_btn_img+0x30>)
 80150f0:	e003      	b.n	80150fa <lv_list_get_btn_img+0x1a>

    while(img->signal_func != img_signal) {
        img = lv_obj_get_child(btn, img);
 80150f2:	f7f4 fbd3 	bl	800989c <lv_obj_get_child>
        if(img == NULL) break;
 80150f6:	4603      	mov	r3, r0
 80150f8:	b138      	cbz	r0, 801510a <lv_list_get_btn_img+0x2a>
    while(img->signal_func != img_signal) {
 80150fa:	699c      	ldr	r4, [r3, #24]
        img = lv_obj_get_child(btn, img);
 80150fc:	4619      	mov	r1, r3
    while(img->signal_func != img_signal) {
 80150fe:	6872      	ldr	r2, [r6, #4]
        img = lv_obj_get_child(btn, img);
 8015100:	4628      	mov	r0, r5
    while(img->signal_func != img_signal) {
 8015102:	4294      	cmp	r4, r2
 8015104:	d1f5      	bne.n	80150f2 <lv_list_get_btn_img+0x12>

    return img;
#else
    return NULL;
#endif
}
 8015106:	4618      	mov	r0, r3
 8015108:	bd70      	pop	{r4, r5, r6, pc}
    if(img == NULL) return NULL;
 801510a:	2300      	movs	r3, #0
}
 801510c:	4618      	mov	r0, r3
 801510e:	bd70      	pop	{r4, r5, r6, pc}
 8015110:	200174dc 	.word	0x200174dc

08015114 <lv_list_get_prev_btn>:
 * @param list pointer to a list object
 * @param prev_btn pointer to button. Search the previous before it.
 * @return pointer to the previous button or NULL when no more buttons
 */
lv_obj_t * lv_list_get_prev_btn(const lv_obj_t * list, lv_obj_t * prev_btn)
{
 8015114:	b538      	push	{r3, r4, r5, lr}
 8015116:	460d      	mov	r5, r1
    /* Not a good practice but user can add/create objects to the lists manually.
     * When getting the next button try to be sure that it is at least a button */

    lv_obj_t * btn ;
    lv_obj_t * scrl = lv_page_get_scrl(list);
 8015118:	f001 fab0 	bl	801667c <lv_page_get_scrl>
 801511c:	4604      	mov	r4, r0

    btn = lv_obj_get_child(scrl, prev_btn);
 801511e:	4629      	mov	r1, r5
 8015120:	f7f4 fbbc 	bl	800989c <lv_obj_get_child>
    if(btn == NULL) return NULL;
 8015124:	b168      	cbz	r0, 8015142 <lv_list_get_prev_btn+0x2e>
 8015126:	4603      	mov	r3, r0
 8015128:	4d07      	ldr	r5, [pc, #28]	; (8015148 <lv_list_get_prev_btn+0x34>)
 801512a:	e003      	b.n	8015134 <lv_list_get_prev_btn+0x20>

    while(btn->signal_func != lv_list_btn_signal) {
        btn = lv_obj_get_child(scrl, btn);
 801512c:	f7f4 fbb6 	bl	800989c <lv_obj_get_child>
        if(btn == NULL) break;
 8015130:	4603      	mov	r3, r0
 8015132:	b130      	cbz	r0, 8015142 <lv_list_get_prev_btn+0x2e>
    while(btn->signal_func != lv_list_btn_signal) {
 8015134:	699a      	ldr	r2, [r3, #24]
        btn = lv_obj_get_child(scrl, btn);
 8015136:	4619      	mov	r1, r3
 8015138:	4620      	mov	r0, r4
    while(btn->signal_func != lv_list_btn_signal) {
 801513a:	42aa      	cmp	r2, r5
 801513c:	d1f6      	bne.n	801512c <lv_list_get_prev_btn+0x18>
    }

    return btn;
}
 801513e:	4618      	mov	r0, r3
 8015140:	bd38      	pop	{r3, r4, r5, pc}
    if(btn == NULL) return NULL;
 8015142:	2300      	movs	r3, #0
}
 8015144:	4618      	mov	r0, r3
 8015146:	bd38      	pop	{r3, r4, r5, pc}
 8015148:	08015185 	.word	0x08015185

0801514c <lv_list_get_next_btn>:
 * @param list pointer to a list object
 * @param prev_btn pointer to button. Search the next after it.
 * @return pointer to the next button or NULL when no more buttons
 */
lv_obj_t * lv_list_get_next_btn(const lv_obj_t * list, lv_obj_t * prev_btn)
{
 801514c:	b538      	push	{r3, r4, r5, lr}
 801514e:	460d      	mov	r5, r1
    /* Not a good practice but user can add/create objects to the lists manually.
     * When getting the next button try to be sure that it is at least a button */

    lv_obj_t * btn ;
    lv_obj_t * scrl = lv_page_get_scrl(list);
 8015150:	f001 fa94 	bl	801667c <lv_page_get_scrl>
 8015154:	4604      	mov	r4, r0

    btn = lv_obj_get_child_back(scrl, prev_btn);
 8015156:	4629      	mov	r1, r5
 8015158:	f7f4 fc36 	bl	80099c8 <lv_obj_get_child_back>
    if(btn == NULL) return NULL;
 801515c:	b168      	cbz	r0, 801517a <lv_list_get_next_btn+0x2e>
 801515e:	4603      	mov	r3, r0
 8015160:	4d07      	ldr	r5, [pc, #28]	; (8015180 <lv_list_get_next_btn+0x34>)
 8015162:	e003      	b.n	801516c <lv_list_get_next_btn+0x20>

    while(btn->signal_func != lv_list_btn_signal) {
        btn = lv_obj_get_child_back(scrl, btn);
 8015164:	f7f4 fc30 	bl	80099c8 <lv_obj_get_child_back>
        if(btn == NULL) break;
 8015168:	4603      	mov	r3, r0
 801516a:	b130      	cbz	r0, 801517a <lv_list_get_next_btn+0x2e>
    while(btn->signal_func != lv_list_btn_signal) {
 801516c:	699a      	ldr	r2, [r3, #24]
        btn = lv_obj_get_child_back(scrl, btn);
 801516e:	4619      	mov	r1, r3
 8015170:	4620      	mov	r0, r4
    while(btn->signal_func != lv_list_btn_signal) {
 8015172:	42aa      	cmp	r2, r5
 8015174:	d1f6      	bne.n	8015164 <lv_list_get_next_btn+0x18>
    }

    return btn;
}
 8015176:	4618      	mov	r0, r3
 8015178:	bd38      	pop	{r3, r4, r5, pc}
    if(btn == NULL) return NULL;
 801517a:	2300      	movs	r3, #0
}
 801517c:	4618      	mov	r0, r3
 801517e:	bd38      	pop	{r3, r4, r5, pc}
 8015180:	08015185 	.word	0x08015185

08015184 <lv_list_btn_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_list_btn_signal(lv_obj_t * btn, lv_signal_t sign, void * param)
{
 8015184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_btn_signal(btn, sign, param);
 8015188:	4d4c      	ldr	r5, [pc, #304]	; (80152bc <lv_list_btn_signal+0x138>)
{
 801518a:	4607      	mov	r7, r0
 801518c:	460e      	mov	r6, r1
    res = ancestor_btn_signal(btn, sign, param);
 801518e:	682b      	ldr	r3, [r5, #0]
 8015190:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8015192:	2801      	cmp	r0, #1
    res = ancestor_btn_signal(btn, sign, param);
 8015194:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
 8015196:	d002      	beq.n	801519e <lv_list_btn_signal+0x1a>
#endif
    }


    return res;
}
 8015198:	4620      	mov	r0, r4
 801519a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(sign == LV_SIGNAL_RELEASED) {
 801519e:	2e0b      	cmp	r6, #11
 80151a0:	d017      	beq.n	80151d2 <lv_list_btn_signal+0x4e>
    else if(sign == LV_SIGNAL_PRESS_LOST) {
 80151a2:	2e0a      	cmp	r6, #10
 80151a4:	d071      	beq.n	801528a <lv_list_btn_signal+0x106>
    else if(sign == LV_SIGNAL_CLEANUP) {
 80151a6:	2e00      	cmp	r6, #0
 80151a8:	d1f6      	bne.n	8015198 <lv_list_btn_signal+0x14>
        lv_obj_t * list = lv_obj_get_parent(lv_obj_get_parent(btn));
 80151aa:	4638      	mov	r0, r7
 80151ac:	f7f4 fb74 	bl	8009898 <lv_obj_get_parent>
 80151b0:	f7f4 fb72 	bl	8009898 <lv_obj_get_parent>
 80151b4:	4605      	mov	r5, r0
    lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 80151b6:	f7f4 fd45 	bl	8009c44 <lv_obj_get_ext_attr>
        if(sel == btn) lv_list_set_btn_selected(list, lv_list_get_next_btn(list, btn));
 80151ba:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80151bc:	429f      	cmp	r7, r3
 80151be:	d1eb      	bne.n	8015198 <lv_list_btn_signal+0x14>
 80151c0:	4639      	mov	r1, r7
 80151c2:	4628      	mov	r0, r5
 80151c4:	f7ff ffc2 	bl	801514c <lv_list_get_next_btn>
 80151c8:	4601      	mov	r1, r0
 80151ca:	4628      	mov	r0, r5
 80151cc:	f7ff fe70 	bl	8014eb0 <lv_list_set_btn_selected>
 80151d0:	e7e2      	b.n	8015198 <lv_list_btn_signal+0x14>
        lv_obj_t * list = lv_obj_get_parent(lv_obj_get_parent(btn));
 80151d2:	4638      	mov	r0, r7
 80151d4:	f7f4 fb60 	bl	8009898 <lv_obj_get_parent>
 80151d8:	f7f4 fb5e 	bl	8009898 <lv_obj_get_parent>
 80151dc:	4680      	mov	r8, r0
        lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 80151de:	f7f4 fd31 	bl	8009c44 <lv_obj_get_ext_attr>
 80151e2:	4606      	mov	r6, r0
        lv_group_t * g = lv_obj_get_group(list);
 80151e4:	4640      	mov	r0, r8
        ext->page.scroll_prop_ip = 0;
 80151e6:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 80151ea:	f36f 0382 	bfc	r3, #2, #1
 80151ee:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
        lv_group_t * g = lv_obj_get_group(list);
 80151f2:	f7f4 fd29 	bl	8009c48 <lv_obj_get_group>
        if(lv_group_get_focused(g) == list && lv_indev_is_dragging(lv_indev_get_act()) == false) {
 80151f6:	f7f3 f811 	bl	800821c <lv_group_get_focused>
 80151fa:	4580      	cmp	r8, r0
 80151fc:	d026      	beq.n	801524c <lv_list_btn_signal+0xc8>
        last_clicked_btn = btn;
 80151fe:	60ef      	str	r7, [r5, #12]
        if(lv_indev_is_dragging(lv_indev_get_act()) == false && ext->single_mode)
 8015200:	f7f3 fd4e 	bl	8008ca0 <lv_indev_get_act>
 8015204:	f7f3 fd82 	bl	8008d0c <lv_indev_is_dragging>
 8015208:	4605      	mov	r5, r0
 801520a:	2800      	cmp	r0, #0
 801520c:	d1c4      	bne.n	8015198 <lv_list_btn_signal+0x14>
 801520e:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
 8015212:	2b00      	cmp	r3, #0
 8015214:	d0c0      	beq.n	8015198 <lv_list_btn_signal+0x14>
 * Make a single button selected in the list, deselect others, should be called in list btns call back.
 * @param btn pointer to the currently pressed list btn object
 */
static void lv_list_btn_single_selected(lv_obj_t *btn)
{
    lv_obj_t *list = lv_obj_get_parent(lv_obj_get_parent(btn));
 8015216:	4638      	mov	r0, r7
 8015218:	f7f4 fb3e 	bl	8009898 <lv_obj_get_parent>
 801521c:	f7f4 fb3c 	bl	8009898 <lv_obj_get_parent>

    lv_obj_t * e = lv_list_get_next_btn(list, NULL);
 8015220:	4629      	mov	r1, r5
    lv_obj_t *list = lv_obj_get_parent(lv_obj_get_parent(btn));
 8015222:	4606      	mov	r6, r0
    lv_obj_t * e = lv_list_get_next_btn(list, NULL);
 8015224:	f7ff ff92 	bl	801514c <lv_list_get_next_btn>
 8015228:	4605      	mov	r5, r0
    do
    {
        if(e == btn)
 801522a:	42af      	cmp	r7, r5
        {
            lv_btn_set_state(e, LV_BTN_STATE_TGL_REL);
        }
        else
        {
            lv_btn_set_state(e, LV_BTN_STATE_REL);
 801522c:	4628      	mov	r0, r5
 801522e:	f04f 0100 	mov.w	r1, #0
            lv_btn_set_state(e, LV_BTN_STATE_TGL_REL);
 8015232:	bf04      	itt	eq
 8015234:	4638      	moveq	r0, r7
 8015236:	2102      	moveq	r1, #2
            lv_btn_set_state(e, LV_BTN_STATE_REL);
 8015238:	f7fc f92e 	bl	8011498 <lv_btn_set_state>
        }
        e = lv_list_get_next_btn(list, e);
 801523c:	4629      	mov	r1, r5
 801523e:	4630      	mov	r0, r6
 8015240:	f7ff ff84 	bl	801514c <lv_list_get_next_btn>
    } while (e != NULL);
 8015244:	4605      	mov	r5, r0
 8015246:	2800      	cmp	r0, #0
 8015248:	d1ef      	bne.n	801522a <lv_list_btn_signal+0xa6>
 801524a:	e7a5      	b.n	8015198 <lv_list_btn_signal+0x14>
        if(lv_group_get_focused(g) == list && lv_indev_is_dragging(lv_indev_get_act()) == false) {
 801524c:	f7f3 fd28 	bl	8008ca0 <lv_indev_get_act>
 8015250:	f7f3 fd5c 	bl	8008d0c <lv_indev_is_dragging>
 8015254:	2800      	cmp	r0, #0
 8015256:	d1d2      	bne.n	80151fe <lv_list_btn_signal+0x7a>
            lv_obj_t * btn_i = lv_list_get_prev_btn(list, NULL);
 8015258:	4601      	mov	r1, r0
 801525a:	4640      	mov	r0, r8
 801525c:	f7ff ff5a 	bl	8015114 <lv_list_get_prev_btn>
            while(btn_i) {
 8015260:	4681      	mov	r9, r0
 8015262:	b940      	cbnz	r0, 8015276 <lv_list_btn_signal+0xf2>
 8015264:	e024      	b.n	80152b0 <lv_list_btn_signal+0x12c>
                else if(s == LV_BTN_STATE_TGL_PR) lv_btn_set_state(btn_i, LV_BTN_STATE_TGL_REL);
 8015266:	2803      	cmp	r0, #3
 8015268:	d01d      	beq.n	80152a6 <lv_list_btn_signal+0x122>
                btn_i = lv_list_get_prev_btn(list, btn_i);
 801526a:	4649      	mov	r1, r9
 801526c:	4640      	mov	r0, r8
 801526e:	f7ff ff51 	bl	8015114 <lv_list_get_prev_btn>
            while(btn_i) {
 8015272:	4681      	mov	r9, r0
 8015274:	b1e0      	cbz	r0, 80152b0 <lv_list_btn_signal+0x12c>
                lv_btn_state_t s = lv_btn_get_state(btn_i);
 8015276:	4648      	mov	r0, r9
 8015278:	f7fc fb22 	bl	80118c0 <lv_btn_get_state>
                if(s == LV_BTN_STATE_PR) lv_btn_set_state(btn_i, LV_BTN_STATE_REL);
 801527c:	2801      	cmp	r0, #1
 801527e:	d1f2      	bne.n	8015266 <lv_list_btn_signal+0xe2>
 8015280:	2100      	movs	r1, #0
 8015282:	4648      	mov	r0, r9
 8015284:	f7fc f908 	bl	8011498 <lv_btn_set_state>
 8015288:	e7ef      	b.n	801526a <lv_list_btn_signal+0xe6>
        lv_obj_t * list = lv_obj_get_parent(lv_obj_get_parent(btn));
 801528a:	4638      	mov	r0, r7
 801528c:	f7f4 fb04 	bl	8009898 <lv_obj_get_parent>
 8015290:	f7f4 fb02 	bl	8009898 <lv_obj_get_parent>
        lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 8015294:	f7f4 fcd6 	bl	8009c44 <lv_obj_get_ext_attr>
        ext->page.scroll_prop_ip = 0;
 8015298:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 801529c:	f36f 0382 	bfc	r3, #2, #1
 80152a0:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
 80152a4:	e778      	b.n	8015198 <lv_list_btn_signal+0x14>
                else if(s == LV_BTN_STATE_TGL_PR) lv_btn_set_state(btn_i, LV_BTN_STATE_TGL_REL);
 80152a6:	2102      	movs	r1, #2
 80152a8:	4648      	mov	r0, r9
 80152aa:	f7fc f8f5 	bl	8011498 <lv_btn_set_state>
 80152ae:	e7dc      	b.n	801526a <lv_list_btn_signal+0xe6>
            lv_list_set_btn_selected(list, btn);
 80152b0:	4640      	mov	r0, r8
 80152b2:	4639      	mov	r1, r7
 80152b4:	f7ff fdfc 	bl	8014eb0 <lv_list_set_btn_selected>
 80152b8:	e7a1      	b.n	80151fe <lv_list_btn_signal+0x7a>
 80152ba:	bf00      	nop
 80152bc:	200174dc 	.word	0x200174dc

080152c0 <lv_list_get_style>:
{
 80152c0:	b538      	push	{r3, r4, r5, lr}
 80152c2:	460c      	mov	r4, r1
 80152c4:	4605      	mov	r5, r0
    lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 80152c6:	f7f4 fcbd 	bl	8009c44 <lv_obj_get_ext_attr>
    switch(type) {
 80152ca:	2c08      	cmp	r4, #8
 80152cc:	d828      	bhi.n	8015320 <lv_list_get_style+0x60>
 80152ce:	e8df f004 	tbb	[pc, r4]
 80152d2:	0d07      	.short	0x0d07
 80152d4:	211f1913 	.word	0x211f1913
 80152d8:	2523      	.short	0x2523
 80152da:	05          	.byte	0x05
 80152db:	00          	.byte	0x00
            style = ext->styles_btn[LV_BTN_STATE_INA];
 80152dc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
            break;
 80152de:	bd38      	pop	{r3, r4, r5, pc}
            style = lv_page_get_style(list, LV_PAGE_STYLE_BG);
 80152e0:	4628      	mov	r0, r5
 80152e2:	2100      	movs	r1, #0
}
 80152e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            style = lv_page_get_style(list, LV_PAGE_STYLE_BG);
 80152e8:	f001 b9d6 	b.w	8016698 <lv_page_get_style>
            style = lv_page_get_style(list, LV_PAGE_STYLE_SB);
 80152ec:	4628      	mov	r0, r5
 80152ee:	2102      	movs	r1, #2
}
 80152f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            style = lv_page_get_style(list, LV_PAGE_STYLE_SB);
 80152f4:	f001 b9d0 	b.w	8016698 <lv_page_get_style>
            style = lv_page_get_style(list, LV_PAGE_STYLE_SCRL);
 80152f8:	4628      	mov	r0, r5
 80152fa:	2101      	movs	r1, #1
}
 80152fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            style = lv_page_get_style(list, LV_PAGE_STYLE_SCRL);
 8015300:	f001 b9ca 	b.w	8016698 <lv_page_get_style>
            style = lv_page_get_style(list, LV_PAGE_STYLE_EDGE_FLASH);
 8015304:	4628      	mov	r0, r5
 8015306:	2103      	movs	r1, #3
}
 8015308:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            style = lv_page_get_style(list, LV_PAGE_STYLE_EDGE_FLASH);
 801530c:	f001 b9c4 	b.w	8016698 <lv_page_get_style>
            style = ext->styles_btn[LV_BTN_STATE_REL];
 8015310:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
            break;
 8015312:	bd38      	pop	{r3, r4, r5, pc}
            style = ext->styles_btn[LV_BTN_STATE_PR];
 8015314:	6c00      	ldr	r0, [r0, #64]	; 0x40
            break;
 8015316:	bd38      	pop	{r3, r4, r5, pc}
            style = ext->styles_btn[LV_BTN_STATE_TGL_REL];
 8015318:	6c40      	ldr	r0, [r0, #68]	; 0x44
            break;
 801531a:	bd38      	pop	{r3, r4, r5, pc}
            style = ext->styles_btn[LV_BTN_STATE_TGL_PR];
 801531c:	6c80      	ldr	r0, [r0, #72]	; 0x48
            break;
 801531e:	bd38      	pop	{r3, r4, r5, pc}
            style = NULL;
 8015320:	2000      	movs	r0, #0
}
 8015322:	bd38      	pop	{r3, r4, r5, pc}

08015324 <refr_btn_width>:
{
 8015324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015326:	4606      	mov	r6, r0
    lv_style_t * style = lv_list_get_style(list, LV_LIST_STYLE_BG);
 8015328:	2100      	movs	r1, #0
 801532a:	f7ff ffc9 	bl	80152c0 <lv_list_get_style>
 801532e:	4605      	mov	r5, r0
    lv_style_t * style_scrl = lv_obj_get_style(lv_page_get_scrl(list));
 8015330:	4630      	mov	r0, r6
 8015332:	f001 f9a3 	bl	801667c <lv_page_get_scrl>
 8015336:	f7f4 fb6b 	bl	8009a10 <lv_obj_get_style>
 801533a:	4604      	mov	r4, r0
    lv_coord_t w = lv_obj_get_width(list);
 801533c:	4630      	mov	r0, r6
 801533e:	f7f4 fb5b 	bl	80099f8 <lv_obj_get_width>
    lv_coord_t btn_w = w - (style->body.padding.hor + style_scrl->body.padding.hor) * 2;
 8015342:	f9b5 5022 	ldrsh.w	r5, [r5, #34]	; 0x22
 8015346:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
    lv_obj_t * btn = lv_list_get_prev_btn(list, NULL);
 801534a:	2100      	movs	r1, #0
    lv_coord_t btn_w = w - (style->body.padding.hor + style_scrl->body.padding.hor) * 2;
 801534c:	441d      	add	r5, r3
 801534e:	eba0 0545 	sub.w	r5, r0, r5, lsl #1
    lv_obj_t * btn = lv_list_get_prev_btn(list, NULL);
 8015352:	4630      	mov	r0, r6
 8015354:	f7ff fede 	bl	8015114 <lv_list_get_prev_btn>
    while(btn) {
 8015358:	b1f8      	cbz	r0, 801539a <refr_btn_width+0x76>
 801535a:	b22d      	sxth	r5, r5
 801535c:	4604      	mov	r4, r0
        if(lv_obj_get_width(btn) != btn_w) {
 801535e:	4620      	mov	r0, r4
 8015360:	f7f4 fb4a 	bl	80099f8 <lv_obj_get_width>
 8015364:	4285      	cmp	r5, r0
            lv_obj_set_width(btn, btn_w);
 8015366:	4629      	mov	r1, r5
 8015368:	4620      	mov	r0, r4
        if(lv_obj_get_width(btn) != btn_w) {
 801536a:	d00f      	beq.n	801538c <refr_btn_width+0x68>
            lv_obj_set_width(btn, btn_w);
 801536c:	f7f3 ffd4 	bl	8009318 <lv_obj_set_width>
            lv_obj_t * label = lv_list_get_btn_label(btn);
 8015370:	4620      	mov	r0, r4
 8015372:	f7ff fe8f 	bl	8015094 <lv_list_get_btn_label>
            lv_obj_set_width(label, btn->coords.x2 - label->coords.x1);
 8015376:	8aa1      	ldrh	r1, [r4, #20]
 8015378:	8a03      	ldrh	r3, [r0, #16]
            lv_obj_t * label = lv_list_get_btn_label(btn);
 801537a:	4607      	mov	r7, r0
            lv_obj_set_width(label, btn->coords.x2 - label->coords.x1);
 801537c:	1ac9      	subs	r1, r1, r3
 801537e:	b209      	sxth	r1, r1
 8015380:	f7f3 ffca 	bl	8009318 <lv_obj_set_width>
            lv_label_set_text(label, NULL);
 8015384:	4638      	mov	r0, r7
 8015386:	2100      	movs	r1, #0
 8015388:	f7ff fbf8 	bl	8014b7c <lv_label_set_text>
        btn = lv_list_get_prev_btn(list, btn);
 801538c:	4621      	mov	r1, r4
 801538e:	4630      	mov	r0, r6
 8015390:	f7ff fec0 	bl	8015114 <lv_list_get_prev_btn>
    while(btn) {
 8015394:	4604      	mov	r4, r0
 8015396:	2800      	cmp	r0, #0
 8015398:	d1e1      	bne.n	801535e <refr_btn_width+0x3a>
 801539a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801539c <lv_list_signal>:
{
 801539c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = ancestor_page_signal(list, sign, param);
 80153a0:	4e59      	ldr	r6, [pc, #356]	; (8015508 <lv_list_signal+0x16c>)
{
 80153a2:	4607      	mov	r7, r0
 80153a4:	460d      	mov	r5, r1
 80153a6:	4690      	mov	r8, r2
    res = ancestor_page_signal(list, sign, param);
 80153a8:	6933      	ldr	r3, [r6, #16]
 80153aa:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 80153ac:	2801      	cmp	r0, #1
    res = ancestor_page_signal(list, sign, param);
 80153ae:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
 80153b0:	d002      	beq.n	80153b8 <lv_list_signal+0x1c>
}
 80153b2:	4620      	mov	r0, r4
 80153b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(sign == LV_SIGNAL_CORD_CHG) {
 80153b8:	2d02      	cmp	r5, #2
 80153ba:	d018      	beq.n	80153ee <lv_list_signal+0x52>
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 80153bc:	2d03      	cmp	r5, #3
 80153be:	d022      	beq.n	8015406 <lv_list_signal+0x6a>
    } else if(sign == LV_SIGNAL_FOCUS) {
 80153c0:	2d10      	cmp	r5, #16
 80153c2:	d05e      	beq.n	8015482 <lv_list_signal+0xe6>
    } else if(sign == LV_SIGNAL_DEFOCUS) {
 80153c4:	2d11      	cmp	r5, #17
 80153c6:	d070      	beq.n	80154aa <lv_list_signal+0x10e>
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 80153c8:	2d14      	cmp	r5, #20
 80153ca:	d047      	beq.n	801545c <lv_list_signal+0xc0>
    } else if(sign == LV_SIGNAL_CONTROLL) {
 80153cc:	2d12      	cmp	r5, #18
 80153ce:	d01e      	beq.n	801540e <lv_list_signal+0x72>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 80153d0:	2d06      	cmp	r5, #6
 80153d2:	d1ee      	bne.n	80153b2 <lv_list_signal+0x16>
 80153d4:	f1a8 0204 	sub.w	r2, r8, #4
 80153d8:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 80153da:	f852 1f04 	ldr.w	r1, [r2, #4]!
 80153de:	b111      	cbz	r1, 80153e6 <lv_list_signal+0x4a>
 80153e0:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) {  /*Find the last set data*/
 80153e2:	2b07      	cmp	r3, #7
 80153e4:	d1f9      	bne.n	80153da <lv_list_signal+0x3e>
        buf->type[i] = "lv_list";
 80153e6:	4a49      	ldr	r2, [pc, #292]	; (801550c <lv_list_signal+0x170>)
 80153e8:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
 80153ec:	e7e1      	b.n	80153b2 <lv_list_signal+0x16>
        lv_coord_t w = lv_obj_get_width(list);
 80153ee:	4638      	mov	r0, r7
 80153f0:	f7f4 fb02 	bl	80099f8 <lv_obj_get_width>
    return area_p->x2 - area_p->x1 + 1;
 80153f4:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80153f8:	f8b8 2000 	ldrh.w	r2, [r8]
 80153fc:	3301      	adds	r3, #1
 80153fe:	1a9b      	subs	r3, r3, r2
        if(w != lv_area_get_width(param)) {   /*Width changed*/
 8015400:	b21b      	sxth	r3, r3
 8015402:	4298      	cmp	r0, r3
 8015404:	d0d5      	beq.n	80153b2 <lv_list_signal+0x16>
            refr_btn_width(list);
 8015406:	4638      	mov	r0, r7
 8015408:	f7ff ff8c 	bl	8015324 <refr_btn_width>
 801540c:	e7d1      	b.n	80153b2 <lv_list_signal+0x16>
        char c = *((char *)param);
 801540e:	f898 3000 	ldrb.w	r3, [r8]
        if(c == LV_GROUP_KEY_RIGHT || c == LV_GROUP_KEY_DOWN) {
 8015412:	f1a3 0212 	sub.w	r2, r3, #18
 8015416:	2a01      	cmp	r2, #1
 8015418:	d923      	bls.n	8015462 <lv_list_signal+0xc6>
        } else if(c == LV_GROUP_KEY_LEFT || c == LV_GROUP_KEY_UP) {
 801541a:	2b14      	cmp	r3, #20
 801541c:	d050      	beq.n	80154c0 <lv_list_signal+0x124>
 801541e:	2b11      	cmp	r3, #17
 8015420:	d04e      	beq.n	80154c0 <lv_list_signal+0x124>
        } else if(c == LV_GROUP_KEY_ENTER) {
 8015422:	2b0a      	cmp	r3, #10
 8015424:	d1c5      	bne.n	80153b2 <lv_list_signal+0x16>
            btn = lv_list_get_prev_btn(list, btn);
 8015426:	2100      	movs	r1, #0
 8015428:	4638      	mov	r0, r7
 801542a:	f7ff fe73 	bl	8015114 <lv_list_get_prev_btn>
            while(btn != NULL) {
 801542e:	4605      	mov	r5, r0
 8015430:	2800      	cmp	r0, #0
 8015432:	d0be      	beq.n	80153b2 <lv_list_signal+0x16>
                if(lv_btn_get_state(btn) == LV_BTN_STATE_PR) break;
 8015434:	f7fc fa44 	bl	80118c0 <lv_btn_get_state>
 8015438:	2801      	cmp	r0, #1
                btn = lv_list_get_prev_btn(list, btn);
 801543a:	4629      	mov	r1, r5
 801543c:	4638      	mov	r0, r7
                if(lv_btn_get_state(btn) == LV_BTN_STATE_PR) break;
 801543e:	d1f4      	bne.n	801542a <lv_list_signal+0x8e>
                lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 8015440:	4638      	mov	r0, r7
 8015442:	f7f4 fbff 	bl	8009c44 <lv_obj_get_ext_attr>
                rel_action = lv_btn_get_action(btn, LV_BTN_ACTION_CLICK);
 8015446:	2100      	movs	r1, #0
                ext->last_sel = btn;
 8015448:	65c5      	str	r5, [r0, #92]	; 0x5c
                rel_action = lv_btn_get_action(btn, LV_BTN_ACTION_CLICK);
 801544a:	4628      	mov	r0, r5
 801544c:	f7fc fa3e 	bl	80118cc <lv_btn_get_action>
                if(rel_action != NULL) rel_action(btn);
 8015450:	4603      	mov	r3, r0
 8015452:	2800      	cmp	r0, #0
 8015454:	d0ad      	beq.n	80153b2 <lv_list_signal+0x16>
 8015456:	4628      	mov	r0, r5
 8015458:	4798      	blx	r3
 801545a:	e7aa      	b.n	80153b2 <lv_list_signal+0x16>
        *editable = true;
 801545c:	f888 0000 	strb.w	r0, [r8]
 8015460:	e7a7      	b.n	80153b2 <lv_list_signal+0x16>
            lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 8015462:	4638      	mov	r0, r7
 8015464:	f7f4 fbee 	bl	8009c44 <lv_obj_get_ext_attr>
            if(ext->selected_btn) {
 8015468:	6e01      	ldr	r1, [r0, #96]	; 0x60
                lv_obj_t * btn_prev = lv_list_get_next_btn(list, ext->selected_btn);
 801546a:	4638      	mov	r0, r7
            if(ext->selected_btn) {
 801546c:	2900      	cmp	r1, #0
 801546e:	d044      	beq.n	80154fa <lv_list_signal+0x15e>
                lv_obj_t * btn = lv_list_get_next_btn(list, NULL);
 8015470:	f7ff fe6c 	bl	801514c <lv_list_get_next_btn>
                if(btn) lv_list_set_btn_selected(list, btn);
 8015474:	2800      	cmp	r0, #0
 8015476:	d09c      	beq.n	80153b2 <lv_list_signal+0x16>
                    lv_list_set_btn_selected(list, lv_list_get_next_btn(list, NULL));
 8015478:	4601      	mov	r1, r0
 801547a:	4638      	mov	r0, r7
 801547c:	f7ff fd18 	bl	8014eb0 <lv_list_set_btn_selected>
 8015480:	e797      	b.n	80153b2 <lv_list_signal+0x16>
        lv_hal_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 8015482:	f7f3 fc0d 	bl	8008ca0 <lv_indev_get_act>
 8015486:	f7f3 fc11 	bl	8008cac <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801548a:	2804      	cmp	r0, #4
 801548c:	d026      	beq.n	80154dc <lv_list_signal+0x140>
            if(last_clicked_btn) {
 801548e:	68f1      	ldr	r1, [r6, #12]
                lv_list_set_btn_selected(list, last_clicked_btn);
 8015490:	4638      	mov	r0, r7
            if(last_clicked_btn) {
 8015492:	2900      	cmp	r1, #0
 8015494:	d1f2      	bne.n	801547c <lv_list_signal+0xe0>
                lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 8015496:	f7f4 fbd5 	bl	8009c44 <lv_obj_get_ext_attr>
                if(NULL != ext->last_sel) {
 801549a:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
                    lv_list_set_btn_selected(list, ext->last_sel);
 801549c:	4638      	mov	r0, r7
                if(NULL != ext->last_sel) {
 801549e:	2900      	cmp	r1, #0
 80154a0:	d1ec      	bne.n	801547c <lv_list_signal+0xe0>
                    lv_list_set_btn_selected(list, lv_list_get_next_btn(list, NULL));
 80154a2:	f7ff fe53 	bl	801514c <lv_list_get_next_btn>
 80154a6:	4601      	mov	r1, r0
 80154a8:	e7e7      	b.n	801547a <lv_list_signal+0xde>
        lv_list_set_btn_selected(list, NULL);
 80154aa:	2100      	movs	r1, #0
 80154ac:	4638      	mov	r0, r7
        last_clicked_btn = NULL;        /*button click will be set if click happens before focus*/
 80154ae:	460d      	mov	r5, r1
        lv_list_set_btn_selected(list, NULL);
 80154b0:	f7ff fcfe 	bl	8014eb0 <lv_list_set_btn_selected>
        lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 80154b4:	4638      	mov	r0, r7
        last_clicked_btn = NULL;        /*button click will be set if click happens before focus*/
 80154b6:	60f5      	str	r5, [r6, #12]
        lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 80154b8:	f7f4 fbc4 	bl	8009c44 <lv_obj_get_ext_attr>
        ext->selected_btn = NULL;
 80154bc:	6605      	str	r5, [r0, #96]	; 0x60
 80154be:	e778      	b.n	80153b2 <lv_list_signal+0x16>
            lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 80154c0:	4638      	mov	r0, r7
 80154c2:	f7f4 fbbf 	bl	8009c44 <lv_obj_get_ext_attr>
            if(ext->selected_btn != NULL) {
 80154c6:	6e01      	ldr	r1, [r0, #96]	; 0x60
                lv_obj_t * btn_next = lv_list_get_prev_btn(list, ext->selected_btn);
 80154c8:	4638      	mov	r0, r7
            if(ext->selected_btn != NULL) {
 80154ca:	2900      	cmp	r1, #0
 80154cc:	d0d0      	beq.n	8015470 <lv_list_signal+0xd4>
                lv_obj_t * btn_next = lv_list_get_prev_btn(list, ext->selected_btn);
 80154ce:	f7ff fe21 	bl	8015114 <lv_list_get_prev_btn>
                if(btn_next) lv_list_set_btn_selected(list, btn_next);
 80154d2:	2800      	cmp	r0, #0
 80154d4:	f43f af6d 	beq.w	80153b2 <lv_list_signal+0x16>
                    lv_list_set_btn_selected(list, lv_list_get_next_btn(list, NULL));
 80154d8:	4601      	mov	r1, r0
 80154da:	e7ce      	b.n	801547a <lv_list_signal+0xde>
            lv_group_t * g = lv_obj_get_group(list);
 80154dc:	4638      	mov	r0, r7
 80154de:	f7f4 fbb3 	bl	8009c48 <lv_obj_get_group>
            if(lv_group_get_editing(g)) {
 80154e2:	f7f2 fea1 	bl	8008228 <lv_group_get_editing>
 80154e6:	2800      	cmp	r0, #0
 80154e8:	d0c6      	beq.n	8015478 <lv_list_signal+0xdc>
                lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 80154ea:	4638      	mov	r0, r7
 80154ec:	f7f4 fbaa 	bl	8009c44 <lv_obj_get_ext_attr>
                if(NULL != ext->last_sel) {
 80154f0:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
                    lv_list_set_btn_selected(list, ext->last_sel);
 80154f2:	4638      	mov	r0, r7
                if(NULL != ext->last_sel) {
 80154f4:	2900      	cmp	r1, #0
 80154f6:	d1c1      	bne.n	801547c <lv_list_signal+0xe0>
 80154f8:	e7d3      	b.n	80154a2 <lv_list_signal+0x106>
                lv_obj_t * btn = lv_list_get_next_btn(list, NULL);
 80154fa:	f7ff fe27 	bl	801514c <lv_list_get_next_btn>
                if(btn) lv_list_set_btn_selected(list, btn);    /*If there are no buttons on the list then there is no first button*/
 80154fe:	4601      	mov	r1, r0
 8015500:	2800      	cmp	r0, #0
 8015502:	d1ba      	bne.n	801547a <lv_list_signal+0xde>
 8015504:	e755      	b.n	80153b2 <lv_list_signal+0x16>
 8015506:	bf00      	nop
 8015508:	200174dc 	.word	0x200174dc
 801550c:	0808bcb4 	.word	0x0808bcb4

08015510 <lv_list_set_style>:
{
 8015510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015512:	460c      	mov	r4, r1
 8015514:	4617      	mov	r7, r2
 8015516:	4606      	mov	r6, r0
    lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 8015518:	f7f4 fb94 	bl	8009c44 <lv_obj_get_ext_attr>
 801551c:	4605      	mov	r5, r0
    switch(type) {
 801551e:	2c08      	cmp	r4, #8
 8015520:	d84a      	bhi.n	80155b8 <lv_list_set_style+0xa8>
 8015522:	e8df f004 	tbb	[pc, r4]
 8015526:	251e      	.short	0x251e
 8015528:	403d362f 	.word	0x403d362f
 801552c:	4643      	.short	0x4643
 801552e:	05          	.byte	0x05
 801552f:	00          	.byte	0x00
            ext->styles_btn[LV_BTN_STATE_INA] = style;
 8015530:	64c7      	str	r7, [r0, #76]	; 0x4c
            btn_style_refr = LV_BTN_STYLE_INA;
 8015532:	2704      	movs	r7, #4
        btn = lv_list_get_prev_btn(list, NULL);
 8015534:	2100      	movs	r1, #0
 8015536:	4630      	mov	r0, r6
 8015538:	f7ff fdec 	bl	8015114 <lv_list_get_prev_btn>
        while(btn != NULL) {
 801553c:	4604      	mov	r4, r0
 801553e:	b178      	cbz	r0, 8015560 <lv_list_set_style+0x50>
 8015540:	f107 030e 	add.w	r3, r7, #14
            lv_btn_set_style(btn, btn_style_refr, ext->styles_btn[btn_style_refr]);
 8015544:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8015548:	4620      	mov	r0, r4
 801554a:	686a      	ldr	r2, [r5, #4]
 801554c:	4639      	mov	r1, r7
 801554e:	f7fc f8e1 	bl	8011714 <lv_btn_set_style>
            btn = lv_list_get_prev_btn(list, btn);
 8015552:	4621      	mov	r1, r4
 8015554:	4630      	mov	r0, r6
 8015556:	f7ff fddd 	bl	8015114 <lv_list_get_prev_btn>
        while(btn != NULL) {
 801555a:	4604      	mov	r4, r0
 801555c:	2800      	cmp	r0, #0
 801555e:	d1f3      	bne.n	8015548 <lv_list_set_style+0x38>
 8015560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_page_set_style(list, LV_PAGE_STYLE_BG, style);
 8015562:	463a      	mov	r2, r7
 8015564:	4630      	mov	r0, r6
 8015566:	2100      	movs	r1, #0
}
 8015568:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_page_set_style(list, LV_PAGE_STYLE_BG, style);
 801556c:	f000 bf28 	b.w	80163c0 <lv_page_set_style>
            lv_page_set_style(list, LV_PAGE_STYLE_SCRL, style);
 8015570:	4630      	mov	r0, r6
 8015572:	463a      	mov	r2, r7
 8015574:	2101      	movs	r1, #1
 8015576:	f000 ff23 	bl	80163c0 <lv_page_set_style>
            refr_btn_width(list);
 801557a:	4630      	mov	r0, r6
}
 801557c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            refr_btn_width(list);
 8015580:	f7ff bed0 	b.w	8015324 <refr_btn_width>
            lv_page_set_style(list, LV_PAGE_STYLE_SB, style);
 8015584:	463a      	mov	r2, r7
 8015586:	4630      	mov	r0, r6
 8015588:	2102      	movs	r1, #2
}
 801558a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_page_set_style(list, LV_PAGE_STYLE_SB, style);
 801558e:	f000 bf17 	b.w	80163c0 <lv_page_set_style>
            lv_page_set_style(list, LV_PAGE_STYLE_EDGE_FLASH, style);
 8015592:	463a      	mov	r2, r7
 8015594:	4630      	mov	r0, r6
 8015596:	2103      	movs	r1, #3
}
 8015598:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_page_set_style(list, LV_PAGE_STYLE_EDGE_FLASH, style);
 801559c:	f000 bf10 	b.w	80163c0 <lv_page_set_style>
            ext->styles_btn[LV_BTN_STATE_REL] = style;
 80155a0:	63c7      	str	r7, [r0, #60]	; 0x3c
            btn_style_refr = LV_BTN_STYLE_REL;
 80155a2:	2700      	movs	r7, #0
            break;
 80155a4:	e7c6      	b.n	8015534 <lv_list_set_style+0x24>
            ext->styles_btn[LV_BTN_STATE_PR] = style;
 80155a6:	6407      	str	r7, [r0, #64]	; 0x40
            btn_style_refr = LV_BTN_STYLE_PR;
 80155a8:	2701      	movs	r7, #1
            break;
 80155aa:	e7c3      	b.n	8015534 <lv_list_set_style+0x24>
            ext->styles_btn[LV_BTN_STATE_TGL_REL] = style;
 80155ac:	6447      	str	r7, [r0, #68]	; 0x44
            btn_style_refr = LV_BTN_STYLE_TGL_REL;
 80155ae:	2702      	movs	r7, #2
            break;
 80155b0:	e7c0      	b.n	8015534 <lv_list_set_style+0x24>
            ext->styles_btn[LV_BTN_STATE_TGL_PR] = style;
 80155b2:	6487      	str	r7, [r0, #72]	; 0x48
            btn_style_refr = LV_BTN_STYLE_TGL_PR;
 80155b4:	2703      	movs	r7, #3
            break;
 80155b6:	e7bd      	b.n	8015534 <lv_list_set_style+0x24>
    if(type == LV_LIST_STYLE_BTN_PR || type == LV_LIST_STYLE_BTN_REL ||
 80155b8:	3c04      	subs	r4, #4
 80155ba:	2c04      	cmp	r4, #4
 80155bc:	d8d0      	bhi.n	8015560 <lv_list_set_style+0x50>
    lv_btn_style_t btn_style_refr = LV_BTN_STYLE_REL;
 80155be:	2700      	movs	r7, #0
 80155c0:	e7b8      	b.n	8015534 <lv_list_set_style+0x24>
 80155c2:	bf00      	nop

080155c4 <lv_list_create>:
{
 80155c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80155c8:	460e      	mov	r6, r1
    lv_obj_t * new_list = lv_page_create(par, copy);
 80155ca:	f000 ff2d 	bl	8016428 <lv_page_create>
    lv_mem_assert(new_list);
 80155ce:	2800      	cmp	r0, #0
 80155d0:	d06a      	beq.n	80156a8 <lv_list_create+0xe4>
    if(ancestor_page_signal == NULL) ancestor_page_signal = lv_obj_get_signal_func(new_list);
 80155d2:	4d61      	ldr	r5, [pc, #388]	; (8015758 <lv_list_create+0x194>)
 80155d4:	4604      	mov	r4, r0
 80155d6:	692b      	ldr	r3, [r5, #16]
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d066      	beq.n	80156aa <lv_list_create+0xe6>
    lv_list_ext_t * ext = lv_obj_allocate_ext_attr(new_list, sizeof(lv_list_ext_t));
 80155dc:	2164      	movs	r1, #100	; 0x64
 80155de:	4620      	mov	r0, r4
 80155e0:	f7f4 f8be 	bl	8009760 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 80155e4:	4603      	mov	r3, r0
 80155e6:	2800      	cmp	r0, #0
 80155e8:	d05d      	beq.n	80156a6 <lv_list_create+0xe2>
    ext->styles_btn[LV_BTN_STATE_PR] = &lv_style_btn_pr;
 80155ea:	4f5c      	ldr	r7, [pc, #368]	; (801575c <lv_list_create+0x198>)
    ext->style_img = NULL;
 80155ec:	2500      	movs	r5, #0
    ext->styles_btn[LV_BTN_STATE_TGL_REL] = &lv_style_btn_tgl_rel;
 80155ee:	495c      	ldr	r1, [pc, #368]	; (8015760 <lv_list_create+0x19c>)
    ext->anim_time = LV_LIST_FOCUS_TIME;
 80155f0:	2264      	movs	r2, #100	; 0x64
    ext->styles_btn[LV_BTN_STATE_REL] = &lv_style_btn_rel;
 80155f2:	485c      	ldr	r0, [pc, #368]	; (8015764 <lv_list_create+0x1a0>)
    ext->styles_btn[LV_BTN_STATE_PR] = &lv_style_btn_pr;
 80155f4:	641f      	str	r7, [r3, #64]	; 0x40
    ext->styles_btn[LV_BTN_STATE_TGL_REL] = &lv_style_btn_tgl_rel;
 80155f6:	6459      	str	r1, [r3, #68]	; 0x44
    ext->styles_btn[LV_BTN_STATE_TGL_PR] = &lv_style_btn_tgl_pr;
 80155f8:	4f5b      	ldr	r7, [pc, #364]	; (8015768 <lv_list_create+0x1a4>)
    ext->styles_btn[LV_BTN_STATE_INA] = &lv_style_btn_ina;
 80155fa:	495c      	ldr	r1, [pc, #368]	; (801576c <lv_list_create+0x1a8>)
    ext->styles_btn[LV_BTN_STATE_REL] = &lv_style_btn_rel;
 80155fc:	63d8      	str	r0, [r3, #60]	; 0x3c
    lv_obj_set_signal_func(new_list, lv_list_signal);
 80155fe:	4620      	mov	r0, r4
    ext->styles_btn[LV_BTN_STATE_INA] = &lv_style_btn_ina;
 8015600:	64d9      	str	r1, [r3, #76]	; 0x4c
    ext->style_img = NULL;
 8015602:	651d      	str	r5, [r3, #80]	; 0x50
    ext->single_mode = false;
 8015604:	f883 5058 	strb.w	r5, [r3, #88]	; 0x58
    ext->size = 0;
 8015608:	655d      	str	r5, [r3, #84]	; 0x54
    ext->last_sel = NULL;
 801560a:	65dd      	str	r5, [r3, #92]	; 0x5c
    ext->selected_btn = NULL;
 801560c:	661d      	str	r5, [r3, #96]	; 0x60
    ext->styles_btn[LV_BTN_STATE_TGL_PR] = &lv_style_btn_tgl_pr;
 801560e:	649f      	str	r7, [r3, #72]	; 0x48
    ext->anim_time = LV_LIST_FOCUS_TIME;
 8015610:	871a      	strh	r2, [r3, #56]	; 0x38
    lv_obj_set_signal_func(new_list, lv_list_signal);
 8015612:	4957      	ldr	r1, [pc, #348]	; (8015770 <lv_list_create+0x1ac>)
 8015614:	f7f4 f8a0 	bl	8009758 <lv_obj_set_signal_func>
    if(copy == NULL) {
 8015618:	2e00      	cmp	r6, #0
 801561a:	d04a      	beq.n	80156b2 <lv_list_create+0xee>
        lv_list_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801561c:	4630      	mov	r0, r6
 801561e:	f7f4 fb11 	bl	8009c44 <lv_obj_get_ext_attr>
 8015622:	4680      	mov	r8, r0
 8015624:	e014      	b.n	8015650 <lv_list_create+0x8c>
            lv_obj_t * copy_img = lv_list_get_btn_img(copy_btn);
 8015626:	f7ff fd5b 	bl	80150e0 <lv_list_get_btn_img>
            if(copy_img) img_src = lv_img_get_src(copy_img);
 801562a:	4607      	mov	r7, r0
 801562c:	b110      	cbz	r0, 8015634 <lv_list_create+0x70>
 801562e:	f7fe fc0b 	bl	8013e48 <lv_img_get_src>
 8015632:	4607      	mov	r7, r0
            lv_list_add(new_list, img_src, lv_list_get_btn_text(copy_btn), lv_btn_get_action(copy_btn, LV_BTN_ACTION_CLICK));
 8015634:	4628      	mov	r0, r5
 8015636:	f7ff fd47 	bl	80150c8 <lv_list_get_btn_text>
 801563a:	4681      	mov	r9, r0
 801563c:	2100      	movs	r1, #0
 801563e:	4628      	mov	r0, r5
 8015640:	f7fc f944 	bl	80118cc <lv_btn_get_action>
 8015644:	464a      	mov	r2, r9
 8015646:	4603      	mov	r3, r0
 8015648:	4639      	mov	r1, r7
 801564a:	4620      	mov	r0, r4
 801564c:	f7ff fc62 	bl	8014f14 <lv_list_add>
        lv_obj_t * copy_btn = lv_list_get_next_btn(copy, NULL);
 8015650:	4629      	mov	r1, r5
 8015652:	4630      	mov	r0, r6
 8015654:	f7ff fd7a 	bl	801514c <lv_list_get_next_btn>
        while(copy_btn) {
 8015658:	4605      	mov	r5, r0
 801565a:	2800      	cmp	r0, #0
 801565c:	d1e3      	bne.n	8015626 <lv_list_create+0x62>
        lv_list_set_style(new_list, LV_LIST_STYLE_BTN_REL, copy_ext->styles_btn[LV_BTN_STATE_REL]);
 801565e:	f8d8 203c 	ldr.w	r2, [r8, #60]	; 0x3c
 8015662:	4620      	mov	r0, r4
 8015664:	2104      	movs	r1, #4
 8015666:	f7ff ff53 	bl	8015510 <lv_list_set_style>
        lv_list_set_style(new_list, LV_LIST_STYLE_BTN_PR, copy_ext->styles_btn[LV_BTN_STATE_PR]);
 801566a:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 801566e:	4620      	mov	r0, r4
 8015670:	2105      	movs	r1, #5
 8015672:	f7ff ff4d 	bl	8015510 <lv_list_set_style>
        lv_list_set_style(new_list, LV_LIST_STYLE_BTN_TGL_REL, copy_ext->styles_btn[LV_BTN_STATE_TGL_REL]);
 8015676:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
 801567a:	4620      	mov	r0, r4
 801567c:	2106      	movs	r1, #6
 801567e:	f7ff ff47 	bl	8015510 <lv_list_set_style>
        lv_list_set_style(new_list, LV_LIST_STYLE_BTN_TGL_PR, copy_ext->styles_btn[LV_BTN_STATE_TGL_REL]);
 8015682:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
 8015686:	4620      	mov	r0, r4
 8015688:	2107      	movs	r1, #7
 801568a:	f7ff ff41 	bl	8015510 <lv_list_set_style>
        lv_list_set_style(new_list, LV_LIST_STYLE_BTN_INA, copy_ext->styles_btn[LV_BTN_STATE_INA]);
 801568e:	f8d8 204c 	ldr.w	r2, [r8, #76]	; 0x4c
 8015692:	2108      	movs	r1, #8
 8015694:	4620      	mov	r0, r4
 8015696:	f7ff ff3b 	bl	8015510 <lv_list_set_style>
        lv_obj_refresh_style(new_list);
 801569a:	4620      	mov	r0, r4
 801569c:	f7f3 fffe 	bl	800969c <lv_obj_refresh_style>
}
 80156a0:	4620      	mov	r0, r4
 80156a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80156a6:	e7fe      	b.n	80156a6 <lv_list_create+0xe2>
 80156a8:	e7fe      	b.n	80156a8 <lv_list_create+0xe4>
    if(ancestor_page_signal == NULL) ancestor_page_signal = lv_obj_get_signal_func(new_list);
 80156aa:	f7f4 fac7 	bl	8009c3c <lv_obj_get_signal_func>
 80156ae:	6128      	str	r0, [r5, #16]
 80156b0:	e794      	b.n	80155dc <lv_list_create+0x18>
        lv_obj_set_size(new_list, 2 * LV_DPI, 3 * LV_DPI);
 80156b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80156b6:	21c8      	movs	r1, #200	; 0xc8
 80156b8:	4620      	mov	r0, r4
 80156ba:	f7f3 fdf7 	bl	80092ac <lv_obj_set_size>
* @param page pointer to a page object
* @param layout a layout from 'lv_cont_layout_t'
*/
static inline void lv_page_set_scrl_layout(lv_obj_t * page, lv_layout_t layout)
{
    lv_cont_set_layout(lv_page_get_scrl(page), layout);
 80156be:	4620      	mov	r0, r4
 80156c0:	f000 ffdc 	bl	801667c <lv_page_get_scrl>
 80156c4:	2103      	movs	r1, #3
 80156c6:	f7fe f981 	bl	80139cc <lv_cont_set_layout>
 * @param list pointer to a list object
 * @param sb_mode the new mode from 'lv_page_sb_mode_t' enum
 */
static inline void lv_list_set_sb_mode(lv_obj_t * list, lv_sb_mode_t mode)
{
    lv_page_set_sb_mode(list, mode);
 80156ca:	2102      	movs	r1, #2
 80156cc:	4620      	mov	r0, r4
 80156ce:	f000 fe31 	bl	8016334 <lv_page_set_sb_mode>
        lv_theme_t * th = lv_theme_get_current();
 80156d2:	f003 ffa1 	bl	8019618 <lv_theme_get_current>
            lv_list_set_style(new_list, LV_LIST_STYLE_BG, th->list.bg);
 80156d6:	4631      	mov	r1, r6
        if(th) {
 80156d8:	4605      	mov	r5, r0
 80156da:	b388      	cbz	r0, 8015740 <lv_list_create+0x17c>
            lv_list_set_style(new_list, LV_LIST_STYLE_BG, th->list.bg);
 80156dc:	f8d0 20e0 	ldr.w	r2, [r0, #224]	; 0xe0
 80156e0:	4620      	mov	r0, r4
 80156e2:	f7ff ff15 	bl	8015510 <lv_list_set_style>
            lv_list_set_style(new_list, LV_LIST_STYLE_SCRL, th->list.scrl);
 80156e6:	f8d5 20e4 	ldr.w	r2, [r5, #228]	; 0xe4
 80156ea:	4620      	mov	r0, r4
 80156ec:	2101      	movs	r1, #1
 80156ee:	f7ff ff0f 	bl	8015510 <lv_list_set_style>
            lv_list_set_style(new_list, LV_LIST_STYLE_SB, th->list.sb);
 80156f2:	f8d5 20e8 	ldr.w	r2, [r5, #232]	; 0xe8
 80156f6:	4620      	mov	r0, r4
 80156f8:	2102      	movs	r1, #2
 80156fa:	f7ff ff09 	bl	8015510 <lv_list_set_style>
            lv_list_set_style(new_list, LV_LIST_STYLE_BTN_REL, th->list.btn.rel);
 80156fe:	f8d5 20ec 	ldr.w	r2, [r5, #236]	; 0xec
 8015702:	4620      	mov	r0, r4
 8015704:	2104      	movs	r1, #4
 8015706:	f7ff ff03 	bl	8015510 <lv_list_set_style>
            lv_list_set_style(new_list, LV_LIST_STYLE_BTN_PR, th->list.btn.pr);
 801570a:	f8d5 20f0 	ldr.w	r2, [r5, #240]	; 0xf0
 801570e:	4620      	mov	r0, r4
 8015710:	2105      	movs	r1, #5
 8015712:	f7ff fefd 	bl	8015510 <lv_list_set_style>
            lv_list_set_style(new_list, LV_LIST_STYLE_BTN_TGL_REL, th->list.btn.tgl_rel);
 8015716:	f8d5 20f4 	ldr.w	r2, [r5, #244]	; 0xf4
 801571a:	4620      	mov	r0, r4
 801571c:	2106      	movs	r1, #6
 801571e:	f7ff fef7 	bl	8015510 <lv_list_set_style>
            lv_list_set_style(new_list, LV_LIST_STYLE_BTN_TGL_PR, th->list.btn.tgl_pr);
 8015722:	f8d5 20f8 	ldr.w	r2, [r5, #248]	; 0xf8
 8015726:	4620      	mov	r0, r4
 8015728:	2107      	movs	r1, #7
 801572a:	f7ff fef1 	bl	8015510 <lv_list_set_style>
            lv_list_set_style(new_list, LV_LIST_STYLE_BTN_INA, th->list.btn.ina);
 801572e:	4620      	mov	r0, r4
 8015730:	f8d5 20fc 	ldr.w	r2, [r5, #252]	; 0xfc
 8015734:	2108      	movs	r1, #8
 8015736:	f7ff feeb 	bl	8015510 <lv_list_set_style>
}
 801573a:	4620      	mov	r0, r4
 801573c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            lv_list_set_style(new_list, LV_LIST_STYLE_BG, &lv_style_transp_fit);
 8015740:	4620      	mov	r0, r4
 8015742:	4a0c      	ldr	r2, [pc, #48]	; (8015774 <lv_list_create+0x1b0>)
 8015744:	f7ff fee4 	bl	8015510 <lv_list_set_style>
            lv_list_set_style(new_list, LV_LIST_STYLE_SCRL, &lv_style_pretty);
 8015748:	4620      	mov	r0, r4
 801574a:	4a0b      	ldr	r2, [pc, #44]	; (8015778 <lv_list_create+0x1b4>)
 801574c:	2101      	movs	r1, #1
 801574e:	f7ff fedf 	bl	8015510 <lv_list_set_style>
}
 8015752:	4620      	mov	r0, r4
 8015754:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015758:	200174dc 	.word	0x200174dc
 801575c:	20017d18 	.word	0x20017d18
 8015760:	20017ec8 	.word	0x20017ec8
 8015764:	20017cd0 	.word	0x20017cd0
 8015768:	20017f58 	.word	0x20017f58
 801576c:	20017df0 	.word	0x20017df0
 8015770:	0801539d 	.word	0x0801539d
 8015774:	20017e38 	.word	0x20017e38
 8015778:	20017d60 	.word	0x20017d60

0801577c <lv_mbox_close_end_cb>:
    return LV_RES_OK;
}

static void lv_mbox_close_end_cb(lv_obj_t * mbox)
{
    lv_obj_del(mbox);
 801577c:	f7f3 bbb0 	b.w	8008ee0 <lv_obj_del>

08015780 <lv_mbox_start_auto_close>:
{
 8015780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015782:	b083      	sub	sp, #12
 8015784:	460d      	mov	r5, r1
 8015786:	4604      	mov	r4, r0
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 8015788:	f7f4 fa5c 	bl	8009c44 <lv_obj_get_ext_attr>
    if(ext->anim_time != 0) {
 801578c:	8982      	ldrh	r2, [r0, #12]
 801578e:	b942      	cbnz	r2, 80157a2 <lv_mbox_start_auto_close+0x22>
        lv_obj_animate(mbox, LV_ANIM_NONE, ext->anim_time, delay, lv_mbox_close_end_cb);
 8015790:	4910      	ldr	r1, [pc, #64]	; (80157d4 <lv_mbox_start_auto_close+0x54>)
 8015792:	462b      	mov	r3, r5
 8015794:	4620      	mov	r0, r4
 8015796:	9100      	str	r1, [sp, #0]
 8015798:	4611      	mov	r1, r2
 801579a:	f7f3 fff5 	bl	8009788 <lv_obj_animate>
}
 801579e:	b003      	add	sp, #12
 80157a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_obj_animate(mbox, LV_ANIM_GROW_H | LV_ANIM_OUT, ext->anim_time, delay, NULL);
 80157a2:	2700      	movs	r7, #0
 80157a4:	4606      	mov	r6, r0
 80157a6:	462b      	mov	r3, r5
 80157a8:	4620      	mov	r0, r4
 80157aa:	2185      	movs	r1, #133	; 0x85
 80157ac:	9700      	str	r7, [sp, #0]
 80157ae:	f7f3 ffeb 	bl	8009788 <lv_obj_animate>
        lv_obj_animate(mbox, LV_ANIM_GROW_V | LV_ANIM_OUT, ext->anim_time, delay, lv_mbox_close_end_cb);
 80157b2:	4808      	ldr	r0, [pc, #32]	; (80157d4 <lv_mbox_start_auto_close+0x54>)
 80157b4:	89b2      	ldrh	r2, [r6, #12]
 80157b6:	462b      	mov	r3, r5
 80157b8:	9000      	str	r0, [sp, #0]
 80157ba:	2186      	movs	r1, #134	; 0x86
 80157bc:	4620      	mov	r0, r4
 80157be:	f7f3 ffe3 	bl	8009788 <lv_obj_animate>
        lv_cont_set_fit(mbox, false, false);
 80157c2:	463a      	mov	r2, r7
 80157c4:	4639      	mov	r1, r7
 80157c6:	4620      	mov	r0, r4
}
 80157c8:	b003      	add	sp, #12
 80157ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        lv_cont_set_fit(mbox, false, false);
 80157ce:	f7fe b917 	b.w	8013a00 <lv_cont_set_fit>
 80157d2:	bf00      	nop
 80157d4:	0801577d 	.word	0x0801577d

080157d8 <lv_mbox_close_action>:
{
 80157d8:	b510      	push	{r4, lr}
 80157da:	460c      	mov	r4, r1
    lv_obj_t * mbox = lv_obj_get_parent(btn);
 80157dc:	f7f4 f85c 	bl	8009898 <lv_obj_get_parent>
    if(txt[0] != '\0') {
 80157e0:	7823      	ldrb	r3, [r4, #0]
 80157e2:	b90b      	cbnz	r3, 80157e8 <lv_mbox_close_action+0x10>
    return LV_RES_OK;
 80157e4:	2001      	movs	r0, #1
}
 80157e6:	bd10      	pop	{r4, pc}
        lv_mbox_start_auto_close(mbox, 0);
 80157e8:	2100      	movs	r1, #0
 80157ea:	f7ff ffc9 	bl	8015780 <lv_mbox_start_auto_close>
        return LV_RES_INV;
 80157ee:	2000      	movs	r0, #0
 80157f0:	bd10      	pop	{r4, pc}
 80157f2:	bf00      	nop

080157f4 <lv_mbox_get_style>:
{
 80157f4:	b538      	push	{r3, r4, r5, lr}
 80157f6:	460c      	mov	r4, r1
 80157f8:	4605      	mov	r5, r0
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 80157fa:	f7f4 fa23 	bl	8009c44 <lv_obj_get_ext_attr>
    switch(type) {
 80157fe:	2c06      	cmp	r4, #6
 8015800:	d82e      	bhi.n	8015860 <lv_mbox_get_style+0x6c>
 8015802:	e8df f004 	tbb	[pc, r4]
 8015806:	0f0a      	.short	0x0f0a
 8015808:	27211b15 	.word	0x27211b15
 801580c:	04          	.byte	0x04
 801580d:	00          	.byte	0x00
            style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_INA);
 801580e:	6880      	ldr	r0, [r0, #8]
 8015810:	2105      	movs	r1, #5
}
 8015812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_INA);
 8015816:	f7fc bf07 	b.w	8012628 <lv_btnm_get_style>
            style = lv_obj_get_style(mbox);
 801581a:	4628      	mov	r0, r5
}
 801581c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            style = lv_obj_get_style(mbox);
 8015820:	f7f4 b8f6 	b.w	8009a10 <lv_obj_get_style>
            style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BG);
 8015824:	6880      	ldr	r0, [r0, #8]
 8015826:	2100      	movs	r1, #0
}
 8015828:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BG);
 801582c:	f7fc befc 	b.w	8012628 <lv_btnm_get_style>
            style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_REL);
 8015830:	6880      	ldr	r0, [r0, #8]
 8015832:	2101      	movs	r1, #1
}
 8015834:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_REL);
 8015838:	f7fc bef6 	b.w	8012628 <lv_btnm_get_style>
            style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_PR);
 801583c:	6880      	ldr	r0, [r0, #8]
 801583e:	2102      	movs	r1, #2
}
 8015840:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_PR);
 8015844:	f7fc bef0 	b.w	8012628 <lv_btnm_get_style>
            style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_TGL_REL);
 8015848:	6880      	ldr	r0, [r0, #8]
 801584a:	2103      	movs	r1, #3
}
 801584c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_TGL_REL);
 8015850:	f7fc beea 	b.w	8012628 <lv_btnm_get_style>
            style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_TGL_PR);
 8015854:	6880      	ldr	r0, [r0, #8]
 8015856:	2104      	movs	r1, #4
}
 8015858:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_TGL_PR);
 801585c:	f7fc bee4 	b.w	8012628 <lv_btnm_get_style>
}
 8015860:	2000      	movs	r0, #0
 8015862:	bd38      	pop	{r3, r4, r5, pc}

08015864 <mbox_realign>:
{
 8015864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015866:	4605      	mov	r5, r0
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 8015868:	f7f4 f9ec 	bl	8009c44 <lv_obj_get_ext_attr>
    lv_style_t * style = lv_mbox_get_style(mbox, LV_MBOX_STYLE_BG);
 801586c:	2100      	movs	r1, #0
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801586e:	4606      	mov	r6, r0
    lv_style_t * style = lv_mbox_get_style(mbox, LV_MBOX_STYLE_BG);
 8015870:	4628      	mov	r0, r5
 8015872:	f7ff ffbf 	bl	80157f4 <lv_mbox_get_style>
 8015876:	4604      	mov	r4, r0
    lv_coord_t w = lv_obj_get_width(mbox) - 2 * style->body.padding.hor;
 8015878:	4628      	mov	r0, r5
 801587a:	f7f4 f8bd 	bl	80099f8 <lv_obj_get_width>
 801587e:	8c64      	ldrh	r4, [r4, #34]	; 0x22
    if(ext->text) {
 8015880:	6873      	ldr	r3, [r6, #4]
    lv_coord_t w = lv_obj_get_width(mbox) - 2 * style->body.padding.hor;
 8015882:	eba0 0444 	sub.w	r4, r0, r4, lsl #1
 8015886:	b224      	sxth	r4, r4
    if(ext->text) {
 8015888:	b11b      	cbz	r3, 8015892 <mbox_realign+0x2e>
        lv_obj_set_width(ext->text, w);
 801588a:	4618      	mov	r0, r3
 801588c:	4621      	mov	r1, r4
 801588e:	f7f3 fd43 	bl	8009318 <lv_obj_set_width>
    if(ext->btnm) {
 8015892:	68b3      	ldr	r3, [r6, #8]
 8015894:	b1bb      	cbz	r3, 80158c6 <mbox_realign+0x62>
        lv_style_t * btn_bg_style = lv_mbox_get_style(mbox, LV_MBOX_STYLE_BTN_BG);
 8015896:	2101      	movs	r1, #1
 8015898:	4628      	mov	r0, r5
 801589a:	f7ff ffab 	bl	80157f4 <lv_mbox_get_style>
 801589e:	4607      	mov	r7, r0
        lv_style_t * btn_rel_style = lv_mbox_get_style(mbox, LV_MBOX_STYLE_BTN_REL);
 80158a0:	2102      	movs	r1, #2
 80158a2:	4628      	mov	r0, r5
 80158a4:	f7ff ffa6 	bl	80157f4 <lv_mbox_get_style>
        lv_obj_set_size(ext->btnm, w, font_h + 2 * btn_rel_style->body.padding.ver + 2 * btn_bg_style->body.padding.ver);
 80158a8:	8c3b      	ldrh	r3, [r7, #32]
 80158aa:	8c02      	ldrh	r2, [r0, #32]
 80158ac:	4621      	mov	r1, r4
 80158ae:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80158b0:	4413      	add	r3, r2
 80158b2:	68b0      	ldr	r0, [r6, #8]
 80158b4:	f894 2020 	ldrb.w	r2, [r4, #32]
 80158b8:	eb02 0243 	add.w	r2, r2, r3, lsl #1
}
 80158bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        lv_obj_set_size(ext->btnm, w, font_h + 2 * btn_rel_style->body.padding.ver + 2 * btn_bg_style->body.padding.ver);
 80158c0:	b212      	sxth	r2, r2
 80158c2:	f7f3 bcf3 	b.w	80092ac <lv_obj_set_size>
 80158c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080158c8 <lv_mbox_signal>:
{
 80158c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    char c_trans = 0;
 80158cc:	2300      	movs	r3, #0
{
 80158ce:	b082      	sub	sp, #8
    if(sign == LV_SIGNAL_CONTROLL) {
 80158d0:	2912      	cmp	r1, #18
{
 80158d2:	460d      	mov	r5, r1
 80158d4:	4607      	mov	r7, r0
 80158d6:	4616      	mov	r6, r2
    char c_trans = 0;
 80158d8:	f88d 3007 	strb.w	r3, [sp, #7]
    if(sign == LV_SIGNAL_CONTROLL) {
 80158dc:	d009      	beq.n	80158f2 <lv_mbox_signal+0x2a>
    res = ancestor_signal(mbox, sign, param);
 80158de:	4b46      	ldr	r3, [pc, #280]	; (80159f8 <lv_mbox_signal+0x130>)
 80158e0:	681b      	ldr	r3, [r3, #0]
 80158e2:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 80158e4:	2801      	cmp	r0, #1
    res = ancestor_signal(mbox, sign, param);
 80158e6:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
 80158e8:	d02c      	beq.n	8015944 <lv_mbox_signal+0x7c>
}
 80158ea:	4620      	mov	r0, r4
 80158ec:	b002      	add	sp, #8
 80158ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        c_trans = *((char *)param);
 80158f2:	7813      	ldrb	r3, [r2, #0]
        if(c_trans == LV_GROUP_KEY_DOWN) c_trans = LV_GROUP_KEY_LEFT;
 80158f4:	2b12      	cmp	r3, #18
 80158f6:	d046      	beq.n	8015986 <lv_mbox_signal+0xbe>
        if(c_trans == LV_GROUP_KEY_UP) c_trans = LV_GROUP_KEY_RIGHT;
 80158f8:	2b11      	cmp	r3, #17
 80158fa:	d01f      	beq.n	801593c <lv_mbox_signal+0x74>
        c_trans = *((char *)param);
 80158fc:	f88d 3007 	strb.w	r3, [sp, #7]
    res = ancestor_signal(mbox, sign, param);
 8015900:	4b3d      	ldr	r3, [pc, #244]	; (80159f8 <lv_mbox_signal+0x130>)
 8015902:	2112      	movs	r1, #18
 8015904:	4638      	mov	r0, r7
 8015906:	f10d 0207 	add.w	r2, sp, #7
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 801590e:	2801      	cmp	r0, #1
    res = ancestor_signal(mbox, sign, param);
 8015910:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
 8015912:	d1ea      	bne.n	80158ea <lv_mbox_signal+0x22>
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 8015914:	4638      	mov	r0, r7
 8015916:	f10d 0607 	add.w	r6, sp, #7
 801591a:	f7f4 f993 	bl	8009c44 <lv_obj_get_ext_attr>
 801591e:	4680      	mov	r8, r0
        if(ext->btnm) {
 8015920:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8015924:	b118      	cbz	r0, 801592e <lv_mbox_signal+0x66>
            ext->btnm->signal_func(ext->btnm, sign, param);
 8015926:	4632      	mov	r2, r6
 8015928:	6983      	ldr	r3, [r0, #24]
 801592a:	4629      	mov	r1, r5
 801592c:	4798      	blx	r3
        if(sign == LV_SIGNAL_FOCUS) {
 801592e:	2d10      	cmp	r5, #16
 8015930:	d039      	beq.n	80159a6 <lv_mbox_signal+0xde>
 8015932:	2401      	movs	r4, #1
}
 8015934:	4620      	mov	r0, r4
 8015936:	b002      	add	sp, #8
 8015938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(c_trans == LV_GROUP_KEY_UP) c_trans = LV_GROUP_KEY_RIGHT;
 801593c:	2313      	movs	r3, #19
 801593e:	f88d 3007 	strb.w	r3, [sp, #7]
 8015942:	e7dd      	b.n	8015900 <lv_mbox_signal+0x38>
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 8015944:	4638      	mov	r0, r7
 8015946:	f7f4 f97d 	bl	8009c44 <lv_obj_get_ext_attr>
    if(sign == LV_SIGNAL_CORD_CHG) {
 801594a:	2d02      	cmp	r5, #2
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801594c:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CORD_CHG) {
 801594e:	d03f      	beq.n	80159d0 <lv_mbox_signal+0x108>
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 8015950:	2d03      	cmp	r5, #3
 8015952:	d047      	beq.n	80159e4 <lv_mbox_signal+0x11c>
    } else if(sign == LV_SIGNAL_FOCUS || sign == LV_SIGNAL_DEFOCUS ||
 8015954:	f1a5 0310 	sub.w	r3, r5, #16
 8015958:	2b02      	cmp	r3, #2
 801595a:	d9e1      	bls.n	8015920 <lv_mbox_signal+0x58>
 801595c:	f1a5 0314 	sub.w	r3, r5, #20
 8015960:	fab3 f383 	clz	r3, r3
 8015964:	095b      	lsrs	r3, r3, #5
 8015966:	2b00      	cmp	r3, #0
 8015968:	d1da      	bne.n	8015920 <lv_mbox_signal+0x58>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801596a:	2d06      	cmp	r5, #6
 801596c:	d1e1      	bne.n	8015932 <lv_mbox_signal+0x6a>
 801596e:	1f32      	subs	r2, r6, #4
            if(buf->type[i] == NULL) break;
 8015970:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8015974:	b111      	cbz	r1, 801597c <lv_mbox_signal+0xb4>
 8015976:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) {  /*Find the last set data*/
 8015978:	2b07      	cmp	r3, #7
 801597a:	d1f9      	bne.n	8015970 <lv_mbox_signal+0xa8>
        buf->type[i] = "lv_mbox";
 801597c:	4a1f      	ldr	r2, [pc, #124]	; (80159fc <lv_mbox_signal+0x134>)
 801597e:	2401      	movs	r4, #1
 8015980:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
 8015984:	e7b1      	b.n	80158ea <lv_mbox_signal+0x22>
        if(c_trans == LV_GROUP_KEY_DOWN) c_trans = LV_GROUP_KEY_LEFT;
 8015986:	2214      	movs	r2, #20
 8015988:	ae02      	add	r6, sp, #8
    res = ancestor_signal(mbox, sign, param);
 801598a:	4b1b      	ldr	r3, [pc, #108]	; (80159f8 <lv_mbox_signal+0x130>)
        if(c_trans == LV_GROUP_KEY_DOWN) c_trans = LV_GROUP_KEY_LEFT;
 801598c:	f806 2d01 	strb.w	r2, [r6, #-1]!
    res = ancestor_signal(mbox, sign, param);
 8015990:	4632      	mov	r2, r6
 8015992:	681b      	ldr	r3, [r3, #0]
 8015994:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8015996:	2801      	cmp	r0, #1
    res = ancestor_signal(mbox, sign, param);
 8015998:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
 801599a:	d1a6      	bne.n	80158ea <lv_mbox_signal+0x22>
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801599c:	4638      	mov	r0, r7
 801599e:	f7f4 f951 	bl	8009c44 <lv_obj_get_ext_attr>
 80159a2:	4680      	mov	r8, r0
 80159a4:	e7d6      	b.n	8015954 <lv_mbox_signal+0x8c>
            lv_indev_t * indev = lv_indev_get_act();
 80159a6:	f7f3 f97b 	bl	8008ca0 <lv_indev_get_act>
            lv_hal_indev_type_t indev_type = lv_indev_get_type(indev);
 80159aa:	f7f3 f97f 	bl	8008cac <lv_indev_get_type>
            if(indev_type == LV_INDEV_TYPE_ENCODER) {
 80159ae:	2804      	cmp	r0, #4
 80159b0:	d1bf      	bne.n	8015932 <lv_mbox_signal+0x6a>
                lv_btnm_ext_t * btnm_ext = lv_obj_get_ext_attr(ext->btnm);
 80159b2:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80159b6:	f7f4 f945 	bl	8009c44 <lv_obj_get_ext_attr>
 80159ba:	4605      	mov	r5, r0
                if(lv_group_get_editing(lv_obj_get_group(mbox))) btnm_ext->btn_id_pr = 0;
 80159bc:	4638      	mov	r0, r7
 80159be:	f7f4 f943 	bl	8009c48 <lv_obj_get_group>
 80159c2:	f7f2 fc31 	bl	8008228 <lv_group_get_editing>
 80159c6:	b188      	cbz	r0, 80159ec <lv_mbox_signal+0x124>
 80159c8:	2300      	movs	r3, #0
 80159ca:	2401      	movs	r4, #1
 80159cc:	846b      	strh	r3, [r5, #34]	; 0x22
 80159ce:	e78c      	b.n	80158ea <lv_mbox_signal+0x22>
        if(lv_obj_get_width(mbox) != lv_area_get_width(param)) {
 80159d0:	4638      	mov	r0, r7
 80159d2:	f7f4 f811 	bl	80099f8 <lv_obj_get_width>
 80159d6:	88b3      	ldrh	r3, [r6, #4]
 80159d8:	8832      	ldrh	r2, [r6, #0]
 80159da:	3301      	adds	r3, #1
 80159dc:	1a9b      	subs	r3, r3, r2
 80159de:	b21b      	sxth	r3, r3
 80159e0:	4298      	cmp	r0, r3
 80159e2:	d082      	beq.n	80158ea <lv_mbox_signal+0x22>
        mbox_realign(mbox);
 80159e4:	4638      	mov	r0, r7
 80159e6:	f7ff ff3d 	bl	8015864 <mbox_realign>
 80159ea:	e77e      	b.n	80158ea <lv_mbox_signal+0x22>
                else btnm_ext->btn_id_pr = LV_BTNM_PR_NONE;
 80159ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80159f0:	2401      	movs	r4, #1
 80159f2:	846b      	strh	r3, [r5, #34]	; 0x22
 80159f4:	e779      	b.n	80158ea <lv_mbox_signal+0x22>
 80159f6:	bf00      	nop
 80159f8:	200174f0 	.word	0x200174f0
 80159fc:	0808bcbc 	.word	0x0808bcbc

08015a00 <lv_mbox_set_text>:
{
 8015a00:	b538      	push	{r3, r4, r5, lr}
 8015a02:	460d      	mov	r5, r1
 8015a04:	4604      	mov	r4, r0
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 8015a06:	f7f4 f91d 	bl	8009c44 <lv_obj_get_ext_attr>
    lv_label_set_text(ext->text, txt);
 8015a0a:	6840      	ldr	r0, [r0, #4]
 8015a0c:	4629      	mov	r1, r5
 8015a0e:	f7ff f8b5 	bl	8014b7c <lv_label_set_text>
    mbox_realign(mbox);
 8015a12:	4620      	mov	r0, r4
}
 8015a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mbox_realign(mbox);
 8015a18:	f7ff bf24 	b.w	8015864 <mbox_realign>

08015a1c <lv_mbox_set_style>:
{
 8015a1c:	b570      	push	{r4, r5, r6, lr}
 8015a1e:	460c      	mov	r4, r1
 8015a20:	4616      	mov	r6, r2
 8015a22:	4605      	mov	r5, r0
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 8015a24:	f7f4 f90e 	bl	8009c44 <lv_obj_get_ext_attr>
    switch(type) {
 8015a28:	2c06      	cmp	r4, #6
 8015a2a:	d80a      	bhi.n	8015a42 <lv_mbox_set_style+0x26>
 8015a2c:	e8df f004 	tbb	[pc, r4]
 8015a30:	2b21170e 	.word	0x2b21170e
 8015a34:	3f35      	.short	0x3f35
 8015a36:	04          	.byte	0x04
 8015a37:	00          	.byte	0x00
            lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_INA, style);
 8015a38:	4632      	mov	r2, r6
 8015a3a:	6880      	ldr	r0, [r0, #8]
 8015a3c:	2105      	movs	r1, #5
 8015a3e:	f7fc fcfd 	bl	801243c <lv_btnm_set_style>
    mbox_realign(mbox);
 8015a42:	4628      	mov	r0, r5
}
 8015a44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    mbox_realign(mbox);
 8015a48:	f7ff bf0c 	b.w	8015864 <mbox_realign>
            lv_obj_set_style(mbox, style);
 8015a4c:	4628      	mov	r0, r5
 8015a4e:	4631      	mov	r1, r6
 8015a50:	f7f3 ff50 	bl	80098f4 <lv_obj_set_style>
    mbox_realign(mbox);
 8015a54:	4628      	mov	r0, r5
}
 8015a56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    mbox_realign(mbox);
 8015a5a:	f7ff bf03 	b.w	8015864 <mbox_realign>
            lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BG, style);
 8015a5e:	4632      	mov	r2, r6
 8015a60:	6880      	ldr	r0, [r0, #8]
 8015a62:	2100      	movs	r1, #0
 8015a64:	f7fc fcea 	bl	801243c <lv_btnm_set_style>
    mbox_realign(mbox);
 8015a68:	4628      	mov	r0, r5
}
 8015a6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    mbox_realign(mbox);
 8015a6e:	f7ff bef9 	b.w	8015864 <mbox_realign>
            lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_REL, style);
 8015a72:	4632      	mov	r2, r6
 8015a74:	6880      	ldr	r0, [r0, #8]
 8015a76:	2101      	movs	r1, #1
 8015a78:	f7fc fce0 	bl	801243c <lv_btnm_set_style>
    mbox_realign(mbox);
 8015a7c:	4628      	mov	r0, r5
}
 8015a7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    mbox_realign(mbox);
 8015a82:	f7ff beef 	b.w	8015864 <mbox_realign>
            lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_PR, style);
 8015a86:	4632      	mov	r2, r6
 8015a88:	6880      	ldr	r0, [r0, #8]
 8015a8a:	2102      	movs	r1, #2
 8015a8c:	f7fc fcd6 	bl	801243c <lv_btnm_set_style>
    mbox_realign(mbox);
 8015a90:	4628      	mov	r0, r5
}
 8015a92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    mbox_realign(mbox);
 8015a96:	f7ff bee5 	b.w	8015864 <mbox_realign>
            lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_TGL_REL, style);
 8015a9a:	4632      	mov	r2, r6
 8015a9c:	6880      	ldr	r0, [r0, #8]
 8015a9e:	2103      	movs	r1, #3
 8015aa0:	f7fc fccc 	bl	801243c <lv_btnm_set_style>
    mbox_realign(mbox);
 8015aa4:	4628      	mov	r0, r5
}
 8015aa6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    mbox_realign(mbox);
 8015aaa:	f7ff bedb 	b.w	8015864 <mbox_realign>
            lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_TGL_PR, style);
 8015aae:	4632      	mov	r2, r6
 8015ab0:	6880      	ldr	r0, [r0, #8]
 8015ab2:	2104      	movs	r1, #4
 8015ab4:	f7fc fcc2 	bl	801243c <lv_btnm_set_style>
    mbox_realign(mbox);
 8015ab8:	4628      	mov	r0, r5
}
 8015aba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    mbox_realign(mbox);
 8015abe:	f7ff bed1 	b.w	8015864 <mbox_realign>
 8015ac2:	bf00      	nop

08015ac4 <lv_mbox_create>:
{
 8015ac4:	b570      	push	{r4, r5, r6, lr}
 8015ac6:	b082      	sub	sp, #8
 8015ac8:	460d      	mov	r5, r1
    lv_obj_t * new_mbox = lv_cont_create(par, copy);
 8015aca:	f7fd ff25 	bl	8013918 <lv_cont_create>
    lv_mem_assert(new_mbox);
 8015ace:	b350      	cbz	r0, 8015b26 <lv_mbox_create+0x62>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_mbox);
 8015ad0:	4e33      	ldr	r6, [pc, #204]	; (8015ba0 <lv_mbox_create+0xdc>)
 8015ad2:	4604      	mov	r4, r0
 8015ad4:	6833      	ldr	r3, [r6, #0]
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d056      	beq.n	8015b88 <lv_mbox_create+0xc4>
    lv_mbox_ext_t * ext = lv_obj_allocate_ext_attr(new_mbox, sizeof(lv_mbox_ext_t));
 8015ada:	2110      	movs	r1, #16
 8015adc:	4620      	mov	r0, r4
 8015ade:	f7f3 fe3f 	bl	8009760 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 8015ae2:	4606      	mov	r6, r0
 8015ae4:	b1f0      	cbz	r0, 8015b24 <lv_mbox_create+0x60>
    ext->text = NULL;
 8015ae6:	2300      	movs	r3, #0
    ext->anim_time = LV_MBOX_CLOSE_ANIM_TIME;
 8015ae8:	22c8      	movs	r2, #200	; 0xc8
    lv_obj_set_signal_func(new_mbox, lv_mbox_signal);
 8015aea:	492e      	ldr	r1, [pc, #184]	; (8015ba4 <lv_mbox_create+0xe0>)
 8015aec:	4620      	mov	r0, r4
    ext->text = NULL;
 8015aee:	6073      	str	r3, [r6, #4]
    ext->btnm = NULL;
 8015af0:	60b3      	str	r3, [r6, #8]
    ext->anim_time = LV_MBOX_CLOSE_ANIM_TIME;
 8015af2:	81b2      	strh	r2, [r6, #12]
    lv_obj_set_signal_func(new_mbox, lv_mbox_signal);
 8015af4:	f7f3 fe30 	bl	8009758 <lv_obj_set_signal_func>
    if(copy == NULL) {
 8015af8:	b1b5      	cbz	r5, 8015b28 <lv_mbox_create+0x64>
        lv_mbox_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8015afa:	4628      	mov	r0, r5
 8015afc:	f7f4 f8a2 	bl	8009c44 <lv_obj_get_ext_attr>
 8015b00:	4605      	mov	r5, r0
        ext->text = lv_label_create(new_mbox, copy_ext->text);
 8015b02:	4620      	mov	r0, r4
 8015b04:	6869      	ldr	r1, [r5, #4]
 8015b06:	f7ff f8e3 	bl	8014cd0 <lv_label_create>
        if(copy_ext->btnm) ext->btnm = lv_btnm_create(new_mbox, copy_ext->btnm);
 8015b0a:	68a9      	ldr	r1, [r5, #8]
        ext->text = lv_label_create(new_mbox, copy_ext->text);
 8015b0c:	6070      	str	r0, [r6, #4]
        if(copy_ext->btnm) ext->btnm = lv_btnm_create(new_mbox, copy_ext->btnm);
 8015b0e:	b119      	cbz	r1, 8015b18 <lv_mbox_create+0x54>
 8015b10:	4620      	mov	r0, r4
 8015b12:	f7fc fcc5 	bl	80124a0 <lv_btnm_create>
 8015b16:	60b0      	str	r0, [r6, #8]
        lv_obj_refresh_style(new_mbox);
 8015b18:	4620      	mov	r0, r4
 8015b1a:	f7f3 fdbf 	bl	800969c <lv_obj_refresh_style>
}
 8015b1e:	4620      	mov	r0, r4
 8015b20:	b002      	add	sp, #8
 8015b22:	bd70      	pop	{r4, r5, r6, pc}
 8015b24:	e7fe      	b.n	8015b24 <lv_mbox_create+0x60>
 8015b26:	e7fe      	b.n	8015b26 <lv_mbox_create+0x62>
        ext->text = lv_label_create(new_mbox, NULL);
 8015b28:	4629      	mov	r1, r5
 8015b2a:	4620      	mov	r0, r4
 8015b2c:	f7ff f8d0 	bl	8014cd0 <lv_label_create>
        lv_label_set_align(ext->text, LV_LABEL_ALIGN_CENTER);
 8015b30:	2101      	movs	r1, #1
        ext->text = lv_label_create(new_mbox, NULL);
 8015b32:	6070      	str	r0, [r6, #4]
        lv_label_set_align(ext->text, LV_LABEL_ALIGN_CENTER);
 8015b34:	f7fe fc2e 	bl	8014394 <lv_label_set_align>
        lv_label_set_long_mode(ext->text, LV_LABEL_LONG_BREAK);
 8015b38:	2101      	movs	r1, #1
 8015b3a:	6870      	ldr	r0, [r6, #4]
 8015b3c:	f7ff f870 	bl	8014c20 <lv_label_set_long_mode>
        lv_label_set_text(ext->text, "Message");
 8015b40:	6870      	ldr	r0, [r6, #4]
 8015b42:	4919      	ldr	r1, [pc, #100]	; (8015ba8 <lv_mbox_create+0xe4>)
 8015b44:	f7ff f81a 	bl	8014b7c <lv_label_set_text>
        lv_cont_set_layout(new_mbox, LV_LAYOUT_COL_M);
 8015b48:	2103      	movs	r1, #3
 8015b4a:	4620      	mov	r0, r4
 8015b4c:	f7fd ff3e 	bl	80139cc <lv_cont_set_layout>
        lv_cont_set_fit(new_mbox, false, true);
 8015b50:	2201      	movs	r2, #1
 8015b52:	4629      	mov	r1, r5
 8015b54:	4620      	mov	r0, r4
 8015b56:	f7fd ff53 	bl	8013a00 <lv_cont_set_fit>
        lv_obj_set_width(new_mbox, LV_HOR_RES / 2);
 8015b5a:	21f0      	movs	r1, #240	; 0xf0
 8015b5c:	4620      	mov	r0, r4
 8015b5e:	f7f3 fbdb 	bl	8009318 <lv_obj_set_width>
        lv_obj_align(new_mbox, NULL, LV_ALIGN_CENTER, 0, 0);
 8015b62:	462b      	mov	r3, r5
 8015b64:	462a      	mov	r2, r5
 8015b66:	4629      	mov	r1, r5
 8015b68:	4620      	mov	r0, r4
 8015b6a:	9500      	str	r5, [sp, #0]
 8015b6c:	f7f3 fbe4 	bl	8009338 <lv_obj_align>
        lv_theme_t * th = lv_theme_get_current();
 8015b70:	f003 fd52 	bl	8019618 <lv_theme_get_current>
        if(th) {
 8015b74:	b160      	cbz	r0, 8015b90 <lv_mbox_create+0xcc>
            lv_mbox_set_style(new_mbox, LV_MBOX_STYLE_BG, th->mbox.bg);
 8015b76:	f8d0 20b4 	ldr.w	r2, [r0, #180]	; 0xb4
 8015b7a:	4629      	mov	r1, r5
 8015b7c:	4620      	mov	r0, r4
 8015b7e:	f7ff ff4d 	bl	8015a1c <lv_mbox_set_style>
}
 8015b82:	4620      	mov	r0, r4
 8015b84:	b002      	add	sp, #8
 8015b86:	bd70      	pop	{r4, r5, r6, pc}
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_mbox);
 8015b88:	f7f4 f858 	bl	8009c3c <lv_obj_get_signal_func>
 8015b8c:	6030      	str	r0, [r6, #0]
 8015b8e:	e7a4      	b.n	8015ada <lv_mbox_create+0x16>
            lv_mbox_set_style(new_mbox, LV_MBOX_STYLE_BG, &lv_style_pretty);
 8015b90:	4620      	mov	r0, r4
 8015b92:	4629      	mov	r1, r5
 8015b94:	4a05      	ldr	r2, [pc, #20]	; (8015bac <lv_mbox_create+0xe8>)
 8015b96:	f7ff ff41 	bl	8015a1c <lv_mbox_set_style>
}
 8015b9a:	4620      	mov	r0, r4
 8015b9c:	b002      	add	sp, #8
 8015b9e:	bd70      	pop	{r4, r5, r6, pc}
 8015ba0:	200174f0 	.word	0x200174f0
 8015ba4:	080158c9 	.word	0x080158c9
 8015ba8:	0808bcc4 	.word	0x0808bcc4
 8015bac:	20017d60 	.word	0x20017d60

08015bb0 <lv_mbox_add_btns>:
{
 8015bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015bb4:	4688      	mov	r8, r1
 8015bb6:	4616      	mov	r6, r2
 8015bb8:	4607      	mov	r7, r0
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 8015bba:	f7f4 f843 	bl	8009c44 <lv_obj_get_ext_attr>
    if(ext->btnm == NULL) {
 8015bbe:	6884      	ldr	r4, [r0, #8]
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 8015bc0:	4605      	mov	r5, r0
    if(ext->btnm == NULL) {
 8015bc2:	b1b4      	cbz	r4, 8015bf2 <lv_mbox_add_btns+0x42>
    lv_btnm_set_map(ext->btnm, btn_map);
 8015bc4:	4641      	mov	r1, r8
 8015bc6:	4620      	mov	r0, r4
 8015bc8:	f7fc f872 	bl	8011cb0 <lv_btnm_set_map>
    if(action == NULL) lv_btnm_set_action(ext->btnm, lv_mbox_close_action); /*Set a default action anyway*/
 8015bcc:	b146      	cbz	r6, 8015be0 <lv_mbox_add_btns+0x30>
    else  lv_btnm_set_action(ext->btnm, action);
 8015bce:	68a8      	ldr	r0, [r5, #8]
 8015bd0:	4631      	mov	r1, r6
 8015bd2:	f7fc fc0b 	bl	80123ec <lv_btnm_set_action>
    mbox_realign(mbox);
 8015bd6:	4638      	mov	r0, r7
}
 8015bd8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    mbox_realign(mbox);
 8015bdc:	f7ff be42 	b.w	8015864 <mbox_realign>
    if(action == NULL) lv_btnm_set_action(ext->btnm, lv_mbox_close_action); /*Set a default action anyway*/
 8015be0:	68a8      	ldr	r0, [r5, #8]
 8015be2:	4916      	ldr	r1, [pc, #88]	; (8015c3c <lv_mbox_add_btns+0x8c>)
 8015be4:	f7fc fc02 	bl	80123ec <lv_btnm_set_action>
    mbox_realign(mbox);
 8015be8:	4638      	mov	r0, r7
}
 8015bea:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    mbox_realign(mbox);
 8015bee:	f7ff be39 	b.w	8015864 <mbox_realign>
        ext->btnm = lv_btnm_create(mbox, NULL);
 8015bf2:	4621      	mov	r1, r4
 8015bf4:	4638      	mov	r0, r7
 8015bf6:	f7fc fc53 	bl	80124a0 <lv_btnm_create>
 8015bfa:	60a8      	str	r0, [r5, #8]
        lv_theme_t * th = lv_theme_get_current();
 8015bfc:	f003 fd0c 	bl	8019618 <lv_theme_get_current>
        if(th) {
 8015c00:	4681      	mov	r9, r0
 8015c02:	b198      	cbz	r0, 8015c2c <lv_mbox_add_btns+0x7c>
            lv_mbox_set_style(mbox, LV_MBOX_STYLE_BTN_BG, th->mbox.btn.bg);
 8015c04:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
 8015c08:	2101      	movs	r1, #1
 8015c0a:	4638      	mov	r0, r7
 8015c0c:	f7ff ff06 	bl	8015a1c <lv_mbox_set_style>
            lv_mbox_set_style(mbox, LV_MBOX_STYLE_BTN_REL, th->mbox.btn.rel);
 8015c10:	f8d9 20bc 	ldr.w	r2, [r9, #188]	; 0xbc
 8015c14:	2102      	movs	r1, #2
 8015c16:	4638      	mov	r0, r7
 8015c18:	f7ff ff00 	bl	8015a1c <lv_mbox_set_style>
            lv_mbox_set_style(mbox, LV_MBOX_STYLE_BTN_PR, th->mbox.btn.pr);
 8015c1c:	f8d9 20c0 	ldr.w	r2, [r9, #192]	; 0xc0
 8015c20:	2103      	movs	r1, #3
 8015c22:	4638      	mov	r0, r7
 8015c24:	f7ff fefa 	bl	8015a1c <lv_mbox_set_style>
 8015c28:	68ac      	ldr	r4, [r5, #8]
 8015c2a:	e7cb      	b.n	8015bc4 <lv_mbox_add_btns+0x14>
            lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BG, &lv_style_transp_fit);
 8015c2c:	4621      	mov	r1, r4
 8015c2e:	4a04      	ldr	r2, [pc, #16]	; (8015c40 <lv_mbox_add_btns+0x90>)
 8015c30:	68a8      	ldr	r0, [r5, #8]
 8015c32:	f7fc fc03 	bl	801243c <lv_btnm_set_style>
 8015c36:	68ac      	ldr	r4, [r5, #8]
 8015c38:	e7c4      	b.n	8015bc4 <lv_mbox_add_btns+0x14>
 8015c3a:	bf00      	nop
 8015c3c:	080157d9 	.word	0x080157d9
 8015c40:	20017e38 	.word	0x20017e38

08015c44 <lv_page_sb_refresh>:
/**
 * Refresh the position and size of the scroll bars.
 * @param page pointer to a page object
 */
static void lv_page_sb_refresh(lv_obj_t * page)
{
 8015c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c48:	4606      	mov	r6, r0
 8015c4a:	b08b      	sub	sp, #44	; 0x2c
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8015c4c:	f7f3 fffa 	bl	8009c44 <lv_obj_get_ext_attr>
 8015c50:	4604      	mov	r4, r0
    lv_style_t * style = lv_obj_get_style(page);
 8015c52:	4630      	mov	r0, r6
 8015c54:	f7f3 fedc 	bl	8009a10 <lv_obj_get_style>
    lv_obj_t * scrl = ext->scrl;
 8015c58:	f8d4 8004 	ldr.w	r8, [r4, #4]
    lv_style_t * style = lv_obj_get_style(page);
 8015c5c:	4681      	mov	r9, r0
    lv_coord_t size_tmp;
    lv_coord_t scrl_w = lv_obj_get_width(scrl);
 8015c5e:	4640      	mov	r0, r8
 8015c60:	f7f3 feca 	bl	80099f8 <lv_obj_get_width>
 8015c64:	4607      	mov	r7, r0
    lv_coord_t scrl_h =  lv_obj_get_height(scrl);
 8015c66:	4640      	mov	r0, r8
 8015c68:	f7f3 fecc 	bl	8009a04 <lv_obj_get_height>
    lv_coord_t hpad = style->body.padding.hor;
 8015c6c:	f9b9 3022 	ldrsh.w	r3, [r9, #34]	; 0x22
    lv_coord_t scrl_h =  lv_obj_get_height(scrl);
 8015c70:	9001      	str	r0, [sp, #4]
    lv_coord_t vpad = style->body.padding.ver;
    lv_coord_t obj_w = lv_obj_get_width(page);
 8015c72:	4630      	mov	r0, r6
    lv_coord_t hpad = style->body.padding.hor;
 8015c74:	9302      	str	r3, [sp, #8]
    lv_coord_t vpad = style->body.padding.ver;
 8015c76:	f9b9 3020 	ldrsh.w	r3, [r9, #32]
 8015c7a:	9303      	str	r3, [sp, #12]
    lv_coord_t obj_w = lv_obj_get_width(page);
 8015c7c:	f7f3 febc 	bl	80099f8 <lv_obj_get_width>
 8015c80:	4605      	mov	r5, r0
    lv_coord_t obj_h = lv_obj_get_height(page);
 8015c82:	4630      	mov	r0, r6
 8015c84:	f7f3 febe 	bl	8009a04 <lv_obj_get_height>
     * - horizontal and vertical scrollbars can overlap on the corners
     * - if the page has radius the scrollbar can be out of the radius  */
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.hor);
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.ver);

    if(ext->sb.mode == LV_SB_MODE_OFF) return;
 8015c88:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8015c8c:	f012 011c 	ands.w	r1, r2, #28
 8015c90:	f000 80cd 	beq.w	8015e2e <lv_page_sb_refresh+0x1ea>
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.hor);
 8015c94:	6923      	ldr	r3, [r4, #16]

    if(ext->sb.mode == LV_SB_MODE_ON) {
 8015c96:	2904      	cmp	r1, #4
 8015c98:	4683      	mov	fp, r0
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.hor);
 8015c9a:	f9b9 a022 	ldrsh.w	sl, [r9, #34]	; 0x22
 8015c9e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8015ca2:	9304      	str	r3, [sp, #16]
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.ver);
 8015ca4:	f9b9 3020 	ldrsh.w	r3, [r9, #32]
 8015ca8:	9305      	str	r3, [sp, #20]
    if(ext->sb.mode == LV_SB_MODE_ON) {
 8015caa:	f000 8114 	beq.w	8015ed6 <lv_page_sb_refresh+0x292>
        ext->sb.ver_draw = 1;
    }

    /*Invalidate the current (old) scrollbar areas*/
    lv_area_t sb_area_tmp;
    if(ext->sb.hor_draw != 0) {
 8015cae:	07d0      	lsls	r0, r2, #31
 8015cb0:	f100 80c6 	bmi.w	8015e40 <lv_page_sb_refresh+0x1fc>
        sb_area_tmp.y1 += page->coords.y1;
        sb_area_tmp.x2 += page->coords.x1;
        sb_area_tmp.y2 += page->coords.y1;
        lv_inv_area(&sb_area_tmp);
    }
    if(ext->sb.ver_draw != 0)  {
 8015cb4:	0791      	lsls	r1, r2, #30
 8015cb6:	f100 80e7 	bmi.w	8015e88 <lv_page_sb_refresh+0x244>
        sb_area_tmp.y2 += page->coords.y1;
        lv_inv_area(&sb_area_tmp);
    }


    if(ext->sb.mode == LV_SB_MODE_DRAG && lv_indev_is_dragging(lv_indev_get_act()) == false) {
 8015cba:	f002 021c 	and.w	r2, r2, #28
 8015cbe:	2a08      	cmp	r2, #8
 8015cc0:	f000 8112 	beq.w	8015ee8 <lv_page_sb_refresh+0x2a4>
        return;

    }

    /*Horizontal scrollbar*/
    if(scrl_w <= obj_w - 2 * hpad) {        /*Full sized scroll bar*/
 8015cc4:	9b02      	ldr	r3, [sp, #8]
 8015cc6:	ea4f 0943 	mov.w	r9, r3, lsl #1
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.hor);
 8015cca:	9b04      	ldr	r3, [sp, #16]
 8015ccc:	459a      	cmp	sl, r3
 8015cce:	bfb8      	it	lt
 8015cd0:	469a      	movlt	sl, r3
    if(scrl_w <= obj_w - 2 * hpad) {        /*Full sized scroll bar*/
 8015cd2:	eba5 0309 	sub.w	r3, r5, r9
 8015cd6:	429f      	cmp	r7, r3
 8015cd8:	f340 8136 	ble.w	8015f48 <lv_page_sb_refresh+0x304>
        lv_area_set_width(&ext->sb.hor_area, obj_w - 2 * sb_hor_pad);
        lv_area_set_pos(&ext->sb.hor_area, sb_hor_pad, obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.ver);
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG)  ext->sb.hor_draw = 0;
    } else {
        size_tmp = (obj_w * (obj_w - (2 * sb_hor_pad))) / (scrl_w + 2 * hpad);
 8015cdc:	ea4f 034a 	mov.w	r3, sl, lsl #1
 8015ce0:	44b9      	add	r9, r7
        if(size_tmp < LV_PAGE_SB_MIN_SIZE) size_tmp = LV_PAGE_SB_MIN_SIZE;
        lv_area_set_width(&ext->sb.hor_area,  size_tmp);
 8015ce2:	f104 0214 	add.w	r2, r4, #20
        size_tmp = (obj_w * (obj_w - (2 * sb_hor_pad))) / (scrl_w + 2 * hpad);
 8015ce6:	1aef      	subs	r7, r5, r3
 8015ce8:	9307      	str	r3, [sp, #28]
        lv_area_set_width(&ext->sb.hor_area,  size_tmp);
 8015cea:	4610      	mov	r0, r2
 8015cec:	9206      	str	r2, [sp, #24]
        size_tmp = (obj_w * (obj_w - (2 * sb_hor_pad))) / (scrl_w + 2 * hpad);
 8015cee:	fb05 f707 	mul.w	r7, r5, r7
 8015cf2:	fb97 f7f9 	sdiv	r7, r7, r9
 8015cf6:	b23f      	sxth	r7, r7

        lv_area_set_pos(&ext->sb.hor_area, sb_hor_pad +
                        (-(lv_obj_get_x(scrl) - hpad) * (obj_w - size_tmp -  2 * sb_hor_pad)) /
                        (scrl_w + 2 * hpad - obj_w),
 8015cf8:	eba9 0905 	sub.w	r9, r9, r5
 8015cfc:	2f0c      	cmp	r7, #12
 8015cfe:	bfb8      	it	lt
 8015d00:	270c      	movlt	r7, #12
        lv_area_set_width(&ext->sb.hor_area,  size_tmp);
 8015d02:	4639      	mov	r1, r7
                        (-(lv_obj_get_x(scrl) - hpad) * (obj_w - size_tmp -  2 * sb_hor_pad)) /
 8015d04:	1bef      	subs	r7, r5, r7
        lv_area_set_width(&ext->sb.hor_area,  size_tmp);
 8015d06:	f7f9 fe15 	bl	800f934 <lv_area_set_width>
                        (-(lv_obj_get_x(scrl) - hpad) * (obj_w - size_tmp -  2 * sb_hor_pad)) /
 8015d0a:	4640      	mov	r0, r8
 8015d0c:	f7f3 fe68 	bl	80099e0 <lv_obj_get_x>
 8015d10:	9b02      	ldr	r3, [sp, #8]
                        obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.ver);
 8015d12:	6922      	ldr	r2, [r4, #16]
                        (-(lv_obj_get_x(scrl) - hpad) * (obj_w - size_tmp -  2 * sb_hor_pad)) /
 8015d14:	1a19      	subs	r1, r3, r0
 8015d16:	9b07      	ldr	r3, [sp, #28]
        lv_area_set_pos(&ext->sb.hor_area, sb_hor_pad +
 8015d18:	9806      	ldr	r0, [sp, #24]
                        (-(lv_obj_get_x(scrl) - hpad) * (obj_w - size_tmp -  2 * sb_hor_pad)) /
 8015d1a:	1afb      	subs	r3, r7, r3
 8015d1c:	fb01 f303 	mul.w	r3, r1, r3
                        obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.ver);
 8015d20:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8015d22:	8c12      	ldrh	r2, [r2, #32]
 8015d24:	ebab 0101 	sub.w	r1, fp, r1
                        (-(lv_obj_get_x(scrl) - hpad) * (obj_w - size_tmp -  2 * sb_hor_pad)) /
 8015d28:	fb93 f9f9 	sdiv	r9, r3, r9
                        obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.ver);
 8015d2c:	1a8a      	subs	r2, r1, r2
        lv_area_set_pos(&ext->sb.hor_area, sb_hor_pad +
 8015d2e:	44ca      	add	sl, r9
 8015d30:	b212      	sxth	r2, r2
 8015d32:	fa0f f18a 	sxth.w	r1, sl
 8015d36:	f7f9 fe09 	bl	800f94c <lv_area_set_pos>

        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG)  ext->sb.hor_draw = 1;
 8015d3a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8015d3e:	f003 0218 	and.w	r2, r3, #24
 8015d42:	2a08      	cmp	r2, #8
 8015d44:	d076      	beq.n	8015e34 <lv_page_sb_refresh+0x1f0>
 8015d46:	b2ad      	uxth	r5, r5
    }

    /*Vertical scrollbar*/
    if(scrl_h <= obj_h - 2 * vpad) {        /*Full sized scroll bar*/
 8015d48:	9b03      	ldr	r3, [sp, #12]
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.ver);
 8015d4a:	9905      	ldr	r1, [sp, #20]
    if(scrl_h <= obj_h - 2 * vpad) {        /*Full sized scroll bar*/
 8015d4c:	ea4f 0943 	mov.w	r9, r3, lsl #1
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.ver);
 8015d50:	9b04      	ldr	r3, [sp, #16]
 8015d52:	428b      	cmp	r3, r1
 8015d54:	bfb8      	it	lt
 8015d56:	460b      	movlt	r3, r1
    if(scrl_h <= obj_h - 2 * vpad) {        /*Full sized scroll bar*/
 8015d58:	9901      	ldr	r1, [sp, #4]
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.ver);
 8015d5a:	461a      	mov	r2, r3
    if(scrl_h <= obj_h - 2 * vpad) {        /*Full sized scroll bar*/
 8015d5c:	ebab 0309 	sub.w	r3, fp, r9
 8015d60:	4299      	cmp	r1, r3
 8015d62:	f340 80d1 	ble.w	8015f08 <lv_page_sb_refresh+0x2c4>
        lv_area_set_height(&ext->sb.ver_area,  obj_h - 2 * sb_ver_pad);
        lv_area_set_pos(&ext->sb.ver_area, obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.hor, sb_ver_pad);
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG)  ext->sb.ver_draw = 0;
    } else {
        size_tmp = (obj_h * (obj_h - (2 * sb_ver_pad))) / (scrl_h + 2 * vpad);
 8015d66:	0053      	lsls	r3, r2, #1
 8015d68:	9202      	str	r2, [sp, #8]
 8015d6a:	9a01      	ldr	r2, [sp, #4]
        if(size_tmp < LV_PAGE_SB_MIN_SIZE) size_tmp = LV_PAGE_SB_MIN_SIZE;
        lv_area_set_height(&ext->sb.ver_area,  size_tmp);
 8015d6c:	f104 0a1c 	add.w	sl, r4, #28
        size_tmp = (obj_h * (obj_h - (2 * sb_ver_pad))) / (scrl_h + 2 * vpad);
 8015d70:	ebab 0703 	sub.w	r7, fp, r3
 8015d74:	9301      	str	r3, [sp, #4]
 8015d76:	444a      	add	r2, r9
        lv_area_set_height(&ext->sb.ver_area,  size_tmp);
 8015d78:	4650      	mov	r0, sl
        size_tmp = (obj_h * (obj_h - (2 * sb_ver_pad))) / (scrl_h + 2 * vpad);
 8015d7a:	fb0b f707 	mul.w	r7, fp, r7
 8015d7e:	4691      	mov	r9, r2
 8015d80:	fb97 f7f2 	sdiv	r7, r7, r2
 8015d84:	b23f      	sxth	r7, r7

        lv_area_set_pos(&ext->sb.ver_area,  obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.hor,
                        sb_ver_pad +
                        (-(lv_obj_get_y(scrl) - vpad) * (obj_h - size_tmp -  2 * sb_ver_pad)) /
                        (scrl_h + 2 * vpad - obj_h));
 8015d86:	eba9 090b 	sub.w	r9, r9, fp
 8015d8a:	2f0c      	cmp	r7, #12
 8015d8c:	bfb8      	it	lt
 8015d8e:	270c      	movlt	r7, #12
        lv_area_set_height(&ext->sb.ver_area,  size_tmp);
 8015d90:	4639      	mov	r1, r7
                        (-(lv_obj_get_y(scrl) - vpad) * (obj_h - size_tmp -  2 * sb_ver_pad)) /
 8015d92:	ebab 0707 	sub.w	r7, fp, r7
        lv_area_set_height(&ext->sb.ver_area,  size_tmp);
 8015d96:	f7f9 fdd3 	bl	800f940 <lv_area_set_height>
        lv_area_set_pos(&ext->sb.ver_area,  obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.hor,
 8015d9a:	6921      	ldr	r1, [r4, #16]
                        (-(lv_obj_get_y(scrl) - vpad) * (obj_h - size_tmp -  2 * sb_ver_pad)) /
 8015d9c:	4640      	mov	r0, r8
        lv_area_set_pos(&ext->sb.ver_area,  obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.hor,
 8015d9e:	f8b1 e024 	ldrh.w	lr, [r1, #36]	; 0x24
 8015da2:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 8015da4:	eba5 050e 	sub.w	r5, r5, lr
 8015da8:	1a6d      	subs	r5, r5, r1
                        (-(lv_obj_get_y(scrl) - vpad) * (obj_h - size_tmp -  2 * sb_ver_pad)) /
 8015daa:	f7f3 fe1f 	bl	80099ec <lv_obj_get_y>
 8015dae:	9b03      	ldr	r3, [sp, #12]
                        sb_ver_pad +
 8015db0:	9a02      	ldr	r2, [sp, #8]
        lv_area_set_pos(&ext->sb.ver_area,  obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.hor,
 8015db2:	b22d      	sxth	r5, r5
                        (-(lv_obj_get_y(scrl) - vpad) * (obj_h - size_tmp -  2 * sb_ver_pad)) /
 8015db4:	eba3 0e00 	sub.w	lr, r3, r0
 8015db8:	9b01      	ldr	r3, [sp, #4]
        lv_area_set_pos(&ext->sb.ver_area,  obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.hor,
 8015dba:	4629      	mov	r1, r5
 8015dbc:	4650      	mov	r0, sl
                        (-(lv_obj_get_y(scrl) - vpad) * (obj_h - size_tmp -  2 * sb_ver_pad)) /
 8015dbe:	1afb      	subs	r3, r7, r3
 8015dc0:	fb0e f303 	mul.w	r3, lr, r3
 8015dc4:	fb93 f9f9 	sdiv	r9, r3, r9
                        sb_ver_pad +
 8015dc8:	444a      	add	r2, r9
        lv_area_set_pos(&ext->sb.ver_area,  obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.hor,
 8015dca:	b212      	sxth	r2, r2
 8015dcc:	f7f9 fdbe 	bl	800f94c <lv_area_set_pos>

        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG)  ext->sb.ver_draw = 1;
 8015dd0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8015dd4:	f003 0218 	and.w	r2, r3, #24
 8015dd8:	2a08      	cmp	r2, #8
 8015dda:	d104      	bne.n	8015de6 <lv_page_sb_refresh+0x1a2>
 8015ddc:	f043 0202 	orr.w	r2, r3, #2
 8015de0:	4613      	mov	r3, r2
 8015de2:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    }

    /*Invalidate the new scrollbar areas*/
    if(ext->sb.hor_draw != 0) {
 8015de6:	07da      	lsls	r2, r3, #31
 8015de8:	f100 80d0 	bmi.w	8015f8c <lv_page_sb_refresh+0x348>
        sb_area_tmp.y1 += page->coords.y1;
        sb_area_tmp.x2 += page->coords.x1;
        sb_area_tmp.y2 += page->coords.y1;
        lv_inv_area(&sb_area_tmp);
    }
    if(ext->sb.ver_draw != 0)  {
 8015dec:	079b      	lsls	r3, r3, #30
 8015dee:	d51e      	bpl.n	8015e2e <lv_page_sb_refresh+0x1ea>
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    memcpy(dest, src, sizeof(lv_area_t));
 8015df0:	f8da 0000 	ldr.w	r0, [sl]
 8015df4:	ac08      	add	r4, sp, #32
 8015df6:	f8da 1004 	ldr.w	r1, [sl, #4]
        lv_area_copy(&sb_area_tmp, &ext->sb.ver_area);
        sb_area_tmp.x1 += page->coords.x1;
 8015dfa:	8a32      	ldrh	r2, [r6, #16]
        sb_area_tmp.y1 += page->coords.y1;
 8015dfc:	8a73      	ldrh	r3, [r6, #18]
 8015dfe:	c403      	stmia	r4!, {r0, r1}
        sb_area_tmp.x1 += page->coords.x1;
 8015e00:	f8bd 4020 	ldrh.w	r4, [sp, #32]
        sb_area_tmp.x2 += page->coords.x1;
        sb_area_tmp.y2 += page->coords.y1;
        lv_inv_area(&sb_area_tmp);
 8015e04:	a808      	add	r0, sp, #32
        sb_area_tmp.x2 += page->coords.x1;
 8015e06:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
        sb_area_tmp.y1 += page->coords.y1;
 8015e0a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x1 += page->coords.x1;
 8015e0e:	4414      	add	r4, r2
        sb_area_tmp.y2 += page->coords.y1;
 8015e10:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
        sb_area_tmp.x2 += page->coords.x1;
 8015e14:	4432      	add	r2, r6
        sb_area_tmp.y1 += page->coords.y1;
 8015e16:	4419      	add	r1, r3
        sb_area_tmp.x1 += page->coords.x1;
 8015e18:	f8ad 4020 	strh.w	r4, [sp, #32]
        sb_area_tmp.y2 += page->coords.y1;
 8015e1c:	442b      	add	r3, r5
        sb_area_tmp.x2 += page->coords.x1;
 8015e1e:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
        sb_area_tmp.y1 += page->coords.y1;
 8015e22:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.y2 += page->coords.y1;
 8015e26:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        lv_inv_area(&sb_area_tmp);
 8015e2a:	f7f4 f96b 	bl	800a104 <lv_inv_area>
    }
}
 8015e2e:	b00b      	add	sp, #44	; 0x2c
 8015e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG)  ext->sb.hor_draw = 1;
 8015e34:	f043 0301 	orr.w	r3, r3, #1
 8015e38:	b2ad      	uxth	r5, r5
 8015e3a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8015e3e:	e783      	b.n	8015d48 <lv_page_sb_refresh+0x104>
 8015e40:	4621      	mov	r1, r4
 8015e42:	ab08      	add	r3, sp, #32
        sb_area_tmp.x1 += page->coords.x1;
 8015e44:	8a32      	ldrh	r2, [r6, #16]
 8015e46:	f851 0f14 	ldr.w	r0, [r1, #20]!
 8015e4a:	6849      	ldr	r1, [r1, #4]
 8015e4c:	c303      	stmia	r3!, {r0, r1}
        sb_area_tmp.x2 += page->coords.x1;
 8015e4e:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
        lv_inv_area(&sb_area_tmp);
 8015e52:	a808      	add	r0, sp, #32
        sb_area_tmp.x1 += page->coords.x1;
 8015e54:	f8bd e020 	ldrh.w	lr, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
 8015e58:	8a73      	ldrh	r3, [r6, #18]
 8015e5a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x1 += page->coords.x1;
 8015e5e:	4496      	add	lr, r2
        sb_area_tmp.x2 += page->coords.x1;
 8015e60:	4462      	add	r2, ip
        sb_area_tmp.y2 += page->coords.y1;
 8015e62:	f8bd c026 	ldrh.w	ip, [sp, #38]	; 0x26
        sb_area_tmp.y1 += page->coords.y1;
 8015e66:	4419      	add	r1, r3
        sb_area_tmp.x1 += page->coords.x1;
 8015e68:	f8ad e020 	strh.w	lr, [sp, #32]
        sb_area_tmp.y2 += page->coords.y1;
 8015e6c:	4463      	add	r3, ip
        sb_area_tmp.x2 += page->coords.x1;
 8015e6e:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
        sb_area_tmp.y1 += page->coords.y1;
 8015e72:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.y2 += page->coords.y1;
 8015e76:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        lv_inv_area(&sb_area_tmp);
 8015e7a:	f7f4 f943 	bl	800a104 <lv_inv_area>
 8015e7e:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    if(ext->sb.ver_draw != 0)  {
 8015e82:	0791      	lsls	r1, r2, #30
 8015e84:	f57f af19 	bpl.w	8015cba <lv_page_sb_refresh+0x76>
 8015e88:	4621      	mov	r1, r4
 8015e8a:	ab08      	add	r3, sp, #32
        sb_area_tmp.x1 += page->coords.x1;
 8015e8c:	8a32      	ldrh	r2, [r6, #16]
 8015e8e:	f851 0f1c 	ldr.w	r0, [r1, #28]!
 8015e92:	6849      	ldr	r1, [r1, #4]
 8015e94:	c303      	stmia	r3!, {r0, r1}
        sb_area_tmp.x2 += page->coords.x1;
 8015e96:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
        lv_inv_area(&sb_area_tmp);
 8015e9a:	a808      	add	r0, sp, #32
        sb_area_tmp.x1 += page->coords.x1;
 8015e9c:	f8bd e020 	ldrh.w	lr, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
 8015ea0:	8a73      	ldrh	r3, [r6, #18]
 8015ea2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x1 += page->coords.x1;
 8015ea6:	4496      	add	lr, r2
        sb_area_tmp.x2 += page->coords.x1;
 8015ea8:	4462      	add	r2, ip
        sb_area_tmp.y2 += page->coords.y1;
 8015eaa:	f8bd c026 	ldrh.w	ip, [sp, #38]	; 0x26
        sb_area_tmp.y1 += page->coords.y1;
 8015eae:	4419      	add	r1, r3
        sb_area_tmp.x1 += page->coords.x1;
 8015eb0:	f8ad e020 	strh.w	lr, [sp, #32]
        sb_area_tmp.y2 += page->coords.y1;
 8015eb4:	4463      	add	r3, ip
        sb_area_tmp.x2 += page->coords.x1;
 8015eb6:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
        sb_area_tmp.y1 += page->coords.y1;
 8015eba:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.y2 += page->coords.y1;
 8015ebe:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        lv_inv_area(&sb_area_tmp);
 8015ec2:	f7f4 f91f 	bl	800a104 <lv_inv_area>
 8015ec6:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    if(ext->sb.mode == LV_SB_MODE_DRAG && lv_indev_is_dragging(lv_indev_get_act()) == false) {
 8015eca:	f002 021c 	and.w	r2, r2, #28
 8015ece:	2a08      	cmp	r2, #8
 8015ed0:	f47f aef8 	bne.w	8015cc4 <lv_page_sb_refresh+0x80>
 8015ed4:	e008      	b.n	8015ee8 <lv_page_sb_refresh+0x2a4>
        ext->sb.ver_draw = 1;
 8015ed6:	f042 0303 	orr.w	r3, r2, #3
 8015eda:	461a      	mov	r2, r3
 8015edc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    if(ext->sb.hor_draw != 0) {
 8015ee0:	07d0      	lsls	r0, r2, #31
 8015ee2:	f57f aee7 	bpl.w	8015cb4 <lv_page_sb_refresh+0x70>
 8015ee6:	e7ab      	b.n	8015e40 <lv_page_sb_refresh+0x1fc>
    if(ext->sb.mode == LV_SB_MODE_DRAG && lv_indev_is_dragging(lv_indev_get_act()) == false) {
 8015ee8:	f7f2 feda 	bl	8008ca0 <lv_indev_get_act>
 8015eec:	f7f2 ff0e 	bl	8008d0c <lv_indev_is_dragging>
 8015ef0:	2800      	cmp	r0, #0
 8015ef2:	f47f aee7 	bne.w	8015cc4 <lv_page_sb_refresh+0x80>
        ext->sb.hor_draw = 0;
 8015ef6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8015efa:	f360 0300 	bfi	r3, r0, #0, #1
        ext->sb.ver_draw = 0;
 8015efe:	f360 0341 	bfi	r3, r0, #1, #1
 8015f02:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        return;
 8015f06:	e792      	b.n	8015e2e <lv_page_sb_refresh+0x1ea>
        lv_area_set_height(&ext->sb.ver_area,  obj_h - 2 * sb_ver_pad);
 8015f08:	ebab 0142 	sub.w	r1, fp, r2, lsl #1
 8015f0c:	f104 0a1c 	add.w	sl, r4, #28
 8015f10:	9201      	str	r2, [sp, #4]
 8015f12:	b209      	sxth	r1, r1
 8015f14:	4650      	mov	r0, sl
 8015f16:	f7f9 fd13 	bl	800f940 <lv_area_set_height>
        lv_area_set_pos(&ext->sb.ver_area, obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.hor, sb_ver_pad);
 8015f1a:	6923      	ldr	r3, [r4, #16]
 8015f1c:	9a01      	ldr	r2, [sp, #4]
 8015f1e:	4650      	mov	r0, sl
 8015f20:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8015f22:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8015f24:	1a6d      	subs	r5, r5, r1
 8015f26:	1ae9      	subs	r1, r5, r3
 8015f28:	b209      	sxth	r1, r1
 8015f2a:	f7f9 fd0f 	bl	800f94c <lv_area_set_pos>
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG)  ext->sb.ver_draw = 0;
 8015f2e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8015f32:	f003 0218 	and.w	r2, r3, #24
 8015f36:	2a08      	cmp	r2, #8
 8015f38:	f47f af55 	bne.w	8015de6 <lv_page_sb_refresh+0x1a2>
 8015f3c:	f36f 0341 	bfc	r3, #1, #1
 8015f40:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8015f44:	b2db      	uxtb	r3, r3
 8015f46:	e74e      	b.n	8015de6 <lv_page_sb_refresh+0x1a2>
        lv_area_set_width(&ext->sb.hor_area, obj_w - 2 * sb_hor_pad);
 8015f48:	b2ad      	uxth	r5, r5
 8015f4a:	f104 0314 	add.w	r3, r4, #20
 8015f4e:	eba5 014a 	sub.w	r1, r5, sl, lsl #1
 8015f52:	4618      	mov	r0, r3
 8015f54:	461f      	mov	r7, r3
 8015f56:	9306      	str	r3, [sp, #24]
 8015f58:	b209      	sxth	r1, r1
 8015f5a:	f7f9 fceb 	bl	800f934 <lv_area_set_width>
        lv_area_set_pos(&ext->sb.hor_area, sb_hor_pad, obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.ver);
 8015f5e:	6923      	ldr	r3, [r4, #16]
 8015f60:	4651      	mov	r1, sl
 8015f62:	4638      	mov	r0, r7
 8015f64:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8015f66:	8c1b      	ldrh	r3, [r3, #32]
 8015f68:	ebab 0202 	sub.w	r2, fp, r2
 8015f6c:	1ad2      	subs	r2, r2, r3
 8015f6e:	b212      	sxth	r2, r2
 8015f70:	f7f9 fcec 	bl	800f94c <lv_area_set_pos>
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG)  ext->sb.hor_draw = 0;
 8015f74:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8015f78:	f003 0218 	and.w	r2, r3, #24
 8015f7c:	2a08      	cmp	r2, #8
 8015f7e:	f47f aee3 	bne.w	8015d48 <lv_page_sb_refresh+0x104>
 8015f82:	f36f 0300 	bfc	r3, #0, #1
 8015f86:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8015f8a:	e6dd      	b.n	8015d48 <lv_page_sb_refresh+0x104>
 8015f8c:	9a06      	ldr	r2, [sp, #24]
 8015f8e:	ab08      	add	r3, sp, #32
 8015f90:	6810      	ldr	r0, [r2, #0]
 8015f92:	6851      	ldr	r1, [r2, #4]
        sb_area_tmp.x1 += page->coords.x1;
 8015f94:	8a32      	ldrh	r2, [r6, #16]
 8015f96:	c303      	stmia	r3!, {r0, r1}
        sb_area_tmp.x2 += page->coords.x1;
 8015f98:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
        lv_inv_area(&sb_area_tmp);
 8015f9c:	a808      	add	r0, sp, #32
        sb_area_tmp.x1 += page->coords.x1;
 8015f9e:	f8bd 5020 	ldrh.w	r5, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
 8015fa2:	8a73      	ldrh	r3, [r6, #18]
 8015fa4:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x1 += page->coords.x1;
 8015fa8:	4415      	add	r5, r2
        sb_area_tmp.x2 += page->coords.x1;
 8015faa:	443a      	add	r2, r7
        sb_area_tmp.y2 += page->coords.y1;
 8015fac:	f8bd 7026 	ldrh.w	r7, [sp, #38]	; 0x26
        sb_area_tmp.y1 += page->coords.y1;
 8015fb0:	4419      	add	r1, r3
        sb_area_tmp.x1 += page->coords.x1;
 8015fb2:	f8ad 5020 	strh.w	r5, [sp, #32]
        sb_area_tmp.y2 += page->coords.y1;
 8015fb6:	443b      	add	r3, r7
        sb_area_tmp.x2 += page->coords.x1;
 8015fb8:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
        sb_area_tmp.y1 += page->coords.y1;
 8015fbc:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.y2 += page->coords.y1;
 8015fc0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        lv_inv_area(&sb_area_tmp);
 8015fc4:	f7f4 f89e 	bl	800a104 <lv_inv_area>
 8015fc8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8015fcc:	e70e      	b.n	8015dec <lv_page_sb_refresh+0x1a8>
 8015fce:	bf00      	nop

08015fd0 <edge_flash_anim_end>:
    ext->edge_flash.state = v;
    lv_obj_invalidate(page);
}

static void edge_flash_anim_end(void * page)
{
 8015fd0:	b510      	push	{r4, lr}
 8015fd2:	4604      	mov	r4, r0
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8015fd4:	f7f3 fe36 	bl	8009c44 <lv_obj_get_ext_attr>
 8015fd8:	4602      	mov	r2, r0
    ext->edge_flash.top_ip = 0;
    ext->edge_flash.bottom_ip = 0;
    ext->edge_flash.left_ip = 0;
    ext->edge_flash.right_ip = 0;
    lv_obj_invalidate(page);
 8015fda:	4620      	mov	r0, r4
    ext->edge_flash.top_ip = 0;
 8015fdc:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    ext->edge_flash.right_ip = 0;
 8015fe0:	f003 03e9 	and.w	r3, r3, #233	; 0xe9
 8015fe4:	f36f 03c3 	bfc	r3, #3, #1
}
 8015fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ext->edge_flash.right_ip = 0;
 8015fec:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    lv_obj_invalidate(page);
 8015ff0:	f7f2 bf22 	b.w	8008e38 <lv_obj_invalidate>

08015ff4 <edge_flash_anim>:
{
 8015ff4:	b538      	push	{r3, r4, r5, lr}
 8015ff6:	460d      	mov	r5, r1
 8015ff8:	4604      	mov	r4, r0
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8015ffa:	f7f3 fe23 	bl	8009c44 <lv_obj_get_ext_attr>
    ext->edge_flash.state = v;
 8015ffe:	8505      	strh	r5, [r0, #40]	; 0x28
    lv_obj_invalidate(page);
 8016000:	4620      	mov	r0, r4
}
 8016002:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(page);
 8016006:	f7f2 bf17 	b.w	8008e38 <lv_obj_invalidate>
 801600a:	bf00      	nop

0801600c <lv_scrl_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 801600c:	2a02      	cmp	r2, #2
 801600e:	d03e      	beq.n	801608e <lv_scrl_design+0x82>
{
 8016010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 8016014:	b122      	cbz	r2, 8016020 <lv_scrl_design+0x14>
    } else if(mode == LV_DESIGN_DRAW_POST) {
 8016016:	2a01      	cmp	r2, #1
 8016018:	d033      	beq.n	8016082 <lv_scrl_design+0x76>
}
 801601a:	2001      	movs	r0, #1
 801601c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016020:	4604      	mov	r4, r0
 8016022:	460d      	mov	r5, r1
        lv_style_t * style_scrl_ori = lv_obj_get_style(scrl);
 8016024:	f7f3 fcf4 	bl	8009a10 <lv_obj_get_style>
 8016028:	4680      	mov	r8, r0
        lv_obj_t * page = lv_obj_get_parent(scrl);
 801602a:	4620      	mov	r0, r4
 801602c:	f7f3 fc34 	bl	8009898 <lv_obj_get_parent>
 8016030:	4607      	mov	r7, r0
        lv_style_t * style_page = lv_obj_get_style(page);
 8016032:	f7f3 fced 	bl	8009a10 <lv_obj_get_style>
 8016036:	4606      	mov	r6, r0
        lv_group_t * g = lv_obj_get_group(page);
 8016038:	4638      	mov	r0, r7
 801603a:	f7f3 fe05 	bl	8009c48 <lv_obj_get_group>
        if((style_page->body.empty || style_page->body.opa == LV_OPA_TRANSP) && style_page->body.border.width == 0) { /*Is the background visible?*/
 801603e:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
        lv_group_t * g = lv_obj_get_group(page);
 8016042:	4681      	mov	r9, r0
        if((style_page->body.empty || style_page->body.opa == LV_OPA_TRANSP) && style_page->body.border.width == 0) { /*Is the background visible?*/
 8016044:	07db      	lsls	r3, r3, #31
 8016046:	d50d      	bpl.n	8016064 <lv_scrl_design+0x58>
 8016048:	f9b6 3014 	ldrsh.w	r3, [r6, #20]
 801604c:	b173      	cbz	r3, 801606c <lv_scrl_design+0x60>
        ancestor_design(scrl, mask, mode);
 801604e:	4b11      	ldr	r3, [pc, #68]	; (8016094 <lv_scrl_design+0x88>)
 8016050:	4629      	mov	r1, r5
 8016052:	2200      	movs	r2, #0
 8016054:	4620      	mov	r0, r4
 8016056:	681b      	ldr	r3, [r3, #0]
 8016058:	4798      	blx	r3
        scrl->style_p = style_scrl_ori;  /*Revert the style*/
 801605a:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
}
 801605e:	2001      	movs	r0, #1
 8016060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if((style_page->body.empty || style_page->body.opa == LV_OPA_TRANSP) && style_page->body.border.width == 0) { /*Is the background visible?*/
 8016064:	7bb3      	ldrb	r3, [r6, #14]
 8016066:	2b00      	cmp	r3, #0
 8016068:	d0ee      	beq.n	8016048 <lv_scrl_design+0x3c>
 801606a:	e7f0      	b.n	801604e <lv_scrl_design+0x42>
            if(lv_group_get_focused(g) == page) {
 801606c:	4648      	mov	r0, r9
 801606e:	f7f2 f8d5 	bl	800821c <lv_group_get_focused>
 8016072:	4287      	cmp	r7, r0
 8016074:	d1eb      	bne.n	801604e <lv_scrl_design+0x42>
                style_mod = lv_group_mod_style(g, style_scrl_ori);
 8016076:	4648      	mov	r0, r9
 8016078:	4641      	mov	r1, r8
 801607a:	f7f2 f8b9 	bl	80081f0 <lv_group_mod_style>
                scrl->style_p = style_mod;  /*Temporally change the style to the activated */
 801607e:	6260      	str	r0, [r4, #36]	; 0x24
 8016080:	e7e5      	b.n	801604e <lv_scrl_design+0x42>
        ancestor_design(scrl, mask, mode);
 8016082:	4b04      	ldr	r3, [pc, #16]	; (8016094 <lv_scrl_design+0x88>)
 8016084:	681b      	ldr	r3, [r3, #0]
 8016086:	4798      	blx	r3
}
 8016088:	2001      	movs	r0, #1
 801608a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return ancestor_design(scrl, mask, mode);
 801608e:	4b01      	ldr	r3, [pc, #4]	; (8016094 <lv_scrl_design+0x88>)
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	4718      	bx	r3
 8016094:	200174f4 	.word	0x200174f4

08016098 <lv_page_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 8016098:	2a02      	cmp	r2, #2
{
 801609a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801609e:	b096      	sub	sp, #88	; 0x58
    if(mode == LV_DESIGN_COVER_CHK) {
 80160a0:	f000 80ee 	beq.w	8016280 <lv_page_design+0x1e8>
 80160a4:	4614      	mov	r4, r2
 80160a6:	4605      	mov	r5, r0
 80160a8:	460e      	mov	r6, r1
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 80160aa:	b12a      	cbz	r2, 80160b8 <lv_page_design+0x20>
    } else if(mode == LV_DESIGN_DRAW_POST) { /*Draw the scroll bars finally*/
 80160ac:	2a01      	cmp	r2, #1
 80160ae:	d01c      	beq.n	80160ea <lv_page_design+0x52>
    return true;
 80160b0:	2001      	movs	r0, #1
}
 80160b2:	b016      	add	sp, #88	; 0x58
 80160b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 80160b8:	f7f3 fdc4 	bl	8009c44 <lv_obj_get_ext_attr>
            style = lv_obj_get_style(page);
 80160bc:	4628      	mov	r0, r5
 80160be:	f7f3 fca7 	bl	8009a10 <lv_obj_get_style>
 80160c2:	4607      	mov	r7, r0
        lv_draw_rect(&page->coords, mask, style, lv_obj_get_opa_scale(page));
 80160c4:	4628      	mov	r0, r5
        lv_coord_t border_width_tmp =  style->body.border.width;
 80160c6:	f9b7 8014 	ldrsh.w	r8, [r7, #20]
        style->body.border.width = 0;
 80160ca:	82bc      	strh	r4, [r7, #20]
        lv_draw_rect(&page->coords, mask, style, lv_obj_get_opa_scale(page));
 80160cc:	f7f3 fd9a 	bl	8009c04 <lv_obj_get_opa_scale>
 80160d0:	463a      	mov	r2, r7
 80160d2:	4603      	mov	r3, r0
 80160d4:	4631      	mov	r1, r6
 80160d6:	f105 0010 	add.w	r0, r5, #16
 80160da:	f7f6 fda5 	bl	800cc28 <lv_draw_rect>
    return true;
 80160de:	2001      	movs	r0, #1
        style->body.border.width = border_width_tmp;
 80160e0:	f8a7 8014 	strh.w	r8, [r7, #20]
}
 80160e4:	b016      	add	sp, #88	; 0x58
 80160e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 80160ea:	f7f3 fdab 	bl	8009c44 <lv_obj_get_ext_attr>
            style = lv_obj_get_style(page);
 80160ee:	4628      	mov	r0, r5
 80160f0:	f7f3 fc8e 	bl	8009a10 <lv_obj_get_style>
 80160f4:	4604      	mov	r4, r0
        style->body.shadow.width = 0;
 80160f6:	2100      	movs	r1, #0
        lv_draw_rect(&page->coords, mask, style, lv_obj_get_opa_scale(page));
 80160f8:	4628      	mov	r0, r5
        uint8_t empty_tmp =  style->body.empty;
 80160fa:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
        lv_coord_t shadow_width_tmp =  style->body.shadow.width;
 80160fe:	f9b4 801c 	ldrsh.w	r8, [r4, #28]
        style->body.empty = 1;
 8016102:	f043 0201 	orr.w	r2, r3, #1
        style->body.shadow.width = 0;
 8016106:	83a1      	strh	r1, [r4, #28]
        uint8_t empty_tmp =  style->body.empty;
 8016108:	f003 0701 	and.w	r7, r3, #1
        style->body.empty = 1;
 801610c:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
        lv_draw_rect(&page->coords, mask, style, lv_obj_get_opa_scale(page));
 8016110:	f7f3 fd78 	bl	8009c04 <lv_obj_get_opa_scale>
 8016114:	4622      	mov	r2, r4
 8016116:	4603      	mov	r3, r0
 8016118:	4631      	mov	r1, r6
 801611a:	f105 0010 	add.w	r0, r5, #16
 801611e:	f7f6 fd83 	bl	800cc28 <lv_draw_rect>
        style->body.empty = empty_tmp;
 8016122:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
        style->body.shadow.width = shadow_width_tmp;
 8016126:	f8a4 801c 	strh.w	r8, [r4, #28]
        lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801612a:	4628      	mov	r0, r5
        style->body.empty = empty_tmp;
 801612c:	f367 0300 	bfi	r3, r7, #0, #1
 8016130:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8016134:	f7f3 fd86 	bl	8009c44 <lv_obj_get_ext_attr>
        if(ext->sb.hor_draw && (ext->sb.mode & LV_SB_MODE_HIDE) == 0) {
 8016138:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
        lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801613c:	4607      	mov	r7, r0
        if(ext->sb.hor_draw && (ext->sb.mode & LV_SB_MODE_HIDE) == 0) {
 801613e:	07da      	lsls	r2, r3, #31
 8016140:	d571      	bpl.n	8016226 <lv_page_design+0x18e>
 8016142:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8016146:	075b      	lsls	r3, r3, #29
 8016148:	d545      	bpl.n	80161d6 <lv_page_design+0x13e>
        lv_coord_t page_w = lv_obj_get_width(page);
 801614a:	4628      	mov	r0, r5
 801614c:	f7f3 fc54 	bl	80099f8 <lv_obj_get_width>
 8016150:	4604      	mov	r4, r0
        lv_coord_t page_h = lv_obj_get_height(page);
 8016152:	4628      	mov	r0, r5
 8016154:	f7f3 fc56 	bl	8009a04 <lv_obj_get_height>
        if(ext->edge_flash.top_ip) {
 8016158:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801615c:	0799      	lsls	r1, r3, #30
 801615e:	f140 8093 	bpl.w	8016288 <lv_page_design+0x1f0>
            flash_area.x1 = page->coords.x1 - page_w;
 8016162:	b2a0      	uxth	r0, r4
 8016164:	f8b7 e028 	ldrh.w	lr, [r7, #40]	; 0x28
 8016168:	8a6a      	ldrh	r2, [r5, #18]
            flash_area.y1 = page->coords.y1 - 3 * page_w + ext->edge_flash.state;
 801616a:	ebc0 3180 	rsb	r1, r0, r0, lsl #14
            flash_area.x1 = page->coords.x1 - page_w;
 801616e:	8a2c      	ldrh	r4, [r5, #16]
 8016170:	4472      	add	r2, lr
            flash_area.x2 = page->coords.x2 + page_w;
 8016172:	f8b5 e014 	ldrh.w	lr, [r5, #20]
            flash_area.y1 = page->coords.y1 - 3 * page_w + ext->edge_flash.state;
 8016176:	eb00 0181 	add.w	r1, r0, r1, lsl #2
            flash_area.x1 = page->coords.x1 - page_w;
 801617a:	1a24      	subs	r4, r4, r0
 801617c:	b292      	uxth	r2, r2
            flash_area.x2 = page->coords.x2 + page_w;
 801617e:	4470      	add	r0, lr
            flash_area.x1 = page->coords.x1 - page_w;
 8016180:	f8ad 4008 	strh.w	r4, [sp, #8]
            flash_area.y1 = page->coords.y1 - 3 * page_w + ext->edge_flash.state;
 8016184:	4411      	add	r1, r2
            flash_area.y2 = page->coords.y1 + ext->edge_flash.state;
 8016186:	f8ad 200e 	strh.w	r2, [sp, #14]
            flash_area.x2 = page->coords.x2 + page_w;
 801618a:	f8ad 000c 	strh.w	r0, [sp, #12]
            flash_area.y1 = page->coords.y1 - 3 * page_w + ext->edge_flash.state;
 801618e:	f8ad 100a 	strh.w	r1, [sp, #10]
        if(ext->edge_flash.left_ip || ext->edge_flash.right_ip || ext->edge_flash.top_ip || ext->edge_flash.bottom_ip) {
 8016192:	f013 0f1e 	tst.w	r3, #30
 8016196:	d08b      	beq.n	80160b0 <lv_page_design+0x18>
            lv_style_copy(&flash_style, ext->edge_flash.style);
 8016198:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801619a:	a804      	add	r0, sp, #16
 801619c:	f7f4 fa32 	bl	800a604 <lv_style_copy>
            uint32_t opa = (flash_style.body.opa * ext->edge_flash.state) / LV_PAGE_END_FLASH_SIZE;
 80161a0:	f89d 401e 	ldrb.w	r4, [sp, #30]
 80161a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
            flash_style.body.radius = LV_RADIUS_CIRCLE;
 80161a6:	f643 71ff 	movw	r1, #16383	; 0x3fff
            uint32_t opa = (flash_style.body.opa * ext->edge_flash.state) / LV_PAGE_END_FLASH_SIZE;
 80161aa:	4a5d      	ldr	r2, [pc, #372]	; (8016320 <lv_page_design+0x288>)
            lv_draw_rect(&flash_area, mask, &flash_style, lv_obj_get_opa_scale(page));
 80161ac:	4628      	mov	r0, r5
            uint32_t opa = (flash_style.body.opa * ext->edge_flash.state) / LV_PAGE_END_FLASH_SIZE;
 80161ae:	fb03 f304 	mul.w	r3, r3, r4
            flash_style.body.radius = LV_RADIUS_CIRCLE;
 80161b2:	f8ad 101c 	strh.w	r1, [sp, #28]
            uint32_t opa = (flash_style.body.opa * ext->edge_flash.state) / LV_PAGE_END_FLASH_SIZE;
 80161b6:	fb82 1203 	smull	r1, r2, r2, r3
 80161ba:	17db      	asrs	r3, r3, #31
 80161bc:	ebc3 03e2 	rsb	r3, r3, r2, asr #3
            flash_style.body.opa = opa;
 80161c0:	f88d 301e 	strb.w	r3, [sp, #30]
            lv_draw_rect(&flash_area, mask, &flash_style, lv_obj_get_opa_scale(page));
 80161c4:	f7f3 fd1e 	bl	8009c04 <lv_obj_get_opa_scale>
 80161c8:	aa04      	add	r2, sp, #16
 80161ca:	4603      	mov	r3, r0
 80161cc:	4631      	mov	r1, r6
 80161ce:	a802      	add	r0, sp, #8
 80161d0:	f7f6 fd2a 	bl	800cc28 <lv_draw_rect>
 80161d4:	e76c      	b.n	80160b0 <lv_page_design+0x18>
 80161d6:	4601      	mov	r1, r0
 80161d8:	466b      	mov	r3, sp
            sb_area.x1 += page->coords.x1;
 80161da:	8a2a      	ldrh	r2, [r5, #16]
 80161dc:	f851 0f14 	ldr.w	r0, [r1, #20]!
 80161e0:	6849      	ldr	r1, [r1, #4]
 80161e2:	c303      	stmia	r3!, {r0, r1}
            sb_area.x2 += page->coords.x1;
 80161e4:	f8bd e004 	ldrh.w	lr, [sp, #4]
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 80161e8:	4628      	mov	r0, r5
            sb_area.x1 += page->coords.x1;
 80161ea:	f8bd 4000 	ldrh.w	r4, [sp]
            sb_area.y1 += page->coords.y1;
 80161ee:	8a6b      	ldrh	r3, [r5, #18]
            sb_area.x1 += page->coords.x1;
 80161f0:	4414      	add	r4, r2
            sb_area.y1 += page->coords.y1;
 80161f2:	f8bd 1002 	ldrh.w	r1, [sp, #2]
            sb_area.x2 += page->coords.x1;
 80161f6:	4472      	add	r2, lr
            sb_area.y2 += page->coords.y1;
 80161f8:	f8bd e006 	ldrh.w	lr, [sp, #6]
            sb_area.y1 += page->coords.y1;
 80161fc:	4419      	add	r1, r3
            sb_area.x1 += page->coords.x1;
 80161fe:	f8ad 4000 	strh.w	r4, [sp]
            sb_area.y2 += page->coords.y1;
 8016202:	4473      	add	r3, lr
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 8016204:	693c      	ldr	r4, [r7, #16]
            sb_area.x2 += page->coords.x1;
 8016206:	f8ad 2004 	strh.w	r2, [sp, #4]
            sb_area.y1 += page->coords.y1;
 801620a:	f8ad 1002 	strh.w	r1, [sp, #2]
            sb_area.y2 += page->coords.y1;
 801620e:	f8ad 3006 	strh.w	r3, [sp, #6]
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 8016212:	f7f3 fcf7 	bl	8009c04 <lv_obj_get_opa_scale>
 8016216:	4622      	mov	r2, r4
 8016218:	4603      	mov	r3, r0
 801621a:	4631      	mov	r1, r6
 801621c:	4668      	mov	r0, sp
 801621e:	f7f6 fd03 	bl	800cc28 <lv_draw_rect>
 8016222:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
        if(ext->sb.ver_draw && (ext->sb.mode & LV_SB_MODE_HIDE) == 0) {
 8016226:	079c      	lsls	r4, r3, #30
 8016228:	d58f      	bpl.n	801614a <lv_page_design+0xb2>
 801622a:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801622e:	0758      	lsls	r0, r3, #29
 8016230:	d48b      	bmi.n	801614a <lv_page_design+0xb2>
 8016232:	4639      	mov	r1, r7
 8016234:	466b      	mov	r3, sp
            sb_area.x1 += page->coords.x1;
 8016236:	8a2a      	ldrh	r2, [r5, #16]
 8016238:	f851 0f1c 	ldr.w	r0, [r1, #28]!
 801623c:	6849      	ldr	r1, [r1, #4]
 801623e:	c303      	stmia	r3!, {r0, r1}
            sb_area.x2 += page->coords.x1;
 8016240:	f8bd e004 	ldrh.w	lr, [sp, #4]
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 8016244:	4628      	mov	r0, r5
            sb_area.x1 += page->coords.x1;
 8016246:	f8bd 4000 	ldrh.w	r4, [sp]
            sb_area.y1 += page->coords.y1;
 801624a:	8a6b      	ldrh	r3, [r5, #18]
 801624c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
            sb_area.x1 += page->coords.x1;
 8016250:	4414      	add	r4, r2
            sb_area.x2 += page->coords.x1;
 8016252:	4472      	add	r2, lr
            sb_area.y2 += page->coords.y1;
 8016254:	f8bd e006 	ldrh.w	lr, [sp, #6]
            sb_area.y1 += page->coords.y1;
 8016258:	4419      	add	r1, r3
            sb_area.x1 += page->coords.x1;
 801625a:	f8ad 4000 	strh.w	r4, [sp]
            sb_area.y2 += page->coords.y1;
 801625e:	4473      	add	r3, lr
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 8016260:	693c      	ldr	r4, [r7, #16]
            sb_area.x2 += page->coords.x1;
 8016262:	f8ad 2004 	strh.w	r2, [sp, #4]
            sb_area.y1 += page->coords.y1;
 8016266:	f8ad 1002 	strh.w	r1, [sp, #2]
            sb_area.y2 += page->coords.y1;
 801626a:	f8ad 3006 	strh.w	r3, [sp, #6]
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 801626e:	f7f3 fcc9 	bl	8009c04 <lv_obj_get_opa_scale>
 8016272:	4622      	mov	r2, r4
 8016274:	4603      	mov	r3, r0
 8016276:	4631      	mov	r1, r6
 8016278:	4668      	mov	r0, sp
 801627a:	f7f6 fcd5 	bl	800cc28 <lv_draw_rect>
 801627e:	e764      	b.n	801614a <lv_page_design+0xb2>
        return ancestor_design(page, mask, mode);
 8016280:	4b28      	ldr	r3, [pc, #160]	; (8016324 <lv_page_design+0x28c>)
 8016282:	681b      	ldr	r3, [r3, #0]
 8016284:	4798      	blx	r3
 8016286:	e714      	b.n	80160b2 <lv_page_design+0x1a>
        else if(ext->edge_flash.bottom_ip) {
 8016288:	075a      	lsls	r2, r3, #29
 801628a:	d417      	bmi.n	80162bc <lv_page_design+0x224>
        else if(ext->edge_flash.right_ip) {
 801628c:	0719      	lsls	r1, r3, #28
 801628e:	d52b      	bpl.n	80162e8 <lv_page_design+0x250>
            flash_area.x1 = page->coords.x2 - ext->edge_flash.state;
 8016290:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
            flash_area.x2 = page->coords.x2 + 3 * page_h - ext->edge_flash.state;
 8016292:	b280      	uxth	r0, r0
            flash_area.x1 = page->coords.x2 - ext->edge_flash.state;
 8016294:	8aaa      	ldrh	r2, [r5, #20]
            flash_area.x2 = page->coords.x2 + 3 * page_h - ext->edge_flash.state;
 8016296:	eb00 0140 	add.w	r1, r0, r0, lsl #1
            flash_area.y2 = page->coords.y2 + page_h;
 801629a:	f8b5 e016 	ldrh.w	lr, [r5, #22]
            flash_area.x1 = page->coords.x2 - ext->edge_flash.state;
 801629e:	1b12      	subs	r2, r2, r4
            flash_area.y1 = page->coords.y1 - page_h;
 80162a0:	8a6c      	ldrh	r4, [r5, #18]
            flash_area.x1 = page->coords.x2 - ext->edge_flash.state;
 80162a2:	b292      	uxth	r2, r2
            flash_area.y1 = page->coords.y1 - page_h;
 80162a4:	1a24      	subs	r4, r4, r0
            flash_area.y2 = page->coords.y2 + page_h;
 80162a6:	4470      	add	r0, lr
            flash_area.x2 = page->coords.x2 + 3 * page_h - ext->edge_flash.state;
 80162a8:	4411      	add	r1, r2
            flash_area.x1 = page->coords.x2 - ext->edge_flash.state;
 80162aa:	f8ad 2008 	strh.w	r2, [sp, #8]
            flash_area.y1 = page->coords.y1 - page_h;
 80162ae:	f8ad 400a 	strh.w	r4, [sp, #10]
            flash_area.x2 = page->coords.x2 + 3 * page_h - ext->edge_flash.state;
 80162b2:	f8ad 100c 	strh.w	r1, [sp, #12]
            flash_area.y2 = page->coords.y2 + page_h;
 80162b6:	f8ad 000e 	strh.w	r0, [sp, #14]
 80162ba:	e76a      	b.n	8016192 <lv_page_design+0xfa>
            flash_area.x1 = page->coords.x1 - page_w;
 80162bc:	b2a0      	uxth	r0, r4
            flash_area.y1 = page->coords.y2 - ext->edge_flash.state;
 80162be:	8aea      	ldrh	r2, [r5, #22]
 80162c0:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
            flash_area.y2 = page->coords.y2 + 3 * page_w - ext->edge_flash.state;
 80162c2:	eb00 0140 	add.w	r1, r0, r0, lsl #1
            flash_area.x2 = page->coords.x2 + page_w;
 80162c6:	f8b5 e014 	ldrh.w	lr, [r5, #20]
            flash_area.y1 = page->coords.y2 - ext->edge_flash.state;
 80162ca:	1b12      	subs	r2, r2, r4
            flash_area.x1 = page->coords.x1 - page_w;
 80162cc:	8a2c      	ldrh	r4, [r5, #16]
            flash_area.y1 = page->coords.y2 - ext->edge_flash.state;
 80162ce:	b292      	uxth	r2, r2
            flash_area.x1 = page->coords.x1 - page_w;
 80162d0:	1a24      	subs	r4, r4, r0
            flash_area.x2 = page->coords.x2 + page_w;
 80162d2:	4470      	add	r0, lr
            flash_area.y2 = page->coords.y2 + 3 * page_w - ext->edge_flash.state;
 80162d4:	4411      	add	r1, r2
            flash_area.y1 = page->coords.y2 - ext->edge_flash.state;
 80162d6:	f8ad 200a 	strh.w	r2, [sp, #10]
            flash_area.x1 = page->coords.x1 - page_w;
 80162da:	f8ad 4008 	strh.w	r4, [sp, #8]
            flash_area.y2 = page->coords.y2 + 3 * page_w - ext->edge_flash.state;
 80162de:	f8ad 100e 	strh.w	r1, [sp, #14]
            flash_area.x2 = page->coords.x2 + page_w;
 80162e2:	f8ad 000c 	strh.w	r0, [sp, #12]
 80162e6:	e754      	b.n	8016192 <lv_page_design+0xfa>
        else if(ext->edge_flash.left_ip) {
 80162e8:	06da      	lsls	r2, r3, #27
 80162ea:	f57f af52 	bpl.w	8016192 <lv_page_design+0xfa>
            flash_area.x1 = page->coords.x1 - 3 * page_h + ext->edge_flash.state;
 80162ee:	b280      	uxth	r0, r0
 80162f0:	f8b7 e028 	ldrh.w	lr, [r7, #40]	; 0x28
 80162f4:	8a2a      	ldrh	r2, [r5, #16]
 80162f6:	ebc0 3180 	rsb	r1, r0, r0, lsl #14
            flash_area.y1 = page->coords.y1 - page_h;
 80162fa:	8a6c      	ldrh	r4, [r5, #18]
 80162fc:	4472      	add	r2, lr
            flash_area.y2 = page->coords.y2 + page_h;
 80162fe:	f8b5 e016 	ldrh.w	lr, [r5, #22]
            flash_area.x1 = page->coords.x1 - 3 * page_h + ext->edge_flash.state;
 8016302:	eb00 0181 	add.w	r1, r0, r1, lsl #2
            flash_area.y1 = page->coords.y1 - page_h;
 8016306:	1a24      	subs	r4, r4, r0
 8016308:	b292      	uxth	r2, r2
            flash_area.y2 = page->coords.y2 + page_h;
 801630a:	4470      	add	r0, lr
            flash_area.y1 = page->coords.y1 - page_h;
 801630c:	f8ad 400a 	strh.w	r4, [sp, #10]
            flash_area.x1 = page->coords.x1 - 3 * page_h + ext->edge_flash.state;
 8016310:	4411      	add	r1, r2
            flash_area.x2 = page->coords.x1 + ext->edge_flash.state;
 8016312:	f8ad 200c 	strh.w	r2, [sp, #12]
            flash_area.y2 = page->coords.y2 + page_h;
 8016316:	f8ad 000e 	strh.w	r0, [sp, #14]
            flash_area.x1 = page->coords.x1 - 3 * page_h + ext->edge_flash.state;
 801631a:	f8ad 1008 	strh.w	r1, [sp, #8]
 801631e:	e738      	b.n	8016192 <lv_page_design+0xfa>
 8016320:	51eb851f 	.word	0x51eb851f
 8016324:	200174f4 	.word	0x200174f4

08016328 <lv_page_set_rel_action>:
{
 8016328:	b510      	push	{r4, lr}
 801632a:	460c      	mov	r4, r1
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801632c:	f7f3 fc8a 	bl	8009c44 <lv_obj_get_ext_attr>
    ext->rel_action = rel_action;
 8016330:	6084      	str	r4, [r0, #8]
 8016332:	bd10      	pop	{r4, pc}

08016334 <lv_page_set_sb_mode>:
{
 8016334:	b538      	push	{r3, r4, r5, lr}
 8016336:	460c      	mov	r4, r1
 8016338:	4605      	mov	r5, r0
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801633a:	f7f3 fc83 	bl	8009c44 <lv_obj_get_ext_attr>
    if(ext->sb.mode == sb_mode) return;
 801633e:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
 8016342:	f3c1 0282 	ubfx	r2, r1, #2, #3
 8016346:	42a2      	cmp	r2, r4
 8016348:	d02c      	beq.n	80163a4 <lv_page_set_sb_mode+0x70>
    if(sb_mode == LV_SB_MODE_HIDE) ext->sb.mode |= LV_SB_MODE_HIDE;                 /*Set the hidden flag*/
 801634a:	2c04      	cmp	r4, #4
 801634c:	4603      	mov	r3, r0
 801634e:	d01b      	beq.n	8016388 <lv_page_set_sb_mode+0x54>
    else if(sb_mode == LV_SB_MODE_UNHIDE) ext->sb.mode &= (~LV_SB_MODE_HIDE);       /*Clear the hidden flag*/
 8016350:	2c05      	cmp	r4, #5
 8016352:	d020      	beq.n	8016396 <lv_page_set_sb_mode+0x62>
        if(ext->sb.mode & LV_SB_MODE_HIDE) sb_mode |= LV_SB_MODE_HIDE;
 8016354:	0752      	lsls	r2, r2, #29
        ext->sb.mode = sb_mode;
 8016356:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
        if(ext->sb.mode & LV_SB_MODE_HIDE) sb_mode |= LV_SB_MODE_HIDE;
 801635a:	bf48      	it	mi
 801635c:	f044 0404 	orrmi.w	r4, r4, #4
        ext->sb.mode = sb_mode;
 8016360:	f364 0284 	bfi	r2, r4, #2, #3
 8016364:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    ext->sb.hor_draw = 0;
 8016368:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    lv_page_sb_refresh(page);
 801636c:	4628      	mov	r0, r5
    ext->sb.ver_draw = 0;
 801636e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8016372:	f36f 0241 	bfc	r2, #1, #1
 8016376:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    lv_page_sb_refresh(page);
 801637a:	f7ff fc63 	bl	8015c44 <lv_page_sb_refresh>
    lv_obj_invalidate(page);
 801637e:	4628      	mov	r0, r5
}
 8016380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(page);
 8016384:	f7f2 bd58 	b.w	8008e38 <lv_obj_invalidate>
    if(sb_mode == LV_SB_MODE_HIDE) ext->sb.mode |= LV_SB_MODE_HIDE;                 /*Set the hidden flag*/
 8016388:	f042 0204 	orr.w	r2, r2, #4
 801638c:	f362 0184 	bfi	r1, r2, #2, #3
 8016390:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 8016394:	e7e8      	b.n	8016368 <lv_page_set_sb_mode+0x34>
    else if(sb_mode == LV_SB_MODE_UNHIDE) ext->sb.mode &= (~LV_SB_MODE_HIDE);       /*Clear the hidden flag*/
 8016396:	f002 0203 	and.w	r2, r2, #3
 801639a:	f362 0184 	bfi	r1, r2, #2, #3
 801639e:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 80163a2:	e7e1      	b.n	8016368 <lv_page_set_sb_mode+0x34>
 80163a4:	bd38      	pop	{r3, r4, r5, pc}
 80163a6:	bf00      	nop

080163a8 <lv_page_set_edge_flash>:
{
 80163a8:	b510      	push	{r4, lr}
 80163aa:	460c      	mov	r4, r1
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 80163ac:	f7f3 fc4a 	bl	8009c44 <lv_obj_get_ext_attr>
    ext->edge_flash.enabled = en ? 1 : 0;
 80163b0:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 80163b4:	f364 0300 	bfi	r3, r4, #0, #1
 80163b8:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 80163bc:	bd10      	pop	{r4, pc}
 80163be:	bf00      	nop

080163c0 <lv_page_set_style>:
{
 80163c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80163c2:	460c      	mov	r4, r1
 80163c4:	4616      	mov	r6, r2
 80163c6:	4607      	mov	r7, r0
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 80163c8:	f7f3 fc3c 	bl	8009c44 <lv_obj_get_ext_attr>
 80163cc:	4605      	mov	r5, r0
    switch(type) {
 80163ce:	2c03      	cmp	r4, #3
 80163d0:	d804      	bhi.n	80163dc <lv_page_set_style+0x1c>
 80163d2:	e8df f004 	tbb	[pc, r4]
 80163d6:	221c      	.short	0x221c
 80163d8:	0204      	.short	0x0204
            ext->edge_flash.style = style;
 80163da:	62c6      	str	r6, [r0, #44]	; 0x2c
 80163dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            ext->sb.style = style;
 80163de:	6106      	str	r6, [r0, #16]
            lv_area_set_height(&ext->sb.hor_area, ext->sb.style->body.padding.inner);
 80163e0:	3014      	adds	r0, #20
 80163e2:	f9b6 1024 	ldrsh.w	r1, [r6, #36]	; 0x24
 80163e6:	f7f9 faab 	bl	800f940 <lv_area_set_height>
            lv_area_set_width(&ext->sb.ver_area, ext->sb.style->body.padding.inner);
 80163ea:	692b      	ldr	r3, [r5, #16]
 80163ec:	f105 001c 	add.w	r0, r5, #28
 80163f0:	f9b3 1024 	ldrsh.w	r1, [r3, #36]	; 0x24
 80163f4:	f7f9 fa9e 	bl	800f934 <lv_area_set_width>
            lv_page_sb_refresh(page);
 80163f8:	4638      	mov	r0, r7
 80163fa:	f7ff fc23 	bl	8015c44 <lv_page_sb_refresh>
            lv_obj_refresh_ext_size(page);
 80163fe:	4638      	mov	r0, r7
 8016400:	f7f3 f9b6 	bl	8009770 <lv_obj_refresh_ext_size>
            lv_obj_invalidate(page);
 8016404:	4638      	mov	r0, r7
}
 8016406:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_obj_invalidate(page);
 801640a:	f7f2 bd15 	b.w	8008e38 <lv_obj_invalidate>
            lv_obj_set_style(page, style);
 801640e:	4631      	mov	r1, r6
 8016410:	4638      	mov	r0, r7
}
 8016412:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_obj_set_style(page, style);
 8016416:	f7f3 ba6d 	b.w	80098f4 <lv_obj_set_style>
            lv_obj_set_style(ext->scrl, style);
 801641a:	4631      	mov	r1, r6
 801641c:	6840      	ldr	r0, [r0, #4]
}
 801641e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_obj_set_style(ext->scrl, style);
 8016422:	f7f3 ba67 	b.w	80098f4 <lv_obj_set_style>
 8016426:	bf00      	nop

08016428 <lv_page_create>:
{
 8016428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801642c:	4680      	mov	r8, r0
 801642e:	460e      	mov	r6, r1
    lv_obj_t * new_page = lv_cont_create(par, copy);
 8016430:	f7fd fa72 	bl	8013918 <lv_cont_create>
    lv_mem_assert(new_page);
 8016434:	2800      	cmp	r0, #0
 8016436:	f000 8095 	beq.w	8016564 <lv_page_create+0x13c>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_page);
 801643a:	4d87      	ldr	r5, [pc, #540]	; (8016658 <lv_page_create+0x230>)
 801643c:	4604      	mov	r4, r0
 801643e:	686b      	ldr	r3, [r5, #4]
 8016440:	2b00      	cmp	r3, #0
 8016442:	f000 80f1 	beq.w	8016628 <lv_page_create+0x200>
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_func(new_page);
 8016446:	682b      	ldr	r3, [r5, #0]
 8016448:	2b00      	cmp	r3, #0
 801644a:	f000 80f4 	beq.w	8016636 <lv_page_create+0x20e>
    lv_page_ext_t * ext = lv_obj_allocate_ext_attr(new_page, sizeof(lv_page_ext_t));
 801644e:	2138      	movs	r1, #56	; 0x38
 8016450:	4620      	mov	r0, r4
 8016452:	f7f3 f985 	bl	8009760 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 8016456:	4605      	mov	r5, r0
 8016458:	2800      	cmp	r0, #0
 801645a:	f000 8084 	beq.w	8016566 <lv_page_create+0x13e>
    ext->edge_flash.enabled = 0;
 801645e:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
    ext->scrl = NULL;
 8016462:	2700      	movs	r7, #0
    ext->sb.hor_draw = 0;
 8016464:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
    ext->sb.mode = LV_SB_MODE_AUTO;
 8016468:	2003      	movs	r0, #3
    ext->arrow_scroll = 0;
 801646a:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    ext->edge_flash.right_ip = 0;
 801646e:	f002 02e8 	and.w	r2, r2, #232	; 0xe8
    ext->sb.mode = LV_SB_MODE_AUTO;
 8016472:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
    ext->sb.style = &lv_style_pretty;
 8016476:	f8df 9200 	ldr.w	r9, [pc, #512]	; 8016678 <lv_page_create+0x250>
    ext->edge_flash.right_ip = 0;
 801647a:	f367 02c3 	bfi	r2, r7, #3, #1
    ext->scroll_prop_ip = 0;
 801647e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    ext->sb.mode = LV_SB_MODE_AUTO;
 8016482:	f360 0184 	bfi	r1, r0, #2, #3
    ext->scrl = NULL;
 8016486:	606f      	str	r7, [r5, #4]
    ext->scroll_prop_ip = 0;
 8016488:	f367 0382 	bfi	r3, r7, #2, #1
    ext->edge_flash.right_ip = 0;
 801648c:	f885 2030 	strb.w	r2, [r5, #48]	; 0x30
    ext->edge_flash.style = &lv_style_plain_color;
 8016490:	4a72      	ldr	r2, [pc, #456]	; (801665c <lv_page_create+0x234>)
    ext->pr_action = NULL;
 8016492:	60ef      	str	r7, [r5, #12]
    ext->sb.mode = LV_SB_MODE_AUTO;
 8016494:	f885 1024 	strb.w	r1, [r5, #36]	; 0x24
    ext->rel_action = NULL;
 8016498:	60af      	str	r7, [r5, #8]
    ext->edge_flash.state = 0;
 801649a:	852f      	strh	r7, [r5, #40]	; 0x28
    ext->scroll_prop_ip = 0;
 801649c:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    ext->sb.style = &lv_style_pretty;
 80164a0:	f8c5 9010 	str.w	r9, [r5, #16]
    ext->edge_flash.style = &lv_style_plain_color;
 80164a4:	62ea      	str	r2, [r5, #44]	; 0x2c
    if(copy == NULL) {
 80164a6:	2e00      	cmp	r6, #0
 80164a8:	d05e      	beq.n	8016568 <lv_page_create+0x140>
        lv_page_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 80164aa:	4630      	mov	r0, r6
 80164ac:	f7f3 fbca 	bl	8009c44 <lv_obj_get_ext_attr>
 80164b0:	4680      	mov	r8, r0
        ext->scrl = lv_cont_create(new_page, copy_ext->scrl);
 80164b2:	4620      	mov	r0, r4
 80164b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80164b8:	f7fd fa2e 	bl	8013918 <lv_cont_create>
        lv_obj_set_signal_func(ext->scrl, lv_page_scrollable_signal);
 80164bc:	4968      	ldr	r1, [pc, #416]	; (8016660 <lv_page_create+0x238>)
        ext->scrl = lv_cont_create(new_page, copy_ext->scrl);
 80164be:	6068      	str	r0, [r5, #4]
        lv_obj_set_signal_func(ext->scrl, lv_page_scrollable_signal);
 80164c0:	f7f3 f94a 	bl	8009758 <lv_obj_set_signal_func>
        lv_page_set_pr_action(new_page, copy_ext->pr_action);
 80164c4:	f8d8 500c 	ldr.w	r5, [r8, #12]
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 80164c8:	4620      	mov	r0, r4
 80164ca:	f7f3 fbbb 	bl	8009c44 <lv_obj_get_ext_attr>
    ext->pr_action = pr_action;
 80164ce:	60c5      	str	r5, [r0, #12]
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 80164d0:	4620      	mov	r0, r4
        lv_page_set_rel_action(new_page, copy_ext->rel_action);
 80164d2:	f8d8 5008 	ldr.w	r5, [r8, #8]
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 80164d6:	f7f3 fbb5 	bl	8009c44 <lv_obj_get_ext_attr>
        lv_page_set_sb_mode(new_page, copy_ext->sb.mode);
 80164da:	f898 1024 	ldrb.w	r1, [r8, #36]	; 0x24
    ext->rel_action = rel_action;
 80164de:	6085      	str	r5, [r0, #8]
        lv_page_set_sb_mode(new_page, copy_ext->sb.mode);
 80164e0:	4620      	mov	r0, r4
 80164e2:	f3c1 0182 	ubfx	r1, r1, #2, #3
 80164e6:	f7ff ff25 	bl	8016334 <lv_page_set_sb_mode>
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 80164ea:	4620      	mov	r0, r4
        lv_page_set_arrow_scroll(new_page, copy_ext->arrow_scroll);
 80164ec:	f898 5034 	ldrb.w	r5, [r8, #52]	; 0x34
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 80164f0:	f7f3 fba8 	bl	8009c44 <lv_obj_get_ext_attr>
 80164f4:	4603      	mov	r3, r0
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 80164f6:	4630      	mov	r0, r6
        lv_page_set_arrow_scroll(new_page, copy_ext->arrow_scroll);
 80164f8:	f005 0501 	and.w	r5, r5, #1
    ext->arrow_scroll = en ? 1 : 0;
 80164fc:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8016500:	f365 0200 	bfi	r2, r5, #0, #1
 8016504:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8016508:	f7f3 fb9c 	bl	8009c44 <lv_obj_get_ext_attr>
            style = lv_obj_get_style(page);
 801650c:	4630      	mov	r0, r6
 801650e:	f7f3 fa7f 	bl	8009a10 <lv_obj_get_style>
        lv_page_set_style(new_page, LV_PAGE_STYLE_BG, lv_page_get_style(copy, LV_PAGE_STYLE_BG));
 8016512:	4639      	mov	r1, r7
 8016514:	4602      	mov	r2, r0
 8016516:	4620      	mov	r0, r4
 8016518:	f7ff ff52 	bl	80163c0 <lv_page_set_style>
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801651c:	4630      	mov	r0, r6
 801651e:	f7f3 fb91 	bl	8009c44 <lv_obj_get_ext_attr>
            style = lv_obj_get_style(ext->scrl);
 8016522:	6840      	ldr	r0, [r0, #4]
 8016524:	f7f3 fa74 	bl	8009a10 <lv_obj_get_style>
        lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, lv_page_get_style(copy, LV_PAGE_STYLE_SCRL));
 8016528:	2101      	movs	r1, #1
 801652a:	4602      	mov	r2, r0
 801652c:	4620      	mov	r0, r4
 801652e:	f7ff ff47 	bl	80163c0 <lv_page_set_style>
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8016532:	4630      	mov	r0, r6
 8016534:	f7f3 fb86 	bl	8009c44 <lv_obj_get_ext_attr>
        lv_page_set_style(new_page, LV_PAGE_STYLE_SB, lv_page_get_style(copy, LV_PAGE_STYLE_SB));
 8016538:	2102      	movs	r1, #2
 801653a:	6902      	ldr	r2, [r0, #16]
 801653c:	4620      	mov	r0, r4
 801653e:	f7ff ff3f 	bl	80163c0 <lv_page_set_style>
        lv_obj_set_signal_func(new_page, lv_page_signal);
 8016542:	4620      	mov	r0, r4
 8016544:	4947      	ldr	r1, [pc, #284]	; (8016664 <lv_page_create+0x23c>)
 8016546:	f7f3 f907 	bl	8009758 <lv_obj_set_signal_func>
        lv_obj_set_design_func(new_page, lv_page_design);
 801654a:	4947      	ldr	r1, [pc, #284]	; (8016668 <lv_page_create+0x240>)
 801654c:	4620      	mov	r0, r4
 801654e:	f7f3 f905 	bl	800975c <lv_obj_set_design_func>
        lv_obj_refresh_style(new_page);
 8016552:	4620      	mov	r0, r4
 8016554:	f7f3 f8a2 	bl	800969c <lv_obj_refresh_style>
    lv_page_sb_refresh(new_page);
 8016558:	4620      	mov	r0, r4
 801655a:	f7ff fb73 	bl	8015c44 <lv_page_sb_refresh>
}
 801655e:	4620      	mov	r0, r4
 8016560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016564:	e7fe      	b.n	8016564 <lv_page_create+0x13c>
 8016566:	e7fe      	b.n	8016566 <lv_page_create+0x13e>
        ext->scrl = lv_cont_create(new_page, NULL);
 8016568:	4631      	mov	r1, r6
 801656a:	4620      	mov	r0, r4
 801656c:	f7fd f9d4 	bl	8013918 <lv_cont_create>
        lv_obj_set_signal_func(ext->scrl, lv_page_scrollable_signal);
 8016570:	493b      	ldr	r1, [pc, #236]	; (8016660 <lv_page_create+0x238>)
        ext->scrl = lv_cont_create(new_page, NULL);
 8016572:	6068      	str	r0, [r5, #4]
        lv_obj_set_signal_func(ext->scrl, lv_page_scrollable_signal);
 8016574:	f7f3 f8f0 	bl	8009758 <lv_obj_set_signal_func>
        lv_obj_set_design_func(ext->scrl, lv_scrl_design);
 8016578:	6868      	ldr	r0, [r5, #4]
 801657a:	493c      	ldr	r1, [pc, #240]	; (801666c <lv_page_create+0x244>)
 801657c:	f7f3 f8ee 	bl	800975c <lv_obj_set_design_func>
        lv_obj_set_drag(ext->scrl, true);
 8016580:	6868      	ldr	r0, [r5, #4]
 8016582:	2101      	movs	r1, #1
 8016584:	f7f3 f8bc 	bl	8009700 <lv_obj_set_drag>
        lv_obj_set_drag_throw(ext->scrl, true);
 8016588:	6868      	ldr	r0, [r5, #4]
 801658a:	2101      	movs	r1, #1
 801658c:	f7f3 f8c6 	bl	800971c <lv_obj_set_drag_throw>
        lv_obj_set_protect(ext->scrl, LV_PROTECT_PARENT | LV_PROTECT_PRESS_LOST);
 8016590:	6868      	ldr	r0, [r5, #4]
 8016592:	2112      	movs	r1, #18
 8016594:	f7f3 f8d2 	bl	800973c <lv_obj_set_protect>
        lv_cont_set_fit(ext->scrl, false, true);
 8016598:	2201      	movs	r2, #1
 801659a:	6868      	ldr	r0, [r5, #4]
 801659c:	4631      	mov	r1, r6
 801659e:	f7fd fa2f 	bl	8013a00 <lv_cont_set_fit>
        lv_obj_set_signal_func(new_page, lv_page_signal);
 80165a2:	4930      	ldr	r1, [pc, #192]	; (8016664 <lv_page_create+0x23c>)
 80165a4:	4620      	mov	r0, r4
 80165a6:	f7f3 f8d7 	bl	8009758 <lv_obj_set_signal_func>
        lv_obj_set_design_func(new_page, lv_page_design);
 80165aa:	492f      	ldr	r1, [pc, #188]	; (8016668 <lv_page_create+0x240>)
 80165ac:	4620      	mov	r0, r4
 80165ae:	f7f3 f8d5 	bl	800975c <lv_obj_set_design_func>
        lv_page_set_sb_mode(new_page, ext->sb.mode);
 80165b2:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
 80165b6:	4620      	mov	r0, r4
 80165b8:	f3c1 0182 	ubfx	r1, r1, #2, #3
 80165bc:	f7ff feba 	bl	8016334 <lv_page_set_sb_mode>
        lv_theme_t * th = lv_theme_get_current();
 80165c0:	f003 f82a 	bl	8019618 <lv_theme_get_current>
        if(th) {
 80165c4:	4605      	mov	r5, r0
 80165c6:	b1d0      	cbz	r0, 80165fe <lv_page_create+0x1d6>
            if(par == NULL) { /*Different styles if it is screen*/
 80165c8:	f1b8 0f00 	cmp.w	r8, #0
 80165cc:	d038      	beq.n	8016640 <lv_page_create+0x218>
                lv_page_set_style(new_page, LV_PAGE_STYLE_BG, th->page.bg);
 80165ce:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
 80165d2:	4631      	mov	r1, r6
 80165d4:	4620      	mov	r0, r4
 80165d6:	f7ff fef3 	bl	80163c0 <lv_page_set_style>
                lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, th->page.scrl);
 80165da:	f8d5 20c8 	ldr.w	r2, [r5, #200]	; 0xc8
 80165de:	2101      	movs	r1, #1
 80165e0:	4620      	mov	r0, r4
 80165e2:	f7ff feed 	bl	80163c0 <lv_page_set_style>
            lv_page_set_style(new_page, LV_PAGE_STYLE_SB, th->page.sb);
 80165e6:	f8d5 20cc 	ldr.w	r2, [r5, #204]	; 0xcc
 80165ea:	2102      	movs	r1, #2
 80165ec:	4620      	mov	r0, r4
 80165ee:	f7ff fee7 	bl	80163c0 <lv_page_set_style>
    lv_page_sb_refresh(new_page);
 80165f2:	4620      	mov	r0, r4
 80165f4:	f7ff fb26 	bl	8015c44 <lv_page_sb_refresh>
}
 80165f8:	4620      	mov	r0, r4
 80165fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            lv_page_set_style(new_page, LV_PAGE_STYLE_BG, &lv_style_pretty_color);
 80165fe:	4631      	mov	r1, r6
 8016600:	4620      	mov	r0, r4
 8016602:	4a1b      	ldr	r2, [pc, #108]	; (8016670 <lv_page_create+0x248>)
 8016604:	f7ff fedc 	bl	80163c0 <lv_page_set_style>
            lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, &lv_style_pretty);
 8016608:	464a      	mov	r2, r9
 801660a:	4620      	mov	r0, r4
 801660c:	2101      	movs	r1, #1
 801660e:	f7ff fed7 	bl	80163c0 <lv_page_set_style>
            lv_page_set_style(new_page, LV_PAGE_STYLE_SB, &lv_style_pretty_color);
 8016612:	4a17      	ldr	r2, [pc, #92]	; (8016670 <lv_page_create+0x248>)
 8016614:	2102      	movs	r1, #2
 8016616:	4620      	mov	r0, r4
 8016618:	f7ff fed2 	bl	80163c0 <lv_page_set_style>
    lv_page_sb_refresh(new_page);
 801661c:	4620      	mov	r0, r4
 801661e:	f7ff fb11 	bl	8015c44 <lv_page_sb_refresh>
}
 8016622:	4620      	mov	r0, r4
 8016624:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_page);
 8016628:	f7f3 fb08 	bl	8009c3c <lv_obj_get_signal_func>
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_func(new_page);
 801662c:	682b      	ldr	r3, [r5, #0]
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_page);
 801662e:	6068      	str	r0, [r5, #4]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_func(new_page);
 8016630:	2b00      	cmp	r3, #0
 8016632:	f47f af0c 	bne.w	801644e <lv_page_create+0x26>
 8016636:	4620      	mov	r0, r4
 8016638:	f7f3 fb02 	bl	8009c40 <lv_obj_get_design_func>
 801663c:	6028      	str	r0, [r5, #0]
 801663e:	e706      	b.n	801644e <lv_page_create+0x26>
                lv_page_set_style(new_page, LV_PAGE_STYLE_BG, th->bg);
 8016640:	4641      	mov	r1, r8
 8016642:	6802      	ldr	r2, [r0, #0]
 8016644:	4620      	mov	r0, r4
 8016646:	f7ff febb 	bl	80163c0 <lv_page_set_style>
                lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, &lv_style_transp);
 801664a:	4a0a      	ldr	r2, [pc, #40]	; (8016674 <lv_page_create+0x24c>)
 801664c:	2101      	movs	r1, #1
 801664e:	4620      	mov	r0, r4
 8016650:	f7ff feb6 	bl	80163c0 <lv_page_set_style>
 8016654:	e7c7      	b.n	80165e6 <lv_page_create+0x1be>
 8016656:	bf00      	nop
 8016658:	200174f4 	.word	0x200174f4
 801665c:	20017fa0 	.word	0x20017fa0
 8016660:	08016be5 	.word	0x08016be5
 8016664:	080168d9 	.word	0x080168d9
 8016668:	08016099 	.word	0x08016099
 801666c:	0801600d 	.word	0x0801600d
 8016670:	20017c40 	.word	0x20017c40
 8016674:	20017c88 	.word	0x20017c88
 8016678:	20017d60 	.word	0x20017d60

0801667c <lv_page_get_scrl>:
{
 801667c:	b508      	push	{r3, lr}
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801667e:	f7f3 fae1 	bl	8009c44 <lv_obj_get_ext_attr>
}
 8016682:	6840      	ldr	r0, [r0, #4]
 8016684:	bd08      	pop	{r3, pc}
 8016686:	bf00      	nop

08016688 <lv_page_get_edge_flash>:
{
 8016688:	b508      	push	{r3, lr}
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801668a:	f7f3 fadb 	bl	8009c44 <lv_obj_get_ext_attr>
    return ext->edge_flash.enabled == 0 ? false : true;
 801668e:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
}
 8016692:	f000 0001 	and.w	r0, r0, #1
 8016696:	bd08      	pop	{r3, pc}

08016698 <lv_page_get_style>:
{
 8016698:	b538      	push	{r3, r4, r5, lr}
 801669a:	460c      	mov	r4, r1
 801669c:	4605      	mov	r5, r0
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801669e:	f7f3 fad1 	bl	8009c44 <lv_obj_get_ext_attr>
    switch(type) {
 80166a2:	2c03      	cmp	r4, #3
 80166a4:	d811      	bhi.n	80166ca <lv_page_get_style+0x32>
 80166a6:	e8df f004 	tbb	[pc, r4]
 80166aa:	060b      	.short	0x060b
 80166ac:	0204      	.short	0x0204
            style = ext->edge_flash.style;
 80166ae:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
            break;
 80166b0:	bd38      	pop	{r3, r4, r5, pc}
            style = ext->sb.style;
 80166b2:	6900      	ldr	r0, [r0, #16]
            break;
 80166b4:	bd38      	pop	{r3, r4, r5, pc}
            style = lv_obj_get_style(ext->scrl);
 80166b6:	6840      	ldr	r0, [r0, #4]
}
 80166b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            style = lv_obj_get_style(ext->scrl);
 80166bc:	f7f3 b9a8 	b.w	8009a10 <lv_obj_get_style>
            style = lv_obj_get_style(page);
 80166c0:	4628      	mov	r0, r5
}
 80166c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            style = lv_obj_get_style(page);
 80166c6:	f7f3 b9a3 	b.w	8009a10 <lv_obj_get_style>
            style = NULL;
 80166ca:	2000      	movs	r0, #0
}
 80166cc:	bd38      	pop	{r3, r4, r5, pc}
 80166ce:	bf00      	nop

080166d0 <lv_page_glue_obj>:
{
 80166d0:	b538      	push	{r3, r4, r5, lr}
 80166d2:	4604      	mov	r4, r0
 80166d4:	460d      	mov	r5, r1
    lv_obj_set_drag_parent(obj, glue);
 80166d6:	f7f3 f829 	bl	800972c <lv_obj_set_drag_parent>
    lv_obj_set_drag(obj, glue);
 80166da:	4629      	mov	r1, r5
 80166dc:	4620      	mov	r0, r4
}
 80166de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_set_drag(obj, glue);
 80166e2:	f7f3 b80d 	b.w	8009700 <lv_obj_set_drag>
 80166e6:	bf00      	nop

080166e8 <lv_page_focus>:
{
 80166e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166ec:	4682      	mov	sl, r0
 80166ee:	b08b      	sub	sp, #44	; 0x2c
 80166f0:	4616      	mov	r6, r2
 80166f2:	460c      	mov	r4, r1
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 80166f4:	f7f3 faa6 	bl	8009c44 <lv_obj_get_ext_attr>
    lv_anim_del(page, (lv_anim_fp_t)lv_obj_set_y);
 80166f8:	4946      	ldr	r1, [pc, #280]	; (8016814 <lv_page_focus+0x12c>)
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 80166fa:	4605      	mov	r5, r0
    lv_anim_del(page, (lv_anim_fp_t)lv_obj_set_y);
 80166fc:	4650      	mov	r0, sl
 80166fe:	f7f9 f865 	bl	800f7cc <lv_anim_del>
    lv_anim_del(page, (lv_anim_fp_t)lv_obj_set_pos);
 8016702:	4945      	ldr	r1, [pc, #276]	; (8016818 <lv_page_focus+0x130>)
 8016704:	4650      	mov	r0, sl
 8016706:	f7f9 f861 	bl	800f7cc <lv_anim_del>
    lv_anim_del(ext->scrl, (lv_anim_fp_t)lv_obj_set_y);
 801670a:	4942      	ldr	r1, [pc, #264]	; (8016814 <lv_page_focus+0x12c>)
 801670c:	6868      	ldr	r0, [r5, #4]
 801670e:	f7f9 f85d 	bl	800f7cc <lv_anim_del>
    lv_anim_del(ext->scrl, (lv_anim_fp_t)lv_obj_set_pos);
 8016712:	4941      	ldr	r1, [pc, #260]	; (8016818 <lv_page_focus+0x130>)
 8016714:	6868      	ldr	r0, [r5, #4]
 8016716:	f7f9 f859 	bl	800f7cc <lv_anim_del>
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801671a:	4650      	mov	r0, sl
 801671c:	f7f3 fa92 	bl	8009c44 <lv_obj_get_ext_attr>
            style = lv_obj_get_style(page);
 8016720:	4650      	mov	r0, sl
 8016722:	f7f3 f975 	bl	8009a10 <lv_obj_get_style>
 8016726:	4680      	mov	r8, r0
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8016728:	4650      	mov	r0, sl
 801672a:	f7f3 fa8b 	bl	8009c44 <lv_obj_get_ext_attr>
            style = lv_obj_get_style(ext->scrl);
 801672e:	6840      	ldr	r0, [r0, #4]
 8016730:	f7f3 f96e 	bl	8009a10 <lv_obj_get_style>
    lv_coord_t obj_y = obj->coords.y1 - ext->scrl->coords.y1;
 8016734:	686b      	ldr	r3, [r5, #4]
            style = lv_obj_get_style(ext->scrl);
 8016736:	4681      	mov	r9, r0
    lv_coord_t obj_h = lv_obj_get_height(obj);
 8016738:	4620      	mov	r0, r4
    lv_coord_t obj_y = obj->coords.y1 - ext->scrl->coords.y1;
 801673a:	8a5f      	ldrh	r7, [r3, #18]
 801673c:	8a64      	ldrh	r4, [r4, #18]
    lv_coord_t obj_h = lv_obj_get_height(obj);
 801673e:	f7f3 f961 	bl	8009a04 <lv_obj_get_height>
 8016742:	4683      	mov	fp, r0
    lv_coord_t scrlable_y = lv_obj_get_y(ext->scrl);
 8016744:	6868      	ldr	r0, [r5, #4]
    lv_coord_t obj_y = obj->coords.y1 - ext->scrl->coords.y1;
 8016746:	1be4      	subs	r4, r4, r7
    lv_coord_t scrlable_y = lv_obj_get_y(ext->scrl);
 8016748:	f7f3 f950 	bl	80099ec <lv_obj_get_y>
    lv_coord_t obj_y = obj->coords.y1 - ext->scrl->coords.y1;
 801674c:	b2a7      	uxth	r7, r4
    lv_coord_t scrlable_y = lv_obj_get_y(ext->scrl);
 801674e:	4604      	mov	r4, r0
    lv_coord_t page_h = lv_obj_get_height(page);
 8016750:	4650      	mov	r0, sl
 8016752:	f7f3 f957 	bl	8009a04 <lv_obj_get_height>
    lv_coord_t top_err = -(scrlable_y + obj_y);
 8016756:	193b      	adds	r3, r7, r4
    if((obj_h <= page_h && top_err > 0) ||
 8016758:	4583      	cmp	fp, r0
    lv_coord_t top_err = -(scrlable_y + obj_y);
 801675a:	b29b      	uxth	r3, r3
    if((obj_h <= page_h && top_err > 0) ||
 801675c:	bfcc      	ite	gt
 801675e:	2100      	movgt	r1, #0
 8016760:	2101      	movle	r1, #1
    lv_coord_t top_err = -(scrlable_y + obj_y);
 8016762:	425a      	negs	r2, r3
 8016764:	b212      	sxth	r2, r2
    if((obj_h <= page_h && top_err > 0) ||
 8016766:	2a00      	cmp	r2, #0
 8016768:	dd29      	ble.n	80167be <lv_page_focus+0xd6>
 801676a:	b341      	cbz	r1, 80167be <lv_page_focus+0xd6>
        scrlable_y = -(obj_y - style_scrl->body.padding.ver - style->body.padding.ver);
 801676c:	f8b9 1020 	ldrh.w	r1, [r9, #32]
        scrlable_y += style_scrl->body.padding.ver;
 8016770:	f8b8 4020 	ldrh.w	r4, [r8, #32]
 8016774:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8016778:	1be4      	subs	r4, r4, r7
 801677a:	b224      	sxth	r4, r4
    if(anim_time == 0) {
 801677c:	2e00      	cmp	r6, #0
 801677e:	d03d      	beq.n	80167fc <lv_page_focus+0x114>
        a.act_time = 0;
 8016780:	2700      	movs	r7, #0
        a.start = lv_obj_get_y(ext->scrl);
 8016782:	6868      	ldr	r0, [r5, #4]
        a.act_time = 0;
 8016784:	f8ad 701e 	strh.w	r7, [sp, #30]
        a.start = lv_obj_get_y(ext->scrl);
 8016788:	f7f3 f930 	bl	80099ec <lv_obj_get_y>
        a.playback = 0;
 801678c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
        a.var = ext->scrl;
 8016790:	6869      	ldr	r1, [r5, #4]
        a.repeat = 0;
 8016792:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
        a.path = lv_anim_path_linear;
 8016796:	4d21      	ldr	r5, [pc, #132]	; (801681c <lv_page_focus+0x134>)
        a.fp = (lv_anim_fp_t) lv_obj_set_y;
 8016798:	4a1e      	ldr	r2, [pc, #120]	; (8016814 <lv_page_focus+0x12c>)
        a.repeat = 0;
 801679a:	f367 0341 	bfi	r3, r7, #1, #1
        a.start = lv_obj_get_y(ext->scrl);
 801679e:	9005      	str	r0, [sp, #20]
        lv_anim_create(&a);
 80167a0:	a801      	add	r0, sp, #4
        a.end_cb = NULL;
 80167a2:	9703      	str	r7, [sp, #12]
        a.var = ext->scrl;
 80167a4:	9101      	str	r1, [sp, #4]
        a.end = scrlable_y;
 80167a6:	9406      	str	r4, [sp, #24]
        a.time = anim_time;
 80167a8:	f8ad 601c 	strh.w	r6, [sp, #28]
        a.repeat = 0;
 80167ac:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        a.path = lv_anim_path_linear;
 80167b0:	9504      	str	r5, [sp, #16]
        a.fp = (lv_anim_fp_t) lv_obj_set_y;
 80167b2:	9202      	str	r2, [sp, #8]
        lv_anim_create(&a);
 80167b4:	f7f9 f844 	bl	800f840 <lv_anim_create>
}
 80167b8:	b00b      	add	sp, #44	; 0x2c
 80167ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            (obj_h > page_h && top_err < bot_err)) {
 80167be:	4583      	cmp	fp, r0
    lv_coord_t bot_err = scrlable_y + obj_y + obj_h - page_h;
 80167c0:	fa1f fe8b 	uxth.w	lr, fp
 80167c4:	b280      	uxth	r0, r0
            (obj_h > page_h && top_err < bot_err)) {
 80167c6:	bfd4      	ite	le
 80167c8:	2400      	movle	r4, #0
 80167ca:	2401      	movgt	r4, #1
    lv_coord_t bot_err = scrlable_y + obj_y + obj_h - page_h;
 80167cc:	ebae 0c00 	sub.w	ip, lr, r0
 80167d0:	4463      	add	r3, ip
 80167d2:	b21b      	sxth	r3, r3
    if((obj_h <= page_h && top_err > 0) ||
 80167d4:	429a      	cmp	r2, r3
 80167d6:	da01      	bge.n	80167dc <lv_page_focus+0xf4>
 80167d8:	2c00      	cmp	r4, #0
 80167da:	d1c7      	bne.n	801676c <lv_page_focus+0x84>
    else if((obj_h <= page_h && bot_err > 0) ||
 80167dc:	2b00      	cmp	r3, #0
 80167de:	dd14      	ble.n	801680a <lv_page_focus+0x122>
 80167e0:	b199      	cbz	r1, 801680a <lv_page_focus+0x122>
        scrlable_y = -(obj_y + style_scrl->body.padding.ver + style->body.padding.ver);
 80167e2:	f8b9 4020 	ldrh.w	r4, [r9, #32]
        scrlable_y += page_h - obj_h;
 80167e6:	eba0 000e 	sub.w	r0, r0, lr
 80167ea:	f8b8 3020 	ldrh.w	r3, [r8, #32]
 80167ee:	1b00      	subs	r0, r0, r4
 80167f0:	441c      	add	r4, r3
 80167f2:	1b00      	subs	r0, r0, r4
 80167f4:	1bc4      	subs	r4, r0, r7
 80167f6:	b224      	sxth	r4, r4
    if(anim_time == 0) {
 80167f8:	2e00      	cmp	r6, #0
 80167fa:	d1c1      	bne.n	8016780 <lv_page_focus+0x98>
        lv_obj_set_y(ext->scrl, scrlable_y);
 80167fc:	4621      	mov	r1, r4
 80167fe:	6868      	ldr	r0, [r5, #4]
 8016800:	f7f2 fd48 	bl	8009294 <lv_obj_set_y>
}
 8016804:	b00b      	add	sp, #44	; 0x2c
 8016806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if((obj_h <= page_h && bot_err > 0) ||
 801680a:	429a      	cmp	r2, r3
 801680c:	dbd4      	blt.n	80167b8 <lv_page_focus+0xd0>
 801680e:	2c00      	cmp	r4, #0
 8016810:	d1e7      	bne.n	80167e2 <lv_page_focus+0xfa>
 8016812:	e7d1      	b.n	80167b8 <lv_page_focus+0xd0>
 8016814:	08009295 	.word	0x08009295
 8016818:	08008f95 	.word	0x08008f95
 801681c:	0800f8dd 	.word	0x0800f8dd

08016820 <lv_page_scroll_hor>:
{
 8016820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016822:	b08b      	sub	sp, #44	; 0x2c
 8016824:	460c      	mov	r4, r1
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8016826:	f7f3 fa0d 	bl	8009c44 <lv_obj_get_ext_attr>
    return ext->scrl;
 801682a:	6843      	ldr	r3, [r0, #4]
    a.fp = (lv_anim_fp_t)lv_obj_set_x;
 801682c:	4f11      	ldr	r7, [pc, #68]	; (8016874 <lv_page_scroll_hor+0x54>)
    a.time = LV_PAGE_SCROLL_ANIM_TIME;
 801682e:	25c8      	movs	r5, #200	; 0xc8
    a.start = lv_obj_get_x(scrl);
 8016830:	4618      	mov	r0, r3
    a.var = scrl;
 8016832:	9301      	str	r3, [sp, #4]
    a.start = lv_obj_get_x(scrl);
 8016834:	f7f3 f8d4 	bl	80099e0 <lv_obj_get_x>
    a.playback = 0;
 8016838:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    a.end_cb = NULL;
 801683c:	2300      	movs	r3, #0
    a.start = lv_obj_get_x(scrl);
 801683e:	4601      	mov	r1, r0
    a.repeat = 0;
 8016840:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    a.end = a.start + dist;
 8016844:	4404      	add	r4, r0
    a.path = lv_anim_path_linear;
 8016846:	4e0c      	ldr	r6, [pc, #48]	; (8016878 <lv_page_scroll_hor+0x58>)
    lv_anim_create(&a);
 8016848:	a801      	add	r0, sp, #4
    a.repeat = 0;
 801684a:	f363 0241 	bfi	r2, r3, #1, #1
    a.end = a.start + dist;
 801684e:	9406      	str	r4, [sp, #24]
    a.start = lv_obj_get_x(scrl);
 8016850:	9105      	str	r1, [sp, #20]
    a.repeat = 0;
 8016852:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
    a.end_cb = NULL;
 8016856:	9303      	str	r3, [sp, #12]
    a.act_time = 0;
 8016858:	f8ad 301e 	strh.w	r3, [sp, #30]
    a.playback_pause = 0;
 801685c:	f8ad 3020 	strh.w	r3, [sp, #32]
    a.repeat_pause = 0;
 8016860:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    a.fp = (lv_anim_fp_t)lv_obj_set_x;
 8016864:	9702      	str	r7, [sp, #8]
    a.path = lv_anim_path_linear;
 8016866:	9604      	str	r6, [sp, #16]
    a.time = LV_PAGE_SCROLL_ANIM_TIME;
 8016868:	f8ad 501c 	strh.w	r5, [sp, #28]
    lv_anim_create(&a);
 801686c:	f7f8 ffe8 	bl	800f840 <lv_anim_create>
}
 8016870:	b00b      	add	sp, #44	; 0x2c
 8016872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016874:	08009281 	.word	0x08009281
 8016878:	0800f8dd 	.word	0x0800f8dd

0801687c <lv_page_scroll_ver>:
{
 801687c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801687e:	b08b      	sub	sp, #44	; 0x2c
 8016880:	460c      	mov	r4, r1
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8016882:	f7f3 f9df 	bl	8009c44 <lv_obj_get_ext_attr>
    return ext->scrl;
 8016886:	6843      	ldr	r3, [r0, #4]
    a.fp = (lv_anim_fp_t)lv_obj_set_y;
 8016888:	4f11      	ldr	r7, [pc, #68]	; (80168d0 <lv_page_scroll_ver+0x54>)
    a.time = LV_PAGE_SCROLL_ANIM_TIME;
 801688a:	25c8      	movs	r5, #200	; 0xc8
    a.start = lv_obj_get_y(scrl);
 801688c:	4618      	mov	r0, r3
    a.var = scrl;
 801688e:	9301      	str	r3, [sp, #4]
    a.start = lv_obj_get_y(scrl);
 8016890:	f7f3 f8ac 	bl	80099ec <lv_obj_get_y>
    a.playback = 0;
 8016894:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    a.end_cb = NULL;
 8016898:	2300      	movs	r3, #0
    a.start = lv_obj_get_y(scrl);
 801689a:	4601      	mov	r1, r0
    a.repeat = 0;
 801689c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    a.end = a.start + dist;
 80168a0:	4404      	add	r4, r0
    a.path = lv_anim_path_linear;
 80168a2:	4e0c      	ldr	r6, [pc, #48]	; (80168d4 <lv_page_scroll_ver+0x58>)
    lv_anim_create(&a);
 80168a4:	a801      	add	r0, sp, #4
    a.repeat = 0;
 80168a6:	f363 0241 	bfi	r2, r3, #1, #1
    a.end = a.start + dist;
 80168aa:	9406      	str	r4, [sp, #24]
    a.start = lv_obj_get_y(scrl);
 80168ac:	9105      	str	r1, [sp, #20]
    a.repeat = 0;
 80168ae:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
    a.end_cb = NULL;
 80168b2:	9303      	str	r3, [sp, #12]
    a.act_time = 0;
 80168b4:	f8ad 301e 	strh.w	r3, [sp, #30]
    a.playback_pause = 0;
 80168b8:	f8ad 3020 	strh.w	r3, [sp, #32]
    a.repeat_pause = 0;
 80168bc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    a.fp = (lv_anim_fp_t)lv_obj_set_y;
 80168c0:	9702      	str	r7, [sp, #8]
    a.path = lv_anim_path_linear;
 80168c2:	9604      	str	r6, [sp, #16]
    a.time = LV_PAGE_SCROLL_ANIM_TIME;
 80168c4:	f8ad 501c 	strh.w	r5, [sp, #28]
    lv_anim_create(&a);
 80168c8:	f7f8 ffba 	bl	800f840 <lv_anim_create>
}
 80168cc:	b00b      	add	sp, #44	; 0x2c
 80168ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80168d0:	08009295 	.word	0x08009295
 80168d4:	0800f8dd 	.word	0x0800f8dd

080168d8 <lv_page_signal>:
    res = ancestor_signal(page, sign, param);
 80168d8:	4ba6      	ldr	r3, [pc, #664]	; (8016b74 <lv_page_signal+0x29c>)
{
 80168da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    res = ancestor_signal(page, sign, param);
 80168de:	685b      	ldr	r3, [r3, #4]
{
 80168e0:	4606      	mov	r6, r0
 80168e2:	460d      	mov	r5, r1
 80168e4:	4617      	mov	r7, r2
    res = ancestor_signal(page, sign, param);
 80168e6:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 80168e8:	2801      	cmp	r0, #1
    res = ancestor_signal(page, sign, param);
 80168ea:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
 80168ec:	d002      	beq.n	80168f4 <lv_page_signal+0x1c>
}
 80168ee:	4620      	mov	r0, r4
 80168f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 80168f4:	4630      	mov	r0, r6
 80168f6:	f7f3 f9a5 	bl	8009c44 <lv_obj_get_ext_attr>
 80168fa:	4680      	mov	r8, r0
    lv_style_t * style = lv_obj_get_style(page);
 80168fc:	4630      	mov	r0, r6
 80168fe:	f7f3 f887 	bl	8009a10 <lv_obj_get_style>
    if(sign == LV_SIGNAL_CHILD_CHG) { /*Automatically move children to the scrollable object*/
 8016902:	2d01      	cmp	r5, #1
    lv_style_t * style = lv_obj_get_style(page);
 8016904:	4681      	mov	r9, r0
    if(sign == LV_SIGNAL_CHILD_CHG) { /*Automatically move children to the scrollable object*/
 8016906:	d05e      	beq.n	80169c6 <lv_page_signal+0xee>
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 8016908:	2d03      	cmp	r5, #3
 801690a:	d07a      	beq.n	8016a02 <lv_page_signal+0x12a>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 801690c:	2d02      	cmp	r5, #2
 801690e:	d02d      	beq.n	801696c <lv_page_signal+0x94>
    } else if(sign == LV_SIGNAL_PRESSED) {
 8016910:	2d08      	cmp	r5, #8
 8016912:	d050      	beq.n	80169b6 <lv_page_signal+0xde>
    } else if(sign == LV_SIGNAL_RELEASED) {
 8016914:	2d0b      	cmp	r5, #11
 8016916:	f000 80be 	beq.w	8016a96 <lv_page_signal+0x1be>
    } else if(sign == LV_SIGNAL_REFR_EXT_SIZE) {
 801691a:	2d04      	cmp	r5, #4
 801691c:	d013      	beq.n	8016946 <lv_page_signal+0x6e>
    } else if(sign == LV_SIGNAL_CONTROLL) {
 801691e:	2d12      	cmp	r5, #18
 8016920:	f000 808d 	beq.w	8016a3e <lv_page_signal+0x166>
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 8016924:	2d14      	cmp	r5, #20
 8016926:	f000 80fd 	beq.w	8016b24 <lv_page_signal+0x24c>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801692a:	2d06      	cmp	r5, #6
 801692c:	d1df      	bne.n	80168ee <lv_page_signal+0x16>
 801692e:	1f3a      	subs	r2, r7, #4
 8016930:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 8016932:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8016936:	b111      	cbz	r1, 801693e <lv_page_signal+0x66>
 8016938:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) {  /*Find the last set data*/
 801693a:	2b07      	cmp	r3, #7
 801693c:	d1f9      	bne.n	8016932 <lv_page_signal+0x5a>
        buf->type[i] = "lv_page";
 801693e:	4a8e      	ldr	r2, [pc, #568]	; (8016b78 <lv_page_signal+0x2a0>)
 8016940:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 8016944:	e7d3      	b.n	80168ee <lv_page_signal+0x16>
        if(page->ext_size < (-ext->sb.style->body.padding.hor)) page->ext_size = -ext->sb.style->body.padding.hor;
 8016946:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801694a:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
 801694e:	f9b1 3022 	ldrsh.w	r3, [r1, #34]	; 0x22
 8016952:	425b      	negs	r3, r3
 8016954:	429a      	cmp	r2, r3
 8016956:	da02      	bge.n	801695e <lv_page_signal+0x86>
 8016958:	b21b      	sxth	r3, r3
 801695a:	461a      	mov	r2, r3
 801695c:	86b3      	strh	r3, [r6, #52]	; 0x34
        if(page->ext_size < (-ext->sb.style->body.padding.ver)) page->ext_size = -ext->sb.style->body.padding.ver;
 801695e:	f9b1 3020 	ldrsh.w	r3, [r1, #32]
 8016962:	425b      	negs	r3, r3
 8016964:	4293      	cmp	r3, r2
 8016966:	ddc2      	ble.n	80168ee <lv_page_signal+0x16>
 8016968:	86b3      	strh	r3, [r6, #52]	; 0x34
 801696a:	e7c0      	b.n	80168ee <lv_page_signal+0x16>
        if(ext->scrl != NULL && (lv_obj_get_width(page) != lv_area_get_width(param) ||
 801696c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016970:	2b00      	cmp	r3, #0
 8016972:	d0bc      	beq.n	80168ee <lv_page_signal+0x16>
 8016974:	4630      	mov	r0, r6
 8016976:	f7f3 f83f 	bl	80099f8 <lv_obj_get_width>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 801697a:	88bb      	ldrh	r3, [r7, #4]
 801697c:	883a      	ldrh	r2, [r7, #0]
 801697e:	3301      	adds	r3, #1
 8016980:	1a9b      	subs	r3, r3, r2
 8016982:	b21b      	sxth	r3, r3
 8016984:	4298      	cmp	r0, r3
 8016986:	f000 8092 	beq.w	8016aae <lv_page_signal+0x1d6>
            if(lv_cont_get_hor_fit(ext->scrl) == false) {
 801698a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801698e:	f7fd f85b 	bl	8013a48 <lv_cont_get_hor_fit>
 8016992:	2800      	cmp	r0, #0
 8016994:	f000 8097 	beq.w	8016ac6 <lv_page_signal+0x1ee>
            ext->scrl->signal_func(ext->scrl, LV_SIGNAL_CORD_CHG, &ext->scrl->coords);
 8016998:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801699c:	2102      	movs	r1, #2
 801699e:	6983      	ldr	r3, [r0, #24]
 80169a0:	f100 0210 	add.w	r2, r0, #16
 80169a4:	4798      	blx	r3
            if(ext->sb.hor_draw || ext->sb.ver_draw) lv_page_sb_refresh(page);
 80169a6:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
 80169aa:	079d      	lsls	r5, r3, #30
 80169ac:	d09f      	beq.n	80168ee <lv_page_signal+0x16>
 80169ae:	4630      	mov	r0, r6
 80169b0:	f7ff f948 	bl	8015c44 <lv_page_sb_refresh>
 80169b4:	e79b      	b.n	80168ee <lv_page_signal+0x16>
        if(ext->pr_action != NULL) {
 80169b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	d097      	beq.n	80168ee <lv_page_signal+0x16>
                res = ext->rel_action(page);
 80169be:	4630      	mov	r0, r6
}
 80169c0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                res = ext->rel_action(page);
 80169c4:	4718      	bx	r3
        child = lv_obj_get_child(page, NULL);
 80169c6:	2100      	movs	r1, #0
 80169c8:	4630      	mov	r0, r6
 80169ca:	f7f2 ff67 	bl	800989c <lv_obj_get_child>
        while(child != NULL) {
 80169ce:	4605      	mov	r5, r0
 80169d0:	2d00      	cmp	r5, #0
 80169d2:	d08c      	beq.n	80168ee <lv_page_signal+0x16>
            if(lv_obj_is_protected(child, LV_PROTECT_PARENT) == false) {
 80169d4:	2102      	movs	r1, #2
 80169d6:	4628      	mov	r0, r5
 80169d8:	f7f3 f928 	bl	8009c2c <lv_obj_is_protected>
                child = lv_obj_get_child(page, child); /*Get the next child before move this*/
 80169dc:	4629      	mov	r1, r5
            if(lv_obj_is_protected(child, LV_PROTECT_PARENT) == false) {
 80169de:	b950      	cbnz	r0, 80169f6 <lv_page_signal+0x11e>
                child = lv_obj_get_child(page, child); /*Get the next child before move this*/
 80169e0:	4630      	mov	r0, r6
 80169e2:	f7f2 ff5b 	bl	800989c <lv_obj_get_child>
 80169e6:	4607      	mov	r7, r0
                lv_obj_set_parent(tmp, ext->scrl);
 80169e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80169ec:	4628      	mov	r0, r5
 80169ee:	f7f2 fc0f 	bl	8009210 <lv_obj_set_parent>
                child = lv_obj_get_child(page, child); /*Get the next child before move this*/
 80169f2:	463d      	mov	r5, r7
 80169f4:	e7ec      	b.n	80169d0 <lv_page_signal+0xf8>
                child = lv_obj_get_child(page, child);
 80169f6:	4629      	mov	r1, r5
 80169f8:	4630      	mov	r0, r6
 80169fa:	f7f2 ff4f 	bl	800989c <lv_obj_get_child>
 80169fe:	4605      	mov	r5, r0
 8016a00:	e7e6      	b.n	80169d0 <lv_page_signal+0xf8>
        if(lv_cont_get_hor_fit(ext->scrl) == false) {
 8016a02:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8016a06:	f7fd f81f 	bl	8013a48 <lv_cont_get_hor_fit>
 8016a0a:	2800      	cmp	r0, #0
 8016a0c:	d13b      	bne.n	8016a86 <lv_page_signal+0x1ae>
            lv_obj_set_width(ext->scrl, lv_obj_get_width(page) - 2 * style->body.padding.hor);
 8016a0e:	4630      	mov	r0, r6
 8016a10:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8016a14:	f7f2 fff0 	bl	80099f8 <lv_obj_get_width>
 8016a18:	f8b9 1022 	ldrh.w	r1, [r9, #34]	; 0x22
 8016a1c:	eba0 0141 	sub.w	r1, r0, r1, lsl #1
 8016a20:	4628      	mov	r0, r5
 8016a22:	b209      	sxth	r1, r1
 8016a24:	f7f2 fc78 	bl	8009318 <lv_obj_set_width>
        if(ext->sb.hor_draw || ext->sb.ver_draw) lv_page_sb_refresh(page);
 8016a28:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
 8016a2c:	079f      	lsls	r7, r3, #30
 8016a2e:	d002      	beq.n	8016a36 <lv_page_signal+0x15e>
 8016a30:	4630      	mov	r0, r6
 8016a32:	f7ff f907 	bl	8015c44 <lv_page_sb_refresh>
        lv_obj_refresh_ext_size(page);
 8016a36:	4630      	mov	r0, r6
 8016a38:	f7f2 fe9a 	bl	8009770 <lv_obj_refresh_ext_size>
 8016a3c:	e757      	b.n	80168ee <lv_page_signal+0x16>
        uint32_t c = *((uint32_t *) param);
 8016a3e:	683b      	ldr	r3, [r7, #0]
        if((c == LV_GROUP_KEY_DOWN) && ext->arrow_scroll) {
 8016a40:	2b12      	cmp	r3, #18
 8016a42:	d04e      	beq.n	8016ae2 <lv_page_signal+0x20a>
        } else if((c == LV_GROUP_KEY_UP) && ext->arrow_scroll) {
 8016a44:	2b11      	cmp	r3, #17
 8016a46:	d05d      	beq.n	8016b04 <lv_page_signal+0x22c>
        } else if((c == LV_GROUP_KEY_RIGHT) && ext->arrow_scroll) {
 8016a48:	2b13      	cmp	r3, #19
 8016a4a:	d174      	bne.n	8016b36 <lv_page_signal+0x25e>
 8016a4c:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
 8016a50:	07da      	lsls	r2, r3, #31
 8016a52:	f57f af4c 	bpl.w	80168ee <lv_page_signal+0x16>
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8016a56:	4630      	mov	r0, r6
 8016a58:	f7f3 f8f4 	bl	8009c44 <lv_obj_get_ext_attr>
 * @param page pointer to a page object
 * @return the width of the scrollable
 */
static inline lv_coord_t lv_page_get_scrl_width(const lv_obj_t *page)
{
    return lv_obj_get_width(lv_page_get_scrl(page));
 8016a5c:	6840      	ldr	r0, [r0, #4]
 8016a5e:	f7f2 ffcb 	bl	80099f8 <lv_obj_get_width>
 8016a62:	4605      	mov	r5, r0
            if(lv_page_get_scrl_width(page) < lv_obj_get_width(page)) lv_page_scroll_ver(page, - lv_obj_get_height(page) / 4);
 8016a64:	4630      	mov	r0, r6
 8016a66:	f7f2 ffc7 	bl	80099f8 <lv_obj_get_width>
 8016a6a:	42a8      	cmp	r0, r5
 8016a6c:	4630      	mov	r0, r6
 8016a6e:	dc3e      	bgt.n	8016aee <lv_page_signal+0x216>
            else lv_page_scroll_hor(page, - lv_obj_get_width(page) / 4);
 8016a70:	f7f2 ffc2 	bl	80099f8 <lv_obj_get_width>
 8016a74:	2104      	movs	r1, #4
 8016a76:	fb90 f1f1 	sdiv	r1, r0, r1
 8016a7a:	4249      	negs	r1, r1
 8016a7c:	4630      	mov	r0, r6
 8016a7e:	b209      	sxth	r1, r1
 8016a80:	f7ff fece 	bl	8016820 <lv_page_scroll_hor>
 8016a84:	e733      	b.n	80168ee <lv_page_signal+0x16>
            ext->scrl->signal_func(ext->scrl, LV_SIGNAL_CORD_CHG, &ext->scrl->coords);
 8016a86:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8016a8a:	2102      	movs	r1, #2
 8016a8c:	6983      	ldr	r3, [r0, #24]
 8016a8e:	f100 0210 	add.w	r2, r0, #16
 8016a92:	4798      	blx	r3
 8016a94:	e7c8      	b.n	8016a28 <lv_page_signal+0x150>
        if(lv_indev_is_dragging(lv_indev_get_act()) == false) {
 8016a96:	f7f2 f903 	bl	8008ca0 <lv_indev_get_act>
 8016a9a:	f7f2 f937 	bl	8008d0c <lv_indev_is_dragging>
 8016a9e:	2800      	cmp	r0, #0
 8016aa0:	f47f af25 	bne.w	80168ee <lv_page_signal+0x16>
            if(ext->rel_action != NULL) {
 8016aa4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	d188      	bne.n	80169be <lv_page_signal+0xe6>
 8016aac:	e71f      	b.n	80168ee <lv_page_signal+0x16>
                                 lv_obj_get_height(page) != lv_area_get_height(param))) {
 8016aae:	4630      	mov	r0, r6
 8016ab0:	f7f2 ffa8 	bl	8009a04 <lv_obj_get_height>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 8016ab4:	88fb      	ldrh	r3, [r7, #6]
 8016ab6:	887a      	ldrh	r2, [r7, #2]
 8016ab8:	3301      	adds	r3, #1
 8016aba:	1a9b      	subs	r3, r3, r2
        if(ext->scrl != NULL && (lv_obj_get_width(page) != lv_area_get_width(param) ||
 8016abc:	b21b      	sxth	r3, r3
 8016abe:	4298      	cmp	r0, r3
 8016ac0:	f47f af63 	bne.w	801698a <lv_page_signal+0xb2>
 8016ac4:	e713      	b.n	80168ee <lv_page_signal+0x16>
                lv_obj_set_width(ext->scrl, lv_obj_get_width(page) - 2 * style->body.padding.hor);
 8016ac6:	4630      	mov	r0, r6
 8016ac8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8016acc:	f7f2 ff94 	bl	80099f8 <lv_obj_get_width>
 8016ad0:	f8b9 1022 	ldrh.w	r1, [r9, #34]	; 0x22
 8016ad4:	eba0 0141 	sub.w	r1, r0, r1, lsl #1
 8016ad8:	4628      	mov	r0, r5
 8016ada:	b209      	sxth	r1, r1
 8016adc:	f7f2 fc1c 	bl	8009318 <lv_obj_set_width>
 8016ae0:	e75a      	b.n	8016998 <lv_page_signal+0xc0>
        if((c == LV_GROUP_KEY_DOWN) && ext->arrow_scroll) {
 8016ae2:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
 8016ae6:	07d8      	lsls	r0, r3, #31
 8016ae8:	f57f af01 	bpl.w	80168ee <lv_page_signal+0x16>
            lv_page_scroll_ver(page, - lv_obj_get_height(page) / 4);
 8016aec:	4630      	mov	r0, r6
            if(lv_page_get_scrl_width(page) < lv_obj_get_width(page)) lv_page_scroll_ver(page, - lv_obj_get_height(page) / 4);
 8016aee:	f7f2 ff89 	bl	8009a04 <lv_obj_get_height>
 8016af2:	2104      	movs	r1, #4
 8016af4:	fb90 f1f1 	sdiv	r1, r0, r1
 8016af8:	4249      	negs	r1, r1
 8016afa:	4630      	mov	r0, r6
 8016afc:	b209      	sxth	r1, r1
 8016afe:	f7ff febd 	bl	801687c <lv_page_scroll_ver>
 8016b02:	e6f4      	b.n	80168ee <lv_page_signal+0x16>
        } else if((c == LV_GROUP_KEY_UP) && ext->arrow_scroll) {
 8016b04:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
 8016b08:	07d9      	lsls	r1, r3, #31
 8016b0a:	f57f aef0 	bpl.w	80168ee <lv_page_signal+0x16>
            lv_page_scroll_ver(page, lv_obj_get_height(page) / 4);
 8016b0e:	4630      	mov	r0, r6
            if(lv_page_get_scrl_width(page) < lv_obj_get_width(page)) lv_page_scroll_ver(page, lv_obj_get_height(page) / 4);
 8016b10:	f7f2 ff78 	bl	8009a04 <lv_obj_get_height>
 8016b14:	2104      	movs	r1, #4
 8016b16:	fb90 f1f1 	sdiv	r1, r0, r1
 8016b1a:	4630      	mov	r0, r6
 8016b1c:	b209      	sxth	r1, r1
 8016b1e:	f7ff fead 	bl	801687c <lv_page_scroll_ver>
 8016b22:	e6e4      	b.n	80168ee <lv_page_signal+0x16>
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8016b24:	4630      	mov	r0, r6
 8016b26:	f7f3 f88d 	bl	8009c44 <lv_obj_get_ext_attr>
    return ext->arrow_scroll ? true : false;
 8016b2a:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8016b2e:	f003 0301 	and.w	r3, r3, #1
 8016b32:	703b      	strb	r3, [r7, #0]
 8016b34:	e6db      	b.n	80168ee <lv_page_signal+0x16>
        } else if((c == LV_GROUP_KEY_LEFT) && ext->arrow_scroll) {
 8016b36:	2b14      	cmp	r3, #20
 8016b38:	f47f aed9 	bne.w	80168ee <lv_page_signal+0x16>
 8016b3c:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
 8016b40:	07db      	lsls	r3, r3, #31
 8016b42:	f57f aed4 	bpl.w	80168ee <lv_page_signal+0x16>
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8016b46:	4630      	mov	r0, r6
 8016b48:	f7f3 f87c 	bl	8009c44 <lv_obj_get_ext_attr>
 8016b4c:	6840      	ldr	r0, [r0, #4]
 8016b4e:	f7f2 ff53 	bl	80099f8 <lv_obj_get_width>
 8016b52:	4605      	mov	r5, r0
            if(lv_page_get_scrl_width(page) < lv_obj_get_width(page)) lv_page_scroll_ver(page, lv_obj_get_height(page) / 4);
 8016b54:	4630      	mov	r0, r6
 8016b56:	f7f2 ff4f 	bl	80099f8 <lv_obj_get_width>
 8016b5a:	42a8      	cmp	r0, r5
 8016b5c:	4630      	mov	r0, r6
 8016b5e:	dcd7      	bgt.n	8016b10 <lv_page_signal+0x238>
            else lv_page_scroll_hor(page,  lv_obj_get_width(page) / 4);
 8016b60:	f7f2 ff4a 	bl	80099f8 <lv_obj_get_width>
 8016b64:	2104      	movs	r1, #4
 8016b66:	fb90 f1f1 	sdiv	r1, r0, r1
 8016b6a:	4630      	mov	r0, r6
 8016b6c:	b209      	sxth	r1, r1
 8016b6e:	f7ff fe57 	bl	8016820 <lv_page_scroll_hor>
 8016b72:	e6bc      	b.n	80168ee <lv_page_signal+0x16>
 8016b74:	200174f4 	.word	0x200174f4
 8016b78:	0808bccc 	.word	0x0808bccc

08016b7c <lv_page_start_edge_flash>:
{
 8016b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b7e:	b08b      	sub	sp, #44	; 0x2c
 8016b80:	4604      	mov	r4, r0
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8016b82:	f7f3 f85f 	bl	8009c44 <lv_obj_get_ext_attr>
    if(ext->edge_flash.enabled) {
 8016b86:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8016b8a:	07db      	lsls	r3, r3, #31
 8016b8c:	d521      	bpl.n	8016bd2 <lv_page_start_edge_flash+0x56>
        a.playback = 1;
 8016b8e:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
        a.start = 0;
 8016b92:	2300      	movs	r3, #0
        a.time = LV_PAGE_END_ANIM_TIME;
 8016b94:	f44f 7196 	mov.w	r1, #300	; 0x12c
        a.end = LV_PAGE_END_FLASH_SIZE;
 8016b98:	f04f 0e19 	mov.w	lr, #25
        a.repeat = 0;
 8016b9c:	f042 0201 	orr.w	r2, r2, #1
        a.fp = (lv_anim_fp_t)edge_flash_anim;
 8016ba0:	4f0d      	ldr	r7, [pc, #52]	; (8016bd8 <lv_page_start_edge_flash+0x5c>)
        a.path = lv_anim_path_linear;
 8016ba2:	4e0e      	ldr	r6, [pc, #56]	; (8016bdc <lv_page_start_edge_flash+0x60>)
        lv_anim_create(&a);
 8016ba4:	a801      	add	r0, sp, #4
        a.end_cb = edge_flash_anim_end;
 8016ba6:	4d0e      	ldr	r5, [pc, #56]	; (8016be0 <lv_page_start_edge_flash+0x64>)
        a.repeat = 0;
 8016ba8:	f363 0241 	bfi	r2, r3, #1, #1
        a.var = page;
 8016bac:	9401      	str	r4, [sp, #4]
        a.start = 0;
 8016bae:	9305      	str	r3, [sp, #20]
        a.repeat = 0;
 8016bb0:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
        a.act_time = 0;
 8016bb4:	f8ad 301e 	strh.w	r3, [sp, #30]
        a.repeat_pause = 0;
 8016bb8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
        a.end = LV_PAGE_END_FLASH_SIZE;
 8016bbc:	f8cd e018 	str.w	lr, [sp, #24]
        a.fp = (lv_anim_fp_t)edge_flash_anim;
 8016bc0:	9702      	str	r7, [sp, #8]
        a.path = lv_anim_path_linear;
 8016bc2:	9604      	str	r6, [sp, #16]
        a.end_cb = edge_flash_anim_end;
 8016bc4:	9503      	str	r5, [sp, #12]
        a.time = LV_PAGE_END_ANIM_TIME;
 8016bc6:	f8ad 101c 	strh.w	r1, [sp, #28]
        a.playback_pause = LV_PAGE_END_ANIM_WAIT_TIME;
 8016bca:	f8ad 1020 	strh.w	r1, [sp, #32]
        lv_anim_create(&a);
 8016bce:	f7f8 fe37 	bl	800f840 <lv_anim_create>
}
 8016bd2:	b00b      	add	sp, #44	; 0x2c
 8016bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016bd6:	bf00      	nop
 8016bd8:	08015ff5 	.word	0x08015ff5
 8016bdc:	0800f8dd 	.word	0x0800f8dd
 8016be0:	08015fd1 	.word	0x08015fd1

08016be4 <lv_page_scrollable_signal>:
    res = ancestor_signal(scrl, sign, param);
 8016be4:	4bc4      	ldr	r3, [pc, #784]	; (8016ef8 <lv_page_scrollable_signal+0x314>)
{
 8016be6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    res = ancestor_signal(scrl, sign, param);
 8016bea:	685b      	ldr	r3, [r3, #4]
{
 8016bec:	b08f      	sub	sp, #60	; 0x3c
 8016bee:	4605      	mov	r5, r0
 8016bf0:	468a      	mov	sl, r1
 8016bf2:	4616      	mov	r6, r2
    res = ancestor_signal(scrl, sign, param);
 8016bf4:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8016bf6:	2801      	cmp	r0, #1
    res = ancestor_signal(scrl, sign, param);
 8016bf8:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
 8016bfa:	d003      	beq.n	8016c04 <lv_page_scrollable_signal+0x20>
}
 8016bfc:	4620      	mov	r0, r4
 8016bfe:	b00f      	add	sp, #60	; 0x3c
 8016c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_obj_t * page = lv_obj_get_parent(scrl);
 8016c04:	4628      	mov	r0, r5
 8016c06:	f7f2 fe47 	bl	8009898 <lv_obj_get_parent>
 8016c0a:	4607      	mov	r7, r0
    lv_style_t * page_style = lv_obj_get_style(page);
 8016c0c:	f7f2 ff00 	bl	8009a10 <lv_obj_get_style>
 8016c10:	4681      	mov	r9, r0
    lv_page_ext_t * page_ext = lv_obj_get_ext_attr(page);
 8016c12:	4638      	mov	r0, r7
 8016c14:	f7f3 f816 	bl	8009c44 <lv_obj_get_ext_attr>
    if(sign == LV_SIGNAL_CORD_CHG) {
 8016c18:	f1ba 0f02 	cmp.w	sl, #2
    lv_page_ext_t * page_ext = lv_obj_get_ext_attr(page);
 8016c1c:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CORD_CHG) {
 8016c1e:	d051      	beq.n	8016cc4 <lv_page_scrollable_signal+0xe0>
    else if(sign == LV_SIGNAL_DRAG_END) {
 8016c20:	f1ba 0f0f 	cmp.w	sl, #15
 8016c24:	d013      	beq.n	8016c4e <lv_page_scrollable_signal+0x6a>
    } else if(sign == LV_SIGNAL_PRESSED) {
 8016c26:	f1ba 0f08 	cmp.w	sl, #8
 8016c2a:	d047      	beq.n	8016cbc <lv_page_scrollable_signal+0xd8>
    } else if(sign == LV_SIGNAL_RELEASED) {
 8016c2c:	f1ba 0f0b 	cmp.w	sl, #11
 8016c30:	d1e4      	bne.n	8016bfc <lv_page_scrollable_signal+0x18>
        if(lv_indev_is_dragging(lv_indev_get_act()) == false) {
 8016c32:	f7f2 f835 	bl	8008ca0 <lv_indev_get_act>
 8016c36:	f7f2 f869 	bl	8008d0c <lv_indev_is_dragging>
 8016c3a:	2800      	cmp	r0, #0
 8016c3c:	d1de      	bne.n	8016bfc <lv_page_scrollable_signal+0x18>
            if(page_ext->rel_action != NULL) {
 8016c3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016c42:	2b00      	cmp	r3, #0
 8016c44:	d0da      	beq.n	8016bfc <lv_page_scrollable_signal+0x18>
                res = page_ext->rel_action(page);
 8016c46:	4638      	mov	r0, r7
 8016c48:	4798      	blx	r3
 8016c4a:	4604      	mov	r4, r0
 8016c4c:	e7d6      	b.n	8016bfc <lv_page_scrollable_signal+0x18>
        if(page_ext->sb.mode == LV_SB_MODE_DRAG) {
 8016c4e:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
        page_ext->scroll_prop_ip = 0;
 8016c52:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
        if(page_ext->sb.mode == LV_SB_MODE_DRAG) {
 8016c56:	f002 011c 	and.w	r1, r2, #28
        page_ext->scroll_prop_ip = 0;
 8016c5a:	f36f 0382 	bfc	r3, #2, #1
        if(page_ext->sb.mode == LV_SB_MODE_DRAG) {
 8016c5e:	2908      	cmp	r1, #8
        page_ext->scroll_prop_ip = 0;
 8016c60:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
        if(page_ext->sb.mode == LV_SB_MODE_DRAG) {
 8016c64:	d1ca      	bne.n	8016bfc <lv_page_scrollable_signal+0x18>
            if(page_ext->sb.hor_draw) {
 8016c66:	07d0      	lsls	r0, r2, #31
 8016c68:	f100 811f 	bmi.w	8016eaa <lv_page_scrollable_signal+0x2c6>
            if(page_ext->sb.ver_draw)  {
 8016c6c:	0791      	lsls	r1, r2, #30
 8016c6e:	d5c5      	bpl.n	8016bfc <lv_page_scrollable_signal+0x18>
    memcpy(dest, src, sizeof(lv_area_t));
 8016c70:	4642      	mov	r2, r8
 8016c72:	ab0c      	add	r3, sp, #48	; 0x30
 8016c74:	f852 0f1c 	ldr.w	r0, [r2, #28]!
 8016c78:	6851      	ldr	r1, [r2, #4]
 8016c7a:	c303      	stmia	r3!, {r0, r1}
                sb_area_tmp.x1 += page->coords.x1;
 8016c7c:	8a3a      	ldrh	r2, [r7, #16]
                lv_inv_area(&sb_area_tmp);
 8016c7e:	a80c      	add	r0, sp, #48	; 0x30
                sb_area_tmp.x2 += page->coords.x1;
 8016c80:	f8bd 6034 	ldrh.w	r6, [sp, #52]	; 0x34
                sb_area_tmp.x1 += page->coords.x1;
 8016c84:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
                sb_area_tmp.y1 += page->coords.y1;
 8016c88:	8a7b      	ldrh	r3, [r7, #18]
 8016c8a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
                sb_area_tmp.x1 += page->coords.x1;
 8016c8e:	4415      	add	r5, r2
                sb_area_tmp.x2 += page->coords.x1;
 8016c90:	4432      	add	r2, r6
                sb_area_tmp.y2 += page->coords.y1;
 8016c92:	f8bd 6036 	ldrh.w	r6, [sp, #54]	; 0x36
                sb_area_tmp.y1 += page->coords.y1;
 8016c96:	4419      	add	r1, r3
                sb_area_tmp.x1 += page->coords.x1;
 8016c98:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
                sb_area_tmp.y2 += page->coords.y1;
 8016c9c:	4433      	add	r3, r6
                sb_area_tmp.x2 += page->coords.x1;
 8016c9e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
                sb_area_tmp.y1 += page->coords.y1;
 8016ca2:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
                sb_area_tmp.y2 += page->coords.y1;
 8016ca6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
                lv_inv_area(&sb_area_tmp);
 8016caa:	f7f3 fa2b 	bl	800a104 <lv_inv_area>
                page_ext->sb.ver_draw = 0;
 8016cae:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
 8016cb2:	f36f 0341 	bfc	r3, #1, #1
 8016cb6:	f888 3024 	strb.w	r3, [r8, #36]	; 0x24
 8016cba:	e79f      	b.n	8016bfc <lv_page_scrollable_signal+0x18>
        if(page_ext->pr_action != NULL) {
 8016cbc:	68c3      	ldr	r3, [r0, #12]
 8016cbe:	2b00      	cmp	r3, #0
 8016cc0:	d1c1      	bne.n	8016c46 <lv_page_scrollable_signal+0x62>
 8016cc2:	e79b      	b.n	8016bfc <lv_page_scrollable_signal+0x18>
        lv_coord_t new_x = lv_obj_get_x(scrl);
 8016cc4:	4628      	mov	r0, r5
 8016cc6:	f7f2 fe8b 	bl	80099e0 <lv_obj_get_x>
 8016cca:	9003      	str	r0, [sp, #12]
        lv_coord_t new_y = lv_obj_get_y(scrl);
 8016ccc:	4628      	mov	r0, r5
 8016cce:	f7f2 fe8d 	bl	80099ec <lv_obj_get_y>
        lv_obj_get_coords(scrl, &scrl_coords);
 8016cd2:	a90c      	add	r1, sp, #48	; 0x30
        lv_coord_t new_y = lv_obj_get_y(scrl);
 8016cd4:	9007      	str	r0, [sp, #28]
        lv_obj_get_coords(scrl, &scrl_coords);
 8016cd6:	4628      	mov	r0, r5
 8016cd8:	f7f2 fe7c 	bl	80099d4 <lv_obj_get_coords>
        lv_obj_get_coords(page, &page_coords);
 8016cdc:	a90a      	add	r1, sp, #40	; 0x28
 8016cde:	4638      	mov	r0, r7
 8016ce0:	f7f2 fe78 	bl	80099d4 <lv_obj_get_coords>
        lv_coord_t diff_x = scrl->coords.x1 - ori_coords->x1;
 8016ce4:	f8b6 e000 	ldrh.w	lr, [r6]
 8016ce8:	8a2a      	ldrh	r2, [r5, #16]
        lv_obj_t * page_parent = lv_obj_get_parent(page);
 8016cea:	4638      	mov	r0, r7
        lv_coord_t diff_y = scrl->coords.y1 - ori_coords->y1;
 8016cec:	8871      	ldrh	r1, [r6, #2]
        lv_coord_t diff_x = scrl->coords.x1 - ori_coords->x1;
 8016cee:	eba2 020e 	sub.w	r2, r2, lr
        lv_coord_t diff_y = scrl->coords.y1 - ori_coords->y1;
 8016cf2:	8a6b      	ldrh	r3, [r5, #18]
        lv_coord_t hpad = page_style->body.padding.hor;
 8016cf4:	f9b9 b022 	ldrsh.w	fp, [r9, #34]	; 0x22
        lv_coord_t diff_y = scrl->coords.y1 - ori_coords->y1;
 8016cf8:	1a5b      	subs	r3, r3, r1
        lv_coord_t diff_x = scrl->coords.x1 - ori_coords->x1;
 8016cfa:	b292      	uxth	r2, r2
        lv_coord_t diff_y = scrl->coords.y1 - ori_coords->y1;
 8016cfc:	b29b      	uxth	r3, r3
        lv_coord_t diff_x = scrl->coords.x1 - ori_coords->x1;
 8016cfe:	9206      	str	r2, [sp, #24]
        lv_coord_t vpad = page_style->body.padding.ver;
 8016d00:	f9b9 2020 	ldrsh.w	r2, [r9, #32]
        lv_coord_t diff_y = scrl->coords.y1 - ori_coords->y1;
 8016d04:	9304      	str	r3, [sp, #16]
        lv_coord_t vpad = page_style->body.padding.ver;
 8016d06:	9201      	str	r2, [sp, #4]
        lv_obj_t * page_parent = lv_obj_get_parent(page);
 8016d08:	f7f2 fdc6 	bl	8009898 <lv_obj_get_parent>
 8016d0c:	9005      	str	r0, [sp, #20]
        lv_indev_t * indev = lv_indev_get_act();
 8016d0e:	f7f1 ffc7 	bl	8008ca0 <lv_indev_get_act>
        lv_indev_get_vect(indev, &drag_vect);
 8016d12:	a909      	add	r1, sp, #36	; 0x24
        lv_indev_t * indev = lv_indev_get_act();
 8016d14:	4681      	mov	r9, r0
        lv_indev_get_vect(indev, &drag_vect);
 8016d16:	f7f2 f807 	bl	8008d28 <lv_indev_get_vect>
        if(page_ext->scroll_prop && page_ext->scroll_prop_ip == 0 && lv_indev_is_dragging(indev) == false) {
 8016d1a:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
 8016d1e:	f003 0306 	and.w	r3, r3, #6
 8016d22:	2b02      	cmp	r3, #2
 8016d24:	f000 80ea 	beq.w	8016efc <lv_page_scrollable_signal+0x318>
 8016d28:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8016d2c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
    return area_p->x2 - area_p->x1 + 1;
 8016d30:	f109 0201 	add.w	r2, r9, #1
 8016d34:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8016d38:	f9bd e02c 	ldrsh.w	lr, [sp, #44]	; 0x2c
 8016d3c:	eba2 020c 	sub.w	r2, r2, ip
 8016d40:	fa1f fa80 	uxth.w	sl, r0
 8016d44:	f10e 0301 	add.w	r3, lr, #1
 8016d48:	b292      	uxth	r2, r2
 8016d4a:	eba3 030a 	sub.w	r3, r3, sl
        if(lv_area_get_width(&scrl_coords) + 2 * hpad <= lv_area_get_width(&page_coords)) {
 8016d4e:	b211      	sxth	r1, r2
 8016d50:	b29b      	uxth	r3, r3
 8016d52:	9302      	str	r3, [sp, #8]
 8016d54:	eb01 034b 	add.w	r3, r1, fp, lsl #1
 8016d58:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8016d5c:	428b      	cmp	r3, r1
 8016d5e:	dc35      	bgt.n	8016dcc <lv_page_scrollable_signal+0x1e8>
            if(scrl_coords.x1 != page_coords.x1 + hpad) {
 8016d60:	4458      	add	r0, fp
        lv_coord_t new_x = lv_obj_get_x(scrl);
 8016d62:	9b03      	ldr	r3, [sp, #12]
 8016d64:	4584      	cmp	ip, r0
 8016d66:	bf0a      	itet	eq
 8016d68:	469b      	moveq	fp, r3
 8016d6a:	2301      	movne	r3, #1
 8016d6c:	2300      	moveq	r3, #0
 8016d6e:	9303      	str	r3, [sp, #12]
 8016d70:	f9bd 9036 	ldrsh.w	r9, [sp, #54]	; 0x36
 8016d74:	f9bd 002a 	ldrsh.w	r0, [sp, #42]	; 0x2a
 8016d78:	f9bd e02e 	ldrsh.w	lr, [sp, #46]	; 0x2e
    return area_p->y2 - area_p->y1 + 1;
 8016d7c:	f109 0201 	add.w	r2, r9, #1
 8016d80:	f9bd c032 	ldrsh.w	ip, [sp, #50]	; 0x32
 8016d84:	fa1f fa80 	uxth.w	sl, r0
 8016d88:	f10e 0301 	add.w	r3, lr, #1
 8016d8c:	eba2 020c 	sub.w	r2, r2, ip
 8016d90:	eba3 030a 	sub.w	r3, r3, sl
 8016d94:	b292      	uxth	r2, r2
 8016d96:	b29b      	uxth	r3, r3
        if(lv_area_get_height(&scrl_coords) + 2 * vpad <= lv_area_get_height(&page_coords)) {
 8016d98:	b211      	sxth	r1, r2
 8016d9a:	9302      	str	r3, [sp, #8]
 8016d9c:	9b01      	ldr	r3, [sp, #4]
 8016d9e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8016da2:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8016da6:	4299      	cmp	r1, r3
 8016da8:	dc20      	bgt.n	8016dec <lv_page_scrollable_signal+0x208>
            if(scrl_coords.y1 != page_coords.y1 + vpad) {
 8016daa:	9b01      	ldr	r3, [sp, #4]
 8016dac:	4418      	add	r0, r3
 8016dae:	4584      	cmp	ip, r0
 8016db0:	d026      	beq.n	8016e00 <lv_page_scrollable_signal+0x21c>
            lv_obj_set_pos(scrl, new_x, new_y);
 8016db2:	9a01      	ldr	r2, [sp, #4]
 8016db4:	4659      	mov	r1, fp
 8016db6:	4628      	mov	r0, r5
 8016db8:	f7f2 f8ec 	bl	8008f94 <lv_obj_set_pos>
            if(page_ext->scroll_prop_ip) {
 8016dbc:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
 8016dc0:	075a      	lsls	r2, r3, #29
 8016dc2:	d464      	bmi.n	8016e8e <lv_page_scrollable_signal+0x2aa>
        lv_page_sb_refresh(page);
 8016dc4:	4638      	mov	r0, r7
 8016dc6:	f7fe ff3d 	bl	8015c44 <lv_page_sb_refresh>
 8016dca:	e717      	b.n	8016bfc <lv_page_scrollable_signal+0x18>
            if(page_ext->scroll_prop_ip) {
 8016dcc:	f898 1034 	ldrb.w	r1, [r8, #52]	; 0x34
 8016dd0:	f011 0104 	ands.w	r1, r1, #4
 8016dd4:	d046      	beq.n	8016e64 <lv_page_scrollable_signal+0x280>
                if(drag_vect.x == diff_x) {   /*`scrl` is bouncing: drag pos. it somewhere and here it is reverted. Handle only the pos. because of drag*/
 8016dd6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8016dda:	9a06      	ldr	r2, [sp, #24]
 8016ddc:	429a      	cmp	r2, r3
 8016dde:	f000 80eb 	beq.w	8016fb8 <lv_page_scrollable_signal+0x3d4>
        bool refr_x = false;
 8016de2:	2300      	movs	r3, #0
        lv_coord_t new_x = lv_obj_get_x(scrl);
 8016de4:	f8dd b00c 	ldr.w	fp, [sp, #12]
        bool refr_x = false;
 8016de8:	9303      	str	r3, [sp, #12]
 8016dea:	e7c1      	b.n	8016d70 <lv_page_scrollable_signal+0x18c>
            if(page_ext->scroll_prop_ip) {
 8016dec:	f898 1034 	ldrb.w	r1, [r8, #52]	; 0x34
 8016df0:	074b      	lsls	r3, r1, #29
 8016df2:	d51c      	bpl.n	8016e2e <lv_page_scrollable_signal+0x24a>
              if(drag_vect.y == diff_y) {   /*`scrl` is bouncing: drag pos. it somewhere and here it is reverted. Handle only the pos. because of drag*/
 8016df4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8016df8:	9a04      	ldr	r2, [sp, #16]
 8016dfa:	429a      	cmp	r2, r3
 8016dfc:	f000 80d5 	beq.w	8016faa <lv_page_scrollable_signal+0x3c6>
        if(refr_x || refr_y) {
 8016e00:	9b03      	ldr	r3, [sp, #12]
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	d0de      	beq.n	8016dc4 <lv_page_scrollable_signal+0x1e0>
            lv_obj_set_pos(scrl, new_x, new_y);
 8016e06:	9a07      	ldr	r2, [sp, #28]
 8016e08:	4659      	mov	r1, fp
 8016e0a:	4628      	mov	r0, r5
 8016e0c:	f7f2 f8c2 	bl	8008f94 <lv_obj_set_pos>
            if(page_ext->scroll_prop_ip) {
 8016e10:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
 8016e14:	075b      	lsls	r3, r3, #29
 8016e16:	d5d5      	bpl.n	8016dc4 <lv_page_scrollable_signal+0x1e0>
                if(refr_x) lv_obj_set_x(page_parent, lv_obj_get_x(page_parent) + diff_x);
 8016e18:	9d05      	ldr	r5, [sp, #20]
 8016e1a:	4628      	mov	r0, r5
 8016e1c:	f7f2 fde0 	bl	80099e0 <lv_obj_get_x>
 8016e20:	9b06      	ldr	r3, [sp, #24]
 8016e22:	4403      	add	r3, r0
 8016e24:	4628      	mov	r0, r5
 8016e26:	b219      	sxth	r1, r3
 8016e28:	f7f2 fa2a 	bl	8009280 <lv_obj_set_x>
 8016e2c:	e7ca      	b.n	8016dc4 <lv_page_scrollable_signal+0x1e0>
            else if(scrl_coords.y2 < page_coords.y2 - vpad) {
 8016e2e:	9901      	ldr	r1, [sp, #4]
 8016e30:	ebae 0e01 	sub.w	lr, lr, r1
 8016e34:	45f1      	cmp	r9, lr
 8016e36:	f280 808d 	bge.w	8016f54 <lv_page_scrollable_signal+0x370>
                new_y =  lv_area_get_height(&page_coords) - lv_area_get_height(&scrl_coords) - vpad;   /* Bottom align */
 8016e3a:	9b02      	ldr	r3, [sp, #8]
 8016e3c:	1a9a      	subs	r2, r3, r2
                        page_ext->edge_flash.top_ip == 0 && page_ext->edge_flash.bottom_ip == 0) {
 8016e3e:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
                new_y =  lv_area_get_height(&page_coords) - lv_area_get_height(&scrl_coords) - vpad;   /* Bottom align */
 8016e42:	1a52      	subs	r2, r2, r1
                if(page_ext->edge_flash.enabled &&
 8016e44:	f003 031f 	and.w	r3, r3, #31
                new_y =  lv_area_get_height(&page_coords) - lv_area_get_height(&scrl_coords) - vpad;   /* Bottom align */
 8016e48:	b212      	sxth	r2, r2
                if(page_ext->edge_flash.enabled &&
 8016e4a:	2b01      	cmp	r3, #1
                new_y =  lv_area_get_height(&page_coords) - lv_area_get_height(&scrl_coords) - vpad;   /* Bottom align */
 8016e4c:	9201      	str	r2, [sp, #4]
                if(page_ext->edge_flash.enabled &&
 8016e4e:	d1b0      	bne.n	8016db2 <lv_page_scrollable_signal+0x1ce>
                    lv_page_start_edge_flash(page);
 8016e50:	4638      	mov	r0, r7
 8016e52:	f7ff fe93 	bl	8016b7c <lv_page_start_edge_flash>
                    page_ext->edge_flash.bottom_ip = 1;
 8016e56:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
 8016e5a:	f043 0304 	orr.w	r3, r3, #4
 8016e5e:	f888 3030 	strb.w	r3, [r8, #48]	; 0x30
 8016e62:	e7a6      	b.n	8016db2 <lv_page_scrollable_signal+0x1ce>
            else if(scrl_coords.x2  < page_coords.x2 - hpad) {
 8016e64:	ebae 0e0b 	sub.w	lr, lr, fp
 8016e68:	45f1      	cmp	r9, lr
 8016e6a:	f280 8089 	bge.w	8016f80 <lv_page_scrollable_signal+0x39c>
                new_x =  lv_area_get_width(&page_coords) - lv_area_get_width(&scrl_coords) - hpad;   /* Right align */
 8016e6e:	9b02      	ldr	r3, [sp, #8]
 8016e70:	1a9b      	subs	r3, r3, r2
                        page_ext->edge_flash.top_ip == 0 && page_ext->edge_flash.bottom_ip == 0) {
 8016e72:	f898 2030 	ldrb.w	r2, [r8, #48]	; 0x30
                if(page_ext->edge_flash.enabled &&
 8016e76:	f002 021f 	and.w	r2, r2, #31
                new_x =  lv_area_get_width(&page_coords) - lv_area_get_width(&scrl_coords) - hpad;   /* Right align */
 8016e7a:	eba3 030b 	sub.w	r3, r3, fp
                if(page_ext->edge_flash.enabled &&
 8016e7e:	2a01      	cmp	r2, #1
                new_x =  lv_area_get_width(&page_coords) - lv_area_get_width(&scrl_coords) - hpad;   /* Right align */
 8016e80:	fa0f fb83 	sxth.w	fp, r3
                if(page_ext->edge_flash.enabled &&
 8016e84:	f000 80a4 	beq.w	8016fd0 <lv_page_scrollable_signal+0x3ec>
                refr_x = true;
 8016e88:	2301      	movs	r3, #1
 8016e8a:	9303      	str	r3, [sp, #12]
 8016e8c:	e770      	b.n	8016d70 <lv_page_scrollable_signal+0x18c>
                if(refr_y) lv_obj_set_y(page_parent, lv_obj_get_y(page_parent) + diff_y);
 8016e8e:	9d05      	ldr	r5, [sp, #20]
 8016e90:	4628      	mov	r0, r5
 8016e92:	f7f2 fdab 	bl	80099ec <lv_obj_get_y>
 8016e96:	9b04      	ldr	r3, [sp, #16]
 8016e98:	4403      	add	r3, r0
 8016e9a:	4628      	mov	r0, r5
 8016e9c:	b219      	sxth	r1, r3
 8016e9e:	f7f2 f9f9 	bl	8009294 <lv_obj_set_y>
                if(refr_x) lv_obj_set_x(page_parent, lv_obj_get_x(page_parent) + diff_x);
 8016ea2:	9b03      	ldr	r3, [sp, #12]
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	d08d      	beq.n	8016dc4 <lv_page_scrollable_signal+0x1e0>
 8016ea8:	e7b6      	b.n	8016e18 <lv_page_scrollable_signal+0x234>
    memcpy(dest, src, sizeof(lv_area_t));
 8016eaa:	4642      	mov	r2, r8
 8016eac:	ab0c      	add	r3, sp, #48	; 0x30
 8016eae:	f852 0f14 	ldr.w	r0, [r2, #20]!
 8016eb2:	6851      	ldr	r1, [r2, #4]
 8016eb4:	c303      	stmia	r3!, {r0, r1}
                sb_area_tmp.x1 += page->coords.x1;
 8016eb6:	8a3a      	ldrh	r2, [r7, #16]
                lv_inv_area(&sb_area_tmp);
 8016eb8:	a80c      	add	r0, sp, #48	; 0x30
                sb_area_tmp.x2 += page->coords.x1;
 8016eba:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
                sb_area_tmp.x1 += page->coords.x1;
 8016ebe:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
                sb_area_tmp.y1 += page->coords.y1;
 8016ec2:	8a7b      	ldrh	r3, [r7, #18]
                sb_area_tmp.y2 += page->coords.y1;
 8016ec4:	f8bd 6036 	ldrh.w	r6, [sp, #54]	; 0x36
                sb_area_tmp.x1 += page->coords.x1;
 8016ec8:	4415      	add	r5, r2
                sb_area_tmp.x2 += page->coords.x1;
 8016eca:	440a      	add	r2, r1
                sb_area_tmp.y1 += page->coords.y1;
 8016ecc:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
                sb_area_tmp.x1 += page->coords.x1;
 8016ed0:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
                sb_area_tmp.y1 += page->coords.y1;
 8016ed4:	4419      	add	r1, r3
                sb_area_tmp.y2 += page->coords.y1;
 8016ed6:	4433      	add	r3, r6
                sb_area_tmp.x2 += page->coords.x1;
 8016ed8:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
                sb_area_tmp.y2 += page->coords.y1;
 8016edc:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
                sb_area_tmp.y1 += page->coords.y1;
 8016ee0:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
                lv_inv_area(&sb_area_tmp);
 8016ee4:	f7f3 f90e 	bl	800a104 <lv_inv_area>
                page_ext->sb.hor_draw = 0;
 8016ee8:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
 8016eec:	f36f 0300 	bfc	r3, #0, #1
 8016ef0:	b2da      	uxtb	r2, r3
 8016ef2:	f888 3024 	strb.w	r3, [r8, #36]	; 0x24
 8016ef6:	e6b9      	b.n	8016c6c <lv_page_scrollable_signal+0x88>
 8016ef8:	200174f4 	.word	0x200174f4
        if(page_ext->scroll_prop && page_ext->scroll_prop_ip == 0 && lv_indev_is_dragging(indev) == false) {
 8016efc:	4648      	mov	r0, r9
 8016efe:	f7f1 ff05 	bl	8008d0c <lv_indev_is_dragging>
 8016f02:	2800      	cmp	r0, #0
 8016f04:	f47f af10 	bne.w	8016d28 <lv_page_scrollable_signal+0x144>
            if(((drag_vect.y > 0 && scrl_coords.y1 == page_coords.y1 + vpad) ||
 8016f08:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	dd6a      	ble.n	8016fe6 <lv_page_scrollable_signal+0x402>
 8016f10:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8016f14:	9901      	ldr	r1, [sp, #4]
 8016f16:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8016f1a:	440b      	add	r3, r1
 8016f1c:	429a      	cmp	r2, r3
 8016f1e:	f47f af03 	bne.w	8016d28 <lv_page_scrollable_signal+0x144>
               ((drag_vect.x > 0 && scrl_coords.x1 == page_coords.x1 + hpad) ||
 8016f22:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
                (drag_vect.y < 0 && scrl_coords.y2 == page_coords.y2 - vpad)) &&
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	dd69      	ble.n	8016ffe <lv_page_scrollable_signal+0x41a>
               ((drag_vect.x > 0 && scrl_coords.x1 == page_coords.x1 + hpad) ||
 8016f2a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8016f2e:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8016f32:	445b      	add	r3, fp
 8016f34:	429a      	cmp	r2, r3
 8016f36:	f47f aef7 	bne.w	8016d28 <lv_page_scrollable_signal+0x144>
                if(lv_obj_get_parent(page_parent) != NULL) {    /*Do not propagate the scroll to a screen*/
 8016f3a:	9805      	ldr	r0, [sp, #20]
 8016f3c:	f7f2 fcac 	bl	8009898 <lv_obj_get_parent>
 8016f40:	2800      	cmp	r0, #0
 8016f42:	f43f aef1 	beq.w	8016d28 <lv_page_scrollable_signal+0x144>
                    page_ext->scroll_prop_ip = 1;
 8016f46:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
 8016f4a:	f043 0304 	orr.w	r3, r3, #4
 8016f4e:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
 8016f52:	e6e9      	b.n	8016d28 <lv_page_scrollable_signal+0x144>
            else if(scrl_coords.y1  > page_coords.y1 + vpad) {
 8016f54:	9b01      	ldr	r3, [sp, #4]
 8016f56:	4418      	add	r0, r3
 8016f58:	4584      	cmp	ip, r0
 8016f5a:	f77f af51 	ble.w	8016e00 <lv_page_scrollable_signal+0x21c>
                        page_ext->edge_flash.top_ip == 0 && page_ext->edge_flash.bottom_ip == 0) {
 8016f5e:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
                if(page_ext->edge_flash.enabled &&
 8016f62:	f003 031f 	and.w	r3, r3, #31
 8016f66:	2b01      	cmp	r3, #1
 8016f68:	f47f af23 	bne.w	8016db2 <lv_page_scrollable_signal+0x1ce>
                    lv_page_start_edge_flash(page);
 8016f6c:	4638      	mov	r0, r7
 8016f6e:	f7ff fe05 	bl	8016b7c <lv_page_start_edge_flash>
                    page_ext->edge_flash.top_ip = 1;
 8016f72:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
 8016f76:	f043 0302 	orr.w	r3, r3, #2
 8016f7a:	f888 3030 	strb.w	r3, [r8, #48]	; 0x30
 8016f7e:	e718      	b.n	8016db2 <lv_page_scrollable_signal+0x1ce>
            else if(scrl_coords.x1 > page_coords.x1 + hpad) {
 8016f80:	4458      	add	r0, fp
 8016f82:	4584      	cmp	ip, r0
 8016f84:	dd20      	ble.n	8016fc8 <lv_page_scrollable_signal+0x3e4>
                        page_ext->edge_flash.top_ip == 0 && page_ext->edge_flash.bottom_ip == 0) {
 8016f86:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
                if(page_ext->edge_flash.enabled &&
 8016f8a:	f003 031f 	and.w	r3, r3, #31
 8016f8e:	2b01      	cmp	r3, #1
 8016f90:	f47f af7a 	bne.w	8016e88 <lv_page_scrollable_signal+0x2a4>
                    lv_page_start_edge_flash(page);
 8016f94:	4638      	mov	r0, r7
                refr_x = true;
 8016f96:	9303      	str	r3, [sp, #12]
                    lv_page_start_edge_flash(page);
 8016f98:	f7ff fdf0 	bl	8016b7c <lv_page_start_edge_flash>
                    page_ext->edge_flash.left_ip = 1;
 8016f9c:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
 8016fa0:	f043 0310 	orr.w	r3, r3, #16
 8016fa4:	f888 3030 	strb.w	r3, [r8, #48]	; 0x30
 8016fa8:	e6e2      	b.n	8016d70 <lv_page_scrollable_signal+0x18c>
                    new_y = ori_coords->y1 - page_coords.y1;
 8016faa:	8873      	ldrh	r3, [r6, #2]
 8016fac:	eba3 0a0a 	sub.w	sl, r3, sl
 8016fb0:	fa0f f38a 	sxth.w	r3, sl
 8016fb4:	9301      	str	r3, [sp, #4]
 8016fb6:	e6fc      	b.n	8016db2 <lv_page_scrollable_signal+0x1ce>
                    new_x = ori_coords->x1 - page_coords.x1;
 8016fb8:	8833      	ldrh	r3, [r6, #0]
                    refr_x = true;
 8016fba:	2201      	movs	r2, #1
                    new_x = ori_coords->x1 - page_coords.x1;
 8016fbc:	eba3 0a0a 	sub.w	sl, r3, sl
                    refr_x = true;
 8016fc0:	9203      	str	r2, [sp, #12]
                    new_x = ori_coords->x1 - page_coords.x1;
 8016fc2:	fa0f fb8a 	sxth.w	fp, sl
 8016fc6:	e6d3      	b.n	8016d70 <lv_page_scrollable_signal+0x18c>
        lv_coord_t new_x = lv_obj_get_x(scrl);
 8016fc8:	f8dd b00c 	ldr.w	fp, [sp, #12]
        bool refr_x = false;
 8016fcc:	9103      	str	r1, [sp, #12]
 8016fce:	e6cf      	b.n	8016d70 <lv_page_scrollable_signal+0x18c>
                    lv_page_start_edge_flash(page);
 8016fd0:	4638      	mov	r0, r7
                refr_x = true;
 8016fd2:	9203      	str	r2, [sp, #12]
                    lv_page_start_edge_flash(page);
 8016fd4:	f7ff fdd2 	bl	8016b7c <lv_page_start_edge_flash>
                    page_ext->edge_flash.right_ip = 1;
 8016fd8:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
 8016fdc:	f043 0308 	orr.w	r3, r3, #8
 8016fe0:	f888 3030 	strb.w	r3, [r8, #48]	; 0x30
 8016fe4:	e6c4      	b.n	8016d70 <lv_page_scrollable_signal+0x18c>
            if(((drag_vect.y > 0 && scrl_coords.y1 == page_coords.y1 + vpad) ||
 8016fe6:	f43f ae9f 	beq.w	8016d28 <lv_page_scrollable_signal+0x144>
                (drag_vect.y < 0 && scrl_coords.y2 == page_coords.y2 - vpad)) &&
 8016fea:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8016fee:	9901      	ldr	r1, [sp, #4]
 8016ff0:	f9bd 2036 	ldrsh.w	r2, [sp, #54]	; 0x36
 8016ff4:	1a5b      	subs	r3, r3, r1
 8016ff6:	429a      	cmp	r2, r3
 8016ff8:	f47f ae96 	bne.w	8016d28 <lv_page_scrollable_signal+0x144>
 8016ffc:	e791      	b.n	8016f22 <lv_page_scrollable_signal+0x33e>
               ((drag_vect.x > 0 && scrl_coords.x1 == page_coords.x1 + hpad) ||
 8016ffe:	f43f ae93 	beq.w	8016d28 <lv_page_scrollable_signal+0x144>
                (drag_vect.x < 0 && scrl_coords.x2 == page_coords.x2 - hpad))) {
 8017002:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8017006:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801700a:	eba3 030b 	sub.w	r3, r3, fp
 801700e:	429a      	cmp	r2, r3
 8017010:	f47f ae8a 	bne.w	8016d28 <lv_page_scrollable_signal+0x144>
 8017014:	e791      	b.n	8016f3a <lv_page_scrollable_signal+0x356>
 8017016:	bf00      	nop

08017018 <lv_slider_set_action>:
 * Set a function which will be called when a new value is set on the slider
 * @param slider pointer to slider object
 * @param action a callback function
 */
void lv_slider_set_action(lv_obj_t * slider, lv_action_t action)
{
 8017018:	b510      	push	{r4, lr}
 801701a:	460c      	mov	r4, r1
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 801701c:	f7f2 fe12 	bl	8009c44 <lv_obj_get_ext_attr>
    ext->action = action;
 8017020:	60c4      	str	r4, [r0, #12]
 8017022:	bd10      	pop	{r4, pc}

08017024 <lv_slider_set_style>:
 * @param slider pointer to a slider object
 * @param type which style should be set
 * @param style pointer to a style
 */
void lv_slider_set_style(lv_obj_t * slider, lv_slider_style_t type, lv_style_t * style)
{
 8017024:	b570      	push	{r4, r5, r6, lr}
 8017026:	460c      	mov	r4, r1
 8017028:	4616      	mov	r6, r2
 801702a:	4605      	mov	r5, r0
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 801702c:	f7f2 fe0a 	bl	8009c44 <lv_obj_get_ext_attr>

    switch(type) {
 8017030:	2c01      	cmp	r4, #1
 8017032:	d010      	beq.n	8017056 <lv_slider_set_style+0x32>
 8017034:	d308      	bcc.n	8017048 <lv_slider_set_style+0x24>
 8017036:	2c02      	cmp	r4, #2
 8017038:	d105      	bne.n	8017046 <lv_slider_set_style+0x22>
            break;
        case LV_SLIDER_STYLE_INDIC:
            lv_bar_set_style(slider, LV_BAR_STYLE_INDIC, style);
            break;
        case LV_SLIDER_STYLE_KNOB:
            ext->style_knob = style;
 801703a:	6106      	str	r6, [r0, #16]
            lv_obj_refresh_ext_size(slider);
 801703c:	4628      	mov	r0, r5
            break;
    }
}
 801703e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_obj_refresh_ext_size(slider);
 8017042:	f7f2 bb95 	b.w	8009770 <lv_obj_refresh_ext_size>
 8017046:	bd70      	pop	{r4, r5, r6, pc}
            lv_bar_set_style(slider, LV_BAR_STYLE_BG, style);
 8017048:	4632      	mov	r2, r6
 801704a:	4628      	mov	r0, r5
 801704c:	2100      	movs	r1, #0
}
 801704e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_bar_set_style(slider, LV_BAR_STYLE_BG, style);
 8017052:	f7fa b9cf 	b.w	80113f4 <lv_bar_set_style>
            lv_bar_set_style(slider, LV_BAR_STYLE_INDIC, style);
 8017056:	4632      	mov	r2, r6
 8017058:	4621      	mov	r1, r4
 801705a:	4628      	mov	r0, r5
}
 801705c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_bar_set_style(slider, LV_BAR_STYLE_INDIC, style);
 8017060:	f7fa b9c8 	b.w	80113f4 <lv_bar_set_style>

08017064 <lv_slider_create>:
{
 8017064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017066:	460f      	mov	r7, r1
    lv_obj_t * new_slider = lv_bar_create(par, copy);
 8017068:	f7fa f90a 	bl	8011280 <lv_bar_create>
    lv_mem_assert(new_slider);
 801706c:	2800      	cmp	r0, #0
 801706e:	d034      	beq.n	80170da <lv_slider_create+0x76>
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_func(new_slider);
 8017070:	4d31      	ldr	r5, [pc, #196]	; (8017138 <lv_slider_create+0xd4>)
 8017072:	4604      	mov	r4, r0
 8017074:	682b      	ldr	r3, [r5, #0]
 8017076:	2b00      	cmp	r3, #0
 8017078:	d030      	beq.n	80170dc <lv_slider_create+0x78>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_slider);
 801707a:	686b      	ldr	r3, [r5, #4]
 801707c:	2b00      	cmp	r3, #0
 801707e:	d033      	beq.n	80170e8 <lv_slider_create+0x84>
    lv_slider_ext_t * ext = lv_obj_allocate_ext_attr(new_slider, sizeof(lv_slider_ext_t));
 8017080:	2118      	movs	r1, #24
 8017082:	4620      	mov	r0, r4
 8017084:	f7f2 fb6c 	bl	8009760 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 8017088:	4605      	mov	r5, r0
 801708a:	b328      	cbz	r0, 80170d8 <lv_slider_create+0x74>
    ext->knob_in = 0;
 801708c:	7d83      	ldrb	r3, [r0, #22]
    ext->action = NULL;
 801708e:	2200      	movs	r2, #0
    ext->drag_value = LV_SLIDER_NOT_PRESSED;
 8017090:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    ext->style_knob = &lv_style_pretty;
 8017094:	4929      	ldr	r1, [pc, #164]	; (801713c <lv_slider_create+0xd8>)
    ext->knob_in = 0;
 8017096:	f362 0300 	bfi	r3, r2, #0, #1
    ext->action = NULL;
 801709a:	60ea      	str	r2, [r5, #12]
    ext->drag_value = LV_SLIDER_NOT_PRESSED;
 801709c:	82a8      	strh	r0, [r5, #20]
    lv_obj_set_signal_func(new_slider, lv_slider_signal);
 801709e:	4620      	mov	r0, r4
    ext->style_knob = &lv_style_pretty;
 80170a0:	6129      	str	r1, [r5, #16]
    ext->knob_in = 0;
 80170a2:	75ab      	strb	r3, [r5, #22]
    lv_obj_set_signal_func(new_slider, lv_slider_signal);
 80170a4:	4926      	ldr	r1, [pc, #152]	; (8017140 <lv_slider_create+0xdc>)
 80170a6:	f7f2 fb57 	bl	8009758 <lv_obj_set_signal_func>
    lv_obj_set_design_func(new_slider, lv_slider_design);
 80170aa:	4926      	ldr	r1, [pc, #152]	; (8017144 <lv_slider_create+0xe0>)
 80170ac:	4620      	mov	r0, r4
 80170ae:	f7f2 fb55 	bl	800975c <lv_obj_set_design_func>
    if(copy == NULL) {
 80170b2:	b1f7      	cbz	r7, 80170f2 <lv_slider_create+0x8e>
        lv_slider_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 80170b4:	4638      	mov	r0, r7
 80170b6:	f7f2 fdc5 	bl	8009c44 <lv_obj_get_ext_attr>
 80170ba:	4603      	mov	r3, r0
        ext->knob_in = copy_ext->knob_in;
 80170bc:	7daa      	ldrb	r2, [r5, #22]
        lv_obj_refresh_style(new_slider);
 80170be:	4620      	mov	r0, r4
        ext->knob_in = copy_ext->knob_in;
 80170c0:	7d9e      	ldrb	r6, [r3, #22]
        ext->style_knob = copy_ext->style_knob;
 80170c2:	6919      	ldr	r1, [r3, #16]
        ext->knob_in = copy_ext->knob_in;
 80170c4:	f366 0200 	bfi	r2, r6, #0, #1
        ext->action = copy_ext->action;
 80170c8:	68db      	ldr	r3, [r3, #12]
        ext->style_knob = copy_ext->style_knob;
 80170ca:	6129      	str	r1, [r5, #16]
        ext->knob_in = copy_ext->knob_in;
 80170cc:	75aa      	strb	r2, [r5, #22]
        ext->action = copy_ext->action;
 80170ce:	60eb      	str	r3, [r5, #12]
        lv_obj_refresh_style(new_slider);
 80170d0:	f7f2 fae4 	bl	800969c <lv_obj_refresh_style>
}
 80170d4:	4620      	mov	r0, r4
 80170d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80170d8:	e7fe      	b.n	80170d8 <lv_slider_create+0x74>
 80170da:	e7fe      	b.n	80170da <lv_slider_create+0x76>
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_func(new_slider);
 80170dc:	f7f2 fdb0 	bl	8009c40 <lv_obj_get_design_func>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_slider);
 80170e0:	686b      	ldr	r3, [r5, #4]
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_func(new_slider);
 80170e2:	6028      	str	r0, [r5, #0]
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_slider);
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d1cb      	bne.n	8017080 <lv_slider_create+0x1c>
 80170e8:	4620      	mov	r0, r4
 80170ea:	f7f2 fda7 	bl	8009c3c <lv_obj_get_signal_func>
 80170ee:	6068      	str	r0, [r5, #4]
 80170f0:	e7c6      	b.n	8017080 <lv_slider_create+0x1c>
        lv_obj_set_click(new_slider, true);
 80170f2:	2101      	movs	r1, #1
 80170f4:	4620      	mov	r0, r4
 80170f6:	f7f2 fafb 	bl	80096f0 <lv_obj_set_click>
        lv_obj_set_protect(new_slider, LV_PROTECT_PRESS_LOST);
 80170fa:	2110      	movs	r1, #16
 80170fc:	4620      	mov	r0, r4
 80170fe:	f7f2 fb1d 	bl	800973c <lv_obj_set_protect>
        lv_theme_t * th = lv_theme_get_current();
 8017102:	f002 fa89 	bl	8019618 <lv_theme_get_current>
        if(th) {
 8017106:	4606      	mov	r6, r0
 8017108:	b198      	cbz	r0, 8017132 <lv_slider_create+0xce>
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_BG, th->slider.bg);
 801710a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801710c:	4639      	mov	r1, r7
 801710e:	4620      	mov	r0, r4
 8017110:	f7ff ff88 	bl	8017024 <lv_slider_set_style>
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_INDIC, th->slider.indic);
 8017114:	6cb2      	ldr	r2, [r6, #72]	; 0x48
 8017116:	2101      	movs	r1, #1
 8017118:	4620      	mov	r0, r4
 801711a:	f7ff ff83 	bl	8017024 <lv_slider_set_style>
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_KNOB, th->slider.knob);
 801711e:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 8017120:	4620      	mov	r0, r4
 8017122:	f7f2 fd8f 	bl	8009c44 <lv_obj_get_ext_attr>
            ext->style_knob = style;
 8017126:	6105      	str	r5, [r0, #16]
            lv_obj_refresh_ext_size(slider);
 8017128:	4620      	mov	r0, r4
 801712a:	f7f2 fb21 	bl	8009770 <lv_obj_refresh_ext_size>
}
 801712e:	4620      	mov	r0, r4
 8017130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_KNOB, ext->style_knob);
 8017132:	692d      	ldr	r5, [r5, #16]
 8017134:	e7f4      	b.n	8017120 <lv_slider_create+0xbc>
 8017136:	bf00      	nop
 8017138:	200174fc 	.word	0x200174fc
 801713c:	20017d60 	.word	0x20017d60
 8017140:	08017505 	.word	0x08017505
 8017144:	08017169 	.word	0x08017169

08017148 <lv_slider_get_value>:
 * Get the value of a slider
 * @param slider pointer to a slider object
 * @return the value of the slider
 */
int16_t lv_slider_get_value(const lv_obj_t * slider)
{
 8017148:	b510      	push	{r4, lr}
 801714a:	4604      	mov	r4, r0
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 801714c:	f7f2 fd7a 	bl	8009c44 <lv_obj_get_ext_attr>

    if(ext->drag_value != LV_SLIDER_NOT_PRESSED) return ext->drag_value;
 8017150:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
 8017154:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8017158:	d000      	beq.n	801715c <lv_slider_get_value+0x14>
    else return lv_bar_get_value(slider);
}
 801715a:	bd10      	pop	{r4, pc}
    else return lv_bar_get_value(slider);
 801715c:	4620      	mov	r0, r4
}
 801715e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    else return lv_bar_get_value(slider);
 8017162:	f7fa b95d 	b.w	8011420 <lv_bar_get_value>
 8017166:	bf00      	nop

08017168 <lv_slider_design>:
 * @param return true/false, depends on 'mode'
 */
static bool lv_slider_design(lv_obj_t * slider, const lv_area_t * mask, lv_design_mode_t mode)
{
    /*Return false if the object is not covers the mask_p area*/
    if(mode == LV_DESIGN_COVER_CHK) {
 8017168:	2a02      	cmp	r2, #2
 801716a:	f000 8157 	beq.w	801741c <lv_slider_design+0x2b4>
        return false;
    }
    /*Draw the object*/
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 801716e:	b10a      	cbz	r2, 8017174 <lv_slider_design+0xc>
    /*Post draw when the children are drawn*/
    else if(mode == LV_DESIGN_DRAW_POST) {

    }

    return true;
 8017170:	2001      	movs	r0, #1
 8017172:	4770      	bx	lr
{
 8017174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017178:	4604      	mov	r4, r0
 801717a:	b0a1      	sub	sp, #132	; 0x84
 801717c:	4615      	mov	r5, r2
 801717e:	9104      	str	r1, [sp, #16]
        lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 8017180:	f7f2 fd60 	bl	8009c44 <lv_obj_get_ext_attr>
 8017184:	9001      	str	r0, [sp, #4]
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 8017186:	4620      	mov	r0, r4
 8017188:	f7f2 fd5c 	bl	8009c44 <lv_obj_get_ext_attr>
            style = lv_bar_get_style(slider, LV_BAR_STYLE_BG);
 801718c:	4629      	mov	r1, r5
 801718e:	4620      	mov	r0, r4
        lv_area_copy(&area_bg, &slider->coords);
 8017190:	4625      	mov	r5, r4
            style = lv_bar_get_style(slider, LV_BAR_STYLE_BG);
 8017192:	f7fa f957 	bl	8011444 <lv_bar_get_style>
 8017196:	4680      	mov	r8, r0
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 8017198:	4620      	mov	r0, r4
    memcpy(dest, src, sizeof(lv_area_t));
 801719a:	ae0a      	add	r6, sp, #40	; 0x28
 801719c:	f7f2 fd52 	bl	8009c44 <lv_obj_get_ext_attr>
            style = ext->style_knob;
 80171a0:	6903      	ldr	r3, [r0, #16]
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 80171a2:	4620      	mov	r0, r4
 80171a4:	4637      	mov	r7, r6
            style = ext->style_knob;
 80171a6:	9306      	str	r3, [sp, #24]
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 80171a8:	f7f2 fd4c 	bl	8009c44 <lv_obj_get_ext_attr>
            style = lv_bar_get_style(slider, LV_BAR_STYLE_INDIC);
 80171ac:	2101      	movs	r1, #1
 80171ae:	4620      	mov	r0, r4
 80171b0:	f7fa f948 	bl	8011444 <lv_bar_get_style>
 80171b4:	9005      	str	r0, [sp, #20]
        lv_opa_t opa_scale = lv_obj_get_opa_scale(slider);
 80171b6:	4620      	mov	r0, r4
 80171b8:	f7f2 fd24 	bl	8009c04 <lv_obj_get_opa_scale>
    return area_p->y2 - area_p->y1 + 1;
 80171bc:	f8b4 c016 	ldrh.w	ip, [r4, #22]
 80171c0:	8a63      	ldrh	r3, [r4, #18]
 80171c2:	9003      	str	r0, [sp, #12]
 80171c4:	f10c 0c01 	add.w	ip, ip, #1
    memcpy(dest, src, sizeof(lv_area_t));
 80171c8:	f855 0f10 	ldr.w	r0, [r5, #16]!
    return area_p->y2 - area_p->y1 + 1;
 80171cc:	ebac 0c03 	sub.w	ip, ip, r3
    return area_p->x2 - area_p->x1 + 1;
 80171d0:	8aa2      	ldrh	r2, [r4, #20]
    memcpy(dest, src, sizeof(lv_area_t));
 80171d2:	6869      	ldr	r1, [r5, #4]
    return area_p->y2 - area_p->y1 + 1;
 80171d4:	fa1f f38c 	uxth.w	r3, ip
    return area_p->x2 - area_p->x1 + 1;
 80171d8:	f8b4 e010 	ldrh.w	lr, [r4, #16]
 80171dc:	3201      	adds	r2, #1
        lv_coord_t pad_hor_bg = style_bg->body.padding.hor;
 80171de:	f9b8 a022 	ldrsh.w	sl, [r8, #34]	; 0x22
    return area_p->y2 - area_p->y1 + 1;
 80171e2:	9309      	str	r3, [sp, #36]	; 0x24
 80171e4:	b21b      	sxth	r3, r3
    return area_p->x2 - area_p->x1 + 1;
 80171e6:	eba2 020e 	sub.w	r2, r2, lr
        lv_coord_t pad_ver_bg = style_bg->body.padding.ver;
 80171ea:	f9b8 e020 	ldrsh.w	lr, [r8, #32]
    return area_p->y2 - area_p->y1 + 1;
 80171ee:	9302      	str	r3, [sp, #8]
    return area_p->x2 - area_p->x1 + 1;
 80171f0:	b292      	uxth	r2, r2
        if(pad_ver_bg * 2 + LV_SLIDER_SIZE_MIN > lv_area_get_height(&area_bg)) {
 80171f2:	f10e 0902 	add.w	r9, lr, #2
    memcpy(dest, src, sizeof(lv_area_t));
 80171f6:	c703      	stmia	r7!, {r0, r1}
    return area_p->y2 - area_p->y1 + 1;
 80171f8:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 80171fc:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
 8017200:	f10c 0001 	add.w	r0, ip, #1
    return area_p->x2 - area_p->x1 + 1;
 8017204:	9208      	str	r2, [sp, #32]
 8017206:	b212      	sxth	r2, r2
    return area_p->y2 - area_p->y1 + 1;
 8017208:	1a40      	subs	r0, r0, r1
    return area_p->x2 - area_p->x1 + 1;
 801720a:	9200      	str	r2, [sp, #0]
 801720c:	b200      	sxth	r0, r0
 801720e:	ebb0 0f49 	cmp.w	r0, r9, lsl #1
 8017212:	da03      	bge.n	801721c <lv_slider_design+0xb4>
            pad_ver_bg = (lv_area_get_height(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 8017214:	f1a0 0e04 	sub.w	lr, r0, #4
 8017218:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 801721c:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
        if(pad_hor_bg * 2 + LV_SLIDER_SIZE_MIN > lv_area_get_width(&area_bg)) {
 8017220:	f10a 0902 	add.w	r9, sl, #2
 8017224:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
 8017228:	1c42      	adds	r2, r0, #1
 801722a:	1bd2      	subs	r2, r2, r7
 801722c:	b212      	sxth	r2, r2
 801722e:	ebb2 0f49 	cmp.w	r2, r9, lsl #1
 8017232:	da02      	bge.n	801723a <lv_slider_design+0xd2>
            pad_hor_bg = (lv_area_get_width(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 8017234:	1f13      	subs	r3, r2, #4
 8017236:	ea4f 0a63 	mov.w	sl, r3, asr #1
        if(ext->knob_in) {  /*Enable extra size if the knob is inside */
 801723a:	9b01      	ldr	r3, [sp, #4]
 801723c:	7d9a      	ldrb	r2, [r3, #22]
 801723e:	f012 0201 	ands.w	r2, r2, #1
 8017242:	f040 80ce 	bne.w	80173e2 <lv_slider_design+0x27a>
            area_bg.x1 += slider_w < slider_h ? pad_hor_bg : 0;   /*Pad only for vertical slider*/
 8017246:	9b00      	ldr	r3, [sp, #0]
 8017248:	4699      	mov	r9, r3
 801724a:	9b02      	ldr	r3, [sp, #8]
 801724c:	4599      	cmp	r9, r3
 801724e:	f280 812b 	bge.w	80174a8 <lv_slider_design+0x340>
 8017252:	fa1f f38a 	uxth.w	r3, sl
 8017256:	441f      	add	r7, r3
            area_bg.x2 -= slider_w < slider_h ? pad_hor_bg : 0;   /*Pad only for vertical slider*/
 8017258:	1ac3      	subs	r3, r0, r3
            area_bg.x1 += slider_w < slider_h ? pad_hor_bg : 0;   /*Pad only for vertical slider*/
 801725a:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
            area_bg.x2 -= slider_w < slider_h ? pad_hor_bg : 0;   /*Pad only for vertical slider*/
 801725e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            area_bg.y1 += slider_w > slider_h ? pad_ver_bg : 0;   /*Pad only for horizontal slider*/
 8017262:	4411      	add	r1, r2
            area_bg.y2 -= slider_w > slider_h ? pad_ver_bg : 0;   /*Pad only for horizontal slider*/
 8017264:	ebac 0c02 	sub.w	ip, ip, r2
        if(lv_obj_is_focused(slider)) {
 8017268:	4620      	mov	r0, r4
            lv_style_copy(&style_tmp, style_bg);
 801726a:	af0e      	add	r7, sp, #56	; 0x38
            area_bg.y1 += slider_w > slider_h ? pad_ver_bg : 0;   /*Pad only for horizontal slider*/
 801726c:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
            area_bg.y2 -= slider_w > slider_h ? pad_ver_bg : 0;   /*Pad only for horizontal slider*/
 8017270:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
        if(lv_obj_is_focused(slider)) {
 8017274:	f7f2 fcea 	bl	8009c4c <lv_obj_is_focused>
 8017278:	2800      	cmp	r0, #0
 801727a:	f000 80c8 	beq.w	801740e <lv_slider_design+0x2a6>
            lv_style_copy(&style_tmp, style_bg);
 801727e:	4641      	mov	r1, r8
 8017280:	4638      	mov	r0, r7
 8017282:	f7f3 f9bf 	bl	800a604 <lv_style_copy>
            style_tmp.body.border.width = 0;
 8017286:	f04f 0e00 	mov.w	lr, #0
            lv_draw_rect(&area_bg, mask, &style_tmp, opa_scale);
 801728a:	463a      	mov	r2, r7
 801728c:	9b03      	ldr	r3, [sp, #12]
 801728e:	9904      	ldr	r1, [sp, #16]
 8017290:	4630      	mov	r0, r6
            style_tmp.body.border.width = 0;
 8017292:	f8ad e04c 	strh.w	lr, [sp, #76]	; 0x4c
            lv_draw_rect(&area_bg, mask, &style_tmp, opa_scale);
 8017296:	f7f5 fcc7 	bl	800cc28 <lv_draw_rect>
    return area_p->y2 - area_p->y1 + 1;
 801729a:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
    memcpy(dest, src, sizeof(lv_area_t));
 801729e:	f10d 0930 	add.w	r9, sp, #48	; 0x30
        lv_coord_t pad_ver_indic = style_indic->body.padding.ver;
 80172a2:	9905      	ldr	r1, [sp, #20]
    return area_p->y2 - area_p->y1 + 1;
 80172a4:	f8bd a02a 	ldrh.w	sl, [sp, #42]	; 0x2a
 80172a8:	f10c 0201 	add.w	r2, ip, #1
 80172ac:	f9b1 e020 	ldrsh.w	lr, [r1, #32]
 80172b0:	eba2 020a 	sub.w	r2, r2, sl
        lv_coord_t pad_hor_indic = style_indic->body.padding.hor;
 80172b4:	f9b1 3022 	ldrsh.w	r3, [r1, #34]	; 0x22
        if(pad_ver_indic * 2 + LV_SLIDER_SIZE_MIN > lv_area_get_height(&area_bg)) {
 80172b8:	f10e 0b02 	add.w	fp, lr, #2
 80172bc:	b212      	sxth	r2, r2
    memcpy(dest, src, sizeof(lv_area_t));
 80172be:	e896 0003 	ldmia.w	r6, {r0, r1}
 80172c2:	ebb2 0f4b 	cmp.w	r2, fp, lsl #1
 80172c6:	e889 0003 	stmia.w	r9, {r0, r1}
 80172ca:	da02      	bge.n	80172d2 <lv_slider_design+0x16a>
            pad_ver_indic = (lv_area_get_height(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 80172cc:	3a04      	subs	r2, #4
 80172ce:	ea4f 0e62 	mov.w	lr, r2, asr #1
    return area_p->x2 - area_p->x1 + 1;
 80172d2:	f8bd b02c 	ldrh.w	fp, [sp, #44]	; 0x2c
        if(pad_hor_indic * 2 + LV_SLIDER_SIZE_MIN > lv_area_get_width(&area_bg)) {
 80172d6:	1c98      	adds	r0, r3, #2
 80172d8:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 80172dc:	f10b 0201 	add.w	r2, fp, #1
 80172e0:	1a52      	subs	r2, r2, r1
 80172e2:	b212      	sxth	r2, r2
 80172e4:	ebb2 0f40 	cmp.w	r2, r0, lsl #1
 80172e8:	da01      	bge.n	80172ee <lv_slider_design+0x186>
            pad_hor_indic = (lv_area_get_width(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 80172ea:	1f13      	subs	r3, r2, #4
 80172ec:	105b      	asrs	r3, r3, #1
        area_indic.x1 += pad_hor_indic;
 80172ee:	b29b      	uxth	r3, r3
        lv_coord_t cur_value = lv_slider_get_value(slider);
 80172f0:	4620      	mov	r0, r4
        area_indic.y1 += pad_ver_indic;
 80172f2:	fa1f fe8e 	uxth.w	lr, lr
        area_indic.x1 += pad_hor_indic;
 80172f6:	4419      	add	r1, r3
        area_indic.x2 -= pad_hor_indic;
 80172f8:	ebab 0303 	sub.w	r3, fp, r3
        area_indic.y1 += pad_ver_indic;
 80172fc:	44f2      	add	sl, lr
        area_indic.y2 -= pad_ver_indic;
 80172fe:	ebac 0e0e 	sub.w	lr, ip, lr
        area_indic.x1 += pad_hor_indic;
 8017302:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
        area_indic.x2 -= pad_hor_indic;
 8017306:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
        area_indic.y2 -= pad_ver_indic;
 801730a:	f8ad e036 	strh.w	lr, [sp, #54]	; 0x36
        area_indic.y1 += pad_ver_indic;
 801730e:	f8ad a032 	strh.w	sl, [sp, #50]	; 0x32
        lv_coord_t cur_value = lv_slider_get_value(slider);
 8017312:	f7ff ff19 	bl	8017148 <lv_slider_get_value>
 8017316:	4683      	mov	fp, r0
 * @param slider pointer to a slider object
 * @return the minimum value of the slider
 */
static inline int16_t lv_slider_get_min_value(const lv_obj_t * slider)
{
    return lv_bar_get_min_value(slider);
 8017318:	4620      	mov	r0, r4
 801731a:	f7fa f887 	bl	801142c <lv_bar_get_min_value>
 801731e:	9007      	str	r0, [sp, #28]
 * @param slider pointer to a slider object
 * @return the maximum value of the slider
 */
static inline int16_t lv_slider_get_max_value(const lv_obj_t * slider)
{
    return lv_bar_get_max_value(slider);
 8017320:	4620      	mov	r0, r4
 8017322:	f7fa f889 	bl	8011438 <lv_bar_get_max_value>
        if(ext->drag_value != LV_SLIDER_NOT_PRESSED) cur_value = ext->drag_value;
 8017326:	9b01      	ldr	r3, [sp, #4]
        if(slider_w >= slider_h) {
 8017328:	9a02      	ldr	r2, [sp, #8]
        if(ext->drag_value != LV_SLIDER_NOT_PRESSED) cur_value = ext->drag_value;
 801732a:	f9b3 1014 	ldrsh.w	r1, [r3, #20]
        if(slider_w >= slider_h) {
 801732e:	9b00      	ldr	r3, [sp, #0]
        lv_coord_t cur_value = lv_slider_get_value(slider);
 8017330:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 8017334:	bf08      	it	eq
 8017336:	4659      	moveq	r1, fp
        if(slider_w >= slider_h) {
 8017338:	4293      	cmp	r3, r2
 801733a:	9a07      	ldr	r2, [sp, #28]
 801733c:	f2c0 808b 	blt.w	8017456 <lv_slider_design+0x2ee>
 8017340:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
            area_indic.x2 = (int32_t)((int32_t)(lv_area_get_width(&area_indic)) * (cur_value - min_value)) / (max_value - min_value);
 8017344:	eba1 0b02 	sub.w	fp, r1, r2
 8017348:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 801734c:	eba0 0a02 	sub.w	sl, r0, r2
 8017350:	3301      	adds	r3, #1
            area_indic.x2 = area_indic.x1 + area_indic.x2 - 1;
 8017352:	f10e 30ff 	add.w	r0, lr, #4294967295
 8017356:	eba3 030e 	sub.w	r3, r3, lr
            area_indic.x2 = (int32_t)((int32_t)(lv_area_get_width(&area_indic)) * (cur_value - min_value)) / (max_value - min_value);
 801735a:	b21b      	sxth	r3, r3
 801735c:	fb0b f303 	mul.w	r3, fp, r3
 8017360:	fb93 f3fa 	sdiv	r3, r3, sl
            area_indic.x2 = area_indic.x1 + area_indic.x2 - 1;
 8017364:	4403      	add	r3, r0
 8017366:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
        if(cur_value != min_value) lv_draw_rect(&area_indic, mask, style_indic, opa_scale);
 801736a:	428a      	cmp	r2, r1
 801736c:	d005      	beq.n	801737a <lv_slider_design+0x212>
 801736e:	9a05      	ldr	r2, [sp, #20]
 8017370:	4648      	mov	r0, r9
 8017372:	9b03      	ldr	r3, [sp, #12]
 8017374:	9904      	ldr	r1, [sp, #16]
 8017376:	f7f5 fc57 	bl	800cc28 <lv_draw_rect>
        if(lv_obj_is_focused(slider)) {
 801737a:	4620      	mov	r0, r4
 801737c:	f7f2 fc66 	bl	8009c4c <lv_obj_is_focused>
 8017380:	2800      	cmp	r0, #0
 8017382:	d17d      	bne.n	8017480 <lv_slider_design+0x318>
    memcpy(dest, src, sizeof(lv_area_t));
 8017384:	6869      	ldr	r1, [r5, #4]
 8017386:	463b      	mov	r3, r7
 8017388:	6828      	ldr	r0, [r5, #0]
        if(slider_w >= slider_h) {
 801738a:	9a02      	ldr	r2, [sp, #8]
 801738c:	c303      	stmia	r3!, {r0, r1}
 801738e:	9b00      	ldr	r3, [sp, #0]
 8017390:	4619      	mov	r1, r3
            if(ext->knob_in == 0) {
 8017392:	9b01      	ldr	r3, [sp, #4]
        if(slider_w >= slider_h) {
 8017394:	4291      	cmp	r1, r2
            if(ext->knob_in == 0) {
 8017396:	7d9b      	ldrb	r3, [r3, #22]
        if(slider_w >= slider_h) {
 8017398:	db42      	blt.n	8017420 <lv_slider_design+0x2b8>
            if(ext->knob_in == 0) {
 801739a:	07d9      	lsls	r1, r3, #31
 801739c:	f100 8088 	bmi.w	80174b0 <lv_slider_design+0x348>
                knob_area.x1 = area_indic.x2 - slider_h / 2;
 80173a0:	4613      	mov	r3, r2
                knob_area.x2 = knob_area.x1 + slider_h - 1;
 80173a2:	9909      	ldr	r1, [sp, #36]	; 0x24
                knob_area.x1 = area_indic.x2 - slider_h / 2;
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
                knob_area.x2 = knob_area.x1 + slider_h - 1;
 80173aa:	f101 3cff 	add.w	ip, r1, #4294967295
                knob_area.x1 = area_indic.x2 - slider_h / 2;
 80173ae:	bfb8      	it	lt
 80173b0:	3201      	addlt	r2, #1
 80173b2:	eba3 0362 	sub.w	r3, r3, r2, asr #1
 80173b6:	b29b      	uxth	r3, r3
                knob_area.x2 = knob_area.x1 + slider_h - 1;
 80173b8:	449c      	add	ip, r3
                knob_area.x1 = area_indic.x2 - slider_h / 2;
 80173ba:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
                knob_area.x2 = knob_area.x1 + slider_h - 1;
 80173be:	f8ad c03c 	strh.w	ip, [sp, #60]	; 0x3c
            knob_area.y1 = slider->coords.y1;
 80173c2:	8a62      	ldrh	r2, [r4, #18]
            knob_area.y2 = slider->coords.y2;
 80173c4:	8ae3      	ldrh	r3, [r4, #22]
            knob_area.y1 = slider->coords.y1;
 80173c6:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
            knob_area.y2 = slider->coords.y2;
 80173ca:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
        lv_draw_rect(&knob_area, mask, style_knob, opa_scale);
 80173ce:	4638      	mov	r0, r7
 80173d0:	9b03      	ldr	r3, [sp, #12]
 80173d2:	9a06      	ldr	r2, [sp, #24]
 80173d4:	9904      	ldr	r1, [sp, #16]
 80173d6:	f7f5 fc27 	bl	800cc28 <lv_draw_rect>
 80173da:	2001      	movs	r0, #1
}
 80173dc:	b021      	add	sp, #132	; 0x84
 80173de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            area_bg.x1 += pad_hor_bg;
 80173e2:	fa1f f38a 	uxth.w	r3, sl
            area_bg.x2 -= pad_hor_bg;
 80173e6:	1ac0      	subs	r0, r0, r3
            area_bg.x1 += pad_hor_bg;
 80173e8:	441f      	add	r7, r3
            area_bg.y1 += pad_hor_bg;
 80173ea:	4419      	add	r1, r3
            area_bg.y2 -= pad_hor_bg;
 80173ec:	ebac 0303 	sub.w	r3, ip, r3
            area_bg.x2 -= pad_hor_bg;
 80173f0:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
        if(lv_obj_is_focused(slider)) {
 80173f4:	4620      	mov	r0, r4
            area_bg.x1 += pad_hor_bg;
 80173f6:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
            lv_style_copy(&style_tmp, style_bg);
 80173fa:	af0e      	add	r7, sp, #56	; 0x38
            area_bg.y1 += pad_hor_bg;
 80173fc:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
            area_bg.y2 -= pad_hor_bg;
 8017400:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        if(lv_obj_is_focused(slider)) {
 8017404:	f7f2 fc22 	bl	8009c4c <lv_obj_is_focused>
 8017408:	2800      	cmp	r0, #0
 801740a:	f47f af38 	bne.w	801727e <lv_slider_design+0x116>
            lv_draw_rect(&area_bg, mask, style_bg, opa_scale);
 801740e:	9b03      	ldr	r3, [sp, #12]
 8017410:	4642      	mov	r2, r8
 8017412:	9904      	ldr	r1, [sp, #16]
 8017414:	4630      	mov	r0, r6
 8017416:	f7f5 fc07 	bl	800cc28 <lv_draw_rect>
 801741a:	e73e      	b.n	801729a <lv_slider_design+0x132>
        return false;
 801741c:	2000      	movs	r0, #0
 801741e:	4770      	bx	lr
            if(ext->knob_in == 0) {
 8017420:	07db      	lsls	r3, r3, #31
 8017422:	d45a      	bmi.n	80174da <lv_slider_design+0x372>
                knob_area.y1 = area_indic.y1 - slider_w / 2;
 8017424:	9b00      	ldr	r3, [sp, #0]
                knob_area.y2 = knob_area.y1 + slider_w - 1;
 8017426:	9a08      	ldr	r2, [sp, #32]
                knob_area.y1 = area_indic.y1 - slider_w / 2;
 8017428:	2b00      	cmp	r3, #0
                knob_area.y2 = knob_area.y1 + slider_w - 1;
 801742a:	f102 32ff 	add.w	r2, r2, #4294967295
                knob_area.y1 = area_indic.y1 - slider_w / 2;
 801742e:	4619      	mov	r1, r3
 8017430:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8017434:	bfb8      	it	lt
 8017436:	3101      	addlt	r1, #1
 8017438:	eba3 0361 	sub.w	r3, r3, r1, asr #1
 801743c:	b29b      	uxth	r3, r3
                knob_area.y2 = knob_area.y1 + slider_w - 1;
 801743e:	441a      	add	r2, r3
                knob_area.y1 = area_indic.y1 - slider_w / 2;
 8017440:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
                knob_area.y2 = knob_area.y1 + slider_w - 1;
 8017444:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
            knob_area.x1 = slider->coords.x1;
 8017448:	8a22      	ldrh	r2, [r4, #16]
            knob_area.x2 = slider->coords.x2;
 801744a:	8aa3      	ldrh	r3, [r4, #20]
            knob_area.x1 = slider->coords.x1;
 801744c:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
            knob_area.x2 = slider->coords.x2;
 8017450:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
 8017454:	e7bb      	b.n	80173ce <lv_slider_design+0x266>
 8017456:	f8bd e036 	ldrh.w	lr, [sp, #54]	; 0x36
            area_indic.y1 = (int32_t)((int32_t)(lv_area_get_height(&area_indic)) * (cur_value - min_value)) / (max_value - min_value);
 801745a:	eba0 0a02 	sub.w	sl, r0, r2
    return area_p->y2 - area_p->y1 + 1;
 801745e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8017462:	eba1 0b02 	sub.w	fp, r1, r2
 8017466:	f10e 0001 	add.w	r0, lr, #1
 801746a:	b280      	uxth	r0, r0
 801746c:	1ac3      	subs	r3, r0, r3
 801746e:	b21b      	sxth	r3, r3
 8017470:	fb0b f303 	mul.w	r3, fp, r3
 8017474:	fb93 f3fa 	sdiv	r3, r3, sl
            area_indic.y1 = area_indic.y2 - area_indic.y1 + 1;
 8017478:	1ac3      	subs	r3, r0, r3
 801747a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801747e:	e774      	b.n	801736a <lv_slider_design+0x202>
            lv_style_copy(&style_tmp, style_bg);
 8017480:	4641      	mov	r1, r8
 8017482:	4638      	mov	r0, r7
 8017484:	f7f3 f8be 	bl	800a604 <lv_style_copy>
            style_tmp.body.empty = 1;
 8017488:	f89d 305e 	ldrb.w	r3, [sp, #94]	; 0x5e
            style_tmp.body.shadow.width = 0;
 801748c:	2100      	movs	r1, #0
            lv_draw_rect(&area_bg, mask, &style_tmp, opa_scale);
 801748e:	4630      	mov	r0, r6
            style_tmp.body.empty = 1;
 8017490:	f043 0601 	orr.w	r6, r3, #1
            lv_draw_rect(&area_bg, mask, &style_tmp, opa_scale);
 8017494:	463a      	mov	r2, r7
            style_tmp.body.shadow.width = 0;
 8017496:	f8ad 1054 	strh.w	r1, [sp, #84]	; 0x54
            lv_draw_rect(&area_bg, mask, &style_tmp, opa_scale);
 801749a:	9b03      	ldr	r3, [sp, #12]
 801749c:	9904      	ldr	r1, [sp, #16]
            style_tmp.body.empty = 1;
 801749e:	f88d 605e 	strb.w	r6, [sp, #94]	; 0x5e
            lv_draw_rect(&area_bg, mask, &style_tmp, opa_scale);
 80174a2:	f7f5 fbc1 	bl	800cc28 <lv_draw_rect>
 80174a6:	e76d      	b.n	8017384 <lv_slider_design+0x21c>
            area_bg.y1 += slider_w > slider_h ? pad_ver_bg : 0;   /*Pad only for horizontal slider*/
 80174a8:	bfc8      	it	gt
 80174aa:	fa1f f28e 	uxthgt.w	r2, lr
 80174ae:	e6d8      	b.n	8017262 <lv_slider_design+0xfa>
                knob_area.x1 = (int32_t)((int32_t)(slider_w - slider_h - 1) * (cur_value - min_value)) / (max_value - min_value);
 80174b0:	9a02      	ldr	r2, [sp, #8]
 80174b2:	9b00      	ldr	r3, [sp, #0]
                knob_area.x2 = knob_area.x1 + slider_h - 1;
 80174b4:	9909      	ldr	r1, [sp, #36]	; 0x24
                knob_area.x1 = (int32_t)((int32_t)(slider_w - slider_h - 1) * (cur_value - min_value)) / (max_value - min_value);
 80174b6:	1a9b      	subs	r3, r3, r2
                knob_area.x1 += slider->coords.x1;
 80174b8:	8a22      	ldrh	r2, [r4, #16]
                knob_area.x2 = knob_area.x1 + slider_h - 1;
 80174ba:	f101 3cff 	add.w	ip, r1, #4294967295
                knob_area.x1 = (int32_t)((int32_t)(slider_w - slider_h - 1) * (cur_value - min_value)) / (max_value - min_value);
 80174be:	3b01      	subs	r3, #1
 80174c0:	fb0b fb03 	mul.w	fp, fp, r3
 80174c4:	fb9b fafa 	sdiv	sl, fp, sl
                knob_area.x1 += slider->coords.x1;
 80174c8:	4492      	add	sl, r2
 80174ca:	fa1f fa8a 	uxth.w	sl, sl
                knob_area.x2 = knob_area.x1 + slider_h - 1;
 80174ce:	44d4      	add	ip, sl
                knob_area.x1 += slider->coords.x1;
 80174d0:	f8ad a038 	strh.w	sl, [sp, #56]	; 0x38
                knob_area.x2 = knob_area.x1 + slider_h - 1;
 80174d4:	f8ad c03c 	strh.w	ip, [sp, #60]	; 0x3c
 80174d8:	e773      	b.n	80173c2 <lv_slider_design+0x25a>
                knob_area.y2 = (int32_t)((int32_t)(slider_h - slider_w - 1) * (cur_value - min_value)) / (max_value - min_value);
 80174da:	9a00      	ldr	r2, [sp, #0]
 80174dc:	9b02      	ldr	r3, [sp, #8]
                knob_area.y2 = slider->coords.y2 - knob_area.y2;
 80174de:	8ae1      	ldrh	r1, [r4, #22]
                knob_area.y2 = (int32_t)((int32_t)(slider_h - slider_w - 1) * (cur_value - min_value)) / (max_value - min_value);
 80174e0:	1a9b      	subs	r3, r3, r2
                knob_area.y1 = knob_area.y2 - slider_w - 1;
 80174e2:	9a08      	ldr	r2, [sp, #32]
                knob_area.y2 = (int32_t)((int32_t)(slider_h - slider_w - 1) * (cur_value - min_value)) / (max_value - min_value);
 80174e4:	3b01      	subs	r3, #1
                knob_area.y1 = knob_area.y2 - slider_w - 1;
 80174e6:	43d2      	mvns	r2, r2
                knob_area.y2 = (int32_t)((int32_t)(slider_h - slider_w - 1) * (cur_value - min_value)) / (max_value - min_value);
 80174e8:	fb0b fb03 	mul.w	fp, fp, r3
 80174ec:	fb9b fafa 	sdiv	sl, fp, sl
                knob_area.y2 = slider->coords.y2 - knob_area.y2;
 80174f0:	eba1 0a0a 	sub.w	sl, r1, sl
 80174f4:	fa1f fa8a 	uxth.w	sl, sl
                knob_area.y1 = knob_area.y2 - slider_w - 1;
 80174f8:	4452      	add	r2, sl
                knob_area.y2 = slider->coords.y2 - knob_area.y2;
 80174fa:	f8ad a03e 	strh.w	sl, [sp, #62]	; 0x3e
                knob_area.y1 = knob_area.y2 - slider_w - 1;
 80174fe:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 8017502:	e7a1      	b.n	8017448 <lv_slider_design+0x2e0>

08017504 <lv_slider_signal>:
static lv_res_t lv_slider_signal(lv_obj_t * slider, lv_signal_t sign, void * param)
{
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(slider, sign, param);
 8017504:	4ba1      	ldr	r3, [pc, #644]	; (801778c <lv_slider_signal+0x288>)
{
 8017506:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    res = ancestor_signal(slider, sign, param);
 801750a:	685b      	ldr	r3, [r3, #4]
{
 801750c:	b082      	sub	sp, #8
 801750e:	4606      	mov	r6, r0
 8017510:	460d      	mov	r5, r1
 8017512:	4617      	mov	r7, r2
    res = ancestor_signal(slider, sign, param);
 8017514:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8017516:	2801      	cmp	r0, #1
    res = ancestor_signal(slider, sign, param);
 8017518:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
 801751a:	d003      	beq.n	8017524 <lv_slider_signal+0x20>
        }
        buf->type[i] = "lv_slider";
    }

    return res;
}
 801751c:	4620      	mov	r0, r4
 801751e:	b002      	add	sp, #8
 8017520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 8017524:	4630      	mov	r0, r6
 8017526:	f7f2 fb8d 	bl	8009c44 <lv_obj_get_ext_attr>
 801752a:	4680      	mov	r8, r0
    lv_coord_t w = lv_obj_get_width(slider);
 801752c:	4630      	mov	r0, r6
 801752e:	f7f2 fa63 	bl	80099f8 <lv_obj_get_width>
 8017532:	4681      	mov	r9, r0
    lv_coord_t h = lv_obj_get_height(slider);
 8017534:	4630      	mov	r0, r6
 8017536:	f7f2 fa65 	bl	8009a04 <lv_obj_get_height>
    if(sign == LV_SIGNAL_PRESSED) {
 801753a:	2d08      	cmp	r5, #8
    lv_coord_t h = lv_obj_get_height(slider);
 801753c:	4682      	mov	sl, r0
    if(sign == LV_SIGNAL_PRESSED) {
 801753e:	d075      	beq.n	801762c <lv_slider_signal+0x128>
    } else if(sign == LV_SIGNAL_PRESSING) {
 8017540:	2d09      	cmp	r5, #9
 8017542:	d01a      	beq.n	801757a <lv_slider_signal+0x76>
    } else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
 8017544:	f1a5 030a 	sub.w	r3, r5, #10
 8017548:	2b01      	cmp	r3, #1
 801754a:	d950      	bls.n	80175ee <lv_slider_signal+0xea>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 801754c:	2d02      	cmp	r5, #2
 801754e:	d05c      	beq.n	801760a <lv_slider_signal+0x106>
    } else if(sign == LV_SIGNAL_REFR_EXT_SIZE) {
 8017550:	2d04      	cmp	r5, #4
 8017552:	d073      	beq.n	801763c <lv_slider_signal+0x138>
    } else if(sign == LV_SIGNAL_CONTROLL) {
 8017554:	2d12      	cmp	r5, #18
 8017556:	f000 80a0 	beq.w	801769a <lv_slider_signal+0x196>
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 801755a:	2d14      	cmp	r5, #20
 801755c:	d06c      	beq.n	8017638 <lv_slider_signal+0x134>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801755e:	2d06      	cmp	r5, #6
 8017560:	d1dc      	bne.n	801751c <lv_slider_signal+0x18>
 8017562:	1f3a      	subs	r2, r7, #4
 8017564:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 8017566:	f852 1f04 	ldr.w	r1, [r2, #4]!
 801756a:	b111      	cbz	r1, 8017572 <lv_slider_signal+0x6e>
 801756c:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) {  /*Find the last set data*/
 801756e:	2b07      	cmp	r3, #7
 8017570:	d1f9      	bne.n	8017566 <lv_slider_signal+0x62>
        buf->type[i] = "lv_slider";
 8017572:	4a87      	ldr	r2, [pc, #540]	; (8017790 <lv_slider_signal+0x28c>)
 8017574:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 8017578:	e7d0      	b.n	801751c <lv_slider_signal+0x18>
        lv_indev_get_point(param, &p);
 801757a:	4638      	mov	r0, r7
 801757c:	a901      	add	r1, sp, #4
 801757e:	f7f1 fbb3 	bl	8008ce8 <lv_indev_get_point>
        if(w > h) {
 8017582:	45d1      	cmp	r9, sl
 8017584:	f340 80b8 	ble.w	80176f8 <lv_slider_signal+0x1f4>
            p.x -= slider->coords.x1 + h / 2;    /*Modify the point to shift with half knob (important on the start and end)*/
 8017588:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801758c:	f1ba 0f00 	cmp.w	sl, #0
 8017590:	8a31      	ldrh	r1, [r6, #16]
 8017592:	4652      	mov	r2, sl
 8017594:	bfb8      	it	lt
 8017596:	f10a 0201 	addlt.w	r2, sl, #1
            tmp = (int32_t)((int32_t) p.x * (ext->bar.max_value - ext->bar.min_value + 1)) / (w - knob_w);
 801759a:	eba9 090a 	sub.w	r9, r9, sl
            p.x -= slider->coords.x1 + h / 2;    /*Modify the point to shift with half knob (important on the start and end)*/
 801759e:	1a5b      	subs	r3, r3, r1
            tmp = (int32_t)((int32_t) p.x * (ext->bar.max_value - ext->bar.min_value + 1)) / (w - knob_w);
 80175a0:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
            p.x -= slider->coords.x1 + h / 2;    /*Modify the point to shift with half knob (important on the start and end)*/
 80175a4:	eba3 0362 	sub.w	r3, r3, r2, asr #1
            tmp = (int32_t)((int32_t) p.x * (ext->bar.max_value - ext->bar.min_value + 1)) / (w - knob_w);
 80175a8:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
            p.x -= slider->coords.x1 + h / 2;    /*Modify the point to shift with half knob (important on the start and end)*/
 80175ac:	b21b      	sxth	r3, r3
            tmp = (int32_t)((int32_t) p.x * (ext->bar.max_value - ext->bar.min_value + 1)) / (w - knob_w);
 80175ae:	1a88      	subs	r0, r1, r2
            p.x -= slider->coords.x1 + h / 2;    /*Modify the point to shift with half knob (important on the start and end)*/
 80175b0:	f8ad 3004 	strh.w	r3, [sp, #4]
            tmp = (int32_t)((int32_t) p.x * (ext->bar.max_value - ext->bar.min_value + 1)) / (w - knob_w);
 80175b4:	fb00 3303 	mla	r3, r0, r3, r3
 80175b8:	fb93 f3f9 	sdiv	r3, r3, r9
            tmp += ext->bar.min_value;
 80175bc:	4413      	add	r3, r2
 80175be:	b21b      	sxth	r3, r3
        if(tmp < ext->bar.min_value) tmp = ext->bar.min_value;
 80175c0:	4293      	cmp	r3, r2
 80175c2:	db03      	blt.n	80175cc <lv_slider_signal+0xc8>
 80175c4:	4299      	cmp	r1, r3
 80175c6:	460a      	mov	r2, r1
 80175c8:	bfa8      	it	ge
 80175ca:	461a      	movge	r2, r3
        if(tmp != ext->drag_value) {
 80175cc:	f9b8 3014 	ldrsh.w	r3, [r8, #20]
 80175d0:	4293      	cmp	r3, r2
 80175d2:	d0a3      	beq.n	801751c <lv_slider_signal+0x18>
            ext->drag_value = tmp;
 80175d4:	f8a8 2014 	strh.w	r2, [r8, #20]
            lv_obj_invalidate(slider);
 80175d8:	4630      	mov	r0, r6
 80175da:	f7f1 fc2d 	bl	8008e38 <lv_obj_invalidate>
            if(ext->action != NULL) res = ext->action(slider);
 80175de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	d09a      	beq.n	801751c <lv_slider_signal+0x18>
            if(ext->action != NULL) res = ext->action(slider);
 80175e6:	4630      	mov	r0, r6
 80175e8:	4798      	blx	r3
 80175ea:	4604      	mov	r4, r0
 80175ec:	e796      	b.n	801751c <lv_slider_signal+0x18>
    lv_bar_set_value(slider, value);
 80175ee:	f9b8 1014 	ldrsh.w	r1, [r8, #20]
 80175f2:	4630      	mov	r0, r6
 80175f4:	f7f9 fcf0 	bl	8010fd8 <lv_bar_set_value>
        ext->drag_value = LV_SLIDER_NOT_PRESSED;
 80175f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
        if(ext->action != NULL) res = ext->action(slider);
 80175fc:	f8d8 300c 	ldr.w	r3, [r8, #12]
        ext->drag_value = LV_SLIDER_NOT_PRESSED;
 8017600:	f8a8 2014 	strh.w	r2, [r8, #20]
        if(ext->action != NULL) res = ext->action(slider);
 8017604:	2b00      	cmp	r3, #0
 8017606:	d1ee      	bne.n	80175e6 <lv_slider_signal+0xe2>
 8017608:	e788      	b.n	801751c <lv_slider_signal+0x18>
        if(lv_obj_get_width(slider) != lv_area_get_width(param) ||
 801760a:	4630      	mov	r0, r6
 801760c:	f7f2 f9f4 	bl	80099f8 <lv_obj_get_width>
    return area_p->x2 - area_p->x1 + 1;
 8017610:	88bb      	ldrh	r3, [r7, #4]
 8017612:	883a      	ldrh	r2, [r7, #0]
 8017614:	3301      	adds	r3, #1
 8017616:	1a9b      	subs	r3, r3, r2
 8017618:	b21b      	sxth	r3, r3
 801761a:	4298      	cmp	r0, r3
 801761c:	f000 809d 	beq.w	801775a <lv_slider_signal+0x256>
            slider->signal_func(slider, LV_SIGNAL_REFR_EXT_SIZE, NULL);
 8017620:	69b3      	ldr	r3, [r6, #24]
 8017622:	4630      	mov	r0, r6
 8017624:	2200      	movs	r2, #0
 8017626:	2104      	movs	r1, #4
 8017628:	4798      	blx	r3
 801762a:	e777      	b.n	801751c <lv_slider_signal+0x18>
        ext->drag_value = lv_slider_get_value(slider);
 801762c:	4630      	mov	r0, r6
 801762e:	f7ff fd8b 	bl	8017148 <lv_slider_get_value>
 8017632:	f8a8 0014 	strh.w	r0, [r8, #20]
 8017636:	e771      	b.n	801751c <lv_slider_signal+0x18>
        *editable = true;
 8017638:	703c      	strb	r4, [r7, #0]
 801763a:	e76f      	b.n	801751c <lv_slider_signal+0x18>
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 801763c:	4630      	mov	r0, r6
 801763e:	f7f2 fb01 	bl	8009c44 <lv_obj_get_ext_attr>
            style = lv_bar_get_style(slider, LV_BAR_STYLE_BG);
 8017642:	2100      	movs	r1, #0
 8017644:	4630      	mov	r0, r6
 8017646:	f7f9 fefd 	bl	8011444 <lv_bar_get_style>
 801764a:	4605      	mov	r5, r0
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 801764c:	4630      	mov	r0, r6
 801764e:	f7f2 faf9 	bl	8009c44 <lv_obj_get_ext_attr>
        if(ext->knob_in == 0) {
 8017652:	f898 3016 	ldrb.w	r3, [r8, #22]
        lv_coord_t shadow_w = knob_style->body.shadow.width;
 8017656:	6902      	ldr	r2, [r0, #16]
        if(ext->knob_in == 0) {
 8017658:	07db      	lsls	r3, r3, #31
        lv_coord_t shadow_w = knob_style->body.shadow.width;
 801765a:	f9b2 101c 	ldrsh.w	r1, [r2, #28]
        if(ext->knob_in == 0) {
 801765e:	d468      	bmi.n	8017732 <lv_slider_signal+0x22e>
            lv_coord_t x = LV_MATH_MIN(w / 2 + 1 + shadow_w, h / 2 + 1 + shadow_w);
 8017660:	f1ba 0f00 	cmp.w	sl, #0
            if(slider->ext_size < x) slider->ext_size = x;
 8017664:	f9b6 0034 	ldrsh.w	r0, [r6, #52]	; 0x34
            lv_coord_t x = LV_MATH_MIN(w / 2 + 1 + shadow_w, h / 2 + 1 + shadow_w);
 8017668:	bfb8      	it	lt
 801766a:	f10a 0a01 	addlt.w	sl, sl, #1
 801766e:	f1b9 0f00 	cmp.w	r9, #0
 8017672:	bfb8      	it	lt
 8017674:	f109 0901 	addlt.w	r9, r9, #1
 8017678:	f34a 034f 	sbfx	r3, sl, #1, #16
 801767c:	f349 024f 	sbfx	r2, r9, #1, #16
 8017680:	3301      	adds	r3, #1
 8017682:	3201      	adds	r2, #1
 8017684:	440b      	add	r3, r1
 8017686:	440a      	add	r2, r1
 8017688:	4293      	cmp	r3, r2
 801768a:	bfa8      	it	ge
 801768c:	4613      	movge	r3, r2
 801768e:	b21b      	sxth	r3, r3
            if(slider->ext_size < x) slider->ext_size = x;
 8017690:	4298      	cmp	r0, r3
 8017692:	f6bf af43 	bge.w	801751c <lv_slider_signal+0x18>
 8017696:	86b3      	strh	r3, [r6, #52]	; 0x34
 8017698:	e740      	b.n	801751c <lv_slider_signal+0x18>
        ext->drag_value = LV_SLIDER_NOT_PRESSED;
 801769a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
        char c = *((char *)param);
 801769e:	783d      	ldrb	r5, [r7, #0]
        lv_group_t * g = lv_obj_get_group(slider);
 80176a0:	4630      	mov	r0, r6
        ext->drag_value = LV_SLIDER_NOT_PRESSED;
 80176a2:	f8a8 3014 	strh.w	r3, [r8, #20]
        lv_group_t * g = lv_obj_get_group(slider);
 80176a6:	f7f2 facf 	bl	8009c48 <lv_obj_get_group>
 80176aa:	4681      	mov	r9, r0
        bool editing = lv_group_get_editing(g);
 80176ac:	f7f0 fdbc 	bl	8008228 <lv_group_get_editing>
 80176b0:	4607      	mov	r7, r0
        lv_hal_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 80176b2:	f7f1 faf5 	bl	8008ca0 <lv_indev_get_act>
            if(editing) lv_group_set_editing(g, false);
 80176b6:	2d0a      	cmp	r5, #10
 80176b8:	bf14      	ite	ne
 80176ba:	2700      	movne	r7, #0
 80176bc:	f007 0701 	andeq.w	r7, r7, #1
        lv_hal_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 80176c0:	f7f1 faf4 	bl	8008cac <lv_indev_get_type>
            if(editing) lv_group_set_editing(g, false);
 80176c4:	b10f      	cbz	r7, 80176ca <lv_slider_signal+0x1c6>
 80176c6:	2804      	cmp	r0, #4
 80176c8:	d05b      	beq.n	8017782 <lv_slider_signal+0x27e>
        if(c == LV_GROUP_KEY_RIGHT || c == LV_GROUP_KEY_UP) {
 80176ca:	f005 03fd 	and.w	r3, r5, #253	; 0xfd
 80176ce:	2b11      	cmp	r3, #17
 80176d0:	d04f      	beq.n	8017772 <lv_slider_signal+0x26e>
        } else if(c == LV_GROUP_KEY_LEFT || c == LV_GROUP_KEY_DOWN) {
 80176d2:	2d14      	cmp	r5, #20
 80176d4:	d002      	beq.n	80176dc <lv_slider_signal+0x1d8>
 80176d6:	2d12      	cmp	r5, #18
 80176d8:	f47f af20 	bne.w	801751c <lv_slider_signal+0x18>
            lv_slider_set_value(slider, lv_slider_get_value(slider) - 1);
 80176dc:	4630      	mov	r0, r6
 80176de:	f7ff fd33 	bl	8017148 <lv_slider_get_value>
 80176e2:	1e41      	subs	r1, r0, #1
 80176e4:	4630      	mov	r0, r6
 80176e6:	b209      	sxth	r1, r1
 80176e8:	f7f9 fc76 	bl	8010fd8 <lv_bar_set_value>
            if(ext->action != NULL) res = ext->action(slider);
 80176ec:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80176f0:	2b00      	cmp	r3, #0
 80176f2:	f47f af78 	bne.w	80175e6 <lv_slider_signal+0xe2>
 80176f6:	e711      	b.n	801751c <lv_slider_signal+0x18>
            p.y -= slider->coords.y1 + w / 2;    /*Modify the point to shift with half knob (important on the start and end)*/
 80176f8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80176fc:	f1b9 0f00 	cmp.w	r9, #0
 8017700:	8a71      	ldrh	r1, [r6, #18]
 8017702:	464a      	mov	r2, r9
 8017704:	bfb8      	it	lt
 8017706:	f109 0201 	addlt.w	r2, r9, #1
            tmp = (int32_t)((int32_t) p.y * (ext->bar.max_value - ext->bar.min_value + 1)) / (h - knob_h);
 801770a:	ebaa 0909 	sub.w	r9, sl, r9
            p.y -= slider->coords.y1 + w / 2;    /*Modify the point to shift with half knob (important on the start and end)*/
 801770e:	1a5b      	subs	r3, r3, r1
            tmp = (int32_t)((int32_t) p.y * (ext->bar.max_value - ext->bar.min_value + 1)) / (h - knob_h);
 8017710:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
            p.y -= slider->coords.y1 + w / 2;    /*Modify the point to shift with half knob (important on the start and end)*/
 8017714:	eba3 0362 	sub.w	r3, r3, r2, asr #1
            tmp = (int32_t)((int32_t) p.y * (ext->bar.max_value - ext->bar.min_value + 1)) / (h - knob_h);
 8017718:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
            p.y -= slider->coords.y1 + w / 2;    /*Modify the point to shift with half knob (important on the start and end)*/
 801771c:	b21b      	sxth	r3, r3
            tmp = (int32_t)((int32_t) p.y * (ext->bar.max_value - ext->bar.min_value + 1)) / (h - knob_h);
 801771e:	1a88      	subs	r0, r1, r2
            p.y -= slider->coords.y1 + w / 2;    /*Modify the point to shift with half knob (important on the start and end)*/
 8017720:	f8ad 3006 	strh.w	r3, [sp, #6]
            tmp = (int32_t)((int32_t) p.y * (ext->bar.max_value - ext->bar.min_value + 1)) / (h - knob_h);
 8017724:	fb00 3303 	mla	r3, r0, r3, r3
 8017728:	fb93 f3f9 	sdiv	r3, r3, r9
            tmp = ext->bar.max_value - tmp;     /*Invert the value: smaller value means higher y*/
 801772c:	1acb      	subs	r3, r1, r3
 801772e:	b21b      	sxth	r3, r3
 8017730:	e746      	b.n	80175c0 <lv_slider_signal+0xbc>
            lv_coord_t pad = LV_MATH_MIN(style->body.padding.hor, style->body.padding.ver);
 8017732:	f9b5 3020 	ldrsh.w	r3, [r5, #32]
 8017736:	f9b5 2022 	ldrsh.w	r2, [r5, #34]	; 0x22
 801773a:	4293      	cmp	r3, r2
 801773c:	bfa8      	it	ge
 801773e:	4613      	movge	r3, r2
            if(pad < 0) pad = -pad;
 8017740:	2b00      	cmp	r3, #0
 8017742:	db1b      	blt.n	801777c <lv_slider_signal+0x278>
            if(slider->ext_size < pad) slider->ext_size = pad;
 8017744:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
 8017748:	4293      	cmp	r3, r2
 801774a:	dd01      	ble.n	8017750 <lv_slider_signal+0x24c>
 801774c:	461a      	mov	r2, r3
 801774e:	86b3      	strh	r3, [r6, #52]	; 0x34
            if(slider->ext_size < shadow_w) slider->ext_size = shadow_w;
 8017750:	4291      	cmp	r1, r2
 8017752:	f77f aee3 	ble.w	801751c <lv_slider_signal+0x18>
 8017756:	86b1      	strh	r1, [r6, #52]	; 0x34
 8017758:	e6e0      	b.n	801751c <lv_slider_signal+0x18>
                lv_obj_get_height(slider) != lv_area_get_height(param)) {
 801775a:	4630      	mov	r0, r6
 801775c:	f7f2 f952 	bl	8009a04 <lv_obj_get_height>
    return area_p->y2 - area_p->y1 + 1;
 8017760:	88fb      	ldrh	r3, [r7, #6]
 8017762:	887a      	ldrh	r2, [r7, #2]
 8017764:	3301      	adds	r3, #1
 8017766:	1a9b      	subs	r3, r3, r2
        if(lv_obj_get_width(slider) != lv_area_get_width(param) ||
 8017768:	b21b      	sxth	r3, r3
 801776a:	4298      	cmp	r0, r3
 801776c:	f47f af58 	bne.w	8017620 <lv_slider_signal+0x11c>
 8017770:	e6d4      	b.n	801751c <lv_slider_signal+0x18>
            lv_slider_set_value(slider, lv_slider_get_value(slider) + 1);
 8017772:	4630      	mov	r0, r6
 8017774:	f7ff fce8 	bl	8017148 <lv_slider_get_value>
 8017778:	1c41      	adds	r1, r0, #1
 801777a:	e7b3      	b.n	80176e4 <lv_slider_signal+0x1e0>
            if(pad < 0) pad = -pad;
 801777c:	425b      	negs	r3, r3
 801777e:	b21b      	sxth	r3, r3
 8017780:	e7e0      	b.n	8017744 <lv_slider_signal+0x240>
            if(editing) lv_group_set_editing(g, false);
 8017782:	4648      	mov	r0, r9
 8017784:	2100      	movs	r1, #0
 8017786:	f7f0 fcdf 	bl	8008148 <lv_group_set_editing>
 801778a:	e79e      	b.n	80176ca <lv_slider_signal+0x1c6>
 801778c:	200174fc 	.word	0x200174fc
 8017790:	0808bcd4 	.word	0x0808bcd4

08017794 <pwd_char_hider_anim>:
 * (pwd_char_hider callback do the real job)
 * @param ta unused
 * @param x unused
 */
static void pwd_char_hider_anim(lv_obj_t * ta, int32_t x)
{
 8017794:	4770      	bx	lr
 8017796:	bf00      	nop

08017798 <cursor_blink_anim>:
{
 8017798:	b570      	push	{r4, r5, r6, lr}
 801779a:	b082      	sub	sp, #8
 801779c:	460c      	mov	r4, r1
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801779e:	f7f2 fa51 	bl	8009c44 <lv_obj_get_ext_attr>
    if(show != ext->cursor.state) {
 80177a2:	f890 305a 	ldrb.w	r3, [r0, #90]	; 0x5a
 80177a6:	f3c3 1200 	ubfx	r2, r3, #4, #1
 80177aa:	42a2      	cmp	r2, r4
 80177ac:	d00b      	beq.n	80177c6 <cursor_blink_anim+0x2e>
        ext->cursor.state = show == 0 ? 0 : 1;
 80177ae:	3400      	adds	r4, #0
 80177b0:	bf18      	it	ne
 80177b2:	2401      	movne	r4, #1
 80177b4:	f364 1304 	bfi	r3, r4, #4, #1
        if(ext->cursor.type != LV_CURSOR_NONE &&
 80177b8:	b2da      	uxtb	r2, r3
        ext->cursor.state = show == 0 ? 0 : 1;
 80177ba:	f880 305a 	strb.w	r3, [r0, #90]	; 0x5a
        if(ext->cursor.type != LV_CURSOR_NONE &&
 80177be:	0711      	lsls	r1, r2, #28
 80177c0:	d001      	beq.n	80177c6 <cursor_blink_anim+0x2e>
 80177c2:	0713      	lsls	r3, r2, #28
 80177c4:	d501      	bpl.n	80177ca <cursor_blink_anim+0x32>
}
 80177c6:	b002      	add	sp, #8
 80177c8:	bd70      	pop	{r4, r5, r6, pc}
    memcpy(dest, src, sizeof(lv_area_t));
 80177ca:	4603      	mov	r3, r0
            area_tmp.x1 += ext->label->coords.x1;
 80177cc:	6b85      	ldr	r5, [r0, #56]	; 0x38
 80177ce:	466c      	mov	r4, sp
 80177d0:	f853 0f50 	ldr.w	r0, [r3, #80]!
 80177d4:	8a2a      	ldrh	r2, [r5, #16]
 80177d6:	6859      	ldr	r1, [r3, #4]
            area_tmp.y1 += ext->label->coords.y1;
 80177d8:	8a6b      	ldrh	r3, [r5, #18]
 80177da:	c403      	stmia	r4!, {r0, r1}
            area_tmp.x1 += ext->label->coords.x1;
 80177dc:	f8bd 4000 	ldrh.w	r4, [sp]
            lv_inv_area(&area_tmp);
 80177e0:	4668      	mov	r0, sp
            area_tmp.x2 += ext->label->coords.x1;
 80177e2:	f8bd 6004 	ldrh.w	r6, [sp, #4]
            area_tmp.y1 += ext->label->coords.y1;
 80177e6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
            area_tmp.x1 += ext->label->coords.x1;
 80177ea:	4414      	add	r4, r2
            area_tmp.y2 += ext->label->coords.y1;
 80177ec:	f8bd 5006 	ldrh.w	r5, [sp, #6]
            area_tmp.x2 += ext->label->coords.x1;
 80177f0:	4432      	add	r2, r6
            area_tmp.y1 += ext->label->coords.y1;
 80177f2:	4419      	add	r1, r3
            area_tmp.x1 += ext->label->coords.x1;
 80177f4:	f8ad 4000 	strh.w	r4, [sp]
            area_tmp.y2 += ext->label->coords.y1;
 80177f8:	442b      	add	r3, r5
            area_tmp.x2 += ext->label->coords.x1;
 80177fa:	f8ad 2004 	strh.w	r2, [sp, #4]
            area_tmp.y1 += ext->label->coords.y1;
 80177fe:	f8ad 1002 	strh.w	r1, [sp, #2]
            area_tmp.y2 += ext->label->coords.y1;
 8017802:	f8ad 3006 	strh.w	r3, [sp, #6]
            lv_inv_area(&area_tmp);
 8017806:	f7f2 fc7d 	bl	800a104 <lv_inv_area>
}
 801780a:	b002      	add	sp, #8
 801780c:	bd70      	pop	{r4, r5, r6, pc}
 801780e:	bf00      	nop

08017810 <pwd_char_hider>:
/**
 * Hide all characters (convert them to '*')
 * @param ta: pointer to text area object
 */
static void pwd_char_hider(lv_obj_t * ta)
{
 8017810:	b538      	push	{r3, r4, r5, lr}
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8017812:	f7f2 fa17 	bl	8009c44 <lv_obj_get_ext_attr>
    if(ext->pwd_mode != 0) {
 8017816:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 801781a:	07db      	lsls	r3, r3, #31
 801781c:	d400      	bmi.n	8017820 <pwd_char_hider+0x10>
 801781e:	bd38      	pop	{r3, r4, r5, pc}
 8017820:	4605      	mov	r5, r0
        char * txt = lv_label_get_text(ext->label);
 8017822:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8017824:	f7fc fde2 	bl	80143ec <lv_label_get_text>
        int16_t len = lv_txt_get_encoded_length(txt);
 8017828:	4b0b      	ldr	r3, [pc, #44]	; (8017858 <pwd_char_hider+0x48>)
        char * txt = lv_label_get_text(ext->label);
 801782a:	4604      	mov	r4, r0
        int16_t len = lv_txt_get_encoded_length(txt);
 801782c:	681b      	ldr	r3, [r3, #0]
 801782e:	4798      	blx	r3
        bool refr = false;
        uint16_t i;
        for(i = 0; i < len; i++) {
 8017830:	2300      	movs	r3, #0
 8017832:	b200      	sxth	r0, r0
 8017834:	2800      	cmp	r0, #0
 8017836:	dd0d      	ble.n	8017854 <pwd_char_hider+0x44>
            txt[i] = '*';
 8017838:	212a      	movs	r1, #42	; 0x2a
        for(i = 0; i < len; i++) {
 801783a:	1c5a      	adds	r2, r3, #1
            txt[i] = '*';
 801783c:	54e1      	strb	r1, [r4, r3]
        for(i = 0; i < len; i++) {
 801783e:	b293      	uxth	r3, r2
 8017840:	4283      	cmp	r3, r0
 8017842:	dbfa      	blt.n	801783a <pwd_char_hider+0x2a>
            refr = true;
        }

        txt[i] = '\0';
 8017844:	2200      	movs	r2, #0

        if(refr != false) lv_label_set_text(ext->label, txt);
 8017846:	4621      	mov	r1, r4
        txt[i] = '\0';
 8017848:	54e2      	strb	r2, [r4, r3]
        if(refr != false) lv_label_set_text(ext->label, txt);
 801784a:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    }
}
 801784c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if(refr != false) lv_label_set_text(ext->label, txt);
 8017850:	f7fd b994 	b.w	8014b7c <lv_label_set_text>
        txt[i] = '\0';
 8017854:	7023      	strb	r3, [r4, #0]
 8017856:	bd38      	pop	{r3, r4, r5, pc}
 8017858:	200000bc 	.word	0x200000bc

0801785c <get_cursor_style>:
    }

}

static void get_cursor_style(lv_obj_t * ta, lv_style_t * style_res)
{
 801785c:	b570      	push	{r4, r5, r6, lr}
 801785e:	460c      	mov	r4, r1
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8017860:	f7f2 f9f0 	bl	8009c44 <lv_obj_get_ext_attr>
 8017864:	4605      	mov	r5, r0
    lv_style_t * label_style = lv_obj_get_style(ext->label);
 8017866:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8017868:	f7f2 f8d2 	bl	8009a10 <lv_obj_get_style>

    if(ext->cursor.style) {
 801786c:	6cad      	ldr	r5, [r5, #72]	; 0x48
 801786e:	b12d      	cbz	r5, 801787c <get_cursor_style+0x20>
        lv_style_copy(style_res, ext->cursor.style);
 8017870:	4629      	mov	r1, r5
 8017872:	4620      	mov	r0, r4
        style_res->body.padding.ver = 0;
        style_res->line.width = 1;
        style_res->body.opa = LV_OPA_COVER;
    }

}
 8017874:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_style_copy(style_res, ext->cursor.style);
 8017878:	f7f2 bec4 	b.w	800a604 <lv_style_copy>
        lv_style_copy(style_res, label_style);
 801787c:	4601      	mov	r1, r0
 801787e:	4620      	mov	r0, r4
 8017880:	f7f2 fec0 	bl	800a604 <lv_style_copy>
        style_res->body.empty = 0;
 8017884:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
        lv_color_t clv_color_tmp = style_res->text.color;        /*Make letter color to cursor color*/
 8017888:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        style_res->body.border.opa = LV_OPA_COVER;
 801788a:	21ff      	movs	r1, #255	; 0xff
        style_res->text.color = style_res->body.main_color;       /*In block mode the letter color will be current background color*/
 801788c:	6866      	ldr	r6, [r4, #4]
        style_res->body.border.width = 1;
 801788e:	2201      	movs	r2, #1
        style_res->body.empty = 0;
 8017890:	f365 0000 	bfi	r0, r5, #0, #1
        style_res->body.shadow.width = 0;
 8017894:	83a5      	strh	r5, [r4, #28]
        style_res->body.radius = 0;
 8017896:	81a5      	strh	r5, [r4, #12]
        style_res->body.padding.hor = 0;
 8017898:	8465      	strh	r5, [r4, #34]	; 0x22
        style_res->body.padding.ver = 0;
 801789a:	8425      	strh	r5, [r4, #32]
        style_res->body.empty = 0;
 801789c:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
        style_res->body.grad_color = clv_color_tmp;
 80178a0:	60a3      	str	r3, [r4, #8]
        style_res->body.border.color = clv_color_tmp;
 80178a2:	6123      	str	r3, [r4, #16]
        style_res->body.main_color = clv_color_tmp;
 80178a4:	6063      	str	r3, [r4, #4]
        style_res->text.color = style_res->body.main_color;       /*In block mode the letter color will be current background color*/
 80178a6:	62a6      	str	r6, [r4, #40]	; 0x28
        style_res->body.border.opa = LV_OPA_COVER;
 80178a8:	75e1      	strb	r1, [r4, #23]
        style_res->body.opa = LV_OPA_COVER;
 80178aa:	73a1      	strb	r1, [r4, #14]
        style_res->body.border.width = 1;
 80178ac:	82a2      	strh	r2, [r4, #20]
        style_res->line.width = 1;
 80178ae:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
 80178b2:	bd70      	pop	{r4, r5, r6, pc}

080178b4 <refr_cursor_area>:

static void refr_cursor_area(lv_obj_t * ta)
{
 80178b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178b8:	4605      	mov	r5, r0
 80178ba:	b09b      	sub	sp, #108	; 0x6c
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 80178bc:	f7f2 f9c2 	bl	8009c44 <lv_obj_get_ext_attr>
 80178c0:	4604      	mov	r4, r0
    lv_style_t * label_style = lv_obj_get_style(ext->label);
 80178c2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80178c4:	f7f2 f8a4 	bl	8009a10 <lv_obj_get_style>

    lv_style_t cur_style;
    get_cursor_style(ta, &cur_style);
 80178c8:	a908      	add	r1, sp, #32
    lv_style_t * label_style = lv_obj_get_style(ext->label);
 80178ca:	4680      	mov	r8, r0
    get_cursor_style(ta, &cur_style);
 80178cc:	4628      	mov	r0, r5
 80178ce:	f7ff ffc5 	bl	801785c <get_cursor_style>
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 80178d2:	4628      	mov	r0, r5
 80178d4:	f7f2 f9b6 	bl	8009c44 <lv_obj_get_ext_attr>
    return ext->cursor.pos;
 80178d8:	f8b0 704e 	ldrh.w	r7, [r0, #78]	; 0x4e

    uint16_t cur_pos = lv_ta_get_cursor_pos(ta);
    const char * txt = lv_label_get_text(ext->label);
 80178dc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80178de:	f7fc fd85 	bl	80143ec <lv_label_get_text>
    uint32_t byte_pos;
#if LV_TXT_UTF8 != 0
    byte_pos = lv_txt_encoded_get_byte_id(txt, cur_pos);
 80178e2:	4b96      	ldr	r3, [pc, #600]	; (8017b3c <refr_cursor_area+0x288>)
    const char * txt = lv_label_get_text(ext->label);
 80178e4:	4605      	mov	r5, r0
    byte_pos = lv_txt_encoded_get_byte_id(txt, cur_pos);
 80178e6:	4639      	mov	r1, r7
 80178e8:	681b      	ldr	r3, [r3, #0]
    uint32_t letter = lv_txt_encoded_next(&txt[byte_pos], NULL);
 80178ea:	f8df a258 	ldr.w	sl, [pc, #600]	; 8017b44 <refr_cursor_area+0x290>
    const char * txt = lv_label_get_text(ext->label);
 80178ee:	9001      	str	r0, [sp, #4]
    byte_pos = lv_txt_encoded_get_byte_id(txt, cur_pos);
 80178f0:	4798      	blx	r3
    uint32_t letter = lv_txt_encoded_next(&txt[byte_pos], NULL);
 80178f2:	eb05 0b00 	add.w	fp, r5, r0
 80178f6:	f8da 3000 	ldr.w	r3, [sl]
    byte_pos = lv_txt_encoded_get_byte_id(txt, cur_pos);
 80178fa:	4606      	mov	r6, r0
    uint32_t letter = lv_txt_encoded_next(&txt[byte_pos], NULL);
 80178fc:	2100      	movs	r1, #0
 80178fe:	4658      	mov	r0, fp
 8017900:	4798      	blx	r3
 8017902:	4605      	mov	r5, r0
#else
    byte_pos = cur_pos;
    uint32_t letter = txt[byte_pos];
#endif

    lv_coord_t letter_h = lv_font_get_height(label_style->text.font);
 8017904:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
    /*Set letter_w (set not 0 on non printable but valid chars)*/
    lv_coord_t letter_w;
    if(letter == '\0' || letter == '\n' || letter == '\r') {
 8017908:	2d0d      	cmp	r5, #13
 801790a:	f890 3020 	ldrb.w	r3, [r0, #32]
 801790e:	9300      	str	r3, [sp, #0]
 8017910:	d96d      	bls.n	80179ee <refr_cursor_area+0x13a>
        letter_w = lv_font_get_width(label_style->text.font, ' ');
    } else {
        letter_w = lv_font_get_width(label_style->text.font, letter);
 8017912:	4629      	mov	r1, r5
 8017914:	f7f8 f946 	bl	800fba4 <lv_font_get_width>
 8017918:	fa0f f980 	sxth.w	r9, r0
    }

    lv_point_t letter_pos;
    lv_label_get_letter_pos(ext->label, cur_pos, &letter_pos);
 801791c:	4639      	mov	r1, r7
 801791e:	aa03      	add	r2, sp, #12
 8017920:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8017922:	f7fc fd71 	bl	8014408 <lv_label_get_letter_pos>

    /*If the cursor is out of the text (most right) draw it to the next line*/
    if(letter_pos.x + ext->label->coords.x1 + letter_w > ext->label->coords.x2 && ext->one_line == 0 && lv_label_get_align(ext->label) != LV_LABEL_ALIGN_RIGHT) {
 8017926:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017928:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 801792c:	f9b1 2010 	ldrsh.w	r2, [r1, #16]
 8017930:	f9b1 7014 	ldrsh.w	r7, [r1, #20]
 8017934:	4410      	add	r0, r2
 8017936:	4448      	add	r0, r9
 8017938:	42b8      	cmp	r0, r7
 801793a:	dd05      	ble.n	8017948 <refr_cursor_area+0x94>
 801793c:	f894 7046 	ldrb.w	r7, [r4, #70]	; 0x46
 8017940:	f017 0702 	ands.w	r7, r7, #2
 8017944:	f000 809b 	beq.w	8017a7e <refr_cursor_area+0x1ca>
    ext->cursor.txt_byte_pos = byte_pos;

    /*Draw he cursor according to the type*/
    lv_area_t cur_area;

    if(ext->cursor.type == LV_CURSOR_LINE) {
 8017948:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
    ext->cursor.txt_byte_pos = byte_pos;
 801794c:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    if(ext->cursor.type == LV_CURSOR_LINE) {
 8017950:	f000 000f 	and.w	r0, r0, #15
 8017954:	2801      	cmp	r0, #1
 8017956:	f000 80ae 	beq.w	8017ab6 <refr_cursor_area+0x202>
        cur_area.x1 = letter_pos.x + cur_style.body.padding.hor - (cur_style.line.width >> 1) - (cur_style.line.width & 0x1);
        cur_area.y1 = letter_pos.y + cur_style.body.padding.ver;
        cur_area.x2 = letter_pos.x + cur_style.body.padding.hor + (cur_style.line.width >> 1);
        cur_area.y2 = letter_pos.y + cur_style.body.padding.ver + letter_h;
    } else if(ext->cursor.type == LV_CURSOR_BLOCK) {
 801795a:	2802      	cmp	r0, #2
 801795c:	d052      	beq.n	8017a04 <refr_cursor_area+0x150>
        cur_area.x1 = letter_pos.x - cur_style.body.padding.hor;
        cur_area.y1 = letter_pos.y - cur_style.body.padding.ver;
        cur_area.x2 = letter_pos.x + cur_style.body.padding.hor + letter_w;
        cur_area.y2 = letter_pos.y + cur_style.body.padding.ver + letter_h;

    } else if(ext->cursor.type == LV_CURSOR_OUTLINE) {
 801795e:	2803      	cmp	r0, #3
 8017960:	d050      	beq.n	8017a04 <refr_cursor_area+0x150>
        cur_area.x1 = letter_pos.x - cur_style.body.padding.hor;
        cur_area.y1 = letter_pos.y - cur_style.body.padding.ver;
        cur_area.x2 = letter_pos.x + cur_style.body.padding.hor + letter_w;
        cur_area.y2 = letter_pos.y + cur_style.body.padding.ver + letter_h;
    } else if(ext->cursor.type == LV_CURSOR_UNDERLINE) {
 8017962:	2804      	cmp	r0, #4
 8017964:	d069      	beq.n	8017a3a <refr_cursor_area+0x186>
        cur_area.y2 = letter_pos.y + cur_style.body.padding.ver + letter_h + (cur_style.line.width >> 1) + (cur_style.line.width & 0x1);
    }

    /*Save the new area*/
    lv_area_t area_tmp;
    lv_area_copy(&area_tmp, &ext->cursor.area);
 8017966:	4625      	mov	r5, r4
    area_tmp.x1 += ext->label->coords.x1;
    area_tmp.y1 += ext->label->coords.y1;
 8017968:	8a4b      	ldrh	r3, [r1, #18]
 801796a:	ae06      	add	r6, sp, #24
    area_tmp.x1 += ext->label->coords.x1;
 801796c:	b292      	uxth	r2, r2
 801796e:	f855 0f50 	ldr.w	r0, [r5, #80]!
 8017972:	6869      	ldr	r1, [r5, #4]
 8017974:	c603      	stmia	r6!, {r0, r1}
    area_tmp.x2 += ext->label->coords.x1;
 8017976:	f8bd 701c 	ldrh.w	r7, [sp, #28]
    area_tmp.y2 += ext->label->coords.y1;
    lv_inv_area(&area_tmp);
 801797a:	a806      	add	r0, sp, #24
    area_tmp.x1 += ext->label->coords.x1;
 801797c:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    area_tmp.y1 += ext->label->coords.y1;
 8017980:	f8bd 101a 	ldrh.w	r1, [sp, #26]
    area_tmp.x1 += ext->label->coords.x1;
 8017984:	4416      	add	r6, r2
    area_tmp.x2 += ext->label->coords.x1;
 8017986:	443a      	add	r2, r7
    area_tmp.y2 += ext->label->coords.y1;
 8017988:	f8bd 701e 	ldrh.w	r7, [sp, #30]
    area_tmp.y1 += ext->label->coords.y1;
 801798c:	4419      	add	r1, r3
    area_tmp.x1 += ext->label->coords.x1;
 801798e:	f8ad 6018 	strh.w	r6, [sp, #24]
 8017992:	ae06      	add	r6, sp, #24
    area_tmp.y2 += ext->label->coords.y1;
 8017994:	443b      	add	r3, r7
    area_tmp.x2 += ext->label->coords.x1;
 8017996:	f8ad 201c 	strh.w	r2, [sp, #28]
    area_tmp.y1 += ext->label->coords.y1;
 801799a:	f8ad 101a 	strh.w	r1, [sp, #26]
    area_tmp.y2 += ext->label->coords.y1;
 801799e:	f8ad 301e 	strh.w	r3, [sp, #30]
    lv_inv_area(&area_tmp);
 80179a2:	f7f2 fbaf 	bl	800a104 <lv_inv_area>
 80179a6:	ab04      	add	r3, sp, #16
 80179a8:	cb03      	ldmia	r3!, {r0, r1}
 80179aa:	6520      	str	r0, [r4, #80]	; 0x50
 80179ac:	6069      	str	r1, [r5, #4]
 80179ae:	6828      	ldr	r0, [r5, #0]
 80179b0:	6869      	ldr	r1, [r5, #4]

    lv_area_copy(&ext->cursor.area, &cur_area);

    lv_area_copy(&area_tmp, &ext->cursor.area);
    area_tmp.x1 += ext->label->coords.x1;
 80179b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80179b4:	c603      	stmia	r6!, {r0, r1}
 80179b6:	8a1a      	ldrh	r2, [r3, #16]
    area_tmp.y1 += ext->label->coords.y1;
    area_tmp.x2 += ext->label->coords.x1;
    area_tmp.y2 += ext->label->coords.y1;
    lv_inv_area(&area_tmp);
 80179b8:	a806      	add	r0, sp, #24
    area_tmp.x1 += ext->label->coords.x1;
 80179ba:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    area_tmp.x2 += ext->label->coords.x1;
 80179be:	f8bd 601c 	ldrh.w	r6, [sp, #28]
    area_tmp.y1 += ext->label->coords.y1;
 80179c2:	f8bd 101a 	ldrh.w	r1, [sp, #26]
    area_tmp.x1 += ext->label->coords.x1;
 80179c6:	4414      	add	r4, r2
    area_tmp.y2 += ext->label->coords.y1;
 80179c8:	f8bd 501e 	ldrh.w	r5, [sp, #30]
    area_tmp.x2 += ext->label->coords.x1;
 80179cc:	4432      	add	r2, r6
    area_tmp.y1 += ext->label->coords.y1;
 80179ce:	8a5b      	ldrh	r3, [r3, #18]
    area_tmp.x1 += ext->label->coords.x1;
 80179d0:	f8ad 4018 	strh.w	r4, [sp, #24]
    area_tmp.y1 += ext->label->coords.y1;
 80179d4:	4419      	add	r1, r3
    area_tmp.y2 += ext->label->coords.y1;
 80179d6:	442b      	add	r3, r5
    area_tmp.x2 += ext->label->coords.x1;
 80179d8:	f8ad 201c 	strh.w	r2, [sp, #28]
    area_tmp.y1 += ext->label->coords.y1;
 80179dc:	f8ad 101a 	strh.w	r1, [sp, #26]
    area_tmp.y2 += ext->label->coords.y1;
 80179e0:	f8ad 301e 	strh.w	r3, [sp, #30]
    lv_inv_area(&area_tmp);
 80179e4:	f7f2 fb8e 	bl	800a104 <lv_inv_area>
}
 80179e8:	b01b      	add	sp, #108	; 0x6c
 80179ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(letter == '\0' || letter == '\n' || letter == '\r') {
 80179ee:	f242 4301 	movw	r3, #9217	; 0x2401
 80179f2:	40eb      	lsrs	r3, r5
 80179f4:	07da      	lsls	r2, r3, #31
 80179f6:	d58c      	bpl.n	8017912 <refr_cursor_area+0x5e>
        letter_w = lv_font_get_width(label_style->text.font, ' ');
 80179f8:	2120      	movs	r1, #32
 80179fa:	f7f8 f8d3 	bl	800fba4 <lv_font_get_width>
 80179fe:	fa0f f980 	sxth.w	r9, r0
 8017a02:	e78b      	b.n	801791c <refr_cursor_area+0x68>
        cur_area.x1 = letter_pos.x - cur_style.body.padding.hor;
 8017a04:	f8bd 500c 	ldrh.w	r5, [sp, #12]
 8017a08:	f8bd e042 	ldrh.w	lr, [sp, #66]	; 0x42
        cur_area.y1 = letter_pos.y - cur_style.body.padding.ver;
 8017a0c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
        cur_area.x2 = letter_pos.x + cur_style.body.padding.hor + letter_w;
 8017a10:	eb05 060e 	add.w	r6, r5, lr
        cur_area.y1 = letter_pos.y - cur_style.body.padding.ver;
 8017a14:	f8bd 7040 	ldrh.w	r7, [sp, #64]	; 0x40
        cur_area.x1 = letter_pos.x - cur_style.body.padding.hor;
 8017a18:	eba5 050e 	sub.w	r5, r5, lr
        cur_area.x2 = letter_pos.x + cur_style.body.padding.hor + letter_w;
 8017a1c:	eb06 0309 	add.w	r3, r6, r9
        cur_area.y2 = letter_pos.y + cur_style.body.padding.ver + letter_h;
 8017a20:	19c6      	adds	r6, r0, r7
        cur_area.x1 = letter_pos.x - cur_style.body.padding.hor;
 8017a22:	f8ad 5010 	strh.w	r5, [sp, #16]
        cur_area.y1 = letter_pos.y - cur_style.body.padding.ver;
 8017a26:	1bc0      	subs	r0, r0, r7
        cur_area.y2 = letter_pos.y + cur_style.body.padding.ver + letter_h;
 8017a28:	9d00      	ldr	r5, [sp, #0]
        cur_area.x2 = letter_pos.x + cur_style.body.padding.hor + letter_w;
 8017a2a:	f8ad 3014 	strh.w	r3, [sp, #20]
        cur_area.y2 = letter_pos.y + cur_style.body.padding.ver + letter_h;
 8017a2e:	4435      	add	r5, r6
        cur_area.y1 = letter_pos.y - cur_style.body.padding.ver;
 8017a30:	f8ad 0012 	strh.w	r0, [sp, #18]
        cur_area.y2 = letter_pos.y + cur_style.body.padding.ver + letter_h;
 8017a34:	f8ad 5016 	strh.w	r5, [sp, #22]
 8017a38:	e795      	b.n	8017966 <refr_cursor_area+0xb2>
        cur_area.y1 = letter_pos.y + cur_style.body.padding.ver + letter_h - (cur_style.line.width >> 1);
 8017a3a:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8017a3e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8017a42:	f9bd 6064 	ldrsh.w	r6, [sp, #100]	; 0x64
 8017a46:	4428      	add	r0, r5
 8017a48:	9b00      	ldr	r3, [sp, #0]
        cur_area.x1 = letter_pos.x + cur_style.body.padding.hor;
 8017a4a:	f8bd 500c 	ldrh.w	r5, [sp, #12]
        cur_area.y1 = letter_pos.y + cur_style.body.padding.ver + letter_h - (cur_style.line.width >> 1);
 8017a4e:	f3c6 074f 	ubfx	r7, r6, #1, #16
        cur_area.x1 = letter_pos.x + cur_style.body.padding.hor;
 8017a52:	f8bd e042 	ldrh.w	lr, [sp, #66]	; 0x42
        cur_area.y1 = letter_pos.y + cur_style.body.padding.ver + letter_h - (cur_style.line.width >> 1);
 8017a56:	4418      	add	r0, r3
        cur_area.y2 = letter_pos.y + cur_style.body.padding.ver + letter_h + (cur_style.line.width >> 1) + (cur_style.line.width & 0x1);
 8017a58:	f006 0601 	and.w	r6, r6, #1
        cur_area.x1 = letter_pos.x + cur_style.body.padding.hor;
 8017a5c:	4475      	add	r5, lr
        cur_area.y1 = letter_pos.y + cur_style.body.padding.ver + letter_h - (cur_style.line.width >> 1);
 8017a5e:	b280      	uxth	r0, r0
        cur_area.y2 = letter_pos.y + cur_style.body.padding.ver + letter_h + (cur_style.line.width >> 1) + (cur_style.line.width & 0x1);
 8017a60:	443e      	add	r6, r7
        cur_area.x1 = letter_pos.x + cur_style.body.padding.hor;
 8017a62:	b2ad      	uxth	r5, r5
        cur_area.y1 = letter_pos.y + cur_style.body.padding.ver + letter_h - (cur_style.line.width >> 1);
 8017a64:	1bc7      	subs	r7, r0, r7
        cur_area.y2 = letter_pos.y + cur_style.body.padding.ver + letter_h + (cur_style.line.width >> 1) + (cur_style.line.width & 0x1);
 8017a66:	4430      	add	r0, r6
        cur_area.x2 = letter_pos.x + cur_style.body.padding.hor + letter_w;
 8017a68:	eb05 0309 	add.w	r3, r5, r9
        cur_area.y1 = letter_pos.y + cur_style.body.padding.ver + letter_h - (cur_style.line.width >> 1);
 8017a6c:	f8ad 7012 	strh.w	r7, [sp, #18]
        cur_area.y2 = letter_pos.y + cur_style.body.padding.ver + letter_h + (cur_style.line.width >> 1) + (cur_style.line.width & 0x1);
 8017a70:	f8ad 0016 	strh.w	r0, [sp, #22]
        cur_area.x2 = letter_pos.x + cur_style.body.padding.hor + letter_w;
 8017a74:	f8ad 3014 	strh.w	r3, [sp, #20]
        cur_area.x1 = letter_pos.x + cur_style.body.padding.hor;
 8017a78:	f8ad 5010 	strh.w	r5, [sp, #16]
 8017a7c:	e773      	b.n	8017966 <refr_cursor_area+0xb2>
    if(letter_pos.x + ext->label->coords.x1 + letter_w > ext->label->coords.x2 && ext->one_line == 0 && lv_label_get_align(ext->label) != LV_LABEL_ALIGN_RIGHT) {
 8017a7e:	4608      	mov	r0, r1
 8017a80:	f7fc fcba 	bl	80143f8 <lv_label_get_align>
 8017a84:	2802      	cmp	r0, #2
 8017a86:	d054      	beq.n	8017b32 <refr_cursor_area+0x27e>
        letter_pos.y += letter_h + label_style->text.line_space;
 8017a88:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8017a8c:	f8b8 2032 	ldrh.w	r2, [r8, #50]	; 0x32
        letter_pos.x = 0;
 8017a90:	f8ad 700c 	strh.w	r7, [sp, #12]
        letter_pos.y += letter_h + label_style->text.line_space;
 8017a94:	4413      	add	r3, r2
 8017a96:	9a00      	ldr	r2, [sp, #0]
 8017a98:	4413      	add	r3, r2
 8017a9a:	f8ad 300e 	strh.w	r3, [sp, #14]
        if(letter != '\0') {
 8017a9e:	bb55      	cbnz	r5, 8017af6 <refr_cursor_area+0x242>
            letter_w = lv_font_get_width(label_style->text.font, ' ');
 8017aa0:	2120      	movs	r1, #32
 8017aa2:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
 8017aa6:	f7f8 f87d 	bl	800fba4 <lv_font_get_width>
 8017aaa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017aac:	fa0f f980 	sxth.w	r9, r0
 8017ab0:	f9b1 2010 	ldrsh.w	r2, [r1, #16]
 8017ab4:	e748      	b.n	8017948 <refr_cursor_area+0x94>
        cur_area.x1 = letter_pos.x + cur_style.body.padding.hor - (cur_style.line.width >> 1) - (cur_style.line.width & 0x1);
 8017ab6:	f8bd 0042 	ldrh.w	r0, [sp, #66]	; 0x42
 8017aba:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8017abe:	f9bd 5064 	ldrsh.w	r5, [sp, #100]	; 0x64
 8017ac2:	4403      	add	r3, r0
        cur_area.y1 = letter_pos.y + cur_style.body.padding.ver;
 8017ac4:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
        cur_area.x1 = letter_pos.x + cur_style.body.padding.hor - (cur_style.line.width >> 1) - (cur_style.line.width & 0x1);
 8017ac8:	f3c5 074f 	ubfx	r7, r5, #1, #16
        cur_area.y1 = letter_pos.y + cur_style.body.padding.ver;
 8017acc:	f8bd 000e 	ldrh.w	r0, [sp, #14]
        cur_area.x1 = letter_pos.x + cur_style.body.padding.hor - (cur_style.line.width >> 1) - (cur_style.line.width & 0x1);
 8017ad0:	b29b      	uxth	r3, r3
 8017ad2:	f005 0501 	and.w	r5, r5, #1
        cur_area.y1 = letter_pos.y + cur_style.body.padding.ver;
 8017ad6:	4430      	add	r0, r6
        cur_area.x1 = letter_pos.x + cur_style.body.padding.hor - (cur_style.line.width >> 1) - (cur_style.line.width & 0x1);
 8017ad8:	1bde      	subs	r6, r3, r7
        cur_area.x2 = letter_pos.x + cur_style.body.padding.hor + (cur_style.line.width >> 1);
 8017ada:	443b      	add	r3, r7
        cur_area.y1 = letter_pos.y + cur_style.body.padding.ver;
 8017adc:	b280      	uxth	r0, r0
        cur_area.x2 = letter_pos.x + cur_style.body.padding.hor + (cur_style.line.width >> 1);
 8017ade:	f8ad 3014 	strh.w	r3, [sp, #20]
        cur_area.x1 = letter_pos.x + cur_style.body.padding.hor - (cur_style.line.width >> 1) - (cur_style.line.width & 0x1);
 8017ae2:	1b75      	subs	r5, r6, r5
        cur_area.y2 = letter_pos.y + cur_style.body.padding.ver + letter_h;
 8017ae4:	9b00      	ldr	r3, [sp, #0]
        cur_area.y1 = letter_pos.y + cur_style.body.padding.ver;
 8017ae6:	f8ad 0012 	strh.w	r0, [sp, #18]
        cur_area.y2 = letter_pos.y + cur_style.body.padding.ver + letter_h;
 8017aea:	4403      	add	r3, r0
        cur_area.x1 = letter_pos.x + cur_style.body.padding.hor - (cur_style.line.width >> 1) - (cur_style.line.width & 0x1);
 8017aec:	f8ad 5010 	strh.w	r5, [sp, #16]
        cur_area.y2 = letter_pos.y + cur_style.body.padding.ver + letter_h;
 8017af0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017af4:	e737      	b.n	8017966 <refr_cursor_area+0xb2>
            byte_pos += lv_txt_encoded_size(&txt[byte_pos]);
 8017af6:	4b12      	ldr	r3, [pc, #72]	; (8017b40 <refr_cursor_area+0x28c>)
 8017af8:	4658      	mov	r0, fp
 8017afa:	681b      	ldr	r3, [r3, #0]
 8017afc:	4798      	blx	r3
            letter = lv_txt_encoded_next(&txt[byte_pos], NULL);
 8017afe:	9a01      	ldr	r2, [sp, #4]
            byte_pos += lv_txt_encoded_size(&txt[byte_pos]);
 8017b00:	4406      	add	r6, r0
            letter = lv_txt_encoded_next(&txt[byte_pos], NULL);
 8017b02:	f8da 3000 	ldr.w	r3, [sl]
 8017b06:	4639      	mov	r1, r7
 8017b08:	4432      	add	r2, r6
 8017b0a:	4610      	mov	r0, r2
 8017b0c:	4798      	blx	r3
        if(letter == '\0' || letter == '\n' || letter == '\r') {
 8017b0e:	280d      	cmp	r0, #13
 8017b10:	d804      	bhi.n	8017b1c <refr_cursor_area+0x268>
 8017b12:	f242 4301 	movw	r3, #9217	; 0x2401
 8017b16:	40c3      	lsrs	r3, r0
 8017b18:	07db      	lsls	r3, r3, #31
 8017b1a:	d4c1      	bmi.n	8017aa0 <refr_cursor_area+0x1ec>
            letter_w = lv_font_get_width(label_style->text.font, letter);
 8017b1c:	4601      	mov	r1, r0
 8017b1e:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
 8017b22:	f7f8 f83f 	bl	800fba4 <lv_font_get_width>
 8017b26:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017b28:	fa0f f980 	sxth.w	r9, r0
 8017b2c:	f9b1 2010 	ldrsh.w	r2, [r1, #16]
 8017b30:	e70a      	b.n	8017948 <refr_cursor_area+0x94>
 8017b32:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017b34:	f9b1 2010 	ldrsh.w	r2, [r1, #16]
 8017b38:	e706      	b.n	8017948 <refr_cursor_area+0x94>
 8017b3a:	bf00      	nop
 8017b3c:	200000b8 	.word	0x200000b8
 8017b40:	200000ac 	.word	0x200000ac
 8017b44:	200000b0 	.word	0x200000b0

08017b48 <lv_ta_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 8017b48:	2a02      	cmp	r2, #2
 8017b4a:	d00a      	beq.n	8017b62 <lv_ta_design+0x1a>
{
 8017b4c:	b510      	push	{r4, lr}
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 8017b4e:	b11a      	cbz	r2, 8017b58 <lv_ta_design+0x10>
    } else if(mode == LV_DESIGN_DRAW_POST) {
 8017b50:	2a01      	cmp	r2, #1
 8017b52:	d001      	beq.n	8017b58 <lv_ta_design+0x10>
}
 8017b54:	2001      	movs	r0, #1
 8017b56:	bd10      	pop	{r4, pc}
        ancestor_design(ta, mask, mode);
 8017b58:	4b03      	ldr	r3, [pc, #12]	; (8017b68 <lv_ta_design+0x20>)
 8017b5a:	681b      	ldr	r3, [r3, #0]
 8017b5c:	4798      	blx	r3
}
 8017b5e:	2001      	movs	r0, #1
 8017b60:	bd10      	pop	{r4, pc}
        return ancestor_design(ta, mask, mode);
 8017b62:	4b01      	ldr	r3, [pc, #4]	; (8017b68 <lv_ta_design+0x20>)
 8017b64:	681b      	ldr	r3, [r3, #0]
 8017b66:	4718      	bx	r3
 8017b68:	20017504 	.word	0x20017504

08017b6c <lv_ta_scrollable_signal>:
    res = scrl_signal(scrl, sign, param);
 8017b6c:	4b10      	ldr	r3, [pc, #64]	; (8017bb0 <lv_ta_scrollable_signal+0x44>)
{
 8017b6e:	b570      	push	{r4, r5, r6, lr}
 8017b70:	460d      	mov	r5, r1
    res = scrl_signal(scrl, sign, param);
 8017b72:	685b      	ldr	r3, [r3, #4]
{
 8017b74:	4606      	mov	r6, r0
    res = scrl_signal(scrl, sign, param);
 8017b76:	4798      	blx	r3
    if(sign == LV_SIGNAL_REFR_EXT_SIZE) {
 8017b78:	2d04      	cmp	r5, #4
    res = scrl_signal(scrl, sign, param);
 8017b7a:	4604      	mov	r4, r0
    if(sign == LV_SIGNAL_REFR_EXT_SIZE) {
 8017b7c:	d101      	bne.n	8017b82 <lv_ta_scrollable_signal+0x16>
 8017b7e:	2801      	cmp	r0, #1
 8017b80:	d001      	beq.n	8017b86 <lv_ta_scrollable_signal+0x1a>
}
 8017b82:	4620      	mov	r0, r4
 8017b84:	bd70      	pop	{r4, r5, r6, pc}
        lv_obj_t * ta = lv_obj_get_parent(scrl);
 8017b86:	4630      	mov	r0, r6
 8017b88:	f7f1 fe86 	bl	8009898 <lv_obj_get_parent>
        lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8017b8c:	f7f2 f85a 	bl	8009c44 <lv_obj_get_ext_attr>
        lv_style_t * style_label = lv_obj_get_style(ext->label);
 8017b90:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8017b92:	f7f1 ff3d 	bl	8009a10 <lv_obj_get_style>
 8017b96:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        scrl->ext_size = LV_MATH_MAX(scrl->ext_size, style_label->text.line_space + font_h);
 8017b98:	f9b0 3032 	ldrsh.w	r3, [r0, #50]	; 0x32
 8017b9c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8017ba0:	f9b6 1034 	ldrsh.w	r1, [r6, #52]	; 0x34
 8017ba4:	4413      	add	r3, r2
 8017ba6:	428b      	cmp	r3, r1
 8017ba8:	bfb8      	it	lt
 8017baa:	460b      	movlt	r3, r1
 8017bac:	86b3      	strh	r3, [r6, #52]	; 0x34
 8017bae:	e7e8      	b.n	8017b82 <lv_ta_scrollable_signal+0x16>
 8017bb0:	20017504 	.word	0x20017504

08017bb4 <lv_ta_scrollable_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 8017bb4:	2a02      	cmp	r2, #2
{
 8017bb6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017bba:	b09b      	sub	sp, #108	; 0x6c
    if(mode == LV_DESIGN_COVER_CHK) {
 8017bbc:	d061      	beq.n	8017c82 <lv_ta_scrollable_design+0xce>
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 8017bbe:	b12a      	cbz	r2, 8017bcc <lv_ta_scrollable_design+0x18>
    } else if(mode == LV_DESIGN_DRAW_POST) {
 8017bc0:	2a01      	cmp	r2, #1
 8017bc2:	d00a      	beq.n	8017bda <lv_ta_scrollable_design+0x26>
    return true;
 8017bc4:	2001      	movs	r0, #1
}
 8017bc6:	b01b      	add	sp, #108	; 0x6c
 8017bc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        scrl_design(scrl, mask, mode);
 8017bcc:	4b4e      	ldr	r3, [pc, #312]	; (8017d08 <lv_ta_scrollable_design+0x154>)
 8017bce:	689b      	ldr	r3, [r3, #8]
 8017bd0:	4798      	blx	r3
    return true;
 8017bd2:	2001      	movs	r0, #1
}
 8017bd4:	b01b      	add	sp, #108	; 0x6c
 8017bd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        scrl_design(scrl, mask, mode);
 8017bda:	4b4b      	ldr	r3, [pc, #300]	; (8017d08 <lv_ta_scrollable_design+0x154>)
 8017bdc:	4604      	mov	r4, r0
 8017bde:	460d      	mov	r5, r1
 8017be0:	689b      	ldr	r3, [r3, #8]
 8017be2:	4798      	blx	r3
        lv_obj_t * ta = lv_obj_get_parent(scrl);
 8017be4:	4620      	mov	r0, r4
 8017be6:	f7f1 fe57 	bl	8009898 <lv_obj_get_parent>
 8017bea:	4606      	mov	r6, r0
        lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8017bec:	f7f2 f82a 	bl	8009c44 <lv_obj_get_ext_attr>
        if(ext->cursor.type == LV_CURSOR_NONE ||
 8017bf0:	f890 305a 	ldrb.w	r3, [r0, #90]	; 0x5a
        lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8017bf4:	4604      	mov	r4, r0
        if(ext->cursor.type == LV_CURSOR_NONE ||
 8017bf6:	071a      	lsls	r2, r3, #28
 8017bf8:	d0e4      	beq.n	8017bc4 <lv_ta_scrollable_design+0x10>
 8017bfa:	f013 0708 	ands.w	r7, r3, #8
 8017bfe:	d1e1      	bne.n	8017bc4 <lv_ta_scrollable_design+0x10>
                (ext->cursor.type & LV_CURSOR_HIDDEN) ||
 8017c00:	06db      	lsls	r3, r3, #27
 8017c02:	d5df      	bpl.n	8017bc4 <lv_ta_scrollable_design+0x10>
        get_cursor_style(ta, &cur_style);
 8017c04:	4630      	mov	r0, r6
 8017c06:	a908      	add	r1, sp, #32
 8017c08:	f7ff fe28 	bl	801785c <get_cursor_style>
        const char * txt = lv_label_get_text(ext->label);
 8017c0c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8017c0e:	f7fc fbed 	bl	80143ec <lv_label_get_text>
 8017c12:	4622      	mov	r2, r4
 8017c14:	4680      	mov	r8, r0
         cur_area.x1 += ext->label->coords.x1;
 8017c16:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
 8017c1a:	f852 0f50 	ldr.w	r0, [r2, #80]!
 8017c1e:	ab04      	add	r3, sp, #16
 8017c20:	6851      	ldr	r1, [r2, #4]
 8017c22:	f8be 2010 	ldrh.w	r2, [lr, #16]
 8017c26:	c303      	stmia	r3!, {r0, r1}
         cur_area.y1 += ext->label->coords.y1;
 8017c28:	f8be 3012 	ldrh.w	r3, [lr, #18]
         lv_opa_t opa_scale = lv_obj_get_opa_scale(ta);
 8017c2c:	4630      	mov	r0, r6
         cur_area.x2 += ext->label->coords.x1;
 8017c2e:	f8bd e014 	ldrh.w	lr, [sp, #20]
         cur_area.x1 += ext->label->coords.x1;
 8017c32:	f8bd 6010 	ldrh.w	r6, [sp, #16]
         cur_area.y1 += ext->label->coords.y1;
 8017c36:	f8bd 1012 	ldrh.w	r1, [sp, #18]
         cur_area.x1 += ext->label->coords.x1;
 8017c3a:	4416      	add	r6, r2
         cur_area.x2 += ext->label->coords.x1;
 8017c3c:	4472      	add	r2, lr
         cur_area.y2 += ext->label->coords.y1;
 8017c3e:	f8bd e016 	ldrh.w	lr, [sp, #22]
         cur_area.y1 += ext->label->coords.y1;
 8017c42:	4419      	add	r1, r3
         cur_area.x1 += ext->label->coords.x1;
 8017c44:	f8ad 6010 	strh.w	r6, [sp, #16]
         cur_area.y2 += ext->label->coords.y1;
 8017c48:	4473      	add	r3, lr
         cur_area.x2 += ext->label->coords.x1;
 8017c4a:	f8ad 2014 	strh.w	r2, [sp, #20]
         cur_area.y1 += ext->label->coords.y1;
 8017c4e:	f8ad 1012 	strh.w	r1, [sp, #18]
         cur_area.y2 += ext->label->coords.y1;
 8017c52:	f8ad 3016 	strh.w	r3, [sp, #22]
         lv_opa_t opa_scale = lv_obj_get_opa_scale(ta);
 8017c56:	f7f1 ffd5 	bl	8009c04 <lv_obj_get_opa_scale>
        if(ext->cursor.type == LV_CURSOR_LINE) {
 8017c5a:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
         lv_opa_t opa_scale = lv_obj_get_opa_scale(ta);
 8017c5e:	4606      	mov	r6, r0
        if(ext->cursor.type == LV_CURSOR_LINE) {
 8017c60:	f003 030f 	and.w	r3, r3, #15
 8017c64:	2b01      	cmp	r3, #1
 8017c66:	d005      	beq.n	8017c74 <lv_ta_scrollable_design+0xc0>
        } else if(ext->cursor.type == LV_CURSOR_BLOCK) {
 8017c68:	2b02      	cmp	r3, #2
 8017c6a:	d01c      	beq.n	8017ca6 <lv_ta_scrollable_design+0xf2>
        } else if(ext->cursor.type == LV_CURSOR_OUTLINE) {
 8017c6c:	2b03      	cmp	r3, #3
 8017c6e:	d00c      	beq.n	8017c8a <lv_ta_scrollable_design+0xd6>
        } else if(ext->cursor.type == LV_CURSOR_UNDERLINE) {
 8017c70:	2b04      	cmp	r3, #4
 8017c72:	d1a7      	bne.n	8017bc4 <lv_ta_scrollable_design+0x10>
            lv_draw_rect(&cur_area, mask, &cur_style, opa_scale);
 8017c74:	4633      	mov	r3, r6
 8017c76:	aa08      	add	r2, sp, #32
 8017c78:	4629      	mov	r1, r5
 8017c7a:	a804      	add	r0, sp, #16
 8017c7c:	f7f4 ffd4 	bl	800cc28 <lv_draw_rect>
 8017c80:	e7a0      	b.n	8017bc4 <lv_ta_scrollable_design+0x10>
        return scrl_design(scrl, mask, mode);
 8017c82:	4b21      	ldr	r3, [pc, #132]	; (8017d08 <lv_ta_scrollable_design+0x154>)
 8017c84:	689b      	ldr	r3, [r3, #8]
 8017c86:	4798      	blx	r3
 8017c88:	e79d      	b.n	8017bc6 <lv_ta_scrollable_design+0x12>
            cur_style.body.empty = 1;
 8017c8a:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
            if(cur_style.body.border.width == 0) cur_style.body.border.width = 1; /*Be sure the border will be drawn*/
 8017c8e:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
            cur_style.body.empty = 1;
 8017c92:	f043 0301 	orr.w	r3, r3, #1
 8017c96:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
            if(cur_style.body.border.width == 0) cur_style.body.border.width = 1; /*Be sure the border will be drawn*/
 8017c9a:	2a00      	cmp	r2, #0
 8017c9c:	d1ea      	bne.n	8017c74 <lv_ta_scrollable_design+0xc0>
 8017c9e:	2301      	movs	r3, #1
 8017ca0:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8017ca4:	e7e6      	b.n	8017c74 <lv_ta_scrollable_design+0xc0>
            lv_draw_rect(&cur_area, mask, &cur_style, opa_scale);
 8017ca6:	4629      	mov	r1, r5
 8017ca8:	4603      	mov	r3, r0
 8017caa:	aa08      	add	r2, sp, #32
 8017cac:	a804      	add	r0, sp, #16
 8017cae:	f7f4 ffbb 	bl	800cc28 <lv_draw_rect>
            memcpy(letter_buf, &txt[ext->cursor.txt_byte_pos], lv_txt_encoded_size(&txt[ext->cursor.txt_byte_pos]));
 8017cb2:	f8b4 2058 	ldrh.w	r2, [r4, #88]	; 0x58
 8017cb6:	4b15      	ldr	r3, [pc, #84]	; (8017d0c <lv_ta_scrollable_design+0x158>)
            char letter_buf[8] = {0};
 8017cb8:	f10d 0918 	add.w	r9, sp, #24
            memcpy(letter_buf, &txt[ext->cursor.txt_byte_pos], lv_txt_encoded_size(&txt[ext->cursor.txt_byte_pos]));
 8017cbc:	4490      	add	r8, r2
            char letter_buf[8] = {0};
 8017cbe:	9706      	str	r7, [sp, #24]
            memcpy(letter_buf, &txt[ext->cursor.txt_byte_pos], lv_txt_encoded_size(&txt[ext->cursor.txt_byte_pos]));
 8017cc0:	681b      	ldr	r3, [r3, #0]
            char letter_buf[8] = {0};
 8017cc2:	9707      	str	r7, [sp, #28]
            memcpy(letter_buf, &txt[ext->cursor.txt_byte_pos], lv_txt_encoded_size(&txt[ext->cursor.txt_byte_pos]));
 8017cc4:	4640      	mov	r0, r8
 8017cc6:	4798      	blx	r3
 8017cc8:	4641      	mov	r1, r8
 8017cca:	4602      	mov	r2, r0
 8017ccc:	4648      	mov	r0, r9
 8017cce:	f001 fcf7 	bl	80196c0 <memcpy>
            cur_area.x1 += cur_style.body.padding.hor;
 8017cd2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
            cur_area.y1 += cur_style.body.padding.ver;
 8017cd6:	f8bd 4012 	ldrh.w	r4, [sp, #18]
            lv_draw_label(&cur_area, mask, &cur_style, opa_scale, letter_buf, LV_TXT_FLAG_NONE, 0);
 8017cda:	4633      	mov	r3, r6
            cur_area.y1 += cur_style.body.padding.ver;
 8017cdc:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
            lv_draw_label(&cur_area, mask, &cur_style, opa_scale, letter_buf, LV_TXT_FLAG_NONE, 0);
 8017ce0:	aa08      	add	r2, sp, #32
            cur_area.x1 += cur_style.body.padding.hor;
 8017ce2:	f8bd e042 	ldrh.w	lr, [sp, #66]	; 0x42
            cur_area.y1 += cur_style.body.padding.ver;
 8017ce6:	4404      	add	r4, r0
            lv_draw_label(&cur_area, mask, &cur_style, opa_scale, letter_buf, LV_TXT_FLAG_NONE, 0);
 8017ce8:	f8cd 9000 	str.w	r9, [sp]
            cur_area.x1 += cur_style.body.padding.hor;
 8017cec:	eb01 060e 	add.w	r6, r1, lr
            lv_draw_label(&cur_area, mask, &cur_style, opa_scale, letter_buf, LV_TXT_FLAG_NONE, 0);
 8017cf0:	9702      	str	r7, [sp, #8]
 8017cf2:	4629      	mov	r1, r5
 8017cf4:	9701      	str	r7, [sp, #4]
 8017cf6:	a804      	add	r0, sp, #16
            cur_area.x1 += cur_style.body.padding.hor;
 8017cf8:	f8ad 6010 	strh.w	r6, [sp, #16]
            cur_area.y1 += cur_style.body.padding.ver;
 8017cfc:	f8ad 4012 	strh.w	r4, [sp, #18]
            lv_draw_label(&cur_area, mask, &cur_style, opa_scale, letter_buf, LV_TXT_FLAG_NONE, 0);
 8017d00:	f7f2 ff6e 	bl	800abe0 <lv_draw_label>
 8017d04:	e75e      	b.n	8017bc4 <lv_ta_scrollable_design+0x10>
 8017d06:	bf00      	nop
 8017d08:	20017504 	.word	0x20017504
 8017d0c:	200000ac 	.word	0x200000ac

08017d10 <lv_ta_set_cursor_pos>:
{
 8017d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d14:	b08e      	sub	sp, #56	; 0x38
 8017d16:	460c      	mov	r4, r1
 8017d18:	4606      	mov	r6, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8017d1a:	f7f1 ff93 	bl	8009c44 <lv_obj_get_ext_attr>
    if(ext->cursor.pos == pos) return;
 8017d1e:	f8b0 304e 	ldrh.w	r3, [r0, #78]	; 0x4e
 8017d22:	42a3      	cmp	r3, r4
 8017d24:	f000 8084 	beq.w	8017e30 <lv_ta_set_cursor_pos+0x120>
    uint16_t len = lv_txt_get_encoded_length(lv_label_get_text(ext->label));
 8017d28:	4b57      	ldr	r3, [pc, #348]	; (8017e88 <lv_ta_set_cursor_pos+0x178>)
 8017d2a:	4605      	mov	r5, r0
 8017d2c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8017d2e:	681f      	ldr	r7, [r3, #0]
 8017d30:	f7fc fb5c 	bl	80143ec <lv_label_get_text>
 8017d34:	47b8      	blx	r7
    if(pos < 0) pos = len + pos;
 8017d36:	2c00      	cmp	r4, #0
 8017d38:	db7f      	blt.n	8017e3a <lv_ta_set_cursor_pos+0x12a>
    if(pos > len || pos == LV_TA_CURSOR_LAST) pos = len;
 8017d3a:	b283      	uxth	r3, r0
 8017d3c:	42a3      	cmp	r3, r4
 8017d3e:	db7a      	blt.n	8017e36 <lv_ta_set_cursor_pos+0x126>
 8017d40:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8017d44:	429c      	cmp	r4, r3
 8017d46:	d076      	beq.n	8017e36 <lv_ta_set_cursor_pos+0x126>
    ext->cursor.pos = pos;
 8017d48:	b2a4      	uxth	r4, r4
    lv_obj_t * label_par = lv_obj_get_parent(ext->label);
 8017d4a:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    ext->cursor.pos = pos;
 8017d4c:	f8a5 404e 	strh.w	r4, [r5, #78]	; 0x4e
    lv_obj_t * label_par = lv_obj_get_parent(ext->label);
 8017d50:	f7f1 fda2 	bl	8009898 <lv_obj_get_parent>
 8017d54:	4680      	mov	r8, r0
    lv_style_t * style = lv_obj_get_style(ta);
 8017d56:	4630      	mov	r0, r6
 8017d58:	f7f1 fe5a 	bl	8009a10 <lv_obj_get_style>
 8017d5c:	4607      	mov	r7, r0
    lv_label_get_letter_pos(ext->label, pos, &cur_pos);
 8017d5e:	466a      	mov	r2, sp
 8017d60:	4621      	mov	r1, r4
 8017d62:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    const lv_font_t * font_p = style->text.font;
 8017d64:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    lv_label_get_letter_pos(ext->label, pos, &cur_pos);
 8017d66:	f7fc fb4f 	bl	8014408 <lv_label_get_letter_pos>
    lv_obj_get_coords(ta, &ta_cords);
 8017d6a:	a903      	add	r1, sp, #12
 8017d6c:	4630      	mov	r0, r6
 8017d6e:	f7f1 fe31 	bl	80099d4 <lv_obj_get_coords>
    lv_obj_get_coords(ext->label, &label_cords);
 8017d72:	a901      	add	r1, sp, #4
 8017d74:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8017d76:	f7f1 fe2d 	bl	80099d4 <lv_obj_get_coords>
    if(lv_obj_get_y(label_par) + cur_pos.y < 0) {
 8017d7a:	4640      	mov	r0, r8
 8017d7c:	f894 4020 	ldrb.w	r4, [r4, #32]
 8017d80:	f7f1 fe34 	bl	80099ec <lv_obj_get_y>
 8017d84:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8017d88:	42c8      	cmn	r0, r1
 8017d8a:	d474      	bmi.n	8017e76 <lv_ta_set_cursor_pos+0x166>
    if(label_cords.y1 + cur_pos.y + font_h + style->body.padding.ver > ta_cords.y2) {
 8017d8c:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8017d90:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8017d94:	440b      	add	r3, r1
 8017d96:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8017d9a:	4423      	add	r3, r4
 8017d9c:	4403      	add	r3, r0
 8017d9e:	4293      	cmp	r3, r2
 8017da0:	dc5a      	bgt.n	8017e58 <lv_ta_set_cursor_pos+0x148>
    if(lv_obj_get_x(label_par) + cur_pos.x < font_h) {
 8017da2:	4640      	mov	r0, r8
 8017da4:	f7f1 fe1c 	bl	80099e0 <lv_obj_get_x>
 8017da8:	f9bd 1000 	ldrsh.w	r1, [sp]
 8017dac:	4408      	add	r0, r1
 8017dae:	4284      	cmp	r4, r0
 8017db0:	dc4a      	bgt.n	8017e48 <lv_ta_set_cursor_pos+0x138>
    if(label_cords.x1 + cur_pos.x + font_h + style->body.padding.hor > ta_cords.x2) {
 8017db2:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8017db6:	f9b7 0022 	ldrsh.w	r0, [r7, #34]	; 0x22
 8017dba:	440b      	add	r3, r1
 8017dbc:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8017dc0:	4423      	add	r3, r4
 8017dc2:	4403      	add	r3, r0
 8017dc4:	4293      	cmp	r3, r2
 8017dc6:	dd0f      	ble.n	8017de8 <lv_ta_set_cursor_pos+0xd8>
        lv_obj_set_x(label_par, -(cur_pos.x - lv_obj_get_width(ta) +
 8017dc8:	4630      	mov	r0, r6
 8017dca:	f7f1 fe15 	bl	80099f8 <lv_obj_get_width>
 8017dce:	f8bd 1000 	ldrh.w	r1, [sp]
 8017dd2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017dd4:	1a41      	subs	r1, r0, r1
 8017dd6:	4640      	mov	r0, r8
 8017dd8:	1b0c      	subs	r4, r1, r4
 8017dda:	eba4 0143 	sub.w	r1, r4, r3, lsl #1
 8017dde:	b209      	sxth	r1, r1
 8017de0:	f7f1 fa4e 	bl	8009280 <lv_obj_set_x>
 8017de4:	f9bd 1000 	ldrsh.w	r1, [sp]
    a.repeat = 1;
 8017de8:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
    a.act_time = 0;
 8017dec:	2300      	movs	r3, #0
    a.fp = (lv_anim_fp_t)cursor_blink_anim;
 8017dee:	f8df e0a0 	ldr.w	lr, [pc, #160]	; 8017e90 <lv_ta_set_cursor_pos+0x180>
    a.time = LV_TA_CURSOR_BLINK_TIME;
 8017df2:	f44f 77c8 	mov.w	r7, #400	; 0x190
    a.playback = 1;
 8017df6:	f042 0203 	orr.w	r2, r2, #3
    ext->cursor.valid_x = cur_pos.x;
 8017dfa:	f8a5 104c 	strh.w	r1, [r5, #76]	; 0x4c
    a.start = 1;
 8017dfe:	2401      	movs	r4, #1
    a.path = lv_anim_path_step;
 8017e00:	4922      	ldr	r1, [pc, #136]	; (8017e8c <lv_ta_set_cursor_pos+0x17c>)
    lv_anim_create(&a);
 8017e02:	a805      	add	r0, sp, #20
    a.var = ta;
 8017e04:	9605      	str	r6, [sp, #20]
    a.playback = 1;
 8017e06:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
    a.fp = (lv_anim_fp_t)cursor_blink_anim;
 8017e0a:	f8cd e018 	str.w	lr, [sp, #24]
    a.time = LV_TA_CURSOR_BLINK_TIME;
 8017e0e:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
    a.act_time = 0;
 8017e12:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    a.end_cb = NULL;
 8017e16:	9307      	str	r3, [sp, #28]
    a.end = 0;
 8017e18:	930a      	str	r3, [sp, #40]	; 0x28
    a.repeat_pause = 0;
 8017e1a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    a.playback_pause = 0;
 8017e1e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
    a.start = 1;
 8017e22:	9409      	str	r4, [sp, #36]	; 0x24
    a.path = lv_anim_path_step;
 8017e24:	9108      	str	r1, [sp, #32]
    lv_anim_create(&a);
 8017e26:	f7f7 fd0b 	bl	800f840 <lv_anim_create>
    refr_cursor_area(ta);
 8017e2a:	4630      	mov	r0, r6
 8017e2c:	f7ff fd42 	bl	80178b4 <refr_cursor_area>
}
 8017e30:	b00e      	add	sp, #56	; 0x38
 8017e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(pos > len || pos == LV_TA_CURSOR_LAST) pos = len;
 8017e36:	b204      	sxth	r4, r0
 8017e38:	e786      	b.n	8017d48 <lv_ta_set_cursor_pos+0x38>
    if(pos < 0) pos = len + pos;
 8017e3a:	4404      	add	r4, r0
    if(pos > len || pos == LV_TA_CURSOR_LAST) pos = len;
 8017e3c:	b283      	uxth	r3, r0
    if(pos < 0) pos = len + pos;
 8017e3e:	b224      	sxth	r4, r4
    if(pos > len || pos == LV_TA_CURSOR_LAST) pos = len;
 8017e40:	42a3      	cmp	r3, r4
 8017e42:	f6bf af7d 	bge.w	8017d40 <lv_ta_set_cursor_pos+0x30>
 8017e46:	e7f6      	b.n	8017e36 <lv_ta_set_cursor_pos+0x126>
        lv_obj_set_x(label_par, - cur_pos.x + font_h);
 8017e48:	1a61      	subs	r1, r4, r1
 8017e4a:	4640      	mov	r0, r8
 8017e4c:	b209      	sxth	r1, r1
 8017e4e:	f7f1 fa17 	bl	8009280 <lv_obj_set_x>
 8017e52:	f9bd 1000 	ldrsh.w	r1, [sp]
 8017e56:	e7ac      	b.n	8017db2 <lv_ta_set_cursor_pos+0xa2>
        lv_obj_set_y(label_par, -(cur_pos.y - lv_obj_get_height(ta) +
 8017e58:	4630      	mov	r0, r6
 8017e5a:	f7f1 fdd3 	bl	8009a04 <lv_obj_get_height>
 8017e5e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8017e62:	8c3b      	ldrh	r3, [r7, #32]
 8017e64:	1a41      	subs	r1, r0, r1
 8017e66:	4640      	mov	r0, r8
 8017e68:	1b09      	subs	r1, r1, r4
 8017e6a:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
 8017e6e:	b209      	sxth	r1, r1
 8017e70:	f7f1 fa10 	bl	8009294 <lv_obj_set_y>
 8017e74:	e795      	b.n	8017da2 <lv_ta_set_cursor_pos+0x92>
        lv_obj_set_y(label_par, - cur_pos.y + style->body.padding.ver);
 8017e76:	8c3b      	ldrh	r3, [r7, #32]
 8017e78:	4640      	mov	r0, r8
 8017e7a:	1a59      	subs	r1, r3, r1
 8017e7c:	b209      	sxth	r1, r1
 8017e7e:	f7f1 fa09 	bl	8009294 <lv_obj_set_y>
 8017e82:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8017e86:	e781      	b.n	8017d8c <lv_ta_set_cursor_pos+0x7c>
 8017e88:	200000bc 	.word	0x200000bc
 8017e8c:	0800f905 	.word	0x0800f905
 8017e90:	08017799 	.word	0x08017799

08017e94 <lv_ta_del_char>:
{
 8017e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e96:	4605      	mov	r5, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8017e98:	f7f1 fed4 	bl	8009c44 <lv_obj_get_ext_attr>
    if(cur_pos == 0) return;
 8017e9c:	f8b0 304e 	ldrh.w	r3, [r0, #78]	; 0x4e
 8017ea0:	b903      	cbnz	r3, 8017ea4 <lv_ta_del_char+0x10>
 8017ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017ea4:	4604      	mov	r4, r0
    char * label_txt = lv_label_get_text(ext->label);
 8017ea6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8017ea8:	f7fc faa0 	bl	80143ec <lv_label_get_text>
 8017eac:	4607      	mov	r7, r0
    lv_txt_cut(label_txt, ext->cursor.pos - 1, 1);
 8017eae:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 8017eb2:	2201      	movs	r2, #1
 8017eb4:	3901      	subs	r1, #1
 8017eb6:	f7f8 feb1 	bl	8010c1c <lv_txt_cut>
    lv_label_set_text(ext->label, label_txt);
 8017eba:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8017ebc:	4639      	mov	r1, r7
 8017ebe:	f7fc fe5d 	bl	8014b7c <lv_label_set_text>
    if(lv_obj_get_width(ext->label) == 0) {
 8017ec2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8017ec4:	f7f1 fd98 	bl	80099f8 <lv_obj_get_width>
 8017ec8:	b358      	cbz	r0, 8017f22 <lv_ta_del_char+0x8e>
    if(ext->pwd_mode != 0) {
 8017eca:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8017ece:	07db      	lsls	r3, r3, #31
 8017ed0:	d51d      	bpl.n	8017f0e <lv_ta_del_char+0x7a>
        uint32_t byte_pos = lv_txt_encoded_get_byte_id(ext->pwd_tmp, ext->cursor.pos - 1);
 8017ed2:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 8017ed6:	4b17      	ldr	r3, [pc, #92]	; (8017f34 <lv_ta_del_char+0xa0>)
 8017ed8:	3901      	subs	r1, #1
 8017eda:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8017edc:	681b      	ldr	r3, [r3, #0]
 8017ede:	4798      	blx	r3
        lv_txt_cut(ext->pwd_tmp, ext->cursor.pos - 1, lv_txt_encoded_size(&label_txt[byte_pos]));
 8017ee0:	f8b4 604e 	ldrh.w	r6, [r4, #78]	; 0x4e
 8017ee4:	4b14      	ldr	r3, [pc, #80]	; (8017f38 <lv_ta_del_char+0xa4>)
 8017ee6:	4438      	add	r0, r7
 8017ee8:	3e01      	subs	r6, #1
 8017eea:	6be7      	ldr	r7, [r4, #60]	; 0x3c
 8017eec:	681b      	ldr	r3, [r3, #0]
 8017eee:	4798      	blx	r3
 8017ef0:	4631      	mov	r1, r6
 8017ef2:	4602      	mov	r2, r0
 8017ef4:	4638      	mov	r0, r7
 8017ef6:	f7f8 fe91 	bl	8010c1c <lv_txt_cut>
        ext->pwd_tmp = lv_mem_realloc(ext->pwd_tmp, strlen(ext->pwd_tmp) + 1);
 8017efa:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 8017efc:	4630      	mov	r0, r6
 8017efe:	f7e8 f98d 	bl	800021c <strlen>
 8017f02:	1c41      	adds	r1, r0, #1
 8017f04:	4630      	mov	r0, r6
 8017f06:	f7f8 f917 	bl	8010138 <lv_mem_realloc>
 8017f0a:	63e0      	str	r0, [r4, #60]	; 0x3c
        lv_mem_assert(ext->pwd_tmp);
 8017f0c:	b140      	cbz	r0, 8017f20 <lv_ta_del_char+0x8c>
    lv_ta_set_cursor_pos(ta, ext->cursor.pos - 1);
 8017f0e:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 8017f12:	4628      	mov	r0, r5
 8017f14:	3901      	subs	r1, #1
}
 8017f16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_ta_set_cursor_pos(ta, ext->cursor.pos - 1);
 8017f1a:	b209      	sxth	r1, r1
 8017f1c:	f7ff bef8 	b.w	8017d10 <lv_ta_set_cursor_pos>
 8017f20:	e7fe      	b.n	8017f20 <lv_ta_del_char+0x8c>
        lv_style_t * style = lv_obj_get_style(ext->label);
 8017f22:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8017f24:	f7f1 fd74 	bl	8009a10 <lv_obj_get_style>
        lv_obj_set_width(ext->label, style->line.width);
 8017f28:	f9b0 1044 	ldrsh.w	r1, [r0, #68]	; 0x44
 8017f2c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8017f2e:	f7f1 f9f3 	bl	8009318 <lv_obj_set_width>
 8017f32:	e7ca      	b.n	8017eca <lv_ta_del_char+0x36>
 8017f34:	200000b8 	.word	0x200000b8
 8017f38:	200000ac 	.word	0x200000ac

08017f3c <lv_ta_set_cursor_type>:
{
 8017f3c:	b538      	push	{r3, r4, r5, lr}
 8017f3e:	460c      	mov	r4, r1
 8017f40:	4605      	mov	r5, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8017f42:	f7f1 fe7f 	bl	8009c44 <lv_obj_get_ext_attr>
    if(ext->cursor.type == cur_type) return;
 8017f46:	f890 305a 	ldrb.w	r3, [r0, #90]	; 0x5a
 8017f4a:	f003 010f 	and.w	r1, r3, #15
 8017f4e:	42a1      	cmp	r1, r4
 8017f50:	d009      	beq.n	8017f66 <lv_ta_set_cursor_type+0x2a>
 8017f52:	4602      	mov	r2, r0
    ext->cursor.type = cur_type;
 8017f54:	f364 0303 	bfi	r3, r4, #0, #4
    refr_cursor_area(ta);
 8017f58:	4628      	mov	r0, r5
    ext->cursor.type = cur_type;
 8017f5a:	f882 305a 	strb.w	r3, [r2, #90]	; 0x5a
}
 8017f5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    refr_cursor_area(ta);
 8017f62:	f7ff bca7 	b.w	80178b4 <refr_cursor_area>
 8017f66:	bd38      	pop	{r3, r4, r5, pc}

08017f68 <lv_ta_set_one_line>:
{
 8017f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f6c:	460e      	mov	r6, r1
 8017f6e:	4604      	mov	r4, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8017f70:	f7f1 fe68 	bl	8009c44 <lv_obj_get_ext_attr>
    if(ext->one_line == en) return;
 8017f74:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 8017f78:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8017f7c:	42b3      	cmp	r3, r6
 8017f7e:	d061      	beq.n	8018044 <lv_ta_set_one_line+0xdc>
 8017f80:	4605      	mov	r5, r0
        lv_style_t * style_ta = lv_obj_get_style(ta);
 8017f82:	4620      	mov	r0, r4
    if(en) {
 8017f84:	bb2e      	cbnz	r6, 8017fd2 <lv_ta_set_one_line+0x6a>
        lv_style_t * style_ta = lv_obj_get_style(ta);
 8017f86:	f7f1 fd43 	bl	8009a10 <lv_obj_get_style>
        ext->one_line = 0;
 8017f8a:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
        lv_style_t * style_ta = lv_obj_get_style(ta);
 8017f8e:	4607      	mov	r7, r0
    lv_cont_set_fit(lv_page_get_scrl(page), hor_en, ver_en);
 8017f90:	4620      	mov	r0, r4
        ext->one_line = 0;
 8017f92:	f366 0341 	bfi	r3, r6, #1, #1
 8017f96:	f885 3046 	strb.w	r3, [r5, #70]	; 0x46
 8017f9a:	f7fe fb6f 	bl	801667c <lv_page_get_scrl>
 8017f9e:	2201      	movs	r2, #1
 8017fa0:	4631      	mov	r1, r6
 8017fa2:	f7fb fd2d 	bl	8013a00 <lv_cont_set_fit>
        lv_label_set_long_mode(ext->label, LV_LABEL_LONG_BREAK);
 8017fa6:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8017fa8:	2101      	movs	r1, #1
 8017faa:	f7fc fe39 	bl	8014c20 <lv_label_set_long_mode>
        lv_obj_set_height(ta, LV_TA_DEF_HEIGHT);
 8017fae:	2164      	movs	r1, #100	; 0x64
 8017fb0:	4620      	mov	r0, r4
 8017fb2:	f7f1 f9b9 	bl	8009328 <lv_obj_set_height>
        lv_obj_set_pos(lv_page_get_scrl(ta), style_ta->body.padding.hor, style_ta->body.padding.ver);
 8017fb6:	4620      	mov	r0, r4
 8017fb8:	f7fe fb60 	bl	801667c <lv_page_get_scrl>
 8017fbc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017fc0:	f9b7 1022 	ldrsh.w	r1, [r7, #34]	; 0x22
 8017fc4:	f7f0 ffe6 	bl	8008f94 <lv_obj_set_pos>
    refr_cursor_area(ta);
 8017fc8:	4620      	mov	r0, r4
}
 8017fca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    refr_cursor_area(ta);
 8017fce:	f7ff bc71 	b.w	80178b4 <refr_cursor_area>
        lv_style_t * style_ta = lv_obj_get_style(ta);
 8017fd2:	f7f1 fd1d 	bl	8009a10 <lv_obj_get_style>
 8017fd6:	4606      	mov	r6, r0
        lv_style_t * style_scrl = lv_obj_get_style(lv_page_get_scrl(ta));
 8017fd8:	4620      	mov	r0, r4
 8017fda:	f7fe fb4f 	bl	801667c <lv_page_get_scrl>
 8017fde:	f7f1 fd17 	bl	8009a10 <lv_obj_get_style>
 8017fe2:	4680      	mov	r8, r0
        lv_style_t * style_label = lv_obj_get_style(ext->label);
 8017fe4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8017fe6:	f7f1 fd13 	bl	8009a10 <lv_obj_get_style>
        ext->one_line = 1;
 8017fea:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 8017fee:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8017ff0:	4620      	mov	r0, r4
 8017ff2:	f043 0302 	orr.w	r3, r3, #2
 8017ff6:	f892 7020 	ldrb.w	r7, [r2, #32]
 8017ffa:	f885 3046 	strb.w	r3, [r5, #70]	; 0x46
 8017ffe:	f7fe fb3d 	bl	801667c <lv_page_get_scrl>
 8018002:	2201      	movs	r2, #1
 8018004:	4611      	mov	r1, r2
 8018006:	f7fb fcfb 	bl	8013a00 <lv_cont_set_fit>
        lv_obj_set_height(ta, font_h + (style_ta->body.padding.ver + style_scrl->body.padding.ver) * 2);
 801800a:	f9b8 3020 	ldrsh.w	r3, [r8, #32]
 801800e:	f9b6 1020 	ldrsh.w	r1, [r6, #32]
 8018012:	4620      	mov	r0, r4
 8018014:	4419      	add	r1, r3
 8018016:	eb07 0141 	add.w	r1, r7, r1, lsl #1
 801801a:	b209      	sxth	r1, r1
 801801c:	f7f1 f984 	bl	8009328 <lv_obj_set_height>
        lv_label_set_long_mode(ext->label, LV_LABEL_LONG_EXPAND);
 8018020:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8018022:	2100      	movs	r1, #0
 8018024:	f7fc fdfc 	bl	8014c20 <lv_label_set_long_mode>
        lv_obj_set_pos(lv_page_get_scrl(ta), style_ta->body.padding.hor, style_ta->body.padding.ver);
 8018028:	4620      	mov	r0, r4
 801802a:	f7fe fb27 	bl	801667c <lv_page_get_scrl>
 801802e:	f9b6 2020 	ldrsh.w	r2, [r6, #32]
 8018032:	f9b6 1022 	ldrsh.w	r1, [r6, #34]	; 0x22
 8018036:	f7f0 ffad 	bl	8008f94 <lv_obj_set_pos>
    refr_cursor_area(ta);
 801803a:	4620      	mov	r0, r4
}
 801803c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    refr_cursor_area(ta);
 8018040:	f7ff bc38 	b.w	80178b4 <refr_cursor_area>
 8018044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018048 <lv_ta_set_style>:
{
 8018048:	b570      	push	{r4, r5, r6, lr}
 801804a:	460c      	mov	r4, r1
 801804c:	4616      	mov	r6, r2
 801804e:	4605      	mov	r5, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8018050:	f7f1 fdf8 	bl	8009c44 <lv_obj_get_ext_attr>
    switch(type) {
 8018054:	2c03      	cmp	r4, #3
 8018056:	d823      	bhi.n	80180a0 <lv_ta_set_style+0x58>
 8018058:	e8df f004 	tbb	[pc, r4]
 801805c:	020d141b 	.word	0x020d141b
            ext->cursor.style = style;
 8018060:	6486      	str	r6, [r0, #72]	; 0x48
            lv_obj_refresh_ext_size(lv_page_get_scrl(ta)); /*Refresh ext. size because of cursor drawing*/
 8018062:	4628      	mov	r0, r5
 8018064:	f7fe fb0a 	bl	801667c <lv_page_get_scrl>
 8018068:	f7f1 fb82 	bl	8009770 <lv_obj_refresh_ext_size>
            refr_cursor_area(ta);
 801806c:	4628      	mov	r0, r5
}
 801806e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            refr_cursor_area(ta);
 8018072:	f7ff bc1f 	b.w	80178b4 <refr_cursor_area>
            lv_page_set_style(ta, LV_PAGE_STYLE_EDGE_FLASH, style);
 8018076:	4632      	mov	r2, r6
 8018078:	4628      	mov	r0, r5
 801807a:	2103      	movs	r1, #3
}
 801807c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_page_set_style(ta, LV_PAGE_STYLE_EDGE_FLASH, style);
 8018080:	f7fe b99e 	b.w	80163c0 <lv_page_set_style>
            lv_page_set_style(ta, LV_PAGE_STYLE_SB, style);
 8018084:	4632      	mov	r2, r6
 8018086:	4628      	mov	r0, r5
 8018088:	2102      	movs	r1, #2
}
 801808a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_page_set_style(ta, LV_PAGE_STYLE_SB, style);
 801808e:	f7fe b997 	b.w	80163c0 <lv_page_set_style>
            lv_page_set_style(ta, LV_PAGE_STYLE_BG, style);
 8018092:	4632      	mov	r2, r6
 8018094:	4628      	mov	r0, r5
 8018096:	2100      	movs	r1, #0
}
 8018098:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_page_set_style(ta, LV_PAGE_STYLE_BG, style);
 801809c:	f7fe b990 	b.w	80163c0 <lv_page_set_style>
 80180a0:	bd70      	pop	{r4, r5, r6, pc}
 80180a2:	bf00      	nop

080180a4 <lv_ta_create>:
{
 80180a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180a8:	b08a      	sub	sp, #40	; 0x28
 80180aa:	460f      	mov	r7, r1
    lv_obj_t * new_ta = lv_page_create(par, copy);
 80180ac:	f7fe f9bc 	bl	8016428 <lv_page_create>
    lv_mem_assert(new_ta);
 80180b0:	2800      	cmp	r0, #0
 80180b2:	f000 80a5 	beq.w	8018200 <lv_ta_create+0x15c>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_ta);
 80180b6:	4c7f      	ldr	r4, [pc, #508]	; (80182b4 <lv_ta_create+0x210>)
 80180b8:	4605      	mov	r5, r0
 80180ba:	68e3      	ldr	r3, [r4, #12]
 80180bc:	2b00      	cmp	r3, #0
 80180be:	f000 80ef 	beq.w	80182a0 <lv_ta_create+0x1fc>
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_func(new_ta);
 80180c2:	6823      	ldr	r3, [r4, #0]
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	f000 80dc 	beq.w	8018282 <lv_ta_create+0x1de>
    if(scrl_signal == NULL) scrl_signal = lv_obj_get_signal_func(lv_page_get_scrl(new_ta));
 80180ca:	6863      	ldr	r3, [r4, #4]
 80180cc:	2b00      	cmp	r3, #0
 80180ce:	f000 80e0 	beq.w	8018292 <lv_ta_create+0x1ee>
    if(scrl_design == NULL) scrl_design = lv_obj_get_design_func(lv_page_get_scrl(new_ta));
 80180d2:	68a3      	ldr	r3, [r4, #8]
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	f000 80cd 	beq.w	8018274 <lv_ta_create+0x1d0>
    lv_ta_ext_t * ext = lv_obj_allocate_ext_attr(new_ta, sizeof(lv_ta_ext_t));
 80180da:	215c      	movs	r1, #92	; 0x5c
 80180dc:	4628      	mov	r0, r5
 80180de:	f7f1 fb3f 	bl	8009760 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 80180e2:	4604      	mov	r4, r0
 80180e4:	2800      	cmp	r0, #0
 80180e6:	f000 808a 	beq.w	80181fe <lv_ta_create+0x15a>
    ext->cursor.state = 1;
 80180ea:	f890 005a 	ldrb.w	r0, [r0, #90]	; 0x5a
    ext->pwd_tmp = NULL;
 80180ee:	2300      	movs	r3, #0
    ext->pwd_mode = 0;
 80180f0:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
    ext->cursor.type = LV_CURSOR_LINE;
 80180f4:	f04f 0801 	mov.w	r8, #1
 80180f8:	f040 0010 	orr.w	r0, r0, #16
    lv_obj_set_signal_func(new_ta, lv_ta_signal);
 80180fc:	496e      	ldr	r1, [pc, #440]	; (80182b8 <lv_ta_create+0x214>)
    ext->one_line = 0;
 80180fe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    ext->pwd_tmp = NULL;
 8018102:	63e3      	str	r3, [r4, #60]	; 0x3c
    ext->cursor.type = LV_CURSOR_LINE;
 8018104:	f368 0003 	bfi	r0, r8, #0, #4
    ext->accapted_chars = NULL;
 8018108:	6423      	str	r3, [r4, #64]	; 0x40
    ext->one_line = 0;
 801810a:	f363 0241 	bfi	r2, r3, #1, #1
    ext->max_length = 0;
 801810e:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    ext->cursor.style = NULL;
 8018112:	64a3      	str	r3, [r4, #72]	; 0x48
    ext->one_line = 0;
 8018114:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
    ext->cursor.pos = 0;
 8018118:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
    ext->cursor.valid_x = 0;
 801811c:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
    ext->label = NULL;
 8018120:	63a3      	str	r3, [r4, #56]	; 0x38
    ext->cursor.type = LV_CURSOR_LINE;
 8018122:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
    lv_obj_set_signal_func(new_ta, lv_ta_signal);
 8018126:	4628      	mov	r0, r5
 8018128:	f7f1 fb16 	bl	8009758 <lv_obj_set_signal_func>
    lv_obj_set_signal_func(lv_page_get_scrl(new_ta), lv_ta_scrollable_signal);
 801812c:	4628      	mov	r0, r5
 801812e:	f7fe faa5 	bl	801667c <lv_page_get_scrl>
 8018132:	4962      	ldr	r1, [pc, #392]	; (80182bc <lv_ta_create+0x218>)
 8018134:	f7f1 fb10 	bl	8009758 <lv_obj_set_signal_func>
    lv_obj_set_design_func(new_ta, lv_ta_design);
 8018138:	4961      	ldr	r1, [pc, #388]	; (80182c0 <lv_ta_create+0x21c>)
 801813a:	4628      	mov	r0, r5
 801813c:	f7f1 fb0e 	bl	800975c <lv_obj_set_design_func>
    if(copy == NULL) {
 8018140:	2f00      	cmp	r7, #0
 8018142:	d063      	beq.n	801820c <lv_ta_create+0x168>
        lv_obj_set_design_func(ext->page.scrl, lv_ta_scrollable_design);
 8018144:	495f      	ldr	r1, [pc, #380]	; (80182c4 <lv_ta_create+0x220>)
 8018146:	6860      	ldr	r0, [r4, #4]
 8018148:	f7f1 fb08 	bl	800975c <lv_obj_set_design_func>
        lv_ta_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801814c:	4638      	mov	r0, r7
 801814e:	f7f1 fd79 	bl	8009c44 <lv_obj_get_ext_attr>
 8018152:	4606      	mov	r6, r0
        ext->label = lv_label_create(new_ta, copy_ext->label);
 8018154:	4628      	mov	r0, r5
 8018156:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 8018158:	f7fc fdba 	bl	8014cd0 <lv_label_create>
        ext->pwd_mode = copy_ext->pwd_mode;
 801815c:	f896 1046 	ldrb.w	r1, [r6, #70]	; 0x46
 8018160:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
        ext->cursor.type = copy_ext->cursor.type;
 8018164:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
        ext->pwd_mode = copy_ext->pwd_mode;
 8018168:	f361 0200 	bfi	r2, r1, #0, #1
        ext->label = lv_label_create(new_ta, copy_ext->label);
 801816c:	63a0      	str	r0, [r4, #56]	; 0x38
        ext->pwd_mode = copy_ext->pwd_mode;
 801816e:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
        ext->cursor.type = copy_ext->cursor.type;
 8018172:	f896 205a 	ldrb.w	r2, [r6, #90]	; 0x5a
        ext->cursor.style = copy_ext->cursor.style;
 8018176:	6cb1      	ldr	r1, [r6, #72]	; 0x48
        ext->cursor.pos = copy_ext->cursor.pos;
 8018178:	f8b6 c04e 	ldrh.w	ip, [r6, #78]	; 0x4e
        ext->cursor.type = copy_ext->cursor.type;
 801817c:	f362 0303 	bfi	r3, r2, #0, #4
        ext->cursor.valid_x = copy_ext->cursor.valid_x;
 8018180:	f9b6 e04c 	ldrsh.w	lr, [r6, #76]	; 0x4c
        ext->accapted_chars = copy_ext->accapted_chars;
 8018184:	6c32      	ldr	r2, [r6, #64]	; 0x40
        ext->max_length = copy_ext->max_length;
 8018186:	f8b6 0044 	ldrh.w	r0, [r6, #68]	; 0x44
        ext->cursor.type = copy_ext->cursor.type;
 801818a:	f884 305a 	strb.w	r3, [r4, #90]	; 0x5a
        ext->cursor.style = copy_ext->cursor.style;
 801818e:	64a1      	str	r1, [r4, #72]	; 0x48
        ext->cursor.pos = copy_ext->cursor.pos;
 8018190:	f8a4 c04e 	strh.w	ip, [r4, #78]	; 0x4e
        ext->cursor.valid_x = copy_ext->cursor.valid_x;
 8018194:	f8a4 e04c 	strh.w	lr, [r4, #76]	; 0x4c
        if(copy_ext->one_line) lv_ta_set_one_line(new_ta, true);
 8018198:	f896 3046 	ldrb.w	r3, [r6, #70]	; 0x46
        ext->accapted_chars = copy_ext->accapted_chars;
 801819c:	6422      	str	r2, [r4, #64]	; 0x40
        if(copy_ext->one_line) lv_ta_set_one_line(new_ta, true);
 801819e:	079b      	lsls	r3, r3, #30
        ext->max_length = copy_ext->max_length;
 80181a0:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44
        if(copy_ext->one_line) lv_ta_set_one_line(new_ta, true);
 80181a4:	d42d      	bmi.n	8018202 <lv_ta_create+0x15e>
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 80181a6:	4638      	mov	r0, r7
 80181a8:	f7f1 fd4c 	bl	8009c44 <lv_obj_get_ext_attr>
        lv_ta_set_style(new_ta, LV_TA_STYLE_CURSOR, lv_ta_get_style(copy, LV_TA_STYLE_CURSOR));
 80181ac:	2103      	movs	r1, #3
 80181ae:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80181b0:	4628      	mov	r0, r5
 80181b2:	f7ff ff49 	bl	8018048 <lv_ta_set_style>
        lv_obj_refresh_style(new_ta);
 80181b6:	4628      	mov	r0, r5
 80181b8:	f7f1 fa70 	bl	800969c <lv_obj_refresh_style>
    a.repeat = 1;
 80181bc:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    a.act_time = 0;
 80181c0:	2300      	movs	r3, #0
    a.path = lv_anim_path_step;
 80181c2:	4941      	ldr	r1, [pc, #260]	; (80182c8 <lv_ta_create+0x224>)
    a.time = LV_TA_CURSOR_BLINK_TIME;
 80181c4:	f44f 76c8 	mov.w	r6, #400	; 0x190
    a.playback = 1;
 80181c8:	f042 0203 	orr.w	r2, r2, #3
    a.fp = (lv_anim_fp_t)cursor_blink_anim;
 80181cc:	4f3f      	ldr	r7, [pc, #252]	; (80182cc <lv_ta_create+0x228>)
    a.start = 1;
 80181ce:	2401      	movs	r4, #1
    lv_anim_create(&a);
 80181d0:	a801      	add	r0, sp, #4
    a.var = new_ta;
 80181d2:	9501      	str	r5, [sp, #4]
    a.playback = 1;
 80181d4:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
    a.fp = (lv_anim_fp_t)cursor_blink_anim;
 80181d8:	9702      	str	r7, [sp, #8]
    a.time = LV_TA_CURSOR_BLINK_TIME;
 80181da:	f8ad 601c 	strh.w	r6, [sp, #28]
    a.act_time = 0;
 80181de:	f8ad 301e 	strh.w	r3, [sp, #30]
    a.end_cb = NULL;
 80181e2:	9303      	str	r3, [sp, #12]
    a.end = 0;
 80181e4:	9306      	str	r3, [sp, #24]
    a.repeat_pause = 0;
 80181e6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    a.playback_pause = 0;
 80181ea:	f8ad 3020 	strh.w	r3, [sp, #32]
    a.start = 1;
 80181ee:	9405      	str	r4, [sp, #20]
    a.path = lv_anim_path_step;
 80181f0:	9104      	str	r1, [sp, #16]
    lv_anim_create(&a);
 80181f2:	f7f7 fb25 	bl	800f840 <lv_anim_create>
}
 80181f6:	4628      	mov	r0, r5
 80181f8:	b00a      	add	sp, #40	; 0x28
 80181fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181fe:	e7fe      	b.n	80181fe <lv_ta_create+0x15a>
 8018200:	e7fe      	b.n	8018200 <lv_ta_create+0x15c>
        if(copy_ext->one_line) lv_ta_set_one_line(new_ta, true);
 8018202:	4641      	mov	r1, r8
 8018204:	4628      	mov	r0, r5
 8018206:	f7ff feaf 	bl	8017f68 <lv_ta_set_one_line>
 801820a:	e7cc      	b.n	80181a6 <lv_ta_create+0x102>
        ext->label = lv_label_create(new_ta, NULL);
 801820c:	4639      	mov	r1, r7
 801820e:	4628      	mov	r0, r5
 8018210:	f7fc fd5e 	bl	8014cd0 <lv_label_create>
        lv_obj_set_design_func(ext->page.scrl, lv_ta_scrollable_design);
 8018214:	492b      	ldr	r1, [pc, #172]	; (80182c4 <lv_ta_create+0x220>)
        ext->label = lv_label_create(new_ta, NULL);
 8018216:	63a0      	str	r0, [r4, #56]	; 0x38
        lv_obj_set_design_func(ext->page.scrl, lv_ta_scrollable_design);
 8018218:	6860      	ldr	r0, [r4, #4]
 801821a:	f7f1 fa9f 	bl	800975c <lv_obj_set_design_func>
        lv_label_set_long_mode(ext->label, LV_LABEL_LONG_BREAK);
 801821e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8018220:	4641      	mov	r1, r8
 8018222:	f7fc fcfd 	bl	8014c20 <lv_label_set_long_mode>
        lv_label_set_text(ext->label, "Text area");
 8018226:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8018228:	4929      	ldr	r1, [pc, #164]	; (80182d0 <lv_ta_create+0x22c>)
 801822a:	f7fc fca7 	bl	8014b7c <lv_label_set_text>
        lv_obj_set_click(ext->label, false);
 801822e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8018230:	4639      	mov	r1, r7
 8018232:	f7f1 fa5d 	bl	80096f0 <lv_obj_set_click>
        lv_obj_set_size(new_ta, LV_TA_DEF_WIDTH, LV_TA_DEF_HEIGHT);
 8018236:	2264      	movs	r2, #100	; 0x64
 8018238:	21c8      	movs	r1, #200	; 0xc8
 801823a:	4628      	mov	r0, r5
 801823c:	f7f1 f836 	bl	80092ac <lv_obj_set_size>
 * @param ta pointer to a text area object
 * @param sb_mode the new mode from 'lv_page_sb_mode_t' enum
 */
static inline void lv_ta_set_sb_mode(lv_obj_t * ta, lv_sb_mode_t mode)
{
    lv_page_set_sb_mode(ta, mode);
 8018240:	2102      	movs	r1, #2
 8018242:	4628      	mov	r0, r5
 8018244:	f7fe f876 	bl	8016334 <lv_page_set_sb_mode>
        lv_page_set_style(new_ta, LV_PAGE_STYLE_SCRL, &lv_style_transp_tight);
 8018248:	4641      	mov	r1, r8
 801824a:	4a22      	ldr	r2, [pc, #136]	; (80182d4 <lv_ta_create+0x230>)
 801824c:	4628      	mov	r0, r5
 801824e:	f7fe f8b7 	bl	80163c0 <lv_page_set_style>
        lv_theme_t * th = lv_theme_get_current();
 8018252:	f001 f9e1 	bl	8019618 <lv_theme_get_current>
            lv_ta_set_style(new_ta, LV_TA_STYLE_BG, th->ta.area);
 8018256:	4639      	mov	r1, r7
        if(th) {
 8018258:	4604      	mov	r4, r0
 801825a:	b328      	cbz	r0, 80182a8 <lv_ta_create+0x204>
            lv_ta_set_style(new_ta, LV_TA_STYLE_BG, th->ta.area);
 801825c:	f8d0 20d0 	ldr.w	r2, [r0, #208]	; 0xd0
 8018260:	4628      	mov	r0, r5
 8018262:	f7ff fef1 	bl	8018048 <lv_ta_set_style>
            lv_ta_set_style(new_ta, LV_TA_STYLE_SB, th->ta.sb);
 8018266:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
 801826a:	4641      	mov	r1, r8
 801826c:	4628      	mov	r0, r5
 801826e:	f7ff feeb 	bl	8018048 <lv_ta_set_style>
 8018272:	e7a3      	b.n	80181bc <lv_ta_create+0x118>
    if(scrl_design == NULL) scrl_design = lv_obj_get_design_func(lv_page_get_scrl(new_ta));
 8018274:	4628      	mov	r0, r5
 8018276:	f7fe fa01 	bl	801667c <lv_page_get_scrl>
 801827a:	f7f1 fce1 	bl	8009c40 <lv_obj_get_design_func>
 801827e:	60a0      	str	r0, [r4, #8]
 8018280:	e72b      	b.n	80180da <lv_ta_create+0x36>
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_func(new_ta);
 8018282:	4628      	mov	r0, r5
 8018284:	f7f1 fcdc 	bl	8009c40 <lv_obj_get_design_func>
    if(scrl_signal == NULL) scrl_signal = lv_obj_get_signal_func(lv_page_get_scrl(new_ta));
 8018288:	6863      	ldr	r3, [r4, #4]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_func(new_ta);
 801828a:	6020      	str	r0, [r4, #0]
    if(scrl_signal == NULL) scrl_signal = lv_obj_get_signal_func(lv_page_get_scrl(new_ta));
 801828c:	2b00      	cmp	r3, #0
 801828e:	f47f af20 	bne.w	80180d2 <lv_ta_create+0x2e>
 8018292:	4628      	mov	r0, r5
 8018294:	f7fe f9f2 	bl	801667c <lv_page_get_scrl>
 8018298:	f7f1 fcd0 	bl	8009c3c <lv_obj_get_signal_func>
 801829c:	6060      	str	r0, [r4, #4]
 801829e:	e718      	b.n	80180d2 <lv_ta_create+0x2e>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_ta);
 80182a0:	f7f1 fccc 	bl	8009c3c <lv_obj_get_signal_func>
 80182a4:	60e0      	str	r0, [r4, #12]
 80182a6:	e70c      	b.n	80180c2 <lv_ta_create+0x1e>
            lv_ta_set_style(new_ta, LV_TA_STYLE_BG, &lv_style_pretty);
 80182a8:	4a0b      	ldr	r2, [pc, #44]	; (80182d8 <lv_ta_create+0x234>)
 80182aa:	4628      	mov	r0, r5
 80182ac:	f7ff fecc 	bl	8018048 <lv_ta_set_style>
 80182b0:	e784      	b.n	80181bc <lv_ta_create+0x118>
 80182b2:	bf00      	nop
 80182b4:	20017504 	.word	0x20017504
 80182b8:	080187e5 	.word	0x080187e5
 80182bc:	08017b6d 	.word	0x08017b6d
 80182c0:	08017b49 	.word	0x08017b49
 80182c4:	08017bb5 	.word	0x08017bb5
 80182c8:	0800f905 	.word	0x0800f905
 80182cc:	08017799 	.word	0x08017799
 80182d0:	0808bce0 	.word	0x0808bce0
 80182d4:	20017da8 	.word	0x20017da8
 80182d8:	20017d60 	.word	0x20017d60

080182dc <lv_ta_get_text>:
{
 80182dc:	b508      	push	{r3, lr}
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 80182de:	f7f1 fcb1 	bl	8009c44 <lv_obj_get_ext_attr>
    if(ext->pwd_mode == 0) {
 80182e2:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 80182e6:	07db      	lsls	r3, r3, #31
 80182e8:	d501      	bpl.n	80182ee <lv_ta_get_text+0x12>
}
 80182ea:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80182ec:	bd08      	pop	{r3, pc}
        txt = lv_label_get_text(ext->label);
 80182ee:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
 80182f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        txt = lv_label_get_text(ext->label);
 80182f4:	f7fc b87a 	b.w	80143ec <lv_label_get_text>

080182f8 <lv_ta_add_char>:
{
 80182f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80182fc:	b08f      	sub	sp, #60	; 0x3c
 80182fe:	4681      	mov	r9, r0
 8018300:	9101      	str	r1, [sp, #4]
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8018302:	f7f1 fc9f 	bl	8009c44 <lv_obj_get_ext_attr>
    if(ext->one_line && (c == '\n' || c == '\r')) {
 8018306:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801830a:	4680      	mov	r8, r0
    if(ext->one_line && (c == '\n' || c == '\r')) {
 801830c:	0799      	lsls	r1, r3, #30
 801830e:	d504      	bpl.n	801831a <lv_ta_add_char+0x22>
 8018310:	9b01      	ldr	r3, [sp, #4]
 8018312:	2b0a      	cmp	r3, #10
 8018314:	d020      	beq.n	8018358 <lv_ta_add_char+0x60>
 8018316:	2b0d      	cmp	r3, #13
 8018318:	d01e      	beq.n	8018358 <lv_ta_add_char+0x60>
    uint32_t c_uni = lv_txt_encoded_next((const char *)&c, NULL);
 801831a:	4e4a      	ldr	r6, [pc, #296]	; (8018444 <lv_ta_add_char+0x14c>)
 801831c:	2100      	movs	r1, #0
 801831e:	a801      	add	r0, sp, #4
 8018320:	6833      	ldr	r3, [r6, #0]
 8018322:	4798      	blx	r3
 8018324:	4607      	mov	r7, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8018326:	4648      	mov	r0, r9
 8018328:	f7f1 fc8c 	bl	8009c44 <lv_obj_get_ext_attr>
    if(ext->accapted_chars == NULL && ext->max_length == 0) return true;
 801832c:	6c03      	ldr	r3, [r0, #64]	; 0x40
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801832e:	4604      	mov	r4, r0
    if(ext->accapted_chars == NULL && ext->max_length == 0) return true;
 8018330:	b1ab      	cbz	r3, 801835e <lv_ta_add_char+0x66>
    if(ext->max_length > 0 &&
 8018332:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
 8018336:	b9aa      	cbnz	r2, 8018364 <lv_ta_add_char+0x6c>
        uint32_t i = 0;
 8018338:	2200      	movs	r2, #0
 801833a:	ad0e      	add	r5, sp, #56	; 0x38
 801833c:	f845 2d24 	str.w	r2, [r5, #-36]!
 8018340:	e005      	b.n	801834e <lv_ta_add_char+0x56>
            a = lv_txt_encoded_next(ext->accapted_chars, &i);
 8018342:	6833      	ldr	r3, [r6, #0]
 8018344:	4798      	blx	r3
            if(a == c) return true; /*Accepted*/
 8018346:	4287      	cmp	r7, r0
 8018348:	d019      	beq.n	801837e <lv_ta_add_char+0x86>
 801834a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801834c:	9a05      	ldr	r2, [sp, #20]
            a = lv_txt_encoded_next(ext->accapted_chars, &i);
 801834e:	4618      	mov	r0, r3
        while(ext->accapted_chars[i] != '\0') {
 8018350:	5c9b      	ldrb	r3, [r3, r2]
            a = lv_txt_encoded_next(ext->accapted_chars, &i);
 8018352:	4629      	mov	r1, r5
        while(ext->accapted_chars[i] != '\0') {
 8018354:	2b00      	cmp	r3, #0
 8018356:	d1f4      	bne.n	8018342 <lv_ta_add_char+0x4a>
}
 8018358:	b00f      	add	sp, #60	; 0x3c
 801835a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(ext->accapted_chars == NULL && ext->max_length == 0) return true;
 801835e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8018362:	b163      	cbz	r3, 801837e <lv_ta_add_char+0x86>
            lv_txt_get_encoded_length(lv_ta_get_text(ta)) >= ext->max_length) {
 8018364:	4b38      	ldr	r3, [pc, #224]	; (8018448 <lv_ta_add_char+0x150>)
 8018366:	4648      	mov	r0, r9
 8018368:	681d      	ldr	r5, [r3, #0]
 801836a:	f7ff ffb7 	bl	80182dc <lv_ta_get_text>
 801836e:	47a8      	blx	r5
 8018370:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
    if(ext->max_length > 0 &&
 8018374:	4298      	cmp	r0, r3
 8018376:	d2ef      	bcs.n	8018358 <lv_ta_add_char+0x60>
    if(ext->accapted_chars) {
 8018378:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801837a:	2b00      	cmp	r3, #0
 801837c:	d1dc      	bne.n	8018338 <lv_ta_add_char+0x40>
 * @param ta pointer to a Text area
 * @return true or false
 */
static inline bool lv_ta_get_edge_flash(lv_obj_t * ta)
{
    return lv_page_get_edge_flash(ta);
 801837e:	4648      	mov	r0, r9
 8018380:	f7fe f982 	bl	8016688 <lv_page_get_edge_flash>
    lv_page_set_edge_flash(ta, en);
 8018384:	2100      	movs	r1, #0
    return lv_page_get_edge_flash(ta);
 8018386:	4605      	mov	r5, r0
    lv_page_set_edge_flash(ta, en);
 8018388:	4648      	mov	r0, r9
 801838a:	f7fe f80d 	bl	80163a8 <lv_page_set_edge_flash>
    if(ext->pwd_mode != 0) pwd_char_hider(ta);  /*Make sure all the current text contains only '*'*/
 801838e:	f898 3046 	ldrb.w	r3, [r8, #70]	; 0x46
 8018392:	07da      	lsls	r2, r3, #31
 8018394:	d452      	bmi.n	801843c <lv_ta_add_char+0x144>
    letter_buf[0] = c;
 8018396:	9b01      	ldr	r3, [sp, #4]
    letter_buf[1] = '\0';
 8018398:	2400      	movs	r4, #0
    lv_label_ins_text(ext->label, ext->cursor.pos, (const char *)letter_buf);    /*Insert the character*/
 801839a:	f8b8 104e 	ldrh.w	r1, [r8, #78]	; 0x4e
 801839e:	aa03      	add	r2, sp, #12
 80183a0:	f8d8 0038 	ldr.w	r0, [r8, #56]	; 0x38
    letter_buf[0] = c;
 80183a4:	9303      	str	r3, [sp, #12]
    letter_buf[1] = '\0';
 80183a6:	9404      	str	r4, [sp, #16]
    lv_label_ins_text(ext->label, ext->cursor.pos, (const char *)letter_buf);    /*Insert the character*/
 80183a8:	f7fc fd4c 	bl	8014e44 <lv_label_ins_text>
    if(ext->pwd_mode != 0) {
 80183ac:	f898 3046 	ldrb.w	r3, [r8, #70]	; 0x46
 80183b0:	07db      	lsls	r3, r3, #31
 80183b2:	d531      	bpl.n	8018418 <lv_ta_add_char+0x120>
        ext->pwd_tmp = lv_mem_realloc(ext->pwd_tmp, strlen(ext->pwd_tmp) + 2);  /*+2: the new char + \0 */
 80183b4:	f8d8 603c 	ldr.w	r6, [r8, #60]	; 0x3c
 80183b8:	4630      	mov	r0, r6
 80183ba:	f7e7 ff2f 	bl	800021c <strlen>
 80183be:	1c81      	adds	r1, r0, #2
 80183c0:	4630      	mov	r0, r6
 80183c2:	f7f7 feb9 	bl	8010138 <lv_mem_realloc>
 80183c6:	f8c8 003c 	str.w	r0, [r8, #60]	; 0x3c
        lv_mem_assert(ext->pwd_tmp);
 80183ca:	2800      	cmp	r0, #0
 80183cc:	d035      	beq.n	801843a <lv_ta_add_char+0x142>
        lv_txt_ins(ext->pwd_tmp, ext->cursor.pos, (const char *)letter_buf);
 80183ce:	aa03      	add	r2, sp, #12
 80183d0:	f8b8 104e 	ldrh.w	r1, [r8, #78]	; 0x4e
 80183d4:	f7f8 fbf8 	bl	8010bc8 <lv_txt_ins>
        a.repeat = 0;
 80183d8:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
        a.fp = (lv_anim_fp_t)pwd_char_hider_anim;
 80183dc:	4f1b      	ldr	r7, [pc, #108]	; (801844c <lv_ta_add_char+0x154>)
        a.time = LV_TA_PWD_SHOW_TIME;
 80183de:	f240 56dc 	movw	r6, #1500	; 0x5dc
        a.playback = 0;
 80183e2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
        a.end_cb = (lv_anim_cb_t)pwd_char_hider;
 80183e6:	491a      	ldr	r1, [pc, #104]	; (8018450 <lv_ta_add_char+0x158>)
        a.end = 1;
 80183e8:	2201      	movs	r2, #1
        lv_anim_create(&a);
 80183ea:	a805      	add	r0, sp, #20
        a.playback = 0;
 80183ec:	f364 0300 	bfi	r3, r4, #0, #1
        a.var = ta;
 80183f0:	f8cd 9014 	str.w	r9, [sp, #20]
        a.act_time = 0;
 80183f4:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
        a.playback = 0;
 80183f8:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
        a.path = lv_anim_path_step;
 80183fc:	4b15      	ldr	r3, [pc, #84]	; (8018454 <lv_ta_add_char+0x15c>)
        a.start = 0;
 80183fe:	9409      	str	r4, [sp, #36]	; 0x24
        a.repeat_pause = 0;
 8018400:	f8ad 4032 	strh.w	r4, [sp, #50]	; 0x32
        a.playback_pause = 0;
 8018404:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
        a.fp = (lv_anim_fp_t)pwd_char_hider_anim;
 8018408:	9706      	str	r7, [sp, #24]
        a.time = LV_TA_PWD_SHOW_TIME;
 801840a:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
        a.end_cb = (lv_anim_cb_t)pwd_char_hider;
 801840e:	9107      	str	r1, [sp, #28]
        a.end = 1;
 8018410:	920a      	str	r2, [sp, #40]	; 0x28
        a.path = lv_anim_path_step;
 8018412:	9308      	str	r3, [sp, #32]
        lv_anim_create(&a);
 8018414:	f7f7 fa14 	bl	800f840 <lv_anim_create>
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8018418:	4648      	mov	r0, r9
 801841a:	f7f1 fc13 	bl	8009c44 <lv_obj_get_ext_attr>
    lv_ta_set_cursor_pos(ta, lv_ta_get_cursor_pos(ta) + 1);
 801841e:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
 8018422:	4648      	mov	r0, r9
 8018424:	3101      	adds	r1, #1
 8018426:	b209      	sxth	r1, r1
 8018428:	f7ff fc72 	bl	8017d10 <lv_ta_set_cursor_pos>
 801842c:	4629      	mov	r1, r5
 801842e:	4648      	mov	r0, r9
 8018430:	f7fd ffba 	bl	80163a8 <lv_page_set_edge_flash>
}
 8018434:	b00f      	add	sp, #60	; 0x3c
 8018436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801843a:	e7fe      	b.n	801843a <lv_ta_add_char+0x142>
    if(ext->pwd_mode != 0) pwd_char_hider(ta);  /*Make sure all the current text contains only '*'*/
 801843c:	4648      	mov	r0, r9
 801843e:	f7ff f9e7 	bl	8017810 <pwd_char_hider>
 8018442:	e7a8      	b.n	8018396 <lv_ta_add_char+0x9e>
 8018444:	200000b0 	.word	0x200000b0
 8018448:	200000bc 	.word	0x200000bc
 801844c:	08017795 	.word	0x08017795
 8018450:	08017811 	.word	0x08017811
 8018454:	0800f905 	.word	0x0800f905

08018458 <lv_ta_add_text>:
{
 8018458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801845c:	b08a      	sub	sp, #40	; 0x28
 801845e:	460c      	mov	r4, r1
 8018460:	4605      	mov	r5, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8018462:	f7f1 fbef 	bl	8009c44 <lv_obj_get_ext_attr>
    if(ext->pwd_mode != 0) pwd_char_hider(ta);  /*Make sure all the current text contains only '*'*/
 8018466:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801846a:	4606      	mov	r6, r0
    if(ext->pwd_mode != 0) pwd_char_hider(ta);  /*Make sure all the current text contains only '*'*/
 801846c:	07da      	lsls	r2, r3, #31
 801846e:	d41b      	bmi.n	80184a8 <lv_ta_add_text+0x50>
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8018470:	4628      	mov	r0, r5
 8018472:	f7f1 fbe7 	bl	8009c44 <lv_obj_get_ext_attr>
    if(lv_ta_get_accepted_chars(ta) || lv_ta_get_max_length(ta)) {
 8018476:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8018478:	b1d3      	cbz	r3, 80184b0 <lv_ta_add_text+0x58>
        uint32_t i = 0;
 801847a:	2200      	movs	r2, #0
        while(txt[i] != '\0') {
 801847c:	7823      	ldrb	r3, [r4, #0]
        uint32_t i = 0;
 801847e:	9201      	str	r2, [sp, #4]
        while(txt[i] != '\0') {
 8018480:	b17b      	cbz	r3, 80184a2 <lv_ta_add_text+0x4a>
 8018482:	4f3e      	ldr	r7, [pc, #248]	; (801857c <lv_ta_add_text+0x124>)
 8018484:	4e3e      	ldr	r6, [pc, #248]	; (8018580 <lv_ta_add_text+0x128>)
            uint32_t c = lv_txt_encoded_next(txt, &i);
 8018486:	a901      	add	r1, sp, #4
 8018488:	683b      	ldr	r3, [r7, #0]
 801848a:	4620      	mov	r0, r4
 801848c:	4798      	blx	r3
            lv_ta_add_char(ta, lv_txt_unicode_to_encoded(c));
 801848e:	6833      	ldr	r3, [r6, #0]
 8018490:	4798      	blx	r3
 8018492:	4601      	mov	r1, r0
 8018494:	4628      	mov	r0, r5
 8018496:	f7ff ff2f 	bl	80182f8 <lv_ta_add_char>
        while(txt[i] != '\0') {
 801849a:	9b01      	ldr	r3, [sp, #4]
 801849c:	5ce3      	ldrb	r3, [r4, r3]
 801849e:	2b00      	cmp	r3, #0
 80184a0:	d1f1      	bne.n	8018486 <lv_ta_add_text+0x2e>
}
 80184a2:	b00a      	add	sp, #40	; 0x28
 80184a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(ext->pwd_mode != 0) pwd_char_hider(ta);  /*Make sure all the current text contains only '*'*/
 80184a8:	4628      	mov	r0, r5
 80184aa:	f7ff f9b1 	bl	8017810 <pwd_char_hider>
 80184ae:	e7df      	b.n	8018470 <lv_ta_add_text+0x18>
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 80184b0:	4628      	mov	r0, r5
 80184b2:	f7f1 fbc7 	bl	8009c44 <lv_obj_get_ext_attr>
    if(lv_ta_get_accepted_chars(ta) || lv_ta_get_max_length(ta)) {
 80184b6:	f8b0 7044 	ldrh.w	r7, [r0, #68]	; 0x44
 80184ba:	2f00      	cmp	r7, #0
 80184bc:	d1dd      	bne.n	801847a <lv_ta_add_text+0x22>
    return lv_page_get_edge_flash(ta);
 80184be:	4628      	mov	r0, r5
 80184c0:	f7fe f8e2 	bl	8016688 <lv_page_get_edge_flash>
    lv_page_set_edge_flash(ta, en);
 80184c4:	4639      	mov	r1, r7
    return lv_page_get_edge_flash(ta);
 80184c6:	4680      	mov	r8, r0
    lv_page_set_edge_flash(ta, en);
 80184c8:	4628      	mov	r0, r5
 80184ca:	f7fd ff6d 	bl	80163a8 <lv_page_set_edge_flash>
    lv_label_ins_text(ext->label, ext->cursor.pos, txt);
 80184ce:	4622      	mov	r2, r4
 80184d0:	f8b6 104e 	ldrh.w	r1, [r6, #78]	; 0x4e
 80184d4:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 80184d6:	f7fc fcb5 	bl	8014e44 <lv_label_ins_text>
    if(ext->pwd_mode != 0) {
 80184da:	f896 3046 	ldrb.w	r3, [r6, #70]	; 0x46
 80184de:	07db      	lsls	r3, r3, #31
 80184e0:	d537      	bpl.n	8018552 <lv_ta_add_text+0xfa>
        ext->pwd_tmp = lv_mem_realloc(ext->pwd_tmp, strlen(ext->pwd_tmp) + strlen(txt) + 1);
 80184e2:	f8d6 a03c 	ldr.w	sl, [r6, #60]	; 0x3c
 80184e6:	4650      	mov	r0, sl
 80184e8:	f7e7 fe98 	bl	800021c <strlen>
 80184ec:	4681      	mov	r9, r0
 80184ee:	4620      	mov	r0, r4
 80184f0:	f7e7 fe94 	bl	800021c <strlen>
 80184f4:	eb09 0100 	add.w	r1, r9, r0
 80184f8:	4650      	mov	r0, sl
 80184fa:	3101      	adds	r1, #1
 80184fc:	f7f7 fe1c 	bl	8010138 <lv_mem_realloc>
 8018500:	63f0      	str	r0, [r6, #60]	; 0x3c
        lv_mem_assert(ext->pwd_tmp);
 8018502:	2800      	cmp	r0, #0
 8018504:	d038      	beq.n	8018578 <lv_ta_add_text+0x120>
        lv_txt_ins(ext->pwd_tmp, ext->cursor.pos, txt);
 8018506:	f8b6 104e 	ldrh.w	r1, [r6, #78]	; 0x4e
 801850a:	4622      	mov	r2, r4
 801850c:	f7f8 fb5c 	bl	8010bc8 <lv_txt_ins>
        a.repeat = 0;
 8018510:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
        a.fp = (lv_anim_fp_t)pwd_char_hider_anim;
 8018514:	f8df e078 	ldr.w	lr, [pc, #120]	; 8018590 <lv_ta_add_text+0x138>
        a.time = LV_TA_PWD_SHOW_TIME;
 8018518:	f240 56dc 	movw	r6, #1500	; 0x5dc
        a.repeat = 0;
 801851c:	f367 0341 	bfi	r3, r7, #1, #1
        a.end = 1;
 8018520:	2201      	movs	r2, #1
        a.end_cb = (lv_anim_cb_t)pwd_char_hider;
 8018522:	4918      	ldr	r1, [pc, #96]	; (8018584 <lv_ta_add_text+0x12c>)
        lv_anim_create(&a);
 8018524:	a801      	add	r0, sp, #4
        a.playback = 0;
 8018526:	f367 0300 	bfi	r3, r7, #0, #1
        a.var = ta;
 801852a:	9501      	str	r5, [sp, #4]
        a.act_time = 0;
 801852c:	f8ad 701e 	strh.w	r7, [sp, #30]
        a.playback = 0;
 8018530:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        a.path = lv_anim_path_step;
 8018534:	4b14      	ldr	r3, [pc, #80]	; (8018588 <lv_ta_add_text+0x130>)
        a.start = 0;
 8018536:	9705      	str	r7, [sp, #20]
        a.repeat_pause = 0;
 8018538:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
        a.playback_pause = 0;
 801853c:	f8ad 7020 	strh.w	r7, [sp, #32]
        a.fp = (lv_anim_fp_t)pwd_char_hider_anim;
 8018540:	f8cd e008 	str.w	lr, [sp, #8]
        a.time = LV_TA_PWD_SHOW_TIME;
 8018544:	f8ad 601c 	strh.w	r6, [sp, #28]
        a.end_cb = (lv_anim_cb_t)pwd_char_hider;
 8018548:	9103      	str	r1, [sp, #12]
        a.end = 1;
 801854a:	9206      	str	r2, [sp, #24]
        a.path = lv_anim_path_step;
 801854c:	9304      	str	r3, [sp, #16]
        lv_anim_create(&a);
 801854e:	f7f7 f977 	bl	800f840 <lv_anim_create>
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8018552:	4628      	mov	r0, r5
 8018554:	f7f1 fb76 	bl	8009c44 <lv_obj_get_ext_attr>
    lv_ta_set_cursor_pos(ta, lv_ta_get_cursor_pos(ta) + lv_txt_get_encoded_length(txt));
 8018558:	4b0c      	ldr	r3, [pc, #48]	; (801858c <lv_ta_add_text+0x134>)
    return ext->cursor.pos;
 801855a:	f8b0 604e 	ldrh.w	r6, [r0, #78]	; 0x4e
    lv_ta_set_cursor_pos(ta, lv_ta_get_cursor_pos(ta) + lv_txt_get_encoded_length(txt));
 801855e:	4620      	mov	r0, r4
 8018560:	681b      	ldr	r3, [r3, #0]
 8018562:	4798      	blx	r3
 8018564:	1831      	adds	r1, r6, r0
 8018566:	4628      	mov	r0, r5
 8018568:	b209      	sxth	r1, r1
 801856a:	f7ff fbd1 	bl	8017d10 <lv_ta_set_cursor_pos>
 801856e:	4641      	mov	r1, r8
 8018570:	4628      	mov	r0, r5
 8018572:	f7fd ff19 	bl	80163a8 <lv_page_set_edge_flash>
 8018576:	e794      	b.n	80184a2 <lv_ta_add_text+0x4a>
 8018578:	e7fe      	b.n	8018578 <lv_ta_add_text+0x120>
 801857a:	bf00      	nop
 801857c:	200000b0 	.word	0x200000b0
 8018580:	200000c8 	.word	0x200000c8
 8018584:	08017811 	.word	0x08017811
 8018588:	0800f905 	.word	0x0800f905
 801858c:	200000bc 	.word	0x200000bc
 8018590:	08017795 	.word	0x08017795

08018594 <lv_ta_set_text>:
{
 8018594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018598:	4605      	mov	r5, r0
 801859a:	b08a      	sub	sp, #40	; 0x28
 801859c:	460c      	mov	r4, r1
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801859e:	f7f1 fb51 	bl	8009c44 <lv_obj_get_ext_attr>
 80185a2:	4606      	mov	r6, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 80185a4:	4628      	mov	r0, r5
 80185a6:	f7f1 fb4d 	bl	8009c44 <lv_obj_get_ext_attr>
    if(lv_ta_get_accepted_chars(ta) || lv_ta_get_max_length(ta)) {
 80185aa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80185ac:	2b00      	cmp	r3, #0
 80185ae:	d069      	beq.n	8018684 <lv_ta_set_text+0xf0>
        lv_label_set_text(ext->label, "");
 80185b0:	493d      	ldr	r1, [pc, #244]	; (80186a8 <lv_ta_set_text+0x114>)
 80185b2:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 80185b4:	f7fc fae2 	bl	8014b7c <lv_label_set_text>
        lv_ta_set_cursor_pos(ta, LV_TA_CURSOR_LAST);
 80185b8:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80185bc:	4628      	mov	r0, r5
 80185be:	f7ff fba7 	bl	8017d10 <lv_ta_set_cursor_pos>
        uint32_t i = 0;
 80185c2:	2200      	movs	r2, #0
        while(txt[i] != '\0') {
 80185c4:	7823      	ldrb	r3, [r4, #0]
        uint32_t i = 0;
 80185c6:	9201      	str	r2, [sp, #4]
        while(txt[i] != '\0') {
 80185c8:	b18b      	cbz	r3, 80185ee <lv_ta_set_text+0x5a>
 80185ca:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 80186b8 <lv_ta_set_text+0x124>
 80185ce:	4f37      	ldr	r7, [pc, #220]	; (80186ac <lv_ta_set_text+0x118>)
            uint32_t c = lv_txt_encoded_next(txt, &i);
 80185d0:	a901      	add	r1, sp, #4
 80185d2:	f8d8 3000 	ldr.w	r3, [r8]
 80185d6:	4620      	mov	r0, r4
 80185d8:	4798      	blx	r3
            lv_ta_add_char(ta, lv_txt_unicode_to_encoded(c));
 80185da:	683b      	ldr	r3, [r7, #0]
 80185dc:	4798      	blx	r3
 80185de:	4601      	mov	r1, r0
 80185e0:	4628      	mov	r0, r5
 80185e2:	f7ff fe89 	bl	80182f8 <lv_ta_add_char>
        while(txt[i] != '\0') {
 80185e6:	9b01      	ldr	r3, [sp, #4]
 80185e8:	5ce3      	ldrb	r3, [r4, r3]
 80185ea:	2b00      	cmp	r3, #0
 80185ec:	d1f0      	bne.n	80185d0 <lv_ta_set_text+0x3c>
    if(lv_obj_get_width(ext->label) == 0) {
 80185ee:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 80185f0:	f7f1 fa02 	bl	80099f8 <lv_obj_get_width>
 80185f4:	2800      	cmp	r0, #0
 80185f6:	d038      	beq.n	801866a <lv_ta_set_text+0xd6>
    if(ext->pwd_mode != 0) {
 80185f8:	f896 3046 	ldrb.w	r3, [r6, #70]	; 0x46
 80185fc:	07db      	lsls	r3, r3, #31
 80185fe:	d402      	bmi.n	8018606 <lv_ta_set_text+0x72>
}
 8018600:	b00a      	add	sp, #40	; 0x28
 8018602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ext->pwd_tmp = lv_mem_realloc(ext->pwd_tmp, strlen(txt) + 1);
 8018606:	4620      	mov	r0, r4
 8018608:	f7e7 fe08 	bl	800021c <strlen>
 801860c:	1c41      	adds	r1, r0, #1
 801860e:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8018610:	f7f7 fd92 	bl	8010138 <lv_mem_realloc>
 8018614:	63f0      	str	r0, [r6, #60]	; 0x3c
        lv_mem_assert(ext->pwd_tmp);
 8018616:	b338      	cbz	r0, 8018668 <lv_ta_set_text+0xd4>
        strcpy(ext->pwd_tmp, txt);
 8018618:	4621      	mov	r1, r4
        a.time = LV_TA_PWD_SHOW_TIME;
 801861a:	f240 57dc 	movw	r7, #1500	; 0x5dc
        strcpy(ext->pwd_tmp, txt);
 801861e:	f001 f862 	bl	80196e6 <strcpy>
        a.repeat = 0;
 8018622:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
        a.act_time = 0;
 8018626:	2300      	movs	r3, #0
        a.fp = (lv_anim_fp_t)pwd_char_hider_anim;
 8018628:	f8df e090 	ldr.w	lr, [pc, #144]	; 80186bc <lv_ta_set_text+0x128>
        a.playback = 0;
 801862c:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
        a.path = lv_anim_path_step;
 8018630:	491f      	ldr	r1, [pc, #124]	; (80186b0 <lv_ta_set_text+0x11c>)
        a.end_cb = (lv_anim_cb_t)pwd_char_hider;
 8018632:	4e20      	ldr	r6, [pc, #128]	; (80186b4 <lv_ta_set_text+0x120>)
        a.end = 1;
 8018634:	2401      	movs	r4, #1
        a.playback = 0;
 8018636:	f363 0200 	bfi	r2, r3, #0, #1
        lv_anim_create(&a);
 801863a:	a801      	add	r0, sp, #4
        a.var = ta;
 801863c:	9501      	str	r5, [sp, #4]
        a.playback = 0;
 801863e:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
        a.act_time = 0;
 8018642:	f8ad 301e 	strh.w	r3, [sp, #30]
        a.start = 0;
 8018646:	9305      	str	r3, [sp, #20]
        a.repeat_pause = 0;
 8018648:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
        a.playback_pause = 0;
 801864c:	f8ad 3020 	strh.w	r3, [sp, #32]
        a.fp = (lv_anim_fp_t)pwd_char_hider_anim;
 8018650:	f8cd e008 	str.w	lr, [sp, #8]
        a.time = LV_TA_PWD_SHOW_TIME;
 8018654:	f8ad 701c 	strh.w	r7, [sp, #28]
        a.end_cb = (lv_anim_cb_t)pwd_char_hider;
 8018658:	9603      	str	r6, [sp, #12]
        a.end = 1;
 801865a:	9406      	str	r4, [sp, #24]
        a.path = lv_anim_path_step;
 801865c:	9104      	str	r1, [sp, #16]
        lv_anim_create(&a);
 801865e:	f7f7 f8ef 	bl	800f840 <lv_anim_create>
}
 8018662:	b00a      	add	sp, #40	; 0x28
 8018664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018668:	e7fe      	b.n	8018668 <lv_ta_set_text+0xd4>
        lv_style_t * style = lv_obj_get_style(ext->label);
 801866a:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 801866c:	f7f1 f9d0 	bl	8009a10 <lv_obj_get_style>
        lv_obj_set_width(ext->label, lv_font_get_width(style->text.font, ' '));
 8018670:	6bb7      	ldr	r7, [r6, #56]	; 0x38
 8018672:	2120      	movs	r1, #32
 8018674:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8018676:	f7f7 fa95 	bl	800fba4 <lv_font_get_width>
 801867a:	b201      	sxth	r1, r0
 801867c:	4638      	mov	r0, r7
 801867e:	f7f0 fe4b 	bl	8009318 <lv_obj_set_width>
 8018682:	e7b9      	b.n	80185f8 <lv_ta_set_text+0x64>
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8018684:	4628      	mov	r0, r5
 8018686:	f7f1 fadd 	bl	8009c44 <lv_obj_get_ext_attr>
    if(lv_ta_get_accepted_chars(ta) || lv_ta_get_max_length(ta)) {
 801868a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 801868e:	2b00      	cmp	r3, #0
 8018690:	d18e      	bne.n	80185b0 <lv_ta_set_text+0x1c>
        lv_label_set_text(ext->label, txt);
 8018692:	4621      	mov	r1, r4
 8018694:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 8018696:	f7fc fa71 	bl	8014b7c <lv_label_set_text>
        lv_ta_set_cursor_pos(ta, LV_TA_CURSOR_LAST);
 801869a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 801869e:	4628      	mov	r0, r5
 80186a0:	f7ff fb36 	bl	8017d10 <lv_ta_set_cursor_pos>
 80186a4:	e7a3      	b.n	80185ee <lv_ta_set_text+0x5a>
 80186a6:	bf00      	nop
 80186a8:	0808ba74 	.word	0x0808ba74
 80186ac:	200000c8 	.word	0x200000c8
 80186b0:	0800f905 	.word	0x0800f905
 80186b4:	08017811 	.word	0x08017811
 80186b8:	200000b0 	.word	0x200000b0
 80186bc:	08017795 	.word	0x08017795

080186c0 <lv_ta_get_cursor_pos>:
{
 80186c0:	b508      	push	{r3, lr}
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 80186c2:	f7f1 fabf 	bl	8009c44 <lv_obj_get_ext_attr>
}
 80186c6:	f8b0 004e 	ldrh.w	r0, [r0, #78]	; 0x4e
 80186ca:	bd08      	pop	{r3, pc}

080186cc <lv_ta_get_cursor_type>:
{
 80186cc:	b508      	push	{r3, lr}
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 80186ce:	f7f1 fab9 	bl	8009c44 <lv_obj_get_ext_attr>
    return ext->cursor.type;
 80186d2:	f890 005a 	ldrb.w	r0, [r0, #90]	; 0x5a
}
 80186d6:	f000 000f 	and.w	r0, r0, #15
 80186da:	bd08      	pop	{r3, pc}

080186dc <lv_ta_cursor_right>:
{
 80186dc:	b510      	push	{r4, lr}
 80186de:	4604      	mov	r4, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 80186e0:	f7f1 fab0 	bl	8009c44 <lv_obj_get_ext_attr>
    cp++;
 80186e4:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    lv_ta_set_cursor_pos(ta, cp);
 80186e8:	4620      	mov	r0, r4
    cp++;
 80186ea:	3101      	adds	r1, #1
}
 80186ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_ta_set_cursor_pos(ta, cp);
 80186f0:	b209      	sxth	r1, r1
 80186f2:	f7ff bb0d 	b.w	8017d10 <lv_ta_set_cursor_pos>
 80186f6:	bf00      	nop

080186f8 <lv_ta_cursor_left>:
{
 80186f8:	b510      	push	{r4, lr}
 80186fa:	4604      	mov	r4, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 80186fc:	f7f1 faa2 	bl	8009c44 <lv_obj_get_ext_attr>
    return ext->cursor.pos;
 8018700:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    if(cp > 0)  {
 8018704:	b901      	cbnz	r1, 8018708 <lv_ta_cursor_left+0x10>
 8018706:	bd10      	pop	{r4, pc}
        cp--;
 8018708:	3901      	subs	r1, #1
        lv_ta_set_cursor_pos(ta, cp);
 801870a:	4620      	mov	r0, r4
 801870c:	b209      	sxth	r1, r1
}
 801870e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        lv_ta_set_cursor_pos(ta, cp);
 8018712:	f7ff bafd 	b.w	8017d10 <lv_ta_set_cursor_pos>
 8018716:	bf00      	nop

08018718 <lv_ta_cursor_down>:
{
 8018718:	b570      	push	{r4, r5, r6, lr}
 801871a:	b082      	sub	sp, #8
 801871c:	4606      	mov	r6, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801871e:	f7f1 fa91 	bl	8009c44 <lv_obj_get_ext_attr>
 8018722:	4605      	mov	r5, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8018724:	4630      	mov	r0, r6
    lv_label_get_letter_pos(ext->label, lv_ta_get_cursor_pos(ta), &pos);
 8018726:	6bac      	ldr	r4, [r5, #56]	; 0x38
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8018728:	f7f1 fa8c 	bl	8009c44 <lv_obj_get_ext_attr>
    lv_label_get_letter_pos(ext->label, lv_ta_get_cursor_pos(ta), &pos);
 801872c:	aa01      	add	r2, sp, #4
 801872e:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
 8018732:	4620      	mov	r0, r4
 8018734:	f7fb fe68 	bl	8014408 <lv_label_get_letter_pos>
    lv_style_t * label_style = lv_obj_get_style(ext->label);
 8018738:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801873a:	f7f1 f969 	bl	8009a10 <lv_obj_get_style>
    pos.y += font_h + label_style->text.line_space + 1;
 801873e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018742:	8e41      	ldrh	r1, [r0, #50]	; 0x32
 8018744:	3301      	adds	r3, #1
 8018746:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    pos.x = ext->cursor.valid_x;
 8018748:	f8b5 204c 	ldrh.w	r2, [r5, #76]	; 0x4c
    pos.y += font_h + label_style->text.line_space + 1;
 801874c:	f890 4020 	ldrb.w	r4, [r0, #32]
 8018750:	440b      	add	r3, r1
    if(pos.y < lv_obj_get_height(ext->label)) {
 8018752:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    pos.y += font_h + label_style->text.line_space + 1;
 8018754:	441c      	add	r4, r3
    pos.x = ext->cursor.valid_x;
 8018756:	f8ad 2004 	strh.w	r2, [sp, #4]
    pos.y += font_h + label_style->text.line_space + 1;
 801875a:	b224      	sxth	r4, r4
 801875c:	f8ad 4006 	strh.w	r4, [sp, #6]
    if(pos.y < lv_obj_get_height(ext->label)) {
 8018760:	f7f1 f950 	bl	8009a04 <lv_obj_get_height>
 8018764:	4284      	cmp	r4, r0
 8018766:	da0b      	bge.n	8018780 <lv_ta_cursor_down+0x68>
        uint16_t new_cur_pos = lv_label_get_letter_on(ext->label, &pos);
 8018768:	a901      	add	r1, sp, #4
 801876a:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801876c:	f7fb ff26 	bl	80145bc <lv_label_get_letter_on>
        lv_coord_t cur_valid_x_tmp = ext->cursor.valid_x;   /*Cursor position set overwrites the valid positon */
 8018770:	f9b5 404c 	ldrsh.w	r4, [r5, #76]	; 0x4c
        lv_ta_set_cursor_pos(ta, new_cur_pos);
 8018774:	b201      	sxth	r1, r0
 8018776:	4630      	mov	r0, r6
 8018778:	f7ff faca 	bl	8017d10 <lv_ta_set_cursor_pos>
        ext->cursor.valid_x = cur_valid_x_tmp;
 801877c:	f8a5 404c 	strh.w	r4, [r5, #76]	; 0x4c
}
 8018780:	b002      	add	sp, #8
 8018782:	bd70      	pop	{r4, r5, r6, pc}

08018784 <lv_ta_cursor_up>:
{
 8018784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018786:	b083      	sub	sp, #12
 8018788:	4605      	mov	r5, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801878a:	f7f1 fa5b 	bl	8009c44 <lv_obj_get_ext_attr>
 801878e:	4604      	mov	r4, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8018790:	4628      	mov	r0, r5
    lv_label_get_letter_pos(ext->label, lv_ta_get_cursor_pos(ta), &pos);
 8018792:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8018794:	f7f1 fa56 	bl	8009c44 <lv_obj_get_ext_attr>
    lv_label_get_letter_pos(ext->label, lv_ta_get_cursor_pos(ta), &pos);
 8018798:	aa01      	add	r2, sp, #4
 801879a:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
 801879e:	4630      	mov	r0, r6
 80187a0:	f7fb fe32 	bl	8014408 <lv_label_get_letter_pos>
    lv_style_t * label_style = lv_obj_get_style(ext->label);
 80187a4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80187a6:	f7f1 f933 	bl	8009a10 <lv_obj_get_style>
    pos.y -= font_h + label_style->text.line_space - 1;
 80187aa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80187ae:	8e47      	ldrh	r7, [r0, #50]	; 0x32
    uint16_t new_cur_pos = lv_label_get_letter_on(ext->label, &pos);
 80187b0:	a901      	add	r1, sp, #4
 80187b2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    pos.y -= font_h + label_style->text.line_space - 1;
 80187b4:	3301      	adds	r3, #1
    pos.x = ext->cursor.valid_x;
 80187b6:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
    pos.y -= font_h + label_style->text.line_space - 1;
 80187ba:	f890 6020 	ldrb.w	r6, [r0, #32]
 80187be:	1bdb      	subs	r3, r3, r7
    uint16_t new_cur_pos = lv_label_get_letter_on(ext->label, &pos);
 80187c0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    pos.y -= font_h + label_style->text.line_space - 1;
 80187c2:	1b9b      	subs	r3, r3, r6
    pos.x = ext->cursor.valid_x;
 80187c4:	f8ad 2004 	strh.w	r2, [sp, #4]
    pos.y -= font_h + label_style->text.line_space - 1;
 80187c8:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t new_cur_pos = lv_label_get_letter_on(ext->label, &pos);
 80187cc:	f7fb fef6 	bl	80145bc <lv_label_get_letter_on>
    lv_coord_t cur_valid_x_tmp = ext->cursor.valid_x;   /*Cursor position set overwrites the valid positon */
 80187d0:	f9b4 604c 	ldrsh.w	r6, [r4, #76]	; 0x4c
    lv_ta_set_cursor_pos(ta, new_cur_pos);
 80187d4:	b201      	sxth	r1, r0
 80187d6:	4628      	mov	r0, r5
 80187d8:	f7ff fa9a 	bl	8017d10 <lv_ta_set_cursor_pos>
    ext->cursor.valid_x = cur_valid_x_tmp;
 80187dc:	f8a4 604c 	strh.w	r6, [r4, #76]	; 0x4c
}
 80187e0:	b003      	add	sp, #12
 80187e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080187e4 <lv_ta_signal>:
{
 80187e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    res = ancestor_signal(ta, sign, param);
 80187e8:	4b8f      	ldr	r3, [pc, #572]	; (8018a28 <lv_ta_signal+0x244>)
{
 80187ea:	4606      	mov	r6, r0
 80187ec:	460d      	mov	r5, r1
 80187ee:	4617      	mov	r7, r2
    res = ancestor_signal(ta, sign, param);
 80187f0:	68db      	ldr	r3, [r3, #12]
 80187f2:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 80187f4:	2801      	cmp	r0, #1
    res = ancestor_signal(ta, sign, param);
 80187f6:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
 80187f8:	d002      	beq.n	8018800 <lv_ta_signal+0x1c>
}
 80187fa:	4620      	mov	r0, r4
 80187fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8018800:	4630      	mov	r0, r6
 8018802:	f7f1 fa1f 	bl	8009c44 <lv_obj_get_ext_attr>
 8018806:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CLEANUP) {
 8018808:	b92d      	cbnz	r5, 8018816 <lv_ta_signal+0x32>
        if(ext->pwd_tmp != NULL) lv_mem_free(ext->pwd_tmp);
 801880a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801880c:	2800      	cmp	r0, #0
 801880e:	d0f4      	beq.n	80187fa <lv_ta_signal+0x16>
 8018810:	f7f7 fc3a 	bl	8010088 <lv_mem_free>
 8018814:	e7f1      	b.n	80187fa <lv_ta_signal+0x16>
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 8018816:	2d03      	cmp	r5, #3
 8018818:	d042      	beq.n	80188a0 <lv_ta_signal+0xbc>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 801881a:	2d02      	cmp	r5, #2
 801881c:	d06b      	beq.n	80188f6 <lv_ta_signal+0x112>
    } else if(sign == LV_SIGNAL_CONTROLL) {
 801881e:	2d12      	cmp	r5, #18
 8018820:	d027      	beq.n	8018872 <lv_ta_signal+0x8e>
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 8018822:	2d14      	cmp	r5, #20
 8018824:	f000 80ba 	beq.w	801899c <lv_ta_signal+0x1b8>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8018828:	2d06      	cmp	r5, #6
 801882a:	f000 80ab 	beq.w	8018984 <lv_ta_signal+0x1a0>
    } else if(sign == LV_SIGNAL_DEFOCUS) {
 801882e:	2d11      	cmp	r5, #17
 8018830:	f000 80dc 	beq.w	80189ec <lv_ta_signal+0x208>
    } else if(sign == LV_SIGNAL_FOCUS) {
 8018834:	2d10      	cmp	r5, #16
 8018836:	d1e0      	bne.n	80187fa <lv_ta_signal+0x16>
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8018838:	4630      	mov	r0, r6
 801883a:	f7f1 fa03 	bl	8009c44 <lv_obj_get_ext_attr>
    return ext->cursor.type;
 801883e:	f890 505a 	ldrb.w	r5, [r0, #90]	; 0x5a
        lv_group_t * g = lv_obj_get_group(ta);
 8018842:	4630      	mov	r0, r6
 8018844:	f7f1 fa00 	bl	8009c48 <lv_obj_get_group>
    return ext->cursor.type;
 8018848:	f005 050f 	and.w	r5, r5, #15
        bool editing = lv_group_get_editing(g);
 801884c:	f7ef fcec 	bl	8008228 <lv_group_get_editing>
 8018850:	4607      	mov	r7, r0
        lv_hal_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 8018852:	f7f0 fa25 	bl	8008ca0 <lv_indev_get_act>
 8018856:	f7f0 fa29 	bl	8008cac <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801885a:	2804      	cmp	r0, #4
 801885c:	f040 80c0 	bne.w	80189e0 <lv_ta_signal+0x1fc>
            if(editing) lv_ta_set_cursor_type(ta, cur_type & (~LV_CURSOR_HIDDEN));
 8018860:	2f00      	cmp	r7, #0
 8018862:	f040 80bd 	bne.w	80189e0 <lv_ta_signal+0x1fc>
            else lv_ta_set_cursor_type(ta, cur_type | LV_CURSOR_HIDDEN);
 8018866:	f045 0108 	orr.w	r1, r5, #8
 801886a:	4630      	mov	r0, r6
 801886c:	f7ff fb66 	bl	8017f3c <lv_ta_set_cursor_type>
 8018870:	e7c3      	b.n	80187fa <lv_ta_signal+0x16>
        uint32_t c = *((uint32_t *)param);      /*uint32_t because can be UTF-8*/
 8018872:	6839      	ldr	r1, [r7, #0]
        if(c == LV_GROUP_KEY_RIGHT)     lv_ta_cursor_right(ta);
 8018874:	2913      	cmp	r1, #19
 8018876:	f000 80c6 	beq.w	8018a06 <lv_ta_signal+0x222>
        else if(c == LV_GROUP_KEY_LEFT) lv_ta_cursor_left(ta);
 801887a:	2914      	cmp	r1, #20
 801887c:	f000 80c7 	beq.w	8018a0e <lv_ta_signal+0x22a>
        else if(c == LV_GROUP_KEY_UP)   lv_ta_cursor_up(ta);
 8018880:	2911      	cmp	r1, #17
 8018882:	f000 80c8 	beq.w	8018a16 <lv_ta_signal+0x232>
        else if(c == LV_GROUP_KEY_DOWN) lv_ta_cursor_down(ta);
 8018886:	2912      	cmp	r1, #18
 8018888:	f000 80c9 	beq.w	8018a1e <lv_ta_signal+0x23a>
        else if(c == LV_GROUP_KEY_BACKSPACE) lv_ta_del_char(ta);
 801888c:	2908      	cmp	r1, #8
 801888e:	f000 80a3 	beq.w	80189d8 <lv_ta_signal+0x1f4>
        else if(c == LV_GROUP_KEY_DEL)  {
 8018892:	297f      	cmp	r1, #127	; 0x7f
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8018894:	4630      	mov	r0, r6
        else if(c == LV_GROUP_KEY_DEL)  {
 8018896:	f000 808e 	beq.w	80189b6 <lv_ta_signal+0x1d2>
            lv_ta_add_char(ta, c);
 801889a:	f7ff fd2d 	bl	80182f8 <lv_ta_add_char>
 801889e:	e7ac      	b.n	80187fa <lv_ta_signal+0x16>
        if(ext->label) {
 80188a0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80188a2:	2b00      	cmp	r3, #0
 80188a4:	d0a9      	beq.n	80187fa <lv_ta_signal+0x16>
            lv_obj_t * scrl = lv_page_get_scrl(ta);
 80188a6:	4630      	mov	r0, r6
 80188a8:	f7fd fee8 	bl	801667c <lv_page_get_scrl>
 80188ac:	4607      	mov	r7, r0
            lv_style_t * style_ta = lv_obj_get_style(ta);
 80188ae:	4630      	mov	r0, r6
 80188b0:	f7f1 f8ae 	bl	8009a10 <lv_obj_get_style>
 80188b4:	4681      	mov	r9, r0
            lv_style_t * style_scrl = lv_obj_get_style(scrl);
 80188b6:	4638      	mov	r0, r7
 80188b8:	f7f1 f8aa 	bl	8009a10 <lv_obj_get_style>
            if(ext->one_line) {
 80188bc:	f898 3046 	ldrb.w	r3, [r8, #70]	; 0x46
            lv_style_t * style_scrl = lv_obj_get_style(scrl);
 80188c0:	4605      	mov	r5, r0
            if(ext->one_line) {
 80188c2:	079b      	lsls	r3, r3, #30
 80188c4:	d549      	bpl.n	801895a <lv_ta_signal+0x176>
                lv_style_t * style_label = lv_obj_get_style(ext->label);
 80188c6:	f8d8 0038 	ldr.w	r0, [r8, #56]	; 0x38
 80188ca:	f7f1 f8a1 	bl	8009a10 <lv_obj_get_style>
                lv_obj_set_height(ta, font_h + (style_ta->body.padding.ver + style_scrl->body.padding.ver) * 2);
 80188ce:	f9b9 3020 	ldrsh.w	r3, [r9, #32]
 80188d2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80188d4:	4630      	mov	r0, r6
 80188d6:	f9b5 2020 	ldrsh.w	r2, [r5, #32]
 80188da:	f891 1020 	ldrb.w	r1, [r1, #32]
 80188de:	4413      	add	r3, r2
 80188e0:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 80188e4:	b209      	sxth	r1, r1
 80188e6:	f7f0 fd1f 	bl	8009328 <lv_obj_set_height>
            lv_label_set_text(ext->label, NULL);
 80188ea:	f8d8 0038 	ldr.w	r0, [r8, #56]	; 0x38
 80188ee:	2100      	movs	r1, #0
 80188f0:	f7fc f944 	bl	8014b7c <lv_label_set_text>
 80188f4:	e781      	b.n	80187fa <lv_ta_signal+0x16>
        if(ext->label) {
 80188f6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80188f8:	2b00      	cmp	r3, #0
 80188fa:	f43f af7e 	beq.w	80187fa <lv_ta_signal+0x16>
            if(lv_obj_get_width(ta) != lv_area_get_width(param) ||
 80188fe:	4630      	mov	r0, r6
 8018900:	f7f1 f87a 	bl	80099f8 <lv_obj_get_width>
    return area_p->x2 - area_p->x1 + 1;
 8018904:	88bb      	ldrh	r3, [r7, #4]
 8018906:	883a      	ldrh	r2, [r7, #0]
 8018908:	3301      	adds	r3, #1
 801890a:	1a9b      	subs	r3, r3, r2
 801890c:	b21b      	sxth	r3, r3
 801890e:	4298      	cmp	r0, r3
 8018910:	d046      	beq.n	80189a0 <lv_ta_signal+0x1bc>
                lv_obj_t * scrl = lv_page_get_scrl(ta);
 8018912:	4630      	mov	r0, r6
 8018914:	f7fd feb2 	bl	801667c <lv_page_get_scrl>
 8018918:	4607      	mov	r7, r0
                lv_style_t * style_scrl = lv_obj_get_style(scrl);
 801891a:	f7f1 f879 	bl	8009a10 <lv_obj_get_style>
 801891e:	4605      	mov	r5, r0
                lv_obj_set_width(ext->label, lv_obj_get_width(scrl) - 2 * style_scrl->body.padding.hor);
 8018920:	4638      	mov	r0, r7
 8018922:	f8d8 7038 	ldr.w	r7, [r8, #56]	; 0x38
 8018926:	f7f1 f867 	bl	80099f8 <lv_obj_get_width>
 801892a:	8c69      	ldrh	r1, [r5, #34]	; 0x22
 801892c:	eba0 0141 	sub.w	r1, r0, r1, lsl #1
 8018930:	4638      	mov	r0, r7
 8018932:	b209      	sxth	r1, r1
 8018934:	f7f0 fcf0 	bl	8009318 <lv_obj_set_width>
                lv_obj_set_pos(ext->label, style_scrl->body.padding.hor, style_scrl->body.padding.ver);
 8018938:	f9b5 2020 	ldrsh.w	r2, [r5, #32]
 801893c:	f9b5 1022 	ldrsh.w	r1, [r5, #34]	; 0x22
 8018940:	f8d8 0038 	ldr.w	r0, [r8, #56]	; 0x38
 8018944:	f7f0 fb26 	bl	8008f94 <lv_obj_set_pos>
                lv_label_set_text(ext->label, NULL);    /*Refresh the label*/
 8018948:	f8d8 0038 	ldr.w	r0, [r8, #56]	; 0x38
 801894c:	2100      	movs	r1, #0
 801894e:	f7fc f915 	bl	8014b7c <lv_label_set_text>
                refr_cursor_area(ta);
 8018952:	4630      	mov	r0, r6
 8018954:	f7fe ffae 	bl	80178b4 <refr_cursor_area>
 8018958:	e74f      	b.n	80187fa <lv_ta_signal+0x16>
                lv_obj_set_width(ext->label, lv_obj_get_width(scrl) - 2 * style_scrl->body.padding.hor);
 801895a:	4638      	mov	r0, r7
 801895c:	f8d8 6038 	ldr.w	r6, [r8, #56]	; 0x38
 8018960:	f7f1 f84a 	bl	80099f8 <lv_obj_get_width>
 8018964:	8c69      	ldrh	r1, [r5, #34]	; 0x22
 8018966:	eba0 0141 	sub.w	r1, r0, r1, lsl #1
 801896a:	4630      	mov	r0, r6
 801896c:	b209      	sxth	r1, r1
 801896e:	f7f0 fcd3 	bl	8009318 <lv_obj_set_width>
                lv_obj_set_pos(ext->label, style_scrl->body.padding.hor, style_scrl->body.padding.ver);         /*Be sure the Label is in the correct position*/
 8018972:	f9b5 2020 	ldrsh.w	r2, [r5, #32]
 8018976:	f9b5 1022 	ldrsh.w	r1, [r5, #34]	; 0x22
 801897a:	f8d8 0038 	ldr.w	r0, [r8, #56]	; 0x38
 801897e:	f7f0 fb09 	bl	8008f94 <lv_obj_set_pos>
 8018982:	e7b2      	b.n	80188ea <lv_ta_signal+0x106>
 8018984:	1f3a      	subs	r2, r7, #4
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8018986:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 8018988:	f852 1f04 	ldr.w	r1, [r2, #4]!
 801898c:	b111      	cbz	r1, 8018994 <lv_ta_signal+0x1b0>
 801898e:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) {  /*Find the last set data*/
 8018990:	2b07      	cmp	r3, #7
 8018992:	d1f9      	bne.n	8018988 <lv_ta_signal+0x1a4>
        buf->type[i] = "lv_ta";
 8018994:	4a25      	ldr	r2, [pc, #148]	; (8018a2c <lv_ta_signal+0x248>)
 8018996:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 801899a:	e72e      	b.n	80187fa <lv_ta_signal+0x16>
        *editable = true;
 801899c:	703c      	strb	r4, [r7, #0]
 801899e:	e72c      	b.n	80187fa <lv_ta_signal+0x16>
                    lv_obj_get_height(ta) != lv_area_get_height(param)) {
 80189a0:	4630      	mov	r0, r6
 80189a2:	f7f1 f82f 	bl	8009a04 <lv_obj_get_height>
    return area_p->y2 - area_p->y1 + 1;
 80189a6:	88fb      	ldrh	r3, [r7, #6]
 80189a8:	887a      	ldrh	r2, [r7, #2]
 80189aa:	3301      	adds	r3, #1
 80189ac:	1a9b      	subs	r3, r3, r2
            if(lv_obj_get_width(ta) != lv_area_get_width(param) ||
 80189ae:	b21b      	sxth	r3, r3
 80189b0:	4298      	cmp	r0, r3
 80189b2:	d1ae      	bne.n	8018912 <lv_ta_signal+0x12e>
 80189b4:	e721      	b.n	80187fa <lv_ta_signal+0x16>
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 80189b6:	f7f1 f945 	bl	8009c44 <lv_obj_get_ext_attr>
    return ext->cursor.pos;
 80189ba:	f8b0 504e 	ldrh.w	r5, [r0, #78]	; 0x4e
            lv_ta_set_cursor_pos(ta, cp + 1);
 80189be:	4630      	mov	r0, r6
 80189c0:	1c69      	adds	r1, r5, #1
 80189c2:	b209      	sxth	r1, r1
 80189c4:	f7ff f9a4 	bl	8017d10 <lv_ta_set_cursor_pos>
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 80189c8:	4630      	mov	r0, r6
 80189ca:	f7f1 f93b 	bl	8009c44 <lv_obj_get_ext_attr>
            if(cp != lv_ta_get_cursor_pos(ta)) lv_ta_del_char(ta);
 80189ce:	f8b0 304e 	ldrh.w	r3, [r0, #78]	; 0x4e
 80189d2:	42ab      	cmp	r3, r5
 80189d4:	f43f af11 	beq.w	80187fa <lv_ta_signal+0x16>
        else if(c == LV_GROUP_KEY_BACKSPACE) lv_ta_del_char(ta);
 80189d8:	4630      	mov	r0, r6
 80189da:	f7ff fa5b 	bl	8017e94 <lv_ta_del_char>
 80189de:	e70c      	b.n	80187fa <lv_ta_signal+0x16>
            lv_ta_set_cursor_type(ta, cur_type & (~LV_CURSOR_HIDDEN));
 80189e0:	f005 0107 	and.w	r1, r5, #7
 80189e4:	4630      	mov	r0, r6
 80189e6:	f7ff faa9 	bl	8017f3c <lv_ta_set_cursor_type>
 80189ea:	e706      	b.n	80187fa <lv_ta_signal+0x16>
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 80189ec:	4630      	mov	r0, r6
 80189ee:	f7f1 f929 	bl	8009c44 <lv_obj_get_ext_attr>
    return ext->cursor.type;
 80189f2:	f890 105a 	ldrb.w	r1, [r0, #90]	; 0x5a
        lv_ta_set_cursor_type(ta, cur_type | LV_CURSOR_HIDDEN);
 80189f6:	4630      	mov	r0, r6
 80189f8:	f001 0107 	and.w	r1, r1, #7
 80189fc:	f041 0108 	orr.w	r1, r1, #8
 8018a00:	f7ff fa9c 	bl	8017f3c <lv_ta_set_cursor_type>
 8018a04:	e6f9      	b.n	80187fa <lv_ta_signal+0x16>
        if(c == LV_GROUP_KEY_RIGHT)     lv_ta_cursor_right(ta);
 8018a06:	4630      	mov	r0, r6
 8018a08:	f7ff fe68 	bl	80186dc <lv_ta_cursor_right>
 8018a0c:	e6f5      	b.n	80187fa <lv_ta_signal+0x16>
        else if(c == LV_GROUP_KEY_LEFT) lv_ta_cursor_left(ta);
 8018a0e:	4630      	mov	r0, r6
 8018a10:	f7ff fe72 	bl	80186f8 <lv_ta_cursor_left>
 8018a14:	e6f1      	b.n	80187fa <lv_ta_signal+0x16>
        else if(c == LV_GROUP_KEY_UP)   lv_ta_cursor_up(ta);
 8018a16:	4630      	mov	r0, r6
 8018a18:	f7ff feb4 	bl	8018784 <lv_ta_cursor_up>
 8018a1c:	e6ed      	b.n	80187fa <lv_ta_signal+0x16>
        else if(c == LV_GROUP_KEY_DOWN) lv_ta_cursor_down(ta);
 8018a1e:	4630      	mov	r0, r6
 8018a20:	f7ff fe7a 	bl	8018718 <lv_ta_cursor_down>
 8018a24:	e6e9      	b.n	80187fa <lv_ta_signal+0x16>
 8018a26:	bf00      	nop
 8018a28:	20017504 	.word	0x20017504
 8018a2c:	0808bcec 	.word	0x0808bcec

08018a30 <tabpage_pressing_handler>:
 * Called when a tab's page or scrollable object is being pressed
 * @param tabview pointer to the btn view object
 * @param tabpage pointer to the page of a btn
 */
static void tabpage_pressing_handler(lv_obj_t * tabview, lv_obj_t * tabpage)
{
 8018a30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018a34:	b083      	sub	sp, #12
 8018a36:	460d      	mov	r5, r1
 8018a38:	4606      	mov	r6, r0
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 8018a3a:	f7f1 f903 	bl	8009c44 <lv_obj_get_ext_attr>
 8018a3e:	4604      	mov	r4, r0
    lv_indev_t * indev = lv_indev_get_act();
 8018a40:	f7f0 f92e 	bl	8008ca0 <lv_indev_get_act>
    lv_point_t point_act;
    lv_indev_get_point(indev, &point_act);
 8018a44:	a901      	add	r1, sp, #4
 8018a46:	f7f0 f94f 	bl	8008ce8 <lv_indev_get_point>
    lv_coord_t x_diff = point_act.x - ext->point_last.x;
    lv_coord_t y_diff = point_act.y - ext->point_last.y;

    if(ext->draging == 0) {
 8018a4a:	7ea3      	ldrb	r3, [r4, #26]
 8018a4c:	f013 0702 	ands.w	r7, r3, #2
 8018a50:	d10f      	bne.n	8018a72 <tabpage_pressing_handler+0x42>
        if(x_diff >= LV_INDEV_DRAG_LIMIT || x_diff <= -LV_INDEV_DRAG_LIMIT) {
 8018a52:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8018a56:	8a21      	ldrh	r1, [r4, #16]
 8018a58:	3209      	adds	r2, #9
 8018a5a:	1a52      	subs	r2, r2, r1
 8018a5c:	b292      	uxth	r2, r2
 8018a5e:	2a12      	cmp	r2, #18
 8018a60:	d84e      	bhi.n	8018b00 <tabpage_pressing_handler+0xd0>
            ext->drag_hor = 1;
            ext->draging = 1;
            lv_obj_set_drag(lv_page_get_scrl(tabpage), false);
        } else if(y_diff >= LV_INDEV_DRAG_LIMIT || y_diff <= -LV_INDEV_DRAG_LIMIT) {
 8018a62:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8018a66:	8a61      	ldrh	r1, [r4, #18]
 8018a68:	3209      	adds	r2, #9
 8018a6a:	1a52      	subs	r2, r2, r1
 8018a6c:	b292      	uxth	r2, r2
 8018a6e:	2a12      	cmp	r2, #18
 8018a70:	d83f      	bhi.n	8018af2 <tabpage_pressing_handler+0xc2>
            ext->drag_hor = 0;
            ext->draging = 1;
        }
    }
    if(ext->drag_hor) {
 8018a72:	075b      	lsls	r3, r3, #29
 8018a74:	d53a      	bpl.n	8018aec <tabpage_pressing_handler+0xbc>
        lv_obj_set_x(ext->content, lv_obj_get_x(ext->content) + point_act.x - ext->point_last.x);
 8018a76:	68a7      	ldr	r7, [r4, #8]
 8018a78:	4638      	mov	r0, r7
 8018a7a:	f7f0 ffb1 	bl	80099e0 <lv_obj_get_x>
 8018a7e:	8a23      	ldrh	r3, [r4, #16]
 8018a80:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8018a84:	1ac9      	subs	r1, r1, r3
 8018a86:	4401      	add	r1, r0
 8018a88:	4638      	mov	r0, r7
 8018a8a:	b209      	sxth	r1, r1
 8018a8c:	f7f0 fbf8 	bl	8009280 <lv_obj_set_x>
        ext->point_last.x = point_act.x;
 8018a90:	f8bd 2004 	ldrh.w	r2, [sp, #4]
        ext->point_last.y = point_act.y;
 8018a94:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        ext->point_last.x = point_act.x;
 8018a98:	8222      	strh	r2, [r4, #16]
        ext->point_last.y = point_act.y;
 8018a9a:	8263      	strh	r3, [r4, #18]

        /*Move the indicator*/
        lv_coord_t indic_width = lv_obj_get_width(ext->indic);
 8018a9c:	6860      	ldr	r0, [r4, #4]
 8018a9e:	f7f0 ffab 	bl	80099f8 <lv_obj_get_width>
 8018aa2:	4607      	mov	r7, r0
        lv_style_t * tabs_style = lv_obj_get_style(ext->btns);
 8018aa4:	6820      	ldr	r0, [r4, #0]
 8018aa6:	f7f0 ffb3 	bl	8009a10 <lv_obj_get_style>
 8018aaa:	4680      	mov	r8, r0
        lv_style_t * indic_style = lv_obj_get_style(ext->indic);
 8018aac:	6860      	ldr	r0, [r4, #4]
 8018aae:	f7f0 ffaf 	bl	8009a10 <lv_obj_get_style>
        lv_coord_t p = ((tabpage->coords.x1 - tabview->coords.x1) * (indic_width + tabs_style->body.padding.inner)) / lv_obj_get_width(tabview);
 8018ab2:	f9b5 1010 	ldrsh.w	r1, [r5, #16]
 8018ab6:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
        lv_style_t * indic_style = lv_obj_get_style(ext->indic);
 8018aba:	4681      	mov	r9, r0
        lv_coord_t p = ((tabpage->coords.x1 - tabview->coords.x1) * (indic_width + tabs_style->body.padding.inner)) / lv_obj_get_width(tabview);
 8018abc:	f9b8 5024 	ldrsh.w	r5, [r8, #36]	; 0x24
 8018ac0:	4630      	mov	r0, r6
 8018ac2:	1ac9      	subs	r1, r1, r3
 8018ac4:	443d      	add	r5, r7
 8018ac6:	fb05 f501 	mul.w	r5, r5, r1
 8018aca:	f7f0 ff95 	bl	80099f8 <lv_obj_get_width>

        lv_obj_set_x(ext->indic, indic_width * ext->tab_cur + tabs_style->body.padding.inner * ext->tab_cur + indic_style->body.padding.hor - p);
 8018ace:	f9b8 3024 	ldrsh.w	r3, [r8, #36]	; 0x24
 8018ad2:	f8b9 2022 	ldrh.w	r2, [r9, #34]	; 0x22
 8018ad6:	443b      	add	r3, r7
 8018ad8:	8aa1      	ldrh	r1, [r4, #20]
        lv_coord_t p = ((tabpage->coords.x1 - tabview->coords.x1) * (indic_width + tabs_style->body.padding.inner)) / lv_obj_get_width(tabview);
 8018ada:	fb95 f5f0 	sdiv	r5, r5, r0
        lv_obj_set_x(ext->indic, indic_width * ext->tab_cur + tabs_style->body.padding.inner * ext->tab_cur + indic_style->body.padding.hor - p);
 8018ade:	fb11 2103 	smlabb	r1, r1, r3, r2
 8018ae2:	6860      	ldr	r0, [r4, #4]
 8018ae4:	1b49      	subs	r1, r1, r5
 8018ae6:	b209      	sxth	r1, r1
 8018ae8:	f7f0 fbca 	bl	8009280 <lv_obj_set_x>
    }
}
 8018aec:	b003      	add	sp, #12
 8018aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            ext->draging = 1;
 8018af2:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 8018af6:	f043 0202 	orr.w	r2, r3, #2
 8018afa:	4613      	mov	r3, r2
 8018afc:	76a2      	strb	r2, [r4, #26]
 8018afe:	e7b8      	b.n	8018a72 <tabpage_pressing_handler+0x42>
            ext->draging = 1;
 8018b00:	f043 0306 	orr.w	r3, r3, #6
            lv_obj_set_drag(lv_page_get_scrl(tabpage), false);
 8018b04:	4628      	mov	r0, r5
            ext->draging = 1;
 8018b06:	76a3      	strb	r3, [r4, #26]
            lv_obj_set_drag(lv_page_get_scrl(tabpage), false);
 8018b08:	f7fd fdb8 	bl	801667c <lv_page_get_scrl>
 8018b0c:	4639      	mov	r1, r7
 8018b0e:	f7f0 fdf7 	bl	8009700 <lv_obj_set_drag>
 8018b12:	7ea3      	ldrb	r3, [r4, #26]
 8018b14:	e7ad      	b.n	8018a72 <tabpage_pressing_handler+0x42>
 8018b16:	bf00      	nop

08018b18 <tabpage_pressed_handler.isra.2>:
static void tabpage_pressed_handler(lv_obj_t * tabview, lv_obj_t * tabpage)
 8018b18:	b510      	push	{r4, lr}
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 8018b1a:	f7f1 f893 	bl	8009c44 <lv_obj_get_ext_attr>
 8018b1e:	4604      	mov	r4, r0
    lv_indev_t * indev = lv_indev_get_act();
 8018b20:	f7f0 f8be 	bl	8008ca0 <lv_indev_get_act>
    lv_indev_get_point(indev, &ext->point_last);
 8018b24:	f104 0110 	add.w	r1, r4, #16
}
 8018b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_indev_get_point(indev, &ext->point_last);
 8018b2c:	f7f0 b8dc 	b.w	8008ce8 <lv_indev_get_point>

08018b30 <lv_tabview_set_tab_act>:
{
 8018b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b34:	b08a      	sub	sp, #40	; 0x28
 8018b36:	460e      	mov	r6, r1
 8018b38:	4617      	mov	r7, r2
 8018b3a:	4680      	mov	r8, r0
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 8018b3c:	f7f1 f882 	bl	8009c44 <lv_obj_get_ext_attr>
 8018b40:	4604      	mov	r4, r0
    lv_style_t * style = lv_obj_get_style(ext->content);
 8018b42:	6880      	ldr	r0, [r0, #8]
 8018b44:	f7f0 ff64 	bl	8009a10 <lv_obj_get_style>
    if(id >= ext->tab_cnt) id = ext->tab_cnt - 1;
 8018b48:	8ae1      	ldrh	r1, [r4, #22]
    lv_style_t * style = lv_obj_get_style(ext->content);
 8018b4a:	4605      	mov	r5, r0
    if(id >= ext->tab_cnt) id = ext->tab_cnt - 1;
 8018b4c:	42b1      	cmp	r1, r6
 8018b4e:	d801      	bhi.n	8018b54 <lv_tabview_set_tab_act+0x24>
 8018b50:	1e4e      	subs	r6, r1, #1
 8018b52:	b2b6      	uxth	r6, r6
    if(ext->tab_load_action && id != ext->tab_cur) res = ext->tab_load_action(tabview, id);
 8018b54:	69e3      	ldr	r3, [r4, #28]
 8018b56:	b153      	cbz	r3, 8018b6e <lv_tabview_set_tab_act+0x3e>
 8018b58:	8aa2      	ldrh	r2, [r4, #20]
 8018b5a:	42b2      	cmp	r2, r6
 8018b5c:	d007      	beq.n	8018b6e <lv_tabview_set_tab_act+0x3e>
 8018b5e:	4631      	mov	r1, r6
 8018b60:	4640      	mov	r0, r8
 8018b62:	4798      	blx	r3
    if(res != LV_RES_OK) return;        /*Prevent the tab loading*/
 8018b64:	2801      	cmp	r0, #1
 8018b66:	d002      	beq.n	8018b6e <lv_tabview_set_tab_act+0x3e>
}
 8018b68:	b00a      	add	sp, #40	; 0x28
 8018b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ext->tab_cur = id;
 8018b6e:	82a6      	strh	r6, [r4, #20]
    lv_coord_t cont_x = -(lv_obj_get_width(tabview) * id + style->body.padding.inner * id + style->body.padding.hor);
 8018b70:	4640      	mov	r0, r8
 8018b72:	f7f0 ff41 	bl	80099f8 <lv_obj_get_width>
 8018b76:	f9b5 3024 	ldrsh.w	r3, [r5, #36]	; 0x24
 8018b7a:	8c6d      	ldrh	r5, [r5, #34]	; 0x22
 8018b7c:	1819      	adds	r1, r3, r0
    if(ext->anim_time == 0 || anim_en == false) {
 8018b7e:	8b22      	ldrh	r2, [r4, #24]
    lv_coord_t cont_x = -(lv_obj_get_width(tabview) * id + style->body.padding.inner * id + style->body.padding.hor);
 8018b80:	fb11 5106 	smlabb	r1, r1, r6, r5
 8018b84:	4249      	negs	r1, r1
 8018b86:	b20d      	sxth	r5, r1
    if(ext->anim_time == 0 || anim_en == false) {
 8018b88:	b102      	cbz	r2, 8018b8c <lv_tabview_set_tab_act+0x5c>
 8018b8a:	bb07      	cbnz	r7, 8018bce <lv_tabview_set_tab_act+0x9e>
        lv_obj_set_x(ext->content, cont_x);
 8018b8c:	4629      	mov	r1, r5
 8018b8e:	68a0      	ldr	r0, [r4, #8]
 8018b90:	f7f0 fb76 	bl	8009280 <lv_obj_set_x>
    lv_coord_t indic_width = lv_obj_get_width(ext->indic);
 8018b94:	6860      	ldr	r0, [r4, #4]
 8018b96:	f7f0 ff2f 	bl	80099f8 <lv_obj_get_width>
 8018b9a:	4605      	mov	r5, r0
    lv_style_t * tabs_style = lv_obj_get_style(ext->btns);
 8018b9c:	6820      	ldr	r0, [r4, #0]
 8018b9e:	f7f0 ff37 	bl	8009a10 <lv_obj_get_style>
    lv_coord_t indic_x = indic_width * id + tabs_style->body.padding.inner * id + tabs_style->body.padding.hor;
 8018ba2:	f9b0 1024 	ldrsh.w	r1, [r0, #36]	; 0x24
 8018ba6:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 8018ba8:	4429      	add	r1, r5
    if(ext->anim_time == 0 || anim_en == false) {
 8018baa:	8b23      	ldrh	r3, [r4, #24]
    lv_coord_t indic_x = indic_width * id + tabs_style->body.padding.inner * id + tabs_style->body.padding.hor;
 8018bac:	fb11 2606 	smlabb	r6, r1, r6, r2
 8018bb0:	b236      	sxth	r6, r6
    if(ext->anim_time == 0 || anim_en == false) {
 8018bb2:	b103      	cbz	r3, 8018bb6 <lv_tabview_set_tab_act+0x86>
 8018bb4:	bb87      	cbnz	r7, 8018c18 <lv_tabview_set_tab_act+0xe8>
        lv_obj_set_x(ext->indic, indic_x);
 8018bb6:	4631      	mov	r1, r6
 8018bb8:	6860      	ldr	r0, [r4, #4]
 8018bba:	f7f0 fb61 	bl	8009280 <lv_obj_set_x>
    lv_btnm_set_toggle(ext->btns, true, ext->tab_cur);
 8018bbe:	8aa2      	ldrh	r2, [r4, #20]
 8018bc0:	2101      	movs	r1, #1
 8018bc2:	6820      	ldr	r0, [r4, #0]
 8018bc4:	f7f9 fc18 	bl	80123f8 <lv_btnm_set_toggle>
}
 8018bc8:	b00a      	add	sp, #40	; 0x28
 8018bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        a.var = ext->content;
 8018bce:	68a3      	ldr	r3, [r4, #8]
        a.start = lv_obj_get_x(ext->content);
 8018bd0:	4618      	mov	r0, r3
        a.var = ext->content;
 8018bd2:	9301      	str	r3, [sp, #4]
        a.start = lv_obj_get_x(ext->content);
 8018bd4:	f7f0 ff04 	bl	80099e0 <lv_obj_get_x>
        a.playback = 0;
 8018bd8:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
        a.end_cb = NULL;
 8018bdc:	2300      	movs	r3, #0
        a.time = ext->anim_time;
 8018bde:	f8b4 c018 	ldrh.w	ip, [r4, #24]
        a.repeat = 0;
 8018be2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
        a.fp = (lv_anim_fp_t)lv_obj_set_x;
 8018be6:	f8df e078 	ldr.w	lr, [pc, #120]	; 8018c60 <lv_tabview_set_tab_act+0x130>
        a.path = lv_anim_path_linear;
 8018bea:	491c      	ldr	r1, [pc, #112]	; (8018c5c <lv_tabview_set_tab_act+0x12c>)
        a.repeat = 0;
 8018bec:	f363 0241 	bfi	r2, r3, #1, #1
        a.start = lv_obj_get_x(ext->content);
 8018bf0:	9005      	str	r0, [sp, #20]
        lv_anim_create(&a);
 8018bf2:	a801      	add	r0, sp, #4
        a.end = cont_x;
 8018bf4:	9506      	str	r5, [sp, #24]
        a.end_cb = NULL;
 8018bf6:	9303      	str	r3, [sp, #12]
        a.act_time = 0;
 8018bf8:	f8ad 301e 	strh.w	r3, [sp, #30]
        a.repeat = 0;
 8018bfc:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
        a.time = ext->anim_time;
 8018c00:	f8ad c01c 	strh.w	ip, [sp, #28]
        a.playback_pause = 0;
 8018c04:	f8ad 3020 	strh.w	r3, [sp, #32]
        a.repeat_pause = 0;
 8018c08:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
        a.fp = (lv_anim_fp_t)lv_obj_set_x;
 8018c0c:	f8cd e008 	str.w	lr, [sp, #8]
        a.path = lv_anim_path_linear;
 8018c10:	9104      	str	r1, [sp, #16]
        lv_anim_create(&a);
 8018c12:	f7f6 fe15 	bl	800f840 <lv_anim_create>
 8018c16:	e7bd      	b.n	8018b94 <lv_tabview_set_tab_act+0x64>
        a.var = ext->indic;
 8018c18:	6863      	ldr	r3, [r4, #4]
        a.fp = (lv_anim_fp_t)lv_obj_set_x;
 8018c1a:	4d11      	ldr	r5, [pc, #68]	; (8018c60 <lv_tabview_set_tab_act+0x130>)
        a.start = lv_obj_get_x(ext->indic);
 8018c1c:	4618      	mov	r0, r3
        a.var = ext->indic;
 8018c1e:	9301      	str	r3, [sp, #4]
        a.start = lv_obj_get_x(ext->indic);
 8018c20:	f7f0 fede 	bl	80099e0 <lv_obj_get_x>
        a.playback = 0;
 8018c24:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
        a.end_cb = NULL;
 8018c28:	2300      	movs	r3, #0
        a.time = ext->anim_time;
 8018c2a:	8b27      	ldrh	r7, [r4, #24]
        a.repeat = 0;
 8018c2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
        a.path = lv_anim_path_linear;
 8018c30:	490a      	ldr	r1, [pc, #40]	; (8018c5c <lv_tabview_set_tab_act+0x12c>)
        a.start = lv_obj_get_x(ext->indic);
 8018c32:	9005      	str	r0, [sp, #20]
        lv_anim_create(&a);
 8018c34:	a801      	add	r0, sp, #4
        a.repeat = 0;
 8018c36:	f363 0241 	bfi	r2, r3, #1, #1
        a.end = indic_x;
 8018c3a:	9606      	str	r6, [sp, #24]
        a.end_cb = NULL;
 8018c3c:	9303      	str	r3, [sp, #12]
        a.act_time = 0;
 8018c3e:	f8ad 301e 	strh.w	r3, [sp, #30]
        a.repeat = 0;
 8018c42:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
        a.time = ext->anim_time;
 8018c46:	f8ad 701c 	strh.w	r7, [sp, #28]
        a.playback_pause = 0;
 8018c4a:	f8ad 3020 	strh.w	r3, [sp, #32]
        a.repeat_pause = 0;
 8018c4e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
        a.fp = (lv_anim_fp_t)lv_obj_set_x;
 8018c52:	9502      	str	r5, [sp, #8]
        a.path = lv_anim_path_linear;
 8018c54:	9104      	str	r1, [sp, #16]
        lv_anim_create(&a);
 8018c56:	f7f6 fdf3 	bl	800f840 <lv_anim_create>
 8018c5a:	e7b0      	b.n	8018bbe <lv_tabview_set_tab_act+0x8e>
 8018c5c:	0800f8dd 	.word	0x0800f8dd
 8018c60:	08009281 	.word	0x08009281

08018c64 <tab_btnm_action>:
 * @param tab_btnm pointer to the tab's button matrix object
 * @param id the id of the tab (>= 0)
 * @return LV_ACTION_RES_OK because the button matrix in not deleted in the function
 */
static lv_res_t tab_btnm_action(lv_obj_t * tab_btnm, const char * tab_name)
{
 8018c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c66:	4604      	mov	r4, r0
 8018c68:	460f      	mov	r7, r1
    lv_obj_t * tab = lv_obj_get_parent(tab_btnm);
 8018c6a:	f7f0 fe15 	bl	8009898 <lv_obj_get_parent>
 8018c6e:	4606      	mov	r6, r0
    const char ** tabs_map = lv_btnm_get_map(tab_btnm);
 8018c70:	4620      	mov	r0, r4
 8018c72:	f7f9 fcd3 	bl	801261c <lv_btnm_get_map>
 8018c76:	4605      	mov	r5, r0

    uint8_t i = 0;

    while(tabs_map[i][0] != '\0') {
 8018c78:	6800      	ldr	r0, [r0, #0]
 8018c7a:	7801      	ldrb	r1, [r0, #0]
 8018c7c:	b171      	cbz	r1, 8018c9c <tab_btnm_action+0x38>
 8018c7e:	2400      	movs	r4, #0
 8018c80:	e004      	b.n	8018c8c <tab_btnm_action+0x28>
        if(strcmp(&tabs_map[i][1], tab_name) == 0) break;   /*[1] to skip the control byte*/
        i++;
 8018c82:	b2dc      	uxtb	r4, r3
    while(tabs_map[i][0] != '\0') {
 8018c84:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8018c88:	7803      	ldrb	r3, [r0, #0]
 8018c8a:	b133      	cbz	r3, 8018c9a <tab_btnm_action+0x36>
        if(strcmp(&tabs_map[i][1], tab_name) == 0) break;   /*[1] to skip the control byte*/
 8018c8c:	3001      	adds	r0, #1
 8018c8e:	4639      	mov	r1, r7
 8018c90:	f7e7 faba 	bl	8000208 <strcmp>
        i++;
 8018c94:	1c63      	adds	r3, r4, #1
        if(strcmp(&tabs_map[i][1], tab_name) == 0) break;   /*[1] to skip the control byte*/
 8018c96:	2800      	cmp	r0, #0
 8018c98:	d1f3      	bne.n	8018c82 <tab_btnm_action+0x1e>
 8018c9a:	b2a1      	uxth	r1, r4
    }

    lv_tabview_set_tab_act(tab, i, true);
 8018c9c:	4630      	mov	r0, r6
 8018c9e:	2201      	movs	r2, #1
 8018ca0:	f7ff ff46 	bl	8018b30 <lv_tabview_set_tab_act>

    return LV_RES_OK;
}
 8018ca4:	2001      	movs	r0, #1
 8018ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018ca8 <tabpage_press_lost_handler>:
{
 8018ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018caa:	b083      	sub	sp, #12
 8018cac:	460f      	mov	r7, r1
 8018cae:	4604      	mov	r4, r0
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 8018cb0:	f7f0 ffc8 	bl	8009c44 <lv_obj_get_ext_attr>
 8018cb4:	4606      	mov	r6, r0
    lv_obj_set_drag(lv_page_get_scrl(tabpage), true);
 8018cb6:	4638      	mov	r0, r7
    ext->drag_hor = 0;
 8018cb8:	7eb3      	ldrb	r3, [r6, #26]
    ext->draging = 0;
 8018cba:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 8018cbe:	f36f 0341 	bfc	r3, #1, #1
 8018cc2:	76b3      	strb	r3, [r6, #26]
    lv_obj_set_drag(lv_page_get_scrl(tabpage), true);
 8018cc4:	f7fd fcda 	bl	801667c <lv_page_get_scrl>
 8018cc8:	2101      	movs	r1, #1
 8018cca:	f7f0 fd19 	bl	8009700 <lv_obj_set_drag>
    lv_indev_t * indev = lv_indev_get_act();
 8018cce:	f7ef ffe7 	bl	8008ca0 <lv_indev_get_act>
 8018cd2:	4605      	mov	r5, r0
    lv_indev_get_point(indev, &point_act);
 8018cd4:	4669      	mov	r1, sp
 8018cd6:	f7f0 f807 	bl	8008ce8 <lv_indev_get_point>
    lv_indev_get_vect(indev, &vect);
 8018cda:	4628      	mov	r0, r5
 8018cdc:	a901      	add	r1, sp, #4
 8018cde:	f7f0 f823 	bl	8008d28 <lv_indev_get_vect>
    while(vect.x != 0)   {
 8018ce2:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8018ce6:	2a00      	cmp	r2, #0
 8018ce8:	d03a      	beq.n	8018d60 <tabpage_press_lost_handler+0xb8>
 8018cea:	2000      	movs	r0, #0
        vect.x = vect.x * (100 - LV_INDEV_DRAG_THROW) / 100;
 8018cec:	4d1d      	ldr	r5, [pc, #116]	; (8018d64 <tabpage_press_lost_handler+0xbc>)
 8018cee:	eb02 0382 	add.w	r3, r2, r2, lsl #2
        x_predict += vect.x;
 8018cf2:	4402      	add	r2, r0
        vect.x = vect.x * (100 - LV_INDEV_DRAG_THROW) / 100;
 8018cf4:	011b      	lsls	r3, r3, #4
        x_predict += vect.x;
 8018cf6:	b291      	uxth	r1, r2
        vect.x = vect.x * (100 - LV_INDEV_DRAG_THROW) / 100;
 8018cf8:	fb85 0203 	smull	r0, r2, r5, r3
 8018cfc:	17db      	asrs	r3, r3, #31
        x_predict += vect.x;
 8018cfe:	b208      	sxth	r0, r1
        vect.x = vect.x * (100 - LV_INDEV_DRAG_THROW) / 100;
 8018d00:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 8018d04:	b21a      	sxth	r2, r3
    while(vect.x != 0)   {
 8018d06:	2b00      	cmp	r3, #0
 8018d08:	d1f1      	bne.n	8018cee <tabpage_press_lost_handler+0x46>
 8018d0a:	f8ad 3004 	strh.w	r3, [sp, #4]
    lv_coord_t page_x1 = tabpage->coords.x1 - tabview->coords.x1 + x_predict;
 8018d0e:	8a3a      	ldrh	r2, [r7, #16]
    lv_coord_t page_x2 = page_x1 + lv_obj_get_width(tabpage);
 8018d10:	4638      	mov	r0, r7
    lv_coord_t page_x1 = tabpage->coords.x1 - tabview->coords.x1 + x_predict;
 8018d12:	8a25      	ldrh	r5, [r4, #16]
 8018d14:	1b52      	subs	r2, r2, r5
 8018d16:	440a      	add	r2, r1
 8018d18:	b295      	uxth	r5, r2
    lv_coord_t page_x2 = page_x1 + lv_obj_get_width(tabpage);
 8018d1a:	f7f0 fe6d 	bl	80099f8 <lv_obj_get_width>
 8018d1e:	4607      	mov	r7, r0
    lv_coord_t treshold = lv_obj_get_width(tabview) / 2;
 8018d20:	4620      	mov	r0, r4
 8018d22:	f7f0 fe69 	bl	80099f8 <lv_obj_get_width>
 8018d26:	2800      	cmp	r0, #0
    if(page_x1 > treshold) {
 8018d28:	b22b      	sxth	r3, r5
    uint16_t tab_cur = ext->tab_cur;
 8018d2a:	8ab1      	ldrh	r1, [r6, #20]
    lv_coord_t treshold = lv_obj_get_width(tabview) / 2;
 8018d2c:	bfb8      	it	lt
 8018d2e:	3001      	addlt	r0, #1
 8018d30:	f340 004f 	sbfx	r0, r0, #1, #16
    if(page_x1 > treshold) {
 8018d34:	4283      	cmp	r3, r0
 8018d36:	dd08      	ble.n	8018d4a <tabpage_press_lost_handler+0xa2>
        if(tab_cur != 0) tab_cur--;
 8018d38:	b109      	cbz	r1, 8018d3e <tabpage_press_lost_handler+0x96>
 8018d3a:	3901      	subs	r1, #1
 8018d3c:	b289      	uxth	r1, r1
    lv_tabview_set_tab_act(tabview, tab_cur, true);
 8018d3e:	4620      	mov	r0, r4
 8018d40:	2201      	movs	r2, #1
 8018d42:	f7ff fef5 	bl	8018b30 <lv_tabview_set_tab_act>
}
 8018d46:	b003      	add	sp, #12
 8018d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_coord_t page_x2 = page_x1 + lv_obj_get_width(tabpage);
 8018d4a:	443d      	add	r5, r7
    } else if(page_x2 < treshold) {
 8018d4c:	b22d      	sxth	r5, r5
 8018d4e:	4285      	cmp	r5, r0
 8018d50:	daf5      	bge.n	8018d3e <tabpage_press_lost_handler+0x96>
        if(tab_cur < ext->tab_cnt - 1) tab_cur++;
 8018d52:	8af3      	ldrh	r3, [r6, #22]
 8018d54:	3b01      	subs	r3, #1
 8018d56:	4299      	cmp	r1, r3
 8018d58:	daf1      	bge.n	8018d3e <tabpage_press_lost_handler+0x96>
 8018d5a:	3101      	adds	r1, #1
 8018d5c:	b289      	uxth	r1, r1
 8018d5e:	e7ee      	b.n	8018d3e <tabpage_press_lost_handler+0x96>
    while(vect.x != 0)   {
 8018d60:	4611      	mov	r1, r2
 8018d62:	e7d4      	b.n	8018d0e <tabpage_press_lost_handler+0x66>
 8018d64:	51eb851f 	.word	0x51eb851f

08018d68 <tabpage_signal>:
{
 8018d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    res = page_signal(tab_page, sign, param);
 8018d6a:	4b15      	ldr	r3, [pc, #84]	; (8018dc0 <tabpage_signal+0x58>)
{
 8018d6c:	4606      	mov	r6, r0
 8018d6e:	460d      	mov	r5, r1
    res = page_signal(tab_page, sign, param);
 8018d70:	681b      	ldr	r3, [r3, #0]
 8018d72:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8018d74:	2801      	cmp	r0, #1
    res = page_signal(tab_page, sign, param);
 8018d76:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
 8018d78:	d001      	beq.n	8018d7e <tabpage_signal+0x16>
}
 8018d7a:	4620      	mov	r0, r4
 8018d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_obj_t * cont = lv_obj_get_parent(tab_page);
 8018d7e:	4630      	mov	r0, r6
 8018d80:	f7f0 fd8a 	bl	8009898 <lv_obj_get_parent>
    lv_obj_t * tabview = lv_obj_get_parent(cont);
 8018d84:	f7f0 fd88 	bl	8009898 <lv_obj_get_parent>
 8018d88:	4607      	mov	r7, r0
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 8018d8a:	f7f0 ff5b 	bl	8009c44 <lv_obj_get_ext_attr>
    return ext->slide_enable ? true : false;
 8018d8e:	7e83      	ldrb	r3, [r0, #26]
    if(lv_tabview_get_sliding(tabview) == false) return res;
 8018d90:	07db      	lsls	r3, r3, #31
 8018d92:	d5f2      	bpl.n	8018d7a <tabpage_signal+0x12>
    if(sign == LV_SIGNAL_PRESSED) {
 8018d94:	2d08      	cmp	r5, #8
 8018d96:	d009      	beq.n	8018dac <tabpage_signal+0x44>
    } else if(sign == LV_SIGNAL_PRESSING) {
 8018d98:	2d09      	cmp	r5, #9
 8018d9a:	d00b      	beq.n	8018db4 <tabpage_signal+0x4c>
    } else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
 8018d9c:	3d0a      	subs	r5, #10
 8018d9e:	2d01      	cmp	r5, #1
 8018da0:	d8eb      	bhi.n	8018d7a <tabpage_signal+0x12>
        tabpage_press_lost_handler(tabview, tab_page);
 8018da2:	4631      	mov	r1, r6
 8018da4:	4638      	mov	r0, r7
 8018da6:	f7ff ff7f 	bl	8018ca8 <tabpage_press_lost_handler>
 8018daa:	e7e6      	b.n	8018d7a <tabpage_signal+0x12>
        tabpage_pressed_handler(tabview, tab_page);
 8018dac:	4638      	mov	r0, r7
 8018dae:	f7ff feb3 	bl	8018b18 <tabpage_pressed_handler.isra.2>
 8018db2:	e7e2      	b.n	8018d7a <tabpage_signal+0x12>
        tabpage_pressing_handler(tabview, tab_page);
 8018db4:	4631      	mov	r1, r6
 8018db6:	4638      	mov	r0, r7
 8018db8:	f7ff fe3a 	bl	8018a30 <tabpage_pressing_handler>
 8018dbc:	e7dd      	b.n	8018d7a <tabpage_signal+0x12>
 8018dbe:	bf00      	nop
 8018dc0:	20017514 	.word	0x20017514

08018dc4 <tabpage_scrl_signal>:
{
 8018dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    res = page_scrl_signal(tab_scrl, sign, param);
 8018dc6:	4b16      	ldr	r3, [pc, #88]	; (8018e20 <tabpage_scrl_signal+0x5c>)
{
 8018dc8:	4606      	mov	r6, r0
 8018dca:	460d      	mov	r5, r1
    res = page_scrl_signal(tab_scrl, sign, param);
 8018dcc:	685b      	ldr	r3, [r3, #4]
 8018dce:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8018dd0:	2801      	cmp	r0, #1
    res = page_scrl_signal(tab_scrl, sign, param);
 8018dd2:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
 8018dd4:	d001      	beq.n	8018dda <tabpage_scrl_signal+0x16>
}
 8018dd6:	4620      	mov	r0, r4
 8018dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_obj_t * tab_page = lv_obj_get_parent(tab_scrl);
 8018dda:	4630      	mov	r0, r6
 8018ddc:	f7f0 fd5c 	bl	8009898 <lv_obj_get_parent>
 8018de0:	4607      	mov	r7, r0
    lv_obj_t * cont = lv_obj_get_parent(tab_page);
 8018de2:	f7f0 fd59 	bl	8009898 <lv_obj_get_parent>
    lv_obj_t * tabview = lv_obj_get_parent(cont);
 8018de6:	f7f0 fd57 	bl	8009898 <lv_obj_get_parent>
 8018dea:	4606      	mov	r6, r0
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 8018dec:	f7f0 ff2a 	bl	8009c44 <lv_obj_get_ext_attr>
    return ext->slide_enable ? true : false;
 8018df0:	7e83      	ldrb	r3, [r0, #26]
    if(lv_tabview_get_sliding(tabview) == false) return res;
 8018df2:	07db      	lsls	r3, r3, #31
 8018df4:	d5ef      	bpl.n	8018dd6 <tabpage_scrl_signal+0x12>
    if(sign == LV_SIGNAL_PRESSED) {
 8018df6:	2d08      	cmp	r5, #8
 8018df8:	d009      	beq.n	8018e0e <tabpage_scrl_signal+0x4a>
    } else if(sign == LV_SIGNAL_PRESSING) {
 8018dfa:	2d09      	cmp	r5, #9
 8018dfc:	d00b      	beq.n	8018e16 <tabpage_scrl_signal+0x52>
    } else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
 8018dfe:	3d0a      	subs	r5, #10
 8018e00:	2d01      	cmp	r5, #1
 8018e02:	d8e8      	bhi.n	8018dd6 <tabpage_scrl_signal+0x12>
        tabpage_press_lost_handler(tabview, tab_page);
 8018e04:	4639      	mov	r1, r7
 8018e06:	4630      	mov	r0, r6
 8018e08:	f7ff ff4e 	bl	8018ca8 <tabpage_press_lost_handler>
 8018e0c:	e7e3      	b.n	8018dd6 <tabpage_scrl_signal+0x12>
        tabpage_pressed_handler(tabview, tab_page);
 8018e0e:	4630      	mov	r0, r6
 8018e10:	f7ff fe82 	bl	8018b18 <tabpage_pressed_handler.isra.2>
 8018e14:	e7df      	b.n	8018dd6 <tabpage_scrl_signal+0x12>
        tabpage_pressing_handler(tabview, tab_page);
 8018e16:	4639      	mov	r1, r7
 8018e18:	4630      	mov	r0, r6
 8018e1a:	f7ff fe09 	bl	8018a30 <tabpage_pressing_handler>
 8018e1e:	e7da      	b.n	8018dd6 <tabpage_scrl_signal+0x12>
 8018e20:	20017514 	.word	0x20017514

08018e24 <lv_tabview_get_tab>:
{
 8018e24:	b570      	push	{r4, r5, r6, lr}
 8018e26:	460d      	mov	r5, r1
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 8018e28:	f7f0 ff0c 	bl	8009c44 <lv_obj_get_ext_attr>
    lv_obj_t * page = lv_obj_get_child_back(ext->content, NULL);
 8018e2c:	2100      	movs	r1, #0
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 8018e2e:	4606      	mov	r6, r0
    lv_obj_t * page = lv_obj_get_child_back(ext->content, NULL);
 8018e30:	6880      	ldr	r0, [r0, #8]
    while(page != NULL && i != id) {
 8018e32:	2400      	movs	r4, #0
    lv_obj_t * page = lv_obj_get_child_back(ext->content, NULL);
 8018e34:	f7f0 fdc8 	bl	80099c8 <lv_obj_get_child_back>
    while(page != NULL && i != id) {
 8018e38:	b158      	cbz	r0, 8018e52 <lv_tabview_get_tab+0x2e>
 8018e3a:	b915      	cbnz	r5, 8018e42 <lv_tabview_get_tab+0x1e>
 8018e3c:	e009      	b.n	8018e52 <lv_tabview_get_tab+0x2e>
 8018e3e:	42a5      	cmp	r5, r4
 8018e40:	d007      	beq.n	8018e52 <lv_tabview_get_tab+0x2e>
        i++;
 8018e42:	3401      	adds	r4, #1
        page = lv_obj_get_child_back(ext->content, page);
 8018e44:	4601      	mov	r1, r0
 8018e46:	68b0      	ldr	r0, [r6, #8]
        i++;
 8018e48:	b2a4      	uxth	r4, r4
        page = lv_obj_get_child_back(ext->content, page);
 8018e4a:	f7f0 fdbd 	bl	80099c8 <lv_obj_get_child_back>
    while(page != NULL && i != id) {
 8018e4e:	2800      	cmp	r0, #0
 8018e50:	d1f5      	bne.n	8018e3e <lv_tabview_get_tab+0x1a>
}
 8018e52:	42a5      	cmp	r5, r4
 8018e54:	bf18      	it	ne
 8018e56:	2000      	movne	r0, #0
 8018e58:	bd70      	pop	{r4, r5, r6, pc}
 8018e5a:	bf00      	nop

08018e5c <lv_tabview_get_style>:
{
 8018e5c:	b538      	push	{r3, r4, r5, lr}
 8018e5e:	460c      	mov	r4, r1
 8018e60:	4605      	mov	r5, r0
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 8018e62:	f7f0 feef 	bl	8009c44 <lv_obj_get_ext_attr>
    switch(type) {
 8018e66:	2c06      	cmp	r4, #6
 8018e68:	d828      	bhi.n	8018ebc <lv_tabview_get_style+0x60>
 8018e6a:	e8df f004 	tbb	[pc, r4]
 8018e6e:	270a      	.short	0x270a
 8018e70:	211b150f 	.word	0x211b150f
 8018e74:	04          	.byte	0x04
 8018e75:	00          	.byte	0x00
            style = lv_btnm_get_style(ext->btns, LV_BTNM_STYLE_BTN_TGL_PR);
 8018e76:	6800      	ldr	r0, [r0, #0]
 8018e78:	2104      	movs	r1, #4
}
 8018e7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            style = lv_btnm_get_style(ext->btns, LV_BTNM_STYLE_BTN_TGL_PR);
 8018e7e:	f7f9 bbd3 	b.w	8012628 <lv_btnm_get_style>
            style = lv_obj_get_style(tabview);
 8018e82:	4628      	mov	r0, r5
}
 8018e84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            style = lv_obj_get_style(tabview);
 8018e88:	f7f0 bdc2 	b.w	8009a10 <lv_obj_get_style>
            style = lv_btnm_get_style(ext->btns, LV_BTNM_STYLE_BG);
 8018e8c:	6800      	ldr	r0, [r0, #0]
 8018e8e:	2100      	movs	r1, #0
}
 8018e90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            style = lv_btnm_get_style(ext->btns, LV_BTNM_STYLE_BG);
 8018e94:	f7f9 bbc8 	b.w	8012628 <lv_btnm_get_style>
            style = lv_btnm_get_style(ext->btns, LV_BTNM_STYLE_BTN_REL);
 8018e98:	6800      	ldr	r0, [r0, #0]
 8018e9a:	2101      	movs	r1, #1
}
 8018e9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            style = lv_btnm_get_style(ext->btns, LV_BTNM_STYLE_BTN_REL);
 8018ea0:	f7f9 bbc2 	b.w	8012628 <lv_btnm_get_style>
            style = lv_btnm_get_style(ext->btns, LV_BTNM_STYLE_BTN_PR);
 8018ea4:	6800      	ldr	r0, [r0, #0]
 8018ea6:	2102      	movs	r1, #2
}
 8018ea8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            style = lv_btnm_get_style(ext->btns, LV_BTNM_STYLE_BTN_PR);
 8018eac:	f7f9 bbbc 	b.w	8012628 <lv_btnm_get_style>
            style = lv_btnm_get_style(ext->btns, LV_BTNM_STYLE_BTN_TGL_REL);
 8018eb0:	6800      	ldr	r0, [r0, #0]
 8018eb2:	2103      	movs	r1, #3
}
 8018eb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            style = lv_btnm_get_style(ext->btns, LV_BTNM_STYLE_BTN_TGL_REL);
 8018eb8:	f7f9 bbb6 	b.w	8012628 <lv_btnm_get_style>
}
 8018ebc:	2000      	movs	r0, #0
 8018ebe:	bd38      	pop	{r3, r4, r5, pc}

08018ec0 <tabview_realign>:
/**
 * Realign and resize the elements of Tab view
 * @param tabview pointer to a Tab view object
 */
static void tabview_realign(lv_obj_t * tabview)
{
 8018ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ec4:	b082      	sub	sp, #8
 8018ec6:	4607      	mov	r7, r0
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 8018ec8:	f7f0 febc 	bl	8009c44 <lv_obj_get_ext_attr>
 8018ecc:	4605      	mov	r5, r0

    lv_obj_set_width(ext->btns, lv_obj_get_width(tabview));
 8018ece:	4638      	mov	r0, r7
 8018ed0:	682c      	ldr	r4, [r5, #0]
 8018ed2:	f7f0 fd91 	bl	80099f8 <lv_obj_get_width>
 8018ed6:	4601      	mov	r1, r0
 8018ed8:	4620      	mov	r0, r4
 8018eda:	f7f0 fa1d 	bl	8009318 <lv_obj_set_width>

    if(ext->btns_hide) {
 8018ede:	7ea9      	ldrb	r1, [r5, #26]
 8018ee0:	f011 0408 	ands.w	r4, r1, #8
 8018ee4:	d135      	bne.n	8018f52 <tabview_realign+0x92>
    	lv_obj_set_hidden(ext->btns, true);
    	lv_obj_set_hidden(ext->indic, true);
    	lv_obj_set_height(ext->content, lv_obj_get_height(tabview));
    	lv_obj_align(ext->content, NULL, LV_ALIGN_IN_TOP_LEFT, 0, 0);
    }
    else if(ext->tab_cnt != 0) {
 8018ee6:	8aeb      	ldrh	r3, [r5, #22]
 8018ee8:	2b00      	cmp	r3, #0
 8018eea:	d14a      	bne.n	8018f82 <tabview_realign+0xc2>
				lv_obj_align(ext->btns, ext->content, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
				break;
		}
    }

    lv_obj_t * pages = lv_obj_get_child(ext->content, NULL);
 8018eec:	2100      	movs	r1, #0
 8018eee:	68a8      	ldr	r0, [r5, #8]
 8018ef0:	f7f0 fcd4 	bl	800989c <lv_obj_get_child>
    while(pages != NULL) {
 8018ef4:	4604      	mov	r4, r0
 8018ef6:	b160      	cbz	r0, 8018f12 <tabview_realign+0x52>
 8018ef8:	4e53      	ldr	r6, [pc, #332]	; (8019048 <tabview_realign+0x188>)
        if(lv_obj_get_signal_func(pages) == tabpage_signal) {  /*Be sure adjust only the pages (user can other things)*/
 8018efa:	4620      	mov	r0, r4
 8018efc:	f7f0 fe9e 	bl	8009c3c <lv_obj_get_signal_func>
 8018f00:	4286      	cmp	r6, r0
 8018f02:	d019      	beq.n	8018f38 <tabview_realign+0x78>
            lv_obj_set_size(pages, lv_obj_get_width(tabview), lv_obj_get_height(ext->content));
        }
        pages = lv_obj_get_child(ext->content, pages);
 8018f04:	4621      	mov	r1, r4
 8018f06:	68a8      	ldr	r0, [r5, #8]
 8018f08:	f7f0 fcc8 	bl	800989c <lv_obj_get_child>
    while(pages != NULL) {
 8018f0c:	4604      	mov	r4, r0
 8018f0e:	2800      	cmp	r0, #0
 8018f10:	d1f3      	bne.n	8018efa <tabview_realign+0x3a>
    }

    if(!ext->btns_hide) {
 8018f12:	7eab      	ldrb	r3, [r5, #26]
 8018f14:	f013 0408 	ands.w	r4, r3, #8
 8018f18:	d106      	bne.n	8018f28 <tabview_realign+0x68>
    	lv_obj_align(ext->indic, ext->btns, LV_ALIGN_IN_BOTTOM_LEFT, 0, 0);
 8018f1a:	6829      	ldr	r1, [r5, #0]
 8018f1c:	4623      	mov	r3, r4
 8018f1e:	6868      	ldr	r0, [r5, #4]
 8018f20:	2204      	movs	r2, #4
 8018f22:	9400      	str	r4, [sp, #0]
 8018f24:	f7f0 fa08 	bl	8009338 <lv_obj_align>
    }

    lv_tabview_set_tab_act(tabview, ext->tab_cur, false);
 8018f28:	8aa9      	ldrh	r1, [r5, #20]
 8018f2a:	4638      	mov	r0, r7
 8018f2c:	2200      	movs	r2, #0
}
 8018f2e:	b002      	add	sp, #8
 8018f30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_tabview_set_tab_act(tabview, ext->tab_cur, false);
 8018f34:	f7ff bdfc 	b.w	8018b30 <lv_tabview_set_tab_act>
            lv_obj_set_size(pages, lv_obj_get_width(tabview), lv_obj_get_height(ext->content));
 8018f38:	4638      	mov	r0, r7
 8018f3a:	f7f0 fd5d 	bl	80099f8 <lv_obj_get_width>
 8018f3e:	4680      	mov	r8, r0
 8018f40:	68a8      	ldr	r0, [r5, #8]
 8018f42:	f7f0 fd5f 	bl	8009a04 <lv_obj_get_height>
 8018f46:	4641      	mov	r1, r8
 8018f48:	4602      	mov	r2, r0
 8018f4a:	4620      	mov	r0, r4
 8018f4c:	f7f0 f9ae 	bl	80092ac <lv_obj_set_size>
 8018f50:	e7d8      	b.n	8018f04 <tabview_realign+0x44>
    	lv_obj_set_hidden(ext->btns, true);
 8018f52:	6828      	ldr	r0, [r5, #0]
 8018f54:	2101      	movs	r1, #1
 8018f56:	f7f0 fbaf 	bl	80096b8 <lv_obj_set_hidden>
    	lv_obj_set_hidden(ext->indic, true);
 8018f5a:	2101      	movs	r1, #1
 8018f5c:	6868      	ldr	r0, [r5, #4]
 8018f5e:	f7f0 fbab 	bl	80096b8 <lv_obj_set_hidden>
    	lv_obj_set_height(ext->content, lv_obj_get_height(tabview));
 8018f62:	68ac      	ldr	r4, [r5, #8]
 8018f64:	4638      	mov	r0, r7
 8018f66:	f7f0 fd4d 	bl	8009a04 <lv_obj_get_height>
 8018f6a:	4601      	mov	r1, r0
 8018f6c:	4620      	mov	r0, r4
 8018f6e:	f7f0 f9db 	bl	8009328 <lv_obj_set_height>
    	lv_obj_align(ext->content, NULL, LV_ALIGN_IN_TOP_LEFT, 0, 0);
 8018f72:	2300      	movs	r3, #0
 8018f74:	68a8      	ldr	r0, [r5, #8]
 8018f76:	2201      	movs	r2, #1
 8018f78:	9300      	str	r3, [sp, #0]
 8018f7a:	4619      	mov	r1, r3
 8018f7c:	f7f0 f9dc 	bl	8009338 <lv_obj_align>
 8018f80:	e7b4      	b.n	8018eec <tabview_realign+0x2c>
    	lv_obj_set_hidden(ext->btns, false);
 8018f82:	4621      	mov	r1, r4
 8018f84:	6828      	ldr	r0, [r5, #0]
 8018f86:	f7f0 fb97 	bl	80096b8 <lv_obj_set_hidden>
    	lv_obj_set_hidden(ext->indic, false);
 8018f8a:	4621      	mov	r1, r4
 8018f8c:	6868      	ldr	r0, [r5, #4]
 8018f8e:	f7f0 fb93 	bl	80096b8 <lv_obj_set_hidden>
        lv_style_t * style_btn_bg = lv_tabview_get_style(tabview, LV_TABVIEW_STYLE_BTN_BG);
 8018f92:	2102      	movs	r1, #2
 8018f94:	4638      	mov	r0, r7
 8018f96:	f7ff ff61 	bl	8018e5c <lv_tabview_get_style>
        lv_style_t * style_btn_rel = lv_tabview_get_style(tabview, LV_TABVIEW_STYLE_BTN_REL);
 8018f9a:	2103      	movs	r1, #3
        lv_style_t * style_btn_bg = lv_tabview_get_style(tabview, LV_TABVIEW_STYLE_BTN_BG);
 8018f9c:	4606      	mov	r6, r0
        lv_style_t * style_btn_rel = lv_tabview_get_style(tabview, LV_TABVIEW_STYLE_BTN_REL);
 8018f9e:	4638      	mov	r0, r7
 8018fa0:	f7ff ff5c 	bl	8018e5c <lv_tabview_get_style>
 8018fa4:	4680      	mov	r8, r0
        lv_coord_t indic_width = (lv_obj_get_width(tabview) - style_btn_bg->body.padding.inner * (ext->tab_cnt - 1) -
 8018fa6:	4638      	mov	r0, r7
 8018fa8:	f7f0 fd26 	bl	80099f8 <lv_obj_get_width>
 8018fac:	8aeb      	ldrh	r3, [r5, #22]
 8018fae:	f9b6 1024 	ldrsh.w	r1, [r6, #36]	; 0x24
 8018fb2:	f103 3eff 	add.w	lr, r3, #4294967295
                                  2 * style_btn_bg->body.padding.hor) / ext->tab_cnt;
 8018fb6:	f9b6 2022 	ldrsh.w	r2, [r6, #34]	; 0x22
        lv_coord_t indic_width = (lv_obj_get_width(tabview) - style_btn_bg->body.padding.inner * (ext->tab_cnt - 1) -
 8018fba:	fb0e 0111 	mls	r1, lr, r1, r0
        lv_obj_set_width(ext->indic, indic_width);
 8018fbe:	6868      	ldr	r0, [r5, #4]
        lv_coord_t indic_width = (lv_obj_get_width(tabview) - style_btn_bg->body.padding.inner * (ext->tab_cnt - 1) -
 8018fc0:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
                                  2 * style_btn_bg->body.padding.hor) / ext->tab_cnt;
 8018fc4:	fb91 f1f3 	sdiv	r1, r1, r3
        lv_obj_set_width(ext->indic, indic_width);
 8018fc8:	b209      	sxth	r1, r1
 8018fca:	f7f0 f9a5 	bl	8009318 <lv_obj_set_width>
 8018fce:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
                                 2 * style_btn_rel->body.padding.ver +
 8018fd2:	8c31      	ldrh	r1, [r6, #32]
 8018fd4:	f8b8 3020 	ldrh.w	r3, [r8, #32]
        lv_obj_set_height(ext->btns, btns_height);
 8018fd8:	6828      	ldr	r0, [r5, #0]
                                 2 * style_btn_rel->body.padding.ver +
 8018fda:	440b      	add	r3, r1
        lv_coord_t btns_height = lv_font_get_height(style_btn_rel->text.font) +
 8018fdc:	f892 1020 	ldrb.w	r1, [r2, #32]
                                 2 * style_btn_rel->body.padding.ver +
 8018fe0:	eb01 0143 	add.w	r1, r1, r3, lsl #1
        lv_obj_set_height(ext->btns, btns_height);
 8018fe4:	b209      	sxth	r1, r1
 8018fe6:	f7f0 f99f 	bl	8009328 <lv_obj_set_height>
        lv_obj_set_height(ext->content, lv_obj_get_height(tabview) - lv_obj_get_height(ext->btns));
 8018fea:	4638      	mov	r0, r7
 8018fec:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8018ff0:	f7f0 fd08 	bl	8009a04 <lv_obj_get_height>
 8018ff4:	4606      	mov	r6, r0
 8018ff6:	6828      	ldr	r0, [r5, #0]
 8018ff8:	f7f0 fd04 	bl	8009a04 <lv_obj_get_height>
 8018ffc:	1a31      	subs	r1, r6, r0
 8018ffe:	4640      	mov	r0, r8
 8019000:	b209      	sxth	r1, r1
 8019002:	f7f0 f991 	bl	8009328 <lv_obj_set_height>
        switch(ext->btns_pos) {
 8019006:	7eaa      	ldrb	r2, [r5, #26]
 8019008:	f3c2 1200 	ubfx	r2, r2, #4, #1
 801900c:	b16a      	cbz	r2, 801902a <tabview_realign+0x16a>
				lv_obj_align(ext->content, NULL, LV_ALIGN_IN_TOP_LEFT, 0, 0);
 801900e:	68a8      	ldr	r0, [r5, #8]
 8019010:	4623      	mov	r3, r4
 8019012:	4621      	mov	r1, r4
 8019014:	9400      	str	r4, [sp, #0]
 8019016:	f7f0 f98f 	bl	8009338 <lv_obj_align>
				lv_obj_align(ext->btns, ext->content, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
 801901a:	68a9      	ldr	r1, [r5, #8]
 801901c:	6828      	ldr	r0, [r5, #0]
 801901e:	4623      	mov	r3, r4
 8019020:	9400      	str	r4, [sp, #0]
 8019022:	220c      	movs	r2, #12
 8019024:	f7f0 f988 	bl	8009338 <lv_obj_align>
				break;
 8019028:	e760      	b.n	8018eec <tabview_realign+0x2c>
				lv_obj_align(ext->btns, NULL, LV_ALIGN_IN_TOP_LEFT, 0, 0);
 801902a:	6828      	ldr	r0, [r5, #0]
 801902c:	4623      	mov	r3, r4
 801902e:	4621      	mov	r1, r4
 8019030:	9400      	str	r4, [sp, #0]
 8019032:	2201      	movs	r2, #1
 8019034:	f7f0 f980 	bl	8009338 <lv_obj_align>
				lv_obj_align(ext->content, ext->btns, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
 8019038:	6829      	ldr	r1, [r5, #0]
 801903a:	68a8      	ldr	r0, [r5, #8]
 801903c:	4623      	mov	r3, r4
 801903e:	9400      	str	r4, [sp, #0]
 8019040:	220c      	movs	r2, #12
 8019042:	f7f0 f979 	bl	8009338 <lv_obj_align>
				break;
 8019046:	e751      	b.n	8018eec <tabview_realign+0x2c>
 8019048:	08018d69 	.word	0x08018d69

0801904c <lv_tabview_signal>:
    res = ancestor_signal(tabview, sign, param);
 801904c:	4b41      	ldr	r3, [pc, #260]	; (8019154 <lv_tabview_signal+0x108>)
{
 801904e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = ancestor_signal(tabview, sign, param);
 8019052:	689b      	ldr	r3, [r3, #8]
{
 8019054:	4607      	mov	r7, r0
 8019056:	460c      	mov	r4, r1
 8019058:	4690      	mov	r8, r2
    res = ancestor_signal(tabview, sign, param);
 801905a:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 801905c:	2801      	cmp	r0, #1
    res = ancestor_signal(tabview, sign, param);
 801905e:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 8019060:	d002      	beq.n	8019068 <lv_tabview_signal+0x1c>
}
 8019062:	4628      	mov	r0, r5
 8019064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 8019068:	4638      	mov	r0, r7
 801906a:	f7f0 fdeb 	bl	8009c44 <lv_obj_get_ext_attr>
 801906e:	4606      	mov	r6, r0
    if(sign == LV_SIGNAL_CLEANUP) {
 8019070:	b9ac      	cbnz	r4, 801909e <lv_tabview_signal+0x52>
        for(i = 0; ext->tab_name_ptr[i][0] != '\0'; i++) lv_mem_free(ext->tab_name_ptr[i]);
 8019072:	68c3      	ldr	r3, [r0, #12]
 8019074:	6818      	ldr	r0, [r3, #0]
 8019076:	7802      	ldrb	r2, [r0, #0]
 8019078:	b14a      	cbz	r2, 801908e <lv_tabview_signal+0x42>
 801907a:	3401      	adds	r4, #1
 801907c:	f7f7 f804 	bl	8010088 <lv_mem_free>
 8019080:	68f3      	ldr	r3, [r6, #12]
 8019082:	b2e4      	uxtb	r4, r4
 8019084:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8019088:	7802      	ldrb	r2, [r0, #0]
 801908a:	2a00      	cmp	r2, #0
 801908c:	d1f5      	bne.n	801907a <lv_tabview_signal+0x2e>
        lv_mem_free(ext->tab_name_ptr);
 801908e:	4618      	mov	r0, r3
 8019090:	f7f6 fffa 	bl	8010088 <lv_mem_free>
        ext->tab_name_ptr = NULL;
 8019094:	2300      	movs	r3, #0
 8019096:	60f3      	str	r3, [r6, #12]
        ext->btns = NULL;     /*These objects were children so they are already invalid*/
 8019098:	6033      	str	r3, [r6, #0]
        ext->content = NULL;
 801909a:	60b3      	str	r3, [r6, #8]
 801909c:	e7e1      	b.n	8019062 <lv_tabview_signal+0x16>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 801909e:	2c02      	cmp	r4, #2
 80190a0:	d02c      	beq.n	80190fc <lv_tabview_signal+0xb0>
    } else if(sign == LV_SIGNAL_FOCUS || sign == LV_SIGNAL_DEFOCUS || sign == LV_SIGNAL_CONTROLL) {
 80190a2:	f1a4 0310 	sub.w	r3, r4, #16
 80190a6:	2b02      	cmp	r3, #2
 80190a8:	d817      	bhi.n	80190da <lv_tabview_signal+0x8e>
        if(ext->btns) {
 80190aa:	6800      	ldr	r0, [r0, #0]
 80190ac:	b118      	cbz	r0, 80190b6 <lv_tabview_signal+0x6a>
            ext->btns->signal_func(ext->btns, sign, param);
 80190ae:	4642      	mov	r2, r8
 80190b0:	6983      	ldr	r3, [r0, #24]
 80190b2:	4621      	mov	r1, r4
 80190b4:	4798      	blx	r3
        if(sign == LV_SIGNAL_FOCUS) {
 80190b6:	2c10      	cmp	r4, #16
 80190b8:	d1d3      	bne.n	8019062 <lv_tabview_signal+0x16>
            lv_hal_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 80190ba:	f7ef fdf1 	bl	8008ca0 <lv_indev_get_act>
 80190be:	f7ef fdf5 	bl	8008cac <lv_indev_get_type>
            if(indev_type == LV_INDEV_TYPE_ENCODER) {
 80190c2:	2804      	cmp	r0, #4
 80190c4:	d03d      	beq.n	8019142 <lv_tabview_signal+0xf6>
                lv_btnm_ext_t * btnm_ext = lv_obj_get_ext_attr(ext->btns);
 80190c6:	6830      	ldr	r0, [r6, #0]
 80190c8:	f7f0 fdbc 	bl	8009c44 <lv_obj_get_ext_attr>
                btnm_ext->btn_id_pr = 0;
 80190cc:	2200      	movs	r2, #0
                lv_btnm_ext_t * btnm_ext = lv_obj_get_ext_attr(ext->btns);
 80190ce:	4603      	mov	r3, r0
                lv_obj_invalidate(ext->btns);
 80190d0:	6830      	ldr	r0, [r6, #0]
                btnm_ext->btn_id_pr = 0;
 80190d2:	845a      	strh	r2, [r3, #34]	; 0x22
                lv_obj_invalidate(ext->btns);
 80190d4:	f7ef feb0 	bl	8008e38 <lv_obj_invalidate>
 80190d8:	e7c3      	b.n	8019062 <lv_tabview_signal+0x16>
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 80190da:	2c14      	cmp	r4, #20
 80190dc:	d02e      	beq.n	801913c <lv_tabview_signal+0xf0>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 80190de:	2c06      	cmp	r4, #6
 80190e0:	d1bf      	bne.n	8019062 <lv_tabview_signal+0x16>
 80190e2:	f1a8 0204 	sub.w	r2, r8, #4
 80190e6:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 80190e8:	f852 1f04 	ldr.w	r1, [r2, #4]!
 80190ec:	b111      	cbz	r1, 80190f4 <lv_tabview_signal+0xa8>
 80190ee:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) {  /*Find the last set data*/
 80190f0:	2b07      	cmp	r3, #7
 80190f2:	d1f9      	bne.n	80190e8 <lv_tabview_signal+0x9c>
        buf->type[i] = "lv_tabview";
 80190f4:	4a18      	ldr	r2, [pc, #96]	; (8019158 <lv_tabview_signal+0x10c>)
 80190f6:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
 80190fa:	e7b2      	b.n	8019062 <lv_tabview_signal+0x16>
        if(ext->content != NULL &&
 80190fc:	6883      	ldr	r3, [r0, #8]
 80190fe:	2b00      	cmp	r3, #0
 8019100:	d0af      	beq.n	8019062 <lv_tabview_signal+0x16>
                (lv_obj_get_width(tabview) != lv_area_get_width(param) ||
 8019102:	4638      	mov	r0, r7
 8019104:	f7f0 fc78 	bl	80099f8 <lv_obj_get_width>
    return area_p->x2 - area_p->x1 + 1;
 8019108:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 801910c:	f8b8 2000 	ldrh.w	r2, [r8]
 8019110:	3301      	adds	r3, #1
 8019112:	1a9b      	subs	r3, r3, r2
        if(ext->content != NULL &&
 8019114:	b21b      	sxth	r3, r3
 8019116:	4298      	cmp	r0, r3
 8019118:	d003      	beq.n	8019122 <lv_tabview_signal+0xd6>
            tabview_realign(tabview);
 801911a:	4638      	mov	r0, r7
 801911c:	f7ff fed0 	bl	8018ec0 <tabview_realign>
 8019120:	e79f      	b.n	8019062 <lv_tabview_signal+0x16>
                 lv_obj_get_height(tabview) != lv_area_get_height(param))) {
 8019122:	4638      	mov	r0, r7
 8019124:	f7f0 fc6e 	bl	8009a04 <lv_obj_get_height>
    return area_p->y2 - area_p->y1 + 1;
 8019128:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801912c:	f8b8 2002 	ldrh.w	r2, [r8, #2]
 8019130:	3301      	adds	r3, #1
 8019132:	1a9b      	subs	r3, r3, r2
                (lv_obj_get_width(tabview) != lv_area_get_width(param) ||
 8019134:	b21b      	sxth	r3, r3
 8019136:	4298      	cmp	r0, r3
 8019138:	d1ef      	bne.n	801911a <lv_tabview_signal+0xce>
 801913a:	e792      	b.n	8019062 <lv_tabview_signal+0x16>
        *editable = true;
 801913c:	f888 5000 	strb.w	r5, [r8]
 8019140:	e78f      	b.n	8019062 <lv_tabview_signal+0x16>
                lv_group_t * g = lv_obj_get_group(tabview);
 8019142:	4638      	mov	r0, r7
 8019144:	f7f0 fd80 	bl	8009c48 <lv_obj_get_group>
                if(lv_group_get_editing(g)) {
 8019148:	f7ef f86e 	bl	8008228 <lv_group_get_editing>
 801914c:	2800      	cmp	r0, #0
 801914e:	d088      	beq.n	8019062 <lv_tabview_signal+0x16>
 8019150:	e7b9      	b.n	80190c6 <lv_tabview_signal+0x7a>
 8019152:	bf00      	nop
 8019154:	20017514 	.word	0x20017514
 8019158:	0808bcf4 	.word	0x0808bcf4

0801915c <lv_tabview_add_tab>:
{
 801915c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019160:	4607      	mov	r7, r0
 8019162:	4688      	mov	r8, r1
    lv_tabview_ext_t  * ext = lv_obj_get_ext_attr(tabview);
 8019164:	f7f0 fd6e 	bl	8009c44 <lv_obj_get_ext_attr>
    lv_obj_t * h = lv_page_create(ext->content, NULL);
 8019168:	2100      	movs	r1, #0
    lv_tabview_ext_t  * ext = lv_obj_get_ext_attr(tabview);
 801916a:	4604      	mov	r4, r0
    lv_obj_t * h = lv_page_create(ext->content, NULL);
 801916c:	6880      	ldr	r0, [r0, #8]
 801916e:	f7fd f95b 	bl	8016428 <lv_page_create>
 8019172:	4606      	mov	r6, r0
    lv_obj_set_size(h, lv_obj_get_width(tabview), lv_obj_get_height(ext->content));
 8019174:	4638      	mov	r0, r7
    if(page_signal == NULL) page_signal = lv_obj_get_signal_func(h);
 8019176:	4d56      	ldr	r5, [pc, #344]	; (80192d0 <lv_tabview_add_tab+0x174>)
    lv_obj_set_size(h, lv_obj_get_width(tabview), lv_obj_get_height(ext->content));
 8019178:	f7f0 fc3e 	bl	80099f8 <lv_obj_get_width>
 801917c:	4681      	mov	r9, r0
 801917e:	68a0      	ldr	r0, [r4, #8]
 8019180:	f7f0 fc40 	bl	8009a04 <lv_obj_get_height>
 8019184:	4649      	mov	r1, r9
 8019186:	4602      	mov	r2, r0
 8019188:	4630      	mov	r0, r6
 801918a:	f7f0 f88f 	bl	80092ac <lv_obj_set_size>
    lv_page_set_sb_mode(h, LV_SB_MODE_AUTO);
 801918e:	4630      	mov	r0, r6
 8019190:	2103      	movs	r1, #3
 8019192:	f7fd f8cf 	bl	8016334 <lv_page_set_sb_mode>
    lv_page_set_style(h, LV_PAGE_STYLE_BG, &lv_style_transp);
 8019196:	4630      	mov	r0, r6
 8019198:	4a4e      	ldr	r2, [pc, #312]	; (80192d4 <lv_tabview_add_tab+0x178>)
 801919a:	2100      	movs	r1, #0
 801919c:	f7fd f910 	bl	80163c0 <lv_page_set_style>
    lv_page_set_style(h, LV_PAGE_STYLE_SCRL, &lv_style_transp);
 80191a0:	4630      	mov	r0, r6
 80191a2:	4a4c      	ldr	r2, [pc, #304]	; (80192d4 <lv_tabview_add_tab+0x178>)
 80191a4:	2101      	movs	r1, #1
 80191a6:	f7fd f90b 	bl	80163c0 <lv_page_set_style>
    if(page_signal == NULL) page_signal = lv_obj_get_signal_func(h);
 80191aa:	682b      	ldr	r3, [r5, #0]
 80191ac:	2b00      	cmp	r3, #0
 80191ae:	f000 808a 	beq.w	80192c6 <lv_tabview_add_tab+0x16a>
    if(page_scrl_signal == NULL) page_scrl_signal = lv_obj_get_signal_func(lv_page_get_scrl(h));
 80191b2:	686b      	ldr	r3, [r5, #4]
 80191b4:	2b00      	cmp	r3, #0
 80191b6:	d073      	beq.n	80192a0 <lv_tabview_add_tab+0x144>
    lv_obj_set_signal_func(h, tabpage_signal);
 80191b8:	4947      	ldr	r1, [pc, #284]	; (80192d8 <lv_tabview_add_tab+0x17c>)
 80191ba:	4630      	mov	r0, r6
 80191bc:	f7f0 facc 	bl	8009758 <lv_obj_set_signal_func>
    lv_obj_set_signal_func(lv_page_get_scrl(h), tabpage_scrl_signal);
 80191c0:	4630      	mov	r0, r6
 80191c2:	f7fd fa5b 	bl	801667c <lv_page_get_scrl>
 80191c6:	4945      	ldr	r1, [pc, #276]	; (80192dc <lv_tabview_add_tab+0x180>)
 80191c8:	f7f0 fac6 	bl	8009758 <lv_obj_set_signal_func>
    if((name[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) { /*If control byte presented let is*/
 80191cc:	f898 3000 	ldrb.w	r3, [r8]
        name_dm = lv_mem_alloc(strlen(name) + 1); /*+1 for the the closing '\0' */
 80191d0:	4640      	mov	r0, r8
    if((name[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) { /*If control byte presented let is*/
 80191d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80191d6:	2b80      	cmp	r3, #128	; 0x80
 80191d8:	d056      	beq.n	8019288 <lv_tabview_add_tab+0x12c>
        name_dm = lv_mem_alloc(strlen(name) + 2); /*+1 for the the closing '\0' and +1 for the control byte */
 80191da:	f7e7 f81f 	bl	800021c <strlen>
 80191de:	3002      	adds	r0, #2
 80191e0:	f7f6 ff4a 	bl	8010078 <lv_mem_alloc>
        lv_mem_assert(name_dm);
 80191e4:	4605      	mov	r5, r0
 80191e6:	2800      	cmp	r0, #0
 80191e8:	d04c      	beq.n	8019284 <lv_tabview_add_tab+0x128>
        name_dm[0] = '\221';
 80191ea:	2391      	movs	r3, #145	; 0x91
        strcpy(&name_dm[1], name);
 80191ec:	4641      	mov	r1, r8
        name_dm[0] = '\221';
 80191ee:	f800 3b01 	strb.w	r3, [r0], #1
        strcpy(&name_dm[1], name);
 80191f2:	f000 fa78 	bl	80196e6 <strcpy>
    ext->tab_cnt++;
 80191f6:	8ae3      	ldrh	r3, [r4, #22]
    ext->tab_name_ptr = lv_mem_realloc(ext->tab_name_ptr, sizeof(char *) * (ext->tab_cnt + 1));
 80191f8:	68e0      	ldr	r0, [r4, #12]
    ext->tab_cnt++;
 80191fa:	3301      	adds	r3, #1
 80191fc:	b29b      	uxth	r3, r3
    ext->tab_name_ptr = lv_mem_realloc(ext->tab_name_ptr, sizeof(char *) * (ext->tab_cnt + 1));
 80191fe:	1c59      	adds	r1, r3, #1
    ext->tab_cnt++;
 8019200:	82e3      	strh	r3, [r4, #22]
    ext->tab_name_ptr = lv_mem_realloc(ext->tab_name_ptr, sizeof(char *) * (ext->tab_cnt + 1));
 8019202:	0089      	lsls	r1, r1, #2
 8019204:	f7f6 ff98 	bl	8010138 <lv_mem_realloc>
 8019208:	4603      	mov	r3, r0
 801920a:	60e0      	str	r0, [r4, #12]
    lv_mem_assert(ext->tab_name_ptr);
 801920c:	2800      	cmp	r0, #0
 801920e:	d03a      	beq.n	8019286 <lv_tabview_add_tab+0x12a>
    ext->tab_name_ptr[ext->tab_cnt - 1] = name_dm;
 8019210:	8ae0      	ldrh	r0, [r4, #22]
 8019212:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
    ext->tab_name_ptr[ext->tab_cnt] = "";
 8019216:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 80192e0 <lv_tabview_add_tab+0x184>
    lv_btnm_set_map(ext->btns, ext->tab_name_ptr);
 801921a:	4619      	mov	r1, r3
    ext->tab_name_ptr[ext->tab_cnt - 1] = name_dm;
 801921c:	4402      	add	r2, r0
    lv_btnm_set_map(ext->btns, ext->tab_name_ptr);
 801921e:	6820      	ldr	r0, [r4, #0]
    ext->tab_name_ptr[ext->tab_cnt - 1] = name_dm;
 8019220:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    ext->tab_name_ptr[ext->tab_cnt] = "";
 8019224:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8019228:	f8c3 e004 	str.w	lr, [r3, #4]
    lv_btnm_set_map(ext->btns, ext->tab_name_ptr);
 801922c:	f7f8 fd40 	bl	8011cb0 <lv_btnm_set_map>
    lv_style_t * style_tabs = lv_obj_get_style(ext->btns);
 8019230:	6820      	ldr	r0, [r4, #0]
 8019232:	f7f0 fbed 	bl	8009a10 <lv_obj_get_style>
 8019236:	4680      	mov	r8, r0
    lv_coord_t indic_width = (lv_obj_get_width(tabview) - style_tabs->body.padding.inner * (ext->tab_cnt - 1) - 2 * style_tabs->body.padding.hor) / ext->tab_cnt;
 8019238:	4638      	mov	r0, r7
 801923a:	f7f0 fbdd 	bl	80099f8 <lv_obj_get_width>
 801923e:	8ae3      	ldrh	r3, [r4, #22]
 8019240:	f9b8 5024 	ldrsh.w	r5, [r8, #36]	; 0x24
 8019244:	1e59      	subs	r1, r3, #1
 8019246:	f9b8 2022 	ldrsh.w	r2, [r8, #34]	; 0x22
 801924a:	fb01 0515 	mls	r5, r1, r5, r0
    lv_obj_set_width(ext->indic, indic_width);
 801924e:	6860      	ldr	r0, [r4, #4]
    lv_coord_t indic_width = (lv_obj_get_width(tabview) - style_tabs->body.padding.inner * (ext->tab_cnt - 1) - 2 * style_tabs->body.padding.hor) / ext->tab_cnt;
 8019250:	eba5 0542 	sub.w	r5, r5, r2, lsl #1
 8019254:	fb95 f5f3 	sdiv	r5, r5, r3
 8019258:	b22d      	sxth	r5, r5
    lv_obj_set_width(ext->indic, indic_width);
 801925a:	4629      	mov	r1, r5
 801925c:	f7f0 f85c 	bl	8009318 <lv_obj_set_width>
    lv_obj_set_x(ext->indic, indic_width * ext->tab_cur + style_tabs->body.padding.inner * ext->tab_cur + style_tabs->body.padding.hor);
 8019260:	f9b8 1024 	ldrsh.w	r1, [r8, #36]	; 0x24
 8019264:	f8b8 3022 	ldrh.w	r3, [r8, #34]	; 0x22
 8019268:	440d      	add	r5, r1
 801926a:	8aa1      	ldrh	r1, [r4, #20]
 801926c:	6860      	ldr	r0, [r4, #4]
 801926e:	fb11 3105 	smlabb	r1, r1, r5, r3
 8019272:	b209      	sxth	r1, r1
 8019274:	f7f0 f804 	bl	8009280 <lv_obj_set_x>
    if(ext->tab_cnt == 1) {
 8019278:	8ae3      	ldrh	r3, [r4, #22]
 801927a:	2b01      	cmp	r3, #1
 801927c:	d017      	beq.n	80192ae <lv_tabview_add_tab+0x152>
}
 801927e:	4630      	mov	r0, r6
 8019280:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019284:	e7fe      	b.n	8019284 <lv_tabview_add_tab+0x128>
 8019286:	e7fe      	b.n	8019286 <lv_tabview_add_tab+0x12a>
        name_dm = lv_mem_alloc(strlen(name) + 1); /*+1 for the the closing '\0' */
 8019288:	f7e6 ffc8 	bl	800021c <strlen>
 801928c:	3001      	adds	r0, #1
 801928e:	f7f6 fef3 	bl	8010078 <lv_mem_alloc>
        lv_mem_assert(name_dm);
 8019292:	4605      	mov	r5, r0
 8019294:	b118      	cbz	r0, 801929e <lv_tabview_add_tab+0x142>
        strcpy(name_dm, name);
 8019296:	4641      	mov	r1, r8
 8019298:	f000 fa25 	bl	80196e6 <strcpy>
 801929c:	e7ab      	b.n	80191f6 <lv_tabview_add_tab+0x9a>
 801929e:	e7fe      	b.n	801929e <lv_tabview_add_tab+0x142>
    if(page_scrl_signal == NULL) page_scrl_signal = lv_obj_get_signal_func(lv_page_get_scrl(h));
 80192a0:	4630      	mov	r0, r6
 80192a2:	f7fd f9eb 	bl	801667c <lv_page_get_scrl>
 80192a6:	f7f0 fcc9 	bl	8009c3c <lv_obj_get_signal_func>
 80192aa:	6068      	str	r0, [r5, #4]
 80192ac:	e784      	b.n	80191b8 <lv_tabview_add_tab+0x5c>
        ext->tab_cur = 0;
 80192ae:	2200      	movs	r2, #0
        lv_tabview_set_tab_act(tabview, 0, false);
 80192b0:	4638      	mov	r0, r7
        ext->tab_cur = 0;
 80192b2:	82a2      	strh	r2, [r4, #20]
        lv_tabview_set_tab_act(tabview, 0, false);
 80192b4:	4611      	mov	r1, r2
 80192b6:	f7ff fc3b 	bl	8018b30 <lv_tabview_set_tab_act>
        tabview_realign(tabview);       /*To set the proper btns height*/
 80192ba:	4638      	mov	r0, r7
 80192bc:	f7ff fe00 	bl	8018ec0 <tabview_realign>
}
 80192c0:	4630      	mov	r0, r6
 80192c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(page_signal == NULL) page_signal = lv_obj_get_signal_func(h);
 80192c6:	4630      	mov	r0, r6
 80192c8:	f7f0 fcb8 	bl	8009c3c <lv_obj_get_signal_func>
 80192cc:	6028      	str	r0, [r5, #0]
 80192ce:	e770      	b.n	80191b2 <lv_tabview_add_tab+0x56>
 80192d0:	20017514 	.word	0x20017514
 80192d4:	20017c88 	.word	0x20017c88
 80192d8:	08018d69 	.word	0x08018d69
 80192dc:	08018dc5 	.word	0x08018dc5
 80192e0:	0808ba74 	.word	0x0808ba74

080192e4 <lv_tabview_set_style>:
{
 80192e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192e6:	460c      	mov	r4, r1
 80192e8:	4615      	mov	r5, r2
 80192ea:	4607      	mov	r7, r0
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 80192ec:	f7f0 fcaa 	bl	8009c44 <lv_obj_get_ext_attr>
 80192f0:	4606      	mov	r6, r0
    switch(type) {
 80192f2:	2c06      	cmp	r4, #6
 80192f4:	d842      	bhi.n	801937c <lv_tabview_set_style+0x98>
 80192f6:	e8df f004 	tbb	[pc, r4]
 80192fa:	110b      	.short	0x110b
 80192fc:	3a33291f 	.word	0x3a33291f
 8019300:	04          	.byte	0x04
 8019301:	00          	.byte	0x00
            lv_btnm_set_style(ext->btns, LV_BTNM_STYLE_BTN_TGL_PR, style);
 8019302:	462a      	mov	r2, r5
 8019304:	6800      	ldr	r0, [r0, #0]
 8019306:	2104      	movs	r1, #4
}
 8019308:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_btnm_set_style(ext->btns, LV_BTNM_STYLE_BTN_TGL_PR, style);
 801930c:	f7f9 b896 	b.w	801243c <lv_btnm_set_style>
            lv_obj_set_style(tabview, style);
 8019310:	4629      	mov	r1, r5
 8019312:	4638      	mov	r0, r7
}
 8019314:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_obj_set_style(tabview, style);
 8019318:	f7f0 baec 	b.w	80098f4 <lv_obj_set_style>
            lv_obj_set_style(ext->indic, style);
 801931c:	4629      	mov	r1, r5
 801931e:	6840      	ldr	r0, [r0, #4]
 8019320:	f7f0 fae8 	bl	80098f4 <lv_obj_set_style>
            lv_obj_set_height(ext->indic, style->body.padding.inner);
 8019324:	6870      	ldr	r0, [r6, #4]
 8019326:	f9b5 1024 	ldrsh.w	r1, [r5, #36]	; 0x24
 801932a:	f7ef fffd 	bl	8009328 <lv_obj_set_height>
            tabview_realign(tabview);
 801932e:	4638      	mov	r0, r7
}
 8019330:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            tabview_realign(tabview);
 8019334:	f7ff bdc4 	b.w	8018ec0 <tabview_realign>
            lv_btnm_set_style(ext->btns, LV_BTNM_STYLE_BG, style);
 8019338:	462a      	mov	r2, r5
 801933a:	6800      	ldr	r0, [r0, #0]
 801933c:	2100      	movs	r1, #0
 801933e:	f7f9 f87d 	bl	801243c <lv_btnm_set_style>
            tabview_realign(tabview);
 8019342:	4638      	mov	r0, r7
}
 8019344:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            tabview_realign(tabview);
 8019348:	f7ff bdba 	b.w	8018ec0 <tabview_realign>
            lv_btnm_set_style(ext->btns, LV_BTNM_STYLE_BTN_REL, style);
 801934c:	462a      	mov	r2, r5
 801934e:	6800      	ldr	r0, [r0, #0]
 8019350:	2101      	movs	r1, #1
 8019352:	f7f9 f873 	bl	801243c <lv_btnm_set_style>
            tabview_realign(tabview);
 8019356:	4638      	mov	r0, r7
}
 8019358:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            tabview_realign(tabview);
 801935c:	f7ff bdb0 	b.w	8018ec0 <tabview_realign>
            lv_btnm_set_style(ext->btns, LV_BTNM_STYLE_BTN_PR, style);
 8019360:	462a      	mov	r2, r5
 8019362:	6800      	ldr	r0, [r0, #0]
 8019364:	2102      	movs	r1, #2
}
 8019366:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_btnm_set_style(ext->btns, LV_BTNM_STYLE_BTN_PR, style);
 801936a:	f7f9 b867 	b.w	801243c <lv_btnm_set_style>
            lv_btnm_set_style(ext->btns, LV_BTNM_STYLE_BTN_TGL_REL, style);
 801936e:	462a      	mov	r2, r5
 8019370:	6800      	ldr	r0, [r0, #0]
 8019372:	2103      	movs	r1, #3
}
 8019374:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_btnm_set_style(ext->btns, LV_BTNM_STYLE_BTN_TGL_REL, style);
 8019378:	f7f9 b860 	b.w	801243c <lv_btnm_set_style>
 801937c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801937e:	bf00      	nop

08019380 <lv_tabview_create>:
{
 8019380:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019384:	b083      	sub	sp, #12
 8019386:	460f      	mov	r7, r1
    lv_obj_t * new_tabview = lv_obj_create(par, copy);
 8019388:	f7ef fe4e 	bl	8009028 <lv_obj_create>
    lv_mem_assert(new_tabview);
 801938c:	2800      	cmp	r0, #0
 801938e:	f000 808b 	beq.w	80194a8 <lv_tabview_create+0x128>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_tabview);
 8019392:	4c98      	ldr	r4, [pc, #608]	; (80195f4 <lv_tabview_create+0x274>)
 8019394:	4605      	mov	r5, r0
 8019396:	68a3      	ldr	r3, [r4, #8]
 8019398:	2b00      	cmp	r3, #0
 801939a:	f000 8115 	beq.w	80195c8 <lv_tabview_create+0x248>
    lv_tabview_ext_t * ext = lv_obj_allocate_ext_attr(new_tabview, sizeof(lv_tabview_ext_t));
 801939e:	2120      	movs	r1, #32
 80193a0:	4628      	mov	r0, r5
 80193a2:	f7f0 f9dd 	bl	8009760 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 80193a6:	4604      	mov	r4, r0
 80193a8:	2800      	cmp	r0, #0
 80193aa:	d07b      	beq.n	80194a4 <lv_tabview_create+0x124>
    ext->drag_hor = 0;
 80193ac:	7e83      	ldrb	r3, [r0, #26]
    ext->tab_cur = 0;
 80193ae:	2600      	movs	r6, #0
    ext->anim_time = LV_TABVIEW_ANIM_TIME;
 80193b0:	f44f 7296 	mov.w	r2, #300	; 0x12c
    lv_obj_set_signal_func(new_tabview, lv_tabview_signal);
 80193b4:	4990      	ldr	r1, [pc, #576]	; (80195f8 <lv_tabview_create+0x278>)
    ext->slide_enable = 1;
 80193b6:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
    ext->tab_cur = 0;
 80193ba:	8286      	strh	r6, [r0, #20]
    ext->point_last.x = 0;
 80193bc:	8206      	strh	r6, [r0, #16]
    lv_obj_set_signal_func(new_tabview, lv_tabview_signal);
 80193be:	4628      	mov	r0, r5
    ext->btns_pos = LV_TABVIEW_BTNS_POS_TOP;
 80193c0:	f043 0301 	orr.w	r3, r3, #1
    ext->point_last.y = 0;
 80193c4:	8266      	strh	r6, [r4, #18]
    ext->content = NULL;
 80193c6:	60a6      	str	r6, [r4, #8]
    ext->btns_hide = 0;
 80193c8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    ext->indic = NULL;
 80193cc:	6066      	str	r6, [r4, #4]
    ext->btns = NULL;
 80193ce:	6026      	str	r6, [r4, #0]
    ext->btns_hide = 0;
 80193d0:	f366 03c3 	bfi	r3, r6, #3, #1
    ext->tab_load_action = NULL;
 80193d4:	61e6      	str	r6, [r4, #28]
    ext->anim_time = LV_TABVIEW_ANIM_TIME;
 80193d6:	8322      	strh	r2, [r4, #24]
    ext->btns_hide = 0;
 80193d8:	76a3      	strb	r3, [r4, #26]
    lv_obj_set_signal_func(new_tabview, lv_tabview_signal);
 80193da:	f7f0 f9bd 	bl	8009758 <lv_obj_set_signal_func>
    if(copy == NULL) {
 80193de:	2f00      	cmp	r7, #0
 80193e0:	d063      	beq.n	80194aa <lv_tabview_create+0x12a>
        lv_tabview_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 80193e2:	4638      	mov	r0, r7
 80193e4:	f7f0 fc2e 	bl	8009c44 <lv_obj_get_ext_attr>
 80193e8:	4680      	mov	r8, r0
        ext->point_last.x = 0;
 80193ea:	8226      	strh	r6, [r4, #16]
        ext->btns = lv_btnm_create(new_tabview, copy_ext->btns);
 80193ec:	4628      	mov	r0, r5
 80193ee:	f8d8 1000 	ldr.w	r1, [r8]
        ext->point_last.y = 0;
 80193f2:	8266      	strh	r6, [r4, #18]
        ext->btns = lv_btnm_create(new_tabview, copy_ext->btns);
 80193f4:	f7f9 f854 	bl	80124a0 <lv_btnm_create>
        ext->indic = lv_obj_create(ext->btns, copy_ext->indic);
 80193f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
        ext->btns = lv_btnm_create(new_tabview, copy_ext->btns);
 80193fc:	6020      	str	r0, [r4, #0]
        ext->indic = lv_obj_create(ext->btns, copy_ext->indic);
 80193fe:	f7ef fe13 	bl	8009028 <lv_obj_create>
        ext->content = lv_cont_create(new_tabview, copy_ext->content);
 8019402:	f8d8 1008 	ldr.w	r1, [r8, #8]
        ext->indic = lv_obj_create(ext->btns, copy_ext->indic);
 8019406:	6060      	str	r0, [r4, #4]
        ext->content = lv_cont_create(new_tabview, copy_ext->content);
 8019408:	4628      	mov	r0, r5
 801940a:	f7fa fa85 	bl	8013918 <lv_cont_create>
        ext->tab_load_action = copy_ext->tab_load_action;
 801940e:	f8d8 301c 	ldr.w	r3, [r8, #28]
        ext->anim_time = copy_ext->anim_time;
 8019412:	f8b8 2018 	ldrh.w	r2, [r8, #24]
        ext->content = lv_cont_create(new_tabview, copy_ext->content);
 8019416:	60a0      	str	r0, [r4, #8]
        ext->tab_name_ptr = lv_mem_alloc(sizeof(char *));
 8019418:	2004      	movs	r0, #4
        ext->tab_load_action = copy_ext->tab_load_action;
 801941a:	61e3      	str	r3, [r4, #28]
        ext->anim_time = copy_ext->anim_time;
 801941c:	8322      	strh	r2, [r4, #24]
        ext->tab_name_ptr = lv_mem_alloc(sizeof(char *));
 801941e:	f7f6 fe2b 	bl	8010078 <lv_mem_alloc>
 8019422:	4603      	mov	r3, r0
 8019424:	60e0      	str	r0, [r4, #12]
        lv_mem_assert(ext->tab_name_ptr);
 8019426:	2800      	cmp	r0, #0
 8019428:	d03d      	beq.n	80194a6 <lv_tabview_create+0x126>
        ext->tab_name_ptr[0] = "";
 801942a:	4a74      	ldr	r2, [pc, #464]	; (80195fc <lv_tabview_create+0x27c>)
        lv_btnm_set_map(ext->btns, ext->tab_name_ptr);
 801942c:	4601      	mov	r1, r0
 801942e:	6820      	ldr	r0, [r4, #0]
        ext->tab_name_ptr[0] = "";
 8019430:	601a      	str	r2, [r3, #0]
        lv_btnm_set_map(ext->btns, ext->tab_name_ptr);
 8019432:	f7f8 fc3d 	bl	8011cb0 <lv_btnm_set_map>
        for(i = 0; i < copy_ext->tab_cnt; i++) {
 8019436:	f8b8 3016 	ldrh.w	r3, [r8, #22]
 801943a:	b363      	cbz	r3, 8019496 <lv_tabview_create+0x116>
            new_tab = lv_tabview_add_tab(new_tabview, copy_ext->tab_name_ptr[i]);
 801943c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019440:	4628      	mov	r0, r5
 8019442:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8019446:	f7ff fe89 	bl	801915c <lv_tabview_add_tab>
            copy_tab = lv_tabview_get_tab(copy, i);
 801944a:	4631      	mov	r1, r6
            new_tab = lv_tabview_add_tab(new_tabview, copy_ext->tab_name_ptr[i]);
 801944c:	4604      	mov	r4, r0
            copy_tab = lv_tabview_get_tab(copy, i);
 801944e:	4638      	mov	r0, r7
 8019450:	f7ff fce8 	bl	8018e24 <lv_tabview_get_tab>
            lv_page_set_style(new_tab, LV_PAGE_STYLE_BG, lv_page_get_style(copy_tab, LV_PAGE_STYLE_BG));
 8019454:	2100      	movs	r1, #0
            copy_tab = lv_tabview_get_tab(copy, i);
 8019456:	4681      	mov	r9, r0
            lv_page_set_style(new_tab, LV_PAGE_STYLE_BG, lv_page_get_style(copy_tab, LV_PAGE_STYLE_BG));
 8019458:	f7fd f91e 	bl	8016698 <lv_page_get_style>
 801945c:	2100      	movs	r1, #0
 801945e:	4602      	mov	r2, r0
 8019460:	4620      	mov	r0, r4
        for(i = 0; i < copy_ext->tab_cnt; i++) {
 8019462:	3601      	adds	r6, #1
            lv_page_set_style(new_tab, LV_PAGE_STYLE_BG, lv_page_get_style(copy_tab, LV_PAGE_STYLE_BG));
 8019464:	f7fc ffac 	bl	80163c0 <lv_page_set_style>
            lv_page_set_style(new_tab, LV_PAGE_STYLE_SCRL, lv_page_get_style(copy_tab, LV_PAGE_STYLE_SCRL));
 8019468:	2101      	movs	r1, #1
 801946a:	4648      	mov	r0, r9
        for(i = 0; i < copy_ext->tab_cnt; i++) {
 801946c:	b2b6      	uxth	r6, r6
            lv_page_set_style(new_tab, LV_PAGE_STYLE_SCRL, lv_page_get_style(copy_tab, LV_PAGE_STYLE_SCRL));
 801946e:	f7fd f913 	bl	8016698 <lv_page_get_style>
 8019472:	2101      	movs	r1, #1
 8019474:	4602      	mov	r2, r0
 8019476:	4620      	mov	r0, r4
 8019478:	f7fc ffa2 	bl	80163c0 <lv_page_set_style>
            lv_page_set_style(new_tab, LV_PAGE_STYLE_SB, lv_page_get_style(copy_tab, LV_PAGE_STYLE_SB));
 801947c:	2102      	movs	r1, #2
 801947e:	4648      	mov	r0, r9
 8019480:	f7fd f90a 	bl	8016698 <lv_page_get_style>
 8019484:	2102      	movs	r1, #2
 8019486:	4602      	mov	r2, r0
 8019488:	4620      	mov	r0, r4
 801948a:	f7fc ff99 	bl	80163c0 <lv_page_set_style>
        for(i = 0; i < copy_ext->tab_cnt; i++) {
 801948e:	f8b8 3016 	ldrh.w	r3, [r8, #22]
 8019492:	42b3      	cmp	r3, r6
 8019494:	d8d2      	bhi.n	801943c <lv_tabview_create+0xbc>
        lv_obj_refresh_style(new_tabview);
 8019496:	4628      	mov	r0, r5
 8019498:	f7f0 f900 	bl	800969c <lv_obj_refresh_style>
}
 801949c:	4628      	mov	r0, r5
 801949e:	b003      	add	sp, #12
 80194a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80194a4:	e7fe      	b.n	80194a4 <lv_tabview_create+0x124>
 80194a6:	e7fe      	b.n	80194a6 <lv_tabview_create+0x126>
 80194a8:	e7fe      	b.n	80194a8 <lv_tabview_create+0x128>
        ext->tab_name_ptr = lv_mem_alloc(sizeof(char *));
 80194aa:	2004      	movs	r0, #4
 80194ac:	f7f6 fde4 	bl	8010078 <lv_mem_alloc>
 80194b0:	4603      	mov	r3, r0
 80194b2:	60e0      	str	r0, [r4, #12]
        lv_mem_assert(ext->tab_name_ptr);
 80194b4:	2800      	cmp	r0, #0
 80194b6:	f000 8086 	beq.w	80195c6 <lv_tabview_create+0x246>
        ext->tab_name_ptr[0] = "";
 80194ba:	4e50      	ldr	r6, [pc, #320]	; (80195fc <lv_tabview_create+0x27c>)
        lv_obj_set_size(new_tabview, LV_HOR_RES, LV_VER_RES);
 80194bc:	f44f 7288 	mov.w	r2, #272	; 0x110
 80194c0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80194c4:	4628      	mov	r0, r5
        ext->tab_name_ptr[0] = "";
 80194c6:	601e      	str	r6, [r3, #0]
        ext->tab_cnt = 0;
 80194c8:	82e7      	strh	r7, [r4, #22]
        lv_obj_set_size(new_tabview, LV_HOR_RES, LV_VER_RES);
 80194ca:	f7ef feef 	bl	80092ac <lv_obj_set_size>
        ext->btns = lv_btnm_create(new_tabview, NULL);
 80194ce:	4639      	mov	r1, r7
 80194d0:	4628      	mov	r0, r5
 80194d2:	f7f8 ffe5 	bl	80124a0 <lv_btnm_create>
        lv_obj_set_height(ext->btns, 3 * LV_DPI / 4);
 80194d6:	214b      	movs	r1, #75	; 0x4b
        ext->btns = lv_btnm_create(new_tabview, NULL);
 80194d8:	6020      	str	r0, [r4, #0]
        lv_obj_set_height(ext->btns, 3 * LV_DPI / 4);
 80194da:	f7ef ff25 	bl	8009328 <lv_obj_set_height>
        lv_btnm_set_map(ext->btns, tab_def);
 80194de:	6820      	ldr	r0, [r4, #0]
 80194e0:	4947      	ldr	r1, [pc, #284]	; (8019600 <lv_tabview_create+0x280>)
 80194e2:	f7f8 fbe5 	bl	8011cb0 <lv_btnm_set_map>
        lv_btnm_set_action(ext->btns, tab_btnm_action);
 80194e6:	6820      	ldr	r0, [r4, #0]
 80194e8:	4946      	ldr	r1, [pc, #280]	; (8019604 <lv_tabview_create+0x284>)
 80194ea:	f7f8 ff7f 	bl	80123ec <lv_btnm_set_action>
        lv_btnm_set_toggle(ext->btns, true, 0);
 80194ee:	463a      	mov	r2, r7
 80194f0:	6820      	ldr	r0, [r4, #0]
 80194f2:	2101      	movs	r1, #1
 80194f4:	f7f8 ff80 	bl	80123f8 <lv_btnm_set_toggle>
        ext->indic = lv_obj_create(ext->btns, NULL);
 80194f8:	4639      	mov	r1, r7
 80194fa:	6820      	ldr	r0, [r4, #0]
 80194fc:	f7ef fd94 	bl	8009028 <lv_obj_create>
        lv_obj_set_width(ext->indic, LV_DPI);
 8019500:	2164      	movs	r1, #100	; 0x64
        ext->indic = lv_obj_create(ext->btns, NULL);
 8019502:	6060      	str	r0, [r4, #4]
        lv_obj_set_width(ext->indic, LV_DPI);
 8019504:	f7ef ff08 	bl	8009318 <lv_obj_set_width>
        lv_obj_align(ext->indic, ext->btns, LV_ALIGN_IN_BOTTOM_LEFT, 0, 0);
 8019508:	463b      	mov	r3, r7
 801950a:	6821      	ldr	r1, [r4, #0]
 801950c:	2204      	movs	r2, #4
 801950e:	6860      	ldr	r0, [r4, #4]
 8019510:	9700      	str	r7, [sp, #0]
 8019512:	f7ef ff11 	bl	8009338 <lv_obj_align>
        lv_obj_set_click(ext->indic, false);
 8019516:	6860      	ldr	r0, [r4, #4]
 8019518:	4639      	mov	r1, r7
 801951a:	f7f0 f8e9 	bl	80096f0 <lv_obj_set_click>
        ext->content = lv_cont_create(new_tabview, NULL);
 801951e:	4639      	mov	r1, r7
 8019520:	4628      	mov	r0, r5
 8019522:	f7fa f9f9 	bl	8013918 <lv_cont_create>
        lv_cont_set_fit(ext->content, true, false);
 8019526:	463a      	mov	r2, r7
        ext->content = lv_cont_create(new_tabview, NULL);
 8019528:	60a0      	str	r0, [r4, #8]
        lv_cont_set_fit(ext->content, true, false);
 801952a:	2101      	movs	r1, #1
 801952c:	f7fa fa68 	bl	8013a00 <lv_cont_set_fit>
        lv_cont_set_layout(ext->content, LV_LAYOUT_ROW_T);
 8019530:	68a0      	ldr	r0, [r4, #8]
 8019532:	2105      	movs	r1, #5
 8019534:	f7fa fa4a 	bl	80139cc <lv_cont_set_layout>
 * @param cont pointer to a container object
 * @param style pointer to the new style
 */
static inline void lv_cont_set_style(lv_obj_t *cont, lv_style_t * style)
{
    lv_obj_set_style(cont, style);
 8019538:	4933      	ldr	r1, [pc, #204]	; (8019608 <lv_tabview_create+0x288>)
 801953a:	68a0      	ldr	r0, [r4, #8]
 801953c:	f7f0 f9da 	bl	80098f4 <lv_obj_set_style>
        lv_obj_set_height(ext->content, LV_VER_RES - lv_obj_get_height(ext->btns));
 8019540:	6820      	ldr	r0, [r4, #0]
 8019542:	68a6      	ldr	r6, [r4, #8]
 8019544:	f7f0 fa5e 	bl	8009a04 <lv_obj_get_height>
 8019548:	f5c0 7188 	rsb	r1, r0, #272	; 0x110
 801954c:	4630      	mov	r0, r6
 801954e:	b209      	sxth	r1, r1
 8019550:	f7ef feea 	bl	8009328 <lv_obj_set_height>
        lv_obj_align(ext->content, ext->btns, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
 8019554:	6821      	ldr	r1, [r4, #0]
 8019556:	68a0      	ldr	r0, [r4, #8]
 8019558:	463b      	mov	r3, r7
 801955a:	220c      	movs	r2, #12
 801955c:	9700      	str	r7, [sp, #0]
 801955e:	f7ef feeb 	bl	8009338 <lv_obj_align>
        lv_theme_t * th = lv_theme_get_current();
 8019562:	f000 f859 	bl	8019618 <lv_theme_get_current>
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_BG, th->tabview.bg);
 8019566:	4639      	mov	r1, r7
        if(th) {
 8019568:	4604      	mov	r4, r0
 801956a:	b388      	cbz	r0, 80195d0 <lv_tabview_create+0x250>
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_BG, th->tabview.bg);
 801956c:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
 8019570:	4628      	mov	r0, r5
 8019572:	f7ff feb7 	bl	80192e4 <lv_tabview_set_style>
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_INDIC, th->tabview.indic);
 8019576:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
 801957a:	4628      	mov	r0, r5
 801957c:	2101      	movs	r1, #1
 801957e:	f7ff feb1 	bl	80192e4 <lv_tabview_set_style>
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_BTN_BG, th->tabview.btn.bg);
 8019582:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
 8019586:	4628      	mov	r0, r5
 8019588:	2102      	movs	r1, #2
 801958a:	f7ff feab 	bl	80192e4 <lv_tabview_set_style>
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_BTN_REL, th->tabview.btn.rel);
 801958e:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8019592:	4628      	mov	r0, r5
 8019594:	2103      	movs	r1, #3
 8019596:	f7ff fea5 	bl	80192e4 <lv_tabview_set_style>
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_BTN_PR, th->tabview.btn.pr);
 801959a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 801959e:	4628      	mov	r0, r5
 80195a0:	2104      	movs	r1, #4
 80195a2:	f7ff fe9f 	bl	80192e4 <lv_tabview_set_style>
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_BTN_TGL_REL, th->tabview.btn.tgl_rel);
 80195a6:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 80195aa:	4628      	mov	r0, r5
 80195ac:	2105      	movs	r1, #5
 80195ae:	f7ff fe99 	bl	80192e4 <lv_tabview_set_style>
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_BTN_TGL_PR, th->tabview.btn.tgl_pr);
 80195b2:	4628      	mov	r0, r5
 80195b4:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
 80195b8:	2106      	movs	r1, #6
 80195ba:	f7ff fe93 	bl	80192e4 <lv_tabview_set_style>
}
 80195be:	4628      	mov	r0, r5
 80195c0:	b003      	add	sp, #12
 80195c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80195c6:	e7fe      	b.n	80195c6 <lv_tabview_create+0x246>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_tabview);
 80195c8:	f7f0 fb38 	bl	8009c3c <lv_obj_get_signal_func>
 80195cc:	60a0      	str	r0, [r4, #8]
 80195ce:	e6e6      	b.n	801939e <lv_tabview_create+0x1e>
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_BG, &lv_style_plain);
 80195d0:	4628      	mov	r0, r5
 80195d2:	4a0e      	ldr	r2, [pc, #56]	; (801960c <lv_tabview_create+0x28c>)
 80195d4:	f7ff fe86 	bl	80192e4 <lv_tabview_set_style>
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_BTN_BG, &lv_style_transp);
 80195d8:	4628      	mov	r0, r5
 80195da:	4a0d      	ldr	r2, [pc, #52]	; (8019610 <lv_tabview_create+0x290>)
 80195dc:	2102      	movs	r1, #2
 80195de:	f7ff fe81 	bl	80192e4 <lv_tabview_set_style>
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_INDIC, &lv_style_plain_color);
 80195e2:	4628      	mov	r0, r5
 80195e4:	4a0b      	ldr	r2, [pc, #44]	; (8019614 <lv_tabview_create+0x294>)
 80195e6:	2101      	movs	r1, #1
 80195e8:	f7ff fe7c 	bl	80192e4 <lv_tabview_set_style>
}
 80195ec:	4628      	mov	r0, r5
 80195ee:	b003      	add	sp, #12
 80195f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80195f4:	20017514 	.word	0x20017514
 80195f8:	0801904d 	.word	0x0801904d
 80195fc:	0808ba74 	.word	0x0808ba74
 8019600:	2000034c 	.word	0x2000034c
 8019604:	08018c65 	.word	0x08018c65
 8019608:	20017da8 	.word	0x20017da8
 801960c:	20017e80 	.word	0x20017e80
 8019610:	20017c88 	.word	0x20017c88
 8019614:	20017fa0 	.word	0x20017fa0

08019618 <lv_theme_get_current>:
 * @return pointer to the current system theme. NULL if not set.
 */
lv_theme_t * lv_theme_get_current(void)
{
#if LV_THEME_LIVE_UPDATE == 0
    return current_theme;
 8019618:	4b01      	ldr	r3, [pc, #4]	; (8019620 <lv_theme_get_current+0x8>)
#else
    if(!inited) return NULL;
    else return &current_theme;
#endif
}
 801961a:	6818      	ldr	r0, [r3, #0]
 801961c:	4770      	bx	lr
 801961e:	bf00      	nop
 8019620:	20017520 	.word	0x20017520

08019624 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8019624:	f8df d034 	ldr.w	sp, [pc, #52]	; 801965c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8019628:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801962a:	e003      	b.n	8019634 <LoopCopyDataInit>

0801962c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 801962c:	4b0c      	ldr	r3, [pc, #48]	; (8019660 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801962e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8019630:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8019632:	3104      	adds	r1, #4

08019634 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8019634:	480b      	ldr	r0, [pc, #44]	; (8019664 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8019636:	4b0c      	ldr	r3, [pc, #48]	; (8019668 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8019638:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801963a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 801963c:	d3f6      	bcc.n	801962c <CopyDataInit>
  ldr  r2, =_sbss
 801963e:	4a0b      	ldr	r2, [pc, #44]	; (801966c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8019640:	e002      	b.n	8019648 <LoopFillZerobss>

08019642 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8019642:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8019644:	f842 3b04 	str.w	r3, [r2], #4

08019648 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8019648:	4b09      	ldr	r3, [pc, #36]	; (8019670 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 801964a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 801964c:	d3f9      	bcc.n	8019642 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 801964e:	f7e8 faed 	bl	8001c2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8019652:	f000 f811 	bl	8019678 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8019656:	f7e6 ffeb 	bl	8000630 <main>
  bx  lr    
 801965a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 801965c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8019660:	0808bd10 	.word	0x0808bd10
  ldr  r0, =_sdata
 8019664:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8019668:	20000350 	.word	0x20000350
  ldr  r2, =_sbss
 801966c:	20000350 	.word	0x20000350
  ldr  r3, = _ebss
 8019670:	20018040 	.word	0x20018040

08019674 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8019674:	e7fe      	b.n	8019674 <ADC_IRQHandler>
	...

08019678 <__libc_init_array>:
 8019678:	b570      	push	{r4, r5, r6, lr}
 801967a:	4e0d      	ldr	r6, [pc, #52]	; (80196b0 <__libc_init_array+0x38>)
 801967c:	4c0d      	ldr	r4, [pc, #52]	; (80196b4 <__libc_init_array+0x3c>)
 801967e:	1ba4      	subs	r4, r4, r6
 8019680:	10a4      	asrs	r4, r4, #2
 8019682:	2500      	movs	r5, #0
 8019684:	42a5      	cmp	r5, r4
 8019686:	d109      	bne.n	801969c <__libc_init_array+0x24>
 8019688:	4e0b      	ldr	r6, [pc, #44]	; (80196b8 <__libc_init_array+0x40>)
 801968a:	4c0c      	ldr	r4, [pc, #48]	; (80196bc <__libc_init_array+0x44>)
 801968c:	f000 f834 	bl	80196f8 <_init>
 8019690:	1ba4      	subs	r4, r4, r6
 8019692:	10a4      	asrs	r4, r4, #2
 8019694:	2500      	movs	r5, #0
 8019696:	42a5      	cmp	r5, r4
 8019698:	d105      	bne.n	80196a6 <__libc_init_array+0x2e>
 801969a:	bd70      	pop	{r4, r5, r6, pc}
 801969c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80196a0:	4798      	blx	r3
 80196a2:	3501      	adds	r5, #1
 80196a4:	e7ee      	b.n	8019684 <__libc_init_array+0xc>
 80196a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80196aa:	4798      	blx	r3
 80196ac:	3501      	adds	r5, #1
 80196ae:	e7f2      	b.n	8019696 <__libc_init_array+0x1e>
 80196b0:	0808bd08 	.word	0x0808bd08
 80196b4:	0808bd08 	.word	0x0808bd08
 80196b8:	0808bd08 	.word	0x0808bd08
 80196bc:	0808bd0c 	.word	0x0808bd0c

080196c0 <memcpy>:
 80196c0:	b510      	push	{r4, lr}
 80196c2:	1e43      	subs	r3, r0, #1
 80196c4:	440a      	add	r2, r1
 80196c6:	4291      	cmp	r1, r2
 80196c8:	d100      	bne.n	80196cc <memcpy+0xc>
 80196ca:	bd10      	pop	{r4, pc}
 80196cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80196d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80196d4:	e7f7      	b.n	80196c6 <memcpy+0x6>

080196d6 <memset>:
 80196d6:	4402      	add	r2, r0
 80196d8:	4603      	mov	r3, r0
 80196da:	4293      	cmp	r3, r2
 80196dc:	d100      	bne.n	80196e0 <memset+0xa>
 80196de:	4770      	bx	lr
 80196e0:	f803 1b01 	strb.w	r1, [r3], #1
 80196e4:	e7f9      	b.n	80196da <memset+0x4>

080196e6 <strcpy>:
 80196e6:	4603      	mov	r3, r0
 80196e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80196ec:	f803 2b01 	strb.w	r2, [r3], #1
 80196f0:	2a00      	cmp	r2, #0
 80196f2:	d1f9      	bne.n	80196e8 <strcpy+0x2>
 80196f4:	4770      	bx	lr
	...

080196f8 <_init>:
 80196f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196fa:	bf00      	nop
 80196fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80196fe:	bc08      	pop	{r3}
 8019700:	469e      	mov	lr, r3
 8019702:	4770      	bx	lr

08019704 <_fini>:
 8019704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019706:	bf00      	nop
 8019708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801970a:	bc08      	pop	{r3}
 801970c:	469e      	mov	lr, r3
 801970e:	4770      	bx	lr
