
stm32f746_disco_no_os.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d864  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000a9ab8  0801da2c  0801da2c  0002da2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080c74e4  080c74e4  000d74e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080c74ec  080c74ec  000d74ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080c74f0  080c74f0  000d74f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000580  20000000  080c74f4  000e0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00018f7c  20000580  080c7a74  000e0580  2**3
                  ALLOC
  8 ._user_heap_stack 00001800  200194fc  080c7a74  000e94fc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000e0580  2**0
                  CONTENTS, READONLY
 10 .debug_info   000b861c  00000000  00000000  000e05b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00012736  00000000  00000000  00198bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0005a281  00000000  00000000  001ab302  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00003290  00000000  00000000  00205588  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 0000f1d0  00000000  00000000  00208818  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00038c3f  00000000  00000000  002179e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00049e15  00000000  00000000  00250627  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00115c53  00000000  00000000  0029a43c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  003b008f  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000b0ac  00000000  00000000  003b010c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000580 	.word	0x20000580
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0801da14 	.word	0x0801da14

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000584 	.word	0x20000584
 8000204:	0801da14 	.word	0x0801da14

08000208 <strcmp>:
 8000208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000210:	2a01      	cmp	r2, #1
 8000212:	bf28      	it	cs
 8000214:	429a      	cmpcs	r2, r3
 8000216:	d0f7      	beq.n	8000208 <strcmp>
 8000218:	1ad0      	subs	r0, r2, r3
 800021a:	4770      	bx	lr

0800021c <strlen>:
 800021c:	4603      	mov	r3, r0
 800021e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000222:	2a00      	cmp	r2, #0
 8000224:	d1fb      	bne.n	800021e <strlen+0x2>
 8000226:	1a18      	subs	r0, r3, r0
 8000228:	3801      	subs	r0, #1
 800022a:	4770      	bx	lr

0800022c <__aeabi_uldivmod>:
 800022c:	b953      	cbnz	r3, 8000244 <__aeabi_uldivmod+0x18>
 800022e:	b94a      	cbnz	r2, 8000244 <__aeabi_uldivmod+0x18>
 8000230:	2900      	cmp	r1, #0
 8000232:	bf08      	it	eq
 8000234:	2800      	cmpeq	r0, #0
 8000236:	bf1c      	itt	ne
 8000238:	f04f 31ff 	movne.w	r1, #4294967295
 800023c:	f04f 30ff 	movne.w	r0, #4294967295
 8000240:	f000 b97a 	b.w	8000538 <__aeabi_idiv0>
 8000244:	f1ad 0c08 	sub.w	ip, sp, #8
 8000248:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000254:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000258:	b004      	add	sp, #16
 800025a:	4770      	bx	lr

0800025c <__udivmoddi4>:
 800025c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000260:	468c      	mov	ip, r1
 8000262:	460d      	mov	r5, r1
 8000264:	4604      	mov	r4, r0
 8000266:	9e08      	ldr	r6, [sp, #32]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d151      	bne.n	8000310 <__udivmoddi4+0xb4>
 800026c:	428a      	cmp	r2, r1
 800026e:	4617      	mov	r7, r2
 8000270:	d96d      	bls.n	800034e <__udivmoddi4+0xf2>
 8000272:	fab2 fe82 	clz	lr, r2
 8000276:	f1be 0f00 	cmp.w	lr, #0
 800027a:	d00b      	beq.n	8000294 <__udivmoddi4+0x38>
 800027c:	f1ce 0c20 	rsb	ip, lr, #32
 8000280:	fa01 f50e 	lsl.w	r5, r1, lr
 8000284:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000288:	fa02 f70e 	lsl.w	r7, r2, lr
 800028c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000290:	fa00 f40e 	lsl.w	r4, r0, lr
 8000294:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000298:	0c25      	lsrs	r5, r4, #16
 800029a:	fbbc f8fa 	udiv	r8, ip, sl
 800029e:	fa1f f987 	uxth.w	r9, r7
 80002a2:	fb0a cc18 	mls	ip, sl, r8, ip
 80002a6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002aa:	fb08 f309 	mul.w	r3, r8, r9
 80002ae:	42ab      	cmp	r3, r5
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x6c>
 80002b2:	19ed      	adds	r5, r5, r7
 80002b4:	f108 32ff 	add.w	r2, r8, #4294967295
 80002b8:	f080 8123 	bcs.w	8000502 <__udivmoddi4+0x2a6>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	f240 8120 	bls.w	8000502 <__udivmoddi4+0x2a6>
 80002c2:	f1a8 0802 	sub.w	r8, r8, #2
 80002c6:	443d      	add	r5, r7
 80002c8:	1aed      	subs	r5, r5, r3
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb5 f0fa 	udiv	r0, r5, sl
 80002d0:	fb0a 5510 	mls	r5, sl, r0, r5
 80002d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002d8:	fb00 f909 	mul.w	r9, r0, r9
 80002dc:	45a1      	cmp	r9, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x98>
 80002e0:	19e4      	adds	r4, r4, r7
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 810a 	bcs.w	80004fe <__udivmoddi4+0x2a2>
 80002ea:	45a1      	cmp	r9, r4
 80002ec:	f240 8107 	bls.w	80004fe <__udivmoddi4+0x2a2>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	eba4 0409 	sub.w	r4, r4, r9
 80002f8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002fc:	2100      	movs	r1, #0
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d061      	beq.n	80003c6 <__udivmoddi4+0x16a>
 8000302:	fa24 f40e 	lsr.w	r4, r4, lr
 8000306:	2300      	movs	r3, #0
 8000308:	6034      	str	r4, [r6, #0]
 800030a:	6073      	str	r3, [r6, #4]
 800030c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xc8>
 8000314:	2e00      	cmp	r6, #0
 8000316:	d054      	beq.n	80003c2 <__udivmoddi4+0x166>
 8000318:	2100      	movs	r1, #0
 800031a:	e886 0021 	stmia.w	r6, {r0, r5}
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	f040 808e 	bne.w	800044a <__udivmoddi4+0x1ee>
 800032e:	42ab      	cmp	r3, r5
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xdc>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2d0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb65 0503 	sbc.w	r5, r5, r3
 800033e:	2001      	movs	r0, #1
 8000340:	46ac      	mov	ip, r5
 8000342:	2e00      	cmp	r6, #0
 8000344:	d03f      	beq.n	80003c6 <__udivmoddi4+0x16a>
 8000346:	e886 1010 	stmia.w	r6, {r4, ip}
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	b912      	cbnz	r2, 8000356 <__udivmoddi4+0xfa>
 8000350:	2701      	movs	r7, #1
 8000352:	fbb7 f7f2 	udiv	r7, r7, r2
 8000356:	fab7 fe87 	clz	lr, r7
 800035a:	f1be 0f00 	cmp.w	lr, #0
 800035e:	d134      	bne.n	80003ca <__udivmoddi4+0x16e>
 8000360:	1beb      	subs	r3, r5, r7
 8000362:	0c3a      	lsrs	r2, r7, #16
 8000364:	fa1f fc87 	uxth.w	ip, r7
 8000368:	2101      	movs	r1, #1
 800036a:	fbb3 f8f2 	udiv	r8, r3, r2
 800036e:	0c25      	lsrs	r5, r4, #16
 8000370:	fb02 3318 	mls	r3, r2, r8, r3
 8000374:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000378:	fb0c f308 	mul.w	r3, ip, r8
 800037c:	42ab      	cmp	r3, r5
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x134>
 8000380:	19ed      	adds	r5, r5, r7
 8000382:	f108 30ff 	add.w	r0, r8, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x132>
 8000388:	42ab      	cmp	r3, r5
 800038a:	f200 80d1 	bhi.w	8000530 <__udivmoddi4+0x2d4>
 800038e:	4680      	mov	r8, r0
 8000390:	1aed      	subs	r5, r5, r3
 8000392:	b2a3      	uxth	r3, r4
 8000394:	fbb5 f0f2 	udiv	r0, r5, r2
 8000398:	fb02 5510 	mls	r5, r2, r0, r5
 800039c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003a0:	fb0c fc00 	mul.w	ip, ip, r0
 80003a4:	45a4      	cmp	ip, r4
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0x15c>
 80003a8:	19e4      	adds	r4, r4, r7
 80003aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x15a>
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	f200 80b8 	bhi.w	8000526 <__udivmoddi4+0x2ca>
 80003b6:	4618      	mov	r0, r3
 80003b8:	eba4 040c 	sub.w	r4, r4, ip
 80003bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003c0:	e79d      	b.n	80002fe <__udivmoddi4+0xa2>
 80003c2:	4631      	mov	r1, r6
 80003c4:	4630      	mov	r0, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	f1ce 0420 	rsb	r4, lr, #32
 80003ce:	fa05 f30e 	lsl.w	r3, r5, lr
 80003d2:	fa07 f70e 	lsl.w	r7, r7, lr
 80003d6:	fa20 f804 	lsr.w	r8, r0, r4
 80003da:	0c3a      	lsrs	r2, r7, #16
 80003dc:	fa25 f404 	lsr.w	r4, r5, r4
 80003e0:	ea48 0803 	orr.w	r8, r8, r3
 80003e4:	fbb4 f1f2 	udiv	r1, r4, r2
 80003e8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003ec:	fb02 4411 	mls	r4, r2, r1, r4
 80003f0:	fa1f fc87 	uxth.w	ip, r7
 80003f4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003f8:	fb01 f30c 	mul.w	r3, r1, ip
 80003fc:	42ab      	cmp	r3, r5
 80003fe:	fa00 f40e 	lsl.w	r4, r0, lr
 8000402:	d909      	bls.n	8000418 <__udivmoddi4+0x1bc>
 8000404:	19ed      	adds	r5, r5, r7
 8000406:	f101 30ff 	add.w	r0, r1, #4294967295
 800040a:	f080 808a 	bcs.w	8000522 <__udivmoddi4+0x2c6>
 800040e:	42ab      	cmp	r3, r5
 8000410:	f240 8087 	bls.w	8000522 <__udivmoddi4+0x2c6>
 8000414:	3902      	subs	r1, #2
 8000416:	443d      	add	r5, r7
 8000418:	1aeb      	subs	r3, r5, r3
 800041a:	fa1f f588 	uxth.w	r5, r8
 800041e:	fbb3 f0f2 	udiv	r0, r3, r2
 8000422:	fb02 3310 	mls	r3, r2, r0, r3
 8000426:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800042a:	fb00 f30c 	mul.w	r3, r0, ip
 800042e:	42ab      	cmp	r3, r5
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1e6>
 8000432:	19ed      	adds	r5, r5, r7
 8000434:	f100 38ff 	add.w	r8, r0, #4294967295
 8000438:	d26f      	bcs.n	800051a <__udivmoddi4+0x2be>
 800043a:	42ab      	cmp	r3, r5
 800043c:	d96d      	bls.n	800051a <__udivmoddi4+0x2be>
 800043e:	3802      	subs	r0, #2
 8000440:	443d      	add	r5, r7
 8000442:	1aeb      	subs	r3, r5, r3
 8000444:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000448:	e78f      	b.n	800036a <__udivmoddi4+0x10e>
 800044a:	f1c1 0720 	rsb	r7, r1, #32
 800044e:	fa22 f807 	lsr.w	r8, r2, r7
 8000452:	408b      	lsls	r3, r1
 8000454:	fa05 f401 	lsl.w	r4, r5, r1
 8000458:	ea48 0303 	orr.w	r3, r8, r3
 800045c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000460:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000464:	40fd      	lsrs	r5, r7
 8000466:	ea4e 0e04 	orr.w	lr, lr, r4
 800046a:	fbb5 f9fc 	udiv	r9, r5, ip
 800046e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000472:	fb0c 5519 	mls	r5, ip, r9, r5
 8000476:	fa1f f883 	uxth.w	r8, r3
 800047a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800047e:	fb09 f408 	mul.w	r4, r9, r8
 8000482:	42ac      	cmp	r4, r5
 8000484:	fa02 f201 	lsl.w	r2, r2, r1
 8000488:	fa00 fa01 	lsl.w	sl, r0, r1
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x244>
 800048e:	18ed      	adds	r5, r5, r3
 8000490:	f109 30ff 	add.w	r0, r9, #4294967295
 8000494:	d243      	bcs.n	800051e <__udivmoddi4+0x2c2>
 8000496:	42ac      	cmp	r4, r5
 8000498:	d941      	bls.n	800051e <__udivmoddi4+0x2c2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	441d      	add	r5, r3
 80004a0:	1b2d      	subs	r5, r5, r4
 80004a2:	fa1f fe8e 	uxth.w	lr, lr
 80004a6:	fbb5 f0fc 	udiv	r0, r5, ip
 80004aa:	fb0c 5510 	mls	r5, ip, r0, r5
 80004ae:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004b2:	fb00 f808 	mul.w	r8, r0, r8
 80004b6:	45a0      	cmp	r8, r4
 80004b8:	d907      	bls.n	80004ca <__udivmoddi4+0x26e>
 80004ba:	18e4      	adds	r4, r4, r3
 80004bc:	f100 35ff 	add.w	r5, r0, #4294967295
 80004c0:	d229      	bcs.n	8000516 <__udivmoddi4+0x2ba>
 80004c2:	45a0      	cmp	r8, r4
 80004c4:	d927      	bls.n	8000516 <__udivmoddi4+0x2ba>
 80004c6:	3802      	subs	r0, #2
 80004c8:	441c      	add	r4, r3
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	eba4 0408 	sub.w	r4, r4, r8
 80004d2:	fba0 8902 	umull	r8, r9, r0, r2
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c6      	mov	lr, r8
 80004da:	464d      	mov	r5, r9
 80004dc:	d315      	bcc.n	800050a <__udivmoddi4+0x2ae>
 80004de:	d012      	beq.n	8000506 <__udivmoddi4+0x2aa>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x29c>
 80004e2:	ebba 030e 	subs.w	r3, sl, lr
 80004e6:	eb64 0405 	sbc.w	r4, r4, r5
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40cb      	lsrs	r3, r1
 80004f0:	431f      	orrs	r7, r3
 80004f2:	40cc      	lsrs	r4, r1
 80004f4:	6037      	str	r7, [r6, #0]
 80004f6:	6074      	str	r4, [r6, #4]
 80004f8:	2100      	movs	r1, #0
 80004fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fe:	4618      	mov	r0, r3
 8000500:	e6f8      	b.n	80002f4 <__udivmoddi4+0x98>
 8000502:	4690      	mov	r8, r2
 8000504:	e6e0      	b.n	80002c8 <__udivmoddi4+0x6c>
 8000506:	45c2      	cmp	sl, r8
 8000508:	d2ea      	bcs.n	80004e0 <__udivmoddi4+0x284>
 800050a:	ebb8 0e02 	subs.w	lr, r8, r2
 800050e:	eb69 0503 	sbc.w	r5, r9, r3
 8000512:	3801      	subs	r0, #1
 8000514:	e7e4      	b.n	80004e0 <__udivmoddi4+0x284>
 8000516:	4628      	mov	r0, r5
 8000518:	e7d7      	b.n	80004ca <__udivmoddi4+0x26e>
 800051a:	4640      	mov	r0, r8
 800051c:	e791      	b.n	8000442 <__udivmoddi4+0x1e6>
 800051e:	4681      	mov	r9, r0
 8000520:	e7be      	b.n	80004a0 <__udivmoddi4+0x244>
 8000522:	4601      	mov	r1, r0
 8000524:	e778      	b.n	8000418 <__udivmoddi4+0x1bc>
 8000526:	3802      	subs	r0, #2
 8000528:	443c      	add	r4, r7
 800052a:	e745      	b.n	80003b8 <__udivmoddi4+0x15c>
 800052c:	4608      	mov	r0, r1
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xe6>
 8000530:	f1a8 0802 	sub.w	r8, r8, #2
 8000534:	443d      	add	r5, r7
 8000536:	e72b      	b.n	8000390 <__udivmoddi4+0x134>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053e:	2400      	movs	r4, #0
{
 8000540:	b0b5      	sub	sp, #212	; 0xd4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	2230      	movs	r2, #48	; 0x30
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000544:	2502      	movs	r5, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	4621      	mov	r1, r4
 8000548:	a807      	add	r0, sp, #28
 800054a:	f01d fa52 	bl	801d9f2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800054e:	4621      	mov	r1, r4
 8000550:	2284      	movs	r2, #132	; 0x84
 8000552:	a813      	add	r0, sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	9402      	str	r4, [sp, #8]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000556:	2601      	movs	r6, #1
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	9403      	str	r4, [sp, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800055a:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055e:	9404      	str	r4, [sp, #16]
 8000560:	9405      	str	r4, [sp, #20]
 8000562:	9406      	str	r4, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000564:	f01d fa45 	bl	801d9f2 <memset>
  HAL_PWR_EnableBkUpAccess();
 8000568:	f003 f852 	bl	8003610 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 800056c:	4a2d      	ldr	r2, [pc, #180]	; (8000624 <SystemClock_Config+0xe8>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056e:	4b2e      	ldr	r3, [pc, #184]	; (8000628 <SystemClock_Config+0xec>)
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000570:	f44f 0c80 	mov.w	ip, #4194304	; 0x400000
  __HAL_RCC_PWR_CLK_ENABLE();
 8000574:	6c11      	ldr	r1, [r2, #64]	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000576:	f04f 0e09 	mov.w	lr, #9
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 400;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 8;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057a:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000580:	6411      	str	r1, [r2, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000582:	2119      	movs	r1, #25
  __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000586:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800058a:	9200      	str	r2, [sp, #0]
 800058c:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000594:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000596:	f44f 72c8 	mov.w	r2, #400	; 0x190
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059a:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059c:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80005a4:	f8cd e01c 	str.w	lr, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005a8:	910f      	str	r1, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005aa:	9301      	str	r3, [sp, #4]
 80005ac:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80005ae:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLN = 400;
 80005b0:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80005b2:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b4:	9708      	str	r7, [sp, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005b6:	960c      	str	r6, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b8:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ba:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005bc:	f003 f8de 	bl	800377c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005c0:	f003 f82e 	bl	8003620 <HAL_PWREx_EnableOverDrive>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	f04f 0e0f 	mov.w	lr, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005c8:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80005d0:	a802      	add	r0, sp, #8
 80005d2:	2106      	movs	r1, #6
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d4:	f8cd e008 	str.w	lr, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d8:	9205      	str	r2, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005da:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005dc:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80005e0:	f003 faa2 	bl	8003b28 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 80005e4:	f8df c044 	ldr.w	ip, [pc, #68]	; 800062c <SystemClock_Config+0xf0>
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80005e8:	f04f 0ec0 	mov.w	lr, #192	; 0xc0
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80005ec:	2105      	movs	r1, #5
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
  PeriphClkInitStruct.PLLSAIDivQ = 1;
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80005ee:	f44f 7200 	mov.w	r2, #512	; 0x200
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80005f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005f6:	a813      	add	r0, sp, #76	; 0x4c
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80005f8:	9519      	str	r5, [sp, #100]	; 0x64
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 80005fa:	961b      	str	r6, [sp, #108]	; 0x6c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80005fc:	961d      	str	r6, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80005fe:	971e      	str	r7, [sp, #120]	; 0x78
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000600:	9423      	str	r4, [sp, #140]	; 0x8c
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000602:	9424      	str	r4, [sp, #144]	; 0x90
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000604:	9429      	str	r4, [sp, #164]	; 0xa4
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000606:	942c      	str	r4, [sp, #176]	; 0xb0
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000608:	942e      	str	r4, [sp, #184]	; 0xb8
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800060a:	9433      	str	r4, [sp, #204]	; 0xcc
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 800060c:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000610:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000614:	911a      	str	r1, [sp, #104]	; 0x68
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000616:	921f      	str	r2, [sp, #124]	; 0x7c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000618:	9332      	str	r3, [sp, #200]	; 0xc8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800061a:	f003 fbc5 	bl	8003da8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800061e:	b035      	add	sp, #212	; 0xd4
 8000620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000622:	bf00      	nop
 8000624:	40023800 	.word	0x40023800
 8000628:	40007000 	.word	0x40007000
 800062c:	00b14868 	.word	0x00b14868

08000630 <main>:
{
 8000630:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000634:	b0a9      	sub	sp, #164	; 0xa4
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	2400      	movs	r4, #0
  HAL_Init();
 8000638:	f001 fac2 	bl	8001bc0 <HAL_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800063c:	f04f 0910 	mov.w	r9, #16
  SystemClock_Config();
 8000640:	f7ff ff7c 	bl	800053c <SystemClock_Config>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000644:	4baa      	ldr	r3, [pc, #680]	; (80008f0 <main+0x2c0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000646:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000648:	f04f 0b02 	mov.w	fp, #2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064c:	941a      	str	r4, [sp, #104]	; 0x68
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800064e:	2201      	movs	r2, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000652:	2120      	movs	r1, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000656:	4692      	mov	sl, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	941e      	str	r4, [sp, #120]	; 0x78
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800065a:	270b      	movs	r7, #11
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800065c:	6b1e      	ldr	r6, [r3, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800065e:	250a      	movs	r5, #10
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000660:	48a4      	ldr	r0, [pc, #656]	; (80008f4 <main+0x2c4>)
  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000662:	f04f 0805 	mov.w	r8, #5
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000666:	f046 0610 	orr.w	r6, r6, #16
 800066a:	631e      	str	r6, [r3, #48]	; 0x30
 800066c:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 800066e:	ea06 0609 	and.w	r6, r6, r9
 8000672:	9600      	str	r6, [sp, #0]
 8000674:	9e00      	ldr	r6, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000676:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8000678:	f046 0640 	orr.w	r6, r6, #64	; 0x40
 800067c:	631e      	str	r6, [r3, #48]	; 0x30
 800067e:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8000680:	f006 0640 	and.w	r6, r6, #64	; 0x40
 8000684:	9601      	str	r6, [sp, #4]
 8000686:	9e01      	ldr	r6, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000688:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 800068a:	ea46 060b 	orr.w	r6, r6, fp
 800068e:	631e      	str	r6, [r3, #48]	; 0x30
 8000690:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8000692:	ea06 060b 	and.w	r6, r6, fp
 8000696:	9602      	str	r6, [sp, #8]
 8000698:	9e02      	ldr	r6, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800069a:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 800069c:	f046 0608 	orr.w	r6, r6, #8
 80006a0:	631e      	str	r6, [r3, #48]	; 0x30
 80006a2:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80006a4:	f006 0608 	and.w	r6, r6, #8
 80006a8:	9603      	str	r6, [sp, #12]
 80006aa:	9e03      	ldr	r6, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ac:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80006ae:	f046 0604 	orr.w	r6, r6, #4
 80006b2:	631e      	str	r6, [r3, #48]	; 0x30
 80006b4:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80006b6:	f006 0604 	and.w	r6, r6, #4
 80006ba:	9604      	str	r6, [sp, #16]
 80006bc:	9e04      	ldr	r6, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80006c0:	4316      	orrs	r6, r2
 80006c2:	631e      	str	r6, [r3, #48]	; 0x30
 80006c4:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80006c6:	4016      	ands	r6, r2
 80006c8:	9605      	str	r6, [sp, #20]
 80006ca:	9e05      	ldr	r6, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80006cc:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80006ce:	f446 7600 	orr.w	r6, r6, #512	; 0x200
 80006d2:	631e      	str	r6, [r3, #48]	; 0x30
 80006d4:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80006d6:	f406 7600 	and.w	r6, r6, #512	; 0x200
 80006da:	9606      	str	r6, [sp, #24]
 80006dc:	9e06      	ldr	r6, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80006de:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80006e0:	f446 7680 	orr.w	r6, r6, #256	; 0x100
 80006e4:	631e      	str	r6, [r3, #48]	; 0x30
 80006e6:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80006e8:	f406 7680 	and.w	r6, r6, #256	; 0x100
 80006ec:	9607      	str	r6, [sp, #28]
 80006ee:	9e07      	ldr	r6, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80006f0:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80006f2:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
 80006f6:	631e      	str	r6, [r3, #48]	; 0x30
 80006f8:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80006fa:	f406 6680 	and.w	r6, r6, #1024	; 0x400
 80006fe:	9608      	str	r6, [sp, #32]
 8000700:	9e08      	ldr	r6, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000702:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8000704:	430e      	orrs	r6, r1
 8000706:	631e      	str	r6, [r3, #48]	; 0x30
 8000708:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 800070a:	400e      	ands	r6, r1
 800070c:	9609      	str	r6, [sp, #36]	; 0x24
 800070e:	9e09      	ldr	r6, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000710:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8000712:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 8000716:	631e      	str	r6, [r3, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000718:	2604      	movs	r6, #4
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000720:	930a      	str	r3, [sp, #40]	; 0x28
 8000722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000724:	f002 fa18 	bl	8002b58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8000728:	4622      	mov	r2, r4
 800072a:	210c      	movs	r1, #12
 800072c:	4872      	ldr	r0, [pc, #456]	; (80008f8 <main+0x2c8>)
 800072e:	f002 fa13 	bl	8002b58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8000732:	4652      	mov	r2, sl
 8000734:	2108      	movs	r1, #8
 8000736:	4871      	ldr	r0, [pc, #452]	; (80008fc <main+0x2cc>)
 8000738:	f002 fa0e 	bl	8002b58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800073c:	4652      	mov	r2, sl
 800073e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000742:	486d      	ldr	r0, [pc, #436]	; (80008f8 <main+0x2c8>)
 8000744:	f002 fa08 	bl	8002b58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000748:	4622      	mov	r2, r4
 800074a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800074e:	486c      	ldr	r0, [pc, #432]	; (8000900 <main+0x2d0>)
 8000750:	f002 fa02 	bl	8002b58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000754:	4622      	mov	r2, r4
 8000756:	21c8      	movs	r1, #200	; 0xc8
 8000758:	486a      	ldr	r0, [pc, #424]	; (8000904 <main+0x2d4>)
 800075a:	f002 f9fd 	bl	8002b58 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800075e:	2308      	movs	r3, #8
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000760:	a91a      	add	r1, sp, #104	; 0x68
 8000762:	4869      	ldr	r0, [pc, #420]	; (8000908 <main+0x2d8>)
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000764:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000766:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800076a:	f002 f807 	bl	800277c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800076e:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000772:	a91a      	add	r1, sp, #104	; 0x68
 8000774:	4863      	ldr	r0, [pc, #396]	; (8000904 <main+0x2d4>)
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000776:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000778:	2303      	movs	r3, #3
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800077a:	971e      	str	r7, [sp, #120]	; 0x78
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077c:	931d      	str	r3, [sp, #116]	; 0x74
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000780:	f8cd b06c 	str.w	fp, [sp, #108]	; 0x6c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000784:	f001 fffa 	bl	800277c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8000788:	f643 4323 	movw	r3, #15395	; 0x3c23
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078c:	2203      	movs	r2, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078e:	a91a      	add	r1, sp, #104	; 0x68
 8000790:	485e      	ldr	r0, [pc, #376]	; (800090c <main+0x2dc>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000792:	921d      	str	r2, [sp, #116]	; 0x74
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8000794:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000796:	951e      	str	r5, [sp, #120]	; 0x78
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000798:	f8cd b06c 	str.w	fp, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079e:	f001 ffed 	bl	800277c <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80007a2:	2208      	movs	r2, #8
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80007a4:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80007a6:	a91a      	add	r1, sp, #104	; 0x68
 80007a8:	4852      	ldr	r0, [pc, #328]	; (80008f4 <main+0x2c4>)
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80007aa:	921e      	str	r2, [sp, #120]	; 0x78
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80007ac:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ae:	f8cd b06c 	str.w	fp, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80007b6:	f001 ffe1 	bl	800277c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80007ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80007be:	a91a      	add	r1, sp, #104	; 0x68
 80007c0:	4853      	ldr	r0, [pc, #332]	; (8000910 <main+0x2e0>)
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80007c2:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c4:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80007c8:	f001 ffd8 	bl	800277c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80007cc:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80007ce:	a91a      	add	r1, sp, #104	; 0x68
 80007d0:	4848      	ldr	r0, [pc, #288]	; (80008f4 <main+0x2c4>)
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80007d2:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007d4:	4b4f      	ldr	r3, [pc, #316]	; (8000914 <main+0x2e4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007d8:	931b      	str	r3, [sp, #108]	; 0x6c
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80007da:	f001 ffcf 	bl	800277c <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007de:	2203      	movs	r2, #3
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80007e0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e4:	a91a      	add	r1, sp, #104	; 0x68
 80007e6:	484c      	ldr	r0, [pc, #304]	; (8000918 <main+0x2e8>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e8:	921d      	str	r2, [sp, #116]	; 0x74
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80007ea:	951e      	str	r5, [sp, #120]	; 0x78
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80007ec:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ee:	f8cd b06c 	str.w	fp, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f4:	f001 ffc2 	bl	800277c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007f8:	2320      	movs	r3, #32
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007fa:	a91a      	add	r1, sp, #104	; 0x68
 80007fc:	483d      	ldr	r0, [pc, #244]	; (80008f4 <main+0x2c4>)
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007fe:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	f8cd a06c 	str.w	sl, [sp, #108]	; 0x6c
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000808:	f001 ffb8 	bl	800277c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800080c:	f241 030c 	movw	r3, #4108	; 0x100c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000810:	a91a      	add	r1, sp, #104	; 0x68
 8000812:	4839      	ldr	r0, [pc, #228]	; (80008f8 <main+0x2c8>)
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000814:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	f8cd a06c 	str.w	sl, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800081e:	f001 ffad 	bl	800277c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000822:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000826:	a91a      	add	r1, sp, #104	; 0x68
 8000828:	483c      	ldr	r0, [pc, #240]	; (800091c <main+0x2ec>)
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800082a:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800082c:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000830:	f001 ffa4 	bl	800277c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000834:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000836:	a91a      	add	r1, sp, #104	; 0x68
 8000838:	4830      	ldr	r0, [pc, #192]	; (80008fc <main+0x2cc>)
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800083a:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083c:	f8cd a06c 	str.w	sl, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000844:	f001 ff9a 	bl	800277c <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000848:	a91a      	add	r1, sp, #104	; 0x68
 800084a:	482a      	ldr	r0, [pc, #168]	; (80008f4 <main+0x2c4>)
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800084c:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000850:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000854:	f001 ff92 	bl	800277c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000858:	f248 0304 	movw	r3, #32772	; 0x8004
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800085c:	a91a      	add	r1, sp, #104	; 0x68
 800085e:	4828      	ldr	r0, [pc, #160]	; (8000900 <main+0x2d0>)
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000860:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000862:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000866:	f001 ff89 	bl	800277c <HAL_GPIO_Init>
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800086a:	a91a      	add	r1, sp, #104	; 0x68
 800086c:	4822      	ldr	r0, [pc, #136]	; (80008f8 <main+0x2c8>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800086e:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000872:	f8cd b068 	str.w	fp, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000876:	f8cd b06c 	str.w	fp, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800087e:	f001 ff7d 	bl	800277c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000882:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000886:	a91a      	add	r1, sp, #104	; 0x68
 8000888:	481d      	ldr	r0, [pc, #116]	; (8000900 <main+0x2d0>)
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800088a:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088c:	f8cd a06c 	str.w	sl, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000894:	f001 ff72 	bl	800277c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000898:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800089a:	a91a      	add	r1, sp, #104	; 0x68
 800089c:	4816      	ldr	r0, [pc, #88]	; (80008f8 <main+0x2c8>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800089e:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80008a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80008a6:	931a      	str	r3, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80008a8:	f001 ff68 	bl	800277c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008ac:	4b19      	ldr	r3, [pc, #100]	; (8000914 <main+0x2e4>)
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80008ae:	a91a      	add	r1, sp, #104	; 0x68
 80008b0:	4811      	ldr	r0, [pc, #68]	; (80008f8 <main+0x2c8>)
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008b2:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80008b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80008ba:	931a      	str	r3, [sp, #104]	; 0x68
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f001 ff5e 	bl	800277c <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c0:	2303      	movs	r3, #3
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80008c2:	a91a      	add	r1, sp, #104	; 0x68
 80008c4:	480e      	ldr	r0, [pc, #56]	; (8000900 <main+0x2d0>)
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80008c6:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ca:	931d      	str	r3, [sp, #116]	; 0x74
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80008cc:	951e      	str	r5, [sp, #120]	; 0x78
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	f8cd b06c 	str.w	fp, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f001 ff52 	bl	800277c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80008d8:	23c8      	movs	r3, #200	; 0xc8
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008da:	a91a      	add	r1, sp, #104	; 0x68
 80008dc:	4809      	ldr	r0, [pc, #36]	; (8000904 <main+0x2d4>)
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80008de:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	f8cd a06c 	str.w	sl, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008e8:	f001 ff48 	bl	800277c <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ec:	2303      	movs	r3, #3
 80008ee:	e017      	b.n	8000920 <main+0x2f0>
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40020c00 	.word	0x40020c00
 80008f8:	40022000 	.word	0x40022000
 80008fc:	40022800 	.word	0x40022800
 8000900:	40021c00 	.word	0x40021c00
 8000904:	40021800 	.word	0x40021800
 8000908:	40021000 	.word	0x40021000
 800090c:	40020400 	.word	0x40020400
 8000910:	40022400 	.word	0x40022400
 8000914:	10120000 	.word	0x10120000
 8000918:	40020000 	.word	0x40020000
 800091c:	40020800 	.word	0x40020800
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000920:	a91a      	add	r1, sp, #104	; 0x68
 8000922:	48ae      	ldr	r0, [pc, #696]	; (8000bdc <main+0x5ac>)
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000924:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000928:	931d      	str	r3, [sp, #116]	; 0x74
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800092a:	951e      	str	r5, [sp, #120]	; 0x78
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	f8cd b06c 	str.w	fp, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000932:	f001 ff23 	bl	800277c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000936:	2332      	movs	r3, #50	; 0x32
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000938:	2203      	movs	r2, #3
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800093a:	a91a      	add	r1, sp, #104	; 0x68
 800093c:	48a7      	ldr	r0, [pc, #668]	; (8000bdc <main+0x5ac>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093e:	921d      	str	r2, [sp, #116]	; 0x74
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000940:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000942:	971e      	str	r7, [sp, #120]	; 0x78
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	f8cd b06c 	str.w	fp, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800094a:	f001 ff17 	bl	800277c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800094e:	a91a      	add	r1, sp, #104	; 0x68
 8000950:	48a3      	ldr	r0, [pc, #652]	; (8000be0 <main+0x5b0>)
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000952:	961a      	str	r6, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000954:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000958:	f001 ff10 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095c:	2203      	movs	r2, #3
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800095e:	2386      	movs	r3, #134	; 0x86
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000960:	a91a      	add	r1, sp, #104	; 0x68
 8000962:	48a0      	ldr	r0, [pc, #640]	; (8000be4 <main+0x5b4>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000964:	921d      	str	r2, [sp, #116]	; 0x74
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000966:	971e      	str	r7, [sp, #120]	; 0x78
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000968:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	f8cd b06c 	str.w	fp, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000970:	f001 ff04 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000974:	2303      	movs	r3, #3
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000976:	a91a      	add	r1, sp, #104	; 0x68
 8000978:	489a      	ldr	r0, [pc, #616]	; (8000be4 <main+0x5b4>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097a:	931d      	str	r3, [sp, #116]	; 0x74
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800097c:	2328      	movs	r3, #40	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800097e:	951e      	str	r5, [sp, #120]	; 0x78
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000980:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	f8cd b06c 	str.w	fp, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000988:	f001 fef8 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800098c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  hadc3.Instance = ADC3;
 8000990:	4d95      	ldr	r5, [pc, #596]	; (8000be8 <main+0x5b8>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000992:	a91a      	add	r1, sp, #104	; 0x68
 8000994:	4895      	ldr	r0, [pc, #596]	; (8000bec <main+0x5bc>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000996:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
  pLayerCfg.WindowX0 = 0;
 800099a:	f04f 0800 	mov.w	r8, #0
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800099e:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a0:	f8cd b06c 	str.w	fp, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a8:	f001 fee8 	bl	800277c <HAL_GPIO_Init>
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009b0:	4b8f      	ldr	r3, [pc, #572]	; (8000bf0 <main+0x5c0>)
  hadc3.Instance = ADC3;
 80009b2:	4990      	ldr	r1, [pc, #576]	; (8000bf4 <main+0x5c4>)
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80009b4:	4628      	mov	r0, r5
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009b6:	62ab      	str	r3, [r5, #40]	; 0x28
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80009b8:	60ac      	str	r4, [r5, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009ba:	612c      	str	r4, [r5, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80009bc:	61ac      	str	r4, [r5, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80009be:	622c      	str	r4, [r5, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009c0:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009c2:	60ec      	str	r4, [r5, #12]
  hadc3.Init.NbrOfConversion = 1;
 80009c4:	f8c5 a01c 	str.w	sl, [r5, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80009c8:	632c      	str	r4, [r5, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009ca:	f8c5 a014 	str.w	sl, [r5, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80009ce:	941a      	str	r4, [sp, #104]	; 0x68
 80009d0:	941b      	str	r4, [sp, #108]	; 0x6c
 80009d2:	941c      	str	r4, [sp, #112]	; 0x70
 80009d4:	941d      	str	r4, [sp, #116]	; 0x74
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009d6:	e885 0006 	stmia.w	r5, {r1, r2}
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80009da:	f001 f92b 	bl	8001c34 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009de:	a91a      	add	r1, sp, #104	; 0x68
 80009e0:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_4;
 80009e2:	961a      	str	r6, [sp, #104]	; 0x68
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009e4:	f8cd a06c 	str.w	sl, [sp, #108]	; 0x6c
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009e8:	941c      	str	r4, [sp, #112]	; 0x70
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009ea:	f001 f9d3 	bl	8001d94 <HAL_ADC_ConfigChannel>
  hdcmi.Instance = DCMI;
 80009ee:	4b82      	ldr	r3, [pc, #520]	; (8000bf8 <main+0x5c8>)
 80009f0:	4a82      	ldr	r2, [pc, #520]	; (8000bfc <main+0x5cc>)
  hdma2d.Instance = DMA2D;
 80009f2:	4d83      	ldr	r5, [pc, #524]	; (8000c00 <main+0x5d0>)
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80009f4:	4618      	mov	r0, r3
  hdcmi.Instance = DCMI;
 80009f6:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80009f8:	605c      	str	r4, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80009fa:	609c      	str	r4, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80009fc:	60dc      	str	r4, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80009fe:	611c      	str	r4, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000a00:	615c      	str	r4, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000a02:	619c      	str	r4, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000a04:	621c      	str	r4, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000a06:	625c      	str	r4, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000a08:	629c      	str	r4, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000a0a:	62dc      	str	r4, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000a0c:	631c      	str	r4, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000a0e:	f001 facf 	bl	8001fb0 <HAL_DCMI_Init>
  hdma2d.Instance = DMA2D;
 8000a12:	4b7c      	ldr	r3, [pc, #496]	; (8000c04 <main+0x5d4>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000a14:	4628      	mov	r0, r5
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000a16:	62ac      	str	r4, [r5, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000a18:	62ec      	str	r4, [r5, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000a1a:	632c      	str	r4, [r5, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000a1c:	636c      	str	r4, [r5, #52]	; 0x34
  hdma2d.Instance = DMA2D;
 8000a1e:	602b      	str	r3, [r5, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000a20:	606c      	str	r4, [r5, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000a22:	60ac      	str	r4, [r5, #8]
  hdma2d.Init.OutputOffset = 0;
 8000a24:	60ec      	str	r4, [r5, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000a26:	f001 fd33 	bl	8002490 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000a2a:	4651      	mov	r1, sl
 8000a2c:	4628      	mov	r0, r5
 8000a2e:	f001 fe4f 	bl	80026d0 <HAL_DMA2D_ConfigLayer>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a32:	4b75      	ldr	r3, [pc, #468]	; (8000c08 <main+0x5d8>)
  SdramTiming.SelfRefreshTime = 4;
 8000a34:	961c      	str	r6, [sp, #112]	; 0x70
  SdramTiming.WriteRecoveryTime = 3;
 8000a36:	2103      	movs	r1, #3
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a38:	60de      	str	r6, [r3, #12]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a3a:	2640      	movs	r6, #64	; 0x40
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a3c:	4d73      	ldr	r5, [pc, #460]	; (8000c0c <main+0x5dc>)
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000a3e:	f44f 7ec0 	mov.w	lr, #384	; 0x180
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a42:	615e      	str	r6, [r3, #20]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a44:	f44f 6600 	mov.w	r6, #2048	; 0x800
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000a48:	2207      	movs	r2, #7
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a4a:	601d      	str	r5, [r3, #0]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a4c:	621e      	str	r6, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000a4e:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  hi2c1.Instance = I2C1;
 8000a52:	4d6f      	ldr	r5, [pc, #444]	; (8000c10 <main+0x5e0>)
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a54:	4618      	mov	r0, r3
  SdramTiming.WriteRecoveryTime = 3;
 8000a56:	911e      	str	r1, [sp, #120]	; 0x78
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a58:	a91a      	add	r1, sp, #104	; 0x68
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000a5a:	f8c3 e018 	str.w	lr, [r3, #24]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000a5e:	921b      	str	r2, [sp, #108]	; 0x6c
  SdramTiming.RowCycleDelay = 7;
 8000a60:	921d      	str	r2, [sp, #116]	; 0x74
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a62:	f8c3 9010 	str.w	r9, [r3, #16]
  pLayerCfg.WindowX0 = 0;
 8000a66:	f44f 79f0 	mov.w	r9, #480	; 0x1e0
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000a6a:	625e      	str	r6, [r3, #36]	; 0x24
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000a6c:	605c      	str	r4, [r3, #4]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000a6e:	4e69      	ldr	r6, [pc, #420]	; (8000c14 <main+0x5e4>)
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000a70:	609c      	str	r4, [r3, #8]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a72:	61dc      	str	r4, [r3, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000a74:	629c      	str	r4, [r3, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 8000a76:	f8cd b068 	str.w	fp, [sp, #104]	; 0x68
  SdramTiming.RPDelay = 2;
 8000a7a:	f8cd b07c 	str.w	fp, [sp, #124]	; 0x7c
  SdramTiming.RCDDelay = 2;
 8000a7e:	f8cd b080 	str.w	fp, [sp, #128]	; 0x80
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a82:	f004 fb6d 	bl	8005160 <HAL_SDRAM_Init>
  hi2c1.Instance = I2C1;
 8000a86:	4b64      	ldr	r3, [pc, #400]	; (8000c18 <main+0x5e8>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a88:	4628      	mov	r0, r5
  hi2c1.Init.OwnAddress1 = 0;
 8000a8a:	60ac      	str	r4, [r5, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a8c:	f8c5 a00c 	str.w	sl, [r5, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a90:	612c      	str	r4, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a92:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a94:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a96:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a98:	622c      	str	r4, [r5, #32]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000a9a:	e885 0048 	stmia.w	r5, {r3, r6}
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a9e:	f002 f9d1 	bl	8002e44 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aa2:	4621      	mov	r1, r4
 8000aa4:	4628      	mov	r0, r5
 8000aa6:	f002 fc1b 	bl	80032e0 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000aaa:	4621      	mov	r1, r4
 8000aac:	4628      	mov	r0, r5
  hi2c3.Instance = I2C3;
 8000aae:	4d5b      	ldr	r5, [pc, #364]	; (8000c1c <main+0x5ec>)
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ab0:	f002 fc3e 	bl	8003330 <HAL_I2CEx_ConfigDigitalFilter>
  hi2c3.Instance = I2C3;
 8000ab4:	4b5a      	ldr	r3, [pc, #360]	; (8000c20 <main+0x5f0>)
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ab6:	4628      	mov	r0, r5
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000ab8:	606e      	str	r6, [r5, #4]
  hi2c3.Instance = I2C3;
 8000aba:	602b      	str	r3, [r5, #0]
  hi2c3.Init.OwnAddress1 = 0;
 8000abc:	60ac      	str	r4, [r5, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000abe:	f8c5 a00c 	str.w	sl, [r5, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac2:	612c      	str	r4, [r5, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000ac4:	616c      	str	r4, [r5, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ac6:	61ac      	str	r4, [r5, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ac8:	61ec      	str	r4, [r5, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aca:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000acc:	f002 f9ba 	bl	8002e44 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ad0:	4621      	mov	r1, r4
 8000ad2:	4628      	mov	r0, r5
 8000ad4:	f002 fc04 	bl	80032e0 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000ad8:	4621      	mov	r1, r4
 8000ada:	4628      	mov	r0, r5
  hltdc.Instance = LTDC;
 8000adc:	4e51      	ldr	r6, [pc, #324]	; (8000c24 <main+0x5f4>)
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000ade:	f002 fc27 	bl	8003330 <HAL_I2CEx_ConfigDigitalFilter>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000ae2:	4621      	mov	r1, r4
 8000ae4:	2234      	movs	r2, #52	; 0x34
 8000ae6:	a81a      	add	r0, sp, #104	; 0x68
 8000ae8:	f01c ff83 	bl	801d9f2 <memset>
  hltdc.Init.HorizontalSync = 40;
 8000aec:	2328      	movs	r3, #40	; 0x28
  hltdc.Init.VerticalSync = 9;
 8000aee:	2009      	movs	r0, #9
  hltdc.Init.TotalHeigh = 285;
 8000af0:	f240 1e1d 	movw	lr, #285	; 0x11d
  hltdc.Instance = LTDC;
 8000af4:	4d4c      	ldr	r5, [pc, #304]	; (8000c28 <main+0x5f8>)
  hltdc.Init.AccumulatedHBP = 53;
 8000af6:	2135      	movs	r1, #53	; 0x35
  hltdc.Init.HorizontalSync = 40;
 8000af8:	6173      	str	r3, [r6, #20]
  hltdc.Init.AccumulatedActiveW = 533;
 8000afa:	f240 2215 	movw	r2, #533	; 0x215
  hltdc.Init.AccumulatedActiveH = 283;
 8000afe:	f240 131b 	movw	r3, #283	; 0x11b
  hltdc.Init.AccumulatedVBP = 11;
 8000b02:	6237      	str	r7, [r6, #32]
  hltdc.Init.TotalWidth = 565;
 8000b04:	f240 2735 	movw	r7, #565	; 0x235
  hltdc.Init.VerticalSync = 9;
 8000b08:	61b0      	str	r0, [r6, #24]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b0a:	4630      	mov	r0, r6
  hltdc.Init.TotalHeigh = 285;
 8000b0c:	f8c6 e030 	str.w	lr, [r6, #48]	; 0x30
  hltdc.Instance = LTDC;
 8000b10:	6035      	str	r5, [r6, #0]
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000b12:	ad28      	add	r5, sp, #160	; 0xa0
  hltdc.Init.AccumulatedActiveH = 283;
 8000b14:	62b3      	str	r3, [r6, #40]	; 0x28
  hltdc.Init.AccumulatedHBP = 53;
 8000b16:	61f1      	str	r1, [r6, #28]
  hltdc.Init.AccumulatedActiveW = 533;
 8000b18:	6272      	str	r2, [r6, #36]	; 0x24
  hltdc.Init.TotalWidth = 565;
 8000b1a:	62f7      	str	r7, [r6, #44]	; 0x2c
  pLayerCfg.WindowX0 = 0;
 8000b1c:	f44f 7788 	mov.w	r7, #272	; 0x110
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b20:	6074      	str	r4, [r6, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b22:	60b4      	str	r4, [r6, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b24:	60f4      	str	r4, [r6, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b26:	6134      	str	r4, [r6, #16]
  hltdc.Init.Backcolor.Blue = 0;
 8000b28:	f886 4034 	strb.w	r4, [r6, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000b2c:	f886 4035 	strb.w	r4, [r6, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000b30:	f886 4036 	strb.w	r4, [r6, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b34:	f002 fc24 	bl	8003380 <HAL_LTDC_Init>
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b38:	4630      	mov	r0, r6
  pLayerCfg.WindowX0 = 0;
 8000b3a:	2600      	movs	r6, #0
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b3c:	a91a      	add	r1, sp, #104	; 0x68
 8000b3e:	4622      	mov	r2, r4
  pLayerCfg.Backcolor.Blue = 0;
 8000b40:	f88d 4098 	strb.w	r4, [sp, #152]	; 0x98
  pLayerCfg.Backcolor.Green = 0;
 8000b44:	f88d 4099 	strb.w	r4, [sp, #153]	; 0x99
  pLayerCfg.Backcolor.Red = 0;
 8000b48:	f88d 409a 	strb.w	r4, [sp, #154]	; 0x9a
  pLayerCfg.WindowX0 = 0;
 8000b4c:	e9cd 891a 	strd	r8, r9, [sp, #104]	; 0x68
 8000b50:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 8000b54:	f04f 0800 	mov.w	r8, #0
 8000b58:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8000b5c:	2600      	movs	r6, #0
 8000b5e:	f44f 67c0 	mov.w	r7, #1536	; 0x600
 8000b62:	e9cd 891e 	strd	r8, r9, [sp, #120]	; 0x78
 8000b66:	e9cd 6720 	strd	r6, r7, [sp, #128]	; 0x80
 8000b6a:	f04f 0807 	mov.w	r8, #7
 8000b6e:	f04f 4940 	mov.w	r9, #3221225472	; 0xc0000000
 8000b72:	f44f 76f0 	mov.w	r6, #480	; 0x1e0
 8000b76:	f44f 7788 	mov.w	r7, #272	; 0x110
 8000b7a:	e9cd 8922 	strd	r8, r9, [sp, #136]	; 0x88
 8000b7e:	e9cd 6724 	strd	r6, r7, [sp, #144]	; 0x90
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b82:	f002 fc79 	bl	8003478 <HAL_LTDC_ConfigLayer>
  hqspi.Instance = QUADSPI;
 8000b86:	4b29      	ldr	r3, [pc, #164]	; (8000c2c <main+0x5fc>)
 8000b88:	4a29      	ldr	r2, [pc, #164]	; (8000c30 <main+0x600>)
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b8a:	f04f 0800 	mov.w	r8, #0
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000b8e:	4618      	mov	r0, r3
  hrtc.Instance = RTC;
 8000b90:	4e28      	ldr	r6, [pc, #160]	; (8000c34 <main+0x604>)
  hqspi.Instance = QUADSPI;
 8000b92:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000b94:	22ff      	movs	r2, #255	; 0xff
  hqspi.Init.FifoThreshold = 1;
 8000b96:	f8c3 a008 	str.w	sl, [r3, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b9a:	f04f 0900 	mov.w	r9, #0
  hqspi.Init.ClockPrescaler = 255;
 8000b9e:	605a      	str	r2, [r3, #4]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000ba0:	60dc      	str	r4, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000ba2:	f8c3 a010 	str.w	sl, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000ba6:	615c      	str	r4, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000ba8:	619c      	str	r4, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000baa:	61dc      	str	r4, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000bac:	621c      	str	r4, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000bae:	f002 fd73 	bl	8003698 <HAL_QSPI_Init>
  RTC_AlarmTypeDef sAlarm = {0};
 8000bb2:	4621      	mov	r1, r4
 8000bb4:	222c      	movs	r2, #44	; 0x2c
 8000bb6:	a81a      	add	r0, sp, #104	; 0x68
  RTC_TimeTypeDef sTime = {0};
 8000bb8:	9412      	str	r4, [sp, #72]	; 0x48
  RTC_DateTypeDef sDate = {0};
 8000bba:	940e      	str	r4, [sp, #56]	; 0x38
  RTC_TimeTypeDef sTime = {0};
 8000bbc:	9413      	str	r4, [sp, #76]	; 0x4c
 8000bbe:	9414      	str	r4, [sp, #80]	; 0x50
 8000bc0:	9415      	str	r4, [sp, #84]	; 0x54
 8000bc2:	9416      	str	r4, [sp, #88]	; 0x58
 8000bc4:	9417      	str	r4, [sp, #92]	; 0x5c
  RTC_AlarmTypeDef sAlarm = {0};
 8000bc6:	f01c ff14 	bl	801d9f2 <memset>
  hrtc.Init.AsynchPrediv = 127;
 8000bca:	237f      	movs	r3, #127	; 0x7f
  hrtc.Instance = RTC;
 8000bcc:	4a1a      	ldr	r2, [pc, #104]	; (8000c38 <main+0x608>)
  hrtc.Init.SynchPrediv = 255;
 8000bce:	21ff      	movs	r1, #255	; 0xff
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000bd0:	4630      	mov	r0, r6
  hrtc.Init.AsynchPrediv = 127;
 8000bd2:	60b3      	str	r3, [r6, #8]
  hrtc.Init.SynchPrediv = 255;
 8000bd4:	60f1      	str	r1, [r6, #12]
  hrtc.Instance = RTC;
 8000bd6:	6032      	str	r2, [r6, #0]
 8000bd8:	e030      	b.n	8000c3c <main+0x60c>
 8000bda:	bf00      	nop
 8000bdc:	40020800 	.word	0x40020800
 8000be0:	40021800 	.word	0x40021800
 8000be4:	40020000 	.word	0x40020000
 8000be8:	20018d6c 	.word	0x20018d6c
 8000bec:	40020400 	.word	0x40020400
 8000bf0:	0f000001 	.word	0x0f000001
 8000bf4:	40012200 	.word	0x40012200
 8000bf8:	20018db4 	.word	0x20018db4
 8000bfc:	50050000 	.word	0x50050000
 8000c00:	20018f44 	.word	0x20018f44
 8000c04:	4002b000 	.word	0x4002b000
 8000c08:	20019004 	.word	0x20019004
 8000c0c:	a0000140 	.word	0xa0000140
 8000c10:	20018b74 	.word	0x20018b74
 8000c14:	00c0eaff 	.word	0x00c0eaff
 8000c18:	40005400 	.word	0x40005400
 8000c1c:	20018a64 	.word	0x20018a64
 8000c20:	40005c00 	.word	0x40005c00
 8000c24:	20018cc4 	.word	0x20018cc4
 8000c28:	40016800 	.word	0x40016800
 8000c2c:	20019038 	.word	0x20019038
 8000c30:	a0001000 	.word	0xa0001000
 8000c34:	20018e74 	.word	0x20018e74
 8000c38:	40002800 	.word	0x40002800
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c3c:	6074      	str	r4, [r6, #4]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c3e:	6134      	str	r4, [r6, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c40:	6174      	str	r4, [r6, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c42:	61b4      	str	r4, [r6, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c44:	f003 fbb8 	bl	80043b8 <HAL_RTC_Init>
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000c48:	4652      	mov	r2, sl
 8000c4a:	a912      	add	r1, sp, #72	; 0x48
 8000c4c:	4630      	mov	r0, r6
  sTime.Hours = 0x0;
 8000c4e:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
  sTime.Minutes = 0x0;
 8000c52:	f88d 4049 	strb.w	r4, [sp, #73]	; 0x49
  sTime.Seconds = 0x0;
 8000c56:	f88d 404a 	strb.w	r4, [sp, #74]	; 0x4a
  hsd1.Instance = SDMMC1;
 8000c5a:	4fa6      	ldr	r7, [pc, #664]	; (8000ef4 <main+0x8c4>)
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c5c:	e9cd 8916 	strd	r8, r9, [sp, #88]	; 0x58
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000c60:	f003 fc02 	bl	8004468 <HAL_RTC_SetTime>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c64:	4ba4      	ldr	r3, [pc, #656]	; (8000ef8 <main+0x8c8>)
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000c66:	4652      	mov	r2, sl
 8000c68:	4630      	mov	r0, r6
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c6a:	f845 3d68 	str.w	r3, [r5, #-104]!
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000c6e:	4629      	mov	r1, r5
 8000c70:	f003 fcae 	bl	80045d0 <HAL_RTC_SetDate>
  sAlarm.Alarm = RTC_ALARM_A;
 8000c74:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000c78:	4652      	mov	r2, sl
 8000c7a:	a91a      	add	r1, sp, #104	; 0x68
 8000c7c:	4630      	mov	r0, r6
  sAlarm.Alarm = RTC_ALARM_A;
 8000c7e:	9324      	str	r3, [sp, #144]	; 0x90
  sAlarm.AlarmTime.Hours = 0x0;
 8000c80:	f88d 4068 	strb.w	r4, [sp, #104]	; 0x68
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c84:	f04f 080c 	mov.w	r8, #12
  sAlarm.AlarmTime.Minutes = 0x0;
 8000c88:	f88d 4069 	strb.w	r4, [sp, #105]	; 0x69
  huart1.Init.BaudRate = 115200;
 8000c8c:	f44f 39e1 	mov.w	r9, #115200	; 0x1c200
  sAlarm.AlarmTime.Seconds = 0x0;
 8000c90:	f88d 406a 	strb.w	r4, [sp, #106]	; 0x6a
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000c94:	941b      	str	r4, [sp, #108]	; 0x6c
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c96:	941e      	str	r4, [sp, #120]	; 0x78
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c98:	941f      	str	r4, [sp, #124]	; 0x7c
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000c9a:	9420      	str	r4, [sp, #128]	; 0x80
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000c9c:	9421      	str	r4, [sp, #132]	; 0x84
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000c9e:	9422      	str	r4, [sp, #136]	; 0x88
  sAlarm.AlarmDateWeekDay = 0x1;
 8000ca0:	f88d a08c 	strb.w	sl, [sp, #140]	; 0x8c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000ca4:	f003 fd32 	bl	800470c <HAL_RTC_SetAlarm>
  sAlarm.Alarm = RTC_ALARM_B;
 8000ca8:	f44f 7300 	mov.w	r3, #512	; 0x200
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000cac:	4652      	mov	r2, sl
 8000cae:	a91a      	add	r1, sp, #104	; 0x68
 8000cb0:	4630      	mov	r0, r6
  sAlarm.Alarm = RTC_ALARM_B;
 8000cb2:	9324      	str	r3, [sp, #144]	; 0x90
  sAlarm.AlarmDateWeekDay = 0x1;
 8000cb4:	f88d a08c 	strb.w	sl, [sp, #140]	; 0x8c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000cb8:	f003 fd28 	bl	800470c <HAL_RTC_SetAlarm>
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000cbc:	465a      	mov	r2, fp
 8000cbe:	4621      	mov	r1, r4
 8000cc0:	4630      	mov	r0, r6
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000cc2:	2640      	movs	r6, #64	; 0x40
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000cc4:	f003 fe06 	bl	80048d4 <HAL_RTCEx_SetTimeStamp>
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000cc8:	4b8c      	ldr	r3, [pc, #560]	; (8000efc <main+0x8cc>)
 8000cca:	498d      	ldr	r1, [pc, #564]	; (8000f00 <main+0x8d0>)
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000ccc:	4a8d      	ldr	r2, [pc, #564]	; (8000f04 <main+0x8d4>)
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000cce:	4618      	mov	r0, r3
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000cd0:	635e      	str	r6, [r3, #52]	; 0x34
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000cd2:	2608      	movs	r6, #8
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000cd4:	6019      	str	r1, [r3, #0]
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000cd6:	641e      	str	r6, [r3, #64]	; 0x40
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cd8:	2660      	movs	r6, #96	; 0x60
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000cda:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000cdc:	631c      	str	r4, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000cde:	605c      	str	r4, [r3, #4]
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000ce0:	639c      	str	r4, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000ce2:	63dc      	str	r4, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000ce4:	609c      	str	r4, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000ce6:	611c      	str	r4, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000ce8:	615c      	str	r4, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000cea:	619c      	str	r4, [r3, #24]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000cec:	60dc      	str	r4, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000cee:	625c      	str	r4, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000cf0:	629c      	str	r4, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000cf2:	62dc      	str	r4, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000cf4:	f8c3 a044 	str.w	sl, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000cf8:	649c      	str	r4, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000cfa:	64dc      	str	r4, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000cfc:	651c      	str	r4, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000cfe:	655c      	str	r4, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000d00:	659c      	str	r4, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000d02:	f8c3 a05c 	str.w	sl, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000d06:	661c      	str	r4, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000d08:	f003 fe0e 	bl	8004928 <HAL_SAI_Init>
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000d0c:	4b7e      	ldr	r3, [pc, #504]	; (8000f08 <main+0x8d8>)
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000d0e:	2103      	movs	r1, #3
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000d10:	4a7e      	ldr	r2, [pc, #504]	; (8000f0c <main+0x8dc>)
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000d12:	6059      	str	r1, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000d14:	2140      	movs	r1, #64	; 0x40
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000d16:	4618      	mov	r0, r3
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000d18:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000d1a:	6359      	str	r1, [r3, #52]	; 0x34
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000d1c:	2108      	movs	r1, #8
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000d1e:	631c      	str	r4, [r3, #48]	; 0x30
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000d20:	6419      	str	r1, [r3, #64]	; 0x40
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000d22:	639c      	str	r4, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000d24:	63dc      	str	r4, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000d26:	f8c3 a008 	str.w	sl, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d2a:	611c      	str	r4, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000d2c:	619c      	str	r4, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d2e:	60dc      	str	r4, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d30:	625c      	str	r4, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d32:	629c      	str	r4, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d34:	62dc      	str	r4, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000d36:	f8c3 a044 	str.w	sl, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000d3a:	649c      	str	r4, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000d3c:	64dc      	str	r4, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000d3e:	651c      	str	r4, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000d40:	655c      	str	r4, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000d42:	659c      	str	r4, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000d44:	f8c3 a05c 	str.w	sl, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000d48:	661c      	str	r4, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000d4a:	f003 fded 	bl	8004928 <HAL_SAI_Init>
  hsd1.Instance = SDMMC1;
 8000d4e:	4b70      	ldr	r3, [pc, #448]	; (8000f10 <main+0x8e0>)
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000d50:	4638      	mov	r0, r7
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000d52:	607c      	str	r4, [r7, #4]
  hsd1.Instance = SDMMC1;
 8000d54:	603b      	str	r3, [r7, #0]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000d56:	60bc      	str	r4, [r7, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000d58:	60fc      	str	r4, [r7, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000d5a:	613c      	str	r4, [r7, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000d5c:	617c      	str	r4, [r7, #20]
  hsd1.Init.ClockDiv = 0;
 8000d5e:	61bc      	str	r4, [r7, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000d60:	f004 f952 	bl	8005008 <HAL_SD_Init>
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8000d64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d68:	4638      	mov	r0, r7
 8000d6a:	f004 f969 	bl	8005040 <HAL_SD_ConfigWideBusOperation>
  htim1.Instance = TIM1;
 8000d6e:	4f69      	ldr	r7, [pc, #420]	; (8000f14 <main+0x8e4>)
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d70:	222c      	movs	r2, #44	; 0x2c
 8000d72:	4621      	mov	r1, r4
 8000d74:	a81a      	add	r0, sp, #104	; 0x68
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d76:	606c      	str	r4, [r5, #4]
 8000d78:	60ac      	str	r4, [r5, #8]
 8000d7a:	60ec      	str	r4, [r5, #12]
 8000d7c:	940e      	str	r4, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d7e:	940b      	str	r4, [sp, #44]	; 0x2c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d80:	9412      	str	r4, [sp, #72]	; 0x48
 8000d82:	9413      	str	r4, [sp, #76]	; 0x4c
 8000d84:	9414      	str	r4, [sp, #80]	; 0x50
 8000d86:	9415      	str	r4, [sp, #84]	; 0x54
 8000d88:	9416      	str	r4, [sp, #88]	; 0x58
 8000d8a:	9417      	str	r4, [sp, #92]	; 0x5c
 8000d8c:	9418      	str	r4, [sp, #96]	; 0x60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d8e:	940c      	str	r4, [sp, #48]	; 0x30
 8000d90:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d92:	f01c fe2e 	bl	801d9f2 <memset>
  htim1.Instance = TIM1;
 8000d96:	4b60      	ldr	r3, [pc, #384]	; (8000f18 <main+0x8e8>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d98:	4638      	mov	r0, r7
  htim1.Init.Prescaler = 0;
 8000d9a:	607c      	str	r4, [r7, #4]
  htim1.Instance = TIM1;
 8000d9c:	603b      	str	r3, [r7, #0]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9e:	60bc      	str	r4, [r7, #8]
  htim1.Init.Period = 0;
 8000da0:	60fc      	str	r4, [r7, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da2:	613c      	str	r4, [r7, #16]
  htim1.Init.RepetitionCounter = 0;
 8000da4:	617c      	str	r4, [r7, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da6:	61bc      	str	r4, [r7, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000da8:	f004 fa2a 	bl	8005200 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000db0:	4629      	mov	r1, r5
 8000db2:	4638      	mov	r0, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000db4:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000db6:	f004 fb7b 	bl	80054b0 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000dba:	4638      	mov	r0, r7
 8000dbc:	f004 fad2 	bl	8005364 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dc0:	a90b      	add	r1, sp, #44	; 0x2c
 8000dc2:	4638      	mov	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc4:	940b      	str	r4, [sp, #44]	; 0x2c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000dc6:	940c      	str	r4, [sp, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc8:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dca:	f004 fdbf 	bl	800594c <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dce:	4622      	mov	r2, r4
 8000dd0:	a912      	add	r1, sp, #72	; 0x48
 8000dd2:	4638      	mov	r0, r7
  sConfigOC.Pulse = 0;
 8000dd4:	9413      	str	r4, [sp, #76]	; 0x4c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dd6:	9414      	str	r4, [sp, #80]	; 0x50
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dd8:	9415      	str	r4, [sp, #84]	; 0x54
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dda:	9416      	str	r4, [sp, #88]	; 0x58
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ddc:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dde:	9418      	str	r4, [sp, #96]	; 0x60
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000de0:	9612      	str	r6, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000de2:	f004 fe31 	bl	8005a48 <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000de6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000dea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000dee:	a91a      	add	r1, sp, #104	; 0x68
 8000df0:	4638      	mov	r0, r7
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000df2:	921f      	str	r2, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000df4:	9322      	str	r3, [sp, #136]	; 0x88
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000df6:	941a      	str	r4, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000df8:	941b      	str	r4, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dfa:	941c      	str	r4, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dfc:	941d      	str	r4, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dfe:	941e      	str	r4, [sp, #120]	; 0x78
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e00:	9420      	str	r4, [sp, #128]	; 0x80
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e02:	9421      	str	r4, [sp, #132]	; 0x84
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e04:	9423      	str	r4, [sp, #140]	; 0x8c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e06:	9424      	str	r4, [sp, #144]	; 0x90
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e08:	f004 fdcc 	bl	80059a4 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 8000e0c:	4638      	mov	r0, r7
  htim2.Instance = TIM2;
 8000e0e:	4f43      	ldr	r7, [pc, #268]	; (8000f1c <main+0x8ec>)
  HAL_TIM_MspPostInit(&htim1);
 8000e10:	f000 fc9a 	bl	8001748 <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 8000e14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e18:	4638      	mov	r0, r7
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e1a:	606c      	str	r4, [r5, #4]
 8000e1c:	60ac      	str	r4, [r5, #8]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1e:	60bc      	str	r4, [r7, #8]
  htim2.Init.Period = 0;
 8000e20:	60fc      	str	r4, [r7, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e22:	613c      	str	r4, [r7, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e24:	61bc      	str	r4, [r7, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e26:	9412      	str	r4, [sp, #72]	; 0x48
 8000e28:	9413      	str	r4, [sp, #76]	; 0x4c
 8000e2a:	9414      	str	r4, [sp, #80]	; 0x50
 8000e2c:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e2e:	940e      	str	r4, [sp, #56]	; 0x38
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e30:	941a      	str	r4, [sp, #104]	; 0x68
 8000e32:	941b      	str	r4, [sp, #108]	; 0x6c
 8000e34:	941c      	str	r4, [sp, #112]	; 0x70
 8000e36:	941d      	str	r4, [sp, #116]	; 0x74
 8000e38:	941e      	str	r4, [sp, #120]	; 0x78
 8000e3a:	941f      	str	r4, [sp, #124]	; 0x7c
 8000e3c:	9420      	str	r4, [sp, #128]	; 0x80
  htim2.Init.Prescaler = 0;
 8000e3e:	e887 0018 	stmia.w	r7, {r3, r4}
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e42:	f004 f9dd 	bl	8005200 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e4a:	a912      	add	r1, sp, #72	; 0x48
 8000e4c:	4638      	mov	r0, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e4e:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e50:	f004 fb2e 	bl	80054b0 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e54:	4638      	mov	r0, r7
 8000e56:	f004 fa85 	bl	8005364 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e5a:	4629      	mov	r1, r5
 8000e5c:	4638      	mov	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e5e:	940e      	str	r4, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e60:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e62:	f004 fd73 	bl	800594c <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e66:	4622      	mov	r2, r4
 8000e68:	a91a      	add	r1, sp, #104	; 0x68
 8000e6a:	4638      	mov	r0, r7
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e6c:	961a      	str	r6, [sp, #104]	; 0x68
  sConfigOC.Pulse = 0;
 8000e6e:	941b      	str	r4, [sp, #108]	; 0x6c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e70:	941c      	str	r4, [sp, #112]	; 0x70
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e72:	941e      	str	r4, [sp, #120]	; 0x78
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e74:	f004 fde8 	bl	8005a48 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim2);
 8000e78:	4638      	mov	r0, r7
  htim3.Instance = TIM3;
 8000e7a:	4f29      	ldr	r7, [pc, #164]	; (8000f20 <main+0x8f0>)
  HAL_TIM_MspPostInit(&htim2);
 8000e7c:	f000 fc64 	bl	8001748 <HAL_TIM_MspPostInit>
  htim3.Instance = TIM3;
 8000e80:	4b28      	ldr	r3, [pc, #160]	; (8000f24 <main+0x8f4>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e82:	4638      	mov	r0, r7
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e84:	606c      	str	r4, [r5, #4]
 8000e86:	60ac      	str	r4, [r5, #8]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e88:	60bc      	str	r4, [r7, #8]
  htim3.Init.Period = 0;
 8000e8a:	60fc      	str	r4, [r7, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e8c:	613c      	str	r4, [r7, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8e:	61bc      	str	r4, [r7, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e90:	9412      	str	r4, [sp, #72]	; 0x48
 8000e92:	9413      	str	r4, [sp, #76]	; 0x4c
 8000e94:	9414      	str	r4, [sp, #80]	; 0x50
 8000e96:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e98:	940e      	str	r4, [sp, #56]	; 0x38
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e9a:	941a      	str	r4, [sp, #104]	; 0x68
 8000e9c:	941b      	str	r4, [sp, #108]	; 0x6c
 8000e9e:	941c      	str	r4, [sp, #112]	; 0x70
 8000ea0:	941d      	str	r4, [sp, #116]	; 0x74
 8000ea2:	941e      	str	r4, [sp, #120]	; 0x78
 8000ea4:	941f      	str	r4, [sp, #124]	; 0x7c
 8000ea6:	9420      	str	r4, [sp, #128]	; 0x80
  htim3.Init.Prescaler = 0;
 8000ea8:	e887 0018 	stmia.w	r7, {r3, r4}
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000eac:	f004 f9a8 	bl	8005200 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000eb4:	a912      	add	r1, sp, #72	; 0x48
 8000eb6:	4638      	mov	r0, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb8:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000eba:	f004 faf9 	bl	80054b0 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ebe:	4638      	mov	r0, r7
 8000ec0:	f004 fa50 	bl	8005364 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ec4:	4629      	mov	r1, r5
 8000ec6:	4638      	mov	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec8:	940e      	str	r4, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eca:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ecc:	f004 fd3e 	bl	800594c <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ed0:	4622      	mov	r2, r4
 8000ed2:	a91a      	add	r1, sp, #104	; 0x68
 8000ed4:	4638      	mov	r0, r7
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ed6:	961a      	str	r6, [sp, #104]	; 0x68
  sConfigOC.Pulse = 0;
 8000ed8:	941b      	str	r4, [sp, #108]	; 0x6c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eda:	941c      	str	r4, [sp, #112]	; 0x70
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000edc:	941e      	str	r4, [sp, #120]	; 0x78
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ede:	f004 fdb3 	bl	8005a48 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 8000ee2:	4638      	mov	r0, r7
  htim5.Instance = TIM5;
 8000ee4:	4f10      	ldr	r7, [pc, #64]	; (8000f28 <main+0x8f8>)
  HAL_TIM_MspPostInit(&htim3);
 8000ee6:	f000 fc2f 	bl	8001748 <HAL_TIM_MspPostInit>
  htim5.Instance = TIM5;
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <main+0x8fc>)
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000eec:	4638      	mov	r0, r7
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eee:	606c      	str	r4, [r5, #4]
 8000ef0:	e01e      	b.n	8000f30 <main+0x900>
 8000ef2:	bf00      	nop
 8000ef4:	20018bc0 	.word	0x20018bc0
 8000ef8:	00010101 	.word	0x00010101
 8000efc:	20018af0 	.word	0x20018af0
 8000f00:	40015c04 	.word	0x40015c04
 8000f04:	0002ee00 	.word	0x0002ee00
 8000f08:	200189e0 	.word	0x200189e0
 8000f0c:	40015c24 	.word	0x40015c24
 8000f10:	40012c00 	.word	0x40012c00
 8000f14:	20018e94 	.word	0x20018e94
 8000f18:	40010000 	.word	0x40010000
 8000f1c:	20018f84 	.word	0x20018f84
 8000f20:	20018c84 	.word	0x20018c84
 8000f24:	40000400 	.word	0x40000400
 8000f28:	20018c44 	.word	0x20018c44
 8000f2c:	40000c00 	.word	0x40000c00
 8000f30:	60ac      	str	r4, [r5, #8]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f32:	60bc      	str	r4, [r7, #8]
  htim5.Init.Period = 0;
 8000f34:	60fc      	str	r4, [r7, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f36:	613c      	str	r4, [r7, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f38:	61bc      	str	r4, [r7, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f3a:	9412      	str	r4, [sp, #72]	; 0x48
 8000f3c:	9413      	str	r4, [sp, #76]	; 0x4c
 8000f3e:	9414      	str	r4, [sp, #80]	; 0x50
 8000f40:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f42:	940e      	str	r4, [sp, #56]	; 0x38
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f44:	941a      	str	r4, [sp, #104]	; 0x68
 8000f46:	941b      	str	r4, [sp, #108]	; 0x6c
 8000f48:	941c      	str	r4, [sp, #112]	; 0x70
 8000f4a:	941d      	str	r4, [sp, #116]	; 0x74
 8000f4c:	941e      	str	r4, [sp, #120]	; 0x78
 8000f4e:	941f      	str	r4, [sp, #124]	; 0x7c
 8000f50:	9420      	str	r4, [sp, #128]	; 0x80
  htim5.Init.Prescaler = 0;
 8000f52:	e887 0018 	stmia.w	r7, {r3, r4}
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000f56:	f004 f953 	bl	8005200 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000f5e:	a912      	add	r1, sp, #72	; 0x48
 8000f60:	4638      	mov	r0, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f62:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000f64:	f004 faa4 	bl	80054b0 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000f68:	4638      	mov	r0, r7
 8000f6a:	f004 f9fb 	bl	8005364 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f6e:	4629      	mov	r1, r5
 8000f70:	4638      	mov	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f72:	940e      	str	r4, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f74:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f76:	f004 fce9 	bl	800594c <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f7a:	4642      	mov	r2, r8
 8000f7c:	a91a      	add	r1, sp, #104	; 0x68
 8000f7e:	4638      	mov	r0, r7
  htim8.Instance = TIM8;
 8000f80:	4d3b      	ldr	r5, [pc, #236]	; (8001070 <main+0xa40>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f82:	961a      	str	r6, [sp, #104]	; 0x68
  sConfigOC.Pulse = 0;
 8000f84:	941b      	str	r4, [sp, #108]	; 0x6c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f86:	941c      	str	r4, [sp, #112]	; 0x70
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f88:	941e      	str	r4, [sp, #120]	; 0x78
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f8a:	f004 fd5d 	bl	8005a48 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim5);
 8000f8e:	4638      	mov	r0, r7
  htim12.Instance = TIM12;
 8000f90:	4f38      	ldr	r7, [pc, #224]	; (8001074 <main+0xa44>)
  HAL_TIM_MspPostInit(&htim5);
 8000f92:	f000 fbd9 	bl	8001748 <HAL_TIM_MspPostInit>
  htim8.Instance = TIM8;
 8000f96:	4b38      	ldr	r3, [pc, #224]	; (8001078 <main+0xa48>)
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000f98:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f9a:	941a      	str	r4, [sp, #104]	; 0x68
  htim8.Instance = TIM8;
 8000f9c:	602b      	str	r3, [r5, #0]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f9e:	941b      	str	r4, [sp, #108]	; 0x6c
 8000fa0:	941c      	str	r4, [sp, #112]	; 0x70
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa2:	9412      	str	r4, [sp, #72]	; 0x48
 8000fa4:	9413      	str	r4, [sp, #76]	; 0x4c
 8000fa6:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fa8:	941d      	str	r4, [sp, #116]	; 0x74
  htim8.Init.Prescaler = 0;
 8000faa:	606c      	str	r4, [r5, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fac:	60ac      	str	r4, [r5, #8]
  htim8.Init.Period = 0;
 8000fae:	60ec      	str	r4, [r5, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb0:	612c      	str	r4, [r5, #16]
  htim8.Init.RepetitionCounter = 0;
 8000fb2:	616c      	str	r4, [r5, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb4:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000fb6:	f004 f923 	bl	8005200 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000fbe:	a91a      	add	r1, sp, #104	; 0x68
 8000fc0:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc2:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000fc4:	f004 fa74 	bl	80054b0 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000fc8:	a912      	add	r1, sp, #72	; 0x48
 8000fca:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fcc:	9412      	str	r4, [sp, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fce:	9413      	str	r4, [sp, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd0:	9414      	str	r4, [sp, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000fd2:	f004 fcbb 	bl	800594c <HAL_TIMEx_MasterConfigSynchronization>
  htim12.Instance = TIM12;
 8000fd6:	4b29      	ldr	r3, [pc, #164]	; (800107c <main+0xa4c>)
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000fd8:	4638      	mov	r0, r7
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fda:	941a      	str	r4, [sp, #104]	; 0x68
  htim12.Instance = TIM12;
 8000fdc:	603b      	str	r3, [r7, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fde:	941b      	str	r4, [sp, #108]	; 0x6c
 8000fe0:	941c      	str	r4, [sp, #112]	; 0x70
 8000fe2:	941d      	str	r4, [sp, #116]	; 0x74
 8000fe4:	941e      	str	r4, [sp, #120]	; 0x78
 8000fe6:	941f      	str	r4, [sp, #124]	; 0x7c
 8000fe8:	9420      	str	r4, [sp, #128]	; 0x80
  htim12.Init.Prescaler = 0;
 8000fea:	607c      	str	r4, [r7, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fec:	60bc      	str	r4, [r7, #8]
  htim12.Init.Period = 0;
 8000fee:	60fc      	str	r4, [r7, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff0:	613c      	str	r4, [r7, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff2:	61bc      	str	r4, [r7, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000ff4:	f004 f9b6 	bl	8005364 <HAL_TIM_PWM_Init>
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ff8:	a91a      	add	r1, sp, #104	; 0x68
 8000ffa:	4622      	mov	r2, r4
 8000ffc:	4638      	mov	r0, r7
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ffe:	961a      	str	r6, [sp, #104]	; 0x68
  sConfigOC.Pulse = 0;
 8001000:	941b      	str	r4, [sp, #108]	; 0x6c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001002:	941c      	str	r4, [sp, #112]	; 0x70
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001004:	941e      	str	r4, [sp, #120]	; 0x78
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001006:	f004 fd1f 	bl	8005a48 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim12);
 800100a:	4638      	mov	r0, r7
 800100c:	f000 fb9c 	bl	8001748 <HAL_TIM_MspPostInit>
  huart1.Instance = USART1;
 8001010:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <main+0xa50>)
 8001012:	4a1c      	ldr	r2, [pc, #112]	; (8001084 <main+0xa54>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001014:	4618      	mov	r0, r3
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001016:	609c      	str	r4, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001018:	60dc      	str	r4, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800101a:	611c      	str	r4, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101c:	619c      	str	r4, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800101e:	61dc      	str	r4, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001020:	621c      	str	r4, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001022:	625c      	str	r4, [r3, #36]	; 0x24
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001024:	f8c3 8014 	str.w	r8, [r3, #20]
  huart1.Init.BaudRate = 115200;
 8001028:	e883 0204 	stmia.w	r3, {r2, r9}
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800102c:	f004 fe42 	bl	8005cb4 <HAL_UART_Init>
  huart6.Instance = USART6;
 8001030:	4b15      	ldr	r3, [pc, #84]	; (8001088 <main+0xa58>)
 8001032:	4a16      	ldr	r2, [pc, #88]	; (800108c <main+0xa5c>)
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001034:	4618      	mov	r0, r3
  huart6.Init.BaudRate = 115200;
 8001036:	f8c3 9004 	str.w	r9, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800103a:	609c      	str	r4, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800103c:	60dc      	str	r4, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800103e:	611c      	str	r4, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001040:	f8c3 8014 	str.w	r8, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001044:	619c      	str	r4, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001046:	61dc      	str	r4, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001048:	621c      	str	r4, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800104a:	625c      	str	r4, [r3, #36]	; 0x24
  huart6.Instance = USART6;
 800104c:	601a      	str	r2, [r3, #0]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800104e:	f004 fe31 	bl	8005cb4 <HAL_UART_Init>
  lv_init();
 8001052:	f008 ff13 	bl	8009e7c <lv_init>
  tft_init();
 8001056:	f006 f9bd 	bl	80073d4 <tft_init>
  touchpad_init();
 800105a:	f006 fbb7 	bl	80077cc <touchpad_init>
  demo_create();
 800105e:	f006 fc77 	bl	8007950 <demo_create>
      HAL_Delay(5);
 8001062:	2005      	movs	r0, #5
 8001064:	f000 fdd4 	bl	8001c10 <HAL_Delay>
      lv_task_handler();
 8001068:	f012 fa84 	bl	8013574 <lv_task_handler>
 800106c:	e7f9      	b.n	8001062 <main+0xa32>
 800106e:	bf00      	nop
 8001070:	20018ab0 	.word	0x20018ab0
 8001074:	20018fc4 	.word	0x20018fc4
 8001078:	40010400 	.word	0x40010400
 800107c:	40001800 	.word	0x40001800
 8001080:	20018e04 	.word	0x20018e04
 8001084:	40011000 	.word	0x40011000
 8001088:	20018ed4 	.word	0x20018ed4
 800108c:	40011400 	.word	0x40011400

08001090 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001090:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001092:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001094:	6805      	ldr	r5, [r0, #0]
 8001096:	429d      	cmp	r5, r3
 8001098:	d000      	beq.n	800109c <HAL_TIM_PeriodElapsedCallback+0xc>
 800109a:	bd38      	pop	{r3, r4, r5, pc}
 800109c:	4604      	mov	r4, r0
    HAL_IncTick();
 800109e:	f000 fda5 	bl	8001bec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM6) {
 80010a2:	6823      	ldr	r3, [r4, #0]
 80010a4:	42ab      	cmp	r3, r5
 80010a6:	d1f8      	bne.n	800109a <HAL_TIM_PeriodElapsedCallback+0xa>
    lv_tick_inc(1);
 80010a8:	2001      	movs	r0, #1
  }
  /* USER CODE END Callback 1 */
}
 80010aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_tick_inc(1);
 80010ae:	f011 bb31 	b.w	8012714 <lv_tick_inc>
 80010b2:	bf00      	nop
 80010b4:	40001000 	.word	0x40001000

080010b8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010b8:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <HAL_MspInit+0x2c>)
{
 80010ba:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 80010bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010be:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010c2:	641a      	str	r2, [r3, #64]	; 0x40
 80010c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010c6:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80010ca:	9200      	str	r2, [sp, #0]
 80010cc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80010d4:	645a      	str	r2, [r3, #68]	; 0x44
 80010d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010dc:	9301      	str	r3, [sp, #4]
 80010de:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010e0:	b002      	add	sp, #8
 80010e2:	4770      	bx	lr
 80010e4:	40023800 	.word	0x40023800

080010e8 <HAL_ADC_MspInit>:
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC3)
 80010e8:	6802      	ldr	r2, [r0, #0]
 80010ea:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <HAL_ADC_MspInit+0x80>)
{
 80010ec:	b570      	push	{r4, r5, r6, lr}
  if(hadc->Instance==ADC3)
 80010ee:	429a      	cmp	r2, r3
{
 80010f0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f2:	f04f 0400 	mov.w	r4, #0
 80010f6:	9404      	str	r4, [sp, #16]
 80010f8:	9403      	str	r4, [sp, #12]
 80010fa:	9405      	str	r4, [sp, #20]
 80010fc:	9406      	str	r4, [sp, #24]
 80010fe:	9407      	str	r4, [sp, #28]
  if(hadc->Instance==ADC3)
 8001100:	d001      	beq.n	8001106 <HAL_ADC_MspInit+0x1e>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001102:	b008      	add	sp, #32
 8001104:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001106:	f503 338b 	add.w	r3, r3, #71168	; 0x11600
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800110a:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 800110c:	f44f 66f8 	mov.w	r6, #1984	; 0x7c0
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001110:	a903      	add	r1, sp, #12
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001112:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001114:	4815      	ldr	r0, [pc, #84]	; (800116c <HAL_ADC_MspInit+0x84>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001116:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800111a:	645a      	str	r2, [r3, #68]	; 0x44
 800111c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800111e:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001122:	9200      	str	r2, [sp, #0]
 8001124:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001128:	f042 0220 	orr.w	r2, r2, #32
 800112c:	631a      	str	r2, [r3, #48]	; 0x30
 800112e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001130:	f002 0220 	and.w	r2, r2, #32
 8001134:	9201      	str	r2, [sp, #4]
 8001136:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001138:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800113a:	f042 0201 	orr.w	r2, r2, #1
 800113e:	631a      	str	r2, [r3, #48]	; 0x30
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 8001142:	9603      	str	r6, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001144:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001148:	9504      	str	r5, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114a:	9302      	str	r3, [sp, #8]
 800114c:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800114e:	f001 fb15 	bl	800277c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001152:	2301      	movs	r3, #1
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001154:	a903      	add	r1, sp, #12
 8001156:	4806      	ldr	r0, [pc, #24]	; (8001170 <HAL_ADC_MspInit+0x88>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001158:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800115c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800115e:	f001 fb0d 	bl	800277c <HAL_GPIO_Init>
}
 8001162:	b008      	add	sp, #32
 8001164:	bd70      	pop	{r4, r5, r6, pc}
 8001166:	bf00      	nop
 8001168:	40012200 	.word	0x40012200
 800116c:	40021400 	.word	0x40021400
 8001170:	40020000 	.word	0x40020000

08001174 <HAL_DCMI_MspInit>:
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdcmi->Instance==DCMI)
 8001174:	6802      	ldr	r2, [r0, #0]
 8001176:	4b3d      	ldr	r3, [pc, #244]	; (800126c <HAL_DCMI_MspInit+0xf8>)
{
 8001178:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hdcmi->Instance==DCMI)
 800117a:	429a      	cmp	r2, r3
{
 800117c:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117e:	f04f 0400 	mov.w	r4, #0
 8001182:	9408      	str	r4, [sp, #32]
 8001184:	9407      	str	r4, [sp, #28]
 8001186:	9409      	str	r4, [sp, #36]	; 0x24
 8001188:	940a      	str	r4, [sp, #40]	; 0x28
 800118a:	940b      	str	r4, [sp, #44]	; 0x2c
  if(hdcmi->Instance==DCMI)
 800118c:	d001      	beq.n	8001192 <HAL_DCMI_MspInit+0x1e>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800118e:	b00d      	add	sp, #52	; 0x34
 8001190:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001192:	4b37      	ldr	r3, [pc, #220]	; (8001270 <HAL_DCMI_MspInit+0xfc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001196:	250d      	movs	r5, #13
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001198:	2760      	movs	r7, #96	; 0x60
    __HAL_RCC_DCMI_CLK_ENABLE();
 800119a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800119c:	a907      	add	r1, sp, #28
 800119e:	4835      	ldr	r0, [pc, #212]	; (8001274 <HAL_DCMI_MspInit+0x100>)
    __HAL_RCC_DCMI_CLK_ENABLE();
 80011a0:	f042 0201 	orr.w	r2, r2, #1
 80011a4:	635a      	str	r2, [r3, #52]	; 0x34
 80011a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011a8:	f002 0201 	and.w	r2, r2, #1
 80011ac:	9201      	str	r2, [sp, #4]
 80011ae:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011b2:	f042 0210 	orr.w	r2, r2, #16
 80011b6:	631a      	str	r2, [r3, #48]	; 0x30
 80011b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011ba:	f002 0210 	and.w	r2, r2, #16
 80011be:	9202      	str	r2, [sp, #8]
 80011c0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011c4:	f042 0208 	orr.w	r2, r2, #8
 80011c8:	631a      	str	r2, [r3, #48]	; 0x30
 80011ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011cc:	f002 0208 	and.w	r2, r2, #8
 80011d0:	9203      	str	r2, [sp, #12]
 80011d2:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80011d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011da:	631a      	str	r2, [r3, #48]	; 0x30
 80011dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011de:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80011e2:	9204      	str	r2, [sp, #16]
 80011e4:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80011e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011ec:	631a      	str	r2, [r3, #48]	; 0x30
 80011ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011f0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80011f4:	9205      	str	r2, [sp, #20]
 80011f6:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011fa:	f042 0201 	orr.w	r2, r2, #1
 80011fe:	631a      	str	r2, [r3, #48]	; 0x30
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001202:	9707      	str	r7, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001204:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120a:	9306      	str	r3, [sp, #24]
 800120c:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800120e:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001210:	f001 fab4 	bl	800277c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001214:	2308      	movs	r3, #8
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001216:	a907      	add	r1, sp, #28
 8001218:	4817      	ldr	r0, [pc, #92]	; (8001278 <HAL_DCMI_MspInit+0x104>)
    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800121a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121c:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800121e:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001224:	f001 faaa 	bl	800277c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001228:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800122c:	a907      	add	r1, sp, #28
 800122e:	4813      	ldr	r0, [pc, #76]	; (800127c <HAL_DCMI_MspInit+0x108>)
    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001230:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001234:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800123a:	f001 fa9f 	bl	800277c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 800123e:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001242:	a907      	add	r1, sp, #28
 8001244:	480e      	ldr	r0, [pc, #56]	; (8001280 <HAL_DCMI_MspInit+0x10c>)
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 8001246:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001248:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800124a:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124e:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001250:	f001 fa94 	bl	800277c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001254:	2350      	movs	r3, #80	; 0x50
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001256:	a907      	add	r1, sp, #28
 8001258:	480a      	ldr	r0, [pc, #40]	; (8001284 <HAL_DCMI_MspInit+0x110>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800125c:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001260:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001262:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001264:	f001 fa8a 	bl	800277c <HAL_GPIO_Init>
}
 8001268:	b00d      	add	sp, #52	; 0x34
 800126a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800126c:	50050000 	.word	0x50050000
 8001270:	40023800 	.word	0x40023800
 8001274:	40021000 	.word	0x40021000
 8001278:	40020c00 	.word	0x40020c00
 800127c:	40021800 	.word	0x40021800
 8001280:	40021c00 	.word	0x40021c00
 8001284:	40020000 	.word	0x40020000

08001288 <HAL_DMA2D_MspInit>:
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{

  if(hdma2d->Instance==DMA2D)
 8001288:	6802      	ldr	r2, [r0, #0]
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <HAL_DMA2D_MspInit+0x28>)
 800128c:	429a      	cmp	r2, r3
 800128e:	d000      	beq.n	8001292 <HAL_DMA2D_MspInit+0xa>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001290:	4770      	bx	lr
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001292:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
{
 8001296:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800129a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800129e:	631a      	str	r2, [r3, #48]	; 0x30
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	9b01      	ldr	r3, [sp, #4]
}
 80012aa:	b002      	add	sp, #8
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	4002b000 	.word	0x4002b000

080012b4 <HAL_I2C_MspInit>:
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 80012b4:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b6:	2300      	movs	r3, #0
  if(hi2c->Instance==I2C1)
 80012b8:	4929      	ldr	r1, [pc, #164]	; (8001360 <HAL_I2C_MspInit+0xac>)
{
 80012ba:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hi2c->Instance==I2C1)
 80012bc:	428a      	cmp	r2, r1
{
 80012be:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	9306      	str	r3, [sp, #24]
 80012c2:	9305      	str	r3, [sp, #20]
 80012c4:	9307      	str	r3, [sp, #28]
 80012c6:	9308      	str	r3, [sp, #32]
 80012c8:	9309      	str	r3, [sp, #36]	; 0x24
  if(hi2c->Instance==I2C1)
 80012ca:	d028      	beq.n	800131e <HAL_I2C_MspInit+0x6a>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C3)
 80012cc:	4b25      	ldr	r3, [pc, #148]	; (8001364 <HAL_I2C_MspInit+0xb0>)
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d001      	beq.n	80012d6 <HAL_I2C_MspInit+0x22>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80012d2:	b00b      	add	sp, #44	; 0x2c
 80012d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80012d6:	4c24      	ldr	r4, [pc, #144]	; (8001368 <HAL_I2C_MspInit+0xb4>)
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80012d8:	f44f 7ec0 	mov.w	lr, #384	; 0x180
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80012dc:	2204      	movs	r2, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012de:	2712      	movs	r7, #18
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80012e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012e2:	2601      	movs	r6, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e4:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012e6:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80012e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012ec:	481f      	ldr	r0, [pc, #124]	; (800136c <HAL_I2C_MspInit+0xb8>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ee:	6323      	str	r3, [r4, #48]	; 0x30
 80012f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80012f2:	f8cd e014 	str.w	lr, [sp, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80012f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012fa:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012fc:	9607      	str	r6, [sp, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80012fe:	9303      	str	r3, [sp, #12]
 8001300:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001302:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001304:	9209      	str	r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001306:	f001 fa39 	bl	800277c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800130a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800130c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001310:	6423      	str	r3, [r4, #64]	; 0x40
 8001312:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001314:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001318:	9304      	str	r3, [sp, #16]
 800131a:	9b04      	ldr	r3, [sp, #16]
}
 800131c:	e7d9      	b.n	80012d2 <HAL_I2C_MspInit+0x1e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800131e:	4c12      	ldr	r4, [pc, #72]	; (8001368 <HAL_I2C_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001320:	2204      	movs	r2, #4
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001322:	f44f 7740 	mov.w	r7, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001326:	2612      	movs	r6, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001328:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800132a:	2501      	movs	r5, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132c:	a905      	add	r1, sp, #20
 800132e:	4810      	ldr	r0, [pc, #64]	; (8001370 <HAL_I2C_MspInit+0xbc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001330:	f043 0302 	orr.w	r3, r3, #2
 8001334:	6323      	str	r3, [r4, #48]	; 0x30
 8001336:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001338:	9705      	str	r7, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800133a:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800133e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001340:	9507      	str	r5, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	9301      	str	r3, [sp, #4]
 8001344:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001346:	9209      	str	r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001348:	f001 fa18 	bl	800277c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800134c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800134e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001352:	6423      	str	r3, [r4, #64]	; 0x40
 8001354:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001356:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800135a:	9302      	str	r3, [sp, #8]
 800135c:	9b02      	ldr	r3, [sp, #8]
 800135e:	e7b8      	b.n	80012d2 <HAL_I2C_MspInit+0x1e>
 8001360:	40005400 	.word	0x40005400
 8001364:	40005c00 	.word	0x40005c00
 8001368:	40023800 	.word	0x40023800
 800136c:	40021c00 	.word	0x40021c00
 8001370:	40020400 	.word	0x40020400

08001374 <HAL_I2C_MspDeInit>:
*/

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{

  if(hi2c->Instance==I2C1)
 8001374:	6803      	ldr	r3, [r0, #0]
 8001376:	4a0e      	ldr	r2, [pc, #56]	; (80013b0 <HAL_I2C_MspDeInit+0x3c>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d00e      	beq.n	800139a <HAL_I2C_MspDeInit+0x26>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
  else if(hi2c->Instance==I2C3)
 800137c:	4a0d      	ldr	r2, [pc, #52]	; (80013b4 <HAL_I2C_MspDeInit+0x40>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d000      	beq.n	8001384 <HAL_I2C_MspDeInit+0x10>
 8001382:	4770      	bx	lr
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001384:	f502 32ee 	add.w	r2, r2, #121856	; 0x1dc00
  
    /**I2C3 GPIO Configuration    
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA 
    */
    HAL_GPIO_DeInit(GPIOH, LCD_SCL_Pin|LCD_SDA_Pin);
 8001388:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800138c:	480a      	ldr	r0, [pc, #40]	; (80013b8 <HAL_I2C_MspDeInit+0x44>)
    __HAL_RCC_I2C3_CLK_DISABLE();
 800138e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001390:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001394:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOH, LCD_SCL_Pin|LCD_SDA_Pin);
 8001396:	f001 bb1b 	b.w	80029d0 <HAL_GPIO_DeInit>
    __HAL_RCC_I2C1_CLK_DISABLE();
 800139a:	f502 32f2 	add.w	r2, r2, #123904	; 0x1e400
    HAL_GPIO_DeInit(GPIOB, ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin);
 800139e:	f44f 7140 	mov.w	r1, #768	; 0x300
 80013a2:	4806      	ldr	r0, [pc, #24]	; (80013bc <HAL_I2C_MspDeInit+0x48>)
    __HAL_RCC_I2C1_CLK_DISABLE();
 80013a4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80013a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80013aa:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin);
 80013ac:	f001 bb10 	b.w	80029d0 <HAL_GPIO_DeInit>
 80013b0:	40005400 	.word	0x40005400
 80013b4:	40005c00 	.word	0x40005c00
 80013b8:	40021c00 	.word	0x40021c00
 80013bc:	40020400 	.word	0x40020400

080013c0 <HAL_LTDC_MspInit>:
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hltdc->Instance==LTDC)
 80013c0:	6802      	ldr	r2, [r0, #0]
 80013c2:	4b3e      	ldr	r3, [pc, #248]	; (80014bc <HAL_LTDC_MspInit+0xfc>)
{
 80013c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hltdc->Instance==LTDC)
 80013c6:	429a      	cmp	r2, r3
{
 80013c8:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ca:	f04f 0400 	mov.w	r4, #0
 80013ce:	9408      	str	r4, [sp, #32]
 80013d0:	9407      	str	r4, [sp, #28]
 80013d2:	9409      	str	r4, [sp, #36]	; 0x24
 80013d4:	940a      	str	r4, [sp, #40]	; 0x28
 80013d6:	940b      	str	r4, [sp, #44]	; 0x2c
  if(hltdc->Instance==LTDC)
 80013d8:	d001      	beq.n	80013de <HAL_LTDC_MspInit+0x1e>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80013da:	b00d      	add	sp, #52	; 0x34
 80013dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_LTDC_CLK_ENABLE();
 80013de:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80013e2:	2710      	movs	r7, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e4:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013e6:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
 80013e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80013ea:	a907      	add	r1, sp, #28
 80013ec:	4834      	ldr	r0, [pc, #208]	; (80014c0 <HAL_LTDC_MspInit+0x100>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 80013ee:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80013f2:	645a      	str	r2, [r3, #68]	; 0x44
 80013f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013f6:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80013fa:	9201      	str	r2, [sp, #4]
 80013fc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001400:	433a      	orrs	r2, r7
 8001402:	631a      	str	r2, [r3, #48]	; 0x30
 8001404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001406:	403a      	ands	r2, r7
 8001408:	9202      	str	r2, [sp, #8]
 800140a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800140c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800140e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001412:	631a      	str	r2, [r3, #48]	; 0x30
 8001414:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001416:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800141a:	9203      	str	r2, [sp, #12]
 800141c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800141e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001420:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001424:	631a      	str	r2, [r3, #48]	; 0x30
 8001426:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001428:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800142c:	9204      	str	r2, [sp, #16]
 800142e:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001430:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001432:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001436:	631a      	str	r2, [r3, #48]	; 0x30
 8001438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800143a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800143e:	9205      	str	r2, [sp, #20]
 8001440:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001442:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001444:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001448:	631a      	str	r2, [r3, #48]	; 0x30
 800144a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800144c:	9707      	str	r7, [sp, #28]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800144e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001454:	9306      	str	r3, [sp, #24]
 8001456:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001458:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800145a:	f001 f98f 	bl	800277c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 800145e:	f64e 73ff 	movw	r3, #61439	; 0xefff
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001462:	a907      	add	r1, sp, #28
 8001464:	4817      	ldr	r0, [pc, #92]	; (80014c4 <HAL_LTDC_MspInit+0x104>)
    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8001466:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800146a:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001470:	f001 f984 	bl	800277c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8001474:	23f7      	movs	r3, #247	; 0xf7
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001476:	a907      	add	r1, sp, #28
 8001478:	4813      	ldr	r0, [pc, #76]	; (80014c8 <HAL_LTDC_MspInit+0x108>)
    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 800147a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147c:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800147e:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001484:	f001 f97a 	bl	800277c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001488:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800148c:	2309      	movs	r3, #9
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800148e:	a907      	add	r1, sp, #28
 8001490:	480e      	ldr	r0, [pc, #56]	; (80014cc <HAL_LTDC_MspInit+0x10c>)
    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001492:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001494:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001496:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800149c:	f001 f96e 	bl	800277c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80014a0:	f44f 4346 	mov.w	r3, #50688	; 0xc600
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80014a4:	a907      	add	r1, sp, #28
 80014a6:	480a      	ldr	r0, [pc, #40]	; (80014d0 <HAL_LTDC_MspInit+0x110>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014a8:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ae:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80014b0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80014b2:	f001 f963 	bl	800277c <HAL_GPIO_Init>
}
 80014b6:	b00d      	add	sp, #52	; 0x34
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40016800 	.word	0x40016800
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40022400 	.word	0x40022400
 80014c8:	40022800 	.word	0x40022800
 80014cc:	40021800 	.word	0x40021800
 80014d0:	40022000 	.word	0x40022000

080014d4 <HAL_QSPI_MspInit>:
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hqspi->Instance==QUADSPI)
 80014d4:	6802      	ldr	r2, [r0, #0]
 80014d6:	4b31      	ldr	r3, [pc, #196]	; (800159c <HAL_QSPI_MspInit+0xc8>)
{
 80014d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(hqspi->Instance==QUADSPI)
 80014dc:	429a      	cmp	r2, r3
{
 80014de:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f04f 0400 	mov.w	r4, #0
 80014e4:	9406      	str	r4, [sp, #24]
 80014e6:	9405      	str	r4, [sp, #20]
 80014e8:	9407      	str	r4, [sp, #28]
 80014ea:	9408      	str	r4, [sp, #32]
 80014ec:	9409      	str	r4, [sp, #36]	; 0x24
  if(hqspi->Instance==QUADSPI)
 80014ee:	d002      	beq.n	80014f6 <HAL_QSPI_MspInit+0x22>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80014f0:	b00a      	add	sp, #40	; 0x28
 80014f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_QSPI_CLK_ENABLE();
 80014f6:	4b2a      	ldr	r3, [pc, #168]	; (80015a0 <HAL_QSPI_MspInit+0xcc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fa:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80014fc:	2709      	movs	r7, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 80014fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001500:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001504:	a905      	add	r1, sp, #20
 8001506:	4827      	ldr	r0, [pc, #156]	; (80015a4 <HAL_QSPI_MspInit+0xd0>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001508:	4332      	orrs	r2, r6
 800150a:	639a      	str	r2, [r3, #56]	; 0x38
 800150c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800150e:	4032      	ands	r2, r6
 8001510:	9201      	str	r2, [sp, #4]
 8001512:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001514:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001516:	f042 0210 	orr.w	r2, r2, #16
 800151a:	631a      	str	r2, [r3, #48]	; 0x30
 800151c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800151e:	f002 0210 	and.w	r2, r2, #16
 8001522:	9202      	str	r2, [sp, #8]
 8001524:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001528:	4332      	orrs	r2, r6
 800152a:	631a      	str	r2, [r3, #48]	; 0x30
 800152c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800152e:	4032      	ands	r2, r6
 8001530:	9203      	str	r2, [sp, #12]
 8001532:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001536:	f042 0208 	orr.w	r2, r2, #8
 800153a:	631a      	str	r2, [r3, #48]	; 0x30
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800153e:	f8cd 8014 	str.w	r8, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001542:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001548:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800154a:	9304      	str	r3, [sp, #16]
 800154c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800154e:	9709      	str	r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001550:	f001 f914 	bl	800277c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001554:	2240      	movs	r2, #64	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001556:	230a      	movs	r3, #10
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001558:	a905      	add	r1, sp, #20
 800155a:	4813      	ldr	r0, [pc, #76]	; (80015a8 <HAL_QSPI_MspInit+0xd4>)
    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800155c:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800155e:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001560:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001562:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001566:	f001 f909 	bl	800277c <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156a:	a905      	add	r1, sp, #20
 800156c:	480e      	ldr	r0, [pc, #56]	; (80015a8 <HAL_QSPI_MspInit+0xd4>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800156e:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001574:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001576:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157a:	f001 f8ff 	bl	800277c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800157e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001582:	a905      	add	r1, sp, #20
 8001584:	4809      	ldr	r0, [pc, #36]	; (80015ac <HAL_QSPI_MspInit+0xd8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001588:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800158a:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800158e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001590:	f001 f8f4 	bl	800277c <HAL_GPIO_Init>
}
 8001594:	b00a      	add	sp, #40	; 0x28
 8001596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800159a:	bf00      	nop
 800159c:	a0001000 	.word	0xa0001000
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40020400 	.word	0x40020400
 80015ac:	40020c00 	.word	0x40020c00

080015b0 <HAL_RTC_MspInit>:
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{

  if(hrtc->Instance==RTC)
 80015b0:	6802      	ldr	r2, [r0, #0]
 80015b2:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <HAL_RTC_MspInit+0x18>)
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d000      	beq.n	80015ba <HAL_RTC_MspInit+0xa>
 80015b8:	4770      	bx	lr
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80015ba:	4a04      	ldr	r2, [pc, #16]	; (80015cc <HAL_RTC_MspInit+0x1c>)
 80015bc:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80015be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015c2:	6713      	str	r3, [r2, #112]	; 0x70
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	40002800 	.word	0x40002800
 80015cc:	40023800 	.word	0x40023800

080015d0 <HAL_SD_MspInit>:
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hsd->Instance==SDMMC1)
 80015d0:	6802      	ldr	r2, [r0, #0]
 80015d2:	4b23      	ldr	r3, [pc, #140]	; (8001660 <HAL_SD_MspInit+0x90>)
{
 80015d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hsd->Instance==SDMMC1)
 80015d6:	429a      	cmp	r2, r3
{
 80015d8:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015da:	f04f 0400 	mov.w	r4, #0
 80015de:	9404      	str	r4, [sp, #16]
 80015e0:	9403      	str	r4, [sp, #12]
 80015e2:	9405      	str	r4, [sp, #20]
 80015e4:	9406      	str	r4, [sp, #24]
 80015e6:	9407      	str	r4, [sp, #28]
  if(hsd->Instance==SDMMC1)
 80015e8:	d001      	beq.n	80015ee <HAL_SD_MspInit+0x1e>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80015ea:	b009      	add	sp, #36	; 0x24
 80015ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80015ee:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80015f2:	250c      	movs	r5, #12
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 80015f4:	f44f 50f8 	mov.w	r0, #7936	; 0x1f00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f8:	2702      	movs	r7, #2
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80015fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fc:	2603      	movs	r6, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015fe:	eb0d 0105 	add.w	r1, sp, r5
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001602:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001606:	645a      	str	r2, [r3, #68]	; 0x44
 8001608:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800160a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800160e:	9200      	str	r2, [sp, #0]
 8001610:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001612:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001614:	f042 0204 	orr.w	r2, r2, #4
 8001618:	631a      	str	r2, [r3, #48]	; 0x30
 800161a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800161c:	f002 0204 	and.w	r2, r2, #4
 8001620:	9201      	str	r2, [sp, #4]
 8001622:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001626:	f042 0208 	orr.w	r2, r2, #8
 800162a:	631a      	str	r2, [r3, #48]	; 0x30
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 800162e:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001630:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001634:	480b      	ldr	r0, [pc, #44]	; (8001664 <HAL_SD_MspInit+0x94>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	9704      	str	r7, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001638:	9302      	str	r3, [sp, #8]
 800163a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800163e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001640:	f001 f89c 	bl	800277c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001644:	2304      	movs	r3, #4
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001646:	eb0d 0105 	add.w	r1, sp, r5
 800164a:	4807      	ldr	r0, [pc, #28]	; (8001668 <HAL_SD_MspInit+0x98>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164c:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001650:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001654:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001656:	f001 f891 	bl	800277c <HAL_GPIO_Init>
}
 800165a:	b009      	add	sp, #36	; 0x24
 800165c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800165e:	bf00      	nop
 8001660:	40012c00 	.word	0x40012c00
 8001664:	40020800 	.word	0x40020800
 8001668:	40020c00 	.word	0x40020c00

0800166c <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM1)
 800166c:	6803      	ldr	r3, [r0, #0]
{
 800166e:	b086      	sub	sp, #24
  if(htim_base->Instance==TIM1)
 8001670:	4a25      	ldr	r2, [pc, #148]	; (8001708 <HAL_TIM_Base_MspInit+0x9c>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d019      	beq.n	80016aa <HAL_TIM_Base_MspInit+0x3e>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8001676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800167a:	d022      	beq.n	80016c2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 800167c:	4a23      	ldr	r2, [pc, #140]	; (800170c <HAL_TIM_Base_MspInit+0xa0>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d02b      	beq.n	80016da <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 8001682:	4a23      	ldr	r2, [pc, #140]	; (8001710 <HAL_TIM_Base_MspInit+0xa4>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d033      	beq.n	80016f0 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(htim_base->Instance==TIM8)
 8001688:	4a22      	ldr	r2, [pc, #136]	; (8001714 <HAL_TIM_Base_MspInit+0xa8>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d001      	beq.n	8001692 <HAL_TIM_Base_MspInit+0x26>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800168e:	b006      	add	sp, #24
 8001690:	4770      	bx	lr
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001692:	4b21      	ldr	r3, [pc, #132]	; (8001718 <HAL_TIM_Base_MspInit+0xac>)
 8001694:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001696:	f042 0202 	orr.w	r2, r2, #2
 800169a:	645a      	str	r2, [r3, #68]	; 0x44
 800169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	9305      	str	r3, [sp, #20]
 80016a4:	9b05      	ldr	r3, [sp, #20]
}
 80016a6:	b006      	add	sp, #24
 80016a8:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016aa:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <HAL_TIM_Base_MspInit+0xac>)
 80016ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016ae:	f042 0201 	orr.w	r2, r2, #1
 80016b2:	645a      	str	r2, [r3, #68]	; 0x44
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	9301      	str	r3, [sp, #4]
 80016bc:	9b01      	ldr	r3, [sp, #4]
}
 80016be:	b006      	add	sp, #24
 80016c0:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016c2:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80016c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016c8:	f042 0201 	orr.w	r2, r2, #1
 80016cc:	641a      	str	r2, [r3, #64]	; 0x40
 80016ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	9302      	str	r3, [sp, #8]
 80016d6:	9b02      	ldr	r3, [sp, #8]
 80016d8:	e7d9      	b.n	800168e <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016da:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <HAL_TIM_Base_MspInit+0xac>)
 80016dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016de:	f042 0202 	orr.w	r2, r2, #2
 80016e2:	641a      	str	r2, [r3, #64]	; 0x40
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	9303      	str	r3, [sp, #12]
 80016ec:	9b03      	ldr	r3, [sp, #12]
 80016ee:	e7ce      	b.n	800168e <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80016f0:	4b09      	ldr	r3, [pc, #36]	; (8001718 <HAL_TIM_Base_MspInit+0xac>)
 80016f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016f4:	f042 0208 	orr.w	r2, r2, #8
 80016f8:	641a      	str	r2, [r3, #64]	; 0x40
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	f003 0308 	and.w	r3, r3, #8
 8001700:	9304      	str	r3, [sp, #16]
 8001702:	9b04      	ldr	r3, [sp, #16]
 8001704:	e7c3      	b.n	800168e <HAL_TIM_Base_MspInit+0x22>
 8001706:	bf00      	nop
 8001708:	40010000 	.word	0x40010000
 800170c:	40000400 	.word	0x40000400
 8001710:	40000c00 	.word	0x40000c00
 8001714:	40010400 	.word	0x40010400
 8001718:	40023800 	.word	0x40023800

0800171c <HAL_TIM_PWM_MspInit>:
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM12)
 800171c:	6802      	ldr	r2, [r0, #0]
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <HAL_TIM_PWM_MspInit+0x28>)
 8001720:	429a      	cmp	r2, r3
 8001722:	d000      	beq.n	8001726 <HAL_TIM_PWM_MspInit+0xa>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001724:	4770      	bx	lr
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001726:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
{
 800172a:	b082      	sub	sp, #8
    __HAL_RCC_TIM12_CLK_ENABLE();
 800172c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800172e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001732:	641a      	str	r2, [r3, #64]	; 0x40
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800173a:	9301      	str	r3, [sp, #4]
 800173c:	9b01      	ldr	r3, [sp, #4]
}
 800173e:	b002      	add	sp, #8
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40001800 	.word	0x40001800

08001748 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8001748:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174a:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 800174c:	493e      	ldr	r1, [pc, #248]	; (8001848 <HAL_TIM_MspPostInit+0x100>)
{
 800174e:	b570      	push	{r4, r5, r6, lr}
  if(htim->Instance==TIM1)
 8001750:	428a      	cmp	r2, r1
{
 8001752:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	9306      	str	r3, [sp, #24]
 8001756:	9305      	str	r3, [sp, #20]
 8001758:	9307      	str	r3, [sp, #28]
 800175a:	9308      	str	r3, [sp, #32]
 800175c:	9309      	str	r3, [sp, #36]	; 0x24
  if(htim->Instance==TIM1)
 800175e:	d023      	beq.n	80017a8 <HAL_TIM_MspPostInit+0x60>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM2)
 8001760:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8001764:	d034      	beq.n	80017d0 <HAL_TIM_MspPostInit+0x88>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 8001766:	4b39      	ldr	r3, [pc, #228]	; (800184c <HAL_TIM_MspPostInit+0x104>)
 8001768:	429a      	cmp	r2, r3
 800176a:	d045      	beq.n	80017f8 <HAL_TIM_MspPostInit+0xb0>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(htim->Instance==TIM5)
 800176c:	4b38      	ldr	r3, [pc, #224]	; (8001850 <HAL_TIM_MspPostInit+0x108>)
 800176e:	429a      	cmp	r2, r3
 8001770:	d055      	beq.n	800181e <HAL_TIM_MspPostInit+0xd6>

  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }
  else if(htim->Instance==TIM12)
 8001772:	4b38      	ldr	r3, [pc, #224]	; (8001854 <HAL_TIM_MspPostInit+0x10c>)
 8001774:	429a      	cmp	r2, r3
 8001776:	d001      	beq.n	800177c <HAL_TIM_MspPostInit+0x34>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001778:	b00a      	add	sp, #40	; 0x28
 800177a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800177c:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001780:	2640      	movs	r6, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001784:	2409      	movs	r4, #9
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001786:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001788:	a905      	add	r1, sp, #20
 800178a:	4833      	ldr	r0, [pc, #204]	; (8001858 <HAL_TIM_MspPostInit+0x110>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800178c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001790:	631a      	str	r2, [r3, #48]	; 0x30
 8001792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001794:	9605      	str	r6, [sp, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001796:	f003 0380 	and.w	r3, r3, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800179c:	9409      	str	r4, [sp, #36]	; 0x24
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800179e:	9304      	str	r3, [sp, #16]
 80017a0:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80017a2:	f000 ffeb 	bl	800277c <HAL_GPIO_Init>
}
 80017a6:	e7e7      	b.n	8001778 <HAL_TIM_MspPostInit+0x30>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a8:	4b2c      	ldr	r3, [pc, #176]	; (800185c <HAL_TIM_MspPostInit+0x114>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017aa:	2401      	movs	r4, #1
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80017ac:	f44f 7680 	mov.w	r6, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b0:	2502      	movs	r5, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80017b4:	a905      	add	r1, sp, #20
 80017b6:	482a      	ldr	r0, [pc, #168]	; (8001860 <HAL_TIM_MspPostInit+0x118>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b8:	4322      	orrs	r2, r4
 80017ba:	631a      	str	r2, [r3, #48]	; 0x30
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80017be:	9605      	str	r6, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c0:	4023      	ands	r3, r4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c2:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017c4:	9409      	str	r4, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80017ca:	f000 ffd7 	bl	800277c <HAL_GPIO_Init>
 80017ce:	e7d3      	b.n	8001778 <HAL_TIM_MspPostInit+0x30>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d0:	4b22      	ldr	r3, [pc, #136]	; (800185c <HAL_TIM_MspPostInit+0x114>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017d2:	2401      	movs	r4, #1
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80017d4:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	2502      	movs	r5, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80017dc:	a905      	add	r1, sp, #20
 80017de:	4820      	ldr	r0, [pc, #128]	; (8001860 <HAL_TIM_MspPostInit+0x118>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e0:	4322      	orrs	r2, r4
 80017e2:	631a      	str	r2, [r3, #48]	; 0x30
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80017e6:	9605      	str	r6, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e8:	4023      	ands	r3, r4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ea:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017ec:	9409      	str	r4, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ee:	9301      	str	r3, [sp, #4]
 80017f0:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80017f2:	f000 ffc3 	bl	800277c <HAL_GPIO_Init>
 80017f6:	e7bf      	b.n	8001778 <HAL_TIM_MspPostInit+0x30>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f8:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80017fe:	2510      	movs	r5, #16
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8001800:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001802:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8001804:	4817      	ldr	r0, [pc, #92]	; (8001864 <HAL_TIM_MspPostInit+0x11c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001806:	4322      	orrs	r2, r4
 8001808:	631a      	str	r2, [r3, #48]	; 0x30
 800180a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800180c:	9505      	str	r5, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800180e:	4023      	ands	r3, r4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001810:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001812:	9409      	str	r4, [sp, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001814:	9302      	str	r3, [sp, #8]
 8001816:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8001818:	f000 ffb0 	bl	800277c <HAL_GPIO_Init>
 800181c:	e7ac      	b.n	8001778 <HAL_TIM_MspPostInit+0x30>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800181e:	f503 330b 	add.w	r3, r3, #142336	; 0x22c00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8001824:	2501      	movs	r5, #1
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8001826:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001828:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800182a:	480f      	ldr	r0, [pc, #60]	; (8001868 <HAL_TIM_MspPostInit+0x120>)
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800182c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001830:	631a      	str	r2, [r3, #48]	; 0x30
 8001832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8001834:	9505      	str	r5, [sp, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001836:	f403 7380 	and.w	r3, r3, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183a:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800183c:	9409      	str	r4, [sp, #36]	; 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800183e:	9303      	str	r3, [sp, #12]
 8001840:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8001842:	f000 ff9b 	bl	800277c <HAL_GPIO_Init>
 8001846:	e797      	b.n	8001778 <HAL_TIM_MspPostInit+0x30>
 8001848:	40010000 	.word	0x40010000
 800184c:	40000400 	.word	0x40000400
 8001850:	40000c00 	.word	0x40000c00
 8001854:	40001800 	.word	0x40001800
 8001858:	40021c00 	.word	0x40021c00
 800185c:	40023800 	.word	0x40023800
 8001860:	40020000 	.word	0x40020000
 8001864:	40020400 	.word	0x40020400
 8001868:	40022000 	.word	0x40022000

0800186c <HAL_UART_MspInit>:
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 800186c:	6803      	ldr	r3, [r0, #0]
 800186e:	4a30      	ldr	r2, [pc, #192]	; (8001930 <HAL_UART_MspInit+0xc4>)
{
 8001870:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(huart->Instance==USART1)
 8001872:	4293      	cmp	r3, r2
{
 8001874:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001876:	f04f 0400 	mov.w	r4, #0
 800187a:	9406      	str	r4, [sp, #24]
 800187c:	9405      	str	r4, [sp, #20]
 800187e:	9407      	str	r4, [sp, #28]
 8001880:	9408      	str	r4, [sp, #32]
 8001882:	9409      	str	r4, [sp, #36]	; 0x24
  if(huart->Instance==USART1)
 8001884:	d024      	beq.n	80018d0 <HAL_UART_MspInit+0x64>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8001886:	4a2b      	ldr	r2, [pc, #172]	; (8001934 <HAL_UART_MspInit+0xc8>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d001      	beq.n	8001890 <HAL_UART_MspInit+0x24>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800188c:	b00b      	add	sp, #44	; 0x2c
 800188e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART6_CLK_ENABLE();
 8001890:	4b29      	ldr	r3, [pc, #164]	; (8001938 <HAL_UART_MspInit+0xcc>)
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8001892:	27c0      	movs	r7, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001894:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001896:	2503      	movs	r5, #3
    __HAL_RCC_USART6_CLK_ENABLE();
 8001898:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800189a:	2408      	movs	r4, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800189c:	a905      	add	r1, sp, #20
 800189e:	4827      	ldr	r0, [pc, #156]	; (800193c <HAL_UART_MspInit+0xd0>)
    __HAL_RCC_USART6_CLK_ENABLE();
 80018a0:	f042 0220 	orr.w	r2, r2, #32
 80018a4:	645a      	str	r2, [r3, #68]	; 0x44
 80018a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80018a8:	f002 0220 	and.w	r2, r2, #32
 80018ac:	9203      	str	r2, [sp, #12]
 80018ae:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018b2:	f042 0204 	orr.w	r2, r2, #4
 80018b6:	631a      	str	r2, [r3, #48]	; 0x30
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80018ba:	9705      	str	r7, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018bc:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c0:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c2:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c4:	9304      	str	r3, [sp, #16]
 80018c6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80018c8:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ca:	f000 ff57 	bl	800277c <HAL_GPIO_Init>
}
 80018ce:	e7dd      	b.n	800188c <HAL_UART_MspInit+0x20>
    __HAL_RCC_USART1_CLK_ENABLE();
 80018d0:	4b19      	ldr	r3, [pc, #100]	; (8001938 <HAL_UART_MspInit+0xcc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d2:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018d4:	2507      	movs	r5, #7
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80018d6:	2780      	movs	r7, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 80018d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80018da:	a905      	add	r1, sp, #20
 80018dc:	4818      	ldr	r0, [pc, #96]	; (8001940 <HAL_UART_MspInit+0xd4>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80018de:	f042 0210 	orr.w	r2, r2, #16
 80018e2:	645a      	str	r2, [r3, #68]	; 0x44
 80018e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80018e6:	f002 0210 	and.w	r2, r2, #16
 80018ea:	9200      	str	r2, [sp, #0]
 80018ec:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018f0:	4332      	orrs	r2, r6
 80018f2:	631a      	str	r2, [r3, #48]	; 0x30
 80018f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018f6:	4032      	ands	r2, r6
 80018f8:	9201      	str	r2, [sp, #4]
 80018fa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018fe:	f042 0201 	orr.w	r2, r2, #1
 8001902:	631a      	str	r2, [r3, #48]	; 0x30
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001906:	9705      	str	r7, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001908:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800190e:	9509      	str	r5, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001910:	9302      	str	r3, [sp, #8]
 8001912:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001914:	f000 ff32 	bl	800277c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001918:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800191c:	a905      	add	r1, sp, #20
 800191e:	4809      	ldr	r0, [pc, #36]	; (8001944 <HAL_UART_MspInit+0xd8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001920:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001922:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001926:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001928:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800192a:	f000 ff27 	bl	800277c <HAL_GPIO_Init>
 800192e:	e7ad      	b.n	800188c <HAL_UART_MspInit+0x20>
 8001930:	40011000 	.word	0x40011000
 8001934:	40011400 	.word	0x40011400
 8001938:	40023800 	.word	0x40023800
 800193c:	40020800 	.word	0x40020800
 8001940:	40020400 	.word	0x40020400
 8001944:	40020000 	.word	0x40020000

08001948 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 8001948:	4b2b      	ldr	r3, [pc, #172]	; (80019f8 <HAL_SDRAM_MspInit+0xb0>)
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800194a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (FMC_Initialized) {
 800194c:	681c      	ldr	r4, [r3, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800194e:	b087      	sub	sp, #28
  if (FMC_Initialized) {
 8001950:	b10c      	cbz	r4, 8001956 <HAL_SDRAM_MspInit+0xe>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001952:	b007      	add	sp, #28
 8001954:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_RCC_FMC_CLK_ENABLE();
 8001956:	4a29      	ldr	r2, [pc, #164]	; (80019fc <HAL_SDRAM_MspInit+0xb4>)
  FMC_Initialized = 1;
 8001958:	2101      	movs	r1, #1
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800195a:	f64f 7083 	movw	r0, #65411	; 0xff83
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195e:	2702      	movs	r7, #2
  FMC_Initialized = 1;
 8001960:	6019      	str	r1, [r3, #0]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001962:	2603      	movs	r6, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8001964:	6b93      	ldr	r3, [r2, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001966:	250c      	movs	r5, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8001968:	430b      	orrs	r3, r1
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800196a:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 800196c:	6393      	str	r3, [r2, #56]	; 0x38
 800196e:	6b93      	ldr	r3, [r2, #56]	; 0x38
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8001970:	9001      	str	r0, [sp, #4]
  __HAL_RCC_FMC_CLK_ENABLE();
 8001972:	f003 0301 	and.w	r3, r3, #1
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001976:	4822      	ldr	r0, [pc, #136]	; (8001a00 <HAL_SDRAM_MspInit+0xb8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	9403      	str	r4, [sp, #12]
  __HAL_RCC_FMC_CLK_ENABLE();
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197e:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001980:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001982:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001984:	f000 fefa 	bl	800277c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8001988:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800198c:	a901      	add	r1, sp, #4
 800198e:	481d      	ldr	r0, [pc, #116]	; (8001a04 <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8001990:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001992:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001994:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001996:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800199a:	f000 feef 	bl	800277c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800199e:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019a2:	a901      	add	r1, sp, #4
 80019a4:	4818      	ldr	r0, [pc, #96]	; (8001a08 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 80019a6:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a8:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019aa:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019ac:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019b0:	f000 fee4 	bl	800277c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 80019b4:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019b8:	a901      	add	r1, sp, #4
 80019ba:	4814      	ldr	r0, [pc, #80]	; (8001a0c <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 80019bc:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019be:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c0:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019c2:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019c6:	f000 fed9 	bl	800277c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80019ca:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019cc:	a901      	add	r1, sp, #4
 80019ce:	4810      	ldr	r0, [pc, #64]	; (8001a10 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80019d0:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d4:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019d6:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019da:	f000 fecf 	bl	800277c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80019de:	2308      	movs	r3, #8
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80019e0:	a901      	add	r1, sp, #4
 80019e2:	480c      	ldr	r0, [pc, #48]	; (8001a14 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e4:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e6:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019e8:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80019ec:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80019ee:	f000 fec5 	bl	800277c <HAL_GPIO_Init>
}
 80019f2:	b007      	add	sp, #28
 80019f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019f6:	bf00      	nop
 80019f8:	2000059c 	.word	0x2000059c
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40021000 	.word	0x40021000
 8001a04:	40021800 	.word	0x40021800
 8001a08:	40020c00 	.word	0x40020c00
 8001a0c:	40021400 	.word	0x40021400
 8001a10:	40021c00 	.word	0x40021c00
 8001a14:	40020800 	.word	0x40020800

08001a18 <HAL_SAI_MspInit>:
void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8001a18:	4a25      	ldr	r2, [pc, #148]	; (8001ab0 <HAL_SAI_MspInit+0x98>)
 8001a1a:	6803      	ldr	r3, [r0, #0]
 8001a1c:	4293      	cmp	r3, r2
{
 8001a1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a20:	b089      	sub	sp, #36	; 0x24
    if(hsai->Instance==SAI2_Block_A)
 8001a22:	d023      	beq.n	8001a6c <HAL_SAI_MspInit+0x54>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);

    }
    if(hsai->Instance==SAI2_Block_B)
 8001a24:	4a23      	ldr	r2, [pc, #140]	; (8001ab4 <HAL_SAI_MspInit+0x9c>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d001      	beq.n	8001a2e <HAL_SAI_MspInit+0x16>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);

    }
}
 8001a2a:	b009      	add	sp, #36	; 0x24
 8001a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (SAI2_client == 0)
 8001a2e:	4b22      	ldr	r3, [pc, #136]	; (8001ab8 <HAL_SAI_MspInit+0xa0>)
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	b94a      	cbnz	r2, 8001a48 <HAL_SAI_MspInit+0x30>
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001a34:	4921      	ldr	r1, [pc, #132]	; (8001abc <HAL_SAI_MspInit+0xa4>)
 8001a36:	6c48      	ldr	r0, [r1, #68]	; 0x44
 8001a38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001a3c:	6448      	str	r0, [r1, #68]	; 0x44
 8001a3e:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001a40:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8001a44:	9102      	str	r1, [sp, #8]
 8001a46:	9902      	ldr	r1, [sp, #8]
    SAI2_client ++;
 8001a48:	3201      	adds	r2, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001a4c:	f44f 6780 	mov.w	r7, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a50:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001a52:	250a      	movs	r5, #10
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001a54:	a903      	add	r1, sp, #12
 8001a56:	481a      	ldr	r0, [pc, #104]	; (8001ac0 <HAL_SAI_MspInit+0xa8>)
    SAI2_client ++;
 8001a58:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001a5a:	9703      	str	r7, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5c:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a60:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001a62:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001a64:	f000 fe8a 	bl	800277c <HAL_GPIO_Init>
}
 8001a68:	b009      	add	sp, #36	; 0x24
 8001a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (SAI2_client == 0)
 8001a6c:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_SAI_MspInit+0xa0>)
 8001a6e:	4604      	mov	r4, r0
 8001a70:	689a      	ldr	r2, [r3, #8]
 8001a72:	b94a      	cbnz	r2, 8001a88 <HAL_SAI_MspInit+0x70>
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001a74:	4911      	ldr	r1, [pc, #68]	; (8001abc <HAL_SAI_MspInit+0xa4>)
 8001a76:	6c48      	ldr	r0, [r1, #68]	; 0x44
 8001a78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001a7c:	6448      	str	r0, [r1, #68]	; 0x44
 8001a7e:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001a80:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8001a84:	9101      	str	r1, [sp, #4]
 8001a86:	9901      	ldr	r1, [sp, #4]
    SAI2_client ++;
 8001a88:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001a8a:	f04f 0ef0 	mov.w	lr, #240	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a90:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001a92:	260a      	movs	r6, #10
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001a94:	a903      	add	r1, sp, #12
 8001a96:	480b      	ldr	r0, [pc, #44]	; (8001ac4 <HAL_SAI_MspInit+0xac>)
    SAI2_client ++;
 8001a98:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001a9a:	f8cd e00c 	str.w	lr, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9e:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa2:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001aa4:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001aa6:	f000 fe69 	bl	800277c <HAL_GPIO_Init>
 8001aaa:	6823      	ldr	r3, [r4, #0]
 8001aac:	e7ba      	b.n	8001a24 <HAL_SAI_MspInit+0xc>
 8001aae:	bf00      	nop
 8001ab0:	40015c04 	.word	0x40015c04
 8001ab4:	40015c24 	.word	0x40015c24
 8001ab8:	2000059c 	.word	0x2000059c
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40021800 	.word	0x40021800
 8001ac4:	40022000 	.word	0x40022000

08001ac8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac8:	b570      	push	{r4, r5, r6, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001aca:	4601      	mov	r1, r0
{
 8001acc:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2036      	movs	r0, #54	; 0x36
 8001ad2:	f000 fa27 	bl	8001f24 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001ad6:	2036      	movs	r0, #54	; 0x36
 8001ad8:	f000 fa5e 	bl	8001f98 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001adc:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <HAL_InitTick+0x6c>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ade:	a901      	add	r1, sp, #4
 8001ae0:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001ae2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001ae4:	4e14      	ldr	r6, [pc, #80]	; (8001b38 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001ae6:	f042 0210 	orr.w	r2, r2, #16
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001aea:	4c14      	ldr	r4, [pc, #80]	; (8001b3c <HAL_InitTick+0x74>)
 8001aec:	4d14      	ldr	r5, [pc, #80]	; (8001b40 <HAL_InitTick+0x78>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001aee:	641a      	str	r2, [r3, #64]	; 0x40
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	f003 0310 	and.w	r3, r3, #16
 8001af6:	9302      	str	r3, [sp, #8]
 8001af8:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001afa:	f002 f933 	bl	8003d64 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001afe:	f002 f911 	bl	8003d24 <HAL_RCC_GetPCLK1Freq>
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 8001b02:	2200      	movs	r2, #0
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001b04:	0043      	lsls	r3, r0, #1
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001b06:	f240 31e7 	movw	r1, #999	; 0x3e7
  htim6.Instance = TIM6;
 8001b0a:	6025      	str	r5, [r4, #0]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001b0c:	fba6 0303 	umull	r0, r3, r6, r3
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001b10:	4620      	mov	r0, r4
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001b12:	60e1      	str	r1, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001b14:	0c9b      	lsrs	r3, r3, #18
  htim6.Init.ClockDivision = 0;
 8001b16:	6122      	str	r2, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b18:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001b1a:	3b01      	subs	r3, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 8001b1c:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001b1e:	f003 fb6f 	bl	8005200 <HAL_TIM_Base_Init>
 8001b22:	b110      	cbz	r0, 8001b2a <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001b24:	2001      	movs	r0, #1
}
 8001b26:	b008      	add	sp, #32
 8001b28:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_TIM_Base_Start_IT(&htim6);
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	f003 fc0e 	bl	800534c <HAL_TIM_Base_Start_IT>
}
 8001b30:	b008      	add	sp, #32
 8001b32:	bd70      	pop	{r4, r5, r6, pc}
 8001b34:	40023800 	.word	0x40023800
 8001b38:	431bde83 	.word	0x431bde83
 8001b3c:	20019084 	.word	0x20019084
 8001b40:	40001000 	.word	0x40001000

08001b44 <NMI_Handler>:
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop

08001b48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b48:	e7fe      	b.n	8001b48 <HardFault_Handler>
 8001b4a:	bf00      	nop

08001b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b4c:	e7fe      	b.n	8001b4c <MemManage_Handler>
 8001b4e:	bf00      	nop

08001b50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b50:	e7fe      	b.n	8001b50 <BusFault_Handler>
 8001b52:	bf00      	nop

08001b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b54:	e7fe      	b.n	8001b54 <UsageFault_Handler>
 8001b56:	bf00      	nop

08001b58 <SVC_Handler>:
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop

08001b5c <DebugMon_Handler>:
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop

08001b60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop

08001b64 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b64:	4801      	ldr	r0, [pc, #4]	; (8001b6c <TIM6_DAC_IRQHandler+0x8>)
 8001b66:	f003 bd73 	b.w	8005650 <HAL_TIM_IRQHandler>
 8001b6a:	bf00      	nop
 8001b6c:	20019084 	.word	0x20019084

08001b70 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b70:	4a0f      	ldr	r2, [pc, #60]	; (8001bb0 <SystemInit+0x40>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001b72:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <SystemInit+0x44>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b74:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001b78:	490f      	ldr	r1, [pc, #60]	; (8001bb8 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b7a:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
{
 8001b7e:	b470      	push	{r4, r5, r6}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b80:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
  RCC->CFGR = 0x00000000;
 8001b84:	2400      	movs	r4, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001b86:	6818      	ldr	r0, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b88:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
  RCC->PLLCFGR = 0x24003010;
 8001b8c:	4e0b      	ldr	r6, [pc, #44]	; (8001bbc <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001;
 8001b8e:	f040 0001 	orr.w	r0, r0, #1
 8001b92:	6018      	str	r0, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001b94:	609c      	str	r4, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001b96:	6818      	ldr	r0, [r3, #0]
 8001b98:	4001      	ands	r1, r0
 8001b9a:	6019      	str	r1, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 8001b9c:	605e      	str	r6, [r3, #4]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001b9e:	6819      	ldr	r1, [r3, #0]
 8001ba0:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8001ba4:	6019      	str	r1, [r3, #0]
  RCC->CIR = 0x00000000;
 8001ba6:	60dc      	str	r4, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ba8:	6095      	str	r5, [r2, #8]
#endif
}
 8001baa:	bc70      	pop	{r4, r5, r6}
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	e000ed00 	.word	0xe000ed00
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	fef6ffff 	.word	0xfef6ffff
 8001bbc:	24003010 	.word	0x24003010

08001bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc0:	b508      	push	{r3, lr}
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8001bc2:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <HAL_Init+0x28>)
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc4:	2003      	movs	r0, #3
   __HAL_FLASH_ART_ENABLE();
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bcc:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bd4:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd6:	f000 f991 	bl	8001efc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bda:	2000      	movs	r0, #0
 8001bdc:	f7ff ff74 	bl	8001ac8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001be0:	f7ff fa6a 	bl	80010b8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8001be4:	2000      	movs	r0, #0
 8001be6:	bd08      	pop	{r3, pc}
 8001be8:	40023c00 	.word	0x40023c00

08001bec <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001bec:	4a03      	ldr	r2, [pc, #12]	; (8001bfc <HAL_IncTick+0x10>)
 8001bee:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <HAL_IncTick+0x14>)
 8001bf0:	6811      	ldr	r1, [r2, #0]
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	440b      	add	r3, r1
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	200190c4 	.word	0x200190c4
 8001c00:	20000004 	.word	0x20000004

08001c04 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001c04:	4b01      	ldr	r3, [pc, #4]	; (8001c0c <HAL_GetTick+0x8>)
 8001c06:	6818      	ldr	r0, [r3, #0]
}
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	200190c4 	.word	0x200190c4

08001c10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c10:	b538      	push	{r3, r4, r5, lr}
 8001c12:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001c14:	f7ff fff6 	bl	8001c04 <HAL_GetTick>
 8001c18:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c1a:	1c63      	adds	r3, r4, #1
 8001c1c:	d002      	beq.n	8001c24 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c1e:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <HAL_Delay+0x20>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c24:	f7ff ffee 	bl	8001c04 <HAL_GetTick>
 8001c28:	1b40      	subs	r0, r0, r5
 8001c2a:	4284      	cmp	r4, r0
 8001c2c:	d8fa      	bhi.n	8001c24 <HAL_Delay+0x14>
  {
  }
}
 8001c2e:	bd38      	pop	{r3, r4, r5, pc}
 8001c30:	20000004 	.word	0x20000004

08001c34 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c34:	2800      	cmp	r0, #0
 8001c36:	f000 80a4 	beq.w	8001d82 <HAL_ADC_Init+0x14e>
{
 8001c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c3c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001c3e:	4604      	mov	r4, r0
 8001c40:	b13b      	cbz	r3, 8001c52 <HAL_ADC_Init+0x1e>
    HAL_ADC_MspInit(hadc);
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c44:	06db      	lsls	r3, r3, #27
 8001c46:	d50c      	bpl.n	8001c62 <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c48:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 8001c4a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001c4c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 8001c52:	6443      	str	r3, [r0, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8001c54:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 8001c58:	f7ff fa46 	bl	80010e8 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c5e:	06db      	lsls	r3, r3, #27
 8001c60:	d4f2      	bmi.n	8001c48 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8001c62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c64:	4a48      	ldr	r2, [pc, #288]	; (8001d88 <HAL_ADC_Init+0x154>)
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001c66:	4949      	ldr	r1, [pc, #292]	; (8001d8c <HAL_ADC_Init+0x158>)
    ADC_STATE_CLR_SET(hadc->State,
 8001c68:	401a      	ands	r2, r3
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c6a:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c6c:	4e48      	ldr	r6, [pc, #288]	; (8001d90 <HAL_ADC_Init+0x15c>)
    ADC_STATE_CLR_SET(hadc->State,
 8001c6e:	f042 0202 	orr.w	r2, r2, #2
 8001c72:	6422      	str	r2, [r4, #64]	; 0x40
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001c74:	684a      	ldr	r2, [r1, #4]
 8001c76:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001c7a:	604a      	str	r2, [r1, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001c7c:	684a      	ldr	r2, [r1, #4]
 8001c7e:	6860      	ldr	r0, [r4, #4]
 8001c80:	4302      	orrs	r2, r0
 8001c82:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c84:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c86:	6920      	ldr	r0, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c8c:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c8e:	68e7      	ldr	r7, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c92:	685d      	ldr	r5, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c94:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c96:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c9a:	42b2      	cmp	r2, r6
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c9c:	605d      	str	r5, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c9e:	685d      	ldr	r5, [r3, #4]
 8001ca0:	f025 7540 	bic.w	r5, r5, #50331648	; 0x3000000
 8001ca4:	605d      	str	r5, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ca6:	6858      	ldr	r0, [r3, #4]
 8001ca8:	ea40 0001 	orr.w	r0, r0, r1
 8001cac:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001cae:	6898      	ldr	r0, [r3, #8]
 8001cb0:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 8001cb4:	6098      	str	r0, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001cb6:	6899      	ldr	r1, [r3, #8]
 8001cb8:	ea41 0107 	orr.w	r1, r1, r7
 8001cbc:	6099      	str	r1, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cbe:	d048      	beq.n	8001d52 <HAL_ADC_Init+0x11e>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cc0:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001cc2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cc4:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8001cc8:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001cca:	6899      	ldr	r1, [r3, #8]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cd0:	6899      	ldr	r1, [r3, #8]
 8001cd2:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8001cd6:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001cd8:	689a      	ldr	r2, [r3, #8]
 8001cda:	4302      	orrs	r2, r0
 8001cdc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001cde:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8001ce0:	69a5      	ldr	r5, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ce2:	f021 0102 	bic.w	r1, r1, #2
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ce6:	6a20      	ldr	r0, [r4, #32]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ce8:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8001cf0:	609a      	str	r2, [r3, #8]
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001cf2:	2800      	cmp	r0, #0
 8001cf4:	d136      	bne.n	8001d64 <HAL_ADC_Init+0x130>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cfc:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001cfe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    ADC_CLEAR_ERRORCODE(hadc);
 8001d00:	2600      	movs	r6, #0
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d02:	69e5      	ldr	r5, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d04:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8001d08:	f8d4 e030 	ldr.w	lr, [r4, #48]	; 0x30
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d0c:	6967      	ldr	r7, [r4, #20]
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d0e:	1e6a      	subs	r2, r5, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d10:	62d8      	str	r0, [r3, #44]	; 0x2c
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d12:	4630      	mov	r0, r6
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d14:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8001d16:	ea45 5502 	orr.w	r5, r5, r2, lsl #20
 8001d1a:	62dd      	str	r5, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d1c:	689d      	ldr	r5, [r3, #8]
 8001d1e:	f425 7500 	bic.w	r5, r5, #512	; 0x200
 8001d22:	609d      	str	r5, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8001d24:	6899      	ldr	r1, [r3, #8]
 8001d26:	ea41 214e 	orr.w	r1, r1, lr, lsl #9
 8001d2a:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d2c:	6899      	ldr	r1, [r3, #8]
 8001d2e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001d32:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d34:	689a      	ldr	r2, [r3, #8]
 8001d36:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8001d3a:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001d3c:	6466      	str	r6, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001d3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d40:	f023 0303 	bic.w	r3, r3, #3
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8001d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d60:	609a      	str	r2, [r3, #8]
 8001d62:	e7bc      	b.n	8001cde <HAL_ADC_Init+0xaa>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d64:	6858      	ldr	r0, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d66:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d68:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d6c:	1e51      	subs	r1, r2, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d6e:	6058      	str	r0, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d76:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001d7e:	605a      	str	r2, [r3, #4]
 8001d80:	e7bd      	b.n	8001cfe <HAL_ADC_Init+0xca>
    return HAL_ERROR;
 8001d82:	2001      	movs	r0, #1
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	ffffeefd 	.word	0xffffeefd
 8001d8c:	40012300 	.word	0x40012300
 8001d90:	0f000001 	.word	0x0f000001

08001d94 <HAL_ADC_ConfigChannel>:
  __HAL_LOCK(hadc);
 8001d94:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  __IO uint32_t counter = 0;
 8001d98:	2200      	movs	r2, #0
{
 8001d9a:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8001d9c:	2b01      	cmp	r3, #1
{
 8001d9e:	b083      	sub	sp, #12
  __IO uint32_t counter = 0;
 8001da0:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001da2:	d05b      	beq.n	8001e5c <HAL_ADC_ConfigChannel+0xc8>
	if (sConfig->Channel > ADC_CHANNEL_9)
 8001da4:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8001da6:	2301      	movs	r3, #1
	if (sConfig->Channel > ADC_CHANNEL_9)
 8001da8:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8001daa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
	if (sConfig->Channel > ADC_CHANNEL_9)
 8001dae:	d828      	bhi.n	8001e02 <HAL_ADC_ConfigChannel+0x6e>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001db0:	6804      	ldr	r4, [r0, #0]
 8001db2:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 8001db6:	2707      	movs	r7, #7
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001db8:	688b      	ldr	r3, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001dba:	6922      	ldr	r2, [r4, #16]
 8001dbc:	40b7      	lsls	r7, r6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001dbe:	40b3      	lsls	r3, r6
 8001dc0:	462e      	mov	r6, r5
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001dc2:	ea22 0207 	bic.w	r2, r2, r7
 8001dc6:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001dc8:	6922      	ldr	r2, [r4, #16]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	6123      	str	r3, [r4, #16]
  if (sConfig->Rank < 7)
 8001dce:	684b      	ldr	r3, [r1, #4]
 8001dd0:	2b06      	cmp	r3, #6
 8001dd2:	d830      	bhi.n	8001e36 <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001dd4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001dd8:	211f      	movs	r1, #31
 8001dda:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001ddc:	3b05      	subs	r3, #5
 8001dde:	4099      	lsls	r1, r3
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001de0:	fa06 f303 	lsl.w	r3, r6, r3
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001de4:	ea22 0201 	bic.w	r2, r2, r1
 8001de8:	6362      	str	r2, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001dea:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001dec:	4313      	orrs	r3, r2
 8001dee:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001df0:	4b3e      	ldr	r3, [pc, #248]	; (8001eec <HAL_ADC_ConfigChannel+0x158>)
 8001df2:	429c      	cmp	r4, r3
 8001df4:	d044      	beq.n	8001e80 <HAL_ADC_ConfigChannel+0xec>
  __HAL_UNLOCK(hadc);
 8001df6:	2300      	movs	r3, #0
 8001df8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001dfc:	4618      	mov	r0, r3
}
 8001dfe:	b003      	add	sp, #12
 8001e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e02:	b2ae      	uxth	r6, r5
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e04:	6804      	ldr	r4, [r0, #0]
 8001e06:	2707      	movs	r7, #7
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e08:	f8df e0e4 	ldr.w	lr, [pc, #228]	; 8001ef0 <HAL_ADC_ConfigChannel+0x15c>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e0c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8001e10:	68e2      	ldr	r2, [r4, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e12:	4575      	cmp	r5, lr
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e14:	f1a3 031e 	sub.w	r3, r3, #30
 8001e18:	fa07 f703 	lsl.w	r7, r7, r3
 8001e1c:	ea22 0207 	bic.w	r2, r2, r7
 8001e20:	60e2      	str	r2, [r4, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e22:	d055      	beq.n	8001ed0 <HAL_ADC_ConfigChannel+0x13c>
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e24:	688a      	ldr	r2, [r1, #8]
 8001e26:	68e7      	ldr	r7, [r4, #12]
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	433b      	orrs	r3, r7
 8001e2e:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7)
 8001e30:	684b      	ldr	r3, [r1, #4]
 8001e32:	2b06      	cmp	r3, #6
 8001e34:	d9ce      	bls.n	8001dd4 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13)
 8001e36:	2b0c      	cmp	r3, #12
 8001e38:	d813      	bhi.n	8001e62 <HAL_ADC_ConfigChannel+0xce>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e3a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001e3e:	271f      	movs	r7, #31
 8001e40:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001e42:	f1a3 0123 	sub.w	r1, r3, #35	; 0x23
 8001e46:	fa07 f301 	lsl.w	r3, r7, r1
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e4a:	fa06 f101 	lsl.w	r1, r6, r1
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e4e:	ea22 0303 	bic.w	r3, r2, r3
 8001e52:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e54:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e56:	4319      	orrs	r1, r3
 8001e58:	6321      	str	r1, [r4, #48]	; 0x30
 8001e5a:	e7c9      	b.n	8001df0 <HAL_ADC_ConfigChannel+0x5c>
  __HAL_LOCK(hadc);
 8001e5c:	2002      	movs	r0, #2
}
 8001e5e:	b003      	add	sp, #12
 8001e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e62:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8001e66:	271f      	movs	r7, #31
 8001e68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e6a:	3a41      	subs	r2, #65	; 0x41
 8001e6c:	4097      	lsls	r7, r2
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e6e:	fa06 f102 	lsl.w	r1, r6, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e72:	ea23 0307 	bic.w	r3, r3, r7
 8001e76:	62e3      	str	r3, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e78:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001e7a:	4311      	orrs	r1, r2
 8001e7c:	62e1      	str	r1, [r4, #44]	; 0x2c
 8001e7e:	e7b7      	b.n	8001df0 <HAL_ADC_ConfigChannel+0x5c>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e80:	2d12      	cmp	r5, #18
 8001e82:	d02c      	beq.n	8001ede <HAL_ADC_ConfigChannel+0x14a>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e84:	4b1a      	ldr	r3, [pc, #104]	; (8001ef0 <HAL_ADC_ConfigChannel+0x15c>)
 8001e86:	429d      	cmp	r5, r3
 8001e88:	d001      	beq.n	8001e8e <HAL_ADC_ConfigChannel+0xfa>
 8001e8a:	2d11      	cmp	r5, #17
 8001e8c:	d1b3      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x62>
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001e8e:	4a19      	ldr	r2, [pc, #100]	; (8001ef4 <HAL_ADC_ConfigChannel+0x160>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e90:	4917      	ldr	r1, [pc, #92]	; (8001ef0 <HAL_ADC_ConfigChannel+0x15c>)
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001e92:	6853      	ldr	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e94:	428d      	cmp	r5, r1
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001e96:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e9a:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e9c:	d1ab      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x62>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001e9e:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8001ea2:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <HAL_ADC_ConfigChannel+0x164>)
 8001ea4:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f202 3283 	addw	r2, r2, #899	; 0x383
 8001eae:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb2:	0c9b      	lsrs	r3, r3, #18
 8001eb4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8001ebc:	9b01      	ldr	r3, [sp, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d099      	beq.n	8001df6 <HAL_ADC_ConfigChannel+0x62>
        counter--;
 8001ec2:	9b01      	ldr	r3, [sp, #4]
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8001ec8:	9b01      	ldr	r3, [sp, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f9      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x12e>
 8001ece:	e792      	b.n	8001df6 <HAL_ADC_ConfigChannel+0x62>
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001ed0:	68e3      	ldr	r3, [r4, #12]
 8001ed2:	2612      	movs	r6, #18
 8001ed4:	688a      	ldr	r2, [r1, #8]
 8001ed6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001eda:	60e3      	str	r3, [r4, #12]
 8001edc:	e777      	b.n	8001dce <HAL_ADC_ConfigChannel+0x3a>
    ADC->CCR |= ADC_CCR_VBATE;
 8001ede:	4a05      	ldr	r2, [pc, #20]	; (8001ef4 <HAL_ADC_ConfigChannel+0x160>)
 8001ee0:	6853      	ldr	r3, [r2, #4]
 8001ee2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ee6:	6053      	str	r3, [r2, #4]
 8001ee8:	e785      	b.n	8001df6 <HAL_ADC_ConfigChannel+0x62>
 8001eea:	bf00      	nop
 8001eec:	40012000 	.word	0x40012000
 8001ef0:	10000012 	.word	0x10000012
 8001ef4:	40012300 	.word	0x40012300
 8001ef8:	20000000 	.word	0x20000000

08001efc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001efc:	4907      	ldr	r1, [pc, #28]	; (8001f1c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001efe:	0200      	lsls	r0, r0, #8
 8001f00:	4b07      	ldr	r3, [pc, #28]	; (8001f20 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f02:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001f04:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f08:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f0a:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8001f0e:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001f10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f14:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f16:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 8001f18:	60c8      	str	r0, [r1, #12]
 8001f1a:	4770      	bx	lr
 8001f1c:	e000ed00 	.word	0xe000ed00
 8001f20:	05fa0000 	.word	0x05fa0000

08001f24 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f24:	4b19      	ldr	r3, [pc, #100]	; (8001f8c <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f26:	b470      	push	{r4, r5, r6}
 8001f28:	68dc      	ldr	r4, [r3, #12]
 8001f2a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f2e:	f1c4 0607 	rsb	r6, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f32:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f34:	2e04      	cmp	r6, #4
 8001f36:	bf28      	it	cs
 8001f38:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f3a:	2b06      	cmp	r3, #6
 8001f3c:	d919      	bls.n	8001f72 <HAL_NVIC_SetPriority+0x4e>
 8001f3e:	3c03      	subs	r4, #3
 8001f40:	2501      	movs	r5, #1
 8001f42:	40a5      	lsls	r5, r4
 8001f44:	3d01      	subs	r5, #1
 8001f46:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f48:	2301      	movs	r3, #1
  if ((int32_t)(IRQn) < 0)
 8001f4a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f4c:	fa03 f306 	lsl.w	r3, r3, r6
 8001f50:	f103 33ff 	add.w	r3, r3, #4294967295
 8001f54:	ea01 0103 	and.w	r1, r1, r3
 8001f58:	fa01 f104 	lsl.w	r1, r1, r4
 8001f5c:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) < 0)
 8001f60:	db0a      	blt.n	8001f78 <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f62:	0109      	lsls	r1, r1, #4
 8001f64:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <HAL_NVIC_SetPriority+0x6c>)
 8001f66:	b2c9      	uxtb	r1, r1
 8001f68:	4403      	add	r3, r0
 8001f6a:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001f6e:	bc70      	pop	{r4, r5, r6}
 8001f70:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f72:	2200      	movs	r2, #0
 8001f74:	4614      	mov	r4, r2
 8001f76:	e7e7      	b.n	8001f48 <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f78:	f000 000f 	and.w	r0, r0, #15
 8001f7c:	0109      	lsls	r1, r1, #4
 8001f7e:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <HAL_NVIC_SetPriority+0x70>)
 8001f80:	b2c9      	uxtb	r1, r1
 8001f82:	4403      	add	r3, r0
 8001f84:	7619      	strb	r1, [r3, #24]
 8001f86:	bc70      	pop	{r4, r5, r6}
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	e000ed00 	.word	0xe000ed00
 8001f90:	e000e100 	.word	0xe000e100
 8001f94:	e000ecfc 	.word	0xe000ecfc

08001f98 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001f98:	f000 011f 	and.w	r1, r0, #31
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	4a03      	ldr	r2, [pc, #12]	; (8001fac <HAL_NVIC_EnableIRQ+0x14>)
 8001fa0:	0940      	lsrs	r0, r0, #5
 8001fa2:	408b      	lsls	r3, r1
 8001fa4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	e000e100 	.word	0xe000e100

08001fb0 <HAL_DCMI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{     
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8001fb0:	2800      	cmp	r0, #0
 8001fb2:	d044      	beq.n	800203e <HAL_DCMI_Init+0x8e>
{     
 8001fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
                
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8001fb6:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001fba:	4604      	mov	r4, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d038      	beq.n	8002032 <HAL_DCMI_Init+0x82>
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001fc0:	6861      	ldr	r1, [r4, #4]
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8001fc2:	2602      	movs	r6, #2
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001fc4:	6963      	ldr	r3, [r4, #20]
 8001fc6:	68e0      	ldr	r0, [r4, #12]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart);
                                     
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001fc8:	2910      	cmp	r1, #16
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001fca:	ea43 0301 	orr.w	r3, r3, r1
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001fce:	6925      	ldr	r5, [r4, #16]
 8001fd0:	68a2      	ldr	r2, [r4, #8]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001fd2:	ea43 0300 	orr.w	r3, r3, r0
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001fd6:	69a0      	ldr	r0, [r4, #24]
 8001fd8:	6a27      	ldr	r7, [r4, #32]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001fda:	ea43 0305 	orr.w	r3, r3, r5
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8001fde:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001fe2:	6a66      	ldr	r6, [r4, #36]	; 0x24
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001fe4:	ea43 0302 	orr.w	r3, r3, r2
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001fe8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8001fea:	6822      	ldr	r2, [r4, #0]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001fec:	ea43 0300 	orr.w	r3, r3, r0
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001ff0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001ff2:	ea43 0307 	orr.w	r3, r3, r7
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8001ff6:	6817      	ldr	r7, [r2, #0]
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001ff8:	ea43 0306 	orr.w	r3, r3, r6
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8001ffc:	4e11      	ldr	r6, [pc, #68]	; (8002044 <HAL_DCMI_Init+0x94>)
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001ffe:	ea43 0305 	orr.w	r3, r3, r5
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8002002:	ea06 0607 	and.w	r6, r6, r7
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8002006:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8002008:	ea43 0300 	orr.w	r3, r3, r0
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800200c:	6016      	str	r6, [r2, #0]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800200e:	6810      	ldr	r0, [r2, #0]
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8002010:	ea43 0305 	orr.w	r3, r3, r5
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002014:	ea43 0300 	orr.w	r3, r3, r0
 8002018:	6013      	str	r3, [r2, #0]
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800201a:	d00d      	beq.n	8002038 <HAL_DCMI_Init+0x88>
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800201c:	68d3      	ldr	r3, [r2, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800201e:	2100      	movs	r1, #0
  
  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002020:	2501      	movs	r5, #1
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002022:	f043 031e 	orr.w	r3, r3, #30

  return HAL_OK;
 8002026:	4608      	mov	r0, r1
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002028:	60d3      	str	r3, [r2, #12]
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800202a:	64e1      	str	r1, [r4, #76]	; 0x4c
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800202c:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  return HAL_OK;
 8002030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_DCMI_MspInit(hdcmi);
 8002032:	f7ff f89f 	bl	8001174 <HAL_DCMI_MspInit>
 8002036:	e7c3      	b.n	8001fc0 <HAL_DCMI_Init+0x10>
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8002038:	69e3      	ldr	r3, [r4, #28]
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 800203a:	6193      	str	r3, [r2, #24]
 800203c:	e7ee      	b.n	800201c <HAL_DCMI_Init+0x6c>
     return HAL_ERROR;
 800203e:	2001      	movs	r0, #1
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	ffe0f007 	.word	0xffe0f007

08002048 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800204a:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 800204c:	f7ff fdda 	bl	8001c04 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002050:	2c00      	cmp	r4, #0
 8002052:	d076      	beq.n	8002142 <HAL_DMA_Init+0xfa>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002054:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002056:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8002058:	2100      	movs	r1, #0
 800205a:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 800205c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8002060:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 8002062:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8002066:	f022 0201 	bic.w	r2, r2, #1
 800206a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800206c:	e005      	b.n	800207a <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800206e:	f7ff fdc9 	bl	8001c04 <HAL_GetTick>
 8002072:	1b40      	subs	r0, r0, r5
 8002074:	2805      	cmp	r0, #5
 8002076:	d83e      	bhi.n	80020f6 <HAL_DMA_Init+0xae>
 8002078:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	07d1      	lsls	r1, r2, #31
 800207e:	d4f6      	bmi.n	800206e <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002080:	68a1      	ldr	r1, [r4, #8]
 8002082:	6862      	ldr	r2, [r4, #4]
 8002084:	68e0      	ldr	r0, [r4, #12]
 8002086:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002088:	6921      	ldr	r1, [r4, #16]
 800208a:	6965      	ldr	r5, [r4, #20]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800208c:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800208e:	69a6      	ldr	r6, [r4, #24]
 8002090:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002092:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002094:	4f37      	ldr	r7, [pc, #220]	; (8002174 <HAL_DMA_Init+0x12c>)
  tmp = hdma->Instance->CR;
 8002096:	6819      	ldr	r1, [r3, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002098:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800209a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800209c:	400f      	ands	r7, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800209e:	6a21      	ldr	r1, [r4, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020a0:	4332      	orrs	r2, r6
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020a2:	2d04      	cmp	r5, #4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020a4:	ea42 0200 	orr.w	r2, r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80020a8:	ea42 0201 	orr.w	r2, r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020ac:	ea42 0207 	orr.w	r2, r2, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020b0:	d028      	beq.n	8002104 <HAL_DMA_Init+0xbc>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020b4:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020b6:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020ba:	4315      	orrs	r5, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	482e      	ldr	r0, [pc, #184]	; (8002178 <HAL_DMA_Init+0x130>)
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020c0:	492e      	ldr	r1, [pc, #184]	; (800217c <HAL_DMA_Init+0x134>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020c2:	3a10      	subs	r2, #16
  hdma->Instance->FCR = tmp;
 80020c4:	615d      	str	r5, [r3, #20]
  hdma->State = HAL_DMA_STATE_READY;
 80020c6:	2501      	movs	r5, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020c8:	fba0 0202 	umull	r0, r2, r0, r2
 80020cc:	0912      	lsrs	r2, r2, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020ce:	5c88      	ldrb	r0, [r1, r2]
  
  if (stream_number > 3U)
 80020d0:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020d2:	4a2b      	ldr	r2, [pc, #172]	; (8002180 <HAL_DMA_Init+0x138>)
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020d4:	f04f 0100 	mov.w	r1, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020d8:	65e0      	str	r0, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020da:	ea02 0203 	and.w	r2, r2, r3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020de:	f04f 033f 	mov.w	r3, #63	; 0x3f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020e2:	bf88      	it	hi
 80020e4:	3204      	addhi	r2, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020e6:	4083      	lsls	r3, r0
  return HAL_OK;
 80020e8:	4608      	mov	r0, r1
 80020ea:	65a2      	str	r2, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020ec:	6093      	str	r3, [r2, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020ee:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80020f0:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  return HAL_OK;
 80020f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020f8:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 80020fa:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020fc:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020fe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 8002102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002104:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002106:	6b21      	ldr	r1, [r4, #48]	; 0x30
    tmp |= hdma->Init.FIFOThreshold;
 8002108:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800210a:	4301      	orrs	r1, r0
    tmp |= hdma->Init.FIFOThreshold;
 800210c:	f047 0504 	orr.w	r5, r7, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002110:	430a      	orrs	r2, r1
  hdma->Instance->CR = tmp;  
 8002112:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8002114:	695a      	ldr	r2, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002116:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 800211a:	4315      	orrs	r5, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800211c:	2800      	cmp	r0, #0
 800211e:	d0cd      	beq.n	80020bc <HAL_DMA_Init+0x74>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002120:	b18e      	cbz	r6, 8002146 <HAL_DMA_Init+0xfe>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002122:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8002126:	d018      	beq.n	800215a <HAL_DMA_Init+0x112>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002128:	2f02      	cmp	r7, #2
 800212a:	d903      	bls.n	8002134 <HAL_DMA_Init+0xec>
 800212c:	2f03      	cmp	r7, #3
 800212e:	d1c5      	bne.n	80020bc <HAL_DMA_Init+0x74>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002130:	01c2      	lsls	r2, r0, #7
 8002132:	d5c3      	bpl.n	80020bc <HAL_DMA_Init+0x74>
        hdma->State = HAL_DMA_STATE_READY;
 8002134:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002136:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 8002138:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800213a:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800213c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8002140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002142:	2001      	movs	r0, #1
 8002144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 8002146:	2f01      	cmp	r7, #1
 8002148:	d003      	beq.n	8002152 <HAL_DMA_Init+0x10a>
 800214a:	d3f1      	bcc.n	8002130 <HAL_DMA_Init+0xe8>
 800214c:	2f02      	cmp	r7, #2
 800214e:	d1b5      	bne.n	80020bc <HAL_DMA_Init+0x74>
 8002150:	e7ee      	b.n	8002130 <HAL_DMA_Init+0xe8>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002152:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8002156:	d1b1      	bne.n	80020bc <HAL_DMA_Init+0x74>
 8002158:	e7ec      	b.n	8002134 <HAL_DMA_Init+0xec>
    switch (tmp)
 800215a:	2f03      	cmp	r7, #3
 800215c:	d8ae      	bhi.n	80020bc <HAL_DMA_Init+0x74>
 800215e:	a201      	add	r2, pc, #4	; (adr r2, 8002164 <HAL_DMA_Init+0x11c>)
 8002160:	f852 f027 	ldr.w	pc, [r2, r7, lsl #2]
 8002164:	08002135 	.word	0x08002135
 8002168:	08002131 	.word	0x08002131
 800216c:	08002135 	.word	0x08002135
 8002170:	08002153 	.word	0x08002153
 8002174:	f010803f 	.word	0xf010803f
 8002178:	aaaaaaab 	.word	0xaaaaaaab
 800217c:	0801da44 	.word	0x0801da44
 8002180:	fffffc00 	.word	0xfffffc00

08002184 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8002184:	2800      	cmp	r0, #0
 8002186:	d036      	beq.n	80021f6 <HAL_DMA_DeInit+0x72>
 8002188:	4603      	mov	r3, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800218a:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
 800218e:	b2c0      	uxtb	r0, r0
 8002190:	2802      	cmp	r0, #2
 8002192:	d02f      	beq.n	80021f4 <HAL_DMA_DeInit+0x70>
  __HAL_DMA_DISABLE(hdma);
 8002194:	681a      	ldr	r2, [r3, #0]
  hdma->Instance->CR   = 0U;
 8002196:	2000      	movs	r0, #0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002198:	b2d1      	uxtb	r1, r2
{
 800219a:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800219c:	3910      	subs	r1, #16
 800219e:	4f17      	ldr	r7, [pc, #92]	; (80021fc <HAL_DMA_DeInit+0x78>)
  __HAL_DMA_DISABLE(hdma);
 80021a0:	6814      	ldr	r4, [r2, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80021a2:	2621      	movs	r6, #33	; 0x21
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80021a4:	fba7 7101 	umull	r7, r1, r7, r1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021a8:	4d15      	ldr	r5, [pc, #84]	; (8002200 <HAL_DMA_DeInit+0x7c>)
  __HAL_DMA_DISABLE(hdma);
 80021aa:	f024 0401 	bic.w	r4, r4, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80021ae:	0909      	lsrs	r1, r1, #4
  __HAL_DMA_DISABLE(hdma);
 80021b0:	6014      	str	r4, [r2, #0]
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021b2:	243f      	movs	r4, #63	; 0x3f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021b4:	5c6d      	ldrb	r5, [r5, r1]
  if (stream_number > 3U)
 80021b6:	2903      	cmp	r1, #3
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021b8:	4912      	ldr	r1, [pc, #72]	; (8002204 <HAL_DMA_DeInit+0x80>)
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ba:	fa04 f405 	lsl.w	r4, r4, r5
  hdma->Instance->CR   = 0U;
 80021be:	6010      	str	r0, [r2, #0]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021c0:	ea01 0102 	and.w	r1, r1, r2
  hdma->Instance->NDTR = 0U;
 80021c4:	6050      	str	r0, [r2, #4]
  hdma->Instance->PAR  = 0U;
 80021c6:	6090      	str	r0, [r2, #8]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021c8:	bf88      	it	hi
 80021ca:	3104      	addhi	r1, #4
  hdma->Instance->M0AR = 0U;
 80021cc:	60d0      	str	r0, [r2, #12]
  hdma->Instance->M1AR = 0U;
 80021ce:	6110      	str	r0, [r2, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80021d0:	6156      	str	r6, [r2, #20]
  hdma->XferCpltCallback = NULL;
 80021d2:	2200      	movs	r2, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021d4:	65dd      	str	r5, [r3, #92]	; 0x5c
 80021d6:	6599      	str	r1, [r3, #88]	; 0x58
  return HAL_OK;
 80021d8:	4610      	mov	r0, r2
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021da:	608c      	str	r4, [r1, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021dc:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->XferCpltCallback = NULL;
 80021de:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80021e0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80021e2:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80021e4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80021e6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80021e8:	651a      	str	r2, [r3, #80]	; 0x50
  hdma->State = HAL_DMA_STATE_RESET;
 80021ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 80021ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 80021f2:	bcf0      	pop	{r4, r5, r6, r7}
 80021f4:	4770      	bx	lr
    return HAL_ERROR;
 80021f6:	2001      	movs	r0, #1
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	aaaaaaab 	.word	0xaaaaaaab
 8002200:	0801da44 	.word	0x0801da44
 8002204:	fffffc00 	.word	0xfffffc00

08002208 <HAL_DMA_Start_IT>:
{
 8002208:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 800220a:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800220e:	2c01      	cmp	r4, #1
 8002210:	d00e      	beq.n	8002230 <HAL_DMA_Start_IT+0x28>
 8002212:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8002214:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002218:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 800221a:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 800221c:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002220:	d00a      	beq.n	8002238 <HAL_DMA_Start_IT+0x30>
    __HAL_UNLOCK(hdma);	  
 8002222:	2200      	movs	r2, #0
    status = HAL_BUSY;
 8002224:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);	  
 8002226:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
}
 800222a:	4618      	mov	r0, r3
 800222c:	bcf0      	pop	{r4, r5, r6, r7}
 800222e:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8002230:	2302      	movs	r3, #2
}
 8002232:	bcf0      	pop	{r4, r5, r6, r7}
 8002234:	4618      	mov	r0, r3
 8002236:	4770      	bx	lr
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002238:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 800223a:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800223c:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800223e:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002242:	6545      	str	r5, [r0, #84]	; 0x54
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002244:	6887      	ldr	r7, [r0, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002246:	6825      	ldr	r5, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002248:	2f40      	cmp	r7, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800224a:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 800224e:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8002250:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002252:	d019      	beq.n	8002288 <HAL_DMA_Start_IT+0x80>
    hdma->Instance->PAR = SrcAddress;
 8002254:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8002256:	60e2      	str	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002258:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 800225a:	233f      	movs	r3, #63	; 0x3f
    if(hdma->XferHalfCpltCallback != NULL)
 800225c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800225e:	408b      	lsls	r3, r1
 8002260:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002262:	6823      	ldr	r3, [r4, #0]
 8002264:	f043 0316 	orr.w	r3, r3, #22
 8002268:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800226a:	6963      	ldr	r3, [r4, #20]
 800226c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002270:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8002272:	b11a      	cbz	r2, 800227c <HAL_DMA_Start_IT+0x74>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002274:	6823      	ldr	r3, [r4, #0]
 8002276:	f043 0308 	orr.w	r3, r3, #8
 800227a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800227c:	6822      	ldr	r2, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800227e:	2300      	movs	r3, #0
    __HAL_DMA_ENABLE(hdma);
 8002280:	f042 0201 	orr.w	r2, r2, #1
 8002284:	6022      	str	r2, [r4, #0]
 8002286:	e7d0      	b.n	800222a <HAL_DMA_Start_IT+0x22>
    hdma->Instance->PAR = DstAddress;
 8002288:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 800228a:	60e1      	str	r1, [r4, #12]
 800228c:	e7e4      	b.n	8002258 <HAL_DMA_Start_IT+0x50>
 800228e:	bf00      	nop

08002290 <HAL_DMA_IRQHandler>:
{
 8002290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002292:	4604      	mov	r4, r0
 8002294:	b083      	sub	sp, #12
  __IO uint32_t count = 0;
 8002296:	2000      	movs	r0, #0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002298:	2208      	movs	r2, #8
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800229a:	6da7      	ldr	r7, [r4, #88]	; 0x58
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800229c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  __IO uint32_t count = 0;
 800229e:	9001      	str	r0, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022a0:	409a      	lsls	r2, r3
  tmpisr = regs->ISR;
 80022a2:	683d      	ldr	r5, [r7, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 80022a4:	4960      	ldr	r1, [pc, #384]	; (8002428 <HAL_DMA_IRQHandler+0x198>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022a6:	4215      	tst	r5, r2
  uint32_t timeout = SystemCoreClock / 9600;
 80022a8:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022aa:	d003      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80022ac:	6821      	ldr	r1, [r4, #0]
 80022ae:	6808      	ldr	r0, [r1, #0]
 80022b0:	0740      	lsls	r0, r0, #29
 80022b2:	d476      	bmi.n	80023a2 <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80022b4:	2201      	movs	r2, #1
 80022b6:	409a      	lsls	r2, r3
 80022b8:	4215      	tst	r5, r2
 80022ba:	d003      	beq.n	80022c4 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80022bc:	6821      	ldr	r1, [r4, #0]
 80022be:	6949      	ldr	r1, [r1, #20]
 80022c0:	0608      	lsls	r0, r1, #24
 80022c2:	d468      	bmi.n	8002396 <HAL_DMA_IRQHandler+0x106>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80022c4:	2204      	movs	r2, #4
 80022c6:	409a      	lsls	r2, r3
 80022c8:	4215      	tst	r5, r2
 80022ca:	d003      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80022cc:	6821      	ldr	r1, [r4, #0]
 80022ce:	6809      	ldr	r1, [r1, #0]
 80022d0:	0789      	lsls	r1, r1, #30
 80022d2:	d45a      	bmi.n	800238a <HAL_DMA_IRQHandler+0xfa>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022d4:	2210      	movs	r2, #16
 80022d6:	409a      	lsls	r2, r3
 80022d8:	4215      	tst	r5, r2
 80022da:	d003      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022dc:	6821      	ldr	r1, [r4, #0]
 80022de:	6808      	ldr	r0, [r1, #0]
 80022e0:	0700      	lsls	r0, r0, #28
 80022e2:	d43f      	bmi.n	8002364 <HAL_DMA_IRQHandler+0xd4>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022e4:	2220      	movs	r2, #32
 80022e6:	409a      	lsls	r2, r3
 80022e8:	4215      	tst	r5, r2
 80022ea:	d003      	beq.n	80022f4 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022ec:	6821      	ldr	r1, [r4, #0]
 80022ee:	6808      	ldr	r0, [r1, #0]
 80022f0:	06c0      	lsls	r0, r0, #27
 80022f2:	d425      	bmi.n	8002340 <HAL_DMA_IRQHandler+0xb0>
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80022f6:	b30b      	cbz	r3, 800233c <HAL_DMA_IRQHandler+0xac>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80022fa:	07da      	lsls	r2, r3, #31
 80022fc:	d51a      	bpl.n	8002334 <HAL_DMA_IRQHandler+0xa4>
      hdma->State = HAL_DMA_STATE_ABORT;
 80022fe:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8002300:	6821      	ldr	r1, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8002302:	4a4a      	ldr	r2, [pc, #296]	; (800242c <HAL_DMA_IRQHandler+0x19c>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8002304:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  uint32_t timeout = SystemCoreClock / 9600;
 8002308:	fba2 3206 	umull	r3, r2, r2, r6
      __HAL_DMA_DISABLE(hdma);
 800230c:	680b      	ldr	r3, [r1, #0]
 800230e:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 8002312:	0a92      	lsrs	r2, r2, #10
      __HAL_DMA_DISABLE(hdma);
 8002314:	600b      	str	r3, [r1, #0]
 8002316:	e002      	b.n	800231e <HAL_DMA_IRQHandler+0x8e>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002318:	680b      	ldr	r3, [r1, #0]
 800231a:	07db      	lsls	r3, r3, #31
 800231c:	d504      	bpl.n	8002328 <HAL_DMA_IRQHandler+0x98>
        if (++count > timeout)
 800231e:	9b01      	ldr	r3, [sp, #4]
 8002320:	3301      	adds	r3, #1
 8002322:	429a      	cmp	r2, r3
 8002324:	9301      	str	r3, [sp, #4]
 8002326:	d2f7      	bcs.n	8002318 <HAL_DMA_IRQHandler+0x88>
      __HAL_UNLOCK(hdma);
 8002328:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 800232a:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 800232c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8002330:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8002334:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002336:	b10b      	cbz	r3, 800233c <HAL_DMA_IRQHandler+0xac>
      hdma->XferErrorCallback(hdma);
 8002338:	4620      	mov	r0, r4
 800233a:	4798      	blx	r3
}
 800233c:	b003      	add	sp, #12
 800233e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002340:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002342:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8002346:	2a05      	cmp	r2, #5
 8002348:	d03b      	beq.n	80023c2 <HAL_DMA_IRQHandler+0x132>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800234a:	680b      	ldr	r3, [r1, #0]
 800234c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002350:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002352:	d054      	beq.n	80023fe <HAL_DMA_IRQHandler+0x16e>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002354:	0319      	lsls	r1, r3, #12
 8002356:	d55f      	bpl.n	8002418 <HAL_DMA_IRQHandler+0x188>
        if(hdma->XferCpltCallback != NULL)
 8002358:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0ca      	beq.n	80022f4 <HAL_DMA_IRQHandler+0x64>
          hdma->XferCpltCallback(hdma);
 800235e:	4620      	mov	r0, r4
 8002360:	4798      	blx	r3
 8002362:	e7c7      	b.n	80022f4 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002364:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002366:	680a      	ldr	r2, [r1, #0]
 8002368:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800236c:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800236e:	d122      	bne.n	80023b6 <HAL_DMA_IRQHandler+0x126>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002370:	05d2      	lsls	r2, r2, #23
 8002372:	d403      	bmi.n	800237c <HAL_DMA_IRQHandler+0xec>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002374:	680a      	ldr	r2, [r1, #0]
 8002376:	f022 0208 	bic.w	r2, r2, #8
 800237a:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800237c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800237e:	2a00      	cmp	r2, #0
 8002380:	d0b0      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 8002382:	4620      	mov	r0, r4
 8002384:	4790      	blx	r2
 8002386:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002388:	e7ac      	b.n	80022e4 <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800238a:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800238c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800238e:	f042 0204 	orr.w	r2, r2, #4
 8002392:	6562      	str	r2, [r4, #84]	; 0x54
 8002394:	e79e      	b.n	80022d4 <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002396:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002398:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800239a:	f042 0202 	orr.w	r2, r2, #2
 800239e:	6562      	str	r2, [r4, #84]	; 0x54
 80023a0:	e790      	b.n	80022c4 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023a2:	6808      	ldr	r0, [r1, #0]
 80023a4:	f020 0004 	bic.w	r0, r0, #4
 80023a8:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023aa:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023ac:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80023ae:	f042 0201 	orr.w	r2, r2, #1
 80023b2:	6562      	str	r2, [r4, #84]	; 0x54
 80023b4:	e77e      	b.n	80022b4 <HAL_DMA_IRQHandler+0x24>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023b6:	0311      	lsls	r1, r2, #12
 80023b8:	d5e0      	bpl.n	800237c <HAL_DMA_IRQHandler+0xec>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80023ba:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80023bc:	2a00      	cmp	r2, #0
 80023be:	d1e0      	bne.n	8002382 <HAL_DMA_IRQHandler+0xf2>
 80023c0:	e790      	b.n	80022e4 <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023c2:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023c4:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023c6:	f022 0216 	bic.w	r2, r2, #22
 80023ca:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023cc:	694a      	ldr	r2, [r1, #20]
 80023ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023d2:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023d4:	b320      	cbz	r0, 8002420 <HAL_DMA_IRQHandler+0x190>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023d6:	680a      	ldr	r2, [r1, #0]
 80023d8:	f022 0208 	bic.w	r2, r2, #8
 80023dc:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023de:	223f      	movs	r2, #63	; 0x3f
        __HAL_UNLOCK(hdma);
 80023e0:	2500      	movs	r5, #0
        hdma->State = HAL_DMA_STATE_READY;
 80023e2:	2001      	movs	r0, #1
        if(hdma->XferAbortCallback != NULL)
 80023e4:	6d21      	ldr	r1, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 80023ec:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80023f0:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80023f4:	2900      	cmp	r1, #0
 80023f6:	d0a1      	beq.n	800233c <HAL_DMA_IRQHandler+0xac>
          hdma->XferAbortCallback(hdma);
 80023f8:	4620      	mov	r0, r4
 80023fa:	4788      	blx	r1
 80023fc:	e79e      	b.n	800233c <HAL_DMA_IRQHandler+0xac>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023fe:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8002402:	d1a9      	bne.n	8002358 <HAL_DMA_IRQHandler+0xc8>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002404:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002406:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002408:	f022 0210 	bic.w	r2, r2, #16
 800240c:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 800240e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002412:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 8002416:	e79f      	b.n	8002358 <HAL_DMA_IRQHandler+0xc8>
          if(hdma->XferM1CpltCallback != NULL)
 8002418:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800241a:	2b00      	cmp	r3, #0
 800241c:	d19f      	bne.n	800235e <HAL_DMA_IRQHandler+0xce>
 800241e:	e769      	b.n	80022f4 <HAL_DMA_IRQHandler+0x64>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002420:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002422:	2a00      	cmp	r2, #0
 8002424:	d1d7      	bne.n	80023d6 <HAL_DMA_IRQHandler+0x146>
 8002426:	e7da      	b.n	80023de <HAL_DMA_IRQHandler+0x14e>
 8002428:	20000000 	.word	0x20000000
 800242c:	1b4e81b5 	.word	0x1b4e81b5

08002430 <HAL_DMA_RegisterCallback>:
{
 8002430:	4603      	mov	r3, r0
  __HAL_LOCK(hdma);
 8002432:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8002436:	2801      	cmp	r0, #1
 8002438:	d00d      	beq.n	8002456 <HAL_DMA_RegisterCallback+0x26>
 800243a:	2001      	movs	r0, #1
{
 800243c:	b410      	push	{r4}
  if(HAL_DMA_STATE_READY == hdma->State)
 800243e:	f893 4035 	ldrb.w	r4, [r3, #53]	; 0x35
  __HAL_LOCK(hdma);
 8002442:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002446:	4284      	cmp	r4, r0
 8002448:	d007      	beq.n	800245a <HAL_DMA_RegisterCallback+0x2a>
  __HAL_UNLOCK(hdma);
 800244a:	2200      	movs	r2, #0
}
 800244c:	f85d 4b04 	ldr.w	r4, [sp], #4
  __HAL_UNLOCK(hdma);
 8002450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8002454:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8002456:	2002      	movs	r0, #2
 8002458:	4770      	bx	lr
    switch (CallbackID)
 800245a:	2905      	cmp	r1, #5
 800245c:	d816      	bhi.n	800248c <HAL_DMA_RegisterCallback+0x5c>
 800245e:	e8df f001 	tbb	[pc, r1]
 8002462:	0f12      	.short	0x0f12
 8002464:	0306090c 	.word	0x0306090c
      hdma->XferAbortCallback = pCallback;
 8002468:	651a      	str	r2, [r3, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 800246a:	2000      	movs	r0, #0
      break;
 800246c:	e7ed      	b.n	800244a <HAL_DMA_RegisterCallback+0x1a>
      hdma->XferErrorCallback = pCallback;
 800246e:	64da      	str	r2, [r3, #76]	; 0x4c
  HAL_StatusTypeDef status = HAL_OK;
 8002470:	2000      	movs	r0, #0
      break;
 8002472:	e7ea      	b.n	800244a <HAL_DMA_RegisterCallback+0x1a>
      hdma->XferM1HalfCpltCallback = pCallback;
 8002474:	649a      	str	r2, [r3, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 8002476:	2000      	movs	r0, #0
      break;
 8002478:	e7e7      	b.n	800244a <HAL_DMA_RegisterCallback+0x1a>
      hdma->XferM1CpltCallback = pCallback;
 800247a:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_StatusTypeDef status = HAL_OK;
 800247c:	2000      	movs	r0, #0
      break;
 800247e:	e7e4      	b.n	800244a <HAL_DMA_RegisterCallback+0x1a>
      hdma->XferHalfCpltCallback = pCallback;
 8002480:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_StatusTypeDef status = HAL_OK;
 8002482:	2000      	movs	r0, #0
      break;
 8002484:	e7e1      	b.n	800244a <HAL_DMA_RegisterCallback+0x1a>
      hdma->XferCpltCallback = pCallback;
 8002486:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8002488:	2000      	movs	r0, #0
      break;
 800248a:	e7de      	b.n	800244a <HAL_DMA_RegisterCallback+0x1a>
  HAL_StatusTypeDef status = HAL_OK;
 800248c:	2000      	movs	r0, #0
 800248e:	e7dc      	b.n	800244a <HAL_DMA_RegisterCallback+0x1a>

08002490 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{ 
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002490:	b358      	cbz	r0, 80024ea <HAL_DMA2D_Init+0x5a>
{ 
 8002492:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002494:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002498:	4604      	mov	r4, r0
 800249a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800249e:	b1fb      	cbz	r3, 80024e0 <HAL_DMA2D_Init+0x50>
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
  }
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 80024a0:	2202      	movs	r2, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80024a2:	f8d4 c008 	ldr.w	ip, [r4, #8]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_RBS,(hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos));
#endif /* DMA2D_OPFCCR_RBS */
  

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80024a6:	2600      	movs	r6, #0

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80024a8:	f04f 0e01 	mov.w	lr, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 80024ac:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 80024b0:	4a0f      	ldr	r2, [pc, #60]	; (80024f0 <HAL_DMA2D_Init+0x60>)

  return HAL_OK;
 80024b2:	4630      	mov	r0, r6
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80024b4:	e894 0088 	ldmia.w	r4, {r3, r7}
 80024b8:	681d      	ldr	r5, [r3, #0]
 80024ba:	f425 3540 	bic.w	r5, r5, #196608	; 0x30000
 80024be:	433d      	orrs	r5, r7
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 80024c0:	68e7      	ldr	r7, [r4, #12]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80024c2:	601d      	str	r5, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80024c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024c6:	f021 0107 	bic.w	r1, r1, #7
 80024ca:	ea41 010c 	orr.w	r1, r1, ip
 80024ce:	6359      	str	r1, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 80024d0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80024d2:	400a      	ands	r2, r1
 80024d4:	433a      	orrs	r2, r7
 80024d6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80024d8:	63e6      	str	r6, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80024da:	f884 e039 	strb.w	lr, [r4, #57]	; 0x39
  return HAL_OK;
 80024de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 80024e0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 80024e4:	f7fe fed0 	bl	8001288 <HAL_DMA2D_MspInit>
 80024e8:	e7da      	b.n	80024a0 <HAL_DMA2D_Init+0x10>
     return HAL_ERROR;
 80024ea:	2001      	movs	r0, #1
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	ffffc000 	.word	0xffffc000

080024f4 <HAL_DMA2D_BlendingStart>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80024f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));  
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 80024f6:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 80024fa:	2c01      	cmp	r4, #1
 80024fc:	d101      	bne.n	8002502 <HAL_DMA2D_BlendingStart+0xe>
 80024fe:	2002      	movs	r0, #2

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);

  return HAL_OK;
}
 8002500:	bdf0      	pop	{r4, r5, r6, r7, pc}
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 8002502:	6804      	ldr	r4, [r0, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY; 
 8002504:	2602      	movs	r6, #2
  uint32_t tmp2 = 0;
  uint32_t tmp3 = 0;
  uint32_t tmp4 = 0;
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 8002506:	9d06      	ldr	r5, [sp, #24]
  __HAL_LOCK(hdma2d);
 8002508:	2701      	movs	r7, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY; 
 800250a:	f880 6039 	strb.w	r6, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 800250e:	f880 7038 	strb.w	r7, [r0, #56]	; 0x38
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 8002512:	46ae      	mov	lr, r5
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 8002514:	6162      	str	r2, [r4, #20]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 8002516:	9d05      	ldr	r5, [sp, #20]
 8002518:	6c62      	ldr	r2, [r4, #68]	; 0x44
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800251a:	6846      	ldr	r6, [r0, #4]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 800251c:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 8002520:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002524:	f5b6 3f40 	cmp.w	r6, #196608	; 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 8002528:	ea42 0205 	orr.w	r2, r2, r5
 800252c:	6462      	str	r2, [r4, #68]	; 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800252e:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002530:	d006      	beq.n	8002540 <HAL_DMA2D_BlendingStart+0x4c>
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);    
  } 
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002532:	60e1      	str	r1, [r4, #12]
  __HAL_DMA2D_ENABLE(hdma2d);
 8002534:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 8002536:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	6023      	str	r3, [r4, #0]
  return HAL_OK;
 800253e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002540:	6882      	ldr	r2, [r0, #8]
 8002542:	b1b2      	cbz	r2, 8002572 <HAL_DMA2D_BlendingStart+0x7e>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002544:	42ba      	cmp	r2, r7
 8002546:	d016      	beq.n	8002576 <HAL_DMA2D_BlendingStart+0x82>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002548:	2a02      	cmp	r2, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800254a:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800254e:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002552:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002554:	d012      	beq.n	800257c <HAL_DMA2D_BlendingStart+0x88>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002556:	2a03      	cmp	r2, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002558:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800255c:	d016      	beq.n	800258c <HAL_DMA2D_BlendingStart+0x98>
      tmp2 = (tmp2 >> 20);
 800255e:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12);
 8002560:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 8002562:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28);
 8002564:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 8002566:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 800256a:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800256e:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);    
 8002572:	63a1      	str	r1, [r4, #56]	; 0x38
 8002574:	e7de      	b.n	8002534 <HAL_DMA2D_BlendingStart+0x40>
      tmp = (tmp3 | tmp2 | tmp4);  
 8002576:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800257a:	e7fa      	b.n	8002572 <HAL_DMA2D_BlendingStart+0x7e>
      tmp2 = (tmp2 >> 19);
 800257c:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10);
 800257e:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5) | (tmp2 << 11) | tmp4); 
 8002580:	02c9      	lsls	r1, r1, #11
 8002582:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 8002586:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800258a:	e7f2      	b.n	8002572 <HAL_DMA2D_BlendingStart+0x7e>
      tmp2 = (tmp2 >> 19);
 800258c:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11);
 800258e:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 8002590:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31);
 8002592:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 8002594:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8002598:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 800259c:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 80025a0:	e7e7      	b.n	8002572 <HAL_DMA2D_BlendingStart+0x7e>
 80025a2:	bf00      	nop

080025a4 <HAL_DMA2D_PollForTransfer>:
{
 80025a4:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0;  
 80025a6:	2200      	movs	r2, #0
{
 80025a8:	b082      	sub	sp, #8
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 80025aa:	6803      	ldr	r3, [r0, #0]
{
 80025ac:	4604      	mov	r4, r0
  __IO uint32_t isrflags = 0x0;  
 80025ae:	9201      	str	r2, [sp, #4]
{
 80025b0:	460d      	mov	r5, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	07d2      	lsls	r2, r2, #31
 80025b6:	d420      	bmi.n	80025fa <HAL_DMA2D_PollForTransfer+0x56>
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 80025b8:	69da      	ldr	r2, [r3, #28]
 80025ba:	0690      	lsls	r0, r2, #26
 80025bc:	d402      	bmi.n	80025c4 <HAL_DMA2D_PollForTransfer+0x20>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 80025be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 80025c0:	0691      	lsls	r1, r2, #26
 80025c2:	d50f      	bpl.n	80025e4 <HAL_DMA2D_PollForTransfer+0x40>
    tickstart = HAL_GetTick();
 80025c4:	f7ff fb1e 	bl	8001c04 <HAL_GetTick>
 80025c8:	4606      	mov	r6, r0
 80025ca:	1c68      	adds	r0, r5, #1
 80025cc:	6823      	ldr	r3, [r4, #0]
 80025ce:	d006      	beq.n	80025de <HAL_DMA2D_PollForTransfer+0x3a>
 80025d0:	e032      	b.n	8002638 <HAL_DMA2D_PollForTransfer+0x94>
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 80025d2:	685a      	ldr	r2, [r3, #4]
 80025d4:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 80025d6:	9a01      	ldr	r2, [sp, #4]
 80025d8:	f012 0f29 	tst.w	r2, #41	; 0x29
 80025dc:	d147      	bne.n	800266e <HAL_DMA2D_PollForTransfer+0xca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	06d1      	lsls	r1, r2, #27
 80025e2:	d5f6      	bpl.n	80025d2 <HAL_DMA2D_PollForTransfer+0x2e>
  __HAL_UNLOCK(hdma2d);
 80025e4:	2200      	movs	r2, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 80025e6:	2512      	movs	r5, #18
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80025e8:	2101      	movs	r1, #1
  return HAL_OK;
 80025ea:	4610      	mov	r0, r2
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 80025ec:	609d      	str	r5, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 80025ee:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80025f2:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
}
 80025f6:	b002      	add	sp, #8
 80025f8:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 80025fa:	f7ff fb03 	bl	8001c04 <HAL_GetTick>
 80025fe:	4606      	mov	r6, r0
 8002600:	1c68      	adds	r0, r5, #1
 8002602:	6823      	ldr	r3, [r4, #0]
 8002604:	d153      	bne.n	80026ae <HAL_DMA2D_PollForTransfer+0x10a>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	0791      	lsls	r1, r2, #30
 800260a:	d4d5      	bmi.n	80025b8 <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8002610:	9a01      	ldr	r2, [sp, #4]
 8002612:	f012 0f21 	tst.w	r2, #33	; 0x21
 8002616:	d0f6      	beq.n	8002606 <HAL_DMA2D_PollForTransfer+0x62>
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8002618:	9a01      	ldr	r2, [sp, #4]
 800261a:	0696      	lsls	r6, r2, #26
 800261c:	d503      	bpl.n	8002626 <HAL_DMA2D_PollForTransfer+0x82>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 800261e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002620:	f042 0202 	orr.w	r2, r2, #2
 8002624:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8002626:	9a01      	ldr	r2, [sp, #4]
 8002628:	07d5      	lsls	r5, r2, #31
 800262a:	d503      	bpl.n	8002634 <HAL_DMA2D_PollForTransfer+0x90>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 800262c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800262e:	f042 0201 	orr.w	r2, r2, #1
 8002632:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002634:	2521      	movs	r5, #33	; 0x21
 8002636:	e030      	b.n	800269a <HAL_DMA2D_PollForTransfer+0xf6>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	06d2      	lsls	r2, r2, #27
 800263c:	d4d2      	bmi.n	80025e4 <HAL_DMA2D_PollForTransfer+0x40>
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 8002642:	9a01      	ldr	r2, [sp, #4]
 8002644:	f012 0f29 	tst.w	r2, #41	; 0x29
 8002648:	d111      	bne.n	800266e <HAL_DMA2D_PollForTransfer+0xca>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800264a:	b125      	cbz	r5, 8002656 <HAL_DMA2D_PollForTransfer+0xb2>
 800264c:	f7ff fada 	bl	8001c04 <HAL_GetTick>
 8002650:	1b80      	subs	r0, r0, r6
 8002652:	4285      	cmp	r5, r0
 8002654:	d2b9      	bcs.n	80025ca <HAL_DMA2D_PollForTransfer+0x26>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002656:	6be3      	ldr	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8002658:	2203      	movs	r2, #3
          __HAL_UNLOCK(hdma2d);
 800265a:	2100      	movs	r1, #0
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800265c:	f043 0320 	orr.w	r3, r3, #32
          return HAL_TIMEOUT;
 8002660:	4610      	mov	r0, r2
          __HAL_UNLOCK(hdma2d);
 8002662:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002666:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8002668:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
          return HAL_TIMEOUT;
 800266c:	e7c3      	b.n	80025f6 <HAL_DMA2D_PollForTransfer+0x52>
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 800266e:	9a01      	ldr	r2, [sp, #4]
 8002670:	0712      	lsls	r2, r2, #28
 8002672:	d503      	bpl.n	800267c <HAL_DMA2D_PollForTransfer+0xd8>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;        
 8002674:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002676:	f042 0204 	orr.w	r2, r2, #4
 800267a:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != RESET)             
 800267c:	9a01      	ldr	r2, [sp, #4]
 800267e:	0696      	lsls	r6, r2, #26
 8002680:	d503      	bpl.n	800268a <HAL_DMA2D_PollForTransfer+0xe6>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8002682:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002684:	f042 0202 	orr.w	r2, r2, #2
 8002688:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 800268a:	9a01      	ldr	r2, [sp, #4]
 800268c:	07d5      	lsls	r5, r2, #31
 800268e:	d503      	bpl.n	8002698 <HAL_DMA2D_PollForTransfer+0xf4>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8002690:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002692:	f042 0201 	orr.w	r2, r2, #1
 8002696:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002698:	2529      	movs	r5, #41	; 0x29
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800269a:	2104      	movs	r1, #4
        __HAL_UNLOCK(hdma2d);
 800269c:	2200      	movs	r2, #0
        return HAL_ERROR;      
 800269e:	2001      	movs	r0, #1
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80026a0:	609d      	str	r5, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80026a2:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 80026a6:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
}
 80026aa:	b002      	add	sp, #8
 80026ac:	bd70      	pop	{r4, r5, r6, pc}
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	0792      	lsls	r2, r2, #30
 80026b2:	d481      	bmi.n	80025b8 <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 80026b8:	9a01      	ldr	r2, [sp, #4]
 80026ba:	f012 0f21 	tst.w	r2, #33	; 0x21
 80026be:	d1ab      	bne.n	8002618 <HAL_DMA2D_PollForTransfer+0x74>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80026c0:	2d00      	cmp	r5, #0
 80026c2:	d0c8      	beq.n	8002656 <HAL_DMA2D_PollForTransfer+0xb2>
 80026c4:	f7ff fa9e 	bl	8001c04 <HAL_GetTick>
 80026c8:	1b80      	subs	r0, r0, r6
 80026ca:	4285      	cmp	r5, r0
 80026cc:	d298      	bcs.n	8002600 <HAL_DMA2D_PollForTransfer+0x5c>
 80026ce:	e7c2      	b.n	8002656 <HAL_DMA2D_PollForTransfer+0xb2>

080026d0 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 80026d0:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 80026d4:	2a01      	cmp	r2, #1
 80026d6:	d026      	beq.n	8002726 <HAL_DMA2D_ConfigLayer+0x56>
 80026d8:	4603      	mov	r3, r0
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80026da:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 80026de:	69c2      	ldr	r2, [r0, #28]
{ 
 80026e0:	b4f0      	push	{r4, r5, r6, r7}
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80026e2:	f1a2 0409 	sub.w	r4, r2, #9
  __HAL_LOCK(hdma2d);
 80026e6:	2701      	movs	r7, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80026e8:	6a06      	ldr	r6, [r0, #32]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 80026ea:	2502      	movs	r5, #2
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80026ec:	42bc      	cmp	r4, r7
  __HAL_LOCK(hdma2d);
 80026ee:	f883 7038 	strb.w	r7, [r3, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80026f2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 80026f6:	f883 5039 	strb.w	r5, [r3, #57]	; 0x39
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80026fa:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80026fc:	d91e      	bls.n	800273c <HAL_DMA2D_ConfigLayer+0x6c>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80026fe:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
  if(LayerIdx == 0)
 8002702:	b991      	cbnz	r1, 800272a <HAL_DMA2D_ConfigLayer+0x5a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002704:	6818      	ldr	r0, [r3, #0]
 8002706:	491c      	ldr	r1, [pc, #112]	; (8002778 <HAL_DMA2D_ConfigLayer+0xa8>)
 8002708:	6a45      	ldr	r5, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800270a:	699c      	ldr	r4, [r3, #24]
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800270c:	4029      	ands	r1, r5
 800270e:	430a      	orrs	r2, r1
 8002710:	6242      	str	r2, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002712:	6184      	str	r4, [r0, #24]
  __HAL_UNLOCK(hdma2d);  
 8002714:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002716:	2101      	movs	r1, #1
  return HAL_OK;
 8002718:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800271a:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);  
 800271e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8002722:	bcf0      	pop	{r4, r5, r6, r7}
 8002724:	4770      	bx	lr
  __HAL_LOCK(hdma2d);
 8002726:	2002      	movs	r0, #2
 8002728:	4770      	bx	lr
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800272a:	681c      	ldr	r4, [r3, #0]
 800272c:	4912      	ldr	r1, [pc, #72]	; (8002778 <HAL_DMA2D_ConfigLayer+0xa8>)
 800272e:	69e5      	ldr	r5, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 8002730:	6980      	ldr	r0, [r0, #24]
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002732:	4029      	ands	r1, r5
 8002734:	430a      	orrs	r2, r1
 8002736:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 8002738:	6120      	str	r0, [r4, #16]
 800273a:	e7eb      	b.n	8002714 <HAL_DMA2D_ConfigLayer+0x44>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800273c:	f004 457f 	and.w	r5, r4, #4278190080	; 0xff000000
 8002740:	432a      	orrs	r2, r5
  if(LayerIdx == 0)
 8002742:	b961      	cbnz	r1, 800275e <HAL_DMA2D_ConfigLayer+0x8e>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002744:	6818      	ldr	r0, [r3, #0]
 8002746:	490c      	ldr	r1, [pc, #48]	; (8002778 <HAL_DMA2D_ConfigLayer+0xa8>)
 8002748:	6a45      	ldr	r5, [r0, #36]	; 0x24
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800274a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800274c:	4029      	ands	r1, r5
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800274e:	699d      	ldr	r5, [r3, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8002750:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002754:	430a      	orrs	r2, r1
 8002756:	6242      	str	r2, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002758:	6185      	str	r5, [r0, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800275a:	6284      	str	r4, [r0, #40]	; 0x28
 800275c:	e7da      	b.n	8002714 <HAL_DMA2D_ConfigLayer+0x44>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800275e:	681d      	ldr	r5, [r3, #0]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 8002760:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002764:	4904      	ldr	r1, [pc, #16]	; (8002778 <HAL_DMA2D_ConfigLayer+0xa8>)
 8002766:	69ee      	ldr	r6, [r5, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 8002768:	6980      	ldr	r0, [r0, #24]
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800276a:	4031      	ands	r1, r6
 800276c:	430a      	orrs	r2, r1
 800276e:	61ea      	str	r2, [r5, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 8002770:	6128      	str	r0, [r5, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 8002772:	622c      	str	r4, [r5, #32]
 8002774:	e7ce      	b.n	8002714 <HAL_DMA2D_ConfigLayer+0x44>
 8002776:	bf00      	nop
 8002778:	00fcfff0 	.word	0x00fcfff0

0800277c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800277c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002780:	f8d1 c000 	ldr.w	ip, [r1]
 8002784:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002786:	2500      	movs	r5, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002788:	f8df 822c 	ldr.w	r8, [pc, #556]	; 80029b8 <HAL_GPIO_Init+0x23c>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800278c:	f8df e22c 	ldr.w	lr, [pc, #556]	; 80029bc <HAL_GPIO_Init+0x240>
 8002790:	e003      	b.n	800279a <HAL_GPIO_Init+0x1e>
  for(position = 0; position < GPIO_NUMBER; position++)
 8002792:	3501      	adds	r5, #1
 8002794:	2d10      	cmp	r5, #16
 8002796:	f000 80bf 	beq.w	8002918 <HAL_GPIO_Init+0x19c>
    ioposition = ((uint32_t)0x01) << position;
 800279a:	2301      	movs	r3, #1
 800279c:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800279e:	ea03 020c 	and.w	r2, r3, ip
    if(iocurrent == ioposition)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d1f5      	bne.n	8002792 <HAL_GPIO_Init+0x16>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027a6:	684e      	ldr	r6, [r1, #4]
 80027a8:	f026 0910 	bic.w	r9, r6, #16
 80027ac:	f1b9 0f02 	cmp.w	r9, #2
 80027b0:	f040 80b5 	bne.w	800291e <HAL_GPIO_Init+0x1a2>
        temp = GPIOx->AFR[position >> 3];
 80027b4:	ea4f 09d5 	mov.w	r9, r5, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80027b8:	f005 0a07 	and.w	sl, r5, #7
 80027bc:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80027c0:	690c      	ldr	r4, [r1, #16]
 80027c2:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80027c6:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80027ca:	f8d9 7020 	ldr.w	r7, [r9, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80027ce:	fa0b fb0a 	lsl.w	fp, fp, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80027d2:	fa04 f40a 	lsl.w	r4, r4, sl
 80027d6:	ea4f 0a45 	mov.w	sl, r5, lsl #1
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80027da:	ea27 070b 	bic.w	r7, r7, fp
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80027de:	f04f 0b03 	mov.w	fp, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80027e2:	433c      	orrs	r4, r7
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80027e4:	fa0b fb0a 	lsl.w	fp, fp, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80027e8:	f006 0703 	and.w	r7, r6, #3
        GPIOx->AFR[position >> 3] = temp;
 80027ec:	f8c9 4020 	str.w	r4, [r9, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80027f0:	ea6f 040b 	mvn.w	r4, fp
      temp = GPIOx->MODER;
 80027f4:	f8d0 9000 	ldr.w	r9, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80027f8:	fa07 f70a 	lsl.w	r7, r7, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80027fc:	ea04 0909 	and.w	r9, r4, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002800:	ea47 0709 	orr.w	r7, r7, r9
      GPIOx->MODER = temp;
 8002804:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 8002806:	6887      	ldr	r7, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002808:	f3c6 1900 	ubfx	r9, r6, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800280c:	ea07 0b04 	and.w	fp, r7, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8002810:	68cf      	ldr	r7, [r1, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002812:	fa09 f905 	lsl.w	r9, r9, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8002816:	fa07 f70a 	lsl.w	r7, r7, sl
 800281a:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 800281e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002820:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002822:	ea27 0303 	bic.w	r3, r7, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002826:	ea49 0303 	orr.w	r3, r9, r3
        GPIOx->OTYPER = temp;
 800282a:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 800282c:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800282e:	688b      	ldr	r3, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002830:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002832:	fa03 f30a 	lsl.w	r3, r3, sl
 8002836:	4323      	orrs	r3, r4
      GPIOx->PUPDR = temp;
 8002838:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800283a:	00f3      	lsls	r3, r6, #3
 800283c:	d5a9      	bpl.n	8002792 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800283e:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44
 8002842:	f025 0703 	bic.w	r7, r5, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002846:	f005 0303 	and.w	r3, r5, #3
 800284a:	f04f 090f 	mov.w	r9, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800284e:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8002852:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002856:	009b      	lsls	r3, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002858:	f8c8 4044 	str.w	r4, [r8, #68]	; 0x44
 800285c:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8002860:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002864:	fa09 f903 	lsl.w	r9, r9, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002868:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 800286c:	9401      	str	r4, [sp, #4]
 800286e:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8002870:	68bc      	ldr	r4, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002872:	ea24 0a09 	bic.w	sl, r4, r9
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002876:	4c4b      	ldr	r4, [pc, #300]	; (80029a4 <HAL_GPIO_Init+0x228>)
 8002878:	42a0      	cmp	r0, r4
 800287a:	d069      	beq.n	8002950 <HAL_GPIO_Init+0x1d4>
 800287c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002880:	42a0      	cmp	r0, r4
 8002882:	d067      	beq.n	8002954 <HAL_GPIO_Init+0x1d8>
 8002884:	4c48      	ldr	r4, [pc, #288]	; (80029a8 <HAL_GPIO_Init+0x22c>)
 8002886:	42a0      	cmp	r0, r4
 8002888:	d069      	beq.n	800295e <HAL_GPIO_Init+0x1e2>
 800288a:	4c48      	ldr	r4, [pc, #288]	; (80029ac <HAL_GPIO_Init+0x230>)
 800288c:	42a0      	cmp	r0, r4
 800288e:	d06b      	beq.n	8002968 <HAL_GPIO_Init+0x1ec>
 8002890:	4c47      	ldr	r4, [pc, #284]	; (80029b0 <HAL_GPIO_Init+0x234>)
 8002892:	42a0      	cmp	r0, r4
 8002894:	d06d      	beq.n	8002972 <HAL_GPIO_Init+0x1f6>
 8002896:	4c47      	ldr	r4, [pc, #284]	; (80029b4 <HAL_GPIO_Init+0x238>)
 8002898:	42a0      	cmp	r0, r4
 800289a:	d06f      	beq.n	800297c <HAL_GPIO_Init+0x200>
 800289c:	f8df 9120 	ldr.w	r9, [pc, #288]	; 80029c0 <HAL_GPIO_Init+0x244>
 80028a0:	4548      	cmp	r0, r9
 80028a2:	d070      	beq.n	8002986 <HAL_GPIO_Init+0x20a>
 80028a4:	f8df 911c 	ldr.w	r9, [pc, #284]	; 80029c4 <HAL_GPIO_Init+0x248>
 80028a8:	4548      	cmp	r0, r9
 80028aa:	d071      	beq.n	8002990 <HAL_GPIO_Init+0x214>
 80028ac:	f8df 9118 	ldr.w	r9, [pc, #280]	; 80029c8 <HAL_GPIO_Init+0x24c>
 80028b0:	4548      	cmp	r0, r9
 80028b2:	d072      	beq.n	800299a <HAL_GPIO_Init+0x21e>
 80028b4:	f8df 9114 	ldr.w	r9, [pc, #276]	; 80029cc <HAL_GPIO_Init+0x250>
 80028b8:	4548      	cmp	r0, r9
 80028ba:	bf0c      	ite	eq
 80028bc:	f04f 0909 	moveq.w	r9, #9
 80028c0:	f04f 090a 	movne.w	r9, #10
 80028c4:	fa09 f303 	lsl.w	r3, r9, r3
 80028c8:	ea43 030a 	orr.w	r3, r3, sl
        temp &= ~((uint32_t)iocurrent);
 80028cc:	43d4      	mvns	r4, r2
  for(position = 0; position < GPIO_NUMBER; position++)
 80028ce:	3501      	adds	r5, #1
        SYSCFG->EXTICR[position >> 2] = temp;
 80028d0:	60bb      	str	r3, [r7, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028d2:	03f7      	lsls	r7, r6, #15
        temp = EXTI->IMR;
 80028d4:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 80028d8:	bf54      	ite	pl
 80028da:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 80028dc:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028de:	03b7      	lsls	r7, r6, #14
        EXTI->IMR = temp;
 80028e0:	f8ce 3000 	str.w	r3, [lr]
        temp = EXTI->EMR;
 80028e4:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
 80028e8:	bf54      	ite	pl
 80028ea:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 80028ec:	4313      	orrmi	r3, r2
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028ee:	02f7      	lsls	r7, r6, #11
        EXTI->EMR = temp;
 80028f0:	f8ce 3004 	str.w	r3, [lr, #4]
        temp = EXTI->RTSR;
 80028f4:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
 80028f8:	bf54      	ite	pl
 80028fa:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 80028fc:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028fe:	02b6      	lsls	r6, r6, #10
        EXTI->RTSR = temp;
 8002900:	f8ce 3008 	str.w	r3, [lr, #8]
        temp = EXTI->FTSR;
 8002904:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
 8002908:	bf54      	ite	pl
 800290a:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 800290c:	4313      	orrmi	r3, r2
  for(position = 0; position < GPIO_NUMBER; position++)
 800290e:	2d10      	cmp	r5, #16
        }
        EXTI->FTSR = temp;
 8002910:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002914:	f47f af41 	bne.w	800279a <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8002918:	b003      	add	sp, #12
 800291a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800291e:	ea4f 0a45 	mov.w	sl, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002922:	2403      	movs	r4, #3
      temp = GPIOx->MODER;
 8002924:	f8d0 b000 	ldr.w	fp, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002928:	f109 39ff 	add.w	r9, r9, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800292c:	ea06 0704 	and.w	r7, r6, r4
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002930:	fa04 f40a 	lsl.w	r4, r4, sl
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002934:	f1b9 0f01 	cmp.w	r9, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002938:	ea6f 0404 	mvn.w	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800293c:	fa07 f70a 	lsl.w	r7, r7, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002940:	ea0b 0b04 	and.w	fp, fp, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002944:	ea47 070b 	orr.w	r7, r7, fp
      GPIOx->MODER = temp;
 8002948:	6007      	str	r7, [r0, #0]
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800294a:	f63f af6f 	bhi.w	800282c <HAL_GPIO_Init+0xb0>
 800294e:	e75a      	b.n	8002806 <HAL_GPIO_Init+0x8a>
 8002950:	2300      	movs	r3, #0
 8002952:	e7b9      	b.n	80028c8 <HAL_GPIO_Init+0x14c>
 8002954:	f04f 0901 	mov.w	r9, #1
 8002958:	fa09 f303 	lsl.w	r3, r9, r3
 800295c:	e7b4      	b.n	80028c8 <HAL_GPIO_Init+0x14c>
 800295e:	f04f 0902 	mov.w	r9, #2
 8002962:	fa09 f303 	lsl.w	r3, r9, r3
 8002966:	e7af      	b.n	80028c8 <HAL_GPIO_Init+0x14c>
 8002968:	f04f 0903 	mov.w	r9, #3
 800296c:	fa09 f303 	lsl.w	r3, r9, r3
 8002970:	e7aa      	b.n	80028c8 <HAL_GPIO_Init+0x14c>
 8002972:	f04f 0904 	mov.w	r9, #4
 8002976:	fa09 f303 	lsl.w	r3, r9, r3
 800297a:	e7a5      	b.n	80028c8 <HAL_GPIO_Init+0x14c>
 800297c:	f04f 0905 	mov.w	r9, #5
 8002980:	fa09 f303 	lsl.w	r3, r9, r3
 8002984:	e7a0      	b.n	80028c8 <HAL_GPIO_Init+0x14c>
 8002986:	f04f 0906 	mov.w	r9, #6
 800298a:	fa09 f303 	lsl.w	r3, r9, r3
 800298e:	e79b      	b.n	80028c8 <HAL_GPIO_Init+0x14c>
 8002990:	f04f 0907 	mov.w	r9, #7
 8002994:	fa09 f303 	lsl.w	r3, r9, r3
 8002998:	e796      	b.n	80028c8 <HAL_GPIO_Init+0x14c>
 800299a:	f04f 0908 	mov.w	r9, #8
 800299e:	fa09 f303 	lsl.w	r3, r9, r3
 80029a2:	e791      	b.n	80028c8 <HAL_GPIO_Init+0x14c>
 80029a4:	40020000 	.word	0x40020000
 80029a8:	40020800 	.word	0x40020800
 80029ac:	40020c00 	.word	0x40020c00
 80029b0:	40021000 	.word	0x40021000
 80029b4:	40021400 	.word	0x40021400
 80029b8:	40023800 	.word	0x40023800
 80029bc:	40013c00 	.word	0x40013c00
 80029c0:	40021800 	.word	0x40021800
 80029c4:	40021c00 	.word	0x40021c00
 80029c8:	40022000 	.word	0x40022000
 80029cc:	40022400 	.word	0x40022400

080029d0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80029d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80029d4:	2300      	movs	r3, #0
{
 80029d6:	468a      	mov	sl, r1
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80029d8:	f8df b178 	ldr.w	fp, [pc, #376]	; 8002b54 <HAL_GPIO_DeInit+0x184>
 80029dc:	e003      	b.n	80029e6 <HAL_GPIO_DeInit+0x16>
  for(position = 0; position < GPIO_NUMBER; position++)
 80029de:	3301      	adds	r3, #1
 80029e0:	2b10      	cmp	r3, #16
 80029e2:	f000 8082 	beq.w	8002aea <HAL_GPIO_DeInit+0x11a>
    ioposition = ((uint32_t)0x01) << position;
 80029e6:	2701      	movs	r7, #1
 80029e8:	fa07 f103 	lsl.w	r1, r7, r3
    if(iocurrent == ioposition)
 80029ec:	ea31 020a 	bics.w	r2, r1, sl
 80029f0:	d1f5      	bne.n	80029de <HAL_GPIO_DeInit+0xe>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80029f2:	f04f 0e03 	mov.w	lr, #3
 80029f6:	fa03 f207 	lsl.w	r2, r3, r7
 80029fa:	f8d0 9000 	ldr.w	r9, [r0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80029fe:	f003 0507 	and.w	r5, r3, #7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002a02:	fa0e f202 	lsl.w	r2, lr, r2
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a06:	fa23 f60e 	lsr.w	r6, r3, lr
 8002a0a:	f04f 080f 	mov.w	r8, #15
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a0e:	43cc      	mvns	r4, r1
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002a10:	43d2      	mvns	r2, r2
 8002a12:	eb00 0686 	add.w	r6, r0, r6, lsl #2
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a16:	00ad      	lsls	r5, r5, #2
 8002a18:	f023 0c03 	bic.w	ip, r3, #3
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002a1c:	ea09 0102 	and.w	r1, r9, r2
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a20:	fa08 f505 	lsl.w	r5, r8, r5
 8002a24:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002a28:	6001      	str	r1, [r0, #0]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a2a:	ea03 010e 	and.w	r1, r3, lr
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a2e:	f8d6 9020 	ldr.w	r9, [r6, #32]
 8002a32:	f50c 3c9c 	add.w	ip, ip, #79872	; 0x13800
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a36:	0089      	lsls	r1, r1, #2
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a38:	ea29 0505 	bic.w	r5, r9, r5
 8002a3c:	6235      	str	r5, [r6, #32]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a3e:	fa08 f501 	lsl.w	r5, r8, r1
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a42:	6886      	ldr	r6, [r0, #8]
 8002a44:	4016      	ands	r6, r2
 8002a46:	6086      	str	r6, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a48:	6846      	ldr	r6, [r0, #4]
 8002a4a:	4026      	ands	r6, r4
 8002a4c:	6046      	str	r6, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002a4e:	68c6      	ldr	r6, [r0, #12]
 8002a50:	4032      	ands	r2, r6
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8002a52:	4e37      	ldr	r6, [pc, #220]	; (8002b30 <HAL_GPIO_DeInit+0x160>)
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002a54:	60c2      	str	r2, [r0, #12]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8002a56:	42b0      	cmp	r0, r6
      tmp = SYSCFG->EXTICR[position >> 2];
 8002a58:	f8dc 2008 	ldr.w	r2, [ip, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a5c:	ea02 0205 	and.w	r2, r2, r5
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8002a60:	d045      	beq.n	8002aee <HAL_GPIO_DeInit+0x11e>
 8002a62:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002a66:	42b0      	cmp	r0, r6
 8002a68:	d043      	beq.n	8002af2 <HAL_GPIO_DeInit+0x122>
 8002a6a:	4e32      	ldr	r6, [pc, #200]	; (8002b34 <HAL_GPIO_DeInit+0x164>)
 8002a6c:	42b0      	cmp	r0, r6
 8002a6e:	d043      	beq.n	8002af8 <HAL_GPIO_DeInit+0x128>
 8002a70:	4e31      	ldr	r6, [pc, #196]	; (8002b38 <HAL_GPIO_DeInit+0x168>)
 8002a72:	42b0      	cmp	r0, r6
 8002a74:	d044      	beq.n	8002b00 <HAL_GPIO_DeInit+0x130>
 8002a76:	4e31      	ldr	r6, [pc, #196]	; (8002b3c <HAL_GPIO_DeInit+0x16c>)
 8002a78:	42b0      	cmp	r0, r6
 8002a7a:	d044      	beq.n	8002b06 <HAL_GPIO_DeInit+0x136>
 8002a7c:	4e30      	ldr	r6, [pc, #192]	; (8002b40 <HAL_GPIO_DeInit+0x170>)
 8002a7e:	42b0      	cmp	r0, r6
 8002a80:	d045      	beq.n	8002b0e <HAL_GPIO_DeInit+0x13e>
 8002a82:	4e30      	ldr	r6, [pc, #192]	; (8002b44 <HAL_GPIO_DeInit+0x174>)
 8002a84:	42b0      	cmp	r0, r6
 8002a86:	d046      	beq.n	8002b16 <HAL_GPIO_DeInit+0x146>
 8002a88:	4e2f      	ldr	r6, [pc, #188]	; (8002b48 <HAL_GPIO_DeInit+0x178>)
 8002a8a:	42b0      	cmp	r0, r6
 8002a8c:	d047      	beq.n	8002b1e <HAL_GPIO_DeInit+0x14e>
 8002a8e:	4e2f      	ldr	r6, [pc, #188]	; (8002b4c <HAL_GPIO_DeInit+0x17c>)
 8002a90:	42b0      	cmp	r0, r6
 8002a92:	d048      	beq.n	8002b26 <HAL_GPIO_DeInit+0x156>
 8002a94:	4e2e      	ldr	r6, [pc, #184]	; (8002b50 <HAL_GPIO_DeInit+0x180>)
 8002a96:	42b0      	cmp	r0, r6
 8002a98:	bf0c      	ite	eq
 8002a9a:	2609      	moveq	r6, #9
 8002a9c:	260a      	movne	r6, #10
 8002a9e:	fa06 f101 	lsl.w	r1, r6, r1
 8002aa2:	428a      	cmp	r2, r1
 8002aa4:	d19b      	bne.n	80029de <HAL_GPIO_DeInit+0xe>
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8002aa6:	f8dc 2008 	ldr.w	r2, [ip, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002aaa:	3301      	adds	r3, #1
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8002aac:	ea22 0505 	bic.w	r5, r2, r5
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ab0:	2b10      	cmp	r3, #16
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8002ab2:	f8cc 5008 	str.w	r5, [ip, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002ab6:	f8db 2000 	ldr.w	r2, [fp]
 8002aba:	ea02 0204 	and.w	r2, r2, r4
 8002abe:	f8cb 2000 	str.w	r2, [fp]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002ac2:	f8db 2004 	ldr.w	r2, [fp, #4]
 8002ac6:	ea02 0204 	and.w	r2, r2, r4
 8002aca:	f8cb 2004 	str.w	r2, [fp, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002ace:	f8db 2008 	ldr.w	r2, [fp, #8]
 8002ad2:	ea02 0204 	and.w	r2, r2, r4
 8002ad6:	f8cb 2008 	str.w	r2, [fp, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002ada:	f8db 100c 	ldr.w	r1, [fp, #12]
 8002ade:	ea01 0104 	and.w	r1, r1, r4
 8002ae2:	f8cb 100c 	str.w	r1, [fp, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ae6:	f47f af7e 	bne.w	80029e6 <HAL_GPIO_DeInit+0x16>
	  }
    }
  }
}
 8002aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002aee:	2100      	movs	r1, #0
 8002af0:	e7d7      	b.n	8002aa2 <HAL_GPIO_DeInit+0xd2>
 8002af2:	fa07 f101 	lsl.w	r1, r7, r1
 8002af6:	e7d4      	b.n	8002aa2 <HAL_GPIO_DeInit+0xd2>
 8002af8:	2602      	movs	r6, #2
 8002afa:	fa06 f101 	lsl.w	r1, r6, r1
 8002afe:	e7d0      	b.n	8002aa2 <HAL_GPIO_DeInit+0xd2>
 8002b00:	fa0e f101 	lsl.w	r1, lr, r1
 8002b04:	e7cd      	b.n	8002aa2 <HAL_GPIO_DeInit+0xd2>
 8002b06:	2604      	movs	r6, #4
 8002b08:	fa06 f101 	lsl.w	r1, r6, r1
 8002b0c:	e7c9      	b.n	8002aa2 <HAL_GPIO_DeInit+0xd2>
 8002b0e:	2605      	movs	r6, #5
 8002b10:	fa06 f101 	lsl.w	r1, r6, r1
 8002b14:	e7c5      	b.n	8002aa2 <HAL_GPIO_DeInit+0xd2>
 8002b16:	2606      	movs	r6, #6
 8002b18:	fa06 f101 	lsl.w	r1, r6, r1
 8002b1c:	e7c1      	b.n	8002aa2 <HAL_GPIO_DeInit+0xd2>
 8002b1e:	2607      	movs	r6, #7
 8002b20:	fa06 f101 	lsl.w	r1, r6, r1
 8002b24:	e7bd      	b.n	8002aa2 <HAL_GPIO_DeInit+0xd2>
 8002b26:	2608      	movs	r6, #8
 8002b28:	fa06 f101 	lsl.w	r1, r6, r1
 8002b2c:	e7b9      	b.n	8002aa2 <HAL_GPIO_DeInit+0xd2>
 8002b2e:	bf00      	nop
 8002b30:	40020000 	.word	0x40020000
 8002b34:	40020800 	.word	0x40020800
 8002b38:	40020c00 	.word	0x40020c00
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	40021400 	.word	0x40021400
 8002b44:	40021800 	.word	0x40021800
 8002b48:	40021c00 	.word	0x40021c00
 8002b4c:	40022000 	.word	0x40022000
 8002b50:	40022400 	.word	0x40022400
 8002b54:	40013c00 	.word	0x40013c00

08002b58 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b58:	b902      	cbnz	r2, 8002b5c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b5a:	0409      	lsls	r1, r1, #16
 8002b5c:	6181      	str	r1, [r0, #24]
 8002b5e:	4770      	bx	lr

08002b60 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8002b60:	6943      	ldr	r3, [r0, #20]
 8002b62:	4059      	eors	r1, r3
 8002b64:	6141      	str	r1, [r0, #20]
 8002b66:	4770      	bx	lr

08002b68 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b6a:	4604      	mov	r4, r0
 8002b6c:	460d      	mov	r5, r1
 8002b6e:	4616      	mov	r6, r2
 8002b70:	1c6f      	adds	r7, r5, #1
 8002b72:	6822      	ldr	r2, [r4, #0]
 8002b74:	d128      	bne.n	8002bc8 <I2C_WaitOnTXISFlagUntilTimeout+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b76:	6993      	ldr	r3, [r2, #24]
 8002b78:	0798      	lsls	r0, r3, #30
 8002b7a:	d428      	bmi.n	8002bce <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b7c:	6993      	ldr	r3, [r2, #24]
 8002b7e:	06d9      	lsls	r1, r3, #27
 8002b80:	d5f9      	bpl.n	8002b76 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b82:	6993      	ldr	r3, [r2, #24]
 8002b84:	0698      	lsls	r0, r3, #26
 8002b86:	d5fc      	bpl.n	8002b82 <I2C_WaitOnTXISFlagUntilTimeout+0x1a>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b88:	2110      	movs	r1, #16

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b8a:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b8c:	61d1      	str	r1, [r2, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b8e:	61d3      	str	r3, [r2, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b90:	6993      	ldr	r3, [r2, #24]
 8002b92:	0799      	lsls	r1, r3, #30
 8002b94:	d501      	bpl.n	8002b9a <I2C_WaitOnTXISFlagUntilTimeout+0x32>
    hi2c->Instance->TXDR = 0x00U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	6293      	str	r3, [r2, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b9a:	6993      	ldr	r3, [r2, #24]
 8002b9c:	07db      	lsls	r3, r3, #31
 8002b9e:	d403      	bmi.n	8002ba8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ba0:	6993      	ldr	r3, [r2, #24]
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	6193      	str	r3, [r2, #24]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ba8:	6853      	ldr	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002baa:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8002bac:	4f1e      	ldr	r7, [pc, #120]	; (8002c28 <I2C_WaitOnTXISFlagUntilTimeout+0xc0>)
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002bae:	2604      	movs	r6, #4
    hi2c->State = HAL_I2C_STATE_READY;
 8002bb0:	2520      	movs	r5, #32
      return HAL_ERROR;
 8002bb2:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8002bb4:	403b      	ands	r3, r7
 8002bb6:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002bb8:	6466      	str	r6, [r4, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bba:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8002bbe:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc2:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bc8:	6993      	ldr	r3, [r2, #24]
 8002bca:	079b      	lsls	r3, r3, #30
 8002bcc:	d501      	bpl.n	8002bd2 <I2C_WaitOnTXISFlagUntilTimeout+0x6a>
  return HAL_OK;
 8002bce:	2000      	movs	r0, #0
}
 8002bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bd2:	6993      	ldr	r3, [r2, #24]
 8002bd4:	06db      	lsls	r3, r3, #27
 8002bd6:	d419      	bmi.n	8002c0c <I2C_WaitOnTXISFlagUntilTimeout+0xa4>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002bd8:	b125      	cbz	r5, 8002be4 <I2C_WaitOnTXISFlagUntilTimeout+0x7c>
 8002bda:	f7ff f813 	bl	8001c04 <HAL_GetTick>
 8002bde:	1b80      	subs	r0, r0, r6
 8002be0:	4285      	cmp	r5, r0
 8002be2:	d2c5      	bcs.n	8002b70 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002be4:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002be6:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be8:	2200      	movs	r2, #0
      __HAL_UNLOCK(hi2c);
 8002bea:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bec:	430b      	orrs	r3, r1
      __HAL_UNLOCK(hi2c);
 8002bee:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bf2:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002bf4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002bfe:	b14d      	cbz	r5, 8002c14 <I2C_WaitOnTXISFlagUntilTimeout+0xac>
 8002c00:	f7ff f800 	bl	8001c04 <HAL_GetTick>
 8002c04:	1b80      	subs	r0, r0, r6
 8002c06:	4285      	cmp	r5, r0
 8002c08:	d304      	bcc.n	8002c14 <I2C_WaitOnTXISFlagUntilTimeout+0xac>
 8002c0a:	6822      	ldr	r2, [r4, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c0c:	6993      	ldr	r3, [r2, #24]
 8002c0e:	069f      	lsls	r7, r3, #26
 8002c10:	d5f5      	bpl.n	8002bfe <I2C_WaitOnTXISFlagUntilTimeout+0x96>
 8002c12:	e7b9      	b.n	8002b88 <I2C_WaitOnTXISFlagUntilTimeout+0x20>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c14:	2300      	movs	r3, #0
          hi2c->State = HAL_I2C_STATE_READY;
 8002c16:	2220      	movs	r2, #32
      return HAL_ERROR;
 8002c18:	2001      	movs	r0, #1
          hi2c->State = HAL_I2C_STATE_READY;
 8002c1a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
          __HAL_UNLOCK(hi2c);
 8002c1e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c28:	fe00e800 	.word	0xfe00e800

08002c2c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c2e:	4604      	mov	r4, r0
 8002c30:	4616      	mov	r6, r2
 8002c32:	460d      	mov	r5, r1
 8002c34:	b929      	cbnz	r1, 8002c42 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
 8002c36:	e03b      	b.n	8002cb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x84>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c38:	f7fe ffe4 	bl	8001c04 <HAL_GetTick>
 8002c3c:	1b80      	subs	r0, r0, r6
 8002c3e:	4285      	cmp	r5, r0
 8002c40:	d33d      	bcc.n	8002cbe <I2C_WaitOnSTOPFlagUntilTimeout+0x92>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c42:	6822      	ldr	r2, [r4, #0]
 8002c44:	6993      	ldr	r3, [r2, #24]
 8002c46:	069b      	lsls	r3, r3, #26
 8002c48:	d446      	bmi.n	8002cd8 <I2C_WaitOnSTOPFlagUntilTimeout+0xac>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c4a:	6993      	ldr	r3, [r2, #24]
 8002c4c:	06df      	lsls	r7, r3, #27
 8002c4e:	d5f3      	bpl.n	8002c38 <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
 8002c50:	1c69      	adds	r1, r5, #1
 8002c52:	d122      	bne.n	8002c9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c54:	6993      	ldr	r3, [r2, #24]
 8002c56:	069b      	lsls	r3, r3, #26
 8002c58:	d5fc      	bpl.n	8002c54 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c5a:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c5c:	2110      	movs	r1, #16
 8002c5e:	61d1      	str	r1, [r2, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c60:	61d3      	str	r3, [r2, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c62:	6993      	ldr	r3, [r2, #24]
 8002c64:	0798      	lsls	r0, r3, #30
 8002c66:	d501      	bpl.n	8002c6c <I2C_WaitOnSTOPFlagUntilTimeout+0x40>
    hi2c->Instance->TXDR = 0x00U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	6293      	str	r3, [r2, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c6c:	6993      	ldr	r3, [r2, #24]
 8002c6e:	07d9      	lsls	r1, r3, #31
 8002c70:	d403      	bmi.n	8002c7a <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c72:	6993      	ldr	r3, [r2, #24]
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	6193      	str	r3, [r2, #24]
    I2C_RESET_CR2(hi2c);
 8002c7a:	6853      	ldr	r3, [r2, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c7c:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8002c7e:	4d1c      	ldr	r5, [pc, #112]	; (8002cf0 <I2C_WaitOnSTOPFlagUntilTimeout+0xc4>)
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002c80:	2704      	movs	r7, #4
    hi2c->State = HAL_I2C_STATE_READY;
 8002c82:	2620      	movs	r6, #32
      return HAL_ERROR;
 8002c84:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8002c86:	402b      	ands	r3, r5
 8002c88:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002c8a:	6467      	str	r7, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8002c8c:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8002c90:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c94:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c9a:	6993      	ldr	r3, [r2, #24]
 8002c9c:	069f      	lsls	r7, r3, #26
 8002c9e:	d4dc      	bmi.n	8002c5a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ca0:	b1e5      	cbz	r5, 8002cdc <I2C_WaitOnSTOPFlagUntilTimeout+0xb0>
 8002ca2:	f7fe ffaf 	bl	8001c04 <HAL_GetTick>
 8002ca6:	1b80      	subs	r0, r0, r6
 8002ca8:	4285      	cmp	r5, r0
 8002caa:	d317      	bcc.n	8002cdc <I2C_WaitOnSTOPFlagUntilTimeout+0xb0>
 8002cac:	6822      	ldr	r2, [r4, #0]
 8002cae:	e7cf      	b.n	8002c50 <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cb0:	6802      	ldr	r2, [r0, #0]
 8002cb2:	6993      	ldr	r3, [r2, #24]
 8002cb4:	069b      	lsls	r3, r3, #26
 8002cb6:	d40f      	bmi.n	8002cd8 <I2C_WaitOnSTOPFlagUntilTimeout+0xac>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cb8:	6993      	ldr	r3, [r2, #24]
 8002cba:	06d8      	lsls	r0, r3, #27
 8002cbc:	d4c8      	bmi.n	8002c50 <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cbe:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002cc0:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc2:	2200      	movs	r2, #0
      __HAL_UNLOCK(hi2c);
 8002cc4:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cc6:	430b      	orrs	r3, r1
      __HAL_UNLOCK(hi2c);
 8002cc8:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ccc:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002cce:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cd2:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8002cd8:	2000      	movs	r0, #0
}
 8002cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cdc:	2300      	movs	r3, #0
          hi2c->State = HAL_I2C_STATE_READY;
 8002cde:	2220      	movs	r2, #32
      return HAL_ERROR;
 8002ce0:	2001      	movs	r0, #1
          hi2c->State = HAL_I2C_STATE_READY;
 8002ce2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
          __HAL_UNLOCK(hi2c);
 8002ce6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cf0:	fe00e800 	.word	0xfe00e800

08002cf4 <I2C_RequestMemoryRead>:
{
 8002cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cf8:	4698      	mov	r8, r3
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002cfa:	6803      	ldr	r3, [r0, #0]
 8002cfc:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002d00:	4e24      	ldr	r6, [pc, #144]	; (8002d94 <I2C_RequestMemoryRead+0xa0>)
 8002d02:	4c25      	ldr	r4, [pc, #148]	; (8002d98 <I2C_RequestMemoryRead+0xa4>)
{
 8002d04:	4617      	mov	r7, r2
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002d06:	685a      	ldr	r2, [r3, #4]
{
 8002d08:	4605      	mov	r5, r0
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002d0a:	430c      	orrs	r4, r1
 8002d0c:	fa5f f188 	uxtb.w	r1, r8
 8002d10:	4032      	ands	r2, r6
{
 8002d12:	9e06      	ldr	r6, [sp, #24]
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002d14:	4314      	orrs	r4, r2
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d16:	9a07      	ldr	r2, [sp, #28]
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002d18:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d1c:	4631      	mov	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002d1e:	605c      	str	r4, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d20:	f7ff ff22 	bl	8002b68 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d24:	b9b8      	cbnz	r0, 8002d56 <I2C_RequestMemoryRead+0x62>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d26:	f1b8 0f01 	cmp.w	r8, #1
 8002d2a:	4604      	mov	r4, r0
 8002d2c:	d008      	beq.n	8002d40 <I2C_RequestMemoryRead+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d2e:	6828      	ldr	r0, [r5, #0]
 8002d30:	0a3b      	lsrs	r3, r7, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d32:	9a07      	ldr	r2, [sp, #28]
 8002d34:	4631      	mov	r1, r6
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d36:	6283      	str	r3, [r0, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d38:	4628      	mov	r0, r5
 8002d3a:	f7ff ff15 	bl	8002b68 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d3e:	b950      	cbnz	r0, 8002d56 <I2C_RequestMemoryRead+0x62>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d40:	b2ff      	uxtb	r7, r7
 8002d42:	6829      	ldr	r1, [r5, #0]
 8002d44:	628f      	str	r7, [r1, #40]	; 0x28
 8002d46:	1c70      	adds	r0, r6, #1
 8002d48:	d10d      	bne.n	8002d66 <I2C_RequestMemoryRead+0x72>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d4a:	698b      	ldr	r3, [r1, #24]
 8002d4c:	065a      	lsls	r2, r3, #25
 8002d4e:	d5fc      	bpl.n	8002d4a <I2C_RequestMemoryRead+0x56>
}
 8002d50:	4620      	mov	r0, r4
 8002d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d56:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002d58:	2b04      	cmp	r3, #4
      return HAL_ERROR;
 8002d5a:	bf0c      	ite	eq
 8002d5c:	2401      	moveq	r4, #1
      return HAL_TIMEOUT;
 8002d5e:	2403      	movne	r4, #3
}
 8002d60:	4620      	mov	r0, r4
 8002d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d66:	698b      	ldr	r3, [r1, #24]
 8002d68:	065b      	lsls	r3, r3, #25
 8002d6a:	d4f9      	bmi.n	8002d60 <I2C_RequestMemoryRead+0x6c>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d6c:	b13e      	cbz	r6, 8002d7e <I2C_RequestMemoryRead+0x8a>
 8002d6e:	f7fe ff49 	bl	8001c04 <HAL_GetTick>
 8002d72:	9b07      	ldr	r3, [sp, #28]
 8002d74:	1ac0      	subs	r0, r0, r3
 8002d76:	4286      	cmp	r6, r0
 8002d78:	d301      	bcc.n	8002d7e <I2C_RequestMemoryRead+0x8a>
 8002d7a:	6829      	ldr	r1, [r5, #0]
 8002d7c:	e7e3      	b.n	8002d46 <I2C_RequestMemoryRead+0x52>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d7e:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8002d80:	2220      	movs	r2, #32
    return HAL_TIMEOUT;
 8002d82:	2403      	movs	r4, #3
        hi2c->State = HAL_I2C_STATE_READY;
 8002d84:	f885 2041 	strb.w	r2, [r5, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 8002d88:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d8c:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
 8002d90:	e7e6      	b.n	8002d60 <I2C_RequestMemoryRead+0x6c>
 8002d92:	bf00      	nop
 8002d94:	fc009800 	.word	0xfc009800
 8002d98:	80002000 	.word	0x80002000

08002d9c <I2C_RequestMemoryWrite>:
{
 8002d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002da0:	4698      	mov	r8, r3
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002da2:	6803      	ldr	r3, [r0, #0]
 8002da4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002da8:	4e24      	ldr	r6, [pc, #144]	; (8002e3c <I2C_RequestMemoryWrite+0xa0>)
 8002daa:	4c25      	ldr	r4, [pc, #148]	; (8002e40 <I2C_RequestMemoryWrite+0xa4>)
{
 8002dac:	4617      	mov	r7, r2
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002dae:	685a      	ldr	r2, [r3, #4]
{
 8002db0:	4605      	mov	r5, r0
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002db2:	430c      	orrs	r4, r1
 8002db4:	fa5f f188 	uxtb.w	r1, r8
 8002db8:	4032      	ands	r2, r6
{
 8002dba:	9e06      	ldr	r6, [sp, #24]
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002dbc:	4314      	orrs	r4, r2
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dbe:	9a07      	ldr	r2, [sp, #28]
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dc4:	4631      	mov	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002dc6:	605c      	str	r4, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dc8:	f7ff fece 	bl	8002b68 <I2C_WaitOnTXISFlagUntilTimeout>
 8002dcc:	b9b8      	cbnz	r0, 8002dfe <I2C_RequestMemoryWrite+0x62>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dce:	f1b8 0f01 	cmp.w	r8, #1
 8002dd2:	4604      	mov	r4, r0
 8002dd4:	d008      	beq.n	8002de8 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002dd6:	6828      	ldr	r0, [r5, #0]
 8002dd8:	0a3b      	lsrs	r3, r7, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dda:	9a07      	ldr	r2, [sp, #28]
 8002ddc:	4631      	mov	r1, r6
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002dde:	6283      	str	r3, [r0, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002de0:	4628      	mov	r0, r5
 8002de2:	f7ff fec1 	bl	8002b68 <I2C_WaitOnTXISFlagUntilTimeout>
 8002de6:	b950      	cbnz	r0, 8002dfe <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002de8:	b2ff      	uxtb	r7, r7
 8002dea:	6829      	ldr	r1, [r5, #0]
 8002dec:	628f      	str	r7, [r1, #40]	; 0x28
 8002dee:	1c70      	adds	r0, r6, #1
 8002df0:	d10d      	bne.n	8002e0e <I2C_RequestMemoryWrite+0x72>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002df2:	698b      	ldr	r3, [r1, #24]
 8002df4:	061a      	lsls	r2, r3, #24
 8002df6:	d5fc      	bpl.n	8002df2 <I2C_RequestMemoryWrite+0x56>
}
 8002df8:	4620      	mov	r0, r4
 8002dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dfe:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002e00:	2b04      	cmp	r3, #4
      return HAL_ERROR;
 8002e02:	bf0c      	ite	eq
 8002e04:	2401      	moveq	r4, #1
      return HAL_TIMEOUT;
 8002e06:	2403      	movne	r4, #3
}
 8002e08:	4620      	mov	r0, r4
 8002e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e0e:	698b      	ldr	r3, [r1, #24]
 8002e10:	061b      	lsls	r3, r3, #24
 8002e12:	d4f9      	bmi.n	8002e08 <I2C_RequestMemoryWrite+0x6c>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e14:	b13e      	cbz	r6, 8002e26 <I2C_RequestMemoryWrite+0x8a>
 8002e16:	f7fe fef5 	bl	8001c04 <HAL_GetTick>
 8002e1a:	9b07      	ldr	r3, [sp, #28]
 8002e1c:	1ac0      	subs	r0, r0, r3
 8002e1e:	4286      	cmp	r6, r0
 8002e20:	d301      	bcc.n	8002e26 <I2C_RequestMemoryWrite+0x8a>
 8002e22:	6829      	ldr	r1, [r5, #0]
 8002e24:	e7e3      	b.n	8002dee <I2C_RequestMemoryWrite+0x52>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e26:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8002e28:	2220      	movs	r2, #32
    return HAL_TIMEOUT;
 8002e2a:	2403      	movs	r4, #3
        hi2c->State = HAL_I2C_STATE_READY;
 8002e2c:	f885 2041 	strb.w	r2, [r5, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 8002e30:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e34:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
 8002e38:	e7e6      	b.n	8002e08 <I2C_RequestMemoryWrite+0x6c>
 8002e3a:	bf00      	nop
 8002e3c:	fc009800 	.word	0xfc009800
 8002e40:	81002000 	.word	0x81002000

08002e44 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002e44:	2800      	cmp	r0, #0
 8002e46:	d04f      	beq.n	8002ee8 <HAL_I2C_Init+0xa4>
{
 8002e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e4a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002e4e:	4604      	mov	r4, r0
 8002e50:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d03e      	beq.n	8002ed6 <HAL_I2C_Init+0x92>
  __HAL_I2C_DISABLE(hi2c);
 8002e58:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e5a:	2124      	movs	r1, #36	; 0x24
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e5c:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e5e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002e62:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e68:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8002e6a:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e6e:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 8002e70:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e72:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e74:	689a      	ldr	r2, [r3, #8]
 8002e76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e7a:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e7c:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e7e:	d02f      	beq.n	8002ee0 <HAL_I2C_Init+0x9c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e80:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e84:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e86:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e88:	d021      	beq.n	8002ece <HAL_I2C_Init+0x8a>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e8a:	685e      	ldr	r6, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e8c:	2100      	movs	r1, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e8e:	4d17      	ldr	r5, [pc, #92]	; (8002eec <HAL_I2C_Init+0xa8>)
  hi2c->State = HAL_I2C_STATE_READY;
 8002e90:	f04f 0e20 	mov.w	lr, #32
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002e94:	6922      	ldr	r2, [r4, #16]
  return HAL_OK;
 8002e96:	4608      	mov	r0, r1
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e98:	4335      	orrs	r5, r6
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002e9a:	6966      	ldr	r6, [r4, #20]
 8002e9c:	69a7      	ldr	r7, [r4, #24]
 8002e9e:	4332      	orrs	r2, r6
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ea0:	605d      	str	r5, [r3, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ea2:	69e5      	ldr	r5, [r4, #28]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ea4:	68de      	ldr	r6, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002ea6:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002eaa:	6a27      	ldr	r7, [r4, #32]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002eac:	f426 4600 	bic.w	r6, r6, #32768	; 0x8000
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002eb0:	433d      	orrs	r5, r7
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002eb2:	60de      	str	r6, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002eb4:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002eb6:	601d      	str	r5, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	f042 0201 	orr.w	r2, r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ec0:	6461      	str	r1, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ec2:	f884 e041 	strb.w	lr, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ec6:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
  return HAL_OK;
 8002ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002ece:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ed2:	605a      	str	r2, [r3, #4]
 8002ed4:	e7d9      	b.n	8002e8a <HAL_I2C_Init+0x46>
    hi2c->Lock = HAL_UNLOCKED;
 8002ed6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002eda:	f7fe f9eb 	bl	80012b4 <HAL_I2C_MspInit>
 8002ede:	e7bb      	b.n	8002e58 <HAL_I2C_Init+0x14>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ee0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ee4:	609a      	str	r2, [r3, #8]
 8002ee6:	e7d0      	b.n	8002e8a <HAL_I2C_Init+0x46>
    return HAL_ERROR;
 8002ee8:	2001      	movs	r0, #1
 8002eea:	4770      	bx	lr
 8002eec:	02008000 	.word	0x02008000

08002ef0 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8002ef0:	b1b0      	cbz	r0, 8002f20 <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
 8002ef2:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ef4:	2324      	movs	r3, #36	; 0x24
{
 8002ef6:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ef8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8002efc:	4604      	mov	r4, r0
  __HAL_I2C_DISABLE(hi2c);
 8002efe:	6813      	ldr	r3, [r2, #0]
 8002f00:	f023 0301 	bic.w	r3, r3, #1
 8002f04:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8002f06:	f7fe fa35 	bl	8001374 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8002f0e:	4618      	mov	r0, r3
  hi2c->State = HAL_I2C_STATE_RESET;
 8002f10:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
 8002f14:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f18:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  return HAL_OK;
 8002f1e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002f20:	2001      	movs	r0, #1
 8002f22:	4770      	bx	lr

08002f24 <HAL_I2C_Mem_Write>:
{
 8002f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f28:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 8002f2c:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f2e:	2c20      	cmp	r4, #32
{
 8002f30:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f34:	d003      	beq.n	8002f3e <HAL_I2C_Mem_Write+0x1a>
    return HAL_BUSY;
 8002f36:	2002      	movs	r0, #2
}
 8002f38:	b002      	add	sp, #8
 8002f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((pData == NULL) || (Size == 0U))
 8002f3e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002f40:	2c00      	cmp	r4, #0
 8002f42:	d03b      	beq.n	8002fbc <HAL_I2C_Mem_Write+0x98>
 8002f44:	2e00      	cmp	r6, #0
 8002f46:	d039      	beq.n	8002fbc <HAL_I2C_Mem_Write+0x98>
    __HAL_LOCK(hi2c);
 8002f48:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8002f4c:	2c01      	cmp	r4, #1
 8002f4e:	d0f2      	beq.n	8002f36 <HAL_I2C_Mem_Write+0x12>
 8002f50:	4698      	mov	r8, r3
 8002f52:	2301      	movs	r3, #1
 8002f54:	4617      	mov	r7, r2
 8002f56:	4689      	mov	r9, r1
 8002f58:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8002f5c:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8002f5e:	f7fe fe51 	bl	8001c04 <HAL_GetTick>
 8002f62:	4682      	mov	sl, r0
 8002f64:	e005      	b.n	8002f72 <HAL_I2C_Mem_Write+0x4e>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f66:	f7fe fe4d 	bl	8001c04 <HAL_GetTick>
 8002f6a:	eba0 000a 	sub.w	r0, r0, sl
 8002f6e:	2819      	cmp	r0, #25
 8002f70:	d826      	bhi.n	8002fc0 <HAL_I2C_Mem_Write+0x9c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f72:	6823      	ldr	r3, [r4, #0]
 8002f74:	699d      	ldr	r5, [r3, #24]
 8002f76:	f415 4500 	ands.w	r5, r5, #32768	; 0x8000
 8002f7a:	d1f4      	bne.n	8002f66 <HAL_I2C_Mem_Write+0x42>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f7c:	2121      	movs	r1, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f7e:	2040      	movs	r0, #64	; 0x40
    hi2c->pBuffPtr  = pData;
 8002f80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f82:	463a      	mov	r2, r7
 8002f84:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    hi2c->pBuffPtr  = pData;
 8002f86:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f88:	4643      	mov	r3, r8
    hi2c->XferISR   = NULL;
 8002f8a:	6365      	str	r5, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f8c:	f8cd a004 	str.w	sl, [sp, #4]
 8002f90:	9700      	str	r7, [sp, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f92:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f96:	4649      	mov	r1, r9
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f98:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f9c:	4620      	mov	r0, r4
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f9e:	6465      	str	r5, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8002fa0:	8566      	strh	r6, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fa2:	f7ff fefb 	bl	8002d9c <I2C_RequestMemoryWrite>
 8002fa6:	b1a8      	cbz	r0, 8002fd4 <HAL_I2C_Mem_Write+0xb0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fa8:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8002faa:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	d004      	beq.n	8002fbc <HAL_I2C_Mem_Write+0x98>
          return HAL_TIMEOUT;
 8002fb2:	2003      	movs	r0, #3
 8002fb4:	e7c0      	b.n	8002f38 <HAL_I2C_Mem_Write+0x14>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fb6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	d1fa      	bne.n	8002fb2 <HAL_I2C_Mem_Write+0x8e>
        return HAL_ERROR;
 8002fbc:	2001      	movs	r0, #1
 8002fbe:	e7bb      	b.n	8002f38 <HAL_I2C_Mem_Write+0x14>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc0:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8002fc2:	2220      	movs	r2, #32
          return HAL_TIMEOUT;
 8002fc4:	2003      	movs	r0, #3
        hi2c->State = HAL_I2C_STATE_READY;
 8002fc6:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 8002fca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fd2:	e7b1      	b.n	8002f38 <HAL_I2C_Mem_Write+0x14>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fd4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002fd6:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8002fda:	6821      	ldr	r1, [r4, #0]
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	2bff      	cmp	r3, #255	; 0xff
 8002fe0:	d95a      	bls.n	8003098 <HAL_I2C_Mem_Write+0x174>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002fe2:	684b      	ldr	r3, [r1, #4]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fe4:	20ff      	movs	r0, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002fe6:	4d3e      	ldr	r5, [pc, #248]	; (80030e0 <HAL_I2C_Mem_Write+0x1bc>)
 8002fe8:	4a3e      	ldr	r2, [pc, #248]	; (80030e4 <HAL_I2C_Mem_Write+0x1c0>)
 8002fea:	402b      	ands	r3, r5
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fec:	8520      	strh	r0, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002fee:	ea49 0202 	orr.w	r2, r9, r2
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	604b      	str	r3, [r1, #4]
 8002ff6:	4d3b      	ldr	r5, [pc, #236]	; (80030e4 <HAL_I2C_Mem_Write+0x1c0>)
 8002ff8:	4e39      	ldr	r6, [pc, #228]	; (80030e0 <HAL_I2C_Mem_Write+0x1bc>)
 8002ffa:	ea49 0505 	orr.w	r5, r9, r5
 8002ffe:	e003      	b.n	8003008 <HAL_I2C_Mem_Write+0xe4>
    while (hi2c->XferCount > 0U);
 8003000:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003002:	b29b      	uxth	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d055      	beq.n	80030b4 <HAL_I2C_Mem_Write+0x190>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003008:	4652      	mov	r2, sl
 800300a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800300c:	4620      	mov	r0, r4
 800300e:	f7ff fdab 	bl	8002b68 <I2C_WaitOnTXISFlagUntilTimeout>
 8003012:	2800      	cmp	r0, #0
 8003014:	d1cf      	bne.n	8002fb6 <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8003016:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003018:	6821      	ldr	r1, [r4, #0]
 800301a:	1c50      	adds	r0, r2, #1
      hi2c->XferSize--;
 800301c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 800301e:	6260      	str	r0, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003020:	3b01      	subs	r3, #1
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8003022:	7812      	ldrb	r2, [r2, #0]
      hi2c->XferSize--;
 8003024:	b29b      	uxth	r3, r3
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8003026:	628a      	str	r2, [r1, #40]	; 0x28
      hi2c->XferCount--;
 8003028:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800302a:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800302c:	3a01      	subs	r2, #1
 800302e:	b292      	uxth	r2, r2
 8003030:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1e4      	bne.n	8003000 <HAL_I2C_Mem_Write+0xdc>
 8003036:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003038:	b29b      	uxth	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0e0      	beq.n	8003000 <HAL_I2C_Mem_Write+0xdc>
 800303e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003040:	3301      	adds	r3, #1
 8003042:	d10d      	bne.n	8003060 <HAL_I2C_Mem_Write+0x13c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003044:	698b      	ldr	r3, [r1, #24]
 8003046:	061a      	lsls	r2, r3, #24
 8003048:	d5fc      	bpl.n	8003044 <HAL_I2C_Mem_Write+0x120>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800304a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800304c:	b29b      	uxth	r3, r3
 800304e:	2bff      	cmp	r3, #255	; 0xff
 8003050:	d915      	bls.n	800307e <HAL_I2C_Mem_Write+0x15a>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003052:	684b      	ldr	r3, [r1, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003054:	22ff      	movs	r2, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003056:	4033      	ands	r3, r6
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003058:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800305a:	432b      	orrs	r3, r5
 800305c:	604b      	str	r3, [r1, #4]
 800305e:	e7cf      	b.n	8003000 <HAL_I2C_Mem_Write+0xdc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003060:	698b      	ldr	r3, [r1, #24]
 8003062:	061b      	lsls	r3, r3, #24
 8003064:	d4f1      	bmi.n	800304a <HAL_I2C_Mem_Write+0x126>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003066:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0a9      	beq.n	8002fc0 <HAL_I2C_Mem_Write+0x9c>
 800306c:	f7fe fdca 	bl	8001c04 <HAL_GetTick>
 8003070:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003072:	eba0 000a 	sub.w	r0, r0, sl
 8003076:	4283      	cmp	r3, r0
 8003078:	d3a2      	bcc.n	8002fc0 <HAL_I2C_Mem_Write+0x9c>
 800307a:	6821      	ldr	r1, [r4, #0]
 800307c:	e7e0      	b.n	8003040 <HAL_I2C_Mem_Write+0x11c>
          hi2c->XferSize = hi2c->XferCount;
 800307e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003080:	6848      	ldr	r0, [r1, #4]
          hi2c->XferSize = hi2c->XferCount;
 8003082:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003084:	4030      	ands	r0, r6
 8003086:	b2d3      	uxtb	r3, r2
          hi2c->XferSize = hi2c->XferCount;
 8003088:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800308a:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 800308e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003092:	4303      	orrs	r3, r0
 8003094:	604b      	str	r3, [r1, #4]
 8003096:	e7b3      	b.n	8003000 <HAL_I2C_Mem_Write+0xdc>
      hi2c->XferSize = hi2c->XferCount;
 8003098:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800309a:	f049 7500 	orr.w	r5, r9, #33554432	; 0x2000000
 800309e:	684b      	ldr	r3, [r1, #4]
 80030a0:	480f      	ldr	r0, [pc, #60]	; (80030e0 <HAL_I2C_Mem_Write+0x1bc>)
      hi2c->XferSize = hi2c->XferCount;
 80030a2:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80030a4:	4003      	ands	r3, r0
 80030a6:	b2d0      	uxtb	r0, r2
      hi2c->XferSize = hi2c->XferCount;
 80030a8:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80030aa:	432b      	orrs	r3, r5
 80030ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80030b0:	604b      	str	r3, [r1, #4]
 80030b2:	e7a0      	b.n	8002ff6 <HAL_I2C_Mem_Write+0xd2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030b4:	4652      	mov	r2, sl
 80030b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80030b8:	4620      	mov	r0, r4
 80030ba:	f7ff fdb7 	bl	8002c2c <I2C_WaitOnSTOPFlagUntilTimeout>
 80030be:	2800      	cmp	r0, #0
 80030c0:	f47f af79 	bne.w	8002fb6 <HAL_I2C_Mem_Write+0x92>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030c4:	6823      	ldr	r3, [r4, #0]
 80030c6:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 80030c8:	4d07      	ldr	r5, [pc, #28]	; (80030e8 <HAL_I2C_Mem_Write+0x1c4>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030ca:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	402a      	ands	r2, r5
 80030d0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80030d2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80030d6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030da:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80030de:	e72b      	b.n	8002f38 <HAL_I2C_Mem_Write+0x14>
 80030e0:	fc009c00 	.word	0xfc009c00
 80030e4:	01ff0000 	.word	0x01ff0000
 80030e8:	fe00e800 	.word	0xfe00e800

080030ec <HAL_I2C_Mem_Read>:
{
 80030ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80030f0:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 80030f4:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 80030f6:	2c20      	cmp	r4, #32
{
 80030f8:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 80030fc:	d003      	beq.n	8003106 <HAL_I2C_Mem_Read+0x1a>
    return HAL_BUSY;
 80030fe:	2002      	movs	r0, #2
}
 8003100:	b002      	add	sp, #8
 8003102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((pData == NULL) || (Size == 0U))
 8003106:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003108:	2c00      	cmp	r4, #0
 800310a:	d045      	beq.n	8003198 <HAL_I2C_Mem_Read+0xac>
 800310c:	2d00      	cmp	r5, #0
 800310e:	d043      	beq.n	8003198 <HAL_I2C_Mem_Read+0xac>
    __HAL_LOCK(hi2c);
 8003110:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8003114:	2c01      	cmp	r4, #1
 8003116:	d0f2      	beq.n	80030fe <HAL_I2C_Mem_Read+0x12>
 8003118:	4698      	mov	r8, r3
 800311a:	2301      	movs	r3, #1
 800311c:	4617      	mov	r7, r2
 800311e:	460e      	mov	r6, r1
 8003120:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8003124:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8003126:	f7fe fd6d 	bl	8001c04 <HAL_GetTick>
 800312a:	4681      	mov	r9, r0
 800312c:	e005      	b.n	800313a <HAL_I2C_Mem_Read+0x4e>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800312e:	f7fe fd69 	bl	8001c04 <HAL_GetTick>
 8003132:	eba0 0009 	sub.w	r0, r0, r9
 8003136:	2819      	cmp	r0, #25
 8003138:	d83c      	bhi.n	80031b4 <HAL_I2C_Mem_Read+0xc8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800313a:	6823      	ldr	r3, [r4, #0]
 800313c:	6998      	ldr	r0, [r3, #24]
 800313e:	f410 4a00 	ands.w	sl, r0, #32768	; 0x8000
 8003142:	d1f4      	bne.n	800312e <HAL_I2C_Mem_Read+0x42>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003144:	2122      	movs	r1, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003146:	2040      	movs	r0, #64	; 0x40
    hi2c->pBuffPtr  = pData;
 8003148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800314a:	463a      	mov	r2, r7
 800314c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    hi2c->pBuffPtr  = pData;
 800314e:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003150:	4643      	mov	r3, r8
    hi2c->XferISR   = NULL;
 8003152:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003156:	f8cd 9004 	str.w	r9, [sp, #4]
 800315a:	9700      	str	r7, [sp, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800315c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003160:	4631      	mov	r1, r6
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003162:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003166:	4620      	mov	r0, r4
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003168:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800316c:	8565      	strh	r5, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800316e:	f7ff fdc1 	bl	8002cf4 <I2C_RequestMemoryRead>
 8003172:	b348      	cbz	r0, 80031c8 <HAL_I2C_Mem_Read+0xdc>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003174:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003176:	f884 a040 	strb.w	sl, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800317a:	2b04      	cmp	r3, #4
 800317c:	d00c      	beq.n	8003198 <HAL_I2C_Mem_Read+0xac>
        return HAL_TIMEOUT;
 800317e:	2003      	movs	r0, #3
 8003180:	e7be      	b.n	8003100 <HAL_I2C_Mem_Read+0x14>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003182:	464a      	mov	r2, r9
 8003184:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003186:	4620      	mov	r0, r4
 8003188:	f7ff fd50 	bl	8002c2c <I2C_WaitOnSTOPFlagUntilTimeout>
 800318c:	2800      	cmp	r0, #0
 800318e:	f000 8088 	beq.w	80032a2 <HAL_I2C_Mem_Read+0x1b6>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003192:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003194:	2b04      	cmp	r3, #4
 8003196:	d1f2      	bne.n	800317e <HAL_I2C_Mem_Read+0x92>
        return HAL_ERROR;
 8003198:	2001      	movs	r0, #1
 800319a:	e7b1      	b.n	8003100 <HAL_I2C_Mem_Read+0x14>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800319c:	6993      	ldr	r3, [r2, #24]
 800319e:	061b      	lsls	r3, r3, #24
 80031a0:	d459      	bmi.n	8003256 <HAL_I2C_Mem_Read+0x16a>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80031a4:	b133      	cbz	r3, 80031b4 <HAL_I2C_Mem_Read+0xc8>
 80031a6:	f7fe fd2d 	bl	8001c04 <HAL_GetTick>
 80031aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80031ac:	eba0 0009 	sub.w	r0, r0, r9
 80031b0:	4283      	cmp	r3, r0
 80031b2:	d24a      	bcs.n	800324a <HAL_I2C_Mem_Read+0x15e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b4:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80031b6:	2220      	movs	r2, #32
          return HAL_TIMEOUT;
 80031b8:	2003      	movs	r0, #3
        hi2c->State = HAL_I2C_STATE_READY;
 80031ba:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 80031be:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80031c6:	e79b      	b.n	8003100 <HAL_I2C_Mem_Read+0x14>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80031ca:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80031ce:	6822      	ldr	r2, [r4, #0]
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2bff      	cmp	r3, #255	; 0xff
 80031d4:	d957      	bls.n	8003286 <HAL_I2C_Mem_Read+0x19a>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80031d6:	6853      	ldr	r3, [r2, #4]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031d8:	20ff      	movs	r0, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80031da:	4d39      	ldr	r5, [pc, #228]	; (80032c0 <HAL_I2C_Mem_Read+0x1d4>)
 80031dc:	4939      	ldr	r1, [pc, #228]	; (80032c4 <HAL_I2C_Mem_Read+0x1d8>)
 80031de:	402b      	ands	r3, r5
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031e0:	8520      	strh	r0, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80031e2:	4331      	orrs	r1, r6
 80031e4:	430b      	orrs	r3, r1
 80031e6:	6053      	str	r3, [r2, #4]
 80031e8:	4d37      	ldr	r5, [pc, #220]	; (80032c8 <HAL_I2C_Mem_Read+0x1dc>)
 80031ea:	4f38      	ldr	r7, [pc, #224]	; (80032cc <HAL_I2C_Mem_Read+0x1e0>)
 80031ec:	4335      	orrs	r5, r6
 80031ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80031f0:	3301      	adds	r3, #1
 80031f2:	d11a      	bne.n	800322a <HAL_I2C_Mem_Read+0x13e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031f4:	6993      	ldr	r3, [r2, #24]
 80031f6:	075b      	lsls	r3, r3, #29
 80031f8:	d5fc      	bpl.n	80031f4 <HAL_I2C_Mem_Read+0x108>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80031fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80031fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031fe:	1c59      	adds	r1, r3, #1
 8003200:	6261      	str	r1, [r4, #36]	; 0x24
 8003202:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8003204:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003206:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003208:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800320a:	3a01      	subs	r2, #1
      hi2c->XferSize--;
 800320c:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800320e:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 8003210:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003212:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8003214:	b913      	cbnz	r3, 800321c <HAL_I2C_Mem_Read+0x130>
 8003216:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003218:	b29b      	uxth	r3, r3
 800321a:	b9ab      	cbnz	r3, 8003248 <HAL_I2C_Mem_Read+0x15c>
    while (hi2c->XferCount > 0U);
 800321c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800321e:	b29b      	uxth	r3, r3
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0ae      	beq.n	8003182 <HAL_I2C_Mem_Read+0x96>
 8003224:	6822      	ldr	r2, [r4, #0]
 8003226:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003228:	e7e2      	b.n	80031f0 <HAL_I2C_Mem_Read+0x104>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800322a:	6993      	ldr	r3, [r2, #24]
 800322c:	0758      	lsls	r0, r3, #29
 800322e:	d4e4      	bmi.n	80031fa <HAL_I2C_Mem_Read+0x10e>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003230:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0be      	beq.n	80031b4 <HAL_I2C_Mem_Read+0xc8>
 8003236:	f7fe fce5 	bl	8001c04 <HAL_GetTick>
 800323a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800323c:	eba0 0009 	sub.w	r0, r0, r9
 8003240:	4283      	cmp	r3, r0
 8003242:	d3b7      	bcc.n	80031b4 <HAL_I2C_Mem_Read+0xc8>
 8003244:	6822      	ldr	r2, [r4, #0]
 8003246:	e7d3      	b.n	80031f0 <HAL_I2C_Mem_Read+0x104>
 8003248:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800324a:	3301      	adds	r3, #1
 800324c:	6822      	ldr	r2, [r4, #0]
 800324e:	d1a5      	bne.n	800319c <HAL_I2C_Mem_Read+0xb0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003250:	6993      	ldr	r3, [r2, #24]
 8003252:	0619      	lsls	r1, r3, #24
 8003254:	d5fc      	bpl.n	8003250 <HAL_I2C_Mem_Read+0x164>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003256:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003258:	b29b      	uxth	r3, r3
 800325a:	2bff      	cmp	r3, #255	; 0xff
 800325c:	d906      	bls.n	800326c <HAL_I2C_Mem_Read+0x180>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800325e:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003260:	21ff      	movs	r1, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003262:	403b      	ands	r3, r7
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003264:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003266:	432b      	orrs	r3, r5
 8003268:	6053      	str	r3, [r2, #4]
 800326a:	e7d7      	b.n	800321c <HAL_I2C_Mem_Read+0x130>
          hi2c->XferSize = hi2c->XferCount;
 800326c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800326e:	6850      	ldr	r0, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8003270:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003272:	4038      	ands	r0, r7
 8003274:	b2cb      	uxtb	r3, r1
          hi2c->XferSize = hi2c->XferCount;
 8003276:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003278:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 800327c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003280:	4303      	orrs	r3, r0
 8003282:	6053      	str	r3, [r2, #4]
 8003284:	e7ca      	b.n	800321c <HAL_I2C_Mem_Read+0x130>
      hi2c->XferSize = hi2c->XferCount;
 8003286:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003288:	4d0d      	ldr	r5, [pc, #52]	; (80032c0 <HAL_I2C_Mem_Read+0x1d4>)
 800328a:	6853      	ldr	r3, [r2, #4]
      hi2c->XferSize = hi2c->XferCount;
 800328c:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800328e:	4810      	ldr	r0, [pc, #64]	; (80032d0 <HAL_I2C_Mem_Read+0x1e4>)
 8003290:	402b      	ands	r3, r5
      hi2c->XferSize = hi2c->XferCount;
 8003292:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003294:	4330      	orrs	r0, r6
 8003296:	b2c9      	uxtb	r1, r1
 8003298:	4303      	orrs	r3, r0
 800329a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800329e:	6053      	str	r3, [r2, #4]
 80032a0:	e7a2      	b.n	80031e8 <HAL_I2C_Mem_Read+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032a2:	6823      	ldr	r3, [r4, #0]
 80032a4:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 80032a6:	4d0b      	ldr	r5, [pc, #44]	; (80032d4 <HAL_I2C_Mem_Read+0x1e8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032a8:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	402a      	ands	r2, r5
 80032ae:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80032b0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80032b4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032b8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80032bc:	e720      	b.n	8003100 <HAL_I2C_Mem_Read+0x14>
 80032be:	bf00      	nop
 80032c0:	fc009800 	.word	0xfc009800
 80032c4:	81ff2400 	.word	0x81ff2400
 80032c8:	01ff0000 	.word	0x01ff0000
 80032cc:	fc009c00 	.word	0xfc009c00
 80032d0:	82002400 	.word	0x82002400
 80032d4:	fe00e800 	.word	0xfe00e800

080032d8 <HAL_I2C_GetState>:
  return hi2c->State;
 80032d8:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop

080032e0 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032e0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b20      	cmp	r3, #32
 80032e8:	d001      	beq.n	80032ee <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80032ea:	2002      	movs	r0, #2
 80032ec:	4770      	bx	lr
 80032ee:	4602      	mov	r2, r0
    __HAL_LOCK(hi2c);
 80032f0:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 80032f4:	2801      	cmp	r0, #1
 80032f6:	d0f8      	beq.n	80032ea <HAL_I2CEx_ConfigAnalogFilter+0xa>
    hi2c->State = HAL_I2C_STATE_BUSY;
 80032f8:	2024      	movs	r0, #36	; 0x24
{
 80032fa:	b470      	push	{r4, r5, r6}
    __HAL_I2C_DISABLE(hi2c);
 80032fc:	6814      	ldr	r4, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80032fe:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003300:	f882 0041 	strb.w	r0, [r2, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8003304:	6825      	ldr	r5, [r4, #0]
    return HAL_OK;
 8003306:	4630      	mov	r0, r6
    __HAL_I2C_DISABLE(hi2c);
 8003308:	f025 0501 	bic.w	r5, r5, #1
 800330c:	6025      	str	r5, [r4, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800330e:	6825      	ldr	r5, [r4, #0]
 8003310:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8003314:	6025      	str	r5, [r4, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8003316:	6825      	ldr	r5, [r4, #0]
 8003318:	4329      	orrs	r1, r5
 800331a:	6021      	str	r1, [r4, #0]
    __HAL_I2C_ENABLE(hi2c);
 800331c:	6821      	ldr	r1, [r4, #0]
 800331e:	f041 0101 	orr.w	r1, r1, #1
 8003322:	6021      	str	r1, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8003324:	f882 6040 	strb.w	r6, [r2, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8003328:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
  }
}
 800332c:	bc70      	pop	{r4, r5, r6}
 800332e:	4770      	bx	lr

08003330 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003330:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b20      	cmp	r3, #32
 8003338:	d001      	beq.n	800333e <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800333a:	2002      	movs	r0, #2
 800333c:	4770      	bx	lr
 800333e:	4602      	mov	r2, r0
    __HAL_LOCK(hi2c);
 8003340:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8003344:	2801      	cmp	r0, #1
 8003346:	d0f8      	beq.n	800333a <HAL_I2CEx_ConfigDigitalFilter+0xa>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003348:	2024      	movs	r0, #36	; 0x24
{
 800334a:	b470      	push	{r4, r5, r6}
    __HAL_I2C_DISABLE(hi2c);
 800334c:	6814      	ldr	r4, [r2, #0]
    __HAL_UNLOCK(hi2c);
 800334e:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003350:	f882 0041 	strb.w	r0, [r2, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8003354:	6825      	ldr	r5, [r4, #0]
    return HAL_OK;
 8003356:	4630      	mov	r0, r6
    __HAL_I2C_DISABLE(hi2c);
 8003358:	f025 0501 	bic.w	r5, r5, #1
 800335c:	6025      	str	r5, [r4, #0]
    tmpreg = hi2c->Instance->CR1;
 800335e:	6825      	ldr	r5, [r4, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8003360:	f425 6570 	bic.w	r5, r5, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8003364:	ea45 2101 	orr.w	r1, r5, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8003368:	6021      	str	r1, [r4, #0]
    __HAL_I2C_ENABLE(hi2c);
 800336a:	6821      	ldr	r1, [r4, #0]
 800336c:	f041 0101 	orr.w	r1, r1, #1
 8003370:	6021      	str	r1, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8003372:	f882 6040 	strb.w	r6, [r2, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8003376:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
  }
}
 800337a:	bc70      	pop	{r4, r5, r6}
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop

08003380 <HAL_LTDC_Init>:
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
  uint32_t tmp = 0, tmp1 = 0;

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 8003380:	2800      	cmp	r0, #0
 8003382:	d075      	beq.n	8003470 <HAL_LTDC_Init+0xf0>
{
 8003384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8003386:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 800338a:	4604      	mov	r4, r0
 800338c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003390:	2b00      	cmp	r3, #0
 8003392:	d068      	beq.n	8003466 <HAL_LTDC_Init+0xe6>
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003394:	6823      	ldr	r3, [r4, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003396:	2602      	movs	r6, #2
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003398:	68a0      	ldr	r0, [r4, #8]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800339a:	2501      	movs	r5, #1
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800339c:	6862      	ldr	r2, [r4, #4]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 800339e:	2100      	movs	r1, #0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80033a0:	f884 60a1 	strb.w	r6, [r4, #161]	; 0xa1
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80033a4:	68e7      	ldr	r7, [r4, #12]
 80033a6:	4302      	orrs	r2, r0
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80033a8:	6998      	ldr	r0, [r3, #24]
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80033aa:	6926      	ldr	r6, [r4, #16]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80033ac:	433a      	orrs	r2, r7
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80033ae:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  tmp = (hltdc->Init.HorizontalSync << 16);
 80033b2:	f8d4 e014 	ldr.w	lr, [r4, #20]
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80033b6:	4332      	orrs	r2, r6
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80033b8:	f8d4 c018 	ldr.w	ip, [r4, #24]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80033bc:	6198      	str	r0, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80033be:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80033c0:	4f2c      	ldr	r7, [pc, #176]	; (8003474 <HAL_LTDC_Init+0xf4>)
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80033c2:	4302      	orrs	r2, r0

  return HAL_OK;
 80033c4:	4608      	mov	r0, r1
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80033c6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80033c8:	689a      	ldr	r2, [r3, #8]
 80033ca:	403a      	ands	r2, r7
 80033cc:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80033ce:	689e      	ldr	r6, [r3, #8]
 80033d0:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 80033d4:	f8d4 e01c 	ldr.w	lr, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80033d8:	ea46 060c 	orr.w	r6, r6, ip
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80033dc:	f8d4 c020 	ldr.w	ip, [r4, #32]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80033e0:	609e      	str	r6, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80033e2:	68de      	ldr	r6, [r3, #12]
 80033e4:	403e      	ands	r6, r7
 80033e6:	60de      	str	r6, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80033e8:	68da      	ldr	r2, [r3, #12]
 80033ea:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 80033ee:	f8d4 e024 	ldr.w	lr, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80033f2:	ea42 020c 	orr.w	r2, r2, ip
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80033f6:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80033fa:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80033fc:	691a      	ldr	r2, [r3, #16]
 80033fe:	403a      	ands	r2, r7
 8003400:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003402:	691e      	ldr	r6, [r3, #16]
 8003404:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
  tmp = (hltdc->Init.TotalWidth << 16);
 8003408:	f8d4 e02c 	ldr.w	lr, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800340c:	ea46 060c 	orr.w	r6, r6, ip
 8003410:	611e      	str	r6, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003412:	695e      	ldr	r6, [r3, #20]
 8003414:	4037      	ands	r7, r6
 8003416:	615f      	str	r7, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003418:	695a      	ldr	r2, [r3, #20]
 800341a:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800341c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8003420:	4332      	orrs	r2, r6
 8003422:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003424:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 8003426:	f894 e035 	ldrb.w	lr, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800342a:	f006 467f 	and.w	r6, r6, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 800342e:	f894 7036 	ldrb.w	r7, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003432:	62de      	str	r6, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003434:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8003436:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800343a:	4332      	orrs	r2, r6
 800343c:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
 8003440:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8003444:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 8003446:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003448:	f042 0204 	orr.w	r2, r2, #4
 800344c:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 800344e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003450:	f042 0202 	orr.w	r2, r2, #2
 8003454:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8003456:	699a      	ldr	r2, [r3, #24]
 8003458:	432a      	orrs	r2, r5
 800345a:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 800345c:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8003460:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  return HAL_OK;
 8003464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8003466:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800346a:	f7fd ffa9 	bl	80013c0 <HAL_LTDC_MspInit>
 800346e:	e791      	b.n	8003394 <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
 8003470:	2001      	movs	r0, #1
 8003472:	4770      	bx	lr
 8003474:	f000f800 	.word	0xf000f800

08003478 <HAL_LTDC_ConfigLayer>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
  /* Process locked */
  __HAL_LOCK(hltdc);
 8003478:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800347c:	2b01      	cmp	r3, #1
 800347e:	d101      	bne.n	8003484 <HAL_LTDC_ConfigLayer+0xc>
 8003480:	2002      	movs	r0, #2
 8003482:	4770      	bx	lr
{   
 8003484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003488:	ea4f 1ec2 	mov.w	lr, r2, lsl #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 800348c:	6807      	ldr	r7, [r0, #0]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 800348e:	f04f 0834 	mov.w	r8, #52	; 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003492:	2302      	movs	r3, #2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003494:	f10e 0e84 	add.w	lr, lr, #132	; 0x84
 8003498:	460d      	mov	r5, r1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 800349a:	fb08 0202 	mla	r2, r8, r2, r0
 800349e:	4689      	mov	r9, r1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80034a0:	eb07 040e 	add.w	r4, r7, lr
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80034a4:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 80034a8:	68f9      	ldr	r1, [r7, #12]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80034aa:	f102 0838 	add.w	r8, r2, #56	; 0x38
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80034ae:	6863      	ldr	r3, [r4, #4]
  __HAL_LOCK(hltdc);
 80034b0:	f04f 0201 	mov.w	r2, #1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 80034b4:	f3c1 4a0b 	ubfx	sl, r1, #16, #12
 80034b8:	4606      	mov	r6, r0
  __HAL_LOCK(hltdc);
 80034ba:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80034be:	f403 4c70 	and.w	ip, r3, #61440	; 0xf000
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80034c2:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 80034c6:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 80034ca:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 80034ce:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 80034d2:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 80034d6:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 80034da:	f8d9 3000 	ldr.w	r3, [r9]
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80034de:	4848      	ldr	r0, [pc, #288]	; (8003600 <HAL_LTDC_ConfigLayer+0x188>)
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80034e0:	f8c8 3000 	str.w	r3, [r8]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 80034e4:	686b      	ldr	r3, [r5, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80034e6:	f8c4 c004 	str.w	ip, [r4, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80034ea:	68f9      	ldr	r1, [r7, #12]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 80034ec:	449a      	add	sl, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80034ee:	f8d5 c000 	ldr.w	ip, [r5]
 80034f2:	f3c1 410b 	ubfx	r1, r1, #16, #12
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 80034f6:	f8d5 900c 	ldr.w	r9, [r5, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80034fa:	f10c 0801 	add.w	r8, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 80034fe:	68aa      	ldr	r2, [r5, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8003500:	4441      	add	r1, r8
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003502:	f8d5 8010 	ldr.w	r8, [r5, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8003506:	3201      	adds	r2, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8003508:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 800350c:	f8d5 a018 	ldr.w	sl, [r5, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8003510:	6061      	str	r1, [r4, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8003512:	68f9      	ldr	r1, [r7, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003514:	f8d4 b008 	ldr.w	fp, [r4, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8003518:	f3c1 010a 	ubfx	r1, r1, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800351c:	f40b 4b70 	and.w	fp, fp, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8003520:	4449      	add	r1, r9
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003522:	f8d5 9014 	ldr.w	r9, [r5, #20]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003526:	f8c4 b008 	str.w	fp, [r4, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 800352a:	f8d7 b00c 	ldr.w	fp, [r7, #12]
 800352e:	f3cb 0b0a 	ubfx	fp, fp, #0, #11
 8003532:	445a      	add	r2, fp
 8003534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003538:	60a2      	str	r2, [r4, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800353a:	6922      	ldr	r2, [r4, #16]
 800353c:	f022 0207 	bic.w	r2, r2, #7
 8003540:	6122      	str	r2, [r4, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003542:	f8c4 8010 	str.w	r8, [r4, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003546:	69a2      	ldr	r2, [r4, #24]
 8003548:	2200      	movs	r2, #0
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 800354a:	f895 1031 	ldrb.w	r1, [r5, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 800354e:	f895 b032 	ldrb.w	fp, [r5, #50]	; 0x32
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003552:	61a2      	str	r2, [r4, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8003554:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
 8003558:	ea42 620a 	orr.w	r2, r2, sl, lsl #24
 800355c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003560:	6a29      	ldr	r1, [r5, #32]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8003562:	ea42 4a0b 	orr.w	sl, r2, fp, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003566:	69ea      	ldr	r2, [r5, #28]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8003568:	f8c4 a018 	str.w	sl, [r4, #24]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800356c:	4311      	orrs	r1, r2
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800356e:	6962      	ldr	r2, [r4, #20]
 8003570:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003574:	6162      	str	r2, [r4, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003576:	f8c4 9014 	str.w	r9, [r4, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800357a:	69e2      	ldr	r2, [r4, #28]
 800357c:	4010      	ands	r0, r2
 800357e:	61e0      	str	r0, [r4, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003580:	61e1      	str	r1, [r4, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003582:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003584:	2200      	movs	r2, #0
 8003586:	62a2      	str	r2, [r4, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003588:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800358a:	62a2      	str	r2, [r4, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800358c:	f1b8 0f00 	cmp.w	r8, #0
 8003590:	d02f      	beq.n	80035f2 <HAL_LTDC_ConfigLayer+0x17a>
  {
    tmp = 4;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003592:	f1b8 0f01 	cmp.w	r8, #1
 8003596:	d02e      	beq.n	80035f6 <HAL_LTDC_ConfigLayer+0x17e>
  {
    tmp = 3;
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003598:	f1a8 0202 	sub.w	r2, r8, #2
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800359c:	2a02      	cmp	r2, #2
 800359e:	d92c      	bls.n	80035fa <HAL_LTDC_ConfigLayer+0x182>
 80035a0:	f1b8 0f07 	cmp.w	r8, #7
 80035a4:	d029      	beq.n	80035fa <HAL_LTDC_ConfigLayer+0x182>
  {
    tmp = 2;
  }
  else
  {
    tmp = 1;
 80035a6:	2201      	movs	r2, #1
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 80035a8:	eba3 030c 	sub.w	r3, r3, ip
 80035ac:	6aa8      	ldr	r0, [r5, #40]	; 0x28

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80035ae:	6aed      	ldr	r5, [r5, #44]	; 0x2c
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80035b0:	2101      	movs	r1, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 80035b2:	fb02 f303 	mul.w	r3, r2, r3
  __HAL_UNLOCK(hltdc);
 80035b6:	f04f 0c00 	mov.w	ip, #0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 80035ba:	fb00 f202 	mul.w	r2, r0, r2
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80035be:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 80035c0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80035c2:	f000 20e0 	and.w	r0, r0, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 80035c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80035ca:	4a0e      	ldr	r2, [pc, #56]	; (8003604 <HAL_LTDC_ConfigLayer+0x18c>)
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80035cc:	62e0      	str	r0, [r4, #44]	; 0x2c
  return HAL_OK;
 80035ce:	4660      	mov	r0, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 80035d0:	62e3      	str	r3, [r4, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80035d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80035d4:	401a      	ands	r2, r3
 80035d6:	6322      	str	r2, [r4, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80035d8:	6325      	str	r5, [r4, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80035da:	f857 300e 	ldr.w	r3, [r7, lr]
 80035de:	430b      	orrs	r3, r1
 80035e0:	f847 300e 	str.w	r3, [r7, lr]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80035e4:	6279      	str	r1, [r7, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 80035e6:	f886 10a1 	strb.w	r1, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80035ea:	f886 c0a0 	strb.w	ip, [r6, #160]	; 0xa0
  return HAL_OK;
 80035ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp = 4;
 80035f2:	2204      	movs	r2, #4
 80035f4:	e7d8      	b.n	80035a8 <HAL_LTDC_ConfigLayer+0x130>
    tmp = 3;
 80035f6:	2203      	movs	r2, #3
 80035f8:	e7d6      	b.n	80035a8 <HAL_LTDC_ConfigLayer+0x130>
    tmp = 2;
 80035fa:	2202      	movs	r2, #2
 80035fc:	e7d4      	b.n	80035a8 <HAL_LTDC_ConfigLayer+0x130>
 80035fe:	bf00      	nop
 8003600:	fffff8f8 	.word	0xfffff8f8
 8003604:	fffff800 	.word	0xfffff800

08003608 <HAL_LTDC_GetState>:
  return hltdc->State;
 8003608:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
}
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop

08003610 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003610:	4a02      	ldr	r2, [pc, #8]	; (800361c <HAL_PWR_EnableBkUpAccess+0xc>)
 8003612:	6813      	ldr	r3, [r2, #0]
 8003614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	4770      	bx	lr
 800361c:	40007000 	.word	0x40007000

08003620 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003620:	4a1b      	ldr	r2, [pc, #108]	; (8003690 <HAL_PWREx_EnableOverDrive+0x70>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003622:	4b1c      	ldr	r3, [pc, #112]	; (8003694 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003624:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003626:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 800362a:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800362c:	6411      	str	r1, [r2, #64]	; 0x40
{
 800362e:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 8003630:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003632:	461c      	mov	r4, r3
  __HAL_RCC_PWR_CLK_ENABLE();
 8003634:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003638:	9201      	str	r2, [sp, #4]
 800363a:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003642:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8003644:	f7fe fade 	bl	8001c04 <HAL_GetTick>
 8003648:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800364a:	e005      	b.n	8003658 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800364c:	f7fe fada 	bl	8001c04 <HAL_GetTick>
 8003650:	1b40      	subs	r0, r0, r5
 8003652:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003656:	d817      	bhi.n	8003688 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003658:	6863      	ldr	r3, [r4, #4]
 800365a:	03da      	lsls	r2, r3, #15
 800365c:	d5f6      	bpl.n	800364c <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800365e:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003660:	4d0c      	ldr	r5, [pc, #48]	; (8003694 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003666:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003668:	f7fe facc 	bl	8001c04 <HAL_GetTick>
 800366c:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800366e:	e005      	b.n	800367c <HAL_PWREx_EnableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003670:	f7fe fac8 	bl	8001c04 <HAL_GetTick>
 8003674:	1b00      	subs	r0, r0, r4
 8003676:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800367a:	d805      	bhi.n	8003688 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800367c:	686b      	ldr	r3, [r5, #4]
 800367e:	039b      	lsls	r3, r3, #14
 8003680:	d5f6      	bpl.n	8003670 <HAL_PWREx_EnableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8003682:	2000      	movs	r0, #0
}
 8003684:	b003      	add	sp, #12
 8003686:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8003688:	2003      	movs	r0, #3
}
 800368a:	b003      	add	sp, #12
 800368c:	bd30      	pop	{r4, r5, pc}
 800368e:	bf00      	nop
 8003690:	40023800 	.word	0x40023800
 8003694:	40007000 	.word	0x40007000

08003698 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800369a:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t tickstart = HAL_GetTick();
 800369c:	f7fe fab2 	bl	8001c04 <HAL_GetTick>
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80036a0:	2c00      	cmp	r4, #0
 80036a2:	d05c      	beq.n	800375e <HAL_QSPI_Init+0xc6>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 80036a4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d04c      	beq.n	8003746 <HAL_QSPI_Init+0xae>
 80036ac:	2301      	movs	r3, #1
 80036ae:	4606      	mov	r6, r0
 80036b0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80036b4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80036b8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d044      	beq.n	800374a <HAL_QSPI_Init+0xb2>
 80036c0:	6ca5      	ldr	r5, [r4, #72]	; 0x48
    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 80036c2:	6822      	ldr	r2, [r4, #0]
 80036c4:	68a1      	ldr	r1, [r4, #8]
 80036c6:	6813      	ldr	r3, [r2, #0]
 80036c8:	3901      	subs	r1, #1
 80036ca:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80036ce:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80036d2:	6013      	str	r3, [r2, #0]
 80036d4:	1c68      	adds	r0, r5, #1
 80036d6:	d12b      	bne.n	8003730 <HAL_QSPI_Init+0x98>
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80036d8:	6893      	ldr	r3, [r2, #8]
 80036da:	0699      	lsls	r1, r3, #26
 80036dc:	d4fc      	bmi.n	80036d8 <HAL_QSPI_Init+0x40>
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 80036de:	69e5      	ldr	r5, [r4, #28]
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 80036e0:	2100      	movs	r1, #0
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 80036e2:	68e3      	ldr	r3, [r4, #12]
    hqspi->State = HAL_QSPI_STATE_READY;
 80036e4:	f04f 0c01 	mov.w	ip, #1
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 80036e8:	6a26      	ldr	r6, [r4, #32]
        
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80036ea:	4608      	mov	r0, r1
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 80036ec:	432b      	orrs	r3, r5
 80036ee:	6867      	ldr	r7, [r4, #4]
 80036f0:	6815      	ldr	r5, [r2, #0]
 80036f2:	4333      	orrs	r3, r6
 80036f4:	4e1f      	ldr	r6, [pc, #124]	; (8003774 <HAL_QSPI_Init+0xdc>)
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 80036f6:	f8d4 e018 	ldr.w	lr, [r4, #24]
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 80036fa:	402e      	ands	r6, r5
 80036fc:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8003700:	6965      	ldr	r5, [r4, #20]
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8003702:	4333      	orrs	r3, r6
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8003704:	4e1c      	ldr	r6, [pc, #112]	; (8003778 <HAL_QSPI_Init+0xe0>)
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8003706:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8003708:	ea45 030e 	orr.w	r3, r5, lr
 800370c:	6855      	ldr	r5, [r2, #4]
 800370e:	402e      	ands	r6, r5
 8003710:	6925      	ldr	r5, [r4, #16]
 8003712:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8003716:	4333      	orrs	r3, r6
 8003718:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800371a:	6813      	ldr	r3, [r2, #0]
 800371c:	ea43 030c 	orr.w	r3, r3, ip
 8003720:	6013      	str	r3, [r2, #0]
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8003722:	6461      	str	r1, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8003724:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8003728:	2300      	movs	r3, #0
 800372a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  return status;
 800372e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003730:	6893      	ldr	r3, [r2, #8]
 8003732:	069b      	lsls	r3, r3, #26
 8003734:	d5d3      	bpl.n	80036de <HAL_QSPI_Init+0x46>
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8003736:	b1a5      	cbz	r5, 8003762 <HAL_QSPI_Init+0xca>
 8003738:	f7fe fa64 	bl	8001c04 <HAL_GetTick>
 800373c:	1b80      	subs	r0, r0, r6
 800373e:	42a8      	cmp	r0, r5
 8003740:	d80f      	bhi.n	8003762 <HAL_QSPI_Init+0xca>
 8003742:	6822      	ldr	r2, [r4, #0]
 8003744:	e7c6      	b.n	80036d4 <HAL_QSPI_Init+0x3c>
  __HAL_LOCK(hqspi);
 8003746:	2002      	movs	r0, #2
 8003748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hqspi->Lock = HAL_UNLOCKED;
 800374a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 800374e:	4620      	mov	r0, r4
 8003750:	f7fd fec0 	bl	80014d4 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8003754:	f241 3388 	movw	r3, #5000	; 0x1388
 8003758:	461d      	mov	r5, r3
 800375a:	64a3      	str	r3, [r4, #72]	; 0x48
 800375c:	e7b1      	b.n	80036c2 <HAL_QSPI_Init+0x2a>
    return HAL_ERROR;
 800375e:	2001      	movs	r0, #1
 8003760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003762:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003764:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003766:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800376a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800376c:	4303      	orrs	r3, r0
 800376e:	6463      	str	r3, [r4, #68]	; 0x44
 8003770:	e7da      	b.n	8003728 <HAL_QSPI_Init+0x90>
 8003772:	bf00      	nop
 8003774:	00ffff2f 	.word	0x00ffff2f
 8003778:	ffe0f8fe 	.word	0xffe0f8fe

0800377c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800377c:	2800      	cmp	r0, #0
 800377e:	f000 81cf 	beq.w	8003b20 <HAL_RCC_OscConfig+0x3a4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003782:	6803      	ldr	r3, [r0, #0]
{
 8003784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003788:	07dd      	lsls	r5, r3, #31
{
 800378a:	b082      	sub	sp, #8
 800378c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800378e:	d530      	bpl.n	80037f2 <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003790:	49aa      	ldr	r1, [pc, #680]	; (8003a3c <HAL_RCC_OscConfig+0x2c0>)
 8003792:	688a      	ldr	r2, [r1, #8]
 8003794:	f002 020c 	and.w	r2, r2, #12
 8003798:	2a04      	cmp	r2, #4
 800379a:	f000 8119 	beq.w	80039d0 <HAL_RCC_OscConfig+0x254>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800379e:	688a      	ldr	r2, [r1, #8]
 80037a0:	f002 020c 	and.w	r2, r2, #12
 80037a4:	2a08      	cmp	r2, #8
 80037a6:	f000 810f 	beq.w	80039c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037aa:	6863      	ldr	r3, [r4, #4]
 80037ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037b0:	f000 8152 	beq.w	8003a58 <HAL_RCC_OscConfig+0x2dc>
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 80db 	beq.w	8003970 <HAL_RCC_OscConfig+0x1f4>
 80037ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037be:	4b9f      	ldr	r3, [pc, #636]	; (8003a3c <HAL_RCC_OscConfig+0x2c0>)
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	f000 81a5 	beq.w	8003b10 <HAL_RCC_OscConfig+0x394>
 80037c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037d2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d4:	f7fe fa16 	bl	8001c04 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037d8:	4d98      	ldr	r5, [pc, #608]	; (8003a3c <HAL_RCC_OscConfig+0x2c0>)
        tickstart = HAL_GetTick();
 80037da:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037dc:	e005      	b.n	80037ea <HAL_RCC_OscConfig+0x6e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037de:	f7fe fa11 	bl	8001c04 <HAL_GetTick>
 80037e2:	1b80      	subs	r0, r0, r6
 80037e4:	2864      	cmp	r0, #100	; 0x64
 80037e6:	f200 80eb 	bhi.w	80039c0 <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ea:	682b      	ldr	r3, [r5, #0]
 80037ec:	039a      	lsls	r2, r3, #14
 80037ee:	d5f6      	bpl.n	80037de <HAL_RCC_OscConfig+0x62>
 80037f0:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037f2:	079f      	lsls	r7, r3, #30
 80037f4:	d529      	bpl.n	800384a <HAL_RCC_OscConfig+0xce>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037f6:	4a91      	ldr	r2, [pc, #580]	; (8003a3c <HAL_RCC_OscConfig+0x2c0>)
 80037f8:	6891      	ldr	r1, [r2, #8]
 80037fa:	f011 0f0c 	tst.w	r1, #12
 80037fe:	f000 8082 	beq.w	8003906 <HAL_RCC_OscConfig+0x18a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003802:	6891      	ldr	r1, [r2, #8]
 8003804:	f001 010c 	and.w	r1, r1, #12
 8003808:	2908      	cmp	r1, #8
 800380a:	d079      	beq.n	8003900 <HAL_RCC_OscConfig+0x184>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800380c:	68e3      	ldr	r3, [r4, #12]
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 8109 	beq.w	8003a26 <HAL_RCC_OscConfig+0x2aa>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003814:	4b89      	ldr	r3, [pc, #548]	; (8003a3c <HAL_RCC_OscConfig+0x2c0>)
 8003816:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003818:	461d      	mov	r5, r3
        __HAL_RCC_HSI_ENABLE();
 800381a:	f042 0201 	orr.w	r2, r2, #1
 800381e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003820:	f7fe f9f0 	bl	8001c04 <HAL_GetTick>
 8003824:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003826:	e005      	b.n	8003834 <HAL_RCC_OscConfig+0xb8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003828:	f7fe f9ec 	bl	8001c04 <HAL_GetTick>
 800382c:	1b80      	subs	r0, r0, r6
 800382e:	2802      	cmp	r0, #2
 8003830:	f200 80c6 	bhi.w	80039c0 <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003834:	682b      	ldr	r3, [r5, #0]
 8003836:	0798      	lsls	r0, r3, #30
 8003838:	d5f6      	bpl.n	8003828 <HAL_RCC_OscConfig+0xac>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800383a:	682b      	ldr	r3, [r5, #0]
 800383c:	6922      	ldr	r2, [r4, #16]
 800383e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003842:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003846:	602b      	str	r3, [r5, #0]
 8003848:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800384a:	071a      	lsls	r2, r3, #28
 800384c:	d41f      	bmi.n	800388e <HAL_RCC_OscConfig+0x112>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800384e:	075d      	lsls	r5, r3, #29
 8003850:	d536      	bpl.n	80038c0 <HAL_RCC_OscConfig+0x144>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003852:	4b7a      	ldr	r3, [pc, #488]	; (8003a3c <HAL_RCC_OscConfig+0x2c0>)
 8003854:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003856:	00d0      	lsls	r0, r2, #3
 8003858:	d573      	bpl.n	8003942 <HAL_RCC_OscConfig+0x1c6>
  FlagStatus pwrclkchanged = RESET;
 800385a:	2500      	movs	r5, #0
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800385c:	4b78      	ldr	r3, [pc, #480]	; (8003a40 <HAL_RCC_OscConfig+0x2c4>)
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	05d1      	lsls	r1, r2, #23
 8003862:	f140 809c 	bpl.w	800399e <HAL_RCC_OscConfig+0x222>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003866:	68a3      	ldr	r3, [r4, #8]
 8003868:	2b01      	cmp	r3, #1
 800386a:	f000 80fb 	beq.w	8003a64 <HAL_RCC_OscConfig+0x2e8>
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 80b8 	beq.w	80039e4 <HAL_RCC_OscConfig+0x268>
 8003874:	2b05      	cmp	r3, #5
 8003876:	4b71      	ldr	r3, [pc, #452]	; (8003a3c <HAL_RCC_OscConfig+0x2c0>)
 8003878:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800387a:	f000 810c 	beq.w	8003a96 <HAL_RCC_OscConfig+0x31a>
 800387e:	f022 0201 	bic.w	r2, r2, #1
 8003882:	671a      	str	r2, [r3, #112]	; 0x70
 8003884:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003886:	f022 0204 	bic.w	r2, r2, #4
 800388a:	671a      	str	r2, [r3, #112]	; 0x70
 800388c:	e0ef      	b.n	8003a6e <HAL_RCC_OscConfig+0x2f2>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800388e:	6963      	ldr	r3, [r4, #20]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d043      	beq.n	800391c <HAL_RCC_OscConfig+0x1a0>
      __HAL_RCC_LSI_ENABLE();
 8003894:	4b69      	ldr	r3, [pc, #420]	; (8003a3c <HAL_RCC_OscConfig+0x2c0>)
 8003896:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003898:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 800389a:	f042 0201 	orr.w	r2, r2, #1
 800389e:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 80038a0:	f7fe f9b0 	bl	8001c04 <HAL_GetTick>
 80038a4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038a6:	e005      	b.n	80038b4 <HAL_RCC_OscConfig+0x138>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038a8:	f7fe f9ac 	bl	8001c04 <HAL_GetTick>
 80038ac:	1b80      	subs	r0, r0, r6
 80038ae:	2802      	cmp	r0, #2
 80038b0:	f200 8086 	bhi.w	80039c0 <HAL_RCC_OscConfig+0x244>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038b4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80038b6:	079b      	lsls	r3, r3, #30
 80038b8:	d5f6      	bpl.n	80038a8 <HAL_RCC_OscConfig+0x12c>
 80038ba:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038bc:	075d      	lsls	r5, r3, #29
 80038be:	d4c8      	bmi.n	8003852 <HAL_RCC_OscConfig+0xd6>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038c0:	69a2      	ldr	r2, [r4, #24]
 80038c2:	b1ca      	cbz	r2, 80038f8 <HAL_RCC_OscConfig+0x17c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038c4:	4b5d      	ldr	r3, [pc, #372]	; (8003a3c <HAL_RCC_OscConfig+0x2c0>)
 80038c6:	6899      	ldr	r1, [r3, #8]
 80038c8:	f001 010c 	and.w	r1, r1, #12
 80038cc:	2908      	cmp	r1, #8
 80038ce:	d021      	beq.n	8003914 <HAL_RCC_OscConfig+0x198>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038d0:	2a02      	cmp	r2, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d2:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038d4:	f000 80e7 	beq.w	8003aa6 <HAL_RCC_OscConfig+0x32a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038dc:	461c      	mov	r4, r3
        __HAL_RCC_PLL_DISABLE();
 80038de:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80038e0:	f7fe f990 	bl	8001c04 <HAL_GetTick>
 80038e4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e6:	e004      	b.n	80038f2 <HAL_RCC_OscConfig+0x176>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038e8:	f7fe f98c 	bl	8001c04 <HAL_GetTick>
 80038ec:	1b40      	subs	r0, r0, r5
 80038ee:	2802      	cmp	r0, #2
 80038f0:	d866      	bhi.n	80039c0 <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038f2:	6823      	ldr	r3, [r4, #0]
 80038f4:	019b      	lsls	r3, r3, #6
 80038f6:	d4f7      	bmi.n	80038e8 <HAL_RCC_OscConfig+0x16c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80038f8:	2000      	movs	r0, #0
}
 80038fa:	b002      	add	sp, #8
 80038fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003900:	6852      	ldr	r2, [r2, #4]
 8003902:	0256      	lsls	r6, r2, #9
 8003904:	d482      	bmi.n	800380c <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003906:	4a4d      	ldr	r2, [pc, #308]	; (8003a3c <HAL_RCC_OscConfig+0x2c0>)
 8003908:	6812      	ldr	r2, [r2, #0]
 800390a:	0795      	lsls	r5, r2, #30
 800390c:	d524      	bpl.n	8003958 <HAL_RCC_OscConfig+0x1dc>
 800390e:	68e2      	ldr	r2, [r4, #12]
 8003910:	2a01      	cmp	r2, #1
 8003912:	d021      	beq.n	8003958 <HAL_RCC_OscConfig+0x1dc>
    return HAL_ERROR;
 8003914:	2001      	movs	r0, #1
}
 8003916:	b002      	add	sp, #8
 8003918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 800391c:	4b47      	ldr	r3, [pc, #284]	; (8003a3c <HAL_RCC_OscConfig+0x2c0>)
 800391e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003920:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 8003922:	f022 0201 	bic.w	r2, r2, #1
 8003926:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8003928:	f7fe f96c 	bl	8001c04 <HAL_GetTick>
 800392c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800392e:	e004      	b.n	800393a <HAL_RCC_OscConfig+0x1be>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003930:	f7fe f968 	bl	8001c04 <HAL_GetTick>
 8003934:	1b80      	subs	r0, r0, r6
 8003936:	2802      	cmp	r0, #2
 8003938:	d842      	bhi.n	80039c0 <HAL_RCC_OscConfig+0x244>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800393a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800393c:	079f      	lsls	r7, r3, #30
 800393e:	d4f7      	bmi.n	8003930 <HAL_RCC_OscConfig+0x1b4>
 8003940:	e7bb      	b.n	80038ba <HAL_RCC_OscConfig+0x13e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003942:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8003944:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003946:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800394a:	641a      	str	r2, [r3, #64]	; 0x40
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003952:	9301      	str	r3, [sp, #4]
 8003954:	9b01      	ldr	r3, [sp, #4]
 8003956:	e781      	b.n	800385c <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003958:	4938      	ldr	r1, [pc, #224]	; (8003a3c <HAL_RCC_OscConfig+0x2c0>)
 800395a:	6920      	ldr	r0, [r4, #16]
 800395c:	680a      	ldr	r2, [r1, #0]
 800395e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003962:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8003966:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003968:	071a      	lsls	r2, r3, #28
 800396a:	f57f af70 	bpl.w	800384e <HAL_RCC_OscConfig+0xd2>
 800396e:	e78e      	b.n	800388e <HAL_RCC_OscConfig+0x112>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003970:	4b32      	ldr	r3, [pc, #200]	; (8003a3c <HAL_RCC_OscConfig+0x2c0>)
 8003972:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003974:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003976:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003982:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003984:	f7fe f93e 	bl	8001c04 <HAL_GetTick>
 8003988:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800398a:	e004      	b.n	8003996 <HAL_RCC_OscConfig+0x21a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800398c:	f7fe f93a 	bl	8001c04 <HAL_GetTick>
 8003990:	1b80      	subs	r0, r0, r6
 8003992:	2864      	cmp	r0, #100	; 0x64
 8003994:	d814      	bhi.n	80039c0 <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003996:	682b      	ldr	r3, [r5, #0]
 8003998:	039b      	lsls	r3, r3, #14
 800399a:	d4f7      	bmi.n	800398c <HAL_RCC_OscConfig+0x210>
 800399c:	e728      	b.n	80037f0 <HAL_RCC_OscConfig+0x74>
      PWR->CR1 |= PWR_CR1_DBP;
 800399e:	681a      	ldr	r2, [r3, #0]
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039a0:	461e      	mov	r6, r3
      PWR->CR1 |= PWR_CR1_DBP;
 80039a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039a6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80039a8:	f7fe f92c 	bl	8001c04 <HAL_GetTick>
 80039ac:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ae:	6833      	ldr	r3, [r6, #0]
 80039b0:	05da      	lsls	r2, r3, #23
 80039b2:	f53f af58 	bmi.w	8003866 <HAL_RCC_OscConfig+0xea>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80039b6:	f7fe f925 	bl	8001c04 <HAL_GetTick>
 80039ba:	1bc0      	subs	r0, r0, r7
 80039bc:	2864      	cmp	r0, #100	; 0x64
 80039be:	d9f6      	bls.n	80039ae <HAL_RCC_OscConfig+0x232>
            return HAL_TIMEOUT;
 80039c0:	2003      	movs	r0, #3
}
 80039c2:	b002      	add	sp, #8
 80039c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039c8:	684a      	ldr	r2, [r1, #4]
 80039ca:	0250      	lsls	r0, r2, #9
 80039cc:	f57f aeed 	bpl.w	80037aa <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d0:	4a1a      	ldr	r2, [pc, #104]	; (8003a3c <HAL_RCC_OscConfig+0x2c0>)
 80039d2:	6812      	ldr	r2, [r2, #0]
 80039d4:	0391      	lsls	r1, r2, #14
 80039d6:	f57f af0c 	bpl.w	80037f2 <HAL_RCC_OscConfig+0x76>
 80039da:	6862      	ldr	r2, [r4, #4]
 80039dc:	2a00      	cmp	r2, #0
 80039de:	f47f af08 	bne.w	80037f2 <HAL_RCC_OscConfig+0x76>
 80039e2:	e797      	b.n	8003914 <HAL_RCC_OscConfig+0x198>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039e4:	4b15      	ldr	r3, [pc, #84]	; (8003a3c <HAL_RCC_OscConfig+0x2c0>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039e6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ec:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039ee:	f022 0201 	bic.w	r2, r2, #1
 80039f2:	671a      	str	r2, [r3, #112]	; 0x70
 80039f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039f6:	f022 0204 	bic.w	r2, r2, #4
 80039fa:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80039fc:	f7fe f902 	bl	8001c04 <HAL_GetTick>
 8003a00:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a02:	e004      	b.n	8003a0e <HAL_RCC_OscConfig+0x292>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a04:	f7fe f8fe 	bl	8001c04 <HAL_GetTick>
 8003a08:	1bc0      	subs	r0, r0, r7
 8003a0a:	4540      	cmp	r0, r8
 8003a0c:	d8d8      	bhi.n	80039c0 <HAL_RCC_OscConfig+0x244>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a0e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003a10:	0798      	lsls	r0, r3, #30
 8003a12:	d4f7      	bmi.n	8003a04 <HAL_RCC_OscConfig+0x288>
    if(pwrclkchanged == SET)
 8003a14:	2d00      	cmp	r5, #0
 8003a16:	f43f af53 	beq.w	80038c0 <HAL_RCC_OscConfig+0x144>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a1a:	4a08      	ldr	r2, [pc, #32]	; (8003a3c <HAL_RCC_OscConfig+0x2c0>)
 8003a1c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003a1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a22:	6413      	str	r3, [r2, #64]	; 0x40
 8003a24:	e74c      	b.n	80038c0 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_HSI_DISABLE();
 8003a26:	4b05      	ldr	r3, [pc, #20]	; (8003a3c <HAL_RCC_OscConfig+0x2c0>)
 8003a28:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a2a:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 8003a2c:	f022 0201 	bic.w	r2, r2, #1
 8003a30:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003a32:	f7fe f8e7 	bl	8001c04 <HAL_GetTick>
 8003a36:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a38:	e009      	b.n	8003a4e <HAL_RCC_OscConfig+0x2d2>
 8003a3a:	bf00      	nop
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	40007000 	.word	0x40007000
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a44:	f7fe f8de 	bl	8001c04 <HAL_GetTick>
 8003a48:	1b80      	subs	r0, r0, r6
 8003a4a:	2802      	cmp	r0, #2
 8003a4c:	d8b8      	bhi.n	80039c0 <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a4e:	682b      	ldr	r3, [r5, #0]
 8003a50:	0799      	lsls	r1, r3, #30
 8003a52:	d4f7      	bmi.n	8003a44 <HAL_RCC_OscConfig+0x2c8>
 8003a54:	6823      	ldr	r3, [r4, #0]
 8003a56:	e6f8      	b.n	800384a <HAL_RCC_OscConfig+0xce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a58:	4a32      	ldr	r2, [pc, #200]	; (8003b24 <HAL_RCC_OscConfig+0x3a8>)
 8003a5a:	6813      	ldr	r3, [r2, #0]
 8003a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	e6b7      	b.n	80037d4 <HAL_RCC_OscConfig+0x58>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a64:	4a2f      	ldr	r2, [pc, #188]	; (8003b24 <HAL_RCC_OscConfig+0x3a8>)
 8003a66:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003a68:	f043 0301 	orr.w	r3, r3, #1
 8003a6c:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003a6e:	f7fe f8c9 	bl	8001c04 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a72:	4e2c      	ldr	r6, [pc, #176]	; (8003b24 <HAL_RCC_OscConfig+0x3a8>)
      tickstart = HAL_GetTick();
 8003a74:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a76:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a7a:	e005      	b.n	8003a88 <HAL_RCC_OscConfig+0x30c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a7c:	f7fe f8c2 	bl	8001c04 <HAL_GetTick>
 8003a80:	eba0 0008 	sub.w	r0, r0, r8
 8003a84:	42b8      	cmp	r0, r7
 8003a86:	d89b      	bhi.n	80039c0 <HAL_RCC_OscConfig+0x244>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a88:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003a8a:	079b      	lsls	r3, r3, #30
 8003a8c:	d5f6      	bpl.n	8003a7c <HAL_RCC_OscConfig+0x300>
    if(pwrclkchanged == SET)
 8003a8e:	2d00      	cmp	r5, #0
 8003a90:	f43f af16 	beq.w	80038c0 <HAL_RCC_OscConfig+0x144>
 8003a94:	e7c1      	b.n	8003a1a <HAL_RCC_OscConfig+0x29e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a96:	f042 0204 	orr.w	r2, r2, #4
 8003a9a:	671a      	str	r2, [r3, #112]	; 0x70
 8003a9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a9e:	f042 0201 	orr.w	r2, r2, #1
 8003aa2:	671a      	str	r2, [r3, #112]	; 0x70
 8003aa4:	e7e3      	b.n	8003a6e <HAL_RCC_OscConfig+0x2f2>
        __HAL_RCC_PLL_DISABLE();
 8003aa6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aaa:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8003aac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003aae:	f7fe f8a9 	bl	8001c04 <HAL_GetTick>
 8003ab2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ab4:	e005      	b.n	8003ac2 <HAL_RCC_OscConfig+0x346>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ab6:	f7fe f8a5 	bl	8001c04 <HAL_GetTick>
 8003aba:	1b80      	subs	r0, r0, r6
 8003abc:	2802      	cmp	r0, #2
 8003abe:	f63f af7f 	bhi.w	80039c0 <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ac2:	682b      	ldr	r3, [r5, #0]
 8003ac4:	0199      	lsls	r1, r3, #6
 8003ac6:	d4f6      	bmi.n	8003ab6 <HAL_RCC_OscConfig+0x33a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ac8:	6a22      	ldr	r2, [r4, #32]
 8003aca:	69e3      	ldr	r3, [r4, #28]
 8003acc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003ad2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003ad4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ad8:	0852      	lsrs	r2, r2, #1
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ada:	4c12      	ldr	r4, [pc, #72]	; (8003b24 <HAL_RCC_OscConfig+0x3a8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003adc:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003ae0:	3a01      	subs	r2, #1
 8003ae2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003ae6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003aea:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003aec:	682b      	ldr	r3, [r5, #0]
 8003aee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003af2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003af4:	f7fe f886 	bl	8001c04 <HAL_GetTick>
 8003af8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003afa:	e005      	b.n	8003b08 <HAL_RCC_OscConfig+0x38c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003afc:	f7fe f882 	bl	8001c04 <HAL_GetTick>
 8003b00:	1b40      	subs	r0, r0, r5
 8003b02:	2802      	cmp	r0, #2
 8003b04:	f63f af5c 	bhi.w	80039c0 <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b08:	6823      	ldr	r3, [r4, #0]
 8003b0a:	019a      	lsls	r2, r3, #6
 8003b0c:	d5f6      	bpl.n	8003afc <HAL_RCC_OscConfig+0x380>
 8003b0e:	e6f3      	b.n	80038f8 <HAL_RCC_OscConfig+0x17c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b10:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003b14:	601a      	str	r2, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	e659      	b.n	80037d4 <HAL_RCC_OscConfig+0x58>
    return HAL_ERROR;
 8003b20:	2001      	movs	r0, #1
}
 8003b22:	4770      	bx	lr
 8003b24:	40023800 	.word	0x40023800

08003b28 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b28:	b178      	cbz	r0, 8003b4a <HAL_RCC_ClockConfig+0x22>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b2a:	4a5e      	ldr	r2, [pc, #376]	; (8003ca4 <HAL_RCC_ClockConfig+0x17c>)
 8003b2c:	6813      	ldr	r3, [r2, #0]
 8003b2e:	f003 030f 	and.w	r3, r3, #15
 8003b32:	428b      	cmp	r3, r1
 8003b34:	d20b      	bcs.n	8003b4e <HAL_RCC_ClockConfig+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b36:	6813      	ldr	r3, [r2, #0]
 8003b38:	f023 030f 	bic.w	r3, r3, #15
 8003b3c:	430b      	orrs	r3, r1
 8003b3e:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b40:	6813      	ldr	r3, [r2, #0]
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	4299      	cmp	r1, r3
 8003b48:	d001      	beq.n	8003b4e <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 8003b4a:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 8003b4c:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b4e:	6803      	ldr	r3, [r0, #0]
{
 8003b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b54:	079d      	lsls	r5, r3, #30
 8003b56:	d514      	bpl.n	8003b82 <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b58:	075c      	lsls	r4, r3, #29
 8003b5a:	d504      	bpl.n	8003b66 <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b5c:	4c52      	ldr	r4, [pc, #328]	; (8003ca8 <HAL_RCC_ClockConfig+0x180>)
 8003b5e:	68a2      	ldr	r2, [r4, #8]
 8003b60:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8003b64:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b66:	071a      	lsls	r2, r3, #28
 8003b68:	d504      	bpl.n	8003b74 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b6a:	4c4f      	ldr	r4, [pc, #316]	; (8003ca8 <HAL_RCC_ClockConfig+0x180>)
 8003b6c:	68a2      	ldr	r2, [r4, #8]
 8003b6e:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8003b72:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b74:	4c4c      	ldr	r4, [pc, #304]	; (8003ca8 <HAL_RCC_ClockConfig+0x180>)
 8003b76:	6885      	ldr	r5, [r0, #8]
 8003b78:	68a2      	ldr	r2, [r4, #8]
 8003b7a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003b7e:	432a      	orrs	r2, r5
 8003b80:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b82:	07df      	lsls	r7, r3, #31
 8003b84:	4604      	mov	r4, r0
 8003b86:	460d      	mov	r5, r1
 8003b88:	d521      	bpl.n	8003bce <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b8a:	6842      	ldr	r2, [r0, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b8c:	4b46      	ldr	r3, [pc, #280]	; (8003ca8 <HAL_RCC_ClockConfig+0x180>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b8e:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b90:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b92:	d07b      	beq.n	8003c8c <HAL_RCC_ClockConfig+0x164>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b94:	2a02      	cmp	r2, #2
 8003b96:	d071      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x154>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b98:	0799      	lsls	r1, r3, #30
 8003b9a:	d528      	bpl.n	8003bee <HAL_RCC_ClockConfig+0xc6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b9c:	4942      	ldr	r1, [pc, #264]	; (8003ca8 <HAL_RCC_ClockConfig+0x180>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b9e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ba2:	688b      	ldr	r3, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba4:	460e      	mov	r6, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ba6:	f023 0303 	bic.w	r3, r3, #3
 8003baa:	4313      	orrs	r3, r2
 8003bac:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003bae:	f7fe f829 	bl	8001c04 <HAL_GetTick>
 8003bb2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb4:	e004      	b.n	8003bc0 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bb6:	f7fe f825 	bl	8001c04 <HAL_GetTick>
 8003bba:	1bc0      	subs	r0, r0, r7
 8003bbc:	4540      	cmp	r0, r8
 8003bbe:	d862      	bhi.n	8003c86 <HAL_RCC_ClockConfig+0x15e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bc0:	68b3      	ldr	r3, [r6, #8]
 8003bc2:	6862      	ldr	r2, [r4, #4]
 8003bc4:	f003 030c 	and.w	r3, r3, #12
 8003bc8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003bcc:	d1f3      	bne.n	8003bb6 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bce:	4a35      	ldr	r2, [pc, #212]	; (8003ca4 <HAL_RCC_ClockConfig+0x17c>)
 8003bd0:	6813      	ldr	r3, [r2, #0]
 8003bd2:	f003 030f 	and.w	r3, r3, #15
 8003bd6:	429d      	cmp	r5, r3
 8003bd8:	d20c      	bcs.n	8003bf4 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bda:	6813      	ldr	r3, [r2, #0]
 8003bdc:	f023 030f 	bic.w	r3, r3, #15
 8003be0:	432b      	orrs	r3, r5
 8003be2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be4:	6813      	ldr	r3, [r2, #0]
 8003be6:	f003 030f 	and.w	r3, r3, #15
 8003bea:	429d      	cmp	r5, r3
 8003bec:	d002      	beq.n	8003bf4 <HAL_RCC_ClockConfig+0xcc>
    return HAL_ERROR;
 8003bee:	2001      	movs	r0, #1
 8003bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf4:	6823      	ldr	r3, [r4, #0]
 8003bf6:	075a      	lsls	r2, r3, #29
 8003bf8:	d506      	bpl.n	8003c08 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bfa:	492b      	ldr	r1, [pc, #172]	; (8003ca8 <HAL_RCC_ClockConfig+0x180>)
 8003bfc:	68e0      	ldr	r0, [r4, #12]
 8003bfe:	688a      	ldr	r2, [r1, #8]
 8003c00:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8003c04:	4302      	orrs	r2, r0
 8003c06:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c08:	071b      	lsls	r3, r3, #28
 8003c0a:	d507      	bpl.n	8003c1c <HAL_RCC_ClockConfig+0xf4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c0c:	4a26      	ldr	r2, [pc, #152]	; (8003ca8 <HAL_RCC_ClockConfig+0x180>)
 8003c0e:	6921      	ldr	r1, [r4, #16]
 8003c10:	6893      	ldr	r3, [r2, #8]
 8003c12:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003c16:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003c1a:	6093      	str	r3, [r2, #8]
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c1c:	4922      	ldr	r1, [pc, #136]	; (8003ca8 <HAL_RCC_ClockConfig+0x180>)
 8003c1e:	688b      	ldr	r3, [r1, #8]
 8003c20:	f003 030c 	and.w	r3, r3, #12
 8003c24:	2b04      	cmp	r3, #4
 8003c26:	d019      	beq.n	8003c5c <HAL_RCC_ClockConfig+0x134>
 8003c28:	2b08      	cmp	r3, #8
 8003c2a:	d12a      	bne.n	8003c82 <HAL_RCC_ClockConfig+0x15a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c2c:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003c2e:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c30:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c34:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003c36:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8003c3a:	d12a      	bne.n	8003c92 <HAL_RCC_ClockConfig+0x16a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c3c:	481b      	ldr	r0, [pc, #108]	; (8003cac <HAL_RCC_ClockConfig+0x184>)
 8003c3e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003c42:	fba1 0100 	umull	r0, r1, r1, r0
 8003c46:	f7fc faf1 	bl	800022c <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8003c4a:	4b17      	ldr	r3, [pc, #92]	; (8003ca8 <HAL_RCC_ClockConfig+0x180>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003c52:	3301      	adds	r3, #1
 8003c54:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8003c56:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c5a:	e000      	b.n	8003c5e <HAL_RCC_ClockConfig+0x136>
      sysclockfreq = HSE_VALUE;
 8003c5c:	4b14      	ldr	r3, [pc, #80]	; (8003cb0 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c5e:	4a12      	ldr	r2, [pc, #72]	; (8003ca8 <HAL_RCC_ClockConfig+0x180>)
  HAL_InitTick (TICK_INT_PRIORITY);
 8003c60:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c62:	4c14      	ldr	r4, [pc, #80]	; (8003cb4 <HAL_RCC_ClockConfig+0x18c>)
 8003c64:	6892      	ldr	r2, [r2, #8]
 8003c66:	4914      	ldr	r1, [pc, #80]	; (8003cb8 <HAL_RCC_ClockConfig+0x190>)
 8003c68:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003c6c:	5ca2      	ldrb	r2, [r4, r2]
 8003c6e:	40d3      	lsrs	r3, r2
 8003c70:	600b      	str	r3, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003c72:	f7fd ff29 	bl	8001ac8 <HAL_InitTick>
  return HAL_OK;
 8003c76:	2000      	movs	r0, #0
 8003c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c7c:	0198      	lsls	r0, r3, #6
 8003c7e:	d48d      	bmi.n	8003b9c <HAL_RCC_ClockConfig+0x74>
 8003c80:	e7b5      	b.n	8003bee <HAL_RCC_ClockConfig+0xc6>
      sysclockfreq = HSI_VALUE;
 8003c82:	4b0a      	ldr	r3, [pc, #40]	; (8003cac <HAL_RCC_ClockConfig+0x184>)
 8003c84:	e7eb      	b.n	8003c5e <HAL_RCC_ClockConfig+0x136>
        return HAL_TIMEOUT;
 8003c86:	2003      	movs	r0, #3
}
 8003c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c8c:	039e      	lsls	r6, r3, #14
 8003c8e:	d485      	bmi.n	8003b9c <HAL_RCC_ClockConfig+0x74>
 8003c90:	e7ad      	b.n	8003bee <HAL_RCC_ClockConfig+0xc6>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c92:	4807      	ldr	r0, [pc, #28]	; (8003cb0 <HAL_RCC_ClockConfig+0x188>)
 8003c94:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003c98:	2300      	movs	r3, #0
 8003c9a:	fba1 0100 	umull	r0, r1, r1, r0
 8003c9e:	f7fc fac5 	bl	800022c <__aeabi_uldivmod>
 8003ca2:	e7d2      	b.n	8003c4a <HAL_RCC_ClockConfig+0x122>
 8003ca4:	40023c00 	.word	0x40023c00
 8003ca8:	40023800 	.word	0x40023800
 8003cac:	00f42400 	.word	0x00f42400
 8003cb0:	017d7840 	.word	0x017d7840
 8003cb4:	0801da2c 	.word	0x0801da2c
 8003cb8:	20000000 	.word	0x20000000

08003cbc <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cbc:	4916      	ldr	r1, [pc, #88]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8003cbe:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cc0:	688b      	ldr	r3, [r1, #8]
 8003cc2:	f003 030c 	and.w	r3, r3, #12
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	d01b      	beq.n	8003d02 <HAL_RCC_GetSysClockFreq+0x46>
 8003cca:	2b08      	cmp	r3, #8
 8003ccc:	d117      	bne.n	8003cfe <HAL_RCC_GetSysClockFreq+0x42>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cce:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003cd0:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cd2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cd6:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003cd8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8003cdc:	d113      	bne.n	8003d06 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cde:	480f      	ldr	r0, [pc, #60]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x60>)
 8003ce0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003ce4:	fba1 0100 	umull	r0, r1, r1, r0
 8003ce8:	f7fc faa0 	bl	800022c <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8003cec:	4b0a      	ldr	r3, [pc, #40]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x5c>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8003cf8:	fbb0 f0f3 	udiv	r0, r0, r3
 8003cfc:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8003cfe:	4807      	ldr	r0, [pc, #28]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x60>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003d00:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8003d02:	4807      	ldr	r0, [pc, #28]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x64>)
 8003d04:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d06:	4806      	ldr	r0, [pc, #24]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x64>)
 8003d08:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	fba1 0100 	umull	r0, r1, r1, r0
 8003d12:	f7fc fa8b 	bl	800022c <__aeabi_uldivmod>
 8003d16:	e7e9      	b.n	8003cec <HAL_RCC_GetSysClockFreq+0x30>
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	00f42400 	.word	0x00f42400
 8003d20:	017d7840 	.word	0x017d7840

08003d24 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d24:	4b04      	ldr	r3, [pc, #16]	; (8003d38 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003d26:	4a05      	ldr	r2, [pc, #20]	; (8003d3c <HAL_RCC_GetPCLK1Freq+0x18>)
 8003d28:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003d2a:	4905      	ldr	r1, [pc, #20]	; (8003d40 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d2c:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003d30:	6808      	ldr	r0, [r1, #0]
 8003d32:	5cd3      	ldrb	r3, [r2, r3]
}
 8003d34:	40d8      	lsrs	r0, r3
 8003d36:	4770      	bx	lr
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	0801da3c 	.word	0x0801da3c
 8003d40:	20000000 	.word	0x20000000

08003d44 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d44:	4b04      	ldr	r3, [pc, #16]	; (8003d58 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003d46:	4a05      	ldr	r2, [pc, #20]	; (8003d5c <HAL_RCC_GetPCLK2Freq+0x18>)
 8003d48:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003d4a:	4905      	ldr	r1, [pc, #20]	; (8003d60 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d4c:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003d50:	6808      	ldr	r0, [r1, #0]
 8003d52:	5cd3      	ldrb	r3, [r2, r3]
}
 8003d54:	40d8      	lsrs	r0, r3
 8003d56:	4770      	bx	lr
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	0801da3c 	.word	0x0801da3c
 8003d60:	20000000 	.word	0x20000000

08003d64 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d64:	4b0e      	ldr	r3, [pc, #56]	; (8003da0 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d66:	220f      	movs	r2, #15
 8003d68:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	f002 0203 	and.w	r2, r2, #3
 8003d70:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003d78:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8003d80:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	08db      	lsrs	r3, r3, #3
{
 8003d86:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003d88:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003d8c:	4c05      	ldr	r4, [pc, #20]	; (8003da4 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003d8e:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003d90:	6823      	ldr	r3, [r4, #0]
}
 8003d92:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003d96:	f003 030f 	and.w	r3, r3, #15
 8003d9a:	600b      	str	r3, [r1, #0]
}
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	40023800 	.word	0x40023800
 8003da4:	40023c00 	.word	0x40023c00

08003da8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003da8:	6803      	ldr	r3, [r0, #0]
{
 8003daa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003dae:	f013 0601 	ands.w	r6, r3, #1
{
 8003db2:	b083      	sub	sp, #12
 8003db4:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003db6:	d00b      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003db8:	4ab8      	ldr	r2, [pc, #736]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dba:	6891      	ldr	r1, [r2, #8]
 8003dbc:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8003dc0:	6091      	str	r1, [r2, #8]
 8003dc2:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8003dc4:	6891      	ldr	r1, [r2, #8]
 8003dc6:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003dc8:	fab6 f686 	clz	r6, r6
 8003dcc:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003dce:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003dd0:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8003dd4:	d010      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dd6:	49b1      	ldr	r1, [pc, #708]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dd8:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8003dda:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003dde:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003de2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003de6:	ea42 0205 	orr.w	r2, r2, r5
 8003dea:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003dee:	f000 81a1 	beq.w	8004134 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003df2:	fab5 f585 	clz	r5, r5
 8003df6:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003df8:	02d9      	lsls	r1, r3, #11
 8003dfa:	d510      	bpl.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003dfc:	48a7      	ldr	r0, [pc, #668]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dfe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003e00:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003e04:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e08:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8003e0c:	ea42 0201 	orr.w	r2, r2, r1
 8003e10:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003e14:	f000 818c 	beq.w	8004130 <HAL_RCCEx_PeriphCLKConfig+0x388>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8003e18:	2900      	cmp	r1, #0
 8003e1a:	bf08      	it	eq
 8003e1c:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8003e1e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003e22:	bf18      	it	ne
 8003e24:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e26:	069a      	lsls	r2, r3, #26
 8003e28:	f100 813a 	bmi.w	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e2c:	06d9      	lsls	r1, r3, #27
 8003e2e:	d50c      	bpl.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e30:	4a9a      	ldr	r2, [pc, #616]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e32:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8003e36:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8003e3a:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8003e3e:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8003e42:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003e44:	4301      	orrs	r1, r0
 8003e46:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e4a:	045a      	lsls	r2, r3, #17
 8003e4c:	d508      	bpl.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e4e:	4993      	ldr	r1, [pc, #588]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e50:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003e52:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003e56:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003e5a:	4302      	orrs	r2, r0
 8003e5c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e60:	041f      	lsls	r7, r3, #16
 8003e62:	d508      	bpl.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e64:	498d      	ldr	r1, [pc, #564]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e66:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8003e68:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003e6c:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8003e70:	4302      	orrs	r2, r0
 8003e72:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e76:	03d8      	lsls	r0, r3, #15
 8003e78:	d508      	bpl.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e7a:	4988      	ldr	r1, [pc, #544]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e7c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003e7e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003e82:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003e86:	4302      	orrs	r2, r0
 8003e88:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e8c:	0399      	lsls	r1, r3, #14
 8003e8e:	d508      	bpl.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e90:	4982      	ldr	r1, [pc, #520]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e92:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8003e94:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003e98:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8003e9c:	4302      	orrs	r2, r0
 8003e9e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ea2:	065a      	lsls	r2, r3, #25
 8003ea4:	d508      	bpl.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ea6:	497d      	ldr	r1, [pc, #500]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ea8:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003eaa:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003eae:	f022 0203 	bic.w	r2, r2, #3
 8003eb2:	4302      	orrs	r2, r0
 8003eb4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003eb8:	061f      	lsls	r7, r3, #24
 8003eba:	d508      	bpl.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ebc:	4977      	ldr	r1, [pc, #476]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ebe:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003ec0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003ec4:	f022 020c 	bic.w	r2, r2, #12
 8003ec8:	4302      	orrs	r2, r0
 8003eca:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ece:	05d8      	lsls	r0, r3, #23
 8003ed0:	d508      	bpl.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ed2:	4972      	ldr	r1, [pc, #456]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ed4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003ed6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003eda:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8003ede:	4302      	orrs	r2, r0
 8003ee0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ee4:	0599      	lsls	r1, r3, #22
 8003ee6:	d508      	bpl.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ee8:	496c      	ldr	r1, [pc, #432]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003eea:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003eec:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003ef0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003ef4:	4302      	orrs	r2, r0
 8003ef6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003efa:	055a      	lsls	r2, r3, #21
 8003efc:	d508      	bpl.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003efe:	4967      	ldr	r1, [pc, #412]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f00:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f02:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003f06:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003f0a:	4302      	orrs	r2, r0
 8003f0c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003f10:	051f      	lsls	r7, r3, #20
 8003f12:	d508      	bpl.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003f14:	4961      	ldr	r1, [pc, #388]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f16:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f18:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003f1c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003f20:	4302      	orrs	r2, r0
 8003f22:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003f26:	04d8      	lsls	r0, r3, #19
 8003f28:	d508      	bpl.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003f2a:	495c      	ldr	r1, [pc, #368]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f2c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8003f2e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003f32:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003f36:	4302      	orrs	r2, r0
 8003f38:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003f3c:	0499      	lsls	r1, r3, #18
 8003f3e:	d508      	bpl.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003f40:	4956      	ldr	r1, [pc, #344]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f42:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003f44:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003f48:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003f4c:	4302      	orrs	r2, r0
 8003f4e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f52:	025a      	lsls	r2, r3, #9
 8003f54:	d508      	bpl.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f56:	4951      	ldr	r1, [pc, #324]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f58:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8003f5a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003f5e:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003f62:	4302      	orrs	r2, r0
 8003f64:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003f68:	029f      	lsls	r7, r3, #10
 8003f6a:	d50c      	bpl.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003f6c:	494b      	ldr	r1, [pc, #300]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f6e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8003f70:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8003f74:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003f78:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8003f7c:	bf08      	it	eq
 8003f7e:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003f80:	4302      	orrs	r2, r0
 8003f82:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8003f86:	f013 0f08 	tst.w	r3, #8
 8003f8a:	bf18      	it	ne
 8003f8c:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f8e:	0358      	lsls	r0, r3, #13
 8003f90:	d508      	bpl.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f92:	4942      	ldr	r1, [pc, #264]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f94:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003f96:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003f9a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003f9e:	4302      	orrs	r2, r0
 8003fa0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003fa4:	0219      	lsls	r1, r3, #8
 8003fa6:	d40b      	bmi.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003fa8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fac:	d016      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003fae:	07f2      	lsls	r2, r6, #31
 8003fb0:	d414      	bmi.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003fb2:	2d01      	cmp	r5, #1
 8003fb4:	f000 80c1 	beq.w	800413a <HAL_RCCEx_PeriphCLKConfig+0x392>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003fb8:	2000      	movs	r0, #0
}
 8003fba:	b003      	add	sp, #12
 8003fbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fc0:	4936      	ldr	r1, [pc, #216]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003fc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fc6:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8003fca:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003fce:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003fd2:	ea42 0200 	orr.w	r2, r2, r0
 8003fd6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003fda:	d1e8      	bne.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_PLLI2S_DISABLE();
 8003fdc:	4b2f      	ldr	r3, [pc, #188]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fde:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fe0:	461e      	mov	r6, r3
    __HAL_RCC_PLLI2S_DISABLE();
 8003fe2:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003fe6:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003fe8:	f7fd fe0c 	bl	8001c04 <HAL_GetTick>
 8003fec:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fee:	e004      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x252>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ff0:	f7fd fe08 	bl	8001c04 <HAL_GetTick>
 8003ff4:	1bc0      	subs	r0, r0, r7
 8003ff6:	2864      	cmp	r0, #100	; 0x64
 8003ff8:	d84c      	bhi.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ffa:	6833      	ldr	r3, [r6, #0]
 8003ffc:	011b      	lsls	r3, r3, #4
 8003ffe:	d4f7      	bmi.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x248>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004000:	6823      	ldr	r3, [r4, #0]
 8004002:	07df      	lsls	r7, r3, #31
 8004004:	d503      	bpl.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x266>
 8004006:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004008:	2a00      	cmp	r2, #0
 800400a:	f000 8100 	beq.w	800420e <HAL_RCCEx_PeriphCLKConfig+0x466>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800400e:	031e      	lsls	r6, r3, #12
 8004010:	d504      	bpl.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004012:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004014:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8004018:	f000 8124 	beq.w	8004264 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800401c:	02d8      	lsls	r0, r3, #11
 800401e:	d504      	bpl.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x282>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004020:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004022:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8004026:	f000 811d 	beq.w	8004264 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800402a:	01d9      	lsls	r1, r3, #7
 800402c:	d511      	bpl.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800402e:	4e1b      	ldr	r6, [pc, #108]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004030:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004032:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004036:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800403a:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800403e:	6921      	ldr	r1, [r4, #16]
 8004040:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 8004044:	433a      	orrs	r2, r7
 8004046:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800404a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800404e:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004052:	019a      	lsls	r2, r3, #6
 8004054:	d50d      	bpl.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004056:	6923      	ldr	r3, [r4, #16]
 8004058:	6862      	ldr	r2, [r4, #4]
 800405a:	041b      	lsls	r3, r3, #16
 800405c:	68e0      	ldr	r0, [r4, #12]
 800405e:	68a1      	ldr	r1, [r4, #8]
 8004060:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004064:	4a0d      	ldr	r2, [pc, #52]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004066:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800406a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800406e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8004072:	4b0a      	ldr	r3, [pc, #40]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004074:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004076:	461e      	mov	r6, r3
    __HAL_RCC_PLLI2S_ENABLE();
 8004078:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800407c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800407e:	f7fd fdc1 	bl	8001c04 <HAL_GetTick>
 8004082:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004084:	6833      	ldr	r3, [r6, #0]
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	d493      	bmi.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800408a:	f7fd fdbb 	bl	8001c04 <HAL_GetTick>
 800408e:	1bc0      	subs	r0, r0, r7
 8004090:	2864      	cmp	r0, #100	; 0x64
 8004092:	d9f7      	bls.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
        return HAL_TIMEOUT;
 8004094:	2003      	movs	r0, #3
}
 8004096:	b003      	add	sp, #12
 8004098:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800409c:	40023800 	.word	0x40023800
    __HAL_RCC_PWR_CLK_ENABLE();
 80040a0:	4a8c      	ldr	r2, [pc, #560]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
    PWR->CR1 |= PWR_CR1_DBP;
 80040a2:	4b8d      	ldr	r3, [pc, #564]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80040a4:	6c11      	ldr	r1, [r2, #64]	; 0x40
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80040a6:	461f      	mov	r7, r3
    __HAL_RCC_PWR_CLK_ENABLE();
 80040a8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80040ac:	6411      	str	r1, [r2, #64]	; 0x40
 80040ae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80040b0:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80040b4:	9201      	str	r2, [sp, #4]
 80040b6:	9a01      	ldr	r2, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040be:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80040c0:	f7fd fda0 	bl	8001c04 <HAL_GetTick>
 80040c4:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80040c6:	e005      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040c8:	f7fd fd9c 	bl	8001c04 <HAL_GetTick>
 80040cc:	eba0 0008 	sub.w	r0, r0, r8
 80040d0:	2864      	cmp	r0, #100	; 0x64
 80040d2:	d8df      	bhi.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	05db      	lsls	r3, r3, #23
 80040d8:	d5f6      	bpl.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x320>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040da:	4a7e      	ldr	r2, [pc, #504]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040de:	6f11      	ldr	r1, [r2, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040e0:	f403 7040 	and.w	r0, r3, #768	; 0x300
 80040e4:	f411 7140 	ands.w	r1, r1, #768	; 0x300
 80040e8:	d011      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x366>
 80040ea:	4281      	cmp	r1, r0
 80040ec:	d00f      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x366>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040ee:	6f11      	ldr	r1, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80040f0:	6f17      	ldr	r7, [r2, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040f2:	f421 7140 	bic.w	r1, r1, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80040f6:	f447 3780 	orr.w	r7, r7, #65536	; 0x10000
 80040fa:	6717      	str	r7, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040fc:	6f17      	ldr	r7, [r2, #112]	; 0x70
 80040fe:	f427 3780 	bic.w	r7, r7, #65536	; 0x10000
 8004102:	6717      	str	r7, [r2, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8004104:	6711      	str	r1, [r2, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004106:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8004108:	07cf      	lsls	r7, r1, #31
 800410a:	f100 8096 	bmi.w	800423a <HAL_RCCEx_PeriphCLKConfig+0x492>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800410e:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 8004112:	f000 80c3 	beq.w	800429c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8004116:	496f      	ldr	r1, [pc, #444]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8004118:	688a      	ldr	r2, [r1, #8]
 800411a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800411e:	608a      	str	r2, [r1, #8]
 8004120:	4a6c      	ldr	r2, [pc, #432]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8004122:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004126:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8004128:	430b      	orrs	r3, r1
 800412a:	6713      	str	r3, [r2, #112]	; 0x70
 800412c:	6823      	ldr	r3, [r4, #0]
 800412e:	e67d      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x84>
      plli2sused = 1;
 8004130:	2601      	movs	r6, #1
 8004132:	e674      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x76>
  uint32_t pllsaiused = 0;
 8004134:	2500      	movs	r5, #0
      plli2sused = 1;
 8004136:	2601      	movs	r6, #1
 8004138:	e65e      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x50>
    __HAL_RCC_PLLSAI_DISABLE();
 800413a:	4b66      	ldr	r3, [pc, #408]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800413c:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800413e:	461d      	mov	r5, r3
    __HAL_RCC_PLLSAI_DISABLE();
 8004140:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004144:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8004146:	f7fd fd5d 	bl	8001c04 <HAL_GetTick>
 800414a:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800414c:	e004      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800414e:	f7fd fd59 	bl	8001c04 <HAL_GetTick>
 8004152:	1b80      	subs	r0, r0, r6
 8004154:	2864      	cmp	r0, #100	; 0x64
 8004156:	d89d      	bhi.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004158:	682b      	ldr	r3, [r5, #0]
 800415a:	009f      	lsls	r7, r3, #2
 800415c:	d4f7      	bmi.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800415e:	6823      	ldr	r3, [r4, #0]
 8004160:	031d      	lsls	r5, r3, #12
 8004162:	d466      	bmi.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8004164:	02d8      	lsls	r0, r3, #11
 8004166:	d51d      	bpl.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004168:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800416a:	b9da      	cbnz	r2, 80041a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800416c:	4959      	ldr	r1, [pc, #356]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800416e:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004170:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004174:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004178:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800417c:	69a0      	ldr	r0, [r4, #24]
 800417e:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 8004182:	4332      	orrs	r2, r6
 8004184:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 8004188:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800418c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004190:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8004194:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004196:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800419a:	3801      	subs	r0, #1
 800419c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80041a0:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80041a4:	0299      	lsls	r1, r3, #10
 80041a6:	d503      	bpl.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80041a8:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80041aa:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 80041ae:	d07e      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x506>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80041b0:	071a      	lsls	r2, r3, #28
 80041b2:	d519      	bpl.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x440>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80041b4:	4a47      	ldr	r2, [pc, #284]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80041b6:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80041b8:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041bc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80041c0:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80041c4:	69e0      	ldr	r0, [r4, #28]
 80041c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041ca:	430b      	orrs	r3, r1
 80041cc:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 80041d0:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 80041d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80041d8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80041dc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80041de:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80041e2:	430b      	orrs	r3, r1
 80041e4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 80041e8:	4b3a      	ldr	r3, [pc, #232]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 80041ea:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041ec:	461c      	mov	r4, r3
    __HAL_RCC_PLLSAI_ENABLE();
 80041ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80041f2:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80041f4:	f7fd fd06 	bl	8001c04 <HAL_GetTick>
 80041f8:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041fa:	6823      	ldr	r3, [r4, #0]
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	f53f aedb 	bmi.w	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x210>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004202:	f7fd fcff 	bl	8001c04 <HAL_GetTick>
 8004206:	1b40      	subs	r0, r0, r5
 8004208:	2864      	cmp	r0, #100	; 0x64
 800420a:	d9f6      	bls.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x452>
 800420c:	e742      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800420e:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004212:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004216:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800421a:	6860      	ldr	r0, [r4, #4]
 800421c:	f007 6770 	and.w	r7, r7, #251658240	; 0xf000000
 8004220:	68a1      	ldr	r1, [r4, #8]
 8004222:	433a      	orrs	r2, r7
 8004224:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8004228:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800422c:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
 8004230:	e6ed      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x266>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004232:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004234:	2a00      	cmp	r2, #0
 8004236:	d099      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8004238:	e794      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800423a:	4617      	mov	r7, r2
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800423c:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004240:	f7fd fce0 	bl	8001c04 <HAL_GetTick>
 8004244:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004246:	e006      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004248:	f7fd fcdc 	bl	8001c04 <HAL_GetTick>
 800424c:	eba0 0009 	sub.w	r0, r0, r9
 8004250:	4540      	cmp	r0, r8
 8004252:	f63f af1f 	bhi.w	8004094 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004256:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004258:	0798      	lsls	r0, r3, #30
 800425a:	d5f5      	bpl.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800425c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800425e:	f403 7040 	and.w	r0, r3, #768	; 0x300
 8004262:	e754      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x366>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004264:	4e1b      	ldr	r6, [pc, #108]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004266:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004268:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800426c:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004270:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8004274:	68e1      	ldr	r1, [r4, #12]
 8004276:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 800427a:	433a      	orrs	r2, r7
 800427c:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8004280:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004284:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004288:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 800428c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800428e:	f021 011f 	bic.w	r1, r1, #31
 8004292:	3a01      	subs	r2, #1
 8004294:	430a      	orrs	r2, r1
 8004296:	f8c6 208c 	str.w	r2, [r6, #140]	; 0x8c
 800429a:	e6c6      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x282>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800429c:	480d      	ldr	r0, [pc, #52]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800429e:	490f      	ldr	r1, [pc, #60]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x534>)
 80042a0:	6882      	ldr	r2, [r0, #8]
 80042a2:	4019      	ands	r1, r3
 80042a4:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80042a8:	430a      	orrs	r2, r1
 80042aa:	6082      	str	r2, [r0, #8]
 80042ac:	e738      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x378>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80042ae:	4909      	ldr	r1, [pc, #36]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80042b0:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80042b2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80042b6:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80042ba:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80042be:	6a20      	ldr	r0, [r4, #32]
 80042c0:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 80042c4:	4332      	orrs	r2, r6
 80042c6:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 80042ca:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80042ce:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
 80042d2:	e76d      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80042d4:	40023800 	.word	0x40023800
 80042d8:	40007000 	.word	0x40007000
 80042dc:	0ffffcff 	.word	0x0ffffcff

080042e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80042e0:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 80042e4:	d010      	beq.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
        break;
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80042e6:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 80042ea:	d10b      	bne.n	8004304 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
  {
    saiclocksource = RCC->DCKCFGR1;
 80042ec:	4a2e      	ldr	r2, [pc, #184]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 80042ee:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80042f2:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
    switch (saiclocksource)
 80042f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042fa:	d033      	beq.n	8004364 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
 80042fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004300:	d00d      	beq.n	800431e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8004302:	b173      	cbz	r3, 8004322 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
  uint32_t frequency = 0;
 8004304:	2000      	movs	r0, #0
      }
    }
  }

  return frequency;
}
 8004306:	4770      	bx	lr
    saiclocksource = RCC->DCKCFGR1;
 8004308:	4a27      	ldr	r2, [pc, #156]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 800430a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800430e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    switch (saiclocksource)
 8004312:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004316:	d025      	beq.n	8004364 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
 8004318:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800431c:	d1f1      	bne.n	8004302 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
        frequency = EXTERNAL_CLOCK_VALUE;
 800431e:	4823      	ldr	r0, [pc, #140]	; (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)
 8004320:	4770      	bx	lr
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004322:	6853      	ldr	r3, [r2, #4]
 8004324:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004328:	6853      	ldr	r3, [r2, #4]
 800432a:	bf08      	it	eq
 800432c:	4820      	ldreq	r0, [pc, #128]	; (80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800432e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004332:	bf18      	it	ne
 8004334:	481f      	ldrne	r0, [pc, #124]	; (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>)
 8004336:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800433a:	4b1b      	ldr	r3, [pc, #108]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 800433c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004340:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004344:	f3c2 6203 	ubfx	r2, r2, #24, #4
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800434c:	f3c1 1188 	ubfx	r1, r1, #6, #9
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004350:	f3c3 2304 	ubfx	r3, r3, #8, #5
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004354:	fb00 f001 	mul.w	r0, r0, r1
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004358:	3301      	adds	r3, #1
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800435a:	fbb0 f0f2 	udiv	r0, r0, r2
        frequency = frequency/(tmpreg);
 800435e:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8004362:	4770      	bx	lr
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004364:	6853      	ldr	r3, [r2, #4]
 8004366:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800436a:	6853      	ldr	r3, [r2, #4]
 800436c:	bf08      	it	eq
 800436e:	4810      	ldreq	r0, [pc, #64]	; (80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004370:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004374:	bf18      	it	ne
 8004376:	480f      	ldrne	r0, [pc, #60]	; (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>)
 8004378:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800437c:	4b0a      	ldr	r3, [pc, #40]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 800437e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004382:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004386:	f3c2 6203 	ubfx	r2, r2, #24, #4
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800438a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800438e:	f3c1 1188 	ubfx	r1, r1, #6, #9
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004392:	f003 031f 	and.w	r3, r3, #31
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004396:	fb00 f001 	mul.w	r0, r0, r1
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800439a:	3301      	adds	r3, #1
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800439c:	fbb0 f0f2 	udiv	r0, r0, r2
        frequency = frequency/(tmpreg);
 80043a0:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	40023800 	.word	0x40023800
 80043ac:	00bb8000 	.word	0x00bb8000
 80043b0:	00f42400 	.word	0x00f42400
 80043b4:	017d7840 	.word	0x017d7840

080043b8 <HAL_RTC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80043b8:	2800      	cmp	r0, #0
 80043ba:	d051      	beq.n	8004460 <HAL_RTC_Init+0xa8>
{
 80043bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80043be:	7f43      	ldrb	r3, [r0, #29]
 80043c0:	4604      	mov	r4, r0
 80043c2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d046      	beq.n	8004458 <HAL_RTC_Init+0xa0>
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
       
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043ca:	6823      	ldr	r3, [r4, #0]
 80043cc:	21ca      	movs	r1, #202	; 0xca
 80043ce:	2253      	movs	r2, #83	; 0x53
  hrtc->State = HAL_RTC_STATE_BUSY;  
 80043d0:	2002      	movs	r0, #2
 80043d2:	7760      	strb	r0, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043d4:	6259      	str	r1, [r3, #36]	; 0x24
 80043d6:	625a      	str	r2, [r3, #36]	; 0x24
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0; 
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	0651      	lsls	r1, r2, #25
 80043dc:	d525      	bpl.n	800442a <HAL_RTC_Init+0x72>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80043de:	689f      	ldr	r7, [r3, #8]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80043e0:	26ff      	movs	r6, #255	; 0xff
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80043e2:	4920      	ldr	r1, [pc, #128]	; (8004464 <HAL_RTC_Init+0xac>)
    hrtc->State = HAL_RTC_STATE_READY;
 80043e4:	2501      	movs	r5, #1
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80043e6:	6862      	ldr	r2, [r4, #4]
    return HAL_OK;
 80043e8:	2000      	movs	r0, #0
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80043ea:	4039      	ands	r1, r7
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80043ec:	6927      	ldr	r7, [r4, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80043ee:	f8d4 e008 	ldr.w	lr, [r4, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80043f2:	433a      	orrs	r2, r7
 80043f4:	6967      	ldr	r7, [r4, #20]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80043f6:	6099      	str	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80043f8:	433a      	orrs	r2, r7
 80043fa:	689f      	ldr	r7, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80043fc:	68e1      	ldr	r1, [r4, #12]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80043fe:	433a      	orrs	r2, r7
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType); 
 8004400:	69a7      	ldr	r7, [r4, #24]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004402:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004404:	6119      	str	r1, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8004406:	6919      	ldr	r1, [r3, #16]
 8004408:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800440c:	6119      	str	r1, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 800440e:	68d9      	ldr	r1, [r3, #12]
 8004410:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004414:	60d9      	str	r1, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8004416:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004418:	f021 0108 	bic.w	r1, r1, #8
 800441c:	64d9      	str	r1, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType); 
 800441e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004420:	433a      	orrs	r2, r7
 8004422:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8004424:	625e      	str	r6, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8004426:	7765      	strb	r5, [r4, #29]
}
 8004428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800442a:	f04f 32ff 	mov.w	r2, #4294967295
 800442e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004430:	f7fd fbe8 	bl	8001c04 <HAL_GetTick>
 8004434:	4605      	mov	r5, r0

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004436:	6823      	ldr	r3, [r4, #0]
 8004438:	68da      	ldr	r2, [r3, #12]
 800443a:	0652      	lsls	r2, r2, #25
 800443c:	d4cf      	bmi.n	80043de <HAL_RTC_Init+0x26>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800443e:	f7fd fbe1 	bl	8001c04 <HAL_GetTick>
 8004442:	1b40      	subs	r0, r0, r5
 8004444:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004448:	d9f5      	bls.n	8004436 <HAL_RTC_Init+0x7e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 800444a:	6822      	ldr	r2, [r4, #0]
 800444c:	21ff      	movs	r1, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 800444e:	2304      	movs	r3, #4
    return HAL_ERROR;
 8004450:	2001      	movs	r0, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8004452:	6251      	str	r1, [r2, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004454:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8004456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8004458:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 800445a:	f7fd f8a9 	bl	80015b0 <HAL_RTC_MspInit>
 800445e:	e7b4      	b.n	80043ca <HAL_RTC_Init+0x12>
     return HAL_ERROR;
 8004460:	2001      	movs	r0, #1
 8004462:	4770      	bx	lr
 8004464:	ff8fffbf 	.word	0xff8fffbf

08004468 <HAL_RTC_SetTime>:
{
 8004468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(hrtc);
 800446c:	7f03      	ldrb	r3, [r0, #28]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d069      	beq.n	8004546 <HAL_RTC_SetTime+0xde>
 8004472:	460c      	mov	r4, r1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004474:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 8004476:	2101      	movs	r1, #1
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004478:	6806      	ldr	r6, [r0, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800447a:	7743      	strb	r3, [r0, #29]
 800447c:	4605      	mov	r5, r0
  __HAL_LOCK(hrtc);
 800447e:	7701      	strb	r1, [r0, #28]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004480:	68b7      	ldr	r7, [r6, #8]
  if(Format == RTC_FORMAT_BIN)
 8004482:	2a00      	cmp	r2, #0
 8004484:	d152      	bne.n	800452c <HAL_RTC_SetTime+0xc4>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004486:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 800448a:	d15f      	bne.n	800454c <HAL_RTC_SetTime+0xe4>
      sTime->TimeFormat = 0x00;
 800448c:	7327      	strb	r7, [r4, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800448e:	7823      	ldrb	r3, [r4, #0]
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
  
  while(Value >= 10)
 8004490:	2000      	movs	r0, #0
 8004492:	2b09      	cmp	r3, #9
 8004494:	d906      	bls.n	80044a4 <HAL_RTC_SetTime+0x3c>
  {
    bcdhigh++;
    Value -= 10;
 8004496:	3b0a      	subs	r3, #10
    bcdhigh++;
 8004498:	3001      	adds	r0, #1
    Value -= 10;
 800449a:	b2db      	uxtb	r3, r3
  while(Value >= 10)
 800449c:	2b09      	cmp	r3, #9
 800449e:	d8fa      	bhi.n	8004496 <HAL_RTC_SetTime+0x2e>
 80044a0:	0100      	lsls	r0, r0, #4
 80044a2:	b2c0      	uxtb	r0, r0
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80044a4:	4318      	orrs	r0, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80044a6:	7863      	ldrb	r3, [r4, #1]
  while(Value >= 10)
 80044a8:	2100      	movs	r1, #0
 80044aa:	2b09      	cmp	r3, #9
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80044ac:	ea4f 4000 	mov.w	r0, r0, lsl #16
  while(Value >= 10)
 80044b0:	d906      	bls.n	80044c0 <HAL_RTC_SetTime+0x58>
    Value -= 10;
 80044b2:	3b0a      	subs	r3, #10
    bcdhigh++;
 80044b4:	3101      	adds	r1, #1
    Value -= 10;
 80044b6:	b2db      	uxtb	r3, r3
  while(Value >= 10)
 80044b8:	2b09      	cmp	r3, #9
 80044ba:	d8fa      	bhi.n	80044b2 <HAL_RTC_SetTime+0x4a>
 80044bc:	0109      	lsls	r1, r1, #4
 80044be:	b2c9      	uxtb	r1, r1
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80044c0:	430b      	orrs	r3, r1
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80044c2:	78a1      	ldrb	r1, [r4, #2]
  while(Value >= 10)
 80044c4:	2909      	cmp	r1, #9
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80044c6:	ea4f 2303 	mov.w	r3, r3, lsl #8
  while(Value >= 10)
 80044ca:	d97c      	bls.n	80045c6 <HAL_RTC_SetTime+0x15e>
    Value -= 10;
 80044cc:	390a      	subs	r1, #10
    bcdhigh++;
 80044ce:	3201      	adds	r2, #1
    Value -= 10;
 80044d0:	b2c9      	uxtb	r1, r1
  while(Value >= 10)
 80044d2:	2909      	cmp	r1, #9
 80044d4:	d8fa      	bhi.n	80044cc <HAL_RTC_SetTime+0x64>
 80044d6:	0112      	lsls	r2, r2, #4
 80044d8:	b2d2      	uxtb	r2, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80044da:	4307      	orrs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80044dc:	4311      	orrs	r1, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80044de:	433b      	orrs	r3, r7
 80044e0:	ea43 0701 	orr.w	r7, r3, r1
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044e4:	22ca      	movs	r2, #202	; 0xca
 80044e6:	2353      	movs	r3, #83	; 0x53
 80044e8:	6272      	str	r2, [r6, #36]	; 0x24
 80044ea:	6273      	str	r3, [r6, #36]	; 0x24
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80044ec:	68f3      	ldr	r3, [r6, #12]
 80044ee:	065a      	lsls	r2, r3, #25
 80044f0:	d532      	bpl.n	8004558 <HAL_RTC_SetTime+0xf0>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80044f2:	4a36      	ldr	r2, [pc, #216]	; (80045cc <HAL_RTC_SetTime+0x164>)
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80044f4:	6923      	ldr	r3, [r4, #16]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80044f6:	403a      	ands	r2, r7
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80044f8:	6961      	ldr	r1, [r4, #20]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80044fa:	6032      	str	r2, [r6, #0]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80044fc:	430b      	orrs	r3, r1
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80044fe:	68b2      	ldr	r2, [r6, #8]
 8004500:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004504:	60b2      	str	r2, [r6, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004506:	68b2      	ldr	r2, [r6, #8]
 8004508:	4313      	orrs	r3, r2
 800450a:	60b3      	str	r3, [r6, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 800450c:	68f3      	ldr	r3, [r6, #12]
 800450e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004512:	60f3      	str	r3, [r6, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004514:	68b3      	ldr	r3, [r6, #8]
 8004516:	069b      	lsls	r3, r3, #26
 8004518:	d53a      	bpl.n	8004590 <HAL_RTC_SetTime+0x128>
   __HAL_UNLOCK(hrtc); 
 800451a:	2300      	movs	r3, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800451c:	21ff      	movs	r1, #255	; 0xff
   hrtc->State = HAL_RTC_STATE_READY;
 800451e:	2201      	movs	r2, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004520:	6271      	str	r1, [r6, #36]	; 0x24
   return HAL_OK;
 8004522:	4618      	mov	r0, r3
   hrtc->State = HAL_RTC_STATE_READY;
 8004524:	776a      	strb	r2, [r5, #29]
   __HAL_UNLOCK(hrtc); 
 8004526:	772b      	strb	r3, [r5, #28]
   return HAL_OK;
 8004528:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800452c:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 8004530:	d10f      	bne.n	8004552 <HAL_RTC_SetTime+0xea>
      sTime->TimeFormat = 0x00;
 8004532:	7327      	strb	r7, [r4, #12]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8004534:	7861      	ldrb	r1, [r4, #1]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8004536:	7822      	ldrb	r2, [r4, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8004538:	0209      	lsls	r1, r1, #8
              ((uint32_t)sTime->Seconds) | \
 800453a:	78a3      	ldrb	r3, [r4, #2]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800453c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8004540:	4319      	orrs	r1, r3
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8004542:	430f      	orrs	r7, r1
 8004544:	e7ce      	b.n	80044e4 <HAL_RTC_SetTime+0x7c>
  __HAL_LOCK(hrtc);
 8004546:	2002      	movs	r0, #2
 8004548:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800454c:	7b27      	ldrb	r7, [r4, #12]
 800454e:	043f      	lsls	r7, r7, #16
 8004550:	e79d      	b.n	800448e <HAL_RTC_SetTime+0x26>
 8004552:	7b27      	ldrb	r7, [r4, #12]
 8004554:	043f      	lsls	r7, r7, #16
 8004556:	e7ed      	b.n	8004534 <HAL_RTC_SetTime+0xcc>
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004558:	f04f 33ff 	mov.w	r3, #4294967295
 800455c:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 800455e:	f7fd fb51 	bl	8001c04 <HAL_GetTick>
 8004562:	4681      	mov	r9, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004564:	682e      	ldr	r6, [r5, #0]
 8004566:	68f3      	ldr	r3, [r6, #12]
 8004568:	f013 0840 	ands.w	r8, r3, #64	; 0x40
 800456c:	d1c1      	bne.n	80044f2 <HAL_RTC_SetTime+0x8a>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800456e:	f7fd fb49 	bl	8001c04 <HAL_GetTick>
 8004572:	eba0 0009 	sub.w	r0, r0, r9
 8004576:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800457a:	d9f3      	bls.n	8004564 <HAL_RTC_SetTime+0xfc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 800457c:	682a      	ldr	r2, [r5, #0]
 800457e:	21ff      	movs	r1, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004580:	2304      	movs	r3, #4
    return HAL_ERROR;
 8004582:	2001      	movs	r0, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8004584:	6251      	str	r1, [r2, #36]	; 0x24
    __HAL_UNLOCK(hrtc);
 8004586:	f885 801c 	strb.w	r8, [r5, #28]
    hrtc->State = HAL_RTC_STATE_ERROR;
 800458a:	776b      	strb	r3, [r5, #29]
    return HAL_ERROR;
 800458c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004590:	68f3      	ldr	r3, [r6, #12]
 8004592:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004596:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8004598:	f7fd fb34 	bl	8001c04 <HAL_GetTick>
 800459c:	4607      	mov	r7, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800459e:	682e      	ldr	r6, [r5, #0]
 80045a0:	68f4      	ldr	r4, [r6, #12]
 80045a2:	f014 0420 	ands.w	r4, r4, #32
 80045a6:	d1b8      	bne.n	800451a <HAL_RTC_SetTime+0xb2>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80045a8:	f7fd fb2c 	bl	8001c04 <HAL_GetTick>
 80045ac:	1bc0      	subs	r0, r0, r7
 80045ae:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80045b2:	d9f4      	bls.n	800459e <HAL_RTC_SetTime+0x136>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80045b4:	682a      	ldr	r2, [r5, #0]
 80045b6:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 80045b8:	2304      	movs	r3, #4
        return HAL_ERROR;
 80045ba:	2001      	movs	r0, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80045bc:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 80045be:	772c      	strb	r4, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 80045c0:	776b      	strb	r3, [r5, #29]
}
 80045c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while(Value >= 10)
 80045c6:	2200      	movs	r2, #0
 80045c8:	e787      	b.n	80044da <HAL_RTC_SetTime+0x72>
 80045ca:	bf00      	nop
 80045cc:	007f7f7f 	.word	0x007f7f7f

080045d0 <HAL_RTC_SetDate>:
{
 80045d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 80045d2:	7f03      	ldrb	r3, [r0, #28]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d059      	beq.n	800468c <HAL_RTC_SetDate+0xbc>
 80045d8:	4604      	mov	r4, r0
  hrtc->State = HAL_RTC_STATE_BUSY; 
 80045da:	2302      	movs	r3, #2
 __HAL_LOCK(hrtc);
 80045dc:	2001      	movs	r0, #1
  hrtc->State = HAL_RTC_STATE_BUSY; 
 80045de:	7763      	strb	r3, [r4, #29]
 __HAL_LOCK(hrtc);
 80045e0:	7720      	strb	r0, [r4, #28]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80045e2:	b31a      	cbz	r2, 800462c <HAL_RTC_SetDate+0x5c>
                  (((uint32_t)sDate->Month) << 8) | \
 80045e4:	784d      	ldrb	r5, [r1, #1]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80045e6:	78c8      	ldrb	r0, [r1, #3]
                  (((uint32_t)sDate->Month) << 8) | \
 80045e8:	022d      	lsls	r5, r5, #8
                  ((uint32_t)sDate->Date) | \
 80045ea:	788a      	ldrb	r2, [r1, #2]
                  (((uint32_t)sDate->WeekDay) << 13));  
 80045ec:	780b      	ldrb	r3, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80045ee:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
                  (((uint32_t)sDate->Month) << 8) | \
 80045f2:	4315      	orrs	r5, r2
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80045f4:	ea45 3543 	orr.w	r5, r5, r3, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80045f8:	6822      	ldr	r2, [r4, #0]
 80045fa:	21ca      	movs	r1, #202	; 0xca
 80045fc:	2353      	movs	r3, #83	; 0x53
 80045fe:	6251      	str	r1, [r2, #36]	; 0x24
 8004600:	6253      	str	r3, [r2, #36]	; 0x24
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004602:	68d3      	ldr	r3, [r2, #12]
 8004604:	0659      	lsls	r1, r3, #25
 8004606:	d543      	bpl.n	8004690 <HAL_RTC_SetDate+0xc0>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004608:	4b3f      	ldr	r3, [pc, #252]	; (8004708 <HAL_RTC_SetDate+0x138>)
 800460a:	402b      	ands	r3, r5
 800460c:	6053      	str	r3, [r2, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 800460e:	68d3      	ldr	r3, [r2, #12]
 8004610:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004614:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004616:	6893      	ldr	r3, [r2, #8]
 8004618:	069b      	lsls	r3, r3, #26
 800461a:	d558      	bpl.n	80046ce <HAL_RTC_SetDate+0xfe>
    __HAL_UNLOCK(hrtc);
 800461c:	2300      	movs	r3, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800461e:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_READY ;
 8004620:	2101      	movs	r1, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8004622:	6250      	str	r0, [r2, #36]	; 0x24
    return HAL_OK;    
 8004624:	4618      	mov	r0, r3
    hrtc->State = HAL_RTC_STATE_READY ;
 8004626:	7761      	strb	r1, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8004628:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 800462a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800462c:	784b      	ldrb	r3, [r1, #1]
 800462e:	06d8      	lsls	r0, r3, #27
 8004630:	d447      	bmi.n	80046c2 <HAL_RTC_SetDate+0xf2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8004632:	78c8      	ldrb	r0, [r1, #3]
  while(Value >= 10)
 8004634:	2500      	movs	r5, #0
 8004636:	2809      	cmp	r0, #9
 8004638:	d906      	bls.n	8004648 <HAL_RTC_SetDate+0x78>
    Value -= 10;
 800463a:	380a      	subs	r0, #10
    bcdhigh++;
 800463c:	3501      	adds	r5, #1
    Value -= 10;
 800463e:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8004640:	2809      	cmp	r0, #9
 8004642:	d8fa      	bhi.n	800463a <HAL_RTC_SetDate+0x6a>
 8004644:	012d      	lsls	r5, r5, #4
 8004646:	b2ed      	uxtb	r5, r5
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8004648:	4328      	orrs	r0, r5
  while(Value >= 10)
 800464a:	2b09      	cmp	r3, #9
 800464c:	f04f 0600 	mov.w	r6, #0
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8004650:	ea4f 4000 	mov.w	r0, r0, lsl #16
  while(Value >= 10)
 8004654:	d906      	bls.n	8004664 <HAL_RTC_SetDate+0x94>
    Value -= 10;
 8004656:	3b0a      	subs	r3, #10
    bcdhigh++;
 8004658:	3601      	adds	r6, #1
    Value -= 10;
 800465a:	b2db      	uxtb	r3, r3
  while(Value >= 10)
 800465c:	2b09      	cmp	r3, #9
 800465e:	d8fa      	bhi.n	8004656 <HAL_RTC_SetDate+0x86>
 8004660:	0136      	lsls	r6, r6, #4
 8004662:	b2f6      	uxtb	r6, r6
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004664:	788d      	ldrb	r5, [r1, #2]
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8004666:	4333      	orrs	r3, r6
  while(Value >= 10)
 8004668:	2d09      	cmp	r5, #9
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800466a:	ea4f 2303 	mov.w	r3, r3, lsl #8
  while(Value >= 10)
 800466e:	d948      	bls.n	8004702 <HAL_RTC_SetDate+0x132>
    Value -= 10;
 8004670:	3d0a      	subs	r5, #10
    bcdhigh++;
 8004672:	3201      	adds	r2, #1
    Value -= 10;
 8004674:	b2ed      	uxtb	r5, r5
  while(Value >= 10)
 8004676:	2d09      	cmp	r5, #9
 8004678:	d8fa      	bhi.n	8004670 <HAL_RTC_SetDate+0xa0>
 800467a:	0112      	lsls	r2, r2, #4
 800467c:	b2d2      	uxtb	r2, r2
                 ((uint32_t)sDate->WeekDay << 13));   
 800467e:	7809      	ldrb	r1, [r1, #0]
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004680:	4315      	orrs	r5, r2
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8004682:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
 8004686:	4303      	orrs	r3, r0
 8004688:	431d      	orrs	r5, r3
 800468a:	e7b5      	b.n	80045f8 <HAL_RTC_SetDate+0x28>
 __HAL_LOCK(hrtc);
 800468c:	2002      	movs	r0, #2
 800468e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004690:	f04f 33ff 	mov.w	r3, #4294967295
 8004694:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8004696:	f7fd fab5 	bl	8001c04 <HAL_GetTick>
 800469a:	4607      	mov	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800469c:	6822      	ldr	r2, [r4, #0]
 800469e:	68d6      	ldr	r6, [r2, #12]
 80046a0:	f016 0640 	ands.w	r6, r6, #64	; 0x40
 80046a4:	d1b0      	bne.n	8004608 <HAL_RTC_SetDate+0x38>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80046a6:	f7fd faad 	bl	8001c04 <HAL_GetTick>
 80046aa:	1bc0      	subs	r0, r0, r7
 80046ac:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80046b0:	d9f4      	bls.n	800469c <HAL_RTC_SetDate+0xcc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80046b2:	6822      	ldr	r2, [r4, #0]
 80046b4:	21ff      	movs	r1, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 80046b6:	2304      	movs	r3, #4
    return HAL_ERROR;
 80046b8:	2001      	movs	r0, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80046ba:	6251      	str	r1, [r2, #36]	; 0x24
    __HAL_UNLOCK(hrtc);
 80046bc:	7726      	strb	r6, [r4, #28]
    hrtc->State = HAL_RTC_STATE_ERROR;
 80046be:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 80046c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80046c2:	f023 0310 	bic.w	r3, r3, #16
 80046c6:	330a      	adds	r3, #10
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	704b      	strb	r3, [r1, #1]
 80046cc:	e7b1      	b.n	8004632 <HAL_RTC_SetDate+0x62>
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80046ce:	68d3      	ldr	r3, [r2, #12]
 80046d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046d4:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 80046d6:	f7fd fa95 	bl	8001c04 <HAL_GetTick>
 80046da:	4606      	mov	r6, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80046dc:	6822      	ldr	r2, [r4, #0]
 80046de:	68d5      	ldr	r5, [r2, #12]
 80046e0:	f015 0520 	ands.w	r5, r5, #32
 80046e4:	d19a      	bne.n	800461c <HAL_RTC_SetDate+0x4c>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80046e6:	f7fd fa8d 	bl	8001c04 <HAL_GetTick>
 80046ea:	1b80      	subs	r0, r0, r6
 80046ec:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80046f0:	d9f4      	bls.n	80046dc <HAL_RTC_SetDate+0x10c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80046f2:	6822      	ldr	r2, [r4, #0]
 80046f4:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 80046f6:	2304      	movs	r3, #4
        return HAL_ERROR;
 80046f8:	2001      	movs	r0, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80046fa:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 80046fc:	7725      	strb	r5, [r4, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 80046fe:	7763      	strb	r3, [r4, #29]
}
 8004700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while(Value >= 10)
 8004702:	2200      	movs	r2, #0
 8004704:	e7bb      	b.n	800467e <HAL_RTC_SetDate+0xae>
 8004706:	bf00      	nop
 8004708:	00ffff3f 	.word	0x00ffff3f

0800470c <HAL_RTC_SetAlarm>:
  __HAL_LOCK(hrtc);
 800470c:	7f03      	ldrb	r3, [r0, #28]
 800470e:	2b01      	cmp	r3, #1
 8004710:	f000 80ad 	beq.w	800486e <HAL_RTC_SetAlarm+0x162>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004714:	2302      	movs	r3, #2
{
 8004716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800471a:	4605      	mov	r5, r0
  __HAL_LOCK(hrtc);
 800471c:	2001      	movs	r0, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 800471e:	776b      	strb	r3, [r5, #29]
  __HAL_LOCK(hrtc);
 8004720:	7728      	strb	r0, [r5, #28]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004722:	682f      	ldr	r7, [r5, #0]
  if(Format == RTC_FORMAT_BIN)
 8004724:	2a00      	cmp	r2, #0
 8004726:	f040 8088 	bne.w	800483a <HAL_RTC_SetAlarm+0x12e>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	f013 0e40 	ands.w	lr, r3, #64	; 0x40
 8004730:	f000 80a1 	beq.w	8004876 <HAL_RTC_SetAlarm+0x16a>
 8004734:	f891 e00c 	ldrb.w	lr, [r1, #12]
 8004738:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800473c:	780b      	ldrb	r3, [r1, #0]
  while(Value >= 10)
 800473e:	2000      	movs	r0, #0
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8004740:	6a0e      	ldr	r6, [r1, #32]
  while(Value >= 10)
 8004742:	2b09      	cmp	r3, #9
 8004744:	d906      	bls.n	8004754 <HAL_RTC_SetAlarm+0x48>
    Value -= 10;
 8004746:	3b0a      	subs	r3, #10
    bcdhigh++;
 8004748:	3001      	adds	r0, #1
    Value -= 10;
 800474a:	b2db      	uxtb	r3, r3
  while(Value >= 10)
 800474c:	2b09      	cmp	r3, #9
 800474e:	d8fa      	bhi.n	8004746 <HAL_RTC_SetAlarm+0x3a>
 8004750:	0100      	lsls	r0, r0, #4
 8004752:	b2c0      	uxtb	r0, r0
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8004754:	4318      	orrs	r0, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8004756:	784b      	ldrb	r3, [r1, #1]
  while(Value >= 10)
 8004758:	2400      	movs	r4, #0
 800475a:	2b09      	cmp	r3, #9
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800475c:	ea4f 4000 	mov.w	r0, r0, lsl #16
  while(Value >= 10)
 8004760:	d906      	bls.n	8004770 <HAL_RTC_SetAlarm+0x64>
    Value -= 10;
 8004762:	3b0a      	subs	r3, #10
    bcdhigh++;
 8004764:	3401      	adds	r4, #1
    Value -= 10;
 8004766:	b2db      	uxtb	r3, r3
  while(Value >= 10)
 8004768:	2b09      	cmp	r3, #9
 800476a:	d8fa      	bhi.n	8004762 <HAL_RTC_SetAlarm+0x56>
 800476c:	0124      	lsls	r4, r4, #4
 800476e:	b2e4      	uxtb	r4, r4
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8004770:	4323      	orrs	r3, r4
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004772:	788c      	ldrb	r4, [r1, #2]
  while(Value >= 10)
 8004774:	2c09      	cmp	r4, #9
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8004776:	ea4f 2303 	mov.w	r3, r3, lsl #8
  while(Value >= 10)
 800477a:	f240 80a6 	bls.w	80048ca <HAL_RTC_SetAlarm+0x1be>
 800477e:	f04f 0c00 	mov.w	ip, #0
    Value -= 10;
 8004782:	3c0a      	subs	r4, #10
    bcdhigh++;
 8004784:	f10c 0c01 	add.w	ip, ip, #1
    Value -= 10;
 8004788:	b2e4      	uxtb	r4, r4
  while(Value >= 10)
 800478a:	2c09      	cmp	r4, #9
 800478c:	d8f9      	bhi.n	8004782 <HAL_RTC_SetAlarm+0x76>
 800478e:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8004792:	fa5f f88c 	uxtb.w	r8, ip
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8004796:	f891 c024 	ldrb.w	ip, [r1, #36]	; 0x24
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800479a:	ea44 0408 	orr.w	r4, r4, r8
  while(Value >= 10)
 800479e:	f1bc 0f09 	cmp.w	ip, #9
 80047a2:	f240 8095 	bls.w	80048d0 <HAL_RTC_SetAlarm+0x1c4>
    Value -= 10;
 80047a6:	f1ac 0c0a 	sub.w	ip, ip, #10
    bcdhigh++;
 80047aa:	3201      	adds	r2, #1
    Value -= 10;
 80047ac:	fa5f fc8c 	uxtb.w	ip, ip
  while(Value >= 10)
 80047b0:	f1bc 0f09 	cmp.w	ip, #9
 80047b4:	d8f7      	bhi.n	80047a6 <HAL_RTC_SetAlarm+0x9a>
 80047b6:	0112      	lsls	r2, r2, #4
 80047b8:	b2d2      	uxtb	r2, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80047ba:	ea4c 0c02 	orr.w	ip, ip, r2
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80047be:	698a      	ldr	r2, [r1, #24]
 80047c0:	4316      	orrs	r6, r2
 80047c2:	ea46 0e0e 	orr.w	lr, r6, lr
 80047c6:	ea4e 0000 	orr.w	r0, lr, r0
 80047ca:	4303      	orrs	r3, r0
 80047cc:	431c      	orrs	r4, r3
 80047ce:	ea44 660c 	orr.w	r6, r4, ip, lsl #24
  if(sAlarm->Alarm == RTC_ALARM_A)
 80047d2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047d4:	20ca      	movs	r0, #202	; 0xca
 80047d6:	2253      	movs	r2, #83	; 0x53
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80047d8:	f8d1 8004 	ldr.w	r8, [r1, #4]
 80047dc:	69cc      	ldr	r4, [r1, #28]
  if(sAlarm->Alarm == RTC_ALARM_A)
 80047de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047e2:	6278      	str	r0, [r7, #36]	; 0x24
 80047e4:	627a      	str	r2, [r7, #36]	; 0x24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80047e6:	ea48 0804 	orr.w	r8, r8, r4
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80047ea:	68bb      	ldr	r3, [r7, #8]
  if(sAlarm->Alarm == RTC_ALARM_A)
 80047ec:	d04f      	beq.n	800488e <HAL_RTC_SetAlarm+0x182>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80047ee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047f2:	60bb      	str	r3, [r7, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047fa:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 80047fc:	f7fd fa02 	bl	8001c04 <HAL_GetTick>
 8004800:	4607      	mov	r7, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8004802:	e005      	b.n	8004810 <HAL_RTC_SetAlarm+0x104>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004804:	f7fd f9fe 	bl	8001c04 <HAL_GetTick>
 8004808:	1bc0      	subs	r0, r0, r7
 800480a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800480e:	d835      	bhi.n	800487c <HAL_RTC_SetAlarm+0x170>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8004810:	682b      	ldr	r3, [r5, #0]
 8004812:	68dc      	ldr	r4, [r3, #12]
 8004814:	f014 0402 	ands.w	r4, r4, #2
 8004818:	d0f4      	beq.n	8004804 <HAL_RTC_SetAlarm+0xf8>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800481a:	621e      	str	r6, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800481c:	f8c3 8048 	str.w	r8, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc); 
 8004820:	689a      	ldr	r2, [r3, #8]
 8004822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004826:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(hrtc);
 8004828:	2200      	movs	r2, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);   
 800482a:	20ff      	movs	r0, #255	; 0xff
  hrtc->State = HAL_RTC_STATE_READY; 
 800482c:	2101      	movs	r1, #1
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);   
 800482e:	6258      	str	r0, [r3, #36]	; 0x24
  return HAL_OK;
 8004830:	4610      	mov	r0, r2
  hrtc->State = HAL_RTC_STATE_READY; 
 8004832:	7769      	strb	r1, [r5, #29]
  __HAL_UNLOCK(hrtc);
 8004834:	772a      	strb	r2, [r5, #28]
  return HAL_OK;
 8004836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800483a:	68be      	ldr	r6, [r7, #8]
 800483c:	f016 0640 	ands.w	r6, r6, #64	; 0x40
 8004840:	d017      	beq.n	8004872 <HAL_RTC_SetAlarm+0x166>
 8004842:	7b0e      	ldrb	r6, [r1, #12]
 8004844:	0436      	lsls	r6, r6, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8004846:	698a      	ldr	r2, [r1, #24]
 8004848:	6a0b      	ldr	r3, [r1, #32]
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800484a:	f891 c002 	ldrb.w	ip, [r1, #2]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800484e:	4313      	orrs	r3, r2
 8004850:	7808      	ldrb	r0, [r1, #0]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8004852:	784a      	ldrb	r2, [r1, #1]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8004854:	ea43 0c0c 	orr.w	ip, r3, ip
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8004858:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800485c:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
 8004860:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
 8004864:	ea4c 6c03 	orr.w	ip, ip, r3, lsl #24
 8004868:	ea4c 0606 	orr.w	r6, ip, r6
 800486c:	e7b1      	b.n	80047d2 <HAL_RTC_SetAlarm+0xc6>
  __HAL_LOCK(hrtc);
 800486e:	2002      	movs	r0, #2
 8004870:	4770      	bx	lr
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8004872:	730e      	strb	r6, [r1, #12]
 8004874:	e7e7      	b.n	8004846 <HAL_RTC_SetAlarm+0x13a>
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8004876:	f881 e00c 	strb.w	lr, [r1, #12]
 800487a:	e75f      	b.n	800473c <HAL_RTC_SetAlarm+0x30>
        hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 800487c:	2303      	movs	r3, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800487e:	682a      	ldr	r2, [r5, #0]
 8004880:	21ff      	movs	r1, #255	; 0xff
        return HAL_TIMEOUT;
 8004882:	4618      	mov	r0, r3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004884:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 8004886:	772c      	strb	r4, [r5, #28]
        hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 8004888:	776b      	strb	r3, [r5, #29]
        return HAL_TIMEOUT;
 800488a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800488e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004892:	60bb      	str	r3, [r7, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800489a:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 800489c:	f7fd f9b2 	bl	8001c04 <HAL_GetTick>
 80048a0:	4607      	mov	r7, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80048a2:	e005      	b.n	80048b0 <HAL_RTC_SetAlarm+0x1a4>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80048a4:	f7fd f9ae 	bl	8001c04 <HAL_GetTick>
 80048a8:	1bc0      	subs	r0, r0, r7
 80048aa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80048ae:	d8e5      	bhi.n	800487c <HAL_RTC_SetAlarm+0x170>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80048b0:	682b      	ldr	r3, [r5, #0]
 80048b2:	68dc      	ldr	r4, [r3, #12]
 80048b4:	f014 0401 	ands.w	r4, r4, #1
 80048b8:	d0f4      	beq.n	80048a4 <HAL_RTC_SetAlarm+0x198>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80048ba:	61de      	str	r6, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80048bc:	f8c3 8044 	str.w	r8, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80048c0:	689a      	ldr	r2, [r3, #8]
 80048c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048c6:	609a      	str	r2, [r3, #8]
 80048c8:	e7ae      	b.n	8004828 <HAL_RTC_SetAlarm+0x11c>
  while(Value >= 10)
 80048ca:	f04f 0800 	mov.w	r8, #0
 80048ce:	e762      	b.n	8004796 <HAL_RTC_SetAlarm+0x8a>
 80048d0:	2200      	movs	r2, #0
 80048d2:	e772      	b.n	80047ba <HAL_RTC_SetAlarm+0xae>

080048d4 <HAL_RTCEx_SetTimeStamp>:
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
  
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 80048d4:	7f03      	ldrb	r3, [r0, #28]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d022      	beq.n	8004920 <HAL_RTCEx_SetTimeStamp+0x4c>
  
  hrtc->State = HAL_RTC_STATE_BUSY;
  
  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80048da:	6803      	ldr	r3, [r0, #0]
{
 80048dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  hrtc->State = HAL_RTC_STATE_BUSY;
 80048de:	2602      	movs	r6, #2
    
  tmpreg|= TimeStampEdge;
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048e0:	25ca      	movs	r5, #202	; 0xca
 80048e2:	2453      	movs	r4, #83	; 0x53
  hrtc->Instance->CR = (uint32_t)tmpreg;
  
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
  
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);    
 80048e4:	27ff      	movs	r7, #255	; 0xff
  hrtc->State = HAL_RTC_STATE_BUSY;
 80048e6:	7746      	strb	r6, [r0, #29]
  
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY; 
 80048e8:	2601      	movs	r6, #1
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80048ea:	f8d3 e008 	ldr.w	lr, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048ee:	625d      	str	r5, [r3, #36]	; 0x24
 80048f0:	625c      	str	r4, [r3, #36]	; 0x24
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80048f2:	f6a4 045c 	subw	r4, r4, #2140	; 0x85c
  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80048f6:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80048f8:	ea0e 0404 	and.w	r4, lr, r4
  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80048fc:	f025 0506 	bic.w	r5, r5, #6
  tmpreg|= TimeStampEdge;
 8004900:	430c      	orrs	r4, r1
  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8004902:	64dd      	str	r5, [r3, #76]	; 0x4c
  
  /* Process Unlocked */ 
  __HAL_UNLOCK(hrtc);
 8004904:	2500      	movs	r5, #0
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin); 
 8004906:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004908:	430a      	orrs	r2, r1
 800490a:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800490c:	609c      	str	r4, [r3, #8]
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004914:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);    
 8004916:	625f      	str	r7, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY; 
 8004918:	7746      	strb	r6, [r0, #29]
  __HAL_UNLOCK(hrtc);
 800491a:	7705      	strb	r5, [r0, #28]
  
  return HAL_OK;
}
 800491c:	4628      	mov	r0, r5
 800491e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 8004920:	2102      	movs	r1, #2
}
 8004922:	4608      	mov	r0, r1
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop

08004928 <HAL_SAI_Init>:
  uint32_t tmpregisterGCR = 0;
  uint32_t ckstr_bits = 0;
  uint32_t syncen_bits = 0;

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8004928:	2800      	cmp	r0, #0
 800492a:	f000 80fb 	beq.w	8004b24 <HAL_SAI_Init+0x1fc>
{
 800492e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));
  
  if(hsai->State == HAL_SAI_STATE_RESET)
 8004930:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 8004934:	4604      	mov	r4, r0
 8004936:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 80e1 	beq.w	8004b02 <HAL_SAI_Init+0x1da>
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8004940:	4b79      	ldr	r3, [pc, #484]	; (8004b28 <HAL_SAI_Init+0x200>)
  hsai->State = HAL_SAI_STATE_BUSY;
 8004942:	2102      	movs	r1, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004944:	6822      	ldr	r2, [r4, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4878      	ldr	r0, [pc, #480]	; (8004b2c <HAL_SAI_Init+0x204>)
  hsai->State = HAL_SAI_STATE_BUSY;
 800494a:	f884 107d 	strb.w	r1, [r4, #125]	; 0x7d
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 800494e:	fba0 0303 	umull	r0, r3, r0, r3
  __HAL_SAI_DISABLE(hsai);
 8004952:	6811      	ldr	r1, [r2, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8004954:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 8004956:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 800495a:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 800495c:	6011      	str	r1, [r2, #0]
 800495e:	e002      	b.n	8004966 <HAL_SAI_Init+0x3e>
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8004960:	6811      	ldr	r1, [r2, #0]
 8004962:	03cd      	lsls	r5, r1, #15
 8004964:	d508      	bpl.n	8004978 <HAL_SAI_Init+0x50>
    if (count-- == 0)
 8004966:	f113 33ff 	adds.w	r3, r3, #4294967295
 800496a:	d2f9      	bcs.n	8004960 <HAL_SAI_Init+0x38>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800496c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004974:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  switch(hsai->Init.SynchroExt)
 8004978:	68e3      	ldr	r3, [r4, #12]
 800497a:	2b01      	cmp	r3, #1
 800497c:	f000 80be 	beq.w	8004afc <HAL_SAI_Init+0x1d4>
 8004980:	2b02      	cmp	r3, #2
 8004982:	bf0b      	itete	eq
 8004984:	2021      	moveq	r0, #33	; 0x21
 8004986:	2001      	movne	r0, #1
 8004988:	2120      	moveq	r1, #32
 800498a:	2100      	movne	r1, #0
  switch(hsai->Init.Synchro)
 800498c:	68a3      	ldr	r3, [r4, #8]
 800498e:	2b02      	cmp	r3, #2
 8004990:	f000 809e 	beq.w	8004ad0 <HAL_SAI_Init+0x1a8>
 8004994:	2b03      	cmp	r3, #3
 8004996:	f000 809a 	beq.w	8004ace <HAL_SAI_Init+0x1a6>
  uint32_t syncen_bits = 0;
 800499a:	2b01      	cmp	r3, #1
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800499c:	4b64      	ldr	r3, [pc, #400]	; (8004b30 <HAL_SAI_Init+0x208>)
  uint32_t syncen_bits = 0;
 800499e:	bf0c      	ite	eq
 80049a0:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 80049a4:	2700      	movne	r7, #0
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80049a6:	429a      	cmp	r2, r3
 80049a8:	f000 8098 	beq.w	8004adc <HAL_SAI_Init+0x1b4>
 80049ac:	4861      	ldr	r0, [pc, #388]	; (8004b34 <HAL_SAI_Init+0x20c>)
 80049ae:	1a10      	subs	r0, r2, r0
 80049b0:	fab0 f080 	clz	r0, r0
 80049b4:	0940      	lsrs	r0, r0, #5
 80049b6:	2800      	cmp	r0, #0
 80049b8:	f040 8090 	bne.w	8004adc <HAL_SAI_Init+0x1b4>
    SAI2->GCR = tmpregisterGCR;
 80049bc:	4b5e      	ldr	r3, [pc, #376]	; (8004b38 <HAL_SAI_Init+0x210>)
 80049be:	6019      	str	r1, [r3, #0]
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80049c0:	69e3      	ldr	r3, [r4, #28]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f000 808e 	beq.w	8004ae4 <HAL_SAI_Init+0x1bc>
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 80049c8:	4b5c      	ldr	r3, [pc, #368]	; (8004b3c <HAL_SAI_Init+0x214>)
 80049ca:	429a      	cmp	r2, r3
 80049cc:	f000 809e 	beq.w	8004b0c <HAL_SAI_Init+0x1e4>
 80049d0:	3320      	adds	r3, #32
 80049d2:	429a      	cmp	r2, r3
 80049d4:	f000 809a 	beq.w	8004b0c <HAL_SAI_Init+0x1e4>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80049d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80049dc:	69e5      	ldr	r5, [r4, #28]
    hsai->Init.Mckdiv = tmpval / 10;
 80049de:	4b58      	ldr	r3, [pc, #352]	; (8004b40 <HAL_SAI_Init+0x218>)
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80049e0:	0041      	lsls	r1, r0, #1
 80049e2:	026d      	lsls	r5, r5, #9
 80049e4:	fbb1 f1f5 	udiv	r1, r1, r5
    hsai->Init.Mckdiv = tmpval / 10;
 80049e8:	fba3 0301 	umull	r0, r3, r3, r1
 80049ec:	08d8      	lsrs	r0, r3, #3
    if((tmpval % 10) > 8)
 80049ee:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    hsai->Init.Mckdiv = tmpval / 10;
 80049f2:	6220      	str	r0, [r4, #32]
    if((tmpval % 10) > 8)
 80049f4:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
 80049f8:	2909      	cmp	r1, #9
 80049fa:	d101      	bne.n	8004a00 <HAL_SAI_Init+0xd8>
      hsai->Init.Mckdiv+= 1;
 80049fc:	3001      	adds	r0, #1
 80049fe:	6220      	str	r0, [r4, #32]
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004a00:	6863      	ldr	r3, [r4, #4]
 8004a02:	f033 0102 	bics.w	r1, r3, #2
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8004a06:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004a08:	d172      	bne.n	8004af0 <HAL_SAI_Init+0x1c8>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8004a0a:	2901      	cmp	r1, #1
 8004a0c:	bf14      	ite	ne
 8004a0e:	f44f 7600 	movne.w	r6, #512	; 0x200
 8004a12:	2600      	moveq	r6, #0
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004a14:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8004a16:	f24f 0c20 	movw	ip, #61472	; 0xf020
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004a1a:	f8d2 e000 	ldr.w	lr, [r2]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004a1e:	430b      	orrs	r3, r1
 8004a20:	6b61      	ldr	r1, [r4, #52]	; 0x34
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8004a22:	6c25      	ldr	r5, [r4, #64]	; 0x40
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004a24:	430b      	orrs	r3, r1
 8004a26:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004a28:	430b      	orrs	r3, r1
 8004a2a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004a2c:	430b      	orrs	r3, r1
 8004a2e:	6921      	ldr	r1, [r4, #16]
 8004a30:	430b      	orrs	r3, r1
 8004a32:	6961      	ldr	r1, [r4, #20]
 8004a34:	430b      	orrs	r3, r1
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004a36:	4943      	ldr	r1, [pc, #268]	; (8004b44 <HAL_SAI_Init+0x21c>)
 8004a38:	ea0e 0101 	and.w	r1, lr, r1
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004a3c:	433b      	orrs	r3, r7
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004a3e:	f8df e110 	ldr.w	lr, [pc, #272]	; 8004b50 <HAL_SAI_Init+0x228>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004a42:	2700      	movs	r7, #0
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004a44:	6011      	str	r1, [r2, #0]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004a46:	6811      	ldr	r1, [r2, #0]
 8004a48:	430b      	orrs	r3, r1
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004a4a:	69a1      	ldr	r1, [r4, #24]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004a4c:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004a50:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004a52:	4333      	orrs	r3, r6
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004a54:	4301      	orrs	r1, r0
 8004a56:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004a58:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004a5a:	6856      	ldr	r6, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004a5c:	4301      	orrs	r1, r0
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8004a5e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004a60:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004a62:	ea06 0e0e 	and.w	lr, r6, lr
  hsai->State= HAL_SAI_STATE_READY;
 8004a66:	2601      	movs	r6, #1
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004a68:	f8c2 e004 	str.w	lr, [r2, #4]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8004a6c:	4303      	orrs	r3, r0
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004a6e:	6850      	ldr	r0, [r2, #4]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8004a70:	f8d4 e04c 	ldr.w	lr, [r4, #76]	; 0x4c
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004a74:	4301      	orrs	r1, r0
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004a76:	4834      	ldr	r0, [pc, #208]	; (8004b48 <HAL_SAI_Init+0x220>)
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8004a78:	ea43 030e 	orr.w	r3, r3, lr
 8004a7c:	f105 3eff 	add.w	lr, r5, #4294967295
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004a80:	6051      	str	r1, [r2, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004a82:	6891      	ldr	r1, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8004a84:	ea43 030e 	orr.w	r3, r3, lr
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004a88:	4008      	ands	r0, r1
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8004a8a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004a8c:	3901      	subs	r1, #1
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004a8e:	6090      	str	r0, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8004a90:	6890      	ldr	r0, [r2, #8]
 8004a92:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004a96:	6d61      	ldr	r1, [r4, #84]	; 0x54
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8004a98:	4303      	orrs	r3, r0
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004a9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8004a9c:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004a9e:	ea41 0300 	orr.w	r3, r1, r0
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8004aa2:	68d1      	ldr	r1, [r2, #12]
  return HAL_OK;
 8004aa4:	4638      	mov	r0, r7
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8004aa6:	ea0c 0501 	and.w	r5, ip, r1
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8004aaa:	6e21      	ldr	r1, [r4, #96]	; 0x60
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8004aac:	60d5      	str	r5, [r2, #12]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004aae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004ab2:	68d5      	ldr	r5, [r2, #12]
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8004ab4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004ab6:	3901      	subs	r1, #1
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004ab8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004abc:	432b      	orrs	r3, r5
 8004abe:	60d3      	str	r3, [r2, #12]
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004ac0:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
  __HAL_UNLOCK(hsai);
 8004ac4:	f884 707c 	strb.w	r7, [r4, #124]	; 0x7c
  hsai->State= HAL_SAI_STATE_READY;
 8004ac8:	f884 607d 	strb.w	r6, [r4, #125]	; 0x7d
  return HAL_OK;
 8004acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004ace:	4601      	mov	r1, r0
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004ad0:	4b17      	ldr	r3, [pc, #92]	; (8004b30 <HAL_SAI_Init+0x208>)
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8004ad2:	f44f 6700 	mov.w	r7, #2048	; 0x800
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	f47f af68 	bne.w	80049ac <HAL_SAI_Init+0x84>
    SAI1->GCR = tmpregisterGCR;
 8004adc:	4b1b      	ldr	r3, [pc, #108]	; (8004b4c <HAL_SAI_Init+0x224>)
 8004ade:	6019      	str	r1, [r3, #0]
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004ae0:	69e3      	ldr	r3, [r4, #28]
 8004ae2:	b9cb      	cbnz	r3, 8004b18 <HAL_SAI_Init+0x1f0>
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004ae4:	6863      	ldr	r3, [r4, #4]
 8004ae6:	6a20      	ldr	r0, [r4, #32]
 8004ae8:	f033 0102 	bics.w	r1, r3, #2
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8004aec:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004aee:	d08c      	beq.n	8004a0a <HAL_SAI_Init+0xe2>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8004af0:	2901      	cmp	r1, #1
 8004af2:	bf14      	ite	ne
 8004af4:	2600      	movne	r6, #0
 8004af6:	f44f 7600 	moveq.w	r6, #512	; 0x200
 8004afa:	e78b      	b.n	8004a14 <HAL_SAI_Init+0xec>
  switch(hsai->Init.SynchroExt)
 8004afc:	2011      	movs	r0, #17
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004afe:	2110      	movs	r1, #16
 8004b00:	e744      	b.n	800498c <HAL_SAI_Init+0x64>
    hsai->Lock = HAL_UNLOCKED;
 8004b02:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 8004b06:	f7fc ff87 	bl	8001a18 <HAL_SAI_MspInit>
 8004b0a:	e719      	b.n	8004940 <HAL_SAI_Init+0x18>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004b0c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004b10:	f7ff fbe6 	bl	80042e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004b14:	6822      	ldr	r2, [r4, #0]
 8004b16:	e75f      	b.n	80049d8 <HAL_SAI_Init+0xb0>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004b18:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004b1c:	f7ff fbe0 	bl	80042e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004b20:	6822      	ldr	r2, [r4, #0]
 8004b22:	e751      	b.n	80049c8 <HAL_SAI_Init+0xa0>
    return HAL_ERROR;
 8004b24:	2001      	movs	r0, #1
 8004b26:	4770      	bx	lr
 8004b28:	20000000 	.word	0x20000000
 8004b2c:	95cbec1b 	.word	0x95cbec1b
 8004b30:	40015804 	.word	0x40015804
 8004b34:	40015824 	.word	0x40015824
 8004b38:	40015c00 	.word	0x40015c00
 8004b3c:	40015c04 	.word	0x40015c04
 8004b40:	cccccccd 	.word	0xcccccccd
 8004b44:	ff05c010 	.word	0xff05c010
 8004b48:	fff88000 	.word	0xfff88000
 8004b4c:	40015800 	.word	0x40015800
 8004b50:	ffff1ff0 	.word	0xffff1ff0

08004b54 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004b54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b58:	4605      	mov	r5, r0
 8004b5a:	b089      	sub	sp, #36	; 0x24
 8004b5c:	4688      	mov	r8, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 8004b5e:	f7fd f851 	bl	8001c04 <HAL_GetTick>
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
 8004b62:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 8004b64:	4606      	mov	r6, r0
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8004b66:	2108      	movs	r1, #8
 8004b68:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2] = {0, 0};
 8004b6a:	9300      	str	r3, [sp, #0]
 8004b6c:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8004b6e:	f001 fbcf 	bl	8006310 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_OK)
 8004b72:	4604      	mov	r4, r0
 8004b74:	b118      	cbz	r0, 8004b7e <SD_FindSCR+0x2a>
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
  }

  return HAL_SD_ERROR_NONE;
}
 8004b76:	4620      	mov	r0, r4
 8004b78:	b009      	add	sp, #36	; 0x24
 8004b7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8004b7e:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8004b80:	6828      	ldr	r0, [r5, #0]
 8004b82:	0409      	lsls	r1, r1, #16
 8004b84:	f001 fca6 	bl	80064d4 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_OK)
 8004b88:	4604      	mov	r4, r0
 8004b8a:	2800      	cmp	r0, #0
 8004b8c:	d1f3      	bne.n	8004b76 <SD_FindSCR+0x22>
  config.DataLength    = 8;
 8004b8e:	2008      	movs	r0, #8
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004b90:	f04f 31ff 	mov.w	r1, #4294967295
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004b94:	2202      	movs	r2, #2
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004b96:	2301      	movs	r3, #1
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8004b98:	2730      	movs	r7, #48	; 0x30
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004b9a:	9102      	str	r1, [sp, #8]
  config.DataLength    = 8;
 8004b9c:	9003      	str	r0, [sp, #12]
  SDMMC_ConfigData(hsd->Instance, &config);
 8004b9e:	eb0d 0100 	add.w	r1, sp, r0
 8004ba2:	6828      	ldr	r0, [r5, #0]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004ba4:	9406      	str	r4, [sp, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004ba6:	9205      	str	r2, [sp, #20]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004ba8:	9307      	str	r3, [sp, #28]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8004baa:	9704      	str	r7, [sp, #16]
  SDMMC_ConfigData(hsd->Instance, &config);
 8004bac:	f001 fb9a 	bl	80062e4 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004bb0:	6828      	ldr	r0, [r5, #0]
 8004bb2:	f001 fd43 	bl	800663c <SDMMC_CmdSendSCR>
  if(errorstate != HAL_OK)
 8004bb6:	4604      	mov	r4, r0
 8004bb8:	2800      	cmp	r0, #0
 8004bba:	d1dc      	bne.n	8004b76 <SD_FindSCR+0x22>
 8004bbc:	4681      	mov	r9, r0
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8004bbe:	f240 472a 	movw	r7, #1066	; 0x42a
 8004bc2:	e004      	b.n	8004bce <SD_FindSCR+0x7a>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004bc4:	f7fd f81e 	bl	8001c04 <HAL_GetTick>
 8004bc8:	1b80      	subs	r0, r0, r6
 8004bca:	3001      	adds	r0, #1
 8004bcc:	d015      	beq.n	8004bfa <SD_FindSCR+0xa6>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8004bce:	6828      	ldr	r0, [r5, #0]
 8004bd0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004bd2:	423b      	tst	r3, r7
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8004bd4:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8004bd6:	d10b      	bne.n	8004bf0 <SD_FindSCR+0x9c>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8004bd8:	029b      	lsls	r3, r3, #10
 8004bda:	d5f3      	bpl.n	8004bc4 <SD_FindSCR+0x70>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8004bdc:	f001 fb6a 	bl	80062b4 <SDMMC_ReadFIFO>
 8004be0:	ab08      	add	r3, sp, #32
 8004be2:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8004be6:	f109 0901 	add.w	r9, r9, #1
 8004bea:	f843 0c20 	str.w	r0, [r3, #-32]
 8004bee:	e7e9      	b.n	8004bc4 <SD_FindSCR+0x70>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004bf0:	0719      	lsls	r1, r3, #28
 8004bf2:	d505      	bpl.n	8004c00 <SD_FindSCR+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8004bf4:	2408      	movs	r4, #8
 8004bf6:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004bf8:	e7bd      	b.n	8004b76 <SD_FindSCR+0x22>
      return HAL_SD_ERROR_TIMEOUT;
 8004bfa:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004bfe:	e7ba      	b.n	8004b76 <SD_FindSCR+0x22>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004c00:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004c02:	079a      	lsls	r2, r3, #30
 8004c04:	d502      	bpl.n	8004c0c <SD_FindSCR+0xb8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8004c06:	2402      	movs	r4, #2
 8004c08:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004c0a:	e7b4      	b.n	8004b76 <SD_FindSCR+0x22>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004c0c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004c0e:	069b      	lsls	r3, r3, #26
 8004c10:	d502      	bpl.n	8004c18 <SD_FindSCR+0xc4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004c12:	2420      	movs	r4, #32
 8004c14:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8004c16:	e7ae      	b.n	8004b76 <SD_FindSCR+0x22>
 8004c18:	9a00      	ldr	r2, [sp, #0]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004c1a:	f240 51ff 	movw	r1, #1535	; 0x5ff
 8004c1e:	9b01      	ldr	r3, [sp, #4]
 8004c20:	ba12      	rev	r2, r2
 8004c22:	6381      	str	r1, [r0, #56]	; 0x38
 8004c24:	ba1b      	rev	r3, r3
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004c26:	f8c8 2004 	str.w	r2, [r8, #4]
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004c2a:	f8c8 3000 	str.w	r3, [r8]
  return HAL_SD_ERROR_NONE;
 8004c2e:	e7a2      	b.n	8004b76 <SD_FindSCR+0x22>

08004c30 <HAL_SD_GetCardCSD>:
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8004c30:	6e43      	ldr	r3, [r0, #100]	; 0x64
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8004c32:	0f9a      	lsrs	r2, r3, #30
{
 8004c34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8004c38:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8004c3a:	f3c3 6783 	ubfx	r7, r3, #26, #4
  pCSD->Reserved1      = tmp & 0x03;
 8004c3e:	f3c3 6501 	ubfx	r5, r3, #24, #2
  pCSD->TAAC = (uint8_t)tmp;
 8004c42:	f3c3 4407 	ubfx	r4, r3, #16, #8
  pCSD->NSAC = (uint8_t)tmp;
 8004c46:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8004c4a:	b2db      	uxtb	r3, r3
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8004c4c:	704f      	strb	r7, [r1, #1]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8004c4e:	2600      	movs	r6, #0
  pCSD->Reserved1      = tmp & 0x03;
 8004c50:	708d      	strb	r5, [r1, #2]
  pCSD->TAAC = (uint8_t)tmp;
 8004c52:	70cc      	strb	r4, [r1, #3]
  pCSD->NSAC = (uint8_t)tmp;
 8004c54:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8004c56:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8004c58:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8004c5a:	0e1d      	lsrs	r5, r3, #24
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8004c5c:	f3c3 5803 	ubfx	r8, r3, #20, #4
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8004c60:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8004c64:	f3c3 4e03 	ubfx	lr, r3, #16, #4
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8004c68:	012d      	lsls	r5, r5, #4
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8004c6a:	ea4f 1cd2 	mov.w	ip, r2, lsr #7
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8004c6e:	f3c2 1780 	ubfx	r7, r2, #6, #1
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8004c72:	80cd      	strh	r5, [r1, #6]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8004c74:	f3c2 1540 	ubfx	r5, r2, #5, #1
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8004c78:	88cc      	ldrh	r4, [r1, #6]
 8004c7a:	b2a4      	uxth	r4, r4
 8004c7c:	ea44 0408 	orr.w	r4, r4, r8
 8004c80:	80cc      	strh	r4, [r1, #6]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8004c82:	f3c2 1400 	ubfx	r4, r2, #4, #1
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8004c86:	f881 e008 	strb.w	lr, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8004c8a:	f881 c009 	strb.w	ip, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8004c8e:	728f      	strb	r7, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8004c90:	72cd      	strb	r5, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8004c92:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8004c94:	734e      	strb	r6, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8004c96:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004c98:	2c00      	cmp	r4, #0
 8004c9a:	f040 808d 	bne.w	8004db8 <HAL_SD_GetCardCSD+0x188>
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8004c9e:	0292      	lsls	r2, r2, #10
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8004ca0:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp) << 2;
 8004ca2:	009b      	lsls	r3, r3, #2
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8004ca4:	2501      	movs	r5, #1
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8004ca6:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8004caa:	0be6      	lsrs	r6, r4, #15
    pCSD->DeviceSize |= (tmp) << 2;
 8004cac:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8004cb0:	f3c4 6e02 	ubfx	lr, r4, #24, #3
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8004cb4:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8004cb6:	f006 0606 	and.w	r6, r6, #6
    pCSD->DeviceSize |= (tmp) << 2;
 8004cba:	690a      	ldr	r2, [r1, #16]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8004cbc:	f3c4 5742 	ubfx	r7, r4, #21, #3
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8004cc0:	f3c4 6cc2 	ubfx	ip, r4, #27, #3
    pCSD->DeviceSize |= (tmp) << 2;
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	610a      	str	r2, [r1, #16]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8004cc8:	f3c4 4282 	ubfx	r2, r4, #18, #3
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8004ccc:	690b      	ldr	r3, [r1, #16]
 8004cce:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004cd2:	610b      	str	r3, [r1, #16]
 8004cd4:	f3c4 2307 	ubfx	r3, r4, #8, #8
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8004cd8:	f881 c014 	strb.w	ip, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8004cdc:	f881 e015 	strb.w	lr, [r1, #21]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 8004ce0:	f3c4 3ec0 	ubfx	lr, r4, #15, #1
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8004ce4:	758f      	strb	r7, [r1, #22]
    hsd->SdCard.LogBlockSize = 512;
 8004ce6:	f44f 7700 	mov.w	r7, #512	; 0x200
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8004cea:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8004cec:	760e      	strb	r6, [r1, #24]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 8004cee:	7e0a      	ldrb	r2, [r1, #24]
 8004cf0:	ea42 020e 	orr.w	r2, r2, lr
 8004cf4:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8004cf6:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8004cf8:	7e0e      	ldrb	r6, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8004cfa:	442a      	add	r2, r5
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8004cfc:	3602      	adds	r6, #2
 8004cfe:	40b2      	lsls	r2, r6
 8004d00:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8004d02:	7a0e      	ldrb	r6, [r1, #8]
    hsd->SdCard.LogBlockSize = 512;
 8004d04:	6607      	str	r7, [r0, #96]	; 0x60
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8004d06:	40b5      	lsls	r5, r6
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8004d08:	0a6e      	lsrs	r6, r5, #9
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8004d0a:	6585      	str	r5, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8004d0c:	fb02 f206 	mul.w	r2, r2, r6
 8004d10:	65c2      	str	r2, [r0, #92]	; 0x5c
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8004d12:	005d      	lsls	r5, r3, #1
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8004d14:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8004d18:	f3c4 1ec0 	ubfx	lr, r4, #7, #1
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8004d1c:	f004 037f 	and.w	r3, r4, #127	; 0x7f
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8004d20:	f005 047e 	and.w	r4, r5, #126	; 0x7e
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8004d24:	764a      	strb	r2, [r1, #25]
  pCSD->Reserved3           = 0;
 8004d26:	2500      	movs	r5, #0
  pCSD->Reserved4 = 1;
 8004d28:	2601      	movs	r6, #1
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8004d2a:	768c      	strb	r4, [r1, #26]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8004d2c:	7e8a      	ldrb	r2, [r1, #26]
  return HAL_OK;
 8004d2e:	462f      	mov	r7, r5
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8004d30:	ea42 020e 	orr.w	r2, r2, lr
 8004d34:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8004d36:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8004d38:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8004d3a:	0d9c      	lsrs	r4, r3, #22
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8004d3c:	f3c3 7041 	ubfx	r0, r3, #29, #2
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8004d40:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8004d44:	f3c3 6282 	ubfx	r2, r3, #26, #3
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8004d48:	f004 040c 	and.w	r4, r4, #12
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8004d4c:	f3c3 4900 	ubfx	r9, r3, #16, #1
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8004d50:	f881 e01c 	strb.w	lr, [r1, #28]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8004d54:	f3c3 5e81 	ubfx	lr, r3, #22, #2
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8004d58:	7748      	strb	r0, [r1, #29]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8004d5a:	f3c3 5040 	ubfx	r0, r3, #21, #1
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8004d5e:	778a      	strb	r2, [r1, #30]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8004d60:	f3c3 38c0 	ubfx	r8, r3, #15, #1
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8004d64:	77cc      	strb	r4, [r1, #31]
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8004d66:	f3c3 3c80 	ubfx	ip, r3, #14, #1
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8004d6a:	7fca      	ldrb	r2, [r1, #31]
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8004d6c:	f3c3 3400 	ubfx	r4, r3, #12, #1
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8004d70:	ea42 020e 	orr.w	r2, r2, lr
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8004d74:	f3c3 3e40 	ubfx	lr, r3, #13, #1
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8004d78:	77ca      	strb	r2, [r1, #31]
  pCSD->ECC              = (tmp & 0x03);
 8004d7a:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8004d7e:	f881 0020 	strb.w	r0, [r1, #32]
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8004d82:	f3c3 2081 	ubfx	r0, r3, #10, #2
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8004d86:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->Reserved3           = 0;
 8004d8a:	f881 5021 	strb.w	r5, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8004d8e:	f881 9022 	strb.w	r9, [r1, #34]	; 0x22
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8004d92:	f881 8023 	strb.w	r8, [r1, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8004d96:	f881 c024 	strb.w	ip, [r1, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8004d9a:	f881 e025 	strb.w	lr, [r1, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8004d9e:	f881 4026 	strb.w	r4, [r1, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8004da2:	f881 0027 	strb.w	r0, [r1, #39]	; 0x27
}
 8004da6:	4638      	mov	r0, r7
  pCSD->ECC              = (tmp & 0x03);
 8004da8:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8004dac:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8004db0:	f881 602a 	strb.w	r6, [r1, #42]	; 0x2a
}
 8004db4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004db8:	2c01      	cmp	r4, #1
 8004dba:	d00e      	beq.n	8004dda <HAL_SD_GetCardCSD+0x1aa>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 8004dbc:	6803      	ldr	r3, [r0, #0]
 8004dbe:	f240 51ff 	movw	r1, #1535	; 0x5ff
    hsd->State = HAL_SD_STATE_READY;
 8004dc2:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 8004dc4:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004dc6:	6b83      	ldr	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8004dc8:	4617      	mov	r7, r2
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dce:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004dd0:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
}
 8004dd4:	4638      	mov	r0, r7
 8004dd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8004dda:	041a      	lsls	r2, r3, #16
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8004ddc:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8004dde:	f44f 7600 	mov.w	r6, #512	; 0x200
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8004de2:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8004de6:	0e27      	lsrs	r7, r4, #24
    pCSD->DeviceSize |= (tmp);
 8004de8:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8004dec:	f3c4 2307 	ubfx	r3, r4, #8, #8
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8004df0:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp << 8);
 8004df2:	690a      	ldr	r2, [r1, #16]
 8004df4:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8004df8:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 8004dfa:	690a      	ldr	r2, [r1, #16]
 8004dfc:	432a      	orrs	r2, r5
 8004dfe:	610a      	str	r2, [r1, #16]
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8004e00:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8004e02:	6586      	str	r6, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8004e04:	0292      	lsls	r2, r2, #10
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8004e06:	6606      	str	r6, [r0, #96]	; 0x60
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8004e08:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e0c:	6542      	str	r2, [r0, #84]	; 0x54
 8004e0e:	65c2      	str	r2, [r0, #92]	; 0x5c
 8004e10:	e77f      	b.n	8004d12 <HAL_SD_GetCardCSD+0xe2>
 8004e12:	bf00      	nop

08004e14 <HAL_SD_InitCard>:
{
 8004e14:	b570      	push	{r4, r5, r6, lr}
 8004e16:	b098      	sub	sp, #96	; 0x60
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8004e18:	2500      	movs	r5, #0
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8004e1a:	2176      	movs	r1, #118	; 0x76
{
 8004e1c:	4604      	mov	r4, r0
  SDMMC_Init(hsd->Instance, Init);
 8004e1e:	aa0a      	add	r2, sp, #40	; 0x28
 8004e20:	6806      	ldr	r6, [r0, #0]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8004e22:	950a      	str	r5, [sp, #40]	; 0x28
  SDMMC_Init(hsd->Instance, Init);
 8004e24:	ab07      	add	r3, sp, #28
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004e26:	950b      	str	r5, [sp, #44]	; 0x2c
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8004e28:	910c      	str	r1, [sp, #48]	; 0x30
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8004e2a:	9507      	str	r5, [sp, #28]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8004e2c:	9508      	str	r5, [sp, #32]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004e2e:	9509      	str	r5, [sp, #36]	; 0x24
  SDMMC_Init(hsd->Instance, Init);
 8004e30:	ca07      	ldmia	r2, {r0, r1, r2}
 8004e32:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8004e36:	4630      	mov	r0, r6
 8004e38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e3a:	f001 fa1d 	bl	8006278 <SDMMC_Init>
  __HAL_SD_DISABLE(hsd); 
 8004e3e:	6823      	ldr	r3, [r4, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
  SDMMC_PowerState_ON(hsd->Instance);
 8004e42:	4618      	mov	r0, r3
  __HAL_SD_DISABLE(hsd); 
 8004e44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e48:	605a      	str	r2, [r3, #4]
  SDMMC_PowerState_ON(hsd->Instance);
 8004e4a:	f001 fa37 	bl	80062bc <SDMMC_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8004e4e:	6822      	ldr	r2, [r4, #0]
  HAL_Delay(2);
 8004e50:	2002      	movs	r0, #2
  __HAL_SD_ENABLE(hsd);
 8004e52:	6853      	ldr	r3, [r2, #4]
 8004e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e58:	6053      	str	r3, [r2, #4]
  HAL_Delay(2);
 8004e5a:	f7fc fed9 	bl	8001c10 <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004e5e:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0;
 8004e60:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004e62:	f001 facf 	bl	8006404 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e66:	4605      	mov	r5, r0
 8004e68:	b138      	cbz	r0, 8004e7a <HAL_SD_InitCard+0x66>
    hsd->State = HAL_SD_STATE_READY;
 8004e6a:	2001      	movs	r0, #1
 8004e6c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004e70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004e72:	431d      	orrs	r5, r3
 8004e74:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8004e76:	b018      	add	sp, #96	; 0x60
 8004e78:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004e7a:	6820      	ldr	r0, [r4, #0]
 8004e7c:	f001 faee 	bl	800645c <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e80:	b360      	cbz	r0, 8004edc <HAL_SD_InitCard+0xc8>
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8004e82:	f64f 76ff 	movw	r6, #65535	; 0xffff
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004e86:	64a5      	str	r5, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8004e88:	9b06      	ldr	r3, [sp, #24]
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004e8a:	2100      	movs	r1, #0
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8004e8c:	1c5a      	adds	r2, r3, #1
 8004e8e:	42b3      	cmp	r3, r6
 8004e90:	9206      	str	r2, [sp, #24]
 8004e92:	d069      	beq.n	8004f68 <HAL_SD_InitCard+0x154>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004e94:	6820      	ldr	r0, [r4, #0]
 8004e96:	f001 fb1d 	bl	80064d4 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8004e9a:	2800      	cmp	r0, #0
 8004e9c:	d167      	bne.n	8004f6e <HAL_SD_InitCard+0x15a>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8004e9e:	4601      	mov	r1, r0
 8004ea0:	6820      	ldr	r0, [r4, #0]
 8004ea2:	f001 fb55 	bl	8006550 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8004ea6:	2800      	cmp	r0, #0
 8004ea8:	d161      	bne.n	8004f6e <HAL_SD_InitCard+0x15a>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004eaa:	4601      	mov	r1, r0
 8004eac:	6820      	ldr	r0, [r4, #0]
 8004eae:	f001 fa0f 	bl	80062d0 <SDMMC_GetResponse>
    while(validvoltage == 0)
 8004eb2:	2800      	cmp	r0, #0
 8004eb4:	dae8      	bge.n	8004e88 <HAL_SD_InitCard+0x74>
    hsd->SdCard.CardType = CARD_SDSC;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	6463      	str	r3, [r4, #68]	; 0x44
  uint16_t sd_rca = 1;
 8004eba:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8004ebc:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1;
 8004ebe:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8004ec2:	f001 fa01 	bl	80062c8 <SDMMC_GetPowerState>
 8004ec6:	bb60      	cbnz	r0, 8004f22 <HAL_SD_InitCard+0x10e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004ec8:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 8004ecc:	2001      	movs	r0, #1
 8004ece:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004ed2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ed4:	432b      	orrs	r3, r5
 8004ed6:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8004ed8:	b018      	add	sp, #96	; 0x60
 8004eda:	bd70      	pop	{r4, r5, r6, pc}
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004edc:	2301      	movs	r3, #1
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8004ede:	f64f 76ff 	movw	r6, #65535	; 0xffff
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004ee2:	64a3      	str	r3, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8004ee4:	9b06      	ldr	r3, [sp, #24]
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004ee6:	2100      	movs	r1, #0
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8004ee8:	1c5a      	adds	r2, r3, #1
 8004eea:	42b3      	cmp	r3, r6
 8004eec:	9206      	str	r2, [sp, #24]
 8004eee:	d03b      	beq.n	8004f68 <HAL_SD_InitCard+0x154>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004ef0:	6820      	ldr	r0, [r4, #0]
 8004ef2:	f001 faef 	bl	80064d4 <SDMMC_CmdAppCommand>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8004ef6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      if(errorstate != HAL_SD_ERROR_NONE)
 8004efa:	4605      	mov	r5, r0
 8004efc:	2800      	cmp	r0, #0
 8004efe:	d1b4      	bne.n	8004e6a <HAL_SD_InitCard+0x56>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8004f00:	6820      	ldr	r0, [r4, #0]
 8004f02:	f001 fb25 	bl	8006550 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8004f06:	4605      	mov	r5, r0
 8004f08:	2800      	cmp	r0, #0
 8004f0a:	d1ae      	bne.n	8004e6a <HAL_SD_InitCard+0x56>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004f0c:	4601      	mov	r1, r0
 8004f0e:	6820      	ldr	r0, [r4, #0]
 8004f10:	f001 f9de 	bl	80062d0 <SDMMC_GetResponse>
    while(validvoltage == 0)
 8004f14:	2800      	cmp	r0, #0
 8004f16:	dae5      	bge.n	8004ee4 <HAL_SD_InitCard+0xd0>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004f18:	0043      	lsls	r3, r0, #1
 8004f1a:	d5cc      	bpl.n	8004eb6 <HAL_SD_InitCard+0xa2>
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	6463      	str	r3, [r4, #68]	; 0x44
 8004f20:	e7cb      	b.n	8004eba <HAL_SD_InitCard+0xa6>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004f22:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004f24:	2b03      	cmp	r3, #3
 8004f26:	d125      	bne.n	8004f74 <HAL_SD_InitCard+0x160>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8004f28:	2104      	movs	r1, #4
 8004f2a:	6820      	ldr	r0, [r4, #0]
 8004f2c:	f001 f9d0 	bl	80062d0 <SDMMC_GetResponse>
  HAL_SD_GetCardCSD(hsd, &CSD);
 8004f30:	a90d      	add	r1, sp, #52	; 0x34
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8004f32:	0d03      	lsrs	r3, r0, #20
  HAL_SD_GetCardCSD(hsd, &CSD);
 8004f34:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8004f36:	64e3      	str	r3, [r4, #76]	; 0x4c
  HAL_SD_GetCardCSD(hsd, &CSD);
 8004f38:	f7ff fe7a 	bl	8004c30 <HAL_SD_GetCardCSD>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 8004f3c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004f3e:	2300      	movs	r3, #0
 8004f40:	6820      	ldr	r0, [r4, #0]
 8004f42:	0412      	lsls	r2, r2, #16
 8004f44:	f001 fa20 	bl	8006388 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f48:	4605      	mov	r5, r0
 8004f4a:	2800      	cmp	r0, #0
 8004f4c:	d1be      	bne.n	8004ecc <HAL_SD_InitCard+0xb8>
  SDMMC_Init(hsd->Instance, hsd->Init);
 8004f4e:	1d23      	adds	r3, r4, #4
 8004f50:	f854 6b10 	ldr.w	r6, [r4], #16
 8004f54:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004f58:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8004f5c:	4630      	mov	r0, r6
 8004f5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f60:	f001 f98a 	bl	8006278 <SDMMC_Init>
  return HAL_OK;
 8004f64:	4628      	mov	r0, r5
 8004f66:	e786      	b.n	8004e76 <HAL_SD_InitCard+0x62>
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004f68:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8004f6c:	e77d      	b.n	8004e6a <HAL_SD_InitCard+0x56>
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004f6e:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8004f72:	e77a      	b.n	8004e6a <HAL_SD_InitCard+0x56>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004f74:	6820      	ldr	r0, [r4, #0]
 8004f76:	f001 fb9f 	bl	80066b8 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f7a:	4605      	mov	r5, r0
 8004f7c:	2800      	cmp	r0, #0
 8004f7e:	d1a5      	bne.n	8004ecc <HAL_SD_InitCard+0xb8>
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004f80:	4601      	mov	r1, r0
 8004f82:	6820      	ldr	r0, [r4, #0]
 8004f84:	f001 f9a4 	bl	80062d0 <SDMMC_GetResponse>
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004f88:	2104      	movs	r1, #4
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004f8a:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004f8c:	6820      	ldr	r0, [r4, #0]
 8004f8e:	f001 f99f 	bl	80062d0 <SDMMC_GetResponse>
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004f92:	2108      	movs	r1, #8
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004f94:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004f96:	6820      	ldr	r0, [r4, #0]
 8004f98:	f001 f99a 	bl	80062d0 <SDMMC_GetResponse>
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004f9c:	210c      	movs	r1, #12
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004f9e:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004fa0:	6820      	ldr	r0, [r4, #0]
 8004fa2:	f001 f995 	bl	80062d0 <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004fa6:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004fa8:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004fac:	2b03      	cmp	r3, #3
 8004fae:	d0bb      	beq.n	8004f28 <HAL_SD_InitCard+0x114>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004fb0:	f10d 0116 	add.w	r1, sp, #22
 8004fb4:	6820      	ldr	r0, [r4, #0]
 8004fb6:	f001 fbf1 	bl	800679c <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004fba:	4605      	mov	r5, r0
 8004fbc:	2800      	cmp	r0, #0
 8004fbe:	d185      	bne.n	8004ecc <HAL_SD_InitCard+0xb8>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004fc0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004fc2:	2b03      	cmp	r3, #3
 8004fc4:	d0b0      	beq.n	8004f28 <HAL_SD_InitCard+0x114>
    hsd->SdCard.RelCardAdd = sd_rca;
 8004fc6:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004fca:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
 8004fcc:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004fce:	0409      	lsls	r1, r1, #16
 8004fd0:	f001 fbac 	bl	800672c <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004fd4:	4605      	mov	r5, r0
 8004fd6:	2800      	cmp	r0, #0
 8004fd8:	f47f af78 	bne.w	8004ecc <HAL_SD_InitCard+0xb8>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004fdc:	4601      	mov	r1, r0
 8004fde:	6820      	ldr	r0, [r4, #0]
 8004fe0:	f001 f976 	bl	80062d0 <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004fe4:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004fe6:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004fe8:	6820      	ldr	r0, [r4, #0]
 8004fea:	f001 f971 	bl	80062d0 <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004fee:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004ff0:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004ff2:	6820      	ldr	r0, [r4, #0]
 8004ff4:	f001 f96c 	bl	80062d0 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004ff8:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004ffa:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004ffc:	6820      	ldr	r0, [r4, #0]
 8004ffe:	f001 f967 	bl	80062d0 <SDMMC_GetResponse>
 8005002:	6720      	str	r0, [r4, #112]	; 0x70
 8005004:	e790      	b.n	8004f28 <HAL_SD_InitCard+0x114>
 8005006:	bf00      	nop

08005008 <HAL_SD_Init>:
  if(hsd == NULL)
 8005008:	b1c0      	cbz	r0, 800503c <HAL_SD_Init+0x34>
  if(hsd->State == HAL_SD_STATE_RESET)
 800500a:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
{
 800500e:	b510      	push	{r4, lr}
  if(hsd->State == HAL_SD_STATE_RESET)
 8005010:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005014:	4604      	mov	r4, r0
 8005016:	b16b      	cbz	r3, 8005034 <HAL_SD_Init+0x2c>
  hsd->State = HAL_SD_STATE_BUSY;
 8005018:	2303      	movs	r3, #3
  HAL_SD_InitCard(hsd);
 800501a:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 800501c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_InitCard(hsd);
 8005020:	f7ff fef8 	bl	8004e14 <HAL_SD_InitCard>
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8005024:	2300      	movs	r3, #0
  hsd->State = HAL_SD_STATE_READY;
 8005026:	2201      	movs	r2, #1
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8005028:	63a3      	str	r3, [r4, #56]	; 0x38
  return HAL_OK;
 800502a:	4618      	mov	r0, r3
  hsd->Context = SD_CONTEXT_NONE;
 800502c:	6323      	str	r3, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 800502e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  return HAL_OK;
 8005032:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 8005034:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8005036:	f7fc facb 	bl	80015d0 <HAL_SD_MspInit>
 800503a:	e7ed      	b.n	8005018 <HAL_SD_Init+0x10>
    return HAL_ERROR;
 800503c:	2001      	movs	r0, #1
 800503e:	4770      	bx	lr

08005040 <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 8005040:	2203      	movs	r2, #3
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005042:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005044:	4293      	cmp	r3, r2
{
 8005046:	b570      	push	{r4, r5, r6, lr}
 8005048:	4604      	mov	r4, r0
 800504a:	b08a      	sub	sp, #40	; 0x28
 800504c:	460e      	mov	r6, r1
  hsd->State = HAL_SD_STATE_BUSY;
 800504e:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005052:	d017      	beq.n	8005084 <HAL_SD_ConfigWideBusOperation+0x44>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8005054:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8005058:	d014      	beq.n	8005084 <HAL_SD_ConfigWideBusOperation+0x44>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800505a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800505e:	d034      	beq.n	80050ca <HAL_SD_ConfigWideBusOperation+0x8a>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8005060:	2900      	cmp	r1, #0
 8005062:	d040      	beq.n	80050e6 <HAL_SD_ConfigWideBusOperation+0xa6>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005064:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005066:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800506a:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800506c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800506e:	b185      	cbz	r5, 8005092 <HAL_SD_ConfigWideBusOperation+0x52>
    hsd->State = HAL_SD_STATE_READY;
 8005070:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005072:	6822      	ldr	r2, [r4, #0]
 8005074:	f240 51ff 	movw	r1, #1535	; 0x5ff
    return HAL_ERROR;
 8005078:	4618      	mov	r0, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800507a:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800507c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8005080:	b00a      	add	sp, #40	; 0x28
 8005082:	bd70      	pop	{r4, r5, r6, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005084:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800508a:	63a3      	str	r3, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800508c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800508e:	2d00      	cmp	r5, #0
 8005090:	d1ee      	bne.n	8005070 <HAL_SD_ConfigWideBusOperation+0x30>
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005092:	69a2      	ldr	r2, [r4, #24]
    SDMMC_Init(hsd->Instance, Init);
 8005094:	ab04      	add	r3, sp, #16
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005096:	6961      	ldr	r1, [r4, #20]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005098:	9209      	str	r2, [sp, #36]	; 0x24
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800509a:	6862      	ldr	r2, [r4, #4]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800509c:	9108      	str	r1, [sp, #32]
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800509e:	9204      	str	r2, [sp, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80050a0:	68e2      	ldr	r2, [r4, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80050a2:	68a1      	ldr	r1, [r4, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80050a4:	9206      	str	r2, [sp, #24]
    SDMMC_Init(hsd->Instance, Init);
 80050a6:	aa0a      	add	r2, sp, #40	; 0x28
    Init.BusWide             = WideMode;
 80050a8:	9607      	str	r6, [sp, #28]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80050aa:	9105      	str	r1, [sp, #20]
    SDMMC_Init(hsd->Instance, Init);
 80050ac:	6826      	ldr	r6, [r4, #0]
 80050ae:	e912 0007 	ldmdb	r2, {r0, r1, r2}
 80050b2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80050b6:	4630      	mov	r0, r6
 80050b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050ba:	f001 f8dd 	bl	8006278 <SDMMC_Init>
  return HAL_OK;
 80050be:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 80050c0:	2301      	movs	r3, #1
 80050c2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80050c6:	b00a      	add	sp, #40	; 0x28
 80050c8:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t scr[2] = {0, 0};
 80050ca:	2300      	movs	r3, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80050cc:	6800      	ldr	r0, [r0, #0]
 80050ce:	4619      	mov	r1, r3
  uint32_t scr[2] = {0, 0};
 80050d0:	9304      	str	r3, [sp, #16]
 80050d2:	9305      	str	r3, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80050d4:	f001 f8fc 	bl	80062d0 <SDMMC_GetResponse>
 80050d8:	0180      	lsls	r0, r0, #6
 80050da:	d51d      	bpl.n	8005118 <HAL_SD_ConfigWideBusOperation+0xd8>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80050dc:	4630      	mov	r0, r6
      hsd->ErrorCode |= errorstate;
 80050de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80050e0:	4318      	orrs	r0, r3
 80050e2:	63a0      	str	r0, [r4, #56]	; 0x38
 80050e4:	e7c2      	b.n	800506c <HAL_SD_ConfigWideBusOperation+0x2c>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80050e6:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 80050e8:	9104      	str	r1, [sp, #16]
 80050ea:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80050ec:	f001 f8f0 	bl	80062d0 <SDMMC_GetResponse>
 80050f0:	0182      	lsls	r2, r0, #6
 80050f2:	d505      	bpl.n	8005100 <HAL_SD_ConfigWideBusOperation+0xc0>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80050f4:	f44f 6000 	mov.w	r0, #2048	; 0x800
      hsd->ErrorCode |= errorstate;
 80050f8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80050fa:	4308      	orrs	r0, r1
 80050fc:	63a0      	str	r0, [r4, #56]	; 0x38
 80050fe:	e7b5      	b.n	800506c <HAL_SD_ConfigWideBusOperation+0x2c>
  errorstate = SD_FindSCR(hsd, scr);
 8005100:	a904      	add	r1, sp, #16
 8005102:	4620      	mov	r0, r4
 8005104:	f7ff fd26 	bl	8004b54 <SD_FindSCR>
  if(errorstate != HAL_OK)
 8005108:	2800      	cmp	r0, #0
 800510a:	d1f5      	bne.n	80050f8 <HAL_SD_ConfigWideBusOperation+0xb8>
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800510c:	9b05      	ldr	r3, [sp, #20]
 800510e:	03db      	lsls	r3, r3, #15
 8005110:	d40e      	bmi.n	8005130 <HAL_SD_ConfigWideBusOperation+0xf0>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005112:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005116:	e7ef      	b.n	80050f8 <HAL_SD_ConfigWideBusOperation+0xb8>
  errorstate = SD_FindSCR(hsd, scr);
 8005118:	a904      	add	r1, sp, #16
 800511a:	4620      	mov	r0, r4
 800511c:	f7ff fd1a 	bl	8004b54 <SD_FindSCR>
  if(errorstate != HAL_OK)
 8005120:	2800      	cmp	r0, #0
 8005122:	d1dc      	bne.n	80050de <HAL_SD_ConfigWideBusOperation+0x9e>
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005124:	9b05      	ldr	r3, [sp, #20]
 8005126:	0359      	lsls	r1, r3, #13
 8005128:	d40e      	bmi.n	8005148 <HAL_SD_ConfigWideBusOperation+0x108>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800512a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800512e:	e7d6      	b.n	80050de <HAL_SD_ConfigWideBusOperation+0x9e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8005130:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005132:	6820      	ldr	r0, [r4, #0]
 8005134:	0409      	lsls	r1, r1, #16
 8005136:	f001 f9cd 	bl	80064d4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 800513a:	2800      	cmp	r0, #0
 800513c:	d1dc      	bne.n	80050f8 <HAL_SD_ConfigWideBusOperation+0xb8>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 800513e:	4601      	mov	r1, r0
 8005140:	6820      	ldr	r0, [r4, #0]
 8005142:	f001 fa3d 	bl	80065c0 <SDMMC_CmdBusWidth>
 8005146:	e7d7      	b.n	80050f8 <HAL_SD_ConfigWideBusOperation+0xb8>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8005148:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800514a:	6820      	ldr	r0, [r4, #0]
 800514c:	0409      	lsls	r1, r1, #16
 800514e:	f001 f9c1 	bl	80064d4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 8005152:	2800      	cmp	r0, #0
 8005154:	d1c3      	bne.n	80050de <HAL_SD_ConfigWideBusOperation+0x9e>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 8005156:	2102      	movs	r1, #2
 8005158:	6820      	ldr	r0, [r4, #0]
 800515a:	f001 fa31 	bl	80065c0 <SDMMC_CmdBusWidth>
 800515e:	e7be      	b.n	80050de <HAL_SD_ConfigWideBusOperation+0x9e>

08005160 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8005160:	b1e8      	cbz	r0, 800519e <HAL_SDRAM_Init+0x3e>
{   
 8005162:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005164:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005168:	4604      	mov	r4, r0
 800516a:	460d      	mov	r5, r1
 800516c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005170:	b183      	cbz	r3, 8005194 <HAL_SDRAM_Init+0x34>
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005172:	2302      	movs	r3, #2
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005174:	1d21      	adds	r1, r4, #4
 8005176:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005178:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800517c:	f000 ff5c 	bl	8006038 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8005180:	4629      	mov	r1, r5
 8005182:	e894 0005 	ldmia.w	r4, {r0, r2}
 8005186:	f000 ff93 	bl	80060b0 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800518a:	2301      	movs	r3, #1
  
  return HAL_OK;
 800518c:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 800518e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8005192:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8005194:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8005198:	f7fc fbd6 	bl	8001948 <HAL_SDRAM_MspInit>
 800519c:	e7e9      	b.n	8005172 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 800519e:	2001      	movs	r0, #1
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop

080051a4 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80051a4:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80051a6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d101      	bne.n	80051b4 <HAL_SDRAM_SendCommand+0x10>
  {
    return HAL_BUSY;
 80051b0:	4618      	mov	r0, r3
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
}
 80051b2:	bd38      	pop	{r3, r4, r5, pc}
 80051b4:	4604      	mov	r4, r0
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80051b6:	2302      	movs	r3, #2
 80051b8:	460d      	mov	r5, r1
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80051ba:	6800      	ldr	r0, [r0, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80051bc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80051c0:	f000 ffc4 	bl	800614c <FMC_SDRAM_SendCommand>
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80051c4:	682b      	ldr	r3, [r5, #0]
  return HAL_OK;  
 80051c6:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80051c8:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80051ca:	bf0c      	ite	eq
 80051cc:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
 80051ce:	2301      	movne	r3, #1
 80051d0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80051d4:	bd38      	pop	{r3, r4, r5, pc}
 80051d6:	bf00      	nop

080051d8 <HAL_SDRAM_ProgramRefreshRate>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80051d8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d101      	bne.n	80051e6 <HAL_SDRAM_ProgramRefreshRate+0xe>
  {
    return HAL_BUSY;
 80051e2:	4618      	mov	r0, r3
 80051e4:	4770      	bx	lr
{
 80051e6:	b510      	push	{r4, lr}
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80051e8:	2302      	movs	r3, #2
 80051ea:	4604      	mov	r4, r0
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80051ec:	6800      	ldr	r0, [r0, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80051ee:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80051f2:	f000 ffc1 	bl	8006178 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80051f6:	2301      	movs	r3, #1
  
  return HAL_OK;   
 80051f8:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 80051fa:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;   
 80051fe:	bd10      	pop	{r4, pc}

08005200 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8005200:	2800      	cmp	r0, #0
 8005202:	f000 808d 	beq.w	8005320 <HAL_TIM_Base_Init+0x120>
{ 
 8005206:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8005208:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800520c:	4604      	mov	r4, r0
 800520e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005212:	2b00      	cmp	r3, #0
 8005214:	d077      	beq.n	8005306 <HAL_TIM_Base_Init+0x106>
  }
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8005216:	6822      	ldr	r2, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8005218:	2302      	movs	r3, #2
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800521a:	4943      	ldr	r1, [pc, #268]	; (8005328 <HAL_TIM_Base_Init+0x128>)
 800521c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State= HAL_TIM_STATE_BUSY;
 8005220:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8005224:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 8005228:	6813      	ldr	r3, [r2, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800522a:	fab1 f181 	clz	r1, r1
 800522e:	ea4f 1151 	mov.w	r1, r1, lsr #5
 8005232:	d047      	beq.n	80052c4 <HAL_TIM_Base_Init+0xc4>
 8005234:	2900      	cmp	r1, #0
 8005236:	d145      	bne.n	80052c4 <HAL_TIM_Base_Init+0xc4>
 8005238:	483c      	ldr	r0, [pc, #240]	; (800532c <HAL_TIM_Base_Init+0x12c>)
 800523a:	4282      	cmp	r2, r0
 800523c:	d068      	beq.n	8005310 <HAL_TIM_Base_Init+0x110>
 800523e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8005242:	4282      	cmp	r2, r0
 8005244:	d064      	beq.n	8005310 <HAL_TIM_Base_Init+0x110>
 8005246:	4d3a      	ldr	r5, [pc, #232]	; (8005330 <HAL_TIM_Base_Init+0x130>)
 8005248:	4e3a      	ldr	r6, [pc, #232]	; (8005334 <HAL_TIM_Base_Init+0x134>)
 800524a:	1b50      	subs	r0, r2, r5
 800524c:	42aa      	cmp	r2, r5
 800524e:	bf18      	it	ne
 8005250:	42b2      	cmpne	r2, r6
 8005252:	fab0 f080 	clz	r0, r0
 8005256:	ea4f 1050 	mov.w	r0, r0, lsr #5
 800525a:	d15f      	bne.n	800531c <HAL_TIM_Base_Init+0x11c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800525c:	4d36      	ldr	r5, [pc, #216]	; (8005338 <HAL_TIM_Base_Init+0x138>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800525e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005262:	68a6      	ldr	r6, [r4, #8]
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8005264:	42aa      	cmp	r2, r5
    tmpcr1 |= Structure->CounterMode;
 8005266:	ea43 0306 	orr.w	r3, r3, r6
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800526a:	d034      	beq.n	80052d6 <HAL_TIM_Base_Init+0xd6>
 800526c:	f5a5 6580 	sub.w	r5, r5, #1024	; 0x400
 8005270:	42aa      	cmp	r2, r5
 8005272:	d030      	beq.n	80052d6 <HAL_TIM_Base_Init+0xd6>
 8005274:	4d2f      	ldr	r5, [pc, #188]	; (8005334 <HAL_TIM_Base_Init+0x134>)
 8005276:	42aa      	cmp	r2, r5
 8005278:	bf14      	ite	ne
 800527a:	4605      	movne	r5, r0
 800527c:	f040 0501 	orreq.w	r5, r0, #1
 8005280:	bb4d      	cbnz	r5, 80052d6 <HAL_TIM_Base_Init+0xd6>
 8005282:	482e      	ldr	r0, [pc, #184]	; (800533c <HAL_TIM_Base_Init+0x13c>)
 8005284:	4e2e      	ldr	r6, [pc, #184]	; (8005340 <HAL_TIM_Base_Init+0x140>)
 8005286:	4282      	cmp	r2, r0
 8005288:	bf18      	it	ne
 800528a:	42b2      	cmpne	r2, r6
 800528c:	bf0c      	ite	eq
 800528e:	2001      	moveq	r0, #1
 8005290:	2000      	movne	r0, #0
 8005292:	d047      	beq.n	8005324 <HAL_TIM_Base_Init+0x124>
 8005294:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005298:	4d2a      	ldr	r5, [pc, #168]	; (8005344 <HAL_TIM_Base_Init+0x144>)
 800529a:	42aa      	cmp	r2, r5
 800529c:	bf18      	it	ne
 800529e:	42b2      	cmpne	r2, r6
 80052a0:	d019      	beq.n	80052d6 <HAL_TIM_Base_Init+0xd6>
 80052a2:	4829      	ldr	r0, [pc, #164]	; (8005348 <HAL_TIM_Base_Init+0x148>)
 80052a4:	4282      	cmp	r2, r0
 80052a6:	d03d      	beq.n	8005324 <HAL_TIM_Base_Init+0x124>
 80052a8:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80052ac:	4282      	cmp	r2, r0
 80052ae:	d039      	beq.n	8005324 <HAL_TIM_Base_Init+0x124>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052b0:	69a1      	ldr	r1, [r4, #24]
 80052b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052b6:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052b8:	430b      	orrs	r3, r1
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80052ba:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80052bc:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052be:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80052c0:	6291      	str	r1, [r2, #40]	; 0x28
 80052c2:	e017      	b.n	80052f4 <HAL_TIM_Base_Init+0xf4>
 80052c4:	481a      	ldr	r0, [pc, #104]	; (8005330 <HAL_TIM_Base_Init+0x130>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80052ca:	68a5      	ldr	r5, [r4, #8]
 80052cc:	1a10      	subs	r0, r2, r0
 80052ce:	432b      	orrs	r3, r5
 80052d0:	fab0 f080 	clz	r0, r0
 80052d4:	0940      	lsrs	r0, r0, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052d6:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80052d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052dc:	69a5      	ldr	r5, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052de:	4333      	orrs	r3, r6
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052e0:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80052e2:	6866      	ldr	r6, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052e8:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80052ea:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052ec:	62d7      	str	r7, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80052ee:	6296      	str	r6, [r2, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80052f0:	b931      	cbnz	r1, 8005300 <HAL_TIM_Base_Init+0x100>
 80052f2:	b928      	cbnz	r0, 8005300 <HAL_TIM_Base_Init+0x100>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052f4:	2301      	movs	r3, #1
  return HAL_OK;
 80052f6:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 80052f8:	6153      	str	r3, [r2, #20]
  htim->State= HAL_TIM_STATE_READY;
 80052fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80052fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIMx->RCR = Structure->RepetitionCounter;
 8005300:	6963      	ldr	r3, [r4, #20]
 8005302:	6313      	str	r3, [r2, #48]	; 0x30
 8005304:	e7f6      	b.n	80052f4 <HAL_TIM_Base_Init+0xf4>
    htim->Lock = HAL_UNLOCKED;
 8005306:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800530a:	f7fc f9af 	bl	800166c <HAL_TIM_Base_MspInit>
 800530e:	e782      	b.n	8005216 <HAL_TIM_Base_Init+0x16>
 8005310:	4807      	ldr	r0, [pc, #28]	; (8005330 <HAL_TIM_Base_Init+0x130>)
 8005312:	1a10      	subs	r0, r2, r0
 8005314:	fab0 f080 	clz	r0, r0
 8005318:	0940      	lsrs	r0, r0, #5
 800531a:	e79f      	b.n	800525c <HAL_TIM_Base_Init+0x5c>
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800531c:	4608      	mov	r0, r1
 800531e:	e7a9      	b.n	8005274 <HAL_TIM_Base_Init+0x74>
    return HAL_ERROR;
 8005320:	2001      	movs	r0, #1
 8005322:	4770      	bx	lr
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8005324:	2000      	movs	r0, #0
 8005326:	e7d6      	b.n	80052d6 <HAL_TIM_Base_Init+0xd6>
 8005328:	40010000 	.word	0x40010000
 800532c:	40000400 	.word	0x40000400
 8005330:	40010400 	.word	0x40010400
 8005334:	40000c00 	.word	0x40000c00
 8005338:	40000800 	.word	0x40000800
 800533c:	40014400 	.word	0x40014400
 8005340:	40014000 	.word	0x40014000
 8005344:	40001800 	.word	0x40001800
 8005348:	40001c00 	.word	0x40001c00

0800534c <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800534c:	6803      	ldr	r3, [r0, #0]
}
 800534e:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005350:	68da      	ldr	r2, [r3, #12]
 8005352:	f042 0201 	orr.w	r2, r2, #1
 8005356:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	f042 0201 	orr.w	r2, r2, #1
 800535e:	601a      	str	r2, [r3, #0]
}
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop

08005364 <HAL_TIM_PWM_Init>:
  if(htim == NULL)
 8005364:	2800      	cmp	r0, #0
 8005366:	f000 808d 	beq.w	8005484 <HAL_TIM_PWM_Init+0x120>
{
 800536a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 800536c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005370:	4604      	mov	r4, r0
 8005372:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005376:	2b00      	cmp	r3, #0
 8005378:	d077      	beq.n	800546a <HAL_TIM_PWM_Init+0x106>
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800537a:	6822      	ldr	r2, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;  
 800537c:	2302      	movs	r3, #2
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800537e:	4943      	ldr	r1, [pc, #268]	; (800548c <HAL_TIM_PWM_Init+0x128>)
 8005380:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State= HAL_TIM_STATE_BUSY;  
 8005384:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8005388:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 800538c:	6813      	ldr	r3, [r2, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800538e:	fab1 f181 	clz	r1, r1
 8005392:	ea4f 1151 	mov.w	r1, r1, lsr #5
 8005396:	d047      	beq.n	8005428 <HAL_TIM_PWM_Init+0xc4>
 8005398:	2900      	cmp	r1, #0
 800539a:	d145      	bne.n	8005428 <HAL_TIM_PWM_Init+0xc4>
 800539c:	483c      	ldr	r0, [pc, #240]	; (8005490 <HAL_TIM_PWM_Init+0x12c>)
 800539e:	4282      	cmp	r2, r0
 80053a0:	d068      	beq.n	8005474 <HAL_TIM_PWM_Init+0x110>
 80053a2:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80053a6:	4282      	cmp	r2, r0
 80053a8:	d064      	beq.n	8005474 <HAL_TIM_PWM_Init+0x110>
 80053aa:	4d3a      	ldr	r5, [pc, #232]	; (8005494 <HAL_TIM_PWM_Init+0x130>)
 80053ac:	4e3a      	ldr	r6, [pc, #232]	; (8005498 <HAL_TIM_PWM_Init+0x134>)
 80053ae:	1b50      	subs	r0, r2, r5
 80053b0:	42aa      	cmp	r2, r5
 80053b2:	bf18      	it	ne
 80053b4:	42b2      	cmpne	r2, r6
 80053b6:	fab0 f080 	clz	r0, r0
 80053ba:	ea4f 1050 	mov.w	r0, r0, lsr #5
 80053be:	d15f      	bne.n	8005480 <HAL_TIM_PWM_Init+0x11c>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80053c0:	4d36      	ldr	r5, [pc, #216]	; (800549c <HAL_TIM_PWM_Init+0x138>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80053c6:	68a6      	ldr	r6, [r4, #8]
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80053c8:	42aa      	cmp	r2, r5
    tmpcr1 |= Structure->CounterMode;
 80053ca:	ea43 0306 	orr.w	r3, r3, r6
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80053ce:	d034      	beq.n	800543a <HAL_TIM_PWM_Init+0xd6>
 80053d0:	f5a5 6580 	sub.w	r5, r5, #1024	; 0x400
 80053d4:	42aa      	cmp	r2, r5
 80053d6:	d030      	beq.n	800543a <HAL_TIM_PWM_Init+0xd6>
 80053d8:	4d2f      	ldr	r5, [pc, #188]	; (8005498 <HAL_TIM_PWM_Init+0x134>)
 80053da:	42aa      	cmp	r2, r5
 80053dc:	bf14      	ite	ne
 80053de:	4605      	movne	r5, r0
 80053e0:	f040 0501 	orreq.w	r5, r0, #1
 80053e4:	bb4d      	cbnz	r5, 800543a <HAL_TIM_PWM_Init+0xd6>
 80053e6:	482e      	ldr	r0, [pc, #184]	; (80054a0 <HAL_TIM_PWM_Init+0x13c>)
 80053e8:	4e2e      	ldr	r6, [pc, #184]	; (80054a4 <HAL_TIM_PWM_Init+0x140>)
 80053ea:	4282      	cmp	r2, r0
 80053ec:	bf18      	it	ne
 80053ee:	42b2      	cmpne	r2, r6
 80053f0:	bf0c      	ite	eq
 80053f2:	2001      	moveq	r0, #1
 80053f4:	2000      	movne	r0, #0
 80053f6:	d047      	beq.n	8005488 <HAL_TIM_PWM_Init+0x124>
 80053f8:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80053fc:	4d2a      	ldr	r5, [pc, #168]	; (80054a8 <HAL_TIM_PWM_Init+0x144>)
 80053fe:	42aa      	cmp	r2, r5
 8005400:	bf18      	it	ne
 8005402:	42b2      	cmpne	r2, r6
 8005404:	d019      	beq.n	800543a <HAL_TIM_PWM_Init+0xd6>
 8005406:	4829      	ldr	r0, [pc, #164]	; (80054ac <HAL_TIM_PWM_Init+0x148>)
 8005408:	4282      	cmp	r2, r0
 800540a:	d03d      	beq.n	8005488 <HAL_TIM_PWM_Init+0x124>
 800540c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8005410:	4282      	cmp	r2, r0
 8005412:	d039      	beq.n	8005488 <HAL_TIM_PWM_Init+0x124>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005414:	69a1      	ldr	r1, [r4, #24]
 8005416:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800541a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800541c:	430b      	orrs	r3, r1
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800541e:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005420:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005422:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8005424:	6291      	str	r1, [r2, #40]	; 0x28
 8005426:	e017      	b.n	8005458 <HAL_TIM_PWM_Init+0xf4>
 8005428:	481a      	ldr	r0, [pc, #104]	; (8005494 <HAL_TIM_PWM_Init+0x130>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800542a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800542e:	68a5      	ldr	r5, [r4, #8]
 8005430:	1a10      	subs	r0, r2, r0
 8005432:	432b      	orrs	r3, r5
 8005434:	fab0 f080 	clz	r0, r0
 8005438:	0940      	lsrs	r0, r0, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800543a:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800543c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005440:	69a5      	ldr	r5, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005442:	4333      	orrs	r3, r6
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005444:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8005446:	6866      	ldr	r6, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005448:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800544c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800544e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005450:	62d7      	str	r7, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8005452:	6296      	str	r6, [r2, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8005454:	b931      	cbnz	r1, 8005464 <HAL_TIM_PWM_Init+0x100>
 8005456:	b928      	cbnz	r0, 8005464 <HAL_TIM_PWM_Init+0x100>
  TIMx->EGR = TIM_EGR_UG;
 8005458:	2301      	movs	r3, #1
  return HAL_OK;
 800545a:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 800545c:	6153      	str	r3, [r2, #20]
  htim->State= HAL_TIM_STATE_READY;
 800545e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIMx->RCR = Structure->RepetitionCounter;
 8005464:	6963      	ldr	r3, [r4, #20]
 8005466:	6313      	str	r3, [r2, #48]	; 0x30
 8005468:	e7f6      	b.n	8005458 <HAL_TIM_PWM_Init+0xf4>
    htim->Lock = HAL_UNLOCKED;
 800546a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800546e:	f7fc f955 	bl	800171c <HAL_TIM_PWM_MspInit>
 8005472:	e782      	b.n	800537a <HAL_TIM_PWM_Init+0x16>
 8005474:	4807      	ldr	r0, [pc, #28]	; (8005494 <HAL_TIM_PWM_Init+0x130>)
 8005476:	1a10      	subs	r0, r2, r0
 8005478:	fab0 f080 	clz	r0, r0
 800547c:	0940      	lsrs	r0, r0, #5
 800547e:	e79f      	b.n	80053c0 <HAL_TIM_PWM_Init+0x5c>
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8005480:	4608      	mov	r0, r1
 8005482:	e7a9      	b.n	80053d8 <HAL_TIM_PWM_Init+0x74>
    return HAL_ERROR;
 8005484:	2001      	movs	r0, #1
 8005486:	4770      	bx	lr
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8005488:	2000      	movs	r0, #0
 800548a:	e7d6      	b.n	800543a <HAL_TIM_PWM_Init+0xd6>
 800548c:	40010000 	.word	0x40010000
 8005490:	40000400 	.word	0x40000400
 8005494:	40010400 	.word	0x40010400
 8005498:	40000c00 	.word	0x40000c00
 800549c:	40000800 	.word	0x40000800
 80054a0:	40014400 	.word	0x40014400
 80054a4:	40014000 	.word	0x40014000
 80054a8:	40001800 	.word	0x40001800
 80054ac:	40001c00 	.word	0x40001c00

080054b0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80054b0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d03f      	beq.n	8005538 <HAL_TIM_ConfigClockSource+0x88>
  tmpsmcr = htim->Instance->SMCR;
 80054b8:	6803      	ldr	r3, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054ba:	4a5e      	ldr	r2, [pc, #376]	; (8005634 <HAL_TIM_ConfigClockSource+0x184>)
{
 80054bc:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 80054be:	2402      	movs	r4, #2
  __HAL_LOCK(htim);
 80054c0:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80054c2:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  switch (sClockSourceConfig->ClockSource)
 80054c6:	680c      	ldr	r4, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 80054c8:	689e      	ldr	r6, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80054ca:	2c40      	cmp	r4, #64	; 0x40
  __HAL_LOCK(htim);
 80054cc:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054d0:	ea02 0206 	and.w	r2, r2, r6
  htim->Instance->SMCR = tmpsmcr;
 80054d4:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80054d6:	d076      	beq.n	80055c6 <HAL_TIM_ConfigClockSource+0x116>
 80054d8:	d918      	bls.n	800550c <HAL_TIM_ConfigClockSource+0x5c>
 80054da:	2c70      	cmp	r4, #112	; 0x70
 80054dc:	d061      	beq.n	80055a2 <HAL_TIM_ConfigClockSource+0xf2>
 80054de:	d92e      	bls.n	800553e <HAL_TIM_ConfigClockSource+0x8e>
 80054e0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80054e4:	d058      	beq.n	8005598 <HAL_TIM_ConfigClockSource+0xe8>
 80054e6:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 80054ea:	d11c      	bne.n	8005526 <HAL_TIM_ConfigClockSource+0x76>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80054ec:	688a      	ldr	r2, [r1, #8]
 80054ee:	684d      	ldr	r5, [r1, #4]
 80054f0:	68cc      	ldr	r4, [r1, #12]
 80054f2:	432a      	orrs	r2, r5
  tmpsmcr = TIMx->SMCR;
 80054f4:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80054f6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054fa:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80054fe:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005500:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005508:	609a      	str	r2, [r3, #8]
    break;
 800550a:	e00c      	b.n	8005526 <HAL_TIM_ConfigClockSource+0x76>
  switch (sClockSourceConfig->ClockSource)
 800550c:	2c10      	cmp	r4, #16
 800550e:	d033      	beq.n	8005578 <HAL_TIM_ConfigClockSource+0xc8>
 8005510:	d939      	bls.n	8005586 <HAL_TIM_ConfigClockSource+0xd6>
 8005512:	2c20      	cmp	r4, #32
 8005514:	d06f      	beq.n	80055f6 <HAL_TIM_ConfigClockSource+0x146>
 8005516:	2c30      	cmp	r4, #48	; 0x30
 8005518:	d105      	bne.n	8005526 <HAL_TIM_ConfigClockSource+0x76>
   tmpsmcr = TIMx->SMCR;
 800551a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800551c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8005520:	f042 0237 	orr.w	r2, r2, #55	; 0x37
   TIMx->SMCR = tmpsmcr;
 8005524:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 8005526:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8005528:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800552a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 800552e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8005532:	4610      	mov	r0, r2
 8005534:	bcf0      	pop	{r4, r5, r6, r7}
 8005536:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005538:	2302      	movs	r3, #2
}
 800553a:	4618      	mov	r0, r3
 800553c:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800553e:	2c50      	cmp	r4, #80	; 0x50
 8005540:	d060      	beq.n	8005604 <HAL_TIM_ConfigClockSource+0x154>
 8005542:	2c60      	cmp	r4, #96	; 0x60
 8005544:	d1ef      	bne.n	8005526 <HAL_TIM_ConfigClockSource+0x76>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005546:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8005548:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800554a:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance, 
 800554e:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005550:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005552:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8005554:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005556:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800555a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12);
 800555e:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4);
 8005562:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8005566:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8005568:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800556a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800556c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8005570:	f042 0267 	orr.w	r2, r2, #103	; 0x67
   TIMx->SMCR = tmpsmcr;
 8005574:	609a      	str	r2, [r3, #8]
 8005576:	e7d6      	b.n	8005526 <HAL_TIM_ConfigClockSource+0x76>
   tmpsmcr = TIMx->SMCR;
 8005578:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800557a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800557e:	f042 0217 	orr.w	r2, r2, #23
   TIMx->SMCR = tmpsmcr;
 8005582:	609a      	str	r2, [r3, #8]
 8005584:	e7cf      	b.n	8005526 <HAL_TIM_ConfigClockSource+0x76>
  switch (sClockSourceConfig->ClockSource)
 8005586:	2c00      	cmp	r4, #0
 8005588:	d1cd      	bne.n	8005526 <HAL_TIM_ConfigClockSource+0x76>
   tmpsmcr = TIMx->SMCR;
 800558a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800558c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8005590:	f042 0207 	orr.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8005594:	609a      	str	r2, [r3, #8]
 8005596:	e7c6      	b.n	8005526 <HAL_TIM_ConfigClockSource+0x76>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005598:	6899      	ldr	r1, [r3, #8]
 800559a:	4a27      	ldr	r2, [pc, #156]	; (8005638 <HAL_TIM_ConfigClockSource+0x188>)
 800559c:	400a      	ands	r2, r1
 800559e:	609a      	str	r2, [r3, #8]
    break;
 80055a0:	e7c1      	b.n	8005526 <HAL_TIM_ConfigClockSource+0x76>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80055a2:	684c      	ldr	r4, [r1, #4]
 80055a4:	688a      	ldr	r2, [r1, #8]
 80055a6:	68cd      	ldr	r5, [r1, #12]
 80055a8:	4322      	orrs	r2, r4
  tmpsmcr = TIMx->SMCR;
 80055aa:	689c      	ldr	r4, [r3, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055ac:	4923      	ldr	r1, [pc, #140]	; (800563c <HAL_TIM_ConfigClockSource+0x18c>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80055ae:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055b2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80055b6:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 80055b8:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 80055ba:	689a      	ldr	r2, [r3, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055bc:	4011      	ands	r1, r2
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055be:	f041 0177 	orr.w	r1, r1, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80055c2:	6099      	str	r1, [r3, #8]
    break;
 80055c4:	e7af      	b.n	8005526 <HAL_TIM_ConfigClockSource+0x76>
  tmpccer = TIMx->CCER;
 80055c6:	6a1e      	ldr	r6, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055c8:	6a1d      	ldr	r5, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80055ca:	684c      	ldr	r4, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055cc:	f026 060a 	bic.w	r6, r6, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055d0:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80055d4:	68cf      	ldr	r7, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 80055d6:	4334      	orrs	r4, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055d8:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80055da:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055dc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 80055e0:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80055e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055e6:	621c      	str	r4, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80055e8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80055ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80055ee:	f042 0247 	orr.w	r2, r2, #71	; 0x47
   TIMx->SMCR = tmpsmcr;
 80055f2:	609a      	str	r2, [r3, #8]
 80055f4:	e797      	b.n	8005526 <HAL_TIM_ConfigClockSource+0x76>
   tmpsmcr = TIMx->SMCR;
 80055f6:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80055f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80055fc:	f042 0227 	orr.w	r2, r2, #39	; 0x27
   TIMx->SMCR = tmpsmcr;
 8005600:	609a      	str	r2, [r3, #8]
 8005602:	e790      	b.n	8005526 <HAL_TIM_ConfigClockSource+0x76>
  tmpccer = TIMx->CCER;
 8005604:	6a1e      	ldr	r6, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005606:	6a1d      	ldr	r5, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8005608:	684c      	ldr	r4, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800560a:	f026 060a 	bic.w	r6, r6, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800560e:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8005612:	68cf      	ldr	r7, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 8005614:	4334      	orrs	r4, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005616:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8005618:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800561a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 800561e:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005622:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005624:	621c      	str	r4, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8005626:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8005628:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800562c:	f042 0257 	orr.w	r2, r2, #87	; 0x57
   TIMx->SMCR = tmpsmcr;
 8005630:	609a      	str	r2, [r3, #8]
 8005632:	e778      	b.n	8005526 <HAL_TIM_ConfigClockSource+0x76>
 8005634:	fffe0088 	.word	0xfffe0088
 8005638:	fffefff8 	.word	0xfffefff8
 800563c:	fffeff88 	.word	0xfffeff88

08005640 <HAL_TIM_OC_DelayElapsedCallback>:
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop

08005644 <HAL_TIM_IC_CaptureCallback>:
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop

08005648 <HAL_TIM_PWM_PulseFinishedCallback>:
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop

0800564c <HAL_TIM_TriggerCallback>:
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop

08005650 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005650:	6803      	ldr	r3, [r0, #0]
 8005652:	691a      	ldr	r2, [r3, #16]
 8005654:	0791      	lsls	r1, r2, #30
{
 8005656:	b510      	push	{r4, lr}
 8005658:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800565a:	d502      	bpl.n	8005662 <HAL_TIM_IRQHandler+0x12>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800565c:	68da      	ldr	r2, [r3, #12]
 800565e:	0792      	lsls	r2, r2, #30
 8005660:	d465      	bmi.n	800572e <HAL_TIM_IRQHandler+0xde>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005662:	691a      	ldr	r2, [r3, #16]
 8005664:	0752      	lsls	r2, r2, #29
 8005666:	d502      	bpl.n	800566e <HAL_TIM_IRQHandler+0x1e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8005668:	68da      	ldr	r2, [r3, #12]
 800566a:	0750      	lsls	r0, r2, #29
 800566c:	d44c      	bmi.n	8005708 <HAL_TIM_IRQHandler+0xb8>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800566e:	691a      	ldr	r2, [r3, #16]
 8005670:	0711      	lsls	r1, r2, #28
 8005672:	d502      	bpl.n	800567a <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8005674:	68da      	ldr	r2, [r3, #12]
 8005676:	0712      	lsls	r2, r2, #28
 8005678:	d434      	bmi.n	80056e4 <HAL_TIM_IRQHandler+0x94>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800567a:	691a      	ldr	r2, [r3, #16]
 800567c:	06d0      	lsls	r0, r2, #27
 800567e:	d502      	bpl.n	8005686 <HAL_TIM_IRQHandler+0x36>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8005680:	68da      	ldr	r2, [r3, #12]
 8005682:	06d1      	lsls	r1, r2, #27
 8005684:	d41e      	bmi.n	80056c4 <HAL_TIM_IRQHandler+0x74>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005686:	691a      	ldr	r2, [r3, #16]
 8005688:	07d2      	lsls	r2, r2, #31
 800568a:	d502      	bpl.n	8005692 <HAL_TIM_IRQHandler+0x42>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800568c:	68da      	ldr	r2, [r3, #12]
 800568e:	07d0      	lsls	r0, r2, #31
 8005690:	d46b      	bmi.n	800576a <HAL_TIM_IRQHandler+0x11a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005692:	691a      	ldr	r2, [r3, #16]
 8005694:	0611      	lsls	r1, r2, #24
 8005696:	d502      	bpl.n	800569e <HAL_TIM_IRQHandler+0x4e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8005698:	68da      	ldr	r2, [r3, #12]
 800569a:	0612      	lsls	r2, r2, #24
 800569c:	d46d      	bmi.n	800577a <HAL_TIM_IRQHandler+0x12a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800569e:	691a      	ldr	r2, [r3, #16]
 80056a0:	05d0      	lsls	r0, r2, #23
 80056a2:	d502      	bpl.n	80056aa <HAL_TIM_IRQHandler+0x5a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80056a4:	68da      	ldr	r2, [r3, #12]
 80056a6:	0611      	lsls	r1, r2, #24
 80056a8:	d46f      	bmi.n	800578a <HAL_TIM_IRQHandler+0x13a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056aa:	691a      	ldr	r2, [r3, #16]
 80056ac:	0652      	lsls	r2, r2, #25
 80056ae:	d502      	bpl.n	80056b6 <HAL_TIM_IRQHandler+0x66>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80056b0:	68da      	ldr	r2, [r3, #12]
 80056b2:	0650      	lsls	r0, r2, #25
 80056b4:	d451      	bmi.n	800575a <HAL_TIM_IRQHandler+0x10a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056b6:	691a      	ldr	r2, [r3, #16]
 80056b8:	0691      	lsls	r1, r2, #26
 80056ba:	d502      	bpl.n	80056c2 <HAL_TIM_IRQHandler+0x72>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80056bc:	68da      	ldr	r2, [r3, #12]
 80056be:	0692      	lsls	r2, r2, #26
 80056c0:	d443      	bmi.n	800574a <HAL_TIM_IRQHandler+0xfa>
 80056c2:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056c4:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056c8:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 80056ca:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056cc:	6119      	str	r1, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80056ce:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056d0:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80056d2:	f413 7f40 	tst.w	r3, #768	; 0x300
 80056d6:	d06c      	beq.n	80057b2 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_IC_CaptureCallback(htim);
 80056d8:	f7ff ffb4 	bl	8005644 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056dc:	2200      	movs	r2, #0
 80056de:	6823      	ldr	r3, [r4, #0]
 80056e0:	7722      	strb	r2, [r4, #28]
 80056e2:	e7d0      	b.n	8005686 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056e4:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056e8:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 80056ea:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056ec:	6119      	str	r1, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 80056ee:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056f0:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 80056f2:	079b      	lsls	r3, r3, #30
 80056f4:	d15a      	bne.n	80057ac <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056f6:	f7ff ffa3 	bl	8005640 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056fa:	4620      	mov	r0, r4
 80056fc:	f7ff ffa4 	bl	8005648 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005700:	2200      	movs	r2, #0
 8005702:	6823      	ldr	r3, [r4, #0]
 8005704:	7722      	strb	r2, [r4, #28]
 8005706:	e7b8      	b.n	800567a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005708:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800570c:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800570e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005710:	6119      	str	r1, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8005712:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005714:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8005716:	f413 7f40 	tst.w	r3, #768	; 0x300
 800571a:	d144      	bne.n	80057a6 <HAL_TIM_IRQHandler+0x156>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800571c:	f7ff ff90 	bl	8005640 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005720:	4620      	mov	r0, r4
 8005722:	f7ff ff91 	bl	8005648 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005726:	2200      	movs	r2, #0
 8005728:	6823      	ldr	r3, [r4, #0]
 800572a:	7722      	strb	r2, [r4, #28]
 800572c:	e79f      	b.n	800566e <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800572e:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005732:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005734:	6119      	str	r1, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8005736:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005738:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800573a:	0799      	lsls	r1, r3, #30
 800573c:	d02d      	beq.n	800579a <HAL_TIM_IRQHandler+0x14a>
          HAL_TIM_IC_CaptureCallback(htim);
 800573e:	f7ff ff81 	bl	8005644 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005742:	2200      	movs	r2, #0
 8005744:	6823      	ldr	r3, [r4, #0]
 8005746:	7722      	strb	r2, [r4, #28]
 8005748:	e78b      	b.n	8005662 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800574a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 800574e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005750:	611a      	str	r2, [r3, #16]
}
 8005752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8005756:	f000 b973 	b.w	8005a40 <HAL_TIMEx_CommutationCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800575a:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800575e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005760:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005762:	f7ff ff73 	bl	800564c <HAL_TIM_TriggerCallback>
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	e7a5      	b.n	80056b6 <HAL_TIM_IRQHandler+0x66>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800576a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800576e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005770:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005772:	f7fb fc8d 	bl	8001090 <HAL_TIM_PeriodElapsedCallback>
 8005776:	6823      	ldr	r3, [r4, #0]
 8005778:	e78b      	b.n	8005692 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800577a:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800577e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005780:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005782:	f000 f95f 	bl	8005a44 <HAL_TIMEx_BreakCallback>
 8005786:	6823      	ldr	r3, [r4, #0]
 8005788:	e789      	b.n	800569e <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800578a:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800578e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005790:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005792:	f000 f957 	bl	8005a44 <HAL_TIMEx_BreakCallback>
 8005796:	6823      	ldr	r3, [r4, #0]
 8005798:	e787      	b.n	80056aa <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800579a:	f7ff ff51 	bl	8005640 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800579e:	4620      	mov	r0, r4
 80057a0:	f7ff ff52 	bl	8005648 <HAL_TIM_PWM_PulseFinishedCallback>
 80057a4:	e7cd      	b.n	8005742 <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 80057a6:	f7ff ff4d 	bl	8005644 <HAL_TIM_IC_CaptureCallback>
 80057aa:	e7bc      	b.n	8005726 <HAL_TIM_IRQHandler+0xd6>
        HAL_TIM_IC_CaptureCallback(htim);
 80057ac:	f7ff ff4a 	bl	8005644 <HAL_TIM_IC_CaptureCallback>
 80057b0:	e7a6      	b.n	8005700 <HAL_TIM_IRQHandler+0xb0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057b2:	f7ff ff45 	bl	8005640 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057b6:	4620      	mov	r0, r4
 80057b8:	f7ff ff46 	bl	8005648 <HAL_TIM_PWM_PulseFinishedCallback>
 80057bc:	e78e      	b.n	80056dc <HAL_TIM_IRQHandler+0x8c>
 80057be:	bf00      	nop

080057c0 <TIM_OC1_SetConfig>:
{
 80057c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057c2:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= OC_Config->OCPolarity;
 80057c4:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057c6:	f024 0401 	bic.w	r4, r4, #1
  tmpccmrx |= OC_Config->OCMode;
 80057ca:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057cc:	4a13      	ldr	r2, [pc, #76]	; (800581c <TIM_OC1_SetConfig+0x5c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057ce:	6204      	str	r4, [r0, #32]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80057d0:	4d13      	ldr	r5, [pc, #76]	; (8005820 <TIM_OC1_SetConfig+0x60>)
  tmpccer = TIMx->CCER;
 80057d2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 80057d4:	6844      	ldr	r4, [r0, #4]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80057d6:	42a8      	cmp	r0, r5
  tmpccmrx = TIMx->CCMR1;
 80057d8:	f8d0 e018 	ldr.w	lr, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 80057dc:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057e0:	ea0e 0202 	and.w	r2, lr, r2
  tmpccer |= OC_Config->OCPolarity;
 80057e4:	ea43 0307 	orr.w	r3, r3, r7
  tmpccmrx |= OC_Config->OCMode;
 80057e8:	ea42 0206 	orr.w	r2, r2, r6
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80057ec:	d009      	beq.n	8005802 <TIM_OC1_SetConfig+0x42>
 80057ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80057f2:	42a8      	cmp	r0, r5
 80057f4:	d005      	beq.n	8005802 <TIM_OC1_SetConfig+0x42>
  TIMx->CCR1 = OC_Config->Pulse;
 80057f6:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80057f8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80057fa:	6182      	str	r2, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80057fc:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;  
 80057fe:	6203      	str	r3, [r0, #32]
 8005800:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccer &= ~TIM_CCER_CC1NP;
 8005802:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005806:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8005808:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800580a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800580e:	698e      	ldr	r6, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8005810:	433b      	orrs	r3, r7
    tmpcr2 |= OC_Config->OCNIdleState;
 8005812:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8005814:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8005818:	432c      	orrs	r4, r5
 800581a:	e7ec      	b.n	80057f6 <TIM_OC1_SetConfig+0x36>
 800581c:	fffeff8c 	.word	0xfffeff8c
 8005820:	40010000 	.word	0x40010000

08005824 <TIM_OC2_SetConfig>:
{
 8005824:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005826:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 4);
 8005828:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800582a:	f024 0410 	bic.w	r4, r4, #16
  tmpccmrx |= (OC_Config->OCMode << 8);
 800582e:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005830:	4a14      	ldr	r2, [pc, #80]	; (8005884 <TIM_OC2_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005832:	6204      	str	r4, [r0, #32]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8005834:	4d14      	ldr	r5, [pc, #80]	; (8005888 <TIM_OC2_SetConfig+0x64>)
  tmpccer = TIMx->CCER;
 8005836:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8005838:	6844      	ldr	r4, [r0, #4]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800583a:	42a8      	cmp	r0, r5
  tmpccmrx = TIMx->CCMR1;
 800583c:	f8d0 e018 	ldr.w	lr, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8005840:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005844:	ea0e 0202 	and.w	r2, lr, r2
  tmpccer |= (OC_Config->OCPolarity << 4);
 8005848:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8);
 800584c:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8005850:	d009      	beq.n	8005866 <TIM_OC2_SetConfig+0x42>
 8005852:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005856:	42a8      	cmp	r0, r5
 8005858:	d005      	beq.n	8005866 <TIM_OC2_SetConfig+0x42>
  TIMx->CCR2 = OC_Config->Pulse;
 800585a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800585c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800585e:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005860:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005862:	6203      	str	r3, [r0, #32]
 8005864:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccer &= ~TIM_CCER_CC2NP;
 8005866:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4);
 800586a:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 800586c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800586e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8005872:	698e      	ldr	r6, [r1, #24]
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8005874:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8005878:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800587a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800587e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8005882:	e7ea      	b.n	800585a <TIM_OC2_SetConfig+0x36>
 8005884:	feff8cff 	.word	0xfeff8cff
 8005888:	40010000 	.word	0x40010000

0800588c <TIM_OC3_SetConfig>:
{
 800588c:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800588e:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 8);
 8005890:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005892:	f424 7480 	bic.w	r4, r4, #256	; 0x100
  tmpccmrx |= OC_Config->OCMode;
 8005896:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8005898:	4a14      	ldr	r2, [pc, #80]	; (80058ec <TIM_OC3_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800589a:	6204      	str	r4, [r0, #32]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800589c:	4d14      	ldr	r5, [pc, #80]	; (80058f0 <TIM_OC3_SetConfig+0x64>)
  tmpccer = TIMx->CCER;
 800589e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 80058a0:	6844      	ldr	r4, [r0, #4]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80058a2:	42a8      	cmp	r0, r5
  tmpccmrx = TIMx->CCMR2;
 80058a4:	f8d0 e01c 	ldr.w	lr, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 80058a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80058ac:	ea0e 0202 	and.w	r2, lr, r2
  tmpccer |= (OC_Config->OCPolarity << 8);
 80058b0:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 80058b4:	ea42 0206 	orr.w	r2, r2, r6
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80058b8:	d009      	beq.n	80058ce <TIM_OC3_SetConfig+0x42>
 80058ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80058be:	42a8      	cmp	r0, r5
 80058c0:	d005      	beq.n	80058ce <TIM_OC3_SetConfig+0x42>
  TIMx->CCR3 = OC_Config->Pulse;
 80058c2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80058c4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80058c6:	61c2      	str	r2, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80058c8:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80058ca:	6203      	str	r3, [r0, #32]
 80058cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccer &= ~TIM_CCER_CC3NP;
 80058ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80058d2:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 80058d4:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058d6:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80058da:	698e      	ldr	r6, [r1, #24]
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80058dc:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80058e0:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80058e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80058e6:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 80058ea:	e7ea      	b.n	80058c2 <TIM_OC3_SetConfig+0x36>
 80058ec:	fffeff8c 	.word	0xfffeff8c
 80058f0:	40010000 	.word	0x40010000

080058f4 <TIM_OC4_SetConfig>:
{
 80058f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058f6:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 12);
 80058f8:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058fa:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
  tmpccmrx |= (OC_Config->OCMode << 8);
 80058fe:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005900:	4a10      	ldr	r2, [pc, #64]	; (8005944 <TIM_OC4_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005902:	6204      	str	r4, [r0, #32]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8005904:	4d10      	ldr	r5, [pc, #64]	; (8005948 <TIM_OC4_SetConfig+0x54>)
  tmpccer = TIMx->CCER;
 8005906:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8005908:	6844      	ldr	r4, [r0, #4]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800590a:	42a8      	cmp	r0, r5
  tmpccmrx = TIMx->CCMR2;
 800590c:	f8d0 e01c 	ldr.w	lr, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8005910:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005914:	ea0e 0202 	and.w	r2, lr, r2
  tmpccer |= (OC_Config->OCPolarity << 12);
 8005918:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8);
 800591c:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8005920:	d009      	beq.n	8005936 <TIM_OC4_SetConfig+0x42>
 8005922:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005926:	42a8      	cmp	r0, r5
 8005928:	d005      	beq.n	8005936 <TIM_OC4_SetConfig+0x42>
  TIMx->CCR4 = OC_Config->Pulse;
 800592a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800592c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800592e:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8005930:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8005932:	6203      	str	r3, [r0, #32]
 8005934:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005936:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 800593a:	694d      	ldr	r5, [r1, #20]
 800593c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8005940:	e7f3      	b.n	800592a <TIM_OC4_SetConfig+0x36>
 8005942:	bf00      	nop
 8005944:	feff8cff 	.word	0xfeff8cff
 8005948:	40010000 	.word	0x40010000

0800594c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800594c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005950:	2b01      	cmp	r3, #1
{
 8005952:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8005954:	d01f      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0x4a>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005956:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005958:	4d11      	ldr	r5, [pc, #68]	; (80059a0 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  tmpcr2 = htim->Instance->CR2;
 800595a:	6853      	ldr	r3, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800595c:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 800595e:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005960:	d014      	beq.n	800598c <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8005962:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005966:	42aa      	cmp	r2, r5
 8005968:	d010      	beq.n	800598c <HAL_TIMEx_MasterConfigSynchronization+0x40>
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800596a:	680d      	ldr	r5, [r1, #0]
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 800596c:	2600      	movs	r6, #0
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800596e:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005970:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 &= ~TIM_CR2_MMS;
 8005974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005978:	4321      	orrs	r1, r4
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800597a:	432b      	orrs	r3, r5
  
  return HAL_OK;
 800597c:	4635      	mov	r5, r6
  htim->Instance->CR2 = tmpcr2;
 800597e:	6053      	str	r3, [r2, #4]
  htim->Instance->SMCR = tmpsmcr;
 8005980:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8005982:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
} 
 8005986:	4628      	mov	r0, r5
 8005988:	bc70      	pop	{r4, r5, r6}
 800598a:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 800598c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005990:	684d      	ldr	r5, [r1, #4]
 8005992:	432b      	orrs	r3, r5
 8005994:	e7e9      	b.n	800596a <HAL_TIMEx_MasterConfigSynchronization+0x1e>
  __HAL_LOCK(htim);
 8005996:	2502      	movs	r5, #2
} 
 8005998:	4628      	mov	r0, r5
 800599a:	bc70      	pop	{r4, r5, r6}
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	40010000 	.word	0x40010000

080059a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
  assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80059a4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d041      	beq.n	8005a30 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80059ac:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80059ae:	684a      	ldr	r2, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80059b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
{
 80059b4:	b4f0      	push	{r4, r5, r6, r7}
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80059b6:	688c      	ldr	r4, [r1, #8]
{
 80059b8:	b082      	sub	sp, #8
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80059ba:	680f      	ldr	r7, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80059bc:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80059be:	694e      	ldr	r6, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80059c0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80059c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
  
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80059c6:	6805      	ldr	r5, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80059c8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 80059ca:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80059cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 80059d0:	9201      	str	r2, [sp, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80059d2:	690a      	ldr	r2, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80059d4:	433b      	orrs	r3, r7
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80059d6:	4f18      	ldr	r7, [pc, #96]	; (8005a38 <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80059d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80059dc:	42bd      	cmp	r5, r7
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80059de:	ea43 0302 	orr.w	r3, r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 80059e2:	9a01      	ldr	r2, [sp, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80059e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059e8:	ea43 0306 	orr.w	r3, r3, r6
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80059ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80059f0:	ea43 0304 	orr.w	r3, r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 80059f4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80059f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80059fc:	d00a      	beq.n	8005a14 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
 80059fe:	4a0f      	ldr	r2, [pc, #60]	; (8005a3c <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8005a00:	4295      	cmp	r5, r2
 8005a02:	d007      	beq.n	8005a14 <HAL_TIMEx_ConfigBreakDeadTime+0x70>

  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
  
  __HAL_UNLOCK(htim);
 8005a04:	2200      	movs	r2, #0
  htim->Instance->BDTR = tmpbdtr;
 8005a06:	646b      	str	r3, [r5, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8005a08:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  
  return HAL_OK;
}
 8005a0c:	4610      	mov	r0, r2
 8005a0e:	b002      	add	sp, #8
 8005a10:	bcf0      	pop	{r4, r5, r6, r7}
 8005a12:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8005a14:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8005a16:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005a1a:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8005a1c:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005a20:	6a0a      	ldr	r2, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005a22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a26:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005a28:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	e7e9      	b.n	8005a04 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
  __HAL_LOCK(htim);
 8005a30:	2302      	movs	r3, #2
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	40010000 	.word	0x40010000
 8005a3c:	40010400 	.word	0x40010400

08005a40 <HAL_TIMEx_CommutationCallback>:
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop

08005a44 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop

08005a48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 8005a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8005a4a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d030      	beq.n	8005ab4 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8005a52:	460d      	mov	r5, r1
  
  htim->State = HAL_TIM_STATE_BUSY;
 8005a54:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8005a56:	2101      	movs	r1, #1
 8005a58:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8005a5a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8005a5e:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
    
  switch (Channel)
 8005a62:	2a14      	cmp	r2, #20
 8005a64:	d81e      	bhi.n	8005aa4 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8005a66:	e8df f002 	tbb	[pc, r2]
 8005a6a:	1d56      	.short	0x1d56
 8005a6c:	1d681d1d 	.word	0x1d681d1d
 8005a70:	1d7b1d1d 	.word	0x1d7b1d1d
 8005a74:	1d0b1d1d 	.word	0x1d0b1d1d
 8005a78:	1d8d1d1d 	.word	0x1d8d1d1d
 8005a7c:	1d1d      	.short	0x1d1d
 8005a7e:	27          	.byte	0x27
 8005a7f:	00          	.byte	0x00
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a80:	4629      	mov	r1, r5
 8005a82:	6800      	ldr	r0, [r0, #0]
 8005a84:	f7ff ff36 	bl	80058f4 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a88:	6823      	ldr	r3, [r4, #0]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8005a8a:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a8c:	69d9      	ldr	r1, [r3, #28]
 8005a8e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005a92:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a94:	69d9      	ldr	r1, [r3, #28]
 8005a96:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005a9a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8005a9c:	69da      	ldr	r2, [r3, #28]
 8005a9e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8005aa2:	61da      	str	r2, [r3, #28]
    break;    
  }
  
  htim->State = HAL_TIM_STATE_READY;
    
  __HAL_UNLOCK(htim);
 8005aa4:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8005aa6:	2201      	movs	r2, #1
  
  return HAL_OK;
 8005aa8:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8005aaa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005aae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return HAL_OK;
 8005ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8005ab4:	2002      	movs	r0, #2
}
 8005ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ab8:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8005aba:	68ae      	ldr	r6, [r5, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005abc:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8);
 8005abe:	682f      	ldr	r7, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ac0:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ac4:	494c      	ldr	r1, [pc, #304]	; (8005bf8 <HAL_TIM_PWM_ConfigChannel+0x1b0>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ac6:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8005ac8:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2; 
 8005aca:	6858      	ldr	r0, [r3, #4]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005acc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx = TIMx->CCMR3;
 8005ad0:	f8d3 e054 	ldr.w	lr, [r3, #84]	; 0x54
  tmpccer |= (OC_Config->OCPolarity << 20);
 8005ad4:	ea42 5206 	orr.w	r2, r2, r6, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005ad8:	4e48      	ldr	r6, [pc, #288]	; (8005bfc <HAL_TIM_PWM_ConfigChannel+0x1b4>)
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ada:	ea0e 0101 	and.w	r1, lr, r1
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005ade:	42b3      	cmp	r3, r6
  tmpccmrx |= (OC_Config->OCMode << 8);
 8005ae0:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005ae4:	f000 8081 	beq.w	8005bea <HAL_TIM_PWM_ConfigChannel+0x1a2>
 8005ae8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005aec:	42b3      	cmp	r3, r6
 8005aee:	d07c      	beq.n	8005bea <HAL_TIM_PWM_ConfigChannel+0x1a2>
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005af0:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8005af2:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005af4:	6559      	str	r1, [r3, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8005af6:	65de      	str	r6, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8005af8:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005afa:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8005afc:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005afe:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005b02:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005b04:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005b06:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005b0a:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8005b0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b0e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8005b12:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 8005b14:	e7c6      	b.n	8005aa4 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b16:	4629      	mov	r1, r5
 8005b18:	6800      	ldr	r0, [r0, #0]
 8005b1a:	f7ff fe51 	bl	80057c0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b1e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b20:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b22:	6999      	ldr	r1, [r3, #24]
 8005b24:	f041 0108 	orr.w	r1, r1, #8
 8005b28:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b2a:	6999      	ldr	r1, [r3, #24]
 8005b2c:	f021 0104 	bic.w	r1, r1, #4
 8005b30:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b32:	699a      	ldr	r2, [r3, #24]
 8005b34:	4302      	orrs	r2, r0
 8005b36:	619a      	str	r2, [r3, #24]
    break;
 8005b38:	e7b4      	b.n	8005aa4 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b3a:	4629      	mov	r1, r5
 8005b3c:	6800      	ldr	r0, [r0, #0]
 8005b3e:	f7ff fe71 	bl	8005824 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b42:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8005b44:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b46:	6999      	ldr	r1, [r3, #24]
 8005b48:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005b4c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b4e:	6999      	ldr	r1, [r3, #24]
 8005b50:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005b54:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8005b56:	699a      	ldr	r2, [r3, #24]
 8005b58:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8005b5c:	619a      	str	r2, [r3, #24]
    break;
 8005b5e:	e7a1      	b.n	8005aa4 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b60:	4629      	mov	r1, r5
 8005b62:	6800      	ldr	r0, [r0, #0]
 8005b64:	f7ff fe92 	bl	800588c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b68:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8005b6a:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b6c:	69d9      	ldr	r1, [r3, #28]
 8005b6e:	f041 0108 	orr.w	r1, r1, #8
 8005b72:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b74:	69d9      	ldr	r1, [r3, #28]
 8005b76:	f021 0104 	bic.w	r1, r1, #4
 8005b7a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8005b7c:	69da      	ldr	r2, [r3, #28]
 8005b7e:	4302      	orrs	r2, r0
 8005b80:	61da      	str	r2, [r3, #28]
    break;
 8005b82:	e78f      	b.n	8005aa4 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b84:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16);
 8005b86:	68ae      	ldr	r6, [r5, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b88:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8005b8a:	682f      	ldr	r7, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b8c:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b90:	491b      	ldr	r1, [pc, #108]	; (8005c00 <HAL_TIM_PWM_ConfigChannel+0x1b8>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b92:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8005b94:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2; 
 8005b96:	6858      	ldr	r0, [r3, #4]
  tmpccer &= ~TIM_CCER_CC5P;
 8005b98:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx = TIMx->CCMR3;
 8005b9c:	f8d3 e054 	ldr.w	lr, [r3, #84]	; 0x54
  tmpccer |= (OC_Config->OCPolarity << 16);
 8005ba0:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005ba4:	4e15      	ldr	r6, [pc, #84]	; (8005bfc <HAL_TIM_PWM_ConfigChannel+0x1b4>)
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ba6:	ea0e 0101 	and.w	r1, lr, r1
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005baa:	42b3      	cmp	r3, r6
  tmpccmrx |= OC_Config->OCMode;
 8005bac:	ea41 0107 	orr.w	r1, r1, r7
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005bb0:	d015      	beq.n	8005bde <HAL_TIM_PWM_ConfigChannel+0x196>
 8005bb2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005bb6:	42b3      	cmp	r3, r6
 8005bb8:	d011      	beq.n	8005bde <HAL_TIM_PWM_ConfigChannel+0x196>
  TIMx->CCR5 = OC_Config->Pulse;
 8005bba:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8005bbc:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005bbe:	6559      	str	r1, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8005bc0:	659e      	str	r6, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;  
 8005bc2:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005bc4:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8005bc6:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005bc8:	f041 0108 	orr.w	r1, r1, #8
 8005bcc:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005bce:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005bd0:	f021 0104 	bic.w	r1, r1, #4
 8005bd4:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8005bd6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bd8:	4302      	orrs	r2, r0
 8005bda:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 8005bdc:	e762      	b.n	8005aa4 <HAL_TIM_PWM_ConfigChannel+0x5c>
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005bde:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8005be2:	696e      	ldr	r6, [r5, #20]
 8005be4:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 8005be8:	e7e7      	b.n	8005bba <HAL_TIM_PWM_ConfigChannel+0x172>
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005bea:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8005bee:	696e      	ldr	r6, [r5, #20]
 8005bf0:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8005bf4:	e77c      	b.n	8005af0 <HAL_TIM_PWM_ConfigChannel+0xa8>
 8005bf6:	bf00      	nop
 8005bf8:	feff8fff 	.word	0xfeff8fff
 8005bfc:	40010000 	.word	0x40010000
 8005c00:	fffeff8f 	.word	0xfffeff8f

08005c04 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c04:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005c06:	07da      	lsls	r2, r3, #31
{
 8005c08:	b410      	push	{r4}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c0a:	d506      	bpl.n	8005c1a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c0c:	6801      	ldr	r1, [r0, #0]
 8005c0e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8005c10:	684a      	ldr	r2, [r1, #4]
 8005c12:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005c16:	4322      	orrs	r2, r4
 8005c18:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c1a:	079c      	lsls	r4, r3, #30
 8005c1c:	d506      	bpl.n	8005c2c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c1e:	6801      	ldr	r1, [r0, #0]
 8005c20:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005c22:	684a      	ldr	r2, [r1, #4]
 8005c24:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005c28:	4322      	orrs	r2, r4
 8005c2a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c2c:	0759      	lsls	r1, r3, #29
 8005c2e:	d506      	bpl.n	8005c3e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c30:	6801      	ldr	r1, [r0, #0]
 8005c32:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005c34:	684a      	ldr	r2, [r1, #4]
 8005c36:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c3a:	4322      	orrs	r2, r4
 8005c3c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c3e:	071a      	lsls	r2, r3, #28
 8005c40:	d506      	bpl.n	8005c50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c42:	6801      	ldr	r1, [r0, #0]
 8005c44:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005c46:	684a      	ldr	r2, [r1, #4]
 8005c48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c4c:	4322      	orrs	r2, r4
 8005c4e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c50:	06dc      	lsls	r4, r3, #27
 8005c52:	d506      	bpl.n	8005c62 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c54:	6801      	ldr	r1, [r0, #0]
 8005c56:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005c58:	688a      	ldr	r2, [r1, #8]
 8005c5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c5e:	4322      	orrs	r2, r4
 8005c60:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c62:	0699      	lsls	r1, r3, #26
 8005c64:	d506      	bpl.n	8005c74 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c66:	6801      	ldr	r1, [r0, #0]
 8005c68:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005c6a:	688a      	ldr	r2, [r1, #8]
 8005c6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c70:	4322      	orrs	r2, r4
 8005c72:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c74:	065a      	lsls	r2, r3, #25
 8005c76:	d50a      	bpl.n	8005c8e <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c78:	6801      	ldr	r1, [r0, #0]
 8005c7a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005c7c:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c7e:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c82:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8005c86:	ea42 0204 	orr.w	r2, r2, r4
 8005c8a:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c8c:	d00b      	beq.n	8005ca6 <UART_AdvFeatureConfig+0xa2>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c8e:	061b      	lsls	r3, r3, #24
 8005c90:	d506      	bpl.n	8005ca0 <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c92:	6802      	ldr	r2, [r0, #0]
 8005c94:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005c96:	6853      	ldr	r3, [r2, #4]
 8005c98:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005c9c:	430b      	orrs	r3, r1
 8005c9e:	6053      	str	r3, [r2, #4]
  }
}
 8005ca0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ca4:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ca6:	684a      	ldr	r2, [r1, #4]
 8005ca8:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005caa:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8005cae:	4322      	orrs	r2, r4
 8005cb0:	604a      	str	r2, [r1, #4]
 8005cb2:	e7ec      	b.n	8005c8e <UART_AdvFeatureConfig+0x8a>

08005cb4 <HAL_UART_Init>:
  if(huart == NULL)
 8005cb4:	2800      	cmp	r0, #0
 8005cb6:	f000 81bc 	beq.w	8006032 <HAL_UART_Init+0x37e>
{
 8005cba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(huart->gState == HAL_UART_STATE_RESET)
 8005cbc:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8005cc0:	4604      	mov	r4, r0
 8005cc2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d047      	beq.n	8005d5a <HAL_UART_Init+0xa6>
  __HAL_UART_DISABLE(huart);
 8005cca:	6825      	ldr	r5, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005ccc:	2224      	movs	r2, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cce:	6921      	ldr	r1, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 8005cd0:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cd4:	68a3      	ldr	r3, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8005cd6:	682a      	ldr	r2, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cd8:	430b      	orrs	r3, r1
 8005cda:	6961      	ldr	r1, [r4, #20]
  __HAL_UART_DISABLE(huart);
 8005cdc:	f022 0201 	bic.w	r2, r2, #1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005ce0:	48b8      	ldr	r0, [pc, #736]	; (8005fc4 <HAL_UART_Init+0x310>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ce2:	430b      	orrs	r3, r1
 8005ce4:	69e1      	ldr	r1, [r4, #28]
  __HAL_UART_DISABLE(huart);
 8005ce6:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005ce8:	682a      	ldr	r2, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cea:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cec:	68e7      	ldr	r7, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005cee:	4010      	ands	r0, r2
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8005cf0:	6a26      	ldr	r6, [r4, #32]
 8005cf2:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005cf4:	4303      	orrs	r3, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cf6:	48b4      	ldr	r0, [pc, #720]	; (8005fc8 <HAL_UART_Init+0x314>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8005cf8:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005cfa:	602b      	str	r3, [r5, #0]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cfc:	4285      	cmp	r5, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cfe:	686b      	ldr	r3, [r5, #4]
 8005d00:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005d04:	ea43 0307 	orr.w	r3, r3, r7
 8005d08:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8005d0a:	68ab      	ldr	r3, [r5, #8]
 8005d0c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005d10:	ea42 0203 	orr.w	r2, r2, r3
 8005d14:	60aa      	str	r2, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d16:	f000 8094 	beq.w	8005e42 <HAL_UART_Init+0x18e>
 8005d1a:	4bac      	ldr	r3, [pc, #688]	; (8005fcc <HAL_UART_Init+0x318>)
 8005d1c:	429d      	cmp	r5, r3
 8005d1e:	f000 80a4 	beq.w	8005e6a <HAL_UART_Init+0x1b6>
 8005d22:	4bab      	ldr	r3, [pc, #684]	; (8005fd0 <HAL_UART_Init+0x31c>)
 8005d24:	429d      	cmp	r5, r3
 8005d26:	f000 80a9 	beq.w	8005e7c <HAL_UART_Init+0x1c8>
 8005d2a:	4baa      	ldr	r3, [pc, #680]	; (8005fd4 <HAL_UART_Init+0x320>)
 8005d2c:	429d      	cmp	r5, r3
 8005d2e:	d019      	beq.n	8005d64 <HAL_UART_Init+0xb0>
 8005d30:	4ba9      	ldr	r3, [pc, #676]	; (8005fd8 <HAL_UART_Init+0x324>)
 8005d32:	429d      	cmp	r5, r3
 8005d34:	d027      	beq.n	8005d86 <HAL_UART_Init+0xd2>
 8005d36:	4ba9      	ldr	r3, [pc, #676]	; (8005fdc <HAL_UART_Init+0x328>)
 8005d38:	429d      	cmp	r5, r3
 8005d3a:	f000 80c8 	beq.w	8005ece <HAL_UART_Init+0x21a>
 8005d3e:	4ba8      	ldr	r3, [pc, #672]	; (8005fe0 <HAL_UART_Init+0x32c>)
 8005d40:	429d      	cmp	r5, r3
 8005d42:	f000 80b5 	beq.w	8005eb0 <HAL_UART_Init+0x1fc>
 8005d46:	4ba7      	ldr	r3, [pc, #668]	; (8005fe4 <HAL_UART_Init+0x330>)
 8005d48:	429d      	cmp	r5, r3
 8005d4a:	f000 8157 	beq.w	8005ffc <HAL_UART_Init+0x348>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d4e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005d52:	f000 8166 	beq.w	8006022 <HAL_UART_Init+0x36e>
    return HAL_ERROR;
 8005d56:	2001      	movs	r0, #1
 8005d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 8005d5a:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8005d5e:	f7fb fd85 	bl	800186c <HAL_UART_MspInit>
 8005d62:	e7b2      	b.n	8005cca <HAL_UART_Init+0x16>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d64:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8005d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d6c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005d70:	2b40      	cmp	r3, #64	; 0x40
 8005d72:	f000 80a6 	beq.w	8005ec2 <HAL_UART_Init+0x20e>
 8005d76:	d912      	bls.n	8005d9e <HAL_UART_Init+0xea>
 8005d78:	2b80      	cmp	r3, #128	; 0x80
 8005d7a:	f000 8103 	beq.w	8005f84 <HAL_UART_Init+0x2d0>
 8005d7e:	2bc0      	cmp	r3, #192	; 0xc0
 8005d80:	f000 808a 	beq.w	8005e98 <HAL_UART_Init+0x1e4>
 8005d84:	e7e3      	b.n	8005d4e <HAL_UART_Init+0x9a>
 8005d86:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 8005d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d96:	f000 8094 	beq.w	8005ec2 <HAL_UART_Init+0x20e>
 8005d9a:	f200 80e6 	bhi.w	8005f6a <HAL_UART_Init+0x2b6>
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1d5      	bne.n	8005d4e <HAL_UART_Init+0x9a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005da2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005da6:	f000 80e7 	beq.w	8005f78 <HAL_UART_Init+0x2c4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005daa:	f7fd ffbb 	bl	8003d24 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005dae:	6862      	ldr	r2, [r4, #4]
 8005db0:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8005db4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	60eb      	str	r3, [r5, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005dbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d13b      	bne.n	8005e3a <HAL_UART_Init+0x186>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dc2:	6823      	ldr	r3, [r4, #0]
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dc4:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005dcc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dce:	689a      	ldr	r2, [r3, #8]
 8005dd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005dd4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	f042 0201 	orr.w	r2, r2, #1
 8005ddc:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dde:	66e1      	str	r1, [r4, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005de0:	f7fb ff10 	bl	8001c04 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005de4:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8005de6:	4606      	mov	r6, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	0712      	lsls	r2, r2, #28
 8005dec:	d409      	bmi.n	8005e02 <HAL_UART_Init+0x14e>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8005dee:	2220      	movs	r2, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005df0:	2300      	movs	r3, #0
  huart->gState= HAL_UART_STATE_READY;
 8005df2:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69

  return HAL_OK;
 8005df6:	4618      	mov	r0, r3
  huart->RxState= HAL_UART_STATE_READY;
 8005df8:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
  __HAL_UNLOCK(huart);
 8005dfc:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8005e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8005e02:	4f79      	ldr	r7, [pc, #484]	; (8005fe8 <HAL_UART_Init+0x334>)
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e04:	69dd      	ldr	r5, [r3, #28]
 8005e06:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 8005e0a:	d1f0      	bne.n	8005dee <HAL_UART_Init+0x13a>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8005e0c:	f7fb fefa 	bl	8001c04 <HAL_GetTick>
 8005e10:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e12:	6823      	ldr	r3, [r4, #0]
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8005e14:	42b8      	cmp	r0, r7
 8005e16:	d9f5      	bls.n	8005e04 <HAL_UART_Init+0x150>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e18:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 8005e1a:	2120      	movs	r1, #32
      return HAL_TIMEOUT;
 8005e1c:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e1e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e22:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e24:	689a      	ldr	r2, [r3, #8]
 8005e26:	f022 0201 	bic.w	r2, r2, #1
 8005e2a:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8005e2c:	f884 1069 	strb.w	r1, [r4, #105]	; 0x69
        __HAL_UNLOCK(huart);
 8005e30:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
        huart->RxState = HAL_UART_STATE_READY;
 8005e34:	f884 106a 	strb.w	r1, [r4, #106]	; 0x6a
 8005e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    UART_AdvFeatureConfig(huart);
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	f7ff fee2 	bl	8005c04 <UART_AdvFeatureConfig>
 8005e40:	e7bf      	b.n	8005dc2 <HAL_UART_Init+0x10e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e42:	4b6a      	ldr	r3, [pc, #424]	; (8005fec <HAL_UART_Init+0x338>)
 8005e44:	4a6a      	ldr	r2, [pc, #424]	; (8005ff0 <HAL_UART_Init+0x33c>)
 8005e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e4a:	f003 0303 	and.w	r3, r3, #3
 8005e4e:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e50:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005e54:	d159      	bne.n	8005f0a <HAL_UART_Init+0x256>
    switch (clocksource)
 8005e56:	2b08      	cmp	r3, #8
 8005e58:	f200 80e3 	bhi.w	8006022 <HAL_UART_Init+0x36e>
 8005e5c:	e8df f003 	tbb	[pc, r3]
 8005e60:	e195748c 	.word	0xe195748c
 8005e64:	e1e1e18f 	.word	0xe1e1e18f
 8005e68:	9d          	.byte	0x9d
 8005e69:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e6a:	4a60      	ldr	r2, [pc, #384]	; (8005fec <HAL_UART_Init+0x338>)
 8005e6c:	4b60      	ldr	r3, [pc, #384]	; (8005ff0 <HAL_UART_Init+0x33c>)
 8005e6e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8005e72:	f002 020c 	and.w	r2, r2, #12
 8005e76:	4413      	add	r3, r2
 8005e78:	791b      	ldrb	r3, [r3, #4]
 8005e7a:	e7e9      	b.n	8005e50 <HAL_UART_Init+0x19c>
 8005e7c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8005e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e84:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005e88:	2b10      	cmp	r3, #16
 8005e8a:	d01a      	beq.n	8005ec2 <HAL_UART_Init+0x20e>
 8005e8c:	d987      	bls.n	8005d9e <HAL_UART_Init+0xea>
 8005e8e:	2b20      	cmp	r3, #32
 8005e90:	d078      	beq.n	8005f84 <HAL_UART_Init+0x2d0>
 8005e92:	2b30      	cmp	r3, #48	; 0x30
 8005e94:	f47f af5b 	bne.w	8005d4e <HAL_UART_Init+0x9a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e98:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005e9c:	d07d      	beq.n	8005f9a <HAL_UART_Init+0x2e6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005e9e:	6862      	ldr	r2, [r4, #4]
 8005ea0:	0853      	lsrs	r3, r2, #1
 8005ea2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005ea6:	fbb3 f3f2 	udiv	r3, r3, r2
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	60eb      	str	r3, [r5, #12]
 8005eae:	e785      	b.n	8005dbc <HAL_UART_Init+0x108>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005eb0:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8005eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005ebc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ec0:	d116      	bne.n	8005ef0 <HAL_UART_Init+0x23c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ec2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005ec6:	d05a      	beq.n	8005f7e <HAL_UART_Init+0x2ca>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005ec8:	f7fd fef8 	bl	8003cbc <HAL_RCC_GetSysClockFreq>
 8005ecc:	e76f      	b.n	8005dae <HAL_UART_Init+0xfa>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ece:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 8005ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ed6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ede:	d0f0      	beq.n	8005ec2 <HAL_UART_Init+0x20e>
 8005ee0:	d92c      	bls.n	8005f3c <HAL_UART_Init+0x288>
 8005ee2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ee6:	d04d      	beq.n	8005f84 <HAL_UART_Init+0x2d0>
 8005ee8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005eec:	d0d4      	beq.n	8005e98 <HAL_UART_Init+0x1e4>
 8005eee:	e72e      	b.n	8005d4e <HAL_UART_Init+0x9a>
 8005ef0:	f240 809b 	bls.w	800602a <HAL_UART_Init+0x376>
 8005ef4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ef8:	d044      	beq.n	8005f84 <HAL_UART_Init+0x2d0>
 8005efa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005efe:	d0cb      	beq.n	8005e98 <HAL_UART_Init+0x1e4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f00:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005f04:	f000 808d 	beq.w	8006022 <HAL_UART_Init+0x36e>
 8005f08:	2310      	movs	r3, #16
    switch (clocksource)
 8005f0a:	2b08      	cmp	r3, #8
 8005f0c:	f63f af23 	bhi.w	8005d56 <HAL_UART_Init+0xa2>
 8005f10:	a201      	add	r2, pc, #4	; (adr r2, 8005f18 <HAL_UART_Init+0x264>)
 8005f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f16:	bf00      	nop
 8005f18:	08005dab 	.word	0x08005dab
 8005f1c:	08005fab 	.word	0x08005fab
 8005f20:	08005fb1 	.word	0x08005fb1
 8005f24:	08005d57 	.word	0x08005d57
 8005f28:	08005ec9 	.word	0x08005ec9
 8005f2c:	08005d57 	.word	0x08005d57
 8005f30:	08005d57 	.word	0x08005d57
 8005f34:	08005d57 	.word	0x08005d57
 8005f38:	08005e9f 	.word	0x08005e9f
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f47f af06 	bne.w	8005d4e <HAL_UART_Init+0x9a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f42:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005f46:	d130      	bne.n	8005faa <HAL_UART_Init+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005f48:	f7fd fefc 	bl	8003d44 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005f4c:	6862      	ldr	r2, [r4, #4]
 8005f4e:	6825      	ldr	r5, [r4, #0]
 8005f50:	0853      	lsrs	r3, r2, #1
 8005f52:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8005f56:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f5a:	b29b      	uxth	r3, r3
    brrtemp = usartdiv & 0xFFF0U;
 8005f5c:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f60:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8005f64:	4313      	orrs	r3, r2
 8005f66:	60eb      	str	r3, [r5, #12]
 8005f68:	e728      	b.n	8005dbc <HAL_UART_Init+0x108>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f6e:	d009      	beq.n	8005f84 <HAL_UART_Init+0x2d0>
 8005f70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f74:	d090      	beq.n	8005e98 <HAL_UART_Init+0x1e4>
 8005f76:	e6ea      	b.n	8005d4e <HAL_UART_Init+0x9a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005f78:	f7fd fed4 	bl	8003d24 <HAL_RCC_GetPCLK1Freq>
 8005f7c:	e7e6      	b.n	8005f4c <HAL_UART_Init+0x298>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005f7e:	f7fd fe9d 	bl	8003cbc <HAL_RCC_GetSysClockFreq>
 8005f82:	e7e3      	b.n	8005f4c <HAL_UART_Init+0x298>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f84:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005f88:	d112      	bne.n	8005fb0 <HAL_UART_Init+0x2fc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005f8a:	6862      	ldr	r2, [r4, #4]
 8005f8c:	4b19      	ldr	r3, [pc, #100]	; (8005ff4 <HAL_UART_Init+0x340>)
 8005f8e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8005f92:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	e7e0      	b.n	8005f5c <HAL_UART_Init+0x2a8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005f9a:	6862      	ldr	r2, [r4, #4]
 8005f9c:	0853      	lsrs	r3, r2, #1
 8005f9e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8005fa2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	e7d8      	b.n	8005f5c <HAL_UART_Init+0x2a8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005faa:	f7fd fecb 	bl	8003d44 <HAL_RCC_GetPCLK2Freq>
 8005fae:	e6fe      	b.n	8005dae <HAL_UART_Init+0xfa>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005fb0:	6862      	ldr	r2, [r4, #4]
 8005fb2:	4b11      	ldr	r3, [pc, #68]	; (8005ff8 <HAL_UART_Init+0x344>)
 8005fb4:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8005fb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	60eb      	str	r3, [r5, #12]
 8005fc0:	e6fc      	b.n	8005dbc <HAL_UART_Init+0x108>
 8005fc2:	bf00      	nop
 8005fc4:	efff69f3 	.word	0xefff69f3
 8005fc8:	40011000 	.word	0x40011000
 8005fcc:	40004400 	.word	0x40004400
 8005fd0:	40004800 	.word	0x40004800
 8005fd4:	40004c00 	.word	0x40004c00
 8005fd8:	40005000 	.word	0x40005000
 8005fdc:	40011400 	.word	0x40011400
 8005fe0:	40007800 	.word	0x40007800
 8005fe4:	40007c00 	.word	0x40007c00
 8005fe8:	01fffffe 	.word	0x01fffffe
 8005fec:	40023800 	.word	0x40023800
 8005ff0:	0801da4c 	.word	0x0801da4c
 8005ff4:	01e84800 	.word	0x01e84800
 8005ff8:	00f42400 	.word	0x00f42400
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ffc:	f503 33de 	add.w	r3, r3, #113664	; 0x1bc00
 8006000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006004:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006008:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800600c:	f43f af59 	beq.w	8005ec2 <HAL_UART_Init+0x20e>
 8006010:	d90b      	bls.n	800602a <HAL_UART_Init+0x376>
 8006012:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006016:	d0b5      	beq.n	8005f84 <HAL_UART_Init+0x2d0>
 8006018:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800601c:	f43f af3c 	beq.w	8005e98 <HAL_UART_Init+0x1e4>
 8006020:	e76e      	b.n	8005f00 <HAL_UART_Init+0x24c>
    huart->Instance->BRR = brrtemp;
 8006022:	2300      	movs	r3, #0
    return HAL_ERROR;
 8006024:	2001      	movs	r0, #1
    huart->Instance->BRR = brrtemp;
 8006026:	60eb      	str	r3, [r5, #12]
 8006028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800602a:	2b00      	cmp	r3, #0
 800602c:	f43f aeb9 	beq.w	8005da2 <HAL_UART_Init+0xee>
 8006030:	e766      	b.n	8005f00 <HAL_UART_Init+0x24c>
    return HAL_ERROR;
 8006032:	2001      	movs	r0, #1
}
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop

08006038 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8006038:	680b      	ldr	r3, [r1, #0]
 800603a:	2b01      	cmp	r3, #1
{
 800603c:	b4f0      	push	{r4, r5, r6, r7}
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800603e:	d018      	beq.n	8006072 <FMC_SDRAM_Init+0x3a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006040:	6804      	ldr	r4, [r0, #0]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006042:	4b1a      	ldr	r3, [pc, #104]	; (80060ac <FMC_SDRAM_Init+0x74>)
 8006044:	684a      	ldr	r2, [r1, #4]
 8006046:	4023      	ands	r3, r4
 8006048:	688d      	ldr	r5, [r1, #8]
 800604a:	68cc      	ldr	r4, [r1, #12]
 800604c:	431a      	orrs	r2, r3
 800604e:	690b      	ldr	r3, [r1, #16]
 8006050:	694f      	ldr	r7, [r1, #20]
 8006052:	432a      	orrs	r2, r5
 8006054:	698e      	ldr	r6, [r1, #24]
 8006056:	69cd      	ldr	r5, [r1, #28]
 8006058:	4322      	orrs	r2, r4
 800605a:	6a0c      	ldr	r4, [r1, #32]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800605c:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800605e:	4313      	orrs	r3, r2
 8006060:	433b      	orrs	r3, r7
 8006062:	4333      	orrs	r3, r6
 8006064:	432b      	orrs	r3, r5
 8006066:	4323      	orrs	r3, r4
 8006068:	430b      	orrs	r3, r1
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 800606a:	bcf0      	pop	{r4, r5, r6, r7}
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800606c:	6003      	str	r3, [r0, #0]
}
 800606e:	2000      	movs	r0, #0
 8006070:	4770      	bx	lr
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006072:	6807      	ldr	r7, [r0, #0]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006074:	4b0d      	ldr	r3, [pc, #52]	; (80060ac <FMC_SDRAM_Init+0x74>)
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8006076:	6844      	ldr	r4, [r0, #4]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8006078:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 800607c:	684a      	ldr	r2, [r1, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800607e:	4023      	ands	r3, r4
 8006080:	688e      	ldr	r6, [r1, #8]
 8006082:	68cd      	ldr	r5, [r1, #12]
 8006084:	4313      	orrs	r3, r2
 8006086:	690c      	ldr	r4, [r1, #16]
 8006088:	69ca      	ldr	r2, [r1, #28]
 800608a:	4333      	orrs	r3, r6
 800608c:	6a0e      	ldr	r6, [r1, #32]
 800608e:	433a      	orrs	r2, r7
 8006090:	432b      	orrs	r3, r5
 8006092:	694d      	ldr	r5, [r1, #20]
 8006094:	4332      	orrs	r2, r6
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006096:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8006098:	4323      	orrs	r3, r4
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800609a:	6989      	ldr	r1, [r1, #24]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800609c:	4332      	orrs	r2, r6
 800609e:	432b      	orrs	r3, r5
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80060a0:	6002      	str	r2, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80060a2:	430b      	orrs	r3, r1
}
 80060a4:	bcf0      	pop	{r4, r5, r6, r7}
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80060a6:	6043      	str	r3, [r0, #4]
}
 80060a8:	2000      	movs	r0, #0
 80060aa:	4770      	bx	lr
 80060ac:	ffff8000 	.word	0xffff8000

080060b0 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80060b0:	2a01      	cmp	r2, #1
{
 80060b2:	b4f0      	push	{r4, r5, r6, r7}
  if (Bank != FMC_SDRAM_BANK2) 
 80060b4:	d021      	beq.n	80060fa <FMC_SDRAM_Timing_Init+0x4a>
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80060b6:	684b      	ldr	r3, [r1, #4]
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80060b8:	6882      	ldr	r2, [r0, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80060ba:	680c      	ldr	r4, [r1, #0]
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80060bc:	1e5d      	subs	r5, r3, #1
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80060be:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80060c2:	688b      	ldr	r3, [r1, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80060c4:	1e67      	subs	r7, r4, #1
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80060c6:	68cc      	ldr	r4, [r1, #12]
 80060c8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80060cc:	1e5e      	subs	r6, r3, #1
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80060ce:	690d      	ldr	r5, [r1, #16]
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80060d0:	1e63      	subs	r3, r4, #1
 80060d2:	433a      	orrs	r2, r7
                       (((Timing->RPDelay)-1) << 20)             |\
 80060d4:	694c      	ldr	r4, [r1, #20]
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80060d6:	3d01      	subs	r5, #1
                       (((Timing->RCDDelay)-1) << 24));
 80060d8:	6989      	ldr	r1, [r1, #24]
 80060da:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
                       (((Timing->RPDelay)-1) << 20)             |\
 80060de:	3c01      	subs	r4, #1
                       (((Timing->RCDDelay)-1) << 24));
 80060e0:	3901      	subs	r1, #1
 80060e2:	ea42 3303 	orr.w	r3, r2, r3, lsl #12
 80060e6:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80060ea:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80060ee:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 80060f2:	bcf0      	pop	{r4, r5, r6, r7}
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80060f4:	6083      	str	r3, [r0, #8]
}
 80060f6:	2000      	movs	r0, #0
 80060f8:	4770      	bx	lr
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80060fa:	6884      	ldr	r4, [r0, #8]
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80060fc:	684a      	ldr	r2, [r1, #4]
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80060fe:	68c3      	ldr	r3, [r0, #12]
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8006100:	1e56      	subs	r6, r2, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006102:	680a      	ldr	r2, [r1, #0]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006104:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8006108:	688f      	ldr	r7, [r1, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800610a:	1e55      	subs	r5, r2, #1
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800610c:	4a0e      	ldr	r2, [pc, #56]	; (8006148 <FMC_SDRAM_Timing_Init+0x98>)
 800610e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8006112:	3f01      	subs	r7, #1
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8006114:	68ce      	ldr	r6, [r1, #12]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8006116:	4022      	ands	r2, r4
 8006118:	432b      	orrs	r3, r5
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800611a:	690d      	ldr	r5, [r1, #16]
                        (((Timing->RPDelay)-1) << 20)); 
 800611c:	694c      	ldr	r4, [r1, #20]
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800611e:	3e01      	subs	r6, #1
                       (((Timing->RCDDelay)-1) << 24));   
 8006120:	6989      	ldr	r1, [r1, #24]
 8006122:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8006126:	3d01      	subs	r5, #1
 8006128:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
                        (((Timing->RPDelay)-1) << 20)); 
 800612c:	3c01      	subs	r4, #1
                       (((Timing->RCDDelay)-1) << 24));   
 800612e:	3901      	subs	r1, #1
 8006130:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8006134:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006138:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800613c:	6082      	str	r2, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800613e:	60c3      	str	r3, [r0, #12]
}
 8006140:	2000      	movs	r0, #0
 8006142:	bcf0      	pop	{r4, r5, r6, r7}
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	ff0f0fff 	.word	0xff0f0fff

0800614c <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800614c:	684a      	ldr	r2, [r1, #4]
 800614e:	680b      	ldr	r3, [r1, #0]
{
 8006150:	b470      	push	{r4, r5, r6}
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006152:	4313      	orrs	r3, r2
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1) << 5) |\
                    ((Command->ModeRegisterDefinition) << 9)
 8006154:	68ce      	ldr	r6, [r1, #12]
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8006156:	688a      	ldr	r2, [r1, #8]
{
 8006158:	b083      	sub	sp, #12
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800615a:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
  __IO uint32_t tmpr = 0;
 800615e:	2400      	movs	r4, #0
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8006160:	3a01      	subs	r2, #1
{
 8006162:	4605      	mov	r5, r0
  __IO uint32_t tmpr = 0;
 8006164:	9401      	str	r4, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
  
  return HAL_OK;  
}
 8006166:	4620      	mov	r0, r4
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006168:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800616c:	9301      	str	r3, [sp, #4]
  Device->SDCMR = tmpr;
 800616e:	9b01      	ldr	r3, [sp, #4]
 8006170:	612b      	str	r3, [r5, #16]
}
 8006172:	b003      	add	sp, #12
 8006174:	bc70      	pop	{r4, r5, r6}
 8006176:	4770      	bx	lr

08006178 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006178:	4602      	mov	r2, r0
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
  
  return HAL_OK;   
}
 800617a:	2000      	movs	r0, #0
  Device->SDRTR |= (RefreshRate<<1);
 800617c:	6953      	ldr	r3, [r2, #20]
 800617e:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8006182:	6151      	str	r1, [r2, #20]
}
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop

08006188 <SDMMC_GetCmdResp1.part.2>:
  * @brief  Checks for error conditions for R1 response.
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
 8006188:	b410      	push	{r4}
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800618a:	f100 0214 	add.w	r2, r0, #20
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
 800618e:	b083      	sub	sp, #12
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8006190:	f240 54ff 	movw	r4, #1535	; 0x5ff
  __IO uint32_t tmp = 0;
 8006194:	2100      	movs	r1, #0
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006196:	4b37      	ldr	r3, [pc, #220]	; (8006274 <SDMMC_GetCmdResp1.part.2+0xec>)
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8006198:	6384      	str	r4, [r0, #56]	; 0x38
  __IO uint32_t tmp = 0;
 800619a:	9101      	str	r1, [sp, #4]
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800619c:	9201      	str	r2, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 800619e:	9a01      	ldr	r2, [sp, #4]
 80061a0:	6812      	ldr	r2, [r2, #0]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80061a2:	4013      	ands	r3, r2
 80061a4:	b173      	cbz	r3, 80061c4 <SDMMC_GetCmdResp1.part.2+0x3c>
  {
    return SDMMC_ERROR_NONE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80061a6:	428a      	cmp	r2, r1
 80061a8:	db06      	blt.n	80061b8 <SDMMC_GetCmdResp1.part.2+0x30>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80061aa:	0053      	lsls	r3, r2, #1
 80061ac:	d50f      	bpl.n	80061ce <SDMMC_GetCmdResp1.part.2+0x46>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80061ae:	2040      	movs	r0, #64	; 0x40
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
  }
}
 80061b0:	b003      	add	sp, #12
 80061b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061b6:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80061b8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
}
 80061bc:	b003      	add	sp, #12
 80061be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061c2:	4770      	bx	lr
    return SDMMC_ERROR_NONE;
 80061c4:	4618      	mov	r0, r3
}
 80061c6:	b003      	add	sp, #12
 80061c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061cc:	4770      	bx	lr
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80061ce:	0094      	lsls	r4, r2, #2
 80061d0:	d501      	bpl.n	80061d6 <SDMMC_GetCmdResp1.part.2+0x4e>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80061d2:	2080      	movs	r0, #128	; 0x80
 80061d4:	e7ec      	b.n	80061b0 <SDMMC_GetCmdResp1.part.2+0x28>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80061d6:	00d1      	lsls	r1, r2, #3
 80061d8:	d502      	bpl.n	80061e0 <SDMMC_GetCmdResp1.part.2+0x58>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80061da:	f44f 7080 	mov.w	r0, #256	; 0x100
 80061de:	e7e7      	b.n	80061b0 <SDMMC_GetCmdResp1.part.2+0x28>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80061e0:	0113      	lsls	r3, r2, #4
 80061e2:	d502      	bpl.n	80061ea <SDMMC_GetCmdResp1.part.2+0x62>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80061e4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80061e8:	e7e2      	b.n	80061b0 <SDMMC_GetCmdResp1.part.2+0x28>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80061ea:	0154      	lsls	r4, r2, #5
 80061ec:	d502      	bpl.n	80061f4 <SDMMC_GetCmdResp1.part.2+0x6c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80061ee:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80061f2:	e7dd      	b.n	80061b0 <SDMMC_GetCmdResp1.part.2+0x28>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80061f4:	01d1      	lsls	r1, r2, #7
 80061f6:	d502      	bpl.n	80061fe <SDMMC_GetCmdResp1.part.2+0x76>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80061f8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80061fc:	e7d8      	b.n	80061b0 <SDMMC_GetCmdResp1.part.2+0x28>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80061fe:	0213      	lsls	r3, r2, #8
 8006200:	d502      	bpl.n	8006208 <SDMMC_GetCmdResp1.part.2+0x80>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006202:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006206:	e7d3      	b.n	80061b0 <SDMMC_GetCmdResp1.part.2+0x28>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006208:	0254      	lsls	r4, r2, #9
 800620a:	d502      	bpl.n	8006212 <SDMMC_GetCmdResp1.part.2+0x8a>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800620c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006210:	e7ce      	b.n	80061b0 <SDMMC_GetCmdResp1.part.2+0x28>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006212:	0291      	lsls	r1, r2, #10
 8006214:	d502      	bpl.n	800621c <SDMMC_GetCmdResp1.part.2+0x94>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006216:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800621a:	e7c9      	b.n	80061b0 <SDMMC_GetCmdResp1.part.2+0x28>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800621c:	02d3      	lsls	r3, r2, #11
 800621e:	d502      	bpl.n	8006226 <SDMMC_GetCmdResp1.part.2+0x9e>
    return SDMMC_ERROR_CC_ERR;
 8006220:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006224:	e7c4      	b.n	80061b0 <SDMMC_GetCmdResp1.part.2+0x28>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006226:	0354      	lsls	r4, r2, #13
 8006228:	d502      	bpl.n	8006230 <SDMMC_GetCmdResp1.part.2+0xa8>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800622a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800622e:	e7bf      	b.n	80061b0 <SDMMC_GetCmdResp1.part.2+0x28>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006230:	0391      	lsls	r1, r2, #14
 8006232:	d502      	bpl.n	800623a <SDMMC_GetCmdResp1.part.2+0xb2>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006234:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8006238:	e7ba      	b.n	80061b0 <SDMMC_GetCmdResp1.part.2+0x28>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800623a:	03d3      	lsls	r3, r2, #15
 800623c:	d502      	bpl.n	8006244 <SDMMC_GetCmdResp1.part.2+0xbc>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800623e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006242:	e7b5      	b.n	80061b0 <SDMMC_GetCmdResp1.part.2+0x28>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006244:	0414      	lsls	r4, r2, #16
 8006246:	d502      	bpl.n	800624e <SDMMC_GetCmdResp1.part.2+0xc6>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006248:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800624c:	e7b0      	b.n	80061b0 <SDMMC_GetCmdResp1.part.2+0x28>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800624e:	0451      	lsls	r1, r2, #17
 8006250:	d502      	bpl.n	8006258 <SDMMC_GetCmdResp1.part.2+0xd0>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006252:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8006256:	e7ab      	b.n	80061b0 <SDMMC_GetCmdResp1.part.2+0x28>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006258:	0493      	lsls	r3, r2, #18
 800625a:	d502      	bpl.n	8006262 <SDMMC_GetCmdResp1.part.2+0xda>
    return SDMMC_ERROR_ERASE_RESET;
 800625c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8006260:	e7a6      	b.n	80061b0 <SDMMC_GetCmdResp1.part.2+0x28>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006262:	f012 0f08 	tst.w	r2, #8
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006266:	bf14      	ite	ne
 8006268:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800626c:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8006270:	e79e      	b.n	80061b0 <SDMMC_GetCmdResp1.part.2+0x28>
 8006272:	bf00      	nop
 8006274:	fdffe008 	.word	0xfdffe008

08006278 <SDMMC_Init>:
{
 8006278:	b084      	sub	sp, #16
 800627a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800627c:	f10d 0e18 	add.w	lr, sp, #24
             Init.ClockPowerSave      |\
 8006280:	9e09      	ldr	r6, [sp, #36]	; 0x24
{
 8006282:	4607      	mov	r7, r0
             Init.BusWide             |\
 8006284:	9d0a      	ldr	r5, [sp, #40]	; 0x28
             Init.HardwareFlowControl |\
 8006286:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
}
 8006288:	2000      	movs	r0, #0
{
 800628a:	e88e 000e 	stmia.w	lr, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 800628e:	460b      	mov	r3, r1
 8006290:	9907      	ldr	r1, [sp, #28]
             Init.ClockBypass         |\
 8006292:	9a08      	ldr	r2, [sp, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006294:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006296:	6879      	ldr	r1, [r7, #4]
             Init.ClockBypass         |\
 8006298:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800629a:	4a05      	ldr	r2, [pc, #20]	; (80062b0 <SDMMC_Init+0x38>)
             Init.ClockPowerSave      |\
 800629c:	4333      	orrs	r3, r6
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800629e:	400a      	ands	r2, r1
             Init.BusWide             |\
 80062a0:	432b      	orrs	r3, r5
             Init.HardwareFlowControl |\
 80062a2:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80062a4:	4313      	orrs	r3, r2
 80062a6:	607b      	str	r3, [r7, #4]
}
 80062a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80062ac:	b004      	add	sp, #16
 80062ae:	4770      	bx	lr
 80062b0:	ffff8100 	.word	0xffff8100

080062b4 <SDMMC_ReadFIFO>:
 80062b4:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop

080062bc <SDMMC_PowerState_ON>:
{  
 80062bc:	4603      	mov	r3, r0
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80062be:	2203      	movs	r2, #3
}
 80062c0:	2000      	movs	r0, #0
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80062c2:	601a      	str	r2, [r3, #0]
}
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop

080062c8 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80062c8:	6800      	ldr	r0, [r0, #0]
}
 80062ca:	f000 0003 	and.w	r0, r0, #3
 80062ce:	4770      	bx	lr

080062d0 <SDMMC_GetResponse>:
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 80062d0:	3014      	adds	r0, #20
{
 80062d2:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 80062d4:	2300      	movs	r3, #0
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 80062d6:	4401      	add	r1, r0
  __IO uint32_t tmp = 0;
 80062d8:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 80062da:	9101      	str	r1, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 80062dc:	9b01      	ldr	r3, [sp, #4]
 80062de:	6818      	ldr	r0, [r3, #0]
}  
 80062e0:	b002      	add	sp, #8
 80062e2:	4770      	bx	lr

080062e4 <SDMMC_ConfigData>:
{
 80062e4:	b470      	push	{r4, r5, r6}
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80062e6:	688b      	ldr	r3, [r1, #8]
{
 80062e8:	4602      	mov	r2, r0
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80062ea:	68cd      	ldr	r5, [r1, #12]
}
 80062ec:	2000      	movs	r0, #0
  SDMMCx->DTIMER = Data->DataTimeOut;
 80062ee:	680e      	ldr	r6, [r1, #0]
  SDMMCx->DLEN = Data->DataLength;
 80062f0:	684c      	ldr	r4, [r1, #4]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80062f2:	432b      	orrs	r3, r5
                       Data->TransferDir   |\
 80062f4:	690d      	ldr	r5, [r1, #16]
  SDMMCx->DTIMER = Data->DataTimeOut;
 80062f6:	6256      	str	r6, [r2, #36]	; 0x24
                       Data->TransferDir   |\
 80062f8:	432b      	orrs	r3, r5
  SDMMCx->DLEN = Data->DataLength;
 80062fa:	6294      	str	r4, [r2, #40]	; 0x28
                       Data->TransferMode  |\
 80062fc:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80062fe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                       Data->TransferMode  |\
 8006300:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006302:	f021 01f7 	bic.w	r1, r1, #247	; 0xf7
 8006306:	430b      	orrs	r3, r1
}
 8006308:	bc70      	pop	{r4, r5, r6}
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800630a:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop

08006310 <SDMMC_CmdBlockLength>:
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8006310:	4b1a      	ldr	r3, [pc, #104]	; (800637c <SDMMC_CmdBlockLength+0x6c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006312:	4a1b      	ldr	r2, [pc, #108]	; (8006380 <SDMMC_CmdBlockLength+0x70>)
{
 8006314:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8006316:	681c      	ldr	r4, [r3, #0]
 8006318:	f241 3388 	movw	r3, #5000	; 0x1388
 800631c:	4d19      	ldr	r5, [pc, #100]	; (8006384 <SDMMC_CmdBlockLength+0x74>)
  SDMMCx->ARG = Command->Argument;
 800631e:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8006320:	fba5 4104 	umull	r4, r1, r5, r4
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006324:	68c4      	ldr	r4, [r0, #12]
 8006326:	4022      	ands	r2, r4
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8006328:	0a49      	lsrs	r1, r1, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800632a:	f442 628a 	orr.w	r2, r2, #1104	; 0x450
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800632e:	fb03 f301 	mul.w	r3, r3, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006332:	60c2      	str	r2, [r0, #12]
 8006334:	e003      	b.n	800633e <SDMMC_CmdBlockLength+0x2e>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8006336:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8006338:	f012 0f45 	tst.w	r2, #69	; 0x45
 800633c:	d106      	bne.n	800634c <SDMMC_CmdBlockLength+0x3c>
    if (count-- == 0)
 800633e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8006342:	d2f8      	bcs.n	8006336 <SDMMC_CmdBlockLength+0x26>
      return SDMMC_ERROR_TIMEOUT;
 8006344:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8006348:	bc30      	pop	{r4, r5}
 800634a:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800634c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800634e:	075a      	lsls	r2, r3, #29
 8006350:	d504      	bpl.n	800635c <SDMMC_CmdBlockLength+0x4c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006352:	2304      	movs	r3, #4
}
 8006354:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006356:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006358:	4618      	mov	r0, r3
}
 800635a:	4770      	bx	lr
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800635c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800635e:	07db      	lsls	r3, r3, #31
 8006360:	d405      	bmi.n	800636e <SDMMC_CmdBlockLength+0x5e>
  return (uint8_t)(SDMMCx->RESPCMD);
 8006362:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006364:	b2db      	uxtb	r3, r3
 8006366:	2b10      	cmp	r3, #16
 8006368:	d005      	beq.n	8006376 <SDMMC_CmdBlockLength+0x66>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800636a:	2001      	movs	r0, #1
  return errorstate;
 800636c:	e7ec      	b.n	8006348 <SDMMC_CmdBlockLength+0x38>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800636e:	2301      	movs	r3, #1
 8006370:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006372:	4618      	mov	r0, r3
 8006374:	e7e8      	b.n	8006348 <SDMMC_CmdBlockLength+0x38>
}
 8006376:	bc30      	pop	{r4, r5}
 8006378:	f7ff bf06 	b.w	8006188 <SDMMC_GetCmdResp1.part.2>
 800637c:	20000000 	.word	0x20000000
 8006380:	fffff000 	.word	0xfffff000
 8006384:	10624dd3 	.word	0x10624dd3

08006388 <SDMMC_CmdSelDesel>:
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8006388:	4b1b      	ldr	r3, [pc, #108]	; (80063f8 <SDMMC_CmdSelDesel+0x70>)
{
 800638a:	b470      	push	{r4, r5, r6}
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800638c:	6819      	ldr	r1, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800638e:	f240 4447 	movw	r4, #1095	; 0x447
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8006392:	4e1a      	ldr	r6, [pc, #104]	; (80063fc <SDMMC_CmdSelDesel+0x74>)
 8006394:	f241 3388 	movw	r3, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 8006398:	6082      	str	r2, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800639a:	fba6 1201 	umull	r1, r2, r6, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800639e:	68c5      	ldr	r5, [r0, #12]
 80063a0:	4917      	ldr	r1, [pc, #92]	; (8006400 <SDMMC_CmdSelDesel+0x78>)
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80063a2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80063a4:	4029      	ands	r1, r5
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80063a6:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80063aa:	430c      	orrs	r4, r1
 80063ac:	60c4      	str	r4, [r0, #12]
 80063ae:	e003      	b.n	80063b8 <SDMMC_CmdSelDesel+0x30>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80063b0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80063b2:	f012 0f45 	tst.w	r2, #69	; 0x45
 80063b6:	d106      	bne.n	80063c6 <SDMMC_CmdSelDesel+0x3e>
    if (count-- == 0)
 80063b8:	f113 33ff 	adds.w	r3, r3, #4294967295
 80063bc:	d2f8      	bcs.n	80063b0 <SDMMC_CmdSelDesel+0x28>
      return SDMMC_ERROR_TIMEOUT;
 80063be:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80063c2:	bc70      	pop	{r4, r5, r6}
 80063c4:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80063c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80063c8:	075a      	lsls	r2, r3, #29
 80063ca:	d504      	bpl.n	80063d6 <SDMMC_CmdSelDesel+0x4e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80063cc:	2304      	movs	r3, #4
}
 80063ce:	bc70      	pop	{r4, r5, r6}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80063d0:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80063d2:	4618      	mov	r0, r3
}
 80063d4:	4770      	bx	lr
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80063d6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80063d8:	07db      	lsls	r3, r3, #31
 80063da:	d405      	bmi.n	80063e8 <SDMMC_CmdSelDesel+0x60>
  return (uint8_t)(SDMMCx->RESPCMD);
 80063dc:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b07      	cmp	r3, #7
 80063e2:	d005      	beq.n	80063f0 <SDMMC_CmdSelDesel+0x68>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80063e4:	2001      	movs	r0, #1
  return errorstate;
 80063e6:	e7ec      	b.n	80063c2 <SDMMC_CmdSelDesel+0x3a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80063e8:	2301      	movs	r3, #1
 80063ea:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80063ec:	4618      	mov	r0, r3
 80063ee:	e7e8      	b.n	80063c2 <SDMMC_CmdSelDesel+0x3a>
}
 80063f0:	bc70      	pop	{r4, r5, r6}
 80063f2:	f7ff bec9 	b.w	8006188 <SDMMC_GetCmdResp1.part.2>
 80063f6:	bf00      	nop
 80063f8:	20000000 	.word	0x20000000
 80063fc:	10624dd3 	.word	0x10624dd3
 8006400:	fffff000 	.word	0xfffff000

08006404 <SDMMC_CmdGoIdleState>:
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006404:	4b13      	ldr	r3, [pc, #76]	; (8006454 <SDMMC_CmdGoIdleState+0x50>)
{
 8006406:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 8006408:	2200      	movs	r2, #0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800640a:	6818      	ldr	r0, [r3, #0]
 800640c:	f241 3388 	movw	r3, #5000	; 0x1388
{
 8006410:	b410      	push	{r4}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006412:	4c11      	ldr	r4, [pc, #68]	; (8006458 <SDMMC_CmdGoIdleState+0x54>)
  SDMMCx->ARG = Command->Argument;
 8006414:	608a      	str	r2, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006416:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800641a:	fba4 4000 	umull	r4, r0, r4, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800641e:	68cc      	ldr	r4, [r1, #12]
 8006420:	4022      	ands	r2, r4
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006422:	0a40      	lsrs	r0, r0, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006424:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006428:	fb03 f300 	mul.w	r3, r3, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800642c:	60ca      	str	r2, [r1, #12]
 800642e:	e002      	b.n	8006436 <SDMMC_CmdGoIdleState+0x32>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8006430:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8006432:	0612      	lsls	r2, r2, #24
 8006434:	d407      	bmi.n	8006446 <SDMMC_CmdGoIdleState+0x42>
    if (count-- == 0)
 8006436:	f113 33ff 	adds.w	r3, r3, #4294967295
 800643a:	d2f9      	bcs.n	8006430 <SDMMC_CmdGoIdleState+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800643c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8006440:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006444:	4770      	bx	lr
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8006446:	f240 53ff 	movw	r3, #1535	; 0x5ff
  return SDMMC_ERROR_NONE;
 800644a:	2000      	movs	r0, #0
}
 800644c:	f85d 4b04 	ldr.w	r4, [sp], #4
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8006450:	638b      	str	r3, [r1, #56]	; 0x38
}
 8006452:	4770      	bx	lr
 8006454:	20000000 	.word	0x20000000
 8006458:	10624dd3 	.word	0x10624dd3

0800645c <SDMMC_CmdOperCond>:
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800645c:	4b1a      	ldr	r3, [pc, #104]	; (80064c8 <SDMMC_CmdOperCond+0x6c>)
{
 800645e:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 8006460:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006464:	6818      	ldr	r0, [r3, #0]
 8006466:	f241 3388 	movw	r3, #5000	; 0x1388
{
 800646a:	b410      	push	{r4}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800646c:	4c17      	ldr	r4, [pc, #92]	; (80064cc <SDMMC_CmdOperCond+0x70>)
  SDMMCx->ARG = Command->Argument;
 800646e:	608a      	str	r2, [r1, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006470:	fba4 4000 	umull	r4, r0, r4, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006474:	4a16      	ldr	r2, [pc, #88]	; (80064d0 <SDMMC_CmdOperCond+0x74>)
 8006476:	68cc      	ldr	r4, [r1, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006478:	0a40      	lsrs	r0, r0, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800647a:	4022      	ands	r2, r4
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800647c:	fb03 f300 	mul.w	r3, r3, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006480:	f442 6289 	orr.w	r2, r2, #1096	; 0x448
 8006484:	60ca      	str	r2, [r1, #12]
 8006486:	e003      	b.n	8006490 <SDMMC_CmdOperCond+0x34>
    if (count-- == 0)
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8006488:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800648a:	f012 0f45 	tst.w	r2, #69	; 0x45
 800648e:	d107      	bne.n	80064a0 <SDMMC_CmdOperCond+0x44>
    if (count-- == 0)
 8006490:	f113 33ff 	adds.w	r3, r3, #4294967295
 8006494:	d2f8      	bcs.n	8006488 <SDMMC_CmdOperCond+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8006496:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800649a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800649e:	4770      	bx	lr

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80064a0:	6b48      	ldr	r0, [r1, #52]	; 0x34
 80064a2:	f010 0004 	ands.w	r0, r0, #4
 80064a6:	d005      	beq.n	80064b4 <SDMMC_CmdOperCond+0x58>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80064a8:	2340      	movs	r3, #64	; 0x40
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80064aa:	2004      	movs	r0, #4
}
 80064ac:	f85d 4b04 	ldr.w	r4, [sp], #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80064b0:	638b      	str	r3, [r1, #56]	; 0x38
}
 80064b2:	4770      	bx	lr
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80064b4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80064b6:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80064ba:	d002      	beq.n	80064c2 <SDMMC_CmdOperCond+0x66>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80064bc:	2340      	movs	r3, #64	; 0x40
 80064be:	638b      	str	r3, [r1, #56]	; 0x38
 80064c0:	e7eb      	b.n	800649a <SDMMC_CmdOperCond+0x3e>
  }
  
  return SDMMC_ERROR_NONE;
 80064c2:	4618      	mov	r0, r3
  return errorstate;
 80064c4:	e7e9      	b.n	800649a <SDMMC_CmdOperCond+0x3e>
 80064c6:	bf00      	nop
 80064c8:	20000000 	.word	0x20000000
 80064cc:	10624dd3 	.word	0x10624dd3
 80064d0:	fffff000 	.word	0xfffff000

080064d4 <SDMMC_CmdAppCommand>:
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80064d4:	4b1b      	ldr	r3, [pc, #108]	; (8006544 <SDMMC_CmdAppCommand+0x70>)
{
 80064d6:	b470      	push	{r4, r5, r6}
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80064d8:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80064da:	f240 4477 	movw	r4, #1143	; 0x477
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80064de:	4e1a      	ldr	r6, [pc, #104]	; (8006548 <SDMMC_CmdAppCommand+0x74>)
 80064e0:	f241 3388 	movw	r3, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 80064e4:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80064e6:	fba6 1202 	umull	r1, r2, r6, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80064ea:	68c5      	ldr	r5, [r0, #12]
 80064ec:	4917      	ldr	r1, [pc, #92]	; (800654c <SDMMC_CmdAppCommand+0x78>)
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80064ee:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80064f0:	4029      	ands	r1, r5
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80064f2:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80064f6:	430c      	orrs	r4, r1
 80064f8:	60c4      	str	r4, [r0, #12]
 80064fa:	e003      	b.n	8006504 <SDMMC_CmdAppCommand+0x30>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80064fc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80064fe:	f012 0f45 	tst.w	r2, #69	; 0x45
 8006502:	d106      	bne.n	8006512 <SDMMC_CmdAppCommand+0x3e>
    if (count-- == 0)
 8006504:	f113 33ff 	adds.w	r3, r3, #4294967295
 8006508:	d2f8      	bcs.n	80064fc <SDMMC_CmdAppCommand+0x28>
      return SDMMC_ERROR_TIMEOUT;
 800650a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800650e:	bc70      	pop	{r4, r5, r6}
 8006510:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006512:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006514:	075a      	lsls	r2, r3, #29
 8006516:	d504      	bpl.n	8006522 <SDMMC_CmdAppCommand+0x4e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006518:	2304      	movs	r3, #4
}
 800651a:	bc70      	pop	{r4, r5, r6}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800651c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800651e:	4618      	mov	r0, r3
}
 8006520:	4770      	bx	lr
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006522:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006524:	07db      	lsls	r3, r3, #31
 8006526:	d405      	bmi.n	8006534 <SDMMC_CmdAppCommand+0x60>
  return (uint8_t)(SDMMCx->RESPCMD);
 8006528:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800652a:	b2db      	uxtb	r3, r3
 800652c:	2b37      	cmp	r3, #55	; 0x37
 800652e:	d005      	beq.n	800653c <SDMMC_CmdAppCommand+0x68>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006530:	2001      	movs	r0, #1
  return errorstate;
 8006532:	e7ec      	b.n	800650e <SDMMC_CmdAppCommand+0x3a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006534:	2301      	movs	r3, #1
 8006536:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006538:	4618      	mov	r0, r3
 800653a:	e7e8      	b.n	800650e <SDMMC_CmdAppCommand+0x3a>
}
 800653c:	bc70      	pop	{r4, r5, r6}
 800653e:	f7ff be23 	b.w	8006188 <SDMMC_GetCmdResp1.part.2>
 8006542:	bf00      	nop
 8006544:	20000000 	.word	0x20000000
 8006548:	10624dd3 	.word	0x10624dd3
 800654c:	fffff000 	.word	0xfffff000

08006550 <SDMMC_CmdAppOperCommand>:
{
 8006550:	b470      	push	{r4, r5, r6}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006552:	4b17      	ldr	r3, [pc, #92]	; (80065b0 <SDMMC_CmdAppOperCommand+0x60>)
{
 8006554:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8006556:	4d17      	ldr	r5, [pc, #92]	; (80065b4 <SDMMC_CmdAppOperCommand+0x64>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006558:	f240 4069 	movw	r0, #1129	; 0x469
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	f241 3388 	movw	r3, #5000	; 0x1388
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8006562:	430d      	orrs	r5, r1
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006564:	4e14      	ldr	r6, [pc, #80]	; (80065b8 <SDMMC_CmdAppOperCommand+0x68>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006566:	4915      	ldr	r1, [pc, #84]	; (80065bc <SDMMC_CmdAppOperCommand+0x6c>)
  SDMMCx->ARG = Command->Argument;
 8006568:	60a5      	str	r5, [r4, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800656a:	fba6 5202 	umull	r5, r2, r6, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800656e:	68e5      	ldr	r5, [r4, #12]
 8006570:	4029      	ands	r1, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006572:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006574:	4308      	orrs	r0, r1
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006576:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800657a:	60e0      	str	r0, [r4, #12]
 800657c:	e003      	b.n	8006586 <SDMMC_CmdAppOperCommand+0x36>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800657e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006580:	f012 0f45 	tst.w	r2, #69	; 0x45
 8006584:	d106      	bne.n	8006594 <SDMMC_CmdAppOperCommand+0x44>
    if (count-- == 0)
 8006586:	f113 33ff 	adds.w	r3, r3, #4294967295
 800658a:	d2f8      	bcs.n	800657e <SDMMC_CmdAppOperCommand+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800658c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8006590:	bc70      	pop	{r4, r5, r6}
 8006592:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006594:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006596:	f010 0004 	ands.w	r0, r0, #4
 800659a:	d003      	beq.n	80065a4 <SDMMC_CmdAppOperCommand+0x54>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800659c:	2004      	movs	r0, #4
 800659e:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80065a0:	bc70      	pop	{r4, r5, r6}
 80065a2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80065a4:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80065a8:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80065aa:	bc70      	pop	{r4, r5, r6}
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	20000000 	.word	0x20000000
 80065b4:	80100000 	.word	0x80100000
 80065b8:	10624dd3 	.word	0x10624dd3
 80065bc:	fffff000 	.word	0xfffff000

080065c0 <SDMMC_CmdBusWidth>:
 80065c0:	4b1b      	ldr	r3, [pc, #108]	; (8006630 <SDMMC_CmdBusWidth+0x70>)
 80065c2:	b470      	push	{r4, r5, r6}
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	f240 4446 	movw	r4, #1094	; 0x446
 80065ca:	4e1a      	ldr	r6, [pc, #104]	; (8006634 <SDMMC_CmdBusWidth+0x74>)
 80065cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80065d0:	6081      	str	r1, [r0, #8]
 80065d2:	fba6 1202 	umull	r1, r2, r6, r2
 80065d6:	68c5      	ldr	r5, [r0, #12]
 80065d8:	4917      	ldr	r1, [pc, #92]	; (8006638 <SDMMC_CmdBusWidth+0x78>)
 80065da:	0a52      	lsrs	r2, r2, #9
 80065dc:	4029      	ands	r1, r5
 80065de:	fb03 f302 	mul.w	r3, r3, r2
 80065e2:	430c      	orrs	r4, r1
 80065e4:	60c4      	str	r4, [r0, #12]
 80065e6:	e003      	b.n	80065f0 <SDMMC_CmdBusWidth+0x30>
 80065e8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80065ea:	f012 0f45 	tst.w	r2, #69	; 0x45
 80065ee:	d106      	bne.n	80065fe <SDMMC_CmdBusWidth+0x3e>
 80065f0:	f113 33ff 	adds.w	r3, r3, #4294967295
 80065f4:	d2f8      	bcs.n	80065e8 <SDMMC_CmdBusWidth+0x28>
 80065f6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80065fa:	bc70      	pop	{r4, r5, r6}
 80065fc:	4770      	bx	lr
 80065fe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006600:	075a      	lsls	r2, r3, #29
 8006602:	d504      	bpl.n	800660e <SDMMC_CmdBusWidth+0x4e>
 8006604:	2304      	movs	r3, #4
 8006606:	bc70      	pop	{r4, r5, r6}
 8006608:	6383      	str	r3, [r0, #56]	; 0x38
 800660a:	4618      	mov	r0, r3
 800660c:	4770      	bx	lr
 800660e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006610:	07db      	lsls	r3, r3, #31
 8006612:	d405      	bmi.n	8006620 <SDMMC_CmdBusWidth+0x60>
 8006614:	6903      	ldr	r3, [r0, #16]
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b06      	cmp	r3, #6
 800661a:	d005      	beq.n	8006628 <SDMMC_CmdBusWidth+0x68>
 800661c:	2001      	movs	r0, #1
 800661e:	e7ec      	b.n	80065fa <SDMMC_CmdBusWidth+0x3a>
 8006620:	2301      	movs	r3, #1
 8006622:	6383      	str	r3, [r0, #56]	; 0x38
 8006624:	4618      	mov	r0, r3
 8006626:	e7e8      	b.n	80065fa <SDMMC_CmdBusWidth+0x3a>
 8006628:	bc70      	pop	{r4, r5, r6}
 800662a:	f7ff bdad 	b.w	8006188 <SDMMC_GetCmdResp1.part.2>
 800662e:	bf00      	nop
 8006630:	20000000 	.word	0x20000000
 8006634:	10624dd3 	.word	0x10624dd3
 8006638:	fffff000 	.word	0xfffff000

0800663c <SDMMC_CmdSendSCR>:
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800663c:	4a1b      	ldr	r2, [pc, #108]	; (80066ac <SDMMC_CmdSendSCR+0x70>)
  SDMMCx->ARG = Command->Argument;
 800663e:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006640:	f240 4173 	movw	r1, #1139	; 0x473
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8006644:	6812      	ldr	r2, [r2, #0]
{
 8006646:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8006648:	4c19      	ldr	r4, [pc, #100]	; (80066b0 <SDMMC_CmdSendSCR+0x74>)
  SDMMCx->ARG = Command->Argument;
 800664a:	6083      	str	r3, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800664c:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006650:	68c5      	ldr	r5, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8006652:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006656:	4c17      	ldr	r4, [pc, #92]	; (80066b4 <SDMMC_CmdSendSCR+0x78>)
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8006658:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800665a:	402c      	ands	r4, r5
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800665c:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006660:	4321      	orrs	r1, r4
 8006662:	60c1      	str	r1, [r0, #12]
 8006664:	e003      	b.n	800666e <SDMMC_CmdSendSCR+0x32>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8006666:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8006668:	f012 0f45 	tst.w	r2, #69	; 0x45
 800666c:	d106      	bne.n	800667c <SDMMC_CmdSendSCR+0x40>
    if (count-- == 0)
 800666e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8006672:	d2f8      	bcs.n	8006666 <SDMMC_CmdSendSCR+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8006674:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8006678:	bc30      	pop	{r4, r5}
 800667a:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800667c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800667e:	075a      	lsls	r2, r3, #29
 8006680:	d504      	bpl.n	800668c <SDMMC_CmdSendSCR+0x50>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006682:	2304      	movs	r3, #4
}
 8006684:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006686:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006688:	4618      	mov	r0, r3
}
 800668a:	4770      	bx	lr
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800668c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800668e:	07db      	lsls	r3, r3, #31
 8006690:	d405      	bmi.n	800669e <SDMMC_CmdSendSCR+0x62>
  return (uint8_t)(SDMMCx->RESPCMD);
 8006692:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006694:	b2db      	uxtb	r3, r3
 8006696:	2b33      	cmp	r3, #51	; 0x33
 8006698:	d005      	beq.n	80066a6 <SDMMC_CmdSendSCR+0x6a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800669a:	2001      	movs	r0, #1
  return errorstate;
 800669c:	e7ec      	b.n	8006678 <SDMMC_CmdSendSCR+0x3c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800669e:	2301      	movs	r3, #1
 80066a0:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80066a2:	4618      	mov	r0, r3
 80066a4:	e7e8      	b.n	8006678 <SDMMC_CmdSendSCR+0x3c>
}
 80066a6:	bc30      	pop	{r4, r5}
 80066a8:	f7ff bd6e 	b.w	8006188 <SDMMC_GetCmdResp1.part.2>
 80066ac:	20000000 	.word	0x20000000
 80066b0:	10624dd3 	.word	0x10624dd3
 80066b4:	fffff000 	.word	0xfffff000

080066b8 <SDMMC_CmdSendCID>:
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80066b8:	4a19      	ldr	r2, [pc, #100]	; (8006720 <SDMMC_CmdSendCID+0x68>)
{
 80066ba:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 80066bc:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80066be:	f240 40c2 	movw	r0, #1218	; 0x4c2
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80066c2:	6812      	ldr	r2, [r2, #0]
{
 80066c4:	b430      	push	{r4, r5}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80066c6:	4c17      	ldr	r4, [pc, #92]	; (8006724 <SDMMC_CmdSendCID+0x6c>)
  SDMMCx->ARG = Command->Argument;
 80066c8:	608b      	str	r3, [r1, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80066ca:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80066ce:	68cd      	ldr	r5, [r1, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80066d0:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80066d4:	4c14      	ldr	r4, [pc, #80]	; (8006728 <SDMMC_CmdSendCID+0x70>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80066d6:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80066d8:	402c      	ands	r4, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80066da:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80066de:	4320      	orrs	r0, r4
 80066e0:	60c8      	str	r0, [r1, #12]
 80066e2:	e003      	b.n	80066ec <SDMMC_CmdSendCID+0x34>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80066e4:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80066e6:	f012 0f45 	tst.w	r2, #69	; 0x45
 80066ea:	d106      	bne.n	80066fa <SDMMC_CmdSendCID+0x42>
    if (count-- == 0)
 80066ec:	f113 33ff 	adds.w	r3, r3, #4294967295
 80066f0:	d2f8      	bcs.n	80066e4 <SDMMC_CmdSendCID+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 80066f2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80066f6:	bc30      	pop	{r4, r5}
 80066f8:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80066fa:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80066fc:	075b      	lsls	r3, r3, #29
 80066fe:	d503      	bpl.n	8006708 <SDMMC_CmdSendCID+0x50>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006700:	2004      	movs	r0, #4
 8006702:	6388      	str	r0, [r1, #56]	; 0x38
}
 8006704:	bc30      	pop	{r4, r5}
 8006706:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006708:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800670a:	f010 0001 	ands.w	r0, r0, #1
 800670e:	d103      	bne.n	8006718 <SDMMC_CmdSendCID+0x60>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8006710:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8006714:	638b      	str	r3, [r1, #56]	; 0x38
 8006716:	e7ee      	b.n	80066f6 <SDMMC_CmdSendCID+0x3e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006718:	2001      	movs	r0, #1
 800671a:	6388      	str	r0, [r1, #56]	; 0x38
 800671c:	e7eb      	b.n	80066f6 <SDMMC_CmdSendCID+0x3e>
 800671e:	bf00      	nop
 8006720:	20000000 	.word	0x20000000
 8006724:	10624dd3 	.word	0x10624dd3
 8006728:	fffff000 	.word	0xfffff000

0800672c <SDMMC_CmdSendCSD>:
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800672c:	4b18      	ldr	r3, [pc, #96]	; (8006790 <SDMMC_CmdSendCSD+0x64>)
{
 800672e:	b470      	push	{r4, r5, r6}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006730:	681a      	ldr	r2, [r3, #0]
{
 8006732:	4604      	mov	r4, r0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006734:	4e17      	ldr	r6, [pc, #92]	; (8006794 <SDMMC_CmdSendCSD+0x68>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006736:	f240 40c9 	movw	r0, #1225	; 0x4c9
  SDMMCx->ARG = Command->Argument;
 800673a:	60a1      	str	r1, [r4, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800673c:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006740:	68e5      	ldr	r5, [r4, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006742:	fba6 1202 	umull	r1, r2, r6, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006746:	4914      	ldr	r1, [pc, #80]	; (8006798 <SDMMC_CmdSendCSD+0x6c>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006748:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800674a:	4029      	ands	r1, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800674c:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006750:	4308      	orrs	r0, r1
 8006752:	60e0      	str	r0, [r4, #12]
 8006754:	e003      	b.n	800675e <SDMMC_CmdSendCSD+0x32>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8006756:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006758:	f012 0f45 	tst.w	r2, #69	; 0x45
 800675c:	d106      	bne.n	800676c <SDMMC_CmdSendCSD+0x40>
    if (count-- == 0)
 800675e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8006762:	d2f8      	bcs.n	8006756 <SDMMC_CmdSendCSD+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8006764:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8006768:	bc70      	pop	{r4, r5, r6}
 800676a:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800676c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800676e:	075b      	lsls	r3, r3, #29
 8006770:	d503      	bpl.n	800677a <SDMMC_CmdSendCSD+0x4e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006772:	2004      	movs	r0, #4
 8006774:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8006776:	bc70      	pop	{r4, r5, r6}
 8006778:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800677a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800677c:	f010 0001 	ands.w	r0, r0, #1
 8006780:	d103      	bne.n	800678a <SDMMC_CmdSendCSD+0x5e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8006782:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8006786:	63a3      	str	r3, [r4, #56]	; 0x38
 8006788:	e7ee      	b.n	8006768 <SDMMC_CmdSendCSD+0x3c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800678a:	2001      	movs	r0, #1
 800678c:	63a0      	str	r0, [r4, #56]	; 0x38
 800678e:	e7eb      	b.n	8006768 <SDMMC_CmdSendCSD+0x3c>
 8006790:	20000000 	.word	0x20000000
 8006794:	10624dd3 	.word	0x10624dd3
 8006798:	fffff000 	.word	0xfffff000

0800679c <SDMMC_CmdSetRelAdd>:
{
 800679c:	b470      	push	{r4, r5, r6}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800679e:	4b2a      	ldr	r3, [pc, #168]	; (8006848 <SDMMC_CmdSetRelAdd+0xac>)
  SDMMCx->ARG = Command->Argument;
 80067a0:	2500      	movs	r5, #0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80067a2:	4a2a      	ldr	r2, [pc, #168]	; (800684c <SDMMC_CmdSetRelAdd+0xb0>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80067a4:	f240 4443 	movw	r4, #1091	; 0x443
  SDMMCx->ARG = Command->Argument;
 80067a8:	6085      	str	r5, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80067aa:	f5a5 5580 	sub.w	r5, r5, #4096	; 0x1000
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80067ae:	681b      	ldr	r3, [r3, #0]
{
 80067b0:	b083      	sub	sp, #12
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80067b2:	68c6      	ldr	r6, [r0, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80067b4:	fba2 3203 	umull	r3, r2, r2, r3
 80067b8:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80067bc:	4035      	ands	r5, r6
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80067be:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80067c0:	432c      	orrs	r4, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80067c2:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80067c6:	60c4      	str	r4, [r0, #12]
 80067c8:	e003      	b.n	80067d2 <SDMMC_CmdSetRelAdd+0x36>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80067ca:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80067cc:	f012 0f45 	tst.w	r2, #69	; 0x45
 80067d0:	d107      	bne.n	80067e2 <SDMMC_CmdSetRelAdd+0x46>
    if (count-- == 0)
 80067d2:	f113 33ff 	adds.w	r3, r3, #4294967295
 80067d6:	d2f8      	bcs.n	80067ca <SDMMC_CmdSetRelAdd+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 80067d8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80067dc:	b003      	add	sp, #12
 80067de:	bc70      	pop	{r4, r5, r6}
 80067e0:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80067e2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80067e4:	075c      	lsls	r4, r3, #29
 80067e6:	d505      	bpl.n	80067f4 <SDMMC_CmdSetRelAdd+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80067e8:	2304      	movs	r3, #4
 80067ea:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80067ec:	4618      	mov	r0, r3
}
 80067ee:	b003      	add	sp, #12
 80067f0:	bc70      	pop	{r4, r5, r6}
 80067f2:	4770      	bx	lr
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80067f4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80067f6:	f013 0301 	ands.w	r3, r3, #1
 80067fa:	d105      	bne.n	8006808 <SDMMC_CmdSetRelAdd+0x6c>
  return (uint8_t)(SDMMCx->RESPCMD);
 80067fc:	6902      	ldr	r2, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80067fe:	b2d2      	uxtb	r2, r2
 8006800:	2a03      	cmp	r2, #3
 8006802:	d005      	beq.n	8006810 <SDMMC_CmdSetRelAdd+0x74>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006804:	2001      	movs	r0, #1
 8006806:	e7e9      	b.n	80067dc <SDMMC_CmdSetRelAdd+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006808:	2301      	movs	r3, #1
 800680a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800680c:	4618      	mov	r0, r3
 800680e:	e7e5      	b.n	80067dc <SDMMC_CmdSetRelAdd+0x40>
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8006810:	f100 0214 	add.w	r2, r0, #20
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8006814:	f240 54ff 	movw	r4, #1535	; 0x5ff
 8006818:	6384      	str	r4, [r0, #56]	; 0x38
  __IO uint32_t tmp = 0;
 800681a:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800681c:	9201      	str	r2, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 800681e:	9b01      	ldr	r3, [sp, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006822:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 8006826:	d004      	beq.n	8006832 <SDMMC_CmdSetRelAdd+0x96>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006828:	045a      	lsls	r2, r3, #17
 800682a:	d505      	bpl.n	8006838 <SDMMC_CmdSetRelAdd+0x9c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800682c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006830:	e7d4      	b.n	80067dc <SDMMC_CmdSetRelAdd+0x40>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006832:	0c1b      	lsrs	r3, r3, #16
 8006834:	800b      	strh	r3, [r1, #0]
 8006836:	e7d1      	b.n	80067dc <SDMMC_CmdSetRelAdd+0x40>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006838:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800683c:	bf14      	ite	ne
 800683e:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8006842:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8006846:	e7c9      	b.n	80067dc <SDMMC_CmdSetRelAdd+0x40>
 8006848:	20000000 	.word	0x20000000
 800684c:	10624dd3 	.word	0x10624dd3

08006850 <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 8006850:	2000      	movs	r0, #0
 8006852:	4770      	bx	lr

08006854 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop

08006858 <ft5336_Init>:
{
 8006858:	b510      	push	{r4, lr}
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
 800685a:	4c05      	ldr	r4, [pc, #20]	; (8006870 <ft5336_Init+0x18>)
  TS_IO_Delay(200);
 800685c:	20c8      	movs	r0, #200	; 0xc8
 800685e:	f000 fa3b 	bl	8006cd8 <TS_IO_Delay>
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8006862:	7823      	ldrb	r3, [r4, #0]
 8006864:	b91b      	cbnz	r3, 800686e <ft5336_Init+0x16>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8006866:	f000 f965 	bl	8006b34 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800686a:	2301      	movs	r3, #1
 800686c:	7023      	strb	r3, [r4, #0]
 800686e:	bd10      	pop	{r4, pc}
 8006870:	200005a8 	.word	0x200005a8

08006874 <ft5336_ReadID>:
{
 8006874:	b530      	push	{r4, r5, lr}
  return(ft5336_handle.i2cInitialized);
 8006876:	4c11      	ldr	r4, [pc, #68]	; (80068bc <ft5336_ReadID+0x48>)
{
 8006878:	b083      	sub	sp, #12
  volatile uint8_t ucReadId = 0;
 800687a:	2200      	movs	r2, #0
{
 800687c:	4605      	mov	r5, r0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 800687e:	7823      	ldrb	r3, [r4, #0]
  volatile uint8_t ucReadId = 0;
 8006880:	f88d 2007 	strb.w	r2, [sp, #7]
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8006884:	b1ab      	cbz	r3, 80068b2 <ft5336_ReadID+0x3e>
 8006886:	b2ed      	uxtb	r5, r5
{
 8006888:	2400      	movs	r4, #0
 800688a:	e001      	b.n	8006890 <ft5336_ReadID+0x1c>
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800688c:	2b51      	cmp	r3, #81	; 0x51
 800688e:	d00c      	beq.n	80068aa <ft5336_ReadID+0x36>
 8006890:	3401      	adds	r4, #1
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8006892:	21a8      	movs	r1, #168	; 0xa8
 8006894:	4628      	mov	r0, r5
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8006896:	b2e4      	uxtb	r4, r4
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8006898:	f000 f9e4 	bl	8006c64 <TS_IO_Read>
 800689c:	f88d 0007 	strb.w	r0, [sp, #7]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80068a0:	2c02      	cmp	r4, #2
    if(ucReadId == FT5336_ID_VALUE)
 80068a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80068a6:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80068a8:	d9f0      	bls.n	800688c <ft5336_ReadID+0x18>
  return (ucReadId);
 80068aa:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80068ae:	b003      	add	sp, #12
 80068b0:	bd30      	pop	{r4, r5, pc}
    TS_IO_Init();
 80068b2:	f000 f93f 	bl	8006b34 <TS_IO_Init>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80068b6:	2301      	movs	r3, #1
 80068b8:	7023      	strb	r3, [r4, #0]
 80068ba:	e7e4      	b.n	8006886 <ft5336_ReadID+0x12>
 80068bc:	200005a8 	.word	0x200005a8

080068c0 <ft5336_TS_DetectTouch>:
{
 80068c0:	b510      	push	{r4, lr}
  volatile uint8_t nbTouch = 0;
 80068c2:	2400      	movs	r4, #0
{
 80068c4:	b082      	sub	sp, #8
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80068c6:	b2c0      	uxtb	r0, r0
 80068c8:	2102      	movs	r1, #2
  volatile uint8_t nbTouch = 0;
 80068ca:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80068ce:	f000 f9c9 	bl	8006c64 <TS_IO_Read>
 80068d2:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 80068d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80068da:	f003 030f 	and.w	r3, r3, #15
 80068de:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80068e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80068e6:	2b05      	cmp	r3, #5
 80068e8:	d901      	bls.n	80068ee <ft5336_TS_DetectTouch+0x2e>
    nbTouch = 0;
 80068ea:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 80068ee:	f89d 1007 	ldrb.w	r1, [sp, #7]
  ft5336_handle.currActiveTouchIdx = 0;
 80068f2:	2200      	movs	r2, #0
  ft5336_handle.currActiveTouchNb = nbTouch;
 80068f4:	4b03      	ldr	r3, [pc, #12]	; (8006904 <ft5336_TS_DetectTouch+0x44>)
  return(nbTouch);
 80068f6:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 80068fa:	7059      	strb	r1, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 80068fc:	709a      	strb	r2, [r3, #2]
}
 80068fe:	b002      	add	sp, #8
 8006900:	bd10      	pop	{r4, pc}
 8006902:	bf00      	nop
 8006904:	200005a8 	.word	0x200005a8

08006908 <ft5336_TS_GetXY>:
{
 8006908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800690c:	4c2a      	ldr	r4, [pc, #168]	; (80069b8 <ft5336_TS_GetXY+0xb0>)
{
 800690e:	b082      	sub	sp, #8
  volatile uint8_t ucReadData = 0;
 8006910:	2700      	movs	r7, #0
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8006912:	78a3      	ldrb	r3, [r4, #2]
 8006914:	7865      	ldrb	r5, [r4, #1]
  volatile uint8_t ucReadData = 0;
 8006916:	f88d 7007 	strb.w	r7, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800691a:	429d      	cmp	r5, r3
 800691c:	d944      	bls.n	80069a8 <ft5336_TS_GetXY+0xa0>
 800691e:	2b09      	cmp	r3, #9
 8006920:	d845      	bhi.n	80069ae <ft5336_TS_GetXY+0xa6>
 8006922:	4e26      	ldr	r6, [pc, #152]	; (80069bc <ft5336_TS_GetXY+0xb4>)
 8006924:	18f5      	adds	r5, r6, r3
 8006926:	5cf3      	ldrb	r3, [r6, r3]
 8006928:	f895 a00c 	ldrb.w	sl, [r5, #12]
 800692c:	f895 9018 	ldrb.w	r9, [r5, #24]
 8006930:	f895 7024 	ldrb.w	r7, [r5, #36]	; 0x24
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8006934:	b2c5      	uxtb	r5, r0
 8006936:	4688      	mov	r8, r1
 8006938:	4619      	mov	r1, r3
 800693a:	4616      	mov	r6, r2
 800693c:	4628      	mov	r0, r5
 800693e:	f000 f991 	bl	8006c64 <TS_IO_Read>
 8006942:	4603      	mov	r3, r0
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8006944:	4651      	mov	r1, sl
 8006946:	4628      	mov	r0, r5
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8006948:	f88d 3007 	strb.w	r3, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800694c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006950:	80a3      	strh	r3, [r4, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8006952:	f000 f987 	bl	8006c64 <TS_IO_Read>
 8006956:	4603      	mov	r3, r0
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8006958:	88a2      	ldrh	r2, [r4, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800695a:	4649      	mov	r1, r9
 800695c:	4628      	mov	r0, r5
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800695e:	f88d 3007 	strb.w	r3, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8006962:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006966:	021b      	lsls	r3, r3, #8
 8006968:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800696c:	4313      	orrs	r3, r2
    *X = coord;
 800696e:	f8a8 3000 	strh.w	r3, [r8]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8006972:	80a3      	strh	r3, [r4, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8006974:	f000 f976 	bl	8006c64 <TS_IO_Read>
 8006978:	4603      	mov	r3, r0
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 800697a:	4639      	mov	r1, r7
 800697c:	4628      	mov	r0, r5
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800697e:	f88d 3007 	strb.w	r3, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8006982:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006986:	80a3      	strh	r3, [r4, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8006988:	f000 f96c 	bl	8006c64 <TS_IO_Read>
 800698c:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8006990:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006994:	88a1      	ldrh	r1, [r4, #4]
 8006996:	021b      	lsls	r3, r3, #8
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8006998:	78a2      	ldrb	r2, [r4, #2]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800699a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 800699e:	3201      	adds	r2, #1
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80069a0:	430b      	orrs	r3, r1
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80069a2:	70a2      	strb	r2, [r4, #2]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80069a4:	80a3      	strh	r3, [r4, #4]
    *Y = coord;
 80069a6:	8033      	strh	r3, [r6, #0]
}
 80069a8:	b002      	add	sp, #8
 80069aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80069ae:	46b9      	mov	r9, r7
 80069b0:	46ba      	mov	sl, r7
 80069b2:	463b      	mov	r3, r7
 80069b4:	e7be      	b.n	8006934 <ft5336_TS_GetXY+0x2c>
 80069b6:	bf00      	nop
 80069b8:	200005a8 	.word	0x200005a8
 80069bc:	0801da60 	.word	0x0801da60

080069c0 <ft5336_TS_EnableIT>:
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80069c0:	b2c0      	uxtb	r0, r0
 80069c2:	2201      	movs	r2, #1
 80069c4:	21a4      	movs	r1, #164	; 0xa4
 80069c6:	f000 b919 	b.w	8006bfc <TS_IO_Write>
 80069ca:	bf00      	nop

080069cc <ft5336_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80069cc:	b2c0      	uxtb	r0, r0
 80069ce:	2200      	movs	r2, #0
 80069d0:	21a4      	movs	r1, #164	; 0xa4
 80069d2:	f000 b913 	b.w	8006bfc <TS_IO_Write>
 80069d6:	bf00      	nop

080069d8 <ft5336_Reset>:
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop

080069dc <ft5336_TS_Start>:
 80069dc:	b2c0      	uxtb	r0, r0
 80069de:	2200      	movs	r2, #0
 80069e0:	21a4      	movs	r1, #164	; 0xa4
 80069e2:	f000 b90b 	b.w	8006bfc <TS_IO_Write>
 80069e6:	bf00      	nop

080069e8 <ft5336_TS_GetGestureID>:
{
 80069e8:	b510      	push	{r4, lr}
  volatile uint8_t ucReadData = 0;
 80069ea:	2300      	movs	r3, #0
{
 80069ec:	b082      	sub	sp, #8
 80069ee:	460c      	mov	r4, r1
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 80069f0:	b2c0      	uxtb	r0, r0
 80069f2:	2101      	movs	r1, #1
  volatile uint8_t ucReadData = 0;
 80069f4:	f88d 3007 	strb.w	r3, [sp, #7]
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 80069f8:	f000 f934 	bl	8006c64 <TS_IO_Read>
 80069fc:	f88d 0007 	strb.w	r0, [sp, #7]
  * pGestureId = ucReadData;
 8006a00:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006a04:	6023      	str	r3, [r4, #0]
}
 8006a06:	b002      	add	sp, #8
 8006a08:	bd10      	pop	{r4, pc}
 8006a0a:	bf00      	nop

08006a0c <ft5336_TS_GetTouchInfo>:
{
 8006a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8006a10:	4d1e      	ldr	r5, [pc, #120]	; (8006a8c <ft5336_TS_GetTouchInfo+0x80>)
{
 8006a12:	b082      	sub	sp, #8
  volatile uint8_t ucReadData = 0;
 8006a14:	2400      	movs	r4, #0
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8006a16:	786d      	ldrb	r5, [r5, #1]
  volatile uint8_t ucReadData = 0;
 8006a18:	f88d 4007 	strb.w	r4, [sp, #7]
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8006a1c:	428d      	cmp	r5, r1
 8006a1e:	d92e      	bls.n	8006a7e <ft5336_TS_GetTouchInfo+0x72>
 8006a20:	2909      	cmp	r1, #9
 8006a22:	d82f      	bhi.n	8006a84 <ft5336_TS_GetTouchInfo+0x78>
 8006a24:	4c1a      	ldr	r4, [pc, #104]	; (8006a90 <ft5336_TS_GetTouchInfo+0x84>)
 8006a26:	440c      	add	r4, r1
 8006a28:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8006a2c:	f894 503c 	ldrb.w	r5, [r4, #60]	; 0x3c
 8006a30:	f894 6048 	ldrb.w	r6, [r4, #72]	; 0x48
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8006a34:	b2c4      	uxtb	r4, r0
 8006a36:	4690      	mov	r8, r2
 8006a38:	461f      	mov	r7, r3
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	f000 f912 	bl	8006c64 <TS_IO_Read>
 8006a40:	4603      	mov	r3, r0
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8006a42:	4629      	mov	r1, r5
 8006a44:	4620      	mov	r0, r4
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8006a46:	f88d 3007 	strb.w	r3, [sp, #7]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8006a4a:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8006a4e:	9b08      	ldr	r3, [sp, #32]
 8006a50:	09ad      	lsrs	r5, r5, #6
 8006a52:	601d      	str	r5, [r3, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8006a54:	f000 f906 	bl	8006c64 <TS_IO_Read>
 8006a58:	4603      	mov	r3, r0
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8006a5a:	4631      	mov	r1, r6
 8006a5c:	4620      	mov	r0, r4
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8006a5e:	f88d 3007 	strb.w	r3, [sp, #7]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8006a62:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006a66:	f8c8 3000 	str.w	r3, [r8]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8006a6a:	f000 f8fb 	bl	8006c64 <TS_IO_Read>
 8006a6e:	f88d 0007 	strb.w	r0, [sp, #7]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8006a72:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8006a76:	0912      	lsrs	r2, r2, #4
 8006a78:	f002 0204 	and.w	r2, r2, #4
 8006a7c:	603a      	str	r2, [r7, #0]
}
 8006a7e:	b002      	add	sp, #8
 8006a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8006a84:	4626      	mov	r6, r4
 8006a86:	4625      	mov	r5, r4
 8006a88:	4621      	mov	r1, r4
 8006a8a:	e7d3      	b.n	8006a34 <ft5336_TS_GetTouchInfo+0x28>
 8006a8c:	200005a8 	.word	0x200005a8
 8006a90:	0801da60 	.word	0x0801da60

08006a94 <I2Cx_MspInit.constprop.9>:
/**
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
 8006a94:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8006a96:	4c21      	ldr	r4, [pc, #132]	; (8006b1c <I2Cx_MspInit.constprop.9+0x88>)

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8006a98:	2080      	movs	r0, #128	; 0x80
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
 8006a9a:	b089      	sub	sp, #36	; 0x24
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8006a9c:	2212      	movs	r2, #18
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8006a9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
 8006aa0:	2500      	movs	r5, #0
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006aa2:	4e1f      	ldr	r6, [pc, #124]	; (8006b20 <I2Cx_MspInit.constprop.9+0x8c>)
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8006aa4:	2702      	movs	r7, #2
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8006aa6:	4303      	orrs	r3, r0
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006aa8:	a903      	add	r1, sp, #12
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8006aaa:	6323      	str	r3, [r4, #48]	; 0x30
 8006aac:	6b23      	ldr	r3, [r4, #48]	; 0x30
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8006aae:	9204      	str	r2, [sp, #16]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8006ab0:	2204      	movs	r2, #4
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8006ab2:	4003      	ands	r3, r0
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8006ab4:	9003      	str	r0, [sp, #12]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006ab6:	4630      	mov	r0, r6
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8006ab8:	9207      	str	r2, [sp, #28]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8006aba:	9301      	str	r3, [sp, #4]
 8006abc:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8006abe:	9505      	str	r5, [sp, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8006ac0:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006ac2:	f7fb fe5b 	bl	800277c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8006ac6:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006aca:	a903      	add	r1, sp, #12
 8006acc:	4630      	mov	r0, r6
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8006ace:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006ad0:	f7fb fe54 	bl	800277c <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8006ad4:	6c23      	ldr	r3, [r4, #64]	; 0x40

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8006ad6:	462a      	mov	r2, r5
 8006ad8:	210f      	movs	r1, #15
 8006ada:	2048      	movs	r0, #72	; 0x48
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8006adc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006ae0:	6423      	str	r3, [r4, #64]	; 0x40
 8006ae2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ae4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ae8:	9302      	str	r3, [sp, #8]
 8006aea:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8006aec:	6a23      	ldr	r3, [r4, #32]
 8006aee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006af2:	6223      	str	r3, [r4, #32]
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8006af4:	6a23      	ldr	r3, [r4, #32]
 8006af6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006afa:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8006afc:	f7fb fa12 	bl	8001f24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8006b00:	2048      	movs	r0, #72	; 0x48
 8006b02:	f7fb fa49 	bl	8001f98 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8006b06:	462a      	mov	r2, r5
 8006b08:	210f      	movs	r1, #15
 8006b0a:	2049      	movs	r0, #73	; 0x49
 8006b0c:	f7fb fa0a 	bl	8001f24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8006b10:	2049      	movs	r0, #73	; 0x49
 8006b12:	f7fb fa41 	bl	8001f98 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8006b16:	b009      	add	sp, #36	; 0x24
 8006b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	40023800 	.word	0x40023800
 8006b20:	40021c00 	.word	0x40021c00

08006b24 <BSP_LED_Toggle>:
  if (Led == LED1)	/* Toggle LED connected to GPIO */
 8006b24:	b100      	cbz	r0, 8006b28 <BSP_LED_Toggle+0x4>
 8006b26:	4770      	bx	lr
    HAL_GPIO_TogglePin(gpio_led, GPIO_PIN[Led]);
 8006b28:	2102      	movs	r1, #2
 8006b2a:	4801      	ldr	r0, [pc, #4]	; (8006b30 <BSP_LED_Toggle+0xc>)
 8006b2c:	f7fc b818 	b.w	8002b60 <HAL_GPIO_TogglePin>
 8006b30:	40022000 	.word	0x40022000

08006b34 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8006b34:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8006b36:	4c2c      	ldr	r4, [pc, #176]	; (8006be8 <TS_IO_Init+0xb4>)
{
 8006b38:	b089      	sub	sp, #36	; 0x24
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8006b3a:	4620      	mov	r0, r4
 8006b3c:	f7fc fbcc 	bl	80032d8 <HAL_I2C_GetState>
 8006b40:	2800      	cmp	r0, #0
 8006b42:	d14e      	bne.n	8006be2 <TS_IO_Init+0xae>
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8006b44:	4e29      	ldr	r6, [pc, #164]	; (8006bec <TS_IO_Init+0xb8>)
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8006b46:	2780      	movs	r7, #128	; 0x80
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8006b48:	4b29      	ldr	r3, [pc, #164]	; (8006bf0 <TS_IO_Init+0xbc>)
 8006b4a:	4605      	mov	r5, r0
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8006b4c:	f04f 0e01 	mov.w	lr, #1
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8006b50:	2202      	movs	r2, #2
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8006b52:	6023      	str	r3, [r4, #0]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006b54:	a903      	add	r1, sp, #12
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8006b56:	6b33      	ldr	r3, [r6, #48]	; 0x30
    i2c_handler->Init.OwnAddress1      = 0;
 8006b58:	60a0      	str	r0, [r4, #8]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8006b5a:	433b      	orrs	r3, r7
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8006b5c:	6120      	str	r0, [r4, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8006b5e:	6160      	str	r0, [r4, #20]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8006b60:	2012      	movs	r0, #18
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8006b62:	6333      	str	r3, [r6, #48]	; 0x30
 8006b64:	6b33      	ldr	r3, [r6, #48]	; 0x30
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8006b66:	9004      	str	r0, [sp, #16]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8006b68:	403b      	ands	r3, r7
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006b6a:	4822      	ldr	r0, [pc, #136]	; (8006bf4 <TS_IO_Init+0xc0>)
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8006b6c:	f8c4 e00c 	str.w	lr, [r4, #12]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8006b70:	9301      	str	r3, [sp, #4]
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8006b72:	4b21      	ldr	r3, [pc, #132]	; (8006bf8 <TS_IO_Init+0xc4>)
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8006b74:	f8dd c004 	ldr.w	ip, [sp, #4]
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8006b78:	6063      	str	r3, [r4, #4]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8006b7a:	2304      	movs	r3, #4
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8006b7c:	9206      	str	r2, [sp, #24]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8006b7e:	9307      	str	r3, [sp, #28]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8006b80:	61e5      	str	r5, [r4, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8006b82:	6225      	str	r5, [r4, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8006b84:	9505      	str	r5, [sp, #20]
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8006b86:	9703      	str	r7, [sp, #12]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006b88:	f7fb fdf8 	bl	800277c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8006b8c:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006b90:	a903      	add	r1, sp, #12
 8006b92:	4818      	ldr	r0, [pc, #96]	; (8006bf4 <TS_IO_Init+0xc0>)
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8006b94:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006b96:	f7fb fdf1 	bl	800277c <HAL_GPIO_Init>
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8006b9a:	6c33      	ldr	r3, [r6, #64]	; 0x40
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8006b9c:	462a      	mov	r2, r5
 8006b9e:	210f      	movs	r1, #15
 8006ba0:	2048      	movs	r0, #72	; 0x48
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8006ba2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006ba6:	6433      	str	r3, [r6, #64]	; 0x40
 8006ba8:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8006baa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bae:	9302      	str	r3, [sp, #8]
 8006bb0:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8006bb2:	6a33      	ldr	r3, [r6, #32]
 8006bb4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006bb8:	6233      	str	r3, [r6, #32]
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8006bba:	6a33      	ldr	r3, [r6, #32]
 8006bbc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006bc0:	6233      	str	r3, [r6, #32]
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8006bc2:	f7fb f9af 	bl	8001f24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8006bc6:	2048      	movs	r0, #72	; 0x48
 8006bc8:	f7fb f9e6 	bl	8001f98 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8006bcc:	462a      	mov	r2, r5
 8006bce:	210f      	movs	r1, #15
 8006bd0:	2049      	movs	r0, #73	; 0x49
 8006bd2:	f7fb f9a7 	bl	8001f24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8006bd6:	2049      	movs	r0, #73	; 0x49
 8006bd8:	f7fb f9de 	bl	8001f98 <HAL_NVIC_EnableIRQ>
    HAL_I2C_Init(i2c_handler);
 8006bdc:	4620      	mov	r0, r4
 8006bde:	f7fc f931 	bl	8002e44 <HAL_I2C_Init>
  I2Cx_Init(&hI2cAudioHandler);
}
 8006be2:	b009      	add	sp, #36	; 0x24
 8006be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006be6:	bf00      	nop
 8006be8:	200005b0 	.word	0x200005b0
 8006bec:	40023800 	.word	0x40023800
 8006bf0:	40005c00 	.word	0x40005c00
 8006bf4:	40021c00 	.word	0x40021c00
 8006bf8:	40912732 	.word	0x40912732

08006bfc <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8006bfc:	b570      	push	{r4, r5, r6, lr}
 8006bfe:	b086      	sub	sp, #24
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8006c00:	2501      	movs	r5, #1
 8006c02:	4c15      	ldr	r4, [pc, #84]	; (8006c58 <TS_IO_Write+0x5c>)
 8006c04:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
{
 8006c08:	ab06      	add	r3, sp, #24
 8006c0a:	f803 2d01 	strb.w	r2, [r3, #-1]!
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8006c0e:	460a      	mov	r2, r1
 8006c10:	9300      	str	r3, [sp, #0]
 8006c12:	4601      	mov	r1, r0
 8006c14:	9602      	str	r6, [sp, #8]
 8006c16:	4620      	mov	r0, r4
 8006c18:	9501      	str	r5, [sp, #4]
 8006c1a:	462b      	mov	r3, r5
 8006c1c:	f7fc f982 	bl	8002f24 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8006c20:	b908      	cbnz	r0, 8006c26 <TS_IO_Write+0x2a>
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
}
 8006c22:	b006      	add	sp, #24
 8006c24:	bd70      	pop	{r4, r5, r6, pc}
  HAL_I2C_DeInit(i2c_handler);
 8006c26:	4620      	mov	r0, r4
 8006c28:	f7fc f962 	bl	8002ef0 <HAL_I2C_DeInit>
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8006c2c:	4620      	mov	r0, r4
 8006c2e:	f7fc fb53 	bl	80032d8 <HAL_I2C_GetState>
 8006c32:	2800      	cmp	r0, #0
 8006c34:	d1f5      	bne.n	8006c22 <TS_IO_Write+0x26>
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8006c36:	4a09      	ldr	r2, [pc, #36]	; (8006c5c <TS_IO_Write+0x60>)
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8006c38:	4b09      	ldr	r3, [pc, #36]	; (8006c60 <TS_IO_Write+0x64>)
    i2c_handler->Init.OwnAddress1      = 0;
 8006c3a:	60a0      	str	r0, [r4, #8]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8006c3c:	6120      	str	r0, [r4, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8006c3e:	6160      	str	r0, [r4, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8006c40:	61e0      	str	r0, [r4, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8006c42:	6220      	str	r0, [r4, #32]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8006c44:	60e5      	str	r5, [r4, #12]
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8006c46:	e884 000c 	stmia.w	r4, {r2, r3}
    I2Cx_MspInit(i2c_handler);
 8006c4a:	f7ff ff23 	bl	8006a94 <I2Cx_MspInit.constprop.9>
    HAL_I2C_Init(i2c_handler);
 8006c4e:	4620      	mov	r0, r4
 8006c50:	f7fc f8f8 	bl	8002e44 <HAL_I2C_Init>
}
 8006c54:	b006      	add	sp, #24
 8006c56:	bd70      	pop	{r4, r5, r6, pc}
 8006c58:	200005b0 	.word	0x200005b0
 8006c5c:	40005c00 	.word	0x40005c00
 8006c60:	40912732 	.word	0x40912732

08006c64 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8006c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c66:	b087      	sub	sp, #28
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8006c68:	2501      	movs	r5, #1
  uint8_t read_value = 0;
 8006c6a:	2700      	movs	r7, #0
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8006c6c:	4c17      	ldr	r4, [pc, #92]	; (8006ccc <TS_IO_Read+0x68>)
  uint8_t read_value = 0;
 8006c6e:	ab06      	add	r3, sp, #24
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8006c70:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8006c74:	460a      	mov	r2, r1
 8006c76:	4601      	mov	r1, r0
  uint8_t read_value = 0;
 8006c78:	f803 7d01 	strb.w	r7, [r3, #-1]!
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	9300      	str	r3, [sp, #0]
 8006c80:	462b      	mov	r3, r5
 8006c82:	9602      	str	r6, [sp, #8]
 8006c84:	9501      	str	r5, [sp, #4]
 8006c86:	f7fc fa31 	bl	80030ec <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8006c8a:	b918      	cbnz	r0, 8006c94 <TS_IO_Read+0x30>

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

  return read_value;
}
 8006c8c:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8006c90:	b007      	add	sp, #28
 8006c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_I2C_DeInit(i2c_handler);
 8006c94:	4620      	mov	r0, r4
 8006c96:	f7fc f92b 	bl	8002ef0 <HAL_I2C_DeInit>
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	f7fc fb1c 	bl	80032d8 <HAL_I2C_GetState>
 8006ca0:	2800      	cmp	r0, #0
 8006ca2:	d1f3      	bne.n	8006c8c <TS_IO_Read+0x28>
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8006ca4:	4a0a      	ldr	r2, [pc, #40]	; (8006cd0 <TS_IO_Read+0x6c>)
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8006ca6:	4b0b      	ldr	r3, [pc, #44]	; (8006cd4 <TS_IO_Read+0x70>)
    i2c_handler->Init.OwnAddress1      = 0;
 8006ca8:	60a0      	str	r0, [r4, #8]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8006caa:	6120      	str	r0, [r4, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8006cac:	6160      	str	r0, [r4, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8006cae:	61e0      	str	r0, [r4, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8006cb0:	6220      	str	r0, [r4, #32]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8006cb2:	60e5      	str	r5, [r4, #12]
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8006cb4:	e884 000c 	stmia.w	r4, {r2, r3}
    I2Cx_MspInit(i2c_handler);
 8006cb8:	f7ff feec 	bl	8006a94 <I2Cx_MspInit.constprop.9>
    HAL_I2C_Init(i2c_handler);
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	f7fc f8c1 	bl	8002e44 <HAL_I2C_Init>
}
 8006cc2:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8006cc6:	b007      	add	sp, #28
 8006cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	200005b0 	.word	0x200005b0
 8006cd0:	40005c00 	.word	0x40005c00
 8006cd4:	40912732 	.word	0x40912732

08006cd8 <TS_IO_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8006cd8:	f7fa bf9a 	b.w	8001c10 <HAL_Delay>

08006cdc <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8006cdc:	4b57      	ldr	r3, [pc, #348]	; (8006e3c <BSP_SDRAM_MspInit+0x160>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8006cde:	2108      	movs	r1, #8
  __HAL_RCC_FMC_CLK_ENABLE();
 8006ce0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{  
 8006ce2:	b5f0      	push	{r4, r5, r6, r7, lr}
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8006ce4:	f04f 0e01 	mov.w	lr, #1
{  
 8006ce8:	b08f      	sub	sp, #60	; 0x3c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006cea:	2502      	movs	r5, #2
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8006cec:	270c      	movs	r7, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8006cee:	ea42 020e 	orr.w	r2, r2, lr
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8006cf2:	ac0e      	add	r4, sp, #56	; 0x38
{  
 8006cf4:	4606      	mov	r6, r0
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8006cf6:	4852      	ldr	r0, [pc, #328]	; (8006e40 <BSP_SDRAM_MspInit+0x164>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8006cf8:	639a      	str	r2, [r3, #56]	; 0x38
 8006cfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cfc:	ea02 020e 	and.w	r2, r2, lr
 8006d00:	9201      	str	r2, [sp, #4]
 8006d02:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 8006d04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d06:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006d0a:	631a      	str	r2, [r3, #48]	; 0x30
 8006d0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d0e:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8006d12:	9202      	str	r2, [sp, #8]
 8006d14:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d18:	f042 0204 	orr.w	r2, r2, #4
 8006d1c:	631a      	str	r2, [r3, #48]	; 0x30
 8006d1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d20:	f002 0204 	and.w	r2, r2, #4
 8006d24:	9203      	str	r2, [sp, #12]
 8006d26:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d2a:	430a      	orrs	r2, r1
 8006d2c:	631a      	str	r2, [r3, #48]	; 0x30
 8006d2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d30:	400a      	ands	r2, r1
 8006d32:	9204      	str	r2, [sp, #16]
 8006d34:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006d36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d38:	f042 0210 	orr.w	r2, r2, #16
 8006d3c:	631a      	str	r2, [r3, #48]	; 0x30
 8006d3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d40:	f002 0210 	and.w	r2, r2, #16
 8006d44:	9205      	str	r2, [sp, #20]
 8006d46:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006d48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d4a:	f042 0220 	orr.w	r2, r2, #32
 8006d4e:	631a      	str	r2, [r3, #48]	; 0x30
 8006d50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d52:	f002 0220 	and.w	r2, r2, #32
 8006d56:	9206      	str	r2, [sp, #24]
 8006d58:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006d5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d60:	631a      	str	r2, [r3, #48]	; 0x30
 8006d62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d64:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8006d68:	9207      	str	r2, [sp, #28]
 8006d6a:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006d6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006d72:	631a      	str	r2, [r3, #48]	; 0x30
 8006d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8006d76:	f844 1d14 	str.w	r1, [r4, #-20]!
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8006d7a:	4621      	mov	r1, r4
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8006d80:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006d84:	950a      	str	r5, [sp, #40]	; 0x28
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006d86:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8006d88:	950c      	str	r5, [sp, #48]	; 0x30
  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8006d8a:	2500      	movs	r5, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006d8c:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8006d8e:	970d      	str	r7, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8006d90:	f7fb fcf4 	bl	800277c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8006d94:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006d98:	4621      	mov	r1, r4
 8006d9a:	482a      	ldr	r0, [pc, #168]	; (8006e44 <BSP_SDRAM_MspInit+0x168>)
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8006d9c:	f44f 4780 	mov.w	r7, #16384	; 0x4000
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8006da0:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006da2:	f7fb fceb 	bl	800277c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8006da6:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006daa:	4621      	mov	r1, r4
 8006dac:	4826      	ldr	r0, [pc, #152]	; (8006e48 <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8006dae:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006db0:	f7fb fce4 	bl	800277c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8006db4:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8006db8:	4621      	mov	r1, r4
 8006dba:	4824      	ldr	r0, [pc, #144]	; (8006e4c <BSP_SDRAM_MspInit+0x170>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8006dbc:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8006dbe:	f7fb fcdd 	bl	800277c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8006dc2:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006dc6:	4621      	mov	r1, r4
 8006dc8:	4821      	ldr	r0, [pc, #132]	; (8006e50 <BSP_SDRAM_MspInit+0x174>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8006dca:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006dcc:	f7fb fcd6 	bl	800277c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8006dd0:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8006dd2:	4621      	mov	r1, r4
 8006dd4:	481f      	ldr	r0, [pc, #124]	; (8006e54 <BSP_SDRAM_MspInit+0x178>)
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8006dd6:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8006dd8:	f7fb fcd0 	bl	800277c <HAL_GPIO_Init>
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8006ddc:	4b1e      	ldr	r3, [pc, #120]	; (8006e58 <BSP_SDRAM_MspInit+0x17c>)
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8006dde:	2280      	movs	r2, #128	; 0x80
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8006de0:	491e      	ldr	r1, [pc, #120]	; (8006e5c <BSP_SDRAM_MspInit+0x180>)
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8006de2:	f44f 6080 	mov.w	r0, #1024	; 0x400
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8006de6:	461c      	mov	r4, r3
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8006de8:	f44f 7c00 	mov.w	ip, #512	; 0x200
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006dec:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8006df0:	619a      	str	r2, [r3, #24]
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8006df2:	f844 1f10 	str.w	r1, [r4, #16]!
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8006df6:	2203      	movs	r2, #3
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8006df8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8006dfc:	641d      	str	r5, [r3, #64]	; 0x40
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8006dfe:	6218      	str	r0, [r3, #32]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8006e00:	4620      	mov	r0, r4
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8006e02:	6334      	str	r4, [r6, #48]	; 0x30
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8006e04:	6319      	str	r1, [r3, #48]	; 0x30
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8006e06:	639a      	str	r2, [r3, #56]	; 0x38
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8006e08:	f8c3 c01c 	str.w	ip, [r3, #28]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006e0c:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8006e10:	629f      	str	r7, [r3, #40]	; 0x28
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8006e12:	615d      	str	r5, [r3, #20]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8006e14:	62dd      	str	r5, [r3, #44]	; 0x2c
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8006e16:	635d      	str	r5, [r3, #52]	; 0x34
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8006e18:	63dd      	str	r5, [r3, #60]	; 0x3c
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8006e1a:	649e      	str	r6, [r3, #72]	; 0x48
  HAL_DMA_DeInit(&dma_handle);
 8006e1c:	f7fb f9b2 	bl	8002184 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8006e20:	4620      	mov	r0, r4
 8006e22:	f7fb f911 	bl	8002048 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8006e26:	462a      	mov	r2, r5
 8006e28:	210f      	movs	r1, #15
 8006e2a:	2038      	movs	r0, #56	; 0x38
 8006e2c:	f7fb f87a 	bl	8001f24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8006e30:	2038      	movs	r0, #56	; 0x38
 8006e32:	f7fb f8b1 	bl	8001f98 <HAL_NVIC_EnableIRQ>
}
 8006e36:	b00f      	add	sp, #60	; 0x3c
 8006e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	40023800 	.word	0x40023800
 8006e40:	40020800 	.word	0x40020800
 8006e44:	40020c00 	.word	0x40020c00
 8006e48:	40021000 	.word	0x40021000
 8006e4c:	40021400 	.word	0x40021400
 8006e50:	40021800 	.word	0x40021800
 8006e54:	40021c00 	.word	0x40021c00
 8006e58:	20000648 	.word	0x20000648
 8006e5c:	40026410 	.word	0x40026410

08006e60 <BSP_SDRAM_Init>:
{ 
 8006e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8006e64:	4840      	ldr	r0, [pc, #256]	; (8006f68 <BSP_SDRAM_Init+0x108>)
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8006e66:	2600      	movs	r6, #0
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8006e68:	4d40      	ldr	r5, [pc, #256]	; (8006f6c <BSP_SDRAM_Init+0x10c>)
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8006e6a:	2140      	movs	r1, #64	; 0x40
  Timing.LoadToActiveDelay    = 2;
 8006e6c:	4c40      	ldr	r4, [pc, #256]	; (8006f70 <BSP_SDRAM_Init+0x110>)
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8006e6e:	f44f 6e00 	mov.w	lr, #2048	; 0x800
  Timing.LoadToActiveDelay    = 2;
 8006e72:	f04f 0902 	mov.w	r9, #2
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8006e76:	f04f 0810 	mov.w	r8, #16
  Timing.ExitSelfRefreshDelay = 7;
 8006e7a:	2307      	movs	r3, #7
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8006e7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  Timing.SelfRefreshTime      = 4;
 8006e80:	f04f 0a04 	mov.w	sl, #4
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8006e84:	f44f 7780 	mov.w	r7, #256	; 0x100
{ 
 8006e88:	b083      	sub	sp, #12
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8006e8a:	6028      	str	r0, [r5, #0]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8006e8c:	6169      	str	r1, [r5, #20]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8006e8e:	4628      	mov	r0, r5
 8006e90:	4631      	mov	r1, r6
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8006e92:	f8c5 e020 	str.w	lr, [r5, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8006e96:	626a      	str	r2, [r5, #36]	; 0x24
  Timing.ExitSelfRefreshDelay = 7;
 8006e98:	6763      	str	r3, [r4, #116]	; 0x74
  Timing.RowCycleDelay        = 7;
 8006e9a:	67e3      	str	r3, [r4, #124]	; 0x7c
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8006e9c:	61af      	str	r7, [r5, #24]
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8006e9e:	2701      	movs	r7, #1
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8006ea0:	606e      	str	r6, [r5, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8006ea2:	60ae      	str	r6, [r5, #8]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8006ea4:	61ee      	str	r6, [r5, #28]
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8006ea6:	62ae      	str	r6, [r5, #40]	; 0x28
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8006ea8:	f8c5 a00c 	str.w	sl, [r5, #12]
  Timing.SelfRefreshTime      = 4;
 8006eac:	f8c4 a078 	str.w	sl, [r4, #120]	; 0x78
  Timing.LoadToActiveDelay    = 2;
 8006eb0:	f8c4 9070 	str.w	r9, [r4, #112]	; 0x70
  Timing.WriteRecoveryTime    = 2;
 8006eb4:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
  Timing.RPDelay              = 2;
 8006eb8:	f8c4 9084 	str.w	r9, [r4, #132]	; 0x84
  Timing.RCDDelay             = 2;
 8006ebc:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8006ec0:	f8c5 8010 	str.w	r8, [r5, #16]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8006ec4:	f7ff ff0a 	bl	8006cdc <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8006ec8:	f104 0170 	add.w	r1, r4, #112	; 0x70
 8006ecc:	4628      	mov	r0, r5
 8006ece:	f7fe f947 	bl	8005160 <HAL_SDRAM_Init>
 8006ed2:	1b83      	subs	r3, r0, r6
 8006ed4:	f8df b09c 	ldr.w	fp, [pc, #156]	; 8006f74 <BSP_SDRAM_Init+0x114>
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006ed8:	4621      	mov	r1, r4
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8006eda:	bf18      	it	ne
 8006edc:	2301      	movne	r3, #1
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006ede:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ee2:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 8006ee4:	9601      	str	r6, [sp, #4]
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8006ee6:	f88b 3000 	strb.w	r3, [fp]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006eea:	f8c4 8004 	str.w	r8, [r4, #4]
  Command.ModeRegisterDefinition = 0;
 8006eee:	60e6      	str	r6, [r4, #12]
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8006ef0:	6027      	str	r7, [r4, #0]
  Command.AutoRefreshNumber      = 1;
 8006ef2:	60a7      	str	r7, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006ef4:	f7fe f956 	bl	80051a4 <HAL_SDRAM_SendCommand>
  HAL_Delay(1);
 8006ef8:	4638      	mov	r0, r7
 8006efa:	f7fa fe89 	bl	8001c10 <HAL_Delay>
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8006efe:	4621      	mov	r1, r4
 8006f00:	4628      	mov	r0, r5
 8006f02:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8006f06:	f8c4 9000 	str.w	r9, [r4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006f0a:	f8c4 8004 	str.w	r8, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8006f0e:	60a7      	str	r7, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8006f10:	60e6      	str	r6, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8006f12:	f7fe f947 	bl	80051a4 <HAL_SDRAM_SendCommand>
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8006f16:	f04f 0e03 	mov.w	lr, #3
  Command.AutoRefreshNumber      = 8;
 8006f1a:	2308      	movs	r3, #8
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006f1c:	4621      	mov	r1, r4
 8006f1e:	4628      	mov	r0, r5
 8006f20:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8006f24:	f8c4 e000 	str.w	lr, [r4]
  Command.AutoRefreshNumber      = 8;
 8006f28:	60a3      	str	r3, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006f2a:	f8c4 8004 	str.w	r8, [r4, #4]
  Command.ModeRegisterDefinition = 0;
 8006f2e:	60e6      	str	r6, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006f30:	f7fe f938 	bl	80051a4 <HAL_SDRAM_SendCommand>
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8006f34:	f44f 7308 	mov.w	r3, #544	; 0x220
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006f38:	4621      	mov	r1, r4
 8006f3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f3e:	4628      	mov	r0, r5
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8006f40:	9301      	str	r3, [sp, #4]
  Command.ModeRegisterDefinition = tmpmrd;
 8006f42:	9b01      	ldr	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8006f44:	f8c4 a000 	str.w	sl, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
 8006f48:	60e3      	str	r3, [r4, #12]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006f4a:	f8c4 8004 	str.w	r8, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8006f4e:	60a7      	str	r7, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006f50:	f7fe f928 	bl	80051a4 <HAL_SDRAM_SendCommand>
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8006f54:	4628      	mov	r0, r5
 8006f56:	f240 6103 	movw	r1, #1539	; 0x603
 8006f5a:	f7fe f93d 	bl	80051d8 <HAL_SDRAM_ProgramRefreshRate>
}
 8006f5e:	f89b 0000 	ldrb.w	r0, [fp]
 8006f62:	b003      	add	sp, #12
 8006f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f68:	a0000140 	.word	0xa0000140
 8006f6c:	200190c8 	.word	0x200190c8
 8006f70:	20000648 	.word	0x20000648
 8006f74:	20000034 	.word	0x20000034

08006f78 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8006f78:	b538      	push	{r3, r4, r5, lr}
  uint8_t status = TS_OK;
  tsXBoundary = ts_SizeX;
 8006f7a:	4c0c      	ldr	r4, [pc, #48]	; (8006fac <BSP_TS_Init+0x34>)
  tsYBoundary = ts_SizeY;
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8006f7c:	4d0c      	ldr	r5, [pc, #48]	; (8006fb0 <BSP_TS_Init+0x38>)
  tsXBoundary = ts_SizeX;
 8006f7e:	8020      	strh	r0, [r4, #0]
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8006f80:	2070      	movs	r0, #112	; 0x70
 8006f82:	682b      	ldr	r3, [r5, #0]
  tsYBoundary = ts_SizeY;
 8006f84:	8061      	strh	r1, [r4, #2]
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8006f86:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8006f88:	686b      	ldr	r3, [r5, #4]
 8006f8a:	2070      	movs	r0, #112	; 0x70
 8006f8c:	4798      	blx	r3
 8006f8e:	2851      	cmp	r0, #81	; 0x51
 8006f90:	d001      	beq.n	8006f96 <BSP_TS_Init+0x1e>
    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8006f92:	2003      	movs	r0, #3
  }

  return status;
}
 8006f94:	bd38      	pop	{r3, r4, r5, pc}
    I2cAddress = TS_I2C_ADDRESS;
 8006f96:	2370      	movs	r3, #112	; 0x70
    tsOrientation = TS_SWAP_XY;
 8006f98:	2108      	movs	r1, #8
    tsDriver->Start(I2cAddress);
 8006f9a:	68ea      	ldr	r2, [r5, #12]
 8006f9c:	4618      	mov	r0, r3
    tsDriver = &ft5336_ts_drv;
 8006f9e:	6065      	str	r5, [r4, #4]
    I2cAddress = TS_I2C_ADDRESS;
 8006fa0:	7223      	strb	r3, [r4, #8]
    tsOrientation = TS_SWAP_XY;
 8006fa2:	7261      	strb	r1, [r4, #9]
    tsDriver->Start(I2cAddress);
 8006fa4:	4790      	blx	r2
  uint8_t status = TS_OK;
 8006fa6:	2000      	movs	r0, #0
 8006fa8:	bd38      	pop	{r3, r4, r5, pc}
 8006faa:	bf00      	nop
 8006fac:	20000734 	.word	0x20000734
 8006fb0:	2000000c 	.word	0x2000000c

08006fb4 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8006fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8006fb8:	4d73      	ldr	r5, [pc, #460]	; (8007188 <BSP_TS_GetState+0x1d4>)
{
 8006fba:	b095      	sub	sp, #84	; 0x54
  uint32_t weight = 0;
 8006fbc:	2400      	movs	r4, #0
{
 8006fbe:	4606      	mov	r6, r0
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8006fc0:	686b      	ldr	r3, [r5, #4]
{
 8006fc2:	9003      	str	r0, [sp, #12]
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	7a28      	ldrb	r0, [r5, #8]
  uint32_t weight = 0;
 8006fc8:	9404      	str	r4, [sp, #16]
  uint32_t area = 0;
 8006fca:	9405      	str	r4, [sp, #20]
  uint32_t event = 0;
 8006fcc:	9406      	str	r4, [sp, #24]
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8006fce:	4798      	blx	r3
 8006fd0:	7030      	strb	r0, [r6, #0]
  
  if(TS_State->touchDetected)
 8006fd2:	2800      	cmp	r0, #0
 8006fd4:	f000 8091 	beq.w	80070fa <BSP_TS_GetState+0x146>
 8006fd8:	4632      	mov	r2, r6
 8006fda:	af0e      	add	r7, sp, #56	; 0x38
 8006fdc:	ae11      	add	r6, sp, #68	; 0x44
 8006fde:	f10d 0a20 	add.w	sl, sp, #32
 8006fe2:	f102 0816 	add.w	r8, r2, #22
 8006fe6:	f102 0b02 	add.w	fp, r2, #2
 8006fea:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
  {
    for(index=0; index < TS_State->touchDetected; index++)
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8006fee:	686b      	ldr	r3, [r5, #4]
 8006ff0:	4632      	mov	r2, r6
 8006ff2:	4639      	mov	r1, r7
 8006ff4:	7a28      	ldrb	r0, [r5, #8]
 8006ff6:	695b      	ldr	r3, [r3, #20]
 8006ff8:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8006ffa:	7a6b      	ldrb	r3, [r5, #9]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	f000 8094 	beq.w	800712a <BSP_TS_GetState+0x176>
      {
        x[index] = brute_x[index];
        y[index] = brute_y[index];
      }

      if(tsOrientation & TS_SWAP_X)
 8007002:	0799      	lsls	r1, r3, #30
 8007004:	d504      	bpl.n	8007010 <BSP_TS_GetState+0x5c>
      {
        x[index] = 4096 - brute_x[index];
 8007006:	883a      	ldrh	r2, [r7, #0]
 8007008:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 800700c:	f8aa 2000 	strh.w	r2, [sl]
      }

      if(tsOrientation & TS_SWAP_Y)
 8007010:	075a      	lsls	r2, r3, #29
 8007012:	d504      	bpl.n	800701e <BSP_TS_GetState+0x6a>
      {
        y[index] = 4096 - brute_y[index];
 8007014:	8832      	ldrh	r2, [r6, #0]
 8007016:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 800701a:	f8a9 2000 	strh.w	r2, [r9]
      }

      if(tsOrientation & TS_SWAP_XY)
 800701e:	071b      	lsls	r3, r3, #28
 8007020:	d47c      	bmi.n	800711c <BSP_TS_GetState+0x168>
 8007022:	f8ba 3000 	ldrh.w	r3, [sl]
 8007026:	f8b9 2000 	ldrh.w	r2, [r9]
      {
        y[index] = brute_x[index];
        x[index] = brute_y[index];
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800702a:	4958      	ldr	r1, [pc, #352]	; (800718c <BSP_TS_GetState+0x1d8>)
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800702c:	4858      	ldr	r0, [pc, #352]	; (8007190 <BSP_TS_GetState+0x1dc>)
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800702e:	f851 c024 	ldr.w	ip, [r1, r4, lsl #2]
 8007032:	00a1      	lsls	r1, r4, #2
 8007034:	4563      	cmp	r3, ip
 8007036:	9102      	str	r1, [sp, #8]
 8007038:	bf8c      	ite	hi
 800703a:	eba3 010c 	subhi.w	r1, r3, ip
 800703e:	ebac 0103 	subls.w	r1, ip, r3
 8007042:	b289      	uxth	r1, r1
 8007044:	9102      	str	r1, [sp, #8]
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8007046:	00a1      	lsls	r1, r4, #2
 8007048:	f850 e001 	ldr.w	lr, [r0, r1]

      if ((x_diff + y_diff) > 5)
 800704c:	9902      	ldr	r1, [sp, #8]
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800704e:	4572      	cmp	r2, lr
 8007050:	bf8c      	ite	hi
 8007052:	eba2 000e 	subhi.w	r0, r2, lr
 8007056:	ebae 0002 	subls.w	r0, lr, r2
 800705a:	b280      	uxth	r0, r0
      if ((x_diff + y_diff) > 5)
 800705c:	4401      	add	r1, r0
 800705e:	2905      	cmp	r1, #5
 8007060:	dd06      	ble.n	8007070 <BSP_TS_GetState+0xbc>
      {
        _x[index] = x[index];
 8007062:	484a      	ldr	r0, [pc, #296]	; (800718c <BSP_TS_GetState+0x1d8>)
 8007064:	00a1      	lsls	r1, r4, #2
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8007066:	4696      	mov	lr, r2
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8007068:	469c      	mov	ip, r3
        _x[index] = x[index];
 800706a:	5043      	str	r3, [r0, r1]
        _y[index] = y[index];
 800706c:	3014      	adds	r0, #20
 800706e:	5042      	str	r2, [r0, r1]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8007070:	7a28      	ldrb	r0, [r5, #8]
 8007072:	2870      	cmp	r0, #112	; 0x70
 8007074:	d009      	beq.n	800708a <BSP_TS_GetState+0xd6>
        TS_State->touchY[index] = y[index];
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8007076:	882b      	ldrh	r3, [r5, #0]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8007078:	886a      	ldrh	r2, [r5, #2]
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 800707a:	fb0c f303 	mul.w	r3, ip, r3
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800707e:	fb0e f202 	mul.w	r2, lr, r2
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8007082:	f3c3 330f 	ubfx	r3, r3, #12, #16
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8007086:	f3c2 320f 	ubfx	r2, r2, #12, #16
 800708a:	f8ab 200a 	strh.w	r2, [fp, #10]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 800708e:	aa06      	add	r2, sp, #24
 8007090:	f82b 3b02 	strh.w	r3, [fp], #2
 8007094:	4621      	mov	r1, r4
 8007096:	ab05      	add	r3, sp, #20
 8007098:	9200      	str	r2, [sp, #0]
 800709a:	aa04      	add	r2, sp, #16
 800709c:	f7ff fcb6 	bl	8006a0c <ft5336_TS_GetTouchInfo>
      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
      TS_State->touchArea[index]   = area;

      /* Remap touch event */
      switch(event)
 80070a0:	a904      	add	r1, sp, #16
 80070a2:	c90e      	ldmia	r1, {r1, r2, r3}
      TS_State->touchWeight[index] = weight;
 80070a4:	f808 1b01 	strb.w	r1, [r8], #1
      TS_State->touchArea[index]   = area;
 80070a8:	f888 2009 	strb.w	r2, [r8, #9]
      switch(event)
 80070ac:	2b03      	cmp	r3, #3
 80070ae:	d807      	bhi.n	80070c0 <BSP_TS_GetState+0x10c>
 80070b0:	e8df f003 	tbb	[pc, r3]
 80070b4:	022f262b 	.word	0x022f262b
          break;
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
          break;
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80070b8:	f04f 0300 	mov.w	r3, #0
 80070bc:	f888 3004 	strb.w	r3, [r8, #4]
    for(index=0; index < TS_State->touchDetected; index++)
 80070c0:	9b03      	ldr	r3, [sp, #12]
 80070c2:	3401      	adds	r4, #1
 80070c4:	3702      	adds	r7, #2
 80070c6:	3602      	adds	r6, #2
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	f10a 0a02 	add.w	sl, sl, #2
 80070ce:	f109 0902 	add.w	r9, r9, #2
 80070d2:	42a3      	cmp	r3, r4
 80070d4:	d88b      	bhi.n	8006fee <BSP_TS_GetState+0x3a>
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
  uint32_t gestureId = 0;
 80070d6:	a914      	add	r1, sp, #80	; 0x50
 80070d8:	2400      	movs	r4, #0
  uint8_t  ts_status = TS_OK;

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 80070da:	7a28      	ldrb	r0, [r5, #8]
  uint32_t gestureId = 0;
 80070dc:	f841 4d34 	str.w	r4, [r1, #-52]!
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 80070e0:	f7ff fc82 	bl	80069e8 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 80070e4:	9807      	ldr	r0, [sp, #28]
 80070e6:	2818      	cmp	r0, #24
 80070e8:	d039      	beq.n	800715e <BSP_TS_GetState+0x1aa>
 80070ea:	d925      	bls.n	8007138 <BSP_TS_GetState+0x184>
 80070ec:	2840      	cmp	r0, #64	; 0x40
 80070ee:	d02c      	beq.n	800714a <BSP_TS_GetState+0x196>
 80070f0:	2849      	cmp	r0, #73	; 0x49
 80070f2:	d043      	beq.n	800717c <BSP_TS_GetState+0x1c8>
 80070f4:	281c      	cmp	r0, #28
 80070f6:	d03c      	beq.n	8007172 <BSP_TS_GetState+0x1be>
      break;
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
      break;
    default :
      ts_status = TS_ERROR;
 80070f8:	2001      	movs	r0, #1
}
 80070fa:	b015      	add	sp, #84	; 0x54
 80070fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8007100:	f04f 0302 	mov.w	r3, #2
 8007104:	f888 3004 	strb.w	r3, [r8, #4]
          break;
 8007108:	e7da      	b.n	80070c0 <BSP_TS_GetState+0x10c>
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 800710a:	2301      	movs	r3, #1
 800710c:	f888 3004 	strb.w	r3, [r8, #4]
          break;
 8007110:	e7d6      	b.n	80070c0 <BSP_TS_GetState+0x10c>
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8007112:	f04f 0303 	mov.w	r3, #3
 8007116:	f888 3004 	strb.w	r3, [r8, #4]
          break;
 800711a:	e7d1      	b.n	80070c0 <BSP_TS_GetState+0x10c>
        y[index] = brute_x[index];
 800711c:	883a      	ldrh	r2, [r7, #0]
        x[index] = brute_y[index];
 800711e:	8833      	ldrh	r3, [r6, #0]
        y[index] = brute_x[index];
 8007120:	f8a9 2000 	strh.w	r2, [r9]
        x[index] = brute_y[index];
 8007124:	f8aa 3000 	strh.w	r3, [sl]
 8007128:	e77f      	b.n	800702a <BSP_TS_GetState+0x76>
        x[index] = brute_x[index];
 800712a:	8839      	ldrh	r1, [r7, #0]
        y[index] = brute_y[index];
 800712c:	8832      	ldrh	r2, [r6, #0]
        x[index] = brute_x[index];
 800712e:	f8aa 1000 	strh.w	r1, [sl]
        y[index] = brute_y[index];
 8007132:	f8a9 2000 	strh.w	r2, [r9]
 8007136:	e772      	b.n	800701e <BSP_TS_GetState+0x6a>
  switch(gestureId)
 8007138:	2810      	cmp	r0, #16
 800713a:	d00b      	beq.n	8007154 <BSP_TS_GetState+0x1a0>
 800713c:	2814      	cmp	r0, #20
 800713e:	d013      	beq.n	8007168 <BSP_TS_GetState+0x1b4>
 8007140:	2800      	cmp	r0, #0
 8007142:	d1d9      	bne.n	80070f8 <BSP_TS_GetState+0x144>
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8007144:	9b03      	ldr	r3, [sp, #12]
 8007146:	6298      	str	r0, [r3, #40]	; 0x28
 8007148:	e7d7      	b.n	80070fa <BSP_TS_GetState+0x146>
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 800714a:	2305      	movs	r3, #5
 800714c:	9a03      	ldr	r2, [sp, #12]
  uint8_t  ts_status = TS_OK;
 800714e:	4620      	mov	r0, r4
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8007150:	6293      	str	r3, [r2, #40]	; 0x28
 8007152:	e7d2      	b.n	80070fa <BSP_TS_GetState+0x146>
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8007154:	2301      	movs	r3, #1
 8007156:	9a03      	ldr	r2, [sp, #12]
  uint8_t  ts_status = TS_OK;
 8007158:	4620      	mov	r0, r4
      TS_State->gestureId = GEST_ID_MOVE_UP;
 800715a:	6293      	str	r3, [r2, #40]	; 0x28
 800715c:	e7cd      	b.n	80070fa <BSP_TS_GetState+0x146>
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 800715e:	2303      	movs	r3, #3
 8007160:	9a03      	ldr	r2, [sp, #12]
  uint8_t  ts_status = TS_OK;
 8007162:	4620      	mov	r0, r4
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8007164:	6293      	str	r3, [r2, #40]	; 0x28
 8007166:	e7c8      	b.n	80070fa <BSP_TS_GetState+0x146>
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8007168:	2302      	movs	r3, #2
 800716a:	9a03      	ldr	r2, [sp, #12]
  uint8_t  ts_status = TS_OK;
 800716c:	4620      	mov	r0, r4
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 800716e:	6293      	str	r3, [r2, #40]	; 0x28
 8007170:	e7c3      	b.n	80070fa <BSP_TS_GetState+0x146>
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8007172:	2304      	movs	r3, #4
 8007174:	9a03      	ldr	r2, [sp, #12]
  uint8_t  ts_status = TS_OK;
 8007176:	4620      	mov	r0, r4
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8007178:	6293      	str	r3, [r2, #40]	; 0x28
 800717a:	e7be      	b.n	80070fa <BSP_TS_GetState+0x146>
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 800717c:	2306      	movs	r3, #6
 800717e:	9a03      	ldr	r2, [sp, #12]
  uint8_t  ts_status = TS_OK;
 8007180:	4620      	mov	r0, r4
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8007182:	6293      	str	r3, [r2, #40]	; 0x28
 8007184:	e7b9      	b.n	80070fa <BSP_TS_GetState+0x146>
 8007186:	bf00      	nop
 8007188:	20000734 	.word	0x20000734
 800718c:	20000740 	.word	0x20000740
 8007190:	20000754 	.word	0x20000754

08007194 <ex_disp_fill>:


/* Write a pixel array (called 'map') to the a specific area on the display
 * This function is required only when LV_VDB_SIZE == 0 in lv_conf.h*/
static void ex_disp_fill(int32_t x1, int32_t y1, int32_t x2, int32_t y2,  lv_color_t color)
{
 8007194:	b4f0      	push	{r4, r5, r6, r7}
    /*Return if the area is out the screen*/
    if(x2 < 0) return;
    if(y2 < 0) return;
    if(x1 > TFT_HOR_RES - 1) return;
    if(y1 > TFT_VER_RES - 1) return;
 8007196:	f240 160f 	movw	r6, #271	; 0x10f
    if(x1 > TFT_HOR_RES - 1) return;
 800719a:	f240 17df 	movw	r7, #479	; 0x1df
{
 800719e:	9c04      	ldr	r4, [sp, #16]
    if(y1 > TFT_VER_RES - 1) return;
 80071a0:	42b8      	cmp	r0, r7
 80071a2:	bfd8      	it	le
 80071a4:	42b1      	cmple	r1, r6
 80071a6:	bfcc      	ite	gt
 80071a8:	2501      	movgt	r5, #1
 80071aa:	2500      	movle	r5, #0
 80071ac:	ea55 75d3 	orrs.w	r5, r5, r3, lsr #31
 80071b0:	d122      	bne.n	80071f8 <ex_disp_fill+0x64>
 80071b2:	2a00      	cmp	r2, #0
 80071b4:	db20      	blt.n	80071f8 <ex_disp_fill+0x64>

    /*Truncate the area to the screen*/
    int32_t act_x1 = x1 < 0 ? 0 : x1;
    int32_t act_y1 = y1 < 0 ? 0 : y1;
    int32_t act_x2 = x2 > TFT_HOR_RES - 1 ? TFT_HOR_RES - 1 : x2;
 80071b6:	42ba      	cmp	r2, r7
    int32_t act_x1 = x1 < 0 ? 0 : x1;
 80071b8:	ea20 75e0 	bic.w	r5, r0, r0, asr #31
    int32_t act_x2 = x2 > TFT_HOR_RES - 1 ? TFT_HOR_RES - 1 : x2;
 80071bc:	bfa8      	it	ge
 80071be:	463a      	movge	r2, r7
    int32_t act_y2 = y2 > TFT_VER_RES - 1 ? TFT_VER_RES - 1 : y2;
 80071c0:	42b3      	cmp	r3, r6
    int32_t act_y1 = y1 < 0 ? 0 : y1;
 80071c2:	ea21 77e1 	bic.w	r7, r1, r1, asr #31
    int32_t act_y2 = y2 > TFT_VER_RES - 1 ? TFT_VER_RES - 1 : y2;
 80071c6:	bfa8      	it	ge
 80071c8:	4633      	movge	r3, r6

    uint32_t x;
    uint32_t y;

    /*Fill the remaining area*/
    for(x = act_x1; x <= act_x2; x++) {
 80071ca:	4295      	cmp	r5, r2
 80071cc:	d814      	bhi.n	80071f8 <ex_disp_fill+0x64>
 80071ce:	42bb      	cmp	r3, r7
 80071d0:	d312      	bcc.n	80071f8 <ex_disp_fill+0x64>
 80071d2:	ebc7 1607 	rsb	r6, r7, r7, lsl #4
 80071d6:	eb05 1646 	add.w	r6, r5, r6, lsl #5
 80071da:	00b6      	lsls	r6, r6, #2
 80071dc:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
{
 80071e0:	4630      	mov	r0, r6
 80071e2:	4639      	mov	r1, r7
        for(y = act_y1; y <= act_y2; y++) {
 80071e4:	3101      	adds	r1, #1
            my_fb[y * TFT_HOR_RES + x] = color.full;
 80071e6:	6004      	str	r4, [r0, #0]
 80071e8:	f500 60f0 	add.w	r0, r0, #1920	; 0x780
        for(y = act_y1; y <= act_y2; y++) {
 80071ec:	4299      	cmp	r1, r3
 80071ee:	d9f9      	bls.n	80071e4 <ex_disp_fill+0x50>
    for(x = act_x1; x <= act_x2; x++) {
 80071f0:	3501      	adds	r5, #1
 80071f2:	3604      	adds	r6, #4
 80071f4:	4295      	cmp	r5, r2
 80071f6:	d9f3      	bls.n	80071e0 <ex_disp_fill+0x4c>
        }
    }
}
 80071f8:	bcf0      	pop	{r4, r5, r6, r7}
 80071fa:	4770      	bx	lr

080071fc <DMA2D_TransferError>:
  * @note   This example shows a simple way to report DMA2D transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
static void DMA2D_TransferError(DMA2D_HandleTypeDef *hdma2d)
{
 80071fc:	4770      	bx	lr
 80071fe:	bf00      	nop

08007200 <gpu_mem_fill>:
{
 8007200:	b5f0      	push	{r4, r5, r6, r7, lr}
    HAL_DMA2D_PollForTransfer(&Dma2dHandle, 100);
 8007202:	4c11      	ldr	r4, [pc, #68]	; (8007248 <gpu_mem_fill+0x48>)
{
 8007204:	b083      	sub	sp, #12
 8007206:	4605      	mov	r5, r0
 8007208:	460f      	mov	r7, r1
    HAL_DMA2D_PollForTransfer(&Dma2dHandle, 100);
 800720a:	4620      	mov	r0, r4
 800720c:	2164      	movs	r1, #100	; 0x64
{
 800720e:	4616      	mov	r6, r2
    HAL_DMA2D_PollForTransfer(&Dma2dHandle, 100);
 8007210:	f7fb f9c8 	bl	80025a4 <HAL_DMA2D_PollForTransfer>
    Dma2dHandle.Init.Mode = DMA2D_R2M;
 8007214:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    if(HAL_DMA2D_Init(&Dma2dHandle) != HAL_OK)
 8007218:	4620      	mov	r0, r4
    Dma2dHandle.Init.Mode = DMA2D_R2M;
 800721a:	6063      	str	r3, [r4, #4]
    if(HAL_DMA2D_Init(&Dma2dHandle) != HAL_OK)
 800721c:	f7fb f938 	bl	8002490 <HAL_DMA2D_Init>
 8007220:	b100      	cbz	r0, 8007224 <gpu_mem_fill+0x24>
 8007222:	e7fe      	b.n	8007222 <gpu_mem_fill+0x22>
    Dma2dHandle.LayerCfg[1].InputAlpha = 0xff;
 8007224:	23ff      	movs	r3, #255	; 0xff
    HAL_DMA2D_ConfigLayer(&Dma2dHandle, 1);
 8007226:	2101      	movs	r1, #1
 8007228:	4620      	mov	r0, r4
    Dma2dHandle.LayerCfg[1].InputAlpha = 0xff;
 800722a:	6363      	str	r3, [r4, #52]	; 0x34
    HAL_DMA2D_ConfigLayer(&Dma2dHandle, 1);
 800722c:	f7fb fa50 	bl	80026d0 <HAL_DMA2D_ConfigLayer>
    HAL_DMA2D_BlendingStart(&Dma2dHandle, (uint32_t) lv_color_to32(color), (uint32_t) dest, (uint32_t)dest, length, 1);
 8007230:	2301      	movs	r3, #1
 8007232:	4631      	mov	r1, r6
 8007234:	462a      	mov	r2, r5
 8007236:	9700      	str	r7, [sp, #0]
 8007238:	9301      	str	r3, [sp, #4]
 800723a:	462b      	mov	r3, r5
 800723c:	4620      	mov	r0, r4
 800723e:	f7fb f959 	bl	80024f4 <HAL_DMA2D_BlendingStart>
}
 8007242:	b003      	add	sp, #12
 8007244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007246:	bf00      	nop
 8007248:	20000768 	.word	0x20000768

0800724c <gpu_mem_blend>:
{
 800724c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_DMA2D_PollForTransfer(&Dma2dHandle, 100);
 8007250:	4c11      	ldr	r4, [pc, #68]	; (8007298 <gpu_mem_blend+0x4c>)
{
 8007252:	b082      	sub	sp, #8
 8007254:	4605      	mov	r5, r0
 8007256:	460e      	mov	r6, r1
    HAL_DMA2D_PollForTransfer(&Dma2dHandle, 100);
 8007258:	4620      	mov	r0, r4
 800725a:	2164      	movs	r1, #100	; 0x64
{
 800725c:	4698      	mov	r8, r3
 800725e:	4617      	mov	r7, r2
    HAL_DMA2D_PollForTransfer(&Dma2dHandle, 100);
 8007260:	f7fb f9a0 	bl	80025a4 <HAL_DMA2D_PollForTransfer>
    Dma2dHandle.Init.Mode         = DMA2D_M2M_BLEND;
 8007264:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    if(HAL_DMA2D_Init(&Dma2dHandle) != HAL_OK)
 8007268:	4620      	mov	r0, r4
    Dma2dHandle.Init.Mode         = DMA2D_M2M_BLEND;
 800726a:	6063      	str	r3, [r4, #4]
    if(HAL_DMA2D_Init(&Dma2dHandle) != HAL_OK)
 800726c:	f7fb f910 	bl	8002490 <HAL_DMA2D_Init>
 8007270:	b100      	cbz	r0, 8007274 <gpu_mem_blend+0x28>
 8007272:	e7fe      	b.n	8007272 <gpu_mem_blend+0x26>
    HAL_DMA2D_ConfigLayer(&Dma2dHandle, 1);
 8007274:	2101      	movs	r1, #1
 8007276:	4620      	mov	r0, r4
    Dma2dHandle.LayerCfg[1].InputAlpha = opa;
 8007278:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
    HAL_DMA2D_ConfigLayer(&Dma2dHandle, 1);
 800727c:	f7fb fa28 	bl	80026d0 <HAL_DMA2D_ConfigLayer>
    HAL_DMA2D_BlendingStart(&Dma2dHandle, (uint32_t) src, (uint32_t) dest, (uint32_t)dest, length, 1);
 8007280:	2301      	movs	r3, #1
 8007282:	4631      	mov	r1, r6
 8007284:	462a      	mov	r2, r5
 8007286:	9700      	str	r7, [sp, #0]
 8007288:	9301      	str	r3, [sp, #4]
 800728a:	462b      	mov	r3, r5
 800728c:	4620      	mov	r0, r4
 800728e:	f7fb f931 	bl	80024f4 <HAL_DMA2D_BlendingStart>
}
 8007292:	b002      	add	sp, #8
 8007294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007298:	20000768 	.word	0x20000768

0800729c <DMA_TransferComplete>:
{
 800729c:	b570      	push	{r4, r5, r6, lr}
    y_fill_act ++;
 800729e:	4c10      	ldr	r4, [pc, #64]	; (80072e0 <DMA_TransferComplete+0x44>)
 80072a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    if(y_fill_act > y2_fill) {
 80072a2:	6c62      	ldr	r2, [r4, #68]	; 0x44
    y_fill_act ++;
 80072a4:	3301      	adds	r3, #1
    if(y_fill_act > y2_fill) {
 80072a6:	4293      	cmp	r3, r2
    y_fill_act ++;
 80072a8:	6423      	str	r3, [r4, #64]	; 0x40
    if(y_fill_act > y2_fill) {
 80072aa:	dc15      	bgt.n	80072d8 <DMA_TransferComplete+0x3c>
    	uint32_t length = (x2_flush - x1_flush + 1);
 80072ac:	6ca6      	ldr	r6, [r4, #72]	; 0x48
        if(HAL_DMA_Start_IT(han,(uint32_t)buf_to_flush, (uint32_t)&my_fb[y_fill_act * TFT_HOR_RES + x1_flush],
 80072ae:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    	uint32_t length = (x2_flush - x1_flush + 1);
 80072b2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
        if(HAL_DMA_Start_IT(han,(uint32_t)buf_to_flush, (uint32_t)&my_fb[y_fill_act * TFT_HOR_RES + x1_flush],
 80072b4:	eb06 1243 	add.w	r2, r6, r3, lsl #5
        buf_to_flush += x2_flush - x1_flush + 1;
 80072b8:	6d25      	ldr	r5, [r4, #80]	; 0x50
    	uint32_t length = (x2_flush - x1_flush + 1);
 80072ba:	1b8b      	subs	r3, r1, r6
        if(HAL_DMA_Start_IT(han,(uint32_t)buf_to_flush, (uint32_t)&my_fb[y_fill_act * TFT_HOR_RES + x1_flush],
 80072bc:	0092      	lsls	r2, r2, #2
    	uint32_t length = (x2_flush - x1_flush + 1);
 80072be:	3301      	adds	r3, #1
        if(HAL_DMA_Start_IT(han,(uint32_t)buf_to_flush, (uint32_t)&my_fb[y_fill_act * TFT_HOR_RES + x1_flush],
 80072c0:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
        buf_to_flush += x2_flush - x1_flush + 1;
 80072c4:	eb05 0583 	add.w	r5, r5, r3, lsl #2
        if(HAL_DMA_Start_IT(han,(uint32_t)buf_to_flush, (uint32_t)&my_fb[y_fill_act * TFT_HOR_RES + x1_flush],
 80072c8:	005b      	lsls	r3, r3, #1
 80072ca:	4629      	mov	r1, r5
        buf_to_flush += x2_flush - x1_flush + 1;
 80072cc:	6525      	str	r5, [r4, #80]	; 0x50
        if(HAL_DMA_Start_IT(han,(uint32_t)buf_to_flush, (uint32_t)&my_fb[y_fill_act * TFT_HOR_RES + x1_flush],
 80072ce:	f7fa ff9b 	bl	8002208 <HAL_DMA_Start_IT>
 80072d2:	b100      	cbz	r0, 80072d6 <DMA_TransferComplete+0x3a>
 80072d4:	e7fe      	b.n	80072d4 <DMA_TransferComplete+0x38>
 80072d6:	bd70      	pop	{r4, r5, r6, pc}
}
 80072d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_flush_ready();
 80072dc:	f005 bd4e 	b.w	800cd7c <lv_flush_ready>
 80072e0:	20000768 	.word	0x20000768

080072e4 <ex_disp_flush>:
{
 80072e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(x1 > TFT_HOR_RES - 1) return;
 80072e6:	f240 17df 	movw	r7, #479	; 0x1df
    if(y1 > TFT_VER_RES - 1) return;
 80072ea:	f240 1e0f 	movw	lr, #271	; 0x10f
{
 80072ee:	9e06      	ldr	r6, [sp, #24]
    if(y1 > TFT_VER_RES - 1) return;
 80072f0:	4571      	cmp	r1, lr
 80072f2:	bfd8      	it	le
 80072f4:	42b8      	cmple	r0, r7
 80072f6:	bfcc      	ite	gt
 80072f8:	2401      	movgt	r4, #1
 80072fa:	2400      	movle	r4, #0
 80072fc:	ea54 74d3 	orrs.w	r4, r4, r3, lsr #31
 8007300:	d125      	bne.n	800734e <ex_disp_flush+0x6a>
 8007302:	2a00      	cmp	r2, #0
 8007304:	db23      	blt.n	800734e <ex_disp_flush+0x6a>
 8007306:	4615      	mov	r5, r2
 8007308:	461a      	mov	r2, r3
    int32_t act_y1 = y1 < 0 ? 0 : y1;
 800730a:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
    int32_t act_x1 = x1 < 0 ? 0 : x1;
 800730e:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
    int32_t act_x2 = x2 > TFT_HOR_RES - 1 ? TFT_HOR_RES - 1 : x2;
 8007312:	42bd      	cmp	r5, r7
    err = HAL_DMA_Start_IT(&DmaHandle,(uint32_t)buf_to_flush, (uint32_t)&my_fb[y_fill_act * TFT_HOR_RES + x1_flush],
 8007314:	ebc4 1c04 	rsb	ip, r4, r4, lsl #4
    int32_t act_x2 = x2 > TFT_HOR_RES - 1 ? TFT_HOR_RES - 1 : x2;
 8007318:	bfa8      	it	ge
 800731a:	463d      	movge	r5, r7
    int32_t act_y2 = y2 > TFT_VER_RES - 1 ? TFT_VER_RES - 1 : y2;
 800731c:	4572      	cmp	r2, lr
    x1_flush = act_x1;
 800731e:	4f0c      	ldr	r7, [pc, #48]	; (8007350 <ex_disp_flush+0x6c>)
    int32_t act_y2 = y2 > TFT_VER_RES - 1 ? TFT_VER_RES - 1 : y2;
 8007320:	bfa8      	it	ge
 8007322:	4672      	movge	r2, lr
    uint32_t length = (x2_flush - x1_flush + 1);
 8007324:	1ae8      	subs	r0, r5, r3
    x1_flush = act_x1;
 8007326:	64bb      	str	r3, [r7, #72]	; 0x48
    int32_t act_y2 = y2 > TFT_VER_RES - 1 ? TFT_VER_RES - 1 : y2;
 8007328:	4611      	mov	r1, r2
    err = HAL_DMA_Start_IT(&DmaHandle,(uint32_t)buf_to_flush, (uint32_t)&my_fb[y_fill_act * TFT_HOR_RES + x1_flush],
 800732a:	eb03 124c 	add.w	r2, r3, ip, lsl #5
    uint32_t length = (x2_flush - x1_flush + 1);
 800732e:	1c43      	adds	r3, r0, #1
    err = HAL_DMA_Start_IT(&DmaHandle,(uint32_t)buf_to_flush, (uint32_t)&my_fb[y_fill_act * TFT_HOR_RES + x1_flush],
 8007330:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8007334:	0092      	lsls	r2, r2, #2
    y2_fill = act_y2;
 8007336:	6479      	str	r1, [r7, #68]	; 0x44
    err = HAL_DMA_Start_IT(&DmaHandle,(uint32_t)buf_to_flush, (uint32_t)&my_fb[y_fill_act * TFT_HOR_RES + x1_flush],
 8007338:	005b      	lsls	r3, r3, #1
 800733a:	4631      	mov	r1, r6
 800733c:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
    x2_flush = act_x2;
 8007340:	64fd      	str	r5, [r7, #76]	; 0x4c
    y_fill_act = act_y1;
 8007342:	643c      	str	r4, [r7, #64]	; 0x40
    buf_to_flush = color_p;
 8007344:	653e      	str	r6, [r7, #80]	; 0x50
    err = HAL_DMA_Start_IT(&DmaHandle,(uint32_t)buf_to_flush, (uint32_t)&my_fb[y_fill_act * TFT_HOR_RES + x1_flush],
 8007346:	f7fa ff5f 	bl	8002208 <HAL_DMA_Start_IT>
    if(err != HAL_OK)
 800734a:	b100      	cbz	r0, 800734e <ex_disp_flush+0x6a>
 800734c:	e7fe      	b.n	800734c <ex_disp_flush+0x68>
 800734e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007350:	20000768 	.word	0x20000768

08007354 <ex_disp_map>:
{
 8007354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(y1 > TFT_VER_RES - 1) return;
 8007358:	f240 150f 	movw	r5, #271	; 0x10f
    if(x1 > TFT_HOR_RES - 1) return;
 800735c:	f240 19df 	movw	r9, #479	; 0x1df
{
 8007360:	9e08      	ldr	r6, [sp, #32]
    if(y1 > TFT_VER_RES - 1) return;
 8007362:	4548      	cmp	r0, r9
 8007364:	bfd8      	it	le
 8007366:	42a9      	cmple	r1, r5
 8007368:	bfcc      	ite	gt
 800736a:	2401      	movgt	r4, #1
 800736c:	2400      	movle	r4, #0
 800736e:	ea54 74d3 	orrs.w	r4, r4, r3, lsr #31
 8007372:	d129      	bne.n	80073c8 <ex_disp_map+0x74>
 8007374:	2a00      	cmp	r2, #0
 8007376:	db27      	blt.n	80073c8 <ex_disp_map+0x74>
    int32_t act_y2 = y2 > TFT_VER_RES - 1 ? TFT_VER_RES - 1 : y2;
 8007378:	42ab      	cmp	r3, r5
    int32_t act_y1 = y1 < 0 ? 0 : y1;
 800737a:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
    int32_t act_x1 = x1 < 0 ? 0 : x1;
 800737e:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
    int32_t act_y2 = y2 > TFT_VER_RES - 1 ? TFT_VER_RES - 1 : y2;
 8007382:	bfa8      	it	ge
 8007384:	462b      	movge	r3, r5
    int32_t act_x2 = x2 > TFT_HOR_RES - 1 ? TFT_HOR_RES - 1 : x2;
 8007386:	4591      	cmp	r9, r2
 8007388:	bfa8      	it	ge
 800738a:	4691      	movge	r9, r2
    for(y = act_y1; y <= act_y2; y++) {
 800738c:	429c      	cmp	r4, r3
    int32_t act_y2 = y2 > TFT_VER_RES - 1 ? TFT_VER_RES - 1 : y2;
 800738e:	4698      	mov	r8, r3
    for(y = act_y1; y <= act_y2; y++) {
 8007390:	d81a      	bhi.n	80073c8 <ex_disp_map+0x74>
 8007392:	ebc4 1504 	rsb	r5, r4, r4, lsl #4
 8007396:	eba9 0901 	sub.w	r9, r9, r1
 800739a:	1a17      	subs	r7, r2, r0
 800739c:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 80073a0:	f109 0901 	add.w	r9, r9, #1
 80073a4:	3701      	adds	r7, #1
 80073a6:	00ad      	lsls	r5, r5, #2
 80073a8:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80073ac:	00bf      	lsls	r7, r7, #2
 80073ae:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80073b2:	3401      	adds	r4, #1
        memcpy((void*)&my_fb[y * TFT_HOR_RES + act_x1],
 80073b4:	4631      	mov	r1, r6
 80073b6:	4628      	mov	r0, r5
 80073b8:	464a      	mov	r2, r9
 80073ba:	f016 fb0f 	bl	801d9dc <memcpy>
    for(y = act_y1; y <= act_y2; y++) {
 80073be:	4544      	cmp	r4, r8
        color_p += x2 - x1 + 1;    /*Skip the parts out of the screen*/
 80073c0:	443e      	add	r6, r7
 80073c2:	f505 65f0 	add.w	r5, r5, #1920	; 0x780
    for(y = act_y1; y <= act_y2; y++) {
 80073c6:	d9f4      	bls.n	80073b2 <ex_disp_map+0x5e>
 80073c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080073cc <DMA_TransferError>:
 80073cc:	4770      	bx	lr
 80073ce:	bf00      	nop

080073d0 <DMA2D_TransferComplete>:
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop

080073d4 <tft_init>:
{
 80073d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80073d8:	b09f      	sub	sp, #124	; 0x7c
    hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80073da:	4caf      	ldr	r4, [pc, #700]	; (8007698 <tft_init+0x2c4>)
 80073dc:	2528      	movs	r5, #40	; 0x28
    hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80073de:	f44f 76f0 	mov.w	r6, #480	; 0x1e0
    lv_disp_drv_init(&disp_drv);
 80073e2:	a80a      	add	r0, sp, #40	; 0x28
    hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80073e4:	f44f 7788 	mov.w	r7, #272	; 0x110
    lv_disp_drv_init(&disp_drv);
 80073e8:	f00b f8da 	bl	80125a0 <lv_disp_drv_init>
    hLtdcHandler.Instance = LTDC;
 80073ec:	4aab      	ldr	r2, [pc, #684]	; (800769c <tft_init+0x2c8>)
 80073ee:	4620      	mov	r0, r4
    hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80073f0:	2335      	movs	r3, #53	; 0x35
    hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80073f2:	210b      	movs	r1, #11
    hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80073f4:	f04f 0809 	mov.w	r8, #9
    hLtdcHandler.Instance = LTDC;
 80073f8:	f840 2fb8 	str.w	r2, [r0, #184]!
    hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80073fc:	f240 121b 	movw	r2, #283	; 0x11b
    hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8007400:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
    hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8007404:	f240 131d 	movw	r3, #285	; 0x11d
    hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8007408:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
    hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 800740c:	f504 728c 	add.w	r2, r4, #280	; 0x118
    hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8007410:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8007414:	f240 2515 	movw	r5, #533	; 0x215
    hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8007418:	f8c4 10d8 	str.w	r1, [r4, #216]	; 0xd8
    hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800741c:	f240 2135 	movw	r1, #565	; 0x235
    hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8007420:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    hLtdcHandler.Init.Backcolor.Blue = 0;
 8007424:	2300      	movs	r3, #0
    hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8007426:	f8c4 50dc 	str.w	r5, [r4, #220]	; 0xdc
    hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800742a:	f8c4 10e4 	str.w	r1, [r4, #228]	; 0xe4
    hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800742e:	f8c4 80d0 	str.w	r8, [r4, #208]	; 0xd0
    hLtdcHandler.Init.Backcolor.Blue = 0;
 8007432:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
    hLtdcHandler.Init.Backcolor.Green = 0;
 8007436:	f884 30ed 	strb.w	r3, [r4, #237]	; 0xed
    hLtdcHandler.Init.Backcolor.Red = 0;
 800743a:	f884 30ee 	strb.w	r3, [r4, #238]	; 0xee
    hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800743e:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8007442:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
    hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8007446:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800744a:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
    hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 800744e:	e9c2 6700 	strd	r6, r7, [r2]
    if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8007452:	f7fc f8d9 	bl	8003608 <HAL_LTDC_GetState>
 8007456:	2800      	cmp	r0, #0
 8007458:	f000 8084 	beq.w	8007564 <tft_init+0x190>
 800745c:	ae10      	add	r6, sp, #64	; 0x40
    HAL_LTDC_Init(&hLtdcHandler);
 800745e:	4890      	ldr	r0, [pc, #576]	; (80076a0 <tft_init+0x2cc>)
        my_fb[i] = 0;
 8007460:	2500      	movs	r5, #0
    HAL_LTDC_Init(&hLtdcHandler);
 8007462:	f7fb ff8d 	bl	8003380 <HAL_LTDC_Init>
    HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8007466:	2201      	movs	r2, #1
 8007468:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800746c:	488d      	ldr	r0, [pc, #564]	; (80076a4 <tft_init+0x2d0>)
 800746e:	f7fb fb73 	bl	8002b58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8007472:	2201      	movs	r2, #1
 8007474:	2108      	movs	r1, #8
 8007476:	488c      	ldr	r0, [pc, #560]	; (80076a8 <tft_init+0x2d4>)
 8007478:	f7fb fb6e 	bl	8002b58 <HAL_GPIO_WritePin>
    BSP_SDRAM_Init();
 800747c:	f7ff fcf0 	bl	8006e60 <BSP_SDRAM_Init>
 8007480:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    for(i = 0; i < (TFT_HOR_RES * TFT_VER_RES) ; i++)
 8007484:	4a89      	ldr	r2, [pc, #548]	; (80076ac <tft_init+0x2d8>)
        my_fb[i] = 0;
 8007486:	f843 5b04 	str.w	r5, [r3], #4
    for(i = 0; i < (TFT_HOR_RES * TFT_VER_RES) ; i++)
 800748a:	4293      	cmp	r3, r2
 800748c:	d1fb      	bne.n	8007486 <tft_init+0xb2>
    layer_cfg.WindowX0 = 0;
 800748e:	2200      	movs	r2, #0
 8007490:	f44f 7388 	mov.w	r3, #272	; 0x110
    HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, 0);
 8007494:	4631      	mov	r1, r6
    layer_cfg.WindowX0 = 0;
 8007496:	f04f 0800 	mov.w	r8, #0
 800749a:	f44f 79f0 	mov.w	r9, #480	; 0x1e0
 800749e:	2600      	movs	r6, #0
 80074a0:	27ff      	movs	r7, #255	; 0xff
    HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, 0);
 80074a2:	487f      	ldr	r0, [pc, #508]	; (80076a0 <tft_init+0x2cc>)
    layer_cfg.Backcolor.Blue = 0;
 80074a4:	f88d 5070 	strb.w	r5, [sp, #112]	; 0x70
    layer_cfg.Backcolor.Green = 0;
 80074a8:	f88d 5071 	strb.w	r5, [sp, #113]	; 0x71
    layer_cfg.Backcolor.Red = 0;
 80074ac:	f88d 5072 	strb.w	r5, [sp, #114]	; 0x72
    layer_cfg.WindowX0 = 0;
 80074b0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80074b4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80074b8:	2200      	movs	r2, #0
 80074ba:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80074be:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
 80074c2:	f04f 0807 	mov.w	r8, #7
 80074c6:	f04f 4940 	mov.w	r9, #3221225472	; 0xc0000000
 80074ca:	f44f 76f0 	mov.w	r6, #480	; 0x1e0
 80074ce:	f44f 7788 	mov.w	r7, #272	; 0x110
 80074d2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, 0);
 80074d6:	2200      	movs	r2, #0
    layer_cfg.WindowX0 = 0;
 80074d8:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
 80074dc:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
    HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, 0);
 80074e0:	f7fb ffca 	bl	8003478 <HAL_LTDC_ConfigLayer>
    __HAL_LTDC_ENABLE(&hLtdcHandler);
 80074e4:	f8d4 60b8 	ldr.w	r6, [r4, #184]	; 0xb8
    HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80074e8:	2201      	movs	r2, #1
 80074ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    __HAL_LTDC_ENABLE(&hLtdcHandler);
 80074ee:	69b3      	ldr	r3, [r6, #24]
    DmaHandle.Init.Priority = DMA_PRIORITY_HIGH;                    /* priority level : high            */
 80074f0:	f44f 3800 	mov.w	r8, #131072	; 0x20000
    HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80074f4:	486b      	ldr	r0, [pc, #428]	; (80076a4 <tft_init+0x2d0>)
    DmaHandle.Init.FIFOMode = DMA_FIFOMODE_ENABLE;                  /* FIFO mode enabled                */
 80074f6:	f04f 0904 	mov.w	r9, #4
    __HAL_LTDC_ENABLE(&hLtdcHandler);
 80074fa:	4313      	orrs	r3, r2
 80074fc:	61b3      	str	r3, [r6, #24]
    HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80074fe:	f7fb fb2b 	bl	8002b58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8007502:	2201      	movs	r2, #1
 8007504:	2108      	movs	r1, #8
 8007506:	4868      	ldr	r0, [pc, #416]	; (80076a8 <tft_init+0x2d4>)
 8007508:	f7fb fb26 	bl	8002b58 <HAL_GPIO_WritePin>
    __HAL_RCC_DMA2_CLK_ENABLE();
 800750c:	4b68      	ldr	r3, [pc, #416]	; (80076b0 <tft_init+0x2dc>)
    DmaHandle.Init.Direction = DMA_MEMORY_TO_MEMORY;                /* M2M transfer mode                */
 800750e:	2080      	movs	r0, #128	; 0x80
    if(HAL_DMA_Init(&DmaHandle) != HAL_OK)
 8007510:	4e68      	ldr	r6, [pc, #416]	; (80076b4 <tft_init+0x2e0>)
    __HAL_RCC_DMA2_CLK_ENABLE();
 8007512:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    DmaHandle.Init.PeriphInc = DMA_PINC_ENABLE;                     /* Peripheral increment mode Enable */
 8007514:	f44f 7100 	mov.w	r1, #512	; 0x200
    DmaHandle.Init.Channel = CPY_BUF_DMA_CHANNEL;                   /* DMA_CHANNEL_0                    */
 8007518:	65a5      	str	r5, [r4, #88]	; 0x58
    __HAL_RCC_DMA2_CLK_ENABLE();
 800751a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
    DmaHandle.Init.Mode = DMA_NORMAL;                               /* Normal DMA mode                  */
 800751e:	6725      	str	r5, [r4, #112]	; 0x70
    DmaHandle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL; /* FIFO threshold: 1/4 full   */
 8007520:	67e5      	str	r5, [r4, #124]	; 0x7c
    __HAL_RCC_DMA2_CLK_ENABLE();
 8007522:	631a      	str	r2, [r3, #48]	; 0x30
    DmaHandle.Init.MemInc = DMA_MINC_ENABLE;                        /* Memory increment mode Enable     */
 8007524:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_RCC_DMA2_CLK_ENABLE();
 8007528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    DmaHandle.Init.MemInc = DMA_MINC_ENABLE;                        /* Memory increment mode Enable     */
 800752a:	6662      	str	r2, [r4, #100]	; 0x64
    __HAL_RCC_DMA2_CLK_ENABLE();
 800752c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    DmaHandle.Instance = CPY_BUF_DMA_STREAM;
 8007530:	4a61      	ldr	r2, [pc, #388]	; (80076b8 <tft_init+0x2e4>)
    DmaHandle.Init.Direction = DMA_MEMORY_TO_MEMORY;                /* M2M transfer mode                */
 8007532:	65e0      	str	r0, [r4, #92]	; 0x5c
    if(HAL_DMA_Init(&DmaHandle) != HAL_OK)
 8007534:	4630      	mov	r0, r6
    __HAL_RCC_DMA2_CLK_ENABLE();
 8007536:	9310      	str	r3, [sp, #64]	; 0x40
 8007538:	9b10      	ldr	r3, [sp, #64]	; 0x40
    DmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;   /* Peripheral data alignment : 16bit */
 800753a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    DmaHandle.Init.MemBurst = DMA_MBURST_SINGLE;                    /* Memory burst                     */
 800753e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    DmaHandle.Init.PeriphBurst = DMA_PBURST_SINGLE;                 /* Peripheral burst                 */
 8007542:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    DmaHandle.Init.PeriphInc = DMA_PINC_ENABLE;                     /* Peripheral increment mode Enable */
 8007546:	6621      	str	r1, [r4, #96]	; 0x60
    DmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;   /* Peripheral data alignment : 16bit */
 8007548:	66a3      	str	r3, [r4, #104]	; 0x68
    DmaHandle.Init.MemDataAlignment = DMA_PDATAALIGN_HALFWORD;      /* memory data alignment : 16bit     */
 800754a:	66e3      	str	r3, [r4, #108]	; 0x6c
    DmaHandle.Init.Priority = DMA_PRIORITY_HIGH;                    /* priority level : high            */
 800754c:	f8c4 8074 	str.w	r8, [r4, #116]	; 0x74
    DmaHandle.Init.FIFOMode = DMA_FIFOMODE_ENABLE;                  /* FIFO mode enabled                */
 8007550:	f8c4 9078 	str.w	r9, [r4, #120]	; 0x78
    DmaHandle.Instance = CPY_BUF_DMA_STREAM;
 8007554:	6562      	str	r2, [r4, #84]	; 0x54
    if(HAL_DMA_Init(&DmaHandle) != HAL_OK)
 8007556:	f7fa fd77 	bl	8002048 <HAL_DMA_Init>
 800755a:	4605      	mov	r5, r0
 800755c:	2800      	cmp	r0, #0
 800755e:	f000 80b3 	beq.w	80076c8 <tft_init+0x2f4>
 8007562:	e7fe      	b.n	8007562 <tft_init+0x18e>
    __HAL_RCC_LTDC_CLK_ENABLE();
 8007564:	4b52      	ldr	r3, [pc, #328]	; (80076b0 <tft_init+0x2dc>)
    gpio_init_structure.Pin       = GPIO_PIN_4;
 8007566:	f04f 0e10 	mov.w	lr, #16
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800756a:	ae10      	add	r6, sp, #64	; 0x40
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800756c:	2502      	movs	r5, #2
    __HAL_RCC_LTDC_CLK_ENABLE();
 800756e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8007570:	270e      	movs	r7, #14
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8007572:	4631      	mov	r1, r6
    gpio_init_structure.Pin       = GPIO_PIN_12;
 8007574:	f44f 5980 	mov.w	r9, #4096	; 0x1000
    __HAL_RCC_LTDC_CLK_ENABLE();
 8007578:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800757c:	645a      	str	r2, [r3, #68]	; 0x44
 800757e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007580:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8007584:	9201      	str	r2, [sp, #4]
 8007586:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8007588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800758a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800758e:	631a      	str	r2, [r3, #48]	; 0x30
 8007590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007592:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8007596:	9202      	str	r2, [sp, #8]
 8007598:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800759a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800759c:	ea42 020e 	orr.w	r2, r2, lr
 80075a0:	631a      	str	r2, [r3, #48]	; 0x30
 80075a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075a4:	ea02 020e 	and.w	r2, r2, lr
 80075a8:	9203      	str	r2, [sp, #12]
 80075aa:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80075ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075b2:	631a      	str	r2, [r3, #48]	; 0x30
 80075b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075b6:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80075ba:	9204      	str	r2, [sp, #16]
 80075bc:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80075be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075c4:	631a      	str	r2, [r3, #48]	; 0x30
 80075c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075c8:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80075cc:	9205      	str	r2, [sp, #20]
 80075ce:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80075d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075d6:	631a      	str	r2, [r3, #48]	; 0x30
 80075d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075da:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80075de:	9206      	str	r2, [sp, #24]
 80075e0:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80075e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80075e8:	631a      	str	r2, [r3, #48]	; 0x30
 80075ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075ec:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80075f0:	9207      	str	r2, [sp, #28]
 80075f2:	9a07      	ldr	r2, [sp, #28]
    LCD_DISP_GPIO_CLK_ENABLE();
 80075f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075fa:	631a      	str	r2, [r3, #48]	; 0x30
 80075fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075fe:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8007602:	9208      	str	r2, [sp, #32]
 8007604:	9a08      	ldr	r2, [sp, #32]
    LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8007606:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007608:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800760c:	631a      	str	r2, [r3, #48]	; 0x30
 800760e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    gpio_init_structure.Pull      = GPIO_NOPULL;
 8007610:	9012      	str	r0, [sp, #72]	; 0x48
    LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8007612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8007616:	4829      	ldr	r0, [pc, #164]	; (80076bc <tft_init+0x2e8>)
    gpio_init_structure.Pin       = GPIO_PIN_4;
 8007618:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
    LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800761c:	9309      	str	r3, [sp, #36]	; 0x24
 800761e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8007620:	9511      	str	r5, [sp, #68]	; 0x44
    gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8007622:	9513      	str	r5, [sp, #76]	; 0x4c
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8007624:	9714      	str	r7, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8007626:	f7fb f8a9 	bl	800277c <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800762a:	4631      	mov	r1, r6
 800762c:	4824      	ldr	r0, [pc, #144]	; (80076c0 <tft_init+0x2ec>)
    gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 800762e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8007632:	f04f 0801 	mov.w	r8, #1
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8007636:	9511      	str	r5, [sp, #68]	; 0x44
    gpio_init_structure.Pin       = GPIO_PIN_12;
 8007638:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800763c:	f7fb f89e 	bl	800277c <HAL_GPIO_Init>
    gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8007640:	f44f 4366 	mov.w	r3, #58880	; 0xe600
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8007644:	4631      	mov	r1, r6
 8007646:	4817      	ldr	r0, [pc, #92]	; (80076a4 <tft_init+0x2d0>)
    gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8007648:	9310      	str	r3, [sp, #64]	; 0x40
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800764a:	9511      	str	r5, [sp, #68]	; 0x44
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800764c:	9714      	str	r7, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800764e:	f7fb f895 	bl	800277c <HAL_GPIO_Init>
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8007652:	f64e 73ff 	movw	r3, #61439	; 0xefff
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8007656:	4631      	mov	r1, r6
 8007658:	481a      	ldr	r0, [pc, #104]	; (80076c4 <tft_init+0x2f0>)
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800765a:	9310      	str	r3, [sp, #64]	; 0x40
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800765c:	9511      	str	r5, [sp, #68]	; 0x44
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800765e:	9714      	str	r7, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8007660:	f7fb f88c 	bl	800277c <HAL_GPIO_Init>
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8007664:	23f7      	movs	r3, #247	; 0xf7
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8007666:	4631      	mov	r1, r6
 8007668:	480f      	ldr	r0, [pc, #60]	; (80076a8 <tft_init+0x2d4>)
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 800766a:	9310      	str	r3, [sp, #64]	; 0x40
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800766c:	9511      	str	r5, [sp, #68]	; 0x44
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800766e:	9714      	str	r7, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8007670:	f7fb f884 	bl	800277c <HAL_GPIO_Init>
    HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8007674:	4631      	mov	r1, r6
 8007676:	480b      	ldr	r0, [pc, #44]	; (80076a4 <tft_init+0x2d0>)
    gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8007678:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800767c:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8007680:	f7fb f87c 	bl	800277c <HAL_GPIO_Init>
    gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8007684:	2308      	movs	r3, #8
    HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8007686:	4631      	mov	r1, r6
 8007688:	4807      	ldr	r0, [pc, #28]	; (80076a8 <tft_init+0x2d4>)
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800768a:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800768e:	9310      	str	r3, [sp, #64]	; 0x40
    HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8007690:	f7fb f874 	bl	800277c <HAL_GPIO_Init>
 8007694:	e6e3      	b.n	800745e <tft_init+0x8a>
 8007696:	bf00      	nop
 8007698:	20000768 	.word	0x20000768
 800769c:	40016800 	.word	0x40016800
 80076a0:	20000820 	.word	0x20000820
 80076a4:	40022000 	.word	0x40022000
 80076a8:	40022800 	.word	0x40022800
 80076ac:	c007f800 	.word	0xc007f800
 80076b0:	40023800 	.word	0x40023800
 80076b4:	200007bc 	.word	0x200007bc
 80076b8:	40026410 	.word	0x40026410
 80076bc:	40021000 	.word	0x40021000
 80076c0:	40021800 	.word	0x40021800
 80076c4:	40022400 	.word	0x40022400
    HAL_DMA_RegisterCallback(&DmaHandle, HAL_DMA_XFER_CPLT_CB_ID, DMA_TransferComplete);
 80076c8:	4601      	mov	r1, r0
 80076ca:	4a23      	ldr	r2, [pc, #140]	; (8007758 <tft_init+0x384>)
 80076cc:	4630      	mov	r0, r6
    /* DMA2D Callbacks Configuration */
    Dma2dHandle.XferCpltCallback  = DMA2D_TransferComplete;
    Dma2dHandle.XferErrorCallback = DMA2D_TransferError;

    /* Foreground Configuration */
    Dma2dHandle.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 80076ce:	2701      	movs	r7, #1
    HAL_DMA_RegisterCallback(&DmaHandle, HAL_DMA_XFER_CPLT_CB_ID, DMA_TransferComplete);
 80076d0:	f7fa feae 	bl	8002430 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&DmaHandle, HAL_DMA_XFER_ERROR_CB_ID, DMA_TransferError);
 80076d4:	4649      	mov	r1, r9
 80076d6:	4a21      	ldr	r2, [pc, #132]	; (800775c <tft_init+0x388>)
 80076d8:	4630      	mov	r0, r6
 80076da:	f7fa fea9 	bl	8002430 <HAL_DMA_RegisterCallback>
    HAL_NVIC_SetPriority(CPY_BUF_DMA_STREAM_IRQ, 0, 0);
 80076de:	462a      	mov	r2, r5
 80076e0:	4629      	mov	r1, r5
 80076e2:	2038      	movs	r0, #56	; 0x38
 80076e4:	f7fa fc1e 	bl	8001f24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CPY_BUF_DMA_STREAM_IRQ);
 80076e8:	2038      	movs	r0, #56	; 0x38
 80076ea:	f7fa fc55 	bl	8001f98 <HAL_NVIC_EnableIRQ>
    disp_drv.disp_fill = ex_disp_fill;
 80076ee:	491c      	ldr	r1, [pc, #112]	; (8007760 <tft_init+0x38c>)
    disp_drv.disp_map = ex_disp_map;
 80076f0:	4a1c      	ldr	r2, [pc, #112]	; (8007764 <tft_init+0x390>)
    Dma2dHandle.LayerCfg[1].InputAlpha = 0xFF;
 80076f2:	23ff      	movs	r3, #255	; 0xff
    disp_drv.disp_flush = ex_disp_flush;
 80076f4:	f8df e084 	ldr.w	lr, [pc, #132]	; 800777c <tft_init+0x3a8>
    Dma2dHandle.LayerCfg[0].InputOffset = 0x0;

    Dma2dHandle.Instance   = DMA2D;

    /* DMA2D Initialization */
    if(HAL_DMA2D_Init(&Dma2dHandle) != HAL_OK)
 80076f8:	f1a6 0054 	sub.w	r0, r6, #84	; 0x54
    Dma2dHandle.Init.ColorMode    = DMA2D_ARGB8888;
 80076fc:	60a5      	str	r5, [r4, #8]
    Dma2dHandle.Init.OutputOffset = 0x0;
 80076fe:	60e5      	str	r5, [r4, #12]
    Dma2dHandle.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8007700:	62e5      	str	r5, [r4, #44]	; 0x2c
    Dma2dHandle.LayerCfg[1].InputOffset = 0x0;
 8007702:	62a5      	str	r5, [r4, #40]	; 0x28
    Dma2dHandle.LayerCfg[0].InputColorMode = DMA2D_INPUT_ARGB8888;
 8007704:	61e5      	str	r5, [r4, #28]
    Dma2dHandle.LayerCfg[0].InputOffset = 0x0;
 8007706:	61a5      	str	r5, [r4, #24]
    disp_drv.disp_fill = ex_disp_fill;
 8007708:	910b      	str	r1, [sp, #44]	; 0x2c
    disp_drv.disp_map = ex_disp_map;
 800770a:	920c      	str	r2, [sp, #48]	; 0x30
    Dma2dHandle.XferErrorCallback = DMA2D_TransferError;
 800770c:	4916      	ldr	r1, [pc, #88]	; (8007768 <tft_init+0x394>)
    Dma2dHandle.Instance   = DMA2D;
 800770e:	4a17      	ldr	r2, [pc, #92]	; (800776c <tft_init+0x398>)
    Dma2dHandle.XferCpltCallback  = DMA2D_TransferComplete;
 8007710:	4d17      	ldr	r5, [pc, #92]	; (8007770 <tft_init+0x39c>)
    Dma2dHandle.XferErrorCallback = DMA2D_TransferError;
 8007712:	6161      	str	r1, [r4, #20]
    Dma2dHandle.Init.Mode         = DMA2D_M2M_BLEND;
 8007714:	f8c4 8004 	str.w	r8, [r4, #4]
    disp_drv.disp_flush = ex_disp_flush;
 8007718:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
    Dma2dHandle.XferCpltCallback  = DMA2D_TransferComplete;
 800771c:	6125      	str	r5, [r4, #16]
    Dma2dHandle.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 800771e:	6327      	str	r7, [r4, #48]	; 0x30
    Dma2dHandle.LayerCfg[0].AlphaMode = DMA2D_REPLACE_ALPHA;
 8007720:	6227      	str	r7, [r4, #32]
    Dma2dHandle.LayerCfg[1].InputAlpha = 0xFF;
 8007722:	6363      	str	r3, [r4, #52]	; 0x34
    Dma2dHandle.LayerCfg[0].InputAlpha = 0xFF;
 8007724:	6263      	str	r3, [r4, #36]	; 0x24
    Dma2dHandle.Instance   = DMA2D;
 8007726:	6022      	str	r2, [r4, #0]
    if(HAL_DMA2D_Init(&Dma2dHandle) != HAL_OK)
 8007728:	f7fa feb2 	bl	8002490 <HAL_DMA2D_Init>
 800772c:	4601      	mov	r1, r0
 800772e:	b100      	cbz	r0, 8007732 <tft_init+0x35e>
 8007730:	e7fe      	b.n	8007730 <tft_init+0x35c>
    {
        /* Initialization Error */
        Error_Handler();
    }

    HAL_DMA2D_ConfigLayer(&Dma2dHandle, 0);
 8007732:	f1a6 0054 	sub.w	r0, r6, #84	; 0x54
 8007736:	f7fa ffcb 	bl	80026d0 <HAL_DMA2D_ConfigLayer>
    HAL_DMA2D_ConfigLayer(&Dma2dHandle, 1);
 800773a:	4639      	mov	r1, r7
 800773c:	f1a6 0054 	sub.w	r0, r6, #84	; 0x54
 8007740:	f7fa ffc6 	bl	80026d0 <HAL_DMA2D_ConfigLayer>
    disp_drv.mem_blend = gpu_mem_blend;
 8007744:	4a0b      	ldr	r2, [pc, #44]	; (8007774 <tft_init+0x3a0>)
    disp_drv.mem_fill = gpu_mem_fill;
 8007746:	4b0c      	ldr	r3, [pc, #48]	; (8007778 <tft_init+0x3a4>)
    lv_disp_drv_register(&disp_drv);
 8007748:	a80a      	add	r0, sp, #40	; 0x28
    disp_drv.mem_blend = gpu_mem_blend;
 800774a:	920d      	str	r2, [sp, #52]	; 0x34
    disp_drv.mem_fill = gpu_mem_fill;
 800774c:	930e      	str	r3, [sp, #56]	; 0x38
    lv_disp_drv_register(&disp_drv);
 800774e:	f00a ff2f 	bl	80125b0 <lv_disp_drv_register>
}
 8007752:	b01f      	add	sp, #124	; 0x7c
 8007754:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007758:	0800729d 	.word	0x0800729d
 800775c:	080073cd 	.word	0x080073cd
 8007760:	08007195 	.word	0x08007195
 8007764:	08007355 	.word	0x08007355
 8007768:	080071fd 	.word	0x080071fd
 800776c:	4002b000 	.word	0x4002b000
 8007770:	080073d1 	.word	0x080073d1
 8007774:	0800724d 	.word	0x0800724d
 8007778:	08007201 	.word	0x08007201
 800777c:	080072e5 	.word	0x080072e5

08007780 <DMA2_Stream0_IRQHandler>:
    HAL_DMA_IRQHandler(&DmaHandle);
 8007780:	4801      	ldr	r0, [pc, #4]	; (8007788 <DMA2_Stream0_IRQHandler+0x8>)
 8007782:	f7fa bd85 	b.w	8002290 <HAL_DMA_IRQHandler>
 8007786:	bf00      	nop
 8007788:	200007bc 	.word	0x200007bc

0800778c <touchpad_read>:
 * @param x put the x coordinate here
 * @param y put the y coordinate here
 * @return true: the device is pressed, false: released
 */
static bool touchpad_read(lv_indev_data_t *data)
{
 800778c:	b538      	push	{r3, r4, r5, lr}
    /* Read your touchpad */
    static int16_t last_x = 0;
    static int16_t last_y = 0;
    BSP_LED_Toggle(LED1);

    BSP_TS_GetState(&TS_State);
 800778e:	4c0e      	ldr	r4, [pc, #56]	; (80077c8 <touchpad_read+0x3c>)
{
 8007790:	4605      	mov	r5, r0
    BSP_LED_Toggle(LED1);
 8007792:	2000      	movs	r0, #0
 8007794:	f7ff f9c6 	bl	8006b24 <BSP_LED_Toggle>
    BSP_TS_GetState(&TS_State);
 8007798:	4620      	mov	r0, r4
 800779a:	f7ff fc0b 	bl	8006fb4 <BSP_TS_GetState>
    if(TS_State.touchDetected) {
 800779e:	7823      	ldrb	r3, [r4, #0]
 80077a0:	b933      	cbnz	r3, 80077b0 <touchpad_read+0x24>
            data->point.y = TS_State.touchY[0];
            last_x = data->point.x;
            last_y = data->point.y;
            data->state = LV_INDEV_STATE_PR;
    } else {
            data->point.x = last_x;
 80077a2:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
            data->point.y = last_y;
            data->state = LV_INDEV_STATE_REL;
    }

    return false;   /*false: no more data to read because we are no buffering*/
}
 80077a4:	2000      	movs	r0, #0
            data->point.y = last_y;
 80077a6:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
            data->state = LV_INDEV_STATE_REL;
 80077a8:	722b      	strb	r3, [r5, #8]
            data->point.x = last_x;
 80077aa:	8029      	strh	r1, [r5, #0]
            data->point.y = last_y;
 80077ac:	806a      	strh	r2, [r5, #2]
}
 80077ae:	bd38      	pop	{r3, r4, r5, pc}
            data->point.x = TS_State.touchX[0];
 80077b0:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
            data->state = LV_INDEV_STATE_PR;
 80077b4:	2101      	movs	r1, #1
}
 80077b6:	2000      	movs	r0, #0
            data->point.x = TS_State.touchX[0];
 80077b8:	802a      	strh	r2, [r5, #0]
            data->point.y = TS_State.touchY[0];
 80077ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
            last_x = data->point.x;
 80077be:	85a2      	strh	r2, [r4, #44]	; 0x2c
            data->point.y = TS_State.touchY[0];
 80077c0:	806b      	strh	r3, [r5, #2]
            last_y = data->point.y;
 80077c2:	85e3      	strh	r3, [r4, #46]	; 0x2e
            data->state = LV_INDEV_STATE_PR;
 80077c4:	7229      	strb	r1, [r5, #8]
}
 80077c6:	bd38      	pop	{r3, r4, r5, pc}
 80077c8:	200008c8 	.word	0x200008c8

080077cc <touchpad_init>:
{
 80077cc:	b500      	push	{lr}
 80077ce:	b085      	sub	sp, #20
    BSP_TS_Init(TFT_HOR_RES, TFT_VER_RES);
 80077d0:	f44f 7188 	mov.w	r1, #272	; 0x110
 80077d4:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80077d8:	f7ff fbce 	bl	8006f78 <BSP_TS_Init>
    lv_indev_drv_init(&indev_drv);                  /*Basic initialization*/
 80077dc:	a801      	add	r0, sp, #4
 80077de:	f00a ff53 	bl	8012688 <lv_indev_drv_init>
    indev_drv.type = LV_INDEV_TYPE_POINTER;         /*The touchpad is pointer type device*/
 80077e2:	2201      	movs	r2, #1
    indev_drv.read = touchpad_read;
 80077e4:	4b04      	ldr	r3, [pc, #16]	; (80077f8 <touchpad_init+0x2c>)
    lv_indev_drv_register(&indev_drv);
 80077e6:	a801      	add	r0, sp, #4
    indev_drv.type = LV_INDEV_TYPE_POINTER;         /*The touchpad is pointer type device*/
 80077e8:	f88d 2004 	strb.w	r2, [sp, #4]
    indev_drv.read = touchpad_read;
 80077ec:	9302      	str	r3, [sp, #8]
    lv_indev_drv_register(&indev_drv);
 80077ee:	f00a ff51 	bl	8012694 <lv_indev_drv_register>
}
 80077f2:	b005      	add	sp, #20
 80077f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80077f8:	0800778d 	.word	0x0800778d

080077fc <keyboard_hide_action>:
 * Called when the close or ok button is pressed on the keyboard
 * @param keyboard pointer to the keyboard
 * @return
 */
static lv_res_t keyboard_hide_action(lv_obj_t * keyboard)
{
 80077fc:	b530      	push	{r4, r5, lr}
    (void) keyboard;    /*Unused*/

#if USE_LV_ANIMATION
    lv_obj_animate(kb, LV_ANIM_FLOAT_BOTTOM | LV_ANIM_OUT, 300, 0, kb_hide_anim_end);
 80077fe:	4c08      	ldr	r4, [pc, #32]	; (8007820 <keyboard_hide_action+0x24>)
{
 8007800:	b083      	sub	sp, #12
    lv_obj_animate(kb, LV_ANIM_FLOAT_BOTTOM | LV_ANIM_OUT, 300, 0, kb_hide_anim_end);
 8007802:	4d08      	ldr	r5, [pc, #32]	; (8007824 <keyboard_hide_action+0x28>)
 8007804:	2300      	movs	r3, #0
 8007806:	6820      	ldr	r0, [r4, #0]
 8007808:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800780c:	2183      	movs	r1, #131	; 0x83
 800780e:	9500      	str	r5, [sp, #0]
 8007810:	f004 fa52 	bl	800bcb8 <lv_obj_animate>
    kb = NULL;
 8007814:	2300      	movs	r3, #0
#else
    lv_obj_del(kb);
    kb = NULL;
    return LV_RES_INV;
#endif
}
 8007816:	2001      	movs	r0, #1
    kb = NULL;
 8007818:	6023      	str	r3, [r4, #0]
}
 800781a:	b003      	add	sp, #12
 800781c:	bd30      	pop	{r4, r5, pc}
 800781e:	bf00      	nop
 8007820:	200008f8 	.word	0x200008f8
 8007824:	080078fd 	.word	0x080078fd

08007828 <keyboard_open_close>:
{
 8007828:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_obj_t * parent = lv_obj_get_parent(lv_obj_get_parent(ta));   /*Test area is on the scrollable part of the page but we need the page itself*/
 800782a:	4c2e      	ldr	r4, [pc, #184]	; (80078e4 <keyboard_open_close+0xbc>)
{
 800782c:	b083      	sub	sp, #12
    lv_obj_t * parent = lv_obj_get_parent(lv_obj_get_parent(ta));   /*Test area is on the scrollable part of the page but we need the page itself*/
 800782e:	6860      	ldr	r0, [r4, #4]
 8007830:	f004 fac8 	bl	800bdc4 <lv_obj_get_parent>
 8007834:	f004 fac6 	bl	800bdc4 <lv_obj_get_parent>
    if(kb) {
 8007838:	6821      	ldr	r1, [r4, #0]
 800783a:	b169      	cbz	r1, 8007858 <keyboard_open_close+0x30>
    lv_obj_animate(kb, LV_ANIM_FLOAT_BOTTOM | LV_ANIM_OUT, 300, 0, kb_hide_anim_end);
 800783c:	4d2a      	ldr	r5, [pc, #168]	; (80078e8 <keyboard_open_close+0xc0>)
 800783e:	4608      	mov	r0, r1
 8007840:	2300      	movs	r3, #0
 8007842:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007846:	9500      	str	r5, [sp, #0]
 8007848:	2183      	movs	r1, #131	; 0x83
 800784a:	f004 fa35 	bl	800bcb8 <lv_obj_animate>
    kb = NULL;
 800784e:	2300      	movs	r3, #0
}
 8007850:	2001      	movs	r0, #1
    kb = NULL;
 8007852:	6023      	str	r3, [r4, #0]
}
 8007854:	b003      	add	sp, #12
 8007856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007858:	4605      	mov	r5, r0
        kb = lv_kb_create(parent, NULL);
 800785a:	f010 f9eb 	bl	8017c34 <lv_kb_create>
 800785e:	4606      	mov	r6, r0
 * @param page pointer to a page object
 * @return the width of the scrollable
 */
static inline lv_coord_t lv_page_get_scrl_width(const lv_obj_t *page)
{
    return lv_obj_get_width(lv_page_get_scrl(page));
 8007860:	4628      	mov	r0, r5
 8007862:	6026      	str	r6, [r4, #0]
 8007864:	f012 ff6e 	bl	801a744 <lv_page_get_scrl>
 8007868:	f004 facc 	bl	800be04 <lv_obj_get_width>
 800786c:	4607      	mov	r7, r0
        lv_obj_set_size(kb, lv_page_get_scrl_width(parent), lv_obj_get_height(parent) / 2);
 800786e:	4628      	mov	r0, r5
        lv_obj_align(kb, ta, LV_ALIGN_OUT_BOTTOM_MID, 0, 0);
 8007870:	2500      	movs	r5, #0
        lv_obj_set_size(kb, lv_page_get_scrl_width(parent), lv_obj_get_height(parent) / 2);
 8007872:	f004 facd 	bl	800be10 <lv_obj_get_height>
 8007876:	1e02      	subs	r2, r0, #0
 8007878:	4639      	mov	r1, r7
 800787a:	4630      	mov	r0, r6
 800787c:	bfb8      	it	lt
 800787e:	3201      	addlt	r2, #1
 8007880:	f342 024f 	sbfx	r2, r2, #1, #16
 8007884:	f003 f9aa 	bl	800abdc <lv_obj_set_size>
        lv_obj_align(kb, ta, LV_ALIGN_OUT_BOTTOM_MID, 0, 0);
 8007888:	462b      	mov	r3, r5
 800788a:	220d      	movs	r2, #13
 800788c:	9500      	str	r5, [sp, #0]
 800788e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007892:	f002 fe87 	bl	800a5a4 <lv_obj_align>
        lv_kb_set_ta(kb, ta);
 8007896:	e894 0003 	ldmia.w	r4, {r0, r1}
 800789a:	f010 fa5b 	bl	8017d54 <lv_kb_set_ta>
        lv_kb_set_style(kb, LV_KB_STYLE_BG, &style_kb);
 800789e:	4629      	mov	r1, r5
 80078a0:	6820      	ldr	r0, [r4, #0]
 80078a2:	4a12      	ldr	r2, [pc, #72]	; (80078ec <keyboard_open_close+0xc4>)
 80078a4:	f010 fa88 	bl	8017db8 <lv_kb_set_style>
        lv_kb_set_style(kb, LV_KB_STYLE_BTN_REL, &style_kb_rel);
 80078a8:	6820      	ldr	r0, [r4, #0]
 80078aa:	4a11      	ldr	r2, [pc, #68]	; (80078f0 <keyboard_open_close+0xc8>)
 80078ac:	2101      	movs	r1, #1
 80078ae:	f010 fa83 	bl	8017db8 <lv_kb_set_style>
        lv_kb_set_style(kb, LV_KB_STYLE_BTN_PR, &style_kb_pr);
 80078b2:	4a10      	ldr	r2, [pc, #64]	; (80078f4 <keyboard_open_close+0xcc>)
 80078b4:	6820      	ldr	r0, [r4, #0]
 80078b6:	2102      	movs	r1, #2
 80078b8:	f010 fa7e 	bl	8017db8 <lv_kb_set_style>
        lv_kb_set_hide_action(kb, keyboard_hide_action);
 80078bc:	6820      	ldr	r0, [r4, #0]
 80078be:	490e      	ldr	r1, [pc, #56]	; (80078f8 <keyboard_open_close+0xd0>)
 80078c0:	f010 fa74 	bl	8017dac <lv_kb_set_hide_action>
        lv_kb_set_ok_action(kb, keyboard_hide_action);
 80078c4:	6820      	ldr	r0, [r4, #0]
 80078c6:	490c      	ldr	r1, [pc, #48]	; (80078f8 <keyboard_open_close+0xd0>)
 80078c8:	f010 fa6a 	bl	8017da0 <lv_kb_set_ok_action>
        lv_obj_animate(kb, LV_ANIM_FLOAT_BOTTOM | LV_ANIM_IN, 300, 0, NULL);
 80078cc:	6820      	ldr	r0, [r4, #0]
 80078ce:	9500      	str	r5, [sp, #0]
 80078d0:	462b      	mov	r3, r5
 80078d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80078d6:	2103      	movs	r1, #3
 80078d8:	f004 f9ee 	bl	800bcb8 <lv_obj_animate>
}
 80078dc:	2001      	movs	r0, #1
 80078de:	b003      	add	sp, #12
 80078e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078e2:	bf00      	nop
 80078e4:	200008f8 	.word	0x200008f8
 80078e8:	080078fd 	.word	0x080078fd
 80078ec:	20000900 	.word	0x20000900
 80078f0:	20000948 	.word	0x20000948
 80078f4:	20000990 	.word	0x20000990
 80078f8:	080077fd 	.word	0x080077fd

080078fc <kb_hide_anim_end>:
    lv_obj_align(mbox, parent, LV_ALIGN_IN_TOP_MID, 0, LV_DPI / 2);
}

static void kb_hide_anim_end(lv_obj_t * keyboard)
{
    lv_obj_del(keyboard);
 80078fc:	f002 b946 	b.w	8009b8c <lv_obj_del>

08007900 <list_btn_action>:
 * Called when a a list button is clicked on the List tab
 * @param btn pointer to a list button
 * @return LV_RES_OK because the button is not deleted in the function
 */
static lv_res_t list_btn_action(lv_obj_t * btn)
{
 8007900:	b538      	push	{r3, r4, r5, lr}
    lv_ta_add_char(ta, '\n');
 8007902:	4c08      	ldr	r4, [pc, #32]	; (8007924 <list_btn_action+0x24>)
{
 8007904:	4605      	mov	r5, r0
    lv_ta_add_char(ta, '\n');
 8007906:	210a      	movs	r1, #10
 8007908:	6860      	ldr	r0, [r4, #4]
 800790a:	f014 fc2d 	bl	801c168 <lv_ta_add_char>
    lv_ta_add_text(ta, lv_list_get_btn_text(btn));
 800790e:	6864      	ldr	r4, [r4, #4]
 8007910:	4628      	mov	r0, r5
 8007912:	f011 fc5b 	bl	80191cc <lv_list_get_btn_text>
 8007916:	4601      	mov	r1, r0
 8007918:	4620      	mov	r0, r4
 800791a:	f014 fcfd 	bl	801c318 <lv_ta_add_text>

    return LV_RES_OK;
}
 800791e:	2001      	movs	r0, #1
 8007920:	bd38      	pop	{r3, r4, r5, pc}
 8007922:	bf00      	nop
 8007924:	200008f8 	.word	0x200008f8

08007928 <slider_action>:
{
 8007928:	b508      	push	{r3, lr}
    int16_t v = lv_slider_get_value(slider);
 800792a:	f014 f801 	bl	801b930 <lv_slider_get_value>
    v = 1000 * 100 / v; /*Convert to range modify values linearly*/
 800792e:	4a06      	ldr	r2, [pc, #24]	; (8007948 <slider_action+0x20>)
    lv_chart_set_range(chart, 0, v);
 8007930:	4b06      	ldr	r3, [pc, #24]	; (800794c <slider_action+0x24>)
 8007932:	2100      	movs	r1, #0
    v = 1000 * 100 / v; /*Convert to range modify values linearly*/
 8007934:	fb92 f2f0 	sdiv	r2, r2, r0
    lv_chart_set_range(chart, 0, v);
 8007938:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 800793c:	b212      	sxth	r2, r2
 800793e:	f00f f92b 	bl	8016b98 <lv_chart_set_range>
}
 8007942:	2001      	movs	r0, #1
 8007944:	bd08      	pop	{r3, pc}
 8007946:	bf00      	nop
 8007948:	000186a0 	.word	0x000186a0
 800794c:	200008f8 	.word	0x200008f8

08007950 <demo_create>:
{
 8007950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007954:	b085      	sub	sp, #20
    lv_style_copy(&style_tv_btn_bg, &lv_style_plain);
 8007956:	4cdb      	ldr	r4, [pc, #876]	; (8007cc4 <demo_create+0x374>)
    lv_obj_t * wp = lv_img_create(lv_scr_act(), NULL);
 8007958:	f004 fa22 	bl	800bda0 <lv_scr_act>
 800795c:	2100      	movs	r1, #0
 800795e:	f00f ff75 	bl	801784c <lv_img_create>
 8007962:	4607      	mov	r7, r0
    lv_img_set_src(wp, &img_bubble_pattern);
 8007964:	49d8      	ldr	r1, [pc, #864]	; (8007cc8 <demo_create+0x378>)
    style_tv_btn_bg.body.padding.ver = 0;
 8007966:	2500      	movs	r5, #0
    lv_img_set_src(wp, &img_bubble_pattern);
 8007968:	f00f fec8 	bl	80176fc <lv_img_set_src>
    lv_obj_set_width(wp, LV_HOR_RES * 4);
 800796c:	4638      	mov	r0, r7
 800796e:	f44f 61f0 	mov.w	r1, #1920	; 0x780
    style_kb.body.main_color = LV_COLOR_HEX3(0x333);
 8007972:	f8df a3ec 	ldr.w	sl, [pc, #1004]	; 8007d60 <demo_create+0x410>
    lv_obj_set_width(wp, LV_HOR_RES * 4);
 8007976:	f003 fb05 	bl	800af84 <lv_obj_set_width>
    lv_obj_set_protect(wp, LV_PROTECT_POS);
 800797a:	4638      	mov	r0, r7
 800797c:	2104      	movs	r1, #4
    style_kb_pr.body.border.color = LV_COLOR_SILVER;
 800797e:	f8df b3e4 	ldr.w	fp, [pc, #996]	; 8007d64 <demo_create+0x414>
    lv_obj_set_protect(wp, LV_PROTECT_POS);
 8007982:	f004 f925 	bl	800bbd0 <lv_obj_set_protect>
    lv_style_copy(&style_tv_btn_bg, &lv_style_plain);
 8007986:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
 800798a:	49d0      	ldr	r1, [pc, #832]	; (8007ccc <demo_create+0x37c>)
 800798c:	f004 ffc2 	bl	800c914 <lv_style_copy>
    style_tv_btn_bg.body.main_color = LV_COLOR_HEX(0x487fb7);
 8007990:	4bcf      	ldr	r3, [pc, #828]	; (8007cd0 <demo_create+0x380>)
    lv_style_copy(&style_tv_btn_rel, &lv_style_btn_rel);
 8007992:	f504 7096 	add.w	r0, r4, #300	; 0x12c
 8007996:	49cf      	ldr	r1, [pc, #828]	; (8007cd4 <demo_create+0x384>)
    style_tv_btn_bg.body.main_color = LV_COLOR_HEX(0x487fb7);
 8007998:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 800799c:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    style_tv_btn_bg.body.padding.ver = 0;
 80079a0:	f8a4 5104 	strh.w	r5, [r4, #260]	; 0x104
    lv_style_copy(&style_tv_btn_rel, &lv_style_btn_rel);
 80079a4:	f004 ffb6 	bl	800c914 <lv_style_copy>
    style_tv_btn_rel.body.empty = 1;
 80079a8:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
    lv_style_copy(&style_tv_btn_pr, &lv_style_btn_pr);
 80079ac:	f504 70ba 	add.w	r0, r4, #372	; 0x174
 80079b0:	49c9      	ldr	r1, [pc, #804]	; (8007cd8 <demo_create+0x388>)
    style_tv_btn_rel.body.empty = 1;
 80079b2:	f043 0301 	orr.w	r3, r3, #1
    style_tv_btn_rel.body.border.width = 0;
 80079b6:	f8a4 5140 	strh.w	r5, [r4, #320]	; 0x140
    style_tv_btn_rel.body.empty = 1;
 80079ba:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
    lv_style_copy(&style_tv_btn_pr, &lv_style_btn_pr);
 80079be:	f004 ffa9 	bl	800c914 <lv_style_copy>
    style_tv_btn_pr.text.color = LV_COLOR_GRAY;
 80079c2:	4ac6      	ldr	r2, [pc, #792]	; (8007cdc <demo_create+0x38c>)
    style_tv_btn_pr.body.main_color = LV_COLOR_WHITE;
 80079c4:	f04f 33ff 	mov.w	r3, #4294967295
    style_tv_btn_pr.body.opa = LV_OPA_50;
 80079c8:	217f      	movs	r1, #127	; 0x7f
    style_tv_btn_pr.body.radius = 0;
 80079ca:	f8a4 5180 	strh.w	r5, [r4, #384]	; 0x180
    style_tv_btn_pr.text.color = LV_COLOR_GRAY;
 80079ce:	f8c4 219c 	str.w	r2, [r4, #412]	; 0x19c
    style_tv_btn_pr.body.main_color = LV_COLOR_WHITE;
 80079d2:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
 80079d6:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
    style_tv_btn_pr.body.border.width = 0;
 80079da:	f8a4 5188 	strh.w	r5, [r4, #392]	; 0x188
    style_tv_btn_pr.body.opa = LV_OPA_50;
 80079de:	f884 1182 	strb.w	r1, [r4, #386]	; 0x182
    lv_obj_t * tv = lv_tabview_create(lv_scr_act(), NULL);
 80079e2:	f004 f9dd 	bl	800bda0 <lv_scr_act>
 80079e6:	4629      	mov	r1, r5
 80079e8:	f015 fe1c 	bl	801d624 <lv_tabview_create>
 80079ec:	4606      	mov	r6, r0
    lv_obj_set_parent(wp, ((lv_tabview_ext_t *) tv->ext_attr)->content);
 80079ee:	4638      	mov	r0, r7
 80079f0:	6a33      	ldr	r3, [r6, #32]
 80079f2:	6899      	ldr	r1, [r3, #8]
 80079f4:	f002 fd12 	bl	800a41c <lv_obj_set_parent>
    lv_obj_set_pos(wp, 0, -5);
 80079f8:	f06f 0204 	mvn.w	r2, #4
 80079fc:	4638      	mov	r0, r7
 80079fe:	4629      	mov	r1, r5
 8007a00:	f002 fbb0 	bl	800a164 <lv_obj_set_pos>
    lv_obj_t * tab1 = lv_tabview_add_tab(tv, "Write");
 8007a04:	4630      	mov	r0, r6
 8007a06:	49b6      	ldr	r1, [pc, #728]	; (8007ce0 <demo_create+0x390>)
 8007a08:	f015 fcfa 	bl	801d400 <lv_tabview_add_tab>
    lv_obj_t * tab2 = lv_tabview_add_tab(tv, "List");
 8007a0c:	49b5      	ldr	r1, [pc, #724]	; (8007ce4 <demo_create+0x394>)
    lv_obj_t * tab1 = lv_tabview_add_tab(tv, "Write");
 8007a0e:	4681      	mov	r9, r0
    lv_obj_t * tab2 = lv_tabview_add_tab(tv, "List");
 8007a10:	4630      	mov	r0, r6
 8007a12:	f015 fcf5 	bl	801d400 <lv_tabview_add_tab>
    lv_obj_t * tab3 = lv_tabview_add_tab(tv, "Chart");
 8007a16:	49b4      	ldr	r1, [pc, #720]	; (8007ce8 <demo_create+0x398>)
    lv_obj_t * tab2 = lv_tabview_add_tab(tv, "List");
 8007a18:	4680      	mov	r8, r0
    lv_obj_t * tab3 = lv_tabview_add_tab(tv, "Chart");
 8007a1a:	4630      	mov	r0, r6
 8007a1c:	f015 fcf0 	bl	801d400 <lv_tabview_add_tab>
    lv_tabview_set_style(tv, LV_TABVIEW_STYLE_BTN_BG, &style_tv_btn_bg);
 8007a20:	f104 02e4 	add.w	r2, r4, #228	; 0xe4
    lv_obj_t * tab3 = lv_tabview_add_tab(tv, "Chart");
 8007a24:	4607      	mov	r7, r0
    lv_tabview_set_style(tv, LV_TABVIEW_STYLE_BTN_BG, &style_tv_btn_bg);
 8007a26:	2102      	movs	r1, #2
 8007a28:	4630      	mov	r0, r6
 8007a2a:	f015 fdad 	bl	801d588 <lv_tabview_set_style>
    lv_tabview_set_style(tv, LV_TABVIEW_STYLE_INDIC, &lv_style_plain);
 8007a2e:	4630      	mov	r0, r6
 8007a30:	4aa6      	ldr	r2, [pc, #664]	; (8007ccc <demo_create+0x37c>)
 8007a32:	2101      	movs	r1, #1
 8007a34:	f015 fda8 	bl	801d588 <lv_tabview_set_style>
    lv_tabview_set_style(tv, LV_TABVIEW_STYLE_BTN_REL, &style_tv_btn_rel);
 8007a38:	f504 7296 	add.w	r2, r4, #300	; 0x12c
 8007a3c:	4630      	mov	r0, r6
 8007a3e:	2103      	movs	r1, #3
 8007a40:	f015 fda2 	bl	801d588 <lv_tabview_set_style>
    lv_tabview_set_style(tv, LV_TABVIEW_STYLE_BTN_PR, &style_tv_btn_pr);
 8007a44:	f504 72ba 	add.w	r2, r4, #372	; 0x174
 8007a48:	4630      	mov	r0, r6
 8007a4a:	2104      	movs	r1, #4
 8007a4c:	f015 fd9c 	bl	801d588 <lv_tabview_set_style>
    lv_tabview_set_style(tv, LV_TABVIEW_STYLE_BTN_TGL_REL, &style_tv_btn_rel);
 8007a50:	f504 7296 	add.w	r2, r4, #300	; 0x12c
 8007a54:	4630      	mov	r0, r6
 8007a56:	2105      	movs	r1, #5
 8007a58:	f015 fd96 	bl	801d588 <lv_tabview_set_style>
    lv_tabview_set_style(tv, LV_TABVIEW_STYLE_BTN_TGL_PR, &style_tv_btn_pr);
 8007a5c:	4630      	mov	r0, r6
 8007a5e:	f504 72ba 	add.w	r2, r4, #372	; 0x174
 8007a62:	2106      	movs	r1, #6
 8007a64:	f015 fd90 	bl	801d588 <lv_tabview_set_style>
    lv_page_set_style(parent, LV_PAGE_STYLE_BG, &lv_style_transp_fit);
 8007a68:	4629      	mov	r1, r5
 8007a6a:	4648      	mov	r0, r9
 8007a6c:	4a9f      	ldr	r2, [pc, #636]	; (8007cec <demo_create+0x39c>)
 8007a6e:	f012 fc65 	bl	801a33c <lv_page_set_style>
    lv_page_set_style(parent, LV_PAGE_STYLE_SCRL, &lv_style_transp_fit);
 8007a72:	4a9e      	ldr	r2, [pc, #632]	; (8007cec <demo_create+0x39c>)
 8007a74:	4648      	mov	r0, r9
 8007a76:	2101      	movs	r1, #1
 8007a78:	f012 fc60 	bl	801a33c <lv_page_set_style>
    lv_page_set_sb_mode(parent, LV_SB_MODE_OFF);
 8007a7c:	4629      	mov	r1, r5
 8007a7e:	4648      	mov	r0, r9
 8007a80:	f012 fc16 	bl	801a2b0 <lv_page_set_sb_mode>
    lv_style_copy(&style_ta, &lv_style_pretty);
 8007a84:	f504 70de 	add.w	r0, r4, #444	; 0x1bc
 8007a88:	4999      	ldr	r1, [pc, #612]	; (8007cf0 <demo_create+0x3a0>)
 8007a8a:	f004 ff43 	bl	800c914 <lv_style_copy>
    style_ta.text.color = LV_COLOR_HEX3(0x222);
 8007a8e:	4b99      	ldr	r3, [pc, #612]	; (8007cf4 <demo_create+0x3a4>)
    style_ta.body.opa = LV_OPA_30;
 8007a90:	224c      	movs	r2, #76	; 0x4c
    ta = lv_ta_create(parent, NULL);
 8007a92:	4629      	mov	r1, r5
 8007a94:	4648      	mov	r0, r9
    style_ta.text.color = LV_COLOR_HEX3(0x222);
 8007a96:	f8c4 31e4 	str.w	r3, [r4, #484]	; 0x1e4
    style_ta.body.opa = LV_OPA_30;
 8007a9a:	f884 21ca 	strb.w	r2, [r4, #458]	; 0x1ca
    style_ta.body.radius = 0;
 8007a9e:	f8a4 51c8 	strh.w	r5, [r4, #456]	; 0x1c8
    ta = lv_ta_create(parent, NULL);
 8007aa2:	f014 fe41 	bl	801c728 <lv_ta_create>
 8007aa6:	4605      	mov	r5, r0
 8007aa8:	4648      	mov	r0, r9
 8007aaa:	6065      	str	r5, [r4, #4]
 8007aac:	f012 fe4a 	bl	801a744 <lv_page_get_scrl>
 8007ab0:	f004 f9a8 	bl	800be04 <lv_obj_get_width>
 8007ab4:	4606      	mov	r6, r0
    lv_obj_set_size(ta, lv_page_get_scrl_width(parent), lv_obj_get_height(parent) / 2);
 8007ab6:	4648      	mov	r0, r9
    style_kb_rel.body.border.width = 1;
 8007ab8:	f04f 0901 	mov.w	r9, #1
    lv_obj_set_size(ta, lv_page_get_scrl_width(parent), lv_obj_get_height(parent) / 2);
 8007abc:	f004 f9a8 	bl	800be10 <lv_obj_get_height>
 8007ac0:	1e02      	subs	r2, r0, #0
 8007ac2:	4631      	mov	r1, r6
 8007ac4:	4628      	mov	r0, r5
 8007ac6:	bfb8      	it	lt
 8007ac8:	3201      	addlt	r2, #1
    style_kb.body.padding.hor = 0;
 8007aca:	2500      	movs	r5, #0
    style_kb_rel.body.border.opa = LV_OPA_50;
 8007acc:	267f      	movs	r6, #127	; 0x7f
    lv_obj_set_size(ta, lv_page_get_scrl_width(parent), lv_obj_get_height(parent) / 2);
 8007ace:	f342 024f 	sbfx	r2, r2, #1, #16
 8007ad2:	f003 f883 	bl	800abdc <lv_obj_set_size>
    lv_ta_set_style(ta, LV_TA_STYLE_BG, &style_ta);
 8007ad6:	4a88      	ldr	r2, [pc, #544]	; (8007cf8 <demo_create+0x3a8>)
 8007ad8:	6860      	ldr	r0, [r4, #4]
 8007ada:	2100      	movs	r1, #0
 8007adc:	f014 fdf6 	bl	801c6cc <lv_ta_set_style>
    lv_ta_set_text(ta, "");
 8007ae0:	6860      	ldr	r0, [r4, #4]
 8007ae2:	4986      	ldr	r1, [pc, #536]	; (8007cfc <demo_create+0x3ac>)
 8007ae4:	f014 fcd6 	bl	801c494 <lv_ta_set_text>
    lv_page_set_rel_action(ta, keyboard_open_close);
 8007ae8:	6860      	ldr	r0, [r4, #4]
 8007aea:	4985      	ldr	r1, [pc, #532]	; (8007d00 <demo_create+0x3b0>)
 8007aec:	f012 fbda 	bl	801a2a4 <lv_page_set_rel_action>
    lv_style_copy(&style_kb, &lv_style_plain);
 8007af0:	4976      	ldr	r1, [pc, #472]	; (8007ccc <demo_create+0x37c>)
 8007af2:	4884      	ldr	r0, [pc, #528]	; (8007d04 <demo_create+0x3b4>)
 8007af4:	f004 ff0e 	bl	800c914 <lv_style_copy>
    style_kb.body.opa = LV_OPA_70;
 8007af8:	23b2      	movs	r3, #178	; 0xb2
    lv_style_copy(&style_kb_rel, &lv_style_plain);
 8007afa:	4974      	ldr	r1, [pc, #464]	; (8007ccc <demo_create+0x37c>)
 8007afc:	4882      	ldr	r0, [pc, #520]	; (8007d08 <demo_create+0x3b8>)
    style_kb.body.opa = LV_OPA_70;
 8007afe:	75a3      	strb	r3, [r4, #22]
    style_kb.body.padding.hor = 0;
 8007b00:	8565      	strh	r5, [r4, #42]	; 0x2a
    style_kb.body.padding.ver = 0;
 8007b02:	8525      	strh	r5, [r4, #40]	; 0x28
    style_kb.body.padding.inner = 0;
 8007b04:	85a5      	strh	r5, [r4, #44]	; 0x2c
    style_kb.body.main_color = LV_COLOR_HEX3(0x333);
 8007b06:	f8c4 a00c 	str.w	sl, [r4, #12]
 8007b0a:	f8c4 a010 	str.w	sl, [r4, #16]
    lv_style_copy(&style_kb_rel, &lv_style_plain);
 8007b0e:	f004 ff01 	bl	800c914 <lv_style_copy>
    style_kb_rel.body.empty = 1;
 8007b12:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    style_kb_rel.body.border.color = LV_COLOR_SILVER;
 8007b16:	f04f 0ec0 	mov.w	lr, #192	; 0xc0
 8007b1a:	23ff      	movs	r3, #255	; 0xff
    style_kb_rel.body.main_color = LV_COLOR_HEX3(0x333);    /*Recommended if LV_VDB_SIZE == 0 and bpp > 1 fonts are used*/
 8007b1c:	2233      	movs	r2, #51	; 0x33
    style_kb_rel.body.empty = 1;
 8007b1e:	ea40 0009 	orr.w	r0, r0, r9
    lv_style_copy(&style_kb_pr, &lv_style_plain);
 8007b22:	496a      	ldr	r1, [pc, #424]	; (8007ccc <demo_create+0x37c>)
    style_kb_rel.body.border.color = LV_COLOR_SILVER;
 8007b24:	f884 e060 	strb.w	lr, [r4, #96]	; 0x60
    style_kb_rel.body.empty = 1;
 8007b28:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
    lv_style_copy(&style_kb_pr, &lv_style_plain);
 8007b2c:	4877      	ldr	r0, [pc, #476]	; (8007d0c <demo_create+0x3bc>)
    style_kb_rel.body.border.color = LV_COLOR_SILVER;
 8007b2e:	f884 e061 	strb.w	lr, [r4, #97]	; 0x61
 8007b32:	f884 e062 	strb.w	lr, [r4, #98]	; 0x62
    style_kb_rel.body.main_color = LV_COLOR_HEX3(0x333);    /*Recommended if LV_VDB_SIZE == 0 and bpp > 1 fonts are used*/
 8007b36:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8007b3a:	f884 2055 	strb.w	r2, [r4, #85]	; 0x55
 8007b3e:	f884 2056 	strb.w	r2, [r4, #86]	; 0x56
    style_kb_rel.body.grad_color = LV_COLOR_HEX3(0x333);
 8007b42:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 8007b46:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8007b4a:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a
    style_kb_rel.body.radius = 0;
 8007b4e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
    style_kb_rel.body.border.width = 1;
 8007b52:	f8a4 9064 	strh.w	r9, [r4, #100]	; 0x64
    style_kb_rel.body.border.color = LV_COLOR_SILVER;
 8007b56:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
    style_kb_rel.body.main_color = LV_COLOR_HEX3(0x333);    /*Recommended if LV_VDB_SIZE == 0 and bpp > 1 fonts are used*/
 8007b5a:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
    style_kb_rel.body.grad_color = LV_COLOR_HEX3(0x333);
 8007b5e:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
    style_kb_rel.text.color = LV_COLOR_WHITE;
 8007b62:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
 8007b66:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
 8007b6a:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
 8007b6e:	f884 307b 	strb.w	r3, [r4, #123]	; 0x7b
    style_kb_rel.body.border.opa = LV_OPA_50;
 8007b72:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
    lv_style_copy(&style_kb_pr, &lv_style_plain);
 8007b76:	f004 fecd 	bl	800c914 <lv_style_copy>
    style_kb_pr.body.main_color = LV_COLOR_WHITE;
 8007b7a:	f04f 33ff 	mov.w	r3, #4294967295
    keyboard_open_close(ta);
 8007b7e:	6860      	ldr	r0, [r4, #4]
    style_kb_pr.body.radius = 0;
 8007b80:	f8a4 50a4 	strh.w	r5, [r4, #164]	; 0xa4
    style_kb_pr.body.main_color = LV_COLOR_WHITE;
 8007b84:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 8007b88:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    style_kb_pr.body.opa = LV_OPA_50;
 8007b8c:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
    style_kb_pr.body.border.width = 1;
 8007b90:	f8a4 90ac 	strh.w	r9, [r4, #172]	; 0xac
    style_kb_pr.body.border.color = LV_COLOR_SILVER;
 8007b94:	f8c4 b0a8 	str.w	fp, [r4, #168]	; 0xa8
    keyboard_open_close(ta);
 8007b98:	f7ff fe46 	bl	8007828 <keyboard_open_close>
    lv_page_set_style(parent, LV_PAGE_STYLE_BG, &lv_style_transp_fit);
 8007b9c:	4629      	mov	r1, r5
 8007b9e:	4640      	mov	r0, r8
 8007ba0:	4a52      	ldr	r2, [pc, #328]	; (8007cec <demo_create+0x39c>)
 8007ba2:	f012 fbcb 	bl	801a33c <lv_page_set_style>
    lv_page_set_style(parent, LV_PAGE_STYLE_SCRL, &lv_style_transp_fit);
 8007ba6:	4649      	mov	r1, r9
 8007ba8:	4a50      	ldr	r2, [pc, #320]	; (8007cec <demo_create+0x39c>)
 8007baa:	4640      	mov	r0, r8
 8007bac:	f012 fbc6 	bl	801a33c <lv_page_set_style>
    lv_cont_set_fit(lv_page_get_scrl(page), hor_en, ver_en);
 8007bb0:	4640      	mov	r0, r8
 8007bb2:	f012 fdc7 	bl	801a744 <lv_page_get_scrl>
 8007bb6:	462a      	mov	r2, r5
 8007bb8:	4629      	mov	r1, r5
 8007bba:	f00f fcc5 	bl	8017548 <lv_cont_set_fit>
    lv_page_set_scrl_height(parent, lv_obj_get_height(parent));
 8007bbe:	4640      	mov	r0, r8
 8007bc0:	f004 f926 	bl	800be10 <lv_obj_get_height>
 8007bc4:	9003      	str	r0, [sp, #12]
    lv_obj_set_height(lv_page_get_scrl(page), h);
 8007bc6:	4640      	mov	r0, r8
 8007bc8:	f012 fdbc 	bl	801a744 <lv_page_get_scrl>
 8007bcc:	9903      	ldr	r1, [sp, #12]
 8007bce:	f003 f8f1 	bl	800adb4 <lv_obj_set_height>
    lv_page_set_sb_mode(parent, LV_SB_MODE_OFF);
 8007bd2:	4629      	mov	r1, r5
 8007bd4:	4640      	mov	r0, r8
 8007bd6:	f012 fb6b 	bl	801a2b0 <lv_page_set_sb_mode>
    lv_style_copy(&style_btn_rel, &lv_style_btn_rel);
 8007bda:	493e      	ldr	r1, [pc, #248]	; (8007cd4 <demo_create+0x384>)
 8007bdc:	484c      	ldr	r0, [pc, #304]	; (8007d10 <demo_create+0x3c0>)
 8007bde:	f004 fe99 	bl	800c914 <lv_style_copy>
    lv_style_copy(&style_btn_pr, &style_btn_rel);
 8007be2:	494b      	ldr	r1, [pc, #300]	; (8007d10 <demo_create+0x3c0>)
    style_btn_rel.body.main_color = LV_COLOR_HEX3(0x333);
 8007be4:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    style_btn_rel.body.border.width = 1;
 8007be8:	f8a4 9218 	strh.w	r9, [r4, #536]	; 0x218
    lv_style_copy(&style_btn_pr, &style_btn_rel);
 8007bec:	f101 0048 	add.w	r0, r1, #72	; 0x48
    style_btn_rel.body.border.opa = LV_OPA_50;
 8007bf0:	f884 621b 	strb.w	r6, [r4, #539]	; 0x21b
    style_btn_rel.body.radius = 0;
 8007bf4:	f8a4 5210 	strh.w	r5, [r4, #528]	; 0x210
    style_btn_rel.body.main_color = LV_COLOR_HEX3(0x333);
 8007bf8:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
 8007bfc:	f8c4 a208 	str.w	sl, [r4, #520]	; 0x208
    style_btn_rel.body.border.color = LV_COLOR_SILVER;
 8007c00:	f8c4 b214 	str.w	fp, [r4, #532]	; 0x214
    lv_style_copy(&style_btn_pr, &style_btn_rel);
 8007c04:	f004 fe86 	bl	800c914 <lv_style_copy>
    style_btn_pr.body.main_color = LV_COLOR_MAKE(0x55, 0x96, 0xd8);
 8007c08:	4e42      	ldr	r6, [pc, #264]	; (8007d14 <demo_create+0x3c4>)
    lv_obj_t * list = lv_list_create(parent, NULL);
 8007c0a:	4629      	mov	r1, r5
    style_btn_pr.body.main_color = LV_COLOR_MAKE(0x55, 0x96, 0xd8);
 8007c0c:	4a42      	ldr	r2, [pc, #264]	; (8007d18 <demo_create+0x3c8>)
    lv_obj_t * list = lv_list_create(parent, NULL);
 8007c0e:	4640      	mov	r0, r8
    style_btn_pr.text.color = LV_COLOR_MAKE(0xbb, 0xd5, 0xf1);
 8007c10:	4b42      	ldr	r3, [pc, #264]	; (8007d1c <demo_create+0x3cc>)
    style_btn_pr.body.main_color = LV_COLOR_MAKE(0x55, 0x96, 0xd8);
 8007c12:	f8c4 2254 	str.w	r2, [r4, #596]	; 0x254
    style_btn_pr.text.color = LV_COLOR_MAKE(0xbb, 0xd5, 0xf1);
 8007c16:	f8c4 3274 	str.w	r3, [r4, #628]	; 0x274
    style_btn_pr.body.main_color = LV_COLOR_MAKE(0x55, 0x96, 0xd8);
 8007c1a:	f8c4 6250 	str.w	r6, [r4, #592]	; 0x250
    lv_obj_t * list = lv_list_create(parent, NULL);
 8007c1e:	f011 f9a5 	bl	8018f6c <lv_list_create>
 8007c22:	4606      	mov	r6, r0
    lv_obj_set_height(list, 2 * lv_obj_get_height(parent) / 3);
 8007c24:	4640      	mov	r0, r8
 8007c26:	f004 f8f3 	bl	800be10 <lv_obj_get_height>
 8007c2a:	493d      	ldr	r1, [pc, #244]	; (8007d20 <demo_create+0x3d0>)
 8007c2c:	fa00 f309 	lsl.w	r3, r0, r9
 8007c30:	4630      	mov	r0, r6
 8007c32:	fb81 2103 	smull	r2, r1, r1, r3
 8007c36:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8007c3a:	b209      	sxth	r1, r1
 8007c3c:	f003 f8ba 	bl	800adb4 <lv_obj_set_height>
    lv_list_set_style(list, LV_LIST_STYLE_BG, &lv_style_transp_tight);
 8007c40:	4629      	mov	r1, r5
 8007c42:	4630      	mov	r0, r6
 8007c44:	4a37      	ldr	r2, [pc, #220]	; (8007d24 <demo_create+0x3d4>)
 8007c46:	f011 f90b 	bl	8018e60 <lv_list_set_style>
    lv_list_set_style(list, LV_LIST_STYLE_SCRL, &lv_style_transp_tight);
 8007c4a:	4649      	mov	r1, r9
 8007c4c:	4630      	mov	r0, r6
 8007c4e:	4a35      	ldr	r2, [pc, #212]	; (8007d24 <demo_create+0x3d4>)
 8007c50:	f011 f906 	bl	8018e60 <lv_list_set_style>
    lv_list_set_style(list, LV_LIST_STYLE_BTN_REL, &style_btn_rel);
 8007c54:	4630      	mov	r0, r6
 8007c56:	4a2e      	ldr	r2, [pc, #184]	; (8007d10 <demo_create+0x3c0>)
 8007c58:	2104      	movs	r1, #4
 8007c5a:	f011 f901 	bl	8018e60 <lv_list_set_style>
    lv_list_set_style(list, LV_LIST_STYLE_BTN_PR, &style_btn_pr);
 8007c5e:	4630      	mov	r0, r6
 8007c60:	4a31      	ldr	r2, [pc, #196]	; (8007d28 <demo_create+0x3d8>)
 8007c62:	2105      	movs	r1, #5
 8007c64:	f011 f8fc 	bl	8018e60 <lv_list_set_style>
    lv_obj_align(list, NULL, LV_ALIGN_IN_TOP_MID, 0, LV_DPI / 4);
 8007c68:	2219      	movs	r2, #25
 8007c6a:	462b      	mov	r3, r5
 8007c6c:	4629      	mov	r1, r5
 8007c6e:	4630      	mov	r0, r6
 8007c70:	9200      	str	r2, [sp, #0]
 8007c72:	2202      	movs	r2, #2
 8007c74:	f002 fc96 	bl	800a5a4 <lv_obj_align>
    lv_list_add(list, SYMBOL_FILE, "New", list_btn_action);
 8007c78:	4630      	mov	r0, r6
 8007c7a:	4b2c      	ldr	r3, [pc, #176]	; (8007d2c <demo_create+0x3dc>)
 8007c7c:	4a2c      	ldr	r2, [pc, #176]	; (8007d30 <demo_create+0x3e0>)
 8007c7e:	492d      	ldr	r1, [pc, #180]	; (8007d34 <demo_create+0x3e4>)
 8007c80:	f011 f82e 	bl	8018ce0 <lv_list_add>
    lv_list_add(list, SYMBOL_DIRECTORY, "Open", list_btn_action);
 8007c84:	4630      	mov	r0, r6
 8007c86:	4b29      	ldr	r3, [pc, #164]	; (8007d2c <demo_create+0x3dc>)
 8007c88:	4a2b      	ldr	r2, [pc, #172]	; (8007d38 <demo_create+0x3e8>)
 8007c8a:	492c      	ldr	r1, [pc, #176]	; (8007d3c <demo_create+0x3ec>)
 8007c8c:	f011 f828 	bl	8018ce0 <lv_list_add>
    lv_list_add(list, SYMBOL_TRASH, "Delete", list_btn_action);
 8007c90:	4630      	mov	r0, r6
 8007c92:	4b26      	ldr	r3, [pc, #152]	; (8007d2c <demo_create+0x3dc>)
 8007c94:	4a2a      	ldr	r2, [pc, #168]	; (8007d40 <demo_create+0x3f0>)
 8007c96:	492b      	ldr	r1, [pc, #172]	; (8007d44 <demo_create+0x3f4>)
 8007c98:	f011 f822 	bl	8018ce0 <lv_list_add>
    lv_list_add(list, SYMBOL_EDIT, "Edit", list_btn_action);
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	4b23      	ldr	r3, [pc, #140]	; (8007d2c <demo_create+0x3dc>)
 8007ca0:	4a29      	ldr	r2, [pc, #164]	; (8007d48 <demo_create+0x3f8>)
 8007ca2:	492a      	ldr	r1, [pc, #168]	; (8007d4c <demo_create+0x3fc>)
 8007ca4:	f011 f81c 	bl	8018ce0 <lv_list_add>
    lv_list_add(list, SYMBOL_SAVE, "Save", list_btn_action);
 8007ca8:	4630      	mov	r0, r6
 8007caa:	4b20      	ldr	r3, [pc, #128]	; (8007d2c <demo_create+0x3dc>)
 8007cac:	4a28      	ldr	r2, [pc, #160]	; (8007d50 <demo_create+0x400>)
 8007cae:	4929      	ldr	r1, [pc, #164]	; (8007d54 <demo_create+0x404>)
 8007cb0:	f011 f816 	bl	8018ce0 <lv_list_add>
    lv_list_add(list, SYMBOL_WIFI, "WiFi", list_btn_action);
 8007cb4:	4630      	mov	r0, r6
 8007cb6:	4b1d      	ldr	r3, [pc, #116]	; (8007d2c <demo_create+0x3dc>)
 8007cb8:	4a27      	ldr	r2, [pc, #156]	; (8007d58 <demo_create+0x408>)
 8007cba:	4928      	ldr	r1, [pc, #160]	; (8007d5c <demo_create+0x40c>)
 8007cbc:	f011 f810 	bl	8018ce0 <lv_list_add>
 8007cc0:	e052      	b.n	8007d68 <demo_create+0x418>
 8007cc2:	bf00      	nop
 8007cc4:	200008f8 	.word	0x200008f8
 8007cc8:	20000040 	.word	0x20000040
 8007ccc:	2001933c 	.word	0x2001933c
 8007cd0:	ff487fb7 	.word	0xff487fb7
 8007cd4:	2001918c 	.word	0x2001918c
 8007cd8:	200191d4 	.word	0x200191d4
 8007cdc:	ff808080 	.word	0xff808080
 8007ce0:	080c7180 	.word	0x080c7180
 8007ce4:	080c7188 	.word	0x080c7188
 8007ce8:	080c7190 	.word	0x080c7190
 8007cec:	200192f4 	.word	0x200192f4
 8007cf0:	2001921c 	.word	0x2001921c
 8007cf4:	ff222222 	.word	0xff222222
 8007cf8:	20000ab4 	.word	0x20000ab4
 8007cfc:	080c7258 	.word	0x080c7258
 8007d00:	08007829 	.word	0x08007829
 8007d04:	20000900 	.word	0x20000900
 8007d08:	20000948 	.word	0x20000948
 8007d0c:	20000990 	.word	0x20000990
 8007d10:	20000afc 	.word	0x20000afc
 8007d14:	ff5596d8 	.word	0xff5596d8
 8007d18:	ff376290 	.word	0xff376290
 8007d1c:	ffbbd5f1 	.word	0xffbbd5f1
 8007d20:	55555556 	.word	0x55555556
 8007d24:	20019264 	.word	0x20019264
 8007d28:	20000b44 	.word	0x20000b44
 8007d2c:	08007901 	.word	0x08007901
 8007d30:	080c7198 	.word	0x080c7198
 8007d34:	080c719c 	.word	0x080c719c
 8007d38:	080c71a0 	.word	0x080c71a0
 8007d3c:	080c71a8 	.word	0x080c71a8
 8007d40:	080c71ac 	.word	0x080c71ac
 8007d44:	080c71b4 	.word	0x080c71b4
 8007d48:	080c71b8 	.word	0x080c71b8
 8007d4c:	080c71c0 	.word	0x080c71c0
 8007d50:	080c71c4 	.word	0x080c71c4
 8007d54:	080c71cc 	.word	0x080c71cc
 8007d58:	080c71d0 	.word	0x080c71d0
 8007d5c:	080c71d8 	.word	0x080c71d8
 8007d60:	ff333333 	.word	0xff333333
 8007d64:	ffc0c0c0 	.word	0xffc0c0c0
    lv_list_add(list, SYMBOL_GPS, "GPS", list_btn_action);
 8007d68:	4ba4      	ldr	r3, [pc, #656]	; (8007ffc <demo_create+0x6ac>)
 8007d6a:	4aa5      	ldr	r2, [pc, #660]	; (8008000 <demo_create+0x6b0>)
 8007d6c:	4630      	mov	r0, r6
 8007d6e:	49a5      	ldr	r1, [pc, #660]	; (8008004 <demo_create+0x6b4>)
 8007d70:	f010 ffb6 	bl	8018ce0 <lv_list_add>
    lv_obj_t * mbox = lv_mbox_create(parent, NULL);
 8007d74:	4629      	mov	r1, r5
 8007d76:	4640      	mov	r0, r8
 8007d78:	f011 fea4 	bl	8019ac4 <lv_mbox_create>
 8007d7c:	4606      	mov	r6, r0
    lv_mbox_set_text(mbox, "Click a button to copy its text to the Text area ");
 8007d7e:	49a2      	ldr	r1, [pc, #648]	; (8008008 <demo_create+0x6b8>)
 8007d80:	f011 fe3e 	bl	8019a00 <lv_mbox_set_text>
    lv_obj_set_width(mbox, LV_HOR_RES - LV_DPI);
 8007d84:	4630      	mov	r0, r6
 8007d86:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8007d8a:	f003 f8fb 	bl	800af84 <lv_obj_set_width>
    lv_mbox_add_btns(mbox, mbox_btns, NULL);    /*The default action is close*/
 8007d8e:	462a      	mov	r2, r5
 8007d90:	4630      	mov	r0, r6
 8007d92:	499e      	ldr	r1, [pc, #632]	; (800800c <demo_create+0x6bc>)
 8007d94:	f011 fdd6 	bl	8019944 <lv_mbox_add_btns>
    lv_obj_align(mbox, parent, LV_ALIGN_IN_TOP_MID, 0, LV_DPI / 2);
 8007d98:	2232      	movs	r2, #50	; 0x32
 8007d9a:	462b      	mov	r3, r5
 8007d9c:	4630      	mov	r0, r6
 8007d9e:	4641      	mov	r1, r8
 8007da0:	9200      	str	r2, [sp, #0]
 8007da2:	2202      	movs	r2, #2
    ser1 = lv_chart_add_series(chart, LV_COLOR_RED);
 8007da4:	f8df 8294 	ldr.w	r8, [pc, #660]	; 800803c <demo_create+0x6ec>
    lv_obj_align(mbox, parent, LV_ALIGN_IN_TOP_MID, 0, LV_DPI / 2);
 8007da8:	f002 fbfc 	bl	800a5a4 <lv_obj_align>
    lv_page_set_style(parent, LV_PAGE_STYLE_BG, &lv_style_transp_fit);
 8007dac:	4629      	mov	r1, r5
 8007dae:	4638      	mov	r0, r7
 8007db0:	4a97      	ldr	r2, [pc, #604]	; (8008010 <demo_create+0x6c0>)
 8007db2:	f012 fac3 	bl	801a33c <lv_page_set_style>
    lv_page_set_style(parent, LV_PAGE_STYLE_SCRL, &lv_style_transp_fit);
 8007db6:	4649      	mov	r1, r9
 8007db8:	4a95      	ldr	r2, [pc, #596]	; (8008010 <demo_create+0x6c0>)
 8007dba:	4638      	mov	r0, r7
 8007dbc:	f012 fabe 	bl	801a33c <lv_page_set_style>
    lv_cont_set_fit(lv_page_get_scrl(page), hor_en, ver_en);
 8007dc0:	4638      	mov	r0, r7
 8007dc2:	f012 fcbf 	bl	801a744 <lv_page_get_scrl>
 8007dc6:	462a      	mov	r2, r5
 8007dc8:	4629      	mov	r1, r5
 8007dca:	f00f fbbd 	bl	8017548 <lv_cont_set_fit>
    lv_page_set_scrl_height(parent, lv_obj_get_height(parent));
 8007dce:	4638      	mov	r0, r7
 8007dd0:	f004 f81e 	bl	800be10 <lv_obj_get_height>
 8007dd4:	4606      	mov	r6, r0
    lv_obj_set_height(lv_page_get_scrl(page), h);
 8007dd6:	4638      	mov	r0, r7
 8007dd8:	f012 fcb4 	bl	801a744 <lv_page_get_scrl>
 8007ddc:	4631      	mov	r1, r6
 8007dde:	f002 ffe9 	bl	800adb4 <lv_obj_set_height>
    lv_page_set_sb_mode(parent, LV_SB_MODE_OFF);
 8007de2:	4629      	mov	r1, r5
 8007de4:	4638      	mov	r0, r7
 8007de6:	f012 fa63 	bl	801a2b0 <lv_page_set_sb_mode>
    lv_style_copy(&style_chart, &lv_style_pretty);
 8007dea:	498a      	ldr	r1, [pc, #552]	; (8008014 <demo_create+0x6c4>)
 8007dec:	488a      	ldr	r0, [pc, #552]	; (8008018 <demo_create+0x6c8>)
 8007dee:	f004 fd91 	bl	800c914 <lv_style_copy>
    style_chart.body.opa = LV_OPA_60;
 8007df2:	2299      	movs	r2, #153	; 0x99
    style_chart.line.color = LV_COLOR_GRAY;
 8007df4:	4b89      	ldr	r3, [pc, #548]	; (800801c <demo_create+0x6cc>)
    chart = lv_chart_create(parent, NULL);
 8007df6:	4629      	mov	r1, r5
 8007df8:	4638      	mov	r0, r7
    style_chart.body.opa = LV_OPA_60;
 8007dfa:	f884 22a2 	strb.w	r2, [r4, #674]	; 0x2a2
    style_chart.line.color = LV_COLOR_GRAY;
 8007dfe:	f8c4 32d4 	str.w	r3, [r4, #724]	; 0x2d4
    style_chart.body.radius = 0;
 8007e02:	f8a4 52a0 	strh.w	r5, [r4, #672]	; 0x2a0
    chart = lv_chart_create(parent, NULL);
 8007e06:	f00e fe25 	bl	8016a54 <lv_chart_create>
 8007e0a:	4606      	mov	r6, r0
    lv_obj_set_size(chart, 2 * lv_obj_get_width(parent) / 3, lv_obj_get_height(parent) / 2);
 8007e0c:	4638      	mov	r0, r7
    chart = lv_chart_create(parent, NULL);
 8007e0e:	f8c4 60e0 	str.w	r6, [r4, #224]	; 0xe0
    lv_obj_set_size(chart, 2 * lv_obj_get_width(parent) / 3, lv_obj_get_height(parent) / 2);
 8007e12:	f003 fff7 	bl	800be04 <lv_obj_get_width>
 8007e16:	4605      	mov	r5, r0
 8007e18:	4638      	mov	r0, r7
 8007e1a:	f003 fff9 	bl	800be10 <lv_obj_get_height>
 8007e1e:	4980      	ldr	r1, [pc, #512]	; (8008020 <demo_create+0x6d0>)
 8007e20:	006b      	lsls	r3, r5, #1
 8007e22:	1e02      	subs	r2, r0, #0
 8007e24:	4630      	mov	r0, r6
    style_bar.body.radius = LV_RADIUS_CIRCLE;
 8007e26:	f643 76ff 	movw	r6, #16383	; 0x3fff
    lv_obj_set_size(chart, 2 * lv_obj_get_width(parent) / 3, lv_obj_get_height(parent) / 2);
 8007e2a:	fb81 5103 	smull	r5, r1, r1, r3
 8007e2e:	bfb8      	it	lt
 8007e30:	444a      	addlt	r2, r9
    style_bar.body.padding.ver = LV_DPI / 10;
 8007e32:	f04f 090a 	mov.w	r9, #10
    lv_obj_set_size(chart, 2 * lv_obj_get_width(parent) / 3, lv_obj_get_height(parent) / 2);
 8007e36:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8007e3a:	f342 024f 	sbfx	r2, r2, #1, #16
 8007e3e:	b209      	sxth	r1, r1
 8007e40:	f002 fecc 	bl	800abdc <lv_obj_set_size>
    lv_obj_align(chart, NULL,  LV_ALIGN_IN_TOP_MID, 0, LV_DPI / 4);
 8007e44:	2300      	movs	r3, #0
 8007e46:	2119      	movs	r1, #25
 8007e48:	2202      	movs	r2, #2
 8007e4a:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
 8007e4e:	9100      	str	r1, [sp, #0]
 8007e50:	4619      	mov	r1, r3
 8007e52:	f002 fba7 	bl	800a5a4 <lv_obj_align>
    lv_chart_set_type(chart, LV_CHART_TYPE_COLUMN);
 8007e56:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
 8007e5a:	2102      	movs	r1, #2
 8007e5c:	f00e feb4 	bl	8016bc8 <lv_chart_set_type>
 * @param chart pointer to a chart object
 * @param style pointer to a style
 */
static inline void lv_chart_set_style(lv_obj_t *chart, lv_style_t *style)
{
    lv_obj_set_style(chart, style);
 8007e60:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
 8007e64:	496c      	ldr	r1, [pc, #432]	; (8008018 <demo_create+0x6c8>)
 8007e66:	f003 f975 	bl	800b154 <lv_obj_set_style>
    lv_chart_set_series_opa(chart, LV_OPA_70);
 8007e6a:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
 8007e6e:	21b2      	movs	r1, #178	; 0xb2
 8007e70:	f00e febe 	bl	8016bf0 <lv_chart_set_series_opa>
    ser1 = lv_chart_add_series(chart, LV_COLOR_RED);
 8007e74:	4641      	mov	r1, r8
 8007e76:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
 8007e7a:	f00e fe67 	bl	8016b4c <lv_chart_add_series>
 8007e7e:	4605      	mov	r5, r0
    lv_chart_set_next(chart, ser1, 40);
 8007e80:	2228      	movs	r2, #40	; 0x28
 8007e82:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
 8007e86:	4629      	mov	r1, r5
 8007e88:	f00e fec2 	bl	8016c10 <lv_chart_set_next>
    lv_chart_set_next(chart, ser1, 30);
 8007e8c:	4629      	mov	r1, r5
 8007e8e:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
 8007e92:	221e      	movs	r2, #30
 8007e94:	f00e febc 	bl	8016c10 <lv_chart_set_next>
    lv_chart_set_next(chart, ser1, 47);
 8007e98:	4629      	mov	r1, r5
 8007e9a:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
 8007e9e:	222f      	movs	r2, #47	; 0x2f
 8007ea0:	f00e feb6 	bl	8016c10 <lv_chart_set_next>
    lv_chart_set_next(chart, ser1, 59);
 8007ea4:	4629      	mov	r1, r5
 8007ea6:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
 8007eaa:	223b      	movs	r2, #59	; 0x3b
 8007eac:	f00e feb0 	bl	8016c10 <lv_chart_set_next>
    lv_chart_set_next(chart, ser1, 59);
 8007eb0:	4629      	mov	r1, r5
 8007eb2:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
 8007eb6:	223b      	movs	r2, #59	; 0x3b
 8007eb8:	f00e feaa 	bl	8016c10 <lv_chart_set_next>
    lv_chart_set_next(chart, ser1, 31);
 8007ebc:	4629      	mov	r1, r5
 8007ebe:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
 8007ec2:	221f      	movs	r2, #31
 8007ec4:	f00e fea4 	bl	8016c10 <lv_chart_set_next>
    lv_chart_set_next(chart, ser1, 55);
 8007ec8:	4629      	mov	r1, r5
 8007eca:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
 8007ece:	2237      	movs	r2, #55	; 0x37
 8007ed0:	f00e fe9e 	bl	8016c10 <lv_chart_set_next>
    lv_chart_set_next(chart, ser1, 70);
 8007ed4:	4629      	mov	r1, r5
 8007ed6:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
 8007eda:	2246      	movs	r2, #70	; 0x46
 8007edc:	f00e fe98 	bl	8016c10 <lv_chart_set_next>
    lv_chart_set_next(chart, ser1, 82);
 8007ee0:	4629      	mov	r1, r5
 8007ee2:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
 8007ee6:	2252      	movs	r2, #82	; 0x52
 8007ee8:	f00e fe92 	bl	8016c10 <lv_chart_set_next>
    lv_chart_set_next(chart, ser1, 91);
 8007eec:	4629      	mov	r1, r5
 8007eee:	225b      	movs	r2, #91	; 0x5b
 8007ef0:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
 8007ef4:	f00e fe8c 	bl	8016c10 <lv_chart_set_next>
    lv_style_copy(&style_bar, &lv_style_pretty);
 8007ef8:	4946      	ldr	r1, [pc, #280]	; (8008014 <demo_create+0x6c4>)
 8007efa:	484a      	ldr	r0, [pc, #296]	; (8008024 <demo_create+0x6d4>)
 8007efc:	f004 fd0a 	bl	800c914 <lv_style_copy>
    style_bar.body.main_color =  LV_COLOR_BLACK;
 8007f00:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8007f04:	4945      	ldr	r1, [pc, #276]	; (800801c <demo_create+0x6cc>)
    style_bar.body.border.color = LV_COLOR_WHITE;
 8007f06:	f04f 32ff 	mov.w	r2, #4294967295
    style_bar.body.main_color =  LV_COLOR_BLACK;
 8007f0a:	f8c4 32e0 	str.w	r3, [r4, #736]	; 0x2e0
    style_bar.body.opa = LV_OPA_60;
 8007f0e:	2399      	movs	r3, #153	; 0x99
    style_bar.body.main_color =  LV_COLOR_BLACK;
 8007f10:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
    lv_style_copy(&style_indic, &lv_style_pretty);
 8007f14:	4844      	ldr	r0, [pc, #272]	; (8008028 <demo_create+0x6d8>)
 8007f16:	493f      	ldr	r1, [pc, #252]	; (8008014 <demo_create+0x6c4>)
    style_bar.body.radius = LV_RADIUS_CIRCLE;
 8007f18:	f8a4 62e8 	strh.w	r6, [r4, #744]	; 0x2e8
    style_bar.body.border.color = LV_COLOR_WHITE;
 8007f1c:	f8c4 22ec 	str.w	r2, [r4, #748]	; 0x2ec
    style_bar.body.opa = LV_OPA_60;
 8007f20:	f884 32ea 	strb.w	r3, [r4, #746]	; 0x2ea
    style_bar.body.padding.ver = LV_DPI / 10;
 8007f24:	f8c4 92fc 	str.w	r9, [r4, #764]	; 0x2fc
    lv_style_copy(&style_indic, &lv_style_pretty);
 8007f28:	f004 fcf4 	bl	800c914 <lv_style_copy>
    style_indic.body.main_color =  LV_COLOR_RED;
 8007f2c:	4a3f      	ldr	r2, [pc, #252]	; (800802c <demo_create+0x6dc>)
    style_indic.body.padding.ver = LV_DPI / 30;
 8007f2e:	f04f 1303 	mov.w	r3, #196611	; 0x30003
    lv_style_copy(&style_knob, &lv_style_pretty);
 8007f32:	4938      	ldr	r1, [pc, #224]	; (8008014 <demo_create+0x6c4>)
 8007f34:	483e      	ldr	r0, [pc, #248]	; (8008030 <demo_create+0x6e0>)
    style_indic.body.main_color =  LV_COLOR_RED;
 8007f36:	f8c4 232c 	str.w	r2, [r4, #812]	; 0x32c
    style_indic.body.radius = LV_RADIUS_CIRCLE;
 8007f3a:	f8a4 6330 	strh.w	r6, [r4, #816]	; 0x330
    style_indic.body.padding.ver = LV_DPI / 30;
 8007f3e:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
    style_indic.body.shadow.width = LV_DPI / 10;
 8007f42:	f8a4 9340 	strh.w	r9, [r4, #832]	; 0x340
    style_indic.body.main_color =  LV_COLOR_RED;
 8007f46:	f8c4 8328 	str.w	r8, [r4, #808]	; 0x328
    style_indic.body.shadow.color = LV_COLOR_RED;
 8007f4a:	f8c4 833c 	str.w	r8, [r4, #828]	; 0x33c
    lv_style_copy(&style_knob, &lv_style_pretty);
 8007f4e:	f004 fce1 	bl	800c914 <lv_style_copy>
    style_knob.body.opa = LV_OPA_70;
 8007f52:	23b2      	movs	r3, #178	; 0xb2
    lv_obj_t * slider = lv_slider_create(parent, NULL);
 8007f54:	4638      	mov	r0, r7
 8007f56:	2100      	movs	r1, #0
    style_knob.body.radius = LV_RADIUS_CIRCLE;
 8007f58:	f8a4 6378 	strh.w	r6, [r4, #888]	; 0x378
    style_knob.body.opa = LV_OPA_70;
 8007f5c:	f884 337a 	strb.w	r3, [r4, #890]	; 0x37a
    lv_obj_t * slider = lv_slider_create(parent, NULL);
 8007f60:	f013 fc74 	bl	801b84c <lv_slider_create>
 8007f64:	4605      	mov	r5, r0
    lv_slider_set_style(slider, LV_SLIDER_STYLE_BG, &style_bar);
 8007f66:	4a2f      	ldr	r2, [pc, #188]	; (8008024 <demo_create+0x6d4>)
 8007f68:	2100      	movs	r1, #0
 8007f6a:	f013 fc4f 	bl	801b80c <lv_slider_set_style>
    lv_slider_set_style(slider, LV_SLIDER_STYLE_INDIC, &style_indic);
 8007f6e:	4628      	mov	r0, r5
 8007f70:	4a2d      	ldr	r2, [pc, #180]	; (8008028 <demo_create+0x6d8>)
 8007f72:	2101      	movs	r1, #1
 8007f74:	f013 fc4a 	bl	801b80c <lv_slider_set_style>
    lv_slider_set_style(slider, LV_SLIDER_STYLE_KNOB, &style_knob);
 8007f78:	4628      	mov	r0, r5
 8007f7a:	4a2d      	ldr	r2, [pc, #180]	; (8008030 <demo_create+0x6e0>)
 8007f7c:	2102      	movs	r1, #2
 8007f7e:	f013 fc45 	bl	801b80c <lv_slider_set_style>
    lv_obj_set_size(slider, lv_obj_get_width(chart), LV_DPI / 3);
 8007f82:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
 8007f86:	f003 ff3d 	bl	800be04 <lv_obj_get_width>
 8007f8a:	2221      	movs	r2, #33	; 0x21
 8007f8c:	4601      	mov	r1, r0
 8007f8e:	4628      	mov	r0, r5
 8007f90:	f002 fe24 	bl	800abdc <lv_obj_set_size>
    lv_obj_align(slider, chart, LV_ALIGN_OUT_BOTTOM_MID, 0, (LV_VER_RES - chart->coords.y2 - lv_obj_get_height(slider)) / 2); /*Align to below the chart*/
 8007f94:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 8007f98:	4628      	mov	r0, r5
 8007f9a:	f9b7 6016 	ldrsh.w	r6, [r7, #22]
 8007f9e:	f003 ff37 	bl	800be10 <lv_obj_get_height>
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	4639      	mov	r1, r7
 8007fa6:	f5c6 7688 	rsb	r6, r6, #272	; 0x110
 8007faa:	220d      	movs	r2, #13
 8007fac:	1a30      	subs	r0, r6, r0
 8007fae:	bf48      	it	mi
 8007fb0:	3001      	addmi	r0, #1
 8007fb2:	f340 004f 	sbfx	r0, r0, #1, #16
 8007fb6:	9000      	str	r0, [sp, #0]
 8007fb8:	4628      	mov	r0, r5
 8007fba:	f002 faf3 	bl	800a5a4 <lv_obj_align>
    lv_slider_set_action(slider, slider_action);
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	491c      	ldr	r1, [pc, #112]	; (8008034 <demo_create+0x6e4>)
 8007fc2:	f013 fc1d 	bl	801b800 <lv_slider_set_action>
 * @param min minimum value
 * @param max maximum value
 */
static inline void lv_slider_set_range(lv_obj_t *slider, int16_t min, int16_t max)
{
    lv_bar_set_range(slider, min, max);
 8007fc6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007fca:	4628      	mov	r0, r5
 8007fcc:	210a      	movs	r1, #10
 8007fce:	f00c fc11 	bl	80147f4 <lv_bar_set_range>
    lv_bar_set_value(slider, value);
 8007fd2:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	f00c fa0c 	bl	80143f4 <lv_bar_set_value>
    int16_t v = lv_slider_get_value(slider);
 8007fdc:	4628      	mov	r0, r5
 8007fde:	f013 fca7 	bl	801b930 <lv_slider_get_value>
    v = 1000 * 100 / v; /*Convert to range modify values linearly*/
 8007fe2:	4a15      	ldr	r2, [pc, #84]	; (8008038 <demo_create+0x6e8>)
    lv_chart_set_range(chart, 0, v);
 8007fe4:	2100      	movs	r1, #0
    v = 1000 * 100 / v; /*Convert to range modify values linearly*/
 8007fe6:	fb92 f2f0 	sdiv	r2, r2, r0
    lv_chart_set_range(chart, 0, v);
 8007fea:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
 8007fee:	b212      	sxth	r2, r2
}
 8007ff0:	b005      	add	sp, #20
 8007ff2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_chart_set_range(chart, 0, v);
 8007ff6:	f00e bdcf 	b.w	8016b98 <lv_chart_set_range>
 8007ffa:	bf00      	nop
 8007ffc:	08007901 	.word	0x08007901
 8008000:	080c71dc 	.word	0x080c71dc
 8008004:	080c71e0 	.word	0x080c71e0
 8008008:	080c71e4 	.word	0x080c71e4
 800800c:	20000038 	.word	0x20000038
 8008010:	200192f4 	.word	0x200192f4
 8008014:	2001921c 	.word	0x2001921c
 8008018:	20000b8c 	.word	0x20000b8c
 800801c:	ff808080 	.word	0xff808080
 8008020:	55555556 	.word	0x55555556
 8008024:	20000bd4 	.word	0x20000bd4
 8008028:	20000c1c 	.word	0x20000c1c
 800802c:	ff800000 	.word	0xff800000
 8008030:	20000c64 	.word	0x20000c64
 8008034:	08007929 	.word	0x08007929
 8008038:	000186a0 	.word	0x000186a0
 800803c:	ffff0000 	.word	0xffff0000

08008040 <lv_group_focus_next.part.1>:
 */
void lv_group_focus_next(lv_group_t * group)
{
    if(group->frozen) return;

    if(group->obj_focus) {
 8008040:	68c3      	ldr	r3, [r0, #12]
void lv_group_focus_next(lv_group_t * group)
 8008042:	b510      	push	{r4, lr}
 8008044:	4604      	mov	r4, r0
    if(group->obj_focus) {
 8008046:	b34b      	cbz	r3, 800809c <lv_group_focus_next.part.1+0x5c>
        (*group->obj_focus)->signal_func(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 8008048:	6818      	ldr	r0, [r3, #0]
 800804a:	2111      	movs	r1, #17
 800804c:	2200      	movs	r2, #0
 800804e:	6983      	ldr	r3, [r0, #24]
 8008050:	4798      	blx	r3
        lv_obj_invalidate(*group->obj_focus);
 8008052:	68e3      	ldr	r3, [r4, #12]
 8008054:	6818      	ldr	r0, [r3, #0]
 8008056:	f001 fe43 	bl	8009ce0 <lv_obj_invalidate>
    }

    lv_obj_t ** obj_next;
    if(group->obj_focus == NULL) obj_next = lv_ll_get_head(&group->obj_ll);
 800805a:	68e1      	ldr	r1, [r4, #12]
 800805c:	b1f1      	cbz	r1, 800809c <lv_group_focus_next.part.1+0x5c>
    else obj_next = lv_ll_get_next(&group->obj_ll, group->obj_focus);
 800805e:	4620      	mov	r0, r4
 8008060:	f00b f89e 	bl	80131a0 <lv_ll_get_next>

    if(obj_next == NULL) {
 8008064:	b178      	cbz	r0, 8008086 <lv_group_focus_next.part.1+0x46>
        if(group->wrap) obj_next = lv_ll_get_head(&group->obj_ll);
        else obj_next = lv_ll_get_tail(&group->obj_ll);
    }
    group->obj_focus = obj_next;
 8008066:	60e0      	str	r0, [r4, #12]

    if(group->obj_focus) {
        (*group->obj_focus)->signal_func(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 8008068:	6800      	ldr	r0, [r0, #0]
 800806a:	2200      	movs	r2, #0
 800806c:	2110      	movs	r1, #16
 800806e:	6983      	ldr	r3, [r0, #24]
 8008070:	4798      	blx	r3
        lv_obj_invalidate(*group->obj_focus);
 8008072:	68e3      	ldr	r3, [r4, #12]
 8008074:	6818      	ldr	r0, [r3, #0]
 8008076:	f001 fe33 	bl	8009ce0 <lv_obj_invalidate>

        if(group->focus_cb) group->focus_cb(group);
 800807a:	69a3      	ldr	r3, [r4, #24]
 800807c:	b16b      	cbz	r3, 800809a <lv_group_focus_next.part.1+0x5a>
 800807e:	4620      	mov	r0, r4
    }
}
 8008080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        if(group->focus_cb) group->focus_cb(group);
 8008084:	4718      	bx	r3
        if(group->wrap) obj_next = lv_ll_get_head(&group->obj_ll);
 8008086:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 800808a:	4620      	mov	r0, r4
 800808c:	06db      	lsls	r3, r3, #27
 800808e:	d509      	bpl.n	80080a4 <lv_group_focus_next.part.1+0x64>
 8008090:	f00b f87e 	bl	8013190 <lv_ll_get_head>
    group->obj_focus = obj_next;
 8008094:	60e0      	str	r0, [r4, #12]
    if(group->obj_focus) {
 8008096:	2800      	cmp	r0, #0
 8008098:	d1e6      	bne.n	8008068 <lv_group_focus_next.part.1+0x28>
 800809a:	bd10      	pop	{r4, pc}
    if(group->obj_focus == NULL) obj_next = lv_ll_get_head(&group->obj_ll);
 800809c:	4620      	mov	r0, r4
 800809e:	f00b f877 	bl	8013190 <lv_ll_get_head>
 80080a2:	e7df      	b.n	8008064 <lv_group_focus_next.part.1+0x24>
        else obj_next = lv_ll_get_tail(&group->obj_ll);
 80080a4:	f00b f878 	bl	8013198 <lv_ll_get_tail>
 80080a8:	e7f4      	b.n	8008094 <lv_group_focus_next.part.1+0x54>
 80080aa:	bf00      	nop

080080ac <lv_group_focus_prev.part.2>:
 */
void lv_group_focus_prev(lv_group_t * group)
{
    if(group->frozen) return;

    if(group->obj_focus) {
 80080ac:	68c3      	ldr	r3, [r0, #12]
void lv_group_focus_prev(lv_group_t * group)
 80080ae:	b510      	push	{r4, lr}
 80080b0:	4604      	mov	r4, r0
    if(group->obj_focus) {
 80080b2:	b34b      	cbz	r3, 8008108 <lv_group_focus_prev.part.2+0x5c>
        (*group->obj_focus)->signal_func(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 80080b4:	6818      	ldr	r0, [r3, #0]
 80080b6:	2111      	movs	r1, #17
 80080b8:	2200      	movs	r2, #0
 80080ba:	6983      	ldr	r3, [r0, #24]
 80080bc:	4798      	blx	r3
        lv_obj_invalidate(*group->obj_focus);
 80080be:	68e3      	ldr	r3, [r4, #12]
 80080c0:	6818      	ldr	r0, [r3, #0]
 80080c2:	f001 fe0d 	bl	8009ce0 <lv_obj_invalidate>
    }

    lv_obj_t ** obj_next;
    if(group->obj_focus == NULL) obj_next = lv_ll_get_tail(&group->obj_ll);
 80080c6:	68e1      	ldr	r1, [r4, #12]
 80080c8:	b1f1      	cbz	r1, 8008108 <lv_group_focus_prev.part.2+0x5c>
    else obj_next = lv_ll_get_prev(&group->obj_ll, group->obj_focus);
 80080ca:	4620      	mov	r0, r4
 80080cc:	f00b f86e 	bl	80131ac <lv_ll_get_prev>

    if(obj_next == NULL) {
 80080d0:	b178      	cbz	r0, 80080f2 <lv_group_focus_prev.part.2+0x46>
        if(group->wrap) obj_next = lv_ll_get_tail(&group->obj_ll);
        else  obj_next = lv_ll_get_head(&group->obj_ll);
    }
    group->obj_focus = obj_next;
 80080d2:	60e0      	str	r0, [r4, #12]

    if(group->obj_focus != NULL) {
        (*group->obj_focus)->signal_func(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 80080d4:	6800      	ldr	r0, [r0, #0]
 80080d6:	2200      	movs	r2, #0
 80080d8:	2110      	movs	r1, #16
 80080da:	6983      	ldr	r3, [r0, #24]
 80080dc:	4798      	blx	r3
        lv_obj_invalidate(*group->obj_focus);
 80080de:	68e3      	ldr	r3, [r4, #12]
 80080e0:	6818      	ldr	r0, [r3, #0]
 80080e2:	f001 fdfd 	bl	8009ce0 <lv_obj_invalidate>

        if(group->focus_cb) group->focus_cb(group);
 80080e6:	69a3      	ldr	r3, [r4, #24]
 80080e8:	b16b      	cbz	r3, 8008106 <lv_group_focus_prev.part.2+0x5a>
 80080ea:	4620      	mov	r0, r4
    }

}
 80080ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        if(group->focus_cb) group->focus_cb(group);
 80080f0:	4718      	bx	r3
        if(group->wrap) obj_next = lv_ll_get_tail(&group->obj_ll);
 80080f2:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 80080f6:	4620      	mov	r0, r4
 80080f8:	06db      	lsls	r3, r3, #27
 80080fa:	d509      	bpl.n	8008110 <lv_group_focus_prev.part.2+0x64>
 80080fc:	f00b f84c 	bl	8013198 <lv_ll_get_tail>
    group->obj_focus = obj_next;
 8008100:	60e0      	str	r0, [r4, #12]
    if(group->obj_focus != NULL) {
 8008102:	2800      	cmp	r0, #0
 8008104:	d1e6      	bne.n	80080d4 <lv_group_focus_prev.part.2+0x28>
 8008106:	bd10      	pop	{r4, pc}
    if(group->obj_focus == NULL) obj_next = lv_ll_get_tail(&group->obj_ll);
 8008108:	4620      	mov	r0, r4
 800810a:	f00b f845 	bl	8013198 <lv_ll_get_tail>
 800810e:	e7df      	b.n	80080d0 <lv_group_focus_prev.part.2+0x24>
        else  obj_next = lv_ll_get_head(&group->obj_ll);
 8008110:	f00b f83e 	bl	8013190 <lv_ll_get_head>
 8008114:	e7f4      	b.n	8008100 <lv_group_focus_prev.part.2+0x54>
 8008116:	bf00      	nop

08008118 <lv_group_add_obj>:
    if(group == NULL) return;
 8008118:	b3a0      	cbz	r0, 8008184 <lv_group_add_obj+0x6c>
{
 800811a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(obj->group_p) {
 800811c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800811e:	4604      	mov	r4, r0
 8008120:	460d      	mov	r5, r1
 8008122:	b11b      	cbz	r3, 800812c <lv_group_add_obj+0x14>
        if(lv_obj_is_focused(obj)) {
 8008124:	4608      	mov	r0, r1
 8008126:	f003 fefb 	bl	800bf20 <lv_obj_is_focused>
 800812a:	b968      	cbnz	r0, 8008148 <lv_group_add_obj+0x30>
    obj->group_p = group;
 800812c:	62ec      	str	r4, [r5, #44]	; 0x2c
    lv_obj_t ** next = lv_ll_ins_tail(&group->obj_ll);
 800812e:	4620      	mov	r0, r4
 8008130:	f00a ff48 	bl	8012fc4 <lv_ll_ins_tail>
    lv_mem_assert(next);
 8008134:	4606      	mov	r6, r0
 8008136:	b130      	cbz	r0, 8008146 <lv_group_add_obj+0x2e>
    *next = obj;
 8008138:	6005      	str	r5, [r0, #0]
    if(lv_ll_get_head(&group->obj_ll) == next) {
 800813a:	4620      	mov	r0, r4
 800813c:	f00b f828 	bl	8013190 <lv_ll_get_head>
 8008140:	4286      	cmp	r6, r0
 8008142:	d020      	beq.n	8008186 <lv_group_add_obj+0x6e>
 8008144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008146:	e7fe      	b.n	8008146 <lv_group_add_obj+0x2e>
            lv_group_refocus(obj->group_p);
 8008148:	6aee      	ldr	r6, [r5, #44]	; 0x2c
    group->refocus_policy = policy & 0x01;
}

static void lv_group_refocus(lv_group_t *g) {
    /*Refocus must temporarily allow wrapping to work correctly*/
    uint8_t temp_wrap = g->wrap;
 800814a:	f896 3064 	ldrb.w	r3, [r6, #100]	; 0x64
    g->wrap = 1;
 800814e:	f043 0210 	orr.w	r2, r3, #16
    uint8_t temp_wrap = g->wrap;
 8008152:	f3c3 1700 	ubfx	r7, r3, #4, #1

    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 8008156:	4613      	mov	r3, r2
    g->wrap = 1;
 8008158:	f886 2064 	strb.w	r2, [r6, #100]	; 0x64
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 800815c:	071a      	lsls	r2, r3, #28
 800815e:	d40b      	bmi.n	8008178 <lv_group_add_obj+0x60>
    if(group->frozen) return;
 8008160:	07db      	lsls	r3, r3, #31
 8008162:	d402      	bmi.n	800816a <lv_group_add_obj+0x52>
 8008164:	4630      	mov	r0, r6
 8008166:	f7ff ff6b 	bl	8008040 <lv_group_focus_next.part.1>
        lv_group_focus_next(g);
    else if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_PREV)
        lv_group_focus_prev(g);
    /*Restore wrap property*/
    g->wrap = temp_wrap;
 800816a:	f896 3064 	ldrb.w	r3, [r6, #100]	; 0x64
 800816e:	f367 1304 	bfi	r3, r7, #4, #1
 8008172:	f886 3064 	strb.w	r3, [r6, #100]	; 0x64
 8008176:	e7d9      	b.n	800812c <lv_group_add_obj+0x14>
    if(group->frozen) return;
 8008178:	07d8      	lsls	r0, r3, #31
 800817a:	d4f6      	bmi.n	800816a <lv_group_add_obj+0x52>
 800817c:	4630      	mov	r0, r6
 800817e:	f7ff ff95 	bl	80080ac <lv_group_focus_prev.part.2>
 8008182:	e7f2      	b.n	800816a <lv_group_add_obj+0x52>
 8008184:	4770      	bx	lr
    uint8_t temp_wrap = g->wrap;
 8008186:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    g->wrap = 1;
 800818a:	f043 0210 	orr.w	r2, r3, #16
    uint8_t temp_wrap = g->wrap;
 800818e:	f3c3 1500 	ubfx	r5, r3, #4, #1
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 8008192:	0711      	lsls	r1, r2, #28
 8008194:	4613      	mov	r3, r2
    g->wrap = 1;
 8008196:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 800819a:	d40b      	bmi.n	80081b4 <lv_group_add_obj+0x9c>
    if(group->frozen) return;
 800819c:	07da      	lsls	r2, r3, #31
 800819e:	d402      	bmi.n	80081a6 <lv_group_add_obj+0x8e>
 80081a0:	4620      	mov	r0, r4
 80081a2:	f7ff ff4d 	bl	8008040 <lv_group_focus_next.part.1>
    g->wrap = temp_wrap;
 80081a6:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 80081aa:	f365 1304 	bfi	r3, r5, #4, #1
 80081ae:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 80081b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(group->frozen) return;
 80081b4:	07db      	lsls	r3, r3, #31
 80081b6:	d4f6      	bmi.n	80081a6 <lv_group_add_obj+0x8e>
 80081b8:	4620      	mov	r0, r4
 80081ba:	f7ff ff77 	bl	80080ac <lv_group_focus_prev.part.2>
 80081be:	e7f2      	b.n	80081a6 <lv_group_add_obj+0x8e>

080081c0 <lv_group_remove_obj>:
{
 80081c0:	b570      	push	{r4, r5, r6, lr}
    lv_group_t * g = obj->group_p;
 80081c2:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
    if(g == NULL) return;
 80081c4:	b1f6      	cbz	r6, 8008204 <lv_group_remove_obj+0x44>
    if(g->obj_focus == NULL) return;        /*Just to be sure (Not possible if there is at least one object in the group)*/
 80081c6:	68f3      	ldr	r3, [r6, #12]
 80081c8:	b1e3      	cbz	r3, 8008204 <lv_group_remove_obj+0x44>
    if(*g->obj_focus == obj) {
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4605      	mov	r5, r0
 80081ce:	4298      	cmp	r0, r3
 80081d0:	d019      	beq.n	8008206 <lv_group_remove_obj+0x46>
    LL_READ(g->obj_ll, i) {
 80081d2:	4630      	mov	r0, r6
 80081d4:	f00a ffdc 	bl	8013190 <lv_ll_get_head>
 80081d8:	4604      	mov	r4, r0
 80081da:	b930      	cbnz	r0, 80081ea <lv_group_remove_obj+0x2a>
 80081dc:	e012      	b.n	8008204 <lv_group_remove_obj+0x44>
 80081de:	4621      	mov	r1, r4
 80081e0:	4630      	mov	r0, r6
 80081e2:	f00a ffdd 	bl	80131a0 <lv_ll_get_next>
 80081e6:	4604      	mov	r4, r0
 80081e8:	b160      	cbz	r0, 8008204 <lv_group_remove_obj+0x44>
        if(*i == obj) {
 80081ea:	6823      	ldr	r3, [r4, #0]
 80081ec:	429d      	cmp	r5, r3
 80081ee:	d1f6      	bne.n	80081de <lv_group_remove_obj+0x1e>
            lv_ll_rem(&g->obj_ll, i);
 80081f0:	4630      	mov	r0, r6
 80081f2:	4621      	mov	r1, r4
 80081f4:	f00a ff00 	bl	8012ff8 <lv_ll_rem>
            lv_mem_free(i);
 80081f8:	4620      	mov	r0, r4
 80081fa:	f00b f837 	bl	801326c <lv_mem_free>
            obj->group_p = NULL;
 80081fe:	2300      	movs	r3, #0
 8008200:	62eb      	str	r3, [r5, #44]	; 0x2c
            break;
 8008202:	bd70      	pop	{r4, r5, r6, pc}
 8008204:	bd70      	pop	{r4, r5, r6, pc}
        if(lv_ll_get_head(&g->obj_ll) == g->obj_focus && lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 8008206:	4630      	mov	r0, r6
 8008208:	f00a ffc2 	bl	8013190 <lv_ll_get_head>
 800820c:	68f2      	ldr	r2, [r6, #12]
 800820e:	4282      	cmp	r2, r0
 8008210:	d023      	beq.n	800825a <lv_group_remove_obj+0x9a>
    uint8_t temp_wrap = g->wrap;
 8008212:	f896 3064 	ldrb.w	r3, [r6, #100]	; 0x64
    g->wrap = 1;
 8008216:	f043 0110 	orr.w	r1, r3, #16
    uint8_t temp_wrap = g->wrap;
 800821a:	f3c3 1400 	ubfx	r4, r3, #4, #1
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 800821e:	0708      	lsls	r0, r1, #28
 8008220:	460b      	mov	r3, r1
    g->wrap = 1;
 8008222:	f886 1064 	strb.w	r1, [r6, #100]	; 0x64
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 8008226:	d511      	bpl.n	800824c <lv_group_remove_obj+0x8c>
    if(group->frozen) return;
 8008228:	07db      	lsls	r3, r3, #31
 800822a:	d403      	bmi.n	8008234 <lv_group_remove_obj+0x74>
 800822c:	4630      	mov	r0, r6
 800822e:	f7ff ff3d 	bl	80080ac <lv_group_focus_prev.part.2>
 8008232:	68f2      	ldr	r2, [r6, #12]
    g->wrap = temp_wrap;
 8008234:	f896 3064 	ldrb.w	r3, [r6, #100]	; 0x64
 8008238:	f364 1304 	bfi	r3, r4, #4, #1
 800823c:	f886 3064 	strb.w	r3, [r6, #100]	; 0x64
    if(*g->obj_focus == obj) {
 8008240:	6813      	ldr	r3, [r2, #0]
 8008242:	429d      	cmp	r5, r3
 8008244:	d1c5      	bne.n	80081d2 <lv_group_remove_obj+0x12>
        g->obj_focus = NULL;
 8008246:	2300      	movs	r3, #0
 8008248:	60f3      	str	r3, [r6, #12]
 800824a:	e7c2      	b.n	80081d2 <lv_group_remove_obj+0x12>
    if(group->frozen) return;
 800824c:	07d9      	lsls	r1, r3, #31
 800824e:	d4f1      	bmi.n	8008234 <lv_group_remove_obj+0x74>
 8008250:	4630      	mov	r0, r6
 8008252:	f7ff fef5 	bl	8008040 <lv_group_focus_next.part.1>
 8008256:	68f2      	ldr	r2, [r6, #12]
 8008258:	e7ec      	b.n	8008234 <lv_group_remove_obj+0x74>
        if(lv_ll_get_head(&g->obj_ll) == g->obj_focus && lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 800825a:	4630      	mov	r0, r6
 800825c:	f00a ff9c 	bl	8013198 <lv_ll_get_tail>
 8008260:	68f2      	ldr	r2, [r6, #12]
 8008262:	4282      	cmp	r2, r0
 8008264:	d1d5      	bne.n	8008212 <lv_group_remove_obj+0x52>
            (*g->obj_focus)->signal_func(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 8008266:	6810      	ldr	r0, [r2, #0]
 8008268:	2111      	movs	r1, #17
 800826a:	2200      	movs	r2, #0
 800826c:	6983      	ldr	r3, [r0, #24]
 800826e:	4798      	blx	r3
 8008270:	68f2      	ldr	r2, [r6, #12]
 8008272:	e7e5      	b.n	8008240 <lv_group_remove_obj+0x80>

08008274 <lv_group_focus_obj>:
{
 8008274:	b570      	push	{r4, r5, r6, lr}
    lv_group_t * g = obj->group_p;
 8008276:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
    if(g == NULL) return;
 8008278:	b125      	cbz	r5, 8008284 <lv_group_focus_obj+0x10>
    if(g->frozen != 0) return;
 800827a:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
 800827e:	f013 0201 	ands.w	r2, r3, #1
 8008282:	d000      	beq.n	8008286 <lv_group_focus_obj+0x12>
 8008284:	bd70      	pop	{r4, r5, r6, pc}
    if(en_val == group->editing) return;        /*Do not set the same mode again*/
 8008286:	0799      	lsls	r1, r3, #30
 8008288:	4606      	mov	r6, r0
 800828a:	d50e      	bpl.n	80082aa <lv_group_focus_obj+0x36>
    group->editing = en_val;
 800828c:	f362 0341 	bfi	r3, r2, #1, #1
 * @return pointer to the focused object
 */
lv_obj_t * lv_group_get_focused(const lv_group_t * group)
{
    if(!group) return NULL;
    if(group->obj_focus == NULL) return NULL;
 8008290:	68ec      	ldr	r4, [r5, #12]
    group->editing = en_val;
 8008292:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
    if(group->obj_focus == NULL) return NULL;
 8008296:	b12c      	cbz	r4, 80082a4 <lv_group_focus_obj+0x30>

    return *group->obj_focus;
 8008298:	6824      	ldr	r4, [r4, #0]
    if(focused) focused->signal_func(focused, LV_SIGNAL_FOCUS, NULL);       /*Focus again to properly leave edit mode*/
 800829a:	b11c      	cbz	r4, 80082a4 <lv_group_focus_obj+0x30>
 800829c:	69a3      	ldr	r3, [r4, #24]
 800829e:	2110      	movs	r1, #16
 80082a0:	4620      	mov	r0, r4
 80082a2:	4798      	blx	r3
    lv_obj_invalidate(focused);
 80082a4:	4620      	mov	r0, r4
 80082a6:	f001 fd1b 	bl	8009ce0 <lv_obj_invalidate>
    LL_READ(g->obj_ll, i) {
 80082aa:	4628      	mov	r0, r5
 80082ac:	f00a ff70 	bl	8013190 <lv_ll_get_head>
 80082b0:	4604      	mov	r4, r0
 80082b2:	b938      	cbnz	r0, 80082c4 <lv_group_focus_obj+0x50>
 80082b4:	e7e6      	b.n	8008284 <lv_group_focus_obj+0x10>
 80082b6:	4621      	mov	r1, r4
 80082b8:	4628      	mov	r0, r5
 80082ba:	f00a ff71 	bl	80131a0 <lv_ll_get_next>
 80082be:	4604      	mov	r4, r0
 80082c0:	2800      	cmp	r0, #0
 80082c2:	d0df      	beq.n	8008284 <lv_group_focus_obj+0x10>
        if(*i == obj) {
 80082c4:	6823      	ldr	r3, [r4, #0]
 80082c6:	429e      	cmp	r6, r3
 80082c8:	d1f5      	bne.n	80082b6 <lv_group_focus_obj+0x42>
            if(g->obj_focus == i) return;       /*Don't focus the already focused object again*/
 80082ca:	68eb      	ldr	r3, [r5, #12]
 80082cc:	42a3      	cmp	r3, r4
 80082ce:	d0d9      	beq.n	8008284 <lv_group_focus_obj+0x10>
            if(g->obj_focus != NULL) {
 80082d0:	b14b      	cbz	r3, 80082e6 <lv_group_focus_obj+0x72>
                (*g->obj_focus)->signal_func(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 80082d2:	6818      	ldr	r0, [r3, #0]
 80082d4:	2200      	movs	r2, #0
 80082d6:	2111      	movs	r1, #17
 80082d8:	6983      	ldr	r3, [r0, #24]
 80082da:	4798      	blx	r3
                lv_obj_invalidate(*g->obj_focus);
 80082dc:	68eb      	ldr	r3, [r5, #12]
 80082de:	6818      	ldr	r0, [r3, #0]
 80082e0:	f001 fcfe 	bl	8009ce0 <lv_obj_invalidate>
 80082e4:	6826      	ldr	r6, [r4, #0]
                (*g->obj_focus)->signal_func(*g->obj_focus, LV_SIGNAL_FOCUS, NULL);
 80082e6:	69b3      	ldr	r3, [r6, #24]
 80082e8:	4630      	mov	r0, r6
            g->obj_focus = i;
 80082ea:	60ec      	str	r4, [r5, #12]
                (*g->obj_focus)->signal_func(*g->obj_focus, LV_SIGNAL_FOCUS, NULL);
 80082ec:	2200      	movs	r2, #0
 80082ee:	2110      	movs	r1, #16
 80082f0:	4798      	blx	r3
                if(g->focus_cb) g->focus_cb(g);
 80082f2:	69ab      	ldr	r3, [r5, #24]
 80082f4:	b10b      	cbz	r3, 80082fa <lv_group_focus_obj+0x86>
 80082f6:	4628      	mov	r0, r5
 80082f8:	4798      	blx	r3
                lv_obj_invalidate(*g->obj_focus);
 80082fa:	68eb      	ldr	r3, [r5, #12]
}
 80082fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                lv_obj_invalidate(*g->obj_focus);
 8008300:	6818      	ldr	r0, [r3, #0]
 8008302:	f001 bced 	b.w	8009ce0 <lv_obj_invalidate>
 8008306:	bf00      	nop

08008308 <lv_group_focus_next>:
    if(group->frozen) return;
 8008308:	f890 2064 	ldrb.w	r2, [r0, #100]	; 0x64
 800830c:	f012 0201 	ands.w	r2, r2, #1
 8008310:	d12c      	bne.n	800836c <lv_group_focus_next+0x64>
    if(group->obj_focus) {
 8008312:	68c3      	ldr	r3, [r0, #12]
{
 8008314:	b510      	push	{r4, lr}
 8008316:	4604      	mov	r4, r0
    if(group->obj_focus) {
 8008318:	b34b      	cbz	r3, 800836e <lv_group_focus_next+0x66>
        (*group->obj_focus)->signal_func(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 800831a:	6818      	ldr	r0, [r3, #0]
 800831c:	2111      	movs	r1, #17
 800831e:	6983      	ldr	r3, [r0, #24]
 8008320:	4798      	blx	r3
        lv_obj_invalidate(*group->obj_focus);
 8008322:	68e3      	ldr	r3, [r4, #12]
 8008324:	6818      	ldr	r0, [r3, #0]
 8008326:	f001 fcdb 	bl	8009ce0 <lv_obj_invalidate>
    if(group->obj_focus == NULL) obj_next = lv_ll_get_head(&group->obj_ll);
 800832a:	68e1      	ldr	r1, [r4, #12]
 800832c:	b1f9      	cbz	r1, 800836e <lv_group_focus_next+0x66>
    else obj_next = lv_ll_get_next(&group->obj_ll, group->obj_focus);
 800832e:	4620      	mov	r0, r4
 8008330:	f00a ff36 	bl	80131a0 <lv_ll_get_next>
    if(obj_next == NULL) {
 8008334:	b178      	cbz	r0, 8008356 <lv_group_focus_next+0x4e>
    group->obj_focus = obj_next;
 8008336:	60e0      	str	r0, [r4, #12]
        (*group->obj_focus)->signal_func(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 8008338:	6800      	ldr	r0, [r0, #0]
 800833a:	2200      	movs	r2, #0
 800833c:	2110      	movs	r1, #16
 800833e:	6983      	ldr	r3, [r0, #24]
 8008340:	4798      	blx	r3
        lv_obj_invalidate(*group->obj_focus);
 8008342:	68e3      	ldr	r3, [r4, #12]
 8008344:	6818      	ldr	r0, [r3, #0]
 8008346:	f001 fccb 	bl	8009ce0 <lv_obj_invalidate>
        if(group->focus_cb) group->focus_cb(group);
 800834a:	69a3      	ldr	r3, [r4, #24]
 800834c:	b16b      	cbz	r3, 800836a <lv_group_focus_next+0x62>
 800834e:	4620      	mov	r0, r4
}
 8008350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        if(group->focus_cb) group->focus_cb(group);
 8008354:	4718      	bx	r3
        if(group->wrap) obj_next = lv_ll_get_head(&group->obj_ll);
 8008356:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 800835a:	4620      	mov	r0, r4
 800835c:	06db      	lsls	r3, r3, #27
 800835e:	d40a      	bmi.n	8008376 <lv_group_focus_next+0x6e>
        else obj_next = lv_ll_get_tail(&group->obj_ll);
 8008360:	f00a ff1a 	bl	8013198 <lv_ll_get_tail>
    group->obj_focus = obj_next;
 8008364:	60e0      	str	r0, [r4, #12]
    if(group->obj_focus) {
 8008366:	2800      	cmp	r0, #0
 8008368:	d1e6      	bne.n	8008338 <lv_group_focus_next+0x30>
 800836a:	bd10      	pop	{r4, pc}
 800836c:	4770      	bx	lr
    if(group->obj_focus == NULL) obj_next = lv_ll_get_head(&group->obj_ll);
 800836e:	4620      	mov	r0, r4
 8008370:	f00a ff0e 	bl	8013190 <lv_ll_get_head>
 8008374:	e7de      	b.n	8008334 <lv_group_focus_next+0x2c>
        if(group->wrap) obj_next = lv_ll_get_head(&group->obj_ll);
 8008376:	f00a ff0b 	bl	8013190 <lv_ll_get_head>
 800837a:	e7f3      	b.n	8008364 <lv_group_focus_next+0x5c>

0800837c <lv_group_focus_prev>:
    if(group->frozen) return;
 800837c:	f890 2064 	ldrb.w	r2, [r0, #100]	; 0x64
 8008380:	f012 0201 	ands.w	r2, r2, #1
 8008384:	d12c      	bne.n	80083e0 <lv_group_focus_prev+0x64>
    if(group->obj_focus) {
 8008386:	68c3      	ldr	r3, [r0, #12]
{
 8008388:	b510      	push	{r4, lr}
 800838a:	4604      	mov	r4, r0
    if(group->obj_focus) {
 800838c:	b34b      	cbz	r3, 80083e2 <lv_group_focus_prev+0x66>
        (*group->obj_focus)->signal_func(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 800838e:	6818      	ldr	r0, [r3, #0]
 8008390:	2111      	movs	r1, #17
 8008392:	6983      	ldr	r3, [r0, #24]
 8008394:	4798      	blx	r3
        lv_obj_invalidate(*group->obj_focus);
 8008396:	68e3      	ldr	r3, [r4, #12]
 8008398:	6818      	ldr	r0, [r3, #0]
 800839a:	f001 fca1 	bl	8009ce0 <lv_obj_invalidate>
    if(group->obj_focus == NULL) obj_next = lv_ll_get_tail(&group->obj_ll);
 800839e:	68e1      	ldr	r1, [r4, #12]
 80083a0:	b1f9      	cbz	r1, 80083e2 <lv_group_focus_prev+0x66>
    else obj_next = lv_ll_get_prev(&group->obj_ll, group->obj_focus);
 80083a2:	4620      	mov	r0, r4
 80083a4:	f00a ff02 	bl	80131ac <lv_ll_get_prev>
    if(obj_next == NULL) {
 80083a8:	b178      	cbz	r0, 80083ca <lv_group_focus_prev+0x4e>
    group->obj_focus = obj_next;
 80083aa:	60e0      	str	r0, [r4, #12]
        (*group->obj_focus)->signal_func(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 80083ac:	6800      	ldr	r0, [r0, #0]
 80083ae:	2200      	movs	r2, #0
 80083b0:	2110      	movs	r1, #16
 80083b2:	6983      	ldr	r3, [r0, #24]
 80083b4:	4798      	blx	r3
        lv_obj_invalidate(*group->obj_focus);
 80083b6:	68e3      	ldr	r3, [r4, #12]
 80083b8:	6818      	ldr	r0, [r3, #0]
 80083ba:	f001 fc91 	bl	8009ce0 <lv_obj_invalidate>
        if(group->focus_cb) group->focus_cb(group);
 80083be:	69a3      	ldr	r3, [r4, #24]
 80083c0:	b16b      	cbz	r3, 80083de <lv_group_focus_prev+0x62>
 80083c2:	4620      	mov	r0, r4
}
 80083c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        if(group->focus_cb) group->focus_cb(group);
 80083c8:	4718      	bx	r3
        if(group->wrap) obj_next = lv_ll_get_tail(&group->obj_ll);
 80083ca:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 80083ce:	4620      	mov	r0, r4
 80083d0:	06db      	lsls	r3, r3, #27
 80083d2:	d40a      	bmi.n	80083ea <lv_group_focus_prev+0x6e>
        else  obj_next = lv_ll_get_head(&group->obj_ll);
 80083d4:	f00a fedc 	bl	8013190 <lv_ll_get_head>
    group->obj_focus = obj_next;
 80083d8:	60e0      	str	r0, [r4, #12]
    if(group->obj_focus != NULL) {
 80083da:	2800      	cmp	r0, #0
 80083dc:	d1e6      	bne.n	80083ac <lv_group_focus_prev+0x30>
 80083de:	bd10      	pop	{r4, pc}
 80083e0:	4770      	bx	lr
    if(group->obj_focus == NULL) obj_next = lv_ll_get_tail(&group->obj_ll);
 80083e2:	4620      	mov	r0, r4
 80083e4:	f00a fed8 	bl	8013198 <lv_ll_get_tail>
 80083e8:	e7de      	b.n	80083a8 <lv_group_focus_prev+0x2c>
        if(group->wrap) obj_next = lv_ll_get_tail(&group->obj_ll);
 80083ea:	f00a fed5 	bl	8013198 <lv_ll_get_tail>
 80083ee:	e7f3      	b.n	80083d8 <lv_group_focus_prev+0x5c>

080083f0 <lv_group_send_data>:
{
 80083f0:	b500      	push	{lr}
 80083f2:	b083      	sub	sp, #12
 80083f4:	9101      	str	r1, [sp, #4]
    if(!group) return NULL;
 80083f6:	b150      	cbz	r0, 800840e <lv_group_send_data+0x1e>
    if(group->obj_focus == NULL) return NULL;
 80083f8:	68c3      	ldr	r3, [r0, #12]
 80083fa:	b143      	cbz	r3, 800840e <lv_group_send_data+0x1e>
    return *group->obj_focus;
 80083fc:	6818      	ldr	r0, [r3, #0]
    if(act == NULL) return LV_RES_OK;
 80083fe:	b130      	cbz	r0, 800840e <lv_group_send_data+0x1e>
    return act->signal_func(act, LV_SIGNAL_CONTROLL, &c);
 8008400:	6983      	ldr	r3, [r0, #24]
 8008402:	aa01      	add	r2, sp, #4
 8008404:	2112      	movs	r1, #18
 8008406:	4798      	blx	r3
}
 8008408:	b003      	add	sp, #12
 800840a:	f85d fb04 	ldr.w	pc, [sp], #4
    if(act == NULL) return LV_RES_OK;
 800840e:	2001      	movs	r0, #1
}
 8008410:	b003      	add	sp, #12
 8008412:	f85d fb04 	ldr.w	pc, [sp], #4
 8008416:	bf00      	nop

08008418 <lv_group_set_editing>:
    if(en_val == group->editing) return;        /*Do not set the same mode again*/
 8008418:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 800841c:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8008420:	428a      	cmp	r2, r1
 8008422:	d012      	beq.n	800844a <lv_group_set_editing+0x32>
    group->editing = en_val;
 8008424:	f361 0341 	bfi	r3, r1, #1, #1
{
 8008428:	b510      	push	{r4, lr}
    if(group->obj_focus == NULL) return NULL;
 800842a:	68c4      	ldr	r4, [r0, #12]
    group->editing = en_val;
 800842c:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
    if(group->obj_focus == NULL) return NULL;
 8008430:	b134      	cbz	r4, 8008440 <lv_group_set_editing+0x28>
    return *group->obj_focus;
 8008432:	6824      	ldr	r4, [r4, #0]
    if(focused) focused->signal_func(focused, LV_SIGNAL_FOCUS, NULL);       /*Focus again to properly leave edit mode*/
 8008434:	b124      	cbz	r4, 8008440 <lv_group_set_editing+0x28>
 8008436:	69a3      	ldr	r3, [r4, #24]
 8008438:	2200      	movs	r2, #0
 800843a:	2110      	movs	r1, #16
 800843c:	4620      	mov	r0, r4
 800843e:	4798      	blx	r3
    lv_obj_invalidate(focused);
 8008440:	4620      	mov	r0, r4
}
 8008442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(focused);
 8008446:	f001 bc4b 	b.w	8009ce0 <lv_obj_invalidate>
 800844a:	4770      	bx	lr

0800844c <lv_group_mod_style>:
{
 800844c:	b538      	push	{r3, r4, r5, lr}
    lv_style_copy(&group->style_tmp, style);
 800844e:	f100 051c 	add.w	r5, r0, #28
{
 8008452:	4604      	mov	r4, r0
    lv_style_copy(&group->style_tmp, style);
 8008454:	4628      	mov	r0, r5
 8008456:	f004 fa5d 	bl	800c914 <lv_style_copy>
    if(group->editing) {
 800845a:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 800845e:	079b      	lsls	r3, r3, #30
 8008460:	d505      	bpl.n	800846e <lv_group_mod_style+0x22>
        if(group->style_mod_edit) group->style_mod_edit(&group->style_tmp);
 8008462:	6963      	ldr	r3, [r4, #20]
 8008464:	b10b      	cbz	r3, 800846a <lv_group_mod_style+0x1e>
        if(group->style_mod) group->style_mod(&group->style_tmp);
 8008466:	4628      	mov	r0, r5
 8008468:	4798      	blx	r3
}
 800846a:	4628      	mov	r0, r5
 800846c:	bd38      	pop	{r3, r4, r5, pc}
        if(group->style_mod) group->style_mod(&group->style_tmp);
 800846e:	6923      	ldr	r3, [r4, #16]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d1f8      	bne.n	8008466 <lv_group_mod_style+0x1a>
}
 8008474:	4628      	mov	r0, r5
 8008476:	bd38      	pop	{r3, r4, r5, pc}

08008478 <lv_group_get_focused>:
    if(!group) return NULL;
 8008478:	b110      	cbz	r0, 8008480 <lv_group_get_focused+0x8>
    if(group->obj_focus == NULL) return NULL;
 800847a:	68c0      	ldr	r0, [r0, #12]
 800847c:	b100      	cbz	r0, 8008480 <lv_group_get_focused+0x8>
    return *group->obj_focus;
 800847e:	6800      	ldr	r0, [r0, #0]
}
 8008480:	4770      	bx	lr
 8008482:	bf00      	nop

08008484 <lv_group_get_editing>:
 * @param group pointer to group
 * @return true: edit mode; false: navigate mode
 */
bool lv_group_get_editing(const lv_group_t * group)
{
    if(!group) return false;
 8008484:	b118      	cbz	r0, 800848e <lv_group_get_editing+0xa>
    return group->editing ? true : false;
 8008486:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
 800848a:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
 800848e:	4770      	bx	lr

08008490 <lv_group_get_click_focus>:
 * @param group pointer to group
 * @return true: `click_focus` is enabled; false: disabled
 */
bool lv_group_get_click_focus(const lv_group_t * group)
{
    if(!group) return false;
 8008490:	b118      	cbz	r0, 800849a <lv_group_get_click_focus+0xa>
    return group->click_focus ? true : false;
 8008492:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
 8008496:	f3c0 0080 	ubfx	r0, r0, #2, #1
}
 800849a:	4770      	bx	lr

0800849c <indev_search_obj>:
 * @param proc pointer to  the `lv_indev_proc_t` part of the input device
 * @param obj pointer to a start object, typically the screen
 * @return pointer to the found object or NULL if there was no suitable object
 */
static lv_obj_t * indev_search_obj(const lv_indev_proc_t * proc, lv_obj_t * obj)
{
 800849c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_t * found_p = NULL;

    /*If the point is on this object*/
    /*Check its children too*/
    if(lv_area_is_point_on(&obj->coords, &proc->act_point)) {
 80084a0:	f100 0a04 	add.w	sl, r0, #4
{
 80084a4:	b08f      	sub	sp, #60	; 0x3c
 80084a6:	4605      	mov	r5, r0
    if(lv_area_is_point_on(&obj->coords, &proc->act_point)) {
 80084a8:	f101 0010 	add.w	r0, r1, #16
{
 80084ac:	9107      	str	r1, [sp, #28]
    if(lv_area_is_point_on(&obj->coords, &proc->act_point)) {
 80084ae:	4651      	mov	r1, sl
 80084b0:	f00a fb5a 	bl	8012b68 <lv_area_is_point_on>
 80084b4:	2800      	cmp	r0, #0
 80084b6:	f000 818b 	beq.w	80087d0 <indev_search_obj+0x334>
        lv_obj_t * i;

        LL_READ(obj->child_ll, i) {
 80084ba:	9b07      	ldr	r3, [sp, #28]
 80084bc:	3304      	adds	r3, #4
 80084be:	4618      	mov	r0, r3
 80084c0:	9308      	str	r3, [sp, #32]
 80084c2:	f00a fe65 	bl	8013190 <lv_ll_get_head>
 80084c6:	4603      	mov	r3, r0
 80084c8:	9001      	str	r0, [sp, #4]
 80084ca:	2800      	cmp	r0, #0
 80084cc:	f000 816d 	beq.w	80087aa <indev_search_obj+0x30e>
 80084d0:	46d1      	mov	r9, sl
    if(lv_area_is_point_on(&obj->coords, &proc->act_point)) {
 80084d2:	4649      	mov	r1, r9
 80084d4:	f103 0010 	add.w	r0, r3, #16
 80084d8:	f00a fb46 	bl	8012b68 <lv_area_is_point_on>
 80084dc:	2800      	cmp	r0, #0
 80084de:	f000 815b 	beq.w	8008798 <indev_search_obj+0x2fc>
        LL_READ(obj->child_ll, i) {
 80084e2:	9b01      	ldr	r3, [sp, #4]
 80084e4:	3304      	adds	r3, #4
 80084e6:	4618      	mov	r0, r3
 80084e8:	9309      	str	r3, [sp, #36]	; 0x24
 80084ea:	f00a fe51 	bl	8013190 <lv_ll_get_head>
 80084ee:	4603      	mov	r3, r0
 80084f0:	9002      	str	r0, [sp, #8]
 80084f2:	2800      	cmp	r0, #0
 80084f4:	f000 813f 	beq.w	8008776 <indev_search_obj+0x2da>
    if(lv_area_is_point_on(&obj->coords, &proc->act_point)) {
 80084f8:	4649      	mov	r1, r9
 80084fa:	f103 0010 	add.w	r0, r3, #16
 80084fe:	f00a fb33 	bl	8012b68 <lv_area_is_point_on>
 8008502:	2800      	cmp	r0, #0
 8008504:	f000 812e 	beq.w	8008764 <indev_search_obj+0x2c8>
        LL_READ(obj->child_ll, i) {
 8008508:	9b02      	ldr	r3, [sp, #8]
 800850a:	3304      	adds	r3, #4
 800850c:	4618      	mov	r0, r3
 800850e:	930a      	str	r3, [sp, #40]	; 0x28
 8008510:	f00a fe3e 	bl	8013190 <lv_ll_get_head>
 8008514:	4603      	mov	r3, r0
 8008516:	9003      	str	r0, [sp, #12]
 8008518:	2800      	cmp	r0, #0
 800851a:	f000 8112 	beq.w	8008742 <indev_search_obj+0x2a6>
    if(lv_area_is_point_on(&obj->coords, &proc->act_point)) {
 800851e:	4649      	mov	r1, r9
 8008520:	f103 0010 	add.w	r0, r3, #16
 8008524:	f00a fb20 	bl	8012b68 <lv_area_is_point_on>
 8008528:	2800      	cmp	r0, #0
 800852a:	f000 8101 	beq.w	8008730 <indev_search_obj+0x294>
        LL_READ(obj->child_ll, i) {
 800852e:	9b03      	ldr	r3, [sp, #12]
 8008530:	3304      	adds	r3, #4
 8008532:	4618      	mov	r0, r3
 8008534:	930b      	str	r3, [sp, #44]	; 0x2c
 8008536:	f00a fe2b 	bl	8013190 <lv_ll_get_head>
 800853a:	4603      	mov	r3, r0
 800853c:	9004      	str	r0, [sp, #16]
 800853e:	2800      	cmp	r0, #0
 8008540:	f000 80e5 	beq.w	800870e <indev_search_obj+0x272>
    if(lv_area_is_point_on(&obj->coords, &proc->act_point)) {
 8008544:	4649      	mov	r1, r9
 8008546:	f103 0010 	add.w	r0, r3, #16
 800854a:	f00a fb0d 	bl	8012b68 <lv_area_is_point_on>
 800854e:	2800      	cmp	r0, #0
 8008550:	f000 80d4 	beq.w	80086fc <indev_search_obj+0x260>
        LL_READ(obj->child_ll, i) {
 8008554:	9b04      	ldr	r3, [sp, #16]
 8008556:	3304      	adds	r3, #4
 8008558:	4618      	mov	r0, r3
 800855a:	930c      	str	r3, [sp, #48]	; 0x30
 800855c:	f00a fe18 	bl	8013190 <lv_ll_get_head>
 8008560:	4603      	mov	r3, r0
 8008562:	9005      	str	r0, [sp, #20]
 8008564:	2800      	cmp	r0, #0
 8008566:	f000 809f 	beq.w	80086a8 <indev_search_obj+0x20c>
    if(lv_area_is_point_on(&obj->coords, &proc->act_point)) {
 800856a:	4649      	mov	r1, r9
 800856c:	f103 0010 	add.w	r0, r3, #16
 8008570:	f00a fafa 	bl	8012b68 <lv_area_is_point_on>
 8008574:	2800      	cmp	r0, #0
 8008576:	f000 808e 	beq.w	8008696 <indev_search_obj+0x1fa>
        LL_READ(obj->child_ll, i) {
 800857a:	9b05      	ldr	r3, [sp, #20]
 800857c:	3304      	adds	r3, #4
 800857e:	4618      	mov	r0, r3
 8008580:	930d      	str	r3, [sp, #52]	; 0x34
 8008582:	f00a fe05 	bl	8013190 <lv_ll_get_head>
 8008586:	4603      	mov	r3, r0
 8008588:	9006      	str	r0, [sp, #24]
 800858a:	2800      	cmp	r0, #0
 800858c:	d072      	beq.n	8008674 <indev_search_obj+0x1d8>
    if(lv_area_is_point_on(&obj->coords, &proc->act_point)) {
 800858e:	4649      	mov	r1, r9
 8008590:	f103 0010 	add.w	r0, r3, #16
 8008594:	f00a fae8 	bl	8012b68 <lv_area_is_point_on>
 8008598:	2800      	cmp	r0, #0
 800859a:	d063      	beq.n	8008664 <indev_search_obj+0x1c8>
        LL_READ(obj->child_ll, i) {
 800859c:	9b06      	ldr	r3, [sp, #24]
 800859e:	f103 0804 	add.w	r8, r3, #4
 80085a2:	4640      	mov	r0, r8
 80085a4:	f00a fdf4 	bl	8013190 <lv_ll_get_head>
 80085a8:	4682      	mov	sl, r0
 80085aa:	2800      	cmp	r0, #0
 80085ac:	d049      	beq.n	8008642 <indev_search_obj+0x1a6>
    if(lv_area_is_point_on(&obj->coords, &proc->act_point)) {
 80085ae:	4649      	mov	r1, r9
 80085b0:	f10a 0010 	add.w	r0, sl, #16
 80085b4:	f00a fad8 	bl	8012b68 <lv_area_is_point_on>
 80085b8:	2800      	cmp	r0, #0
 80085ba:	d03b      	beq.n	8008634 <indev_search_obj+0x198>
        LL_READ(obj->child_ll, i) {
 80085bc:	f10a 0b04 	add.w	fp, sl, #4
 80085c0:	4658      	mov	r0, fp
 80085c2:	f00a fde5 	bl	8013190 <lv_ll_get_head>
 80085c6:	4606      	mov	r6, r0
 80085c8:	b318      	cbz	r0, 8008612 <indev_search_obj+0x176>
    if(lv_area_is_point_on(&obj->coords, &proc->act_point)) {
 80085ca:	4649      	mov	r1, r9
 80085cc:	f106 0010 	add.w	r0, r6, #16
 80085d0:	f00a faca 	bl	8012b68 <lv_area_is_point_on>
 80085d4:	b1b0      	cbz	r0, 8008604 <indev_search_obj+0x168>
        LL_READ(obj->child_ll, i) {
 80085d6:	1d37      	adds	r7, r6, #4
 80085d8:	4638      	mov	r0, r7
 80085da:	f00a fdd9 	bl	8013190 <lv_ll_get_head>
 80085de:	4604      	mov	r4, r0
 80085e0:	b930      	cbnz	r0, 80085f0 <indev_search_obj+0x154>
 80085e2:	e072      	b.n	80086ca <indev_search_obj+0x22e>
 80085e4:	4638      	mov	r0, r7
 80085e6:	f00a fddb 	bl	80131a0 <lv_ll_get_next>
 80085ea:	4604      	mov	r4, r0
 80085ec:	2800      	cmp	r0, #0
 80085ee:	d06c      	beq.n	80086ca <indev_search_obj+0x22e>
            found_p = indev_search_obj(proc, i);
 80085f0:	4621      	mov	r1, r4
 80085f2:	4628      	mov	r0, r5
 80085f4:	f7ff ff52 	bl	800849c <indev_search_obj>
        LL_READ(obj->child_ll, i) {
 80085f8:	4621      	mov	r1, r4

            /*If a child was found then break*/
            if(found_p != NULL) {
 80085fa:	2800      	cmp	r0, #0
 80085fc:	d0f2      	beq.n	80085e4 <indev_search_obj+0x148>
        }

    }

    return found_p;
}
 80085fe:	b00f      	add	sp, #60	; 0x3c
 8008600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LL_READ(obj->child_ll, i) {
 8008604:	4631      	mov	r1, r6
 8008606:	4658      	mov	r0, fp
 8008608:	f00a fdca 	bl	80131a0 <lv_ll_get_next>
 800860c:	4606      	mov	r6, r0
 800860e:	2800      	cmp	r0, #0
 8008610:	d1db      	bne.n	80085ca <indev_search_obj+0x12e>
        if(found_p == NULL && lv_obj_get_click(obj) != false) {
 8008612:	4650      	mov	r0, sl
 8008614:	f003 fc48 	bl	800bea8 <lv_obj_get_click>
 8008618:	b160      	cbz	r0, 8008634 <indev_search_obj+0x198>
 800861a:	4654      	mov	r4, sl
 800861c:	e005      	b.n	800862a <indev_search_obj+0x18e>
                hidden_i = lv_obj_get_parent(hidden_i);
 800861e:	4620      	mov	r0, r4
 8008620:	f003 fbd0 	bl	800bdc4 <lv_obj_get_parent>
            while(hidden_i != NULL) {
 8008624:	4604      	mov	r4, r0
 8008626:	2800      	cmp	r0, #0
 8008628:	d062      	beq.n	80086f0 <indev_search_obj+0x254>
                if(lv_obj_get_hidden(hidden_i) == true) break;
 800862a:	4620      	mov	r0, r4
 800862c:	f003 fc36 	bl	800be9c <lv_obj_get_hidden>
 8008630:	2800      	cmp	r0, #0
 8008632:	d0f4      	beq.n	800861e <indev_search_obj+0x182>
        LL_READ(obj->child_ll, i) {
 8008634:	4651      	mov	r1, sl
 8008636:	4640      	mov	r0, r8
 8008638:	f00a fdb2 	bl	80131a0 <lv_ll_get_next>
 800863c:	4682      	mov	sl, r0
 800863e:	2800      	cmp	r0, #0
 8008640:	d1b5      	bne.n	80085ae <indev_search_obj+0x112>
        if(found_p == NULL && lv_obj_get_click(obj) != false) {
 8008642:	9806      	ldr	r0, [sp, #24]
 8008644:	f003 fc30 	bl	800bea8 <lv_obj_get_click>
 8008648:	b160      	cbz	r0, 8008664 <indev_search_obj+0x1c8>
 800864a:	9c06      	ldr	r4, [sp, #24]
 800864c:	e005      	b.n	800865a <indev_search_obj+0x1be>
                hidden_i = lv_obj_get_parent(hidden_i);
 800864e:	4620      	mov	r0, r4
 8008650:	f003 fbb8 	bl	800bdc4 <lv_obj_get_parent>
            while(hidden_i != NULL) {
 8008654:	4604      	mov	r4, r0
 8008656:	2800      	cmp	r0, #0
 8008658:	d04c      	beq.n	80086f4 <indev_search_obj+0x258>
                if(lv_obj_get_hidden(hidden_i) == true) break;
 800865a:	4620      	mov	r0, r4
 800865c:	f003 fc1e 	bl	800be9c <lv_obj_get_hidden>
 8008660:	2800      	cmp	r0, #0
 8008662:	d0f4      	beq.n	800864e <indev_search_obj+0x1b2>
        LL_READ(obj->child_ll, i) {
 8008664:	9906      	ldr	r1, [sp, #24]
 8008666:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008668:	f00a fd9a 	bl	80131a0 <lv_ll_get_next>
 800866c:	4603      	mov	r3, r0
 800866e:	9006      	str	r0, [sp, #24]
 8008670:	2800      	cmp	r0, #0
 8008672:	d18c      	bne.n	800858e <indev_search_obj+0xf2>
        if(found_p == NULL && lv_obj_get_click(obj) != false) {
 8008674:	9805      	ldr	r0, [sp, #20]
 8008676:	f003 fc17 	bl	800bea8 <lv_obj_get_click>
 800867a:	b160      	cbz	r0, 8008696 <indev_search_obj+0x1fa>
 800867c:	9c05      	ldr	r4, [sp, #20]
 800867e:	e005      	b.n	800868c <indev_search_obj+0x1f0>
                hidden_i = lv_obj_get_parent(hidden_i);
 8008680:	4620      	mov	r0, r4
 8008682:	f003 fb9f 	bl	800bdc4 <lv_obj_get_parent>
            while(hidden_i != NULL) {
 8008686:	4604      	mov	r4, r0
 8008688:	2800      	cmp	r0, #0
 800868a:	d035      	beq.n	80086f8 <indev_search_obj+0x25c>
                if(lv_obj_get_hidden(hidden_i) == true) break;
 800868c:	4620      	mov	r0, r4
 800868e:	f003 fc05 	bl	800be9c <lv_obj_get_hidden>
 8008692:	2800      	cmp	r0, #0
 8008694:	d0f4      	beq.n	8008680 <indev_search_obj+0x1e4>
        LL_READ(obj->child_ll, i) {
 8008696:	9905      	ldr	r1, [sp, #20]
 8008698:	980c      	ldr	r0, [sp, #48]	; 0x30
 800869a:	f00a fd81 	bl	80131a0 <lv_ll_get_next>
 800869e:	4603      	mov	r3, r0
 80086a0:	9005      	str	r0, [sp, #20]
 80086a2:	2800      	cmp	r0, #0
 80086a4:	f47f af61 	bne.w	800856a <indev_search_obj+0xce>
        if(found_p == NULL && lv_obj_get_click(obj) != false) {
 80086a8:	9804      	ldr	r0, [sp, #16]
 80086aa:	f003 fbfd 	bl	800bea8 <lv_obj_get_click>
 80086ae:	b328      	cbz	r0, 80086fc <indev_search_obj+0x260>
 80086b0:	9c04      	ldr	r4, [sp, #16]
                if(lv_obj_get_hidden(hidden_i) == true) break;
 80086b2:	4620      	mov	r0, r4
 80086b4:	f003 fbf2 	bl	800be9c <lv_obj_get_hidden>
 80086b8:	bb00      	cbnz	r0, 80086fc <indev_search_obj+0x260>
                hidden_i = lv_obj_get_parent(hidden_i);
 80086ba:	4620      	mov	r0, r4
 80086bc:	f003 fb82 	bl	800bdc4 <lv_obj_get_parent>
            while(hidden_i != NULL) {
 80086c0:	4604      	mov	r4, r0
 80086c2:	2800      	cmp	r0, #0
 80086c4:	d1f5      	bne.n	80086b2 <indev_search_obj+0x216>
 80086c6:	9804      	ldr	r0, [sp, #16]
 80086c8:	e799      	b.n	80085fe <indev_search_obj+0x162>
        if(found_p == NULL && lv_obj_get_click(obj) != false) {
 80086ca:	4630      	mov	r0, r6
 80086cc:	f003 fbec 	bl	800bea8 <lv_obj_get_click>
 80086d0:	2800      	cmp	r0, #0
 80086d2:	d097      	beq.n	8008604 <indev_search_obj+0x168>
 80086d4:	4634      	mov	r4, r6
                if(lv_obj_get_hidden(hidden_i) == true) break;
 80086d6:	4620      	mov	r0, r4
 80086d8:	f003 fbe0 	bl	800be9c <lv_obj_get_hidden>
 80086dc:	2800      	cmp	r0, #0
 80086de:	d191      	bne.n	8008604 <indev_search_obj+0x168>
                hidden_i = lv_obj_get_parent(hidden_i);
 80086e0:	4620      	mov	r0, r4
 80086e2:	f003 fb6f 	bl	800bdc4 <lv_obj_get_parent>
            while(hidden_i != NULL) {
 80086e6:	4604      	mov	r4, r0
 80086e8:	2800      	cmp	r0, #0
 80086ea:	d1f4      	bne.n	80086d6 <indev_search_obj+0x23a>
 80086ec:	4630      	mov	r0, r6
 80086ee:	e786      	b.n	80085fe <indev_search_obj+0x162>
 80086f0:	4650      	mov	r0, sl
 80086f2:	e784      	b.n	80085fe <indev_search_obj+0x162>
 80086f4:	9806      	ldr	r0, [sp, #24]
 80086f6:	e782      	b.n	80085fe <indev_search_obj+0x162>
 80086f8:	9805      	ldr	r0, [sp, #20]
 80086fa:	e780      	b.n	80085fe <indev_search_obj+0x162>
        LL_READ(obj->child_ll, i) {
 80086fc:	9904      	ldr	r1, [sp, #16]
 80086fe:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008700:	f00a fd4e 	bl	80131a0 <lv_ll_get_next>
 8008704:	4603      	mov	r3, r0
 8008706:	9004      	str	r0, [sp, #16]
 8008708:	2800      	cmp	r0, #0
 800870a:	f47f af1b 	bne.w	8008544 <indev_search_obj+0xa8>
        if(found_p == NULL && lv_obj_get_click(obj) != false) {
 800870e:	9803      	ldr	r0, [sp, #12]
 8008710:	f003 fbca 	bl	800bea8 <lv_obj_get_click>
 8008714:	b160      	cbz	r0, 8008730 <indev_search_obj+0x294>
 8008716:	9c03      	ldr	r4, [sp, #12]
                if(lv_obj_get_hidden(hidden_i) == true) break;
 8008718:	4620      	mov	r0, r4
 800871a:	f003 fbbf 	bl	800be9c <lv_obj_get_hidden>
 800871e:	b938      	cbnz	r0, 8008730 <indev_search_obj+0x294>
                hidden_i = lv_obj_get_parent(hidden_i);
 8008720:	4620      	mov	r0, r4
 8008722:	f003 fb4f 	bl	800bdc4 <lv_obj_get_parent>
            while(hidden_i != NULL) {
 8008726:	4604      	mov	r4, r0
 8008728:	2800      	cmp	r0, #0
 800872a:	d1f5      	bne.n	8008718 <indev_search_obj+0x27c>
 800872c:	9803      	ldr	r0, [sp, #12]
 800872e:	e766      	b.n	80085fe <indev_search_obj+0x162>
        LL_READ(obj->child_ll, i) {
 8008730:	9903      	ldr	r1, [sp, #12]
 8008732:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008734:	f00a fd34 	bl	80131a0 <lv_ll_get_next>
 8008738:	4603      	mov	r3, r0
 800873a:	9003      	str	r0, [sp, #12]
 800873c:	2800      	cmp	r0, #0
 800873e:	f47f aeee 	bne.w	800851e <indev_search_obj+0x82>
        if(found_p == NULL && lv_obj_get_click(obj) != false) {
 8008742:	9802      	ldr	r0, [sp, #8]
 8008744:	f003 fbb0 	bl	800bea8 <lv_obj_get_click>
 8008748:	b160      	cbz	r0, 8008764 <indev_search_obj+0x2c8>
 800874a:	9c02      	ldr	r4, [sp, #8]
                if(lv_obj_get_hidden(hidden_i) == true) break;
 800874c:	4620      	mov	r0, r4
 800874e:	f003 fba5 	bl	800be9c <lv_obj_get_hidden>
 8008752:	b938      	cbnz	r0, 8008764 <indev_search_obj+0x2c8>
                hidden_i = lv_obj_get_parent(hidden_i);
 8008754:	4620      	mov	r0, r4
 8008756:	f003 fb35 	bl	800bdc4 <lv_obj_get_parent>
            while(hidden_i != NULL) {
 800875a:	4604      	mov	r4, r0
 800875c:	2800      	cmp	r0, #0
 800875e:	d1f5      	bne.n	800874c <indev_search_obj+0x2b0>
 8008760:	9802      	ldr	r0, [sp, #8]
 8008762:	e74c      	b.n	80085fe <indev_search_obj+0x162>
        LL_READ(obj->child_ll, i) {
 8008764:	9902      	ldr	r1, [sp, #8]
 8008766:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008768:	f00a fd1a 	bl	80131a0 <lv_ll_get_next>
 800876c:	4603      	mov	r3, r0
 800876e:	9002      	str	r0, [sp, #8]
 8008770:	2800      	cmp	r0, #0
 8008772:	f47f aec1 	bne.w	80084f8 <indev_search_obj+0x5c>
        if(found_p == NULL && lv_obj_get_click(obj) != false) {
 8008776:	9801      	ldr	r0, [sp, #4]
 8008778:	f003 fb96 	bl	800bea8 <lv_obj_get_click>
 800877c:	b160      	cbz	r0, 8008798 <indev_search_obj+0x2fc>
 800877e:	9c01      	ldr	r4, [sp, #4]
                if(lv_obj_get_hidden(hidden_i) == true) break;
 8008780:	4620      	mov	r0, r4
 8008782:	f003 fb8b 	bl	800be9c <lv_obj_get_hidden>
 8008786:	b938      	cbnz	r0, 8008798 <indev_search_obj+0x2fc>
                hidden_i = lv_obj_get_parent(hidden_i);
 8008788:	4620      	mov	r0, r4
 800878a:	f003 fb1b 	bl	800bdc4 <lv_obj_get_parent>
            while(hidden_i != NULL) {
 800878e:	4604      	mov	r4, r0
 8008790:	2800      	cmp	r0, #0
 8008792:	d1f5      	bne.n	8008780 <indev_search_obj+0x2e4>
 8008794:	9801      	ldr	r0, [sp, #4]
 8008796:	e732      	b.n	80085fe <indev_search_obj+0x162>
        LL_READ(obj->child_ll, i) {
 8008798:	9901      	ldr	r1, [sp, #4]
 800879a:	9808      	ldr	r0, [sp, #32]
 800879c:	f00a fd00 	bl	80131a0 <lv_ll_get_next>
 80087a0:	4603      	mov	r3, r0
 80087a2:	9001      	str	r0, [sp, #4]
 80087a4:	2800      	cmp	r0, #0
 80087a6:	f47f ae94 	bne.w	80084d2 <indev_search_obj+0x36>
        if(found_p == NULL && lv_obj_get_click(obj) != false) {
 80087aa:	9c07      	ldr	r4, [sp, #28]
 80087ac:	4620      	mov	r0, r4
 80087ae:	f003 fb7b 	bl	800bea8 <lv_obj_get_click>
 80087b2:	b168      	cbz	r0, 80087d0 <indev_search_obj+0x334>
            while(hidden_i != NULL) {
 80087b4:	b164      	cbz	r4, 80087d0 <indev_search_obj+0x334>
 80087b6:	9c07      	ldr	r4, [sp, #28]
                if(lv_obj_get_hidden(hidden_i) == true) break;
 80087b8:	4620      	mov	r0, r4
 80087ba:	f003 fb6f 	bl	800be9c <lv_obj_get_hidden>
 80087be:	b938      	cbnz	r0, 80087d0 <indev_search_obj+0x334>
                hidden_i = lv_obj_get_parent(hidden_i);
 80087c0:	4620      	mov	r0, r4
 80087c2:	f003 faff 	bl	800bdc4 <lv_obj_get_parent>
            while(hidden_i != NULL) {
 80087c6:	4604      	mov	r4, r0
 80087c8:	2800      	cmp	r0, #0
 80087ca:	d1f5      	bne.n	80087b8 <indev_search_obj+0x31c>
 80087cc:	9807      	ldr	r0, [sp, #28]
    return found_p;
 80087ce:	e716      	b.n	80085fe <indev_search_obj+0x162>
    lv_obj_t * found_p = NULL;
 80087d0:	2000      	movs	r0, #0
 80087d2:	e714      	b.n	80085fe <indev_search_obj+0x162>

080087d4 <indev_proc_press>:
    if(proc->wait_unil_release != 0) return;
 80087d4:	7f03      	ldrb	r3, [r0, #28]
 80087d6:	075a      	lsls	r2, r3, #29
 80087d8:	d420      	bmi.n	800881c <indev_proc_press+0x48>
{
 80087da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_t * pr_obj = proc->act_obj;
 80087de:	6946      	ldr	r6, [r0, #20]
{
 80087e0:	b085      	sub	sp, #20
 80087e2:	4604      	mov	r4, r0
    if(proc->act_obj == NULL) {
 80087e4:	2e00      	cmp	r6, #0
 80087e6:	f000 810d 	beq.w	8008a04 <indev_proc_press+0x230>
    else if(proc->drag_in_prog == 0 &&
 80087ea:	079b      	lsls	r3, r3, #30
 80087ec:	d517      	bpl.n	800881e <indev_proc_press+0x4a>
 80087ee:	4633      	mov	r3, r6
    proc->vect.x = proc->act_point.x - proc->last_point.x;
 80087f0:	88a1      	ldrh	r1, [r4, #4]
 80087f2:	8925      	ldrh	r5, [r4, #8]
    proc->vect.y = proc->act_point.y - proc->last_point.y;
 80087f4:	88e2      	ldrh	r2, [r4, #6]
 80087f6:	8960      	ldrh	r0, [r4, #10]
    proc->vect.x = proc->act_point.x - proc->last_point.x;
 80087f8:	1b49      	subs	r1, r1, r5
    proc->vect.y = proc->act_point.y - proc->last_point.y;
 80087fa:	1a12      	subs	r2, r2, r0
    proc->vect.x = proc->act_point.x - proc->last_point.x;
 80087fc:	81a1      	strh	r1, [r4, #12]
    proc->vect.y = proc->act_point.y - proc->last_point.y;
 80087fe:	81e2      	strh	r2, [r4, #14]
    if(proc->act_obj != NULL) {
 8008800:	b14b      	cbz	r3, 8008816 <indev_proc_press+0x42>
        proc->act_obj->signal_func(proc->act_obj, LV_SIGNAL_PRESSING, indev_act);
 8008802:	4fa9      	ldr	r7, [pc, #676]	; (8008aa8 <indev_proc_press+0x2d4>)
 8008804:	4618      	mov	r0, r3
 8008806:	2109      	movs	r1, #9
 8008808:	699b      	ldr	r3, [r3, #24]
 800880a:	683a      	ldr	r2, [r7, #0]
 800880c:	4798      	blx	r3
        if(proc->reset_query != 0) return;
 800880e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8008812:	0798      	lsls	r0, r3, #30
 8008814:	d559      	bpl.n	80088ca <indev_proc_press+0xf6>
}
 8008816:	b005      	add	sp, #20
 8008818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800881c:	4770      	bx	lr
            lv_obj_is_protected(proc->act_obj, LV_PROTECT_PRESS_LOST) == false) {/*Now act_obj != NULL*/
 800881e:	2110      	movs	r1, #16
 8008820:	4630      	mov	r0, r6
 8008822:	f003 fb6d 	bl	800bf00 <lv_obj_is_protected>
    else if(proc->drag_in_prog == 0 &&
 8008826:	2800      	cmp	r0, #0
 8008828:	f000 80ec 	beq.w	8008a04 <indev_proc_press+0x230>
    if(pr_obj != proc->act_obj) {
 800882c:	6963      	ldr	r3, [r4, #20]
 800882e:	429e      	cmp	r6, r3
 8008830:	d0de      	beq.n	80087f0 <indev_proc_press+0x1c>
        proc->last_point.x = proc->act_point.x;
 8008832:	6862      	ldr	r2, [r4, #4]
 8008834:	60a2      	str	r2, [r4, #8]
        if(proc->act_obj != NULL) {
 8008836:	b14b      	cbz	r3, 800884c <indev_proc_press+0x78>
            proc->act_obj->signal_func(proc->act_obj, LV_SIGNAL_PRESS_LOST, indev_act);
 8008838:	4a9b      	ldr	r2, [pc, #620]	; (8008aa8 <indev_proc_press+0x2d4>)
 800883a:	4618      	mov	r0, r3
 800883c:	210a      	movs	r1, #10
 800883e:	699b      	ldr	r3, [r3, #24]
 8008840:	6812      	ldr	r2, [r2, #0]
 8008842:	4798      	blx	r3
            if(proc->reset_query != 0) return;
 8008844:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8008848:	079f      	lsls	r7, r3, #30
 800884a:	d4e4      	bmi.n	8008816 <indev_proc_press+0x42>
        proc->act_obj = pr_obj;           /*Save the pressed object*/
 800884c:	6166      	str	r6, [r4, #20]
        proc->last_obj = proc->act_obj;   /*Refresh the last_obj*/
 800884e:	61a6      	str	r6, [r4, #24]
        if(proc->act_obj != NULL) {
 8008850:	2e00      	cmp	r6, #0
 8008852:	d0cc      	beq.n	80087ee <indev_proc_press+0x1a>
            proc->pr_timestamp = lv_tick_get();
 8008854:	f009 ff68 	bl	8012728 <lv_tick_get>
            proc->drag_range_out = 0;
 8008858:	7f22      	ldrb	r2, [r4, #28]
            proc->long_pr_sent = 0;
 800885a:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
            proc->drag_sum.x = 0;
 800885e:	2500      	movs	r5, #0
            proc->drag_in_prog = 0;
 8008860:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
            lv_obj_t * i = proc->act_obj;
 8008864:	6963      	ldr	r3, [r4, #20]
            proc->long_pr_sent = 0;
 8008866:	f36f 0100 	bfc	r1, #0, #1
            proc->pr_timestamp = lv_tick_get();
 800886a:	6220      	str	r0, [r4, #32]
            proc->drag_in_prog = 0;
 800886c:	f36f 0241 	bfc	r2, #1, #1
            proc->drag_sum.x = 0;
 8008870:	8225      	strh	r5, [r4, #16]
            proc->long_pr_sent = 0;
 8008872:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
            proc->drag_in_prog = 0;
 8008876:	7722      	strb	r2, [r4, #28]
            proc->drag_sum.y = 0;
 8008878:	8265      	strh	r5, [r4, #18]
            proc->vect.x = 0;
 800887a:	81a5      	strh	r5, [r4, #12]
            proc->vect.y = 0;
 800887c:	81e5      	strh	r5, [r4, #14]
            while(i != NULL) {
 800887e:	b1c3      	cbz	r3, 80088b2 <indev_proc_press+0xde>
                if(i->top != 0) last_top = i;
 8008880:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
                i = lv_obj_get_parent(i);
 8008884:	4618      	mov	r0, r3
 8008886:	f012 0f20 	tst.w	r2, #32
 800888a:	bf18      	it	ne
 800888c:	461d      	movne	r5, r3
 800888e:	f003 fa99 	bl	800bdc4 <lv_obj_get_parent>
            while(i != NULL) {
 8008892:	4603      	mov	r3, r0
 8008894:	2800      	cmp	r0, #0
 8008896:	d1f3      	bne.n	8008880 <indev_proc_press+0xac>
            if(last_top != NULL) {
 8008898:	b155      	cbz	r5, 80088b0 <indev_proc_press+0xdc>
                lv_obj_t * par = lv_obj_get_parent(last_top);
 800889a:	4628      	mov	r0, r5
 800889c:	f003 fa92 	bl	800bdc4 <lv_obj_get_parent>
                lv_ll_chg_list(&par->child_ll, &par->child_ll, last_top);
 80088a0:	1d01      	adds	r1, r0, #4
 80088a2:	462a      	mov	r2, r5
 80088a4:	4608      	mov	r0, r1
 80088a6:	f00a fc13 	bl	80130d0 <lv_ll_chg_list>
                lv_obj_invalidate(last_top);
 80088aa:	4628      	mov	r0, r5
 80088ac:	f001 fa18 	bl	8009ce0 <lv_obj_invalidate>
 80088b0:	6963      	ldr	r3, [r4, #20]
            proc->act_obj->signal_func(proc->act_obj, LV_SIGNAL_PRESSED, indev_act);
 80088b2:	4a7d      	ldr	r2, [pc, #500]	; (8008aa8 <indev_proc_press+0x2d4>)
 80088b4:	4618      	mov	r0, r3
 80088b6:	2108      	movs	r1, #8
 80088b8:	699b      	ldr	r3, [r3, #24]
 80088ba:	6812      	ldr	r2, [r2, #0]
 80088bc:	4798      	blx	r3
            if(proc->reset_query != 0) return;
 80088be:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80088c2:	079d      	lsls	r5, r3, #30
 80088c4:	d4a7      	bmi.n	8008816 <indev_proc_press+0x42>
 80088c6:	6963      	ldr	r3, [r4, #20]
 80088c8:	e792      	b.n	80087f0 <indev_proc_press+0x1c>
 * Handle the dragging of indev_proc_p->act_obj
 * @param indev pointer to a input device state
 */
static void indev_drag(lv_indev_proc_t * state)
{
    lv_obj_t * drag_obj = state->act_obj;
 80088ca:	6965      	ldr	r5, [r4, #20]
 80088cc:	e006      	b.n	80088dc <indev_proc_press+0x108>

    /*If drag parent is active check recursively the drag_parent attribute*/
    while(lv_obj_get_drag_parent(drag_obj) != false &&
            drag_obj != NULL) {
        drag_obj = lv_obj_get_parent(drag_obj);
 80088ce:	4628      	mov	r0, r5
    while(lv_obj_get_drag_parent(drag_obj) != false &&
 80088d0:	2d00      	cmp	r5, #0
 80088d2:	f000 8092 	beq.w	80089fa <indev_proc_press+0x226>
        drag_obj = lv_obj_get_parent(drag_obj);
 80088d6:	f003 fa75 	bl	800bdc4 <lv_obj_get_parent>
 80088da:	4605      	mov	r5, r0
    while(lv_obj_get_drag_parent(drag_obj) != false &&
 80088dc:	4628      	mov	r0, r5
 80088de:	f003 faf5 	bl	800becc <lv_obj_get_drag_parent>
 80088e2:	2800      	cmp	r0, #0
 80088e4:	d1f3      	bne.n	80088ce <indev_proc_press+0xfa>
    }

    if(drag_obj == NULL) return;
 80088e6:	2d00      	cmp	r5, #0
 80088e8:	f000 8087 	beq.w	80089fa <indev_proc_press+0x226>

    if(lv_obj_get_drag(drag_obj) == false) return;
 80088ec:	4628      	mov	r0, r5
 80088ee:	f003 fae1 	bl	800beb4 <lv_obj_get_drag>
 80088f2:	2800      	cmp	r0, #0
 80088f4:	f000 8081 	beq.w	80089fa <indev_proc_press+0x226>

    /*Count the movement by drag*/
    state->drag_sum.x += state->vect.x;
 80088f8:	8a23      	ldrh	r3, [r4, #16]
 80088fa:	89a1      	ldrh	r1, [r4, #12]
    state->drag_sum.y += state->vect.y;
 80088fc:	8a62      	ldrh	r2, [r4, #18]
 80088fe:	89e0      	ldrh	r0, [r4, #14]
    state->drag_sum.x += state->vect.x;
 8008900:	440b      	add	r3, r1

    /*Enough move?*/
    if(state->drag_range_out == 0) {
 8008902:	7f21      	ldrb	r1, [r4, #28]
    state->drag_sum.y += state->vect.y;
 8008904:	4402      	add	r2, r0
    state->drag_sum.x += state->vect.x;
 8008906:	b21b      	sxth	r3, r3
    if(state->drag_range_out == 0) {
 8008908:	07c9      	lsls	r1, r1, #31
    state->drag_sum.y += state->vect.y;
 800890a:	b212      	sxth	r2, r2
    state->drag_sum.x += state->vect.x;
 800890c:	8223      	strh	r3, [r4, #16]
    state->drag_sum.y += state->vect.y;
 800890e:	8262      	strh	r2, [r4, #18]
    if(state->drag_range_out == 0) {
 8008910:	f140 808a 	bpl.w	8008a28 <indev_proc_press+0x254>
    }

    /*If the drag limit is stepped over then handle the dragging*/
    if(state->drag_range_out != 0) {
        /*Set new position if the vector is not zero*/
        if(state->vect.x != 0 ||
 8008914:	68e3      	ldr	r3, [r4, #12]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d06f      	beq.n	80089fa <indev_proc_press+0x226>
                state->vect.y != 0) {
            /*Get the coordinates of the object and modify them*/
            lv_coord_t act_x = lv_obj_get_x(drag_obj);
 800891a:	4628      	mov	r0, r5
 800891c:	f003 fa66 	bl	800bdec <lv_obj_get_x>
 8008920:	4682      	mov	sl, r0
            lv_coord_t act_y = lv_obj_get_y(drag_obj);
 8008922:	4628      	mov	r0, r5
 8008924:	f003 fa68 	bl	800bdf8 <lv_obj_get_y>
 8008928:	4681      	mov	r9, r0
            uint16_t inv_buf_size = lv_refr_get_buf_size(); /*Get the number of currently invalidated areas*/
 800892a:	f003 fdbd 	bl	800c4a8 <lv_refr_get_buf_size>
 800892e:	9001      	str	r0, [sp, #4]

            lv_coord_t prev_x = drag_obj->coords.x1;
            lv_coord_t prev_y = drag_obj->coords.y1;
            lv_coord_t prev_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
 8008930:	4628      	mov	r0, r5
            lv_coord_t prev_x = drag_obj->coords.x1;
 8008932:	f9b5 8010 	ldrsh.w	r8, [r5, #16]
            lv_coord_t prev_y = drag_obj->coords.y1;
 8008936:	f9b5 b012 	ldrsh.w	fp, [r5, #18]
            lv_coord_t prev_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
 800893a:	f003 fa43 	bl	800bdc4 <lv_obj_get_parent>
 800893e:	f003 fa61 	bl	800be04 <lv_obj_get_width>
 8008942:	9002      	str	r0, [sp, #8]
            lv_coord_t prev_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
 8008944:	4628      	mov	r0, r5
 8008946:	f003 fa3d 	bl	800bdc4 <lv_obj_get_parent>
 800894a:	f003 fa61 	bl	800be10 <lv_obj_get_height>

            lv_obj_set_pos(drag_obj, act_x + state->vect.x, act_y + state->vect.y);
 800894e:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
 8008952:	f8b4 e00e 	ldrh.w	lr, [r4, #14]
 8008956:	eb0a 010c 	add.w	r1, sl, ip
            lv_coord_t prev_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
 800895a:	9003      	str	r0, [sp, #12]
            lv_obj_set_pos(drag_obj, act_x + state->vect.x, act_y + state->vect.y);
 800895c:	eb09 020e 	add.w	r2, r9, lr
 8008960:	4628      	mov	r0, r5
 8008962:	b209      	sxth	r1, r1
 8008964:	b212      	sxth	r2, r2
 8008966:	f001 fbfd 	bl	800a164 <lv_obj_set_pos>

            /*Set the drag in progress flag if the object is really moved*/

            if(drag_obj->coords.x1 != prev_x || drag_obj->coords.y1 != prev_y) {
 800896a:	f9b5 2010 	ldrsh.w	r2, [r5, #16]
 800896e:	4542      	cmp	r2, r8
 8008970:	d027      	beq.n	80089c2 <indev_proc_press+0x1ee>
                if(state->drag_range_out != 0) { /*Send the drag begin signal on first move*/
 8008972:	7f23      	ldrb	r3, [r4, #28]
 8008974:	07d9      	lsls	r1, r3, #31
 8008976:	d478      	bmi.n	8008a6a <indev_proc_press+0x296>
 8008978:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800897c:	f003 0202 	and.w	r2, r3, #2
                    drag_obj->signal_func(drag_obj,  LV_SIGNAL_DRAG_BEGIN, indev_act);
                    if(state->reset_query != 0) return;
                }
                state->drag_in_prog = 1;
 8008980:	7f21      	ldrb	r1, [r4, #28]
 8008982:	f041 0102 	orr.w	r1, r1, #2
 8008986:	7721      	strb	r1, [r4, #28]
        if(proc->reset_query != 0) return;
 8008988:	2a00      	cmp	r2, #0
 800898a:	f47f af44 	bne.w	8008816 <indev_proc_press+0x42>
        if(proc->drag_in_prog == 0 && proc->long_pr_sent == 0) {
 800898e:	7f22      	ldrb	r2, [r4, #28]
 8008990:	0792      	lsls	r2, r2, #30
 8008992:	f53f af40 	bmi.w	8008816 <indev_proc_press+0x42>
 8008996:	07dd      	lsls	r5, r3, #31
 8008998:	d557      	bpl.n	8008a4a <indev_proc_press+0x276>
            if(lv_tick_elaps(proc->longpr_rep_timestamp) > LV_INDEV_LONG_PRESS_REP_TIME) {
 800899a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800899c:	f009 fece 	bl	801273c <lv_tick_elaps>
 80089a0:	2864      	cmp	r0, #100	; 0x64
 80089a2:	f67f af38 	bls.w	8008816 <indev_proc_press+0x42>
                pr_obj->signal_func(pr_obj, LV_SIGNAL_LONG_PRESS_REP, indev_act);
 80089a6:	69b3      	ldr	r3, [r6, #24]
 80089a8:	4630      	mov	r0, r6
 80089aa:	683a      	ldr	r2, [r7, #0]
 80089ac:	210d      	movs	r1, #13
 80089ae:	4798      	blx	r3
                if(proc->reset_query != 0) return;
 80089b0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80089b4:	079b      	lsls	r3, r3, #30
 80089b6:	f53f af2e 	bmi.w	8008816 <indev_proc_press+0x42>
                proc->longpr_rep_timestamp = lv_tick_get();
 80089ba:	f009 feb5 	bl	8012728 <lv_tick_get>
 80089be:	6260      	str	r0, [r4, #36]	; 0x24
 80089c0:	e729      	b.n	8008816 <indev_proc_press+0x42>
            if(drag_obj->coords.x1 != prev_x || drag_obj->coords.y1 != prev_y) {
 80089c2:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
 80089c6:	455b      	cmp	r3, fp
 80089c8:	d1d3      	bne.n	8008972 <indev_proc_press+0x19e>
            /*If the object didn't moved then clear the invalidated areas*/
            else {
                /*In a special case if the object is moved on a page and
                 * the scrollable has fit == true and the object is dragged of the page then
                 * while its coordinate is not changing only the parent's size is reduced */
                lv_coord_t act_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
 80089ca:	4628      	mov	r0, r5
 80089cc:	f003 f9fa 	bl	800bdc4 <lv_obj_get_parent>
 80089d0:	f003 fa18 	bl	800be04 <lv_obj_get_width>
 80089d4:	4683      	mov	fp, r0
                lv_coord_t act_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
 80089d6:	4628      	mov	r0, r5
 80089d8:	f003 f9f4 	bl	800bdc4 <lv_obj_get_parent>
 80089dc:	f003 fa18 	bl	800be10 <lv_obj_get_height>
                if(act_par_w == prev_par_w && act_par_h == prev_par_h) {
 80089e0:	9b02      	ldr	r3, [sp, #8]
 80089e2:	455b      	cmp	r3, fp
 80089e4:	d109      	bne.n	80089fa <indev_proc_press+0x226>
 80089e6:	9b03      	ldr	r3, [sp, #12]
 80089e8:	4283      	cmp	r3, r0
 80089ea:	d106      	bne.n	80089fa <indev_proc_press+0x226>
                    uint16_t new_inv_buf_size = lv_refr_get_buf_size();
 80089ec:	f003 fd5c 	bl	800c4a8 <lv_refr_get_buf_size>
                    lv_refr_pop_from_buf(new_inv_buf_size - inv_buf_size);
 80089f0:	9b01      	ldr	r3, [sp, #4]
 80089f2:	1ac0      	subs	r0, r0, r3
 80089f4:	b280      	uxth	r0, r0
 80089f6:	f003 fd5d 	bl	800c4b4 <lv_refr_pop_from_buf>
 80089fa:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80089fe:	f003 0202 	and.w	r2, r3, #2
 8008a02:	e7c1      	b.n	8008988 <indev_proc_press+0x1b4>
        pr_obj = indev_search_obj(proc, lv_layer_top());
 8008a04:	f003 f9d2 	bl	800bdac <lv_layer_top>
 8008a08:	4601      	mov	r1, r0
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	f7ff fd46 	bl	800849c <indev_search_obj>
        if(pr_obj == NULL) pr_obj = indev_search_obj(proc, lv_scr_act());
 8008a10:	4606      	mov	r6, r0
 8008a12:	2800      	cmp	r0, #0
 8008a14:	f47f af0a 	bne.w	800882c <indev_proc_press+0x58>
 8008a18:	f003 f9c2 	bl	800bda0 <lv_scr_act>
 8008a1c:	4601      	mov	r1, r0
 8008a1e:	4620      	mov	r0, r4
 8008a20:	f7ff fd3c 	bl	800849c <indev_search_obj>
 8008a24:	4606      	mov	r6, r0
 8008a26:	e701      	b.n	800882c <indev_proc_press+0x58>
        if(LV_MATH_ABS(state->drag_sum.x) >= LV_INDEV_DRAG_LIMIT ||
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	bfb8      	it	lt
 8008a2c:	425b      	neglt	r3, r3
 8008a2e:	2b09      	cmp	r3, #9
 8008a30:	dc04      	bgt.n	8008a3c <indev_proc_press+0x268>
                LV_MATH_ABS(state->drag_sum.y) >= LV_INDEV_DRAG_LIMIT) {
 8008a32:	2a00      	cmp	r2, #0
 8008a34:	bfb8      	it	lt
 8008a36:	4252      	neglt	r2, r2
        if(LV_MATH_ABS(state->drag_sum.x) >= LV_INDEV_DRAG_LIMIT ||
 8008a38:	2a09      	cmp	r2, #9
 8008a3a:	ddde      	ble.n	80089fa <indev_proc_press+0x226>
            state->drag_range_out = 1;
 8008a3c:	7f23      	ldrb	r3, [r4, #28]
 8008a3e:	f043 0301 	orr.w	r3, r3, #1
    if(state->drag_range_out != 0) {
 8008a42:	07d8      	lsls	r0, r3, #31
            state->drag_range_out = 1;
 8008a44:	7723      	strb	r3, [r4, #28]
    if(state->drag_range_out != 0) {
 8008a46:	d5d8      	bpl.n	80089fa <indev_proc_press+0x226>
 8008a48:	e764      	b.n	8008914 <indev_proc_press+0x140>
            if(lv_tick_elaps(proc->pr_timestamp) > LV_INDEV_LONG_PRESS_TIME) {
 8008a4a:	6a20      	ldr	r0, [r4, #32]
 8008a4c:	f009 fe76 	bl	801273c <lv_tick_elaps>
 8008a50:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 8008a54:	d815      	bhi.n	8008a82 <indev_proc_press+0x2ae>
        if(proc->drag_in_prog == 0 && proc->long_pr_sent == 1) {
 8008a56:	7f23      	ldrb	r3, [r4, #28]
 8008a58:	0799      	lsls	r1, r3, #30
 8008a5a:	f53f aedc 	bmi.w	8008816 <indev_proc_press+0x42>
 8008a5e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8008a62:	07da      	lsls	r2, r3, #31
 8008a64:	f57f aed7 	bpl.w	8008816 <indev_proc_press+0x42>
 8008a68:	e797      	b.n	800899a <indev_proc_press+0x1c6>
                    drag_obj->signal_func(drag_obj,  LV_SIGNAL_DRAG_BEGIN, indev_act);
 8008a6a:	69ab      	ldr	r3, [r5, #24]
 8008a6c:	4628      	mov	r0, r5
 8008a6e:	683a      	ldr	r2, [r7, #0]
 8008a70:	210e      	movs	r1, #14
 8008a72:	4798      	blx	r3
                    if(state->reset_query != 0) return;
 8008a74:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8008a78:	f013 0202 	ands.w	r2, r3, #2
 8008a7c:	f47f aecb 	bne.w	8008816 <indev_proc_press+0x42>
 8008a80:	e77e      	b.n	8008980 <indev_proc_press+0x1ac>
                pr_obj->signal_func(pr_obj, LV_SIGNAL_LONG_PRESS, indev_act);
 8008a82:	69b3      	ldr	r3, [r6, #24]
 8008a84:	210c      	movs	r1, #12
 8008a86:	683a      	ldr	r2, [r7, #0]
 8008a88:	4630      	mov	r0, r6
 8008a8a:	4798      	blx	r3
                if(proc->reset_query != 0) return;
 8008a8c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8008a90:	0798      	lsls	r0, r3, #30
 8008a92:	f53f aec0 	bmi.w	8008816 <indev_proc_press+0x42>
                proc->long_pr_sent = 1;
 8008a96:	f043 0301 	orr.w	r3, r3, #1
 8008a9a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
                proc->longpr_rep_timestamp = lv_tick_get();
 8008a9e:	f009 fe43 	bl	8012728 <lv_tick_get>
 8008aa2:	6260      	str	r0, [r4, #36]	; 0x24
 8008aa4:	e7d7      	b.n	8008a56 <indev_proc_press+0x282>
 8008aa6:	bf00      	nop
 8008aa8:	20000cac 	.word	0x20000cac

08008aac <indev_proc_release>:
    if(proc->wait_unil_release != 0) {
 8008aac:	7f03      	ldrb	r3, [r0, #28]
 8008aae:	0759      	lsls	r1, r3, #29
 8008ab0:	d508      	bpl.n	8008ac4 <indev_proc_release+0x18>
        proc->act_obj = NULL;
 8008ab2:	2200      	movs	r2, #0
        proc->wait_unil_release = 0;
 8008ab4:	f362 0382 	bfi	r3, r2, #2, #1
        proc->act_obj = NULL;
 8008ab8:	6142      	str	r2, [r0, #20]
        proc->last_obj = NULL;
 8008aba:	6182      	str	r2, [r0, #24]
        proc->wait_unil_release = 0;
 8008abc:	7703      	strb	r3, [r0, #28]
        proc->pr_timestamp = 0;
 8008abe:	6202      	str	r2, [r0, #32]
        proc->longpr_rep_timestamp = 0;
 8008ac0:	6242      	str	r2, [r0, #36]	; 0x24
 8008ac2:	4770      	bx	lr
{
 8008ac4:	b570      	push	{r4, r5, r6, lr}
 8008ac6:	4604      	mov	r4, r0
    if(proc->act_obj != NULL) {
 8008ac8:	6940      	ldr	r0, [r0, #20]
{
 8008aca:	b084      	sub	sp, #16
    if(proc->act_obj != NULL) {
 8008acc:	2800      	cmp	r0, #0
 8008ace:	f000 80e4 	beq.w	8008c9a <indev_proc_release+0x1ee>
        if(lv_obj_is_protected(proc->act_obj, LV_PROTECT_PRESS_LOST)) {
 8008ad2:	2110      	movs	r1, #16
 8008ad4:	f003 fa14 	bl	800bf00 <lv_obj_is_protected>
 8008ad8:	b960      	cbnz	r0, 8008af4 <indev_proc_release+0x48>
            proc->act_obj->signal_func(proc->act_obj, LV_SIGNAL_RELEASED, indev_act);
 8008ada:	6960      	ldr	r0, [r4, #20]
 8008adc:	210b      	movs	r1, #11
 8008ade:	4a74      	ldr	r2, [pc, #464]	; (8008cb0 <indev_proc_release+0x204>)
 8008ae0:	6983      	ldr	r3, [r0, #24]
 8008ae2:	6812      	ldr	r2, [r2, #0]
 8008ae4:	4798      	blx	r3
        if(proc->reset_query != 0) return;
 8008ae6:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8008aea:	f011 0502 	ands.w	r5, r1, #2
 8008aee:	d014      	beq.n	8008b1a <indev_proc_release+0x6e>
}
 8008af0:	b004      	add	sp, #16
 8008af2:	bd70      	pop	{r4, r5, r6, pc}
            lv_obj_t * obj_on = indev_search_obj(proc, proc->act_obj);
 8008af4:	6961      	ldr	r1, [r4, #20]
 8008af6:	4620      	mov	r0, r4
 8008af8:	f7ff fcd0 	bl	800849c <indev_search_obj>
            if(obj_on == proc->act_obj) proc->act_obj->signal_func(proc->act_obj, LV_SIGNAL_RELEASED, indev_act);
 8008afc:	6963      	ldr	r3, [r4, #20]
 8008afe:	4298      	cmp	r0, r3
 8008b00:	f000 80ae 	beq.w	8008c60 <indev_proc_release+0x1b4>
            else proc->act_obj->signal_func(proc->act_obj, LV_SIGNAL_PRESS_LOST, indev_act);
 8008b04:	4a6a      	ldr	r2, [pc, #424]	; (8008cb0 <indev_proc_release+0x204>)
 8008b06:	4618      	mov	r0, r3
 8008b08:	210a      	movs	r1, #10
 8008b0a:	699b      	ldr	r3, [r3, #24]
 8008b0c:	6812      	ldr	r2, [r2, #0]
 8008b0e:	4798      	blx	r3
        if(proc->reset_query != 0) return;
 8008b10:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8008b14:	f011 0502 	ands.w	r5, r1, #2
 8008b18:	d1ea      	bne.n	8008af0 <indev_proc_release+0x44>
        lv_group_t * act_g = lv_obj_get_group(proc->act_obj);
 8008b1a:	6960      	ldr	r0, [r4, #20]
 8008b1c:	f003 f9fe 	bl	800bf1c <lv_obj_get_group>
 8008b20:	4606      	mov	r6, r0
        if(lv_group_get_editing(act_g)) {
 8008b22:	f7ff fcaf 	bl	8008484 <lv_group_get_editing>
 8008b26:	2800      	cmp	r0, #0
 8008b28:	f040 8095 	bne.w	8008c56 <indev_proc_release+0x1aa>
        if(lv_obj_is_protected(proc->act_obj, LV_PROTECT_CLICK_FOCUS) == false) {       /*Respect the click protection*/
 8008b2c:	2120      	movs	r1, #32
 8008b2e:	6960      	ldr	r0, [r4, #20]
 8008b30:	f003 f9e6 	bl	800bf00 <lv_obj_is_protected>
 8008b34:	2800      	cmp	r0, #0
 8008b36:	d077      	beq.n	8008c28 <indev_proc_release+0x17c>
        if(proc->reset_query != 0) return;
 8008b38:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8008b3c:	f013 0302 	ands.w	r3, r3, #2
 8008b40:	d1d6      	bne.n	8008af0 <indev_proc_release+0x44>
    if(proc->last_obj != NULL && proc->reset_query == 0) {
 8008b42:	69a5      	ldr	r5, [r4, #24]
        proc->act_obj = NULL;
 8008b44:	6163      	str	r3, [r4, #20]
        proc->pr_timestamp = 0;
 8008b46:	6223      	str	r3, [r4, #32]
        proc->longpr_rep_timestamp = 0;
 8008b48:	6263      	str	r3, [r4, #36]	; 0x24
    if(proc->last_obj != NULL && proc->reset_query == 0) {
 8008b4a:	2d00      	cmp	r5, #0
 8008b4c:	d0d0      	beq.n	8008af0 <indev_proc_release+0x44>
 8008b4e:	7f23      	ldrb	r3, [r4, #28]
 * Handle throwing by drag if the drag is ended
 * @param indev pointer to an input device state
 */
static void indev_drag_throw(lv_indev_proc_t * state)
{
    if(state->drag_in_prog == 0) return;
 8008b50:	079b      	lsls	r3, r3, #30
 8008b52:	d406      	bmi.n	8008b62 <indev_proc_release+0xb6>
 8008b54:	e7cc      	b.n	8008af0 <indev_proc_release+0x44>
    lv_obj_t * drag_obj = state->last_obj;

    /*If drag parent is active check recursively the drag_parent attribute*/
    while(lv_obj_get_drag_parent(drag_obj) != false &&
            drag_obj != NULL) {
        drag_obj = lv_obj_get_parent(drag_obj);
 8008b56:	4628      	mov	r0, r5
    while(lv_obj_get_drag_parent(drag_obj) != false &&
 8008b58:	2d00      	cmp	r5, #0
 8008b5a:	d0c9      	beq.n	8008af0 <indev_proc_release+0x44>
        drag_obj = lv_obj_get_parent(drag_obj);
 8008b5c:	f003 f932 	bl	800bdc4 <lv_obj_get_parent>
 8008b60:	4605      	mov	r5, r0
    while(lv_obj_get_drag_parent(drag_obj) != false &&
 8008b62:	4628      	mov	r0, r5
 8008b64:	f003 f9b2 	bl	800becc <lv_obj_get_drag_parent>
 8008b68:	2800      	cmp	r0, #0
 8008b6a:	d1f4      	bne.n	8008b56 <indev_proc_release+0xaa>
    }

    if(drag_obj == NULL) return;
 8008b6c:	2d00      	cmp	r5, #0
 8008b6e:	d0bf      	beq.n	8008af0 <indev_proc_release+0x44>

    /*Return if the drag throw is not enabled*/
    if(lv_obj_get_drag_throw(drag_obj) == false) {
 8008b70:	4628      	mov	r0, r5
 8008b72:	f003 f9a5 	bl	800bec0 <lv_obj_get_drag_throw>
 8008b76:	4603      	mov	r3, r0
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	d077      	beq.n	8008c6c <indev_proc_release+0x1c0>
        drag_obj->signal_func(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
        return;
    }

    /*Reduce the vectors*/
    state->vect.x = state->vect.x * (100 - LV_INDEV_DRAG_THROW) / 100;
 8008b7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    state->vect.y = state->vect.y * (100 - LV_INDEV_DRAG_THROW) / 100;
 8008b80:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    state->vect.x = state->vect.x * (100 - LV_INDEV_DRAG_THROW) / 100;
 8008b84:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008b88:	494a      	ldr	r1, [pc, #296]	; (8008cb4 <indev_proc_release+0x208>)
    state->vect.y = state->vect.y * (100 - LV_INDEV_DRAG_THROW) / 100;
 8008b8a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    state->vect.x = state->vect.x * (100 - LV_INDEV_DRAG_THROW) / 100;
 8008b8e:	0112      	lsls	r2, r2, #4
    state->vect.y = state->vect.y * (100 - LV_INDEV_DRAG_THROW) / 100;
 8008b90:	011b      	lsls	r3, r3, #4
    state->vect.x = state->vect.x * (100 - LV_INDEV_DRAG_THROW) / 100;
 8008b92:	fb81 6002 	smull	r6, r0, r1, r2
 8008b96:	17d2      	asrs	r2, r2, #31
    state->vect.y = state->vect.y * (100 - LV_INDEV_DRAG_THROW) / 100;
 8008b98:	fb81 6103 	smull	r6, r1, r1, r3
 8008b9c:	17db      	asrs	r3, r3, #31
    state->vect.x = state->vect.x * (100 - LV_INDEV_DRAG_THROW) / 100;
 8008b9e:	ebc2 1260 	rsb	r2, r2, r0, asr #5
    state->vect.y = state->vect.y * (100 - LV_INDEV_DRAG_THROW) / 100;
 8008ba2:	ebc3 1361 	rsb	r3, r3, r1, asr #5
    state->vect.x = state->vect.x * (100 - LV_INDEV_DRAG_THROW) / 100;
 8008ba6:	81a2      	strh	r2, [r4, #12]
    state->vect.y = state->vect.y * (100 - LV_INDEV_DRAG_THROW) / 100;
 8008ba8:	81e3      	strh	r3, [r4, #14]

    if(state->vect.x != 0 ||
 8008baa:	68e3      	ldr	r3, [r4, #12]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d05d      	beq.n	8008c6c <indev_proc_release+0x1c0>
            state->vect.y != 0) {
        /*Get the coordinates and modify them*/
        lv_area_t coords_ori;
        lv_obj_get_coords(drag_obj, &coords_ori);
 8008bb0:	4669      	mov	r1, sp
 8008bb2:	4628      	mov	r0, r5
 8008bb4:	f003 f914 	bl	800bde0 <lv_obj_get_coords>
        lv_coord_t act_x = lv_obj_get_x(drag_obj) + state->vect.x;
 8008bb8:	4628      	mov	r0, r5
 8008bba:	f003 f917 	bl	800bdec <lv_obj_get_x>
 8008bbe:	89a6      	ldrh	r6, [r4, #12]
 8008bc0:	4406      	add	r6, r0
        lv_coord_t act_y = lv_obj_get_y(drag_obj) + state->vect.y;
 8008bc2:	4628      	mov	r0, r5
 8008bc4:	f003 f918 	bl	800bdf8 <lv_obj_get_y>
 8008bc8:	89e2      	ldrh	r2, [r4, #14]
        lv_coord_t act_x = lv_obj_get_x(drag_obj) + state->vect.x;
 8008bca:	b236      	sxth	r6, r6
        lv_coord_t act_y = lv_obj_get_y(drag_obj) + state->vect.y;
 8008bcc:	4402      	add	r2, r0
        lv_obj_set_pos(drag_obj, act_x, act_y);
 8008bce:	4628      	mov	r0, r5
 8008bd0:	4631      	mov	r1, r6
 8008bd2:	b212      	sxth	r2, r2
 8008bd4:	f001 fac6 	bl	800a164 <lv_obj_set_pos>

        lv_area_t coord_new;
        lv_obj_get_coords(drag_obj, &coord_new);
 8008bd8:	a902      	add	r1, sp, #8
 8008bda:	4628      	mov	r0, r5
 8008bdc:	f003 f900 	bl	800bde0 <lv_obj_get_coords>

        /*If non of the coordinates are changed then do not continue throwing*/
        if((coords_ori.x1 == coord_new.x1 || state->vect.x == 0) &&
 8008be0:	f9bd 2000 	ldrsh.w	r2, [sp]
 8008be4:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d004      	beq.n	8008bf6 <indev_proc_release+0x14a>
 8008bec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	f47f af7d 	bne.w	8008af0 <indev_proc_release+0x44>
 8008bf6:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8008bfa:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d004      	beq.n	8008c0c <indev_proc_release+0x160>
                (coords_ori.y1 == coord_new.y1 || state->vect.y == 0)) {
 8008c02:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	f47f af72 	bne.w	8008af0 <indev_proc_release+0x44>
            state->drag_in_prog = 0;
 8008c0c:	7f23      	ldrb	r3, [r4, #28]
            state->vect.x = 0;
 8008c0e:	2200      	movs	r2, #0
            state->vect.y = 0;
            drag_obj->signal_func(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8008c10:	4e27      	ldr	r6, [pc, #156]	; (8008cb0 <indev_proc_release+0x204>)
 8008c12:	4628      	mov	r0, r5
            state->drag_in_prog = 0;
 8008c14:	f36f 0341 	bfc	r3, #1, #1
            state->vect.x = 0;
 8008c18:	81a2      	strh	r2, [r4, #12]
            state->vect.y = 0;
 8008c1a:	81e2      	strh	r2, [r4, #14]
            drag_obj->signal_func(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8008c1c:	210f      	movs	r1, #15
            state->drag_in_prog = 0;
 8008c1e:	7723      	strb	r3, [r4, #28]
            drag_obj->signal_func(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8008c20:	6832      	ldr	r2, [r6, #0]
 8008c22:	69ab      	ldr	r3, [r5, #24]
 8008c24:	4798      	blx	r3
 8008c26:	e763      	b.n	8008af0 <indev_proc_release+0x44>
            lv_group_t * g = lv_obj_get_group(proc->act_obj);
 8008c28:	6960      	ldr	r0, [r4, #20]
 8008c2a:	f003 f977 	bl	800bf1c <lv_obj_get_group>
            lv_obj_t * parent = proc->act_obj;
 8008c2e:	6965      	ldr	r5, [r4, #20]
            while(g == NULL) {
 8008c30:	b148      	cbz	r0, 8008c46 <indev_proc_release+0x19a>
 8008c32:	e026      	b.n	8008c82 <indev_proc_release+0x1d6>
                if(lv_obj_is_protected(parent, LV_PROTECT_CLICK_FOCUS)) {   /*Ignore is the protected against click focus*/
 8008c34:	f003 f964 	bl	800bf00 <lv_obj_is_protected>
 8008c38:	2800      	cmp	r0, #0
 8008c3a:	f47f af7d 	bne.w	8008b38 <indev_proc_release+0x8c>
                g = lv_obj_get_group(parent);
 8008c3e:	4628      	mov	r0, r5
 8008c40:	f003 f96c 	bl	800bf1c <lv_obj_get_group>
            while(g == NULL) {
 8008c44:	bb00      	cbnz	r0, 8008c88 <indev_proc_release+0x1dc>
                parent = lv_obj_get_parent(parent);
 8008c46:	4628      	mov	r0, r5
 8008c48:	f003 f8bc 	bl	800bdc4 <lv_obj_get_parent>
                if(lv_obj_is_protected(parent, LV_PROTECT_CLICK_FOCUS)) {   /*Ignore is the protected against click focus*/
 8008c4c:	2120      	movs	r1, #32
                if(parent == NULL) break;
 8008c4e:	4605      	mov	r5, r0
 8008c50:	2800      	cmp	r0, #0
 8008c52:	d1ef      	bne.n	8008c34 <indev_proc_release+0x188>
 8008c54:	e770      	b.n	8008b38 <indev_proc_release+0x8c>
            lv_group_set_editing(act_g, false);
 8008c56:	4629      	mov	r1, r5
 8008c58:	4630      	mov	r0, r6
 8008c5a:	f7ff fbdd 	bl	8008418 <lv_group_set_editing>
 8008c5e:	e765      	b.n	8008b2c <indev_proc_release+0x80>
            if(obj_on == proc->act_obj) proc->act_obj->signal_func(proc->act_obj, LV_SIGNAL_RELEASED, indev_act);
 8008c60:	4d13      	ldr	r5, [pc, #76]	; (8008cb0 <indev_proc_release+0x204>)
 8008c62:	210b      	movs	r1, #11
 8008c64:	6983      	ldr	r3, [r0, #24]
 8008c66:	682a      	ldr	r2, [r5, #0]
 8008c68:	4798      	blx	r3
 8008c6a:	e73c      	b.n	8008ae6 <indev_proc_release+0x3a>

        }
    }
    /*If the vectors become 0 -> drag_in_prog = 0 and send a drag end signal*/
    else {
        state->drag_in_prog = 0;
 8008c6c:	7f26      	ldrb	r6, [r4, #28]
        drag_obj->signal_func(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8008c6e:	4628      	mov	r0, r5
 8008c70:	4a0f      	ldr	r2, [pc, #60]	; (8008cb0 <indev_proc_release+0x204>)
 8008c72:	210f      	movs	r1, #15
        state->drag_in_prog = 0;
 8008c74:	f363 0641 	bfi	r6, r3, #1, #1
        drag_obj->signal_func(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8008c78:	6812      	ldr	r2, [r2, #0]
        state->drag_in_prog = 0;
 8008c7a:	7726      	strb	r6, [r4, #28]
        drag_obj->signal_func(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8008c7c:	69ab      	ldr	r3, [r5, #24]
 8008c7e:	4798      	blx	r3
 8008c80:	e736      	b.n	8008af0 <indev_proc_release+0x44>
            if(g != NULL && parent != NULL)
 8008c82:	2d00      	cmp	r5, #0
 8008c84:	f43f af58 	beq.w	8008b38 <indev_proc_release+0x8c>
                if(lv_group_get_click_focus(g)) {
 8008c88:	f7ff fc02 	bl	8008490 <lv_group_get_click_focus>
 8008c8c:	2800      	cmp	r0, #0
 8008c8e:	f43f af53 	beq.w	8008b38 <indev_proc_release+0x8c>
                    lv_group_focus_obj(parent);
 8008c92:	4628      	mov	r0, r5
 8008c94:	f7ff faee 	bl	8008274 <lv_group_focus_obj>
 8008c98:	e74e      	b.n	8008b38 <indev_proc_release+0x8c>
 8008c9a:	69a5      	ldr	r5, [r4, #24]
    if(proc->last_obj != NULL && proc->reset_query == 0) {
 8008c9c:	2d00      	cmp	r5, #0
 8008c9e:	f43f af27 	beq.w	8008af0 <indev_proc_release+0x44>
 8008ca2:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8008ca6:	0792      	lsls	r2, r2, #30
 8008ca8:	f57f af52 	bpl.w	8008b50 <indev_proc_release+0xa4>
}
 8008cac:	b004      	add	sp, #16
 8008cae:	bd70      	pop	{r4, r5, r6, pc}
 8008cb0:	20000cac 	.word	0x20000cac
 8008cb4:	51eb851f 	.word	0x51eb851f

08008cb8 <indev_proc_task>:
{
 8008cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    i = lv_indev_next(NULL);
 8008cbc:	2000      	movs	r0, #0
{
 8008cbe:	b084      	sub	sp, #16
    i = lv_indev_next(NULL);
 8008cc0:	f009 fd12 	bl	80126e8 <lv_indev_next>
    while(i) {
 8008cc4:	2800      	cmp	r0, #0
 8008cc6:	f000 81f4 	beq.w	80090b2 <indev_proc_task+0x3fa>
 8008cca:	4604      	mov	r4, r0
 8008ccc:	4fb2      	ldr	r7, [pc, #712]	; (8008f98 <indev_proc_task+0x2e0>)
        indev->proc.act_obj = NULL;
 8008cce:	2500      	movs	r5, #0
    if(indev->proc.reset_query) {
 8008cd0:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
        indev_act = i;
 8008cd4:	603c      	str	r4, [r7, #0]
    if(indev->proc.reset_query) {
 8008cd6:	0798      	lsls	r0, r3, #30
 8008cd8:	f100 80d8 	bmi.w	8008e8c <indev_proc_task+0x1d4>
        if(i->proc.disabled == 0) {
 8008cdc:	0759      	lsls	r1, r3, #29
 8008cde:	d420      	bmi.n	8008d22 <indev_proc_task+0x6a>
        indev_proc_release(&i->proc);
 8008ce0:	f104 060c 	add.w	r6, r4, #12
                more_to_read = lv_indev_read(i, &data);
 8008ce4:	a901      	add	r1, sp, #4
 8008ce6:	4620      	mov	r0, r4
 8008ce8:	f009 fd06 	bl	80126f8 <lv_indev_read>
    if(indev->proc.reset_query) {
 8008cec:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
                more_to_read = lv_indev_read(i, &data);
 8008cf0:	4680      	mov	r8, r0
    if(indev->proc.reset_query) {
 8008cf2:	079a      	lsls	r2, r3, #30
 8008cf4:	d43a      	bmi.n	8008d6c <indev_proc_task+0xb4>
                i->proc.state = data.state;
 8008cf6:	f89d 300c 	ldrb.w	r3, [sp, #12]
                if(i->proc.state == LV_INDEV_STATE_PR) {
 8008cfa:	2b01      	cmp	r3, #1
                i->proc.state = data.state;
 8008cfc:	7323      	strb	r3, [r4, #12]
                if(i->proc.state == LV_INDEV_STATE_PR) {
 8008cfe:	d04e      	beq.n	8008d9e <indev_proc_task+0xe6>
                if(i->driver.type == LV_INDEV_TYPE_POINTER) {
 8008d00:	7823      	ldrb	r3, [r4, #0]
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d051      	beq.n	8008daa <indev_proc_task+0xf2>
                } else if(i->driver.type == LV_INDEV_TYPE_KEYPAD) {
 8008d06:	2b02      	cmp	r3, #2
 8008d08:	d068      	beq.n	8008ddc <indev_proc_task+0x124>
                } else if(i->driver.type == LV_INDEV_TYPE_ENCODER) {
 8008d0a:	2b04      	cmp	r3, #4
 8008d0c:	d078      	beq.n	8008e00 <indev_proc_task+0x148>
                } else if(i->driver.type == LV_INDEV_TYPE_BUTTON) {
 8008d0e:	2b03      	cmp	r3, #3
 8008d10:	f000 8094 	beq.w	8008e3c <indev_proc_task+0x184>
 8008d14:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    if(indev->proc.reset_query) {
 8008d18:	079b      	lsls	r3, r3, #30
 8008d1a:	d40d      	bmi.n	8008d38 <indev_proc_task+0x80>
            } while(more_to_read);
 8008d1c:	f1b8 0f00 	cmp.w	r8, #0
 8008d20:	d1e0      	bne.n	8008ce4 <indev_proc_task+0x2c>
        i = lv_indev_next(i);    /*Go to the next indev*/
 8008d22:	4620      	mov	r0, r4
 8008d24:	f009 fce0 	bl	80126e8 <lv_indev_next>
    while(i) {
 8008d28:	4604      	mov	r4, r0
 8008d2a:	2800      	cmp	r0, #0
 8008d2c:	d1d0      	bne.n	8008cd0 <indev_proc_task+0x18>
    indev_act = NULL;   /*End of indev processing, so no act indev*/
 8008d2e:	2300      	movs	r3, #0
 8008d30:	603b      	str	r3, [r7, #0]
}
 8008d32:	b004      	add	sp, #16
 8008d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        indev->proc.drag_range_out = 0;
 8008d38:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
        indev->proc.long_pr_sent = 0;
 8008d3c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
        indev->proc.drag_in_prog = 0;
 8008d40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
        indev->proc.act_obj = NULL;
 8008d44:	6225      	str	r5, [r4, #32]
        indev->proc.reset_query = 0;
 8008d46:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
        indev->proc.last_obj = NULL;
 8008d4a:	6265      	str	r5, [r4, #36]	; 0x24
        indev->proc.drag_in_prog = 0;
 8008d4c:	f365 0241 	bfi	r2, r5, #1, #1
        indev->proc.pr_timestamp = 0;
 8008d50:	62e5      	str	r5, [r4, #44]	; 0x2c
        indev->proc.reset_query = 0;
 8008d52:	f365 0341 	bfi	r3, r5, #1, #1
        indev->proc.longpr_rep_timestamp = 0;
 8008d56:	6325      	str	r5, [r4, #48]	; 0x30
        indev->proc.drag_sum.x = 0;
 8008d58:	83a5      	strh	r5, [r4, #28]
        indev->proc.drag_sum.y = 0;
 8008d5a:	83e5      	strh	r5, [r4, #30]
        indev->proc.drag_in_prog = 0;
 8008d5c:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        indev->proc.reset_query = 0;
 8008d60:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            } while(more_to_read);
 8008d64:	f1b8 0f00 	cmp.w	r8, #0
 8008d68:	d1bc      	bne.n	8008ce4 <indev_proc_task+0x2c>
 8008d6a:	e7da      	b.n	8008d22 <indev_proc_task+0x6a>
        indev->proc.reset_query = 0;
 8008d6c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
        indev->proc.drag_range_out = 0;
 8008d70:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
        indev->proc.act_obj = NULL;
 8008d74:	6225      	str	r5, [r4, #32]
        indev->proc.reset_query = 0;
 8008d76:	f365 0341 	bfi	r3, r5, #1, #1
        indev->proc.drag_in_prog = 0;
 8008d7a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
        indev->proc.last_obj = NULL;
 8008d7e:	6265      	str	r5, [r4, #36]	; 0x24
        indev->proc.reset_query = 0;
 8008d80:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        indev->proc.drag_in_prog = 0;
 8008d84:	f365 0241 	bfi	r2, r5, #1, #1
                i->proc.state = data.state;
 8008d88:	f89d 300c 	ldrb.w	r3, [sp, #12]
        indev->proc.pr_timestamp = 0;
 8008d8c:	62e5      	str	r5, [r4, #44]	; 0x2c
                if(i->proc.state == LV_INDEV_STATE_PR) {
 8008d8e:	2b01      	cmp	r3, #1
        indev->proc.longpr_rep_timestamp = 0;
 8008d90:	6325      	str	r5, [r4, #48]	; 0x30
        indev->proc.drag_sum.x = 0;
 8008d92:	83a5      	strh	r5, [r4, #28]
        indev->proc.drag_sum.y = 0;
 8008d94:	83e5      	strh	r5, [r4, #30]
        indev->proc.drag_in_prog = 0;
 8008d96:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
                i->proc.state = data.state;
 8008d9a:	7323      	strb	r3, [r4, #12]
                if(i->proc.state == LV_INDEV_STATE_PR) {
 8008d9c:	d1b0      	bne.n	8008d00 <indev_proc_task+0x48>
                    i->last_activity_time = lv_tick_get();
 8008d9e:	f009 fcc3 	bl	8012728 <lv_tick_get>
                if(i->driver.type == LV_INDEV_TYPE_POINTER) {
 8008da2:	7823      	ldrb	r3, [r4, #0]
                    i->last_activity_time = lv_tick_get();
 8008da4:	63e0      	str	r0, [r4, #60]	; 0x3c
                if(i->driver.type == LV_INDEV_TYPE_POINTER) {
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d1ad      	bne.n	8008d06 <indev_proc_task+0x4e>
    if(i->cursor != NULL &&
 8008daa:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008dac:	b148      	cbz	r0, 8008dc2 <indev_proc_task+0x10a>
 8008dae:	6962      	ldr	r2, [r4, #20]
 8008db0:	9b01      	ldr	r3, [sp, #4]
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d005      	beq.n	8008dc2 <indev_proc_task+0x10a>
        lv_obj_set_pos(i->cursor, data->point.x, data->point.y);
 8008db6:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8008dba:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8008dbe:	f001 f9d1 	bl	800a164 <lv_obj_set_pos>
    if(i->proc.state == LV_INDEV_STATE_PR) {
 8008dc2:	7b23      	ldrb	r3, [r4, #12]
        indev_proc_press(&i->proc);
 8008dc4:	4630      	mov	r0, r6
    i->proc.act_point.x = data->point.x;
 8008dc6:	9a01      	ldr	r2, [sp, #4]
    if(i->proc.state == LV_INDEV_STATE_PR) {
 8008dc8:	2b01      	cmp	r3, #1
    i->proc.act_point.x = data->point.x;
 8008dca:	6122      	str	r2, [r4, #16]
    if(i->proc.state == LV_INDEV_STATE_PR) {
 8008dcc:	d043      	beq.n	8008e56 <indev_proc_task+0x19e>
        indev_proc_release(&i->proc);
 8008dce:	f7ff fe6d 	bl	8008aac <indev_proc_release>
    i->proc.last_point.x = i->proc.act_point.x;
 8008dd2:	6922      	ldr	r2, [r4, #16]
 8008dd4:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008dd8:	6162      	str	r2, [r4, #20]
 8008dda:	e79d      	b.n	8008d18 <indev_proc_task+0x60>
    if(i->group == NULL) return;
 8008ddc:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008dde:	2800      	cmp	r0, #0
 8008de0:	d098      	beq.n	8008d14 <indev_proc_task+0x5c>
    if(data->state == LV_INDEV_STATE_PR &&
 8008de2:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8008de6:	2a01      	cmp	r2, #1
 8008de8:	d066      	beq.n	8008eb8 <indev_proc_task+0x200>
    else if(data->state == LV_INDEV_STATE_REL && i->proc.last_state == LV_INDEV_STATE_PR) {
 8008dea:	b91a      	cbnz	r2, 8008df4 <indev_proc_task+0x13c>
 8008dec:	7c23      	ldrb	r3, [r4, #16]
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	f000 80b0 	beq.w	8008f54 <indev_proc_task+0x29c>
 8008df4:	9901      	ldr	r1, [sp, #4]
 8008df6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    i->proc.last_state = data->state;
 8008dfa:	7422      	strb	r2, [r4, #16]
    i->proc.last_key = data->key;
 8008dfc:	6161      	str	r1, [r4, #20]
 8008dfe:	e78b      	b.n	8008d18 <indev_proc_task+0x60>
    if(i->group == NULL) return;
 8008e00:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008e02:	2800      	cmp	r0, #0
 8008e04:	d086      	beq.n	8008d14 <indev_proc_task+0x5c>
    if(data->state == LV_INDEV_STATE_REL) {
 8008e06:	f89d 900c 	ldrb.w	r9, [sp, #12]
 8008e0a:	f1b9 0f00 	cmp.w	r9, #0
 8008e0e:	d025      	beq.n	8008e5c <indev_proc_task+0x1a4>
    if(data->state == LV_INDEV_STATE_PR &&
 8008e10:	f1b9 0f01 	cmp.w	r9, #1
 8008e14:	d137      	bne.n	8008e86 <indev_proc_task+0x1ce>
            i->proc.last_state == LV_INDEV_STATE_REL) {
 8008e16:	f894 9010 	ldrb.w	r9, [r4, #16]
    if(data->state == LV_INDEV_STATE_PR &&
 8008e1a:	f1b9 0f00 	cmp.w	r9, #0
 8008e1e:	f000 80fd 	beq.w	800901c <indev_proc_task+0x364>
    else if(data->state == LV_INDEV_STATE_PR && i->proc.last_state == LV_INDEV_STATE_PR) {
 8008e22:	f1b9 0f01 	cmp.w	r9, #1
        if(i->proc.long_pr_sent == 0 &&
 8008e26:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    else if(data->state == LV_INDEV_STATE_PR && i->proc.last_state == LV_INDEV_STATE_PR) {
 8008e2a:	f000 80ff 	beq.w	800902c <indev_proc_task+0x374>
 8008e2e:	f04f 0901 	mov.w	r9, #1
    i->proc.last_key = data->key;
 8008e32:	9a01      	ldr	r2, [sp, #4]
    i->proc.last_state = data->state;
 8008e34:	f884 9010 	strb.w	r9, [r4, #16]
    i->proc.last_key = data->key;
 8008e38:	6162      	str	r2, [r4, #20]
 8008e3a:	e76d      	b.n	8008d18 <indev_proc_task+0x60>
    i->proc.act_point.x = i->btn_points[data->btn].x;
 8008e3c:	9901      	ldr	r1, [sp, #4]
        indev_proc_press(&i->proc);
 8008e3e:	4630      	mov	r0, r6
    i->proc.act_point.x = i->btn_points[data->btn].x;
 8008e40:	6c23      	ldr	r3, [r4, #64]	; 0x40
    if(i->proc.last_point.x == i->proc.act_point.x &&
 8008e42:	6962      	ldr	r2, [r4, #20]
    i->proc.act_point.x = i->btn_points[data->btn].x;
 8008e44:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    if(i->proc.last_point.x == i->proc.act_point.x &&
 8008e48:	429a      	cmp	r2, r3
    i->proc.act_point.x = i->btn_points[data->btn].x;
 8008e4a:	6123      	str	r3, [r4, #16]
    if(i->proc.last_point.x == i->proc.act_point.x &&
 8008e4c:	d1bf      	bne.n	8008dce <indev_proc_task+0x116>
            i->proc.last_point.y == i->proc.act_point.y &&
 8008e4e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d1bb      	bne.n	8008dce <indev_proc_task+0x116>
        indev_proc_press(&i->proc);
 8008e56:	f7ff fcbd 	bl	80087d4 <indev_proc_press>
 8008e5a:	e7ba      	b.n	8008dd2 <indev_proc_task+0x11a>
        if(lv_group_get_editing(i->group)) {
 8008e5c:	f7ff fb12 	bl	8008484 <lv_group_get_editing>
            if(data->enc_diff < 0) {
 8008e60:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
        if(lv_group_get_editing(i->group)) {
 8008e64:	2800      	cmp	r0, #0
 8008e66:	d066      	beq.n	8008f36 <indev_proc_task+0x27e>
            if(data->enc_diff < 0) {
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	db58      	blt.n	8008f1e <indev_proc_task+0x266>
                for(s = 0; s < data->enc_diff; s++) lv_group_send_data(i->group, LV_GROUP_KEY_RIGHT);
 8008e6c:	d14c      	bne.n	8008f08 <indev_proc_task+0x250>
    if(data->state == LV_INDEV_STATE_PR &&
 8008e6e:	f89d 900c 	ldrb.w	r9, [sp, #12]
 8008e72:	f1b9 0f01 	cmp.w	r9, #1
 8008e76:	d0ce      	beq.n	8008e16 <indev_proc_task+0x15e>
    else if(data->state == LV_INDEV_STATE_REL && i->proc.last_state == LV_INDEV_STATE_PR) {
 8008e78:	f1b9 0f00 	cmp.w	r9, #0
 8008e7c:	d103      	bne.n	8008e86 <indev_proc_task+0x1ce>
 8008e7e:	7c23      	ldrb	r3, [r4, #16]
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	f000 808b 	beq.w	8008f9c <indev_proc_task+0x2e4>
 8008e86:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008e8a:	e7d2      	b.n	8008e32 <indev_proc_task+0x17a>
        indev->proc.drag_range_out = 0;
 8008e8c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
        indev->proc.reset_query = 0;
 8008e90:	f003 01fe 	and.w	r1, r3, #254	; 0xfe
        indev->proc.act_obj = NULL;
 8008e94:	6225      	str	r5, [r4, #32]
        indev->proc.drag_in_prog = 0;
 8008e96:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
        indev->proc.reset_query = 0;
 8008e9a:	f365 0141 	bfi	r1, r5, #1, #1
        indev->proc.last_obj = NULL;
 8008e9e:	6265      	str	r5, [r4, #36]	; 0x24
        indev->proc.drag_in_prog = 0;
 8008ea0:	f365 0241 	bfi	r2, r5, #1, #1
 8008ea4:	b2cb      	uxtb	r3, r1
        indev->proc.reset_query = 0;
 8008ea6:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
        indev->proc.pr_timestamp = 0;
 8008eaa:	62e5      	str	r5, [r4, #44]	; 0x2c
        indev->proc.longpr_rep_timestamp = 0;
 8008eac:	6325      	str	r5, [r4, #48]	; 0x30
        indev->proc.drag_sum.x = 0;
 8008eae:	83a5      	strh	r5, [r4, #28]
        indev->proc.drag_sum.y = 0;
 8008eb0:	83e5      	strh	r5, [r4, #30]
        indev->proc.drag_in_prog = 0;
 8008eb2:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
 8008eb6:	e711      	b.n	8008cdc <indev_proc_task+0x24>
            i->proc.last_state == LV_INDEV_STATE_REL) {
 8008eb8:	7c23      	ldrb	r3, [r4, #16]
    if(data->state == LV_INDEV_STATE_PR &&
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	f000 809e 	beq.w	8008ffc <indev_proc_task+0x344>
    else if(data->state == LV_INDEV_STATE_PR && i->proc.last_state == LV_INDEV_STATE_PR) {
 8008ec0:	2b01      	cmp	r3, #1
        if(data->key == LV_GROUP_KEY_ENTER &&
 8008ec2:	9901      	ldr	r1, [sp, #4]
    else if(data->state == LV_INDEV_STATE_PR && i->proc.last_state == LV_INDEV_STATE_PR) {
 8008ec4:	d197      	bne.n	8008df6 <indev_proc_task+0x13e>
        if(data->key == LV_GROUP_KEY_ENTER &&
 8008ec6:	290a      	cmp	r1, #10
                i->proc.long_pr_sent == 0 &&
 8008ec8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
        if(data->key == LV_GROUP_KEY_ENTER &&
 8008ecc:	d195      	bne.n	8008dfa <indev_proc_task+0x142>
 8008ece:	07d8      	lsls	r0, r3, #31
 8008ed0:	d493      	bmi.n	8008dfa <indev_proc_task+0x142>
                lv_tick_elaps(i->proc.pr_timestamp) > LV_INDEV_LONG_PRESS_TIME) {
 8008ed2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008ed4:	f009 fc32 	bl	801273c <lv_tick_elaps>
                i->proc.long_pr_sent == 0 &&
 8008ed8:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 8008edc:	f240 80dc 	bls.w	8009098 <indev_proc_task+0x3e0>
            lv_obj_t * focused = lv_group_get_focused(i->group);
 8008ee0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008ee2:	f7ff fac9 	bl	8008478 <lv_group_get_focused>
            if(focused) {
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	f000 80d6 	beq.w	8009098 <indev_proc_task+0x3e0>
                focused->signal_func(focused, LV_SIGNAL_LONG_PRESS, indev_act);
 8008eec:	6983      	ldr	r3, [r0, #24]
 8008eee:	210c      	movs	r1, #12
 8008ef0:	683a      	ldr	r2, [r7, #0]
 8008ef2:	4798      	blx	r3
                i->proc.long_pr_sent = 1;
 8008ef4:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008ef8:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8008efc:	f043 0301 	orr.w	r3, r3, #1
 8008f00:	9901      	ldr	r1, [sp, #4]
 8008f02:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8008f06:	e778      	b.n	8008dfa <indev_proc_task+0x142>
                for(s = 0; s < data->enc_diff; s++) lv_group_send_data(i->group, LV_GROUP_KEY_RIGHT);
 8008f08:	2113      	movs	r1, #19
 8008f0a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008f0c:	f7ff fa70 	bl	80083f0 <lv_group_send_data>
 8008f10:	f109 0901 	add.w	r9, r9, #1
 8008f14:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8008f18:	4599      	cmp	r9, r3
 8008f1a:	dbf5      	blt.n	8008f08 <indev_proc_task+0x250>
 8008f1c:	e7a7      	b.n	8008e6e <indev_proc_task+0x1b6>
                for(s = 0; s < -data->enc_diff; s++) lv_group_send_data(i->group, LV_GROUP_KEY_LEFT);
 8008f1e:	2114      	movs	r1, #20
 8008f20:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008f22:	f7ff fa65 	bl	80083f0 <lv_group_send_data>
 8008f26:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8008f2a:	f109 0901 	add.w	r9, r9, #1
 8008f2e:	425b      	negs	r3, r3
 8008f30:	4599      	cmp	r9, r3
 8008f32:	dbf4      	blt.n	8008f1e <indev_proc_task+0x266>
 8008f34:	e79b      	b.n	8008e6e <indev_proc_task+0x1b6>
            if(data->enc_diff < 0) {
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	f2c0 8093 	blt.w	8009062 <indev_proc_task+0x3aa>
                for(s = 0; s < data->enc_diff; s++) lv_group_focus_next(i->group);
 8008f3c:	d097      	beq.n	8008e6e <indev_proc_task+0x1b6>
 8008f3e:	4681      	mov	r9, r0
 8008f40:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008f42:	f109 0901 	add.w	r9, r9, #1
 8008f46:	f7ff f9df 	bl	8008308 <lv_group_focus_next>
 8008f4a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8008f4e:	4599      	cmp	r9, r3
 8008f50:	dbf6      	blt.n	8008f40 <indev_proc_task+0x288>
 8008f52:	e78c      	b.n	8008e6e <indev_proc_task+0x1b6>
        data->key = i->proc.last_key;
 8008f54:	6961      	ldr	r1, [r4, #20]
        if(data->key == LV_GROUP_KEY_NEXT || data->key == LV_GROUP_KEY_PREV) {
 8008f56:	f021 0302 	bic.w	r3, r1, #2
        data->key = i->proc.last_key;
 8008f5a:	9101      	str	r1, [sp, #4]
        if(data->key == LV_GROUP_KEY_NEXT || data->key == LV_GROUP_KEY_PREV) {
 8008f5c:	2b09      	cmp	r3, #9
 8008f5e:	d074      	beq.n	800904a <indev_proc_task+0x392>
        if(data->key == LV_GROUP_KEY_NEXT) {
 8008f60:	2909      	cmp	r1, #9
 8008f62:	d078      	beq.n	8009056 <indev_proc_task+0x39e>
        } else if(data->key == LV_GROUP_KEY_PREV) {
 8008f64:	290b      	cmp	r1, #11
 8008f66:	f000 80a6 	beq.w	80090b6 <indev_proc_task+0x3fe>
        } else if(data->key == LV_GROUP_KEY_ENTER) {
 8008f6a:	290a      	cmp	r1, #10
 8008f6c:	d041      	beq.n	8008ff2 <indev_proc_task+0x33a>
            lv_group_send_data(i->group, data->key);
 8008f6e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008f70:	f7ff fa3e 	bl	80083f0 <lv_group_send_data>
 8008f74:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
        if(i->proc.reset_query) return;     /*The object might be deleted in `focus_cb` or due to any other user event*/
 8008f78:	f013 0302 	ands.w	r3, r3, #2
 8008f7c:	f47f aedc 	bne.w	8008d38 <indev_proc_task+0x80>
        i->proc.long_pr_sent = 0;
 8008f80:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
        i->proc.pr_timestamp = 0;
 8008f84:	62e3      	str	r3, [r4, #44]	; 0x2c
        i->proc.long_pr_sent = 0;
 8008f86:	f363 0000 	bfi	r0, r3, #0, #1
 8008f8a:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8008f8e:	9901      	ldr	r1, [sp, #4]
 8008f90:	b2c3      	uxtb	r3, r0
 8008f92:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
 8008f96:	e730      	b.n	8008dfa <indev_proc_task+0x142>
 8008f98:	20000cac 	.word	0x20000cac
        lv_obj_t * focused = lv_group_get_focused(i->group);
 8008f9c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008f9e:	f7ff fa6b 	bl	8008478 <lv_group_get_focused>
        bool editable = false;
 8008fa2:	f88d 9003 	strb.w	r9, [sp, #3]
        if(focused) focused->signal_func(focused, LV_SIGNAL_GET_EDITABLE, &editable);
 8008fa6:	2800      	cmp	r0, #0
 8008fa8:	d07c      	beq.n	80090a4 <indev_proc_task+0x3ec>
 8008faa:	6983      	ldr	r3, [r0, #24]
 8008fac:	f10d 0203 	add.w	r2, sp, #3
 8008fb0:	2114      	movs	r1, #20
 8008fb2:	4798      	blx	r3
        if(!editable) {
 8008fb4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d073      	beq.n	80090a4 <indev_proc_task+0x3ec>
        else if(i->group->editing) {
 8008fbc:	f8d4 9040 	ldr.w	r9, [r4, #64]	; 0x40
 8008fc0:	f899 3064 	ldrb.w	r3, [r9, #100]	; 0x64
 8008fc4:	f013 0f02 	tst.w	r3, #2
            if(!i->proc.long_pr_sent || i->group->obj_ll.head == i->group->obj_ll.tail)
 8008fc8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
        else if(i->group->editing) {
 8008fcc:	d155      	bne.n	800907a <indev_proc_task+0x3c2>
        else if(editable && !i->group->editing && !i->proc.long_pr_sent) {
 8008fce:	07da      	lsls	r2, r3, #31
 8008fd0:	f140 80aa 	bpl.w	8009128 <indev_proc_task+0x470>
        if(i->proc.reset_query) return;     /*The object might be deleted in `focus_cb` or due to any other user event*/
 8008fd4:	f013 0202 	ands.w	r2, r3, #2
 8008fd8:	f47f aeae 	bne.w	8008d38 <indev_proc_task+0x80>
        i->proc.long_pr_sent = 0;
 8008fdc:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
        i->proc.pr_timestamp = 0;
 8008fe0:	62e2      	str	r2, [r4, #44]	; 0x2c
        i->proc.long_pr_sent = 0;
 8008fe2:	f362 0300 	bfi	r3, r2, #0, #1
 8008fe6:	f89d 900c 	ldrb.w	r9, [sp, #12]
 8008fea:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	e71f      	b.n	8008e32 <indev_proc_task+0x17a>
            if(!i->proc.long_pr_sent) {
 8008ff2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008ff6:	07d8      	lsls	r0, r3, #31
 8008ff8:	d4be      	bmi.n	8008f78 <indev_proc_task+0x2c0>
 8008ffa:	e7b8      	b.n	8008f6e <indev_proc_task+0x2b6>
        i->proc.pr_timestamp = lv_tick_get();
 8008ffc:	f009 fb94 	bl	8012728 <lv_tick_get>
 8009000:	62e0      	str	r0, [r4, #44]	; 0x2c
        lv_obj_t * focused = lv_group_get_focused(i->group);
 8009002:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8009004:	f7ff fa38 	bl	8008478 <lv_group_get_focused>
        if(focused && data->key == LV_GROUP_KEY_ENTER) {
 8009008:	2800      	cmp	r0, #0
 800900a:	d045      	beq.n	8009098 <indev_proc_task+0x3e0>
 800900c:	9901      	ldr	r1, [sp, #4]
 800900e:	290a      	cmp	r1, #10
 8009010:	d057      	beq.n	80090c2 <indev_proc_task+0x40a>
 8009012:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8009016:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800901a:	e6ee      	b.n	8008dfa <indev_proc_task+0x142>
        i->proc.pr_timestamp = lv_tick_get();
 800901c:	f009 fb84 	bl	8012728 <lv_tick_get>
 8009020:	f89d 900c 	ldrb.w	r9, [sp, #12]
 8009024:	62e0      	str	r0, [r4, #44]	; 0x2c
 8009026:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800902a:	e702      	b.n	8008e32 <indev_proc_task+0x17a>
        if(i->proc.long_pr_sent == 0 &&
 800902c:	f013 0a01 	ands.w	sl, r3, #1
 8009030:	f47f aeff 	bne.w	8008e32 <indev_proc_task+0x17a>
                lv_tick_elaps(i->proc.pr_timestamp) > LV_INDEV_LONG_PRESS_TIME) {
 8009034:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009036:	f009 fb81 	bl	801273c <lv_tick_elaps>
        if(i->proc.long_pr_sent == 0 &&
 800903a:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 800903e:	d84a      	bhi.n	80090d6 <indev_proc_task+0x41e>
 8009040:	f89d 900c 	ldrb.w	r9, [sp, #12]
 8009044:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8009048:	e6f3      	b.n	8008e32 <indev_proc_task+0x17a>
            lv_group_set_editing(i->group, false);
 800904a:	4611      	mov	r1, r2
 800904c:	f7ff f9e4 	bl	8008418 <lv_group_set_editing>
 8009050:	9901      	ldr	r1, [sp, #4]
        if(data->key == LV_GROUP_KEY_NEXT) {
 8009052:	2909      	cmp	r1, #9
 8009054:	d186      	bne.n	8008f64 <indev_proc_task+0x2ac>
            lv_group_focus_next(i->group);
 8009056:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8009058:	f7ff f956 	bl	8008308 <lv_group_focus_next>
 800905c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8009060:	e78a      	b.n	8008f78 <indev_proc_task+0x2c0>
            if(data->enc_diff < 0) {
 8009062:	4681      	mov	r9, r0
                for(s = 0; s < -data->enc_diff; s++) lv_group_focus_prev(i->group);
 8009064:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8009066:	f109 0901 	add.w	r9, r9, #1
 800906a:	f7ff f987 	bl	800837c <lv_group_focus_prev>
 800906e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8009072:	425b      	negs	r3, r3
 8009074:	4599      	cmp	r9, r3
 8009076:	dbf5      	blt.n	8009064 <indev_proc_task+0x3ac>
 8009078:	e6f9      	b.n	8008e6e <indev_proc_task+0x1b6>
            if(!i->proc.long_pr_sent || i->group->obj_ll.head == i->group->obj_ll.tail)
 800907a:	07d9      	lsls	r1, r3, #31
 800907c:	d505      	bpl.n	800908a <indev_proc_task+0x3d2>
 800907e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009082:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8009086:	4291      	cmp	r1, r2
 8009088:	d1a4      	bne.n	8008fd4 <indev_proc_task+0x31c>
                lv_group_send_data(i->group, LV_GROUP_KEY_ENTER);  /*Ignore long pressed enter release because it comes from mode switch*/
 800908a:	4648      	mov	r0, r9
 800908c:	210a      	movs	r1, #10
 800908e:	f7ff f9af 	bl	80083f0 <lv_group_send_data>
 8009092:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8009096:	e79d      	b.n	8008fd4 <indev_proc_task+0x31c>
 8009098:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800909c:	9901      	ldr	r1, [sp, #4]
 800909e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80090a2:	e6aa      	b.n	8008dfa <indev_proc_task+0x142>
            lv_group_send_data(i->group, LV_GROUP_KEY_ENTER);
 80090a4:	210a      	movs	r1, #10
 80090a6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80090a8:	f7ff f9a2 	bl	80083f0 <lv_group_send_data>
 80090ac:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80090b0:	e790      	b.n	8008fd4 <indev_proc_task+0x31c>
 80090b2:	4f27      	ldr	r7, [pc, #156]	; (8009150 <indev_proc_task+0x498>)
 80090b4:	e63b      	b.n	8008d2e <indev_proc_task+0x76>
            lv_group_focus_prev(i->group);
 80090b6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80090b8:	f7ff f960 	bl	800837c <lv_group_focus_prev>
 80090bc:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80090c0:	e75a      	b.n	8008f78 <indev_proc_task+0x2c0>
            focused->signal_func(focused, LV_SIGNAL_PRESSED, indev_act);
 80090c2:	6983      	ldr	r3, [r0, #24]
 80090c4:	2108      	movs	r1, #8
 80090c6:	683a      	ldr	r2, [r7, #0]
 80090c8:	4798      	blx	r3
 80090ca:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80090ce:	9901      	ldr	r1, [sp, #4]
 80090d0:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80090d4:	e691      	b.n	8008dfa <indev_proc_task+0x142>
            lv_obj_t * focused = lv_group_get_focused(i->group);
 80090d6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80090d8:	f7ff f9ce 	bl	8008478 <lv_group_get_focused>
            bool editable = false;
 80090dc:	f88d a003 	strb.w	sl, [sp, #3]
            if(focused) focused->signal_func(focused, LV_SIGNAL_GET_EDITABLE, &editable);
 80090e0:	4681      	mov	r9, r0
 80090e2:	b1c0      	cbz	r0, 8009116 <indev_proc_task+0x45e>
 80090e4:	6983      	ldr	r3, [r0, #24]
 80090e6:	f10d 0203 	add.w	r2, sp, #3
 80090ea:	2114      	movs	r1, #20
 80090ec:	4798      	blx	r3
            if(editable) {
 80090ee:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80090f2:	b32b      	cbz	r3, 8009140 <indev_proc_task+0x488>
                if(i->group->obj_ll.head != i->group->obj_ll.tail)
 80090f4:	f8d4 a040 	ldr.w	sl, [r4, #64]	; 0x40
 80090f8:	f8da 2004 	ldr.w	r2, [sl, #4]
 80090fc:	f8da 3008 	ldr.w	r3, [sl, #8]
 8009100:	429a      	cmp	r2, r3
 8009102:	d01d      	beq.n	8009140 <indev_proc_task+0x488>
                    lv_group_set_editing(i->group, lv_group_get_editing(i->group) ? false : true);  /*Toggle edit mode on long press*/
 8009104:	4650      	mov	r0, sl
 8009106:	f7ff f9bd 	bl	8008484 <lv_group_get_editing>
 800910a:	f080 0101 	eor.w	r1, r0, #1
 800910e:	4650      	mov	r0, sl
 8009110:	b2c9      	uxtb	r1, r1
 8009112:	f7ff f981 	bl	8008418 <lv_group_set_editing>
            i->proc.long_pr_sent = 1;
 8009116:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800911a:	f89d 900c 	ldrb.w	r9, [sp, #12]
 800911e:	f043 0301 	orr.w	r3, r3, #1
 8009122:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8009126:	e684      	b.n	8008e32 <indev_proc_task+0x17a>
            lv_group_set_editing(i->group, lv_group_get_editing(i->group) ? false : true);  /*Toggle edit mode on long press*/
 8009128:	4648      	mov	r0, r9
 800912a:	f7ff f9ab 	bl	8008484 <lv_group_get_editing>
 800912e:	f080 0101 	eor.w	r1, r0, #1
 8009132:	4648      	mov	r0, r9
 8009134:	b2c9      	uxtb	r1, r1
 8009136:	f7ff f96f 	bl	8008418 <lv_group_set_editing>
 800913a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800913e:	e749      	b.n	8008fd4 <indev_proc_task+0x31c>
                    focused->signal_func(focused, LV_SIGNAL_LONG_PRESS, indev_act);
 8009140:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8009144:	4648      	mov	r0, r9
 8009146:	683a      	ldr	r2, [r7, #0]
 8009148:	210c      	movs	r1, #12
 800914a:	4798      	blx	r3
 800914c:	e7e3      	b.n	8009116 <indev_proc_task+0x45e>
 800914e:	bf00      	nop
 8009150:	20000cac 	.word	0x20000cac

08009154 <lv_indev_init>:
{
 8009154:	b508      	push	{r3, lr}
    lv_task_create(indev_proc_task, LV_INDEV_READ_PERIOD, LV_TASK_PRIO_MID, NULL);
 8009156:	2203      	movs	r2, #3
 8009158:	2300      	movs	r3, #0
 800915a:	2132      	movs	r1, #50	; 0x32
 800915c:	480a      	ldr	r0, [pc, #40]	; (8009188 <lv_indev_init+0x34>)
 800915e:	f00a fae1 	bl	8013724 <lv_task_create>
        lv_indev_t * i = lv_indev_next(NULL);
 8009162:	2000      	movs	r0, #0
 8009164:	f009 fac0 	bl	80126e8 <lv_indev_next>
        while(i) {
 8009168:	b160      	cbz	r0, 8009184 <lv_indev_init+0x30>
 800916a:	4603      	mov	r3, r0
            i->proc.reset_query = 1;
 800916c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
            i = lv_indev_next(i);
 8009170:	4618      	mov	r0, r3
            i->proc.reset_query = 1;
 8009172:	f042 0202 	orr.w	r2, r2, #2
 8009176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            i = lv_indev_next(i);
 800917a:	f009 fab5 	bl	80126e8 <lv_indev_next>
        while(i) {
 800917e:	4603      	mov	r3, r0
 8009180:	2800      	cmp	r0, #0
 8009182:	d1f3      	bne.n	800916c <lv_indev_init+0x18>
 8009184:	bd08      	pop	{r3, pc}
 8009186:	bf00      	nop
 8009188:	08008cb9 	.word	0x08008cb9

0800918c <lv_indev_get_act>:
    return indev_act;
 800918c:	4b01      	ldr	r3, [pc, #4]	; (8009194 <lv_indev_get_act+0x8>)
}
 800918e:	6818      	ldr	r0, [r3, #0]
 8009190:	4770      	bx	lr
 8009192:	bf00      	nop
 8009194:	20000cac 	.word	0x20000cac

08009198 <lv_indev_get_type>:
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
 8009198:	b100      	cbz	r0, 800919c <lv_indev_get_type+0x4>
    return indev->driver.type;
 800919a:	7800      	ldrb	r0, [r0, #0]
}
 800919c:	4770      	bx	lr
 800919e:	bf00      	nop

080091a0 <lv_indev_reset>:
{
 80091a0:	b508      	push	{r3, lr}
    if(indev) indev->proc.reset_query = 1;
 80091a2:	b168      	cbz	r0, 80091c0 <lv_indev_reset+0x20>
 80091a4:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80091a8:	f043 0302 	orr.w	r3, r3, #2
 80091ac:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
 80091b0:	bd08      	pop	{r3, pc}
            i->proc.reset_query = 1;
 80091b2:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
            i = lv_indev_next(i);
 80091b6:	4618      	mov	r0, r3
            i->proc.reset_query = 1;
 80091b8:	f042 0202 	orr.w	r2, r2, #2
 80091bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            i = lv_indev_next(i);
 80091c0:	f009 fa92 	bl	80126e8 <lv_indev_next>
        while(i) {
 80091c4:	4603      	mov	r3, r0
 80091c6:	2800      	cmp	r0, #0
 80091c8:	d1f3      	bne.n	80091b2 <lv_indev_reset+0x12>
 80091ca:	bd08      	pop	{r3, pc}

080091cc <lv_indev_reset_lpr>:
    indev->proc.long_pr_sent = 0;
 80091cc:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80091d0:	f36f 0300 	bfc	r3, #0, #1
{
 80091d4:	b510      	push	{r4, lr}
 80091d6:	4604      	mov	r4, r0
    indev->proc.long_pr_sent = 0;
 80091d8:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    indev->proc.longpr_rep_timestamp = lv_tick_get();
 80091dc:	f009 faa4 	bl	8012728 <lv_tick_get>
 80091e0:	6320      	str	r0, [r4, #48]	; 0x30
    indev->proc.pr_timestamp = lv_tick_get();
 80091e2:	f009 faa1 	bl	8012728 <lv_tick_get>
 80091e6:	62e0      	str	r0, [r4, #44]	; 0x2c
 80091e8:	bd10      	pop	{r4, pc}
 80091ea:	bf00      	nop

080091ec <lv_indev_get_point>:
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) {
 80091ec:	7803      	ldrb	r3, [r0, #0]
 80091ee:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d106      	bne.n	8009204 <lv_indev_get_point+0x18>
        point->x = indev->proc.act_point.x;
 80091f6:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
        point->y = indev->proc.act_point.y;
 80091fa:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
 80091fe:	800a      	strh	r2, [r1, #0]
 8009200:	804b      	strh	r3, [r1, #2]
 8009202:	4770      	bx	lr
        point->y = -1;
 8009204:	f04f 33ff 	mov.w	r3, #4294967295
        point->x = -1;
 8009208:	461a      	mov	r2, r3
 800920a:	804b      	strh	r3, [r1, #2]
 800920c:	800a      	strh	r2, [r1, #0]
 800920e:	4770      	bx	lr

08009210 <lv_indev_is_dragging>:
    if(indev == NULL) return false;
 8009210:	b150      	cbz	r0, 8009228 <lv_indev_is_dragging+0x18>
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) return false;
 8009212:	7803      	ldrb	r3, [r0, #0]
 8009214:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8009218:	2b01      	cmp	r3, #1
 800921a:	d104      	bne.n	8009226 <lv_indev_is_dragging+0x16>
    return indev->proc.drag_in_prog == 0 ? false : true;
 800921c:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
 8009220:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8009224:	4770      	bx	lr
    if(indev == NULL) return false;
 8009226:	2000      	movs	r0, #0
}
 8009228:	4770      	bx	lr
 800922a:	bf00      	nop

0800922c <lv_indev_get_vect>:
    if(indev == NULL) {
 800922c:	b138      	cbz	r0, 800923e <lv_indev_get_vect+0x12>
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) {
 800922e:	7803      	ldrb	r3, [r0, #0]
 8009230:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8009234:	2b01      	cmp	r3, #1
 8009236:	d102      	bne.n	800923e <lv_indev_get_vect+0x12>
        point->x = indev->proc.vect.x;
 8009238:	6983      	ldr	r3, [r0, #24]
 800923a:	600b      	str	r3, [r1, #0]
 800923c:	4770      	bx	lr
        point->x = 0;
 800923e:	2300      	movs	r3, #0
 8009240:	600b      	str	r3, [r1, #0]
        return;
 8009242:	4770      	bx	lr

08009244 <delete_children>:
/**
 * Called by 'lv_obj_del' to delete the children objects
 * @param obj pointer to an object (all of its children will be deleted)
 */
static void delete_children(lv_obj_t * obj)
{
 8009244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_obj_t * i;
    lv_obj_t * i_next;
    i = lv_ll_get_head(&(obj->child_ll));
 8009246:	1d07      	adds	r7, r0, #4
{
 8009248:	4605      	mov	r5, r0
    i = lv_ll_get_head(&(obj->child_ll));
 800924a:	4638      	mov	r0, r7
 800924c:	f009 ffa0 	bl	8013190 <lv_ll_get_head>

    /*Remove from the group; remove before transversing children so that 
     * the object still has access to all children during the 
     * LV_SIGNAL_DEFOCUS call*/
#if USE_LV_GROUP
    if(obj->group_p != NULL) lv_group_remove_obj(obj);
 8009250:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    i = lv_ll_get_head(&(obj->child_ll));
 8009252:	4604      	mov	r4, r0
    if(obj->group_p != NULL) lv_group_remove_obj(obj);
 8009254:	b113      	cbz	r3, 800925c <delete_children+0x18>
 8009256:	4628      	mov	r0, r5
 8009258:	f7fe ffb2 	bl	80081c0 <lv_group_remove_obj>
#endif

    while(i != NULL) {
 800925c:	b154      	cbz	r4, 8009274 <delete_children+0x30>
        /*Get the next object before delete this*/
        i_next = lv_ll_get_next(&(obj->child_ll), i);
 800925e:	4621      	mov	r1, r4
 8009260:	4638      	mov	r0, r7
 8009262:	f009 ff9d 	bl	80131a0 <lv_ll_get_next>
 8009266:	4606      	mov	r6, r0

        /*Call the recursive del to the child too*/
        delete_children(i);
 8009268:	4620      	mov	r0, r4
    while(i != NULL) {
 800926a:	4634      	mov	r4, r6
        delete_children(i);
 800926c:	f7ff ffea 	bl	8009244 <delete_children>
    while(i != NULL) {
 8009270:	2c00      	cmp	r4, #0
 8009272:	d1f4      	bne.n	800925e <delete_children+0x1a>
        i = i_next;
    }

    /*Remove the animations from this object*/
#if USE_LV_ANIMATION
    lv_anim_del(obj, NULL);
 8009274:	2100      	movs	r1, #0
 8009276:	4628      	mov	r0, r5
 8009278:	f009 fb78 	bl	801296c <lv_anim_del>
#endif


    /* Reset the input devices if
     * the currently pressed object is deleted*/
    lv_indev_t * indev = lv_indev_next(NULL);
 800927c:	2000      	movs	r0, #0
 800927e:	f009 fa33 	bl	80126e8 <lv_indev_next>
    while(indev) {
 8009282:	4604      	mov	r4, r0
 8009284:	b928      	cbnz	r0, 8009292 <delete_children+0x4e>
 8009286:	e013      	b.n	80092b0 <delete_children+0x6c>
        if(indev->proc.act_obj == obj || indev->proc.last_obj == obj) {
            lv_indev_reset(indev);
        }
        indev = lv_indev_next(indev);
 8009288:	4620      	mov	r0, r4
 800928a:	f009 fa2d 	bl	80126e8 <lv_indev_next>
    while(indev) {
 800928e:	4604      	mov	r4, r0
 8009290:	b170      	cbz	r0, 80092b0 <delete_children+0x6c>
        if(indev->proc.act_obj == obj || indev->proc.last_obj == obj) {
 8009292:	6a23      	ldr	r3, [r4, #32]
 8009294:	429d      	cmp	r5, r3
 8009296:	d002      	beq.n	800929e <delete_children+0x5a>
 8009298:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800929a:	429d      	cmp	r5, r3
 800929c:	d1f4      	bne.n	8009288 <delete_children+0x44>
            lv_indev_reset(indev);
 800929e:	4620      	mov	r0, r4
 80092a0:	f7ff ff7e 	bl	80091a0 <lv_indev_reset>
        indev = lv_indev_next(indev);
 80092a4:	4620      	mov	r0, r4
 80092a6:	f009 fa1f 	bl	80126e8 <lv_indev_next>
    while(indev) {
 80092aa:	4604      	mov	r4, r0
 80092ac:	2800      	cmp	r0, #0
 80092ae:	d1f0      	bne.n	8009292 <delete_children+0x4e>
    }

    /*Remove the object from parent's children list*/
    lv_obj_t * par = lv_obj_get_parent(obj);
    lv_ll_rem(&(par->child_ll), obj);
 80092b0:	6828      	ldr	r0, [r5, #0]
 80092b2:	4629      	mov	r1, r5
 80092b4:	3004      	adds	r0, #4
 80092b6:	f009 fe9f 	bl	8012ff8 <lv_ll_rem>

    /* Clean up the object specific data*/
    obj->signal_func(obj, LV_SIGNAL_CLEANUP, NULL);
 80092ba:	2200      	movs	r2, #0
 80092bc:	69ab      	ldr	r3, [r5, #24]
 80092be:	4628      	mov	r0, r5
 80092c0:	4611      	mov	r1, r2
 80092c2:	4798      	blx	r3

    /*Delete the base objects*/
    if(obj->ext_attr != NULL)  lv_mem_free(obj->ext_attr);
 80092c4:	6a28      	ldr	r0, [r5, #32]
 80092c6:	b108      	cbz	r0, 80092cc <delete_children+0x88>
 80092c8:	f009 ffd0 	bl	801326c <lv_mem_free>
    lv_mem_free(obj); /*Free the object itself*/
 80092cc:	4628      	mov	r0, r5

}
 80092ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_mem_free(obj); /*Free the object itself*/
 80092d2:	f009 bfcb 	b.w	801326c <lv_mem_free>
 80092d6:	bf00      	nop

080092d8 <refresh_children_position>:
    LL_READ(obj->child_ll, i) {
 80092d8:	1d03      	adds	r3, r0, #4
{
 80092da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092de:	b08f      	sub	sp, #60	; 0x3c
    LL_READ(obj->child_ll, i) {
 80092e0:	4618      	mov	r0, r3
{
 80092e2:	4688      	mov	r8, r1
 80092e4:	4692      	mov	sl, r2
    LL_READ(obj->child_ll, i) {
 80092e6:	9308      	str	r3, [sp, #32]
 80092e8:	f009 ff52 	bl	8013190 <lv_ll_get_head>
 80092ec:	9002      	str	r0, [sp, #8]
 80092ee:	2800      	cmp	r0, #0
 80092f0:	f000 8120 	beq.w	8009534 <refresh_children_position+0x25c>
 80092f4:	fa1f fb88 	uxth.w	fp, r8
 80092f8:	4653      	mov	r3, sl
 80092fa:	fa1f f98a 	uxth.w	r9, sl
 80092fe:	46ca      	mov	sl, r9
 8009300:	46d9      	mov	r9, fp
 8009302:	46c3      	mov	fp, r8
 8009304:	4698      	mov	r8, r3
        i->coords.x1 += x_diff;
 8009306:	9d02      	ldr	r5, [sp, #8]
 8009308:	462b      	mov	r3, r5
 800930a:	8a28      	ldrh	r0, [r5, #16]
        i->coords.y1 += y_diff;
 800930c:	8a69      	ldrh	r1, [r5, #18]
    LL_READ(obj->child_ll, i) {
 800930e:	3304      	adds	r3, #4
        i->coords.x2 += x_diff;
 8009310:	8aaa      	ldrh	r2, [r5, #20]
        i->coords.x1 += x_diff;
 8009312:	4448      	add	r0, r9
        i->coords.y1 += y_diff;
 8009314:	4451      	add	r1, sl
    LL_READ(obj->child_ll, i) {
 8009316:	461e      	mov	r6, r3
 8009318:	9309      	str	r3, [sp, #36]	; 0x24
        i->coords.y2 += y_diff;
 800931a:	8aeb      	ldrh	r3, [r5, #22]
        i->coords.x2 += x_diff;
 800931c:	444a      	add	r2, r9
        i->coords.x1 += x_diff;
 800931e:	8228      	strh	r0, [r5, #16]
    LL_READ(obj->child_ll, i) {
 8009320:	4630      	mov	r0, r6
        i->coords.y2 += y_diff;
 8009322:	4453      	add	r3, sl
        i->coords.y1 += y_diff;
 8009324:	8269      	strh	r1, [r5, #18]
        i->coords.x2 += x_diff;
 8009326:	82aa      	strh	r2, [r5, #20]
        i->coords.y2 += y_diff;
 8009328:	82eb      	strh	r3, [r5, #22]
    LL_READ(obj->child_ll, i) {
 800932a:	f009 ff31 	bl	8013190 <lv_ll_get_head>
 800932e:	9003      	str	r0, [sp, #12]
 8009330:	2800      	cmp	r0, #0
 8009332:	f000 80f7 	beq.w	8009524 <refresh_children_position+0x24c>
        i->coords.x1 += x_diff;
 8009336:	9d03      	ldr	r5, [sp, #12]
 8009338:	462b      	mov	r3, r5
 800933a:	8a28      	ldrh	r0, [r5, #16]
        i->coords.y1 += y_diff;
 800933c:	8a69      	ldrh	r1, [r5, #18]
    LL_READ(obj->child_ll, i) {
 800933e:	3304      	adds	r3, #4
        i->coords.x2 += x_diff;
 8009340:	8aaa      	ldrh	r2, [r5, #20]
        i->coords.x1 += x_diff;
 8009342:	4448      	add	r0, r9
        i->coords.y1 += y_diff;
 8009344:	4451      	add	r1, sl
    LL_READ(obj->child_ll, i) {
 8009346:	461e      	mov	r6, r3
 8009348:	930a      	str	r3, [sp, #40]	; 0x28
        i->coords.y2 += y_diff;
 800934a:	8aeb      	ldrh	r3, [r5, #22]
        i->coords.x2 += x_diff;
 800934c:	444a      	add	r2, r9
        i->coords.x1 += x_diff;
 800934e:	8228      	strh	r0, [r5, #16]
    LL_READ(obj->child_ll, i) {
 8009350:	4630      	mov	r0, r6
        i->coords.y2 += y_diff;
 8009352:	4453      	add	r3, sl
        i->coords.y1 += y_diff;
 8009354:	8269      	strh	r1, [r5, #18]
        i->coords.x2 += x_diff;
 8009356:	82aa      	strh	r2, [r5, #20]
        i->coords.y2 += y_diff;
 8009358:	82eb      	strh	r3, [r5, #22]
    LL_READ(obj->child_ll, i) {
 800935a:	f009 ff19 	bl	8013190 <lv_ll_get_head>
 800935e:	9004      	str	r0, [sp, #16]
 8009360:	2800      	cmp	r0, #0
 8009362:	f000 80d7 	beq.w	8009514 <refresh_children_position+0x23c>
 8009366:	465b      	mov	r3, fp
 8009368:	46cb      	mov	fp, r9
 800936a:	46d1      	mov	r9, sl
 800936c:	469a      	mov	sl, r3
        i->coords.x1 += x_diff;
 800936e:	9d04      	ldr	r5, [sp, #16]
 8009370:	462b      	mov	r3, r5
 8009372:	8a28      	ldrh	r0, [r5, #16]
        i->coords.y1 += y_diff;
 8009374:	8a69      	ldrh	r1, [r5, #18]
    LL_READ(obj->child_ll, i) {
 8009376:	3304      	adds	r3, #4
        i->coords.x2 += x_diff;
 8009378:	8aaa      	ldrh	r2, [r5, #20]
        i->coords.x1 += x_diff;
 800937a:	4458      	add	r0, fp
        i->coords.y1 += y_diff;
 800937c:	4449      	add	r1, r9
    LL_READ(obj->child_ll, i) {
 800937e:	461e      	mov	r6, r3
 8009380:	930b      	str	r3, [sp, #44]	; 0x2c
        i->coords.y2 += y_diff;
 8009382:	8aeb      	ldrh	r3, [r5, #22]
        i->coords.x2 += x_diff;
 8009384:	445a      	add	r2, fp
        i->coords.x1 += x_diff;
 8009386:	8228      	strh	r0, [r5, #16]
    LL_READ(obj->child_ll, i) {
 8009388:	4630      	mov	r0, r6
        i->coords.y2 += y_diff;
 800938a:	444b      	add	r3, r9
        i->coords.y1 += y_diff;
 800938c:	8269      	strh	r1, [r5, #18]
        i->coords.x2 += x_diff;
 800938e:	82aa      	strh	r2, [r5, #20]
        i->coords.y2 += y_diff;
 8009390:	82eb      	strh	r3, [r5, #22]
    LL_READ(obj->child_ll, i) {
 8009392:	f009 fefd 	bl	8013190 <lv_ll_get_head>
 8009396:	9005      	str	r0, [sp, #20]
 8009398:	2800      	cmp	r0, #0
 800939a:	f000 80af 	beq.w	80094fc <refresh_children_position+0x224>
        i->coords.x1 += x_diff;
 800939e:	9d05      	ldr	r5, [sp, #20]
 80093a0:	462b      	mov	r3, r5
 80093a2:	8a28      	ldrh	r0, [r5, #16]
        i->coords.y1 += y_diff;
 80093a4:	8a69      	ldrh	r1, [r5, #18]
    LL_READ(obj->child_ll, i) {
 80093a6:	3304      	adds	r3, #4
        i->coords.x2 += x_diff;
 80093a8:	8aaa      	ldrh	r2, [r5, #20]
        i->coords.x1 += x_diff;
 80093aa:	4458      	add	r0, fp
        i->coords.y1 += y_diff;
 80093ac:	4449      	add	r1, r9
    LL_READ(obj->child_ll, i) {
 80093ae:	461e      	mov	r6, r3
 80093b0:	930c      	str	r3, [sp, #48]	; 0x30
        i->coords.y2 += y_diff;
 80093b2:	8aeb      	ldrh	r3, [r5, #22]
        i->coords.x2 += x_diff;
 80093b4:	445a      	add	r2, fp
        i->coords.x1 += x_diff;
 80093b6:	8228      	strh	r0, [r5, #16]
    LL_READ(obj->child_ll, i) {
 80093b8:	4630      	mov	r0, r6
        i->coords.y2 += y_diff;
 80093ba:	444b      	add	r3, r9
        i->coords.y1 += y_diff;
 80093bc:	8269      	strh	r1, [r5, #18]
        i->coords.x2 += x_diff;
 80093be:	82aa      	strh	r2, [r5, #20]
        i->coords.y2 += y_diff;
 80093c0:	82eb      	strh	r3, [r5, #22]
    LL_READ(obj->child_ll, i) {
 80093c2:	f009 fee5 	bl	8013190 <lv_ll_get_head>
 80093c6:	9006      	str	r0, [sp, #24]
 80093c8:	2800      	cmp	r0, #0
 80093ca:	f000 808f 	beq.w	80094ec <refresh_children_position+0x214>
        i->coords.x1 += x_diff;
 80093ce:	9d06      	ldr	r5, [sp, #24]
 80093d0:	462b      	mov	r3, r5
 80093d2:	8a28      	ldrh	r0, [r5, #16]
        i->coords.y1 += y_diff;
 80093d4:	8a69      	ldrh	r1, [r5, #18]
    LL_READ(obj->child_ll, i) {
 80093d6:	3304      	adds	r3, #4
        i->coords.x2 += x_diff;
 80093d8:	8aaa      	ldrh	r2, [r5, #20]
        i->coords.x1 += x_diff;
 80093da:	4458      	add	r0, fp
        i->coords.y1 += y_diff;
 80093dc:	4449      	add	r1, r9
    LL_READ(obj->child_ll, i) {
 80093de:	461e      	mov	r6, r3
 80093e0:	930d      	str	r3, [sp, #52]	; 0x34
        i->coords.y2 += y_diff;
 80093e2:	8aeb      	ldrh	r3, [r5, #22]
        i->coords.x2 += x_diff;
 80093e4:	445a      	add	r2, fp
        i->coords.x1 += x_diff;
 80093e6:	8228      	strh	r0, [r5, #16]
    LL_READ(obj->child_ll, i) {
 80093e8:	4630      	mov	r0, r6
        i->coords.y2 += y_diff;
 80093ea:	444b      	add	r3, r9
        i->coords.y1 += y_diff;
 80093ec:	8269      	strh	r1, [r5, #18]
        i->coords.x2 += x_diff;
 80093ee:	82aa      	strh	r2, [r5, #20]
        i->coords.y2 += y_diff;
 80093f0:	82eb      	strh	r3, [r5, #22]
    LL_READ(obj->child_ll, i) {
 80093f2:	f009 fecd 	bl	8013190 <lv_ll_get_head>
 80093f6:	9007      	str	r0, [sp, #28]
 80093f8:	2800      	cmp	r0, #0
 80093fa:	d06f      	beq.n	80094dc <refresh_children_position+0x204>
        i->coords.x1 += x_diff;
 80093fc:	9d07      	ldr	r5, [sp, #28]
 80093fe:	462b      	mov	r3, r5
 8009400:	8a28      	ldrh	r0, [r5, #16]
        i->coords.y1 += y_diff;
 8009402:	8a69      	ldrh	r1, [r5, #18]
    LL_READ(obj->child_ll, i) {
 8009404:	3304      	adds	r3, #4
        i->coords.x2 += x_diff;
 8009406:	8aaa      	ldrh	r2, [r5, #20]
        i->coords.x1 += x_diff;
 8009408:	4458      	add	r0, fp
        i->coords.y1 += y_diff;
 800940a:	4449      	add	r1, r9
    LL_READ(obj->child_ll, i) {
 800940c:	461e      	mov	r6, r3
 800940e:	9301      	str	r3, [sp, #4]
        i->coords.y2 += y_diff;
 8009410:	8aeb      	ldrh	r3, [r5, #22]
        i->coords.x2 += x_diff;
 8009412:	445a      	add	r2, fp
        i->coords.x1 += x_diff;
 8009414:	8228      	strh	r0, [r5, #16]
    LL_READ(obj->child_ll, i) {
 8009416:	4630      	mov	r0, r6
        i->coords.y2 += y_diff;
 8009418:	444b      	add	r3, r9
        i->coords.y1 += y_diff;
 800941a:	8269      	strh	r1, [r5, #18]
        i->coords.x2 += x_diff;
 800941c:	82aa      	strh	r2, [r5, #20]
        i->coords.y2 += y_diff;
 800941e:	82eb      	strh	r3, [r5, #22]
    LL_READ(obj->child_ll, i) {
 8009420:	f009 feb6 	bl	8013190 <lv_ll_get_head>
 8009424:	9000      	str	r0, [sp, #0]
 8009426:	2800      	cmp	r0, #0
 8009428:	d051      	beq.n	80094ce <refresh_children_position+0x1f6>
        i->coords.x1 += x_diff;
 800942a:	9a00      	ldr	r2, [sp, #0]
 800942c:	4613      	mov	r3, r2
 800942e:	8a10      	ldrh	r0, [r2, #16]
        i->coords.y1 += y_diff;
 8009430:	8a51      	ldrh	r1, [r2, #18]
        i->coords.x2 += x_diff;
 8009432:	4614      	mov	r4, r2
        i->coords.y2 += y_diff;
 8009434:	8adb      	ldrh	r3, [r3, #22]
    LL_READ(obj->child_ll, i) {
 8009436:	1d17      	adds	r7, r2, #4
        i->coords.x2 += x_diff;
 8009438:	8a92      	ldrh	r2, [r2, #20]
        i->coords.x1 += x_diff;
 800943a:	4458      	add	r0, fp
        i->coords.y1 += y_diff;
 800943c:	4449      	add	r1, r9
        i->coords.y2 += y_diff;
 800943e:	444b      	add	r3, r9
        i->coords.x2 += x_diff;
 8009440:	445a      	add	r2, fp
        i->coords.x1 += x_diff;
 8009442:	8220      	strh	r0, [r4, #16]
        i->coords.y1 += y_diff;
 8009444:	8261      	strh	r1, [r4, #18]
    LL_READ(obj->child_ll, i) {
 8009446:	4638      	mov	r0, r7
        i->coords.x2 += x_diff;
 8009448:	82a2      	strh	r2, [r4, #20]
        i->coords.y2 += y_diff;
 800944a:	82e3      	strh	r3, [r4, #22]
    LL_READ(obj->child_ll, i) {
 800944c:	f009 fea0 	bl	8013190 <lv_ll_get_head>
 8009450:	4605      	mov	r5, r0
 8009452:	2800      	cmp	r0, #0
 8009454:	d034      	beq.n	80094c0 <refresh_children_position+0x1e8>
        i->coords.x1 += x_diff;
 8009456:	8a28      	ldrh	r0, [r5, #16]
    LL_READ(obj->child_ll, i) {
 8009458:	1d2e      	adds	r6, r5, #4
        i->coords.y1 += y_diff;
 800945a:	8a69      	ldrh	r1, [r5, #18]
        i->coords.x2 += x_diff;
 800945c:	8aaa      	ldrh	r2, [r5, #20]
        i->coords.x1 += x_diff;
 800945e:	4458      	add	r0, fp
        i->coords.y2 += y_diff;
 8009460:	8aeb      	ldrh	r3, [r5, #22]
        i->coords.y1 += y_diff;
 8009462:	4449      	add	r1, r9
        i->coords.x2 += x_diff;
 8009464:	445a      	add	r2, fp
        i->coords.x1 += x_diff;
 8009466:	8228      	strh	r0, [r5, #16]
        i->coords.y2 += y_diff;
 8009468:	444b      	add	r3, r9
        i->coords.y1 += y_diff;
 800946a:	8269      	strh	r1, [r5, #18]
        i->coords.x2 += x_diff;
 800946c:	82aa      	strh	r2, [r5, #20]
    LL_READ(obj->child_ll, i) {
 800946e:	4630      	mov	r0, r6
        i->coords.y2 += y_diff;
 8009470:	82eb      	strh	r3, [r5, #22]
    LL_READ(obj->child_ll, i) {
 8009472:	f009 fe8d 	bl	8013190 <lv_ll_get_head>
 8009476:	4604      	mov	r4, r0
 8009478:	b1d8      	cbz	r0, 80094b2 <refresh_children_position+0x1da>
        i->coords.x1 += x_diff;
 800947a:	f8b4 c010 	ldrh.w	ip, [r4, #16]
        refresh_children_position(i, x_diff, y_diff);
 800947e:	4642      	mov	r2, r8
        i->coords.y1 += y_diff;
 8009480:	f8b4 e012 	ldrh.w	lr, [r4, #18]
        refresh_children_position(i, x_diff, y_diff);
 8009484:	4651      	mov	r1, sl
        i->coords.x2 += x_diff;
 8009486:	8aa0      	ldrh	r0, [r4, #20]
        i->coords.x1 += x_diff;
 8009488:	44dc      	add	ip, fp
        i->coords.y2 += y_diff;
 800948a:	8ae3      	ldrh	r3, [r4, #22]
        i->coords.y1 += y_diff;
 800948c:	44ce      	add	lr, r9
        i->coords.x2 += x_diff;
 800948e:	4458      	add	r0, fp
        i->coords.x1 += x_diff;
 8009490:	f8a4 c010 	strh.w	ip, [r4, #16]
        i->coords.y2 += y_diff;
 8009494:	444b      	add	r3, r9
        i->coords.y1 += y_diff;
 8009496:	f8a4 e012 	strh.w	lr, [r4, #18]
        i->coords.x2 += x_diff;
 800949a:	82a0      	strh	r0, [r4, #20]
        refresh_children_position(i, x_diff, y_diff);
 800949c:	4620      	mov	r0, r4
        i->coords.y2 += y_diff;
 800949e:	82e3      	strh	r3, [r4, #22]
        refresh_children_position(i, x_diff, y_diff);
 80094a0:	f7ff ff1a 	bl	80092d8 <refresh_children_position>
    LL_READ(obj->child_ll, i) {
 80094a4:	4621      	mov	r1, r4
 80094a6:	4630      	mov	r0, r6
 80094a8:	f009 fe7a 	bl	80131a0 <lv_ll_get_next>
 80094ac:	4604      	mov	r4, r0
 80094ae:	2800      	cmp	r0, #0
 80094b0:	d1e3      	bne.n	800947a <refresh_children_position+0x1a2>
 80094b2:	4629      	mov	r1, r5
 80094b4:	4638      	mov	r0, r7
 80094b6:	f009 fe73 	bl	80131a0 <lv_ll_get_next>
 80094ba:	4605      	mov	r5, r0
 80094bc:	2800      	cmp	r0, #0
 80094be:	d1ca      	bne.n	8009456 <refresh_children_position+0x17e>
 80094c0:	9900      	ldr	r1, [sp, #0]
 80094c2:	9801      	ldr	r0, [sp, #4]
 80094c4:	f009 fe6c 	bl	80131a0 <lv_ll_get_next>
 80094c8:	9000      	str	r0, [sp, #0]
 80094ca:	2800      	cmp	r0, #0
 80094cc:	d1ad      	bne.n	800942a <refresh_children_position+0x152>
 80094ce:	9907      	ldr	r1, [sp, #28]
 80094d0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80094d2:	f009 fe65 	bl	80131a0 <lv_ll_get_next>
 80094d6:	9007      	str	r0, [sp, #28]
 80094d8:	2800      	cmp	r0, #0
 80094da:	d18f      	bne.n	80093fc <refresh_children_position+0x124>
 80094dc:	9906      	ldr	r1, [sp, #24]
 80094de:	980c      	ldr	r0, [sp, #48]	; 0x30
 80094e0:	f009 fe5e 	bl	80131a0 <lv_ll_get_next>
 80094e4:	9006      	str	r0, [sp, #24]
 80094e6:	2800      	cmp	r0, #0
 80094e8:	f47f af71 	bne.w	80093ce <refresh_children_position+0xf6>
 80094ec:	9905      	ldr	r1, [sp, #20]
 80094ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80094f0:	f009 fe56 	bl	80131a0 <lv_ll_get_next>
 80094f4:	9005      	str	r0, [sp, #20]
 80094f6:	2800      	cmp	r0, #0
 80094f8:	f47f af51 	bne.w	800939e <refresh_children_position+0xc6>
 80094fc:	9904      	ldr	r1, [sp, #16]
 80094fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009500:	f009 fe4e 	bl	80131a0 <lv_ll_get_next>
 8009504:	9004      	str	r0, [sp, #16]
 8009506:	2800      	cmp	r0, #0
 8009508:	f47f af31 	bne.w	800936e <refresh_children_position+0x96>
 800950c:	4653      	mov	r3, sl
 800950e:	46ca      	mov	sl, r9
 8009510:	46d9      	mov	r9, fp
 8009512:	469b      	mov	fp, r3
 8009514:	9903      	ldr	r1, [sp, #12]
 8009516:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009518:	f009 fe42 	bl	80131a0 <lv_ll_get_next>
 800951c:	9003      	str	r0, [sp, #12]
 800951e:	2800      	cmp	r0, #0
 8009520:	f47f af09 	bne.w	8009336 <refresh_children_position+0x5e>
 8009524:	9902      	ldr	r1, [sp, #8]
 8009526:	9808      	ldr	r0, [sp, #32]
 8009528:	f009 fe3a 	bl	80131a0 <lv_ll_get_next>
 800952c:	9002      	str	r0, [sp, #8]
 800952e:	2800      	cmp	r0, #0
 8009530:	f47f aee9 	bne.w	8009306 <refresh_children_position+0x2e>
}
 8009534:	b00f      	add	sp, #60	; 0x3c
 8009536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800953a:	bf00      	nop

0800953c <refresh_children_style>:
{
 800953c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        result = lv_ll_get_head(&obj->child_ll);
 8009540:	1d05      	adds	r5, r0, #4
{
 8009542:	b082      	sub	sp, #8
        result = lv_ll_get_head(&obj->child_ll);
 8009544:	4628      	mov	r0, r5
 8009546:	f009 fe23 	bl	8013190 <lv_ll_get_head>
    while(child != NULL) {
 800954a:	b1d0      	cbz	r0, 8009582 <refresh_children_style+0x46>
 800954c:	4604      	mov	r4, r0
    return LV_GC_ROOT(_lv_act_scr);
 800954e:	4e5f      	ldr	r6, [pc, #380]	; (80096cc <refresh_children_style+0x190>)
    return LV_GC_ROOT(_lv_top_layer);
 8009550:	4f5f      	ldr	r7, [pc, #380]	; (80096d0 <refresh_children_style+0x194>)
    return LV_GC_ROOT(_lv_sys_layer);
 8009552:	f8df 8180 	ldr.w	r8, [pc, #384]	; 80096d4 <refresh_children_style+0x198>
 8009556:	e005      	b.n	8009564 <refresh_children_style+0x28>
        result = lv_ll_get_next(&obj->child_ll, child);
 8009558:	4621      	mov	r1, r4
 800955a:	4628      	mov	r0, r5
 800955c:	f009 fe20 	bl	80131a0 <lv_ll_get_next>
    while(child != NULL) {
 8009560:	4604      	mov	r4, r0
 8009562:	b170      	cbz	r0, 8009582 <refresh_children_style+0x46>
        if(child->style_p == NULL) {
 8009564:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009566:	b17b      	cbz	r3, 8009588 <refresh_children_style+0x4c>
        } else if(child->style_p->glass) {
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	07db      	lsls	r3, r3, #31
 800956c:	d5f4      	bpl.n	8009558 <refresh_children_style+0x1c>
            refresh_children_style(child);
 800956e:	4620      	mov	r0, r4
 8009570:	f7ff ffe4 	bl	800953c <refresh_children_style>
        result = lv_ll_get_next(&obj->child_ll, child);
 8009574:	4621      	mov	r1, r4
 8009576:	4628      	mov	r0, r5
 8009578:	f009 fe12 	bl	80131a0 <lv_ll_get_next>
    while(child != NULL) {
 800957c:	4604      	mov	r4, r0
 800957e:	2800      	cmp	r0, #0
 8009580:	d1f0      	bne.n	8009564 <refresh_children_style+0x28>
}
 8009582:	b002      	add	sp, #8
 8009584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            refresh_children_style(child);     /*Check children too*/
 8009588:	4620      	mov	r0, r4
 800958a:	f7ff ffd7 	bl	800953c <refresh_children_style>
    return obj->hidden == 0 ? false : true;
 800958e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    if(lv_obj_get_hidden(obj)) return;
 8009592:	06db      	lsls	r3, r3, #27
 8009594:	d40f      	bmi.n	80095b6 <refresh_children_style+0x7a>
 8009596:	4622      	mov	r2, r4
 8009598:	e000      	b.n	800959c <refresh_children_style+0x60>
    } while(par != NULL);
 800959a:	461a      	mov	r2, r3
    return obj->par;
 800959c:	6813      	ldr	r3, [r2, #0]
    } while(par != NULL);
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d1fb      	bne.n	800959a <refresh_children_style+0x5e>
    if(obj_scr == lv_scr_act() ||
 80095a2:	6833      	ldr	r3, [r6, #0]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d057      	beq.n	8009658 <refresh_children_style+0x11c>
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d054      	beq.n	8009658 <refresh_children_style+0x11c>
            obj_scr == lv_layer_top() ||
 80095ae:	f8d8 3000 	ldr.w	r3, [r8]
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d050      	beq.n	8009658 <refresh_children_style+0x11c>
    obj->signal_func(obj, LV_SIGNAL_STYLE_CHG, NULL);
 80095b6:	69a3      	ldr	r3, [r4, #24]
 80095b8:	2103      	movs	r1, #3
 80095ba:	2200      	movs	r2, #0
 80095bc:	4620      	mov	r0, r4
 80095be:	4798      	blx	r3
    return obj->hidden == 0 ? false : true;
 80095c0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    if(lv_obj_get_hidden(obj)) return;
 80095c4:	06d9      	lsls	r1, r3, #27
 80095c6:	d4c7      	bmi.n	8009558 <refresh_children_style+0x1c>
 80095c8:	4622      	mov	r2, r4
 80095ca:	e000      	b.n	80095ce <refresh_children_style+0x92>
    } while(par != NULL);
 80095cc:	461a      	mov	r2, r3
    return obj->par;
 80095ce:	6813      	ldr	r3, [r2, #0]
    } while(par != NULL);
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d1fb      	bne.n	80095cc <refresh_children_style+0x90>
    if(obj_scr == lv_scr_act() ||
 80095d4:	6833      	ldr	r3, [r6, #0]
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d006      	beq.n	80095e8 <refresh_children_style+0xac>
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	429a      	cmp	r2, r3
 80095de:	d003      	beq.n	80095e8 <refresh_children_style+0xac>
            obj_scr == lv_layer_top() ||
 80095e0:	f8d8 3000 	ldr.w	r3, [r8]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d1b7      	bne.n	8009558 <refresh_children_style+0x1c>
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    memcpy(dest, src, sizeof(lv_area_t));
 80095e8:	4621      	mov	r1, r4
        lv_coord_t ext_size = obj->ext_size;
 80095ea:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
 80095ee:	466a      	mov	r2, sp
    return obj->par;
 80095f0:	f8d4 9000 	ldr.w	r9, [r4]
 80095f4:	f851 0f10 	ldr.w	r0, [r1, #16]!
        area_trunc.x1 -= ext_size;
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	46ea      	mov	sl, sp
 80095fc:	6849      	ldr	r1, [r1, #4]
 80095fe:	c203      	stmia	r2!, {r0, r1}
 8009600:	f8bd 0000 	ldrh.w	r0, [sp]
        area_trunc.y1 -= ext_size;
 8009604:	f8bd 1002 	ldrh.w	r1, [sp, #2]
        area_trunc.x2 += ext_size;
 8009608:	f8bd 2004 	ldrh.w	r2, [sp, #4]
        area_trunc.x1 -= ext_size;
 800960c:	1ac0      	subs	r0, r0, r3
        area_trunc.y2 += ext_size;
 800960e:	f8bd e006 	ldrh.w	lr, [sp, #6]
        area_trunc.y1 -= ext_size;
 8009612:	1ac9      	subs	r1, r1, r3
        area_trunc.x2 += ext_size;
 8009614:	441a      	add	r2, r3
        area_trunc.x1 -= ext_size;
 8009616:	f8ad 0000 	strh.w	r0, [sp]
        area_trunc.y2 += ext_size;
 800961a:	4473      	add	r3, lr
        area_trunc.y1 -= ext_size;
 800961c:	f8ad 1002 	strh.w	r1, [sp, #2]
        area_trunc.x2 += ext_size;
 8009620:	f8ad 2004 	strh.w	r2, [sp, #4]
        area_trunc.y2 += ext_size;
 8009624:	f8ad 3006 	strh.w	r3, [sp, #6]
        while(par != NULL) {
 8009628:	f1b9 0f00 	cmp.w	r9, #0
 800962c:	d010      	beq.n	8009650 <refresh_children_style+0x114>
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 800962e:	f109 0210 	add.w	r2, r9, #16
 8009632:	4651      	mov	r1, sl
 8009634:	4650      	mov	r0, sl
 8009636:	f009 fa47 	bl	8012ac8 <lv_area_intersect>
            if(union_ok == false) break;        /*If no common parts with parent break;*/
 800963a:	2800      	cmp	r0, #0
 800963c:	d08c      	beq.n	8009558 <refresh_children_style+0x1c>
    return obj->hidden == 0 ? false : true;
 800963e:	f899 3030 	ldrb.w	r3, [r9, #48]	; 0x30
            if(lv_obj_get_hidden(par)) return;  /*If the parent is hidden then the child is hidden and won't be drawn*/
 8009642:	06da      	lsls	r2, r3, #27
 8009644:	d488      	bmi.n	8009558 <refresh_children_style+0x1c>
    return obj->par;
 8009646:	f8d9 9000 	ldr.w	r9, [r9]
        while(par != NULL) {
 800964a:	f1b9 0f00 	cmp.w	r9, #0
 800964e:	d1ee      	bne.n	800962e <refresh_children_style+0xf2>
        if(union_ok != false) lv_inv_area(&area_trunc);
 8009650:	4650      	mov	r0, sl
 8009652:	f002 fee1 	bl	800c418 <lv_inv_area>
 8009656:	e77f      	b.n	8009558 <refresh_children_style+0x1c>
 8009658:	4621      	mov	r1, r4
        lv_coord_t ext_size = obj->ext_size;
 800965a:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
 800965e:	466a      	mov	r2, sp
    return obj->par;
 8009660:	f8d4 9000 	ldr.w	r9, [r4]
 8009664:	f851 0f10 	ldr.w	r0, [r1, #16]!
        area_trunc.x1 -= ext_size;
 8009668:	b29b      	uxth	r3, r3
 800966a:	46ea      	mov	sl, sp
 800966c:	6849      	ldr	r1, [r1, #4]
 800966e:	c203      	stmia	r2!, {r0, r1}
 8009670:	f8bd 0000 	ldrh.w	r0, [sp]
        area_trunc.y1 -= ext_size;
 8009674:	f8bd 1002 	ldrh.w	r1, [sp, #2]
        area_trunc.x2 += ext_size;
 8009678:	f8bd 2004 	ldrh.w	r2, [sp, #4]
        area_trunc.x1 -= ext_size;
 800967c:	1ac0      	subs	r0, r0, r3
        area_trunc.y2 += ext_size;
 800967e:	f8bd e006 	ldrh.w	lr, [sp, #6]
        area_trunc.y1 -= ext_size;
 8009682:	1ac9      	subs	r1, r1, r3
        area_trunc.x2 += ext_size;
 8009684:	441a      	add	r2, r3
        area_trunc.x1 -= ext_size;
 8009686:	f8ad 0000 	strh.w	r0, [sp]
        area_trunc.y2 += ext_size;
 800968a:	4473      	add	r3, lr
        area_trunc.y1 -= ext_size;
 800968c:	f8ad 1002 	strh.w	r1, [sp, #2]
        area_trunc.x2 += ext_size;
 8009690:	f8ad 2004 	strh.w	r2, [sp, #4]
        area_trunc.y2 += ext_size;
 8009694:	f8ad 3006 	strh.w	r3, [sp, #6]
        while(par != NULL) {
 8009698:	f1b9 0f00 	cmp.w	r9, #0
 800969c:	d109      	bne.n	80096b2 <refresh_children_style+0x176>
 800969e:	e011      	b.n	80096c4 <refresh_children_style+0x188>
    return obj->hidden == 0 ? false : true;
 80096a0:	f899 3030 	ldrb.w	r3, [r9, #48]	; 0x30
            if(lv_obj_get_hidden(par)) return;  /*If the parent is hidden then the child is hidden and won't be drawn*/
 80096a4:	06d8      	lsls	r0, r3, #27
 80096a6:	d486      	bmi.n	80095b6 <refresh_children_style+0x7a>
    return obj->par;
 80096a8:	f8d9 9000 	ldr.w	r9, [r9]
        while(par != NULL) {
 80096ac:	f1b9 0f00 	cmp.w	r9, #0
 80096b0:	d008      	beq.n	80096c4 <refresh_children_style+0x188>
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 80096b2:	f109 0210 	add.w	r2, r9, #16
 80096b6:	4651      	mov	r1, sl
 80096b8:	4650      	mov	r0, sl
 80096ba:	f009 fa05 	bl	8012ac8 <lv_area_intersect>
            if(union_ok == false) break;        /*If no common parts with parent break;*/
 80096be:	2800      	cmp	r0, #0
 80096c0:	d1ee      	bne.n	80096a0 <refresh_children_style+0x164>
 80096c2:	e778      	b.n	80095b6 <refresh_children_style+0x7a>
        if(union_ok != false) lv_inv_area(&area_trunc);
 80096c4:	4650      	mov	r0, sl
 80096c6:	f002 fea7 	bl	800c418 <lv_inv_area>
 80096ca:	e774      	b.n	80095b6 <refresh_children_style+0x7a>
 80096cc:	200194b4 	.word	0x200194b4
 80096d0:	200194b0 	.word	0x200194b0
 80096d4:	200194d8 	.word	0x200194d8

080096d8 <lv_obj_set_y>:
{
 80096d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return obj->par;
 80096dc:	6807      	ldr	r7, [r0, #0]
{
 80096de:	b084      	sub	sp, #16
    diff.y =  y - obj->coords.y1;
 80096e0:	8a46      	ldrh	r6, [r0, #18]
 80096e2:	8a7d      	ldrh	r5, [r7, #18]
 80096e4:	1bad      	subs	r5, r5, r6
 80096e6:	440d      	add	r5, r1
 80096e8:	b2ad      	uxth	r5, r5
 80096ea:	fa0f f885 	sxth.w	r8, r5
    if(diff.x == 0 && diff.y == 0) return;
 80096ee:	f1b8 0f00 	cmp.w	r8, #0
 80096f2:	d102      	bne.n	80096fa <lv_obj_set_y+0x22>
}
 80096f4:	b004      	add	sp, #16
 80096f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return obj->hidden == 0 ? false : true;
 80096fa:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 80096fe:	4604      	mov	r4, r0
    if(lv_obj_get_hidden(obj)) return;
 8009700:	06d8      	lsls	r0, r3, #27
 8009702:	d411      	bmi.n	8009728 <lv_obj_set_y+0x50>
 8009704:	463a      	mov	r2, r7
 8009706:	e000      	b.n	800970a <lv_obj_set_y+0x32>
    } while(par != NULL);
 8009708:	461a      	mov	r2, r3
 800970a:	6813      	ldr	r3, [r2, #0]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d1fb      	bne.n	8009708 <lv_obj_set_y+0x30>
    return LV_GC_ROOT(_lv_act_scr);
 8009710:	4b52      	ldr	r3, [pc, #328]	; (800985c <lv_obj_set_y+0x184>)
    if(obj_scr == lv_scr_act() ||
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4293      	cmp	r3, r2
 8009716:	d06d      	beq.n	80097f4 <lv_obj_set_y+0x11c>
    return LV_GC_ROOT(_lv_top_layer);
 8009718:	4b51      	ldr	r3, [pc, #324]	; (8009860 <lv_obj_set_y+0x188>)
    if(obj_scr == lv_scr_act() ||
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4293      	cmp	r3, r2
 800971e:	d069      	beq.n	80097f4 <lv_obj_set_y+0x11c>
    return LV_GC_ROOT(_lv_sys_layer);
 8009720:	4b50      	ldr	r3, [pc, #320]	; (8009864 <lv_obj_set_y+0x18c>)
            obj_scr == lv_layer_top() ||
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4293      	cmp	r3, r2
 8009726:	d065      	beq.n	80097f4 <lv_obj_set_y+0x11c>
 8009728:	f104 0910 	add.w	r9, r4, #16
    obj->coords.y2 += diff.y;
 800972c:	8ae3      	ldrh	r3, [r4, #22]
    obj->coords.y1 += diff.y;
 800972e:	442e      	add	r6, r5
 8009730:	f8d9 0000 	ldr.w	r0, [r9]
    refresh_children_position(obj, diff.x, diff.y);
 8009734:	4642      	mov	r2, r8
 8009736:	f8d9 1004 	ldr.w	r1, [r9, #4]
    obj->coords.y2 += diff.y;
 800973a:	441d      	add	r5, r3
 800973c:	466b      	mov	r3, sp
    obj->coords.y1 += diff.y;
 800973e:	8266      	strh	r6, [r4, #18]
    obj->coords.y2 += diff.y;
 8009740:	82e5      	strh	r5, [r4, #22]
 8009742:	c303      	stmia	r3!, {r0, r1}
    refresh_children_position(obj, diff.x, diff.y);
 8009744:	2100      	movs	r1, #0
 8009746:	4620      	mov	r0, r4
 8009748:	f7ff fdc6 	bl	80092d8 <refresh_children_position>
    obj->signal_func(obj, LV_SIGNAL_CORD_CHG, &ori);
 800974c:	466a      	mov	r2, sp
 800974e:	69a3      	ldr	r3, [r4, #24]
 8009750:	2102      	movs	r1, #2
 8009752:	4620      	mov	r0, r4
 8009754:	4798      	blx	r3
    par->signal_func(par, LV_SIGNAL_CHILD_CHG, obj);
 8009756:	69bb      	ldr	r3, [r7, #24]
 8009758:	4622      	mov	r2, r4
 800975a:	4638      	mov	r0, r7
 800975c:	2101      	movs	r1, #1
 800975e:	4798      	blx	r3
    return obj->hidden == 0 ? false : true;
 8009760:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    if(lv_obj_get_hidden(obj)) return;
 8009764:	06da      	lsls	r2, r3, #27
 8009766:	d4c5      	bmi.n	80096f4 <lv_obj_set_y+0x1c>
 8009768:	4622      	mov	r2, r4
 800976a:	e000      	b.n	800976e <lv_obj_set_y+0x96>
    } while(par != NULL);
 800976c:	461a      	mov	r2, r3
    return obj->par;
 800976e:	6813      	ldr	r3, [r2, #0]
    } while(par != NULL);
 8009770:	2b00      	cmp	r3, #0
 8009772:	d1fb      	bne.n	800976c <lv_obj_set_y+0x94>
    return LV_GC_ROOT(_lv_act_scr);
 8009774:	4b39      	ldr	r3, [pc, #228]	; (800985c <lv_obj_set_y+0x184>)
    if(obj_scr == lv_scr_act() ||
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	429a      	cmp	r2, r3
 800977a:	d007      	beq.n	800978c <lv_obj_set_y+0xb4>
    return LV_GC_ROOT(_lv_top_layer);
 800977c:	4b38      	ldr	r3, [pc, #224]	; (8009860 <lv_obj_set_y+0x188>)
    if(obj_scr == lv_scr_act() ||
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	429a      	cmp	r2, r3
 8009782:	d003      	beq.n	800978c <lv_obj_set_y+0xb4>
    return LV_GC_ROOT(_lv_sys_layer);
 8009784:	4b37      	ldr	r3, [pc, #220]	; (8009864 <lv_obj_set_y+0x18c>)
            obj_scr == lv_layer_top() ||
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	429a      	cmp	r2, r3
 800978a:	d1b3      	bne.n	80096f4 <lv_obj_set_y+0x1c>
 800978c:	f10d 0a08 	add.w	sl, sp, #8
 8009790:	f8d9 0000 	ldr.w	r0, [r9]
 8009794:	f8d9 1004 	ldr.w	r1, [r9, #4]
        lv_coord_t ext_size = obj->ext_size;
 8009798:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
 800979c:	4652      	mov	r2, sl
    return obj->par;
 800979e:	6824      	ldr	r4, [r4, #0]
        area_trunc.x1 -= ext_size;
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	c203      	stmia	r2!, {r0, r1}
 80097a4:	f8bd 0008 	ldrh.w	r0, [sp, #8]
        area_trunc.y1 -= ext_size;
 80097a8:	f8bd 100a 	ldrh.w	r1, [sp, #10]
        area_trunc.x2 += ext_size;
 80097ac:	f8bd 200c 	ldrh.w	r2, [sp, #12]
        area_trunc.x1 -= ext_size;
 80097b0:	1ac0      	subs	r0, r0, r3
        area_trunc.y2 += ext_size;
 80097b2:	f8bd 500e 	ldrh.w	r5, [sp, #14]
        area_trunc.y1 -= ext_size;
 80097b6:	1ac9      	subs	r1, r1, r3
        area_trunc.x2 += ext_size;
 80097b8:	441a      	add	r2, r3
        area_trunc.x1 -= ext_size;
 80097ba:	f8ad 0008 	strh.w	r0, [sp, #8]
        area_trunc.y2 += ext_size;
 80097be:	442b      	add	r3, r5
        area_trunc.y1 -= ext_size;
 80097c0:	f8ad 100a 	strh.w	r1, [sp, #10]
        area_trunc.x2 += ext_size;
 80097c4:	f8ad 200c 	strh.w	r2, [sp, #12]
        area_trunc.y2 += ext_size;
 80097c8:	f8ad 300e 	strh.w	r3, [sp, #14]
        while(par != NULL) {
 80097cc:	b174      	cbz	r4, 80097ec <lv_obj_set_y+0x114>
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 80097ce:	f104 0210 	add.w	r2, r4, #16
 80097d2:	4651      	mov	r1, sl
 80097d4:	4650      	mov	r0, sl
 80097d6:	f009 f977 	bl	8012ac8 <lv_area_intersect>
            if(union_ok == false) break;        /*If no common parts with parent break;*/
 80097da:	2800      	cmp	r0, #0
 80097dc:	d08a      	beq.n	80096f4 <lv_obj_set_y+0x1c>
    return obj->hidden == 0 ? false : true;
 80097de:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
            if(lv_obj_get_hidden(par)) return;  /*If the parent is hidden then the child is hidden and won't be drawn*/
 80097e2:	06db      	lsls	r3, r3, #27
 80097e4:	d486      	bmi.n	80096f4 <lv_obj_set_y+0x1c>
    return obj->par;
 80097e6:	6824      	ldr	r4, [r4, #0]
        while(par != NULL) {
 80097e8:	2c00      	cmp	r4, #0
 80097ea:	d1f0      	bne.n	80097ce <lv_obj_set_y+0xf6>
        if(union_ok != false) lv_inv_area(&area_trunc);
 80097ec:	4650      	mov	r0, sl
 80097ee:	f002 fe13 	bl	800c418 <lv_inv_area>
 80097f2:	e77f      	b.n	80096f4 <lv_obj_set_y+0x1c>
        lv_area_copy(&area_trunc, &obj->coords);
 80097f4:	46a1      	mov	r9, r4
 80097f6:	f10d 0a08 	add.w	sl, sp, #8
        lv_coord_t ext_size = obj->ext_size;
 80097fa:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
        area_trunc.y2 += ext_size;
 80097fe:	463e      	mov	r6, r7
 8009800:	f859 0f10 	ldr.w	r0, [r9, #16]!
 8009804:	4652      	mov	r2, sl
        area_trunc.x1 -= ext_size;
 8009806:	b29b      	uxth	r3, r3
 8009808:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800980c:	c203      	stmia	r2!, {r0, r1}
 800980e:	f8bd 0008 	ldrh.w	r0, [sp, #8]
        area_trunc.y1 -= ext_size;
 8009812:	f8bd 100a 	ldrh.w	r1, [sp, #10]
        area_trunc.x2 += ext_size;
 8009816:	f8bd 200c 	ldrh.w	r2, [sp, #12]
        area_trunc.x1 -= ext_size;
 800981a:	1ac0      	subs	r0, r0, r3
        area_trunc.y2 += ext_size;
 800981c:	f8bd e00e 	ldrh.w	lr, [sp, #14]
        area_trunc.y1 -= ext_size;
 8009820:	1ac9      	subs	r1, r1, r3
        area_trunc.x2 += ext_size;
 8009822:	441a      	add	r2, r3
        area_trunc.x1 -= ext_size;
 8009824:	f8ad 0008 	strh.w	r0, [sp, #8]
        area_trunc.y2 += ext_size;
 8009828:	4473      	add	r3, lr
        area_trunc.y1 -= ext_size;
 800982a:	f8ad 100a 	strh.w	r1, [sp, #10]
        area_trunc.x2 += ext_size;
 800982e:	f8ad 200c 	strh.w	r2, [sp, #12]
        area_trunc.y2 += ext_size;
 8009832:	f8ad 300e 	strh.w	r3, [sp, #14]
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 8009836:	f106 0210 	add.w	r2, r6, #16
 800983a:	4651      	mov	r1, sl
 800983c:	4650      	mov	r0, sl
 800983e:	f009 f943 	bl	8012ac8 <lv_area_intersect>
            if(union_ok == false) break;        /*If no common parts with parent break;*/
 8009842:	b148      	cbz	r0, 8009858 <lv_obj_set_y+0x180>
    return obj->hidden == 0 ? false : true;
 8009844:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
            if(lv_obj_get_hidden(par)) return;  /*If the parent is hidden then the child is hidden and won't be drawn*/
 8009848:	06d9      	lsls	r1, r3, #27
 800984a:	d405      	bmi.n	8009858 <lv_obj_set_y+0x180>
    return obj->par;
 800984c:	6836      	ldr	r6, [r6, #0]
        while(par != NULL) {
 800984e:	2e00      	cmp	r6, #0
 8009850:	d1f1      	bne.n	8009836 <lv_obj_set_y+0x15e>
        if(union_ok != false) lv_inv_area(&area_trunc);
 8009852:	4650      	mov	r0, sl
 8009854:	f002 fde0 	bl	800c418 <lv_inv_area>
 8009858:	8a66      	ldrh	r6, [r4, #18]
 800985a:	e767      	b.n	800972c <lv_obj_set_y+0x54>
 800985c:	200194b4 	.word	0x200194b4
 8009860:	200194b0 	.word	0x200194b0
 8009864:	200194d8 	.word	0x200194d8

08009868 <lv_obj_set_x>:
{
 8009868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return obj->par;
 800986c:	6807      	ldr	r7, [r0, #0]
{
 800986e:	b084      	sub	sp, #16
    diff.x =  x - obj->coords.x1;
 8009870:	8a06      	ldrh	r6, [r0, #16]
 8009872:	8a3d      	ldrh	r5, [r7, #16]
 8009874:	1bad      	subs	r5, r5, r6
 8009876:	440d      	add	r5, r1
 8009878:	b2ad      	uxth	r5, r5
 800987a:	fa0f f885 	sxth.w	r8, r5
    if(diff.x == 0 && diff.y == 0) return;
 800987e:	f1b8 0f00 	cmp.w	r8, #0
 8009882:	d102      	bne.n	800988a <lv_obj_set_x+0x22>
}
 8009884:	b004      	add	sp, #16
 8009886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return obj->hidden == 0 ? false : true;
 800988a:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800988e:	4604      	mov	r4, r0
    if(lv_obj_get_hidden(obj)) return;
 8009890:	06d8      	lsls	r0, r3, #27
 8009892:	d411      	bmi.n	80098b8 <lv_obj_set_x+0x50>
 8009894:	463a      	mov	r2, r7
 8009896:	e000      	b.n	800989a <lv_obj_set_x+0x32>
    } while(par != NULL);
 8009898:	461a      	mov	r2, r3
 800989a:	6813      	ldr	r3, [r2, #0]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d1fb      	bne.n	8009898 <lv_obj_set_x+0x30>
    return LV_GC_ROOT(_lv_act_scr);
 80098a0:	4b52      	ldr	r3, [pc, #328]	; (80099ec <lv_obj_set_x+0x184>)
    if(obj_scr == lv_scr_act() ||
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d06d      	beq.n	8009984 <lv_obj_set_x+0x11c>
    return LV_GC_ROOT(_lv_top_layer);
 80098a8:	4b51      	ldr	r3, [pc, #324]	; (80099f0 <lv_obj_set_x+0x188>)
    if(obj_scr == lv_scr_act() ||
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d069      	beq.n	8009984 <lv_obj_set_x+0x11c>
    return LV_GC_ROOT(_lv_sys_layer);
 80098b0:	4b50      	ldr	r3, [pc, #320]	; (80099f4 <lv_obj_set_x+0x18c>)
            obj_scr == lv_layer_top() ||
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d065      	beq.n	8009984 <lv_obj_set_x+0x11c>
 80098b8:	f104 0910 	add.w	r9, r4, #16
    obj->coords.x2 += diff.x;
 80098bc:	8aa3      	ldrh	r3, [r4, #20]
    obj->coords.x1 += diff.x;
 80098be:	442e      	add	r6, r5
 80098c0:	f8d9 0000 	ldr.w	r0, [r9]
    refresh_children_position(obj, diff.x, diff.y);
 80098c4:	2200      	movs	r2, #0
 80098c6:	f8d9 1004 	ldr.w	r1, [r9, #4]
    obj->coords.x2 += diff.x;
 80098ca:	441d      	add	r5, r3
 80098cc:	466b      	mov	r3, sp
    obj->coords.x1 += diff.x;
 80098ce:	8226      	strh	r6, [r4, #16]
    obj->coords.x2 += diff.x;
 80098d0:	82a5      	strh	r5, [r4, #20]
 80098d2:	c303      	stmia	r3!, {r0, r1}
    refresh_children_position(obj, diff.x, diff.y);
 80098d4:	4641      	mov	r1, r8
 80098d6:	4620      	mov	r0, r4
 80098d8:	f7ff fcfe 	bl	80092d8 <refresh_children_position>
    obj->signal_func(obj, LV_SIGNAL_CORD_CHG, &ori);
 80098dc:	466a      	mov	r2, sp
 80098de:	69a3      	ldr	r3, [r4, #24]
 80098e0:	2102      	movs	r1, #2
 80098e2:	4620      	mov	r0, r4
 80098e4:	4798      	blx	r3
    par->signal_func(par, LV_SIGNAL_CHILD_CHG, obj);
 80098e6:	69bb      	ldr	r3, [r7, #24]
 80098e8:	4622      	mov	r2, r4
 80098ea:	4638      	mov	r0, r7
 80098ec:	2101      	movs	r1, #1
 80098ee:	4798      	blx	r3
    return obj->hidden == 0 ? false : true;
 80098f0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    if(lv_obj_get_hidden(obj)) return;
 80098f4:	06da      	lsls	r2, r3, #27
 80098f6:	d4c5      	bmi.n	8009884 <lv_obj_set_x+0x1c>
 80098f8:	4622      	mov	r2, r4
 80098fa:	e000      	b.n	80098fe <lv_obj_set_x+0x96>
    } while(par != NULL);
 80098fc:	461a      	mov	r2, r3
    return obj->par;
 80098fe:	6813      	ldr	r3, [r2, #0]
    } while(par != NULL);
 8009900:	2b00      	cmp	r3, #0
 8009902:	d1fb      	bne.n	80098fc <lv_obj_set_x+0x94>
    return LV_GC_ROOT(_lv_act_scr);
 8009904:	4b39      	ldr	r3, [pc, #228]	; (80099ec <lv_obj_set_x+0x184>)
    if(obj_scr == lv_scr_act() ||
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	429a      	cmp	r2, r3
 800990a:	d007      	beq.n	800991c <lv_obj_set_x+0xb4>
    return LV_GC_ROOT(_lv_top_layer);
 800990c:	4b38      	ldr	r3, [pc, #224]	; (80099f0 <lv_obj_set_x+0x188>)
    if(obj_scr == lv_scr_act() ||
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	429a      	cmp	r2, r3
 8009912:	d003      	beq.n	800991c <lv_obj_set_x+0xb4>
    return LV_GC_ROOT(_lv_sys_layer);
 8009914:	4b37      	ldr	r3, [pc, #220]	; (80099f4 <lv_obj_set_x+0x18c>)
            obj_scr == lv_layer_top() ||
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	429a      	cmp	r2, r3
 800991a:	d1b3      	bne.n	8009884 <lv_obj_set_x+0x1c>
 800991c:	f10d 0a08 	add.w	sl, sp, #8
 8009920:	f8d9 0000 	ldr.w	r0, [r9]
 8009924:	f8d9 1004 	ldr.w	r1, [r9, #4]
        lv_coord_t ext_size = obj->ext_size;
 8009928:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
 800992c:	4652      	mov	r2, sl
    return obj->par;
 800992e:	6824      	ldr	r4, [r4, #0]
        area_trunc.x1 -= ext_size;
 8009930:	b29b      	uxth	r3, r3
 8009932:	c203      	stmia	r2!, {r0, r1}
 8009934:	f8bd 0008 	ldrh.w	r0, [sp, #8]
        area_trunc.y1 -= ext_size;
 8009938:	f8bd 100a 	ldrh.w	r1, [sp, #10]
        area_trunc.x2 += ext_size;
 800993c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
        area_trunc.x1 -= ext_size;
 8009940:	1ac0      	subs	r0, r0, r3
        area_trunc.y2 += ext_size;
 8009942:	f8bd 500e 	ldrh.w	r5, [sp, #14]
        area_trunc.y1 -= ext_size;
 8009946:	1ac9      	subs	r1, r1, r3
        area_trunc.x2 += ext_size;
 8009948:	441a      	add	r2, r3
        area_trunc.x1 -= ext_size;
 800994a:	f8ad 0008 	strh.w	r0, [sp, #8]
        area_trunc.y2 += ext_size;
 800994e:	442b      	add	r3, r5
        area_trunc.y1 -= ext_size;
 8009950:	f8ad 100a 	strh.w	r1, [sp, #10]
        area_trunc.x2 += ext_size;
 8009954:	f8ad 200c 	strh.w	r2, [sp, #12]
        area_trunc.y2 += ext_size;
 8009958:	f8ad 300e 	strh.w	r3, [sp, #14]
        while(par != NULL) {
 800995c:	b174      	cbz	r4, 800997c <lv_obj_set_x+0x114>
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 800995e:	f104 0210 	add.w	r2, r4, #16
 8009962:	4651      	mov	r1, sl
 8009964:	4650      	mov	r0, sl
 8009966:	f009 f8af 	bl	8012ac8 <lv_area_intersect>
            if(union_ok == false) break;        /*If no common parts with parent break;*/
 800996a:	2800      	cmp	r0, #0
 800996c:	d08a      	beq.n	8009884 <lv_obj_set_x+0x1c>
    return obj->hidden == 0 ? false : true;
 800996e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
            if(lv_obj_get_hidden(par)) return;  /*If the parent is hidden then the child is hidden and won't be drawn*/
 8009972:	06db      	lsls	r3, r3, #27
 8009974:	d486      	bmi.n	8009884 <lv_obj_set_x+0x1c>
    return obj->par;
 8009976:	6824      	ldr	r4, [r4, #0]
        while(par != NULL) {
 8009978:	2c00      	cmp	r4, #0
 800997a:	d1f0      	bne.n	800995e <lv_obj_set_x+0xf6>
        if(union_ok != false) lv_inv_area(&area_trunc);
 800997c:	4650      	mov	r0, sl
 800997e:	f002 fd4b 	bl	800c418 <lv_inv_area>
 8009982:	e77f      	b.n	8009884 <lv_obj_set_x+0x1c>
        lv_area_copy(&area_trunc, &obj->coords);
 8009984:	46a1      	mov	r9, r4
 8009986:	f10d 0a08 	add.w	sl, sp, #8
        lv_coord_t ext_size = obj->ext_size;
 800998a:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
        area_trunc.y2 += ext_size;
 800998e:	463e      	mov	r6, r7
 8009990:	f859 0f10 	ldr.w	r0, [r9, #16]!
 8009994:	4652      	mov	r2, sl
        area_trunc.x1 -= ext_size;
 8009996:	b29b      	uxth	r3, r3
 8009998:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800999c:	c203      	stmia	r2!, {r0, r1}
 800999e:	f8bd 0008 	ldrh.w	r0, [sp, #8]
        area_trunc.y1 -= ext_size;
 80099a2:	f8bd 100a 	ldrh.w	r1, [sp, #10]
        area_trunc.x2 += ext_size;
 80099a6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
        area_trunc.x1 -= ext_size;
 80099aa:	1ac0      	subs	r0, r0, r3
        area_trunc.y2 += ext_size;
 80099ac:	f8bd e00e 	ldrh.w	lr, [sp, #14]
        area_trunc.y1 -= ext_size;
 80099b0:	1ac9      	subs	r1, r1, r3
        area_trunc.x2 += ext_size;
 80099b2:	441a      	add	r2, r3
        area_trunc.x1 -= ext_size;
 80099b4:	f8ad 0008 	strh.w	r0, [sp, #8]
        area_trunc.y2 += ext_size;
 80099b8:	4473      	add	r3, lr
        area_trunc.y1 -= ext_size;
 80099ba:	f8ad 100a 	strh.w	r1, [sp, #10]
        area_trunc.x2 += ext_size;
 80099be:	f8ad 200c 	strh.w	r2, [sp, #12]
        area_trunc.y2 += ext_size;
 80099c2:	f8ad 300e 	strh.w	r3, [sp, #14]
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 80099c6:	f106 0210 	add.w	r2, r6, #16
 80099ca:	4651      	mov	r1, sl
 80099cc:	4650      	mov	r0, sl
 80099ce:	f009 f87b 	bl	8012ac8 <lv_area_intersect>
            if(union_ok == false) break;        /*If no common parts with parent break;*/
 80099d2:	b148      	cbz	r0, 80099e8 <lv_obj_set_x+0x180>
    return obj->hidden == 0 ? false : true;
 80099d4:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
            if(lv_obj_get_hidden(par)) return;  /*If the parent is hidden then the child is hidden and won't be drawn*/
 80099d8:	06d9      	lsls	r1, r3, #27
 80099da:	d405      	bmi.n	80099e8 <lv_obj_set_x+0x180>
    return obj->par;
 80099dc:	6836      	ldr	r6, [r6, #0]
        while(par != NULL) {
 80099de:	2e00      	cmp	r6, #0
 80099e0:	d1f1      	bne.n	80099c6 <lv_obj_set_x+0x15e>
        if(union_ok != false) lv_inv_area(&area_trunc);
 80099e2:	4650      	mov	r0, sl
 80099e4:	f002 fd18 	bl	800c418 <lv_inv_area>
 80099e8:	8a26      	ldrh	r6, [r4, #16]
 80099ea:	e767      	b.n	80098bc <lv_obj_set_x+0x54>
 80099ec:	200194b4 	.word	0x200194b4
 80099f0:	200194b0 	.word	0x200194b0
 80099f4:	200194d8 	.word	0x200194d8

080099f8 <lv_obj_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 80099f8:	2a02      	cmp	r2, #2
{
 80099fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099fc:	4604      	mov	r4, r0
 80099fe:	b083      	sub	sp, #12
 8009a00:	460e      	mov	r6, r1
    if(mode == LV_DESIGN_COVER_CHK) {
 8009a02:	d021      	beq.n	8009a48 <lv_obj_design+0x50>
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 8009a04:	b112      	cbz	r2, 8009a0c <lv_obj_design+0x14>
    return true;
 8009a06:	2001      	movs	r0, #1
}
 8009a08:	b003      	add	sp, #12
 8009a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_style_t * style_act = obj->style_p;
 8009a0c:	6a47      	ldr	r7, [r0, #36]	; 0x24
    if(style_act == NULL) {
 8009a0e:	2f00      	cmp	r7, #0
 8009a10:	d044      	beq.n	8009a9c <lv_obj_design+0xa4>
    if(obj->group_p) {
 8009a12:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8009a14:	b118      	cbz	r0, 8009a1e <lv_obj_design+0x26>
        if(lv_group_get_focused(obj->group_p) == obj) {
 8009a16:	f7fe fd2f 	bl	8008478 <lv_group_get_focused>
 8009a1a:	4284      	cmp	r4, r0
 8009a1c:	d050      	beq.n	8009ac0 <lv_obj_design+0xc8>
        lv_draw_rect(&obj->coords, mask_p, style, lv_obj_get_opa_scale(obj));
 8009a1e:	f104 0010 	add.w	r0, r4, #16
 8009a22:	4623      	mov	r3, r4
        if(parent->opa_scale_en) return parent->opa_scale;
 8009a24:	f893 4030 	ldrb.w	r4, [r3, #48]	; 0x30
 8009a28:	0662      	lsls	r2, r4, #25
 8009a2a:	d40a      	bmi.n	8009a42 <lv_obj_design+0x4a>
    return obj->par;
 8009a2c:	681b      	ldr	r3, [r3, #0]
    while(parent) {
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d1f8      	bne.n	8009a24 <lv_obj_design+0x2c>
    return LV_OPA_COVER;
 8009a32:	23ff      	movs	r3, #255	; 0xff
        lv_draw_rect(&obj->coords, mask_p, style, lv_obj_get_opa_scale(obj));
 8009a34:	463a      	mov	r2, r7
 8009a36:	4631      	mov	r1, r6
 8009a38:	f006 f92c 	bl	800fc94 <lv_draw_rect>
    return true;
 8009a3c:	2001      	movs	r0, #1
}
 8009a3e:	b003      	add	sp, #12
 8009a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(parent->opa_scale_en) return parent->opa_scale;
 8009a42:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009a46:	e7f5      	b.n	8009a34 <lv_obj_design+0x3c>
    lv_style_t * style_act = obj->style_p;
 8009a48:	6a47      	ldr	r7, [r0, #36]	; 0x24
    if(style_act == NULL) {
 8009a4a:	2f00      	cmp	r7, #0
 8009a4c:	d066      	beq.n	8009b1c <lv_obj_design+0x124>
    if(obj->group_p) {
 8009a4e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8009a50:	b120      	cbz	r0, 8009a5c <lv_obj_design+0x64>
        if(lv_group_get_focused(obj->group_p) == obj) {
 8009a52:	f7fe fd11 	bl	8008478 <lv_group_get_focused>
 8009a56:	4284      	cmp	r4, r0
 8009a58:	f000 8082 	beq.w	8009b60 <lv_obj_design+0x168>
        if(style->body.empty != 0) return false;
 8009a5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009a60:	07d8      	lsls	r0, r3, #31
 8009a62:	d418      	bmi.n	8009a96 <lv_obj_design+0x9e>
        uint16_t r = style->body.radius;
 8009a64:	89bd      	ldrh	r5, [r7, #12]
        if(r == LV_RADIUS_CIRCLE) return false;
 8009a66:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8009a6a:	429d      	cmp	r5, r3
 8009a6c:	d013      	beq.n	8009a96 <lv_obj_design+0x9e>
 8009a6e:	f854 0f10 	ldr.w	r0, [r4, #16]!
 8009a72:	466a      	mov	r2, sp
 8009a74:	6861      	ldr	r1, [r4, #4]
 8009a76:	c203      	stmia	r2!, {r0, r1}
        area_tmp.x1 += r;
 8009a78:	f8bd 2000 	ldrh.w	r2, [sp]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8009a7c:	4669      	mov	r1, sp
        area_tmp.x2 -= r;
 8009a7e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8009a82:	4630      	mov	r0, r6
        area_tmp.x1 += r;
 8009a84:	442a      	add	r2, r5
        area_tmp.x2 -= r;
 8009a86:	1b5b      	subs	r3, r3, r5
        area_tmp.x1 += r;
 8009a88:	f8ad 2000 	strh.w	r2, [sp]
        area_tmp.x2 -= r;
 8009a8c:	f8ad 3004 	strh.w	r3, [sp, #4]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8009a90:	f009 f8a2 	bl	8012bd8 <lv_area_is_in>
 8009a94:	b9e0      	cbnz	r0, 8009ad0 <lv_obj_design+0xd8>
        if(style->body.empty != 0) return false;
 8009a96:	2000      	movs	r0, #0
}
 8009a98:	b003      	add	sp, #12
 8009a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_obj_t * par = obj->par;
 8009a9c:	6805      	ldr	r5, [r0, #0]
        while(par) {
 8009a9e:	b13d      	cbz	r5, 8009ab0 <lv_obj_design+0xb8>
            if(par->style_p) {
 8009aa0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009aa2:	b113      	cbz	r3, 8009aaa <lv_obj_design+0xb2>
                if(par->style_p->glass == 0) {
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	07d9      	lsls	r1, r3, #31
 8009aa8:	d527      	bpl.n	8009afa <lv_obj_design+0x102>
            par = par->par;
 8009aaa:	682d      	ldr	r5, [r5, #0]
        while(par) {
 8009aac:	2d00      	cmp	r5, #0
 8009aae:	d1f7      	bne.n	8009aa0 <lv_obj_design+0xa8>
    if(obj->group_p) {
 8009ab0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009ab2:	b908      	cbnz	r0, 8009ab8 <lv_obj_design+0xc0>
    if(style_act == NULL) style_act = &lv_style_plain;
 8009ab4:	4f34      	ldr	r7, [pc, #208]	; (8009b88 <lv_obj_design+0x190>)
 8009ab6:	e7b2      	b.n	8009a1e <lv_obj_design+0x26>
        if(lv_group_get_focused(obj->group_p) == obj) {
 8009ab8:	f7fe fcde 	bl	8008478 <lv_group_get_focused>
 8009abc:	4284      	cmp	r4, r0
 8009abe:	d1f9      	bne.n	8009ab4 <lv_obj_design+0xbc>
            style_act = lv_group_mod_style(obj->group_p, style_act);
 8009ac0:	4639      	mov	r1, r7
 8009ac2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009ac4:	f7fe fcc2 	bl	800844c <lv_group_mod_style>
 8009ac8:	4607      	mov	r7, r0
    if(style_act == NULL) style_act = &lv_style_plain;
 8009aca:	2f00      	cmp	r7, #0
 8009acc:	d0f2      	beq.n	8009ab4 <lv_obj_design+0xbc>
 8009ace:	e7a6      	b.n	8009a1e <lv_obj_design+0x26>
 8009ad0:	6820      	ldr	r0, [r4, #0]
 8009ad2:	466b      	mov	r3, sp
 8009ad4:	6861      	ldr	r1, [r4, #4]
 8009ad6:	c303      	stmia	r3!, {r0, r1}
        area_tmp.y1 += r;
 8009ad8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8009adc:	4669      	mov	r1, sp
        area_tmp.y2 -= r;
 8009ade:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8009ae2:	4630      	mov	r0, r6
        area_tmp.y1 += r;
 8009ae4:	442a      	add	r2, r5
        area_tmp.y2 -= r;
 8009ae6:	1b5d      	subs	r5, r3, r5
        area_tmp.y1 += r;
 8009ae8:	f8ad 2002 	strh.w	r2, [sp, #2]
        area_tmp.y2 -= r;
 8009aec:	f8ad 5006 	strh.w	r5, [sp, #6]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8009af0:	f009 f872 	bl	8012bd8 <lv_area_is_in>
 8009af4:	2800      	cmp	r0, #0
 8009af6:	d187      	bne.n	8009a08 <lv_obj_design+0x10>
 8009af8:	e7cd      	b.n	8009a96 <lv_obj_design+0x9e>
    return obj->group_p;
 8009afa:	6aef      	ldr	r7, [r5, #44]	; 0x2c
                    if(lv_group_get_focused(g) == par) {
 8009afc:	4638      	mov	r0, r7
 8009afe:	f7fe fcbb 	bl	8008478 <lv_group_get_focused>
 8009b02:	4285      	cmp	r5, r0
 8009b04:	d034      	beq.n	8009b70 <lv_obj_design+0x178>
                        style_act = par->style_p;
 8009b06:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    if(obj->group_p) {
 8009b08:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009b0a:	2800      	cmp	r0, #0
 8009b0c:	d0dd      	beq.n	8009aca <lv_obj_design+0xd2>
        if(lv_group_get_focused(obj->group_p) == obj) {
 8009b0e:	f7fe fcb3 	bl	8008478 <lv_group_get_focused>
 8009b12:	4284      	cmp	r4, r0
 8009b14:	d0d4      	beq.n	8009ac0 <lv_obj_design+0xc8>
    if(style_act == NULL) style_act = &lv_style_plain;
 8009b16:	2f00      	cmp	r7, #0
 8009b18:	d0cc      	beq.n	8009ab4 <lv_obj_design+0xbc>
 8009b1a:	e780      	b.n	8009a1e <lv_obj_design+0x26>
        lv_obj_t * par = obj->par;
 8009b1c:	6805      	ldr	r5, [r0, #0]
        while(par) {
 8009b1e:	b13d      	cbz	r5, 8009b30 <lv_obj_design+0x138>
            if(par->style_p) {
 8009b20:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009b22:	b113      	cbz	r3, 8009b2a <lv_obj_design+0x132>
                if(par->style_p->glass == 0) {
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	07db      	lsls	r3, r3, #31
 8009b28:	d50a      	bpl.n	8009b40 <lv_obj_design+0x148>
            par = par->par;
 8009b2a:	682d      	ldr	r5, [r5, #0]
        while(par) {
 8009b2c:	2d00      	cmp	r5, #0
 8009b2e:	d1f7      	bne.n	8009b20 <lv_obj_design+0x128>
    if(obj->group_p) {
 8009b30:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009b32:	b118      	cbz	r0, 8009b3c <lv_obj_design+0x144>
        if(lv_group_get_focused(obj->group_p) == obj) {
 8009b34:	f7fe fca0 	bl	8008478 <lv_group_get_focused>
 8009b38:	4284      	cmp	r4, r0
 8009b3a:	d011      	beq.n	8009b60 <lv_obj_design+0x168>
    if(style_act == NULL) style_act = &lv_style_plain;
 8009b3c:	4f12      	ldr	r7, [pc, #72]	; (8009b88 <lv_obj_design+0x190>)
 8009b3e:	e78d      	b.n	8009a5c <lv_obj_design+0x64>
    return obj->group_p;
 8009b40:	6aef      	ldr	r7, [r5, #44]	; 0x2c
                    if(lv_group_get_focused(g) == par) {
 8009b42:	4638      	mov	r0, r7
 8009b44:	f7fe fc98 	bl	8008478 <lv_group_get_focused>
 8009b48:	4285      	cmp	r5, r0
 8009b4a:	d017      	beq.n	8009b7c <lv_obj_design+0x184>
                        style_act = par->style_p;
 8009b4c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    if(obj->group_p) {
 8009b4e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009b50:	b118      	cbz	r0, 8009b5a <lv_obj_design+0x162>
        if(lv_group_get_focused(obj->group_p) == obj) {
 8009b52:	f7fe fc91 	bl	8008478 <lv_group_get_focused>
 8009b56:	4284      	cmp	r4, r0
 8009b58:	d002      	beq.n	8009b60 <lv_obj_design+0x168>
    if(style_act == NULL) style_act = &lv_style_plain;
 8009b5a:	2f00      	cmp	r7, #0
 8009b5c:	d0ee      	beq.n	8009b3c <lv_obj_design+0x144>
 8009b5e:	e77d      	b.n	8009a5c <lv_obj_design+0x64>
            style_act = lv_group_mod_style(obj->group_p, style_act);
 8009b60:	4639      	mov	r1, r7
 8009b62:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009b64:	f7fe fc72 	bl	800844c <lv_group_mod_style>
 8009b68:	4607      	mov	r7, r0
    if(style_act == NULL) style_act = &lv_style_plain;
 8009b6a:	2f00      	cmp	r7, #0
 8009b6c:	d0e6      	beq.n	8009b3c <lv_obj_design+0x144>
 8009b6e:	e775      	b.n	8009a5c <lv_obj_design+0x64>
                        style_act = lv_group_mod_style(g, par->style_p);
 8009b70:	4638      	mov	r0, r7
 8009b72:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8009b74:	f7fe fc6a 	bl	800844c <lv_group_mod_style>
 8009b78:	4607      	mov	r7, r0
 8009b7a:	e7c5      	b.n	8009b08 <lv_obj_design+0x110>
 8009b7c:	4638      	mov	r0, r7
 8009b7e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8009b80:	f7fe fc64 	bl	800844c <lv_group_mod_style>
 8009b84:	4607      	mov	r7, r0
 8009b86:	e7e2      	b.n	8009b4e <lv_obj_design+0x156>
 8009b88:	2001933c 	.word	0x2001933c

08009b8c <lv_obj_del>:
    return obj->hidden == 0 ? false : true;
 8009b8c:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    if(lv_obj_get_hidden(obj)) return;
 8009b90:	06da      	lsls	r2, r3, #27
{
 8009b92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b94:	4605      	mov	r5, r0
 8009b96:	b083      	sub	sp, #12
    if(lv_obj_get_hidden(obj)) return;
 8009b98:	d411      	bmi.n	8009bbe <lv_obj_del+0x32>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	e000      	b.n	8009ba0 <lv_obj_del+0x14>
    } while(par != NULL);
 8009b9e:	461a      	mov	r2, r3
    return obj->par;
 8009ba0:	6813      	ldr	r3, [r2, #0]
    } while(par != NULL);
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d1fb      	bne.n	8009b9e <lv_obj_del+0x12>
    return LV_GC_ROOT(_lv_act_scr);
 8009ba6:	4b4a      	ldr	r3, [pc, #296]	; (8009cd0 <lv_obj_del+0x144>)
    if(obj_scr == lv_scr_act() ||
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d057      	beq.n	8009c5e <lv_obj_del+0xd2>
    return LV_GC_ROOT(_lv_top_layer);
 8009bae:	4b49      	ldr	r3, [pc, #292]	; (8009cd4 <lv_obj_del+0x148>)
    if(obj_scr == lv_scr_act() ||
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d053      	beq.n	8009c5e <lv_obj_del+0xd2>
    return LV_GC_ROOT(_lv_sys_layer);
 8009bb6:	4b48      	ldr	r3, [pc, #288]	; (8009cd8 <lv_obj_del+0x14c>)
            obj_scr == lv_layer_top() ||
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d04f      	beq.n	8009c5e <lv_obj_del+0xd2>
    if(obj->group_p != NULL) lv_group_remove_obj(obj);
 8009bbe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009bc0:	b113      	cbz	r3, 8009bc8 <lv_obj_del+0x3c>
 8009bc2:	4628      	mov	r0, r5
 8009bc4:	f7fe fafc 	bl	80081c0 <lv_group_remove_obj>
    i = lv_ll_get_head(&(obj->child_ll));
 8009bc8:	1d2f      	adds	r7, r5, #4
    lv_anim_del(obj, NULL);
 8009bca:	2100      	movs	r1, #0
 8009bcc:	4628      	mov	r0, r5
 8009bce:	f008 fecd 	bl	801296c <lv_anim_del>
    i = lv_ll_get_head(&(obj->child_ll));
 8009bd2:	4638      	mov	r0, r7
 8009bd4:	f009 fadc 	bl	8013190 <lv_ll_get_head>
    while(i != NULL) {
 8009bd8:	4604      	mov	r4, r0
 8009bda:	b150      	cbz	r0, 8009bf2 <lv_obj_del+0x66>
        i_next = lv_ll_get_next(&(obj->child_ll), i);
 8009bdc:	4621      	mov	r1, r4
 8009bde:	4638      	mov	r0, r7
 8009be0:	f009 fade 	bl	80131a0 <lv_ll_get_next>
 8009be4:	4606      	mov	r6, r0
        delete_children(i);
 8009be6:	4620      	mov	r0, r4
 8009be8:	f7ff fb2c 	bl	8009244 <delete_children>
    while(i != NULL) {
 8009bec:	4634      	mov	r4, r6
 8009bee:	2e00      	cmp	r6, #0
 8009bf0:	d1f4      	bne.n	8009bdc <lv_obj_del+0x50>
    return obj->par;
 8009bf2:	682e      	ldr	r6, [r5, #0]
    if(par == NULL) { /*It is a screen*/
 8009bf4:	2e00      	cmp	r6, #0
 8009bf6:	d061      	beq.n	8009cbc <lv_obj_del+0x130>
        lv_ll_rem(&(par->child_ll), obj);
 8009bf8:	4629      	mov	r1, r5
 8009bfa:	1d30      	adds	r0, r6, #4
 8009bfc:	f009 f9fc 	bl	8012ff8 <lv_ll_rem>
    lv_indev_t * indev = lv_indev_next(NULL);
 8009c00:	2000      	movs	r0, #0
 8009c02:	f008 fd71 	bl	80126e8 <lv_indev_next>
    while(indev) {
 8009c06:	4604      	mov	r4, r0
 8009c08:	b928      	cbnz	r0, 8009c16 <lv_obj_del+0x8a>
 8009c0a:	e013      	b.n	8009c34 <lv_obj_del+0xa8>
        indev = lv_indev_next(indev);
 8009c0c:	4620      	mov	r0, r4
 8009c0e:	f008 fd6b 	bl	80126e8 <lv_indev_next>
    while(indev) {
 8009c12:	4604      	mov	r4, r0
 8009c14:	b170      	cbz	r0, 8009c34 <lv_obj_del+0xa8>
        if(indev->proc.act_obj == obj || indev->proc.last_obj == obj) {
 8009c16:	6a23      	ldr	r3, [r4, #32]
 8009c18:	429d      	cmp	r5, r3
 8009c1a:	d002      	beq.n	8009c22 <lv_obj_del+0x96>
 8009c1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c1e:	429d      	cmp	r5, r3
 8009c20:	d1f4      	bne.n	8009c0c <lv_obj_del+0x80>
            lv_indev_reset(indev);
 8009c22:	4620      	mov	r0, r4
 8009c24:	f7ff fabc 	bl	80091a0 <lv_indev_reset>
        indev = lv_indev_next(indev);
 8009c28:	4620      	mov	r0, r4
 8009c2a:	f008 fd5d 	bl	80126e8 <lv_indev_next>
    while(indev) {
 8009c2e:	4604      	mov	r4, r0
 8009c30:	2800      	cmp	r0, #0
 8009c32:	d1f0      	bne.n	8009c16 <lv_obj_del+0x8a>
    obj->signal_func(obj, LV_SIGNAL_CLEANUP, NULL);
 8009c34:	2200      	movs	r2, #0
 8009c36:	69ab      	ldr	r3, [r5, #24]
 8009c38:	4628      	mov	r0, r5
 8009c3a:	4611      	mov	r1, r2
 8009c3c:	4798      	blx	r3
    if(obj->ext_attr != NULL)  lv_mem_free(obj->ext_attr);
 8009c3e:	6a28      	ldr	r0, [r5, #32]
 8009c40:	b108      	cbz	r0, 8009c46 <lv_obj_del+0xba>
 8009c42:	f009 fb13 	bl	801326c <lv_mem_free>
    lv_mem_free(obj); /*Free the object itself*/
 8009c46:	4628      	mov	r0, r5
 8009c48:	f009 fb10 	bl	801326c <lv_mem_free>
    if(par != NULL) {
 8009c4c:	b126      	cbz	r6, 8009c58 <lv_obj_del+0xcc>
        par->signal_func(par, LV_SIGNAL_CHILD_CHG, NULL);
 8009c4e:	69b3      	ldr	r3, [r6, #24]
 8009c50:	4630      	mov	r0, r6
 8009c52:	2200      	movs	r2, #0
 8009c54:	2101      	movs	r1, #1
 8009c56:	4798      	blx	r3
}
 8009c58:	2000      	movs	r0, #0
 8009c5a:	b003      	add	sp, #12
 8009c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c5e:	4629      	mov	r1, r5
        lv_coord_t ext_size = obj->ext_size;
 8009c60:	f9b5 3034 	ldrsh.w	r3, [r5, #52]	; 0x34
 8009c64:	466a      	mov	r2, sp
    return obj->par;
 8009c66:	682c      	ldr	r4, [r5, #0]
 8009c68:	f851 0f10 	ldr.w	r0, [r1, #16]!
        area_trunc.x1 -= ext_size;
 8009c6c:	b29b      	uxth	r3, r3
 8009c6e:	6849      	ldr	r1, [r1, #4]
 8009c70:	c203      	stmia	r2!, {r0, r1}
 8009c72:	f8bd 0000 	ldrh.w	r0, [sp]
        area_trunc.y1 -= ext_size;
 8009c76:	f8bd 1002 	ldrh.w	r1, [sp, #2]
        area_trunc.x2 += ext_size;
 8009c7a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
        area_trunc.x1 -= ext_size;
 8009c7e:	1ac0      	subs	r0, r0, r3
        area_trunc.y2 += ext_size;
 8009c80:	f8bd 6006 	ldrh.w	r6, [sp, #6]
        area_trunc.y1 -= ext_size;
 8009c84:	1ac9      	subs	r1, r1, r3
        area_trunc.x2 += ext_size;
 8009c86:	441a      	add	r2, r3
        area_trunc.x1 -= ext_size;
 8009c88:	f8ad 0000 	strh.w	r0, [sp]
        area_trunc.y2 += ext_size;
 8009c8c:	4433      	add	r3, r6
        area_trunc.y1 -= ext_size;
 8009c8e:	f8ad 1002 	strh.w	r1, [sp, #2]
        area_trunc.x2 += ext_size;
 8009c92:	f8ad 2004 	strh.w	r2, [sp, #4]
        area_trunc.y2 += ext_size;
 8009c96:	f8ad 3006 	strh.w	r3, [sp, #6]
        while(par != NULL) {
 8009c9a:	b934      	cbnz	r4, 8009caa <lv_obj_del+0x11e>
 8009c9c:	e013      	b.n	8009cc6 <lv_obj_del+0x13a>
    return obj->hidden == 0 ? false : true;
 8009c9e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
            if(lv_obj_get_hidden(par)) return;  /*If the parent is hidden then the child is hidden and won't be drawn*/
 8009ca2:	06db      	lsls	r3, r3, #27
 8009ca4:	d48b      	bmi.n	8009bbe <lv_obj_del+0x32>
    return obj->par;
 8009ca6:	6824      	ldr	r4, [r4, #0]
        while(par != NULL) {
 8009ca8:	b16c      	cbz	r4, 8009cc6 <lv_obj_del+0x13a>
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 8009caa:	f104 0210 	add.w	r2, r4, #16
 8009cae:	4669      	mov	r1, sp
 8009cb0:	4668      	mov	r0, sp
 8009cb2:	f008 ff09 	bl	8012ac8 <lv_area_intersect>
            if(union_ok == false) break;        /*If no common parts with parent break;*/
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	d1f1      	bne.n	8009c9e <lv_obj_del+0x112>
 8009cba:	e780      	b.n	8009bbe <lv_obj_del+0x32>
        lv_ll_rem(&LV_GC_ROOT(_lv_scr_ll), obj);
 8009cbc:	4629      	mov	r1, r5
 8009cbe:	4807      	ldr	r0, [pc, #28]	; (8009cdc <lv_obj_del+0x150>)
 8009cc0:	f009 f99a 	bl	8012ff8 <lv_ll_rem>
 8009cc4:	e79c      	b.n	8009c00 <lv_obj_del+0x74>
        if(union_ok != false) lv_inv_area(&area_trunc);
 8009cc6:	4668      	mov	r0, sp
 8009cc8:	f002 fba6 	bl	800c418 <lv_inv_area>
 8009ccc:	e777      	b.n	8009bbe <lv_obj_del+0x32>
 8009cce:	bf00      	nop
 8009cd0:	200194b4 	.word	0x200194b4
 8009cd4:	200194b0 	.word	0x200194b0
 8009cd8:	200194d8 	.word	0x200194d8
 8009cdc:	200194c8 	.word	0x200194c8

08009ce0 <lv_obj_invalidate>:
    return obj->hidden == 0 ? false : true;
 8009ce0:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    if(lv_obj_get_hidden(obj)) return;
 8009ce4:	06da      	lsls	r2, r3, #27
 8009ce6:	d411      	bmi.n	8009d0c <lv_obj_invalidate+0x2c>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	e000      	b.n	8009cee <lv_obj_invalidate+0xe>
    } while(par != NULL);
 8009cec:	461a      	mov	r2, r3
    return obj->par;
 8009cee:	6813      	ldr	r3, [r2, #0]
    } while(par != NULL);
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d1fb      	bne.n	8009cec <lv_obj_invalidate+0xc>
    return LV_GC_ROOT(_lv_act_scr);
 8009cf4:	4b21      	ldr	r3, [pc, #132]	; (8009d7c <lv_obj_invalidate+0x9c>)
    if(obj_scr == lv_scr_act() ||
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d008      	beq.n	8009d0e <lv_obj_invalidate+0x2e>
    return LV_GC_ROOT(_lv_top_layer);
 8009cfc:	4b20      	ldr	r3, [pc, #128]	; (8009d80 <lv_obj_invalidate+0xa0>)
    if(obj_scr == lv_scr_act() ||
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d004      	beq.n	8009d0e <lv_obj_invalidate+0x2e>
    return LV_GC_ROOT(_lv_sys_layer);
 8009d04:	4b1f      	ldr	r3, [pc, #124]	; (8009d84 <lv_obj_invalidate+0xa4>)
            obj_scr == lv_layer_top() ||
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d000      	beq.n	8009d0e <lv_obj_invalidate+0x2e>
 8009d0c:	4770      	bx	lr
 8009d0e:	4601      	mov	r1, r0
 8009d10:	4603      	mov	r3, r0
        lv_coord_t ext_size = obj->ext_size;
 8009d12:	f9b0 2034 	ldrsh.w	r2, [r0, #52]	; 0x34
{
 8009d16:	b530      	push	{r4, r5, lr}
 8009d18:	b083      	sub	sp, #12
 8009d1a:	f851 0f10 	ldr.w	r0, [r1, #16]!
        area_trunc.x1 -= ext_size;
 8009d1e:	b292      	uxth	r2, r2
    return obj->par;
 8009d20:	681c      	ldr	r4, [r3, #0]
 8009d22:	6849      	ldr	r1, [r1, #4]
 8009d24:	466d      	mov	r5, sp
 8009d26:	c503      	stmia	r5!, {r0, r1}
        area_trunc.x1 -= ext_size;
 8009d28:	f8bd 0000 	ldrh.w	r0, [sp]
        area_trunc.y1 -= ext_size;
 8009d2c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
        area_trunc.x2 += ext_size;
 8009d30:	f8bd 3004 	ldrh.w	r3, [sp, #4]
        area_trunc.x1 -= ext_size;
 8009d34:	1a80      	subs	r0, r0, r2
        area_trunc.y2 += ext_size;
 8009d36:	f8bd 5006 	ldrh.w	r5, [sp, #6]
        area_trunc.y1 -= ext_size;
 8009d3a:	1a89      	subs	r1, r1, r2
        area_trunc.x2 += ext_size;
 8009d3c:	4413      	add	r3, r2
        area_trunc.x1 -= ext_size;
 8009d3e:	f8ad 0000 	strh.w	r0, [sp]
        area_trunc.y2 += ext_size;
 8009d42:	442a      	add	r2, r5
        area_trunc.y1 -= ext_size;
 8009d44:	f8ad 1002 	strh.w	r1, [sp, #2]
        area_trunc.x2 += ext_size;
 8009d48:	f8ad 3004 	strh.w	r3, [sp, #4]
        area_trunc.y2 += ext_size;
 8009d4c:	f8ad 2006 	strh.w	r2, [sp, #6]
        while(par != NULL) {
 8009d50:	b934      	cbnz	r4, 8009d60 <lv_obj_invalidate+0x80>
 8009d52:	e00f      	b.n	8009d74 <lv_obj_invalidate+0x94>
    return obj->hidden == 0 ? false : true;
 8009d54:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
            if(lv_obj_get_hidden(par)) return;  /*If the parent is hidden then the child is hidden and won't be drawn*/
 8009d58:	06db      	lsls	r3, r3, #27
 8009d5a:	d409      	bmi.n	8009d70 <lv_obj_invalidate+0x90>
    return obj->par;
 8009d5c:	6824      	ldr	r4, [r4, #0]
        while(par != NULL) {
 8009d5e:	b14c      	cbz	r4, 8009d74 <lv_obj_invalidate+0x94>
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 8009d60:	f104 0210 	add.w	r2, r4, #16
 8009d64:	4669      	mov	r1, sp
 8009d66:	4668      	mov	r0, sp
 8009d68:	f008 feae 	bl	8012ac8 <lv_area_intersect>
            if(union_ok == false) break;        /*If no common parts with parent break;*/
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	d1f1      	bne.n	8009d54 <lv_obj_invalidate+0x74>
}
 8009d70:	b003      	add	sp, #12
 8009d72:	bd30      	pop	{r4, r5, pc}
        if(union_ok != false) lv_inv_area(&area_trunc);
 8009d74:	4668      	mov	r0, sp
 8009d76:	f002 fb4f 	bl	800c418 <lv_inv_area>
 8009d7a:	e7f9      	b.n	8009d70 <lv_obj_invalidate+0x90>
 8009d7c:	200194b4 	.word	0x200194b4
 8009d80:	200194b0 	.word	0x200194b0
 8009d84:	200194d8 	.word	0x200194d8

08009d88 <lv_obj_signal>:
{
 8009d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    lv_style_t * style_act = obj->style_p;
 8009d8c:	6a47      	ldr	r7, [r0, #36]	; 0x24
{
 8009d8e:	4605      	mov	r5, r0
 8009d90:	460e      	mov	r6, r1
 8009d92:	4690      	mov	r8, r2
    if(style_act == NULL) {
 8009d94:	b397      	cbz	r7, 8009dfc <lv_obj_signal+0x74>
    if(obj->group_p) {
 8009d96:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8009d98:	b118      	cbz	r0, 8009da2 <lv_obj_signal+0x1a>
        if(lv_group_get_focused(obj->group_p) == obj) {
 8009d9a:	f7fe fb6d 	bl	8008478 <lv_group_get_focused>
 8009d9e:	4285      	cmp	r5, r0
 8009da0:	d04e      	beq.n	8009e40 <lv_obj_signal+0xb8>
    lv_indev_t *indev_act = lv_indev_get_act();
 8009da2:	f7ff f9f3 	bl	800918c <lv_indev_get_act>
    if(sign > _LV_SIGNAL_FEEDBACK_SECTION_START && sign < _LV_SIGNAL_FEEDBACK_SECTION_END) {
 8009da6:	f1a6 0308 	sub.w	r3, r6, #8
 8009daa:	2b0a      	cmp	r3, #10
 8009dac:	d80b      	bhi.n	8009dc6 <lv_obj_signal+0x3e>
		if(indev_act != NULL && indev_act->feedback != NULL)
 8009dae:	b118      	cbz	r0, 8009db8 <lv_obj_signal+0x30>
 8009db0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009db2:	b10b      	cbz	r3, 8009db8 <lv_obj_signal+0x30>
			indev_act->feedback(indev_act, sign);
 8009db4:	4631      	mov	r1, r6
 8009db6:	4798      	blx	r3
    } else if(sign ==  LV_SIGNAL_STYLE_CHG) {
 8009db8:	2e03      	cmp	r6, #3
 8009dba:	d049      	beq.n	8009e50 <lv_obj_signal+0xc8>
    } else if(sign ==  LV_SIGNAL_GET_TYPE) {
 8009dbc:	2e06      	cmp	r6, #6
 8009dbe:	d017      	beq.n	8009df0 <lv_obj_signal+0x68>
    lv_res_t res = LV_RES_OK;
 8009dc0:	2001      	movs	r0, #1
    return res;
 8009dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(sign == LV_SIGNAL_CHILD_CHG) {
 8009dc6:	2e01      	cmp	r6, #1
 8009dc8:	d106      	bne.n	8009dd8 <lv_obj_signal+0x50>
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
 8009dca:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
 8009dce:	43c0      	mvns	r0, r0
 8009dd0:	f000 0001 	and.w	r0, r0, #1
 8009dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if(sign == LV_SIGNAL_REFR_EXT_SIZE) {
 8009dd8:	2e04      	cmp	r6, #4
 8009dda:	d1ed      	bne.n	8009db8 <lv_obj_signal+0x30>
        if(style->body.shadow.width > obj->ext_size) obj->ext_size = style->body.shadow.width;
 8009ddc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8009de0:	f9b5 2034 	ldrsh.w	r2, [r5, #52]	; 0x34
 8009de4:	429a      	cmp	r2, r3
 8009de6:	daeb      	bge.n	8009dc0 <lv_obj_signal+0x38>
 8009de8:	86ab      	strh	r3, [r5, #52]	; 0x34
    lv_res_t res = LV_RES_OK;
 8009dea:	2001      	movs	r0, #1
 8009dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        buf->type[0] = "lv_obj";
 8009df0:	4b20      	ldr	r3, [pc, #128]	; (8009e74 <lv_obj_signal+0xec>)
 8009df2:	2001      	movs	r0, #1
 8009df4:	f8c8 3000 	str.w	r3, [r8]
 8009df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_obj_t * par = obj->par;
 8009dfc:	6804      	ldr	r4, [r0, #0]
        while(par) {
 8009dfe:	b13c      	cbz	r4, 8009e10 <lv_obj_signal+0x88>
            if(par->style_p) {
 8009e00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e02:	b113      	cbz	r3, 8009e0a <lv_obj_signal+0x82>
                if(par->style_p->glass == 0) {
 8009e04:	781b      	ldrb	r3, [r3, #0]
 8009e06:	07db      	lsls	r3, r3, #31
 8009e08:	d50a      	bpl.n	8009e20 <lv_obj_signal+0x98>
            par = par->par;
 8009e0a:	6824      	ldr	r4, [r4, #0]
        while(par) {
 8009e0c:	2c00      	cmp	r4, #0
 8009e0e:	d1f7      	bne.n	8009e00 <lv_obj_signal+0x78>
    if(obj->group_p) {
 8009e10:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8009e12:	b118      	cbz	r0, 8009e1c <lv_obj_signal+0x94>
        if(lv_group_get_focused(obj->group_p) == obj) {
 8009e14:	f7fe fb30 	bl	8008478 <lv_group_get_focused>
 8009e18:	4285      	cmp	r5, r0
 8009e1a:	d011      	beq.n	8009e40 <lv_obj_signal+0xb8>
    if(style_act == NULL) style_act = &lv_style_plain;
 8009e1c:	4f16      	ldr	r7, [pc, #88]	; (8009e78 <lv_obj_signal+0xf0>)
 8009e1e:	e7c0      	b.n	8009da2 <lv_obj_signal+0x1a>
    return obj->group_p;
 8009e20:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
                    if(lv_group_get_focused(g) == par) {
 8009e22:	4638      	mov	r0, r7
 8009e24:	f7fe fb28 	bl	8008478 <lv_group_get_focused>
 8009e28:	4284      	cmp	r4, r0
 8009e2a:	d01d      	beq.n	8009e68 <lv_obj_signal+0xe0>
                        style_act = par->style_p;
 8009e2c:	6a67      	ldr	r7, [r4, #36]	; 0x24
    if(obj->group_p) {
 8009e2e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8009e30:	b118      	cbz	r0, 8009e3a <lv_obj_signal+0xb2>
        if(lv_group_get_focused(obj->group_p) == obj) {
 8009e32:	f7fe fb21 	bl	8008478 <lv_group_get_focused>
 8009e36:	4285      	cmp	r5, r0
 8009e38:	d002      	beq.n	8009e40 <lv_obj_signal+0xb8>
    if(style_act == NULL) style_act = &lv_style_plain;
 8009e3a:	2f00      	cmp	r7, #0
 8009e3c:	d0ee      	beq.n	8009e1c <lv_obj_signal+0x94>
 8009e3e:	e7b0      	b.n	8009da2 <lv_obj_signal+0x1a>
            style_act = lv_group_mod_style(obj->group_p, style_act);
 8009e40:	4639      	mov	r1, r7
 8009e42:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8009e44:	f7fe fb02 	bl	800844c <lv_group_mod_style>
 8009e48:	4607      	mov	r7, r0
    if(style_act == NULL) style_act = &lv_style_plain;
 8009e4a:	2f00      	cmp	r7, #0
 8009e4c:	d0e6      	beq.n	8009e1c <lv_obj_signal+0x94>
 8009e4e:	e7a8      	b.n	8009da2 <lv_obj_signal+0x1a>
    obj->ext_size = 0;
 8009e50:	2200      	movs	r2, #0
    obj->signal_func(obj, LV_SIGNAL_REFR_EXT_SIZE, NULL);
 8009e52:	69ab      	ldr	r3, [r5, #24]
 8009e54:	2104      	movs	r1, #4
 8009e56:	4628      	mov	r0, r5
    obj->ext_size = 0;
 8009e58:	86aa      	strh	r2, [r5, #52]	; 0x34
    obj->signal_func(obj, LV_SIGNAL_REFR_EXT_SIZE, NULL);
 8009e5a:	4798      	blx	r3
    lv_obj_invalidate(obj);
 8009e5c:	4628      	mov	r0, r5
 8009e5e:	f7ff ff3f 	bl	8009ce0 <lv_obj_invalidate>
 8009e62:	2001      	movs	r0, #1
 8009e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                        style_act = lv_group_mod_style(g, par->style_p);
 8009e68:	4638      	mov	r0, r7
 8009e6a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009e6c:	f7fe faee 	bl	800844c <lv_group_mod_style>
 8009e70:	4607      	mov	r7, r0
 8009e72:	e7dc      	b.n	8009e2e <lv_obj_signal+0xa6>
 8009e74:	080c7220 	.word	0x080c7220
 8009e78:	2001933c 	.word	0x2001933c

08009e7c <lv_init>:
{
 8009e7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (_lv_initialized)
 8009e80:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a158 <lv_init+0x2dc>
 8009e84:	f899 7000 	ldrb.w	r7, [r9]
 8009e88:	b10f      	cbz	r7, 8009e8e <lv_init+0x12>
 8009e8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LV_GC_ROOT(_lv_act_scr) = NULL;
 8009e8e:	49a8      	ldr	r1, [pc, #672]	; (800a130 <lv_init+0x2b4>)
    LV_GC_ROOT(_lv_disp_list) = NULL;
 8009e90:	4aa8      	ldr	r2, [pc, #672]	; (800a134 <lv_init+0x2b8>)
    LV_GC_ROOT(_lv_indev_list) = NULL;
 8009e92:	4ba9      	ldr	r3, [pc, #676]	; (800a138 <lv_init+0x2bc>)
    LV_GC_ROOT(_lv_act_scr) = NULL;
 8009e94:	600f      	str	r7, [r1, #0]
    LV_GC_ROOT(_lv_def_scr) = NULL;
 8009e96:	4ca9      	ldr	r4, [pc, #676]	; (800a13c <lv_init+0x2c0>)
    LV_GC_ROOT(_lv_sys_layer) = NULL;
 8009e98:	49a9      	ldr	r1, [pc, #676]	; (800a140 <lv_init+0x2c4>)
    LV_GC_ROOT(_lv_top_layer) = NULL;
 8009e9a:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 800a15c <lv_init+0x2e0>
    LV_GC_ROOT(_lv_disp_list) = NULL;
 8009e9e:	6017      	str	r7, [r2, #0]
    LV_GC_ROOT(_lv_indev_list) = NULL;
 8009ea0:	601f      	str	r7, [r3, #0]
    LV_GC_ROOT(_lv_sys_layer) = NULL;
 8009ea2:	600f      	str	r7, [r1, #0]
    LV_GC_ROOT(_lv_def_scr) = NULL;
 8009ea4:	6027      	str	r7, [r4, #0]
    LV_GC_ROOT(_lv_top_layer) = NULL;
 8009ea6:	f8ca 7000 	str.w	r7, [sl]
    lv_mem_init();
 8009eaa:	f009 f9c7 	bl	801323c <lv_mem_init>
    lv_task_init();
 8009eae:	f009 fb53 	bl	8013558 <lv_task_init>
    lv_fs_init();
 8009eb2:	f008 ff71 	bl	8012d98 <lv_fs_init>
    lv_ufs_init();
 8009eb6:	f00a fa45 	bl	8014344 <lv_ufs_init>
    lv_font_init();
 8009eba:	f008 fedd 	bl	8012c78 <lv_font_init>
    lv_anim_init();
 8009ebe:	f008 fcdb 	bl	8012878 <lv_anim_init>
    lv_style_init();
 8009ec2:	f002 fb05 	bl	800c4d0 <lv_style_init>
    lv_refr_init();
 8009ec6:	f002 fa8f 	bl	800c3e8 <lv_refr_init>
    lv_ll_init(&LV_GC_ROOT(_lv_scr_ll), sizeof(lv_obj_t));
 8009eca:	2148      	movs	r1, #72	; 0x48
 8009ecc:	489d      	ldr	r0, [pc, #628]	; (800a144 <lv_init+0x2c8>)
 8009ece:	f009 f817 	bl	8012f00 <lv_ll_init>
        new_obj = lv_ll_ins_head(&LV_GC_ROOT(_lv_scr_ll));
 8009ed2:	489c      	ldr	r0, [pc, #624]	; (800a144 <lv_init+0x2c8>)
 8009ed4:	f009 f81e 	bl	8012f14 <lv_ll_ins_head>
        lv_mem_assert(new_obj);
 8009ed8:	4605      	mov	r5, r0
 8009eda:	2800      	cmp	r0, #0
 8009edc:	f000 8104 	beq.w	800a0e8 <lv_init+0x26c>
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 8009ee0:	2148      	movs	r1, #72	; 0x48
        new_obj->par = NULL; /*Screens has no a parent*/
 8009ee2:	f840 7b04 	str.w	r7, [r0], #4
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 8009ee6:	f009 f80b 	bl	8012f00 <lv_ll_init>
        new_obj->realign.auto_realign = 0;
 8009eea:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
        new_obj->coords.x1 = 0;
 8009eee:	4a96      	ldr	r2, [pc, #600]	; (800a148 <lv_init+0x2cc>)
        new_obj->realign.auto_realign = 0;
 8009ef0:	f367 0300 	bfi	r3, r7, #0, #1
        new_obj->coords.x1 = 0;
 8009ef4:	612f      	str	r7, [r5, #16]
        new_obj->ext_size = 0;
 8009ef6:	86af      	strh	r7, [r5, #52]	; 0x34
        new_obj->realign.align = LV_ALIGN_CENTER;
 8009ef8:	f885 7040 	strb.w	r7, [r5, #64]	; 0x40
        new_obj->realign.xofs = 0;
 8009efc:	63ef      	str	r7, [r5, #60]	; 0x3c
        new_obj->realign.base = NULL;
 8009efe:	63af      	str	r7, [r5, #56]	; 0x38
        new_obj->realign.auto_realign = 0;
 8009f00:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        new_obj->coords.x1 = 0;
 8009f04:	616a      	str	r2, [r5, #20]
        lv_theme_t * th = lv_theme_get_current();
 8009f06:	f013 fd0f 	bl	801d928 <lv_theme_get_current>
        if(th) {
 8009f0a:	2800      	cmp	r0, #0
 8009f0c:	f000 810e 	beq.w	800a12c <lv_init+0x2b0>
            new_obj->style_p = th->bg;
 8009f10:	6801      	ldr	r1, [r0, #0]
        new_obj->click = 0;
 8009f12:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
        new_obj->free_num = 0;
 8009f16:	2600      	movs	r6, #0
    obj->signal_func = fp;
 8009f18:	f8df 8244 	ldr.w	r8, [pc, #580]	; 800a160 <lv_init+0x2e4>
        new_obj->opa_scale = LV_OPA_COVER;
 8009f1c:	f04f 0bff 	mov.w	fp, #255	; 0xff
        new_obj->opa_scale_en = 0;
 8009f20:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    obj->design_func = fp;
 8009f24:	4f89      	ldr	r7, [pc, #548]	; (800a14c <lv_init+0x2d0>)
    LV_GC_ROOT(_lv_act_scr) = LV_GC_ROOT(_lv_def_scr);
 8009f26:	4b82      	ldr	r3, [pc, #520]	; (800a130 <lv_init+0x2b4>)
        new_obj->opa_scale_en = 0;
 8009f28:	f366 1286 	bfi	r2, r6, #6, #1
 8009f2c:	6269      	str	r1, [r5, #36]	; 0x24
        new_obj->free_num = 0;
 8009f2e:	646e      	str	r6, [r5, #68]	; 0x44
        new_obj->free_ptr = NULL;
 8009f30:	62ae      	str	r6, [r5, #40]	; 0x28
        new_obj->opa_scale_en = 0;
 8009f32:	f885 2030 	strb.w	r2, [r5, #48]	; 0x30
        new_obj->group_p = NULL;
 8009f36:	62ee      	str	r6, [r5, #44]	; 0x2c
        new_obj->protect = LV_PROTECT_NONE;
 8009f38:	f885 6031 	strb.w	r6, [r5, #49]	; 0x31
        new_obj->ext_attr = NULL;
 8009f3c:	622e      	str	r6, [r5, #32]
    obj->signal_func = fp;
 8009f3e:	f8c5 8018 	str.w	r8, [r5, #24]
    obj->design_func = fp;
 8009f42:	61ef      	str	r7, [r5, #28]
        new_obj->opa_scale = LV_OPA_COVER;
 8009f44:	f885 b032 	strb.w	fp, [r5, #50]	; 0x32
        new_obj = lv_ll_ins_head(&LV_GC_ROOT(_lv_scr_ll));
 8009f48:	487e      	ldr	r0, [pc, #504]	; (800a144 <lv_init+0x2c8>)
    LV_GC_ROOT(_lv_def_scr) = lv_obj_create(NULL, NULL);
 8009f4a:	6025      	str	r5, [r4, #0]
    LV_GC_ROOT(_lv_act_scr) = LV_GC_ROOT(_lv_def_scr);
 8009f4c:	601d      	str	r5, [r3, #0]
        new_obj = lv_ll_ins_head(&LV_GC_ROOT(_lv_scr_ll));
 8009f4e:	f008 ffe1 	bl	8012f14 <lv_ll_ins_head>
        lv_mem_assert(new_obj);
 8009f52:	4604      	mov	r4, r0
 8009f54:	2800      	cmp	r0, #0
 8009f56:	f000 80c8 	beq.w	800a0ea <lv_init+0x26e>
        new_obj->par = NULL; /*Screens has no a parent*/
 8009f5a:	4605      	mov	r5, r0
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 8009f5c:	2148      	movs	r1, #72	; 0x48
        new_obj->par = NULL; /*Screens has no a parent*/
 8009f5e:	f845 6b04 	str.w	r6, [r5], #4
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 8009f62:	4628      	mov	r0, r5
 8009f64:	f008 ffcc 	bl	8012f00 <lv_ll_init>
        new_obj->realign.auto_realign = 0;
 8009f68:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
        new_obj->coords.x1 = 0;
 8009f6c:	4976      	ldr	r1, [pc, #472]	; (800a148 <lv_init+0x2cc>)
        new_obj->realign.auto_realign = 0;
 8009f6e:	f366 0200 	bfi	r2, r6, #0, #1
        new_obj->coords.x1 = 0;
 8009f72:	6126      	str	r6, [r4, #16]
 8009f74:	6161      	str	r1, [r4, #20]
        new_obj->realign.auto_realign = 0;
 8009f76:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        new_obj->ext_size = 0;
 8009f7a:	86a6      	strh	r6, [r4, #52]	; 0x34
        new_obj->realign.align = LV_ALIGN_CENTER;
 8009f7c:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
        new_obj->realign.xofs = 0;
 8009f80:	63e6      	str	r6, [r4, #60]	; 0x3c
        new_obj->realign.base = NULL;
 8009f82:	63a6      	str	r6, [r4, #56]	; 0x38
        lv_theme_t * th = lv_theme_get_current();
 8009f84:	f013 fcd0 	bl	801d928 <lv_theme_get_current>
        new_obj->click = 0;
 8009f88:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
    obj->style_p = style;
 8009f8c:	4b70      	ldr	r3, [pc, #448]	; (800a150 <lv_init+0x2d4>)
        result = lv_ll_get_head(&obj->child_ll);
 8009f8e:	4628      	mov	r0, r5
        new_obj->opa_scale_en = 0;
 8009f90:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    obj->signal_func = fp;
 8009f94:	f8c4 8018 	str.w	r8, [r4, #24]
    obj->design_func = fp;
 8009f98:	61e7      	str	r7, [r4, #28]
        new_obj->opa_scale_en = 0;
 8009f9a:	f366 1286 	bfi	r2, r6, #6, #1
        new_obj->free_num = 0;
 8009f9e:	6466      	str	r6, [r4, #68]	; 0x44
        new_obj->free_ptr = NULL;
 8009fa0:	62a6      	str	r6, [r4, #40]	; 0x28
        new_obj->group_p = NULL;
 8009fa2:	62e6      	str	r6, [r4, #44]	; 0x2c
        new_obj->protect = LV_PROTECT_NONE;
 8009fa4:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
        new_obj->opa_scale = LV_OPA_COVER;
 8009fa8:	f884 b032 	strb.w	fp, [r4, #50]	; 0x32
        new_obj->ext_attr = NULL;
 8009fac:	6226      	str	r6, [r4, #32]
        new_obj->opa_scale_en = 0;
 8009fae:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    obj->style_p = style;
 8009fb2:	6263      	str	r3, [r4, #36]	; 0x24
    LV_GC_ROOT(_lv_top_layer) = lv_obj_create(NULL, NULL);
 8009fb4:	f8ca 4000 	str.w	r4, [sl]
        result = lv_ll_get_head(&obj->child_ll);
 8009fb8:	f009 f8ea 	bl	8013190 <lv_ll_get_head>
    while(child != NULL) {
 8009fbc:	4682      	mov	sl, r0
 8009fbe:	b930      	cbnz	r0, 8009fce <lv_init+0x152>
 8009fc0:	e017      	b.n	8009ff2 <lv_init+0x176>
        result = lv_ll_get_next(&obj->child_ll, child);
 8009fc2:	4651      	mov	r1, sl
 8009fc4:	4628      	mov	r0, r5
 8009fc6:	f009 f8eb 	bl	80131a0 <lv_ll_get_next>
    while(child != NULL) {
 8009fca:	4682      	mov	sl, r0
 8009fcc:	b188      	cbz	r0, 8009ff2 <lv_init+0x176>
        if(child->style_p == NULL) {
 8009fce:	f8da 6024 	ldr.w	r6, [sl, #36]	; 0x24
 8009fd2:	2e00      	cmp	r6, #0
 8009fd4:	f000 809a 	beq.w	800a10c <lv_init+0x290>
        } else if(child->style_p->glass) {
 8009fd8:	7833      	ldrb	r3, [r6, #0]
 8009fda:	07da      	lsls	r2, r3, #31
 8009fdc:	d5f1      	bpl.n	8009fc2 <lv_init+0x146>
            refresh_children_style(child);
 8009fde:	4650      	mov	r0, sl
 8009fe0:	f7ff faac 	bl	800953c <refresh_children_style>
        result = lv_ll_get_next(&obj->child_ll, child);
 8009fe4:	4651      	mov	r1, sl
 8009fe6:	4628      	mov	r0, r5
 8009fe8:	f009 f8da 	bl	80131a0 <lv_ll_get_next>
    while(child != NULL) {
 8009fec:	4682      	mov	sl, r0
 8009fee:	2800      	cmp	r0, #0
 8009ff0:	d1ed      	bne.n	8009fce <lv_init+0x152>
    lv_obj_invalidate(obj);
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	f7ff fe74 	bl	8009ce0 <lv_obj_invalidate>
    obj->signal_func(obj, LV_SIGNAL_STYLE_CHG, NULL);
 8009ff8:	69a3      	ldr	r3, [r4, #24]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	2103      	movs	r1, #3
 8009ffe:	4620      	mov	r0, r4
 800a000:	4798      	blx	r3
    lv_obj_invalidate(obj);
 800a002:	4620      	mov	r0, r4
 800a004:	f7ff fe6c 	bl	8009ce0 <lv_obj_invalidate>
        new_obj = lv_ll_ins_head(&LV_GC_ROOT(_lv_scr_ll));
 800a008:	484e      	ldr	r0, [pc, #312]	; (800a144 <lv_init+0x2c8>)
 800a00a:	f008 ff83 	bl	8012f14 <lv_ll_ins_head>
        lv_mem_assert(new_obj);
 800a00e:	4604      	mov	r4, r0
 800a010:	2800      	cmp	r0, #0
 800a012:	d07a      	beq.n	800a10a <lv_init+0x28e>
        new_obj->par = NULL; /*Screens has no a parent*/
 800a014:	f04f 0a00 	mov.w	sl, #0
 800a018:	4605      	mov	r5, r0
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 800a01a:	2148      	movs	r1, #72	; 0x48
        new_obj->par = NULL; /*Screens has no a parent*/
 800a01c:	f845 ab04 	str.w	sl, [r5], #4
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 800a020:	4628      	mov	r0, r5
 800a022:	f008 ff6d 	bl	8012f00 <lv_ll_init>
        new_obj->realign.auto_realign = 0;
 800a026:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
        new_obj->coords.x1 = 0;
 800a02a:	4a47      	ldr	r2, [pc, #284]	; (800a148 <lv_init+0x2cc>)
        new_obj->realign.auto_realign = 0;
 800a02c:	f36a 0300 	bfi	r3, sl, #0, #1
        new_obj->coords.x1 = 0;
 800a030:	f8c4 a010 	str.w	sl, [r4, #16]
 800a034:	6162      	str	r2, [r4, #20]
        new_obj->realign.auto_realign = 0;
 800a036:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        new_obj->ext_size = 0;
 800a03a:	f8a4 a034 	strh.w	sl, [r4, #52]	; 0x34
        new_obj->realign.align = LV_ALIGN_CENTER;
 800a03e:	f884 a040 	strb.w	sl, [r4, #64]	; 0x40
        new_obj->realign.xofs = 0;
 800a042:	f8c4 a03c 	str.w	sl, [r4, #60]	; 0x3c
        new_obj->realign.base = NULL;
 800a046:	f8c4 a038 	str.w	sl, [r4, #56]	; 0x38
        lv_theme_t * th = lv_theme_get_current();
 800a04a:	f013 fc6d 	bl	801d928 <lv_theme_get_current>
        new_obj->click = 0;
 800a04e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
        new_obj->opa_scale = LV_OPA_COVER;
 800a052:	22ff      	movs	r2, #255	; 0xff
    obj->style_p = style;
 800a054:	493e      	ldr	r1, [pc, #248]	; (800a150 <lv_init+0x2d4>)
        new_obj->opa_scale_en = 0;
 800a056:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    obj->design_func = fp;
 800a05a:	61e7      	str	r7, [r4, #28]
        new_obj->free_num = 0;
 800a05c:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
        result = lv_ll_get_head(&obj->child_ll);
 800a060:	4628      	mov	r0, r5
        new_obj->opa_scale_en = 0;
 800a062:	f36a 1386 	bfi	r3, sl, #6, #1
        new_obj->free_ptr = NULL;
 800a066:	f8c4 a028 	str.w	sl, [r4, #40]	; 0x28
        new_obj->group_p = NULL;
 800a06a:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
        new_obj->opa_scale_en = 0;
 800a06e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    LV_GC_ROOT(_lv_sys_layer) = lv_obj_create(NULL, NULL);
 800a072:	4b33      	ldr	r3, [pc, #204]	; (800a140 <lv_init+0x2c4>)
        new_obj->protect = LV_PROTECT_NONE;
 800a074:	f884 a031 	strb.w	sl, [r4, #49]	; 0x31
        new_obj->ext_attr = NULL;
 800a078:	f8c4 a020 	str.w	sl, [r4, #32]
    obj->signal_func = fp;
 800a07c:	f8c4 8018 	str.w	r8, [r4, #24]
    obj->style_p = style;
 800a080:	6261      	str	r1, [r4, #36]	; 0x24
        new_obj->opa_scale = LV_OPA_COVER;
 800a082:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
    LV_GC_ROOT(_lv_sys_layer) = lv_obj_create(NULL, NULL);
 800a086:	601c      	str	r4, [r3, #0]
        result = lv_ll_get_head(&obj->child_ll);
 800a088:	f009 f882 	bl	8013190 <lv_ll_get_head>
    while(child != NULL) {
 800a08c:	4607      	mov	r7, r0
 800a08e:	b930      	cbnz	r0, 800a09e <lv_init+0x222>
 800a090:	e014      	b.n	800a0bc <lv_init+0x240>
        result = lv_ll_get_next(&obj->child_ll, child);
 800a092:	4639      	mov	r1, r7
 800a094:	4628      	mov	r0, r5
 800a096:	f009 f883 	bl	80131a0 <lv_ll_get_next>
    while(child != NULL) {
 800a09a:	4607      	mov	r7, r0
 800a09c:	b170      	cbz	r0, 800a0bc <lv_init+0x240>
        if(child->style_p == NULL) {
 800a09e:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800a0a0:	b326      	cbz	r6, 800a0ec <lv_init+0x270>
        } else if(child->style_p->glass) {
 800a0a2:	7833      	ldrb	r3, [r6, #0]
 800a0a4:	07db      	lsls	r3, r3, #31
 800a0a6:	d5f4      	bpl.n	800a092 <lv_init+0x216>
            refresh_children_style(child);
 800a0a8:	4638      	mov	r0, r7
 800a0aa:	f7ff fa47 	bl	800953c <refresh_children_style>
        result = lv_ll_get_next(&obj->child_ll, child);
 800a0ae:	4639      	mov	r1, r7
 800a0b0:	4628      	mov	r0, r5
 800a0b2:	f009 f875 	bl	80131a0 <lv_ll_get_next>
    while(child != NULL) {
 800a0b6:	4607      	mov	r7, r0
 800a0b8:	2800      	cmp	r0, #0
 800a0ba:	d1f0      	bne.n	800a09e <lv_init+0x222>
    lv_obj_invalidate(obj);
 800a0bc:	4620      	mov	r0, r4
 800a0be:	f7ff fe0f 	bl	8009ce0 <lv_obj_invalidate>
    obj->signal_func(obj, LV_SIGNAL_STYLE_CHG, NULL);
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	2103      	movs	r1, #3
 800a0c6:	69a3      	ldr	r3, [r4, #24]
 800a0c8:	4620      	mov	r0, r4
 800a0ca:	4798      	blx	r3
    lv_obj_invalidate(obj);
 800a0cc:	4620      	mov	r0, r4
 800a0ce:	f7ff fe07 	bl	8009ce0 <lv_obj_invalidate>
    lv_obj_invalidate(LV_GC_ROOT(_lv_act_scr));
 800a0d2:	4b17      	ldr	r3, [pc, #92]	; (800a130 <lv_init+0x2b4>)
 800a0d4:	6818      	ldr	r0, [r3, #0]
 800a0d6:	f7ff fe03 	bl	8009ce0 <lv_obj_invalidate>
    lv_indev_init();
 800a0da:	f7ff f83b 	bl	8009154 <lv_indev_init>
    _lv_initialized = true;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	f889 3000 	strb.w	r3, [r9]
 800a0e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0e8:	e7fe      	b.n	800a0e8 <lv_init+0x26c>
 800a0ea:	e7fe      	b.n	800a0ea <lv_init+0x26e>
            refresh_children_style(child);     /*Check children too*/
 800a0ec:	4638      	mov	r0, r7
 800a0ee:	f7ff fa25 	bl	800953c <refresh_children_style>
    lv_obj_invalidate(obj);
 800a0f2:	4638      	mov	r0, r7
 800a0f4:	f7ff fdf4 	bl	8009ce0 <lv_obj_invalidate>
    obj->signal_func(obj, LV_SIGNAL_STYLE_CHG, NULL);
 800a0f8:	4632      	mov	r2, r6
 800a0fa:	69bb      	ldr	r3, [r7, #24]
 800a0fc:	2103      	movs	r1, #3
 800a0fe:	4638      	mov	r0, r7
 800a100:	4798      	blx	r3
    lv_obj_invalidate(obj);
 800a102:	4638      	mov	r0, r7
 800a104:	f7ff fdec 	bl	8009ce0 <lv_obj_invalidate>
 800a108:	e7c3      	b.n	800a092 <lv_init+0x216>
 800a10a:	e7fe      	b.n	800a10a <lv_init+0x28e>
            refresh_children_style(child);     /*Check children too*/
 800a10c:	4650      	mov	r0, sl
 800a10e:	f7ff fa15 	bl	800953c <refresh_children_style>
    lv_obj_invalidate(obj);
 800a112:	4650      	mov	r0, sl
 800a114:	f7ff fde4 	bl	8009ce0 <lv_obj_invalidate>
    obj->signal_func(obj, LV_SIGNAL_STYLE_CHG, NULL);
 800a118:	4632      	mov	r2, r6
 800a11a:	f8da 3018 	ldr.w	r3, [sl, #24]
 800a11e:	2103      	movs	r1, #3
 800a120:	4650      	mov	r0, sl
 800a122:	4798      	blx	r3
    lv_obj_invalidate(obj);
 800a124:	4650      	mov	r0, sl
 800a126:	f7ff fddb 	bl	8009ce0 <lv_obj_invalidate>
 800a12a:	e74a      	b.n	8009fc2 <lv_init+0x146>
            new_obj->style_p = &lv_style_scr;
 800a12c:	4909      	ldr	r1, [pc, #36]	; (800a154 <lv_init+0x2d8>)
 800a12e:	e6f0      	b.n	8009f12 <lv_init+0x96>
 800a130:	200194b4 	.word	0x200194b4
 800a134:	200194f8 	.word	0x200194f8
 800a138:	200194dc 	.word	0x200194dc
 800a13c:	200194b8 	.word	0x200194b8
 800a140:	200194d8 	.word	0x200194d8
 800a144:	200194c8 	.word	0x200194c8
 800a148:	010f01df 	.word	0x010f01df
 800a14c:	080099f9 	.word	0x080099f9
 800a150:	200192f4 	.word	0x200192f4
 800a154:	200193cc 	.word	0x200193cc
 800a158:	20000cb0 	.word	0x20000cb0
 800a15c:	200194b0 	.word	0x200194b0
 800a160:	08009d89 	.word	0x08009d89

0800a164 <lv_obj_set_pos>:
{
 800a164:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    lv_obj_t * par = obj->par;
 800a168:	6806      	ldr	r6, [r0, #0]
{
 800a16a:	b083      	sub	sp, #12
    diff.x =  x - obj->coords.x1;
 800a16c:	8a04      	ldrh	r4, [r0, #16]
 800a16e:	8a35      	ldrh	r5, [r6, #16]
    diff.y =  y - obj->coords.y1;
 800a170:	8a73      	ldrh	r3, [r6, #18]
    diff.x =  x - obj->coords.x1;
 800a172:	1b2d      	subs	r5, r5, r4
    diff.y =  y - obj->coords.y1;
 800a174:	8a44      	ldrh	r4, [r0, #18]
    diff.x =  x - obj->coords.x1;
 800a176:	440d      	add	r5, r1
    diff.y =  y - obj->coords.y1;
 800a178:	1b1b      	subs	r3, r3, r4
    diff.x =  x - obj->coords.x1;
 800a17a:	b2ad      	uxth	r5, r5
    diff.y =  y - obj->coords.y1;
 800a17c:	4413      	add	r3, r2
    diff.x =  x - obj->coords.x1;
 800a17e:	fa0f f885 	sxth.w	r8, r5
    diff.y =  y - obj->coords.y1;
 800a182:	b29f      	uxth	r7, r3
 800a184:	fa0f f987 	sxth.w	r9, r7
    if(diff.x == 0 && diff.y == 0) return;
 800a188:	f1b8 0f00 	cmp.w	r8, #0
 800a18c:	d105      	bne.n	800a19a <lv_obj_set_pos+0x36>
 800a18e:	f1b9 0f00 	cmp.w	r9, #0
 800a192:	d102      	bne.n	800a19a <lv_obj_set_pos+0x36>
}
 800a194:	b003      	add	sp, #12
 800a196:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a19a:	4604      	mov	r4, r0
    lv_obj_invalidate(obj);
 800a19c:	f7ff fda0 	bl	8009ce0 <lv_obj_invalidate>
    refresh_children_position(obj, diff.x, diff.y);
 800a1a0:	464a      	mov	r2, r9
 800a1a2:	46ee      	mov	lr, sp
    obj->coords.x1 += diff.x;
 800a1a4:	8a23      	ldrh	r3, [r4, #16]
 800a1a6:	4621      	mov	r1, r4
    obj->coords.y1 += diff.y;
 800a1a8:	f8b4 c012 	ldrh.w	ip, [r4, #18]
 800a1ac:	f851 0f10 	ldr.w	r0, [r1, #16]!
    obj->coords.x1 += diff.x;
 800a1b0:	442b      	add	r3, r5
    obj->coords.x2 += diff.x;
 800a1b2:	f8b4 9014 	ldrh.w	r9, [r4, #20]
    obj->coords.y1 += diff.y;
 800a1b6:	44bc      	add	ip, r7
 800a1b8:	6849      	ldr	r1, [r1, #4]
    obj->coords.x1 += diff.x;
 800a1ba:	8223      	strh	r3, [r4, #16]
    obj->coords.x2 += diff.x;
 800a1bc:	444d      	add	r5, r9
    obj->coords.y2 += diff.y;
 800a1be:	8ae3      	ldrh	r3, [r4, #22]
    obj->coords.y1 += diff.y;
 800a1c0:	f8a4 c012 	strh.w	ip, [r4, #18]
    obj->coords.y2 += diff.y;
 800a1c4:	443b      	add	r3, r7
    obj->coords.x2 += diff.x;
 800a1c6:	82a5      	strh	r5, [r4, #20]
 800a1c8:	e8ae 0003 	stmia.w	lr!, {r0, r1}
    obj->coords.y2 += diff.y;
 800a1cc:	82e3      	strh	r3, [r4, #22]
    refresh_children_position(obj, diff.x, diff.y);
 800a1ce:	4641      	mov	r1, r8
 800a1d0:	4620      	mov	r0, r4
 800a1d2:	f7ff f881 	bl	80092d8 <refresh_children_position>
    obj->signal_func(obj, LV_SIGNAL_CORD_CHG, &ori);
 800a1d6:	466a      	mov	r2, sp
 800a1d8:	69a3      	ldr	r3, [r4, #24]
 800a1da:	2102      	movs	r1, #2
 800a1dc:	4620      	mov	r0, r4
 800a1de:	4798      	blx	r3
    par->signal_func(par, LV_SIGNAL_CHILD_CHG, obj);
 800a1e0:	69b3      	ldr	r3, [r6, #24]
 800a1e2:	4622      	mov	r2, r4
 800a1e4:	2101      	movs	r1, #1
 800a1e6:	4630      	mov	r0, r6
 800a1e8:	4798      	blx	r3
    lv_obj_invalidate(obj);
 800a1ea:	4620      	mov	r0, r4
 800a1ec:	f7ff fd78 	bl	8009ce0 <lv_obj_invalidate>
}
 800a1f0:	b003      	add	sp, #12
 800a1f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1f6:	bf00      	nop

0800a1f8 <lv_obj_create>:
{
 800a1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1fa:	460d      	mov	r5, r1
    if(parent == NULL) {
 800a1fc:	4606      	mov	r6, r0
 800a1fe:	2800      	cmp	r0, #0
 800a200:	f000 80c7 	beq.w	800a392 <lv_obj_create+0x19a>
        new_obj = lv_ll_ins_head(&(parent)->child_ll);
 800a204:	3004      	adds	r0, #4
 800a206:	f008 fe85 	bl	8012f14 <lv_ll_ins_head>
        lv_mem_assert(new_obj);
 800a20a:	4604      	mov	r4, r0
 800a20c:	2800      	cmp	r0, #0
 800a20e:	f000 80bf 	beq.w	800a390 <lv_obj_create+0x198>
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 800a212:	2148      	movs	r1, #72	; 0x48
        new_obj->par = parent; /*Set the parent*/
 800a214:	f840 6b04 	str.w	r6, [r0], #4
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 800a218:	f008 fe72 	bl	8012f00 <lv_ll_init>
        new_obj->coords.x1 = parent->coords.x1;
 800a21c:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
        new_obj->coords.y1 = parent->coords.y1;
 800a220:	f9b6 2012 	ldrsh.w	r2, [r6, #18]
        new_obj->ext_size = 0;
 800a224:	2300      	movs	r3, #0
        new_obj->realign.auto_realign = 0;
 800a226:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
        new_obj->coords.x1 = parent->coords.x1;
 800a22a:	8221      	strh	r1, [r4, #16]
        new_obj->coords.y1 = parent->coords.y1;
 800a22c:	8262      	strh	r2, [r4, #18]
        new_obj->realign.auto_realign = 0;
 800a22e:	f363 0000 	bfi	r0, r3, #0, #1
        new_obj->coords.x2 = parent->coords.x1 +
 800a232:	8a31      	ldrh	r1, [r6, #16]
        new_obj->coords.y2 = parent->coords.y1 +
 800a234:	8a72      	ldrh	r2, [r6, #18]
        new_obj->coords.x2 = parent->coords.x1 +
 800a236:	3164      	adds	r1, #100	; 0x64
        new_obj->ext_size = 0;
 800a238:	86a3      	strh	r3, [r4, #52]	; 0x34
        new_obj->coords.y2 = parent->coords.y1 +
 800a23a:	3242      	adds	r2, #66	; 0x42
        new_obj->realign.align = LV_ALIGN_CENTER;
 800a23c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        new_obj->coords.x2 = parent->coords.x1 +
 800a240:	82a1      	strh	r1, [r4, #20]
        new_obj->coords.y2 = parent->coords.y1 +
 800a242:	82e2      	strh	r2, [r4, #22]
        new_obj->realign.xofs = 0;
 800a244:	63e3      	str	r3, [r4, #60]	; 0x3c
        new_obj->realign.base = NULL;
 800a246:	63a3      	str	r3, [r4, #56]	; 0x38
        new_obj->realign.auto_realign = 0;
 800a248:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
        lv_theme_t * th = lv_theme_get_current();
 800a24c:	f013 fb6c 	bl	801d928 <lv_theme_get_current>
        if(th) {
 800a250:	2800      	cmp	r0, #0
 800a252:	f000 80d3 	beq.w	800a3fc <lv_obj_create+0x204>
            new_obj->style_p = th->panel;
 800a256:	6841      	ldr	r1, [r0, #4]
        new_obj->click = 1;
 800a258:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
        new_obj->free_num = 0;
 800a25c:	2300      	movs	r3, #0
    obj->signal_func = fp;
 800a25e:	4f69      	ldr	r7, [pc, #420]	; (800a404 <lv_obj_create+0x20c>)
        new_obj->opa_scale = LV_OPA_COVER;
 800a260:	20ff      	movs	r0, #255	; 0xff
        new_obj->drag = 0;
 800a262:	f042 0201 	orr.w	r2, r2, #1
 800a266:	6261      	str	r1, [r4, #36]	; 0x24
    obj->design_func = fp;
 800a268:	4967      	ldr	r1, [pc, #412]	; (800a408 <lv_obj_create+0x210>)
        new_obj->opa_scale_en = 0;
 800a26a:	f002 02c1 	and.w	r2, r2, #193	; 0xc1
        new_obj->free_num = 0;
 800a26e:	6463      	str	r3, [r4, #68]	; 0x44
        new_obj->free_ptr = NULL;
 800a270:	62a3      	str	r3, [r4, #40]	; 0x28
        new_obj->opa_scale_en = 0;
 800a272:	f363 1286 	bfi	r2, r3, #6, #1
        new_obj->group_p = NULL;
 800a276:	62e3      	str	r3, [r4, #44]	; 0x2c
        new_obj->protect = LV_PROTECT_NONE;
 800a278:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
        new_obj->opa_scale_en = 0;
 800a27c:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->ext_attr = NULL;
 800a280:	6223      	str	r3, [r4, #32]
    obj->signal_func = fp;
 800a282:	61a7      	str	r7, [r4, #24]
    obj->design_func = fp;
 800a284:	61e1      	str	r1, [r4, #28]
        new_obj->opa_scale = LV_OPA_COVER;
 800a286:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
    if(copy != NULL) {
 800a28a:	2d00      	cmp	r5, #0
 800a28c:	d075      	beq.n	800a37a <lv_obj_create+0x182>
 800a28e:	462b      	mov	r3, r5
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 800a290:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
        new_obj->click = copy->click;
 800a294:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800a298:	f853 0f10 	ldr.w	r0, [r3, #16]!
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	6120      	str	r0, [r4, #16]
 800a2a0:	6163      	str	r3, [r4, #20]
        new_obj->free_num = copy->free_num;
 800a2a2:	6c68      	ldr	r0, [r5, #68]	; 0x44
        new_obj->free_ptr = copy->free_ptr;
 800a2a4:	6aab      	ldr	r3, [r5, #40]	; 0x28
        new_obj->ext_size = copy->ext_size;
 800a2a6:	f9b5 7034 	ldrsh.w	r7, [r5, #52]	; 0x34
        new_obj->free_num = copy->free_num;
 800a2aa:	6460      	str	r0, [r4, #68]	; 0x44
        new_obj->ext_size = copy->ext_size;
 800a2ac:	86a7      	strh	r7, [r4, #52]	; 0x34
        new_obj->free_ptr = copy->free_ptr;
 800a2ae:	62a3      	str	r3, [r4, #40]	; 0x28
        new_obj->realign.align = copy->realign.align;
 800a2b0:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 800a2b4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        new_obj->realign.xofs = copy->realign.xofs;
 800a2b8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
        new_obj->realign.base = copy->realign.base;
 800a2ba:	6ba8      	ldr	r0, [r5, #56]	; 0x38
        new_obj->realign.xofs = copy->realign.xofs;
 800a2bc:	63e3      	str	r3, [r4, #60]	; 0x3c
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 800a2be:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
        new_obj->realign.base = copy->realign.base;
 800a2c2:	63a0      	str	r0, [r4, #56]	; 0x38
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 800a2c4:	f363 0100 	bfi	r1, r3, #0, #1
 800a2c8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        new_obj->click = copy->click;
 800a2cc:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800a2d0:	f363 0200 	bfi	r2, r3, #0, #1
 800a2d4:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->drag = copy->drag;
 800a2d8:	b2d2      	uxtb	r2, r2
 800a2da:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800a2de:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a2e2:	f363 0241 	bfi	r2, r3, #1, #1
 800a2e6:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->drag_throw = copy->drag_throw;
 800a2ea:	b2d2      	uxtb	r2, r2
 800a2ec:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800a2f0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a2f4:	f363 0282 	bfi	r2, r3, #2, #1
 800a2f8:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->drag_parent = copy->drag_parent;
 800a2fc:	b2d2      	uxtb	r2, r2
 800a2fe:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800a302:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a306:	f363 02c3 	bfi	r2, r3, #3, #1
 800a30a:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->hidden = copy->hidden;
 800a30e:	b2d2      	uxtb	r2, r2
 800a310:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800a314:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a318:	f363 1204 	bfi	r2, r3, #4, #1
 800a31c:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->top = copy->top;
 800a320:	b2d2      	uxtb	r2, r2
 800a322:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800a326:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a32a:	f363 1245 	bfi	r2, r3, #5, #1
 800a32e:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->opa_scale_en = copy->opa_scale_en;
 800a332:	b2d2      	uxtb	r2, r2
 800a334:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800a338:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a33c:	f363 1286 	bfi	r2, r3, #6, #1
 800a340:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->protect = copy->protect;
 800a344:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 800a348:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
        new_obj->opa_scale = copy->opa_scale;
 800a34c:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
 800a350:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        new_obj->style_p = copy->style_p;
 800a354:	6a6b      	ldr	r3, [r5, #36]	; 0x24
        if(copy->group_p != NULL) {
 800a356:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
        new_obj->style_p = copy->style_p;
 800a358:	6263      	str	r3, [r4, #36]	; 0x24
        if(copy->group_p != NULL) {
 800a35a:	b110      	cbz	r0, 800a362 <lv_obj_create+0x16a>
            lv_group_add_obj(copy->group_p, new_obj);
 800a35c:	4621      	mov	r1, r4
 800a35e:	f7fd fedb 	bl	8008118 <lv_group_add_obj>
    return obj->par;
 800a362:	682b      	ldr	r3, [r5, #0]
        lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
 800a364:	4620      	mov	r0, r4
    rel_y = obj->coords.y1 - parent->coords.y1;
 800a366:	8a6a      	ldrh	r2, [r5, #18]
 800a368:	8a5f      	ldrh	r7, [r3, #18]
    rel_x = obj->coords.x1 - parent->coords.x1;
 800a36a:	8a29      	ldrh	r1, [r5, #16]
 800a36c:	8a1b      	ldrh	r3, [r3, #16]
    rel_y = obj->coords.y1 - parent->coords.y1;
 800a36e:	1bd2      	subs	r2, r2, r7
    rel_x = obj->coords.x1 - parent->coords.x1;
 800a370:	1ac9      	subs	r1, r1, r3
        lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
 800a372:	b212      	sxth	r2, r2
 800a374:	b209      	sxth	r1, r1
 800a376:	f7ff fef5 	bl	800a164 <lv_obj_set_pos>
    if(parent != NULL) {
 800a37a:	b13e      	cbz	r6, 800a38c <lv_obj_create+0x194>
        parent->signal_func(parent, LV_SIGNAL_CHILD_CHG, new_obj);
 800a37c:	69b3      	ldr	r3, [r6, #24]
 800a37e:	4630      	mov	r0, r6
 800a380:	4622      	mov	r2, r4
 800a382:	2101      	movs	r1, #1
 800a384:	4798      	blx	r3
        lv_obj_invalidate(new_obj);
 800a386:	4620      	mov	r0, r4
 800a388:	f7ff fcaa 	bl	8009ce0 <lv_obj_invalidate>
}
 800a38c:	4620      	mov	r0, r4
 800a38e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a390:	e7fe      	b.n	800a390 <lv_obj_create+0x198>
        new_obj = lv_ll_ins_head(&LV_GC_ROOT(_lv_scr_ll));
 800a392:	481e      	ldr	r0, [pc, #120]	; (800a40c <lv_obj_create+0x214>)
 800a394:	f008 fdbe 	bl	8012f14 <lv_ll_ins_head>
        lv_mem_assert(new_obj);
 800a398:	4604      	mov	r4, r0
 800a39a:	b370      	cbz	r0, 800a3fa <lv_obj_create+0x202>
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 800a39c:	2148      	movs	r1, #72	; 0x48
        new_obj->par = NULL; /*Screens has no a parent*/
 800a39e:	f840 6b04 	str.w	r6, [r0], #4
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 800a3a2:	f008 fdad 	bl	8012f00 <lv_ll_init>
        new_obj->realign.auto_realign = 0;
 800a3a6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
        new_obj->coords.x1 = 0;
 800a3aa:	4a19      	ldr	r2, [pc, #100]	; (800a410 <lv_obj_create+0x218>)
        new_obj->realign.auto_realign = 0;
 800a3ac:	f366 0300 	bfi	r3, r6, #0, #1
        new_obj->coords.x1 = 0;
 800a3b0:	6126      	str	r6, [r4, #16]
        new_obj->ext_size = 0;
 800a3b2:	86a6      	strh	r6, [r4, #52]	; 0x34
        new_obj->realign.align = LV_ALIGN_CENTER;
 800a3b4:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
        new_obj->realign.xofs = 0;
 800a3b8:	63e6      	str	r6, [r4, #60]	; 0x3c
        new_obj->realign.base = NULL;
 800a3ba:	63a6      	str	r6, [r4, #56]	; 0x38
        new_obj->realign.auto_realign = 0;
 800a3bc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        new_obj->coords.x1 = 0;
 800a3c0:	6162      	str	r2, [r4, #20]
        lv_theme_t * th = lv_theme_get_current();
 800a3c2:	f013 fab1 	bl	801d928 <lv_theme_get_current>
        if(th) {
 800a3c6:	b1d8      	cbz	r0, 800a400 <lv_obj_create+0x208>
            new_obj->style_p = th->bg;
 800a3c8:	6801      	ldr	r1, [r0, #0]
        new_obj->click = 0;
 800a3ca:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
        new_obj->free_num = 0;
 800a3ce:	2300      	movs	r3, #0
    obj->signal_func = fp;
 800a3d0:	4f0c      	ldr	r7, [pc, #48]	; (800a404 <lv_obj_create+0x20c>)
        new_obj->opa_scale = LV_OPA_COVER;
 800a3d2:	20ff      	movs	r0, #255	; 0xff
        new_obj->opa_scale_en = 0;
 800a3d4:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 800a3d8:	6261      	str	r1, [r4, #36]	; 0x24
    obj->design_func = fp;
 800a3da:	490b      	ldr	r1, [pc, #44]	; (800a408 <lv_obj_create+0x210>)
        new_obj->opa_scale_en = 0;
 800a3dc:	f363 1286 	bfi	r2, r3, #6, #1
        new_obj->free_num = 0;
 800a3e0:	6463      	str	r3, [r4, #68]	; 0x44
        new_obj->free_ptr = NULL;
 800a3e2:	62a3      	str	r3, [r4, #40]	; 0x28
        new_obj->opa_scale_en = 0;
 800a3e4:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->group_p = NULL;
 800a3e8:	62e3      	str	r3, [r4, #44]	; 0x2c
        new_obj->protect = LV_PROTECT_NONE;
 800a3ea:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
        new_obj->ext_attr = NULL;
 800a3ee:	6223      	str	r3, [r4, #32]
    obj->signal_func = fp;
 800a3f0:	61a7      	str	r7, [r4, #24]
    obj->design_func = fp;
 800a3f2:	61e1      	str	r1, [r4, #28]
        new_obj->opa_scale = LV_OPA_COVER;
 800a3f4:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
 800a3f8:	e747      	b.n	800a28a <lv_obj_create+0x92>
 800a3fa:	e7fe      	b.n	800a3fa <lv_obj_create+0x202>
            new_obj->style_p = &lv_style_plain_color;
 800a3fc:	4905      	ldr	r1, [pc, #20]	; (800a414 <lv_obj_create+0x21c>)
 800a3fe:	e72b      	b.n	800a258 <lv_obj_create+0x60>
            new_obj->style_p = &lv_style_scr;
 800a400:	4905      	ldr	r1, [pc, #20]	; (800a418 <lv_obj_create+0x220>)
 800a402:	e7e2      	b.n	800a3ca <lv_obj_create+0x1d2>
 800a404:	08009d89 	.word	0x08009d89
 800a408:	080099f9 	.word	0x080099f9
 800a40c:	200194c8 	.word	0x200194c8
 800a410:	010f01df 	.word	0x010f01df
 800a414:	2001945c 	.word	0x2001945c
 800a418:	200193cc 	.word	0x200193cc

0800a41c <lv_obj_set_parent>:
{
 800a41c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(obj->par == NULL) {
 800a420:	6804      	ldr	r4, [r0, #0]
{
 800a422:	b082      	sub	sp, #8
    if(parent == NULL) {
 800a424:	2c00      	cmp	r4, #0
 800a426:	d04f      	beq.n	800a4c8 <lv_obj_set_parent+0xac>
 800a428:	2900      	cmp	r1, #0
 800a42a:	d04d      	beq.n	800a4c8 <lv_obj_set_parent+0xac>
    return obj->hidden == 0 ? false : true;
 800a42c:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800a430:	4605      	mov	r5, r0
 800a432:	460f      	mov	r7, r1
    if(lv_obj_get_hidden(obj)) return;
 800a434:	06d8      	lsls	r0, r3, #27
 800a436:	d411      	bmi.n	800a45c <lv_obj_set_parent+0x40>
 800a438:	4622      	mov	r2, r4
 800a43a:	e000      	b.n	800a43e <lv_obj_set_parent+0x22>
    } while(par != NULL);
 800a43c:	461a      	mov	r2, r3
 800a43e:	6813      	ldr	r3, [r2, #0]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d1fb      	bne.n	800a43c <lv_obj_set_parent+0x20>
    return LV_GC_ROOT(_lv_act_scr);
 800a444:	4b54      	ldr	r3, [pc, #336]	; (800a598 <lv_obj_set_parent+0x17c>)
    if(obj_scr == lv_scr_act() ||
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	4293      	cmp	r3, r2
 800a44a:	d040      	beq.n	800a4ce <lv_obj_set_parent+0xb2>
    return LV_GC_ROOT(_lv_top_layer);
 800a44c:	4b53      	ldr	r3, [pc, #332]	; (800a59c <lv_obj_set_parent+0x180>)
    if(obj_scr == lv_scr_act() ||
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4293      	cmp	r3, r2
 800a452:	d03c      	beq.n	800a4ce <lv_obj_set_parent+0xb2>
    return LV_GC_ROOT(_lv_sys_layer);
 800a454:	4b52      	ldr	r3, [pc, #328]	; (800a5a0 <lv_obj_set_parent+0x184>)
            obj_scr == lv_layer_top() ||
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4293      	cmp	r3, r2
 800a45a:	d038      	beq.n	800a4ce <lv_obj_set_parent+0xb2>
    rel_x = obj->coords.x1 - parent->coords.x1;
 800a45c:	8a23      	ldrh	r3, [r4, #16]
    lv_ll_chg_list(&obj->par->child_ll, &parent->child_ll, obj);
 800a45e:	462a      	mov	r2, r5
    rel_x = obj->coords.x1 - parent->coords.x1;
 800a460:	f8b5 8010 	ldrh.w	r8, [r5, #16]
    lv_ll_chg_list(&obj->par->child_ll, &parent->child_ll, obj);
 800a464:	1d39      	adds	r1, r7, #4
    rel_y = obj->coords.y1 - parent->coords.y1;
 800a466:	8a6e      	ldrh	r6, [r5, #18]
    lv_ll_chg_list(&obj->par->child_ll, &parent->child_ll, obj);
 800a468:	1d20      	adds	r0, r4, #4
    rel_x = obj->coords.x1 - parent->coords.x1;
 800a46a:	eba8 0803 	sub.w	r8, r8, r3
    rel_y = obj->coords.y1 - parent->coords.y1;
 800a46e:	8a63      	ldrh	r3, [r4, #18]
 800a470:	1af6      	subs	r6, r6, r3
    rel_x = obj->coords.x1 - parent->coords.x1;
 800a472:	fa0f f888 	sxth.w	r8, r8
    lv_ll_chg_list(&obj->par->child_ll, &parent->child_ll, obj);
 800a476:	f008 fe2b 	bl	80130d0 <lv_ll_chg_list>
    lv_obj_set_pos(obj, old_pos.x, old_pos.y);
 800a47a:	4628      	mov	r0, r5
    rel_y = obj->coords.y1 - parent->coords.y1;
 800a47c:	b236      	sxth	r6, r6
    lv_obj_set_pos(obj, old_pos.x, old_pos.y);
 800a47e:	4641      	mov	r1, r8
    obj->par = parent;
 800a480:	602f      	str	r7, [r5, #0]
    lv_obj_set_pos(obj, old_pos.x, old_pos.y);
 800a482:	4632      	mov	r2, r6
 800a484:	f7ff fe6e 	bl	800a164 <lv_obj_set_pos>
    old_par->signal_func(old_par, LV_SIGNAL_CHILD_CHG, NULL);
 800a488:	69a3      	ldr	r3, [r4, #24]
 800a48a:	2200      	movs	r2, #0
 800a48c:	2101      	movs	r1, #1
 800a48e:	4620      	mov	r0, r4
 800a490:	4798      	blx	r3
    parent->signal_func(parent, LV_SIGNAL_CHILD_CHG, obj);
 800a492:	69bb      	ldr	r3, [r7, #24]
 800a494:	462a      	mov	r2, r5
 800a496:	4638      	mov	r0, r7
 800a498:	2101      	movs	r1, #1
 800a49a:	4798      	blx	r3
    return obj->hidden == 0 ? false : true;
 800a49c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    if(lv_obj_get_hidden(obj)) return;
 800a4a0:	06da      	lsls	r2, r3, #27
 800a4a2:	d411      	bmi.n	800a4c8 <lv_obj_set_parent+0xac>
 800a4a4:	462a      	mov	r2, r5
 800a4a6:	e000      	b.n	800a4aa <lv_obj_set_parent+0x8e>
    } while(par != NULL);
 800a4a8:	461a      	mov	r2, r3
    return obj->par;
 800a4aa:	6813      	ldr	r3, [r2, #0]
    } while(par != NULL);
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d1fb      	bne.n	800a4a8 <lv_obj_set_parent+0x8c>
    return LV_GC_ROOT(_lv_act_scr);
 800a4b0:	4b39      	ldr	r3, [pc, #228]	; (800a598 <lv_obj_set_parent+0x17c>)
    if(obj_scr == lv_scr_act() ||
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	429a      	cmp	r2, r3
 800a4b6:	d03b      	beq.n	800a530 <lv_obj_set_parent+0x114>
    return LV_GC_ROOT(_lv_top_layer);
 800a4b8:	4b38      	ldr	r3, [pc, #224]	; (800a59c <lv_obj_set_parent+0x180>)
    if(obj_scr == lv_scr_act() ||
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d037      	beq.n	800a530 <lv_obj_set_parent+0x114>
    return LV_GC_ROOT(_lv_sys_layer);
 800a4c0:	4b37      	ldr	r3, [pc, #220]	; (800a5a0 <lv_obj_set_parent+0x184>)
            obj_scr == lv_layer_top() ||
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	d033      	beq.n	800a530 <lv_obj_set_parent+0x114>
}
 800a4c8:	b002      	add	sp, #8
 800a4ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4ce:	4629      	mov	r1, r5
        lv_coord_t ext_size = obj->ext_size;
 800a4d0:	f9b5 3034 	ldrsh.w	r3, [r5, #52]	; 0x34
 800a4d4:	466a      	mov	r2, sp
 800a4d6:	466e      	mov	r6, sp
 800a4d8:	f851 0f10 	ldr.w	r0, [r1, #16]!
        area_trunc.x1 -= ext_size;
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	6849      	ldr	r1, [r1, #4]
 800a4e0:	c203      	stmia	r2!, {r0, r1}
 800a4e2:	f8bd 0000 	ldrh.w	r0, [sp]
        area_trunc.y1 -= ext_size;
 800a4e6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
        area_trunc.x2 += ext_size;
 800a4ea:	f8bd 2004 	ldrh.w	r2, [sp, #4]
        area_trunc.x1 -= ext_size;
 800a4ee:	1ac0      	subs	r0, r0, r3
        area_trunc.y2 += ext_size;
 800a4f0:	f8bd e006 	ldrh.w	lr, [sp, #6]
        area_trunc.y1 -= ext_size;
 800a4f4:	1ac9      	subs	r1, r1, r3
        area_trunc.x2 += ext_size;
 800a4f6:	441a      	add	r2, r3
        area_trunc.x1 -= ext_size;
 800a4f8:	f8ad 0000 	strh.w	r0, [sp]
        area_trunc.y2 += ext_size;
 800a4fc:	4473      	add	r3, lr
        area_trunc.y1 -= ext_size;
 800a4fe:	f8ad 1002 	strh.w	r1, [sp, #2]
        area_trunc.x2 += ext_size;
 800a502:	f8ad 2004 	strh.w	r2, [sp, #4]
        area_trunc.y2 += ext_size;
 800a506:	f8ad 3006 	strh.w	r3, [sp, #6]
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 800a50a:	f104 0210 	add.w	r2, r4, #16
 800a50e:	4631      	mov	r1, r6
 800a510:	4630      	mov	r0, r6
 800a512:	f008 fad9 	bl	8012ac8 <lv_area_intersect>
            if(union_ok == false) break;        /*If no common parts with parent break;*/
 800a516:	b148      	cbz	r0, 800a52c <lv_obj_set_parent+0x110>
    return obj->hidden == 0 ? false : true;
 800a518:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
            if(lv_obj_get_hidden(par)) return;  /*If the parent is hidden then the child is hidden and won't be drawn*/
 800a51c:	06d9      	lsls	r1, r3, #27
 800a51e:	d405      	bmi.n	800a52c <lv_obj_set_parent+0x110>
    return obj->par;
 800a520:	6824      	ldr	r4, [r4, #0]
        while(par != NULL) {
 800a522:	2c00      	cmp	r4, #0
 800a524:	d1f1      	bne.n	800a50a <lv_obj_set_parent+0xee>
        if(union_ok != false) lv_inv_area(&area_trunc);
 800a526:	4630      	mov	r0, r6
 800a528:	f001 ff76 	bl	800c418 <lv_inv_area>
 800a52c:	682c      	ldr	r4, [r5, #0]
 800a52e:	e795      	b.n	800a45c <lv_obj_set_parent+0x40>
 800a530:	4629      	mov	r1, r5
        lv_coord_t ext_size = obj->ext_size;
 800a532:	f9b5 3034 	ldrsh.w	r3, [r5, #52]	; 0x34
 800a536:	466a      	mov	r2, sp
    return obj->par;
 800a538:	682c      	ldr	r4, [r5, #0]
 800a53a:	f851 0f10 	ldr.w	r0, [r1, #16]!
        area_trunc.x1 -= ext_size;
 800a53e:	b29b      	uxth	r3, r3
 800a540:	466e      	mov	r6, sp
 800a542:	6849      	ldr	r1, [r1, #4]
 800a544:	c203      	stmia	r2!, {r0, r1}
 800a546:	f8bd 0000 	ldrh.w	r0, [sp]
        area_trunc.y1 -= ext_size;
 800a54a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
        area_trunc.x2 += ext_size;
 800a54e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
        area_trunc.x1 -= ext_size;
 800a552:	1ac0      	subs	r0, r0, r3
        area_trunc.y2 += ext_size;
 800a554:	f8bd 5006 	ldrh.w	r5, [sp, #6]
        area_trunc.y1 -= ext_size;
 800a558:	1ac9      	subs	r1, r1, r3
        area_trunc.x2 += ext_size;
 800a55a:	441a      	add	r2, r3
        area_trunc.x1 -= ext_size;
 800a55c:	f8ad 0000 	strh.w	r0, [sp]
        area_trunc.y2 += ext_size;
 800a560:	442b      	add	r3, r5
        area_trunc.y1 -= ext_size;
 800a562:	f8ad 1002 	strh.w	r1, [sp, #2]
        area_trunc.x2 += ext_size;
 800a566:	f8ad 2004 	strh.w	r2, [sp, #4]
        area_trunc.y2 += ext_size;
 800a56a:	f8ad 3006 	strh.w	r3, [sp, #6]
        while(par != NULL) {
 800a56e:	b934      	cbnz	r4, 800a57e <lv_obj_set_parent+0x162>
 800a570:	e00e      	b.n	800a590 <lv_obj_set_parent+0x174>
    return obj->hidden == 0 ? false : true;
 800a572:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
            if(lv_obj_get_hidden(par)) return;  /*If the parent is hidden then the child is hidden and won't be drawn*/
 800a576:	06db      	lsls	r3, r3, #27
 800a578:	d4a6      	bmi.n	800a4c8 <lv_obj_set_parent+0xac>
    return obj->par;
 800a57a:	6824      	ldr	r4, [r4, #0]
        while(par != NULL) {
 800a57c:	b144      	cbz	r4, 800a590 <lv_obj_set_parent+0x174>
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 800a57e:	f104 0210 	add.w	r2, r4, #16
 800a582:	4631      	mov	r1, r6
 800a584:	4630      	mov	r0, r6
 800a586:	f008 fa9f 	bl	8012ac8 <lv_area_intersect>
            if(union_ok == false) break;        /*If no common parts with parent break;*/
 800a58a:	2800      	cmp	r0, #0
 800a58c:	d1f1      	bne.n	800a572 <lv_obj_set_parent+0x156>
 800a58e:	e79b      	b.n	800a4c8 <lv_obj_set_parent+0xac>
        if(union_ok != false) lv_inv_area(&area_trunc);
 800a590:	4630      	mov	r0, r6
 800a592:	f001 ff41 	bl	800c418 <lv_inv_area>
 800a596:	e797      	b.n	800a4c8 <lv_obj_set_parent+0xac>
 800a598:	200194b4 	.word	0x200194b4
 800a59c:	200194b0 	.word	0x200194b0
 800a5a0:	200194d8 	.word	0x200194d8

0800a5a4 <lv_obj_align>:
{
 800a5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return obj->par;
 800a5a8:	f8d0 8000 	ldr.w	r8, [r0]
{
 800a5ac:	b085      	sub	sp, #20
 800a5ae:	4691      	mov	r9, r2
 800a5b0:	469b      	mov	fp, r3
 800a5b2:	4604      	mov	r4, r0
 800a5b4:	f9bd a038 	ldrsh.w	sl, [sp, #56]	; 0x38
    rel_x = obj->coords.x1 - parent->coords.x1;
 800a5b8:	8a03      	ldrh	r3, [r0, #16]
 800a5ba:	f8b8 6010 	ldrh.w	r6, [r8, #16]
    rel_y = obj->coords.y1 - parent->coords.y1;
 800a5be:	f8b8 5012 	ldrh.w	r5, [r8, #18]
 800a5c2:	8a42      	ldrh	r2, [r0, #18]
    if(base == NULL) {
 800a5c4:	b1e9      	cbz	r1, 800a602 <lv_obj_align+0x5e>
 800a5c6:	460f      	mov	r7, r1
 800a5c8:	8a09      	ldrh	r1, [r1, #16]
 800a5ca:	8a78      	ldrh	r0, [r7, #18]
    switch(align) {
 800a5cc:	f1b9 0f14 	cmp.w	r9, #20
 800a5d0:	f200 81d6 	bhi.w	800a980 <lv_obj_align+0x3dc>
 800a5d4:	e8df f019 	tbh	[pc, r9, lsl #1]
 800a5d8:	0019003d 	.word	0x0019003d
 800a5dc:	017f018a 	.word	0x017f018a
 800a5e0:	01560174 	.word	0x01560174
 800a5e4:	012f0145 	.word	0x012f0145
 800a5e8:	0117011d 	.word	0x0117011d
 800a5ec:	00ee00fc 	.word	0x00ee00fc
 800a5f0:	00c800e6 	.word	0x00c800e6
 800a5f4:	00b300b9 	.word	0x00b300b9
 800a5f8:	009800a6 	.word	0x009800a6
 800a5fc:	00710090 	.word	0x00710090
 800a600:	0081      	.short	0x0081
 800a602:	4628      	mov	r0, r5
 800a604:	4631      	mov	r1, r6
 800a606:	4647      	mov	r7, r8
 800a608:	e7e0      	b.n	800a5cc <lv_obj_align+0x28>
 800a60a:	2500      	movs	r5, #0
 800a60c:	462e      	mov	r6, r5
    diff.y =  y - obj->coords.y1;
 800a60e:	ebaa 0202 	sub.w	r2, sl, r2
    diff.x =  x - obj->coords.x1;
 800a612:	ebab 0303 	sub.w	r3, fp, r3
    diff.y =  y - obj->coords.y1;
 800a616:	4402      	add	r2, r0
    diff.x =  x - obj->coords.x1;
 800a618:	440b      	add	r3, r1
    diff.y =  y - obj->coords.y1;
 800a61a:	442a      	add	r2, r5
    diff.x =  x - obj->coords.x1;
 800a61c:	4433      	add	r3, r6
    diff.y =  y - obj->coords.y1;
 800a61e:	b295      	uxth	r5, r2
    diff.x =  x - obj->coords.x1;
 800a620:	b29e      	uxth	r6, r3
    diff.y =  y - obj->coords.y1;
 800a622:	b22a      	sxth	r2, r5
    diff.x =  x - obj->coords.x1;
 800a624:	b233      	sxth	r3, r6
    if(diff.x == 0 && diff.y == 0) return;
 800a626:	2a00      	cmp	r2, #0
 800a628:	f040 8176 	bne.w	800a918 <lv_obj_align+0x374>
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	f040 8173 	bne.w	800a918 <lv_obj_align+0x374>
    obj->realign.origo_align = 0;
 800a632:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    obj->realign.align = align;
 800a636:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
    obj->realign.origo_align = 0;
 800a63a:	f36f 0341 	bfc	r3, #1, #1
    obj->realign.xofs = x_mod;
 800a63e:	f8a4 b03c 	strh.w	fp, [r4, #60]	; 0x3c
    obj->realign.yofs = y_mod;
 800a642:	f8a4 a03e 	strh.w	sl, [r4, #62]	; 0x3e
    obj->realign.base = base;
 800a646:	63a7      	str	r7, [r4, #56]	; 0x38
    obj->realign.origo_align = 0;
 800a648:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 800a64c:	b005      	add	sp, #20
 800a64e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 800a652:	8abd      	ldrh	r5, [r7, #20]
 800a654:	f1c1 0601 	rsb	r6, r1, #1
 800a658:	f8b4 c014 	ldrh.w	ip, [r4, #20]
 800a65c:	442e      	add	r6, r5
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 800a65e:	f8b7 e016 	ldrh.w	lr, [r7, #22]
    return area_p->x2 - area_p->x1 + 1;
 800a662:	f10c 0c01 	add.w	ip, ip, #1
    return area_p->y2 - area_p->y1 + 1;
 800a666:	f1c0 0501 	rsb	r5, r0, #1
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800a66a:	b236      	sxth	r6, r6
    return area_p->x2 - area_p->x1 + 1;
 800a66c:	ebac 0c03 	sub.w	ip, ip, r3
    return area_p->y2 - area_p->y1 + 1;
 800a670:	4475      	add	r5, lr
 800a672:	2e00      	cmp	r6, #0
 800a674:	fa0f fc8c 	sxth.w	ip, ip
 800a678:	bfb8      	it	lt
 800a67a:	3601      	addlt	r6, #1
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 800a67c:	b22d      	sxth	r5, r5
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800a67e:	f1bc 0f00 	cmp.w	ip, #0
 800a682:	ea4f 0666 	mov.w	r6, r6, asr #1
 800a686:	bfb8      	it	lt
 800a688:	f10c 0c01 	addlt.w	ip, ip, #1
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 800a68c:	2d00      	cmp	r5, #0
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800a68e:	eba6 066c 	sub.w	r6, r6, ip, asr #1
 800a692:	b2b6      	uxth	r6, r6
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 800a694:	db1f      	blt.n	800a6d6 <lv_obj_align+0x132>
 800a696:	f8b4 e016 	ldrh.w	lr, [r4, #22]
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 800a69a:	106d      	asrs	r5, r5, #1
 800a69c:	f10e 0e01 	add.w	lr, lr, #1
 800a6a0:	ebae 0e02 	sub.w	lr, lr, r2
 800a6a4:	fa0f fe8e 	sxth.w	lr, lr
 800a6a8:	f1be 0f00 	cmp.w	lr, #0
 800a6ac:	bfb8      	it	lt
 800a6ae:	f10e 0e01 	addlt.w	lr, lr, #1
 800a6b2:	eba5 056e 	sub.w	r5, r5, lr, asr #1
 800a6b6:	b2ad      	uxth	r5, r5
            break;
 800a6b8:	e7a9      	b.n	800a60e <lv_obj_align+0x6a>
 800a6ba:	f1c0 0501 	rsb	r5, r0, #1
 800a6be:	f8b7 c016 	ldrh.w	ip, [r7, #22]
    return area_p->x2 - area_p->x1 + 1;
 800a6c2:	f1c1 0601 	rsb	r6, r1, #1
 800a6c6:	f8b7 e014 	ldrh.w	lr, [r7, #20]
    return area_p->y2 - area_p->y1 + 1;
 800a6ca:	4465      	add	r5, ip
    return area_p->x2 - area_p->x1 + 1;
 800a6cc:	4476      	add	r6, lr
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 800a6ce:	b22d      	sxth	r5, r5
 800a6d0:	b2b6      	uxth	r6, r6
 800a6d2:	2d00      	cmp	r5, #0
 800a6d4:	dadf      	bge.n	800a696 <lv_obj_align+0xf2>
 800a6d6:	3501      	adds	r5, #1
 800a6d8:	e7dd      	b.n	800a696 <lv_obj_align+0xf2>
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 800a6da:	8ae5      	ldrh	r5, [r4, #22]
 800a6dc:	f1c1 0601 	rsb	r6, r1, #1
 800a6e0:	f8b7 c016 	ldrh.w	ip, [r7, #22]
 800a6e4:	1aad      	subs	r5, r5, r2
 800a6e6:	f8b7 e014 	ldrh.w	lr, [r7, #20]
 800a6ea:	ebac 0505 	sub.w	r5, ip, r5
 800a6ee:	4476      	add	r6, lr
 800a6f0:	1a2d      	subs	r5, r5, r0
 800a6f2:	b2b6      	uxth	r6, r6
 800a6f4:	b2ad      	uxth	r5, r5
            break;
 800a6f6:	e78a      	b.n	800a60e <lv_obj_align+0x6a>
 800a6f8:	f1c1 0601 	rsb	r6, r1, #1
 800a6fc:	f8b7 e014 	ldrh.w	lr, [r7, #20]
            break;
 800a700:	2500      	movs	r5, #0
 800a702:	4476      	add	r6, lr
 800a704:	b2b6      	uxth	r6, r6
 800a706:	e782      	b.n	800a60e <lv_obj_align+0x6a>
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 800a708:	f8b4 e016 	ldrh.w	lr, [r4, #22]
 800a70c:	8afd      	ldrh	r5, [r7, #22]
 800a70e:	ebae 0e02 	sub.w	lr, lr, r2
 800a712:	8aa6      	ldrh	r6, [r4, #20]
 800a714:	eba5 050e 	sub.w	r5, r5, lr
 800a718:	1af6      	subs	r6, r6, r3
 800a71a:	1a2d      	subs	r5, r5, r0
            new_x = - lv_obj_get_width(obj);
 800a71c:	43f6      	mvns	r6, r6
 800a71e:	b2ad      	uxth	r5, r5
 800a720:	b2b6      	uxth	r6, r6
            break;
 800a722:	e774      	b.n	800a60e <lv_obj_align+0x6a>
    return area_p->y2 - area_p->y1 + 1;
 800a724:	f1c0 0501 	rsb	r5, r0, #1
 800a728:	f8b7 e016 	ldrh.w	lr, [r7, #22]
    return area_p->x2 - area_p->x1 + 1;
 800a72c:	8aa6      	ldrh	r6, [r4, #20]
    return area_p->y2 - area_p->y1 + 1;
 800a72e:	4475      	add	r5, lr
    return area_p->x2 - area_p->x1 + 1;
 800a730:	1af6      	subs	r6, r6, r3
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 800a732:	b22d      	sxth	r5, r5
            new_x = - lv_obj_get_width(obj);
 800a734:	43f6      	mvns	r6, r6
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 800a736:	2d00      	cmp	r5, #0
 800a738:	b2b6      	uxth	r6, r6
 800a73a:	daac      	bge.n	800a696 <lv_obj_align+0xf2>
 800a73c:	e7cb      	b.n	800a6d6 <lv_obj_align+0x132>
 800a73e:	8aa6      	ldrh	r6, [r4, #20]
            break;
 800a740:	2500      	movs	r5, #0
 800a742:	1af6      	subs	r6, r6, r3
            new_x = - lv_obj_get_width(obj);
 800a744:	43f6      	mvns	r6, r6
 800a746:	b2b6      	uxth	r6, r6
            break;
 800a748:	e761      	b.n	800a60e <lv_obj_align+0x6a>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800a74a:	8aa6      	ldrh	r6, [r4, #20]
    return area_p->y2 - area_p->y1 + 1;
 800a74c:	f1c0 0501 	rsb	r5, r0, #1
 800a750:	f8b7 c014 	ldrh.w	ip, [r7, #20]
 800a754:	1af6      	subs	r6, r6, r3
 800a756:	f8b7 e016 	ldrh.w	lr, [r7, #22]
 800a75a:	ebac 0606 	sub.w	r6, ip, r6
 800a75e:	4475      	add	r5, lr
 800a760:	1a76      	subs	r6, r6, r1
 800a762:	b2ad      	uxth	r5, r5
 800a764:	b2b6      	uxth	r6, r6
            break;
 800a766:	e752      	b.n	800a60e <lv_obj_align+0x6a>
    return area_p->x2 - area_p->x1 + 1;
 800a768:	8abd      	ldrh	r5, [r7, #20]
 800a76a:	f1c1 0c01 	rsb	ip, r1, #1
 800a76e:	8aa6      	ldrh	r6, [r4, #20]
 800a770:	44ac      	add	ip, r5
    return area_p->y2 - area_p->y1 + 1;
 800a772:	f8b7 e016 	ldrh.w	lr, [r7, #22]
    return area_p->x2 - area_p->x1 + 1;
 800a776:	3601      	adds	r6, #1
    return area_p->y2 - area_p->y1 + 1;
 800a778:	f1c0 0501 	rsb	r5, r0, #1
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800a77c:	fa0f fc8c 	sxth.w	ip, ip
    return area_p->x2 - area_p->x1 + 1;
 800a780:	1af6      	subs	r6, r6, r3
    return area_p->y2 - area_p->y1 + 1;
 800a782:	4475      	add	r5, lr
 800a784:	f1bc 0f00 	cmp.w	ip, #0
 800a788:	b236      	sxth	r6, r6
 800a78a:	bfb8      	it	lt
 800a78c:	f10c 0c01 	addlt.w	ip, ip, #1
 800a790:	b2ad      	uxth	r5, r5
 800a792:	2e00      	cmp	r6, #0
 800a794:	ea4f 0c6c 	mov.w	ip, ip, asr #1
 800a798:	bfb8      	it	lt
 800a79a:	3601      	addlt	r6, #1
 800a79c:	ebac 0666 	sub.w	r6, ip, r6, asr #1
 800a7a0:	b2b6      	uxth	r6, r6
            break;
 800a7a2:	e734      	b.n	800a60e <lv_obj_align+0x6a>
 800a7a4:	f1c0 0501 	rsb	r5, r0, #1
 800a7a8:	f8b7 e016 	ldrh.w	lr, [r7, #22]
            break;
 800a7ac:	2600      	movs	r6, #0
 800a7ae:	4475      	add	r5, lr
 800a7b0:	b2ad      	uxth	r5, r5
 800a7b2:	e72c      	b.n	800a60e <lv_obj_align+0x6a>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800a7b4:	f8b4 e014 	ldrh.w	lr, [r4, #20]
 800a7b8:	8abe      	ldrh	r6, [r7, #20]
 800a7ba:	ebae 0e03 	sub.w	lr, lr, r3
 800a7be:	8ae5      	ldrh	r5, [r4, #22]
 800a7c0:	eba6 060e 	sub.w	r6, r6, lr
 800a7c4:	1aad      	subs	r5, r5, r2
 800a7c6:	1a76      	subs	r6, r6, r1
            new_y = - lv_obj_get_height(obj);
 800a7c8:	43ed      	mvns	r5, r5
 800a7ca:	b2b6      	uxth	r6, r6
 800a7cc:	b2ad      	uxth	r5, r5
            break;
 800a7ce:	e71e      	b.n	800a60e <lv_obj_align+0x6a>
    return area_p->x2 - area_p->x1 + 1;
 800a7d0:	8abd      	ldrh	r5, [r7, #20]
 800a7d2:	f1c1 0601 	rsb	r6, r1, #1
    return area_p->y2 - area_p->y1 + 1;
 800a7d6:	f8b4 e016 	ldrh.w	lr, [r4, #22]
    return area_p->x2 - area_p->x1 + 1;
 800a7da:	442e      	add	r6, r5
 800a7dc:	8aa5      	ldrh	r5, [r4, #20]
 800a7de:	3501      	adds	r5, #1
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800a7e0:	b236      	sxth	r6, r6
 800a7e2:	1aed      	subs	r5, r5, r3
 800a7e4:	2e00      	cmp	r6, #0
 800a7e6:	b22d      	sxth	r5, r5
 800a7e8:	bfb8      	it	lt
 800a7ea:	3601      	addlt	r6, #1
 800a7ec:	2d00      	cmp	r5, #0
 800a7ee:	ea4f 0666 	mov.w	r6, r6, asr #1
 800a7f2:	bfb8      	it	lt
 800a7f4:	3501      	addlt	r5, #1
 800a7f6:	eba6 0665 	sub.w	r6, r6, r5, asr #1
    return area_p->y2 - area_p->y1 + 1;
 800a7fa:	ebae 0502 	sub.w	r5, lr, r2
            new_y = - lv_obj_get_height(obj);
 800a7fe:	43ed      	mvns	r5, r5
 800a800:	b2b6      	uxth	r6, r6
 800a802:	b2ad      	uxth	r5, r5
            break;
 800a804:	e703      	b.n	800a60e <lv_obj_align+0x6a>
 800a806:	8ae5      	ldrh	r5, [r4, #22]
            break;
 800a808:	2600      	movs	r6, #0
 800a80a:	1aad      	subs	r5, r5, r2
            new_y = -lv_obj_get_height(obj);
 800a80c:	43ed      	mvns	r5, r5
 800a80e:	b2ad      	uxth	r5, r5
            break;
 800a810:	e6fd      	b.n	800a60e <lv_obj_align+0x6a>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800a812:	8aa6      	ldrh	r6, [r4, #20]
 800a814:	f1c0 0501 	rsb	r5, r0, #1
 800a818:	f8b7 e016 	ldrh.w	lr, [r7, #22]
 800a81c:	f8b7 c014 	ldrh.w	ip, [r7, #20]
 800a820:	1af6      	subs	r6, r6, r3
 800a822:	4475      	add	r5, lr
 800a824:	ebac 0606 	sub.w	r6, ip, r6
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 800a828:	b22d      	sxth	r5, r5
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800a82a:	1a76      	subs	r6, r6, r1
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 800a82c:	2d00      	cmp	r5, #0
 800a82e:	b2b6      	uxth	r6, r6
 800a830:	f6bf af31 	bge.w	800a696 <lv_obj_align+0xf2>
 800a834:	e74f      	b.n	800a6d6 <lv_obj_align+0x132>
 800a836:	8afe      	ldrh	r6, [r7, #22]
 800a838:	f1c0 0501 	rsb	r5, r0, #1
 800a83c:	4435      	add	r5, r6
 800a83e:	8ae6      	ldrh	r6, [r4, #22]
 800a840:	3601      	adds	r6, #1
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 800a842:	b22d      	sxth	r5, r5
 800a844:	1ab6      	subs	r6, r6, r2
 800a846:	2d00      	cmp	r5, #0
 800a848:	b236      	sxth	r6, r6
 800a84a:	bfb8      	it	lt
 800a84c:	3501      	addlt	r5, #1
 800a84e:	2e00      	cmp	r6, #0
 800a850:	ea4f 0565 	mov.w	r5, r5, asr #1
 800a854:	bfb8      	it	lt
 800a856:	3601      	addlt	r6, #1
 800a858:	eba5 0566 	sub.w	r5, r5, r6, asr #1
            break;
 800a85c:	2600      	movs	r6, #0
 800a85e:	b2ad      	uxth	r5, r5
 800a860:	e6d5      	b.n	800a60e <lv_obj_align+0x6a>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800a862:	8aa6      	ldrh	r6, [r4, #20]
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 800a864:	8ae5      	ldrh	r5, [r4, #22]
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800a866:	eba6 0c03 	sub.w	ip, r6, r3
 800a86a:	8abe      	ldrh	r6, [r7, #20]
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 800a86c:	eba5 0e02 	sub.w	lr, r5, r2
 800a870:	8afd      	ldrh	r5, [r7, #22]
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800a872:	eba6 060c 	sub.w	r6, r6, ip
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 800a876:	eba5 050e 	sub.w	r5, r5, lr
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800a87a:	1a76      	subs	r6, r6, r1
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 800a87c:	1a2d      	subs	r5, r5, r0
 800a87e:	b2b6      	uxth	r6, r6
 800a880:	b2ad      	uxth	r5, r5
            break;
 800a882:	e6c4      	b.n	800a60e <lv_obj_align+0x6a>
    return area_p->x2 - area_p->x1 + 1;
 800a884:	8abd      	ldrh	r5, [r7, #20]
 800a886:	f1c1 0601 	rsb	r6, r1, #1
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 800a88a:	f8b4 e016 	ldrh.w	lr, [r4, #22]
 800a88e:	442e      	add	r6, r5
 800a890:	8aa5      	ldrh	r5, [r4, #20]
 800a892:	ebae 0e02 	sub.w	lr, lr, r2
 800a896:	3501      	adds	r5, #1
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800a898:	b236      	sxth	r6, r6
 800a89a:	1aed      	subs	r5, r5, r3
 800a89c:	2e00      	cmp	r6, #0
 800a89e:	b22d      	sxth	r5, r5
 800a8a0:	bfb8      	it	lt
 800a8a2:	3601      	addlt	r6, #1
 800a8a4:	2d00      	cmp	r5, #0
 800a8a6:	ea4f 0666 	mov.w	r6, r6, asr #1
 800a8aa:	bfb8      	it	lt
 800a8ac:	3501      	addlt	r5, #1
 800a8ae:	eba6 0665 	sub.w	r6, r6, r5, asr #1
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 800a8b2:	8afd      	ldrh	r5, [r7, #22]
 800a8b4:	eba5 050e 	sub.w	r5, r5, lr
 800a8b8:	b2b6      	uxth	r6, r6
 800a8ba:	1a2d      	subs	r5, r5, r0
 800a8bc:	b2ad      	uxth	r5, r5
            break;
 800a8be:	e6a6      	b.n	800a60e <lv_obj_align+0x6a>
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 800a8c0:	f8b4 e016 	ldrh.w	lr, [r4, #22]
            break;
 800a8c4:	2600      	movs	r6, #0
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 800a8c6:	8afd      	ldrh	r5, [r7, #22]
 800a8c8:	ebae 0e02 	sub.w	lr, lr, r2
 800a8cc:	eba5 050e 	sub.w	r5, r5, lr
 800a8d0:	1a2d      	subs	r5, r5, r0
 800a8d2:	b2ad      	uxth	r5, r5
            break;
 800a8d4:	e69b      	b.n	800a60e <lv_obj_align+0x6a>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800a8d6:	f8b4 e014 	ldrh.w	lr, [r4, #20]
            break;
 800a8da:	2500      	movs	r5, #0
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800a8dc:	8abe      	ldrh	r6, [r7, #20]
 800a8de:	ebae 0e03 	sub.w	lr, lr, r3
 800a8e2:	eba6 060e 	sub.w	r6, r6, lr
 800a8e6:	1a76      	subs	r6, r6, r1
 800a8e8:	b2b6      	uxth	r6, r6
            break;
 800a8ea:	e690      	b.n	800a60e <lv_obj_align+0x6a>
 800a8ec:	8abd      	ldrh	r5, [r7, #20]
 800a8ee:	f1c1 0601 	rsb	r6, r1, #1
 800a8f2:	442e      	add	r6, r5
 800a8f4:	8aa5      	ldrh	r5, [r4, #20]
 800a8f6:	3501      	adds	r5, #1
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800a8f8:	b236      	sxth	r6, r6
 800a8fa:	1aed      	subs	r5, r5, r3
 800a8fc:	2e00      	cmp	r6, #0
 800a8fe:	b22d      	sxth	r5, r5
 800a900:	bfb8      	it	lt
 800a902:	3601      	addlt	r6, #1
 800a904:	2d00      	cmp	r5, #0
 800a906:	ea4f 0666 	mov.w	r6, r6, asr #1
 800a90a:	bfb8      	it	lt
 800a90c:	3501      	addlt	r5, #1
 800a90e:	eba6 0665 	sub.w	r6, r6, r5, asr #1
            break;
 800a912:	2500      	movs	r5, #0
 800a914:	b2b6      	uxth	r6, r6
 800a916:	e67a      	b.n	800a60e <lv_obj_align+0x6a>
    lv_obj_invalidate(obj);
 800a918:	4620      	mov	r0, r4
 800a91a:	e88d 000c 	stmia.w	sp, {r2, r3}
 800a91e:	f7ff f9df 	bl	8009ce0 <lv_obj_invalidate>
    obj->coords.y1 += diff.y;
 800a922:	8a63      	ldrh	r3, [r4, #18]
    obj->coords.x1 += diff.x;
 800a924:	f8b4 c010 	ldrh.w	ip, [r4, #16]
    memcpy(dest, src, sizeof(lv_area_t));
 800a928:	4621      	mov	r1, r4
    obj->coords.y1 += diff.y;
 800a92a:	18eb      	adds	r3, r5, r3
    refresh_children_position(obj, diff.x, diff.y);
 800a92c:	9a00      	ldr	r2, [sp, #0]
 800a92e:	f851 0f10 	ldr.w	r0, [r1, #16]!
    obj->coords.x1 += diff.x;
 800a932:	44b4      	add	ip, r6
    obj->coords.y1 += diff.y;
 800a934:	9300      	str	r3, [sp, #0]
 800a936:	f10d 0e08 	add.w	lr, sp, #8
    obj->coords.x2 += diff.x;
 800a93a:	8aa3      	ldrh	r3, [r4, #20]
 800a93c:	6849      	ldr	r1, [r1, #4]
 800a93e:	441e      	add	r6, r3
    obj->coords.x1 += diff.x;
 800a940:	f8a4 c010 	strh.w	ip, [r4, #16]
    obj->coords.y1 += diff.y;
 800a944:	f8bd 3000 	ldrh.w	r3, [sp]
    obj->coords.y2 += diff.y;
 800a948:	f8b4 c016 	ldrh.w	ip, [r4, #22]
    obj->coords.y1 += diff.y;
 800a94c:	8263      	strh	r3, [r4, #18]
    obj->coords.y2 += diff.y;
 800a94e:	4465      	add	r5, ip
    refresh_children_position(obj, diff.x, diff.y);
 800a950:	9b01      	ldr	r3, [sp, #4]
    obj->coords.x2 += diff.x;
 800a952:	82a6      	strh	r6, [r4, #20]
    obj->coords.y2 += diff.y;
 800a954:	82e5      	strh	r5, [r4, #22]
 800a956:	e8ae 0003 	stmia.w	lr!, {r0, r1}
    refresh_children_position(obj, diff.x, diff.y);
 800a95a:	4619      	mov	r1, r3
 800a95c:	4620      	mov	r0, r4
 800a95e:	f7fe fcbb 	bl	80092d8 <refresh_children_position>
    obj->signal_func(obj, LV_SIGNAL_CORD_CHG, &ori);
 800a962:	aa02      	add	r2, sp, #8
 800a964:	69a5      	ldr	r5, [r4, #24]
 800a966:	2102      	movs	r1, #2
 800a968:	4620      	mov	r0, r4
 800a96a:	47a8      	blx	r5
    par->signal_func(par, LV_SIGNAL_CHILD_CHG, obj);
 800a96c:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800a970:	4640      	mov	r0, r8
 800a972:	4622      	mov	r2, r4
 800a974:	2101      	movs	r1, #1
 800a976:	4798      	blx	r3
    lv_obj_invalidate(obj);
 800a978:	4620      	mov	r0, r4
 800a97a:	f7ff f9b1 	bl	8009ce0 <lv_obj_invalidate>
 800a97e:	e658      	b.n	800a632 <lv_obj_align+0x8e>
    rel_x = obj->coords.x1 - parent->coords.x1;
 800a980:	1b9e      	subs	r6, r3, r6
    rel_y = obj->coords.y1 - parent->coords.y1;
 800a982:	1b55      	subs	r5, r2, r5
 800a984:	b2b6      	uxth	r6, r6
 800a986:	b2ad      	uxth	r5, r5
 800a988:	e641      	b.n	800a60e <lv_obj_align+0x6a>
 800a98a:	bf00      	nop

0800a98c <lv_obj_align_origo>:
{
 800a98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return obj->par;
 800a990:	f8d0 8000 	ldr.w	r8, [r0]
{
 800a994:	b087      	sub	sp, #28
 800a996:	4691      	mov	r9, r2
 800a998:	469a      	mov	sl, r3
    rel_y = obj->coords.y1 - parent->coords.y1;
 800a99a:	f8b8 2012 	ldrh.w	r2, [r8, #18]
{
 800a99e:	4604      	mov	r4, r0
    return area_p->x2 - area_p->x1 + 1;
 800a9a0:	8a83      	ldrh	r3, [r0, #20]
 800a9a2:	460f      	mov	r7, r1
    rel_x = obj->coords.x1 - parent->coords.x1;
 800a9a4:	f8b0 e010 	ldrh.w	lr, [r0, #16]
 800a9a8:	3301      	adds	r3, #1
    rel_y = obj->coords.y1 - parent->coords.y1;
 800a9aa:	9201      	str	r2, [sp, #4]
    return area_p->y2 - area_p->y1 + 1;
 800a9ac:	8ac2      	ldrh	r2, [r0, #22]
 800a9ae:	f8b0 c012 	ldrh.w	ip, [r0, #18]
    return area_p->x2 - area_p->x1 + 1;
 800a9b2:	eba3 030e 	sub.w	r3, r3, lr
    return area_p->y2 - area_p->y1 + 1;
 800a9b6:	3201      	adds	r2, #1
    rel_x = obj->coords.x1 - parent->coords.x1;
 800a9b8:	f8b8 6010 	ldrh.w	r6, [r8, #16]
    lv_coord_t obj_w_half =  lv_obj_get_width(obj) / 2;
 800a9bc:	b21b      	sxth	r3, r3
{
 800a9be:	f9bd b040 	ldrsh.w	fp, [sp, #64]	; 0x40
 800a9c2:	eba2 020c 	sub.w	r2, r2, ip
    lv_coord_t obj_w_half =  lv_obj_get_width(obj) / 2;
 800a9c6:	2b00      	cmp	r3, #0
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
 800a9c8:	b212      	sxth	r2, r2
    lv_coord_t obj_w_half =  lv_obj_get_width(obj) / 2;
 800a9ca:	bfb8      	it	lt
 800a9cc:	3301      	addlt	r3, #1
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
 800a9ce:	2a00      	cmp	r2, #0
    lv_coord_t obj_w_half =  lv_obj_get_width(obj) / 2;
 800a9d0:	ea4f 0363 	mov.w	r3, r3, asr #1
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
 800a9d4:	bfb8      	it	lt
 800a9d6:	3201      	addlt	r2, #1
 800a9d8:	1052      	asrs	r2, r2, #1
    if(base == NULL) {
 800a9da:	2900      	cmp	r1, #0
 800a9dc:	f000 80d2 	beq.w	800ab84 <lv_obj_align_origo+0x1f8>
 800a9e0:	8a48      	ldrh	r0, [r1, #18]
 800a9e2:	8a09      	ldrh	r1, [r1, #16]
    switch(align) {
 800a9e4:	f1b9 0f14 	cmp.w	r9, #20
 800a9e8:	f200 80f0 	bhi.w	800abcc <lv_obj_align_origo+0x240>
 800a9ec:	e8df f019 	tbh	[pc, r9, lsl #1]
 800a9f0:	001500db 	.word	0x001500db
 800a9f4:	003a006d 	.word	0x003a006d
 800a9f8:	00860043 	.word	0x00860043
 800a9fc:	007b0060 	.word	0x007b0060
 800aa00:	0015004c 	.word	0x0015004c
 800aa04:	003a006d 	.word	0x003a006d
 800aa08:	00860043 	.word	0x00860043
 800aa0c:	00150060 	.word	0x00150060
 800aa10:	0043007b 	.word	0x0043007b
 800aa14:	004c003a 	.word	0x004c003a
 800aa18:	00ce      	.short	0x00ce
            new_x = - obj_w_half ;
 800aa1a:	425b      	negs	r3, r3
            new_y = - obj_h_half;
 800aa1c:	4252      	negs	r2, r2
            new_x = - obj_w_half ;
 800aa1e:	b21b      	sxth	r3, r3
            new_y = - obj_h_half;
 800aa20:	b212      	sxth	r2, r2
    diff.y =  y - obj->coords.y1;
 800aa22:	ebab 050c 	sub.w	r5, fp, ip
    diff.x =  x - obj->coords.x1;
 800aa26:	ebaa 060e 	sub.w	r6, sl, lr
    diff.y =  y - obj->coords.y1;
 800aa2a:	4405      	add	r5, r0
    diff.x =  x - obj->coords.x1;
 800aa2c:	440e      	add	r6, r1
    diff.y =  y - obj->coords.y1;
 800aa2e:	442a      	add	r2, r5
    diff.x =  x - obj->coords.x1;
 800aa30:	4433      	add	r3, r6
    diff.y =  y - obj->coords.y1;
 800aa32:	b295      	uxth	r5, r2
    diff.x =  x - obj->coords.x1;
 800aa34:	b29e      	uxth	r6, r3
    diff.y =  y - obj->coords.y1;
 800aa36:	b22a      	sxth	r2, r5
    diff.x =  x - obj->coords.x1;
 800aa38:	b233      	sxth	r3, r6
 800aa3a:	9301      	str	r3, [sp, #4]
    if(diff.x == 0 && diff.y == 0) return;
 800aa3c:	2a00      	cmp	r2, #0
 800aa3e:	d16f      	bne.n	800ab20 <lv_obj_align_origo+0x194>
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d16d      	bne.n	800ab20 <lv_obj_align_origo+0x194>
    obj->realign.origo_align = 1;
 800aa44:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    obj->realign.align = align;
 800aa48:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
    obj->realign.origo_align = 1;
 800aa4c:	f043 0302 	orr.w	r3, r3, #2
    obj->realign.xofs = x_mod;
 800aa50:	f8a4 a03c 	strh.w	sl, [r4, #60]	; 0x3c
    obj->realign.yofs = y_mod;
 800aa54:	f8a4 b03e 	strh.w	fp, [r4, #62]	; 0x3e
    obj->realign.base = base;
 800aa58:	63a7      	str	r7, [r4, #56]	; 0x38
    obj->realign.origo_align = 1;
 800aa5a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 800aa5e:	b007      	add	sp, #28
 800aa60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            new_x = lv_obj_get_width(base) - obj_w_half;
 800aa64:	f1c3 0301 	rsb	r3, r3, #1
 800aa68:	8abe      	ldrh	r6, [r7, #20]
            new_y = -obj_h_half;
 800aa6a:	4252      	negs	r2, r2
            new_x = lv_obj_get_width(base) - obj_w_half;
 800aa6c:	1a5b      	subs	r3, r3, r1
            new_y = -obj_h_half;
 800aa6e:	b212      	sxth	r2, r2
            new_x = lv_obj_get_width(base) - obj_w_half;
 800aa70:	4433      	add	r3, r6
 800aa72:	b21b      	sxth	r3, r3
            break;
 800aa74:	e7d5      	b.n	800aa22 <lv_obj_align_origo+0x96>
            new_y = lv_obj_get_height(base) - obj_h_half;
 800aa76:	f1c2 0201 	rsb	r2, r2, #1
 800aa7a:	8afd      	ldrh	r5, [r7, #22]
            new_x = - obj_w_half;
 800aa7c:	425b      	negs	r3, r3
            new_y = lv_obj_get_height(base) - obj_h_half;
 800aa7e:	1a12      	subs	r2, r2, r0
            new_x = - obj_w_half;
 800aa80:	b21b      	sxth	r3, r3
            new_y = lv_obj_get_height(base) - obj_h_half;
 800aa82:	442a      	add	r2, r5
 800aa84:	b212      	sxth	r2, r2
            break;
 800aa86:	e7cc      	b.n	800aa22 <lv_obj_align_origo+0x96>
            new_x = lv_obj_get_width(base) - obj_w_half;
 800aa88:	f1c3 0301 	rsb	r3, r3, #1
 800aa8c:	8afe      	ldrh	r6, [r7, #22]
 800aa8e:	f1c0 0501 	rsb	r5, r0, #1
 800aa92:	1a5b      	subs	r3, r3, r1
 800aa94:	4435      	add	r5, r6
 800aa96:	9301      	str	r3, [sp, #4]
 800aa98:	8abb      	ldrh	r3, [r7, #20]
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 800aa9a:	b22d      	sxth	r5, r5
            new_x = lv_obj_get_width(base) - obj_w_half;
 800aa9c:	461e      	mov	r6, r3
 800aa9e:	9b01      	ldr	r3, [sp, #4]
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 800aaa0:	2d00      	cmp	r5, #0
            new_x = lv_obj_get_width(base) - obj_w_half;
 800aaa2:	4433      	add	r3, r6
 800aaa4:	b21b      	sxth	r3, r3
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 800aaa6:	db27      	blt.n	800aaf8 <lv_obj_align_origo+0x16c>
 800aaa8:	ebc2 0265 	rsb	r2, r2, r5, asr #1
 800aaac:	b212      	sxth	r2, r2
            break;
 800aaae:	e7b8      	b.n	800aa22 <lv_obj_align_origo+0x96>
            new_x = lv_obj_get_width(base) - obj_w_half;
 800aab0:	f1c3 0301 	rsb	r3, r3, #1
            new_y = lv_obj_get_height(base) - obj_h_half;
 800aab4:	f1c2 0201 	rsb	r2, r2, #1
            new_x = lv_obj_get_width(base) - obj_w_half;
 800aab8:	8abe      	ldrh	r6, [r7, #20]
 800aaba:	1a5b      	subs	r3, r3, r1
            new_y = lv_obj_get_height(base) - obj_h_half;
 800aabc:	1a12      	subs	r2, r2, r0
 800aabe:	8afd      	ldrh	r5, [r7, #22]
            new_x = lv_obj_get_width(base) - obj_w_half;
 800aac0:	4433      	add	r3, r6
            new_y = lv_obj_get_height(base) - obj_h_half;
 800aac2:	442a      	add	r2, r5
            new_x = lv_obj_get_width(base) - obj_w_half;
 800aac4:	b21b      	sxth	r3, r3
            new_y = lv_obj_get_height(base) - obj_h_half;
 800aac6:	b212      	sxth	r2, r2
            break;
 800aac8:	e7ab      	b.n	800aa22 <lv_obj_align_origo+0x96>
    return area_p->x2 - area_p->x1 + 1;
 800aaca:	f1c1 0501 	rsb	r5, r1, #1
 800aace:	8abe      	ldrh	r6, [r7, #20]
            new_y = -obj_h_half;
 800aad0:	4252      	negs	r2, r2
 800aad2:	4435      	add	r5, r6
 800aad4:	b212      	sxth	r2, r2
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 800aad6:	b22d      	sxth	r5, r5
 800aad8:	2d00      	cmp	r5, #0
 800aada:	bfb8      	it	lt
 800aadc:	3501      	addlt	r5, #1
 800aade:	ebc3 0365 	rsb	r3, r3, r5, asr #1
 800aae2:	b21b      	sxth	r3, r3
            break;
 800aae4:	e79d      	b.n	800aa22 <lv_obj_align_origo+0x96>
    return area_p->y2 - area_p->y1 + 1;
 800aae6:	f1c0 0501 	rsb	r5, r0, #1
 800aaea:	8afe      	ldrh	r6, [r7, #22]
            new_x = - obj_w_half;
 800aaec:	425b      	negs	r3, r3
 800aaee:	4435      	add	r5, r6
 800aaf0:	b21b      	sxth	r3, r3
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 800aaf2:	b22d      	sxth	r5, r5
 800aaf4:	2d00      	cmp	r5, #0
 800aaf6:	dad7      	bge.n	800aaa8 <lv_obj_align_origo+0x11c>
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 800aaf8:	3501      	adds	r5, #1
 800aafa:	e7d5      	b.n	800aaa8 <lv_obj_align_origo+0x11c>
    return area_p->x2 - area_p->x1 + 1;
 800aafc:	8abe      	ldrh	r6, [r7, #20]
 800aafe:	f1c1 0501 	rsb	r5, r1, #1
            new_y = lv_obj_get_height(base) - obj_h_half;
 800ab02:	f1c2 0201 	rsb	r2, r2, #1
 800ab06:	4435      	add	r5, r6
 800ab08:	8afe      	ldrh	r6, [r7, #22]
 800ab0a:	1a12      	subs	r2, r2, r0
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 800ab0c:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
 800ab0e:	4432      	add	r2, r6
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 800ab10:	2d00      	cmp	r5, #0
            new_y = lv_obj_get_height(base) - obj_h_half;
 800ab12:	b212      	sxth	r2, r2
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 800ab14:	bfb8      	it	lt
 800ab16:	3501      	addlt	r5, #1
 800ab18:	ebc3 0365 	rsb	r3, r3, r5, asr #1
 800ab1c:	b21b      	sxth	r3, r3
            break;
 800ab1e:	e780      	b.n	800aa22 <lv_obj_align_origo+0x96>
    lv_obj_invalidate(obj);
 800ab20:	4620      	mov	r0, r4
 800ab22:	9203      	str	r2, [sp, #12]
 800ab24:	f7ff f8dc 	bl	8009ce0 <lv_obj_invalidate>
    obj->coords.y1 += diff.y;
 800ab28:	f8b4 e012 	ldrh.w	lr, [r4, #18]
    memcpy(dest, src, sizeof(lv_area_t));
 800ab2c:	ab04      	add	r3, sp, #16
    obj->coords.x1 += diff.x;
 800ab2e:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 800ab32:	4621      	mov	r1, r4
    refresh_children_position(obj, diff.x, diff.y);
 800ab34:	9a03      	ldr	r2, [sp, #12]
 800ab36:	9302      	str	r3, [sp, #8]
    obj->coords.y1 += diff.y;
 800ab38:	eb05 030e 	add.w	r3, r5, lr
    obj->coords.x2 += diff.x;
 800ab3c:	f8b4 e014 	ldrh.w	lr, [r4, #20]
    obj->coords.x1 += diff.x;
 800ab40:	44b4      	add	ip, r6
 800ab42:	f851 0f10 	ldr.w	r0, [r1, #16]!
    obj->coords.x2 += diff.x;
 800ab46:	4476      	add	r6, lr
    obj->coords.y2 += diff.y;
 800ab48:	f8b4 e016 	ldrh.w	lr, [r4, #22]
 800ab4c:	6849      	ldr	r1, [r1, #4]
 800ab4e:	4475      	add	r5, lr
    obj->coords.y1 += diff.y;
 800ab50:	8263      	strh	r3, [r4, #18]
 800ab52:	9b02      	ldr	r3, [sp, #8]
    obj->coords.x1 += diff.x;
 800ab54:	f8a4 c010 	strh.w	ip, [r4, #16]
    obj->coords.y2 += diff.y;
 800ab58:	82e5      	strh	r5, [r4, #22]
    obj->coords.x2 += diff.x;
 800ab5a:	82a6      	strh	r6, [r4, #20]
 800ab5c:	c303      	stmia	r3!, {r0, r1}
    refresh_children_position(obj, diff.x, diff.y);
 800ab5e:	9901      	ldr	r1, [sp, #4]
 800ab60:	4620      	mov	r0, r4
 800ab62:	f7fe fbb9 	bl	80092d8 <refresh_children_position>
    obj->signal_func(obj, LV_SIGNAL_CORD_CHG, &ori);
 800ab66:	aa04      	add	r2, sp, #16
 800ab68:	69a5      	ldr	r5, [r4, #24]
 800ab6a:	2102      	movs	r1, #2
 800ab6c:	4620      	mov	r0, r4
 800ab6e:	47a8      	blx	r5
    par->signal_func(par, LV_SIGNAL_CHILD_CHG, obj);
 800ab70:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800ab74:	4640      	mov	r0, r8
 800ab76:	4622      	mov	r2, r4
 800ab78:	2101      	movs	r1, #1
 800ab7a:	4798      	blx	r3
    lv_obj_invalidate(obj);
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	f7ff f8af 	bl	8009ce0 <lv_obj_invalidate>
 800ab82:	e75f      	b.n	800aa44 <lv_obj_align_origo+0xb8>
 800ab84:	4631      	mov	r1, r6
 800ab86:	9801      	ldr	r0, [sp, #4]
 800ab88:	4647      	mov	r7, r8
 800ab8a:	e72b      	b.n	800a9e4 <lv_obj_align_origo+0x58>
            new_x = lv_obj_get_width(base) - obj_w_half;
 800ab8c:	f1c3 0301 	rsb	r3, r3, #1
            new_y = lv_obj_get_height(base) - obj_h_half;
 800ab90:	f1c2 0201 	rsb	r2, r2, #1
            new_x = lv_obj_get_width(base) - obj_w_half;
 800ab94:	8abd      	ldrh	r5, [r7, #20]
 800ab96:	1a5b      	subs	r3, r3, r1
            new_y = lv_obj_get_height(base) - obj_h_half;
 800ab98:	1a12      	subs	r2, r2, r0
 800ab9a:	8afe      	ldrh	r6, [r7, #22]
            new_x = lv_obj_get_width(base) - obj_w_half;
 800ab9c:	442b      	add	r3, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
 800ab9e:	4432      	add	r2, r6
            new_x = lv_obj_get_width(base) - obj_w_half;
 800aba0:	b21b      	sxth	r3, r3
            new_y = lv_obj_get_height(base) - obj_h_half;
 800aba2:	b212      	sxth	r2, r2
            break;
 800aba4:	e73d      	b.n	800aa22 <lv_obj_align_origo+0x96>
    return area_p->x2 - area_p->x1 + 1;
 800aba6:	8abd      	ldrh	r5, [r7, #20]
 800aba8:	f1c1 0601 	rsb	r6, r1, #1
 800abac:	442e      	add	r6, r5
    return area_p->y2 - area_p->y1 + 1;
 800abae:	f1c0 0501 	rsb	r5, r0, #1
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 800abb2:	b236      	sxth	r6, r6
 800abb4:	9502      	str	r5, [sp, #8]
 800abb6:	8afd      	ldrh	r5, [r7, #22]
 800abb8:	2e00      	cmp	r6, #0
 800abba:	f8ad 5004 	strh.w	r5, [sp, #4]
 800abbe:	bfb8      	it	lt
 800abc0:	3601      	addlt	r6, #1
 800abc2:	9d02      	ldr	r5, [sp, #8]
 800abc4:	ebc3 0366 	rsb	r3, r3, r6, asr #1
 800abc8:	9e01      	ldr	r6, [sp, #4]
 800abca:	e790      	b.n	800aaee <lv_obj_align_origo+0x162>
    rel_y = obj->coords.y1 - parent->coords.y1;
 800abcc:	9a01      	ldr	r2, [sp, #4]
    rel_x = obj->coords.x1 - parent->coords.x1;
 800abce:	ebae 0306 	sub.w	r3, lr, r6
    rel_y = obj->coords.y1 - parent->coords.y1;
 800abd2:	ebac 0202 	sub.w	r2, ip, r2
    rel_x = obj->coords.x1 - parent->coords.x1;
 800abd6:	b21b      	sxth	r3, r3
    rel_y = obj->coords.y1 - parent->coords.y1;
 800abd8:	b212      	sxth	r2, r2
 800abda:	e722      	b.n	800aa22 <lv_obj_align_origo+0x96>

0800abdc <lv_obj_set_size>:
    return area_p->x2 - area_p->x1 + 1;
 800abdc:	8a83      	ldrh	r3, [r0, #20]
{
 800abde:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800abe2:	3301      	adds	r3, #1
 800abe4:	8a05      	ldrh	r5, [r0, #16]
 800abe6:	b087      	sub	sp, #28
 800abe8:	1b5b      	subs	r3, r3, r5
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
 800abea:	b21b      	sxth	r3, r3
 800abec:	4299      	cmp	r1, r3
 800abee:	f000 80ba 	beq.w	800ad66 <lv_obj_set_size+0x18a>
    return obj->hidden == 0 ? false : true;
 800abf2:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800abf6:	4617      	mov	r7, r2
 800abf8:	4689      	mov	r9, r1
 800abfa:	4604      	mov	r4, r0
    if(lv_obj_get_hidden(obj)) return;
 800abfc:	06da      	lsls	r2, r3, #27
 800abfe:	d410      	bmi.n	800ac22 <lv_obj_set_size+0x46>
 800ac00:	e000      	b.n	800ac04 <lv_obj_set_size+0x28>
    } while(par != NULL);
 800ac02:	4618      	mov	r0, r3
    return obj->par;
 800ac04:	6803      	ldr	r3, [r0, #0]
    } while(par != NULL);
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d1fb      	bne.n	800ac02 <lv_obj_set_size+0x26>
    return LV_GC_ROOT(_lv_act_scr);
 800ac0a:	4b67      	ldr	r3, [pc, #412]	; (800ada8 <lv_obj_set_size+0x1cc>)
    if(obj_scr == lv_scr_act() ||
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	4298      	cmp	r0, r3
 800ac10:	d03f      	beq.n	800ac92 <lv_obj_set_size+0xb6>
    return LV_GC_ROOT(_lv_top_layer);
 800ac12:	4b66      	ldr	r3, [pc, #408]	; (800adac <lv_obj_set_size+0x1d0>)
    if(obj_scr == lv_scr_act() ||
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4298      	cmp	r0, r3
 800ac18:	d03b      	beq.n	800ac92 <lv_obj_set_size+0xb6>
    return LV_GC_ROOT(_lv_sys_layer);
 800ac1a:	4b65      	ldr	r3, [pc, #404]	; (800adb0 <lv_obj_set_size+0x1d4>)
            obj_scr == lv_layer_top() ||
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4298      	cmp	r0, r3
 800ac20:	d037      	beq.n	800ac92 <lv_obj_set_size+0xb6>
 800ac22:	f104 0810 	add.w	r8, r4, #16
    obj->coords.y2 = obj->coords.y1 + h - 1;
 800ac26:	8a63      	ldrh	r3, [r4, #18]
    obj->coords.x2 = obj->coords.x1 + w - 1;
 800ac28:	f109 39ff 	add.w	r9, r9, #4294967295
    obj->coords.y2 = obj->coords.y1 + h - 1;
 800ac2c:	3f01      	subs	r7, #1
    memcpy(dest, src, sizeof(lv_area_t));
 800ac2e:	f8d8 0000 	ldr.w	r0, [r8]
 800ac32:	f8d8 1004 	ldr.w	r1, [r8, #4]
    obj->coords.x2 = obj->coords.x1 + w - 1;
 800ac36:	444d      	add	r5, r9
    obj->coords.y2 = obj->coords.y1 + h - 1;
 800ac38:	441f      	add	r7, r3
 800ac3a:	ab02      	add	r3, sp, #8
    obj->coords.x2 = obj->coords.x1 + w - 1;
 800ac3c:	82a5      	strh	r5, [r4, #20]
    obj->signal_func(obj, LV_SIGNAL_CORD_CHG, &ori);
 800ac3e:	461a      	mov	r2, r3
    obj->coords.y2 = obj->coords.y1 + h - 1;
 800ac40:	82e7      	strh	r7, [r4, #22]
    obj->signal_func(obj, LV_SIGNAL_CORD_CHG, &ori);
 800ac42:	69a5      	ldr	r5, [r4, #24]
 800ac44:	c303      	stmia	r3!, {r0, r1}
 800ac46:	2102      	movs	r1, #2
 800ac48:	4620      	mov	r0, r4
 800ac4a:	47a8      	blx	r5
    return obj->par;
 800ac4c:	6820      	ldr	r0, [r4, #0]
    if(par != NULL) par->signal_func(par, LV_SIGNAL_CHILD_CHG, obj);
 800ac4e:	b118      	cbz	r0, 800ac58 <lv_obj_set_size+0x7c>
 800ac50:	6983      	ldr	r3, [r0, #24]
 800ac52:	4622      	mov	r2, r4
 800ac54:	2101      	movs	r1, #1
 800ac56:	4798      	blx	r3
    return obj->hidden == 0 ? false : true;
 800ac58:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    if(lv_obj_get_hidden(obj)) return;
 800ac5c:	06d8      	lsls	r0, r3, #27
 800ac5e:	d411      	bmi.n	800ac84 <lv_obj_set_size+0xa8>
 800ac60:	4622      	mov	r2, r4
 800ac62:	e000      	b.n	800ac66 <lv_obj_set_size+0x8a>
    } while(par != NULL);
 800ac64:	461a      	mov	r2, r3
    return obj->par;
 800ac66:	6813      	ldr	r3, [r2, #0]
    } while(par != NULL);
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d1fb      	bne.n	800ac64 <lv_obj_set_size+0x88>
    return LV_GC_ROOT(_lv_act_scr);
 800ac6c:	4b4e      	ldr	r3, [pc, #312]	; (800ada8 <lv_obj_set_size+0x1cc>)
    if(obj_scr == lv_scr_act() ||
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d044      	beq.n	800acfe <lv_obj_set_size+0x122>
    return LV_GC_ROOT(_lv_top_layer);
 800ac74:	4b4d      	ldr	r3, [pc, #308]	; (800adac <lv_obj_set_size+0x1d0>)
    if(obj_scr == lv_scr_act() ||
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	d040      	beq.n	800acfe <lv_obj_set_size+0x122>
    return LV_GC_ROOT(_lv_sys_layer);
 800ac7c:	4b4c      	ldr	r3, [pc, #304]	; (800adb0 <lv_obj_set_size+0x1d4>)
            obj_scr == lv_layer_top() ||
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d03c      	beq.n	800acfe <lv_obj_set_size+0x122>
    if(obj->realign.auto_realign) lv_obj_realign(obj);
 800ac84:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800ac88:	07da      	lsls	r2, r3, #31
 800ac8a:	d477      	bmi.n	800ad7c <lv_obj_set_size+0x1a0>
}
 800ac8c:	b007      	add	sp, #28
 800ac8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        lv_area_copy(&area_trunc, &obj->coords);
 800ac92:	46a0      	mov	r8, r4
 800ac94:	ae04      	add	r6, sp, #16
        lv_coord_t ext_size = obj->ext_size;
 800ac96:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
 800ac9a:	f858 0f10 	ldr.w	r0, [r8, #16]!
 800ac9e:	4632      	mov	r2, r6
        area_trunc.x1 -= ext_size;
 800aca0:	b29b      	uxth	r3, r3
 800aca2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800aca6:	c203      	stmia	r2!, {r0, r1}
        area_trunc.y2 += ext_size;
 800aca8:	f8bd 5016 	ldrh.w	r5, [sp, #22]
        area_trunc.x1 -= ext_size;
 800acac:	f8bd 0010 	ldrh.w	r0, [sp, #16]
        area_trunc.y1 -= ext_size;
 800acb0:	f8bd 1012 	ldrh.w	r1, [sp, #18]
        area_trunc.x2 += ext_size;
 800acb4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
        area_trunc.x1 -= ext_size;
 800acb8:	1ac0      	subs	r0, r0, r3
        area_trunc.y1 -= ext_size;
 800acba:	1ac9      	subs	r1, r1, r3
        area_trunc.x2 += ext_size;
 800acbc:	441a      	add	r2, r3
        area_trunc.y2 += ext_size;
 800acbe:	442b      	add	r3, r5
    return obj->par;
 800acc0:	6825      	ldr	r5, [r4, #0]
        area_trunc.x1 -= ext_size;
 800acc2:	f8ad 0010 	strh.w	r0, [sp, #16]
        area_trunc.y1 -= ext_size;
 800acc6:	f8ad 1012 	strh.w	r1, [sp, #18]
        area_trunc.x2 += ext_size;
 800acca:	f8ad 2014 	strh.w	r2, [sp, #20]
        area_trunc.y2 += ext_size;
 800acce:	f8ad 3016 	strh.w	r3, [sp, #22]
        while(par != NULL) {
 800acd2:	b95d      	cbnz	r5, 800acec <lv_obj_set_size+0x110>
        if(union_ok != false) lv_inv_area(&area_trunc);
 800acd4:	4630      	mov	r0, r6
 800acd6:	f001 fb9f 	bl	800c418 <lv_inv_area>
 800acda:	8a25      	ldrh	r5, [r4, #16]
 800acdc:	e7a3      	b.n	800ac26 <lv_obj_set_size+0x4a>
    return obj->hidden == 0 ? false : true;
 800acde:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
            if(lv_obj_get_hidden(par)) return;  /*If the parent is hidden then the child is hidden and won't be drawn*/
 800ace2:	06db      	lsls	r3, r3, #27
 800ace4:	d4f9      	bmi.n	800acda <lv_obj_set_size+0xfe>
    return obj->par;
 800ace6:	682d      	ldr	r5, [r5, #0]
        while(par != NULL) {
 800ace8:	2d00      	cmp	r5, #0
 800acea:	d0f3      	beq.n	800acd4 <lv_obj_set_size+0xf8>
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 800acec:	f105 0210 	add.w	r2, r5, #16
 800acf0:	4631      	mov	r1, r6
 800acf2:	4630      	mov	r0, r6
 800acf4:	f007 fee8 	bl	8012ac8 <lv_area_intersect>
            if(union_ok == false) break;        /*If no common parts with parent break;*/
 800acf8:	2800      	cmp	r0, #0
 800acfa:	d1f0      	bne.n	800acde <lv_obj_set_size+0x102>
 800acfc:	e7ed      	b.n	800acda <lv_obj_set_size+0xfe>
 800acfe:	ae04      	add	r6, sp, #16
 800ad00:	f8d8 0000 	ldr.w	r0, [r8]
 800ad04:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ad08:	4632      	mov	r2, r6
        lv_coord_t ext_size = obj->ext_size;
 800ad0a:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
    return obj->par;
 800ad0e:	6825      	ldr	r5, [r4, #0]
        area_trunc.x1 -= ext_size;
 800ad10:	b29b      	uxth	r3, r3
 800ad12:	c203      	stmia	r2!, {r0, r1}
 800ad14:	f8bd 0010 	ldrh.w	r0, [sp, #16]
        area_trunc.y1 -= ext_size;
 800ad18:	f8bd 1012 	ldrh.w	r1, [sp, #18]
        area_trunc.x2 += ext_size;
 800ad1c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
        area_trunc.x1 -= ext_size;
 800ad20:	1ac0      	subs	r0, r0, r3
        area_trunc.y2 += ext_size;
 800ad22:	f8bd 7016 	ldrh.w	r7, [sp, #22]
        area_trunc.y1 -= ext_size;
 800ad26:	1ac9      	subs	r1, r1, r3
        area_trunc.x2 += ext_size;
 800ad28:	441a      	add	r2, r3
        area_trunc.x1 -= ext_size;
 800ad2a:	f8ad 0010 	strh.w	r0, [sp, #16]
        area_trunc.y2 += ext_size;
 800ad2e:	443b      	add	r3, r7
        area_trunc.y1 -= ext_size;
 800ad30:	f8ad 1012 	strh.w	r1, [sp, #18]
        area_trunc.x2 += ext_size;
 800ad34:	f8ad 2014 	strh.w	r2, [sp, #20]
        area_trunc.y2 += ext_size;
 800ad38:	f8ad 3016 	strh.w	r3, [sp, #22]
        while(par != NULL) {
 800ad3c:	b955      	cbnz	r5, 800ad54 <lv_obj_set_size+0x178>
        if(union_ok != false) lv_inv_area(&area_trunc);
 800ad3e:	4630      	mov	r0, r6
 800ad40:	f001 fb6a 	bl	800c418 <lv_inv_area>
 800ad44:	e79e      	b.n	800ac84 <lv_obj_set_size+0xa8>
    return obj->hidden == 0 ? false : true;
 800ad46:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
            if(lv_obj_get_hidden(par)) return;  /*If the parent is hidden then the child is hidden and won't be drawn*/
 800ad4a:	06d9      	lsls	r1, r3, #27
 800ad4c:	d49a      	bmi.n	800ac84 <lv_obj_set_size+0xa8>
    return obj->par;
 800ad4e:	682d      	ldr	r5, [r5, #0]
        while(par != NULL) {
 800ad50:	2d00      	cmp	r5, #0
 800ad52:	d0f4      	beq.n	800ad3e <lv_obj_set_size+0x162>
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 800ad54:	f105 0210 	add.w	r2, r5, #16
 800ad58:	4631      	mov	r1, r6
 800ad5a:	4630      	mov	r0, r6
 800ad5c:	f007 feb4 	bl	8012ac8 <lv_area_intersect>
            if(union_ok == false) break;        /*If no common parts with parent break;*/
 800ad60:	2800      	cmp	r0, #0
 800ad62:	d1f0      	bne.n	800ad46 <lv_obj_set_size+0x16a>
 800ad64:	e78e      	b.n	800ac84 <lv_obj_set_size+0xa8>
    return area_p->y2 - area_p->y1 + 1;
 800ad66:	8ac3      	ldrh	r3, [r0, #22]
 800ad68:	8a44      	ldrh	r4, [r0, #18]
 800ad6a:	3301      	adds	r3, #1
 800ad6c:	1b1b      	subs	r3, r3, r4
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
 800ad6e:	b21b      	sxth	r3, r3
 800ad70:	429a      	cmp	r2, r3
 800ad72:	f47f af3e 	bne.w	800abf2 <lv_obj_set_size+0x16>
}
 800ad76:	b007      	add	sp, #28
 800ad78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(obj->realign.origo_align) lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 800ad7c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800ad80:	f013 0f02 	tst.w	r3, #2
 800ad84:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ad86:	4620      	mov	r0, r4
 800ad88:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	; 0x3c
 800ad8c:	f9b4 403e 	ldrsh.w	r4, [r4, #62]	; 0x3e
 800ad90:	9400      	str	r4, [sp, #0]
 800ad92:	d104      	bne.n	800ad9e <lv_obj_set_size+0x1c2>
    else lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 800ad94:	f7ff fc06 	bl	800a5a4 <lv_obj_align>
}
 800ad98:	b007      	add	sp, #28
 800ad9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(obj->realign.origo_align) lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 800ad9e:	f7ff fdf5 	bl	800a98c <lv_obj_align_origo>
}
 800ada2:	b007      	add	sp, #28
 800ada4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ada8:	200194b4 	.word	0x200194b4
 800adac:	200194b0 	.word	0x200194b0
 800adb0:	200194d8 	.word	0x200194d8

0800adb4 <lv_obj_set_height>:
 800adb4:	8ac3      	ldrh	r3, [r0, #22]
{
 800adb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adba:	3301      	adds	r3, #1
 800adbc:	8a45      	ldrh	r5, [r0, #18]
 800adbe:	b086      	sub	sp, #24
    return area_p->x2 - area_p->x1 + 1;
 800adc0:	8a87      	ldrh	r7, [r0, #20]
    return area_p->y2 - area_p->y1 + 1;
 800adc2:	1b5b      	subs	r3, r3, r5
    return area_p->x2 - area_p->x1 + 1;
 800adc4:	f8b0 9010 	ldrh.w	r9, [r0, #16]
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
 800adc8:	b21b      	sxth	r3, r3
 800adca:	4299      	cmp	r1, r3
 800adcc:	d04e      	beq.n	800ae6c <lv_obj_set_height+0xb8>
    return obj->hidden == 0 ? false : true;
 800adce:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800add2:	460e      	mov	r6, r1
 800add4:	4604      	mov	r4, r0
    if(lv_obj_get_hidden(obj)) return;
 800add6:	06da      	lsls	r2, r3, #27
 800add8:	d413      	bmi.n	800ae02 <lv_obj_set_height+0x4e>
 800adda:	4602      	mov	r2, r0
 800addc:	e000      	b.n	800ade0 <lv_obj_set_height+0x2c>
    } while(par != NULL);
 800adde:	461a      	mov	r2, r3
    return obj->par;
 800ade0:	6813      	ldr	r3, [r2, #0]
    } while(par != NULL);
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d1fb      	bne.n	800adde <lv_obj_set_height+0x2a>
    return LV_GC_ROOT(_lv_act_scr);
 800ade6:	4b64      	ldr	r3, [pc, #400]	; (800af78 <lv_obj_set_height+0x1c4>)
    if(obj_scr == lv_scr_act() ||
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	429a      	cmp	r2, r3
 800adec:	f000 8087 	beq.w	800aefe <lv_obj_set_height+0x14a>
    return LV_GC_ROOT(_lv_top_layer);
 800adf0:	4b62      	ldr	r3, [pc, #392]	; (800af7c <lv_obj_set_height+0x1c8>)
    if(obj_scr == lv_scr_act() ||
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	429a      	cmp	r2, r3
 800adf6:	f000 8082 	beq.w	800aefe <lv_obj_set_height+0x14a>
    return LV_GC_ROOT(_lv_sys_layer);
 800adfa:	4b61      	ldr	r3, [pc, #388]	; (800af80 <lv_obj_set_height+0x1cc>)
            obj_scr == lv_layer_top() ||
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d07d      	beq.n	800aefe <lv_obj_set_height+0x14a>
 800ae02:	f104 0810 	add.w	r8, r4, #16
 800ae06:	464b      	mov	r3, r9
    obj->coords.x2 = obj->coords.x1 + w - 1;
 800ae08:	eba7 0709 	sub.w	r7, r7, r9
    obj->coords.y2 = obj->coords.y1 + h - 1;
 800ae0c:	3e01      	subs	r6, #1
    memcpy(dest, src, sizeof(lv_area_t));
 800ae0e:	f8d8 0000 	ldr.w	r0, [r8]
 800ae12:	f8d8 1004 	ldr.w	r1, [r8, #4]
    obj->coords.x2 = obj->coords.x1 + w - 1;
 800ae16:	441f      	add	r7, r3
    obj->coords.y2 = obj->coords.y1 + h - 1;
 800ae18:	4435      	add	r5, r6
 800ae1a:	ab02      	add	r3, sp, #8
    obj->coords.x2 = obj->coords.x1 + w - 1;
 800ae1c:	82a7      	strh	r7, [r4, #20]
    obj->signal_func(obj, LV_SIGNAL_CORD_CHG, &ori);
 800ae1e:	461a      	mov	r2, r3
    obj->coords.y2 = obj->coords.y1 + h - 1;
 800ae20:	82e5      	strh	r5, [r4, #22]
    obj->signal_func(obj, LV_SIGNAL_CORD_CHG, &ori);
 800ae22:	69a5      	ldr	r5, [r4, #24]
 800ae24:	c303      	stmia	r3!, {r0, r1}
 800ae26:	2102      	movs	r1, #2
 800ae28:	4620      	mov	r0, r4
 800ae2a:	47a8      	blx	r5
    return obj->par;
 800ae2c:	6820      	ldr	r0, [r4, #0]
    if(par != NULL) par->signal_func(par, LV_SIGNAL_CHILD_CHG, obj);
 800ae2e:	b118      	cbz	r0, 800ae38 <lv_obj_set_height+0x84>
 800ae30:	6983      	ldr	r3, [r0, #24]
 800ae32:	4622      	mov	r2, r4
 800ae34:	2101      	movs	r1, #1
 800ae36:	4798      	blx	r3
    return obj->hidden == 0 ? false : true;
 800ae38:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    if(lv_obj_get_hidden(obj)) return;
 800ae3c:	06d8      	lsls	r0, r3, #27
 800ae3e:	d411      	bmi.n	800ae64 <lv_obj_set_height+0xb0>
 800ae40:	4622      	mov	r2, r4
 800ae42:	e000      	b.n	800ae46 <lv_obj_set_height+0x92>
    } while(par != NULL);
 800ae44:	461a      	mov	r2, r3
    return obj->par;
 800ae46:	6813      	ldr	r3, [r2, #0]
    } while(par != NULL);
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d1fb      	bne.n	800ae44 <lv_obj_set_height+0x90>
    return LV_GC_ROOT(_lv_act_scr);
 800ae4c:	4b4a      	ldr	r3, [pc, #296]	; (800af78 <lv_obj_set_height+0x1c4>)
    if(obj_scr == lv_scr_act() ||
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d01f      	beq.n	800ae94 <lv_obj_set_height+0xe0>
    return LV_GC_ROOT(_lv_top_layer);
 800ae54:	4b49      	ldr	r3, [pc, #292]	; (800af7c <lv_obj_set_height+0x1c8>)
    if(obj_scr == lv_scr_act() ||
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d01b      	beq.n	800ae94 <lv_obj_set_height+0xe0>
    return LV_GC_ROOT(_lv_sys_layer);
 800ae5c:	4b48      	ldr	r3, [pc, #288]	; (800af80 <lv_obj_set_height+0x1cc>)
            obj_scr == lv_layer_top() ||
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d017      	beq.n	800ae94 <lv_obj_set_height+0xe0>
    if(obj->realign.auto_realign) lv_obj_realign(obj);
 800ae64:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800ae68:	07da      	lsls	r2, r3, #31
 800ae6a:	d402      	bmi.n	800ae72 <lv_obj_set_height+0xbe>
}
 800ae6c:	b006      	add	sp, #24
 800ae6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(obj->realign.origo_align) lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 800ae72:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800ae76:	f013 0f02 	tst.w	r3, #2
 800ae7a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ae7c:	4620      	mov	r0, r4
 800ae7e:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	; 0x3c
 800ae82:	f9b4 403e 	ldrsh.w	r4, [r4, #62]	; 0x3e
 800ae86:	9400      	str	r4, [sp, #0]
 800ae88:	d171      	bne.n	800af6e <lv_obj_set_height+0x1ba>
    else lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 800ae8a:	f7ff fb8b 	bl	800a5a4 <lv_obj_align>
}
 800ae8e:	b006      	add	sp, #24
 800ae90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae94:	f10d 0a10 	add.w	sl, sp, #16
 800ae98:	f8d8 0000 	ldr.w	r0, [r8]
 800ae9c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800aea0:	4652      	mov	r2, sl
        lv_coord_t ext_size = obj->ext_size;
 800aea2:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
    return obj->par;
 800aea6:	6825      	ldr	r5, [r4, #0]
        area_trunc.x1 -= ext_size;
 800aea8:	b29b      	uxth	r3, r3
 800aeaa:	c203      	stmia	r2!, {r0, r1}
 800aeac:	f8bd 0010 	ldrh.w	r0, [sp, #16]
        area_trunc.y1 -= ext_size;
 800aeb0:	f8bd 1012 	ldrh.w	r1, [sp, #18]
        area_trunc.x2 += ext_size;
 800aeb4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
        area_trunc.x1 -= ext_size;
 800aeb8:	1ac0      	subs	r0, r0, r3
        area_trunc.y2 += ext_size;
 800aeba:	f8bd 6016 	ldrh.w	r6, [sp, #22]
        area_trunc.y1 -= ext_size;
 800aebe:	1ac9      	subs	r1, r1, r3
        area_trunc.x2 += ext_size;
 800aec0:	441a      	add	r2, r3
        area_trunc.x1 -= ext_size;
 800aec2:	f8ad 0010 	strh.w	r0, [sp, #16]
        area_trunc.y2 += ext_size;
 800aec6:	4433      	add	r3, r6
        area_trunc.y1 -= ext_size;
 800aec8:	f8ad 1012 	strh.w	r1, [sp, #18]
        area_trunc.x2 += ext_size;
 800aecc:	f8ad 2014 	strh.w	r2, [sp, #20]
        area_trunc.y2 += ext_size;
 800aed0:	f8ad 3016 	strh.w	r3, [sp, #22]
        while(par != NULL) {
 800aed4:	b955      	cbnz	r5, 800aeec <lv_obj_set_height+0x138>
        if(union_ok != false) lv_inv_area(&area_trunc);
 800aed6:	4650      	mov	r0, sl
 800aed8:	f001 fa9e 	bl	800c418 <lv_inv_area>
 800aedc:	e7c2      	b.n	800ae64 <lv_obj_set_height+0xb0>
    return obj->hidden == 0 ? false : true;
 800aede:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
            if(lv_obj_get_hidden(par)) return;  /*If the parent is hidden then the child is hidden and won't be drawn*/
 800aee2:	06d9      	lsls	r1, r3, #27
 800aee4:	d4be      	bmi.n	800ae64 <lv_obj_set_height+0xb0>
    return obj->par;
 800aee6:	682d      	ldr	r5, [r5, #0]
        while(par != NULL) {
 800aee8:	2d00      	cmp	r5, #0
 800aeea:	d0f4      	beq.n	800aed6 <lv_obj_set_height+0x122>
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 800aeec:	f105 0210 	add.w	r2, r5, #16
 800aef0:	4651      	mov	r1, sl
 800aef2:	4650      	mov	r0, sl
 800aef4:	f007 fde8 	bl	8012ac8 <lv_area_intersect>
            if(union_ok == false) break;        /*If no common parts with parent break;*/
 800aef8:	2800      	cmp	r0, #0
 800aefa:	d1f0      	bne.n	800aede <lv_obj_set_height+0x12a>
 800aefc:	e7b2      	b.n	800ae64 <lv_obj_set_height+0xb0>
        lv_area_copy(&area_trunc, &obj->coords);
 800aefe:	46a0      	mov	r8, r4
 800af00:	f10d 0a10 	add.w	sl, sp, #16
        lv_coord_t ext_size = obj->ext_size;
 800af04:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
 800af08:	f858 0f10 	ldr.w	r0, [r8, #16]!
 800af0c:	4652      	mov	r2, sl
        area_trunc.x1 -= ext_size;
 800af0e:	b29b      	uxth	r3, r3
 800af10:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800af14:	c203      	stmia	r2!, {r0, r1}
        area_trunc.y2 += ext_size;
 800af16:	f8bd 5016 	ldrh.w	r5, [sp, #22]
        area_trunc.x1 -= ext_size;
 800af1a:	f8bd 0010 	ldrh.w	r0, [sp, #16]
        area_trunc.y1 -= ext_size;
 800af1e:	f8bd 1012 	ldrh.w	r1, [sp, #18]
        area_trunc.x2 += ext_size;
 800af22:	f8bd 2014 	ldrh.w	r2, [sp, #20]
        area_trunc.x1 -= ext_size;
 800af26:	1ac0      	subs	r0, r0, r3
        area_trunc.y1 -= ext_size;
 800af28:	1ac9      	subs	r1, r1, r3
        area_trunc.x2 += ext_size;
 800af2a:	441a      	add	r2, r3
        area_trunc.y2 += ext_size;
 800af2c:	442b      	add	r3, r5
    return obj->par;
 800af2e:	6825      	ldr	r5, [r4, #0]
        area_trunc.x1 -= ext_size;
 800af30:	f8ad 0010 	strh.w	r0, [sp, #16]
        area_trunc.y1 -= ext_size;
 800af34:	f8ad 1012 	strh.w	r1, [sp, #18]
        area_trunc.x2 += ext_size;
 800af38:	f8ad 2014 	strh.w	r2, [sp, #20]
        area_trunc.y2 += ext_size;
 800af3c:	f8ad 3016 	strh.w	r3, [sp, #22]
        while(par != NULL) {
 800af40:	b965      	cbnz	r5, 800af5c <lv_obj_set_height+0x1a8>
        if(union_ok != false) lv_inv_area(&area_trunc);
 800af42:	4650      	mov	r0, sl
 800af44:	f001 fa68 	bl	800c418 <lv_inv_area>
 800af48:	8a23      	ldrh	r3, [r4, #16]
 800af4a:	8a65      	ldrh	r5, [r4, #18]
 800af4c:	e75c      	b.n	800ae08 <lv_obj_set_height+0x54>
    return obj->hidden == 0 ? false : true;
 800af4e:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
            if(lv_obj_get_hidden(par)) return;  /*If the parent is hidden then the child is hidden and won't be drawn*/
 800af52:	06db      	lsls	r3, r3, #27
 800af54:	d4f8      	bmi.n	800af48 <lv_obj_set_height+0x194>
    return obj->par;
 800af56:	682d      	ldr	r5, [r5, #0]
        while(par != NULL) {
 800af58:	2d00      	cmp	r5, #0
 800af5a:	d0f2      	beq.n	800af42 <lv_obj_set_height+0x18e>
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 800af5c:	f105 0210 	add.w	r2, r5, #16
 800af60:	4651      	mov	r1, sl
 800af62:	4650      	mov	r0, sl
 800af64:	f007 fdb0 	bl	8012ac8 <lv_area_intersect>
            if(union_ok == false) break;        /*If no common parts with parent break;*/
 800af68:	2800      	cmp	r0, #0
 800af6a:	d1f0      	bne.n	800af4e <lv_obj_set_height+0x19a>
 800af6c:	e7ec      	b.n	800af48 <lv_obj_set_height+0x194>
    if(obj->realign.origo_align) lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 800af6e:	f7ff fd0d 	bl	800a98c <lv_obj_align_origo>
}
 800af72:	b006      	add	sp, #24
 800af74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af78:	200194b4 	.word	0x200194b4
 800af7c:	200194b0 	.word	0x200194b0
 800af80:	200194d8 	.word	0x200194d8

0800af84 <lv_obj_set_width>:
    return area_p->x2 - area_p->x1 + 1;
 800af84:	8a83      	ldrh	r3, [r0, #20]
{
 800af86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af8a:	3301      	adds	r3, #1
 800af8c:	8a05      	ldrh	r5, [r0, #16]
 800af8e:	b086      	sub	sp, #24
    return area_p->y2 - area_p->y1 + 1;
 800af90:	8ac7      	ldrh	r7, [r0, #22]
    return area_p->x2 - area_p->x1 + 1;
 800af92:	1b5b      	subs	r3, r3, r5
    return area_p->y2 - area_p->y1 + 1;
 800af94:	f8b0 9012 	ldrh.w	r9, [r0, #18]
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
 800af98:	b21b      	sxth	r3, r3
 800af9a:	4299      	cmp	r1, r3
 800af9c:	d04e      	beq.n	800b03c <lv_obj_set_width+0xb8>
    return obj->hidden == 0 ? false : true;
 800af9e:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800afa2:	460e      	mov	r6, r1
 800afa4:	4604      	mov	r4, r0
    if(lv_obj_get_hidden(obj)) return;
 800afa6:	06da      	lsls	r2, r3, #27
 800afa8:	d413      	bmi.n	800afd2 <lv_obj_set_width+0x4e>
 800afaa:	4602      	mov	r2, r0
 800afac:	e000      	b.n	800afb0 <lv_obj_set_width+0x2c>
    } while(par != NULL);
 800afae:	461a      	mov	r2, r3
    return obj->par;
 800afb0:	6813      	ldr	r3, [r2, #0]
    } while(par != NULL);
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d1fb      	bne.n	800afae <lv_obj_set_width+0x2a>
    return LV_GC_ROOT(_lv_act_scr);
 800afb6:	4b64      	ldr	r3, [pc, #400]	; (800b148 <lv_obj_set_width+0x1c4>)
    if(obj_scr == lv_scr_act() ||
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	429a      	cmp	r2, r3
 800afbc:	f000 8087 	beq.w	800b0ce <lv_obj_set_width+0x14a>
    return LV_GC_ROOT(_lv_top_layer);
 800afc0:	4b62      	ldr	r3, [pc, #392]	; (800b14c <lv_obj_set_width+0x1c8>)
    if(obj_scr == lv_scr_act() ||
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	429a      	cmp	r2, r3
 800afc6:	f000 8082 	beq.w	800b0ce <lv_obj_set_width+0x14a>
    return LV_GC_ROOT(_lv_sys_layer);
 800afca:	4b61      	ldr	r3, [pc, #388]	; (800b150 <lv_obj_set_width+0x1cc>)
            obj_scr == lv_layer_top() ||
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	429a      	cmp	r2, r3
 800afd0:	d07d      	beq.n	800b0ce <lv_obj_set_width+0x14a>
 800afd2:	f104 0810 	add.w	r8, r4, #16
 800afd6:	464b      	mov	r3, r9
    obj->coords.x2 = obj->coords.x1 + w - 1;
 800afd8:	3e01      	subs	r6, #1
    obj->coords.y2 = obj->coords.y1 + h - 1;
 800afda:	eba7 0709 	sub.w	r7, r7, r9
    memcpy(dest, src, sizeof(lv_area_t));
 800afde:	f8d8 0000 	ldr.w	r0, [r8]
 800afe2:	f8d8 1004 	ldr.w	r1, [r8, #4]
    obj->coords.x2 = obj->coords.x1 + w - 1;
 800afe6:	4435      	add	r5, r6
    obj->coords.y2 = obj->coords.y1 + h - 1;
 800afe8:	441f      	add	r7, r3
 800afea:	ab02      	add	r3, sp, #8
    obj->coords.x2 = obj->coords.x1 + w - 1;
 800afec:	82a5      	strh	r5, [r4, #20]
    obj->signal_func(obj, LV_SIGNAL_CORD_CHG, &ori);
 800afee:	461a      	mov	r2, r3
    obj->coords.y2 = obj->coords.y1 + h - 1;
 800aff0:	82e7      	strh	r7, [r4, #22]
    obj->signal_func(obj, LV_SIGNAL_CORD_CHG, &ori);
 800aff2:	69a5      	ldr	r5, [r4, #24]
 800aff4:	c303      	stmia	r3!, {r0, r1}
 800aff6:	2102      	movs	r1, #2
 800aff8:	4620      	mov	r0, r4
 800affa:	47a8      	blx	r5
    return obj->par;
 800affc:	6820      	ldr	r0, [r4, #0]
    if(par != NULL) par->signal_func(par, LV_SIGNAL_CHILD_CHG, obj);
 800affe:	b118      	cbz	r0, 800b008 <lv_obj_set_width+0x84>
 800b000:	6983      	ldr	r3, [r0, #24]
 800b002:	4622      	mov	r2, r4
 800b004:	2101      	movs	r1, #1
 800b006:	4798      	blx	r3
    return obj->hidden == 0 ? false : true;
 800b008:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    if(lv_obj_get_hidden(obj)) return;
 800b00c:	06d8      	lsls	r0, r3, #27
 800b00e:	d411      	bmi.n	800b034 <lv_obj_set_width+0xb0>
 800b010:	4622      	mov	r2, r4
 800b012:	e000      	b.n	800b016 <lv_obj_set_width+0x92>
    } while(par != NULL);
 800b014:	461a      	mov	r2, r3
    return obj->par;
 800b016:	6813      	ldr	r3, [r2, #0]
    } while(par != NULL);
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d1fb      	bne.n	800b014 <lv_obj_set_width+0x90>
    return LV_GC_ROOT(_lv_act_scr);
 800b01c:	4b4a      	ldr	r3, [pc, #296]	; (800b148 <lv_obj_set_width+0x1c4>)
    if(obj_scr == lv_scr_act() ||
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	429a      	cmp	r2, r3
 800b022:	d01f      	beq.n	800b064 <lv_obj_set_width+0xe0>
    return LV_GC_ROOT(_lv_top_layer);
 800b024:	4b49      	ldr	r3, [pc, #292]	; (800b14c <lv_obj_set_width+0x1c8>)
    if(obj_scr == lv_scr_act() ||
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	429a      	cmp	r2, r3
 800b02a:	d01b      	beq.n	800b064 <lv_obj_set_width+0xe0>
    return LV_GC_ROOT(_lv_sys_layer);
 800b02c:	4b48      	ldr	r3, [pc, #288]	; (800b150 <lv_obj_set_width+0x1cc>)
            obj_scr == lv_layer_top() ||
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	429a      	cmp	r2, r3
 800b032:	d017      	beq.n	800b064 <lv_obj_set_width+0xe0>
    if(obj->realign.auto_realign) lv_obj_realign(obj);
 800b034:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800b038:	07da      	lsls	r2, r3, #31
 800b03a:	d402      	bmi.n	800b042 <lv_obj_set_width+0xbe>
}
 800b03c:	b006      	add	sp, #24
 800b03e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(obj->realign.origo_align) lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 800b042:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800b046:	f013 0f02 	tst.w	r3, #2
 800b04a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b04c:	4620      	mov	r0, r4
 800b04e:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	; 0x3c
 800b052:	f9b4 403e 	ldrsh.w	r4, [r4, #62]	; 0x3e
 800b056:	9400      	str	r4, [sp, #0]
 800b058:	d171      	bne.n	800b13e <lv_obj_set_width+0x1ba>
    else lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 800b05a:	f7ff faa3 	bl	800a5a4 <lv_obj_align>
}
 800b05e:	b006      	add	sp, #24
 800b060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b064:	f10d 0a10 	add.w	sl, sp, #16
 800b068:	f8d8 0000 	ldr.w	r0, [r8]
 800b06c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b070:	4652      	mov	r2, sl
        lv_coord_t ext_size = obj->ext_size;
 800b072:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
    return obj->par;
 800b076:	6825      	ldr	r5, [r4, #0]
        area_trunc.x1 -= ext_size;
 800b078:	b29b      	uxth	r3, r3
 800b07a:	c203      	stmia	r2!, {r0, r1}
 800b07c:	f8bd 0010 	ldrh.w	r0, [sp, #16]
        area_trunc.y1 -= ext_size;
 800b080:	f8bd 1012 	ldrh.w	r1, [sp, #18]
        area_trunc.x2 += ext_size;
 800b084:	f8bd 2014 	ldrh.w	r2, [sp, #20]
        area_trunc.x1 -= ext_size;
 800b088:	1ac0      	subs	r0, r0, r3
        area_trunc.y2 += ext_size;
 800b08a:	f8bd 6016 	ldrh.w	r6, [sp, #22]
        area_trunc.y1 -= ext_size;
 800b08e:	1ac9      	subs	r1, r1, r3
        area_trunc.x2 += ext_size;
 800b090:	441a      	add	r2, r3
        area_trunc.x1 -= ext_size;
 800b092:	f8ad 0010 	strh.w	r0, [sp, #16]
        area_trunc.y2 += ext_size;
 800b096:	4433      	add	r3, r6
        area_trunc.y1 -= ext_size;
 800b098:	f8ad 1012 	strh.w	r1, [sp, #18]
        area_trunc.x2 += ext_size;
 800b09c:	f8ad 2014 	strh.w	r2, [sp, #20]
        area_trunc.y2 += ext_size;
 800b0a0:	f8ad 3016 	strh.w	r3, [sp, #22]
        while(par != NULL) {
 800b0a4:	b955      	cbnz	r5, 800b0bc <lv_obj_set_width+0x138>
        if(union_ok != false) lv_inv_area(&area_trunc);
 800b0a6:	4650      	mov	r0, sl
 800b0a8:	f001 f9b6 	bl	800c418 <lv_inv_area>
 800b0ac:	e7c2      	b.n	800b034 <lv_obj_set_width+0xb0>
    return obj->hidden == 0 ? false : true;
 800b0ae:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
            if(lv_obj_get_hidden(par)) return;  /*If the parent is hidden then the child is hidden and won't be drawn*/
 800b0b2:	06d9      	lsls	r1, r3, #27
 800b0b4:	d4be      	bmi.n	800b034 <lv_obj_set_width+0xb0>
    return obj->par;
 800b0b6:	682d      	ldr	r5, [r5, #0]
        while(par != NULL) {
 800b0b8:	2d00      	cmp	r5, #0
 800b0ba:	d0f4      	beq.n	800b0a6 <lv_obj_set_width+0x122>
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 800b0bc:	f105 0210 	add.w	r2, r5, #16
 800b0c0:	4651      	mov	r1, sl
 800b0c2:	4650      	mov	r0, sl
 800b0c4:	f007 fd00 	bl	8012ac8 <lv_area_intersect>
            if(union_ok == false) break;        /*If no common parts with parent break;*/
 800b0c8:	2800      	cmp	r0, #0
 800b0ca:	d1f0      	bne.n	800b0ae <lv_obj_set_width+0x12a>
 800b0cc:	e7b2      	b.n	800b034 <lv_obj_set_width+0xb0>
        lv_area_copy(&area_trunc, &obj->coords);
 800b0ce:	46a0      	mov	r8, r4
 800b0d0:	f10d 0a10 	add.w	sl, sp, #16
        lv_coord_t ext_size = obj->ext_size;
 800b0d4:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
 800b0d8:	f858 0f10 	ldr.w	r0, [r8, #16]!
 800b0dc:	4652      	mov	r2, sl
        area_trunc.x1 -= ext_size;
 800b0de:	b29b      	uxth	r3, r3
 800b0e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b0e4:	c203      	stmia	r2!, {r0, r1}
        area_trunc.y2 += ext_size;
 800b0e6:	f8bd 5016 	ldrh.w	r5, [sp, #22]
        area_trunc.x1 -= ext_size;
 800b0ea:	f8bd 0010 	ldrh.w	r0, [sp, #16]
        area_trunc.y1 -= ext_size;
 800b0ee:	f8bd 1012 	ldrh.w	r1, [sp, #18]
        area_trunc.x2 += ext_size;
 800b0f2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
        area_trunc.x1 -= ext_size;
 800b0f6:	1ac0      	subs	r0, r0, r3
        area_trunc.y1 -= ext_size;
 800b0f8:	1ac9      	subs	r1, r1, r3
        area_trunc.x2 += ext_size;
 800b0fa:	441a      	add	r2, r3
        area_trunc.y2 += ext_size;
 800b0fc:	442b      	add	r3, r5
    return obj->par;
 800b0fe:	6825      	ldr	r5, [r4, #0]
        area_trunc.x1 -= ext_size;
 800b100:	f8ad 0010 	strh.w	r0, [sp, #16]
        area_trunc.y1 -= ext_size;
 800b104:	f8ad 1012 	strh.w	r1, [sp, #18]
        area_trunc.x2 += ext_size;
 800b108:	f8ad 2014 	strh.w	r2, [sp, #20]
        area_trunc.y2 += ext_size;
 800b10c:	f8ad 3016 	strh.w	r3, [sp, #22]
        while(par != NULL) {
 800b110:	b965      	cbnz	r5, 800b12c <lv_obj_set_width+0x1a8>
        if(union_ok != false) lv_inv_area(&area_trunc);
 800b112:	4650      	mov	r0, sl
 800b114:	f001 f980 	bl	800c418 <lv_inv_area>
 800b118:	8a25      	ldrh	r5, [r4, #16]
 800b11a:	8a63      	ldrh	r3, [r4, #18]
 800b11c:	e75c      	b.n	800afd8 <lv_obj_set_width+0x54>
    return obj->hidden == 0 ? false : true;
 800b11e:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
            if(lv_obj_get_hidden(par)) return;  /*If the parent is hidden then the child is hidden and won't be drawn*/
 800b122:	06db      	lsls	r3, r3, #27
 800b124:	d4f8      	bmi.n	800b118 <lv_obj_set_width+0x194>
    return obj->par;
 800b126:	682d      	ldr	r5, [r5, #0]
        while(par != NULL) {
 800b128:	2d00      	cmp	r5, #0
 800b12a:	d0f2      	beq.n	800b112 <lv_obj_set_width+0x18e>
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 800b12c:	f105 0210 	add.w	r2, r5, #16
 800b130:	4651      	mov	r1, sl
 800b132:	4650      	mov	r0, sl
 800b134:	f007 fcc8 	bl	8012ac8 <lv_area_intersect>
            if(union_ok == false) break;        /*If no common parts with parent break;*/
 800b138:	2800      	cmp	r0, #0
 800b13a:	d1f0      	bne.n	800b11e <lv_obj_set_width+0x19a>
 800b13c:	e7ec      	b.n	800b118 <lv_obj_set_width+0x194>
    if(obj->realign.origo_align) lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 800b13e:	f7ff fc25 	bl	800a98c <lv_obj_align_origo>
}
 800b142:	b006      	add	sp, #24
 800b144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b148:	200194b4 	.word	0x200194b4
 800b14c:	200194b0 	.word	0x200194b0
 800b150:	200194d8 	.word	0x200194d8

0800b154 <lv_obj_set_style>:
{
 800b154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        result = lv_ll_get_head(&obj->child_ll);
 800b158:	f100 0904 	add.w	r9, r0, #4
{
 800b15c:	b087      	sub	sp, #28
 800b15e:	4680      	mov	r8, r0
    obj->style_p = style;
 800b160:	6241      	str	r1, [r0, #36]	; 0x24
        result = lv_ll_get_head(&obj->child_ll);
 800b162:	4648      	mov	r0, r9
 800b164:	f008 f814 	bl	8013190 <lv_ll_get_head>
    while(child != NULL) {
 800b168:	b1e8      	cbz	r0, 800b1a6 <lv_obj_set_style+0x52>
    return LV_GC_ROOT(_lv_sys_layer);
 800b16a:	f8cd 8000 	str.w	r8, [sp]
 800b16e:	4682      	mov	sl, r0
 800b170:	46c8      	mov	r8, r9
 800b172:	e005      	b.n	800b180 <lv_obj_set_style+0x2c>
        result = lv_ll_get_next(&obj->child_ll, child);
 800b174:	4651      	mov	r1, sl
 800b176:	4640      	mov	r0, r8
 800b178:	f008 f812 	bl	80131a0 <lv_ll_get_next>
    while(child != NULL) {
 800b17c:	4682      	mov	sl, r0
 800b17e:	b180      	cbz	r0, 800b1a2 <lv_obj_set_style+0x4e>
        if(child->style_p == NULL) {
 800b180:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800b184:	2b00      	cmp	r3, #0
 800b186:	d049      	beq.n	800b21c <lv_obj_set_style+0xc8>
        } else if(child->style_p->glass) {
 800b188:	781b      	ldrb	r3, [r3, #0]
 800b18a:	07d8      	lsls	r0, r3, #31
 800b18c:	d5f2      	bpl.n	800b174 <lv_obj_set_style+0x20>
            refresh_children_style(child);
 800b18e:	4650      	mov	r0, sl
 800b190:	f7fe f9d4 	bl	800953c <refresh_children_style>
        result = lv_ll_get_next(&obj->child_ll, child);
 800b194:	4651      	mov	r1, sl
 800b196:	4640      	mov	r0, r8
 800b198:	f008 f802 	bl	80131a0 <lv_ll_get_next>
    while(child != NULL) {
 800b19c:	4682      	mov	sl, r0
 800b19e:	2800      	cmp	r0, #0
 800b1a0:	d1ee      	bne.n	800b180 <lv_obj_set_style+0x2c>
 800b1a2:	f8dd 8000 	ldr.w	r8, [sp]
    return obj->hidden == 0 ? false : true;
 800b1a6:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
    if(lv_obj_get_hidden(obj)) return;
 800b1aa:	06de      	lsls	r6, r3, #27
 800b1ac:	d414      	bmi.n	800b1d8 <lv_obj_set_style+0x84>
 800b1ae:	4642      	mov	r2, r8
 800b1b0:	e000      	b.n	800b1b4 <lv_obj_set_style+0x60>
    } while(par != NULL);
 800b1b2:	461a      	mov	r2, r3
    return obj->par;
 800b1b4:	6813      	ldr	r3, [r2, #0]
    } while(par != NULL);
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d1fb      	bne.n	800b1b2 <lv_obj_set_style+0x5e>
    return LV_GC_ROOT(_lv_act_scr);
 800b1ba:	4bb8      	ldr	r3, [pc, #736]	; (800b49c <lv_obj_set_style+0x348>)
    if(obj_scr == lv_scr_act() ||
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	f000 80f4 	beq.w	800b3ac <lv_obj_set_style+0x258>
    return LV_GC_ROOT(_lv_top_layer);
 800b1c4:	4bb6      	ldr	r3, [pc, #728]	; (800b4a0 <lv_obj_set_style+0x34c>)
    if(obj_scr == lv_scr_act() ||
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	f000 80ef 	beq.w	800b3ac <lv_obj_set_style+0x258>
    return LV_GC_ROOT(_lv_sys_layer);
 800b1ce:	4bb5      	ldr	r3, [pc, #724]	; (800b4a4 <lv_obj_set_style+0x350>)
            obj_scr == lv_layer_top() ||
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	f000 80ea 	beq.w	800b3ac <lv_obj_set_style+0x258>
    obj->signal_func(obj, LV_SIGNAL_STYLE_CHG, NULL);
 800b1d8:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	2103      	movs	r1, #3
 800b1e0:	4640      	mov	r0, r8
 800b1e2:	4798      	blx	r3
    return obj->hidden == 0 ? false : true;
 800b1e4:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
    if(lv_obj_get_hidden(obj)) return;
 800b1e8:	06da      	lsls	r2, r3, #27
 800b1ea:	d414      	bmi.n	800b216 <lv_obj_set_style+0xc2>
 800b1ec:	4642      	mov	r2, r8
 800b1ee:	e000      	b.n	800b1f2 <lv_obj_set_style+0x9e>
    } while(par != NULL);
 800b1f0:	461a      	mov	r2, r3
    return obj->par;
 800b1f2:	6813      	ldr	r3, [r2, #0]
    } while(par != NULL);
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d1fb      	bne.n	800b1f0 <lv_obj_set_style+0x9c>
    return LV_GC_ROOT(_lv_act_scr);
 800b1f8:	4ba8      	ldr	r3, [pc, #672]	; (800b49c <lv_obj_set_style+0x348>)
    if(obj_scr == lv_scr_act() ||
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	f000 80a1 	beq.w	800b344 <lv_obj_set_style+0x1f0>
    return LV_GC_ROOT(_lv_top_layer);
 800b202:	4ba7      	ldr	r3, [pc, #668]	; (800b4a0 <lv_obj_set_style+0x34c>)
    if(obj_scr == lv_scr_act() ||
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	429a      	cmp	r2, r3
 800b208:	f000 809c 	beq.w	800b344 <lv_obj_set_style+0x1f0>
    return LV_GC_ROOT(_lv_sys_layer);
 800b20c:	4ba5      	ldr	r3, [pc, #660]	; (800b4a4 <lv_obj_set_style+0x350>)
            obj_scr == lv_layer_top() ||
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	429a      	cmp	r2, r3
 800b212:	f000 8097 	beq.w	800b344 <lv_obj_set_style+0x1f0>
}
 800b216:	b007      	add	sp, #28
 800b218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        result = lv_ll_get_head(&obj->child_ll);
 800b21c:	f10a 0704 	add.w	r7, sl, #4
 800b220:	4638      	mov	r0, r7
 800b222:	f007 ffb5 	bl	8013190 <lv_ll_get_head>
    while(child != NULL) {
 800b226:	4606      	mov	r6, r0
 800b228:	b1f8      	cbz	r0, 800b26a <lv_obj_set_style+0x116>
 800b22a:	f8cd 8004 	str.w	r8, [sp, #4]
 800b22e:	f8cd a008 	str.w	sl, [sp, #8]
 800b232:	e005      	b.n	800b240 <lv_obj_set_style+0xec>
        result = lv_ll_get_next(&obj->child_ll, child);
 800b234:	4631      	mov	r1, r6
 800b236:	4638      	mov	r0, r7
 800b238:	f007 ffb2 	bl	80131a0 <lv_ll_get_next>
    while(child != NULL) {
 800b23c:	4606      	mov	r6, r0
 800b23e:	b180      	cbz	r0, 800b262 <lv_obj_set_style+0x10e>
        if(child->style_p == NULL) {
 800b240:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b242:	2b00      	cmp	r3, #0
 800b244:	f000 80e6 	beq.w	800b414 <lv_obj_set_style+0x2c0>
        } else if(child->style_p->glass) {
 800b248:	781b      	ldrb	r3, [r3, #0]
 800b24a:	07da      	lsls	r2, r3, #31
 800b24c:	d5f2      	bpl.n	800b234 <lv_obj_set_style+0xe0>
            refresh_children_style(child);
 800b24e:	4630      	mov	r0, r6
 800b250:	f7fe f974 	bl	800953c <refresh_children_style>
        result = lv_ll_get_next(&obj->child_ll, child);
 800b254:	4631      	mov	r1, r6
 800b256:	4638      	mov	r0, r7
 800b258:	f007 ffa2 	bl	80131a0 <lv_ll_get_next>
    while(child != NULL) {
 800b25c:	4606      	mov	r6, r0
 800b25e:	2800      	cmp	r0, #0
 800b260:	d1ee      	bne.n	800b240 <lv_obj_set_style+0xec>
 800b262:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b266:	f8dd a008 	ldr.w	sl, [sp, #8]
    return obj->hidden == 0 ? false : true;
 800b26a:	f89a 3030 	ldrb.w	r3, [sl, #48]	; 0x30
    if(lv_obj_get_hidden(obj)) return;
 800b26e:	06dd      	lsls	r5, r3, #27
 800b270:	d414      	bmi.n	800b29c <lv_obj_set_style+0x148>
 800b272:	4652      	mov	r2, sl
 800b274:	e000      	b.n	800b278 <lv_obj_set_style+0x124>
    } while(par != NULL);
 800b276:	461a      	mov	r2, r3
    return obj->par;
 800b278:	6813      	ldr	r3, [r2, #0]
    } while(par != NULL);
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d1fb      	bne.n	800b276 <lv_obj_set_style+0x122>
    if(obj_scr == lv_scr_act() ||
 800b27e:	4b87      	ldr	r3, [pc, #540]	; (800b49c <lv_obj_set_style+0x348>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	429a      	cmp	r2, r3
 800b284:	f000 826c 	beq.w	800b760 <lv_obj_set_style+0x60c>
    return LV_GC_ROOT(_lv_top_layer);
 800b288:	4b85      	ldr	r3, [pc, #532]	; (800b4a0 <lv_obj_set_style+0x34c>)
    if(obj_scr == lv_scr_act() ||
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	429a      	cmp	r2, r3
 800b28e:	f000 8267 	beq.w	800b760 <lv_obj_set_style+0x60c>
            obj_scr == lv_layer_top() ||
 800b292:	4b84      	ldr	r3, [pc, #528]	; (800b4a4 <lv_obj_set_style+0x350>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	429a      	cmp	r2, r3
 800b298:	f000 8262 	beq.w	800b760 <lv_obj_set_style+0x60c>
    obj->signal_func(obj, LV_SIGNAL_STYLE_CHG, NULL);
 800b29c:	f8da 3018 	ldr.w	r3, [sl, #24]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	2103      	movs	r1, #3
 800b2a4:	4650      	mov	r0, sl
 800b2a6:	4798      	blx	r3
    return obj->hidden == 0 ? false : true;
 800b2a8:	f89a 3030 	ldrb.w	r3, [sl, #48]	; 0x30
    if(lv_obj_get_hidden(obj)) return;
 800b2ac:	06df      	lsls	r7, r3, #27
 800b2ae:	f53f af61 	bmi.w	800b174 <lv_obj_set_style+0x20>
 800b2b2:	4652      	mov	r2, sl
 800b2b4:	e000      	b.n	800b2b8 <lv_obj_set_style+0x164>
    } while(par != NULL);
 800b2b6:	461a      	mov	r2, r3
    return obj->par;
 800b2b8:	6813      	ldr	r3, [r2, #0]
    } while(par != NULL);
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d1fb      	bne.n	800b2b6 <lv_obj_set_style+0x162>
    if(obj_scr == lv_scr_act() ||
 800b2be:	4b77      	ldr	r3, [pc, #476]	; (800b49c <lv_obj_set_style+0x348>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d008      	beq.n	800b2d8 <lv_obj_set_style+0x184>
    return LV_GC_ROOT(_lv_top_layer);
 800b2c6:	4b76      	ldr	r3, [pc, #472]	; (800b4a0 <lv_obj_set_style+0x34c>)
    if(obj_scr == lv_scr_act() ||
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d004      	beq.n	800b2d8 <lv_obj_set_style+0x184>
            obj_scr == lv_layer_top() ||
 800b2ce:	4b75      	ldr	r3, [pc, #468]	; (800b4a4 <lv_obj_set_style+0x350>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	429a      	cmp	r2, r3
 800b2d4:	f47f af4e 	bne.w	800b174 <lv_obj_set_style+0x20>
 800b2d8:	4651      	mov	r1, sl
 800b2da:	ad04      	add	r5, sp, #16
        lv_coord_t ext_size = obj->ext_size;
 800b2dc:	f9ba 3034 	ldrsh.w	r3, [sl, #52]	; 0x34
 800b2e0:	f851 0f10 	ldr.w	r0, [r1, #16]!
 800b2e4:	462a      	mov	r2, r5
    return obj->par;
 800b2e6:	f8da 4000 	ldr.w	r4, [sl]
        area_trunc.x1 -= ext_size;
 800b2ea:	b29b      	uxth	r3, r3
 800b2ec:	6849      	ldr	r1, [r1, #4]
 800b2ee:	c203      	stmia	r2!, {r0, r1}
 800b2f0:	f8bd 0010 	ldrh.w	r0, [sp, #16]
        area_trunc.y1 -= ext_size;
 800b2f4:	f8bd 1012 	ldrh.w	r1, [sp, #18]
        area_trunc.x2 += ext_size;
 800b2f8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
        area_trunc.x1 -= ext_size;
 800b2fc:	1ac0      	subs	r0, r0, r3
        area_trunc.y2 += ext_size;
 800b2fe:	f8bd 6016 	ldrh.w	r6, [sp, #22]
        area_trunc.y1 -= ext_size;
 800b302:	1ac9      	subs	r1, r1, r3
        area_trunc.x2 += ext_size;
 800b304:	441a      	add	r2, r3
        area_trunc.x1 -= ext_size;
 800b306:	f8ad 0010 	strh.w	r0, [sp, #16]
        area_trunc.y2 += ext_size;
 800b30a:	4433      	add	r3, r6
        area_trunc.y1 -= ext_size;
 800b30c:	f8ad 1012 	strh.w	r1, [sp, #18]
        area_trunc.x2 += ext_size;
 800b310:	f8ad 2014 	strh.w	r2, [sp, #20]
        area_trunc.y2 += ext_size;
 800b314:	f8ad 3016 	strh.w	r3, [sp, #22]
        while(par != NULL) {
 800b318:	b184      	cbz	r4, 800b33c <lv_obj_set_style+0x1e8>
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 800b31a:	f104 0210 	add.w	r2, r4, #16
 800b31e:	4629      	mov	r1, r5
 800b320:	4628      	mov	r0, r5
 800b322:	f007 fbd1 	bl	8012ac8 <lv_area_intersect>
            if(union_ok == false) break;        /*If no common parts with parent break;*/
 800b326:	2800      	cmp	r0, #0
 800b328:	f43f af24 	beq.w	800b174 <lv_obj_set_style+0x20>
    return obj->hidden == 0 ? false : true;
 800b32c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
            if(lv_obj_get_hidden(par)) return;  /*If the parent is hidden then the child is hidden and won't be drawn*/
 800b330:	06de      	lsls	r6, r3, #27
 800b332:	f53f af1f 	bmi.w	800b174 <lv_obj_set_style+0x20>
    return obj->par;
 800b336:	6824      	ldr	r4, [r4, #0]
        while(par != NULL) {
 800b338:	2c00      	cmp	r4, #0
 800b33a:	d1ee      	bne.n	800b31a <lv_obj_set_style+0x1c6>
        if(union_ok != false) lv_inv_area(&area_trunc);
 800b33c:	4628      	mov	r0, r5
 800b33e:	f001 f86b 	bl	800c418 <lv_inv_area>
 800b342:	e717      	b.n	800b174 <lv_obj_set_style+0x20>
 800b344:	4641      	mov	r1, r8
 800b346:	ad04      	add	r5, sp, #16
        lv_coord_t ext_size = obj->ext_size;
 800b348:	f9b8 3034 	ldrsh.w	r3, [r8, #52]	; 0x34
 800b34c:	f851 0f10 	ldr.w	r0, [r1, #16]!
 800b350:	462a      	mov	r2, r5
        area_trunc.x1 -= ext_size;
 800b352:	b29b      	uxth	r3, r3
    return obj->par;
 800b354:	f8d8 4000 	ldr.w	r4, [r8]
 800b358:	6849      	ldr	r1, [r1, #4]
 800b35a:	c203      	stmia	r2!, {r0, r1}
        area_trunc.x1 -= ext_size;
 800b35c:	f8bd 0010 	ldrh.w	r0, [sp, #16]
        area_trunc.y1 -= ext_size;
 800b360:	f8bd 1012 	ldrh.w	r1, [sp, #18]
        area_trunc.x2 += ext_size;
 800b364:	f8bd 2014 	ldrh.w	r2, [sp, #20]
        area_trunc.x1 -= ext_size;
 800b368:	1ac0      	subs	r0, r0, r3
        area_trunc.y2 += ext_size;
 800b36a:	f8bd 6016 	ldrh.w	r6, [sp, #22]
        area_trunc.y1 -= ext_size;
 800b36e:	1ac9      	subs	r1, r1, r3
        area_trunc.x2 += ext_size;
 800b370:	441a      	add	r2, r3
        area_trunc.x1 -= ext_size;
 800b372:	f8ad 0010 	strh.w	r0, [sp, #16]
        area_trunc.y2 += ext_size;
 800b376:	4433      	add	r3, r6
        area_trunc.y1 -= ext_size;
 800b378:	f8ad 1012 	strh.w	r1, [sp, #18]
        area_trunc.x2 += ext_size;
 800b37c:	f8ad 2014 	strh.w	r2, [sp, #20]
        area_trunc.y2 += ext_size;
 800b380:	f8ad 3016 	strh.w	r3, [sp, #22]
        while(par != NULL) {
 800b384:	b94c      	cbnz	r4, 800b39a <lv_obj_set_style+0x246>
 800b386:	e2a0      	b.n	800b8ca <lv_obj_set_style+0x776>
    return obj->hidden == 0 ? false : true;
 800b388:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
            if(lv_obj_get_hidden(par)) return;  /*If the parent is hidden then the child is hidden and won't be drawn*/
 800b38c:	06db      	lsls	r3, r3, #27
 800b38e:	f53f af42 	bmi.w	800b216 <lv_obj_set_style+0xc2>
    return obj->par;
 800b392:	6824      	ldr	r4, [r4, #0]
        while(par != NULL) {
 800b394:	2c00      	cmp	r4, #0
 800b396:	f000 8298 	beq.w	800b8ca <lv_obj_set_style+0x776>
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 800b39a:	f104 0210 	add.w	r2, r4, #16
 800b39e:	4629      	mov	r1, r5
 800b3a0:	4628      	mov	r0, r5
 800b3a2:	f007 fb91 	bl	8012ac8 <lv_area_intersect>
            if(union_ok == false) break;        /*If no common parts with parent break;*/
 800b3a6:	2800      	cmp	r0, #0
 800b3a8:	d1ee      	bne.n	800b388 <lv_obj_set_style+0x234>
 800b3aa:	e734      	b.n	800b216 <lv_obj_set_style+0xc2>
 800b3ac:	4641      	mov	r1, r8
 800b3ae:	ad04      	add	r5, sp, #16
        lv_coord_t ext_size = obj->ext_size;
 800b3b0:	f9b8 3034 	ldrsh.w	r3, [r8, #52]	; 0x34
 800b3b4:	f851 0f10 	ldr.w	r0, [r1, #16]!
 800b3b8:	462a      	mov	r2, r5
        area_trunc.x1 -= ext_size;
 800b3ba:	b29b      	uxth	r3, r3
    return obj->par;
 800b3bc:	f8d8 4000 	ldr.w	r4, [r8]
 800b3c0:	6849      	ldr	r1, [r1, #4]
 800b3c2:	c203      	stmia	r2!, {r0, r1}
        area_trunc.x1 -= ext_size;
 800b3c4:	f8bd 0010 	ldrh.w	r0, [sp, #16]
        area_trunc.y1 -= ext_size;
 800b3c8:	f8bd 1012 	ldrh.w	r1, [sp, #18]
        area_trunc.x2 += ext_size;
 800b3cc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
        area_trunc.x1 -= ext_size;
 800b3d0:	1ac0      	subs	r0, r0, r3
        area_trunc.y2 += ext_size;
 800b3d2:	f8bd 6016 	ldrh.w	r6, [sp, #22]
        area_trunc.y1 -= ext_size;
 800b3d6:	1ac9      	subs	r1, r1, r3
        area_trunc.x2 += ext_size;
 800b3d8:	441a      	add	r2, r3
        area_trunc.x1 -= ext_size;
 800b3da:	f8ad 0010 	strh.w	r0, [sp, #16]
        area_trunc.y2 += ext_size;
 800b3de:	4433      	add	r3, r6
        area_trunc.y1 -= ext_size;
 800b3e0:	f8ad 1012 	strh.w	r1, [sp, #18]
        area_trunc.x2 += ext_size;
 800b3e4:	f8ad 2014 	strh.w	r2, [sp, #20]
        area_trunc.y2 += ext_size;
 800b3e8:	f8ad 3016 	strh.w	r3, [sp, #22]
        while(par != NULL) {
 800b3ec:	b94c      	cbnz	r4, 800b402 <lv_obj_set_style+0x2ae>
 800b3ee:	e268      	b.n	800b8c2 <lv_obj_set_style+0x76e>
    return obj->hidden == 0 ? false : true;
 800b3f0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
            if(lv_obj_get_hidden(par)) return;  /*If the parent is hidden then the child is hidden and won't be drawn*/
 800b3f4:	06d9      	lsls	r1, r3, #27
 800b3f6:	f53f aeef 	bmi.w	800b1d8 <lv_obj_set_style+0x84>
    return obj->par;
 800b3fa:	6824      	ldr	r4, [r4, #0]
        while(par != NULL) {
 800b3fc:	2c00      	cmp	r4, #0
 800b3fe:	f000 8260 	beq.w	800b8c2 <lv_obj_set_style+0x76e>
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 800b402:	f104 0210 	add.w	r2, r4, #16
 800b406:	4629      	mov	r1, r5
 800b408:	4628      	mov	r0, r5
 800b40a:	f007 fb5d 	bl	8012ac8 <lv_area_intersect>
            if(union_ok == false) break;        /*If no common parts with parent break;*/
 800b40e:	2800      	cmp	r0, #0
 800b410:	d1ee      	bne.n	800b3f0 <lv_obj_set_style+0x29c>
 800b412:	e6e1      	b.n	800b1d8 <lv_obj_set_style+0x84>
        result = lv_ll_get_head(&obj->child_ll);
 800b414:	f106 0804 	add.w	r8, r6, #4
 800b418:	4640      	mov	r0, r8
 800b41a:	f007 feb9 	bl	8013190 <lv_ll_get_head>
    while(child != NULL) {
 800b41e:	4604      	mov	r4, r0
 800b420:	b930      	cbnz	r0, 800b430 <lv_obj_set_style+0x2dc>
 800b422:	e015      	b.n	800b450 <lv_obj_set_style+0x2fc>
        result = lv_ll_get_next(&obj->child_ll, child);
 800b424:	4621      	mov	r1, r4
 800b426:	4640      	mov	r0, r8
 800b428:	f007 feba 	bl	80131a0 <lv_ll_get_next>
    while(child != NULL) {
 800b42c:	4604      	mov	r4, r0
 800b42e:	b178      	cbz	r0, 800b450 <lv_obj_set_style+0x2fc>
        if(child->style_p == NULL) {
 800b430:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b432:	2b00      	cmp	r3, #0
 800b434:	d07e      	beq.n	800b534 <lv_obj_set_style+0x3e0>
        } else if(child->style_p->glass) {
 800b436:	781b      	ldrb	r3, [r3, #0]
 800b438:	07da      	lsls	r2, r3, #31
 800b43a:	d5f3      	bpl.n	800b424 <lv_obj_set_style+0x2d0>
            refresh_children_style(child);
 800b43c:	4620      	mov	r0, r4
 800b43e:	f7fe f87d 	bl	800953c <refresh_children_style>
        result = lv_ll_get_next(&obj->child_ll, child);
 800b442:	4621      	mov	r1, r4
 800b444:	4640      	mov	r0, r8
 800b446:	f007 feab 	bl	80131a0 <lv_ll_get_next>
    while(child != NULL) {
 800b44a:	4604      	mov	r4, r0
 800b44c:	2800      	cmp	r0, #0
 800b44e:	d1ef      	bne.n	800b430 <lv_obj_set_style+0x2dc>
    return obj->hidden == 0 ? false : true;
 800b450:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    if(lv_obj_get_hidden(obj)) return;
 800b454:	06dc      	lsls	r4, r3, #27
 800b456:	d414      	bmi.n	800b482 <lv_obj_set_style+0x32e>
 800b458:	4632      	mov	r2, r6
 800b45a:	e000      	b.n	800b45e <lv_obj_set_style+0x30a>
    } while(par != NULL);
 800b45c:	461a      	mov	r2, r3
    return obj->par;
 800b45e:	6813      	ldr	r3, [r2, #0]
    } while(par != NULL);
 800b460:	2b00      	cmp	r3, #0
 800b462:	d1fb      	bne.n	800b45c <lv_obj_set_style+0x308>
    if(obj_scr == lv_scr_act() ||
 800b464:	4b0d      	ldr	r3, [pc, #52]	; (800b49c <lv_obj_set_style+0x348>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	429a      	cmp	r2, r3
 800b46a:	f000 81b3 	beq.w	800b7d4 <lv_obj_set_style+0x680>
    return LV_GC_ROOT(_lv_top_layer);
 800b46e:	4b0c      	ldr	r3, [pc, #48]	; (800b4a0 <lv_obj_set_style+0x34c>)
    if(obj_scr == lv_scr_act() ||
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	429a      	cmp	r2, r3
 800b474:	f000 81ae 	beq.w	800b7d4 <lv_obj_set_style+0x680>
            obj_scr == lv_layer_top() ||
 800b478:	4b0a      	ldr	r3, [pc, #40]	; (800b4a4 <lv_obj_set_style+0x350>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	429a      	cmp	r2, r3
 800b47e:	f000 81a9 	beq.w	800b7d4 <lv_obj_set_style+0x680>
    obj->signal_func(obj, LV_SIGNAL_STYLE_CHG, NULL);
 800b482:	69b3      	ldr	r3, [r6, #24]
 800b484:	2200      	movs	r2, #0
 800b486:	2103      	movs	r1, #3
 800b488:	4630      	mov	r0, r6
 800b48a:	4798      	blx	r3
    return obj->hidden == 0 ? false : true;
 800b48c:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    if(lv_obj_get_hidden(obj)) return;
 800b490:	06d8      	lsls	r0, r3, #27
 800b492:	f53f aecf 	bmi.w	800b234 <lv_obj_set_style+0xe0>
 800b496:	4632      	mov	r2, r6
 800b498:	e007      	b.n	800b4aa <lv_obj_set_style+0x356>
 800b49a:	bf00      	nop
 800b49c:	200194b4 	.word	0x200194b4
 800b4a0:	200194b0 	.word	0x200194b0
 800b4a4:	200194d8 	.word	0x200194d8
    } while(par != NULL);
 800b4a8:	461a      	mov	r2, r3
    return obj->par;
 800b4aa:	6813      	ldr	r3, [r2, #0]
    } while(par != NULL);
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d1fb      	bne.n	800b4a8 <lv_obj_set_style+0x354>
    if(obj_scr == lv_scr_act() ||
 800b4b0:	4bbc      	ldr	r3, [pc, #752]	; (800b7a4 <lv_obj_set_style+0x650>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d008      	beq.n	800b4ca <lv_obj_set_style+0x376>
    return LV_GC_ROOT(_lv_top_layer);
 800b4b8:	4bbb      	ldr	r3, [pc, #748]	; (800b7a8 <lv_obj_set_style+0x654>)
    if(obj_scr == lv_scr_act() ||
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	d004      	beq.n	800b4ca <lv_obj_set_style+0x376>
            obj_scr == lv_layer_top() ||
 800b4c0:	4bba      	ldr	r3, [pc, #744]	; (800b7ac <lv_obj_set_style+0x658>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	429a      	cmp	r2, r3
 800b4c6:	f47f aeb5 	bne.w	800b234 <lv_obj_set_style+0xe0>
 800b4ca:	4631      	mov	r1, r6
 800b4cc:	ad04      	add	r5, sp, #16
        lv_coord_t ext_size = obj->ext_size;
 800b4ce:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	; 0x34
 800b4d2:	f851 0f10 	ldr.w	r0, [r1, #16]!
 800b4d6:	462a      	mov	r2, r5
    return obj->par;
 800b4d8:	6834      	ldr	r4, [r6, #0]
        area_trunc.x1 -= ext_size;
 800b4da:	b29b      	uxth	r3, r3
 800b4dc:	6849      	ldr	r1, [r1, #4]
 800b4de:	c203      	stmia	r2!, {r0, r1}
 800b4e0:	f8bd 0010 	ldrh.w	r0, [sp, #16]
        area_trunc.y1 -= ext_size;
 800b4e4:	f8bd 1012 	ldrh.w	r1, [sp, #18]
        area_trunc.x2 += ext_size;
 800b4e8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
        area_trunc.x1 -= ext_size;
 800b4ec:	1ac0      	subs	r0, r0, r3
        area_trunc.y2 += ext_size;
 800b4ee:	f8bd e016 	ldrh.w	lr, [sp, #22]
        area_trunc.y1 -= ext_size;
 800b4f2:	1ac9      	subs	r1, r1, r3
        area_trunc.x2 += ext_size;
 800b4f4:	441a      	add	r2, r3
        area_trunc.x1 -= ext_size;
 800b4f6:	f8ad 0010 	strh.w	r0, [sp, #16]
        area_trunc.y2 += ext_size;
 800b4fa:	4473      	add	r3, lr
        area_trunc.y1 -= ext_size;
 800b4fc:	f8ad 1012 	strh.w	r1, [sp, #18]
        area_trunc.x2 += ext_size;
 800b500:	f8ad 2014 	strh.w	r2, [sp, #20]
        area_trunc.y2 += ext_size;
 800b504:	f8ad 3016 	strh.w	r3, [sp, #22]
        while(par != NULL) {
 800b508:	b184      	cbz	r4, 800b52c <lv_obj_set_style+0x3d8>
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 800b50a:	f104 0210 	add.w	r2, r4, #16
 800b50e:	4629      	mov	r1, r5
 800b510:	4628      	mov	r0, r5
 800b512:	f007 fad9 	bl	8012ac8 <lv_area_intersect>
            if(union_ok == false) break;        /*If no common parts with parent break;*/
 800b516:	2800      	cmp	r0, #0
 800b518:	f43f ae8c 	beq.w	800b234 <lv_obj_set_style+0xe0>
    return obj->hidden == 0 ? false : true;
 800b51c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
            if(lv_obj_get_hidden(par)) return;  /*If the parent is hidden then the child is hidden and won't be drawn*/
 800b520:	06d9      	lsls	r1, r3, #27
 800b522:	f53f ae87 	bmi.w	800b234 <lv_obj_set_style+0xe0>
    return obj->par;
 800b526:	6824      	ldr	r4, [r4, #0]
        while(par != NULL) {
 800b528:	2c00      	cmp	r4, #0
 800b52a:	d1ee      	bne.n	800b50a <lv_obj_set_style+0x3b6>
        if(union_ok != false) lv_inv_area(&area_trunc);
 800b52c:	4628      	mov	r0, r5
 800b52e:	f000 ff73 	bl	800c418 <lv_inv_area>
 800b532:	e67f      	b.n	800b234 <lv_obj_set_style+0xe0>
        result = lv_ll_get_head(&obj->child_ll);
 800b534:	f104 0904 	add.w	r9, r4, #4
 800b538:	4648      	mov	r0, r9
 800b53a:	f007 fe29 	bl	8013190 <lv_ll_get_head>
    while(child != NULL) {
 800b53e:	4605      	mov	r5, r0
 800b540:	b930      	cbnz	r0, 800b550 <lv_obj_set_style+0x3fc>
 800b542:	e015      	b.n	800b570 <lv_obj_set_style+0x41c>
        result = lv_ll_get_next(&obj->child_ll, child);
 800b544:	4629      	mov	r1, r5
 800b546:	4648      	mov	r0, r9
 800b548:	f007 fe2a 	bl	80131a0 <lv_ll_get_next>
    while(child != NULL) {
 800b54c:	4605      	mov	r5, r0
 800b54e:	b178      	cbz	r0, 800b570 <lv_obj_set_style+0x41c>
        if(child->style_p == NULL) {
 800b550:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b552:	2b00      	cmp	r3, #0
 800b554:	d078      	beq.n	800b648 <lv_obj_set_style+0x4f4>
        } else if(child->style_p->glass) {
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	07da      	lsls	r2, r3, #31
 800b55a:	d5f3      	bpl.n	800b544 <lv_obj_set_style+0x3f0>
            refresh_children_style(child);
 800b55c:	4628      	mov	r0, r5
 800b55e:	f7fd ffed 	bl	800953c <refresh_children_style>
        result = lv_ll_get_next(&obj->child_ll, child);
 800b562:	4629      	mov	r1, r5
 800b564:	4648      	mov	r0, r9
 800b566:	f007 fe1b 	bl	80131a0 <lv_ll_get_next>
    while(child != NULL) {
 800b56a:	4605      	mov	r5, r0
 800b56c:	2800      	cmp	r0, #0
 800b56e:	d1ef      	bne.n	800b550 <lv_obj_set_style+0x3fc>
    return obj->hidden == 0 ? false : true;
 800b570:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    if(lv_obj_get_hidden(obj)) return;
 800b574:	06d8      	lsls	r0, r3, #27
 800b576:	d414      	bmi.n	800b5a2 <lv_obj_set_style+0x44e>
 800b578:	4622      	mov	r2, r4
 800b57a:	e000      	b.n	800b57e <lv_obj_set_style+0x42a>
    } while(par != NULL);
 800b57c:	461a      	mov	r2, r3
    return obj->par;
 800b57e:	6813      	ldr	r3, [r2, #0]
    } while(par != NULL);
 800b580:	2b00      	cmp	r3, #0
 800b582:	d1fb      	bne.n	800b57c <lv_obj_set_style+0x428>
    if(obj_scr == lv_scr_act() ||
 800b584:	4b87      	ldr	r3, [pc, #540]	; (800b7a4 <lv_obj_set_style+0x650>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	429a      	cmp	r2, r3
 800b58a:	f000 8156 	beq.w	800b83a <lv_obj_set_style+0x6e6>
 800b58e:	4b86      	ldr	r3, [pc, #536]	; (800b7a8 <lv_obj_set_style+0x654>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	429a      	cmp	r2, r3
 800b594:	f000 8151 	beq.w	800b83a <lv_obj_set_style+0x6e6>
            obj_scr == lv_layer_top() ||
 800b598:	4b84      	ldr	r3, [pc, #528]	; (800b7ac <lv_obj_set_style+0x658>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	429a      	cmp	r2, r3
 800b59e:	f000 814c 	beq.w	800b83a <lv_obj_set_style+0x6e6>
    obj->signal_func(obj, LV_SIGNAL_STYLE_CHG, NULL);
 800b5a2:	69a3      	ldr	r3, [r4, #24]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	2103      	movs	r1, #3
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	4798      	blx	r3
    return obj->hidden == 0 ? false : true;
 800b5ac:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    if(lv_obj_get_hidden(obj)) return;
 800b5b0:	06d8      	lsls	r0, r3, #27
 800b5b2:	f53f af37 	bmi.w	800b424 <lv_obj_set_style+0x2d0>
 800b5b6:	4622      	mov	r2, r4
 800b5b8:	e000      	b.n	800b5bc <lv_obj_set_style+0x468>
    } while(par != NULL);
 800b5ba:	461a      	mov	r2, r3
    return obj->par;
 800b5bc:	6813      	ldr	r3, [r2, #0]
    } while(par != NULL);
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d1fb      	bne.n	800b5ba <lv_obj_set_style+0x466>
    if(obj_scr == lv_scr_act() ||
 800b5c2:	4b78      	ldr	r3, [pc, #480]	; (800b7a4 <lv_obj_set_style+0x650>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d008      	beq.n	800b5dc <lv_obj_set_style+0x488>
 800b5ca:	4b77      	ldr	r3, [pc, #476]	; (800b7a8 <lv_obj_set_style+0x654>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	d004      	beq.n	800b5dc <lv_obj_set_style+0x488>
            obj_scr == lv_layer_top() ||
 800b5d2:	4b76      	ldr	r3, [pc, #472]	; (800b7ac <lv_obj_set_style+0x658>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	f47f af24 	bne.w	800b424 <lv_obj_set_style+0x2d0>
 800b5dc:	4621      	mov	r1, r4
 800b5de:	f10d 0910 	add.w	r9, sp, #16
        lv_coord_t ext_size = obj->ext_size;
 800b5e2:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
 800b5e6:	f851 0f10 	ldr.w	r0, [r1, #16]!
 800b5ea:	464a      	mov	r2, r9
    return obj->par;
 800b5ec:	6825      	ldr	r5, [r4, #0]
        area_trunc.x1 -= ext_size;
 800b5ee:	b29b      	uxth	r3, r3
 800b5f0:	6849      	ldr	r1, [r1, #4]
 800b5f2:	c203      	stmia	r2!, {r0, r1}
 800b5f4:	f8bd 0010 	ldrh.w	r0, [sp, #16]
        area_trunc.y1 -= ext_size;
 800b5f8:	f8bd 1012 	ldrh.w	r1, [sp, #18]
        area_trunc.x2 += ext_size;
 800b5fc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
        area_trunc.x1 -= ext_size;
 800b600:	1ac0      	subs	r0, r0, r3
        area_trunc.y2 += ext_size;
 800b602:	f8bd e016 	ldrh.w	lr, [sp, #22]
        area_trunc.y1 -= ext_size;
 800b606:	1ac9      	subs	r1, r1, r3
        area_trunc.x2 += ext_size;
 800b608:	441a      	add	r2, r3
        area_trunc.x1 -= ext_size;
 800b60a:	f8ad 0010 	strh.w	r0, [sp, #16]
        area_trunc.y2 += ext_size;
 800b60e:	4473      	add	r3, lr
        area_trunc.y1 -= ext_size;
 800b610:	f8ad 1012 	strh.w	r1, [sp, #18]
        area_trunc.x2 += ext_size;
 800b614:	f8ad 2014 	strh.w	r2, [sp, #20]
        area_trunc.y2 += ext_size;
 800b618:	f8ad 3016 	strh.w	r3, [sp, #22]
        while(par != NULL) {
 800b61c:	b185      	cbz	r5, 800b640 <lv_obj_set_style+0x4ec>
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 800b61e:	f105 0210 	add.w	r2, r5, #16
 800b622:	4649      	mov	r1, r9
 800b624:	4648      	mov	r0, r9
 800b626:	f007 fa4f 	bl	8012ac8 <lv_area_intersect>
            if(union_ok == false) break;        /*If no common parts with parent break;*/
 800b62a:	2800      	cmp	r0, #0
 800b62c:	f43f aefa 	beq.w	800b424 <lv_obj_set_style+0x2d0>
    return obj->hidden == 0 ? false : true;
 800b630:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
            if(lv_obj_get_hidden(par)) return;  /*If the parent is hidden then the child is hidden and won't be drawn*/
 800b634:	06d9      	lsls	r1, r3, #27
 800b636:	f53f aef5 	bmi.w	800b424 <lv_obj_set_style+0x2d0>
    return obj->par;
 800b63a:	682d      	ldr	r5, [r5, #0]
        while(par != NULL) {
 800b63c:	2d00      	cmp	r5, #0
 800b63e:	d1ee      	bne.n	800b61e <lv_obj_set_style+0x4ca>
        if(union_ok != false) lv_inv_area(&area_trunc);
 800b640:	4648      	mov	r0, r9
 800b642:	f000 fee9 	bl	800c418 <lv_inv_area>
 800b646:	e6ed      	b.n	800b424 <lv_obj_set_style+0x2d0>
        result = lv_ll_get_head(&obj->child_ll);
 800b648:	f105 0a04 	add.w	sl, r5, #4
 800b64c:	4650      	mov	r0, sl
 800b64e:	f007 fd9f 	bl	8013190 <lv_ll_get_head>
    while(child != NULL) {
 800b652:	4683      	mov	fp, r0
 800b654:	2800      	cmp	r0, #0
 800b656:	d17a      	bne.n	800b74e <lv_obj_set_style+0x5fa>
    return obj->hidden == 0 ? false : true;
 800b658:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    if(lv_obj_get_hidden(obj)) return;
 800b65c:	06d9      	lsls	r1, r3, #27
 800b65e:	d414      	bmi.n	800b68a <lv_obj_set_style+0x536>
 800b660:	462a      	mov	r2, r5
 800b662:	e000      	b.n	800b666 <lv_obj_set_style+0x512>
    } while(par != NULL);
 800b664:	461a      	mov	r2, r3
    return obj->par;
 800b666:	6813      	ldr	r3, [r2, #0]
    } while(par != NULL);
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d1fb      	bne.n	800b664 <lv_obj_set_style+0x510>
    if(obj_scr == lv_scr_act() ||
 800b66c:	4b4d      	ldr	r3, [pc, #308]	; (800b7a4 <lv_obj_set_style+0x650>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	429a      	cmp	r2, r3
 800b672:	f000 8132 	beq.w	800b8da <lv_obj_set_style+0x786>
 800b676:	4b4c      	ldr	r3, [pc, #304]	; (800b7a8 <lv_obj_set_style+0x654>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	429a      	cmp	r2, r3
 800b67c:	f000 812d 	beq.w	800b8da <lv_obj_set_style+0x786>
            obj_scr == lv_layer_top() ||
 800b680:	4b4a      	ldr	r3, [pc, #296]	; (800b7ac <lv_obj_set_style+0x658>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	429a      	cmp	r2, r3
 800b686:	f000 8128 	beq.w	800b8da <lv_obj_set_style+0x786>
    obj->signal_func(obj, LV_SIGNAL_STYLE_CHG, NULL);
 800b68a:	69ab      	ldr	r3, [r5, #24]
 800b68c:	2200      	movs	r2, #0
 800b68e:	2103      	movs	r1, #3
 800b690:	4628      	mov	r0, r5
 800b692:	4798      	blx	r3
    return obj->hidden == 0 ? false : true;
 800b694:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    if(lv_obj_get_hidden(obj)) return;
 800b698:	06d8      	lsls	r0, r3, #27
 800b69a:	f53f af53 	bmi.w	800b544 <lv_obj_set_style+0x3f0>
 800b69e:	462a      	mov	r2, r5
 800b6a0:	e000      	b.n	800b6a4 <lv_obj_set_style+0x550>
    } while(par != NULL);
 800b6a2:	461a      	mov	r2, r3
    return obj->par;
 800b6a4:	6813      	ldr	r3, [r2, #0]
    } while(par != NULL);
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d1fb      	bne.n	800b6a2 <lv_obj_set_style+0x54e>
    if(obj_scr == lv_scr_act() ||
 800b6aa:	4b3e      	ldr	r3, [pc, #248]	; (800b7a4 <lv_obj_set_style+0x650>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	d008      	beq.n	800b6c4 <lv_obj_set_style+0x570>
 800b6b2:	4b3d      	ldr	r3, [pc, #244]	; (800b7a8 <lv_obj_set_style+0x654>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d004      	beq.n	800b6c4 <lv_obj_set_style+0x570>
            obj_scr == lv_layer_top() ||
 800b6ba:	4b3c      	ldr	r3, [pc, #240]	; (800b7ac <lv_obj_set_style+0x658>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	f47f af40 	bne.w	800b544 <lv_obj_set_style+0x3f0>
 800b6c4:	4629      	mov	r1, r5
 800b6c6:	f10d 0b10 	add.w	fp, sp, #16
        lv_coord_t ext_size = obj->ext_size;
 800b6ca:	f9b5 3034 	ldrsh.w	r3, [r5, #52]	; 0x34
 800b6ce:	f851 0f10 	ldr.w	r0, [r1, #16]!
 800b6d2:	465a      	mov	r2, fp
    return obj->par;
 800b6d4:	f8d5 a000 	ldr.w	sl, [r5]
        area_trunc.x1 -= ext_size;
 800b6d8:	b29b      	uxth	r3, r3
 800b6da:	6849      	ldr	r1, [r1, #4]
 800b6dc:	c203      	stmia	r2!, {r0, r1}
 800b6de:	f8bd 0010 	ldrh.w	r0, [sp, #16]
        area_trunc.y1 -= ext_size;
 800b6e2:	f8bd 1012 	ldrh.w	r1, [sp, #18]
        area_trunc.x2 += ext_size;
 800b6e6:	f8bd 2014 	ldrh.w	r2, [sp, #20]
        area_trunc.x1 -= ext_size;
 800b6ea:	1ac0      	subs	r0, r0, r3
        area_trunc.y2 += ext_size;
 800b6ec:	f8bd e016 	ldrh.w	lr, [sp, #22]
        area_trunc.y1 -= ext_size;
 800b6f0:	1ac9      	subs	r1, r1, r3
        area_trunc.x2 += ext_size;
 800b6f2:	441a      	add	r2, r3
        area_trunc.x1 -= ext_size;
 800b6f4:	f8ad 0010 	strh.w	r0, [sp, #16]
        area_trunc.y2 += ext_size;
 800b6f8:	4473      	add	r3, lr
        area_trunc.y1 -= ext_size;
 800b6fa:	f8ad 1012 	strh.w	r1, [sp, #18]
        area_trunc.x2 += ext_size;
 800b6fe:	f8ad 2014 	strh.w	r2, [sp, #20]
        area_trunc.y2 += ext_size;
 800b702:	f8ad 3016 	strh.w	r3, [sp, #22]
        while(par != NULL) {
 800b706:	f1ba 0f00 	cmp.w	sl, #0
 800b70a:	f000 812c 	beq.w	800b966 <lv_obj_set_style+0x812>
 800b70e:	4653      	mov	r3, sl
 800b710:	46a2      	mov	sl, r4
 800b712:	461c      	mov	r4, r3
 800b714:	e007      	b.n	800b726 <lv_obj_set_style+0x5d2>
    return obj->hidden == 0 ? false : true;
 800b716:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
            if(lv_obj_get_hidden(par)) return;  /*If the parent is hidden then the child is hidden and won't be drawn*/
 800b71a:	06d9      	lsls	r1, r3, #27
 800b71c:	d40b      	bmi.n	800b736 <lv_obj_set_style+0x5e2>
    return obj->par;
 800b71e:	6824      	ldr	r4, [r4, #0]
        while(par != NULL) {
 800b720:	2c00      	cmp	r4, #0
 800b722:	f000 811f 	beq.w	800b964 <lv_obj_set_style+0x810>
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 800b726:	f104 0210 	add.w	r2, r4, #16
 800b72a:	4659      	mov	r1, fp
 800b72c:	4658      	mov	r0, fp
 800b72e:	f007 f9cb 	bl	8012ac8 <lv_area_intersect>
            if(union_ok == false) break;        /*If no common parts with parent break;*/
 800b732:	2800      	cmp	r0, #0
 800b734:	d1ef      	bne.n	800b716 <lv_obj_set_style+0x5c2>
 800b736:	4654      	mov	r4, sl
 800b738:	e704      	b.n	800b544 <lv_obj_set_style+0x3f0>
            refresh_children_style(child);
 800b73a:	4658      	mov	r0, fp
 800b73c:	f7fd fefe 	bl	800953c <refresh_children_style>
        result = lv_ll_get_next(&obj->child_ll, child);
 800b740:	4659      	mov	r1, fp
 800b742:	4650      	mov	r0, sl
 800b744:	f007 fd2c 	bl	80131a0 <lv_ll_get_next>
    while(child != NULL) {
 800b748:	4683      	mov	fp, r0
 800b74a:	2800      	cmp	r0, #0
 800b74c:	d084      	beq.n	800b658 <lv_obj_set_style+0x504>
        if(child->style_p == NULL) {
 800b74e:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
 800b752:	2a00      	cmp	r2, #0
 800b754:	f000 80a4 	beq.w	800b8a0 <lv_obj_set_style+0x74c>
        } else if(child->style_p->glass) {
 800b758:	7813      	ldrb	r3, [r2, #0]
 800b75a:	07da      	lsls	r2, r3, #31
 800b75c:	d5f0      	bpl.n	800b740 <lv_obj_set_style+0x5ec>
 800b75e:	e7ec      	b.n	800b73a <lv_obj_set_style+0x5e6>
 800b760:	4651      	mov	r1, sl
 800b762:	ad04      	add	r5, sp, #16
        lv_coord_t ext_size = obj->ext_size;
 800b764:	f9ba 3034 	ldrsh.w	r3, [sl, #52]	; 0x34
 800b768:	f851 0f10 	ldr.w	r0, [r1, #16]!
 800b76c:	462a      	mov	r2, r5
    return obj->par;
 800b76e:	f8da 4000 	ldr.w	r4, [sl]
        area_trunc.x1 -= ext_size;
 800b772:	b29b      	uxth	r3, r3
 800b774:	6849      	ldr	r1, [r1, #4]
 800b776:	c203      	stmia	r2!, {r0, r1}
 800b778:	f8bd 0010 	ldrh.w	r0, [sp, #16]
        area_trunc.y1 -= ext_size;
 800b77c:	f8bd 1012 	ldrh.w	r1, [sp, #18]
        area_trunc.x2 += ext_size;
 800b780:	f8bd 2014 	ldrh.w	r2, [sp, #20]
        area_trunc.x1 -= ext_size;
 800b784:	1ac0      	subs	r0, r0, r3
        area_trunc.y2 += ext_size;
 800b786:	f8bd 6016 	ldrh.w	r6, [sp, #22]
        area_trunc.y1 -= ext_size;
 800b78a:	1ac9      	subs	r1, r1, r3
        area_trunc.x2 += ext_size;
 800b78c:	441a      	add	r2, r3
        area_trunc.x1 -= ext_size;
 800b78e:	f8ad 0010 	strh.w	r0, [sp, #16]
        area_trunc.y2 += ext_size;
 800b792:	4433      	add	r3, r6
        area_trunc.y1 -= ext_size;
 800b794:	f8ad 1012 	strh.w	r1, [sp, #18]
        area_trunc.x2 += ext_size;
 800b798:	f8ad 2014 	strh.w	r2, [sp, #20]
        area_trunc.y2 += ext_size;
 800b79c:	f8ad 3016 	strh.w	r3, [sp, #22]
        while(par != NULL) {
 800b7a0:	b97c      	cbnz	r4, 800b7c2 <lv_obj_set_style+0x66e>
 800b7a2:	e096      	b.n	800b8d2 <lv_obj_set_style+0x77e>
 800b7a4:	200194b4 	.word	0x200194b4
 800b7a8:	200194b0 	.word	0x200194b0
 800b7ac:	200194d8 	.word	0x200194d8
    return obj->hidden == 0 ? false : true;
 800b7b0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
            if(lv_obj_get_hidden(par)) return;  /*If the parent is hidden then the child is hidden and won't be drawn*/
 800b7b4:	06db      	lsls	r3, r3, #27
 800b7b6:	f53f ad71 	bmi.w	800b29c <lv_obj_set_style+0x148>
    return obj->par;
 800b7ba:	6824      	ldr	r4, [r4, #0]
        while(par != NULL) {
 800b7bc:	2c00      	cmp	r4, #0
 800b7be:	f000 8088 	beq.w	800b8d2 <lv_obj_set_style+0x77e>
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 800b7c2:	f104 0210 	add.w	r2, r4, #16
 800b7c6:	4629      	mov	r1, r5
 800b7c8:	4628      	mov	r0, r5
 800b7ca:	f007 f97d 	bl	8012ac8 <lv_area_intersect>
            if(union_ok == false) break;        /*If no common parts with parent break;*/
 800b7ce:	2800      	cmp	r0, #0
 800b7d0:	d1ee      	bne.n	800b7b0 <lv_obj_set_style+0x65c>
 800b7d2:	e563      	b.n	800b29c <lv_obj_set_style+0x148>
 800b7d4:	4631      	mov	r1, r6
 800b7d6:	ad04      	add	r5, sp, #16
        lv_coord_t ext_size = obj->ext_size;
 800b7d8:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	; 0x34
 800b7dc:	f851 0f10 	ldr.w	r0, [r1, #16]!
 800b7e0:	462a      	mov	r2, r5
    return obj->par;
 800b7e2:	6834      	ldr	r4, [r6, #0]
        area_trunc.x1 -= ext_size;
 800b7e4:	b29b      	uxth	r3, r3
 800b7e6:	6849      	ldr	r1, [r1, #4]
 800b7e8:	c203      	stmia	r2!, {r0, r1}
 800b7ea:	f8bd 0010 	ldrh.w	r0, [sp, #16]
        area_trunc.y1 -= ext_size;
 800b7ee:	f8bd 1012 	ldrh.w	r1, [sp, #18]
        area_trunc.x2 += ext_size;
 800b7f2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
        area_trunc.x1 -= ext_size;
 800b7f6:	1ac0      	subs	r0, r0, r3
        area_trunc.y2 += ext_size;
 800b7f8:	f8bd e016 	ldrh.w	lr, [sp, #22]
        area_trunc.y1 -= ext_size;
 800b7fc:	1ac9      	subs	r1, r1, r3
        area_trunc.x2 += ext_size;
 800b7fe:	441a      	add	r2, r3
        area_trunc.x1 -= ext_size;
 800b800:	f8ad 0010 	strh.w	r0, [sp, #16]
        area_trunc.y2 += ext_size;
 800b804:	4473      	add	r3, lr
        area_trunc.y1 -= ext_size;
 800b806:	f8ad 1012 	strh.w	r1, [sp, #18]
        area_trunc.x2 += ext_size;
 800b80a:	f8ad 2014 	strh.w	r2, [sp, #20]
        area_trunc.y2 += ext_size;
 800b80e:	f8ad 3016 	strh.w	r3, [sp, #22]
        while(par != NULL) {
 800b812:	b94c      	cbnz	r4, 800b828 <lv_obj_set_style+0x6d4>
 800b814:	e099      	b.n	800b94a <lv_obj_set_style+0x7f6>
    return obj->hidden == 0 ? false : true;
 800b816:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
            if(lv_obj_get_hidden(par)) return;  /*If the parent is hidden then the child is hidden and won't be drawn*/
 800b81a:	06db      	lsls	r3, r3, #27
 800b81c:	f53f ae31 	bmi.w	800b482 <lv_obj_set_style+0x32e>
    return obj->par;
 800b820:	6824      	ldr	r4, [r4, #0]
        while(par != NULL) {
 800b822:	2c00      	cmp	r4, #0
 800b824:	f000 8091 	beq.w	800b94a <lv_obj_set_style+0x7f6>
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 800b828:	f104 0210 	add.w	r2, r4, #16
 800b82c:	4629      	mov	r1, r5
 800b82e:	4628      	mov	r0, r5
 800b830:	f007 f94a 	bl	8012ac8 <lv_area_intersect>
            if(union_ok == false) break;        /*If no common parts with parent break;*/
 800b834:	2800      	cmp	r0, #0
 800b836:	d1ee      	bne.n	800b816 <lv_obj_set_style+0x6c2>
 800b838:	e623      	b.n	800b482 <lv_obj_set_style+0x32e>
 800b83a:	4621      	mov	r1, r4
 800b83c:	f10d 0910 	add.w	r9, sp, #16
        lv_coord_t ext_size = obj->ext_size;
 800b840:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
 800b844:	f851 0f10 	ldr.w	r0, [r1, #16]!
 800b848:	464a      	mov	r2, r9
    return obj->par;
 800b84a:	6825      	ldr	r5, [r4, #0]
        area_trunc.x1 -= ext_size;
 800b84c:	b29b      	uxth	r3, r3
 800b84e:	6849      	ldr	r1, [r1, #4]
 800b850:	c203      	stmia	r2!, {r0, r1}
 800b852:	f8bd 0010 	ldrh.w	r0, [sp, #16]
        area_trunc.y1 -= ext_size;
 800b856:	f8bd 1012 	ldrh.w	r1, [sp, #18]
        area_trunc.x2 += ext_size;
 800b85a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
        area_trunc.x1 -= ext_size;
 800b85e:	1ac0      	subs	r0, r0, r3
        area_trunc.y2 += ext_size;
 800b860:	f8bd e016 	ldrh.w	lr, [sp, #22]
        area_trunc.y1 -= ext_size;
 800b864:	1ac9      	subs	r1, r1, r3
        area_trunc.x2 += ext_size;
 800b866:	441a      	add	r2, r3
        area_trunc.x1 -= ext_size;
 800b868:	f8ad 0010 	strh.w	r0, [sp, #16]
        area_trunc.y2 += ext_size;
 800b86c:	4473      	add	r3, lr
        area_trunc.y1 -= ext_size;
 800b86e:	f8ad 1012 	strh.w	r1, [sp, #18]
        area_trunc.x2 += ext_size;
 800b872:	f8ad 2014 	strh.w	r2, [sp, #20]
        area_trunc.y2 += ext_size;
 800b876:	f8ad 3016 	strh.w	r3, [sp, #22]
        while(par != NULL) {
 800b87a:	b945      	cbnz	r5, 800b88e <lv_obj_set_style+0x73a>
 800b87c:	e069      	b.n	800b952 <lv_obj_set_style+0x7fe>
    return obj->hidden == 0 ? false : true;
 800b87e:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
            if(lv_obj_get_hidden(par)) return;  /*If the parent is hidden then the child is hidden and won't be drawn*/
 800b882:	06db      	lsls	r3, r3, #27
 800b884:	f53f ae8d 	bmi.w	800b5a2 <lv_obj_set_style+0x44e>
    return obj->par;
 800b888:	682d      	ldr	r5, [r5, #0]
        while(par != NULL) {
 800b88a:	2d00      	cmp	r5, #0
 800b88c:	d061      	beq.n	800b952 <lv_obj_set_style+0x7fe>
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 800b88e:	f105 0210 	add.w	r2, r5, #16
 800b892:	4649      	mov	r1, r9
 800b894:	4648      	mov	r0, r9
 800b896:	f007 f917 	bl	8012ac8 <lv_area_intersect>
            if(union_ok == false) break;        /*If no common parts with parent break;*/
 800b89a:	2800      	cmp	r0, #0
 800b89c:	d1ef      	bne.n	800b87e <lv_obj_set_style+0x72a>
 800b89e:	e680      	b.n	800b5a2 <lv_obj_set_style+0x44e>
            refresh_children_style(child);     /*Check children too*/
 800b8a0:	4658      	mov	r0, fp
 800b8a2:	9203      	str	r2, [sp, #12]
 800b8a4:	f7fd fe4a 	bl	800953c <refresh_children_style>
    lv_obj_invalidate(obj);
 800b8a8:	4658      	mov	r0, fp
 800b8aa:	f7fe fa19 	bl	8009ce0 <lv_obj_invalidate>
    obj->signal_func(obj, LV_SIGNAL_STYLE_CHG, NULL);
 800b8ae:	9a03      	ldr	r2, [sp, #12]
 800b8b0:	f8db 3018 	ldr.w	r3, [fp, #24]
 800b8b4:	2103      	movs	r1, #3
 800b8b6:	4658      	mov	r0, fp
 800b8b8:	4798      	blx	r3
    lv_obj_invalidate(obj);
 800b8ba:	4658      	mov	r0, fp
 800b8bc:	f7fe fa10 	bl	8009ce0 <lv_obj_invalidate>
 800b8c0:	e73e      	b.n	800b740 <lv_obj_set_style+0x5ec>
        if(union_ok != false) lv_inv_area(&area_trunc);
 800b8c2:	4628      	mov	r0, r5
 800b8c4:	f000 fda8 	bl	800c418 <lv_inv_area>
 800b8c8:	e486      	b.n	800b1d8 <lv_obj_set_style+0x84>
 800b8ca:	4628      	mov	r0, r5
 800b8cc:	f000 fda4 	bl	800c418 <lv_inv_area>
 800b8d0:	e4a1      	b.n	800b216 <lv_obj_set_style+0xc2>
 800b8d2:	4628      	mov	r0, r5
 800b8d4:	f000 fda0 	bl	800c418 <lv_inv_area>
 800b8d8:	e4e0      	b.n	800b29c <lv_obj_set_style+0x148>
 800b8da:	4629      	mov	r1, r5
 800b8dc:	f10d 0b10 	add.w	fp, sp, #16
        lv_coord_t ext_size = obj->ext_size;
 800b8e0:	f9b5 3034 	ldrsh.w	r3, [r5, #52]	; 0x34
 800b8e4:	f851 0f10 	ldr.w	r0, [r1, #16]!
 800b8e8:	465a      	mov	r2, fp
    return obj->par;
 800b8ea:	f8d5 a000 	ldr.w	sl, [r5]
        area_trunc.x1 -= ext_size;
 800b8ee:	b29b      	uxth	r3, r3
 800b8f0:	6849      	ldr	r1, [r1, #4]
 800b8f2:	c203      	stmia	r2!, {r0, r1}
 800b8f4:	f8bd 0010 	ldrh.w	r0, [sp, #16]
        area_trunc.y1 -= ext_size;
 800b8f8:	f8bd 1012 	ldrh.w	r1, [sp, #18]
        area_trunc.x2 += ext_size;
 800b8fc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
        area_trunc.x1 -= ext_size;
 800b900:	1ac0      	subs	r0, r0, r3
        area_trunc.y2 += ext_size;
 800b902:	f8bd e016 	ldrh.w	lr, [sp, #22]
        area_trunc.y1 -= ext_size;
 800b906:	1ac9      	subs	r1, r1, r3
        area_trunc.x2 += ext_size;
 800b908:	441a      	add	r2, r3
        area_trunc.x1 -= ext_size;
 800b90a:	f8ad 0010 	strh.w	r0, [sp, #16]
        area_trunc.y2 += ext_size;
 800b90e:	4473      	add	r3, lr
        area_trunc.y1 -= ext_size;
 800b910:	f8ad 1012 	strh.w	r1, [sp, #18]
        area_trunc.x2 += ext_size;
 800b914:	f8ad 2014 	strh.w	r2, [sp, #20]
        area_trunc.y2 += ext_size;
 800b918:	f8ad 3016 	strh.w	r3, [sp, #22]
        while(par != NULL) {
 800b91c:	f1ba 0f00 	cmp.w	sl, #0
 800b920:	d01c      	beq.n	800b95c <lv_obj_set_style+0x808>
 800b922:	4623      	mov	r3, r4
 800b924:	4654      	mov	r4, sl
 800b926:	469a      	mov	sl, r3
 800b928:	e005      	b.n	800b936 <lv_obj_set_style+0x7e2>
    return obj->hidden == 0 ? false : true;
 800b92a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
            if(lv_obj_get_hidden(par)) return;  /*If the parent is hidden then the child is hidden and won't be drawn*/
 800b92e:	06db      	lsls	r3, r3, #27
 800b930:	d409      	bmi.n	800b946 <lv_obj_set_style+0x7f2>
    return obj->par;
 800b932:	6824      	ldr	r4, [r4, #0]
        while(par != NULL) {
 800b934:	b18c      	cbz	r4, 800b95a <lv_obj_set_style+0x806>
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 800b936:	f104 0210 	add.w	r2, r4, #16
 800b93a:	4659      	mov	r1, fp
 800b93c:	4658      	mov	r0, fp
 800b93e:	f007 f8c3 	bl	8012ac8 <lv_area_intersect>
            if(union_ok == false) break;        /*If no common parts with parent break;*/
 800b942:	2800      	cmp	r0, #0
 800b944:	d1f1      	bne.n	800b92a <lv_obj_set_style+0x7d6>
 800b946:	4654      	mov	r4, sl
 800b948:	e69f      	b.n	800b68a <lv_obj_set_style+0x536>
        if(union_ok != false) lv_inv_area(&area_trunc);
 800b94a:	4628      	mov	r0, r5
 800b94c:	f000 fd64 	bl	800c418 <lv_inv_area>
 800b950:	e597      	b.n	800b482 <lv_obj_set_style+0x32e>
 800b952:	4648      	mov	r0, r9
 800b954:	f000 fd60 	bl	800c418 <lv_inv_area>
 800b958:	e623      	b.n	800b5a2 <lv_obj_set_style+0x44e>
 800b95a:	4654      	mov	r4, sl
 800b95c:	4658      	mov	r0, fp
 800b95e:	f000 fd5b 	bl	800c418 <lv_inv_area>
 800b962:	e692      	b.n	800b68a <lv_obj_set_style+0x536>
 800b964:	4654      	mov	r4, sl
 800b966:	4658      	mov	r0, fp
 800b968:	f000 fd56 	bl	800c418 <lv_inv_area>
 800b96c:	e5ea      	b.n	800b544 <lv_obj_set_style+0x3f0>
 800b96e:	bf00      	nop

0800b970 <lv_obj_refresh_style>:
    return obj->hidden == 0 ? false : true;
 800b970:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
{
 800b974:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b976:	4606      	mov	r6, r0
    if(lv_obj_get_hidden(obj)) return;
 800b978:	06d8      	lsls	r0, r3, #27
{
 800b97a:	b083      	sub	sp, #12
    if(lv_obj_get_hidden(obj)) return;
 800b97c:	d411      	bmi.n	800b9a2 <lv_obj_refresh_style+0x32>
 800b97e:	4632      	mov	r2, r6
 800b980:	e000      	b.n	800b984 <lv_obj_refresh_style+0x14>
    } while(par != NULL);
 800b982:	461a      	mov	r2, r3
    return obj->par;
 800b984:	6813      	ldr	r3, [r2, #0]
    } while(par != NULL);
 800b986:	2b00      	cmp	r3, #0
 800b988:	d1fb      	bne.n	800b982 <lv_obj_refresh_style+0x12>
    return LV_GC_ROOT(_lv_act_scr);
 800b98a:	4b49      	ldr	r3, [pc, #292]	; (800bab0 <lv_obj_refresh_style+0x140>)
    if(obj_scr == lv_scr_act() ||
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	429a      	cmp	r2, r3
 800b990:	d024      	beq.n	800b9dc <lv_obj_refresh_style+0x6c>
    return LV_GC_ROOT(_lv_top_layer);
 800b992:	4b48      	ldr	r3, [pc, #288]	; (800bab4 <lv_obj_refresh_style+0x144>)
    if(obj_scr == lv_scr_act() ||
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	429a      	cmp	r2, r3
 800b998:	d020      	beq.n	800b9dc <lv_obj_refresh_style+0x6c>
    return LV_GC_ROOT(_lv_sys_layer);
 800b99a:	4b47      	ldr	r3, [pc, #284]	; (800bab8 <lv_obj_refresh_style+0x148>)
            obj_scr == lv_layer_top() ||
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d01c      	beq.n	800b9dc <lv_obj_refresh_style+0x6c>
    obj->signal_func(obj, LV_SIGNAL_STYLE_CHG, NULL);
 800b9a2:	69b3      	ldr	r3, [r6, #24]
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	2103      	movs	r1, #3
 800b9a8:	4630      	mov	r0, r6
 800b9aa:	4798      	blx	r3
    return obj->hidden == 0 ? false : true;
 800b9ac:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    if(lv_obj_get_hidden(obj)) return;
 800b9b0:	06da      	lsls	r2, r3, #27
 800b9b2:	d411      	bmi.n	800b9d8 <lv_obj_refresh_style+0x68>
 800b9b4:	4632      	mov	r2, r6
 800b9b6:	e000      	b.n	800b9ba <lv_obj_refresh_style+0x4a>
    } while(par != NULL);
 800b9b8:	461a      	mov	r2, r3
    return obj->par;
 800b9ba:	6813      	ldr	r3, [r2, #0]
    } while(par != NULL);
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d1fb      	bne.n	800b9b8 <lv_obj_refresh_style+0x48>
    return LV_GC_ROOT(_lv_act_scr);
 800b9c0:	4b3b      	ldr	r3, [pc, #236]	; (800bab0 <lv_obj_refresh_style+0x140>)
    if(obj_scr == lv_scr_act() ||
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	d03a      	beq.n	800ba3e <lv_obj_refresh_style+0xce>
    return LV_GC_ROOT(_lv_top_layer);
 800b9c8:	4b3a      	ldr	r3, [pc, #232]	; (800bab4 <lv_obj_refresh_style+0x144>)
    if(obj_scr == lv_scr_act() ||
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	429a      	cmp	r2, r3
 800b9ce:	d036      	beq.n	800ba3e <lv_obj_refresh_style+0xce>
    return LV_GC_ROOT(_lv_sys_layer);
 800b9d0:	4b39      	ldr	r3, [pc, #228]	; (800bab8 <lv_obj_refresh_style+0x148>)
            obj_scr == lv_layer_top() ||
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d032      	beq.n	800ba3e <lv_obj_refresh_style+0xce>
}
 800b9d8:	b003      	add	sp, #12
 800b9da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9dc:	4631      	mov	r1, r6
        lv_coord_t ext_size = obj->ext_size;
 800b9de:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	; 0x34
 800b9e2:	466a      	mov	r2, sp
    return obj->par;
 800b9e4:	6834      	ldr	r4, [r6, #0]
 800b9e6:	f851 0f10 	ldr.w	r0, [r1, #16]!
        area_trunc.x1 -= ext_size;
 800b9ea:	b29b      	uxth	r3, r3
 800b9ec:	466d      	mov	r5, sp
 800b9ee:	6849      	ldr	r1, [r1, #4]
 800b9f0:	c203      	stmia	r2!, {r0, r1}
 800b9f2:	f8bd 0000 	ldrh.w	r0, [sp]
        area_trunc.y1 -= ext_size;
 800b9f6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
        area_trunc.x2 += ext_size;
 800b9fa:	f8bd 2004 	ldrh.w	r2, [sp, #4]
        area_trunc.x1 -= ext_size;
 800b9fe:	1ac0      	subs	r0, r0, r3
        area_trunc.y2 += ext_size;
 800ba00:	f8bd 7006 	ldrh.w	r7, [sp, #6]
        area_trunc.y1 -= ext_size;
 800ba04:	1ac9      	subs	r1, r1, r3
        area_trunc.x2 += ext_size;
 800ba06:	441a      	add	r2, r3
        area_trunc.x1 -= ext_size;
 800ba08:	f8ad 0000 	strh.w	r0, [sp]
        area_trunc.y2 += ext_size;
 800ba0c:	443b      	add	r3, r7
        area_trunc.y1 -= ext_size;
 800ba0e:	f8ad 1002 	strh.w	r1, [sp, #2]
        area_trunc.x2 += ext_size;
 800ba12:	f8ad 2004 	strh.w	r2, [sp, #4]
        area_trunc.y2 += ext_size;
 800ba16:	f8ad 3006 	strh.w	r3, [sp, #6]
        while(par != NULL) {
 800ba1a:	b93c      	cbnz	r4, 800ba2c <lv_obj_refresh_style+0xbc>
 800ba1c:	e03f      	b.n	800ba9e <lv_obj_refresh_style+0x12e>
    return obj->hidden == 0 ? false : true;
 800ba1e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
            if(lv_obj_get_hidden(par)) return;  /*If the parent is hidden then the child is hidden and won't be drawn*/
 800ba22:	06d9      	lsls	r1, r3, #27
 800ba24:	d4bd      	bmi.n	800b9a2 <lv_obj_refresh_style+0x32>
    return obj->par;
 800ba26:	6824      	ldr	r4, [r4, #0]
        while(par != NULL) {
 800ba28:	2c00      	cmp	r4, #0
 800ba2a:	d038      	beq.n	800ba9e <lv_obj_refresh_style+0x12e>
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 800ba2c:	f104 0210 	add.w	r2, r4, #16
 800ba30:	4629      	mov	r1, r5
 800ba32:	4628      	mov	r0, r5
 800ba34:	f007 f848 	bl	8012ac8 <lv_area_intersect>
            if(union_ok == false) break;        /*If no common parts with parent break;*/
 800ba38:	2800      	cmp	r0, #0
 800ba3a:	d1f0      	bne.n	800ba1e <lv_obj_refresh_style+0xae>
 800ba3c:	e7b1      	b.n	800b9a2 <lv_obj_refresh_style+0x32>
 800ba3e:	4631      	mov	r1, r6
        lv_coord_t ext_size = obj->ext_size;
 800ba40:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	; 0x34
 800ba44:	466a      	mov	r2, sp
    return obj->par;
 800ba46:	6834      	ldr	r4, [r6, #0]
 800ba48:	f851 0f10 	ldr.w	r0, [r1, #16]!
        area_trunc.x1 -= ext_size;
 800ba4c:	b29b      	uxth	r3, r3
 800ba4e:	466d      	mov	r5, sp
 800ba50:	6849      	ldr	r1, [r1, #4]
 800ba52:	c203      	stmia	r2!, {r0, r1}
 800ba54:	f8bd 0000 	ldrh.w	r0, [sp]
        area_trunc.y1 -= ext_size;
 800ba58:	f8bd 1002 	ldrh.w	r1, [sp, #2]
        area_trunc.x2 += ext_size;
 800ba5c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
        area_trunc.x1 -= ext_size;
 800ba60:	1ac0      	subs	r0, r0, r3
        area_trunc.y2 += ext_size;
 800ba62:	f8bd 6006 	ldrh.w	r6, [sp, #6]
        area_trunc.y1 -= ext_size;
 800ba66:	1ac9      	subs	r1, r1, r3
        area_trunc.x2 += ext_size;
 800ba68:	441a      	add	r2, r3
        area_trunc.x1 -= ext_size;
 800ba6a:	f8ad 0000 	strh.w	r0, [sp]
        area_trunc.y2 += ext_size;
 800ba6e:	4433      	add	r3, r6
        area_trunc.y1 -= ext_size;
 800ba70:	f8ad 1002 	strh.w	r1, [sp, #2]
        area_trunc.x2 += ext_size;
 800ba74:	f8ad 2004 	strh.w	r2, [sp, #4]
        area_trunc.y2 += ext_size;
 800ba78:	f8ad 3006 	strh.w	r3, [sp, #6]
        while(par != NULL) {
 800ba7c:	b934      	cbnz	r4, 800ba8c <lv_obj_refresh_style+0x11c>
 800ba7e:	e012      	b.n	800baa6 <lv_obj_refresh_style+0x136>
    return obj->hidden == 0 ? false : true;
 800ba80:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
            if(lv_obj_get_hidden(par)) return;  /*If the parent is hidden then the child is hidden and won't be drawn*/
 800ba84:	06db      	lsls	r3, r3, #27
 800ba86:	d4a7      	bmi.n	800b9d8 <lv_obj_refresh_style+0x68>
    return obj->par;
 800ba88:	6824      	ldr	r4, [r4, #0]
        while(par != NULL) {
 800ba8a:	b164      	cbz	r4, 800baa6 <lv_obj_refresh_style+0x136>
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 800ba8c:	f104 0210 	add.w	r2, r4, #16
 800ba90:	4629      	mov	r1, r5
 800ba92:	4628      	mov	r0, r5
 800ba94:	f007 f818 	bl	8012ac8 <lv_area_intersect>
            if(union_ok == false) break;        /*If no common parts with parent break;*/
 800ba98:	2800      	cmp	r0, #0
 800ba9a:	d1f1      	bne.n	800ba80 <lv_obj_refresh_style+0x110>
 800ba9c:	e79c      	b.n	800b9d8 <lv_obj_refresh_style+0x68>
        if(union_ok != false) lv_inv_area(&area_trunc);
 800ba9e:	4628      	mov	r0, r5
 800baa0:	f000 fcba 	bl	800c418 <lv_inv_area>
 800baa4:	e77d      	b.n	800b9a2 <lv_obj_refresh_style+0x32>
 800baa6:	4628      	mov	r0, r5
 800baa8:	f000 fcb6 	bl	800c418 <lv_inv_area>
 800baac:	e794      	b.n	800b9d8 <lv_obj_refresh_style+0x68>
 800baae:	bf00      	nop
 800bab0:	200194b4 	.word	0x200194b4
 800bab4:	200194b0 	.word	0x200194b0
 800bab8:	200194d8 	.word	0x200194d8

0800babc <lv_obj_set_hidden>:
    if(!obj->hidden) lv_obj_invalidate(obj);    /*Invalidate when not hidden (hidden objects are ignored) */
 800babc:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
{
 800bac0:	b570      	push	{r4, r5, r6, lr}
 800bac2:	460d      	mov	r5, r1
    if(!obj->hidden) lv_obj_invalidate(obj);    /*Invalidate when not hidden (hidden objects are ignored) */
 800bac4:	06d9      	lsls	r1, r3, #27
{
 800bac6:	b082      	sub	sp, #8
 800bac8:	4604      	mov	r4, r0
    if(!obj->hidden) lv_obj_invalidate(obj);    /*Invalidate when not hidden (hidden objects are ignored) */
 800baca:	d552      	bpl.n	800bb72 <lv_obj_set_hidden+0xb6>
    obj->hidden = en == false ? 0 : 1;
 800bacc:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800bad0:	f365 1304 	bfi	r3, r5, #4, #1
    if(!obj->hidden) lv_obj_invalidate(obj);    /*Invalidate when not hidden (hidden objects are ignored) */
 800bad4:	06da      	lsls	r2, r3, #27
    obj->hidden = en == false ? 0 : 1;
 800bad6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    if(!obj->hidden) lv_obj_invalidate(obj);    /*Invalidate when not hidden (hidden objects are ignored) */
 800bada:	d506      	bpl.n	800baea <lv_obj_set_hidden+0x2e>
    return obj->par;
 800badc:	6820      	ldr	r0, [r4, #0]
    par->signal_func(par, LV_SIGNAL_CHILD_CHG, obj);
 800bade:	4622      	mov	r2, r4
 800bae0:	2101      	movs	r1, #1
 800bae2:	6983      	ldr	r3, [r0, #24]
 800bae4:	4798      	blx	r3
}
 800bae6:	b002      	add	sp, #8
 800bae8:	bd70      	pop	{r4, r5, r6, pc}
 800baea:	4622      	mov	r2, r4
 800baec:	e000      	b.n	800baf0 <lv_obj_set_hidden+0x34>
    } while(par != NULL);
 800baee:	461a      	mov	r2, r3
    return obj->par;
 800baf0:	6813      	ldr	r3, [r2, #0]
    } while(par != NULL);
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d1fb      	bne.n	800baee <lv_obj_set_hidden+0x32>
    return LV_GC_ROOT(_lv_act_scr);
 800baf6:	4b20      	ldr	r3, [pc, #128]	; (800bb78 <lv_obj_set_hidden+0xbc>)
    if(obj_scr == lv_scr_act() ||
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	429a      	cmp	r2, r3
 800bafc:	d007      	beq.n	800bb0e <lv_obj_set_hidden+0x52>
    return LV_GC_ROOT(_lv_top_layer);
 800bafe:	4b1f      	ldr	r3, [pc, #124]	; (800bb7c <lv_obj_set_hidden+0xc0>)
    if(obj_scr == lv_scr_act() ||
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d003      	beq.n	800bb0e <lv_obj_set_hidden+0x52>
    return LV_GC_ROOT(_lv_sys_layer);
 800bb06:	4b1e      	ldr	r3, [pc, #120]	; (800bb80 <lv_obj_set_hidden+0xc4>)
            obj_scr == lv_layer_top() ||
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	429a      	cmp	r2, r3
 800bb0c:	d1e6      	bne.n	800badc <lv_obj_set_hidden+0x20>
 800bb0e:	4621      	mov	r1, r4
        lv_coord_t ext_size = obj->ext_size;
 800bb10:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
 800bb14:	466a      	mov	r2, sp
    return obj->par;
 800bb16:	6825      	ldr	r5, [r4, #0]
 800bb18:	f851 0f10 	ldr.w	r0, [r1, #16]!
        area_trunc.x1 -= ext_size;
 800bb1c:	b29b      	uxth	r3, r3
 800bb1e:	6849      	ldr	r1, [r1, #4]
 800bb20:	c203      	stmia	r2!, {r0, r1}
 800bb22:	f8bd 0000 	ldrh.w	r0, [sp]
        area_trunc.y1 -= ext_size;
 800bb26:	f8bd 1002 	ldrh.w	r1, [sp, #2]
        area_trunc.x2 += ext_size;
 800bb2a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
        area_trunc.x1 -= ext_size;
 800bb2e:	1ac0      	subs	r0, r0, r3
        area_trunc.y2 += ext_size;
 800bb30:	f8bd 6006 	ldrh.w	r6, [sp, #6]
        area_trunc.y1 -= ext_size;
 800bb34:	1ac9      	subs	r1, r1, r3
        area_trunc.x2 += ext_size;
 800bb36:	441a      	add	r2, r3
        area_trunc.x1 -= ext_size;
 800bb38:	f8ad 0000 	strh.w	r0, [sp]
        area_trunc.y2 += ext_size;
 800bb3c:	4433      	add	r3, r6
        area_trunc.y1 -= ext_size;
 800bb3e:	f8ad 1002 	strh.w	r1, [sp, #2]
        area_trunc.x2 += ext_size;
 800bb42:	f8ad 2004 	strh.w	r2, [sp, #4]
        area_trunc.y2 += ext_size;
 800bb46:	f8ad 3006 	strh.w	r3, [sp, #6]
        while(par != NULL) {
 800bb4a:	b175      	cbz	r5, 800bb6a <lv_obj_set_hidden+0xae>
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 800bb4c:	f105 0210 	add.w	r2, r5, #16
 800bb50:	4669      	mov	r1, sp
 800bb52:	4668      	mov	r0, sp
 800bb54:	f006 ffb8 	bl	8012ac8 <lv_area_intersect>
            if(union_ok == false) break;        /*If no common parts with parent break;*/
 800bb58:	2800      	cmp	r0, #0
 800bb5a:	d0bf      	beq.n	800badc <lv_obj_set_hidden+0x20>
    return obj->hidden == 0 ? false : true;
 800bb5c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
            if(lv_obj_get_hidden(par)) return;  /*If the parent is hidden then the child is hidden and won't be drawn*/
 800bb60:	06db      	lsls	r3, r3, #27
 800bb62:	d4bb      	bmi.n	800badc <lv_obj_set_hidden+0x20>
    return obj->par;
 800bb64:	682d      	ldr	r5, [r5, #0]
        while(par != NULL) {
 800bb66:	2d00      	cmp	r5, #0
 800bb68:	d1f0      	bne.n	800bb4c <lv_obj_set_hidden+0x90>
        if(union_ok != false) lv_inv_area(&area_trunc);
 800bb6a:	4668      	mov	r0, sp
 800bb6c:	f000 fc54 	bl	800c418 <lv_inv_area>
 800bb70:	e7b4      	b.n	800badc <lv_obj_set_hidden+0x20>
    if(!obj->hidden) lv_obj_invalidate(obj);    /*Invalidate when not hidden (hidden objects are ignored) */
 800bb72:	f7fe f8b5 	bl	8009ce0 <lv_obj_invalidate>
 800bb76:	e7a9      	b.n	800bacc <lv_obj_set_hidden+0x10>
 800bb78:	200194b4 	.word	0x200194b4
 800bb7c:	200194b0 	.word	0x200194b0
 800bb80:	200194d8 	.word	0x200194d8

0800bb84 <lv_obj_set_click>:
    obj->click = (en == true ? 1 : 0);
 800bb84:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800bb88:	f361 0300 	bfi	r3, r1, #0, #1
 800bb8c:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 800bb90:	4770      	bx	lr
 800bb92:	bf00      	nop

0800bb94 <lv_obj_set_drag>:
    if(en == true) lv_obj_set_click(obj, true);     /*Drag is useless without enabled clicking*/
 800bb94:	b129      	cbz	r1, 800bba2 <lv_obj_set_drag+0xe>
    obj->click = (en == true ? 1 : 0);
 800bb96:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800bb9a:	f043 0301 	orr.w	r3, r3, #1
 800bb9e:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    obj->drag = (en == true ? 1 : 0);
 800bba2:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800bba6:	f361 0341 	bfi	r3, r1, #1, #1
 800bbaa:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 800bbae:	4770      	bx	lr

0800bbb0 <lv_obj_set_drag_throw>:
    obj->drag_throw = (en == true ? 1 : 0);
 800bbb0:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800bbb4:	f361 0382 	bfi	r3, r1, #2, #1
 800bbb8:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 800bbbc:	4770      	bx	lr
 800bbbe:	bf00      	nop

0800bbc0 <lv_obj_set_drag_parent>:
    obj->drag_parent = (en == true ? 1 : 0);
 800bbc0:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800bbc4:	f361 03c3 	bfi	r3, r1, #3, #1
 800bbc8:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 800bbcc:	4770      	bx	lr
 800bbce:	bf00      	nop

0800bbd0 <lv_obj_set_protect>:
    obj->protect |= prot;
 800bbd0:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800bbd4:	4319      	orrs	r1, r3
 800bbd6:	f880 1031 	strb.w	r1, [r0, #49]	; 0x31
 800bbda:	4770      	bx	lr

0800bbdc <lv_obj_clear_protect>:
    obj->protect &= prot;
 800bbdc:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800bbe0:	ea23 0101 	bic.w	r1, r3, r1
 800bbe4:	f880 1031 	strb.w	r1, [r0, #49]	; 0x31
 800bbe8:	4770      	bx	lr
 800bbea:	bf00      	nop

0800bbec <lv_obj_set_signal_func>:
    obj->signal_func = fp;
 800bbec:	6181      	str	r1, [r0, #24]
 800bbee:	4770      	bx	lr

0800bbf0 <lv_obj_set_design_func>:
    obj->design_func = fp;
 800bbf0:	61c1      	str	r1, [r0, #28]
 800bbf2:	4770      	bx	lr

0800bbf4 <lv_obj_allocate_ext_attr>:
{
 800bbf4:	b510      	push	{r4, lr}
 800bbf6:	4604      	mov	r4, r0
    obj->ext_attr = lv_mem_realloc(obj->ext_attr, ext_size);
 800bbf8:	6a00      	ldr	r0, [r0, #32]
 800bbfa:	f007 fb91 	bl	8013320 <lv_mem_realloc>
 800bbfe:	6220      	str	r0, [r4, #32]
}
 800bc00:	bd10      	pop	{r4, pc}
 800bc02:	bf00      	nop

0800bc04 <lv_obj_refresh_ext_size>:
    obj->ext_size = 0;
 800bc04:	2200      	movs	r2, #0
    obj->signal_func(obj, LV_SIGNAL_REFR_EXT_SIZE, NULL);
 800bc06:	6983      	ldr	r3, [r0, #24]
 800bc08:	2104      	movs	r1, #4
{
 800bc0a:	b530      	push	{r4, r5, lr}
 800bc0c:	4604      	mov	r4, r0
    obj->ext_size = 0;
 800bc0e:	8682      	strh	r2, [r0, #52]	; 0x34
{
 800bc10:	b083      	sub	sp, #12
    obj->signal_func(obj, LV_SIGNAL_REFR_EXT_SIZE, NULL);
 800bc12:	4798      	blx	r3
    return obj->hidden == 0 ? false : true;
 800bc14:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    if(lv_obj_get_hidden(obj)) return;
 800bc18:	06da      	lsls	r2, r3, #27
 800bc1a:	d411      	bmi.n	800bc40 <lv_obj_refresh_ext_size+0x3c>
 800bc1c:	4622      	mov	r2, r4
 800bc1e:	e000      	b.n	800bc22 <lv_obj_refresh_ext_size+0x1e>
    } while(par != NULL);
 800bc20:	461a      	mov	r2, r3
    return obj->par;
 800bc22:	6813      	ldr	r3, [r2, #0]
    } while(par != NULL);
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d1fb      	bne.n	800bc20 <lv_obj_refresh_ext_size+0x1c>
    return LV_GC_ROOT(_lv_act_scr);
 800bc28:	4b20      	ldr	r3, [pc, #128]	; (800bcac <lv_obj_refresh_ext_size+0xa8>)
    if(obj_scr == lv_scr_act() ||
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	d009      	beq.n	800bc44 <lv_obj_refresh_ext_size+0x40>
    return LV_GC_ROOT(_lv_top_layer);
 800bc30:	4b1f      	ldr	r3, [pc, #124]	; (800bcb0 <lv_obj_refresh_ext_size+0xac>)
    if(obj_scr == lv_scr_act() ||
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d005      	beq.n	800bc44 <lv_obj_refresh_ext_size+0x40>
    return LV_GC_ROOT(_lv_sys_layer);
 800bc38:	4b1e      	ldr	r3, [pc, #120]	; (800bcb4 <lv_obj_refresh_ext_size+0xb0>)
            obj_scr == lv_layer_top() ||
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d001      	beq.n	800bc44 <lv_obj_refresh_ext_size+0x40>
}
 800bc40:	b003      	add	sp, #12
 800bc42:	bd30      	pop	{r4, r5, pc}
 800bc44:	4621      	mov	r1, r4
        lv_coord_t ext_size = obj->ext_size;
 800bc46:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
 800bc4a:	466a      	mov	r2, sp
    return obj->par;
 800bc4c:	6824      	ldr	r4, [r4, #0]
 800bc4e:	f851 0f10 	ldr.w	r0, [r1, #16]!
        area_trunc.x1 -= ext_size;
 800bc52:	b29b      	uxth	r3, r3
 800bc54:	6849      	ldr	r1, [r1, #4]
 800bc56:	c203      	stmia	r2!, {r0, r1}
 800bc58:	f8bd 0000 	ldrh.w	r0, [sp]
        area_trunc.y1 -= ext_size;
 800bc5c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
        area_trunc.x2 += ext_size;
 800bc60:	f8bd 2004 	ldrh.w	r2, [sp, #4]
        area_trunc.x1 -= ext_size;
 800bc64:	1ac0      	subs	r0, r0, r3
        area_trunc.y2 += ext_size;
 800bc66:	f8bd 5006 	ldrh.w	r5, [sp, #6]
        area_trunc.y1 -= ext_size;
 800bc6a:	1ac9      	subs	r1, r1, r3
        area_trunc.x2 += ext_size;
 800bc6c:	441a      	add	r2, r3
        area_trunc.x1 -= ext_size;
 800bc6e:	f8ad 0000 	strh.w	r0, [sp]
        area_trunc.y2 += ext_size;
 800bc72:	442b      	add	r3, r5
        area_trunc.y1 -= ext_size;
 800bc74:	f8ad 1002 	strh.w	r1, [sp, #2]
        area_trunc.x2 += ext_size;
 800bc78:	f8ad 2004 	strh.w	r2, [sp, #4]
        area_trunc.y2 += ext_size;
 800bc7c:	f8ad 3006 	strh.w	r3, [sp, #6]
        while(par != NULL) {
 800bc80:	b934      	cbnz	r4, 800bc90 <lv_obj_refresh_ext_size+0x8c>
 800bc82:	e00e      	b.n	800bca2 <lv_obj_refresh_ext_size+0x9e>
    return obj->hidden == 0 ? false : true;
 800bc84:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
            if(lv_obj_get_hidden(par)) return;  /*If the parent is hidden then the child is hidden and won't be drawn*/
 800bc88:	06db      	lsls	r3, r3, #27
 800bc8a:	d4d9      	bmi.n	800bc40 <lv_obj_refresh_ext_size+0x3c>
    return obj->par;
 800bc8c:	6824      	ldr	r4, [r4, #0]
        while(par != NULL) {
 800bc8e:	b144      	cbz	r4, 800bca2 <lv_obj_refresh_ext_size+0x9e>
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 800bc90:	f104 0210 	add.w	r2, r4, #16
 800bc94:	4669      	mov	r1, sp
 800bc96:	4668      	mov	r0, sp
 800bc98:	f006 ff16 	bl	8012ac8 <lv_area_intersect>
            if(union_ok == false) break;        /*If no common parts with parent break;*/
 800bc9c:	2800      	cmp	r0, #0
 800bc9e:	d1f1      	bne.n	800bc84 <lv_obj_refresh_ext_size+0x80>
 800bca0:	e7ce      	b.n	800bc40 <lv_obj_refresh_ext_size+0x3c>
        if(union_ok != false) lv_inv_area(&area_trunc);
 800bca2:	4668      	mov	r0, sp
 800bca4:	f000 fbb8 	bl	800c418 <lv_inv_area>
 800bca8:	e7ca      	b.n	800bc40 <lv_obj_refresh_ext_size+0x3c>
 800bcaa:	bf00      	nop
 800bcac:	200194b4 	.word	0x200194b4
 800bcb0:	200194b0 	.word	0x200194b0
 800bcb4:	200194d8 	.word	0x200194d8

0800bcb8 <lv_obj_animate>:
{
 800bcb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcba:	b08b      	sub	sp, #44	; 0x2c
    a.playback_pause = 0;
 800bcbc:	2600      	movs	r6, #0
    a.act_time = (int32_t) - delay;
 800bcbe:	425b      	negs	r3, r3
    switch(type) {
 800bcc0:	f001 057f 	and.w	r5, r1, #127	; 0x7f
    a.playback = 0;
 800bcc4:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
    bool out = (type & LV_ANIM_DIR_MASK) == LV_ANIM_IN ? false : true;
 800bcc8:	b249      	sxtb	r1, r1
{
 800bcca:	9f10      	ldr	r7, [sp, #64]	; 0x40
    a.repeat = 0;
 800bccc:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
    a.act_time = (int32_t) - delay;
 800bcd0:	f8ad 301e 	strh.w	r3, [sp, #30]
    a.path = lv_anim_path_linear;
 800bcd4:	4b2d      	ldr	r3, [pc, #180]	; (800bd8c <lv_obj_animate+0xd4>)
    a.repeat = 0;
 800bcd6:	f366 0441 	bfi	r4, r6, #1, #1
    a.time = time;
 800bcda:	f8ad 201c 	strh.w	r2, [sp, #28]
    a.var = obj;
 800bcde:	9001      	str	r0, [sp, #4]
    a.repeat = 0;
 800bce0:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
    a.playback_pause = 0;
 800bce4:	9608      	str	r6, [sp, #32]
    return obj->par;
 800bce6:	6802      	ldr	r2, [r0, #0]
    a.end_cb = (void(*)(void *))cb;
 800bce8:	9703      	str	r7, [sp, #12]
    a.path = lv_anim_path_linear;
 800bcea:	9304      	str	r3, [sp, #16]
    switch(type) {
 800bcec:	2d06      	cmp	r5, #6
 800bcee:	d811      	bhi.n	800bd14 <lv_obj_animate+0x5c>
 800bcf0:	e8df f005 	tbb	[pc, r5]
 800bcf4:	04392b26 	.word	0x04392b26
 800bcf8:	453f      	.short	0x453f
 800bcfa:	1b          	.byte	0x1b
 800bcfb:	00          	.byte	0x00
    return area_p->y2 - area_p->y1 + 1;
 800bcfc:	8ad3      	ldrh	r3, [r2, #22]
    rel_y = obj->coords.y1 - parent->coords.y1;
 800bcfe:	8a40      	ldrh	r0, [r0, #18]
 800bd00:	3301      	adds	r3, #1
 800bd02:	8a52      	ldrh	r2, [r2, #18]
            a.fp = (void(*)(void *, int32_t))lv_obj_set_y;
 800bd04:	4c22      	ldr	r4, [pc, #136]	; (800bd90 <lv_obj_animate+0xd8>)
 800bd06:	1a9b      	subs	r3, r3, r2
    rel_y = obj->coords.y1 - parent->coords.y1;
 800bd08:	1a82      	subs	r2, r0, r2
            a.fp = (void(*)(void *, int32_t))lv_obj_set_y;
 800bd0a:	9402      	str	r4, [sp, #8]
            a.start = lv_obj_get_height(par);
 800bd0c:	b21b      	sxth	r3, r3
            a.end = lv_obj_get_y(obj);
 800bd0e:	b212      	sxth	r2, r2
            a.start = lv_obj_get_height(par);
 800bd10:	9305      	str	r3, [sp, #20]
            a.end = lv_obj_get_y(obj);
 800bd12:	9206      	str	r2, [sp, #24]
    if(out != false) {
 800bd14:	2900      	cmp	r1, #0
 800bd16:	da03      	bge.n	800bd20 <lv_obj_animate+0x68>
        int32_t tmp = a.start;
 800bd18:	9a05      	ldr	r2, [sp, #20]
        a.start = a.end;
 800bd1a:	9b06      	ldr	r3, [sp, #24]
        a.end = tmp;
 800bd1c:	9206      	str	r2, [sp, #24]
        a.start = a.end;
 800bd1e:	9305      	str	r3, [sp, #20]
    lv_anim_create(&a);
 800bd20:	a801      	add	r0, sp, #4
 800bd22:	f006 fdc1 	bl	80128a8 <lv_anim_create>
}
 800bd26:	b00b      	add	sp, #44	; 0x2c
 800bd28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd2a:	8ac3      	ldrh	r3, [r0, #22]
            a.start = 0;
 800bd2c:	2400      	movs	r4, #0
 800bd2e:	8a40      	ldrh	r0, [r0, #18]
 800bd30:	3301      	adds	r3, #1
            a.fp = (void(*)(void *, int32_t))lv_obj_set_height;
 800bd32:	4a18      	ldr	r2, [pc, #96]	; (800bd94 <lv_obj_animate+0xdc>)
 800bd34:	1a1b      	subs	r3, r3, r0
            a.start = 0;
 800bd36:	9405      	str	r4, [sp, #20]
            a.fp = (void(*)(void *, int32_t))lv_obj_set_height;
 800bd38:	9202      	str	r2, [sp, #8]
            a.end = lv_obj_get_height(obj);
 800bd3a:	b21b      	sxth	r3, r3
 800bd3c:	9306      	str	r3, [sp, #24]
            break;
 800bd3e:	e7e9      	b.n	800bd14 <lv_obj_animate+0x5c>
            a.fp = NULL;
 800bd40:	2300      	movs	r3, #0
 800bd42:	9302      	str	r3, [sp, #8]
            a.start = 0;
 800bd44:	9305      	str	r3, [sp, #20]
            a.end = 0;
 800bd46:	9306      	str	r3, [sp, #24]
            break;
 800bd48:	e7e4      	b.n	800bd14 <lv_obj_animate+0x5c>
 800bd4a:	8ac3      	ldrh	r3, [r0, #22]
    rel_y = obj->coords.y1 - parent->coords.y1;
 800bd4c:	8a54      	ldrh	r4, [r2, #18]
 800bd4e:	8a40      	ldrh	r0, [r0, #18]
 800bd50:	3301      	adds	r3, #1
            a.fp = (void(*)(void *, int32_t))lv_obj_set_y;
 800bd52:	4a0f      	ldr	r2, [pc, #60]	; (800bd90 <lv_obj_animate+0xd8>)
 800bd54:	1a1b      	subs	r3, r3, r0
    rel_y = obj->coords.y1 - parent->coords.y1;
 800bd56:	1b00      	subs	r0, r0, r4
            a.fp = (void(*)(void *, int32_t))lv_obj_set_y;
 800bd58:	9202      	str	r2, [sp, #8]
            a.start = -lv_obj_get_height(obj);
 800bd5a:	b21b      	sxth	r3, r3
            a.end = lv_obj_get_y(obj);
 800bd5c:	b200      	sxth	r0, r0
            a.start = -lv_obj_get_height(obj);
 800bd5e:	425b      	negs	r3, r3
            a.end = lv_obj_get_y(obj);
 800bd60:	9006      	str	r0, [sp, #24]
            a.start = -lv_obj_get_height(obj);
 800bd62:	9305      	str	r3, [sp, #20]
            break;
 800bd64:	e7d6      	b.n	800bd14 <lv_obj_animate+0x5c>
    return area_p->x2 - area_p->x1 + 1;
 800bd66:	8a83      	ldrh	r3, [r0, #20]
    rel_x = obj->coords.x1 - parent->coords.x1;
 800bd68:	8a14      	ldrh	r4, [r2, #16]
 800bd6a:	8a00      	ldrh	r0, [r0, #16]
 800bd6c:	3301      	adds	r3, #1
            a.fp = (void(*)(void *, int32_t))lv_obj_set_x;
 800bd6e:	4a0a      	ldr	r2, [pc, #40]	; (800bd98 <lv_obj_animate+0xe0>)
 800bd70:	e7f0      	b.n	800bd54 <lv_obj_animate+0x9c>
 800bd72:	8a93      	ldrh	r3, [r2, #20]
    rel_x = obj->coords.x1 - parent->coords.x1;
 800bd74:	8a00      	ldrh	r0, [r0, #16]
 800bd76:	3301      	adds	r3, #1
 800bd78:	8a12      	ldrh	r2, [r2, #16]
            a.fp = (void(*)(void *, int32_t))lv_obj_set_x;
 800bd7a:	4c07      	ldr	r4, [pc, #28]	; (800bd98 <lv_obj_animate+0xe0>)
 800bd7c:	e7c3      	b.n	800bd06 <lv_obj_animate+0x4e>
 800bd7e:	8a83      	ldrh	r3, [r0, #20]
            a.start = 0;
 800bd80:	2400      	movs	r4, #0
 800bd82:	8a00      	ldrh	r0, [r0, #16]
 800bd84:	3301      	adds	r3, #1
            a.fp = (void(*)(void *, int32_t))lv_obj_set_width;
 800bd86:	4a05      	ldr	r2, [pc, #20]	; (800bd9c <lv_obj_animate+0xe4>)
 800bd88:	e7d4      	b.n	800bd34 <lv_obj_animate+0x7c>
 800bd8a:	bf00      	nop
 800bd8c:	08012a0d 	.word	0x08012a0d
 800bd90:	080096d9 	.word	0x080096d9
 800bd94:	0800adb5 	.word	0x0800adb5
 800bd98:	08009869 	.word	0x08009869
 800bd9c:	0800af85 	.word	0x0800af85

0800bda0 <lv_scr_act>:
    return LV_GC_ROOT(_lv_act_scr);
 800bda0:	4b01      	ldr	r3, [pc, #4]	; (800bda8 <lv_scr_act+0x8>)
}
 800bda2:	6818      	ldr	r0, [r3, #0]
 800bda4:	4770      	bx	lr
 800bda6:	bf00      	nop
 800bda8:	200194b4 	.word	0x200194b4

0800bdac <lv_layer_top>:
    return LV_GC_ROOT(_lv_top_layer);
 800bdac:	4b01      	ldr	r3, [pc, #4]	; (800bdb4 <lv_layer_top+0x8>)
}
 800bdae:	6818      	ldr	r0, [r3, #0]
 800bdb0:	4770      	bx	lr
 800bdb2:	bf00      	nop
 800bdb4:	200194b0 	.word	0x200194b0

0800bdb8 <lv_layer_sys>:
    return LV_GC_ROOT(_lv_sys_layer);
 800bdb8:	4b01      	ldr	r3, [pc, #4]	; (800bdc0 <lv_layer_sys+0x8>)
}
 800bdba:	6818      	ldr	r0, [r3, #0]
 800bdbc:	4770      	bx	lr
 800bdbe:	bf00      	nop
 800bdc0:	200194d8 	.word	0x200194d8

0800bdc4 <lv_obj_get_parent>:
}
 800bdc4:	6800      	ldr	r0, [r0, #0]
 800bdc6:	4770      	bx	lr

0800bdc8 <lv_obj_get_child>:
        result = lv_ll_get_head(&obj->child_ll);
 800bdc8:	3004      	adds	r0, #4
    if(child == NULL) {
 800bdca:	b109      	cbz	r1, 800bdd0 <lv_obj_get_child+0x8>
        result = lv_ll_get_next(&obj->child_ll, child);
 800bdcc:	f007 b9e8 	b.w	80131a0 <lv_ll_get_next>
        result = lv_ll_get_head(&obj->child_ll);
 800bdd0:	f007 b9de 	b.w	8013190 <lv_ll_get_head>

0800bdd4 <lv_obj_get_child_back>:
        result = lv_ll_get_tail(&obj->child_ll);
 800bdd4:	3004      	adds	r0, #4
    if(child == NULL) {
 800bdd6:	b109      	cbz	r1, 800bddc <lv_obj_get_child_back+0x8>
        result = lv_ll_get_prev(&obj->child_ll, child);
 800bdd8:	f007 b9e8 	b.w	80131ac <lv_ll_get_prev>
        result = lv_ll_get_tail(&obj->child_ll);
 800bddc:	f007 b9dc 	b.w	8013198 <lv_ll_get_tail>

0800bde0 <lv_obj_get_coords>:
    memcpy(dest, src, sizeof(lv_area_t));
 800bde0:	f850 2f10 	ldr.w	r2, [r0, #16]!
 800bde4:	6843      	ldr	r3, [r0, #4]
 800bde6:	600a      	str	r2, [r1, #0]
 800bde8:	604b      	str	r3, [r1, #4]
 800bdea:	4770      	bx	lr

0800bdec <lv_obj_get_x>:
    rel_x = obj->coords.x1 - parent->coords.x1;
 800bdec:	6803      	ldr	r3, [r0, #0]
 800bdee:	8a00      	ldrh	r0, [r0, #16]
 800bdf0:	8a1b      	ldrh	r3, [r3, #16]
 800bdf2:	1ac0      	subs	r0, r0, r3
}
 800bdf4:	b200      	sxth	r0, r0
 800bdf6:	4770      	bx	lr

0800bdf8 <lv_obj_get_y>:
    rel_y = obj->coords.y1 - parent->coords.y1;
 800bdf8:	6803      	ldr	r3, [r0, #0]
 800bdfa:	8a40      	ldrh	r0, [r0, #18]
 800bdfc:	8a5b      	ldrh	r3, [r3, #18]
 800bdfe:	1ac0      	subs	r0, r0, r3
}
 800be00:	b200      	sxth	r0, r0
 800be02:	4770      	bx	lr

0800be04 <lv_obj_get_width>:
    return area_p->x2 - area_p->x1 + 1;
 800be04:	8a83      	ldrh	r3, [r0, #20]
 800be06:	8a02      	ldrh	r2, [r0, #16]
 800be08:	1c58      	adds	r0, r3, #1
 800be0a:	1a80      	subs	r0, r0, r2
}
 800be0c:	b200      	sxth	r0, r0
 800be0e:	4770      	bx	lr

0800be10 <lv_obj_get_height>:
    return area_p->y2 - area_p->y1 + 1;
 800be10:	8ac3      	ldrh	r3, [r0, #22]
 800be12:	8a42      	ldrh	r2, [r0, #18]
 800be14:	1c58      	adds	r0, r3, #1
 800be16:	1a80      	subs	r0, r0, r2
}
 800be18:	b200      	sxth	r0, r0
 800be1a:	4770      	bx	lr

0800be1c <lv_obj_get_style>:
{
 800be1c:	b570      	push	{r4, r5, r6, lr}
    lv_style_t * style_act = obj->style_p;
 800be1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
{
 800be20:	4605      	mov	r5, r0
    if(style_act == NULL) {
 800be22:	b13e      	cbz	r6, 800be34 <lv_obj_get_style+0x18>
    if(obj->group_p) {
 800be24:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800be26:	b118      	cbz	r0, 800be30 <lv_obj_get_style+0x14>
        if(lv_group_get_focused(obj->group_p) == obj) {
 800be28:	f7fc fb26 	bl	8008478 <lv_group_get_focused>
 800be2c:	4285      	cmp	r5, r0
 800be2e:	d024      	beq.n	800be7a <lv_obj_get_style+0x5e>
}
 800be30:	4630      	mov	r0, r6
 800be32:	bd70      	pop	{r4, r5, r6, pc}
        lv_obj_t * par = obj->par;
 800be34:	6804      	ldr	r4, [r0, #0]
        while(par) {
 800be36:	b13c      	cbz	r4, 800be48 <lv_obj_get_style+0x2c>
            if(par->style_p) {
 800be38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be3a:	b113      	cbz	r3, 800be42 <lv_obj_get_style+0x26>
                if(par->style_p->glass == 0) {
 800be3c:	781b      	ldrb	r3, [r3, #0]
 800be3e:	07db      	lsls	r3, r3, #31
 800be40:	d50b      	bpl.n	800be5a <lv_obj_get_style+0x3e>
            par = par->par;
 800be42:	6824      	ldr	r4, [r4, #0]
        while(par) {
 800be44:	2c00      	cmp	r4, #0
 800be46:	d1f7      	bne.n	800be38 <lv_obj_get_style+0x1c>
    if(obj->group_p) {
 800be48:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800be4a:	b118      	cbz	r0, 800be54 <lv_obj_get_style+0x38>
        if(lv_group_get_focused(obj->group_p) == obj) {
 800be4c:	f7fc fb14 	bl	8008478 <lv_group_get_focused>
 800be50:	4285      	cmp	r5, r0
 800be52:	d012      	beq.n	800be7a <lv_obj_get_style+0x5e>
    if(style_act == NULL) style_act = &lv_style_plain;
 800be54:	4e10      	ldr	r6, [pc, #64]	; (800be98 <lv_obj_get_style+0x7c>)
}
 800be56:	4630      	mov	r0, r6
 800be58:	bd70      	pop	{r4, r5, r6, pc}
    return obj->group_p;
 800be5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
                    if(lv_group_get_focused(g) == par) {
 800be5c:	4630      	mov	r0, r6
 800be5e:	f7fc fb0b 	bl	8008478 <lv_group_get_focused>
 800be62:	4284      	cmp	r4, r0
 800be64:	d011      	beq.n	800be8a <lv_obj_get_style+0x6e>
                        style_act = par->style_p;
 800be66:	6a66      	ldr	r6, [r4, #36]	; 0x24
    if(obj->group_p) {
 800be68:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800be6a:	b118      	cbz	r0, 800be74 <lv_obj_get_style+0x58>
        if(lv_group_get_focused(obj->group_p) == obj) {
 800be6c:	f7fc fb04 	bl	8008478 <lv_group_get_focused>
 800be70:	4285      	cmp	r5, r0
 800be72:	d002      	beq.n	800be7a <lv_obj_get_style+0x5e>
    if(style_act == NULL) style_act = &lv_style_plain;
 800be74:	2e00      	cmp	r6, #0
 800be76:	d0ed      	beq.n	800be54 <lv_obj_get_style+0x38>
 800be78:	e7da      	b.n	800be30 <lv_obj_get_style+0x14>
            style_act = lv_group_mod_style(obj->group_p, style_act);
 800be7a:	4631      	mov	r1, r6
 800be7c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800be7e:	f7fc fae5 	bl	800844c <lv_group_mod_style>
 800be82:	4606      	mov	r6, r0
    if(style_act == NULL) style_act = &lv_style_plain;
 800be84:	2e00      	cmp	r6, #0
 800be86:	d0e5      	beq.n	800be54 <lv_obj_get_style+0x38>
 800be88:	e7d2      	b.n	800be30 <lv_obj_get_style+0x14>
                        style_act = lv_group_mod_style(g, par->style_p);
 800be8a:	4630      	mov	r0, r6
 800be8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800be8e:	f7fc fadd 	bl	800844c <lv_group_mod_style>
 800be92:	4606      	mov	r6, r0
 800be94:	e7e8      	b.n	800be68 <lv_obj_get_style+0x4c>
 800be96:	bf00      	nop
 800be98:	2001933c 	.word	0x2001933c

0800be9c <lv_obj_get_hidden>:
    return obj->hidden == 0 ? false : true;
 800be9c:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
}
 800bea0:	f3c0 1000 	ubfx	r0, r0, #4, #1
 800bea4:	4770      	bx	lr
 800bea6:	bf00      	nop

0800bea8 <lv_obj_get_click>:
    return obj->click == 0 ? false : true;
 800bea8:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
}
 800beac:	f000 0001 	and.w	r0, r0, #1
 800beb0:	4770      	bx	lr
 800beb2:	bf00      	nop

0800beb4 <lv_obj_get_drag>:
    return obj->drag == 0 ? false : true;
 800beb4:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
}
 800beb8:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800bebc:	4770      	bx	lr
 800bebe:	bf00      	nop

0800bec0 <lv_obj_get_drag_throw>:
    return obj->drag_throw == 0 ? false : true;
 800bec0:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
}
 800bec4:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800bec8:	4770      	bx	lr
 800beca:	bf00      	nop

0800becc <lv_obj_get_drag_parent>:
    return obj->drag_parent == 0 ? false : true;
 800becc:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
}
 800bed0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 800bed4:	4770      	bx	lr
 800bed6:	bf00      	nop

0800bed8 <lv_obj_get_opa_scale>:
    while(parent) {
 800bed8:	b160      	cbz	r0, 800bef4 <lv_obj_get_opa_scale+0x1c>
        if(parent->opa_scale_en) return parent->opa_scale;
 800beda:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800bede:	065a      	lsls	r2, r3, #25
 800bee0:	d504      	bpl.n	800beec <lv_obj_get_opa_scale+0x14>
 800bee2:	e009      	b.n	800bef8 <lv_obj_get_opa_scale+0x20>
 800bee4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bee8:	065b      	lsls	r3, r3, #25
 800beea:	d405      	bmi.n	800bef8 <lv_obj_get_opa_scale+0x20>
    return obj->par;
 800beec:	6803      	ldr	r3, [r0, #0]
 800beee:	4618      	mov	r0, r3
    while(parent) {
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d1f7      	bne.n	800bee4 <lv_obj_get_opa_scale+0xc>
    return LV_OPA_COVER;
 800bef4:	20ff      	movs	r0, #255	; 0xff
}
 800bef6:	4770      	bx	lr
        if(parent->opa_scale_en) return parent->opa_scale;
 800bef8:	f890 0032 	ldrb.w	r0, [r0, #50]	; 0x32
 800befc:	4770      	bx	lr
 800befe:	bf00      	nop

0800bf00 <lv_obj_is_protected>:
    return (obj->protect & prot) == 0 ? false : true ;
 800bf00:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800bf04:	4219      	tst	r1, r3
}
 800bf06:	bf14      	ite	ne
 800bf08:	2001      	movne	r0, #1
 800bf0a:	2000      	moveq	r0, #0
 800bf0c:	4770      	bx	lr
 800bf0e:	bf00      	nop

0800bf10 <lv_obj_get_signal_func>:
}
 800bf10:	6980      	ldr	r0, [r0, #24]
 800bf12:	4770      	bx	lr

0800bf14 <lv_obj_get_design_func>:
}
 800bf14:	69c0      	ldr	r0, [r0, #28]
 800bf16:	4770      	bx	lr

0800bf18 <lv_obj_get_ext_attr>:
}
 800bf18:	6a00      	ldr	r0, [r0, #32]
 800bf1a:	4770      	bx	lr

0800bf1c <lv_obj_get_group>:
}
 800bf1c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800bf1e:	4770      	bx	lr

0800bf20 <lv_obj_is_focused>:
    if(obj->group_p) {
 800bf20:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800bf22:	b14b      	cbz	r3, 800bf38 <lv_obj_is_focused+0x18>
{
 800bf24:	b510      	push	{r4, lr}
 800bf26:	4604      	mov	r4, r0
        if(lv_group_get_focused(obj->group_p) == obj) return true;
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f7fc faa5 	bl	8008478 <lv_group_get_focused>
 800bf2e:	1a20      	subs	r0, r4, r0
 800bf30:	fab0 f080 	clz	r0, r0
 800bf34:	0940      	lsrs	r0, r0, #5
 800bf36:	bd10      	pop	{r4, pc}
    return false;
 800bf38:	4618      	mov	r0, r3
 800bf3a:	4770      	bx	lr

0800bf3c <lv_refr_get_top_obj>:
 * @param area_p pointer to an area
 * @param obj the first object to start the searching (typically a screen)
 * @return
 */
static lv_obj_t * lv_refr_get_top_obj(const lv_area_t * area_p, lv_obj_t * obj)
{
 800bf3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf3e:	460f      	mov	r7, r1
    lv_obj_t * i;
    lv_obj_t * found_p = NULL;

    /*If this object is fully cover the draw area check the children too */
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 800bf40:	3110      	adds	r1, #16
{
 800bf42:	4606      	mov	r6, r0
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 800bf44:	f006 fe48 	bl	8012bd8 <lv_area_is_in>
 800bf48:	b1e8      	cbz	r0, 800bf86 <lv_refr_get_top_obj+0x4a>
 800bf4a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800bf4e:	06db      	lsls	r3, r3, #27
 800bf50:	d419      	bmi.n	800bf86 <lv_refr_get_top_obj+0x4a>
        LL_READ(obj->child_ll, i)        {
 800bf52:	1d3d      	adds	r5, r7, #4
 800bf54:	4628      	mov	r0, r5
 800bf56:	f007 f91b 	bl	8013190 <lv_ll_get_head>
 800bf5a:	4604      	mov	r4, r0
 800bf5c:	b928      	cbnz	r0, 800bf6a <lv_refr_get_top_obj+0x2e>
 800bf5e:	e00c      	b.n	800bf7a <lv_refr_get_top_obj+0x3e>
 800bf60:	4628      	mov	r0, r5
 800bf62:	f007 f91d 	bl	80131a0 <lv_ll_get_next>
 800bf66:	4604      	mov	r4, r0
 800bf68:	b138      	cbz	r0, 800bf7a <lv_refr_get_top_obj+0x3e>
            found_p = lv_refr_get_top_obj(area_p, i);
 800bf6a:	4621      	mov	r1, r4
 800bf6c:	4630      	mov	r0, r6
 800bf6e:	f7ff ffe5 	bl	800bf3c <lv_refr_get_top_obj>
        LL_READ(obj->child_ll, i)        {
 800bf72:	4621      	mov	r1, r4

            /*If a children is ok then break*/
            if(found_p != NULL) {
 800bf74:	2800      	cmp	r0, #0
 800bf76:	d0f3      	beq.n	800bf60 <lv_refr_get_top_obj+0x24>
            }
        }
    }

    return found_p;
}
 800bf78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_style_t * style = lv_obj_get_style(obj);
 800bf7a:	4638      	mov	r0, r7
 800bf7c:	f7ff ff4e 	bl	800be1c <lv_obj_get_style>
            if(style->body.opa == LV_OPA_COVER &&
 800bf80:	7b83      	ldrb	r3, [r0, #14]
 800bf82:	2bff      	cmp	r3, #255	; 0xff
 800bf84:	d001      	beq.n	800bf8a <lv_refr_get_top_obj+0x4e>
    lv_obj_t * found_p = NULL;
 800bf86:	2000      	movs	r0, #0
 800bf88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    obj->design_func(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
 800bf8a:	4631      	mov	r1, r6
 800bf8c:	69fb      	ldr	r3, [r7, #28]
 800bf8e:	2202      	movs	r2, #2
 800bf90:	4638      	mov	r0, r7
 800bf92:	4798      	blx	r3
            if(style->body.opa == LV_OPA_COVER &&
 800bf94:	2800      	cmp	r0, #0
 800bf96:	d0f6      	beq.n	800bf86 <lv_refr_get_top_obj+0x4a>
                    lv_obj_get_opa_scale(obj) == LV_OPA_COVER) {
 800bf98:	4638      	mov	r0, r7
 800bf9a:	f7ff ff9d 	bl	800bed8 <lv_obj_get_opa_scale>
                    obj->design_func(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
 800bf9e:	28ff      	cmp	r0, #255	; 0xff
 800bfa0:	d1f1      	bne.n	800bf86 <lv_refr_get_top_obj+0x4a>
 800bfa2:	4638      	mov	r0, r7
    return found_p;
 800bfa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfa6:	bf00      	nop

0800bfa8 <lv_refr_obj.part.2>:
/**
 * Refresh an object an all of its children. (Called recursively)
 * @param obj pointer to an object to refresh
 * @param mask_ori_p pointer to an area, the objects will be drawn only here
 */
static void lv_refr_obj(lv_obj_t * obj, const lv_area_t * mask_ori_p)
 800bfa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfaa:	b08b      	sub	sp, #44	; 0x2c
    /* Truncate the original mask to the coordinates of the parent
     * because the parent and its children are visible only here */
    lv_area_t obj_mask;
    lv_area_t obj_ext_mask;
    lv_area_t obj_area;
    lv_coord_t ext_size = obj->ext_size;
 800bfac:	f9b0 4034 	ldrsh.w	r4, [r0, #52]	; 0x34
static void lv_refr_obj(lv_obj_t * obj, const lv_area_t * mask_ori_p)
 800bfb0:	460e      	mov	r6, r1
 800bfb2:	4605      	mov	r5, r0
    lv_obj_get_coords(obj, &obj_area);
 800bfb4:	a904      	add	r1, sp, #16
 800bfb6:	f7ff ff13 	bl	800bde0 <lv_obj_get_coords>
    obj_area.x1 -= ext_size;
 800bfba:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800bfbe:	b2a3      	uxth	r3, r4
    obj_area.y1 -= ext_size;
 800bfc0:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    obj_area.x2 += ext_size;
 800bfc4:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    obj_area.y2 += ext_size;
 800bfc8:	f8bd 4016 	ldrh.w	r4, [sp, #22]
    obj_area.x1 -= ext_size;
 800bfcc:	1ad2      	subs	r2, r2, r3
    obj_area.y1 -= ext_size;
 800bfce:	1ac9      	subs	r1, r1, r3
    obj_area.x2 += ext_size;
 800bfd0:	4418      	add	r0, r3
    obj_area.y2 += ext_size;
 800bfd2:	4423      	add	r3, r4
    obj_area.x1 -= ext_size;
 800bfd4:	f8ad 2010 	strh.w	r2, [sp, #16]
    obj_area.y1 -= ext_size;
 800bfd8:	f8ad 1012 	strh.w	r1, [sp, #18]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 800bfdc:	aa04      	add	r2, sp, #16
    obj_area.x2 += ext_size;
 800bfde:	f8ad 0014 	strh.w	r0, [sp, #20]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 800bfe2:	4631      	mov	r1, r6
 800bfe4:	a802      	add	r0, sp, #8
    obj_area.y2 += ext_size;
 800bfe6:	f8ad 3016 	strh.w	r3, [sp, #22]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 800bfea:	f006 fd6d 	bl	8012ac8 <lv_area_intersect>

    /*Draw the parent and its children only if they ore on 'mask_parent'*/
    if(union_ok != false) {
 800bfee:	b908      	cbnz	r0, 800bff4 <lv_refr_obj.part.2+0x4c>

        /* If all the children are redrawn make 'post draw' design */
        obj->design_func(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);

    }
}
 800bff0:	b00b      	add	sp, #44	; 0x2c
 800bff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        obj->design_func(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
 800bff4:	2200      	movs	r2, #0
 800bff6:	69eb      	ldr	r3, [r5, #28]
 800bff8:	a902      	add	r1, sp, #8
 800bffa:	4628      	mov	r0, r5
 800bffc:	4798      	blx	r3
        lv_obj_get_coords(obj, &obj_area);
 800bffe:	a904      	add	r1, sp, #16
 800c000:	4628      	mov	r0, r5
 800c002:	f7ff feed 	bl	800bde0 <lv_obj_get_coords>
        union_ok = lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
 800c006:	aa04      	add	r2, sp, #16
 800c008:	4631      	mov	r1, r6
 800c00a:	4668      	mov	r0, sp
 800c00c:	f006 fd5c 	bl	8012ac8 <lv_area_intersect>
        if(union_ok != false) {
 800c010:	b930      	cbnz	r0, 800c020 <lv_refr_obj.part.2+0x78>
        obj->design_func(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
 800c012:	a902      	add	r1, sp, #8
 800c014:	69eb      	ldr	r3, [r5, #28]
 800c016:	2201      	movs	r2, #1
 800c018:	4628      	mov	r0, r5
 800c01a:	4798      	blx	r3
}
 800c01c:	b00b      	add	sp, #44	; 0x2c
 800c01e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            LL_READ_BACK(obj->child_ll, child_p) {
 800c020:	1d2e      	adds	r6, r5, #4
 800c022:	4630      	mov	r0, r6
 800c024:	f007 f8b8 	bl	8013198 <lv_ll_get_tail>
 800c028:	4604      	mov	r4, r0
 800c02a:	b938      	cbnz	r0, 800c03c <lv_refr_obj.part.2+0x94>
 800c02c:	e7f1      	b.n	800c012 <lv_refr_obj.part.2+0x6a>
 800c02e:	4621      	mov	r1, r4
 800c030:	4630      	mov	r0, r6
 800c032:	f007 f8bb 	bl	80131ac <lv_ll_get_prev>
 800c036:	4604      	mov	r4, r0
 800c038:	2800      	cmp	r0, #0
 800c03a:	d0ea      	beq.n	800c012 <lv_refr_obj.part.2+0x6a>
                lv_obj_get_coords(child_p, &child_area);
 800c03c:	a908      	add	r1, sp, #32
 800c03e:	4620      	mov	r0, r4
 800c040:	f7ff fece 	bl	800bde0 <lv_obj_get_coords>
                child_area.x1 -= ext_size;
 800c044:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
                child_area.y1 -= ext_size;
 800c046:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 800c04a:	aa08      	add	r2, sp, #32
                child_area.x2 += ext_size;
 800c04c:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
                child_area.x1 -= ext_size;
 800c050:	f8bd 7020 	ldrh.w	r7, [sp, #32]
                child_area.y1 -= ext_size;
 800c054:	1ac9      	subs	r1, r1, r3
                child_area.y2 += ext_size;
 800c056:	f8bd e026 	ldrh.w	lr, [sp, #38]	; 0x26
                child_area.x2 += ext_size;
 800c05a:	4418      	add	r0, r3
                child_area.x1 -= ext_size;
 800c05c:	1aff      	subs	r7, r7, r3
                child_area.y1 -= ext_size;
 800c05e:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
                child_area.y2 += ext_size;
 800c062:	4473      	add	r3, lr
                child_area.x2 += ext_size;
 800c064:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 800c068:	4669      	mov	r1, sp
 800c06a:	a806      	add	r0, sp, #24
                child_area.x1 -= ext_size;
 800c06c:	f8ad 7020 	strh.w	r7, [sp, #32]
                child_area.y2 += ext_size;
 800c070:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 800c074:	f006 fd28 	bl	8012ac8 <lv_area_intersect>
                if(union_ok) {
 800c078:	2800      	cmp	r0, #0
 800c07a:	d0d8      	beq.n	800c02e <lv_refr_obj.part.2+0x86>
    if(obj->hidden != 0) return;
 800c07c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800c080:	06db      	lsls	r3, r3, #27
 800c082:	d4d4      	bmi.n	800c02e <lv_refr_obj.part.2+0x86>
 800c084:	a906      	add	r1, sp, #24
 800c086:	4620      	mov	r0, r4
 800c088:	f7ff ff8e 	bl	800bfa8 <lv_refr_obj.part.2>
 800c08c:	e7cf      	b.n	800c02e <lv_refr_obj.part.2+0x86>
 800c08e:	bf00      	nop

0800c090 <lv_refr_obj_and_children>:
{
 800c090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c094:	460f      	mov	r7, r1
    if(top_p == NULL) top_p = lv_scr_act();
 800c096:	2800      	cmp	r0, #0
 800c098:	d046      	beq.n	800c128 <lv_refr_obj_and_children+0x98>
 800c09a:	4680      	mov	r8, r0
    if(obj->hidden != 0) return;
 800c09c:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
 800c0a0:	06da      	lsls	r2, r3, #27
 800c0a2:	d53a      	bpl.n	800c11a <lv_refr_obj_and_children+0x8a>
    par = lv_obj_get_parent(top_p);
 800c0a4:	4640      	mov	r0, r8
 800c0a6:	f7ff fe8d 	bl	800bdc4 <lv_obj_get_parent>
    while(par != NULL) {
 800c0aa:	4606      	mov	r6, r0
 800c0ac:	b318      	cbz	r0, 800c0f6 <lv_refr_obj_and_children+0x66>
 800c0ae:	4641      	mov	r1, r8
        i = lv_ll_get_prev(&(par->child_ll), border_p);
 800c0b0:	1d35      	adds	r5, r6, #4
 800c0b2:	4628      	mov	r0, r5
 800c0b4:	f007 f87a 	bl	80131ac <lv_ll_get_prev>
        while(i != NULL) {
 800c0b8:	4604      	mov	r4, r0
 800c0ba:	b930      	cbnz	r0, 800c0ca <lv_refr_obj_and_children+0x3a>
 800c0bc:	e014      	b.n	800c0e8 <lv_refr_obj_and_children+0x58>
            i = lv_ll_get_prev(&(par->child_ll), i);
 800c0be:	4621      	mov	r1, r4
 800c0c0:	4628      	mov	r0, r5
 800c0c2:	f007 f873 	bl	80131ac <lv_ll_get_prev>
        while(i != NULL) {
 800c0c6:	4604      	mov	r4, r0
 800c0c8:	b170      	cbz	r0, 800c0e8 <lv_refr_obj_and_children+0x58>
    if(obj->hidden != 0) return;
 800c0ca:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800c0ce:	06db      	lsls	r3, r3, #27
 800c0d0:	d4f5      	bmi.n	800c0be <lv_refr_obj_and_children+0x2e>
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	4639      	mov	r1, r7
 800c0d6:	f7ff ff67 	bl	800bfa8 <lv_refr_obj.part.2>
            i = lv_ll_get_prev(&(par->child_ll), i);
 800c0da:	4621      	mov	r1, r4
 800c0dc:	4628      	mov	r0, r5
 800c0de:	f007 f865 	bl	80131ac <lv_ll_get_prev>
        while(i != NULL) {
 800c0e2:	4604      	mov	r4, r0
 800c0e4:	2800      	cmp	r0, #0
 800c0e6:	d1f0      	bne.n	800c0ca <lv_refr_obj_and_children+0x3a>
        par = lv_obj_get_parent(par);
 800c0e8:	4630      	mov	r0, r6
 800c0ea:	f7ff fe6b 	bl	800bdc4 <lv_obj_get_parent>
 800c0ee:	4631      	mov	r1, r6
    while(par != NULL) {
 800c0f0:	b108      	cbz	r0, 800c0f6 <lv_refr_obj_and_children+0x66>
 800c0f2:	4606      	mov	r6, r0
 800c0f4:	e7dc      	b.n	800c0b0 <lv_refr_obj_and_children+0x20>
    par = lv_obj_get_parent(top_p);
 800c0f6:	4640      	mov	r0, r8
 800c0f8:	f7ff fe64 	bl	800bdc4 <lv_obj_get_parent>
    while(par != NULL) {
 800c0fc:	4604      	mov	r4, r0
 800c0fe:	b188      	cbz	r0, 800c124 <lv_refr_obj_and_children+0x94>
        par->design_func(par, mask_p, LV_DESIGN_DRAW_POST);
 800c100:	69e3      	ldr	r3, [r4, #28]
 800c102:	2201      	movs	r2, #1
 800c104:	4639      	mov	r1, r7
 800c106:	4620      	mov	r0, r4
 800c108:	4798      	blx	r3
        par = lv_obj_get_parent(par);
 800c10a:	4620      	mov	r0, r4
 800c10c:	f7ff fe5a 	bl	800bdc4 <lv_obj_get_parent>
    while(par != NULL) {
 800c110:	4604      	mov	r4, r0
 800c112:	2800      	cmp	r0, #0
 800c114:	d1f4      	bne.n	800c100 <lv_refr_obj_and_children+0x70>
 800c116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c11a:	4639      	mov	r1, r7
 800c11c:	4640      	mov	r0, r8
 800c11e:	f7ff ff43 	bl	800bfa8 <lv_refr_obj.part.2>
 800c122:	e7bf      	b.n	800c0a4 <lv_refr_obj_and_children+0x14>
 800c124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(top_p == NULL) top_p = lv_scr_act();
 800c128:	f7ff fe3a 	bl	800bda0 <lv_scr_act>
 800c12c:	4680      	mov	r8, r0
 800c12e:	e7b5      	b.n	800c09c <lv_refr_obj_and_children+0xc>

0800c130 <lv_refr_task>:
{
 800c130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c134:	b087      	sub	sp, #28
    uint32_t start = lv_tick_get();
 800c136:	f006 faf7 	bl	8012728 <lv_tick_get>
 800c13a:	9003      	str	r0, [sp, #12]
    if(lv_disp_get_active() == NULL) {
 800c13c:	f006 fa62 	bl	8012604 <lv_disp_get_active>
 800c140:	2800      	cmp	r0, #0
 800c142:	f000 812a 	beq.w	800c39a <lv_refr_task+0x26a>
    for(join_in = 0; join_in < inv_buf_p; join_in++) {
 800c146:	f8df 829c 	ldr.w	r8, [pc, #668]	; 800c3e4 <lv_refr_task+0x2b4>
 800c14a:	f8b8 2000 	ldrh.w	r2, [r8]
 800c14e:	2a00      	cmp	r2, #0
 800c150:	f000 813d 	beq.w	800c3ce <lv_refr_task+0x29e>
 800c154:	f04f 0a00 	mov.w	sl, #0
                inv_buf[join_from].joined = 1;
 800c158:	2701      	movs	r7, #1
    for(join_in = 0; join_in < inv_buf_p; join_in++) {
 800c15a:	f108 0604 	add.w	r6, r8, #4
        if(inv_buf[join_in].joined != 0) continue;
 800c15e:	7a35      	ldrb	r5, [r6, #8]
 800c160:	bba5      	cbnz	r5, 800c1cc <lv_refr_task+0x9c>
        for(join_from = 0; join_from < inv_buf_p; join_from++) {
 800c162:	2a00      	cmp	r2, #0
 800c164:	f000 8133 	beq.w	800c3ce <lv_refr_task+0x29e>
 800c168:	4c9d      	ldr	r4, [pc, #628]	; (800c3e0 <lv_refr_task+0x2b0>)
 800c16a:	e005      	b.n	800c178 <lv_refr_task+0x48>
 800c16c:	f8b8 2000 	ldrh.w	r2, [r8]
 800c170:	3501      	adds	r5, #1
 800c172:	340a      	adds	r4, #10
 800c174:	4295      	cmp	r5, r2
 800c176:	d229      	bcs.n	800c1cc <lv_refr_task+0x9c>
            if(inv_buf[join_from].joined != 0 || join_in == join_from) {
 800c178:	7a23      	ldrb	r3, [r4, #8]
            if(lv_area_is_on(&inv_buf[join_in].area,
 800c17a:	4621      	mov	r1, r4
 800c17c:	4630      	mov	r0, r6
            if(inv_buf[join_from].joined != 0 || join_in == join_from) {
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d1f6      	bne.n	800c170 <lv_refr_task+0x40>
 800c182:	4555      	cmp	r5, sl
 800c184:	d0f4      	beq.n	800c170 <lv_refr_task+0x40>
            if(lv_area_is_on(&inv_buf[join_in].area,
 800c186:	f006 fd09 	bl	8012b9c <lv_area_is_on>
 800c18a:	2800      	cmp	r0, #0
 800c18c:	d0ee      	beq.n	800c16c <lv_refr_task+0x3c>
            lv_area_join(&joined_area, &inv_buf[join_in].area,
 800c18e:	4622      	mov	r2, r4
 800c190:	4631      	mov	r1, r6
 800c192:	a804      	add	r0, sp, #16
 800c194:	f006 fcc4 	bl	8012b20 <lv_area_join>
            if(lv_area_get_size(&joined_area) <
 800c198:	a804      	add	r0, sp, #16
 800c19a:	f006 fc87 	bl	8012aac <lv_area_get_size>
 800c19e:	4683      	mov	fp, r0
                    (lv_area_get_size(&inv_buf[join_in].area) + lv_area_get_size(&inv_buf[join_from].area))) {
 800c1a0:	4630      	mov	r0, r6
 800c1a2:	f006 fc83 	bl	8012aac <lv_area_get_size>
 800c1a6:	4681      	mov	r9, r0
 800c1a8:	4620      	mov	r0, r4
 800c1aa:	f006 fc7f 	bl	8012aac <lv_area_get_size>
 800c1ae:	4448      	add	r0, r9
    memcpy(dest, src, sizeof(lv_area_t));
 800c1b0:	ab04      	add	r3, sp, #16
            if(lv_area_get_size(&joined_area) <
 800c1b2:	4583      	cmp	fp, r0
 800c1b4:	d2da      	bcs.n	800c16c <lv_refr_task+0x3c>
 800c1b6:	f8b8 2000 	ldrh.w	r2, [r8]
        for(join_from = 0; join_from < inv_buf_p; join_from++) {
 800c1ba:	3501      	adds	r5, #1
 800c1bc:	340a      	adds	r4, #10
 800c1be:	4295      	cmp	r5, r2
 800c1c0:	cb03      	ldmia	r3!, {r0, r1}
 800c1c2:	6030      	str	r0, [r6, #0]
 800c1c4:	6071      	str	r1, [r6, #4]
                inv_buf[join_from].joined = 1;
 800c1c6:	f804 7c02 	strb.w	r7, [r4, #-2]
        for(join_from = 0; join_from < inv_buf_p; join_from++) {
 800c1ca:	d3d5      	bcc.n	800c178 <lv_refr_task+0x48>
    for(join_in = 0; join_in < inv_buf_p; join_in++) {
 800c1cc:	f10a 0a01 	add.w	sl, sl, #1
 800c1d0:	360a      	adds	r6, #10
 800c1d2:	4592      	cmp	sl, r2
 800c1d4:	d3c3      	bcc.n	800c15e <lv_refr_task+0x2e>
    px_num = 0;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	f8c8 3144 	str.w	r3, [r8, #324]	; 0x144
    for(i = 0; i < inv_buf_p; i++) {
 800c1dc:	2a00      	cmp	r2, #0
 800c1de:	f000 80dc 	beq.w	800c39a <lv_refr_task+0x26a>
 800c1e2:	9302      	str	r3, [sp, #8]
 800c1e4:	4e7e      	ldr	r6, [pc, #504]	; (800c3e0 <lv_refr_task+0x2b0>)
 800c1e6:	e006      	b.n	800c1f6 <lv_refr_task+0xc6>
 800c1e8:	9b02      	ldr	r3, [sp, #8]
 800c1ea:	360a      	adds	r6, #10
 800c1ec:	3301      	adds	r3, #1
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	9302      	str	r3, [sp, #8]
 800c1f2:	f080 80bf 	bcs.w	800c374 <lv_refr_task+0x244>
        if(inv_buf[i].joined == 0) {
 800c1f6:	7a31      	ldrb	r1, [r6, #8]
 800c1f8:	2900      	cmp	r1, #0
 800c1fa:	d1f5      	bne.n	800c1e8 <lv_refr_task+0xb8>
    return area_p->x2 - area_p->x1 + 1;
 800c1fc:	88b2      	ldrh	r2, [r6, #4]
 800c1fe:	8833      	ldrh	r3, [r6, #0]
 800c200:	3201      	adds	r2, #1
 800c202:	f9b6 9006 	ldrsh.w	r9, [r6, #6]
    return area_p->y2 - area_p->y1 + 1;
 800c206:	8870      	ldrh	r0, [r6, #2]
    return area_p->x2 - area_p->x1 + 1;
 800c208:	1ad2      	subs	r2, r2, r3
    return area_p->y2 - area_p->y1 + 1;
 800c20a:	f109 0701 	add.w	r7, r9, #1
    if(round_cb) {
 800c20e:	f8d8 3148 	ldr.w	r3, [r8, #328]	; 0x148
 800c212:	1a3f      	subs	r7, r7, r0
    int32_t max_row = (uint32_t) LV_VDB_SIZE / w;
 800c214:	b212      	sxth	r2, r2
 800c216:	f44f 504c 	mov.w	r0, #13056	; 0x3300
    if(max_row > h) max_row = h;
 800c21a:	b23f      	sxth	r7, r7
    int32_t max_row = (uint32_t) LV_VDB_SIZE / w;
 800c21c:	fbb0 f2f2 	udiv	r2, r0, r2
 800c220:	4297      	cmp	r7, r2
 800c222:	bfa8      	it	ge
 800c224:	4617      	movge	r7, r2
    if(round_cb) {
 800c226:	b1f3      	cbz	r3, 800c266 <lv_refr_task+0x136>
        tmp.y2 = max_row;
 800c228:	b23c      	sxth	r4, r7
        tmp.x1 = 0;
 800c22a:	f8ad 1010 	strh.w	r1, [sp, #16]
        tmp.x2 = 0;
 800c22e:	f8ad 1014 	strh.w	r1, [sp, #20]
        tmp.y1 = 0;
 800c232:	f8ad 1012 	strh.w	r1, [sp, #18]
 800c236:	e004      	b.n	800c242 <lv_refr_task+0x112>
        } while(lv_area_get_height(&tmp) > max_row && y_tmp != 0);
 800c238:	2c00      	cmp	r4, #0
 800c23a:	f000 808d 	beq.w	800c358 <lv_refr_task+0x228>
 800c23e:	f8d8 3148 	ldr.w	r3, [r8, #328]	; 0x148
            tmp.y2 = y_tmp;
 800c242:	f8ad 4016 	strh.w	r4, [sp, #22]
            round_cb(&tmp);
 800c246:	a804      	add	r0, sp, #16
 800c248:	4798      	blx	r3
 800c24a:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 800c24e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800c252:	3c01      	subs	r4, #1
 800c254:	3201      	adds	r2, #1
 800c256:	b224      	sxth	r4, r4
 800c258:	1ad3      	subs	r3, r2, r3
        } while(lv_area_get_height(&tmp) > max_row && y_tmp != 0);
 800c25a:	b21b      	sxth	r3, r3
 800c25c:	42bb      	cmp	r3, r7
 800c25e:	dceb      	bgt.n	800c238 <lv_refr_task+0x108>
        if(y_tmp == 0) {
 800c260:	2c00      	cmp	r4, #0
 800c262:	d079      	beq.n	800c358 <lv_refr_task+0x228>
            max_row = tmp.y2 + 1;
 800c264:	4617      	mov	r7, r2
 800c266:	f240 130f 	movw	r3, #271	; 0x10f
    for(row = area_p->y1; row  + max_row - 1 <= y2; row += max_row)  {
 800c26a:	f9b6 b002 	ldrsh.w	fp, [r6, #2]
 800c26e:	4599      	cmp	r9, r3
 800c270:	eb0b 0207 	add.w	r2, fp, r7
 800c274:	bfa8      	it	ge
 800c276:	4699      	movge	r9, r3
 800c278:	3a01      	subs	r2, #1
 800c27a:	4591      	cmp	r9, r2
 800c27c:	f2c0 80ad 	blt.w	800c3da <lv_refr_task+0x2aa>
        vdb_p->area.y2 = row + max_row - 1;
 800c280:	fa1f fa87 	uxth.w	sl, r7
 800c284:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c288:	9301      	str	r3, [sp, #4]
 800c28a:	fa1f f48b 	uxth.w	r4, fp
        lv_vdb_t * vdb_p = lv_vdb_get();
 800c28e:	f000 fd4f 	bl	800cd30 <lv_vdb_get>
 800c292:	9b01      	ldr	r3, [sp, #4]
 800c294:	18e5      	adds	r5, r4, r3
        if(!vdb_p) {
 800c296:	2800      	cmp	r0, #0
 800c298:	d05e      	beq.n	800c358 <lv_refr_task+0x228>
        vdb_p->area.x1 = area_p->x1;
 800c29a:	f9b6 3000 	ldrsh.w	r3, [r6]
 800c29e:	b22d      	sxth	r5, r5
 800c2a0:	8003      	strh	r3, [r0, #0]
        if(vdb_p->area.y2 > y2) vdb_p->area.y2 = y2;
 800c2a2:	45a9      	cmp	r9, r5
        vdb_p->area.x2 = area_p->x2;
 800c2a4:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
        vdb_p->area.y1 = row;
 800c2a8:	f8a0 b002 	strh.w	fp, [r0, #2]
        vdb_p->area.x2 = area_p->x2;
 800c2ac:	8083      	strh	r3, [r0, #4]
        if(vdb_p->area.y2 > y2) vdb_p->area.y2 = y2;
 800c2ae:	db77      	blt.n	800c3a0 <lv_refr_task+0x270>
        vdb_p->area.y2 = row + max_row - 1;
 800c2b0:	80c5      	strh	r5, [r0, #6]
 800c2b2:	eb0a 0b04 	add.w	fp, sl, r4
    lv_vdb_t * vdb_p = lv_vdb_get();
 800c2b6:	f000 fd3b 	bl	800cd30 <lv_vdb_get>
    lv_area_intersect(&start_mask, area_p, &vdb_p->area);
 800c2ba:	4631      	mov	r1, r6
    if(!vdb_p) {
 800c2bc:	4602      	mov	r2, r0
 800c2be:	2800      	cmp	r0, #0
 800c2c0:	d079      	beq.n	800c3b6 <lv_refr_task+0x286>
    lv_area_intersect(&start_mask, area_p, &vdb_p->area);
 800c2c2:	a804      	add	r0, sp, #16
 800c2c4:	fa0f fb8b 	sxth.w	fp, fp
 800c2c8:	f006 fbfe 	bl	8012ac8 <lv_area_intersect>
    top_p = lv_refr_get_top_obj(&start_mask, lv_scr_act());
 800c2cc:	f7ff fd68 	bl	800bda0 <lv_scr_act>
 800c2d0:	4601      	mov	r1, r0
 800c2d2:	a804      	add	r0, sp, #16
 800c2d4:	f7ff fe32 	bl	800bf3c <lv_refr_get_top_obj>
    lv_refr_obj_and_children(top_p, &start_mask);
 800c2d8:	a904      	add	r1, sp, #16
 800c2da:	f7ff fed9 	bl	800c090 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_layer_top(), &start_mask);
 800c2de:	f7ff fd65 	bl	800bdac <lv_layer_top>
 800c2e2:	a904      	add	r1, sp, #16
 800c2e4:	f7ff fed4 	bl	800c090 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_layer_sys(), &start_mask);
 800c2e8:	f7ff fd66 	bl	800bdb8 <lv_layer_sys>
 800c2ec:	a904      	add	r1, sp, #16
 800c2ee:	f7ff fecf 	bl	800c090 <lv_refr_obj_and_children>
    lv_vdb_flush();
 800c2f2:	f000 fd27 	bl	800cd44 <lv_vdb_flush>
    for(row = area_p->y1; row  + max_row - 1 <= y2; row += max_row)  {
 800c2f6:	eb0b 0307 	add.w	r3, fp, r7
 800c2fa:	3b01      	subs	r3, #1
 800c2fc:	454b      	cmp	r3, r9
 800c2fe:	ddc4      	ble.n	800c28a <lv_refr_task+0x15a>
    if(y2 != row_last) {
 800c300:	45a9      	cmp	r9, r5
 800c302:	d029      	beq.n	800c358 <lv_refr_task+0x228>
        lv_vdb_t * vdb_p = lv_vdb_get();
 800c304:	f000 fd14 	bl	800cd30 <lv_vdb_get>
        if(!vdb_p) {
 800c308:	b330      	cbz	r0, 800c358 <lv_refr_task+0x228>
        vdb_p->area.x1 = area_p->x1;
 800c30a:	f9b6 2000 	ldrsh.w	r2, [r6]
 800c30e:	8002      	strh	r2, [r0, #0]
        vdb_p->area.x2 = area_p->x2;
 800c310:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
        vdb_p->area.y1 = row;
 800c314:	f8a0 b002 	strh.w	fp, [r0, #2]
        vdb_p->area.x2 = area_p->x2;
 800c318:	8082      	strh	r2, [r0, #4]
        vdb_p->area.y2 = y2;
 800c31a:	f8a0 9006 	strh.w	r9, [r0, #6]
    lv_vdb_t * vdb_p = lv_vdb_get();
 800c31e:	f000 fd07 	bl	800cd30 <lv_vdb_get>
    if(!vdb_p) {
 800c322:	b1c8      	cbz	r0, 800c358 <lv_refr_task+0x228>
    lv_area_intersect(&start_mask, area_p, &vdb_p->area);
 800c324:	4602      	mov	r2, r0
 800c326:	4631      	mov	r1, r6
 800c328:	a804      	add	r0, sp, #16
 800c32a:	f006 fbcd 	bl	8012ac8 <lv_area_intersect>
    top_p = lv_refr_get_top_obj(&start_mask, lv_scr_act());
 800c32e:	f7ff fd37 	bl	800bda0 <lv_scr_act>
 800c332:	4601      	mov	r1, r0
 800c334:	a804      	add	r0, sp, #16
 800c336:	f7ff fe01 	bl	800bf3c <lv_refr_get_top_obj>
    lv_refr_obj_and_children(top_p, &start_mask);
 800c33a:	a904      	add	r1, sp, #16
 800c33c:	f7ff fea8 	bl	800c090 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_layer_top(), &start_mask);
 800c340:	f7ff fd34 	bl	800bdac <lv_layer_top>
 800c344:	a904      	add	r1, sp, #16
 800c346:	f7ff fea3 	bl	800c090 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_layer_sys(), &start_mask);
 800c34a:	f7ff fd35 	bl	800bdb8 <lv_layer_sys>
 800c34e:	a904      	add	r1, sp, #16
 800c350:	f7ff fe9e 	bl	800c090 <lv_refr_obj_and_children>
    lv_vdb_flush();
 800c354:	f000 fcf6 	bl	800cd44 <lv_vdb_flush>
            if(monitor_cb != NULL) px_num += lv_area_get_size(&inv_buf[i].area);
 800c358:	f8d8 314c 	ldr.w	r3, [r8, #332]	; 0x14c
 800c35c:	b3a3      	cbz	r3, 800c3c8 <lv_refr_task+0x298>
 800c35e:	4630      	mov	r0, r6
 800c360:	f006 fba4 	bl	8012aac <lv_area_get_size>
 800c364:	f8d8 3144 	ldr.w	r3, [r8, #324]	; 0x144
 800c368:	f8b8 2000 	ldrh.w	r2, [r8]
 800c36c:	4403      	add	r3, r0
 800c36e:	f8c8 3144 	str.w	r3, [r8, #324]	; 0x144
 800c372:	e739      	b.n	800c1e8 <lv_refr_task+0xb8>
    if(inv_buf_p != 0) {
 800c374:	b18a      	cbz	r2, 800c39a <lv_refr_task+0x26a>
        memset(inv_buf, 0, sizeof(inv_buf));
 800c376:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800c37a:	2100      	movs	r1, #0
 800c37c:	4818      	ldr	r0, [pc, #96]	; (800c3e0 <lv_refr_task+0x2b0>)
 800c37e:	f011 fb38 	bl	801d9f2 <memset>
        inv_buf_p = 0;
 800c382:	2300      	movs	r3, #0
        if(monitor_cb != NULL) {
 800c384:	f8d8 414c 	ldr.w	r4, [r8, #332]	; 0x14c
        inv_buf_p = 0;
 800c388:	f8a8 3000 	strh.w	r3, [r8]
        if(monitor_cb != NULL) {
 800c38c:	b12c      	cbz	r4, 800c39a <lv_refr_task+0x26a>
            monitor_cb(lv_tick_elaps(start), px_num);
 800c38e:	9803      	ldr	r0, [sp, #12]
 800c390:	f006 f9d4 	bl	801273c <lv_tick_elaps>
 800c394:	f8d8 1144 	ldr.w	r1, [r8, #324]	; 0x144
 800c398:	47a0      	blx	r4
}
 800c39a:	b007      	add	sp, #28
 800c39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(vdb_p->area.y2 > y2) vdb_p->area.y2 = y2;
 800c3a0:	f8a0 9006 	strh.w	r9, [r0, #6]
 800c3a4:	464d      	mov	r5, r9
    lv_vdb_t * vdb_p = lv_vdb_get();
 800c3a6:	f000 fcc3 	bl	800cd30 <lv_vdb_get>
 800c3aa:	eb0a 0b04 	add.w	fp, sl, r4
    if(!vdb_p) {
 800c3ae:	4602      	mov	r2, r0
    lv_area_intersect(&start_mask, area_p, &vdb_p->area);
 800c3b0:	4631      	mov	r1, r6
    if(!vdb_p) {
 800c3b2:	2800      	cmp	r0, #0
 800c3b4:	d185      	bne.n	800c2c2 <lv_refr_task+0x192>
 800c3b6:	fa0f fb8b 	sxth.w	fp, fp
    for(row = area_p->y1; row  + max_row - 1 <= y2; row += max_row)  {
 800c3ba:	eb0b 0307 	add.w	r3, fp, r7
 800c3be:	3b01      	subs	r3, #1
 800c3c0:	4599      	cmp	r9, r3
 800c3c2:	f6bf af62 	bge.w	800c28a <lv_refr_task+0x15a>
 800c3c6:	e79b      	b.n	800c300 <lv_refr_task+0x1d0>
 800c3c8:	f8b8 2000 	ldrh.w	r2, [r8]
 800c3cc:	e70c      	b.n	800c1e8 <lv_refr_task+0xb8>
    px_num = 0;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	f8c8 3144 	str.w	r3, [r8, #324]	; 0x144
}
 800c3d4:	b007      	add	sp, #28
 800c3d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_coord_t row_last = 0;
 800c3da:	2500      	movs	r5, #0
 800c3dc:	e790      	b.n	800c300 <lv_refr_task+0x1d0>
 800c3de:	bf00      	nop
 800c3e0:	20000cb8 	.word	0x20000cb8
 800c3e4:	20000cb4 	.word	0x20000cb4

0800c3e8 <lv_refr_init>:
{
 800c3e8:	b510      	push	{r4, lr}
    inv_buf_p = 0;
 800c3ea:	4809      	ldr	r0, [pc, #36]	; (800c410 <lv_refr_init+0x28>)
 800c3ec:	2400      	movs	r4, #0
    memset(inv_buf, 0, sizeof(inv_buf));
 800c3ee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800c3f2:	4621      	mov	r1, r4
    inv_buf_p = 0;
 800c3f4:	f820 4b04 	strh.w	r4, [r0], #4
    memset(inv_buf, 0, sizeof(inv_buf));
 800c3f8:	f011 fafb 	bl	801d9f2 <memset>
    task = lv_task_create(lv_refr_task, LV_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 800c3fc:	4623      	mov	r3, r4
 800c3fe:	2203      	movs	r2, #3
 800c400:	211e      	movs	r1, #30
 800c402:	4804      	ldr	r0, [pc, #16]	; (800c414 <lv_refr_init+0x2c>)
 800c404:	f007 f98e 	bl	8013724 <lv_task_create>
}
 800c408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_task_ready(task);        /*Be sure the screen will be refreshed immediately on start up*/
 800c40c:	f007 b9ce 	b.w	80137ac <lv_task_ready>
 800c410:	20000cb4 	.word	0x20000cb4
 800c414:	0800c131 	.word	0x0800c131

0800c418 <lv_inv_area>:
    if(area_p == NULL) {
 800c418:	b338      	cbz	r0, 800c46a <lv_inv_area+0x52>
    scr_area.x1 = 0;
 800c41a:	4b20      	ldr	r3, [pc, #128]	; (800c49c <lv_inv_area+0x84>)
 800c41c:	4601      	mov	r1, r0
{
 800c41e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c420:	b085      	sub	sp, #20
    scr_area.x1 = 0;
 800c422:	2400      	movs	r4, #0
    suc = lv_area_intersect(&com_area, area_p, &scr_area);
 800c424:	466a      	mov	r2, sp
 800c426:	a802      	add	r0, sp, #8
 800c428:	466f      	mov	r7, sp
    scr_area.x1 = 0;
 800c42a:	9400      	str	r4, [sp, #0]
 800c42c:	9301      	str	r3, [sp, #4]
    suc = lv_area_intersect(&com_area, area_p, &scr_area);
 800c42e:	f006 fb4b 	bl	8012ac8 <lv_area_intersect>
    if(suc != false) {
 800c432:	b1c0      	cbz	r0, 800c466 <lv_inv_area+0x4e>
        if(round_cb) round_cb(&com_area);
 800c434:	4d1a      	ldr	r5, [pc, #104]	; (800c4a0 <lv_inv_area+0x88>)
 800c436:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800c43a:	b10b      	cbz	r3, 800c440 <lv_inv_area+0x28>
 800c43c:	a802      	add	r0, sp, #8
 800c43e:	4798      	blx	r3
        for(i = 0; i < inv_buf_p; i++) {
 800c440:	882b      	ldrh	r3, [r5, #0]
 800c442:	b1fb      	cbz	r3, 800c484 <lv_inv_area+0x6c>
 800c444:	2400      	movs	r4, #0
 800c446:	4e17      	ldr	r6, [pc, #92]	; (800c4a4 <lv_inv_area+0x8c>)
 800c448:	e003      	b.n	800c452 <lv_inv_area+0x3a>
 800c44a:	b2a4      	uxth	r4, r4
 800c44c:	882b      	ldrh	r3, [r5, #0]
 800c44e:	42a3      	cmp	r3, r4
 800c450:	d90e      	bls.n	800c470 <lv_inv_area+0x58>
            if(lv_area_is_in(&com_area, &inv_buf[i].area) != false) return;
 800c452:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 800c456:	a802      	add	r0, sp, #8
        for(i = 0; i < inv_buf_p; i++) {
 800c458:	3401      	adds	r4, #1
            if(lv_area_is_in(&com_area, &inv_buf[i].area) != false) return;
 800c45a:	eb06 0141 	add.w	r1, r6, r1, lsl #1
 800c45e:	f006 fbbb 	bl	8012bd8 <lv_area_is_in>
 800c462:	2800      	cmp	r0, #0
 800c464:	d0f1      	beq.n	800c44a <lv_inv_area+0x32>
}
 800c466:	b005      	add	sp, #20
 800c468:	bdf0      	pop	{r4, r5, r6, r7, pc}
        inv_buf_p = 0;
 800c46a:	4b0d      	ldr	r3, [pc, #52]	; (800c4a0 <lv_inv_area+0x88>)
 800c46c:	8018      	strh	r0, [r3, #0]
        return;
 800c46e:	4770      	bx	lr
        if(inv_buf_p < LV_INV_FIFO_SIZE) {
 800c470:	2b1f      	cmp	r3, #31
 800c472:	d907      	bls.n	800c484 <lv_inv_area+0x6c>
    memcpy(dest, src, sizeof(lv_area_t));
 800c474:	2301      	movs	r3, #1
 800c476:	e897 0003 	ldmia.w	r7, {r0, r1}
 800c47a:	e886 0003 	stmia.w	r6, {r0, r1}
        inv_buf_p ++;
 800c47e:	802b      	strh	r3, [r5, #0]
}
 800c480:	b005      	add	sp, #20
 800c482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c484:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 800c488:	aa02      	add	r2, sp, #8
 800c48a:	3301      	adds	r3, #1
 800c48c:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 800c490:	b29b      	uxth	r3, r3
 800c492:	ca03      	ldmia	r2!, {r0, r1}
 800c494:	6060      	str	r0, [r4, #4]
 800c496:	60a1      	str	r1, [r4, #8]
 800c498:	e7f1      	b.n	800c47e <lv_inv_area+0x66>
 800c49a:	bf00      	nop
 800c49c:	010f01df 	.word	0x010f01df
 800c4a0:	20000cb4 	.word	0x20000cb4
 800c4a4:	20000cb8 	.word	0x20000cb8

0800c4a8 <lv_refr_get_buf_size>:
    return inv_buf_p;
 800c4a8:	4b01      	ldr	r3, [pc, #4]	; (800c4b0 <lv_refr_get_buf_size+0x8>)
}
 800c4aa:	8818      	ldrh	r0, [r3, #0]
 800c4ac:	4770      	bx	lr
 800c4ae:	bf00      	nop
 800c4b0:	20000cb4 	.word	0x20000cb4

0800c4b4 <lv_refr_pop_from_buf>:
    if(inv_buf_p < num) inv_buf_p = 0;
 800c4b4:	4a05      	ldr	r2, [pc, #20]	; (800c4cc <lv_refr_pop_from_buf+0x18>)
 800c4b6:	8813      	ldrh	r3, [r2, #0]
 800c4b8:	4283      	cmp	r3, r0
 800c4ba:	d303      	bcc.n	800c4c4 <lv_refr_pop_from_buf+0x10>
    else inv_buf_p -= num;
 800c4bc:	1a1b      	subs	r3, r3, r0
 800c4be:	b29b      	uxth	r3, r3
 800c4c0:	8013      	strh	r3, [r2, #0]
 800c4c2:	4770      	bx	lr
    if(inv_buf_p < num) inv_buf_p = 0;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	8013      	strh	r3, [r2, #0]
 800c4c8:	4770      	bx	lr
 800c4ca:	bf00      	nop
 800c4cc:	20000cb4 	.word	0x20000cb4

0800c4d0 <lv_style_init>:

/**
 *  Init the basic styles
 */
void lv_style_init(void)
{
 800c4d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /* Not White/Black/Gray colors are created by HSV model with
     * HUE = 210*/

    /*Screen style*/
    lv_style_scr.glass = 0;
 800c4d4:	4bf2      	ldr	r3, [pc, #968]	; (800c8a0 <lv_style_init+0x3d0>)
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
    lv_style_scr.body.border.opa = LV_OPA_COVER;
    lv_style_scr.body.border.width = 0;
    lv_style_scr.body.border.part = LV_BORDER_FULL;

    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 800c4d6:	2480      	movs	r4, #128	; 0x80
    lv_style_scr.body.opa = LV_OPA_COVER;
 800c4d8:	27ff      	movs	r7, #255	; 0xff
    lv_style_scr.body.radius = 0;
 800c4da:	f04f 0a00 	mov.w	sl, #0
    lv_style_scr.glass = 0;
 800c4de:	781a      	ldrb	r2, [r3, #0]
    lv_style_scr.body.padding.ver = LV_DPI / 12;
 800c4e0:	f04f 0e08 	mov.w	lr, #8
    lv_style_scr.body.shadow.type = LV_SHADOW_FULL;
    lv_style_scr.body.shadow.width = 0;

    lv_style_scr.text.opa = LV_OPA_COVER;
    lv_style_scr.text.color = LV_COLOR_MAKE(0x30, 0x30, 0x30);
 800c4e4:	2030      	movs	r0, #48	; 0x30
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 800c4e6:	761c      	strb	r4, [r3, #24]
 800c4e8:	765c      	strb	r4, [r3, #25]
    lv_style_scr.body.border.part = LV_BORDER_FULL;
 800c4ea:	210f      	movs	r1, #15
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 800c4ec:	769c      	strb	r4, [r3, #26]
    lv_style_scr.glass = 0;
 800c4ee:	f36f 0200 	bfc	r2, #0, #1
    lv_style_scr.body.shadow.type = LV_SHADOW_FULL;
 800c4f2:	f04f 0401 	mov.w	r4, #1
    lv_style_scr.body.padding.ver = LV_DPI / 12;
 800c4f6:	f8a3 e020 	strh.w	lr, [r3, #32]
    lv_style_scr.body.padding.hor = LV_DPI / 12;
 800c4fa:	f8a3 e022 	strh.w	lr, [r3, #34]	; 0x22
    lv_style_scr.line.color = LV_COLOR_MAKE(0x20, 0x20, 0x20);
    lv_style_scr.line.width = 2;
    lv_style_scr.line.rounded = 0;

    /*Plain style (by default near the same as the screen style)*/
    memcpy(&lv_style_plain, &lv_style_scr, sizeof(lv_style_t));
 800c4fe:	2648      	movs	r6, #72	; 0x48
    lv_style_scr.body.padding.inner = LV_DPI / 12;
 800c500:	f8a3 e024 	strh.w	lr, [r3, #36]	; 0x24
    lv_style_scr.image.color = LV_COLOR_MAKE(0x20, 0x20, 0x20);
 800c504:	f04f 0920 	mov.w	r9, #32
    lv_style_scr.body.border.part = LV_BORDER_FULL;
 800c508:	7599      	strb	r1, [r3, #22]
    memcpy(&lv_style_plain, &lv_style_scr, sizeof(lv_style_t));
 800c50a:	4619      	mov	r1, r3
    lv_style_scr.glass = 0;
 800c50c:	701a      	strb	r2, [r3, #0]
    memcpy(&lv_style_plain, &lv_style_scr, sizeof(lv_style_t));
 800c50e:	4632      	mov	r2, r6
    lv_style_scr.body.opa = LV_OPA_COVER;
 800c510:	739f      	strb	r7, [r3, #14]
    memcpy(&lv_style_pretty, &lv_style_plain, sizeof(lv_style_t));
    lv_style_pretty.text.color = LV_COLOR_MAKE(0x20, 0x20, 0x20);
    lv_style_pretty.image.color = LV_COLOR_MAKE(0x20, 0x20, 0x20);
    lv_style_pretty.line.color = LV_COLOR_MAKE(0x20, 0x20, 0x20);
    lv_style_pretty.body.main_color = LV_COLOR_WHITE;
    lv_style_pretty.body.grad_color = LV_COLOR_SILVER;
 800c512:	25c0      	movs	r5, #192	; 0xc0
    lv_style_scr.body.main_color = LV_COLOR_WHITE;
 800c514:	711f      	strb	r7, [r3, #4]
 800c516:	715f      	strb	r7, [r3, #5]
 800c518:	719f      	strb	r7, [r3, #6]
 800c51a:	71df      	strb	r7, [r3, #7]
    lv_style_scr.body.grad_color = LV_COLOR_WHITE;
 800c51c:	721f      	strb	r7, [r3, #8]
 800c51e:	725f      	strb	r7, [r3, #9]
 800c520:	729f      	strb	r7, [r3, #10]
 800c522:	72df      	strb	r7, [r3, #11]
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 800c524:	74df      	strb	r7, [r3, #19]
    lv_style_scr.body.border.opa = LV_OPA_COVER;
 800c526:	75df      	strb	r7, [r3, #23]
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 800c528:	76df      	strb	r7, [r3, #27]
    lv_style_scr.text.opa = LV_OPA_COVER;
 800c52a:	f883 7034 	strb.w	r7, [r3, #52]	; 0x34
    lv_style_scr.body.radius = 0;
 800c52e:	f8a3 a00c 	strh.w	sl, [r3, #12]
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 800c532:	f883 a010 	strb.w	sl, [r3, #16]
 800c536:	f883 a011 	strb.w	sl, [r3, #17]
 800c53a:	f883 a012 	strb.w	sl, [r3, #18]
    lv_style_scr.body.border.width = 0;
 800c53e:	f8a3 a014 	strh.w	sl, [r3, #20]
    lv_style_scr.body.shadow.width = 0;
 800c542:	f8a3 a01c 	strh.w	sl, [r3, #28]
    lv_style_scr.body.shadow.type = LV_SHADOW_FULL;
 800c546:	779c      	strb	r4, [r3, #30]
    lv_style_scr.text.color = LV_COLOR_MAKE(0x30, 0x30, 0x30);
 800c548:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
 800c54c:	f883 0029 	strb.w	r0, [r3, #41]	; 0x29
 800c550:	f883 002a 	strb.w	r0, [r3, #42]	; 0x2a
    lv_style_scr.line.rounded = 0;
 800c554:	f893 4047 	ldrb.w	r4, [r3, #71]	; 0x47
    memcpy(&lv_style_plain, &lv_style_scr, sizeof(lv_style_t));
 800c558:	f8df 8370 	ldr.w	r8, [pc, #880]	; 800c8cc <lv_style_init+0x3fc>
    lv_style_scr.line.rounded = 0;
 800c55c:	f36a 0400 	bfi	r4, sl, #0, #1
    lv_style_scr.text.font = LV_FONT_DEFAULT;
 800c560:	48d0      	ldr	r0, [pc, #832]	; (800c8a4 <lv_style_init+0x3d4>)
    memcpy(&lv_style_plain_color, &lv_style_plain, sizeof(lv_style_t));
 800c562:	f8df b36c 	ldr.w	fp, [pc, #876]	; 800c8d0 <lv_style_init+0x400>
    lv_style_scr.line.rounded = 0;
 800c566:	f883 4047 	strb.w	r4, [r3, #71]	; 0x47
    lv_style_scr.text.letter_space = 2;
 800c56a:	f04f 0402 	mov.w	r4, #2
    lv_style_scr.text.font = LV_FONT_DEFAULT;
 800c56e:	62d8      	str	r0, [r3, #44]	; 0x2c
    memcpy(&lv_style_plain, &lv_style_scr, sizeof(lv_style_t));
 800c570:	4640      	mov	r0, r8
    lv_style_scr.text.color = LV_COLOR_MAKE(0x30, 0x30, 0x30);
 800c572:	f883 702b 	strb.w	r7, [r3, #43]	; 0x2b
    lv_style_scr.image.opa = LV_OPA_COVER;
 800c576:	f883 703d 	strb.w	r7, [r3, #61]	; 0x3d
    lv_style_scr.image.color = LV_COLOR_MAKE(0x20, 0x20, 0x20);
 800c57a:	f883 703b 	strb.w	r7, [r3, #59]	; 0x3b
    lv_style_scr.image.intense = LV_OPA_TRANSP;
 800c57e:	f883 a03c 	strb.w	sl, [r3, #60]	; 0x3c
    lv_style_scr.line.opa = LV_OPA_COVER;
 800c582:	f883 7046 	strb.w	r7, [r3, #70]	; 0x46
    lv_style_scr.line.color = LV_COLOR_MAKE(0x20, 0x20, 0x20);
 800c586:	f883 7043 	strb.w	r7, [r3, #67]	; 0x43
    lv_style_scr.text.letter_space = 2;
 800c58a:	861c      	strh	r4, [r3, #48]	; 0x30
    lv_style_scr.text.line_space = 2;
 800c58c:	865c      	strh	r4, [r3, #50]	; 0x32
    lv_style_scr.line.width = 2;
 800c58e:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
    lv_style_scr.image.color = LV_COLOR_MAKE(0x20, 0x20, 0x20);
 800c592:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
 800c596:	f883 9039 	strb.w	r9, [r3, #57]	; 0x39
 800c59a:	f883 903a 	strb.w	r9, [r3, #58]	; 0x3a
    lv_style_scr.line.color = LV_COLOR_MAKE(0x20, 0x20, 0x20);
 800c59e:	f883 9040 	strb.w	r9, [r3, #64]	; 0x40
 800c5a2:	f883 9041 	strb.w	r9, [r3, #65]	; 0x41
 800c5a6:	f883 9042 	strb.w	r9, [r3, #66]	; 0x42
    memcpy(&lv_style_plain, &lv_style_scr, sizeof(lv_style_t));
 800c5aa:	f011 fa17 	bl	801d9dc <memcpy>
    memcpy(&lv_style_plain_color, &lv_style_plain, sizeof(lv_style_t));
 800c5ae:	4641      	mov	r1, r8
 800c5b0:	4632      	mov	r2, r6
 800c5b2:	4658      	mov	r0, fp
    memcpy(&lv_style_pretty, &lv_style_plain, sizeof(lv_style_t));
 800c5b4:	4cbc      	ldr	r4, [pc, #752]	; (800c8a8 <lv_style_init+0x3d8>)
    memcpy(&lv_style_plain_color, &lv_style_plain, sizeof(lv_style_t));
 800c5b6:	f011 fa11 	bl	801d9dc <memcpy>
    lv_style_plain_color.body.main_color = LV_COLOR_MAKE(0x55, 0x96, 0xd8);
 800c5ba:	2396      	movs	r3, #150	; 0x96
 800c5bc:	2255      	movs	r2, #85	; 0x55
 800c5be:	f06f 0127 	mvn.w	r1, #39	; 0x27
 800c5c2:	f88b 3005 	strb.w	r3, [fp, #5]
    lv_style_plain_color.text.color = LV_COLOR_MAKE(0xf0, 0xf0, 0xf0);
 800c5c6:	23f0      	movs	r3, #240	; 0xf0
    lv_style_plain_color.body.main_color = LV_COLOR_MAKE(0x55, 0x96, 0xd8);
 800c5c8:	f88b 1004 	strb.w	r1, [fp, #4]
    memcpy(&lv_style_pretty, &lv_style_plain, sizeof(lv_style_t));
 800c5cc:	4641      	mov	r1, r8
    lv_style_plain_color.body.main_color = LV_COLOR_MAKE(0x55, 0x96, 0xd8);
 800c5ce:	f88b 2006 	strb.w	r2, [fp, #6]
    memcpy(&lv_style_pretty, &lv_style_plain, sizeof(lv_style_t));
 800c5d2:	4632      	mov	r2, r6
    lv_style_plain_color.body.grad_color = lv_style_plain_color.body.main_color;
 800c5d4:	f8db 0004 	ldr.w	r0, [fp, #4]
    lv_style_plain_color.text.color = LV_COLOR_MAKE(0xf0, 0xf0, 0xf0);
 800c5d8:	f88b 3028 	strb.w	r3, [fp, #40]	; 0x28
    lv_style_plain_color.body.grad_color = lv_style_plain_color.body.main_color;
 800c5dc:	f8cb 0008 	str.w	r0, [fp, #8]
    memcpy(&lv_style_pretty, &lv_style_plain, sizeof(lv_style_t));
 800c5e0:	4620      	mov	r0, r4
    lv_style_plain_color.text.color = LV_COLOR_MAKE(0xf0, 0xf0, 0xf0);
 800c5e2:	f88b 3029 	strb.w	r3, [fp, #41]	; 0x29
 800c5e6:	f88b 302a 	strb.w	r3, [fp, #42]	; 0x2a
    lv_style_plain_color.image.color = LV_COLOR_MAKE(0xf0, 0xf0, 0xf0);
 800c5ea:	f88b 3038 	strb.w	r3, [fp, #56]	; 0x38
 800c5ee:	f88b 3039 	strb.w	r3, [fp, #57]	; 0x39
 800c5f2:	f88b 303a 	strb.w	r3, [fp, #58]	; 0x3a
    lv_style_plain_color.line.color = LV_COLOR_MAKE(0xf0, 0xf0, 0xf0);
 800c5f6:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
 800c5fa:	f88b 3041 	strb.w	r3, [fp, #65]	; 0x41
 800c5fe:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
    memcpy(&lv_style_pretty, &lv_style_plain, sizeof(lv_style_t));
 800c602:	f011 f9eb 	bl	801d9dc <memcpy>
    lv_style_pretty.body.border.color = LV_COLOR_MAKE(0x40, 0x40, 0x40);
    lv_style_pretty.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50  : 1;
    lv_style_pretty.body.border.opa = LV_OPA_30;

    /*Pretty color style*/
    memcpy(&lv_style_pretty_color, &lv_style_pretty, sizeof(lv_style_t));
 800c606:	4ba9      	ldr	r3, [pc, #676]	; (800c8ac <lv_style_init+0x3dc>)
    lv_style_pretty.body.border.color = LV_COLOR_MAKE(0x40, 0x40, 0x40);
 800c608:	f04f 0e40 	mov.w	lr, #64	; 0x40
    memcpy(&lv_style_pretty_color, &lv_style_pretty, sizeof(lv_style_t));
 800c60c:	4621      	mov	r1, r4
 800c60e:	4632      	mov	r2, r6
 800c610:	4618      	mov	r0, r3
    lv_style_pretty.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50  : 1;
 800c612:	f04f 0302 	mov.w	r3, #2
    lv_style_pretty.text.color = LV_COLOR_MAKE(0x20, 0x20, 0x20);
 800c616:	f884 9028 	strb.w	r9, [r4, #40]	; 0x28
    lv_style_btn_pr.line.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);

    /*Button toggle released style*/
    memcpy(&lv_style_btn_tgl_rel, &lv_style_btn_rel, sizeof(lv_style_t));
    lv_style_btn_tgl_rel.body.main_color = LV_COLOR_MAKE(0x0a, 0x11, 0x22);
    lv_style_btn_tgl_rel.body.grad_color = LV_COLOR_MAKE(0x37, 0x62, 0x90);
 800c61a:	f04f 0b90 	mov.w	fp, #144	; 0x90
    lv_style_pretty.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50  : 1;
 800c61e:	82a3      	strh	r3, [r4, #20]
    lv_style_pretty.body.radius = LV_DPI / 15;
 800c620:	f04f 0306 	mov.w	r3, #6
    lv_style_pretty.text.color = LV_COLOR_MAKE(0x20, 0x20, 0x20);
 800c624:	f884 9029 	strb.w	r9, [r4, #41]	; 0x29
    lv_style_pretty.body.radius = LV_DPI / 15;
 800c628:	81a3      	strh	r3, [r4, #12]
    lv_style_pretty.body.border.opa = LV_OPA_30;
 800c62a:	f04f 034c 	mov.w	r3, #76	; 0x4c
    lv_style_pretty.text.color = LV_COLOR_MAKE(0x20, 0x20, 0x20);
 800c62e:	f884 902a 	strb.w	r9, [r4, #42]	; 0x2a
    lv_style_pretty_color.body.main_color = LV_COLOR_MAKE(0x6b, 0x9a, 0xc7);
 800c632:	f04f 096b 	mov.w	r9, #107	; 0x6b
    lv_style_pretty.body.grad_color = LV_COLOR_SILVER;
 800c636:	7225      	strb	r5, [r4, #8]
 800c638:	7265      	strb	r5, [r4, #9]
 800c63a:	72a5      	strb	r5, [r4, #10]
    lv_style_pretty.body.border.color = LV_COLOR_MAKE(0x40, 0x40, 0x40);
 800c63c:	f884 e010 	strb.w	lr, [r4, #16]
 800c640:	f884 e011 	strb.w	lr, [r4, #17]
 800c644:	f884 e012 	strb.w	lr, [r4, #18]
    lv_style_pretty.body.border.opa = LV_OPA_30;
 800c648:	75e3      	strb	r3, [r4, #23]
    memcpy(&lv_style_pretty_color, &lv_style_pretty, sizeof(lv_style_t));
 800c64a:	f011 f9c7 	bl	801d9dc <memcpy>
 800c64e:	4603      	mov	r3, r0
    lv_style_pretty_color.body.main_color = LV_COLOR_MAKE(0x6b, 0x9a, 0xc7);
 800c650:	20c7      	movs	r0, #199	; 0xc7
 800c652:	f04f 0e9a 	mov.w	lr, #154	; 0x9a
    memcpy(&lv_style_transp, &lv_style_plain, sizeof(lv_style_t));
 800c656:	4c96      	ldr	r4, [pc, #600]	; (800c8b0 <lv_style_init+0x3e0>)
    lv_style_pretty_color.line.color = LV_COLOR_MAKE(0xc0, 0xc0, 0xc0);
 800c658:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
    lv_style_pretty_color.body.grad_color = LV_COLOR_MAKE(0x2b, 0x59, 0x8b);
 800c65c:	2259      	movs	r2, #89	; 0x59
    lv_style_pretty_color.line.color = LV_COLOR_MAKE(0xc0, 0xc0, 0xc0);
 800c65e:	f883 5041 	strb.w	r5, [r3, #65]	; 0x41
    lv_style_pretty_color.body.border.color = LV_COLOR_MAKE(0x15, 0x2c, 0x42);
 800c662:	2142      	movs	r1, #66	; 0x42
    lv_style_pretty_color.line.color = LV_COLOR_MAKE(0xc0, 0xc0, 0xc0);
 800c664:	f883 5042 	strb.w	r5, [r3, #66]	; 0x42
    lv_style_pretty_color.text.color = LV_COLOR_MAKE(0xe0, 0xe0, 0xe0);
 800c668:	25e0      	movs	r5, #224	; 0xe0
    lv_style_pretty_color.body.main_color = LV_COLOR_MAKE(0x6b, 0x9a, 0xc7);
 800c66a:	7118      	strb	r0, [r3, #4]
    lv_style_pretty_color.body.border.color = LV_COLOR_MAKE(0x15, 0x2c, 0x42);
 800c66c:	202c      	movs	r0, #44	; 0x2c
    lv_style_pretty_color.body.grad_color = LV_COLOR_MAKE(0x2b, 0x59, 0x8b);
 800c66e:	f04f 0c8b 	mov.w	ip, #139	; 0x8b
    lv_style_pretty_color.body.main_color = LV_COLOR_MAKE(0x6b, 0x9a, 0xc7);
 800c672:	f883 e005 	strb.w	lr, [r3, #5]
    lv_style_pretty_color.text.color = LV_COLOR_MAKE(0xe0, 0xe0, 0xe0);
 800c676:	f883 5028 	strb.w	r5, [r3, #40]	; 0x28
    lv_style_pretty_color.body.border.color = LV_COLOR_MAKE(0x15, 0x2c, 0x42);
 800c67a:	f04f 0e15 	mov.w	lr, #21
    lv_style_pretty_color.text.color = LV_COLOR_MAKE(0xe0, 0xe0, 0xe0);
 800c67e:	f883 5029 	strb.w	r5, [r3, #41]	; 0x29
 800c682:	f883 502a 	strb.w	r5, [r3, #42]	; 0x2a
    lv_style_pretty_color.image.color = LV_COLOR_MAKE(0xe0, 0xe0, 0xe0);
 800c686:	f883 5038 	strb.w	r5, [r3, #56]	; 0x38
 800c68a:	f883 5039 	strb.w	r5, [r3, #57]	; 0x39
 800c68e:	f883 503a 	strb.w	r5, [r3, #58]	; 0x3a
    lv_style_pretty_color.body.grad_color = LV_COLOR_MAKE(0x2b, 0x59, 0x8b);
 800c692:	f04f 052b 	mov.w	r5, #43	; 0x2b
 800c696:	725a      	strb	r2, [r3, #9]
    memcpy(&lv_style_transp, &lv_style_plain, sizeof(lv_style_t));
 800c698:	4632      	mov	r2, r6
    lv_style_pretty_color.body.border.color = LV_COLOR_MAKE(0x15, 0x2c, 0x42);
 800c69a:	7419      	strb	r1, [r3, #16]
    memcpy(&lv_style_transp, &lv_style_plain, sizeof(lv_style_t));
 800c69c:	4641      	mov	r1, r8
    lv_style_pretty_color.body.border.color = LV_COLOR_MAKE(0x15, 0x2c, 0x42);
 800c69e:	7458      	strb	r0, [r3, #17]
    memcpy(&lv_style_transp, &lv_style_plain, sizeof(lv_style_t));
 800c6a0:	4620      	mov	r0, r4
    lv_style_pretty_color.body.grad_color = LV_COLOR_MAKE(0x2b, 0x59, 0x8b);
 800c6a2:	f883 c008 	strb.w	ip, [r3, #8]
    lv_style_pretty_color.body.border.color = LV_COLOR_MAKE(0x15, 0x2c, 0x42);
 800c6a6:	f883 e012 	strb.w	lr, [r3, #18]
    lv_style_pretty_color.body.main_color = LV_COLOR_MAKE(0x6b, 0x9a, 0xc7);
 800c6aa:	f883 9006 	strb.w	r9, [r3, #6]
    lv_style_pretty_color.body.grad_color = LV_COLOR_MAKE(0x2b, 0x59, 0x8b);
 800c6ae:	729d      	strb	r5, [r3, #10]
    memcpy(&lv_style_transp, &lv_style_plain, sizeof(lv_style_t));
 800c6b0:	f011 f994 	bl	801d9dc <memcpy>
    lv_style_transp.glass = 1;
 800c6b4:	7820      	ldrb	r0, [r4, #0]
    memcpy(&lv_style_transp_fit, &lv_style_transp, sizeof(lv_style_t));
 800c6b6:	4621      	mov	r1, r4
    lv_style_transp.body.empty = 1;
 800c6b8:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
    memcpy(&lv_style_transp_fit, &lv_style_transp, sizeof(lv_style_t));
 800c6bc:	4632      	mov	r2, r6
 800c6be:	4b7d      	ldr	r3, [pc, #500]	; (800c8b4 <lv_style_init+0x3e4>)
    lv_style_transp.glass = 1;
 800c6c0:	f040 0001 	orr.w	r0, r0, #1
    lv_style_transp.body.empty = 1;
 800c6c4:	f045 0501 	orr.w	r5, r5, #1
    memcpy(&lv_style_transp_tight, &lv_style_transp_fit, sizeof(lv_style_t));
 800c6c8:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800c8d4 <lv_style_init+0x404>
    lv_style_transp.glass = 1;
 800c6cc:	7020      	strb	r0, [r4, #0]
    memcpy(&lv_style_transp_fit, &lv_style_transp, sizeof(lv_style_t));
 800c6ce:	4618      	mov	r0, r3
    lv_style_transp.body.empty = 1;
 800c6d0:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    memcpy(&lv_style_transp_fit, &lv_style_transp, sizeof(lv_style_t));
 800c6d4:	f011 f982 	bl	801d9dc <memcpy>
    memcpy(&lv_style_btn_rel, &lv_style_plain, sizeof(lv_style_t));
 800c6d8:	4c77      	ldr	r4, [pc, #476]	; (800c8b8 <lv_style_init+0x3e8>)
    memcpy(&lv_style_transp_fit, &lv_style_transp, sizeof(lv_style_t));
 800c6da:	4603      	mov	r3, r0
    memcpy(&lv_style_transp_tight, &lv_style_transp_fit, sizeof(lv_style_t));
 800c6dc:	4601      	mov	r1, r0
    lv_style_transp_fit.body.padding.hor = 0;
 800c6de:	f8a0 a022 	strh.w	sl, [r0, #34]	; 0x22
    memcpy(&lv_style_transp_tight, &lv_style_transp_fit, sizeof(lv_style_t));
 800c6e2:	4632      	mov	r2, r6
 800c6e4:	4648      	mov	r0, r9
    lv_style_transp_fit.body.padding.ver = 0;
 800c6e6:	f8a3 a020 	strh.w	sl, [r3, #32]
    memcpy(&lv_style_transp_tight, &lv_style_transp_fit, sizeof(lv_style_t));
 800c6ea:	f011 f977 	bl	801d9dc <memcpy>
    memcpy(&lv_style_btn_rel, &lv_style_plain, sizeof(lv_style_t));
 800c6ee:	4641      	mov	r1, r8
 800c6f0:	4632      	mov	r2, r6
 800c6f2:	4620      	mov	r0, r4
    lv_style_transp_tight.body.padding.inner = 0;
 800c6f4:	f8a9 a024 	strh.w	sl, [r9, #36]	; 0x24
    memcpy(&lv_style_btn_rel, &lv_style_plain, sizeof(lv_style_t));
 800c6f8:	f011 f970 	bl	801d9dc <memcpy>
    lv_style_btn_rel.body.radius = LV_DPI / 15;
 800c6fc:	f04f 0306 	mov.w	r3, #6
    memcpy(&lv_style_btn_pr, &lv_style_btn_rel, sizeof(lv_style_t));
 800c700:	4d6e      	ldr	r5, [pc, #440]	; (800c8bc <lv_style_init+0x3ec>)
    lv_style_btn_rel.body.main_color = LV_COLOR_MAKE(0x76, 0xa2, 0xd0);
 800c702:	22a2      	movs	r2, #162	; 0xa2
    lv_style_btn_rel.body.radius = LV_DPI / 15;
 800c704:	81a3      	strh	r3, [r4, #12]
    lv_style_btn_rel.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50  : 1;
 800c706:	f04f 0302 	mov.w	r3, #2
    lv_style_btn_rel.body.main_color = LV_COLOR_MAKE(0x76, 0xa2, 0xd0);
 800c70a:	2176      	movs	r1, #118	; 0x76
    lv_style_btn_rel.body.grad_color = LV_COLOR_MAKE(0x19, 0x3a, 0x5d);
 800c70c:	205d      	movs	r0, #93	; 0x5d
    lv_style_btn_rel.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50  : 1;
 800c70e:	82a3      	strh	r3, [r4, #20]
    lv_style_btn_rel.body.grad_color = LV_COLOR_MAKE(0x19, 0x3a, 0x5d);
 800c710:	2319      	movs	r3, #25
    lv_style_btn_rel.body.border.color = LV_COLOR_MAKE(0x0b, 0x19, 0x28);
 800c712:	f04f 0c0b 	mov.w	ip, #11
    lv_style_btn_rel.body.border.opa = LV_OPA_70;
 800c716:	f04f 0eb2 	mov.w	lr, #178	; 0xb2
    lv_style_btn_rel.body.grad_color = LV_COLOR_MAKE(0x19, 0x3a, 0x5d);
 800c71a:	72a3      	strb	r3, [r4, #10]
    lv_style_btn_rel.body.main_color = LV_COLOR_MAKE(0x76, 0xa2, 0xd0);
 800c71c:	f04f 0ad0 	mov.w	sl, #208	; 0xd0
    lv_style_btn_rel.body.padding.hor = LV_DPI / 4;
 800c720:	8463      	strh	r3, [r4, #34]	; 0x22
    lv_style_btn_rel.body.grad_color = LV_COLOR_MAKE(0x19, 0x3a, 0x5d);
 800c722:	f04f 093a 	mov.w	r9, #58	; 0x3a
    lv_style_btn_rel.body.border.color = LV_COLOR_MAKE(0x0b, 0x19, 0x28);
 800c726:	7463      	strb	r3, [r4, #17]
    lv_style_btn_rel.body.padding.ver = LV_DPI / 6;
 800c728:	f04f 0310 	mov.w	r3, #16
    lv_style_btn_rel.body.border.color = LV_COLOR_MAKE(0x0b, 0x19, 0x28);
 800c72c:	f04f 0828 	mov.w	r8, #40	; 0x28
    lv_style_btn_rel.body.main_color = LV_COLOR_MAKE(0x76, 0xa2, 0xd0);
 800c730:	7162      	strb	r2, [r4, #5]
    lv_style_btn_rel.body.padding.ver = LV_DPI / 6;
 800c732:	8423      	strh	r3, [r4, #32]
    lv_style_btn_rel.body.padding.inner = LV_DPI / 10;
 800c734:	f04f 030a 	mov.w	r3, #10
    memcpy(&lv_style_btn_pr, &lv_style_btn_rel, sizeof(lv_style_t));
 800c738:	4632      	mov	r2, r6
    lv_style_btn_rel.body.main_color = LV_COLOR_MAKE(0x76, 0xa2, 0xd0);
 800c73a:	71a1      	strb	r1, [r4, #6]
    lv_style_btn_rel.body.grad_color = LV_COLOR_MAKE(0x19, 0x3a, 0x5d);
 800c73c:	7220      	strb	r0, [r4, #8]
    memcpy(&lv_style_btn_pr, &lv_style_btn_rel, sizeof(lv_style_t));
 800c73e:	4621      	mov	r1, r4
 800c740:	4628      	mov	r0, r5
    lv_style_btn_rel.body.border.color = LV_COLOR_MAKE(0x0b, 0x19, 0x28);
 800c742:	f884 c012 	strb.w	ip, [r4, #18]
    lv_style_btn_rel.body.border.opa = LV_OPA_70;
 800c746:	f884 e017 	strb.w	lr, [r4, #23]
    lv_style_btn_rel.text.color = LV_COLOR_MAKE(0xff, 0xff, 0xff);
 800c74a:	f884 7028 	strb.w	r7, [r4, #40]	; 0x28
 800c74e:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
 800c752:	f884 702a 	strb.w	r7, [r4, #42]	; 0x2a
    lv_style_btn_rel.image.color = LV_COLOR_MAKE(0xff, 0xff, 0xff);
 800c756:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
 800c75a:	f884 7039 	strb.w	r7, [r4, #57]	; 0x39
 800c75e:	f884 703a 	strb.w	r7, [r4, #58]	; 0x3a
    lv_style_btn_pr.text.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 800c762:	27a4      	movs	r7, #164	; 0xa4
    lv_style_btn_rel.body.main_color = LV_COLOR_MAKE(0x76, 0xa2, 0xd0);
 800c764:	f884 a004 	strb.w	sl, [r4, #4]
    lv_style_btn_pr.body.main_color = LV_COLOR_MAKE(0x33, 0x62, 0x94);
 800c768:	f04f 0a62 	mov.w	sl, #98	; 0x62
    lv_style_btn_rel.body.grad_color = LV_COLOR_MAKE(0x19, 0x3a, 0x5d);
 800c76c:	f884 9009 	strb.w	r9, [r4, #9]
    lv_style_btn_pr.text.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 800c770:	f04f 09c6 	mov.w	r9, #198	; 0xc6
    lv_style_btn_rel.body.border.color = LV_COLOR_MAKE(0x0b, 0x19, 0x28);
 800c774:	f884 8010 	strb.w	r8, [r4, #16]
    lv_style_btn_pr.text.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 800c778:	f04f 08b5 	mov.w	r8, #181	; 0xb5
    lv_style_btn_rel.body.padding.inner = LV_DPI / 10;
 800c77c:	84a3      	strh	r3, [r4, #36]	; 0x24
    memcpy(&lv_style_btn_pr, &lv_style_btn_rel, sizeof(lv_style_t));
 800c77e:	f011 f92d 	bl	801d9dc <memcpy>
    lv_style_btn_pr.body.main_color = LV_COLOR_MAKE(0x33, 0x62, 0x94);
 800c782:	2094      	movs	r0, #148	; 0x94
    lv_style_btn_pr.body.grad_color = LV_COLOR_MAKE(0x10, 0x26, 0x3c);
 800c784:	f04f 0110 	mov.w	r1, #16
    memcpy(&lv_style_btn_tgl_rel, &lv_style_btn_rel, sizeof(lv_style_t));
 800c788:	4b4d      	ldr	r3, [pc, #308]	; (800c8c0 <lv_style_init+0x3f0>)
    lv_style_btn_pr.body.main_color = LV_COLOR_MAKE(0x33, 0x62, 0x94);
 800c78a:	2233      	movs	r2, #51	; 0x33
    lv_style_btn_pr.body.grad_color = LV_COLOR_MAKE(0x10, 0x26, 0x3c);
 800c78c:	72a9      	strb	r1, [r5, #10]
 800c78e:	213c      	movs	r1, #60	; 0x3c
    lv_style_btn_pr.body.main_color = LV_COLOR_MAKE(0x33, 0x62, 0x94);
 800c790:	7128      	strb	r0, [r5, #4]
    lv_style_btn_pr.body.grad_color = LV_COLOR_MAKE(0x10, 0x26, 0x3c);
 800c792:	2026      	movs	r0, #38	; 0x26
    lv_style_btn_pr.body.main_color = LV_COLOR_MAKE(0x33, 0x62, 0x94);
 800c794:	71aa      	strb	r2, [r5, #6]
    memcpy(&lv_style_btn_tgl_rel, &lv_style_btn_rel, sizeof(lv_style_t));
 800c796:	4632      	mov	r2, r6
    lv_style_btn_pr.body.grad_color = LV_COLOR_MAKE(0x10, 0x26, 0x3c);
 800c798:	7229      	strb	r1, [r5, #8]
    memcpy(&lv_style_btn_tgl_rel, &lv_style_btn_rel, sizeof(lv_style_t));
 800c79a:	4621      	mov	r1, r4
    lv_style_btn_pr.body.grad_color = LV_COLOR_MAKE(0x10, 0x26, 0x3c);
 800c79c:	7268      	strb	r0, [r5, #9]
    memcpy(&lv_style_btn_tgl_rel, &lv_style_btn_rel, sizeof(lv_style_t));
 800c79e:	4618      	mov	r0, r3
    lv_style_btn_pr.body.main_color = LV_COLOR_MAKE(0x33, 0x62, 0x94);
 800c7a0:	f885 a005 	strb.w	sl, [r5, #5]
    lv_style_btn_pr.text.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 800c7a4:	f885 9028 	strb.w	r9, [r5, #40]	; 0x28
    lv_style_btn_pr.image.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 800c7a8:	f885 9038 	strb.w	r9, [r5, #56]	; 0x38
    lv_style_btn_pr.line.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 800c7ac:	f885 9040 	strb.w	r9, [r5, #64]	; 0x40
    lv_style_btn_pr.text.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 800c7b0:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    lv_style_btn_pr.image.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 800c7b4:	f885 8039 	strb.w	r8, [r5, #57]	; 0x39
    lv_style_btn_pr.line.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 800c7b8:	f885 8041 	strb.w	r8, [r5, #65]	; 0x41
    lv_style_btn_pr.text.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 800c7bc:	f885 702a 	strb.w	r7, [r5, #42]	; 0x2a
    lv_style_btn_pr.image.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 800c7c0:	f885 703a 	strb.w	r7, [r5, #58]	; 0x3a
    lv_style_btn_pr.line.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 800c7c4:	f885 7042 	strb.w	r7, [r5, #66]	; 0x42
    memcpy(&lv_style_btn_tgl_rel, &lv_style_btn_rel, sizeof(lv_style_t));
 800c7c8:	f011 f908 	bl	801d9dc <memcpy>
    lv_style_btn_tgl_rel.body.border.color = LV_COLOR_MAKE(0x01, 0x07, 0x0d);
 800c7cc:	f04f 0201 	mov.w	r2, #1
    memcpy(&lv_style_btn_tgl_rel, &lv_style_btn_rel, sizeof(lv_style_t));
 800c7d0:	4603      	mov	r3, r0
    lv_style_btn_tgl_rel.body.main_color = LV_COLOR_MAKE(0x0a, 0x11, 0x22);
 800c7d2:	f04f 0c22 	mov.w	ip, #34	; 0x22
 800c7d6:	f04f 0e11 	mov.w	lr, #17
    lv_style_btn_tgl_rel.body.border.color = LV_COLOR_MAKE(0x01, 0x07, 0x0d);
 800c7da:	7482      	strb	r2, [r0, #18]
    lv_style_btn_tgl_rel.body.main_color = LV_COLOR_MAKE(0x0a, 0x11, 0x22);
 800c7dc:	f04f 020a 	mov.w	r2, #10
    lv_style_btn_tgl_rel.text.color = LV_COLOR_MAKE(0xc8, 0xdd, 0xf4);
    lv_style_btn_tgl_rel.image.color = LV_COLOR_MAKE(0xc8, 0xdd, 0xf4);
    lv_style_btn_tgl_rel.line.color = LV_COLOR_MAKE(0xc8, 0xdd, 0xf4);

    /*Button toggle pressed style*/
    memcpy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel, sizeof(lv_style_t));
 800c7e0:	4d38      	ldr	r5, [pc, #224]	; (800c8c4 <lv_style_init+0x3f4>)
    lv_style_btn_tgl_rel.body.grad_color = LV_COLOR_MAKE(0x37, 0x62, 0x90);
 800c7e2:	2037      	movs	r0, #55	; 0x37
    lv_style_btn_tgl_rel.body.main_color = LV_COLOR_MAKE(0x0a, 0x11, 0x22);
 800c7e4:	719a      	strb	r2, [r3, #6]
    lv_style_btn_tgl_rel.body.border.color = LV_COLOR_MAKE(0x01, 0x07, 0x0d);
 800c7e6:	2107      	movs	r1, #7
 800c7e8:	220d      	movs	r2, #13
    lv_style_btn_tgl_rel.body.grad_color = LV_COLOR_MAKE(0x37, 0x62, 0x90);
 800c7ea:	f883 a009 	strb.w	sl, [r3, #9]
    lv_style_btn_tgl_rel.body.main_color = LV_COLOR_MAKE(0x0a, 0x11, 0x22);
 800c7ee:	f883 c004 	strb.w	ip, [r3, #4]
    lv_style_btn_tgl_rel.text.color = LV_COLOR_MAKE(0xc8, 0xdd, 0xf4);
 800c7f2:	f04f 0af4 	mov.w	sl, #244	; 0xf4
 800c7f6:	f04f 0cdd 	mov.w	ip, #221	; 0xdd
    lv_style_btn_tgl_rel.body.main_color = LV_COLOR_MAKE(0x0a, 0x11, 0x22);
 800c7fa:	f883 e005 	strb.w	lr, [r3, #5]
    lv_style_btn_tgl_rel.text.color = LV_COLOR_MAKE(0xc8, 0xdd, 0xf4);
 800c7fe:	f04f 0ec8 	mov.w	lr, #200	; 0xc8
    lv_style_btn_tgl_rel.body.grad_color = LV_COLOR_MAKE(0x37, 0x62, 0x90);
 800c802:	7298      	strb	r0, [r3, #10]
    lv_style_btn_tgl_rel.body.border.color = LV_COLOR_MAKE(0x01, 0x07, 0x0d);
 800c804:	741a      	strb	r2, [r3, #16]
    memcpy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel, sizeof(lv_style_t));
 800c806:	4628      	mov	r0, r5
    lv_style_btn_tgl_rel.body.border.color = LV_COLOR_MAKE(0x01, 0x07, 0x0d);
 800c808:	7459      	strb	r1, [r3, #17]
    memcpy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel, sizeof(lv_style_t));
 800c80a:	4632      	mov	r2, r6
 800c80c:	4619      	mov	r1, r3
    lv_style_btn_tgl_rel.text.color = LV_COLOR_MAKE(0xc8, 0xdd, 0xf4);
 800c80e:	f883 a028 	strb.w	sl, [r3, #40]	; 0x28
    lv_style_btn_tgl_rel.image.color = LV_COLOR_MAKE(0xc8, 0xdd, 0xf4);
 800c812:	f883 a038 	strb.w	sl, [r3, #56]	; 0x38
    lv_style_btn_tgl_rel.line.color = LV_COLOR_MAKE(0xc8, 0xdd, 0xf4);
 800c816:	f883 a040 	strb.w	sl, [r3, #64]	; 0x40
    lv_style_btn_tgl_pr.body.main_color = LV_COLOR_MAKE(0x02, 0x14, 0x27);
    lv_style_btn_tgl_pr.body.grad_color = LV_COLOR_MAKE(0x2b, 0x4c, 0x70);
 800c81a:	f04f 0a70 	mov.w	sl, #112	; 0x70
    lv_style_btn_tgl_rel.text.color = LV_COLOR_MAKE(0xc8, 0xdd, 0xf4);
 800c81e:	f883 c029 	strb.w	ip, [r3, #41]	; 0x29
    lv_style_btn_tgl_rel.image.color = LV_COLOR_MAKE(0xc8, 0xdd, 0xf4);
 800c822:	f883 c039 	strb.w	ip, [r3, #57]	; 0x39
    lv_style_btn_tgl_rel.line.color = LV_COLOR_MAKE(0xc8, 0xdd, 0xf4);
 800c826:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    lv_style_btn_tgl_rel.text.color = LV_COLOR_MAKE(0xc8, 0xdd, 0xf4);
 800c82a:	f883 e02a 	strb.w	lr, [r3, #42]	; 0x2a
    lv_style_btn_tgl_rel.image.color = LV_COLOR_MAKE(0xc8, 0xdd, 0xf4);
 800c82e:	f883 e03a 	strb.w	lr, [r3, #58]	; 0x3a
    lv_style_btn_tgl_rel.line.color = LV_COLOR_MAKE(0xc8, 0xdd, 0xf4);
 800c832:	f883 e042 	strb.w	lr, [r3, #66]	; 0x42
    lv_style_btn_tgl_rel.body.grad_color = LV_COLOR_MAKE(0x37, 0x62, 0x90);
 800c836:	f883 b008 	strb.w	fp, [r3, #8]
    memcpy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel, sizeof(lv_style_t));
 800c83a:	f011 f8cf 	bl	801d9dc <memcpy>
    lv_style_btn_tgl_pr.text.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
    lv_style_btn_tgl_pr.image.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
    lv_style_btn_tgl_pr.line.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);

    /*Button inactive style*/
    memcpy(&lv_style_btn_ina, &lv_style_btn_rel, sizeof(lv_style_t));
 800c83e:	4b22      	ldr	r3, [pc, #136]	; (800c8c8 <lv_style_init+0x3f8>)
    lv_style_btn_tgl_pr.body.main_color = LV_COLOR_MAKE(0x02, 0x14, 0x27);
 800c840:	f04f 0c27 	mov.w	ip, #39	; 0x27
 800c844:	f04f 0e14 	mov.w	lr, #20
    memcpy(&lv_style_btn_ina, &lv_style_btn_rel, sizeof(lv_style_t));
 800c848:	4632      	mov	r2, r6
 800c84a:	4618      	mov	r0, r3
    lv_style_btn_tgl_pr.body.main_color = LV_COLOR_MAKE(0x02, 0x14, 0x27);
 800c84c:	f04f 0302 	mov.w	r3, #2
    memcpy(&lv_style_btn_ina, &lv_style_btn_rel, sizeof(lv_style_t));
 800c850:	4621      	mov	r1, r4
    lv_style_btn_tgl_pr.text.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 800c852:	f885 9028 	strb.w	r9, [r5, #40]	; 0x28
    lv_style_btn_tgl_pr.body.main_color = LV_COLOR_MAKE(0x02, 0x14, 0x27);
 800c856:	71ab      	strb	r3, [r5, #6]
    lv_style_btn_tgl_pr.body.grad_color = LV_COLOR_MAKE(0x2b, 0x4c, 0x70);
 800c858:	f04f 034c 	mov.w	r3, #76	; 0x4c
    lv_style_btn_tgl_pr.text.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 800c85c:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    lv_style_btn_tgl_pr.body.grad_color = LV_COLOR_MAKE(0x2b, 0x4c, 0x70);
 800c860:	726b      	strb	r3, [r5, #9]
 800c862:	f04f 032b 	mov.w	r3, #43	; 0x2b
    lv_style_btn_tgl_pr.text.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 800c866:	f885 702a 	strb.w	r7, [r5, #42]	; 0x2a
    lv_style_btn_tgl_pr.body.grad_color = LV_COLOR_MAKE(0x2b, 0x4c, 0x70);
 800c86a:	72ab      	strb	r3, [r5, #10]
    lv_style_btn_tgl_pr.image.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 800c86c:	f885 9038 	strb.w	r9, [r5, #56]	; 0x38
 800c870:	f885 8039 	strb.w	r8, [r5, #57]	; 0x39
 800c874:	f885 703a 	strb.w	r7, [r5, #58]	; 0x3a
    lv_style_btn_tgl_pr.line.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 800c878:	f885 9040 	strb.w	r9, [r5, #64]	; 0x40
 800c87c:	f885 8041 	strb.w	r8, [r5, #65]	; 0x41
 800c880:	f885 7042 	strb.w	r7, [r5, #66]	; 0x42
    lv_style_btn_tgl_pr.body.main_color = LV_COLOR_MAKE(0x02, 0x14, 0x27);
 800c884:	f885 c004 	strb.w	ip, [r5, #4]
 800c888:	f885 e005 	strb.w	lr, [r5, #5]
    lv_style_btn_tgl_pr.body.grad_color = LV_COLOR_MAKE(0x2b, 0x4c, 0x70);
 800c88c:	f885 a008 	strb.w	sl, [r5, #8]
    memcpy(&lv_style_btn_ina, &lv_style_btn_rel, sizeof(lv_style_t));
 800c890:	f011 f8a4 	bl	801d9dc <memcpy>
    lv_style_btn_ina.body.main_color = LV_COLOR_MAKE(0xd8, 0xd8, 0xd8);
 800c894:	f06f 0227 	mvn.w	r2, #39	; 0x27
    lv_style_btn_ina.body.grad_color = LV_COLOR_MAKE(0xd8, 0xd8, 0xd8);
    lv_style_btn_ina.body.border.color = LV_COLOR_MAKE(0x90, 0x90, 0x90);
 800c898:	f880 b010 	strb.w	fp, [r0, #16]
 800c89c:	e01c      	b.n	800c8d8 <lv_style_init+0x408>
 800c89e:	bf00      	nop
 800c8a0:	200193cc 	.word	0x200193cc
 800c8a4:	200000d4 	.word	0x200000d4
 800c8a8:	2001921c 	.word	0x2001921c
 800c8ac:	200190fc 	.word	0x200190fc
 800c8b0:	20019144 	.word	0x20019144
 800c8b4:	200192f4 	.word	0x200192f4
 800c8b8:	2001918c 	.word	0x2001918c
 800c8bc:	200191d4 	.word	0x200191d4
 800c8c0:	20019384 	.word	0x20019384
 800c8c4:	20019414 	.word	0x20019414
 800c8c8:	200192ac 	.word	0x200192ac
 800c8cc:	2001933c 	.word	0x2001933c
 800c8d0:	2001945c 	.word	0x2001945c
 800c8d4:	20019264 	.word	0x20019264
 800c8d8:	f880 b011 	strb.w	fp, [r0, #17]
    lv_style_btn_ina.body.main_color = LV_COLOR_MAKE(0xd8, 0xd8, 0xd8);
 800c8dc:	7102      	strb	r2, [r0, #4]
 800c8de:	7142      	strb	r2, [r0, #5]
 800c8e0:	7182      	strb	r2, [r0, #6]
    lv_style_btn_ina.body.grad_color = LV_COLOR_MAKE(0xd8, 0xd8, 0xd8);
 800c8e2:	7202      	strb	r2, [r0, #8]
 800c8e4:	7242      	strb	r2, [r0, #9]
 800c8e6:	7282      	strb	r2, [r0, #10]
    lv_style_btn_ina.body.border.color = LV_COLOR_MAKE(0x90, 0x90, 0x90);
 800c8e8:	f880 b012 	strb.w	fp, [r0, #18]
    lv_style_btn_ina.text.color = LV_COLOR_MAKE(0x70, 0x70, 0x70);
 800c8ec:	f880 a028 	strb.w	sl, [r0, #40]	; 0x28
 800c8f0:	f880 a029 	strb.w	sl, [r0, #41]	; 0x29
 800c8f4:	f880 a02a 	strb.w	sl, [r0, #42]	; 0x2a
    lv_style_btn_ina.image.color = LV_COLOR_MAKE(0x70, 0x70, 0x70);
 800c8f8:	f880 a038 	strb.w	sl, [r0, #56]	; 0x38
 800c8fc:	f880 a039 	strb.w	sl, [r0, #57]	; 0x39
 800c900:	f880 a03a 	strb.w	sl, [r0, #58]	; 0x3a
    lv_style_btn_ina.line.color = LV_COLOR_MAKE(0x70, 0x70, 0x70);
 800c904:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
 800c908:	f880 a041 	strb.w	sl, [r0, #65]	; 0x41
 800c90c:	f880 a042 	strb.w	sl, [r0, #66]	; 0x42
 800c910:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c914 <lv_style_copy>:
 * @param dest pointer to the destination style
 * @param src pointer to the source style
 */
void lv_style_copy(lv_style_t * dest, const lv_style_t * src)
{
    memcpy(dest, src, sizeof(lv_style_t));
 800c914:	2248      	movs	r2, #72	; 0x48
 800c916:	f011 b861 	b.w	801d9dc <memcpy>
 800c91a:	bf00      	nop

0800c91c <lv_style_mix>:
 * @param end end style
 * @param res store the result style here
 * @param ratio the ratio of mix [0..256]; 0: `start` style; 256: `end` style
 */
void lv_style_mix(const lv_style_t * start, const lv_style_t * end, lv_style_t * res, uint16_t ratio)
{
 800c91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    STYLE_ATTR_MIX(body.opa, ratio);
 800c920:	7b85      	ldrb	r5, [r0, #14]
 800c922:	7b8c      	ldrb	r4, [r1, #14]
 800c924:	42a5      	cmp	r5, r4
 800c926:	d005      	beq.n	800c934 <lv_style_mix+0x18>
 800c928:	1b64      	subs	r4, r4, r5
 800c92a:	fb03 f404 	mul.w	r4, r3, r4
 800c92e:	eb05 2424 	add.w	r4, r5, r4, asr #8
 800c932:	b2e4      	uxtb	r4, r4
 800c934:	7394      	strb	r4, [r2, #14]
    STYLE_ATTR_MIX(body.radius, ratio);
 800c936:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
 800c93a:	f9b1 500c 	ldrsh.w	r5, [r1, #12]
 800c93e:	42ac      	cmp	r4, r5
 800c940:	d005      	beq.n	800c94e <lv_style_mix+0x32>
 800c942:	1b2d      	subs	r5, r5, r4
 800c944:	fb03 f505 	mul.w	r5, r3, r5
 800c948:	eb04 2525 	add.w	r5, r4, r5, asr #8
 800c94c:	b22d      	sxth	r5, r5
    STYLE_ATTR_MIX(body.border.width, ratio);
 800c94e:	f9b0 6014 	ldrsh.w	r6, [r0, #20]
 800c952:	f9b1 4014 	ldrsh.w	r4, [r1, #20]
 800c956:	8195      	strh	r5, [r2, #12]
 800c958:	42a6      	cmp	r6, r4
 800c95a:	d005      	beq.n	800c968 <lv_style_mix+0x4c>
 800c95c:	1ba4      	subs	r4, r4, r6
 800c95e:	fb03 f404 	mul.w	r4, r3, r4
 800c962:	eb06 2424 	add.w	r4, r6, r4, asr #8
 800c966:	b224      	sxth	r4, r4
 800c968:	8294      	strh	r4, [r2, #20]
    STYLE_ATTR_MIX(body.border.opa, ratio);
 800c96a:	7dc5      	ldrb	r5, [r0, #23]
 800c96c:	7dcc      	ldrb	r4, [r1, #23]
 800c96e:	42a5      	cmp	r5, r4
 800c970:	d005      	beq.n	800c97e <lv_style_mix+0x62>
 800c972:	1b64      	subs	r4, r4, r5
 800c974:	fb03 f404 	mul.w	r4, r3, r4
 800c978:	eb05 2424 	add.w	r4, r5, r4, asr #8
 800c97c:	b2e4      	uxtb	r4, r4
 800c97e:	75d4      	strb	r4, [r2, #23]
    STYLE_ATTR_MIX(body.shadow.width, ratio);
 800c980:	f9b0 401c 	ldrsh.w	r4, [r0, #28]
 800c984:	f9b1 501c 	ldrsh.w	r5, [r1, #28]
 800c988:	42ac      	cmp	r4, r5
 800c98a:	d005      	beq.n	800c998 <lv_style_mix+0x7c>
 800c98c:	1b2d      	subs	r5, r5, r4
 800c98e:	fb03 f505 	mul.w	r5, r3, r5
 800c992:	eb04 2525 	add.w	r5, r4, r5, asr #8
 800c996:	b22d      	sxth	r5, r5
    STYLE_ATTR_MIX(body.padding.hor, ratio);
 800c998:	f9b0 6022 	ldrsh.w	r6, [r0, #34]	; 0x22
 800c99c:	f9b1 4022 	ldrsh.w	r4, [r1, #34]	; 0x22
 800c9a0:	8395      	strh	r5, [r2, #28]
 800c9a2:	42a6      	cmp	r6, r4
 800c9a4:	d005      	beq.n	800c9b2 <lv_style_mix+0x96>
 800c9a6:	1ba4      	subs	r4, r4, r6
 800c9a8:	fb03 f404 	mul.w	r4, r3, r4
 800c9ac:	eb06 2424 	add.w	r4, r6, r4, asr #8
 800c9b0:	b224      	sxth	r4, r4
    STYLE_ATTR_MIX(body.padding.ver, ratio);
 800c9b2:	f9b0 6020 	ldrsh.w	r6, [r0, #32]
 800c9b6:	f9b1 5020 	ldrsh.w	r5, [r1, #32]
 800c9ba:	8454      	strh	r4, [r2, #34]	; 0x22
 800c9bc:	42ae      	cmp	r6, r5
 800c9be:	d005      	beq.n	800c9cc <lv_style_mix+0xb0>
 800c9c0:	1bad      	subs	r5, r5, r6
 800c9c2:	fb03 f505 	mul.w	r5, r3, r5
 800c9c6:	eb06 2525 	add.w	r5, r6, r5, asr #8
 800c9ca:	b22d      	sxth	r5, r5
    STYLE_ATTR_MIX(body.padding.inner, ratio);
 800c9cc:	f9b0 6024 	ldrsh.w	r6, [r0, #36]	; 0x24
 800c9d0:	f9b1 4024 	ldrsh.w	r4, [r1, #36]	; 0x24
 800c9d4:	8415      	strh	r5, [r2, #32]
 800c9d6:	42a6      	cmp	r6, r4
 800c9d8:	d005      	beq.n	800c9e6 <lv_style_mix+0xca>
 800c9da:	1ba4      	subs	r4, r4, r6
 800c9dc:	fb03 f404 	mul.w	r4, r3, r4
 800c9e0:	eb06 2424 	add.w	r4, r6, r4, asr #8
 800c9e4:	b224      	sxth	r4, r4
    STYLE_ATTR_MIX(text.line_space, ratio);
 800c9e6:	f9b0 6032 	ldrsh.w	r6, [r0, #50]	; 0x32
 800c9ea:	f9b1 5032 	ldrsh.w	r5, [r1, #50]	; 0x32
 800c9ee:	8494      	strh	r4, [r2, #36]	; 0x24
 800c9f0:	42ae      	cmp	r6, r5
 800c9f2:	d005      	beq.n	800ca00 <lv_style_mix+0xe4>
 800c9f4:	1bad      	subs	r5, r5, r6
 800c9f6:	fb03 f505 	mul.w	r5, r3, r5
 800c9fa:	eb06 2525 	add.w	r5, r6, r5, asr #8
 800c9fe:	b22d      	sxth	r5, r5
    STYLE_ATTR_MIX(text.letter_space, ratio);
 800ca00:	f9b0 6030 	ldrsh.w	r6, [r0, #48]	; 0x30
 800ca04:	f9b1 4030 	ldrsh.w	r4, [r1, #48]	; 0x30
 800ca08:	8655      	strh	r5, [r2, #50]	; 0x32
 800ca0a:	42a6      	cmp	r6, r4
 800ca0c:	d005      	beq.n	800ca1a <lv_style_mix+0xfe>
 800ca0e:	1ba4      	subs	r4, r4, r6
 800ca10:	fb03 f404 	mul.w	r4, r3, r4
 800ca14:	eb06 2424 	add.w	r4, r6, r4, asr #8
 800ca18:	b224      	sxth	r4, r4
 800ca1a:	8614      	strh	r4, [r2, #48]	; 0x30
    STYLE_ATTR_MIX(text.opa, ratio);
 800ca1c:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
 800ca20:	f891 4034 	ldrb.w	r4, [r1, #52]	; 0x34
 800ca24:	42a5      	cmp	r5, r4
 800ca26:	d005      	beq.n	800ca34 <lv_style_mix+0x118>
 800ca28:	1b64      	subs	r4, r4, r5
 800ca2a:	fb03 f404 	mul.w	r4, r3, r4
 800ca2e:	eb05 2424 	add.w	r4, r5, r4, asr #8
 800ca32:	b2e4      	uxtb	r4, r4
 800ca34:	f882 4034 	strb.w	r4, [r2, #52]	; 0x34
    STYLE_ATTR_MIX(line.width, ratio);
 800ca38:	f9b0 5044 	ldrsh.w	r5, [r0, #68]	; 0x44
 800ca3c:	f9b1 4044 	ldrsh.w	r4, [r1, #68]	; 0x44
 800ca40:	42a5      	cmp	r5, r4
 800ca42:	d005      	beq.n	800ca50 <lv_style_mix+0x134>
 800ca44:	1b64      	subs	r4, r4, r5
 800ca46:	fb03 f404 	mul.w	r4, r3, r4
 800ca4a:	eb05 2424 	add.w	r4, r5, r4, asr #8
 800ca4e:	b224      	sxth	r4, r4
 800ca50:	f8a2 4044 	strh.w	r4, [r2, #68]	; 0x44
    STYLE_ATTR_MIX(line.opa, ratio);
 800ca54:	f890 5046 	ldrb.w	r5, [r0, #70]	; 0x46
 800ca58:	f891 4046 	ldrb.w	r4, [r1, #70]	; 0x46
 800ca5c:	42a5      	cmp	r5, r4
 800ca5e:	d005      	beq.n	800ca6c <lv_style_mix+0x150>
 800ca60:	1b64      	subs	r4, r4, r5
 800ca62:	fb03 f404 	mul.w	r4, r3, r4
 800ca66:	eb05 2424 	add.w	r4, r5, r4, asr #8
 800ca6a:	b2e4      	uxtb	r4, r4
 800ca6c:	f882 4046 	strb.w	r4, [r2, #70]	; 0x46
    STYLE_ATTR_MIX(image.intense, ratio);
 800ca70:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
 800ca74:	f891 403c 	ldrb.w	r4, [r1, #60]	; 0x3c
 800ca78:	42a5      	cmp	r5, r4
 800ca7a:	d005      	beq.n	800ca88 <lv_style_mix+0x16c>
 800ca7c:	1b64      	subs	r4, r4, r5
 800ca7e:	fb03 f404 	mul.w	r4, r3, r4
 800ca82:	eb05 2424 	add.w	r4, r5, r4, asr #8
 800ca86:	b2e4      	uxtb	r4, r4
 800ca88:	f882 403c 	strb.w	r4, [r2, #60]	; 0x3c
    STYLE_ATTR_MIX(image.opa, ratio);
 800ca8c:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 800ca90:	f891 403d 	ldrb.w	r4, [r1, #61]	; 0x3d
 800ca94:	42a5      	cmp	r5, r4
 800ca96:	d005      	beq.n	800caa4 <lv_style_mix+0x188>
 800ca98:	1b64      	subs	r4, r4, r5
 800ca9a:	fb03 f404 	mul.w	r4, r3, r4
 800ca9e:	eb05 2424 	add.w	r4, r5, r4, asr #8
 800caa2:	b2e4      	uxtb	r4, r4

    lv_opa_t opa = ratio == STYLE_MIX_MAX ? LV_OPA_COVER : ratio;
 800caa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800caa8:	f882 403d 	strb.w	r4, [r2, #61]	; 0x3d
 800caac:	f000 813c 	beq.w	800cd28 <lv_style_mix+0x40c>
 800cab0:	b2dc      	uxtb	r4, r3
 800cab2:	f1c4 05ff 	rsb	r5, r4, #255	; 0xff
 800cab6:	b2a4      	uxth	r4, r4
 800cab8:	b2ad      	uxth	r5, r5
static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800caba:	f890 c006 	ldrb.w	ip, [r0, #6]

    res->body.main_color = lv_color_mix(end->body.main_color, start->body.main_color, opa);
 800cabe:	26ff      	movs	r6, #255	; 0xff
    uint16_t g_2 = (c2.green_h << 3) + c2.green_l;
    uint16_t g_out = (uint16_t)((uint16_t) g_1 * mix + (g_2 * (255 - mix))) >> 8;
    ret.green_h = g_out >> 3;
    ret.green_l = g_out & 0x7;
#  else
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800cac0:	f890 e005 	ldrb.w	lr, [r0, #5]
    res->body.shadow.color = lv_color_mix(end->body.shadow.color, start->body.shadow.color, opa);
    res->text.color = lv_color_mix(end->text.color, start->text.color, opa);
    res->image.color = lv_color_mix(end->image.color, start->image.color, opa);
    res->line.color = lv_color_mix(end->line.color, start->line.color, opa);

    if(ratio < (STYLE_MIX_MAX >> 1)) {
 800cac4:	2b7f      	cmp	r3, #127	; 0x7f
#  endif
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800cac6:	7907      	ldrb	r7, [r0, #4]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800cac8:	fb1c fa05 	smulbb	sl, ip, r5
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800cacc:	fb1e f905 	smulbb	r9, lr, r5
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800cad0:	f891 c006 	ldrb.w	ip, [r1, #6]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800cad4:	f891 e005 	ldrb.w	lr, [r1, #5]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800cad8:	fb17 f805 	smulbb	r8, r7, r5
 800cadc:	790f      	ldrb	r7, [r1, #4]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800cade:	fb0c ac04 	mla	ip, ip, r4, sl
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800cae2:	fb0e 9e04 	mla	lr, lr, r4, r9
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800cae6:	fb07 8704 	mla	r7, r7, r4, r8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800caea:	f3cc 2c07 	ubfx	ip, ip, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800caee:	f3ce 2e07 	ubfx	lr, lr, #8, #8
    res->body.main_color = lv_color_mix(end->body.main_color, start->body.main_color, opa);
 800caf2:	71d6      	strb	r6, [r2, #7]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800caf4:	f3c7 2707 	ubfx	r7, r7, #8, #8
 800caf8:	f882 c006 	strb.w	ip, [r2, #6]
 800cafc:	f882 e005 	strb.w	lr, [r2, #5]
 800cb00:	7117      	strb	r7, [r2, #4]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800cb02:	f890 c00a 	ldrb.w	ip, [r0, #10]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800cb06:	f890 e009 	ldrb.w	lr, [r0, #9]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800cb0a:	7a07      	ldrb	r7, [r0, #8]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800cb0c:	fb1c fa05 	smulbb	sl, ip, r5
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800cb10:	fb1e f905 	smulbb	r9, lr, r5
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800cb14:	f891 c00a 	ldrb.w	ip, [r1, #10]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800cb18:	f891 e009 	ldrb.w	lr, [r1, #9]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800cb1c:	fb17 f805 	smulbb	r8, r7, r5
 800cb20:	7a0f      	ldrb	r7, [r1, #8]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800cb22:	fb0c ac04 	mla	ip, ip, r4, sl
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800cb26:	fb0e 9e04 	mla	lr, lr, r4, r9
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800cb2a:	fb07 8704 	mla	r7, r7, r4, r8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800cb2e:	f3cc 2c07 	ubfx	ip, ip, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800cb32:	f3ce 2e07 	ubfx	lr, lr, #8, #8
    res->body.grad_color = lv_color_mix(end->body.grad_color, start->body.grad_color, opa);
 800cb36:	72d6      	strb	r6, [r2, #11]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800cb38:	f3c7 2707 	ubfx	r7, r7, #8, #8
 800cb3c:	f882 c00a 	strb.w	ip, [r2, #10]
 800cb40:	f882 e009 	strb.w	lr, [r2, #9]
 800cb44:	7217      	strb	r7, [r2, #8]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800cb46:	f890 c012 	ldrb.w	ip, [r0, #18]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800cb4a:	f890 e011 	ldrb.w	lr, [r0, #17]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800cb4e:	7c07      	ldrb	r7, [r0, #16]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800cb50:	fb1c fa05 	smulbb	sl, ip, r5
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800cb54:	fb1e f905 	smulbb	r9, lr, r5
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800cb58:	f891 c012 	ldrb.w	ip, [r1, #18]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800cb5c:	f891 e011 	ldrb.w	lr, [r1, #17]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800cb60:	fb17 f805 	smulbb	r8, r7, r5
 800cb64:	7c0f      	ldrb	r7, [r1, #16]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800cb66:	fb0c ac04 	mla	ip, ip, r4, sl
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800cb6a:	fb0e 9e04 	mla	lr, lr, r4, r9
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800cb6e:	fb07 8704 	mla	r7, r7, r4, r8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800cb72:	f3cc 2c07 	ubfx	ip, ip, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800cb76:	f3ce 2e07 	ubfx	lr, lr, #8, #8
    res->body.border.color = lv_color_mix(end->body.border.color, start->body.border.color, opa);
 800cb7a:	74d6      	strb	r6, [r2, #19]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800cb7c:	f3c7 2707 	ubfx	r7, r7, #8, #8
 800cb80:	f882 c012 	strb.w	ip, [r2, #18]
 800cb84:	f882 e011 	strb.w	lr, [r2, #17]
 800cb88:	7417      	strb	r7, [r2, #16]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800cb8a:	f890 801a 	ldrb.w	r8, [r0, #26]
 800cb8e:	f891 c01a 	ldrb.w	ip, [r1, #26]
 800cb92:	fb18 f805 	smulbb	r8, r8, r5
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800cb96:	f891 e019 	ldrb.w	lr, [r1, #25]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800cb9a:	7e07      	ldrb	r7, [r0, #24]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800cb9c:	f890 9019 	ldrb.w	r9, [r0, #25]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800cba0:	fb0c 8c04 	mla	ip, ip, r4, r8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800cba4:	fb17 f805 	smulbb	r8, r7, r5
 800cba8:	7e0f      	ldrb	r7, [r1, #24]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800cbaa:	fb19 f905 	smulbb	r9, r9, r5
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800cbae:	f3cc 2c07 	ubfx	ip, ip, #8, #8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800cbb2:	fb07 8704 	mla	r7, r7, r4, r8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800cbb6:	fb0e 9e04 	mla	lr, lr, r4, r9
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800cbba:	f3c7 2707 	ubfx	r7, r7, #8, #8
    res->body.shadow.color = lv_color_mix(end->body.shadow.color, start->body.shadow.color, opa);
 800cbbe:	f882 c01a 	strb.w	ip, [r2, #26]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800cbc2:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 800cbc6:	76d6      	strb	r6, [r2, #27]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800cbc8:	7617      	strb	r7, [r2, #24]
 800cbca:	f882 e019 	strb.w	lr, [r2, #25]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800cbce:	f890 c02a 	ldrb.w	ip, [r0, #42]	; 0x2a
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800cbd2:	f890 e029 	ldrb.w	lr, [r0, #41]	; 0x29
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800cbd6:	f890 7028 	ldrb.w	r7, [r0, #40]	; 0x28
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800cbda:	fb1c fa05 	smulbb	sl, ip, r5
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800cbde:	fb1e f905 	smulbb	r9, lr, r5
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800cbe2:	f891 c02a 	ldrb.w	ip, [r1, #42]	; 0x2a
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800cbe6:	f891 e029 	ldrb.w	lr, [r1, #41]	; 0x29
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800cbea:	fb17 f805 	smulbb	r8, r7, r5
 800cbee:	f891 7028 	ldrb.w	r7, [r1, #40]	; 0x28
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800cbf2:	fb0c ac04 	mla	ip, ip, r4, sl
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800cbf6:	fb0e 9e04 	mla	lr, lr, r4, r9
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800cbfa:	fb07 8704 	mla	r7, r7, r4, r8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800cbfe:	f3cc 2c07 	ubfx	ip, ip, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800cc02:	f3ce 2e07 	ubfx	lr, lr, #8, #8
    res->text.color = lv_color_mix(end->text.color, start->text.color, opa);
 800cc06:	f882 602b 	strb.w	r6, [r2, #43]	; 0x2b
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800cc0a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 800cc0e:	f882 c02a 	strb.w	ip, [r2, #42]	; 0x2a
 800cc12:	f882 e029 	strb.w	lr, [r2, #41]	; 0x29
 800cc16:	f882 7028 	strb.w	r7, [r2, #40]	; 0x28
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800cc1a:	f890 c03a 	ldrb.w	ip, [r0, #58]	; 0x3a
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800cc1e:	f890 e039 	ldrb.w	lr, [r0, #57]	; 0x39
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800cc22:	f890 7038 	ldrb.w	r7, [r0, #56]	; 0x38
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800cc26:	fb1c fa05 	smulbb	sl, ip, r5
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800cc2a:	fb1e f905 	smulbb	r9, lr, r5
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800cc2e:	f891 c03a 	ldrb.w	ip, [r1, #58]	; 0x3a
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800cc32:	f891 e039 	ldrb.w	lr, [r1, #57]	; 0x39
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800cc36:	fb17 f805 	smulbb	r8, r7, r5
 800cc3a:	f891 7038 	ldrb.w	r7, [r1, #56]	; 0x38
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800cc3e:	fb0c ac04 	mla	ip, ip, r4, sl
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800cc42:	fb0e 9e04 	mla	lr, lr, r4, r9
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800cc46:	fb07 8704 	mla	r7, r7, r4, r8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800cc4a:	f3cc 2c07 	ubfx	ip, ip, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800cc4e:	f3ce 2e07 	ubfx	lr, lr, #8, #8
    res->image.color = lv_color_mix(end->image.color, start->image.color, opa);
 800cc52:	f882 603b 	strb.w	r6, [r2, #59]	; 0x3b
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800cc56:	f3c7 2707 	ubfx	r7, r7, #8, #8
 800cc5a:	f882 c03a 	strb.w	ip, [r2, #58]	; 0x3a
 800cc5e:	f882 e039 	strb.w	lr, [r2, #57]	; 0x39
 800cc62:	f882 7038 	strb.w	r7, [r2, #56]	; 0x38
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800cc66:	f891 7041 	ldrb.w	r7, [r1, #65]	; 0x41
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800cc6a:	f891 e042 	ldrb.w	lr, [r1, #66]	; 0x42
 800cc6e:	f890 a042 	ldrb.w	sl, [r0, #66]	; 0x42
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800cc72:	f890 9041 	ldrb.w	r9, [r0, #65]	; 0x41
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800cc76:	f891 8040 	ldrb.w	r8, [r1, #64]	; 0x40
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800cc7a:	fb1a fa05 	smulbb	sl, sl, r5
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800cc7e:	f890 c040 	ldrb.w	ip, [r0, #64]	; 0x40
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800cc82:	fb19 f905 	smulbb	r9, r9, r5
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800cc86:	fb0e ae04 	mla	lr, lr, r4, sl
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800cc8a:	fb1c fc05 	smulbb	ip, ip, r5
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800cc8e:	fb07 9504 	mla	r5, r7, r4, r9
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800cc92:	f3ce 2707 	ubfx	r7, lr, #8, #8
    res->line.color = lv_color_mix(end->line.color, start->line.color, opa);
 800cc96:	f882 6043 	strb.w	r6, [r2, #67]	; 0x43
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800cc9a:	fb08 c404 	mla	r4, r8, r4, ip
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800cc9e:	f3c5 2507 	ubfx	r5, r5, #8, #8
 800cca2:	f882 7042 	strb.w	r7, [r2, #66]	; 0x42
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800cca6:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800ccaa:	f882 5041 	strb.w	r5, [r2, #65]	; 0x41
 800ccae:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    if(ratio < (STYLE_MIX_MAX >> 1)) {
 800ccb2:	d91c      	bls.n	800ccee <lv_style_mix+0x3d2>
        res->glass = start->glass;
        res->text.font = start->text.font;
        res->body.shadow.type = start->body.shadow.type;
        res->line.rounded = start->line.rounded;
    } else {
        res->body.empty = end->body.empty;
 800ccb4:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 800ccb8:	f892 4026 	ldrb.w	r4, [r2, #38]	; 0x26
        res->body.border.part = end->body.border.part;
        res->glass = end->glass;
 800ccbc:	7810      	ldrb	r0, [r2, #0]
        res->body.empty = end->body.empty;
 800ccbe:	f363 0400 	bfi	r4, r3, #0, #1
        res->text.font = end->text.font;
        res->body.shadow.type = end->body.shadow.type;
        res->line.rounded = end->line.rounded;
 800ccc2:	f892 3047 	ldrb.w	r3, [r2, #71]	; 0x47
        res->body.empty = end->body.empty;
 800ccc6:	f882 4026 	strb.w	r4, [r2, #38]	; 0x26
        res->body.border.part = end->body.border.part;
 800ccca:	7d8c      	ldrb	r4, [r1, #22]
 800cccc:	7594      	strb	r4, [r2, #22]
        res->glass = end->glass;
 800ccce:	780c      	ldrb	r4, [r1, #0]
 800ccd0:	f364 0000 	bfi	r0, r4, #0, #1
 800ccd4:	7010      	strb	r0, [r2, #0]
        res->text.font = end->text.font;
 800ccd6:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 800ccd8:	62d0      	str	r0, [r2, #44]	; 0x2c
        res->body.shadow.type = end->body.shadow.type;
 800ccda:	7f88      	ldrb	r0, [r1, #30]
 800ccdc:	7790      	strb	r0, [r2, #30]
        res->line.rounded = end->line.rounded;
 800ccde:	f891 1047 	ldrb.w	r1, [r1, #71]	; 0x47
 800cce2:	f361 0300 	bfi	r3, r1, #0, #1
 800cce6:	f882 3047 	strb.w	r3, [r2, #71]	; 0x47
 800ccea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        res->body.empty = start->body.empty;
 800ccee:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 800ccf2:	f892 4026 	ldrb.w	r4, [r2, #38]	; 0x26
        res->glass = start->glass;
 800ccf6:	7811      	ldrb	r1, [r2, #0]
        res->body.empty = start->body.empty;
 800ccf8:	f363 0400 	bfi	r4, r3, #0, #1
        res->line.rounded = start->line.rounded;
 800ccfc:	f892 3047 	ldrb.w	r3, [r2, #71]	; 0x47
        res->body.empty = start->body.empty;
 800cd00:	f882 4026 	strb.w	r4, [r2, #38]	; 0x26
        res->body.border.part = start->body.border.part;
 800cd04:	7d84      	ldrb	r4, [r0, #22]
 800cd06:	7594      	strb	r4, [r2, #22]
        res->glass = start->glass;
 800cd08:	7804      	ldrb	r4, [r0, #0]
 800cd0a:	f364 0100 	bfi	r1, r4, #0, #1
 800cd0e:	7011      	strb	r1, [r2, #0]
        res->text.font = start->text.font;
 800cd10:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800cd12:	62d1      	str	r1, [r2, #44]	; 0x2c
        res->body.shadow.type = start->body.shadow.type;
 800cd14:	7f81      	ldrb	r1, [r0, #30]
 800cd16:	7791      	strb	r1, [r2, #30]
        res->line.rounded = start->line.rounded;
 800cd18:	f890 1047 	ldrb.w	r1, [r0, #71]	; 0x47
 800cd1c:	f361 0300 	bfi	r3, r1, #0, #1
 800cd20:	f882 3047 	strb.w	r3, [r2, #71]	; 0x47
 800cd24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd28:	2500      	movs	r5, #0
 800cd2a:	24ff      	movs	r4, #255	; 0xff
 800cd2c:	e6c5      	b.n	800caba <lv_style_mix+0x19e>
 800cd2e:	bf00      	nop

0800cd30 <lv_vdb_get>:
/**
 * Get the 'vdb' variable or allocate one in LV_VDB_DOUBLE mode
 * @return pointer to a 'vdb' variable
 */
lv_vdb_t * lv_vdb_get(void)
{
 800cd30:	4a02      	ldr	r2, [pc, #8]	; (800cd3c <lv_vdb_get+0xc>)
#if LV_VDB_DOUBLE == 0
    /* Wait until VDB is flushing.
     * (Until this user calls of 'lv_flush_ready()' in the display drivers's flush function*/
    while(vdb_flushing);
 800cd32:	7813      	ldrb	r3, [r2, #0]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d1fc      	bne.n	800cd32 <lv_vdb_get+0x2>
    return &vdb;
#else
    /*If already there is an active do nothing*/
    return &vdb[vdb_active];
#endif
}
 800cd38:	4801      	ldr	r0, [pc, #4]	; (800cd40 <lv_vdb_get+0x10>)
 800cd3a:	4770      	bx	lr
 800cd3c:	20000e04 	.word	0x20000e04
 800cd40:	2000004c 	.word	0x2000004c

0800cd44 <lv_vdb_flush>:

/**
 * Flush the content of the VDB
 */
void lv_vdb_flush(void)
{
 800cd44:	b570      	push	{r4, r5, r6, lr}
 800cd46:	4c0b      	ldr	r4, [pc, #44]	; (800cd74 <lv_vdb_flush+0x30>)
 800cd48:	b082      	sub	sp, #8
    while(vdb_flushing);
 800cd4a:	7823      	ldrb	r3, [r4, #0]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d1fc      	bne.n	800cd4a <lv_vdb_flush+0x6>
#endif  /*LV_VDB_DOUBLE*/

    vdb_flushing = true;

    /*Flush the rendered content to the display*/
    lv_disp_flush(vdb_act->area.x1, vdb_act->area.y1, vdb_act->area.x2, vdb_act->area.y2, vdb_act->buf);
 800cd50:	4d09      	ldr	r5, [pc, #36]	; (800cd78 <lv_vdb_flush+0x34>)
    vdb_flushing = true;
 800cd52:	2601      	movs	r6, #1
    lv_disp_flush(vdb_act->area.x1, vdb_act->area.y1, vdb_act->area.x2, vdb_act->area.y2, vdb_act->buf);
 800cd54:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800cd58:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800cd5c:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 800cd60:	f9b5 0000 	ldrsh.w	r0, [r5]
 800cd64:	68ad      	ldr	r5, [r5, #8]
    vdb_flushing = true;
 800cd66:	7026      	strb	r6, [r4, #0]
    lv_disp_flush(vdb_act->area.x1, vdb_act->area.y1, vdb_act->area.x2, vdb_act->area.y2, vdb_act->buf);
 800cd68:	9500      	str	r5, [sp, #0]
 800cd6a:	f005 fc51 	bl	8012610 <lv_disp_flush>
        memset(vdb[vdb_active].buf, 0x00, LV_VDB_SIZE_IN_BYTES);
#  endif  /*LV_COLOR_SCREEN_TRANSP*/

#endif  /*#if LV_VDB_DOUBLE*/

}
 800cd6e:	b002      	add	sp, #8
 800cd70:	bd70      	pop	{r4, r5, r6, pc}
 800cd72:	bf00      	nop
 800cd74:	20000e04 	.word	0x20000e04
 800cd78:	2000004c 	.word	0x2000004c

0800cd7c <lv_flush_ready>:
/**
 * Call in the display driver's  'disp_flush' function when the flushing is finished
 */
LV_ATTRIBUTE_FLUSH_READY void lv_flush_ready(void)
{
    vdb_flushing = false;
 800cd7c:	4b01      	ldr	r3, [pc, #4]	; (800cd84 <lv_flush_ready+0x8>)
 800cd7e:	2200      	movs	r2, #0
 800cd80:	701a      	strb	r2, [r3, #0]
 800cd82:	4770      	bx	lr
 800cd84:	20000e04 	.word	0x20000e04

0800cd88 <lv_draw_aa_get_opa>:

    static const lv_opa_t * seg_map[] = {seg1, seg2, seg3, seg4,
                                         seg5, seg6, seg7, seg8
                                        };

    if(seg == 0) return LV_OPA_TRANSP;
 800cd88:	b140      	cbz	r0, 800cd9c <lv_draw_aa_get_opa+0x14>
    else if(seg < 8) return (uint32_t)((uint32_t)seg_map[seg - 1][px_id] * base_opa) >> 8;
 800cd8a:	2807      	cmp	r0, #7
 800cd8c:	dd07      	ble.n	800cd9e <lv_draw_aa_get_opa+0x16>
    else {
        return ((px_id * 2 + 1) * base_opa) / (2 * seg);
 800cd8e:	0049      	lsls	r1, r1, #1
 800cd90:	0040      	lsls	r0, r0, #1
 800cd92:	fb01 2202 	mla	r2, r1, r2, r2
 800cd96:	fb92 f0f0 	sdiv	r0, r2, r0
 800cd9a:	b2c0      	uxtb	r0, r0
    }

}
 800cd9c:	4770      	bx	lr
    else if(seg < 8) return (uint32_t)((uint32_t)seg_map[seg - 1][px_id] * base_opa) >> 8;
 800cd9e:	3801      	subs	r0, #1
 800cda0:	4b03      	ldr	r3, [pc, #12]	; (800cdb0 <lv_draw_aa_get_opa+0x28>)
 800cda2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800cda6:	5c58      	ldrb	r0, [r3, r1]
 800cda8:	fb10 f002 	smulbb	r0, r0, r2
 800cdac:	0a00      	lsrs	r0, r0, #8
 800cdae:	4770      	bx	lr
 800cdb0:	0808b5b4 	.word	0x0808b5b4

0800cdb4 <lv_draw_aa_ver_seg>:
 * @param mask draw only in this area
 * @param color color of pixels
 * @param opa maximum opacity
 */
void lv_draw_aa_ver_seg(lv_coord_t x, lv_coord_t y, lv_coord_t length, const lv_area_t * mask, lv_color_t color, lv_opa_t opa)
{
 800cdb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bool aa_inv = false;
    if(length < 0) {
 800cdb8:	f1b2 0900 	subs.w	r9, r2, #0
{
 800cdbc:	b085      	sub	sp, #20
 800cdbe:	4606      	mov	r6, r0
 800cdc0:	461f      	mov	r7, r3
 800cdc2:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 800cdc6:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
    if(length < 0) {
 800cdca:	db66      	blt.n	800ce9a <lv_draw_aa_ver_seg+0xe6>
    bool aa_inv = false;
 800cdcc:	2300      	movs	r3, #0
        aa_inv = true;
        length = -length;
    }

    lv_coord_t i;
    for(i = 0; i < length; i++) {
 800cdce:	f1b9 0f00 	cmp.w	r9, #0
 800cdd2:	dd20      	ble.n	800ce16 <lv_draw_aa_ver_seg+0x62>
 800cdd4:	f1b9 0f07 	cmp.w	r9, #7
 800cdd8:	b28c      	uxth	r4, r1
        return ((px_id * 2 + 1) * base_opa) / (2 * seg);
 800cdda:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800cdde:	dd3c      	ble.n	800ce5a <lv_draw_aa_ver_seg+0xa6>
 800cde0:	b9e3      	cbnz	r3, 800ce1c <lv_draw_aa_ver_seg+0x68>
 800cde2:	eb04 0309 	add.w	r3, r4, r9
 800cde6:	f04f 0b02 	mov.w	fp, #2
 800cdea:	46a9      	mov	r9, r5
 800cdec:	b29b      	uxth	r3, r3
 800cdee:	9303      	str	r3, [sp, #12]
        lv_opa_t px_opa = lv_draw_aa_get_opa(length, i, opa);
        if(aa_inv) px_opa = opa - px_opa;
        px_fp(x, y + i, mask, color, px_opa);
 800cdf0:	b221      	sxth	r1, r4
 800cdf2:	3401      	adds	r4, #1
 800cdf4:	4643      	mov	r3, r8
 800cdf6:	463a      	mov	r2, r7
 800cdf8:	4630      	mov	r0, r6
 800cdfa:	b2a4      	uxth	r4, r4
        return ((px_id * 2 + 1) * base_opa) / (2 * seg);
 800cdfc:	fb99 fefa 	sdiv	lr, r9, sl
 800ce00:	fb1b 9905 	smlabb	r9, fp, r5, r9
        px_fp(x, y + i, mask, color, px_opa);
 800ce04:	fa5f fe8e 	uxtb.w	lr, lr
 800ce08:	f8cd e000 	str.w	lr, [sp]
 800ce0c:	f004 fe32 	bl	8011a74 <lv_vpx>
    for(i = 0; i < length; i++) {
 800ce10:	9b03      	ldr	r3, [sp, #12]
 800ce12:	429c      	cmp	r4, r3
 800ce14:	d1ec      	bne.n	800cdf0 <lv_draw_aa_ver_seg+0x3c>
    }
}
 800ce16:	b005      	add	sp, #20
 800ce18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce1c:	eb04 0309 	add.w	r3, r4, r9
 800ce20:	f04f 0b02 	mov.w	fp, #2
 800ce24:	46a9      	mov	r9, r5
 800ce26:	b29b      	uxth	r3, r3
 800ce28:	9303      	str	r3, [sp, #12]
        px_fp(x, y + i, mask, color, px_opa);
 800ce2a:	b221      	sxth	r1, r4
 800ce2c:	3401      	adds	r4, #1
 800ce2e:	4643      	mov	r3, r8
 800ce30:	463a      	mov	r2, r7
 800ce32:	4630      	mov	r0, r6
 800ce34:	b2a4      	uxth	r4, r4
        return ((px_id * 2 + 1) * base_opa) / (2 * seg);
 800ce36:	fb99 fefa 	sdiv	lr, r9, sl
 800ce3a:	fb1b 9905 	smlabb	r9, fp, r5, r9
        if(aa_inv) px_opa = opa - px_opa;
 800ce3e:	eba5 0e0e 	sub.w	lr, r5, lr
        px_fp(x, y + i, mask, color, px_opa);
 800ce42:	fa5f fe8e 	uxtb.w	lr, lr
 800ce46:	f8cd e000 	str.w	lr, [sp]
 800ce4a:	f004 fe13 	bl	8011a74 <lv_vpx>
    for(i = 0; i < length; i++) {
 800ce4e:	9b03      	ldr	r3, [sp, #12]
 800ce50:	429c      	cmp	r4, r3
 800ce52:	d1ea      	bne.n	800ce2a <lv_draw_aa_ver_seg+0x76>
}
 800ce54:	b005      	add	sp, #20
 800ce56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce5a:	4a22      	ldr	r2, [pc, #136]	; (800cee4 <lv_draw_aa_ver_seg+0x130>)
 800ce5c:	f109 31ff 	add.w	r1, r9, #4294967295
 800ce60:	bb0b      	cbnz	r3, 800cea6 <lv_draw_aa_ver_seg+0xf2>
        return ((px_id * 2 + 1) * base_opa) / (2 * seg);
 800ce62:	469a      	mov	sl, r3
    else if(seg < 8) return (uint32_t)((uint32_t)seg_map[seg - 1][px_id] * base_opa) >> 8;
 800ce64:	f852 b021 	ldr.w	fp, [r2, r1, lsl #2]
 800ce68:	f81b e00a 	ldrb.w	lr, [fp, sl]
        px_fp(x, y + i, mask, color, px_opa);
 800ce6c:	eb04 010a 	add.w	r1, r4, sl
 800ce70:	f10a 0a01 	add.w	sl, sl, #1
 800ce74:	4643      	mov	r3, r8
    else if(seg < 8) return (uint32_t)((uint32_t)seg_map[seg - 1][px_id] * base_opa) >> 8;
 800ce76:	fb1e fe05 	smulbb	lr, lr, r5
        px_fp(x, y + i, mask, color, px_opa);
 800ce7a:	b209      	sxth	r1, r1
 800ce7c:	463a      	mov	r2, r7
 800ce7e:	4630      	mov	r0, r6
 800ce80:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 800ce84:	f8cd e000 	str.w	lr, [sp]
 800ce88:	f004 fdf4 	bl	8011a74 <lv_vpx>
    for(i = 0; i < length; i++) {
 800ce8c:	fa0f f38a 	sxth.w	r3, sl
 800ce90:	4599      	cmp	r9, r3
 800ce92:	dce9      	bgt.n	800ce68 <lv_draw_aa_ver_seg+0xb4>
}
 800ce94:	b005      	add	sp, #20
 800ce96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        length = -length;
 800ce9a:	f1c9 0900 	rsb	r9, r9, #0
        aa_inv = true;
 800ce9e:	2301      	movs	r3, #1
        length = -length;
 800cea0:	fa0f f989 	sxth.w	r9, r9
 800cea4:	e793      	b.n	800cdce <lv_draw_aa_ver_seg+0x1a>
        return ((px_id * 2 + 1) * base_opa) / (2 * seg);
 800cea6:	f04f 0a00 	mov.w	sl, #0
    else if(seg < 8) return (uint32_t)((uint32_t)seg_map[seg - 1][px_id] * base_opa) >> 8;
 800ceaa:	f852 b021 	ldr.w	fp, [r2, r1, lsl #2]
 800ceae:	f81b e00a 	ldrb.w	lr, [fp, sl]
        px_fp(x, y + i, mask, color, px_opa);
 800ceb2:	eb04 010a 	add.w	r1, r4, sl
 800ceb6:	f10a 0a01 	add.w	sl, sl, #1
 800ceba:	4643      	mov	r3, r8
    else if(seg < 8) return (uint32_t)((uint32_t)seg_map[seg - 1][px_id] * base_opa) >> 8;
 800cebc:	fb1e fe05 	smulbb	lr, lr, r5
        px_fp(x, y + i, mask, color, px_opa);
 800cec0:	b209      	sxth	r1, r1
 800cec2:	463a      	mov	r2, r7
 800cec4:	4630      	mov	r0, r6
        if(aa_inv) px_opa = opa - px_opa;
 800cec6:	eba5 2e1e 	sub.w	lr, r5, lr, lsr #8
        px_fp(x, y + i, mask, color, px_opa);
 800ceca:	fa5f fe8e 	uxtb.w	lr, lr
 800cece:	f8cd e000 	str.w	lr, [sp]
 800ced2:	f004 fdcf 	bl	8011a74 <lv_vpx>
    for(i = 0; i < length; i++) {
 800ced6:	fa0f f38a 	sxth.w	r3, sl
 800ceda:	4599      	cmp	r9, r3
 800cedc:	dce7      	bgt.n	800ceae <lv_draw_aa_ver_seg+0xfa>
}
 800cede:	b005      	add	sp, #20
 800cee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cee4:	0808b5b4 	.word	0x0808b5b4

0800cee8 <lv_draw_aa_hor_seg>:
 * @param mask draw only in this area
 * @param color color of pixels
 * @param opa maximum opacity
 */
void lv_draw_aa_hor_seg(lv_coord_t x, lv_coord_t y, lv_coord_t length, const lv_area_t * mask, lv_color_t color, lv_opa_t opa)
{
 800cee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bool aa_inv = false;
    if(length < 0) {
 800ceec:	f1b2 0900 	subs.w	r9, r2, #0
{
 800cef0:	b085      	sub	sp, #20
 800cef2:	460e      	mov	r6, r1
 800cef4:	461f      	mov	r7, r3
 800cef6:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 800cefa:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
    if(length < 0) {
 800cefe:	db66      	blt.n	800cfce <lv_draw_aa_hor_seg+0xe6>
    bool aa_inv = false;
 800cf00:	2300      	movs	r3, #0
        aa_inv = true;
        length = -length;
    }

    lv_coord_t i;
    for(i = 0; i < length; i++) {
 800cf02:	f1b9 0f00 	cmp.w	r9, #0
 800cf06:	dd20      	ble.n	800cf4a <lv_draw_aa_hor_seg+0x62>
 800cf08:	f1b9 0f07 	cmp.w	r9, #7
 800cf0c:	b284      	uxth	r4, r0
        return ((px_id * 2 + 1) * base_opa) / (2 * seg);
 800cf0e:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800cf12:	dd3c      	ble.n	800cf8e <lv_draw_aa_hor_seg+0xa6>
 800cf14:	b9e3      	cbnz	r3, 800cf50 <lv_draw_aa_hor_seg+0x68>
 800cf16:	eb04 0309 	add.w	r3, r4, r9
 800cf1a:	f04f 0b02 	mov.w	fp, #2
 800cf1e:	46a9      	mov	r9, r5
 800cf20:	b29b      	uxth	r3, r3
 800cf22:	9303      	str	r3, [sp, #12]
        lv_opa_t px_opa = lv_draw_aa_get_opa(length, i, opa);
        if(aa_inv) px_opa = opa - px_opa;
        px_fp(x + i, y, mask, color, px_opa);
 800cf24:	b220      	sxth	r0, r4
 800cf26:	3401      	adds	r4, #1
 800cf28:	4643      	mov	r3, r8
 800cf2a:	463a      	mov	r2, r7
 800cf2c:	4631      	mov	r1, r6
 800cf2e:	b2a4      	uxth	r4, r4
        return ((px_id * 2 + 1) * base_opa) / (2 * seg);
 800cf30:	fb99 fefa 	sdiv	lr, r9, sl
 800cf34:	fb1b 9905 	smlabb	r9, fp, r5, r9
        px_fp(x + i, y, mask, color, px_opa);
 800cf38:	fa5f fe8e 	uxtb.w	lr, lr
 800cf3c:	f8cd e000 	str.w	lr, [sp]
 800cf40:	f004 fd98 	bl	8011a74 <lv_vpx>
    for(i = 0; i < length; i++) {
 800cf44:	9b03      	ldr	r3, [sp, #12]
 800cf46:	429c      	cmp	r4, r3
 800cf48:	d1ec      	bne.n	800cf24 <lv_draw_aa_hor_seg+0x3c>
    }
}
 800cf4a:	b005      	add	sp, #20
 800cf4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf50:	eb04 0309 	add.w	r3, r4, r9
 800cf54:	f04f 0b02 	mov.w	fp, #2
 800cf58:	46a9      	mov	r9, r5
 800cf5a:	b29b      	uxth	r3, r3
 800cf5c:	9303      	str	r3, [sp, #12]
        px_fp(x + i, y, mask, color, px_opa);
 800cf5e:	b220      	sxth	r0, r4
 800cf60:	3401      	adds	r4, #1
 800cf62:	4643      	mov	r3, r8
 800cf64:	463a      	mov	r2, r7
 800cf66:	4631      	mov	r1, r6
 800cf68:	b2a4      	uxth	r4, r4
        return ((px_id * 2 + 1) * base_opa) / (2 * seg);
 800cf6a:	fb99 fefa 	sdiv	lr, r9, sl
 800cf6e:	fb1b 9905 	smlabb	r9, fp, r5, r9
        if(aa_inv) px_opa = opa - px_opa;
 800cf72:	eba5 0e0e 	sub.w	lr, r5, lr
        px_fp(x + i, y, mask, color, px_opa);
 800cf76:	fa5f fe8e 	uxtb.w	lr, lr
 800cf7a:	f8cd e000 	str.w	lr, [sp]
 800cf7e:	f004 fd79 	bl	8011a74 <lv_vpx>
    for(i = 0; i < length; i++) {
 800cf82:	9b03      	ldr	r3, [sp, #12]
 800cf84:	429c      	cmp	r4, r3
 800cf86:	d1ea      	bne.n	800cf5e <lv_draw_aa_hor_seg+0x76>
}
 800cf88:	b005      	add	sp, #20
 800cf8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf8e:	4a22      	ldr	r2, [pc, #136]	; (800d018 <lv_draw_aa_hor_seg+0x130>)
 800cf90:	f109 31ff 	add.w	r1, r9, #4294967295
 800cf94:	bb0b      	cbnz	r3, 800cfda <lv_draw_aa_hor_seg+0xf2>
        return ((px_id * 2 + 1) * base_opa) / (2 * seg);
 800cf96:	469a      	mov	sl, r3
    else if(seg < 8) return (uint32_t)((uint32_t)seg_map[seg - 1][px_id] * base_opa) >> 8;
 800cf98:	f852 b021 	ldr.w	fp, [r2, r1, lsl #2]
 800cf9c:	f81b e00a 	ldrb.w	lr, [fp, sl]
        px_fp(x + i, y, mask, color, px_opa);
 800cfa0:	eb04 000a 	add.w	r0, r4, sl
 800cfa4:	f10a 0a01 	add.w	sl, sl, #1
 800cfa8:	4643      	mov	r3, r8
    else if(seg < 8) return (uint32_t)((uint32_t)seg_map[seg - 1][px_id] * base_opa) >> 8;
 800cfaa:	fb1e fe05 	smulbb	lr, lr, r5
        px_fp(x + i, y, mask, color, px_opa);
 800cfae:	b200      	sxth	r0, r0
 800cfb0:	463a      	mov	r2, r7
 800cfb2:	4631      	mov	r1, r6
 800cfb4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 800cfb8:	f8cd e000 	str.w	lr, [sp]
 800cfbc:	f004 fd5a 	bl	8011a74 <lv_vpx>
    for(i = 0; i < length; i++) {
 800cfc0:	fa0f f38a 	sxth.w	r3, sl
 800cfc4:	4599      	cmp	r9, r3
 800cfc6:	dce9      	bgt.n	800cf9c <lv_draw_aa_hor_seg+0xb4>
}
 800cfc8:	b005      	add	sp, #20
 800cfca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        length = -length;
 800cfce:	f1c9 0900 	rsb	r9, r9, #0
        aa_inv = true;
 800cfd2:	2301      	movs	r3, #1
        length = -length;
 800cfd4:	fa0f f989 	sxth.w	r9, r9
 800cfd8:	e793      	b.n	800cf02 <lv_draw_aa_hor_seg+0x1a>
        return ((px_id * 2 + 1) * base_opa) / (2 * seg);
 800cfda:	f04f 0a00 	mov.w	sl, #0
    else if(seg < 8) return (uint32_t)((uint32_t)seg_map[seg - 1][px_id] * base_opa) >> 8;
 800cfde:	f852 b021 	ldr.w	fp, [r2, r1, lsl #2]
 800cfe2:	f81b e00a 	ldrb.w	lr, [fp, sl]
        px_fp(x + i, y, mask, color, px_opa);
 800cfe6:	eb04 000a 	add.w	r0, r4, sl
 800cfea:	f10a 0a01 	add.w	sl, sl, #1
 800cfee:	4643      	mov	r3, r8
    else if(seg < 8) return (uint32_t)((uint32_t)seg_map[seg - 1][px_id] * base_opa) >> 8;
 800cff0:	fb1e fe05 	smulbb	lr, lr, r5
        px_fp(x + i, y, mask, color, px_opa);
 800cff4:	b200      	sxth	r0, r0
 800cff6:	463a      	mov	r2, r7
 800cff8:	4631      	mov	r1, r6
        if(aa_inv) px_opa = opa - px_opa;
 800cffa:	eba5 2e1e 	sub.w	lr, r5, lr, lsr #8
        px_fp(x + i, y, mask, color, px_opa);
 800cffe:	fa5f fe8e 	uxtb.w	lr, lr
 800d002:	f8cd e000 	str.w	lr, [sp]
 800d006:	f004 fd35 	bl	8011a74 <lv_vpx>
    for(i = 0; i < length; i++) {
 800d00a:	fa0f f38a 	sxth.w	r3, sl
 800d00e:	4599      	cmp	r9, r3
 800d010:	dce7      	bgt.n	800cfe2 <lv_draw_aa_hor_seg+0xfa>
}
 800d012:	b005      	add	sp, #20
 800d014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d018:	0808b5b4 	.word	0x0808b5b4

0800d01c <lv_img_built_in_decoder_line_alpha>:
        decoder_src = NULL;
    }
}

static lv_res_t lv_img_built_in_decoder_line_alpha(lv_coord_t x, lv_coord_t y, lv_coord_t len, uint8_t * buf)
{
 800d01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d020:	b089      	sub	sp, #36	; 0x24

#if LV_IMG_CF_ALPHA
    const lv_opa_t alpha1_opa_table[2] =  {0, 255};                   /*Opacity mapping with bpp = 1 (Just for compatibility)*/
    const lv_opa_t alpha2_opa_table[4] =  {0, 85, 170, 255};          /*Opacity mapping with bpp = 2*/
    const lv_opa_t alpha4_opa_table[16] = {0,   17,  34,  51,         /*Opacity mapping with bpp = 4*/
 800d022:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 800d1e4 <lv_img_built_in_decoder_line_alpha+0x1c8>
{
 800d026:	4616      	mov	r6, r2
 800d028:	4686      	mov	lr, r0
 800d02a:	af00      	add	r7, sp, #0
 800d02c:	468c      	mov	ip, r1
 800d02e:	461d      	mov	r5, r3
    const lv_opa_t alpha4_opa_table[16] = {0,   17,  34,  51,         /*Opacity mapping with bpp = 4*/
 800d030:	f107 0a10 	add.w	sl, r7, #16
                                           136, 153, 170, 187,
                                           204, 221, 238, 255
                                          };

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = decoder_style->image.color;
 800d034:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d1e8 <lv_img_built_in_decoder_line_alpha+0x1cc>
    const lv_opa_t alpha4_opa_table[16] = {0,   17,  34,  51,         /*Opacity mapping with bpp = 4*/
 800d038:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 800d03c:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
    const lv_opa_t alpha1_opa_table[2] =  {0, 255};                   /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800d040:	2100      	movs	r1, #0
    lv_color_t bg_color = decoder_style->image.color;
 800d042:	f8d8 4000 	ldr.w	r4, [r8]
    const lv_opa_t alpha1_opa_table[2] =  {0, 255};                   /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800d046:	22ff      	movs	r2, #255	; 0xff
    const lv_opa_t alpha2_opa_table[4] =  {0, 85, 170, 255};          /*Opacity mapping with bpp = 2*/
 800d048:	4b64      	ldr	r3, [pc, #400]	; (800d1dc <lv_img_built_in_decoder_line_alpha+0x1c0>)
    lv_coord_t i;
    for(i = 0; i < len; i++) {
 800d04a:	428e      	cmp	r6, r1
    lv_color_t bg_color = decoder_style->image.color;
 800d04c:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
    const lv_opa_t alpha1_opa_table[2] =  {0, 255};                   /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800d050:	7239      	strb	r1, [r7, #8]
 800d052:	727a      	strb	r2, [r7, #9]
    const lv_opa_t alpha2_opa_table[4] =  {0, 85, 170, 255};          /*Opacity mapping with bpp = 2*/
 800d054:	60fb      	str	r3, [r7, #12]
    for(i = 0; i < len; i++) {
 800d056:	dd08      	ble.n	800d06a <lv_img_built_in_decoder_line_alpha+0x4e>
 800d058:	1e72      	subs	r2, r6, #1
 800d05a:	1f2b      	subs	r3, r5, #4
 800d05c:	b292      	uxth	r2, r2
 800d05e:	eb05 0282 	add.w	r2, r5, r2, lsl #2
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
#elif LV_COLOR_DEPTH == 32
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = bg_color.full;
 800d062:	f843 9f04 	str.w	r9, [r3, #4]!
    for(i = 0; i < len; i++) {
 800d066:	429a      	cmp	r2, r3
 800d068:	d1fb      	bne.n	800d062 <lv_img_built_in_decoder_line_alpha+0x46>
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
    uint8_t px_size = lv_img_color_format_get_px_size(decoder_header.cf);
 800d06a:	f898 3004 	ldrb.w	r3, [r8, #4]
 800d06e:	f003 031f 	and.w	r3, r3, #31
 800d072:	1f1a      	subs	r2, r3, #4
 800d074:	b2d2      	uxtb	r2, r2
 800d076:	2a0a      	cmp	r2, #10
 800d078:	d90a      	bls.n	800d090 <lv_img_built_in_decoder_line_alpha+0x74>
 800d07a:	f04f 0900 	mov.w	r9, #0
 800d07e:	46cb      	mov	fp, r9
    uint16_t mask = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/

    lv_coord_t w = 0;
    uint32_t ofs = 0;
    int8_t pos = 0;
    switch(decoder_header.cf) {
 800d080:	3b0b      	subs	r3, #11
 800d082:	2b03      	cmp	r3, #3
 800d084:	f200 80a5 	bhi.w	800d1d2 <lv_img_built_in_decoder_line_alpha+0x1b6>
 800d088:	e8df f003 	tbb	[pc, r3]
 800d08c:	0f556980 	.word	0x0f556980
 800d090:	eb0b 0402 	add.w	r4, fp, r2
 800d094:	f04f 0901 	mov.w	r9, #1
 800d098:	f894 b010 	ldrb.w	fp, [r4, #16]
 800d09c:	fa09 f90b 	lsl.w	r9, r9, fp
 800d0a0:	f109 39ff 	add.w	r9, r9, #4294967295
 800d0a4:	fa1f f989 	uxth.w	r9, r9
 800d0a8:	e7ea      	b.n	800d080 <lv_img_built_in_decoder_line_alpha+0x64>
            ofs += w * y + (x >> 1);      /*First pixel*/
            pos = 4 - ((x & 0x1) * 4);
            opa_table = alpha4_opa_table;
            break;
        case LV_IMG_CF_ALPHA_8BIT:
            w = decoder_header.w;              /*E.g. x = 7 -> w = 7 (bytes)*/
 800d0aa:	f8d8 2004 	ldr.w	r2, [r8, #4]
            ofs += w * y + x;      /*First pixel*/
            pos = 0;
 800d0ae:	2400      	movs	r4, #0
            w = decoder_header.w;              /*E.g. x = 7 -> w = 7 (bytes)*/
 800d0b0:	f3c2 228a 	ubfx	r2, r2, #10, #11
    const lv_opa_t * opa_table = NULL;
 800d0b4:	46a2      	mov	sl, r4
            ofs += w * y + x;      /*First pixel*/
 800d0b6:	fb1c ec02 	smlabb	ip, ip, r2, lr
 800d0ba:	f3c2 020a 	ubfx	r2, r2, #0, #11
            break;
    }

#if USE_LV_FILESYSTEM
# if LV_COMPILER_VLA_SUPPORTED
    uint8_t fs_buf[w];
 800d0be:	1dd3      	adds	r3, r2, #7
# else
    uint8_t fs_buf[LV_HOR_RES];
# endif
#endif
    const uint8_t * data_tmp = NULL;
    if(decoder_src_type == LV_IMG_SRC_VARIABLE) {
 800d0c0:	f898 1008 	ldrb.w	r1, [r8, #8]
    uint8_t fs_buf[w];
 800d0c4:	f023 0307 	bic.w	r3, r3, #7
 800d0c8:	ebad 0d03 	sub.w	sp, sp, r3
    if(decoder_src_type == LV_IMG_SRC_VARIABLE) {
 800d0cc:	2900      	cmp	r1, #0
 800d0ce:	d172      	bne.n	800d1b6 <lv_img_built_in_decoder_line_alpha+0x19a>
        const lv_img_dsc_t * img_dsc = decoder_src;
        data_tmp = img_dsc->data + ofs;
 800d0d0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d0d4:	6899      	ldr	r1, [r3, #8]
 800d0d6:	4461      	add	r1, ip
    }


    uint8_t byte_act = 0;
    uint8_t val_act;
    for(i = 0; i < len; i ++) {
 800d0d8:	2e00      	cmp	r6, #0
 800d0da:	dd27      	ble.n	800d12c <lv_img_built_in_decoder_line_alpha+0x110>
 800d0dc:	1e70      	subs	r0, r6, #1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            decoder_header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
 800d0de:	f1cb 0e08 	rsb	lr, fp, #8
 800d0e2:	b280      	uxth	r0, r0
 800d0e4:	fa4f fe8e 	sxtb.w	lr, lr
 800d0e8:	3001      	adds	r0, #1
 800d0ea:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800d0ee:	e001      	b.n	800d0f4 <lv_img_built_in_decoder_line_alpha+0xd8>
    for(i = 0; i < len; i ++) {
 800d0f0:	4285      	cmp	r5, r0
 800d0f2:	d01b      	beq.n	800d12c <lv_img_built_in_decoder_line_alpha+0x110>
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 800d0f4:	780a      	ldrb	r2, [r1, #0]
 800d0f6:	fa09 f304 	lsl.w	r3, r9, r4
            decoder_header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 800d0fa:	f898 6004 	ldrb.w	r6, [r8, #4]
 800d0fe:	3504      	adds	r5, #4
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 800d100:	4013      	ands	r3, r2
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800d102:	f006 021f 	and.w	r2, r6, #31
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 800d106:	4123      	asrs	r3, r4
        pos -= px_size;
 800d108:	eba4 040b 	sub.w	r4, r4, fp
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800d10c:	2a0e      	cmp	r2, #14
        pos -= px_size;
 800d10e:	b264      	sxtb	r4, r4
            decoder_header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 800d110:	b2da      	uxtb	r2, r3
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 800d112:	bf0c      	ite	eq
 800d114:	4613      	moveq	r3, r2
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800d116:	f81a 3002 	ldrbne.w	r3, [sl, r2]
        if(pos < 0) {
 800d11a:	2c00      	cmp	r4, #0
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800d11c:	f805 3c01 	strb.w	r3, [r5, #-1]
        if(pos < 0) {
 800d120:	dae6      	bge.n	800d0f0 <lv_img_built_in_decoder_line_alpha+0xd4>
    for(i = 0; i < len; i ++) {
 800d122:	4285      	cmp	r5, r0
            data_tmp++;
 800d124:	f101 0101 	add.w	r1, r1, #1
            pos = 8 - px_size;
 800d128:	4674      	mov	r4, lr
    for(i = 0; i < len; i ++) {
 800d12a:	d1e3      	bne.n	800d0f4 <lv_img_built_in_decoder_line_alpha+0xd8>

#else
    LV_LOG_WARN("Image built-in alpha line reader failed because LV_IMG_CF_ALPHA is 0 in lv_conf.h");
    return LV_RES_INV;
#endif
}
 800d12c:	2001      	movs	r0, #1
 800d12e:	3724      	adds	r7, #36	; 0x24
 800d130:	46bd      	mov	sp, r7
 800d132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            w = (decoder_header.w >> 1);       /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800d136:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d13a:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800d13e:	1059      	asrs	r1, r3, #1
            if(decoder_header.w & 0x1) w++;
 800d140:	07db      	lsls	r3, r3, #31
            w = (decoder_header.w >> 1);       /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800d142:	bf54      	ite	pl
 800d144:	b209      	sxthpl	r1, r1
            if(decoder_header.w & 0x1) w++;
 800d146:	3101      	addmi	r1, #1
 800d148:	f01e 0f01 	tst.w	lr, #1
            ofs += w * y + (x >> 1);      /*First pixel*/
 800d14c:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 800d150:	460a      	mov	r2, r1
 800d152:	fb01 ec0c 	mla	ip, r1, ip, lr
 800d156:	bf14      	ite	ne
 800d158:	2400      	movne	r4, #0
 800d15a:	2404      	moveq	r4, #4
 800d15c:	e7af      	b.n	800d0be <lv_img_built_in_decoder_line_alpha+0xa2>
            w = (decoder_header.w >> 2);       /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800d15e:	f8d8 3004 	ldr.w	r3, [r8, #4]
            pos = 6 - ((x & 0x3) * 2);
 800d162:	ea6f 040e 	mvn.w	r4, lr
            ofs += w * y + (x >> 2);      /*First pixel*/
 800d166:	ea4f 0eae 	mov.w	lr, lr, asr #2
            opa_table = alpha2_opa_table;
 800d16a:	f107 0a0c 	add.w	sl, r7, #12
            w = (decoder_header.w >> 2);       /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800d16e:	f3c3 238a 	ubfx	r3, r3, #10, #11
            pos = 6 - ((x & 0x3) * 2);
 800d172:	f004 0403 	and.w	r4, r4, #3
            w = (decoder_header.w >> 2);       /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800d176:	1099      	asrs	r1, r3, #2
            if(decoder_header.w & 0x3) w++;
 800d178:	079a      	lsls	r2, r3, #30
            pos = 6 - ((x & 0x3) * 2);
 800d17a:	ea4f 0444 	mov.w	r4, r4, lsl #1
            w = (decoder_header.w >> 2);       /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800d17e:	bf0c      	ite	eq
 800d180:	b209      	sxtheq	r1, r1
            if(decoder_header.w & 0x3) w++;
 800d182:	3101      	addne	r1, #1
 800d184:	460a      	mov	r2, r1
            ofs += w * y + (x >> 2);      /*First pixel*/
 800d186:	fb01 ec0c 	mla	ip, r1, ip, lr
            break;
 800d18a:	e798      	b.n	800d0be <lv_img_built_in_decoder_line_alpha+0xa2>
            w = (decoder_header.w >> 3);        /*E.g. w = 20 -> w = 2 + 1*/
 800d18c:	f8d8 3004 	ldr.w	r3, [r8, #4]
            pos = 7 - (x & 0x7);
 800d190:	ea6f 040e 	mvn.w	r4, lr
            opa_table = alpha1_opa_table;
 800d194:	f107 0a08 	add.w	sl, r7, #8
            w = (decoder_header.w >> 3);        /*E.g. w = 20 -> w = 2 + 1*/
 800d198:	f3c3 238a 	ubfx	r3, r3, #10, #11
            pos = 7 - (x & 0x7);
 800d19c:	f004 0407 	and.w	r4, r4, #7
            w = (decoder_header.w >> 3);        /*E.g. w = 20 -> w = 2 + 1*/
 800d1a0:	10d9      	asrs	r1, r3, #3
            if(decoder_header.w & 0x7) w++;
 800d1a2:	0758      	lsls	r0, r3, #29
            ofs += w * y + (x >> 3);      /*First pixel*/
 800d1a4:	ea4f 03ee 	mov.w	r3, lr, asr #3
            w = (decoder_header.w >> 3);        /*E.g. w = 20 -> w = 2 + 1*/
 800d1a8:	bf0c      	ite	eq
 800d1aa:	b209      	sxtheq	r1, r1
            if(decoder_header.w & 0x7) w++;
 800d1ac:	3101      	addne	r1, #1
 800d1ae:	460a      	mov	r2, r1
            ofs += w * y + (x >> 3);      /*First pixel*/
 800d1b0:	fb01 3c0c 	mla	ip, r1, ip, r3
            break;
 800d1b4:	e783      	b.n	800d0be <lv_img_built_in_decoder_line_alpha+0xa2>
        lv_fs_seek(&decoder_file, ofs + 4);     /*+4 to skip the header*/
 800d1b6:	f10c 0104 	add.w	r1, ip, #4
 800d1ba:	4809      	ldr	r0, [pc, #36]	; (800d1e0 <lv_img_built_in_decoder_line_alpha+0x1c4>)
 800d1bc:	607a      	str	r2, [r7, #4]
 800d1be:	f005 fe85 	bl	8012ecc <lv_fs_seek>
        lv_fs_read(&decoder_file, fs_buf, w, NULL);
 800d1c2:	4669      	mov	r1, sp
 800d1c4:	687a      	ldr	r2, [r7, #4]
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	4805      	ldr	r0, [pc, #20]	; (800d1e0 <lv_img_built_in_decoder_line_alpha+0x1c4>)
 800d1ca:	f005 fe63 	bl	8012e94 <lv_fs_read>
        data_tmp = fs_buf;
 800d1ce:	4669      	mov	r1, sp
 800d1d0:	e782      	b.n	800d0d8 <lv_img_built_in_decoder_line_alpha+0xbc>
    switch(decoder_header.cf) {
 800d1d2:	2200      	movs	r2, #0
    int8_t pos = 0;
 800d1d4:	4614      	mov	r4, r2
    uint32_t ofs = 0;
 800d1d6:	4694      	mov	ip, r2
    const lv_opa_t * opa_table = NULL;
 800d1d8:	4692      	mov	sl, r2
 800d1da:	e770      	b.n	800d0be <lv_img_built_in_decoder_line_alpha+0xa2>
 800d1dc:	ffaa5500 	.word	0xffaa5500
 800d1e0:	2000da18 	.word	0x2000da18
 800d1e4:	0808b614 	.word	0x0808b614
 800d1e8:	2000da08 	.word	0x2000da08

0800d1ec <lv_img_built_in_decoder_line_indexed>:

static lv_res_t lv_img_built_in_decoder_line_indexed(lv_coord_t x, lv_coord_t y, lv_coord_t len, uint8_t * buf)
{
 800d1ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

#if LV_IMG_CF_INDEXED
    uint8_t px_size = lv_img_color_format_get_px_size(decoder_header.cf);
 800d1f0:	4e57      	ldr	r6, [pc, #348]	; (800d350 <lv_img_built_in_decoder_line_indexed+0x164>)
{
 800d1f2:	4692      	mov	sl, r2
 800d1f4:	4699      	mov	r9, r3
 800d1f6:	af00      	add	r7, sp, #0
    uint8_t px_size = lv_img_color_format_get_px_size(decoder_header.cf);
 800d1f8:	7932      	ldrb	r2, [r6, #4]
 800d1fa:	f002 031f 	and.w	r3, r2, #31
 800d1fe:	1f1a      	subs	r2, r3, #4
 800d200:	b2d2      	uxtb	r2, r2
 800d202:	2a0a      	cmp	r2, #10
 800d204:	d810      	bhi.n	800d228 <lv_img_built_in_decoder_line_indexed+0x3c>
 800d206:	4c53      	ldr	r4, [pc, #332]	; (800d354 <lv_img_built_in_decoder_line_indexed+0x168>)
 800d208:	2501      	movs	r5, #1
 800d20a:	4422      	add	r2, r4
 800d20c:	f892 8010 	ldrb.w	r8, [r2, #16]
 800d210:	fa05 f508 	lsl.w	r5, r5, r8
 800d214:	3d01      	subs	r5, #1
 800d216:	b2ad      	uxth	r5, r5
    uint16_t mask = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/

    lv_coord_t w = 0;
    int8_t pos = 0;
    uint32_t ofs = 0;
    switch(decoder_header.cf) {
 800d218:	3b07      	subs	r3, #7
 800d21a:	2b03      	cmp	r3, #3
 800d21c:	f200 8092 	bhi.w	800d344 <lv_img_built_in_decoder_line_indexed+0x158>
 800d220:	e8df f003 	tbb	[pc, r3]
 800d224:	05495d71 	.word	0x05495d71
    uint8_t px_size = lv_img_color_format_get_px_size(decoder_header.cf);
 800d228:	2500      	movs	r5, #0
 800d22a:	46a8      	mov	r8, r5
 800d22c:	e7f4      	b.n	800d218 <lv_img_built_in_decoder_line_indexed+0x2c>
            ofs += w * y + (x >> 1);      /*First pixel*/
            ofs += 64;                    /*Skip the palette*/
            pos = 4 - ((x & 0x1) * 4);
            break;
        case LV_IMG_CF_INDEXED_8BIT:
            w = decoder_header.w;              /*E.g. x = 7 -> w = 7 (bytes)*/
 800d22e:	6872      	ldr	r2, [r6, #4]
            ofs += w * y + x;              /*First pixel*/
            ofs += 1024;                    /*Skip the palette*/
            pos = 0;
 800d230:	2400      	movs	r4, #0
            w = decoder_header.w;              /*E.g. x = 7 -> w = 7 (bytes)*/
 800d232:	f3c2 2b8a 	ubfx	fp, r2, #10, #11
            ofs += w * y + x;              /*First pixel*/
 800d236:	fb11 010b 	smlabb	r1, r1, fp, r0
 800d23a:	f3cb 0b0a 	ubfx	fp, fp, #0, #11
            ofs += 1024;                    /*Skip the palette*/
 800d23e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
            break;
    }

#if USE_LV_FILESYSTEM
# if LV_COMPILER_VLA_SUPPORTED
    uint8_t fs_buf[w];
 800d242:	f10b 0307 	add.w	r3, fp, #7
# else
    uint8_t fs_buf[LV_HOR_RES];
# endif
#endif
    const uint8_t * data_tmp = NULL;
    if(decoder_src_type == LV_IMG_SRC_VARIABLE) {
 800d246:	7a32      	ldrb	r2, [r6, #8]
    uint8_t fs_buf[w];
 800d248:	f023 0307 	bic.w	r3, r3, #7
 800d24c:	ebad 0d03 	sub.w	sp, sp, r3
    if(decoder_src_type == LV_IMG_SRC_VARIABLE) {
 800d250:	2a00      	cmp	r2, #0
 800d252:	d16b      	bne.n	800d32c <lv_img_built_in_decoder_line_indexed+0x140>
        const lv_img_dsc_t * img_dsc = decoder_src;
        data_tmp = img_dsc->data + ofs;
 800d254:	68f3      	ldr	r3, [r6, #12]
 800d256:	689b      	ldr	r3, [r3, #8]
 800d258:	4419      	add	r1, r3

    uint8_t byte_act = 0;
    uint8_t val_act;
    lv_coord_t i;
    lv_color_t * cbuf = (lv_color_t *) buf;
    for(i = 0; i < len; i ++) {
 800d25a:	f1ba 0f00 	cmp.w	sl, #0
 800d25e:	dd26      	ble.n	800d2ae <lv_img_built_in_decoder_line_indexed+0xc2>
 800d260:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d264:	f1c8 0308 	rsb	r3, r8, #8
 800d268:	f1a9 0004 	sub.w	r0, r9, #4
 800d26c:	fa1f fa8a 	uxth.w	sl, sl
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
        cbuf[i] = decoder_index_map[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
 800d270:	b25b      	sxtb	r3, r3
 800d272:	eb09 098a 	add.w	r9, r9, sl, lsl #2
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 800d276:	468c      	mov	ip, r1
 800d278:	fa05 fa04 	lsl.w	sl, r5, r4
        pos -= px_size;
 800d27c:	eba4 0e08 	sub.w	lr, r4, r8
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 800d280:	f81c 2b01 	ldrb.w	r2, [ip], #1
        pos -= px_size;
 800d284:	fa4f fe8e 	sxtb.w	lr, lr
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 800d288:	ea02 020a 	and.w	r2, r2, sl
 800d28c:	f1be 0f00 	cmp.w	lr, #0
 800d290:	fa42 f204 	asr.w	r2, r2, r4
 800d294:	bfb4      	ite	lt
 800d296:	4661      	movlt	r1, ip
 800d298:	4674      	movge	r4, lr
        cbuf[i] = decoder_index_map[val_act];
 800d29a:	b2d2      	uxtb	r2, r2
 800d29c:	bfb8      	it	lt
 800d29e:	461c      	movlt	r4, r3
 800d2a0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800d2a4:	6992      	ldr	r2, [r2, #24]
 800d2a6:	f840 2f04 	str.w	r2, [r0, #4]!
    for(i = 0; i < len; i ++) {
 800d2aa:	4548      	cmp	r0, r9
 800d2ac:	d1e3      	bne.n	800d276 <lv_img_built_in_decoder_line_indexed+0x8a>
    return LV_RES_OK;
#else
    LV_LOG_WARN("Image built-in indexed line reader failed because LV_IMG_CF_INDEXED is 0 in lv_conf.h");
    return LV_RES_INV;
#endif
}
 800d2ae:	2001      	movs	r0, #1
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            w = (decoder_header.w >> 1);       /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800d2b6:	6872      	ldr	r2, [r6, #4]
 800d2b8:	f3c2 228a 	ubfx	r2, r2, #10, #11
 800d2bc:	1053      	asrs	r3, r2, #1
            if(decoder_header.w & 0x1) w++;
 800d2be:	07d2      	lsls	r2, r2, #31
            ofs += w * y + (x >> 1);      /*First pixel*/
 800d2c0:	ea4f 0260 	mov.w	r2, r0, asr #1
            w = (decoder_header.w >> 1);       /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800d2c4:	bf54      	ite	pl
 800d2c6:	b21b      	sxthpl	r3, r3
            if(decoder_header.w & 0x1) w++;
 800d2c8:	3301      	addmi	r3, #1
 800d2ca:	f010 0f01 	tst.w	r0, #1
            ofs += w * y + (x >> 1);      /*First pixel*/
 800d2ce:	fb03 2101 	mla	r1, r3, r1, r2
 800d2d2:	469b      	mov	fp, r3
 800d2d4:	bf14      	ite	ne
 800d2d6:	2400      	movne	r4, #0
 800d2d8:	2404      	moveq	r4, #4
            ofs += 64;                    /*Skip the palette*/
 800d2da:	3140      	adds	r1, #64	; 0x40
 800d2dc:	e7b1      	b.n	800d242 <lv_img_built_in_decoder_line_indexed+0x56>
            w = (decoder_header.w >> 2);       /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800d2de:	6872      	ldr	r2, [r6, #4]
 800d2e0:	f3c2 228a 	ubfx	r2, r2, #10, #11
 800d2e4:	1093      	asrs	r3, r2, #2
            if(decoder_header.w & 0x3) w++;
 800d2e6:	0794      	lsls	r4, r2, #30
            ofs += w * y + (x >> 2);      /*First pixel*/
 800d2e8:	ea4f 02a0 	mov.w	r2, r0, asr #2
            pos = 6 - ((x & 0x3) * 2);
 800d2ec:	ea6f 0400 	mvn.w	r4, r0
            w = (decoder_header.w >> 2);       /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800d2f0:	bf0c      	ite	eq
 800d2f2:	b21b      	sxtheq	r3, r3
            if(decoder_header.w & 0x3) w++;
 800d2f4:	3301      	addne	r3, #1
            pos = 6 - ((x & 0x3) * 2);
 800d2f6:	f004 0403 	and.w	r4, r4, #3
            ofs += w * y + (x >> 2);      /*First pixel*/
 800d2fa:	fb03 2101 	mla	r1, r3, r1, r2
 800d2fe:	469b      	mov	fp, r3
            pos = 6 - ((x & 0x3) * 2);
 800d300:	0064      	lsls	r4, r4, #1
            ofs += 16;                    /*Skip the palette*/
 800d302:	3110      	adds	r1, #16
            break;
 800d304:	e79d      	b.n	800d242 <lv_img_built_in_decoder_line_indexed+0x56>
            w = (decoder_header.w >> 3);       /*E.g. w = 20 -> w = 2 + 1*/
 800d306:	6872      	ldr	r2, [r6, #4]
 800d308:	f3c2 228a 	ubfx	r2, r2, #10, #11
 800d30c:	10d3      	asrs	r3, r2, #3
            if(decoder_header.w & 0x7) w++;
 800d30e:	0752      	lsls	r2, r2, #29
            ofs += w * y + (x >> 3);      /*First pixel*/
 800d310:	ea4f 02e0 	mov.w	r2, r0, asr #3
            pos = 7 - (x & 0x7);
 800d314:	ea6f 0000 	mvn.w	r0, r0
            w = (decoder_header.w >> 3);       /*E.g. w = 20 -> w = 2 + 1*/
 800d318:	bf0c      	ite	eq
 800d31a:	b21b      	sxtheq	r3, r3
            if(decoder_header.w & 0x7) w++;
 800d31c:	3301      	addne	r3, #1
            pos = 7 - (x & 0x7);
 800d31e:	f000 0407 	and.w	r4, r0, #7
            ofs += w * y + (x >> 3);      /*First pixel*/
 800d322:	fb03 2101 	mla	r1, r3, r1, r2
 800d326:	469b      	mov	fp, r3
            ofs += 8;                    /*Skip the palette*/
 800d328:	3108      	adds	r1, #8
            break;
 800d32a:	e78a      	b.n	800d242 <lv_img_built_in_decoder_line_indexed+0x56>
        lv_fs_seek(&decoder_file, ofs + 4);     /*+4 to skip the header*/
 800d32c:	3104      	adds	r1, #4
 800d32e:	480a      	ldr	r0, [pc, #40]	; (800d358 <lv_img_built_in_decoder_line_indexed+0x16c>)
 800d330:	f005 fdcc 	bl	8012ecc <lv_fs_seek>
        lv_fs_read(&decoder_file, fs_buf, w, NULL);
 800d334:	4669      	mov	r1, sp
 800d336:	465a      	mov	r2, fp
 800d338:	2300      	movs	r3, #0
 800d33a:	4807      	ldr	r0, [pc, #28]	; (800d358 <lv_img_built_in_decoder_line_indexed+0x16c>)
 800d33c:	f005 fdaa 	bl	8012e94 <lv_fs_read>
        data_tmp = fs_buf;
 800d340:	4669      	mov	r1, sp
 800d342:	e78a      	b.n	800d25a <lv_img_built_in_decoder_line_indexed+0x6e>
    switch(decoder_header.cf) {
 800d344:	f04f 0b00 	mov.w	fp, #0
    uint32_t ofs = 0;
 800d348:	4659      	mov	r1, fp
    int8_t pos = 0;
 800d34a:	465c      	mov	r4, fp
 800d34c:	e779      	b.n	800d242 <lv_img_built_in_decoder_line_indexed+0x56>
 800d34e:	bf00      	nop
 800d350:	2000da08 	.word	0x2000da08
 800d354:	0808b614 	.word	0x0808b614
 800d358:	2000da18 	.word	0x2000da18

0800d35c <lv_img_decoder_open>:
{
 800d35c:	b5f0      	push	{r4, r5, r6, r7, lr}
    decoder_custom = false;
 800d35e:	4c82      	ldr	r4, [pc, #520]	; (800d568 <lv_img_decoder_open+0x20c>)
 800d360:	2200      	movs	r2, #0
{
 800d362:	f2ad 4d0c 	subw	sp, sp, #1036	; 0x40c
 800d366:	4605      	mov	r5, r0
    if(lv_img_decoder_open_custom) {
 800d368:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
{
 800d36c:	460e      	mov	r6, r1
    decoder_custom = false;
 800d36e:	f884 2418 	strb.w	r2, [r4, #1048]	; 0x418
    if(lv_img_decoder_open_custom) {
 800d372:	b143      	cbz	r3, 800d386 <lv_img_decoder_open+0x2a>
        custom_res = lv_img_decoder_open_custom(src, style);
 800d374:	4798      	blx	r3
        if(custom_res != LV_IMG_DECODER_OPEN_FAIL) {
 800d376:	1c41      	adds	r1, r0, #1
 800d378:	d005      	beq.n	800d386 <lv_img_decoder_open+0x2a>
            decoder_custom = true;  /*Mark that custom decoder function should be used for this img source.*/
 800d37a:	2301      	movs	r3, #1
 800d37c:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
}
 800d380:	f20d 4d0c 	addw	sp, sp, #1036	; 0x40c
 800d384:	bdf0      	pop	{r4, r5, r6, r7, pc}
    decoder_src = src;
 800d386:	60e5      	str	r5, [r4, #12]
    decoder_style = style;
 800d388:	6026      	str	r6, [r4, #0]
    if(src == NULL) return img_src_type;
 800d38a:	2d00      	cmp	r5, #0
 800d38c:	f000 8090 	beq.w	800d4b0 <lv_img_decoder_open+0x154>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 800d390:	782b      	ldrb	r3, [r5, #0]
 800d392:	f1a3 0220 	sub.w	r2, r3, #32
 800d396:	2a5f      	cmp	r2, #95	; 0x5f
 800d398:	d83b      	bhi.n	800d412 <lv_img_decoder_open+0xb6>
        img_src_type = LV_IMG_SRC_FILE;     /*If it's an ASCII character then it's file name*/
 800d39a:	2101      	movs	r1, #1
    header->always_zero = 0;
 800d39c:	7923      	ldrb	r3, [r4, #4]
    if(lv_img_decoder_info_custom) {
 800d39e:	f8d4 2420 	ldr.w	r2, [r4, #1056]	; 0x420
    header->always_zero = 0;
 800d3a2:	f36f 1347 	bfc	r3, #5, #3
    decoder_src_type = lv_img_src_get_type(src);
 800d3a6:	7221      	strb	r1, [r4, #8]
    header->always_zero = 0;
 800d3a8:	7123      	strb	r3, [r4, #4]
    if(lv_img_decoder_info_custom) {
 800d3aa:	b122      	cbz	r2, 800d3b6 <lv_img_decoder_open+0x5a>
        custom_res = lv_img_decoder_info_custom(src, header);
 800d3ac:	496f      	ldr	r1, [pc, #444]	; (800d56c <lv_img_decoder_open+0x210>)
 800d3ae:	4628      	mov	r0, r5
 800d3b0:	4790      	blx	r2
        if(custom_res == LV_RES_OK) return LV_RES_OK;       /*Custom info has supported this source*/
 800d3b2:	2801      	cmp	r0, #1
 800d3b4:	d019      	beq.n	800d3ea <lv_img_decoder_open+0x8e>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 800d3b6:	782b      	ldrb	r3, [r5, #0]
 800d3b8:	f1a3 0220 	sub.w	r2, r3, #32
 800d3bc:	2a5f      	cmp	r2, #95	; 0x5f
 800d3be:	d944      	bls.n	800d44a <lv_img_decoder_open+0xee>
    } else if(u8_p[0] >= 0x80) {
 800d3c0:	061b      	lsls	r3, r3, #24
 800d3c2:	d45a      	bmi.n	800d47a <lv_img_decoder_open+0x11e>
        header->w = ((lv_img_dsc_t *)src)->header.w;
 800d3c4:	682b      	ldr	r3, [r5, #0]
 800d3c6:	6862      	ldr	r2, [r4, #4]
 800d3c8:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800d3cc:	f363 2294 	bfi	r2, r3, #10, #11
 800d3d0:	6062      	str	r2, [r4, #4]
        header->h = ((lv_img_dsc_t *)src)->header.h;
 800d3d2:	886b      	ldrh	r3, [r5, #2]
 800d3d4:	88e1      	ldrh	r1, [r4, #6]
 800d3d6:	f3c3 134a 	ubfx	r3, r3, #5, #11
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 800d3da:	7922      	ldrb	r2, [r4, #4]
        header->h = ((lv_img_dsc_t *)src)->header.h;
 800d3dc:	f363 114f 	bfi	r1, r3, #5, #11
 800d3e0:	80e1      	strh	r1, [r4, #6]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 800d3e2:	782b      	ldrb	r3, [r5, #0]
 800d3e4:	f363 0204 	bfi	r2, r3, #0, #5
 800d3e8:	7122      	strb	r2, [r4, #4]
    if(decoder_src_type == LV_IMG_SRC_FILE) {
 800d3ea:	7a23      	ldrb	r3, [r4, #8]
 800d3ec:	2b01      	cmp	r3, #1
 800d3ee:	f000 8092 	beq.w	800d516 <lv_img_decoder_open+0x1ba>
    lv_img_cf_t cf = decoder_header.cf;
 800d3f2:	7923      	ldrb	r3, [r4, #4]
 800d3f4:	f003 031f 	and.w	r3, r3, #31
            cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800d3f8:	1f1a      	subs	r2, r3, #4
 800d3fa:	b2d2      	uxtb	r2, r2
    if(cf == LV_IMG_CF_TRUE_COLOR ||
 800d3fc:	2a02      	cmp	r2, #2
 800d3fe:	d862      	bhi.n	800d4c6 <lv_img_decoder_open+0x16a>
        if(decoder_src_type == LV_IMG_SRC_VARIABLE) {
 800d400:	7a23      	ldrb	r3, [r4, #8]
 800d402:	2b00      	cmp	r3, #0
 800d404:	f040 8083 	bne.w	800d50e <lv_img_decoder_open+0x1b2>
            return ((lv_img_dsc_t *)decoder_src)->data;
 800d408:	68e3      	ldr	r3, [r4, #12]
 800d40a:	6898      	ldr	r0, [r3, #8]
}
 800d40c:	f20d 4d0c 	addw	sp, sp, #1036	; 0x40c
 800d410:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if(u8_p[0] >= 0x80) {
 800d412:	061a      	lsls	r2, r3, #24
 800d414:	d47d      	bmi.n	800d512 <lv_img_decoder_open+0x1b6>
    decoder_src_type = lv_img_src_get_type(src);
 800d416:	2100      	movs	r1, #0
    header->always_zero = 0;
 800d418:	7922      	ldrb	r2, [r4, #4]
    if(lv_img_decoder_info_custom) {
 800d41a:	f8d4 3420 	ldr.w	r3, [r4, #1056]	; 0x420
    header->always_zero = 0;
 800d41e:	f361 1247 	bfi	r2, r1, #5, #3
    decoder_src_type = lv_img_src_get_type(src);
 800d422:	7221      	strb	r1, [r4, #8]
    header->always_zero = 0;
 800d424:	7122      	strb	r2, [r4, #4]
    if(lv_img_decoder_info_custom) {
 800d426:	2b00      	cmp	r3, #0
 800d428:	d0c5      	beq.n	800d3b6 <lv_img_decoder_open+0x5a>
        custom_res = lv_img_decoder_info_custom(src, header);
 800d42a:	4950      	ldr	r1, [pc, #320]	; (800d56c <lv_img_decoder_open+0x210>)
 800d42c:	4628      	mov	r0, r5
 800d42e:	4798      	blx	r3
        if(custom_res == LV_RES_OK) return LV_RES_OK;       /*Custom info has supported this source*/
 800d430:	2801      	cmp	r0, #1
 800d432:	d0da      	beq.n	800d3ea <lv_img_decoder_open+0x8e>
    if(src == NULL) return img_src_type;
 800d434:	2d00      	cmp	r5, #0
 800d436:	d1be      	bne.n	800d3b6 <lv_img_decoder_open+0x5a>
        decoder_src = NULL;
 800d438:	2200      	movs	r2, #0
        decoder_src_type = LV_IMG_SRC_UNKNOWN;
 800d43a:	2303      	movs	r3, #3
        return LV_IMG_DECODER_OPEN_FAIL;
 800d43c:	f04f 30ff 	mov.w	r0, #4294967295
        decoder_src = NULL;
 800d440:	60e2      	str	r2, [r4, #12]
        decoder_src_type = LV_IMG_SRC_UNKNOWN;
 800d442:	7223      	strb	r3, [r4, #8]
}
 800d444:	f20d 4d0c 	addw	sp, sp, #1036	; 0x40c
 800d448:	bdf0      	pop	{r4, r5, r6, r7, pc}
        res = lv_fs_open(&file, src, LV_FS_MODE_RD);
 800d44a:	2202      	movs	r2, #2
 800d44c:	4629      	mov	r1, r5
 800d44e:	a802      	add	r0, sp, #8
 800d450:	f005 fca8 	bl	8012da4 <lv_fs_open>
        if(res == LV_FS_RES_OK) {
 800d454:	2800      	cmp	r0, #0
 800d456:	d069      	beq.n	800d52c <lv_img_decoder_open+0x1d0>
            header->w = LV_DPI;
 800d458:	6863      	ldr	r3, [r4, #4]
 800d45a:	2064      	movs	r0, #100	; 0x64
 800d45c:	f360 2394 	bfi	r3, r0, #10, #11
            header->h = LV_DPI;
 800d460:	0c19      	lsrs	r1, r3, #16
            header->cf = LV_IMG_CF_UNKOWN;
 800d462:	461a      	mov	r2, r3
            header->w = LV_DPI;
 800d464:	6063      	str	r3, [r4, #4]
            header->h = LV_DPI;
 800d466:	f360 114f 	bfi	r1, r0, #5, #11
            header->cf = LV_IMG_CF_UNKOWN;
 800d46a:	f36f 0204 	bfc	r2, #0, #5
            header->h = LV_DPI;
 800d46e:	80e1      	strh	r1, [r4, #6]
            header->cf = LV_IMG_CF_UNKOWN;
 800d470:	7122      	strb	r2, [r4, #4]
        lv_fs_close(&file);
 800d472:	a802      	add	r0, sp, #8
 800d474:	f005 fcf6 	bl	8012e64 <lv_fs_close>
 800d478:	e7b7      	b.n	800d3ea <lv_img_decoder_open+0x8e>
        header->w = 1;
 800d47a:	6862      	ldr	r2, [r4, #4]
 800d47c:	2601      	movs	r6, #1
        header->cf  = LV_IMG_CF_ALPHA_1BIT;
 800d47e:	230b      	movs	r3, #11
    if(decoder_src_type == LV_IMG_SRC_FILE) {
 800d480:	7a27      	ldrb	r7, [r4, #8]
        header->w = 1;
 800d482:	f366 2294 	bfi	r2, r6, #10, #11
    if(decoder_src_type == LV_IMG_SRC_FILE) {
 800d486:	42b7      	cmp	r7, r6
        header->h = 1;
 800d488:	ea4f 4012 	mov.w	r0, r2, lsr #16
        header->cf  = LV_IMG_CF_ALPHA_1BIT;
 800d48c:	4611      	mov	r1, r2
        header->w = 1;
 800d48e:	6062      	str	r2, [r4, #4]
        header->h = 1;
 800d490:	f366 104f 	bfi	r0, r6, #5, #11
        header->cf  = LV_IMG_CF_ALPHA_1BIT;
 800d494:	f363 0104 	bfi	r1, r3, #0, #5
        header->h = 1;
 800d498:	80e0      	strh	r0, [r4, #6]
        header->cf  = LV_IMG_CF_ALPHA_1BIT;
 800d49a:	7121      	strb	r1, [r4, #4]
    if(decoder_src_type == LV_IMG_SRC_FILE) {
 800d49c:	d03b      	beq.n	800d516 <lv_img_decoder_open+0x1ba>
    } else if(cf == LV_IMG_CF_ALPHA_1BIT ||
 800d49e:	3b0b      	subs	r3, #11
 800d4a0:	2b03      	cmp	r3, #3
 800d4a2:	bf8c      	ite	hi
 800d4a4:	f04f 30ff 	movhi.w	r0, #4294967295
 800d4a8:	2000      	movls	r0, #0
}
 800d4aa:	f20d 4d0c 	addw	sp, sp, #1036	; 0x40c
 800d4ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    header->always_zero = 0;
 800d4b0:	7922      	ldrb	r2, [r4, #4]
    decoder_src_type = lv_img_src_get_type(src);
 800d4b2:	2103      	movs	r1, #3
    if(lv_img_decoder_info_custom) {
 800d4b4:	f8d4 3420 	ldr.w	r3, [r4, #1056]	; 0x420
    header->always_zero = 0;
 800d4b8:	f365 1247 	bfi	r2, r5, #5, #3
    decoder_src_type = lv_img_src_get_type(src);
 800d4bc:	7221      	strb	r1, [r4, #8]
    header->always_zero = 0;
 800d4be:	7122      	strb	r2, [r4, #4]
    if(lv_img_decoder_info_custom) {
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d1b2      	bne.n	800d42a <lv_img_decoder_open+0xce>
 800d4c4:	e7b8      	b.n	800d438 <lv_img_decoder_open+0xdc>
    } else if(cf == LV_IMG_CF_INDEXED_1BIT ||
 800d4c6:	1fd9      	subs	r1, r3, #7
 800d4c8:	2903      	cmp	r1, #3
 800d4ca:	d8e8      	bhi.n	800d49e <lv_img_decoder_open+0x142>
 800d4cc:	2a0a      	cmp	r2, #10
 800d4ce:	d83a      	bhi.n	800d546 <lv_img_decoder_open+0x1ea>
 800d4d0:	4b27      	ldr	r3, [pc, #156]	; (800d570 <lv_img_decoder_open+0x214>)
 800d4d2:	2501      	movs	r5, #1
 800d4d4:	441a      	add	r2, r3
 800d4d6:	7c16      	ldrb	r6, [r2, #16]
 800d4d8:	40b5      	lsls	r5, r6
        if(decoder_src_type == LV_IMG_SRC_FILE) {
 800d4da:	7a23      	ldrb	r3, [r4, #8]
 800d4dc:	2b01      	cmp	r3, #1
 800d4de:	d035      	beq.n	800d54c <lv_img_decoder_open+0x1f0>
            palette_p = (lv_color32_t *)((lv_img_dsc_t *)decoder_src)->data;
 800d4e0:	68e3      	ldr	r3, [r4, #12]
 800d4e2:	689a      	ldr	r2, [r3, #8]
        for(i = 0; i < palette_size; i++) {
 800d4e4:	b19d      	cbz	r5, 800d50e <lv_img_decoder_open+0x1b2>
 800d4e6:	4b23      	ldr	r3, [pc, #140]	; (800d574 <lv_img_decoder_open+0x218>)
            decoder_index_map[i] = LV_COLOR_MAKE(palette_p[i].red, palette_p[i].green, palette_p[i].blue);
 800d4e8:	26ff      	movs	r6, #255	; 0xff
 800d4ea:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800d4ee:	7814      	ldrb	r4, [r2, #0]
 800d4f0:	3304      	adds	r3, #4
 800d4f2:	7850      	ldrb	r0, [r2, #1]
 800d4f4:	3204      	adds	r2, #4
 800d4f6:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800d4fa:	f803 4c04 	strb.w	r4, [r3, #-4]
 800d4fe:	f803 0c03 	strb.w	r0, [r3, #-3]
 800d502:	f803 1c02 	strb.w	r1, [r3, #-2]
 800d506:	f803 6c01 	strb.w	r6, [r3, #-1]
        for(i = 0; i < palette_size; i++) {
 800d50a:	42ab      	cmp	r3, r5
 800d50c:	d1ef      	bne.n	800d4ee <lv_img_decoder_open+0x192>
            return NULL;
 800d50e:	2000      	movs	r0, #0
 800d510:	e736      	b.n	800d380 <lv_img_decoder_open+0x24>
        img_src_type = LV_IMG_SRC_SYMBOL;   /*Symbols begins after 0x7F*/
 800d512:	2102      	movs	r1, #2
 800d514:	e742      	b.n	800d39c <lv_img_decoder_open+0x40>
        lv_fs_res_t res = lv_fs_open(&decoder_file, src, LV_FS_MODE_RD);
 800d516:	4629      	mov	r1, r5
 800d518:	2202      	movs	r2, #2
 800d51a:	4817      	ldr	r0, [pc, #92]	; (800d578 <lv_img_decoder_open+0x21c>)
 800d51c:	f005 fc42 	bl	8012da4 <lv_fs_open>
        if(res != LV_FS_RES_OK) {
 800d520:	2800      	cmp	r0, #0
 800d522:	f43f af66 	beq.w	800d3f2 <lv_img_decoder_open+0x96>
            return LV_IMG_DECODER_OPEN_FAIL;
 800d526:	f04f 30ff 	mov.w	r0, #4294967295
 800d52a:	e729      	b.n	800d380 <lv_img_decoder_open+0x24>
            res = lv_fs_read(&file, header, sizeof(lv_img_header_t), &rn);
 800d52c:	2204      	movs	r2, #4
 800d52e:	490f      	ldr	r1, [pc, #60]	; (800d56c <lv_img_decoder_open+0x210>)
 800d530:	a802      	add	r0, sp, #8
 800d532:	eb0d 0302 	add.w	r3, sp, r2
 800d536:	f005 fcad 	bl	8012e94 <lv_fs_read>
        if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
 800d53a:	2800      	cmp	r0, #0
 800d53c:	d18c      	bne.n	800d458 <lv_img_decoder_open+0xfc>
 800d53e:	9b01      	ldr	r3, [sp, #4]
 800d540:	2b04      	cmp	r3, #4
 800d542:	d189      	bne.n	800d458 <lv_img_decoder_open+0xfc>
 800d544:	e795      	b.n	800d472 <lv_img_decoder_open+0x116>
    } else if(cf == LV_IMG_CF_INDEXED_1BIT ||
 800d546:	2501      	movs	r5, #1
 800d548:	2600      	movs	r6, #0
 800d54a:	e7c6      	b.n	800d4da <lv_img_decoder_open+0x17e>
            lv_fs_seek(&decoder_file, 4);   /*Skip the header*/
 800d54c:	2104      	movs	r1, #4
 800d54e:	480a      	ldr	r0, [pc, #40]	; (800d578 <lv_img_decoder_open+0x21c>)
 800d550:	f005 fcbc 	bl	8012ecc <lv_fs_seek>
            lv_fs_read(&decoder_file, palette_file, palette_size * sizeof(lv_color32_t), NULL);
 800d554:	2204      	movs	r2, #4
 800d556:	2300      	movs	r3, #0
 800d558:	a902      	add	r1, sp, #8
 800d55a:	40b2      	lsls	r2, r6
 800d55c:	4806      	ldr	r0, [pc, #24]	; (800d578 <lv_img_decoder_open+0x21c>)
 800d55e:	f005 fc99 	bl	8012e94 <lv_fs_read>
            palette_p = palette_file;
 800d562:	aa02      	add	r2, sp, #8
 800d564:	e7be      	b.n	800d4e4 <lv_img_decoder_open+0x188>
 800d566:	bf00      	nop
 800d568:	2000da08 	.word	0x2000da08
 800d56c:	2000da0c 	.word	0x2000da0c
 800d570:	0808b614 	.word	0x0808b614
 800d574:	2000da20 	.word	0x2000da20
 800d578:	2000da18 	.word	0x2000da18

0800d57c <lv_img_dsc_get_info>:
    header->always_zero = 0;
 800d57c:	780b      	ldrb	r3, [r1, #0]
    if(lv_img_decoder_info_custom) {
 800d57e:	4a33      	ldr	r2, [pc, #204]	; (800d64c <lv_img_dsc_get_info+0xd0>)
    header->always_zero = 0;
 800d580:	f36f 1347 	bfc	r3, #5, #3
    if(lv_img_decoder_info_custom) {
 800d584:	f8d2 2420 	ldr.w	r2, [r2, #1056]	; 0x420
{
 800d588:	b570      	push	{r4, r5, r6, lr}
 800d58a:	460c      	mov	r4, r1
 800d58c:	b084      	sub	sp, #16
 800d58e:	4605      	mov	r5, r0
    header->always_zero = 0;
 800d590:	700b      	strb	r3, [r1, #0]
    if(lv_img_decoder_info_custom) {
 800d592:	b112      	cbz	r2, 800d59a <lv_img_dsc_get_info+0x1e>
        custom_res = lv_img_decoder_info_custom(src, header);
 800d594:	4790      	blx	r2
        if(custom_res == LV_RES_OK) return LV_RES_OK;       /*Custom info has supported this source*/
 800d596:	2801      	cmp	r0, #1
 800d598:	d01e      	beq.n	800d5d8 <lv_img_dsc_get_info+0x5c>
    if(src == NULL) return img_src_type;
 800d59a:	2d00      	cmp	r5, #0
 800d59c:	d047      	beq.n	800d62e <lv_img_dsc_get_info+0xb2>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 800d59e:	782b      	ldrb	r3, [r5, #0]
 800d5a0:	f1a3 0220 	sub.w	r2, r3, #32
 800d5a4:	2a5f      	cmp	r2, #95	; 0x5f
 800d5a6:	d819      	bhi.n	800d5dc <lv_img_dsc_get_info+0x60>
        res = lv_fs_open(&file, src, LV_FS_MODE_RD);
 800d5a8:	4629      	mov	r1, r5
 800d5aa:	2202      	movs	r2, #2
 800d5ac:	a802      	add	r0, sp, #8
 800d5ae:	f005 fbf9 	bl	8012da4 <lv_fs_open>
        if(res == LV_FS_RES_OK) {
 800d5b2:	2800      	cmp	r0, #0
 800d5b4:	d03e      	beq.n	800d634 <lv_img_dsc_get_info+0xb8>
            header->w = LV_DPI;
 800d5b6:	6823      	ldr	r3, [r4, #0]
 800d5b8:	2064      	movs	r0, #100	; 0x64
 800d5ba:	f360 2394 	bfi	r3, r0, #10, #11
            header->h = LV_DPI;
 800d5be:	0c19      	lsrs	r1, r3, #16
            header->cf = LV_IMG_CF_UNKOWN;
 800d5c0:	461a      	mov	r2, r3
            header->w = LV_DPI;
 800d5c2:	6023      	str	r3, [r4, #0]
            header->h = LV_DPI;
 800d5c4:	f360 114f 	bfi	r1, r0, #5, #11
            header->cf = LV_IMG_CF_UNKOWN;
 800d5c8:	f36f 0204 	bfc	r2, #0, #5
            header->h = LV_DPI;
 800d5cc:	8061      	strh	r1, [r4, #2]
            header->cf = LV_IMG_CF_UNKOWN;
 800d5ce:	7022      	strb	r2, [r4, #0]
        lv_fs_close(&file);
 800d5d0:	a802      	add	r0, sp, #8
 800d5d2:	f005 fc47 	bl	8012e64 <lv_fs_close>
    return true;
 800d5d6:	2001      	movs	r0, #1
}
 800d5d8:	b004      	add	sp, #16
 800d5da:	bd70      	pop	{r4, r5, r6, pc}
    } else if(u8_p[0] >= 0x80) {
 800d5dc:	061b      	lsls	r3, r3, #24
 800d5de:	d415      	bmi.n	800d60c <lv_img_dsc_get_info+0x90>
        header->w = ((lv_img_dsc_t *)src)->header.w;
 800d5e0:	682b      	ldr	r3, [r5, #0]
    return true;
 800d5e2:	2001      	movs	r0, #1
        header->w = ((lv_img_dsc_t *)src)->header.w;
 800d5e4:	6822      	ldr	r2, [r4, #0]
 800d5e6:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800d5ea:	f363 2294 	bfi	r2, r3, #10, #11
 800d5ee:	6022      	str	r2, [r4, #0]
        header->h = ((lv_img_dsc_t *)src)->header.h;
 800d5f0:	886b      	ldrh	r3, [r5, #2]
 800d5f2:	8861      	ldrh	r1, [r4, #2]
 800d5f4:	f3c3 134a 	ubfx	r3, r3, #5, #11
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 800d5f8:	7822      	ldrb	r2, [r4, #0]
        header->h = ((lv_img_dsc_t *)src)->header.h;
 800d5fa:	f363 114f 	bfi	r1, r3, #5, #11
 800d5fe:	8061      	strh	r1, [r4, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 800d600:	782b      	ldrb	r3, [r5, #0]
 800d602:	f363 0204 	bfi	r2, r3, #0, #5
 800d606:	7022      	strb	r2, [r4, #0]
}
 800d608:	b004      	add	sp, #16
 800d60a:	bd70      	pop	{r4, r5, r6, pc}
        header->w = 1;
 800d60c:	6823      	ldr	r3, [r4, #0]
 800d60e:	2201      	movs	r2, #1
        header->cf  = LV_IMG_CF_ALPHA_1BIT;
 800d610:	260b      	movs	r6, #11
        header->w = 1;
 800d612:	f362 2394 	bfi	r3, r2, #10, #11
    return true;
 800d616:	4610      	mov	r0, r2
        header->h = 1;
 800d618:	0c1d      	lsrs	r5, r3, #16
        header->cf  = LV_IMG_CF_ALPHA_1BIT;
 800d61a:	4619      	mov	r1, r3
        header->w = 1;
 800d61c:	6023      	str	r3, [r4, #0]
        header->h = 1;
 800d61e:	f362 154f 	bfi	r5, r2, #5, #11
        header->cf  = LV_IMG_CF_ALPHA_1BIT;
 800d622:	f366 0104 	bfi	r1, r6, #0, #5
        header->h = 1;
 800d626:	8065      	strh	r5, [r4, #2]
        header->cf  = LV_IMG_CF_ALPHA_1BIT;
 800d628:	7021      	strb	r1, [r4, #0]
}
 800d62a:	b004      	add	sp, #16
 800d62c:	bd70      	pop	{r4, r5, r6, pc}
        return false;
 800d62e:	4628      	mov	r0, r5
}
 800d630:	b004      	add	sp, #16
 800d632:	bd70      	pop	{r4, r5, r6, pc}
            res = lv_fs_read(&file, header, sizeof(lv_img_header_t), &rn);
 800d634:	ab01      	add	r3, sp, #4
 800d636:	2204      	movs	r2, #4
 800d638:	4621      	mov	r1, r4
 800d63a:	a802      	add	r0, sp, #8
 800d63c:	f005 fc2a 	bl	8012e94 <lv_fs_read>
        if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
 800d640:	2800      	cmp	r0, #0
 800d642:	d1b8      	bne.n	800d5b6 <lv_img_dsc_get_info+0x3a>
 800d644:	9b01      	ldr	r3, [sp, #4]
 800d646:	2b04      	cmp	r3, #4
 800d648:	d1b5      	bne.n	800d5b6 <lv_img_dsc_get_info+0x3a>
 800d64a:	e7c1      	b.n	800d5d0 <lv_img_dsc_get_info+0x54>
 800d64c:	2000da08 	.word	0x2000da08

0800d650 <lv_draw_img>:
{
 800d650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d654:	b097      	sub	sp, #92	; 0x5c
 800d656:	4680      	mov	r8, r0
 800d658:	468a      	mov	sl, r1
    if(src == NULL) {
 800d65a:	4614      	mov	r4, r2
{
 800d65c:	af04      	add	r7, sp, #16
 800d65e:	f897 9070 	ldrb.w	r9, [r7, #112]	; 0x70
    if(src == NULL) {
 800d662:	2a00      	cmp	r2, #0
 800d664:	f000 809d 	beq.w	800d7a2 <lv_draw_img+0x152>
    union_ok = lv_area_intersect(&mask_com, mask, coords);
 800d668:	f107 0538 	add.w	r5, r7, #56	; 0x38
 800d66c:	4602      	mov	r2, r0
 800d66e:	461e      	mov	r6, r3
 800d670:	4628      	mov	r0, r5
 800d672:	f005 fa29 	bl	8012ac8 <lv_area_intersect>
    if(union_ok == false) {
 800d676:	2800      	cmp	r0, #0
 800d678:	d046      	beq.n	800d708 <lv_draw_img+0xb8>
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->image.opa : (uint16_t)((uint16_t) style->image.opa * opa_scale) >> 8;
 800d67a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800d67e:	d072      	beq.n	800d766 <lv_draw_img+0x116>
 800d680:	f896 303d 	ldrb.w	r3, [r6, #61]	; 0x3d
 800d684:	fb03 f909 	mul.w	r9, r3, r9
 800d688:	f3c9 2b07 	ubfx	fp, r9, #8, #8
    header_res = lv_img_dsc_get_info(src, &header);
 800d68c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800d690:	4620      	mov	r0, r4
 800d692:	f7ff ff73 	bl	800d57c <lv_img_dsc_get_info>
    if(header_res != LV_RES_OK) {
 800d696:	2801      	cmp	r0, #1
 800d698:	d13a      	bne.n	800d710 <lv_draw_img+0xc0>
    bool chroma_keyed = lv_img_color_format_is_chroma_keyed(header.cf);
 800d69a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800d69e:	f003 031f 	and.w	r3, r3, #31
 800d6a2:	2b0a      	cmp	r3, #10
 800d6a4:	d951      	bls.n	800d74a <lv_draw_img+0xfa>
 800d6a6:	3b02      	subs	r3, #2
            is_chroma_keyed = false;
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	b2db      	uxtb	r3, r3
 800d6ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d6ae:	2b0c      	cmp	r3, #12
 800d6b0:	d856      	bhi.n	800d760 <lv_draw_img+0x110>
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	f641 6109 	movw	r1, #7689	; 0x1e09
 800d6b8:	fa02 f303 	lsl.w	r3, r2, r3
 800d6bc:	420b      	tst	r3, r1
 800d6be:	bf14      	ite	ne
 800d6c0:	4613      	movne	r3, r2
 800d6c2:	2300      	moveq	r3, #0
 800d6c4:	62bb      	str	r3, [r7, #40]	; 0x28
    const uint8_t * img_data = lv_img_decoder_open(src, style);
 800d6c6:	4620      	mov	r0, r4
 800d6c8:	4631      	mov	r1, r6
 800d6ca:	f7ff fe47 	bl	800d35c <lv_img_decoder_open>
    if(img_data == LV_IMG_DECODER_OPEN_FAIL) {
 800d6ce:	1c43      	adds	r3, r0, #1
    const uint8_t * img_data = lv_img_decoder_open(src, style);
 800d6d0:	4602      	mov	r2, r0
    if(img_data == LV_IMG_DECODER_OPEN_FAIL) {
 800d6d2:	d01d      	beq.n	800d710 <lv_draw_img+0xc0>
    if(img_data) {
 800d6d4:	2800      	cmp	r0, #0
 800d6d6:	d076      	beq.n	800d7c6 <lv_draw_img+0x176>
        map_fp(coords, mask, img_data, opa, chroma_keyed, alpha_byte, style->image.color, style->image.intense);
 800d6d8:	f896 103c 	ldrb.w	r1, [r6, #60]	; 0x3c
 800d6dc:	465b      	mov	r3, fp
 800d6de:	4da0      	ldr	r5, [pc, #640]	; (800d960 <lv_draw_img+0x310>)
 800d6e0:	4640      	mov	r0, r8
 800d6e2:	9103      	str	r1, [sp, #12]
 800d6e4:	4651      	mov	r1, sl
 800d6e6:	6bb4      	ldr	r4, [r6, #56]	; 0x38
 800d6e8:	6abe      	ldr	r6, [r7, #40]	; 0x28
 800d6ea:	9402      	str	r4, [sp, #8]
 800d6ec:	9601      	str	r6, [sp, #4]
 800d6ee:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800d6f0:	9400      	str	r4, [sp, #0]
 800d6f2:	682c      	ldr	r4, [r5, #0]
 800d6f4:	4d9b      	ldr	r5, [pc, #620]	; (800d964 <lv_draw_img+0x314>)
 800d6f6:	47a0      	blx	r4
    if(decoder_custom) {
 800d6f8:	f895 3418 	ldrb.w	r3, [r5, #1048]	; 0x418
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d041      	beq.n	800d784 <lv_draw_img+0x134>
        if(lv_img_decoder_close_custom) lv_img_decoder_close_custom();
 800d700:	f8d5 3424 	ldr.w	r3, [r5, #1060]	; 0x424
 800d704:	b103      	cbz	r3, 800d708 <lv_draw_img+0xb8>
 800d706:	4798      	blx	r3
}
 800d708:	374c      	adds	r7, #76	; 0x4c
 800d70a:	46bd      	mov	sp, r7
 800d70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(decoder_custom) {
 800d710:	4d94      	ldr	r5, [pc, #592]	; (800d964 <lv_draw_img+0x314>)
 800d712:	f895 3418 	ldrb.w	r3, [r5, #1048]	; 0x418
 800d716:	b34b      	cbz	r3, 800d76c <lv_draw_img+0x11c>
        if(lv_img_decoder_close_custom) lv_img_decoder_close_custom();
 800d718:	f8d5 3424 	ldr.w	r3, [r5, #1060]	; 0x424
 800d71c:	b103      	cbz	r3, 800d720 <lv_draw_img+0xd0>
 800d71e:	4798      	blx	r3
        lv_draw_rect(coords, mask, &lv_style_plain, LV_OPA_COVER);
 800d720:	4651      	mov	r1, sl
 800d722:	4640      	mov	r0, r8
 800d724:	23ff      	movs	r3, #255	; 0xff
 800d726:	4a90      	ldr	r2, [pc, #576]	; (800d968 <lv_draw_img+0x318>)
 800d728:	f002 fab4 	bl	800fc94 <lv_draw_rect>
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, "No\ndata", LV_TXT_FLAG_NONE, NULL);
 800d72c:	2300      	movs	r3, #0
 800d72e:	4a8f      	ldr	r2, [pc, #572]	; (800d96c <lv_draw_img+0x31c>)
 800d730:	4651      	mov	r1, sl
 800d732:	9302      	str	r3, [sp, #8]
 800d734:	4640      	mov	r0, r8
 800d736:	9301      	str	r3, [sp, #4]
 800d738:	23ff      	movs	r3, #255	; 0xff
 800d73a:	9200      	str	r2, [sp, #0]
 800d73c:	4a8a      	ldr	r2, [pc, #552]	; (800d968 <lv_draw_img+0x318>)
 800d73e:	f000 f967 	bl	800da10 <lv_draw_label>
}
 800d742:	374c      	adds	r7, #76	; 0x4c
 800d744:	46bd      	mov	sp, r7
 800d746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d74a:	4098      	lsls	r0, r3
 800d74c:	3b02      	subs	r3, #2
 800d74e:	f410 6ff9 	tst.w	r0, #1992	; 0x7c8
 800d752:	b2db      	uxtb	r3, r3
 800d754:	bf14      	ite	ne
 800d756:	2201      	movne	r2, #1
 800d758:	2200      	moveq	r2, #0
 800d75a:	2b0c      	cmp	r3, #12
 800d75c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d75e:	d9a8      	bls.n	800d6b2 <lv_draw_img+0x62>
            has_alpha = false;
 800d760:	2300      	movs	r3, #0
 800d762:	62bb      	str	r3, [r7, #40]	; 0x28
 800d764:	e7af      	b.n	800d6c6 <lv_draw_img+0x76>
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->image.opa : (uint16_t)((uint16_t) style->image.opa * opa_scale) >> 8;
 800d766:	f896 b03d 	ldrb.w	fp, [r6, #61]	; 0x3d
 800d76a:	e78f      	b.n	800d68c <lv_draw_img+0x3c>
    if(decoder_src) {
 800d76c:	68eb      	ldr	r3, [r5, #12]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d0d6      	beq.n	800d720 <lv_draw_img+0xd0>
        if(decoder_src_type == LV_IMG_SRC_FILE) {
 800d772:	7a2b      	ldrb	r3, [r5, #8]
 800d774:	2b01      	cmp	r3, #1
 800d776:	f000 8134 	beq.w	800d9e2 <lv_draw_img+0x392>
        decoder_src_type = LV_IMG_SRC_UNKNOWN;
 800d77a:	2203      	movs	r2, #3
        decoder_src = NULL;
 800d77c:	2300      	movs	r3, #0
        decoder_src_type = LV_IMG_SRC_UNKNOWN;
 800d77e:	722a      	strb	r2, [r5, #8]
        decoder_src = NULL;
 800d780:	60eb      	str	r3, [r5, #12]
 800d782:	e7cd      	b.n	800d720 <lv_draw_img+0xd0>
    if(decoder_src) {
 800d784:	68eb      	ldr	r3, [r5, #12]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d0be      	beq.n	800d708 <lv_draw_img+0xb8>
        if(decoder_src_type == LV_IMG_SRC_FILE) {
 800d78a:	7a2b      	ldrb	r3, [r5, #8]
 800d78c:	2b01      	cmp	r3, #1
 800d78e:	f000 8124 	beq.w	800d9da <lv_draw_img+0x38a>
        decoder_src_type = LV_IMG_SRC_UNKNOWN;
 800d792:	2203      	movs	r2, #3
        decoder_src = NULL;
 800d794:	2300      	movs	r3, #0
}
 800d796:	374c      	adds	r7, #76	; 0x4c
        decoder_src_type = LV_IMG_SRC_UNKNOWN;
 800d798:	722a      	strb	r2, [r5, #8]
        decoder_src = NULL;
 800d79a:	60eb      	str	r3, [r5, #12]
}
 800d79c:	46bd      	mov	sp, r7
 800d79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_draw_rect(coords, mask, &lv_style_plain, LV_OPA_COVER);
 800d7a2:	23ff      	movs	r3, #255	; 0xff
 800d7a4:	4a70      	ldr	r2, [pc, #448]	; (800d968 <lv_draw_img+0x318>)
 800d7a6:	f002 fa75 	bl	800fc94 <lv_draw_rect>
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, "No\ndata", LV_TXT_FLAG_NONE, NULL);
 800d7aa:	4b70      	ldr	r3, [pc, #448]	; (800d96c <lv_draw_img+0x31c>)
 800d7ac:	9402      	str	r4, [sp, #8]
 800d7ae:	4651      	mov	r1, sl
 800d7b0:	9300      	str	r3, [sp, #0]
 800d7b2:	4640      	mov	r0, r8
 800d7b4:	9401      	str	r4, [sp, #4]
 800d7b6:	23ff      	movs	r3, #255	; 0xff
 800d7b8:	4a6b      	ldr	r2, [pc, #428]	; (800d968 <lv_draw_img+0x318>)
 800d7ba:	f000 f929 	bl	800da10 <lv_draw_label>
}
 800d7be:	374c      	adds	r7, #76	; 0x4c
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 800d7c6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
    memcpy(dest, src, sizeof(lv_area_t));
 800d7c8:	f107 0240 	add.w	r2, r7, #64	; 0x40
    return area_p->x2 - area_p->x1 + 1;
 800d7cc:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 800d7ce:	3301      	adds	r3, #1
 800d7d0:	6278      	str	r0, [r7, #36]	; 0x24
    else {
 800d7d2:	f8c7 d004 	str.w	sp, [r7, #4]
 800d7d6:	1a5b      	subs	r3, r3, r1
 800d7d8:	b21b      	sxth	r3, r3
 800d7da:	60fb      	str	r3, [r7, #12]
        uint8_t buf[(lv_area_get_width(&mask_com) * ((LV_COLOR_DEPTH >> 3) + 1))];
 800d7dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d7e0:	3307      	adds	r3, #7
 800d7e2:	f023 0307 	bic.w	r3, r3, #7
    memcpy(dest, src, sizeof(lv_area_t));
 800d7e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d7ea:	ebad 0d03 	sub.w	sp, sp, r3
 800d7ee:	e882 0003 	stmia.w	r2, {r0, r1}
        lv_area_set_height(&line, 1);
 800d7f2:	4610      	mov	r0, r2
 800d7f4:	2101      	movs	r1, #1
 800d7f6:	f005 f943 	bl	8012a80 <lv_area_set_height>
        lv_coord_t y = mask_com.y1 - coords->y1;
 800d7fa:	f9b7 003a 	ldrsh.w	r0, [r7, #58]	; 0x3a
        uint8_t buf[(lv_area_get_width(&mask_com) * ((LV_COLOR_DEPTH >> 3) + 1))];
 800d7fe:	ab04      	add	r3, sp, #16
        lv_coord_t x = mask_com.x1 - coords->x1;
 800d800:	f8b8 5000 	ldrh.w	r5, [r8]
        lv_coord_t y = mask_com.y1 - coords->y1;
 800d804:	f8b8 1002 	ldrh.w	r1, [r8, #2]
        uint8_t buf[(lv_area_get_width(&mask_com) * ((LV_COLOR_DEPTH >> 3) + 1))];
 800d808:	469e      	mov	lr, r3
        lv_coord_t y = mask_com.y1 - coords->y1;
 800d80a:	b283      	uxth	r3, r0
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800d80c:	f9b7 403e 	ldrsh.w	r4, [r7, #62]	; 0x3e
        lv_coord_t y = mask_com.y1 - coords->y1;
 800d810:	461a      	mov	r2, r3
 800d812:	61fb      	str	r3, [r7, #28]
        lv_coord_t x = mask_com.x1 - coords->x1;
 800d814:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800d816:	4284      	cmp	r4, r0
        lv_coord_t y = mask_com.y1 - coords->y1;
 800d818:	eba2 0101 	sub.w	r1, r2, r1
        lv_coord_t x = mask_com.x1 - coords->x1;
 800d81c:	eba3 0305 	sub.w	r3, r3, r5
 800d820:	4d50      	ldr	r5, [pc, #320]	; (800d964 <lv_draw_img+0x314>)
        lv_coord_t y = mask_com.y1 - coords->y1;
 800d822:	b28a      	uxth	r2, r1
        lv_coord_t x = mask_com.x1 - coords->x1;
 800d824:	b21b      	sxth	r3, r3
        lv_coord_t y = mask_com.y1 - coords->y1;
 800d826:	623a      	str	r2, [r7, #32]
        lv_coord_t x = mask_com.x1 - coords->x1;
 800d828:	613b      	str	r3, [r7, #16]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800d82a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d82c:	f2c0 80d2 	blt.w	800d9d4 <lv_draw_img+0x384>
            map_fp(&line, mask, buf, opa, chroma_keyed, alpha_byte, style->image.color, style->image.intense);
 800d830:	f8c7 b018 	str.w	fp, [r7, #24]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800d834:	4691      	mov	r9, r2
            map_fp(&line, mask, buf, opa, chroma_keyed, alpha_byte, style->image.color, style->image.intense);
 800d836:	f8c7 8008 	str.w	r8, [r7, #8]
 800d83a:	46f3      	mov	fp, lr
 800d83c:	617e      	str	r6, [r7, #20]
 800d83e:	e035      	b.n	800d8ac <lv_draw_img+0x25c>
        if(lv_img_decoder_read_line_custom) {
 800d840:	f8d5 8428 	ldr.w	r8, [r5, #1064]	; 0x428
 800d844:	f1b8 0f00 	cmp.w	r8, #0
 800d848:	d053      	beq.n	800d8f2 <lv_draw_img+0x2a2>
            custom_res = lv_img_decoder_read_line_custom(x, y, len, buf);
 800d84a:	465b      	mov	r3, fp
 800d84c:	68fa      	ldr	r2, [r7, #12]
 800d84e:	6938      	ldr	r0, [r7, #16]
 800d850:	47c0      	blx	r8
            if(read_res != LV_RES_OK) {
 800d852:	2801      	cmp	r0, #1
 800d854:	f040 80b1 	bne.w	800d9ba <lv_draw_img+0x36a>
            map_fp(&line, mask, buf, opa, chroma_keyed, alpha_byte, style->image.color, style->image.intense);
 800d858:	6978      	ldr	r0, [r7, #20]
 800d85a:	f109 0901 	add.w	r9, r9, #1
 800d85e:	69bb      	ldr	r3, [r7, #24]
 800d860:	f890 103c 	ldrb.w	r1, [r0, #60]	; 0x3c
 800d864:	4a3e      	ldr	r2, [pc, #248]	; (800d960 <lv_draw_img+0x310>)
 800d866:	9103      	str	r1, [sp, #12]
 800d868:	4651      	mov	r1, sl
 800d86a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800d86c:	6812      	ldr	r2, [r2, #0]
 800d86e:	9002      	str	r0, [sp, #8]
 800d870:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800d874:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800d876:	4616      	mov	r6, r2
 800d878:	465a      	mov	r2, fp
 800d87a:	9401      	str	r4, [sp, #4]
 800d87c:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800d87e:	9400      	str	r4, [sp, #0]
 800d880:	47b0      	blx	r6
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800d882:	69fb      	ldr	r3, [r7, #28]
 800d884:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d886:	3301      	adds	r3, #1
            line.y1++;
 800d888:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800d88c:	4419      	add	r1, r3
            line.y2++;
 800d88e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
            line.y1++;
 800d892:	3201      	adds	r2, #1
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800d894:	460c      	mov	r4, r1
 800d896:	f9b7 103e 	ldrsh.w	r1, [r7, #62]	; 0x3e
            line.y2++;
 800d89a:	3301      	adds	r3, #1
            line.y1++;
 800d89c:	f8a7 2042 	strh.w	r2, [r7, #66]	; 0x42
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800d8a0:	b224      	sxth	r4, r4
            line.y2++;
 800d8a2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800d8a6:	42a1      	cmp	r1, r4
 800d8a8:	f2c0 8094 	blt.w	800d9d4 <lv_draw_img+0x384>
 800d8ac:	fa1f f189 	uxth.w	r1, r9
 800d8b0:	6a3a      	ldr	r2, [r7, #32]
    if(decoder_custom) {
 800d8b2:	f895 3418 	ldrb.w	r3, [r5, #1048]	; 0x418
 800d8b6:	6279      	str	r1, [r7, #36]	; 0x24
 800d8b8:	1851      	adds	r1, r2, r1
 800d8ba:	b209      	sxth	r1, r1
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d1bf      	bne.n	800d840 <lv_draw_img+0x1f0>
    if(decoder_src_type == LV_IMG_SRC_FILE) {
 800d8c0:	7a2a      	ldrb	r2, [r5, #8]
 800d8c2:	2a01      	cmp	r2, #1
 800d8c4:	d01d      	beq.n	800d902 <lv_draw_img+0x2b2>
    } else if(decoder_src_type == LV_IMG_SRC_VARIABLE) {
 800d8c6:	2a00      	cmp	r2, #0
 800d8c8:	d1c6      	bne.n	800d858 <lv_draw_img+0x208>
        if(img_dsc->header.cf == LV_IMG_CF_ALPHA_1BIT ||
 800d8ca:	68eb      	ldr	r3, [r5, #12]
                img_dsc->header.cf == LV_IMG_CF_ALPHA_4BIT ||
 800d8cc:	781b      	ldrb	r3, [r3, #0]
 800d8ce:	f003 031f 	and.w	r3, r3, #31
        if(img_dsc->header.cf == LV_IMG_CF_ALPHA_1BIT ||
 800d8d2:	f1a3 020b 	sub.w	r2, r3, #11
 800d8d6:	2a03      	cmp	r2, #3
 800d8d8:	d93c      	bls.n	800d954 <lv_draw_img+0x304>
        } else if(img_dsc->header.cf == LV_IMG_CF_INDEXED_1BIT ||
 800d8da:	3b07      	subs	r3, #7
 800d8dc:	2b03      	cmp	r3, #3
 800d8de:	d931      	bls.n	800d944 <lv_draw_img+0x2f4>
 800d8e0:	f8d7 8008 	ldr.w	r8, [r7, #8]
        decoder_src_type = LV_IMG_SRC_UNKNOWN;
 800d8e4:	2203      	movs	r2, #3
        decoder_src = NULL;
 800d8e6:	2300      	movs	r3, #0
        decoder_src_type = LV_IMG_SRC_UNKNOWN;
 800d8e8:	722a      	strb	r2, [r5, #8]
        decoder_src = NULL;
 800d8ea:	60eb      	str	r3, [r5, #12]
 800d8ec:	f8d7 d004 	ldr.w	sp, [r7, #4]
 800d8f0:	e716      	b.n	800d720 <lv_draw_img+0xd0>
 800d8f2:	f8d7 8008 	ldr.w	r8, [r7, #8]
        if(lv_img_decoder_close_custom) lv_img_decoder_close_custom();
 800d8f6:	f8d5 3424 	ldr.w	r3, [r5, #1060]	; 0x424
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d0f6      	beq.n	800d8ec <lv_draw_img+0x29c>
 800d8fe:	4798      	blx	r3
 800d900:	e7f4      	b.n	800d8ec <lv_draw_img+0x29c>
        uint8_t px_size = lv_img_color_format_get_px_size(decoder_header.cf);
 800d902:	792a      	ldrb	r2, [r5, #4]
 800d904:	f3c2 0204 	ubfx	r2, r2, #0, #5
 800d908:	3a04      	subs	r2, #4
 800d90a:	b2d2      	uxtb	r2, r2
 800d90c:	2a0a      	cmp	r2, #10
 800d90e:	d81f      	bhi.n	800d950 <lv_draw_img+0x300>
 800d910:	4b17      	ldr	r3, [pc, #92]	; (800d970 <lv_draw_img+0x320>)
 800d912:	441a      	add	r2, r3
 800d914:	f892 8010 	ldrb.w	r8, [r2, #16]
                decoder_header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800d918:	792b      	ldrb	r3, [r5, #4]
 800d91a:	f003 031f 	and.w	r3, r3, #31
        if(decoder_header.cf == LV_IMG_CF_TRUE_COLOR ||
 800d91e:	1f1a      	subs	r2, r3, #4
 800d920:	2a02      	cmp	r2, #2
 800d922:	d929      	bls.n	800d978 <lv_draw_img+0x328>
        } else if(decoder_header.cf == LV_IMG_CF_ALPHA_1BIT ||
 800d924:	f1a3 020b 	sub.w	r2, r3, #11
 800d928:	2a03      	cmp	r2, #3
 800d92a:	d913      	bls.n	800d954 <lv_draw_img+0x304>
        } else if(decoder_header.cf == LV_IMG_CF_INDEXED_1BIT ||
 800d92c:	3b07      	subs	r3, #7
 800d92e:	2b03      	cmp	r3, #3
 800d930:	d908      	bls.n	800d944 <lv_draw_img+0x2f4>
    if(decoder_src) {
 800d932:	68eb      	ldr	r3, [r5, #12]
 800d934:	f8d7 8008 	ldr.w	r8, [r7, #8]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d0d7      	beq.n	800d8ec <lv_draw_img+0x29c>
            lv_fs_close(&decoder_file);
 800d93c:	480d      	ldr	r0, [pc, #52]	; (800d974 <lv_draw_img+0x324>)
 800d93e:	f005 fa91 	bl	8012e64 <lv_fs_close>
 800d942:	e7cf      	b.n	800d8e4 <lv_draw_img+0x294>
            lv_img_built_in_decoder_line_indexed(x, y, len, buf);
 800d944:	465b      	mov	r3, fp
 800d946:	68fa      	ldr	r2, [r7, #12]
 800d948:	6938      	ldr	r0, [r7, #16]
 800d94a:	f7ff fc4f 	bl	800d1ec <lv_img_built_in_decoder_line_indexed>
 800d94e:	e783      	b.n	800d858 <lv_draw_img+0x208>
        uint8_t px_size = lv_img_color_format_get_px_size(decoder_header.cf);
 800d950:	4698      	mov	r8, r3
 800d952:	e7e1      	b.n	800d918 <lv_draw_img+0x2c8>
            lv_img_built_in_decoder_line_alpha(x, y, len, buf);
 800d954:	465b      	mov	r3, fp
 800d956:	68fa      	ldr	r2, [r7, #12]
 800d958:	6938      	ldr	r0, [r7, #16]
 800d95a:	f7ff fb5f 	bl	800d01c <lv_img_built_in_decoder_line_alpha>
 800d95e:	e77b      	b.n	800d858 <lv_draw_img+0x208>
 800d960:	0808b604 	.word	0x0808b604
 800d964:	2000da08 	.word	0x2000da08
 800d968:	2001933c 	.word	0x2001933c
 800d96c:	080c7228 	.word	0x080c7228
 800d970:	0808b614 	.word	0x0808b614
 800d974:	2000da18 	.word	0x2000da18
            uint32_t pos = ((y * decoder_header.w + x) * px_size) >> 3;
 800d978:	686b      	ldr	r3, [r5, #4]
 800d97a:	693a      	ldr	r2, [r7, #16]
 800d97c:	f3c3 238a 	ubfx	r3, r3, #10, #11
            res = lv_fs_seek(&decoder_file, pos);
 800d980:	481a      	ldr	r0, [pc, #104]	; (800d9ec <lv_draw_img+0x39c>)
            uint32_t pos = ((y * decoder_header.w + x) * px_size) >> 3;
 800d982:	fb11 2103 	smlabb	r1, r1, r3, r2
 800d986:	fb08 f101 	mul.w	r1, r8, r1
 800d98a:	10c9      	asrs	r1, r1, #3
            res = lv_fs_seek(&decoder_file, pos);
 800d98c:	3104      	adds	r1, #4
 800d98e:	f005 fa9d 	bl	8012ecc <lv_fs_seek>
            if(res != LV_FS_RES_OK) {
 800d992:	4602      	mov	r2, r0
 800d994:	b988      	cbnz	r0, 800d9ba <lv_draw_img+0x36a>
            uint32_t btr = len * (px_size >> 3);
 800d996:	89bc      	ldrh	r4, [r7, #12]
 800d998:	ea4f 08d8 	mov.w	r8, r8, lsr #3
            uint32_t br = 0;
 800d99c:	f107 0348 	add.w	r3, r7, #72	; 0x48
            lv_fs_read(&decoder_file, buf, btr, &br);
 800d9a0:	4659      	mov	r1, fp
            uint32_t btr = len * (px_size >> 3);
 800d9a2:	fb18 f804 	smulbb	r8, r8, r4
            lv_fs_read(&decoder_file, buf, btr, &br);
 800d9a6:	4811      	ldr	r0, [pc, #68]	; (800d9ec <lv_draw_img+0x39c>)
            uint32_t br = 0;
 800d9a8:	f843 2d14 	str.w	r2, [r3, #-20]!
            lv_fs_read(&decoder_file, buf, btr, &br);
 800d9ac:	4642      	mov	r2, r8
 800d9ae:	f005 fa71 	bl	8012e94 <lv_fs_read>
            if(res != LV_FS_RES_OK || btr != br) {
 800d9b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9b4:	4598      	cmp	r8, r3
 800d9b6:	f43f af4f 	beq.w	800d858 <lv_draw_img+0x208>
    if(decoder_custom) {
 800d9ba:	f895 3418 	ldrb.w	r3, [r5, #1048]	; 0x418
 800d9be:	f8d7 8008 	ldr.w	r8, [r7, #8]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d197      	bne.n	800d8f6 <lv_draw_img+0x2a6>
    if(decoder_src) {
 800d9c6:	68eb      	ldr	r3, [r5, #12]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d08f      	beq.n	800d8ec <lv_draw_img+0x29c>
        if(decoder_src_type == LV_IMG_SRC_FILE) {
 800d9cc:	7a2b      	ldrb	r3, [r5, #8]
 800d9ce:	2b01      	cmp	r3, #1
 800d9d0:	d188      	bne.n	800d8e4 <lv_draw_img+0x294>
 800d9d2:	e7b3      	b.n	800d93c <lv_draw_img+0x2ec>
 800d9d4:	f8d7 d004 	ldr.w	sp, [r7, #4]
 800d9d8:	e68e      	b.n	800d6f8 <lv_draw_img+0xa8>
            lv_fs_close(&decoder_file);
 800d9da:	4804      	ldr	r0, [pc, #16]	; (800d9ec <lv_draw_img+0x39c>)
 800d9dc:	f005 fa42 	bl	8012e64 <lv_fs_close>
 800d9e0:	e6d7      	b.n	800d792 <lv_draw_img+0x142>
 800d9e2:	4802      	ldr	r0, [pc, #8]	; (800d9ec <lv_draw_img+0x39c>)
 800d9e4:	f005 fa3e 	bl	8012e64 <lv_fs_close>
 800d9e8:	e6c7      	b.n	800d77a <lv_draw_img+0x12a>
 800d9ea:	bf00      	nop
 800d9ec:	2000da18 	.word	0x2000da18

0800d9f0 <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
 800d9f0:	b160      	cbz	r0, 800da0c <lv_img_src_get_type+0x1c>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 800d9f2:	7803      	ldrb	r3, [r0, #0]
 800d9f4:	f1a3 0220 	sub.w	r2, r3, #32
 800d9f8:	2a5f      	cmp	r2, #95	; 0x5f
 800d9fa:	d905      	bls.n	800da08 <lv_img_src_get_type+0x18>
    } else if(u8_p[0] >= 0x80) {
 800d9fc:	f013 0f80 	tst.w	r3, #128	; 0x80
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
 800da00:	bf14      	ite	ne
 800da02:	2002      	movne	r0, #2
 800da04:	2000      	moveq	r0, #0
 800da06:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE;     /*If it's an ASCII character then it's file name*/
 800da08:	2001      	movs	r0, #1
}
 800da0a:	4770      	bx	lr
    if(src == NULL) return img_src_type;
 800da0c:	2003      	movs	r0, #3
 800da0e:	4770      	bx	lr

0800da10 <lv_draw_label>:
 * @param offset text offset in x and y direction (NULL if unused)
 *
 */
void lv_draw_label(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style, lv_opa_t opa_scale,
                   const char * txt, lv_txt_flag_t flag, lv_point_t * offset)
{
 800da10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da14:	b097      	sub	sp, #92	; 0x5c
 800da16:	4690      	mov	r8, r2
 800da18:	4699      	mov	r9, r3
 800da1a:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 800da1e:	900c      	str	r0, [sp, #48]	; 0x30
    const lv_font_t * font = style->text.font;
    lv_coord_t w;
    if((flag & LV_TXT_FLAG_EXPAND) == 0) {
 800da20:	0793      	lsls	r3, r2, #30
{
 800da22:	9209      	str	r2, [sp, #36]	; 0x24
 800da24:	9107      	str	r1, [sp, #28]
    const lv_font_t * font = style->text.font;
 800da26:	f8d8 602c 	ldr.w	r6, [r8, #44]	; 0x2c
{
 800da2a:	9f20      	ldr	r7, [sp, #128]	; 0x80
    if((flag & LV_TXT_FLAG_EXPAND) == 0) {
 800da2c:	f100 812a 	bmi.w	800dc84 <lv_draw_label+0x274>
    return area_p->x2 - area_p->x1 + 1;
 800da30:	8883      	ldrh	r3, [r0, #4]
 800da32:	f9b0 4000 	ldrsh.w	r4, [r0]
 800da36:	3301      	adds	r3, #1
 800da38:	1b1b      	subs	r3, r3, r4
 800da3a:	b21b      	sxth	r3, r3
 800da3c:	930d      	str	r3, [sp, #52]	; 0x34
        lv_point_t p;
        lv_txt_get_size(&p, txt, style->text.font, style->text.letter_space, style->text.line_space, LV_COORD_MAX, flag);
        w = p.x;
    }

    lv_coord_t line_height = lv_font_get_height(font) + style->text.line_space;
 800da3e:	f8b8 2032 	ldrh.w	r2, [r8, #50]	; 0x32
    lv_point_t pos;
    pos.x = coords->x1;
    pos.y = coords->y1;

    uint32_t line_start = 0;
    uint32_t line_end = lv_txt_get_next_line(txt, font, style->text.letter_space, w, flag);
 800da42:	4631      	mov	r1, r6
    lv_coord_t line_height = lv_font_get_height(font) + style->text.line_space;
 800da44:	f896 5020 	ldrb.w	r5, [r6, #32]
    uint32_t line_end = lv_txt_get_next_line(txt, font, style->text.letter_space, w, flag);
 800da48:	9809      	ldr	r0, [sp, #36]	; 0x24
    lv_coord_t line_height = lv_font_get_height(font) + style->text.line_space;
 800da4a:	4415      	add	r5, r2
    pos.x = coords->x1;
 800da4c:	f8ad 4048 	strh.w	r4, [sp, #72]	; 0x48
    uint32_t line_end = lv_txt_get_next_line(txt, font, style->text.letter_space, w, flag);
 800da50:	9000      	str	r0, [sp, #0]
 800da52:	4638      	mov	r0, r7
    lv_coord_t line_height = lv_font_get_height(font) + style->text.line_space;
 800da54:	b2ac      	uxth	r4, r5
    pos.y = coords->y1;
 800da56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    uint32_t line_end = lv_txt_get_next_line(txt, font, style->text.letter_space, w, flag);
 800da58:	f9b8 2030 	ldrsh.w	r2, [r8, #48]	; 0x30
    lv_coord_t line_height = lv_font_get_height(font) + style->text.line_space;
 800da5c:	940a      	str	r4, [sp, #40]	; 0x28
    pos.y = coords->y1;
 800da5e:	886c      	ldrh	r4, [r5, #2]
 800da60:	f8ad 404a 	strh.w	r4, [sp, #74]	; 0x4a
    uint32_t line_end = lv_txt_get_next_line(txt, font, style->text.letter_space, w, flag);
 800da64:	f006 f814 	bl	8013a90 <lv_txt_get_next_line>
    uint32_t line_start = 0;
 800da68:	2400      	movs	r4, #0
 800da6a:	f8cd 9018 	str.w	r9, [sp, #24]
    uint32_t line_end = lv_txt_get_next_line(txt, font, style->text.letter_space, w, flag);
 800da6e:	4605      	mov	r5, r0
 800da70:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 800da74:	f9bd 204a 	ldrsh.w	r2, [sp, #74]	; 0x4a
 800da78:	9605      	str	r6, [sp, #20]
 800da7a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800da7e:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34

    /*Go the first visible line*/
    while(pos.y + line_height < mask->y1) {
 800da82:	e012      	b.n	800daaa <lv_draw_label+0x9a>
        /*Go to next line*/
        line_start = line_end;
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800da84:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800da86:	462c      	mov	r4, r5
 800da88:	f9b8 2030 	ldrsh.w	r2, [r8, #48]	; 0x30
 800da8c:	9600      	str	r6, [sp, #0]
 800da8e:	f005 ffff 	bl	8013a90 <lv_txt_get_next_line>
        pos.y += line_height;
 800da92:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 800da96:	990a      	ldr	r1, [sp, #40]	; 0x28

        if(txt[line_start] == '\0') return;
 800da98:	5d7b      	ldrb	r3, [r7, r5]
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800da9a:	4405      	add	r5, r0
        pos.y += line_height;
 800da9c:	440a      	add	r2, r1
 800da9e:	b212      	sxth	r2, r2
 800daa0:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
        if(txt[line_start] == '\0') return;
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	f000 809c 	beq.w	800dbe2 <lv_draw_label+0x1d2>
    while(pos.y + line_height < mask->y1) {
 800daaa:	4452      	add	r2, sl
 800daac:	f9bb e002 	ldrsh.w	lr, [fp, #2]
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800dab0:	1978      	adds	r0, r7, r5
 800dab2:	464b      	mov	r3, r9
    while(pos.y + line_height < mask->y1) {
 800dab4:	4572      	cmp	r2, lr
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800dab6:	9905      	ldr	r1, [sp, #20]
    while(pos.y + line_height < mask->y1) {
 800dab8:	dbe4      	blt.n	800da84 <lv_draw_label+0x74>
    }

    /*Align to middle*/
    if(flag & LV_TXT_FLAG_CENTER) {
 800daba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dabc:	460e      	mov	r6, r1
 800dabe:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800dac2:	f013 0304 	ands.w	r3, r3, #4
 800dac6:	930f      	str	r3, [sp, #60]	; 0x3c
 800dac8:	f040 817b 	bne.w	800ddc2 <lv_draw_label+0x3b2>

        pos.x += (lv_area_get_width(coords) - line_width) / 2;

    }
    /*Align to the right*/
    else if(flag & LV_TXT_FLAG_RIGHT) {
 800dacc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dace:	f013 0a08 	ands.w	sl, r3, #8
 800dad2:	f040 8193 	bne.w	800ddfc <lv_draw_label+0x3ec>
                                      font, style->text.letter_space, flag);
        pos.x += lv_area_get_width(coords) - line_width;
    }


    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->text.opa : (uint16_t)((uint16_t) style->text.opa * opa_scale) >> 8;
 800dad6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800dada:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
 800dade:	d003      	beq.n	800dae8 <lv_draw_label+0xd8>
 800dae0:	fb03 f909 	mul.w	r9, r3, r9
 800dae4:	f3c9 2307 	ubfx	r3, r9, #8, #8
 800dae8:	9308      	str	r3, [sp, #32]
    lv_color_t recolor;
    lv_coord_t letter_w;

    lv_coord_t x_ofs = 0;
    lv_coord_t y_ofs = 0;
    if(offset != NULL) {
 800daea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800daec:	2b00      	cmp	r3, #0
 800daee:	f000 819c 	beq.w	800de2a <lv_draw_label+0x41a>
 800daf2:	461a      	mov	r2, r3
 800daf4:	4619      	mov	r1, r3
        x_ofs = offset->x;
        y_ofs = offset->y;
        pos.y += y_ofs;
 800daf6:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 800dafa:	8852      	ldrh	r2, [r2, #2]
        x_ofs = offset->x;
 800dafc:	f9b1 1000 	ldrsh.w	r1, [r1]
        pos.y += y_ofs;
 800db00:	4413      	add	r3, r2
        x_ofs = offset->x;
 800db02:	9110      	str	r1, [sp, #64]	; 0x40
        pos.y += y_ofs;
 800db04:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 800db08:	fa5f f38a 	uxtb.w	r3, sl

            lv_color_t color = style->text.color;

            if(cmd_state == CMD_STATE_IN) color = recolor;

            letter_fp(&pos, mask, font, letter, color, opa);
 800db0c:	f8df b33c 	ldr.w	fp, [pc, #828]	; 800de4c <lv_draw_label+0x43c>
            letter = lv_txt_encoded_next(txt, &i);
 800db10:	f8df a33c 	ldr.w	sl, [pc, #828]	; 800de50 <lv_draw_label+0x440>
 800db14:	9311      	str	r3, [sp, #68]	; 0x44
 800db16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db18:	f003 0301 	and.w	r3, r3, #1
 800db1c:	9306      	str	r3, [sp, #24]
    lv_coord_t x_ofs = 0;
 800db1e:	2300      	movs	r3, #0
 800db20:	930e      	str	r3, [sp, #56]	; 0x38
    while(txt[line_start] != '\0') {
 800db22:	5d3b      	ldrb	r3, [r7, r4]
 800db24:	46a9      	mov	r9, r5
 800db26:	2b00      	cmp	r3, #0
 800db28:	d05b      	beq.n	800dbe2 <lv_draw_label+0x1d2>
        if(offset != NULL) {
 800db2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800db2c:	b12b      	cbz	r3, 800db3a <lv_draw_label+0x12a>
            pos.x += x_ofs;
 800db2e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800db32:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800db34:	4413      	add	r3, r2
 800db36:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        cmd_state = CMD_STATE_WAIT;
 800db3a:	2500      	movs	r5, #0
        i = line_start;
 800db3c:	9413      	str	r4, [sp, #76]	; 0x4c
 800db3e:	9705      	str	r7, [sp, #20]
        while(i < line_end) {
 800db40:	45a1      	cmp	r9, r4
 800db42:	d92a      	bls.n	800db9a <lv_draw_label+0x18a>
            letter = lv_txt_encoded_next(txt, &i);
 800db44:	f8da 3000 	ldr.w	r3, [sl]
 800db48:	a913      	add	r1, sp, #76	; 0x4c
 800db4a:	9805      	ldr	r0, [sp, #20]
 800db4c:	4798      	blx	r3
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800db4e:	9b06      	ldr	r3, [sp, #24]
            letter = lv_txt_encoded_next(txt, &i);
 800db50:	4604      	mov	r4, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800db52:	b11b      	cbz	r3, 800db5c <lv_draw_label+0x14c>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800db54:	2823      	cmp	r0, #35	; 0x23
 800db56:	d049      	beq.n	800dbec <lv_draw_label+0x1dc>
                if(cmd_state == CMD_STATE_PAR) {
 800db58:	2d01      	cmp	r5, #1
 800db5a:	d04d      	beq.n	800dbf8 <lv_draw_label+0x1e8>
            if(cmd_state == CMD_STATE_IN) color = recolor;
 800db5c:	2d02      	cmp	r5, #2
 800db5e:	d043      	beq.n	800dbe8 <lv_draw_label+0x1d8>
            lv_color_t color = style->text.color;
 800db60:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
            letter_fp(&pos, mask, font, letter, color, opa);
 800db64:	9b08      	ldr	r3, [sp, #32]
 800db66:	a812      	add	r0, sp, #72	; 0x48
 800db68:	f8db 1000 	ldr.w	r1, [fp]
 800db6c:	9301      	str	r3, [sp, #4]
 800db6e:	4623      	mov	r3, r4
 800db70:	9200      	str	r2, [sp, #0]
 800db72:	460f      	mov	r7, r1
 800db74:	4632      	mov	r2, r6
 800db76:	9907      	ldr	r1, [sp, #28]
 800db78:	47b8      	blx	r7
            letter_w = lv_font_get_width(font, letter);
 800db7a:	4621      	mov	r1, r4
 800db7c:	4630      	mov	r0, r6
 800db7e:	f005 f8b1 	bl	8012ce4 <lv_font_get_width>

            if(letter_w > 0){
 800db82:	b138      	cbz	r0, 800db94 <lv_draw_label+0x184>
                pos.x += letter_w + style->text.letter_space;
 800db84:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800db88:	f8b8 2030 	ldrh.w	r2, [r8, #48]	; 0x30
 800db8c:	4413      	add	r3, r2
 800db8e:	4418      	add	r0, r3
 800db90:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 800db94:	9c13      	ldr	r4, [sp, #76]	; 0x4c
        while(i < line_end) {
 800db96:	45a1      	cmp	r9, r4
 800db98:	d8d4      	bhi.n	800db44 <lv_draw_label+0x134>
 800db9a:	9f05      	ldr	r7, [sp, #20]
            }
        }
        /*Go to next line*/
        line_start = line_end;
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800db9c:	4631      	mov	r1, r6
 800db9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dba0:	eb07 0409 	add.w	r4, r7, r9
 800dba4:	f9b8 2030 	ldrsh.w	r2, [r8, #48]	; 0x30
 800dba8:	9300      	str	r3, [sp, #0]
 800dbaa:	4620      	mov	r0, r4
 800dbac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dbae:	f005 ff6f 	bl	8013a90 <lv_txt_get_next_line>

        pos.x = coords->x1;
 800dbb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800dbb4:	eb00 0509 	add.w	r5, r0, r9
        pos.x = coords->x1;
 800dbb8:	881b      	ldrh	r3, [r3, #0]
 800dbba:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        /*Align to middle*/
        if(flag & LV_TXT_FLAG_CENTER) {
 800dbbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dbc0:	bb6b      	cbnz	r3, 800dc1e <lv_draw_label+0x20e>

            pos.x += (lv_area_get_width(coords) - line_width) / 2;

        }
        /*Align to the right*/
        else if(flag & LV_TXT_FLAG_RIGHT) {
 800dbc2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d143      	bne.n	800dc50 <lv_draw_label+0x240>
                                          font, style->text.letter_space, flag);
            pos.x += lv_area_get_width(coords) - line_width;
        }

        /*Go the next line position*/
        pos.y += line_height;
 800dbc8:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 800dbcc:	464c      	mov	r4, r9
 800dbce:	990a      	ldr	r1, [sp, #40]	; 0x28

        if(pos.y > mask->y2) return;
 800dbd0:	9a07      	ldr	r2, [sp, #28]
        pos.y += line_height;
 800dbd2:	440b      	add	r3, r1
        if(pos.y > mask->y2) return;
 800dbd4:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
        pos.y += line_height;
 800dbd8:	b21b      	sxth	r3, r3
        if(pos.y > mask->y2) return;
 800dbda:	429a      	cmp	r2, r3
        pos.y += line_height;
 800dbdc:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        if(pos.y > mask->y2) return;
 800dbe0:	da9f      	bge.n	800db22 <lv_draw_label+0x112>
    }
}
 800dbe2:	b017      	add	sp, #92	; 0x5c
 800dbe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(cmd_state == CMD_STATE_IN) color = recolor;
 800dbe8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dbea:	e7bb      	b.n	800db64 <lv_draw_label+0x154>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 800dbec:	b985      	cbnz	r5, 800dc10 <lv_draw_label+0x200>
                        par_start = i;
 800dbee:	9c13      	ldr	r4, [sp, #76]	; 0x4c
                        cmd_state = CMD_STATE_PAR;
 800dbf0:	2501      	movs	r5, #1
                        par_start = i;
 800dbf2:	b2a3      	uxth	r3, r4
 800dbf4:	930e      	str	r3, [sp, #56]	; 0x38
                        continue;
 800dbf6:	e7a3      	b.n	800db40 <lv_draw_label+0x130>
                    if(letter == ' ') {
 800dbf8:	2820      	cmp	r0, #32
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 800dbfa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
                    if(letter == ' ') {
 800dbfc:	d1a0      	bne.n	800db40 <lv_draw_label+0x130>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 800dbfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dc00:	1ae3      	subs	r3, r4, r3
 800dc02:	2b07      	cmp	r3, #7
 800dc04:	d055      	beq.n	800dcb2 <lv_draw_label+0x2a2>
                            recolor.full = style->text.color.full;
 800dc06:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 800dc0a:	2502      	movs	r5, #2
                            recolor.full = style->text.color.full;
 800dc0c:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc0e:	e797      	b.n	800db40 <lv_draw_label+0x130>
                    } else if(cmd_state == CMD_STATE_PAR) { /*Other start char in parameter escaped cmd. char */
 800dc10:	2d01      	cmp	r5, #1
 800dc12:	d033      	beq.n	800dc7c <lv_draw_label+0x26c>
                    } else if(cmd_state == CMD_STATE_IN) { /*Command end */
 800dc14:	2d02      	cmp	r5, #2
 800dc16:	d1a3      	bne.n	800db60 <lv_draw_label+0x150>
 800dc18:	9c13      	ldr	r4, [sp, #76]	; 0x4c
                        cmd_state = CMD_STATE_WAIT;
 800dc1a:	2500      	movs	r5, #0
 800dc1c:	e790      	b.n	800db40 <lv_draw_label+0x130>
            line_width = lv_txt_get_width(&txt[line_start], line_end - line_start,
 800dc1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc20:	4601      	mov	r1, r0
 800dc22:	f9b8 3030 	ldrsh.w	r3, [r8, #48]	; 0x30
 800dc26:	4620      	mov	r0, r4
 800dc28:	9200      	str	r2, [sp, #0]
 800dc2a:	4632      	mov	r2, r6
 800dc2c:	f006 f944 	bl	8013eb8 <lv_txt_get_width>
 800dc30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dc32:	8893      	ldrh	r3, [r2, #4]
 800dc34:	8812      	ldrh	r2, [r2, #0]
 800dc36:	3301      	adds	r3, #1
 800dc38:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800dc3a:	b21b      	sxth	r3, r3
 800dc3c:	1a18      	subs	r0, r3, r0
 800dc3e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800dc42:	bf48      	it	mi
 800dc44:	3001      	addmi	r0, #1
 800dc46:	eb03 0360 	add.w	r3, r3, r0, asr #1
 800dc4a:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 800dc4e:	e7bb      	b.n	800dbc8 <lv_draw_label+0x1b8>
            line_width = lv_txt_get_width(&txt[line_start], line_end - line_start,
 800dc50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc52:	4601      	mov	r1, r0
 800dc54:	f9b8 3030 	ldrsh.w	r3, [r8, #48]	; 0x30
 800dc58:	4620      	mov	r0, r4
 800dc5a:	9200      	str	r2, [sp, #0]
 800dc5c:	4632      	mov	r2, r6
 800dc5e:	f006 f92b 	bl	8013eb8 <lv_txt_get_width>
 800dc62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dc64:	8893      	ldrh	r3, [r2, #4]
 800dc66:	8811      	ldrh	r1, [r2, #0]
 800dc68:	3301      	adds	r3, #1
            pos.x += lv_area_get_width(coords) - line_width;
 800dc6a:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 800dc6e:	1a5b      	subs	r3, r3, r1
 800dc70:	b21b      	sxth	r3, r3
 800dc72:	1a1b      	subs	r3, r3, r0
 800dc74:	4413      	add	r3, r2
 800dc76:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 800dc7a:	e7a5      	b.n	800dbc8 <lv_draw_label+0x1b8>
            lv_color_t color = style->text.color;
 800dc7c:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
                        cmd_state = CMD_STATE_WAIT;
 800dc80:	2500      	movs	r5, #0
 800dc82:	e76f      	b.n	800db64 <lv_draw_label+0x154>
        lv_txt_get_size(&p, txt, style->text.font, style->text.letter_space, style->text.line_space, LV_COORD_MAX, flag);
 800dc84:	f9b8 0032 	ldrsh.w	r0, [r8, #50]	; 0x32
 800dc88:	4614      	mov	r4, r2
 800dc8a:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800dc8e:	f9b8 3030 	ldrsh.w	r3, [r8, #48]	; 0x30
 800dc92:	4632      	mov	r2, r6
 800dc94:	9402      	str	r4, [sp, #8]
 800dc96:	9101      	str	r1, [sp, #4]
 800dc98:	4639      	mov	r1, r7
 800dc9a:	9000      	str	r0, [sp, #0]
 800dc9c:	a814      	add	r0, sp, #80	; 0x50
 800dc9e:	f006 f837 	bl	8013d10 <lv_txt_get_size>
        w = p.x;
 800dca2:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
 800dca6:	930d      	str	r3, [sp, #52]	; 0x34
 800dca8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dcaa:	f9b3 4000 	ldrsh.w	r4, [r3]
 800dcae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dcb0:	e6c5      	b.n	800da3e <lv_draw_label+0x2e>
                            memcpy(buf, &txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 800dcb2:	9a05      	ldr	r2, [sp, #20]
 800dcb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dcb6:	4413      	add	r3, r2
 800dcb8:	6818      	ldr	r0, [r3, #0]
 800dcba:	889b      	ldrh	r3, [r3, #4]
                            r = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 800dcbc:	b2c2      	uxtb	r2, r0
                            memcpy(buf, &txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 800dcbe:	9014      	str	r0, [sp, #80]	; 0x50
 800dcc0:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
 */
static uint8_t hex_char_to_num(char hex)
{
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
 800dcc4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800dcc8:	b2db      	uxtb	r3, r3
 800dcca:	2b09      	cmp	r3, #9
 800dccc:	d90b      	bls.n	800dce6 <lv_draw_label+0x2d6>
        result = hex - '0';
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A';    /*Convert to upper case*/
 800dcce:	2a60      	cmp	r2, #96	; 0x60
 800dcd0:	d901      	bls.n	800dcd6 <lv_draw_label+0x2c6>
 800dcd2:	3a20      	subs	r2, #32
 800dcd4:	b2d2      	uxtb	r2, r2
 800dcd6:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	2b05      	cmp	r3, #5
 800dcde:	f200 80a8 	bhi.w	800de32 <lv_draw_label+0x422>
 800dce2:	4a59      	ldr	r2, [pc, #356]	; (800de48 <lv_draw_label+0x438>)
 800dce4:	5cd3      	ldrb	r3, [r2, r3]
 800dce6:	011b      	lsls	r3, r3, #4
                            r = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 800dce8:	f89d 1051 	ldrb.w	r1, [sp, #81]	; 0x51
    if(hex >= '0' && hex <= '9') {
 800dcec:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800dcf0:	b2d2      	uxtb	r2, r2
 800dcf2:	2a09      	cmp	r2, #9
 800dcf4:	d90b      	bls.n	800dd0e <lv_draw_label+0x2fe>
        if(hex >= 'a') hex -= 'a' - 'A';    /*Convert to upper case*/
 800dcf6:	2960      	cmp	r1, #96	; 0x60
 800dcf8:	d901      	bls.n	800dcfe <lv_draw_label+0x2ee>
 800dcfa:	3920      	subs	r1, #32
 800dcfc:	b2c9      	uxtb	r1, r1
 800dcfe:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
 800dd02:	b2d2      	uxtb	r2, r2
 800dd04:	2a05      	cmp	r2, #5
 800dd06:	f200 8098 	bhi.w	800de3a <lv_draw_label+0x42a>
 800dd0a:	494f      	ldr	r1, [pc, #316]	; (800de48 <lv_draw_label+0x438>)
 800dd0c:	5c8a      	ldrb	r2, [r1, r2]
                            g = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 800dd0e:	f89d 1052 	ldrb.w	r1, [sp, #82]	; 0x52
                            r = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 800dd12:	4413      	add	r3, r2
    if(hex >= '0' && hex <= '9') {
 800dd14:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800dd18:	b2d2      	uxtb	r2, r2
 800dd1a:	2a09      	cmp	r2, #9
 800dd1c:	d90b      	bls.n	800dd36 <lv_draw_label+0x326>
        if(hex >= 'a') hex -= 'a' - 'A';    /*Convert to upper case*/
 800dd1e:	2960      	cmp	r1, #96	; 0x60
 800dd20:	d901      	bls.n	800dd26 <lv_draw_label+0x316>
 800dd22:	3920      	subs	r1, #32
 800dd24:	b2c9      	uxtb	r1, r1
 800dd26:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
 800dd2a:	b2d2      	uxtb	r2, r2
 800dd2c:	2a05      	cmp	r2, #5
 800dd2e:	f200 8088 	bhi.w	800de42 <lv_draw_label+0x432>
 800dd32:	4945      	ldr	r1, [pc, #276]	; (800de48 <lv_draw_label+0x438>)
 800dd34:	5c8a      	ldrb	r2, [r1, r2]
 800dd36:	0112      	lsls	r2, r2, #4
                            g = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 800dd38:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    if(hex >= '0' && hex <= '9') {
 800dd3c:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
 800dd40:	b2c9      	uxtb	r1, r1
 800dd42:	2909      	cmp	r1, #9
 800dd44:	d90a      	bls.n	800dd5c <lv_draw_label+0x34c>
        if(hex >= 'a') hex -= 'a' - 'A';    /*Convert to upper case*/
 800dd46:	2860      	cmp	r0, #96	; 0x60
 800dd48:	d901      	bls.n	800dd4e <lv_draw_label+0x33e>
 800dd4a:	3820      	subs	r0, #32
 800dd4c:	b2c0      	uxtb	r0, r0
 800dd4e:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 800dd52:	b2c9      	uxtb	r1, r1
 800dd54:	2905      	cmp	r1, #5
 800dd56:	d872      	bhi.n	800de3e <lv_draw_label+0x42e>
 800dd58:	483b      	ldr	r0, [pc, #236]	; (800de48 <lv_draw_label+0x438>)
 800dd5a:	5c41      	ldrb	r1, [r0, r1]
                            b = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 800dd5c:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
                            g = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 800dd60:	440a      	add	r2, r1
    if(hex >= '0' && hex <= '9') {
 800dd62:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
 800dd66:	b2c9      	uxtb	r1, r1
 800dd68:	2909      	cmp	r1, #9
 800dd6a:	d90a      	bls.n	800dd82 <lv_draw_label+0x372>
        if(hex >= 'a') hex -= 'a' - 'A';    /*Convert to upper case*/
 800dd6c:	2860      	cmp	r0, #96	; 0x60
 800dd6e:	d901      	bls.n	800dd74 <lv_draw_label+0x364>
 800dd70:	3820      	subs	r0, #32
 800dd72:	b2c0      	uxtb	r0, r0
 800dd74:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 800dd78:	b2c9      	uxtb	r1, r1
 800dd7a:	2905      	cmp	r1, #5
 800dd7c:	d85b      	bhi.n	800de36 <lv_draw_label+0x426>
 800dd7e:	4832      	ldr	r0, [pc, #200]	; (800de48 <lv_draw_label+0x438>)
 800dd80:	5c41      	ldrb	r1, [r0, r1]
 800dd82:	0109      	lsls	r1, r1, #4
                            b = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 800dd84:	f89d 5055 	ldrb.w	r5, [sp, #85]	; 0x55
    if(hex >= '0' && hex <= '9') {
 800dd88:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 800dd8c:	b2c0      	uxtb	r0, r0
 800dd8e:	2809      	cmp	r0, #9
 800dd90:	d90a      	bls.n	800dda8 <lv_draw_label+0x398>
        if(hex >= 'a') hex -= 'a' - 'A';    /*Convert to upper case*/
 800dd92:	2d60      	cmp	r5, #96	; 0x60
 800dd94:	d901      	bls.n	800dd9a <lv_draw_label+0x38a>
 800dd96:	3d20      	subs	r5, #32
 800dd98:	b2ed      	uxtb	r5, r5
 800dd9a:	f1a5 0041 	sub.w	r0, r5, #65	; 0x41
 800dd9e:	b2c0      	uxtb	r0, r0
 800dda0:	2805      	cmp	r0, #5
 800dda2:	d844      	bhi.n	800de2e <lv_draw_label+0x41e>
 800dda4:	4d28      	ldr	r5, [pc, #160]	; (800de48 <lv_draw_label+0x438>)
 800dda6:	5c28      	ldrb	r0, [r5, r0]
                            b = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 800dda8:	4408      	add	r0, r1
                            recolor = LV_COLOR_MAKE(r, g, b);
 800ddaa:	990b      	ldr	r1, [sp, #44]	; 0x2c
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 800ddac:	2502      	movs	r5, #2
                            recolor = LV_COLOR_MAKE(r, g, b);
 800ddae:	f360 0107 	bfi	r1, r0, #0, #8
 800ddb2:	f362 210f 	bfi	r1, r2, #8, #8
 800ddb6:	f363 4117 	bfi	r1, r3, #16, #8
 800ddba:	f041 437f 	orr.w	r3, r1, #4278190080	; 0xff000000
 800ddbe:	930b      	str	r3, [sp, #44]	; 0x2c
 800ddc0:	e6be      	b.n	800db40 <lv_draw_label+0x130>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start,
 800ddc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ddc4:	1b29      	subs	r1, r5, r4
 800ddc6:	f9b8 3030 	ldrsh.w	r3, [r8, #48]	; 0x30
 800ddca:	1938      	adds	r0, r7, r4
 800ddcc:	9200      	str	r2, [sp, #0]
 800ddce:	b289      	uxth	r1, r1
 800ddd0:	4632      	mov	r2, r6
 800ddd2:	f006 f871 	bl	8013eb8 <lv_txt_get_width>
 800ddd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ddd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ddda:	8893      	ldrh	r3, [r2, #4]
 800dddc:	8812      	ldrh	r2, [r2, #0]
 800ddde:	f001 0a08 	and.w	sl, r1, #8
 800dde2:	3301      	adds	r3, #1
 800dde4:	1a9b      	subs	r3, r3, r2
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800dde6:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 800ddea:	b21b      	sxth	r3, r3
 800ddec:	1a1b      	subs	r3, r3, r0
 800ddee:	bf48      	it	mi
 800ddf0:	3301      	addmi	r3, #1
 800ddf2:	eb02 0363 	add.w	r3, r2, r3, asr #1
 800ddf6:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 800ddfa:	e66c      	b.n	800dad6 <lv_draw_label+0xc6>
 800ddfc:	461a      	mov	r2, r3
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start,
 800ddfe:	1b29      	subs	r1, r5, r4
 800de00:	f9b8 3030 	ldrsh.w	r3, [r8, #48]	; 0x30
 800de04:	1938      	adds	r0, r7, r4
 800de06:	9200      	str	r2, [sp, #0]
 800de08:	b289      	uxth	r1, r1
 800de0a:	4632      	mov	r2, r6
 800de0c:	f006 f854 	bl	8013eb8 <lv_txt_get_width>
 800de10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800de12:	8893      	ldrh	r3, [r2, #4]
 800de14:	8811      	ldrh	r1, [r2, #0]
 800de16:	3301      	adds	r3, #1
        pos.x += lv_area_get_width(coords) - line_width;
 800de18:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 800de1c:	1a5b      	subs	r3, r3, r1
 800de1e:	b21b      	sxth	r3, r3
 800de20:	1a1b      	subs	r3, r3, r0
 800de22:	4413      	add	r3, r2
 800de24:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 800de28:	e655      	b.n	800dad6 <lv_draw_label+0xc6>
    lv_coord_t x_ofs = 0;
 800de2a:	9310      	str	r3, [sp, #64]	; 0x40
 800de2c:	e66c      	b.n	800db08 <lv_draw_label+0xf8>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800de2e:	2000      	movs	r0, #0
 800de30:	e7ba      	b.n	800dda8 <lv_draw_label+0x398>
 800de32:	2300      	movs	r3, #0
 800de34:	e758      	b.n	800dce8 <lv_draw_label+0x2d8>
 800de36:	2100      	movs	r1, #0
 800de38:	e7a4      	b.n	800dd84 <lv_draw_label+0x374>
 800de3a:	2200      	movs	r2, #0
 800de3c:	e767      	b.n	800dd0e <lv_draw_label+0x2fe>
 800de3e:	2100      	movs	r1, #0
 800de40:	e78c      	b.n	800dd5c <lv_draw_label+0x34c>
 800de42:	2200      	movs	r2, #0
 800de44:	e778      	b.n	800dd38 <lv_draw_label+0x328>
 800de46:	bf00      	nop
 800de48:	0808b630 	.word	0x0808b630
 800de4c:	0808b608 	.word	0x0808b608
 800de50:	200002e0 	.word	0x200002e0

0800de54 <lv_draw_line>:
 * @param style pointer to a line's style
 * @param opa_scale scale down all opacities by the factor
 */
void lv_draw_line(const lv_point_t * point1, const lv_point_t * point2, const lv_area_t * mask,
        const lv_style_t * style, lv_opa_t opa_scale)
{
 800de54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de58:	b0a5      	sub	sp, #148	; 0x94
 800de5a:	af02      	add	r7, sp, #8

    if(style->line.width == 0) return;
 800de5c:	f9b3 4044 	ldrsh.w	r4, [r3, #68]	; 0x44
{
 800de60:	f897 e0b0 	ldrb.w	lr, [r7, #176]	; 0xb0
    if(style->line.width == 0) return;
 800de64:	677c      	str	r4, [r7, #116]	; 0x74
 800de66:	2c00      	cmp	r4, #0
 800de68:	f000 8153 	beq.w	800e112 <lv_draw_line+0x2be>
    if(point1->x == point2->x && point1->y == point2->y) return;
 800de6c:	f9b0 4000 	ldrsh.w	r4, [r0]
 800de70:	4694      	mov	ip, r2
 800de72:	f9b1 6000 	ldrsh.w	r6, [r1]
 800de76:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800de7a:	42b4      	cmp	r4, r6
 800de7c:	64fc      	str	r4, [r7, #76]	; 0x4c
 800de7e:	65be      	str	r6, [r7, #88]	; 0x58
 800de80:	64ba      	str	r2, [r7, #72]	; 0x48
 800de82:	f000 8181 	beq.w	800e188 <lv_draw_line+0x334>
 800de86:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 800de8a:	663a      	str	r2, [r7, #96]	; 0x60
 800de8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
    lv_point_t p1;
    lv_point_t p2;

    /*If the line if rather vertical then be sure y1 < y2 else x1 < x2*/

    if(LV_MATH_ABS(point1->x - point2->x) > LV_MATH_ABS(point1->y - point2->y)) {
 800de8e:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 800de90:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800de92:	1bac      	subs	r4, r5, r6
 800de94:	66fe      	str	r6, [r7, #108]	; 0x6c
 800de96:	1a50      	subs	r0, r2, r1
 800de98:	4629      	mov	r1, r5
 800de9a:	ea84 79e4 	eor.w	r9, r4, r4, asr #31
 800de9e:	ea80 78e0 	eor.w	r8, r0, r0, asr #31
 800dea2:	eba9 79e4 	sub.w	r9, r9, r4, asr #31
 800dea6:	eba8 78e0 	sub.w	r8, r8, r0, asr #31
 800deaa:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800deac:	45c1      	cmp	r9, r8
 800deae:	65f8      	str	r0, [r7, #92]	; 0x5c
 800deb0:	f340 8133 	ble.w	800e11a <lv_draw_line+0x2c6>

        /*Steps less in y then x -> rather horizontal*/
        if(point1->x < point2->x) {
 800deb4:	42b5      	cmp	r5, r6
 800deb6:	f2c0 816e 	blt.w	800e196 <lv_draw_line+0x342>
    line->p1.x = p1->x;
    line->p1.y = p1->y;
    line->p2.x = p2->x;
    line->p2.y = p2->y;

    line->dx = LV_MATH_ABS(line->p2.x - line->p1.x);
 800deba:	fa0f f289 	sxth.w	r2, r9
    line->sx = line->p1.x < line->p2.x ? 1 : -1;
 800debe:	6db9      	ldr	r1, [r7, #88]	; 0x58
    line->dx = LV_MATH_ABS(line->p2.x - line->p1.x);
 800dec0:	673a      	str	r2, [r7, #112]	; 0x70
    line->sx = line->p1.x < line->p2.x ? 1 : -1;
 800dec2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dec4:	428a      	cmp	r2, r1
 800dec6:	bfd4      	ite	le
 800dec8:	f04f 32ff 	movle.w	r2, #4294967295
 800decc:	2201      	movgt	r2, #1
 800dece:	66ba      	str	r2, [r7, #104]	; 0x68
 800ded0:	6cba      	ldr	r2, [r7, #72]	; 0x48
    line->dy = LV_MATH_ABS(line->p2.y - line->p1.y);
    line->sy = line->p1.y < line->p2.y ? 1 : -1;
 800ded2:	6e39      	ldr	r1, [r7, #96]	; 0x60
    line->dy = LV_MATH_ABS(line->p2.y - line->p1.y);
 800ded4:	fa0f fa88 	sxth.w	sl, r8
    line->sy = line->p1.y < line->p2.y ? 1 : -1;
 800ded8:	428a      	cmp	r2, r1
 800deda:	bfd4      	ite	le
 800dedc:	f04f 32ff 	movle.w	r2, #4294967295
 800dee0:	2201      	movgt	r2, #1
 800dee2:	667a      	str	r2, [r7, #100]	; 0x64
    line->err = (line->dx > line->dy ? line->dx : -line->dy) / 2;
 800dee4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800dee6:	4592      	cmp	sl, r2
 800dee8:	f2c0 816d 	blt.w	800e1c6 <lv_draw_line+0x372>
 800deec:	f1ba 0f00 	cmp.w	sl, #0
 800def0:	4654      	mov	r4, sl
 800def2:	bfb8      	it	lt
 800def4:	f10a 0401 	addlt.w	r4, sl, #1
 800def8:	1064      	asrs	r4, r4, #1
 800defa:	4264      	negs	r4, r4
 800defc:	b224      	sxth	r4, r4
 800defe:	4699      	mov	r9, r3
    if(main_line.p1.y == main_line.p2.y) {
 800df00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800df02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df04:	46e3      	mov	fp, ip
 800df06:	4293      	cmp	r3, r2
 800df08:	f000 80c7 	beq.w	800e09a <lv_draw_line+0x246>
    else if(main_line.p1.x == main_line.p2.x) {
 800df0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800df10:	4293      	cmp	r3, r2
 800df12:	f000 8169 	beq.w	800e1e8 <lv_draw_line+0x394>
        if(main_line.hor) {
 800df16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800df18:	459a      	cmp	sl, r3
 800df1a:	f2c0 8129 	blt.w	800e170 <lv_draw_line+0x31c>
            if(main_line.p1.x < main_line.p2.x) {
 800df1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df20:	4293      	cmp	r3, r2
 800df22:	f300 8663 	bgt.w	800ebec <lv_draw_line+0xd98>
            else if(main_line.p1.x > main_line.p2.x) {
 800df26:	f2c0 8722 	blt.w	800ed6e <lv_draw_line+0xf1a>
 800df2a:	2300      	movs	r3, #0
 800df2c:	637b      	str	r3, [r7, #52]	; 0x34
    line->e2 = 0;
    line->hor = line->dx > line->dy ? true : false; /*Rather horizontal or vertical*/
 800df2e:	643b      	str	r3, [r7, #64]	; 0x40
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t) style->line.opa * opa_scale) >> 8;
 800df30:	f1be 0fff 	cmp.w	lr, #255	; 0xff
{
 800df34:	f8c7 d014 	str.w	sp, [r7, #20]
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t) style->line.opa * opa_scale) >> 8;
 800df38:	f899 3046 	ldrb.w	r3, [r9, #70]	; 0x46
 800df3c:	d003      	beq.n	800df46 <lv_draw_line+0xf2>
 800df3e:	fb03 f50e 	mul.w	r5, r3, lr
 800df42:	f3c5 2307 	ubfx	r3, r5, #8, #8
    vect_main.y = main_line->p2.y - main_line->p1.y;
 800df46:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    vect_main.x = main_line->p2.x - main_line->p1.x;
 800df48:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
    vect_main.y = main_line->p2.y - main_line->p1.y;
 800df4c:	f8b7 0060 	ldrh.w	r0, [r7, #96]	; 0x60
 800df50:	b2b1      	uxth	r1, r6
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t) style->line.opa * opa_scale) >> 8;
 800df52:	653b      	str	r3, [r7, #80]	; 0x50
    vect_main.x = main_line->p2.x - main_line->p1.x;
 800df54:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
    vect_main.y = main_line->p2.y - main_line->p1.y;
 800df58:	6339      	str	r1, [r7, #48]	; 0x30
 800df5a:	1a09      	subs	r1, r1, r0
    vect_main.x = main_line->p2.x - main_line->p1.x;
 800df5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800df5e:	1a9b      	subs	r3, r3, r2
    if(main_line->hor) {
 800df60:	6c3d      	ldr	r5, [r7, #64]	; 0x40
    vect_main.y = main_line->p2.y - main_line->p1.y;
 800df62:	b289      	uxth	r1, r1
    vect_main.x = main_line->p2.x - main_line->p1.x;
 800df64:	b29b      	uxth	r3, r3
 800df66:	62fa      	str	r2, [r7, #44]	; 0x2c
    vect_main.y = main_line->p2.y - main_line->p1.y;
 800df68:	6278      	str	r0, [r7, #36]	; 0x24
 800df6a:	b20a      	sxth	r2, r1
    if(main_line->hor) {
 800df6c:	61fd      	str	r5, [r7, #28]
    vect_main.x = main_line->p2.x - main_line->p1.x;
 800df6e:	b218      	sxth	r0, r3
    if(main_line->hor) {
 800df70:	2d00      	cmp	r5, #0
 800df72:	f000 812f 	beq.w	800e1d4 <lv_draw_line+0x380>
        if(main_line->p1.y < main_line->p2.y + dir_ori) {
 800df76:	4635      	mov	r5, r6
 800df78:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 800df7a:	4435      	add	r5, r6
 800df7c:	6dfe      	ldr	r6, [r7, #92]	; 0x5c
 800df7e:	42b5      	cmp	r5, r6
 800df80:	f340 812f 	ble.w	800e1e2 <lv_draw_line+0x38e>
            vect_norm.x = - vect_main.y;
 800df84:	424a      	negs	r2, r1
 800df86:	b212      	sxth	r2, r2
    vect_norm.x = vect_norm.x << 4;
 800df88:	0113      	lsls	r3, r2, #4
    lv_point_t pattern[width * 2];
 800df8a:	6f7e      	ldr	r6, [r7, #116]	; 0x74
    vect_norm.y = vect_norm.y << 4;
 800df8c:	0100      	lsls	r0, r0, #4
    line->sx = line->p1.x < line->p2.x ? 1 : -1;
 800df8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    vect_norm.x = vect_norm.x << 4;
 800df92:	b21b      	sxth	r3, r3
    lv_point_t pattern[width * 2];
 800df94:	623e      	str	r6, [r7, #32]
    vect_norm.y = vect_norm.y << 4;
 800df96:	b201      	sxth	r1, r0
    lv_point_t pattern[width * 2];
 800df98:	4630      	mov	r0, r6
    line->sx = line->p1.x < line->p2.x ? 1 : -1;
 800df9a:	2b00      	cmp	r3, #0
    vect_norm.x = vect_norm.x << 4;
 800df9c:	61bb      	str	r3, [r7, #24]
    vect_norm.y = vect_norm.y << 4;
 800df9e:	460d      	mov	r5, r1
 800dfa0:	62b9      	str	r1, [r7, #40]	; 0x28
    line->sx = line->p1.x < line->p2.x ? 1 : -1;
 800dfa2:	bfd4      	ite	le
 800dfa4:	4610      	movle	r0, r2
 800dfa6:	2001      	movgt	r0, #1
    line->dy = LV_MATH_ABS(line->p2.y - line->p1.y);
 800dfa8:	2d00      	cmp	r5, #0
    line->sx = line->p1.x < line->p2.x ? 1 : -1;
 800dfaa:	4619      	mov	r1, r3
 800dfac:	6578      	str	r0, [r7, #84]	; 0x54
    line->dy = LV_MATH_ABS(line->p2.y - line->p1.y);
 800dfae:	4628      	mov	r0, r5
 800dfb0:	bfb8      	it	lt
 800dfb2:	4268      	neglt	r0, r5
    line->sy = line->p1.y < line->p2.y ? 1 : -1;
 800dfb4:	2d00      	cmp	r5, #0
    lv_point_t pattern[width * 2];
 800dfb6:	ea4f 03c6 	mov.w	r3, r6, lsl #3
    line->sy = line->p1.y < line->p2.y ? 1 : -1;
 800dfba:	bfc8      	it	gt
 800dfbc:	2201      	movgt	r2, #1
    line->dx = LV_MATH_ABS(line->p2.x - line->p1.x);
 800dfbe:	2900      	cmp	r1, #0
    lv_point_t pattern[width * 2];
 800dfc0:	f103 0308 	add.w	r3, r3, #8
    line->dy = LV_MATH_ABS(line->p2.y - line->p1.y);
 800dfc4:	fa0f fe80 	sxth.w	lr, r0
    line->sy = line->p1.y < line->p2.y ? 1 : -1;
 800dfc8:	613a      	str	r2, [r7, #16]
    line->dx = LV_MATH_ABS(line->p2.x - line->p1.x);
 800dfca:	460a      	mov	r2, r1
 800dfcc:	bfb8      	it	lt
 800dfce:	424a      	neglt	r2, r1
    lv_point_t pattern[width * 2];
 800dfd0:	ebad 0d03 	sub.w	sp, sp, r3
 800dfd4:	ea4f 0c46 	mov.w	ip, r6, lsl #1
    line->dy = LV_MATH_ABS(line->p2.y - line->p1.y);
 800dfd8:	63b8      	str	r0, [r7, #56]	; 0x38
    line->dx = LV_MATH_ABS(line->p2.x - line->p1.x);
 800dfda:	fa0f f882 	sxth.w	r8, r2
    lv_point_t pattern[width * 2];
 800dfde:	ab02      	add	r3, sp, #8
    line->dx = LV_MATH_ABS(line->p2.x - line->p1.x);
 800dfe0:	60fa      	str	r2, [r7, #12]
    line->err = (line->dx > line->dy ? line->dx : -line->dy) / 2;
 800dfe2:	45f0      	cmp	r8, lr
    lv_point_t pattern[width * 2];
 800dfe4:	647b      	str	r3, [r7, #68]	; 0x44
    line->err = (line->dx > line->dy ? line->dx : -line->dy) / 2;
 800dfe6:	f300 86b9 	bgt.w	800ed5c <lv_draw_line+0xf08>
 800dfea:	f1be 0f00 	cmp.w	lr, #0
 800dfee:	4673      	mov	r3, lr
 800dff0:	bfb8      	it	lt
 800dff2:	f10e 0301 	addlt.w	r3, lr, #1
 800dff6:	105b      	asrs	r3, r3, #1
 800dff8:	425b      	negs	r3, r3
 800dffa:	b21b      	sxth	r3, r3
        for(i = 0; i < (lv_coord_t)sizeof(pattern); i ++) {
 800dffc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        uint32_t width_sqr = width * width;
 800e000:	6f7a      	ldr	r2, [r7, #116]	; 0x74
        for(i = 0; i < (lv_coord_t)sizeof(pattern); i ++) {
 800e002:	fa0f fc8c 	sxth.w	ip, ip
        uint32_t width_sqr = width * width;
 800e006:	fb02 f202 	mul.w	r2, r2, r2
        for(i = 0; i < (lv_coord_t)sizeof(pattern); i ++) {
 800e00a:	f1bc 0f00 	cmp.w	ip, #0
        uint32_t width_sqr = width * width;
 800e00e:	4611      	mov	r1, r2
        for(i = 0; i < (lv_coord_t)sizeof(pattern); i ++) {
 800e010:	f340 812f 	ble.w	800e272 <lv_draw_line+0x41e>
            pattern[i].x = pattern_line.p_act.x;
 800e014:	2200      	movs	r2, #0
 800e016:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e018:	6002      	str	r2, [r0, #0]
            if(sqr >= width_sqr) {
 800e01a:	2900      	cmp	r1, #0
 800e01c:	f000 8757 	beq.w	800eece <lv_draw_line+0x107a>
 800e020:	4606      	mov	r6, r0
 800e022:	f8c7 a004 	str.w	sl, [r7, #4]
 800e026:	f8c7 b000 	str.w	fp, [r7]

static bool line_next(line_draw_t * line)
{
    if(line->p_act.x == line->p2.x && line->p_act.y == line->p2.y) return false;
    line->e2 = line->err;
    if(line->e2 > -line->dx) {
 800e02a:	f1c8 0800 	rsb	r8, r8, #0
 800e02e:	f8d7 a010 	ldr.w	sl, [r7, #16]
            if(sqr >= width_sqr) {
 800e032:	4610      	mov	r0, r2
 800e034:	f8c7 9010 	str.w	r9, [r7, #16]
 800e038:	4615      	mov	r5, r2
 800e03a:	60bc      	str	r4, [r7, #8]
 800e03c:	4689      	mov	r9, r1
 800e03e:	f8d7 b00c 	ldr.w	fp, [r7, #12]
 800e042:	e01d      	b.n	800e080 <lv_draw_line+0x22c>
        line->err -= line->dy;
        line->p_act.x += line->sx;
 800e044:	6d79      	ldr	r1, [r7, #84]	; 0x54
    }
    if(line->e2 < line->dy) {
 800e046:	4573      	cmp	r3, lr
        line->p_act.x += line->sx;
 800e048:	4408      	add	r0, r1
        line->err -= line->dy;
 800e04a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e04c:	eba3 0101 	sub.w	r1, r3, r1
        line->p_act.x += line->sx;
 800e050:	b200      	sxth	r0, r0
        line->err -= line->dy;
 800e052:	b209      	sxth	r1, r1
    if(line->e2 < line->dy) {
 800e054:	da1f      	bge.n	800e096 <lv_draw_line+0x242>
        line->err += line->dx;
 800e056:	eb01 030b 	add.w	r3, r1, fp
        line->p_act.y += line->sy;
 800e05a:	4452      	add	r2, sl
        line->err += line->dx;
 800e05c:	b21b      	sxth	r3, r3
        line->p_act.y += line->sy;
 800e05e:	b212      	sxth	r2, r2
 800e060:	1c6c      	adds	r4, r5, #1
 800e062:	b224      	sxth	r4, r4
        for(i = 0; i < (lv_coord_t)sizeof(pattern); i ++) {
 800e064:	45a4      	cmp	ip, r4
 800e066:	f000 80fd 	beq.w	800e264 <lv_draw_line+0x410>
            uint32_t  sqr = pattern_line.p_act.x * pattern_line.p_act.x + pattern_line.p_act.y * pattern_line.p_act.y;
 800e06a:	fb02 f102 	mul.w	r1, r2, r2
 800e06e:	3604      	adds	r6, #4
            pattern[i].x = pattern_line.p_act.x;
 800e070:	8030      	strh	r0, [r6, #0]
            uint32_t  sqr = pattern_line.p_act.x * pattern_line.p_act.x + pattern_line.p_act.y * pattern_line.p_act.y;
 800e072:	fb00 1100 	mla	r1, r0, r0, r1
            pattern[i].y = pattern_line.p_act.y;
 800e076:	8072      	strh	r2, [r6, #2]
            if(sqr >= width_sqr) {
 800e078:	4589      	cmp	r9, r1
 800e07a:	f240 860c 	bls.w	800ec96 <lv_draw_line+0xe42>
 800e07e:	4625      	mov	r5, r4
    if(line->p_act.x == line->p2.x && line->p_act.y == line->p2.y) return false;
 800e080:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e082:	4291      	cmp	r1, r2
 800e084:	d102      	bne.n	800e08c <lv_draw_line+0x238>
 800e086:	69b9      	ldr	r1, [r7, #24]
 800e088:	4281      	cmp	r1, r0
 800e08a:	d0e9      	beq.n	800e060 <lv_draw_line+0x20c>
    if(line->e2 > -line->dx) {
 800e08c:	4543      	cmp	r3, r8
 800e08e:	dcd9      	bgt.n	800e044 <lv_draw_line+0x1f0>
    if(line->e2 < line->dy) {
 800e090:	4573      	cmp	r3, lr
    if(line->e2 > -line->dx) {
 800e092:	4619      	mov	r1, r3
    if(line->e2 < line->dy) {
 800e094:	dbdf      	blt.n	800e056 <lv_draw_line+0x202>
 800e096:	460b      	mov	r3, r1
 800e098:	e7e2      	b.n	800e060 <lv_draw_line+0x20c>
    lv_coord_t width = style->line.width - 1;
 800e09a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t) style->line.opa * opa_scale) >> 8;
 800e09c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 800e0a0:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
    lv_coord_t width = style->line.width - 1;
 800e0a4:	f103 34ff 	add.w	r4, r3, #4294967295
 800e0a8:	f899 3046 	ldrb.w	r3, [r9, #70]	; 0x46
 800e0ac:	b224      	sxth	r4, r4
    lv_coord_t width_half = width >> 1;
 800e0ae:	ea4f 0164 	mov.w	r1, r4, asr #1
    lv_coord_t width_1 = width & 0x1;
 800e0b2:	f004 0601 	and.w	r6, r4, #1
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t) style->line.opa * opa_scale) >> 8;
 800e0b6:	d003      	beq.n	800e0c0 <lv_draw_line+0x26c>
 800e0b8:	fb03 f30e 	mul.w	r3, r3, lr
 800e0bc:	f3c3 2307 	ubfx	r3, r3, #8, #8
    draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
 800e0c0:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
    act_area.y1 = main_line->p1.y - width_half - width_1;
 800e0c2:	b28d      	uxth	r5, r1
 800e0c4:	f8b7 0060 	ldrh.w	r0, [r7, #96]	; 0x60
    fill_fp(&draw_area, mask, style->line.color, opa);
 800e0c8:	4659      	mov	r1, fp
    draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
 800e0ca:	46a6      	mov	lr, r4
 800e0cc:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800e0ce:	45a6      	cmp	lr, r4
 800e0d0:	bfa8      	it	ge
 800e0d2:	46a6      	movge	lr, r4
    act_area.y1 = main_line->p1.y - width_half - width_1;
 800e0d4:	1b44      	subs	r4, r0, r5
    act_area.y2 = main_line->p2.y + width_half ;
 800e0d6:	4428      	add	r0, r5
    draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
 800e0d8:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
    act_area.y1 = main_line->p1.y - width_half - width_1;
 800e0da:	1ba4      	subs	r4, r4, r6
    draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
 800e0dc:	f8a7 e080 	strh.w	lr, [r7, #128]	; 0x80
    draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
 800e0e0:	46ac      	mov	ip, r5
 800e0e2:	6dbd      	ldr	r5, [r7, #88]	; 0x58
    act_area.y2 = main_line->p2.y + width_half ;
 800e0e4:	b206      	sxth	r6, r0
    fill_fp(&draw_area, mask, style->line.color, opa);
 800e0e6:	f107 0080 	add.w	r0, r7, #128	; 0x80
    act_area.y1 = main_line->p1.y - width_half - width_1;
 800e0ea:	b224      	sxth	r4, r4
    draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
 800e0ec:	45ac      	cmp	ip, r5
 800e0ee:	bfb8      	it	lt
 800e0f0:	46ac      	movlt	ip, r5
    draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
 800e0f2:	42b4      	cmp	r4, r6
 800e0f4:	46a6      	mov	lr, r4
    fill_fp(&draw_area, mask, style->line.color, opa);
 800e0f6:	4d7a      	ldr	r5, [pc, #488]	; (800e2e0 <lv_draw_line+0x48c>)
    draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
 800e0f8:	bfa8      	it	ge
 800e0fa:	46b6      	movge	lr, r6
    draw_area.y2 = LV_MATH_MAX(act_area.y1, act_area.y2);
 800e0fc:	42b4      	cmp	r4, r6
    draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
 800e0fe:	f8a7 c084 	strh.w	ip, [r7, #132]	; 0x84
    draw_area.y2 = LV_MATH_MAX(act_area.y1, act_area.y2);
 800e102:	bfb8      	it	lt
 800e104:	4634      	movlt	r4, r6
    fill_fp(&draw_area, mask, style->line.color, opa);
 800e106:	682d      	ldr	r5, [r5, #0]
    draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
 800e108:	f8a7 e082 	strh.w	lr, [r7, #130]	; 0x82
    draw_area.y2 = LV_MATH_MAX(act_area.y1, act_area.y2);
 800e10c:	f8a7 4086 	strh.w	r4, [r7, #134]	; 0x86
    fill_fp(&draw_area, mask, style->line.color, opa);
 800e110:	47a8      	blx	r5
}
 800e112:	378c      	adds	r7, #140	; 0x8c
 800e114:	46bd      	mov	sp, r7
 800e116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(point1->y < point2->y) {
 800e11a:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 800e11c:	4610      	mov	r0, r2
 800e11e:	42aa      	cmp	r2, r5
 800e120:	f6bf aecb 	bge.w	800deba <lv_draw_line+0x66>
    line->dx = LV_MATH_ABS(line->p2.x - line->p1.x);
 800e124:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
    line->sx = line->p1.x < line->p2.x ? 1 : -1;
 800e126:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    line->dx = LV_MATH_ABS(line->p2.x - line->p1.x);
 800e128:	eba6 0804 	sub.w	r8, r6, r4
 800e12c:	1a2c      	subs	r4, r5, r0
 800e12e:	ea88 70e8 	eor.w	r0, r8, r8, asr #31
 800e132:	4625      	mov	r5, r4
 800e134:	ea84 74e4 	eor.w	r4, r4, r4, asr #31
 800e138:	eba0 70e8 	sub.w	r0, r0, r8, asr #31
 800e13c:	eba4 74e5 	sub.w	r4, r4, r5, asr #31
 800e140:	b200      	sxth	r0, r0
 800e142:	6738      	str	r0, [r7, #112]	; 0x70
    line->sx = line->p1.x < line->p2.x ? 1 : -1;
 800e144:	4610      	mov	r0, r2
 800e146:	42b0      	cmp	r0, r6
 800e148:	f2c0 85f7 	blt.w	800ed3a <lv_draw_line+0xee6>
    line->dy = LV_MATH_ABS(line->p2.y - line->p1.y);
 800e14c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e14e:	fa0f fa84 	sxth.w	sl, r4
 800e152:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800e154:	65ba      	str	r2, [r7, #88]	; 0x58
 800e156:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e158:	66f9      	str	r1, [r7, #108]	; 0x6c
 800e15a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800e15c:	6cba      	ldr	r2, [r7, #72]	; 0x48
            p2.y = point2->y;
 800e15e:	64b8      	str	r0, [r7, #72]	; 0x48
    line->dy = LV_MATH_ABS(line->p2.y - line->p1.y);
 800e160:	65fa      	str	r2, [r7, #92]	; 0x5c
            p1.y = point1->y;
 800e162:	663a      	str	r2, [r7, #96]	; 0x60
    line->sx = line->p1.x < line->p2.x ? 1 : -1;
 800e164:	f04f 32ff 	mov.w	r2, #4294967295
 800e168:	66ba      	str	r2, [r7, #104]	; 0x68
    line->sy = line->p1.y < line->p2.y ? 1 : -1;
 800e16a:	2201      	movs	r2, #1
 800e16c:	667a      	str	r2, [r7, #100]	; 0x64
 800e16e:	e6b9      	b.n	800dee4 <lv_draw_line+0x90>
            if(main_line.p1.y < main_line.p2.y) {
 800e170:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e172:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e174:	4293      	cmp	r3, r2
 800e176:	f300 855f 	bgt.w	800ec38 <lv_draw_line+0xde4>
            else if(main_line.p1.y > main_line.p2.y) {
 800e17a:	f2c0 861c 	blt.w	800edb6 <lv_draw_line+0xf62>
 800e17e:	2300      	movs	r3, #0
 800e180:	637b      	str	r3, [r7, #52]	; 0x34
    line->hor = line->dx > line->dy ? true : false; /*Rather horizontal or vertical*/
 800e182:	2301      	movs	r3, #1
 800e184:	643b      	str	r3, [r7, #64]	; 0x40
 800e186:	e6d3      	b.n	800df30 <lv_draw_line+0xdc>
    if(point1->x == point2->x && point1->y == point2->y) return;
 800e188:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800e18c:	428a      	cmp	r2, r1
 800e18e:	6639      	str	r1, [r7, #96]	; 0x60
 800e190:	f47f ae7d 	bne.w	800de8e <lv_draw_line+0x3a>
 800e194:	e7bd      	b.n	800e112 <lv_draw_line+0x2be>
    line->dx = LV_MATH_ABS(line->p2.x - line->p1.x);
 800e196:	eba6 0805 	sub.w	r8, r6, r5
 800e19a:	6e3c      	ldr	r4, [r7, #96]	; 0x60
            p1.x = point1->x;
 800e19c:	65bd      	str	r5, [r7, #88]	; 0x58
    line->dx = LV_MATH_ABS(line->p2.x - line->p1.x);
 800e19e:	ea88 75e8 	eor.w	r5, r8, r8, asr #31
 800e1a2:	1aa0      	subs	r0, r4, r2
 800e1a4:	66f9      	str	r1, [r7, #108]	; 0x6c
 800e1a6:	eba5 75e8 	sub.w	r5, r5, r8, asr #31
 800e1aa:	65fa      	str	r2, [r7, #92]	; 0x5c
 800e1ac:	ea80 78e0 	eor.w	r8, r0, r0, asr #31
            p1.y = point1->y;
 800e1b0:	663a      	str	r2, [r7, #96]	; 0x60
    line->dx = LV_MATH_ABS(line->p2.x - line->p1.x);
 800e1b2:	b229      	sxth	r1, r5
    line->sx = line->p1.x < line->p2.x ? 1 : -1;
 800e1b4:	2201      	movs	r2, #1
            p2.x = point2->x;
 800e1b6:	64fe      	str	r6, [r7, #76]	; 0x4c
 800e1b8:	eba8 78e0 	sub.w	r8, r8, r0, asr #31
    line->sx = line->p1.x < line->p2.x ? 1 : -1;
 800e1bc:	66ba      	str	r2, [r7, #104]	; 0x68
 800e1be:	4622      	mov	r2, r4
    line->dx = LV_MATH_ABS(line->p2.x - line->p1.x);
 800e1c0:	6739      	str	r1, [r7, #112]	; 0x70
            p2.y = point2->y;
 800e1c2:	64bc      	str	r4, [r7, #72]	; 0x48
 800e1c4:	e685      	b.n	800ded2 <lv_draw_line+0x7e>
    line->err = (line->dx > line->dy ? line->dx : -line->dy) / 2;
 800e1c6:	2a00      	cmp	r2, #0
 800e1c8:	4614      	mov	r4, r2
 800e1ca:	bfb8      	it	lt
 800e1cc:	1c54      	addlt	r4, r2, #1
 800e1ce:	f344 044f 	sbfx	r4, r4, #1, #16
 800e1d2:	e694      	b.n	800defe <lv_draw_line+0xaa>
        if(main_line->p1.x < main_line->p2.x + dir_ori) {
 800e1d4:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 800e1d6:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 800e1d8:	4435      	add	r5, r6
 800e1da:	6efe      	ldr	r6, [r7, #108]	; 0x6c
 800e1dc:	42b5      	cmp	r5, r6
 800e1de:	f77f aed1 	ble.w	800df84 <lv_draw_line+0x130>
            vect_norm.y = - vect_main.x;
 800e1e2:	425b      	negs	r3, r3
 800e1e4:	b218      	sxth	r0, r3
 800e1e6:	e6cf      	b.n	800df88 <lv_draw_line+0x134>
    lv_coord_t width = style->line.width - 1;
 800e1e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t) style->line.opa * opa_scale) >> 8;
 800e1ea:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 800e1ee:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
    lv_coord_t width = style->line.width - 1;
 800e1f2:	f103 31ff 	add.w	r1, r3, #4294967295
 800e1f6:	f899 3046 	ldrb.w	r3, [r9, #70]	; 0x46
 800e1fa:	b209      	sxth	r1, r1
    lv_coord_t width_half = width >> 1;
 800e1fc:	ea4f 0061 	mov.w	r0, r1, asr #1
    lv_coord_t width_1 = width & 0x1;
 800e200:	f001 0101 	and.w	r1, r1, #1
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t) style->line.opa * opa_scale) >> 8;
 800e204:	d003      	beq.n	800e20e <lv_draw_line+0x3ba>
 800e206:	fb03 f30e 	mul.w	r3, r3, lr
 800e20a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
 800e20e:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    act_area.x1 = main_line->p1.x - width_half;
 800e210:	b280      	uxth	r0, r0
 800e212:	f8b7 4058 	ldrh.w	r4, [r7, #88]	; 0x58
    draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
 800e216:	46b6      	mov	lr, r6
 800e218:	6e3e      	ldr	r6, [r7, #96]	; 0x60
    act_area.x2 = main_line->p2.x + width_half + width_1;
 800e21a:	1845      	adds	r5, r0, r1
    act_area.x1 = main_line->p1.x - width_half;
 800e21c:	1a20      	subs	r0, r4, r0
    draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
 800e21e:	45b6      	cmp	lr, r6
 800e220:	46b4      	mov	ip, r6
    act_area.x2 = main_line->p2.x + width_half + width_1;
 800e222:	4425      	add	r5, r4
    act_area.x1 = main_line->p1.x - width_half;
 800e224:	b204      	sxth	r4, r0
    draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
 800e226:	bfa8      	it	ge
 800e228:	46b6      	movge	lr, r6
    draw_area.y2 = LV_MATH_MAX(act_area.y1, act_area.y2);
 800e22a:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    act_area.x2 = main_line->p2.x + width_half + width_1;
 800e22c:	b22d      	sxth	r5, r5
    fill_fp(&draw_area, mask, style->line.color, opa);
 800e22e:	4659      	mov	r1, fp
    draw_area.y2 = LV_MATH_MAX(act_area.y1, act_area.y2);
 800e230:	4566      	cmp	r6, ip
    draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
 800e232:	f8a7 e082 	strh.w	lr, [r7, #130]	; 0x82
    fill_fp(&draw_area, mask, style->line.color, opa);
 800e236:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 800e2e0 <lv_draw_line+0x48c>
 800e23a:	f107 0080 	add.w	r0, r7, #128	; 0x80
    draw_area.y2 = LV_MATH_MAX(act_area.y1, act_area.y2);
 800e23e:	bfb8      	it	lt
 800e240:	4666      	movlt	r6, ip
    draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
 800e242:	42ac      	cmp	r4, r5
    draw_area.y2 = LV_MATH_MAX(act_area.y1, act_area.y2);
 800e244:	f8a7 6086 	strh.w	r6, [r7, #134]	; 0x86
    draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
 800e248:	4626      	mov	r6, r4
 800e24a:	bfa8      	it	ge
 800e24c:	462e      	movge	r6, r5
    draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
 800e24e:	42ac      	cmp	r4, r5
 800e250:	bfb8      	it	lt
 800e252:	462c      	movlt	r4, r5
    draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
 800e254:	f8a7 6080 	strh.w	r6, [r7, #128]	; 0x80
    fill_fp(&draw_area, mask, style->line.color, opa);
 800e258:	f8de 5000 	ldr.w	r5, [lr]
    draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
 800e25c:	f8a7 4084 	strh.w	r4, [r7, #132]	; 0x84
    fill_fp(&draw_area, mask, style->line.color, opa);
 800e260:	47a8      	blx	r5
 800e262:	e756      	b.n	800e112 <lv_draw_line+0x2be>
 800e264:	68bc      	ldr	r4, [r7, #8]
 800e266:	f8d7 a004 	ldr.w	sl, [r7, #4]
 800e26a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e26e:	f8d7 b000 	ldr.w	fp, [r7]
 800e272:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e274:	6a3a      	ldr	r2, [r7, #32]
 800e276:	881b      	ldrh	r3, [r3, #0]
 800e278:	63bb      	str	r3, [r7, #56]	; 0x38
 800e27a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    for(i = 0; i < width; i++) {
 800e27c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800e27e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800e282:	61fb      	str	r3, [r7, #28]
        x_center_ofs = pattern[width - 1].x / 2;
 800e284:	f933 6c04 	ldrsh.w	r6, [r3, #-4]
        y_center_ofs = pattern[width - 1].y / 2;
 800e288:	69fa      	ldr	r2, [r7, #28]
        x_center_ofs = pattern[width - 1].x / 2;
 800e28a:	2e00      	cmp	r6, #0
 800e28c:	4633      	mov	r3, r6
        y_center_ofs = pattern[width - 1].y / 2;
 800e28e:	f932 5c02 	ldrsh.w	r5, [r2, #-2]
        x_center_ofs = pattern[width - 1].x / 2;
 800e292:	bfb8      	it	lt
 800e294:	1c73      	addlt	r3, r6, #1
        y_center_ofs = pattern[width - 1].y / 2;
 800e296:	2d00      	cmp	r5, #0
        x_center_ofs = pattern[width - 1].x / 2;
 800e298:	ea4f 0263 	mov.w	r2, r3, asr #1
        y_center_ofs = pattern[width - 1].y / 2;
 800e29c:	462b      	mov	r3, r5
 800e29e:	bfb8      	it	lt
 800e2a0:	1c6b      	addlt	r3, r5, #1
    for(i = 0; i < width; i++) {
 800e2a2:	2900      	cmp	r1, #0
        y_center_ofs = pattern[width - 1].y / 2;
 800e2a4:	ea4f 0363 	mov.w	r3, r3, asr #1
    for(i = 0; i < width; i++) {
 800e2a8:	f340 8616 	ble.w	800eed8 <lv_draw_line+0x1084>
 800e2ac:	b29b      	uxth	r3, r3
 800e2ae:	2100      	movs	r1, #0
 800e2b0:	b292      	uxth	r2, r2
 800e2b2:	613c      	str	r4, [r7, #16]
 800e2b4:	637b      	str	r3, [r7, #52]	; 0x34
 800e2b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2b8:	63ba      	str	r2, [r7, #56]	; 0x38
 800e2ba:	f1a3 0804 	sub.w	r8, r3, #4
 800e2be:	460b      	mov	r3, r1
                        lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x, main_line->p1.y + pattern[aa_last_corner].y - 1,
 800e2c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e2c2:	f8c7 a00c 	str.w	sl, [r7, #12]
 800e2c6:	461d      	mov	r5, r3
 800e2c8:	3901      	subs	r1, #1
 800e2ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e2cc:	f8c7 b05c 	str.w	fp, [r7, #92]	; 0x5c
 800e2d0:	6239      	str	r1, [r7, #32]
                        lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x, main_line->p2.y + pattern[aa_last_corner].y + 1,
 800e2d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e2d4:	3101      	adds	r1, #1
 800e2d6:	62b9      	str	r1, [r7, #40]	; 0x28
                        lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w + 1, main_line->p1.y + pattern[aa_last_corner].y - 1,
 800e2d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e2da:	3101      	adds	r1, #1
 800e2dc:	61b9      	str	r1, [r7, #24]
 800e2de:	e040      	b.n	800e362 <lv_draw_line+0x50e>
 800e2e0:	0808b60c 	.word	0x0808b60c
                if(pattern[i - 1].x != pattern[i].x) {
 800e2e4:	f9b8 2000 	ldrsh.w	r2, [r8]
 800e2e8:	4282      	cmp	r2, r0
 800e2ea:	f000 8084 	beq.w	800e3f6 <lv_draw_line+0x5a2>
 800e2ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
                    if(main_line->sy < 0) {
 800e2f0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e2f2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e2f6:	3101      	adds	r1, #1
                    lv_coord_t seg_w = pattern[i].y - pattern[aa_last_corner].y;
 800e2f8:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 800e2fc:	eba4 040a 	sub.w	r4, r4, sl
 800e300:	b2a4      	uxth	r4, r4
 800e302:	b222      	sxth	r2, r4
                    if(main_line->sy < 0) {
 800e304:	f000 80a0 	beq.w	800e448 <lv_draw_line+0x5f4>
                        lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1, main_line->p1.y + pattern[aa_last_corner].y,
 800e308:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e30a:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 800e30c:	f831 b023 	ldrh.w	fp, [r1, r3, lsl #2]
 800e310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e312:	9601      	str	r6, [sp, #4]
 800e314:	1e58      	subs	r0, r3, #1
 800e316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e318:	eb03 010a 	add.w	r1, r3, sl
 800e31c:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800e320:	4458      	add	r0, fp
 800e322:	9300      	str	r3, [sp, #0]
 800e324:	b209      	sxth	r1, r1
 800e326:	b200      	sxth	r0, r0
 800e328:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e32a:	f7fe fd43 	bl	800cdb4 <lv_draw_aa_ver_seg>
                        lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1, main_line->p2.y + pattern[aa_last_corner].y,
 800e32e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e330:	9601      	str	r6, [sp, #4]
 800e332:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e334:	1c50      	adds	r0, r2, #1
 800e336:	4262      	negs	r2, r4
 800e338:	f8d9 4040 	ldr.w	r4, [r9, #64]	; 0x40
 800e33c:	4451      	add	r1, sl
 800e33e:	4458      	add	r0, fp
 800e340:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e342:	b212      	sxth	r2, r2
 800e344:	b209      	sxth	r1, r1
 800e346:	9400      	str	r4, [sp, #0]
 800e348:	b200      	sxth	r0, r0
 800e34a:	f7fe fd33 	bl	800cdb4 <lv_draw_aa_ver_seg>
 800e34e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e350:	3501      	adds	r5, #1
    for(i = 0; i < width; i++) {
 800e352:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e354:	f108 0804 	add.w	r8, r8, #4
 800e358:	b229      	sxth	r1, r5
 800e35a:	428a      	cmp	r2, r1
 800e35c:	66f9      	str	r1, [r7, #108]	; 0x6c
 800e35e:	f340 809c 	ble.w	800e49a <lv_draw_line+0x646>
        pattern[i].x -= x_center_ofs;
 800e362:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 800e366:	6bb9      	ldr	r1, [r7, #56]	; 0x38
        pattern[i].y -= y_center_ofs;
 800e368:	f8b8 4006 	ldrh.w	r4, [r8, #6]
        pattern[i].x -= x_center_ofs;
 800e36c:	1a52      	subs	r2, r2, r1
        pattern[i].y -= y_center_ofs;
 800e36e:	6b79      	ldr	r1, [r7, #52]	; 0x34
        pattern[i].x -= x_center_ofs;
 800e370:	657d      	str	r5, [r7, #84]	; 0x54
        pattern[i].y -= y_center_ofs;
 800e372:	1a64      	subs	r4, r4, r1
        pattern[i].x -= x_center_ofs;
 800e374:	b292      	uxth	r2, r2
        pattern[i].y -= y_center_ofs;
 800e376:	b2a4      	uxth	r4, r4
        pattern[i].x -= x_center_ofs;
 800e378:	b210      	sxth	r0, r2
        pattern[i].y -= y_center_ofs;
 800e37a:	b221      	sxth	r1, r4
        pattern[i].x -= x_center_ofs;
 800e37c:	f8a8 0004 	strh.w	r0, [r8, #4]
        pattern[i].y -= y_center_ofs;
 800e380:	f8a8 1006 	strh.w	r1, [r8, #6]
        if(i != 0) {
 800e384:	2d00      	cmp	r5, #0
 800e386:	d036      	beq.n	800e3f6 <lv_draw_line+0x5a2>
            if(main_line->hor) {
 800e388:	6c3e      	ldr	r6, [r7, #64]	; 0x40
 800e38a:	2e00      	cmp	r6, #0
 800e38c:	d1aa      	bne.n	800e2e4 <lv_draw_line+0x490>
                if(pattern[i - 1].y != pattern[i].y) {
 800e38e:	f9b8 0002 	ldrsh.w	r0, [r8, #2]
 800e392:	4288      	cmp	r0, r1
 800e394:	d02f      	beq.n	800e3f6 <lv_draw_line+0x5a2>
                    lv_coord_t seg_w = pattern[i].x - pattern[aa_last_corner].x;
 800e396:	6c78      	ldr	r0, [r7, #68]	; 0x44
                    if(main_line->sx < 0) {
 800e398:	6eb9      	ldr	r1, [r7, #104]	; 0x68
                    lv_coord_t seg_w = pattern[i].x - pattern[aa_last_corner].x;
 800e39a:	f830 a023 	ldrh.w	sl, [r0, r3, lsl #2]
 800e39e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
                    if(main_line->sx < 0) {
 800e3a2:	3101      	adds	r1, #1
                    lv_coord_t seg_w = pattern[i].x - pattern[aa_last_corner].x;
 800e3a4:	eba2 020a 	sub.w	r2, r2, sl
                        lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w + 1, main_line->p1.y + pattern[aa_last_corner].y - 1,
 800e3a8:	f8b3 b002 	ldrh.w	fp, [r3, #2]
                    lv_coord_t seg_w = pattern[i].x - pattern[aa_last_corner].x;
 800e3ac:	b294      	uxth	r4, r2
 800e3ae:	b222      	sxth	r2, r4
                    if(main_line->sx < 0) {
 800e3b0:	d023      	beq.n	800e3fa <lv_draw_line+0x5a6>
                        lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x, main_line->p1.y + pattern[aa_last_corner].y - 1,
 800e3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3b4:	eb03 000a 	add.w	r0, r3, sl
 800e3b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3ba:	9301      	str	r3, [sp, #4]
 800e3bc:	b200      	sxth	r0, r0
 800e3be:	6a3b      	ldr	r3, [r7, #32]
 800e3c0:	f8d9 6040 	ldr.w	r6, [r9, #64]	; 0x40
 800e3c4:	eb0b 0103 	add.w	r1, fp, r3
 800e3c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e3ca:	9600      	str	r6, [sp, #0]
 800e3cc:	b209      	sxth	r1, r1
 800e3ce:	f7fe fd8b 	bl	800cee8 <lv_draw_aa_hor_seg>
                        lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x, main_line->p2.y + pattern[aa_last_corner].y + 1,
 800e3d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e3d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e3d6:	9201      	str	r2, [sp, #4]
 800e3d8:	4262      	negs	r2, r4
 800e3da:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e3dc:	4459      	add	r1, fp
 800e3de:	f8d9 4040 	ldr.w	r4, [r9, #64]	; 0x40
 800e3e2:	b212      	sxth	r2, r2
 800e3e4:	4450      	add	r0, sl
 800e3e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e3e8:	b209      	sxth	r1, r1
 800e3ea:	9400      	str	r4, [sp, #0]
 800e3ec:	b200      	sxth	r0, r0
 800e3ee:	f7fe fd7b 	bl	800cee8 <lv_draw_aa_hor_seg>
 800e3f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e3f4:	e7ac      	b.n	800e350 <lv_draw_line+0x4fc>
 800e3f6:	657b      	str	r3, [r7, #84]	; 0x54
 800e3f8:	e7aa      	b.n	800e350 <lv_draw_line+0x4fc>
                        lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w + 1, main_line->p1.y + pattern[aa_last_corner].y - 1,
 800e3fa:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 800e3fc:	69bb      	ldr	r3, [r7, #24]
 800e3fe:	9601      	str	r6, [sp, #4]
 800e400:	eb0a 0003 	add.w	r0, sl, r3
 800e404:	6a3b      	ldr	r3, [r7, #32]
 800e406:	eb00 0e04 	add.w	lr, r0, r4
 800e40a:	eb0b 0103 	add.w	r1, fp, r3
 800e40e:	f8d9 0040 	ldr.w	r0, [r9, #64]	; 0x40
 800e412:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e414:	b209      	sxth	r1, r1
 800e416:	9000      	str	r0, [sp, #0]
 800e418:	fa0f f08e 	sxth.w	r0, lr
 800e41c:	f7fe fd64 	bl	800cee8 <lv_draw_aa_hor_seg>
                        lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x + seg_w + 1, main_line->p2.y + pattern[aa_last_corner].y + 1,
 800e420:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e422:	1c50      	adds	r0, r2, #1
 800e424:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e426:	9601      	str	r6, [sp, #4]
 800e428:	4450      	add	r0, sl
 800e42a:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800e42e:	eb0b 0102 	add.w	r1, fp, r2
 800e432:	4262      	negs	r2, r4
 800e434:	4420      	add	r0, r4
 800e436:	9300      	str	r3, [sp, #0]
 800e438:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e43a:	b209      	sxth	r1, r1
 800e43c:	b212      	sxth	r2, r2
 800e43e:	b200      	sxth	r0, r0
 800e440:	f7fe fd52 	bl	800cee8 <lv_draw_aa_hor_seg>
 800e444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e446:	e783      	b.n	800e350 <lv_draw_line+0x4fc>
                        lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1, main_line->p1.y + pattern[aa_last_corner].y + seg_w + 1,
 800e448:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e44a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e44c:	f830 b023 	ldrh.w	fp, [r0, r3, lsl #2]
 800e450:	3101      	adds	r1, #1
 800e452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e454:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 800e456:	1e58      	subs	r0, r3, #1
 800e458:	460b      	mov	r3, r1
 800e45a:	9601      	str	r6, [sp, #4]
 800e45c:	4453      	add	r3, sl
 800e45e:	4458      	add	r0, fp
 800e460:	18e1      	adds	r1, r4, r3
 800e462:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800e466:	b200      	sxth	r0, r0
 800e468:	9300      	str	r3, [sp, #0]
 800e46a:	b209      	sxth	r1, r1
 800e46c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e46e:	f7fe fca1 	bl	800cdb4 <lv_draw_aa_ver_seg>
                        lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1, main_line->p2.y + pattern[aa_last_corner].y + seg_w + 1,
 800e472:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e474:	eb0a 0102 	add.w	r1, sl, r2
 800e478:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e47a:	9601      	str	r6, [sp, #4]
 800e47c:	1c50      	adds	r0, r2, #1
 800e47e:	4421      	add	r1, r4
 800e480:	4262      	negs	r2, r4
 800e482:	f8d9 4040 	ldr.w	r4, [r9, #64]	; 0x40
 800e486:	4458      	add	r0, fp
 800e488:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e48a:	b209      	sxth	r1, r1
 800e48c:	9400      	str	r4, [sp, #0]
 800e48e:	b212      	sxth	r2, r2
 800e490:	b200      	sxth	r0, r0
 800e492:	f7fe fc8f 	bl	800cdb4 <lv_draw_aa_ver_seg>
 800e496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e498:	e75a      	b.n	800e350 <lv_draw_line+0x4fc>
 800e49a:	69fa      	ldr	r2, [r7, #28]
 800e49c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e49e:	f932 5c02 	ldrsh.w	r5, [r2, #-2]
 800e4a2:	f932 6c04 	ldrsh.w	r6, [r2, #-4]
 800e4a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e4a8:	693c      	ldr	r4, [r7, #16]
 800e4aa:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800e4ae:	f8d7 b05c 	ldr.w	fp, [r7, #92]	; 0x5c
 800e4b2:	f833 8022 	ldrh.w	r8, [r3, r2, lsl #2]
        if(main_line->hor) {
 800e4b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	f000 81cb 	beq.w	800e854 <lv_draw_line+0xa00>
            lv_coord_t seg_w = pattern[width_safe - 1].y - pattern[aa_last_corner].y;
 800e4be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e4c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e4c2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800e4c6:	b2aa      	uxth	r2, r5
 800e4c8:	885b      	ldrh	r3, [r3, #2]
 800e4ca:	62ba      	str	r2, [r7, #40]	; 0x28
 800e4cc:	1ad5      	subs	r5, r2, r3
 800e4ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e4d0:	b2ab      	uxth	r3, r5
 800e4d2:	65fb      	str	r3, [r7, #92]	; 0x5c
            if(main_line->sy < 0) {
 800e4d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e4d6:	1c5a      	adds	r2, r3, #1
 800e4d8:	f000 8491 	beq.w	800edfe <lv_draw_line+0xfaa>
                        seg_w + main_line->sy, mask, style->line.color, opa);
 800e4dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e4de:	441a      	add	r2, r3
                lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1, main_line->p1.y + pattern[aa_last_corner].y,
 800e4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e2:	1e58      	subs	r0, r3, #1
 800e4e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        seg_w + main_line->sy, mask, style->line.color, opa);
 800e4e6:	4615      	mov	r5, r2
                lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1, main_line->p1.y + pattern[aa_last_corner].y,
 800e4e8:	9301      	str	r3, [sp, #4]
 800e4ea:	4440      	add	r0, r8
 800e4ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
                        seg_w + main_line->sy, mask, style->line.color, opa);
 800e4ee:	b2ab      	uxth	r3, r5
                lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1, main_line->p1.y + pattern[aa_last_corner].y,
 800e4f0:	f8d9 5040 	ldr.w	r5, [r9, #64]	; 0x40
 800e4f4:	b200      	sxth	r0, r0
 800e4f6:	4611      	mov	r1, r2
 800e4f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e4fa:	4411      	add	r1, r2
                        seg_w + main_line->sy, mask, style->line.color, opa);
 800e4fc:	461a      	mov	r2, r3
                lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1, main_line->p1.y + pattern[aa_last_corner].y,
 800e4fe:	465b      	mov	r3, fp
 800e500:	65fa      	str	r2, [r7, #92]	; 0x5c
 800e502:	b209      	sxth	r1, r1
 800e504:	f9b7 205c 	ldrsh.w	r2, [r7, #92]	; 0x5c
 800e508:	9500      	str	r5, [sp, #0]
 800e50a:	f7fe fc53 	bl	800cdb4 <lv_draw_aa_ver_seg>
                lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1, main_line->p2.y + pattern[aa_last_corner].y,
 800e50e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e510:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e512:	425a      	negs	r2, r3
 800e514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e516:	1c48      	adds	r0, r1, #1
 800e518:	9301      	str	r3, [sp, #4]
 800e51a:	b212      	sxth	r2, r2
 800e51c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e51e:	4440      	add	r0, r8
 800e520:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e522:	b200      	sxth	r0, r0
 800e524:	4419      	add	r1, r3
 800e526:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800e52a:	b209      	sxth	r1, r1
 800e52c:	9300      	str	r3, [sp, #0]
 800e52e:	465b      	mov	r3, fp
 800e530:	f7fe fc40 	bl	800cdb4 <lv_draw_aa_ver_seg>
 800e534:	b2b3      	uxth	r3, r6
 800e536:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e538:	623b      	str	r3, [r7, #32]
 800e53a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e53c:	884a      	ldrh	r2, [r1, #2]
 800e53e:	3300      	adds	r3, #0
 800e540:	627a      	str	r2, [r7, #36]	; 0x24
 800e542:	bf18      	it	ne
 800e544:	2301      	movne	r3, #1
 800e546:	880a      	ldrh	r2, [r1, #0]
 800e548:	63ba      	str	r2, [r7, #56]	; 0x38
        if(main_line->sy < 0) {
 800e54a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e54c:	3201      	adds	r2, #1
 800e54e:	f000 83dd 	beq.w	800ed0c <lv_draw_line+0xeb8>
 800e552:	b29b      	uxth	r3, r3
 800e554:	61bb      	str	r3, [r7, #24]
 800e556:	2301      	movs	r3, #1
 800e558:	61fb      	str	r3, [r7, #28]
    prev_p.y = main_line->p1.y;
 800e55a:	2301      	movs	r3, #1
    prev_p.x = main_line->p1.x;
 800e55c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e55e:	f8c7 9040 	str.w	r9, [r7, #64]	; 0x40
    prev_p.y = main_line->p1.y;
 800e562:	657b      	str	r3, [r7, #84]	; 0x54
 800e564:	4691      	mov	r9, r2
 800e566:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
    prev_p.x = main_line->p1.x;
 800e56a:	f8a7 207c 	strh.w	r2, [r7, #124]	; 0x7c
    prev_p.y = main_line->p1.y;
 800e56e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800e572:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e574:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e576:	4293      	cmp	r3, r2
 800e578:	f000 80ba 	beq.w	800e6f0 <lv_draw_line+0x89c>
 800e57c:	461a      	mov	r2, r3
 800e57e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e580:	1898      	adds	r0, r3, r2
 800e582:	6f3b      	ldr	r3, [r7, #112]	; 0x70
        line->p_act.y += line->sy;
 800e584:	b200      	sxth	r0, r0
 800e586:	4259      	negs	r1, r3
        line->p_act.x += line->sx;
 800e588:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    if(line->e2 > -line->dx) {
 800e58a:	428c      	cmp	r4, r1
 800e58c:	4622      	mov	r2, r4
        line->err -= line->dy;
 800e58e:	eba4 050a 	sub.w	r5, r4, sl
        line->p_act.x += line->sx;
 800e592:	444b      	add	r3, r9
    if(line->e2 > -line->dx) {
 800e594:	dd02      	ble.n	800e59c <lv_draw_line+0x748>
        line->err -= line->dy;
 800e596:	b22a      	sxth	r2, r5
        line->p_act.x += line->sx;
 800e598:	fa0f f983 	sxth.w	r9, r3
        line->err += line->dx;
 800e59c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    if(line->e2 < line->dy) {
 800e59e:	4554      	cmp	r4, sl
        line->err += line->dx;
 800e5a0:	4413      	add	r3, r2
 800e5a2:	b21c      	sxth	r4, r3
    if(line->e2 < line->dy) {
 800e5a4:	f280 80c0 	bge.w	800e728 <lv_draw_line+0x8d4>
{
    lv_coord_t last_y = line->p_act.y;

    do {
        if(!line_next(line)) return false;
    } while(last_y == line->p_act.y);
 800e5a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e5aa:	4283      	cmp	r3, r0
 800e5ac:	d0ec      	beq.n	800e588 <lv_draw_line+0x734>
 800e5ae:	6638      	str	r0, [r7, #96]	; 0x60
            for(i = 0; i < width; i++) {
 800e5b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	fa1f f389 	uxth.w	r3, r9
 800e5b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e5ba:	dd57      	ble.n	800e66c <lv_draw_line+0x818>
 800e5bc:	4ba3      	ldr	r3, [pc, #652]	; (800e84c <lv_draw_line+0x9f8>)
 800e5be:	f04f 0800 	mov.w	r8, #0
 800e5c2:	637c      	str	r4, [r7, #52]	; 0x34
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	4644      	mov	r4, r8
 800e5c8:	f8c7 a030 	str.w	sl, [r7, #48]	; 0x30
 800e5cc:	65bb      	str	r3, [r7, #88]	; 0x58
 800e5ce:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800e5d2:	f8c7 902c 	str.w	r9, [r7, #44]	; 0x2c
 800e5d6:	6c7d      	ldr	r5, [r7, #68]	; 0x44
 800e5d8:	469a      	mov	sl, r3
 800e5da:	f8d7 8050 	ldr.w	r8, [r7, #80]	; 0x50
 800e5de:	f8d7 9040 	ldr.w	r9, [r7, #64]	; 0x40
                draw_area.x1 = prev_p.x + pattern[i].x;
 800e5e2:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
                fill_fp(&draw_area, mask, style->line.color, opa);
 800e5e6:	4643      	mov	r3, r8
                draw_area.x1 = prev_p.x + pattern[i].x;
 800e5e8:	f9b5 6000 	ldrsh.w	r6, [r5]
                fill_fp(&draw_area, mask, style->line.color, opa);
 800e5ec:	4659      	mov	r1, fp
                draw_area.y1 = prev_p.y + pattern[i].y;
 800e5ee:	f8b7 007e 	ldrh.w	r0, [r7, #126]	; 0x7e
                draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x - 1;
 800e5f2:	f8b7 e07c 	ldrh.w	lr, [r7, #124]	; 0x7c
                draw_area.x1 = prev_p.x + pattern[i].x;
 800e5f6:	4432      	add	r2, r6
                draw_area.y1 = prev_p.y + pattern[i].y;
 800e5f8:	f8b5 c002 	ldrh.w	ip, [r5, #2]
                draw_area.x1 = prev_p.x + pattern[i].x;
 800e5fc:	66fe      	str	r6, [r7, #108]	; 0x6c
                draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x - 1;
 800e5fe:	ea6f 0e0e 	mvn.w	lr, lr
 800e602:	6dfe      	ldr	r6, [r7, #92]	; 0x5c
                draw_area.x1 = prev_p.x + pattern[i].x;
 800e604:	b292      	uxth	r2, r2
                draw_area.y1 = prev_p.y + pattern[i].y;
 800e606:	4460      	add	r0, ip
                draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x - 1;
 800e608:	44b6      	add	lr, r6
                draw_area.x1 = prev_p.x + pattern[i].x;
 800e60a:	f8a7 2080 	strh.w	r2, [r7, #128]	; 0x80
                draw_area.y1 = prev_p.y + pattern[i].y;
 800e60e:	b200      	sxth	r0, r0
                fill_fp(&draw_area, mask, style->line.color, opa);
 800e610:	6dbe      	ldr	r6, [r7, #88]	; 0x58
                draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x - 1;
 800e612:	4496      	add	lr, r2
                fill_fp(&draw_area, mask, style->line.color, opa);
 800e614:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
                draw_area.y1 = prev_p.y + pattern[i].y;
 800e618:	f8a7 0082 	strh.w	r0, [r7, #130]	; 0x82
                draw_area.y2 = draw_area.y1;
 800e61c:	f8a7 0086 	strh.w	r0, [r7, #134]	; 0x86
                fill_fp(&draw_area, mask, style->line.color, opa);
 800e620:	4650      	mov	r0, sl
                draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x - 1;
 800e622:	f8a7 e084 	strh.w	lr, [r7, #132]	; 0x84
                fill_fp(&draw_area, mask, style->line.color, opa);
 800e626:	47b0      	blx	r6
                if(i != 0 && pattern[i].x != pattern[i - 1].x && !first_run) {
 800e628:	b1ac      	cbz	r4, 800e656 <lv_draw_line+0x802>
 800e62a:	f935 3c04 	ldrsh.w	r3, [r5, #-4]
 800e62e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e630:	4293      	cmp	r3, r2
 800e632:	d010      	beq.n	800e656 <lv_draw_line+0x802>
 800e634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                    px_fp(draw_area.x1, draw_area.y1 - main_line->sy, mask, style->line.color, opa);
 800e636:	465a      	mov	r2, fp
                if(i != 0 && pattern[i].x != pattern[i - 1].x && !first_run) {
 800e638:	b96b      	cbnz	r3, 800e656 <lv_draw_line+0x802>
                    px_fp(draw_area.x1, draw_area.y1 - main_line->sy, mask, style->line.color, opa);
 800e63a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800e63c:	f8b7 1082 	ldrh.w	r1, [r7, #130]	; 0x82
 800e640:	4e83      	ldr	r6, [pc, #524]	; (800e850 <lv_draw_line+0x9fc>)
 800e642:	1a09      	subs	r1, r1, r0
 800e644:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800e648:	f9b7 0080 	ldrsh.w	r0, [r7, #128]	; 0x80
 800e64c:	b209      	sxth	r1, r1
 800e64e:	f8cd 8000 	str.w	r8, [sp]
 800e652:	6836      	ldr	r6, [r6, #0]
 800e654:	47b0      	blx	r6
 800e656:	3401      	adds	r4, #1
            for(i = 0; i < width; i++) {
 800e658:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e65a:	3504      	adds	r5, #4
 800e65c:	b223      	sxth	r3, r4
 800e65e:	429a      	cmp	r2, r3
 800e660:	dcbf      	bgt.n	800e5e2 <lv_draw_line+0x78e>
 800e662:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 800e664:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 800e668:	f8d7 902c 	ldr.w	r9, [r7, #44]	; 0x2c
            lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 800e66c:	f8b7 007c 	ldrh.w	r0, [r7, #124]	; 0x7c
 800e670:	465b      	mov	r3, fp
 800e672:	6bbd      	ldr	r5, [r7, #56]	; 0x38
 800e674:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 800e676:	f8b7 107e 	ldrh.w	r1, [r7, #126]	; 0x7e
 800e67a:	4428      	add	r0, r5
 800e67c:	6a7d      	ldr	r5, [r7, #36]	; 0x24
                    -(main_line->p_act.x - prev_p.x), mask, style->line.color, opa);
 800e67e:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
            lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 800e682:	b200      	sxth	r0, r0
 800e684:	9601      	str	r6, [sp, #4]
 800e686:	4429      	add	r1, r5
                    -(main_line->p_act.x - prev_p.x), mask, style->line.color, opa);
 800e688:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
 800e68a:	eba2 0e05 	sub.w	lr, r2, r5
            lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 800e68e:	69ba      	ldr	r2, [r7, #24]
 800e690:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 800e692:	1a89      	subs	r1, r1, r2
 800e694:	fa0f f28e 	sxth.w	r2, lr
 800e698:	6c2d      	ldr	r5, [r5, #64]	; 0x40
            first_run = false;
 800e69a:	f04f 0e00 	mov.w	lr, #0
            lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 800e69e:	b209      	sxth	r1, r1
 800e6a0:	9500      	str	r5, [sp, #0]
            first_run = false;
 800e6a2:	f8c7 e054 	str.w	lr, [r7, #84]	; 0x54
            lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 800e6a6:	f7fe fc1f 	bl	800cee8 <lv_draw_aa_hor_seg>
            lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x, prev_p.y + pattern[width_safe - 1].y + aa_shift2,
 800e6aa:	f8b7 007c 	ldrh.w	r0, [r7, #124]	; 0x7c
 800e6ae:	6a3d      	ldr	r5, [r7, #32]
 800e6b0:	465b      	mov	r3, fp
 800e6b2:	f8b7 107e 	ldrh.w	r1, [r7, #126]	; 0x7e
 800e6b6:	4428      	add	r0, r5
 800e6b8:	6abd      	ldr	r5, [r7, #40]	; 0x28
                    main_line->p_act.x - prev_p.x, mask, style->line.color, opa);
 800e6ba:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
            lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x, prev_p.y + pattern[width_safe - 1].y + aa_shift2,
 800e6be:	9601      	str	r6, [sp, #4]
 800e6c0:	4429      	add	r1, r5
                    main_line->p_act.x - prev_p.x, mask, style->line.color, opa);
 800e6c2:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
            lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x, prev_p.y + pattern[width_safe - 1].y + aa_shift2,
 800e6c4:	b200      	sxth	r0, r0
 800e6c6:	69fe      	ldr	r6, [r7, #28]
                    main_line->p_act.x - prev_p.x, mask, style->line.color, opa);
 800e6c8:	1aaa      	subs	r2, r5, r2
            lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x, prev_p.y + pattern[width_safe - 1].y + aa_shift2,
 800e6ca:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 800e6cc:	4431      	add	r1, r6
 800e6ce:	6c2d      	ldr	r5, [r5, #64]	; 0x40
 800e6d0:	b212      	sxth	r2, r2
 800e6d2:	b209      	sxth	r1, r1
 800e6d4:	9500      	str	r5, [sp, #0]
 800e6d6:	f7fe fc07 	bl	800cee8 <lv_draw_aa_hor_seg>
            prev_p.y = main_line->p_act.y;
 800e6da:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
            prev_p.x = main_line->p_act.x;
 800e6de:	f8a7 907c 	strh.w	r9, [r7, #124]	; 0x7c
 800e6e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
            prev_p.y = main_line->p_act.y;
 800e6e4:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800e6e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e6ea:	4293      	cmp	r3, r2
 800e6ec:	f47f af46 	bne.w	800e57c <lv_draw_line+0x728>
        line->p_act.y += line->sy;
 800e6f0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e6f2:	1899      	adds	r1, r3, r2
    if(line->e2 > -line->dx) {
 800e6f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
        line->p_act.y += line->sy;
 800e6f6:	b209      	sxth	r1, r1
    if(line->e2 > -line->dx) {
 800e6f8:	4258      	negs	r0, r3
    if(line->p_act.x == line->p2.x && line->p_act.y == line->p2.y) return false;
 800e6fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6fc:	4599      	cmp	r9, r3
 800e6fe:	d019      	beq.n	800e734 <lv_draw_line+0x8e0>
        line->p_act.x += line->sx;
 800e700:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    if(line->e2 > -line->dx) {
 800e702:	4284      	cmp	r4, r0
 800e704:	4622      	mov	r2, r4
        line->err -= line->dy;
 800e706:	eba4 050a 	sub.w	r5, r4, sl
        line->p_act.x += line->sx;
 800e70a:	444b      	add	r3, r9
    if(line->e2 > -line->dx) {
 800e70c:	dd02      	ble.n	800e714 <lv_draw_line+0x8c0>
        line->err -= line->dy;
 800e70e:	b22a      	sxth	r2, r5
        line->p_act.x += line->sx;
 800e710:	fa0f f983 	sxth.w	r9, r3
        line->err += line->dx;
 800e714:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    if(line->e2 < line->dy) {
 800e716:	4554      	cmp	r4, sl
        line->err += line->dx;
 800e718:	4413      	add	r3, r2
 800e71a:	b21c      	sxth	r4, r3
    if(line->e2 < line->dy) {
 800e71c:	da06      	bge.n	800e72c <lv_draw_line+0x8d8>
    } while(last_y == line->p_act.y);
 800e71e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e720:	4299      	cmp	r1, r3
 800e722:	d0ea      	beq.n	800e6fa <lv_draw_line+0x8a6>
 800e724:	6639      	str	r1, [r7, #96]	; 0x60
 800e726:	e743      	b.n	800e5b0 <lv_draw_line+0x75c>
    if(line->e2 < line->dy) {
 800e728:	4614      	mov	r4, r2
 800e72a:	e72d      	b.n	800e588 <lv_draw_line+0x734>
    if(line->p_act.x == line->p2.x && line->p_act.y == line->p2.y) return false;
 800e72c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    if(line->e2 < line->dy) {
 800e72e:	4614      	mov	r4, r2
    if(line->p_act.x == line->p2.x && line->p_act.y == line->p2.y) return false;
 800e730:	4599      	cmp	r9, r3
 800e732:	d1e5      	bne.n	800e700 <lv_draw_line+0x8ac>
        for(i = 0; i < width; i++) {
 800e734:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e736:	f8d7 9040 	ldr.w	r9, [r7, #64]	; 0x40
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	dd48      	ble.n	800e7d0 <lv_draw_line+0x97c>
 800e73e:	4b43      	ldr	r3, [pc, #268]	; (800e84c <lv_draw_line+0x9f8>)
 800e740:	f04f 0800 	mov.w	r8, #0
 800e744:	f107 0580 	add.w	r5, r7, #128	; 0x80
 800e748:	6c7e      	ldr	r6, [r7, #68]	; 0x44
 800e74a:	681b      	ldr	r3, [r3, #0]
                px_fp(draw_area.x1, draw_area.y1 - main_line->sy, mask, style->line.color, opa);
 800e74c:	4644      	mov	r4, r8
 800e74e:	f8df a100 	ldr.w	sl, [pc, #256]	; 800e850 <lv_draw_line+0x9fc>
 800e752:	673b      	str	r3, [r7, #112]	; 0x70
 800e754:	66fd      	str	r5, [r7, #108]	; 0x6c
            draw_area.x1 = prev_p.x + pattern[i].x;
 800e756:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
            fill_fp(&draw_area, mask, style->line.color, opa);
 800e75a:	4659      	mov	r1, fp
            draw_area.x1 = prev_p.x + pattern[i].x;
 800e75c:	f9b6 8000 	ldrsh.w	r8, [r6]
            draw_area.y1 = prev_p.y + pattern[i].y;
 800e760:	f8b7 c07e 	ldrh.w	ip, [r7, #126]	; 0x7e
            draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x;
 800e764:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
            draw_area.x1 = prev_p.x + pattern[i].x;
 800e766:	4442      	add	r2, r8
            draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x;
 800e768:	f8b7 007c 	ldrh.w	r0, [r7, #124]	; 0x7c
            draw_area.y1 = prev_p.y + pattern[i].y;
 800e76c:	f8b6 e002 	ldrh.w	lr, [r6, #2]
            draw_area.x1 = prev_p.x + pattern[i].x;
 800e770:	b292      	uxth	r2, r2
            draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x;
 800e772:	1a28      	subs	r0, r5, r0
            fill_fp(&draw_area, mask, style->line.color, opa);
 800e774:	6d3b      	ldr	r3, [r7, #80]	; 0x50
            draw_area.y1 = prev_p.y + pattern[i].y;
 800e776:	44e6      	add	lr, ip
            draw_area.x1 = prev_p.x + pattern[i].x;
 800e778:	f8a7 2080 	strh.w	r2, [r7, #128]	; 0x80
            draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x;
 800e77c:	4410      	add	r0, r2
            fill_fp(&draw_area, mask, style->line.color, opa);
 800e77e:	6f3d      	ldr	r5, [r7, #112]	; 0x70
            draw_area.y1 = prev_p.y + pattern[i].y;
 800e780:	fa0f fe8e 	sxth.w	lr, lr
            fill_fp(&draw_area, mask, style->line.color, opa);
 800e784:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
            draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x;
 800e788:	f8a7 0084 	strh.w	r0, [r7, #132]	; 0x84
            draw_area.y1 = prev_p.y + pattern[i].y;
 800e78c:	f8a7 e082 	strh.w	lr, [r7, #130]	; 0x82
            fill_fp(&draw_area, mask, style->line.color, opa);
 800e790:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
            draw_area.y2 = draw_area.y1;
 800e792:	f8a7 e086 	strh.w	lr, [r7, #134]	; 0x86
            fill_fp(&draw_area, mask, style->line.color, opa);
 800e796:	47a8      	blx	r5
            if(i != 0 && pattern[i].x != pattern[i - 1].x && !first_run) {
 800e798:	b1a4      	cbz	r4, 800e7c4 <lv_draw_line+0x970>
 800e79a:	f936 3c04 	ldrsh.w	r3, [r6, #-4]
 800e79e:	4543      	cmp	r3, r8
 800e7a0:	d010      	beq.n	800e7c4 <lv_draw_line+0x970>
 800e7a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                px_fp(draw_area.x1, draw_area.y1 - main_line->sy, mask, style->line.color, opa);
 800e7a4:	465a      	mov	r2, fp
            if(i != 0 && pattern[i].x != pattern[i - 1].x && !first_run) {
 800e7a6:	b96b      	cbnz	r3, 800e7c4 <lv_draw_line+0x970>
                px_fp(draw_area.x1, draw_area.y1 - main_line->sy, mask, style->line.color, opa);
 800e7a8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800e7aa:	f8b7 1082 	ldrh.w	r1, [r7, #130]	; 0x82
 800e7ae:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800e7b0:	1a09      	subs	r1, r1, r0
 800e7b2:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800e7b6:	f9b7 0080 	ldrsh.w	r0, [r7, #128]	; 0x80
 800e7ba:	b209      	sxth	r1, r1
 800e7bc:	9500      	str	r5, [sp, #0]
 800e7be:	f8da 5000 	ldr.w	r5, [sl]
 800e7c2:	47a8      	blx	r5
 800e7c4:	3401      	adds	r4, #1
        for(i = 0; i < width; i++) {
 800e7c6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e7c8:	3604      	adds	r6, #4
 800e7ca:	b223      	sxth	r3, r4
 800e7cc:	429a      	cmp	r2, r3
 800e7ce:	dcc2      	bgt.n	800e756 <lv_draw_line+0x902>
        lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 800e7d0:	f8b7 007c 	ldrh.w	r0, [r7, #124]	; 0x7c
 800e7d4:	465b      	mov	r3, fp
 800e7d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e7d8:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800e7da:	4402      	add	r2, r0
 800e7dc:	f8b7 107e 	ldrh.w	r1, [r7, #126]	; 0x7e
 800e7e0:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800e7e2:	4610      	mov	r0, r2
                -(main_line->p_act.x - prev_p.x + 1), mask, style->line.color, opa);
 800e7e4:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
        lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 800e7e8:	9501      	str	r5, [sp, #4]
 800e7ea:	440c      	add	r4, r1
                -(main_line->p_act.x - prev_p.x + 1), mask, style->line.color, opa);
 800e7ec:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
        lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 800e7ee:	b200      	sxth	r0, r0
 800e7f0:	4621      	mov	r1, r4
 800e7f2:	69bc      	ldr	r4, [r7, #24]
                -(main_line->p_act.x - prev_p.x + 1), mask, style->line.color, opa);
 800e7f4:	1ab2      	subs	r2, r6, r2
        lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 800e7f6:	1b09      	subs	r1, r1, r4
 800e7f8:	f8d9 4040 	ldr.w	r4, [r9, #64]	; 0x40
 800e7fc:	43d2      	mvns	r2, r2
 800e7fe:	b209      	sxth	r1, r1
 800e800:	9400      	str	r4, [sp, #0]
 800e802:	b212      	sxth	r2, r2
 800e804:	f7fe fb70 	bl	800cee8 <lv_draw_aa_hor_seg>
        lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x, prev_p.y + pattern[width_safe - 1].y + aa_shift2,
 800e808:	f8b7 007c 	ldrh.w	r0, [r7, #124]	; 0x7c
 800e80c:	6a3c      	ldr	r4, [r7, #32]
 800e80e:	465b      	mov	r3, fp
 800e810:	f8b7 107e 	ldrh.w	r1, [r7, #126]	; 0x7e
 800e814:	4404      	add	r4, r0
                main_line->p_act.x - prev_p.x + 1, mask, style->line.color, opa);
 800e816:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
        lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x, prev_p.y + pattern[width_safe - 1].y + aa_shift2,
 800e81a:	4620      	mov	r0, r4
 800e81c:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800e81e:	9501      	str	r5, [sp, #4]
                main_line->p_act.x - prev_p.x + 1, mask, style->line.color, opa);
 800e820:	f1c2 0201 	rsb	r2, r2, #1
        lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x, prev_p.y + pattern[width_safe - 1].y + aa_shift2,
 800e824:	440c      	add	r4, r1
 800e826:	69fd      	ldr	r5, [r7, #28]
                main_line->p_act.x - prev_p.x + 1, mask, style->line.color, opa);
 800e828:	4432      	add	r2, r6
        lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x, prev_p.y + pattern[width_safe - 1].y + aa_shift2,
 800e82a:	b200      	sxth	r0, r0
 800e82c:	4621      	mov	r1, r4
 800e82e:	f8d9 4040 	ldr.w	r4, [r9, #64]	; 0x40
 800e832:	b212      	sxth	r2, r2
 800e834:	440d      	add	r5, r1
 800e836:	9400      	str	r4, [sp, #0]
 800e838:	4629      	mov	r1, r5
 800e83a:	b209      	sxth	r1, r1
 800e83c:	f7fe fb54 	bl	800cee8 <lv_draw_aa_hor_seg>
 800e840:	f8d7 d014 	ldr.w	sp, [r7, #20]
}
 800e844:	378c      	adds	r7, #140	; 0x8c
 800e846:	46bd      	mov	sp, r7
 800e848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e84c:	0808b60c 	.word	0x0808b60c
 800e850:	0808b610 	.word	0x0808b610
            lv_coord_t seg_w = pattern[width_safe - 1].x - pattern[aa_last_corner].x;
 800e854:	b2b3      	uxth	r3, r6
                lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w, main_line->p1.y + pattern[aa_last_corner].y - 1,
 800e856:	6d7a      	ldr	r2, [r7, #84]	; 0x54
            lv_coord_t seg_w = pattern[width_safe - 1].x - pattern[aa_last_corner].x;
 800e858:	eba3 0608 	sub.w	r6, r3, r8
 800e85c:	63bb      	str	r3, [r7, #56]	; 0x38
            if(main_line->sx < 0) {
 800e85e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
            lv_coord_t seg_w = pattern[width_safe - 1].x - pattern[aa_last_corner].x;
 800e860:	b2b6      	uxth	r6, r6
            if(main_line->sx < 0) {
 800e862:	3301      	adds	r3, #1
                lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w, main_line->p1.y + pattern[aa_last_corner].y - 1,
 800e864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e866:	eb03 0382 	add.w	r3, r3, r2, lsl #2
            if(main_line->sx < 0) {
 800e86a:	f000 82f4 	beq.w	800ee56 <lv_draw_line+0x1002>
                        seg_w + main_line->sx, mask, style->line.color, opa);
 800e86e:	6eba      	ldr	r2, [r7, #104]	; 0x68
                lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x, main_line->p1.y + pattern[aa_last_corner].y - 1,
 800e870:	885b      	ldrh	r3, [r3, #2]
                        seg_w + main_line->sx, mask, style->line.color, opa);
 800e872:	4416      	add	r6, r2
                lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x, main_line->p1.y + pattern[aa_last_corner].y - 1,
 800e874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e876:	1e51      	subs	r1, r2, #1
 800e878:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e87a:	4442      	add	r2, r8
 800e87c:	4419      	add	r1, r3
 800e87e:	4610      	mov	r0, r2
                        seg_w + main_line->sx, mask, style->line.color, opa);
 800e880:	b2b2      	uxth	r2, r6
                lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x, main_line->p1.y + pattern[aa_last_corner].y - 1,
 800e882:	b209      	sxth	r1, r1
                        seg_w + main_line->sx, mask, style->line.color, opa);
 800e884:	4616      	mov	r6, r2
                lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x, main_line->p1.y + pattern[aa_last_corner].y - 1,
 800e886:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e888:	b200      	sxth	r0, r0
 800e88a:	9201      	str	r2, [sp, #4]
 800e88c:	66fe      	str	r6, [r7, #108]	; 0x6c
 800e88e:	f8d9 6040 	ldr.w	r6, [r9, #64]	; 0x40
 800e892:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e894:	465b      	mov	r3, fp
 800e896:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800e89a:	9600      	str	r6, [sp, #0]
 800e89c:	f7fe fb24 	bl	800cee8 <lv_draw_aa_hor_seg>
                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x, main_line->p2.y + pattern[aa_last_corner].y + 1,
 800e8a0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e8a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e8a6:	9001      	str	r0, [sp, #4]
 800e8a8:	425a      	negs	r2, r3
 800e8aa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e8ac:	3101      	adds	r1, #1
 800e8ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e8b0:	b212      	sxth	r2, r2
 800e8b2:	4440      	add	r0, r8
 800e8b4:	f8d9 6040 	ldr.w	r6, [r9, #64]	; 0x40
 800e8b8:	4419      	add	r1, r3
 800e8ba:	465b      	mov	r3, fp
 800e8bc:	b200      	sxth	r0, r0
 800e8be:	9600      	str	r6, [sp, #0]
 800e8c0:	b209      	sxth	r1, r1
 800e8c2:	f7fe fb11 	bl	800cee8 <lv_draw_aa_hor_seg>
 800e8c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e8c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e8ca:	3300      	adds	r3, #0
 800e8cc:	bf18      	it	ne
 800e8ce:	2301      	movne	r3, #1
 800e8d0:	61fb      	str	r3, [r7, #28]
 800e8d2:	8813      	ldrh	r3, [r2, #0]
 800e8d4:	623b      	str	r3, [r7, #32]
 800e8d6:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
        if(main_line->sx < 0) {
 800e8da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e8dc:	3201      	adds	r2, #1
 800e8de:	f000 820d 	beq.w	800ecfc <lv_draw_line+0xea8>
 800e8e2:	8bba      	ldrh	r2, [r7, #28]
 800e8e4:	61ba      	str	r2, [r7, #24]
 800e8e6:	2201      	movs	r2, #1
 800e8e8:	61fa      	str	r2, [r7, #28]
 800e8ea:	b29b      	uxth	r3, r3
    prev_p.x = main_line->p1.x;
 800e8ec:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 800e8f0:	f8c7 9040 	str.w	r9, [r7, #64]	; 0x40
 800e8f4:	46d9      	mov	r9, fp
 800e8f6:	627b      	str	r3, [r7, #36]	; 0x24
 800e8f8:	b2ab      	uxth	r3, r5
 800e8fa:	f8a7 207c 	strh.w	r2, [r7, #124]	; 0x7c
 800e8fe:	46d3      	mov	fp, sl
    prev_p.y = main_line->p1.y;
 800e900:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e902:	62bb      	str	r3, [r7, #40]	; 0x28
 800e904:	2301      	movs	r3, #1
 800e906:	f8a7 207e 	strh.w	r2, [r7, #126]	; 0x7e
 800e90a:	4692      	mov	sl, r2
 800e90c:	657b      	str	r3, [r7, #84]	; 0x54
 800e90e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e910:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e912:	4293      	cmp	r3, r2
        line->p_act.x += line->sx;
 800e914:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e916:	f000 80b7 	beq.w	800ea88 <lv_draw_line+0xc34>
 800e91a:	18d1      	adds	r1, r2, r3
 800e91c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e91e:	461d      	mov	r5, r3
 800e920:	4250      	negs	r0, r2
 800e922:	b209      	sxth	r1, r1
        line->err -= line->dy;
 800e924:	eba4 030b 	sub.w	r3, r4, fp
    if(line->e2 > -line->dx) {
 800e928:	4284      	cmp	r4, r0
        line->p_act.x += line->sx;
 800e92a:	460a      	mov	r2, r1
        line->err -= line->dy;
 800e92c:	b21b      	sxth	r3, r3
    if(line->e2 > -line->dx) {
 800e92e:	f340 80c7 	ble.w	800eac0 <lv_draw_line+0xc6c>
    if(line->e2 < line->dy) {
 800e932:	45a3      	cmp	fp, r4
        line->err -= line->dy;
 800e934:	461c      	mov	r4, r3
    if(line->e2 < line->dy) {
 800e936:	f340 80c8 	ble.w	800eaca <lv_draw_line+0xc76>
        line->err += line->dx;
 800e93a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e93c:	441c      	add	r4, r3
        line->p_act.y += line->sy;
 800e93e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e940:	449a      	add	sl, r3
        line->err += line->dx;
 800e942:	b224      	sxth	r4, r4
        line->p_act.y += line->sy;
 800e944:	fa0f fa8a 	sxth.w	sl, sl
{
    lv_coord_t last_x = line->p_act.x;

    do {
        if(!line_next(line)) return false;
    } while(last_x == line->p_act.x);
 800e948:	42aa      	cmp	r2, r5
 800e94a:	d0eb      	beq.n	800e924 <lv_draw_line+0xad0>
            for(i = 0; i < width; i++) {
 800e94c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    } while(last_x == line->p_act.x);
 800e94e:	65ba      	str	r2, [r7, #88]	; 0x58
            for(i = 0; i < width; i++) {
 800e950:	2b00      	cmp	r3, #0
 800e952:	fa1f f38a 	uxth.w	r3, sl
 800e956:	663b      	str	r3, [r7, #96]	; 0x60
 800e958:	dd57      	ble.n	800ea0a <lv_draw_line+0xbb6>
 800e95a:	4bb5      	ldr	r3, [pc, #724]	; (800ec30 <lv_draw_line+0xddc>)
 800e95c:	f04f 0800 	mov.w	r8, #0
 800e960:	63fc      	str	r4, [r7, #60]	; 0x3c
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	4644      	mov	r4, r8
 800e966:	f8c7 b034 	str.w	fp, [r7, #52]	; 0x34
 800e96a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e96c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800e970:	f8c7 a02c 	str.w	sl, [r7, #44]	; 0x2c
 800e974:	6c7d      	ldr	r5, [r7, #68]	; 0x44
 800e976:	469b      	mov	fp, r3
 800e978:	f8d7 8050 	ldr.w	r8, [r7, #80]	; 0x50
 800e97c:	f8d7 a040 	ldr.w	sl, [r7, #64]	; 0x40
                draw_area.x1 = prev_p.x + pattern[i].x;
 800e980:	f8b7 007c 	ldrh.w	r0, [r7, #124]	; 0x7c
                fill_fp(&draw_area, mask, style->line.color, opa);
 800e984:	4643      	mov	r3, r8
                draw_area.y1 = prev_p.y + pattern[i].y;
 800e986:	f9b5 6002 	ldrsh.w	r6, [r5, #2]
                fill_fp(&draw_area, mask, style->line.color, opa);
 800e98a:	4649      	mov	r1, r9
                draw_area.y1 = prev_p.y + pattern[i].y;
 800e98c:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
                draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y - 1;
 800e990:	f8b7 e07e 	ldrh.w	lr, [r7, #126]	; 0x7e
                draw_area.y1 = prev_p.y + pattern[i].y;
 800e994:	4432      	add	r2, r6
                draw_area.x1 = prev_p.x + pattern[i].x;
 800e996:	f8b5 c000 	ldrh.w	ip, [r5]
                draw_area.y1 = prev_p.y + pattern[i].y;
 800e99a:	66fe      	str	r6, [r7, #108]	; 0x6c
                draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y - 1;
 800e99c:	ea6f 0e0e 	mvn.w	lr, lr
 800e9a0:	6e3e      	ldr	r6, [r7, #96]	; 0x60
                draw_area.y1 = prev_p.y + pattern[i].y;
 800e9a2:	b292      	uxth	r2, r2
                draw_area.x1 = prev_p.x + pattern[i].x;
 800e9a4:	4460      	add	r0, ip
                draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y - 1;
 800e9a6:	44b6      	add	lr, r6
                draw_area.y1 = prev_p.y + pattern[i].y;
 800e9a8:	f8a7 2082 	strh.w	r2, [r7, #130]	; 0x82
                draw_area.x1 = prev_p.x + pattern[i].x;
 800e9ac:	b200      	sxth	r0, r0
                fill_fp(&draw_area, mask, style->line.color, opa);
 800e9ae:	6dfe      	ldr	r6, [r7, #92]	; 0x5c
                draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y - 1;
 800e9b0:	4496      	add	lr, r2
                fill_fp(&draw_area, mask, style->line.color, opa);
 800e9b2:	f8da 2040 	ldr.w	r2, [sl, #64]	; 0x40
                draw_area.x1 = prev_p.x + pattern[i].x;
 800e9b6:	f8a7 0080 	strh.w	r0, [r7, #128]	; 0x80
                draw_area.x2 = draw_area.x1;
 800e9ba:	f8a7 0084 	strh.w	r0, [r7, #132]	; 0x84
                fill_fp(&draw_area, mask, style->line.color, opa);
 800e9be:	4658      	mov	r0, fp
                draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y - 1;
 800e9c0:	f8a7 e086 	strh.w	lr, [r7, #134]	; 0x86
                fill_fp(&draw_area, mask, style->line.color, opa);
 800e9c4:	47b0      	blx	r6
                if(i != 0 && pattern[i].y != pattern[i - 1].y && !first_run) {
 800e9c6:	b1ac      	cbz	r4, 800e9f4 <lv_draw_line+0xba0>
 800e9c8:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
 800e9cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e9ce:	4293      	cmp	r3, r2
 800e9d0:	d010      	beq.n	800e9f4 <lv_draw_line+0xba0>
 800e9d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                    px_fp(draw_area.x1 - main_line->sx, draw_area.y1, mask, style->line.color, opa);
 800e9d4:	464a      	mov	r2, r9
                if(i != 0 && pattern[i].y != pattern[i - 1].y && !first_run) {
 800e9d6:	b96b      	cbnz	r3, 800e9f4 <lv_draw_line+0xba0>
                    px_fp(draw_area.x1 - main_line->sx, draw_area.y1, mask, style->line.color, opa);
 800e9d8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e9da:	f8b7 0080 	ldrh.w	r0, [r7, #128]	; 0x80
 800e9de:	4e95      	ldr	r6, [pc, #596]	; (800ec34 <lv_draw_line+0xde0>)
 800e9e0:	1a40      	subs	r0, r0, r1
 800e9e2:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 800e9e6:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 800e9ea:	b200      	sxth	r0, r0
 800e9ec:	f8cd 8000 	str.w	r8, [sp]
 800e9f0:	6836      	ldr	r6, [r6, #0]
 800e9f2:	47b0      	blx	r6
 800e9f4:	3401      	adds	r4, #1
            for(i = 0; i < width; i++) {
 800e9f6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e9f8:	3504      	adds	r5, #4
 800e9fa:	b223      	sxth	r3, r4
 800e9fc:	429a      	cmp	r2, r3
 800e9fe:	dcbf      	bgt.n	800e980 <lv_draw_line+0xb2c>
 800ea00:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 800ea02:	f8d7 b034 	ldr.w	fp, [r7, #52]	; 0x34
 800ea06:	f8d7 a02c 	ldr.w	sl, [r7, #44]	; 0x2c
            lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
 800ea0a:	f8b7 007c 	ldrh.w	r0, [r7, #124]	; 0x7c
 800ea0e:	464b      	mov	r3, r9
 800ea10:	6a3a      	ldr	r2, [r7, #32]
 800ea12:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 800ea14:	f8b7 107e 	ldrh.w	r1, [r7, #126]	; 0x7e
 800ea18:	4410      	add	r0, r2
 800ea1a:	6a7d      	ldr	r5, [r7, #36]	; 0x24
                    -(main_line->p_act.y - prev_p.y), mask, style->line.color, opa);
 800ea1c:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
            lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
 800ea20:	9601      	str	r6, [sp, #4]
 800ea22:	4429      	add	r1, r5
 800ea24:	69bd      	ldr	r5, [r7, #24]
 800ea26:	b209      	sxth	r1, r1
 800ea28:	1b40      	subs	r0, r0, r5
                    -(main_line->p_act.y - prev_p.y), mask, style->line.color, opa);
 800ea2a:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 800ea2c:	1b52      	subs	r2, r2, r5
            lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
 800ea2e:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 800ea30:	b200      	sxth	r0, r0
 800ea32:	6c2d      	ldr	r5, [r5, #64]	; 0x40
 800ea34:	b212      	sxth	r2, r2
 800ea36:	9500      	str	r5, [sp, #0]
 800ea38:	f7fe f9bc 	bl	800cdb4 <lv_draw_aa_ver_seg>
            first_run = false;
 800ea3c:	2300      	movs	r3, #0
            lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2, prev_p.y + pattern[width_safe - 1].y,
 800ea3e:	f8b7 007c 	ldrh.w	r0, [r7, #124]	; 0x7c
            first_run = false;
 800ea42:	657b      	str	r3, [r7, #84]	; 0x54
            lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2, prev_p.y + pattern[width_safe - 1].y,
 800ea44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea46:	f8b7 107e 	ldrh.w	r1, [r7, #126]	; 0x7e
 800ea4a:	4418      	add	r0, r3
                    main_line->p_act.y - prev_p.y, mask, style->line.color, opa);
 800ea4c:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
            lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2, prev_p.y + pattern[width_safe - 1].y,
 800ea50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea52:	9601      	str	r6, [sp, #4]
                    main_line->p_act.y - prev_p.y, mask, style->line.color, opa);
 800ea54:	6e3d      	ldr	r5, [r7, #96]	; 0x60
            lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2, prev_p.y + pattern[width_safe - 1].y,
 800ea56:	4419      	add	r1, r3
 800ea58:	69fb      	ldr	r3, [r7, #28]
                    main_line->p_act.y - prev_p.y, mask, style->line.color, opa);
 800ea5a:	1aaa      	subs	r2, r5, r2
            lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2, prev_p.y + pattern[width_safe - 1].y,
 800ea5c:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 800ea5e:	4418      	add	r0, r3
 800ea60:	b209      	sxth	r1, r1
 800ea62:	6c2d      	ldr	r5, [r5, #64]	; 0x40
 800ea64:	464b      	mov	r3, r9
 800ea66:	b212      	sxth	r2, r2
 800ea68:	b200      	sxth	r0, r0
 800ea6a:	9500      	str	r5, [sp, #0]
 800ea6c:	f7fe f9a2 	bl	800cdb4 <lv_draw_aa_ver_seg>
            prev_p.x = main_line->p_act.x;
 800ea70:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800ea74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ea76:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 800ea7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
            prev_p.y = main_line->p_act.y;
 800ea7c:	f8a7 a07e 	strh.w	sl, [r7, #126]	; 0x7e
 800ea80:	4293      	cmp	r3, r2
        line->p_act.x += line->sx;
 800ea82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ea84:	f47f af49 	bne.w	800e91a <lv_draw_line+0xac6>
 800ea88:	1898      	adds	r0, r3, r2
    if(line->e2 > -line->dx) {
 800ea8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
        line->p_act.x += line->sx;
 800ea8c:	b200      	sxth	r0, r0
    if(line->e2 > -line->dx) {
 800ea8e:	425d      	negs	r5, r3
    if(line->p_act.x == line->p2.x && line->p_act.y == line->p2.y) return false;
 800ea90:	6cba      	ldr	r2, [r7, #72]	; 0x48
        line->err -= line->dy;
 800ea92:	eba4 030b 	sub.w	r3, r4, fp
    if(line->p_act.x == line->p2.x && line->p_act.y == line->p2.y) return false;
 800ea96:	4592      	cmp	sl, r2
        line->p_act.y += line->sy;
 800ea98:	6e7a      	ldr	r2, [r7, #100]	; 0x64
        line->err -= line->dy;
 800ea9a:	b21b      	sxth	r3, r3
        line->p_act.y += line->sy;
 800ea9c:	eb0a 0102 	add.w	r1, sl, r2
        line->p_act.x += line->sx;
 800eaa0:	4602      	mov	r2, r0
    if(line->p_act.x == line->p2.x && line->p_act.y == line->p2.y) return false;
 800eaa2:	d019      	beq.n	800ead8 <lv_draw_line+0xc84>
    if(line->e2 > -line->dx) {
 800eaa4:	42ac      	cmp	r4, r5
 800eaa6:	dd12      	ble.n	800eace <lv_draw_line+0xc7a>
    if(line->e2 < line->dy) {
 800eaa8:	455c      	cmp	r4, fp
 800eaaa:	f280 809d 	bge.w	800ebe8 <lv_draw_line+0xd94>
        line->err += line->dx;
 800eaae:	6f3c      	ldr	r4, [r7, #112]	; 0x70
        line->p_act.y += line->sy;
 800eab0:	fa0f fa81 	sxth.w	sl, r1
        line->err += line->dx;
 800eab4:	4423      	add	r3, r4
 800eab6:	b21c      	sxth	r4, r3
    } while(last_x == line->p_act.x);
 800eab8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eaba:	429a      	cmp	r2, r3
 800eabc:	d0e8      	beq.n	800ea90 <lv_draw_line+0xc3c>
 800eabe:	e745      	b.n	800e94c <lv_draw_line+0xaf8>
    if(line->e2 < line->dy) {
 800eac0:	45a3      	cmp	fp, r4
 800eac2:	462a      	mov	r2, r5
 800eac4:	f73f af39 	bgt.w	800e93a <lv_draw_line+0xae6>
 800eac8:	e72c      	b.n	800e924 <lv_draw_line+0xad0>
        line->err -= line->dy;
 800eaca:	461c      	mov	r4, r3
 800eacc:	e73c      	b.n	800e948 <lv_draw_line+0xaf4>
    if(line->e2 < line->dy) {
 800eace:	455c      	cmp	r4, fp
 800ead0:	4623      	mov	r3, r4
 800ead2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ead4:	dbeb      	blt.n	800eaae <lv_draw_line+0xc5a>
 800ead6:	e7db      	b.n	800ea90 <lv_draw_line+0xc3c>
        for(i = 0; i < width; i++) {
 800ead8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eada:	46cb      	mov	fp, r9
 800eadc:	f8d7 9040 	ldr.w	r9, [r7, #64]	; 0x40
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	dd48      	ble.n	800eb76 <lv_draw_line+0xd22>
 800eae4:	4b52      	ldr	r3, [pc, #328]	; (800ec30 <lv_draw_line+0xddc>)
 800eae6:	f04f 0800 	mov.w	r8, #0
 800eaea:	f107 0580 	add.w	r5, r7, #128	; 0x80
 800eaee:	6c7e      	ldr	r6, [r7, #68]	; 0x44
 800eaf0:	681b      	ldr	r3, [r3, #0]
                px_fp(draw_area.x1 - main_line->sx, draw_area.y1, mask, style->line.color, opa);
 800eaf2:	4644      	mov	r4, r8
 800eaf4:	f8df a13c 	ldr.w	sl, [pc, #316]	; 800ec34 <lv_draw_line+0xde0>
 800eaf8:	673b      	str	r3, [r7, #112]	; 0x70
 800eafa:	66fd      	str	r5, [r7, #108]	; 0x6c
            draw_area.x1 = prev_p.x + pattern[i].x;
 800eafc:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
            fill_fp(&draw_area, mask, style->line.color, opa);
 800eb00:	4659      	mov	r1, fp
            draw_area.y1 = prev_p.y + pattern[i].y;
 800eb02:	f8b7 007e 	ldrh.w	r0, [r7, #126]	; 0x7e
 800eb06:	f9b6 8002 	ldrsh.w	r8, [r6, #2]
            draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y;
 800eb0a:	6b3d      	ldr	r5, [r7, #48]	; 0x30
            draw_area.x1 = prev_p.x + pattern[i].x;
 800eb0c:	f8b6 c000 	ldrh.w	ip, [r6]
            draw_area.y1 = prev_p.y + pattern[i].y;
 800eb10:	4440      	add	r0, r8
            draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y;
 800eb12:	f8b7 e07e 	ldrh.w	lr, [r7, #126]	; 0x7e
            draw_area.y1 = prev_p.y + pattern[i].y;
 800eb16:	b280      	uxth	r0, r0
            draw_area.x1 = prev_p.x + pattern[i].x;
 800eb18:	4462      	add	r2, ip
            draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y;
 800eb1a:	eba5 0e0e 	sub.w	lr, r5, lr
            fill_fp(&draw_area, mask, style->line.color, opa);
 800eb1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
            draw_area.x1 = prev_p.x + pattern[i].x;
 800eb20:	b212      	sxth	r2, r2
            draw_area.y1 = prev_p.y + pattern[i].y;
 800eb22:	f8a7 0082 	strh.w	r0, [r7, #130]	; 0x82
            draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y;
 800eb26:	4486      	add	lr, r0
            fill_fp(&draw_area, mask, style->line.color, opa);
 800eb28:	6f3d      	ldr	r5, [r7, #112]	; 0x70
            draw_area.x1 = prev_p.x + pattern[i].x;
 800eb2a:	f8a7 2080 	strh.w	r2, [r7, #128]	; 0x80
            draw_area.x2 = draw_area.x1;
 800eb2e:	f8a7 2084 	strh.w	r2, [r7, #132]	; 0x84
            fill_fp(&draw_area, mask, style->line.color, opa);
 800eb32:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
            draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y;
 800eb34:	f8a7 e086 	strh.w	lr, [r7, #134]	; 0x86
            fill_fp(&draw_area, mask, style->line.color, opa);
 800eb38:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
 800eb3c:	47a8      	blx	r5
            if(i != 0 && pattern[i].y != pattern[i - 1].y && !first_run) {
 800eb3e:	b1a4      	cbz	r4, 800eb6a <lv_draw_line+0xd16>
 800eb40:	f936 3c02 	ldrsh.w	r3, [r6, #-2]
 800eb44:	4543      	cmp	r3, r8
 800eb46:	d010      	beq.n	800eb6a <lv_draw_line+0xd16>
 800eb48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                px_fp(draw_area.x1 - main_line->sx, draw_area.y1, mask, style->line.color, opa);
 800eb4a:	465a      	mov	r2, fp
            if(i != 0 && pattern[i].y != pattern[i - 1].y && !first_run) {
 800eb4c:	b96b      	cbnz	r3, 800eb6a <lv_draw_line+0xd16>
                px_fp(draw_area.x1 - main_line->sx, draw_area.y1, mask, style->line.color, opa);
 800eb4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800eb50:	f8b7 0080 	ldrh.w	r0, [r7, #128]	; 0x80
 800eb54:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800eb56:	1a40      	subs	r0, r0, r1
 800eb58:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800eb5c:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 800eb60:	b200      	sxth	r0, r0
 800eb62:	9500      	str	r5, [sp, #0]
 800eb64:	f8da 5000 	ldr.w	r5, [sl]
 800eb68:	47a8      	blx	r5
 800eb6a:	3401      	adds	r4, #1
        for(i = 0; i < width; i++) {
 800eb6c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800eb6e:	3604      	adds	r6, #4
 800eb70:	b223      	sxth	r3, r4
 800eb72:	429a      	cmp	r2, r3
 800eb74:	dcc2      	bgt.n	800eafc <lv_draw_line+0xca8>
        lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
 800eb76:	f8b7 007c 	ldrh.w	r0, [r7, #124]	; 0x7c
 800eb7a:	465b      	mov	r3, fp
 800eb7c:	6a3a      	ldr	r2, [r7, #32]
 800eb7e:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800eb80:	4402      	add	r2, r0
 800eb82:	f8b7 107e 	ldrh.w	r1, [r7, #126]	; 0x7e
 800eb86:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800eb88:	4610      	mov	r0, r2
                -(main_line->p_act.y - prev_p.y + 1), mask, style->line.color, opa);
 800eb8a:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
        lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
 800eb8e:	9501      	str	r5, [sp, #4]
 800eb90:	440c      	add	r4, r1
                -(main_line->p_act.y - prev_p.y + 1), mask, style->line.color, opa);
 800eb92:	6b3e      	ldr	r6, [r7, #48]	; 0x30
        lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
 800eb94:	4621      	mov	r1, r4
 800eb96:	69bc      	ldr	r4, [r7, #24]
                -(main_line->p_act.y - prev_p.y + 1), mask, style->line.color, opa);
 800eb98:	1ab2      	subs	r2, r6, r2
        lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
 800eb9a:	1b00      	subs	r0, r0, r4
 800eb9c:	f8d9 4040 	ldr.w	r4, [r9, #64]	; 0x40
 800eba0:	43d2      	mvns	r2, r2
 800eba2:	b209      	sxth	r1, r1
 800eba4:	9400      	str	r4, [sp, #0]
 800eba6:	b200      	sxth	r0, r0
 800eba8:	b212      	sxth	r2, r2
 800ebaa:	f7fe f903 	bl	800cdb4 <lv_draw_aa_ver_seg>
        lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2, prev_p.y + pattern[width_safe - 1].y,
 800ebae:	f8b7 007c 	ldrh.w	r0, [r7, #124]	; 0x7c
 800ebb2:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800ebb4:	465b      	mov	r3, fp
 800ebb6:	f8b7 107e 	ldrh.w	r1, [r7, #126]	; 0x7e
 800ebba:	4404      	add	r4, r0
                main_line->p_act.y - prev_p.y + 1, mask, style->line.color, opa);
 800ebbc:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
        lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2, prev_p.y + pattern[width_safe - 1].y,
 800ebc0:	4620      	mov	r0, r4
 800ebc2:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800ebc4:	9501      	str	r5, [sp, #4]
                main_line->p_act.y - prev_p.y + 1, mask, style->line.color, opa);
 800ebc6:	f1c2 0201 	rsb	r2, r2, #1
        lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2, prev_p.y + pattern[width_safe - 1].y,
 800ebca:	440c      	add	r4, r1
                main_line->p_act.y - prev_p.y + 1, mask, style->line.color, opa);
 800ebcc:	4432      	add	r2, r6
        lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2, prev_p.y + pattern[width_safe - 1].y,
 800ebce:	4621      	mov	r1, r4
 800ebd0:	69fc      	ldr	r4, [r7, #28]
 800ebd2:	b212      	sxth	r2, r2
 800ebd4:	4404      	add	r4, r0
 800ebd6:	b209      	sxth	r1, r1
 800ebd8:	4620      	mov	r0, r4
 800ebda:	f8d9 4040 	ldr.w	r4, [r9, #64]	; 0x40
 800ebde:	b200      	sxth	r0, r0
 800ebe0:	9400      	str	r4, [sp, #0]
 800ebe2:	f7fe f8e7 	bl	800cdb4 <lv_draw_aa_ver_seg>
 800ebe6:	e62b      	b.n	800e840 <lv_draw_line+0x9ec>
        line->err -= line->dy;
 800ebe8:	461c      	mov	r4, r3
 800ebea:	e765      	b.n	800eab8 <lv_draw_line+0xc64>
                p_tmp.x = main_line.p2.x - 1;
 800ebec:	3b01      	subs	r3, #1
    line->dx = LV_MATH_ABS(line->p2.x - line->p1.x);
 800ebee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
                p_tmp.x = main_line.p2.x - 1;
 800ebf0:	b21b      	sxth	r3, r3
    line->dx = LV_MATH_ABS(line->p2.x - line->p1.x);
 800ebf2:	1a9a      	subs	r2, r3, r2
                p_tmp.x = main_line.p2.x - 1;
 800ebf4:	64fb      	str	r3, [r7, #76]	; 0x4c
    line->dx = LV_MATH_ABS(line->p2.x - line->p1.x);
 800ebf6:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 800ebfa:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 800ebfe:	b21b      	sxth	r3, r3
    line->err = (line->dx > line->dy ? line->dx : -line->dy) / 2;
 800ec00:	4553      	cmp	r3, sl
    line->dx = LV_MATH_ABS(line->p2.x - line->p1.x);
 800ec02:	673b      	str	r3, [r7, #112]	; 0x70
    line->err = (line->dx > line->dy ? line->dx : -line->dy) / 2;
 800ec04:	dc41      	bgt.n	800ec8a <lv_draw_line+0xe36>
 800ec06:	f1ba 0f00 	cmp.w	sl, #0
 800ec0a:	4654      	mov	r4, sl
 800ec0c:	bfb8      	it	lt
 800ec0e:	f10a 0401 	addlt.w	r4, sl, #1
 800ec12:	1064      	asrs	r4, r4, #1
 800ec14:	4264      	negs	r4, r4
 800ec16:	b224      	sxth	r4, r4
    line->hor = line->dx > line->dy ? true : false; /*Rather horizontal or vertical*/
 800ec18:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ec1a:	2301      	movs	r3, #1
 800ec1c:	4552      	cmp	r2, sl
 800ec1e:	637b      	str	r3, [r7, #52]	; 0x34
                main_line.sx = LV_MATH_ABS(main_line.sx);   /*The sign can change if the line becomes vertical*/
 800ec20:	66bb      	str	r3, [r7, #104]	; 0x68
    line->hor = line->dx > line->dy ? true : false; /*Rather horizontal or vertical*/
 800ec22:	bfd4      	ite	le
 800ec24:	2200      	movle	r2, #0
 800ec26:	2201      	movgt	r2, #1
 800ec28:	643a      	str	r2, [r7, #64]	; 0x40
 800ec2a:	f7ff b981 	b.w	800df30 <lv_draw_line+0xdc>
 800ec2e:	bf00      	nop
 800ec30:	0808b60c 	.word	0x0808b60c
 800ec34:	0808b610 	.word	0x0808b610
                p_tmp.y = main_line.p2.y - 1;
 800ec38:	3b01      	subs	r3, #1
    line->dy = LV_MATH_ABS(line->p2.y - line->p1.y);
 800ec3a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
                p_tmp.y = main_line.p2.y - 1;
 800ec3c:	b21b      	sxth	r3, r3
    line->dy = LV_MATH_ABS(line->p2.y - line->p1.y);
 800ec3e:	1a9a      	subs	r2, r3, r2
                p_tmp.y = main_line.p2.y - 1;
 800ec40:	64bb      	str	r3, [r7, #72]	; 0x48
    line->dy = LV_MATH_ABS(line->p2.y - line->p1.y);
 800ec42:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 800ec46:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 800ec4a:	fa0f fa83 	sxth.w	sl, r3
    line->err = (line->dx > line->dy ? line->dx : -line->dy) / 2;
 800ec4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ec50:	459a      	cmp	sl, r3
 800ec52:	db13      	blt.n	800ec7c <lv_draw_line+0xe28>
 800ec54:	f1ba 0f00 	cmp.w	sl, #0
 800ec58:	4654      	mov	r4, sl
 800ec5a:	bfb8      	it	lt
 800ec5c:	f10a 0401 	addlt.w	r4, sl, #1
 800ec60:	1064      	asrs	r4, r4, #1
 800ec62:	4264      	negs	r4, r4
 800ec64:	b224      	sxth	r4, r4
    line->hor = line->dx > line->dy ? true : false; /*Rather horizontal or vertical*/
 800ec66:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ec68:	2301      	movs	r3, #1
 800ec6a:	4592      	cmp	sl, r2
 800ec6c:	637b      	str	r3, [r7, #52]	; 0x34
                main_line.sy = LV_MATH_ABS(main_line.sy);   /*The sign can change if the line becomes horizontal*/
 800ec6e:	667b      	str	r3, [r7, #100]	; 0x64
    line->hor = line->dx > line->dy ? true : false; /*Rather horizontal or vertical*/
 800ec70:	bfac      	ite	ge
 800ec72:	2200      	movge	r2, #0
 800ec74:	2201      	movlt	r2, #1
 800ec76:	643a      	str	r2, [r7, #64]	; 0x40
 800ec78:	f7ff b95a 	b.w	800df30 <lv_draw_line+0xdc>
    line->err = (line->dx > line->dy ? line->dx : -line->dy) / 2;
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	461c      	mov	r4, r3
 800ec80:	bfb8      	it	lt
 800ec82:	1c5c      	addlt	r4, r3, #1
 800ec84:	f344 044f 	sbfx	r4, r4, #1, #16
 800ec88:	e7ed      	b.n	800ec66 <lv_draw_line+0xe12>
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	461c      	mov	r4, r3
 800ec8e:	bfb8      	it	lt
 800ec90:	1c5c      	addlt	r4, r3, #1
 800ec92:	1064      	asrs	r4, r4, #1
 800ec94:	e7c0      	b.n	800ec18 <lv_draw_line+0xdc4>
 800ec96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec98:	68bc      	ldr	r4, [r7, #8]
 800ec9a:	881b      	ldrh	r3, [r3, #0]
 800ec9c:	f8d7 a004 	ldr.w	sl, [r7, #4]
 800eca0:	677d      	str	r5, [r7, #116]	; 0x74
 800eca2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800eca6:	f8d7 b000 	ldr.w	fp, [r7]
 800ecaa:	63bb      	str	r3, [r7, #56]	; 0x38
    if(width == 0) width_safe = 1;
 800ecac:	b125      	cbz	r5, 800ecb8 <lv_draw_line+0xe64>
 800ecae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ecb0:	623b      	str	r3, [r7, #32]
 800ecb2:	461a      	mov	r2, r3
 800ecb4:	f7ff bae1 	b.w	800e27a <lv_draw_line+0x426>
        if(main_line->hor && main_line->p1.y >= main_line->p2.y + dir_ori) pattern[0].y --;
 800ecb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ecba:	b963      	cbnz	r3, 800ecd6 <lv_draw_line+0xe82>
        if(!main_line->hor && main_line->p1.x >= main_line->p2.x + dir_ori) pattern[0].x --;
 800ecbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ecbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecc0:	4413      	add	r3, r2
 800ecc2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ecc4:	4293      	cmp	r3, r2
 800ecc6:	dd28      	ble.n	800ed1a <lv_draw_line+0xec6>
 800ecc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ecca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eccc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    for(i = 0; i < width; i++) {
 800ecd0:	461d      	mov	r5, r3
 800ecd2:	623a      	str	r2, [r7, #32]
 800ecd4:	e601      	b.n	800e8da <lv_draw_line+0xa86>
        if(main_line->hor && main_line->p1.y >= main_line->p2.y + dir_ori) pattern[0].y --;
 800ecd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ecd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecda:	4413      	add	r3, r2
 800ecdc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ecde:	4293      	cmp	r3, r2
 800ece0:	dc27      	bgt.n	800ed32 <lv_draw_line+0xede>
 800ece2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ece4:	8855      	ldrh	r5, [r2, #2]
 800ece6:	3d01      	subs	r5, #1
 800ece8:	b22d      	sxth	r5, r5
 800ecea:	8055      	strh	r5, [r2, #2]
 800ecec:	b2ab      	uxth	r3, r5
 800ecee:	461a      	mov	r2, r3
 800ecf0:	62bb      	str	r3, [r7, #40]	; 0x28
    for(i = 0; i < width; i++) {
 800ecf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecf4:	627a      	str	r2, [r7, #36]	; 0x24
 800ecf6:	623b      	str	r3, [r7, #32]
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	e426      	b.n	800e54a <lv_draw_line+0x6f6>
            aa_shift2 = width == 0 ? 0 : aa_shift1;
 800ecfc:	69fa      	ldr	r2, [r7, #28]
 800ecfe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ed02:	4252      	negs	r2, r2
 800ed04:	61b9      	str	r1, [r7, #24]
 800ed06:	b292      	uxth	r2, r2
 800ed08:	61fa      	str	r2, [r7, #28]
 800ed0a:	e5ee      	b.n	800e8ea <lv_draw_line+0xa96>
            aa_shift2 = width == 0 ? 0 : aa_shift1;
 800ed0c:	425b      	negs	r3, r3
 800ed0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed12:	b29b      	uxth	r3, r3
 800ed14:	61ba      	str	r2, [r7, #24]
 800ed16:	61fb      	str	r3, [r7, #28]
 800ed18:	e41f      	b.n	800e55a <lv_draw_line+0x706>
        if(!main_line->hor && main_line->p1.x >= main_line->p2.x + dir_ori) pattern[0].x --;
 800ed1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed1c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ed1e:	1e5a      	subs	r2, r3, #1
 800ed20:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800ed24:	b292      	uxth	r2, r2
 800ed26:	4610      	mov	r0, r2
 800ed28:	63ba      	str	r2, [r7, #56]	; 0x38
 800ed2a:	460a      	mov	r2, r1
 800ed2c:	8010      	strh	r0, [r2, #0]
 800ed2e:	4602      	mov	r2, r0
 800ed30:	e7ce      	b.n	800ecd0 <lv_draw_line+0xe7c>
 800ed32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed34:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
 800ed38:	e7d8      	b.n	800ecec <lv_draw_line+0xe98>
    line->dy = LV_MATH_ABS(line->p2.y - line->p1.y);
 800ed3a:	fa0f fa84 	sxth.w	sl, r4
 800ed3e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800ed40:	6e38      	ldr	r0, [r7, #96]	; 0x60
    line->sx = line->p1.x < line->p2.x ? 1 : -1;
 800ed42:	2201      	movs	r2, #1
    line->dy = LV_MATH_ABS(line->p2.y - line->p1.y);
 800ed44:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 800ed46:	64fc      	str	r4, [r7, #76]	; 0x4c
 800ed48:	6cbc      	ldr	r4, [r7, #72]	; 0x48
    line->sx = line->p1.x < line->p2.x ? 1 : -1;
 800ed4a:	66ba      	str	r2, [r7, #104]	; 0x68
    line->dy = LV_MATH_ABS(line->p2.y - line->p1.y);
 800ed4c:	65bd      	str	r5, [r7, #88]	; 0x58
 800ed4e:	65fc      	str	r4, [r7, #92]	; 0x5c
 800ed50:	66f9      	str	r1, [r7, #108]	; 0x6c
            p1.y = point1->y;
 800ed52:	663c      	str	r4, [r7, #96]	; 0x60
    line->sy = line->p1.y < line->p2.y ? 1 : -1;
 800ed54:	667a      	str	r2, [r7, #100]	; 0x64
            p2.y = point2->y;
 800ed56:	64b8      	str	r0, [r7, #72]	; 0x48
 800ed58:	f7ff b8c4 	b.w	800dee4 <lv_draw_line+0x90>
    line->err = (line->dx > line->dy ? line->dx : -line->dy) / 2;
 800ed5c:	f1b8 0f00 	cmp.w	r8, #0
 800ed60:	4643      	mov	r3, r8
 800ed62:	bfb8      	it	lt
 800ed64:	f108 0301 	addlt.w	r3, r8, #1
 800ed68:	105b      	asrs	r3, r3, #1
 800ed6a:	f7ff b947 	b.w	800dffc <lv_draw_line+0x1a8>
                p_tmp.x = main_line.p2.x + 1;
 800ed6e:	3301      	adds	r3, #1
    line->dx = LV_MATH_ABS(line->p2.x - line->p1.x);
 800ed70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
                p_tmp.x = main_line.p2.x + 1;
 800ed72:	b21b      	sxth	r3, r3
    line->dx = LV_MATH_ABS(line->p2.x - line->p1.x);
 800ed74:	1a9a      	subs	r2, r3, r2
                p_tmp.x = main_line.p2.x + 1;
 800ed76:	64fb      	str	r3, [r7, #76]	; 0x4c
    line->dx = LV_MATH_ABS(line->p2.x - line->p1.x);
 800ed78:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 800ed7c:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 800ed80:	b21b      	sxth	r3, r3
    line->err = (line->dx > line->dy ? line->dx : -line->dy) / 2;
 800ed82:	4553      	cmp	r3, sl
    line->dx = LV_MATH_ABS(line->p2.x - line->p1.x);
 800ed84:	673b      	str	r3, [r7, #112]	; 0x70
    line->err = (line->dx > line->dy ? line->dx : -line->dy) / 2;
 800ed86:	f300 8095 	bgt.w	800eeb4 <lv_draw_line+0x1060>
 800ed8a:	f1ba 0f00 	cmp.w	sl, #0
 800ed8e:	4654      	mov	r4, sl
 800ed90:	bfb8      	it	lt
 800ed92:	f10a 0401 	addlt.w	r4, sl, #1
 800ed96:	1064      	asrs	r4, r4, #1
 800ed98:	4264      	negs	r4, r4
 800ed9a:	b224      	sxth	r4, r4
    line->hor = line->dx > line->dy ? true : false; /*Rather horizontal or vertical*/
 800ed9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ed9e:	4553      	cmp	r3, sl
 800eda0:	bfd4      	ite	le
 800eda2:	2300      	movle	r3, #0
 800eda4:	2301      	movgt	r3, #1
 800eda6:	643b      	str	r3, [r7, #64]	; 0x40
 800eda8:	2300      	movs	r3, #0
 800edaa:	637b      	str	r3, [r7, #52]	; 0x34
                main_line.sx = -LV_MATH_ABS(main_line.sx);  /*The sign can change if the line becomes vertical*/
 800edac:	f04f 33ff 	mov.w	r3, #4294967295
 800edb0:	66bb      	str	r3, [r7, #104]	; 0x68
 800edb2:	f7ff b8bd 	b.w	800df30 <lv_draw_line+0xdc>
                p_tmp.y = main_line.p2.y + 1;
 800edb6:	3301      	adds	r3, #1
    line->dy = LV_MATH_ABS(line->p2.y - line->p1.y);
 800edb8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
                p_tmp.y = main_line.p2.y + 1;
 800edba:	b21b      	sxth	r3, r3
    line->dy = LV_MATH_ABS(line->p2.y - line->p1.y);
 800edbc:	1a9a      	subs	r2, r3, r2
                p_tmp.y = main_line.p2.y + 1;
 800edbe:	64bb      	str	r3, [r7, #72]	; 0x48
    line->dy = LV_MATH_ABS(line->p2.y - line->p1.y);
 800edc0:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 800edc4:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 800edc8:	fa0f fa83 	sxth.w	sl, r3
    line->err = (line->dx > line->dy ? line->dx : -line->dy) / 2;
 800edcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800edce:	459a      	cmp	sl, r3
 800edd0:	db76      	blt.n	800eec0 <lv_draw_line+0x106c>
 800edd2:	f1ba 0f00 	cmp.w	sl, #0
 800edd6:	4654      	mov	r4, sl
 800edd8:	bfb8      	it	lt
 800edda:	f10a 0401 	addlt.w	r4, sl, #1
 800edde:	1064      	asrs	r4, r4, #1
 800ede0:	4264      	negs	r4, r4
 800ede2:	b224      	sxth	r4, r4
    line->hor = line->dx > line->dy ? true : false; /*Rather horizontal or vertical*/
 800ede4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ede6:	459a      	cmp	sl, r3
 800ede8:	bfac      	ite	ge
 800edea:	2300      	movge	r3, #0
 800edec:	2301      	movlt	r3, #1
 800edee:	643b      	str	r3, [r7, #64]	; 0x40
 800edf0:	2300      	movs	r3, #0
 800edf2:	637b      	str	r3, [r7, #52]	; 0x34
                main_line.sy = -LV_MATH_ABS(main_line.sy);  /*The sign can change if the line becomes horizontal*/
 800edf4:	f04f 33ff 	mov.w	r3, #4294967295
 800edf8:	667b      	str	r3, [r7, #100]	; 0x64
 800edfa:	f7ff b899 	b.w	800df30 <lv_draw_line+0xdc>
                lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1, main_line->p1.y + pattern[aa_last_corner].y + seg_w,
 800edfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee02:	1e50      	subs	r0, r2, #1
 800ee04:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ee06:	4619      	mov	r1, r3
 800ee08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee0a:	9201      	str	r2, [sp, #4]
 800ee0c:	4440      	add	r0, r8
                        seg_w + main_line->sy, mask, style->line.color, opa);
 800ee0e:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
                lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1, main_line->p1.y + pattern[aa_last_corner].y + seg_w,
 800ee10:	4419      	add	r1, r3
 800ee12:	b200      	sxth	r0, r0
 800ee14:	465b      	mov	r3, fp
                        seg_w + main_line->sy, mask, style->line.color, opa);
 800ee16:	1e6a      	subs	r2, r5, #1
                lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1, main_line->p1.y + pattern[aa_last_corner].y + seg_w,
 800ee18:	4429      	add	r1, r5
 800ee1a:	f8d9 5040 	ldr.w	r5, [r9, #64]	; 0x40
 800ee1e:	b212      	sxth	r2, r2
 800ee20:	9500      	str	r5, [sp, #0]
 800ee22:	b209      	sxth	r1, r1
 800ee24:	f7fd ffc6 	bl	800cdb4 <lv_draw_aa_ver_seg>
                lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1, main_line->p2.y + pattern[aa_last_corner].y + seg_w,
 800ee28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ee2c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ee2e:	4419      	add	r1, r3
 800ee30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee32:	9201      	str	r2, [sp, #4]
 800ee34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ee36:	1c58      	adds	r0, r3, #1
 800ee38:	f8d9 5040 	ldr.w	r5, [r9, #64]	; 0x40
 800ee3c:	465b      	mov	r3, fp
 800ee3e:	4411      	add	r1, r2
 800ee40:	4440      	add	r0, r8
 800ee42:	f1c2 0201 	rsb	r2, r2, #1
 800ee46:	9500      	str	r5, [sp, #0]
 800ee48:	b209      	sxth	r1, r1
 800ee4a:	b212      	sxth	r2, r2
 800ee4c:	b200      	sxth	r0, r0
 800ee4e:	f7fd ffb1 	bl	800cdb4 <lv_draw_aa_ver_seg>
 800ee52:	f7ff bb6f 	b.w	800e534 <lv_draw_line+0x6e0>
                lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w, main_line->p1.y + pattern[aa_last_corner].y - 1,
 800ee56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
                        seg_w + main_line->sx, mask, style->line.color, opa);
 800ee58:	f106 3eff 	add.w	lr, r6, #4294967295
                lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w, main_line->p1.y + pattern[aa_last_corner].y - 1,
 800ee5c:	885b      	ldrh	r3, [r3, #2]
 800ee5e:	f102 3cff 	add.w	ip, r2, #4294967295
 800ee62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee64:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ee66:	4442      	add	r2, r8
 800ee68:	9101      	str	r1, [sp, #4]
 800ee6a:	4610      	mov	r0, r2
 800ee6c:	461a      	mov	r2, r3
 800ee6e:	465b      	mov	r3, fp
 800ee70:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ee72:	eb0c 0102 	add.w	r1, ip, r2
 800ee76:	4430      	add	r0, r6
 800ee78:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
 800ee7c:	b209      	sxth	r1, r1
 800ee7e:	9200      	str	r2, [sp, #0]
 800ee80:	b200      	sxth	r0, r0
 800ee82:	fa0f f28e 	sxth.w	r2, lr
 800ee86:	f7fe f82f 	bl	800cee8 <lv_draw_aa_hor_seg>
                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x + seg_w, main_line->p2.y + pattern[aa_last_corner].y + 1,
 800ee8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee8c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ee8e:	f1c6 0201 	rsb	r2, r6, #1
 800ee92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ee94:	9301      	str	r3, [sp, #4]
 800ee96:	4440      	add	r0, r8
 800ee98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee9a:	3101      	adds	r1, #1
 800ee9c:	4430      	add	r0, r6
 800ee9e:	f8d9 6040 	ldr.w	r6, [r9, #64]	; 0x40
 800eea2:	4419      	add	r1, r3
 800eea4:	b212      	sxth	r2, r2
 800eea6:	b200      	sxth	r0, r0
 800eea8:	465b      	mov	r3, fp
 800eeaa:	9600      	str	r6, [sp, #0]
 800eeac:	b209      	sxth	r1, r1
 800eeae:	f7fe f81b 	bl	800cee8 <lv_draw_aa_hor_seg>
 800eeb2:	e508      	b.n	800e8c6 <lv_draw_line+0xa72>
    line->err = (line->dx > line->dy ? line->dx : -line->dy) / 2;
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	461c      	mov	r4, r3
 800eeb8:	bfb8      	it	lt
 800eeba:	1c5c      	addlt	r4, r3, #1
 800eebc:	1064      	asrs	r4, r4, #1
 800eebe:	e76d      	b.n	800ed9c <lv_draw_line+0xf48>
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	461c      	mov	r4, r3
 800eec4:	bfb8      	it	lt
 800eec6:	1c5c      	addlt	r4, r3, #1
 800eec8:	f344 044f 	sbfx	r4, r4, #1, #16
 800eecc:	e78a      	b.n	800ede4 <lv_draw_line+0xf90>
            if(sqr >= width_sqr) {
 800eece:	f04f 33ff 	mov.w	r3, #4294967295
 800eed2:	63b9      	str	r1, [r7, #56]	; 0x38
 800eed4:	677b      	str	r3, [r7, #116]	; 0x74
 800eed6:	e6ea      	b.n	800ecae <lv_draw_line+0xe5a>
    for(i = 0; i < width; i++) {
 800eed8:	2300      	movs	r3, #0
 800eeda:	f8d7 8038 	ldr.w	r8, [r7, #56]	; 0x38
 800eede:	657b      	str	r3, [r7, #84]	; 0x54
 800eee0:	f7ff bae9 	b.w	800e4b6 <lv_draw_line+0x662>

0800eee4 <lv_draw_rect_main_corner>:
 * @param mask the rectangle will be drawn only  on this area
 * @param rects_p pointer to a rectangle style
 * @param opa_scale scale down all opacities by the factor
 */
static void lv_draw_rect_main_corner(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style, lv_opa_t opa_scale)
{
 800eee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eee8:	b0b1      	sub	sp, #196	; 0xc4
 800eeea:	468a      	mov	sl, r1
    uint16_t radius = style->body.radius;
 800eeec:	4611      	mov	r1, r2

    lv_color_t mcolor = style->body.main_color;
    lv_color_t gcolor = style->body.grad_color;
    lv_color_t act_color;
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t) style->body.opa * opa_scale) >> 8;
 800eeee:	2bff      	cmp	r3, #255	; 0xff
{
 800eef0:	9225      	str	r2, [sp, #148]	; 0x94
    uint16_t radius = style->body.radius;
 800eef2:	8992      	ldrh	r2, [r2, #12]
{
 800eef4:	9020      	str	r0, [sp, #128]	; 0x80
    uint16_t radius = style->body.radius;
 800eef6:	921f      	str	r2, [sp, #124]	; 0x7c
    lv_color_t mcolor = style->body.main_color;
 800eef8:	460a      	mov	r2, r1
 800eefa:	6849      	ldr	r1, [r1, #4]
 800eefc:	9119      	str	r1, [sp, #100]	; 0x64
    lv_color_t gcolor = style->body.grad_color;
 800eefe:	4611      	mov	r1, r2
 800ef00:	6892      	ldr	r2, [r2, #8]
 800ef02:	921a      	str	r2, [sp, #104]	; 0x68
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t) style->body.opa * opa_scale) >> 8;
 800ef04:	f000 8612 	beq.w	800fb2c <lv_draw_rect_main_corner+0xc48>
 800ef08:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800ef0a:	7b92      	ldrb	r2, [r2, #14]
 800ef0c:	fb02 f303 	mul.w	r3, r2, r3
 800ef10:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800ef14:	9317      	str	r3, [sp, #92]	; 0x5c
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 800ef16:	88c4      	ldrh	r4, [r0, #6]
    return area_p->x2 - area_p->x1 + 1;
 800ef18:	8881      	ldrh	r1, [r0, #4]
    return area_p->y2 - area_p->y1 + 1;
 800ef1a:	8845      	ldrh	r5, [r0, #2]
 800ef1c:	1c62      	adds	r2, r4, #1
    return area_p->x2 - area_p->x1 + 1;
 800ef1e:	8806      	ldrh	r6, [r0, #0]
 800ef20:	1c4b      	adds	r3, r1, #1
    return area_p->y2 - area_p->y1 + 1;
 800ef22:	1b52      	subs	r2, r2, r5
    return area_p->x2 - area_p->x1 + 1;
 800ef24:	1b9b      	subs	r3, r3, r6
    return area_p->y2 - area_p->y1 + 1;
 800ef26:	b212      	sxth	r2, r2
#endif


static uint16_t lv_draw_cont_radius_corr(uint16_t r, lv_coord_t w, lv_coord_t h)
{
    if(r >= (w >> 1)) {
 800ef28:	f343 034e 	sbfx	r3, r3, #1, #15
 800ef2c:	920e      	str	r2, [sp, #56]	; 0x38
 800ef2e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ef30:	4293      	cmp	r3, r2
 800ef32:	dc08      	bgt.n	800ef46 <lv_draw_rect_main_corner+0x62>
        r = (w >> 1);
 800ef34:	b29b      	uxth	r3, r3
 800ef36:	931f      	str	r3, [sp, #124]	; 0x7c
        if(r != 0) r--;
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	f000 81ee 	beq.w	800f31a <lv_draw_rect_main_corner+0x436>
 800ef3e:	1e5a      	subs	r2, r3, #1
 800ef40:	b293      	uxth	r3, r2
 800ef42:	461a      	mov	r2, r3
 800ef44:	931f      	str	r3, [sp, #124]	; 0x7c
    }
    if(r >= (h >> 1)) {
 800ef46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ef48:	105b      	asrs	r3, r3, #1
 800ef4a:	4293      	cmp	r3, r2
 800ef4c:	f340 81ea 	ble.w	800f324 <lv_draw_rect_main_corner+0x440>
        r = (h >> 1);
        if(r != 0) r--;
    }

    if(r > 0) r -= LV_ANTIALIAS;
 800ef50:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	f000 81f0 	beq.w	800f338 <lv_draw_rect_main_corner+0x454>
 800ef58:	1e5a      	subs	r2, r3, #1
 800ef5a:	b293      	uxth	r3, r2
 800ef5c:	931f      	str	r3, [sp, #124]	; 0x7c
 800ef5e:	b21b      	sxth	r3, r3
 800ef60:	4699      	mov	r9, r3
 800ef62:	931e      	str	r3, [sp, #120]	; 0x78
    rt_origo.x = coords->x2 - radius - LV_ANTIALIAS;
 800ef64:	1e4b      	subs	r3, r1, #1
    lt_origo.x = coords->x1 + radius + LV_ANTIALIAS;
 800ef66:	3601      	adds	r6, #1
 800ef68:	991f      	ldr	r1, [sp, #124]	; 0x7c
    lt_origo.y = coords->y1 + radius + LV_ANTIALIAS;
 800ef6a:	3501      	adds	r5, #1
    lb_origo.y = coords->y2 - radius - LV_ANTIALIAS;
 800ef6c:	3c01      	subs	r4, #1
    lv_circ_init(&cir, &cir_tmp, radius);
 800ef6e:	a827      	add	r0, sp, #156	; 0x9c
    lt_origo.x = coords->x1 + radius + LV_ANTIALIAS;
 800ef70:	440e      	add	r6, r1
    lt_origo.y = coords->y1 + radius + LV_ANTIALIAS;
 800ef72:	440d      	add	r5, r1
    lb_origo.y = coords->y2 - radius - LV_ANTIALIAS;
 800ef74:	1a64      	subs	r4, r4, r1
    rt_origo.x = coords->x2 - radius - LV_ANTIALIAS;
 800ef76:	1a5b      	subs	r3, r3, r1
    lt_origo.x = coords->x1 + radius + LV_ANTIALIAS;
 800ef78:	b2b6      	uxth	r6, r6
    lv_circ_init(&cir, &cir_tmp, radius);
 800ef7a:	f10d 019a 	add.w	r1, sp, #154	; 0x9a
    rt_origo.x = coords->x2 - radius - LV_ANTIALIAS;
 800ef7e:	b29b      	uxth	r3, r3
    lv_circ_init(&cir, &cir_tmp, radius);
 800ef80:	464a      	mov	r2, r9
    lb_origo.y = coords->y2 - radius - LV_ANTIALIAS;
 800ef82:	b2a4      	uxth	r4, r4
    lt_origo.x = coords->x1 + radius + LV_ANTIALIAS;
 800ef84:	961c      	str	r6, [sp, #112]	; 0x70
    lt_origo.y = coords->y1 + radius + LV_ANTIALIAS;
 800ef86:	b2ad      	uxth	r5, r5
    rt_origo.x = coords->x2 - radius - LV_ANTIALIAS;
 800ef88:	9321      	str	r3, [sp, #132]	; 0x84
    lb_origo.y = coords->y2 - radius - LV_ANTIALIAS;
 800ef8a:	4627      	mov	r7, r4
 800ef8c:	941d      	str	r4, [sp, #116]	; 0x74
    lt_origo.y = coords->y1 + radius + LV_ANTIALIAS;
 800ef8e:	951b      	str	r5, [sp, #108]	; 0x6c
    rt_origo.x = coords->x2 - radius - LV_ANTIALIAS;
 800ef90:	461c      	mov	r4, r3
    lv_circ_init(&cir, &cir_tmp, radius);
 800ef92:	f003 fe3f 	bl	8012c14 <lv_circ_init>
                lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800ef96:	f8bd 209e 	ldrh.w	r2, [sp, #158]	; 0x9e
 800ef9a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    lv_coord_t out_y_seg_start = 0;
 800ef9c:	f04f 0e00 	mov.w	lr, #0
    lv_area_set(&mid_bot_area,  lb_origo.x + LV_CIRC_OCT4_X(cir),
 800efa0:	f8bd 109c 	ldrh.w	r1, [sp, #156]	; 0x9c
                lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800efa4:	443a      	add	r2, r7
                rb_origo.x + LV_CIRC_OCT1_X(cir),
 800efa6:	4623      	mov	r3, r4
    lv_coord_t out_y_seg_start = 0;
 800efa8:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
 800efac:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 800efb0:	9d19      	ldr	r5, [sp, #100]	; 0x64
    lv_area_set(&mid_bot_area,  lb_origo.x + LV_CIRC_OCT4_X(cir),
 800efb2:	b212      	sxth	r2, r2
                rb_origo.x + LV_CIRC_OCT1_X(cir),
 800efb4:	440b      	add	r3, r1
    lv_area_set(&mid_bot_area,  lb_origo.x + LV_CIRC_OCT4_X(cir),
 800efb6:	1a71      	subs	r1, r6, r1
 800efb8:	f8cd e018 	str.w	lr, [sp, #24]
 800efbc:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 800efc0:	a82c      	add	r0, sp, #176	; 0xb0
 800efc2:	b21b      	sxth	r3, r3
 800efc4:	9200      	str	r2, [sp, #0]
 800efc6:	b209      	sxth	r1, r1
 800efc8:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 800efcc:	f003 fd40 	bl	8012a50 <lv_area_set>
    lt_origo.y = coords->y1 + radius + LV_ANTIALIAS;
 800efd0:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
                lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800efd4:	f8bd 209c 	ldrh.w	r2, [sp, #156]	; 0x9c
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir),
 800efd8:	a82e      	add	r0, sp, #184	; 0xb8
    lt_origo.y = coords->y1 + radius + LV_ANTIALIAS;
 800efda:	fa0f f388 	sxth.w	r3, r8
 800efde:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir),
 800efe0:	f8bd 109e 	ldrh.w	r1, [sp, #158]	; 0x9e
                lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800efe4:	443a      	add	r2, r7
    lt_origo.y = coords->y1 + radius + LV_ANTIALIAS;
 800efe6:	9323      	str	r3, [sp, #140]	; 0x8c
                rb_origo.x + LV_CIRC_OCT2_X(cir),
 800efe8:	4623      	mov	r3, r4
 800efea:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 800efee:	9d19      	ldr	r5, [sp, #100]	; 0x64
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir),
 800eff0:	b212      	sxth	r2, r2
                rb_origo.x + LV_CIRC_OCT2_X(cir),
 800eff2:	440b      	add	r3, r1
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir),
 800eff4:	1a71      	subs	r1, r6, r1
 800eff6:	f8cd e014 	str.w	lr, [sp, #20]
 800effa:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 800effe:	b21b      	sxth	r3, r3
 800f000:	9200      	str	r2, [sp, #0]
 800f002:	b209      	sxth	r1, r1
 800f004:	f8cd e020 	str.w	lr, [sp, #32]
                lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800f008:	4645      	mov	r5, r8
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir),
 800f00a:	f003 fd21 	bl	8012a50 <lv_area_set>
                lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800f00e:	f8bd 209e 	ldrh.w	r2, [sp, #158]	; 0x9e
    lb_origo.y = coords->y2 - radius - LV_ANTIALIAS;
 800f012:	b23b      	sxth	r3, r7
    lv_area_set(&mid_top_area,  lt_origo.x + LV_CIRC_OCT5_X(cir),
 800f014:	f8bd 109c 	ldrh.w	r1, [sp, #156]	; 0x9c
                lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800f018:	1aaa      	subs	r2, r5, r2
    lv_area_set(&mid_top_area,  lt_origo.x + LV_CIRC_OCT5_X(cir),
 800f01a:	a82a      	add	r0, sp, #168	; 0xa8
    lb_origo.y = coords->y2 - radius - LV_ANTIALIAS;
 800f01c:	9324      	str	r3, [sp, #144]	; 0x90
                rt_origo.x + LV_CIRC_OCT8_X(cir),
 800f01e:	4623      	mov	r3, r4
    lv_area_set(&mid_top_area,  lt_origo.x + LV_CIRC_OCT5_X(cir),
 800f020:	b212      	sxth	r2, r2
                rt_origo.x + LV_CIRC_OCT8_X(cir),
 800f022:	440b      	add	r3, r1
    lv_area_set(&mid_top_area,  lt_origo.x + LV_CIRC_OCT5_X(cir),
 800f024:	1a71      	subs	r1, r6, r1
 800f026:	9200      	str	r2, [sp, #0]
 800f028:	b21b      	sxth	r3, r3
 800f02a:	b209      	sxth	r1, r1
 800f02c:	f003 fd10 	bl	8012a50 <lv_area_set>
                lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800f030:	f8bd 209c 	ldrh.w	r2, [sp, #156]	; 0x9c
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir),
 800f034:	f8bd 109e 	ldrh.w	r1, [sp, #158]	; 0x9e
                rt_origo.x + LV_CIRC_OCT7_X(cir),
 800f038:	4623      	mov	r3, r4
                lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800f03a:	1aaa      	subs	r2, r5, r2
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir),
 800f03c:	a828      	add	r0, sp, #160	; 0xa0
                rt_origo.x + LV_CIRC_OCT7_X(cir),
 800f03e:	440b      	add	r3, r1
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir),
 800f040:	1a71      	subs	r1, r6, r1
 800f042:	b212      	sxth	r2, r2
 800f044:	b21b      	sxth	r3, r3
 800f046:	9200      	str	r2, [sp, #0]
 800f048:	b209      	sxth	r1, r1
 800f04a:	f003 fd01 	bl	8012a50 <lv_area_set>
 800f04e:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
    while(lv_circ_cont(&cir)) {
 800f052:	a827      	add	r0, sp, #156	; 0x9c
 800f054:	9304      	str	r3, [sp, #16]
 800f056:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800f05a:	9307      	str	r3, [sp, #28]
 800f05c:	f003 fde4 	bl	8012c28 <lv_circ_cont>
 800f060:	2800      	cmp	r0, #0
 800f062:	f000 82de 	beq.w	800f622 <lv_draw_rect_main_corner+0x73e>
        if(out_x_last != cir.x) {
 800f066:	f9bd 809c 	ldrsh.w	r8, [sp, #156]	; 0x9c
 800f06a:	45c1      	cmp	r9, r8
 800f06c:	f000 8557 	beq.w	800fb1e <lv_draw_rect_main_corner+0xc3a>
            mix = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800f070:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
            out_y_seg_end = cir.y;
 800f072:	f9bd 109e 	ldrsh.w	r1, [sp, #158]	; 0x9e
            mix = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800f076:	eba3 0309 	sub.w	r3, r3, r9
    ret.green_h = g_out >> 3;
    ret.green_l = g_out & 0x7;
#  else
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
#  endif
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f07a:	9e07      	ldr	r6, [sp, #28]
            out_y_seg_end = cir.y;
 800f07c:	460f      	mov	r7, r1
 800f07e:	9122      	str	r1, [sp, #136]	; 0x88
            mix = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800f080:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 800f084:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f086:	9a04      	ldr	r2, [sp, #16]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f088:	f8dd e020 	ldr.w	lr, [sp, #32]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f08c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800f090:	fbb3 f3f1 	udiv	r3, r3, r1
 800f094:	b2db      	uxtb	r3, r3
 800f096:	f1c3 04ff 	rsb	r4, r3, #255	; 0xff
 800f09a:	b29b      	uxth	r3, r3
 800f09c:	b2a4      	uxth	r4, r4
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f09e:	fb14 f006 	smulbb	r0, r4, r6
 800f0a2:	fb14 f102 	smulbb	r1, r4, r2
 800f0a6:	fb03 0002 	mla	r0, r3, r2, r0
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f0aa:	fb14 f50e 	smulbb	r5, r4, lr
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f0ae:	fb03 1106 	mla	r1, r3, r6, r1
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f0b2:	9a05      	ldr	r2, [sp, #20]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f0b4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800f0b8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f0ba:	fb03 5502 	mla	r5, r3, r2, r5
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f0be:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800f0c2:	f360 0607 	bfi	r6, r0, #0, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f0c6:	fb14 f002 	smulbb	r0, r4, r2
 800f0ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f0cc:	f3c5 2507 	ubfx	r5, r5, #8, #8
 800f0d0:	f361 0207 	bfi	r2, r1, #0, #8
 800f0d4:	fb03 000e 	mla	r0, r3, lr, r0
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f0d8:	fb1c f104 	smulbb	r1, ip, r4
 800f0dc:	f8dd e018 	ldr.w	lr, [sp, #24]
 800f0e0:	920d      	str	r2, [sp, #52]	; 0x34
 800f0e2:	4632      	mov	r2, r6
 800f0e4:	fb0e 1103 	mla	r1, lr, r3, r1
 800f0e8:	fb1e f404 	smulbb	r4, lr, r4
            lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800f0ec:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800f0f0:	f365 220f 	bfi	r2, r5, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f0f4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800f0f8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f0fa:	fb03 430c 	mla	r3, r3, ip, r4
 800f0fe:	fa1f f68e 	uxth.w	r6, lr
 800f102:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800f106:	f360 250f 	bfi	r5, r0, #8, #8
 800f10a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800f10e:	1bb8      	subs	r0, r7, r6
 800f110:	f361 4217 	bfi	r2, r1, #16, #8
 800f114:	f363 4517 	bfi	r5, r3, #16, #8
 800f118:	b203      	sxth	r3, r0
 800f11a:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
            for(i = 0; i  < seg_size; i++) {
 800f11e:	2b00      	cmp	r3, #0
 800f120:	930a      	str	r3, [sp, #40]	; 0x28
 800f122:	920f      	str	r2, [sp, #60]	; 0x3c
 800f124:	f045 427f 	orr.w	r2, r5, #4278190080	; 0xff000000
 800f128:	920d      	str	r2, [sp, #52]	; 0x34
 800f12a:	f340 84fb 	ble.w	800fb24 <lv_draw_rect_main_corner+0xc40>
 800f12e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800f130:	fa1f f089 	uxth.w	r0, r9
 800f134:	991d      	ldr	r1, [sp, #116]	; 0x74
 800f136:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800f138:	1e63      	subs	r3, r4, #1
 800f13a:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 800f13c:	1c4f      	adds	r7, r1, #1
 800f13e:	1e69      	subs	r1, r5, #1
 800f140:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800f142:	eba4 0e0e 	sub.w	lr, r4, lr
 800f146:	4407      	add	r7, r0
 800f148:	eba1 0900 	sub.w	r9, r1, r0
 800f14c:	462a      	mov	r2, r5
 800f14e:	1a1b      	subs	r3, r3, r0
 800f150:	ebce 210e 	rsb	r1, lr, lr, lsl #8
 800f154:	eb05 0c06 	add.w	ip, r5, r6
 800f158:	3201      	adds	r2, #1
 800f15a:	b21b      	sxth	r3, r3
 800f15c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800f15e:	910b      	str	r1, [sp, #44]	; 0x2c
 800f160:	b239      	sxth	r1, r7
 800f162:	4402      	add	r2, r0
 800f164:	1ba4      	subs	r4, r4, r6
 800f166:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800f168:	981d      	ldr	r0, [sp, #116]	; 0x74
 800f16a:	9111      	str	r1, [sp, #68]	; 0x44
 800f16c:	9315      	str	r3, [sp, #84]	; 0x54
 800f16e:	fa1f f38c 	uxth.w	r3, ip
 800f172:	4973      	ldr	r1, [pc, #460]	; (800f340 <lv_draw_rect_main_corner+0x45c>)
 800f174:	4430      	add	r0, r6
 800f176:	9310      	str	r3, [sp, #64]	; 0x40
 800f178:	1bae      	subs	r6, r5, r6
 800f17a:	b2a3      	uxth	r3, r4
 800f17c:	2500      	movs	r5, #0
 800f17e:	f8d1 8000 	ldr.w	r8, [r1]
 800f182:	fa0f f189 	sxth.w	r1, r9
 800f186:	9502      	str	r5, [sp, #8]
 800f188:	9113      	str	r1, [sp, #76]	; 0x4c
 800f18a:	4629      	mov	r1, r5
 800f18c:	9312      	str	r3, [sp, #72]	; 0x48
 800f18e:	b215      	sxth	r5, r2
 800f190:	b283      	uxth	r3, r0

    if(seg == 0) return LV_OPA_TRANSP;
    else if(seg == 1) return LV_OPA_80;
    else {

        uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map) - 1)) / (seg - 1);
 800f192:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f194:	950c      	str	r5, [sp, #48]	; 0x30
 800f196:	3a01      	subs	r2, #1
 800f198:	9314      	str	r3, [sp, #80]	; 0x50
 800f19a:	b2b3      	uxth	r3, r6
 800f19c:	921e      	str	r2, [sp, #120]	; 0x78
 800f19e:	9316      	str	r3, [sp, #88]	; 0x58
 800f1a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1a2:	e0af      	b.n	800f304 <lv_draw_rect_main_corner+0x420>
 800f1a4:	9b02      	ldr	r3, [sp, #8]
 800f1a6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f1a8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800f1ac:	fbb3 f3f2 	udiv	r3, r3, r2
        return (uint32_t)((uint32_t) opa_map[id] * opa) >> 8;
 800f1b0:	4a64      	ldr	r2, [pc, #400]	; (800f344 <lv_draw_rect_main_corner+0x460>)
 800f1b2:	b2db      	uxtb	r3, r3
 800f1b4:	5cd6      	ldrb	r6, [r2, r3]
 800f1b6:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 800f1ba:	fb16 f603 	smulbb	r6, r6, r3
 800f1be:	0a36      	lsrs	r6, r6, #8
 800f1c0:	9802      	ldr	r0, [sp, #8]
                px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask, aa_color_hor_bottom, aa_opa);
 800f1c2:	4652      	mov	r2, sl
 800f1c4:	9910      	ldr	r1, [sp, #64]	; 0x40
 800f1c6:	b287      	uxth	r7, r0
 800f1c8:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 800f1cc:	3001      	adds	r0, #1
 800f1ce:	9600      	str	r6, [sp, #0]
 800f1d0:	187c      	adds	r4, r7, r1
 800f1d2:	463d      	mov	r5, r7
 800f1d4:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800f1d6:	464b      	mov	r3, r9
 800f1d8:	b224      	sxth	r4, r4
 800f1da:	9002      	str	r0, [sp, #8]
 800f1dc:	4639      	mov	r1, r7
 800f1de:	4620      	mov	r0, r4
 800f1e0:	47c0      	blx	r8
 800f1e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f1e4:	9503      	str	r5, [sp, #12]
                px_fp(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask, aa_color_hor_bottom, aa_opa);
 800f1e6:	464b      	mov	r3, r9
 800f1e8:	1b55      	subs	r5, r2, r5
 800f1ea:	4639      	mov	r1, r7
 800f1ec:	4652      	mov	r2, sl
 800f1ee:	9600      	str	r6, [sp, #0]
 800f1f0:	b22d      	sxth	r5, r5
 800f1f2:	4628      	mov	r0, r5
 800f1f4:	47c0      	blx	r8
                px_fp(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask, aa_color_hor_top, aa_opa);
 800f1f6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800f1f8:	4628      	mov	r0, r5
 800f1fa:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800f1fc:	463b      	mov	r3, r7
 800f1fe:	4652      	mov	r2, sl
 800f200:	4629      	mov	r1, r5
 800f202:	9600      	str	r6, [sp, #0]
 800f204:	47c0      	blx	r8
                px_fp(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask, aa_color_hor_top, aa_opa);
 800f206:	4620      	mov	r0, r4
 800f208:	463b      	mov	r3, r7
 800f20a:	4629      	mov	r1, r5
 800f20c:	4652      	mov	r2, sl
 800f20e:	9600      	str	r6, [sp, #0]
 800f210:	47c0      	blx	r8
                mix = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800f212:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800f214:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f216:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f218:	9a03      	ldr	r2, [sp, #12]
 800f21a:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 800f21e:	eb02 0903 	add.w	r9, r2, r3
 800f222:	462b      	mov	r3, r5
                px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, aa_color_ver, aa_opa);
 800f224:	4652      	mov	r2, sl
 800f226:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f228:	33ff      	adds	r3, #255	; 0xff
 800f22a:	fa0f f989 	sxth.w	r9, r9
 800f22e:	9600      	str	r6, [sp, #0]
 800f230:	930b      	str	r3, [sp, #44]	; 0x2c
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f232:	f8bd 3010 	ldrh.w	r3, [sp, #16]
                mix = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800f236:	fbb5 f4f1 	udiv	r4, r5, r1
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f23a:	b2e4      	uxtb	r4, r4
                px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, aa_color_ver, aa_opa);
 800f23c:	4649      	mov	r1, r9
 800f23e:	f1c4 05ff 	rsb	r5, r4, #255	; 0xff
 800f242:	b2a4      	uxth	r4, r4
 800f244:	b2ad      	uxth	r5, r5
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f246:	fb13 fc05 	smulbb	ip, r3, r5
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f24a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800f24e:	fb13 fe05 	smulbb	lr, r3, r5
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f252:	9b07      	ldr	r3, [sp, #28]
 800f254:	fb03 cc04 	mla	ip, r3, r4, ip
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f258:	fb17 f305 	smulbb	r3, r7, r5
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f25c:	9f08      	ldr	r7, [sp, #32]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f25e:	f3cc 2c07 	ubfx	ip, ip, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f262:	fb07 ee04 	mla	lr, r7, r4, lr
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f266:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f268:	f36c 0b07 	bfi	fp, ip, #0, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f26c:	f3ce 2e07 	ubfx	lr, lr, #8, #8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f270:	fb07 3304 	mla	r3, r7, r4, r3
 800f274:	f36e 2b0f 	bfi	fp, lr, #8, #8
 800f278:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800f27c:	f363 4b17 	bfi	fp, r3, #16, #8
 800f280:	f04b 4b7f 	orr.w	fp, fp, #4278190080	; 0xff000000
 800f284:	465b      	mov	r3, fp
 800f286:	47c0      	blx	r8
                px_fp(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask, aa_color_ver, aa_opa);
 800f288:	4649      	mov	r1, r9
 800f28a:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
 800f28e:	465b      	mov	r3, fp
 800f290:	4652      	mov	r2, sl
 800f292:	9600      	str	r6, [sp, #0]
 800f294:	4648      	mov	r0, r9
 800f296:	47c0      	blx	r8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f298:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800f29c:	9916      	ldr	r1, [sp, #88]	; 0x58
                px_fp(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, aa_color_ver, aa_opa);
 800f29e:	4648      	mov	r0, r9
 800f2a0:	9f03      	ldr	r7, [sp, #12]
 800f2a2:	fb13 f205 	smulbb	r2, r3, r5
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f2a6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800f2aa:	1bcf      	subs	r7, r1, r7
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f2ac:	9904      	ldr	r1, [sp, #16]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f2ae:	f8bd e024 	ldrh.w	lr, [sp, #36]	; 0x24
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f2b2:	fb13 f305 	smulbb	r3, r3, r5
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f2b6:	fb01 2204 	mla	r2, r1, r4, r2
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f2ba:	9905      	ldr	r1, [sp, #20]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f2bc:	fb1e f505 	smulbb	r5, lr, r5
 800f2c0:	b23f      	sxth	r7, r7
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f2c2:	fb01 3304 	mla	r3, r1, r4, r3
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f2c6:	f3c2 2207 	ubfx	r2, r2, #8, #8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f2ca:	9906      	ldr	r1, [sp, #24]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f2cc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800f2d0:	f362 0b07 	bfi	fp, r2, #0, #8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f2d4:	fb01 5404 	mla	r4, r1, r4, r5
 800f2d8:	4652      	mov	r2, sl
 800f2da:	f363 2b0f 	bfi	fp, r3, #8, #8
 800f2de:	4639      	mov	r1, r7
 800f2e0:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800f2e4:	9600      	str	r6, [sp, #0]
 800f2e6:	f364 4b17 	bfi	fp, r4, #16, #8
 800f2ea:	465b      	mov	r3, fp
 800f2ec:	47c0      	blx	r8
                px_fp(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask, aa_color_ver, aa_opa);
 800f2ee:	4639      	mov	r1, r7
 800f2f0:	465b      	mov	r3, fp
 800f2f2:	9600      	str	r6, [sp, #0]
 800f2f4:	4652      	mov	r2, sl
 800f2f6:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f2f8:	47c0      	blx	r8
            for(i = 0; i  < seg_size; i++) {
 800f2fa:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 800f2fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f300:	428b      	cmp	r3, r1
 800f302:	dd21      	ble.n	800f348 <lv_draw_rect_main_corner+0x464>
                if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) {    /*Use non-linear opa mapping on the first segment*/
 800f304:	2b05      	cmp	r3, #5
 800f306:	f73f af4d 	bgt.w	800f1a4 <lv_draw_rect_main_corner+0x2c0>
                    aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800f30a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800f30c:	4618      	mov	r0, r3
 800f30e:	4622      	mov	r2, r4
 800f310:	f7fd fd3a 	bl	800cd88 <lv_draw_aa_get_opa>
 800f314:	1a20      	subs	r0, r4, r0
 800f316:	b2c6      	uxtb	r6, r0
 800f318:	e752      	b.n	800f1c0 <lv_draw_rect_main_corner+0x2dc>
    if(r >= (h >> 1)) {
 800f31a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f31c:	105b      	asrs	r3, r3, #1
 800f31e:	2b00      	cmp	r3, #0
 800f320:	f300 84af 	bgt.w	800fc82 <lv_draw_rect_main_corner+0xd9e>
        r = (h >> 1);
 800f324:	b29b      	uxth	r3, r3
 800f326:	931f      	str	r3, [sp, #124]	; 0x7c
        if(r != 0) r--;
 800f328:	b133      	cbz	r3, 800f338 <lv_draw_rect_main_corner+0x454>
 800f32a:	1e5a      	subs	r2, r3, #1
 800f32c:	b293      	uxth	r3, r2
 800f32e:	931f      	str	r3, [sp, #124]	; 0x7c
    if(r > 0) r -= LV_ANTIALIAS;
 800f330:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f332:	2b00      	cmp	r3, #0
 800f334:	f47f ae10 	bne.w	800ef58 <lv_draw_rect_main_corner+0x74>
 800f338:	931e      	str	r3, [sp, #120]	; 0x78
 800f33a:	4699      	mov	r9, r3
 800f33c:	e612      	b.n	800ef64 <lv_draw_rect_main_corner+0x80>
 800f33e:	bf00      	nop
 800f340:	0808b610 	.word	0x0808b610
 800f344:	0808b638 	.word	0x0808b638
 800f348:	f9bd 909c 	ldrsh.w	r9, [sp, #156]	; 0x9c
 800f34c:	f9bd 509e 	ldrsh.w	r5, [sp, #158]	; 0x9e
 800f350:	9b22      	ldr	r3, [sp, #136]	; 0x88
            out_y_seg_start = out_y_seg_end;
 800f352:	9310      	str	r3, [sp, #64]	; 0x40
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
 800f354:	9e24      	ldr	r6, [sp, #144]	; 0x90
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 800f356:	9823      	ldr	r0, [sp, #140]	; 0x8c
        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
 800f358:	f9bd 30ba 	ldrsh.w	r3, [sp, #186]	; 0xba
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
 800f35c:	19af      	adds	r7, r5, r6
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 800f35e:	f9bd 10a2 	ldrsh.w	r1, [sp, #162]	; 0xa2
 800f362:	eba0 0209 	sub.w	r2, r0, r9
        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
 800f366:	9302      	str	r3, [sp, #8]
 800f368:	4633      	mov	r3, r6
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 800f36a:	4291      	cmp	r1, r2
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
 800f36c:	f9bd 80b2 	ldrsh.w	r8, [sp, #178]	; 0xb2
        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
 800f370:	444b      	add	r3, r9
        if(mid_top_area.y1 != LV_CIRC_OCT8_Y(cir) + lt_origo.y) mid_top_refr = 1;
 800f372:	eba0 0505 	sub.w	r5, r0, r5
 800f376:	f9bd 60aa 	ldrsh.w	r6, [sp, #170]	; 0xaa
        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
 800f37a:	9303      	str	r3, [sp, #12]
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 800f37c:	d03e      	beq.n	800f3fc <lv_draw_rect_main_corner+0x518>
            if(mcolor.full == gcolor.full) act_color = mcolor;
 800f37e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f380:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f382:	4293      	cmp	r3, r2
 800f384:	d031      	beq.n	800f3ea <lv_draw_rect_main_corner+0x506>
                mix = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1)  * 255) / height;
 800f386:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f388:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f38a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f38e:	9c07      	ldr	r4, [sp, #28]
 800f390:	1a5b      	subs	r3, r3, r1
 800f392:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800f396:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 800f39a:	fbb3 f3f2 	udiv	r3, r3, r2
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f39e:	b2db      	uxtb	r3, r3
 800f3a0:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 800f3a4:	b29b      	uxth	r3, r3
 800f3a6:	b292      	uxth	r2, r2
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f3a8:	fb12 f001 	smulbb	r0, r2, r1
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f3ac:	f8bd 1014 	ldrh.w	r1, [sp, #20]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f3b0:	fb03 0004 	mla	r0, r3, r4, r0
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f3b4:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f3b8:	fb12 f101 	smulbb	r1, r2, r1
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f3bc:	fb12 f204 	smulbb	r2, r2, r4
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f3c0:	9c08      	ldr	r4, [sp, #32]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f3c2:	f3c0 2007 	ubfx	r0, r0, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f3c6:	fb03 1104 	mla	r1, r3, r4, r1
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f3ca:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f3cc:	fb03 2304 	mla	r3, r3, r4, r2
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f3d0:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800f3d4:	9918      	ldr	r1, [sp, #96]	; 0x60
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f3d6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800f3da:	f360 0107 	bfi	r1, r0, #0, #8
 800f3de:	f362 210f 	bfi	r1, r2, #8, #8
 800f3e2:	f363 4117 	bfi	r1, r3, #16, #8
 800f3e6:	f041 437f 	orr.w	r3, r1, #4278190080	; 0xff000000
 800f3ea:	9318      	str	r3, [sp, #96]	; 0x60
 800f3ec:	461a      	mov	r2, r3
            fill_fp(&edge_top_area, mask, act_color, opa);
 800f3ee:	4bb1      	ldr	r3, [pc, #708]	; (800f6b4 <lv_draw_rect_main_corner+0x7d0>)
 800f3f0:	4651      	mov	r1, sl
 800f3f2:	a828      	add	r0, sp, #160	; 0xa0
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	461c      	mov	r4, r3
 800f3f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f3fa:	47a0      	blx	r4
        if(mid_top_refr != 0) {
 800f3fc:	42ae      	cmp	r6, r5
 800f3fe:	d03f      	beq.n	800f480 <lv_draw_rect_main_corner+0x59c>
            if(mcolor.full == gcolor.full) act_color = mcolor;
 800f400:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f402:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f404:	4293      	cmp	r3, r2
 800f406:	d033      	beq.n	800f470 <lv_draw_rect_main_corner+0x58c>
                mix = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 800f408:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f40a:	f9bd 20aa 	ldrsh.w	r2, [sp, #170]	; 0xaa
 800f40e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f412:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800f416:	1a9b      	subs	r3, r3, r2
 800f418:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f41a:	9c07      	ldr	r4, [sp, #28]
 800f41c:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 800f420:	fbb3 f3f2 	udiv	r3, r3, r2
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f424:	b2db      	uxtb	r3, r3
 800f426:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 800f42a:	b29b      	uxth	r3, r3
 800f42c:	b292      	uxth	r2, r2
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f42e:	fb12 f001 	smulbb	r0, r2, r1
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f432:	f8bd 1014 	ldrh.w	r1, [sp, #20]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f436:	fb03 0004 	mla	r0, r3, r4, r0
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f43a:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f43e:	fb12 f101 	smulbb	r1, r2, r1
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f442:	fb12 f204 	smulbb	r2, r2, r4
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f446:	9c08      	ldr	r4, [sp, #32]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f448:	f3c0 2007 	ubfx	r0, r0, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f44c:	fb03 1104 	mla	r1, r3, r4, r1
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f450:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f452:	fb03 2304 	mla	r3, r3, r4, r2
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f456:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800f45a:	9918      	ldr	r1, [sp, #96]	; 0x60
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f45c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800f460:	f360 0107 	bfi	r1, r0, #0, #8
 800f464:	f362 210f 	bfi	r1, r2, #8, #8
 800f468:	f363 4117 	bfi	r1, r3, #16, #8
 800f46c:	f041 437f 	orr.w	r3, r1, #4278190080	; 0xff000000
 800f470:	9318      	str	r3, [sp, #96]	; 0x60
 800f472:	461a      	mov	r2, r3
            fill_fp(&mid_top_area, mask, act_color, opa);
 800f474:	4b8f      	ldr	r3, [pc, #572]	; (800f6b4 <lv_draw_rect_main_corner+0x7d0>)
 800f476:	4651      	mov	r1, sl
 800f478:	a82a      	add	r0, sp, #168	; 0xa8
 800f47a:	681d      	ldr	r5, [r3, #0]
 800f47c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f47e:	47a8      	blx	r5
        if(mid_bot_refr != 0) {
 800f480:	45b8      	cmp	r8, r7
 800f482:	d03f      	beq.n	800f504 <lv_draw_rect_main_corner+0x620>
            if(mcolor.full == gcolor.full) act_color = mcolor;
 800f484:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f486:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f488:	4293      	cmp	r3, r2
 800f48a:	d033      	beq.n	800f4f4 <lv_draw_rect_main_corner+0x610>
                mix = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800f48c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f48e:	f9bd 20b2 	ldrsh.w	r2, [sp, #178]	; 0xb2
 800f492:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f496:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800f49a:	1a9b      	subs	r3, r3, r2
 800f49c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f49e:	9c07      	ldr	r4, [sp, #28]
 800f4a0:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 800f4a4:	fbb3 f3f2 	udiv	r3, r3, r2
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f4a8:	b2db      	uxtb	r3, r3
 800f4aa:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 800f4ae:	b29b      	uxth	r3, r3
 800f4b0:	b292      	uxth	r2, r2
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f4b2:	fb12 f001 	smulbb	r0, r2, r1
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f4b6:	f8bd 1014 	ldrh.w	r1, [sp, #20]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f4ba:	fb03 0004 	mla	r0, r3, r4, r0
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f4be:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f4c2:	fb12 f101 	smulbb	r1, r2, r1
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f4c6:	fb12 f204 	smulbb	r2, r2, r4
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f4ca:	9c08      	ldr	r4, [sp, #32]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f4cc:	f3c0 2007 	ubfx	r0, r0, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f4d0:	fb03 1104 	mla	r1, r3, r4, r1
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f4d4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f4d6:	fb03 2304 	mla	r3, r3, r4, r2
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f4da:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800f4de:	9918      	ldr	r1, [sp, #96]	; 0x60
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f4e0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800f4e4:	f360 0107 	bfi	r1, r0, #0, #8
 800f4e8:	f362 210f 	bfi	r1, r2, #8, #8
 800f4ec:	f363 4117 	bfi	r1, r3, #16, #8
 800f4f0:	f041 437f 	orr.w	r3, r1, #4278190080	; 0xff000000
 800f4f4:	9318      	str	r3, [sp, #96]	; 0x60
 800f4f6:	461a      	mov	r2, r3
            fill_fp(&mid_bot_area, mask, act_color, opa);
 800f4f8:	4b6e      	ldr	r3, [pc, #440]	; (800f6b4 <lv_draw_rect_main_corner+0x7d0>)
 800f4fa:	4651      	mov	r1, sl
 800f4fc:	a82c      	add	r0, sp, #176	; 0xb0
 800f4fe:	681d      	ldr	r5, [r3, #0]
 800f500:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f502:	47a8      	blx	r5
        if(edge_bot_refr != 0) {
 800f504:	9b03      	ldr	r3, [sp, #12]
 800f506:	9a02      	ldr	r2, [sp, #8]
 800f508:	429a      	cmp	r2, r3
 800f50a:	d03f      	beq.n	800f58c <lv_draw_rect_main_corner+0x6a8>
            if(mcolor.full == gcolor.full) act_color = mcolor;
 800f50c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f50e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f510:	4293      	cmp	r3, r2
 800f512:	d033      	beq.n	800f57c <lv_draw_rect_main_corner+0x698>
                mix = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 800f514:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f516:	f9bd 20ba 	ldrsh.w	r2, [sp, #186]	; 0xba
 800f51a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f51e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800f522:	1a9b      	subs	r3, r3, r2
 800f524:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f526:	9c07      	ldr	r4, [sp, #28]
 800f528:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 800f52c:	fbb3 f3f2 	udiv	r3, r3, r2
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f530:	b2db      	uxtb	r3, r3
 800f532:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 800f536:	b29b      	uxth	r3, r3
 800f538:	b292      	uxth	r2, r2
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f53a:	fb12 f001 	smulbb	r0, r2, r1
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f53e:	f8bd 1014 	ldrh.w	r1, [sp, #20]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f542:	fb03 0004 	mla	r0, r3, r4, r0
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f546:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f54a:	fb12 f101 	smulbb	r1, r2, r1
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f54e:	fb12 f204 	smulbb	r2, r2, r4
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f552:	9c08      	ldr	r4, [sp, #32]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f554:	f3c0 2007 	ubfx	r0, r0, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f558:	fb03 1104 	mla	r1, r3, r4, r1
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f55c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f55e:	fb03 2304 	mla	r3, r3, r4, r2
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f562:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800f566:	9918      	ldr	r1, [sp, #96]	; 0x60
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f568:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800f56c:	f360 0107 	bfi	r1, r0, #0, #8
 800f570:	f362 210f 	bfi	r1, r2, #8, #8
 800f574:	f363 4117 	bfi	r1, r3, #16, #8
 800f578:	f041 437f 	orr.w	r3, r1, #4278190080	; 0xff000000
 800f57c:	9318      	str	r3, [sp, #96]	; 0x60
 800f57e:	461a      	mov	r2, r3
            fill_fp(&edge_bot_area, mask, act_color, opa);
 800f580:	4b4c      	ldr	r3, [pc, #304]	; (800f6b4 <lv_draw_rect_main_corner+0x7d0>)
 800f582:	4651      	mov	r1, sl
 800f584:	a82e      	add	r0, sp, #184	; 0xb8
 800f586:	681c      	ldr	r4, [r3, #0]
 800f588:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f58a:	47a0      	blx	r4
                    rb_origo.x + LV_CIRC_OCT1_X(cir),
 800f58c:	9c21      	ldr	r4, [sp, #132]	; 0x84
        lv_area_set(&mid_bot_area,  lb_origo.x + LV_CIRC_OCT4_X(cir),
 800f58e:	a82c      	add	r0, sp, #176	; 0xb0
                    lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800f590:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800f592:	f8bd 209e 	ldrh.w	r2, [sp, #158]	; 0x9e
                    rb_origo.x + LV_CIRC_OCT1_X(cir),
 800f596:	4623      	mov	r3, r4
        lv_area_set(&mid_bot_area,  lb_origo.x + LV_CIRC_OCT4_X(cir),
 800f598:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800f59a:	f8bd 109c 	ldrh.w	r1, [sp, #156]	; 0x9c
                    lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800f59e:	4432      	add	r2, r6
                    rb_origo.x + LV_CIRC_OCT1_X(cir),
 800f5a0:	440b      	add	r3, r1
        lv_area_set(&mid_bot_area,  lb_origo.x + LV_CIRC_OCT4_X(cir),
 800f5a2:	b212      	sxth	r2, r2
 800f5a4:	1a69      	subs	r1, r5, r1
 800f5a6:	b21b      	sxth	r3, r3
 800f5a8:	9200      	str	r2, [sp, #0]
 800f5aa:	b209      	sxth	r1, r1
 800f5ac:	f003 fa50 	bl	8012a50 <lv_area_set>
                    lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800f5b0:	f8bd 209c 	ldrh.w	r2, [sp, #156]	; 0x9c
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir),
 800f5b4:	f8bd 109e 	ldrh.w	r1, [sp, #158]	; 0x9e
                    rb_origo.x + LV_CIRC_OCT2_X(cir),
 800f5b8:	4623      	mov	r3, r4
                    lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800f5ba:	4432      	add	r2, r6
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir),
 800f5bc:	a82e      	add	r0, sp, #184	; 0xb8
                    rb_origo.x + LV_CIRC_OCT2_X(cir),
 800f5be:	440b      	add	r3, r1
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir),
 800f5c0:	1a69      	subs	r1, r5, r1
 800f5c2:	b212      	sxth	r2, r2
 800f5c4:	b21b      	sxth	r3, r3
 800f5c6:	9200      	str	r2, [sp, #0]
 800f5c8:	b209      	sxth	r1, r1
 800f5ca:	f003 fa41 	bl	8012a50 <lv_area_set>
                    lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800f5ce:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800f5d0:	f8bd 209e 	ldrh.w	r2, [sp, #158]	; 0x9e
                    rt_origo.x + LV_CIRC_OCT8_X(cir),
 800f5d4:	4623      	mov	r3, r4
        lv_area_set(&mid_top_area,  lt_origo.x + LV_CIRC_OCT5_X(cir),
 800f5d6:	f8bd 109c 	ldrh.w	r1, [sp, #156]	; 0x9c
 800f5da:	a82a      	add	r0, sp, #168	; 0xa8
                    lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800f5dc:	1ab2      	subs	r2, r6, r2
                    rt_origo.x + LV_CIRC_OCT8_X(cir),
 800f5de:	440b      	add	r3, r1
        lv_area_set(&mid_top_area,  lt_origo.x + LV_CIRC_OCT5_X(cir),
 800f5e0:	1a69      	subs	r1, r5, r1
 800f5e2:	b212      	sxth	r2, r2
 800f5e4:	b21b      	sxth	r3, r3
 800f5e6:	9200      	str	r2, [sp, #0]
 800f5e8:	b209      	sxth	r1, r1
 800f5ea:	f003 fa31 	bl	8012a50 <lv_area_set>
                    lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800f5ee:	f8bd 209c 	ldrh.w	r2, [sp, #156]	; 0x9c
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir),
 800f5f2:	f8bd 109e 	ldrh.w	r1, [sp, #158]	; 0x9e
                    rt_origo.x + LV_CIRC_OCT7_X(cir),
 800f5f6:	4623      	mov	r3, r4
                    lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800f5f8:	1ab2      	subs	r2, r6, r2
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir),
 800f5fa:	a828      	add	r0, sp, #160	; 0xa0
                    rt_origo.x + LV_CIRC_OCT7_X(cir),
 800f5fc:	440b      	add	r3, r1
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir),
 800f5fe:	1a69      	subs	r1, r5, r1
 800f600:	b212      	sxth	r2, r2
 800f602:	b21b      	sxth	r3, r3
 800f604:	9200      	str	r2, [sp, #0]
 800f606:	b209      	sxth	r1, r1
 800f608:	f003 fa22 	bl	8012a50 <lv_area_set>
        lv_circ_next(&cir, &cir_tmp);
 800f60c:	a827      	add	r0, sp, #156	; 0x9c
 800f60e:	f10d 019a 	add.w	r1, sp, #154	; 0x9a
 800f612:	f003 fb13 	bl	8012c3c <lv_circ_next>
    while(lv_circ_cont(&cir)) {
 800f616:	a827      	add	r0, sp, #156	; 0x9c
 800f618:	f003 fb06 	bl	8012c28 <lv_circ_cont>
 800f61c:	2800      	cmp	r0, #0
 800f61e:	f47f ad22 	bne.w	800f066 <lv_draw_rect_main_corner+0x182>
    if(mcolor.full == gcolor.full) act_color = mcolor;
 800f622:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f624:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f626:	f8cd 9078 	str.w	r9, [sp, #120]	; 0x78
 800f62a:	4293      	cmp	r3, r2
 800f62c:	f000 8282 	beq.w	800fb34 <lv_draw_rect_main_corner+0xc50>
        mix = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1)  * 255) / height;
 800f630:	9b20      	ldr	r3, [sp, #128]	; 0x80
    fill_fp(&edge_top_area, mask, act_color, opa);
 800f632:	4651      	mov	r1, sl
        mix = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1)  * 255) / height;
 800f634:	f9bd 00a2 	ldrsh.w	r0, [sp, #162]	; 0xa2
 800f638:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
    fill_fp(&edge_top_area, mask, act_color, opa);
 800f63c:	4c1d      	ldr	r4, [pc, #116]	; (800f6b4 <lv_draw_rect_main_corner+0x7d0>)
        mix = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1)  * 255) / height;
 800f63e:	1a12      	subs	r2, r2, r0
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f640:	f8bd 5010 	ldrh.w	r5, [sp, #16]
    fill_fp(&edge_top_area, mask, act_color, opa);
 800f644:	6827      	ldr	r7, [r4, #0]
 800f646:	a828      	add	r0, sp, #160	; 0xa0
        mix = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1)  * 255) / height;
 800f648:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800f64a:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f64e:	f8bd e018 	ldrh.w	lr, [sp, #24]
    fill_fp(&edge_top_area, mask, act_color, opa);
 800f652:	9b17      	ldr	r3, [sp, #92]	; 0x5c
        mix = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1)  * 255) / height;
 800f654:	fbb2 f2f4 	udiv	r2, r2, r4
 800f658:	b2d2      	uxtb	r2, r2
 800f65a:	f1c2 04ff 	rsb	r4, r2, #255	; 0xff
 800f65e:	b292      	uxth	r2, r2
 800f660:	b2a4      	uxth	r4, r4
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f662:	fb14 f605 	smulbb	r6, r4, r5
 800f666:	9d07      	ldr	r5, [sp, #28]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f668:	fb1e fe04 	smulbb	lr, lr, r4
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f66c:	fb02 6605 	mla	r6, r2, r5, r6
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f670:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 800f674:	fb14 f505 	smulbb	r5, r4, r5
 800f678:	9c08      	ldr	r4, [sp, #32]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f67a:	f3c6 2607 	ubfx	r6, r6, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f67e:	fb02 5504 	mla	r5, r2, r4, r5
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f682:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f684:	fb04 e202 	mla	r2, r4, r2, lr
 800f688:	9c18      	ldr	r4, [sp, #96]	; 0x60
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f68a:	f3c5 2507 	ubfx	r5, r5, #8, #8
 800f68e:	f366 0407 	bfi	r4, r6, #0, #8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f692:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800f696:	f365 240f 	bfi	r4, r5, #8, #8
 800f69a:	f362 4417 	bfi	r4, r2, #16, #8
 800f69e:	f044 427f 	orr.w	r2, r4, #4278190080	; 0xff000000
 800f6a2:	9218      	str	r2, [sp, #96]	; 0x60
    fill_fp(&edge_top_area, mask, act_color, opa);
 800f6a4:	47b8      	blx	r7
    if(edge_top_area.y1 != mid_top_area.y1) {
 800f6a6:	f9bd 20aa 	ldrsh.w	r2, [sp, #170]	; 0xaa
 800f6aa:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	; 0xa2
 800f6ae:	4293      	cmp	r3, r2
 800f6b0:	d03f      	beq.n	800f732 <lv_draw_rect_main_corner+0x84e>
 800f6b2:	e001      	b.n	800f6b8 <lv_draw_rect_main_corner+0x7d4>
 800f6b4:	0808b60c 	.word	0x0808b60c
            mix = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 800f6b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f6ba:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800f6be:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f6c2:	9c07      	ldr	r4, [sp, #28]
 800f6c4:	1a9b      	subs	r3, r3, r2
 800f6c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f6c8:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 800f6cc:	fbb3 f3f2 	udiv	r3, r3, r2
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f6d0:	b2db      	uxtb	r3, r3
 800f6d2:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 800f6d6:	b29b      	uxth	r3, r3
 800f6d8:	b292      	uxth	r2, r2
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f6da:	fb11 f002 	smulbb	r0, r1, r2
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f6de:	f8bd 1014 	ldrh.w	r1, [sp, #20]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f6e2:	fb04 0003 	mla	r0, r4, r3, r0
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f6e6:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f6ea:	fb11 f102 	smulbb	r1, r1, r2
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f6ee:	fb14 f202 	smulbb	r2, r4, r2
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f6f2:	9c08      	ldr	r4, [sp, #32]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f6f4:	f3c0 2007 	ubfx	r0, r0, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f6f8:	fb04 1103 	mla	r1, r4, r3, r1
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f6fc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f6fe:	fb04 2303 	mla	r3, r4, r3, r2
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f702:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800f706:	9918      	ldr	r1, [sp, #96]	; 0x60
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f708:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800f70c:	f360 0107 	bfi	r1, r0, #0, #8
 800f710:	f362 210f 	bfi	r1, r2, #8, #8
 800f714:	f363 4117 	bfi	r1, r3, #16, #8
 800f718:	f041 437f 	orr.w	r3, r1, #4278190080	; 0xff000000
 800f71c:	461a      	mov	r2, r3
 800f71e:	9318      	str	r3, [sp, #96]	; 0x60
        fill_fp(&mid_top_area, mask, act_color, opa);
 800f720:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f722:	a82a      	add	r0, sp, #168	; 0xa8
 800f724:	4651      	mov	r1, sl
 800f726:	47b8      	blx	r7
    if(mcolor.full == gcolor.full) act_color = mcolor;
 800f728:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f72a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f72c:	4293      	cmp	r3, r2
 800f72e:	f000 8212 	beq.w	800fb56 <lv_draw_rect_main_corner+0xc72>
        mix = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800f732:	9b20      	ldr	r3, [sp, #128]	; 0x80
    fill_fp(&mid_bot_area, mask, act_color, opa);
 800f734:	a82c      	add	r0, sp, #176	; 0xb0
        mix = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800f736:	f9bd 10b2 	ldrsh.w	r1, [sp, #178]	; 0xb2
 800f73a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
    fill_fp(&mid_bot_area, mask, act_color, opa);
 800f73e:	4c9a      	ldr	r4, [pc, #616]	; (800f9a8 <lv_draw_rect_main_corner+0xac4>)
        mix = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800f740:	1a52      	subs	r2, r2, r1
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f742:	f8bd 5010 	ldrh.w	r5, [sp, #16]
    fill_fp(&mid_bot_area, mask, act_color, opa);
 800f746:	6827      	ldr	r7, [r4, #0]
 800f748:	4651      	mov	r1, sl
        mix = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800f74a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800f74c:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f750:	f8bd e018 	ldrh.w	lr, [sp, #24]
    fill_fp(&mid_bot_area, mask, act_color, opa);
 800f754:	9b17      	ldr	r3, [sp, #92]	; 0x5c
        mix = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800f756:	fbb2 f2f4 	udiv	r2, r2, r4
 800f75a:	b2d2      	uxtb	r2, r2
 800f75c:	f1c2 04ff 	rsb	r4, r2, #255	; 0xff
 800f760:	b292      	uxth	r2, r2
 800f762:	b2a4      	uxth	r4, r4
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f764:	fb14 f605 	smulbb	r6, r4, r5
 800f768:	9d07      	ldr	r5, [sp, #28]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f76a:	fb14 fe0e 	smulbb	lr, r4, lr
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f76e:	fb02 6605 	mla	r6, r2, r5, r6
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f772:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 800f776:	fb14 f505 	smulbb	r5, r4, r5
 800f77a:	9c08      	ldr	r4, [sp, #32]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f77c:	f3c6 2607 	ubfx	r6, r6, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f780:	fb02 5504 	mla	r5, r2, r4, r5
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f784:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f786:	fb02 e204 	mla	r2, r2, r4, lr
 800f78a:	9c18      	ldr	r4, [sp, #96]	; 0x60
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f78c:	f3c5 2507 	ubfx	r5, r5, #8, #8
 800f790:	f366 0407 	bfi	r4, r6, #0, #8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f794:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800f798:	f365 240f 	bfi	r4, r5, #8, #8
 800f79c:	f362 4417 	bfi	r4, r2, #16, #8
 800f7a0:	f044 427f 	orr.w	r2, r4, #4278190080	; 0xff000000
 800f7a4:	9218      	str	r2, [sp, #96]	; 0x60
    fill_fp(&mid_bot_area, mask, act_color, opa);
 800f7a6:	47b8      	blx	r7
    if(edge_bot_area.y1 != mid_bot_area.y1) {
 800f7a8:	f9bd 20ba 	ldrsh.w	r2, [sp, #186]	; 0xba
 800f7ac:	f9bd 30b2 	ldrsh.w	r3, [sp, #178]	; 0xb2
 800f7b0:	4293      	cmp	r3, r2
 800f7b2:	d037      	beq.n	800f824 <lv_draw_rect_main_corner+0x940>
            mix = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 800f7b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f7b6:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800f7ba:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f7be:	9c07      	ldr	r4, [sp, #28]
 800f7c0:	1a9b      	subs	r3, r3, r2
 800f7c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f7c4:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 800f7c8:	fbb3 f3f2 	udiv	r3, r3, r2
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f7cc:	b2db      	uxtb	r3, r3
 800f7ce:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 800f7d2:	b29b      	uxth	r3, r3
 800f7d4:	b292      	uxth	r2, r2
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f7d6:	fb12 f001 	smulbb	r0, r2, r1
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f7da:	f8bd 1014 	ldrh.w	r1, [sp, #20]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f7de:	fb03 0004 	mla	r0, r3, r4, r0
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f7e2:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f7e6:	fb12 f101 	smulbb	r1, r2, r1
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f7ea:	fb12 f204 	smulbb	r2, r2, r4
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f7ee:	9c08      	ldr	r4, [sp, #32]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f7f0:	f3c0 2007 	ubfx	r0, r0, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f7f4:	fb03 1104 	mla	r1, r3, r4, r1
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f7f8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f7fa:	fb03 2304 	mla	r3, r3, r4, r2
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f7fe:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800f802:	9918      	ldr	r1, [sp, #96]	; 0x60
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f804:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800f808:	f360 0107 	bfi	r1, r0, #0, #8
 800f80c:	f362 210f 	bfi	r1, r2, #8, #8
 800f810:	f363 4117 	bfi	r1, r3, #16, #8
 800f814:	f041 437f 	orr.w	r3, r1, #4278190080	; 0xff000000
 800f818:	461a      	mov	r2, r3
 800f81a:	9318      	str	r3, [sp, #96]	; 0x60
        fill_fp(&edge_bot_area, mask, act_color, opa);
 800f81c:	a82e      	add	r0, sp, #184	; 0xb8
 800f81e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f820:	4651      	mov	r1, sl
 800f822:	47b8      	blx	r7
    edge_top_area.x1 = coords->x1 + radius + 2;
 800f824:	9d20      	ldr	r5, [sp, #128]	; 0x80
    fill_fp(&edge_top_area, mask, style->body.main_color, opa);
 800f826:	4651      	mov	r1, sl
    edge_top_area.x1 = coords->x1 + radius + 2;
 800f828:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 800f82a:	882c      	ldrh	r4, [r5, #0]
    edge_top_area.x2 = coords->x2 - radius - 2;
 800f82c:	88aa      	ldrh	r2, [r5, #4]
    edge_top_area.x1 = coords->x1 + radius + 2;
 800f82e:	3402      	adds	r4, #2
    edge_top_area.y1 = coords->y1;
 800f830:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
    edge_top_area.x2 = coords->x2 - radius - 2;
 800f834:	3a02      	subs	r2, #2
    fill_fp(&edge_top_area, mask, style->body.main_color, opa);
 800f836:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
    edge_top_area.x1 = coords->x1 + radius + 2;
 800f83a:	4434      	add	r4, r6
    edge_top_area.y1 = coords->y1;
 800f83c:	f8ad 00a2 	strh.w	r0, [sp, #162]	; 0xa2
    edge_top_area.x2 = coords->x2 - radius - 2;
 800f840:	1b92      	subs	r2, r2, r6
    fill_fp(&edge_top_area, mask, style->body.main_color, opa);
 800f842:	4643      	mov	r3, r8
    edge_top_area.x1 = coords->x1 + radius + 2;
 800f844:	f8ad 40a0 	strh.w	r4, [sp, #160]	; 0xa0
    fill_fp(&edge_top_area, mask, style->body.main_color, opa);
 800f848:	9c25      	ldr	r4, [sp, #148]	; 0x94
    edge_top_area.y2 = coords->y1;
 800f84a:	f8ad 00a6 	strh.w	r0, [sp, #166]	; 0xa6
    fill_fp(&edge_top_area, mask, style->body.main_color, opa);
 800f84e:	a828      	add	r0, sp, #160	; 0xa0
    edge_top_area.x2 = coords->x2 - radius - 2;
 800f850:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
    fill_fp(&edge_top_area, mask, style->body.main_color, opa);
 800f854:	6862      	ldr	r2, [r4, #4]
 800f856:	47b8      	blx	r7
    edge_top_area.y1 = coords->y2;
 800f858:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
    fill_fp(&edge_top_area, mask, style->body.grad_color, opa);
 800f85c:	68a2      	ldr	r2, [r4, #8]
 800f85e:	4643      	mov	r3, r8
 800f860:	a828      	add	r0, sp, #160	; 0xa0
    edge_top_area.y1 = coords->y2;
 800f862:	f8ad 10a2 	strh.w	r1, [sp, #162]	; 0xa2
    edge_top_area.y2 = coords->y2;
 800f866:	f8ad 10a6 	strh.w	r1, [sp, #166]	; 0xa6
    fill_fp(&edge_top_area, mask, style->body.grad_color, opa);
 800f86a:	4651      	mov	r1, sl
 800f86c:	47b8      	blx	r7
    mix = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800f86e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800f870:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f872:	1af3      	subs	r3, r6, r3
    lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800f874:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800f878:	f8bd 209e 	ldrh.w	r2, [sp, #158]	; 0x9e
    mix = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800f87c:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f880:	9807      	ldr	r0, [sp, #28]
    lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800f882:	fa1f fc88 	uxth.w	ip, r8
    mix = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800f886:	961f      	str	r6, [sp, #124]	; 0x7c
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f888:	f8dd e020 	ldr.w	lr, [sp, #32]
    lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800f88c:	eba2 020c 	sub.w	r2, r2, ip
    mix = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800f890:	fbb3 f3f1 	udiv	r3, r3, r1
    lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800f894:	b212      	sxth	r2, r2
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f896:	9904      	ldr	r1, [sp, #16]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f898:	b2db      	uxtb	r3, r3
 800f89a:	4617      	mov	r7, r2
 800f89c:	920a      	str	r2, [sp, #40]	; 0x28
 800f89e:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 800f8a2:	b29b      	uxth	r3, r3
    for(i = 0; i  < seg_size; i++) {
 800f8a4:	2f00      	cmp	r7, #0
 800f8a6:	b292      	uxth	r2, r2
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f8a8:	fb12 f600 	smulbb	r6, r2, r0
 800f8ac:	fb12 f501 	smulbb	r5, r2, r1
 800f8b0:	fb03 6601 	mla	r6, r3, r1, r6
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f8b4:	9905      	ldr	r1, [sp, #20]
 800f8b6:	fb12 f40e 	smulbb	r4, r2, lr
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f8ba:	fb03 5500 	mla	r5, r3, r0, r5
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f8be:	fb12 f001 	smulbb	r0, r2, r1
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f8c2:	f3c6 2607 	ubfx	r6, r6, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f8c6:	fb03 4401 	mla	r4, r3, r1, r4
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800f8ca:	f3c5 2507 	ubfx	r5, r5, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f8ce:	fb03 010e 	mla	r1, r3, lr, r0
 800f8d2:	980d      	ldr	r0, [sp, #52]	; 0x34
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f8d4:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f8d8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800f8dc:	f366 0007 	bfi	r0, r6, #0, #8
 800f8e0:	9102      	str	r1, [sp, #8]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f8e2:	fb12 f10e 	smulbb	r1, r2, lr
 800f8e6:	4606      	mov	r6, r0
 800f8e8:	9806      	ldr	r0, [sp, #24]
 800f8ea:	fb12 f900 	smulbb	r9, r2, r0
 800f8ee:	fb03 1100 	mla	r1, r3, r0, r1
 800f8f2:	980f      	ldr	r0, [sp, #60]	; 0x3c
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f8f4:	9a02      	ldr	r2, [sp, #8]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800f8f6:	fb03 930e 	mla	r3, r3, lr, r9
 800f8fa:	f365 0007 	bfi	r0, r5, #0, #8
 800f8fe:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800f902:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800f906:	4605      	mov	r5, r0
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800f908:	f3c2 2007 	ubfx	r0, r2, #8, #8
 800f90c:	4632      	mov	r2, r6
 800f90e:	f364 220f 	bfi	r2, r4, #8, #8
 800f912:	462c      	mov	r4, r5
 800f914:	f361 4217 	bfi	r2, r1, #16, #8
 800f918:	f360 240f 	bfi	r4, r0, #8, #8
 800f91c:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 800f920:	f363 4417 	bfi	r4, r3, #16, #8
 800f924:	920d      	str	r2, [sp, #52]	; 0x34
 800f926:	f044 427f 	orr.w	r2, r4, #4278190080	; 0xff000000
 800f92a:	920f      	str	r2, [sp, #60]	; 0x3c
 800f92c:	f340 80eb 	ble.w	800fb06 <lv_draw_rect_main_corner+0xc22>
 800f930:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f932:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800f934:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800f936:	1c58      	adds	r0, r3, #1
 800f938:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800f93a:	1e57      	subs	r7, r2, #1
 800f93c:	f8bd 1078 	ldrh.w	r1, [sp, #120]	; 0x78
 800f940:	f105 0e01 	add.w	lr, r5, #1
 800f944:	1e63      	subs	r3, r4, #1
 800f946:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 800f948:	4642      	mov	r2, r8
 800f94a:	1a7f      	subs	r7, r7, r1
 800f94c:	eb01 0800 	add.w	r8, r1, r0
 800f950:	eba3 0901 	sub.w	r9, r3, r1
 800f954:	448e      	add	lr, r1
 800f956:	991d      	ldr	r1, [sp, #116]	; 0x74
 800f958:	1ab2      	subs	r2, r6, r2
 800f95a:	2300      	movs	r3, #0
 800f95c:	eb01 000c 	add.w	r0, r1, ip
 800f960:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800f962:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 800f966:	9303      	str	r3, [sp, #12]
 800f968:	eba1 060c 	sub.w	r6, r1, ip
 800f96c:	490f      	ldr	r1, [pc, #60]	; (800f9ac <lv_draw_rect_main_corner+0xac8>)
 800f96e:	920b      	str	r2, [sp, #44]	; 0x2c
 800f970:	fa0f f288 	sxth.w	r2, r8
 800f974:	f8d1 8000 	ldr.w	r8, [r1]
 800f978:	4619      	mov	r1, r3
 800f97a:	fa0f f38e 	sxth.w	r3, lr
 800f97e:	4465      	add	r5, ip
 800f980:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800f982:	930c      	str	r3, [sp, #48]	; 0x30
 800f984:	fa0f f389 	sxth.w	r3, r9
 800f988:	eba4 040c 	sub.w	r4, r4, ip
 800f98c:	9212      	str	r2, [sp, #72]	; 0x48
 800f98e:	9316      	str	r3, [sp, #88]	; 0x58
 800f990:	b2ab      	uxth	r3, r5
 800f992:	b23a      	sxth	r2, r7
 800f994:	9311      	str	r3, [sp, #68]	; 0x44
 800f996:	b2a3      	uxth	r3, r4
 800f998:	9214      	str	r2, [sp, #80]	; 0x50
 800f99a:	9313      	str	r3, [sp, #76]	; 0x4c
 800f99c:	b283      	uxth	r3, r0
 800f99e:	9315      	str	r3, [sp, #84]	; 0x54
 800f9a0:	b2b3      	uxth	r3, r6
 800f9a2:	9318      	str	r3, [sp, #96]	; 0x60
 800f9a4:	e004      	b.n	800f9b0 <lv_draw_rect_main_corner+0xacc>
 800f9a6:	bf00      	nop
 800f9a8:	0808b60c 	.word	0x0808b60c
 800f9ac:	0808b610 	.word	0x0808b610
        lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800f9b0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800f9b2:	9e03      	ldr	r6, [sp, #12]
 800f9b4:	462a      	mov	r2, r5
 800f9b6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f9b8:	f7fd f9e6 	bl	800cd88 <lv_draw_aa_get_opa>
 800f9bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f9be:	b2b7      	uxth	r7, r6
 800f9c0:	1a28      	subs	r0, r5, r0
        px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask, aa_color_hor_top, aa_opa);
 800f9c2:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 800f9c6:	3601      	adds	r6, #1
 800f9c8:	18fc      	adds	r4, r7, r3
        lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800f9ca:	b2c5      	uxtb	r5, r0
 800f9cc:	9702      	str	r7, [sp, #8]
        px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask, aa_color_hor_top, aa_opa);
 800f9ce:	464b      	mov	r3, r9
 800f9d0:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800f9d2:	b224      	sxth	r4, r4
 800f9d4:	4652      	mov	r2, sl
 800f9d6:	9500      	str	r5, [sp, #0]
 800f9d8:	4639      	mov	r1, r7
 800f9da:	4620      	mov	r0, r4
 800f9dc:	9603      	str	r6, [sp, #12]
 800f9de:	47c0      	blx	r8
 800f9e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
        px_fp(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask, aa_color_hor_top, aa_opa);
 800f9e2:	4639      	mov	r1, r7
 800f9e4:	9b02      	ldr	r3, [sp, #8]
 800f9e6:	9500      	str	r5, [sp, #0]
 800f9e8:	1ad6      	subs	r6, r2, r3
 800f9ea:	464b      	mov	r3, r9
 800f9ec:	4652      	mov	r2, sl
 800f9ee:	b236      	sxth	r6, r6
 800f9f0:	4630      	mov	r0, r6
 800f9f2:	47c0      	blx	r8
        px_fp(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask, aa_color_hor_bottom, aa_opa);
 800f9f4:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 800f9f8:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800f9fa:	4630      	mov	r0, r6
 800f9fc:	464b      	mov	r3, r9
 800f9fe:	4652      	mov	r2, sl
 800fa00:	4639      	mov	r1, r7
 800fa02:	9500      	str	r5, [sp, #0]
 800fa04:	47c0      	blx	r8
        px_fp(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask, aa_color_hor_bottom, aa_opa);
 800fa06:	4620      	mov	r0, r4
 800fa08:	464b      	mov	r3, r9
 800fa0a:	4639      	mov	r1, r7
 800fa0c:	4652      	mov	r2, sl
 800fa0e:	9500      	str	r5, [sp, #0]
 800fa10:	47c0      	blx	r8
        mix = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800fa12:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800fa14:	990e      	ldr	r1, [sp, #56]	; 0x38
 800fa16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fa18:	9a02      	ldr	r2, [sp, #8]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800fa1a:	f8bd 7010 	ldrh.w	r7, [sp, #16]
 800fa1e:	eb02 0903 	add.w	r9, r2, r3
 800fa22:	4633      	mov	r3, r6
        px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, aa_color_ver, aa_opa);
 800fa24:	4652      	mov	r2, sl
 800fa26:	980c      	ldr	r0, [sp, #48]	; 0x30
 800fa28:	33ff      	adds	r3, #255	; 0xff
 800fa2a:	fa0f f989 	sxth.w	r9, r9
 800fa2e:	9500      	str	r5, [sp, #0]
 800fa30:	930b      	str	r3, [sp, #44]	; 0x2c
 800fa32:	9b07      	ldr	r3, [sp, #28]
        mix = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800fa34:	fbb6 f4f1 	udiv	r4, r6, r1
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800fa38:	b2e4      	uxtb	r4, r4
        px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, aa_color_ver, aa_opa);
 800fa3a:	4649      	mov	r1, r9
 800fa3c:	f1c4 06ff 	rsb	r6, r4, #255	; 0xff
 800fa40:	b2a4      	uxth	r4, r4
 800fa42:	b2b6      	uxth	r6, r6
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800fa44:	fb16 fc07 	smulbb	ip, r6, r7
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800fa48:	f8bd 7014 	ldrh.w	r7, [sp, #20]
 800fa4c:	fb16 fe07 	smulbb	lr, r6, r7
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800fa50:	f8bd 7018 	ldrh.w	r7, [sp, #24]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800fa54:	fb04 cc03 	mla	ip, r4, r3, ip
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800fa58:	fb16 f307 	smulbb	r3, r6, r7
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800fa5c:	9f08      	ldr	r7, [sp, #32]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800fa5e:	f3cc 2c07 	ubfx	ip, ip, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800fa62:	fb04 ee07 	mla	lr, r4, r7, lr
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800fa66:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800fa68:	f36c 0b07 	bfi	fp, ip, #0, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800fa6c:	f3ce 2e07 	ubfx	lr, lr, #8, #8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800fa70:	fb04 3307 	mla	r3, r4, r7, r3
 800fa74:	f36e 2b0f 	bfi	fp, lr, #8, #8
 800fa78:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800fa7c:	f363 4b17 	bfi	fp, r3, #16, #8
 800fa80:	f04b 4b7f 	orr.w	fp, fp, #4278190080	; 0xff000000
 800fa84:	465b      	mov	r3, fp
 800fa86:	47c0      	blx	r8
        px_fp(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask, aa_color_ver, aa_opa);
 800fa88:	4649      	mov	r1, r9
 800fa8a:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
 800fa8e:	465b      	mov	r3, fp
 800fa90:	4652      	mov	r2, sl
 800fa92:	9500      	str	r5, [sp, #0]
 800fa94:	4648      	mov	r0, r9
 800fa96:	47c0      	blx	r8
 800fa98:	9918      	ldr	r1, [sp, #96]	; 0x60
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800fa9a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
        px_fp(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, aa_color_ver, aa_opa);
 800fa9e:	4648      	mov	r0, r9
 800faa0:	9f02      	ldr	r7, [sp, #8]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800faa2:	f8bd e020 	ldrh.w	lr, [sp, #32]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800faa6:	fb16 f202 	smulbb	r2, r6, r2
 800faaa:	1bcf      	subs	r7, r1, r7
 800faac:	9904      	ldr	r1, [sp, #16]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800faae:	fb16 f30e 	smulbb	r3, r6, lr
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800fab2:	f8bd e024 	ldrh.w	lr, [sp, #36]	; 0x24
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800fab6:	fb04 2201 	mla	r2, r4, r1, r2
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800faba:	9905      	ldr	r1, [sp, #20]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800fabc:	fb16 f60e 	smulbb	r6, r6, lr
 800fac0:	b23f      	sxth	r7, r7
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800fac2:	fb04 3301 	mla	r3, r4, r1, r3
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800fac6:	f3c2 2207 	ubfx	r2, r2, #8, #8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800faca:	9906      	ldr	r1, [sp, #24]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800facc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800fad0:	f362 0b07 	bfi	fp, r2, #0, #8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800fad4:	fb04 6401 	mla	r4, r4, r1, r6
 800fad8:	4652      	mov	r2, sl
 800fada:	f363 2b0f 	bfi	fp, r3, #8, #8
 800fade:	4639      	mov	r1, r7
 800fae0:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800fae4:	9500      	str	r5, [sp, #0]
 800fae6:	f364 4b17 	bfi	fp, r4, #16, #8
 800faea:	465b      	mov	r3, fp
 800faec:	47c0      	blx	r8
        px_fp(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask, aa_color_ver, aa_opa);
 800faee:	4639      	mov	r1, r7
 800faf0:	465b      	mov	r3, fp
 800faf2:	9500      	str	r5, [sp, #0]
 800faf4:	4652      	mov	r2, sl
 800faf6:	980c      	ldr	r0, [sp, #48]	; 0x30
 800faf8:	47c0      	blx	r8
    for(i = 0; i  < seg_size; i++) {
 800fafa:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 800fafe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb00:	428b      	cmp	r3, r1
 800fb02:	f73f af55 	bgt.w	800f9b0 <lv_draw_rect_main_corner+0xacc>
    if(LV_MATH_ABS(aa_p.x - aa_p.y) == seg_size) {
 800fb06:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fb08:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800fb0a:	1a9b      	subs	r3, r3, r2
 800fb0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	bfb8      	it	lt
 800fb12:	425b      	neglt	r3, r3
 800fb14:	4293      	cmp	r3, r2
 800fb16:	d030      	beq.n	800fb7a <lv_draw_rect_main_corner+0xc96>
}
 800fb18:	b031      	add	sp, #196	; 0xc4
 800fb1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb1e:	f9bd 509e 	ldrsh.w	r5, [sp, #158]	; 0x9e
 800fb22:	e417      	b.n	800f354 <lv_draw_rect_main_corner+0x470>
 800fb24:	463d      	mov	r5, r7
            for(i = 0; i  < seg_size; i++) {
 800fb26:	46c1      	mov	r9, r8
 800fb28:	463b      	mov	r3, r7
 800fb2a:	e412      	b.n	800f352 <lv_draw_rect_main_corner+0x46e>
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t) style->body.opa * opa_scale) >> 8;
 800fb2c:	7b8b      	ldrb	r3, [r1, #14]
 800fb2e:	9317      	str	r3, [sp, #92]	; 0x5c
 800fb30:	f7ff b9f1 	b.w	800ef16 <lv_draw_rect_main_corner+0x32>
 800fb34:	461a      	mov	r2, r3
    fill_fp(&edge_top_area, mask, act_color, opa);
 800fb36:	4b55      	ldr	r3, [pc, #340]	; (800fc8c <lv_draw_rect_main_corner+0xda8>)
 800fb38:	4651      	mov	r1, sl
 800fb3a:	a828      	add	r0, sp, #160	; 0xa0
 800fb3c:	681f      	ldr	r7, [r3, #0]
 800fb3e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fb40:	47b8      	blx	r7
    if(edge_top_area.y1 != mid_top_area.y1) {
 800fb42:	f9bd 20aa 	ldrsh.w	r2, [sp, #170]	; 0xaa
 800fb46:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	; 0xa2
 800fb4a:	429a      	cmp	r2, r3
 800fb4c:	d003      	beq.n	800fb56 <lv_draw_rect_main_corner+0xc72>
        if(mcolor.full == gcolor.full) act_color = mcolor;
 800fb4e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fb50:	9318      	str	r3, [sp, #96]	; 0x60
 800fb52:	461a      	mov	r2, r3
 800fb54:	e5e4      	b.n	800f720 <lv_draw_rect_main_corner+0x83c>
    fill_fp(&mid_bot_area, mask, act_color, opa);
 800fb56:	4b4d      	ldr	r3, [pc, #308]	; (800fc8c <lv_draw_rect_main_corner+0xda8>)
 800fb58:	a82c      	add	r0, sp, #176	; 0xb0
 800fb5a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800fb5c:	4651      	mov	r1, sl
 800fb5e:	681f      	ldr	r7, [r3, #0]
 800fb60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fb62:	47b8      	blx	r7
    if(edge_bot_area.y1 != mid_bot_area.y1) {
 800fb64:	f9bd 20ba 	ldrsh.w	r2, [sp, #186]	; 0xba
 800fb68:	f9bd 30b2 	ldrsh.w	r3, [sp, #178]	; 0xb2
 800fb6c:	429a      	cmp	r2, r3
 800fb6e:	f43f ae59 	beq.w	800f824 <lv_draw_rect_main_corner+0x940>
        if(mcolor.full == gcolor.full) act_color = mcolor;
 800fb72:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fb74:	9318      	str	r3, [sp, #96]	; 0x60
 800fb76:	461a      	mov	r2, r3
 800fb78:	e650      	b.n	800f81c <lv_draw_rect_main_corner+0x938>
        mix = (uint32_t)((uint32_t)(out_x_last) * 255) / height;
 800fb7a:	991e      	ldr	r1, [sp, #120]	; 0x78
        px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask, aa_color_hor_bottom, aa_opa);
 800fb7c:	4a44      	ldr	r2, [pc, #272]	; (800fc90 <lv_draw_rect_main_corner+0xdac>)
        mix = (uint32_t)((uint32_t)(out_x_last) * 255) / height;
 800fb7e:	ebc1 2301 	rsb	r3, r1, r1, lsl #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800fb82:	f8dd c014 	ldr.w	ip, [sp, #20]
        px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask, aa_color_hor_bottom, aa_opa);
 800fb86:	b289      	uxth	r1, r1
 800fb88:	6812      	ldr	r2, [r2, #0]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800fb8a:	9e04      	ldr	r6, [sp, #16]
 800fb8c:	4608      	mov	r0, r1
        lv_opa_t aa_opa = opa >> 1;
 800fb8e:	9917      	ldr	r1, [sp, #92]	; 0x5c
        px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask, aa_color_hor_bottom, aa_opa);
 800fb90:	9203      	str	r2, [sp, #12]
        lv_opa_t aa_opa = opa >> 1;
 800fb92:	ea4f 0851 	mov.w	r8, r1, lsr #1
        px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask, aa_color_hor_bottom, aa_opa);
 800fb96:	9921      	ldr	r1, [sp, #132]	; 0x84
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800fb98:	9f08      	ldr	r7, [sp, #32]
 800fb9a:	4401      	add	r1, r0
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800fb9c:	9d07      	ldr	r5, [sp, #28]
 800fb9e:	9002      	str	r0, [sp, #8]
 800fba0:	460a      	mov	r2, r1
 800fba2:	991d      	ldr	r1, [sp, #116]	; 0x74
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800fba4:	f8dd e018 	ldr.w	lr, [sp, #24]
 800fba8:	4401      	add	r1, r0
 800fbaa:	fa0f fb82 	sxth.w	fp, r2
 800fbae:	f8cd 8000 	str.w	r8, [sp]
 800fbb2:	fa0f f981 	sxth.w	r9, r1
        mix = (uint32_t)((uint32_t)(out_x_last) * 255) / height;
 800fbb6:	990e      	ldr	r1, [sp, #56]	; 0x38
 800fbb8:	fbb3 f3f1 	udiv	r3, r3, r1
 800fbbc:	b2db      	uxtb	r3, r3
        px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask, aa_color_hor_bottom, aa_opa);
 800fbbe:	4649      	mov	r1, r9
 800fbc0:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 800fbc4:	b29b      	uxth	r3, r3
 800fbc6:	b292      	uxth	r2, r2
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800fbc8:	fb12 f00c 	smulbb	r0, r2, ip
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800fbcc:	fb12 f406 	smulbb	r4, r2, r6
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800fbd0:	fb03 0007 	mla	r0, r3, r7, r0
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800fbd4:	fb03 4405 	mla	r4, r3, r5, r4
 800fbd8:	fb12 f505 	smulbb	r5, r2, r5
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800fbdc:	f3c0 2007 	ubfx	r0, r0, #8, #8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800fbe0:	fb03 5506 	mla	r5, r3, r6, r5
 800fbe4:	f3c4 2407 	ubfx	r4, r4, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800fbe8:	fb12 f607 	smulbb	r6, r2, r7
 800fbec:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800fbee:	9004      	str	r0, [sp, #16]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800fbf0:	f3c5 2507 	ubfx	r5, r5, #8, #8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800fbf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fbf6:	f364 0707 	bfi	r7, r4, #0, #8
 800fbfa:	fb12 f40e 	smulbb	r4, r2, lr
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800fbfe:	fb03 660c 	mla	r6, r3, ip, r6
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800fc02:	fb12 f200 	smulbb	r2, r2, r0
 800fc06:	fb03 4400 	mla	r4, r3, r0, r4
 800fc0a:	9804      	ldr	r0, [sp, #16]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800fc0c:	f3c6 2607 	ubfx	r6, r6, #8, #8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800fc10:	fb03 220e 	mla	r2, r3, lr, r2
 800fc14:	f360 270f 	bfi	r7, r0, #8, #8
 800fc18:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800fc1a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800fc1e:	f365 0007 	bfi	r0, r5, #0, #8
 800fc22:	f364 4717 	bfi	r7, r4, #16, #8
 800fc26:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800fc2a:	f366 200f 	bfi	r0, r6, #8, #8
 800fc2e:	4652      	mov	r2, sl
 800fc30:	9e03      	ldr	r6, [sp, #12]
 800fc32:	463b      	mov	r3, r7
 800fc34:	4605      	mov	r5, r0
 800fc36:	4658      	mov	r0, fp
 800fc38:	970d      	str	r7, [sp, #52]	; 0x34
 800fc3a:	47b0      	blx	r6
        px_fp(lb_origo.x + LV_CIRC_OCT4_X(aa_p), lb_origo.y + LV_CIRC_OCT4_Y(aa_p), mask, aa_color_hor_bottom, aa_opa);
 800fc3c:	9902      	ldr	r1, [sp, #8]
 800fc3e:	f364 4517 	bfi	r5, r4, #16, #8
 800fc42:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800fc44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fc46:	462f      	mov	r7, r5
 800fc48:	1a52      	subs	r2, r2, r1
 800fc4a:	f8cd 8000 	str.w	r8, [sp]
 800fc4e:	4649      	mov	r1, r9
 800fc50:	b214      	sxth	r4, r2
 800fc52:	4652      	mov	r2, sl
 800fc54:	4620      	mov	r0, r4
 800fc56:	47b0      	blx	r6
        px_fp(lt_origo.x + LV_CIRC_OCT6_X(aa_p), lt_origo.y + LV_CIRC_OCT6_Y(aa_p), mask, aa_color_hor_top, aa_opa);
 800fc58:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fc5a:	9a02      	ldr	r2, [sp, #8]
 800fc5c:	4620      	mov	r0, r4
 800fc5e:	f8cd 8000 	str.w	r8, [sp]
 800fc62:	1a9d      	subs	r5, r3, r2
 800fc64:	463b      	mov	r3, r7
 800fc66:	4652      	mov	r2, sl
 800fc68:	b22d      	sxth	r5, r5
 800fc6a:	4629      	mov	r1, r5
 800fc6c:	47b0      	blx	r6
        px_fp(rt_origo.x + LV_CIRC_OCT8_X(aa_p), rt_origo.y + LV_CIRC_OCT8_Y(aa_p), mask, aa_color_hor_top, aa_opa);
 800fc6e:	463b      	mov	r3, r7
 800fc70:	4629      	mov	r1, r5
 800fc72:	4658      	mov	r0, fp
 800fc74:	4652      	mov	r2, sl
 800fc76:	f8cd 8000 	str.w	r8, [sp]
 800fc7a:	47b0      	blx	r6
}
 800fc7c:	b031      	add	sp, #196	; 0xc4
 800fc7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(r >= (h >> 1)) {
 800fc82:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800fc84:	931e      	str	r3, [sp, #120]	; 0x78
 800fc86:	4699      	mov	r9, r3
 800fc88:	f7ff b96c 	b.w	800ef64 <lv_draw_rect_main_corner+0x80>
 800fc8c:	0808b60c 	.word	0x0808b60c
 800fc90:	0808b610 	.word	0x0808b610

0800fc94 <lv_draw_rect>:
{
 800fc94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc98:	b0ab      	sub	sp, #172	; 0xac
 800fc9a:	88c4      	ldrh	r4, [r0, #6]
 800fc9c:	8845      	ldrh	r5, [r0, #2]
 800fc9e:	af02      	add	r7, sp, #8
 800fca0:	3401      	adds	r4, #1
 800fca2:	1b64      	subs	r4, r4, r5
 800fca4:	b224      	sxth	r4, r4
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 800fca6:	2c00      	cmp	r4, #0
 800fca8:	dd24      	ble.n	800fcf4 <lv_draw_rect+0x60>
    return area_p->x2 - area_p->x1 + 1;
 800fcaa:	8886      	ldrh	r6, [r0, #4]
 800fcac:	f8b0 e000 	ldrh.w	lr, [r0]
 800fcb0:	1c75      	adds	r5, r6, #1
 800fcb2:	eba5 050e 	sub.w	r5, r5, lr
 800fcb6:	b22d      	sxth	r5, r5
 800fcb8:	2d00      	cmp	r5, #0
 800fcba:	dd1b      	ble.n	800fcf4 <lv_draw_rect+0x60>
 800fcbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fcbe:	4692      	mov	sl, r2
    if(style->body.shadow.width != 0) {
 800fcc0:	f9b2 301c 	ldrsh.w	r3, [r2, #28]
 800fcc4:	66b9      	str	r1, [r7, #104]	; 0x68
 800fcc6:	6638      	str	r0, [r7, #96]	; 0x60
 800fcc8:	b9c3      	cbnz	r3, 800fcfc <lv_draw_rect+0x68>
    if(style->body.empty == 0 && style->body.opa >= LV_OPA_MIN) {
 800fcca:	f89a 3026 	ldrb.w	r3, [sl, #38]	; 0x26
 800fcce:	07da      	lsls	r2, r3, #31
 800fcd0:	d404      	bmi.n	800fcdc <lv_draw_rect+0x48>
 800fcd2:	f89a 600e 	ldrb.w	r6, [sl, #14]
 800fcd6:	2e0f      	cmp	r6, #15
 800fcd8:	f200 814a 	bhi.w	800ff70 <lv_draw_rect+0x2dc>
    if(style->body.border.width != 0 && style->body.border.part != LV_BORDER_NONE && style->body.border.opa >= LV_OPA_MIN) {
 800fcdc:	f9ba 3014 	ldrsh.w	r3, [sl, #20]
 800fce0:	b143      	cbz	r3, 800fcf4 <lv_draw_rect+0x60>
 800fce2:	f89a 4016 	ldrb.w	r4, [sl, #22]
 800fce6:	b12c      	cbz	r4, 800fcf4 <lv_draw_rect+0x60>
 800fce8:	f89a 2017 	ldrb.w	r2, [sl, #23]
 800fcec:	2a0f      	cmp	r2, #15
 800fcee:	66fa      	str	r2, [r7, #108]	; 0x6c
 800fcf0:	f200 8204 	bhi.w	80100fc <lv_draw_rect+0x468>
}
 800fcf4:	37a4      	adds	r7, #164	; 0xa4
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(r >= (w >> 1)) {
 800fcfc:	106b      	asrs	r3, r5, #1
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800fcfe:	8995      	ldrh	r5, [r2, #12]
    if(r >= (w >> 1)) {
 800fd00:	429d      	cmp	r5, r3
 800fd02:	db04      	blt.n	800fd0e <lv_draw_rect+0x7a>
        if(r != 0) r--;
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	f000 84ca 	beq.w	801069e <lv_draw_rect+0xa0a>
 800fd0a:	1e5d      	subs	r5, r3, #1
 800fd0c:	b2ad      	uxth	r5, r5
    if(r >= (h >> 1)) {
 800fd0e:	1064      	asrs	r4, r4, #1
 800fd10:	42ac      	cmp	r4, r5
 800fd12:	dc04      	bgt.n	800fd1e <lv_draw_rect+0x8a>
        if(r != 0) r--;
 800fd14:	2c00      	cmp	r4, #0
 800fd16:	f000 84ca 	beq.w	80106ae <lv_draw_rect+0xa1a>
 800fd1a:	3c01      	subs	r4, #1
 800fd1c:	b2a5      	uxth	r5, r4
    if(r > 0) r -= LV_ANTIALIAS;
 800fd1e:	b10d      	cbz	r5, 800fd24 <lv_draw_rect+0x90>
 800fd20:	3d01      	subs	r5, #1
 800fd22:	b2ad      	uxth	r5, r5
    memcpy(dest, src, sizeof(lv_area_t));
 800fd24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fd26:	f107 0378 	add.w	r3, r7, #120	; 0x78
    area_tmp.x1 += radius;
 800fd2a:	44ae      	add	lr, r5
    area_tmp.x2 -= radius;
 800fd2c:	1b76      	subs	r6, r6, r5
 800fd2e:	6810      	ldr	r0, [r2, #0]
 800fd30:	6851      	ldr	r1, [r2, #4]
 800fd32:	c303      	stmia	r3!, {r0, r1}
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800fd34:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800fd38:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    area_tmp.x1 += radius;
 800fd3a:	f8a7 e078 	strh.w	lr, [r7, #120]	; 0x78
    area_tmp.x2 -= radius;
 800fd3e:	f8a7 607c 	strh.w	r6, [r7, #124]	; 0x7c
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800fd42:	f002 ff49 	bl	8012bd8 <lv_area_is_in>
 800fd46:	2800      	cmp	r0, #0
 800fd48:	d1bf      	bne.n	800fcca <lv_draw_rect+0x36>
 800fd4a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800fd4c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800fd50:	6808      	ldr	r0, [r1, #0]
 800fd52:	6849      	ldr	r1, [r1, #4]
 800fd54:	c303      	stmia	r3!, {r0, r1}
    area_tmp.y1 += radius;
 800fd56:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800fd5a:	f107 0178 	add.w	r1, r7, #120	; 0x78
    area_tmp.y2 -= radius;
 800fd5e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
    area_tmp.y1 += radius;
 800fd62:	442a      	add	r2, r5
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800fd64:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    area_tmp.y2 -= radius;
 800fd66:	1b5d      	subs	r5, r3, r5
    area_tmp.y1 += radius;
 800fd68:	f8a7 207a 	strh.w	r2, [r7, #122]	; 0x7a
    area_tmp.y2 -= radius;
 800fd6c:	f8a7 507e 	strh.w	r5, [r7, #126]	; 0x7e
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800fd70:	f002 ff32 	bl	8012bd8 <lv_area_is_in>
 800fd74:	2800      	cmp	r0, #0
 800fd76:	d1a8      	bne.n	800fcca <lv_draw_rect+0x36>
    if(style->body.shadow.type == LV_SHADOW_FULL) {
 800fd78:	f89a 101e 	ldrb.w	r1, [sl, #30]
 800fd7c:	2901      	cmp	r1, #1
 800fd7e:	f001 824a 	beq.w	8011216 <lv_draw_rect+0x1582>
    } else if(style->body.shadow.type == LV_SHADOW_BOTTOM) {
 800fd82:	2900      	cmp	r1, #0
 800fd84:	d1a1      	bne.n	800fcca <lv_draw_rect+0x36>
    return area_p->x2 - area_p->x1 + 1;
 800fd86:	6e38      	ldr	r0, [r7, #96]	; 0x60
{
 800fd88:	f8c7 d020 	str.w	sp, [r7, #32]
 800fd8c:	8882      	ldrh	r2, [r0, #4]
 800fd8e:	8801      	ldrh	r1, [r0, #0]
 800fd90:	3201      	adds	r2, #1
    return area_p->y2 - area_p->y1 + 1;
 800fd92:	88c3      	ldrh	r3, [r0, #6]
 800fd94:	8840      	ldrh	r0, [r0, #2]
    return area_p->x2 - area_p->x1 + 1;
 800fd96:	1a52      	subs	r2, r2, r1
    return area_p->y2 - area_p->y1 + 1;
 800fd98:	3301      	adds	r3, #1
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800fd9a:	f8ba 100c 	ldrh.w	r1, [sl, #12]
    if(r >= (w >> 1)) {
 800fd9e:	f342 024e 	sbfx	r2, r2, #1, #15
 800fda2:	1a1b      	subs	r3, r3, r0
    lv_coord_t swidth = style->body.shadow.width;
 800fda4:	f9ba 501c 	ldrsh.w	r5, [sl, #28]
    if(r >= (w >> 1)) {
 800fda8:	4291      	cmp	r1, r2
 800fdaa:	b21b      	sxth	r3, r3
 800fdac:	db05      	blt.n	800fdba <lv_draw_rect+0x126>
        r = (w >> 1);
 800fdae:	b292      	uxth	r2, r2
        if(r != 0) r--;
 800fdb0:	2a00      	cmp	r2, #0
 800fdb2:	f001 8226 	beq.w	8011202 <lv_draw_rect+0x156e>
 800fdb6:	3a01      	subs	r2, #1
 800fdb8:	b291      	uxth	r1, r2
    if(r >= (h >> 1)) {
 800fdba:	105b      	asrs	r3, r3, #1
 800fdbc:	428b      	cmp	r3, r1
 800fdbe:	dc05      	bgt.n	800fdcc <lv_draw_rect+0x138>
        r = (h >> 1);
 800fdc0:	b29b      	uxth	r3, r3
        if(r != 0) r--;
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	f001 8221 	beq.w	801120a <lv_draw_rect+0x1576>
 800fdc8:	3b01      	subs	r3, #1
 800fdca:	b299      	uxth	r1, r3
    if(r > 0) r -= LV_ANTIALIAS;
 800fdcc:	2900      	cmp	r1, #0
 800fdce:	f001 821c 	beq.w	801120a <lv_draw_rect+0x1576>
 800fdd2:	1c8b      	adds	r3, r1, #2
 800fdd4:	b29c      	uxth	r4, r3
 800fdd6:	b223      	sxth	r3, r4
 800fdd8:	643b      	str	r3, [r7, #64]	; 0x40
 800fdda:	3301      	adds	r3, #1
 800fddc:	005b      	lsls	r3, r3, #1
    lv_coord_t curve_x[radius + 1];             /*Stores the 'x' coordinates of a quarter circle.*/
 800fdde:	3308      	adds	r3, #8
    swidth += LV_ANTIALIAS;
 800fde0:	b2ad      	uxth	r5, r5
    lv_circ_init(&circ, &circ_tmp, radius);
 800fde2:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800fde6:	f107 0288 	add.w	r2, r7, #136	; 0x88
    lv_coord_t curve_x[radius + 1];             /*Stores the 'x' coordinates of a quarter circle.*/
 800fdea:	f023 0307 	bic.w	r3, r3, #7
    swidth += LV_ANTIALIAS;
 800fdee:	1c6e      	adds	r6, r5, #1
    lv_circ_init(&circ, &circ_tmp, radius);
 800fdf0:	4608      	mov	r0, r1
 800fdf2:	4691      	mov	r9, r2
    lv_coord_t curve_x[radius + 1];             /*Stores the 'x' coordinates of a quarter circle.*/
 800fdf4:	ebad 0d03 	sub.w	sp, sp, r3
    swidth += LV_ANTIALIAS;
 800fdf8:	b233      	sxth	r3, r6
    lv_circ_init(&circ, &circ_tmp, radius);
 800fdfa:	4683      	mov	fp, r0
 800fdfc:	4611      	mov	r1, r2
    swidth += LV_ANTIALIAS;
 800fdfe:	66fb      	str	r3, [r7, #108]	; 0x6c
    lv_coord_t curve_x[radius + 1];             /*Stores the 'x' coordinates of a quarter circle.*/
 800fe00:	ab02      	add	r3, sp, #8
    lv_circ_init(&circ, &circ_tmp, radius);
 800fe02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    lv_coord_t curve_x[radius + 1];             /*Stores the 'x' coordinates of a quarter circle.*/
 800fe04:	461e      	mov	r6, r3
 800fe06:	63fb      	str	r3, [r7, #60]	; 0x3c
    lv_circ_init(&circ, &circ_tmp, radius);
 800fe08:	f002 ff04 	bl	8012c14 <lv_circ_init>
 800fe0c:	46b0      	mov	r8, r6
 800fe0e:	465e      	mov	r6, fp
 800fe10:	e00a      	b.n	800fe28 <lv_draw_rect+0x194>
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 800fe12:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
        lv_circ_next(&circ, &circ_tmp);
 800fe16:	4630      	mov	r0, r6
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 800fe18:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 800fe1c:	f828 3012 	strh.w	r3, [r8, r2, lsl #1]
        curve_x[LV_CIRC_OCT2_Y(circ)] = LV_CIRC_OCT2_X(circ);
 800fe20:	f828 2013 	strh.w	r2, [r8, r3, lsl #1]
        lv_circ_next(&circ, &circ_tmp);
 800fe24:	f002 ff0a 	bl	8012c3c <lv_circ_next>
    while(lv_circ_cont(&circ)) {
 800fe28:	4630      	mov	r0, r6
 800fe2a:	f002 fefd 	bl	8012c28 <lv_circ_cont>
        lv_circ_next(&circ, &circ_tmp);
 800fe2e:	4649      	mov	r1, r9
    while(lv_circ_cont(&circ)) {
 800fe30:	2800      	cmp	r0, #0
 800fe32:	d1ee      	bne.n	800fe12 <lv_draw_rect+0x17e>
    lv_opa_t line_1d_blur[swidth];
 800fe34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t) style->body.opa * opa_scale) >> 8;
 800fe36:	f89a 000e 	ldrb.w	r0, [sl, #14]
    lv_opa_t line_1d_blur[swidth];
 800fe3a:	3307      	adds	r3, #7
 800fe3c:	f023 0307 	bic.w	r3, r3, #7
 800fe40:	ebad 0d03 	sub.w	sp, sp, r3
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t) style->body.opa * opa_scale) >> 8;
 800fe44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fe46:	2bff      	cmp	r3, #255	; 0xff
    lv_opa_t line_1d_blur[swidth];
 800fe48:	f10d 0b08 	add.w	fp, sp, #8
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t) style->body.opa * opa_scale) >> 8;
 800fe4c:	d003      	beq.n	800fe56 <lv_draw_rect+0x1c2>
 800fe4e:	fb00 f003 	mul.w	r0, r0, r3
 800fe52:	f3c0 2007 	ubfx	r0, r0, #8, #8
    for(col = 0; col < swidth; col++) {
 800fe56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	dd0d      	ble.n	800fe78 <lv_draw_rect+0x1e4>
 800fe5c:	461e      	mov	r6, r3
 800fe5e:	445d      	add	r5, fp
 800fe60:	fb10 f203 	smulbb	r2, r0, r3
 800fe64:	f10b 31ff 	add.w	r1, fp, #4294967295
        line_1d_blur[col] = (uint32_t)((uint32_t)(swidth - col) * opa / 2) / (swidth);
 800fe68:	0853      	lsrs	r3, r2, #1
 800fe6a:	1a12      	subs	r2, r2, r0
 800fe6c:	fbb3 f3f6 	udiv	r3, r3, r6
 800fe70:	f801 3f01 	strb.w	r3, [r1, #1]!
    for(col = 0; col < swidth; col++) {
 800fe74:	428d      	cmp	r5, r1
 800fe76:	d1f7      	bne.n	800fe68 <lv_draw_rect+0x1d4>
    ofs_l.x = coords->x1 + radius;
 800fe78:	6e39      	ldr	r1, [r7, #96]	; 0x60
    ofs_l.y = coords->y2 - radius + 1 - LV_ANTIALIAS;
 800fe7a:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
    ofs_l.x = coords->x1 + radius;
 800fe7e:	880a      	ldrh	r2, [r1, #0]
    ofs_l.y = coords->y2 - radius + 1 - LV_ANTIALIAS;
 800fe80:	4618      	mov	r0, r3
 800fe82:	61fb      	str	r3, [r7, #28]
    ofs_l.x = coords->x1 + radius;
 800fe84:	4422      	add	r2, r4
    ofs_r.x = coords->x2 - radius;
 800fe86:	888b      	ldrh	r3, [r1, #4]
    ofs_l.y = coords->y2 - radius + 1 - LV_ANTIALIAS;
 800fe88:	1b01      	subs	r1, r0, r4
    ofs_l.x = coords->x1 + radius;
 800fe8a:	b292      	uxth	r2, r2
    ofs_r.x = coords->x2 - radius;
 800fe8c:	1b1c      	subs	r4, r3, r4
    ofs_l.y = coords->y2 - radius + 1 - LV_ANTIALIAS;
 800fe8e:	b28b      	uxth	r3, r1
    ofs_l.x = coords->x1 + radius;
 800fe90:	62ba      	str	r2, [r7, #40]	; 0x28
    ofs_l.y = coords->y2 - radius + 1 - LV_ANTIALIAS;
 800fe92:	637b      	str	r3, [r7, #52]	; 0x34
    ofs_l.x = coords->x1 + radius;
 800fe94:	b213      	sxth	r3, r2
 800fe96:	63bb      	str	r3, [r7, #56]	; 0x38
    ofs_r.x = coords->x2 - radius;
 800fe98:	b2a3      	uxth	r3, r4
 800fe9a:	627b      	str	r3, [r7, #36]	; 0x24
    for(col = 0; col <= radius; col++) {
 800fe9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	f2c1 84fd 	blt.w	801189e <lv_draw_rect+0x1c0a>
        point_r.x = ofs_r.x + col;
 800fea4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fea6:	2200      	movs	r2, #0
        point_l.y = ofs_l.y + curve_x[col];
 800fea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        point_r.x = ofs_r.x + col;
 800feaa:	b201      	sxth	r1, r0
 800feac:	653a      	str	r2, [r7, #80]	; 0x50
        point_l.y = ofs_l.y + curve_x[col];
 800feae:	881b      	ldrh	r3, [r3, #0]
        point_r.x = ofs_r.x + col;
 800feb0:	4614      	mov	r4, r2
 800feb2:	6579      	str	r1, [r7, #84]	; 0x54
        point_l.x = ofs_l.x - col ;
 800feb4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800feb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800feb8:	65b9      	str	r1, [r7, #88]	; 0x58
        point_l.y = ofs_l.y + curve_x[col];
 800feba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800febc:	3a01      	subs	r2, #1
 800febe:	f8d7 9068 	ldr.w	r9, [r7, #104]	; 0x68
 800fec2:	440b      	add	r3, r1
 800fec4:	633a      	str	r2, [r7, #48]	; 0x30
 800fec6:	b21b      	sxth	r3, r3
 800fec8:	667b      	str	r3, [r7, #100]	; 0x64
 800feca:	4603      	mov	r3, r0
 800fecc:	3301      	adds	r3, #1
 800fece:	62fb      	str	r3, [r7, #44]	; 0x2c
        for(d = 0; d < swidth; d++) {
 800fed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fed2:	b224      	sxth	r4, r4
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	dd27      	ble.n	800ff28 <lv_draw_rect+0x294>
 800fed8:	4b86      	ldr	r3, [pc, #536]	; (80100f4 <lv_draw_rect+0x460>)
 800feda:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fedc:	681d      	ldr	r5, [r3, #0]
 800fede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fee0:	2c00      	cmp	r4, #0
 800fee2:	f000 85aa 	beq.w	8010a3a <lv_draw_rect+0xda6>
 800fee6:	4293      	cmp	r3, r2
 800fee8:	f2c1 8088 	blt.w	8010ffc <lv_draw_rect+0x1368>
 800feec:	f04f 0800 	mov.w	r8, #0
 800fef0:	4646      	mov	r6, r8
                px_opa = (uint16_t)((uint16_t)line_1d_blur[d] + line_1d_blur[d - diff]) >> 1;
 800fef2:	1b32      	subs	r2, r6, r4
 800fef4:	f81b 1006 	ldrb.w	r1, [fp, r6]
 800fef8:	fa1f f688 	uxth.w	r6, r8
            px_fp(point_l.x, point_l.y, mask, style->body.shadow.color, px_opa);
 800fefc:	f8da 3018 	ldr.w	r3, [sl, #24]
                px_opa = (uint16_t)((uint16_t)line_1d_blur[d] + line_1d_blur[d - diff]) >> 1;
 800ff00:	f81b e002 	ldrb.w	lr, [fp, r2]
            px_fp(point_l.x, point_l.y, mask, style->body.shadow.color, px_opa);
 800ff04:	464a      	mov	r2, r9
 800ff06:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ff08:	f108 0801 	add.w	r8, r8, #1
                px_opa = (uint16_t)((uint16_t)line_1d_blur[d] + line_1d_blur[d - diff]) >> 1;
 800ff0c:	448e      	add	lr, r1
            px_fp(point_l.x, point_l.y, mask, style->body.shadow.color, px_opa);
 800ff0e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ff10:	f3ce 0e47 	ubfx	lr, lr, #1, #8
 800ff14:	1871      	adds	r1, r6, r1
        for(d = 0; d < swidth; d++) {
 800ff16:	3601      	adds	r6, #1
            px_fp(point_l.x, point_l.y, mask, style->body.shadow.color, px_opa);
 800ff18:	b209      	sxth	r1, r1
 800ff1a:	f8cd e000 	str.w	lr, [sp]
 800ff1e:	47a8      	blx	r5
        for(d = 0; d < swidth; d++) {
 800ff20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff22:	b2b6      	uxth	r6, r6
 800ff24:	42b3      	cmp	r3, r6
 800ff26:	dce4      	bgt.n	800fef2 <lv_draw_rect+0x25e>
 800ff28:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
    for(col = 0; col <= radius; col++) {
 800ff2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ff2e:	1c53      	adds	r3, r2, #1
 800ff30:	b21b      	sxth	r3, r3
 800ff32:	428b      	cmp	r3, r1
 800ff34:	f301 80e8 	bgt.w	8011108 <lv_draw_rect+0x1474>
        point_l.y = ofs_l.y + curve_x[col];
 800ff38:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ff3a:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800ff3c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800ff3e:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
 800ff42:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800ff46:	1aa4      	subs	r4, r4, r2
 800ff48:	442a      	add	r2, r5
 800ff4a:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 800ff4c:	b212      	sxth	r2, r2
 800ff4e:	440d      	add	r5, r1
 800ff50:	b224      	sxth	r4, r4
 800ff52:	657a      	str	r2, [r7, #84]	; 0x54
 800ff54:	b22a      	sxth	r2, r5
 800ff56:	65bc      	str	r4, [r7, #88]	; 0x58
 800ff58:	667a      	str	r2, [r7, #100]	; 0x64
        int16_t diff = col == 0 ? 0 : curve_x[col - 1] - curve_x[col];
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	f001 84a1 	beq.w	80118a2 <lv_draw_rect+0x1c0e>
 800ff60:	f830 4c02 	ldrh.w	r4, [r0, #-2]
 800ff64:	1a64      	subs	r4, r4, r1
 800ff66:	b2a4      	uxth	r4, r4
 800ff68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff6a:	3301      	adds	r3, #1
 800ff6c:	653b      	str	r3, [r7, #80]	; 0x50
 800ff6e:	e7af      	b.n	800fed0 <lv_draw_rect+0x23c>
 800ff70:	6e39      	ldr	r1, [r7, #96]	; 0x60
    uint16_t radius = style->body.radius;
 800ff72:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
 800ff76:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 800ff7a:	f9b1 4000 	ldrsh.w	r4, [r1]
    return area_p->x2 - area_p->x1 + 1;
 800ff7e:	1c68      	adds	r0, r5, #1
 800ff80:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
    return area_p->y2 - area_p->y1 + 1;
 800ff84:	f8b1 c002 	ldrh.w	ip, [r1, #2]
 800ff88:	b291      	uxth	r1, r2
    return area_p->x2 - area_p->x1 + 1;
 800ff8a:	1b00      	subs	r0, r0, r4
    return area_p->y2 - area_p->y1 + 1;
 800ff8c:	fa1f fb83 	uxth.w	fp, r3
    lv_color_t mcolor = style->body.main_color;
 800ff90:	f8da e004 	ldr.w	lr, [sl, #4]
    return area_p->x2 - area_p->x1 + 1;
 800ff94:	b200      	sxth	r0, r0
    return area_p->y2 - area_p->y1 + 1;
 800ff96:	f10b 0801 	add.w	r8, fp, #1
    lv_color_t gcolor = style->body.grad_color;
 800ff9a:	f8da 9008 	ldr.w	r9, [sl, #8]
    return area_p->x2 - area_p->x1 + 1;
 800ff9e:	66f8      	str	r0, [r7, #108]	; 0x6c
    return area_p->y2 - area_p->y1 + 1;
 800ffa0:	eba8 080c 	sub.w	r8, r8, ip
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t) style->body.opa * opa_scale) >> 8;
 800ffa4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800ffa6:	fa0f f888 	sxth.w	r8, r8
 800ffaa:	28ff      	cmp	r0, #255	; 0xff
 800ffac:	d003      	beq.n	800ffb6 <lv_draw_rect+0x322>
 800ffae:	fb06 f600 	mul.w	r6, r6, r0
 800ffb2:	f3c6 2607 	ubfx	r6, r6, #8, #8
    if(r >= (w >> 1)) {
 800ffb6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ffb8:	1040      	asrs	r0, r0, #1
 800ffba:	4281      	cmp	r1, r0
 800ffbc:	db05      	blt.n	800ffca <lv_draw_rect+0x336>
        r = (w >> 1);
 800ffbe:	b281      	uxth	r1, r0
        if(r != 0) r--;
 800ffc0:	2900      	cmp	r1, #0
 800ffc2:	f000 872c 	beq.w	8010e1e <lv_draw_rect+0x118a>
 800ffc6:	3901      	subs	r1, #1
 800ffc8:	b289      	uxth	r1, r1
    if(r >= (h >> 1)) {
 800ffca:	ea4f 0068 	mov.w	r0, r8, asr #1
 800ffce:	4288      	cmp	r0, r1
 800ffd0:	dc03      	bgt.n	800ffda <lv_draw_rect+0x346>
        r = (h >> 1);
 800ffd2:	b281      	uxth	r1, r0
        if(r != 0) r--;
 800ffd4:	b121      	cbz	r1, 800ffe0 <lv_draw_rect+0x34c>
 800ffd6:	3901      	subs	r1, #1
 800ffd8:	b289      	uxth	r1, r1
    if(r > 0) r -= LV_ANTIALIAS;
 800ffda:	b109      	cbz	r1, 800ffe0 <lv_draw_rect+0x34c>
 800ffdc:	3901      	subs	r1, #1
 800ffde:	b289      	uxth	r1, r1
    if(radius > height / 2)  return;
 800ffe0:	f1b8 0f00 	cmp.w	r8, #0
 800ffe4:	4640      	mov	r0, r8
 800ffe6:	bfb8      	it	lt
 800ffe8:	f108 0001 	addlt.w	r0, r8, #1
 800ffec:	ebb1 0f60 	cmp.w	r1, r0, asr #1
 800fff0:	dc75      	bgt.n	80100de <lv_draw_rect+0x44a>
    if(mcolor.full == gcolor.full) {
 800fff2:	45ce      	cmp	lr, r9
    work_area.x1 = coords->x1;
 800fff4:	f8a7 4098 	strh.w	r4, [r7, #152]	; 0x98
    work_area.x2 = coords->x2;
 800fff8:	f8a7 509c 	strh.w	r5, [r7, #156]	; 0x9c
    if(mcolor.full == gcolor.full) {
 800fffc:	f000 87bf 	beq.w	8010f7e <lv_draw_rect+0x12ea>
        lv_coord_t row_start = coords->y1 + radius;
 8010000:	eb0c 0401 	add.w	r4, ip, r1
        lv_coord_t row_end = coords->y2 - radius;
 8010004:	ebab 0501 	sub.w	r5, fp, r1
        lv_coord_t row_start = coords->y1 + radius;
 8010008:	b2a4      	uxth	r4, r4
        lv_coord_t row_end = coords->y2 - radius;
 801000a:	b2ad      	uxth	r5, r5
        if(style->body.radius != 0) {
 801000c:	b10a      	cbz	r2, 8010012 <lv_draw_rect+0x37e>
            row_start += 2;
 801000e:	3402      	adds	r4, #2
            row_end -= 2;
 8010010:	3d02      	subs	r5, #2
            row_start += 2;
 8010012:	b224      	sxth	r4, r4
            row_end -= 2;
 8010014:	b22d      	sxth	r5, r5
 8010016:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        for(row = row_start; row <= row_end; row ++) {
 801001a:	42ac      	cmp	r4, r5
 801001c:	dc5f      	bgt.n	80100de <lv_draw_rect+0x44a>
 801001e:	4a36      	ldr	r2, [pc, #216]	; (80100f8 <lv_draw_rect+0x464>)
 8010020:	f3ce 4107 	ubfx	r1, lr, #16, #8
 8010024:	f8c7 a040 	str.w	sl, [r7, #64]	; 0x40
 8010028:	6812      	ldr	r2, [r2, #0]
 801002a:	65b9      	str	r1, [r7, #88]	; 0x58
 801002c:	f3c9 4107 	ubfx	r1, r9, #16, #8
 8010030:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010032:	fa5f f28e 	uxtb.w	r2, lr
 8010036:	6579      	str	r1, [r7, #84]	; 0x54
 8010038:	f3ce 2107 	ubfx	r1, lr, #8, #8
 801003c:	64ba      	str	r2, [r7, #72]	; 0x48
 801003e:	f3c9 2207 	ubfx	r2, r9, #8, #8
 8010042:	6539      	str	r1, [r7, #80]	; 0x50
 8010044:	fa5f f989 	uxtb.w	r9, r9
 8010048:	64fa      	str	r2, [r7, #76]	; 0x4c
 801004a:	f107 0298 	add.w	r2, r7, #152	; 0x98
 801004e:	647d      	str	r5, [r7, #68]	; 0x44
 8010050:	667a      	str	r2, [r7, #100]	; 0x64
 8010052:	461a      	mov	r2, r3
 8010054:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8010058:	e002      	b.n	8010060 <lv_draw_rect+0x3cc>
 801005a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801005c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
            mix = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 8010060:	1b12      	subs	r2, r2, r4
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 8010062:	6cbd      	ldr	r5, [r7, #72]	; 0x48
            work_area.y1 = row;
 8010064:	f8a7 409a 	strh.w	r4, [r7, #154]	; 0x9a
            fill_fp(&work_area, mask, act_color, opa);
 8010068:	4633      	mov	r3, r6
            mix = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 801006a:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
            work_area.y2 = row;
 801006e:	f8a7 409e 	strh.w	r4, [r7, #158]	; 0x9e
 8010072:	3401      	adds	r4, #1
            fill_fp(&work_area, mask, act_color, opa);
 8010074:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010076:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8010078:	b224      	sxth	r4, r4
            mix = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 801007a:	fbb2 f2f8 	udiv	r2, r2, r8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 801007e:	b2d2      	uxtb	r2, r2
 8010080:	f1c2 0eff 	rsb	lr, r2, #255	; 0xff
 8010084:	b292      	uxth	r2, r2
 8010086:	fa1f fe8e 	uxth.w	lr, lr
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 801008a:	fb1e fb09 	smulbb	fp, lr, r9
 801008e:	fb02 bb05 	mla	fp, r2, r5, fp
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 8010092:	f8b7 504c 	ldrh.w	r5, [r7, #76]	; 0x4c
 8010096:	fb1e fc05 	smulbb	ip, lr, r5
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 801009a:	f8b7 5054 	ldrh.w	r5, [r7, #84]	; 0x54
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 801009e:	f3cb 2b07 	ubfx	fp, fp, #8, #8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 80100a2:	fb1e fe05 	smulbb	lr, lr, r5
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 80100a6:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 80100a8:	f36b 0a07 	bfi	sl, fp, #0, #8
 80100ac:	fb02 cc05 	mla	ip, r2, r5, ip
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 80100b0:	6dbd      	ldr	r5, [r7, #88]	; 0x58
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 80100b2:	f3cc 2c07 	ubfx	ip, ip, #8, #8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 80100b6:	fb02 e205 	mla	r2, r2, r5, lr
            fill_fp(&work_area, mask, act_color, opa);
 80100ba:	6efd      	ldr	r5, [r7, #108]	; 0x6c
 80100bc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80100c0:	f36c 2a0f 	bfi	sl, ip, #8, #8
 80100c4:	f362 4a17 	bfi	sl, r2, #16, #8
 80100c8:	f04a 4a7f 	orr.w	sl, sl, #4278190080	; 0xff000000
 80100cc:	4652      	mov	r2, sl
 80100ce:	47a8      	blx	r5
        for(row = row_start; row <= row_end; row ++) {
 80100d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100d2:	42a3      	cmp	r3, r4
 80100d4:	dac1      	bge.n	801005a <lv_draw_rect+0x3c6>
 80100d6:	f8d7 a040 	ldr.w	sl, [r7, #64]	; 0x40
 80100da:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
        if(style->body.radius != 0) {
 80100de:	2a00      	cmp	r2, #0
 80100e0:	f43f adfc 	beq.w	800fcdc <lv_draw_rect+0x48>
            lv_draw_rect_main_corner(coords, mask, style, opa_scale);
 80100e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80100e6:	4652      	mov	r2, sl
 80100e8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80100ea:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80100ec:	f7fe fefa 	bl	800eee4 <lv_draw_rect_main_corner>
 80100f0:	e5f4      	b.n	800fcdc <lv_draw_rect+0x48>
 80100f2:	bf00      	nop
 80100f4:	0808b610 	.word	0x0808b610
 80100f8:	0808b60c 	.word	0x0808b60c
 80100fc:	6e39      	ldr	r1, [r7, #96]	; 0x60
    uint16_t bwidth = style->body.border.width;
 80100fe:	fa1f f883 	uxth.w	r8, r3
 8010102:	f9b1 c004 	ldrsh.w	ip, [r1, #4]
 8010106:	f9b1 3000 	ldrsh.w	r3, [r1]
    return area_p->x2 - area_p->x1 + 1;
 801010a:	fa1f f58c 	uxth.w	r5, ip
 801010e:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
    return area_p->y2 - area_p->y1 + 1;
 8010112:	f8b1 e006 	ldrh.w	lr, [r1, #6]
    return area_p->x2 - area_p->x1 + 1;
 8010116:	fa1f f983 	uxth.w	r9, r3
 801011a:	653b      	str	r3, [r7, #80]	; 0x50
 801011c:	1c6b      	adds	r3, r5, #1
    return area_p->y2 - area_p->y1 + 1;
 801011e:	b290      	uxth	r0, r2
 8010120:	64fa      	str	r2, [r7, #76]	; 0x4c
    return area_p->x2 - area_p->x1 + 1;
 8010122:	eba3 0309 	sub.w	r3, r3, r9
    return area_p->y2 - area_p->y1 + 1;
 8010126:	f10e 0201 	add.w	r2, lr, #1
    uint16_t radius = style->body.radius;
 801012a:	f9ba 100c 	ldrsh.w	r1, [sl, #12]
 801012e:	1a12      	subs	r2, r2, r0
    return area_p->x2 - area_p->x1 + 1;
 8010130:	b21b      	sxth	r3, r3
 8010132:	b28e      	uxth	r6, r1
 8010134:	667b      	str	r3, [r7, #100]	; 0x64
    return area_p->y2 - area_p->y1 + 1;
 8010136:	b213      	sxth	r3, r2
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.border.opa : (uint16_t)((uint16_t) style->body.border.opa * opa_scale) >> 8;
 8010138:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801013a:	657b      	str	r3, [r7, #84]	; 0x54
 801013c:	2aff      	cmp	r2, #255	; 0xff
 801013e:	d005      	beq.n	801014c <lv_draw_rect+0x4b8>
 8010140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010142:	fb03 fb02 	mul.w	fp, r3, r2
 8010146:	f3cb 2307 	ubfx	r3, fp, #8, #8
 801014a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if(r >= (w >> 1)) {
 801014c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    bwidth--;
 801014e:	f108 3bff 	add.w	fp, r8, #4294967295
    lv_color_t color = style->body.border.color;
 8010152:	f8da 2010 	ldr.w	r2, [sl, #16]
    if(r >= (w >> 1)) {
 8010156:	105b      	asrs	r3, r3, #1
    lv_color_t color = style->body.border.color;
 8010158:	65ba      	str	r2, [r7, #88]	; 0x58
    bwidth--;
 801015a:	fa1f fb8b 	uxth.w	fp, fp
    if(r >= (w >> 1)) {
 801015e:	429e      	cmp	r6, r3
 8010160:	db05      	blt.n	801016e <lv_draw_rect+0x4da>
        r = (w >> 1);
 8010162:	b29e      	uxth	r6, r3
        if(r != 0) r--;
 8010164:	2e00      	cmp	r6, #0
 8010166:	f000 8653 	beq.w	8010e10 <lv_draw_rect+0x117c>
 801016a:	3e01      	subs	r6, #1
 801016c:	b2b6      	uxth	r6, r6
    if(r >= (h >> 1)) {
 801016e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010170:	105a      	asrs	r2, r3, #1
 8010172:	42b2      	cmp	r2, r6
 8010174:	dc03      	bgt.n	801017e <lv_draw_rect+0x4ea>
        r = (h >> 1);
 8010176:	b296      	uxth	r6, r2
        if(r != 0) r--;
 8010178:	b126      	cbz	r6, 8010184 <lv_draw_rect+0x4f0>
 801017a:	3e01      	subs	r6, #1
 801017c:	b2b6      	uxth	r6, r6
    if(r > 0) r -= LV_ANTIALIAS;
 801017e:	b10e      	cbz	r6, 8010184 <lv_draw_rect+0x4f0>
 8010180:	3e01      	subs	r6, #1
 8010182:	b2b6      	uxth	r6, r6
    if(radius < bwidth) {
 8010184:	45b3      	cmp	fp, r6
 8010186:	f240 828d 	bls.w	80106a4 <lv_draw_rect+0xa10>
        length_corr = bwidth - radius - LV_ANTIALIAS;
 801018a:	f1a8 0202 	sub.w	r2, r8, #2
        corner_size = bwidth;
 801018e:	fa0f f38b 	sxth.w	r3, fp
        length_corr = bwidth - radius - LV_ANTIALIAS;
 8010192:	1b92      	subs	r2, r2, r6
 8010194:	b212      	sxth	r2, r2
 8010196:	667a      	str	r2, [r7, #100]	; 0x64
    if(style->body.radius == 0) {
 8010198:	2900      	cmp	r1, #0
 801019a:	f040 83d7 	bne.w	801094c <lv_draw_rect+0xcb8>
        if(part & LV_BORDER_TOP) {
 801019e:	f014 0902 	ands.w	r9, r4, #2
 80101a2:	f040 8677 	bne.w	8010e94 <lv_draw_rect+0x1200>
        if(part & LV_BORDER_RIGHT) {
 80101a6:	0722      	lsls	r2, r4, #28
 80101a8:	f100 877a 	bmi.w	80110a0 <lv_draw_rect+0x140c>
        if(part & LV_BORDER_LEFT) {
 80101ac:	0763      	lsls	r3, r4, #29
 80101ae:	f004 0501 	and.w	r5, r4, #1
 80101b2:	d521      	bpl.n	80101f8 <lv_draw_rect+0x564>
            work_area.x1 = coords->x1;
 80101b4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80101b6:	f9b0 2000 	ldrsh.w	r2, [r0]
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 80101ba:	8843      	ldrh	r3, [r0, #2]
 80101bc:	f107 0098 	add.w	r0, r7, #152	; 0x98
            work_area.x1 = coords->x1;
 80101c0:	f8a7 2098 	strh.w	r2, [r7, #152]	; 0x98
 80101c4:	6678      	str	r0, [r7, #100]	; 0x64
            work_area.x2 = coords->x1 + bwidth;
 80101c6:	eb0b 0002 	add.w	r0, fp, r2
 80101ca:	4a6d      	ldr	r2, [pc, #436]	; (8010380 <lv_draw_rect+0x6ec>)
 80101cc:	f8a7 009c 	strh.w	r0, [r7, #156]	; 0x9c
 80101d0:	657a      	str	r2, [r7, #84]	; 0x54
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 80101d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80101d4:	2d00      	cmp	r5, #0
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 80101d6:	4419      	add	r1, r3
            fill_fp(&work_area, mask, color, opa);
 80101d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 80101da:	88d6      	ldrh	r6, [r2, #6]
 80101dc:	bf14      	ite	ne
 80101de:	4642      	movne	r2, r8
 80101e0:	2200      	moveq	r2, #0
            fill_fp(&work_area, mask, color, opa);
 80101e2:	681c      	ldr	r4, [r3, #0]
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 80101e4:	f8a7 109a 	strh.w	r1, [r7, #154]	; 0x9a
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 80101e8:	1ab6      	subs	r6, r6, r2
            fill_fp(&work_area, mask, color, opa);
 80101ea:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80101ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80101f0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 80101f2:	f8a7 609e 	strh.w	r6, [r7, #158]	; 0x9e
            fill_fp(&work_area, mask, color, opa);
 80101f6:	47a0      	blx	r4
        if(part & LV_BORDER_BOTTOM) {
 80101f8:	2d00      	cmp	r5, #0
 80101fa:	f040 86e2 	bne.w	8010fc2 <lv_draw_rect+0x132e>
 80101fe:	f9ba 500c 	ldrsh.w	r5, [sl, #12]
        if(style->body.radius != 0) {
 8010202:	2d00      	cmp	r5, #0
 8010204:	f43f ad76 	beq.w	800fcf4 <lv_draw_rect+0x60>
    lv_color_t color = style->body.border.color;
 8010208:	f8da 3010 	ldr.w	r3, [sl, #16]
    uint16_t radius = style->body.radius ;
 801020c:	b2ad      	uxth	r5, r5
    uint16_t bwidth = style->body.border.width;
 801020e:	f8ba 6014 	ldrh.w	r6, [sl, #20]
    lv_color_t color = style->body.border.color;
 8010212:	623b      	str	r3, [r7, #32]
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.border.opa : (uint16_t)((uint16_t) style->body.border.opa * opa_scale) >> 8;
 8010214:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    lv_border_part_t part = style->body.border.part;
 8010216:	f89a 4016 	ldrb.w	r4, [sl, #22]
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.border.opa : (uint16_t)((uint16_t) style->body.border.opa * opa_scale) >> 8;
 801021a:	2bff      	cmp	r3, #255	; 0xff
 801021c:	f000 874d 	beq.w	80110ba <lv_draw_rect+0x1426>
 8010220:	461a      	mov	r2, r3
 8010222:	f89a 3017 	ldrb.w	r3, [sl, #23]
 8010226:	fb03 f302 	mul.w	r3, r3, r2
 801022a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801022e:	667b      	str	r3, [r7, #100]	; 0x64
    return area_p->x2 - area_p->x1 + 1;
 8010230:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8010232:	f1c6 0602 	rsb	r6, r6, #2
 8010236:	8883      	ldrh	r3, [r0, #4]
 8010238:	b2b6      	uxth	r6, r6
 801023a:	f8b0 8000 	ldrh.w	r8, [r0]
 801023e:	1c59      	adds	r1, r3, #1
    return area_p->y2 - area_p->y1 + 1;
 8010240:	f8b0 e006 	ldrh.w	lr, [r0, #6]
 8010244:	f8b0 c002 	ldrh.w	ip, [r0, #2]
    return area_p->x2 - area_p->x1 + 1;
 8010248:	eba1 0108 	sub.w	r1, r1, r8
    return area_p->y2 - area_p->y1 + 1;
 801024c:	f10e 0201 	add.w	r2, lr, #1
    if(r >= (w >> 1)) {
 8010250:	f341 014e 	sbfx	r1, r1, #1, #15
 8010254:	eba2 020c 	sub.w	r2, r2, ip
 8010258:	428d      	cmp	r5, r1
 801025a:	b212      	sxth	r2, r2
 801025c:	f2c0 85e6 	blt.w	8010e2c <lv_draw_rect+0x1198>
        r = (w >> 1);
 8010260:	b28d      	uxth	r5, r1
        if(r != 0) r--;
 8010262:	2d00      	cmp	r5, #0
 8010264:	f000 85e8 	beq.w	8010e38 <lv_draw_rect+0x11a4>
 8010268:	3d01      	subs	r5, #1
    if(r >= (h >> 1)) {
 801026a:	1052      	asrs	r2, r2, #1
        if(r != 0) r--;
 801026c:	b2ad      	uxth	r5, r5
    if(r >= (h >> 1)) {
 801026e:	4295      	cmp	r5, r2
 8010270:	db05      	blt.n	801027e <lv_draw_rect+0x5ea>
        r = (h >> 1);
 8010272:	b295      	uxth	r5, r2
        if(r != 0) r--;
 8010274:	2d00      	cmp	r5, #0
 8010276:	f000 85e3 	beq.w	8010e40 <lv_draw_rect+0x11ac>
 801027a:	3d01      	subs	r5, #1
 801027c:	b2ad      	uxth	r5, r5
    if(r > 0) r -= LV_ANTIALIAS;
 801027e:	2d00      	cmp	r5, #0
 8010280:	f000 85de 	beq.w	8010e40 <lv_draw_rect+0x11ac>
 8010284:	3d01      	subs	r5, #1
 8010286:	b2ad      	uxth	r5, r5
 8010288:	b22a      	sxth	r2, r5
 801028a:	637a      	str	r2, [r7, #52]	; 0x34
    lb_origo.y = coords->y2 - radius - LV_ANTIALIAS;
 801028c:	f10e 3eff 	add.w	lr, lr, #4294967295
    lt_origo.x = coords->x1 + radius + LV_ANTIALIAS;
 8010290:	f108 0801 	add.w	r8, r8, #1
    rt_origo.x = coords->x2 - radius - LV_ANTIALIAS;
 8010294:	3b01      	subs	r3, #1
    lt_origo.y = coords->y1 + radius + LV_ANTIALIAS;
 8010296:	f10c 0c01 	add.w	ip, ip, #1
    lb_origo.y = coords->y2 - radius - LV_ANTIALIAS;
 801029a:	ebae 0e05 	sub.w	lr, lr, r5
    lt_origo.x = coords->x1 + radius + LV_ANTIALIAS;
 801029e:	44a8      	add	r8, r5
    lt_origo.y = coords->y1 + radius + LV_ANTIALIAS;
 80102a0:	44ac      	add	ip, r5
    rt_origo.x = coords->x2 - radius - LV_ANTIALIAS;
 80102a2:	eba3 0905 	sub.w	r9, r3, r5
    lb_origo.y = coords->y2 - radius - LV_ANTIALIAS;
 80102a6:	fa1f fe8e 	uxth.w	lr, lr
    lv_circ_init(&cir_out, &tmp_out, radius);
 80102aa:	f107 0288 	add.w	r2, r7, #136	; 0x88
    lt_origo.x = coords->x1 + radius + LV_ANTIALIAS;
 80102ae:	fa1f f388 	uxth.w	r3, r8
    lv_circ_init(&cir_out, &tmp_out, radius);
 80102b2:	f107 0178 	add.w	r1, r7, #120	; 0x78
    lb_origo.y = coords->y2 - radius - LV_ANTIALIAS;
 80102b6:	f8c7 e04c 	str.w	lr, [r7, #76]	; 0x4c
    lv_circ_init(&cir_in, &tmp_in, radius_in);
 80102ba:	f107 0e90 	add.w	lr, r7, #144	; 0x90
    lt_origo.x = coords->x1 + radius + LV_ANTIALIAS;
 80102be:	657b      	str	r3, [r7, #84]	; 0x54
    lt_origo.y = coords->y1 + radius + LV_ANTIALIAS;
 80102c0:	fa1f f38c 	uxth.w	r3, ip
    lv_circ_init(&cir_in, &tmp_in, radius_in);
 80102c4:	f8c7 e008 	str.w	lr, [r7, #8]
    rt_origo.x = coords->x2 - radius - LV_ANTIALIAS;
 80102c8:	fa1f fe89 	uxth.w	lr, r9
    lt_origo.y = coords->y1 + radius + LV_ANTIALIAS;
 80102cc:	653b      	str	r3, [r7, #80]	; 0x50
    lv_circ_init(&cir_in, &tmp_in, radius_in);
 80102ce:	f107 0380 	add.w	r3, r7, #128	; 0x80
    rt_origo.x = coords->x2 - radius - LV_ANTIALIAS;
 80102d2:	f8c7 e03c 	str.w	lr, [r7, #60]	; 0x3c
    lv_coord_t in_y_seg_start = 0;
 80102d6:	f04f 0e00 	mov.w	lr, #0
    lv_circ_init(&cir_out, &tmp_out, radius);
 80102da:	4610      	mov	r0, r2
 80102dc:	61fa      	str	r2, [r7, #28]
 80102de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    lv_coord_t radius_in = radius - bwidth;
 80102e0:	4435      	add	r5, r6
    lv_circ_init(&cir_in, &tmp_in, radius_in);
 80102e2:	60fb      	str	r3, [r7, #12]
 80102e4:	f004 0909 	and.w	r9, r4, #9
    lv_coord_t in_y_seg_start = 0;
 80102e8:	f8c7 e058 	str.w	lr, [r7, #88]	; 0x58
    lv_circ_init(&cir_out, &tmp_out, radius);
 80102ec:	f002 fc92 	bl	8012c14 <lv_circ_init>
                    px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 80102f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    lv_coord_t radius_in = radius - bwidth;
 80102f2:	b22d      	sxth	r5, r5
    lb_origo.y = coords->y2 - radius - LV_ANTIALIAS;
 80102f4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80102f8:	f004 0b05 	and.w	fp, r4, #5
                    px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 80102fc:	1c56      	adds	r6, r2, #1
    lv_coord_t out_y_seg_start = 0;
 80102fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
    lv_circ_init(&cir_in, &tmp_in, radius_in);
 8010300:	68f9      	ldr	r1, [r7, #12]
                    px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 8010302:	61be      	str	r6, [r7, #24]
    lt_origo.y = coords->y1 + radius + LV_ANTIALIAS;
 8010304:	f9b7 6050 	ldrsh.w	r6, [r7, #80]	; 0x50
    lv_coord_t out_y_seg_start = 0;
 8010308:	633a      	str	r2, [r7, #48]	; 0x30
    lv_circ_init(&cir_in, &tmp_in, radius_in);
 801030a:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
 801030e:	68b8      	ldr	r0, [r7, #8]
    lb_origo.y = coords->y2 - radius - LV_ANTIALIAS;
 8010310:	613b      	str	r3, [r7, #16]
    lv_coord_t radius_in = radius - bwidth;
 8010312:	647d      	str	r5, [r7, #68]	; 0x44
    lt_origo.y = coords->y1 + radius + LV_ANTIALIAS;
 8010314:	617e      	str	r6, [r7, #20]
    lv_circ_init(&cir_in, &tmp_in, radius_in);
 8010316:	f002 fc7d 	bl	8012c14 <lv_circ_init>
 801031a:	f004 0306 	and.w	r3, r4, #6
 801031e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010320:	f004 030a 	and.w	r3, r4, #10
 8010324:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010326:	4653      	mov	r3, sl
 8010328:	46ca      	mov	sl, r9
 801032a:	46d9      	mov	r9, fp
 801032c:	469b      	mov	fp, r3
    while(cir_out.y <= cir_out.x) {
 801032e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8010332:	461a      	mov	r2, r3
 8010334:	63bb      	str	r3, [r7, #56]	; 0x38
 8010336:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 801033a:	4293      	cmp	r3, r2
 801033c:	f2c0 8397 	blt.w	8010a6e <lv_draw_rect+0xdda>
        if(cir_in.y < cir_in.x) {
 8010340:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 8010344:	f9b7 1092 	ldrsh.w	r1, [r7, #146]	; 0x92
 8010348:	4291      	cmp	r1, r2
 801034a:	f280 821d 	bge.w	8010788 <lv_draw_rect+0xaf4>
            act_w1 = cir_out.x - cir_in.x;
 801034e:	1a99      	subs	r1, r3, r2
 8010350:	b209      	sxth	r1, r1
 8010352:	62f9      	str	r1, [r7, #44]	; 0x2c
            act_w2 = act_w1;
 8010354:	62b9      	str	r1, [r7, #40]	; 0x28
        if(out_x_last != cir_out.x) {
 8010356:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010358:	4283      	cmp	r3, r0
 801035a:	f000 80f2 	beq.w	8010542 <lv_draw_rect+0x8ae>
            lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 801035e:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8010360:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8010362:	64b9      	str	r1, [r7, #72]	; 0x48
 8010364:	1a66      	subs	r6, r4, r1
 8010366:	b236      	sxth	r6, r6
            for(i = 0; i  < seg_size; i++) {
 8010368:	2e00      	cmp	r6, #0
 801036a:	f340 854b 	ble.w	8010e04 <lv_draw_rect+0x1170>
                    px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 801036e:	b283      	uxth	r3, r0
 8010370:	69ba      	ldr	r2, [r7, #24]
            for(i = 0; i  < seg_size; i++) {
 8010372:	2400      	movs	r4, #0
                    px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 8010374:	643b      	str	r3, [r7, #64]	; 0x40
 8010376:	4413      	add	r3, r2
 8010378:	4621      	mov	r1, r4
 801037a:	637b      	str	r3, [r7, #52]	; 0x34
 801037c:	e024      	b.n	80103c8 <lv_draw_rect+0x734>
 801037e:	bf00      	nop
 8010380:	0808b60c 	.word	0x0808b60c
        uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map) - 1)) / (seg - 1);
 8010384:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 8010388:	1e70      	subs	r0, r6, #1
        return (uint32_t)((uint32_t) opa_map[id] * opa) >> 8;
 801038a:	497d      	ldr	r1, [pc, #500]	; (8010580 <lv_draw_rect+0x8ec>)
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 801038c:	f1ba 0f09 	cmp.w	sl, #9
        uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map) - 1)) / (seg - 1);
 8010390:	461a      	mov	r2, r3
 8010392:	fbb2 f3f0 	udiv	r3, r2, r0
        return (uint32_t)((uint32_t) opa_map[id] * opa) >> 8;
 8010396:	b2db      	uxtb	r3, r3
 8010398:	5ccd      	ldrb	r5, [r1, r3]
 801039a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801039e:	fb15 f503 	smulbb	r5, r5, r3
 80103a2:	ea4f 2315 	mov.w	r3, r5, lsr #8
 80103a6:	663b      	str	r3, [r7, #96]	; 0x60
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 80103a8:	d01b      	beq.n	80103e2 <lv_draw_rect+0x74e>
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 80103aa:	f1b9 0f05 	cmp.w	r9, #5
 80103ae:	d03f      	beq.n	8010430 <lv_draw_rect+0x79c>
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 80103b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103b2:	2b06      	cmp	r3, #6
 80103b4:	d067      	beq.n	8010486 <lv_draw_rect+0x7f2>
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 80103b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80103b8:	2b0a      	cmp	r3, #10
 80103ba:	f000 8091 	beq.w	80104e0 <lv_draw_rect+0x84c>
 80103be:	3401      	adds	r4, #1
            for(i = 0; i  < seg_size; i++) {
 80103c0:	b221      	sxth	r1, r4
 80103c2:	428e      	cmp	r6, r1
 80103c4:	f340 80b6 	ble.w	8010534 <lv_draw_rect+0x8a0>
                if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) {    /*Use non-linear opa mapping on the first segment*/
 80103c8:	2e05      	cmp	r6, #5
 80103ca:	dcdb      	bgt.n	8010384 <lv_draw_rect+0x6f0>
                    aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 80103cc:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 80103ce:	4630      	mov	r0, r6
 80103d0:	462a      	mov	r2, r5
 80103d2:	f7fc fcd9 	bl	800cd88 <lv_draw_aa_get_opa>
 80103d6:	1a28      	subs	r0, r5, r0
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 80103d8:	f1ba 0f09 	cmp.w	sl, #9
                    aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 80103dc:	b2c3      	uxtb	r3, r0
 80103de:	663b      	str	r3, [r7, #96]	; 0x60
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 80103e0:	d1e3      	bne.n	80103aa <lv_draw_rect+0x716>
                    px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 80103e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103e4:	fa1f f884 	uxth.w	r8, r4
 80103e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80103ea:	4866      	ldr	r0, [pc, #408]	; (8010584 <lv_draw_rect+0x8f0>)
 80103ec:	1899      	adds	r1, r3, r2
 80103ee:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 80103f0:	6800      	ldr	r0, [r0, #0]
 80103f2:	f8db 3010 	ldr.w	r3, [fp, #16]
 80103f6:	4441      	add	r1, r8
 80103f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80103fa:	9500      	str	r5, [sp, #0]
 80103fc:	4605      	mov	r5, r0
 80103fe:	b209      	sxth	r1, r1
 8010400:	f9b7 0034 	ldrsh.w	r0, [r7, #52]	; 0x34
 8010404:	633d      	str	r5, [r7, #48]	; 0x30
 8010406:	47a8      	blx	r5
                    px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask, style->body.border.color, aa_opa);
 8010408:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801040a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801040c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801040e:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 8010410:	4408      	add	r0, r1
 8010412:	1c59      	adds	r1, r3, #1
 8010414:	f8db 3010 	ldr.w	r3, [fp, #16]
 8010418:	9500      	str	r5, [sp, #0]
 801041a:	4440      	add	r0, r8
 801041c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801041e:	b200      	sxth	r0, r0
 8010420:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8010422:	4411      	add	r1, r2
 8010424:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010426:	b209      	sxth	r1, r1
 8010428:	47a8      	blx	r5
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 801042a:	f1b9 0f05 	cmp.w	r9, #5
 801042e:	d1bf      	bne.n	80103b0 <lv_draw_rect+0x71c>
                    px_fp(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask, style->body.border.color, aa_opa);
 8010430:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010432:	fa1f f884 	uxth.w	r8, r4
 8010436:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010438:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 801043a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801043c:	1a98      	subs	r0, r3, r2
 801043e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8010442:	9500      	str	r5, [sp, #0]
 8010444:	3101      	adds	r1, #1
 8010446:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010448:	eba0 0008 	sub.w	r0, r0, r8
 801044c:	4d4d      	ldr	r5, [pc, #308]	; (8010584 <lv_draw_rect+0x8f0>)
 801044e:	4411      	add	r1, r2
 8010450:	b200      	sxth	r0, r0
 8010452:	682a      	ldr	r2, [r5, #0]
 8010454:	b209      	sxth	r1, r1
 8010456:	4615      	mov	r5, r2
 8010458:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801045a:	633d      	str	r5, [r7, #48]	; 0x30
 801045c:	47a8      	blx	r5
                    px_fp(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 801045e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010460:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010462:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 8010464:	4419      	add	r1, r3
 8010466:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010468:	1e58      	subs	r0, r3, #1
 801046a:	f8db 3010 	ldr.w	r3, [fp, #16]
 801046e:	9500      	str	r5, [sp, #0]
 8010470:	4441      	add	r1, r8
 8010472:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 8010474:	b209      	sxth	r1, r1
 8010476:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010478:	1b40      	subs	r0, r0, r5
 801047a:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 801047c:	b200      	sxth	r0, r0
 801047e:	47a8      	blx	r5
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 8010480:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010482:	2b06      	cmp	r3, #6
 8010484:	d197      	bne.n	80103b6 <lv_draw_rect+0x722>
                    px_fp(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, style->body.border.color, aa_opa);
 8010486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010488:	fa1f f884 	uxth.w	r8, r4
 801048c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801048e:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 8010490:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010492:	1a99      	subs	r1, r3, r2
 8010494:	f8db 3010 	ldr.w	r3, [fp, #16]
 8010498:	9500      	str	r5, [sp, #0]
 801049a:	3801      	subs	r0, #1
 801049c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801049e:	eba1 0108 	sub.w	r1, r1, r8
 80104a2:	4d38      	ldr	r5, [pc, #224]	; (8010584 <lv_draw_rect+0x8f0>)
 80104a4:	1a80      	subs	r0, r0, r2
 80104a6:	b209      	sxth	r1, r1
 80104a8:	682a      	ldr	r2, [r5, #0]
 80104aa:	b200      	sxth	r0, r0
 80104ac:	4615      	mov	r5, r2
 80104ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80104b0:	633d      	str	r5, [r7, #48]	; 0x30
 80104b2:	47a8      	blx	r5
                    px_fp(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask, style->body.border.color, aa_opa);
 80104b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80104b6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80104b8:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 80104ba:	1ac0      	subs	r0, r0, r3
 80104bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80104be:	1e59      	subs	r1, r3, #1
 80104c0:	f8db 3010 	ldr.w	r3, [fp, #16]
 80104c4:	9500      	str	r5, [sp, #0]
 80104c6:	eba0 0008 	sub.w	r0, r0, r8
 80104ca:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 80104cc:	b200      	sxth	r0, r0
 80104ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80104d0:	1b49      	subs	r1, r1, r5
 80104d2:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 80104d4:	b209      	sxth	r1, r1
 80104d6:	47a8      	blx	r5
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 80104d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80104da:	2b0a      	cmp	r3, #10
 80104dc:	f47f af6f 	bne.w	80103be <lv_draw_rect+0x72a>
                    px_fp(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask, style->body.border.color, aa_opa);
 80104e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80104e2:	fa1f f884 	uxth.w	r8, r4
 80104e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80104e8:	3401      	adds	r4, #1
 80104ea:	18d0      	adds	r0, r2, r3
 80104ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80104ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80104f0:	1e59      	subs	r1, r3, #1
 80104f2:	f8db 3010 	ldr.w	r3, [fp, #16]
 80104f6:	9200      	str	r2, [sp, #0]
 80104f8:	4440      	add	r0, r8
 80104fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80104fc:	b200      	sxth	r0, r0
 80104fe:	1a89      	subs	r1, r1, r2
 8010500:	4a20      	ldr	r2, [pc, #128]	; (8010584 <lv_draw_rect+0x8f0>)
 8010502:	6812      	ldr	r2, [r2, #0]
 8010504:	b209      	sxth	r1, r1
 8010506:	4615      	mov	r5, r2
 8010508:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801050a:	633d      	str	r5, [r7, #48]	; 0x30
 801050c:	47a8      	blx	r5
                    px_fp(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask, style->body.border.color, aa_opa);
 801050e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010510:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010512:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8010514:	1ac9      	subs	r1, r1, r3
 8010516:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010518:	f8db 3010 	ldr.w	r3, [fp, #16]
 801051c:	eba1 0108 	sub.w	r1, r1, r8
 8010520:	9000      	str	r0, [sp, #0]
 8010522:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8010524:	b209      	sxth	r1, r1
 8010526:	f9b7 0034 	ldrsh.w	r0, [r7, #52]	; 0x34
 801052a:	47a8      	blx	r5
            for(i = 0; i  < seg_size; i++) {
 801052c:	b221      	sxth	r1, r4
 801052e:	428e      	cmp	r6, r1
 8010530:	f73f af4a 	bgt.w	80103c8 <lv_draw_rect+0x734>
 8010534:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 8010538:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 801053c:	637b      	str	r3, [r7, #52]	; 0x34
 801053e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
        if(out_x_last != cir_out.x) {
 8010540:	633b      	str	r3, [r7, #48]	; 0x30
        if(in_x_last != cir_in.x) {
 8010542:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010544:	4291      	cmp	r1, r2
 8010546:	f000 80ba 	beq.w	80106be <lv_draw_rect+0xa2a>
            in_y_seg_end = cir_out.y;
 801054a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
            lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 801054e:	f8b7 6058 	ldrh.w	r6, [r7, #88]	; 0x58
            in_y_seg_end = cir_out.y;
 8010552:	627b      	str	r3, [r7, #36]	; 0x24
            lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 8010554:	eba3 0806 	sub.w	r8, r3, r6
 8010558:	fa0f f888 	sxth.w	r8, r8
            for(i = 0; i  < seg_size; i++) {
 801055c:	f1b8 0f00 	cmp.w	r8, #0
 8010560:	f340 8454 	ble.w	8010e0c <lv_draw_rect+0x1178>
                    px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 8010564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010566:	1e4a      	subs	r2, r1, #1
            for(i = 0; i  < seg_size; i++) {
 8010568:	2400      	movs	r4, #0
                    px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 801056a:	643e      	str	r6, [r7, #64]	; 0x40
 801056c:	3b01      	subs	r3, #1
 801056e:	64ba      	str	r2, [r7, #72]	; 0x48
 8010570:	440b      	add	r3, r1
 8010572:	4621      	mov	r1, r4
 8010574:	b21b      	sxth	r3, r3
 8010576:	63bb      	str	r3, [r7, #56]	; 0x38
 8010578:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801057a:	663b      	str	r3, [r7, #96]	; 0x60
 801057c:	e039      	b.n	80105f2 <lv_draw_rect+0x95e>
 801057e:	bf00      	nop
 8010580:	0808b638 	.word	0x0808b638
 8010584:	0808b610 	.word	0x0808b610
        uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map) - 1)) / (seg - 1);
 8010588:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 801058c:	f108 30ff 	add.w	r0, r8, #4294967295
        return (uint32_t)((uint32_t) opa_map[id] * opa) >> 8;
 8010590:	4994      	ldr	r1, [pc, #592]	; (80107e4 <lv_draw_rect+0xb50>)
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8010592:	f1ba 0f09 	cmp.w	sl, #9
        uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map) - 1)) / (seg - 1);
 8010596:	461a      	mov	r2, r3
 8010598:	fbb2 f3f0 	udiv	r3, r2, r0
        return (uint32_t)((uint32_t) opa_map[id] * opa) >> 8;
 801059c:	b2db      	uxtb	r3, r3
 801059e:	5ccd      	ldrb	r5, [r1, r3]
 80105a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80105a2:	fb15 f503 	smulbb	r5, r5, r3
                    aa_opa = opa - antialias_get_opa_circ(seg_size, i, opa);
 80105a6:	eba3 2515 	sub.w	r5, r3, r5, lsr #8
 80105aa:	b2ed      	uxtb	r5, r5
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 80105ac:	d02c      	beq.n	8010608 <lv_draw_rect+0x974>
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 80105ae:	f1b9 0f05 	cmp.w	r9, #5
 80105b2:	d03a      	beq.n	801062a <lv_draw_rect+0x996>
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 80105b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80105b6:	2b06      	cmp	r3, #6
 80105b8:	d04b      	beq.n	8010652 <lv_draw_rect+0x9be>
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 80105ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105bc:	2b0a      	cmp	r3, #10
 80105be:	d05c      	beq.n	801067a <lv_draw_rect+0x9e6>
                if(LV_CIRC_OCT1_X(aa_p) - 1 != LV_CIRC_OCT2_X(aa_p) + i) {
 80105c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80105c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80105c4:	4423      	add	r3, r4
 80105c6:	429a      	cmp	r2, r3
 80105c8:	d00f      	beq.n	80105ea <lv_draw_rect+0x956>
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 80105ca:	f1ba 0f09 	cmp.w	sl, #9
 80105ce:	f000 80c9 	beq.w	8010764 <lv_draw_rect+0xad0>
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 80105d2:	f1b9 0f05 	cmp.w	r9, #5
 80105d6:	f000 80b3 	beq.w	8010740 <lv_draw_rect+0xaac>
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 80105da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80105dc:	2b06      	cmp	r3, #6
 80105de:	f000 809d 	beq.w	801071c <lv_draw_rect+0xa88>
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 80105e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105e4:	2b0a      	cmp	r3, #10
 80105e6:	f000 808a 	beq.w	80106fe <lv_draw_rect+0xa6a>
 80105ea:	3401      	adds	r4, #1
            for(i = 0; i  < seg_size; i++) {
 80105ec:	b221      	sxth	r1, r4
 80105ee:	4588      	cmp	r8, r1
 80105f0:	dd60      	ble.n	80106b4 <lv_draw_rect+0xa20>
                if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) {    /*Use non-linear opa mapping on the first segment*/
 80105f2:	f1b8 0f05 	cmp.w	r8, #5
 80105f6:	dcc7      	bgt.n	8010588 <lv_draw_rect+0x8f4>
                    aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 80105f8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80105fa:	4640      	mov	r0, r8
 80105fc:	f7fc fbc4 	bl	800cd88 <lv_draw_aa_get_opa>
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8010600:	f1ba 0f09 	cmp.w	sl, #9
                    aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 8010604:	4605      	mov	r5, r0
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8010606:	d1d2      	bne.n	80105ae <lv_draw_rect+0x91a>
                    px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 8010608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801060a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801060c:	1899      	adds	r1, r3, r2
 801060e:	4a76      	ldr	r2, [pc, #472]	; (80107e8 <lv_draw_rect+0xb54>)
 8010610:	f8db 3010 	ldr.w	r3, [fp, #16]
 8010614:	6812      	ldr	r2, [r2, #0]
 8010616:	4421      	add	r1, r4
 8010618:	4616      	mov	r6, r2
 801061a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801061c:	9500      	str	r5, [sp, #0]
 801061e:	b209      	sxth	r1, r1
 8010620:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010622:	47b0      	blx	r6
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 8010624:	f1b9 0f05 	cmp.w	r9, #5
 8010628:	d1c4      	bne.n	80105b4 <lv_draw_rect+0x920>
                    px_fp(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) - 1, mask, style->body.border.color, aa_opa);
 801062a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801062c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801062e:	1e59      	subs	r1, r3, #1
 8010630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010632:	6c7e      	ldr	r6, [r7, #68]	; 0x44
 8010634:	1a98      	subs	r0, r3, r2
 8010636:	f8db 3010 	ldr.w	r3, [fp, #16]
 801063a:	4431      	add	r1, r6
 801063c:	4e6a      	ldr	r6, [pc, #424]	; (80107e8 <lv_draw_rect+0xb54>)
 801063e:	1b00      	subs	r0, r0, r4
 8010640:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010642:	b209      	sxth	r1, r1
 8010644:	9500      	str	r5, [sp, #0]
 8010646:	6836      	ldr	r6, [r6, #0]
 8010648:	b200      	sxth	r0, r0
 801064a:	47b0      	blx	r6
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 801064c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801064e:	2b06      	cmp	r3, #6
 8010650:	d1b3      	bne.n	80105ba <lv_draw_rect+0x926>
                    px_fp(lt_origo.x + LV_CIRC_OCT5_X(aa_p) + 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, style->body.border.color, aa_opa);
 8010652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010654:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010656:	6c7e      	ldr	r6, [r7, #68]	; 0x44
 8010658:	1a99      	subs	r1, r3, r2
 801065a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801065c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801065e:	1c58      	adds	r0, r3, #1
 8010660:	1b09      	subs	r1, r1, r4
 8010662:	f8db 3010 	ldr.w	r3, [fp, #16]
 8010666:	1b80      	subs	r0, r0, r6
 8010668:	4e5f      	ldr	r6, [pc, #380]	; (80107e8 <lv_draw_rect+0xb54>)
 801066a:	9500      	str	r5, [sp, #0]
 801066c:	b209      	sxth	r1, r1
 801066e:	6836      	ldr	r6, [r6, #0]
 8010670:	b200      	sxth	r0, r0
 8010672:	47b0      	blx	r6
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 8010674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010676:	2b0a      	cmp	r3, #10
 8010678:	d1a2      	bne.n	80105c0 <lv_draw_rect+0x92c>
                    px_fp(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) + 1, mask, style->body.border.color, aa_opa);
 801067a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801067c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801067e:	1c59      	adds	r1, r3, #1
 8010680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010682:	6c7e      	ldr	r6, [r7, #68]	; 0x44
 8010684:	1898      	adds	r0, r3, r2
 8010686:	f8db 3010 	ldr.w	r3, [fp, #16]
 801068a:	1b89      	subs	r1, r1, r6
 801068c:	4e56      	ldr	r6, [pc, #344]	; (80107e8 <lv_draw_rect+0xb54>)
 801068e:	4420      	add	r0, r4
 8010690:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010692:	b209      	sxth	r1, r1
 8010694:	9500      	str	r5, [sp, #0]
 8010696:	6836      	ldr	r6, [r6, #0]
 8010698:	b200      	sxth	r0, r0
 801069a:	47b0      	blx	r6
 801069c:	e790      	b.n	80105c0 <lv_draw_rect+0x92c>
        if(r != 0) r--;
 801069e:	461d      	mov	r5, r3
 80106a0:	f7ff bb40 	b.w	800fd24 <lv_draw_rect+0x90>
        corner_size = radius + LV_ANTIALIAS;
 80106a4:	1c73      	adds	r3, r6, #1
    lv_coord_t length_corr = 0;
 80106a6:	2200      	movs	r2, #0
        corner_size = radius + LV_ANTIALIAS;
 80106a8:	b21b      	sxth	r3, r3
    lv_coord_t length_corr = 0;
 80106aa:	667a      	str	r2, [r7, #100]	; 0x64
 80106ac:	e574      	b.n	8010198 <lv_draw_rect+0x504>
        if(r != 0) r--;
 80106ae:	4625      	mov	r5, r4
 80106b0:	f7ff bb38 	b.w	800fd24 <lv_draw_rect+0x90>
 80106b4:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 80106b8:	647b      	str	r3, [r7, #68]	; 0x44
 80106ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
            in_y_seg_start = in_y_seg_end;
 80106bc:	65bb      	str	r3, [r7, #88]	; 0x58
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 80106be:	f1ba 0f09 	cmp.w	sl, #9
 80106c2:	f000 810b 	beq.w	80108dc <lv_draw_rect+0xc48>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 80106c6:	f1b9 0f05 	cmp.w	r9, #5
 80106ca:	f000 80cf 	beq.w	801086c <lv_draw_rect+0xbd8>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 80106ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106d0:	2b06      	cmp	r3, #6
 80106d2:	d062      	beq.n	801079a <lv_draw_rect+0xb06>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 80106d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106d6:	2b0a      	cmp	r3, #10
 80106d8:	f000 808a 	beq.w	80107f0 <lv_draw_rect+0xb5c>
        lv_circ_next(&cir_out, &tmp_out);
 80106dc:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80106e0:	69f8      	ldr	r0, [r7, #28]
 80106e2:	f002 faab 	bl	8012c3c <lv_circ_next>
        if(cir_in.y < cir_in.x) {
 80106e6:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 80106ea:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 80106ee:	429a      	cmp	r2, r3
 80106f0:	f6bf ae1d 	bge.w	801032e <lv_draw_rect+0x69a>
            lv_circ_next(&cir_in, &tmp_in);
 80106f4:	68f9      	ldr	r1, [r7, #12]
 80106f6:	68b8      	ldr	r0, [r7, #8]
 80106f8:	f002 faa0 	bl	8012c3c <lv_circ_next>
 80106fc:	e617      	b.n	801032e <lv_draw_rect+0x69a>
                        px_fp(rt_origo.x + LV_CIRC_OCT8_X(aa_p) - 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask, style->body.border.color, aa_opa);
 80106fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010700:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010702:	1a99      	subs	r1, r3, r2
 8010704:	4a38      	ldr	r2, [pc, #224]	; (80107e8 <lv_draw_rect+0xb54>)
 8010706:	f8db 3010 	ldr.w	r3, [fp, #16]
 801070a:	6812      	ldr	r2, [r2, #0]
 801070c:	1b09      	subs	r1, r1, r4
 801070e:	4616      	mov	r6, r2
 8010710:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010712:	9500      	str	r5, [sp, #0]
 8010714:	b209      	sxth	r1, r1
 8010716:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010718:	47b0      	blx	r6
 801071a:	e766      	b.n	80105ea <lv_draw_rect+0x956>
                        px_fp(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) + 1, mask, style->body.border.color, aa_opa);
 801071c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801071e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010720:	1c59      	adds	r1, r3, #1
 8010722:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010724:	6c7e      	ldr	r6, [r7, #68]	; 0x44
 8010726:	1a98      	subs	r0, r3, r2
 8010728:	f8db 3010 	ldr.w	r3, [fp, #16]
 801072c:	1b89      	subs	r1, r1, r6
 801072e:	4e2e      	ldr	r6, [pc, #184]	; (80107e8 <lv_draw_rect+0xb54>)
 8010730:	1b00      	subs	r0, r0, r4
 8010732:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010734:	b209      	sxth	r1, r1
 8010736:	9500      	str	r5, [sp, #0]
 8010738:	6836      	ldr	r6, [r6, #0]
 801073a:	b200      	sxth	r0, r0
 801073c:	47b0      	blx	r6
 801073e:	e750      	b.n	80105e2 <lv_draw_rect+0x94e>
                        px_fp(lb_origo.x + LV_CIRC_OCT4_X(aa_p) + 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 8010740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010742:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010744:	6c7e      	ldr	r6, [r7, #68]	; 0x44
 8010746:	1899      	adds	r1, r3, r2
 8010748:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801074a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801074c:	1c58      	adds	r0, r3, #1
 801074e:	4421      	add	r1, r4
 8010750:	f8db 3010 	ldr.w	r3, [fp, #16]
 8010754:	1b80      	subs	r0, r0, r6
 8010756:	4e24      	ldr	r6, [pc, #144]	; (80107e8 <lv_draw_rect+0xb54>)
 8010758:	9500      	str	r5, [sp, #0]
 801075a:	b209      	sxth	r1, r1
 801075c:	6836      	ldr	r6, [r6, #0]
 801075e:	b200      	sxth	r0, r0
 8010760:	47b0      	blx	r6
 8010762:	e73a      	b.n	80105da <lv_draw_rect+0x946>
                        px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) - 1, mask, style->body.border.color, aa_opa);
 8010764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010766:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010768:	1e59      	subs	r1, r3, #1
 801076a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801076c:	6c7e      	ldr	r6, [r7, #68]	; 0x44
 801076e:	1898      	adds	r0, r3, r2
 8010770:	f8db 3010 	ldr.w	r3, [fp, #16]
 8010774:	4431      	add	r1, r6
 8010776:	4e1c      	ldr	r6, [pc, #112]	; (80107e8 <lv_draw_rect+0xb54>)
 8010778:	4420      	add	r0, r4
 801077a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801077c:	b209      	sxth	r1, r1
 801077e:	9500      	str	r5, [sp, #0]
 8010780:	6836      	ldr	r6, [r6, #0]
 8010782:	b200      	sxth	r0, r0
 8010784:	47b0      	blx	r6
 8010786:	e724      	b.n	80105d2 <lv_draw_rect+0x93e>
            act_w1 = cir_out.x - cir_out.y;
 8010788:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801078a:	1a59      	subs	r1, r3, r1
 801078c:	b289      	uxth	r1, r1
            act_w2 = act_w1 - 1;
 801078e:	1e48      	subs	r0, r1, #1
            act_w1 = cir_out.x - cir_out.y;
 8010790:	b209      	sxth	r1, r1
 8010792:	62f9      	str	r1, [r7, #44]	; 0x2c
            act_w2 = act_w1 - 1;
 8010794:	b201      	sxth	r1, r0
 8010796:	62b9      	str	r1, [r7, #40]	; 0x28
 8010798:	e5dd      	b.n	8010356 <lv_draw_rect+0x6c2>
            if(lb_origo.y + LV_CIRC_OCT4_Y(cir_out) > lt_origo.y + LV_CIRC_OCT5_Y(cir_out)) {
 801079a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 801079e:	693a      	ldr	r2, [r7, #16]
 80107a0:	18d1      	adds	r1, r2, r3
 80107a2:	697a      	ldr	r2, [r7, #20]
 80107a4:	1ad2      	subs	r2, r2, r3
 80107a6:	4291      	cmp	r1, r2
 80107a8:	f300 830e 	bgt.w	8010dc8 <lv_draw_rect+0x1134>
 80107ac:	4a0f      	ldr	r2, [pc, #60]	; (80107ec <lv_draw_rect+0xb58>)
 80107ae:	f107 0498 	add.w	r4, r7, #152	; 0x98
 80107b2:	6815      	ldr	r5, [r2, #0]
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 80107b4:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
            fill_fp(&circ_area, mask, color, opa);
 80107b8:	4620      	mov	r0, r4
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 80107ba:	6d3c      	ldr	r4, [r7, #80]	; 0x50
            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 80107bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 80107be:	1aa4      	subs	r4, r4, r2
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
 80107c0:	6afe      	ldr	r6, [r7, #44]	; 0x2c
            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 80107c2:	1ac9      	subs	r1, r1, r3
            fill_fp(&circ_area, mask, color, opa);
 80107c4:	6a3a      	ldr	r2, [r7, #32]
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 80107c6:	b2a4      	uxth	r4, r4
            fill_fp(&circ_area, mask, color, opa);
 80107c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 80107ca:	b209      	sxth	r1, r1
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
 80107cc:	19a6      	adds	r6, r4, r6
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 80107ce:	f8a7 409a 	strh.w	r4, [r7, #154]	; 0x9a
            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 80107d2:	f8a7 1098 	strh.w	r1, [r7, #152]	; 0x98
            circ_area.x2 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 80107d6:	f8a7 109c 	strh.w	r1, [r7, #156]	; 0x9c
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
 80107da:	f8a7 609e 	strh.w	r6, [r7, #158]	; 0x9e
            fill_fp(&circ_area, mask, color, opa);
 80107de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80107e0:	47a8      	blx	r5
 80107e2:	e777      	b.n	80106d4 <lv_draw_rect+0xa40>
 80107e4:	0808b638 	.word	0x0808b638
 80107e8:	0808b610 	.word	0x0808b610
 80107ec:	0808b60c 	.word	0x0808b60c
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 80107f0:	6d39      	ldr	r1, [r7, #80]	; 0x50
            fill_fp(&circ_area, mask, color, opa);
 80107f2:	f107 0498 	add.w	r4, r7, #152	; 0x98
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 80107f6:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 80107fa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80107fc:	f8b7 608a 	ldrh.w	r6, [r7, #138]	; 0x8a
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 8010800:	1a8a      	subs	r2, r1, r2
            fill_fp(&circ_area, mask, color, opa);
 8010802:	49a7      	ldr	r1, [pc, #668]	; (8010aa0 <lv_draw_rect+0xe0c>)
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 8010804:	b292      	uxth	r2, r2
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 8010806:	4406      	add	r6, r0
            fill_fp(&circ_area, mask, color, opa);
 8010808:	680d      	ldr	r5, [r1, #0]
 801080a:	4620      	mov	r0, r4
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
 801080c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 801080e:	b236      	sxth	r6, r6
            fill_fp(&circ_area, mask, color, opa);
 8010810:	6e7b      	ldr	r3, [r7, #100]	; 0x64
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
 8010812:	4411      	add	r1, r2
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 8010814:	f8a7 209a 	strh.w	r2, [r7, #154]	; 0x9a
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 8010818:	f8a7 6098 	strh.w	r6, [r7, #152]	; 0x98
            fill_fp(&circ_area, mask, color, opa);
 801081c:	6a3a      	ldr	r2, [r7, #32]
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
 801081e:	f8a7 109e 	strh.w	r1, [r7, #158]	; 0x9e
            circ_area.x2 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 8010822:	f8a7 609c 	strh.w	r6, [r7, #156]	; 0x9c
            fill_fp(&circ_area, mask, color, opa);
 8010826:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010828:	47a8      	blx	r5
            if(rb_origo.y + LV_CIRC_OCT1_Y(cir_out) > rt_origo.y + LV_CIRC_OCT8_Y(cir_out)) {
 801082a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 801082e:	693a      	ldr	r2, [r7, #16]
 8010830:	18d1      	adds	r1, r2, r3
 8010832:	697a      	ldr	r2, [r7, #20]
 8010834:	1ad2      	subs	r2, r2, r3
 8010836:	4291      	cmp	r1, r2
 8010838:	f77f af50 	ble.w	80106dc <lv_draw_rect+0xa48>
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
 801083c:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
                fill_fp(&circ_area, mask, color, opa);
 8010840:	4620      	mov	r0, r4
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
 8010842:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 8010844:	6d3a      	ldr	r2, [r7, #80]	; 0x50
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
 8010846:	4421      	add	r1, r4
 8010848:	6afc      	ldr	r4, [r7, #44]	; 0x2c
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 801084a:	1ad2      	subs	r2, r2, r3
                fill_fp(&circ_area, mask, color, opa);
 801084c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
 801084e:	b289      	uxth	r1, r1
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 8010850:	b212      	sxth	r2, r2
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
 8010852:	1b0c      	subs	r4, r1, r4
                circ_area.x2 = rt_origo.x + LV_CIRC_OCT8_X(cir_out);
 8010854:	f8a7 109c 	strh.w	r1, [r7, #156]	; 0x9c
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 8010858:	f8a7 209a 	strh.w	r2, [r7, #154]	; 0x9a
                circ_area.y2 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 801085c:	f8a7 209e 	strh.w	r2, [r7, #158]	; 0x9e
                fill_fp(&circ_area, mask, color, opa);
 8010860:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010862:	6a3a      	ldr	r2, [r7, #32]
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
 8010864:	f8a7 4098 	strh.w	r4, [r7, #152]	; 0x98
                fill_fp(&circ_area, mask, color, opa);
 8010868:	47a8      	blx	r5
 801086a:	e737      	b.n	80106dc <lv_draw_rect+0xa48>
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 801086c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
            fill_fp(&circ_area, mask, color, opa);
 801086e:	f107 0498 	add.w	r4, r7, #152	; 0x98
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 8010872:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 8010876:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010878:	f8b7 508a 	ldrh.w	r5, [r7, #138]	; 0x8a
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 801087c:	4411      	add	r1, r2
 801087e:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8010880:	b289      	uxth	r1, r1
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 8010882:	1b45      	subs	r5, r0, r5
            fill_fp(&circ_area, mask, color, opa);
 8010884:	4a86      	ldr	r2, [pc, #536]	; (8010aa0 <lv_draw_rect+0xe0c>)
 8010886:	4620      	mov	r0, r4
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 8010888:	b22d      	sxth	r5, r5
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 801088a:	1b8e      	subs	r6, r1, r6
            fill_fp(&circ_area, mask, color, opa);
 801088c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801088e:	f8d2 8000 	ldr.w	r8, [r2]
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out);
 8010892:	f8a7 109e 	strh.w	r1, [r7, #158]	; 0x9e
            fill_fp(&circ_area, mask, color, opa);
 8010896:	6a3a      	ldr	r2, [r7, #32]
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 8010898:	f8a7 5098 	strh.w	r5, [r7, #152]	; 0x98
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 801089c:	f8a7 609a 	strh.w	r6, [r7, #154]	; 0x9a
            fill_fp(&circ_area, mask, color, opa);
 80108a0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 80108a2:	f8a7 509c 	strh.w	r5, [r7, #156]	; 0x9c
            fill_fp(&circ_area, mask, color, opa);
 80108a6:	47c0      	blx	r8
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 80108a8:	6d7e      	ldr	r6, [r7, #84]	; 0x54
 80108aa:	f8b7 5088 	ldrh.w	r5, [r7, #136]	; 0x88
            fill_fp(&circ_area, mask, color, opa);
 80108ae:	4620      	mov	r0, r4
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 80108b0:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 80108b4:	1b75      	subs	r5, r6, r5
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 80108b6:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT4_X(cir_out) + act_w1;
 80108b8:	6afe      	ldr	r6, [r7, #44]	; 0x2c
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 80108ba:	b2ad      	uxth	r5, r5
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 80108bc:	4414      	add	r4, r2
            fill_fp(&circ_area, mask, color, opa);
 80108be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 80108c0:	b224      	sxth	r4, r4
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT4_X(cir_out) + act_w1;
 80108c2:	19ae      	adds	r6, r5, r6
            fill_fp(&circ_area, mask, color, opa);
 80108c4:	6a3a      	ldr	r2, [r7, #32]
 80108c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 80108c8:	f8a7 5098 	strh.w	r5, [r7, #152]	; 0x98
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 80108cc:	f8a7 409a 	strh.w	r4, [r7, #154]	; 0x9a
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT4_X(cir_out) + act_w1;
 80108d0:	f8a7 609c 	strh.w	r6, [r7, #156]	; 0x9c
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 80108d4:	f8a7 409e 	strh.w	r4, [r7, #158]	; 0x9e
            fill_fp(&circ_area, mask, color, opa);
 80108d8:	47c0      	blx	r8
 80108da:	e6f8      	b.n	80106ce <lv_draw_rect+0xa3a>
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
 80108dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
            fill_fp(&circ_area, mask, color, opa);
 80108de:	f107 0498 	add.w	r4, r7, #152	; 0x98
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
 80108e2:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 80108e6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80108e8:	f8b7 508a 	ldrh.w	r5, [r7, #138]	; 0x8a
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
 80108ec:	4411      	add	r1, r2
 80108ee:	6abe      	ldr	r6, [r7, #40]	; 0x28
 80108f0:	b289      	uxth	r1, r1
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 80108f2:	4405      	add	r5, r0
            fill_fp(&circ_area, mask, color, opa);
 80108f4:	4a6a      	ldr	r2, [pc, #424]	; (8010aa0 <lv_draw_rect+0xe0c>)
 80108f6:	4620      	mov	r0, r4
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 80108f8:	b22d      	sxth	r5, r5
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
 80108fa:	1b8e      	subs	r6, r1, r6
            fill_fp(&circ_area, mask, color, opa);
 80108fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80108fe:	f8d2 8000 	ldr.w	r8, [r2]
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT1_X(cir_out);
 8010902:	f8a7 109c 	strh.w	r1, [r7, #156]	; 0x9c
            fill_fp(&circ_area, mask, color, opa);
 8010906:	6a3a      	ldr	r2, [r7, #32]
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 8010908:	f8a7 509a 	strh.w	r5, [r7, #154]	; 0x9a
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
 801090c:	f8a7 6098 	strh.w	r6, [r7, #152]	; 0x98
            fill_fp(&circ_area, mask, color, opa);
 8010910:	6eb9      	ldr	r1, [r7, #104]	; 0x68
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 8010912:	f8a7 509e 	strh.w	r5, [r7, #158]	; 0x9e
            fill_fp(&circ_area, mask, color, opa);
 8010916:	47c0      	blx	r8
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 8010918:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 801091a:	f8b7 5088 	ldrh.w	r5, [r7, #136]	; 0x88
            fill_fp(&circ_area, mask, color, opa);
 801091e:	4620      	mov	r0, r4
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 8010920:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 8010924:	4435      	add	r5, r6
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 8010926:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 8010928:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 801092a:	b2ad      	uxth	r5, r5
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 801092c:	4414      	add	r4, r2
            fill_fp(&circ_area, mask, color, opa);
 801092e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 8010930:	b224      	sxth	r4, r4
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 8010932:	1bae      	subs	r6, r5, r6
            fill_fp(&circ_area, mask, color, opa);
 8010934:	6a3a      	ldr	r2, [r7, #32]
 8010936:	6eb9      	ldr	r1, [r7, #104]	; 0x68
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out);
 8010938:	f8a7 509e 	strh.w	r5, [r7, #158]	; 0x9e
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 801093c:	f8a7 4098 	strh.w	r4, [r7, #152]	; 0x98
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 8010940:	f8a7 609a 	strh.w	r6, [r7, #154]	; 0x9a
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 8010944:	f8a7 409c 	strh.w	r4, [r7, #156]	; 0x9c
            fill_fp(&circ_area, mask, color, opa);
 8010948:	47c0      	blx	r8
 801094a:	e6bc      	b.n	80106c6 <lv_draw_rect+0xa32>
    corner_size ++;
 801094c:	3301      	adds	r3, #1
 801094e:	fa1f f883 	uxth.w	r8, r3
    if(part & LV_BORDER_TOP) work_area.y1 = coords->y1 + corner_size;
 8010952:	f014 0302 	ands.w	r3, r4, #2
 8010956:	657b      	str	r3, [r7, #84]	; 0x54
 8010958:	bf14      	ite	ne
 801095a:	eb00 0308 	addne.w	r3, r0, r8
    else  work_area.y1 = coords->y1 + radius;
 801095e:	1983      	addeq	r3, r0, r6
 8010960:	b21b      	sxth	r3, r3
 8010962:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
    if(part & LV_BORDER_BOTTOM) work_area.y2 = coords->y2 - corner_size;
 8010966:	f014 0301 	ands.w	r3, r4, #1
 801096a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801096c:	bf14      	ite	ne
 801096e:	ebae 0308 	subne.w	r3, lr, r8
    else work_area.y2 = coords->y2 - radius;
 8010972:	ebae 0306 	subeq.w	r3, lr, r6
    if(part & LV_BORDER_LEFT) {
 8010976:	0760      	lsls	r0, r4, #29
    else work_area.y2 = coords->y2 - radius;
 8010978:	b21b      	sxth	r3, r3
 801097a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    if(part & LV_BORDER_LEFT) {
 801097e:	f100 8274 	bmi.w	8010e6a <lv_draw_rect+0x11d6>
    if(part & LV_BORDER_RIGHT) {
 8010982:	0721      	lsls	r1, r4, #28
 8010984:	f100 825f 	bmi.w	8010e46 <lv_draw_rect+0x11b2>
    work_area.x1 = coords->x1 + corner_size - length_corr;
 8010988:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801098c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801098e:	8811      	ldrh	r1, [r2, #0]
 8010990:	eba8 0203 	sub.w	r2, r8, r3
    work_area.x2 = coords->x2 - corner_size + length_corr;
 8010994:	eba3 0308 	sub.w	r3, r3, r8
    work_area.x1 = coords->x1 + corner_size - length_corr;
 8010998:	440a      	add	r2, r1
    work_area.x2 = coords->x2 - corner_size + length_corr;
 801099a:	441d      	add	r5, r3
    if(part & LV_BORDER_TOP) {
 801099c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    work_area.x1 = coords->x1 + corner_size - length_corr;
 801099e:	f8a7 2098 	strh.w	r2, [r7, #152]	; 0x98
    work_area.x2 = coords->x2 - corner_size + length_corr;
 80109a2:	f8a7 509c 	strh.w	r5, [r7, #156]	; 0x9c
    if(part & LV_BORDER_TOP) {
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	f040 82d7 	bne.w	8010f5a <lv_draw_rect+0x12c6>
    if(part & LV_BORDER_BOTTOM) {
 80109ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	f040 82c1 	bne.w	8010f36 <lv_draw_rect+0x12a2>
    if(length_corr != 0) {
 80109b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80109b6:	b19b      	cbz	r3, 80109e0 <lv_draw_rect+0xd4c>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 80109b8:	f004 0306 	and.w	r3, r4, #6
 80109bc:	2b06      	cmp	r3, #6
 80109be:	f000 8709 	beq.w	80117d4 <lv_draw_rect+0x1b40>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 80109c2:	f004 030a 	and.w	r3, r4, #10
 80109c6:	2b0a      	cmp	r3, #10
 80109c8:	f000 86e6 	beq.w	8011798 <lv_draw_rect+0x1b04>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 80109cc:	f004 0305 	and.w	r3, r4, #5
 80109d0:	2b05      	cmp	r3, #5
 80109d2:	f000 86bd 	beq.w	8011750 <lv_draw_rect+0x1abc>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 80109d6:	f004 0309 	and.w	r3, r4, #9
 80109da:	2b09      	cmp	r3, #9
 80109dc:	f000 869c 	beq.w	8011718 <lv_draw_rect+0x1a84>
    if(style->body.radius == 0) {
 80109e0:	f9ba 500c 	ldrsh.w	r5, [sl, #12]
 80109e4:	2d00      	cmp	r5, #0
 80109e6:	f47f ac0f 	bne.w	8010208 <lv_draw_rect+0x574>
        if(part & (LV_BORDER_TOP | LV_BORDER_LEFT)) {
 80109ea:	f014 0f06 	tst.w	r4, #6
 80109ee:	f040 83f1 	bne.w	80111d4 <lv_draw_rect+0x1540>
        if(part & (LV_BORDER_TOP | LV_BORDER_RIGHT)) {
 80109f2:	f014 0f0a 	tst.w	r4, #10
 80109f6:	f040 83d5 	bne.w	80111a4 <lv_draw_rect+0x1510>
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_LEFT)) {
 80109fa:	f014 0f05 	tst.w	r4, #5
 80109fe:	f040 83b9 	bne.w	8011174 <lv_draw_rect+0x14e0>
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_RIGHT)) {
 8010a02:	f014 0f09 	tst.w	r4, #9
 8010a06:	f43f abfa 	beq.w	80101fe <lv_draw_rect+0x56a>
            work_area.x1 = coords->x2 - LV_ANTIALIAS;
 8010a0a:	6e3c      	ldr	r4, [r7, #96]	; 0x60
            fill_fp(&work_area, mask, color, opa);
 8010a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
            work_area.x1 = coords->x2 - LV_ANTIALIAS;
 8010a0e:	88a1      	ldrh	r1, [r4, #4]
            work_area.y1 = coords->y2 - LV_ANTIALIAS;
 8010a10:	88e0      	ldrh	r0, [r4, #6]
            work_area.x1 = coords->x2 - LV_ANTIALIAS;
 8010a12:	6865      	ldr	r5, [r4, #4]
 8010a14:	3901      	subs	r1, #1
            work_area.y1 = coords->y2 - LV_ANTIALIAS;
 8010a16:	3801      	subs	r0, #1
            fill_fp(&work_area, mask, color, opa);
 8010a18:	4c21      	ldr	r4, [pc, #132]	; (8010aa0 <lv_draw_rect+0xe0c>)
            work_area.x1 = coords->x2 - LV_ANTIALIAS;
 8010a1a:	f8a7 1098 	strh.w	r1, [r7, #152]	; 0x98
            work_area.y1 = coords->y2 - LV_ANTIALIAS;
 8010a1e:	f8a7 009a 	strh.w	r0, [r7, #154]	; 0x9a
            fill_fp(&work_area, mask, color, opa);
 8010a22:	f107 0098 	add.w	r0, r7, #152	; 0x98
            work_area.x2 = coords->x2;
 8010a26:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
            fill_fp(&work_area, mask, color, opa);
 8010a2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010a2c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010a2e:	6824      	ldr	r4, [r4, #0]
 8010a30:	47a0      	blx	r4
 8010a32:	f9ba 500c 	ldrsh.w	r5, [sl, #12]
 8010a36:	f7ff bbe4 	b.w	8010202 <lv_draw_rect+0x56e>
 8010a3a:	4293      	cmp	r3, r2
        for(d = 0; d < swidth; d++) {
 8010a3c:	4623      	mov	r3, r4
 8010a3e:	f2c0 830c 	blt.w	801105a <lv_draw_rect+0x13c6>
 8010a42:	f8d7 8058 	ldr.w	r8, [r7, #88]	; 0x58
 8010a46:	b2a6      	uxth	r6, r4
            px_fp(point_l.x, point_l.y, mask, style->body.shadow.color, px_opa);
 8010a48:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8010a4a:	f81b 0003 	ldrb.w	r0, [fp, r3]
 8010a4e:	464a      	mov	r2, r9
 8010a50:	1871      	adds	r1, r6, r1
        for(d = 0; d < swidth; d++) {
 8010a52:	3601      	adds	r6, #1
            px_fp(point_l.x, point_l.y, mask, style->body.shadow.color, px_opa);
 8010a54:	f8da 3018 	ldr.w	r3, [sl, #24]
 8010a58:	3401      	adds	r4, #1
 8010a5a:	9000      	str	r0, [sp, #0]
 8010a5c:	b209      	sxth	r1, r1
 8010a5e:	4640      	mov	r0, r8
 8010a60:	47a8      	blx	r5
        for(d = 0; d < swidth; d++) {
 8010a62:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010a64:	b2b3      	uxth	r3, r6
 8010a66:	429a      	cmp	r2, r3
 8010a68:	dced      	bgt.n	8010a46 <lv_draw_rect+0xdb2>
 8010a6a:	f7ff ba5d 	b.w	800ff28 <lv_draw_rect+0x294>
 8010a6e:	465b      	mov	r3, fp
 8010a70:	46cb      	mov	fp, r9
 8010a72:	46d1      	mov	r9, sl
 8010a74:	469a      	mov	sl, r3
    lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 8010a76:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010a78:	643b      	str	r3, [r7, #64]	; 0x40
 8010a7a:	1ad3      	subs	r3, r2, r3
 8010a7c:	b21e      	sxth	r6, r3
    for(i = 0; i  < seg_size; i++) {
 8010a7e:	2e00      	cmp	r6, #0
 8010a80:	f340 80ce 	ble.w	8010c20 <lv_draw_rect+0xf8c>
            px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 8010a84:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
    for(i = 0; i  < seg_size; i++) {
 8010a86:	f04f 0800 	mov.w	r8, #0
            px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 8010a8a:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 8010a8c:	461a      	mov	r2, r3
 8010a8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8010a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a92:	4641      	mov	r1, r8
 8010a94:	f8c7 9048 	str.w	r9, [r7, #72]	; 0x48
 8010a98:	3301      	adds	r3, #1
 8010a9a:	18d3      	adds	r3, r2, r3
 8010a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8010a9e:	e012      	b.n	8010ac6 <lv_draw_rect+0xe32>
 8010aa0:	0808b60c 	.word	0x0808b60c
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 8010aa4:	f1bb 0f05 	cmp.w	fp, #5
 8010aa8:	f000 808e 	beq.w	8010bc8 <lv_draw_rect+0xf34>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 8010aac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010aae:	2b06      	cmp	r3, #6
 8010ab0:	d05f      	beq.n	8010b72 <lv_draw_rect+0xede>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 8010ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ab4:	2b0a      	cmp	r3, #10
 8010ab6:	d036      	beq.n	8010b26 <lv_draw_rect+0xe92>
 8010ab8:	f108 0801 	add.w	r8, r8, #1
    for(i = 0; i  < seg_size; i++) {
 8010abc:	fa0f f188 	sxth.w	r1, r8
 8010ac0:	428e      	cmp	r6, r1
 8010ac2:	f340 80ab 	ble.w	8010c1c <lv_draw_rect+0xf88>
        lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 8010ac6:	462a      	mov	r2, r5
 8010ac8:	4630      	mov	r0, r6
 8010aca:	f7fc f95d 	bl	800cd88 <lv_draw_aa_get_opa>
 8010ace:	1a28      	subs	r0, r5, r0
 8010ad0:	b2c3      	uxtb	r3, r0
 8010ad2:	663b      	str	r3, [r7, #96]	; 0x60
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8010ad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ad6:	2b09      	cmp	r3, #9
 8010ad8:	d1e4      	bne.n	8010aa4 <lv_draw_rect+0xe10>
            px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 8010ada:	489f      	ldr	r0, [pc, #636]	; (8010d58 <lv_draw_rect+0x10c4>)
 8010adc:	fa1f f988 	uxth.w	r9, r8
 8010ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ae2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010ae4:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8010ae6:	6800      	ldr	r0, [r0, #0]
 8010ae8:	1899      	adds	r1, r3, r2
 8010aea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010aec:	62f8      	str	r0, [r7, #44]	; 0x2c
 8010aee:	4449      	add	r1, r9
 8010af0:	f8da 3010 	ldr.w	r3, [sl, #16]
 8010af4:	f9b7 0028 	ldrsh.w	r0, [r7, #40]	; 0x28
 8010af8:	b209      	sxth	r1, r1
 8010afa:	9400      	str	r4, [sp, #0]
 8010afc:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8010afe:	627c      	str	r4, [r7, #36]	; 0x24
 8010b00:	47a0      	blx	r4
            px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask, style->body.border.color, aa_opa);
 8010b02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b06:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010b08:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8010b0a:	4408      	add	r0, r1
 8010b0c:	1c59      	adds	r1, r3, #1
 8010b0e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8010b12:	9400      	str	r4, [sp, #0]
 8010b14:	4448      	add	r0, r9
 8010b16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010b18:	b200      	sxth	r0, r0
 8010b1a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8010b1c:	4411      	add	r1, r2
 8010b1e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010b20:	b209      	sxth	r1, r1
 8010b22:	47a0      	blx	r4
 8010b24:	e7be      	b.n	8010aa4 <lv_draw_rect+0xe10>
            px_fp(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask, style->body.border.color, aa_opa);
 8010b26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010b28:	fa1f f988 	uxth.w	r9, r8
 8010b2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b2e:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8010b30:	18d0      	adds	r0, r2, r3
 8010b32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b34:	4a88      	ldr	r2, [pc, #544]	; (8010d58 <lv_draw_rect+0x10c4>)
 8010b36:	1e59      	subs	r1, r3, #1
 8010b38:	4448      	add	r0, r9
 8010b3a:	6812      	ldr	r2, [r2, #0]
 8010b3c:	1b09      	subs	r1, r1, r4
 8010b3e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8010b42:	4614      	mov	r4, r2
 8010b44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010b46:	b200      	sxth	r0, r0
 8010b48:	9200      	str	r2, [sp, #0]
 8010b4a:	b209      	sxth	r1, r1
 8010b4c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010b4e:	62fc      	str	r4, [r7, #44]	; 0x2c
 8010b50:	47a0      	blx	r4
            px_fp(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask, style->body.border.color, aa_opa);
 8010b52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b54:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010b56:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8010b58:	1ac9      	subs	r1, r1, r3
 8010b5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010b5c:	f8da 3010 	ldr.w	r3, [sl, #16]
 8010b60:	eba1 0109 	sub.w	r1, r1, r9
 8010b64:	9000      	str	r0, [sp, #0]
 8010b66:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8010b68:	f9b7 0028 	ldrsh.w	r0, [r7, #40]	; 0x28
 8010b6c:	b209      	sxth	r1, r1
 8010b6e:	47a0      	blx	r4
 8010b70:	e7a2      	b.n	8010ab8 <lv_draw_rect+0xe24>
            px_fp(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, style->body.border.color, aa_opa);
 8010b72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b74:	fa1f f988 	uxth.w	r9, r8
 8010b78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010b7a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010b7c:	1a99      	subs	r1, r3, r2
 8010b7e:	4a76      	ldr	r2, [pc, #472]	; (8010d58 <lv_draw_rect+0x10c4>)
 8010b80:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8010b82:	3801      	subs	r0, #1
 8010b84:	6812      	ldr	r2, [r2, #0]
 8010b86:	eba1 0109 	sub.w	r1, r1, r9
 8010b8a:	1b00      	subs	r0, r0, r4
 8010b8c:	f8da 3010 	ldr.w	r3, [sl, #16]
 8010b90:	4614      	mov	r4, r2
 8010b92:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010b94:	b209      	sxth	r1, r1
 8010b96:	9200      	str	r2, [sp, #0]
 8010b98:	46a4      	mov	ip, r4
 8010b9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010b9c:	b200      	sxth	r0, r0
 8010b9e:	62fc      	str	r4, [r7, #44]	; 0x2c
 8010ba0:	47e0      	blx	ip
            px_fp(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask, style->body.border.color, aa_opa);
 8010ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ba4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010ba6:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8010ba8:	1ac0      	subs	r0, r0, r3
 8010baa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bac:	1e59      	subs	r1, r3, #1
 8010bae:	f8da 3010 	ldr.w	r3, [sl, #16]
 8010bb2:	9400      	str	r4, [sp, #0]
 8010bb4:	eba0 0009 	sub.w	r0, r0, r9
 8010bb8:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8010bba:	b200      	sxth	r0, r0
 8010bbc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010bbe:	1b09      	subs	r1, r1, r4
 8010bc0:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8010bc2:	b209      	sxth	r1, r1
 8010bc4:	47a0      	blx	r4
 8010bc6:	e774      	b.n	8010ab2 <lv_draw_rect+0xe1e>
            px_fp(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask, style->body.border.color, aa_opa);
 8010bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010bca:	fa1f f988 	uxth.w	r9, r8
 8010bce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010bd0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010bd2:	1a98      	subs	r0, r3, r2
 8010bd4:	4a60      	ldr	r2, [pc, #384]	; (8010d58 <lv_draw_rect+0x10c4>)
 8010bd6:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8010bd8:	3101      	adds	r1, #1
 8010bda:	6812      	ldr	r2, [r2, #0]
 8010bdc:	eba0 0009 	sub.w	r0, r0, r9
 8010be0:	4421      	add	r1, r4
 8010be2:	f8da 3010 	ldr.w	r3, [sl, #16]
 8010be6:	4614      	mov	r4, r2
 8010be8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010bea:	b200      	sxth	r0, r0
 8010bec:	9200      	str	r2, [sp, #0]
 8010bee:	46a4      	mov	ip, r4
 8010bf0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010bf2:	b209      	sxth	r1, r1
 8010bf4:	62fc      	str	r4, [r7, #44]	; 0x2c
 8010bf6:	47e0      	blx	ip
            px_fp(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 8010bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010bfa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010bfc:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8010bfe:	4419      	add	r1, r3
 8010c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c02:	1e58      	subs	r0, r3, #1
 8010c04:	f8da 3010 	ldr.w	r3, [sl, #16]
 8010c08:	9400      	str	r4, [sp, #0]
 8010c0a:	4449      	add	r1, r9
 8010c0c:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8010c0e:	b209      	sxth	r1, r1
 8010c10:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010c12:	1b00      	subs	r0, r0, r4
 8010c14:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8010c16:	b200      	sxth	r0, r0
 8010c18:	47a0      	blx	r4
 8010c1a:	e747      	b.n	8010aac <lv_draw_rect+0xe18>
 8010c1c:	f8d7 9048 	ldr.w	r9, [r7, #72]	; 0x48
    if(LV_MATH_ABS(aa_p.x - aa_p.y) == seg_size) {
 8010c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c24:	1a9b      	subs	r3, r3, r2
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	bfb8      	it	lt
 8010c2a:	425b      	neglt	r3, r3
 8010c2c:	42b3      	cmp	r3, r6
 8010c2e:	f000 8249 	beq.w	80110c4 <lv_draw_rect+0x1430>
    seg_size = in_y_seg_end - in_y_seg_start;
 8010c32:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8010c36:	f8b7 8092 	ldrh.w	r8, [r7, #146]	; 0x92
 8010c3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8010c3c:	eba8 0803 	sub.w	r8, r8, r3
 8010c40:	fa0f f888 	sxth.w	r8, r8
    for(i = 0; i  < seg_size; i++) {
 8010c44:	f1b8 0f00 	cmp.w	r8, #0
 8010c48:	f77f a854 	ble.w	800fcf4 <lv_draw_rect+0x60>
            px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 8010c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    for(i = 0; i  < seg_size; i++) {
 8010c4e:	2500      	movs	r5, #0
 8010c50:	6c79      	ldr	r1, [r7, #68]	; 0x44
            px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 8010c52:	3b01      	subs	r3, #1
 8010c54:	1e4a      	subs	r2, r1, #1
 8010c56:	440b      	add	r3, r1
 8010c58:	4629      	mov	r1, r5
 8010c5a:	663a      	str	r2, [r7, #96]	; 0x60
 8010c5c:	b21b      	sxth	r3, r3
 8010c5e:	643b      	str	r3, [r7, #64]	; 0x40
 8010c60:	e01f      	b.n	8010ca2 <lv_draw_rect+0x100e>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 8010c62:	f1bb 0f05 	cmp.w	fp, #5
 8010c66:	d056      	beq.n	8010d16 <lv_draw_rect+0x1082>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 8010c68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010c6a:	2b06      	cmp	r3, #6
 8010c6c:	d041      	beq.n	8010cf2 <lv_draw_rect+0x105e>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 8010c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010c70:	2b0a      	cmp	r3, #10
 8010c72:	d02c      	beq.n	8010cce <lv_draw_rect+0x103a>
        if(LV_CIRC_OCT1_X(aa_p) - 1 != LV_CIRC_OCT2_X(aa_p) + i) {
 8010c74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010c76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010c78:	442b      	add	r3, r5
 8010c7a:	4293      	cmp	r3, r2
 8010c7c:	d00c      	beq.n	8010c98 <lv_draw_rect+0x1004>
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8010c7e:	f1b9 0f09 	cmp.w	r9, #9
 8010c82:	f000 808f 	beq.w	8010da4 <lv_draw_rect+0x1110>
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 8010c86:	f1bb 0f05 	cmp.w	fp, #5
 8010c8a:	d079      	beq.n	8010d80 <lv_draw_rect+0x10ec>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 8010c8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010c8e:	2b06      	cmp	r3, #6
 8010c90:	d064      	beq.n	8010d5c <lv_draw_rect+0x10c8>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 8010c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010c94:	2b0a      	cmp	r3, #10
 8010c96:	d050      	beq.n	8010d3a <lv_draw_rect+0x10a6>
 8010c98:	3501      	adds	r5, #1
    for(i = 0; i  < seg_size; i++) {
 8010c9a:	b229      	sxth	r1, r5
 8010c9c:	4588      	cmp	r8, r1
 8010c9e:	f77f a829 	ble.w	800fcf4 <lv_draw_rect+0x60>
        lv_opa_t aa_opa =  lv_draw_aa_get_opa(seg_size, i, opa);
 8010ca2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010ca4:	4640      	mov	r0, r8
 8010ca6:	f7fc f86f 	bl	800cd88 <lv_draw_aa_get_opa>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8010caa:	f1b9 0f09 	cmp.w	r9, #9
        lv_opa_t aa_opa =  lv_draw_aa_get_opa(seg_size, i, opa);
 8010cae:	4606      	mov	r6, r0
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8010cb0:	d1d7      	bne.n	8010c62 <lv_draw_rect+0xfce>
            px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 8010cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010cb6:	4c28      	ldr	r4, [pc, #160]	; (8010d58 <lv_draw_rect+0x10c4>)
 8010cb8:	1899      	adds	r1, r3, r2
 8010cba:	f8da 3010 	ldr.w	r3, [sl, #16]
 8010cbe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010cc0:	4429      	add	r1, r5
 8010cc2:	9000      	str	r0, [sp, #0]
 8010cc4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8010cc6:	b209      	sxth	r1, r1
 8010cc8:	6824      	ldr	r4, [r4, #0]
 8010cca:	47a0      	blx	r4
 8010ccc:	e7c9      	b.n	8010c62 <lv_draw_rect+0xfce>
            px_fp(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) + 1, mask, style->body.border.color, aa_opa);
 8010cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010cd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010cd2:	1c59      	adds	r1, r3, #1
 8010cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cd6:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8010cd8:	1898      	adds	r0, r3, r2
 8010cda:	f8da 3010 	ldr.w	r3, [sl, #16]
 8010cde:	1b09      	subs	r1, r1, r4
 8010ce0:	4c1d      	ldr	r4, [pc, #116]	; (8010d58 <lv_draw_rect+0x10c4>)
 8010ce2:	4428      	add	r0, r5
 8010ce4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010ce6:	b209      	sxth	r1, r1
 8010ce8:	9600      	str	r6, [sp, #0]
 8010cea:	b200      	sxth	r0, r0
 8010cec:	6824      	ldr	r4, [r4, #0]
 8010cee:	47a0      	blx	r4
 8010cf0:	e7c0      	b.n	8010c74 <lv_draw_rect+0xfe0>
            px_fp(lt_origo.x + LV_CIRC_OCT5_X(aa_p) + 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, style->body.border.color, aa_opa);
 8010cf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010cf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010cf6:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8010cf8:	1a99      	subs	r1, r3, r2
 8010cfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010cfc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010cfe:	1c58      	adds	r0, r3, #1
 8010d00:	1b49      	subs	r1, r1, r5
 8010d02:	f8da 3010 	ldr.w	r3, [sl, #16]
 8010d06:	1b00      	subs	r0, r0, r4
 8010d08:	4c13      	ldr	r4, [pc, #76]	; (8010d58 <lv_draw_rect+0x10c4>)
 8010d0a:	b209      	sxth	r1, r1
 8010d0c:	9600      	str	r6, [sp, #0]
 8010d0e:	b200      	sxth	r0, r0
 8010d10:	6824      	ldr	r4, [r4, #0]
 8010d12:	47a0      	blx	r4
 8010d14:	e7ab      	b.n	8010c6e <lv_draw_rect+0xfda>
            px_fp(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) - 1, mask, style->body.border.color, aa_opa);
 8010d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010d1a:	1e59      	subs	r1, r3, #1
 8010d1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d1e:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8010d20:	1a98      	subs	r0, r3, r2
 8010d22:	f8da 3010 	ldr.w	r3, [sl, #16]
 8010d26:	4421      	add	r1, r4
 8010d28:	4c0b      	ldr	r4, [pc, #44]	; (8010d58 <lv_draw_rect+0x10c4>)
 8010d2a:	1b40      	subs	r0, r0, r5
 8010d2c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010d2e:	b209      	sxth	r1, r1
 8010d30:	9600      	str	r6, [sp, #0]
 8010d32:	b200      	sxth	r0, r0
 8010d34:	6824      	ldr	r4, [r4, #0]
 8010d36:	47a0      	blx	r4
 8010d38:	e796      	b.n	8010c68 <lv_draw_rect+0xfd4>
                px_fp(rt_origo.x + LV_CIRC_OCT8_X(aa_p) - 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask, style->body.border.color, aa_opa);
 8010d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010d3e:	4c06      	ldr	r4, [pc, #24]	; (8010d58 <lv_draw_rect+0x10c4>)
 8010d40:	1a99      	subs	r1, r3, r2
 8010d42:	f8da 3010 	ldr.w	r3, [sl, #16]
 8010d46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010d48:	1b49      	subs	r1, r1, r5
 8010d4a:	9600      	str	r6, [sp, #0]
 8010d4c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8010d4e:	b209      	sxth	r1, r1
 8010d50:	6824      	ldr	r4, [r4, #0]
 8010d52:	47a0      	blx	r4
 8010d54:	e7a0      	b.n	8010c98 <lv_draw_rect+0x1004>
 8010d56:	bf00      	nop
 8010d58:	0808b610 	.word	0x0808b610
                px_fp(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) + 1, mask, style->body.border.color, aa_opa);
 8010d5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010d60:	1c59      	adds	r1, r3, #1
 8010d62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d64:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8010d66:	1a98      	subs	r0, r3, r2
 8010d68:	f8da 3010 	ldr.w	r3, [sl, #16]
 8010d6c:	1b09      	subs	r1, r1, r4
 8010d6e:	4ca1      	ldr	r4, [pc, #644]	; (8010ff4 <lv_draw_rect+0x1360>)
 8010d70:	1b40      	subs	r0, r0, r5
 8010d72:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010d74:	b209      	sxth	r1, r1
 8010d76:	9600      	str	r6, [sp, #0]
 8010d78:	b200      	sxth	r0, r0
 8010d7a:	6824      	ldr	r4, [r4, #0]
 8010d7c:	47a0      	blx	r4
 8010d7e:	e788      	b.n	8010c92 <lv_draw_rect+0xffe>
                px_fp(lb_origo.x + LV_CIRC_OCT4_X(aa_p) + 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 8010d80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010d84:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8010d86:	1899      	adds	r1, r3, r2
 8010d88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010d8c:	1c58      	adds	r0, r3, #1
 8010d8e:	4429      	add	r1, r5
 8010d90:	f8da 3010 	ldr.w	r3, [sl, #16]
 8010d94:	1b00      	subs	r0, r0, r4
 8010d96:	4c97      	ldr	r4, [pc, #604]	; (8010ff4 <lv_draw_rect+0x1360>)
 8010d98:	b209      	sxth	r1, r1
 8010d9a:	9600      	str	r6, [sp, #0]
 8010d9c:	b200      	sxth	r0, r0
 8010d9e:	6824      	ldr	r4, [r4, #0]
 8010da0:	47a0      	blx	r4
 8010da2:	e773      	b.n	8010c8c <lv_draw_rect+0xff8>
                px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) - 1, mask, style->body.border.color, aa_opa);
 8010da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010da6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010da8:	1e59      	subs	r1, r3, #1
 8010daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dac:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8010dae:	1898      	adds	r0, r3, r2
 8010db0:	f8da 3010 	ldr.w	r3, [sl, #16]
 8010db4:	4421      	add	r1, r4
 8010db6:	4c8f      	ldr	r4, [pc, #572]	; (8010ff4 <lv_draw_rect+0x1360>)
 8010db8:	4428      	add	r0, r5
 8010dba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010dbc:	b209      	sxth	r1, r1
 8010dbe:	9600      	str	r6, [sp, #0]
 8010dc0:	b200      	sxth	r0, r0
 8010dc2:	6824      	ldr	r4, [r4, #0]
 8010dc4:	47a0      	blx	r4
 8010dc6:	e75e      	b.n	8010c86 <lv_draw_rect+0xff2>
                circ_area.y1 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 8010dc8:	6d39      	ldr	r1, [r7, #80]	; 0x50
                fill_fp(&circ_area, mask, color, opa);
 8010dca:	f107 0498 	add.w	r4, r7, #152	; 0x98
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
 8010dce:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010dd0:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
                circ_area.y1 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 8010dd4:	1acb      	subs	r3, r1, r3
                fill_fp(&circ_area, mask, color, opa);
 8010dd6:	4988      	ldr	r1, [pc, #544]	; (8010ff8 <lv_draw_rect+0x1364>)
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
 8010dd8:	1a82      	subs	r2, r0, r2
                circ_area.y1 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 8010dda:	b21b      	sxth	r3, r3
                fill_fp(&circ_area, mask, color, opa);
 8010ddc:	680d      	ldr	r5, [r1, #0]
 8010dde:	4620      	mov	r0, r4
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
 8010de0:	b292      	uxth	r2, r2
                circ_area.x2 = lt_origo.x + LV_CIRC_OCT5_X(cir_out) + act_w2;
 8010de2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
                circ_area.y1 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 8010de4:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
                circ_area.x2 = lt_origo.x + LV_CIRC_OCT5_X(cir_out) + act_w2;
 8010de8:	1856      	adds	r6, r2, r1
                circ_area.y2 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 8010dea:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
 8010dee:	f8a7 2098 	strh.w	r2, [r7, #152]	; 0x98
                fill_fp(&circ_area, mask, color, opa);
 8010df2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010df4:	6a3a      	ldr	r2, [r7, #32]
 8010df6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
                circ_area.x2 = lt_origo.x + LV_CIRC_OCT5_X(cir_out) + act_w2;
 8010df8:	f8a7 609c 	strh.w	r6, [r7, #156]	; 0x9c
                fill_fp(&circ_area, mask, color, opa);
 8010dfc:	47a8      	blx	r5
 8010dfe:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8010e02:	e4d7      	b.n	80107b4 <lv_draw_rect+0xb20>
            for(i = 0; i  < seg_size; i++) {
 8010e04:	637b      	str	r3, [r7, #52]	; 0x34
 8010e06:	4623      	mov	r3, r4
 8010e08:	f7ff bb9a 	b.w	8010540 <lv_draw_rect+0x8ac>
            for(i = 0; i  < seg_size; i++) {
 8010e0c:	647a      	str	r2, [r7, #68]	; 0x44
 8010e0e:	e455      	b.n	80106bc <lv_draw_rect+0xa28>
    if(r >= (h >> 1)) {
 8010e10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e12:	105a      	asrs	r2, r3, #1
 8010e14:	2a00      	cmp	r2, #0
 8010e16:	f73f a9b5 	bgt.w	8010184 <lv_draw_rect+0x4f0>
 8010e1a:	f7ff b9ac 	b.w	8010176 <lv_draw_rect+0x4e2>
 8010e1e:	ea4f 0068 	mov.w	r0, r8, asr #1
 8010e22:	2800      	cmp	r0, #0
 8010e24:	f73f a8dc 	bgt.w	800ffe0 <lv_draw_rect+0x34c>
 8010e28:	f7ff b8d3 	b.w	800ffd2 <lv_draw_rect+0x33e>
 8010e2c:	1052      	asrs	r2, r2, #1
 8010e2e:	4295      	cmp	r5, r2
 8010e30:	f6ff aa28 	blt.w	8010284 <lv_draw_rect+0x5f0>
 8010e34:	f7ff ba1d 	b.w	8010272 <lv_draw_rect+0x5de>
 8010e38:	1052      	asrs	r2, r2, #1
 8010e3a:	2a00      	cmp	r2, #0
 8010e3c:	f77f aa19 	ble.w	8010272 <lv_draw_rect+0x5de>
    if(r > 0) r -= LV_ANTIALIAS;
 8010e40:	637d      	str	r5, [r7, #52]	; 0x34
 8010e42:	f7ff ba23 	b.w	801028c <lv_draw_rect+0x5f8>
        work_area.x1 = work_area.x2 - bwidth;
 8010e46:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8010e4a:	eba5 010b 	sub.w	r1, r5, fp
        fill_fp(&work_area, mask, color, opa);
 8010e4e:	4d6a      	ldr	r5, [pc, #424]	; (8010ff8 <lv_draw_rect+0x1364>)
        work_area.x1 = work_area.x2 - bwidth;
 8010e50:	4618      	mov	r0, r3
        work_area.x2 = coords->x2;
 8010e52:	f8a7 c09c 	strh.w	ip, [r7, #156]	; 0x9c
        fill_fp(&work_area, mask, color, opa);
 8010e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
        work_area.x1 = work_area.x2 - bwidth;
 8010e58:	f820 1d08 	strh.w	r1, [r0, #-8]!
        fill_fp(&work_area, mask, color, opa);
 8010e5c:	682d      	ldr	r5, [r5, #0]
 8010e5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010e60:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010e62:	47a8      	blx	r5
 8010e64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010e66:	889d      	ldrh	r5, [r3, #4]
 8010e68:	e58e      	b.n	8010988 <lv_draw_rect+0xcf4>
        work_area.x1 = coords->x1;
 8010e6a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
        work_area.x2 = work_area.x1 + bwidth;
 8010e6e:	44d9      	add	r9, fp
        fill_fp(&work_area, mask, color, opa);
 8010e70:	4961      	ldr	r1, [pc, #388]	; (8010ff8 <lv_draw_rect+0x1364>)
 8010e72:	f107 0098 	add.w	r0, r7, #152	; 0x98
        work_area.x1 = coords->x1;
 8010e76:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
        fill_fp(&work_area, mask, color, opa);
 8010e7a:	680d      	ldr	r5, [r1, #0]
 8010e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
        work_area.x2 = work_area.x1 + bwidth;
 8010e7e:	f8a7 909c 	strh.w	r9, [r7, #156]	; 0x9c
        fill_fp(&work_area, mask, color, opa);
 8010e82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010e84:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010e86:	47a8      	blx	r5
 8010e88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010e8a:	f9b3 c004 	ldrsh.w	ip, [r3, #4]
 8010e8e:	fa1f f58c 	uxth.w	r5, ip
 8010e92:	e576      	b.n	8010982 <lv_draw_rect+0xcee>
            fill_fp(&work_area, mask, color, opa);
 8010e94:	4b58      	ldr	r3, [pc, #352]	; (8010ff8 <lv_draw_rect+0x1364>)
            work_area.y2 = coords->y1 + bwidth;
 8010e96:	4458      	add	r0, fp
            work_area.x2 = coords->x2;
 8010e98:	f8a7 c09c 	strh.w	ip, [r7, #156]	; 0x9c
            fill_fp(&work_area, mask, color, opa);
 8010e9c:	4619      	mov	r1, r3
 8010e9e:	657b      	str	r3, [r7, #84]	; 0x54
 8010ea0:	f107 0398 	add.w	r3, r7, #152	; 0x98
            work_area.y2 = coords->y1 + bwidth;
 8010ea4:	f8a7 009e 	strh.w	r0, [r7, #158]	; 0x9e
            fill_fp(&work_area, mask, color, opa);
 8010ea8:	680e      	ldr	r6, [r1, #0]
 8010eaa:	461a      	mov	r2, r3
 8010eac:	667b      	str	r3, [r7, #100]	; 0x64
            work_area.x1 = coords->x1;
 8010eae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
            fill_fp(&work_area, mask, color, opa);
 8010eb2:	4610      	mov	r0, r2
            work_area.y1 = coords->y1;
 8010eb4:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
            work_area.x1 = coords->x1;
 8010eb8:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
            work_area.y1 = coords->y1;
 8010ebc:	f8a7 209a 	strh.w	r2, [r7, #154]	; 0x9a
            fill_fp(&work_area, mask, color, opa);
 8010ec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ec2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010ec4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010ec6:	47b0      	blx	r6
        if(part & LV_BORDER_RIGHT) {
 8010ec8:	0723      	lsls	r3, r4, #28
 8010eca:	f140 84d6 	bpl.w	801187a <lv_draw_rect+0x1be6>
            work_area.x1 = coords->x2 - bwidth;
 8010ece:	6e3d      	ldr	r5, [r7, #96]	; 0x60
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 8010ed0:	4641      	mov	r1, r8
            work_area.x1 = coords->x2 - bwidth;
 8010ed2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 8010ed6:	8868      	ldrh	r0, [r5, #2]
            work_area.x1 = coords->x2 - bwidth;
 8010ed8:	eba3 020b 	sub.w	r2, r3, fp
 8010edc:	f8b5 e006 	ldrh.w	lr, [r5, #6]
            work_area.x2 = coords->x2;
 8010ee0:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
            work_area.x1 = coords->x2 - bwidth;
 8010ee4:	f8a7 2098 	strh.w	r2, [r7, #152]	; 0x98
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 8010ee8:	f014 0501 	ands.w	r5, r4, #1
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 8010eec:	4408      	add	r0, r1
            fill_fp(&work_area, mask, color, opa);
 8010eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 8010ef0:	bf14      	ite	ne
 8010ef2:	46c4      	movne	ip, r8
 8010ef4:	f04f 0c00 	moveq.w	ip, #0
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 8010ef8:	f8a7 009a 	strh.w	r0, [r7, #154]	; 0x9a
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 8010efc:	ebae 0e0c 	sub.w	lr, lr, ip
            fill_fp(&work_area, mask, color, opa);
 8010f00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010f02:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010f04:	6e78      	ldr	r0, [r7, #100]	; 0x64
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 8010f06:	f8a7 e09e 	strh.w	lr, [r7, #158]	; 0x9e
            fill_fp(&work_area, mask, color, opa);
 8010f0a:	47b0      	blx	r6
        if(part & LV_BORDER_LEFT) {
 8010f0c:	0764      	lsls	r4, r4, #29
 8010f0e:	f57f a973 	bpl.w	80101f8 <lv_draw_rect+0x564>
            work_area.x1 = coords->x1;
 8010f12:	6e39      	ldr	r1, [r7, #96]	; 0x60
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 8010f14:	f1b9 0f00 	cmp.w	r9, #0
            work_area.x1 = coords->x1;
 8010f18:	f9b1 2000 	ldrsh.w	r2, [r1]
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 8010f1c:	884b      	ldrh	r3, [r1, #2]
 8010f1e:	bf18      	it	ne
 8010f20:	4641      	movne	r1, r8
            work_area.x2 = coords->x1 + bwidth;
 8010f22:	eb0b 0002 	add.w	r0, fp, r2
            work_area.x1 = coords->x1;
 8010f26:	f8a7 2098 	strh.w	r2, [r7, #152]	; 0x98
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 8010f2a:	bf08      	it	eq
 8010f2c:	2100      	moveq	r1, #0
            work_area.x2 = coords->x1 + bwidth;
 8010f2e:	f8a7 009c 	strh.w	r0, [r7, #156]	; 0x9c
 8010f32:	f7ff b94e 	b.w	80101d2 <lv_draw_rect+0x53e>
        work_area.y2 = coords->y2;
 8010f36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        fill_fp(&work_area, mask, color, opa);
 8010f38:	4d2f      	ldr	r5, [pc, #188]	; (8010ff8 <lv_draw_rect+0x1364>)
        work_area.y2 = coords->y2;
 8010f3a:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
        fill_fp(&work_area, mask, color, opa);
 8010f3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
        work_area.y1 = work_area.y2 - bwidth;
 8010f40:	eba1 000b 	sub.w	r0, r1, fp
        work_area.y2 = coords->y2;
 8010f44:	f8a7 109e 	strh.w	r1, [r7, #158]	; 0x9e
        fill_fp(&work_area, mask, color, opa);
 8010f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
        work_area.y1 = work_area.y2 - bwidth;
 8010f4a:	f8a7 009a 	strh.w	r0, [r7, #154]	; 0x9a
        fill_fp(&work_area, mask, color, opa);
 8010f4e:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8010f52:	682d      	ldr	r5, [r5, #0]
 8010f54:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010f56:	47a8      	blx	r5
 8010f58:	e52c      	b.n	80109b4 <lv_draw_rect+0xd20>
        work_area.y1 = coords->y1;
 8010f5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        fill_fp(&work_area, mask, color, opa);
 8010f5c:	4d26      	ldr	r5, [pc, #152]	; (8010ff8 <lv_draw_rect+0x1364>)
        work_area.y1 = coords->y1;
 8010f5e:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
        fill_fp(&work_area, mask, color, opa);
 8010f62:	6dba      	ldr	r2, [r7, #88]	; 0x58
        work_area.y2 = coords->y1 + bwidth;
 8010f64:	eb0b 0001 	add.w	r0, fp, r1
        work_area.y1 = coords->y1;
 8010f68:	f8a7 109a 	strh.w	r1, [r7, #154]	; 0x9a
        fill_fp(&work_area, mask, color, opa);
 8010f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
        work_area.y2 = coords->y1 + bwidth;
 8010f6e:	f8a7 009e 	strh.w	r0, [r7, #158]	; 0x9e
        fill_fp(&work_area, mask, color, opa);
 8010f72:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8010f76:	682d      	ldr	r5, [r5, #0]
 8010f78:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010f7a:	47a8      	blx	r5
 8010f7c:	e516      	b.n	80109ac <lv_draw_rect+0xd18>
        work_area.y2 = coords->y2 - radius;
 8010f7e:	ebab 0301 	sub.w	r3, fp, r1
        work_area.y1 = coords->y1 + radius;
 8010f82:	eb0c 0901 	add.w	r9, ip, r1
        work_area.y2 = coords->y2 - radius;
 8010f86:	b29b      	uxth	r3, r3
        work_area.y1 = coords->y1 + radius;
 8010f88:	fa1f f189 	uxth.w	r1, r9
        work_area.y2 = coords->y2 - radius;
 8010f8c:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
        work_area.y1 = coords->y1 + radius;
 8010f90:	f8a7 109a 	strh.w	r1, [r7, #154]	; 0x9a
        if(style->body.radius != 0) {
 8010f94:	b12a      	cbz	r2, 8010fa2 <lv_draw_rect+0x130e>
            work_area.y1 += 2;
 8010f96:	3102      	adds	r1, #2
            work_area.y2 -= 2;
 8010f98:	3b02      	subs	r3, #2
            work_area.y1 += 2;
 8010f9a:	f8a7 109a 	strh.w	r1, [r7, #154]	; 0x9a
            work_area.y2 -= 2;
 8010f9e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
        fill_fp(&work_area, mask, mcolor, opa);
 8010fa2:	4b15      	ldr	r3, [pc, #84]	; (8010ff8 <lv_draw_rect+0x1364>)
 8010fa4:	4672      	mov	r2, lr
 8010fa6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010fa8:	4618      	mov	r0, r3
 8010faa:	4633      	mov	r3, r6
 8010fac:	6804      	ldr	r4, [r0, #0]
 8010fae:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8010fb2:	47a0      	blx	r4
 8010fb4:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
        if(style->body.radius != 0) {
 8010fb8:	2a00      	cmp	r2, #0
 8010fba:	f43e ae8f 	beq.w	800fcdc <lv_draw_rect+0x48>
 8010fbe:	f7ff b891 	b.w	80100e4 <lv_draw_rect+0x450>
            work_area.y1 = coords->y2 - bwidth;
 8010fc2:	6e38      	ldr	r0, [r7, #96]	; 0x60
            fill_fp(&work_area, mask, color, opa);
 8010fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
            work_area.y1 = coords->y2 - bwidth;
 8010fc6:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
            work_area.x1 = coords->x1;
 8010fca:	8804      	ldrh	r4, [r0, #0]
            work_area.y1 = coords->y2 - bwidth;
 8010fcc:	eba1 0b0b 	sub.w	fp, r1, fp
            work_area.x2 = coords->x2;
 8010fd0:	8885      	ldrh	r5, [r0, #4]
            work_area.x1 = coords->x1;
 8010fd2:	f8a7 4098 	strh.w	r4, [r7, #152]	; 0x98
            fill_fp(&work_area, mask, color, opa);
 8010fd6:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8010fda:	4c07      	ldr	r4, [pc, #28]	; (8010ff8 <lv_draw_rect+0x1364>)
            work_area.y2 = coords->y2;
 8010fdc:	f8a7 109e 	strh.w	r1, [r7, #158]	; 0x9e
            fill_fp(&work_area, mask, color, opa);
 8010fe0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010fe2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
            work_area.y1 = coords->y2 - bwidth;
 8010fe4:	f8a7 b09a 	strh.w	fp, [r7, #154]	; 0x9a
            work_area.x2 = coords->x2;
 8010fe8:	f8a7 509c 	strh.w	r5, [r7, #156]	; 0x9c
            fill_fp(&work_area, mask, color, opa);
 8010fec:	6824      	ldr	r4, [r4, #0]
 8010fee:	47a0      	blx	r4
 8010ff0:	f7ff b905 	b.w	80101fe <lv_draw_rect+0x56a>
 8010ff4:	0808b610 	.word	0x0808b610
 8010ff8:	0808b60c 	.word	0x0808b60c
        for(d = 0; d < swidth; d++) {
 8010ffc:	2300      	movs	r3, #0
 8010ffe:	647c      	str	r4, [r7, #68]	; 0x44
 8011000:	64bd      	str	r5, [r7, #72]	; 0x48
 8011002:	461e      	mov	r6, r3
 8011004:	64fb      	str	r3, [r7, #76]	; 0x4c
                px_opa = (uint16_t)((uint16_t)line_1d_blur[d] + line_1d_blur[d - diff]) >> 1;
 8011006:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011008:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 801100a:	1af2      	subs	r2, r6, r3
 801100c:	f81b 1006 	ldrb.w	r1, [fp, r6]
 8011010:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8011012:	b2ac      	uxth	r4, r5
 8011014:	f81b 6002 	ldrb.w	r6, [fp, r2]
            px_fp(point_l.x, point_l.y, mask, style->body.shadow.color, px_opa);
 8011018:	464a      	mov	r2, r9
 801101a:	eb04 0800 	add.w	r8, r4, r0
 801101e:	f8da 3018 	ldr.w	r3, [sl, #24]
                px_opa = (uint16_t)((uint16_t)line_1d_blur[d] + line_1d_blur[d - diff]) >> 1;
 8011022:	440e      	add	r6, r1
 8011024:	4629      	mov	r1, r5
 8011026:	fa0f f888 	sxth.w	r8, r8
            px_fp(point_l.x, point_l.y, mask, style->body.shadow.color, px_opa);
 801102a:	6db8      	ldr	r0, [r7, #88]	; 0x58
                px_opa = (uint16_t)((uint16_t)line_1d_blur[d] + line_1d_blur[d - diff]) >> 1;
 801102c:	f3c6 0647 	ubfx	r6, r6, #1, #8
 8011030:	3101      	adds	r1, #1
        for(d = 0; d < swidth; d++) {
 8011032:	3401      	adds	r4, #1
 8011034:	64f9      	str	r1, [r7, #76]	; 0x4c
            px_fp(point_l.x, point_l.y, mask, style->body.shadow.color, px_opa);
 8011036:	4641      	mov	r1, r8
 8011038:	9600      	str	r6, [sp, #0]
 801103a:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 801103c:	47a8      	blx	r5
                px_fp(point_r.x, point_r.y, mask, style->body.shadow.color, px_opa);
 801103e:	f8da 3018 	ldr.w	r3, [sl, #24]
 8011042:	9600      	str	r6, [sp, #0]
 8011044:	4641      	mov	r1, r8
 8011046:	464a      	mov	r2, r9
 8011048:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801104a:	6cbd      	ldr	r5, [r7, #72]	; 0x48
        for(d = 0; d < swidth; d++) {
 801104c:	b2a6      	uxth	r6, r4
                px_fp(point_r.x, point_r.y, mask, style->body.shadow.color, px_opa);
 801104e:	47a8      	blx	r5
        for(d = 0; d < swidth; d++) {
 8011050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011052:	42b3      	cmp	r3, r6
 8011054:	dcd7      	bgt.n	8011006 <lv_draw_rect+0x1372>
 8011056:	f7fe bf67 	b.w	800ff28 <lv_draw_rect+0x294>
 801105a:	f8c7 b04c 	str.w	fp, [r7, #76]	; 0x4c
 801105e:	46ab      	mov	fp, r5
 8011060:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8011062:	b2a6      	uxth	r6, r4
                px_opa = line_1d_blur[d];
 8011064:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011066:	3401      	adds	r4, #1
 8011068:	eb06 0801 	add.w	r8, r6, r1
        for(d = 0; d < swidth; d++) {
 801106c:	3601      	adds	r6, #1
                px_opa = line_1d_blur[d];
 801106e:	5cd5      	ldrb	r5, [r2, r3]
            px_fp(point_l.x, point_l.y, mask, style->body.shadow.color, px_opa);
 8011070:	464a      	mov	r2, r9
 8011072:	fa0f f888 	sxth.w	r8, r8
 8011076:	f8da 3018 	ldr.w	r3, [sl, #24]
 801107a:	9500      	str	r5, [sp, #0]
 801107c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801107e:	4641      	mov	r1, r8
 8011080:	47d8      	blx	fp
                px_fp(point_r.x, point_r.y, mask, style->body.shadow.color, px_opa);
 8011082:	f8da 3018 	ldr.w	r3, [sl, #24]
 8011086:	9500      	str	r5, [sp, #0]
 8011088:	464a      	mov	r2, r9
 801108a:	4641      	mov	r1, r8
 801108c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801108e:	47d8      	blx	fp
        for(d = 0; d < swidth; d++) {
 8011090:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011092:	b2b3      	uxth	r3, r6
 8011094:	429a      	cmp	r2, r3
 8011096:	dce3      	bgt.n	8011060 <lv_draw_rect+0x13cc>
 8011098:	f8d7 b04c 	ldr.w	fp, [r7, #76]	; 0x4c
 801109c:	f7fe bf44 	b.w	800ff28 <lv_draw_rect+0x294>
 80110a0:	4b7f      	ldr	r3, [pc, #508]	; (80112a0 <lv_draw_rect+0x160c>)
            work_area.x1 = coords->x2 - bwidth;
 80110a2:	eba5 050b 	sub.w	r5, r5, fp
 80110a6:	f107 0298 	add.w	r2, r7, #152	; 0x98
            work_area.x2 = coords->x2;
 80110aa:	f8a7 c09c 	strh.w	ip, [r7, #156]	; 0x9c
 80110ae:	657b      	str	r3, [r7, #84]	; 0x54
            work_area.x1 = coords->x2 - bwidth;
 80110b0:	f8a7 5098 	strh.w	r5, [r7, #152]	; 0x98
 80110b4:	667a      	str	r2, [r7, #100]	; 0x64
 80110b6:	681e      	ldr	r6, [r3, #0]
 80110b8:	e716      	b.n	8010ee8 <lv_draw_rect+0x1254>
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.border.opa : (uint16_t)((uint16_t) style->body.border.opa * opa_scale) >> 8;
 80110ba:	f89a 3017 	ldrb.w	r3, [sl, #23]
 80110be:	667b      	str	r3, [r7, #100]	; 0x64
 80110c0:	f7ff b8b6 	b.w	8010230 <lv_draw_rect+0x59c>
        lv_opa_t aa_opa = opa >> 1;
 80110c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 80110c6:	f1b9 0f09 	cmp.w	r9, #9
        lv_opa_t aa_opa = opa >> 1;
 80110ca:	ea4f 0553 	mov.w	r5, r3, lsr #1
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 80110ce:	f000 83b6 	beq.w	801183e <lv_draw_rect+0x1baa>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 80110d2:	f1bb 0f05 	cmp.w	fp, #5
 80110d6:	f000 83a3 	beq.w	8011820 <lv_draw_rect+0x1b8c>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 80110da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80110dc:	2b06      	cmp	r3, #6
 80110de:	f000 83bd 	beq.w	801185c <lv_draw_rect+0x1bc8>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 80110e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80110e4:	2b0a      	cmp	r3, #10
 80110e6:	f47f ada4 	bne.w	8010c32 <lv_draw_rect+0xf9e>
            px_fp(rt_origo.x + LV_CIRC_OCT8_X(aa_p), rt_origo.y + LV_CIRC_OCT8_Y(aa_p), mask, style->body.border.color, aa_opa);
 80110ea:	8eb8      	ldrh	r0, [r7, #52]	; 0x34
 80110ec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80110ee:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 80110f0:	1a09      	subs	r1, r1, r0
 80110f2:	4c6c      	ldr	r4, [pc, #432]	; (80112a4 <lv_draw_rect+0x1610>)
 80110f4:	4430      	add	r0, r6
 80110f6:	f8da 3010 	ldr.w	r3, [sl, #16]
 80110fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80110fc:	b209      	sxth	r1, r1
 80110fe:	9500      	str	r5, [sp, #0]
 8011100:	b200      	sxth	r0, r0
 8011102:	6824      	ldr	r4, [r4, #0]
 8011104:	47a0      	blx	r4
 8011106:	e594      	b.n	8010c32 <lv_draw_rect+0xf9e>
 8011108:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801110a:	69f9      	ldr	r1, [r7, #28]
    area_mid.x2 = ofs_r.x - 1;
 801110c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    area_mid.x1 = ofs_l.x + 1;
 801110e:	3201      	adds	r2, #1
    area_mid.y1 = ofs_l.y + radius;
 8011110:	f8a7 109a 	strh.w	r1, [r7, #154]	; 0x9a
    area_mid.x2 = ofs_r.x - 1;
 8011114:	3b01      	subs	r3, #1
    area_mid.x1 = ofs_l.x + 1;
 8011116:	f8a7 2098 	strh.w	r2, [r7, #152]	; 0x98
    area_mid.y2 = area_mid.y1;
 801111a:	f8a7 109e 	strh.w	r1, [r7, #158]	; 0x9e
    area_mid.x2 = ofs_r.x - 1;
 801111e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
    for(d = 0; d < swidth; d++) {
 8011122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011124:	2b00      	cmp	r3, #0
 8011126:	dd21      	ble.n	801116c <lv_draw_rect+0x14d8>
 8011128:	461e      	mov	r6, r3
 801112a:	2400      	movs	r4, #0
 801112c:	4b5c      	ldr	r3, [pc, #368]	; (80112a0 <lv_draw_rect+0x160c>)
 801112e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8011132:	4621      	mov	r1, r4
 8011134:	f8d7 9068 	ldr.w	r9, [r7, #104]	; 0x68
 8011138:	681d      	ldr	r5, [r3, #0]
 801113a:	4690      	mov	r8, r2
 801113c:	3401      	adds	r4, #1
        fill_fp(&area_mid, mask, style->body.shadow.color, line_1d_blur[d]);
 801113e:	f81b 3001 	ldrb.w	r3, [fp, r1]
 8011142:	f8da 2018 	ldr.w	r2, [sl, #24]
 8011146:	4649      	mov	r1, r9
 8011148:	4640      	mov	r0, r8
    for(d = 0; d < swidth; d++) {
 801114a:	b2a4      	uxth	r4, r4
        fill_fp(&area_mid, mask, style->body.shadow.color, line_1d_blur[d]);
 801114c:	47a8      	blx	r5
        area_mid.y1 ++;
 801114e:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
        area_mid.y2 ++;
 8011152:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
    for(d = 0; d < swidth; d++) {
 8011156:	42a6      	cmp	r6, r4
        area_mid.y1 ++;
 8011158:	f102 0201 	add.w	r2, r2, #1
    for(d = 0; d < swidth; d++) {
 801115c:	4621      	mov	r1, r4
        area_mid.y2 ++;
 801115e:	f103 0301 	add.w	r3, r3, #1
        area_mid.y1 ++;
 8011162:	f8a7 209a 	strh.w	r2, [r7, #154]	; 0x9a
        area_mid.y2 ++;
 8011166:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    for(d = 0; d < swidth; d++) {
 801116a:	dce7      	bgt.n	801113c <lv_draw_rect+0x14a8>
 801116c:	f8d7 d020 	ldr.w	sp, [r7, #32]
 8011170:	f7fe bdab 	b.w	800fcca <lv_draw_rect+0x36>
            work_area.x1 = coords->x1;
 8011174:	6e3a      	ldr	r2, [r7, #96]	; 0x60
            fill_fp(&work_area, mask, color, opa);
 8011176:	4d4a      	ldr	r5, [pc, #296]	; (80112a0 <lv_draw_rect+0x160c>)
            work_area.x1 = coords->x1;
 8011178:	f9b2 6000 	ldrsh.w	r6, [r2]
            work_area.y1 = coords->y2 - LV_ANTIALIAS;
 801117c:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
            work_area.x2 = coords->x1 + LV_ANTIALIAS;
 8011180:	1c71      	adds	r1, r6, #1
            work_area.x1 = coords->x1;
 8011182:	f8a7 6098 	strh.w	r6, [r7, #152]	; 0x98
            work_area.y1 = coords->y2 - LV_ANTIALIAS;
 8011186:	1e46      	subs	r6, r0, #1
            work_area.y2 = coords->y2;
 8011188:	f8a7 009e 	strh.w	r0, [r7, #158]	; 0x9e
            work_area.x2 = coords->x1 + LV_ANTIALIAS;
 801118c:	f8a7 109c 	strh.w	r1, [r7, #156]	; 0x9c
            fill_fp(&work_area, mask, color, opa);
 8011190:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8011194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011196:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011198:	6eb9      	ldr	r1, [r7, #104]	; 0x68
            work_area.y1 = coords->y2 - LV_ANTIALIAS;
 801119a:	f8a7 609a 	strh.w	r6, [r7, #154]	; 0x9a
            fill_fp(&work_area, mask, color, opa);
 801119e:	682d      	ldr	r5, [r5, #0]
 80111a0:	47a8      	blx	r5
 80111a2:	e42e      	b.n	8010a02 <lv_draw_rect+0xd6e>
            work_area.x1 = coords->x2 - LV_ANTIALIAS;
 80111a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
            fill_fp(&work_area, mask, color, opa);
 80111a6:	4d3e      	ldr	r5, [pc, #248]	; (80112a0 <lv_draw_rect+0x160c>)
            work_area.x1 = coords->x2 - LV_ANTIALIAS;
 80111a8:	f9b2 6004 	ldrsh.w	r6, [r2, #4]
            work_area.y1 = coords->y1;
 80111ac:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
            work_area.x1 = coords->x2 - LV_ANTIALIAS;
 80111b0:	1e71      	subs	r1, r6, #1
            work_area.x2 = coords->x2;
 80111b2:	f8a7 609c 	strh.w	r6, [r7, #156]	; 0x9c
            work_area.y2 = coords->y1 + LV_ANTIALIAS;
 80111b6:	1c46      	adds	r6, r0, #1
            work_area.y1 = coords->y1;
 80111b8:	f8a7 009a 	strh.w	r0, [r7, #154]	; 0x9a
            work_area.x1 = coords->x2 - LV_ANTIALIAS;
 80111bc:	f8a7 1098 	strh.w	r1, [r7, #152]	; 0x98
            fill_fp(&work_area, mask, color, opa);
 80111c0:	f107 0098 	add.w	r0, r7, #152	; 0x98
 80111c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80111c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80111c8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
            work_area.y2 = coords->y1 + LV_ANTIALIAS;
 80111ca:	f8a7 609e 	strh.w	r6, [r7, #158]	; 0x9e
            fill_fp(&work_area, mask, color, opa);
 80111ce:	682d      	ldr	r5, [r5, #0]
 80111d0:	47a8      	blx	r5
 80111d2:	e412      	b.n	80109fa <lv_draw_rect+0xd66>
            work_area.x2 = coords->x1 + LV_ANTIALIAS;
 80111d4:	6e3d      	ldr	r5, [r7, #96]	; 0x60
            fill_fp(&work_area, mask, color, opa);
 80111d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
            work_area.x2 = coords->x1 + LV_ANTIALIAS;
 80111d8:	8829      	ldrh	r1, [r5, #0]
            work_area.y1 = coords->y1;
 80111da:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
            work_area.x1 = coords->x1;
 80111de:	682e      	ldr	r6, [r5, #0]
            work_area.x2 = coords->x1 + LV_ANTIALIAS;
 80111e0:	3101      	adds	r1, #1
            work_area.y2 = coords->y1 + LV_ANTIALIAS;
 80111e2:	3001      	adds	r0, #1
            fill_fp(&work_area, mask, color, opa);
 80111e4:	4d2e      	ldr	r5, [pc, #184]	; (80112a0 <lv_draw_rect+0x160c>)
            work_area.x2 = coords->x1 + LV_ANTIALIAS;
 80111e6:	f8a7 109c 	strh.w	r1, [r7, #156]	; 0x9c
            work_area.y2 = coords->y1 + LV_ANTIALIAS;
 80111ea:	f8a7 009e 	strh.w	r0, [r7, #158]	; 0x9e
            fill_fp(&work_area, mask, color, opa);
 80111ee:	f107 0098 	add.w	r0, r7, #152	; 0x98
 80111f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80111f4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
            work_area.x1 = coords->x1;
 80111f6:	f8c7 6098 	str.w	r6, [r7, #152]	; 0x98
            fill_fp(&work_area, mask, color, opa);
 80111fa:	682d      	ldr	r5, [r5, #0]
 80111fc:	47a8      	blx	r5
 80111fe:	f7ff bbf8 	b.w	80109f2 <lv_draw_rect+0xd5e>
    if(r >= (h >> 1)) {
 8011202:	105b      	asrs	r3, r3, #1
 8011204:	2b00      	cmp	r3, #0
 8011206:	f77e addb 	ble.w	800fdc0 <lv_draw_rect+0x12c>
    if(r > 0) r -= LV_ANTIALIAS;
 801120a:	2303      	movs	r3, #3
 801120c:	461c      	mov	r4, r3
 801120e:	643b      	str	r3, [r7, #64]	; 0x40
 8011210:	2308      	movs	r3, #8
 8011212:	f7fe bde4 	b.w	800fdde <lv_draw_rect+0x14a>
    return area_p->x2 - area_p->x1 + 1;
 8011216:	6e3c      	ldr	r4, [r7, #96]	; 0x60
{
 8011218:	f8c7 d004 	str.w	sp, [r7, #4]
 801121c:	88a0      	ldrh	r0, [r4, #4]
 801121e:	8822      	ldrh	r2, [r4, #0]
 8011220:	3001      	adds	r0, #1
    return area_p->y2 - area_p->y1 + 1;
 8011222:	88e3      	ldrh	r3, [r4, #6]
 8011224:	8864      	ldrh	r4, [r4, #2]
    return area_p->x2 - area_p->x1 + 1;
 8011226:	1a80      	subs	r0, r0, r2
    return area_p->y2 - area_p->y1 + 1;
 8011228:	3301      	adds	r3, #1
    radius = lv_draw_cont_radius_corr(radius, width, height);
 801122a:	f8ba 200c 	ldrh.w	r2, [sl, #12]
    if(r >= (w >> 1)) {
 801122e:	f340 004e 	sbfx	r0, r0, #1, #15
 8011232:	1b1b      	subs	r3, r3, r4
    lv_coord_t swidth = style->body.shadow.width;
 8011234:	f9ba 801c 	ldrsh.w	r8, [sl, #28]
    if(r >= (w >> 1)) {
 8011238:	4282      	cmp	r2, r0
 801123a:	b21b      	sxth	r3, r3
 801123c:	db05      	blt.n	801124a <lv_draw_rect+0x15b6>
        r = (w >> 1);
 801123e:	b282      	uxth	r2, r0
        if(r != 0) r--;
 8011240:	2a00      	cmp	r2, #0
 8011242:	f000 82e4 	beq.w	801180e <lv_draw_rect+0x1b7a>
 8011246:	3a01      	subs	r2, #1
 8011248:	b292      	uxth	r2, r2
    if(r >= (h >> 1)) {
 801124a:	105b      	asrs	r3, r3, #1
 801124c:	4293      	cmp	r3, r2
 801124e:	dc05      	bgt.n	801125c <lv_draw_rect+0x15c8>
        r = (h >> 1);
 8011250:	b29b      	uxth	r3, r3
        if(r != 0) r--;
 8011252:	2b00      	cmp	r3, #0
 8011254:	f000 82df 	beq.w	8011816 <lv_draw_rect+0x1b82>
 8011258:	3b01      	subs	r3, #1
 801125a:	b29a      	uxth	r2, r3
    if(r > 0) r -= LV_ANTIALIAS;
 801125c:	2a00      	cmp	r2, #0
 801125e:	f000 82da 	beq.w	8011816 <lv_draw_rect+0x1b82>
 8011262:	b215      	sxth	r5, r2
 8011264:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011266:	462b      	mov	r3, r5
 8011268:	62bd      	str	r5, [r7, #40]	; 0x28
    lv_coord_t curve_x[radius + swidth + 1];     /*Stores the 'x' coordinates of a quarter circle.*/
 801126a:	4443      	add	r3, r8
    memset(curve_x, 0, sizeof(curve_x));
 801126c:	2100      	movs	r1, #0
    lv_coord_t curve_x[radius + swidth + 1];     /*Stores the 'x' coordinates of a quarter circle.*/
 801126e:	1c5c      	adds	r4, r3, #1
 8011270:	653b      	str	r3, [r7, #80]	; 0x50
 8011272:	0062      	lsls	r2, r4, #1
 8011274:	f102 0308 	add.w	r3, r2, #8
 8011278:	f023 0307 	bic.w	r3, r3, #7
 801127c:	ebad 0d03 	sub.w	sp, sp, r3
 8011280:	ab02      	add	r3, sp, #8
 8011282:	461e      	mov	r6, r3
    memset(curve_x, 0, sizeof(curve_x));
 8011284:	4618      	mov	r0, r3
    lv_coord_t curve_x[radius + swidth + 1];     /*Stores the 'x' coordinates of a quarter circle.*/
 8011286:	66fb      	str	r3, [r7, #108]	; 0x6c
    memset(curve_x, 0, sizeof(curve_x));
 8011288:	f00c fbb3 	bl	801d9f2 <memset>
    lv_circ_init(&circ, &circ_tmp, radius);
 801128c:	462a      	mov	r2, r5
 801128e:	f107 0172 	add.w	r1, r7, #114	; 0x72
 8011292:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8011296:	4635      	mov	r5, r6
 8011298:	f001 fcbc 	bl	8012c14 <lv_circ_init>
 801129c:	e010      	b.n	80112c0 <lv_draw_rect+0x162c>
 801129e:	bf00      	nop
 80112a0:	0808b60c 	.word	0x0808b60c
 80112a4:	0808b610 	.word	0x0808b610
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 80112a8:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
        lv_circ_next(&circ, &circ_tmp);
 80112ac:	f107 0074 	add.w	r0, r7, #116	; 0x74
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 80112b0:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 80112b4:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
        curve_x[LV_CIRC_OCT2_Y(circ)] = LV_CIRC_OCT2_X(circ);
 80112b8:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
        lv_circ_next(&circ, &circ_tmp);
 80112bc:	f001 fcbe 	bl	8012c3c <lv_circ_next>
    while(lv_circ_cont(&circ)) {
 80112c0:	f107 0074 	add.w	r0, r7, #116	; 0x74
 80112c4:	f001 fcb0 	bl	8012c28 <lv_circ_cont>
        lv_circ_next(&circ, &circ_tmp);
 80112c8:	f107 0172 	add.w	r1, r7, #114	; 0x72
    while(lv_circ_cont(&circ)) {
 80112cc:	2800      	cmp	r0, #0
 80112ce:	d1eb      	bne.n	80112a8 <lv_draw_rect+0x1614>
    int16_t filter_width = 2 * swidth + 1;
 80112d0:	fa1f fe88 	uxth.w	lr, r8
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t) style->body.opa * opa_scale) >> 8;
 80112d4:	f89a 000e 	ldrb.w	r0, [sl, #14]
    int16_t filter_width = 2 * swidth + 1;
 80112d8:	ea4f 054e 	mov.w	r5, lr, lsl #1
 80112dc:	b2ad      	uxth	r5, r5
 80112de:	1c6b      	adds	r3, r5, #1
 80112e0:	b21b      	sxth	r3, r3
    uint32_t line_1d_blur[filter_width];
 80112e2:	009a      	lsls	r2, r3, #2
 80112e4:	320a      	adds	r2, #10
 80112e6:	f022 0207 	bic.w	r2, r2, #7
 80112ea:	ebad 0d02 	sub.w	sp, sp, r2
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t) style->body.opa * opa_scale) >> 8;
 80112ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80112f0:	2aff      	cmp	r2, #255	; 0xff
    uint32_t line_1d_blur[filter_width];
 80112f2:	f10d 0908 	add.w	r9, sp, #8
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t) style->body.opa * opa_scale) >> 8;
 80112f6:	d003      	beq.n	8011300 <lv_draw_rect+0x166c>
 80112f8:	fb00 f002 	mul.w	r0, r0, r2
 80112fc:	f3c0 2007 	ubfx	r0, r0, #8, #8
    for(line = 0; line < filter_width; line++) {
 8011300:	2b00      	cmp	r3, #0
 8011302:	dd14      	ble.n	801132e <lv_draw_rect+0x169a>
 8011304:	b200      	sxth	r0, r0
 8011306:	fb03 f603 	mul.w	r6, r3, r3
 801130a:	021b      	lsls	r3, r3, #8
 801130c:	f1a9 0204 	sub.w	r2, r9, #4
 8011310:	0041      	lsls	r1, r0, #1
 8011312:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8011316:	ebc1 6040 	rsb	r0, r1, r0, lsl #25
 801131a:	fb01 f303 	mul.w	r3, r1, r3
 801131e:	0200      	lsls	r0, r0, #8
        line_1d_blur[line] = (uint32_t)((uint32_t)(filter_width - line) * (opa * 2)  << SHADOW_OPA_EXTRA_PRECISION) / (filter_width * filter_width);
 8011320:	fbb3 f1f6 	udiv	r1, r3, r6
 8011324:	f842 1f04 	str.w	r1, [r2, #4]!
    for(line = 0; line < filter_width; line++) {
 8011328:	4295      	cmp	r5, r2
 801132a:	4403      	add	r3, r0
 801132c:	d1f8      	bne.n	8011320 <lv_draw_rect+0x168c>
    ofs_rb.x = coords->x2 - radius - LV_ANTIALIAS;
 801132e:	6e3d      	ldr	r5, [r7, #96]	; 0x60
    lv_opa_t line_2d_blur[radius + swidth + 1];
 8011330:	3407      	adds	r4, #7
    ofs_rb.x = coords->x2 - radius - LV_ANTIALIAS;
 8011332:	6afe      	ldr	r6, [r7, #44]	; 0x2c
    ofs_rt.y = coords->y1 + radius + LV_ANTIALIAS;
 8011334:	8869      	ldrh	r1, [r5, #2]
    lv_opa_t line_2d_blur[radius + swidth + 1];
 8011336:	f024 0407 	bic.w	r4, r4, #7
    ofs_lb.x = coords->x1 + radius + LV_ANTIALIAS;
 801133a:	882a      	ldrh	r2, [r5, #0]
    ofs_rt.y = coords->y1 + radius + LV_ANTIALIAS;
 801133c:	3101      	adds	r1, #1
    ofs_rb.x = coords->x2 - radius - LV_ANTIALIAS;
 801133e:	88ab      	ldrh	r3, [r5, #4]
    ofs_lb.x = coords->x1 + radius + LV_ANTIALIAS;
 8011340:	3201      	adds	r2, #1
    ofs_rb.y = coords->y2 - radius - LV_ANTIALIAS;
 8011342:	88e8      	ldrh	r0, [r5, #6]
    ofs_rt.y = coords->y1 + radius + LV_ANTIALIAS;
 8011344:	4431      	add	r1, r6
    ofs_rb.x = coords->x2 - radius - LV_ANTIALIAS;
 8011346:	3b01      	subs	r3, #1
    ofs_lb.x = coords->x1 + radius + LV_ANTIALIAS;
 8011348:	4432      	add	r2, r6
    ofs_rb.y = coords->y2 - radius - LV_ANTIALIAS;
 801134a:	3801      	subs	r0, #1
    ofs_rt.y = coords->y1 + radius + LV_ANTIALIAS;
 801134c:	b289      	uxth	r1, r1
    ofs_rb.x = coords->x2 - radius - LV_ANTIALIAS;
 801134e:	1b9b      	subs	r3, r3, r6
    ofs_lb.x = coords->x1 + radius + LV_ANTIALIAS;
 8011350:	b292      	uxth	r2, r2
    ofs_rb.y = coords->y2 - radius - LV_ANTIALIAS;
 8011352:	1b80      	subs	r0, r0, r6
    ofs_rt.y = coords->y1 + radius + LV_ANTIALIAS;
 8011354:	6179      	str	r1, [r7, #20]
 8011356:	b209      	sxth	r1, r1
    lv_opa_t line_2d_blur[radius + swidth + 1];
 8011358:	ebad 0d04 	sub.w	sp, sp, r4
    ofs_rb.y = coords->y2 - radius - LV_ANTIALIAS;
 801135c:	b280      	uxth	r0, r0
    ofs_rt.y = coords->y1 + radius + LV_ANTIALIAS;
 801135e:	63f9      	str	r1, [r7, #60]	; 0x3c
    ofs_lb.x = coords->x1 + radius + LV_ANTIALIAS;
 8011360:	b211      	sxth	r1, r2
    lv_opa_t line_2d_blur[radius + swidth + 1];
 8011362:	ac02      	add	r4, sp, #8
    ofs_rb.x = coords->x2 - radius - LV_ANTIALIAS;
 8011364:	b29b      	uxth	r3, r3
    ofs_lb.x = coords->x1 + radius + LV_ANTIALIAS;
 8011366:	63b9      	str	r1, [r7, #56]	; 0x38
    for(line = 0; line <= radius + swidth; line++) {        /*Check all rows and make the 1D blur to 2D*/
 8011368:	6d39      	ldr	r1, [r7, #80]	; 0x50
    ofs_rb.y = coords->y2 - radius - LV_ANTIALIAS;
 801136a:	61b8      	str	r0, [r7, #24]
 801136c:	b200      	sxth	r0, r0
    lv_opa_t line_2d_blur[radius + swidth + 1];
 801136e:	657c      	str	r4, [r7, #84]	; 0x54
    for(line = 0; line <= radius + swidth; line++) {        /*Check all rows and make the 1D blur to 2D*/
 8011370:	2900      	cmp	r1, #0
    ofs_rb.x = coords->x2 - radius - LV_ANTIALIAS;
 8011372:	b21c      	sxth	r4, r3
    ofs_rb.y = coords->y2 - radius - LV_ANTIALIAS;
 8011374:	6438      	str	r0, [r7, #64]	; 0x40
    ofs_rb.x = coords->x2 - radius - LV_ANTIALIAS;
 8011376:	647c      	str	r4, [r7, #68]	; 0x44
    for(line = 0; line <= radius + swidth; line++) {        /*Check all rows and make the 1D blur to 2D*/
 8011378:	f2c0 80f4 	blt.w	8011564 <lv_draw_rect+0x18d0>
 801137c:	f1ce 0e00 	rsb	lr, lr, #0
 8011380:	2100      	movs	r1, #0
 8011382:	3a01      	subs	r2, #1
 8011384:	3301      	adds	r3, #1
 8011386:	fa0f f08e 	sxth.w	r0, lr
 801138a:	6379      	str	r1, [r7, #52]	; 0x34
 801138c:	b292      	uxth	r2, r2
 801138e:	f8c7 a01c 	str.w	sl, [r7, #28]
 8011392:	64b8      	str	r0, [r7, #72]	; 0x48
 8011394:	b29b      	uxth	r3, r3
 8011396:	4608      	mov	r0, r1
 8011398:	613a      	str	r2, [r7, #16]
 801139a:	60fb      	str	r3, [r7, #12]
 801139c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                if(col_rel < -swidth) {                         /*Outside of the blurred area. */
 801139e:	f1c8 0e00 	rsb	lr, r8, #0
                    col_rel = radius - curve_x[line] - col;
 80113a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80113a4:	f833 c010 	ldrh.w	ip, [r3, r0, lsl #1]
    if(r >= (h >> 1)) {
 80113a8:	2300      	movs	r3, #0
 80113aa:	f8d7 a028 	ldr.w	sl, [r7, #40]	; 0x28
                    col_rel = radius - curve_x[line] - col;
 80113ae:	eba2 020c 	sub.w	r2, r2, ip
    if(r >= (h >> 1)) {
 80113b2:	461e      	mov	r6, r3
 80113b4:	65bb      	str	r3, [r7, #88]	; 0x58
                    col_rel = radius - curve_x[line] - col;
 80113b6:	64fa      	str	r2, [r7, #76]	; 0x4c
            for(line_rel = -swidth; line_rel <= swidth; line_rel ++) {
 80113b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80113ba:	4590      	cmp	r8, r2
 80113bc:	f2c0 80d6 	blt.w	801156c <lv_draw_rect+0x18d8>
 80113c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113c2:	2100      	movs	r1, #0
 80113c4:	1b9b      	subs	r3, r3, r6
 80113c6:	b21b      	sxth	r3, r3
 80113c8:	667b      	str	r3, [r7, #100]	; 0x64
                if(line + line_rel < 0) {                       /*Below the radius, here is the blur of the edge */
 80113ca:	1813      	adds	r3, r2, r0
 80113cc:	f100 8083 	bmi.w	80114d6 <lv_draw_rect+0x1842>
                } else if(line + line_rel > radius) {           /*Above the radius, here won't be more 1D blur*/
 80113d0:	4553      	cmp	r3, sl
 80113d2:	dc15      	bgt.n	8011400 <lv_draw_rect+0x176c>
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 80113d4:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80113d6:	f102 0b01 	add.w	fp, r2, #1
 80113da:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 80113de:	eba3 030c 	sub.w	r3, r3, ip
 80113e2:	1b9b      	subs	r3, r3, r6
 80113e4:	b21b      	sxth	r3, r3
                if(col_rel < -swidth) {                         /*Outside of the blurred area. */
 80113e6:	4573      	cmp	r3, lr
                else px_opa_sum += line_1d_blur[swidth - col_rel];              /*On the 1D blur (+ swidth to align to the center)*/
 80113e8:	eba8 0503 	sub.w	r5, r8, r3
                if(col_rel < -swidth) {                         /*Outside of the blurred area. */
 80113ec:	db7a      	blt.n	80114e4 <lv_draw_rect+0x1850>
                } else if(col_rel > swidth) px_opa_sum += line_1d_blur[0];      /*Inside the not blurred area*/
 80113ee:	4598      	cmp	r8, r3
 80113f0:	da67      	bge.n	80114c2 <lv_draw_rect+0x182e>
 80113f2:	fa0f f28b 	sxth.w	r2, fp
 80113f6:	f8d9 3000 	ldr.w	r3, [r9]
            for(line_rel = -swidth; line_rel <= swidth; line_rel ++) {
 80113fa:	4590      	cmp	r8, r2
                } else if(col_rel > swidth) px_opa_sum += line_1d_blur[0];      /*Inside the not blurred area*/
 80113fc:	4419      	add	r1, r3
            for(line_rel = -swidth; line_rel <= swidth; line_rel ++) {
 80113fe:	dae4      	bge.n	80113ca <lv_draw_rect+0x1736>
 8011400:	f3c1 2107 	ubfx	r1, r1, #8, #8
            line_2d_blur[col] = px_opa_sum >> SHADOW_OPA_EXTRA_PRECISION;
 8011404:	6d7b      	ldr	r3, [r7, #84]	; 0x54
        for(col = 0; col <= radius + swidth; col++) {        /*Check all pixels in a 1D blur line (from the origo to last shadow pixel (radius + swidth))*/
 8011406:	3601      	adds	r6, #1
            line_2d_blur[col] = px_opa_sum >> SHADOW_OPA_EXTRA_PRECISION;
 8011408:	6dba      	ldr	r2, [r7, #88]	; 0x58
        for(col = 0; col <= radius + swidth; col++) {        /*Check all pixels in a 1D blur line (from the origo to last shadow pixel (radius + swidth))*/
 801140a:	b2b6      	uxth	r6, r6
            line_2d_blur[col] = px_opa_sum >> SHADOW_OPA_EXTRA_PRECISION;
 801140c:	5499      	strb	r1, [r3, r2]
        for(col = 0; col <= radius + swidth; col++) {        /*Check all pixels in a 1D blur line (from the origo to last shadow pixel (radius + swidth))*/
 801140e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011410:	65be      	str	r6, [r7, #88]	; 0x58
 8011412:	42b3      	cmp	r3, r6
 8011414:	dad0      	bge.n	80113b8 <lv_draw_rect+0x1724>
        point_rt.x = curve_x[line] + ofs_rt.x + 1;
 8011416:	68fa      	ldr	r2, [r7, #12]
        for(d = 1; d < col; d++) {
 8011418:	2e01      	cmp	r6, #1
 801141a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
        point_rt.x = curve_x[line] + ofs_rt.x + 1;
 801141c:	eb02 010c 	add.w	r1, r2, ip
 8011420:	697c      	ldr	r4, [r7, #20]
        point_lt.x = ofs_lt.x -  curve_x[line] - 1;
 8011422:	693a      	ldr	r2, [r7, #16]
 8011424:	633b      	str	r3, [r7, #48]	; 0x30
        point_rt.x = curve_x[line] + ofs_rt.x + 1;
 8011426:	b289      	uxth	r1, r1
        point_lt.x = ofs_lt.x -  curve_x[line] - 1;
 8011428:	eba2 000c 	sub.w	r0, r2, ip
 801142c:	461a      	mov	r2, r3
 801142e:	eba4 0303 	sub.w	r3, r4, r3
 8011432:	69bc      	ldr	r4, [r7, #24]
 8011434:	b280      	uxth	r0, r0
 8011436:	eb04 0b02 	add.w	fp, r4, r2
 801143a:	b21c      	sxth	r4, r3
 801143c:	fa0f fb8b 	sxth.w	fp, fp
        for(d = 1; d < col; d++) {
 8011440:	f240 8081 	bls.w	8011546 <lv_draw_rect+0x18b2>
 8011444:	1eb3      	subs	r3, r6, #2
 8011446:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 8011448:	f8c7 8024 	str.w	r8, [r7, #36]	; 0x24
 801144c:	b29b      	uxth	r3, r3
 801144e:	46aa      	mov	sl, r5
 8011450:	b2aa      	uxth	r2, r5
 8011452:	f8c7 9020 	str.w	r9, [r7, #32]
 8011456:	3301      	adds	r3, #1
 8011458:	4410      	add	r0, r2
 801145a:	1a8a      	subs	r2, r1, r2
 801145c:	18eb      	adds	r3, r5, r3
 801145e:	65b8      	str	r0, [r7, #88]	; 0x58
 8011460:	4690      	mov	r8, r2
 8011462:	667b      	str	r3, [r7, #100]	; 0x64
 8011464:	69fb      	ldr	r3, [r7, #28]
 8011466:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011468:	e010      	b.n	801148c <lv_draw_rect+0x17f8>
            if(point_lb.x < ofs_lb.x && point_lb.y > ofs_lb.y) {
 801146a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801146c:	455b      	cmp	r3, fp
 801146e:	db42      	blt.n	80114f6 <lv_draw_rect+0x1862>
            if(point_rt.x > ofs_rt.x && point_rt.y < ofs_rt.y) {
 8011470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011472:	42ab      	cmp	r3, r5
 8011474:	da05      	bge.n	8011482 <lv_draw_rect+0x17ee>
 8011476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011478:	42a3      	cmp	r3, r4
 801147a:	dc54      	bgt.n	8011526 <lv_draw_rect+0x1892>
            if(point_rb.x > ofs_rb.x && point_rb.y > ofs_rb.y) {
 801147c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801147e:	455b      	cmp	r3, fp
 8011480:	db45      	blt.n	801150e <lv_draw_rect+0x187a>
 8011482:	f10a 0a01 	add.w	sl, sl, #1
        for(d = 1; d < col; d++) {
 8011486:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011488:	4553      	cmp	r3, sl
 801148a:	d058      	beq.n	801153e <lv_draw_rect+0x18aa>
 801148c:	fa1f f58a 	uxth.w	r5, sl
 8011490:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011492:	eba3 0905 	sub.w	r9, r3, r5
            if(point_lt.x < ofs_lt.x && point_lt.y < ofs_lt.y) {
 8011496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011498:	4445      	add	r5, r8
 801149a:	fa0f f989 	sxth.w	r9, r9
 801149e:	b22d      	sxth	r5, r5
 80114a0:	454b      	cmp	r3, r9
 80114a2:	dde5      	ble.n	8011470 <lv_draw_rect+0x17dc>
 80114a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114a6:	42a3      	cmp	r3, r4
 80114a8:	dddf      	ble.n	801146a <lv_draw_rect+0x17d6>
                px_fp(point_lt.x, point_lt.y, mask, style->body.shadow.color, line_2d_blur[d]);
 80114aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114ac:	4621      	mov	r1, r4
 80114ae:	f89a 0001 	ldrb.w	r0, [sl, #1]
 80114b2:	4eb7      	ldr	r6, [pc, #732]	; (8011790 <lv_draw_rect+0x1afc>)
 80114b4:	699b      	ldr	r3, [r3, #24]
 80114b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80114b8:	6836      	ldr	r6, [r6, #0]
 80114ba:	9000      	str	r0, [sp, #0]
 80114bc:	4648      	mov	r0, r9
 80114be:	47b0      	blx	r6
 80114c0:	e7d3      	b.n	801146a <lv_draw_rect+0x17d6>
 80114c2:	fa0f f28b 	sxth.w	r2, fp
                else px_opa_sum += line_1d_blur[swidth - col_rel];              /*On the 1D blur (+ swidth to align to the center)*/
 80114c6:	f859 3025 	ldr.w	r3, [r9, r5, lsl #2]
            for(line_rel = -swidth; line_rel <= swidth; line_rel ++) {
 80114ca:	4590      	cmp	r8, r2
                else px_opa_sum += line_1d_blur[swidth - col_rel];              /*On the 1D blur (+ swidth to align to the center)*/
 80114cc:	4419      	add	r1, r3
            for(line_rel = -swidth; line_rel <= swidth; line_rel ++) {
 80114ce:	db97      	blt.n	8011400 <lv_draw_rect+0x176c>
                if(line + line_rel < 0) {                       /*Below the radius, here is the blur of the edge */
 80114d0:	1813      	adds	r3, r2, r0
 80114d2:	f57f af7d 	bpl.w	80113d0 <lv_draw_rect+0x173c>
 80114d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80114d8:	f102 0b01 	add.w	fp, r2, #1
                if(col_rel < -swidth) {                         /*Outside of the blurred area. */
 80114dc:	4573      	cmp	r3, lr
                else px_opa_sum += line_1d_blur[swidth - col_rel];              /*On the 1D blur (+ swidth to align to the center)*/
 80114de:	eba8 0503 	sub.w	r5, r8, r3
                if(col_rel < -swidth) {                         /*Outside of the blurred area. */
 80114e2:	da84      	bge.n	80113ee <lv_draw_rect+0x175a>
                    if(line_rel == -swidth) line_ready = true;  /*If no data even on the very first line then it wont't be anything else in this line*/
 80114e4:	4572      	cmp	r2, lr
 80114e6:	d18b      	bne.n	8011400 <lv_draw_rect+0x176c>
            line_2d_blur[col] = px_opa_sum >> SHADOW_OPA_EXTRA_PRECISION;
 80114e8:	0a09      	lsrs	r1, r1, #8
                col++;      /*To make this line to the last one ( drawing will go to '< col')*/
 80114ea:	3601      	adds	r6, #1
            line_2d_blur[col] = px_opa_sum >> SHADOW_OPA_EXTRA_PRECISION;
 80114ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80114ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
                col++;      /*To make this line to the last one ( drawing will go to '< col')*/
 80114f0:	b2b6      	uxth	r6, r6
            line_2d_blur[col] = px_opa_sum >> SHADOW_OPA_EXTRA_PRECISION;
 80114f2:	5499      	strb	r1, [r3, r2]
 80114f4:	e78f      	b.n	8011416 <lv_draw_rect+0x1782>
                px_fp(point_lb.x, point_lb.y, mask, style->body.shadow.color, line_2d_blur[d]);
 80114f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114f8:	4648      	mov	r0, r9
 80114fa:	f89a 1001 	ldrb.w	r1, [sl, #1]
 80114fe:	4ea4      	ldr	r6, [pc, #656]	; (8011790 <lv_draw_rect+0x1afc>)
 8011500:	699b      	ldr	r3, [r3, #24]
 8011502:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011504:	6836      	ldr	r6, [r6, #0]
 8011506:	9100      	str	r1, [sp, #0]
 8011508:	4659      	mov	r1, fp
 801150a:	47b0      	blx	r6
 801150c:	e7b0      	b.n	8011470 <lv_draw_rect+0x17dc>
                px_fp(point_rb.x, point_rb.y, mask, style->body.shadow.color, line_2d_blur[d]);
 801150e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011510:	4628      	mov	r0, r5
 8011512:	f89a 1001 	ldrb.w	r1, [sl, #1]
 8011516:	4d9e      	ldr	r5, [pc, #632]	; (8011790 <lv_draw_rect+0x1afc>)
 8011518:	699b      	ldr	r3, [r3, #24]
 801151a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801151c:	682d      	ldr	r5, [r5, #0]
 801151e:	9100      	str	r1, [sp, #0]
 8011520:	4659      	mov	r1, fp
 8011522:	47a8      	blx	r5
 8011524:	e7ad      	b.n	8011482 <lv_draw_rect+0x17ee>
                px_fp(point_rt.x, point_rt.y, mask, style->body.shadow.color, line_2d_blur[d]);
 8011526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011528:	4621      	mov	r1, r4
 801152a:	f89a 0001 	ldrb.w	r0, [sl, #1]
 801152e:	4e98      	ldr	r6, [pc, #608]	; (8011790 <lv_draw_rect+0x1afc>)
 8011530:	699b      	ldr	r3, [r3, #24]
 8011532:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011534:	6836      	ldr	r6, [r6, #0]
 8011536:	9000      	str	r0, [sp, #0]
 8011538:	4628      	mov	r0, r5
 801153a:	47b0      	blx	r6
 801153c:	e79e      	b.n	801147c <lv_draw_rect+0x17e8>
 801153e:	f8d7 8024 	ldr.w	r8, [r7, #36]	; 0x24
 8011542:	f8d7 9020 	ldr.w	r9, [r7, #32]
        if(line == 0) lv_draw_shadow_full_straight(coords, mask, style, line_2d_blur);
 8011546:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801154a:	b18b      	cbz	r3, 8011570 <lv_draw_rect+0x18dc>
 801154c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    for(line = 0; line <= radius + swidth; line++) {        /*Check all rows and make the 1D blur to 2D*/
 801154e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011550:	3301      	adds	r3, #1
 8011552:	3001      	adds	r0, #1
 8011554:	637b      	str	r3, [r7, #52]	; 0x34
 8011556:	b200      	sxth	r0, r0
 8011558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801155a:	4283      	cmp	r3, r0
 801155c:	f6bf af1e 	bge.w	801139c <lv_draw_rect+0x1708>
 8011560:	f8d7 a01c 	ldr.w	sl, [r7, #28]
 8011564:	f8d7 d004 	ldr.w	sp, [r7, #4]
 8011568:	f7fe bbaf 	b.w	800fcca <lv_draw_rect+0x36>
            for(line_rel = -swidth; line_rel <= swidth; line_rel ++) {
 801156c:	2100      	movs	r1, #0
 801156e:	e749      	b.n	8011404 <lv_draw_rect+0x1770>
 8011570:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011572:	69f8      	ldr	r0, [r7, #28]
 8011574:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 8011578:	f9b2 6000 	ldrsh.w	r6, [r2]
 801157c:	f100 0a18 	add.w	sl, r0, #24
    return area_p->x2 - area_p->x1 + 1;
 8011580:	b2ab      	uxth	r3, r5
 8011582:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8011586:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801158a:	fa1f fb86 	uxth.w	fp, r6
 801158e:	4619      	mov	r1, r3
 8011590:	64fb      	str	r3, [r7, #76]	; 0x4c
    return area_p->y2 - area_p->y1 + 1;
 8011592:	fa1f f38e 	uxth.w	r3, lr
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8011596:	8982      	ldrh	r2, [r0, #12]
    return area_p->x2 - area_p->x1 + 1;
 8011598:	3101      	adds	r1, #1
 801159a:	f9b0 001c 	ldrsh.w	r0, [r0, #28]
    return area_p->y2 - area_p->y1 + 1;
 801159e:	fa1f f48c 	uxth.w	r4, ip
 80115a2:	65bb      	str	r3, [r7, #88]	; 0x58
    return area_p->x2 - area_p->x1 + 1;
 80115a4:	eba1 010b 	sub.w	r1, r1, fp
 80115a8:	6678      	str	r0, [r7, #100]	; 0x64
    return area_p->y2 - area_p->y1 + 1;
 80115aa:	1c63      	adds	r3, r4, #1
 80115ac:	6db8      	ldr	r0, [r7, #88]	; 0x58
    if(r >= (w >> 1)) {
 80115ae:	f341 014e 	sbfx	r1, r1, #1, #15
 80115b2:	1a1b      	subs	r3, r3, r0
 80115b4:	428a      	cmp	r2, r1
 80115b6:	b21b      	sxth	r3, r3
 80115b8:	db05      	blt.n	80115c6 <lv_draw_rect+0x1932>
        r = (w >> 1);
 80115ba:	b289      	uxth	r1, r1
        if(r != 0) r--;
 80115bc:	2900      	cmp	r1, #0
 80115be:	f000 80a2 	beq.w	8011706 <lv_draw_rect+0x1a72>
 80115c2:	1e4a      	subs	r2, r1, #1
 80115c4:	b292      	uxth	r2, r2
    if(r >= (h >> 1)) {
 80115c6:	105b      	asrs	r3, r3, #1
 80115c8:	4293      	cmp	r3, r2
 80115ca:	f340 8097 	ble.w	80116fc <lv_draw_rect+0x1a68>
    if(r > 0) r -= LV_ANTIALIAS;
 80115ce:	2a00      	cmp	r2, #0
 80115d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80115d2:	bf08      	it	eq
 80115d4:	2201      	moveq	r2, #1
    right_area.y1 = coords->y1 + radius + LV_ANTIALIAS;
 80115d6:	3301      	adds	r3, #1
    top_area.x2 = coords->x2 - radius - LV_ANTIALIAS;
 80115d8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    right_area.y2 = coords->y2 - radius - LV_ANTIALIAS;
 80115da:	3c01      	subs	r4, #1
    top_area.x1 = coords->x1 + radius + LV_ANTIALIAS;
 80115dc:	f10b 0001 	add.w	r0, fp, #1
    right_area.y1 = coords->y1 + radius + LV_ANTIALIAS;
 80115e0:	4413      	add	r3, r2
    top_area.x2 = coords->x2 - radius - LV_ANTIALIAS;
 80115e2:	3901      	subs	r1, #1
    right_area.y2 = coords->y2 - radius - LV_ANTIALIAS;
 80115e4:	1aa4      	subs	r4, r4, r2
    top_area.x1 = coords->x1 + radius + LV_ANTIALIAS;
 80115e6:	4410      	add	r0, r2
    right_area.y1 = coords->y1 + radius + LV_ANTIALIAS;
 80115e8:	b21b      	sxth	r3, r3
    top_area.x2 = coords->x2 - radius - LV_ANTIALIAS;
 80115ea:	1a8a      	subs	r2, r1, r2
    right_area.y2 = coords->y2 - radius - LV_ANTIALIAS;
 80115ec:	b224      	sxth	r4, r4
    right_area.x1 = coords->x2 + 1 - LV_ANTIALIAS;
 80115ee:	f8a7 5080 	strh.w	r5, [r7, #128]	; 0x80
    right_area.y1 = coords->y1 + radius + LV_ANTIALIAS;
 80115f2:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
    top_area.x1 = coords->x1 + radius + LV_ANTIALIAS;
 80115f6:	b200      	sxth	r0, r0
    left_area.y1 = coords->y1 + radius + LV_ANTIALIAS;
 80115f8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    top_area.x2 = coords->x2 - radius - LV_ANTIALIAS;
 80115fc:	b212      	sxth	r2, r2
    for(d = 1 /*+ LV_ANTIALIAS*/; d <= swidth/* - LV_ANTIALIAS*/; d++) {
 80115fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    right_area.x2 = right_area.x1;
 8011600:	f8a7 5084 	strh.w	r5, [r7, #132]	; 0x84
    for(d = 1 /*+ LV_ANTIALIAS*/; d <= swidth/* - LV_ANTIALIAS*/; d++) {
 8011604:	2b00      	cmp	r3, #0
    right_area.y2 = coords->y2 - radius - LV_ANTIALIAS;
 8011606:	f8a7 4086 	strh.w	r4, [r7, #134]	; 0x86
    left_area.y2 = coords->y2 - radius - LV_ANTIALIAS;
 801160a:	f8a7 408e 	strh.w	r4, [r7, #142]	; 0x8e
    top_area.x1 = coords->x1 + radius + LV_ANTIALIAS;
 801160e:	f8a7 0090 	strh.w	r0, [r7, #144]	; 0x90
    bottom_area.x1 = coords->x1 + radius + LV_ANTIALIAS;
 8011612:	f8a7 0098 	strh.w	r0, [r7, #152]	; 0x98
    top_area.x2 = coords->x2 - radius - LV_ANTIALIAS;
 8011616:	f8a7 2094 	strh.w	r2, [r7, #148]	; 0x94
    bottom_area.x2 = coords->x2 - radius - LV_ANTIALIAS;
 801161a:	f8a7 209c 	strh.w	r2, [r7, #156]	; 0x9c
    left_area.x1 = coords->x1 - 1 + LV_ANTIALIAS;
 801161e:	f8a7 6088 	strh.w	r6, [r7, #136]	; 0x88
    left_area.x2 = left_area.x1;
 8011622:	f8a7 608c 	strh.w	r6, [r7, #140]	; 0x8c
    top_area.y1 = coords->y1 - 1 + LV_ANTIALIAS;
 8011626:	f8a7 e092 	strh.w	lr, [r7, #146]	; 0x92
    top_area.y2 = top_area.y1;
 801162a:	f8a7 e096 	strh.w	lr, [r7, #150]	; 0x96
    bottom_area.y1 = coords->y2 + 1 - LV_ANTIALIAS;
 801162e:	f8a7 c09a 	strh.w	ip, [r7, #154]	; 0x9a
    bottom_area.y2 = bottom_area.y1;
 8011632:	f8a7 c09e 	strh.w	ip, [r7, #158]	; 0x9e
    for(d = 1 /*+ LV_ANTIALIAS*/; d <= swidth/* - LV_ANTIALIAS*/; d++) {
 8011636:	dd89      	ble.n	801154c <lv_draw_rect+0x18b8>
 8011638:	4b56      	ldr	r3, [pc, #344]	; (8011794 <lv_draw_rect+0x1b00>)
 801163a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801163e:	f8c7 8024 	str.w	r8, [r7, #36]	; 0x24
 8011642:	2401      	movs	r4, #1
 8011644:	681e      	ldr	r6, [r3, #0]
 8011646:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801164a:	f8c7 9020 	str.w	r9, [r7, #32]
 801164e:	f107 0b80 	add.w	fp, r7, #128	; 0x80
 8011652:	65bb      	str	r3, [r7, #88]	; 0x58
 8011654:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8011658:	f8d7 8068 	ldr.w	r8, [r7, #104]	; 0x68
 801165c:	4699      	mov	r9, r3
 801165e:	64fa      	str	r2, [r7, #76]	; 0x4c
        opa_act = map[d];
 8011660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
        fill_fp(&right_area, mask, style->body.shadow.color, opa_act);
 8011662:	4641      	mov	r1, r8
 8011664:	f8da 2000 	ldr.w	r2, [sl]
 8011668:	4658      	mov	r0, fp
        opa_act = map[d];
 801166a:	5d1d      	ldrb	r5, [r3, r4]
 801166c:	3401      	adds	r4, #1
        fill_fp(&right_area, mask, style->body.shadow.color, opa_act);
 801166e:	462b      	mov	r3, r5
 8011670:	b224      	sxth	r4, r4
 8011672:	47b0      	blx	r6
        right_area.x1++;
 8011674:	f8b7 0080 	ldrh.w	r0, [r7, #128]	; 0x80
        right_area.x2++;
 8011678:	f8b7 e084 	ldrh.w	lr, [r7, #132]	; 0x84
        fill_fp(&left_area, mask, style->body.shadow.color, opa_act);
 801167c:	462b      	mov	r3, r5
        right_area.x1++;
 801167e:	3001      	adds	r0, #1
        fill_fp(&left_area, mask, style->body.shadow.color, opa_act);
 8011680:	f8da 2000 	ldr.w	r2, [sl]
        right_area.x2++;
 8011684:	f10e 0e01 	add.w	lr, lr, #1
        fill_fp(&left_area, mask, style->body.shadow.color, opa_act);
 8011688:	4641      	mov	r1, r8
        right_area.x1++;
 801168a:	f8a7 0080 	strh.w	r0, [r7, #128]	; 0x80
        right_area.x2++;
 801168e:	f8a7 e084 	strh.w	lr, [r7, #132]	; 0x84
        fill_fp(&left_area, mask, style->body.shadow.color, opa_act);
 8011692:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011694:	47b0      	blx	r6
        left_area.x1--;
 8011696:	f8b7 0088 	ldrh.w	r0, [r7, #136]	; 0x88
        left_area.x2--;
 801169a:	f8b7 e08c 	ldrh.w	lr, [r7, #140]	; 0x8c
        fill_fp(&top_area, mask, style->body.shadow.color, opa_act);
 801169e:	462b      	mov	r3, r5
        left_area.x1--;
 80116a0:	3801      	subs	r0, #1
        fill_fp(&top_area, mask, style->body.shadow.color, opa_act);
 80116a2:	f8da 2000 	ldr.w	r2, [sl]
        left_area.x2--;
 80116a6:	f10e 3eff 	add.w	lr, lr, #4294967295
        fill_fp(&top_area, mask, style->body.shadow.color, opa_act);
 80116aa:	4641      	mov	r1, r8
        left_area.x1--;
 80116ac:	f8a7 0088 	strh.w	r0, [r7, #136]	; 0x88
        left_area.x2--;
 80116b0:	f8a7 e08c 	strh.w	lr, [r7, #140]	; 0x8c
        fill_fp(&top_area, mask, style->body.shadow.color, opa_act);
 80116b4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80116b6:	47b0      	blx	r6
        top_area.y2--;
 80116b8:	f8b7 1096 	ldrh.w	r1, [r7, #150]	; 0x96
        top_area.y1--;
 80116bc:	f8b7 0092 	ldrh.w	r0, [r7, #146]	; 0x92
        fill_fp(&bottom_area, mask, style->body.shadow.color, opa_act);
 80116c0:	462b      	mov	r3, r5
        top_area.y2--;
 80116c2:	1e4d      	subs	r5, r1, #1
        fill_fp(&bottom_area, mask, style->body.shadow.color, opa_act);
 80116c4:	f8da 2000 	ldr.w	r2, [sl]
        top_area.y1--;
 80116c8:	3801      	subs	r0, #1
        fill_fp(&bottom_area, mask, style->body.shadow.color, opa_act);
 80116ca:	4641      	mov	r1, r8
        top_area.y2--;
 80116cc:	f8a7 5096 	strh.w	r5, [r7, #150]	; 0x96
        top_area.y1--;
 80116d0:	f8a7 0092 	strh.w	r0, [r7, #146]	; 0x92
        fill_fp(&bottom_area, mask, style->body.shadow.color, opa_act);
 80116d4:	4648      	mov	r0, r9
 80116d6:	47b0      	blx	r6
        bottom_area.y2++;
 80116d8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
        bottom_area.y1++;
 80116dc:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
        bottom_area.y2++;
 80116e0:	3301      	adds	r3, #1
        bottom_area.y1++;
 80116e2:	3201      	adds	r2, #1
        bottom_area.y2++;
 80116e4:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    for(d = 1 /*+ LV_ANTIALIAS*/; d <= swidth/* - LV_ANTIALIAS*/; d++) {
 80116e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
        bottom_area.y1++;
 80116ea:	f8a7 209a 	strh.w	r2, [r7, #154]	; 0x9a
    for(d = 1 /*+ LV_ANTIALIAS*/; d <= swidth/* - LV_ANTIALIAS*/; d++) {
 80116ee:	42a3      	cmp	r3, r4
 80116f0:	dab6      	bge.n	8011660 <lv_draw_rect+0x19cc>
 80116f2:	f8d7 8024 	ldr.w	r8, [r7, #36]	; 0x24
 80116f6:	f8d7 9020 	ldr.w	r9, [r7, #32]
 80116fa:	e727      	b.n	801154c <lv_draw_rect+0x18b8>
        r = (h >> 1);
 80116fc:	b29b      	uxth	r3, r3
        if(r != 0) r--;
 80116fe:	b143      	cbz	r3, 8011712 <lv_draw_rect+0x1a7e>
 8011700:	3b01      	subs	r3, #1
 8011702:	b29a      	uxth	r2, r3
 8011704:	e763      	b.n	80115ce <lv_draw_rect+0x193a>
    if(r >= (h >> 1)) {
 8011706:	105b      	asrs	r3, r3, #1
 8011708:	2b00      	cmp	r3, #0
 801170a:	ddf7      	ble.n	80116fc <lv_draw_rect+0x1a68>
 801170c:	2201      	movs	r2, #1
 801170e:	4603      	mov	r3, r0
 8011710:	e761      	b.n	80115d6 <lv_draw_rect+0x1942>
        if(r != 0) r--;
 8011712:	2201      	movs	r2, #1
 8011714:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011716:	e75e      	b.n	80115d6 <lv_draw_rect+0x1942>
            work_area.x1 = coords->x2 - radius - LV_ANTIALIAS;
 8011718:	6e3a      	ldr	r2, [r7, #96]	; 0x60
            fill_fp(&work_area, mask, color, opa);
 801171a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
            work_area.x1 = coords->x2 - radius - LV_ANTIALIAS;
 801171c:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
            work_area.y1 = coords->y2 - bwidth;
 8011720:	88d0      	ldrh	r0, [r2, #6]
            work_area.x1 = coords->x2 - radius - LV_ANTIALIAS;
 8011722:	1e69      	subs	r1, r5, #1
            work_area.x2 = coords->x2;
 8011724:	f8a7 509c 	strh.w	r5, [r7, #156]	; 0x9c
            work_area.y2 = coords->y2 - radius - 1 - LV_ANTIALIAS;
 8011728:	1e85      	subs	r5, r0, #2
            work_area.y1 = coords->y2 - bwidth;
 801172a:	eba0 0b0b 	sub.w	fp, r0, fp
            work_area.x1 = coords->x2 - radius - LV_ANTIALIAS;
 801172e:	1b89      	subs	r1, r1, r6
            fill_fp(&work_area, mask, color, opa);
 8011730:	6dba      	ldr	r2, [r7, #88]	; 0x58
            work_area.y2 = coords->y2 - radius - 1 - LV_ANTIALIAS;
 8011732:	1bae      	subs	r6, r5, r6
            fill_fp(&work_area, mask, color, opa);
 8011734:	4d17      	ldr	r5, [pc, #92]	; (8011794 <lv_draw_rect+0x1b00>)
            work_area.x1 = coords->x2 - radius - LV_ANTIALIAS;
 8011736:	f8a7 1098 	strh.w	r1, [r7, #152]	; 0x98
            fill_fp(&work_area, mask, color, opa);
 801173a:	f107 0098 	add.w	r0, r7, #152	; 0x98
 801173e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
            work_area.y2 = coords->y2 - radius - 1 - LV_ANTIALIAS;
 8011740:	f8a7 609e 	strh.w	r6, [r7, #158]	; 0x9e
            work_area.y1 = coords->y2 - bwidth;
 8011744:	f8a7 b09a 	strh.w	fp, [r7, #154]	; 0x9a
            fill_fp(&work_area, mask, color, opa);
 8011748:	682d      	ldr	r5, [r5, #0]
 801174a:	47a8      	blx	r5
 801174c:	f7ff b948 	b.w	80109e0 <lv_draw_rect+0xd4c>
            work_area.x1 = coords->x1;
 8011750:	6e3a      	ldr	r2, [r7, #96]	; 0x60
            fill_fp(&work_area, mask, color, opa);
 8011752:	4d10      	ldr	r5, [pc, #64]	; (8011794 <lv_draw_rect+0x1b00>)
            work_area.x1 = coords->x1;
 8011754:	f9b2 1000 	ldrsh.w	r1, [r2]
            work_area.y1 = coords->y2 - bwidth;
 8011758:	88d0      	ldrh	r0, [r2, #6]
            work_area.x2 = coords->x1 + radius + LV_ANTIALIAS;
 801175a:	f101 0e01 	add.w	lr, r1, #1
            work_area.x1 = coords->x1;
 801175e:	f8a7 1098 	strh.w	r1, [r7, #152]	; 0x98
            work_area.y2 = coords->y2 - radius - 1 - LV_ANTIALIAS;
 8011762:	f1a0 0c02 	sub.w	ip, r0, #2
            work_area.y1 = coords->y2 - bwidth;
 8011766:	eba0 000b 	sub.w	r0, r0, fp
            work_area.x2 = coords->x1 + radius + LV_ANTIALIAS;
 801176a:	44b6      	add	lr, r6
            fill_fp(&work_area, mask, color, opa);
 801176c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
            work_area.y2 = coords->y2 - radius - 1 - LV_ANTIALIAS;
 801176e:	ebac 0c06 	sub.w	ip, ip, r6
            work_area.y1 = coords->y2 - bwidth;
 8011772:	f8a7 009a 	strh.w	r0, [r7, #154]	; 0x9a
            fill_fp(&work_area, mask, color, opa);
 8011776:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011778:	f107 0098 	add.w	r0, r7, #152	; 0x98
            work_area.x2 = coords->x1 + radius + LV_ANTIALIAS;
 801177c:	f8a7 e09c 	strh.w	lr, [r7, #156]	; 0x9c
            fill_fp(&work_area, mask, color, opa);
 8011780:	6eb9      	ldr	r1, [r7, #104]	; 0x68
            work_area.y2 = coords->y2 - radius - 1 - LV_ANTIALIAS;
 8011782:	f8a7 c09e 	strh.w	ip, [r7, #158]	; 0x9e
            fill_fp(&work_area, mask, color, opa);
 8011786:	682d      	ldr	r5, [r5, #0]
 8011788:	47a8      	blx	r5
 801178a:	f7ff b924 	b.w	80109d6 <lv_draw_rect+0xd42>
 801178e:	bf00      	nop
 8011790:	0808b610 	.word	0x0808b610
 8011794:	0808b60c 	.word	0x0808b60c
            work_area.x1 = coords->x2 - radius - LV_ANTIALIAS;
 8011798:	6e3a      	ldr	r2, [r7, #96]	; 0x60
            fill_fp(&work_area, mask, color, opa);
 801179a:	4d43      	ldr	r5, [pc, #268]	; (80118a8 <lv_draw_rect+0x1c14>)
            work_area.x1 = coords->x2 - radius - LV_ANTIALIAS;
 801179c:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
            work_area.y1 = coords->y1 + radius + 1 + LV_ANTIALIAS;
 80117a0:	8850      	ldrh	r0, [r2, #2]
            work_area.x1 = coords->x2 - radius - LV_ANTIALIAS;
 80117a2:	f101 3eff 	add.w	lr, r1, #4294967295
            work_area.x2 = coords->x2;
 80117a6:	f8a7 109c 	strh.w	r1, [r7, #156]	; 0x9c
            work_area.y1 = coords->y1 + radius + 1 + LV_ANTIALIAS;
 80117aa:	f100 0c02 	add.w	ip, r0, #2
            work_area.y2 = coords->y1 + bwidth;
 80117ae:	4458      	add	r0, fp
            work_area.x1 = coords->x2 - radius - LV_ANTIALIAS;
 80117b0:	ebae 0e06 	sub.w	lr, lr, r6
            fill_fp(&work_area, mask, color, opa);
 80117b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
            work_area.y1 = coords->y1 + radius + 1 + LV_ANTIALIAS;
 80117b6:	44b4      	add	ip, r6
            work_area.y2 = coords->y1 + bwidth;
 80117b8:	f8a7 009e 	strh.w	r0, [r7, #158]	; 0x9e
            fill_fp(&work_area, mask, color, opa);
 80117bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80117be:	f107 0098 	add.w	r0, r7, #152	; 0x98
            work_area.x1 = coords->x2 - radius - LV_ANTIALIAS;
 80117c2:	f8a7 e098 	strh.w	lr, [r7, #152]	; 0x98
            fill_fp(&work_area, mask, color, opa);
 80117c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
            work_area.y1 = coords->y1 + radius + 1 + LV_ANTIALIAS;
 80117c8:	f8a7 c09a 	strh.w	ip, [r7, #154]	; 0x9a
            fill_fp(&work_area, mask, color, opa);
 80117cc:	682d      	ldr	r5, [r5, #0]
 80117ce:	47a8      	blx	r5
 80117d0:	f7ff b8fc 	b.w	80109cc <lv_draw_rect+0xd38>
            work_area.x1 = coords->x1;
 80117d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
            fill_fp(&work_area, mask, color, opa);
 80117d6:	4d34      	ldr	r5, [pc, #208]	; (80118a8 <lv_draw_rect+0x1c14>)
            work_area.x1 = coords->x1;
 80117d8:	f9b2 1000 	ldrsh.w	r1, [r2]
            work_area.y1 = coords->y1 + radius + 1 + LV_ANTIALIAS;
 80117dc:	8850      	ldrh	r0, [r2, #2]
            work_area.x2 = coords->x1 + radius + LV_ANTIALIAS;
 80117de:	f101 0e01 	add.w	lr, r1, #1
            work_area.x1 = coords->x1;
 80117e2:	f8a7 1098 	strh.w	r1, [r7, #152]	; 0x98
            work_area.y1 = coords->y1 + radius + 1 + LV_ANTIALIAS;
 80117e6:	f100 0c02 	add.w	ip, r0, #2
            work_area.y2 = coords->y1 + bwidth;
 80117ea:	4458      	add	r0, fp
            work_area.x2 = coords->x1 + radius + LV_ANTIALIAS;
 80117ec:	44b6      	add	lr, r6
            fill_fp(&work_area, mask, color, opa);
 80117ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
            work_area.y1 = coords->y1 + radius + 1 + LV_ANTIALIAS;
 80117f0:	44b4      	add	ip, r6
            work_area.y2 = coords->y1 + bwidth;
 80117f2:	f8a7 009e 	strh.w	r0, [r7, #158]	; 0x9e
            fill_fp(&work_area, mask, color, opa);
 80117f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80117f8:	f107 0098 	add.w	r0, r7, #152	; 0x98
            work_area.x2 = coords->x1 + radius + LV_ANTIALIAS;
 80117fc:	f8a7 e09c 	strh.w	lr, [r7, #156]	; 0x9c
            fill_fp(&work_area, mask, color, opa);
 8011800:	6eb9      	ldr	r1, [r7, #104]	; 0x68
            work_area.y1 = coords->y1 + radius + 1 + LV_ANTIALIAS;
 8011802:	f8a7 c09a 	strh.w	ip, [r7, #154]	; 0x9a
            fill_fp(&work_area, mask, color, opa);
 8011806:	682d      	ldr	r5, [r5, #0]
 8011808:	47a8      	blx	r5
 801180a:	f7ff b8da 	b.w	80109c2 <lv_draw_rect+0xd2e>
    if(r >= (h >> 1)) {
 801180e:	105b      	asrs	r3, r3, #1
 8011810:	2b00      	cmp	r3, #0
 8011812:	f77f ad1d 	ble.w	8011250 <lv_draw_rect+0x15bc>
    if(r > 0) r -= LV_ANTIALIAS;
 8011816:	2301      	movs	r3, #1
 8011818:	62bb      	str	r3, [r7, #40]	; 0x28
 801181a:	461d      	mov	r5, r3
 801181c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801181e:	e524      	b.n	801126a <lv_draw_rect+0x15d6>
            px_fp(lb_origo.x + LV_CIRC_OCT4_X(aa_p), lb_origo.y + LV_CIRC_OCT4_Y(aa_p), mask, style->body.border.color, aa_opa);
 8011820:	8eb8      	ldrh	r0, [r7, #52]	; 0x34
 8011822:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8011824:	6d7e      	ldr	r6, [r7, #84]	; 0x54
 8011826:	4401      	add	r1, r0
 8011828:	4c20      	ldr	r4, [pc, #128]	; (80118ac <lv_draw_rect+0x1c18>)
 801182a:	1a30      	subs	r0, r6, r0
 801182c:	f8da 3010 	ldr.w	r3, [sl, #16]
 8011830:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011832:	b209      	sxth	r1, r1
 8011834:	9500      	str	r5, [sp, #0]
 8011836:	b200      	sxth	r0, r0
 8011838:	6824      	ldr	r4, [r4, #0]
 801183a:	47a0      	blx	r4
 801183c:	e44d      	b.n	80110da <lv_draw_rect+0x1446>
            px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask, style->body.border.color, aa_opa);
 801183e:	8eb8      	ldrh	r0, [r7, #52]	; 0x34
 8011840:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8011842:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 8011844:	4401      	add	r1, r0
 8011846:	4c19      	ldr	r4, [pc, #100]	; (80118ac <lv_draw_rect+0x1c18>)
 8011848:	4430      	add	r0, r6
 801184a:	f8da 3010 	ldr.w	r3, [sl, #16]
 801184e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011850:	b209      	sxth	r1, r1
 8011852:	9500      	str	r5, [sp, #0]
 8011854:	b200      	sxth	r0, r0
 8011856:	6824      	ldr	r4, [r4, #0]
 8011858:	47a0      	blx	r4
 801185a:	e43a      	b.n	80110d2 <lv_draw_rect+0x143e>
            px_fp(lt_origo.x + LV_CIRC_OCT6_X(aa_p), lt_origo.y + LV_CIRC_OCT6_Y(aa_p), mask, style->body.border.color, aa_opa);
 801185c:	8eb8      	ldrh	r0, [r7, #52]	; 0x34
 801185e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011860:	6d7e      	ldr	r6, [r7, #84]	; 0x54
 8011862:	1a09      	subs	r1, r1, r0
 8011864:	4c11      	ldr	r4, [pc, #68]	; (80118ac <lv_draw_rect+0x1c18>)
 8011866:	1a30      	subs	r0, r6, r0
 8011868:	f8da 3010 	ldr.w	r3, [sl, #16]
 801186c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801186e:	b209      	sxth	r1, r1
 8011870:	9500      	str	r5, [sp, #0]
 8011872:	b200      	sxth	r0, r0
 8011874:	6824      	ldr	r4, [r4, #0]
 8011876:	47a0      	blx	r4
 8011878:	e433      	b.n	80110e2 <lv_draw_rect+0x144e>
        if(part & LV_BORDER_LEFT) {
 801187a:	0766      	lsls	r6, r4, #29
 801187c:	f004 0501 	and.w	r5, r4, #1
 8011880:	f57e acba 	bpl.w	80101f8 <lv_draw_rect+0x564>
            work_area.x1 = coords->x1;
 8011884:	6e38      	ldr	r0, [r7, #96]	; 0x60
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 8011886:	4641      	mov	r1, r8
            work_area.x1 = coords->x1;
 8011888:	f9b0 2000 	ldrsh.w	r2, [r0]
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 801188c:	8843      	ldrh	r3, [r0, #2]
            work_area.x2 = coords->x1 + bwidth;
 801188e:	eb0b 0002 	add.w	r0, fp, r2
            work_area.x1 = coords->x1;
 8011892:	f8a7 2098 	strh.w	r2, [r7, #152]	; 0x98
            work_area.x2 = coords->x1 + bwidth;
 8011896:	f8a7 009c 	strh.w	r0, [r7, #156]	; 0x9c
 801189a:	f7fe bc9a 	b.w	80101d2 <lv_draw_rect+0x53e>
 801189e:	4601      	mov	r1, r0
 80118a0:	e434      	b.n	801110c <lv_draw_rect+0x1478>
        int16_t diff = col == 0 ? 0 : curve_x[col - 1] - curve_x[col];
 80118a2:	461c      	mov	r4, r3
 80118a4:	f7fe bb60 	b.w	800ff68 <lv_draw_rect+0x2d4>
 80118a8:	0808b60c 	.word	0x0808b60c
 80118ac:	0808b610 	.word	0x0808b610

080118b0 <sw_color_fill>:
 * @param fill_area coordinates of an area to fill. Relative to 'mem_area'.
 * @param color fill color
 * @param opa opacity (0, LV_OPA_TRANSP: transparent ... 255, LV_OPA_COVER, fully cover)
 */
static void sw_color_fill(lv_area_t * mem_area, lv_color_t * mem, const lv_area_t * fill_area, lv_color_t color, lv_opa_t opa)
{
 80118b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118b4:	461d      	mov	r5, r3
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 80118b6:	8883      	ldrh	r3, [r0, #4]
 80118b8:	b089      	sub	sp, #36	; 0x24
 80118ba:	4690      	mov	r8, r2
 80118bc:	3301      	adds	r3, #1
 80118be:	8802      	ldrh	r2, [r0, #0]
 80118c0:	9106      	str	r1, [sp, #24]
 80118c2:	b2e9      	uxtb	r1, r5
 80118c4:	1a9b      	subs	r3, r3, r2
 80118c6:	f3c5 2907 	ubfx	r9, r5, #8, #8
 80118ca:	9104      	str	r1, [sp, #16]
 80118cc:	f3c5 4b07 	ubfx	fp, r5, #16, #8
 80118d0:	b21b      	sxth	r3, r3
 80118d2:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 80118d6:	9303      	str	r3, [sp, #12]
 80118d8:	9105      	str	r1, [sp, #20]
    /*Set all row in vdb to the given color*/
    lv_coord_t row;
    lv_coord_t col;
    lv_coord_t mem_width = lv_area_get_width(mem_area);

    lv_disp_t * disp = lv_disp_get_active();
 80118da:	f000 fe93 	bl	8012604 <lv_disp_get_active>
    if(disp->driver.vdb_wr) {
 80118de:	6943      	ldr	r3, [r0, #20]
 80118e0:	b363      	cbz	r3, 801193c <sw_color_fill+0x8c>
        for(col = fill_area->x1; col <= fill_area->x2; col++) {
 80118e2:	f9b8 7000 	ldrsh.w	r7, [r8]
 80118e6:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 80118ea:	4297      	cmp	r7, r2
 80118ec:	dc23      	bgt.n	8011936 <sw_color_fill+0x86>
 80118ee:	4682      	mov	sl, r0
 80118f0:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 80118f4:	f9b8 4002 	ldrsh.w	r4, [r8, #2]
 80118f8:	429c      	cmp	r4, r3
 80118fa:	dc18      	bgt.n	801192e <sw_color_fill+0x7e>
                disp->driver.vdb_wr((uint8_t *)mem, mem_width, col, row, color, opa);
 80118fc:	9b04      	ldr	r3, [sp, #16]
 80118fe:	9a05      	ldr	r2, [sp, #20]
 8011900:	f363 0507 	bfi	r5, r3, #0, #8
 8011904:	4623      	mov	r3, r4
 8011906:	3401      	adds	r4, #1
 8011908:	f8da 6014 	ldr.w	r6, [sl, #20]
 801190c:	f369 250f 	bfi	r5, r9, #8, #8
 8011910:	9201      	str	r2, [sp, #4]
 8011912:	9903      	ldr	r1, [sp, #12]
 8011914:	463a      	mov	r2, r7
 8011916:	f36b 4517 	bfi	r5, fp, #16, #8
 801191a:	9806      	ldr	r0, [sp, #24]
 801191c:	b224      	sxth	r4, r4
 801191e:	9500      	str	r5, [sp, #0]
 8011920:	47b0      	blx	r6
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 8011922:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8011926:	42a3      	cmp	r3, r4
 8011928:	dae8      	bge.n	80118fc <sw_color_fill+0x4c>
 801192a:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 801192e:	3701      	adds	r7, #1
 8011930:	b23f      	sxth	r7, r7
        for(col = fill_area->x1; col <= fill_area->x2; col++) {
 8011932:	4297      	cmp	r7, r2
 8011934:	ddde      	ble.n	80118f4 <sw_color_fill+0x44>
                }
                mem += mem_width;
            }
        }
    }
}
 8011936:	b009      	add	sp, #36	; 0x24
 8011938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        mem += fill_area->y1 * mem_width;  /*Go to the first row*/
 801193c:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 8011940:	9a03      	ldr	r2, [sp, #12]
 8011942:	9307      	str	r3, [sp, #28]
 8011944:	fb03 f602 	mul.w	r6, r3, r2
 8011948:	9b06      	ldr	r3, [sp, #24]
 801194a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
        if(opa == LV_OPA_COVER) {
 801194e:	9b05      	ldr	r3, [sp, #20]
 8011950:	2bff      	cmp	r3, #255	; 0xff
 8011952:	d058      	beq.n	8011a06 <sw_color_fill+0x156>
static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 8011954:	fa1f fa83 	uxth.w	sl, r3
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 8011958:	f9b8 2006 	ldrsh.w	r2, [r8, #6]
    ret.green_h = g_out >> 3;
    ret.green_l = g_out & 0x7;
#  else
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
#  endif
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 801195c:	9804      	ldr	r0, [sp, #16]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 801195e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8011962:	fb0b f10a 	mul.w	r1, fp, sl
            lv_color_t bg_tmp = LV_COLOR_BLACK;
 8011966:	f04f 477f 	mov.w	r7, #4278190080	; 0xff000000
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 801196a:	fb09 f90a 	mul.w	r9, r9, sl
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 801196e:	b29b      	uxth	r3, r3
 8011970:	9105      	str	r1, [sp, #20]
 8011972:	f3c1 2507 	ubfx	r5, r1, #8, #8
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 8011976:	9907      	ldr	r1, [sp, #28]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 8011978:	fb00 fa0a 	mul.w	sl, r0, sl
 801197c:	9206      	str	r2, [sp, #24]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 801197e:	f3c9 2407 	ubfx	r4, r9, #8, #8
 8011982:	4291      	cmp	r1, r2
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 8011984:	f3ca 2007 	ubfx	r0, sl, #8, #8
 8011988:	dcd5      	bgt.n	8011936 <sw_color_fill+0x86>
 801198a:	f9b8 2000 	ldrsh.w	r2, [r8]
 801198e:	9903      	ldr	r1, [sp, #12]
 8011990:	f9b8 8004 	ldrsh.w	r8, [r8, #4]
 8011994:	0089      	lsls	r1, r1, #2
 8011996:	9204      	str	r2, [sp, #16]
 8011998:	4542      	cmp	r2, r8
 801199a:	9103      	str	r1, [sp, #12]
 801199c:	dccb      	bgt.n	8011936 <sw_color_fill+0x86>
                    mem[col] = opa_tmp;
 801199e:	f04f 0bff 	mov.w	fp, #255	; 0xff
 80119a2:	469e      	mov	lr, r3
            for(col = fill_area->x1; col <= fill_area->x2; col++) {
 80119a4:	9a04      	ldr	r2, [sp, #16]
                    if(mem[col].full != bg_tmp.full) {
 80119a6:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
 80119aa:	f102 0c01 	add.w	ip, r2, #1
 80119ae:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 80119b2:	42b9      	cmp	r1, r7
 80119b4:	fa0f f28c 	sxth.w	r2, ip
 80119b8:	d012      	beq.n	80119e0 <sw_color_fill+0x130>
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 80119ba:	f3c1 4507 	ubfx	r5, r1, #16, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 80119be:	f3c1 2407 	ubfx	r4, r1, #8, #8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 80119c2:	b2c8      	uxtb	r0, r1
                        bg_tmp = mem[col];
 80119c4:	460f      	mov	r7, r1
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 80119c6:	9905      	ldr	r1, [sp, #20]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 80119c8:	fb0e 9404 	mla	r4, lr, r4, r9
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 80119cc:	fb0e a000 	mla	r0, lr, r0, sl
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 80119d0:	fb0e 1505 	mla	r5, lr, r5, r1
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 80119d4:	f3c4 2407 	ubfx	r4, r4, #8, #8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 80119d8:	f3c0 2007 	ubfx	r0, r0, #8, #8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 80119dc:	f3c5 2507 	ubfx	r5, r5, #8, #8
                for(col = fill_area->x1; col <= fill_area->x2; col++) {
 80119e0:	4590      	cmp	r8, r2
                    mem[col] = opa_tmp;
 80119e2:	705c      	strb	r4, [r3, #1]
 80119e4:	7018      	strb	r0, [r3, #0]
 80119e6:	709d      	strb	r5, [r3, #2]
 80119e8:	f883 b003 	strb.w	fp, [r3, #3]
                for(col = fill_area->x1; col <= fill_area->x2; col++) {
 80119ec:	dadb      	bge.n	80119a6 <sw_color_fill+0xf6>
 80119ee:	9b07      	ldr	r3, [sp, #28]
                mem += mem_width;
 80119f0:	9a03      	ldr	r2, [sp, #12]
 80119f2:	3301      	adds	r3, #1
 80119f4:	4416      	add	r6, r2
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 80119f6:	9a06      	ldr	r2, [sp, #24]
 80119f8:	b21b      	sxth	r3, r3
 80119fa:	4293      	cmp	r3, r2
 80119fc:	9307      	str	r3, [sp, #28]
 80119fe:	ddd1      	ble.n	80119a4 <sw_color_fill+0xf4>
}
 8011a00:	b009      	add	sp, #36	; 0x24
 8011a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            for(col = fill_area->x1; col <= fill_area->x2; col++) {
 8011a06:	f9b8 0000 	ldrsh.w	r0, [r8]
 8011a0a:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8011a0e:	4290      	cmp	r0, r2
 8011a10:	dc0d      	bgt.n	8011a2e <sw_color_fill+0x17e>
 8011a12:	4603      	mov	r3, r0
 8011a14:	9c04      	ldr	r4, [sp, #16]
                mem[col] = color;
 8011a16:	f364 0507 	bfi	r5, r4, #0, #8
 8011a1a:	1c59      	adds	r1, r3, #1
 8011a1c:	f369 250f 	bfi	r5, r9, #8, #8
 8011a20:	f36b 4517 	bfi	r5, fp, #16, #8
 8011a24:	f846 5023 	str.w	r5, [r6, r3, lsl #2]
 8011a28:	b20b      	sxth	r3, r1
            for(col = fill_area->x1; col <= fill_area->x2; col++) {
 8011a2a:	429a      	cmp	r2, r3
 8011a2c:	daf3      	bge.n	8011a16 <sw_color_fill+0x166>
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 8011a2e:	9c07      	ldr	r4, [sp, #28]
            lv_coord_t copy_size = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 8011a30:	1a15      	subs	r5, r2, r0
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 8011a32:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
            lv_color_t * mem_first = &mem[fill_area->x1];
 8011a36:	0080      	lsls	r0, r0, #2
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 8011a38:	3401      	adds	r4, #1
            lv_coord_t copy_size = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 8011a3a:	3501      	adds	r5, #1
            mem += mem_width;
 8011a3c:	9a03      	ldr	r2, [sp, #12]
            lv_color_t * mem_first = &mem[fill_area->x1];
 8011a3e:	eb06 0900 	add.w	r9, r6, r0
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 8011a42:	b224      	sxth	r4, r4
            mem += mem_width;
 8011a44:	0097      	lsls	r7, r2, #2
            lv_coord_t copy_size = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 8011a46:	00ad      	lsls	r5, r5, #2
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 8011a48:	42a3      	cmp	r3, r4
            mem += mem_width;
 8011a4a:	443e      	add	r6, r7
            lv_coord_t copy_size = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 8011a4c:	b22d      	sxth	r5, r5
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 8011a4e:	da03      	bge.n	8011a58 <sw_color_fill+0x1a8>
 8011a50:	e771      	b.n	8011936 <sw_color_fill+0x86>
 8011a52:	f9b8 0000 	ldrsh.w	r0, [r8]
 8011a56:	0080      	lsls	r0, r0, #2
 8011a58:	3401      	adds	r4, #1
                memcpy(&mem[fill_area->x1], mem_first, copy_size);
 8011a5a:	4430      	add	r0, r6
 8011a5c:	462a      	mov	r2, r5
 8011a5e:	4649      	mov	r1, r9
 8011a60:	f00b ffbc 	bl	801d9dc <memcpy>
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 8011a64:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8011a68:	b224      	sxth	r4, r4
                mem += mem_width;
 8011a6a:	443e      	add	r6, r7
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 8011a6c:	42a3      	cmp	r3, r4
 8011a6e:	daf0      	bge.n	8011a52 <sw_color_fill+0x1a2>
 8011a70:	e761      	b.n	8011936 <sw_color_fill+0x86>
 8011a72:	bf00      	nop

08011a74 <lv_vpx>:
{
 8011a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a78:	b082      	sub	sp, #8
 8011a7a:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
    if(opa < LV_OPA_MIN) return;
 8011a7e:	2c0f      	cmp	r4, #15
 8011a80:	d91a      	bls.n	8011ab8 <lv_vpx+0x44>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8011a82:	2cfc      	cmp	r4, #252	; 0xfc
 8011a84:	461f      	mov	r7, r3
 8011a86:	4615      	mov	r5, r2
 8011a88:	4688      	mov	r8, r1
 8011a8a:	4606      	mov	r6, r0
 8011a8c:	bf28      	it	cs
 8011a8e:	24ff      	movcs	r4, #255	; 0xff
    lv_vdb_t * vdb_p = lv_vdb_get();
 8011a90:	f7fb f94e 	bl	800cd30 <lv_vdb_get>
    if(!vdb_p) {
 8011a94:	4681      	mov	r9, r0
 8011a96:	b178      	cbz	r0, 8011ab8 <lv_vpx+0x44>
    if(x < mask_p->x1 || x > mask_p->x2 ||
 8011a98:	f9b5 3000 	ldrsh.w	r3, [r5]
 8011a9c:	42b3      	cmp	r3, r6
 8011a9e:	dc0b      	bgt.n	8011ab8 <lv_vpx+0x44>
 8011aa0:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8011aa4:	42b3      	cmp	r3, r6
 8011aa6:	db07      	blt.n	8011ab8 <lv_vpx+0x44>
 8011aa8:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8011aac:	4543      	cmp	r3, r8
 8011aae:	dc03      	bgt.n	8011ab8 <lv_vpx+0x44>
            y < mask_p->y1 || y > mask_p->y2) {
 8011ab0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8011ab4:	4543      	cmp	r3, r8
 8011ab6:	da02      	bge.n	8011abe <lv_vpx+0x4a>
}
 8011ab8:	b002      	add	sp, #8
 8011aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011abe:	8881      	ldrh	r1, [r0, #4]
 8011ac0:	8803      	ldrh	r3, [r0, #0]
 8011ac2:	3101      	adds	r1, #1
    y -= vdb_p->area.y1;
 8011ac4:	8840      	ldrh	r0, [r0, #2]
    x -= vdb_p->area.x1;
 8011ac6:	1af2      	subs	r2, r6, r3
 8011ac8:	1ac9      	subs	r1, r1, r3
    y -= vdb_p->area.y1;
 8011aca:	eba8 0800 	sub.w	r8, r8, r0
    x -= vdb_p->area.x1;
 8011ace:	b215      	sxth	r5, r2
 8011ad0:	b20e      	sxth	r6, r1
    lv_disp_t * disp = lv_disp_get_active();
 8011ad2:	f000 fd97 	bl	8012604 <lv_disp_get_active>
    if(disp->driver.vdb_wr) {
 8011ad6:	f8d0 a014 	ldr.w	sl, [r0, #20]
    y -= vdb_p->area.y1;
 8011ada:	fa0f f888 	sxth.w	r8, r8
    if(disp->driver.vdb_wr) {
 8011ade:	f1ba 0f00 	cmp.w	sl, #0
 8011ae2:	d008      	beq.n	8011af6 <lv_vpx+0x82>
        disp->driver.vdb_wr((uint8_t *)vdb_p->buf, vdb_width, x, y, color, opa);
 8011ae4:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8011ae8:	4643      	mov	r3, r8
 8011aea:	9401      	str	r4, [sp, #4]
 8011aec:	462a      	mov	r2, r5
 8011aee:	9700      	str	r7, [sp, #0]
 8011af0:	4631      	mov	r1, r6
 8011af2:	47d0      	blx	sl
 8011af4:	e7e0      	b.n	8011ab8 <lv_vpx+0x44>
        lv_color_t * vdb_px_p = vdb_p->buf + y * vdb_width + x;
 8011af6:	fb06 5808 	mla	r8, r6, r8, r5
        if(opa == LV_OPA_COVER) {
 8011afa:	2cff      	cmp	r4, #255	; 0xff
        lv_color_t * vdb_px_p = vdb_p->buf + y * vdb_width + x;
 8011afc:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8011b00:	eb05 0388 	add.w	r3, r5, r8, lsl #2
        if(opa == LV_OPA_COVER) {
 8011b04:	d026      	beq.n	8011b54 <lv_vpx+0xe0>
 8011b06:	f1c4 06ff 	rsb	r6, r4, #255	; 0xff
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 8011b0a:	f815 9028 	ldrb.w	r9, [r5, r8, lsl #2]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 8011b0e:	f893 c002 	ldrb.w	ip, [r3, #2]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 8011b12:	b2f8      	uxtb	r0, r7
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 8011b14:	b2b6      	uxth	r6, r6
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 8011b16:	f893 e001 	ldrb.w	lr, [r3, #1]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 8011b1a:	f3c7 4107 	ubfx	r1, r7, #16, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 8011b1e:	f3c7 2207 	ubfx	r2, r7, #8, #8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 8011b22:	fb19 f906 	smulbb	r9, r9, r6
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 8011b26:	fb1c f706 	smulbb	r7, ip, r6
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 8011b2a:	fb1e f606 	smulbb	r6, lr, r6
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 8011b2e:	fb00 9004 	mla	r0, r0, r4, r9
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 8011b32:	fb04 7101 	mla	r1, r4, r1, r7
            *vdb_px_p = lv_color_mix(color, *vdb_px_p, opa);
 8011b36:	27ff      	movs	r7, #255	; 0xff
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 8011b38:	fb04 6202 	mla	r2, r4, r2, r6
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 8011b3c:	f3c0 2007 	ubfx	r0, r0, #8, #8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 8011b40:	f3c1 2107 	ubfx	r1, r1, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 8011b44:	f3c2 2207 	ubfx	r2, r2, #8, #8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 8011b48:	f805 0028 	strb.w	r0, [r5, r8, lsl #2]
 8011b4c:	7099      	strb	r1, [r3, #2]
 8011b4e:	705a      	strb	r2, [r3, #1]
 8011b50:	70df      	strb	r7, [r3, #3]
 8011b52:	e7b1      	b.n	8011ab8 <lv_vpx+0x44>
            *vdb_px_p = color;
 8011b54:	f845 7028 	str.w	r7, [r5, r8, lsl #2]
 8011b58:	e7ae      	b.n	8011ab8 <lv_vpx+0x44>
 8011b5a:	bf00      	nop

08011b5c <lv_vfill>:
    if(opa < LV_OPA_MIN) return;
 8011b5c:	2b0f      	cmp	r3, #15
 8011b5e:	d976      	bls.n	8011c4e <lv_vfill+0xf2>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8011b60:	2bfc      	cmp	r3, #252	; 0xfc
{
 8011b62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011b66:	b087      	sub	sp, #28
 8011b68:	461c      	mov	r4, r3
 8011b6a:	4605      	mov	r5, r0
 8011b6c:	460f      	mov	r7, r1
 8011b6e:	4616      	mov	r6, r2
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8011b70:	bf28      	it	cs
 8011b72:	24ff      	movcs	r4, #255	; 0xff
    lv_vdb_t * vdb_p = lv_vdb_get();
 8011b74:	f7fb f8dc 	bl	800cd30 <lv_vdb_get>
    if(!vdb_p) {
 8011b78:	4681      	mov	r9, r0
 8011b7a:	2800      	cmp	r0, #0
 8011b7c:	d064      	beq.n	8011c48 <lv_vfill+0xec>
    union_ok = lv_area_intersect(&res_a, cords_p, mask_p);
 8011b7e:	463a      	mov	r2, r7
 8011b80:	4629      	mov	r1, r5
 8011b82:	a802      	add	r0, sp, #8
 8011b84:	f000 ffa0 	bl	8012ac8 <lv_area_intersect>
    if(union_ok == false) return;
 8011b88:	2800      	cmp	r0, #0
 8011b8a:	d05d      	beq.n	8011c48 <lv_vfill+0xec>
    vdb_rel_a.x1 = res_a.x1 - vdb_p->area.x1;
 8011b8c:	f8b9 7000 	ldrh.w	r7, [r9]
    vdb_rel_a.x2 = res_a.x2 - vdb_p->area.x1;
 8011b90:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    vdb_rel_a.x1 = res_a.x1 - vdb_p->area.x1;
 8011b94:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    vdb_rel_a.x2 = res_a.x2 - vdb_p->area.x1;
 8011b98:	1bd2      	subs	r2, r2, r7
    vdb_rel_a.y1 = res_a.y1 - vdb_p->area.y1;
 8011b9a:	f8b9 5002 	ldrh.w	r5, [r9, #2]
    vdb_rel_a.x1 = res_a.x1 - vdb_p->area.x1;
 8011b9e:	1bc9      	subs	r1, r1, r7
    vdb_rel_a.y1 = res_a.y1 - vdb_p->area.y1;
 8011ba0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    vdb_rel_a.x2 = res_a.x2 - vdb_p->area.x1;
 8011ba4:	b292      	uxth	r2, r2
    vdb_rel_a.y2 = res_a.y2 - vdb_p->area.y1;
 8011ba6:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    vdb_rel_a.x1 = res_a.x1 - vdb_p->area.x1;
 8011baa:	b289      	uxth	r1, r1
    vdb_rel_a.y1 = res_a.y1 - vdb_p->area.y1;
 8011bac:	1b5b      	subs	r3, r3, r5
 8011bae:	1c57      	adds	r7, r2, #1
    vdb_rel_a.y2 = res_a.y2 - vdb_p->area.y1;
 8011bb0:	1b40      	subs	r0, r0, r5
    vdb_rel_a.y1 = res_a.y1 - vdb_p->area.y1;
 8011bb2:	b21b      	sxth	r3, r3
    vdb_rel_a.x1 = res_a.x1 - vdb_p->area.x1;
 8011bb4:	f8ad 1010 	strh.w	r1, [sp, #16]
 8011bb8:	1a7f      	subs	r7, r7, r1
    vdb_rel_a.x2 = res_a.x2 - vdb_p->area.x1;
 8011bba:	f8ad 2014 	strh.w	r2, [sp, #20]
    vdb_rel_a.y1 = res_a.y1 - vdb_p->area.y1;
 8011bbe:	f8ad 3012 	strh.w	r3, [sp, #18]
 8011bc2:	b23f      	sxth	r7, r7
    vdb_rel_a.y2 = res_a.y2 - vdb_p->area.y1;
 8011bc4:	f8ad 0016 	strh.w	r0, [sp, #22]
    lv_color_t * vdb_buf_tmp = vdb_p->buf;
 8011bc8:	f8d9 1008 	ldr.w	r1, [r9, #8]
    if(w < VFILL_HW_ACC_SIZE_LIMIT) {
 8011bcc:	2f31      	cmp	r7, #49	; 0x31
 8011bce:	dd3f      	ble.n	8011c50 <lv_vfill+0xf4>
 8011bd0:	f8b9 8004 	ldrh.w	r8, [r9, #4]
    vdb_buf_tmp += vdb_width * vdb_rel_a.y1;
 8011bd4:	009b      	lsls	r3, r3, #2
 8011bd6:	f8b9 2000 	ldrh.w	r2, [r9]
    else if(opa == LV_OPA_COVER) {
 8011bda:	2cff      	cmp	r4, #255	; 0xff
 8011bdc:	f108 0801 	add.w	r8, r8, #1
 8011be0:	eba8 0802 	sub.w	r8, r8, r2
 8011be4:	fa0f f888 	sxth.w	r8, r8
    vdb_buf_tmp += vdb_width * vdb_rel_a.y1;
 8011be8:	fb08 1503 	mla	r5, r8, r3, r1
    else if(opa == LV_OPA_COVER) {
 8011bec:	d03c      	beq.n	8011c68 <lv_vfill+0x10c>
        if(lv_disp_is_mem_blend_supported()) {
 8011bee:	f000 fd37 	bl	8012660 <lv_disp_is_mem_blend_supported>
 8011bf2:	2800      	cmp	r0, #0
 8011bf4:	d053      	beq.n	8011c9e <lv_vfill+0x142>
            if(color_array_tmp[0].full != color.full || last_width != w) {
 8011bf6:	4950      	ldr	r1, [pc, #320]	; (8011d38 <lv_vfill+0x1dc>)
 8011bf8:	4850      	ldr	r0, [pc, #320]	; (8011d3c <lv_vfill+0x1e0>)
 8011bfa:	680b      	ldr	r3, [r1, #0]
 8011bfc:	429e      	cmp	r6, r3
 8011bfe:	d02e      	beq.n	8011c5e <lv_vfill+0x102>
                for(i = 0; i < w; i++) {
 8011c00:	2200      	movs	r2, #0
 8011c02:	4613      	mov	r3, r2
 8011c04:	3301      	adds	r3, #1
                    color_array_tmp[i].full = color.full;
 8011c06:	f841 6022 	str.w	r6, [r1, r2, lsl #2]
                for(i = 0; i < w; i++) {
 8011c0a:	b29b      	uxth	r3, r3
 8011c0c:	42bb      	cmp	r3, r7
 8011c0e:	461a      	mov	r2, r3
 8011c10:	dbf8      	blt.n	8011c04 <lv_vfill+0xa8>
                last_width = w;
 8011c12:	8007      	strh	r7, [r0, #0]
            for(row = vdb_rel_a.y1; row <= vdb_rel_a.y2; row++) {
 8011c14:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8011c18:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8011c1c:	42b3      	cmp	r3, r6
 8011c1e:	db13      	blt.n	8011c48 <lv_vfill+0xec>
 8011c20:	ea4f 0888 	mov.w	r8, r8, lsl #2
                lv_disp_mem_blend(&vdb_buf_tmp[vdb_rel_a.x1], color_array_tmp, w, opa);
 8011c24:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8011d38 <lv_vfill+0x1dc>
 8011c28:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8011c2c:	3601      	adds	r6, #1
 8011c2e:	4623      	mov	r3, r4
 8011c30:	463a      	mov	r2, r7
 8011c32:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8011c36:	4649      	mov	r1, r9
 8011c38:	f000 fcf8 	bl	801262c <lv_disp_mem_blend>
            for(row = vdb_rel_a.y1; row <= vdb_rel_a.y2; row++) {
 8011c3c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8011c40:	b236      	sxth	r6, r6
                vdb_buf_tmp += vdb_width;
 8011c42:	4445      	add	r5, r8
            for(row = vdb_rel_a.y1; row <= vdb_rel_a.y2; row++) {
 8011c44:	42b3      	cmp	r3, r6
 8011c46:	daef      	bge.n	8011c28 <lv_vfill+0xcc>
}
 8011c48:	b007      	add	sp, #28
 8011c4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c4e:	4770      	bx	lr
        sw_color_fill(&vdb_p->area, vdb_p->buf, &vdb_rel_a, color, opa);
 8011c50:	9400      	str	r4, [sp, #0]
 8011c52:	4633      	mov	r3, r6
 8011c54:	4648      	mov	r0, r9
 8011c56:	aa04      	add	r2, sp, #16
 8011c58:	f7ff fe2a 	bl	80118b0 <sw_color_fill>
 8011c5c:	e7f4      	b.n	8011c48 <lv_vfill+0xec>
            if(color_array_tmp[0].full != color.full || last_width != w) {
 8011c5e:	f9b0 3000 	ldrsh.w	r3, [r0]
 8011c62:	42bb      	cmp	r3, r7
 8011c64:	d1cc      	bne.n	8011c00 <lv_vfill+0xa4>
 8011c66:	e7d5      	b.n	8011c14 <lv_vfill+0xb8>
        if(lv_disp_is_mem_fill_supported()) {
 8011c68:	f000 fd04 	bl	8012674 <lv_disp_is_mem_fill_supported>
 8011c6c:	b300      	cbz	r0, 8011cb0 <lv_vfill+0x154>
            for(row = vdb_rel_a.y1; row <= vdb_rel_a.y2; row++) {
 8011c6e:	f9bd 4012 	ldrsh.w	r4, [sp, #18]
 8011c72:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8011c76:	42a3      	cmp	r3, r4
 8011c78:	dbe6      	blt.n	8011c48 <lv_vfill+0xec>
 8011c7a:	ea4f 0888 	mov.w	r8, r8, lsl #2
                lv_disp_mem_fill(&vdb_buf_tmp[vdb_rel_a.x1], w, color);
 8011c7e:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8011c82:	3401      	adds	r4, #1
 8011c84:	4632      	mov	r2, r6
 8011c86:	4639      	mov	r1, r7
 8011c88:	eb05 0080 	add.w	r0, r5, r0, lsl #2
                vdb_buf_tmp += vdb_width;
 8011c8c:	4445      	add	r5, r8
                lv_disp_mem_fill(&vdb_buf_tmp[vdb_rel_a.x1], w, color);
 8011c8e:	f000 fcdd 	bl	801264c <lv_disp_mem_fill>
            for(row = vdb_rel_a.y1; row <= vdb_rel_a.y2; row++) {
 8011c92:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8011c96:	b224      	sxth	r4, r4
 8011c98:	42a3      	cmp	r3, r4
 8011c9a:	daf0      	bge.n	8011c7e <lv_vfill+0x122>
 8011c9c:	e7d4      	b.n	8011c48 <lv_vfill+0xec>
            sw_color_fill(&vdb_p->area, vdb_p->buf, &vdb_rel_a, color, opa);
 8011c9e:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8011ca2:	4633      	mov	r3, r6
 8011ca4:	9400      	str	r4, [sp, #0]
 8011ca6:	4648      	mov	r0, r9
 8011ca8:	aa04      	add	r2, sp, #16
 8011caa:	f7ff fe01 	bl	80118b0 <sw_color_fill>
 8011cae:	e7cb      	b.n	8011c48 <lv_vfill+0xec>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 8011cb0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8011cb4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8011cb8:	3301      	adds	r3, #1
 8011cba:	1a9b      	subs	r3, r3, r2
        else if(lv_area_get_height(&vdb_rel_a) > VFILL_HW_ACC_SIZE_LIMIT &&
 8011cbc:	b21b      	sxth	r3, r3
 8011cbe:	2b32      	cmp	r3, #50	; 0x32
 8011cc0:	dd2b      	ble.n	8011d1a <lv_vfill+0x1be>
                lv_disp_is_mem_blend_supported()) {
 8011cc2:	f000 fccd 	bl	8012660 <lv_disp_is_mem_blend_supported>
        else if(lv_area_get_height(&vdb_rel_a) > VFILL_HW_ACC_SIZE_LIMIT &&
 8011cc6:	b340      	cbz	r0, 8011d1a <lv_vfill+0x1be>
            if(color_array_tmp[0].full != color.full || last_width != w) {
 8011cc8:	491b      	ldr	r1, [pc, #108]	; (8011d38 <lv_vfill+0x1dc>)
 8011cca:	481c      	ldr	r0, [pc, #112]	; (8011d3c <lv_vfill+0x1e0>)
 8011ccc:	680b      	ldr	r3, [r1, #0]
 8011cce:	429e      	cmp	r6, r3
 8011cd0:	d02d      	beq.n	8011d2e <lv_vfill+0x1d2>
                for(i = 0; i < w; i++) {
 8011cd2:	2200      	movs	r2, #0
 8011cd4:	4613      	mov	r3, r2
 8011cd6:	3301      	adds	r3, #1
                    color_array_tmp[i].full = color.full;
 8011cd8:	f841 6022 	str.w	r6, [r1, r2, lsl #2]
                for(i = 0; i < w; i++) {
 8011cdc:	b29b      	uxth	r3, r3
 8011cde:	42bb      	cmp	r3, r7
 8011ce0:	461a      	mov	r2, r3
 8011ce2:	dbf8      	blt.n	8011cd6 <lv_vfill+0x17a>
                last_width = w;
 8011ce4:	8007      	strh	r7, [r0, #0]
            for(row = vdb_rel_a.y1; row <= vdb_rel_a.y2; row++) {
 8011ce6:	f9bd 4012 	ldrsh.w	r4, [sp, #18]
 8011cea:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8011cee:	42a3      	cmp	r3, r4
 8011cf0:	dbaa      	blt.n	8011c48 <lv_vfill+0xec>
 8011cf2:	ea4f 0888 	mov.w	r8, r8, lsl #2
                lv_disp_mem_blend(&vdb_buf_tmp[vdb_rel_a.x1], color_array_tmp, w, opa);
 8011cf6:	4e10      	ldr	r6, [pc, #64]	; (8011d38 <lv_vfill+0x1dc>)
 8011cf8:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8011cfc:	3401      	adds	r4, #1
 8011cfe:	23ff      	movs	r3, #255	; 0xff
 8011d00:	463a      	mov	r2, r7
 8011d02:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8011d06:	4631      	mov	r1, r6
 8011d08:	f000 fc90 	bl	801262c <lv_disp_mem_blend>
            for(row = vdb_rel_a.y1; row <= vdb_rel_a.y2; row++) {
 8011d0c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8011d10:	b224      	sxth	r4, r4
                vdb_buf_tmp += vdb_width;
 8011d12:	4445      	add	r5, r8
            for(row = vdb_rel_a.y1; row <= vdb_rel_a.y2; row++) {
 8011d14:	42a3      	cmp	r3, r4
 8011d16:	daef      	bge.n	8011cf8 <lv_vfill+0x19c>
 8011d18:	e796      	b.n	8011c48 <lv_vfill+0xec>
            sw_color_fill(&vdb_p->area, vdb_p->buf, &vdb_rel_a, color, opa);
 8011d1a:	22ff      	movs	r2, #255	; 0xff
 8011d1c:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8011d20:	4633      	mov	r3, r6
 8011d22:	4648      	mov	r0, r9
 8011d24:	9200      	str	r2, [sp, #0]
 8011d26:	aa04      	add	r2, sp, #16
 8011d28:	f7ff fdc2 	bl	80118b0 <sw_color_fill>
 8011d2c:	e78c      	b.n	8011c48 <lv_vfill+0xec>
            if(color_array_tmp[0].full != color.full || last_width != w) {
 8011d2e:	f9b0 3000 	ldrsh.w	r3, [r0]
 8011d32:	42bb      	cmp	r3, r7
 8011d34:	d1cd      	bne.n	8011cd2 <lv_vfill+0x176>
 8011d36:	e7d6      	b.n	8011ce6 <lv_vfill+0x18a>
 8011d38:	2000de34 	.word	0x2000de34
 8011d3c:	20000058 	.word	0x20000058

08011d40 <lv_vletter>:
{
 8011d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d44:	461e      	mov	r6, r3
 8011d46:	b09f      	sub	sp, #124	; 0x7c
    const uint8_t bpp1_opa_table[2] =  {0, 255};                   /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8011d48:	23ff      	movs	r3, #255	; 0xff
    const uint8_t bpp4_opa_table[16] = {0,   17,  34,  51,         /*Opacity mapping with bpp = 4*/
 8011d4a:	4d3f      	ldr	r5, [pc, #252]	; (8011e48 <lv_vletter+0x108>)
{
 8011d4c:	4694      	mov	ip, r2
 8011d4e:	f89d b0a4 	ldrb.w	fp, [sp, #164]	; 0xa4
    const uint8_t bpp1_opa_table[2] =  {0, 255};                   /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8011d52:	2200      	movs	r2, #0
 8011d54:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
    const uint8_t bpp2_opa_table[4] =  {0, 85, 170, 255};          /*Opacity mapping with bpp = 2*/
 8011d58:	4b3c      	ldr	r3, [pc, #240]	; (8011e4c <lv_vletter+0x10c>)
{
 8011d5a:	4686      	mov	lr, r0
 8011d5c:	460f      	mov	r7, r1
    const uint8_t bpp4_opa_table[16] = {0,   17,  34,  51,         /*Opacity mapping with bpp = 4*/
 8011d5e:	ac1a      	add	r4, sp, #104	; 0x68
    const uint8_t bpp1_opa_table[2] =  {0, 255};                   /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8011d60:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
    if(opa < LV_OPA_MIN) return;
 8011d64:	f1bb 0f0f 	cmp.w	fp, #15
    const uint8_t bpp2_opa_table[4] =  {0, 85, 170, 255};          /*Opacity mapping with bpp = 2*/
 8011d68:	9319      	str	r3, [sp, #100]	; 0x64
    const uint8_t bpp4_opa_table[16] = {0,   17,  34,  51,         /*Opacity mapping with bpp = 4*/
 8011d6a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8011d6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if(opa < LV_OPA_MIN) return;
 8011d72:	d947      	bls.n	8011e04 <lv_vletter+0xc4>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8011d74:	f1bb 0ffc 	cmp.w	fp, #252	; 0xfc
 8011d78:	bf28      	it	cs
 8011d7a:	f04f 0bff 	movcs.w	fp, #255	; 0xff
    if(font_p == NULL) {
 8011d7e:	f1bc 0f00 	cmp.w	ip, #0
 8011d82:	d03f      	beq.n	8011e04 <lv_vletter+0xc4>
    lv_coord_t pos_x = pos_p->x;
 8011d84:	f9be 3000 	ldrsh.w	r3, [lr]
 8011d88:	4665      	mov	r5, ip
    uint8_t letter_w = lv_font_get_real_width(font_p, letter);
 8011d8a:	4631      	mov	r1, r6
 8011d8c:	4660      	mov	r0, ip
    lv_coord_t pos_x = pos_p->x;
 8011d8e:	9303      	str	r3, [sp, #12]
    lv_coord_t pos_y = pos_p->y;
 8011d90:	f9be 3002 	ldrsh.w	r3, [lr, #2]
 8011d94:	9307      	str	r3, [sp, #28]
    uint8_t letter_w = lv_font_get_real_width(font_p, letter);
 8011d96:	f000 ffbd 	bl	8012d14 <lv_font_get_real_width>
    uint8_t bpp = lv_font_get_bpp(font_p, letter);  /*Bit per pixel (1,2, 4 or 8)*/
 8011d9a:	4631      	mov	r1, r6
    uint8_t letter_w = lv_font_get_real_width(font_p, letter);
 8011d9c:	4680      	mov	r8, r0
    uint8_t bpp = lv_font_get_bpp(font_p, letter);  /*Bit per pixel (1,2, 4 or 8)*/
 8011d9e:	4628      	mov	r0, r5
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline uint8_t lv_font_get_height(const lv_font_t * font_p)
{
    return font_p->h_px;
 8011da0:	f895 9020 	ldrb.w	r9, [r5, #32]
 8011da4:	f000 ffca 	bl	8012d3c <lv_font_get_bpp>
    if(lv_font_is_monospace(font_p, letter)) {
 8011da8:	4631      	mov	r1, r6
    uint8_t bpp = lv_font_get_bpp(font_p, letter);  /*Bit per pixel (1,2, 4 or 8)*/
 8011daa:	4682      	mov	sl, r0
    if(lv_font_is_monospace(font_p, letter)) {
 8011dac:	4628      	mov	r0, r5
 8011dae:	f000 ff6f 	bl	8012c90 <lv_font_is_monospace>
 8011db2:	2800      	cmp	r0, #0
 8011db4:	d13a      	bne.n	8011e2c <lv_vletter+0xec>
    switch(bpp) {
 8011db6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8011dba:	2b07      	cmp	r3, #7
 8011dbc:	d822      	bhi.n	8011e04 <lv_vletter+0xc4>
 8011dbe:	e8df f003 	tbb	[pc, r3]
 8011dc2:	0424      	.short	0x0424
 8011dc4:	21213021 	.word	0x21213021
 8011dc8:	2a21      	.short	0x2a21
 8011dca:	23c0      	movs	r3, #192	; 0xc0
            bpp_opa_table = bpp2_opa_table;
 8011dcc:	aa19      	add	r2, sp, #100	; 0x64
    switch(bpp) {
 8011dce:	9302      	str	r3, [sp, #8]
            bpp_opa_table = bpp2_opa_table;
 8011dd0:	920a      	str	r2, [sp, #40]	; 0x28
            mask_init = 0xC0;
 8011dd2:	9309      	str	r3, [sp, #36]	; 0x24
    const uint8_t * map_p = lv_font_get_bitmap(font_p, letter);
 8011dd4:	4631      	mov	r1, r6
 8011dd6:	4628      	mov	r0, r5
 8011dd8:	f000 ff72 	bl	8012cc0 <lv_font_get_bitmap>
    if(map_p == NULL) return;
 8011ddc:	4604      	mov	r4, r0
 8011dde:	b188      	cbz	r0, 8011e04 <lv_vletter+0xc4>
    if(pos_x + letter_w < mask_p->x1 || pos_x > mask_p->x2 ||
 8011de0:	9a03      	ldr	r2, [sp, #12]
 8011de2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8011de6:	eb08 0602 	add.w	r6, r8, r2
 8011dea:	429e      	cmp	r6, r3
 8011dec:	db0a      	blt.n	8011e04 <lv_vletter+0xc4>
 8011dee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011df2:	4293      	cmp	r3, r2
 8011df4:	db06      	blt.n	8011e04 <lv_vletter+0xc4>
            pos_y + letter_h < mask_p->y1 || pos_y > mask_p->y2) return;
 8011df6:	9a07      	ldr	r2, [sp, #28]
 8011df8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011dfc:	eb09 0502 	add.w	r5, r9, r2
    if(pos_x + letter_w < mask_p->x1 || pos_x > mask_p->x2 ||
 8011e00:	429d      	cmp	r5, r3
 8011e02:	da25      	bge.n	8011e50 <lv_vletter+0x110>
}
 8011e04:	b01f      	add	sp, #124	; 0x7c
 8011e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(bpp) {
 8011e0a:	2380      	movs	r3, #128	; 0x80
            bpp_opa_table = bpp1_opa_table;
 8011e0c:	aa18      	add	r2, sp, #96	; 0x60
    switch(bpp) {
 8011e0e:	9302      	str	r3, [sp, #8]
            bpp_opa_table = bpp1_opa_table;
 8011e10:	920a      	str	r2, [sp, #40]	; 0x28
            mask_init = 0x80;
 8011e12:	9309      	str	r3, [sp, #36]	; 0x24
 8011e14:	e7de      	b.n	8011dd4 <lv_vletter+0x94>
            break;             /*No opa table, pixel value will be used directly*/
 8011e16:	23ff      	movs	r3, #255	; 0xff
            bpp_opa_table = NULL;
 8011e18:	2200      	movs	r2, #0
            break;             /*No opa table, pixel value will be used directly*/
 8011e1a:	9302      	str	r3, [sp, #8]
            bpp_opa_table = NULL;
 8011e1c:	920a      	str	r2, [sp, #40]	; 0x28
            mask_init = 0xFF;
 8011e1e:	9309      	str	r3, [sp, #36]	; 0x24
            break;             /*No opa table, pixel value will be used directly*/
 8011e20:	e7d8      	b.n	8011dd4 <lv_vletter+0x94>
            break;
 8011e22:	23f0      	movs	r3, #240	; 0xf0
            bpp_opa_table = bpp4_opa_table;
 8011e24:	940a      	str	r4, [sp, #40]	; 0x28
            break;
 8011e26:	9302      	str	r3, [sp, #8]
            mask_init = 0xF0;
 8011e28:	9309      	str	r3, [sp, #36]	; 0x24
            break;
 8011e2a:	e7d3      	b.n	8011dd4 <lv_vletter+0x94>
        pos_x += (lv_font_get_width(font_p, letter) - letter_w) / 2;
 8011e2c:	4631      	mov	r1, r6
 8011e2e:	4628      	mov	r0, r5
 8011e30:	f000 ff58 	bl	8012ce4 <lv_font_get_width>
 8011e34:	ebb0 0008 	subs.w	r0, r0, r8
 8011e38:	9b03      	ldr	r3, [sp, #12]
 8011e3a:	bf48      	it	mi
 8011e3c:	3001      	addmi	r0, #1
 8011e3e:	eb03 0060 	add.w	r0, r3, r0, asr #1
 8011e42:	b203      	sxth	r3, r0
 8011e44:	9303      	str	r3, [sp, #12]
 8011e46:	e7b6      	b.n	8011db6 <lv_vletter+0x76>
 8011e48:	0808b640 	.word	0x0808b640
 8011e4c:	ffaa5500 	.word	0xffaa5500
            pos_y + letter_h < mask_p->y1 || pos_y > mask_p->y2) return;
 8011e50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011e54:	4293      	cmp	r3, r2
 8011e56:	dbd5      	blt.n	8011e04 <lv_vletter+0xc4>
    lv_vdb_t * vdb_p = lv_vdb_get();
 8011e58:	f7fa ff6a 	bl	800cd30 <lv_vdb_get>
    if(!vdb_p) {
 8011e5c:	9004      	str	r0, [sp, #16]
 8011e5e:	2800      	cmp	r0, #0
 8011e60:	d0d0      	beq.n	8011e04 <lv_vletter+0xc4>
    return area_p->x2 - area_p->x1 + 1;
 8011e62:	8883      	ldrh	r3, [r0, #4]
    uint8_t width_byte_bpp = (letter_w * bpp) >> 3;    /*Letter width in byte. Real width in the font*/
 8011e64:	fb1a f208 	smulbb	r2, sl, r8
 8011e68:	f9b0 e000 	ldrsh.w	lr, [r0]
 8011e6c:	3301      	adds	r3, #1
    lv_color_t * vdb_buf_tmp = vdb_p->buf;
 8011e6e:	6880      	ldr	r0, [r0, #8]
    uint8_t width_byte_bpp = (letter_w * bpp) >> 3;    /*Letter width in byte. Real width in the font*/
 8011e70:	f3c2 01c7 	ubfx	r1, r2, #3, #8
 8011e74:	eba3 030e 	sub.w	r3, r3, lr
    lv_color_t * vdb_buf_tmp = vdb_p->buf;
 8011e78:	9008      	str	r0, [sp, #32]
    uint8_t width_byte_bpp = (letter_w * bpp) >> 3;    /*Letter width in byte. Real width in the font*/
 8011e7a:	9112      	str	r1, [sp, #72]	; 0x48
 8011e7c:	b218      	sxth	r0, r3
    if((letter_w * bpp) & 0x7) width_byte_bpp++;
 8011e7e:	0753      	lsls	r3, r2, #29
 8011e80:	900d      	str	r0, [sp, #52]	; 0x34
 8011e82:	d003      	beq.n	8011e8c <lv_vletter+0x14c>
 8011e84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011e86:	3301      	adds	r3, #1
 8011e88:	b2db      	uxtb	r3, r3
 8011e8a:	9312      	str	r3, [sp, #72]	; 0x48
    lv_coord_t col_start = pos_x >= mask_p->x1 ? 0 : mask_p->x1 - pos_x;
 8011e8c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8011e90:	9903      	ldr	r1, [sp, #12]
 8011e92:	4299      	cmp	r1, r3
 8011e94:	f280 811a 	bge.w	80120cc <lv_vletter+0x38c>
 8011e98:	1a5b      	subs	r3, r3, r1
 8011e9a:	b21b      	sxth	r3, r3
 8011e9c:	fb1a f203 	smulbb	r2, sl, r3
 8011ea0:	469c      	mov	ip, r3
 8011ea2:	9314      	str	r3, [sp, #80]	; 0x50
 8011ea4:	10d0      	asrs	r0, r2, #3
 8011ea6:	9206      	str	r2, [sp, #24]
    lv_coord_t col_end = pos_x + letter_w <= mask_p->x2 ? letter_w : mask_p->x2 - pos_x + 1;
 8011ea8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011eac:	429e      	cmp	r6, r3
 8011eae:	dd03      	ble.n	8011eb8 <lv_vletter+0x178>
 8011eb0:	3301      	adds	r3, #1
 8011eb2:	9a03      	ldr	r2, [sp, #12]
 8011eb4:	eba3 0802 	sub.w	r8, r3, r2
 8011eb8:	fa0f f388 	sxth.w	r3, r8
    lv_coord_t row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
 8011ebc:	9a07      	ldr	r2, [sp, #28]
    lv_coord_t col_end = pos_x + letter_w <= mask_p->x2 ? letter_w : mask_p->x2 - pos_x + 1;
 8011ebe:	9305      	str	r3, [sp, #20]
    lv_coord_t row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
 8011ec0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011ec4:	429a      	cmp	r2, r3
 8011ec6:	f2c0 80f7 	blt.w	80120b8 <lv_vletter+0x378>
 8011eca:	2300      	movs	r3, #0
 8011ecc:	4619      	mov	r1, r3
 8011ece:	461e      	mov	r6, r3
    lv_coord_t row_end  = pos_y + letter_h <= mask_p->y2 ? letter_h : mask_p->y2 - pos_y + 1;
 8011ed0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011ed4:	4295      	cmp	r5, r2
 8011ed6:	dd03      	ble.n	8011ee0 <lv_vletter+0x1a0>
 8011ed8:	3201      	adds	r2, #1
 8011eda:	9d07      	ldr	r5, [sp, #28]
 8011edc:	eba2 0905 	sub.w	r9, r2, r5
 8011ee0:	fa0f f289 	sxth.w	r2, r9
    map_p += (row_start * width_byte_bpp) + ((col_start * bpp) >> 3);
 8011ee4:	4403      	add	r3, r0
    vdb_buf_tmp += ((pos_y - vdb_p->area.y1) * vdb_width)
 8011ee6:	9807      	ldr	r0, [sp, #28]
    vdb_buf_tmp += (row_start * vdb_width) + col_start;
 8011ee8:	4461      	add	r1, ip
    lv_coord_t row_end  = pos_y + letter_h <= mask_p->y2 ? letter_h : mask_p->y2 - pos_y + 1;
 8011eea:	9213      	str	r2, [sp, #76]	; 0x4c
    map_p += (row_start * width_byte_bpp) + ((col_start * bpp) >> 3);
 8011eec:	eb04 0903 	add.w	r9, r4, r3
    vdb_buf_tmp += ((pos_y - vdb_p->area.y1) * vdb_width)
 8011ef0:	9a04      	ldr	r2, [sp, #16]
    vdb_buf_tmp += (row_start * vdb_width) + col_start;
 8011ef2:	4667      	mov	r7, ip
                   + pos_x - vdb_p->area.x1;
 8011ef4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    vdb_buf_tmp += ((pos_y - vdb_p->area.y1) * vdb_width)
 8011ef6:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8011efa:	1a82      	subs	r2, r0, r2
                   + pos_x - vdb_p->area.x1;
 8011efc:	9803      	ldr	r0, [sp, #12]
 8011efe:	fb03 0202 	mla	r2, r3, r2, r0
 8011f02:	eba2 040e 	sub.w	r4, r2, lr
 8011f06:	4421      	add	r1, r4
 8011f08:	008c      	lsls	r4, r1, #2
    lv_disp_t * disp = lv_disp_get_active();
 8011f0a:	f000 fb7b 	bl	8012604 <lv_disp_get_active>
    for(row = row_start; row < row_end; row ++) {
 8011f0e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    lv_disp_t * disp = lv_disp_get_active();
 8011f10:	900c      	str	r0, [sp, #48]	; 0x30
    for(row = row_start; row < row_end; row ++) {
 8011f12:	42b2      	cmp	r2, r6
 8011f14:	f77f af76 	ble.w	8011e04 <lv_vletter+0xc4>
 8011f18:	9806      	ldr	r0, [sp, #24]
 8011f1a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8011f1c:	4241      	negs	r1, r0
 8011f1e:	f000 0307 	and.w	r3, r0, #7
 8011f22:	9805      	ldr	r0, [sp, #20]
 8011f24:	f001 0107 	and.w	r1, r1, #7
 8011f28:	eba0 0207 	sub.w	r2, r0, r7
 8011f2c:	bf58      	it	pl
 8011f2e:	424b      	negpl	r3, r1
 8011f30:	1aaa      	subs	r2, r5, r2
 8011f32:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8011f34:	b2db      	uxtb	r3, r3
 8011f36:	0092      	lsls	r2, r2, #2
 8011f38:	4619      	mov	r1, r3
 8011f3a:	9315      	str	r3, [sp, #84]	; 0x54
 8011f3c:	9b02      	ldr	r3, [sp, #8]
 8011f3e:	410b      	asrs	r3, r1
 8011f40:	4601      	mov	r1, r0
 8011f42:	b2db      	uxtb	r3, r3
 8011f44:	42a9      	cmp	r1, r5
 8011f46:	9316      	str	r3, [sp, #88]	; 0x58
 8011f48:	f77f af5c 	ble.w	8011e04 <lv_vletter+0xc4>
 8011f4c:	43eb      	mvns	r3, r5
 8011f4e:	3404      	adds	r4, #4
 8011f50:	f1ca 0008 	rsb	r0, sl, #8
 8011f54:	440b      	add	r3, r1
 8011f56:	9908      	ldr	r1, [sp, #32]
 8011f58:	9006      	str	r0, [sp, #24]
 8011f5a:	b29b      	uxth	r3, r3
 8011f5c:	4421      	add	r1, r4
 8011f5e:	f8cd b020 	str.w	fp, [sp, #32]
 8011f62:	3301      	adds	r3, #1
 8011f64:	910e      	str	r1, [sp, #56]	; 0x38
 8011f66:	f89d 10a0 	ldrb.w	r1, [sp, #160]	; 0xa0
 8011f6a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011f6e:	9111      	str	r1, [sp, #68]	; 0x44
 8011f70:	9317      	str	r3, [sp, #92]	; 0x5c
 8011f72:	b2b3      	uxth	r3, r6
                col_bit = 0;
 8011f74:	ac14      	add	r4, sp, #80	; 0x50
 8011f76:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8011f78:	f04f 0800 	mov.w	r8, #0
 8011f7c:	930b      	str	r3, [sp, #44]	; 0x2c
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 8011f7e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8011f80:	9702      	str	r7, [sp, #8]
 8011f82:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8011f86:	930f      	str	r3, [sp, #60]	; 0x3c
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 8011f88:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8011f8a:	cc70      	ldmia	r4, {r4, r5, r6}
 8011f8c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8011f90:	9310      	str	r3, [sp, #64]	; 0x40
            letter_px = (*map_p & mask) >> (8 - col_bit - bpp);
 8011f92:	f899 2000 	ldrb.w	r2, [r9]
 8011f96:	f1c5 0308 	rsb	r3, r5, #8
 8011f9a:	4032      	ands	r2, r6
 8011f9c:	eba3 030a 	sub.w	r3, r3, sl
 8011fa0:	fa42 f303 	asr.w	r3, r2, r3
            if(letter_px != 0) {
 8011fa4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8011fa8:	d027      	beq.n	8011ffa <lv_vletter+0x2ba>
                if(opa == LV_OPA_COVER) {
 8011faa:	9a08      	ldr	r2, [sp, #32]
 8011fac:	2aff      	cmp	r2, #255	; 0xff
 8011fae:	d07d      	beq.n	80120ac <lv_vletter+0x36c>
                    px_opa = bpp == 8 ?
 8011fb0:	f1ba 0f08 	cmp.w	sl, #8
 8011fb4:	d002      	beq.n	8011fbc <lv_vletter+0x27c>
                             (uint16_t)((uint16_t)bpp_opa_table[letter_px] * opa) >> 8;
 8011fb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011fb8:	5cd3      	ldrb	r3, [r2, r3]
                    px_opa = bpp == 8 ?
 8011fba:	9a08      	ldr	r2, [sp, #32]
 8011fbc:	fb03 f302 	mul.w	r3, r3, r2
 8011fc0:	f3c3 2307 	ubfx	r3, r3, #8, #8
                if(disp->driver.vdb_wr) {
 8011fc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011fc6:	f8d2 b014 	ldr.w	fp, [r2, #20]
 8011fca:	f1bb 0f00 	cmp.w	fp, #0
 8011fce:	d043      	beq.n	8012058 <lv_vletter+0x318>
                                        (col + pos_x) - vdb_p->area.x1, (row + pos_y) - vdb_p->area.y1,
 8011fd0:	9804      	ldr	r0, [sp, #16]
 8011fd2:	9f03      	ldr	r7, [sp, #12]
 8011fd4:	f8b0 e002 	ldrh.w	lr, [r0, #2]
 8011fd8:	8802      	ldrh	r2, [r0, #0]
 8011fda:	9807      	ldr	r0, [sp, #28]
 8011fdc:	1aba      	subs	r2, r7, r2
                    disp->driver.vdb_wr((uint8_t *)vdb_p->buf, vdb_width,
 8011fde:	9f28      	ldr	r7, [sp, #160]	; 0xa0
                                        (col + pos_x) - vdb_p->area.x1, (row + pos_y) - vdb_p->area.y1,
 8011fe0:	eba0 0e0e 	sub.w	lr, r0, lr
                    disp->driver.vdb_wr((uint8_t *)vdb_p->buf, vdb_width,
 8011fe4:	9804      	ldr	r0, [sp, #16]
                                        (col + pos_x) - vdb_p->area.x1, (row + pos_y) - vdb_p->area.y1,
 8011fe6:	4422      	add	r2, r4
                    disp->driver.vdb_wr((uint8_t *)vdb_p->buf, vdb_width,
 8011fe8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011fea:	6880      	ldr	r0, [r0, #8]
 8011fec:	9301      	str	r3, [sp, #4]
 8011fee:	b212      	sxth	r2, r2
                                        (col + pos_x) - vdb_p->area.x1, (row + pos_y) - vdb_p->area.y1,
 8011ff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                    disp->driver.vdb_wr((uint8_t *)vdb_p->buf, vdb_width,
 8011ff2:	9700      	str	r7, [sp, #0]
                                        (col + pos_x) - vdb_p->area.x1, (row + pos_y) - vdb_p->area.y1,
 8011ff4:	4473      	add	r3, lr
                    disp->driver.vdb_wr((uint8_t *)vdb_p->buf, vdb_width,
 8011ff6:	b21b      	sxth	r3, r3
 8011ff8:	47d8      	blx	fp
            if(col_bit < 8 - bpp) {
 8011ffa:	9b06      	ldr	r3, [sp, #24]
 8011ffc:	3401      	adds	r4, #1
 8011ffe:	429d      	cmp	r5, r3
 8012000:	da1a      	bge.n	8012038 <lv_vletter+0x2f8>
 8012002:	9b02      	ldr	r3, [sp, #8]
 8012004:	b224      	sxth	r4, r4
                col_bit += bpp;
 8012006:	4455      	add	r5, sl
                mask = mask >> bpp;
 8012008:	fa46 f60a 	asr.w	r6, r6, sl
 801200c:	3304      	adds	r3, #4
                col_bit += bpp;
 801200e:	b2ed      	uxtb	r5, r5
 8012010:	9302      	str	r3, [sp, #8]
                mask = mask >> bpp;
 8012012:	b2f6      	uxtb	r6, r6
        for(col = col_start; col < col_end; col ++) {
 8012014:	9b05      	ldr	r3, [sp, #20]
 8012016:	42a3      	cmp	r3, r4
 8012018:	d1bb      	bne.n	8011f92 <lv_vletter+0x252>
        map_p += (width_byte_bpp) - col_byte_cnt;
 801201a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801201c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801201e:	eba3 0808 	sub.w	r8, r3, r8
 8012022:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012024:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012026:	3601      	adds	r6, #1
 8012028:	44c1      	add	r9, r8
 801202a:	4413      	add	r3, r2
 801202c:	b236      	sxth	r6, r6
 801202e:	930e      	str	r3, [sp, #56]	; 0x38
    for(row = row_start; row < row_end; row ++) {
 8012030:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012032:	42b3      	cmp	r3, r6
 8012034:	d19d      	bne.n	8011f72 <lv_vletter+0x232>
 8012036:	e6e5      	b.n	8011e04 <lv_vletter+0xc4>
 8012038:	9b02      	ldr	r3, [sp, #8]
 801203a:	b224      	sxth	r4, r4
                col_byte_cnt ++;
 801203c:	f108 0801 	add.w	r8, r8, #1
                map_p ++;
 8012040:	f109 0901 	add.w	r9, r9, #1
 8012044:	3304      	adds	r3, #4
                col_byte_cnt ++;
 8012046:	fa5f f888 	uxtb.w	r8, r8
 801204a:	9302      	str	r3, [sp, #8]
        for(col = col_start; col < col_end; col ++) {
 801204c:	9b05      	ldr	r3, [sp, #20]
 801204e:	42a3      	cmp	r3, r4
 8012050:	d0e3      	beq.n	801201a <lv_vletter+0x2da>
                mask = mask_init;
 8012052:	9e09      	ldr	r6, [sp, #36]	; 0x24
                col_bit = 0;
 8012054:	2500      	movs	r5, #0
 8012056:	e79c      	b.n	8011f92 <lv_vletter+0x252>
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 8012058:	9f02      	ldr	r7, [sp, #8]
 801205a:	f1c3 00ff 	rsb	r0, r3, #255	; 0xff
 801205e:	f817 1c02 	ldrb.w	r1, [r7, #-2]
 8012062:	b280      	uxth	r0, r0
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 8012064:	f817 2c03 	ldrb.w	r2, [r7, #-3]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 8012068:	f817 ec04 	ldrb.w	lr, [r7, #-4]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 801206c:	fb11 f100 	smulbb	r1, r1, r0
 8012070:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 8012072:	fb12 f200 	smulbb	r2, r2, r0
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 8012076:	fb1e f000 	smulbb	r0, lr, r0
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 801207a:	fb03 1107 	mla	r1, r3, r7, r1
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 801207e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8012080:	fb03 2207 	mla	r2, r3, r7, r2
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 8012084:	9f11      	ldr	r7, [sp, #68]	; 0x44
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 8012086:	f3c1 2107 	ubfx	r1, r1, #8, #8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 801208a:	fb07 0303 	mla	r3, r7, r3, r0
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 801208e:	f3c2 2207 	ubfx	r2, r2, #8, #8
                    *vdb_buf_tmp = lv_color_mix(color, *vdb_buf_tmp, px_opa);
 8012092:	9f02      	ldr	r7, [sp, #8]
 8012094:	20ff      	movs	r0, #255	; 0xff
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 8012096:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801209a:	f807 1c02 	strb.w	r1, [r7, #-2]
 801209e:	f807 2c03 	strb.w	r2, [r7, #-3]
 80120a2:	f807 3c04 	strb.w	r3, [r7, #-4]
 80120a6:	f807 0c01 	strb.w	r0, [r7, #-1]
 80120aa:	e7a6      	b.n	8011ffa <lv_vletter+0x2ba>
                    px_opa = bpp == 8 ? letter_px : bpp_opa_table[letter_px];
 80120ac:	f1ba 0f08 	cmp.w	sl, #8
 80120b0:	d088      	beq.n	8011fc4 <lv_vletter+0x284>
 80120b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80120b4:	5cd3      	ldrb	r3, [r2, r3]
 80120b6:	e785      	b.n	8011fc4 <lv_vletter+0x284>
    lv_coord_t row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
 80120b8:	1a9b      	subs	r3, r3, r2
 80120ba:	b21e      	sxth	r6, r3
 80120bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80120be:	fb06 f103 	mul.w	r1, r6, r3
 80120c2:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80120c6:	fb13 f306 	smulbb	r3, r3, r6
 80120ca:	e701      	b.n	8011ed0 <lv_vletter+0x190>
 80120cc:	2000      	movs	r0, #0
 80120ce:	9006      	str	r0, [sp, #24]
 80120d0:	4684      	mov	ip, r0
 80120d2:	9014      	str	r0, [sp, #80]	; 0x50
 80120d4:	e6e8      	b.n	8011ea8 <lv_vletter+0x168>
 80120d6:	bf00      	nop

080120d8 <lv_vmap>:
{
 80120d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120dc:	b095      	sub	sp, #84	; 0x54
 80120de:	4688      	mov	r8, r1
    if(opa < LV_OPA_MIN) return;
 80120e0:	2b0f      	cmp	r3, #15
{
 80120e2:	f89d 1078 	ldrb.w	r1, [sp, #120]	; 0x78
 80120e6:	920a      	str	r2, [sp, #40]	; 0x28
 80120e8:	9102      	str	r1, [sp, #8]
 80120ea:	f89d 107c 	ldrb.w	r1, [sp, #124]	; 0x7c
 80120ee:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80120f0:	468b      	mov	fp, r1
 80120f2:	f89d 1084 	ldrb.w	r1, [sp, #132]	; 0x84
 80120f6:	9105      	str	r1, [sp, #20]
    if(opa < LV_OPA_MIN) return;
 80120f8:	f240 80a9 	bls.w	801224e <lv_vmap+0x176>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 80120fc:	2bfc      	cmp	r3, #252	; 0xfc
 80120fe:	4607      	mov	r7, r0
 8012100:	4691      	mov	r9, r2
 8012102:	b2f4      	uxtb	r4, r6
 8012104:	bf28      	it	cs
 8012106:	23ff      	movcs	r3, #255	; 0xff
 8012108:	f3c6 2507 	ubfx	r5, r6, #8, #8
 801210c:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8012110:	9304      	str	r3, [sp, #16]
    lv_vdb_t * vdb_p = lv_vdb_get();
 8012112:	f7fa fe0d 	bl	800cd30 <lv_vdb_get>
    if(!vdb_p) {
 8012116:	9003      	str	r0, [sp, #12]
 8012118:	2800      	cmp	r0, #0
 801211a:	f000 8098 	beq.w	801224e <lv_vmap+0x176>
    union_ok = lv_area_intersect(&masked_a, cords_p, mask_p);
 801211e:	4642      	mov	r2, r8
 8012120:	4639      	mov	r1, r7
 8012122:	a812      	add	r0, sp, #72	; 0x48
 8012124:	f000 fcd0 	bl	8012ac8 <lv_area_intersect>
    if(union_ok == false)  return;
 8012128:	2800      	cmp	r0, #0
 801212a:	f000 8090 	beq.w	801224e <lv_vmap+0x176>
 801212e:	88bb      	ldrh	r3, [r7, #4]
 8012130:	f9b7 1000 	ldrsh.w	r1, [r7]
 8012134:	3301      	adds	r3, #1
    if(cords_p->y1 < masked_a.y1) {
 8012136:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 801213a:	f9bd 204a 	ldrsh.w	r2, [sp, #74]	; 0x4a
 801213e:	1a5b      	subs	r3, r3, r1
 8012140:	4290      	cmp	r0, r2
 8012142:	b21b      	sxth	r3, r3
 8012144:	461f      	mov	r7, r3
 8012146:	9308      	str	r3, [sp, #32]
 8012148:	da05      	bge.n	8012156 <lv_vmap+0x7e>
        map_p += (uint32_t) map_width * ((masked_a.y1 - cords_p->y1)) * px_size_byte;
 801214a:	1a13      	subs	r3, r2, r0
 801214c:	4638      	mov	r0, r7
 801214e:	009b      	lsls	r3, r3, #2
 8012150:	fb00 9303 	mla	r3, r0, r3, r9
 8012154:	930a      	str	r3, [sp, #40]	; 0x28
    if(cords_p->x1 < masked_a.x1) {
 8012156:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 801215a:	428b      	cmp	r3, r1
 801215c:	dd04      	ble.n	8012168 <lv_vmap+0x90>
        map_p += (masked_a.x1 - cords_p->x1) * px_size_byte;
 801215e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012160:	1a59      	subs	r1, r3, r1
 8012162:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012166:	910a      	str	r1, [sp, #40]	; 0x28
    masked_a.x1 = masked_a.x1 - vdb_p->area.x1;
 8012168:	9803      	ldr	r0, [sp, #12]
    masked_a.x2 = masked_a.x2 - vdb_p->area.x1;
 801216a:	f8bd e04c 	ldrh.w	lr, [sp, #76]	; 0x4c
    masked_a.x1 = masked_a.x1 - vdb_p->area.x1;
 801216e:	8807      	ldrh	r7, [r0, #0]
    masked_a.y1 = masked_a.y1 - vdb_p->area.y1;
 8012170:	8840      	ldrh	r0, [r0, #2]
    masked_a.x1 = masked_a.x1 - vdb_p->area.x1;
 8012172:	1bd9      	subs	r1, r3, r7
    masked_a.x2 = masked_a.x2 - vdb_p->area.x1;
 8012174:	ebae 0307 	sub.w	r3, lr, r7
    masked_a.y2 = masked_a.y2 - vdb_p->area.y1;
 8012178:	f8bd 704e 	ldrh.w	r7, [sp, #78]	; 0x4e
    masked_a.y1 = masked_a.y1 - vdb_p->area.y1;
 801217c:	1a12      	subs	r2, r2, r0
    masked_a.x1 = masked_a.x1 - vdb_p->area.x1;
 801217e:	b289      	uxth	r1, r1
    masked_a.y2 = masked_a.y2 - vdb_p->area.y1;
 8012180:	1a3f      	subs	r7, r7, r0
    masked_a.x2 = masked_a.x2 - vdb_p->area.x1;
 8012182:	b29b      	uxth	r3, r3
    masked_a.x1 = masked_a.x1 - vdb_p->area.x1;
 8012184:	b208      	sxth	r0, r1
    masked_a.y2 = masked_a.y2 - vdb_p->area.y1;
 8012186:	f8ad 704e 	strh.w	r7, [sp, #78]	; 0x4e
    masked_a.y1 = masked_a.y1 - vdb_p->area.y1;
 801218a:	b212      	sxth	r2, r2
 801218c:	9f03      	ldr	r7, [sp, #12]
 801218e:	f103 0801 	add.w	r8, r3, #1
    masked_a.x2 = masked_a.x2 - vdb_p->area.x1;
 8012192:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8012196:	88bb      	ldrh	r3, [r7, #4]
 8012198:	eba8 0801 	sub.w	r8, r8, r1
    masked_a.y1 = masked_a.y1 - vdb_p->area.y1;
 801219c:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
 80121a0:	4639      	mov	r1, r7
    masked_a.x1 = masked_a.x1 - vdb_p->area.x1;
 80121a2:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 80121a6:	3301      	adds	r3, #1
 80121a8:	883f      	ldrh	r7, [r7, #0]
 80121aa:	fa0f f888 	sxth.w	r8, r8
    lv_color_t * vdb_buf_tmp = vdb_p->buf;
 80121ae:	6889      	ldr	r1, [r1, #8]
 80121b0:	1bdb      	subs	r3, r3, r7
 80121b2:	b21b      	sxth	r3, r3
    vdb_buf_tmp += (uint32_t) masked_a.x1; /*Move to the first col*/
 80121b4:	fb03 0202 	mla	r2, r3, r2, r0
 80121b8:	9309      	str	r3, [sp, #36]	; 0x24
 80121ba:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80121be:	920b      	str	r2, [sp, #44]	; 0x2c
    lv_disp_t * disp = lv_disp_get_active();
 80121c0:	f000 fa20 	bl	8012604 <lv_disp_get_active>
    if(chroma_key == false && alpha_byte == false && opa == LV_OPA_COVER && recolor_opa == LV_OPA_TRANSP) {
 80121c4:	9a02      	ldr	r2, [sp, #8]
    lv_disp_t * disp = lv_disp_get_active();
 80121c6:	4682      	mov	sl, r0
    if(chroma_key == false && alpha_byte == false && opa == LV_OPA_COVER && recolor_opa == LV_OPA_TRANSP) {
 80121c8:	2a00      	cmp	r2, #0
 80121ca:	d143      	bne.n	8012254 <lv_vmap+0x17c>
 80121cc:	465a      	mov	r2, fp
 80121ce:	2a00      	cmp	r2, #0
 80121d0:	d140      	bne.n	8012254 <lv_vmap+0x17c>
 80121d2:	9a04      	ldr	r2, [sp, #16]
 80121d4:	2aff      	cmp	r2, #255	; 0xff
 80121d6:	d13d      	bne.n	8012254 <lv_vmap+0x17c>
 80121d8:	9a05      	ldr	r2, [sp, #20]
 80121da:	2a00      	cmp	r2, #0
 80121dc:	d13a      	bne.n	8012254 <lv_vmap+0x17c>
        if(disp->driver.vdb_wr) {
 80121de:	6943      	ldr	r3, [r0, #20]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	f000 8149 	beq.w	8012478 <lv_vmap+0x3a0>
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 80121e6:	f9bd 704a 	ldrsh.w	r7, [sp, #74]	; 0x4a
 80121ea:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 80121ee:	42bb      	cmp	r3, r7
 80121f0:	db2d      	blt.n	801224e <lv_vmap+0x176>
 80121f2:	f1b8 0f00 	cmp.w	r8, #0
 80121f6:	dd2a      	ble.n	801224e <lv_vmap+0x176>
 80121f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
                    disp->driver.vdb_wr((uint8_t *)vdb_p->buf, vdb_width, col + masked_a.x1, row, px_color, opa);
 80121fa:	f04f 09ff 	mov.w	r9, #255	; 0xff
 80121fe:	f1a2 0b04 	sub.w	fp, r2, #4
 8012202:	f8cd b008 	str.w	fp, [sp, #8]
 8012206:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 801220a:	9d02      	ldr	r5, [sp, #8]
 801220c:	2400      	movs	r4, #0
                    disp->driver.vdb_wr((uint8_t *)vdb_p->buf, vdb_width, col + masked_a.x1, row, px_color, opa);
 801220e:	b2a4      	uxth	r4, r4
 8012210:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
                    lv_color_t px_color = *((lv_color_t *)&map_p[(uint32_t)col * px_size_byte]);
 8012214:	f855 6f04 	ldr.w	r6, [r5, #4]!
                    disp->driver.vdb_wr((uint8_t *)vdb_p->buf, vdb_width, col + masked_a.x1, row, px_color, opa);
 8012218:	463b      	mov	r3, r7
 801221a:	4422      	add	r2, r4
 801221c:	3401      	adds	r4, #1
 801221e:	9903      	ldr	r1, [sp, #12]
 8012220:	b224      	sxth	r4, r4
 8012222:	6888      	ldr	r0, [r1, #8]
 8012224:	b212      	sxth	r2, r2
 8012226:	9600      	str	r6, [sp, #0]
 8012228:	4659      	mov	r1, fp
 801222a:	f8cd 9004 	str.w	r9, [sp, #4]
 801222e:	f8da 6014 	ldr.w	r6, [sl, #20]
 8012232:	47b0      	blx	r6
                for(col = 0; col < map_useful_w; col++) {
 8012234:	45a0      	cmp	r8, r4
 8012236:	d1ea      	bne.n	801220e <lv_vmap+0x136>
 8012238:	3701      	adds	r7, #1
 801223a:	9a02      	ldr	r2, [sp, #8]
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 801223c:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8012240:	9908      	ldr	r1, [sp, #32]
 8012242:	b23f      	sxth	r7, r7
 8012244:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012248:	42bb      	cmp	r3, r7
 801224a:	9202      	str	r2, [sp, #8]
 801224c:	dadd      	bge.n	801220a <lv_vmap+0x132>
}
 801224e:	b015      	add	sp, #84	; 0x54
 8012250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 8012254:	9a05      	ldr	r2, [sp, #20]
 8012256:	2700      	movs	r7, #0
        for(row = masked_a.y1; row <= masked_a.y2; row++) {
 8012258:	f9bd 104a 	ldrsh.w	r1, [sp, #74]	; 0x4a
        lv_color_t last_img_px = LV_COLOR_BLACK;
 801225c:	f04f 497f 	mov.w	r9, #4278190080	; 0xff000000
 8012260:	b293      	uxth	r3, r2
 8012262:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
        for(row = masked_a.y1; row <= masked_a.y2; row++) {
 8012266:	9107      	str	r1, [sp, #28]
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 8012268:	fb04 f003 	mul.w	r0, r4, r3
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 801226c:	b292      	uxth	r2, r2
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 801226e:	fb05 f403 	mul.w	r4, r5, r3
 8012272:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 8012276:	900e      	str	r0, [sp, #56]	; 0x38
 8012278:	0a00      	lsrs	r0, r0, #8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 801227a:	9206      	str	r2, [sp, #24]
 801227c:	fb06 f203 	mul.w	r2, r6, r3
 8012280:	f360 0707 	bfi	r7, r0, #0, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 8012284:	940d      	str	r4, [sp, #52]	; 0x34
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 8012286:	4615      	mov	r5, r2
 8012288:	920c      	str	r2, [sp, #48]	; 0x30
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 801228a:	0a22      	lsrs	r2, r4, #8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 801228c:	0a2b      	lsrs	r3, r5, #8
 801228e:	f362 270f 	bfi	r7, r2, #8, #8
 8012292:	f363 4717 	bfi	r7, r3, #16, #8
 8012296:	9b07      	ldr	r3, [sp, #28]
 8012298:	4299      	cmp	r1, r3
 801229a:	ea47 0709 	orr.w	r7, r7, r9
 801229e:	dbd6      	blt.n	801224e <lv_vmap+0x176>
 80122a0:	9b08      	ldr	r3, [sp, #32]
 80122a2:	f1b8 0f00 	cmp.w	r8, #0
 80122a6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80122aa:	9310      	str	r3, [sp, #64]	; 0x40
 80122ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122ae:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80122b2:	9311      	str	r3, [sp, #68]	; 0x44
 80122b4:	ddcb      	ble.n	801224e <lv_vmap+0x176>
                            vdb_buf_tmp[col] = lv_color_mix(px_color, vdb_buf_tmp[col], opa_result);
 80122b6:	f8cd a020 	str.w	sl, [sp, #32]
 80122ba:	46da      	mov	sl, fp
 80122bc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 80122be:	2400      	movs	r4, #0
 80122c0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
                if(alpha_byte) {
 80122c2:	f1ba 0f00 	cmp.w	sl, #0
 80122c6:	d05f      	beq.n	8012388 <lv_vmap+0x2b0>
                    lv_opa_t px_opa = *(px_color_p + LV_IMG_PX_SIZE_ALPHA_BYTE - 1);
 80122c8:	78eb      	ldrb	r3, [r5, #3]
                    px_color = *((lv_color_t *)px_color_p);
 80122ca:	6829      	ldr	r1, [r5, #0]
                    if(px_opa == LV_OPA_TRANSP) continue;
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d042      	beq.n	8012356 <lv_vmap+0x27e>
                    else if(px_opa != LV_OPA_COVER) opa_result = (uint32_t)((uint32_t)px_opa * opa_result) >> 8;
 80122d0:	2bff      	cmp	r3, #255	; 0xff
 80122d2:	f000 80ca 	beq.w	801246a <lv_vmap+0x392>
 80122d6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80122da:	fb13 f302 	smulbb	r3, r3, r2
 80122de:	f3c3 2c07 	ubfx	ip, r3, #8, #8
                if(chroma_key && px_color.full == chroma_key_color.full) continue;
 80122e2:	9b02      	ldr	r3, [sp, #8]
 80122e4:	b113      	cbz	r3, 80122ec <lv_vmap+0x214>
 80122e6:	f1b1 2fff 	cmp.w	r1, #4278255360	; 0xff00ff00
 80122ea:	d034      	beq.n	8012356 <lv_vmap+0x27e>
                if(recolor_opa != LV_OPA_TRANSP) {
 80122ec:	9b05      	ldr	r3, [sp, #20]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d04e      	beq.n	8012390 <lv_vmap+0x2b8>
                    if(last_img_px.full != px_color.full) {     /*Minor acceleration: calculate only for new colors (save the last)*/
 80122f2:	4589      	cmp	r9, r1
 80122f4:	d01e      	beq.n	8012334 <lv_vmap+0x25c>
                        last_img_px = px_color;
 80122f6:	4689      	mov	r9, r1
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 80122f8:	9806      	ldr	r0, [sp, #24]
 80122fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80122fc:	b2c9      	uxtb	r1, r1
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 80122fe:	4686      	mov	lr, r0
 8012300:	f3c9 2207 	ubfx	r2, r9, #8, #8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 8012304:	fb00 3101 	mla	r1, r0, r1, r3
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 8012308:	980d      	ldr	r0, [sp, #52]	; 0x34
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 801230a:	f3c9 4307 	ubfx	r3, r9, #16, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 801230e:	fb0e 0202 	mla	r2, lr, r2, r0
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 8012312:	f3c1 2107 	ubfx	r1, r1, #8, #8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 8012316:	980c      	ldr	r0, [sp, #48]	; 0x30
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 8012318:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801231c:	f361 0707 	bfi	r7, r1, #0, #8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 8012320:	fb0e 0303 	mla	r3, lr, r3, r0
 8012324:	f362 270f 	bfi	r7, r2, #8, #8
 8012328:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801232c:	f363 4717 	bfi	r7, r3, #16, #8
 8012330:	f047 477f 	orr.w	r7, r7, #4278190080	; 0xff000000
                    if(disp->driver.vdb_wr) {
 8012334:	9b08      	ldr	r3, [sp, #32]
 8012336:	f8d3 b014 	ldr.w	fp, [r3, #20]
 801233a:	f1bb 0f00 	cmp.w	fp, #0
 801233e:	d039      	beq.n	80123b4 <lv_vmap+0x2dc>
                        disp->driver.vdb_wr((uint8_t *)vdb_p->buf, vdb_width, col + masked_a.x1, row, recolored_px, opa_result);
 8012340:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8012344:	9903      	ldr	r1, [sp, #12]
 8012346:	4422      	add	r2, r4
 8012348:	9b07      	ldr	r3, [sp, #28]
 801234a:	6888      	ldr	r0, [r1, #8]
 801234c:	b212      	sxth	r2, r2
 801234e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012350:	e88d 1080 	stmia.w	sp, {r7, ip}
 8012354:	47d8      	blx	fp
 8012356:	3401      	adds	r4, #1
 8012358:	3504      	adds	r5, #4
 801235a:	3604      	adds	r6, #4
 801235c:	b224      	sxth	r4, r4
            for(col = 0; col < map_useful_w; col++) {
 801235e:	45a0      	cmp	r8, r4
 8012360:	d1af      	bne.n	80122c2 <lv_vmap+0x1ea>
 8012362:	9a07      	ldr	r2, [sp, #28]
            map_p += map_width * px_size_byte;  /*Next row on the map*/
 8012364:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012366:	9810      	ldr	r0, [sp, #64]	; 0x40
 8012368:	3201      	adds	r2, #1
        for(row = masked_a.y1; row <= masked_a.y2; row++) {
 801236a:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
            map_p += map_width * px_size_byte;  /*Next row on the map*/
 801236e:	4401      	add	r1, r0
 8012370:	b212      	sxth	r2, r2
            vdb_buf_tmp += vdb_width;           /*Next row on the VDB*/
 8012372:	9811      	ldr	r0, [sp, #68]	; 0x44
            map_p += map_width * px_size_byte;  /*Next row on the map*/
 8012374:	910a      	str	r1, [sp, #40]	; 0x28
        for(row = masked_a.y1; row <= masked_a.y2; row++) {
 8012376:	4293      	cmp	r3, r2
            vdb_buf_tmp += vdb_width;           /*Next row on the VDB*/
 8012378:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801237a:	9207      	str	r2, [sp, #28]
 801237c:	4401      	add	r1, r0
 801237e:	910b      	str	r1, [sp, #44]	; 0x2c
        for(row = masked_a.y1; row <= masked_a.y2; row++) {
 8012380:	da9c      	bge.n	80122bc <lv_vmap+0x1e4>
}
 8012382:	b015      	add	sp, #84	; 0x54
 8012384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    px_color = *((lv_color_t *)px_color_p);
 8012388:	6829      	ldr	r1, [r5, #0]
 801238a:	f8dd c010 	ldr.w	ip, [sp, #16]
 801238e:	e7a8      	b.n	80122e2 <lv_vmap+0x20a>
                    if(disp->driver.vdb_wr) {
 8012390:	9b08      	ldr	r3, [sp, #32]
 8012392:	f8d3 b014 	ldr.w	fp, [r3, #20]
 8012396:	f1bb 0f00 	cmp.w	fp, #0
 801239a:	d037      	beq.n	801240c <lv_vmap+0x334>
                        disp->driver.vdb_wr((uint8_t *)vdb_p->buf, vdb_width, col + masked_a.x1, row, px_color, opa_result);
 801239c:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 80123a0:	9803      	ldr	r0, [sp, #12]
 80123a2:	4422      	add	r2, r4
 80123a4:	9b07      	ldr	r3, [sp, #28]
 80123a6:	6880      	ldr	r0, [r0, #8]
 80123a8:	b212      	sxth	r2, r2
 80123aa:	e88d 1002 	stmia.w	sp, {r1, ip}
 80123ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80123b0:	47d8      	blx	fp
 80123b2:	e7d0      	b.n	8012356 <lv_vmap+0x27e>
                        if(opa_result == LV_OPA_COVER) vdb_buf_tmp[col].full = recolored_px.full;
 80123b4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80123b8:	d05a      	beq.n	8012470 <lv_vmap+0x398>
 80123ba:	f1cc 01ff 	rsb	r1, ip, #255	; 0xff
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 80123be:	7833      	ldrb	r3, [r6, #0]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 80123c0:	f896 e002 	ldrb.w	lr, [r6, #2]
                        else vdb_buf_tmp[col] = lv_color_mix(recolored_px, vdb_buf_tmp[col], opa_result);
 80123c4:	f04f 3bff 	mov.w	fp, #4294967295
 80123c8:	b289      	uxth	r1, r1
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 80123ca:	7870      	ldrb	r0, [r6, #1]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 80123cc:	fa1f fc8c 	uxth.w	ip, ip
 80123d0:	f3c7 4207 	ubfx	r2, r7, #16, #8
 80123d4:	fb1e fe01 	smulbb	lr, lr, r1
 80123d8:	f886 b003 	strb.w	fp, [r6, #3]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 80123dc:	fb10 f001 	smulbb	r0, r0, r1
 80123e0:	f3c7 2b07 	ubfx	fp, r7, #8, #8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 80123e4:	fb13 f101 	smulbb	r1, r3, r1
 80123e8:	b2fb      	uxtb	r3, r7
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 80123ea:	fb0c ee02 	mla	lr, ip, r2, lr
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 80123ee:	fb0c 000b 	mla	r0, ip, fp, r0
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 80123f2:	fb0c 1303 	mla	r3, ip, r3, r1
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 80123f6:	f3ce 2e07 	ubfx	lr, lr, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 80123fa:	f3c0 2007 	ubfx	r0, r0, #8, #8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 80123fe:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8012402:	f886 e002 	strb.w	lr, [r6, #2]
 8012406:	7070      	strb	r0, [r6, #1]
 8012408:	7033      	strb	r3, [r6, #0]
 801240a:	e7a4      	b.n	8012356 <lv_vmap+0x27e>
                        if(opa_result == LV_OPA_COVER) vdb_buf_tmp[col] = px_color;
 801240c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8012410:	d030      	beq.n	8012474 <lv_vmap+0x39c>
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 8012412:	78b3      	ldrb	r3, [r6, #2]
 8012414:	f1cc 00ff 	rsb	r0, ip, #255	; 0xff
                            vdb_buf_tmp[col] = lv_color_mix(px_color, vdb_buf_tmp[col], opa_result);
 8012418:	f04f 32ff 	mov.w	r2, #4294967295
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 801241c:	f896 b000 	ldrb.w	fp, [r6]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 8012420:	930f      	str	r3, [sp, #60]	; 0x3c
 8012422:	b280      	uxth	r0, r0
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 8012424:	f896 e001 	ldrb.w	lr, [r6, #1]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 8012428:	fa1f f38c 	uxth.w	r3, ip
 801242c:	70f2      	strb	r2, [r6, #3]
 801242e:	f3c1 4c07 	ubfx	ip, r1, #16, #8
 8012432:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 8012436:	fb1e fe00 	smulbb	lr, lr, r0
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 801243a:	fb12 f200 	smulbb	r2, r2, r0
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 801243e:	fb1b f000 	smulbb	r0, fp, r0
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 8012442:	f3c1 2b07 	ubfx	fp, r1, #8, #8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 8012446:	b2c9      	uxtb	r1, r1
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 8012448:	fb03 220c 	mla	r2, r3, ip, r2
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 801244c:	fb03 ee0b 	mla	lr, r3, fp, lr
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 8012450:	fb03 0301 	mla	r3, r3, r1, r0
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 8012454:	f3c2 2207 	ubfx	r2, r2, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 8012458:	f3ce 2e07 	ubfx	lr, lr, #8, #8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 801245c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8012460:	70b2      	strb	r2, [r6, #2]
 8012462:	f886 e001 	strb.w	lr, [r6, #1]
 8012466:	7033      	strb	r3, [r6, #0]
 8012468:	e775      	b.n	8012356 <lv_vmap+0x27e>
 801246a:	f8dd c010 	ldr.w	ip, [sp, #16]
 801246e:	e738      	b.n	80122e2 <lv_vmap+0x20a>
                        if(opa_result == LV_OPA_COVER) vdb_buf_tmp[col].full = recolored_px.full;
 8012470:	6037      	str	r7, [r6, #0]
 8012472:	e770      	b.n	8012356 <lv_vmap+0x27e>
                        if(opa_result == LV_OPA_COVER) vdb_buf_tmp[col] = px_color;
 8012474:	6031      	str	r1, [r6, #0]
 8012476:	e76e      	b.n	8012356 <lv_vmap+0x27e>
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 8012478:	f9bd 404a 	ldrsh.w	r4, [sp, #74]	; 0x4a
 801247c:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8012480:	42a3      	cmp	r3, r4
 8012482:	f6ff aee4 	blt.w	801224e <lv_vmap+0x176>
 8012486:	9b08      	ldr	r3, [sp, #32]
        memcpy(dest, src, length * sizeof(lv_color_t));
 8012488:	ea4f 0588 	mov.w	r5, r8, lsl #2
 801248c:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8012490:	009f      	lsls	r7, r3, #2
 8012492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012494:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8012498:	009e      	lsls	r6, r3, #2
 801249a:	e00b      	b.n	80124b4 <lv_vmap+0x3dc>
 801249c:	4650      	mov	r0, sl
                map_p += map_width * px_size_byte;               /*Next row on the map*/
 801249e:	44b9      	add	r9, r7
        memcpy(dest, src, length * sizeof(lv_color_t));
 80124a0:	f00b fa9c 	bl	801d9dc <memcpy>
 80124a4:	3401      	adds	r4, #1
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 80124a6:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
                vdb_buf_tmp += vdb_width;                        /*Next row on the VDB*/
 80124aa:	44b2      	add	sl, r6
 80124ac:	b224      	sxth	r4, r4
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 80124ae:	42a3      	cmp	r3, r4
 80124b0:	f6ff aecd 	blt.w	801224e <lv_vmap+0x176>
                if(lv_disp_is_mem_blend_supported() == false) {
 80124b4:	f000 f8d4 	bl	8012660 <lv_disp_is_mem_blend_supported>
        memcpy(dest, src, length * sizeof(lv_color_t));
 80124b8:	4649      	mov	r1, r9
 80124ba:	462a      	mov	r2, r5
                    lv_disp_mem_blend(vdb_buf_tmp, (lv_color_t *)map_p, map_useful_w, opa);
 80124bc:	23ff      	movs	r3, #255	; 0xff
                if(lv_disp_is_mem_blend_supported() == false) {
 80124be:	2800      	cmp	r0, #0
 80124c0:	d0ec      	beq.n	801249c <lv_vmap+0x3c4>
                    lv_disp_mem_blend(vdb_buf_tmp, (lv_color_t *)map_p, map_useful_w, opa);
 80124c2:	4649      	mov	r1, r9
 80124c4:	4642      	mov	r2, r8
 80124c6:	4650      	mov	r0, sl
                map_p += map_width * px_size_byte;               /*Next row on the map*/
 80124c8:	44b9      	add	r9, r7
                    lv_disp_mem_blend(vdb_buf_tmp, (lv_color_t *)map_p, map_useful_w, opa);
 80124ca:	f000 f8af 	bl	801262c <lv_disp_mem_blend>
 80124ce:	e7e9      	b.n	80124a4 <lv_vmap+0x3cc>

080124d0 <lv_font_builtin_init>:

/**
 * Initialize the built-in fonts
 */
void lv_font_builtin_init(void)
{
 80124d0:	b570      	push	{r4, r5, r6, lr}
    /*DEJAVU 10*/
#if USE_LV_FONT_DEJAVU_10 != 0
    lv_font_add(&lv_font_dejavu_10, NULL);
 80124d2:	4c23      	ldr	r4, [pc, #140]	; (8012560 <lv_font_builtin_init+0x90>)
 80124d4:	2100      	movs	r1, #0
#endif


    /*DEJAVU 20*/
#if USE_LV_FONT_DEJAVU_20 != 0
    lv_font_add(&lv_font_dejavu_20, NULL);
 80124d6:	4e23      	ldr	r6, [pc, #140]	; (8012564 <lv_font_builtin_init+0x94>)
    lv_font_add(&lv_font_dejavu_10, NULL);
 80124d8:	4620      	mov	r0, r4
#endif


    /*DEJAVU 30*/
#if USE_LV_FONT_DEJAVU_30 != 0
    lv_font_add(&lv_font_dejavu_30, NULL);
 80124da:	4d23      	ldr	r5, [pc, #140]	; (8012568 <lv_font_builtin_init+0x98>)
    lv_font_add(&lv_font_dejavu_10, NULL);
 80124dc:	f000 fbce 	bl	8012c7c <lv_font_add>
    lv_font_add(&lv_font_dejavu_10_latin_sup, &lv_font_dejavu_10);
 80124e0:	4621      	mov	r1, r4
 80124e2:	4822      	ldr	r0, [pc, #136]	; (801256c <lv_font_builtin_init+0x9c>)
 80124e4:	f000 fbca 	bl	8012c7c <lv_font_add>
    lv_font_add(&lv_font_dejavu_10_cyrillic, &lv_font_dejavu_10);
 80124e8:	4621      	mov	r1, r4
 80124ea:	4821      	ldr	r0, [pc, #132]	; (8012570 <lv_font_builtin_init+0xa0>)
 80124ec:	f000 fbc6 	bl	8012c7c <lv_font_add>
    lv_font_add(&lv_font_symbol_10, &lv_font_dejavu_10);
 80124f0:	4621      	mov	r1, r4
 80124f2:	4820      	ldr	r0, [pc, #128]	; (8012574 <lv_font_builtin_init+0xa4>)
 80124f4:	f000 fbc2 	bl	8012c7c <lv_font_add>
    lv_font_add(&lv_font_dejavu_20, NULL);
 80124f8:	4630      	mov	r0, r6
 80124fa:	2100      	movs	r1, #0
#endif
#endif

    /*DEJAVU 40*/
#if USE_LV_FONT_DEJAVU_40 != 0
    lv_font_add(&lv_font_dejavu_40, NULL);
 80124fc:	4c1e      	ldr	r4, [pc, #120]	; (8012578 <lv_font_builtin_init+0xa8>)
    lv_font_add(&lv_font_dejavu_20, NULL);
 80124fe:	f000 fbbd 	bl	8012c7c <lv_font_add>
    lv_font_add(&lv_font_dejavu_20_latin_sup, &lv_font_dejavu_20);
 8012502:	4631      	mov	r1, r6
 8012504:	481d      	ldr	r0, [pc, #116]	; (801257c <lv_font_builtin_init+0xac>)
 8012506:	f000 fbb9 	bl	8012c7c <lv_font_add>
    lv_font_add(&lv_font_dejavu_20_cyrillic, &lv_font_dejavu_20);
 801250a:	4631      	mov	r1, r6
 801250c:	481c      	ldr	r0, [pc, #112]	; (8012580 <lv_font_builtin_init+0xb0>)
 801250e:	f000 fbb5 	bl	8012c7c <lv_font_add>
    lv_font_add(&lv_font_symbol_20, &lv_font_dejavu_20);
 8012512:	4631      	mov	r1, r6
 8012514:	481b      	ldr	r0, [pc, #108]	; (8012584 <lv_font_builtin_init+0xb4>)
 8012516:	f000 fbb1 	bl	8012c7c <lv_font_add>
    lv_font_add(&lv_font_dejavu_30, NULL);
 801251a:	4628      	mov	r0, r5
 801251c:	2100      	movs	r1, #0
 801251e:	f000 fbad 	bl	8012c7c <lv_font_add>
    lv_font_add(&lv_font_dejavu_30_latin_sup, &lv_font_dejavu_30);
 8012522:	4629      	mov	r1, r5
 8012524:	4818      	ldr	r0, [pc, #96]	; (8012588 <lv_font_builtin_init+0xb8>)
 8012526:	f000 fba9 	bl	8012c7c <lv_font_add>
    lv_font_add(&lv_font_dejavu_30_cyrillic, &lv_font_dejavu_30);
 801252a:	4629      	mov	r1, r5
 801252c:	4817      	ldr	r0, [pc, #92]	; (801258c <lv_font_builtin_init+0xbc>)
 801252e:	f000 fba5 	bl	8012c7c <lv_font_add>
    lv_font_add(&lv_font_symbol_30, &lv_font_dejavu_30);
 8012532:	4629      	mov	r1, r5
 8012534:	4816      	ldr	r0, [pc, #88]	; (8012590 <lv_font_builtin_init+0xc0>)
 8012536:	f000 fba1 	bl	8012c7c <lv_font_add>
    lv_font_add(&lv_font_dejavu_40, NULL);
 801253a:	4620      	mov	r0, r4
 801253c:	2100      	movs	r1, #0
 801253e:	f000 fb9d 	bl	8012c7c <lv_font_add>
#endif

#if USE_LV_FONT_DEJAVU_40_LATIN_SUP != 0
#if USE_LV_FONT_DEJAVU_40 != 0
    lv_font_add(&lv_font_dejavu_40_latin_sup, &lv_font_dejavu_40);
 8012542:	4621      	mov	r1, r4
 8012544:	4813      	ldr	r0, [pc, #76]	; (8012594 <lv_font_builtin_init+0xc4>)
 8012546:	f000 fb99 	bl	8012c7c <lv_font_add>
#endif
#endif

#if USE_LV_FONT_DEJAVU_40_CYRILLIC != 0
#if USE_LV_FONT_DEJAVU_40 != 0
    lv_font_add(&lv_font_dejavu_40_cyrillic, &lv_font_dejavu_40);
 801254a:	4621      	mov	r1, r4
 801254c:	4812      	ldr	r0, [pc, #72]	; (8012598 <lv_font_builtin_init+0xc8>)
 801254e:	f000 fb95 	bl	8012c7c <lv_font_add>
#endif

    /*SYMBOL 40*/
#if USE_LV_FONT_SYMBOL_40 != 0
#if USE_LV_FONT_DEJAVU_40 != 0
    lv_font_add(&lv_font_symbol_40, &lv_font_dejavu_40);
 8012552:	4621      	mov	r1, r4
 8012554:	4811      	ldr	r0, [pc, #68]	; (801259c <lv_font_builtin_init+0xcc>)
#else
    lv_font_add(&lv_font_symbol_40, NULL);
#endif
#endif
}
 8012556:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_font_add(&lv_font_symbol_40, &lv_font_dejavu_40);
 801255a:	f000 bb8f 	b.w	8012c7c <lv_font_add>
 801255e:	bf00      	nop
 8012560:	2000005c 	.word	0x2000005c
 8012564:	200000d4 	.word	0x200000d4
 8012568:	2000014c 	.word	0x2000014c
 801256c:	200000ac 	.word	0x200000ac
 8012570:	20000084 	.word	0x20000084
 8012574:	2000023c 	.word	0x2000023c
 8012578:	200001c4 	.word	0x200001c4
 801257c:	20000124 	.word	0x20000124
 8012580:	200000fc 	.word	0x200000fc
 8012584:	20000264 	.word	0x20000264
 8012588:	2000019c 	.word	0x2000019c
 801258c:	20000174 	.word	0x20000174
 8012590:	2000028c 	.word	0x2000028c
 8012594:	20000214 	.word	0x20000214
 8012598:	200001ec 	.word	0x200001ec
 801259c:	200002b4 	.word	0x200002b4

080125a0 <lv_disp_drv_init>:
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
    driver->disp_fill = NULL;
 80125a0:	2300      	movs	r3, #0
 80125a2:	6043      	str	r3, [r0, #4]
    driver->disp_map = NULL;
 80125a4:	6083      	str	r3, [r0, #8]
    driver->disp_flush = NULL;
 80125a6:	6003      	str	r3, [r0, #0]

#if USE_LV_GPU
    driver->mem_blend = NULL;
 80125a8:	60c3      	str	r3, [r0, #12]
    driver->mem_fill = NULL;
 80125aa:	6103      	str	r3, [r0, #16]
#endif

#if LV_VDB_SIZE
    driver->vdb_wr = NULL;
 80125ac:	6143      	str	r3, [r0, #20]
 80125ae:	4770      	bx	lr

080125b0 <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable (can be local variable)
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
 80125b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125b2:	4605      	mov	r5, r0
    lv_disp_t * node;

    node = lv_mem_alloc(sizeof(lv_disp_t));
 80125b4:	201c      	movs	r0, #28
 80125b6:	f000 fe51 	bl	801325c <lv_mem_alloc>
    lv_mem_assert(node);
 80125ba:	b1a0      	cbz	r0, 80125e6 <lv_disp_drv_register+0x36>
 80125bc:	4604      	mov	r4, r0
    if(node == NULL) return NULL;

    memcpy(&node->driver, driver, sizeof(lv_disp_drv_t));
 80125be:	682a      	ldr	r2, [r5, #0]
 80125c0:	686b      	ldr	r3, [r5, #4]
    node->next = NULL;
 80125c2:	2600      	movs	r6, #0
    memcpy(&node->driver, driver, sizeof(lv_disp_drv_t));
 80125c4:	68e9      	ldr	r1, [r5, #12]
 80125c6:	68af      	ldr	r7, [r5, #8]

    /* Set first display as active by default */
    if(LV_GC_ROOT(_lv_disp_list) == NULL) {
 80125c8:	480c      	ldr	r0, [pc, #48]	; (80125fc <lv_disp_drv_register+0x4c>)
    memcpy(&node->driver, driver, sizeof(lv_disp_drv_t));
 80125ca:	6022      	str	r2, [r4, #0]
 80125cc:	60e1      	str	r1, [r4, #12]
 80125ce:	6063      	str	r3, [r4, #4]
 80125d0:	60a7      	str	r7, [r4, #8]
    if(LV_GC_ROOT(_lv_disp_list) == NULL) {
 80125d2:	6801      	ldr	r1, [r0, #0]
    memcpy(&node->driver, driver, sizeof(lv_disp_drv_t));
 80125d4:	692a      	ldr	r2, [r5, #16]
 80125d6:	696b      	ldr	r3, [r5, #20]
 80125d8:	6122      	str	r2, [r4, #16]
 80125da:	6163      	str	r3, [r4, #20]
    node->next = NULL;
 80125dc:	61a6      	str	r6, [r4, #24]
    if(LV_GC_ROOT(_lv_disp_list) == NULL) {
 80125de:	b119      	cbz	r1, 80125e8 <lv_disp_drv_register+0x38>
        LV_GC_ROOT(_lv_disp_list) = node;
        active = node;
        lv_obj_invalidate(lv_scr_act());
    } else {
        ((lv_disp_t*)LV_GC_ROOT(_lv_disp_list))->next = node;
 80125e0:	618c      	str	r4, [r1, #24]
    }

    return node;
}
 80125e2:	4620      	mov	r0, r4
 80125e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80125e6:	e7fe      	b.n	80125e6 <lv_disp_drv_register+0x36>
        active = node;
 80125e8:	4b05      	ldr	r3, [pc, #20]	; (8012600 <lv_disp_drv_register+0x50>)
        LV_GC_ROOT(_lv_disp_list) = node;
 80125ea:	6004      	str	r4, [r0, #0]
        active = node;
 80125ec:	601c      	str	r4, [r3, #0]
        lv_obj_invalidate(lv_scr_act());
 80125ee:	f7f9 fbd7 	bl	800bda0 <lv_scr_act>
 80125f2:	f7f7 fb75 	bl	8009ce0 <lv_obj_invalidate>
}
 80125f6:	4620      	mov	r0, r4
 80125f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80125fa:	bf00      	nop
 80125fc:	200194f8 	.word	0x200194f8
 8012600:	2000e5b4 	.word	0x2000e5b4

08012604 <lv_disp_get_active>:
 * Get a pointer to the active display
 * @return pointer to the active display
 */
lv_disp_t * lv_disp_get_active(void)
{
    return active;
 8012604:	4b01      	ldr	r3, [pc, #4]	; (801260c <lv_disp_get_active+0x8>)
}
 8012606:	6818      	ldr	r0, [r3, #0]
 8012608:	4770      	bx	lr
 801260a:	bf00      	nop
 801260c:	2000e5b4 	.word	0x2000e5b4

08012610 <lv_disp_flush>:
 * @param y1 top coordinate of the rectangle
 * @param y2 bottom coordinate of the rectangle
 * @param color_p pointer to an array of colors
 */
void lv_disp_flush(int32_t x1, int32_t y1, int32_t x2, int32_t y2, lv_color_t * color_p)
{
 8012610:	b430      	push	{r4, r5}
    if(active == NULL) return;
 8012612:	4c05      	ldr	r4, [pc, #20]	; (8012628 <lv_disp_flush+0x18>)
 8012614:	6824      	ldr	r4, [r4, #0]
 8012616:	b124      	cbz	r4, 8012622 <lv_disp_flush+0x12>
    if(active->driver.disp_flush != NULL) {
 8012618:	6824      	ldr	r4, [r4, #0]
 801261a:	b114      	cbz	r4, 8012622 <lv_disp_flush+0x12>

        LV_LOG_TRACE("disp flush  started");
        active->driver.disp_flush(x1, y1, x2, y2, color_p);
 801261c:	46a4      	mov	ip, r4
        LV_LOG_TRACE("disp flush ready");

    } else {
        LV_LOG_WARN("disp flush function registered");
    }
}
 801261e:	bc30      	pop	{r4, r5}
        active->driver.disp_flush(x1, y1, x2, y2, color_p);
 8012620:	4760      	bx	ip
}
 8012622:	bc30      	pop	{r4, r5}
 8012624:	4770      	bx	lr
 8012626:	bf00      	nop
 8012628:	2000e5b4 	.word	0x2000e5b4

0801262c <lv_disp_mem_blend>:
 * @param src pointer to pixel map. Blend it to 'dest'.
 * @param length number of pixels in 'src'
 * @param opa opacity (0, LV_OPA_TRANSP: transparent ... 255, LV_OPA_COVER, fully cover)
 */
void lv_disp_mem_blend(lv_color_t * dest, const lv_color_t * src, uint32_t length, lv_opa_t opa)
{
 801262c:	b410      	push	{r4}
    if(active == NULL) return;
 801262e:	4c06      	ldr	r4, [pc, #24]	; (8012648 <lv_disp_mem_blend+0x1c>)
 8012630:	6824      	ldr	r4, [r4, #0]
 8012632:	b12c      	cbz	r4, 8012640 <lv_disp_mem_blend+0x14>
    if(active->driver.mem_blend != NULL) active->driver.mem_blend(dest, src, length, opa);
 8012634:	68e4      	ldr	r4, [r4, #12]
 8012636:	b11c      	cbz	r4, 8012640 <lv_disp_mem_blend+0x14>
 8012638:	46a4      	mov	ip, r4
}
 801263a:	f85d 4b04 	ldr.w	r4, [sp], #4
    if(active->driver.mem_blend != NULL) active->driver.mem_blend(dest, src, length, opa);
 801263e:	4760      	bx	ip
}
 8012640:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012644:	4770      	bx	lr
 8012646:	bf00      	nop
 8012648:	2000e5b4 	.word	0x2000e5b4

0801264c <lv_disp_mem_fill>:
 * @param length number of pixels in 'src'
 * @param opa opacity (0, LV_OPA_TRANSP: transparent ... 255, LV_OPA_COVER, fully cover)
 */
void lv_disp_mem_fill(lv_color_t * dest, uint32_t length, lv_color_t color)
{
    if(active == NULL) return;
 801264c:	4b03      	ldr	r3, [pc, #12]	; (801265c <lv_disp_mem_fill+0x10>)
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	b113      	cbz	r3, 8012658 <lv_disp_mem_fill+0xc>
    if(active->driver.mem_fill != NULL) active->driver.mem_fill(dest, length, color);
 8012652:	691b      	ldr	r3, [r3, #16]
 8012654:	b103      	cbz	r3, 8012658 <lv_disp_mem_fill+0xc>
 8012656:	4718      	bx	r3
 8012658:	4770      	bx	lr
 801265a:	bf00      	nop
 801265c:	2000e5b4 	.word	0x2000e5b4

08012660 <lv_disp_is_mem_blend_supported>:
 * Shows if memory blending (by GPU) is supported or not
 * @return false: 'mem_blend' is not supported in the driver; true: 'mem_blend' is supported in the driver
 */
bool lv_disp_is_mem_blend_supported(void)
{
    if(active == NULL) return false;
 8012660:	4b03      	ldr	r3, [pc, #12]	; (8012670 <lv_disp_is_mem_blend_supported+0x10>)
 8012662:	6818      	ldr	r0, [r3, #0]
 8012664:	b118      	cbz	r0, 801266e <lv_disp_is_mem_blend_supported+0xe>
    if(active->driver.mem_blend) return true;
 8012666:	68c0      	ldr	r0, [r0, #12]
 8012668:	3000      	adds	r0, #0
 801266a:	bf18      	it	ne
 801266c:	2001      	movne	r0, #1
    else return false;
}
 801266e:	4770      	bx	lr
 8012670:	2000e5b4 	.word	0x2000e5b4

08012674 <lv_disp_is_mem_fill_supported>:
 * Shows if memory fill (by GPU) is supported or not
 * @return false: 'mem_fill' is not supported in the drover; true: 'mem_fill' is supported in the driver
 */
bool lv_disp_is_mem_fill_supported(void)
{
    if(active == NULL) return false;
 8012674:	4b03      	ldr	r3, [pc, #12]	; (8012684 <lv_disp_is_mem_fill_supported+0x10>)
 8012676:	6818      	ldr	r0, [r3, #0]
 8012678:	b118      	cbz	r0, 8012682 <lv_disp_is_mem_fill_supported+0xe>
    if(active->driver.mem_fill) return true;
 801267a:	6900      	ldr	r0, [r0, #16]
 801267c:	3000      	adds	r0, #0
 801267e:	bf18      	it	ne
 8012680:	2001      	movne	r0, #1
    else return false;
}
 8012682:	4770      	bx	lr
 8012684:	2000e5b4 	.word	0x2000e5b4

08012688 <lv_indev_drv_init>:
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_indev_drv_init(lv_indev_drv_t * driver)
{
    driver->read = NULL;
 8012688:	2300      	movs	r3, #0
 801268a:	6043      	str	r3, [r0, #4]
    driver->type = LV_INDEV_TYPE_NONE;
 801268c:	7003      	strb	r3, [r0, #0]
    driver->user_data = NULL;
 801268e:	6083      	str	r3, [r0, #8]
 8012690:	4770      	bx	lr
 8012692:	bf00      	nop

08012694 <lv_indev_drv_register>:
 * Register an initialized input device driver.
 * @param driver pointer to an initialized 'lv_indev_drv_t' variable (can be local variable)
 * @return pointer to the new input device or NULL on error
 */
lv_indev_t * lv_indev_drv_register(lv_indev_drv_t * driver)
{
 8012694:	b570      	push	{r4, r5, r6, lr}
 8012696:	4605      	mov	r5, r0
    lv_indev_t * node;

    node = lv_mem_alloc(sizeof(lv_indev_t));
 8012698:	2048      	movs	r0, #72	; 0x48
 801269a:	f000 fddf 	bl	801325c <lv_mem_alloc>
    if(!node) return NULL;
 801269e:	4604      	mov	r4, r0
 80126a0:	b1d8      	cbz	r0, 80126da <lv_indev_drv_register+0x46>

    memset(node, 0, sizeof(lv_indev_t));
 80126a2:	2248      	movs	r2, #72	; 0x48
 80126a4:	2100      	movs	r1, #0
 80126a6:	f00b f9a4 	bl	801d9f2 <memset>
    memcpy(&node->driver, driver, sizeof(lv_indev_drv_t));
 80126aa:	682a      	ldr	r2, [r5, #0]

    node->next = NULL;
    node->proc.reset_query = 1;
 80126ac:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    node->next = NULL;
 80126b0:	2100      	movs	r1, #0
    node->cursor = NULL;
    node->group = NULL;
    node->btn_points = NULL;

    if(LV_GC_ROOT(_lv_indev_list) == NULL) {
 80126b2:	480c      	ldr	r0, [pc, #48]	; (80126e4 <lv_indev_drv_register+0x50>)
    memcpy(&node->driver, driver, sizeof(lv_indev_drv_t));
 80126b4:	686e      	ldr	r6, [r5, #4]
    node->proc.reset_query = 1;
 80126b6:	f043 0302 	orr.w	r3, r3, #2
    memcpy(&node->driver, driver, sizeof(lv_indev_drv_t));
 80126ba:	68ad      	ldr	r5, [r5, #8]
 80126bc:	6022      	str	r2, [r4, #0]
    if(LV_GC_ROOT(_lv_indev_list) == NULL) {
 80126be:	6802      	ldr	r2, [r0, #0]
    memcpy(&node->driver, driver, sizeof(lv_indev_drv_t));
 80126c0:	6066      	str	r6, [r4, #4]
 80126c2:	60a5      	str	r5, [r4, #8]
    node->proc.reset_query = 1;
 80126c4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    node->next = NULL;
 80126c8:	6461      	str	r1, [r4, #68]	; 0x44
    node->cursor = NULL;
 80126ca:	6421      	str	r1, [r4, #64]	; 0x40
    if(LV_GC_ROOT(_lv_indev_list) == NULL) {
 80126cc:	b90a      	cbnz	r2, 80126d2 <lv_indev_drv_register+0x3e>
 80126ce:	e006      	b.n	80126de <lv_indev_drv_register+0x4a>
 80126d0:	461a      	mov	r2, r3
        LV_GC_ROOT(_lv_indev_list) = node;
    } else {
        lv_indev_t * last = LV_GC_ROOT(_lv_indev_list);
        while(last->next)
 80126d2:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d1fb      	bne.n	80126d0 <lv_indev_drv_register+0x3c>
            last = last->next;

        last->next = node;
 80126d8:	6454      	str	r4, [r2, #68]	; 0x44
    }

    return node;
}
 80126da:	4620      	mov	r0, r4
 80126dc:	bd70      	pop	{r4, r5, r6, pc}
        LV_GC_ROOT(_lv_indev_list) = node;
 80126de:	6004      	str	r4, [r0, #0]
 80126e0:	e7fb      	b.n	80126da <lv_indev_drv_register+0x46>
 80126e2:	bf00      	nop
 80126e4:	200194dc 	.word	0x200194dc

080126e8 <lv_indev_next>:
 * @return the next input devise or NULL if no more. Give the first input device when the parameter is NULL
 */
lv_indev_t * lv_indev_next(lv_indev_t * indev)
{

    if(indev == NULL) {
 80126e8:	b108      	cbz	r0, 80126ee <lv_indev_next+0x6>
        return LV_GC_ROOT(_lv_indev_list);
    } else {
        if(indev->next == NULL) return NULL;
 80126ea:	6c40      	ldr	r0, [r0, #68]	; 0x44
        else return indev->next;
    }
}
 80126ec:	4770      	bx	lr
        return LV_GC_ROOT(_lv_indev_list);
 80126ee:	4b01      	ldr	r3, [pc, #4]	; (80126f4 <lv_indev_next+0xc>)
 80126f0:	6818      	ldr	r0, [r3, #0]
 80126f2:	4770      	bx	lr
 80126f4:	200194dc 	.word	0x200194dc

080126f8 <lv_indev_read>:
 */
bool lv_indev_read(lv_indev_t * indev, lv_indev_data_t * data)
{
    bool cont = false;

    memset(data, 0, sizeof(lv_indev_data_t));
 80126f8:	2300      	movs	r3, #0
 80126fa:	608b      	str	r3, [r1, #8]
 80126fc:	600b      	str	r3, [r1, #0]
 80126fe:	604b      	str	r3, [r1, #4]
    data->state = LV_INDEV_STATE_REL;
 8012700:	720b      	strb	r3, [r1, #8]

    if(indev->driver.read) {
 8012702:	6843      	ldr	r3, [r0, #4]
 8012704:	b11b      	cbz	r3, 801270e <lv_indev_read+0x16>
        data->user_data = indev->driver.user_data;
 8012706:	6882      	ldr	r2, [r0, #8]

        LV_LOG_TRACE("idnev read started");
        cont = indev->driver.read(data);
 8012708:	4608      	mov	r0, r1
        data->user_data = indev->driver.user_data;
 801270a:	604a      	str	r2, [r1, #4]
        cont = indev->driver.read(data);
 801270c:	4718      	bx	r3
    } else {
        LV_LOG_WARN("indev function registered");
    }

    return cont;
}
 801270e:	4618      	mov	r0, r3
 8012710:	4770      	bx	lr
 8012712:	bf00      	nop

08012714 <lv_tick_inc>:
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
    tick_irq_flag = 0;
 8012714:	4b03      	ldr	r3, [pc, #12]	; (8012724 <lv_tick_inc+0x10>)
 8012716:	2100      	movs	r1, #0
    sys_time += tick_period;
 8012718:	685a      	ldr	r2, [r3, #4]
    tick_irq_flag = 0;
 801271a:	7019      	strb	r1, [r3, #0]
    sys_time += tick_period;
 801271c:	4410      	add	r0, r2
 801271e:	6058      	str	r0, [r3, #4]
 8012720:	4770      	bx	lr
 8012722:	bf00      	nop
 8012724:	2000e5b8 	.word	0x2000e5b8

08012728 <lv_tick_get>:
/**
 * Get the elapsed milliseconds since start up
 * @return the elapsed milliseconds
 */
uint32_t lv_tick_get(void)
{
 8012728:	4b03      	ldr	r3, [pc, #12]	; (8012738 <lv_tick_get+0x10>)
#if LV_TICK_CUSTOM == 0
    uint32_t result;
    do {
        tick_irq_flag = 1;
 801272a:	2101      	movs	r1, #1
 801272c:	6858      	ldr	r0, [r3, #4]
 801272e:	7019      	strb	r1, [r3, #0]
        result = sys_time;
    } while(!tick_irq_flag);     /*'lv_tick_inc()' clears this flag which can be in an interrupt. Continue until make a non interrupted cycle */
 8012730:	781a      	ldrb	r2, [r3, #0]
 8012732:	2a00      	cmp	r2, #0
 8012734:	d0fb      	beq.n	801272e <lv_tick_get+0x6>

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 8012736:	4770      	bx	lr
 8012738:	2000e5b8 	.word	0x2000e5b8

0801273c <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of systick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 801273c:	4b05      	ldr	r3, [pc, #20]	; (8012754 <lv_tick_elaps+0x18>)
        tick_irq_flag = 1;
 801273e:	2101      	movs	r1, #1
{
 8012740:	b410      	push	{r4}
 8012742:	685c      	ldr	r4, [r3, #4]
        tick_irq_flag = 1;
 8012744:	7019      	strb	r1, [r3, #0]
    } while(!tick_irq_flag);     /*'lv_tick_inc()' clears this flag which can be in an interrupt. Continue until make a non interrupted cycle */
 8012746:	781a      	ldrb	r2, [r3, #0]
 8012748:	2a00      	cmp	r2, #0
 801274a:	d0fb      	beq.n	8012744 <lv_tick_elaps+0x8>
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
}
 801274c:	1a20      	subs	r0, r4, r0
 801274e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012752:	4770      	bx	lr
 8012754:	2000e5b8 	.word	0x2000e5b8

08012758 <anim_task>:
/**
 * Periodically handle the animations.
 * @param param unused
 */
static void anim_task(void * param)
{
 8012758:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)param;

    lv_anim_t * a;
    LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
 801275c:	4844      	ldr	r0, [pc, #272]	; (8012870 <anim_task+0x118>)
 801275e:	f000 fd17 	bl	8013190 <lv_ll_get_head>
 8012762:	b170      	cbz	r0, 8012782 <anim_task+0x2a>
 8012764:	4603      	mov	r3, r0
 8012766:	4c42      	ldr	r4, [pc, #264]	; (8012870 <anim_task+0x118>)
        a->has_run = 0;
 8012768:	f893 2020 	ldrb.w	r2, [r3, #32]
    LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
 801276c:	4619      	mov	r1, r3
 801276e:	4620      	mov	r0, r4
        a->has_run = 0;
 8012770:	f36f 02c3 	bfc	r2, #3, #1
 8012774:	f883 2020 	strb.w	r2, [r3, #32]
    LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
 8012778:	f000 fd12 	bl	80131a0 <lv_ll_get_next>
 801277c:	4603      	mov	r3, r0
 801277e:	2800      	cmp	r0, #0
 8012780:	d1f2      	bne.n	8012768 <anim_task+0x10>
    }

    uint32_t elaps = lv_tick_elaps(last_task_run);
 8012782:	4d3c      	ldr	r5, [pc, #240]	; (8012874 <anim_task+0x11c>)
 8012784:	6828      	ldr	r0, [r5, #0]
 8012786:	f7ff ffd9 	bl	801273c <lv_tick_elaps>
 801278a:	4680      	mov	r8, r0
    a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 801278c:	4838      	ldr	r0, [pc, #224]	; (8012870 <anim_task+0x118>)
 801278e:	f000 fcff 	bl	8013190 <lv_ll_get_head>

    while(a != NULL) {
 8012792:	4604      	mov	r4, r0
 8012794:	b358      	cbz	r0, 80127ee <anim_task+0x96>
        /*It can be set by `lv_anim_del()` typically in `end_cb`. If set then an animation delete happened in `anim_ready_handler`
         * which could make this linked list reading corrupt because the list is changed meanwhile
         */
        anim_list_changed = false;
 8012796:	2700      	movs	r7, #0
        }

        /* If the linked list changed due to anim. delete then it's not safe to continue
         * the reading of the list from here -> start from the head*/
        if(anim_list_changed) a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
        else a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8012798:	4e35      	ldr	r6, [pc, #212]	; (8012870 <anim_task+0x118>)
            (a->repeat == 0 && a->playback == 1 && a->playback_now == 1)) {
        void (*cb)(void *) = a->end_cb;
        void * p = a->var;
        lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
        lv_mem_free(a);
        anim_list_changed = true;
 801279a:	f04f 0901 	mov.w	r9, #1
        if(!a->has_run) {
 801279e:	f894 2020 	ldrb.w	r2, [r4, #32]
        anim_list_changed = false;
 80127a2:	712f      	strb	r7, [r5, #4]
        if(!a->has_run) {
 80127a4:	0710      	lsls	r0, r2, #28
 80127a6:	d427      	bmi.n	80127f8 <anim_task+0xa0>
            a->act_time += elaps;
 80127a8:	8b63      	ldrh	r3, [r4, #26]
            a->has_run = 1;         /*The list readying might be reseted so need to know which anim has run already*/
 80127aa:	f042 0208 	orr.w	r2, r2, #8
            a->act_time += elaps;
 80127ae:	4443      	add	r3, r8
            a->has_run = 1;         /*The list readying might be reseted so need to know which anim has run already*/
 80127b0:	f884 2020 	strb.w	r2, [r4, #32]
            a->act_time += elaps;
 80127b4:	b21b      	sxth	r3, r3
            if(a->act_time >= 0) {
 80127b6:	2b00      	cmp	r3, #0
            a->act_time += elaps;
 80127b8:	8363      	strh	r3, [r4, #26]
            if(a->act_time >= 0) {
 80127ba:	db1d      	blt.n	80127f8 <anim_task+0xa0>
                if(a->act_time > a->time) a->act_time = a->time;
 80127bc:	8b22      	ldrh	r2, [r4, #24]
                new_value = a->path(a);
 80127be:	4620      	mov	r0, r4
                if(a->act_time > a->time) a->act_time = a->time;
 80127c0:	4293      	cmp	r3, r2
                new_value = a->path(a);
 80127c2:	68e3      	ldr	r3, [r4, #12]
                if(a->act_time > a->time) a->act_time = a->time;
 80127c4:	bfc8      	it	gt
 80127c6:	8362      	strhgt	r2, [r4, #26]
                new_value = a->path(a);
 80127c8:	4798      	blx	r3
                if(a->fp != NULL) a->fp(a->var, new_value); /*Apply the calculated value*/
 80127ca:	6863      	ldr	r3, [r4, #4]
 80127cc:	b113      	cbz	r3, 80127d4 <anim_task+0x7c>
 80127ce:	4601      	mov	r1, r0
 80127d0:	6820      	ldr	r0, [r4, #0]
 80127d2:	4798      	blx	r3
                if(a->act_time >= a->time) {
 80127d4:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
 80127d8:	8b23      	ldrh	r3, [r4, #24]
 80127da:	429a      	cmp	r2, r3
 80127dc:	da14      	bge.n	8012808 <anim_task+0xb0>
        if(anim_list_changed) a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 80127de:	792b      	ldrb	r3, [r5, #4]
 80127e0:	b153      	cbz	r3, 80127f8 <anim_task+0xa0>
 80127e2:	4630      	mov	r0, r6
 80127e4:	f000 fcd4 	bl	8013190 <lv_ll_get_head>
 80127e8:	4604      	mov	r4, r0
    while(a != NULL) {
 80127ea:	2c00      	cmp	r4, #0
 80127ec:	d1d7      	bne.n	801279e <anim_task+0x46>
    last_task_run = lv_tick_get();
 80127ee:	f7ff ff9b 	bl	8012728 <lv_tick_get>
 80127f2:	6028      	str	r0, [r5, #0]
}
 80127f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 80127f8:	4621      	mov	r1, r4
 80127fa:	4630      	mov	r0, r6
 80127fc:	f000 fcd0 	bl	80131a0 <lv_ll_get_next>
 8012800:	4604      	mov	r4, r0
    while(a != NULL) {
 8012802:	2c00      	cmp	r4, #0
 8012804:	d1cb      	bne.n	801279e <anim_task+0x46>
 8012806:	e7f2      	b.n	80127ee <anim_task+0x96>
    if((a->repeat == 0 && a->playback == 0) ||
 8012808:	f894 3020 	ldrb.w	r3, [r4, #32]
 801280c:	0799      	lsls	r1, r3, #30
 801280e:	d01c      	beq.n	801284a <anim_task+0xf2>
 8012810:	f003 0207 	and.w	r2, r3, #7
 8012814:	2a05      	cmp	r2, #5
 8012816:	d018      	beq.n	801284a <anim_task+0xf2>
         * if yes then the caller function has to know this*/
        if(cb != NULL) cb(p);
    }
    /*If the animation is not deleted then restart it*/
    else {
        a->act_time = - a->repeat_pause;    /*Restart the animation*/
 8012818:	8be2      	ldrh	r2, [r4, #30]
 801281a:	4252      	negs	r2, r2
 801281c:	8362      	strh	r2, [r4, #26]
        /*Swap the start and end values in play back mode*/
        if(a->playback != 0) {
 801281e:	07da      	lsls	r2, r3, #31
 8012820:	d5dd      	bpl.n	80127de <anim_task+0x86>
            /*If now turning back use the 'playback_pause*/
            if(a->playback_now == 0) a->act_time = - a->playback_pause;
 8012822:	f013 0304 	ands.w	r3, r3, #4
 8012826:	d102      	bne.n	801282e <anim_task+0xd6>
 8012828:	8ba2      	ldrh	r2, [r4, #28]
 801282a:	4252      	negs	r2, r2
 801282c:	8362      	strh	r2, [r4, #26]

            /*Toggle the play back state*/
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 801282e:	fab3 f383 	clz	r3, r3
 8012832:	f894 2020 	ldrb.w	r2, [r4, #32]
            /*Swap the start and end values*/
            int32_t tmp;
            tmp = a->start;
 8012836:	6921      	ldr	r1, [r4, #16]
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 8012838:	095b      	lsrs	r3, r3, #5
            a->start = a->end;
 801283a:	6960      	ldr	r0, [r4, #20]
            a->end = tmp;
 801283c:	6161      	str	r1, [r4, #20]
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 801283e:	f363 0282 	bfi	r2, r3, #2, #1
            a->start = a->end;
 8012842:	6120      	str	r0, [r4, #16]
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 8012844:	f884 2020 	strb.w	r2, [r4, #32]
 8012848:	e7c9      	b.n	80127de <anim_task+0x86>
        lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
 801284a:	4621      	mov	r1, r4
 801284c:	4630      	mov	r0, r6
        void (*cb)(void *) = a->end_cb;
 801284e:	f8d4 a008 	ldr.w	sl, [r4, #8]
        void * p = a->var;
 8012852:	f8d4 b000 	ldr.w	fp, [r4]
        lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
 8012856:	f000 fbcf 	bl	8012ff8 <lv_ll_rem>
        lv_mem_free(a);
 801285a:	4620      	mov	r0, r4
 801285c:	f000 fd06 	bl	801326c <lv_mem_free>
        anim_list_changed = true;
 8012860:	f885 9004 	strb.w	r9, [r5, #4]
        if(cb != NULL) cb(p);
 8012864:	f1ba 0f00 	cmp.w	sl, #0
 8012868:	d0bb      	beq.n	80127e2 <anim_task+0x8a>
 801286a:	4658      	mov	r0, fp
 801286c:	47d0      	blx	sl
 801286e:	e7b6      	b.n	80127de <anim_task+0x86>
 8012870:	200194e0 	.word	0x200194e0
 8012874:	2000e5c0 	.word	0x2000e5c0

08012878 <lv_anim_init>:
{
 8012878:	b510      	push	{r4, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 801287a:	2124      	movs	r1, #36	; 0x24
 801287c:	4807      	ldr	r0, [pc, #28]	; (801289c <lv_anim_init+0x24>)
 801287e:	f000 fb3f 	bl	8012f00 <lv_ll_init>
    last_task_run = lv_tick_get();
 8012882:	f7ff ff51 	bl	8012728 <lv_tick_get>
 8012886:	4906      	ldr	r1, [pc, #24]	; (80128a0 <lv_anim_init+0x28>)
    lv_task_create(anim_task, LV_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 8012888:	2300      	movs	r3, #0
 801288a:	2203      	movs	r2, #3
    last_task_run = lv_tick_get();
 801288c:	6008      	str	r0, [r1, #0]
    lv_task_create(anim_task, LV_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 801288e:	211e      	movs	r1, #30
 8012890:	4804      	ldr	r0, [pc, #16]	; (80128a4 <lv_anim_init+0x2c>)
}
 8012892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_task_create(anim_task, LV_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 8012896:	f000 bf45 	b.w	8013724 <lv_task_create>
 801289a:	bf00      	nop
 801289c:	200194e0 	.word	0x200194e0
 80128a0:	2000e5c0 	.word	0x2000e5c0
 80128a4:	08012759 	.word	0x08012759

080128a8 <lv_anim_create>:
{
 80128a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(anim_p->fp != NULL) lv_anim_del(anim_p->var, anim_p->fp);       /*fp == NULL would delete all animations of var*/
 80128ac:	f8d0 9004 	ldr.w	r9, [r0, #4]
{
 80128b0:	4605      	mov	r5, r0
    if(anim_p->fp != NULL) lv_anim_del(anim_p->var, anim_p->fp);       /*fp == NULL would delete all animations of var*/
 80128b2:	f1b9 0f00 	cmp.w	r9, #0
 80128b6:	d053      	beq.n	8012960 <lv_anim_create+0xb8>
    a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 80128b8:	482a      	ldr	r0, [pc, #168]	; (8012964 <lv_anim_create+0xbc>)
    if(anim_p->fp != NULL) lv_anim_del(anim_p->var, anim_p->fp);       /*fp == NULL would delete all animations of var*/
 80128ba:	f8d5 a000 	ldr.w	sl, [r5]
    a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 80128be:	f000 fc67 	bl	8013190 <lv_ll_get_head>
    while(a != NULL) {
 80128c2:	4604      	mov	r4, r0
 80128c4:	2800      	cmp	r0, #0
 80128c6:	d04b      	beq.n	8012960 <lv_anim_create+0xb8>
 80128c8:	4e27      	ldr	r6, [pc, #156]	; (8012968 <lv_anim_create+0xc0>)
            anim_list_changed = true;       /*Read by `anim_task`. It need to know if a delete occurred in the linked list*/
 80128ca:	f04f 0b01 	mov.w	fp, #1
        a_next = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 80128ce:	4f25      	ldr	r7, [pc, #148]	; (8012964 <lv_anim_create+0xbc>)
 80128d0:	e001      	b.n	80128d6 <lv_anim_create+0x2e>
    while(a != NULL) {
 80128d2:	4644      	mov	r4, r8
 80128d4:	b1b4      	cbz	r4, 8012904 <lv_anim_create+0x5c>
        a_next = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 80128d6:	4621      	mov	r1, r4
 80128d8:	4638      	mov	r0, r7
 80128da:	f000 fc61 	bl	80131a0 <lv_ll_get_next>
        if(a->var == var && (a->fp == fp || fp == NULL)) {
 80128de:	6823      	ldr	r3, [r4, #0]
        a_next = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 80128e0:	4680      	mov	r8, r0
        if(a->var == var && (a->fp == fp || fp == NULL)) {
 80128e2:	459a      	cmp	sl, r3
 80128e4:	d1f5      	bne.n	80128d2 <lv_anim_create+0x2a>
 80128e6:	6863      	ldr	r3, [r4, #4]
 80128e8:	4599      	cmp	r9, r3
 80128ea:	d1f2      	bne.n	80128d2 <lv_anim_create+0x2a>
            lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
 80128ec:	4621      	mov	r1, r4
 80128ee:	4638      	mov	r0, r7
 80128f0:	f000 fb82 	bl	8012ff8 <lv_ll_rem>
            lv_mem_free(a);
 80128f4:	4620      	mov	r0, r4
    while(a != NULL) {
 80128f6:	4644      	mov	r4, r8
            lv_mem_free(a);
 80128f8:	f000 fcb8 	bl	801326c <lv_mem_free>
            anim_list_changed = true;       /*Read by `anim_task`. It need to know if a delete occurred in the linked list*/
 80128fc:	f886 b004 	strb.w	fp, [r6, #4]
    while(a != NULL) {
 8012900:	2c00      	cmp	r4, #0
 8012902:	d1e8      	bne.n	80128d6 <lv_anim_create+0x2e>
    lv_anim_t * new_anim = lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
 8012904:	4817      	ldr	r0, [pc, #92]	; (8012964 <lv_anim_create+0xbc>)
 8012906:	f000 fb05 	bl	8012f14 <lv_ll_ins_head>
    lv_mem_assert(new_anim);
 801290a:	b340      	cbz	r0, 801295e <lv_anim_create+0xb6>
    anim_p->playback_now = 0;
 801290c:	f895 1020 	ldrb.w	r1, [r5, #32]
    memcpy(new_anim, anim_p, sizeof(lv_anim_t));
 8012910:	462b      	mov	r3, r5
 8012912:	4602      	mov	r2, r0
 8012914:	f105 0420 	add.w	r4, r5, #32
    anim_p->playback_now = 0;
 8012918:	f36f 0182 	bfc	r1, #2, #1
 801291c:	f885 1020 	strb.w	r1, [r5, #32]
    memcpy(new_anim, anim_p, sizeof(lv_anim_t));
 8012920:	f8d3 e000 	ldr.w	lr, [r3]
 8012924:	3310      	adds	r3, #16
 8012926:	f853 7c0c 	ldr.w	r7, [r3, #-12]
 801292a:	3210      	adds	r2, #16
 801292c:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8012930:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8012934:	42a3      	cmp	r3, r4
 8012936:	f842 ec10 	str.w	lr, [r2, #-16]
 801293a:	f842 7c0c 	str.w	r7, [r2, #-12]
 801293e:	f842 5c08 	str.w	r5, [r2, #-8]
 8012942:	f842 1c04 	str.w	r1, [r2, #-4]
 8012946:	d1eb      	bne.n	8012920 <lv_anim_create+0x78>
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	6013      	str	r3, [r2, #0]
    if(new_anim->fp != NULL) new_anim->fp(new_anim->var, new_anim->start);
 801294c:	6843      	ldr	r3, [r0, #4]
 801294e:	b113      	cbz	r3, 8012956 <lv_anim_create+0xae>
 8012950:	6901      	ldr	r1, [r0, #16]
 8012952:	6800      	ldr	r0, [r0, #0]
 8012954:	4798      	blx	r3
    anim_list_changed = true;
 8012956:	2301      	movs	r3, #1
 8012958:	7133      	strb	r3, [r6, #4]
 801295a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801295e:	e7fe      	b.n	801295e <lv_anim_create+0xb6>
 8012960:	4e01      	ldr	r6, [pc, #4]	; (8012968 <lv_anim_create+0xc0>)
 8012962:	e7cf      	b.n	8012904 <lv_anim_create+0x5c>
 8012964:	200194e0 	.word	0x200194e0
 8012968:	2000e5c0 	.word	0x2000e5c0

0801296c <lv_anim_del>:
{
 801296c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012970:	4607      	mov	r7, r0
    a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8012972:	4819      	ldr	r0, [pc, #100]	; (80129d8 <lv_anim_del+0x6c>)
{
 8012974:	4688      	mov	r8, r1
    a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8012976:	f000 fc0b 	bl	8013190 <lv_ll_get_head>
    while(a != NULL) {
 801297a:	4604      	mov	r4, r0
 801297c:	b350      	cbz	r0, 80129d4 <lv_anim_del+0x68>
 801297e:	f04f 0900 	mov.w	r9, #0
        a_next = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8012982:	4e15      	ldr	r6, [pc, #84]	; (80129d8 <lv_anim_del+0x6c>)
            anim_list_changed = true;       /*Read by `anim_task`. It need to know if a delete occurred in the linked list*/
 8012984:	f8df b054 	ldr.w	fp, [pc, #84]	; 80129dc <lv_anim_del+0x70>
 8012988:	f04f 0a01 	mov.w	sl, #1
 801298c:	e001      	b.n	8012992 <lv_anim_del+0x26>
    while(a != NULL) {
 801298e:	462c      	mov	r4, r5
 8012990:	b1ed      	cbz	r5, 80129ce <lv_anim_del+0x62>
        a_next = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8012992:	4621      	mov	r1, r4
 8012994:	4630      	mov	r0, r6
 8012996:	f000 fc03 	bl	80131a0 <lv_ll_get_next>
        if(a->var == var && (a->fp == fp || fp == NULL)) {
 801299a:	6823      	ldr	r3, [r4, #0]
        a_next = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 801299c:	4605      	mov	r5, r0
        if(a->var == var && (a->fp == fp || fp == NULL)) {
 801299e:	42bb      	cmp	r3, r7
 80129a0:	d1f5      	bne.n	801298e <lv_anim_del+0x22>
 80129a2:	6863      	ldr	r3, [r4, #4]
 80129a4:	f1b8 0f00 	cmp.w	r8, #0
 80129a8:	bf18      	it	ne
 80129aa:	4543      	cmpne	r3, r8
 80129ac:	bf0c      	ite	eq
 80129ae:	2301      	moveq	r3, #1
 80129b0:	2300      	movne	r3, #0
 80129b2:	d1ec      	bne.n	801298e <lv_anim_del+0x22>
            lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
 80129b4:	4621      	mov	r1, r4
 80129b6:	4630      	mov	r0, r6
            del = true;
 80129b8:	4699      	mov	r9, r3
            lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
 80129ba:	f000 fb1d 	bl	8012ff8 <lv_ll_rem>
            lv_mem_free(a);
 80129be:	4620      	mov	r0, r4
    while(a != NULL) {
 80129c0:	462c      	mov	r4, r5
            lv_mem_free(a);
 80129c2:	f000 fc53 	bl	801326c <lv_mem_free>
            anim_list_changed = true;       /*Read by `anim_task`. It need to know if a delete occurred in the linked list*/
 80129c6:	f88b a004 	strb.w	sl, [fp, #4]
    while(a != NULL) {
 80129ca:	2d00      	cmp	r5, #0
 80129cc:	d1e1      	bne.n	8012992 <lv_anim_del+0x26>
}
 80129ce:	4648      	mov	r0, r9
 80129d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bool del = false;
 80129d4:	4681      	mov	r9, r0
 80129d6:	e7fa      	b.n	80129ce <lv_anim_del+0x62>
 80129d8:	200194e0 	.word	0x200194e0
 80129dc:	2000e5c0 	.word	0x2000e5c0

080129e0 <lv_anim_speed_to_time>:
    int32_t d = LV_MATH_ABS((int32_t) start - end);
 80129e0:	1a8a      	subs	r2, r1, r2
    uint32_t time = (int32_t)((int32_t)(d * 1000) / speed);
 80129e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    int32_t d = LV_MATH_ABS((int32_t) start - end);
 80129e6:	2a00      	cmp	r2, #0
 80129e8:	bfb8      	it	lt
 80129ea:	4252      	neglt	r2, r2
    uint32_t time = (int32_t)((int32_t)(d * 1000) / speed);
 80129ec:	fb03 f202 	mul.w	r2, r3, r2
 80129f0:	fb92 f0f0 	sdiv	r0, r2, r0
    if(time > UINT16_MAX) time = UINT16_MAX;
 80129f4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80129f8:	da02      	bge.n	8012a00 <lv_anim_speed_to_time+0x20>
    if(time == 0) {
 80129fa:	b920      	cbnz	r0, 8012a06 <lv_anim_speed_to_time+0x26>
 80129fc:	2001      	movs	r0, #1
}
 80129fe:	4770      	bx	lr
 8012a00:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8012a04:	4770      	bx	lr
 8012a06:	b280      	uxth	r0, r0
 8012a08:	4770      	bx	lr
 8012a0a:	bf00      	nop

08012a0c <lv_anim_path_linear>:
    if(a->time == a->act_time) step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
 8012a0c:	8b02      	ldrh	r2, [r0, #24]
 8012a0e:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 8012a12:	429a      	cmp	r2, r3
 8012a14:	d00b      	beq.n	8012a2e <lv_anim_path_linear+0x22>
    else step = (a->act_time * LV_ANIM_RESOLUTION) / a->time;
 8012a16:	029b      	lsls	r3, r3, #10
 8012a18:	fb93 f3f2 	sdiv	r3, r3, r2
 8012a1c:	b29b      	uxth	r3, r3
    new_value = (int32_t) step * (a->end - a->start);
 8012a1e:	6901      	ldr	r1, [r0, #16]
 8012a20:	6942      	ldr	r2, [r0, #20]
 8012a22:	1a52      	subs	r2, r2, r1
 8012a24:	fb03 f302 	mul.w	r3, r3, r2
}
 8012a28:	eb01 20a3 	add.w	r0, r1, r3, asr #10
 8012a2c:	4770      	bx	lr
 8012a2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012a32:	e7f4      	b.n	8012a1e <lv_anim_path_linear+0x12>

08012a34 <lv_anim_path_step>:
{
 8012a34:	b410      	push	{r4}
    else return a->start;
 8012a36:	6903      	ldr	r3, [r0, #16]
    if(a->act_time >= a->time) return a->end;
 8012a38:	f9b0 401a 	ldrsh.w	r4, [r0, #26]
 8012a3c:	6942      	ldr	r2, [r0, #20]
 8012a3e:	8b00      	ldrh	r0, [r0, #24]
}
 8012a40:	4284      	cmp	r4, r0
 8012a42:	bfac      	ite	ge
 8012a44:	4610      	movge	r0, r2
 8012a46:	4618      	movlt	r0, r3
 8012a48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012a4c:	4770      	bx	lr
 8012a4e:	bf00      	nop

08012a50 <lv_area_set>:
 * @param y1 top coordinate of the area
 * @param x2 right coordinate of the area
 * @param y2 bottom coordinate of the area
 */
void lv_area_set(lv_area_t * area_p, lv_coord_t x1, lv_coord_t y1, lv_coord_t x2, lv_coord_t y2)
{
 8012a50:	b470      	push	{r4, r5, r6}
    area_p->x1 = x1;
 8012a52:	2500      	movs	r5, #0
{
 8012a54:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
    area_p->x1 = x1;
 8012a58:	462c      	mov	r4, r5
 8012a5a:	f361 050f 	bfi	r5, r1, #0, #16
 8012a5e:	f363 040f 	bfi	r4, r3, #0, #16
 8012a62:	f362 451f 	bfi	r5, r2, #16, #16
 8012a66:	f366 441f 	bfi	r4, r6, #16, #16
 8012a6a:	6005      	str	r5, [r0, #0]
 8012a6c:	6044      	str	r4, [r0, #4]
    area_p->y1 = y1;
    area_p->x2 = x2;
    area_p->y2 = y2;
}
 8012a6e:	bc70      	pop	{r4, r5, r6}
 8012a70:	4770      	bx	lr
 8012a72:	bf00      	nop

08012a74 <lv_area_set_width>:
 * @param area_p pointer to an area
 * @param w the new width of the area (w == 1 makes x1 == x2)
 */
void lv_area_set_width(lv_area_t * area_p, lv_coord_t w)
{
    area_p->x2 = area_p->x1 + w - 1;
 8012a74:	3901      	subs	r1, #1
 8012a76:	8803      	ldrh	r3, [r0, #0]
 8012a78:	4419      	add	r1, r3
 8012a7a:	8081      	strh	r1, [r0, #4]
 8012a7c:	4770      	bx	lr
 8012a7e:	bf00      	nop

08012a80 <lv_area_set_height>:
 * @param area_p pointer to an area
 * @param h the new height of the area (h == 1 makes y1 == y2)
 */
void lv_area_set_height(lv_area_t * area_p, lv_coord_t h)
{
    area_p->y2 = area_p->y1 + h - 1;
 8012a80:	3901      	subs	r1, #1
 8012a82:	8843      	ldrh	r3, [r0, #2]
 8012a84:	4419      	add	r1, r3
 8012a86:	80c1      	strh	r1, [r0, #6]
 8012a88:	4770      	bx	lr
 8012a8a:	bf00      	nop

08012a8c <lv_area_set_pos>:
 * @param area_p pointer to an area
 * @param x the new x coordinate of the area
 * @param y the new y coordinate of the area
 */
void lv_area_set_pos(lv_area_t * area_p, lv_coord_t x, lv_coord_t y)
{
 8012a8c:	b470      	push	{r4, r5, r6}
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 8012a8e:	88c3      	ldrh	r3, [r0, #6]
    return area_p->x2 - area_p->x1 + 1;
 8012a90:	8884      	ldrh	r4, [r0, #4]
 8012a92:	8806      	ldrh	r6, [r0, #0]
    area_p->y2 = area_p->y1 + h - 1;
 8012a94:	4413      	add	r3, r2
    return area_p->y2 - area_p->y1 + 1;
 8012a96:	8845      	ldrh	r5, [r0, #2]
    area_p->x2 = area_p->x1 + w - 1;
 8012a98:	440c      	add	r4, r1
    lv_coord_t w = lv_area_get_width(area_p);
    lv_coord_t h = lv_area_get_height(area_p);
    area_p->x1 = x;
 8012a9a:	8001      	strh	r1, [r0, #0]
    area_p->x2 = area_p->x1 + w - 1;
 8012a9c:	1ba4      	subs	r4, r4, r6
    area_p->y2 = area_p->y1 + h - 1;
 8012a9e:	1b5b      	subs	r3, r3, r5
    area_p->y1 = y;
 8012aa0:	8042      	strh	r2, [r0, #2]
    area_p->x2 = area_p->x1 + w - 1;
 8012aa2:	8084      	strh	r4, [r0, #4]
    area_p->y2 = area_p->y1 + h - 1;
 8012aa4:	80c3      	strh	r3, [r0, #6]
    lv_area_set_width(area_p, w);
    lv_area_set_height(area_p, h);
}
 8012aa6:	bc70      	pop	{r4, r5, r6}
 8012aa8:	4770      	bx	lr
 8012aaa:	bf00      	nop

08012aac <lv_area_get_size>:
uint32_t lv_area_get_size(const lv_area_t * area_p)
{
    uint32_t size;

    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) *
           (area_p->y2 - area_p->y1 + 1);
 8012aac:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8012ab0:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) *
 8012ab4:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
           (area_p->y2 - area_p->y1 + 1);
 8012ab8:	1a5b      	subs	r3, r3, r1
    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) *
 8012aba:	f9b0 1000 	ldrsh.w	r1, [r0]
           (area_p->y2 - area_p->y1 + 1);
 8012abe:	1c58      	adds	r0, r3, #1
    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) *
 8012ac0:	1a52      	subs	r2, r2, r1

    return size;
}
 8012ac2:	fb02 0000 	mla	r0, r2, r0, r0
 8012ac6:	4770      	bx	lr

08012ac8 <lv_area_intersect>:
 * @return false: the two area has NO common parts, res_p is invalid
 */
bool lv_area_intersect(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    /* Get the smaller area from 'a1_p' and 'a2_p' */
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 8012ac8:	f9b2 3000 	ldrsh.w	r3, [r2]
{
 8012acc:	b4f0      	push	{r4, r5, r6, r7}
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 8012ace:	f9b1 5000 	ldrsh.w	r5, [r1]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 8012ad2:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8012ad6:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 8012ada:	42ab      	cmp	r3, r5
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 8012adc:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 8012ae0:	bfb8      	it	lt
 8012ae2:	462b      	movlt	r3, r5
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 8012ae4:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 8012ae8:	42b4      	cmp	r4, r6
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 8012aea:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 8012aee:	bfb8      	it	lt
 8012af0:	4634      	movlt	r4, r6
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 8012af2:	f9b1 6006 	ldrsh.w	r6, [r1, #6]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 8012af6:	42bd      	cmp	r5, r7
 8012af8:	4629      	mov	r1, r5
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 8012afa:	8003      	strh	r3, [r0, #0]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 8012afc:	bfa8      	it	ge
 8012afe:	4639      	movge	r1, r7
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 8012b00:	42b2      	cmp	r2, r6
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 8012b02:	8044      	strh	r4, [r0, #2]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 8012b04:	bfa8      	it	ge
 8012b06:	4632      	movge	r2, r6
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 8012b08:	8081      	strh	r1, [r0, #4]

    /*If x1 or y1 greater then x2 or y2 then the areas union is empty*/
    bool union_ok = true;
    if((res_p->x1 > res_p->x2) ||
 8012b0a:	4294      	cmp	r4, r2
 8012b0c:	bfd8      	it	le
 8012b0e:	428b      	cmple	r3, r1
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 8012b10:	80c2      	strh	r2, [r0, #6]
    if((res_p->x1 > res_p->x2) ||
 8012b12:	bfcc      	ite	gt
 8012b14:	2301      	movgt	r3, #1
 8012b16:	2300      	movle	r3, #0
            (res_p->y1 > res_p->y2)) {
        union_ok = false;
    }

    return union_ok;
}
 8012b18:	bcf0      	pop	{r4, r5, r6, r7}
 8012b1a:	f083 0001 	eor.w	r0, r3, #1
 8012b1e:	4770      	bx	lr

08012b20 <lv_area_join>:
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 */
void lv_area_join(lv_area_t * a_res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 8012b20:	f9b1 3000 	ldrsh.w	r3, [r1]
{
 8012b24:	b4f0      	push	{r4, r5, r6, r7}
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 8012b26:	f9b2 6000 	ldrsh.w	r6, [r2]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 8012b2a:	f9b2 5002 	ldrsh.w	r5, [r2, #2]
 8012b2e:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 8012b32:	429e      	cmp	r6, r3
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 8012b34:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 8012b38:	bfa8      	it	ge
 8012b3a:	461e      	movge	r6, r3
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
 8012b3c:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 8012b40:	42bd      	cmp	r5, r7
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 8012b42:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
 8012b46:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 8012b4a:	bfa8      	it	ge
 8012b4c:	463d      	movge	r5, r7
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 8012b4e:	42a2      	cmp	r2, r4
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 8012b50:	8006      	strh	r6, [r0, #0]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 8012b52:	bfb8      	it	lt
 8012b54:	4622      	movlt	r2, r4
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
 8012b56:	428b      	cmp	r3, r1
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 8012b58:	8045      	strh	r5, [r0, #2]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
 8012b5a:	bfb8      	it	lt
 8012b5c:	460b      	movlt	r3, r1
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 8012b5e:	8082      	strh	r2, [r0, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
 8012b60:	80c3      	strh	r3, [r0, #6]
}
 8012b62:	bcf0      	pop	{r4, r5, r6, r7}
 8012b64:	4770      	bx	lr
 8012b66:	bf00      	nop

08012b68 <lv_area_is_point_on>:
 */
bool lv_area_is_point_on(const lv_area_t * a_p, const lv_point_t * p_p)
{
    bool is_on = false;

    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) &&
 8012b68:	f9b0 2000 	ldrsh.w	r2, [r0]
 8012b6c:	f9b1 3000 	ldrsh.w	r3, [r1]
 8012b70:	429a      	cmp	r2, r3
 8012b72:	dc10      	bgt.n	8012b96 <lv_area_is_point_on+0x2e>
 8012b74:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8012b78:	429a      	cmp	r2, r3
 8012b7a:	db0c      	blt.n	8012b96 <lv_area_is_point_on+0x2e>
            ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 8012b7c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) &&
 8012b80:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8012b84:	429a      	cmp	r2, r3
 8012b86:	dc06      	bgt.n	8012b96 <lv_area_is_point_on+0x2e>
            ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 8012b88:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8012b8c:	4298      	cmp	r0, r3
 8012b8e:	bfb4      	ite	lt
 8012b90:	2000      	movlt	r0, #0
 8012b92:	2001      	movge	r0, #1
 8012b94:	4770      	bx	lr
    bool is_on = false;
 8012b96:	2000      	movs	r0, #0
        is_on = true;
    }

    return is_on;
}
 8012b98:	4770      	bx	lr
 8012b9a:	bf00      	nop

08012b9c <lv_area_is_on>:
 * @param a2_p pointer to an other area
 * @return false: a1_p and a2_p has no common parts
 */
bool lv_area_is_on(const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    if((a1_p->x1 <= a2_p->x2) &&
 8012b9c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8012ba0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8012ba4:	429a      	cmp	r2, r3
 8012ba6:	dc14      	bgt.n	8012bd2 <lv_area_is_on+0x36>
 8012ba8:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8012bac:	f9b1 3000 	ldrsh.w	r3, [r1]
 8012bb0:	429a      	cmp	r2, r3
 8012bb2:	db0e      	blt.n	8012bd2 <lv_area_is_on+0x36>
            (a1_p->x2 >= a2_p->x1) &&
 8012bb4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8012bb8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8012bbc:	429a      	cmp	r2, r3
 8012bbe:	dc08      	bgt.n	8012bd2 <lv_area_is_on+0x36>
            (a1_p->y1 <= a2_p->y2) &&
 8012bc0:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8012bc4:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8012bc8:	4298      	cmp	r0, r3
 8012bca:	bfb4      	ite	lt
 8012bcc:	2000      	movlt	r0, #0
 8012bce:	2001      	movge	r0, #1
 8012bd0:	4770      	bx	lr
            (a1_p->y2 >= a2_p->y1)) {
        return true;
    } else {
        return false;
 8012bd2:	2000      	movs	r0, #0
    }

}
 8012bd4:	4770      	bx	lr
 8012bd6:	bf00      	nop

08012bd8 <lv_area_is_in>:
 */
bool lv_area_is_in(const lv_area_t * ain_p, const lv_area_t * aholder_p)
{
    bool is_in = false;

    if(ain_p->x1  >= aholder_p->x1 &&
 8012bd8:	f9b0 2000 	ldrsh.w	r2, [r0]
 8012bdc:	f9b1 3000 	ldrsh.w	r3, [r1]
 8012be0:	429a      	cmp	r2, r3
 8012be2:	db14      	blt.n	8012c0e <lv_area_is_in+0x36>
 8012be4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8012be8:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8012bec:	429a      	cmp	r2, r3
 8012bee:	db0e      	blt.n	8012c0e <lv_area_is_in+0x36>
            ain_p->y1  >= aholder_p->y1 &&
 8012bf0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8012bf4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8012bf8:	429a      	cmp	r2, r3
 8012bfa:	dc08      	bgt.n	8012c0e <lv_area_is_in+0x36>
            ain_p->x2  <= aholder_p->x2 &&
 8012bfc:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8012c00:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8012c04:	4298      	cmp	r0, r3
 8012c06:	bfcc      	ite	gt
 8012c08:	2000      	movgt	r0, #0
 8012c0a:	2001      	movle	r0, #1
 8012c0c:	4770      	bx	lr
    bool is_in = false;
 8012c0e:	2000      	movs	r0, #0
            ain_p->y2  <= aholder_p->y2) {
        is_in = true;
    }

    return is_in;
}
 8012c10:	4770      	bx	lr
 8012c12:	bf00      	nop

08012c14 <lv_circ_init>:
 * @param c pointer to a point. The coordinates will be calculated here
 * @param tmp point to a variable. It will store temporary data
 * @param radius radius of the circle
 */
void lv_circ_init(lv_point_t * c, lv_coord_t * tmp, lv_coord_t radius)
{
 8012c14:	b410      	push	{r4}
    c->x = radius;
    c->y = 0;
    *tmp = 1 - radius;
 8012c16:	f1c2 0301 	rsb	r3, r2, #1
    c->y = 0;
 8012c1a:	2400      	movs	r4, #0
    c->x = radius;
 8012c1c:	8002      	strh	r2, [r0, #0]
    c->y = 0;
 8012c1e:	8044      	strh	r4, [r0, #2]
    *tmp = 1 - radius;
 8012c20:	800b      	strh	r3, [r1, #0]
}
 8012c22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c26:	4770      	bx	lr

08012c28 <lv_circ_cont>:
 * @param c same as in circ_init
 * @return true if the circle is not ready yet
 */
bool lv_circ_cont(lv_point_t * c)
{
    return c->y <= c->x ? true : false;
 8012c28:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8012c2c:	f9b0 0000 	ldrsh.w	r0, [r0]
}
 8012c30:	4282      	cmp	r2, r0
 8012c32:	bfcc      	ite	gt
 8012c34:	2000      	movgt	r0, #0
 8012c36:	2001      	movle	r0, #1
 8012c38:	4770      	bx	lr
 8012c3a:	bf00      	nop

08012c3c <lv_circ_next>:
 * @param c same as in circ_init. The next point stored here.
 * @param tmp same as in circ_init.
 */
void lv_circ_next(lv_point_t * c, lv_coord_t * tmp)
{
    c->y++;
 8012c3c:	8843      	ldrh	r3, [r0, #2]
 8012c3e:	3301      	adds	r3, #1
 8012c40:	b29b      	uxth	r3, r3
 8012c42:	b21a      	sxth	r2, r3
{
 8012c44:	b410      	push	{r4}
    c->y++;
 8012c46:	8042      	strh	r2, [r0, #2]

    if(*tmp <= 0) {
 8012c48:	f9b1 4000 	ldrsh.w	r4, [r1]
 8012c4c:	2c00      	cmp	r4, #0
 8012c4e:	dd0c      	ble.n	8012c6a <lv_circ_next+0x2e>
        (*tmp) += 2 * c->y + 1;   // Change in decision criterion for y -> y+1
    } else {
        c->x--;
 8012c50:	8803      	ldrh	r3, [r0, #0]
        (*tmp) += 2 * (c->y - c->x) + 1;   // Change for y -> y+1, x -> x-1
    }
}
 8012c52:	f85d 4b04 	ldr.w	r4, [sp], #4
        c->x--;
 8012c56:	3b01      	subs	r3, #1
 8012c58:	b21b      	sxth	r3, r3
 8012c5a:	8003      	strh	r3, [r0, #0]
        (*tmp) += 2 * (c->y - c->x) + 1;   // Change for y -> y+1, x -> x-1
 8012c5c:	1ad2      	subs	r2, r2, r3
 8012c5e:	880b      	ldrh	r3, [r1, #0]
 8012c60:	3301      	adds	r3, #1
 8012c62:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8012c66:	800b      	strh	r3, [r1, #0]
}
 8012c68:	4770      	bx	lr
        (*tmp) += 2 * c->y + 1;   // Change in decision criterion for y -> y+1
 8012c6a:	3401      	adds	r4, #1
 8012c6c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
}
 8012c70:	f85d 4b04 	ldr.w	r4, [sp], #4
        (*tmp) += 2 * c->y + 1;   // Change in decision criterion for y -> y+1
 8012c74:	800b      	strh	r3, [r1, #0]
}
 8012c76:	4770      	bx	lr

08012c78 <lv_font_init>:
/**
 * Initialize the fonts
 */
void lv_font_init(void)
{
    lv_font_builtin_init();
 8012c78:	f7ff bc2a 	b.w	80124d0 <lv_font_builtin_init>

08012c7c <lv_font_add>:
 * @param child the font to add
 * @param parent this font will be extended. Using it later will contain the characters from `child`
 */
void lv_font_add(lv_font_t * child, lv_font_t * parent)
{
    if(parent == NULL) return;
 8012c7c:	b909      	cbnz	r1, 8012c82 <lv_font_add+0x6>
 8012c7e:	e005      	b.n	8012c8c <lv_font_add+0x10>
 8012c80:	4619      	mov	r1, r3

    while(parent->next_page != NULL) {
 8012c82:	69cb      	ldr	r3, [r1, #28]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d1fb      	bne.n	8012c80 <lv_font_add+0x4>
        parent = parent->next_page; /*Got to the last page and add the new font there*/
    }

    parent->next_page = child;
 8012c88:	61c8      	str	r0, [r1, #28]
 8012c8a:	4770      	bx	lr
 8012c8c:	4770      	bx	lr
 8012c8e:	bf00      	nop

08012c90 <lv_font_is_monospace>:
 */
bool lv_font_is_monospace(const lv_font_t * font_p, uint32_t letter)
{
    const lv_font_t * font_i = font_p;
    int16_t w;
    while(font_i != NULL) {
 8012c90:	b1a0      	cbz	r0, 8012cbc <lv_font_is_monospace+0x2c>
{
 8012c92:	b538      	push	{r3, r4, r5, lr}
 8012c94:	460d      	mov	r5, r1
 8012c96:	4604      	mov	r4, r0
 8012c98:	e001      	b.n	8012c9e <lv_font_is_monospace+0xe>
            /*Glyph found*/
            if(font_i->monospace) return true;
            return false;
        }

        font_i = font_i->next_page;
 8012c9a:	69e4      	ldr	r4, [r4, #28]
    while(font_i != NULL) {
 8012c9c:	b164      	cbz	r4, 8012cb8 <lv_font_is_monospace+0x28>
        w = font_i->get_width(font_i, letter);
 8012c9e:	69a3      	ldr	r3, [r4, #24]
 8012ca0:	4629      	mov	r1, r5
 8012ca2:	4620      	mov	r0, r4
 8012ca4:	4798      	blx	r3
        if(w >= 0) {
 8012ca6:	2800      	cmp	r0, #0
 8012ca8:	dbf7      	blt.n	8012c9a <lv_font_is_monospace+0xa>
            if(font_i->monospace) return true;
 8012caa:	6a23      	ldr	r3, [r4, #32]
 8012cac:	f413 2f7f 	tst.w	r3, #1044480	; 0xff000
 8012cb0:	bf14      	ite	ne
 8012cb2:	2001      	movne	r0, #1
 8012cb4:	2000      	moveq	r0, #0
 8012cb6:	bd38      	pop	{r3, r4, r5, pc}
    }

    return 0;
 8012cb8:	2000      	movs	r0, #0
 8012cba:	bd38      	pop	{r3, r4, r5, pc}
 8012cbc:	2000      	movs	r0, #0
}
 8012cbe:	4770      	bx	lr

08012cc0 <lv_font_get_bitmap>:
 * @return  pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_bitmap(const lv_font_t * font_p, uint32_t letter)
{
    const lv_font_t * font_i = font_p;
    while(font_i != NULL) {
 8012cc0:	b170      	cbz	r0, 8012ce0 <lv_font_get_bitmap+0x20>
{
 8012cc2:	b538      	push	{r3, r4, r5, lr}
 8012cc4:	460d      	mov	r5, r1
 8012cc6:	4604      	mov	r4, r0
 8012cc8:	e001      	b.n	8012cce <lv_font_get_bitmap+0xe>
        const uint8_t * bitmap = font_i->get_bitmap(font_i, letter);
        if(bitmap) return bitmap;

        font_i = font_i->next_page;
 8012cca:	69e4      	ldr	r4, [r4, #28]
    while(font_i != NULL) {
 8012ccc:	b134      	cbz	r4, 8012cdc <lv_font_get_bitmap+0x1c>
        const uint8_t * bitmap = font_i->get_bitmap(font_i, letter);
 8012cce:	6963      	ldr	r3, [r4, #20]
 8012cd0:	4629      	mov	r1, r5
 8012cd2:	4620      	mov	r0, r4
 8012cd4:	4798      	blx	r3
        if(bitmap) return bitmap;
 8012cd6:	2800      	cmp	r0, #0
 8012cd8:	d0f7      	beq.n	8012cca <lv_font_get_bitmap+0xa>
    }

    return NULL;
}
 8012cda:	bd38      	pop	{r3, r4, r5, pc}
    return NULL;
 8012cdc:	2000      	movs	r0, #0
 8012cde:	bd38      	pop	{r3, r4, r5, pc}
 8012ce0:	2000      	movs	r0, #0
}
 8012ce2:	4770      	bx	lr

08012ce4 <lv_font_get_width>:
 */
uint8_t lv_font_get_width(const lv_font_t * font_p, uint32_t letter)
{
    const lv_font_t * font_i = font_p;
    int16_t w;
    while(font_i != NULL) {
 8012ce4:	b1a0      	cbz	r0, 8012d10 <lv_font_get_width+0x2c>
{
 8012ce6:	b538      	push	{r3, r4, r5, lr}
 8012ce8:	460d      	mov	r5, r1
 8012cea:	4604      	mov	r4, r0
 8012cec:	e001      	b.n	8012cf2 <lv_font_get_width+0xe>
            uint8_t m = font_i->monospace;
            if(m) w = m;
            return w;
        }

        font_i = font_i->next_page;
 8012cee:	69e4      	ldr	r4, [r4, #28]
    while(font_i != NULL) {
 8012cf0:	b164      	cbz	r4, 8012d0c <lv_font_get_width+0x28>
        w = font_i->get_width(font_i, letter);
 8012cf2:	69a3      	ldr	r3, [r4, #24]
 8012cf4:	4629      	mov	r1, r5
 8012cf6:	4620      	mov	r0, r4
 8012cf8:	4798      	blx	r3
        if(w >= 0) {
 8012cfa:	2800      	cmp	r0, #0
 8012cfc:	dbf7      	blt.n	8012cee <lv_font_get_width+0xa>
            uint8_t m = font_i->monospace;
 8012cfe:	6a23      	ldr	r3, [r4, #32]
 8012d00:	f3c3 3307 	ubfx	r3, r3, #12, #8
            if(m) w = m;
 8012d04:	b103      	cbz	r3, 8012d08 <lv_font_get_width+0x24>
 8012d06:	b218      	sxth	r0, r3
            return w;
 8012d08:	b2c0      	uxtb	r0, r0
 8012d0a:	bd38      	pop	{r3, r4, r5, pc}
    }

    return 0;
 8012d0c:	2000      	movs	r0, #0
 8012d0e:	bd38      	pop	{r3, r4, r5, pc}
 8012d10:	2000      	movs	r0, #0

}
 8012d12:	4770      	bx	lr

08012d14 <lv_font_get_real_width>:
 */
uint8_t lv_font_get_real_width(const lv_font_t * font_p, uint32_t letter)
{
    const lv_font_t * font_i = font_p;
    int16_t w;
    while(font_i != NULL) {
 8012d14:	b178      	cbz	r0, 8012d36 <lv_font_get_real_width+0x22>
{
 8012d16:	b538      	push	{r3, r4, r5, lr}
 8012d18:	460d      	mov	r5, r1
 8012d1a:	4604      	mov	r4, r0
 8012d1c:	e001      	b.n	8012d22 <lv_font_get_real_width+0xe>
        w = font_i->get_width(font_i, letter);
        if(w >= 0) return w;

        font_i = font_i->next_page;
 8012d1e:	69e4      	ldr	r4, [r4, #28]
    while(font_i != NULL) {
 8012d20:	b13c      	cbz	r4, 8012d32 <lv_font_get_real_width+0x1e>
        w = font_i->get_width(font_i, letter);
 8012d22:	69a3      	ldr	r3, [r4, #24]
 8012d24:	4629      	mov	r1, r5
 8012d26:	4620      	mov	r0, r4
 8012d28:	4798      	blx	r3
        if(w >= 0) return w;
 8012d2a:	2800      	cmp	r0, #0
 8012d2c:	dbf7      	blt.n	8012d1e <lv_font_get_real_width+0xa>
 8012d2e:	b2c0      	uxtb	r0, r0
 8012d30:	bd38      	pop	{r3, r4, r5, pc}
    }

    return 0;
 8012d32:	2000      	movs	r0, #0
 8012d34:	bd38      	pop	{r3, r4, r5, pc}
 8012d36:	2000      	movs	r0, #0
}
 8012d38:	4770      	bx	lr
 8012d3a:	bf00      	nop

08012d3c <lv_font_get_bpp>:
 * @return bpp of the font (or font extension)
 */
uint8_t lv_font_get_bpp(const lv_font_t * font, uint32_t letter)
{
    const lv_font_t * font_i = font;
    while(font_i != NULL) {
 8012d3c:	b140      	cbz	r0, 8012d50 <lv_font_get_bpp+0x14>
        if(letter >= font_i->unicode_first && letter <= font_i->unicode_last) {
 8012d3e:	6803      	ldr	r3, [r0, #0]
 8012d40:	428b      	cmp	r3, r1
 8012d42:	d802      	bhi.n	8012d4a <lv_font_get_bpp+0xe>
 8012d44:	6843      	ldr	r3, [r0, #4]
 8012d46:	4299      	cmp	r1, r3
 8012d48:	d903      	bls.n	8012d52 <lv_font_get_bpp+0x16>
            return font_i->bpp;
        }
        font_i = font_i->next_page;
 8012d4a:	69c0      	ldr	r0, [r0, #28]
    while(font_i != NULL) {
 8012d4c:	2800      	cmp	r0, #0
 8012d4e:	d1f6      	bne.n	8012d3e <lv_font_get_bpp+0x2>
    }

    return 0;

}
 8012d50:	4770      	bx	lr
            return font_i->bpp;
 8012d52:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
 8012d56:	f000 000f 	and.w	r0, r0, #15
 8012d5a:	4770      	bx	lr

08012d5c <lv_font_get_bitmap_continuous>:
 * @return pointer to the bitmap or NULL if not found
 */
const uint8_t * lv_font_get_bitmap_continuous(const lv_font_t * font, uint32_t unicode_letter)
{
    /*Check the range*/
    if(unicode_letter < font->unicode_first || unicode_letter > font->unicode_last) return NULL;
 8012d5c:	6803      	ldr	r3, [r0, #0]
 8012d5e:	428b      	cmp	r3, r1
 8012d60:	d80a      	bhi.n	8012d78 <lv_font_get_bitmap_continuous+0x1c>
 8012d62:	6842      	ldr	r2, [r0, #4]
 8012d64:	4291      	cmp	r1, r2
 8012d66:	d807      	bhi.n	8012d78 <lv_font_get_bitmap_continuous+0x1c>

    uint32_t index = (unicode_letter - font->unicode_first);
 8012d68:	1ac9      	subs	r1, r1, r3
    return &font->glyph_bitmap[font->glyph_dsc[index].glyph_index];
 8012d6a:	68c3      	ldr	r3, [r0, #12]
 8012d6c:	6880      	ldr	r0, [r0, #8]
 8012d6e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012d72:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8012d76:	4770      	bx	lr
    if(unicode_letter < font->unicode_first || unicode_letter > font->unicode_last) return NULL;
 8012d78:	2000      	movs	r0, #0
}
 8012d7a:	4770      	bx	lr

08012d7c <lv_font_get_width_continuous>:
 * @return width of the gylph or -1 if not found
 */
int16_t lv_font_get_width_continuous(const lv_font_t * font, uint32_t unicode_letter)
{
    /*Check the range*/
    if(unicode_letter < font->unicode_first || unicode_letter > font->unicode_last) {
 8012d7c:	6803      	ldr	r3, [r0, #0]
 8012d7e:	428b      	cmp	r3, r1
 8012d80:	d807      	bhi.n	8012d92 <lv_font_get_width_continuous+0x16>
 8012d82:	6842      	ldr	r2, [r0, #4]
 8012d84:	4291      	cmp	r1, r2
 8012d86:	d804      	bhi.n	8012d92 <lv_font_get_width_continuous+0x16>
        return -1;
    }

    uint32_t index = (unicode_letter - font->unicode_first);
 8012d88:	1ac9      	subs	r1, r1, r3
    return font->glyph_dsc[index].w_px;
 8012d8a:	68c3      	ldr	r3, [r0, #12]
 8012d8c:	f813 0021 	ldrb.w	r0, [r3, r1, lsl #2]
 8012d90:	4770      	bx	lr
        return -1;
 8012d92:	f04f 30ff 	mov.w	r0, #4294967295
}
 8012d96:	4770      	bx	lr

08012d98 <lv_fs_init>:
/**
 * Initialize the File system interface
 */
void lv_fs_init(void)
{
    lv_ll_init(&LV_GC_ROOT(_lv_drv_ll), sizeof(lv_fs_drv_t));
 8012d98:	2144      	movs	r1, #68	; 0x44
 8012d9a:	4801      	ldr	r0, [pc, #4]	; (8012da0 <lv_fs_init+0x8>)
 8012d9c:	f000 b8b0 	b.w	8012f00 <lv_ll_init>
 8012da0:	200194bc 	.word	0x200194bc

08012da4 <lv_fs_open>:
 * @param mode read: FS_MODE_RD, write: FS_MODE_WR, both: FS_MODE_RD | FS_MODE_WR
 * @return LV_FS_RES_OK or any error from lv_fs_res_t enum
 */
lv_fs_res_t lv_fs_open(lv_fs_file_t * file_p, const char * path, lv_fs_mode_t mode)
{
    file_p->drv = NULL;
 8012da4:	2300      	movs	r3, #0
{
 8012da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    file_p->drv = NULL;
 8012daa:	6043      	str	r3, [r0, #4]
    file_p->file_d = NULL;
 8012dac:	6003      	str	r3, [r0, #0]

    if(path == NULL) return LV_FS_RES_INV_PARAM;
 8012dae:	b1e1      	cbz	r1, 8012dea <lv_fs_open+0x46>
 8012db0:	4606      	mov	r6, r0
 */
static lv_fs_drv_t * lv_fs_get_drv(char letter)
{
    lv_fs_drv_t * drv;

    LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
 8012db2:	482b      	ldr	r0, [pc, #172]	; (8012e60 <lv_fs_open+0xbc>)
 8012db4:	4688      	mov	r8, r1
 8012db6:	4617      	mov	r7, r2
    char letter = path[0];
 8012db8:	780d      	ldrb	r5, [r1, #0]
    LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
 8012dba:	f000 f9e9 	bl	8013190 <lv_ll_get_head>
 8012dbe:	b168      	cbz	r0, 8012ddc <lv_fs_open+0x38>
        if(drv->letter == letter) {
 8012dc0:	7803      	ldrb	r3, [r0, #0]
 8012dc2:	42ab      	cmp	r3, r5
 8012dc4:	d015      	beq.n	8012df2 <lv_fs_open+0x4e>
    LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
 8012dc6:	4c26      	ldr	r4, [pc, #152]	; (8012e60 <lv_fs_open+0xbc>)
 8012dc8:	e002      	b.n	8012dd0 <lv_fs_open+0x2c>
        if(drv->letter == letter) {
 8012dca:	7803      	ldrb	r3, [r0, #0]
 8012dcc:	42ab      	cmp	r3, r5
 8012dce:	d010      	beq.n	8012df2 <lv_fs_open+0x4e>
    LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
 8012dd0:	4601      	mov	r1, r0
 8012dd2:	4620      	mov	r0, r4
 8012dd4:	f000 f9e4 	bl	80131a0 <lv_ll_get_next>
 8012dd8:	2800      	cmp	r0, #0
 8012dda:	d1f6      	bne.n	8012dca <lv_fs_open+0x26>
    file_p->drv = lv_fs_get_drv(letter);
 8012ddc:	2300      	movs	r3, #0
        return LV_FS_RES_NOT_EX;
 8012dde:	2403      	movs	r4, #3
    file_p->drv = lv_fs_get_drv(letter);
 8012de0:	6073      	str	r3, [r6, #4]
}
 8012de2:	4620      	mov	r0, r4
        file_p->file_d = NULL;
 8012de4:	6033      	str	r3, [r6, #0]
}
 8012de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(path == NULL) return LV_FS_RES_INV_PARAM;
 8012dea:	240b      	movs	r4, #11
}
 8012dec:	4620      	mov	r0, r4
 8012dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(file_p->drv->ready != NULL) {
 8012df2:	6883      	ldr	r3, [r0, #8]
    file_p->drv = lv_fs_get_drv(letter);
 8012df4:	6070      	str	r0, [r6, #4]
    if(file_p->drv->ready != NULL) {
 8012df6:	b113      	cbz	r3, 8012dfe <lv_fs_open+0x5a>
        if(file_p->drv->ready() == false) {
 8012df8:	4798      	blx	r3
 8012dfa:	b350      	cbz	r0, 8012e52 <lv_fs_open+0xae>
 8012dfc:	6870      	ldr	r0, [r6, #4]
    file_p->file_d = lv_mem_alloc(file_p->drv->file_size);
 8012dfe:	8840      	ldrh	r0, [r0, #2]
 8012e00:	f000 fa2c 	bl	801325c <lv_mem_alloc>
 8012e04:	6030      	str	r0, [r6, #0]
    lv_mem_assert(file_p->file_d);
 8012e06:	b1f8      	cbz	r0, 8012e48 <lv_fs_open+0xa4>
    if(file_p->drv->open == NULL) {
 8012e08:	6873      	ldr	r3, [r6, #4]
 8012e0a:	68dc      	ldr	r4, [r3, #12]
 8012e0c:	b1ec      	cbz	r4, 8012e4a <lv_fs_open+0xa6>
    while(*path != '\0') {
 8012e0e:	f898 3001 	ldrb.w	r3, [r8, #1]
    path ++; /*Ignore the driver letter*/
 8012e12:	f108 0101 	add.w	r1, r8, #1
    while(*path != '\0') {
 8012e16:	b91b      	cbnz	r3, 8012e20 <lv_fs_open+0x7c>
 8012e18:	e008      	b.n	8012e2c <lv_fs_open+0x88>
 8012e1a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012e1e:	b12b      	cbz	r3, 8012e2c <lv_fs_open+0x88>
        if(*path == ':' || *path == '\\' || *path == '/') {
 8012e20:	2b5c      	cmp	r3, #92	; 0x5c
 8012e22:	bf18      	it	ne
 8012e24:	2b3a      	cmpne	r3, #58	; 0x3a
 8012e26:	d0f8      	beq.n	8012e1a <lv_fs_open+0x76>
 8012e28:	2b2f      	cmp	r3, #47	; 0x2f
 8012e2a:	d0f6      	beq.n	8012e1a <lv_fs_open+0x76>
    lv_fs_res_t res = file_p->drv->open(file_p->file_d, real_path, mode);
 8012e2c:	463a      	mov	r2, r7
 8012e2e:	47a0      	blx	r4
    if(res != LV_FS_RES_OK) {
 8012e30:	4604      	mov	r4, r0
 8012e32:	2800      	cmp	r0, #0
 8012e34:	d0da      	beq.n	8012dec <lv_fs_open+0x48>
        lv_mem_free(file_p->file_d);
 8012e36:	6830      	ldr	r0, [r6, #0]
 8012e38:	f000 fa18 	bl	801326c <lv_mem_free>
        file_p->file_d = NULL;
 8012e3c:	2300      	movs	r3, #0
}
 8012e3e:	4620      	mov	r0, r4
        file_p->file_d = NULL;
 8012e40:	6033      	str	r3, [r6, #0]
        file_p->drv = NULL;
 8012e42:	6073      	str	r3, [r6, #4]
}
 8012e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e48:	e7fe      	b.n	8012e48 <lv_fs_open+0xa4>
        return LV_FS_RES_NOT_IMP;
 8012e4a:	2409      	movs	r4, #9
}
 8012e4c:	4620      	mov	r0, r4
 8012e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return LV_FS_RES_HW_ERR;
 8012e52:	2401      	movs	r4, #1
            file_p->drv = NULL;
 8012e54:	6070      	str	r0, [r6, #4]
            file_p->file_d = NULL;
 8012e56:	6030      	str	r0, [r6, #0]
}
 8012e58:	4620      	mov	r0, r4
 8012e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e5e:	bf00      	nop
 8012e60:	200194bc 	.word	0x200194bc

08012e64 <lv_fs_close>:
{
 8012e64:	b538      	push	{r3, r4, r5, lr}
    if(file_p->drv == NULL) {
 8012e66:	6843      	ldr	r3, [r0, #4]
 8012e68:	b183      	cbz	r3, 8012e8c <lv_fs_close+0x28>
    if(file_p->drv->close == NULL) {
 8012e6a:	691b      	ldr	r3, [r3, #16]
 8012e6c:	b15b      	cbz	r3, 8012e86 <lv_fs_close+0x22>
 8012e6e:	4604      	mov	r4, r0
    lv_fs_res_t res = file_p->drv->close(file_p->file_d);
 8012e70:	6800      	ldr	r0, [r0, #0]
 8012e72:	4798      	blx	r3
 8012e74:	4605      	mov	r5, r0
    lv_mem_free(file_p->file_d);   /*Clean up*/
 8012e76:	6820      	ldr	r0, [r4, #0]
 8012e78:	f000 f9f8 	bl	801326c <lv_mem_free>
    file_p->file_d = NULL;
 8012e7c:	2300      	movs	r3, #0
}
 8012e7e:	4628      	mov	r0, r5
    file_p->file_d = NULL;
 8012e80:	6023      	str	r3, [r4, #0]
    file_p->drv = NULL;
 8012e82:	6063      	str	r3, [r4, #4]
}
 8012e84:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_NOT_IMP;
 8012e86:	2509      	movs	r5, #9
}
 8012e88:	4628      	mov	r0, r5
 8012e8a:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
 8012e8c:	250b      	movs	r5, #11
}
 8012e8e:	4628      	mov	r0, r5
 8012e90:	bd38      	pop	{r3, r4, r5, pc}
 8012e92:	bf00      	nop

08012e94 <lv_fs_read>:
{
 8012e94:	b570      	push	{r4, r5, r6, lr}
 8012e96:	b082      	sub	sp, #8
    if(br != NULL) *br = 0;
 8012e98:	b10b      	cbz	r3, 8012e9e <lv_fs_read+0xa>
 8012e9a:	2400      	movs	r4, #0
 8012e9c:	601c      	str	r4, [r3, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 8012e9e:	6844      	ldr	r4, [r0, #4]
 8012ea0:	b184      	cbz	r4, 8012ec4 <lv_fs_read+0x30>
    if(file_p->drv->read == NULL) return LV_FS_RES_NOT_IMP;
 8012ea2:	69a5      	ldr	r5, [r4, #24]
 8012ea4:	b15d      	cbz	r5, 8012ebe <lv_fs_read+0x2a>
 8012ea6:	461c      	mov	r4, r3
    uint32_t br_tmp = 0;
 8012ea8:	2600      	movs	r6, #0
 8012eaa:	ab02      	add	r3, sp, #8
    lv_fs_res_t res = file_p->drv->read(file_p->file_d, buf, btr, &br_tmp);
 8012eac:	6800      	ldr	r0, [r0, #0]
    uint32_t br_tmp = 0;
 8012eae:	f843 6d04 	str.w	r6, [r3, #-4]!
    lv_fs_res_t res = file_p->drv->read(file_p->file_d, buf, btr, &br_tmp);
 8012eb2:	47a8      	blx	r5
    if(br != NULL) *br = br_tmp;
 8012eb4:	b10c      	cbz	r4, 8012eba <lv_fs_read+0x26>
 8012eb6:	9b01      	ldr	r3, [sp, #4]
 8012eb8:	6023      	str	r3, [r4, #0]
}
 8012eba:	b002      	add	sp, #8
 8012ebc:	bd70      	pop	{r4, r5, r6, pc}
    if(file_p->drv->read == NULL) return LV_FS_RES_NOT_IMP;
 8012ebe:	2009      	movs	r0, #9
}
 8012ec0:	b002      	add	sp, #8
 8012ec2:	bd70      	pop	{r4, r5, r6, pc}
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 8012ec4:	200b      	movs	r0, #11
}
 8012ec6:	b002      	add	sp, #8
 8012ec8:	bd70      	pop	{r4, r5, r6, pc}
 8012eca:	bf00      	nop

08012ecc <lv_fs_seek>:
    if(file_p->drv == NULL) {
 8012ecc:	6843      	ldr	r3, [r0, #4]
 8012ece:	b12b      	cbz	r3, 8012edc <lv_fs_seek+0x10>
    if(file_p->drv->seek == NULL) {
 8012ed0:	6a1b      	ldr	r3, [r3, #32]
 8012ed2:	b10b      	cbz	r3, 8012ed8 <lv_fs_seek+0xc>
    lv_fs_res_t res = file_p->drv->seek(file_p->file_d, pos);
 8012ed4:	6800      	ldr	r0, [r0, #0]
 8012ed6:	4718      	bx	r3
        return LV_FS_RES_NOT_IMP;
 8012ed8:	2009      	movs	r0, #9
}
 8012eda:	4770      	bx	lr
        return LV_FS_RES_INV_PARAM;
 8012edc:	200b      	movs	r0, #11
 8012ede:	4770      	bx	lr

08012ee0 <lv_fs_add_drv>:
{
 8012ee0:	b510      	push	{r4, lr}
 8012ee2:	4604      	mov	r4, r0
    new_drv =  lv_ll_ins_head(&LV_GC_ROOT(_lv_drv_ll));
 8012ee4:	4805      	ldr	r0, [pc, #20]	; (8012efc <lv_fs_add_drv+0x1c>)
 8012ee6:	f000 f815 	bl	8012f14 <lv_ll_ins_head>
    lv_mem_assert(new_drv);
 8012eea:	b128      	cbz	r0, 8012ef8 <lv_fs_add_drv+0x18>
    memcpy(new_drv, drv_p, sizeof(lv_fs_drv_t));
 8012eec:	4621      	mov	r1, r4
 8012eee:	2244      	movs	r2, #68	; 0x44
}
 8012ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memcpy(new_drv, drv_p, sizeof(lv_fs_drv_t));
 8012ef4:	f00a bd72 	b.w	801d9dc <memcpy>
 8012ef8:	e7fe      	b.n	8012ef8 <lv_fs_add_drv+0x18>
 8012efa:	bf00      	nop
 8012efc:	200194bc 	.word	0x200194bc

08012f00 <lv_ll_init>:
 * @param ll_dsc pointer to ll_dsc variable
 * @param node_size the size of 1 node in bytes
 */
void lv_ll_init(lv_ll_t * ll_p, uint32_t node_size)
{
    ll_p->head = NULL;
 8012f00:	2300      	movs	r3, #0
 8012f02:	6043      	str	r3, [r0, #4]
    ll_p->tail = NULL;
 8012f04:	6083      	str	r3, [r0, #8]
        node_size = node_size & (~0x7);
        node_size += 8;
    }
#else
    /*Round the size up to 4*/
    if(node_size & 0x3) {
 8012f06:	078b      	lsls	r3, r1, #30
 8012f08:	d002      	beq.n	8012f10 <lv_ll_init+0x10>
        node_size = node_size & (~0x3);
 8012f0a:	f021 0103 	bic.w	r1, r1, #3
        node_size += 4;
 8012f0e:	3104      	adds	r1, #4
    }
#endif

    ll_p->n_size = node_size;
 8012f10:	6001      	str	r1, [r0, #0]
 8012f12:	4770      	bx	lr

08012f14 <lv_ll_ins_head>:
 * Add a new head to a linked list
 * @param ll_p pointer to linked list
 * @return pointer to the new head
 */
void * lv_ll_ins_head(lv_ll_t * ll_p)
{
 8012f14:	b510      	push	{r4, lr}
 8012f16:	4604      	mov	r4, r0
    lv_ll_node_t * n_new;

    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8012f18:	6800      	ldr	r0, [r0, #0]
 8012f1a:	3008      	adds	r0, #8
 8012f1c:	f000 f99e 	bl	801325c <lv_mem_alloc>

    if(n_new != NULL) {
 8012f20:	b170      	cbz	r0, 8012f40 <lv_ll_ins_head+0x2c>
{
    if(act == NULL) return;     /*Can't set the prev node of `NULL`*/

    uint32_t node_p_size = sizeof(lv_ll_node_t *);
    if(prev) memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
    else memset(act + LL_PREV_P_OFFSET(ll_p), 0, node_p_size);
 8012f22:	6823      	ldr	r3, [r4, #0]
 8012f24:	2200      	movs	r2, #0
 8012f26:	50c2      	str	r2, [r0, r3]
        node_set_next(ll_p, n_new, ll_p->head);     /*After new comes the old head*/
 8012f28:	6862      	ldr	r2, [r4, #4]
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
    if(act == NULL) return;     /*Can't set the next node of `NULL`*/

    uint32_t node_p_size = sizeof(lv_ll_node_t *);
    if(next) memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
 8012f2a:	6823      	ldr	r3, [r4, #0]
 8012f2c:	b15a      	cbz	r2, 8012f46 <lv_ll_ins_head+0x32>
 8012f2e:	4403      	add	r3, r0
 8012f30:	605a      	str	r2, [r3, #4]
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 8012f32:	6863      	ldr	r3, [r4, #4]
 8012f34:	b10b      	cbz	r3, 8012f3a <lv_ll_ins_head+0x26>
    if(prev) memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
 8012f36:	6822      	ldr	r2, [r4, #0]
 8012f38:	5098      	str	r0, [r3, r2]
        if(ll_p->tail == NULL) {/*If there is no tail (1. node) set the tail too*/
 8012f3a:	68a3      	ldr	r3, [r4, #8]
        ll_p->head = n_new;         /*Set the new head in the dsc.*/
 8012f3c:	6060      	str	r0, [r4, #4]
        if(ll_p->tail == NULL) {/*If there is no tail (1. node) set the tail too*/
 8012f3e:	b103      	cbz	r3, 8012f42 <lv_ll_ins_head+0x2e>
}
 8012f40:	bd10      	pop	{r4, pc}
            ll_p->tail = n_new;
 8012f42:	60a0      	str	r0, [r4, #8]
}
 8012f44:	bd10      	pop	{r4, pc}
    else memset(act + LL_NEXT_P_OFFSET(ll_p), 0, node_p_size);
 8012f46:	3304      	adds	r3, #4
 8012f48:	50c2      	str	r2, [r0, r3]
 8012f4a:	e7f2      	b.n	8012f32 <lv_ll_ins_head+0x1e>

08012f4c <lv_ll_ins_prev>:
    if(NULL == ll_p || NULL == n_act) return NULL;
 8012f4c:	2800      	cmp	r0, #0
 8012f4e:	d034      	beq.n	8012fba <lv_ll_ins_prev+0x6e>
{
 8012f50:	b570      	push	{r4, r5, r6, lr}
    if(NULL == ll_p || NULL == n_act) return NULL;
 8012f52:	fab1 f681 	clz	r6, r1
 8012f56:	0976      	lsrs	r6, r6, #5
 8012f58:	b9c6      	cbnz	r6, 8012f8c <lv_ll_ins_prev+0x40>
 8012f5a:	4604      	mov	r4, r0
 8012f5c:	460d      	mov	r5, r1
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8012f5e:	c809      	ldmia	r0, {r0, r3}
    if(lv_ll_get_head(ll_p) == n_act) {
 8012f60:	4299      	cmp	r1, r3
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8012f62:	f100 0008 	add.w	r0, r0, #8
    if(lv_ll_get_head(ll_p) == n_act) {
 8012f66:	d013      	beq.n	8012f90 <lv_ll_ins_prev+0x44>
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8012f68:	f000 f978 	bl	801325c <lv_mem_alloc>
        if(n_new == NULL) return NULL;
 8012f6c:	4603      	mov	r3, r0
 8012f6e:	b168      	cbz	r0, 8012f8c <lv_ll_ins_prev+0x40>
        memcpy(&prev, n_act_d + LL_PREV_P_OFFSET(ll_p), sizeof(void *));
 8012f70:	6822      	ldr	r2, [r4, #0]
 8012f72:	58a9      	ldr	r1, [r5, r2]
    if(act == NULL) return;     /*Can't set the next node of `NULL`*/
 8012f74:	b111      	cbz	r1, 8012f7c <lv_ll_ins_prev+0x30>
    if(next) memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
 8012f76:	440a      	add	r2, r1
 8012f78:	6050      	str	r0, [r2, #4]
    if(prev) memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
 8012f7a:	6822      	ldr	r2, [r4, #0]
 8012f7c:	5099      	str	r1, [r3, r2]
    if(next) memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
 8012f7e:	4618      	mov	r0, r3
    if(prev) memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
 8012f80:	6822      	ldr	r2, [r4, #0]
 8012f82:	50ab      	str	r3, [r5, r2]
    if(next) memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
 8012f84:	6822      	ldr	r2, [r4, #0]
 8012f86:	4413      	add	r3, r2
 8012f88:	605d      	str	r5, [r3, #4]
 8012f8a:	bd70      	pop	{r4, r5, r6, pc}
    if(NULL == ll_p || NULL == n_act) return NULL;
 8012f8c:	2000      	movs	r0, #0
 8012f8e:	bd70      	pop	{r4, r5, r6, pc}
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8012f90:	f000 f964 	bl	801325c <lv_mem_alloc>
    if(n_new != NULL) {
 8012f94:	2800      	cmp	r0, #0
 8012f96:	d0f9      	beq.n	8012f8c <lv_ll_ins_prev+0x40>
    else memset(act + LL_PREV_P_OFFSET(ll_p), 0, node_p_size);
 8012f98:	6823      	ldr	r3, [r4, #0]
 8012f9a:	50c6      	str	r6, [r0, r3]
        node_set_next(ll_p, n_new, ll_p->head);     /*After new comes the old head*/
 8012f9c:	6862      	ldr	r2, [r4, #4]
    if(next) memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
 8012f9e:	6823      	ldr	r3, [r4, #0]
 8012fa0:	b16a      	cbz	r2, 8012fbe <lv_ll_ins_prev+0x72>
 8012fa2:	4403      	add	r3, r0
 8012fa4:	605a      	str	r2, [r3, #4]
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 8012fa6:	6863      	ldr	r3, [r4, #4]
 8012fa8:	b10b      	cbz	r3, 8012fae <lv_ll_ins_prev+0x62>
    if(prev) memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
 8012faa:	6822      	ldr	r2, [r4, #0]
 8012fac:	5098      	str	r0, [r3, r2]
        if(ll_p->tail == NULL) {/*If there is no tail (1. node) set the tail too*/
 8012fae:	68a3      	ldr	r3, [r4, #8]
        ll_p->head = n_new;         /*Set the new head in the dsc.*/
 8012fb0:	6060      	str	r0, [r4, #4]
        if(ll_p->tail == NULL) {/*If there is no tail (1. node) set the tail too*/
 8012fb2:	b103      	cbz	r3, 8012fb6 <lv_ll_ins_prev+0x6a>
}
 8012fb4:	bd70      	pop	{r4, r5, r6, pc}
            ll_p->tail = n_new;
 8012fb6:	60a0      	str	r0, [r4, #8]
 8012fb8:	bd70      	pop	{r4, r5, r6, pc}
    if(NULL == ll_p || NULL == n_act) return NULL;
 8012fba:	2000      	movs	r0, #0
}
 8012fbc:	4770      	bx	lr
    else memset(act + LL_NEXT_P_OFFSET(ll_p), 0, node_p_size);
 8012fbe:	3304      	adds	r3, #4
 8012fc0:	50c2      	str	r2, [r0, r3]
 8012fc2:	e7f0      	b.n	8012fa6 <lv_ll_ins_prev+0x5a>

08012fc4 <lv_ll_ins_tail>:
{
 8012fc4:	b510      	push	{r4, lr}
 8012fc6:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8012fc8:	6800      	ldr	r0, [r0, #0]
 8012fca:	3008      	adds	r0, #8
 8012fcc:	f000 f946 	bl	801325c <lv_mem_alloc>
    if(n_new == NULL) return NULL;
 8012fd0:	b170      	cbz	r0, 8012ff0 <lv_ll_ins_tail+0x2c>
    else memset(act + LL_NEXT_P_OFFSET(ll_p), 0, node_p_size);
 8012fd2:	6823      	ldr	r3, [r4, #0]
 8012fd4:	2200      	movs	r2, #0
 8012fd6:	3304      	adds	r3, #4
 8012fd8:	50c2      	str	r2, [r0, r3]
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is tho old tail*/
 8012fda:	68a3      	ldr	r3, [r4, #8]
    if(prev) memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
 8012fdc:	6822      	ldr	r2, [r4, #0]
 8012fde:	5083      	str	r3, [r0, r2]
        if(ll_p->tail != NULL) {    /*If there is old tail then the new comes after it*/
 8012fe0:	68a3      	ldr	r3, [r4, #8]
 8012fe2:	b113      	cbz	r3, 8012fea <lv_ll_ins_tail+0x26>
    if(next) memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
 8012fe4:	6822      	ldr	r2, [r4, #0]
 8012fe6:	4413      	add	r3, r2
 8012fe8:	6058      	str	r0, [r3, #4]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 8012fea:	6863      	ldr	r3, [r4, #4]
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 8012fec:	60a0      	str	r0, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 8012fee:	b103      	cbz	r3, 8012ff2 <lv_ll_ins_tail+0x2e>
}
 8012ff0:	bd10      	pop	{r4, pc}
            ll_p->head = n_new;
 8012ff2:	6060      	str	r0, [r4, #4]
}
 8012ff4:	bd10      	pop	{r4, pc}
 8012ff6:	bf00      	nop

08012ff8 <lv_ll_rem>:
    if(ll_p != NULL)    {
 8012ff8:	b188      	cbz	r0, 801301e <lv_ll_rem+0x26>
    if(lv_ll_get_head(ll_p) == node_p) {
 8012ffa:	6843      	ldr	r3, [r0, #4]
 8012ffc:	4299      	cmp	r1, r3
 8012ffe:	d012      	beq.n	8013026 <lv_ll_rem+0x2e>
    } else if(lv_ll_get_tail(ll_p) == node_p) {
 8013000:	6883      	ldr	r3, [r0, #8]
 8013002:	4299      	cmp	r1, r3
 8013004:	d017      	beq.n	8013036 <lv_ll_rem+0x3e>
{
 8013006:	b430      	push	{r4, r5}
        memcpy(&prev, n_act_d + LL_PREV_P_OFFSET(ll_p), sizeof(void *));
 8013008:	6804      	ldr	r4, [r0, #0]
        memcpy(&next, n_act_d + LL_NEXT_P_OFFSET(ll_p), sizeof(void *));
 801300a:	1d25      	adds	r5, r4, #4
        memcpy(&prev, n_act_d + LL_PREV_P_OFFSET(ll_p), sizeof(void *));
 801300c:	590b      	ldr	r3, [r1, r4]
        memcpy(&next, n_act_d + LL_NEXT_P_OFFSET(ll_p), sizeof(void *));
 801300e:	594a      	ldr	r2, [r1, r5]
    if(act == NULL) return;     /*Can't set the next node of `NULL`*/
 8013010:	b1db      	cbz	r3, 801304a <lv_ll_rem+0x52>
    if(next) memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
 8013012:	515a      	str	r2, [r3, r5]
 8013014:	b10a      	cbz	r2, 801301a <lv_ll_rem+0x22>
    if(prev) memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
 8013016:	6801      	ldr	r1, [r0, #0]
 8013018:	5053      	str	r3, [r2, r1]
}
 801301a:	bc30      	pop	{r4, r5}
 801301c:	4770      	bx	lr
    if(lv_ll_get_head(ll_p) == node_p) {
 801301e:	2900      	cmp	r1, #0
 8013020:	d1fc      	bne.n	801301c <lv_ll_rem+0x24>
        ll_p->head = lv_ll_get_next(ll_p, node_p);
 8013022:	6049      	str	r1, [r1, #4]
 8013024:	deff      	udf	#255	; 0xff
        memcpy(&next, n_act_d + LL_NEXT_P_OFFSET(ll_p), sizeof(void *));
 8013026:	6802      	ldr	r2, [r0, #0]
 8013028:	4411      	add	r1, r2
 801302a:	684b      	ldr	r3, [r1, #4]
        ll_p->head = lv_ll_get_next(ll_p, node_p);
 801302c:	6043      	str	r3, [r0, #4]
        if(ll_p->head == NULL) {
 801302e:	b143      	cbz	r3, 8013042 <lv_ll_rem+0x4a>
    else memset(act + LL_NEXT_P_OFFSET(ll_p), 0, node_p_size);
 8013030:	2100      	movs	r1, #0
 8013032:	50d1      	str	r1, [r2, r3]
 8013034:	4770      	bx	lr
        memcpy(&prev, n_act_d + LL_PREV_P_OFFSET(ll_p), sizeof(void *));
 8013036:	6803      	ldr	r3, [r0, #0]
 8013038:	58ca      	ldr	r2, [r1, r3]
        ll_p->tail = lv_ll_get_prev(ll_p, node_p);
 801303a:	6082      	str	r2, [r0, #8]
        if(ll_p->tail == NULL) {
 801303c:	b11a      	cbz	r2, 8013046 <lv_ll_rem+0x4e>
    else memset(act + LL_NEXT_P_OFFSET(ll_p), 0, node_p_size);
 801303e:	3304      	adds	r3, #4
 8013040:	e7f6      	b.n	8013030 <lv_ll_rem+0x38>
            ll_p->tail = NULL;
 8013042:	6083      	str	r3, [r0, #8]
 8013044:	4770      	bx	lr
            ll_p->head = NULL;
 8013046:	6042      	str	r2, [r0, #4]
 8013048:	4770      	bx	lr
    if(act == NULL) return;     /*Can't set the prev node of `NULL`*/
 801304a:	2a00      	cmp	r2, #0
 801304c:	d0e5      	beq.n	801301a <lv_ll_rem+0x22>
    else memset(act + LL_PREV_P_OFFSET(ll_p), 0, node_p_size);
 801304e:	5113      	str	r3, [r2, r4]
 8013050:	e7e3      	b.n	801301a <lv_ll_rem+0x22>
 8013052:	bf00      	nop

08013054 <lv_ll_clear>:
    if(ll_p != NULL)    {
 8013054:	2800      	cmp	r0, #0
 8013056:	d039      	beq.n	80130cc <lv_ll_clear+0x78>
{
 8013058:	b570      	push	{r4, r5, r6, lr}
 801305a:	4605      	mov	r5, r0
        head = ll_p->head;
 801305c:	6840      	ldr	r0, [r0, #4]
    while(i != NULL) {
 801305e:	b3a0      	cbz	r0, 80130ca <lv_ll_clear+0x76>
 8013060:	4602      	mov	r2, r0
    else memset(act + LL_NEXT_P_OFFSET(ll_p), 0, node_p_size);
 8013062:	2600      	movs	r6, #0
 8013064:	e00c      	b.n	8013080 <lv_ll_clear+0x2c>
    } else if(lv_ll_get_tail(ll_p) == node_p) {
 8013066:	68aa      	ldr	r2, [r5, #8]
 8013068:	4282      	cmp	r2, r0
 801306a:	d019      	beq.n	80130a0 <lv_ll_clear+0x4c>
        memcpy(&prev, n_act_d + LL_PREV_P_OFFSET(ll_p), sizeof(void *));
 801306c:	58c2      	ldr	r2, [r0, r3]
    if(act == NULL) return;     /*Can't set the next node of `NULL`*/
 801306e:	b1a2      	cbz	r2, 801309a <lv_ll_clear+0x46>
    if(next) memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
 8013070:	5054      	str	r4, [r2, r1]
 8013072:	b1f4      	cbz	r4, 80130b2 <lv_ll_clear+0x5e>
    if(prev) memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
 8013074:	682b      	ldr	r3, [r5, #0]
 8013076:	50e2      	str	r2, [r4, r3]
        lv_mem_free(i);
 8013078:	f000 f8f8 	bl	801326c <lv_mem_free>
        memcpy(&next, n_act_d + LL_NEXT_P_OFFSET(ll_p), sizeof(void *));
 801307c:	4620      	mov	r0, r4
 801307e:	686a      	ldr	r2, [r5, #4]
 8013080:	682b      	ldr	r3, [r5, #0]
    if(lv_ll_get_head(ll_p) == node_p) {
 8013082:	4282      	cmp	r2, r0
        memcpy(&next, n_act_d + LL_NEXT_P_OFFSET(ll_p), sizeof(void *));
 8013084:	f103 0104 	add.w	r1, r3, #4
 8013088:	5844      	ldr	r4, [r0, r1]
    if(lv_ll_get_head(ll_p) == node_p) {
 801308a:	d1ec      	bne.n	8013066 <lv_ll_clear+0x12>
        ll_p->head = lv_ll_get_next(ll_p, node_p);
 801308c:	606c      	str	r4, [r5, #4]
        if(ll_p->head == NULL) {
 801308e:	b1a4      	cbz	r4, 80130ba <lv_ll_clear+0x66>
    else memset(act + LL_PREV_P_OFFSET(ll_p), 0, node_p_size);
 8013090:	50e6      	str	r6, [r4, r3]
        lv_mem_free(i);
 8013092:	4610      	mov	r0, r2
 8013094:	f000 f8ea 	bl	801326c <lv_mem_free>
 8013098:	e7f0      	b.n	801307c <lv_ll_clear+0x28>
    if(act == NULL) return;     /*Can't set the prev node of `NULL`*/
 801309a:	b154      	cbz	r4, 80130b2 <lv_ll_clear+0x5e>
    else memset(act + LL_PREV_P_OFFSET(ll_p), 0, node_p_size);
 801309c:	50e2      	str	r2, [r4, r3]
 801309e:	e7eb      	b.n	8013078 <lv_ll_clear+0x24>
        memcpy(&prev, n_act_d + LL_PREV_P_OFFSET(ll_p), sizeof(void *));
 80130a0:	58c3      	ldr	r3, [r0, r3]
        ll_p->tail = lv_ll_get_prev(ll_p, node_p);
 80130a2:	60ab      	str	r3, [r5, #8]
        if(ll_p->tail == NULL) {
 80130a4:	b17b      	cbz	r3, 80130c6 <lv_ll_clear+0x72>
    else memset(act + LL_NEXT_P_OFFSET(ll_p), 0, node_p_size);
 80130a6:	505e      	str	r6, [r3, r1]
        lv_mem_free(i);
 80130a8:	f000 f8e0 	bl	801326c <lv_mem_free>
    while(i != NULL) {
 80130ac:	2c00      	cmp	r4, #0
 80130ae:	d1e5      	bne.n	801307c <lv_ll_clear+0x28>
 80130b0:	bd70      	pop	{r4, r5, r6, pc}
}
 80130b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_mem_free(i);
 80130b6:	f000 b8d9 	b.w	801326c <lv_mem_free>
            ll_p->tail = NULL;
 80130ba:	60ac      	str	r4, [r5, #8]
        lv_mem_free(i);
 80130bc:	4610      	mov	r0, r2
}
 80130be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_mem_free(i);
 80130c2:	f000 b8d3 	b.w	801326c <lv_mem_free>
            ll_p->head = NULL;
 80130c6:	606b      	str	r3, [r5, #4]
 80130c8:	e7ee      	b.n	80130a8 <lv_ll_clear+0x54>
 80130ca:	bd70      	pop	{r4, r5, r6, pc}
 80130cc:	4770      	bx	lr
 80130ce:	bf00      	nop

080130d0 <lv_ll_chg_list>:
    if(ll_p != NULL)    {
 80130d0:	2800      	cmp	r0, #0
 80130d2:	d02c      	beq.n	801312e <lv_ll_chg_list+0x5e>
    if(lv_ll_get_head(ll_p) == node_p) {
 80130d4:	6843      	ldr	r3, [r0, #4]
 80130d6:	429a      	cmp	r2, r3
{
 80130d8:	b470      	push	{r4, r5, r6}
    if(lv_ll_get_head(ll_p) == node_p) {
 80130da:	d03b      	beq.n	8013154 <lv_ll_chg_list+0x84>
    } else if(lv_ll_get_tail(ll_p) == node_p) {
 80130dc:	6883      	ldr	r3, [r0, #8]
 80130de:	429a      	cmp	r2, r3
 80130e0:	d040      	beq.n	8013164 <lv_ll_chg_list+0x94>
        memcpy(&prev, n_act_d + LL_PREV_P_OFFSET(ll_p), sizeof(void *));
 80130e2:	6805      	ldr	r5, [r0, #0]
        memcpy(&next, n_act_d + LL_NEXT_P_OFFSET(ll_p), sizeof(void *));
 80130e4:	1d2e      	adds	r6, r5, #4
        memcpy(&prev, n_act_d + LL_PREV_P_OFFSET(ll_p), sizeof(void *));
 80130e6:	5953      	ldr	r3, [r2, r5]
        memcpy(&next, n_act_d + LL_NEXT_P_OFFSET(ll_p), sizeof(void *));
 80130e8:	5994      	ldr	r4, [r2, r6]
    if(act == NULL) return;     /*Can't set the next node of `NULL`*/
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d04c      	beq.n	8013188 <lv_ll_chg_list+0xb8>
    if(next) memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
 80130ee:	519c      	str	r4, [r3, r6]
 80130f0:	b10c      	cbz	r4, 80130f6 <lv_ll_chg_list+0x26>
    if(prev) memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
 80130f2:	6800      	ldr	r0, [r0, #0]
 80130f4:	5023      	str	r3, [r4, r0]
    if(act == NULL) return;     /*Can't set the prev node of `NULL`*/
 80130f6:	b18a      	cbz	r2, 801311c <lv_ll_chg_list+0x4c>
    else memset(act + LL_PREV_P_OFFSET(ll_p), 0, node_p_size);
 80130f8:	680b      	ldr	r3, [r1, #0]
 80130fa:	2000      	movs	r0, #0
 80130fc:	50d0      	str	r0, [r2, r3]
    node_set_next(ll_new_p, node, ll_new_p->head);
 80130fe:	6848      	ldr	r0, [r1, #4]
    if(next) memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
 8013100:	680b      	ldr	r3, [r1, #0]
 8013102:	2800      	cmp	r0, #0
 8013104:	d034      	beq.n	8013170 <lv_ll_chg_list+0xa0>
 8013106:	4413      	add	r3, r2
 8013108:	6058      	str	r0, [r3, #4]
    if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
 801310a:	684b      	ldr	r3, [r1, #4]
 801310c:	b10b      	cbz	r3, 8013112 <lv_ll_chg_list+0x42>
    else memset(act + LL_PREV_P_OFFSET(ll_p), 0, node_p_size);
 801310e:	6808      	ldr	r0, [r1, #0]
 8013110:	501a      	str	r2, [r3, r0]
    if(ll_new_p->tail == NULL) {     /*If there is no tail (first node) set the tail too*/
 8013112:	688b      	ldr	r3, [r1, #8]
    ll_new_p->head = node;        /*Set the new head in the dsc.*/
 8013114:	604a      	str	r2, [r1, #4]
    if(ll_new_p->tail == NULL) {     /*If there is no tail (first node) set the tail too*/
 8013116:	b143      	cbz	r3, 801312a <lv_ll_chg_list+0x5a>
}
 8013118:	bc70      	pop	{r4, r5, r6}
 801311a:	4770      	bx	lr
    if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
 801311c:	684b      	ldr	r3, [r1, #4]
 801311e:	2b00      	cmp	r3, #0
 8013120:	d1f5      	bne.n	801310e <lv_ll_chg_list+0x3e>
    if(ll_new_p->tail == NULL) {     /*If there is no tail (first node) set the tail too*/
 8013122:	688b      	ldr	r3, [r1, #8]
    ll_new_p->head = node;        /*Set the new head in the dsc.*/
 8013124:	604a      	str	r2, [r1, #4]
    if(ll_new_p->tail == NULL) {     /*If there is no tail (first node) set the tail too*/
 8013126:	2b00      	cmp	r3, #0
 8013128:	d1f6      	bne.n	8013118 <lv_ll_chg_list+0x48>
        ll_new_p->tail = node;
 801312a:	608a      	str	r2, [r1, #8]
}
 801312c:	e7f4      	b.n	8013118 <lv_ll_chg_list+0x48>
    if(lv_ll_get_head(ll_p) == node_p) {
 801312e:	b332      	cbz	r2, 801317e <lv_ll_chg_list+0xae>
    else memset(act + LL_PREV_P_OFFSET(ll_p), 0, node_p_size);
 8013130:	680b      	ldr	r3, [r1, #0]
 8013132:	2000      	movs	r0, #0
 8013134:	50d0      	str	r0, [r2, r3]
    node_set_next(ll_new_p, node, ll_new_p->head);
 8013136:	6848      	ldr	r0, [r1, #4]
    if(next) memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
 8013138:	680b      	ldr	r3, [r1, #0]
 801313a:	b310      	cbz	r0, 8013182 <lv_ll_chg_list+0xb2>
 801313c:	4413      	add	r3, r2
 801313e:	6058      	str	r0, [r3, #4]
    if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
 8013140:	684b      	ldr	r3, [r1, #4]
 8013142:	b10b      	cbz	r3, 8013148 <lv_ll_chg_list+0x78>
    if(prev) memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
 8013144:	6808      	ldr	r0, [r1, #0]
 8013146:	501a      	str	r2, [r3, r0]
    if(ll_new_p->tail == NULL) {     /*If there is no tail (first node) set the tail too*/
 8013148:	688b      	ldr	r3, [r1, #8]
    ll_new_p->head = node;        /*Set the new head in the dsc.*/
 801314a:	604a      	str	r2, [r1, #4]
    if(ll_new_p->tail == NULL) {     /*If there is no tail (first node) set the tail too*/
 801314c:	2b00      	cmp	r3, #0
 801314e:	d1e4      	bne.n	801311a <lv_ll_chg_list+0x4a>
        ll_new_p->tail = node;
 8013150:	608a      	str	r2, [r1, #8]
}
 8013152:	4770      	bx	lr
        memcpy(&next, n_act_d + LL_NEXT_P_OFFSET(ll_p), sizeof(void *));
 8013154:	6804      	ldr	r4, [r0, #0]
 8013156:	1913      	adds	r3, r2, r4
 8013158:	685b      	ldr	r3, [r3, #4]
        ll_p->head = lv_ll_get_next(ll_p, node_p);
 801315a:	6043      	str	r3, [r0, #4]
        if(ll_p->head == NULL) {
 801315c:	b15b      	cbz	r3, 8013176 <lv_ll_chg_list+0xa6>
    else memset(act + LL_NEXT_P_OFFSET(ll_p), 0, node_p_size);
 801315e:	2000      	movs	r0, #0
 8013160:	50e0      	str	r0, [r4, r3]
 8013162:	e7c8      	b.n	80130f6 <lv_ll_chg_list+0x26>
        memcpy(&prev, n_act_d + LL_PREV_P_OFFSET(ll_p), sizeof(void *));
 8013164:	6803      	ldr	r3, [r0, #0]
 8013166:	58d4      	ldr	r4, [r2, r3]
        ll_p->tail = lv_ll_get_prev(ll_p, node_p);
 8013168:	6084      	str	r4, [r0, #8]
        if(ll_p->tail == NULL) {
 801316a:	b134      	cbz	r4, 801317a <lv_ll_chg_list+0xaa>
    else memset(act + LL_NEXT_P_OFFSET(ll_p), 0, node_p_size);
 801316c:	3304      	adds	r3, #4
 801316e:	e7f6      	b.n	801315e <lv_ll_chg_list+0x8e>
 8013170:	3304      	adds	r3, #4
 8013172:	50d0      	str	r0, [r2, r3]
 8013174:	e7c9      	b.n	801310a <lv_ll_chg_list+0x3a>
            ll_p->tail = NULL;
 8013176:	6083      	str	r3, [r0, #8]
 8013178:	e7bd      	b.n	80130f6 <lv_ll_chg_list+0x26>
            ll_p->head = NULL;
 801317a:	6044      	str	r4, [r0, #4]
 801317c:	e7bb      	b.n	80130f6 <lv_ll_chg_list+0x26>
        ll_p->head = lv_ll_get_next(ll_p, node_p);
 801317e:	6052      	str	r2, [r2, #4]
 8013180:	deff      	udf	#255	; 0xff
    else memset(act + LL_NEXT_P_OFFSET(ll_p), 0, node_p_size);
 8013182:	3304      	adds	r3, #4
 8013184:	50d0      	str	r0, [r2, r3]
 8013186:	e7db      	b.n	8013140 <lv_ll_chg_list+0x70>
    if(act == NULL) return;     /*Can't set the prev node of `NULL`*/
 8013188:	2c00      	cmp	r4, #0
 801318a:	d0b4      	beq.n	80130f6 <lv_ll_chg_list+0x26>
    else memset(act + LL_PREV_P_OFFSET(ll_p), 0, node_p_size);
 801318c:	5163      	str	r3, [r4, r5]
 801318e:	e7b2      	b.n	80130f6 <lv_ll_chg_list+0x26>

08013190 <lv_ll_get_head>:
    if(ll_p != NULL)    {
 8013190:	b100      	cbz	r0, 8013194 <lv_ll_get_head+0x4>
        head = ll_p->head;
 8013192:	6840      	ldr	r0, [r0, #4]
}
 8013194:	4770      	bx	lr
 8013196:	bf00      	nop

08013198 <lv_ll_get_tail>:
    if(ll_p != NULL)    {
 8013198:	b100      	cbz	r0, 801319c <lv_ll_get_tail+0x4>
        tail = ll_p->tail;
 801319a:	6880      	ldr	r0, [r0, #8]
}
 801319c:	4770      	bx	lr
 801319e:	bf00      	nop

080131a0 <lv_ll_get_next>:
    if(ll_p != NULL)    {
 80131a0:	b110      	cbz	r0, 80131a8 <lv_ll_get_next+0x8>
        memcpy(&next, n_act_d + LL_NEXT_P_OFFSET(ll_p), sizeof(void *));
 80131a2:	6803      	ldr	r3, [r0, #0]
 80131a4:	4419      	add	r1, r3
 80131a6:	6848      	ldr	r0, [r1, #4]
}
 80131a8:	4770      	bx	lr
 80131aa:	bf00      	nop

080131ac <lv_ll_get_prev>:
    if(ll_p != NULL) {
 80131ac:	b108      	cbz	r0, 80131b2 <lv_ll_get_prev+0x6>
        memcpy(&prev, n_act_d + LL_PREV_P_OFFSET(ll_p), sizeof(void *));
 80131ae:	6803      	ldr	r3, [r0, #0]
 80131b0:	58c8      	ldr	r0, [r1, r3]
}
 80131b2:	4770      	bx	lr

080131b4 <lv_mem_alloc.part.0>:
/**
 * Allocate a memory dynamically
 * @param size size of the memory to allocate in bytes
 * @return pointer to the allocated memory
 */
void * lv_mem_alloc(uint32_t size)
 80131b4:	4603      	mov	r3, r0
        size = size & (~0x7);
        size += 8;
    }
#else
    /*Round the size up to 4*/
    if(size & 0x3) {
 80131b6:	0780      	lsls	r0, r0, #30
 80131b8:	d002      	beq.n	80131c0 <lv_mem_alloc.part.0+0xc>
        size = size & (~0x3);
 80131ba:	f023 0303 	bic.w	r3, r3, #3
        size += 4;
 80131be:	3304      	adds	r3, #4
 80131c0:	4a1d      	ldr	r2, [pc, #116]	; (8013238 <lv_mem_alloc.part.0+0x84>)
 80131c2:	6812      	ldr	r2, [r2, #0]
 80131c4:	2a00      	cmp	r2, #0
 80131c6:	d035      	beq.n	8013234 <lv_mem_alloc.part.0+0x80>
 80131c8:	1d10      	adds	r0, r2, #4
void * lv_mem_alloc(uint32_t size)
 80131ca:	b430      	push	{r4, r5}
        next_e = (lv_mem_ent_t *) work_mem;
    } else { /*Get the next entry */
        uint8_t * data = &act_e->first_data;
        next_e = (lv_mem_ent_t *)&data[act_e->header.d_size];

        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 80131cc:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
static void * ent_alloc(lv_mem_ent_t * e, uint32_t size)
{
    void * alloc = NULL;

    /*If the memory is free and big enough then use it */
    if(e->header.used == 0 && e->header.d_size >= size) {
 80131d0:	7811      	ldrb	r1, [r2, #0]
 80131d2:	6814      	ldr	r4, [r2, #0]
 80131d4:	07c9      	lsls	r1, r1, #31
 80131d6:	d421      	bmi.n	801321c <lv_mem_alloc.part.0+0x68>
 80131d8:	f3c4 015e 	ubfx	r1, r4, #1, #31
 80131dc:	428b      	cmp	r3, r1
 80131de:	d81d      	bhi.n	801321c <lv_mem_alloc.part.0+0x68>
        size = size & (~0x7);
        size += 8;
    }
#else
    /*Round the size up to 4*/
    if(size & 0x3) {
 80131e0:	079c      	lsls	r4, r3, #30
 80131e2:	d002      	beq.n	80131ea <lv_mem_alloc.part.0+0x36>
        size = size & (~0x3);
 80131e4:	f023 0303 	bic.w	r3, r3, #3
        size += 4;
 80131e8:	3304      	adds	r3, #4
    }
#endif

    /*Don't let empty space only for a header without data*/
    if(e->header.d_size == size + sizeof(lv_mem_header_t)) {
 80131ea:	1d1c      	adds	r4, r3, #4
 80131ec:	42a1      	cmp	r1, r4
 80131ee:	d01f      	beq.n	8013230 <lv_mem_alloc.part.0+0x7c>
        size = e->header.d_size;
    }

    /* Create the new entry after the current if there is space for it */
    if(e->header.d_size != size) {
 80131f0:	4299      	cmp	r1, r3
 80131f2:	d009      	beq.n	8013208 <lv_mem_alloc.part.0+0x54>
        uint8_t * e_data = &e->first_data;
        lv_mem_ent_t * after_new_e = (lv_mem_ent_t *)&e_data[size];
        after_new_e->header.used = 0;
 80131f4:	5cc4      	ldrb	r4, [r0, r3]
        after_new_e->header.d_size = e->header.d_size - size - sizeof(lv_mem_header_t);
 80131f6:	3904      	subs	r1, #4
        after_new_e->header.used = 0;
 80131f8:	f36f 0400 	bfc	r4, #0, #1
        after_new_e->header.d_size = e->header.d_size - size - sizeof(lv_mem_header_t);
 80131fc:	1ac9      	subs	r1, r1, r3
        after_new_e->header.used = 0;
 80131fe:	54c4      	strb	r4, [r0, r3]
        after_new_e->header.d_size = e->header.d_size - size - sizeof(lv_mem_header_t);
 8013200:	58c4      	ldr	r4, [r0, r3]
 8013202:	f361 045f 	bfi	r4, r1, #1, #31
 8013206:	50c4      	str	r4, [r0, r3]
    }

    /* Set the new size for the original entry */
    e->header.d_size = size;
 8013208:	6811      	ldr	r1, [r2, #0]
 801320a:	f363 015f 	bfi	r1, r3, #1, #31
                  e->header.used = 1;
 801320e:	b2cb      	uxtb	r3, r1
    e->header.d_size = size;
 8013210:	6011      	str	r1, [r2, #0]
                  e->header.used = 1;
 8013212:	f043 0301 	orr.w	r3, r3, #1
 8013216:	7013      	strb	r3, [r2, #0]
}
 8013218:	bc30      	pop	{r4, r5}
 801321a:	4770      	bx	lr
        next_e = (lv_mem_ent_t *)&data[act_e->header.d_size];
 801321c:	eb00 0254 	add.w	r2, r0, r4, lsr #1
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 8013220:	1d10      	adds	r0, r2, #4
 8013222:	42a8      	cmp	r0, r5
 8013224:	d201      	bcs.n	801322a <lv_mem_alloc.part.0+0x76>
        if(e != NULL) {
 8013226:	2a00      	cmp	r2, #0
 8013228:	d1d2      	bne.n	80131d0 <lv_mem_alloc.part.0+0x1c>
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 801322a:	2000      	movs	r0, #0
}
 801322c:	bc30      	pop	{r4, r5}
 801322e:	4770      	bx	lr
    if(e->header.d_size == size + sizeof(lv_mem_header_t)) {
 8013230:	460b      	mov	r3, r1
 8013232:	e7e9      	b.n	8013208 <lv_mem_alloc.part.0+0x54>
        alloc = &e->first_data;
 8013234:	4610      	mov	r0, r2
 8013236:	4770      	bx	lr
 8013238:	2000e5c8 	.word	0x2000e5c8

0801323c <lv_mem_init>:
    work_mem = (uint8_t *) work_mem_int;
 801323c:	4b06      	ldr	r3, [pc, #24]	; (8013258 <lv_mem_init+0x1c>)
    full->header.d_size = LV_MEM_SIZE - sizeof(lv_mem_header_t);
 801323e:	f647 71fc 	movw	r1, #32764	; 0x7ffc
    full->header.used = 0;
 8013242:	791a      	ldrb	r2, [r3, #4]
    work_mem = (uint8_t *) work_mem_int;
 8013244:	1d18      	adds	r0, r3, #4
    full->header.used = 0;
 8013246:	f36f 0200 	bfc	r2, #0, #1
    work_mem = (uint8_t *) work_mem_int;
 801324a:	6018      	str	r0, [r3, #0]
    full->header.used = 0;
 801324c:	711a      	strb	r2, [r3, #4]
    full->header.d_size = LV_MEM_SIZE - sizeof(lv_mem_header_t);
 801324e:	685a      	ldr	r2, [r3, #4]
 8013250:	f361 025f 	bfi	r2, r1, #1, #31
 8013254:	605a      	str	r2, [r3, #4]
 8013256:	4770      	bx	lr
 8013258:	2000e5c8 	.word	0x2000e5c8

0801325c <lv_mem_alloc>:
    if(size == 0) {
 801325c:	b108      	cbz	r0, 8013262 <lv_mem_alloc+0x6>
 801325e:	f7ff bfa9 	b.w	80131b4 <lv_mem_alloc.part.0>
}
 8013262:	4801      	ldr	r0, [pc, #4]	; (8013268 <lv_mem_alloc+0xc>)
 8013264:	4770      	bx	lr
 8013266:	bf00      	nop
 8013268:	200165cc 	.word	0x200165cc

0801326c <lv_mem_free>:
    if(data == NULL) return;
 801326c:	2800      	cmp	r0, #0
 801326e:	d04e      	beq.n	801330e <lv_mem_free+0xa2>
    if(data == &zero_mem) return;
 8013270:	4b29      	ldr	r3, [pc, #164]	; (8013318 <lv_mem_free+0xac>)
    if(data == NULL) return;
 8013272:	1ac3      	subs	r3, r0, r3
 8013274:	fab3 f383 	clz	r3, r3
 8013278:	095b      	lsrs	r3, r3, #5
 801327a:	2b00      	cmp	r3, #0
 801327c:	d147      	bne.n	801330e <lv_mem_free+0xa2>
    e->header.used = 0;
 801327e:	f810 1c04 	ldrb.w	r1, [r0, #-4]
 8013282:	4602      	mov	r2, r0
 8013284:	f363 0100 	bfi	r1, r3, #0, #1
{
 8013288:	b470      	push	{r4, r5, r6}
    e->header.used = 0;
 801328a:	f802 1d04 	strb.w	r1, [r2, #-4]!
    if(act_e == NULL) { /*NULL means: get the first entry*/
 801328e:	2a00      	cmp	r2, #0
 8013290:	d03e      	beq.n	8013310 <lv_mem_free+0xa4>
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 8013292:	4b22      	ldr	r3, [pc, #136]	; (801331c <lv_mem_free+0xb0>)
        next_e = (lv_mem_ent_t *)&data[act_e->header.d_size];
 8013294:	f850 1c04 	ldr.w	r1, [r0, #-4]
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 8013298:	681e      	ldr	r6, [r3, #0]
        next_e = (lv_mem_ent_t *)&data[act_e->header.d_size];
 801329a:	eb00 0151 	add.w	r1, r0, r1, lsr #1
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 801329e:	f506 4300 	add.w	r3, r6, #32768	; 0x8000
 80132a2:	1d0a      	adds	r2, r1, #4
 80132a4:	429a      	cmp	r2, r3
 80132a6:	d231      	bcs.n	801330c <lv_mem_free+0xa0>
    while(e_next != NULL) {
 80132a8:	b381      	cbz	r1, 801330c <lv_mem_free+0xa0>
        if(e_next->header.used == 0) {
 80132aa:	780b      	ldrb	r3, [r1, #0]
 80132ac:	07db      	lsls	r3, r3, #31
 80132ae:	d42d      	bmi.n	801330c <lv_mem_free+0xa0>
            e->header.d_size += e_next->header.d_size + sizeof(e->header);
 80132b0:	f850 4c04 	ldr.w	r4, [r0, #-4]
 80132b4:	460b      	mov	r3, r1
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 80132b6:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
            e->header.d_size += e_next->header.d_size + sizeof(e->header);
 80132ba:	f3c4 025e 	ubfx	r2, r4, #1, #31
 80132be:	f853 5b04 	ldr.w	r5, [r3], #4
 80132c2:	3204      	adds	r2, #4
 80132c4:	eb02 0255 	add.w	r2, r2, r5, lsr #1
 80132c8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80132cc:	f362 045f 	bfi	r4, r2, #1, #31
 80132d0:	f840 4c04 	str.w	r4, [r0, #-4]
        next_e = (lv_mem_ent_t *)&data[act_e->header.d_size];
 80132d4:	6809      	ldr	r1, [r1, #0]
 80132d6:	eb03 0351 	add.w	r3, r3, r1, lsr #1
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 80132da:	1d19      	adds	r1, r3, #4
 80132dc:	42b1      	cmp	r1, r6
 80132de:	d215      	bcs.n	801330c <lv_mem_free+0xa0>
            e->header.d_size += e_next->header.d_size + sizeof(e->header);
 80132e0:	3204      	adds	r2, #4
    while(e_next != NULL) {
 80132e2:	b19b      	cbz	r3, 801330c <lv_mem_free+0xa0>
        if(e_next->header.used == 0) {
 80132e4:	781c      	ldrb	r4, [r3, #0]
 80132e6:	07e4      	lsls	r4, r4, #31
 80132e8:	d410      	bmi.n	801330c <lv_mem_free+0xa0>
            e->header.d_size += e_next->header.d_size + sizeof(e->header);
 80132ea:	681d      	ldr	r5, [r3, #0]
 80132ec:	f850 4c04 	ldr.w	r4, [r0, #-4]
 80132f0:	eb02 0255 	add.w	r2, r2, r5, lsr #1
 80132f4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80132f8:	f362 045f 	bfi	r4, r2, #1, #31
 80132fc:	f840 4c04 	str.w	r4, [r0, #-4]
        next_e = (lv_mem_ent_t *)&data[act_e->header.d_size];
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	eb01 0353 	add.w	r3, r1, r3, lsr #1
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 8013306:	1d19      	adds	r1, r3, #4
 8013308:	42b1      	cmp	r1, r6
 801330a:	d3e9      	bcc.n	80132e0 <lv_mem_free+0x74>
}
 801330c:	bc70      	pop	{r4, r5, r6}
 801330e:	4770      	bx	lr
        next_e = (lv_mem_ent_t *) work_mem;
 8013310:	4b02      	ldr	r3, [pc, #8]	; (801331c <lv_mem_free+0xb0>)
 8013312:	6819      	ldr	r1, [r3, #0]
 8013314:	460e      	mov	r6, r1
 8013316:	e7c7      	b.n	80132a8 <lv_mem_free+0x3c>
 8013318:	200165cc 	.word	0x200165cc
 801331c:	2000e5c8 	.word	0x2000e5c8

08013320 <lv_mem_realloc>:
{
 8013320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013324:	460d      	mov	r5, r1
    if(data_p != NULL) {
 8013326:	4604      	mov	r4, r0
 8013328:	2800      	cmp	r0, #0
 801332a:	f000 80a8 	beq.w	801347e <lv_mem_realloc+0x15e>
        if(e->header.used == 0) {
 801332e:	f810 3c04 	ldrb.w	r3, [r0, #-4]
 8013332:	f013 0601 	ands.w	r6, r3, #1
 8013336:	d02a      	beq.n	801338e <lv_mem_realloc+0x6e>
    if(data == &zero_mem) return 0;
 8013338:	4b59      	ldr	r3, [pc, #356]	; (80134a0 <lv_mem_realloc+0x180>)
 801333a:	4298      	cmp	r0, r3
 801333c:	f000 80a1 	beq.w	8013482 <lv_mem_realloc+0x162>
    return e->header.d_size;
 8013340:	f854 7c04 	ldr.w	r7, [r4, #-4]
 8013344:	f3c7 075e 	ubfx	r7, r7, #1, #31
    if(old_size == new_size) return data_p;     /*Also avoid reallocating the same memory*/
 8013348:	42bd      	cmp	r5, r7
 801334a:	f000 8094 	beq.w	8013476 <lv_mem_realloc+0x156>
    if(new_size < old_size) {
 801334e:	d242      	bcs.n	80133d6 <lv_mem_realloc+0xb6>
    if(size & 0x3) {
 8013350:	07ae      	lsls	r6, r5, #30
 8013352:	d03b      	beq.n	80133cc <lv_mem_realloc+0xac>
        size = size & (~0x3);
 8013354:	f025 0503 	bic.w	r5, r5, #3
    if(e->header.d_size == size + sizeof(lv_mem_header_t)) {
 8013358:	f105 0308 	add.w	r3, r5, #8
 801335c:	429f      	cmp	r7, r3
 801335e:	d038      	beq.n	80133d2 <lv_mem_realloc+0xb2>
        size += 4;
 8013360:	3504      	adds	r5, #4
    if(e->header.d_size != size) {
 8013362:	42af      	cmp	r7, r5
 8013364:	d009      	beq.n	801337a <lv_mem_realloc+0x5a>
        after_new_e->header.used = 0;
 8013366:	5d63      	ldrb	r3, [r4, r5]
        after_new_e->header.d_size = e->header.d_size - size - sizeof(lv_mem_header_t);
 8013368:	3f04      	subs	r7, #4
        after_new_e->header.used = 0;
 801336a:	f36f 0300 	bfc	r3, #0, #1
        after_new_e->header.d_size = e->header.d_size - size - sizeof(lv_mem_header_t);
 801336e:	1b7f      	subs	r7, r7, r5
        after_new_e->header.used = 0;
 8013370:	5563      	strb	r3, [r4, r5]
        after_new_e->header.d_size = e->header.d_size - size - sizeof(lv_mem_header_t);
 8013372:	5963      	ldr	r3, [r4, r5]
 8013374:	f367 035f 	bfi	r3, r7, #1, #31
 8013378:	5163      	str	r3, [r4, r5]
    e->header.d_size = size;
 801337a:	f854 3c04 	ldr.w	r3, [r4, #-4]
        return &e->first_data;
 801337e:	46a0      	mov	r8, r4
    e->header.d_size = size;
 8013380:	f365 035f 	bfi	r3, r5, #1, #31
 8013384:	f844 3c04 	str.w	r3, [r4, #-4]
}
 8013388:	4640      	mov	r0, r8
 801338a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801338e:	4634      	mov	r4, r6
    if(old_size == new_size) return data_p;     /*Also avoid reallocating the same memory*/
 8013390:	2d00      	cmp	r5, #0
 8013392:	d070      	beq.n	8013476 <lv_mem_realloc+0x156>
 8013394:	f04f 0900 	mov.w	r9, #0
 8013398:	464f      	mov	r7, r9
 801339a:	4628      	mov	r0, r5
 801339c:	f7ff ff0a 	bl	80131b4 <lv_mem_alloc.part.0>
        if(old_size != 0) {
 80133a0:	2800      	cmp	r0, #0
 80133a2:	bf0c      	ite	eq
 80133a4:	2600      	moveq	r6, #0
 80133a6:	f006 0601 	andne.w	r6, r6, #1
    if(new_p != NULL && data_p != NULL) {
 80133aa:	4680      	mov	r8, r0
        if(old_size != 0) {
 80133ac:	2e00      	cmp	r6, #0
 80133ae:	d0eb      	beq.n	8013388 <lv_mem_realloc+0x68>
 80133b0:	f1b9 0f00 	cmp.w	r9, #0
 80133b4:	d0e8      	beq.n	8013388 <lv_mem_realloc+0x68>
            memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
 80133b6:	42bd      	cmp	r5, r7
 80133b8:	462a      	mov	r2, r5
 80133ba:	4621      	mov	r1, r4
 80133bc:	bf28      	it	cs
 80133be:	463a      	movcs	r2, r7
 80133c0:	f00a fb0c 	bl	801d9dc <memcpy>
    if(data == &zero_mem) return;
 80133c4:	4b36      	ldr	r3, [pc, #216]	; (80134a0 <lv_mem_realloc+0x180>)
 80133c6:	429c      	cmp	r4, r3
 80133c8:	d10a      	bne.n	80133e0 <lv_mem_realloc+0xc0>
 80133ca:	e7dd      	b.n	8013388 <lv_mem_realloc+0x68>
    if(e->header.d_size == size + sizeof(lv_mem_header_t)) {
 80133cc:	1d2b      	adds	r3, r5, #4
 80133ce:	429f      	cmp	r7, r3
 80133d0:	d1c9      	bne.n	8013366 <lv_mem_realloc+0x46>
 80133d2:	463d      	mov	r5, r7
 80133d4:	e7d1      	b.n	801337a <lv_mem_realloc+0x5a>
    if(size == 0) {
 80133d6:	2d00      	cmp	r5, #0
 80133d8:	d159      	bne.n	801348e <lv_mem_realloc+0x16e>
        if(old_size != 0) {
 80133da:	4698      	mov	r8, r3
 80133dc:	2f00      	cmp	r7, #0
 80133de:	d0d3      	beq.n	8013388 <lv_mem_realloc+0x68>
    e->header.used = 0;
 80133e0:	f814 2c04 	ldrb.w	r2, [r4, #-4]
 80133e4:	4623      	mov	r3, r4
 80133e6:	f36f 0200 	bfc	r2, #0, #1
 80133ea:	f803 2d04 	strb.w	r2, [r3, #-4]!
    if(act_e == NULL) { /*NULL means: get the first entry*/
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d049      	beq.n	8013486 <lv_mem_realloc+0x166>
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 80133f2:	4b2c      	ldr	r3, [pc, #176]	; (80134a4 <lv_mem_realloc+0x184>)
        next_e = (lv_mem_ent_t *)&data[act_e->header.d_size];
 80133f4:	f854 1c04 	ldr.w	r1, [r4, #-4]
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 80133f8:	681e      	ldr	r6, [r3, #0]
        next_e = (lv_mem_ent_t *)&data[act_e->header.d_size];
 80133fa:	eb04 0151 	add.w	r1, r4, r1, lsr #1
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 80133fe:	f506 4300 	add.w	r3, r6, #32768	; 0x8000
 8013402:	1d0a      	adds	r2, r1, #4
 8013404:	429a      	cmp	r2, r3
 8013406:	d2bf      	bcs.n	8013388 <lv_mem_realloc+0x68>
    while(e_next != NULL) {
 8013408:	2900      	cmp	r1, #0
 801340a:	d0bd      	beq.n	8013388 <lv_mem_realloc+0x68>
        if(e_next->header.used == 0) {
 801340c:	780b      	ldrb	r3, [r1, #0]
 801340e:	07db      	lsls	r3, r3, #31
 8013410:	d4ba      	bmi.n	8013388 <lv_mem_realloc+0x68>
            e->header.d_size += e_next->header.d_size + sizeof(e->header);
 8013412:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8013416:	460b      	mov	r3, r1
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 8013418:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
            e->header.d_size += e_next->header.d_size + sizeof(e->header);
 801341c:	f3c0 025e 	ubfx	r2, r0, #1, #31
 8013420:	f853 5b04 	ldr.w	r5, [r3], #4
 8013424:	3204      	adds	r2, #4
 8013426:	eb02 0255 	add.w	r2, r2, r5, lsr #1
 801342a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 801342e:	f362 005f 	bfi	r0, r2, #1, #31
 8013432:	f844 0c04 	str.w	r0, [r4, #-4]
        next_e = (lv_mem_ent_t *)&data[act_e->header.d_size];
 8013436:	6809      	ldr	r1, [r1, #0]
 8013438:	eb03 0351 	add.w	r3, r3, r1, lsr #1
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 801343c:	1d19      	adds	r1, r3, #4
 801343e:	42b1      	cmp	r1, r6
 8013440:	d2a2      	bcs.n	8013388 <lv_mem_realloc+0x68>
            e->header.d_size += e_next->header.d_size + sizeof(e->header);
 8013442:	3204      	adds	r2, #4
    while(e_next != NULL) {
 8013444:	2b00      	cmp	r3, #0
 8013446:	d09f      	beq.n	8013388 <lv_mem_realloc+0x68>
        if(e_next->header.used == 0) {
 8013448:	7818      	ldrb	r0, [r3, #0]
 801344a:	07c0      	lsls	r0, r0, #31
 801344c:	d49c      	bmi.n	8013388 <lv_mem_realloc+0x68>
            e->header.d_size += e_next->header.d_size + sizeof(e->header);
 801344e:	681d      	ldr	r5, [r3, #0]
 8013450:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8013454:	eb02 0255 	add.w	r2, r2, r5, lsr #1
 8013458:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 801345c:	f362 005f 	bfi	r0, r2, #1, #31
 8013460:	f844 0c04 	str.w	r0, [r4, #-4]
        next_e = (lv_mem_ent_t *)&data[act_e->header.d_size];
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	eb01 0353 	add.w	r3, r1, r3, lsr #1
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 801346a:	1d19      	adds	r1, r3, #4
 801346c:	42b1      	cmp	r1, r6
 801346e:	d3e8      	bcc.n	8013442 <lv_mem_realloc+0x122>
}
 8013470:	4640      	mov	r0, r8
 8013472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(old_size == new_size) return data_p;     /*Also avoid reallocating the same memory*/
 8013476:	46a0      	mov	r8, r4
}
 8013478:	4640      	mov	r0, r8
 801347a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801347e:	4606      	mov	r6, r0
 8013480:	e786      	b.n	8013390 <lv_mem_realloc+0x70>
    if(data == &zero_mem) return 0;
 8013482:	2601      	movs	r6, #1
 8013484:	e784      	b.n	8013390 <lv_mem_realloc+0x70>
        next_e = (lv_mem_ent_t *) work_mem;
 8013486:	4b07      	ldr	r3, [pc, #28]	; (80134a4 <lv_mem_realloc+0x184>)
 8013488:	6819      	ldr	r1, [r3, #0]
 801348a:	460e      	mov	r6, r1
 801348c:	e7bc      	b.n	8013408 <lv_mem_realloc+0xe8>
 801348e:	f117 0900 	adds.w	r9, r7, #0
    if(size == 0) {
 8013492:	f04f 0601 	mov.w	r6, #1
 8013496:	bf18      	it	ne
 8013498:	f04f 0901 	movne.w	r9, #1
 801349c:	e77d      	b.n	801339a <lv_mem_realloc+0x7a>
 801349e:	bf00      	nop
 80134a0:	200165cc 	.word	0x200165cc
 80134a4:	2000e5c8 	.word	0x2000e5c8

080134a8 <lv_mem_monitor>:
        next_e = (lv_mem_ent_t *) work_mem;
 80134a8:	4b23      	ldr	r3, [pc, #140]	; (8013538 <lv_mem_monitor+0x90>)
    memset(mon_p, 0, sizeof(lv_mem_monitor_t));
 80134aa:	2200      	movs	r2, #0
        next_e = (lv_mem_ent_t *) work_mem;
 80134ac:	681b      	ldr	r3, [r3, #0]
    memset(mon_p, 0, sizeof(lv_mem_monitor_t));
 80134ae:	6002      	str	r2, [r0, #0]
 80134b0:	6042      	str	r2, [r0, #4]
 80134b2:	6082      	str	r2, [r0, #8]
 80134b4:	60c2      	str	r2, [r0, #12]
 80134b6:	6102      	str	r2, [r0, #16]
 80134b8:	6142      	str	r2, [r0, #20]
{
 80134ba:	b4f0      	push	{r4, r5, r6, r7}
 80134bc:	6805      	ldr	r5, [r0, #0]
    while(e != NULL)  {
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d037      	beq.n	8013532 <lv_mem_monitor+0x8a>
 80134c2:	1d19      	adds	r1, r3, #4
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 80134c4:	f503 4700 	add.w	r7, r3, #32768	; 0x8000
 80134c8:	462e      	mov	r6, r5
        if(e->header.used == 0) {
 80134ca:	781a      	ldrb	r2, [r3, #0]
 80134cc:	07d2      	lsls	r2, r2, #31
 80134ce:	d423      	bmi.n	8013518 <lv_mem_monitor+0x70>
            mon_p->free_size += e->header.d_size;
 80134d0:	681a      	ldr	r2, [r3, #0]
            mon_p->free_cnt++;
 80134d2:	6843      	ldr	r3, [r0, #4]
            mon_p->free_size += e->header.d_size;
 80134d4:	f3c2 025e 	ubfx	r2, r2, #1, #31
            mon_p->free_cnt++;
 80134d8:	1c5c      	adds	r4, r3, #1
            mon_p->free_size += e->header.d_size;
 80134da:	4415      	add	r5, r2
            if(e->header.d_size > mon_p->free_biggest_size) {
 80134dc:	42b2      	cmp	r2, r6
 80134de:	4613      	mov	r3, r2
            mon_p->free_cnt++;
 80134e0:	6044      	str	r4, [r0, #4]
            mon_p->free_size += e->header.d_size;
 80134e2:	6085      	str	r5, [r0, #8]
            if(e->header.d_size > mon_p->free_biggest_size) {
 80134e4:	d901      	bls.n	80134ea <lv_mem_monitor+0x42>
                mon_p->free_biggest_size = e->header.d_size;
 80134e6:	4616      	mov	r6, r2
 80134e8:	60c2      	str	r2, [r0, #12]
        next_e = (lv_mem_ent_t *)&data[act_e->header.d_size];
 80134ea:	440b      	add	r3, r1
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 80134ec:	1d19      	adds	r1, r3, #4
 80134ee:	42b9      	cmp	r1, r7
 80134f0:	d31c      	bcc.n	801352c <lv_mem_monitor+0x84>
    mon_p->used_pct = 100 - (100U * mon_p->free_size) / mon_p->total_size;
 80134f2:	2364      	movs	r3, #100	; 0x64
    mon_p->total_size = LV_MEM_SIZE;
 80134f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    mon_p->frag_pct = (uint32_t)mon_p->free_biggest_size * 100U / mon_p->free_size;
 80134f8:	fb03 f606 	mul.w	r6, r3, r6
    mon_p->used_pct = 100 - (100U * mon_p->free_size) / mon_p->total_size;
 80134fc:	fb03 f305 	mul.w	r3, r3, r5
    mon_p->total_size = LV_MEM_SIZE;
 8013500:	6002      	str	r2, [r0, #0]
    mon_p->used_pct = 100 - (100U * mon_p->free_size) / mon_p->total_size;
 8013502:	0bdb      	lsrs	r3, r3, #15
    mon_p->frag_pct = (uint32_t)mon_p->free_biggest_size * 100U / mon_p->free_size;
 8013504:	fbb6 f5f5 	udiv	r5, r6, r5
    mon_p->used_pct = 100 - (100U * mon_p->free_size) / mon_p->total_size;
 8013508:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
    mon_p->frag_pct = 100 - mon_p->frag_pct;
 801350c:	f1c5 0564 	rsb	r5, r5, #100	; 0x64
    mon_p->used_pct = 100 - (100U * mon_p->free_size) / mon_p->total_size;
 8013510:	7503      	strb	r3, [r0, #20]
    mon_p->frag_pct = 100 - mon_p->frag_pct;
 8013512:	7545      	strb	r5, [r0, #21]
}
 8013514:	bcf0      	pop	{r4, r5, r6, r7}
 8013516:	4770      	bx	lr
 8013518:	681b      	ldr	r3, [r3, #0]
            mon_p->used_cnt++;
 801351a:	6902      	ldr	r2, [r0, #16]
 801351c:	f3c3 035e 	ubfx	r3, r3, #1, #31
 8013520:	3201      	adds	r2, #1
        next_e = (lv_mem_ent_t *)&data[act_e->header.d_size];
 8013522:	440b      	add	r3, r1
            mon_p->used_cnt++;
 8013524:	6102      	str	r2, [r0, #16]
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 8013526:	1d19      	adds	r1, r3, #4
 8013528:	42b9      	cmp	r1, r7
 801352a:	d2e2      	bcs.n	80134f2 <lv_mem_monitor+0x4a>
    while(e != NULL)  {
 801352c:	2b00      	cmp	r3, #0
 801352e:	d1cc      	bne.n	80134ca <lv_mem_monitor+0x22>
 8013530:	e7df      	b.n	80134f2 <lv_mem_monitor+0x4a>
 8013532:	462e      	mov	r6, r5
 8013534:	e7dd      	b.n	80134f2 <lv_mem_monitor+0x4a>
 8013536:	bf00      	nop
 8013538:	2000e5c8 	.word	0x2000e5c8

0801353c <lv_mem_get_size>:
    if(data == &zero_mem) return 0;
 801353c:	4b05      	ldr	r3, [pc, #20]	; (8013554 <lv_mem_get_size+0x18>)
 801353e:	4298      	cmp	r0, r3
 8013540:	d005      	beq.n	801354e <lv_mem_get_size+0x12>
 8013542:	b120      	cbz	r0, 801354e <lv_mem_get_size+0x12>
    return e->header.d_size;
 8013544:	f850 0c04 	ldr.w	r0, [r0, #-4]
 8013548:	f3c0 005e 	ubfx	r0, r0, #1, #31
 801354c:	4770      	bx	lr
 801354e:	2000      	movs	r0, #0
}
 8013550:	4770      	bx	lr
 8013552:	bf00      	nop
 8013554:	200165cc 	.word	0x200165cc

08013558 <lv_task_init>:

/**
 * Init the lv_task module
 */
void lv_task_init(void)
{
 8013558:	b508      	push	{r3, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
 801355a:	2114      	movs	r1, #20
 801355c:	4803      	ldr	r0, [pc, #12]	; (801356c <lv_task_init+0x14>)
 801355e:	f7ff fccf 	bl	8012f00 <lv_ll_init>
 * Enable or disable the whole lv_task handling
 * @param en: true: lv_task handling is running, false: lv_task handling is suspended
 */
void lv_task_enable(bool en)
{
    lv_task_run = en;
 8013562:	4b03      	ldr	r3, [pc, #12]	; (8013570 <lv_task_init+0x18>)
 8013564:	2201      	movs	r2, #1
 8013566:	701a      	strb	r2, [r3, #0]
 8013568:	bd08      	pop	{r3, pc}
 801356a:	bf00      	nop
 801356c:	200194a4 	.word	0x200194a4
 8013570:	200165d0 	.word	0x200165d0

08013574 <lv_task_handler>:
{
 8013574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(task_handler_mutex) return;
 8013578:	4e66      	ldr	r6, [pc, #408]	; (8013714 <lv_task_handler+0x1a0>)
 801357a:	7875      	ldrb	r5, [r6, #1]
 801357c:	b91d      	cbnz	r5, 8013586 <lv_task_handler+0x12>
    task_handler_mutex = true;
 801357e:	2201      	movs	r2, #1
    if(lv_task_run == false) return;
 8013580:	7833      	ldrb	r3, [r6, #0]
    task_handler_mutex = true;
 8013582:	7072      	strb	r2, [r6, #1]
    if(lv_task_run == false) return;
 8013584:	b90b      	cbnz	r3, 801358a <lv_task_handler+0x16>
 8013586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801358a:	4f63      	ldr	r7, [pc, #396]	; (8013718 <lv_task_handler+0x1a4>)
        task_deleted = false;
 801358c:	46a9      	mov	r9, r5
        LV_GC_ROOT(_lv_task_act) = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 801358e:	f8df 8190 	ldr.w	r8, [pc, #400]	; 8013720 <lv_task_handler+0x1ac>
    handler_start = lv_tick_get();
 8013592:	f7ff f8c9 	bl	8012728 <lv_tick_get>
 8013596:	6070      	str	r0, [r6, #4]
        LV_GC_ROOT(_lv_task_act) = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 8013598:	4640      	mov	r0, r8
        task_deleted = false;
 801359a:	f886 9008 	strb.w	r9, [r6, #8]
        task_created = false;
 801359e:	f886 9009 	strb.w	r9, [r6, #9]
        LV_GC_ROOT(_lv_task_act) = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 80135a2:	f7ff fdf5 	bl	8013190 <lv_ll_get_head>
 80135a6:	4601      	mov	r1, r0
 80135a8:	6038      	str	r0, [r7, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
 80135aa:	b1f9      	cbz	r1, 80135ec <lv_task_handler+0x78>
            next = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
 80135ac:	4640      	mov	r0, r8
 80135ae:	f7ff fdf7 	bl	80131a0 <lv_ll_get_next>
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_OFF) {
 80135b2:	f8d7 a000 	ldr.w	sl, [r7]
            next = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
 80135b6:	4604      	mov	r4, r0
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_OFF) {
 80135b8:	f89a 3010 	ldrb.w	r3, [sl, #16]
 80135bc:	f013 0207 	ands.w	r2, r3, #7
 80135c0:	d014      	beq.n	80135ec <lv_task_handler+0x78>
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
 80135c2:	4555      	cmp	r5, sl
 80135c4:	d051      	beq.n	801366a <lv_task_handler+0xf6>
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_HIGHEST) {
 80135c6:	2a05      	cmp	r2, #5
 80135c8:	d053      	beq.n	8013672 <lv_task_handler+0xfe>
            else if(task_interrupter) {
 80135ca:	2d00      	cmp	r5, #0
 80135cc:	d07a      	beq.n	80136c4 <lv_task_handler+0x150>
                if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio > task_interrupter->prio) {
 80135ce:	7c2a      	ldrb	r2, [r5, #16]
 80135d0:	f003 0307 	and.w	r3, r3, #7
 80135d4:	f002 0207 	and.w	r2, r2, #7
 80135d8:	4293      	cmp	r3, r2
 80135da:	dc29      	bgt.n	8013630 <lv_task_handler+0xbc>
            if(task_deleted) break;     /*If a task was deleted then this or the next item might be corrupted*/
 80135dc:	7a33      	ldrb	r3, [r6, #8]
 80135de:	b92b      	cbnz	r3, 80135ec <lv_task_handler+0x78>
            if(task_created) break;     /*If a task was deleted then this or the next item might be corrupted*/
 80135e0:	7a73      	ldrb	r3, [r6, #9]
 80135e2:	b91b      	cbnz	r3, 80135ec <lv_task_handler+0x78>
 80135e4:	4621      	mov	r1, r4
            LV_GC_ROOT(_lv_task_act) = next;         /*Load the next task*/
 80135e6:	603c      	str	r4, [r7, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
 80135e8:	2900      	cmp	r1, #0
 80135ea:	d1df      	bne.n	80135ac <lv_task_handler+0x38>
    busy_time += lv_tick_elaps(handler_start);
 80135ec:	6870      	ldr	r0, [r6, #4]
 80135ee:	f7ff f8a5 	bl	801273c <lv_tick_elaps>
 80135f2:	68f3      	ldr	r3, [r6, #12]
 80135f4:	4403      	add	r3, r0
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 80135f6:	6970      	ldr	r0, [r6, #20]
    busy_time += lv_tick_elaps(handler_start);
 80135f8:	60f3      	str	r3, [r6, #12]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 80135fa:	f7ff f89f 	bl	801273c <lv_tick_elaps>
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 80135fe:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8013602:	d311      	bcc.n	8013628 <lv_task_handler+0xb4>
        idle_last = (uint32_t)((uint32_t)busy_time * 100) / IDLE_MEAS_PERIOD;   /*Calculate the busy percentage*/
 8013604:	68f1      	ldr	r1, [r6, #12]
 8013606:	2364      	movs	r3, #100	; 0x64
 8013608:	4a44      	ldr	r2, [pc, #272]	; (801371c <lv_task_handler+0x1a8>)
 801360a:	fb03 f301 	mul.w	r3, r3, r1
 801360e:	fba2 2303 	umull	r2, r3, r2, r3
 8013612:	f3c3 1347 	ubfx	r3, r3, #5, #8
        idle_last = idle_last > 100 ? 0 : 100 - idle_last;                      /*But we need idle time*/
 8013616:	2b64      	cmp	r3, #100	; 0x64
 8013618:	d977      	bls.n	801370a <lv_task_handler+0x196>
 801361a:	2300      	movs	r3, #0
        busy_time = 0;
 801361c:	2200      	movs	r2, #0
        idle_last = idle_last > 100 ? 0 : 100 - idle_last;                      /*But we need idle time*/
 801361e:	7433      	strb	r3, [r6, #16]
        busy_time = 0;
 8013620:	60f2      	str	r2, [r6, #12]
        idle_period_start = lv_tick_get();
 8013622:	f7ff f881 	bl	8012728 <lv_tick_get>
 8013626:	6170      	str	r0, [r6, #20]
    task_handler_mutex = false;     /*Release the mutex*/
 8013628:	2300      	movs	r3, #0
 801362a:	7073      	strb	r3, [r6, #1]
 801362c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static bool lv_task_exec(lv_task_t * lv_task_p)
{
    bool exec = false;

    /*Execute if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(lv_task_p->last_run);
 8013630:	f8da 0004 	ldr.w	r0, [sl, #4]
 8013634:	f7ff f882 	bl	801273c <lv_tick_elaps>
    if(elp >= lv_task_p->period) {
 8013638:	f8da 3000 	ldr.w	r3, [sl]
 801363c:	4298      	cmp	r0, r3
 801363e:	d3cd      	bcc.n	80135dc <lv_task_handler+0x68>
        lv_task_p->last_run = lv_tick_get();
 8013640:	f7ff f872 	bl	8012728 <lv_tick_get>
        task_deleted = false;
        task_created = false;
        lv_task_p->task(lv_task_p->param);
 8013644:	f8da 3008 	ldr.w	r3, [sl, #8]
        lv_task_p->last_run = lv_tick_get();
 8013648:	f8ca 0004 	str.w	r0, [sl, #4]
        task_deleted = false;
 801364c:	f886 9008 	strb.w	r9, [r6, #8]
        lv_task_p->task(lv_task_p->param);
 8013650:	f8da 000c 	ldr.w	r0, [sl, #12]
        task_created = false;
 8013654:	f886 9009 	strb.w	r9, [r6, #9]
        lv_task_p->task(lv_task_p->param);
 8013658:	4798      	blx	r3

        /*Delete if it was a one shot lv_task*/
        if(task_deleted == false) {			/*The task might be deleted by itself as well*/
 801365a:	7a33      	ldrb	r3, [r6, #8]
 801365c:	b91b      	cbnz	r3, 8013666 <lv_task_handler+0xf2>
        	if(lv_task_p->once != 0) {
 801365e:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8013662:	071b      	lsls	r3, r3, #28
 8013664:	d448      	bmi.n	80136f8 <lv_task_handler+0x184>
 8013666:	683d      	ldr	r5, [r7, #0]
                    break;
 8013668:	e796      	b.n	8013598 <lv_task_handler+0x24>
                LV_GC_ROOT(_lv_task_act) = next;
 801366a:	6038      	str	r0, [r7, #0]
                task_interrupter = NULL;     /*From this point only task after the interrupter comes, so the interrupter is not interesting anymore*/
 801366c:	2500      	movs	r5, #0
 801366e:	4621      	mov	r1, r4
 8013670:	e7ba      	b.n	80135e8 <lv_task_handler+0x74>
    uint32_t elp = lv_tick_elaps(lv_task_p->last_run);
 8013672:	f8da 0004 	ldr.w	r0, [sl, #4]
 8013676:	f7ff f861 	bl	801273c <lv_tick_elaps>
    if(elp >= lv_task_p->period) {
 801367a:	f8da 3000 	ldr.w	r3, [sl]
 801367e:	4298      	cmp	r0, r3
 8013680:	d3ac      	bcc.n	80135dc <lv_task_handler+0x68>
        lv_task_p->last_run = lv_tick_get();
 8013682:	f7ff f851 	bl	8012728 <lv_tick_get>
        lv_task_p->task(lv_task_p->param);
 8013686:	f8da 3008 	ldr.w	r3, [sl, #8]
        lv_task_p->last_run = lv_tick_get();
 801368a:	f8ca 0004 	str.w	r0, [sl, #4]
        lv_task_p->task(lv_task_p->param);
 801368e:	f8da 000c 	ldr.w	r0, [sl, #12]
        task_deleted = false;
 8013692:	f886 9008 	strb.w	r9, [r6, #8]
        task_created = false;
 8013696:	f886 9009 	strb.w	r9, [r6, #9]
        lv_task_p->task(lv_task_p->param);
 801369a:	4798      	blx	r3
        if(task_deleted == false) {			/*The task might be deleted by itself as well*/
 801369c:	7a33      	ldrb	r3, [r6, #8]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d1a4      	bne.n	80135ec <lv_task_handler+0x78>
        	if(lv_task_p->once != 0) {
 80136a2:	f89a 3010 	ldrb.w	r3, [sl, #16]
 80136a6:	071a      	lsls	r2, r3, #28
 80136a8:	d59a      	bpl.n	80135e0 <lv_task_handler+0x6c>
    lv_ll_rem(&LV_GC_ROOT(_lv_task_ll), lv_task_p);
 80136aa:	4651      	mov	r1, sl
 80136ac:	4640      	mov	r0, r8
 80136ae:	f7ff fca3 	bl	8012ff8 <lv_ll_rem>
    lv_mem_free(lv_task_p);
 80136b2:	4650      	mov	r0, sl
 80136b4:	f7ff fdda 	bl	801326c <lv_mem_free>
    if(LV_GC_ROOT(_lv_task_act) == lv_task_p) task_deleted = true;      /*The active task was deleted*/
 80136b8:	683b      	ldr	r3, [r7, #0]
 80136ba:	459a      	cmp	sl, r3
 80136bc:	d18e      	bne.n	80135dc <lv_task_handler+0x68>
 80136be:	2301      	movs	r3, #1
 80136c0:	7233      	strb	r3, [r6, #8]
 80136c2:	e793      	b.n	80135ec <lv_task_handler+0x78>
    uint32_t elp = lv_tick_elaps(lv_task_p->last_run);
 80136c4:	f8da 0004 	ldr.w	r0, [sl, #4]
 80136c8:	f7ff f838 	bl	801273c <lv_tick_elaps>
    if(elp >= lv_task_p->period) {
 80136cc:	f8da 3000 	ldr.w	r3, [sl]
 80136d0:	4298      	cmp	r0, r3
 80136d2:	d383      	bcc.n	80135dc <lv_task_handler+0x68>
        lv_task_p->last_run = lv_tick_get();
 80136d4:	f7ff f828 	bl	8012728 <lv_tick_get>
        lv_task_p->task(lv_task_p->param);
 80136d8:	f8da 3008 	ldr.w	r3, [sl, #8]
        lv_task_p->last_run = lv_tick_get();
 80136dc:	f8ca 0004 	str.w	r0, [sl, #4]
        task_deleted = false;
 80136e0:	7235      	strb	r5, [r6, #8]
        lv_task_p->task(lv_task_p->param);
 80136e2:	f8da 000c 	ldr.w	r0, [sl, #12]
        task_created = false;
 80136e6:	7275      	strb	r5, [r6, #9]
        lv_task_p->task(lv_task_p->param);
 80136e8:	4798      	blx	r3
        if(task_deleted == false) {			/*The task might be deleted by itself as well*/
 80136ea:	7a33      	ldrb	r3, [r6, #8]
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d1ba      	bne.n	8013666 <lv_task_handler+0xf2>
        	if(lv_task_p->once != 0) {
 80136f0:	f89a 3010 	ldrb.w	r3, [sl, #16]
 80136f4:	071b      	lsls	r3, r3, #28
 80136f6:	d5b6      	bpl.n	8013666 <lv_task_handler+0xf2>
    lv_ll_rem(&LV_GC_ROOT(_lv_task_ll), lv_task_p);
 80136f8:	4651      	mov	r1, sl
 80136fa:	4640      	mov	r0, r8
 80136fc:	f7ff fc7c 	bl	8012ff8 <lv_ll_rem>
    lv_mem_free(lv_task_p);
 8013700:	4650      	mov	r0, sl
 8013702:	f7ff fdb3 	bl	801326c <lv_mem_free>
    if(LV_GC_ROOT(_lv_task_act) == lv_task_p) task_deleted = true;      /*The active task was deleted*/
 8013706:	683d      	ldr	r5, [r7, #0]
 8013708:	e746      	b.n	8013598 <lv_task_handler+0x24>
        idle_last = idle_last > 100 ? 0 : 100 - idle_last;                      /*But we need idle time*/
 801370a:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 801370e:	b2db      	uxtb	r3, r3
 8013710:	e784      	b.n	801361c <lv_task_handler+0xa8>
 8013712:	bf00      	nop
 8013714:	200165d0 	.word	0x200165d0
 8013718:	200194d4 	.word	0x200194d4
 801371c:	10624dd3 	.word	0x10624dd3
 8013720:	200194a4 	.word	0x200194a4

08013724 <lv_task_create>:
{
 8013724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013728:	4606      	mov	r6, r0
    tmp = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 801372a:	481e      	ldr	r0, [pc, #120]	; (80137a4 <lv_task_create+0x80>)
{
 801372c:	460f      	mov	r7, r1
 801372e:	4614      	mov	r4, r2
 8013730:	4698      	mov	r8, r3
    tmp = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 8013732:	f7ff fd2d 	bl	8013190 <lv_ll_get_head>
    if(NULL == tmp) {                               /*First task*/
 8013736:	b368      	cbz	r0, 8013794 <lv_task_create+0x70>
 8013738:	4603      	mov	r3, r0
            tmp = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
 801373a:	4d1a      	ldr	r5, [pc, #104]	; (80137a4 <lv_task_create+0x80>)
 801373c:	e003      	b.n	8013746 <lv_task_create+0x22>
 801373e:	f7ff fd2f 	bl	80131a0 <lv_ll_get_next>
        } while(tmp != NULL);
 8013742:	4603      	mov	r3, r0
 8013744:	b1f8      	cbz	r0, 8013786 <lv_task_create+0x62>
            if(tmp->prio <= prio) {
 8013746:	7c1a      	ldrb	r2, [r3, #16]
            tmp = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
 8013748:	4619      	mov	r1, r3
 801374a:	4628      	mov	r0, r5
            if(tmp->prio <= prio) {
 801374c:	f002 0207 	and.w	r2, r2, #7
 8013750:	42a2      	cmp	r2, r4
 8013752:	dcf4      	bgt.n	801373e <lv_task_create+0x1a>
                new_lv_task = lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
 8013754:	4813      	ldr	r0, [pc, #76]	; (80137a4 <lv_task_create+0x80>)
 8013756:	f7ff fbf9 	bl	8012f4c <lv_ll_ins_prev>
                lv_mem_assert(new_lv_task);
 801375a:	4605      	mov	r5, r0
 801375c:	b190      	cbz	r0, 8013784 <lv_task_create+0x60>
    new_lv_task->prio = prio;
 801375e:	7c2b      	ldrb	r3, [r5, #16]
    new_lv_task->period = period;
 8013760:	602f      	str	r7, [r5, #0]
    new_lv_task->prio = prio;
 8013762:	f364 0302 	bfi	r3, r4, #0, #3
    new_lv_task->task = task;
 8013766:	60ae      	str	r6, [r5, #8]
    new_lv_task->param = param;
 8013768:	f8c5 800c 	str.w	r8, [r5, #12]
    new_lv_task->once = 0;
 801376c:	f36f 03c3 	bfc	r3, #3, #1
 8013770:	742b      	strb	r3, [r5, #16]
    new_lv_task->last_run = lv_tick_get();
 8013772:	f7fe ffd9 	bl	8012728 <lv_tick_get>
    task_created = true;
 8013776:	4b0c      	ldr	r3, [pc, #48]	; (80137a8 <lv_task_create+0x84>)
 8013778:	2201      	movs	r2, #1
    new_lv_task->last_run = lv_tick_get();
 801377a:	6068      	str	r0, [r5, #4]
}
 801377c:	4628      	mov	r0, r5
    task_created = true;
 801377e:	725a      	strb	r2, [r3, #9]
}
 8013780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013784:	e7fe      	b.n	8013784 <lv_task_create+0x60>
            new_lv_task = lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
 8013786:	4807      	ldr	r0, [pc, #28]	; (80137a4 <lv_task_create+0x80>)
 8013788:	f7ff fc1c 	bl	8012fc4 <lv_ll_ins_tail>
            lv_mem_assert(new_lv_task);
 801378c:	4605      	mov	r5, r0
 801378e:	2800      	cmp	r0, #0
 8013790:	d1e5      	bne.n	801375e <lv_task_create+0x3a>
 8013792:	e7fe      	b.n	8013792 <lv_task_create+0x6e>
        new_lv_task = lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
 8013794:	4803      	ldr	r0, [pc, #12]	; (80137a4 <lv_task_create+0x80>)
 8013796:	f7ff fbbd 	bl	8012f14 <lv_ll_ins_head>
        lv_mem_assert(new_lv_task);
 801379a:	4605      	mov	r5, r0
 801379c:	2800      	cmp	r0, #0
 801379e:	d1de      	bne.n	801375e <lv_task_create+0x3a>
 80137a0:	e7fe      	b.n	80137a0 <lv_task_create+0x7c>
 80137a2:	bf00      	nop
 80137a4:	200194a4 	.word	0x200194a4
 80137a8:	200165d0 	.word	0x200165d0

080137ac <lv_task_ready>:
{
 80137ac:	b510      	push	{r4, lr}
 80137ae:	4604      	mov	r4, r0
    lv_task_p->last_run = lv_tick_get() - lv_task_p->period - 1;
 80137b0:	f7fe ffba 	bl	8012728 <lv_tick_get>
 80137b4:	6823      	ldr	r3, [r4, #0]
 80137b6:	43db      	mvns	r3, r3
 80137b8:	4403      	add	r3, r0
 80137ba:	6063      	str	r3, [r4, #4]
 80137bc:	bd10      	pop	{r4, pc}
 80137be:	bf00      	nop

080137c0 <lv_txt_utf8_size>:
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4). O on invalid code
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
    if((str[0] & 0x80) == 0) return 1;
 80137c0:	7803      	ldrb	r3, [r0, #0]
 80137c2:	061a      	lsls	r2, r3, #24
 80137c4:	d401      	bmi.n	80137ca <lv_txt_utf8_size+0xa>
 80137c6:	2001      	movs	r0, #1
 80137c8:	4770      	bx	lr
    else if((str[0] & 0xE0) == 0xC0) return 2;
 80137ca:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
 80137ce:	2ac0      	cmp	r2, #192	; 0xc0
 80137d0:	d00c      	beq.n	80137ec <lv_txt_utf8_size+0x2c>
    else if((str[0] & 0xF0) == 0xE0) return 3;
 80137d2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80137d6:	2ae0      	cmp	r2, #224	; 0xe0
 80137d8:	d006      	beq.n	80137e8 <lv_txt_utf8_size+0x28>
    else if((str[0] & 0xF8) == 0xF0) return 4;
 80137da:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80137de:	2bf0      	cmp	r3, #240	; 0xf0
    return 0;
 80137e0:	bf0c      	ite	eq
 80137e2:	2004      	moveq	r0, #4
 80137e4:	2000      	movne	r0, #0
 80137e6:	4770      	bx	lr
    else if((str[0] & 0xF0) == 0xE0) return 3;
 80137e8:	2003      	movs	r0, #3
}
 80137ea:	4770      	bx	lr
    else if((str[0] & 0xE0) == 0xC0) return 2;
 80137ec:	2002      	movs	r0, #2
 80137ee:	4770      	bx	lr

080137f0 <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
 80137f0:	b470      	push	{r4, r5, r6}
     * */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 80137f2:	2300      	movs	r3, #0
{
 80137f4:	b083      	sub	sp, #12
    uint32_t i_tmp = 0;
 80137f6:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
 80137f8:	b321      	cbz	r1, 8013844 <lv_txt_utf8_next+0x54>
 80137fa:	680a      	ldr	r2, [r1, #0]
 80137fc:	1c54      	adds	r4, r2, #1

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
 80137fe:	5c83      	ldrb	r3, [r0, r2]
 8013800:	061d      	lsls	r5, r3, #24
 8013802:	d404      	bmi.n	801380e <lv_txt_utf8_next+0x1e>
        result = txt[*i];
 8013804:	4618      	mov	r0, r3
        (*i)++;
 8013806:	600c      	str	r4, [r1, #0]
        } else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
 8013808:	b003      	add	sp, #12
 801380a:	bc70      	pop	{r4, r5, r6}
 801380c:	4770      	bx	lr
        if((txt[*i] & 0xE0) == 0xC0) {
 801380e:	f003 05e0 	and.w	r5, r3, #224	; 0xe0
 8013812:	2dc0      	cmp	r5, #192	; 0xc0
 8013814:	d01a      	beq.n	801384c <lv_txt_utf8_next+0x5c>
        else if((txt[*i] & 0xF0) == 0xE0) {
 8013816:	f003 05f0 	and.w	r5, r3, #240	; 0xf0
 801381a:	2de0      	cmp	r5, #224	; 0xe0
 801381c:	d008      	beq.n	8013830 <lv_txt_utf8_next+0x40>
        else if((txt[*i] & 0xF8) == 0xF0) {
 801381e:	f003 05f8 	and.w	r5, r3, #248	; 0xf8
 8013822:	2df0      	cmp	r5, #240	; 0xf0
 8013824:	d021      	beq.n	801386a <lv_txt_utf8_next+0x7a>
    uint32_t result = 0;
 8013826:	2000      	movs	r0, #0
            (*i)++; /*Not UTF-8 char. Go the next.*/
 8013828:	600c      	str	r4, [r1, #0]
}
 801382a:	b003      	add	sp, #12
 801382c:	bc70      	pop	{r4, r5, r6}
 801382e:	4770      	bx	lr
            (*i)++;
 8013830:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0;  /*Invalid UTF-8 code*/
 8013832:	5d04      	ldrb	r4, [r0, r4]
 8013834:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
 8013838:	2d80      	cmp	r5, #128	; 0x80
 801383a:	d03b      	beq.n	80138b4 <lv_txt_utf8_next+0xc4>
            if((txt[*i] & 0xC0) != 0x80) return 0;  /*Invalid UTF-8 code*/
 801383c:	2000      	movs	r0, #0
}
 801383e:	b003      	add	sp, #12
 8013840:	bc70      	pop	{r4, r5, r6}
 8013842:	4770      	bx	lr
 8013844:	460a      	mov	r2, r1
 8013846:	2401      	movs	r4, #1
    if(i == NULL) i = &i_tmp;
 8013848:	a901      	add	r1, sp, #4
 801384a:	e7d8      	b.n	80137fe <lv_txt_utf8_next+0xe>
            (*i)++;
 801384c:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0;  /*Invalid UTF-8 code*/
 801384e:	5d00      	ldrb	r0, [r0, r4]
 8013850:	f000 04c0 	and.w	r4, r0, #192	; 0xc0
 8013854:	2c80      	cmp	r4, #128	; 0x80
 8013856:	d1f1      	bne.n	801383c <lv_txt_utf8_next+0x4c>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 8013858:	019b      	lsls	r3, r3, #6
            result += (txt[*i] & 0x3F);
 801385a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            (*i)++;
 801385e:	3202      	adds	r2, #2
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 8013860:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
            (*i)++;
 8013864:	600a      	str	r2, [r1, #0]
            result += (txt[*i] & 0x3F);
 8013866:	4418      	add	r0, r3
 8013868:	e7ce      	b.n	8013808 <lv_txt_utf8_next+0x18>
            (*i)++;
 801386a:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0;  /*Invalid UTF-8 code*/
 801386c:	5d04      	ldrb	r4, [r0, r4]
 801386e:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
 8013872:	2d80      	cmp	r5, #128	; 0x80
 8013874:	d1e2      	bne.n	801383c <lv_txt_utf8_next+0x4c>
            (*i)++;
 8013876:	1c95      	adds	r5, r2, #2
 8013878:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0;  /*Invalid UTF-8 code*/
 801387a:	5d45      	ldrb	r5, [r0, r5]
 801387c:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
 8013880:	2e80      	cmp	r6, #128	; 0x80
 8013882:	d1db      	bne.n	801383c <lv_txt_utf8_next+0x4c>
            (*i)++;
 8013884:	1cd6      	adds	r6, r2, #3
 8013886:	600e      	str	r6, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0;  /*Invalid UTF-8 code*/
 8013888:	5d80      	ldrb	r0, [r0, r6]
 801388a:	f000 06c0 	and.w	r6, r0, #192	; 0xc0
 801388e:	2e80      	cmp	r6, #128	; 0x80
 8013890:	d1d4      	bne.n	801383c <lv_txt_utf8_next+0x4c>
            result += txt[*i] & 0x3F;
 8013892:	f000 063f 	and.w	r6, r0, #63	; 0x3f
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 8013896:	049b      	lsls	r3, r3, #18
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 8013898:	0320      	lsls	r0, r4, #12
            (*i)++;
 801389a:	3204      	adds	r2, #4
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 801389c:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 80138a0:	01ad      	lsls	r5, r5, #6
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 80138a2:	f400 307c 	and.w	r0, r0, #258048	; 0x3f000
            (*i)++;
 80138a6:	600a      	str	r2, [r1, #0]
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 80138a8:	f405 627c 	and.w	r2, r5, #4032	; 0xfc0
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 80138ac:	4303      	orrs	r3, r0
 80138ae:	4413      	add	r3, r2
            result += txt[*i] & 0x3F;
 80138b0:	18f0      	adds	r0, r6, r3
 80138b2:	e7a9      	b.n	8013808 <lv_txt_utf8_next+0x18>
            (*i)++;
 80138b4:	1c95      	adds	r5, r2, #2
 80138b6:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0;  /*Invalid UTF-8 code*/
 80138b8:	5d40      	ldrb	r0, [r0, r5]
 80138ba:	f000 05c0 	and.w	r5, r0, #192	; 0xc0
 80138be:	2d80      	cmp	r5, #128	; 0x80
 80138c0:	d1bc      	bne.n	801383c <lv_txt_utf8_next+0x4c>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 80138c2:	031b      	lsls	r3, r3, #12
            result += (txt[*i] & 0x3F);
 80138c4:	f000 053f 	and.w	r5, r0, #63	; 0x3f
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 80138c8:	01a0      	lsls	r0, r4, #6
            (*i)++;
 80138ca:	3203      	adds	r2, #3
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 80138cc:	b29b      	uxth	r3, r3
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 80138ce:	f400 607c 	and.w	r0, r0, #4032	; 0xfc0
            (*i)++;
 80138d2:	600a      	str	r2, [r1, #0]
 80138d4:	442b      	add	r3, r5
            result += (txt[*i] & 0x3F);
 80138d6:	4418      	add	r0, r3
 80138d8:	e796      	b.n	8013808 <lv_txt_utf8_next+0x18>
 80138da:	bf00      	nop

080138dc <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
 80138dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t i;
    uint32_t byte_cnt = 0;
    for(i = 0; i < utf8_id; i++) {
 80138e0:	b181      	cbz	r1, 8013904 <lv_txt_utf8_get_byte_id+0x28>
 80138e2:	2400      	movs	r4, #0
 80138e4:	460e      	mov	r6, r1
 80138e6:	4607      	mov	r7, r0
 80138e8:	f8df 801c 	ldr.w	r8, [pc, #28]	; 8013908 <lv_txt_utf8_get_byte_id+0x2c>
 80138ec:	4625      	mov	r5, r4
 80138ee:	3501      	adds	r5, #1
        byte_cnt += lv_txt_encoded_size(&txt[byte_cnt]);
 80138f0:	1938      	adds	r0, r7, r4
 80138f2:	f8d8 3000 	ldr.w	r3, [r8]
 80138f6:	4798      	blx	r3
    for(i = 0; i < utf8_id; i++) {
 80138f8:	42ae      	cmp	r6, r5
        byte_cnt += lv_txt_encoded_size(&txt[byte_cnt]);
 80138fa:	4404      	add	r4, r0
    for(i = 0; i < utf8_id; i++) {
 80138fc:	d1f7      	bne.n	80138ee <lv_txt_utf8_get_byte_id+0x12>
    }

    return byte_cnt;

}
 80138fe:	4620      	mov	r0, r4
 8013900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t byte_cnt = 0;
 8013904:	460c      	mov	r4, r1
    return byte_cnt;
 8013906:	e7fa      	b.n	80138fe <lv_txt_utf8_get_byte_id+0x22>
 8013908:	200002dc 	.word	0x200002dc

0801390c <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 801390c:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t i = 0;
 801390e:	2400      	movs	r4, #0
{
 8013910:	b083      	sub	sp, #12
    uint32_t i = 0;
 8013912:	9401      	str	r4, [sp, #4]
    uint32_t char_cnt = 0;

    while(i < byte_id) {
 8013914:	b169      	cbz	r1, 8013932 <lv_txt_utf8_get_char_id+0x26>
 8013916:	460d      	mov	r5, r1
 8013918:	4606      	mov	r6, r0
 801391a:	4f07      	ldr	r7, [pc, #28]	; (8013938 <lv_txt_utf8_get_char_id+0x2c>)
        lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	a901      	add	r1, sp, #4
 8013920:	4630      	mov	r0, r6
        char_cnt++;
 8013922:	3401      	adds	r4, #1
        lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 8013924:	4798      	blx	r3
    while(i < byte_id) {
 8013926:	9b01      	ldr	r3, [sp, #4]
 8013928:	42ab      	cmp	r3, r5
 801392a:	d3f7      	bcc.n	801391c <lv_txt_utf8_get_char_id+0x10>
    }

    return char_cnt;
}
 801392c:	4620      	mov	r0, r4
 801392e:	b003      	add	sp, #12
 8013930:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t char_cnt = 0;
 8013932:	460c      	mov	r4, r1
    return char_cnt;
 8013934:	e7fa      	b.n	801392c <lv_txt_utf8_get_char_id+0x20>
 8013936:	bf00      	nop
 8013938:	200002dc 	.word	0x200002dc

0801393c <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
 801393c:	b570      	push	{r4, r5, r6, lr}
#if LV_TXT_UTF8 == 0
    return strlen(txt);
#else
    uint32_t len = 0;
    uint32_t i = 0;
 801393e:	2400      	movs	r4, #0
{
 8013940:	b082      	sub	sp, #8

    while(txt[i] != '\0') {
 8013942:	7803      	ldrb	r3, [r0, #0]
    uint32_t i = 0;
 8013944:	9401      	str	r4, [sp, #4]
    while(txt[i] != '\0') {
 8013946:	b16b      	cbz	r3, 8013964 <lv_txt_utf8_get_length+0x28>
 8013948:	4605      	mov	r5, r0
 801394a:	4e07      	ldr	r6, [pc, #28]	; (8013968 <lv_txt_utf8_get_length+0x2c>)
        lv_txt_encoded_next(txt, &i);
 801394c:	6873      	ldr	r3, [r6, #4]
 801394e:	a901      	add	r1, sp, #4
 8013950:	4628      	mov	r0, r5
        len++;
 8013952:	3401      	adds	r4, #1
        lv_txt_encoded_next(txt, &i);
 8013954:	4798      	blx	r3
    while(txt[i] != '\0') {
 8013956:	9b01      	ldr	r3, [sp, #4]
 8013958:	5ceb      	ldrb	r3, [r5, r3]
 801395a:	2b00      	cmp	r3, #0
 801395c:	d1f6      	bne.n	801394c <lv_txt_utf8_get_length+0x10>
    }

    return len;
#endif
}
 801395e:	4620      	mov	r0, r4
 8013960:	b002      	add	sp, #8
 8013962:	bd70      	pop	{r4, r5, r6, pc}
    uint32_t len = 0;
 8013964:	461c      	mov	r4, r3
    return len;
 8013966:	e7fa      	b.n	801395e <lv_txt_utf8_get_length+0x22>
 8013968:	200002dc 	.word	0x200002dc

0801396c <lv_txt_unicode_to_utf8>:
    if(letter_uni < 128) return letter_uni;
 801396c:	287f      	cmp	r0, #127	; 0x7f
 801396e:	d915      	bls.n	801399c <lv_txt_unicode_to_utf8+0x30>
    if(letter_uni < 0x0800) {
 8013970:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
{
 8013974:	b082      	sub	sp, #8
    if(letter_uni < 0x0800) {
 8013976:	d212      	bcs.n	801399e <lv_txt_unicode_to_utf8+0x32>
        bytes[0] = ((letter_uni >> 6)  & 0x1F) | 0xC0;
 8013978:	0983      	lsrs	r3, r0, #6
        bytes[1] = ((letter_uni >> 0)  & 0x3F) | 0x80;
 801397a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        bytes[2] = 0;
 801397e:	2200      	movs	r2, #0
        bytes[0] = ((letter_uni >> 6)  & 0x1F) | 0xC0;
 8013980:	f063 033f 	orn	r3, r3, #63	; 0x3f
        bytes[1] = ((letter_uni >> 0)  & 0x3F) | 0x80;
 8013984:	f060 007f 	orn	r0, r0, #127	; 0x7f
        bytes[2] = 0;
 8013988:	f88d 2006 	strb.w	r2, [sp, #6]
        bytes[0] = ((letter_uni >> 6)  & 0x1F) | 0xC0;
 801398c:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 0)  & 0x3F) | 0x80;
 8013990:	f88d 0005 	strb.w	r0, [sp, #5]
        bytes[3] = 0;
 8013994:	f88d 2007 	strb.w	r2, [sp, #7]
    return *res_p;
 8013998:	9801      	ldr	r0, [sp, #4]
}
 801399a:	b002      	add	sp, #8
 801399c:	4770      	bx	lr
    } else if(letter_uni < 0x010000) {
 801399e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80139a2:	d31a      	bcc.n	80139da <lv_txt_unicode_to_utf8+0x6e>
    } else if(letter_uni < 0x110000) {
 80139a4:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
 80139a8:	d2f6      	bcs.n	8013998 <lv_txt_unicode_to_utf8+0x2c>
        bytes[0] = ((letter_uni >> 18) & 0x07) | 0xF0;
 80139aa:	0c81      	lsrs	r1, r0, #18
        bytes[1] = ((letter_uni >> 12) & 0x3F) | 0x80;
 80139ac:	f3c0 3205 	ubfx	r2, r0, #12, #6
        bytes[2] = ((letter_uni >> 6)  & 0x3F) | 0x80;
 80139b0:	f3c0 1385 	ubfx	r3, r0, #6, #6
        bytes[3] = ((letter_uni >> 0)  & 0x3F) | 0x80;
 80139b4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        bytes[0] = ((letter_uni >> 18) & 0x07) | 0xF0;
 80139b8:	f061 010f 	orn	r1, r1, #15
        bytes[1] = ((letter_uni >> 12) & 0x3F) | 0x80;
 80139bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
        bytes[2] = ((letter_uni >> 6)  & 0x3F) | 0x80;
 80139c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
        bytes[3] = ((letter_uni >> 0)  & 0x3F) | 0x80;
 80139c4:	f060 007f 	orn	r0, r0, #127	; 0x7f
        bytes[0] = ((letter_uni >> 18) & 0x07) | 0xF0;
 80139c8:	f88d 1004 	strb.w	r1, [sp, #4]
        bytes[1] = ((letter_uni >> 12) & 0x3F) | 0x80;
 80139cc:	f88d 2005 	strb.w	r2, [sp, #5]
        bytes[2] = ((letter_uni >> 6)  & 0x3F) | 0x80;
 80139d0:	f88d 3006 	strb.w	r3, [sp, #6]
        bytes[3] = ((letter_uni >> 0)  & 0x3F) | 0x80;
 80139d4:	f88d 0007 	strb.w	r0, [sp, #7]
 80139d8:	e7de      	b.n	8013998 <lv_txt_unicode_to_utf8+0x2c>
        bytes[0] = ((letter_uni >> 12) & 0x0F) | 0xE0;
 80139da:	0b02      	lsrs	r2, r0, #12
        bytes[1] = ((letter_uni >> 6)  & 0x3F) | 0x80;
 80139dc:	f3c0 1385 	ubfx	r3, r0, #6, #6
        bytes[2] = ((letter_uni >> 0)  & 0x3F) | 0x80;
 80139e0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        bytes[3] = 0;
 80139e4:	2100      	movs	r1, #0
        bytes[0] = ((letter_uni >> 12) & 0x0F) | 0xE0;
 80139e6:	f062 021f 	orn	r2, r2, #31
        bytes[1] = ((letter_uni >> 6)  & 0x3F) | 0x80;
 80139ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
        bytes[2] = ((letter_uni >> 0)  & 0x3F) | 0x80;
 80139ee:	f060 007f 	orn	r0, r0, #127	; 0x7f
        bytes[3] = 0;
 80139f2:	f88d 1007 	strb.w	r1, [sp, #7]
        bytes[0] = ((letter_uni >> 12) & 0x0F) | 0xE0;
 80139f6:	f88d 2004 	strb.w	r2, [sp, #4]
        bytes[1] = ((letter_uni >> 6)  & 0x3F) | 0x80;
 80139fa:	f88d 3005 	strb.w	r3, [sp, #5]
        bytes[2] = ((letter_uni >> 0)  & 0x3F) | 0x80;
 80139fe:	f88d 0006 	strb.w	r0, [sp, #6]
 8013a02:	e7c9      	b.n	8013998 <lv_txt_unicode_to_utf8+0x2c>

08013a04 <lv_txt_utf8_conv_wc>:
    if((c & 0x80) != 0) {
 8013a04:	0603      	lsls	r3, r0, #24
{
 8013a06:	b082      	sub	sp, #8
    if((c & 0x80) != 0) {
 8013a08:	d51e      	bpl.n	8013a48 <lv_txt_utf8_conv_wc+0x44>
        swapped = (c8[0] << 24) + (c8[1] << 16) + (c8[2] << 8) + (c8[3]);
 8013a0a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8013a0e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8013a12:	041b      	lsls	r3, r3, #16
 8013a14:	eb03 6300 	add.w	r3, r3, r0, lsl #24
 8013a18:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8013a1c:	eb03 6010 	add.w	r0, r3, r0, lsr #24
            if((swapped & 0xFF) == 0) swapped = (swapped >> 8); /*Ignore leading zeros (they were in the end originally)*/
 8013a20:	b2c2      	uxtb	r2, r0
 8013a22:	0a03      	lsrs	r3, r0, #8
 8013a24:	2a00      	cmp	r2, #0
 8013a26:	bf08      	it	eq
 8013a28:	4618      	moveq	r0, r3
 8013a2a:	b2c2      	uxtb	r2, r0
 8013a2c:	0a03      	lsrs	r3, r0, #8
 8013a2e:	2a00      	cmp	r2, #0
 8013a30:	bf08      	it	eq
 8013a32:	4618      	moveq	r0, r3
 8013a34:	b2c2      	uxtb	r2, r0
 8013a36:	0a03      	lsrs	r3, r0, #8
 8013a38:	2a00      	cmp	r2, #0
 8013a3a:	bf18      	it	ne
 8013a3c:	4603      	movne	r3, r0
 8013a3e:	b2da      	uxtb	r2, r3
 8013a40:	0a18      	lsrs	r0, r3, #8
 8013a42:	2a00      	cmp	r2, #0
 8013a44:	bf18      	it	ne
 8013a46:	4618      	movne	r0, r3
}
 8013a48:	b002      	add	sp, #8
 8013a4a:	4770      	bx	lr

08013a4c <lv_txt_utf8_prev>:
{
 8013a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a4e:	4606      	mov	r6, r0
    (*i)--;
 8013a50:	6808      	ldr	r0, [r1, #0]
{
 8013a52:	b083      	sub	sp, #12
 8013a54:	460d      	mov	r5, r1
    (*i)--;
 8013a56:	3801      	subs	r0, #1
 8013a58:	2404      	movs	r4, #4
 8013a5a:	4f0c      	ldr	r7, [pc, #48]	; (8013a8c <lv_txt_utf8_prev+0x40>)
 8013a5c:	6008      	str	r0, [r1, #0]
        c_size = lv_txt_encoded_size(&txt[*i]);
 8013a5e:	683b      	ldr	r3, [r7, #0]
 8013a60:	4430      	add	r0, r6
 8013a62:	4798      	blx	r3
 8013a64:	1e63      	subs	r3, r4, #1
            if(*i != 0)(*i)--;
 8013a66:	682a      	ldr	r2, [r5, #0]
        if(c_size == 0) {
 8013a68:	b940      	cbnz	r0, 8013a7c <lv_txt_utf8_prev+0x30>
            if(*i != 0)(*i)--;
 8013a6a:	1e50      	subs	r0, r2, #1
 8013a6c:	b11a      	cbz	r2, 8013a76 <lv_txt_utf8_prev+0x2a>
        if(cnt >= 4) return 0;      /*No UTF-8 char found before the initial*/
 8013a6e:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
            if(*i != 0)(*i)--;
 8013a72:	6028      	str	r0, [r5, #0]
        if(cnt >= 4) return 0;      /*No UTF-8 char found before the initial*/
 8013a74:	d1f3      	bne.n	8013a5e <lv_txt_utf8_prev+0x12>
            else return 0;
 8013a76:	2000      	movs	r0, #0
}
 8013a78:	b003      	add	sp, #12
 8013a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t i_tmp = *i;
 8013a7c:	a902      	add	r1, sp, #8
    uint32_t letter = lv_txt_encoded_next(txt, &i_tmp);   /*Character found, get it*/
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	4630      	mov	r0, r6
    uint32_t i_tmp = *i;
 8013a82:	f841 2d04 	str.w	r2, [r1, #-4]!
    uint32_t letter = lv_txt_encoded_next(txt, &i_tmp);   /*Character found, get it*/
 8013a86:	4798      	blx	r3
}
 8013a88:	b003      	add	sp, #12
 8013a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a8c:	200002dc 	.word	0x200002dc

08013a90 <lv_txt_get_next_line>:
{
 8013a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a94:	b089      	sub	sp, #36	; 0x24
 8013a96:	469a      	mov	sl, r3
 8013a98:	9203      	str	r2, [sp, #12]
 8013a9a:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    if(font == NULL) return 0;
 8013a9e:	9100      	str	r1, [sp, #0]
 8013aa0:	2900      	cmp	r1, #0
 8013aa2:	f000 8120 	beq.w	8013ce6 <lv_txt_get_next_line+0x256>
 8013aa6:	fab0 f380 	clz	r3, r0
 8013aaa:	4606      	mov	r6, r0
 8013aac:	095b      	lsrs	r3, r3, #5
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	f040 8119 	bne.w	8013ce6 <lv_txt_get_next_line+0x256>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8013ab4:	f018 0f02 	tst.w	r8, #2
 8013ab8:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8013abc:	f008 0801 	and.w	r8, r8, #1
    while(txt[i] != '\0') {
 8013ac0:	4618      	mov	r0, r3
    uint32_t i = 0;
 8013ac2:	9306      	str	r3, [sp, #24]
    uint32_t n_char_since_last_break = 0; /* Used count word length of long words */
 8013ac4:	461f      	mov	r7, r3
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 8013ac6:	9302      	str	r3, [sp, #8]
    lv_coord_t cur_w = 0;
 8013ac8:	461d      	mov	r5, r3
    lv_coord_t w_at_last_break = 0;
 8013aca:	9304      	str	r3, [sp, #16]
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8013acc:	bf18      	it	ne
 8013ace:	468a      	movne	sl, r1
    uint32_t last_break = NO_BREAK_FOUND;
 8013ad0:	f04f 33ff 	mov.w	r3, #4294967295
        letter = lv_txt_encoded_next(txt, &i);
 8013ad4:	f8df 9234 	ldr.w	r9, [pc, #564]	; 8013d0c <lv_txt_get_next_line+0x27c>
{
    uint8_t i;
    bool ret = false;

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 8013ad8:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8013d08 <lv_txt_get_next_line+0x278>
 8013adc:	4644      	mov	r4, r8
    uint32_t last_break = NO_BREAK_FOUND;
 8013ade:	9301      	str	r3, [sp, #4]
    while(txt[i] != '\0') {
 8013ae0:	5c33      	ldrb	r3, [r6, r0]
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d03a      	beq.n	8013b5c <lv_txt_get_next_line+0xcc>
        letter = lv_txt_encoded_next(txt, &i);
 8013ae6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013aea:	4630      	mov	r0, r6
 8013aec:	a906      	add	r1, sp, #24
 8013aee:	4798      	blx	r3
 8013af0:	4680      	mov	r8, r0
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8013af2:	b124      	cbz	r4, 8013afe <lv_txt_get_next_line+0x6e>
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8013af4:	2823      	cmp	r0, #35	; 0x23
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 8013af6:	9b02      	ldr	r3, [sp, #8]
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8013af8:	d03f      	beq.n	8013b7a <lv_txt_get_next_line+0xea>
    if(*state == LV_TXT_CMD_STATE_PAR) {
 8013afa:	2b01      	cmp	r3, #1
 8013afc:	d049      	beq.n	8013b92 <lv_txt_get_next_line+0x102>
        if(letter == '\n' || letter == '\r') {
 8013afe:	f1a8 020d 	sub.w	r2, r8, #13
 8013b02:	f1b8 0f0a 	cmp.w	r8, #10
 8013b06:	fab2 f282 	clz	r2, r2
 8013b0a:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8013b0e:	d05e      	beq.n	8013bce <lv_txt_get_next_line+0x13e>
 8013b10:	2a00      	cmp	r2, #0
 8013b12:	d15c      	bne.n	8013bce <lv_txt_get_next_line+0x13e>
            letter_width = lv_font_get_width(font, letter);
 8013b14:	4641      	mov	r1, r8
 8013b16:	9800      	ldr	r0, [sp, #0]
 8013b18:	f7ff f8e4 	bl	8012ce4 <lv_font_get_width>
            cur_w += letter_width; 
 8013b1c:	4405      	add	r5, r0
            n_char_since_last_break++;
 8013b1e:	1c7a      	adds	r2, r7, #1
            letter_width = lv_font_get_width(font, letter);
 8013b20:	b200      	sxth	r0, r0
            cur_w += letter_width; 
 8013b22:	fa1f fe85 	uxth.w	lr, r5
 8013b26:	fa0f f58e 	sxth.w	r5, lr
            if(cur_w > max_width) {
 8013b2a:	45aa      	cmp	sl, r5
 8013b2c:	db5f      	blt.n	8013bee <lv_txt_get_next_line+0x15e>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 8013b2e:	f1b8 0f20 	cmp.w	r8, #32
 8013b32:	d017      	beq.n	8013b64 <lv_txt_get_next_line+0xd4>
            if(cur_w > max_width) {
 8013b34:	2301      	movs	r3, #1
 8013b36:	212c      	movs	r1, #44	; 0x2c
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 8013b38:	3301      	adds	r3, #1
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 8013b3a:	4588      	cmp	r8, r1
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 8013b3c:	b2db      	uxtb	r3, r3
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 8013b3e:	d011      	beq.n	8013b64 <lv_txt_get_next_line+0xd4>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 8013b40:	f81b 1003 	ldrb.w	r1, [fp, r3]
 8013b44:	2900      	cmp	r1, #0
 8013b46:	d1f7      	bne.n	8013b38 <lv_txt_get_next_line+0xa8>
        if(letter_width > 0) {
 8013b48:	b1e0      	cbz	r0, 8013b84 <lv_txt_get_next_line+0xf4>
 8013b4a:	9b03      	ldr	r3, [sp, #12]
 8013b4c:	4617      	mov	r7, r2
 8013b4e:	9806      	ldr	r0, [sp, #24]
 8013b50:	eb0e 0503 	add.w	r5, lr, r3
    while(txt[i] != '\0') {
 8013b54:	5c33      	ldrb	r3, [r6, r0]
 8013b56:	b22d      	sxth	r5, r5
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d1c4      	bne.n	8013ae6 <lv_txt_get_next_line+0x56>
    return i;
 8013b5c:	b280      	uxth	r0, r0
}
 8013b5e:	b009      	add	sp, #36	; 0x24
 8013b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                last_break = i; /*Save the first char index  after break*/
 8013b64:	9b06      	ldr	r3, [sp, #24]
 8013b66:	9301      	str	r3, [sp, #4]
                if(letter_width > 0) {
 8013b68:	b178      	cbz	r0, 8013b8a <lv_txt_get_next_line+0xfa>
 8013b6a:	4618      	mov	r0, r3
                    w_at_last_break += letter_space;
 8013b6c:	9b03      	ldr	r3, [sp, #12]
                n_char_since_last_break = 0;
 8013b6e:	2700      	movs	r7, #0
                    w_at_last_break += letter_space;
 8013b70:	eb0e 0503 	add.w	r5, lr, r3
 8013b74:	b22d      	sxth	r5, r5
 8013b76:	9504      	str	r5, [sp, #16]
 8013b78:	e7b2      	b.n	8013ae0 <lv_txt_get_next_line+0x50>
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 8013b7a:	b98b      	cbnz	r3, 8013ba0 <lv_txt_get_next_line+0x110>
 8013b7c:	2301      	movs	r3, #1
 8013b7e:	9806      	ldr	r0, [sp, #24]
 8013b80:	9302      	str	r3, [sp, #8]
 8013b82:	e7ad      	b.n	8013ae0 <lv_txt_get_next_line+0x50>
        if(letter_width > 0) {
 8013b84:	4617      	mov	r7, r2
 8013b86:	9806      	ldr	r0, [sp, #24]
 8013b88:	e7aa      	b.n	8013ae0 <lv_txt_get_next_line+0x50>
                n_char_since_last_break = 0;
 8013b8a:	4607      	mov	r7, r0
 8013b8c:	9504      	str	r5, [sp, #16]
 8013b8e:	4618      	mov	r0, r3
 8013b90:	e7a6      	b.n	8013ae0 <lv_txt_get_next_line+0x50>
        if(c == ' ') {
 8013b92:	f1b8 0f20 	cmp.w	r8, #32
 8013b96:	9806      	ldr	r0, [sp, #24]
 8013b98:	d1a2      	bne.n	8013ae0 <lv_txt_get_next_line+0x50>
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 8013b9a:	2302      	movs	r3, #2
 8013b9c:	9302      	str	r3, [sp, #8]
 8013b9e:	e79f      	b.n	8013ae0 <lv_txt_get_next_line+0x50>
            if(lv_txt_is_cmd(&cmd_state, letter) != false) {
 8013ba0:	2b01      	cmp	r3, #1
 8013ba2:	d110      	bne.n	8013bc6 <lv_txt_get_next_line+0x136>
            letter_width = lv_font_get_width(font, letter);
 8013ba4:	4601      	mov	r1, r0
 8013ba6:	9800      	ldr	r0, [sp, #0]
 8013ba8:	f7ff f89c 	bl	8012ce4 <lv_font_get_width>
            cur_w += letter_width; 
 8013bac:	4405      	add	r5, r0
            n_char_since_last_break++;
 8013bae:	1c7a      	adds	r2, r7, #1
            letter_width = lv_font_get_width(font, letter);
 8013bb0:	b200      	sxth	r0, r0
            cur_w += letter_width; 
 8013bb2:	fa1f fe85 	uxth.w	lr, r5
 8013bb6:	fa0f f58e 	sxth.w	r5, lr
            if(cur_w > max_width) {
 8013bba:	45aa      	cmp	sl, r5
 8013bbc:	f2c0 809f 	blt.w	8013cfe <lv_txt_get_next_line+0x26e>
 8013bc0:	2300      	movs	r3, #0
 8013bc2:	9302      	str	r3, [sp, #8]
 8013bc4:	e7b6      	b.n	8013b34 <lv_txt_get_next_line+0xa4>
            if(lv_txt_is_cmd(&cmd_state, letter) != false) {
 8013bc6:	2300      	movs	r3, #0
 8013bc8:	9806      	ldr	r0, [sp, #24]
 8013bca:	9302      	str	r3, [sp, #8]
 8013bcc:	e788      	b.n	8013ae0 <lv_txt_get_next_line+0x50>
            uint32_t i_tmp = i;
 8013bce:	9c06      	ldr	r4, [sp, #24]
 8013bd0:	a908      	add	r1, sp, #32
            uint32_t letter_next = lv_txt_encoded_next(txt, &i_tmp);
 8013bd2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013bd6:	4630      	mov	r0, r6
            uint32_t i_tmp = i;
 8013bd8:	f841 4d04 	str.w	r4, [r1, #-4]!
 8013bdc:	9200      	str	r2, [sp, #0]
            uint32_t letter_next = lv_txt_encoded_next(txt, &i_tmp);
 8013bde:	4798      	blx	r3
            if(letter == '\r' &&  letter_next == '\n') i = i_tmp;
 8013be0:	280a      	cmp	r0, #10
 8013be2:	d16e      	bne.n	8013cc2 <lv_txt_get_next_line+0x232>
 8013be4:	9a00      	ldr	r2, [sp, #0]
 8013be6:	2a00      	cmp	r2, #0
 8013be8:	d06b      	beq.n	8013cc2 <lv_txt_get_next_line+0x232>
 8013bea:	9807      	ldr	r0, [sp, #28]
 8013bec:	e7b6      	b.n	8013b5c <lv_txt_get_next_line+0xcc>
 8013bee:	46a0      	mov	r8, r4
                if( last_break != NO_BREAK_FOUND ) {
 8013bf0:	9901      	ldr	r1, [sp, #4]
 8013bf2:	1c48      	adds	r0, r1, #1
 8013bf4:	d04a      	beq.n	8013c8c <lv_txt_get_next_line+0x1fc>
                    if(  n_char_since_last_break <= LV_TXT_LINE_BREAK_LONG_PRE_MIN_LEN ) {
 8013bf6:	2a03      	cmp	r2, #3
 8013bf8:	d955      	bls.n	8013ca6 <lv_txt_get_next_line+0x216>
                        cur_w -= w_at_last_break + letter_space; /*ignore the first letter_space after the break char */
 8013bfa:	f8bd 300c 	ldrh.w	r3, [sp, #12]
                        uint32_t i_tmp = i;
 8013bfe:	f10d 0b20 	add.w	fp, sp, #32
 8013c02:	9703      	str	r7, [sp, #12]
 8013c04:	4617      	mov	r7, r2
                        cur_w -= w_at_last_break + letter_space; /*ignore the first letter_space after the break char */
 8013c06:	4619      	mov	r1, r3
 8013c08:	9305      	str	r3, [sp, #20]
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 8013c0a:	4c3f      	ldr	r4, [pc, #252]	; (8013d08 <lv_txt_get_next_line+0x278>)
                        cur_w -= w_at_last_break + letter_space; /*ignore the first letter_space after the break char */
 8013c0c:	ebae 0501 	sub.w	r5, lr, r1
 8013c10:	9904      	ldr	r1, [sp, #16]
                        uint32_t i_tmp = i;
 8013c12:	9b06      	ldr	r3, [sp, #24]
                        cur_w -= w_at_last_break + letter_space; /*ignore the first letter_space after the break char */
 8013c14:	1a6d      	subs	r5, r5, r1
                        uint32_t i_tmp = i;
 8013c16:	f84b 3d04 	str.w	r3, [fp, #-4]!
                        cur_w -= w_at_last_break + letter_space; /*ignore the first letter_space after the break char */
 8013c1a:	b22d      	sxth	r5, r5
                        while(txt[i_tmp] != '\0') {
 8013c1c:	5cf3      	ldrb	r3, [r6, r3]
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d051      	beq.n	8013cc6 <lv_txt_get_next_line+0x236>
                            letter = lv_txt_encoded_next(txt, &i_tmp);
 8013c22:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013c26:	4659      	mov	r1, fp
 8013c28:	4630      	mov	r0, r6
 8013c2a:	4798      	blx	r3
                            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8013c2c:	f1b8 0f00 	cmp.w	r8, #0
 8013c30:	d004      	beq.n	8013c3c <lv_txt_get_next_line+0x1ac>
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8013c32:	2823      	cmp	r0, #35	; 0x23
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 8013c34:	9b02      	ldr	r3, [sp, #8]
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8013c36:	d04f      	beq.n	8013cd8 <lv_txt_get_next_line+0x248>
    if(*state == LV_TXT_CMD_STATE_PAR) {
 8013c38:	2b01      	cmp	r3, #1
 8013c3a:	d05b      	beq.n	8013cf4 <lv_txt_get_next_line+0x264>
                            if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
 8013c3c:	280a      	cmp	r0, #10
 8013c3e:	d042      	beq.n	8013cc6 <lv_txt_get_next_line+0x236>
 8013c40:	280d      	cmp	r0, #13
 8013c42:	d040      	beq.n	8013cc6 <lv_txt_get_next_line+0x236>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 8013c44:	2820      	cmp	r0, #32
 8013c46:	d03e      	beq.n	8013cc6 <lv_txt_get_next_line+0x236>
 8013c48:	2301      	movs	r3, #1
 8013c4a:	222c      	movs	r2, #44	; 0x2c
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 8013c4c:	3301      	adds	r3, #1
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 8013c4e:	4290      	cmp	r0, r2
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 8013c50:	b2db      	uxtb	r3, r3
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 8013c52:	d038      	beq.n	8013cc6 <lv_txt_get_next_line+0x236>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 8013c54:	5ce2      	ldrb	r2, [r4, r3]
 8013c56:	2a00      	cmp	r2, #0
 8013c58:	d1f8      	bne.n	8013c4c <lv_txt_get_next_line+0x1bc>
                            lv_coord_t letter_width2 = lv_font_get_width(font, letter);
 8013c5a:	4601      	mov	r1, r0
 8013c5c:	9800      	ldr	r0, [sp, #0]
 8013c5e:	f7ff f841 	bl	8012ce4 <lv_font_get_width>
                            cur_w += letter_width2;
 8013c62:	182b      	adds	r3, r5, r0
                            n_char_since_last_break++;
 8013c64:	3701      	adds	r7, #1
                            cur_w += letter_width2;
 8013c66:	b29b      	uxth	r3, r3
 8013c68:	b21d      	sxth	r5, r3
                            if(cur_w > max_width) {
 8013c6a:	45aa      	cmp	sl, r5
 8013c6c:	db0e      	blt.n	8013c8c <lv_txt_get_next_line+0x1fc>
                            if(letter_width2 > 0){
 8013c6e:	b110      	cbz	r0, 8013c76 <lv_txt_get_next_line+0x1e6>
                                cur_w += letter_space;
 8013c70:	9a05      	ldr	r2, [sp, #20]
 8013c72:	4413      	add	r3, r2
 8013c74:	b21d      	sxth	r5, r3
 8013c76:	9b07      	ldr	r3, [sp, #28]
 8013c78:	e7d0      	b.n	8013c1c <lv_txt_get_next_line+0x18c>
 8013c7a:	9200      	str	r2, [sp, #0]
                                lv_txt_encoded_prev(txt, &i);
 8013c7c:	a906      	add	r1, sp, #24
 8013c7e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8013c82:	4630      	mov	r0, r6
 8013c84:	4798      	blx	r3
                                for(char_remain=n_char_since_last_break - n_char_fit;
 8013c86:	9a00      	ldr	r2, [sp, #0]
 8013c88:	42ba      	cmp	r2, r7
 8013c8a:	d104      	bne.n	8013c96 <lv_txt_get_next_line+0x206>
                    lv_txt_encoded_prev(txt, &i);
 8013c8c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8013c90:	a906      	add	r1, sp, #24
 8013c92:	4630      	mov	r0, r6
 8013c94:	4798      	blx	r3
 8013c96:	9b06      	ldr	r3, [sp, #24]
 8013c98:	9301      	str	r3, [sp, #4]
                if(i == 0) lv_txt_encoded_next(txt, &i);
 8013c9a:	b143      	cbz	r3, 8013cae <lv_txt_get_next_line+0x21e>
                return i;
 8013c9c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
 8013ca0:	b009      	add	sp, #36	; 0x24
 8013ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ca6:	460b      	mov	r3, r1
                        i = last_break;
 8013ca8:	9106      	str	r1, [sp, #24]
                if(i == 0) lv_txt_encoded_next(txt, &i);
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d1f6      	bne.n	8013c9c <lv_txt_get_next_line+0x20c>
 8013cae:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013cb2:	a906      	add	r1, sp, #24
 8013cb4:	4630      	mov	r0, r6
 8013cb6:	4798      	blx	r3
 8013cb8:	9b06      	ldr	r3, [sp, #24]
 8013cba:	9301      	str	r3, [sp, #4]
                return i;
 8013cbc:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8013cc0:	e7ee      	b.n	8013ca0 <lv_txt_get_next_line+0x210>
 8013cc2:	9806      	ldr	r0, [sp, #24]
 8013cc4:	e74a      	b.n	8013b5c <lv_txt_get_next_line+0xcc>
 8013cc6:	463a      	mov	r2, r7
 8013cc8:	9f03      	ldr	r7, [sp, #12]
                            if(n_char_since_last_break >= LV_TXT_LINE_BREAK_LONG_LEN) {
 8013cca:	2a0b      	cmp	r2, #11
 8013ccc:	d8d5      	bhi.n	8013c7a <lv_txt_get_next_line+0x1ea>
                                i = last_break;
 8013cce:	9b01      	ldr	r3, [sp, #4]
 8013cd0:	9306      	str	r3, [sp, #24]
                if(i == 0) lv_txt_encoded_next(txt, &i);
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d1e2      	bne.n	8013c9c <lv_txt_get_next_line+0x20c>
 8013cd6:	e7ea      	b.n	8013cae <lv_txt_get_next_line+0x21e>
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 8013cd8:	b14b      	cbz	r3, 8013cee <lv_txt_get_next_line+0x25e>
                                if(lv_txt_is_cmd(&cmd_state, letter) != false) {
 8013cda:	2b01      	cmp	r3, #1
 8013cdc:	f04f 0300 	mov.w	r3, #0
 8013ce0:	9302      	str	r3, [sp, #8]
 8013ce2:	d1c8      	bne.n	8013c76 <lv_txt_get_next_line+0x1e6>
 8013ce4:	e7b0      	b.n	8013c48 <lv_txt_get_next_line+0x1b8>
    if(font == NULL) return 0;
 8013ce6:	2000      	movs	r0, #0
}
 8013ce8:	b009      	add	sp, #36	; 0x24
 8013cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 8013cee:	2301      	movs	r3, #1
 8013cf0:	9302      	str	r3, [sp, #8]
 8013cf2:	e7c0      	b.n	8013c76 <lv_txt_get_next_line+0x1e6>
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 8013cf4:	2820      	cmp	r0, #32
 8013cf6:	bf08      	it	eq
 8013cf8:	2302      	moveq	r3, #2
 8013cfa:	9302      	str	r3, [sp, #8]
 8013cfc:	e7bb      	b.n	8013c76 <lv_txt_get_next_line+0x1e6>
            if(cur_w > max_width) {
 8013cfe:	2300      	movs	r3, #0
 8013d00:	46a0      	mov	r8, r4
 8013d02:	9302      	str	r3, [sp, #8]
 8013d04:	e774      	b.n	8013bf0 <lv_txt_get_next_line+0x160>
 8013d06:	bf00      	nop
 8013d08:	080c7230 	.word	0x080c7230
 8013d0c:	200002dc 	.word	0x200002dc

08013d10 <lv_txt_get_size>:
{
 8013d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_res->x = 0;
 8013d14:	2400      	movs	r4, #0
{
 8013d16:	b08f      	sub	sp, #60	; 0x3c
    size_res->x = 0;
 8013d18:	6004      	str	r4, [r0, #0]
{
 8013d1a:	f9bd 4060 	ldrsh.w	r4, [sp, #96]	; 0x60
 8013d1e:	4626      	mov	r6, r4
 8013d20:	940a      	str	r4, [sp, #40]	; 0x28
 8013d22:	f9bd 4064 	ldrsh.w	r4, [sp, #100]	; 0x64
 8013d26:	9405      	str	r4, [sp, #20]
 8013d28:	f89d 4068 	ldrb.w	r4, [sp, #104]	; 0x68
 8013d2c:	9406      	str	r4, [sp, #24]
    if(font == NULL) return;
 8013d2e:	2900      	cmp	r1, #0
 8013d30:	f000 8088 	beq.w	8013e44 <lv_txt_get_size+0x134>
 8013d34:	4625      	mov	r5, r4
 8013d36:	fab2 f482 	clz	r4, r2
 8013d3a:	0964      	lsrs	r4, r4, #5
 8013d3c:	2c00      	cmp	r4, #0
 8013d3e:	f040 8081 	bne.w	8013e44 <lv_txt_get_size+0x134>
 8013d42:	4617      	mov	r7, r2
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8013d44:	f015 0f02 	tst.w	r5, #2
 8013d48:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8013d4c:	9108      	str	r1, [sp, #32]
 8013d4e:	9304      	str	r3, [sp, #16]
 8013d50:	4683      	mov	fp, r0
    while(text[line_start] != '\0') {
 8013d52:	780b      	ldrb	r3, [r1, #0]
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8013d54:	4628      	mov	r0, r5
    while(text[line_start] != '\0') {
 8013d56:	460d      	mov	r5, r1
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8013d58:	9905      	ldr	r1, [sp, #20]
 8013d5a:	bf18      	it	ne
 8013d5c:	4611      	movne	r1, r2
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline uint8_t lv_font_get_height(const lv_font_t * font_p)
{
    return font_p->h_px;
 8013d5e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8013d62:	9105      	str	r1, [sp, #20]
 8013d64:	920b      	str	r2, [sp, #44]	; 0x2c
    while(text[line_start] != '\0') {
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	f000 8092 	beq.w	8013e90 <lv_txt_get_size+0x180>
 8013d6c:	18b3      	adds	r3, r6, r2
 8013d6e:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8013eb4 <lv_txt_get_size+0x1a4>
 8013d72:	f000 0201 	and.w	r2, r0, #1
 8013d76:	462e      	mov	r6, r5
 8013d78:	b29b      	uxth	r3, r3
 8013d7a:	9403      	str	r4, [sp, #12]
 8013d7c:	9209      	str	r2, [sp, #36]	; 0x24
 8013d7e:	9307      	str	r3, [sp, #28]
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 8013d80:	9b06      	ldr	r3, [sp, #24]
 8013d82:	4639      	mov	r1, r7
 8013d84:	9a04      	ldr	r2, [sp, #16]
 8013d86:	4630      	mov	r0, r6
 8013d88:	9300      	str	r3, [sp, #0]
 8013d8a:	9b05      	ldr	r3, [sp, #20]
 8013d8c:	f7ff fe80 	bl	8013a90 <lv_txt_get_next_line>
 8013d90:	9a03      	ldr	r2, [sp, #12]
        size_res->y += line_space;
 8013d92:	f8bb 3002 	ldrh.w	r3, [fp, #2]
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 8013d96:	4605      	mov	r5, r0
 8013d98:	4402      	add	r2, r0
 8013d9a:	9203      	str	r2, [sp, #12]
    uint32_t i = 0;
 8013d9c:	2200      	movs	r2, #0
 8013d9e:	920d      	str	r2, [sp, #52]	; 0x34
        size_res->y += line_space;
 8013da0:	9a07      	ldr	r2, [sp, #28]
 8013da2:	4413      	add	r3, r2
 8013da4:	f8ab 3002 	strh.w	r3, [fp, #2]
    if(length != 0) {
 8013da8:	2800      	cmp	r0, #0
 8013daa:	d04e      	beq.n	8013e4a <lv_txt_get_size+0x13a>
 8013dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d055      	beq.n	8013e5e <lv_txt_get_size+0x14e>
 8013db2:	2400      	movs	r4, #0
 8013db4:	46a1      	mov	r9, r4
 8013db6:	e012      	b.n	8013dde <lv_txt_get_size+0xce>
    if(*state == LV_TXT_CMD_STATE_PAR) {
 8013db8:	f1b9 0f01 	cmp.w	r9, #1
 8013dbc:	d047      	beq.n	8013e4e <lv_txt_get_size+0x13e>
            lv_coord_t char_width = lv_font_get_width(font, letter);
 8013dbe:	4651      	mov	r1, sl
 8013dc0:	4638      	mov	r0, r7
 8013dc2:	f7fe ff8f 	bl	8012ce4 <lv_font_get_width>
            if(char_width > 0){
 8013dc6:	b138      	cbz	r0, 8013dd8 <lv_txt_get_size+0xc8>
                width += lv_font_get_width(font, letter);
 8013dc8:	4651      	mov	r1, sl
 8013dca:	4638      	mov	r0, r7
 8013dcc:	f7fe ff8a 	bl	8012ce4 <lv_font_get_width>
                width += letter_space;
 8013dd0:	9b04      	ldr	r3, [sp, #16]
 8013dd2:	441c      	add	r4, r3
 8013dd4:	4404      	add	r4, r0
 8013dd6:	b224      	sxth	r4, r4
        while(i< length){
 8013dd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013dda:	429d      	cmp	r5, r3
 8013ddc:	d912      	bls.n	8013e04 <lv_txt_get_size+0xf4>
            letter = lv_txt_encoded_next(txt, &i);
 8013dde:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013de2:	a90d      	add	r1, sp, #52	; 0x34
 8013de4:	4630      	mov	r0, r6
 8013de6:	4798      	blx	r3
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8013de8:	2823      	cmp	r0, #35	; 0x23
            letter = lv_txt_encoded_next(txt, &i);
 8013dea:	4682      	mov	sl, r0
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8013dec:	d1e4      	bne.n	8013db8 <lv_txt_get_size+0xa8>
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 8013dee:	f1b9 0f00 	cmp.w	r9, #0
 8013df2:	d031      	beq.n	8013e58 <lv_txt_get_size+0x148>
                if(lv_txt_is_cmd(&cmd_state, letter) != false) {
 8013df4:	f1b9 0f01 	cmp.w	r9, #1
 8013df8:	f04f 0900 	mov.w	r9, #0
 8013dfc:	d0df      	beq.n	8013dbe <lv_txt_get_size+0xae>
        while(i< length){
 8013dfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013e00:	429d      	cmp	r5, r3
 8013e02:	d8ec      	bhi.n	8013dde <lv_txt_get_size+0xce>
        if(width > 0) {
 8013e04:	2c00      	cmp	r4, #0
 8013e06:	dd02      	ble.n	8013e0e <lv_txt_get_size+0xfe>
            width -= letter_space;  /*Trim the last letter space. Important if the text is center aligned */
 8013e08:	9b04      	ldr	r3, [sp, #16]
 8013e0a:	1ae4      	subs	r4, r4, r3
 8013e0c:	b224      	sxth	r4, r4
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
 8013e0e:	f9bb 0000 	ldrsh.w	r0, [fp]
    while(text[line_start] != '\0') {
 8013e12:	9b08      	ldr	r3, [sp, #32]
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
 8013e14:	4284      	cmp	r4, r0
    while(text[line_start] != '\0') {
 8013e16:	9a03      	ldr	r2, [sp, #12]
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
 8013e18:	bfb8      	it	lt
 8013e1a:	4604      	movlt	r4, r0
    while(text[line_start] != '\0') {
 8013e1c:	189e      	adds	r6, r3, r2
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
 8013e1e:	f8ab 4000 	strh.w	r4, [fp]
    while(text[line_start] != '\0') {
 8013e22:	5c9b      	ldrb	r3, [r3, r2]
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d1ab      	bne.n	8013d80 <lv_txt_get_size+0x70>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 8013e28:	b12a      	cbz	r2, 8013e36 <lv_txt_get_size+0x126>
 8013e2a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013e2e:	2b0a      	cmp	r3, #10
 8013e30:	d035      	beq.n	8013e9e <lv_txt_get_size+0x18e>
 8013e32:	2b0d      	cmp	r3, #13
 8013e34:	d033      	beq.n	8013e9e <lv_txt_get_size+0x18e>
 8013e36:	f9bb 3002 	ldrsh.w	r3, [fp, #2]
    if(size_res->y == 0) size_res->y = letter_height;
 8013e3a:	b34b      	cbz	r3, 8013e90 <lv_txt_get_size+0x180>
    else size_res->y -= line_space;
 8013e3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013e3e:	1a9b      	subs	r3, r3, r2
 8013e40:	f8ab 3002 	strh.w	r3, [fp, #2]
}
 8013e44:	b00f      	add	sp, #60	; 0x3c
 8013e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_coord_t width = 0;
 8013e4a:	4604      	mov	r4, r0
 8013e4c:	e7df      	b.n	8013e0e <lv_txt_get_size+0xfe>
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 8013e4e:	2820      	cmp	r0, #32
 8013e50:	bf08      	it	eq
 8013e52:	f04f 0902 	moveq.w	r9, #2
 8013e56:	e7bf      	b.n	8013dd8 <lv_txt_get_size+0xc8>
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 8013e58:	f04f 0901 	mov.w	r9, #1
 8013e5c:	e7bc      	b.n	8013dd8 <lv_txt_get_size+0xc8>
    if(length != 0) {
 8013e5e:	461c      	mov	r4, r3
 8013e60:	f8dd a010 	ldr.w	sl, [sp, #16]
            letter = lv_txt_encoded_next(txt, &i);
 8013e64:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013e68:	a90d      	add	r1, sp, #52	; 0x34
 8013e6a:	4630      	mov	r0, r6
 8013e6c:	4798      	blx	r3
 8013e6e:	4681      	mov	r9, r0
            lv_coord_t char_width = lv_font_get_width(font, letter);
 8013e70:	4601      	mov	r1, r0
 8013e72:	4638      	mov	r0, r7
 8013e74:	f7fe ff36 	bl	8012ce4 <lv_font_get_width>
                width += lv_font_get_width(font, letter);
 8013e78:	4649      	mov	r1, r9
            if(char_width > 0){
 8013e7a:	b128      	cbz	r0, 8013e88 <lv_txt_get_size+0x178>
                width += letter_space;
 8013e7c:	4454      	add	r4, sl
                width += lv_font_get_width(font, letter);
 8013e7e:	4638      	mov	r0, r7
 8013e80:	f7fe ff30 	bl	8012ce4 <lv_font_get_width>
                width += letter_space;
 8013e84:	4404      	add	r4, r0
 8013e86:	b224      	sxth	r4, r4
        while(i< length){
 8013e88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013e8a:	429d      	cmp	r5, r3
 8013e8c:	d8ea      	bhi.n	8013e64 <lv_txt_get_size+0x154>
 8013e8e:	e7b9      	b.n	8013e04 <lv_txt_get_size+0xf4>
    if(size_res->y == 0) size_res->y = letter_height;
 8013e90:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8013e94:	f8ab 3002 	strh.w	r3, [fp, #2]
}
 8013e98:	b00f      	add	sp, #60	; 0x3c
 8013e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        size_res->y += letter_height + line_space;
 8013e9e:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8013ea2:	9a07      	ldr	r2, [sp, #28]
 8013ea4:	441a      	add	r2, r3
 8013ea6:	b213      	sxth	r3, r2
 8013ea8:	f8ab 3002 	strh.w	r3, [fp, #2]
    if(size_res->y == 0) size_res->y = letter_height;
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d1c5      	bne.n	8013e3c <lv_txt_get_size+0x12c>
 8013eb0:	e7ee      	b.n	8013e90 <lv_txt_get_size+0x180>
 8013eb2:	bf00      	nop
 8013eb4:	200002dc 	.word	0x200002dc

08013eb8 <lv_txt_get_width>:
{
 8013eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ebc:	b085      	sub	sp, #20
 8013ebe:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
    if(font == NULL) return 0;
 8013ec2:	2a00      	cmp	r2, #0
 8013ec4:	d056      	beq.n	8013f74 <lv_txt_get_width+0xbc>
 8013ec6:	fab0 f580 	clz	r5, r0
 8013eca:	096d      	lsrs	r5, r5, #5
 8013ecc:	2d00      	cmp	r5, #0
 8013ece:	d151      	bne.n	8013f74 <lv_txt_get_width+0xbc>
    uint32_t i = 0;
 8013ed0:	9503      	str	r5, [sp, #12]
    if(length != 0) {
 8013ed2:	2900      	cmp	r1, #0
 8013ed4:	d04e      	beq.n	8013f74 <lv_txt_get_width+0xbc>
 8013ed6:	f01e 0401 	ands.w	r4, lr, #1
 8013eda:	4616      	mov	r6, r2
 8013edc:	9301      	str	r3, [sp, #4]
 8013ede:	4688      	mov	r8, r1
 8013ee0:	4607      	mov	r7, r0
 8013ee2:	f10d 0a0c 	add.w	sl, sp, #12
 8013ee6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8013f8c <lv_txt_get_width+0xd4>
 8013eea:	d02c      	beq.n	8013f46 <lv_txt_get_width+0x8e>
 8013eec:	462c      	mov	r4, r5
 8013eee:	e011      	b.n	8013f14 <lv_txt_get_width+0x5c>
    if(*state == LV_TXT_CMD_STATE_PAR) {
 8013ef0:	2d01      	cmp	r5, #1
 8013ef2:	d044      	beq.n	8013f7e <lv_txt_get_width+0xc6>
            lv_coord_t char_width = lv_font_get_width(font, letter);
 8013ef4:	4659      	mov	r1, fp
 8013ef6:	4630      	mov	r0, r6
 8013ef8:	f7fe fef4 	bl	8012ce4 <lv_font_get_width>
            if(char_width > 0){
 8013efc:	b138      	cbz	r0, 8013f0e <lv_txt_get_width+0x56>
                width += lv_font_get_width(font, letter);
 8013efe:	4659      	mov	r1, fp
 8013f00:	4630      	mov	r0, r6
 8013f02:	f7fe feef 	bl	8012ce4 <lv_font_get_width>
                width += letter_space;
 8013f06:	9b01      	ldr	r3, [sp, #4]
 8013f08:	441c      	add	r4, r3
 8013f0a:	4404      	add	r4, r0
 8013f0c:	b224      	sxth	r4, r4
        while(i< length){
 8013f0e:	9b03      	ldr	r3, [sp, #12]
 8013f10:	4543      	cmp	r3, r8
 8013f12:	d20f      	bcs.n	8013f34 <lv_txt_get_width+0x7c>
            letter = lv_txt_encoded_next(txt, &i);
 8013f14:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013f18:	4651      	mov	r1, sl
 8013f1a:	4638      	mov	r0, r7
 8013f1c:	4798      	blx	r3
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8013f1e:	2823      	cmp	r0, #35	; 0x23
            letter = lv_txt_encoded_next(txt, &i);
 8013f20:	4683      	mov	fp, r0
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8013f22:	d1e5      	bne.n	8013ef0 <lv_txt_get_width+0x38>
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 8013f24:	b37d      	cbz	r5, 8013f86 <lv_txt_get_width+0xce>
                if(lv_txt_is_cmd(&cmd_state, letter) != false) {
 8013f26:	2d01      	cmp	r5, #1
 8013f28:	f04f 0500 	mov.w	r5, #0
 8013f2c:	d0e2      	beq.n	8013ef4 <lv_txt_get_width+0x3c>
        while(i< length){
 8013f2e:	9b03      	ldr	r3, [sp, #12]
 8013f30:	4543      	cmp	r3, r8
 8013f32:	d3ef      	bcc.n	8013f14 <lv_txt_get_width+0x5c>
        if(width > 0) {
 8013f34:	2c00      	cmp	r4, #0
 8013f36:	dd1e      	ble.n	8013f76 <lv_txt_get_width+0xbe>
            width -= letter_space;  /*Trim the last letter space. Important if the text is center aligned */
 8013f38:	9b01      	ldr	r3, [sp, #4]
 8013f3a:	1ae4      	subs	r4, r4, r3
 8013f3c:	b224      	sxth	r4, r4
}
 8013f3e:	4620      	mov	r0, r4
 8013f40:	b005      	add	sp, #20
 8013f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            letter = lv_txt_encoded_next(txt, &i);
 8013f46:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013f4a:	4651      	mov	r1, sl
 8013f4c:	4638      	mov	r0, r7
 8013f4e:	4798      	blx	r3
 8013f50:	4605      	mov	r5, r0
            lv_coord_t char_width = lv_font_get_width(font, letter);
 8013f52:	4601      	mov	r1, r0
 8013f54:	4630      	mov	r0, r6
 8013f56:	f7fe fec5 	bl	8012ce4 <lv_font_get_width>
                width += lv_font_get_width(font, letter);
 8013f5a:	4629      	mov	r1, r5
            if(char_width > 0){
 8013f5c:	b130      	cbz	r0, 8013f6c <lv_txt_get_width+0xb4>
                width += lv_font_get_width(font, letter);
 8013f5e:	4630      	mov	r0, r6
 8013f60:	f7fe fec0 	bl	8012ce4 <lv_font_get_width>
                width += letter_space;
 8013f64:	9b01      	ldr	r3, [sp, #4]
 8013f66:	441c      	add	r4, r3
 8013f68:	4404      	add	r4, r0
 8013f6a:	b224      	sxth	r4, r4
        while(i< length){
 8013f6c:	9b03      	ldr	r3, [sp, #12]
 8013f6e:	4543      	cmp	r3, r8
 8013f70:	d3e9      	bcc.n	8013f46 <lv_txt_get_width+0x8e>
 8013f72:	e7df      	b.n	8013f34 <lv_txt_get_width+0x7c>
    if(font == NULL) return 0;
 8013f74:	2400      	movs	r4, #0
}
 8013f76:	4620      	mov	r0, r4
 8013f78:	b005      	add	sp, #20
 8013f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 8013f7e:	2820      	cmp	r0, #32
 8013f80:	bf08      	it	eq
 8013f82:	2502      	moveq	r5, #2
 8013f84:	e7c3      	b.n	8013f0e <lv_txt_get_width+0x56>
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 8013f86:	2501      	movs	r5, #1
 8013f88:	e7c1      	b.n	8013f0e <lv_txt_get_width+0x56>
 8013f8a:	bf00      	nop
 8013f8c:	200002dc 	.word	0x200002dc

08013f90 <lv_txt_is_cmd>:
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8013f90:	2923      	cmp	r1, #35	; 0x23
{
 8013f92:	4602      	mov	r2, r0
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 8013f94:	7803      	ldrb	r3, [r0, #0]
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8013f96:	d009      	beq.n	8013fac <lv_txt_is_cmd+0x1c>
    if(*state == LV_TXT_CMD_STATE_PAR) {
 8013f98:	2b01      	cmp	r3, #1
 8013f9a:	d001      	beq.n	8013fa0 <lv_txt_is_cmd+0x10>
    bool ret = false;
 8013f9c:	2000      	movs	r0, #0
}
 8013f9e:	4770      	bx	lr
        if(c == ' ') {
 8013fa0:	2920      	cmp	r1, #32
 8013fa2:	d110      	bne.n	8013fc6 <lv_txt_is_cmd+0x36>
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 8013fa4:	2102      	movs	r1, #2
        ret = true;
 8013fa6:	4618      	mov	r0, r3
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 8013fa8:	7011      	strb	r1, [r2, #0]
 8013faa:	4770      	bx	lr
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 8013fac:	b13b      	cbz	r3, 8013fbe <lv_txt_is_cmd+0x2e>
        } else if(*state == LV_TXT_CMD_STATE_PAR) { /*Other start char in parameter is escaped cmd. char */
 8013fae:	2b01      	cmp	r3, #1
 8013fb0:	d00b      	beq.n	8013fca <lv_txt_is_cmd+0x3a>
        } else if(*state == LV_TXT_CMD_STATE_IN) { /*Command end */
 8013fb2:	2b02      	cmp	r3, #2
 8013fb4:	d1f2      	bne.n	8013f9c <lv_txt_is_cmd+0xc>
            *state = LV_TXT_CMD_STATE_WAIT;
 8013fb6:	2300      	movs	r3, #0
            ret = true;
 8013fb8:	2001      	movs	r0, #1
            *state = LV_TXT_CMD_STATE_WAIT;
 8013fba:	7013      	strb	r3, [r2, #0]
 8013fbc:	4770      	bx	lr
            *state = LV_TXT_CMD_STATE_PAR;
 8013fbe:	2301      	movs	r3, #1
 8013fc0:	7003      	strb	r3, [r0, #0]
        ret = true;
 8013fc2:	4618      	mov	r0, r3
 8013fc4:	4770      	bx	lr
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	4770      	bx	lr
            *state = LV_TXT_CMD_STATE_WAIT;
 8013fca:	2300      	movs	r3, #0
 8013fcc:	7003      	strb	r3, [r0, #0]
    bool ret = false;
 8013fce:	4618      	mov	r0, r3
 8013fd0:	4770      	bx	lr
 8013fd2:	bf00      	nop

08013fd4 <lv_txt_ins>:
{
 8013fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fd8:	4617      	mov	r7, r2
 8013fda:	460c      	mov	r4, r1
 8013fdc:	4606      	mov	r6, r0
    uint32_t old_len = strlen(txt_buf);
 8013fde:	f7ec f91d 	bl	800021c <strlen>
 8013fe2:	4605      	mov	r5, r0
    uint32_t ins_len = strlen(ins_txt);
 8013fe4:	4638      	mov	r0, r7
 8013fe6:	f7ec f919 	bl	800021c <strlen>
    pos = lv_txt_encoded_get_byte_id(txt_buf, pos);   /*Convert to byte index instead of letter index*/
 8013fea:	4b0e      	ldr	r3, [pc, #56]	; (8014024 <lv_txt_ins+0x50>)
    uint32_t ins_len = strlen(ins_txt);
 8013fec:	4680      	mov	r8, r0
    pos = lv_txt_encoded_get_byte_id(txt_buf, pos);   /*Convert to byte index instead of letter index*/
 8013fee:	4621      	mov	r1, r4
 8013ff0:	4630      	mov	r0, r6
 8013ff2:	68db      	ldr	r3, [r3, #12]
 8013ff4:	4798      	blx	r3
    uint32_t new_len = ins_len + old_len;
 8013ff6:	eb05 0408 	add.w	r4, r5, r8
    for(i = new_len; i >= pos + ins_len; i--) {
 8013ffa:	eb08 0e00 	add.w	lr, r8, r0
 8013ffe:	4574      	cmp	r4, lr
 8014000:	d308      	bcc.n	8014014 <lv_txt_ins+0x40>
 8014002:	1971      	adds	r1, r6, r5
 8014004:	1933      	adds	r3, r6, r4
        txt_buf[i] = txt_buf[i - ins_len];
 8014006:	f811 4901 	ldrb.w	r4, [r1], #-1
 801400a:	f803 4901 	strb.w	r4, [r3], #-1
    for(i = new_len; i >= pos + ins_len; i--) {
 801400e:	1b9c      	subs	r4, r3, r6
 8014010:	45a6      	cmp	lr, r4
 8014012:	d9f8      	bls.n	8014006 <lv_txt_ins+0x32>
    memcpy(txt_buf + pos, ins_txt, ins_len);
 8014014:	4642      	mov	r2, r8
 8014016:	4639      	mov	r1, r7
 8014018:	4430      	add	r0, r6
}
 801401a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    memcpy(txt_buf + pos, ins_txt, ins_len);
 801401e:	f009 bcdd 	b.w	801d9dc <memcpy>
 8014022:	bf00      	nop
 8014024:	200002dc 	.word	0x200002dc

08014028 <lv_txt_cut>:
{
 8014028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801402c:	460c      	mov	r4, r1
 801402e:	4605      	mov	r5, r0
    pos = lv_txt_encoded_get_byte_id(txt, pos);   /*Convert to byte index instead of letter index*/
 8014030:	4e0e      	ldr	r6, [pc, #56]	; (801406c <lv_txt_cut+0x44>)
{
 8014032:	4690      	mov	r8, r2
    uint32_t old_len = strlen(txt);
 8014034:	f7ec f8f2 	bl	800021c <strlen>
    pos = lv_txt_encoded_get_byte_id(txt, pos);   /*Convert to byte index instead of letter index*/
 8014038:	4621      	mov	r1, r4
 801403a:	68f3      	ldr	r3, [r6, #12]
    uint32_t old_len = strlen(txt);
 801403c:	4607      	mov	r7, r0
    pos = lv_txt_encoded_get_byte_id(txt, pos);   /*Convert to byte index instead of letter index*/
 801403e:	4628      	mov	r0, r5
 8014040:	4798      	blx	r3
    len = lv_txt_encoded_get_byte_id(&txt[pos], len);
 8014042:	68f3      	ldr	r3, [r6, #12]
 8014044:	182e      	adds	r6, r5, r0
    pos = lv_txt_encoded_get_byte_id(txt, pos);   /*Convert to byte index instead of letter index*/
 8014046:	4604      	mov	r4, r0
    len = lv_txt_encoded_get_byte_id(&txt[pos], len);
 8014048:	4641      	mov	r1, r8
 801404a:	4630      	mov	r0, r6
 801404c:	4798      	blx	r3
    for(i = pos; i <= old_len - len; i++) {
 801404e:	1a39      	subs	r1, r7, r0
 8014050:	428c      	cmp	r4, r1
 8014052:	d809      	bhi.n	8014068 <lv_txt_cut+0x40>
 8014054:	1823      	adds	r3, r4, r0
 8014056:	4630      	mov	r0, r6
 8014058:	442b      	add	r3, r5
 801405a:	3401      	adds	r4, #1
        txt[i] = txt[i + len];
 801405c:	f813 2b01 	ldrb.w	r2, [r3], #1
    for(i = pos; i <= old_len - len; i++) {
 8014060:	428c      	cmp	r4, r1
        txt[i] = txt[i + len];
 8014062:	f800 2b01 	strb.w	r2, [r0], #1
    for(i = pos; i <= old_len - len; i++) {
 8014066:	d9f8      	bls.n	801405a <lv_txt_cut+0x32>
 8014068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801406c:	200002dc 	.word	0x200002dc

08014070 <lv_ufs_ready>:
 * Give the state of the ufs
 * @return true if ufs is initialized and can be used else false
 */
bool lv_ufs_ready(void)
{
    return inited;
 8014070:	4b01      	ldr	r3, [pc, #4]	; (8014078 <lv_ufs_ready+0x8>)
}
 8014072:	7818      	ldrb	r0, [r3, #0]
 8014074:	4770      	bx	lr
 8014076:	bf00      	nop
 8014078:	200165e8 	.word	0x200165e8

0801407c <lv_ufs_close>:
 */
lv_fs_res_t lv_ufs_close(void * file_p)
{
    lv_ufs_file_t * fp = file_p;    /*Convert type*/

    if(fp->ent == NULL) return LV_FS_RES_OK;
 801407c:	6803      	ldr	r3, [r0, #0]
 801407e:	b11b      	cbz	r3, 8014088 <lv_ufs_close+0xc>

    /*Decrement the Open counter*/
    if(fp->ent->oc > 0) {
 8014080:	899a      	ldrh	r2, [r3, #12]
 8014082:	b10a      	cbz	r2, 8014088 <lv_ufs_close+0xc>
        fp->ent->oc--;
 8014084:	3a01      	subs	r2, #1
 8014086:	819a      	strh	r2, [r3, #12]
    }

    return LV_FS_RES_OK;
}
 8014088:	2000      	movs	r0, #0
 801408a:	4770      	bx	lr

0801408c <lv_ufs_tell>:
 */
lv_fs_res_t lv_ufs_tell(void * file_p, uint32_t * pos_p)
{
    lv_ufs_file_t * fp = file_p;    /*Convert type*/

    *pos_p = fp->rwp;
 801408c:	6843      	ldr	r3, [r0, #4]

    return LV_FS_RES_OK;
}
 801408e:	2000      	movs	r0, #0
    *pos_p = fp->rwp;
 8014090:	600b      	str	r3, [r1, #0]
}
 8014092:	4770      	bx	lr

08014094 <lv_ufs_size>:
lv_fs_res_t lv_ufs_size(void * file_p, uint32_t * size_p)
{
    lv_ufs_file_t * fp = file_p;    /*Convert type*/
    lv_ufs_ent_t * ent = fp->ent;

    *size_p = ent->size;
 8014094:	6803      	ldr	r3, [r0, #0]

    return LV_FS_RES_OK;
}
 8014096:	2000      	movs	r0, #0
    *size_p = ent->size;
 8014098:	689b      	ldr	r3, [r3, #8]
 801409a:	600b      	str	r3, [r1, #0]
}
 801409c:	4770      	bx	lr
 801409e:	bf00      	nop

080140a0 <lv_ufs_dir_open>:
 */
lv_fs_res_t lv_ufs_dir_open(void * rddir_p, const char * path)
{
    lv_ufs_dir_t * lv_ufs_rddir_p = rddir_p;

    lv_ufs_rddir_p->last_ent = NULL;
 80140a0:	2300      	movs	r3, #0
 80140a2:	6003      	str	r3, [r0, #0]

    if(path[0] != '\0') return LV_FS_RES_NOT_EX;       /*Must be "" */
 80140a4:	780b      	ldrb	r3, [r1, #0]
 80140a6:	2b00      	cmp	r3, #0
    else return LV_FS_RES_OK;
}
 80140a8:	bf14      	ite	ne
 80140aa:	2003      	movne	r0, #3
 80140ac:	2000      	moveq	r0, #0
 80140ae:	4770      	bx	lr

080140b0 <lv_ufs_dir_close>:
 */
lv_fs_res_t lv_ufs_dir_close(void * rddir_p)
{
    (void)rddir_p;
    return LV_FS_RES_OK;
}
 80140b0:	2000      	movs	r0, #0
 80140b2:	4770      	bx	lr

080140b4 <lv_ufs_open>:
{
 80140b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140b8:	4680      	mov	r8, r0
 */
static lv_ufs_ent_t * lv_ufs_ent_get(const char * fn)
{
    lv_ufs_ent_t * fp;

    LL_READ(LV_GC_ROOT(_lv_file_ll), fp) {
 80140ba:	482f      	ldr	r0, [pc, #188]	; (8014178 <lv_ufs_open+0xc4>)
{
 80140bc:	460d      	mov	r5, r1
 80140be:	4617      	mov	r7, r2
    LL_READ(LV_GC_ROOT(_lv_file_ll), fp) {
 80140c0:	f7ff f866 	bl	8013190 <lv_ll_get_head>
 80140c4:	b338      	cbz	r0, 8014116 <lv_ufs_open+0x62>
 80140c6:	4604      	mov	r4, r0
 80140c8:	4e2b      	ldr	r6, [pc, #172]	; (8014178 <lv_ufs_open+0xc4>)
 80140ca:	e004      	b.n	80140d6 <lv_ufs_open+0x22>
 80140cc:	4630      	mov	r0, r6
 80140ce:	f7ff f867 	bl	80131a0 <lv_ll_get_next>
 80140d2:	4604      	mov	r4, r0
 80140d4:	b1f8      	cbz	r0, 8014116 <lv_ufs_open+0x62>
        if(strcmp(fp->fn_d, fn) == 0) {
 80140d6:	4629      	mov	r1, r5
 80140d8:	6820      	ldr	r0, [r4, #0]
 80140da:	f7ec f895 	bl	8000208 <strcmp>
    LL_READ(LV_GC_ROOT(_lv_file_ll), fp) {
 80140de:	4621      	mov	r1, r4
        if(strcmp(fp->fn_d, fn) == 0) {
 80140e0:	2800      	cmp	r0, #0
 80140e2:	d1f3      	bne.n	80140cc <lv_ufs_open+0x18>
    if((mode & LV_FS_MODE_WR) != 0) {
 80140e4:	f017 0101 	ands.w	r1, r7, #1
    fp->ent = NULL;
 80140e8:	f8c8 0000 	str.w	r0, [r8]
    if((mode & LV_FS_MODE_WR) != 0) {
 80140ec:	d11b      	bne.n	8014126 <lv_ufs_open+0x72>
 80140ee:	89a2      	ldrh	r2, [r4, #12]
    fp->ar = mode & LV_FS_MODE_RD ? 1 : 0;
 80140f0:	f898 3008 	ldrb.w	r3, [r8, #8]
 80140f4:	f3c7 0740 	ubfx	r7, r7, #1, #1
    ent->oc ++;
 80140f8:	3201      	adds	r2, #1
    fp->rwp = 0;
 80140fa:	2000      	movs	r0, #0
    fp->ar = mode & LV_FS_MODE_RD ? 1 : 0;
 80140fc:	f367 0300 	bfi	r3, r7, #0, #1
    fp->ent = ent;
 8014100:	f8c8 4000 	str.w	r4, [r8]
    fp->rwp = 0;
 8014104:	f8c8 0004 	str.w	r0, [r8, #4]
    fp->aw = mode & LV_FS_MODE_WR ? 1 : 0;
 8014108:	f361 0341 	bfi	r3, r1, #1, #1
 801410c:	f888 3008 	strb.w	r3, [r8, #8]
    ent->oc ++;
 8014110:	81a2      	strh	r2, [r4, #12]
    return LV_FS_RES_OK;
 8014112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fp->ent = NULL;
 8014116:	2600      	movs	r6, #0
        if((mode & LV_FS_MODE_WR) != 0) {  /*Create the file if opened for write*/
 8014118:	07fb      	lsls	r3, r7, #31
    fp->ent = NULL;
 801411a:	f8c8 6000 	str.w	r6, [r8]
        if((mode & LV_FS_MODE_WR) != 0) {  /*Create the file if opened for write*/
 801411e:	d407      	bmi.n	8014130 <lv_ufs_open+0x7c>
            return LV_FS_RES_NOT_EX;       /*Can not read not existing file*/
 8014120:	2003      	movs	r0, #3
 8014122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(ent->oc != 0) return LV_FS_RES_LOCKED;
 8014126:	89a3      	ldrh	r3, [r4, #12]
 8014128:	b1cb      	cbz	r3, 801415e <lv_ufs_open+0xaa>
 801412a:	2005      	movs	r0, #5
 801412c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 *         NULL if no space for the entry.
 */
static lv_ufs_ent_t * lv_ufs_ent_new(const char * fn)
{
    lv_ufs_ent_t * new_ent = NULL;
    new_ent = lv_ll_ins_head(&LV_GC_ROOT(_lv_file_ll));                 /*Create a new file*/
 8014130:	4811      	ldr	r0, [pc, #68]	; (8014178 <lv_ufs_open+0xc4>)
 8014132:	f7fe feef 	bl	8012f14 <lv_ll_ins_head>
    lv_mem_assert(new_ent);
 8014136:	4604      	mov	r4, r0
 8014138:	b1d8      	cbz	r0, 8014172 <lv_ufs_open+0xbe>
    if(new_ent == NULL) return NULL;

    new_ent->fn_d = lv_mem_alloc(strlen(fn)  + 1); /*Save the name*/
 801413a:	4628      	mov	r0, r5
 801413c:	f7ec f86e 	bl	800021c <strlen>
 8014140:	3001      	adds	r0, #1
 8014142:	f7ff f88b 	bl	801325c <lv_mem_alloc>
 8014146:	6020      	str	r0, [r4, #0]
    lv_mem_assert(new_ent->fn_d);
 8014148:	b1a0      	cbz	r0, 8014174 <lv_ufs_open+0xc0>
    if(new_ent->fn_d == NULL) return NULL;

    strcpy(new_ent->fn_d, fn);
 801414a:	4629      	mov	r1, r5
 801414c:	f009 fc59 	bl	801da02 <strcpy>
    new_ent->data_d = NULL;
    new_ent->size = 0;
    new_ent->oc = 0;
    new_ent->const_data = 0;
 8014150:	7ba3      	ldrb	r3, [r4, #14]
    new_ent->data_d = NULL;
 8014152:	6066      	str	r6, [r4, #4]
    new_ent->const_data = 0;
 8014154:	f366 0300 	bfi	r3, r6, #0, #1
    new_ent->size = 0;
 8014158:	60a6      	str	r6, [r4, #8]
    new_ent->oc = 0;
 801415a:	81a6      	strh	r6, [r4, #12]
    new_ent->const_data = 0;
 801415c:	73a3      	strb	r3, [r4, #14]
        if(ent->const_data != 0) return LV_FS_RES_DENIED;
 801415e:	7ba3      	ldrb	r3, [r4, #14]
 8014160:	f013 0301 	ands.w	r3, r3, #1
 8014164:	d002      	beq.n	801416c <lv_ufs_open+0xb8>
 8014166:	2006      	movs	r0, #6
 8014168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801416c:	461a      	mov	r2, r3
 801416e:	2101      	movs	r1, #1
 8014170:	e7be      	b.n	80140f0 <lv_ufs_open+0x3c>
 8014172:	e7fe      	b.n	8014172 <lv_ufs_open+0xbe>
 8014174:	e7fe      	b.n	8014174 <lv_ufs_open+0xc0>
 8014176:	bf00      	nop
 8014178:	200194ec 	.word	0x200194ec

0801417c <lv_ufs_dir_read>:
{
 801417c:	b538      	push	{r3, r4, r5, lr}
 801417e:	460d      	mov	r5, r1
    if(ufs_dir_p->last_ent == NULL) {
 8014180:	6801      	ldr	r1, [r0, #0]
{
 8014182:	4604      	mov	r4, r0
        ufs_dir_p->last_ent = lv_ll_get_head(&LV_GC_ROOT(_lv_file_ll));
 8014184:	480a      	ldr	r0, [pc, #40]	; (80141b0 <lv_ufs_dir_read+0x34>)
    if(ufs_dir_p->last_ent == NULL) {
 8014186:	b169      	cbz	r1, 80141a4 <lv_ufs_dir_read+0x28>
        ufs_dir_p->last_ent = lv_ll_get_next(&LV_GC_ROOT(_lv_file_ll), ufs_dir_p->last_ent);
 8014188:	f7ff f80a 	bl	80131a0 <lv_ll_get_next>
 801418c:	4603      	mov	r3, r0
 801418e:	6020      	str	r0, [r4, #0]
    if(ufs_dir_p->last_ent != NULL) {
 8014190:	b12b      	cbz	r3, 801419e <lv_ufs_dir_read+0x22>
        strcpy(fn, ufs_dir_p->last_ent->fn_d);
 8014192:	6819      	ldr	r1, [r3, #0]
 8014194:	4628      	mov	r0, r5
 8014196:	f009 fc34 	bl	801da02 <strcpy>
}
 801419a:	2000      	movs	r0, #0
 801419c:	bd38      	pop	{r3, r4, r5, pc}
        fn[0] = '\0';
 801419e:	702b      	strb	r3, [r5, #0]
}
 80141a0:	2000      	movs	r0, #0
 80141a2:	bd38      	pop	{r3, r4, r5, pc}
        ufs_dir_p->last_ent = lv_ll_get_head(&LV_GC_ROOT(_lv_file_ll));
 80141a4:	f7fe fff4 	bl	8013190 <lv_ll_get_head>
 80141a8:	6020      	str	r0, [r4, #0]
 80141aa:	4603      	mov	r3, r0
 80141ac:	e7f0      	b.n	8014190 <lv_ufs_dir_read+0x14>
 80141ae:	bf00      	nop
 80141b0:	200194ec 	.word	0x200194ec

080141b4 <lv_ufs_read>:
{
 80141b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_ufs_ent_t * ent = fp->ent;
 80141b6:	6806      	ldr	r6, [r0, #0]
    *br = 0;
 80141b8:	2400      	movs	r4, #0
{
 80141ba:	b083      	sub	sp, #12
    if(ent->data_d == NULL || ent->size == 0) { /*Don't read empty files*/
 80141bc:	6877      	ldr	r7, [r6, #4]
    *br = 0;
 80141be:	601c      	str	r4, [r3, #0]
    if(ent->data_d == NULL || ent->size == 0) { /*Don't read empty files*/
 80141c0:	b1ff      	cbz	r7, 8014202 <lv_ufs_read+0x4e>
 80141c2:	68b4      	ldr	r4, [r6, #8]
 80141c4:	b134      	cbz	r4, 80141d4 <lv_ufs_read+0x20>
 80141c6:	4605      	mov	r5, r0
    } else if(fp->ar == 0) {    /*The file is not opened for read*/
 80141c8:	7a00      	ldrb	r0, [r0, #8]
 80141ca:	07c0      	lsls	r0, r0, #31
 80141cc:	d405      	bmi.n	80141da <lv_ufs_read+0x26>
        return LV_FS_RES_DENIED;
 80141ce:	2006      	movs	r0, #6
}
 80141d0:	b003      	add	sp, #12
 80141d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LV_FS_RES_OK;
 80141d4:	4620      	mov	r0, r4
}
 80141d6:	b003      	add	sp, #12
 80141d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(fp->rwp + btr > ent->size) {  /*Check too much bytes read*/
 80141da:	6868      	ldr	r0, [r5, #4]
 80141dc:	9301      	str	r3, [sp, #4]
 80141de:	1886      	adds	r6, r0, r2
 80141e0:	42b4      	cmp	r4, r6
        *br =  ent->size - fp->rwp;
 80141e2:	bf38      	it	cc
 80141e4:	1a22      	subcc	r2, r4, r0
    memcpy(buf, data8_p, *br);
 80141e6:	4608      	mov	r0, r1
 80141e8:	601a      	str	r2, [r3, #0]
    data8_p += fp->rwp;
 80141ea:	686c      	ldr	r4, [r5, #4]
    memcpy(buf, data8_p, *br);
 80141ec:	1939      	adds	r1, r7, r4
 80141ee:	f009 fbf5 	bl	801d9dc <memcpy>
    fp->rwp += *br; /*Refresh the read write pointer*/
 80141f2:	9b01      	ldr	r3, [sp, #4]
    return LV_FS_RES_OK;
 80141f4:	2000      	movs	r0, #0
    fp->rwp += *br; /*Refresh the read write pointer*/
 80141f6:	681a      	ldr	r2, [r3, #0]
 80141f8:	686b      	ldr	r3, [r5, #4]
 80141fa:	4413      	add	r3, r2
 80141fc:	606b      	str	r3, [r5, #4]
}
 80141fe:	b003      	add	sp, #12
 8014200:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LV_FS_RES_OK;
 8014202:	4638      	mov	r0, r7
}
 8014204:	b003      	add	sp, #12
 8014206:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014208 <lv_ufs_seek>:
{
 8014208:	b570      	push	{r4, r5, r6, lr}
    lv_ufs_ent_t * ent = fp->ent;
 801420a:	6806      	ldr	r6, [r0, #0]
{
 801420c:	460d      	mov	r5, r1
    if(pos < ent->size) {
 801420e:	68b2      	ldr	r2, [r6, #8]
 8014210:	428a      	cmp	r2, r1
 8014212:	d804      	bhi.n	801421e <lv_ufs_seek+0x16>
        if(fp->aw == 0) return LV_FS_RES_DENIED;       /*Not opened for write*/
 8014214:	7a02      	ldrb	r2, [r0, #8]
 8014216:	0793      	lsls	r3, r2, #30
 8014218:	d404      	bmi.n	8014224 <lv_ufs_seek+0x1c>
 801421a:	2006      	movs	r0, #6
}
 801421c:	bd70      	pop	{r4, r5, r6, pc}
        fp->rwp = pos;
 801421e:	6041      	str	r1, [r0, #4]
    return LV_FS_RES_OK;
 8014220:	2000      	movs	r0, #0
 8014222:	bd70      	pop	{r4, r5, r6, pc}
 8014224:	4604      	mov	r4, r0
        uint8_t * new_data = lv_mem_realloc(ent->data_d, pos);
 8014226:	6870      	ldr	r0, [r6, #4]
 8014228:	f7ff f87a 	bl	8013320 <lv_mem_realloc>
        lv_mem_assert(new_data);
 801422c:	b120      	cbz	r0, 8014238 <lv_ufs_seek+0x30>
        ent->data_d = new_data;
 801422e:	6070      	str	r0, [r6, #4]
    return LV_FS_RES_OK;
 8014230:	2000      	movs	r0, #0
        ent->size = pos;
 8014232:	60b5      	str	r5, [r6, #8]
        fp->rwp = pos;
 8014234:	6065      	str	r5, [r4, #4]
 8014236:	bd70      	pop	{r4, r5, r6, pc}
 8014238:	e7fe      	b.n	8014238 <lv_ufs_seek+0x30>
 801423a:	bf00      	nop

0801423c <lv_ufs_trunc>:
{
 801423c:	b538      	push	{r3, r4, r5, lr}
    if(fp->aw == 0) return LV_FS_RES_DENIED; /*Not opened for write*/
 801423e:	7a03      	ldrb	r3, [r0, #8]
 8014240:	079b      	lsls	r3, r3, #30
 8014242:	d401      	bmi.n	8014248 <lv_ufs_trunc+0xc>
 8014244:	2006      	movs	r0, #6
}
 8014246:	bd38      	pop	{r3, r4, r5, pc}
    lv_ufs_ent_t * ent = fp->ent;
 8014248:	6805      	ldr	r5, [r0, #0]
 801424a:	4604      	mov	r4, r0
    void * new_data = lv_mem_realloc(ent->data_d, fp->rwp);
 801424c:	6841      	ldr	r1, [r0, #4]
 801424e:	6868      	ldr	r0, [r5, #4]
 8014250:	f7ff f866 	bl	8013320 <lv_mem_realloc>
    lv_mem_assert(new_data);
 8014254:	4603      	mov	r3, r0
 8014256:	b120      	cbz	r0, 8014262 <lv_ufs_trunc+0x26>
    ent->size = fp->rwp;
 8014258:	6862      	ldr	r2, [r4, #4]
    return LV_FS_RES_OK;
 801425a:	2000      	movs	r0, #0
    ent->data_d = new_data;
 801425c:	606b      	str	r3, [r5, #4]
    ent->size = fp->rwp;
 801425e:	60aa      	str	r2, [r5, #8]
    return LV_FS_RES_OK;
 8014260:	bd38      	pop	{r3, r4, r5, pc}
 8014262:	e7fe      	b.n	8014262 <lv_ufs_trunc+0x26>

08014264 <lv_ufs_free>:
{
 8014264:	b530      	push	{r4, r5, lr}
 8014266:	b087      	sub	sp, #28
 8014268:	4605      	mov	r5, r0
 801426a:	460c      	mov	r4, r1
    lv_mem_monitor(&mon);
 801426c:	4668      	mov	r0, sp
 801426e:	f7ff f91b 	bl	80134a8 <lv_mem_monitor>
    *free_p = mon.free_size >> 10;
 8014272:	9b02      	ldr	r3, [sp, #8]
    *total_p = LV_MEM_SIZE >> 10;    /*Convert bytes to kB*/
 8014274:	2220      	movs	r2, #32
}
 8014276:	2000      	movs	r0, #0
    *free_p = mon.free_size >> 10;
 8014278:	0a9b      	lsrs	r3, r3, #10
    *total_p = LV_MEM_SIZE >> 10;    /*Convert bytes to kB*/
 801427a:	602a      	str	r2, [r5, #0]
    *free_p = mon.free_size >> 10;
 801427c:	6023      	str	r3, [r4, #0]
}
 801427e:	b007      	add	sp, #28
 8014280:	bd30      	pop	{r4, r5, pc}
 8014282:	bf00      	nop

08014284 <lv_ufs_write>:
{
 8014284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    *bw = 0;
 8014288:	2400      	movs	r4, #0
 801428a:	601c      	str	r4, [r3, #0]
    if(fp->aw == 0) return LV_FS_RES_DENIED; /*Not opened for write*/
 801428c:	7a04      	ldrb	r4, [r0, #8]
 801428e:	07a4      	lsls	r4, r4, #30
 8014290:	d402      	bmi.n	8014298 <lv_ufs_write+0x14>
 8014292:	2006      	movs	r0, #6
}
 8014294:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014298:	4616      	mov	r6, r2
    lv_ufs_ent_t * ent = fp->ent;
 801429a:	6807      	ldr	r7, [r0, #0]
 801429c:	4605      	mov	r5, r0
    uint32_t new_size = fp->rwp + btw;
 801429e:	6840      	ldr	r0, [r0, #4]
    if(new_size > ent->size) {
 80142a0:	68ba      	ldr	r2, [r7, #8]
 80142a2:	4688      	mov	r8, r1
    uint32_t new_size = fp->rwp + btw;
 80142a4:	eb06 0900 	add.w	r9, r6, r0
 80142a8:	461c      	mov	r4, r3
    if(new_size > ent->size) {
 80142aa:	4591      	cmp	r9, r2
 80142ac:	d90a      	bls.n	80142c4 <lv_ufs_write+0x40>
        uint8_t * new_data = lv_mem_realloc(ent->data_d, new_size);
 80142ae:	4649      	mov	r1, r9
 80142b0:	6878      	ldr	r0, [r7, #4]
 80142b2:	f7ff f835 	bl	8013320 <lv_mem_realloc>
        lv_mem_assert(new_data);
 80142b6:	b190      	cbz	r0, 80142de <lv_ufs_write+0x5a>
        ent->size = new_size;
 80142b8:	4602      	mov	r2, r0
        ent->data_d = new_data;
 80142ba:	6078      	str	r0, [r7, #4]
 80142bc:	6868      	ldr	r0, [r5, #4]
        ent->size = new_size;
 80142be:	f8c7 9008 	str.w	r9, [r7, #8]
 80142c2:	e000      	b.n	80142c6 <lv_ufs_write+0x42>
 80142c4:	687a      	ldr	r2, [r7, #4]
    memcpy(data8_p, buf, btw);
 80142c6:	4641      	mov	r1, r8
 80142c8:	4410      	add	r0, r2
 80142ca:	4632      	mov	r2, r6
 80142cc:	f009 fb86 	bl	801d9dc <memcpy>
    *bw = btw;
 80142d0:	6026      	str	r6, [r4, #0]
    fp->rwp += *bw;
 80142d2:	686b      	ldr	r3, [r5, #4]
 80142d4:	2000      	movs	r0, #0
 80142d6:	4433      	add	r3, r6
 80142d8:	606b      	str	r3, [r5, #4]
 80142da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80142de:	e7fe      	b.n	80142de <lv_ufs_write+0x5a>

080142e0 <lv_ufs_remove>:
{
 80142e0:	b570      	push	{r4, r5, r6, lr}
 80142e2:	4605      	mov	r5, r0
    LL_READ(LV_GC_ROOT(_lv_file_ll), fp) {
 80142e4:	4816      	ldr	r0, [pc, #88]	; (8014340 <lv_ufs_remove+0x60>)
 80142e6:	f7fe ff53 	bl	8013190 <lv_ll_get_head>
 80142ea:	b180      	cbz	r0, 801430e <lv_ufs_remove+0x2e>
 80142ec:	4604      	mov	r4, r0
 80142ee:	4e14      	ldr	r6, [pc, #80]	; (8014340 <lv_ufs_remove+0x60>)
 80142f0:	e004      	b.n	80142fc <lv_ufs_remove+0x1c>
 80142f2:	4630      	mov	r0, r6
 80142f4:	f7fe ff54 	bl	80131a0 <lv_ll_get_next>
 80142f8:	4604      	mov	r4, r0
 80142fa:	b140      	cbz	r0, 801430e <lv_ufs_remove+0x2e>
        if(strcmp(fp->fn_d, fn) == 0) {
 80142fc:	4629      	mov	r1, r5
 80142fe:	6820      	ldr	r0, [r4, #0]
 8014300:	f7eb ff82 	bl	8000208 <strcmp>
    LL_READ(LV_GC_ROOT(_lv_file_ll), fp) {
 8014304:	4621      	mov	r1, r4
        if(strcmp(fp->fn_d, fn) == 0) {
 8014306:	2800      	cmp	r0, #0
 8014308:	d1f3      	bne.n	80142f2 <lv_ufs_remove+0x12>
    if(ent->oc != 0) return LV_FS_RES_DENIED;
 801430a:	89a5      	ldrh	r5, [r4, #12]
 801430c:	b10d      	cbz	r5, 8014312 <lv_ufs_remove+0x32>
    if(ent == NULL) return LV_FS_RES_DENIED;    /*File not exists*/
 801430e:	2006      	movs	r0, #6
 8014310:	bd70      	pop	{r4, r5, r6, pc}
    lv_ll_rem(&LV_GC_ROOT(_lv_file_ll), ent);
 8014312:	4621      	mov	r1, r4
 8014314:	480a      	ldr	r0, [pc, #40]	; (8014340 <lv_ufs_remove+0x60>)
 8014316:	f7fe fe6f 	bl	8012ff8 <lv_ll_rem>
    lv_mem_free(ent->fn_d);
 801431a:	6820      	ldr	r0, [r4, #0]
 801431c:	f7fe ffa6 	bl	801326c <lv_mem_free>
    if(ent->const_data == 0) {
 8014320:	7ba3      	ldrb	r3, [r4, #14]
    ent->fn_d = NULL;
 8014322:	6025      	str	r5, [r4, #0]
    if(ent->const_data == 0) {
 8014324:	f013 0501 	ands.w	r5, r3, #1
 8014328:	d004      	beq.n	8014334 <lv_ufs_remove+0x54>
    lv_mem_free(ent);
 801432a:	4620      	mov	r0, r4
 801432c:	f7fe ff9e 	bl	801326c <lv_mem_free>
    return LV_FS_RES_OK;
 8014330:	2000      	movs	r0, #0
 8014332:	bd70      	pop	{r4, r5, r6, pc}
        lv_mem_free(ent->data_d);
 8014334:	6860      	ldr	r0, [r4, #4]
 8014336:	f7fe ff99 	bl	801326c <lv_mem_free>
        ent->data_d = NULL;
 801433a:	6065      	str	r5, [r4, #4]
 801433c:	e7f5      	b.n	801432a <lv_ufs_remove+0x4a>
 801433e:	bf00      	nop
 8014340:	200194ec 	.word	0x200194ec

08014344 <lv_ufs_init>:
{
 8014344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014346:	b093      	sub	sp, #76	; 0x4c
    lv_ll_init(&LV_GC_ROOT(_lv_file_ll), sizeof(lv_ufs_ent_t));
 8014348:	2110      	movs	r1, #16
 801434a:	4819      	ldr	r0, [pc, #100]	; (80143b0 <lv_ufs_init+0x6c>)
 801434c:	f7fe fdd8 	bl	8012f00 <lv_ll_init>
    memset(&ufs_drv, 0, sizeof(lv_fs_drv_t));    /*Initialization*/
 8014350:	a801      	add	r0, sp, #4
 8014352:	2244      	movs	r2, #68	; 0x44
 8014354:	2100      	movs	r1, #0
 8014356:	f009 fb4c 	bl	801d9f2 <memset>
    ufs_drv.file_size = sizeof(lv_ufs_file_t);
 801435a:	4a16      	ldr	r2, [pc, #88]	; (80143b4 <lv_ufs_init+0x70>)
    ufs_drv.letter = UFS_LETTER;
 801435c:	2355      	movs	r3, #85	; 0x55
    ufs_drv.ready = lv_ufs_ready;
 801435e:	4f16      	ldr	r7, [pc, #88]	; (80143b8 <lv_ufs_init+0x74>)
    ufs_drv.file_size = sizeof(lv_ufs_file_t);
 8014360:	f8cd 2006 	str.w	r2, [sp, #6]
    lv_fs_add_drv(&ufs_drv);
 8014364:	a801      	add	r0, sp, #4
    ufs_drv.letter = UFS_LETTER;
 8014366:	f88d 3004 	strb.w	r3, [sp, #4]
    ufs_drv.open = lv_ufs_open;
 801436a:	4e14      	ldr	r6, [pc, #80]	; (80143bc <lv_ufs_init+0x78>)
    ufs_drv.close = lv_ufs_close;
 801436c:	4d14      	ldr	r5, [pc, #80]	; (80143c0 <lv_ufs_init+0x7c>)
    ufs_drv.remove = lv_ufs_remove;
 801436e:	4c15      	ldr	r4, [pc, #84]	; (80143c4 <lv_ufs_init+0x80>)
    ufs_drv.read = lv_ufs_read;
 8014370:	4915      	ldr	r1, [pc, #84]	; (80143c8 <lv_ufs_init+0x84>)
    ufs_drv.write = lv_ufs_write;
 8014372:	4a16      	ldr	r2, [pc, #88]	; (80143cc <lv_ufs_init+0x88>)
    ufs_drv.seek = lv_ufs_seek;
 8014374:	4b16      	ldr	r3, [pc, #88]	; (80143d0 <lv_ufs_init+0x8c>)
    ufs_drv.ready = lv_ufs_ready;
 8014376:	9703      	str	r7, [sp, #12]
    ufs_drv.open = lv_ufs_open;
 8014378:	9604      	str	r6, [sp, #16]
    ufs_drv.close = lv_ufs_close;
 801437a:	9505      	str	r5, [sp, #20]
    ufs_drv.remove = lv_ufs_remove;
 801437c:	9406      	str	r4, [sp, #24]
    ufs_drv.read = lv_ufs_read;
 801437e:	9107      	str	r1, [sp, #28]
    ufs_drv.write = lv_ufs_write;
 8014380:	9208      	str	r2, [sp, #32]
    ufs_drv.dir_open = lv_ufs_dir_open;
 8014382:	4914      	ldr	r1, [pc, #80]	; (80143d4 <lv_ufs_init+0x90>)
    ufs_drv.dir_read = lv_ufs_dir_read;
 8014384:	4a14      	ldr	r2, [pc, #80]	; (80143d8 <lv_ufs_init+0x94>)
    ufs_drv.seek = lv_ufs_seek;
 8014386:	9309      	str	r3, [sp, #36]	; 0x24
    ufs_drv.tell = lv_ufs_tell;
 8014388:	4f14      	ldr	r7, [pc, #80]	; (80143dc <lv_ufs_init+0x98>)
    ufs_drv.dir_close = lv_ufs_dir_close;
 801438a:	4b15      	ldr	r3, [pc, #84]	; (80143e0 <lv_ufs_init+0x9c>)
    ufs_drv.size = lv_ufs_size;
 801438c:	4e15      	ldr	r6, [pc, #84]	; (80143e4 <lv_ufs_init+0xa0>)
    ufs_drv.trunc = lv_ufs_trunc;
 801438e:	4d16      	ldr	r5, [pc, #88]	; (80143e8 <lv_ufs_init+0xa4>)
    ufs_drv.free = lv_ufs_free;
 8014390:	4c16      	ldr	r4, [pc, #88]	; (80143ec <lv_ufs_init+0xa8>)
    ufs_drv.dir_read = lv_ufs_dir_read;
 8014392:	9210      	str	r2, [sp, #64]	; 0x40
    ufs_drv.dir_close = lv_ufs_dir_close;
 8014394:	9311      	str	r3, [sp, #68]	; 0x44
    ufs_drv.tell = lv_ufs_tell;
 8014396:	970a      	str	r7, [sp, #40]	; 0x28
    ufs_drv.size = lv_ufs_size;
 8014398:	960c      	str	r6, [sp, #48]	; 0x30
    ufs_drv.trunc = lv_ufs_trunc;
 801439a:	950b      	str	r5, [sp, #44]	; 0x2c
    ufs_drv.free = lv_ufs_free;
 801439c:	940e      	str	r4, [sp, #56]	; 0x38
    ufs_drv.dir_open = lv_ufs_dir_open;
 801439e:	910f      	str	r1, [sp, #60]	; 0x3c
    lv_fs_add_drv(&ufs_drv);
 80143a0:	f7fe fd9e 	bl	8012ee0 <lv_fs_add_drv>
    inited = true;
 80143a4:	4b12      	ldr	r3, [pc, #72]	; (80143f0 <lv_ufs_init+0xac>)
 80143a6:	2201      	movs	r2, #1
 80143a8:	701a      	strb	r2, [r3, #0]
}
 80143aa:	b013      	add	sp, #76	; 0x4c
 80143ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80143ae:	bf00      	nop
 80143b0:	200194ec 	.word	0x200194ec
 80143b4:	0004000c 	.word	0x0004000c
 80143b8:	08014071 	.word	0x08014071
 80143bc:	080140b5 	.word	0x080140b5
 80143c0:	0801407d 	.word	0x0801407d
 80143c4:	080142e1 	.word	0x080142e1
 80143c8:	080141b5 	.word	0x080141b5
 80143cc:	08014285 	.word	0x08014285
 80143d0:	08014209 	.word	0x08014209
 80143d4:	080140a1 	.word	0x080140a1
 80143d8:	0801417d 	.word	0x0801417d
 80143dc:	0801408d 	.word	0x0801408d
 80143e0:	080140b1 	.word	0x080140b1
 80143e4:	08014095 	.word	0x08014095
 80143e8:	0801423d 	.word	0x0801423d
 80143ec:	08014265 	.word	0x08014265
 80143f0:	200165e8 	.word	0x200165e8

080143f4 <lv_bar_set_value>:
 * Set a new value on the bar
 * @param bar pointer to a bar object
 * @param value new value
 */
void lv_bar_set_value(lv_obj_t * bar, int16_t value)
{
 80143f4:	b538      	push	{r3, r4, r5, lr}
 80143f6:	460c      	mov	r4, r1
 80143f8:	4605      	mov	r5, r0
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 80143fa:	f7f7 fd8d 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->cur_value == value) return;
 80143fe:	f9b0 2000 	ldrsh.w	r2, [r0]
 8014402:	42a2      	cmp	r2, r4
 8014404:	d011      	beq.n	801442a <lv_bar_set_value+0x36>

    ext->cur_value = value > ext->max_value ? ext->max_value : value;
 8014406:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801440a:	4603      	mov	r3, r0
    ext->cur_value = ext->cur_value < ext->min_value ? ext->min_value : ext->cur_value;
    lv_obj_invalidate(bar);
 801440c:	4628      	mov	r0, r5
    ext->cur_value = ext->cur_value < ext->min_value ? ext->min_value : ext->cur_value;
 801440e:	42a2      	cmp	r2, r4
 8014410:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
 8014414:	bfa8      	it	ge
 8014416:	4622      	movge	r2, r4
 8014418:	42aa      	cmp	r2, r5
 801441a:	4611      	mov	r1, r2
 801441c:	bfb8      	it	lt
 801441e:	4629      	movlt	r1, r5
 8014420:	8019      	strh	r1, [r3, #0]
}
 8014422:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(bar);
 8014426:	f7f5 bc5b 	b.w	8009ce0 <lv_obj_invalidate>
 801442a:	bd38      	pop	{r3, r4, r5, pc}

0801442c <lv_bar_design>:
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_bar_design(lv_obj_t * bar, const lv_area_t * mask, lv_design_mode_t mode)
{
    if(mode == LV_DESIGN_COVER_CHK) {
 801442c:	2a02      	cmp	r2, #2
{
 801442e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014432:	b093      	sub	sp, #76	; 0x4c
    if(mode == LV_DESIGN_COVER_CHK) {
 8014434:	f000 80f2 	beq.w	801461c <lv_bar_design+0x1f0>
 8014438:	4614      	mov	r4, r2
 801443a:	4605      	mov	r5, r0
 801443c:	460e      	mov	r6, r1
        /*Return false if the object is not covers the mask area*/
        return  ancestor_design_f(bar, mask, mode);
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 801443e:	b13a      	cbz	r2, 8014450 <lv_bar_design+0x24>


            /*Draw the indicator*/
            lv_draw_rect(&indic_area, mask, style_indic, opa_scale);
        }
    } else if(mode == LV_DESIGN_DRAW_POST) {
 8014440:	2a01      	cmp	r2, #1
 8014442:	f000 8097 	beq.w	8014574 <lv_bar_design+0x148>
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
        }
#endif

    }
    return true;
 8014446:	2401      	movs	r4, #1
}
 8014448:	4620      	mov	r0, r4
 801444a:	b013      	add	sp, #76	; 0x4c
 801444c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        lv_opa_t opa_scale = lv_obj_get_opa_scale(bar);
 8014450:	f7f7 fd42 	bl	800bed8 <lv_obj_get_opa_scale>
 8014454:	4607      	mov	r7, r0
        if(lv_obj_is_focused(bar)) {
 8014456:	4628      	mov	r0, r5
 8014458:	f7f7 fd62 	bl	800bf20 <lv_obj_is_focused>
 801445c:	2800      	cmp	r0, #0
 801445e:	d175      	bne.n	801454c <lv_bar_design+0x120>
            ancestor_design_f(bar, mask, mode);
 8014460:	4b76      	ldr	r3, [pc, #472]	; (801463c <lv_bar_design+0x210>)
 8014462:	4602      	mov	r2, r0
 8014464:	4631      	mov	r1, r6
 8014466:	4628      	mov	r0, r5
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	4798      	blx	r3
        lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 801446c:	4628      	mov	r0, r5
 801446e:	f7f7 fd53 	bl	800bf18 <lv_obj_get_ext_attr>
        if(ext->cur_value != ext->min_value || ext->sym) {
 8014472:	f9b0 2000 	ldrsh.w	r2, [r0]
 8014476:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
        lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 801447a:	4604      	mov	r4, r0
        if(ext->cur_value != ext->min_value || ext->sym) {
 801447c:	429a      	cmp	r2, r3
 801447e:	d102      	bne.n	8014486 <lv_bar_design+0x5a>
 8014480:	7983      	ldrb	r3, [r0, #6]
 8014482:	07db      	lsls	r3, r3, #31
 8014484:	d5df      	bpl.n	8014446 <lv_bar_design+0x1a>
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8014486:	4628      	mov	r0, r5
 8014488:	f7f7 fd46 	bl	800bf18 <lv_obj_get_ext_attr>
            style = ext->style_indic;
 801448c:	6882      	ldr	r2, [r0, #8]
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    memcpy(dest, src, sizeof(lv_area_t));
 801448e:	f855 0f10 	ldr.w	r0, [r5, #16]!
 8014492:	466b      	mov	r3, sp
 8014494:	6869      	ldr	r1, [r5, #4]
 8014496:	c303      	stmia	r3!, {r0, r1}
            indic_area.y1 += style_indic->body.padding.ver;
 8014498:	8c13      	ldrh	r3, [r2, #32]
            indic_area.y2 -= style_indic->body.padding.ver;
 801449a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
            indic_area.x1 += style_indic->body.padding.hor;
 801449e:	8c51      	ldrh	r1, [r2, #34]	; 0x22
            indic_area.y2 -= style_indic->body.padding.ver;
 80144a0:	1ac0      	subs	r0, r0, r3
            indic_area.x2 -= style_indic->body.padding.hor;
 80144a2:	f8bd 5004 	ldrh.w	r5, [sp, #4]
            indic_area.y1 += style_indic->body.padding.ver;
 80144a6:	f8bd e002 	ldrh.w	lr, [sp, #2]
            indic_area.x2 -= style_indic->body.padding.hor;
 80144aa:	1a6d      	subs	r5, r5, r1
            indic_area.y2 -= style_indic->body.padding.ver;
 80144ac:	b280      	uxth	r0, r0
            indic_area.x1 += style_indic->body.padding.hor;
 80144ae:	f8bd 8000 	ldrh.w	r8, [sp]
            indic_area.y1 += style_indic->body.padding.ver;
 80144b2:	4473      	add	r3, lr
 80144b4:	f100 0c01 	add.w	ip, r0, #1
            indic_area.x2 -= style_indic->body.padding.hor;
 80144b8:	fa1f fe85 	uxth.w	lr, r5
            indic_area.x1 += style_indic->body.padding.hor;
 80144bc:	4441      	add	r1, r8
            indic_area.y1 += style_indic->body.padding.ver;
 80144be:	b29b      	uxth	r3, r3
 80144c0:	fa1f fc8c 	uxth.w	ip, ip
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 80144c4:	f10e 0501 	add.w	r5, lr, #1
            indic_area.x1 += style_indic->body.padding.hor;
 80144c8:	b289      	uxth	r1, r1
            indic_area.y1 += style_indic->body.padding.ver;
 80144ca:	f8ad 3002 	strh.w	r3, [sp, #2]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 80144ce:	ebac 0303 	sub.w	r3, ip, r3
            indic_area.y2 -= style_indic->body.padding.ver;
 80144d2:	f8ad 0006 	strh.w	r0, [sp, #6]
    return area_p->x2 - area_p->x1 + 1;
 80144d6:	1a6d      	subs	r5, r5, r1
            indic_area.x2 -= style_indic->body.padding.hor;
 80144d8:	f8ad e004 	strh.w	lr, [sp, #4]
    return area_p->y2 - area_p->y1 + 1;
 80144dc:	b21b      	sxth	r3, r3
            indic_area.x1 += style_indic->body.padding.hor;
 80144de:	f8ad 1000 	strh.w	r1, [sp]
    return area_p->x2 - area_p->x1 + 1;
 80144e2:	b22d      	sxth	r5, r5
            if(w >= h) {
 80144e4:	42ab      	cmp	r3, r5
 80144e6:	dc6b      	bgt.n	80145c0 <lv_bar_design+0x194>
                indic_area.x2 = (int32_t)((int32_t)w * (ext->cur_value - ext->min_value)) / (ext->max_value - ext->min_value);
 80144e8:	f9b4 e002 	ldrsh.w	lr, [r4, #2]
                indic_area.x2 = indic_area.x1 + indic_area.x2 - 1;
 80144ec:	1e4b      	subs	r3, r1, #1
                indic_area.x2 = (int32_t)((int32_t)w * (ext->cur_value - ext->min_value)) / (ext->max_value - ext->min_value);
 80144ee:	f9b4 0000 	ldrsh.w	r0, [r4]
 80144f2:	f9b4 8004 	ldrsh.w	r8, [r4, #4]
 80144f6:	eba0 000e 	sub.w	r0, r0, lr
 80144fa:	eba8 0c0e 	sub.w	ip, r8, lr
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 80144fe:	f1b8 0f00 	cmp.w	r8, #0
                indic_area.x2 = (int32_t)((int32_t)w * (ext->cur_value - ext->min_value)) / (ext->max_value - ext->min_value);
 8014502:	fb05 f000 	mul.w	r0, r5, r0
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 8014506:	bfd4      	ite	le
 8014508:	f04f 0800 	movle.w	r8, #0
 801450c:	f04f 0801 	movgt.w	r8, #1
                indic_area.x2 = (int32_t)((int32_t)w * (ext->cur_value - ext->min_value)) / (ext->max_value - ext->min_value);
 8014510:	fb90 f0fc 	sdiv	r0, r0, ip
                indic_area.x2 = indic_area.x1 + indic_area.x2 - 1;
 8014514:	4403      	add	r3, r0
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 8014516:	ea18 70de 	ands.w	r0, r8, lr, lsr #31
                indic_area.x2 = indic_area.x1 + indic_area.x2 - 1;
 801451a:	b21b      	sxth	r3, r3
 801451c:	f8ad 3004 	strh.w	r3, [sp, #4]
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 8014520:	d00e      	beq.n	8014540 <lv_bar_design+0x114>
 8014522:	79a0      	ldrb	r0, [r4, #6]
 8014524:	07c0      	lsls	r0, r0, #31
 8014526:	d50b      	bpl.n	8014540 <lv_bar_design+0x114>
                    zero = indic_area.x1 + (-ext->min_value * w) / (ext->max_value - ext->min_value);
 8014528:	f1ce 0e00 	rsb	lr, lr, #0
 801452c:	fb05 f50e 	mul.w	r5, r5, lr
 8014530:	fb95 f5fc 	sdiv	r5, r5, ip
 8014534:	4429      	add	r1, r5
 8014536:	b209      	sxth	r1, r1
                    if(indic_area.x2 > zero) indic_area.x1 = zero;
 8014538:	428b      	cmp	r3, r1
 801453a:	dd79      	ble.n	8014630 <lv_bar_design+0x204>
 801453c:	f8ad 1000 	strh.w	r1, [sp]
            lv_draw_rect(&indic_area, mask, style_indic, opa_scale);
 8014540:	463b      	mov	r3, r7
 8014542:	4631      	mov	r1, r6
 8014544:	4668      	mov	r0, sp
 8014546:	f7fb fba5 	bl	800fc94 <lv_draw_rect>
 801454a:	e77c      	b.n	8014446 <lv_bar_design+0x1a>
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 801454c:	4628      	mov	r0, r5
 801454e:	f7f7 fce3 	bl	800bf18 <lv_obj_get_ext_attr>
            style = lv_obj_get_style(bar);
 8014552:	4628      	mov	r0, r5
 8014554:	f7f7 fc62 	bl	800be1c <lv_obj_get_style>
            lv_style_copy(&style_tmp, style_bg);
 8014558:	4601      	mov	r1, r0
 801455a:	4668      	mov	r0, sp
 801455c:	f7f8 f9da 	bl	800c914 <lv_style_copy>
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
 8014560:	466a      	mov	r2, sp
 8014562:	463b      	mov	r3, r7
 8014564:	4631      	mov	r1, r6
 8014566:	f105 0010 	add.w	r0, r5, #16
            style_tmp.body.border.width = 0;
 801456a:	f8ad 4014 	strh.w	r4, [sp, #20]
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
 801456e:	f7fb fb91 	bl	800fc94 <lv_draw_rect>
 8014572:	e77b      	b.n	801446c <lv_bar_design+0x40>
        if(lv_obj_is_focused(bar)) {
 8014574:	f7f7 fcd4 	bl	800bf20 <lv_obj_is_focused>
 8014578:	4604      	mov	r4, r0
 801457a:	2800      	cmp	r0, #0
 801457c:	f43f af63 	beq.w	8014446 <lv_bar_design+0x1a>
            lv_opa_t opa_scale = lv_obj_get_opa_scale(bar);
 8014580:	4628      	mov	r0, r5
 8014582:	f7f7 fca9 	bl	800bed8 <lv_obj_get_opa_scale>
 8014586:	4680      	mov	r8, r0
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8014588:	4628      	mov	r0, r5
 801458a:	f7f7 fcc5 	bl	800bf18 <lv_obj_get_ext_attr>
            style = lv_obj_get_style(bar);
 801458e:	4628      	mov	r0, r5
 8014590:	f7f7 fc44 	bl	800be1c <lv_obj_get_style>
            lv_style_copy(&style_tmp, style_bg);
 8014594:	4601      	mov	r1, r0
 8014596:	4668      	mov	r0, sp
 8014598:	f7f8 f9bc 	bl	800c914 <lv_style_copy>
            style_tmp.body.empty = 1;
 801459c:	f89d 7026 	ldrb.w	r7, [sp, #38]	; 0x26
            style_tmp.body.shadow.width = 0;
 80145a0:	f04f 0e00 	mov.w	lr, #0
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
 80145a4:	4643      	mov	r3, r8
            style_tmp.body.empty = 1;
 80145a6:	f047 0701 	orr.w	r7, r7, #1
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
 80145aa:	466a      	mov	r2, sp
 80145ac:	4631      	mov	r1, r6
 80145ae:	f105 0010 	add.w	r0, r5, #16
            style_tmp.body.empty = 1;
 80145b2:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
            style_tmp.body.shadow.width = 0;
 80145b6:	f8ad e01c 	strh.w	lr, [sp, #28]
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
 80145ba:	f7fb fb6b 	bl	800fc94 <lv_draw_rect>
 80145be:	e743      	b.n	8014448 <lv_bar_design+0x1c>
                indic_area.y1 = (int32_t)((int32_t)h * (ext->cur_value - ext->min_value)) / (ext->max_value - ext->min_value);
 80145c0:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
 80145c4:	f9b4 1000 	ldrsh.w	r1, [r4]
 80145c8:	f9b4 e004 	ldrsh.w	lr, [r4, #4]
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 80145cc:	ea4f 79d5 	mov.w	r9, r5, lsr #31
                indic_area.y1 = (int32_t)((int32_t)h * (ext->cur_value - ext->min_value)) / (ext->max_value - ext->min_value);
 80145d0:	1b49      	subs	r1, r1, r5
 80145d2:	ebae 0805 	sub.w	r8, lr, r5
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 80145d6:	f1be 0f00 	cmp.w	lr, #0
 80145da:	bfd4      	ite	le
 80145dc:	f04f 0e00 	movle.w	lr, #0
 80145e0:	f009 0e01 	andgt.w	lr, r9, #1
                indic_area.y1 = (int32_t)((int32_t)h * (ext->cur_value - ext->min_value)) / (ext->max_value - ext->min_value);
 80145e4:	fb03 f101 	mul.w	r1, r3, r1
 80145e8:	fb91 f1f8 	sdiv	r1, r1, r8
                indic_area.y1 = indic_area.y2 - indic_area.y1 + 1;
 80145ec:	ebac 0101 	sub.w	r1, ip, r1
 80145f0:	b209      	sxth	r1, r1
 80145f2:	f8ad 1002 	strh.w	r1, [sp, #2]
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 80145f6:	f1be 0f00 	cmp.w	lr, #0
 80145fa:	d0a1      	beq.n	8014540 <lv_bar_design+0x114>
 80145fc:	79a4      	ldrb	r4, [r4, #6]
 80145fe:	07e4      	lsls	r4, r4, #31
 8014600:	d59e      	bpl.n	8014540 <lv_bar_design+0x114>
                    zero = indic_area.y2 - (-ext->min_value * h) / (ext->max_value - ext->min_value);
 8014602:	426d      	negs	r5, r5
 8014604:	fb03 f305 	mul.w	r3, r3, r5
 8014608:	fb93 f8f8 	sdiv	r8, r3, r8
 801460c:	eba0 0008 	sub.w	r0, r0, r8
 8014610:	b200      	sxth	r0, r0
                    if(indic_area.y1 < zero) indic_area.y2 = zero;
 8014612:	4281      	cmp	r1, r0
 8014614:	da07      	bge.n	8014626 <lv_bar_design+0x1fa>
 8014616:	f8ad 0006 	strh.w	r0, [sp, #6]
 801461a:	e791      	b.n	8014540 <lv_bar_design+0x114>
        return  ancestor_design_f(bar, mask, mode);
 801461c:	4b07      	ldr	r3, [pc, #28]	; (801463c <lv_bar_design+0x210>)
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	4798      	blx	r3
 8014622:	4604      	mov	r4, r0
 8014624:	e710      	b.n	8014448 <lv_bar_design+0x1c>
                        indic_area.y2 = indic_area.y1;
 8014626:	f8ad 1006 	strh.w	r1, [sp, #6]
                        indic_area.y1 = zero;
 801462a:	f8ad 0002 	strh.w	r0, [sp, #2]
 801462e:	e787      	b.n	8014540 <lv_bar_design+0x114>
                        indic_area.x1 = indic_area.x2;
 8014630:	f8ad 3000 	strh.w	r3, [sp]
                        indic_area.x2 = zero;
 8014634:	f8ad 1004 	strh.w	r1, [sp, #4]
 8014638:	e782      	b.n	8014540 <lv_bar_design+0x114>
 801463a:	bf00      	nop
 801463c:	200165ec 	.word	0x200165ec

08014640 <lv_bar_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_bar_signal(lv_obj_t * bar, lv_signal_t sign, void * param)
{
 8014640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(bar, sign, param);
 8014642:	4b1d      	ldr	r3, [pc, #116]	; (80146b8 <lv_bar_signal+0x78>)
{
 8014644:	4607      	mov	r7, r0
 8014646:	460e      	mov	r6, r1
 8014648:	4615      	mov	r5, r2
    res = ancestor_signal(bar, sign, param);
 801464a:	685b      	ldr	r3, [r3, #4]
 801464c:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 801464e:	2801      	cmp	r0, #1
    res = ancestor_signal(bar, sign, param);
 8014650:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
 8014652:	d001      	beq.n	8014658 <lv_bar_signal+0x18>
        }
        buf->type[i] = "lv_bar";
    }

    return res;
}
 8014654:	4620      	mov	r0, r4
 8014656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(sign == LV_SIGNAL_REFR_EXT_SIZE) {
 8014658:	2e04      	cmp	r6, #4
 801465a:	d017      	beq.n	801468c <lv_bar_signal+0x4c>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801465c:	2e06      	cmp	r6, #6
 801465e:	d1f9      	bne.n	8014654 <lv_bar_signal+0x14>
            if(buf->type[i] == NULL) break;
 8014660:	682b      	ldr	r3, [r5, #0]
 8014662:	b173      	cbz	r3, 8014682 <lv_bar_signal+0x42>
 8014664:	686b      	ldr	r3, [r5, #4]
 8014666:	b1eb      	cbz	r3, 80146a4 <lv_bar_signal+0x64>
 8014668:	68ab      	ldr	r3, [r5, #8]
 801466a:	b1eb      	cbz	r3, 80146a8 <lv_bar_signal+0x68>
 801466c:	68eb      	ldr	r3, [r5, #12]
 801466e:	b1eb      	cbz	r3, 80146ac <lv_bar_signal+0x6c>
 8014670:	692b      	ldr	r3, [r5, #16]
 8014672:	b1eb      	cbz	r3, 80146b0 <lv_bar_signal+0x70>
 8014674:	696b      	ldr	r3, [r5, #20]
 8014676:	b1eb      	cbz	r3, 80146b4 <lv_bar_signal+0x74>
 8014678:	69ab      	ldr	r3, [r5, #24]
 801467a:	2b00      	cmp	r3, #0
 801467c:	bf14      	ite	ne
 801467e:	2307      	movne	r3, #7
 8014680:	2306      	moveq	r3, #6
        buf->type[i] = "lv_bar";
 8014682:	4a0e      	ldr	r2, [pc, #56]	; (80146bc <lv_bar_signal+0x7c>)
}
 8014684:	4620      	mov	r0, r4
        buf->type[i] = "lv_bar";
 8014686:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
}
 801468a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 801468c:	4638      	mov	r0, r7
 801468e:	f7f7 fc43 	bl	800bf18 <lv_obj_get_ext_attr>
        if(style_indic->body.shadow.width > bar->ext_size) bar->ext_size = style_indic->body.shadow.width;
 8014692:	6883      	ldr	r3, [r0, #8]
 8014694:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8014698:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801469c:	429a      	cmp	r2, r3
 801469e:	dad9      	bge.n	8014654 <lv_bar_signal+0x14>
 80146a0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80146a2:	e7d7      	b.n	8014654 <lv_bar_signal+0x14>
            if(buf->type[i] == NULL) break;
 80146a4:	4603      	mov	r3, r0
 80146a6:	e7ec      	b.n	8014682 <lv_bar_signal+0x42>
 80146a8:	2302      	movs	r3, #2
 80146aa:	e7ea      	b.n	8014682 <lv_bar_signal+0x42>
 80146ac:	2303      	movs	r3, #3
 80146ae:	e7e8      	b.n	8014682 <lv_bar_signal+0x42>
 80146b0:	2304      	movs	r3, #4
 80146b2:	e7e6      	b.n	8014682 <lv_bar_signal+0x42>
 80146b4:	2305      	movs	r3, #5
 80146b6:	e7e4      	b.n	8014682 <lv_bar_signal+0x42>
 80146b8:	200165ec 	.word	0x200165ec
 80146bc:	080c7238 	.word	0x080c7238

080146c0 <lv_bar_create>:
{
 80146c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146c2:	460e      	mov	r6, r1
    lv_obj_t * new_bar = lv_obj_create(par, copy);
 80146c4:	f7f5 fd98 	bl	800a1f8 <lv_obj_create>
    lv_mem_assert(new_bar);
 80146c8:	2800      	cmp	r0, #0
 80146ca:	d055      	beq.n	8014778 <lv_bar_create+0xb8>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_bar);
 80146cc:	4d44      	ldr	r5, [pc, #272]	; (80147e0 <lv_bar_create+0x120>)
 80146ce:	4604      	mov	r4, r0
 80146d0:	686b      	ldr	r3, [r5, #4]
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d07a      	beq.n	80147cc <lv_bar_create+0x10c>
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_func(new_bar);
 80146d6:	682b      	ldr	r3, [r5, #0]
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d072      	beq.n	80147c2 <lv_bar_create+0x102>
    lv_bar_ext_t * ext = lv_obj_allocate_ext_attr(new_bar, sizeof(lv_bar_ext_t));
 80146dc:	210c      	movs	r1, #12
 80146de:	4620      	mov	r0, r4
 80146e0:	f7f7 fa88 	bl	800bbf4 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 80146e4:	4605      	mov	r5, r0
 80146e6:	2800      	cmp	r0, #0
 80146e8:	d045      	beq.n	8014776 <lv_bar_create+0xb6>
    ext->sym = 0;
 80146ea:	7982      	ldrb	r2, [r0, #6]
    ext->min_value = 0;
 80146ec:	2300      	movs	r3, #0
    ext->style_indic = &lv_style_pretty_color;
 80146ee:	493d      	ldr	r1, [pc, #244]	; (80147e4 <lv_bar_create+0x124>)
    ext->max_value = 100;
 80146f0:	2764      	movs	r7, #100	; 0x64
    ext->sym = 0;
 80146f2:	f363 0200 	bfi	r2, r3, #0, #1
    ext->min_value = 0;
 80146f6:	8043      	strh	r3, [r0, #2]
    ext->cur_value = 0;
 80146f8:	8003      	strh	r3, [r0, #0]
    lv_obj_set_signal_func(new_bar, lv_bar_signal);
 80146fa:	4620      	mov	r0, r4
    ext->style_indic = &lv_style_pretty_color;
 80146fc:	60a9      	str	r1, [r5, #8]
    ext->sym = 0;
 80146fe:	71aa      	strb	r2, [r5, #6]
    lv_obj_set_signal_func(new_bar, lv_bar_signal);
 8014700:	4939      	ldr	r1, [pc, #228]	; (80147e8 <lv_bar_create+0x128>)
    ext->max_value = 100;
 8014702:	80af      	strh	r7, [r5, #4]
    lv_obj_set_signal_func(new_bar, lv_bar_signal);
 8014704:	f7f7 fa72 	bl	800bbec <lv_obj_set_signal_func>
    lv_obj_set_design_func(new_bar, lv_bar_design);
 8014708:	4938      	ldr	r1, [pc, #224]	; (80147ec <lv_bar_create+0x12c>)
 801470a:	4620      	mov	r0, r4
 801470c:	f7f7 fa70 	bl	800bbf0 <lv_obj_set_design_func>
    if(copy == NULL) {
 8014710:	b39e      	cbz	r6, 801477a <lv_bar_create+0xba>
        lv_bar_ext_t * ext_copy = lv_obj_get_ext_attr(copy);
 8014712:	4630      	mov	r0, r6
 8014714:	f7f7 fc00 	bl	800bf18 <lv_obj_get_ext_attr>
 8014718:	4603      	mov	r3, r0
        ext->sym = ext_copy->sym;
 801471a:	79aa      	ldrb	r2, [r5, #6]
        lv_obj_refresh_style(new_bar);
 801471c:	4620      	mov	r0, r4
        ext->style_indic = ext_copy->style_indic;
 801471e:	689f      	ldr	r7, [r3, #8]
        ext->min_value = ext_copy->min_value;
 8014720:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
        ext->cur_value = ext_copy->cur_value;
 8014724:	f9b3 1000 	ldrsh.w	r1, [r3]
        ext->max_value = ext_copy->max_value;
 8014728:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
        ext->style_indic = ext_copy->style_indic;
 801472c:	60af      	str	r7, [r5, #8]
        ext->sym = ext_copy->sym;
 801472e:	799b      	ldrb	r3, [r3, #6]
        ext->min_value = ext_copy->min_value;
 8014730:	f8a5 e002 	strh.w	lr, [r5, #2]
        ext->sym = ext_copy->sym;
 8014734:	f363 0200 	bfi	r2, r3, #0, #1
        ext->cur_value = ext_copy->cur_value;
 8014738:	8029      	strh	r1, [r5, #0]
        ext->max_value = ext_copy->max_value;
 801473a:	80ae      	strh	r6, [r5, #4]
        ext->sym = ext_copy->sym;
 801473c:	71aa      	strb	r2, [r5, #6]
        lv_obj_refresh_style(new_bar);
 801473e:	f7f7 f917 	bl	800b970 <lv_obj_refresh_style>
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8014742:	4620      	mov	r0, r4
        lv_bar_set_value(new_bar, ext->cur_value);
 8014744:	f9b5 5000 	ldrsh.w	r5, [r5]
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8014748:	f7f7 fbe6 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->cur_value == value) return;
 801474c:	f9b0 3000 	ldrsh.w	r3, [r0]
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8014750:	4602      	mov	r2, r0
    if(ext->cur_value == value) return;
 8014752:	42ab      	cmp	r3, r5
 8014754:	d00d      	beq.n	8014772 <lv_bar_create+0xb2>
    ext->cur_value = value > ext->max_value ? ext->max_value : value;
 8014756:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
    lv_obj_invalidate(bar);
 801475a:	4620      	mov	r0, r4
    ext->cur_value = ext->cur_value < ext->min_value ? ext->min_value : ext->cur_value;
 801475c:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 8014760:	42ab      	cmp	r3, r5
 8014762:	bfa8      	it	ge
 8014764:	462b      	movge	r3, r5
 8014766:	428b      	cmp	r3, r1
 8014768:	bfb8      	it	lt
 801476a:	460b      	movlt	r3, r1
 801476c:	8013      	strh	r3, [r2, #0]
    lv_obj_invalidate(bar);
 801476e:	f7f5 fab7 	bl	8009ce0 <lv_obj_invalidate>
}
 8014772:	4620      	mov	r0, r4
 8014774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014776:	e7fe      	b.n	8014776 <lv_bar_create+0xb6>
 8014778:	e7fe      	b.n	8014778 <lv_bar_create+0xb8>
        lv_obj_set_click(new_bar, false);
 801477a:	4631      	mov	r1, r6
 801477c:	4620      	mov	r0, r4
 801477e:	f7f7 fa01 	bl	800bb84 <lv_obj_set_click>
        lv_obj_set_size(new_bar, LV_DPI * 2, LV_DPI / 3);
 8014782:	2221      	movs	r2, #33	; 0x21
 8014784:	21c8      	movs	r1, #200	; 0xc8
 8014786:	4620      	mov	r0, r4
 8014788:	f7f6 fa28 	bl	800abdc <lv_obj_set_size>
        lv_bar_set_value(new_bar, ext->cur_value);
 801478c:	f9b5 1000 	ldrsh.w	r1, [r5]
 8014790:	4620      	mov	r0, r4
 8014792:	f7ff fe2f 	bl	80143f4 <lv_bar_set_value>
        lv_theme_t * th = lv_theme_get_current();
 8014796:	f009 f8c7 	bl	801d928 <lv_theme_get_current>
        if(th) {
 801479a:	4605      	mov	r5, r0
 801479c:	b1d0      	cbz	r0, 80147d4 <lv_bar_create+0x114>
            lv_bar_set_style(new_bar, LV_BAR_STYLE_BG, th->bar.bg);
 801479e:	6d06      	ldr	r6, [r0, #80]	; 0x50
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 80147a0:	4620      	mov	r0, r4
 80147a2:	f7f7 fbb9 	bl	800bf18 <lv_obj_get_ext_attr>
            lv_obj_set_style(bar, style);
 80147a6:	4620      	mov	r0, r4
 80147a8:	4631      	mov	r1, r6
 80147aa:	f7f6 fcd3 	bl	800b154 <lv_obj_set_style>
            lv_bar_set_style(new_bar, LV_BAR_STYLE_INDIC, th->bar.indic);
 80147ae:	6d6d      	ldr	r5, [r5, #84]	; 0x54
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 80147b0:	4620      	mov	r0, r4
 80147b2:	f7f7 fbb1 	bl	800bf18 <lv_obj_get_ext_attr>
            ext->style_indic = style;
 80147b6:	6085      	str	r5, [r0, #8]
            lv_obj_refresh_ext_size(bar);
 80147b8:	4620      	mov	r0, r4
 80147ba:	f7f7 fa23 	bl	800bc04 <lv_obj_refresh_ext_size>
}
 80147be:	4620      	mov	r0, r4
 80147c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_func(new_bar);
 80147c2:	4620      	mov	r0, r4
 80147c4:	f7f7 fba6 	bl	800bf14 <lv_obj_get_design_func>
 80147c8:	6028      	str	r0, [r5, #0]
 80147ca:	e787      	b.n	80146dc <lv_bar_create+0x1c>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_bar);
 80147cc:	f7f7 fba0 	bl	800bf10 <lv_obj_get_signal_func>
 80147d0:	6068      	str	r0, [r5, #4]
 80147d2:	e780      	b.n	80146d6 <lv_bar_create+0x16>
            lv_obj_set_style(new_bar, &lv_style_pretty);
 80147d4:	4620      	mov	r0, r4
 80147d6:	4906      	ldr	r1, [pc, #24]	; (80147f0 <lv_bar_create+0x130>)
 80147d8:	f7f6 fcbc 	bl	800b154 <lv_obj_set_style>
}
 80147dc:	4620      	mov	r0, r4
 80147de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80147e0:	200165ec 	.word	0x200165ec
 80147e4:	200190fc 	.word	0x200190fc
 80147e8:	08014641 	.word	0x08014641
 80147ec:	0801442d 	.word	0x0801442d
 80147f0:	2001921c 	.word	0x2001921c

080147f4 <lv_bar_set_range>:
{
 80147f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147f6:	460d      	mov	r5, r1
 80147f8:	4616      	mov	r6, r2
 80147fa:	4607      	mov	r7, r0
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 80147fc:	f7f7 fb8c 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->min_value == min && ext->max_value == max) return;
 8014800:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8014804:	4604      	mov	r4, r0
    if(ext->min_value == min && ext->max_value == max) return;
 8014806:	42ab      	cmp	r3, r5
 8014808:	d00c      	beq.n	8014824 <lv_bar_set_range+0x30>
    if(ext->cur_value > max) {
 801480a:	f9b4 3000 	ldrsh.w	r3, [r4]
    ext->max_value = max;
 801480e:	80a6      	strh	r6, [r4, #4]
    if(ext->cur_value > max) {
 8014810:	429e      	cmp	r6, r3
    ext->min_value = min;
 8014812:	8065      	strh	r5, [r4, #2]
    if(ext->cur_value > max) {
 8014814:	db27      	blt.n	8014866 <lv_bar_set_range+0x72>
    if(ext->cur_value < min) {
 8014816:	429d      	cmp	r5, r3
 8014818:	dc09      	bgt.n	801482e <lv_bar_set_range+0x3a>
    lv_obj_invalidate(bar);
 801481a:	4638      	mov	r0, r7
}
 801481c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_obj_invalidate(bar);
 8014820:	f7f5 ba5e 	b.w	8009ce0 <lv_obj_invalidate>
    if(ext->min_value == min && ext->max_value == max) return;
 8014824:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8014828:	42b3      	cmp	r3, r6
 801482a:	d1ee      	bne.n	801480a <lv_bar_set_range+0x16>
 801482c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ext->cur_value = min;
 801482e:	8025      	strh	r5, [r4, #0]
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8014830:	4638      	mov	r0, r7
 8014832:	f7f7 fb71 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->cur_value == value) return;
 8014836:	f9b0 2000 	ldrsh.w	r2, [r0]
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 801483a:	4603      	mov	r3, r0
    if(ext->cur_value == value) return;
 801483c:	42aa      	cmp	r2, r5
 801483e:	d0ec      	beq.n	801481a <lv_bar_set_range+0x26>
    ext->cur_value = value > ext->max_value ? ext->max_value : value;
 8014840:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
    lv_obj_invalidate(bar);
 8014844:	4638      	mov	r0, r7
    ext->cur_value = ext->cur_value < ext->min_value ? ext->min_value : ext->cur_value;
 8014846:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801484a:	428d      	cmp	r5, r1
 801484c:	bfa8      	it	ge
 801484e:	460d      	movge	r5, r1
 8014850:	4295      	cmp	r5, r2
 8014852:	bfb8      	it	lt
 8014854:	4615      	movlt	r5, r2
 8014856:	801d      	strh	r5, [r3, #0]
    lv_obj_invalidate(bar);
 8014858:	f7f5 fa42 	bl	8009ce0 <lv_obj_invalidate>
    lv_obj_invalidate(bar);
 801485c:	4638      	mov	r0, r7
}
 801485e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_obj_invalidate(bar);
 8014862:	f7f5 ba3d 	b.w	8009ce0 <lv_obj_invalidate>
        ext->cur_value = max;
 8014866:	8026      	strh	r6, [r4, #0]
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8014868:	4638      	mov	r0, r7
 801486a:	f7f7 fb55 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->cur_value == value) return;
 801486e:	f9b0 2000 	ldrsh.w	r2, [r0]
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8014872:	4603      	mov	r3, r0
    if(ext->cur_value == value) return;
 8014874:	42b2      	cmp	r2, r6
 8014876:	d00d      	beq.n	8014894 <lv_bar_set_range+0xa0>
    ext->cur_value = value > ext->max_value ? ext->max_value : value;
 8014878:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
    lv_obj_invalidate(bar);
 801487c:	4638      	mov	r0, r7
    ext->cur_value = ext->cur_value < ext->min_value ? ext->min_value : ext->cur_value;
 801487e:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8014882:	4296      	cmp	r6, r2
 8014884:	bfa8      	it	ge
 8014886:	4616      	movge	r6, r2
 8014888:	428e      	cmp	r6, r1
 801488a:	bfb8      	it	lt
 801488c:	460e      	movlt	r6, r1
 801488e:	801e      	strh	r6, [r3, #0]
    lv_obj_invalidate(bar);
 8014890:	f7f5 fa26 	bl	8009ce0 <lv_obj_invalidate>
 8014894:	f9b4 3000 	ldrsh.w	r3, [r4]
 8014898:	e7bd      	b.n	8014816 <lv_bar_set_range+0x22>
 801489a:	bf00      	nop

0801489c <lv_bar_set_style>:
{
 801489c:	b570      	push	{r4, r5, r6, lr}
 801489e:	460c      	mov	r4, r1
 80148a0:	4616      	mov	r6, r2
 80148a2:	4605      	mov	r5, r0
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 80148a4:	f7f7 fb38 	bl	800bf18 <lv_obj_get_ext_attr>
    switch(type) {
 80148a8:	b144      	cbz	r4, 80148bc <lv_bar_set_style+0x20>
 80148aa:	2c01      	cmp	r4, #1
 80148ac:	d105      	bne.n	80148ba <lv_bar_set_style+0x1e>
            ext->style_indic = style;
 80148ae:	6086      	str	r6, [r0, #8]
            lv_obj_refresh_ext_size(bar);
 80148b0:	4628      	mov	r0, r5
}
 80148b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_obj_refresh_ext_size(bar);
 80148b6:	f7f7 b9a5 	b.w	800bc04 <lv_obj_refresh_ext_size>
 80148ba:	bd70      	pop	{r4, r5, r6, pc}
            lv_obj_set_style(bar, style);
 80148bc:	4631      	mov	r1, r6
 80148be:	4628      	mov	r0, r5
}
 80148c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_obj_set_style(bar, style);
 80148c4:	f7f6 bc46 	b.w	800b154 <lv_obj_set_style>

080148c8 <lv_bar_get_value>:
{
 80148c8:	b508      	push	{r3, lr}
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 80148ca:	f7f7 fb25 	bl	800bf18 <lv_obj_get_ext_attr>
}
 80148ce:	f9b0 0000 	ldrsh.w	r0, [r0]
 80148d2:	bd08      	pop	{r3, pc}

080148d4 <lv_bar_get_min_value>:
{
 80148d4:	b508      	push	{r3, lr}
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 80148d6:	f7f7 fb1f 	bl	800bf18 <lv_obj_get_ext_attr>
}
 80148da:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 80148de:	bd08      	pop	{r3, pc}

080148e0 <lv_bar_get_max_value>:
{
 80148e0:	b508      	push	{r3, lr}
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 80148e2:	f7f7 fb19 	bl	800bf18 <lv_obj_get_ext_attr>
}
 80148e6:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80148ea:	bd08      	pop	{r3, pc}

080148ec <lv_bar_get_style>:
{
 80148ec:	b538      	push	{r3, r4, r5, lr}
 80148ee:	460c      	mov	r4, r1
 80148f0:	4605      	mov	r5, r0
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 80148f2:	f7f7 fb11 	bl	800bf18 <lv_obj_get_ext_attr>
    switch(type) {
 80148f6:	b12c      	cbz	r4, 8014904 <lv_bar_get_style+0x18>
 80148f8:	2c01      	cmp	r4, #1
 80148fa:	d101      	bne.n	8014900 <lv_bar_get_style+0x14>
            style = ext->style_indic;
 80148fc:	6880      	ldr	r0, [r0, #8]
            break;
 80148fe:	bd38      	pop	{r3, r4, r5, pc}
            style = NULL;
 8014900:	2000      	movs	r0, #0
}
 8014902:	bd38      	pop	{r3, r4, r5, pc}
            style = lv_obj_get_style(bar);
 8014904:	4628      	mov	r0, r5
}
 8014906:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            style = lv_obj_get_style(bar);
 801490a:	f7f7 ba87 	b.w	800be1c <lv_obj_get_style>
 801490e:	bf00      	nop

08014910 <lv_btn_ink_effect_anim>:
 * @param btn pointer to the animated button
 * @param val the new radius
 */
static void lv_btn_ink_effect_anim(lv_obj_t * btn, int32_t val)
{
    if(btn) {
 8014910:	b118      	cbz	r0, 801491a <lv_btn_ink_effect_anim+0xa>
        ink_act_value = val;
 8014912:	4b02      	ldr	r3, [pc, #8]	; (801491c <lv_btn_ink_effect_anim+0xc>)
 8014914:	8019      	strh	r1, [r3, #0]
        lv_obj_invalidate(btn);
 8014916:	f7f5 b9e3 	b.w	8009ce0 <lv_obj_invalidate>
 801491a:	4770      	bx	lr
 801491c:	200165f4 	.word	0x200165f4

08014920 <lv_btn_ink_effect_anim_ready>:
/**
 * Called to clean up when the ink animation is ready
 * @param p unused
 */
static void lv_btn_ink_effect_anim_ready(void * p)
{
 8014920:	b5f0      	push	{r4, r5, r6, r7, lr}
    (void) p;    /*Unused*/

    lv_btn_ext_t * ext = lv_obj_get_ext_attr(ink_obj);
 8014922:	4c21      	ldr	r4, [pc, #132]	; (80149a8 <lv_btn_ink_effect_anim_ready+0x88>)
{
 8014924:	b08b      	sub	sp, #44	; 0x2c
    lv_btn_state_t state = lv_btn_get_state(ink_obj);

    lv_obj_invalidate(ink_obj);
    ink_ready = true;
 8014926:	2501      	movs	r5, #1
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(ink_obj);
 8014928:	6860      	ldr	r0, [r4, #4]
 801492a:	f7f7 faf5 	bl	800bf18 <lv_obj_get_ext_attr>
 801492e:	4607      	mov	r7, r0
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8014930:	6860      	ldr	r0, [r4, #4]
 8014932:	f7f7 faf1 	bl	800bf18 <lv_obj_get_ext_attr>
    return ext->state;
 8014936:	f890 6028 	ldrb.w	r6, [r0, #40]	; 0x28
    lv_obj_invalidate(ink_obj);
 801493a:	6860      	ldr	r0, [r4, #4]
 801493c:	f7f5 f9d0 	bl	8009ce0 <lv_obj_invalidate>

    if((state == LV_BTN_STATE_REL || state == LV_BTN_STATE_TGL_REL) && ext->toggle == 0 && ink_playback == false) {
 8014940:	f016 0ffd 	tst.w	r6, #253	; 0xfd
    ink_ready = true;
 8014944:	7225      	strb	r5, [r4, #8]
    if((state == LV_BTN_STATE_REL || state == LV_BTN_STATE_TGL_REL) && ext->toggle == 0 && ink_playback == false) {
 8014946:	d103      	bne.n	8014950 <lv_btn_ink_effect_anim_ready+0x30>
 8014948:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801494c:	07db      	lsls	r3, r3, #31
 801494e:	d503      	bpl.n	8014958 <lv_btn_ink_effect_anim_ready+0x38>
        a.repeat_pause = 0;
        lv_anim_create(&a);

        ink_playback = true;
    } else {
        ink_obj = NULL;
 8014950:	2300      	movs	r3, #0
 8014952:	6063      	str	r3, [r4, #4]
    }
}
 8014954:	b00b      	add	sp, #44	; 0x2c
 8014956:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((state == LV_BTN_STATE_REL || state == LV_BTN_STATE_TGL_REL) && ext->toggle == 0 && ink_playback == false) {
 8014958:	7a63      	ldrb	r3, [r4, #9]
 801495a:	2b00      	cmp	r3, #0
 801495c:	d1f8      	bne.n	8014950 <lv_btn_ink_effect_anim_ready+0x30>
        a.playback = 0;
 801495e:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
        a.start = LV_BTN_INK_VALUE_MAX;
 8014962:	f44f 7680 	mov.w	r6, #256	; 0x100
        a.act_time = -ext->ink_wait_time;
 8014966:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
        lv_anim_create(&a);
 8014968:	a801      	add	r0, sp, #4
        a.playback = 0;
 801496a:	f363 0200 	bfi	r2, r3, #0, #1
        a.time = ext->ink_out_time;
 801496e:	8dff      	ldrh	r7, [r7, #46]	; 0x2e
        a.act_time = -ext->ink_wait_time;
 8014970:	4249      	negs	r1, r1
        a.end = 0;
 8014972:	9306      	str	r3, [sp, #24]
        a.repeat = 0;
 8014974:	f363 0241 	bfi	r2, r3, #1, #1
        a.playback_pause = 0;
 8014978:	f8ad 3020 	strh.w	r3, [sp, #32]
        a.repeat_pause = 0;
 801497c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
        a.act_time = -ext->ink_wait_time;
 8014980:	f8ad 101e 	strh.w	r1, [sp, #30]
        a.repeat = 0;
 8014984:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
        a.fp = (lv_anim_fp_t)lv_btn_ink_effect_anim;
 8014988:	4908      	ldr	r1, [pc, #32]	; (80149ac <lv_btn_ink_effect_anim_ready+0x8c>)
        a.path = lv_anim_path_linear;
 801498a:	4a09      	ldr	r2, [pc, #36]	; (80149b0 <lv_btn_ink_effect_anim_ready+0x90>)
        a.time = ext->ink_out_time;
 801498c:	f8ad 701c 	strh.w	r7, [sp, #28]
        a.end_cb = lv_btn_ink_effect_anim_ready;
 8014990:	4b08      	ldr	r3, [pc, #32]	; (80149b4 <lv_btn_ink_effect_anim_ready+0x94>)
        a.var = ink_obj;
 8014992:	6867      	ldr	r7, [r4, #4]
        a.start = LV_BTN_INK_VALUE_MAX;
 8014994:	9605      	str	r6, [sp, #20]
        a.var = ink_obj;
 8014996:	9701      	str	r7, [sp, #4]
        a.fp = (lv_anim_fp_t)lv_btn_ink_effect_anim;
 8014998:	9102      	str	r1, [sp, #8]
        a.path = lv_anim_path_linear;
 801499a:	9204      	str	r2, [sp, #16]
        a.end_cb = lv_btn_ink_effect_anim_ready;
 801499c:	9303      	str	r3, [sp, #12]
        lv_anim_create(&a);
 801499e:	f7fd ff83 	bl	80128a8 <lv_anim_create>
        ink_playback = true;
 80149a2:	7265      	strb	r5, [r4, #9]
    if((state == LV_BTN_STATE_REL || state == LV_BTN_STATE_TGL_REL) && ext->toggle == 0 && ink_playback == false) {
 80149a4:	e7d6      	b.n	8014954 <lv_btn_ink_effect_anim_ready+0x34>
 80149a6:	bf00      	nop
 80149a8:	200165f4 	.word	0x200165f4
 80149ac:	08014911 	.word	0x08014911
 80149b0:	08012a0d 	.word	0x08012a0d
 80149b4:	08014921 	.word	0x08014921

080149b8 <lv_btn_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 80149b8:	2a02      	cmp	r2, #2
{
 80149ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149be:	b097      	sub	sp, #92	; 0x5c
    if(mode == LV_DESIGN_COVER_CHK) {
 80149c0:	d015      	beq.n	80149ee <lv_btn_design+0x36>
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 80149c2:	b13a      	cbz	r2, 80149d4 <lv_btn_design+0x1c>
    } else if(mode == LV_DESIGN_DRAW_POST) {
 80149c4:	2a01      	cmp	r2, #1
 80149c6:	f000 80bc 	beq.w	8014b42 <lv_btn_design+0x18a>
    return true;
 80149ca:	2701      	movs	r7, #1
}
 80149cc:	4638      	mov	r0, r7
 80149ce:	b017      	add	sp, #92	; 0x5c
 80149d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(btn != ink_obj) {
 80149d4:	4e6c      	ldr	r6, [pc, #432]	; (8014b88 <lv_btn_design+0x1d0>)
 80149d6:	4604      	mov	r4, r0
 80149d8:	f8d6 8004 	ldr.w	r8, [r6, #4]
 80149dc:	4580      	cmp	r8, r0
 80149de:	d00b      	beq.n	80149f8 <lv_btn_design+0x40>
    return true;
 80149e0:	2701      	movs	r7, #1
            ancestor_design(btn, mask, mode);
 80149e2:	68f3      	ldr	r3, [r6, #12]
 80149e4:	4798      	blx	r3
}
 80149e6:	4638      	mov	r0, r7
 80149e8:	b017      	add	sp, #92	; 0x5c
 80149ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return false;
 80149ee:	2700      	movs	r7, #0
}
 80149f0:	4638      	mov	r0, r7
 80149f2:	b017      	add	sp, #92	; 0x5c
 80149f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149f8:	460d      	mov	r5, r1
            lv_opa_t opa_scale = lv_obj_get_opa_scale(btn);
 80149fa:	f7f7 fa6d 	bl	800bed8 <lv_obj_get_opa_scale>
 80149fe:	4682      	mov	sl, r0
            lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8014a00:	4620      	mov	r0, r4
 8014a02:	f7f7 fa89 	bl	800bf18 <lv_obj_get_ext_attr>
            if(ink_playback == false) {
 8014a06:	7a77      	ldrb	r7, [r6, #9]
            lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8014a08:	4681      	mov	r9, r0
                lv_style_copy(&style_tmp, ext->styles[ink_bg_state]);
 8014a0a:	7c33      	ldrb	r3, [r6, #16]
            if(ink_playback == false) {
 8014a0c:	2f00      	cmp	r7, #0
 8014a0e:	f040 809f 	bne.w	8014b50 <lv_btn_design+0x198>
                lv_style_copy(&style_tmp, ext->styles[ink_bg_state]);
 8014a12:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8014a16:	a804      	add	r0, sp, #16
                lv_draw_rect(&btn->coords, mask, &style_tmp, opa_scale);
 8014a18:	f104 0b10 	add.w	fp, r4, #16
                lv_style_copy(&style_tmp, ext->styles[ink_bg_state]);
 8014a1c:	6959      	ldr	r1, [r3, #20]
 8014a1e:	f7f7 ff79 	bl	800c914 <lv_style_copy>
                style_tmp.body.shadow.width = ext->styles[ink_top_state]->body.shadow.width;
 8014a22:	7c77      	ldrb	r7, [r6, #17]
                lv_draw_rect(&btn->coords, mask, &style_tmp, opa_scale);
 8014a24:	aa04      	add	r2, sp, #16
 8014a26:	4653      	mov	r3, sl
                style_tmp.body.shadow.width = ext->styles[ink_top_state]->body.shadow.width;
 8014a28:	eb09 0787 	add.w	r7, r9, r7, lsl #2
                lv_draw_rect(&btn->coords, mask, &style_tmp, opa_scale);
 8014a2c:	4629      	mov	r1, r5
 8014a2e:	4658      	mov	r0, fp
                style_tmp.body.shadow.width = ext->styles[ink_top_state]->body.shadow.width;
 8014a30:	697f      	ldr	r7, [r7, #20]
 8014a32:	f9b7 701c 	ldrsh.w	r7, [r7, #28]
 8014a36:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
                lv_draw_rect(&btn->coords, mask, &style_tmp, opa_scale);
 8014a3a:	f7fb f92b 	bl	800fc94 <lv_draw_rect>
                lv_coord_t w = lv_obj_get_width(btn);
 8014a3e:	4620      	mov	r0, r4
 8014a40:	f7f7 f9e0 	bl	800be04 <lv_obj_get_width>
 8014a44:	4607      	mov	r7, r0
                lv_coord_t h = lv_obj_get_height(btn);
 8014a46:	4620      	mov	r0, r4
 8014a48:	f7f7 f9e2 	bl	800be10 <lv_obj_get_height>
                lv_coord_t r_max = LV_MATH_MIN(w, h) / 2;
 8014a4c:	4287      	cmp	r7, r0
 8014a4e:	46b8      	mov	r8, r7
                lv_coord_t coord_state = ink_act_value < LV_BTN_INK_VALUE_MAX / 2 ? ink_act_value : LV_BTN_INK_VALUE_MAX / 2;
 8014a50:	f9b6 e000 	ldrsh.w	lr, [r6]
                lv_coord_t r_max = LV_MATH_MIN(w, h) / 2;
 8014a54:	bfa8      	it	ge
 8014a56:	4680      	movge	r8, r0
                lv_coord_t x_err = (btn->coords.x1 + w / 2) - p_act.x;
 8014a58:	8ab2      	ldrh	r2, [r6, #20]
 8014a5a:	8a21      	ldrh	r1, [r4, #16]
 8014a5c:	46bc      	mov	ip, r7
                lv_coord_t r_max = LV_MATH_MIN(w, h) / 2;
 8014a5e:	fa0f f888 	sxth.w	r8, r8
                lv_coord_t y_err = (btn->coords.y1 + h / 2) - p_act.y;
 8014a62:	8af3      	ldrh	r3, [r6, #22]
                lv_coord_t x_err = (btn->coords.x1 + w / 2) - p_act.x;
 8014a64:	1a89      	subs	r1, r1, r2
                lv_coord_t y_err = (btn->coords.y1 + h / 2) - p_act.y;
 8014a66:	8a64      	ldrh	r4, [r4, #18]
                lv_coord_t r_max = LV_MATH_MIN(w, h) / 2;
 8014a68:	f1b8 0f00 	cmp.w	r8, #0
                lv_coord_t y_err = (btn->coords.y1 + h / 2) - p_act.y;
 8014a6c:	eba4 0403 	sub.w	r4, r4, r3
                lv_coord_t r_max = LV_MATH_MIN(w, h) / 2;
 8014a70:	bfb8      	it	lt
 8014a72:	f108 0801 	addlt.w	r8, r8, #1
                lv_coord_t coord_state = ink_act_value < LV_BTN_INK_VALUE_MAX / 2 ? ink_act_value : LV_BTN_INK_VALUE_MAX / 2;
 8014a76:	f1be 0f80 	cmp.w	lr, #128	; 0x80
                lv_coord_t y_err = (btn->coords.y1 + h / 2) - p_act.y;
 8014a7a:	9401      	str	r4, [sp, #4]
                lv_coord_t coord_state = ink_act_value < LV_BTN_INK_VALUE_MAX / 2 ? ink_act_value : LV_BTN_INK_VALUE_MAX / 2;
 8014a7c:	bfa8      	it	ge
 8014a7e:	f04f 0e80 	movge.w	lr, #128	; 0x80
                lv_coord_t x_err = (btn->coords.x1 + w / 2) - p_act.x;
 8014a82:	2f00      	cmp	r7, #0
                lv_coord_t r_max = LV_MATH_MIN(w, h) / 2;
 8014a84:	ea4f 0868 	mov.w	r8, r8, asr #1
                lv_coord_t x_err = (btn->coords.x1 + w / 2) - p_act.x;
 8014a88:	bfb8      	it	lt
 8014a8a:	f107 0c01 	addlt.w	ip, r7, #1
                lv_coord_t y_err = (btn->coords.y1 + h / 2) - p_act.y;
 8014a8e:	2800      	cmp	r0, #0
                lv_coord_t x_err = (btn->coords.x1 + w / 2) - p_act.x;
 8014a90:	eb01 016c 	add.w	r1, r1, ip, asr #1
                lv_coord_t y_err = (btn->coords.y1 + h / 2) - p_act.y;
 8014a94:	4684      	mov	ip, r0
 8014a96:	bfb8      	it	lt
 8014a98:	f100 0c01 	addlt.w	ip, r0, #1
                lv_coord_t half_side = LV_MATH_MAX(w, h) / 2;
 8014a9c:	4287      	cmp	r7, r0
                p_act.x += (x_err * coord_state) >> (LV_BTN_INK_VALUE_MAX_SHIFT - 1);
 8014a9e:	fb11 f10e 	smulbb	r1, r1, lr
                lv_coord_t half_side = LV_MATH_MAX(w, h) / 2;
 8014aa2:	bfb8      	it	lt
 8014aa4:	4607      	movlt	r7, r0
                p_act.x += (x_err * coord_state) >> (LV_BTN_INK_VALUE_MAX_SHIFT - 1);
 8014aa6:	eb02 11e1 	add.w	r1, r2, r1, asr #7
                lv_coord_t y_err = (btn->coords.y1 + h / 2) - p_act.y;
 8014aaa:	9a01      	ldr	r2, [sp, #4]
                lv_coord_t half_side = LV_MATH_MAX(w, h) / 2;
 8014aac:	b23f      	sxth	r7, r7
                lv_coord_t y_err = (btn->coords.y1 + h / 2) - p_act.y;
 8014aae:	eb02 0c6c 	add.w	ip, r2, ip, asr #1
                lv_area_intersect(&cir_area, &btn->coords, &cir_area);      /*Limit the area. (It might be too big on the smaller side)*/
 8014ab2:	aa02      	add	r2, sp, #8
                lv_coord_t half_side = LV_MATH_MAX(w, h) / 2;
 8014ab4:	2f00      	cmp	r7, #0
                p_act.x += (x_err * coord_state) >> (LV_BTN_INK_VALUE_MAX_SHIFT - 1);
 8014ab6:	b28c      	uxth	r4, r1
                p_act.y += (y_err * coord_state) >> (LV_BTN_INK_VALUE_MAX_SHIFT - 1);
 8014ab8:	fb1c fc0e 	smulbb	ip, ip, lr
                lv_area_intersect(&cir_area, &btn->coords, &cir_area);      /*Limit the area. (It might be too big on the smaller side)*/
 8014abc:	4659      	mov	r1, fp
                lv_coord_t half_side = LV_MATH_MAX(w, h) / 2;
 8014abe:	bfb8      	it	lt
 8014ac0:	3701      	addlt	r7, #1
                p_act.y += (y_err * coord_state) >> (LV_BTN_INK_VALUE_MAX_SHIFT - 1);
 8014ac2:	eb03 13ec 	add.w	r3, r3, ip, asr #7
                lv_coord_t half_side = LV_MATH_MAX(w, h) / 2;
 8014ac6:	107f      	asrs	r7, r7, #1
                p_act.y += (y_err * coord_state) >> (LV_BTN_INK_VALUE_MAX_SHIFT - 1);
 8014ac8:	b29b      	uxth	r3, r3
                cir_area.x1 = p_act.x - ((half_side * coord_state) >> (LV_BTN_INK_VALUE_MAX_SHIFT - 1));
 8014aca:	fb17 fe0e 	smulbb	lr, r7, lr
 8014ace:	f3ce 1ecf 	ubfx	lr, lr, #7, #16
 8014ad2:	eba4 000e 	sub.w	r0, r4, lr
                cir_area.y1 = p_act.y - ((half_side * coord_state) >> (LV_BTN_INK_VALUE_MAX_SHIFT - 1));
 8014ad6:	eba3 070e 	sub.w	r7, r3, lr
                cir_area.x2 = p_act.x + ((half_side * coord_state) >> (LV_BTN_INK_VALUE_MAX_SHIFT - 1));
 8014ada:	4474      	add	r4, lr
                cir_area.y2 = p_act.y + ((half_side * coord_state) >> (LV_BTN_INK_VALUE_MAX_SHIFT - 1));
 8014adc:	449e      	add	lr, r3
                cir_area.x1 = p_act.x - ((half_side * coord_state) >> (LV_BTN_INK_VALUE_MAX_SHIFT - 1));
 8014ade:	f8ad 0008 	strh.w	r0, [sp, #8]
                lv_area_intersect(&cir_area, &btn->coords, &cir_area);      /*Limit the area. (It might be too big on the smaller side)*/
 8014ae2:	4610      	mov	r0, r2
                cir_area.x2 = p_act.x + ((half_side * coord_state) >> (LV_BTN_INK_VALUE_MAX_SHIFT - 1));
 8014ae4:	f8ad 400c 	strh.w	r4, [sp, #12]
                cir_area.y1 = p_act.y - ((half_side * coord_state) >> (LV_BTN_INK_VALUE_MAX_SHIFT - 1));
 8014ae8:	f8ad 700a 	strh.w	r7, [sp, #10]
                cir_area.y2 = p_act.y + ((half_side * coord_state) >> (LV_BTN_INK_VALUE_MAX_SHIFT - 1));
 8014aec:	f8ad e00e 	strh.w	lr, [sp, #14]
                lv_area_intersect(&cir_area, &btn->coords, &cir_area);      /*Limit the area. (It might be too big on the smaller side)*/
 8014af0:	f7fd ffea 	bl	8012ac8 <lv_area_intersect>
                lv_coord_t r_state = ink_act_value > LV_BTN_INK_VALUE_MAX / 2 ? ink_act_value - LV_BTN_INK_VALUE_MAX / 2 : 0;
 8014af4:	f9b6 4000 	ldrsh.w	r4, [r6]
 8014af8:	2c80      	cmp	r4, #128	; 0x80
 8014afa:	dd27      	ble.n	8014b4c <lv_btn_design+0x194>
 8014afc:	3c80      	subs	r4, #128	; 0x80
 8014afe:	b2a4      	uxth	r4, r4
                lv_style_copy(&style_tmp, ext->styles[ink_top_state]);
 8014b00:	7c73      	ldrb	r3, [r6, #17]
 8014b02:	a804      	add	r0, sp, #16
 8014b04:	2701      	movs	r7, #1
 8014b06:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8014b0a:	6959      	ldr	r1, [r3, #20]
 8014b0c:	f7f7 ff02 	bl	800c914 <lv_style_copy>
                style_tmp.body.radius = r_max + (((ext->styles[ink_bg_state]->body.radius - r_max) * r_state) >> (LV_BTN_INK_VALUE_MAX_SHIFT - 1));
 8014b10:	7c32      	ldrb	r2, [r6, #16]
                lv_draw_rect(&cir_area, mask, &style_tmp, opa_scale);
 8014b12:	4629      	mov	r1, r5
                style_tmp.body.border.width = 0;
 8014b14:	2600      	movs	r6, #0
                style_tmp.body.radius = r_max + (((ext->styles[ink_bg_state]->body.radius - r_max) * r_state) >> (LV_BTN_INK_VALUE_MAX_SHIFT - 1));
 8014b16:	eb09 0982 	add.w	r9, r9, r2, lsl #2
                lv_draw_rect(&cir_area, mask, &style_tmp, opa_scale);
 8014b1a:	4653      	mov	r3, sl
 8014b1c:	aa04      	add	r2, sp, #16
 8014b1e:	a802      	add	r0, sp, #8
                style_tmp.body.radius = r_max + (((ext->styles[ink_bg_state]->body.radius - r_max) * r_state) >> (LV_BTN_INK_VALUE_MAX_SHIFT - 1));
 8014b20:	f8d9 5014 	ldr.w	r5, [r9, #20]
 8014b24:	f9b5 500c 	ldrsh.w	r5, [r5, #12]
                style_tmp.body.border.width = 0;
 8014b28:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
                style_tmp.body.radius = r_max + (((ext->styles[ink_bg_state]->body.radius - r_max) * r_state) >> (LV_BTN_INK_VALUE_MAX_SHIFT - 1));
 8014b2c:	eba5 0508 	sub.w	r5, r5, r8
 8014b30:	fb04 f405 	mul.w	r4, r4, r5
 8014b34:	eb08 18e4 	add.w	r8, r8, r4, asr #7
 8014b38:	f8ad 801c 	strh.w	r8, [sp, #28]
                lv_draw_rect(&cir_area, mask, &style_tmp, opa_scale);
 8014b3c:	f7fb f8aa 	bl	800fc94 <lv_draw_rect>
 8014b40:	e744      	b.n	80149cc <lv_btn_design+0x14>
        ancestor_design(btn, mask, mode);
 8014b42:	4c11      	ldr	r4, [pc, #68]	; (8014b88 <lv_btn_design+0x1d0>)
    return true;
 8014b44:	4617      	mov	r7, r2
        ancestor_design(btn, mask, mode);
 8014b46:	68e3      	ldr	r3, [r4, #12]
 8014b48:	4798      	blx	r3
 8014b4a:	e73f      	b.n	80149cc <lv_btn_design+0x14>
                lv_coord_t r_state = ink_act_value > LV_BTN_INK_VALUE_MAX / 2 ? ink_act_value - LV_BTN_INK_VALUE_MAX / 2 : 0;
 8014b4c:	2400      	movs	r4, #0
 8014b4e:	e7d7      	b.n	8014b00 <lv_btn_design+0x148>
                lv_style_copy(&res, ext->styles[ink_bg_state]);
 8014b50:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8014b54:	a804      	add	r0, sp, #16
 8014b56:	6959      	ldr	r1, [r3, #20]
 8014b58:	f7f7 fedc 	bl	800c914 <lv_style_copy>
                lv_style_mix(ext->styles[ink_bg_state], ext->styles[ink_top_state], &res, ink_act_value);
 8014b5c:	7c30      	ldrb	r0, [r6, #16]
 8014b5e:	7c71      	ldrb	r1, [r6, #17]
 8014b60:	aa04      	add	r2, sp, #16
 8014b62:	8833      	ldrh	r3, [r6, #0]
 8014b64:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8014b68:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 8014b6c:	6949      	ldr	r1, [r1, #20]
 8014b6e:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8014b72:	f7f7 fed3 	bl	800c91c <lv_style_mix>
                lv_draw_rect(&btn->coords, mask, &res, opa_scale);
 8014b76:	4653      	mov	r3, sl
 8014b78:	aa04      	add	r2, sp, #16
 8014b7a:	4629      	mov	r1, r5
 8014b7c:	f108 0010 	add.w	r0, r8, #16
 8014b80:	f7fb f888 	bl	800fc94 <lv_draw_rect>
 8014b84:	e722      	b.n	80149cc <lv_btn_design+0x14>
 8014b86:	bf00      	nop
 8014b88:	200165f4 	.word	0x200165f4

08014b8c <lv_btn_set_state.constprop.3>:
void lv_btn_set_state(lv_obj_t * btn, lv_btn_state_t state)
 8014b8c:	b510      	push	{r4, lr}
 8014b8e:	4604      	mov	r4, r0
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8014b90:	f7f7 f9c2 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->state != state) {
 8014b94:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 8014b98:	b14a      	cbz	r2, 8014bae <lv_btn_set_state.constprop.3+0x22>
 8014b9a:	4603      	mov	r3, r0
        ext->state = state;
 8014b9c:	2200      	movs	r2, #0
        lv_obj_set_style(btn, ext->styles[state]);
 8014b9e:	4620      	mov	r0, r4
        ext->state = state;
 8014ba0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        lv_obj_set_style(btn, ext->styles[state]);
 8014ba4:	6959      	ldr	r1, [r3, #20]
}
 8014ba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        lv_obj_set_style(btn, ext->styles[state]);
 8014baa:	f7f6 bad3 	b.w	800b154 <lv_obj_set_style>
 8014bae:	bd10      	pop	{r4, pc}

08014bb0 <lv_btn_set_state.constprop.4>:
void lv_btn_set_state(lv_obj_t * btn, lv_btn_state_t state)
 8014bb0:	b510      	push	{r4, lr}
 8014bb2:	4604      	mov	r4, r0
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8014bb4:	f7f7 f9b0 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->state != state) {
 8014bb8:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 8014bbc:	2a02      	cmp	r2, #2
 8014bbe:	d009      	beq.n	8014bd4 <lv_btn_set_state.constprop.4+0x24>
 8014bc0:	4603      	mov	r3, r0
        ext->state = state;
 8014bc2:	2202      	movs	r2, #2
        lv_obj_set_style(btn, ext->styles[state]);
 8014bc4:	4620      	mov	r0, r4
        ext->state = state;
 8014bc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        lv_obj_set_style(btn, ext->styles[state]);
 8014bca:	69d9      	ldr	r1, [r3, #28]
}
 8014bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        lv_obj_set_style(btn, ext->styles[state]);
 8014bd0:	f7f6 bac0 	b.w	800b154 <lv_obj_set_style>
 8014bd4:	bd10      	pop	{r4, pc}
 8014bd6:	bf00      	nop

08014bd8 <lv_btn_signal>:
{
 8014bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    res = ancestor_signal(btn, sign, param);
 8014bdc:	4dbf      	ldr	r5, [pc, #764]	; (8014edc <lv_btn_signal+0x304>)
{
 8014bde:	b08a      	sub	sp, #40	; 0x28
 8014be0:	4606      	mov	r6, r0
 8014be2:	460f      	mov	r7, r1
    res = ancestor_signal(btn, sign, param);
 8014be4:	69ab      	ldr	r3, [r5, #24]
{
 8014be6:	4690      	mov	r8, r2
    res = ancestor_signal(btn, sign, param);
 8014be8:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8014bea:	2801      	cmp	r0, #1
    res = ancestor_signal(btn, sign, param);
 8014bec:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
 8014bee:	d003      	beq.n	8014bf8 <lv_btn_signal+0x20>
}
 8014bf0:	4620      	mov	r0, r4
 8014bf2:	b00a      	add	sp, #40	; 0x28
 8014bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8014bf8:	4630      	mov	r0, r6
 8014bfa:	f7f7 f98d 	bl	800bf18 <lv_obj_get_ext_attr>
 8014bfe:	4681      	mov	r9, r0
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8014c00:	4630      	mov	r0, r6
 8014c02:	f7f7 f989 	bl	800bf18 <lv_obj_get_ext_attr>
    return ext->state;
 8014c06:	f890 a028 	ldrb.w	sl, [r0, #40]	; 0x28
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8014c0a:	4630      	mov	r0, r6
 8014c0c:	f7f7 f984 	bl	800bf18 <lv_obj_get_ext_attr>
    if(sign == LV_SIGNAL_PRESSED) {
 8014c10:	2f08      	cmp	r7, #8
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8014c12:	4603      	mov	r3, r0
    if(sign == LV_SIGNAL_PRESSED) {
 8014c14:	d01b      	beq.n	8014c4e <lv_btn_signal+0x76>
    } else if(sign == LV_SIGNAL_PRESS_LOST) {
 8014c16:	2f0a      	cmp	r7, #10
 8014c18:	d059      	beq.n	8014cce <lv_btn_signal+0xf6>
    } else if(sign == LV_SIGNAL_PRESSING) {
 8014c1a:	2f09      	cmp	r7, #9
 8014c1c:	f000 80d4 	beq.w	8014dc8 <lv_btn_signal+0x1f0>
    } else if(sign == LV_SIGNAL_RELEASED) {
 8014c20:	2f0b      	cmp	r7, #11
 8014c22:	f000 80e3 	beq.w	8014dec <lv_btn_signal+0x214>
    } else if(sign == LV_SIGNAL_LONG_PRESS) {
 8014c26:	2f0c      	cmp	r7, #12
 8014c28:	d068      	beq.n	8014cfc <lv_btn_signal+0x124>
    } else if(sign == LV_SIGNAL_LONG_PRESS_REP) {
 8014c2a:	2f0d      	cmp	r7, #13
 8014c2c:	d049      	beq.n	8014cc2 <lv_btn_signal+0xea>
    } else if(sign == LV_SIGNAL_CONTROLL) {
 8014c2e:	2f12      	cmp	r7, #18
 8014c30:	f000 8132 	beq.w	8014e98 <lv_btn_signal+0x2c0>
    } else if(sign == LV_SIGNAL_CLEANUP) {
 8014c34:	2f00      	cmp	r7, #0
 8014c36:	f040 809e 	bne.w	8014d76 <lv_btn_signal+0x19e>
        if(btn == ink_obj) {
 8014c3a:	686b      	ldr	r3, [r5, #4]
 8014c3c:	429e      	cmp	r6, r3
 8014c3e:	d1d7      	bne.n	8014bf0 <lv_btn_signal+0x18>
            lv_anim_del(ink_obj, (lv_anim_fp_t)lv_btn_ink_effect_anim);
 8014c40:	4630      	mov	r0, r6
 8014c42:	49a7      	ldr	r1, [pc, #668]	; (8014ee0 <lv_btn_signal+0x308>)
 8014c44:	f7fd fe92 	bl	801296c <lv_anim_del>
            ink_obj = NULL;
 8014c48:	2300      	movs	r3, #0
 8014c4a:	606b      	str	r3, [r5, #4]
 8014c4c:	e7d0      	b.n	8014bf0 <lv_btn_signal+0x18>
        if(ext->state == LV_BTN_STATE_REL) {
 8014c4e:	f899 3028 	ldrb.w	r3, [r9, #40]	; 0x28
 8014c52:	b31b      	cbz	r3, 8014c9c <lv_btn_signal+0xc4>
        } else if(ext->state == LV_BTN_STATE_TGL_REL) {
 8014c54:	2b02      	cmp	r3, #2
 8014c56:	f000 814d 	beq.w	8014ef4 <lv_btn_signal+0x31c>
        ext->long_pr_action_executed = 0;
 8014c5a:	f899 3030 	ldrb.w	r3, [r9, #48]	; 0x30
        if(ink_obj != NULL && ink_obj != btn) {
 8014c5e:	6868      	ldr	r0, [r5, #4]
        ext->long_pr_action_executed = 0;
 8014c60:	f36f 0341 	bfc	r3, #1, #1
 8014c64:	f889 3030 	strb.w	r3, [r9, #48]	; 0x30
        if(ink_obj != NULL && ink_obj != btn) {
 8014c68:	b148      	cbz	r0, 8014c7e <lv_btn_signal+0xa6>
 8014c6a:	4286      	cmp	r6, r0
 8014c6c:	d007      	beq.n	8014c7e <lv_btn_signal+0xa6>
            lv_anim_del(ink_obj, (lv_anim_fp_t)lv_btn_ink_effect_anim);
 8014c6e:	499c      	ldr	r1, [pc, #624]	; (8014ee0 <lv_btn_signal+0x308>)
 8014c70:	f7fd fe7c 	bl	801296c <lv_anim_del>
            lv_obj_invalidate(ink_obj);
 8014c74:	6868      	ldr	r0, [r5, #4]
 8014c76:	f7f5 f833 	bl	8009ce0 <lv_obj_invalidate>
            ink_obj = NULL;
 8014c7a:	2300      	movs	r3, #0
 8014c7c:	606b      	str	r3, [r5, #4]
        if(ext->ink_in_time > 0) {
 8014c7e:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d14d      	bne.n	8014d22 <lv_btn_signal+0x14a>
        if(ext->actions[LV_BTN_ACTION_PR] && state != LV_BTN_STATE_INA) {
 8014c86:	f1ba 0f04 	cmp.w	sl, #4
 8014c8a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8014c8e:	d0af      	beq.n	8014bf0 <lv_btn_signal+0x18>
        if(ext->actions[LV_BTN_ACTION_LONG_PR_REPEAT] && state != LV_BTN_STATE_INA) {
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d0ad      	beq.n	8014bf0 <lv_btn_signal+0x18>
                res = ext->actions[LV_BTN_ACTION_CLICK](btn);
 8014c94:	4630      	mov	r0, r6
 8014c96:	4798      	blx	r3
 8014c98:	4604      	mov	r4, r0
 8014c9a:	e7a9      	b.n	8014bf0 <lv_btn_signal+0x18>
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8014c9c:	4630      	mov	r0, r6
 8014c9e:	f7f7 f93b 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->state != state) {
 8014ca2:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8014ca6:	4603      	mov	r3, r0
    if(ext->state != state) {
 8014ca8:	2a01      	cmp	r2, #1
 8014caa:	d005      	beq.n	8014cb8 <lv_btn_signal+0xe0>
        ext->state = state;
 8014cac:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
        lv_obj_set_style(btn, ext->styles[state]);
 8014cb0:	4630      	mov	r0, r6
 8014cb2:	6999      	ldr	r1, [r3, #24]
 8014cb4:	f7f6 fa4e 	bl	800b154 <lv_obj_set_style>
            ink_bg_state = LV_BTN_STATE_REL;
 8014cb8:	2200      	movs	r2, #0
            ink_top_state = LV_BTN_STATE_PR;
 8014cba:	2301      	movs	r3, #1
            ink_bg_state = LV_BTN_STATE_REL;
 8014cbc:	742a      	strb	r2, [r5, #16]
            ink_top_state = LV_BTN_STATE_PR;
 8014cbe:	746b      	strb	r3, [r5, #17]
 8014cc0:	e7cb      	b.n	8014c5a <lv_btn_signal+0x82>
        if(ext->actions[LV_BTN_ACTION_LONG_PR_REPEAT] && state != LV_BTN_STATE_INA) {
 8014cc2:	f1ba 0f04 	cmp.w	sl, #4
 8014cc6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014cca:	d1e1      	bne.n	8014c90 <lv_btn_signal+0xb8>
 8014ccc:	e790      	b.n	8014bf0 <lv_btn_signal+0x18>
        if(ext->state == LV_BTN_STATE_PR) lv_btn_set_state(btn, LV_BTN_STATE_REL);
 8014cce:	f899 3028 	ldrb.w	r3, [r9, #40]	; 0x28
 8014cd2:	2b01      	cmp	r3, #1
 8014cd4:	f000 8125 	beq.w	8014f22 <lv_btn_signal+0x34a>
        else if(ext->state == LV_BTN_STATE_TGL_PR) lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 8014cd8:	2b03      	cmp	r3, #3
 8014cda:	d189      	bne.n	8014bf0 <lv_btn_signal+0x18>
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8014cdc:	4630      	mov	r0, r6
 8014cde:	f7f7 f91b 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->state != state) {
 8014ce2:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8014ce6:	4603      	mov	r3, r0
    if(ext->state != state) {
 8014ce8:	2a02      	cmp	r2, #2
 8014cea:	d081      	beq.n	8014bf0 <lv_btn_signal+0x18>
        ext->state = state;
 8014cec:	2202      	movs	r2, #2
        lv_obj_set_style(btn, ext->styles[state]);
 8014cee:	4630      	mov	r0, r6
 8014cf0:	69d9      	ldr	r1, [r3, #28]
        ext->state = state;
 8014cf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        lv_obj_set_style(btn, ext->styles[state]);
 8014cf6:	f7f6 fa2d 	bl	800b154 <lv_obj_set_style>
 8014cfa:	e779      	b.n	8014bf0 <lv_btn_signal+0x18>
        if(ext->actions[LV_BTN_ACTION_LONG_PR] && state != LV_BTN_STATE_INA) {
 8014cfc:	f1ba 0f04 	cmp.w	sl, #4
 8014d00:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8014d04:	f43f af74 	beq.w	8014bf0 <lv_btn_signal+0x18>
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	f43f af71 	beq.w	8014bf0 <lv_btn_signal+0x18>
            ext->long_pr_action_executed = 1;
 8014d0e:	f899 2030 	ldrb.w	r2, [r9, #48]	; 0x30
            res = ext->actions[LV_BTN_ACTION_LONG_PR](btn);
 8014d12:	4630      	mov	r0, r6
            ext->long_pr_action_executed = 1;
 8014d14:	f042 0202 	orr.w	r2, r2, #2
 8014d18:	f889 2030 	strb.w	r2, [r9, #48]	; 0x30
            res = ext->actions[LV_BTN_ACTION_LONG_PR](btn);
 8014d1c:	4798      	blx	r3
 8014d1e:	4604      	mov	r4, r0
 8014d20:	e766      	b.n	8014bf0 <lv_btn_signal+0x18>
            ink_playback = false;
 8014d22:	2700      	movs	r7, #0
            ink_obj = btn;
 8014d24:	606e      	str	r6, [r5, #4]
            ink_playback = false;
 8014d26:	726f      	strb	r7, [r5, #9]
            ink_ready = false;
 8014d28:	722f      	strb	r7, [r5, #8]
            lv_indev_get_point(lv_indev_get_act(), &ink_point);
 8014d2a:	f7f4 fa2f 	bl	800918c <lv_indev_get_act>
 8014d2e:	496d      	ldr	r1, [pc, #436]	; (8014ee4 <lv_btn_signal+0x30c>)
            a.end = LV_BTN_INK_VALUE_MAX;
 8014d30:	f44f 7580 	mov.w	r5, #256	; 0x100
            lv_indev_get_point(lv_indev_get_act(), &ink_point);
 8014d34:	f7f4 fa5a 	bl	80091ec <lv_indev_get_point>
            a.playback = 0;
 8014d38:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
            a.time = ext->ink_in_time;
 8014d3c:	f8b9 202a 	ldrh.w	r2, [r9, #42]	; 0x2a
            lv_anim_create(&a);
 8014d40:	a801      	add	r0, sp, #4
            a.repeat = 0;
 8014d42:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
            a.fp = (lv_anim_fp_t)lv_btn_ink_effect_anim;
 8014d46:	4966      	ldr	r1, [pc, #408]	; (8014ee0 <lv_btn_signal+0x308>)
            a.time = ext->ink_in_time;
 8014d48:	f8ad 201c 	strh.w	r2, [sp, #28]
            a.repeat = 0;
 8014d4c:	f367 0341 	bfi	r3, r7, #1, #1
            a.path = lv_anim_path_linear;
 8014d50:	4a65      	ldr	r2, [pc, #404]	; (8014ee8 <lv_btn_signal+0x310>)
            a.start = 0;
 8014d52:	9705      	str	r7, [sp, #20]
            a.repeat = 0;
 8014d54:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
            a.end_cb = lv_btn_ink_effect_anim_ready;
 8014d58:	4b64      	ldr	r3, [pc, #400]	; (8014eec <lv_btn_signal+0x314>)
            a.act_time = 0;
 8014d5a:	f8ad 701e 	strh.w	r7, [sp, #30]
            a.var = btn;
 8014d5e:	9601      	str	r6, [sp, #4]
            a.playback_pause = 0;
 8014d60:	f8ad 7020 	strh.w	r7, [sp, #32]
            a.repeat_pause = 0;
 8014d64:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
            a.end = LV_BTN_INK_VALUE_MAX;
 8014d68:	9506      	str	r5, [sp, #24]
            a.fp = (lv_anim_fp_t)lv_btn_ink_effect_anim;
 8014d6a:	9102      	str	r1, [sp, #8]
            a.path = lv_anim_path_linear;
 8014d6c:	9204      	str	r2, [sp, #16]
            a.end_cb = lv_btn_ink_effect_anim_ready;
 8014d6e:	9303      	str	r3, [sp, #12]
            lv_anim_create(&a);
 8014d70:	f7fd fd9a 	bl	80128a8 <lv_anim_create>
 8014d74:	e787      	b.n	8014c86 <lv_btn_signal+0xae>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8014d76:	2f06      	cmp	r7, #6
 8014d78:	f47f af3a 	bne.w	8014bf0 <lv_btn_signal+0x18>
            if(buf->type[i] == NULL) break;
 8014d7c:	f8d8 3000 	ldr.w	r3, [r8]
 8014d80:	b1f3      	cbz	r3, 8014dc0 <lv_btn_signal+0x1e8>
 8014d82:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	f000 8146 	beq.w	8015018 <lv_btn_signal+0x440>
 8014d8c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	f000 813f 	beq.w	8015014 <lv_btn_signal+0x43c>
 8014d96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	f000 8138 	beq.w	8015010 <lv_btn_signal+0x438>
 8014da0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	f000 8131 	beq.w	801500c <lv_btn_signal+0x434>
 8014daa:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	f000 812a 	beq.w	8015008 <lv_btn_signal+0x430>
 8014db4:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	bf14      	ite	ne
 8014dbc:	2307      	movne	r3, #7
 8014dbe:	2306      	moveq	r3, #6
        buf->type[i] = "lv_btn";
 8014dc0:	4a4b      	ldr	r2, [pc, #300]	; (8014ef0 <lv_btn_signal+0x318>)
 8014dc2:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
 8014dc6:	e713      	b.n	8014bf0 <lv_btn_signal+0x18>
        if(lv_indev_is_dragging(param) != false) {
 8014dc8:	4640      	mov	r0, r8
 8014dca:	f7f4 fa21 	bl	8009210 <lv_indev_is_dragging>
 8014dce:	2800      	cmp	r0, #0
 8014dd0:	f43f af0e 	beq.w	8014bf0 <lv_btn_signal+0x18>
            if(ext->state == LV_BTN_STATE_PR) lv_btn_set_state(btn, LV_BTN_STATE_REL);
 8014dd4:	f899 3028 	ldrb.w	r3, [r9, #40]	; 0x28
 8014dd8:	2b01      	cmp	r3, #1
 8014dda:	f000 80e8 	beq.w	8014fae <lv_btn_signal+0x3d6>
            else if(ext->state == LV_BTN_STATE_TGL_PR) lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 8014dde:	2b03      	cmp	r3, #3
 8014de0:	f47f af06 	bne.w	8014bf0 <lv_btn_signal+0x18>
 8014de4:	4630      	mov	r0, r6
 8014de6:	f7ff fee3 	bl	8014bb0 <lv_btn_set_state.constprop.4>
 8014dea:	e701      	b.n	8014bf0 <lv_btn_signal+0x18>
        if(lv_indev_is_dragging(param) == false && ext->long_pr_action_executed == 0) {
 8014dec:	4640      	mov	r0, r8
    return ext->toggle != 0 ? true : false;
 8014dee:	f893 7030 	ldrb.w	r7, [r3, #48]	; 0x30
        if(lv_indev_is_dragging(param) == false && ext->long_pr_action_executed == 0) {
 8014df2:	f7f4 fa0d 	bl	8009210 <lv_indev_is_dragging>
 8014df6:	2800      	cmp	r0, #0
 8014df8:	d166      	bne.n	8014ec8 <lv_btn_signal+0x2f0>
 8014dfa:	f899 3030 	ldrb.w	r3, [r9, #48]	; 0x30
 8014dfe:	079b      	lsls	r3, r3, #30
 8014e00:	d462      	bmi.n	8014ec8 <lv_btn_signal+0x2f0>
            if(ext->state == LV_BTN_STATE_PR && tgl == false) {
 8014e02:	f899 3028 	ldrb.w	r3, [r9, #40]	; 0x28
    return ext->toggle != 0 ? true : false;
 8014e06:	f007 0701 	and.w	r7, r7, #1
            if(ext->state == LV_BTN_STATE_PR && tgl == false) {
 8014e0a:	2b01      	cmp	r3, #1
 8014e0c:	f000 80c4 	beq.w	8014f98 <lv_btn_signal+0x3c0>
            } else if(ext->state == LV_BTN_STATE_TGL_PR && tgl == false) {
 8014e10:	2b03      	cmp	r3, #3
 8014e12:	f000 80c6 	beq.w	8014fa2 <lv_btn_signal+0x3ca>
            if(ext->actions[LV_BTN_ACTION_CLICK] && state != LV_BTN_STATE_INA) {
 8014e16:	f1ba 0f04 	cmp.w	sl, #4
 8014e1a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014e1e:	d003      	beq.n	8014e28 <lv_btn_signal+0x250>
 8014e20:	b113      	cbz	r3, 8014e28 <lv_btn_signal+0x250>
                res = ext->actions[LV_BTN_ACTION_CLICK](btn);
 8014e22:	4630      	mov	r0, r6
 8014e24:	4798      	blx	r3
 8014e26:	4604      	mov	r4, r0
        if(ext->toggle) {
 8014e28:	f899 3030 	ldrb.w	r3, [r9, #48]	; 0x30
 8014e2c:	f013 0701 	ands.w	r7, r3, #1
 8014e30:	d173      	bne.n	8014f1a <lv_btn_signal+0x342>
        else if(ink_ready && ext->ink_out_time > 0) {
 8014e32:	7a2b      	ldrb	r3, [r5, #8]
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	f43f aedb 	beq.w	8014bf0 <lv_btn_signal+0x18>
 8014e3a:	f8b9 302e 	ldrh.w	r3, [r9, #46]	; 0x2e
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	f43f aed6 	beq.w	8014bf0 <lv_btn_signal+0x18>
            ink_playback = true;    /*It is the playback. If not set `lv_btn_ink_effect_anim_ready` will start its own playback*/
 8014e44:	2301      	movs	r3, #1
            ink_obj = btn;
 8014e46:	606e      	str	r6, [r5, #4]
            a.start = LV_BTN_INK_VALUE_MAX;
 8014e48:	f44f 7680 	mov.w	r6, #256	; 0x100
            ink_playback = true;    /*It is the playback. If not set `lv_btn_ink_effect_anim_ready` will start its own playback*/
 8014e4c:	726b      	strb	r3, [r5, #9]
            lv_indev_get_point(lv_indev_get_act(), &ink_point);
 8014e4e:	f7f4 f99d 	bl	800918c <lv_indev_get_act>
 8014e52:	4924      	ldr	r1, [pc, #144]	; (8014ee4 <lv_btn_signal+0x30c>)
 8014e54:	f7f4 f9ca 	bl	80091ec <lv_indev_get_point>
            a.playback = 0;
 8014e58:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
            a.var = ink_obj;
 8014e5c:	686a      	ldr	r2, [r5, #4]
            lv_anim_create(&a);
 8014e5e:	a801      	add	r0, sp, #4
            a.playback = 0;
 8014e60:	f367 0300 	bfi	r3, r7, #0, #1
            a.time = ext->ink_out_time;
 8014e64:	f8b9 e02e 	ldrh.w	lr, [r9, #46]	; 0x2e
            a.fp = (lv_anim_fp_t)lv_btn_ink_effect_anim;
 8014e68:	4d1d      	ldr	r5, [pc, #116]	; (8014ee0 <lv_btn_signal+0x308>)
            a.var = ink_obj;
 8014e6a:	9201      	str	r2, [sp, #4]
            a.repeat = 0;
 8014e6c:	f367 0341 	bfi	r3, r7, #1, #1
            a.path = lv_anim_path_linear;
 8014e70:	491d      	ldr	r1, [pc, #116]	; (8014ee8 <lv_btn_signal+0x310>)
            a.end_cb = lv_btn_ink_effect_anim_ready;
 8014e72:	4a1e      	ldr	r2, [pc, #120]	; (8014eec <lv_btn_signal+0x314>)
            a.time = ext->ink_out_time;
 8014e74:	f8ad e01c 	strh.w	lr, [sp, #28]
            a.end = 0;
 8014e78:	9706      	str	r7, [sp, #24]
            a.act_time = 0;
 8014e7a:	f8ad 701e 	strh.w	r7, [sp, #30]
            a.playback_pause = 0;
 8014e7e:	f8ad 7020 	strh.w	r7, [sp, #32]
            a.repeat_pause = 0;
 8014e82:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
            a.repeat = 0;
 8014e86:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
            a.start = LV_BTN_INK_VALUE_MAX;
 8014e8a:	9605      	str	r6, [sp, #20]
            a.fp = (lv_anim_fp_t)lv_btn_ink_effect_anim;
 8014e8c:	9502      	str	r5, [sp, #8]
            a.path = lv_anim_path_linear;
 8014e8e:	9104      	str	r1, [sp, #16]
            a.end_cb = lv_btn_ink_effect_anim_ready;
 8014e90:	9203      	str	r2, [sp, #12]
            lv_anim_create(&a);
 8014e92:	f7fd fd09 	bl	80128a8 <lv_anim_create>
 8014e96:	e6ab      	b.n	8014bf0 <lv_btn_signal+0x18>
        char c = *((char *)param);
 8014e98:	f898 3000 	ldrb.w	r3, [r8]
        if(c == LV_GROUP_KEY_RIGHT || c == LV_GROUP_KEY_UP) {
 8014e9c:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8014ea0:	2a11      	cmp	r2, #17
 8014ea2:	d04f      	beq.n	8014f44 <lv_btn_signal+0x36c>
        } else if(c == LV_GROUP_KEY_LEFT || c == LV_GROUP_KEY_DOWN) {
 8014ea4:	2b14      	cmp	r3, #20
 8014ea6:	d064      	beq.n	8014f72 <lv_btn_signal+0x39a>
 8014ea8:	2b12      	cmp	r3, #18
 8014eaa:	d062      	beq.n	8014f72 <lv_btn_signal+0x39a>
        } else if(c == LV_GROUP_KEY_ENTER) {
 8014eac:	2b0a      	cmp	r3, #10
 8014eae:	f47f ae9f 	bne.w	8014bf0 <lv_btn_signal+0x18>
            if(!ext->long_pr_action_executed) {
 8014eb2:	f899 3030 	ldrb.w	r3, [r9, #48]	; 0x30
 8014eb6:	079a      	lsls	r2, r3, #30
 8014eb8:	d57d      	bpl.n	8014fb6 <lv_btn_signal+0x3de>
                ext->long_pr_action_executed  = 0;
 8014eba:	f899 3030 	ldrb.w	r3, [r9, #48]	; 0x30
 8014ebe:	f36f 0341 	bfc	r3, #1, #1
 8014ec2:	f889 3030 	strb.w	r3, [r9, #48]	; 0x30
 8014ec6:	e693      	b.n	8014bf0 <lv_btn_signal+0x18>
            if(ext->state == LV_BTN_STATE_PR) {
 8014ec8:	f899 3028 	ldrb.w	r3, [r9, #40]	; 0x28
 8014ecc:	2b01      	cmp	r3, #1
 8014ece:	d05b      	beq.n	8014f88 <lv_btn_signal+0x3b0>
            } else if(ext->state == LV_BTN_STATE_TGL_PR) {
 8014ed0:	2b03      	cmp	r3, #3
 8014ed2:	d1a9      	bne.n	8014e28 <lv_btn_signal+0x250>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 8014ed4:	4630      	mov	r0, r6
 8014ed6:	f7ff fe6b 	bl	8014bb0 <lv_btn_set_state.constprop.4>
 8014eda:	e7a5      	b.n	8014e28 <lv_btn_signal+0x250>
 8014edc:	200165f4 	.word	0x200165f4
 8014ee0:	08014911 	.word	0x08014911
 8014ee4:	20016608 	.word	0x20016608
 8014ee8:	08012a0d 	.word	0x08012a0d
 8014eec:	08014921 	.word	0x08014921
 8014ef0:	080c7240 	.word	0x080c7240
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8014ef4:	4630      	mov	r0, r6
 8014ef6:	f7f7 f80f 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->state != state) {
 8014efa:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8014efe:	2b03      	cmp	r3, #3
 8014f00:	d006      	beq.n	8014f10 <lv_btn_signal+0x338>
        ext->state = state;
 8014f02:	2303      	movs	r3, #3
        lv_obj_set_style(btn, ext->styles[state]);
 8014f04:	6a01      	ldr	r1, [r0, #32]
        ext->state = state;
 8014f06:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        lv_obj_set_style(btn, ext->styles[state]);
 8014f0a:	4630      	mov	r0, r6
 8014f0c:	f7f6 f922 	bl	800b154 <lv_obj_set_style>
            ink_bg_state = LV_BTN_STATE_TGL_REL;
 8014f10:	2202      	movs	r2, #2
            ink_top_state = LV_BTN_STATE_TGL_PR;
 8014f12:	2303      	movs	r3, #3
            ink_bg_state = LV_BTN_STATE_TGL_REL;
 8014f14:	742a      	strb	r2, [r5, #16]
            ink_top_state = LV_BTN_STATE_TGL_PR;
 8014f16:	746b      	strb	r3, [r5, #17]
 8014f18:	e69f      	b.n	8014c5a <lv_btn_signal+0x82>
            ink_top_state = ext->state;
 8014f1a:	f899 3028 	ldrb.w	r3, [r9, #40]	; 0x28
 8014f1e:	746b      	strb	r3, [r5, #17]
 8014f20:	e666      	b.n	8014bf0 <lv_btn_signal+0x18>
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8014f22:	4630      	mov	r0, r6
 8014f24:	f7f6 fff8 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->state != state) {
 8014f28:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8014f2c:	4603      	mov	r3, r0
    if(ext->state != state) {
 8014f2e:	2a00      	cmp	r2, #0
 8014f30:	f43f ae5e 	beq.w	8014bf0 <lv_btn_signal+0x18>
        ext->state = state;
 8014f34:	2200      	movs	r2, #0
        lv_obj_set_style(btn, ext->styles[state]);
 8014f36:	4630      	mov	r0, r6
 8014f38:	6959      	ldr	r1, [r3, #20]
        ext->state = state;
 8014f3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        lv_obj_set_style(btn, ext->styles[state]);
 8014f3e:	f7f6 f909 	bl	800b154 <lv_obj_set_style>
 8014f42:	e655      	b.n	8014bf0 <lv_btn_signal+0x18>
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8014f44:	4630      	mov	r0, r6
 8014f46:	f7f6 ffe7 	bl	800bf18 <lv_obj_get_ext_attr>
    return ext->toggle != 0 ? true : false;
 8014f4a:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
            if(lv_btn_get_toggle(btn) != false) lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 8014f4e:	07d8      	lsls	r0, r3, #31
 8014f50:	d41e      	bmi.n	8014f90 <lv_btn_signal+0x3b8>
            if(ext->actions[LV_BTN_ACTION_CLICK] && lv_btn_get_state(btn) != LV_BTN_STATE_INA) {
 8014f52:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	f43f ae4a 	beq.w	8014bf0 <lv_btn_signal+0x18>
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8014f5c:	4630      	mov	r0, r6
 8014f5e:	f7f6 ffdb 	bl	800bf18 <lv_obj_get_ext_attr>
            if(ext->actions[LV_BTN_ACTION_CLICK] && lv_btn_get_state(btn) != LV_BTN_STATE_INA) {
 8014f62:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8014f66:	2b04      	cmp	r3, #4
 8014f68:	f43f ae42 	beq.w	8014bf0 <lv_btn_signal+0x18>
                res = ext->actions[LV_BTN_ACTION_CLICK](btn);
 8014f6c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014f70:	e690      	b.n	8014c94 <lv_btn_signal+0xbc>
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8014f72:	4630      	mov	r0, r6
 8014f74:	f7f6 ffd0 	bl	800bf18 <lv_obj_get_ext_attr>
    return ext->toggle != 0 ? true : false;
 8014f78:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
            if(lv_btn_get_toggle(btn) != false) lv_btn_set_state(btn, LV_BTN_STATE_REL);
 8014f7c:	07d9      	lsls	r1, r3, #31
 8014f7e:	d5e8      	bpl.n	8014f52 <lv_btn_signal+0x37a>
 8014f80:	4630      	mov	r0, r6
 8014f82:	f7ff fe03 	bl	8014b8c <lv_btn_set_state.constprop.3>
 8014f86:	e7e4      	b.n	8014f52 <lv_btn_signal+0x37a>
                lv_btn_set_state(btn, LV_BTN_STATE_REL);
 8014f88:	4630      	mov	r0, r6
 8014f8a:	f7ff fdff 	bl	8014b8c <lv_btn_set_state.constprop.3>
 8014f8e:	e74b      	b.n	8014e28 <lv_btn_signal+0x250>
            if(lv_btn_get_toggle(btn) != false) lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 8014f90:	4630      	mov	r0, r6
 8014f92:	f7ff fe0d 	bl	8014bb0 <lv_btn_set_state.constprop.4>
 8014f96:	e7dc      	b.n	8014f52 <lv_btn_signal+0x37a>
            if(ext->state == LV_BTN_STATE_PR && tgl == false) {
 8014f98:	b12f      	cbz	r7, 8014fa6 <lv_btn_signal+0x3ce>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 8014f9a:	4630      	mov	r0, r6
 8014f9c:	f7ff fe08 	bl	8014bb0 <lv_btn_set_state.constprop.4>
 8014fa0:	e739      	b.n	8014e16 <lv_btn_signal+0x23e>
            } else if(ext->state == LV_BTN_STATE_TGL_PR && tgl == false) {
 8014fa2:	2f00      	cmp	r7, #0
 8014fa4:	d0f9      	beq.n	8014f9a <lv_btn_signal+0x3c2>
                lv_btn_set_state(btn, LV_BTN_STATE_REL);
 8014fa6:	4630      	mov	r0, r6
 8014fa8:	f7ff fdf0 	bl	8014b8c <lv_btn_set_state.constprop.3>
 8014fac:	e733      	b.n	8014e16 <lv_btn_signal+0x23e>
            if(ext->state == LV_BTN_STATE_PR) lv_btn_set_state(btn, LV_BTN_STATE_REL);
 8014fae:	4630      	mov	r0, r6
 8014fb0:	f7ff fdec 	bl	8014b8c <lv_btn_set_state.constprop.3>
 8014fb4:	e61c      	b.n	8014bf0 <lv_btn_signal+0x18>
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8014fb6:	4630      	mov	r0, r6
 8014fb8:	f7f6 ffae 	bl	800bf18 <lv_obj_get_ext_attr>
    return ext->toggle != 0 ? true : false;
 8014fbc:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
                if(lv_btn_get_toggle(btn)) {
 8014fc0:	07db      	lsls	r3, r3, #31
 8014fc2:	d516      	bpl.n	8014ff2 <lv_btn_signal+0x41a>
                    if(state == LV_BTN_STATE_REL || state == LV_BTN_STATE_PR) lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 8014fc4:	f1ba 0f01 	cmp.w	sl, #1
 8014fc8:	d91a      	bls.n	8015000 <lv_btn_signal+0x428>
                    else if(state == LV_BTN_STATE_TGL_REL || state == LV_BTN_STATE_TGL_PR) lv_btn_set_state(btn, LV_BTN_STATE_REL);
 8014fca:	f1aa 0302 	sub.w	r3, sl, #2
 8014fce:	2b01      	cmp	r3, #1
 8014fd0:	d924      	bls.n	801501c <lv_btn_signal+0x444>
                if(ext->actions[LV_BTN_ACTION_CLICK] && state != LV_BTN_STATE_INA) {
 8014fd2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	f43f af6f 	beq.w	8014eba <lv_btn_signal+0x2e2>
 8014fdc:	f1ba 0f04 	cmp.w	sl, #4
 8014fe0:	f43f af6b 	beq.w	8014eba <lv_btn_signal+0x2e2>
                    res = ext->actions[LV_BTN_ACTION_CLICK](btn);
 8014fe4:	4630      	mov	r0, r6
 8014fe6:	4798      	blx	r3
            if(res != LV_RES_INV) {
 8014fe8:	4604      	mov	r4, r0
 8014fea:	2800      	cmp	r0, #0
 8014fec:	f43f ae00 	beq.w	8014bf0 <lv_btn_signal+0x18>
 8014ff0:	e763      	b.n	8014eba <lv_btn_signal+0x2e2>
                    if(state == LV_BTN_STATE_REL || state == LV_BTN_STATE_PR) lv_btn_set_state(btn, LV_BTN_STATE_REL);
 8014ff2:	f1ba 0f01 	cmp.w	sl, #1
 8014ff6:	d911      	bls.n	801501c <lv_btn_signal+0x444>
                    else if(state == LV_BTN_STATE_TGL_REL || state == LV_BTN_STATE_TGL_PR) lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 8014ff8:	f1aa 0302 	sub.w	r3, sl, #2
 8014ffc:	2b01      	cmp	r3, #1
 8014ffe:	d8e8      	bhi.n	8014fd2 <lv_btn_signal+0x3fa>
                    if(state == LV_BTN_STATE_REL || state == LV_BTN_STATE_PR) lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 8015000:	4630      	mov	r0, r6
 8015002:	f7ff fdd5 	bl	8014bb0 <lv_btn_set_state.constprop.4>
 8015006:	e7e4      	b.n	8014fd2 <lv_btn_signal+0x3fa>
            if(buf->type[i] == NULL) break;
 8015008:	2305      	movs	r3, #5
 801500a:	e6d9      	b.n	8014dc0 <lv_btn_signal+0x1e8>
 801500c:	2304      	movs	r3, #4
 801500e:	e6d7      	b.n	8014dc0 <lv_btn_signal+0x1e8>
 8015010:	2303      	movs	r3, #3
 8015012:	e6d5      	b.n	8014dc0 <lv_btn_signal+0x1e8>
 8015014:	2302      	movs	r3, #2
 8015016:	e6d3      	b.n	8014dc0 <lv_btn_signal+0x1e8>
 8015018:	2301      	movs	r3, #1
 801501a:	e6d1      	b.n	8014dc0 <lv_btn_signal+0x1e8>
                    else if(state == LV_BTN_STATE_TGL_REL || state == LV_BTN_STATE_TGL_PR) lv_btn_set_state(btn, LV_BTN_STATE_REL);
 801501c:	4630      	mov	r0, r6
 801501e:	f7ff fdb5 	bl	8014b8c <lv_btn_set_state.constprop.3>
 8015022:	e7d6      	b.n	8014fd2 <lv_btn_signal+0x3fa>

08015024 <lv_btn_create>:
{
 8015024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015026:	4607      	mov	r7, r0
 8015028:	460e      	mov	r6, r1
    new_btn = lv_cont_create(par, copy);
 801502a:	f002 fa19 	bl	8017460 <lv_cont_create>
    lv_mem_assert(new_btn);
 801502e:	2800      	cmp	r0, #0
 8015030:	d06f      	beq.n	8015112 <lv_btn_create+0xee>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_btn);
 8015032:	4c6b      	ldr	r4, [pc, #428]	; (80151e0 <lv_btn_create+0x1bc>)
 8015034:	4605      	mov	r5, r0
 8015036:	69a3      	ldr	r3, [r4, #24]
 8015038:	2b00      	cmp	r3, #0
 801503a:	f000 80c6 	beq.w	80151ca <lv_btn_create+0x1a6>
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_func(new_btn);
 801503e:	68e3      	ldr	r3, [r4, #12]
 8015040:	2b00      	cmp	r3, #0
 8015042:	f000 80bd 	beq.w	80151c0 <lv_btn_create+0x19c>
    lv_btn_ext_t * ext = lv_obj_allocate_ext_attr(new_btn, sizeof(lv_btn_ext_t));
 8015046:	2134      	movs	r1, #52	; 0x34
 8015048:	4628      	mov	r0, r5
 801504a:	f7f6 fdd3 	bl	800bbf4 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 801504e:	4604      	mov	r4, r0
 8015050:	2800      	cmp	r0, #0
 8015052:	d05d      	beq.n	8015110 <lv_btn_create+0xec>
    ext->long_pr_action_executed = 0;
 8015054:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    ext->state = LV_BTN_STATE_REL;
 8015058:	2300      	movs	r3, #0
    ext->styles[LV_BTN_STATE_REL] = &lv_style_btn_rel;
 801505a:	f8df c19c 	ldr.w	ip, [pc, #412]	; 80151f8 <lv_btn_create+0x1d4>
    lv_obj_set_signal_func(new_btn, lv_btn_signal);
 801505e:	4628      	mov	r0, r5
    ext->toggle = 0;
 8015060:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    ext->styles[LV_BTN_STATE_PR] = &lv_style_btn_pr;
 8015064:	f8df e194 	ldr.w	lr, [pc, #404]	; 80151fc <lv_btn_create+0x1d8>
    ext->state = LV_BTN_STATE_REL;
 8015068:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    ext->toggle = 0;
 801506c:	f363 0200 	bfi	r2, r3, #0, #1
    ext->actions[LV_BTN_ACTION_PR] = NULL;
 8015070:	60a3      	str	r3, [r4, #8]
    ext->actions[LV_BTN_ACTION_CLICK] = NULL;
 8015072:	6063      	str	r3, [r4, #4]
    ext->toggle = 0;
 8015074:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    ext->actions[LV_BTN_ACTION_LONG_PR] = NULL;
 8015078:	60e3      	str	r3, [r4, #12]
    ext->actions[LV_BTN_ACTION_LONG_PR_REPEAT] = NULL;
 801507a:	6123      	str	r3, [r4, #16]
    ext->ink_in_time = 0;
 801507c:	8563      	strh	r3, [r4, #42]	; 0x2a
    ext->ink_wait_time = 0;
 801507e:	85a3      	strh	r3, [r4, #44]	; 0x2c
    ext->ink_out_time = 0;
 8015080:	85e3      	strh	r3, [r4, #46]	; 0x2e
    ext->styles[LV_BTN_STATE_TGL_REL] = &lv_style_btn_tgl_rel;
 8015082:	4958      	ldr	r1, [pc, #352]	; (80151e4 <lv_btn_create+0x1c0>)
    ext->styles[LV_BTN_STATE_TGL_PR] = &lv_style_btn_tgl_pr;
 8015084:	4a58      	ldr	r2, [pc, #352]	; (80151e8 <lv_btn_create+0x1c4>)
    ext->styles[LV_BTN_STATE_INA] = &lv_style_btn_ina;
 8015086:	4b59      	ldr	r3, [pc, #356]	; (80151ec <lv_btn_create+0x1c8>)
    ext->styles[LV_BTN_STATE_TGL_REL] = &lv_style_btn_tgl_rel;
 8015088:	61e1      	str	r1, [r4, #28]
    ext->styles[LV_BTN_STATE_REL] = &lv_style_btn_rel;
 801508a:	f8c4 c014 	str.w	ip, [r4, #20]
    lv_obj_set_signal_func(new_btn, lv_btn_signal);
 801508e:	4958      	ldr	r1, [pc, #352]	; (80151f0 <lv_btn_create+0x1cc>)
    ext->styles[LV_BTN_STATE_PR] = &lv_style_btn_pr;
 8015090:	f8c4 e018 	str.w	lr, [r4, #24]
    ext->styles[LV_BTN_STATE_TGL_PR] = &lv_style_btn_tgl_pr;
 8015094:	6222      	str	r2, [r4, #32]
    ext->styles[LV_BTN_STATE_INA] = &lv_style_btn_ina;
 8015096:	6263      	str	r3, [r4, #36]	; 0x24
    lv_obj_set_signal_func(new_btn, lv_btn_signal);
 8015098:	f7f6 fda8 	bl	800bbec <lv_obj_set_signal_func>
    lv_obj_set_design_func(new_btn, lv_btn_design);
 801509c:	4955      	ldr	r1, [pc, #340]	; (80151f4 <lv_btn_create+0x1d0>)
 801509e:	4628      	mov	r0, r5
 80150a0:	f7f6 fda6 	bl	800bbf0 <lv_obj_set_design_func>
    if(copy == NULL) {
 80150a4:	b3b6      	cbz	r6, 8015114 <lv_btn_create+0xf0>
        lv_btn_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 80150a6:	4630      	mov	r0, r6
 80150a8:	f7f6 ff36 	bl	800bf18 <lv_obj_get_ext_attr>
        ext->state = copy_ext->state;
 80150ac:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
        ext->toggle = copy_ext->toggle;
 80150b0:	f894 7030 	ldrb.w	r7, [r4, #48]	; 0x30
        memcpy(ext->styles, copy_ext->styles, sizeof(ext->styles));
 80150b4:	4603      	mov	r3, r0
        ext->state = copy_ext->state;
 80150b6:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
        memcpy(ext->actions, copy_ext->actions, sizeof(ext->actions));
 80150ba:	4602      	mov	r2, r0
        ext->toggle = copy_ext->toggle;
 80150bc:	f890 e030 	ldrb.w	lr, [r0, #48]	; 0x30
 80150c0:	f36e 0700 	bfi	r7, lr, #0, #1
 80150c4:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
        ext->ink_in_time = copy_ext->ink_in_time;
 80150c8:	f8b0 e02a 	ldrh.w	lr, [r0, #42]	; 0x2a
        ext->ink_wait_time = copy_ext->ink_wait_time;
 80150cc:	8d87      	ldrh	r7, [r0, #44]	; 0x2c
        ext->ink_out_time = copy_ext->ink_out_time;
 80150ce:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
        ext->ink_in_time = copy_ext->ink_in_time;
 80150d0:	f8a4 e02a 	strh.w	lr, [r4, #42]	; 0x2a
        ext->ink_wait_time = copy_ext->ink_wait_time;
 80150d4:	85a7      	strh	r7, [r4, #44]	; 0x2c
        ext->ink_out_time = copy_ext->ink_out_time;
 80150d6:	85e0      	strh	r0, [r4, #46]	; 0x2e
        memcpy(ext->actions, copy_ext->actions, sizeof(ext->actions));
 80150d8:	f852 ef04 	ldr.w	lr, [r2, #4]!
 80150dc:	6857      	ldr	r7, [r2, #4]
 80150de:	6890      	ldr	r0, [r2, #8]
 80150e0:	68d2      	ldr	r2, [r2, #12]
 80150e2:	60e0      	str	r0, [r4, #12]
        lv_obj_refresh_style(new_btn);
 80150e4:	4628      	mov	r0, r5
        memcpy(ext->actions, copy_ext->actions, sizeof(ext->actions));
 80150e6:	f8c4 e004 	str.w	lr, [r4, #4]
 80150ea:	60a7      	str	r7, [r4, #8]
 80150ec:	6122      	str	r2, [r4, #16]
        memcpy(ext->styles, copy_ext->styles, sizeof(ext->styles));
 80150ee:	f853 2f14 	ldr.w	r2, [r3, #20]!
 80150f2:	f8d3 e004 	ldr.w	lr, [r3, #4]
 80150f6:	689f      	ldr	r7, [r3, #8]
 80150f8:	68de      	ldr	r6, [r3, #12]
 80150fa:	6162      	str	r2, [r4, #20]
 80150fc:	f8c4 e018 	str.w	lr, [r4, #24]
 8015100:	61e7      	str	r7, [r4, #28]
 8015102:	6226      	str	r6, [r4, #32]
 8015104:	691a      	ldr	r2, [r3, #16]
 8015106:	6262      	str	r2, [r4, #36]	; 0x24
        lv_obj_refresh_style(new_btn);
 8015108:	f7f6 fc32 	bl	800b970 <lv_obj_refresh_style>
}
 801510c:	4628      	mov	r0, r5
 801510e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015110:	e7fe      	b.n	8015110 <lv_btn_create+0xec>
 8015112:	e7fe      	b.n	8015112 <lv_btn_create+0xee>
        if(par != NULL) {
 8015114:	b11f      	cbz	r7, 801511e <lv_btn_create+0xfa>
 * @param btn pointer to a button object
 * @param layout a layout from 'lv_cont_layout_t'
 */
static inline void lv_btn_set_layout(lv_obj_t * btn, lv_layout_t layout)
{
    lv_cont_set_layout(btn, layout);
 8015116:	2101      	movs	r1, #1
 8015118:	4628      	mov	r0, r5
 801511a:	f002 f9fb 	bl	8017514 <lv_cont_set_layout>
        lv_obj_set_click(new_btn, true);        /*Be sure the button is clickable*/
 801511e:	2101      	movs	r1, #1
 8015120:	4628      	mov	r0, r5
 8015122:	f7f6 fd2f 	bl	800bb84 <lv_obj_set_click>
        lv_theme_t * th = lv_theme_get_current();
 8015126:	f008 fbff 	bl	801d928 <lv_theme_get_current>
        if(th) {
 801512a:	4606      	mov	r6, r0
 801512c:	2800      	cmp	r0, #0
 801512e:	d050      	beq.n	80151d2 <lv_btn_create+0x1ae>
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8015130:	4628      	mov	r0, r5
            lv_btn_set_style(new_btn, LV_BTN_STYLE_REL, th->btn.rel);
 8015132:	68f4      	ldr	r4, [r6, #12]
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8015134:	f7f6 fef0 	bl	800bf18 <lv_obj_get_ext_attr>
 8015138:	4603      	mov	r3, r0
    lv_obj_set_style(btn, ext->styles[ext->state]);
 801513a:	4628      	mov	r0, r5
 801513c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
            ext->styles[LV_BTN_STATE_REL] = style;
 8015140:	615c      	str	r4, [r3, #20]
    lv_obj_set_style(btn, ext->styles[ext->state]);
 8015142:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015146:	6959      	ldr	r1, [r3, #20]
 8015148:	f7f6 f804 	bl	800b154 <lv_obj_set_style>
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 801514c:	4628      	mov	r0, r5
            lv_btn_set_style(new_btn, LV_BTN_STYLE_PR, th->btn.pr);
 801514e:	6934      	ldr	r4, [r6, #16]
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8015150:	f7f6 fee2 	bl	800bf18 <lv_obj_get_ext_attr>
 8015154:	4603      	mov	r3, r0
    lv_obj_set_style(btn, ext->styles[ext->state]);
 8015156:	4628      	mov	r0, r5
 8015158:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
            ext->styles[LV_BTN_STATE_PR] = style;
 801515c:	619c      	str	r4, [r3, #24]
    lv_obj_set_style(btn, ext->styles[ext->state]);
 801515e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015162:	6959      	ldr	r1, [r3, #20]
 8015164:	f7f5 fff6 	bl	800b154 <lv_obj_set_style>
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8015168:	4628      	mov	r0, r5
            lv_btn_set_style(new_btn, LV_BTN_STYLE_TGL_REL, th->btn.tgl_rel);
 801516a:	6974      	ldr	r4, [r6, #20]
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 801516c:	f7f6 fed4 	bl	800bf18 <lv_obj_get_ext_attr>
 8015170:	4603      	mov	r3, r0
    lv_obj_set_style(btn, ext->styles[ext->state]);
 8015172:	4628      	mov	r0, r5
 8015174:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
            ext->styles[LV_BTN_STATE_TGL_REL] = style;
 8015178:	61dc      	str	r4, [r3, #28]
    lv_obj_set_style(btn, ext->styles[ext->state]);
 801517a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801517e:	6959      	ldr	r1, [r3, #20]
 8015180:	f7f5 ffe8 	bl	800b154 <lv_obj_set_style>
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8015184:	4628      	mov	r0, r5
            lv_btn_set_style(new_btn, LV_BTN_STYLE_TGL_PR, th->btn.tgl_pr);
 8015186:	69b4      	ldr	r4, [r6, #24]
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8015188:	f7f6 fec6 	bl	800bf18 <lv_obj_get_ext_attr>
 801518c:	4603      	mov	r3, r0
    lv_obj_set_style(btn, ext->styles[ext->state]);
 801518e:	4628      	mov	r0, r5
 8015190:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
            ext->styles[LV_BTN_STATE_TGL_PR] = style;
 8015194:	621c      	str	r4, [r3, #32]
    lv_obj_set_style(btn, ext->styles[ext->state]);
 8015196:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801519a:	6959      	ldr	r1, [r3, #20]
 801519c:	f7f5 ffda 	bl	800b154 <lv_obj_set_style>
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 80151a0:	4628      	mov	r0, r5
            lv_btn_set_style(new_btn, LV_BTN_STYLE_INA, th->btn.ina);
 80151a2:	69f4      	ldr	r4, [r6, #28]
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 80151a4:	f7f6 feb8 	bl	800bf18 <lv_obj_get_ext_attr>
 80151a8:	4603      	mov	r3, r0
    lv_obj_set_style(btn, ext->styles[ext->state]);
 80151aa:	4628      	mov	r0, r5
 80151ac:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
            ext->styles[LV_BTN_STATE_INA] = style;
 80151b0:	625c      	str	r4, [r3, #36]	; 0x24
    lv_obj_set_style(btn, ext->styles[ext->state]);
 80151b2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80151b6:	6959      	ldr	r1, [r3, #20]
 80151b8:	f7f5 ffcc 	bl	800b154 <lv_obj_set_style>
}
 80151bc:	4628      	mov	r0, r5
 80151be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_func(new_btn);
 80151c0:	4628      	mov	r0, r5
 80151c2:	f7f6 fea7 	bl	800bf14 <lv_obj_get_design_func>
 80151c6:	60e0      	str	r0, [r4, #12]
 80151c8:	e73d      	b.n	8015046 <lv_btn_create+0x22>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_btn);
 80151ca:	f7f6 fea1 	bl	800bf10 <lv_obj_get_signal_func>
 80151ce:	61a0      	str	r0, [r4, #24]
 80151d0:	e735      	b.n	801503e <lv_btn_create+0x1a>
            lv_obj_set_style(new_btn, ext->styles[LV_BTN_STATE_REL]);
 80151d2:	4628      	mov	r0, r5
 80151d4:	6961      	ldr	r1, [r4, #20]
 80151d6:	f7f5 ffbd 	bl	800b154 <lv_obj_set_style>
}
 80151da:	4628      	mov	r0, r5
 80151dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80151de:	bf00      	nop
 80151e0:	200165f4 	.word	0x200165f4
 80151e4:	20019384 	.word	0x20019384
 80151e8:	20019414 	.word	0x20019414
 80151ec:	200192ac 	.word	0x200192ac
 80151f0:	08014bd9 	.word	0x08014bd9
 80151f4:	080149b9 	.word	0x080149b9
 80151f8:	2001918c 	.word	0x2001918c
 80151fc:	200191d4 	.word	0x200191d4

08015200 <lv_btn_set_state>:
{
 8015200:	b538      	push	{r3, r4, r5, lr}
 8015202:	460c      	mov	r4, r1
 8015204:	4605      	mov	r5, r0
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8015206:	f7f6 fe87 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->state != state) {
 801520a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801520e:	42a3      	cmp	r3, r4
 8015210:	d009      	beq.n	8015226 <lv_btn_set_state+0x26>
        lv_obj_set_style(btn, ext->styles[state]);
 8015212:	eb00 0384 	add.w	r3, r0, r4, lsl #2
        ext->state = state;
 8015216:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
        lv_obj_set_style(btn, ext->styles[state]);
 801521a:	4628      	mov	r0, r5
 801521c:	6959      	ldr	r1, [r3, #20]
}
 801521e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_obj_set_style(btn, ext->styles[state]);
 8015222:	f7f5 bf97 	b.w	800b154 <lv_obj_set_style>
 8015226:	bd38      	pop	{r3, r4, r5, pc}

08015228 <lv_btn_set_action>:
    if(type >= LV_BTN_ACTION_NUM) return;
 8015228:	2903      	cmp	r1, #3
 801522a:	d900      	bls.n	801522e <lv_btn_set_action+0x6>
 801522c:	4770      	bx	lr
{
 801522e:	b538      	push	{r3, r4, r5, lr}
 8015230:	460c      	mov	r4, r1
 8015232:	4615      	mov	r5, r2
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8015234:	f7f6 fe70 	bl	800bf18 <lv_obj_get_ext_attr>
    ext->actions[type] = action;
 8015238:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 801523c:	6045      	str	r5, [r0, #4]
 801523e:	bd38      	pop	{r3, r4, r5, pc}

08015240 <lv_btn_set_style>:
{
 8015240:	b570      	push	{r4, r5, r6, lr}
 8015242:	460c      	mov	r4, r1
 8015244:	4616      	mov	r6, r2
 8015246:	4605      	mov	r5, r0
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8015248:	f7f6 fe66 	bl	800bf18 <lv_obj_get_ext_attr>
 801524c:	4603      	mov	r3, r0
    switch(type) {
 801524e:	2c04      	cmp	r4, #4
 8015250:	d805      	bhi.n	801525e <lv_btn_set_style+0x1e>
 8015252:	e8df f004 	tbb	[pc, r4]
 8015256:	100e      	.short	0x100e
 8015258:	1412      	.short	0x1412
 801525a:	03          	.byte	0x03
 801525b:	00          	.byte	0x00
            ext->styles[LV_BTN_STATE_INA] = style;
 801525c:	6246      	str	r6, [r0, #36]	; 0x24
    lv_obj_set_style(btn, ext->styles[ext->state]);
 801525e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8015262:	4628      	mov	r0, r5
 8015264:	eb03 0382 	add.w	r3, r3, r2, lsl #2
}
 8015268:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_set_style(btn, ext->styles[ext->state]);
 801526c:	6959      	ldr	r1, [r3, #20]
 801526e:	f7f5 bf71 	b.w	800b154 <lv_obj_set_style>
            ext->styles[LV_BTN_STATE_REL] = style;
 8015272:	6146      	str	r6, [r0, #20]
            break;
 8015274:	e7f3      	b.n	801525e <lv_btn_set_style+0x1e>
            ext->styles[LV_BTN_STATE_PR] = style;
 8015276:	6186      	str	r6, [r0, #24]
            break;
 8015278:	e7f1      	b.n	801525e <lv_btn_set_style+0x1e>
            ext->styles[LV_BTN_STATE_TGL_REL] = style;
 801527a:	61c6      	str	r6, [r0, #28]
            break;
 801527c:	e7ef      	b.n	801525e <lv_btn_set_style+0x1e>
            ext->styles[LV_BTN_STATE_TGL_PR] = style;
 801527e:	6206      	str	r6, [r0, #32]
            break;
 8015280:	e7ed      	b.n	801525e <lv_btn_set_style+0x1e>
 8015282:	bf00      	nop

08015284 <lv_btn_get_state>:
{
 8015284:	b508      	push	{r3, lr}
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8015286:	f7f6 fe47 	bl	800bf18 <lv_obj_get_ext_attr>
}
 801528a:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
 801528e:	bd08      	pop	{r3, pc}

08015290 <lv_btn_get_action>:
    if(type >= LV_BTN_ACTION_NUM) return NULL;
 8015290:	2903      	cmp	r1, #3
 8015292:	d807      	bhi.n	80152a4 <lv_btn_get_action+0x14>
{
 8015294:	b510      	push	{r4, lr}
 8015296:	460c      	mov	r4, r1
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8015298:	f7f6 fe3e 	bl	800bf18 <lv_obj_get_ext_attr>
    return ext->actions[type];
 801529c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80152a0:	6840      	ldr	r0, [r0, #4]
 80152a2:	bd10      	pop	{r4, pc}
    if(type >= LV_BTN_ACTION_NUM) return NULL;
 80152a4:	2000      	movs	r0, #0
 80152a6:	4770      	bx	lr

080152a8 <lv_btnm_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_btnm_design(lv_obj_t * btnm, const lv_area_t * mask, lv_design_mode_t mode)
{
 80152a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
 80152ac:	2a02      	cmp	r2, #2
{
 80152ae:	b0a7      	sub	sp, #156	; 0x9c
 80152b0:	9007      	str	r0, [sp, #28]
 80152b2:	9108      	str	r1, [sp, #32]
    if(mode == LV_DESIGN_COVER_CHK) {
 80152b4:	f000 815a 	beq.w	801556c <lv_btnm_design+0x2c4>
 80152b8:	4614      	mov	r4, r2
        return ancestor_design_f(btnm, mask, mode);
        /*Return false if the object is not covers the mask_p area*/
    }
    /*Draw the object*/
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 80152ba:	b11a      	cbz	r2, 80152c4 <lv_btnm_design+0x1c>
            area_tmp.y2 = area_tmp.y1 + txt_size.y;

            lv_draw_label(&area_tmp, mask, btn_style, opa_scale,  ext->map_p[txt_i], txt_flag, NULL);
        }
    }
    return true;
 80152bc:	2001      	movs	r0, #1
}
 80152be:	b027      	add	sp, #156	; 0x9c
 80152c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ancestor_design_f(btnm, mask, mode);
 80152c4:	4bab      	ldr	r3, [pc, #684]	; (8015574 <lv_btnm_design+0x2cc>)
 80152c6:	681b      	ldr	r3, [r3, #0]
 80152c8:	4798      	blx	r3
        lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 80152ca:	9d07      	ldr	r5, [sp, #28]
 80152cc:	4628      	mov	r0, r5
 80152ce:	f7f6 fe23 	bl	800bf18 <lv_obj_get_ext_attr>
 80152d2:	4683      	mov	fp, r0
        lv_style_t * bg_style = lv_obj_get_style(btnm);
 80152d4:	4628      	mov	r0, r5
 80152d6:	f7f6 fda1 	bl	800be1c <lv_obj_get_style>
 80152da:	900b      	str	r0, [sp, #44]	; 0x2c
        lv_opa_t opa_scale = lv_obj_get_opa_scale(btnm);
 80152dc:	4628      	mov	r0, r5
 80152de:	f7f6 fdfb 	bl	800bed8 <lv_obj_get_opa_scale>
        lv_obj_get_coords(btnm, &area_btnm);
 80152e2:	a910      	add	r1, sp, #64	; 0x40
        lv_opa_t opa_scale = lv_obj_get_opa_scale(btnm);
 80152e4:	9009      	str	r0, [sp, #36]	; 0x24
        lv_obj_get_coords(btnm, &area_btnm);
 80152e6:	4628      	mov	r0, r5
 80152e8:	f7f6 fd7a 	bl	800bde0 <lv_obj_get_coords>
        if(ext->recolor) txt_flag = LV_TXT_FLAG_RECOLOR;
 80152ec:	f89b 3026 	ldrb.w	r3, [fp, #38]	; 0x26
        for(btn_i = 0; btn_i < ext->btn_cnt; btn_i ++, txt_i ++) {
 80152f0:	f8bb 9020 	ldrh.w	r9, [fp, #32]
        lv_txt_flag_t txt_flag = LV_TXT_FLAG_NONE;
 80152f4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80152f8:	930a      	str	r3, [sp, #40]	; 0x28
        for(btn_i = 0; btn_i < ext->btn_cnt; btn_i ++, txt_i ++) {
 80152fa:	f1b9 0f00 	cmp.w	r9, #0
 80152fe:	d0dd      	beq.n	80152bc <lv_btnm_design+0x14>
 8015300:	46a2      	mov	sl, r4
            while(strcmp(ext->map_p[txt_i], "\n") == 0) {
 8015302:	4e9d      	ldr	r6, [pc, #628]	; (8015578 <lv_btnm_design+0x2d0>)
 8015304:	f8db 7000 	ldr.w	r7, [fp]
 8015308:	e000      	b.n	801530c <lv_btnm_design+0x64>
                txt_i ++;
 801530a:	b29c      	uxth	r4, r3
            while(strcmp(ext->map_p[txt_i], "\n") == 0) {
 801530c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8015310:	4631      	mov	r1, r6
 8015312:	ea4f 0884 	mov.w	r8, r4, lsl #2
 8015316:	4628      	mov	r0, r5
 8015318:	f7ea ff76 	bl	8000208 <strcmp>
                txt_i ++;
 801531c:	1c63      	adds	r3, r4, #1
            while(strcmp(ext->map_p[txt_i], "\n") == 0) {
 801531e:	2800      	cmp	r0, #0
 8015320:	d0f3      	beq.n	801530a <lv_btnm_design+0x62>
 8015322:	462b      	mov	r3, r5
 8015324:	4645      	mov	r5, r8
}

static bool button_is_hidden(const char * btn_str)
{
    /*If control byte presents and hidden bit is '1' then the button is hidden*/
    if(((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) &&
 8015326:	781b      	ldrb	r3, [r3, #0]
 8015328:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 801532c:	2b88      	cmp	r3, #136	; 0x88
 801532e:	f000 80b6 	beq.w	801549e <lv_btnm_design+0x1f6>
            lv_area_copy(&area_tmp, &ext->button_areas[btn_i]);
 8015332:	f8db 1004 	ldr.w	r1, [fp, #4]
    memcpy(dest, src, sizeof(lv_area_t));
 8015336:	ab12      	add	r3, sp, #72	; 0x48
            area_tmp.y1 += area_btnm.y1;
 8015338:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
            lv_area_copy(&area_tmp, &ext->button_areas[btn_i]);
 801533c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
            area_tmp.x1 += area_btnm.x1;
 8015340:	f8bd 7040 	ldrh.w	r7, [sp, #64]	; 0x40
 8015344:	6808      	ldr	r0, [r1, #0]
 8015346:	6849      	ldr	r1, [r1, #4]
 8015348:	c303      	stmia	r3!, {r0, r1}
            area_tmp.x2 += area_btnm.x1;
 801534a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
            area_tmp.x1 += area_btnm.x1;
 801534e:	f8bd 0048 	ldrh.w	r0, [sp, #72]	; 0x48
            area_tmp.y1 += area_btnm.y1;
 8015352:	f8bd 104a 	ldrh.w	r1, [sp, #74]	; 0x4a
            area_tmp.y2 += area_btnm.y1;
 8015356:	f8bd 804e 	ldrh.w	r8, [sp, #78]	; 0x4e
            area_tmp.x1 += area_btnm.x1;
 801535a:	4438      	add	r0, r7
            area_tmp.y1 += area_btnm.y1;
 801535c:	4411      	add	r1, r2
            area_tmp.x2 += area_btnm.x1;
 801535e:	441f      	add	r7, r3
            area_tmp.y2 += area_btnm.y1;
 8015360:	4490      	add	r8, r2
            if(button_is_inactive(ext->map_p[txt_i])) btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_INA);
 8015362:	f8db 3000 	ldr.w	r3, [fp]
            area_tmp.x1 += area_btnm.x1;
 8015366:	b282      	uxth	r2, r0
}

static bool button_is_inactive(const char * btn_str)
{
    /*If control byte presents and hidden bit is '1' then the button is hidden*/
    if(((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) &&
 8015368:	595b      	ldr	r3, [r3, r5]
            area_tmp.y1 += area_btnm.y1;
 801536a:	b289      	uxth	r1, r1
            area_tmp.x2 += area_btnm.x1;
 801536c:	b2bf      	uxth	r7, r7
            area_tmp.x1 += area_btnm.x1;
 801536e:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
            area_tmp.y2 += area_btnm.y1;
 8015372:	fa1f f888 	uxth.w	r8, r8
            area_tmp.y1 += area_btnm.y1;
 8015376:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
            area_tmp.x2 += area_btnm.x1;
 801537a:	f8ad 704c 	strh.w	r7, [sp, #76]	; 0x4c
            area_tmp.y2 += area_btnm.y1;
 801537e:	f8ad 804e 	strh.w	r8, [sp, #78]	; 0x4e
    if(((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) &&
 8015382:	781b      	ldrb	r3, [r3, #0]
            area_tmp.x1 += area_btnm.x1;
 8015384:	9205      	str	r2, [sp, #20]
    if(((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) &&
 8015386:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
            area_tmp.y1 += area_btnm.y1;
 801538a:	9106      	str	r1, [sp, #24]
    if(((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) &&
 801538c:	2ba0      	cmp	r3, #160	; 0xa0
 801538e:	f000 80b4 	beq.w	80154fa <lv_btnm_design+0x252>
            else if(btn_i != ext->btn_id_pr && btn_i != ext->btn_id_tgl) btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_REL);
 8015392:	f8bb 3022 	ldrh.w	r3, [fp, #34]	; 0x22
 8015396:	4553      	cmp	r3, sl
 8015398:	f000 80d9 	beq.w	801554e <lv_btnm_design+0x2a6>
 801539c:	f8bb 3024 	ldrh.w	r3, [fp, #36]	; 0x24
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 80153a0:	9807      	ldr	r0, [sp, #28]
            else if(btn_i != ext->btn_id_pr && btn_i != ext->btn_id_tgl) btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_REL);
 80153a2:	4553      	cmp	r3, sl
 80153a4:	f000 80af 	beq.w	8015506 <lv_btnm_design+0x25e>
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 80153a8:	f7f6 fdb6 	bl	800bf18 <lv_obj_get_ext_attr>
            style = ext->styles_btn[LV_BTN_STATE_REL];
 80153ac:	f8d0 900c 	ldr.w	r9, [r0, #12]
            lv_style_copy(&style_tmp, btn_style);
 80153b0:	4649      	mov	r1, r9
 80153b2:	a814      	add	r0, sp, #80	; 0x50
 80153b4:	f7f7 faae 	bl	800c914 <lv_style_copy>
            if(style_tmp.body.border.part & LV_BORDER_INTERNAL) {
 80153b8:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 80153bc:	06da      	lsls	r2, r3, #27
 80153be:	d470      	bmi.n	80154a2 <lv_btnm_design+0x1fa>
 80153c0:	3401      	adds	r4, #1
            lv_draw_rect(&area_tmp, mask, &style_tmp, opa_scale);
 80153c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153c4:	aa14      	add	r2, sp, #80	; 0x50
 80153c6:	9908      	ldr	r1, [sp, #32]
 80153c8:	a812      	add	r0, sp, #72	; 0x48
 80153ca:	f7fa fc63 	bl	800fc94 <lv_draw_rect>
    return area_p->x2 - area_p->x1 + 1;
 80153ce:	f8bd e044 	ldrh.w	lr, [sp, #68]	; 0x44
            if(btn_style->glass) btn_style = bg_style;
 80153d2:	f899 2000 	ldrb.w	r2, [r9]
            lv_txt_get_size(&txt_size, ext->map_p[txt_i], font,
 80153d6:	a80f      	add	r0, sp, #60	; 0x3c
 80153d8:	f8db 3000 	ldr.w	r3, [fp]
 80153dc:	f10e 0e01 	add.w	lr, lr, #1
 80153e0:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
        lv_style_t * bg_style = lv_obj_get_style(btnm);
 80153e4:	f012 0f01 	tst.w	r2, #1
            lv_txt_get_size(&txt_size, ext->map_p[txt_i], font,
 80153e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    return area_p->y2 - area_p->y1 + 1;
 80153ea:	f108 0801 	add.w	r8, r8, #1
    return area_p->x2 - area_p->x1 + 1;
 80153ee:	ebae 0e01 	sub.w	lr, lr, r1
 80153f2:	5959      	ldr	r1, [r3, r5]
        lv_style_t * bg_style = lv_obj_get_style(btnm);
 80153f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            lv_txt_get_size(&txt_size, ext->map_p[txt_i], font,
 80153f6:	fa0f fe8e 	sxth.w	lr, lr
        lv_style_t * bg_style = lv_obj_get_style(btnm);
 80153fa:	bf18      	it	ne
 80153fc:	4699      	movne	r9, r3
            lv_txt_get_size(&txt_size, ext->map_p[txt_i], font,
 80153fe:	f8d9 c02c 	ldr.w	ip, [r9, #44]	; 0x2c
 8015402:	f9b9 3030 	ldrsh.w	r3, [r9, #48]	; 0x30
 8015406:	9202      	str	r2, [sp, #8]
 8015408:	4662      	mov	r2, ip
 801540a:	f8cd e004 	str.w	lr, [sp, #4]
 801540e:	f9b9 e032 	ldrsh.w	lr, [r9, #50]	; 0x32
 8015412:	f8cd e000 	str.w	lr, [sp]
 8015416:	f7fe fc7b 	bl	8013d10 <lv_txt_get_size>
 801541a:	9905      	ldr	r1, [sp, #20]
 801541c:	1c7b      	adds	r3, r7, #1
            area_tmp.x1 += (btn_w - txt_size.x) / 2;
 801541e:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8015422:	f8bd 0048 	ldrh.w	r0, [sp, #72]	; 0x48
            lv_draw_label(&area_tmp, mask, btn_style, opa_scale,  ext->map_p[txt_i], txt_flag, NULL);
 8015426:	f04f 0e00 	mov.w	lr, #0
 801542a:	1a5b      	subs	r3, r3, r1
    return area_p->y2 - area_p->y1 + 1;
 801542c:	9906      	ldr	r1, [sp, #24]
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
 801542e:	f8bd c04a 	ldrh.w	ip, [sp, #74]	; 0x4a
            area_tmp.x1 += (btn_w - txt_size.x) / 2;
 8015432:	b21b      	sxth	r3, r3
 8015434:	eba8 0801 	sub.w	r8, r8, r1
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
 8015438:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
            area_tmp.x1 += (btn_w - txt_size.x) / 2;
 801543c:	1a9b      	subs	r3, r3, r2
            lv_draw_label(&area_tmp, mask, btn_style, opa_scale,  ext->map_p[txt_i], txt_flag, NULL);
 801543e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8015440:	f8cd e008 	str.w	lr, [sp, #8]
            area_tmp.x1 += (btn_w - txt_size.x) / 2;
 8015444:	bf48      	it	mi
 8015446:	3301      	addmi	r3, #1
            lv_draw_label(&area_tmp, mask, btn_style, opa_scale,  ext->map_p[txt_i], txt_flag, NULL);
 8015448:	9701      	str	r7, [sp, #4]
            area_tmp.x1 += (btn_w - txt_size.x) / 2;
 801544a:	eb00 0063 	add.w	r0, r0, r3, asr #1
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
 801544e:	fa0f f388 	sxth.w	r3, r8
            area_tmp.x1 += (btn_w - txt_size.x) / 2;
 8015452:	b280      	uxth	r0, r0
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
 8015454:	1a5b      	subs	r3, r3, r1
            area_tmp.x1 += (btn_w - txt_size.x) / 2;
 8015456:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
            area_tmp.x2 = area_tmp.x1 + txt_size.x;
 801545a:	4410      	add	r0, r2
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
 801545c:	bf48      	it	mi
 801545e:	3301      	addmi	r3, #1
            lv_draw_label(&area_tmp, mask, btn_style, opa_scale,  ext->map_p[txt_i], txt_flag, NULL);
 8015460:	464a      	mov	r2, r9
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
 8015462:	eb0c 0763 	add.w	r7, ip, r3, asr #1
            lv_draw_label(&area_tmp, mask, btn_style, opa_scale,  ext->map_p[txt_i], txt_flag, NULL);
 8015466:	f8db 3000 	ldr.w	r3, [fp]
            area_tmp.x2 = area_tmp.x1 + txt_size.x;
 801546a:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
 801546e:	b2bf      	uxth	r7, r7
            lv_draw_label(&area_tmp, mask, btn_style, opa_scale,  ext->map_p[txt_i], txt_flag, NULL);
 8015470:	5958      	ldr	r0, [r3, r5]
 8015472:	9b09      	ldr	r3, [sp, #36]	; 0x24
            area_tmp.y2 = area_tmp.y1 + txt_size.y;
 8015474:	187d      	adds	r5, r7, r1
            lv_draw_label(&area_tmp, mask, btn_style, opa_scale,  ext->map_p[txt_i], txt_flag, NULL);
 8015476:	9000      	str	r0, [sp, #0]
 8015478:	9908      	ldr	r1, [sp, #32]
 801547a:	a812      	add	r0, sp, #72	; 0x48
            area_tmp.y2 = area_tmp.y1 + txt_size.y;
 801547c:	f8ad 504e 	strh.w	r5, [sp, #78]	; 0x4e
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
 8015480:	f8ad 704a 	strh.w	r7, [sp, #74]	; 0x4a
            lv_draw_label(&area_tmp, mask, btn_style, opa_scale,  ext->map_p[txt_i], txt_flag, NULL);
 8015484:	f7f8 fac4 	bl	800da10 <lv_draw_label>
 8015488:	f8bb 9020 	ldrh.w	r9, [fp, #32]
        for(btn_i = 0; btn_i < ext->btn_cnt; btn_i ++, txt_i ++) {
 801548c:	f10a 0a01 	add.w	sl, sl, #1
 8015490:	b2a4      	uxth	r4, r4
 8015492:	fa1f fa8a 	uxth.w	sl, sl
 8015496:	45d1      	cmp	r9, sl
 8015498:	f63f af34 	bhi.w	8015304 <lv_btnm_design+0x5c>
 801549c:	e70e      	b.n	80152bc <lv_btnm_design+0x14>
 801549e:	3401      	adds	r4, #1
 80154a0:	e7f4      	b.n	801548c <lv_btnm_design+0x1e4>
                if(area_tmp.y1 == btnm->coords.y1 + bg_style->body.padding.ver) {
 80154a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80154a4:	f9bd 004a 	ldrsh.w	r0, [sp, #74]	; 0x4a
 80154a8:	f9b2 1020 	ldrsh.w	r1, [r2, #32]
 80154ac:	9a07      	ldr	r2, [sp, #28]
 80154ae:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80154b2:	440a      	add	r2, r1
 80154b4:	4290      	cmp	r0, r2
 80154b6:	d045      	beq.n	8015544 <lv_btnm_design+0x29c>
                if(area_tmp.y2 == btnm->coords.y2 - bg_style->body.padding.ver) {
 80154b8:	9a07      	ldr	r2, [sp, #28]
 80154ba:	f9bd 004e 	ldrsh.w	r0, [sp, #78]	; 0x4e
 80154be:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 80154c2:	1a52      	subs	r2, r2, r1
 80154c4:	4290      	cmp	r0, r2
 80154c6:	d038      	beq.n	801553a <lv_btnm_design+0x292>
                if(txt_i == 0) {
 80154c8:	bb14      	cbnz	r4, 8015510 <lv_btnm_design+0x268>
                    style_tmp.body.border.part &= ~LV_BORDER_LEFT;
 80154ca:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 80154ce:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
 80154d2:	f8db 2000 	ldr.w	r2, [fp]
                if(ext->map_p[txt_i + 1][0] == '\0' || strcmp(ext->map_p[txt_i + 1], "\n") == 0) {
 80154d6:	3401      	adds	r4, #1
 80154d8:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 80154dc:	7802      	ldrb	r2, [r0, #0]
 80154de:	b13a      	cbz	r2, 80154f0 <lv_btnm_design+0x248>
 80154e0:	4631      	mov	r1, r6
 80154e2:	930c      	str	r3, [sp, #48]	; 0x30
 80154e4:	f7ea fe90 	bl	8000208 <strcmp>
 80154e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80154ea:	2800      	cmp	r0, #0
 80154ec:	f47f af69 	bne.w	80153c2 <lv_btnm_design+0x11a>
                        style_tmp.body.border.part &= ~LV_BORDER_RIGHT;
 80154f0:	f023 0308 	bic.w	r3, r3, #8
 80154f4:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
 80154f8:	e763      	b.n	80153c2 <lv_btnm_design+0x11a>
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 80154fa:	9807      	ldr	r0, [sp, #28]
 80154fc:	f7f6 fd0c 	bl	800bf18 <lv_obj_get_ext_attr>
            style = ext->styles_btn[LV_BTN_STATE_INA];
 8015500:	f8d0 901c 	ldr.w	r9, [r0, #28]
 8015504:	e754      	b.n	80153b0 <lv_btnm_design+0x108>
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8015506:	f7f6 fd07 	bl	800bf18 <lv_obj_get_ext_attr>
            style = ext->styles_btn[LV_BTN_STATE_TGL_REL];
 801550a:	f8d0 9014 	ldr.w	r9, [r0, #20]
 801550e:	e74f      	b.n	80153b0 <lv_btnm_design+0x108>
                else if(strcmp(ext->map_p[txt_i - 1],"\n") == 0) {
 8015510:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 8015514:	f8db 2000 	ldr.w	r2, [fp]
 8015518:	4631      	mov	r1, r6
 801551a:	930d      	str	r3, [sp, #52]	; 0x34
 801551c:	4420      	add	r0, r4
 801551e:	920c      	str	r2, [sp, #48]	; 0x30
 8015520:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8015524:	f7ea fe70 	bl	8000208 <strcmp>
 8015528:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801552a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801552c:	2800      	cmp	r0, #0
 801552e:	d1d2      	bne.n	80154d6 <lv_btnm_design+0x22e>
                    style_tmp.body.border.part &= ~LV_BORDER_LEFT;
 8015530:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 8015534:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
 8015538:	e7cd      	b.n	80154d6 <lv_btnm_design+0x22e>
                    style_tmp.body.border.part &= ~LV_BORDER_BOTTOM;
 801553a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 801553e:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
 8015542:	e7c1      	b.n	80154c8 <lv_btnm_design+0x220>
                    style_tmp.body.border.part &= ~LV_BORDER_TOP;
 8015544:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8015548:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
 801554c:	e7b4      	b.n	80154b8 <lv_btnm_design+0x210>
            else if(btn_i == ext->btn_id_pr && btn_i != ext->btn_id_tgl) btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_PR);
 801554e:	f8bb 3024 	ldrh.w	r3, [fp, #36]	; 0x24
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8015552:	9807      	ldr	r0, [sp, #28]
            else if(btn_i == ext->btn_id_pr && btn_i != ext->btn_id_tgl) btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_PR);
 8015554:	4553      	cmp	r3, sl
 8015556:	d004      	beq.n	8015562 <lv_btnm_design+0x2ba>
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8015558:	f7f6 fcde 	bl	800bf18 <lv_obj_get_ext_attr>
            style = ext->styles_btn[LV_BTN_STATE_PR];
 801555c:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8015560:	e726      	b.n	80153b0 <lv_btnm_design+0x108>
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8015562:	f7f6 fcd9 	bl	800bf18 <lv_obj_get_ext_attr>
            style = ext->styles_btn[LV_BTN_STATE_TGL_PR];
 8015566:	f8d0 9018 	ldr.w	r9, [r0, #24]
 801556a:	e721      	b.n	80153b0 <lv_btnm_design+0x108>
        return ancestor_design_f(btnm, mask, mode);
 801556c:	4b01      	ldr	r3, [pc, #4]	; (8015574 <lv_btnm_design+0x2cc>)
 801556e:	681b      	ldr	r3, [r3, #0]
 8015570:	4798      	blx	r3
 8015572:	e6a4      	b.n	80152be <lv_btnm_design+0x16>
 8015574:	20016610 	.word	0x20016610
 8015578:	080c7248 	.word	0x080c7248

0801557c <lv_btnm_set_map>:
{
 801557c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015580:	b091      	sub	sp, #68	; 0x44
 8015582:	900b      	str	r0, [sp, #44]	; 0x2c
    if(map == NULL) return;
 8015584:	2900      	cmp	r1, #0
 8015586:	f000 8145 	beq.w	8015814 <lv_btnm_set_map+0x298>
 801558a:	468a      	mov	sl, r1
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801558c:	f7f6 fcc4 	bl	800bf18 <lv_obj_get_ext_attr>
 8015590:	4603      	mov	r3, r0
 8015592:	900c      	str	r0, [sp, #48]	; 0x30
    while(strlen(map[i]) != 0) {
 8015594:	f8da 0000 	ldr.w	r0, [sl]
    ext->map_p = map;
 8015598:	f8c3 a000 	str.w	sl, [r3]
    while(strlen(map[i]) != 0) {
 801559c:	7804      	ldrb	r4, [r0, #0]
 801559e:	2c00      	cmp	r4, #0
 80155a0:	f000 813d 	beq.w	801581e <lv_btnm_set_map+0x2a2>
 80155a4:	2400      	movs	r4, #0
        if(strcmp(map[i], "\n") != 0) { /*Do not count line breaks*/
 80155a6:	4e9f      	ldr	r6, [pc, #636]	; (8015824 <lv_btnm_set_map+0x2a8>)
    while(strlen(map[i]) != 0) {
 80155a8:	4625      	mov	r5, r4
        if(strcmp(map[i], "\n") != 0) { /*Do not count line breaks*/
 80155aa:	4631      	mov	r1, r6
        i++;
 80155ac:	3401      	adds	r4, #1
        if(strcmp(map[i], "\n") != 0) { /*Do not count line breaks*/
 80155ae:	f7ea fe2b 	bl	8000208 <strcmp>
            btn_cnt ++;
 80155b2:	1c6b      	adds	r3, r5, #1
        if(strcmp(map[i], "\n") != 0) { /*Do not count line breaks*/
 80155b4:	b100      	cbz	r0, 80155b8 <lv_btnm_set_map+0x3c>
            btn_cnt ++;
 80155b6:	b29d      	uxth	r5, r3
        i++;
 80155b8:	b2a4      	uxth	r4, r4
    while(strlen(map[i]) != 0) {
 80155ba:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
 80155be:	7803      	ldrb	r3, [r0, #0]
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d1f2      	bne.n	80155aa <lv_btnm_set_map+0x2e>
 80155c4:	00ec      	lsls	r4, r5, #3
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 80155c6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80155c8:	f7f6 fca6 	bl	800bf18 <lv_obj_get_ext_attr>
 80155cc:	4606      	mov	r6, r0
    if(ext->button_areas != NULL) {
 80155ce:	6840      	ldr	r0, [r0, #4]
 80155d0:	b118      	cbz	r0, 80155da <lv_btnm_set_map+0x5e>
        lv_mem_free(ext->button_areas);
 80155d2:	f7fd fe4b 	bl	801326c <lv_mem_free>
        ext->button_areas = NULL;
 80155d6:	2300      	movs	r3, #0
 80155d8:	6073      	str	r3, [r6, #4]
    ext->button_areas = lv_mem_alloc(sizeof(lv_area_t) * btn_cnt);
 80155da:	4620      	mov	r0, r4
 80155dc:	f7fd fe3e 	bl	801325c <lv_mem_alloc>
 80155e0:	6070      	str	r0, [r6, #4]
    lv_mem_assert(ext->button_areas);
 80155e2:	2800      	cmp	r0, #0
 80155e4:	d079      	beq.n	80156da <lv_btnm_set_map+0x15e>
    ext->btn_cnt = btn_cnt;
 80155e6:	8435      	strh	r5, [r6, #32]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 80155e8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80155ea:	4628      	mov	r0, r5
 80155ec:	f7f6 fc94 	bl	800bf18 <lv_obj_get_ext_attr>
            style = lv_obj_get_style(btnm);
 80155f0:	4628      	mov	r0, r5
 80155f2:	f7f6 fc13 	bl	800be1c <lv_obj_get_style>
 80155f6:	4604      	mov	r4, r0
 80155f8:	9008      	str	r0, [sp, #32]
    lv_coord_t max_w = lv_obj_get_width(btnm) - 2 * style_bg->body.padding.hor;
 80155fa:	4628      	mov	r0, r5
 80155fc:	f7f6 fc02 	bl	800be04 <lv_obj_get_width>
 8015600:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8015602:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
    lv_coord_t max_h = lv_obj_get_height(btnm) - 2 * style_bg->body.padding.ver;
 8015606:	4628      	mov	r0, r5
    lv_coord_t max_w = lv_obj_get_width(btnm) - 2 * style_bg->body.padding.hor;
 8015608:	b29b      	uxth	r3, r3
 801560a:	930d      	str	r3, [sp, #52]	; 0x34
    lv_coord_t max_h = lv_obj_get_height(btnm) - 2 * style_bg->body.padding.ver;
 801560c:	f7f6 fc00 	bl	800be10 <lv_obj_get_height>
 8015610:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
    for(li = 0; strlen(map[li]) != 0; li++) {
 8015614:	f8da 2000 	ldr.w	r2, [sl]
    lv_coord_t max_h = lv_obj_get_height(btnm) - 2 * style_bg->body.padding.ver;
 8015618:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 801561c:	9303      	str	r3, [sp, #12]
    for(li = 0; strlen(map[li]) != 0; li++) {
 801561e:	7813      	ldrb	r3, [r2, #0]
    lv_coord_t max_h = lv_obj_get_height(btnm) - 2 * style_bg->body.padding.ver;
 8015620:	b281      	uxth	r1, r0
 8015622:	910a      	str	r1, [sp, #40]	; 0x28
    for(li = 0; strlen(map[li]) != 0; li++) {
 8015624:	2b00      	cmp	r3, #0
 8015626:	f000 80f8 	beq.w	801581a <lv_btnm_set_map+0x29e>
 801562a:	2500      	movs	r5, #0
 801562c:	2601      	movs	r6, #1
        if(strcmp(map[li], "\n") == 0) line_cnt ++;
 801562e:	4c7d      	ldr	r4, [pc, #500]	; (8015824 <lv_btnm_set_map+0x2a8>)
 8015630:	4610      	mov	r0, r2
 8015632:	4621      	mov	r1, r4
    for(li = 0; strlen(map[li]) != 0; li++) {
 8015634:	3501      	adds	r5, #1
        if(strcmp(map[li], "\n") == 0) line_cnt ++;
 8015636:	f7ea fde7 	bl	8000208 <strcmp>
 801563a:	1c73      	adds	r3, r6, #1
 801563c:	b900      	cbnz	r0, 8015640 <lv_btnm_set_map+0xc4>
 801563e:	b2de      	uxtb	r6, r3
    for(li = 0; strlen(map[li]) != 0; li++) {
 8015640:	b2ed      	uxtb	r5, r5
 8015642:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 8015646:	7803      	ldrb	r3, [r0, #0]
 8015648:	2b00      	cmp	r3, #0
 801564a:	d1f2      	bne.n	8015632 <lv_btnm_set_map+0xb6>
 801564c:	1e73      	subs	r3, r6, #1
 801564e:	b29b      	uxth	r3, r3
    lv_coord_t btn_h = max_h - ((line_cnt - 1) * style_bg->body.padding.inner);
 8015650:	9a08      	ldr	r2, [sp, #32]
 8015652:	f9b2 b024 	ldrsh.w	fp, [r2, #36]	; 0x24
    uint16_t btn_i = 0;     /*Act. index of button areas*/
 8015656:	2200      	movs	r2, #0
    lv_coord_t btn_h = max_h - ((line_cnt - 1) * style_bg->body.padding.inner);
 8015658:	fb1b f303 	smulbb	r3, fp, r3
    uint16_t btn_i = 0;     /*Act. index of button areas*/
 801565c:	9204      	str	r2, [sp, #16]
    lv_coord_t btn_h = max_h - ((line_cnt - 1) * style_bg->body.padding.inner);
 801565e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015660:	1ad3      	subs	r3, r2, r3
    btn_h = btn_h / line_cnt;
 8015662:	b21b      	sxth	r3, r3
 8015664:	fb93 f3f6 	sdiv	r3, r3, r6
    btn_h --;                              /*-1 because e.g. height = 100 means 101 pixels (0..100)*/
 8015668:	3b01      	subs	r3, #1
 801566a:	b21b      	sxth	r3, r3
 801566c:	9307      	str	r3, [sp, #28]
        while(strcmp(map_p_tmp[btn_cnt], "\n") != 0 &&
 801566e:	2500      	movs	r5, #0
        unit_cnt = 0;
 8015670:	462c      	mov	r4, r5
        while(strcmp(map_p_tmp[btn_cnt], "\n") != 0 &&
 8015672:	e00b      	b.n	801568c <lv_btnm_set_map+0x110>
                strlen(map_p_tmp[btn_cnt]) != 0) { /*Check a line*/
 8015674:	783a      	ldrb	r2, [r7, #0]
    if((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) {
 8015676:	f002 01c0 	and.w	r1, r2, #192	; 0xc0
        while(strcmp(map_p_tmp[btn_cnt], "\n") != 0 &&
 801567a:	b37a      	cbz	r2, 80156dc <lv_btnm_set_map+0x160>
    if((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) {
 801567c:	2980      	cmp	r1, #128	; 0x80
 801567e:	f105 0501 	add.w	r5, r5, #1
        return btn_str[0] & LV_BTNM_WIDTH_MASK;
 8015682:	bf08      	it	eq
 8015684:	f002 0307 	andeq.w	r3, r2, #7
            unit_cnt += get_button_width(map_p_tmp[btn_cnt]);
 8015688:	4423      	add	r3, r4
 801568a:	b29c      	uxth	r4, r3
 801568c:	b2ae      	uxth	r6, r5
        while(strcmp(map_p_tmp[btn_cnt], "\n") != 0 &&
 801568e:	4965      	ldr	r1, [pc, #404]	; (8015824 <lv_btnm_set_map+0x2a8>)
 8015690:	f85a 7026 	ldr.w	r7, [sl, r6, lsl #2]
 8015694:	eb0a 0986 	add.w	r9, sl, r6, lsl #2
 8015698:	4638      	mov	r0, r7
 801569a:	f7ea fdb5 	bl	8000208 <strcmp>
    if((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) {
 801569e:	2301      	movs	r3, #1
        while(strcmp(map_p_tmp[btn_cnt], "\n") != 0 &&
 80156a0:	2800      	cmp	r0, #0
 80156a2:	d1e7      	bne.n	8015674 <lv_btnm_set_map+0xf8>
 80156a4:	463b      	mov	r3, r7
 80156a6:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80156aa:	4637      	mov	r7, r6
 80156ac:	4698      	mov	r8, r3
        if(map_p_tmp[btn_cnt][0] == '\0') {         /*Last row?*/
 80156ae:	781b      	ldrb	r3, [r3, #0]
 80156b0:	b1cb      	cbz	r3, 80156e6 <lv_btnm_set_map+0x16a>
 80156b2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
        if(btn_cnt != 0) {
 80156b6:	bb17      	cbnz	r7, 80156fe <lv_btnm_set_map+0x182>
 80156b8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80156bc:	fa12 f383 	uxtah	r3, r2, r3
        if(strlen(map_p_tmp[btn_cnt]) == 0) break; /*Break on end of map*/
 80156c0:	f898 2000 	ldrb.w	r2, [r8]
 80156c4:	9306      	str	r3, [sp, #24]
        act_y += btn_h + style_bg->body.padding.inner;
 80156c6:	445b      	add	r3, fp
 80156c8:	b21b      	sxth	r3, r3
 80156ca:	9303      	str	r3, [sp, #12]
        if(strlen(map_p_tmp[btn_cnt]) == 0) break; /*Break on end of map*/
 80156cc:	2a00      	cmp	r2, #0
 80156ce:	f000 809b 	beq.w	8015808 <lv_btnm_set_map+0x28c>
        map_p_tmp = &map_p_tmp[btn_cnt + 1]; /*Set the map to the next line*/
 80156d2:	3601      	adds	r6, #1
 80156d4:	eb0a 0a86 	add.w	sl, sl, r6, lsl #2
        unit_cnt = 0;
 80156d8:	e7c9      	b.n	801566e <lv_btnm_set_map+0xf2>
 80156da:	e7fe      	b.n	80156da <lv_btnm_set_map+0x15e>
 80156dc:	463b      	mov	r3, r7
 80156de:	4637      	mov	r7, r6
 80156e0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80156e4:	4698      	mov	r8, r3
            btn_h = max_h - act_y + style_bg->body.padding.ver - 1;
 80156e6:	9b08      	ldr	r3, [sp, #32]
 80156e8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80156ea:	8c1b      	ldrh	r3, [r3, #32]
 80156ec:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80156f0:	3b01      	subs	r3, #1
 80156f2:	440b      	add	r3, r1
 80156f4:	1a9b      	subs	r3, r3, r2
 80156f6:	b21b      	sxth	r3, r3
 80156f8:	9307      	str	r3, [sp, #28]
        if(btn_cnt != 0) {
 80156fa:	2f00      	cmp	r7, #0
 80156fc:	d0dc      	beq.n	80156b8 <lv_btnm_set_map+0x13c>
 80156fe:	f8bd 101c 	ldrh.w	r1, [sp, #28]
            lv_coord_t all_unit_w = max_w - ((btn_cnt - 1) * style_bg->body.padding.inner);
 8015702:	1e73      	subs	r3, r6, #1
 8015704:	f04f 0800 	mov.w	r8, #0
 8015708:	f1aa 0904 	sub.w	r9, sl, #4
 801570c:	fa12 f281 	uxtah	r2, r2, r1
 8015710:	46de      	mov	lr, fp
 8015712:	fb13 f30b 	smulbb	r3, r3, fp
 8015716:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801571a:	9206      	str	r2, [sp, #24]
                    lv_area_set(&ext->button_areas[btn_i],  act_x, act_y,
 801571c:	b212      	sxth	r2, r2
            lv_coord_t all_unit_w = max_w - ((btn_cnt - 1) * style_bg->body.padding.inner);
 801571e:	960f      	str	r6, [sp, #60]	; 0x3c
 8015720:	4645      	mov	r5, r8
                    lv_area_set(&ext->button_areas[btn_i],  act_x, act_y,
 8015722:	9205      	str	r2, [sp, #20]
 8015724:	4641      	mov	r1, r8
            lv_coord_t all_unit_w = max_w - ((btn_cnt - 1) * style_bg->body.padding.inner);
 8015726:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015728:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 801572c:	1ad3      	subs	r3, r2, r3
 801572e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015732:	b21b      	sxth	r3, r3
 8015734:	461e      	mov	r6, r3
 8015736:	e023      	b.n	8015780 <lv_btnm_set_map+0x204>
                if(style_bg->body.padding.inner == 0 && act_x != style_bg->body.padding.hor) {
 8015738:	458c      	cmp	ip, r1
 801573a:	d043      	beq.n	80157c4 <lv_btnm_set_map+0x248>
                    lv_area_set(&ext->button_areas[btn_i],  ext->button_areas[btn_i - 1].x2, act_y,
 801573c:	f8db 1004 	ldr.w	r1, [fp, #4]
                                act_x + act_unit_w, act_y + btn_h);
 8015740:	4413      	add	r3, r2
                    lv_area_set(&ext->button_areas[btn_i],  ext->button_areas[btn_i - 1].x2, act_y,
 8015742:	9a03      	ldr	r2, [sp, #12]
 8015744:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8015748:	9905      	ldr	r1, [sp, #20]
 801574a:	b21b      	sxth	r3, r3
 801574c:	f930 ec04 	ldrsh.w	lr, [r0, #-4]
 8015750:	9100      	str	r1, [sp, #0]
 8015752:	4671      	mov	r1, lr
 8015754:	f7fd f97c 	bl	8012a50 <lv_area_set>
 8015758:	f859 3f04 	ldr.w	r3, [r9, #4]!
 801575c:	f108 0801 	add.w	r8, r8, #1
 8015760:	781b      	ldrb	r3, [r3, #0]
            for(i = 0; i < btn_cnt; i++) {
 8015762:	fa1f f188 	uxth.w	r1, r8
    if((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) {
 8015766:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 801576a:	2a80      	cmp	r2, #128	; 0x80
        return btn_str[0] & LV_BTNM_WIDTH_MASK;
 801576c:	bf0c      	ite	eq
 801576e:	f003 0307 	andeq.w	r3, r3, #7
    if((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) {
 8015772:	2301      	movne	r3, #1
            for(i = 0; i < btn_cnt; i++) {
 8015774:	428f      	cmp	r7, r1
                unit_act_cnt += get_button_width(map_p_tmp[i]);
 8015776:	441d      	add	r5, r3
 8015778:	b2ad      	uxth	r5, r5
            for(i = 0; i < btn_cnt; i++) {
 801577a:	d92f      	bls.n	80157dc <lv_btnm_set_map+0x260>
 801577c:	f9ba e024 	ldrsh.w	lr, [sl, #36]	; 0x24
 8015780:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8015784:	9a04      	ldr	r2, [sp, #16]
 8015786:	781b      	ldrb	r3, [r3, #0]
 8015788:	1850      	adds	r0, r2, r1
                act_x = (unit_act_cnt * all_unit_w) / unit_cnt + i * style_bg->body.padding.inner + style_bg->body.padding.hor;
 801578a:	f9ba c022 	ldrsh.w	ip, [sl, #34]	; 0x22
 801578e:	fb1e f101 	smulbb	r1, lr, r1
    if((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) {
 8015792:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8015796:	b280      	uxth	r0, r0
 8015798:	2a80      	cmp	r2, #128	; 0x80
                act_x = (unit_act_cnt * all_unit_w) / unit_cnt + i * style_bg->body.padding.inner + style_bg->body.padding.hor;
 801579a:	fb06 f205 	mul.w	r2, r6, r5
 801579e:	4461      	add	r1, ip
        return btn_str[0] & LV_BTNM_WIDTH_MASK;
 80157a0:	bf0c      	ite	eq
 80157a2:	f003 0307 	andeq.w	r3, r3, #7
    if((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) {
 80157a6:	2301      	movne	r3, #1
                act_x = (unit_act_cnt * all_unit_w) / unit_cnt + i * style_bg->body.padding.inner + style_bg->body.padding.hor;
 80157a8:	fb92 f2f4 	sdiv	r2, r2, r4
                act_unit_w = (all_unit_w * get_button_width(map_p_tmp[i])) / unit_cnt;
 80157ac:	fb13 f306 	smulbb	r3, r3, r6
                act_x = (unit_act_cnt * all_unit_w) / unit_cnt + i * style_bg->body.padding.inner + style_bg->body.padding.hor;
 80157b0:	440a      	add	r2, r1
                act_unit_w = (all_unit_w * get_button_width(map_p_tmp[i])) / unit_cnt;
 80157b2:	fb93 f3f4 	sdiv	r3, r3, r4
                act_x = (unit_act_cnt * all_unit_w) / unit_cnt + i * style_bg->body.padding.inner + style_bg->body.padding.hor;
 80157b6:	b292      	uxth	r2, r2
                act_unit_w --;                              /*-1 because e.g. width = 100 means 101 pixels (0..100)*/
 80157b8:	3b01      	subs	r3, #1
                act_x = (unit_act_cnt * all_unit_w) / unit_cnt + i * style_bg->body.padding.inner + style_bg->body.padding.hor;
 80157ba:	b211      	sxth	r1, r2
                act_unit_w --;                              /*-1 because e.g. width = 100 means 101 pixels (0..100)*/
 80157bc:	b29b      	uxth	r3, r3
                if(style_bg->body.padding.inner == 0 && act_x != style_bg->body.padding.hor) {
 80157be:	f1be 0f00 	cmp.w	lr, #0
 80157c2:	d0b9      	beq.n	8015738 <lv_btnm_set_map+0x1bc>
                    lv_area_set(&ext->button_areas[btn_i],  act_x, act_y,
 80157c4:	f8db e004 	ldr.w	lr, [fp, #4]
                                act_x + act_unit_w, act_y + btn_h);
 80157c8:	4413      	add	r3, r2
                    lv_area_set(&ext->button_areas[btn_i],  act_x, act_y,
 80157ca:	9a05      	ldr	r2, [sp, #20]
 80157cc:	b21b      	sxth	r3, r3
 80157ce:	9200      	str	r2, [sp, #0]
 80157d0:	eb0e 00c0 	add.w	r0, lr, r0, lsl #3
 80157d4:	9a03      	ldr	r2, [sp, #12]
 80157d6:	f7fd f93b 	bl	8012a50 <lv_area_set>
 80157da:	e7bd      	b.n	8015758 <lv_btnm_set_map+0x1dc>
 80157dc:	9b04      	ldr	r3, [sp, #16]
 80157de:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 80157e2:	441f      	add	r7, r3
 80157e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157e6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80157e8:	f8d3 8000 	ldr.w	r8, [r3]
 80157ec:	9b08      	ldr	r3, [sp, #32]
        if(strlen(map_p_tmp[btn_cnt]) == 0) break; /*Break on end of map*/
 80157ee:	f898 2000 	ldrb.w	r2, [r8]
 80157f2:	f9b3 b024 	ldrsh.w	fp, [r3, #36]	; 0x24
 80157f6:	b2bb      	uxth	r3, r7
 80157f8:	9304      	str	r3, [sp, #16]
 80157fa:	9b06      	ldr	r3, [sp, #24]
        act_y += btn_h + style_bg->body.padding.inner;
 80157fc:	445b      	add	r3, fp
 80157fe:	b21b      	sxth	r3, r3
 8015800:	9303      	str	r3, [sp, #12]
        if(strlen(map_p_tmp[btn_cnt]) == 0) break; /*Break on end of map*/
 8015802:	2a00      	cmp	r2, #0
 8015804:	f47f af65 	bne.w	80156d2 <lv_btnm_set_map+0x156>
    lv_obj_invalidate(btnm);
 8015808:	980b      	ldr	r0, [sp, #44]	; 0x2c
}
 801580a:	b011      	add	sp, #68	; 0x44
 801580c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_invalidate(btnm);
 8015810:	f7f4 ba66 	b.w	8009ce0 <lv_obj_invalidate>
}
 8015814:	b011      	add	sp, #68	; 0x44
 8015816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for(li = 0; strlen(map[li]) != 0; li++) {
 801581a:	2601      	movs	r6, #1
 801581c:	e718      	b.n	8015650 <lv_btnm_set_map+0xd4>
    uint16_t btn_cnt = 0;
 801581e:	4625      	mov	r5, r4
 8015820:	e6d1      	b.n	80155c6 <lv_btnm_set_map+0x4a>
 8015822:	bf00      	nop
 8015824:	080c7248 	.word	0x080c7248

08015828 <lv_btnm_create>:
{
 8015828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801582a:	460f      	mov	r7, r1
    lv_obj_t * new_btnm = lv_obj_create(par, copy);
 801582c:	f7f4 fce4 	bl	800a1f8 <lv_obj_create>
    lv_mem_assert(new_btnm);
 8015830:	2800      	cmp	r0, #0
 8015832:	d05f      	beq.n	80158f4 <lv_btnm_create+0xcc>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_btnm);
 8015834:	4e5a      	ldr	r6, [pc, #360]	; (80159a0 <lv_btnm_create+0x178>)
 8015836:	4604      	mov	r4, r0
 8015838:	6873      	ldr	r3, [r6, #4]
 801583a:	2b00      	cmp	r3, #0
 801583c:	f000 80a7 	beq.w	801598e <lv_btnm_create+0x166>
    lv_btnm_ext_t * ext = lv_obj_allocate_ext_attr(new_btnm, sizeof(lv_btnm_ext_t));
 8015840:	2128      	movs	r1, #40	; 0x28
 8015842:	4620      	mov	r0, r4
 8015844:	f7f6 f9d6 	bl	800bbf4 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 8015848:	4605      	mov	r5, r0
 801584a:	2800      	cmp	r0, #0
 801584c:	d053      	beq.n	80158f6 <lv_btnm_create+0xce>
    ext->toggle = 0;
 801584e:	f890 1026 	ldrb.w	r1, [r0, #38]	; 0x26
    ext->btn_cnt = 0;
 8015852:	2300      	movs	r3, #0
    ext->btn_id_pr = LV_BTNM_PR_NONE;
 8015854:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ext->styles_btn[LV_BTN_STATE_REL] = &lv_style_btn_rel;
 8015858:	f8df c164 	ldr.w	ip, [pc, #356]	; 80159c0 <lv_btnm_create+0x198>
    ext->toggle = 0;
 801585c:	f363 0100 	bfi	r1, r3, #0, #1
    ext->btn_cnt = 0;
 8015860:	8403      	strh	r3, [r0, #32]
    ext->button_areas = NULL;
 8015862:	6043      	str	r3, [r0, #4]
    ext->action = NULL;
 8015864:	6083      	str	r3, [r0, #8]
    ext->map_p = NULL;
 8015866:	6003      	str	r3, [r0, #0]
    ext->toggle = 0;
 8015868:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    ext->styles_btn[LV_BTN_STATE_PR] = &lv_style_btn_pr;
 801586c:	f8df e154 	ldr.w	lr, [pc, #340]	; 80159c4 <lv_btnm_create+0x19c>
    ext->styles_btn[LV_BTN_STATE_TGL_REL] = &lv_style_btn_tgl_rel;
 8015870:	484c      	ldr	r0, [pc, #304]	; (80159a4 <lv_btnm_create+0x17c>)
    ext->btn_id_pr = LV_BTNM_PR_NONE;
 8015872:	846a      	strh	r2, [r5, #34]	; 0x22
    ext->btn_id_tgl = LV_BTNM_PR_NONE;
 8015874:	84aa      	strh	r2, [r5, #36]	; 0x24
    ext->styles_btn[LV_BTN_STATE_TGL_PR] = &lv_style_btn_tgl_pr;
 8015876:	494c      	ldr	r1, [pc, #304]	; (80159a8 <lv_btnm_create+0x180>)
    ext->styles_btn[LV_BTN_STATE_INA] = &lv_style_btn_ina;
 8015878:	4a4c      	ldr	r2, [pc, #304]	; (80159ac <lv_btnm_create+0x184>)
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_func(new_btnm);
 801587a:	6833      	ldr	r3, [r6, #0]
    ext->styles_btn[LV_BTN_STATE_REL] = &lv_style_btn_rel;
 801587c:	f8c5 c00c 	str.w	ip, [r5, #12]
    ext->styles_btn[LV_BTN_STATE_PR] = &lv_style_btn_pr;
 8015880:	f8c5 e010 	str.w	lr, [r5, #16]
    ext->styles_btn[LV_BTN_STATE_TGL_REL] = &lv_style_btn_tgl_rel;
 8015884:	6168      	str	r0, [r5, #20]
    ext->styles_btn[LV_BTN_STATE_TGL_PR] = &lv_style_btn_tgl_pr;
 8015886:	61a9      	str	r1, [r5, #24]
    ext->styles_btn[LV_BTN_STATE_INA] = &lv_style_btn_ina;
 8015888:	61ea      	str	r2, [r5, #28]
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_func(new_btnm);
 801588a:	2b00      	cmp	r3, #0
 801588c:	f000 8083 	beq.w	8015996 <lv_btnm_create+0x16e>
    lv_obj_set_signal_func(new_btnm, lv_btnm_signal);
 8015890:	4947      	ldr	r1, [pc, #284]	; (80159b0 <lv_btnm_create+0x188>)
 8015892:	4620      	mov	r0, r4
 8015894:	f7f6 f9aa 	bl	800bbec <lv_obj_set_signal_func>
    lv_obj_set_design_func(new_btnm, lv_btnm_design);
 8015898:	4946      	ldr	r1, [pc, #280]	; (80159b4 <lv_btnm_create+0x18c>)
 801589a:	4620      	mov	r0, r4
 801589c:	f7f6 f9a8 	bl	800bbf0 <lv_obj_set_design_func>
    if(copy == NULL) {
 80158a0:	b357      	cbz	r7, 80158f8 <lv_btnm_create+0xd0>
        lv_btnm_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 80158a2:	4638      	mov	r0, r7
 80158a4:	f7f6 fb38 	bl	800bf18 <lv_obj_get_ext_attr>
 80158a8:	4602      	mov	r2, r0
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 80158aa:	4638      	mov	r0, r7
        memcpy(ext->styles_btn, copy_ext->styles_btn, sizeof(ext->styles_btn));
 80158ac:	4613      	mov	r3, r2
 80158ae:	f853 6f0c 	ldr.w	r6, [r3, #12]!
 80158b2:	f8d3 c004 	ldr.w	ip, [r3, #4]
 80158b6:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80158ba:	68df      	ldr	r7, [r3, #12]
 80158bc:	f8c5 c010 	str.w	ip, [r5, #16]
 80158c0:	f8c5 e014 	str.w	lr, [r5, #20]
 80158c4:	60ee      	str	r6, [r5, #12]
 80158c6:	61af      	str	r7, [r5, #24]
 80158c8:	691e      	ldr	r6, [r3, #16]
        ext->toggle = copy_ext->toggle;
 80158ca:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
        memcpy(ext->styles_btn, copy_ext->styles_btn, sizeof(ext->styles_btn));
 80158ce:	61ee      	str	r6, [r5, #28]
        ext->toggle = copy_ext->toggle;
 80158d0:	f892 6026 	ldrb.w	r6, [r2, #38]	; 0x26
        ext->action = copy_ext->action;
 80158d4:	6891      	ldr	r1, [r2, #8]
        ext->toggle = copy_ext->toggle;
 80158d6:	f366 0300 	bfi	r3, r6, #0, #1
        ext->action = copy_ext->action;
 80158da:	60a9      	str	r1, [r5, #8]
        ext->toggle = copy_ext->toggle;
 80158dc:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
        ext->btn_id_tgl = copy_ext->btn_id_tgl;
 80158e0:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 80158e2:	84ab      	strh	r3, [r5, #36]	; 0x24
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 80158e4:	f7f6 fb18 	bl	800bf18 <lv_obj_get_ext_attr>
        lv_btnm_set_map(new_btnm, lv_btnm_get_map(copy));
 80158e8:	6801      	ldr	r1, [r0, #0]
 80158ea:	4620      	mov	r0, r4
 80158ec:	f7ff fe46 	bl	801557c <lv_btnm_set_map>
}
 80158f0:	4620      	mov	r0, r4
 80158f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80158f4:	e7fe      	b.n	80158f4 <lv_btnm_create+0xcc>
 80158f6:	e7fe      	b.n	80158f6 <lv_btnm_create+0xce>
        lv_obj_set_size(new_btnm, LV_HOR_RES / 2, LV_VER_RES / 4);
 80158f8:	2244      	movs	r2, #68	; 0x44
 80158fa:	21f0      	movs	r1, #240	; 0xf0
 80158fc:	4620      	mov	r0, r4
 80158fe:	f7f5 f96d 	bl	800abdc <lv_obj_set_size>
        lv_btnm_set_map(new_btnm, lv_btnm_def_map);
 8015902:	492d      	ldr	r1, [pc, #180]	; (80159b8 <lv_btnm_create+0x190>)
 8015904:	4620      	mov	r0, r4
 8015906:	f7ff fe39 	bl	801557c <lv_btnm_set_map>
        lv_theme_t * th = lv_theme_get_current();
 801590a:	f008 f80d 	bl	801d928 <lv_theme_get_current>
        if(th) {
 801590e:	4605      	mov	r5, r0
 8015910:	b3b8      	cbz	r0, 8015982 <lv_btnm_create+0x15a>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BG, th->btnm.bg);
 8015912:	f8d0 60c0 	ldr.w	r6, [r0, #192]	; 0xc0
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8015916:	4620      	mov	r0, r4
 8015918:	f7f6 fafe 	bl	800bf18 <lv_obj_get_ext_attr>
            lv_obj_set_style(btnm, style);
 801591c:	4620      	mov	r0, r4
 801591e:	4631      	mov	r1, r6
 8015920:	f7f5 fc18 	bl	800b154 <lv_obj_set_style>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_REL, th->btnm.btn.rel);
 8015924:	f8d5 60c4 	ldr.w	r6, [r5, #196]	; 0xc4
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8015928:	4620      	mov	r0, r4
 801592a:	f7f6 faf5 	bl	800bf18 <lv_obj_get_ext_attr>
            ext->styles_btn[LV_BTN_STATE_REL] = style;
 801592e:	60c6      	str	r6, [r0, #12]
            lv_obj_invalidate(btnm);
 8015930:	4620      	mov	r0, r4
 8015932:	f7f4 f9d5 	bl	8009ce0 <lv_obj_invalidate>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_PR, th->btnm.btn.pr);
 8015936:	f8d5 60c8 	ldr.w	r6, [r5, #200]	; 0xc8
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801593a:	4620      	mov	r0, r4
 801593c:	f7f6 faec 	bl	800bf18 <lv_obj_get_ext_attr>
            ext->styles_btn[LV_BTN_STATE_PR] = style;
 8015940:	6106      	str	r6, [r0, #16]
            lv_obj_invalidate(btnm);
 8015942:	4620      	mov	r0, r4
 8015944:	f7f4 f9cc 	bl	8009ce0 <lv_obj_invalidate>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_TGL_REL, th->btnm.btn.tgl_rel);
 8015948:	f8d5 60cc 	ldr.w	r6, [r5, #204]	; 0xcc
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801594c:	4620      	mov	r0, r4
 801594e:	f7f6 fae3 	bl	800bf18 <lv_obj_get_ext_attr>
            ext->styles_btn[LV_BTN_STATE_TGL_REL] = style;
 8015952:	6146      	str	r6, [r0, #20]
            lv_obj_invalidate(btnm);
 8015954:	4620      	mov	r0, r4
 8015956:	f7f4 f9c3 	bl	8009ce0 <lv_obj_invalidate>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_TGL_PR, th->btnm.btn.tgl_pr);
 801595a:	f8d5 60d0 	ldr.w	r6, [r5, #208]	; 0xd0
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801595e:	4620      	mov	r0, r4
 8015960:	f7f6 fada 	bl	800bf18 <lv_obj_get_ext_attr>
            ext->styles_btn[LV_BTN_STATE_TGL_PR] = style;
 8015964:	6186      	str	r6, [r0, #24]
            lv_obj_invalidate(btnm);
 8015966:	4620      	mov	r0, r4
 8015968:	f7f4 f9ba 	bl	8009ce0 <lv_obj_invalidate>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_INA, th->btnm.btn.ina);
 801596c:	f8d5 50d4 	ldr.w	r5, [r5, #212]	; 0xd4
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8015970:	4620      	mov	r0, r4
 8015972:	f7f6 fad1 	bl	800bf18 <lv_obj_get_ext_attr>
            ext->styles_btn[LV_BTN_STATE_INA] = style;
 8015976:	61c5      	str	r5, [r0, #28]
            lv_obj_invalidate(btnm);
 8015978:	4620      	mov	r0, r4
 801597a:	f7f4 f9b1 	bl	8009ce0 <lv_obj_invalidate>
}
 801597e:	4620      	mov	r0, r4
 8015980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_obj_set_style(new_btnm, &lv_style_pretty);
 8015982:	4620      	mov	r0, r4
 8015984:	490d      	ldr	r1, [pc, #52]	; (80159bc <lv_btnm_create+0x194>)
 8015986:	f7f5 fbe5 	bl	800b154 <lv_obj_set_style>
}
 801598a:	4620      	mov	r0, r4
 801598c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_btnm);
 801598e:	f7f6 fabf 	bl	800bf10 <lv_obj_get_signal_func>
 8015992:	6070      	str	r0, [r6, #4]
 8015994:	e754      	b.n	8015840 <lv_btnm_create+0x18>
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_func(new_btnm);
 8015996:	4620      	mov	r0, r4
 8015998:	f7f6 fabc 	bl	800bf14 <lv_obj_get_design_func>
 801599c:	6030      	str	r0, [r6, #0]
 801599e:	e777      	b.n	8015890 <lv_btnm_create+0x68>
 80159a0:	20016610 	.word	0x20016610
 80159a4:	20019384 	.word	0x20019384
 80159a8:	20019414 	.word	0x20019414
 80159ac:	200192ac 	.word	0x200192ac
 80159b0:	080159c9 	.word	0x080159c9
 80159b4:	080152a9 	.word	0x080152a9
 80159b8:	200002fc 	.word	0x200002fc
 80159bc:	2001921c 	.word	0x2001921c
 80159c0:	2001918c 	.word	0x2001918c
 80159c4:	200191d4 	.word	0x200191d4

080159c8 <lv_btnm_signal>:
    res = ancestor_signal(btnm, sign, param);
 80159c8:	4bcc      	ldr	r3, [pc, #816]	; (8015cfc <lv_btnm_signal+0x334>)
{
 80159ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    res = ancestor_signal(btnm, sign, param);
 80159ce:	685b      	ldr	r3, [r3, #4]
{
 80159d0:	b089      	sub	sp, #36	; 0x24
 80159d2:	4606      	mov	r6, r0
 80159d4:	460d      	mov	r5, r1
 80159d6:	4617      	mov	r7, r2
    res = ancestor_signal(btnm, sign, param);
 80159d8:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 80159da:	2801      	cmp	r0, #1
    res = ancestor_signal(btnm, sign, param);
 80159dc:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
 80159de:	d003      	beq.n	80159e8 <lv_btnm_signal+0x20>
}
 80159e0:	4620      	mov	r0, r4
 80159e2:	b009      	add	sp, #36	; 0x24
 80159e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 80159e8:	4630      	mov	r0, r6
 80159ea:	f7f6 fa95 	bl	800bf18 <lv_obj_get_ext_attr>
 80159ee:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CLEANUP) {
 80159f0:	2d00      	cmp	r5, #0
 80159f2:	d04b      	beq.n	8015a8c <lv_btnm_signal+0xc4>
    } else if(sign == LV_SIGNAL_STYLE_CHG || sign == LV_SIGNAL_CORD_CHG) {
 80159f4:	1eab      	subs	r3, r5, #2
 80159f6:	2b01      	cmp	r3, #1
 80159f8:	f240 814c 	bls.w	8015c94 <lv_btnm_signal+0x2cc>
    } else if(sign == LV_SIGNAL_PRESSING) {
 80159fc:	2d09      	cmp	r5, #9
 80159fe:	f000 80a4 	beq.w	8015b4a <lv_btnm_signal+0x182>
    else if(sign == LV_SIGNAL_LONG_PRESS_REP) {
 8015a02:	2d0d      	cmp	r5, #13
 8015a04:	d046      	beq.n	8015a94 <lv_btnm_signal+0xcc>
    } else if(sign == LV_SIGNAL_RELEASED) {
 8015a06:	2d0b      	cmp	r5, #11
 8015a08:	d071      	beq.n	8015aee <lv_btnm_signal+0x126>
    } else if(sign == LV_SIGNAL_PRESS_LOST || sign == LV_SIGNAL_DEFOCUS) {
 8015a0a:	2d0a      	cmp	r5, #10
 8015a0c:	f000 8147 	beq.w	8015c9e <lv_btnm_signal+0x2d6>
 8015a10:	2d11      	cmp	r5, #17
 8015a12:	f000 8144 	beq.w	8015c9e <lv_btnm_signal+0x2d6>
    } else if(sign == LV_SIGNAL_FOCUS) {
 8015a16:	2d10      	cmp	r5, #16
 8015a18:	d026      	beq.n	8015a68 <lv_btnm_signal+0xa0>
    } else if(sign == LV_SIGNAL_CONTROLL) {
 8015a1a:	2d12      	cmp	r5, #18
 8015a1c:	f000 8147 	beq.w	8015cae <lv_btnm_signal+0x2e6>
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 8015a20:	2d14      	cmp	r5, #20
 8015a22:	f000 8189 	beq.w	8015d38 <lv_btnm_signal+0x370>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8015a26:	2d06      	cmp	r5, #6
 8015a28:	d1da      	bne.n	80159e0 <lv_btnm_signal+0x18>
            if(buf->type[i] == NULL) break;
 8015a2a:	683b      	ldr	r3, [r7, #0]
 8015a2c:	b1c3      	cbz	r3, 8015a60 <lv_btnm_signal+0x98>
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	f000 8340 	beq.w	80160b6 <lv_btnm_signal+0x6ee>
 8015a36:	68bb      	ldr	r3, [r7, #8]
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	f000 833a 	beq.w	80160b2 <lv_btnm_signal+0x6ea>
 8015a3e:	68fb      	ldr	r3, [r7, #12]
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	f000 8334 	beq.w	80160ae <lv_btnm_signal+0x6e6>
 8015a46:	693b      	ldr	r3, [r7, #16]
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	f000 832e 	beq.w	80160aa <lv_btnm_signal+0x6e2>
 8015a4e:	697b      	ldr	r3, [r7, #20]
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	f000 8332 	beq.w	80160ba <lv_btnm_signal+0x6f2>
 8015a56:	69bb      	ldr	r3, [r7, #24]
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	bf14      	ite	ne
 8015a5c:	2307      	movne	r3, #7
 8015a5e:	2306      	moveq	r3, #6
        buf->type[i] = "lv_btnm";
 8015a60:	4aa7      	ldr	r2, [pc, #668]	; (8015d00 <lv_btnm_signal+0x338>)
 8015a62:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 8015a66:	e7bb      	b.n	80159e0 <lv_btnm_signal+0x18>
        lv_indev_t * indev = lv_indev_get_act();
 8015a68:	f7f3 fb90 	bl	800918c <lv_indev_get_act>
 8015a6c:	4605      	mov	r5, r0
        lv_hal_indev_type_t indev_type = lv_indev_get_type(indev);
 8015a6e:	f7f3 fb93 	bl	8009198 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_POINTER) {
 8015a72:	2801      	cmp	r0, #1
 8015a74:	f000 8218 	beq.w	8015ea8 <lv_btnm_signal+0x4e0>
        } else  if(indev_type == LV_INDEV_TYPE_ENCODER) {
 8015a78:	2804      	cmp	r0, #4
 8015a7a:	f000 82d6 	beq.w	801602a <lv_btnm_signal+0x662>
            ext->btn_id_pr = 0;
 8015a7e:	2300      	movs	r3, #0
 8015a80:	f8a8 3022 	strh.w	r3, [r8, #34]	; 0x22
        lv_obj_invalidate(btnm);
 8015a84:	4630      	mov	r0, r6
 8015a86:	f7f4 f92b 	bl	8009ce0 <lv_obj_invalidate>
 8015a8a:	e7a9      	b.n	80159e0 <lv_btnm_signal+0x18>
        lv_mem_free(ext->button_areas);
 8015a8c:	6840      	ldr	r0, [r0, #4]
 8015a8e:	f7fd fbed 	bl	801326c <lv_mem_free>
 8015a92:	e7a5      	b.n	80159e0 <lv_btnm_signal+0x18>
        if(ext->action && ext->btn_id_pr != LV_BTNM_PR_NONE) {
 8015a94:	6883      	ldr	r3, [r0, #8]
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d0a2      	beq.n	80159e0 <lv_btnm_signal+0x18>
 8015a9a:	8c47      	ldrh	r7, [r0, #34]	; 0x22
 8015a9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015aa0:	429f      	cmp	r7, r3
 8015aa2:	d09d      	beq.n	80159e0 <lv_btnm_signal+0x18>
 * @param btn_id button id
 * @return text id in ext->map_p or LV_BTNM_PR_NONE if 'btn_id' was invalid
 */
static uint16_t get_button_text(lv_obj_t * btnm, uint16_t btn_id)
{
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8015aa4:	4630      	mov	r0, r6
 8015aa6:	f7f6 fa37 	bl	800bf18 <lv_obj_get_ext_attr>
    if(btn_id > ext->btn_cnt) return LV_BTNM_PR_NONE;
 8015aaa:	8c03      	ldrh	r3, [r0, #32]
 8015aac:	429f      	cmp	r7, r3
 8015aae:	9301      	str	r3, [sp, #4]
 8015ab0:	d896      	bhi.n	80159e0 <lv_btnm_signal+0x18>
    uint16_t txt_i = 0;
    uint16_t btn_i = 0;

    /* Search the text of ext->btn_pr the buttons text in the map
     * Skip "\n"-s*/
    while(btn_i != btn_id) {
 8015ab2:	2f00      	cmp	r7, #0
 8015ab4:	f000 82c6 	beq.w	8016044 <lv_btnm_signal+0x67c>
 8015ab8:	f04f 0b00 	mov.w	fp, #0
 8015abc:	f8d0 a000 	ldr.w	sl, [r0]
 8015ac0:	465d      	mov	r5, fp
 8015ac2:	e007      	b.n	8015ad4 <lv_btnm_signal+0x10c>
        btn_i ++;
        txt_i ++;
        if(strcmp(ext->map_p[txt_i], "\n") == 0) txt_i ++;
 8015ac4:	b2ad      	uxth	r5, r5
 8015ac6:	f10b 0b01 	add.w	fp, fp, #1
    while(btn_i != btn_id) {
 8015aca:	fa1f f38b 	uxth.w	r3, fp
 8015ace:	429f      	cmp	r7, r3
 8015ad0:	f000 8135 	beq.w	8015d3e <lv_btnm_signal+0x376>
        txt_i ++;
 8015ad4:	1c6b      	adds	r3, r5, #1
        if(strcmp(ext->map_p[txt_i], "\n") == 0) txt_i ++;
 8015ad6:	498b      	ldr	r1, [pc, #556]	; (8015d04 <lv_btnm_signal+0x33c>)
 8015ad8:	3502      	adds	r5, #2
        txt_i ++;
 8015ada:	fa1f f983 	uxth.w	r9, r3
        if(strcmp(ext->map_p[txt_i], "\n") == 0) txt_i ++;
 8015ade:	f85a 0029 	ldr.w	r0, [sl, r9, lsl #2]
 8015ae2:	f7ea fb91 	bl	8000208 <strcmp>
 8015ae6:	2800      	cmp	r0, #0
 8015ae8:	d0ec      	beq.n	8015ac4 <lv_btnm_signal+0xfc>
        txt_i ++;
 8015aea:	464d      	mov	r5, r9
 8015aec:	e7eb      	b.n	8015ac6 <lv_btnm_signal+0xfe>
        if(ext->btn_id_pr != LV_BTNM_PR_NONE) {
 8015aee:	8c47      	ldrh	r7, [r0, #34]	; 0x22
 8015af0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015af4:	429f      	cmp	r7, r3
 8015af6:	f43f af73 	beq.w	80159e0 <lv_btnm_signal+0x18>
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8015afa:	4630      	mov	r0, r6
 8015afc:	f7f6 fa0c 	bl	800bf18 <lv_obj_get_ext_attr>
    if(btn_id > ext->btn_cnt) return LV_BTNM_PR_NONE;
 8015b00:	8c03      	ldrh	r3, [r0, #32]
 8015b02:	429f      	cmp	r7, r3
 8015b04:	9301      	str	r3, [sp, #4]
 8015b06:	f63f af6b 	bhi.w	80159e0 <lv_btnm_signal+0x18>
    while(btn_i != btn_id) {
 8015b0a:	2f00      	cmp	r7, #0
 8015b0c:	f000 829c 	beq.w	8016048 <lv_btnm_signal+0x680>
 8015b10:	f04f 0900 	mov.w	r9, #0
 8015b14:	f8d0 a000 	ldr.w	sl, [r0]
 8015b18:	46cb      	mov	fp, r9
 8015b1a:	e008      	b.n	8015b2e <lv_btnm_signal+0x166>
        if(strcmp(ext->map_p[txt_i], "\n") == 0) txt_i ++;
 8015b1c:	fa1f fb83 	uxth.w	fp, r3
 8015b20:	f109 0901 	add.w	r9, r9, #1
    while(btn_i != btn_id) {
 8015b24:	fa1f f189 	uxth.w	r1, r9
 8015b28:	428f      	cmp	r7, r1
 8015b2a:	f000 812b 	beq.w	8015d84 <lv_btnm_signal+0x3bc>
        txt_i ++;
 8015b2e:	f10b 0501 	add.w	r5, fp, #1
        if(strcmp(ext->map_p[txt_i], "\n") == 0) txt_i ++;
 8015b32:	4974      	ldr	r1, [pc, #464]	; (8015d04 <lv_btnm_signal+0x33c>)
        txt_i ++;
 8015b34:	b2ad      	uxth	r5, r5
        if(strcmp(ext->map_p[txt_i], "\n") == 0) txt_i ++;
 8015b36:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 8015b3a:	f7ea fb65 	bl	8000208 <strcmp>
 8015b3e:	f10b 0302 	add.w	r3, fp, #2
 8015b42:	2800      	cmp	r0, #0
 8015b44:	d0ea      	beq.n	8015b1c <lv_btnm_signal+0x154>
        txt_i ++;
 8015b46:	46ab      	mov	fp, r5
 8015b48:	e7ea      	b.n	8015b20 <lv_btnm_signal+0x158>
        lv_indev_get_point(param, &p);
 8015b4a:	f10d 090c 	add.w	r9, sp, #12
 8015b4e:	4638      	mov	r0, r7
 8015b50:	4649      	mov	r1, r9
 8015b52:	f7f3 fb4b 	bl	80091ec <lv_indev_get_point>
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8015b56:	4630      	mov	r0, r6
 8015b58:	f7f6 f9de 	bl	800bf18 <lv_obj_get_ext_attr>
 8015b5c:	4683      	mov	fp, r0
    lv_obj_get_coords(btnm, &btnm_cords);
 8015b5e:	a904      	add	r1, sp, #16
 8015b60:	4630      	mov	r0, r6
 8015b62:	f7f6 f93d 	bl	800bde0 <lv_obj_get_coords>
    for(i = 0; i < ext->btn_cnt; i++) {
 8015b66:	f8bb 3020 	ldrh.w	r3, [fp, #32]
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	f000 80e1 	beq.w	8015d32 <lv_btnm_signal+0x36a>
 8015b70:	2500      	movs	r5, #0
 8015b72:	f10d 0a18 	add.w	sl, sp, #24
 8015b76:	e002      	b.n	8015b7e <lv_btnm_signal+0x1b6>
 8015b78:	b295      	uxth	r5, r2
 8015b7a:	429d      	cmp	r5, r3
 8015b7c:	d229      	bcs.n	8015bd2 <lv_btnm_signal+0x20a>
        lv_area_copy(&btn_area, &ext->button_areas[i]);
 8015b7e:	f8db 1004 	ldr.w	r1, [fp, #4]
    memcpy(dest, src, sizeof(lv_area_t));
 8015b82:	46d6      	mov	lr, sl
        btn_area.x1 += btnm_cords.x1;
 8015b84:	f8bd 2010 	ldrh.w	r2, [sp, #16]
        lv_area_copy(&btn_area, &ext->button_areas[i]);
 8015b88:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
        btn_area.y1 += btnm_cords.y1;
 8015b8c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8015b90:	6808      	ldr	r0, [r1, #0]
 8015b92:	6849      	ldr	r1, [r1, #4]
 8015b94:	e8ae 0003 	stmia.w	lr!, {r0, r1}
        btn_area.x2 += btnm_cords.x1;
 8015b98:	f8bd c01c 	ldrh.w	ip, [sp, #28]
        if(lv_area_is_point_on(&btn_area, p) != false) {
 8015b9c:	4649      	mov	r1, r9
        btn_area.x1 += btnm_cords.x1;
 8015b9e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
        btn_area.y1 += btnm_cords.y1;
 8015ba2:	f8bd e01a 	ldrh.w	lr, [sp, #26]
        btn_area.x1 += btnm_cords.x1;
 8015ba6:	4410      	add	r0, r2
        btn_area.x2 += btnm_cords.x1;
 8015ba8:	4462      	add	r2, ip
        btn_area.y2 += btnm_cords.y1;
 8015baa:	f8bd c01e 	ldrh.w	ip, [sp, #30]
        btn_area.y1 += btnm_cords.y1;
 8015bae:	449e      	add	lr, r3
        btn_area.x1 += btnm_cords.x1;
 8015bb0:	f8ad 0018 	strh.w	r0, [sp, #24]
        if(lv_area_is_point_on(&btn_area, p) != false) {
 8015bb4:	4650      	mov	r0, sl
        btn_area.y2 += btnm_cords.y1;
 8015bb6:	4463      	add	r3, ip
        btn_area.x2 += btnm_cords.x1;
 8015bb8:	f8ad 201c 	strh.w	r2, [sp, #28]
        btn_area.y1 += btnm_cords.y1;
 8015bbc:	f8ad e01a 	strh.w	lr, [sp, #26]
        btn_area.y2 += btnm_cords.y1;
 8015bc0:	f8ad 301e 	strh.w	r3, [sp, #30]
        if(lv_area_is_point_on(&btn_area, p) != false) {
 8015bc4:	f7fc ffd0 	bl	8012b68 <lv_area_is_point_on>
    for(i = 0; i < ext->btn_cnt; i++) {
 8015bc8:	1c6a      	adds	r2, r5, #1
 8015bca:	f8bb 3020 	ldrh.w	r3, [fp, #32]
        if(lv_area_is_point_on(&btn_area, p) != false) {
 8015bce:	2800      	cmp	r0, #0
 8015bd0:	d0d2      	beq.n	8015b78 <lv_btnm_signal+0x1b0>
    if(i == ext->btn_cnt) i = LV_BTNM_PR_NONE;
 8015bd2:	429d      	cmp	r5, r3
 8015bd4:	f000 80ad 	beq.w	8015d32 <lv_btnm_signal+0x36a>
        lv_obj_get_coords(btnm, &btnm_area);
 8015bd8:	a904      	add	r1, sp, #16
 8015bda:	4630      	mov	r0, r6
 8015bdc:	f7f6 f900 	bl	800bde0 <lv_obj_get_coords>
        if(btn_pr != ext->btn_id_pr) {
 8015be0:	f8b8 3022 	ldrh.w	r3, [r8, #34]	; 0x22
 8015be4:	42ab      	cmp	r3, r5
 8015be6:	d052      	beq.n	8015c8e <lv_btnm_signal+0x2c6>
            lv_indev_reset_lpr(param);
 8015be8:	4638      	mov	r0, r7
 8015bea:	f7f3 faef 	bl	80091cc <lv_indev_reset_lpr>
            if(ext->btn_id_pr != LV_BTNM_PR_NONE) {
 8015bee:	f8b8 3022 	ldrh.w	r3, [r8, #34]	; 0x22
 8015bf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015bf6:	4293      	cmp	r3, r2
 8015bf8:	d022      	beq.n	8015c40 <lv_btnm_signal+0x278>
                lv_area_copy(&btn_area, &ext->button_areas[ext->btn_id_pr]);
 8015bfa:	f8d8 1004 	ldr.w	r1, [r8, #4]
                btn_area.x1 += btnm_area.x1;
 8015bfe:	f8bd 2010 	ldrh.w	r2, [sp, #16]
                lv_area_copy(&btn_area, &ext->button_areas[ext->btn_id_pr]);
 8015c02:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015c06:	ab06      	add	r3, sp, #24
 8015c08:	6808      	ldr	r0, [r1, #0]
 8015c0a:	6849      	ldr	r1, [r1, #4]
 8015c0c:	c303      	stmia	r3!, {r0, r1}
                btn_area.x2 += btnm_area.x1;
 8015c0e:	f8bd 701c 	ldrh.w	r7, [sp, #28]
                lv_inv_area(&btn_area);
 8015c12:	a806      	add	r0, sp, #24
                btn_area.x1 += btnm_area.x1;
 8015c14:	f8bd 6018 	ldrh.w	r6, [sp, #24]
                btn_area.y1 += btnm_area.y1;
 8015c18:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8015c1c:	f8bd 101a 	ldrh.w	r1, [sp, #26]
                btn_area.x1 += btnm_area.x1;
 8015c20:	4416      	add	r6, r2
                btn_area.x2 += btnm_area.x1;
 8015c22:	443a      	add	r2, r7
                btn_area.y2 += btnm_area.y1;
 8015c24:	f8bd 701e 	ldrh.w	r7, [sp, #30]
                btn_area.y1 += btnm_area.y1;
 8015c28:	4419      	add	r1, r3
                btn_area.x1 += btnm_area.x1;
 8015c2a:	f8ad 6018 	strh.w	r6, [sp, #24]
                btn_area.y2 += btnm_area.y1;
 8015c2e:	443b      	add	r3, r7
                btn_area.x2 += btnm_area.x1;
 8015c30:	f8ad 201c 	strh.w	r2, [sp, #28]
                btn_area.y1 += btnm_area.y1;
 8015c34:	f8ad 101a 	strh.w	r1, [sp, #26]
                btn_area.y2 += btnm_area.y1;
 8015c38:	f8ad 301e 	strh.w	r3, [sp, #30]
                lv_inv_area(&btn_area);
 8015c3c:	f7f6 fbec 	bl	800c418 <lv_inv_area>
            if(btn_pr != LV_BTNM_PR_NONE) {
 8015c40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015c44:	429d      	cmp	r5, r3
 8015c46:	d022      	beq.n	8015c8e <lv_btnm_signal+0x2c6>
                lv_area_copy(&btn_area, &ext->button_areas[btn_pr]);
 8015c48:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015c4c:	ab06      	add	r3, sp, #24
                btn_area.x1 += btnm_area.x1;
 8015c4e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
                lv_area_copy(&btn_area, &ext->button_areas[btn_pr]);
 8015c52:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8015c56:	6808      	ldr	r0, [r1, #0]
 8015c58:	6849      	ldr	r1, [r1, #4]
 8015c5a:	c303      	stmia	r3!, {r0, r1}
                btn_area.x2 += btnm_area.x1;
 8015c5c:	f8bd 701c 	ldrh.w	r7, [sp, #28]
                lv_inv_area(&btn_area);
 8015c60:	a806      	add	r0, sp, #24
                btn_area.x1 += btnm_area.x1;
 8015c62:	f8bd 6018 	ldrh.w	r6, [sp, #24]
                btn_area.y1 += btnm_area.y1;
 8015c66:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8015c6a:	f8bd 101a 	ldrh.w	r1, [sp, #26]
                btn_area.x1 += btnm_area.x1;
 8015c6e:	4416      	add	r6, r2
                btn_area.x2 += btnm_area.x1;
 8015c70:	443a      	add	r2, r7
                btn_area.y2 += btnm_area.y1;
 8015c72:	f8bd 701e 	ldrh.w	r7, [sp, #30]
                btn_area.y1 += btnm_area.y1;
 8015c76:	4419      	add	r1, r3
                btn_area.x1 += btnm_area.x1;
 8015c78:	f8ad 6018 	strh.w	r6, [sp, #24]
                btn_area.y2 += btnm_area.y1;
 8015c7c:	443b      	add	r3, r7
                btn_area.x2 += btnm_area.x1;
 8015c7e:	f8ad 201c 	strh.w	r2, [sp, #28]
                btn_area.y1 += btnm_area.y1;
 8015c82:	f8ad 101a 	strh.w	r1, [sp, #26]
                btn_area.y2 += btnm_area.y1;
 8015c86:	f8ad 301e 	strh.w	r3, [sp, #30]
                lv_inv_area(&btn_area);
 8015c8a:	f7f6 fbc5 	bl	800c418 <lv_inv_area>
        ext->btn_id_pr = btn_pr;
 8015c8e:	f8a8 5022 	strh.w	r5, [r8, #34]	; 0x22
 8015c92:	e6a5      	b.n	80159e0 <lv_btnm_signal+0x18>
        lv_btnm_set_map(btnm, ext->map_p);
 8015c94:	6801      	ldr	r1, [r0, #0]
 8015c96:	4630      	mov	r0, r6
 8015c98:	f7ff fc70 	bl	801557c <lv_btnm_set_map>
 8015c9c:	e6a0      	b.n	80159e0 <lv_btnm_signal+0x18>
        ext->btn_id_pr = LV_BTNM_PR_NONE;
 8015c9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
        lv_obj_invalidate(btnm);
 8015ca2:	4630      	mov	r0, r6
        ext->btn_id_pr = LV_BTNM_PR_NONE;
 8015ca4:	f8a8 3022 	strh.w	r3, [r8, #34]	; 0x22
        lv_obj_invalidate(btnm);
 8015ca8:	f7f4 f81a 	bl	8009ce0 <lv_obj_invalidate>
 8015cac:	e698      	b.n	80159e0 <lv_btnm_signal+0x18>
        char c = *((char *)param);
 8015cae:	783b      	ldrb	r3, [r7, #0]
        if(c == LV_GROUP_KEY_RIGHT) {
 8015cb0:	2b13      	cmp	r3, #19
 8015cb2:	f000 80c1 	beq.w	8015e38 <lv_btnm_signal+0x470>
        } else if(c == LV_GROUP_KEY_LEFT) {
 8015cb6:	2b14      	cmp	r3, #20
 8015cb8:	f000 80e7 	beq.w	8015e8a <lv_btnm_signal+0x4c2>
        } else if(c == LV_GROUP_KEY_DOWN) {
 8015cbc:	2b12      	cmp	r3, #18
 8015cbe:	f000 8139 	beq.w	8015f34 <lv_btnm_signal+0x56c>
        } else if(c == LV_GROUP_KEY_UP) {
 8015cc2:	2b11      	cmp	r3, #17
 8015cc4:	f000 8176 	beq.w	8015fb4 <lv_btnm_signal+0x5ec>
        } else if(c == LV_GROUP_KEY_ENTER) {
 8015cc8:	2b0a      	cmp	r3, #10
 8015cca:	f47f ae89 	bne.w	80159e0 <lv_btnm_signal+0x18>
            if(ext->action != NULL) {
 8015cce:	6883      	ldr	r3, [r0, #8]
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	f43f ae85 	beq.w	80159e0 <lv_btnm_signal+0x18>
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8015cd6:	4630      	mov	r0, r6
                uint16_t txt_i = get_button_text(btnm, ext->btn_id_pr);
 8015cd8:	f8b8 7022 	ldrh.w	r7, [r8, #34]	; 0x22
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8015cdc:	f7f6 f91c 	bl	800bf18 <lv_obj_get_ext_attr>
    if(btn_id > ext->btn_cnt) return LV_BTNM_PR_NONE;
 8015ce0:	8c03      	ldrh	r3, [r0, #32]
 8015ce2:	429f      	cmp	r7, r3
 8015ce4:	9301      	str	r3, [sp, #4]
 8015ce6:	f63f ae7b 	bhi.w	80159e0 <lv_btnm_signal+0x18>
    while(btn_i != btn_id) {
 8015cea:	2f00      	cmp	r7, #0
 8015cec:	f000 80b5 	beq.w	8015e5a <lv_btnm_signal+0x492>
 8015cf0:	f04f 0b00 	mov.w	fp, #0
 8015cf4:	f8d0 a000 	ldr.w	sl, [r0]
 8015cf8:	465d      	mov	r5, fp
 8015cfa:	e00d      	b.n	8015d18 <lv_btnm_signal+0x350>
 8015cfc:	20016610 	.word	0x20016610
 8015d00:	080c724c 	.word	0x080c724c
 8015d04:	080c7248 	.word	0x080c7248
        if(strcmp(ext->map_p[txt_i], "\n") == 0) txt_i ++;
 8015d08:	b2ad      	uxth	r5, r5
 8015d0a:	f10b 0b01 	add.w	fp, fp, #1
    while(btn_i != btn_id) {
 8015d0e:	fa1f f38b 	uxth.w	r3, fp
 8015d12:	429f      	cmp	r7, r3
 8015d14:	f000 80a2 	beq.w	8015e5c <lv_btnm_signal+0x494>
        txt_i ++;
 8015d18:	1c6b      	adds	r3, r5, #1
        if(strcmp(ext->map_p[txt_i], "\n") == 0) txt_i ++;
 8015d1a:	49cc      	ldr	r1, [pc, #816]	; (801604c <lv_btnm_signal+0x684>)
 8015d1c:	3502      	adds	r5, #2
        txt_i ++;
 8015d1e:	fa1f f983 	uxth.w	r9, r3
        if(strcmp(ext->map_p[txt_i], "\n") == 0) txt_i ++;
 8015d22:	f85a 0029 	ldr.w	r0, [sl, r9, lsl #2]
 8015d26:	f7ea fa6f 	bl	8000208 <strcmp>
 8015d2a:	2800      	cmp	r0, #0
 8015d2c:	d0ec      	beq.n	8015d08 <lv_btnm_signal+0x340>
        txt_i ++;
 8015d2e:	464d      	mov	r5, r9
 8015d30:	e7eb      	b.n	8015d0a <lv_btnm_signal+0x342>
    if(i == ext->btn_cnt) i = LV_BTNM_PR_NONE;
 8015d32:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8015d36:	e74f      	b.n	8015bd8 <lv_btnm_signal+0x210>
        *editable = true;
 8015d38:	2301      	movs	r3, #1
 8015d3a:	703b      	strb	r3, [r7, #0]
 8015d3c:	e650      	b.n	80159e0 <lv_btnm_signal+0x18>
 8015d3e:	9b01      	ldr	r3, [sp, #4]
            if(txt_i != LV_BTNM_PR_NONE) {
 8015d40:	42bb      	cmp	r3, r7
 8015d42:	f43f ae4d 	beq.w	80159e0 <lv_btnm_signal+0x18>
 8015d46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015d4a:	429d      	cmp	r5, r3
 8015d4c:	f43f ae48 	beq.w	80159e0 <lv_btnm_signal+0x18>
                if(button_is_repeat_disabled(ext->map_p[txt_i]) == false &&
 8015d50:	f8d8 3000 	ldr.w	r3, [r8]
 8015d54:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 8015d58:	780b      	ldrb	r3, [r1, #0]
    if(((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) &&
 8015d5a:	f003 02d0 	and.w	r2, r3, #208	; 0xd0
 8015d5e:	2a90      	cmp	r2, #144	; 0x90
 8015d60:	f43f ae3e 	beq.w	80159e0 <lv_btnm_signal+0x18>
    if(((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) &&
 8015d64:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
 8015d68:	2aa0      	cmp	r2, #160	; 0xa0
 8015d6a:	f43f ae39 	beq.w	80159e0 <lv_btnm_signal+0x18>
    if((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) return &btn_str[1];
 8015d6e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
                    res = ext->action(btnm, cut_ctrl_byte(ext->map_p[txt_i]));
 8015d72:	f8d8 2008 	ldr.w	r2, [r8, #8]
    if((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) return &btn_str[1];
 8015d76:	2b80      	cmp	r3, #128	; 0x80
 8015d78:	f000 8085 	beq.w	8015e86 <lv_btnm_signal+0x4be>
                    res = ext->action(btnm, cut_ctrl_byte(ext->map_p[txt_i]));
 8015d7c:	4630      	mov	r0, r6
 8015d7e:	4790      	blx	r2
 8015d80:	4604      	mov	r4, r0
 8015d82:	e62d      	b.n	80159e0 <lv_btnm_signal+0x18>
 8015d84:	9b01      	ldr	r3, [sp, #4]
    }

    if(btn_i == ext->btn_cnt) return  LV_BTNM_PR_NONE;
 8015d86:	42bb      	cmp	r3, r7
 8015d88:	f43f ae2a 	beq.w	80159e0 <lv_btnm_signal+0x18>
            if(button_is_inactive(ext->map_p[txt_i]) == false && txt_i != LV_BTNM_PR_NONE) {        /*Ignore the inactive buttons anf click between the buttons*/
 8015d8c:	f8d8 2000 	ldr.w	r2, [r8]
 8015d90:	f852 102b 	ldr.w	r1, [r2, fp, lsl #2]
 8015d94:	780a      	ldrb	r2, [r1, #0]
    if(((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) &&
 8015d96:	f002 00e0 	and.w	r0, r2, #224	; 0xe0
            if(button_is_inactive(ext->map_p[txt_i]) == false && txt_i != LV_BTNM_PR_NONE) {        /*Ignore the inactive buttons anf click between the buttons*/
 8015d9a:	28a0      	cmp	r0, #160	; 0xa0
 8015d9c:	f43f ae20 	beq.w	80159e0 <lv_btnm_signal+0x18>
 8015da0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015da4:	4583      	cmp	fp, r0
 8015da6:	f43f ae1b 	beq.w	80159e0 <lv_btnm_signal+0x18>
                if(ext->action) res = ext->action(btnm, cut_ctrl_byte(ext->map_p[txt_i]));
 8015daa:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8015dae:	b145      	cbz	r5, 8015dc2 <lv_btnm_signal+0x3fa>
    if((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) return &btn_str[1];
 8015db0:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
                if(ext->action) res = ext->action(btnm, cut_ctrl_byte(ext->map_p[txt_i]));
 8015db4:	4630      	mov	r0, r6
    if((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) return &btn_str[1];
 8015db6:	2b80      	cmp	r3, #128	; 0x80
 8015db8:	bf08      	it	eq
 8015dba:	3101      	addeq	r1, #1
                if(ext->action) res = ext->action(btnm, cut_ctrl_byte(ext->map_p[txt_i]));
 8015dbc:	47a8      	blx	r5
                if(res == LV_RES_OK) {
 8015dbe:	2801      	cmp	r0, #1
 8015dc0:	d1de      	bne.n	8015d80 <lv_btnm_signal+0x3b8>
                    lv_obj_get_coords(btnm, &btnm_area);
 8015dc2:	a904      	add	r1, sp, #16
 8015dc4:	4630      	mov	r0, r6
 8015dc6:	f7f6 f80b 	bl	800bde0 <lv_obj_get_coords>
                    lv_area_copy(&btn_area, &ext->button_areas[ext->btn_id_pr]);
 8015dca:	f8b8 3022 	ldrh.w	r3, [r8, #34]	; 0x22
 8015dce:	f8d8 1004 	ldr.w	r1, [r8, #4]
                    btn_area.x1 += btnm_area.x1;
 8015dd2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
                    lv_area_copy(&btn_area, &ext->button_areas[ext->btn_id_pr]);
 8015dd6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015dda:	ab06      	add	r3, sp, #24
 8015ddc:	6808      	ldr	r0, [r1, #0]
 8015dde:	6849      	ldr	r1, [r1, #4]
 8015de0:	c303      	stmia	r3!, {r0, r1}
                    btn_area.x2 += btnm_area.x1;
 8015de2:	f8bd 701c 	ldrh.w	r7, [sp, #28]
                    lv_inv_area(&btn_area);
 8015de6:	a806      	add	r0, sp, #24
                    btn_area.x1 += btnm_area.x1;
 8015de8:	f8bd 5018 	ldrh.w	r5, [sp, #24]
                    btn_area.y1 += btnm_area.y1;
 8015dec:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8015df0:	f8bd 101a 	ldrh.w	r1, [sp, #26]
                    btn_area.x1 += btnm_area.x1;
 8015df4:	4415      	add	r5, r2
                    btn_area.x2 += btnm_area.x1;
 8015df6:	443a      	add	r2, r7
                    btn_area.y2 += btnm_area.y1;
 8015df8:	f8bd 701e 	ldrh.w	r7, [sp, #30]
                    btn_area.y1 += btnm_area.y1;
 8015dfc:	4419      	add	r1, r3
                    btn_area.x1 += btnm_area.x1;
 8015dfe:	f8ad 5018 	strh.w	r5, [sp, #24]
                    btn_area.y2 += btnm_area.y1;
 8015e02:	443b      	add	r3, r7
                    btn_area.x2 += btnm_area.x1;
 8015e04:	f8ad 201c 	strh.w	r2, [sp, #28]
                    btn_area.y1 += btnm_area.y1;
 8015e08:	f8ad 101a 	strh.w	r1, [sp, #26]
                    btn_area.y2 += btnm_area.y1;
 8015e0c:	f8ad 301e 	strh.w	r3, [sp, #30]
                    lv_inv_area(&btn_area);
 8015e10:	f7f6 fb02 	bl	800c418 <lv_inv_area>
                    if(ext->toggle != 0) {
 8015e14:	f898 3026 	ldrb.w	r3, [r8, #38]	; 0x26
 8015e18:	07d9      	lsls	r1, r3, #31
 8015e1a:	f100 8119 	bmi.w	8016050 <lv_btnm_signal+0x688>
                    lv_group_t * g = lv_obj_get_group(btnm);
 8015e1e:	4630      	mov	r0, r6
 8015e20:	f7f6 f87c 	bl	800bf1c <lv_obj_get_group>
                    if(lv_group_get_focused(g) != btnm) {
 8015e24:	f7f2 fb28 	bl	8008478 <lv_group_get_focused>
 8015e28:	4286      	cmp	r6, r0
 8015e2a:	f43f add9 	beq.w	80159e0 <lv_btnm_signal+0x18>
                        ext->btn_id_pr = LV_BTNM_PR_NONE;
 8015e2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015e32:	f8a8 3022 	strh.w	r3, [r8, #34]	; 0x22
 8015e36:	e5d3      	b.n	80159e0 <lv_btnm_signal+0x18>
            if(ext->btn_id_pr  == LV_BTNM_PR_NONE) ext->btn_id_pr = 0;
 8015e38:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8015e3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015e3e:	4293      	cmp	r3, r2
 8015e40:	d02f      	beq.n	8015ea2 <lv_btnm_signal+0x4da>
            else ext->btn_id_pr++;
 8015e42:	3301      	adds	r3, #1
 8015e44:	b29b      	uxth	r3, r3
 8015e46:	4619      	mov	r1, r3
            if(ext->btn_id_pr >= ext->btn_cnt - 1) ext->btn_id_pr = ext->btn_cnt - 1;
 8015e48:	f8b8 2020 	ldrh.w	r2, [r8, #32]
 8015e4c:	f8a8 3022 	strh.w	r3, [r8, #34]	; 0x22
 8015e50:	1e53      	subs	r3, r2, #1
 8015e52:	428b      	cmp	r3, r1
 8015e54:	f77f ae14 	ble.w	8015a80 <lv_btnm_signal+0xb8>
 8015e58:	e614      	b.n	8015a84 <lv_btnm_signal+0xbc>
    while(btn_i != btn_id) {
 8015e5a:	463d      	mov	r5, r7
                if(txt_i != LV_BTNM_PR_NONE) {
 8015e5c:	9b01      	ldr	r3, [sp, #4]
 8015e5e:	42bb      	cmp	r3, r7
 8015e60:	f43f adbe 	beq.w	80159e0 <lv_btnm_signal+0x18>
 8015e64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015e68:	429d      	cmp	r5, r3
 8015e6a:	f43f adb9 	beq.w	80159e0 <lv_btnm_signal+0x18>
                    res = ext->action(btnm, cut_ctrl_byte(ext->map_p[txt_i]));
 8015e6e:	f8d8 3000 	ldr.w	r3, [r8]
 8015e72:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8015e76:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
    if((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) return &btn_str[1];
 8015e7a:	780b      	ldrb	r3, [r1, #0]
 8015e7c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8015e80:	2b80      	cmp	r3, #128	; 0x80
 8015e82:	f47f af7b 	bne.w	8015d7c <lv_btnm_signal+0x3b4>
 8015e86:	3101      	adds	r1, #1
 8015e88:	e778      	b.n	8015d7c <lv_btnm_signal+0x3b4>
            if(ext->btn_id_pr  == LV_BTNM_PR_NONE) ext->btn_id_pr = 0;
 8015e8a:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8015e8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015e90:	4293      	cmp	r3, r2
 8015e92:	f43f adf4 	beq.w	8015a7e <lv_btnm_signal+0xb6>
            if(ext->btn_id_pr > 0) ext->btn_id_pr--;
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	f43f adf4 	beq.w	8015a84 <lv_btnm_signal+0xbc>
 8015e9c:	3b01      	subs	r3, #1
 8015e9e:	8443      	strh	r3, [r0, #34]	; 0x22
 8015ea0:	e5f0      	b.n	8015a84 <lv_btnm_signal+0xbc>
 8015ea2:	2100      	movs	r1, #0
            if(ext->btn_id_pr  == LV_BTNM_PR_NONE) ext->btn_id_pr = 0;
 8015ea4:	460b      	mov	r3, r1
 8015ea6:	e7cf      	b.n	8015e48 <lv_btnm_signal+0x480>
            lv_indev_get_point(indev, &p1);
 8015ea8:	f10d 090c 	add.w	r9, sp, #12
 8015eac:	4628      	mov	r0, r5
 8015eae:	4649      	mov	r1, r9
 8015eb0:	f7f3 f99c 	bl	80091ec <lv_indev_get_point>
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8015eb4:	4630      	mov	r0, r6
 8015eb6:	f7f6 f82f 	bl	800bf18 <lv_obj_get_ext_attr>
 8015eba:	4607      	mov	r7, r0
    lv_obj_get_coords(btnm, &btnm_cords);
 8015ebc:	a904      	add	r1, sp, #16
 8015ebe:	4630      	mov	r0, r6
 8015ec0:	f7f5 ff8e 	bl	800bde0 <lv_obj_get_coords>
    for(i = 0; i < ext->btn_cnt; i++) {
 8015ec4:	8c3b      	ldrh	r3, [r7, #32]
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	f000 80ec 	beq.w	80160a4 <lv_btnm_signal+0x6dc>
 8015ecc:	2500      	movs	r5, #0
 8015ece:	f10d 0a18 	add.w	sl, sp, #24
 8015ed2:	e002      	b.n	8015eda <lv_btnm_signal+0x512>
 8015ed4:	b295      	uxth	r5, r2
 8015ed6:	42ab      	cmp	r3, r5
 8015ed8:	d926      	bls.n	8015f28 <lv_btnm_signal+0x560>
        lv_area_copy(&btn_area, &ext->button_areas[i]);
 8015eda:	6879      	ldr	r1, [r7, #4]
 8015edc:	4652      	mov	r2, sl
        btn_area.x1 += btnm_cords.x1;
 8015ede:	f8bd e010 	ldrh.w	lr, [sp, #16]
        lv_area_copy(&btn_area, &ext->button_areas[i]);
 8015ee2:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
        btn_area.y1 += btnm_cords.y1;
 8015ee6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8015eea:	6808      	ldr	r0, [r1, #0]
 8015eec:	6849      	ldr	r1, [r1, #4]
 8015eee:	c203      	stmia	r2!, {r0, r1}
        btn_area.x1 += btnm_cords.x1;
 8015ef0:	f8bd c018 	ldrh.w	ip, [sp, #24]
        if(lv_area_is_point_on(&btn_area, p) != false) {
 8015ef4:	4649      	mov	r1, r9
        btn_area.x2 += btnm_cords.x1;
 8015ef6:	f8bd 001c 	ldrh.w	r0, [sp, #28]
        btn_area.x1 += btnm_cords.x1;
 8015efa:	44f4      	add	ip, lr
        btn_area.y1 += btnm_cords.y1;
 8015efc:	f8bd 201a 	ldrh.w	r2, [sp, #26]
        btn_area.x2 += btnm_cords.x1;
 8015f00:	4470      	add	r0, lr
        btn_area.y2 += btnm_cords.y1;
 8015f02:	f8bd e01e 	ldrh.w	lr, [sp, #30]
        btn_area.y1 += btnm_cords.y1;
 8015f06:	441a      	add	r2, r3
        btn_area.x1 += btnm_cords.x1;
 8015f08:	f8ad c018 	strh.w	ip, [sp, #24]
        btn_area.y2 += btnm_cords.y1;
 8015f0c:	4473      	add	r3, lr
        btn_area.x2 += btnm_cords.x1;
 8015f0e:	f8ad 001c 	strh.w	r0, [sp, #28]
        if(lv_area_is_point_on(&btn_area, p) != false) {
 8015f12:	4650      	mov	r0, sl
        btn_area.y1 += btnm_cords.y1;
 8015f14:	f8ad 201a 	strh.w	r2, [sp, #26]
        btn_area.y2 += btnm_cords.y1;
 8015f18:	f8ad 301e 	strh.w	r3, [sp, #30]
        if(lv_area_is_point_on(&btn_area, p) != false) {
 8015f1c:	f7fc fe24 	bl	8012b68 <lv_area_is_point_on>
    for(i = 0; i < ext->btn_cnt; i++) {
 8015f20:	1c6a      	adds	r2, r5, #1
 8015f22:	8c3b      	ldrh	r3, [r7, #32]
        if(lv_area_is_point_on(&btn_area, p) != false) {
 8015f24:	2800      	cmp	r0, #0
 8015f26:	d0d5      	beq.n	8015ed4 <lv_btnm_signal+0x50c>
    if(i == ext->btn_cnt) i = LV_BTNM_PR_NONE;
 8015f28:	42ab      	cmp	r3, r5
 8015f2a:	f000 80bb 	beq.w	80160a4 <lv_btnm_signal+0x6dc>
            ext->btn_id_pr = btn_i;
 8015f2e:	f8a8 5022 	strh.w	r5, [r8, #34]	; 0x22
 8015f32:	e5a7      	b.n	8015a84 <lv_btnm_signal+0xbc>
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8015f34:	4630      	mov	r0, r6
 8015f36:	f7f5 ffef 	bl	800bf18 <lv_obj_get_ext_attr>
            style = lv_obj_get_style(btnm);
 8015f3a:	4630      	mov	r0, r6
 8015f3c:	f7f5 ff6e 	bl	800be1c <lv_obj_get_style>
            if(ext->btn_id_pr  == LV_BTNM_PR_NONE) {
 8015f40:	f8b8 2022 	ldrh.w	r2, [r8, #34]	; 0x22
 8015f44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015f48:	429a      	cmp	r2, r3
 8015f4a:	f43f ad98 	beq.w	8015a7e <lv_btnm_signal+0xb6>
                lv_coord_t pr_center = ext->button_areas[ext->btn_id_pr].x1 + (lv_area_get_width(&ext->button_areas[ext->btn_id_pr]) >> 1);
 8015f4e:	f8d8 1004 	ldr.w	r1, [r8, #4]
                for(area_below = ext->btn_id_pr; area_below < ext->btn_cnt; area_below ++) {
 8015f52:	f8b8 7020 	ldrh.w	r7, [r8, #32]
                lv_coord_t pr_center = ext->button_areas[ext->btn_id_pr].x1 + (lv_area_get_width(&ext->button_areas[ext->btn_id_pr]) >> 1);
 8015f56:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 8015f5a:	f831 5032 	ldrh.w	r5, [r1, r2, lsl #3]
                for(area_below = ext->btn_id_pr; area_below < ext->btn_cnt; area_below ++) {
 8015f5e:	42ba      	cmp	r2, r7
    return area_p->x2 - area_p->x1 + 1;
 8015f60:	8899      	ldrh	r1, [r3, #4]
 8015f62:	f101 0101 	add.w	r1, r1, #1
 8015f66:	eba1 0105 	sub.w	r1, r1, r5
                lv_coord_t pr_center = ext->button_areas[ext->btn_id_pr].x1 + (lv_area_get_width(&ext->button_areas[ext->btn_id_pr]) >> 1);
 8015f6a:	f341 014e 	sbfx	r1, r1, #1, #15
 8015f6e:	4429      	add	r1, r5
 8015f70:	fa0f fe81 	sxth.w	lr, r1
                for(area_below = ext->btn_id_pr; area_below < ext->btn_cnt; area_below ++) {
 8015f74:	f4bf ad86 	bcs.w	8015a84 <lv_btnm_signal+0xbc>
 8015f78:	f9b3 c002 	ldrsh.w	ip, [r3, #2]
 8015f7c:	e004      	b.n	8015f88 <lv_btnm_signal+0x5c0>
 8015f7e:	b28a      	uxth	r2, r1
 8015f80:	3308      	adds	r3, #8
 8015f82:	42ba      	cmp	r2, r7
 8015f84:	f4bf ad7e 	bcs.w	8015a84 <lv_btnm_signal+0xbc>
                    if(ext->button_areas[area_below].y1 >  ext->button_areas[ext->btn_id_pr].y1 &&
 8015f88:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
                for(area_below = ext->btn_id_pr; area_below < ext->btn_cnt; area_below ++) {
 8015f8c:	1c51      	adds	r1, r2, #1
                    if(ext->button_areas[area_below].y1 >  ext->button_areas[ext->btn_id_pr].y1 &&
 8015f8e:	4565      	cmp	r5, ip
 8015f90:	ddf5      	ble.n	8015f7e <lv_btnm_signal+0x5b6>
 8015f92:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015f96:	4575      	cmp	r5, lr
 8015f98:	dcf1      	bgt.n	8015f7e <lv_btnm_signal+0x5b6>
                            pr_center <=  ext->button_areas[area_below].x2 + style->body.padding.hor) {
 8015f9a:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8015f9e:	f9b0 9022 	ldrsh.w	r9, [r0, #34]	; 0x22
 8015fa2:	444d      	add	r5, r9
                            pr_center >=  ext->button_areas[area_below].x1 &&
 8015fa4:	45ae      	cmp	lr, r5
 8015fa6:	dcea      	bgt.n	8015f7e <lv_btnm_signal+0x5b6>
                if(area_below < ext->btn_cnt) ext->btn_id_pr = area_below;
 8015fa8:	42ba      	cmp	r2, r7
 8015faa:	f4bf ad6b 	bcs.w	8015a84 <lv_btnm_signal+0xbc>
 8015fae:	f8a8 2022 	strh.w	r2, [r8, #34]	; 0x22
 8015fb2:	e567      	b.n	8015a84 <lv_btnm_signal+0xbc>
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8015fb4:	4630      	mov	r0, r6
 8015fb6:	f7f5 ffaf 	bl	800bf18 <lv_obj_get_ext_attr>
            style = lv_obj_get_style(btnm);
 8015fba:	4630      	mov	r0, r6
 8015fbc:	f7f5 ff2e 	bl	800be1c <lv_obj_get_style>
            if(ext->btn_id_pr  == LV_BTNM_PR_NONE) {
 8015fc0:	f8b8 2022 	ldrh.w	r2, [r8, #34]	; 0x22
 8015fc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015fc8:	429a      	cmp	r2, r3
 8015fca:	f43f ad58 	beq.w	8015a7e <lv_btnm_signal+0xb6>
                lv_coord_t pr_center = ext->button_areas[ext->btn_id_pr].x1 + (lv_area_get_width(&ext->button_areas[ext->btn_id_pr]) >> 1);
 8015fce:	f8d8 7004 	ldr.w	r7, [r8, #4]
                for(area_above = ext->btn_id_pr; area_above >= 0; area_above --) {
 8015fd2:	b213      	sxth	r3, r2
                lv_coord_t pr_center = ext->button_areas[ext->btn_id_pr].x1 + (lv_area_get_width(&ext->button_areas[ext->btn_id_pr]) >> 1);
 8015fd4:	eb07 05c2 	add.w	r5, r7, r2, lsl #3
 8015fd8:	f837 1032 	ldrh.w	r1, [r7, r2, lsl #3]
                for(area_above = ext->btn_id_pr; area_above >= 0; area_above --) {
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	88aa      	ldrh	r2, [r5, #4]
 8015fe0:	f102 0201 	add.w	r2, r2, #1
 8015fe4:	eba2 0201 	sub.w	r2, r2, r1
                lv_coord_t pr_center = ext->button_areas[ext->btn_id_pr].x1 + (lv_area_get_width(&ext->button_areas[ext->btn_id_pr]) >> 1);
 8015fe8:	f342 024e 	sbfx	r2, r2, #1, #15
 8015fec:	440a      	add	r2, r1
 8015fee:	fa0f fe82 	sxth.w	lr, r2
                for(area_above = ext->btn_id_pr; area_above >= 0; area_above --) {
 8015ff2:	f6ff ad47 	blt.w	8015a84 <lv_btnm_signal+0xbc>
 8015ff6:	f9b5 c002 	ldrsh.w	ip, [r5, #2]
                    if(ext->button_areas[area_above].y1 < ext->button_areas[ext->btn_id_pr].y1 &&
 8015ffa:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
 8015ffe:	1e59      	subs	r1, r3, #1
 8016000:	f9b2 5002 	ldrsh.w	r5, [r2, #2]
 8016004:	4565      	cmp	r5, ip
 8016006:	da0c      	bge.n	8016022 <lv_btnm_signal+0x65a>
                            pr_center >=  ext->button_areas[area_above].x1 - style->body.padding.hor &&
 8016008:	f937 5033 	ldrsh.w	r5, [r7, r3, lsl #3]
 801600c:	f9b0 9022 	ldrsh.w	r9, [r0, #34]	; 0x22
 8016010:	eba5 0509 	sub.w	r5, r5, r9
                    if(ext->button_areas[area_above].y1 < ext->button_areas[ext->btn_id_pr].y1 &&
 8016014:	45ae      	cmp	lr, r5
 8016016:	db04      	blt.n	8016022 <lv_btnm_signal+0x65a>
                            pr_center >=  ext->button_areas[area_above].x1 - style->body.padding.hor &&
 8016018:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 801601c:	4572      	cmp	r2, lr
 801601e:	f6bf ad2f 	bge.w	8015a80 <lv_btnm_signal+0xb8>
 8016022:	b20b      	sxth	r3, r1
                for(area_above = ext->btn_id_pr; area_above >= 0; area_above --) {
 8016024:	1c5a      	adds	r2, r3, #1
 8016026:	d1e8      	bne.n	8015ffa <lv_btnm_signal+0x632>
 8016028:	e52c      	b.n	8015a84 <lv_btnm_signal+0xbc>
            if(lv_group_get_editing(lv_obj_get_group(btnm))) ext->btn_id_pr = 0;
 801602a:	4630      	mov	r0, r6
 801602c:	f7f5 ff76 	bl	800bf1c <lv_obj_get_group>
 8016030:	f7f2 fa28 	bl	8008484 <lv_group_get_editing>
 8016034:	2800      	cmp	r0, #0
 8016036:	f47f ad22 	bne.w	8015a7e <lv_btnm_signal+0xb6>
            else ext->btn_id_pr = LV_BTNM_PR_NONE;
 801603a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801603e:	f8a8 3022 	strh.w	r3, [r8, #34]	; 0x22
 8016042:	e51f      	b.n	8015a84 <lv_btnm_signal+0xbc>
    while(btn_i != btn_id) {
 8016044:	463d      	mov	r5, r7
 8016046:	e67b      	b.n	8015d40 <lv_btnm_signal+0x378>
 8016048:	46bb      	mov	fp, r7
 801604a:	e69c      	b.n	8015d86 <lv_btnm_signal+0x3be>
 801604c:	080c7248 	.word	0x080c7248
                        lv_area_copy(&btn_area, &ext->button_areas[ext->btn_id_tgl]);
 8016050:	f8b8 3024 	ldrh.w	r3, [r8, #36]	; 0x24
    memcpy(dest, src, sizeof(lv_area_t));
 8016054:	ad06      	add	r5, sp, #24
 8016056:	f8d8 1004 	ldr.w	r1, [r8, #4]
                        btn_area.x1 += btnm_area.x1;
 801605a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
                        lv_area_copy(&btn_area, &ext->button_areas[ext->btn_id_tgl]);
 801605e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
                        btn_area.y1 += btnm_area.y1;
 8016062:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8016066:	6808      	ldr	r0, [r1, #0]
 8016068:	6849      	ldr	r1, [r1, #4]
 801606a:	c503      	stmia	r5!, {r0, r1}
                        btn_area.x2 += btnm_area.x1;
 801606c:	f8bd 701c 	ldrh.w	r7, [sp, #28]
                        lv_inv_area(&btn_area);
 8016070:	a806      	add	r0, sp, #24
                        btn_area.x1 += btnm_area.x1;
 8016072:	f8bd 5018 	ldrh.w	r5, [sp, #24]
                        btn_area.y1 += btnm_area.y1;
 8016076:	f8bd 101a 	ldrh.w	r1, [sp, #26]
                        btn_area.x1 += btnm_area.x1;
 801607a:	4415      	add	r5, r2
                        btn_area.x2 += btnm_area.x1;
 801607c:	443a      	add	r2, r7
                        btn_area.y2 += btnm_area.y1;
 801607e:	f8bd 701e 	ldrh.w	r7, [sp, #30]
                        btn_area.y1 += btnm_area.y1;
 8016082:	4419      	add	r1, r3
                        btn_area.x1 += btnm_area.x1;
 8016084:	f8ad 5018 	strh.w	r5, [sp, #24]
                        btn_area.y2 += btnm_area.y1;
 8016088:	443b      	add	r3, r7
                        btn_area.x2 += btnm_area.x1;
 801608a:	f8ad 201c 	strh.w	r2, [sp, #28]
                        btn_area.y1 += btnm_area.y1;
 801608e:	f8ad 101a 	strh.w	r1, [sp, #26]
                        btn_area.y2 += btnm_area.y1;
 8016092:	f8ad 301e 	strh.w	r3, [sp, #30]
                        lv_inv_area(&btn_area);
 8016096:	f7f6 f9bf 	bl	800c418 <lv_inv_area>
                        ext->btn_id_tgl = ext->btn_id_pr;
 801609a:	f8b8 3022 	ldrh.w	r3, [r8, #34]	; 0x22
 801609e:	f8a8 3024 	strh.w	r3, [r8, #36]	; 0x24
 80160a2:	e6bc      	b.n	8015e1e <lv_btnm_signal+0x456>
    if(i == ext->btn_cnt) i = LV_BTNM_PR_NONE;
 80160a4:	f64f 75ff 	movw	r5, #65535	; 0xffff
 80160a8:	e741      	b.n	8015f2e <lv_btnm_signal+0x566>
            if(buf->type[i] == NULL) break;
 80160aa:	2304      	movs	r3, #4
 80160ac:	e4d8      	b.n	8015a60 <lv_btnm_signal+0x98>
 80160ae:	2303      	movs	r3, #3
 80160b0:	e4d6      	b.n	8015a60 <lv_btnm_signal+0x98>
 80160b2:	2302      	movs	r3, #2
 80160b4:	e4d4      	b.n	8015a60 <lv_btnm_signal+0x98>
 80160b6:	2301      	movs	r3, #1
 80160b8:	e4d2      	b.n	8015a60 <lv_btnm_signal+0x98>
 80160ba:	2305      	movs	r3, #5
 80160bc:	e4d0      	b.n	8015a60 <lv_btnm_signal+0x98>
 80160be:	bf00      	nop

080160c0 <lv_btnm_set_action>:
{
 80160c0:	b510      	push	{r4, lr}
 80160c2:	460c      	mov	r4, r1
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 80160c4:	f7f5 ff28 	bl	800bf18 <lv_obj_get_ext_attr>
    ext->action = action;
 80160c8:	6084      	str	r4, [r0, #8]
 80160ca:	bd10      	pop	{r4, pc}

080160cc <lv_btnm_set_toggle>:
{
 80160cc:	b570      	push	{r4, r5, r6, lr}
 80160ce:	460e      	mov	r6, r1
 80160d0:	4614      	mov	r4, r2
 80160d2:	4605      	mov	r5, r0
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 80160d4:	f7f5 ff20 	bl	800bf18 <lv_obj_get_ext_attr>
    ext->toggle = en == false ? 0 : 1;
 80160d8:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 80160dc:	f366 0300 	bfi	r3, r6, #0, #1
 80160e0:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
    if(ext->toggle != 0) {
 80160e4:	07db      	lsls	r3, r3, #31
 80160e6:	d50a      	bpl.n	80160fe <lv_btnm_set_toggle+0x32>
        if(id >= ext->btn_cnt) id = ext->btn_cnt - 1;
 80160e8:	8c02      	ldrh	r2, [r0, #32]
 80160ea:	42a2      	cmp	r2, r4
 80160ec:	d801      	bhi.n	80160f2 <lv_btnm_set_toggle+0x26>
 80160ee:	3a01      	subs	r2, #1
 80160f0:	b294      	uxth	r4, r2
        ext->btn_id_tgl = id;
 80160f2:	8484      	strh	r4, [r0, #36]	; 0x24
    lv_obj_invalidate(btnm);
 80160f4:	4628      	mov	r0, r5
}
 80160f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_invalidate(btnm);
 80160fa:	f7f3 bdf1 	b.w	8009ce0 <lv_obj_invalidate>
        ext->btn_id_tgl = LV_BTNM_PR_NONE;
 80160fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016102:	8483      	strh	r3, [r0, #36]	; 0x24
    lv_obj_invalidate(btnm);
 8016104:	4628      	mov	r0, r5
}
 8016106:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_invalidate(btnm);
 801610a:	f7f3 bde9 	b.w	8009ce0 <lv_obj_invalidate>
 801610e:	bf00      	nop

08016110 <lv_btnm_set_style>:
{
 8016110:	b570      	push	{r4, r5, r6, lr}
 8016112:	460c      	mov	r4, r1
 8016114:	4616      	mov	r6, r2
 8016116:	4605      	mov	r5, r0
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8016118:	f7f5 fefe 	bl	800bf18 <lv_obj_get_ext_attr>
    switch(type) {
 801611c:	2c05      	cmp	r4, #5
 801611e:	d828      	bhi.n	8016172 <lv_btnm_set_style+0x62>
 8016120:	e8df f004 	tbb	[pc, r4]
 8016124:	1b150f09 	.word	0x1b150f09
 8016128:	0321      	.short	0x0321
            ext->styles_btn[LV_BTN_STATE_INA] = style;
 801612a:	61c6      	str	r6, [r0, #28]
            lv_obj_invalidate(btnm);
 801612c:	4628      	mov	r0, r5
}
 801612e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_obj_invalidate(btnm);
 8016132:	f7f3 bdd5 	b.w	8009ce0 <lv_obj_invalidate>
            lv_obj_set_style(btnm, style);
 8016136:	4631      	mov	r1, r6
 8016138:	4628      	mov	r0, r5
}
 801613a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_obj_set_style(btnm, style);
 801613e:	f7f5 b809 	b.w	800b154 <lv_obj_set_style>
            ext->styles_btn[LV_BTN_STATE_REL] = style;
 8016142:	60c6      	str	r6, [r0, #12]
            lv_obj_invalidate(btnm);
 8016144:	4628      	mov	r0, r5
}
 8016146:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_obj_invalidate(btnm);
 801614a:	f7f3 bdc9 	b.w	8009ce0 <lv_obj_invalidate>
            ext->styles_btn[LV_BTN_STATE_PR] = style;
 801614e:	6106      	str	r6, [r0, #16]
            lv_obj_invalidate(btnm);
 8016150:	4628      	mov	r0, r5
}
 8016152:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_obj_invalidate(btnm);
 8016156:	f7f3 bdc3 	b.w	8009ce0 <lv_obj_invalidate>
            ext->styles_btn[LV_BTN_STATE_TGL_REL] = style;
 801615a:	6146      	str	r6, [r0, #20]
            lv_obj_invalidate(btnm);
 801615c:	4628      	mov	r0, r5
}
 801615e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_obj_invalidate(btnm);
 8016162:	f7f3 bdbd 	b.w	8009ce0 <lv_obj_invalidate>
            ext->styles_btn[LV_BTN_STATE_TGL_PR] = style;
 8016166:	6186      	str	r6, [r0, #24]
            lv_obj_invalidate(btnm);
 8016168:	4628      	mov	r0, r5
}
 801616a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_obj_invalidate(btnm);
 801616e:	f7f3 bdb7 	b.w	8009ce0 <lv_obj_invalidate>
 8016172:	bd70      	pop	{r4, r5, r6, pc}

08016174 <lv_btnm_get_map>:
{
 8016174:	b508      	push	{r3, lr}
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8016176:	f7f5 fecf 	bl	800bf18 <lv_obj_get_ext_attr>
}
 801617a:	6800      	ldr	r0, [r0, #0]
 801617c:	bd08      	pop	{r3, pc}
 801617e:	bf00      	nop

08016180 <lv_btnm_get_style>:
{
 8016180:	b538      	push	{r3, r4, r5, lr}
 8016182:	460c      	mov	r4, r1
 8016184:	4605      	mov	r5, r0
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8016186:	f7f5 fec7 	bl	800bf18 <lv_obj_get_ext_attr>
    switch(type) {
 801618a:	2c05      	cmp	r4, #5
 801618c:	d813      	bhi.n	80161b6 <lv_btnm_get_style+0x36>
 801618e:	e8df f004 	tbb	[pc, r4]
 8016192:	0a05      	.short	0x0a05
 8016194:	03100e0c 	.word	0x03100e0c
            style = ext->styles_btn[LV_BTN_STATE_INA];
 8016198:	69c0      	ldr	r0, [r0, #28]
            break;
 801619a:	bd38      	pop	{r3, r4, r5, pc}
            style = lv_obj_get_style(btnm);
 801619c:	4628      	mov	r0, r5
}
 801619e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            style = lv_obj_get_style(btnm);
 80161a2:	f7f5 be3b 	b.w	800be1c <lv_obj_get_style>
            style = ext->styles_btn[LV_BTN_STATE_REL];
 80161a6:	68c0      	ldr	r0, [r0, #12]
            break;
 80161a8:	bd38      	pop	{r3, r4, r5, pc}
            style = ext->styles_btn[LV_BTN_STATE_PR];
 80161aa:	6900      	ldr	r0, [r0, #16]
            break;
 80161ac:	bd38      	pop	{r3, r4, r5, pc}
            style = ext->styles_btn[LV_BTN_STATE_TGL_REL];
 80161ae:	6940      	ldr	r0, [r0, #20]
            break;
 80161b0:	bd38      	pop	{r3, r4, r5, pc}
            style = ext->styles_btn[LV_BTN_STATE_TGL_PR];
 80161b2:	6980      	ldr	r0, [r0, #24]
            break;
 80161b4:	bd38      	pop	{r3, r4, r5, pc}
            style = NULL;
 80161b6:	2000      	movs	r0, #0
}
 80161b8:	bd38      	pop	{r3, r4, r5, pc}
 80161ba:	bf00      	nop

080161bc <lv_chart_draw_lines>:
/**
 * Draw the data lines as lines on a chart
 * @param obj pointer to chart object
 */
static void lv_chart_draw_lines(lv_obj_t * chart, const lv_area_t * mask)
{
 80161bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161c0:	4604      	mov	r4, r0
 80161c2:	b09f      	sub	sp, #124	; 0x7c
 80161c4:	9107      	str	r1, [sp, #28]
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 80161c6:	f7f5 fea7 	bl	800bf18 <lv_obj_get_ext_attr>
 80161ca:	4606      	mov	r6, r0

    uint16_t i;
    lv_point_t p1;
    lv_point_t p2;
    lv_coord_t w = lv_obj_get_width(chart);
 80161cc:	4620      	mov	r0, r4
 80161ce:	f7f5 fe19 	bl	800be04 <lv_obj_get_width>
 80161d2:	9005      	str	r0, [sp, #20]
    lv_coord_t h = lv_obj_get_height(chart);
 80161d4:	4620      	mov	r0, r4
 80161d6:	f7f5 fe1b 	bl	800be10 <lv_obj_get_height>
    lv_coord_t x_ofs = chart->coords.x1;
 80161da:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
    lv_coord_t h = lv_obj_get_height(chart);
 80161de:	4680      	mov	r8, r0
    lv_coord_t y_ofs = chart->coords.y1;
    int32_t y_tmp;
    lv_coord_t p_prev;
    lv_coord_t p_act;
    lv_chart_series_t * ser;
    lv_opa_t opa_scale = lv_obj_get_opa_scale(chart);
 80161e0:	4620      	mov	r0, r4
    lv_coord_t x_ofs = chart->coords.x1;
 80161e2:	461d      	mov	r5, r3
 80161e4:	9309      	str	r3, [sp, #36]	; 0x24
    lv_coord_t y_ofs = chart->coords.y1;
 80161e6:	f9b4 4012 	ldrsh.w	r4, [r4, #18]
    lv_opa_t opa_scale = lv_obj_get_opa_scale(chart);
 80161ea:	f7f5 fe75 	bl	800bed8 <lv_obj_get_opa_scale>
    lv_style_t style;
    lv_style_copy(&style, &lv_style_plain);
 80161ee:	494b      	ldr	r1, [pc, #300]	; (801631c <lv_chart_draw_lines+0x160>)
    lv_opa_t opa_scale = lv_obj_get_opa_scale(chart);
 80161f0:	9008      	str	r0, [sp, #32]
    lv_style_copy(&style, &lv_style_plain);
 80161f2:	a80c      	add	r0, sp, #48	; 0x30
 80161f4:	f7f6 fb8e 	bl	800c914 <lv_style_copy>
    style.line.opa = ext->series.opa;
 80161f8:	7e73      	ldrb	r3, [r6, #25]
    style.line.width = ext->series.width;

    /*Go through all data lines*/
    LL_READ_BACK(ext->series_ll, ser) {
 80161fa:	4630      	mov	r0, r6
    style.line.opa = ext->series.opa;
 80161fc:	f88d 3076 	strb.w	r3, [sp, #118]	; 0x76
    style.line.width = ext->series.width;
 8016200:	8af3      	ldrh	r3, [r6, #22]
 8016202:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    LL_READ_BACK(ext->series_ll, ser) {
 8016206:	f7fc ffc7 	bl	8013198 <lv_ll_get_tail>
 801620a:	2800      	cmp	r0, #0
 801620c:	f000 8082 	beq.w	8016314 <lv_chart_draw_lines+0x158>
 8016210:	b2ab      	uxth	r3, r5
 8016212:	4444      	add	r4, r8
 8016214:	4607      	mov	r7, r0
 8016216:	9306      	str	r3, [sp, #24]
 8016218:	b2a3      	uxth	r3, r4
 801621a:	9303      	str	r3, [sp, #12]
        style.line.color = ser->color;

        p1.x = 0 + x_ofs;
        p2.x = 0 + x_ofs;

        p_prev = ser->start_point;
 801621c:	8938      	ldrh	r0, [r7, #8]
        y_tmp = (int32_t)((int32_t) ser->points[p_prev] - ext->ymin) * h;
 801621e:	f8d7 c000 	ldr.w	ip, [r7]
        p_prev = ser->start_point;
 8016222:	b203      	sxth	r3, r0
        p1.x = 0 + x_ofs;
 8016224:	9a09      	ldr	r2, [sp, #36]	; 0x24
        y_tmp = (int32_t)((int32_t) ser->points[p_prev] - ext->ymin) * h;
 8016226:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
        p1.x = 0 + x_ofs;
 801622a:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
        y_tmp = (int32_t)((int32_t) ser->points[p_prev] - ext->ymin) * h;
 801622e:	ea4f 0b43 	mov.w	fp, r3, lsl #1
        p2.x = 0 + x_ofs;
 8016232:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
        y_tmp = (int32_t)((int32_t) ser->points[p_prev] - ext->ymin) * h;
 8016236:	f93c a013 	ldrsh.w	sl, [ip, r3, lsl #1]
        y_tmp = y_tmp / (ext->ymax - ext->ymin);
 801623a:	f9b6 300e 	ldrsh.w	r3, [r6, #14]
        y_tmp = (int32_t)((int32_t) ser->points[p_prev] - ext->ymin) * h;
 801623e:	ebaa 0a09 	sub.w	sl, sl, r9
        style.line.color = ser->color;
 8016242:	687a      	ldr	r2, [r7, #4]
        y_tmp = y_tmp / (ext->ymax - ext->ymin);
 8016244:	eba3 0309 	sub.w	r3, r3, r9
        p2.y = h - y_tmp + y_ofs;

        for(i = 1; i < ext->point_cnt; i ++) {
 8016248:	f8b6 e012 	ldrh.w	lr, [r6, #18]
        y_tmp = (int32_t)((int32_t) ser->points[p_prev] - ext->ymin) * h;
 801624c:	fb08 fa0a 	mul.w	sl, r8, sl
        style.line.color = ser->color;
 8016250:	921c      	str	r2, [sp, #112]	; 0x70
        for(i = 1; i < ext->point_cnt; i ++) {
 8016252:	f1be 0f01 	cmp.w	lr, #1
        p2.y = h - y_tmp + y_ofs;
 8016256:	9a03      	ldr	r2, [sp, #12]
        y_tmp = y_tmp / (ext->ymax - ext->ymin);
 8016258:	fb9a faf3 	sdiv	sl, sl, r3
        p2.y = h - y_tmp + y_ofs;
 801625c:	eba2 0a0a 	sub.w	sl, r2, sl
 8016260:	fa0f fa8a 	sxth.w	sl, sl
 8016264:	f8ad a02e 	strh.w	sl, [sp, #46]	; 0x2e
        for(i = 1; i < ext->point_cnt; i ++) {
 8016268:	d94d      	bls.n	8016306 <lv_chart_draw_lines+0x14a>
 801626a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801626c:	2501      	movs	r5, #1
            y_tmp = (int32_t)((int32_t) ser->points[p_act] - ext->ymin) * h;
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
            p2.y = h - y_tmp + y_ofs;

            if(ser->points[p_prev] != LV_CHART_POINT_DEF && ser->points[p_act] != LV_CHART_POINT_DEF)
                lv_draw_line(&p1, &p2, mask, &style, opa_scale);
 801626e:	9704      	str	r7, [sp, #16]
 8016270:	e00d      	b.n	801628e <lv_chart_draw_lines+0xd2>
 8016272:	9a04      	ldr	r2, [sp, #16]
 8016274:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8016278:	f9b6 300e 	ldrsh.w	r3, [r6, #14]
 801627c:	f9bd 402c 	ldrsh.w	r4, [sp, #44]	; 0x2c
 8016280:	eba3 0309 	sub.w	r3, r3, r9
 8016284:	f9bd a02e 	ldrsh.w	sl, [sp, #46]	; 0x2e
 8016288:	8910      	ldrh	r0, [r2, #8]
 801628a:	f8d2 c000 	ldr.w	ip, [r2]
            p_act = (ser->start_point + i) % ext->point_cnt;
 801628e:	4428      	add	r0, r5
            p2.x = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 8016290:	9a05      	ldr	r2, [sp, #20]
            p1.x = p2.x;
 8016292:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
            p2.x = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 8016296:	fb02 f105 	mul.w	r1, r2, r5
 801629a:	f10e 32ff 	add.w	r2, lr, #4294967295
            p1.y = p2.y;
 801629e:	f8ad a02a 	strh.w	sl, [sp, #42]	; 0x2a
            p_act = (ser->start_point + i) % ext->point_cnt;
 80162a2:	fb90 f4fe 	sdiv	r4, r0, lr
            p2.x = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 80162a6:	fb91 f1f2 	sdiv	r1, r1, r2
            p_act = (ser->start_point + i) % ext->point_cnt;
 80162aa:	fb0e 0414 	mls	r4, lr, r4, r0
            p2.x = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 80162ae:	9a06      	ldr	r2, [sp, #24]
            p_act = (ser->start_point + i) % ext->point_cnt;
 80162b0:	b224      	sxth	r4, r4
            p2.x = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 80162b2:	4411      	add	r1, r2
 80162b4:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
            y_tmp = (int32_t)((int32_t) ser->points[p_act] - ext->ymin) * h;
 80162b8:	f93c 2014 	ldrsh.w	r2, [ip, r4, lsl #1]
 80162bc:	eba2 0909 	sub.w	r9, r2, r9
            p2.y = h - y_tmp + y_ofs;
 80162c0:	9a03      	ldr	r2, [sp, #12]
            y_tmp = (int32_t)((int32_t) ser->points[p_act] - ext->ymin) * h;
 80162c2:	fb08 f909 	mul.w	r9, r8, r9
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
 80162c6:	fb99 f3f3 	sdiv	r3, r9, r3
            p2.y = h - y_tmp + y_ofs;
 80162ca:	1ad3      	subs	r3, r2, r3
 80162cc:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            if(ser->points[p_prev] != LV_CHART_POINT_DEF && ser->points[p_act] != LV_CHART_POINT_DEF)
 80162d0:	f93c 300b 	ldrsh.w	r3, [ip, fp]
 80162d4:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 80162d8:	d00e      	beq.n	80162f8 <lv_chart_draw_lines+0x13c>
 80162da:	f93c c014 	ldrsh.w	ip, [ip, r4, lsl #1]
                lv_draw_line(&p1, &p2, mask, &style, opa_scale);
 80162de:	ab0c      	add	r3, sp, #48	; 0x30
 80162e0:	9a07      	ldr	r2, [sp, #28]
 80162e2:	a90b      	add	r1, sp, #44	; 0x2c
            if(ser->points[p_prev] != LV_CHART_POINT_DEF && ser->points[p_act] != LV_CHART_POINT_DEF)
 80162e4:	f51c 4f80 	cmn.w	ip, #16384	; 0x4000
                lv_draw_line(&p1, &p2, mask, &style, opa_scale);
 80162e8:	a80a      	add	r0, sp, #40	; 0x28
            if(ser->points[p_prev] != LV_CHART_POINT_DEF && ser->points[p_act] != LV_CHART_POINT_DEF)
 80162ea:	d005      	beq.n	80162f8 <lv_chart_draw_lines+0x13c>
                lv_draw_line(&p1, &p2, mask, &style, opa_scale);
 80162ec:	9f08      	ldr	r7, [sp, #32]
 80162ee:	9700      	str	r7, [sp, #0]
 80162f0:	f7f7 fdb0 	bl	800de54 <lv_draw_line>
 80162f4:	f8b6 e012 	ldrh.w	lr, [r6, #18]
        for(i = 1; i < ext->point_cnt; i ++) {
 80162f8:	3501      	adds	r5, #1
 80162fa:	ea4f 0b44 	mov.w	fp, r4, lsl #1
 80162fe:	b2ad      	uxth	r5, r5
 8016300:	4575      	cmp	r5, lr
 8016302:	d3b6      	bcc.n	8016272 <lv_chart_draw_lines+0xb6>
 8016304:	9f04      	ldr	r7, [sp, #16]
    LL_READ_BACK(ext->series_ll, ser) {
 8016306:	4639      	mov	r1, r7
 8016308:	4630      	mov	r0, r6
 801630a:	f7fc ff4f 	bl	80131ac <lv_ll_get_prev>
 801630e:	4607      	mov	r7, r0
 8016310:	2800      	cmp	r0, #0
 8016312:	d183      	bne.n	801621c <lv_chart_draw_lines+0x60>

            p_prev = p_act;
        }
    }
}
 8016314:	b01f      	add	sp, #124	; 0x7c
 8016316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801631a:	bf00      	nop
 801631c:	2001933c 	.word	0x2001933c

08016320 <lv_chart_design>:
{
 8016320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
 8016324:	2a02      	cmp	r2, #2
{
 8016326:	b0a3      	sub	sp, #140	; 0x8c
 8016328:	9102      	str	r1, [sp, #8]
    if(mode == LV_DESIGN_COVER_CHK) {
 801632a:	f000 826a 	beq.w	8016802 <lv_chart_design+0x4e2>
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 801632e:	b11a      	cbz	r2, 8016338 <lv_chart_design+0x18>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
    lv_coord_t w = lv_obj_get_width(chart);
    /*Vertical lines works only if the width == point count. Else use the normal line type*/
    if(ext->point_cnt != w) {
        lv_chart_draw_lines(chart, mask);
        return;
 8016330:	2001      	movs	r0, #1
}
 8016332:	b023      	add	sp, #140	; 0x8c
 8016334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016338:	4681      	mov	r9, r0
        lv_draw_rect(&chart->coords, mask, lv_obj_get_style(chart), lv_obj_get_opa_scale(chart));
 801633a:	f7f5 fd6f 	bl	800be1c <lv_obj_get_style>
 801633e:	4604      	mov	r4, r0
 8016340:	f109 0310 	add.w	r3, r9, #16
 8016344:	4648      	mov	r0, r9
 8016346:	461d      	mov	r5, r3
 8016348:	9307      	str	r3, [sp, #28]
 801634a:	f7f5 fdc5 	bl	800bed8 <lv_obj_get_opa_scale>
 801634e:	4622      	mov	r2, r4
 8016350:	4603      	mov	r3, r0
 8016352:	9902      	ldr	r1, [sp, #8]
 8016354:	4628      	mov	r0, r5
 8016356:	f7f9 fc9d 	bl	800fc94 <lv_draw_rect>
        lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 801635a:	4648      	mov	r0, r9
 801635c:	f7f5 fddc 	bl	800bf18 <lv_obj_get_ext_attr>
 8016360:	900a      	str	r0, [sp, #40]	; 0x28
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 8016362:	4648      	mov	r0, r9
 8016364:	f7f5 fdd8 	bl	800bf18 <lv_obj_get_ext_attr>
 8016368:	4683      	mov	fp, r0
    lv_style_t * style = lv_obj_get_style(chart);
 801636a:	4648      	mov	r0, r9
 801636c:	f7f5 fd56 	bl	800be1c <lv_obj_get_style>
 8016370:	4605      	mov	r5, r0
    lv_opa_t opa_scale = lv_obj_get_opa_scale(chart);
 8016372:	4648      	mov	r0, r9
 8016374:	f7f5 fdb0 	bl	800bed8 <lv_obj_get_opa_scale>
 8016378:	9003      	str	r0, [sp, #12]
    lv_coord_t w = lv_obj_get_width(chart);
 801637a:	4648      	mov	r0, r9
 801637c:	f7f5 fd42 	bl	800be04 <lv_obj_get_width>
 8016380:	9004      	str	r0, [sp, #16]
    lv_coord_t h = lv_obj_get_height(chart);
 8016382:	4648      	mov	r0, r9
 8016384:	f7f5 fd44 	bl	800be10 <lv_obj_get_height>
    lv_coord_t x_ofs = chart->coords.x1;
 8016388:	f9b9 3010 	ldrsh.w	r3, [r9, #16]
    if(ext->hdiv_cnt != 0) {
 801638c:	f89b 6010 	ldrb.w	r6, [fp, #16]
    lv_coord_t h = lv_obj_get_height(chart);
 8016390:	4607      	mov	r7, r0
    lv_coord_t x_ofs = chart->coords.x1;
 8016392:	9308      	str	r3, [sp, #32]
    lv_coord_t y_ofs = chart->coords.y1;
 8016394:	f9b9 3012 	ldrsh.w	r3, [r9, #18]
 8016398:	9309      	str	r3, [sp, #36]	; 0x24
    if(ext->hdiv_cnt != 0) {
 801639a:	2e00      	cmp	r6, #0
 801639c:	d047      	beq.n	801642e <lv_chart_design+0x10e>
        if(style->body.border.width != 0) {
 801639e:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	f040 8231 	bne.w	801680a <lv_chart_design+0x4ea>
        p2.x = w + x_ofs;
 80163a8:	9908      	ldr	r1, [sp, #32]
            div_i_end = ext->hdiv_cnt + 1;
 80163aa:	f106 0e01 	add.w	lr, r6, #1
        p2.x = w + x_ofs;
 80163ae:	9804      	ldr	r0, [sp, #16]
            div_i_start = 0;
 80163b0:	4698      	mov	r8, r3
        p2.x = w + x_ofs;
 80163b2:	460a      	mov	r2, r1
            div_i_end = ext->hdiv_cnt + 1;
 80163b4:	fa5f f68e 	uxtb.w	r6, lr
        p1.x = 0 + x_ofs;
 80163b8:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
        p2.x = w + x_ofs;
 80163bc:	4402      	add	r2, r0
 80163be:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80163c2:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            div_i_start = 0;
 80163c6:	4644      	mov	r4, r8
 80163c8:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 80163cc:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 80163d0:	9306      	str	r3, [sp, #24]
 80163d2:	ab10      	add	r3, sp, #64	; 0x40
 80163d4:	9705      	str	r7, [sp, #20]
 80163d6:	46f4      	mov	ip, lr
 80163d8:	4699      	mov	r9, r3
 80163da:	463b      	mov	r3, r7
 80163dc:	e004      	b.n	80163e8 <lv_chart_design+0xc8>
 80163de:	f89b e010 	ldrb.w	lr, [fp, #16]
 80163e2:	9b05      	ldr	r3, [sp, #20]
 80163e4:	f10e 0c01 	add.w	ip, lr, #1
            p1.y = (int32_t)((int32_t)h * div_i) / (ext->hdiv_cnt + 1);
 80163e8:	fb03 fe04 	mul.w	lr, r3, r4
            p1.y +=  y_ofs;
 80163ec:	9f06      	ldr	r7, [sp, #24]
            if(div_i == div_i_start) p1.y += (style->line.width >> 1) + 1;  /*The first line might not be visible*/
 80163ee:	4544      	cmp	r4, r8
            lv_draw_line(&p1, &p2, mask, style, opa_scale);
 80163f0:	462b      	mov	r3, r5
 80163f2:	9a02      	ldr	r2, [sp, #8]
 80163f4:	4649      	mov	r1, r9
 80163f6:	4650      	mov	r0, sl
            p1.y = (int32_t)((int32_t)h * div_i) / (ext->hdiv_cnt + 1);
 80163f8:	fb9e fefc 	sdiv	lr, lr, ip
            p1.y +=  y_ofs;
 80163fc:	44be      	add	lr, r7
 80163fe:	fa1f fe8e 	uxth.w	lr, lr
 8016402:	fa0f fc8e 	sxth.w	ip, lr
 8016406:	f8ad c03a 	strh.w	ip, [sp, #58]	; 0x3a
            if(div_i == div_i_start) p1.y += (style->line.width >> 1) + 1;  /*The first line might not be visible*/
 801640a:	f000 82cc 	beq.w	80169a6 <lv_chart_design+0x686>
            if(div_i == div_i_end) p1.y -= (style->line.width >> 1) + 1;  /*The last line might not be visible*/
 801640e:	42b4      	cmp	r4, r6
 8016410:	f000 82bf 	beq.w	8016992 <lv_chart_design+0x672>
        for(div_i = div_i_start; div_i <= div_i_end; div_i++) {
 8016414:	3401      	adds	r4, #1
            lv_draw_line(&p1, &p2, mask, style, opa_scale);
 8016416:	9f03      	ldr	r7, [sp, #12]
            p2.y = p1.y;
 8016418:	f8ad c042 	strh.w	ip, [sp, #66]	; 0x42
        for(div_i = div_i_start; div_i <= div_i_end; div_i++) {
 801641c:	b2e4      	uxtb	r4, r4
            lv_draw_line(&p1, &p2, mask, style, opa_scale);
 801641e:	9700      	str	r7, [sp, #0]
 8016420:	f7f7 fd18 	bl	800de54 <lv_draw_line>
        for(div_i = div_i_start; div_i <= div_i_end; div_i++) {
 8016424:	42b4      	cmp	r4, r6
 8016426:	d9da      	bls.n	80163de <lv_chart_design+0xbe>
 8016428:	9f05      	ldr	r7, [sp, #20]
 801642a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    if(ext->vdiv_cnt != 0) {
 801642e:	f89b 6011 	ldrb.w	r6, [fp, #17]
 8016432:	2e00      	cmp	r6, #0
 8016434:	d041      	beq.n	80164ba <lv_chart_design+0x19a>
        if(style->body.border.width != 0) {
 8016436:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 801643a:	2b00      	cmp	r3, #0
 801643c:	d15e      	bne.n	80164fc <lv_chart_design+0x1dc>
        p2.y = h + y_ofs;
 801643e:	9909      	ldr	r1, [sp, #36]	; 0x24
            div_i_end = ext->vdiv_cnt + 1;
 8016440:	f106 0e01 	add.w	lr, r6, #1
            div_i_start = 0;
 8016444:	4698      	mov	r8, r3
        p2.y = h + y_ofs;
 8016446:	440f      	add	r7, r1
            div_i_end = ext->vdiv_cnt + 1;
 8016448:	fa5f f68e 	uxtb.w	r6, lr
        p1.y = 0 + y_ofs;
 801644c:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
        p2.y = h + y_ofs;
 8016450:	f8ad 7042 	strh.w	r7, [sp, #66]	; 0x42
 8016454:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 8016458:	ab10      	add	r3, sp, #64	; 0x40
 801645a:	f8cd 9018 	str.w	r9, [sp, #24]
            div_i_start = 0;
 801645e:	4644      	mov	r4, r8
 8016460:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8016464:	9705      	str	r7, [sp, #20]
 8016466:	46f4      	mov	ip, lr
 8016468:	4699      	mov	r9, r3
 801646a:	e004      	b.n	8016476 <lv_chart_design+0x156>
 801646c:	f89b e011 	ldrb.w	lr, [fp, #17]
 8016470:	9f05      	ldr	r7, [sp, #20]
 8016472:	f10e 0c01 	add.w	ip, lr, #1
            p1.x = (int32_t)((int32_t)w * div_i) / (ext->vdiv_cnt + 1);
 8016476:	9b04      	ldr	r3, [sp, #16]
            if(div_i == div_i_start) p1.x += (style->line.width >> 1) + 1;  /*The first line might not be visible*/
 8016478:	4544      	cmp	r4, r8
            lv_draw_line(&p1, &p2, mask, style, opa_scale);
 801647a:	9a02      	ldr	r2, [sp, #8]
 801647c:	4649      	mov	r1, r9
            p1.x = (int32_t)((int32_t)w * div_i) / (ext->vdiv_cnt + 1);
 801647e:	fb03 fe04 	mul.w	lr, r3, r4
            lv_draw_line(&p1, &p2, mask, style, opa_scale);
 8016482:	4650      	mov	r0, sl
 8016484:	462b      	mov	r3, r5
            p1.x = (int32_t)((int32_t)w * div_i) / (ext->vdiv_cnt + 1);
 8016486:	fb9e fefc 	sdiv	lr, lr, ip
            p1.x +=  x_ofs;
 801648a:	44be      	add	lr, r7
 801648c:	fa1f fe8e 	uxth.w	lr, lr
 8016490:	fa0f fc8e 	sxth.w	ip, lr
 8016494:	f8ad c038 	strh.w	ip, [sp, #56]	; 0x38
            if(div_i == div_i_start) p1.x += (style->line.width >> 1) + 1;  /*The first line might not be visible*/
 8016498:	f000 8270 	beq.w	801697c <lv_chart_design+0x65c>
            if(div_i == div_i_end) p1.x -= (style->line.width >> 1) + 1;  /*The last line might not be visible*/
 801649c:	42b4      	cmp	r4, r6
 801649e:	f000 8263 	beq.w	8016968 <lv_chart_design+0x648>
        for(div_i = div_i_start; div_i <= div_i_end; div_i ++) {
 80164a2:	3401      	adds	r4, #1
            lv_draw_line(&p1, &p2, mask, style, opa_scale);
 80164a4:	9f03      	ldr	r7, [sp, #12]
            p2.x = p1.x;
 80164a6:	f8ad c040 	strh.w	ip, [sp, #64]	; 0x40
        for(div_i = div_i_start; div_i <= div_i_end; div_i ++) {
 80164aa:	b2e4      	uxtb	r4, r4
            lv_draw_line(&p1, &p2, mask, style, opa_scale);
 80164ac:	9700      	str	r7, [sp, #0]
 80164ae:	f7f7 fcd1 	bl	800de54 <lv_draw_line>
        for(div_i = div_i_start; div_i <= div_i_end; div_i ++) {
 80164b2:	42b4      	cmp	r4, r6
 80164b4:	d9da      	bls.n	801646c <lv_chart_design+0x14c>
 80164b6:	f8dd 9018 	ldr.w	r9, [sp, #24]
        if(ext->type & LV_CHART_TYPE_LINE) lv_chart_draw_lines(chart, mask);
 80164ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80164bc:	7d1b      	ldrb	r3, [r3, #20]
 80164be:	f003 030f 	and.w	r3, r3, #15
 80164c2:	07d8      	lsls	r0, r3, #31
 80164c4:	f100 8194 	bmi.w	80167f0 <lv_chart_design+0x4d0>
        if(ext->type & LV_CHART_TYPE_COLUMN) lv_chart_draw_cols(chart, mask);
 80164c8:	0799      	lsls	r1, r3, #30
 80164ca:	f100 80ce 	bmi.w	801666a <lv_chart_design+0x34a>
        if(ext->type & LV_CHART_TYPE_POINT) lv_chart_draw_points(chart, mask);
 80164ce:	075a      	lsls	r2, r3, #29
 80164d0:	d41f      	bmi.n	8016512 <lv_chart_design+0x1f2>
        if(ext->type & LV_CHART_TYPE_VERTICAL_LINE) lv_chart_draw_vertical_lines(chart, mask);
 80164d2:	071b      	lsls	r3, r3, #28
 80164d4:	f57f af2c 	bpl.w	8016330 <lv_chart_design+0x10>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 80164d8:	4648      	mov	r0, r9
 80164da:	f7f5 fd1d 	bl	800bf18 <lv_obj_get_ext_attr>
 80164de:	4680      	mov	r8, r0
    lv_coord_t w = lv_obj_get_width(chart);
 80164e0:	4648      	mov	r0, r9
 80164e2:	f7f5 fc8f 	bl	800be04 <lv_obj_get_width>
    if(ext->point_cnt != w) {
 80164e6:	f8b8 3012 	ldrh.w	r3, [r8, #18]
 80164ea:	4283      	cmp	r3, r0
 80164ec:	9305      	str	r3, [sp, #20]
 80164ee:	f000 819d 	beq.w	801682c <lv_chart_design+0x50c>
        lv_chart_draw_lines(chart, mask);
 80164f2:	9902      	ldr	r1, [sp, #8]
 80164f4:	4648      	mov	r0, r9
 80164f6:	f7ff fe61 	bl	80161bc <lv_chart_draw_lines>
 80164fa:	e719      	b.n	8016330 <lv_chart_design+0x10>
        p2.y = h + y_ofs;
 80164fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
            div_i_start = 1;
 80164fe:	f04f 0801 	mov.w	r8, #1
        p2.y = h + y_ofs;
 8016502:	4417      	add	r7, r2
        p1.y = 0 + y_ofs;
 8016504:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 8016508:	eb06 0e08 	add.w	lr, r6, r8
        p2.y = h + y_ofs;
 801650c:	f8ad 7042 	strh.w	r7, [sp, #66]	; 0x42
 8016510:	e7a0      	b.n	8016454 <lv_chart_design+0x134>
    lv_style_copy(&style_point, &lv_style_plain);
 8016512:	ab10      	add	r3, sp, #64	; 0x40
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 8016514:	4648      	mov	r0, r9
    lv_style_copy(&style_point, &lv_style_plain);
 8016516:	461c      	mov	r4, r3
 8016518:	9303      	str	r3, [sp, #12]
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 801651a:	f7f5 fcfd 	bl	800bf18 <lv_obj_get_ext_attr>
 801651e:	4605      	mov	r5, r0
    lv_coord_t w = lv_obj_get_width(chart);
 8016520:	4648      	mov	r0, r9
 8016522:	f7f5 fc6f 	bl	800be04 <lv_obj_get_width>
 8016526:	9005      	str	r0, [sp, #20]
    lv_coord_t h = lv_obj_get_height(chart);
 8016528:	4648      	mov	r0, r9
 801652a:	f7f5 fc71 	bl	800be10 <lv_obj_get_height>
    lv_coord_t x_ofs = chart->coords.x1;
 801652e:	f9b9 3010 	ldrsh.w	r3, [r9, #16]
    lv_style_copy(&style_point, &lv_style_plain);
 8016532:	49bc      	ldr	r1, [pc, #752]	; (8016824 <lv_chart_design+0x504>)
    lv_coord_t h = lv_obj_get_height(chart);
 8016534:	4680      	mov	r8, r0
    lv_style_copy(&style_point, &lv_style_plain);
 8016536:	4620      	mov	r0, r4
    lv_coord_t x_ofs = chart->coords.x1;
 8016538:	9307      	str	r3, [sp, #28]
    lv_coord_t y_ofs = chart->coords.y1;
 801653a:	f9b9 4012 	ldrsh.w	r4, [r9, #18]
    lv_style_copy(&style_point, &lv_style_plain);
 801653e:	f7f6 f9e9 	bl	800c914 <lv_style_copy>
    style_point.body.border.width = 0;
 8016542:	2200      	movs	r2, #0
    style_point.body.empty = 0;
 8016544:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
    LL_READ_BACK(ext->series_ll, ser) {
 8016548:	4628      	mov	r0, r5
    style_point.body.empty = 0;
 801654a:	f362 0300 	bfi	r3, r2, #0, #1
    style_point.body.border.width = 0;
 801654e:	f8ad 2054 	strh.w	r2, [sp, #84]	; 0x54
    style_point.body.empty = 0;
 8016552:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
    style_point.body.opa = ext->series.opa;
 8016556:	7e6b      	ldrb	r3, [r5, #25]
 8016558:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
    style_point.body.radius = ext->series.width;
 801655c:	8aeb      	ldrh	r3, [r5, #22]
 801655e:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    LL_READ_BACK(ext->series_ll, ser) {
 8016562:	f7fc fe19 	bl	8013198 <lv_ll_get_tail>
 8016566:	4606      	mov	r6, r0
 8016568:	2800      	cmp	r0, #0
 801656a:	d079      	beq.n	8016660 <lv_chart_design+0x340>
 801656c:	4444      	add	r4, r8
 801656e:	b2a3      	uxth	r3, r4
 8016570:	9306      	str	r3, [sp, #24]
        style_point.body.main_color = ser->color;
 8016572:	6873      	ldr	r3, [r6, #4]
static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 8016574:	79b1      	ldrb	r1, [r6, #6]
 8016576:	9311      	str	r3, [sp, #68]	; 0x44
 8016578:	7eab      	ldrb	r3, [r5, #26]
    uint16_t g_2 = (c2.green_h << 3) + c2.green_l;
    uint16_t g_out = (uint16_t)((uint16_t) g_1 * mix + (g_2 * (255 - mix))) >> 8;
    ret.green_h = g_out >> 3;
    ret.green_l = g_out & 0x7;
#  else
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 801657a:	7972      	ldrb	r2, [r6, #5]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 801657c:	f1c3 00ff 	rsb	r0, r3, #255	; 0xff
        style_point.body.grad_color = lv_color_mix(LV_COLOR_BLACK, ser->color, ext->series.dark);
 8016580:	f04f 33ff 	mov.w	r3, #4294967295
#  endif
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 8016584:	7934      	ldrb	r4, [r6, #4]
 8016586:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 801658a:	b283      	uxth	r3, r0
        for(i = 0; i < ext->point_cnt; i ++) {
 801658c:	f8b5 a012 	ldrh.w	sl, [r5, #18]
 8016590:	fb11 f103 	smulbb	r1, r1, r3
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 8016594:	fb12 f203 	smulbb	r2, r2, r3
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 8016598:	fb14 f303 	smulbb	r3, r4, r3
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 801659c:	f3c1 2107 	ubfx	r1, r1, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 80165a0:	f3c2 2207 	ubfx	r2, r2, #8, #8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 80165a4:	f3c3 2307 	ubfx	r3, r3, #8, #8
        style_point.body.grad_color = lv_color_mix(LV_COLOR_BLACK, ser->color, ext->series.dark);
 80165a8:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
 80165ac:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
 80165b0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
        for(i = 0; i < ext->point_cnt; i ++) {
 80165b4:	f1ba 0f00 	cmp.w	sl, #0
 80165b8:	d04b      	beq.n	8016652 <lv_chart_design+0x332>
 80165ba:	f8bd 701c 	ldrh.w	r7, [sp, #28]
 80165be:	2400      	movs	r4, #0
                lv_draw_rect(&cir_a, mask, &style_point, lv_obj_get_opa_scale(chart));
 80165c0:	9704      	str	r7, [sp, #16]
            cir_a.x1 = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 80165c2:	9b05      	ldr	r3, [sp, #20]
                lv_draw_rect(&cir_a, mask, &style_point, lv_obj_get_opa_scale(chart));
 80165c4:	4648      	mov	r0, r9
            p_act = (ser->start_point + i) % ext->point_cnt;
 80165c6:	8932      	ldrh	r2, [r6, #8]
            cir_a.x1 = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 80165c8:	fb03 fe04 	mul.w	lr, r3, r4
 80165cc:	f10a 33ff 	add.w	r3, sl, #4294967295
            p_act = (ser->start_point + i) % ext->point_cnt;
 80165d0:	4422      	add	r2, r4
            cir_a.x1 = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 80165d2:	9f04      	ldr	r7, [sp, #16]
            cir_a.x2 = cir_a.x1 + style_point.body.radius;
 80165d4:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
            y_tmp = (int32_t)((int32_t) ser->points[p_act] - ext->ymin) * h;
 80165d8:	f8d6 c000 	ldr.w	ip, [r6]
 80165dc:	f9b5 b00c 	ldrsh.w	fp, [r5, #12]
            cir_a.x1 = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 80165e0:	fb9e f3f3 	sdiv	r3, lr, r3
            p_act = (ser->start_point + i) % ext->point_cnt;
 80165e4:	fb92 fefa 	sdiv	lr, r2, sl
            cir_a.x1 = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 80165e8:	443b      	add	r3, r7
            p_act = (ser->start_point + i) % ext->point_cnt;
 80165ea:	fb0a 221e 	mls	r2, sl, lr, r2
            cir_a.y1 = h - y_tmp + y_ofs;
 80165ee:	9f06      	ldr	r7, [sp, #24]
            cir_a.x1 = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 80165f0:	b29b      	uxth	r3, r3
            y_tmp = (int32_t)((int32_t) ser->points[p_act] - ext->ymin) * h;
 80165f2:	b212      	sxth	r2, r2
            cir_a.x2 = cir_a.x1 + style_point.body.radius;
 80165f4:	eb03 0e01 	add.w	lr, r3, r1
            cir_a.x1 -= style_point.body.radius;
 80165f8:	1a5b      	subs	r3, r3, r1
            cir_a.x2 = cir_a.x1 + style_point.body.radius;
 80165fa:	f8ad e03c 	strh.w	lr, [sp, #60]	; 0x3c
            cir_a.x1 -= style_point.body.radius;
 80165fe:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
            y_tmp = (int32_t)((int32_t) ser->points[p_act] - ext->ymin) * h;
 8016602:	f93c 3012 	ldrsh.w	r3, [ip, r2, lsl #1]
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
 8016606:	f9b5 e00e 	ldrsh.w	lr, [r5, #14]
            y_tmp = (int32_t)((int32_t) ser->points[p_act] - ext->ymin) * h;
 801660a:	eba3 030b 	sub.w	r3, r3, fp
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
 801660e:	ebae 0e0b 	sub.w	lr, lr, fp
            y_tmp = (int32_t)((int32_t) ser->points[p_act] - ext->ymin) * h;
 8016612:	fb08 f303 	mul.w	r3, r8, r3
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
 8016616:	fb93 f3fe 	sdiv	r3, r3, lr
            cir_a.y1 = h - y_tmp + y_ofs;
 801661a:	1afb      	subs	r3, r7, r3
 801661c:	b29b      	uxth	r3, r3
            cir_a.y2 = cir_a.y1 + style_point.body.radius;
 801661e:	eb01 0e03 	add.w	lr, r1, r3
            cir_a.y1 -= style_point.body.radius;
 8016622:	1a59      	subs	r1, r3, r1
            cir_a.y2 = cir_a.y1 + style_point.body.radius;
 8016624:	f8ad e03e 	strh.w	lr, [sp, #62]	; 0x3e
            cir_a.y1 -= style_point.body.radius;
 8016628:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
            if(ser->points[p_act] != LV_CHART_POINT_DEF)
 801662c:	f93c 3012 	ldrsh.w	r3, [ip, r2, lsl #1]
 8016630:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 8016634:	d009      	beq.n	801664a <lv_chart_design+0x32a>
                lv_draw_rect(&cir_a, mask, &style_point, lv_obj_get_opa_scale(chart));
 8016636:	f7f5 fc4f 	bl	800bed8 <lv_obj_get_opa_scale>
 801663a:	9a03      	ldr	r2, [sp, #12]
 801663c:	4603      	mov	r3, r0
 801663e:	9902      	ldr	r1, [sp, #8]
 8016640:	a80e      	add	r0, sp, #56	; 0x38
 8016642:	f7f9 fb27 	bl	800fc94 <lv_draw_rect>
 8016646:	f8b5 a012 	ldrh.w	sl, [r5, #18]
        for(i = 0; i < ext->point_cnt; i ++) {
 801664a:	3401      	adds	r4, #1
 801664c:	b2a4      	uxth	r4, r4
 801664e:	4554      	cmp	r4, sl
 8016650:	d3b7      	bcc.n	80165c2 <lv_chart_design+0x2a2>
    LL_READ_BACK(ext->series_ll, ser) {
 8016652:	4631      	mov	r1, r6
 8016654:	4628      	mov	r0, r5
 8016656:	f7fc fda9 	bl	80131ac <lv_ll_get_prev>
 801665a:	4606      	mov	r6, r0
 801665c:	2800      	cmp	r0, #0
 801665e:	d188      	bne.n	8016572 <lv_chart_design+0x252>
 8016660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016662:	7d1b      	ldrb	r3, [r3, #20]
 8016664:	f003 030f 	and.w	r3, r3, #15
 8016668:	e733      	b.n	80164d2 <lv_chart_design+0x1b2>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 801666a:	4648      	mov	r0, r9
    rects.body.border.width = 0;
 801666c:	2700      	movs	r7, #0
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 801666e:	f7f5 fc53 	bl	800bf18 <lv_obj_get_ext_attr>
 8016672:	4606      	mov	r6, r0
    lv_coord_t w = lv_obj_get_width(chart);
 8016674:	4648      	mov	r0, r9
 8016676:	f7f5 fbc5 	bl	800be04 <lv_obj_get_width>
 801667a:	4604      	mov	r4, r0
 801667c:	9009      	str	r0, [sp, #36]	; 0x24
    lv_coord_t h = lv_obj_get_height(chart);
 801667e:	4648      	mov	r0, r9
 8016680:	f7f5 fbc6 	bl	800be10 <lv_obj_get_height>
    lv_coord_t col_w = w / ((ext->series.num + 1) * ext->point_cnt); /* Suppose + 1 series as separator*/
 8016684:	7e33      	ldrb	r3, [r6, #24]
 8016686:	f8b6 b012 	ldrh.w	fp, [r6, #18]
    lv_coord_t h = lv_obj_get_height(chart);
 801668a:	9005      	str	r0, [sp, #20]
    lv_coord_t col_w = w / ((ext->series.num + 1) * ext->point_cnt); /* Suppose + 1 series as separator*/
 801668c:	fb03 bb0b 	mla	fp, r3, fp, fp
    lv_style_copy(&rects, &lv_style_plain);
 8016690:	ab10      	add	r3, sp, #64	; 0x40
 8016692:	4964      	ldr	r1, [pc, #400]	; (8016824 <lv_chart_design+0x504>)
 8016694:	4618      	mov	r0, r3
 8016696:	9303      	str	r3, [sp, #12]
    lv_coord_t col_w = w / ((ext->series.num + 1) * ext->point_cnt); /* Suppose + 1 series as separator*/
 8016698:	fb94 fbfb 	sdiv	fp, r4, fp
    lv_coord_t x_ofs = col_w / 2; /*Shift with a half col.*/
 801669c:	fa0f f48b 	sxth.w	r4, fp
 80166a0:	2c00      	cmp	r4, #0
 80166a2:	bfb8      	it	lt
 80166a4:	3401      	addlt	r4, #1
    lv_style_copy(&rects, &lv_style_plain);
 80166a6:	f7f6 f935 	bl	800c914 <lv_style_copy>
    rects.body.empty = 0;
 80166aa:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
    rects.body.border.width = 0;
 80166ae:	f8ad 7054 	strh.w	r7, [sp, #84]	; 0x54
    lv_coord_t x_ofs = col_w / 2; /*Shift with a half col.*/
 80166b2:	1064      	asrs	r4, r4, #1
    rects.body.empty = 0;
 80166b4:	f367 0300 	bfi	r3, r7, #0, #1
    rects.body.radius = 0;
 80166b8:	f8ad 704c 	strh.w	r7, [sp, #76]	; 0x4c
    col_a.y2 = chart->coords.y2;
 80166bc:	f8b9 2016 	ldrh.w	r2, [r9, #22]
    rects.body.empty = 0;
 80166c0:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
    rects.body.opa = ext->series.opa;
 80166c4:	7e73      	ldrb	r3, [r6, #25]
    col_a.y2 = chart->coords.y2;
 80166c6:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
    rects.body.opa = ext->series.opa;
 80166ca:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
    for(i = 0; i < ext->point_cnt; i ++) {
 80166ce:	8a73      	ldrh	r3, [r6, #18]
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	f000 8088 	beq.w	80167e6 <lv_chart_design+0x4c6>
 80166d6:	b2a2      	uxth	r2, r4
 80166d8:	fa1f fb8b 	uxth.w	fp, fp
 80166dc:	9208      	str	r2, [sp, #32]
 80166de:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80166e2:	9206      	str	r2, [sp, #24]
        x_act = (int32_t)((int32_t) w * i) / ext->point_cnt;
 80166e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
        LL_READ_BACK(ext->series_ll, ser) {
 80166e6:	4630      	mov	r0, r6
        x_act += chart->coords.x1 + x_ofs;
 80166e8:	9908      	ldr	r1, [sp, #32]
        x_act = (int32_t)((int32_t) w * i) / ext->point_cnt;
 80166ea:	fb07 f502 	mul.w	r5, r7, r2
        x_act += chart->coords.x1 + x_ofs;
 80166ee:	f8b9 2010 	ldrh.w	r2, [r9, #16]
        x_act = (int32_t)((int32_t) w * i) / ext->point_cnt;
 80166f2:	fb95 f5f3 	sdiv	r5, r5, r3
        x_act += chart->coords.x1 + x_ofs;
 80166f6:	440a      	add	r2, r1
 80166f8:	4415      	add	r5, r2
        LL_READ_BACK(ext->series_ll, ser) {
 80166fa:	f7fc fd4d 	bl	8013198 <lv_ll_get_tail>
 80166fe:	4604      	mov	r4, r0
        x_act += chart->coords.x1 + x_ofs;
 8016700:	b22d      	sxth	r5, r5
        LL_READ_BACK(ext->series_ll, ser) {
 8016702:	2800      	cmp	r0, #0
 8016704:	d069      	beq.n	80167da <lv_chart_design+0x4ba>
            rects.body.grad_color = lv_color_mix(LV_COLOR_BLACK, ser->color, ext->series.dark);
 8016706:	f04f 08ff 	mov.w	r8, #255	; 0xff
 801670a:	9704      	str	r7, [sp, #16]
            lv_coord_t p_act = (ser->start_point + i) % ext->point_cnt;
 801670c:	f8b4 a008 	ldrh.w	sl, [r4, #8]
 8016710:	eb0b 0e05 	add.w	lr, fp, r5
 8016714:	9b04      	ldr	r3, [sp, #16]
 8016716:	f8b6 c012 	ldrh.w	ip, [r6, #18]
 801671a:	4453      	add	r3, sl
            rects.body.main_color = ser->color;
 801671c:	6862      	ldr	r2, [r4, #4]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 801671e:	79a1      	ldrb	r1, [r4, #6]
 8016720:	9211      	str	r2, [sp, #68]	; 0x44
 8016722:	7eb0      	ldrb	r0, [r6, #26]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 8016724:	7962      	ldrb	r2, [r4, #5]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 8016726:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
            y_tmp = (int32_t)((int32_t) ser->points[p_act] - ext->ymin) * h;
 801672a:	9f05      	ldr	r7, [sp, #20]
            lv_coord_t p_act = (ser->start_point + i) % ext->point_cnt;
 801672c:	fb93 fafc 	sdiv	sl, r3, ip
 8016730:	fb0c 3a1a 	mls	sl, ip, sl, r3
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 8016734:	7923      	ldrb	r3, [r4, #4]
            col_a.x1 = x_act;
 8016736:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
 801673a:	fa0f f58e 	sxth.w	r5, lr
            y_tmp = (int32_t)((int32_t) ser->points[p_act] - ext->ymin) * h;
 801673e:	fa0f fa8a 	sxth.w	sl, sl
 8016742:	f8d4 e000 	ldr.w	lr, [r4]
 8016746:	f9b6 c00c 	ldrsh.w	ip, [r6, #12]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 801674a:	b280      	uxth	r0, r0
            col_a.x2 = col_a.x1 + col_w;
 801674c:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
            y_tmp = (int32_t)((int32_t) ser->points[p_act] - ext->ymin) * h;
 8016750:	f93e e01a 	ldrsh.w	lr, [lr, sl, lsl #1]
 8016754:	fb11 f100 	smulbb	r1, r1, r0
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 8016758:	fb12 f200 	smulbb	r2, r2, r0
            rects.body.grad_color = lv_color_mix(LV_COLOR_BLACK, ser->color, ext->series.dark);
 801675c:	f88d 804b 	strb.w	r8, [sp, #75]	; 0x4b
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 8016760:	fb13 f000 	smulbb	r0, r3, r0
            y_tmp = (int32_t)((int32_t) ser->points[p_act] - ext->ymin) * h;
 8016764:	ebae 0e0c 	sub.w	lr, lr, ip
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
 8016768:	f9b6 300e 	ldrsh.w	r3, [r6, #14]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 801676c:	f3c1 2107 	ubfx	r1, r1, #8, #8
            y_tmp = (int32_t)((int32_t) ser->points[p_act] - ext->ymin) * h;
 8016770:	fb07 fe0e 	mul.w	lr, r7, lr
            col_a.y1 = h - y_tmp + chart->coords.y1;
 8016774:	9f06      	ldr	r7, [sp, #24]
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
 8016776:	eba3 030c 	sub.w	r3, r3, ip
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 801677a:	f3c2 2207 	ubfx	r2, r2, #8, #8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 801677e:	f3c0 2007 	ubfx	r0, r0, #8, #8
            rects.body.grad_color = lv_color_mix(LV_COLOR_BLACK, ser->color, ext->series.dark);
 8016782:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
 8016786:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
            mask_ret = lv_area_intersect(&col_mask, mask, &col_a);
 801678a:	aa0c      	add	r2, sp, #48	; 0x30
 801678c:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
 8016790:	a80e      	add	r0, sp, #56	; 0x38
 8016792:	9902      	ldr	r1, [sp, #8]
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
 8016794:	fb9e f3f3 	sdiv	r3, lr, r3
            col_a.y1 = h - y_tmp + chart->coords.y1;
 8016798:	f8b9 e012 	ldrh.w	lr, [r9, #18]
 801679c:	44be      	add	lr, r7
 801679e:	ebae 0303 	sub.w	r3, lr, r3
 80167a2:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            mask_ret = lv_area_intersect(&col_mask, mask, &col_a);
 80167a6:	f7fc f98f 	bl	8012ac8 <lv_area_intersect>
            if(mask_ret != false && ser->points[p_act] != LV_CHART_POINT_DEF) {
 80167aa:	b170      	cbz	r0, 80167ca <lv_chart_design+0x4aa>
 80167ac:	6823      	ldr	r3, [r4, #0]
                lv_draw_rect(&chart->coords, &col_mask, &rects, lv_obj_get_opa_scale(chart));
 80167ae:	4648      	mov	r0, r9
            if(mask_ret != false && ser->points[p_act] != LV_CHART_POINT_DEF) {
 80167b0:	f933 301a 	ldrsh.w	r3, [r3, sl, lsl #1]
 80167b4:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 80167b8:	d007      	beq.n	80167ca <lv_chart_design+0x4aa>
                lv_draw_rect(&chart->coords, &col_mask, &rects, lv_obj_get_opa_scale(chart));
 80167ba:	f7f5 fb8d 	bl	800bed8 <lv_obj_get_opa_scale>
 80167be:	9a03      	ldr	r2, [sp, #12]
 80167c0:	4603      	mov	r3, r0
 80167c2:	a90e      	add	r1, sp, #56	; 0x38
 80167c4:	9807      	ldr	r0, [sp, #28]
 80167c6:	f7f9 fa65 	bl	800fc94 <lv_draw_rect>
        LL_READ_BACK(ext->series_ll, ser) {
 80167ca:	4621      	mov	r1, r4
 80167cc:	4630      	mov	r0, r6
 80167ce:	f7fc fced 	bl	80131ac <lv_ll_get_prev>
 80167d2:	4604      	mov	r4, r0
 80167d4:	2800      	cmp	r0, #0
 80167d6:	d199      	bne.n	801670c <lv_chart_design+0x3ec>
 80167d8:	9f04      	ldr	r7, [sp, #16]
    for(i = 0; i < ext->point_cnt; i ++) {
 80167da:	3701      	adds	r7, #1
 80167dc:	8a73      	ldrh	r3, [r6, #18]
 80167de:	b2bf      	uxth	r7, r7
 80167e0:	42bb      	cmp	r3, r7
 80167e2:	f63f af7f 	bhi.w	80166e4 <lv_chart_design+0x3c4>
 80167e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80167e8:	7d1b      	ldrb	r3, [r3, #20]
 80167ea:	f003 030f 	and.w	r3, r3, #15
 80167ee:	e66e      	b.n	80164ce <lv_chart_design+0x1ae>
        if(ext->type & LV_CHART_TYPE_LINE) lv_chart_draw_lines(chart, mask);
 80167f0:	9902      	ldr	r1, [sp, #8]
 80167f2:	4648      	mov	r0, r9
 80167f4:	f7ff fce2 	bl	80161bc <lv_chart_draw_lines>
 80167f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80167fa:	7d1b      	ldrb	r3, [r3, #20]
 80167fc:	f003 030f 	and.w	r3, r3, #15
 8016800:	e662      	b.n	80164c8 <lv_chart_design+0x1a8>
        return ancestor_design_f(chart, mask, mode);
 8016802:	4b09      	ldr	r3, [pc, #36]	; (8016828 <lv_chart_design+0x508>)
 8016804:	681b      	ldr	r3, [r3, #0]
 8016806:	4798      	blx	r3
 8016808:	e593      	b.n	8016332 <lv_chart_design+0x12>
        p2.x = w + x_ofs;
 801680a:	9a08      	ldr	r2, [sp, #32]
            div_i_start = 1;
 801680c:	f04f 0801 	mov.w	r8, #1
        p2.x = w + x_ofs;
 8016810:	9904      	ldr	r1, [sp, #16]
 8016812:	4613      	mov	r3, r2
        p1.x = 0 + x_ofs;
 8016814:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8016818:	eb06 0e08 	add.w	lr, r6, r8
        p2.x = w + x_ofs;
 801681c:	440b      	add	r3, r1
 801681e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8016822:	e5ce      	b.n	80163c2 <lv_chart_design+0xa2>
 8016824:	2001933c 	.word	0x2001933c
 8016828:	20016618 	.word	0x20016618
    lv_coord_t y_ofs = chart->coords.y1;
    int32_t y_tmp;
    lv_chart_series_t * ser;
    lv_opa_t opa_scale = lv_obj_get_opa_scale(chart);
    lv_style_t style;
    lv_style_copy(&style, &lv_style_plain);
 801682c:	ab10      	add	r3, sp, #64	; 0x40
    lv_coord_t h = lv_obj_get_height(chart);
 801682e:	4648      	mov	r0, r9
    lv_style_copy(&style, &lv_style_plain);
 8016830:	461d      	mov	r5, r3
 8016832:	9303      	str	r3, [sp, #12]
    lv_coord_t h = lv_obj_get_height(chart);
 8016834:	f7f5 faec 	bl	800be10 <lv_obj_get_height>
    lv_coord_t x_ofs = chart->coords.x1;
 8016838:	f9b9 3010 	ldrsh.w	r3, [r9, #16]
    lv_coord_t h = lv_obj_get_height(chart);
 801683c:	4606      	mov	r6, r0
    lv_opa_t opa_scale = lv_obj_get_opa_scale(chart);
 801683e:	4648      	mov	r0, r9
    lv_coord_t x_ofs = chart->coords.x1;
 8016840:	9308      	str	r3, [sp, #32]
    lv_coord_t y_ofs = chart->coords.y1;
 8016842:	f9b9 4012 	ldrsh.w	r4, [r9, #18]
    lv_opa_t opa_scale = lv_obj_get_opa_scale(chart);
 8016846:	f7f5 fb47 	bl	800bed8 <lv_obj_get_opa_scale>
    lv_style_copy(&style, &lv_style_plain);
 801684a:	495c      	ldr	r1, [pc, #368]	; (80169bc <lv_chart_design+0x69c>)
    lv_opa_t opa_scale = lv_obj_get_opa_scale(chart);
 801684c:	9007      	str	r0, [sp, #28]
    lv_style_copy(&style, &lv_style_plain);
 801684e:	4628      	mov	r0, r5
 8016850:	f7f6 f860 	bl	800c914 <lv_style_copy>
    style.line.opa = ext->series.opa;
 8016854:	f898 3019 	ldrb.w	r3, [r8, #25]
    style.line.width = ext->series.width;

    /*Go through all data lines*/
    LL_READ_BACK(ext->series_ll, ser) {
 8016858:	4640      	mov	r0, r8
    style.line.opa = ext->series.opa;
 801685a:	f88d 3086 	strb.w	r3, [sp, #134]	; 0x86
    style.line.width = ext->series.width;
 801685e:	f8b8 3016 	ldrh.w	r3, [r8, #22]
 8016862:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
    LL_READ_BACK(ext->series_ll, ser) {
 8016866:	f7fc fc97 	bl	8013198 <lv_ll_get_tail>
 801686a:	4682      	mov	sl, r0
 801686c:	2800      	cmp	r0, #0
 801686e:	f43f ad5f 	beq.w	8016330 <lv_chart_design+0x10>
 8016872:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8016876:	4434      	add	r4, r6
 8016878:	46b1      	mov	r9, r6
 801687a:	9306      	str	r3, [sp, #24]
 801687c:	b2a3      	uxth	r3, r4
 801687e:	9304      	str	r3, [sp, #16]
        style.line.color = ser->color;

        p1.x = 0 + x_ofs;
        p2.x = 0 + x_ofs;
        y_tmp = (int32_t)((int32_t) ser->points[0] - ext->ymin) * h;
 8016880:	f8da 6000 	ldr.w	r6, [sl]
        p1.x = 0 + x_ofs;
 8016884:	9a08      	ldr	r2, [sp, #32]
        y_tmp = (int32_t)((int32_t) ser->points[0] - ext->ymin) * h;
 8016886:	f9b8 000c 	ldrsh.w	r0, [r8, #12]
        style.line.color = ser->color;
 801688a:	f8da 3004 	ldr.w	r3, [sl, #4]
        p1.x = 0 + x_ofs;
 801688e:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
        p2.x = 0 + x_ofs;
 8016892:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        y_tmp = (int32_t)((int32_t) ser->points[0] - ext->ymin) * h;
 8016896:	f9b6 e000 	ldrsh.w	lr, [r6]
        y_tmp = y_tmp / (ext->ymax - ext->ymin);
 801689a:	f9b8 700e 	ldrsh.w	r7, [r8, #14]
        y_tmp = (int32_t)((int32_t) ser->points[0] - ext->ymin) * h;
 801689e:	ebae 0e00 	sub.w	lr, lr, r0
        style.line.color = ser->color;
 80168a2:	9320      	str	r3, [sp, #128]	; 0x80
        y_tmp = y_tmp / (ext->ymax - ext->ymin);
 80168a4:	1a3f      	subs	r7, r7, r0
        p2.y = h - y_tmp + y_ofs;
 80168a6:	9b04      	ldr	r3, [sp, #16]
        y_tmp = (int32_t)((int32_t) ser->points[0] - ext->ymin) * h;
 80168a8:	fb09 fe0e 	mul.w	lr, r9, lr
        p1.y = p2.y;

        for(i = 0; i < ext->point_cnt; i++)
 80168ac:	f8b8 c012 	ldrh.w	ip, [r8, #18]
        y_tmp = y_tmp / (ext->ymax - ext->ymin);
 80168b0:	fb9e fef7 	sdiv	lr, lr, r7
        p2.y = h - y_tmp + y_ofs;
 80168b4:	eba3 0e0e 	sub.w	lr, r3, lr
 80168b8:	fa0f fe8e 	sxth.w	lr, lr
 80168bc:	f8ad e03a 	strh.w	lr, [sp, #58]	; 0x3a
        p1.y = p2.y;
 80168c0:	f8ad e032 	strh.w	lr, [sp, #50]	; 0x32
        for(i = 0; i < ext->point_cnt; i++)
 80168c4:	f1bc 0f00 	cmp.w	ip, #0
 80168c8:	d046      	beq.n	8016958 <lv_chart_design+0x638>
 80168ca:	9c08      	ldr	r4, [sp, #32]
 80168cc:	2500      	movs	r5, #0
 80168ce:	e028      	b.n	8016922 <lv_chart_design+0x602>
            if(p1.y == p2.y)
            {
                p2.x++;
            }

            if(ser->points[i] != LV_CHART_POINT_DEF) {
 80168d0:	f9b6 4000 	ldrsh.w	r4, [r6]
 80168d4:	f514 4f80 	cmn.w	r4, #16384	; 0x4000
 80168d8:	d007      	beq.n	80168ea <lv_chart_design+0x5ca>
                lv_draw_line(&p1, &p2, mask, &style, opa_scale);
 80168da:	9c07      	ldr	r4, [sp, #28]
 80168dc:	9400      	str	r4, [sp, #0]
 80168de:	f7f7 fab9 	bl	800de54 <lv_draw_line>
 80168e2:	f9bd b03a 	ldrsh.w	fp, [sp, #58]	; 0x3a
 80168e6:	f8b8 c012 	ldrh.w	ip, [r8, #18]
            }

            p2.x = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 80168ea:	9b05      	ldr	r3, [sp, #20]
 80168ec:	f10c 34ff 	add.w	r4, ip, #4294967295
            p1.x = p2.x;
            p1.y = p2.y;
 80168f0:	f8ad b032 	strh.w	fp, [sp, #50]	; 0x32
        for(i = 0; i < ext->point_cnt; i++)
 80168f4:	46de      	mov	lr, fp
            p2.x = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 80168f6:	fb03 f305 	mul.w	r3, r3, r5
        for(i = 0; i < ext->point_cnt; i++)
 80168fa:	3501      	adds	r5, #1
            p2.x = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 80168fc:	fb93 f4f4 	sdiv	r4, r3, r4
 8016900:	9b06      	ldr	r3, [sp, #24]
        for(i = 0; i < ext->point_cnt; i++)
 8016902:	b2ad      	uxth	r5, r5
            p2.x = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 8016904:	441c      	add	r4, r3
        for(i = 0; i < ext->point_cnt; i++)
 8016906:	45ac      	cmp	ip, r5
            p2.x = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 8016908:	b224      	sxth	r4, r4
 801690a:	f8ad 4038 	strh.w	r4, [sp, #56]	; 0x38
            p1.x = p2.x;
 801690e:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
        for(i = 0; i < ext->point_cnt; i++)
 8016912:	d921      	bls.n	8016958 <lv_chart_design+0x638>
 8016914:	f9b8 000c 	ldrsh.w	r0, [r8, #12]
 8016918:	f9b8 700e 	ldrsh.w	r7, [r8, #14]
 801691c:	f8da 6000 	ldr.w	r6, [sl]
 8016920:	1a3f      	subs	r7, r7, r0
            y_tmp = (int32_t)((int32_t) ser->points[i] - ext->ymin) * h;
 8016922:	f936 b015 	ldrsh.w	fp, [r6, r5, lsl #1]
                lv_draw_line(&p1, &p2, mask, &style, opa_scale);
 8016926:	a90e      	add	r1, sp, #56	; 0x38
 8016928:	9b03      	ldr	r3, [sp, #12]
            y_tmp = (int32_t)((int32_t) ser->points[i] - ext->ymin) * h;
 801692a:	eb06 0645 	add.w	r6, r6, r5, lsl #1
 801692e:	ebab 0b00 	sub.w	fp, fp, r0
                lv_draw_line(&p1, &p2, mask, &style, opa_scale);
 8016932:	9a02      	ldr	r2, [sp, #8]
 8016934:	a80c      	add	r0, sp, #48	; 0x30
            y_tmp = (int32_t)((int32_t) ser->points[i] - ext->ymin) * h;
 8016936:	fb09 fb0b 	mul.w	fp, r9, fp
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
 801693a:	fb9b fbf7 	sdiv	fp, fp, r7
            p2.y = h - y_tmp + y_ofs;
 801693e:	9f04      	ldr	r7, [sp, #16]
 8016940:	eba7 0b0b 	sub.w	fp, r7, fp
 8016944:	fa0f fb8b 	sxth.w	fp, fp
            if(p1.y == p2.y)
 8016948:	45f3      	cmp	fp, lr
            p2.y = h - y_tmp + y_ofs;
 801694a:	f8ad b03a 	strh.w	fp, [sp, #58]	; 0x3a
            if(p1.y == p2.y)
 801694e:	d1bf      	bne.n	80168d0 <lv_chart_design+0x5b0>
                p2.x++;
 8016950:	3401      	adds	r4, #1
 8016952:	f8ad 4038 	strh.w	r4, [sp, #56]	; 0x38
 8016956:	e7bb      	b.n	80168d0 <lv_chart_design+0x5b0>
    LL_READ_BACK(ext->series_ll, ser) {
 8016958:	4651      	mov	r1, sl
 801695a:	4640      	mov	r0, r8
 801695c:	f7fc fc26 	bl	80131ac <lv_ll_get_prev>
 8016960:	4682      	mov	sl, r0
 8016962:	2800      	cmp	r0, #0
 8016964:	d18c      	bne.n	8016880 <lv_chart_design+0x560>
 8016966:	e4e3      	b.n	8016330 <lv_chart_design+0x10>
            if(div_i == div_i_end) p1.x -= (style->line.width >> 1) + 1;  /*The last line might not be visible*/
 8016968:	f9b5 e044 	ldrsh.w	lr, [r5, #68]	; 0x44
 801696c:	ea6f 0e6e 	mvn.w	lr, lr, asr #1
 8016970:	44e6      	add	lr, ip
 8016972:	fa0f fc8e 	sxth.w	ip, lr
 8016976:	f8ad c038 	strh.w	ip, [sp, #56]	; 0x38
 801697a:	e592      	b.n	80164a2 <lv_chart_design+0x182>
            if(div_i == div_i_start) p1.x += (style->line.width >> 1) + 1;  /*The first line might not be visible*/
 801697c:	f9b5 c044 	ldrsh.w	ip, [r5, #68]	; 0x44
 8016980:	eb0e 0e6c 	add.w	lr, lr, ip, asr #1
 8016984:	f10e 0e01 	add.w	lr, lr, #1
 8016988:	fa0f fc8e 	sxth.w	ip, lr
 801698c:	f8ad c038 	strh.w	ip, [sp, #56]	; 0x38
 8016990:	e584      	b.n	801649c <lv_chart_design+0x17c>
            if(div_i == div_i_end) p1.y -= (style->line.width >> 1) + 1;  /*The last line might not be visible*/
 8016992:	f9b5 e044 	ldrsh.w	lr, [r5, #68]	; 0x44
 8016996:	ea6f 0e6e 	mvn.w	lr, lr, asr #1
 801699a:	44e6      	add	lr, ip
 801699c:	fa0f fc8e 	sxth.w	ip, lr
 80169a0:	f8ad c03a 	strh.w	ip, [sp, #58]	; 0x3a
 80169a4:	e536      	b.n	8016414 <lv_chart_design+0xf4>
            if(div_i == div_i_start) p1.y += (style->line.width >> 1) + 1;  /*The first line might not be visible*/
 80169a6:	f9b5 c044 	ldrsh.w	ip, [r5, #68]	; 0x44
 80169aa:	eb0e 0e6c 	add.w	lr, lr, ip, asr #1
 80169ae:	f10e 0e01 	add.w	lr, lr, #1
 80169b2:	fa0f fc8e 	sxth.w	ip, lr
 80169b6:	f8ad c03a 	strh.w	ip, [sp, #58]	; 0x3a
 80169ba:	e528      	b.n	801640e <lv_chart_design+0xee>
 80169bc:	2001933c 	.word	0x2001933c

080169c0 <lv_chart_signal>:
{
 80169c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    res = ancestor_signal(chart, sign, param);
 80169c2:	4b22      	ldr	r3, [pc, #136]	; (8016a4c <lv_chart_signal+0x8c>)
{
 80169c4:	4607      	mov	r7, r0
 80169c6:	460e      	mov	r6, r1
 80169c8:	4614      	mov	r4, r2
    res = ancestor_signal(chart, sign, param);
 80169ca:	685b      	ldr	r3, [r3, #4]
 80169cc:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 80169ce:	2801      	cmp	r0, #1
    res = ancestor_signal(chart, sign, param);
 80169d0:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 80169d2:	d001      	beq.n	80169d8 <lv_chart_signal+0x18>
}
 80169d4:	4628      	mov	r0, r5
 80169d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(sign == LV_SIGNAL_CLEANUP) {
 80169d8:	b1be      	cbz	r6, 8016a0a <lv_chart_signal+0x4a>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 80169da:	2e06      	cmp	r6, #6
 80169dc:	d1fa      	bne.n	80169d4 <lv_chart_signal+0x14>
            if(buf->type[i] == NULL) break;
 80169de:	6823      	ldr	r3, [r4, #0]
 80169e0:	b173      	cbz	r3, 8016a00 <lv_chart_signal+0x40>
 80169e2:	6863      	ldr	r3, [r4, #4]
 80169e4:	b343      	cbz	r3, 8016a38 <lv_chart_signal+0x78>
 80169e6:	68a3      	ldr	r3, [r4, #8]
 80169e8:	b343      	cbz	r3, 8016a3c <lv_chart_signal+0x7c>
 80169ea:	68e3      	ldr	r3, [r4, #12]
 80169ec:	b343      	cbz	r3, 8016a40 <lv_chart_signal+0x80>
 80169ee:	6923      	ldr	r3, [r4, #16]
 80169f0:	b343      	cbz	r3, 8016a44 <lv_chart_signal+0x84>
 80169f2:	6963      	ldr	r3, [r4, #20]
 80169f4:	b343      	cbz	r3, 8016a48 <lv_chart_signal+0x88>
 80169f6:	69a3      	ldr	r3, [r4, #24]
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	bf14      	ite	ne
 80169fc:	2307      	movne	r3, #7
 80169fe:	2306      	moveq	r3, #6
        buf->type[i] = "lv_chart";
 8016a00:	4a13      	ldr	r2, [pc, #76]	; (8016a50 <lv_chart_signal+0x90>)
}
 8016a02:	4628      	mov	r0, r5
        buf->type[i] = "lv_chart";
 8016a04:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
}
 8016a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 8016a0a:	4638      	mov	r0, r7
 8016a0c:	f7f5 fa84 	bl	800bf18 <lv_obj_get_ext_attr>
 8016a10:	4606      	mov	r6, r0
        LL_READ(ext->series_ll, datal) {
 8016a12:	f7fc fbbd 	bl	8013190 <lv_ll_get_head>
 8016a16:	4604      	mov	r4, r0
 8016a18:	b148      	cbz	r0, 8016a2e <lv_chart_signal+0x6e>
            lv_mem_free(*datal);
 8016a1a:	6820      	ldr	r0, [r4, #0]
 8016a1c:	f7fc fc26 	bl	801326c <lv_mem_free>
        LL_READ(ext->series_ll, datal) {
 8016a20:	4621      	mov	r1, r4
 8016a22:	4630      	mov	r0, r6
 8016a24:	f7fc fbbc 	bl	80131a0 <lv_ll_get_next>
 8016a28:	4604      	mov	r4, r0
 8016a2a:	2800      	cmp	r0, #0
 8016a2c:	d1f5      	bne.n	8016a1a <lv_chart_signal+0x5a>
        lv_ll_clear(&ext->series_ll);
 8016a2e:	4630      	mov	r0, r6
 8016a30:	f7fc fb10 	bl	8013054 <lv_ll_clear>
}
 8016a34:	4628      	mov	r0, r5
 8016a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(buf->type[i] == NULL) break;
 8016a38:	4603      	mov	r3, r0
 8016a3a:	e7e1      	b.n	8016a00 <lv_chart_signal+0x40>
 8016a3c:	2302      	movs	r3, #2
 8016a3e:	e7df      	b.n	8016a00 <lv_chart_signal+0x40>
 8016a40:	2303      	movs	r3, #3
 8016a42:	e7dd      	b.n	8016a00 <lv_chart_signal+0x40>
 8016a44:	2304      	movs	r3, #4
 8016a46:	e7db      	b.n	8016a00 <lv_chart_signal+0x40>
 8016a48:	2305      	movs	r3, #5
 8016a4a:	e7d9      	b.n	8016a00 <lv_chart_signal+0x40>
 8016a4c:	20016618 	.word	0x20016618
 8016a50:	080c727c 	.word	0x080c727c

08016a54 <lv_chart_create>:
{
 8016a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a56:	460f      	mov	r7, r1
    lv_obj_t * new_chart = lv_obj_create(par, copy);
 8016a58:	f7f3 fbce 	bl	800a1f8 <lv_obj_create>
    lv_mem_assert(new_chart);
 8016a5c:	2800      	cmp	r0, #0
 8016a5e:	d049      	beq.n	8016af4 <lv_chart_create+0xa0>
    lv_chart_ext_t * ext = lv_obj_allocate_ext_attr(new_chart, sizeof(lv_chart_ext_t));
 8016a60:	211c      	movs	r1, #28
 8016a62:	4605      	mov	r5, r0
 8016a64:	f7f5 f8c6 	bl	800bbf4 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 8016a68:	4604      	mov	r4, r0
 8016a6a:	2800      	cmp	r0, #0
 8016a6c:	d043      	beq.n	8016af6 <lv_chart_create+0xa2>
    lv_ll_init(&ext->series_ll, sizeof(lv_chart_series_t));
 8016a6e:	210c      	movs	r1, #12
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_func(new_chart);
 8016a70:	4e32      	ldr	r6, [pc, #200]	; (8016b3c <lv_chart_create+0xe8>)
    lv_ll_init(&ext->series_ll, sizeof(lv_chart_series_t));
 8016a72:	f7fc fa45 	bl	8012f00 <lv_ll_init>
    ext->type = LV_CHART_TYPE_LINE;
 8016a76:	7d23      	ldrb	r3, [r4, #20]
 8016a78:	2001      	movs	r0, #1
    ext->series.num = 0;
 8016a7a:	2100      	movs	r1, #0
    ext->ymin = LV_CHART_YMIN_DEF;
 8016a7c:	f44f 02c8 	mov.w	r2, #6553600	; 0x640000
    ext->type = LV_CHART_TYPE_LINE;
 8016a80:	f360 0303 	bfi	r3, r0, #0, #4
    ext->series.num = 0;
 8016a84:	7621      	strb	r1, [r4, #24]
    ext->hdiv_cnt = LV_CHART_HDIV_DEF;
 8016a86:	2003      	movs	r0, #3
    ext->vdiv_cnt = LV_CHART_VDIV_DEF;
 8016a88:	2105      	movs	r1, #5
    ext->type = LV_CHART_TYPE_LINE;
 8016a8a:	7523      	strb	r3, [r4, #20]
    ext->point_cnt = LV_CHART_PNUM_DEF;
 8016a8c:	230a      	movs	r3, #10
    ext->hdiv_cnt = LV_CHART_HDIV_DEF;
 8016a8e:	7420      	strb	r0, [r4, #16]
    ext->series.opa = LV_OPA_COVER;
 8016a90:	20ff      	movs	r0, #255	; 0xff
    ext->point_cnt = LV_CHART_PNUM_DEF;
 8016a92:	8263      	strh	r3, [r4, #18]
    ext->series.width = 2;
 8016a94:	2302      	movs	r3, #2
    ext->vdiv_cnt = LV_CHART_VDIV_DEF;
 8016a96:	7461      	strb	r1, [r4, #17]
    ext->series.dark = LV_OPA_50;
 8016a98:	217f      	movs	r1, #127	; 0x7f
    ext->series.width = 2;
 8016a9a:	82e3      	strh	r3, [r4, #22]
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_func(new_chart);
 8016a9c:	6833      	ldr	r3, [r6, #0]
    ext->ymin = LV_CHART_YMIN_DEF;
 8016a9e:	60e2      	str	r2, [r4, #12]
    ext->series.opa = LV_OPA_COVER;
 8016aa0:	7660      	strb	r0, [r4, #25]
    ext->series.dark = LV_OPA_50;
 8016aa2:	76a1      	strb	r1, [r4, #26]
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_func(new_chart);
 8016aa4:	b343      	cbz	r3, 8016af8 <lv_chart_create+0xa4>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_chart);
 8016aa6:	6873      	ldr	r3, [r6, #4]
 8016aa8:	b36b      	cbz	r3, 8016b06 <lv_chart_create+0xb2>
    lv_obj_set_signal_func(new_chart, lv_chart_signal);
 8016aaa:	4925      	ldr	r1, [pc, #148]	; (8016b40 <lv_chart_create+0xec>)
 8016aac:	4628      	mov	r0, r5
 8016aae:	f7f5 f89d 	bl	800bbec <lv_obj_set_signal_func>
    lv_obj_set_design_func(new_chart, lv_chart_design);
 8016ab2:	4924      	ldr	r1, [pc, #144]	; (8016b44 <lv_chart_create+0xf0>)
 8016ab4:	4628      	mov	r0, r5
 8016ab6:	f7f5 f89b 	bl	800bbf0 <lv_obj_set_design_func>
    if(copy == NULL) {
 8016aba:	b34f      	cbz	r7, 8016b10 <lv_chart_create+0xbc>
        lv_chart_ext_t * ext_copy = lv_obj_get_ext_attr(copy);
 8016abc:	4638      	mov	r0, r7
 8016abe:	f7f5 fa2b 	bl	800bf18 <lv_obj_get_ext_attr>
 8016ac2:	4603      	mov	r3, r0
        ext->type = ext_copy->type;
 8016ac4:	7d22      	ldrb	r2, [r4, #20]
        lv_obj_refresh_style(new_chart);
 8016ac6:	4628      	mov	r0, r5
        ext->type = ext_copy->type;
 8016ac8:	7d19      	ldrb	r1, [r3, #20]
 8016aca:	f361 0203 	bfi	r2, r1, #0, #4
 8016ace:	7522      	strb	r2, [r4, #20]
        ext->ymin = ext_copy->ymin;
 8016ad0:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
        ext->ymax = ext_copy->ymax;
 8016ad4:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
        ext->ymin = ext_copy->ymin;
 8016ad8:	81a1      	strh	r1, [r4, #12]
        ext->ymax = ext_copy->ymax;
 8016ada:	81e2      	strh	r2, [r4, #14]
        ext->hdiv_cnt = ext_copy->hdiv_cnt;
 8016adc:	7c1a      	ldrb	r2, [r3, #16]
 8016ade:	7422      	strb	r2, [r4, #16]
        ext->vdiv_cnt = ext_copy->vdiv_cnt;
 8016ae0:	7c5a      	ldrb	r2, [r3, #17]
 8016ae2:	7462      	strb	r2, [r4, #17]
        ext->point_cnt = ext_copy->point_cnt;
 8016ae4:	8a5a      	ldrh	r2, [r3, #18]
 8016ae6:	8262      	strh	r2, [r4, #18]
        ext->series.opa =  ext_copy->series.opa;
 8016ae8:	7e5b      	ldrb	r3, [r3, #25]
 8016aea:	7663      	strb	r3, [r4, #25]
        lv_obj_refresh_style(new_chart);
 8016aec:	f7f4 ff40 	bl	800b970 <lv_obj_refresh_style>
}
 8016af0:	4628      	mov	r0, r5
 8016af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016af4:	e7fe      	b.n	8016af4 <lv_chart_create+0xa0>
 8016af6:	e7fe      	b.n	8016af6 <lv_chart_create+0xa2>
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_func(new_chart);
 8016af8:	4628      	mov	r0, r5
 8016afa:	f7f5 fa0b 	bl	800bf14 <lv_obj_get_design_func>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_chart);
 8016afe:	6873      	ldr	r3, [r6, #4]
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_func(new_chart);
 8016b00:	6030      	str	r0, [r6, #0]
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_chart);
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d1d1      	bne.n	8016aaa <lv_chart_create+0x56>
 8016b06:	4628      	mov	r0, r5
 8016b08:	f7f5 fa02 	bl	800bf10 <lv_obj_get_signal_func>
 8016b0c:	6070      	str	r0, [r6, #4]
 8016b0e:	e7cc      	b.n	8016aaa <lv_chart_create+0x56>
        lv_obj_set_size(new_chart, LV_HOR_RES / 3, LV_VER_RES / 3);
 8016b10:	225a      	movs	r2, #90	; 0x5a
 8016b12:	21a0      	movs	r1, #160	; 0xa0
 8016b14:	4628      	mov	r0, r5
 8016b16:	f7f4 f861 	bl	800abdc <lv_obj_set_size>
        lv_theme_t * th = lv_theme_get_current();
 8016b1a:	f006 ff05 	bl	801d928 <lv_theme_get_current>
        if(th) {
 8016b1e:	b130      	cbz	r0, 8016b2e <lv_chart_create+0xda>
 * @param chart pointer to a chart object
 * @param style pointer to a style
 */
static inline void lv_chart_set_style(lv_obj_t *chart, lv_style_t *style)
{
    lv_obj_set_style(chart, style);
 8016b20:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8016b24:	4628      	mov	r0, r5
 8016b26:	f7f4 fb15 	bl	800b154 <lv_obj_set_style>
}
 8016b2a:	4628      	mov	r0, r5
 8016b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b2e:	4628      	mov	r0, r5
 8016b30:	4905      	ldr	r1, [pc, #20]	; (8016b48 <lv_chart_create+0xf4>)
 8016b32:	f7f4 fb0f 	bl	800b154 <lv_obj_set_style>
 8016b36:	4628      	mov	r0, r5
 8016b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b3a:	bf00      	nop
 8016b3c:	20016618 	.word	0x20016618
 8016b40:	080169c1 	.word	0x080169c1
 8016b44:	08016321 	.word	0x08016321
 8016b48:	2001921c 	.word	0x2001921c

08016b4c <lv_chart_add_series>:
{
 8016b4c:	b570      	push	{r4, r5, r6, lr}
 8016b4e:	460e      	mov	r6, r1
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 8016b50:	f7f5 f9e2 	bl	800bf18 <lv_obj_get_ext_attr>
 8016b54:	4604      	mov	r4, r0
    lv_chart_series_t * ser = lv_ll_ins_head(&ext->series_ll);
 8016b56:	f7fc f9dd 	bl	8012f14 <lv_ll_ins_head>
    lv_mem_assert(ser);
 8016b5a:	b1d0      	cbz	r0, 8016b92 <lv_chart_add_series+0x46>
 8016b5c:	4605      	mov	r5, r0
    ser->points = lv_mem_alloc(sizeof(lv_coord_t) * ext->point_cnt);
 8016b5e:	8a60      	ldrh	r0, [r4, #18]
    ser->color = color;
 8016b60:	606e      	str	r6, [r5, #4]
    ser->points = lv_mem_alloc(sizeof(lv_coord_t) * ext->point_cnt);
 8016b62:	0040      	lsls	r0, r0, #1
 8016b64:	f7fc fb7a 	bl	801325c <lv_mem_alloc>
 8016b68:	6028      	str	r0, [r5, #0]
    lv_mem_assert(ser->points);
 8016b6a:	b198      	cbz	r0, 8016b94 <lv_chart_add_series+0x48>
    ser->start_point = 0;
 8016b6c:	2300      	movs	r3, #0
    for(i = 0; i < ext->point_cnt; i++) {
 8016b6e:	8a62      	ldrh	r2, [r4, #18]
    ser->start_point = 0;
 8016b70:	812b      	strh	r3, [r5, #8]
    for(i = 0; i < ext->point_cnt; i++) {
 8016b72:	b14a      	cbz	r2, 8016b88 <lv_chart_add_series+0x3c>
 8016b74:	4602      	mov	r2, r0
        *p_tmp = def;
 8016b76:	f44f 4040 	mov.w	r0, #49152	; 0xc000
    for(i = 0; i < ext->point_cnt; i++) {
 8016b7a:	3301      	adds	r3, #1
        *p_tmp = def;
 8016b7c:	f822 0b02 	strh.w	r0, [r2], #2
    for(i = 0; i < ext->point_cnt; i++) {
 8016b80:	8a61      	ldrh	r1, [r4, #18]
 8016b82:	b29b      	uxth	r3, r3
 8016b84:	4299      	cmp	r1, r3
 8016b86:	d8f8      	bhi.n	8016b7a <lv_chart_add_series+0x2e>
    ext->series.num++;
 8016b88:	7e23      	ldrb	r3, [r4, #24]
}
 8016b8a:	4628      	mov	r0, r5
    ext->series.num++;
 8016b8c:	3301      	adds	r3, #1
 8016b8e:	7623      	strb	r3, [r4, #24]
}
 8016b90:	bd70      	pop	{r4, r5, r6, pc}
 8016b92:	e7fe      	b.n	8016b92 <lv_chart_add_series+0x46>
 8016b94:	e7fe      	b.n	8016b94 <lv_chart_add_series+0x48>
 8016b96:	bf00      	nop

08016b98 <lv_chart_set_range>:
{
 8016b98:	b570      	push	{r4, r5, r6, lr}
 8016b9a:	460c      	mov	r4, r1
 8016b9c:	4615      	mov	r5, r2
 8016b9e:	4606      	mov	r6, r0
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 8016ba0:	f7f5 f9ba 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->ymin == ymin && ext->ymax == ymax) return;
 8016ba4:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 8016ba8:	4603      	mov	r3, r0
    if(ext->ymin == ymin && ext->ymax == ymax) return;
 8016baa:	42a2      	cmp	r2, r4
 8016bac:	d006      	beq.n	8016bbc <lv_chart_set_range+0x24>
    ext->ymin = ymin;
 8016bae:	819c      	strh	r4, [r3, #12]
    lv_obj_invalidate(chart);
 8016bb0:	4630      	mov	r0, r6
    ext->ymax = ymax;
 8016bb2:	81dd      	strh	r5, [r3, #14]
}
 8016bb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_invalidate(chart);
 8016bb8:	f7f3 b892 	b.w	8009ce0 <lv_obj_invalidate>
    if(ext->ymin == ymin && ext->ymax == ymax) return;
 8016bbc:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 8016bc0:	42aa      	cmp	r2, r5
 8016bc2:	d1f4      	bne.n	8016bae <lv_chart_set_range+0x16>
 8016bc4:	bd70      	pop	{r4, r5, r6, pc}
 8016bc6:	bf00      	nop

08016bc8 <lv_chart_set_type>:
{
 8016bc8:	b538      	push	{r3, r4, r5, lr}
 8016bca:	460c      	mov	r4, r1
 8016bcc:	4605      	mov	r5, r0
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 8016bce:	f7f5 f9a3 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->type == type) return;
 8016bd2:	7d03      	ldrb	r3, [r0, #20]
 8016bd4:	f003 010f 	and.w	r1, r3, #15
 8016bd8:	42a1      	cmp	r1, r4
 8016bda:	d008      	beq.n	8016bee <lv_chart_set_type+0x26>
 8016bdc:	4602      	mov	r2, r0
    ext->type = type;
 8016bde:	f364 0303 	bfi	r3, r4, #0, #4
    lv_obj_invalidate(chart);
 8016be2:	4628      	mov	r0, r5
    ext->type = type;
 8016be4:	7513      	strb	r3, [r2, #20]
}
 8016be6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(chart);
 8016bea:	f7f3 b879 	b.w	8009ce0 <lv_obj_invalidate>
 8016bee:	bd38      	pop	{r3, r4, r5, pc}

08016bf0 <lv_chart_set_series_opa>:
{
 8016bf0:	b538      	push	{r3, r4, r5, lr}
 8016bf2:	460c      	mov	r4, r1
 8016bf4:	4605      	mov	r5, r0
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 8016bf6:	f7f5 f98f 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->series.opa == opa) return;
 8016bfa:	7e43      	ldrb	r3, [r0, #25]
 8016bfc:	42a3      	cmp	r3, r4
 8016bfe:	d005      	beq.n	8016c0c <lv_chart_set_series_opa+0x1c>
    ext->series.opa = opa;
 8016c00:	7644      	strb	r4, [r0, #25]
    lv_obj_invalidate(chart);
 8016c02:	4628      	mov	r0, r5
}
 8016c04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(chart);
 8016c08:	f7f3 b86a 	b.w	8009ce0 <lv_obj_invalidate>
 8016c0c:	bd38      	pop	{r3, r4, r5, pc}
 8016c0e:	bf00      	nop

08016c10 <lv_chart_set_next>:
{
 8016c10:	b570      	push	{r4, r5, r6, lr}
 8016c12:	460c      	mov	r4, r1
 8016c14:	4616      	mov	r6, r2
 8016c16:	4605      	mov	r5, r0
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 8016c18:	f7f5 f97e 	bl	800bf18 <lv_obj_get_ext_attr>
    ser->points[ser->start_point] = y;  /*This was the place of the former left most value, after shifting it is the rightmost*/
 8016c1c:	8921      	ldrh	r1, [r4, #8]
 8016c1e:	6823      	ldr	r3, [r4, #0]
 8016c20:	f823 6011 	strh.w	r6, [r3, r1, lsl #1]
    ser->start_point = (ser->start_point + 1) % ext->point_cnt;
 8016c24:	8923      	ldrh	r3, [r4, #8]
 8016c26:	8a41      	ldrh	r1, [r0, #18]
    lv_obj_invalidate(chart);
 8016c28:	4628      	mov	r0, r5
    ser->start_point = (ser->start_point + 1) % ext->point_cnt;
 8016c2a:	3301      	adds	r3, #1
 8016c2c:	fb93 f2f1 	sdiv	r2, r3, r1
 8016c30:	fb01 3312 	mls	r3, r1, r2, r3
 8016c34:	8123      	strh	r3, [r4, #8]
}
 8016c36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_invalidate(chart);
 8016c3a:	f7f3 b851 	b.w	8009ce0 <lv_obj_invalidate>
 8016c3e:	bf00      	nop

08016c40 <lv_cont_refr_layout>:
/**
 * Refresh the layout of a container
 * @param cont pointer to an object which layout should be refreshed
 */
static void lv_cont_refr_layout(lv_obj_t * cont)
{
 8016c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c44:	b087      	sub	sp, #28
 8016c46:	4605      	mov	r5, r0
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8016c48:	f7f5 f966 	bl	800bf18 <lv_obj_get_ext_attr>
    return ext->layout;
 8016c4c:	7806      	ldrb	r6, [r0, #0]
    lv_layout_t type = lv_cont_get_layout(cont);

    /*'cont' has to be at least 1 child*/
    if(lv_obj_get_child(cont, NULL) == NULL) return;
 8016c4e:	2100      	movs	r1, #0
 8016c50:	4628      	mov	r0, r5
    return ext->layout;
 8016c52:	f006 060f 	and.w	r6, r6, #15
    if(lv_obj_get_child(cont, NULL) == NULL) return;
 8016c56:	f7f5 f8b7 	bl	800bdc8 <lv_obj_get_child>

    if(type == LV_LAYOUT_OFF) return;
 8016c5a:	b196      	cbz	r6, 8016c82 <lv_cont_refr_layout+0x42>
 8016c5c:	fab0 f480 	clz	r4, r0
 8016c60:	0964      	lsrs	r4, r4, #5
 8016c62:	b974      	cbnz	r4, 8016c82 <lv_cont_refr_layout+0x42>

    if(type == LV_LAYOUT_CENTER) {
 8016c64:	2e01      	cmp	r6, #1
 8016c66:	d07c      	beq.n	8016d62 <lv_cont_refr_layout+0x122>
        lv_cont_layout_center(cont);
    } else if(type == LV_LAYOUT_COL_L || type == LV_LAYOUT_COL_M || type == LV_LAYOUT_COL_R) {
 8016c68:	1eb3      	subs	r3, r6, #2
 8016c6a:	2b02      	cmp	r3, #2
 8016c6c:	f240 80a4 	bls.w	8016db8 <lv_cont_refr_layout+0x178>
        lv_cont_layout_col(cont);
    } else if(type == LV_LAYOUT_ROW_T || type == LV_LAYOUT_ROW_M || type == LV_LAYOUT_ROW_B) {
 8016c70:	1f73      	subs	r3, r6, #5
 8016c72:	2b02      	cmp	r3, #2
 8016c74:	f240 80e7 	bls.w	8016e46 <lv_cont_refr_layout+0x206>
        lv_cont_layout_row(cont);
    } else if(type == LV_LAYOUT_PRETTY) {
 8016c78:	2e08      	cmp	r6, #8
 8016c7a:	f000 81c4 	beq.w	8017006 <lv_cont_refr_layout+0x3c6>
        lv_cont_layout_pretty(cont);
    }  else if(type == LV_LAYOUT_GRID) {
 8016c7e:	2e09      	cmp	r6, #9
 8016c80:	d002      	beq.n	8016c88 <lv_cont_refr_layout+0x48>
        lv_cont_layout_grid(cont);
    }
}
 8016c82:	b007      	add	sp, #28
 8016c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 * @param cont pointer to an object which layout should be handled
 */
static void lv_cont_layout_grid(lv_obj_t * cont)
{
    lv_obj_t * child;
    lv_style_t * style = lv_obj_get_style(cont);
 8016c88:	4628      	mov	r0, r5
 8016c8a:	f7f5 f8c7 	bl	800be1c <lv_obj_get_style>
 8016c8e:	4681      	mov	r9, r0
    lv_coord_t w_tot = lv_obj_get_width(cont);
 8016c90:	4628      	mov	r0, r5
 8016c92:	f7f5 f8b7 	bl	800be04 <lv_obj_get_width>
    lv_coord_t w_obj = lv_obj_get_width(lv_obj_get_child(cont, NULL));
 8016c96:	4621      	mov	r1, r4
    lv_coord_t w_tot = lv_obj_get_width(cont);
 8016c98:	4607      	mov	r7, r0
    lv_coord_t w_obj = lv_obj_get_width(lv_obj_get_child(cont, NULL));
 8016c9a:	4628      	mov	r0, r5
 8016c9c:	f7f5 f894 	bl	800bdc8 <lv_obj_get_child>
 8016ca0:	f7f5 f8b0 	bl	800be04 <lv_obj_get_width>
    lv_coord_t h_obj = lv_obj_get_height(lv_obj_get_child(cont, NULL));
 8016ca4:	4621      	mov	r1, r4
    lv_coord_t w_obj = lv_obj_get_width(lv_obj_get_child(cont, NULL));
 8016ca6:	4606      	mov	r6, r0
    lv_coord_t h_obj = lv_obj_get_height(lv_obj_get_child(cont, NULL));
 8016ca8:	4628      	mov	r0, r5
 8016caa:	f7f5 f88d 	bl	800bdc8 <lv_obj_get_child>
 8016cae:	f7f5 f8af 	bl	800be10 <lv_obj_get_height>
    uint16_t obj_row = (w_tot - (2 * style->body.padding.hor)) / (w_obj + style->body.padding.inner); /*Obj. num. in a row*/
 8016cb2:	f9b9 2022 	ldrsh.w	r2, [r9, #34]	; 0x22
 8016cb6:	f9b9 1024 	ldrsh.w	r1, [r9, #36]	; 0x24
 8016cba:	eba7 0242 	sub.w	r2, r7, r2, lsl #1
 8016cbe:	198b      	adds	r3, r1, r6
 8016cc0:	fb92 f3f3 	sdiv	r3, r2, r3
 8016cc4:	fa1f fb83 	uxth.w	fp, r3
    lv_coord_t x_ofs;
    if(obj_row > 1) {
 8016cc8:	f1bb 0f01 	cmp.w	fp, #1
 8016ccc:	f240 810e 	bls.w	8016eec <lv_cont_refr_layout+0x2ac>
        x_ofs = w_obj + (w_tot - (2 * style->body.padding.hor) - (obj_row * w_obj)) / (obj_row - 1);
    } else {
        x_ofs = w_tot / 2 - w_obj / 2;
    }
    lv_coord_t y_ofs = h_obj + style->body.padding.inner;
 8016cd0:	eb00 0e01 	add.w	lr, r0, r1
        x_ofs = w_obj + (w_tot - (2 * style->body.padding.hor) - (obj_row * w_obj)) / (obj_row - 1);
 8016cd4:	fb0b 2216 	mls	r2, fp, r6, r2
 8016cd8:	f10b 3cff 	add.w	ip, fp, #4294967295

    /* Align the children */
    lv_coord_t act_x = style->body.padding.hor;
    lv_coord_t act_y = style->body.padding.ver;
    uint16_t obj_cnt = 0;
    LL_READ_BACK(cont->child_ll, child) {
 8016cdc:	1d2f      	adds	r7, r5, #4
    lv_coord_t y_ofs = h_obj + style->body.padding.inner;
 8016cde:	fa1f f38e 	uxth.w	r3, lr
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8016ce2:	2101      	movs	r1, #1
 8016ce4:	4628      	mov	r0, r5
    lv_coord_t y_ofs = h_obj + style->body.padding.inner;
 8016ce6:	9304      	str	r3, [sp, #16]
        x_ofs = w_obj + (w_tot - (2 * style->body.padding.hor) - (obj_row * w_obj)) / (obj_row - 1);
 8016ce8:	fb92 f3fc 	sdiv	r3, r2, ip
 8016cec:	441e      	add	r6, r3
 8016cee:	b2b3      	uxth	r3, r6
 8016cf0:	9303      	str	r3, [sp, #12]
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8016cf2:	f7f4 ff6d 	bl	800bbd0 <lv_obj_set_protect>
    LL_READ_BACK(cont->child_ll, child) {
 8016cf6:	4638      	mov	r0, r7
    lv_coord_t act_x = style->body.padding.hor;
 8016cf8:	f9b9 8022 	ldrsh.w	r8, [r9, #34]	; 0x22
    lv_coord_t act_y = style->body.padding.ver;
 8016cfc:	f9b9 a020 	ldrsh.w	sl, [r9, #32]
    LL_READ_BACK(cont->child_ll, child) {
 8016d00:	f7fc fa4a 	bl	8013198 <lv_ll_get_tail>
 8016d04:	4606      	mov	r6, r0
 8016d06:	2800      	cmp	r0, #0
 8016d08:	f000 812a 	beq.w	8016f60 <lv_cont_refr_layout+0x320>
 8016d0c:	9505      	str	r5, [sp, #20]
 8016d0e:	e007      	b.n	8016d20 <lv_cont_refr_layout+0xe0>
 8016d10:	4631      	mov	r1, r6
 8016d12:	4638      	mov	r0, r7
 8016d14:	f7fc fa4a 	bl	80131ac <lv_ll_get_prev>
 8016d18:	4606      	mov	r6, r0
 8016d1a:	2800      	cmp	r0, #0
 8016d1c:	f000 8171 	beq.w	8017002 <lv_cont_refr_layout+0x3c2>
        if(lv_obj_get_hidden(child) != false ||
 8016d20:	4630      	mov	r0, r6
 8016d22:	f7f5 f8bb 	bl	800be9c <lv_obj_get_hidden>
 8016d26:	2800      	cmp	r0, #0
 8016d28:	d1f2      	bne.n	8016d10 <lv_cont_refr_layout+0xd0>
                lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8016d2a:	2104      	movs	r1, #4
 8016d2c:	4630      	mov	r0, r6
 8016d2e:	f7f5 f8e7 	bl	800bf00 <lv_obj_is_protected>

        if(obj_row > 1) {
            lv_obj_set_pos(child, act_x, act_y);
 8016d32:	4641      	mov	r1, r8
        if(lv_obj_get_hidden(child) != false ||
 8016d34:	4605      	mov	r5, r0
            lv_obj_set_pos(child, act_x, act_y);
 8016d36:	4652      	mov	r2, sl
        if(lv_obj_get_hidden(child) != false ||
 8016d38:	2800      	cmp	r0, #0
 8016d3a:	d1e9      	bne.n	8016d10 <lv_cont_refr_layout+0xd0>
            act_x += x_ofs;
        } else {
            lv_obj_set_pos(child, x_ofs, act_y);
        }
        obj_cnt ++;
 8016d3c:	3401      	adds	r4, #1
            lv_obj_set_pos(child, act_x, act_y);
 8016d3e:	4630      	mov	r0, r6
 8016d40:	f7f3 fa10 	bl	800a164 <lv_obj_set_pos>
            act_x += x_ofs;
 8016d44:	9b03      	ldr	r3, [sp, #12]
        obj_cnt ++;
 8016d46:	b2a4      	uxth	r4, r4
            act_x += x_ofs;
 8016d48:	4498      	add	r8, r3

        if(obj_cnt >= obj_row) {
 8016d4a:	45a3      	cmp	fp, r4
            act_x += x_ofs;
 8016d4c:	fa0f f888 	sxth.w	r8, r8
        if(obj_cnt >= obj_row) {
 8016d50:	d8de      	bhi.n	8016d10 <lv_cont_refr_layout+0xd0>
            obj_cnt = 0;
            act_x = style->body.padding.hor;
            act_y += y_ofs;
 8016d52:	9b04      	ldr	r3, [sp, #16]
            obj_cnt = 0;
 8016d54:	462c      	mov	r4, r5
            act_x = style->body.padding.hor;
 8016d56:	f9b9 8022 	ldrsh.w	r8, [r9, #34]	; 0x22
            act_y += y_ofs;
 8016d5a:	449a      	add	sl, r3
 8016d5c:	fa0f fa8a 	sxth.w	sl, sl
 8016d60:	e7d6      	b.n	8016d10 <lv_cont_refr_layout+0xd0>
    LL_READ(cont->child_ll, child) {
 8016d62:	1d2f      	adds	r7, r5, #4
    lv_style_t * style = lv_obj_get_style(cont);
 8016d64:	4628      	mov	r0, r5
 8016d66:	f7f5 f859 	bl	800be1c <lv_obj_get_style>
 8016d6a:	4681      	mov	r9, r0
    LL_READ(cont->child_ll, child) {
 8016d6c:	4638      	mov	r0, r7
 8016d6e:	f7fc fa0f 	bl	8013190 <lv_ll_get_head>
 8016d72:	4606      	mov	r6, r0
 8016d74:	2800      	cmp	r0, #0
 8016d76:	d084      	beq.n	8016c82 <lv_cont_refr_layout+0x42>
 8016d78:	46a0      	mov	r8, r4
 8016d7a:	e007      	b.n	8016d8c <lv_cont_refr_layout+0x14c>
 8016d7c:	4631      	mov	r1, r6
 8016d7e:	4638      	mov	r0, r7
 8016d80:	f7fc fa0e 	bl	80131a0 <lv_ll_get_next>
 8016d84:	4606      	mov	r6, r0
 8016d86:	2800      	cmp	r0, #0
 8016d88:	f000 80f1 	beq.w	8016f6e <lv_cont_refr_layout+0x32e>
        if(lv_obj_get_hidden(child) != false ||
 8016d8c:	4630      	mov	r0, r6
 8016d8e:	f7f5 f885 	bl	800be9c <lv_obj_get_hidden>
 8016d92:	2800      	cmp	r0, #0
 8016d94:	d1f2      	bne.n	8016d7c <lv_cont_refr_layout+0x13c>
                lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8016d96:	2104      	movs	r1, #4
 8016d98:	4630      	mov	r0, r6
 8016d9a:	f7f5 f8b1 	bl	800bf00 <lv_obj_is_protected>
        if(lv_obj_get_hidden(child) != false ||
 8016d9e:	2800      	cmp	r0, #0
 8016da0:	d1ec      	bne.n	8016d7c <lv_cont_refr_layout+0x13c>
        h_tot += lv_obj_get_height(child) + style->body.padding.inner;
 8016da2:	4630      	mov	r0, r6
        obj_num ++;
 8016da4:	3401      	adds	r4, #1
        h_tot += lv_obj_get_height(child) + style->body.padding.inner;
 8016da6:	f7f5 f833 	bl	800be10 <lv_obj_get_height>
 8016daa:	f9b9 3024 	ldrsh.w	r3, [r9, #36]	; 0x24
 8016dae:	4403      	add	r3, r0
 8016db0:	4498      	add	r8, r3
 8016db2:	fa0f f888 	sxth.w	r8, r8
 8016db6:	e7e1      	b.n	8016d7c <lv_cont_refr_layout+0x13c>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8016db8:	4628      	mov	r0, r5
 8016dba:	f7f5 f8ad 	bl	800bf18 <lv_obj_get_ext_attr>
    return ext->layout;
 8016dbe:	7806      	ldrb	r6, [r0, #0]
    lv_style_t * style = lv_obj_get_style(cont);
 8016dc0:	4628      	mov	r0, r5
    return ext->layout;
 8016dc2:	f006 060f 	and.w	r6, r6, #15
    lv_style_t * style = lv_obj_get_style(cont);
 8016dc6:	f7f5 f829 	bl	800be1c <lv_obj_get_style>
 8016dca:	4681      	mov	r9, r0
    switch(type) {
 8016dcc:	2e03      	cmp	r6, #3
 8016dce:	f000 81ea 	beq.w	80171a6 <lv_cont_refr_layout+0x566>
 8016dd2:	2e04      	cmp	r6, #4
 8016dd4:	f000 81e1 	beq.w	801719a <lv_cont_refr_layout+0x55a>
 8016dd8:	2e02      	cmp	r6, #2
 8016dda:	f000 8082 	beq.w	8016ee2 <lv_cont_refr_layout+0x2a2>
            align = LV_ALIGN_IN_TOP_LEFT;
 8016dde:	f04f 0a01 	mov.w	sl, #1
    LL_READ_BACK(cont->child_ll, child) {
 8016de2:	1d2f      	adds	r7, r5, #4
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8016de4:	2101      	movs	r1, #1
 8016de6:	4628      	mov	r0, r5
 8016de8:	f7f4 fef2 	bl	800bbd0 <lv_obj_set_protect>
    LL_READ_BACK(cont->child_ll, child) {
 8016dec:	4638      	mov	r0, r7
    lv_coord_t last_cord = style->body.padding.ver;
 8016dee:	f9b9 8020 	ldrsh.w	r8, [r9, #32]
    LL_READ_BACK(cont->child_ll, child) {
 8016df2:	f7fc f9d1 	bl	8013198 <lv_ll_get_tail>
 8016df6:	4606      	mov	r6, r0
 8016df8:	b940      	cbnz	r0, 8016e0c <lv_cont_refr_layout+0x1cc>
 8016dfa:	e0b1      	b.n	8016f60 <lv_cont_refr_layout+0x320>
 8016dfc:	4631      	mov	r1, r6
 8016dfe:	4638      	mov	r0, r7
 8016e00:	f7fc f9d4 	bl	80131ac <lv_ll_get_prev>
 8016e04:	4606      	mov	r6, r0
 8016e06:	2800      	cmp	r0, #0
 8016e08:	f000 80aa 	beq.w	8016f60 <lv_cont_refr_layout+0x320>
        if(lv_obj_get_hidden(child) != false ||
 8016e0c:	4630      	mov	r0, r6
 8016e0e:	f7f5 f845 	bl	800be9c <lv_obj_get_hidden>
 8016e12:	2800      	cmp	r0, #0
 8016e14:	d1f2      	bne.n	8016dfc <lv_cont_refr_layout+0x1bc>
                lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8016e16:	2104      	movs	r1, #4
 8016e18:	4630      	mov	r0, r6
 8016e1a:	f7f5 f871 	bl	800bf00 <lv_obj_is_protected>
        if(lv_obj_get_hidden(child) != false ||
 8016e1e:	2800      	cmp	r0, #0
 8016e20:	d1ec      	bne.n	8016dfc <lv_cont_refr_layout+0x1bc>
        lv_obj_align(child, cont, align, hpad_corr, last_cord);
 8016e22:	4623      	mov	r3, r4
 8016e24:	f8cd 8000 	str.w	r8, [sp]
 8016e28:	4652      	mov	r2, sl
 8016e2a:	4629      	mov	r1, r5
 8016e2c:	4630      	mov	r0, r6
 8016e2e:	f7f3 fbb9 	bl	800a5a4 <lv_obj_align>
        last_cord += lv_obj_get_height(child) + style->body.padding.inner;
 8016e32:	4630      	mov	r0, r6
 8016e34:	f7f4 ffec 	bl	800be10 <lv_obj_get_height>
 8016e38:	f9b9 3024 	ldrsh.w	r3, [r9, #36]	; 0x24
 8016e3c:	4403      	add	r3, r0
 8016e3e:	4443      	add	r3, r8
 8016e40:	fa0f f883 	sxth.w	r8, r3
 8016e44:	e7da      	b.n	8016dfc <lv_cont_refr_layout+0x1bc>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8016e46:	4628      	mov	r0, r5
 8016e48:	f7f5 f866 	bl	800bf18 <lv_obj_get_ext_attr>
    return ext->layout;
 8016e4c:	7806      	ldrb	r6, [r0, #0]
    lv_style_t * style = lv_obj_get_style(cont);
 8016e4e:	4628      	mov	r0, r5
    return ext->layout;
 8016e50:	f006 060f 	and.w	r6, r6, #15
    lv_style_t * style = lv_obj_get_style(cont);
 8016e54:	f7f4 ffe2 	bl	800be1c <lv_obj_get_style>
 8016e58:	4681      	mov	r9, r0
    lv_coord_t vpad_corr = style->body.padding.ver;
 8016e5a:	f9b0 8020 	ldrsh.w	r8, [r0, #32]
    switch(type) {
 8016e5e:	2e06      	cmp	r6, #6
 8016e60:	f000 81a4 	beq.w	80171ac <lv_cont_refr_layout+0x56c>
 8016e64:	2e07      	cmp	r6, #7
 8016e66:	d035      	beq.n	8016ed4 <lv_cont_refr_layout+0x294>
            vpad_corr = 0;
 8016e68:	2e05      	cmp	r6, #5
 8016e6a:	f04f 0a01 	mov.w	sl, #1
 8016e6e:	bf18      	it	ne
 8016e70:	f04f 0800 	movne.w	r8, #0
    LL_READ_BACK(cont->child_ll, child) {
 8016e74:	1d2e      	adds	r6, r5, #4
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8016e76:	2101      	movs	r1, #1
 8016e78:	4628      	mov	r0, r5
 8016e7a:	f7f4 fea9 	bl	800bbd0 <lv_obj_set_protect>
    LL_READ_BACK(cont->child_ll, child) {
 8016e7e:	4630      	mov	r0, r6
    lv_coord_t last_cord = style->body.padding.hor;
 8016e80:	f9b9 7022 	ldrsh.w	r7, [r9, #34]	; 0x22
    LL_READ_BACK(cont->child_ll, child) {
 8016e84:	f7fc f988 	bl	8013198 <lv_ll_get_tail>
 8016e88:	4604      	mov	r4, r0
 8016e8a:	b938      	cbnz	r0, 8016e9c <lv_cont_refr_layout+0x25c>
 8016e8c:	e068      	b.n	8016f60 <lv_cont_refr_layout+0x320>
 8016e8e:	4621      	mov	r1, r4
 8016e90:	4630      	mov	r0, r6
 8016e92:	f7fc f98b 	bl	80131ac <lv_ll_get_prev>
 8016e96:	4604      	mov	r4, r0
 8016e98:	2800      	cmp	r0, #0
 8016e9a:	d061      	beq.n	8016f60 <lv_cont_refr_layout+0x320>
        if(lv_obj_get_hidden(child) != false ||
 8016e9c:	4620      	mov	r0, r4
 8016e9e:	f7f4 fffd 	bl	800be9c <lv_obj_get_hidden>
 8016ea2:	2800      	cmp	r0, #0
 8016ea4:	d1f3      	bne.n	8016e8e <lv_cont_refr_layout+0x24e>
                lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8016ea6:	2104      	movs	r1, #4
 8016ea8:	4620      	mov	r0, r4
 8016eaa:	f7f5 f829 	bl	800bf00 <lv_obj_is_protected>
        if(lv_obj_get_hidden(child) != false ||
 8016eae:	2800      	cmp	r0, #0
 8016eb0:	d1ed      	bne.n	8016e8e <lv_cont_refr_layout+0x24e>
        lv_obj_align(child, cont, align, last_cord, vpad_corr);
 8016eb2:	463b      	mov	r3, r7
 8016eb4:	4652      	mov	r2, sl
 8016eb6:	4629      	mov	r1, r5
 8016eb8:	4620      	mov	r0, r4
 8016eba:	f8cd 8000 	str.w	r8, [sp]
 8016ebe:	f7f3 fb71 	bl	800a5a4 <lv_obj_align>
        last_cord += lv_obj_get_width(child) + style->body.padding.inner;
 8016ec2:	4620      	mov	r0, r4
 8016ec4:	f7f4 ff9e 	bl	800be04 <lv_obj_get_width>
 8016ec8:	f9b9 3024 	ldrsh.w	r3, [r9, #36]	; 0x24
 8016ecc:	4403      	add	r3, r0
 8016ece:	443b      	add	r3, r7
 8016ed0:	b21f      	sxth	r7, r3
 8016ed2:	e7dc      	b.n	8016e8e <lv_cont_refr_layout+0x24e>
            vpad_corr = -style->body.padding.ver;
 8016ed4:	f1c8 0800 	rsb	r8, r8, #0
            align = LV_ALIGN_IN_BOTTOM_LEFT;
 8016ed8:	f04f 0a04 	mov.w	sl, #4
            vpad_corr = -style->body.padding.ver;
 8016edc:	fa0f f888 	sxth.w	r8, r8
 8016ee0:	e7c8      	b.n	8016e74 <lv_cont_refr_layout+0x234>
            hpad_corr = style->body.padding.hor;
 8016ee2:	f9b0 4022 	ldrsh.w	r4, [r0, #34]	; 0x22
            align = LV_ALIGN_IN_TOP_LEFT;
 8016ee6:	f04f 0a01 	mov.w	sl, #1
 8016eea:	e77a      	b.n	8016de2 <lv_cont_refr_layout+0x1a2>
        x_ofs = w_tot / 2 - w_obj / 2;
 8016eec:	2f00      	cmp	r7, #0
    lv_coord_t y_ofs = h_obj + style->body.padding.inner;
 8016eee:	eb00 0301 	add.w	r3, r0, r1
    LL_READ_BACK(cont->child_ll, child) {
 8016ef2:	f105 0804 	add.w	r8, r5, #4
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8016ef6:	f04f 0101 	mov.w	r1, #1
        x_ofs = w_tot / 2 - w_obj / 2;
 8016efa:	bfb8      	it	lt
 8016efc:	3701      	addlt	r7, #1
 8016efe:	2e00      	cmp	r6, #0
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8016f00:	4628      	mov	r0, r5
        x_ofs = w_tot / 2 - w_obj / 2;
 8016f02:	bfb8      	it	lt
 8016f04:	3601      	addlt	r6, #1
 8016f06:	107f      	asrs	r7, r7, #1
 8016f08:	eba7 0666 	sub.w	r6, r7, r6, asr #1
    lv_coord_t y_ofs = h_obj + style->body.padding.inner;
 8016f0c:	b29f      	uxth	r7, r3
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8016f0e:	f7f4 fe5f 	bl	800bbd0 <lv_obj_set_protect>
    LL_READ_BACK(cont->child_ll, child) {
 8016f12:	4640      	mov	r0, r8
    lv_coord_t act_y = style->body.padding.ver;
 8016f14:	f9b9 9020 	ldrsh.w	r9, [r9, #32]
        x_ofs = w_tot / 2 - w_obj / 2;
 8016f18:	b236      	sxth	r6, r6
    LL_READ_BACK(cont->child_ll, child) {
 8016f1a:	f7fc f93d 	bl	8013198 <lv_ll_get_tail>
 8016f1e:	4604      	mov	r4, r0
 8016f20:	b930      	cbnz	r0, 8016f30 <lv_cont_refr_layout+0x2f0>
 8016f22:	e01d      	b.n	8016f60 <lv_cont_refr_layout+0x320>
 8016f24:	4621      	mov	r1, r4
 8016f26:	4640      	mov	r0, r8
 8016f28:	f7fc f940 	bl	80131ac <lv_ll_get_prev>
 8016f2c:	4604      	mov	r4, r0
 8016f2e:	b1b8      	cbz	r0, 8016f60 <lv_cont_refr_layout+0x320>
        if(lv_obj_get_hidden(child) != false ||
 8016f30:	4620      	mov	r0, r4
 8016f32:	f7f4 ffb3 	bl	800be9c <lv_obj_get_hidden>
 8016f36:	2800      	cmp	r0, #0
 8016f38:	d1f4      	bne.n	8016f24 <lv_cont_refr_layout+0x2e4>
                lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8016f3a:	2104      	movs	r1, #4
 8016f3c:	4620      	mov	r0, r4
 8016f3e:	f7f4 ffdf 	bl	800bf00 <lv_obj_is_protected>
            lv_obj_set_pos(child, x_ofs, act_y);
 8016f42:	464a      	mov	r2, r9
 8016f44:	4631      	mov	r1, r6
        if(lv_obj_get_hidden(child) != false ||
 8016f46:	2800      	cmp	r0, #0
 8016f48:	d1ec      	bne.n	8016f24 <lv_cont_refr_layout+0x2e4>
            act_y += y_ofs;
 8016f4a:	44b9      	add	r9, r7
            lv_obj_set_pos(child, x_ofs, act_y);
 8016f4c:	4620      	mov	r0, r4
 8016f4e:	f7f3 f909 	bl	800a164 <lv_obj_set_pos>
            act_y += y_ofs;
 8016f52:	fa0f f989 	sxth.w	r9, r9
 8016f56:	e7e5      	b.n	8016f24 <lv_cont_refr_layout+0x2e4>
        } while(child_rc != NULL);
 8016f58:	4680      	mov	r8, r0
 8016f5a:	2800      	cmp	r0, #0
 8016f5c:	d172      	bne.n	8017044 <lv_cont_refr_layout+0x404>
 8016f5e:	9d04      	ldr	r5, [sp, #16]
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 8016f60:	4628      	mov	r0, r5
 8016f62:	2101      	movs	r1, #1
}
 8016f64:	b007      	add	sp, #28
 8016f66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 8016f6a:	f7f4 be37 	b.w	800bbdc <lv_obj_clear_protect>
    if(obj_num == 0) return;
 8016f6e:	2c00      	cmp	r4, #0
 8016f70:	f43f ae87 	beq.w	8016c82 <lv_cont_refr_layout+0x42>
    h_tot -= style->body.padding.inner;
 8016f74:	f8b9 3024 	ldrh.w	r3, [r9, #36]	; 0x24
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8016f78:	2101      	movs	r1, #1
 8016f7a:	4628      	mov	r0, r5
    h_tot -= style->body.padding.inner;
 8016f7c:	eba8 0303 	sub.w	r3, r8, r3
 8016f80:	b29c      	uxth	r4, r3
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8016f82:	f7f4 fe25 	bl	800bbd0 <lv_obj_set_protect>
    LL_READ_BACK(cont->child_ll, child) {
 8016f86:	4638      	mov	r0, r7
    lv_coord_t last_cord = - (h_tot / 2);
 8016f88:	b223      	sxth	r3, r4
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	bfb8      	it	lt
 8016f8e:	3301      	addlt	r3, #1
 8016f90:	105e      	asrs	r6, r3, #1
    LL_READ_BACK(cont->child_ll, child) {
 8016f92:	f7fc f901 	bl	8013198 <lv_ll_get_tail>
 8016f96:	4604      	mov	r4, r0
    lv_coord_t last_cord = - (h_tot / 2);
 8016f98:	4276      	negs	r6, r6
 8016f9a:	b236      	sxth	r6, r6
    LL_READ_BACK(cont->child_ll, child) {
 8016f9c:	b938      	cbnz	r0, 8016fae <lv_cont_refr_layout+0x36e>
 8016f9e:	e7df      	b.n	8016f60 <lv_cont_refr_layout+0x320>
 8016fa0:	4621      	mov	r1, r4
 8016fa2:	4638      	mov	r0, r7
 8016fa4:	f7fc f902 	bl	80131ac <lv_ll_get_prev>
 8016fa8:	4604      	mov	r4, r0
 8016faa:	2800      	cmp	r0, #0
 8016fac:	d0d8      	beq.n	8016f60 <lv_cont_refr_layout+0x320>
        if(lv_obj_get_hidden(child) != false ||
 8016fae:	4620      	mov	r0, r4
 8016fb0:	f7f4 ff74 	bl	800be9c <lv_obj_get_hidden>
 8016fb4:	2800      	cmp	r0, #0
 8016fb6:	d1f3      	bne.n	8016fa0 <lv_cont_refr_layout+0x360>
                lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8016fb8:	2104      	movs	r1, #4
 8016fba:	4620      	mov	r0, r4
 8016fbc:	f7f4 ffa0 	bl	800bf00 <lv_obj_is_protected>
        if(lv_obj_get_hidden(child) != false ||
 8016fc0:	2800      	cmp	r0, #0
 8016fc2:	d1ed      	bne.n	8016fa0 <lv_cont_refr_layout+0x360>
        lv_obj_align(child, cont, LV_ALIGN_CENTER, 0, last_cord + lv_obj_get_height(child) / 2);
 8016fc4:	4620      	mov	r0, r4
 8016fc6:	b2b6      	uxth	r6, r6
 8016fc8:	f7f4 ff22 	bl	800be10 <lv_obj_get_height>
 8016fcc:	f1b0 0e00 	subs.w	lr, r0, #0
 8016fd0:	f04f 0300 	mov.w	r3, #0
 8016fd4:	4629      	mov	r1, r5
 8016fd6:	bfb8      	it	lt
 8016fd8:	f10e 0e01 	addlt.w	lr, lr, #1
 8016fdc:	4620      	mov	r0, r4
 8016fde:	461a      	mov	r2, r3
 8016fe0:	eb06 0e6e 	add.w	lr, r6, lr, asr #1
 8016fe4:	fa0f fe8e 	sxth.w	lr, lr
 8016fe8:	f8cd e000 	str.w	lr, [sp]
 8016fec:	f7f3 fada 	bl	800a5a4 <lv_obj_align>
        last_cord += lv_obj_get_height(child) + style->body.padding.inner;
 8016ff0:	4620      	mov	r0, r4
 8016ff2:	f7f4 ff0d 	bl	800be10 <lv_obj_get_height>
 8016ff6:	f9b9 3024 	ldrsh.w	r3, [r9, #36]	; 0x24
 8016ffa:	4403      	add	r3, r0
 8016ffc:	441e      	add	r6, r3
 8016ffe:	b236      	sxth	r6, r6
 8017000:	e7ce      	b.n	8016fa0 <lv_cont_refr_layout+0x360>
 8017002:	9d05      	ldr	r5, [sp, #20]
 8017004:	e7ac      	b.n	8016f60 <lv_cont_refr_layout+0x320>
    lv_style_t * style = lv_obj_get_style(cont);
 8017006:	4628      	mov	r0, r5
    child_rs = lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
 8017008:	1d2f      	adds	r7, r5, #4
    lv_style_t * style = lv_obj_get_style(cont);
 801700a:	f7f4 ff07 	bl	800be1c <lv_obj_get_style>
 801700e:	4681      	mov	r9, r0
    lv_coord_t w_obj = lv_obj_get_width(cont);
 8017010:	4628      	mov	r0, r5
 8017012:	f7f4 fef7 	bl	800be04 <lv_obj_get_width>
    lv_coord_t act_y = style->body.padding.ver;
 8017016:	f9b9 3020 	ldrsh.w	r3, [r9, #32]
    lv_coord_t w_obj = lv_obj_get_width(cont);
 801701a:	4683      	mov	fp, r0
    child_rs = lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
 801701c:	4638      	mov	r0, r7
    lv_coord_t act_y = style->body.padding.ver;
 801701e:	9303      	str	r3, [sp, #12]
    child_rs = lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
 8017020:	f7fc f8ba 	bl	8013198 <lv_ll_get_tail>
    if(child_rs == NULL) return;    /*Return if no child*/
 8017024:	4604      	mov	r4, r0
 8017026:	2800      	cmp	r0, #0
 8017028:	f43f ae2b 	beq.w	8016c82 <lv_cont_refr_layout+0x42>
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 801702c:	2101      	movs	r1, #1
 801702e:	4628      	mov	r0, r5
 8017030:	f7f4 fdce 	bl	800bbd0 <lv_obj_set_protect>
 8017034:	9504      	str	r5, [sp, #16]
        lv_coord_t w_row = style->body.padding.hor * 2; /*The width is at least the left+right hpad*/
 8017036:	f8b9 5022 	ldrh.w	r5, [r9, #34]	; 0x22
        uint32_t obj_num = 0;
 801703a:	2600      	movs	r6, #0
        lv_coord_t w_row = style->body.padding.hor * 2; /*The width is at least the left+right hpad*/
 801703c:	46a0      	mov	r8, r4
 801703e:	006d      	lsls	r5, r5, #1
        lv_coord_t h_row = 0;
 8017040:	46b2      	mov	sl, r6
        lv_coord_t w_row = style->body.padding.hor * 2; /*The width is at least the left+right hpad*/
 8017042:	b22d      	sxth	r5, r5
            if(lv_obj_get_hidden(child_rc) == false &&
 8017044:	4620      	mov	r0, r4
 8017046:	f7f4 ff29 	bl	800be9c <lv_obj_get_hidden>
                    lv_obj_is_protected(child_rc, LV_PROTECT_POS) == false) {
 801704a:	2104      	movs	r1, #4
            if(lv_obj_get_hidden(child_rc) == false &&
 801704c:	b920      	cbnz	r0, 8017058 <lv_cont_refr_layout+0x418>
                    lv_obj_is_protected(child_rc, LV_PROTECT_POS) == false) {
 801704e:	4620      	mov	r0, r4
 8017050:	f7f4 ff56 	bl	800bf00 <lv_obj_is_protected>
            if(lv_obj_get_hidden(child_rc) == false &&
 8017054:	2800      	cmp	r0, #0
 8017056:	d04f      	beq.n	80170f8 <lv_cont_refr_layout+0x4b8>
            child_rc = lv_ll_get_prev(&cont->child_ll, child_rc); /*Load the next object*/
 8017058:	4621      	mov	r1, r4
 801705a:	4638      	mov	r0, r7
 801705c:	f7fc f8a6 	bl	80131ac <lv_ll_get_prev>
 8017060:	4604      	mov	r4, r0
            if(obj_num == 0) child_rs = child_rc; /*If the first object was hidden (or too long) then set the next as first */
 8017062:	2e00      	cmp	r6, #0
 8017064:	f43f af78 	beq.w	8016f58 <lv_cont_refr_layout+0x318>
        } while(child_rc != NULL);
 8017068:	2800      	cmp	r0, #0
 801706a:	d1eb      	bne.n	8017044 <lv_cont_refr_layout+0x404>
        else if(obj_num == 1) {
 801706c:	2e01      	cmp	r6, #1
 801706e:	f000 8081 	beq.w	8017174 <lv_cont_refr_layout+0x534>
        else if(obj_num == 2) {
 8017072:	2e02      	cmp	r6, #2
 8017074:	f000 809e 	beq.w	80171b4 <lv_cont_refr_layout+0x574>
            w_row -= style->body.padding.inner * obj_num;
 8017078:	f9b9 3024 	ldrsh.w	r3, [r9, #36]	; 0x24
            lv_coord_t new_opad = (w_obj -  w_row) / (obj_num  - 1);
 801707c:	1e72      	subs	r2, r6, #1
            w_row -= style->body.padding.inner * obj_num;
 801707e:	fb13 f306 	smulbb	r3, r3, r6
            lv_coord_t act_x = style->body.padding.hor; /*x init*/
 8017082:	f9b9 6022 	ldrsh.w	r6, [r9, #34]	; 0x22
            w_row -= style->body.padding.inner * obj_num;
 8017086:	1aed      	subs	r5, r5, r3
            lv_coord_t new_opad = (w_obj -  w_row) / (obj_num  - 1);
 8017088:	b22d      	sxth	r5, r5
 801708a:	ebab 0505 	sub.w	r5, fp, r5
 801708e:	fbb5 f5f2 	udiv	r5, r5, r2
 8017092:	b22d      	sxth	r5, r5
 8017094:	9505      	str	r5, [sp, #20]
 8017096:	e008      	b.n	80170aa <lv_cont_refr_layout+0x46a>
                if(child_tmp == child_rc) break;
 8017098:	45a0      	cmp	r8, r4
                child_tmp = lv_ll_get_prev(&cont->child_ll, child_tmp);
 801709a:	4641      	mov	r1, r8
 801709c:	4638      	mov	r0, r7
                if(child_tmp == child_rc) break;
 801709e:	d053      	beq.n	8017148 <lv_cont_refr_layout+0x508>
                child_tmp = lv_ll_get_prev(&cont->child_ll, child_tmp);
 80170a0:	f7fc f884 	bl	80131ac <lv_ll_get_prev>
            while(child_tmp != NULL) {
 80170a4:	4680      	mov	r8, r0
 80170a6:	2800      	cmp	r0, #0
 80170a8:	d06c      	beq.n	8017184 <lv_cont_refr_layout+0x544>
                if(lv_obj_get_hidden(child_tmp) == false &&
 80170aa:	4640      	mov	r0, r8
 80170ac:	f7f4 fef6 	bl	800be9c <lv_obj_get_hidden>
 80170b0:	2800      	cmp	r0, #0
 80170b2:	d1f1      	bne.n	8017098 <lv_cont_refr_layout+0x458>
                        lv_obj_is_protected(child_tmp, LV_PROTECT_POS) == false) {
 80170b4:	2104      	movs	r1, #4
 80170b6:	4640      	mov	r0, r8
 80170b8:	f7f4 ff22 	bl	800bf00 <lv_obj_is_protected>
                if(lv_obj_get_hidden(child_tmp) == false &&
 80170bc:	2800      	cmp	r0, #0
 80170be:	d1eb      	bne.n	8017098 <lv_cont_refr_layout+0x458>
                    lv_obj_align(child_tmp, cont, LV_ALIGN_IN_TOP_LEFT, act_x, act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
 80170c0:	4640      	mov	r0, r8
 80170c2:	f7f4 fea5 	bl	800be10 <lv_obj_get_height>
 80170c6:	2201      	movs	r2, #1
 80170c8:	ebba 0e00 	subs.w	lr, sl, r0
 80170cc:	9d03      	ldr	r5, [sp, #12]
 80170ce:	4633      	mov	r3, r6
 80170d0:	9904      	ldr	r1, [sp, #16]
 80170d2:	bf48      	it	mi
 80170d4:	4496      	addmi	lr, r2
 80170d6:	4640      	mov	r0, r8
 80170d8:	eb05 0e6e 	add.w	lr, r5, lr, asr #1
 80170dc:	fa0f fe8e 	sxth.w	lr, lr
 80170e0:	f8cd e000 	str.w	lr, [sp]
 80170e4:	f7f3 fa5e 	bl	800a5a4 <lv_obj_align>
                    act_x += lv_obj_get_width(child_tmp) + new_opad;
 80170e8:	4640      	mov	r0, r8
 80170ea:	f7f4 fe8b 	bl	800be04 <lv_obj_get_width>
 80170ee:	9b05      	ldr	r3, [sp, #20]
 80170f0:	4418      	add	r0, r3
 80170f2:	4406      	add	r6, r0
 80170f4:	b236      	sxth	r6, r6
 80170f6:	e7cf      	b.n	8017098 <lv_cont_refr_layout+0x458>
                if(w_row + lv_obj_get_width(child_rc) > w_obj) {
 80170f8:	4620      	mov	r0, r4
 80170fa:	f7f4 fe83 	bl	800be04 <lv_obj_get_width>
 80170fe:	182b      	adds	r3, r5, r0
                w_row += lv_obj_get_width(child_rc) + style->body.padding.inner; /*Add the object width + opad*/
 8017100:	4620      	mov	r0, r4
                if(w_row + lv_obj_get_width(child_rc) > w_obj) {
 8017102:	455b      	cmp	r3, fp
 8017104:	dc41      	bgt.n	801718a <lv_cont_refr_layout+0x54a>
                w_row += lv_obj_get_width(child_rc) + style->body.padding.inner; /*Add the object width + opad*/
 8017106:	f7f4 fe7d 	bl	800be04 <lv_obj_get_width>
 801710a:	f9b9 3024 	ldrsh.w	r3, [r9, #36]	; 0x24
                obj_num ++;
 801710e:	3601      	adds	r6, #1
                w_row += lv_obj_get_width(child_rc) + style->body.padding.inner; /*Add the object width + opad*/
 8017110:	4403      	add	r3, r0
                h_row = LV_MATH_MAX(h_row, lv_obj_get_height(child_rc)); /*Search the highest object*/
 8017112:	4620      	mov	r0, r4
                w_row += lv_obj_get_width(child_rc) + style->body.padding.inner; /*Add the object width + opad*/
 8017114:	441d      	add	r5, r3
                h_row = LV_MATH_MAX(h_row, lv_obj_get_height(child_rc)); /*Search the highest object*/
 8017116:	f7f4 fe7b 	bl	800be10 <lv_obj_get_height>
 801711a:	4550      	cmp	r0, sl
                w_row += lv_obj_get_width(child_rc) + style->body.padding.inner; /*Add the object width + opad*/
 801711c:	b22d      	sxth	r5, r5
                h_row = LV_MATH_MAX(h_row, lv_obj_get_height(child_rc)); /*Search the highest object*/
 801711e:	da24      	bge.n	801716a <lv_cont_refr_layout+0x52a>
                if(lv_obj_is_protected(child_rc, LV_PROTECT_FOLLOW)) break; /*If can not be followed by an other object then break here*/
 8017120:	2108      	movs	r1, #8
 8017122:	4620      	mov	r0, r4
 8017124:	f7f4 feec 	bl	800bf00 <lv_obj_is_protected>
 8017128:	2800      	cmp	r0, #0
 801712a:	d095      	beq.n	8017058 <lv_cont_refr_layout+0x418>
        if(obj_num == 0) {
 801712c:	2e00      	cmp	r6, #0
 801712e:	d19d      	bne.n	801706c <lv_cont_refr_layout+0x42c>
                lv_obj_align(child_rc, cont, LV_ALIGN_IN_TOP_MID, 0, act_y);
 8017130:	9b03      	ldr	r3, [sp, #12]
 8017132:	2202      	movs	r2, #2
 8017134:	9904      	ldr	r1, [sp, #16]
 8017136:	4620      	mov	r0, r4
 8017138:	9300      	str	r3, [sp, #0]
 801713a:	2300      	movs	r3, #0
 801713c:	f7f3 fa32 	bl	800a5a4 <lv_obj_align>
                h_row = lv_obj_get_height(child_rc);    /*Not set previously because of the early break*/
 8017140:	4620      	mov	r0, r4
 8017142:	f7f4 fe65 	bl	800be10 <lv_obj_get_height>
 8017146:	4682      	mov	sl, r0
        act_y += style->body.padding.inner + h_row; /*y increment*/
 8017148:	f8b9 3024 	ldrh.w	r3, [r9, #36]	; 0x24
        child_rs = lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
 801714c:	4621      	mov	r1, r4
        act_y += style->body.padding.inner + h_row; /*y increment*/
 801714e:	9a03      	ldr	r2, [sp, #12]
        child_rs = lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
 8017150:	4638      	mov	r0, r7
        act_y += style->body.padding.inner + h_row; /*y increment*/
 8017152:	441a      	add	r2, r3
 8017154:	4492      	add	sl, r2
 8017156:	fa0f f38a 	sxth.w	r3, sl
 801715a:	9303      	str	r3, [sp, #12]
        child_rs = lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
 801715c:	f7fc f826 	bl	80131ac <lv_ll_get_prev>
    while(child_rs != NULL) {
 8017160:	4604      	mov	r4, r0
 8017162:	2800      	cmp	r0, #0
 8017164:	f47f af67 	bne.w	8017036 <lv_cont_refr_layout+0x3f6>
 8017168:	e6f9      	b.n	8016f5e <lv_cont_refr_layout+0x31e>
                h_row = LV_MATH_MAX(h_row, lv_obj_get_height(child_rc)); /*Search the highest object*/
 801716a:	4620      	mov	r0, r4
 801716c:	f7f4 fe50 	bl	800be10 <lv_obj_get_height>
 8017170:	4682      	mov	sl, r0
 8017172:	e7d5      	b.n	8017120 <lv_cont_refr_layout+0x4e0>
            lv_obj_align(child_rs, cont, LV_ALIGN_IN_TOP_MID, 0, act_y);
 8017174:	9b03      	ldr	r3, [sp, #12]
 8017176:	4640      	mov	r0, r8
 8017178:	2202      	movs	r2, #2
 801717a:	9904      	ldr	r1, [sp, #16]
 801717c:	9300      	str	r3, [sp, #0]
 801717e:	2300      	movs	r3, #0
 8017180:	f7f3 fa10 	bl	800a5a4 <lv_obj_align>
        if(child_rc == NULL) break;
 8017184:	2c00      	cmp	r4, #0
 8017186:	d1df      	bne.n	8017148 <lv_cont_refr_layout+0x508>
 8017188:	e6e9      	b.n	8016f5e <lv_cont_refr_layout+0x31e>
                    if(child_rc != NULL  && obj_num != 0) {
 801718a:	2e00      	cmp	r6, #0
 801718c:	d0d0      	beq.n	8017130 <lv_cont_refr_layout+0x4f0>
                        child_rc = lv_ll_get_next(&cont->child_ll, child_rc);
 801718e:	4621      	mov	r1, r4
 8017190:	4638      	mov	r0, r7
 8017192:	f7fc f805 	bl	80131a0 <lv_ll_get_next>
 8017196:	4604      	mov	r4, r0
 8017198:	e768      	b.n	801706c <lv_cont_refr_layout+0x42c>
            hpad_corr = -style->body.padding.hor;
 801719a:	8c44      	ldrh	r4, [r0, #34]	; 0x22
            align = LV_ALIGN_IN_TOP_RIGHT;
 801719c:	f04f 0a03 	mov.w	sl, #3
            hpad_corr = -style->body.padding.hor;
 80171a0:	4264      	negs	r4, r4
 80171a2:	b224      	sxth	r4, r4
 80171a4:	e61d      	b.n	8016de2 <lv_cont_refr_layout+0x1a2>
            align = LV_ALIGN_IN_TOP_MID;
 80171a6:	f04f 0a02 	mov.w	sl, #2
 80171aa:	e61a      	b.n	8016de2 <lv_cont_refr_layout+0x1a2>
            vpad_corr = 0;
 80171ac:	46a0      	mov	r8, r4
            align = LV_ALIGN_IN_LEFT_MID;
 80171ae:	f04f 0a07 	mov.w	sl, #7
 80171b2:	e65f      	b.n	8016e74 <lv_cont_refr_layout+0x234>
            lv_obj_t * obj2 = lv_ll_get_prev(&cont->child_ll, child_rs);
 80171b4:	4641      	mov	r1, r8
 80171b6:	4638      	mov	r0, r7
 80171b8:	f7fb fff8 	bl	80131ac <lv_ll_get_prev>
 80171bc:	4605      	mov	r5, r0
            w_row = lv_obj_get_width(obj1) + lv_obj_get_width(obj2);
 80171be:	4640      	mov	r0, r8
 80171c0:	f7f4 fe20 	bl	800be04 <lv_obj_get_width>
 80171c4:	4606      	mov	r6, r0
 80171c6:	4628      	mov	r0, r5
 80171c8:	f7f4 fe1c 	bl	800be04 <lv_obj_get_width>
 80171cc:	4406      	add	r6, r0
            lv_obj_align(obj1, cont, LV_ALIGN_IN_TOP_LEFT, pad, act_y + (h_row - lv_obj_get_height(obj1)) / 2);
 80171ce:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80171d2:	4640      	mov	r0, r8
            lv_coord_t pad = (w_obj - w_row) / 3;
 80171d4:	b236      	sxth	r6, r6
            lv_obj_align(obj1, cont, LV_ALIGN_IN_TOP_LEFT, pad, act_y + (h_row - lv_obj_get_height(obj1)) / 2);
 80171d6:	9305      	str	r3, [sp, #20]
            lv_coord_t pad = (w_obj - w_row) / 3;
 80171d8:	ebab 0606 	sub.w	r6, fp, r6
 80171dc:	4b17      	ldr	r3, [pc, #92]	; (801723c <lv_cont_refr_layout+0x5fc>)
 80171de:	fb83 2306 	smull	r2, r3, r3, r6
 80171e2:	eba3 76e6 	sub.w	r6, r3, r6, asr #31
            lv_obj_align(obj1, cont, LV_ALIGN_IN_TOP_LEFT, pad, act_y + (h_row - lv_obj_get_height(obj1)) / 2);
 80171e6:	f7f4 fe13 	bl	800be10 <lv_obj_get_height>
 80171ea:	ebba 0000 	subs.w	r0, sl, r0
 80171ee:	9a05      	ldr	r2, [sp, #20]
 80171f0:	b233      	sxth	r3, r6
 80171f2:	bf48      	it	mi
 80171f4:	3001      	addmi	r0, #1
 80171f6:	9904      	ldr	r1, [sp, #16]
 80171f8:	eb02 0e60 	add.w	lr, r2, r0, asr #1
 80171fc:	2201      	movs	r2, #1
 80171fe:	4640      	mov	r0, r8
 8017200:	fa0f fe8e 	sxth.w	lr, lr
 8017204:	f8cd e000 	str.w	lr, [sp]
 8017208:	f7f3 f9cc 	bl	800a5a4 <lv_obj_align>
            lv_obj_align(obj2, cont, LV_ALIGN_IN_TOP_RIGHT, -pad, act_y + (h_row - lv_obj_get_height(obj2)) / 2);
 801720c:	4628      	mov	r0, r5
 801720e:	f7f4 fdff 	bl	800be10 <lv_obj_get_height>
 8017212:	ebba 0100 	subs.w	r1, sl, r0
 8017216:	9a05      	ldr	r2, [sp, #20]
 8017218:	f1c6 0300 	rsb	r3, r6, #0
 801721c:	bf48      	it	mi
 801721e:	3101      	addmi	r1, #1
 8017220:	4628      	mov	r0, r5
 8017222:	b21b      	sxth	r3, r3
 8017224:	eb02 0161 	add.w	r1, r2, r1, asr #1
 8017228:	2203      	movs	r2, #3
 801722a:	b20d      	sxth	r5, r1
 801722c:	9904      	ldr	r1, [sp, #16]
 801722e:	9500      	str	r5, [sp, #0]
 8017230:	f7f3 f9b8 	bl	800a5a4 <lv_obj_align>
        if(child_rc == NULL) break;
 8017234:	2c00      	cmp	r4, #0
 8017236:	d187      	bne.n	8017148 <lv_cont_refr_layout+0x508>
 8017238:	e691      	b.n	8016f5e <lv_cont_refr_layout+0x31e>
 801723a:	bf00      	nop
 801723c:	55555556 	.word	0x55555556

08017240 <lv_cont_refr_autofit>:
/**
 * Handle auto fit. Set the size of the object to involve all children.
 * @param cont pointer to an object which size will be modified
 */
static void lv_cont_refr_autofit(lv_obj_t * cont)
{
 8017240:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017244:	b085      	sub	sp, #20
 8017246:	4605      	mov	r5, r0
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8017248:	f7f4 fe66 	bl	800bf18 <lv_obj_get_ext_attr>

    if(ext->hor_fit == 0 &&
 801724c:	7803      	ldrb	r3, [r0, #0]
 801724e:	f013 0f30 	tst.w	r3, #48	; 0x30
 8017252:	d102      	bne.n	801725a <lv_cont_refr_autofit+0x1a>
            /*Inform the parent about the new coordinates*/
            lv_obj_t * par = lv_obj_get_parent(cont);
            par->signal_func(par, LV_SIGNAL_CHILD_CHG, cont);
        }
    }
}
 8017254:	b005      	add	sp, #20
 8017256:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801725a:	4607      	mov	r7, r0
    lv_style_t * style = lv_obj_get_style(cont);
 801725c:	4628      	mov	r0, r5
 801725e:	f7f4 fddd 	bl	800be1c <lv_obj_get_style>
 8017262:	4603      	mov	r3, r0
    lv_obj_get_coords(cont, &ori);
 8017264:	a902      	add	r1, sp, #8
 8017266:	4628      	mov	r0, r5
    lv_coord_t hpad = style->body.padding.hor;
 8017268:	f9b3 8022 	ldrsh.w	r8, [r3, #34]	; 0x22
    LL_READ(cont->child_ll, i) {
 801726c:	1d2e      	adds	r6, r5, #4
    lv_coord_t vpad = style->body.padding.ver;
 801726e:	f9b3 9020 	ldrsh.w	r9, [r3, #32]
    lv_obj_get_coords(cont, &ori);
 8017272:	f7f4 fdb5 	bl	800bde0 <lv_obj_get_coords>
    lv_obj_get_coords(cont, &new_cords);
 8017276:	4669      	mov	r1, sp
 8017278:	4628      	mov	r0, r5
 801727a:	f7f4 fdb1 	bl	800bde0 <lv_obj_get_coords>
    new_cords.x1 = LV_COORD_MAX;
 801727e:	f06f 22c0 	mvn.w	r2, #3221274624	; 0xc000c000
 8017282:	f04f 23c0 	mov.w	r3, #3221274624	; 0xc000c000
    LL_READ(cont->child_ll, i) {
 8017286:	4630      	mov	r0, r6
    new_cords.x1 = LV_COORD_MAX;
 8017288:	e88d 000c 	stmia.w	sp, {r2, r3}
    LL_READ(cont->child_ll, i) {
 801728c:	f7fb ff80 	bl	8013190 <lv_ll_get_head>
 8017290:	4604      	mov	r4, r0
 8017292:	b370      	cbz	r0, 80172f2 <lv_cont_refr_autofit+0xb2>
        if(lv_obj_get_hidden(i) != false) continue;
 8017294:	4620      	mov	r0, r4
 8017296:	f7f4 fe01 	bl	800be9c <lv_obj_get_hidden>
    LL_READ(cont->child_ll, i) {
 801729a:	4621      	mov	r1, r4
        if(lv_obj_get_hidden(i) != false) continue;
 801729c:	bb18      	cbnz	r0, 80172e6 <lv_cont_refr_autofit+0xa6>
        new_cords.x1 = LV_MATH_MIN(new_cords.x1, i->coords.x1);
 801729e:	f9b4 e010 	ldrsh.w	lr, [r4, #16]
 80172a2:	f9bd 3000 	ldrsh.w	r3, [sp]
        new_cords.y1 = LV_MATH_MIN(new_cords.y1, i->coords.y1);
 80172a6:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
        new_cords.x1 = LV_MATH_MIN(new_cords.x1, i->coords.x1);
 80172aa:	459e      	cmp	lr, r3
        new_cords.y1 = LV_MATH_MIN(new_cords.y1, i->coords.y1);
 80172ac:	f9bd c002 	ldrsh.w	ip, [sp, #2]
        new_cords.x2 = LV_MATH_MAX(new_cords.x2, i->coords.x2);
 80172b0:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
        new_cords.x1 = LV_MATH_MIN(new_cords.x1, i->coords.x1);
 80172b4:	bfa8      	it	ge
 80172b6:	469e      	movge	lr, r3
        new_cords.y2 = LV_MATH_MAX(new_cords.y2, i->coords.y2);
 80172b8:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
        new_cords.y1 = LV_MATH_MIN(new_cords.y1, i->coords.y1);
 80172bc:	4560      	cmp	r0, ip
        new_cords.x2 = LV_MATH_MAX(new_cords.x2, i->coords.x2);
 80172be:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
        new_cords.x1 = LV_MATH_MIN(new_cords.x1, i->coords.x1);
 80172c2:	f8ad e000 	strh.w	lr, [sp]
        new_cords.y1 = LV_MATH_MIN(new_cords.y1, i->coords.y1);
 80172c6:	bfa8      	it	ge
 80172c8:	4660      	movge	r0, ip
        new_cords.x2 = LV_MATH_MAX(new_cords.x2, i->coords.x2);
 80172ca:	42a2      	cmp	r2, r4
 80172cc:	bfb8      	it	lt
 80172ce:	4622      	movlt	r2, r4
        new_cords.y2 = LV_MATH_MAX(new_cords.y2, i->coords.y2);
 80172d0:	f9bd 4006 	ldrsh.w	r4, [sp, #6]
        new_cords.y1 = LV_MATH_MIN(new_cords.y1, i->coords.y1);
 80172d4:	f8ad 0002 	strh.w	r0, [sp, #2]
        new_cords.y2 = LV_MATH_MAX(new_cords.y2, i->coords.y2);
 80172d8:	42a3      	cmp	r3, r4
        new_cords.x2 = LV_MATH_MAX(new_cords.x2, i->coords.x2);
 80172da:	f8ad 2004 	strh.w	r2, [sp, #4]
        new_cords.y2 = LV_MATH_MAX(new_cords.y2, i->coords.y2);
 80172de:	bfb8      	it	lt
 80172e0:	4623      	movlt	r3, r4
 80172e2:	f8ad 3006 	strh.w	r3, [sp, #6]
    LL_READ(cont->child_ll, i) {
 80172e6:	4630      	mov	r0, r6
 80172e8:	f7fb ff5a 	bl	80131a0 <lv_ll_get_next>
 80172ec:	4604      	mov	r4, r0
 80172ee:	2800      	cmp	r0, #0
 80172f0:	d1d0      	bne.n	8017294 <lv_cont_refr_autofit+0x54>
    if(new_cords.x1 != LV_COORD_MAX) {
 80172f2:	f9bd 3000 	ldrsh.w	r3, [sp]
 80172f6:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80172fa:	4293      	cmp	r3, r2
 80172fc:	d0aa      	beq.n	8017254 <lv_cont_refr_autofit+0x14>
        if(ext->hor_fit != 0) {
 80172fe:	7839      	ldrb	r1, [r7, #0]
 8017300:	06c8      	lsls	r0, r1, #27
 8017302:	d439      	bmi.n	8017378 <lv_cont_refr_autofit+0x138>
            new_cords.x1 = cont->coords.x1;
 8017304:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
        if(ext->ver_fit != 0) {
 8017308:	0689      	lsls	r1, r1, #26
            new_cords.x2 = cont->coords.x2;
 801730a:	f9b5 2014 	ldrsh.w	r2, [r5, #20]
 801730e:	461c      	mov	r4, r3
 8017310:	f8ad 3000 	strh.w	r3, [sp]
 8017314:	f8ad 2004 	strh.w	r2, [sp, #4]
        if(ext->ver_fit != 0) {
 8017318:	d540      	bpl.n	801739c <lv_cont_refr_autofit+0x15c>
            new_cords.y1 -= vpad;
 801731a:	fa1f f989 	uxth.w	r9, r9
            new_cords.y2 += vpad;
 801731e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
            new_cords.y1 -= vpad;
 8017322:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8017326:	eba0 0009 	sub.w	r0, r0, r9
            new_cords.y2 += vpad;
 801732a:	4489      	add	r9, r1
            new_cords.y1 -= vpad;
 801732c:	b200      	sxth	r0, r0
            new_cords.y2 += vpad;
 801732e:	fa0f f189 	sxth.w	r1, r9
        if(cont->coords.x1 != new_cords.x1 ||
 8017332:	42a3      	cmp	r3, r4
 8017334:	f8ad 1006 	strh.w	r1, [sp, #6]
 8017338:	f8ad 0002 	strh.w	r0, [sp, #2]
 801733c:	d103      	bne.n	8017346 <lv_cont_refr_autofit+0x106>
 801733e:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
 8017342:	4283      	cmp	r3, r0
 8017344:	d02f      	beq.n	80173a6 <lv_cont_refr_autofit+0x166>
            lv_obj_invalidate(cont);
 8017346:	4628      	mov	r0, r5
 8017348:	f7f2 fcca 	bl	8009ce0 <lv_obj_invalidate>
 801734c:	466b      	mov	r3, sp
 801734e:	cb03      	ldmia	r3!, {r0, r1}
 8017350:	6128      	str	r0, [r5, #16]
            lv_obj_invalidate(cont);
 8017352:	4628      	mov	r0, r5
 8017354:	6169      	str	r1, [r5, #20]
 8017356:	f7f2 fcc3 	bl	8009ce0 <lv_obj_invalidate>
            cont->signal_func(cont, LV_SIGNAL_CORD_CHG, &ori);
 801735a:	aa02      	add	r2, sp, #8
 801735c:	69ab      	ldr	r3, [r5, #24]
 801735e:	2102      	movs	r1, #2
 8017360:	4628      	mov	r0, r5
 8017362:	4798      	blx	r3
            lv_obj_t * par = lv_obj_get_parent(cont);
 8017364:	4628      	mov	r0, r5
 8017366:	f7f4 fd2d 	bl	800bdc4 <lv_obj_get_parent>
            par->signal_func(par, LV_SIGNAL_CHILD_CHG, cont);
 801736a:	462a      	mov	r2, r5
 801736c:	6983      	ldr	r3, [r0, #24]
 801736e:	2101      	movs	r1, #1
 8017370:	4798      	blx	r3
}
 8017372:	b005      	add	sp, #20
 8017374:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            new_cords.x2 += hpad;
 8017378:	f8bd 2004 	ldrh.w	r2, [sp, #4]
            new_cords.x1 -= hpad;
 801737c:	fa1f f888 	uxth.w	r8, r8
        if(ext->ver_fit != 0) {
 8017380:	0689      	lsls	r1, r1, #26
 8017382:	f9b5 4010 	ldrsh.w	r4, [r5, #16]
            new_cords.x1 -= hpad;
 8017386:	eba3 0308 	sub.w	r3, r3, r8
            new_cords.x2 += hpad;
 801738a:	4490      	add	r8, r2
            new_cords.x1 -= hpad;
 801738c:	b21b      	sxth	r3, r3
            new_cords.x2 += hpad;
 801738e:	fa0f f288 	sxth.w	r2, r8
 8017392:	f8ad 3000 	strh.w	r3, [sp]
 8017396:	f8ad 2004 	strh.w	r2, [sp, #4]
        if(ext->ver_fit != 0) {
 801739a:	d4be      	bmi.n	801731a <lv_cont_refr_autofit+0xda>
            new_cords.y1 = cont->coords.y1;
 801739c:	f9b5 0012 	ldrsh.w	r0, [r5, #18]
            new_cords.y2 = cont->coords.y2;
 80173a0:	f9b5 1016 	ldrsh.w	r1, [r5, #22]
 80173a4:	e7c5      	b.n	8017332 <lv_cont_refr_autofit+0xf2>
                cont->coords.y1 != new_cords.y1 ||
 80173a6:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 80173aa:	4293      	cmp	r3, r2
 80173ac:	d1cb      	bne.n	8017346 <lv_cont_refr_autofit+0x106>
                cont->coords.x2 != new_cords.x2 ||
 80173ae:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
 80173b2:	428b      	cmp	r3, r1
 80173b4:	d1c7      	bne.n	8017346 <lv_cont_refr_autofit+0x106>
 80173b6:	e74d      	b.n	8017254 <lv_cont_refr_autofit+0x14>

080173b8 <lv_cont_signal>:
{
 80173b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    res = ancestor_signal(cont, sign, param);
 80173ba:	4b27      	ldr	r3, [pc, #156]	; (8017458 <lv_cont_signal+0xa0>)
{
 80173bc:	4607      	mov	r7, r0
 80173be:	460d      	mov	r5, r1
 80173c0:	4616      	mov	r6, r2
    res = ancestor_signal(cont, sign, param);
 80173c2:	681b      	ldr	r3, [r3, #0]
 80173c4:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 80173c6:	2801      	cmp	r0, #1
    res = ancestor_signal(cont, sign, param);
 80173c8:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
 80173ca:	d001      	beq.n	80173d0 <lv_cont_signal+0x18>
}
 80173cc:	4620      	mov	r0, r4
 80173ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if(sign == LV_SIGNAL_CHILD_CHG) {
 80173d0:	f005 03fd 	and.w	r3, r5, #253	; 0xfd
 80173d4:	2b01      	cmp	r3, #1
 80173d6:	d02d      	beq.n	8017434 <lv_cont_signal+0x7c>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 80173d8:	2d02      	cmp	r5, #2
 80173da:	d017      	beq.n	801740c <lv_cont_signal+0x54>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 80173dc:	2d06      	cmp	r5, #6
 80173de:	d1f5      	bne.n	80173cc <lv_cont_signal+0x14>
            if(buf->type[i] == NULL) break;
 80173e0:	6833      	ldr	r3, [r6, #0]
 80173e2:	b173      	cbz	r3, 8017402 <lv_cont_signal+0x4a>
 80173e4:	6873      	ldr	r3, [r6, #4]
 80173e6:	b36b      	cbz	r3, 8017444 <lv_cont_signal+0x8c>
 80173e8:	68b3      	ldr	r3, [r6, #8]
 80173ea:	b36b      	cbz	r3, 8017448 <lv_cont_signal+0x90>
 80173ec:	68f3      	ldr	r3, [r6, #12]
 80173ee:	b36b      	cbz	r3, 801744c <lv_cont_signal+0x94>
 80173f0:	6933      	ldr	r3, [r6, #16]
 80173f2:	b36b      	cbz	r3, 8017450 <lv_cont_signal+0x98>
 80173f4:	6973      	ldr	r3, [r6, #20]
 80173f6:	b36b      	cbz	r3, 8017454 <lv_cont_signal+0x9c>
 80173f8:	69b3      	ldr	r3, [r6, #24]
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	bf14      	ite	ne
 80173fe:	2307      	movne	r3, #7
 8017400:	2306      	moveq	r3, #6
        buf->type[i] = "lv_cont";
 8017402:	4a16      	ldr	r2, [pc, #88]	; (801745c <lv_cont_signal+0xa4>)
}
 8017404:	4620      	mov	r0, r4
        buf->type[i] = "lv_cont";
 8017406:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
}
 801740a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(lv_obj_get_width(cont) != lv_area_get_width(param) ||
 801740c:	4638      	mov	r0, r7
 801740e:	f7f4 fcf9 	bl	800be04 <lv_obj_get_width>
    return area_p->x2 - area_p->x1 + 1;
 8017412:	88b3      	ldrh	r3, [r6, #4]
 8017414:	8832      	ldrh	r2, [r6, #0]
 8017416:	3301      	adds	r3, #1
 8017418:	1a9b      	subs	r3, r3, r2
 801741a:	b21b      	sxth	r3, r3
 801741c:	4298      	cmp	r0, r3
 801741e:	d109      	bne.n	8017434 <lv_cont_signal+0x7c>
                lv_obj_get_height(cont) != lv_area_get_height(param)) {
 8017420:	4638      	mov	r0, r7
 8017422:	f7f4 fcf5 	bl	800be10 <lv_obj_get_height>
    return area_p->y2 - area_p->y1 + 1;
 8017426:	88f3      	ldrh	r3, [r6, #6]
 8017428:	8872      	ldrh	r2, [r6, #2]
 801742a:	3301      	adds	r3, #1
 801742c:	1a9b      	subs	r3, r3, r2
        if(lv_obj_get_width(cont) != lv_area_get_width(param) ||
 801742e:	b21b      	sxth	r3, r3
 8017430:	4298      	cmp	r0, r3
 8017432:	d0cb      	beq.n	80173cc <lv_cont_signal+0x14>
        lv_cont_refr_layout(cont);
 8017434:	4638      	mov	r0, r7
 8017436:	f7ff fc03 	bl	8016c40 <lv_cont_refr_layout>
        lv_cont_refr_autofit(cont);
 801743a:	4638      	mov	r0, r7
 801743c:	f7ff ff00 	bl	8017240 <lv_cont_refr_autofit>
}
 8017440:	4620      	mov	r0, r4
 8017442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(buf->type[i] == NULL) break;
 8017444:	4603      	mov	r3, r0
 8017446:	e7dc      	b.n	8017402 <lv_cont_signal+0x4a>
 8017448:	2302      	movs	r3, #2
 801744a:	e7da      	b.n	8017402 <lv_cont_signal+0x4a>
 801744c:	2303      	movs	r3, #3
 801744e:	e7d8      	b.n	8017402 <lv_cont_signal+0x4a>
 8017450:	2304      	movs	r3, #4
 8017452:	e7d6      	b.n	8017402 <lv_cont_signal+0x4a>
 8017454:	2305      	movs	r3, #5
 8017456:	e7d4      	b.n	8017402 <lv_cont_signal+0x4a>
 8017458:	20016620 	.word	0x20016620
 801745c:	080c7288 	.word	0x080c7288

08017460 <lv_cont_create>:
{
 8017460:	b570      	push	{r4, r5, r6, lr}
 8017462:	460e      	mov	r6, r1
    lv_obj_t * new_cont = lv_obj_create(par, copy);
 8017464:	f7f2 fec8 	bl	800a1f8 <lv_obj_create>
    lv_mem_assert(new_cont);
 8017468:	2800      	cmp	r0, #0
 801746a:	d035      	beq.n	80174d8 <lv_cont_create+0x78>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_cont);
 801746c:	4c26      	ldr	r4, [pc, #152]	; (8017508 <lv_cont_create+0xa8>)
 801746e:	4605      	mov	r5, r0
 8017470:	6823      	ldr	r3, [r4, #0]
 8017472:	2b00      	cmp	r3, #0
 8017474:	d040      	beq.n	80174f8 <lv_cont_create+0x98>
    lv_obj_allocate_ext_attr(new_cont, sizeof(lv_cont_ext_t));
 8017476:	2101      	movs	r1, #1
 8017478:	4628      	mov	r0, r5
 801747a:	f7f4 fbbb 	bl	800bbf4 <lv_obj_allocate_ext_attr>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(new_cont);
 801747e:	4628      	mov	r0, r5
 8017480:	f7f4 fd4a 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext == NULL) return NULL;
 8017484:	4604      	mov	r4, r0
 8017486:	2800      	cmp	r0, #0
 8017488:	d03a      	beq.n	8017500 <lv_cont_create+0xa0>
    ext->hor_fit = 0;
 801748a:	7803      	ldrb	r3, [r0, #0]
    lv_obj_set_signal_func(new_cont, lv_cont_signal);
 801748c:	4628      	mov	r0, r5
 801748e:	491f      	ldr	r1, [pc, #124]	; (801750c <lv_cont_create+0xac>)
    ext->layout = LV_LAYOUT_OFF;
 8017490:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
 8017494:	f36f 0303 	bfc	r3, #0, #4
 8017498:	7023      	strb	r3, [r4, #0]
    lv_obj_set_signal_func(new_cont, lv_cont_signal);
 801749a:	f7f4 fba7 	bl	800bbec <lv_obj_set_signal_func>
    if(copy == NULL) {
 801749e:	b1e6      	cbz	r6, 80174da <lv_cont_create+0x7a>
        lv_cont_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 80174a0:	4630      	mov	r0, r6
 80174a2:	f7f4 fd39 	bl	800bf18 <lv_obj_get_ext_attr>
 80174a6:	4603      	mov	r3, r0
        ext->hor_fit = copy_ext->hor_fit;
 80174a8:	7821      	ldrb	r1, [r4, #0]
        lv_obj_refresh_style(new_cont);
 80174aa:	4628      	mov	r0, r5
        ext->hor_fit = copy_ext->hor_fit;
 80174ac:	781a      	ldrb	r2, [r3, #0]
 80174ae:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80174b2:	f362 1104 	bfi	r1, r2, #4, #1
 80174b6:	7021      	strb	r1, [r4, #0]
        ext->ver_fit = copy_ext->ver_fit;
 80174b8:	b2c9      	uxtb	r1, r1
 80174ba:	781a      	ldrb	r2, [r3, #0]
 80174bc:	f3c2 1240 	ubfx	r2, r2, #5, #1
 80174c0:	f362 1145 	bfi	r1, r2, #5, #1
 80174c4:	7021      	strb	r1, [r4, #0]
        ext->layout = copy_ext->layout;
 80174c6:	781a      	ldrb	r2, [r3, #0]
 80174c8:	b2cb      	uxtb	r3, r1
 80174ca:	f362 0303 	bfi	r3, r2, #0, #4
 80174ce:	7023      	strb	r3, [r4, #0]
        lv_obj_refresh_style(new_cont);
 80174d0:	f7f4 fa4e 	bl	800b970 <lv_obj_refresh_style>
}
 80174d4:	4628      	mov	r0, r5
 80174d6:	bd70      	pop	{r4, r5, r6, pc}
 80174d8:	e7fe      	b.n	80174d8 <lv_cont_create+0x78>
        lv_theme_t * th = lv_theme_get_current();
 80174da:	f006 fa25 	bl	801d928 <lv_theme_get_current>
        if(th) {
 80174de:	b128      	cbz	r0, 80174ec <lv_cont_create+0x8c>
 * @param cont pointer to a container object
 * @param style pointer to the new style
 */
static inline void lv_cont_set_style(lv_obj_t *cont, lv_style_t * style)
{
    lv_obj_set_style(cont, style);
 80174e0:	6881      	ldr	r1, [r0, #8]
 80174e2:	4628      	mov	r0, r5
 80174e4:	f7f3 fe36 	bl	800b154 <lv_obj_set_style>
}
 80174e8:	4628      	mov	r0, r5
 80174ea:	bd70      	pop	{r4, r5, r6, pc}
 80174ec:	4628      	mov	r0, r5
 80174ee:	4908      	ldr	r1, [pc, #32]	; (8017510 <lv_cont_create+0xb0>)
 80174f0:	f7f3 fe30 	bl	800b154 <lv_obj_set_style>
 80174f4:	4628      	mov	r0, r5
 80174f6:	bd70      	pop	{r4, r5, r6, pc}
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_cont);
 80174f8:	f7f4 fd0a 	bl	800bf10 <lv_obj_get_signal_func>
 80174fc:	6020      	str	r0, [r4, #0]
 80174fe:	e7ba      	b.n	8017476 <lv_cont_create+0x16>
    if(ext == NULL) return NULL;
 8017500:	4605      	mov	r5, r0
}
 8017502:	4628      	mov	r0, r5
 8017504:	bd70      	pop	{r4, r5, r6, pc}
 8017506:	bf00      	nop
 8017508:	20016620 	.word	0x20016620
 801750c:	080173b9 	.word	0x080173b9
 8017510:	2001921c 	.word	0x2001921c

08017514 <lv_cont_set_layout>:
{
 8017514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017518:	460d      	mov	r5, r1
 801751a:	4606      	mov	r6, r0
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 801751c:	f7f4 fcfc 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->layout == layout) return;
 8017520:	7803      	ldrb	r3, [r0, #0]
 8017522:	f003 020f 	and.w	r2, r3, #15
 8017526:	42aa      	cmp	r2, r5
 8017528:	d00b      	beq.n	8017542 <lv_cont_set_layout+0x2e>
 801752a:	4604      	mov	r4, r0
    cont->signal_func(cont, LV_SIGNAL_CHILD_CHG, NULL);
 801752c:	69b7      	ldr	r7, [r6, #24]
    ext->layout = layout;
 801752e:	f365 0303 	bfi	r3, r5, #0, #4
    cont->signal_func(cont, LV_SIGNAL_CHILD_CHG, NULL);
 8017532:	4630      	mov	r0, r6
 8017534:	2200      	movs	r2, #0
 8017536:	2101      	movs	r1, #1
    ext->layout = layout;
 8017538:	7023      	strb	r3, [r4, #0]
    cont->signal_func(cont, LV_SIGNAL_CHILD_CHG, NULL);
 801753a:	463b      	mov	r3, r7
}
 801753c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cont->signal_func(cont, LV_SIGNAL_CHILD_CHG, NULL);
 8017540:	4718      	bx	r3
 8017542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017546:	bf00      	nop

08017548 <lv_cont_set_fit>:
{
 8017548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801754c:	4605      	mov	r5, r0
 801754e:	460e      	mov	r6, r1
 8017550:	4617      	mov	r7, r2
    lv_obj_invalidate(cont);
 8017552:	f7f2 fbc5 	bl	8009ce0 <lv_obj_invalidate>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8017556:	4628      	mov	r0, r5
 8017558:	f7f4 fcde 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->hor_fit == hor_en && ext->ver_fit == ver_en) return;
 801755c:	7803      	ldrb	r3, [r0, #0]
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 801755e:	4604      	mov	r4, r0
    if(ext->hor_fit == hor_en && ext->ver_fit == ver_en) return;
 8017560:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8017564:	42b2      	cmp	r2, r6
 8017566:	d00d      	beq.n	8017584 <lv_cont_set_fit+0x3c>
    ext->hor_fit = hor_en == false ? 0 : 1;
 8017568:	7823      	ldrb	r3, [r4, #0]
    cont->signal_func(cont, LV_SIGNAL_CHILD_CHG, NULL);
 801756a:	4628      	mov	r0, r5
 801756c:	69ad      	ldr	r5, [r5, #24]
 801756e:	2200      	movs	r2, #0
    ext->hor_fit = hor_en == false ? 0 : 1;
 8017570:	f366 1304 	bfi	r3, r6, #4, #1
    cont->signal_func(cont, LV_SIGNAL_CHILD_CHG, NULL);
 8017574:	2101      	movs	r1, #1
    ext->ver_fit = ver_en == false ? 0 : 1;
 8017576:	f367 1345 	bfi	r3, r7, #5, #1
 801757a:	7023      	strb	r3, [r4, #0]
    cont->signal_func(cont, LV_SIGNAL_CHILD_CHG, NULL);
 801757c:	462b      	mov	r3, r5
}
 801757e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cont->signal_func(cont, LV_SIGNAL_CHILD_CHG, NULL);
 8017582:	4718      	bx	r3
    if(ext->hor_fit == hor_en && ext->ver_fit == ver_en) return;
 8017584:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8017588:	42bb      	cmp	r3, r7
 801758a:	d1ed      	bne.n	8017568 <lv_cont_set_fit+0x20>
 801758c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017590 <lv_cont_get_hor_fit>:
{
 8017590:	b508      	push	{r3, lr}
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8017592:	f7f4 fcc1 	bl	800bf18 <lv_obj_get_ext_attr>
    return ext->hor_fit == 0 ? false : true;
 8017596:	7800      	ldrb	r0, [r0, #0]
}
 8017598:	f3c0 1000 	ubfx	r0, r0, #4, #1
 801759c:	bd08      	pop	{r3, pc}
 801759e:	bf00      	nop

080175a0 <lv_img_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_img_design(lv_obj_t * img, const lv_area_t * mask, lv_design_mode_t mode)
{
 80175a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80175a4:	4680      	mov	r8, r0
 80175a6:	4691      	mov	r9, r2
 80175a8:	b099      	sub	sp, #100	; 0x64
 80175aa:	460d      	mov	r5, r1
    lv_style_t * style = lv_obj_get_style(img);
 80175ac:	f7f4 fc36 	bl	800be1c <lv_obj_get_style>
 80175b0:	4606      	mov	r6, r0
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 80175b2:	4640      	mov	r0, r8
 80175b4:	f7f4 fcb0 	bl	800bf18 <lv_obj_get_ext_attr>

    if(mode == LV_DESIGN_COVER_CHK) {
 80175b8:	f1b9 0f02 	cmp.w	r9, #2
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 80175bc:	4604      	mov	r4, r0
    if(mode == LV_DESIGN_COVER_CHK) {
 80175be:	d00c      	beq.n	80175da <lv_img_design+0x3a>
        if(ext->src_type == LV_IMG_SRC_UNKNOWN || ext->src_type == LV_IMG_SRC_SYMBOL) return false;

        if(ext->cf == LV_IMG_CF_TRUE_COLOR || ext->cf == LV_IMG_CF_RAW) cover = lv_area_is_in(mask, &img->coords);

        return cover;
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 80175c0:	f1b9 0f00 	cmp.w	r9, #0
 80175c4:	d105      	bne.n	80175d2 <lv_img_design+0x32>
        if(ext->h == 0 || ext->w == 0) return true;
 80175c6:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80175ca:	b113      	cbz	r3, 80175d2 <lv_img_design+0x32>
 80175cc:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80175d0:	b9c3      	cbnz	r3, 8017604 <lv_img_design+0x64>
            LV_LOG_WARN("lv_img_design: image source type is unknown");
            lv_draw_img(&img->coords, mask, NULL, style, opa_scale);
        }
    }

    return true;
 80175d2:	2001      	movs	r0, #1
}
 80175d4:	b019      	add	sp, #100	; 0x64
 80175d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if(ext->src_type == LV_IMG_SRC_UNKNOWN || ext->src_type == LV_IMG_SRC_SYMBOL) return false;
 80175da:	7a00      	ldrb	r0, [r0, #8]
 80175dc:	f000 0303 	and.w	r3, r0, #3
 80175e0:	3b02      	subs	r3, #2
 80175e2:	2b01      	cmp	r3, #1
 80175e4:	d926      	bls.n	8017634 <lv_img_design+0x94>
        if(ext->cf == LV_IMG_CF_TRUE_COLOR || ext->cf == LV_IMG_CF_RAW) cover = lv_area_is_in(mask, &img->coords);
 80175e6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80175ea:	2808      	cmp	r0, #8
 80175ec:	bf18      	it	ne
 80175ee:	2820      	cmpne	r0, #32
 80175f0:	bf0c      	ite	eq
 80175f2:	2001      	moveq	r0, #1
 80175f4:	2000      	movne	r0, #0
 80175f6:	d1ed      	bne.n	80175d4 <lv_img_design+0x34>
 80175f8:	f108 0110 	add.w	r1, r8, #16
 80175fc:	4628      	mov	r0, r5
 80175fe:	f7fb faeb 	bl	8012bd8 <lv_area_is_in>
 8017602:	e7e7      	b.n	80175d4 <lv_img_design+0x34>
        lv_opa_t opa_scale = lv_obj_get_opa_scale(img);
 8017604:	4640      	mov	r0, r8
 8017606:	f7f4 fc67 	bl	800bed8 <lv_obj_get_opa_scale>
        lv_obj_get_coords(img, &coords);
 801760a:	a904      	add	r1, sp, #16
        lv_opa_t opa_scale = lv_obj_get_opa_scale(img);
 801760c:	4607      	mov	r7, r0
        lv_obj_get_coords(img, &coords);
 801760e:	4640      	mov	r0, r8
 8017610:	f7f4 fbe6 	bl	800bde0 <lv_obj_get_coords>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_VARIABLE) {
 8017614:	7a23      	ldrb	r3, [r4, #8]
 8017616:	f003 0303 	and.w	r3, r3, #3
 801761a:	2b01      	cmp	r3, #1
 801761c:	d90c      	bls.n	8017638 <lv_img_design+0x98>
        } else if(ext->src_type == LV_IMG_SRC_SYMBOL) {
 801761e:	2b02      	cmp	r3, #2
 8017620:	d058      	beq.n	80176d4 <lv_img_design+0x134>
            lv_draw_img(&img->coords, mask, NULL, style, opa_scale);
 8017622:	9700      	str	r7, [sp, #0]
 8017624:	4633      	mov	r3, r6
 8017626:	464a      	mov	r2, r9
 8017628:	4629      	mov	r1, r5
 801762a:	f108 0010 	add.w	r0, r8, #16
 801762e:	f7f6 f80f 	bl	800d650 <lv_draw_img>
 8017632:	e7ce      	b.n	80175d2 <lv_img_design+0x32>
        if(ext->src_type == LV_IMG_SRC_UNKNOWN || ext->src_type == LV_IMG_SRC_SYMBOL) return false;
 8017634:	2000      	movs	r0, #0
 8017636:	e7cd      	b.n	80175d4 <lv_img_design+0x34>
            cords_tmp.y1 = coords.y1;
 8017638:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
            cords_tmp.y2 = coords.y1 + ext->h - 1;
 801763c:	f9b4 9006 	ldrsh.w	r9, [r4, #6]
 8017640:	1e5a      	subs	r2, r3, #1
            for(; cords_tmp.y1 < coords.y2; cords_tmp.y1 += ext->h, cords_tmp.y2 += ext->h) {
 8017642:	f9bd 8016 	ldrsh.w	r8, [sp, #22]
            cords_tmp.y1 = coords.y1;
 8017646:	f8ad 301a 	strh.w	r3, [sp, #26]
            cords_tmp.y2 = coords.y1 + ext->h - 1;
 801764a:	444a      	add	r2, r9
            for(; cords_tmp.y1 < coords.y2; cords_tmp.y1 += ext->h, cords_tmp.y2 += ext->h) {
 801764c:	4543      	cmp	r3, r8
            cords_tmp.y2 = coords.y1 + ext->h - 1;
 801764e:	fa0f fe82 	sxth.w	lr, r2
 8017652:	f8ad e01e 	strh.w	lr, [sp, #30]
            for(; cords_tmp.y1 < coords.y2; cords_tmp.y1 += ext->h, cords_tmp.y2 += ext->h) {
 8017656:	dabc      	bge.n	80175d2 <lv_img_design+0x32>
 8017658:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801765c:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
                cords_tmp.x1 = coords.x1;
 8017660:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
                cords_tmp.x2 = coords.x1 + ext->w - 1;
 8017664:	f102 3cff 	add.w	ip, r2, #4294967295
                for(; cords_tmp.x1 < coords.x2; cords_tmp.x1 += ext->w, cords_tmp.x2 += ext->w) {
 8017668:	428a      	cmp	r2, r1
                cords_tmp.x1 = coords.x1;
 801766a:	f8ad 2018 	strh.w	r2, [sp, #24]
                cords_tmp.x2 = coords.x1 + ext->w - 1;
 801766e:	4484      	add	ip, r0
 8017670:	f8ad c01c 	strh.w	ip, [sp, #28]
                for(; cords_tmp.x1 < coords.x2; cords_tmp.x1 += ext->w, cords_tmp.x2 += ext->w) {
 8017674:	da20      	bge.n	80176b8 <lv_img_design+0x118>
                    lv_draw_img(&cords_tmp, mask, ext->src, style, opa_scale);
 8017676:	6822      	ldr	r2, [r4, #0]
 8017678:	4633      	mov	r3, r6
 801767a:	4629      	mov	r1, r5
 801767c:	a806      	add	r0, sp, #24
 801767e:	9700      	str	r7, [sp, #0]
 8017680:	f7f5 ffe6 	bl	800d650 <lv_draw_img>
                for(; cords_tmp.x1 < coords.x2; cords_tmp.x1 += ext->w, cords_tmp.x2 += ext->w) {
 8017684:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8017688:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801768c:	b282      	uxth	r2, r0
 801768e:	f8bd e01c 	ldrh.w	lr, [sp, #28]
 8017692:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
 8017696:	4413      	add	r3, r2
 8017698:	4472      	add	r2, lr
 801769a:	b21b      	sxth	r3, r3
 801769c:	f8ad 201c 	strh.w	r2, [sp, #28]
 80176a0:	4299      	cmp	r1, r3
 80176a2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80176a6:	dce6      	bgt.n	8017676 <lv_img_design+0xd6>
 80176a8:	f9bd 8016 	ldrsh.w	r8, [sp, #22]
 80176ac:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80176b0:	f9b4 9006 	ldrsh.w	r9, [r4, #6]
 80176b4:	f9bd e01e 	ldrsh.w	lr, [sp, #30]
            for(; cords_tmp.y1 < coords.y2; cords_tmp.y1 += ext->h, cords_tmp.y2 += ext->h) {
 80176b8:	fa1f f289 	uxth.w	r2, r9
 80176bc:	4413      	add	r3, r2
 80176be:	4472      	add	r2, lr
 80176c0:	b21b      	sxth	r3, r3
 80176c2:	fa0f fe82 	sxth.w	lr, r2
 80176c6:	4543      	cmp	r3, r8
 80176c8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80176cc:	f8ad e01e 	strh.w	lr, [sp, #30]
 80176d0:	dbc6      	blt.n	8017660 <lv_img_design+0xc0>
 80176d2:	e77e      	b.n	80175d2 <lv_img_design+0x32>
            lv_style_copy(&style_mod, style);
 80176d4:	4631      	mov	r1, r6
 80176d6:	a806      	add	r0, sp, #24
 80176d8:	f7f5 f91c 	bl	800c914 <lv_style_copy>
            style_mod.text.color = style->image.color;
 80176dc:	6bb6      	ldr	r6, [r6, #56]	; 0x38
            lv_draw_label(&coords, mask, &style_mod, opa_scale, ext->src, LV_TXT_FLAG_NONE, NULL);
 80176de:	f8cd 9008 	str.w	r9, [sp, #8]
 80176e2:	aa06      	add	r2, sp, #24
 80176e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80176e8:	463b      	mov	r3, r7
 80176ea:	6824      	ldr	r4, [r4, #0]
 80176ec:	4629      	mov	r1, r5
 80176ee:	a804      	add	r0, sp, #16
            style_mod.text.color = style->image.color;
 80176f0:	9610      	str	r6, [sp, #64]	; 0x40
            lv_draw_label(&coords, mask, &style_mod, opa_scale, ext->src, LV_TXT_FLAG_NONE, NULL);
 80176f2:	9400      	str	r4, [sp, #0]
 80176f4:	f7f6 f98c 	bl	800da10 <lv_draw_label>
 80176f8:	e76b      	b.n	80175d2 <lv_img_design+0x32>
 80176fa:	bf00      	nop

080176fc <lv_img_set_src>:
{
 80176fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017700:	4606      	mov	r6, r0
 8017702:	b086      	sub	sp, #24
    lv_img_src_t src_type = lv_img_src_get_type(src_img);
 8017704:	4608      	mov	r0, r1
{
 8017706:	460d      	mov	r5, r1
    lv_img_src_t src_type = lv_img_src_get_type(src_img);
 8017708:	f7f6 f972 	bl	800d9f0 <lv_img_src_get_type>
 801770c:	4607      	mov	r7, r0
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 801770e:	4630      	mov	r0, r6
 8017710:	f7f4 fc02 	bl	800bf18 <lv_obj_get_ext_attr>
    if(src_type == LV_IMG_SRC_UNKNOWN) {
 8017714:	2f03      	cmp	r7, #3
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 8017716:	4604      	mov	r4, r0
    if(src_type == LV_IMG_SRC_UNKNOWN) {
 8017718:	d035      	beq.n	8017786 <lv_img_set_src+0x8a>
    lv_img_dsc_get_info(src_img, &header);
 801771a:	a904      	add	r1, sp, #16
 801771c:	4628      	mov	r0, r5
 801771e:	f7f5 ff2d 	bl	800d57c <lv_img_dsc_get_info>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8017722:	bb27      	cbnz	r7, 801776e <lv_img_set_src+0x72>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 8017724:	7a23      	ldrb	r3, [r4, #8]
 8017726:	f003 0303 	and.w	r3, r3, #3
 801772a:	3b01      	subs	r3, #1
 801772c:	2b01      	cmp	r3, #1
 801772e:	f240 8085 	bls.w	801783c <lv_img_set_src+0x140>
 8017732:	9904      	ldr	r1, [sp, #16]
 8017734:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8017738:	f3c1 218a 	ubfx	r1, r1, #10, #11
        ext->src = src_img;
 801773c:	6025      	str	r5, [r4, #0]
 801773e:	f3c2 124a 	ubfx	r2, r2, #5, #11
    ext->src_type = src_type;
 8017742:	7a23      	ldrb	r3, [r4, #8]
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 8017744:	4630      	mov	r0, r6
    ext->w = header.w;
 8017746:	80a1      	strh	r1, [r4, #4]
    ext->src_type = src_type;
 8017748:	f367 0301 	bfi	r3, r7, #0, #2
    ext->cf = header.cf;
 801774c:	f89d 1010 	ldrb.w	r1, [sp, #16]
    ext->h = header.h;
 8017750:	80e2      	strh	r2, [r4, #6]
    ext->cf = header.cf;
 8017752:	f361 03c7 	bfi	r3, r1, #3, #5
 8017756:	7223      	strb	r3, [r4, #8]
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 8017758:	f7f4 fbde 	bl	800bf18 <lv_obj_get_ext_attr>
    return ext->auto_size == 0 ? false : true;
 801775c:	7a03      	ldrb	r3, [r0, #8]
    if(lv_img_get_auto_size(img) != false) {
 801775e:	075b      	lsls	r3, r3, #29
 8017760:	d460      	bmi.n	8017824 <lv_img_set_src+0x128>
    lv_obj_invalidate(img);
 8017762:	4630      	mov	r0, r6
 8017764:	f7f2 fabc 	bl	8009ce0 <lv_obj_invalidate>
}
 8017768:	b006      	add	sp, #24
 801776a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_SYMBOL) {
 801776e:	1e7b      	subs	r3, r7, #1
 8017770:	b2db      	uxtb	r3, r3
 8017772:	2b01      	cmp	r3, #1
 8017774:	d916      	bls.n	80177a4 <lv_img_set_src+0xa8>
 8017776:	9904      	ldr	r1, [sp, #16]
 8017778:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801777c:	f3c1 218a 	ubfx	r1, r1, #10, #11
 8017780:	f3c2 124a 	ubfx	r2, r2, #5, #11
 8017784:	e7dd      	b.n	8017742 <lv_img_set_src+0x46>
        if(ext->src_type == LV_IMG_SRC_SYMBOL || ext->src_type == LV_IMG_SRC_FILE) {
 8017786:	7a03      	ldrb	r3, [r0, #8]
 8017788:	f003 0303 	and.w	r3, r3, #3
 801778c:	3b01      	subs	r3, #1
 801778e:	2b01      	cmp	r3, #1
 8017790:	d950      	bls.n	8017834 <lv_img_set_src+0x138>
        ext->src_type = LV_IMG_SRC_UNKNOWN;
 8017792:	7a23      	ldrb	r3, [r4, #8]
        ext->src = NULL;
 8017794:	2200      	movs	r2, #0
        ext->src_type = LV_IMG_SRC_UNKNOWN;
 8017796:	f043 0303 	orr.w	r3, r3, #3
        ext->src = NULL;
 801779a:	6022      	str	r2, [r4, #0]
        ext->src_type = LV_IMG_SRC_UNKNOWN;
 801779c:	7223      	strb	r3, [r4, #8]
}
 801779e:	b006      	add	sp, #24
 80177a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(ext->src != src_img) {
 80177a4:	6820      	ldr	r0, [r4, #0]
 80177a6:	4285      	cmp	r5, r0
 80177a8:	d012      	beq.n	80177d0 <lv_img_set_src+0xd4>
            if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 80177aa:	7a23      	ldrb	r3, [r4, #8]
 80177ac:	f003 0303 	and.w	r3, r3, #3
 80177b0:	3b01      	subs	r3, #1
 80177b2:	2b01      	cmp	r3, #1
 80177b4:	d946      	bls.n	8017844 <lv_img_set_src+0x148>
        	char * new_str = lv_mem_alloc(strlen(src_img) + 1);
 80177b6:	4628      	mov	r0, r5
 80177b8:	f7e8 fd30 	bl	800021c <strlen>
 80177bc:	3001      	adds	r0, #1
 80177be:	f7fb fd4d 	bl	801325c <lv_mem_alloc>
            lv_mem_assert(new_str);
 80177c2:	4680      	mov	r8, r0
 80177c4:	b368      	cbz	r0, 8017822 <lv_img_set_src+0x126>
            strcpy(new_str, src_img);
 80177c6:	4629      	mov	r1, r5
 80177c8:	f006 f91b 	bl	801da02 <strcpy>
            ext->src = new_str;
 80177cc:	f8c4 8000 	str.w	r8, [r4]
    if(src_type == LV_IMG_SRC_SYMBOL) {
 80177d0:	2f02      	cmp	r7, #2
 80177d2:	d1d0      	bne.n	8017776 <lv_img_set_src+0x7a>
 * @param img pointer to an image object
 * @return pointer to the image's style
 */
static inline lv_style_t* lv_img_get_style(const lv_obj_t *img)
{
    return lv_obj_get_style(img);
 80177d4:	4630      	mov	r0, r6
 80177d6:	f7f4 fb21 	bl	800be1c <lv_obj_get_style>
        lv_txt_get_size(&size, src_img, style->text.font, style->text.letter_space, style->text.line_space, LV_COORD_MAX, LV_TXT_FLAG_NONE);
 80177da:	f04f 0c00 	mov.w	ip, #0
 80177de:	f643 7eff 	movw	lr, #16383	; 0x3fff
 80177e2:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	; 0x30
 80177e6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80177e8:	4629      	mov	r1, r5
 80177ea:	f8cd c008 	str.w	ip, [sp, #8]
 80177ee:	f8cd e004 	str.w	lr, [sp, #4]
 80177f2:	f9b0 5032 	ldrsh.w	r5, [r0, #50]	; 0x32
 80177f6:	a805      	add	r0, sp, #20
 80177f8:	9500      	str	r5, [sp, #0]
 80177fa:	f7fc fa89 	bl	8013d10 <lv_txt_get_size>
        header.w = size.x;
 80177fe:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8017802:	9b04      	ldr	r3, [sp, #16]
 8017804:	f3c1 010a 	ubfx	r1, r1, #0, #11
        header.h = size.y;
 8017808:	f8bd 2016 	ldrh.w	r2, [sp, #22]
        header.w = size.x;
 801780c:	f361 2394 	bfi	r3, r1, #10, #11
        header.h = size.y;
 8017810:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8017814:	0c18      	lsrs	r0, r3, #16
        header.w = size.x;
 8017816:	9304      	str	r3, [sp, #16]
        header.h = size.y;
 8017818:	f362 104f 	bfi	r0, r2, #5, #11
 801781c:	f8ad 0012 	strh.w	r0, [sp, #18]
 8017820:	e78f      	b.n	8017742 <lv_img_set_src+0x46>
 8017822:	e7fe      	b.n	8017822 <lv_img_set_src+0x126>
        lv_obj_set_size(img, ext->w, ext->h);
 8017824:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8017828:	4630      	mov	r0, r6
 801782a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801782e:	f7f3 f9d5 	bl	800abdc <lv_obj_set_size>
 8017832:	e796      	b.n	8017762 <lv_img_set_src+0x66>
            lv_mem_free(ext->src);
 8017834:	6800      	ldr	r0, [r0, #0]
 8017836:	f7fb fd19 	bl	801326c <lv_mem_free>
 801783a:	e7aa      	b.n	8017792 <lv_img_set_src+0x96>
            lv_mem_free(ext->src);
 801783c:	6820      	ldr	r0, [r4, #0]
 801783e:	f7fb fd15 	bl	801326c <lv_mem_free>
 8017842:	e776      	b.n	8017732 <lv_img_set_src+0x36>
                lv_mem_free(ext->src);
 8017844:	f7fb fd12 	bl	801326c <lv_mem_free>
 8017848:	e7b5      	b.n	80177b6 <lv_img_set_src+0xba>
 801784a:	bf00      	nop

0801784c <lv_img_create>:
{
 801784c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801784e:	4607      	mov	r7, r0
 8017850:	460e      	mov	r6, r1
    new_img = lv_obj_create(par, copy);
 8017852:	f7f2 fcd1 	bl	800a1f8 <lv_obj_create>
    lv_mem_assert(new_img);
 8017856:	2800      	cmp	r0, #0
 8017858:	d03c      	beq.n	80178d4 <lv_img_create+0x88>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_img);
 801785a:	4c2d      	ldr	r4, [pc, #180]	; (8017910 <lv_img_create+0xc4>)
 801785c:	4605      	mov	r5, r0
 801785e:	6823      	ldr	r3, [r4, #0]
 8017860:	2b00      	cmp	r3, #0
 8017862:	d038      	beq.n	80178d6 <lv_img_create+0x8a>
    lv_img_ext_t * ext = lv_obj_allocate_ext_attr(new_img, sizeof(lv_img_ext_t));
 8017864:	210c      	movs	r1, #12
 8017866:	4628      	mov	r0, r5
 8017868:	f7f4 f9c4 	bl	800bbf4 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 801786c:	4604      	mov	r4, r0
 801786e:	b380      	cbz	r0, 80178d2 <lv_img_create+0x86>
    ext->src_type = LV_IMG_SRC_UNKNOWN;
 8017870:	7a03      	ldrb	r3, [r0, #8]
    ext->src = NULL;
 8017872:	2200      	movs	r2, #0
    ext->w = lv_obj_get_width(new_img);
 8017874:	4628      	mov	r0, r5
    ext->cf = LV_IMG_CF_UNKOWN;
 8017876:	f043 0303 	orr.w	r3, r3, #3
    ext->src = NULL;
 801787a:	6022      	str	r2, [r4, #0]
    ext->cf = LV_IMG_CF_UNKOWN;
 801787c:	f362 03c7 	bfi	r3, r2, #3, #5
 8017880:	7223      	strb	r3, [r4, #8]
    ext->w = lv_obj_get_width(new_img);
 8017882:	f7f4 fabf 	bl	800be04 <lv_obj_get_width>
 8017886:	80a0      	strh	r0, [r4, #4]
    ext->h = lv_obj_get_height(new_img);
 8017888:	4628      	mov	r0, r5
 801788a:	f7f4 fac1 	bl	800be10 <lv_obj_get_height>
    ext->auto_size = 1;
 801788e:	7a23      	ldrb	r3, [r4, #8]
    ext->h = lv_obj_get_height(new_img);
 8017890:	80e0      	strh	r0, [r4, #6]
    lv_obj_set_signal_func(new_img, lv_img_signal);
 8017892:	4628      	mov	r0, r5
    ext->auto_size = 1;
 8017894:	f043 0304 	orr.w	r3, r3, #4
    lv_obj_set_signal_func(new_img, lv_img_signal);
 8017898:	491e      	ldr	r1, [pc, #120]	; (8017914 <lv_img_create+0xc8>)
    ext->auto_size = 1;
 801789a:	7223      	strb	r3, [r4, #8]
    lv_obj_set_signal_func(new_img, lv_img_signal);
 801789c:	f7f4 f9a6 	bl	800bbec <lv_obj_set_signal_func>
    lv_obj_set_design_func(new_img, lv_img_design);
 80178a0:	491d      	ldr	r1, [pc, #116]	; (8017918 <lv_img_create+0xcc>)
 80178a2:	4628      	mov	r0, r5
 80178a4:	f7f4 f9a4 	bl	800bbf0 <lv_obj_set_design_func>
    if(copy == NULL) {
 80178a8:	b1ce      	cbz	r6, 80178de <lv_img_create+0x92>
        lv_img_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 80178aa:	4630      	mov	r0, r6
 80178ac:	f7f4 fb34 	bl	800bf18 <lv_obj_get_ext_attr>
 80178b0:	4602      	mov	r2, r0
        ext->auto_size = copy_ext->auto_size;
 80178b2:	7a21      	ldrb	r1, [r4, #8]
        lv_img_set_src(new_img, copy_ext->src);
 80178b4:	4628      	mov	r0, r5
        ext->auto_size = copy_ext->auto_size;
 80178b6:	7a13      	ldrb	r3, [r2, #8]
 80178b8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80178bc:	f363 0182 	bfi	r1, r3, #2, #1
 80178c0:	7221      	strb	r1, [r4, #8]
        lv_img_set_src(new_img, copy_ext->src);
 80178c2:	6811      	ldr	r1, [r2, #0]
 80178c4:	f7ff ff1a 	bl	80176fc <lv_img_set_src>
        lv_obj_refresh_style(new_img);
 80178c8:	4628      	mov	r0, r5
 80178ca:	f7f4 f851 	bl	800b970 <lv_obj_refresh_style>
}
 80178ce:	4628      	mov	r0, r5
 80178d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80178d2:	e7fe      	b.n	80178d2 <lv_img_create+0x86>
 80178d4:	e7fe      	b.n	80178d4 <lv_img_create+0x88>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_img);
 80178d6:	f7f4 fb1b 	bl	800bf10 <lv_obj_get_signal_func>
 80178da:	6020      	str	r0, [r4, #0]
 80178dc:	e7c2      	b.n	8017864 <lv_img_create+0x18>
        lv_obj_set_click(new_img, false);
 80178de:	4631      	mov	r1, r6
 80178e0:	4628      	mov	r0, r5
 80178e2:	f7f4 f94f 	bl	800bb84 <lv_obj_set_click>
            ext->auto_size = 1;
 80178e6:	7a23      	ldrb	r3, [r4, #8]
        if(par != NULL) {
 80178e8:	b147      	cbz	r7, 80178fc <lv_img_create+0xb0>
            ext->auto_size = 1;
 80178ea:	f043 0304 	orr.w	r3, r3, #4
            lv_obj_set_style(new_img, NULL);                        /*Inherit the style  by default*/
 80178ee:	4628      	mov	r0, r5
 80178f0:	4631      	mov	r1, r6
            ext->auto_size = 1;
 80178f2:	7223      	strb	r3, [r4, #8]
            lv_obj_set_style(new_img, NULL);                        /*Inherit the style  by default*/
 80178f4:	f7f3 fc2e 	bl	800b154 <lv_obj_set_style>
}
 80178f8:	4628      	mov	r0, r5
 80178fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            ext->auto_size = 0;
 80178fc:	f367 0382 	bfi	r3, r7, #2, #1
            lv_obj_set_style(new_img, &lv_style_plain);            /*Set a style for screens*/
 8017900:	4628      	mov	r0, r5
 8017902:	4906      	ldr	r1, [pc, #24]	; (801791c <lv_img_create+0xd0>)
            ext->auto_size = 0;
 8017904:	7223      	strb	r3, [r4, #8]
            lv_obj_set_style(new_img, &lv_style_plain);            /*Set a style for screens*/
 8017906:	f7f3 fc25 	bl	800b154 <lv_obj_set_style>
}
 801790a:	4628      	mov	r0, r5
 801790c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801790e:	bf00      	nop
 8017910:	20016624 	.word	0x20016624
 8017914:	08017921 	.word	0x08017921
 8017918:	080175a1 	.word	0x080175a1
 801791c:	2001933c 	.word	0x2001933c

08017920 <lv_img_signal>:
static lv_res_t lv_img_signal(lv_obj_t * img, lv_signal_t sign, void * param)
{
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(img, sign, param);
 8017920:	4b28      	ldr	r3, [pc, #160]	; (80179c4 <lv_img_signal+0xa4>)
{
 8017922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = ancestor_signal(img, sign, param);
 8017926:	681b      	ldr	r3, [r3, #0]
{
 8017928:	4606      	mov	r6, r0
 801792a:	460d      	mov	r5, r1
 801792c:	4617      	mov	r7, r2
    res = ancestor_signal(img, sign, param);
 801792e:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8017930:	2801      	cmp	r0, #1
    res = ancestor_signal(img, sign, param);
 8017932:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
 8017934:	d002      	beq.n	801793c <lv_img_signal+0x1c>
        }
        buf->type[i] = "lv_img";
    }

    return res;
}
 8017936:	4620      	mov	r0, r4
 8017938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 801793c:	4630      	mov	r0, r6
 801793e:	f7f4 faeb 	bl	800bf18 <lv_obj_get_ext_attr>
 8017942:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CLEANUP) {
 8017944:	b98d      	cbnz	r5, 801796a <lv_img_signal+0x4a>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 8017946:	7a03      	ldrb	r3, [r0, #8]
 8017948:	f003 0303 	and.w	r3, r3, #3
 801794c:	3b01      	subs	r3, #1
 801794e:	2b01      	cmp	r3, #1
 8017950:	d8f1      	bhi.n	8017936 <lv_img_signal+0x16>
            lv_mem_free(ext->src);
 8017952:	6800      	ldr	r0, [r0, #0]
 8017954:	f7fb fc8a 	bl	801326c <lv_mem_free>
            ext->src_type = LV_IMG_SRC_UNKNOWN;
 8017958:	f898 3008 	ldrb.w	r3, [r8, #8]
            ext->src = NULL;
 801795c:	f8c8 5000 	str.w	r5, [r8]
            ext->src_type = LV_IMG_SRC_UNKNOWN;
 8017960:	f043 0303 	orr.w	r3, r3, #3
 8017964:	f888 3008 	strb.w	r3, [r8, #8]
 8017968:	e7e5      	b.n	8017936 <lv_img_signal+0x16>
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 801796a:	2d03      	cmp	r5, #3
 801796c:	d016      	beq.n	801799c <lv_img_signal+0x7c>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801796e:	2d06      	cmp	r5, #6
 8017970:	d1e1      	bne.n	8017936 <lv_img_signal+0x16>
            if(buf->type[i] == NULL) break;
 8017972:	683b      	ldr	r3, [r7, #0]
 8017974:	b173      	cbz	r3, 8017994 <lv_img_signal+0x74>
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	b1f3      	cbz	r3, 80179b8 <lv_img_signal+0x98>
 801797a:	68bb      	ldr	r3, [r7, #8]
 801797c:	b1d3      	cbz	r3, 80179b4 <lv_img_signal+0x94>
 801797e:	68fb      	ldr	r3, [r7, #12]
 8017980:	b1b3      	cbz	r3, 80179b0 <lv_img_signal+0x90>
 8017982:	693b      	ldr	r3, [r7, #16]
 8017984:	b1e3      	cbz	r3, 80179c0 <lv_img_signal+0xa0>
 8017986:	697b      	ldr	r3, [r7, #20]
 8017988:	b1c3      	cbz	r3, 80179bc <lv_img_signal+0x9c>
 801798a:	69bb      	ldr	r3, [r7, #24]
 801798c:	2b00      	cmp	r3, #0
 801798e:	bf14      	ite	ne
 8017990:	2307      	movne	r3, #7
 8017992:	2306      	moveq	r3, #6
        buf->type[i] = "lv_img";
 8017994:	4a0c      	ldr	r2, [pc, #48]	; (80179c8 <lv_img_signal+0xa8>)
 8017996:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 801799a:	e7cc      	b.n	8017936 <lv_img_signal+0x16>
        if(ext->src_type == LV_IMG_SRC_SYMBOL) {
 801799c:	7a03      	ldrb	r3, [r0, #8]
 801799e:	f003 0303 	and.w	r3, r3, #3
 80179a2:	2b02      	cmp	r3, #2
 80179a4:	d1c7      	bne.n	8017936 <lv_img_signal+0x16>
            lv_img_set_src(img, ext->src);
 80179a6:	6801      	ldr	r1, [r0, #0]
 80179a8:	4630      	mov	r0, r6
 80179aa:	f7ff fea7 	bl	80176fc <lv_img_set_src>
 80179ae:	e7c2      	b.n	8017936 <lv_img_signal+0x16>
            if(buf->type[i] == NULL) break;
 80179b0:	2303      	movs	r3, #3
 80179b2:	e7ef      	b.n	8017994 <lv_img_signal+0x74>
 80179b4:	2302      	movs	r3, #2
 80179b6:	e7ed      	b.n	8017994 <lv_img_signal+0x74>
 80179b8:	4623      	mov	r3, r4
 80179ba:	e7eb      	b.n	8017994 <lv_img_signal+0x74>
 80179bc:	2305      	movs	r3, #5
 80179be:	e7e9      	b.n	8017994 <lv_img_signal+0x74>
 80179c0:	2304      	movs	r3, #4
 80179c2:	e7e7      	b.n	8017994 <lv_img_signal+0x74>
 80179c4:	20016624 	.word	0x20016624
 80179c8:	080c7290 	.word	0x080c7290

080179cc <lv_img_get_src>:
{
 80179cc:	b508      	push	{r3, lr}
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 80179ce:	f7f4 faa3 	bl	800bf18 <lv_obj_get_ext_attr>
}
 80179d2:	6800      	ldr	r0, [r0, #0]
 80179d4:	bd08      	pop	{r3, pc}
 80179d6:	bf00      	nop

080179d8 <lv_kb_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_kb_signal(lv_obj_t * kb, lv_signal_t sign, void * param)
{
 80179d8:	b538      	push	{r3, r4, r5, lr}
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(kb, sign, param);
 80179da:	4b17      	ldr	r3, [pc, #92]	; (8017a38 <lv_kb_signal+0x60>)
{
 80179dc:	460d      	mov	r5, r1
 80179de:	4614      	mov	r4, r2
    res = ancestor_signal(kb, sign, param);
 80179e0:	681b      	ldr	r3, [r3, #0]
 80179e2:	4798      	blx	r3
    if(res != LV_RES_OK) return res;

    if(sign == LV_SIGNAL_CLEANUP) {
 80179e4:	fab5 f385 	clz	r3, r5
 80179e8:	095b      	lsrs	r3, r3, #5
 80179ea:	2801      	cmp	r0, #1
 80179ec:	bf18      	it	ne
 80179ee:	f043 0301 	orrne.w	r3, r3, #1
        /*Nothing to cleanup. (No dynamically allocated memory in 'ext')*/
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 80179f2:	b9ab      	cbnz	r3, 8017a20 <lv_kb_signal+0x48>
 80179f4:	2d06      	cmp	r5, #6
 80179f6:	d113      	bne.n	8017a20 <lv_kb_signal+0x48>
        lv_obj_type_t * buf = param;
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) {  /*Find the last set data*/
            if(buf->type[i] == NULL) break;
 80179f8:	6823      	ldr	r3, [r4, #0]
 80179fa:	b173      	cbz	r3, 8017a1a <lv_kb_signal+0x42>
 80179fc:	6863      	ldr	r3, [r4, #4]
 80179fe:	b183      	cbz	r3, 8017a22 <lv_kb_signal+0x4a>
 8017a00:	68a3      	ldr	r3, [r4, #8]
 8017a02:	b183      	cbz	r3, 8017a26 <lv_kb_signal+0x4e>
 8017a04:	68e3      	ldr	r3, [r4, #12]
 8017a06:	b183      	cbz	r3, 8017a2a <lv_kb_signal+0x52>
 8017a08:	6923      	ldr	r3, [r4, #16]
 8017a0a:	b183      	cbz	r3, 8017a2e <lv_kb_signal+0x56>
 8017a0c:	6963      	ldr	r3, [r4, #20]
 8017a0e:	b183      	cbz	r3, 8017a32 <lv_kb_signal+0x5a>
 8017a10:	69a3      	ldr	r3, [r4, #24]
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	bf14      	ite	ne
 8017a16:	2307      	movne	r3, #7
 8017a18:	2306      	moveq	r3, #6
        }
        buf->type[i] = "lv_kb";
 8017a1a:	4a08      	ldr	r2, [pc, #32]	; (8017a3c <lv_kb_signal+0x64>)
 8017a1c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    }

    return res;
}
 8017a20:	bd38      	pop	{r3, r4, r5, pc}
            if(buf->type[i] == NULL) break;
 8017a22:	2301      	movs	r3, #1
 8017a24:	e7f9      	b.n	8017a1a <lv_kb_signal+0x42>
 8017a26:	2302      	movs	r3, #2
 8017a28:	e7f7      	b.n	8017a1a <lv_kb_signal+0x42>
 8017a2a:	2303      	movs	r3, #3
 8017a2c:	e7f5      	b.n	8017a1a <lv_kb_signal+0x42>
 8017a2e:	2304      	movs	r3, #4
 8017a30:	e7f3      	b.n	8017a1a <lv_kb_signal+0x42>
 8017a32:	2305      	movs	r3, #5
 8017a34:	e7f1      	b.n	8017a1a <lv_kb_signal+0x42>
 8017a36:	bf00      	nop
 8017a38:	20016628 	.word	0x20016628
 8017a3c:	080c7298 	.word	0x080c7298

08017a40 <lv_kb_def_action>:
 * @param btnm pointer to 'kb_btnm'
 * @param i the index of the released button from the current btnm map
 * @return LV_ACTION_RES_INV if the btnm is deleted else LV_ACTION_RES_OK
 */
static lv_res_t lv_kb_def_action(lv_obj_t * kb, const char * txt)
{
 8017a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a44:	460c      	mov	r4, r1
 8017a46:	4605      	mov	r5, r0
    lv_kb_ext_t * ext = lv_obj_get_ext_attr(kb);
 8017a48:	f7f4 fa66 	bl	800bf18 <lv_obj_get_ext_attr>
    lv_res_t res = LV_RES_OK;

    /*Do the corresponding action according to the text of the button*/
    if(strcmp(txt, "abc") == 0) {
 8017a4c:	496c      	ldr	r1, [pc, #432]	; (8017c00 <lv_kb_def_action+0x1c0>)
    lv_kb_ext_t * ext = lv_obj_get_ext_attr(kb);
 8017a4e:	4606      	mov	r6, r0
    if(strcmp(txt, "abc") == 0) {
 8017a50:	4620      	mov	r0, r4
 8017a52:	f7e8 fbd9 	bl	8000208 <strcmp>
 8017a56:	2800      	cmp	r0, #0
 8017a58:	d059      	beq.n	8017b0e <lv_kb_def_action+0xce>
        lv_btnm_set_map(kb, kb_map_lc);
        return LV_RES_OK;
    } else if(strcmp(txt, "ABC") == 0) {
 8017a5a:	496a      	ldr	r1, [pc, #424]	; (8017c04 <lv_kb_def_action+0x1c4>)
 8017a5c:	4620      	mov	r0, r4
 8017a5e:	f7e8 fbd3 	bl	8000208 <strcmp>
 8017a62:	2800      	cmp	r0, #0
 8017a64:	d075      	beq.n	8017b52 <lv_kb_def_action+0x112>
        lv_btnm_set_map(kb, kb_map_uc);
        return LV_RES_OK;
    } else if(strcmp(txt, "1#") == 0) {
 8017a66:	4968      	ldr	r1, [pc, #416]	; (8017c08 <lv_kb_def_action+0x1c8>)
 8017a68:	4620      	mov	r0, r4
 8017a6a:	f7e8 fbcd 	bl	8000208 <strcmp>
 8017a6e:	2800      	cmp	r0, #0
 8017a70:	d054      	beq.n	8017b1c <lv_kb_def_action+0xdc>
        lv_btnm_set_map(kb, kb_map_spec);
        return LV_RES_OK;
    } else if(strcmp(txt, SYMBOL_CLOSE) == 0) {
 8017a72:	4966      	ldr	r1, [pc, #408]	; (8017c0c <lv_kb_def_action+0x1cc>)
 8017a74:	4620      	mov	r0, r4
 8017a76:	f7e8 fbc7 	bl	8000208 <strcmp>
 8017a7a:	b930      	cbnz	r0, 8017a8a <lv_kb_def_action+0x4a>
        if(ext->hide_action) res = ext->hide_action(kb);
 8017a7c:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8017a7e:	4628      	mov	r0, r5
 8017a80:	2b00      	cmp	r3, #0
 8017a82:	d071      	beq.n	8017b68 <lv_kb_def_action+0x128>
        }
    } else {
        lv_ta_add_text(ext->ta, txt);
    }
    return LV_RES_OK;
}
 8017a84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        if(ext->ok_action) res = ext->ok_action(kb);
 8017a88:	4718      	bx	r3
    } else if(strcmp(txt, SYMBOL_OK) == 0) {
 8017a8a:	4961      	ldr	r1, [pc, #388]	; (8017c10 <lv_kb_def_action+0x1d0>)
 8017a8c:	4620      	mov	r0, r4
 8017a8e:	f7e8 fbbb 	bl	8000208 <strcmp>
 8017a92:	2800      	cmp	r0, #0
 8017a94:	d049      	beq.n	8017b2a <lv_kb_def_action+0xea>
    if(ext->ta == NULL) return res;
 8017a96:	6ab5      	ldr	r5, [r6, #40]	; 0x28
 8017a98:	2d00      	cmp	r5, #0
 8017a9a:	d03c      	beq.n	8017b16 <lv_kb_def_action+0xd6>
    if(strcmp(txt, "Enter") == 0)lv_ta_add_char(ext->ta, '\n');
 8017a9c:	495d      	ldr	r1, [pc, #372]	; (8017c14 <lv_kb_def_action+0x1d4>)
 8017a9e:	4620      	mov	r0, r4
 8017aa0:	f7e8 fbb2 	bl	8000208 <strcmp>
 8017aa4:	2800      	cmp	r0, #0
 8017aa6:	d06e      	beq.n	8017b86 <lv_kb_def_action+0x146>
    else if(strcmp(txt, SYMBOL_LEFT) == 0) lv_ta_cursor_left(ext->ta);
 8017aa8:	495b      	ldr	r1, [pc, #364]	; (8017c18 <lv_kb_def_action+0x1d8>)
 8017aaa:	4620      	mov	r0, r4
 8017aac:	f7e8 fbac 	bl	8000208 <strcmp>
 8017ab0:	2800      	cmp	r0, #0
 8017ab2:	d072      	beq.n	8017b9a <lv_kb_def_action+0x15a>
    else if(strcmp(txt, SYMBOL_RIGHT) == 0) lv_ta_cursor_right(ext->ta);
 8017ab4:	4959      	ldr	r1, [pc, #356]	; (8017c1c <lv_kb_def_action+0x1dc>)
 8017ab6:	4620      	mov	r0, r4
 8017ab8:	f7e8 fba6 	bl	8000208 <strcmp>
 8017abc:	2800      	cmp	r0, #0
 8017abe:	d070      	beq.n	8017ba2 <lv_kb_def_action+0x162>
    else if(strcmp(txt, "Bksp") == 0)  lv_ta_del_char(ext->ta);
 8017ac0:	4957      	ldr	r1, [pc, #348]	; (8017c20 <lv_kb_def_action+0x1e0>)
 8017ac2:	4620      	mov	r0, r4
 8017ac4:	f7e8 fba0 	bl	8000208 <strcmp>
 8017ac8:	2800      	cmp	r0, #0
 8017aca:	d049      	beq.n	8017b60 <lv_kb_def_action+0x120>
    else if(strcmp(txt, "+/-") == 0) {
 8017acc:	4955      	ldr	r1, [pc, #340]	; (8017c24 <lv_kb_def_action+0x1e4>)
 8017ace:	4620      	mov	r0, r4
 8017ad0:	f7e8 fb9a 	bl	8000208 <strcmp>
 8017ad4:	4607      	mov	r7, r0
 8017ad6:	2800      	cmp	r0, #0
 8017ad8:	d15a      	bne.n	8017b90 <lv_kb_def_action+0x150>
        uint16_t cur = lv_ta_get_cursor_pos(ext->ta);
 8017ada:	4628      	mov	r0, r5
 8017adc:	f004 ff56 	bl	801c98c <lv_ta_get_cursor_pos>
 8017ae0:	4604      	mov	r4, r0
        const char * ta_txt = lv_ta_get_text(ext->ta);
 8017ae2:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8017ae4:	f004 ff44 	bl	801c970 <lv_ta_get_text>
        if(ta_txt[0] == '-') {
 8017ae8:	7803      	ldrb	r3, [r0, #0]
 8017aea:	2b2d      	cmp	r3, #45	; 0x2d
 8017aec:	d07f      	beq.n	8017bee <lv_kb_def_action+0x1ae>
        } else if(ta_txt[0] == '+') {
 8017aee:	2b2b      	cmp	r3, #43	; 0x2b
 8017af0:	d064      	beq.n	8017bbc <lv_kb_def_action+0x17c>
            lv_ta_set_cursor_pos(ext->ta, 0);
 8017af2:	4639      	mov	r1, r7
 8017af4:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8017af6:	f004 fa21 	bl	801bf3c <lv_ta_set_cursor_pos>
            lv_ta_add_char(ext->ta, '-');
 8017afa:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8017afc:	212d      	movs	r1, #45	; 0x2d
 8017afe:	f004 fb33 	bl	801c168 <lv_ta_add_char>
            lv_ta_set_cursor_pos(ext->ta, cur + 1);
 8017b02:	1c61      	adds	r1, r4, #1
 8017b04:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8017b06:	b209      	sxth	r1, r1
 8017b08:	f004 fa18 	bl	801bf3c <lv_ta_set_cursor_pos>
 8017b0c:	e003      	b.n	8017b16 <lv_kb_def_action+0xd6>
        lv_btnm_set_map(kb, kb_map_lc);
 8017b0e:	4628      	mov	r0, r5
 8017b10:	4945      	ldr	r1, [pc, #276]	; (8017c28 <lv_kb_def_action+0x1e8>)
 8017b12:	f7fd fd33 	bl	801557c <lv_btnm_set_map>
}
 8017b16:	2001      	movs	r0, #1
 8017b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_btnm_set_map(kb, kb_map_spec);
 8017b1c:	4628      	mov	r0, r5
 8017b1e:	4943      	ldr	r1, [pc, #268]	; (8017c2c <lv_kb_def_action+0x1ec>)
 8017b20:	f7fd fd2c 	bl	801557c <lv_btnm_set_map>
}
 8017b24:	2001      	movs	r0, #1
 8017b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(ext->ok_action) res = ext->ok_action(kb);
 8017b2a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8017b2c:	4628      	mov	r0, r5
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	d1a8      	bne.n	8017a84 <lv_kb_def_action+0x44>
    lv_kb_ext_t * ext = lv_obj_get_ext_attr(kb);
 8017b32:	f7f4 f9f1 	bl	800bf18 <lv_obj_get_ext_attr>
 8017b36:	4604      	mov	r4, r0
    if(ext->ta && ext->cursor_mng) {
 8017b38:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8017b3a:	b118      	cbz	r0, 8017b44 <lv_kb_def_action+0x104>
 8017b3c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8017b40:	07db      	lsls	r3, r3, #31
 8017b42:	d44b      	bmi.n	8017bdc <lv_kb_def_action+0x19c>
    ext->ta = ta;
 8017b44:	2300      	movs	r3, #0
            res = lv_obj_del(kb);
 8017b46:	4628      	mov	r0, r5
    ext->ta = ta;
 8017b48:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8017b4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            res = lv_obj_del(kb);
 8017b4e:	f7f2 b81d 	b.w	8009b8c <lv_obj_del>
        lv_btnm_set_map(kb, kb_map_uc);
 8017b52:	4628      	mov	r0, r5
 8017b54:	4936      	ldr	r1, [pc, #216]	; (8017c30 <lv_kb_def_action+0x1f0>)
 8017b56:	f7fd fd11 	bl	801557c <lv_btnm_set_map>
}
 8017b5a:	2001      	movs	r0, #1
 8017b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(strcmp(txt, "Bksp") == 0)  lv_ta_del_char(ext->ta);
 8017b60:	4628      	mov	r0, r5
 8017b62:	f004 faad 	bl	801c0c0 <lv_ta_del_char>
 8017b66:	e7d6      	b.n	8017b16 <lv_kb_def_action+0xd6>
    lv_kb_ext_t * ext = lv_obj_get_ext_attr(kb);
 8017b68:	f7f4 f9d6 	bl	800bf18 <lv_obj_get_ext_attr>
 8017b6c:	4604      	mov	r4, r0
    if(ext->ta && ext->cursor_mng) {
 8017b6e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8017b70:	b118      	cbz	r0, 8017b7a <lv_kb_def_action+0x13a>
 8017b72:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8017b76:	07da      	lsls	r2, r3, #31
 8017b78:	d417      	bmi.n	8017baa <lv_kb_def_action+0x16a>
    ext->ta = ta;
 8017b7a:	2300      	movs	r3, #0
            lv_obj_del(kb);
 8017b7c:	4628      	mov	r0, r5
    ext->ta = ta;
 8017b7e:	62a3      	str	r3, [r4, #40]	; 0x28
            lv_obj_del(kb);
 8017b80:	f7f2 f804 	bl	8009b8c <lv_obj_del>
 8017b84:	e7c7      	b.n	8017b16 <lv_kb_def_action+0xd6>
    if(strcmp(txt, "Enter") == 0)lv_ta_add_char(ext->ta, '\n');
 8017b86:	4628      	mov	r0, r5
 8017b88:	210a      	movs	r1, #10
 8017b8a:	f004 faed 	bl	801c168 <lv_ta_add_char>
 8017b8e:	e7c2      	b.n	8017b16 <lv_kb_def_action+0xd6>
        lv_ta_add_text(ext->ta, txt);
 8017b90:	4621      	mov	r1, r4
 8017b92:	4628      	mov	r0, r5
 8017b94:	f004 fbc0 	bl	801c318 <lv_ta_add_text>
 8017b98:	e7bd      	b.n	8017b16 <lv_kb_def_action+0xd6>
    else if(strcmp(txt, SYMBOL_LEFT) == 0) lv_ta_cursor_left(ext->ta);
 8017b9a:	4628      	mov	r0, r5
 8017b9c:	f004 ff12 	bl	801c9c4 <lv_ta_cursor_left>
 8017ba0:	e7b9      	b.n	8017b16 <lv_kb_def_action+0xd6>
    else if(strcmp(txt, SYMBOL_RIGHT) == 0) lv_ta_cursor_right(ext->ta);
 8017ba2:	4628      	mov	r0, r5
 8017ba4:	f004 ff00 	bl	801c9a8 <lv_ta_cursor_right>
 8017ba8:	e7b5      	b.n	8017b16 <lv_kb_def_action+0xd6>
        cur_type = lv_ta_get_cursor_type(ext->ta);
 8017baa:	f004 fef5 	bl	801c998 <lv_ta_get_cursor_type>
        lv_ta_set_cursor_type(ext->ta,  cur_type | LV_CURSOR_HIDDEN);
 8017bae:	f040 0108 	orr.w	r1, r0, #8
 8017bb2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8017bb4:	b2c9      	uxtb	r1, r1
 8017bb6:	f004 fd03 	bl	801c5c0 <lv_ta_set_cursor_type>
 8017bba:	e7de      	b.n	8017b7a <lv_kb_def_action+0x13a>
            lv_ta_set_cursor_pos(ext->ta, 1);
 8017bbc:	2101      	movs	r1, #1
 8017bbe:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8017bc0:	f004 f9bc 	bl	801bf3c <lv_ta_set_cursor_pos>
            lv_ta_del_char(ext->ta);
 8017bc4:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8017bc6:	f004 fa7b 	bl	801c0c0 <lv_ta_del_char>
            lv_ta_add_char(ext->ta, '-');
 8017bca:	212d      	movs	r1, #45	; 0x2d
 8017bcc:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8017bce:	f004 facb 	bl	801c168 <lv_ta_add_char>
            lv_ta_set_cursor_pos(ext->ta, cur);
 8017bd2:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8017bd4:	b221      	sxth	r1, r4
 8017bd6:	f004 f9b1 	bl	801bf3c <lv_ta_set_cursor_pos>
 8017bda:	e79c      	b.n	8017b16 <lv_kb_def_action+0xd6>
        cur_type = lv_ta_get_cursor_type(ext->ta);
 8017bdc:	f004 fedc 	bl	801c998 <lv_ta_get_cursor_type>
        lv_ta_set_cursor_type(ext->ta,  cur_type | LV_CURSOR_HIDDEN);
 8017be0:	f040 0108 	orr.w	r1, r0, #8
 8017be4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8017be6:	b2c9      	uxtb	r1, r1
 8017be8:	f004 fcea 	bl	801c5c0 <lv_ta_set_cursor_type>
 8017bec:	e7aa      	b.n	8017b44 <lv_kb_def_action+0x104>
            lv_ta_set_cursor_pos(ext->ta, 1);
 8017bee:	2101      	movs	r1, #1
 8017bf0:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8017bf2:	f004 f9a3 	bl	801bf3c <lv_ta_set_cursor_pos>
            lv_ta_del_char(ext->ta);
 8017bf6:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8017bf8:	f004 fa62 	bl	801c0c0 <lv_ta_del_char>
            lv_ta_add_char(ext->ta, '+');
 8017bfc:	212b      	movs	r1, #43	; 0x2b
 8017bfe:	e7e5      	b.n	8017bcc <lv_kb_def_action+0x18c>
 8017c00:	080c72a0 	.word	0x080c72a0
 8017c04:	080c72a4 	.word	0x080c72a4
 8017c08:	080c72a8 	.word	0x080c72a8
 8017c0c:	080c72ac 	.word	0x080c72ac
 8017c10:	080c72b0 	.word	0x080c72b0
 8017c14:	080c72b4 	.word	0x080c72b4
 8017c18:	080c72bc 	.word	0x080c72bc
 8017c1c:	080c72c0 	.word	0x080c72c0
 8017c20:	080c72c4 	.word	0x080c72c4
 8017c24:	080c72cc 	.word	0x080c72cc
 8017c28:	20000318 	.word	0x20000318
 8017c2c:	20000478 	.word	0x20000478
 8017c30:	200003c8 	.word	0x200003c8

08017c34 <lv_kb_create>:
{
 8017c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017c36:	b083      	sub	sp, #12
 8017c38:	460f      	mov	r7, r1
    lv_obj_t * new_kb = lv_btnm_create(par, copy);
 8017c3a:	f7fd fdf5 	bl	8015828 <lv_btnm_create>
    lv_mem_assert(new_kb);
 8017c3e:	2800      	cmp	r0, #0
 8017c40:	d039      	beq.n	8017cb6 <lv_kb_create+0x82>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_kb);
 8017c42:	4d40      	ldr	r5, [pc, #256]	; (8017d44 <lv_kb_create+0x110>)
 8017c44:	4604      	mov	r4, r0
 8017c46:	682b      	ldr	r3, [r5, #0]
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	d035      	beq.n	8017cb8 <lv_kb_create+0x84>
    lv_kb_ext_t * ext = lv_obj_allocate_ext_attr(new_kb, sizeof(lv_kb_ext_t));
 8017c4c:	2138      	movs	r1, #56	; 0x38
 8017c4e:	4620      	mov	r0, r4
 8017c50:	f7f3 ffd0 	bl	800bbf4 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 8017c54:	4605      	mov	r5, r0
 8017c56:	b368      	cbz	r0, 8017cb4 <lv_kb_create+0x80>
    ext->cursor_mng = 0;
 8017c58:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
    ext->ta = NULL;
 8017c5c:	2600      	movs	r6, #0
    lv_obj_set_signal_func(new_kb, lv_kb_signal);
 8017c5e:	493a      	ldr	r1, [pc, #232]	; (8017d48 <lv_kb_create+0x114>)
 8017c60:	4620      	mov	r0, r4
    ext->cursor_mng = 0;
 8017c62:	f366 0300 	bfi	r3, r6, #0, #1
    ext->ta = NULL;
 8017c66:	62ae      	str	r6, [r5, #40]	; 0x28
    ext->mode = LV_KB_MODE_TEXT;
 8017c68:	f885 602c 	strb.w	r6, [r5, #44]	; 0x2c
    ext->hide_action = NULL;
 8017c6c:	636e      	str	r6, [r5, #52]	; 0x34
    ext->ok_action = NULL;
 8017c6e:	632e      	str	r6, [r5, #48]	; 0x30
    ext->cursor_mng = 0;
 8017c70:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
    lv_obj_set_signal_func(new_kb, lv_kb_signal);
 8017c74:	f7f3 ffba 	bl	800bbec <lv_obj_set_signal_func>
    if(copy == NULL) {
 8017c78:	b317      	cbz	r7, 8017cc0 <lv_kb_create+0x8c>
        lv_kb_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8017c7a:	4638      	mov	r0, r7
 8017c7c:	f7f4 f94c 	bl	800bf18 <lv_obj_get_ext_attr>
 8017c80:	4603      	mov	r3, r0
        ext->ta = NULL;
 8017c82:	62ae      	str	r6, [r5, #40]	; 0x28
        lv_obj_refresh_style(new_kb);
 8017c84:	4620      	mov	r0, r4
        ext->ta = copy_ext->ta;
 8017c86:	6a99      	ldr	r1, [r3, #40]	; 0x28
        ext->cursor_mng = copy_ext->cursor_mng;
 8017c88:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
        ext->ta = copy_ext->ta;
 8017c8c:	62a9      	str	r1, [r5, #40]	; 0x28
        ext->mode = copy_ext->mode;
 8017c8e:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8017c92:	f885 102c 	strb.w	r1, [r5, #44]	; 0x2c
        ext->cursor_mng = copy_ext->cursor_mng;
 8017c96:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 8017c9a:	f361 0200 	bfi	r2, r1, #0, #1
 8017c9e:	f885 202d 	strb.w	r2, [r5, #45]	; 0x2d
        ext->hide_action = copy_ext->hide_action;
 8017ca2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
        ext->ok_action = copy_ext->ok_action;
 8017ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        ext->hide_action = copy_ext->hide_action;
 8017ca6:	636a      	str	r2, [r5, #52]	; 0x34
        ext->ok_action = copy_ext->ok_action;
 8017ca8:	632b      	str	r3, [r5, #48]	; 0x30
        lv_obj_refresh_style(new_kb);
 8017caa:	f7f3 fe61 	bl	800b970 <lv_obj_refresh_style>
}
 8017cae:	4620      	mov	r0, r4
 8017cb0:	b003      	add	sp, #12
 8017cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017cb4:	e7fe      	b.n	8017cb4 <lv_kb_create+0x80>
 8017cb6:	e7fe      	b.n	8017cb6 <lv_kb_create+0x82>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_kb);
 8017cb8:	f7f4 f92a 	bl	800bf10 <lv_obj_get_signal_func>
 8017cbc:	6028      	str	r0, [r5, #0]
 8017cbe:	e7c5      	b.n	8017c4c <lv_kb_create+0x18>
        lv_obj_set_size(new_kb, LV_HOR_RES, LV_VER_RES / 2);
 8017cc0:	2288      	movs	r2, #136	; 0x88
 8017cc2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8017cc6:	4620      	mov	r0, r4
 8017cc8:	f7f2 ff88 	bl	800abdc <lv_obj_set_size>
        lv_obj_align(new_kb, NULL, LV_ALIGN_IN_BOTTOM_MID, 0, 0);
 8017ccc:	463b      	mov	r3, r7
 8017cce:	2205      	movs	r2, #5
 8017cd0:	4639      	mov	r1, r7
 8017cd2:	4620      	mov	r0, r4
 8017cd4:	9700      	str	r7, [sp, #0]
 8017cd6:	f7f2 fc65 	bl	800a5a4 <lv_obj_align>
        lv_btnm_set_action(new_kb, lv_kb_def_action);
 8017cda:	491c      	ldr	r1, [pc, #112]	; (8017d4c <lv_kb_create+0x118>)
 8017cdc:	4620      	mov	r0, r4
 8017cde:	f7fe f9ef 	bl	80160c0 <lv_btnm_set_action>
        lv_btnm_set_map(new_kb, kb_map_lc);
 8017ce2:	491b      	ldr	r1, [pc, #108]	; (8017d50 <lv_kb_create+0x11c>)
 8017ce4:	4620      	mov	r0, r4
 8017ce6:	f7fd fc49 	bl	801557c <lv_btnm_set_map>
        lv_theme_t * th = lv_theme_get_current();
 8017cea:	f005 fe1d 	bl	801d928 <lv_theme_get_current>
        if(th) {
 8017cee:	4605      	mov	r5, r0
 8017cf0:	2800      	cmp	r0, #0
 8017cf2:	d0dc      	beq.n	8017cae <lv_kb_create+0x7a>
            lv_btnm_set_style(kb, LV_BTNM_STYLE_BG, style);
 8017cf4:	4639      	mov	r1, r7
 8017cf6:	f8d0 20d8 	ldr.w	r2, [r0, #216]	; 0xd8
 8017cfa:	4620      	mov	r0, r4
 8017cfc:	f7fe fa08 	bl	8016110 <lv_btnm_set_style>
            lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_REL, style);
 8017d00:	f8d5 20dc 	ldr.w	r2, [r5, #220]	; 0xdc
 8017d04:	4620      	mov	r0, r4
 8017d06:	2101      	movs	r1, #1
 8017d08:	f7fe fa02 	bl	8016110 <lv_btnm_set_style>
            lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_PR, style);
 8017d0c:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
 8017d10:	4620      	mov	r0, r4
 8017d12:	2102      	movs	r1, #2
 8017d14:	f7fe f9fc 	bl	8016110 <lv_btnm_set_style>
            lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_TGL_REL, style);
 8017d18:	f8d5 20e4 	ldr.w	r2, [r5, #228]	; 0xe4
 8017d1c:	4620      	mov	r0, r4
 8017d1e:	2103      	movs	r1, #3
 8017d20:	f7fe f9f6 	bl	8016110 <lv_btnm_set_style>
            lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_TGL_PR, style);
 8017d24:	f8d5 20e8 	ldr.w	r2, [r5, #232]	; 0xe8
 8017d28:	4620      	mov	r0, r4
 8017d2a:	2104      	movs	r1, #4
 8017d2c:	f7fe f9f0 	bl	8016110 <lv_btnm_set_style>
            lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_INA, style);
 8017d30:	4620      	mov	r0, r4
 8017d32:	f8d5 20ec 	ldr.w	r2, [r5, #236]	; 0xec
 8017d36:	2105      	movs	r1, #5
 8017d38:	f7fe f9ea 	bl	8016110 <lv_btnm_set_style>
}
 8017d3c:	4620      	mov	r0, r4
 8017d3e:	b003      	add	sp, #12
 8017d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d42:	bf00      	nop
 8017d44:	20016628 	.word	0x20016628
 8017d48:	080179d9 	.word	0x080179d9
 8017d4c:	08017a41 	.word	0x08017a41
 8017d50:	20000318 	.word	0x20000318

08017d54 <lv_kb_set_ta>:
{
 8017d54:	b538      	push	{r3, r4, r5, lr}
 8017d56:	460d      	mov	r5, r1
    lv_kb_ext_t * ext = lv_obj_get_ext_attr(kb);
 8017d58:	f7f4 f8de 	bl	800bf18 <lv_obj_get_ext_attr>
 8017d5c:	4604      	mov	r4, r0
    if(ext->ta && ext->cursor_mng) {
 8017d5e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8017d60:	b118      	cbz	r0, 8017d6a <lv_kb_set_ta+0x16>
 8017d62:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8017d66:	07da      	lsls	r2, r3, #31
 8017d68:	d410      	bmi.n	8017d8c <lv_kb_set_ta+0x38>
    ext->ta = ta;
 8017d6a:	62a5      	str	r5, [r4, #40]	; 0x28
    if(ext->ta && ext->cursor_mng) {
 8017d6c:	b11d      	cbz	r5, 8017d76 <lv_kb_set_ta+0x22>
 8017d6e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8017d72:	07db      	lsls	r3, r3, #31
 8017d74:	d400      	bmi.n	8017d78 <lv_kb_set_ta+0x24>
 8017d76:	bd38      	pop	{r3, r4, r5, pc}
        cur_type = lv_ta_get_cursor_type(ext->ta);
 8017d78:	4628      	mov	r0, r5
 8017d7a:	f004 fe0d 	bl	801c998 <lv_ta_get_cursor_type>
        lv_ta_set_cursor_type(ext->ta,  cur_type & (~LV_CURSOR_HIDDEN));
 8017d7e:	f000 01f7 	and.w	r1, r0, #247	; 0xf7
 8017d82:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
 8017d84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_ta_set_cursor_type(ext->ta,  cur_type & (~LV_CURSOR_HIDDEN));
 8017d88:	f004 bc1a 	b.w	801c5c0 <lv_ta_set_cursor_type>
        cur_type = lv_ta_get_cursor_type(ext->ta);
 8017d8c:	f004 fe04 	bl	801c998 <lv_ta_get_cursor_type>
        lv_ta_set_cursor_type(ext->ta,  cur_type | LV_CURSOR_HIDDEN);
 8017d90:	f040 0108 	orr.w	r1, r0, #8
 8017d94:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8017d96:	b2c9      	uxtb	r1, r1
 8017d98:	f004 fc12 	bl	801c5c0 <lv_ta_set_cursor_type>
 8017d9c:	e7e5      	b.n	8017d6a <lv_kb_set_ta+0x16>
 8017d9e:	bf00      	nop

08017da0 <lv_kb_set_ok_action>:
{
 8017da0:	b510      	push	{r4, lr}
 8017da2:	460c      	mov	r4, r1
    lv_kb_ext_t * ext = lv_obj_get_ext_attr(kb);
 8017da4:	f7f4 f8b8 	bl	800bf18 <lv_obj_get_ext_attr>
    ext->ok_action = action;
 8017da8:	6304      	str	r4, [r0, #48]	; 0x30
 8017daa:	bd10      	pop	{r4, pc}

08017dac <lv_kb_set_hide_action>:
{
 8017dac:	b510      	push	{r4, lr}
 8017dae:	460c      	mov	r4, r1
    lv_kb_ext_t * ext = lv_obj_get_ext_attr(kb);
 8017db0:	f7f4 f8b2 	bl	800bf18 <lv_obj_get_ext_attr>
    ext->hide_action = action;
 8017db4:	6344      	str	r4, [r0, #52]	; 0x34
 8017db6:	bd10      	pop	{r4, pc}

08017db8 <lv_kb_set_style>:
    switch(type) {
 8017db8:	2905      	cmp	r1, #5
 8017dba:	d816      	bhi.n	8017dea <lv_kb_set_style+0x32>
 8017dbc:	e8df f001 	tbb	[pc, r1]
 8017dc0:	0f0c0906 	.word	0x0f0c0906
 8017dc4:	0312      	.short	0x0312
            lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_INA, style);
 8017dc6:	2105      	movs	r1, #5
 8017dc8:	f7fe b9a2 	b.w	8016110 <lv_btnm_set_style>
            lv_btnm_set_style(kb, LV_BTNM_STYLE_BG, style);
 8017dcc:	2100      	movs	r1, #0
 8017dce:	f7fe b99f 	b.w	8016110 <lv_btnm_set_style>
            lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_REL, style);
 8017dd2:	2101      	movs	r1, #1
 8017dd4:	f7fe b99c 	b.w	8016110 <lv_btnm_set_style>
            lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_PR, style);
 8017dd8:	2102      	movs	r1, #2
 8017dda:	f7fe b999 	b.w	8016110 <lv_btnm_set_style>
            lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_TGL_REL, style);
 8017dde:	2103      	movs	r1, #3
 8017de0:	f7fe b996 	b.w	8016110 <lv_btnm_set_style>
            lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_TGL_PR, style);
 8017de4:	2104      	movs	r1, #4
 8017de6:	f7fe b993 	b.w	8016110 <lv_btnm_set_style>
 8017dea:	4770      	bx	lr

08017dec <lv_label_set_offset_y>:
    ext->offset.x = x;
    lv_obj_invalidate(label);
}

static void lv_label_set_offset_y(lv_obj_t * label, lv_coord_t y)
{
 8017dec:	b538      	push	{r3, r4, r5, lr}
 8017dee:	460d      	mov	r5, r1
 8017df0:	4604      	mov	r4, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8017df2:	f7f4 f891 	bl	800bf18 <lv_obj_get_ext_attr>
    ext->offset.y = y;
 8017df6:	8305      	strh	r5, [r0, #24]
    lv_obj_invalidate(label);
 8017df8:	4620      	mov	r0, r4
}
 8017dfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label);
 8017dfe:	f7f1 bf6f 	b.w	8009ce0 <lv_obj_invalidate>
 8017e02:	bf00      	nop

08017e04 <lv_label_set_offset_x>:
{
 8017e04:	b538      	push	{r3, r4, r5, lr}
 8017e06:	460d      	mov	r5, r1
 8017e08:	4604      	mov	r4, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8017e0a:	f7f4 f885 	bl	800bf18 <lv_obj_get_ext_attr>
    ext->offset.x = x;
 8017e0e:	82c5      	strh	r5, [r0, #22]
    lv_obj_invalidate(label);
 8017e10:	4620      	mov	r0, r4
}
 8017e12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label);
 8017e16:	f7f1 bf63 	b.w	8009ce0 <lv_obj_invalidate>
 8017e1a:	bf00      	nop

08017e1c <lv_label_design>:
    if(mode == LV_DESIGN_COVER_CHK) return false;
 8017e1c:	2a02      	cmp	r2, #2
 8017e1e:	d05c      	beq.n	8017eda <lv_label_design+0xbe>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 8017e20:	b10a      	cbz	r2, 8017e26 <lv_label_design+0xa>
    return true;
 8017e22:	2001      	movs	r0, #1
 8017e24:	4770      	bx	lr
{
 8017e26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e2a:	4604      	mov	r4, r0
 8017e2c:	b088      	sub	sp, #32
 8017e2e:	460f      	mov	r7, r1
        lv_style_t * style = lv_obj_get_style(label);
 8017e30:	f7f3 fff4 	bl	800be1c <lv_obj_get_style>
 8017e34:	4680      	mov	r8, r0
        lv_opa_t opa_scale = lv_obj_get_opa_scale(label);
 8017e36:	4620      	mov	r0, r4
 8017e38:	f7f4 f84e 	bl	800bed8 <lv_obj_get_opa_scale>
        lv_obj_get_coords(label, &coords);
 8017e3c:	a904      	add	r1, sp, #16
        lv_opa_t opa_scale = lv_obj_get_opa_scale(label);
 8017e3e:	4681      	mov	r9, r0
        lv_obj_get_coords(label, &coords);
 8017e40:	4620      	mov	r0, r4
 8017e42:	f7f3 ffcd 	bl	800bde0 <lv_obj_get_coords>
        lv_group_t * g = lv_obj_get_group(label);
 8017e46:	4620      	mov	r0, r4
 8017e48:	f7f4 f868 	bl	800bf1c <lv_obj_get_group>
        if(lv_group_get_focused(g) == label) {
 8017e4c:	f7f0 fb14 	bl	8008478 <lv_group_get_focused>
 8017e50:	4284      	cmp	r4, r0
 8017e52:	d06e      	beq.n	8017f32 <lv_label_design+0x116>
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8017e54:	4620      	mov	r0, r4
 8017e56:	f7f4 f85f 	bl	800bf18 <lv_obj_get_ext_attr>
        if(ext->body_draw) {
 8017e5a:	7e83      	ldrb	r3, [r0, #26]
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8017e5c:	4605      	mov	r5, r0
        if(ext->body_draw) {
 8017e5e:	0699      	lsls	r1, r3, #26
 8017e60:	d43d      	bmi.n	8017ede <lv_label_design+0xc2>
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 8017e62:	06da      	lsls	r2, r3, #27
        lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 8017e64:	f3c3 06c0 	ubfx	r6, r3, #3, #1
        if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 8017e68:	f003 0306 	and.w	r3, r3, #6
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 8017e6c:	bf48      	it	mi
 8017e6e:	f046 0602 	orrmi.w	r6, r6, #2
        if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 8017e72:	2b02      	cmp	r3, #2
 8017e74:	d05a      	beq.n	8017f2c <lv_label_design+0x110>
        if(ext->align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
 8017e76:	2b04      	cmp	r3, #4
 8017e78:	d00f      	beq.n	8017e9a <lv_label_design+0x7e>
        lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ext->offset);
 8017e7a:	f105 0116 	add.w	r1, r5, #22
 8017e7e:	9601      	str	r6, [sp, #4]
 8017e80:	a804      	add	r0, sp, #16
 8017e82:	464b      	mov	r3, r9
 8017e84:	9102      	str	r1, [sp, #8]
 8017e86:	4642      	mov	r2, r8
 8017e88:	682c      	ldr	r4, [r5, #0]
 8017e8a:	4639      	mov	r1, r7
 8017e8c:	9400      	str	r4, [sp, #0]
 8017e8e:	f7f5 fdbf 	bl	800da10 <lv_draw_label>
 8017e92:	2001      	movs	r0, #1
}
 8017e94:	b008      	add	sp, #32
 8017e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(ext->align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
 8017e9a:	f046 0608 	orr.w	r6, r6, #8
        if((ext->long_mode == LV_LABEL_LONG_ROLL) &&
 8017e9e:	792b      	ldrb	r3, [r5, #4]
 8017ea0:	2b04      	cmp	r3, #4
 8017ea2:	d1ea      	bne.n	8017e7a <lv_label_design+0x5e>
            lv_txt_get_size(&size, ext->text, style->text.font, style->text.letter_space, style->text.line_space, LV_COORD_MAX, flag);
 8017ea4:	f643 7eff 	movw	lr, #16383	; 0x3fff
 8017ea8:	f9b8 3030 	ldrsh.w	r3, [r8, #48]	; 0x30
 8017eac:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8017eb0:	a806      	add	r0, sp, #24
 8017eb2:	6829      	ldr	r1, [r5, #0]
 8017eb4:	f8cd e004 	str.w	lr, [sp, #4]
 8017eb8:	9602      	str	r6, [sp, #8]
 8017eba:	f9b8 e032 	ldrsh.w	lr, [r8, #50]	; 0x32
 8017ebe:	f8cd e000 	str.w	lr, [sp]
 8017ec2:	f7fb ff25 	bl	8013d10 <lv_txt_get_size>
            if(size.x > lv_obj_get_width(label)) {
 8017ec6:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8017eca:	4620      	mov	r0, r4
 8017ecc:	f7f3 ff9a 	bl	800be04 <lv_obj_get_width>
 8017ed0:	4582      	cmp	sl, r0
 8017ed2:	ddd2      	ble.n	8017e7a <lv_label_design+0x5e>
                flag &= ~LV_TXT_FLAG_CENTER;
 8017ed4:	f006 06f3 	and.w	r6, r6, #243	; 0xf3
 8017ed8:	e7cf      	b.n	8017e7a <lv_label_design+0x5e>
    if(mode == LV_DESIGN_COVER_CHK) return false;
 8017eda:	2000      	movs	r0, #0
 8017edc:	4770      	bx	lr
            lv_obj_get_coords(label, &bg);
 8017ede:	4620      	mov	r0, r4
 8017ee0:	a906      	add	r1, sp, #24
 8017ee2:	f7f3 ff7d 	bl	800bde0 <lv_obj_get_coords>
            bg.x1 -= style->body.padding.hor;
 8017ee6:	f8b8 2022 	ldrh.w	r2, [r8, #34]	; 0x22
            bg.x2 += style->body.padding.hor;
 8017eea:	f8bd 101c 	ldrh.w	r1, [sp, #28]
            lv_draw_rect(&bg, mask, style, lv_obj_get_opa_scale(label));
 8017eee:	4620      	mov	r0, r4
            bg.x1 -= style->body.padding.hor;
 8017ef0:	f8bd 6018 	ldrh.w	r6, [sp, #24]
            bg.y1 -= style->body.padding.ver;
 8017ef4:	f8b8 3020 	ldrh.w	r3, [r8, #32]
            bg.y2 += style->body.padding.ver;
 8017ef8:	f8bd e01e 	ldrh.w	lr, [sp, #30]
            bg.x1 -= style->body.padding.hor;
 8017efc:	1ab6      	subs	r6, r6, r2
            bg.x2 += style->body.padding.hor;
 8017efe:	440a      	add	r2, r1
            bg.y1 -= style->body.padding.ver;
 8017f00:	f8bd 101a 	ldrh.w	r1, [sp, #26]
            bg.x1 -= style->body.padding.hor;
 8017f04:	f8ad 6018 	strh.w	r6, [sp, #24]
            bg.y1 -= style->body.padding.ver;
 8017f08:	1ac9      	subs	r1, r1, r3
            bg.y2 += style->body.padding.ver;
 8017f0a:	4473      	add	r3, lr
            bg.x2 += style->body.padding.hor;
 8017f0c:	f8ad 201c 	strh.w	r2, [sp, #28]
            bg.y1 -= style->body.padding.ver;
 8017f10:	f8ad 101a 	strh.w	r1, [sp, #26]
            bg.y2 += style->body.padding.ver;
 8017f14:	f8ad 301e 	strh.w	r3, [sp, #30]
            lv_draw_rect(&bg, mask, style, lv_obj_get_opa_scale(label));
 8017f18:	f7f3 ffde 	bl	800bed8 <lv_obj_get_opa_scale>
 8017f1c:	4642      	mov	r2, r8
 8017f1e:	4603      	mov	r3, r0
 8017f20:	4639      	mov	r1, r7
 8017f22:	a806      	add	r0, sp, #24
 8017f24:	f7f7 feb6 	bl	800fc94 <lv_draw_rect>
 8017f28:	7eab      	ldrb	r3, [r5, #26]
 8017f2a:	e79a      	b.n	8017e62 <lv_label_design+0x46>
        if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 8017f2c:	f046 0604 	orr.w	r6, r6, #4
 8017f30:	e7b5      	b.n	8017e9e <lv_label_design+0x82>
            lv_draw_rect(&coords, mask, style, opa_scale);
 8017f32:	464b      	mov	r3, r9
 8017f34:	4642      	mov	r2, r8
 8017f36:	4639      	mov	r1, r7
 8017f38:	a804      	add	r0, sp, #16
 8017f3a:	f7f7 feab 	bl	800fc94 <lv_draw_rect>
 8017f3e:	e789      	b.n	8017e54 <lv_label_design+0x38>

08017f40 <lv_label_set_align>:
{
 8017f40:	b538      	push	{r3, r4, r5, lr}
 8017f42:	460c      	mov	r4, r1
 8017f44:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8017f46:	f7f3 ffe7 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->align == align) return;
 8017f4a:	7e83      	ldrb	r3, [r0, #26]
 8017f4c:	f3c3 0141 	ubfx	r1, r3, #1, #2
 8017f50:	42a1      	cmp	r1, r4
 8017f52:	d008      	beq.n	8017f66 <lv_label_set_align+0x26>
 8017f54:	4602      	mov	r2, r0
    ext->align = align;
 8017f56:	f364 0342 	bfi	r3, r4, #1, #2
    lv_obj_invalidate(label);       /*Enough to invalidate because alignment is only drawing related (lv_refr_label_text() not required)*/
 8017f5a:	4628      	mov	r0, r5
    ext->align = align;
 8017f5c:	7693      	strb	r3, [r2, #26]
}
 8017f5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label);       /*Enough to invalidate because alignment is only drawing related (lv_refr_label_text() not required)*/
 8017f62:	f7f1 bebd 	b.w	8009ce0 <lv_obj_invalidate>
 8017f66:	bd38      	pop	{r3, r4, r5, pc}

08017f68 <lv_label_get_text>:
{
 8017f68:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8017f6a:	f7f3 ffd5 	bl	800bf18 <lv_obj_get_ext_attr>
}
 8017f6e:	6800      	ldr	r0, [r0, #0]
 8017f70:	bd08      	pop	{r3, pc}
 8017f72:	bf00      	nop

08017f74 <lv_label_get_align>:
{
 8017f74:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8017f76:	f7f3 ffcf 	bl	800bf18 <lv_obj_get_ext_attr>
    return ext->align;
 8017f7a:	7e80      	ldrb	r0, [r0, #26]
}
 8017f7c:	f3c0 0041 	ubfx	r0, r0, #1, #2
 8017f80:	bd08      	pop	{r3, pc}
 8017f82:	bf00      	nop

08017f84 <lv_label_get_letter_pos>:
{
 8017f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f88:	4605      	mov	r5, r0
 8017f8a:	b08b      	sub	sp, #44	; 0x2c
 8017f8c:	460c      	mov	r4, r1
 8017f8e:	9207      	str	r2, [sp, #28]
 8017f90:	9008      	str	r0, [sp, #32]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8017f92:	f7f3 ffc1 	bl	800bf18 <lv_obj_get_ext_attr>
    return ext->text;
 8017f96:	6806      	ldr	r6, [r0, #0]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8017f98:	4628      	mov	r0, r5
 8017f9a:	f7f3 ffbd 	bl	800bf18 <lv_obj_get_ext_attr>
 8017f9e:	4680      	mov	r8, r0
 8017fa0:	9005      	str	r0, [sp, #20]
    lv_coord_t max_w = lv_obj_get_width(label);
 8017fa2:	4628      	mov	r0, r5
 8017fa4:	f7f3 ff2e 	bl	800be04 <lv_obj_get_width>
 8017fa8:	4682      	mov	sl, r0
    lv_style_t * style = lv_obj_get_style(label);
 8017faa:	4628      	mov	r0, r5
 8017fac:	f7f3 ff36 	bl	800be1c <lv_obj_get_style>
    const lv_font_t * font = style->text.font;
 8017fb0:	f8d0 b02c 	ldr.w	fp, [r0, #44]	; 0x2c
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 8017fb4:	f898 301a 	ldrb.w	r3, [r8, #26]
    lv_style_t * style = lv_obj_get_style(label);
 8017fb8:	4607      	mov	r7, r0
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline uint8_t lv_font_get_height(const lv_font_t * font_p)
{
    return font_p->h_px;
 8017fba:	f89b 1020 	ldrb.w	r1, [fp, #32]
    lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 8017fbe:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8017fc2:	9103      	str	r1, [sp, #12]
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 8017fc4:	06d9      	lsls	r1, r3, #27
    lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 8017fc6:	9204      	str	r2, [sp, #16]
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 8017fc8:	d502      	bpl.n	8017fd0 <lv_label_get_letter_pos+0x4c>
 8017fca:	f042 0202 	orr.w	r2, r2, #2
 8017fce:	9204      	str	r2, [sp, #16]
    if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 8017fd0:	f003 0306 	and.w	r3, r3, #6
 8017fd4:	2b02      	cmp	r3, #2
 8017fd6:	d072      	beq.n	80180be <lv_label_get_letter_pos+0x13a>
    if(ext->long_mode == LV_LABEL_LONG_EXPAND || ext->long_mode == LV_LABEL_LONG_SCROLL) {
 8017fd8:	9b05      	ldr	r3, [sp, #20]
        max_w = LV_COORD_MAX;
 8017fda:	f643 72ff 	movw	r2, #16383	; 0x3fff
    index = lv_txt_encoded_get_byte_id(txt, index);
 8017fde:	4621      	mov	r1, r4
    if(ext->long_mode == LV_LABEL_LONG_EXPAND || ext->long_mode == LV_LABEL_LONG_SCROLL) {
 8017fe0:	7918      	ldrb	r0, [r3, #4]
    index = lv_txt_encoded_get_byte_id(txt, index);
 8017fe2:	4b54      	ldr	r3, [pc, #336]	; (8018134 <lv_label_get_letter_pos+0x1b0>)
        max_w = LV_COORD_MAX;
 8017fe4:	f010 0ffd 	tst.w	r0, #253	; 0xfd
    index = lv_txt_encoded_get_byte_id(txt, index);
 8017fe8:	4630      	mov	r0, r6
 8017fea:	681b      	ldr	r3, [r3, #0]
        max_w = LV_COORD_MAX;
 8017fec:	bf08      	it	eq
 8017fee:	4692      	moveq	sl, r2
    index = lv_txt_encoded_get_byte_id(txt, index);
 8017ff0:	4798      	blx	r3
    while(txt[new_line_start] != '\0') {
 8017ff2:	7834      	ldrb	r4, [r6, #0]
    index = lv_txt_encoded_get_byte_id(txt, index);
 8017ff4:	b283      	uxth	r3, r0
 8017ff6:	9306      	str	r3, [sp, #24]
    while(txt[new_line_start] != '\0') {
 8017ff8:	2c00      	cmp	r4, #0
 8017ffa:	f000 8095 	beq.w	8018128 <lv_label_get_letter_pos+0x1a4>
 8017ffe:	2400      	movs	r4, #0
 8018000:	4699      	mov	r9, r3
 8018002:	4630      	mov	r0, r6
 8018004:	9d04      	ldr	r5, [sp, #16]
 8018006:	46a0      	mov	r8, r4
 8018008:	e007      	b.n	801801a <lv_label_get_letter_pos+0x96>
        if(index < new_line_start || txt[new_line_start] == '\0') break; /*The line of 'index' letter begins at 'line_start'*/
 801800a:	5cb3      	ldrb	r3, [r6, r2]
 801800c:	b193      	cbz	r3, 8018034 <lv_label_get_letter_pos+0xb0>
        y += letter_height + style->text.line_space;
 801800e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8018010:	4690      	mov	r8, r2
 8018012:	9a03      	ldr	r2, [sp, #12]
 8018014:	4413      	add	r3, r2
 8018016:	441c      	add	r4, r3
 8018018:	b224      	sxth	r4, r4
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
 801801a:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 801801e:	4653      	mov	r3, sl
 8018020:	9500      	str	r5, [sp, #0]
 8018022:	4659      	mov	r1, fp
 8018024:	f7fb fd34 	bl	8013a90 <lv_txt_get_next_line>
 8018028:	eb00 0208 	add.w	r2, r0, r8
        if(index < new_line_start || txt[new_line_start] == '\0') break; /*The line of 'index' letter begins at 'line_start'*/
 801802c:	4591      	cmp	r9, r2
 801802e:	eb06 0002 	add.w	r0, r6, r2
 8018032:	d2ea      	bcs.n	801800a <lv_label_get_letter_pos+0x86>
 8018034:	4615      	mov	r5, r2
 8018036:	9b06      	ldr	r3, [sp, #24]
    if(index > 0) {
 8018038:	b13b      	cbz	r3, 801804a <lv_label_get_letter_pos+0xc6>
        if((txt[index - 1] == '\n' || txt[index - 1] == '\r') && txt[index] == '\0') {
 801803a:	eb06 0a09 	add.w	sl, r6, r9
 801803e:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
 8018042:	2b0a      	cmp	r3, #10
 8018044:	d026      	beq.n	8018094 <lv_label_get_letter_pos+0x110>
 8018046:	2b0d      	cmp	r3, #13
 8018048:	d024      	beq.n	8018094 <lv_label_get_letter_pos+0x110>
    lv_coord_t x = lv_txt_get_width(&txt[line_start], index - line_start,
 801804a:	fa1f f388 	uxth.w	r3, r8
 801804e:	9806      	ldr	r0, [sp, #24]
 8018050:	eb06 0a08 	add.w	sl, r6, r8
 8018054:	9e04      	ldr	r6, [sp, #16]
 8018056:	4619      	mov	r1, r3
 8018058:	9309      	str	r3, [sp, #36]	; 0x24
 801805a:	465a      	mov	r2, fp
 801805c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8018060:	1a41      	subs	r1, r0, r1
 8018062:	9600      	str	r6, [sp, #0]
 8018064:	4650      	mov	r0, sl
 8018066:	b289      	uxth	r1, r1
 8018068:	f7fb ff26 	bl	8013eb8 <lv_txt_get_width>
    if(index != line_start) x += style->text.letter_space;
 801806c:	45c1      	cmp	r9, r8
    lv_coord_t x = lv_txt_get_width(&txt[line_start], index - line_start,
 801806e:	4606      	mov	r6, r0
    if(index != line_start) x += style->text.letter_space;
 8018070:	d002      	beq.n	8018078 <lv_label_get_letter_pos+0xf4>
 8018072:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8018074:	441e      	add	r6, r3
 8018076:	b236      	sxth	r6, r6
    if(ext->align == LV_LABEL_ALIGN_CENTER) {
 8018078:	9b05      	ldr	r3, [sp, #20]
 801807a:	7e9b      	ldrb	r3, [r3, #26]
 801807c:	f003 0306 	and.w	r3, r3, #6
 8018080:	2b02      	cmp	r3, #2
 8018082:	d034      	beq.n	80180ee <lv_label_get_letter_pos+0x16a>
    } else if(ext->align == LV_LABEL_ALIGN_RIGHT) {
 8018084:	2b04      	cmp	r3, #4
 8018086:	d01f      	beq.n	80180c8 <lv_label_get_letter_pos+0x144>
    pos->x = x;
 8018088:	9a07      	ldr	r2, [sp, #28]
 801808a:	8016      	strh	r6, [r2, #0]
    pos->y = y;
 801808c:	8054      	strh	r4, [r2, #2]
}
 801808e:	b00b      	add	sp, #44	; 0x2c
 8018090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if((txt[index - 1] == '\n' || txt[index - 1] == '\r') && txt[index] == '\0') {
 8018094:	f816 1009 	ldrb.w	r1, [r6, r9]
 8018098:	2900      	cmp	r1, #0
 801809a:	d1d6      	bne.n	801804a <lv_label_get_letter_pos+0xc6>
    lv_coord_t x = lv_txt_get_width(&txt[line_start], index - line_start,
 801809c:	9806      	ldr	r0, [sp, #24]
            y += letter_height + style->text.line_space;
 801809e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
    lv_coord_t x = lv_txt_get_width(&txt[line_start], index - line_start,
 80180a0:	9009      	str	r0, [sp, #36]	; 0x24
            y += letter_height + style->text.line_space;
 80180a2:	9803      	ldr	r0, [sp, #12]
    lv_coord_t x = lv_txt_get_width(&txt[line_start], index - line_start,
 80180a4:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
            y += letter_height + style->text.line_space;
 80180a8:	4410      	add	r0, r2
    lv_coord_t x = lv_txt_get_width(&txt[line_start], index - line_start,
 80180aa:	9a04      	ldr	r2, [sp, #16]
            y += letter_height + style->text.line_space;
 80180ac:	4404      	add	r4, r0
    lv_coord_t x = lv_txt_get_width(&txt[line_start], index - line_start,
 80180ae:	9200      	str	r2, [sp, #0]
 80180b0:	4650      	mov	r0, sl
 80180b2:	465a      	mov	r2, fp
 80180b4:	f7fb ff00 	bl	8013eb8 <lv_txt_get_width>
 80180b8:	4606      	mov	r6, r0
            y += letter_height + style->text.line_space;
 80180ba:	b224      	sxth	r4, r4
 80180bc:	e7dc      	b.n	8018078 <lv_label_get_letter_pos+0xf4>
    if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 80180be:	9b04      	ldr	r3, [sp, #16]
 80180c0:	f043 0304 	orr.w	r3, r3, #4
 80180c4:	9304      	str	r3, [sp, #16]
 80180c6:	e787      	b.n	8017fd8 <lv_label_get_letter_pos+0x54>
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start,
 80180c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80180ca:	4650      	mov	r0, sl
 80180cc:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80180d0:	1aa9      	subs	r1, r5, r2
 80180d2:	9a04      	ldr	r2, [sp, #16]
 80180d4:	b289      	uxth	r1, r1
 80180d6:	9200      	str	r2, [sp, #0]
 80180d8:	465a      	mov	r2, fp
 80180da:	f7fb feed 	bl	8013eb8 <lv_txt_get_width>
 80180de:	4605      	mov	r5, r0
        x += lv_obj_get_width(label) - line_w;
 80180e0:	9808      	ldr	r0, [sp, #32]
 80180e2:	f7f3 fe8f 	bl	800be04 <lv_obj_get_width>
 80180e6:	1b40      	subs	r0, r0, r5
 80180e8:	4406      	add	r6, r0
 80180ea:	b236      	sxth	r6, r6
 80180ec:	e7cc      	b.n	8018088 <lv_label_get_letter_pos+0x104>
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start,
 80180ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80180f0:	4650      	mov	r0, sl
 80180f2:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80180f6:	1aa9      	subs	r1, r5, r2
 80180f8:	9a04      	ldr	r2, [sp, #16]
 80180fa:	b289      	uxth	r1, r1
 80180fc:	9200      	str	r2, [sp, #0]
 80180fe:	465a      	mov	r2, fp
 8018100:	f7fb feda 	bl	8013eb8 <lv_txt_get_width>
 8018104:	4605      	mov	r5, r0
        x += lv_obj_get_width(label) / 2 - line_w / 2;
 8018106:	9808      	ldr	r0, [sp, #32]
 8018108:	f7f3 fe7c 	bl	800be04 <lv_obj_get_width>
 801810c:	2800      	cmp	r0, #0
 801810e:	bfb8      	it	lt
 8018110:	3001      	addlt	r0, #1
 8018112:	2d00      	cmp	r5, #0
 8018114:	bfb8      	it	lt
 8018116:	3501      	addlt	r5, #1
 8018118:	f340 034f 	sbfx	r3, r0, #1, #16
 801811c:	f345 054f 	sbfx	r5, r5, #1, #16
 8018120:	1b5b      	subs	r3, r3, r5
 8018122:	441e      	add	r6, r3
 8018124:	b236      	sxth	r6, r6
 8018126:	e7af      	b.n	8018088 <lv_label_get_letter_pos+0x104>
 8018128:	fa1f f980 	uxth.w	r9, r0
    uint32_t line_start = 0;
 801812c:	46a0      	mov	r8, r4
 801812e:	4625      	mov	r5, r4
 8018130:	e782      	b.n	8018038 <lv_label_get_letter_pos+0xb4>
 8018132:	bf00      	nop
 8018134:	200002e8 	.word	0x200002e8

08018138 <lv_label_get_letter_on>:
{
 8018138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801813c:	4604      	mov	r4, r0
 801813e:	b089      	sub	sp, #36	; 0x24
 8018140:	9102      	str	r1, [sp, #8]
 8018142:	9005      	str	r0, [sp, #20]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8018144:	f7f3 fee8 	bl	800bf18 <lv_obj_get_ext_attr>
    return ext->text;
 8018148:	6806      	ldr	r6, [r0, #0]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801814a:	4620      	mov	r0, r4
 801814c:	f7f3 fee4 	bl	800bf18 <lv_obj_get_ext_attr>
 8018150:	4605      	mov	r5, r0
 8018152:	9004      	str	r0, [sp, #16]
    lv_coord_t max_w = lv_obj_get_width(label);
 8018154:	4620      	mov	r0, r4
 8018156:	f7f3 fe55 	bl	800be04 <lv_obj_get_width>
 801815a:	4683      	mov	fp, r0
    lv_style_t * style = lv_obj_get_style(label);
 801815c:	4620      	mov	r0, r4
 801815e:	f7f3 fe5d 	bl	800be1c <lv_obj_get_style>
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 8018162:	7eab      	ldrb	r3, [r5, #26]
    const lv_font_t * font = style->text.font;
 8018164:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
    lv_style_t * style = lv_obj_get_style(label);
 8018168:	4607      	mov	r7, r0
    lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 801816a:	f3c3 02c0 	ubfx	r2, r3, #3, #1
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 801816e:	06d9      	lsls	r1, r3, #27
 8018170:	f898 9020 	ldrb.w	r9, [r8, #32]
    lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 8018174:	9203      	str	r2, [sp, #12]
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 8018176:	d502      	bpl.n	801817e <lv_label_get_letter_on+0x46>
 8018178:	f042 0202 	orr.w	r2, r2, #2
 801817c:	9203      	str	r2, [sp, #12]
    if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 801817e:	f003 0306 	and.w	r3, r3, #6
 8018182:	2b02      	cmp	r3, #2
 8018184:	f000 80b1 	beq.w	80182ea <lv_label_get_letter_on+0x1b2>
    if(ext->long_mode == LV_LABEL_LONG_EXPAND || ext->long_mode == LV_LABEL_LONG_SCROLL) {
 8018188:	9a04      	ldr	r2, [sp, #16]
    while(txt[line_start] != '\0') {
 801818a:	7835      	ldrb	r5, [r6, #0]
    if(ext->long_mode == LV_LABEL_LONG_EXPAND || ext->long_mode == LV_LABEL_LONG_SCROLL) {
 801818c:	7911      	ldrb	r1, [r2, #4]
        max_w = LV_COORD_MAX;
 801818e:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8018192:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 8018196:	bf08      	it	eq
 8018198:	4693      	moveq	fp, r2
    while(txt[line_start] != '\0') {
 801819a:	2d00      	cmp	r5, #0
 801819c:	f000 80aa 	beq.w	80182f4 <lv_label_get_letter_on+0x1bc>
 80181a0:	2400      	movs	r4, #0
 80181a2:	46b2      	mov	sl, r6
 80181a4:	4625      	mov	r5, r4
 80181a6:	e009      	b.n	80181bc <lv_label_get_letter_on+0x84>
        y += letter_height + style->text.line_space;
 80181a8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
    while(txt[line_start] != '\0') {
 80181aa:	eb06 0a00 	add.w	sl, r6, r0
 80181ae:	5c32      	ldrb	r2, [r6, r0]
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
 80181b0:	4605      	mov	r5, r0
        y += letter_height + style->text.line_space;
 80181b2:	444b      	add	r3, r9
 80181b4:	441c      	add	r4, r3
 80181b6:	b224      	sxth	r4, r4
    while(txt[line_start] != '\0') {
 80181b8:	2a00      	cmp	r2, #0
 80181ba:	d06f      	beq.n	801829c <lv_label_get_letter_on+0x164>
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
 80181bc:	9903      	ldr	r1, [sp, #12]
 80181be:	465b      	mov	r3, fp
 80181c0:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80181c4:	4650      	mov	r0, sl
 80181c6:	9100      	str	r1, [sp, #0]
 80181c8:	4641      	mov	r1, r8
 80181ca:	f7fb fc61 	bl	8013a90 <lv_txt_get_next_line>
        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 80181ce:	9b02      	ldr	r3, [sp, #8]
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
 80181d0:	4428      	add	r0, r5
        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 80181d2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80181d6:	eb04 0309 	add.w	r3, r4, r9
 80181da:	429a      	cmp	r2, r3
 80181dc:	dce4      	bgt.n	80181a8 <lv_label_get_letter_on+0x70>
 80181de:	9b04      	ldr	r3, [sp, #16]
 80181e0:	f100 39ff 	add.w	r9, r0, #4294967295
 80181e4:	7e9b      	ldrb	r3, [r3, #26]
 80181e6:	f003 0306 	and.w	r3, r3, #6
    if(ext->align == LV_LABEL_ALIGN_CENTER) {
 80181ea:	2b02      	cmp	r3, #2
 80181ec:	d05e      	beq.n	80182ac <lv_label_get_letter_on+0x174>
    lv_coord_t x = 0;
 80181ee:	2400      	movs	r4, #0
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 80181f0:	2300      	movs	r3, #0
    uint32_t i = line_start;
 80181f2:	9507      	str	r5, [sp, #28]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 80181f4:	f88d 301b 	strb.w	r3, [sp, #27]
 80181f8:	9b03      	ldr	r3, [sp, #12]
 80181fa:	07db      	lsls	r3, r3, #31
 80181fc:	d532      	bpl.n	8018264 <lv_label_get_letter_on+0x12c>
    uint32_t i = line_start;
 80181fe:	46aa      	mov	sl, r5
        letter = lv_txt_encoded_next(txt, &i);    /*Be careful 'i' already points to the next character*/
 8018200:	f8df b100 	ldr.w	fp, [pc, #256]	; 8018304 <lv_label_get_letter_on+0x1cc>
    while(i < new_line_start - 1) {
 8018204:	45a9      	cmp	r9, r5
        letter = lv_txt_encoded_next(txt, &i);    /*Be careful 'i' already points to the next character*/
 8018206:	a907      	add	r1, sp, #28
 8018208:	4630      	mov	r0, r6
    while(i < new_line_start - 1) {
 801820a:	d910      	bls.n	801822e <lv_label_get_letter_on+0xf6>
        letter = lv_txt_encoded_next(txt, &i);    /*Be careful 'i' already points to the next character*/
 801820c:	f8db 3000 	ldr.w	r3, [fp]
 8018210:	4798      	blx	r3
            if(lv_txt_is_cmd(&cmd_state, txt[i]) != false) {
 8018212:	9b07      	ldr	r3, [sp, #28]
        letter = lv_txt_encoded_next(txt, &i);    /*Be careful 'i' already points to the next character*/
 8018214:	4605      	mov	r5, r0
            if(lv_txt_is_cmd(&cmd_state, txt[i]) != false) {
 8018216:	f10d 001b 	add.w	r0, sp, #27
 801821a:	5cf1      	ldrb	r1, [r6, r3]
 801821c:	f7fb feb8 	bl	8013f90 <lv_txt_is_cmd>
        x += lv_font_get_width(font, letter);
 8018220:	4629      	mov	r1, r5
            if(lv_txt_is_cmd(&cmd_state, txt[i]) != false) {
 8018222:	b168      	cbz	r0, 8018240 <lv_label_get_letter_on+0x108>
 8018224:	9d07      	ldr	r5, [sp, #28]
        letter = lv_txt_encoded_next(txt, &i);    /*Be careful 'i' already points to the next character*/
 8018226:	a907      	add	r1, sp, #28
 8018228:	4630      	mov	r0, r6
    while(i < new_line_start - 1) {
 801822a:	45a9      	cmp	r9, r5
 801822c:	d8ee      	bhi.n	801820c <lv_label_get_letter_on+0xd4>
    return lv_encoded_get_char_id(txt, i);
 801822e:	4b34      	ldr	r3, [pc, #208]	; (8018300 <lv_label_get_letter_on+0x1c8>)
 8018230:	4629      	mov	r1, r5
 8018232:	4630      	mov	r0, r6
 8018234:	681b      	ldr	r3, [r3, #0]
 8018236:	4798      	blx	r3
}
 8018238:	b280      	uxth	r0, r0
 801823a:	b009      	add	sp, #36	; 0x24
 801823c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        x += lv_font_get_width(font, letter);
 8018240:	4640      	mov	r0, r8
 8018242:	f7fa fd4f 	bl	8012ce4 <lv_font_get_width>
 8018246:	4420      	add	r0, r4
        if(pos->x < x) {
 8018248:	9b02      	ldr	r3, [sp, #8]
        x += lv_font_get_width(font, letter);
 801824a:	b280      	uxth	r0, r0
        if(pos->x < x) {
 801824c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018250:	b203      	sxth	r3, r0
 8018252:	429a      	cmp	r2, r3
 8018254:	db46      	blt.n	80182e4 <lv_label_get_letter_on+0x1ac>
        x += style->text.letter_space;
 8018256:	8e3c      	ldrh	r4, [r7, #48]	; 0x30
        i_current = i;
 8018258:	f8dd a01c 	ldr.w	sl, [sp, #28]
        x += style->text.letter_space;
 801825c:	4420      	add	r0, r4
        i_current = i;
 801825e:	4655      	mov	r5, sl
        x += style->text.letter_space;
 8018260:	b204      	sxth	r4, r0
 8018262:	e7cf      	b.n	8018204 <lv_label_get_letter_on+0xcc>
        letter = lv_txt_encoded_next(txt, &i);    /*Be careful 'i' already points to the next character*/
 8018264:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8018304 <lv_label_get_letter_on+0x1cc>
 8018268:	f8dd b008 	ldr.w	fp, [sp, #8]
 801826c:	e011      	b.n	8018292 <lv_label_get_letter_on+0x15a>
 801826e:	f8da 3000 	ldr.w	r3, [sl]
 8018272:	4798      	blx	r3
        x += lv_font_get_width(font, letter);
 8018274:	4601      	mov	r1, r0
 8018276:	4640      	mov	r0, r8
 8018278:	f7fa fd34 	bl	8012ce4 <lv_font_get_width>
 801827c:	4420      	add	r0, r4
        if(pos->x < x) {
 801827e:	f9bb 2000 	ldrsh.w	r2, [fp]
        x += lv_font_get_width(font, letter);
 8018282:	b280      	uxth	r0, r0
        if(pos->x < x) {
 8018284:	b203      	sxth	r3, r0
 8018286:	429a      	cmp	r2, r3
 8018288:	db2d      	blt.n	80182e6 <lv_label_get_letter_on+0x1ae>
        x += style->text.letter_space;
 801828a:	8e3c      	ldrh	r4, [r7, #48]	; 0x30
        i_current = i;
 801828c:	9d07      	ldr	r5, [sp, #28]
        x += style->text.letter_space;
 801828e:	4420      	add	r0, r4
 8018290:	b204      	sxth	r4, r0
    while(i < new_line_start - 1) {
 8018292:	454d      	cmp	r5, r9
        letter = lv_txt_encoded_next(txt, &i);    /*Be careful 'i' already points to the next character*/
 8018294:	a907      	add	r1, sp, #28
 8018296:	4630      	mov	r0, r6
    while(i < new_line_start - 1) {
 8018298:	d3e9      	bcc.n	801826e <lv_label_get_letter_on+0x136>
 801829a:	e7c8      	b.n	801822e <lv_label_get_letter_on+0xf6>
 801829c:	9b04      	ldr	r3, [sp, #16]
 801829e:	f100 39ff 	add.w	r9, r0, #4294967295
 80182a2:	7e9b      	ldrb	r3, [r3, #26]
 80182a4:	f003 0306 	and.w	r3, r3, #6
    if(ext->align == LV_LABEL_ALIGN_CENTER) {
 80182a8:	2b02      	cmp	r3, #2
 80182aa:	d1a0      	bne.n	80181ee <lv_label_get_letter_on+0xb6>
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start,
 80182ac:	9a03      	ldr	r2, [sp, #12]
 80182ae:	1b41      	subs	r1, r0, r5
 80182b0:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80182b4:	4650      	mov	r0, sl
 80182b6:	9200      	str	r2, [sp, #0]
 80182b8:	b289      	uxth	r1, r1
 80182ba:	4642      	mov	r2, r8
 80182bc:	f7fb fdfc 	bl	8013eb8 <lv_txt_get_width>
 80182c0:	4682      	mov	sl, r0
        x += lv_obj_get_width(label) / 2 - line_w / 2;
 80182c2:	9805      	ldr	r0, [sp, #20]
 80182c4:	f7f3 fd9e 	bl	800be04 <lv_obj_get_width>
 80182c8:	2800      	cmp	r0, #0
 80182ca:	bfb8      	it	lt
 80182cc:	3001      	addlt	r0, #1
 80182ce:	f1ba 0f00 	cmp.w	sl, #0
 80182d2:	ea4f 0460 	mov.w	r4, r0, asr #1
 80182d6:	bfb8      	it	lt
 80182d8:	f10a 0a01 	addlt.w	sl, sl, #1
 80182dc:	eba4 046a 	sub.w	r4, r4, sl, asr #1
 80182e0:	b224      	sxth	r4, r4
 80182e2:	e785      	b.n	80181f0 <lv_label_get_letter_on+0xb8>
 80182e4:	4655      	mov	r5, sl
            i = i_current;
 80182e6:	9507      	str	r5, [sp, #28]
            break;
 80182e8:	e7a1      	b.n	801822e <lv_label_get_letter_on+0xf6>
    if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 80182ea:	9a03      	ldr	r2, [sp, #12]
 80182ec:	f042 0204 	orr.w	r2, r2, #4
 80182f0:	9203      	str	r2, [sp, #12]
 80182f2:	e749      	b.n	8018188 <lv_label_get_letter_on+0x50>
    while(txt[line_start] != '\0') {
 80182f4:	46b2      	mov	sl, r6
 80182f6:	f04f 39ff 	mov.w	r9, #4294967295
 80182fa:	4628      	mov	r0, r5
 80182fc:	e775      	b.n	80181ea <lv_label_get_letter_on+0xb2>
 80182fe:	bf00      	nop
 8018300:	200002f0 	.word	0x200002f0
 8018304:	200002e0 	.word	0x200002e0

08018308 <lv_label_refr_text>:
{
 8018308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801830c:	b093      	sub	sp, #76	; 0x4c
 801830e:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8018310:	f7f3 fe02 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->text == NULL) return;
 8018314:	6803      	ldr	r3, [r0, #0]
 8018316:	b38b      	cbz	r3, 801837c <lv_label_refr_text+0x74>
 8018318:	4604      	mov	r4, r0
    lv_coord_t max_w = lv_obj_get_width(label);
 801831a:	4628      	mov	r0, r5
 801831c:	f7f3 fd72 	bl	800be04 <lv_obj_get_width>
 8018320:	4606      	mov	r6, r0
    lv_style_t * style = lv_obj_get_style(label);
 8018322:	4628      	mov	r0, r5
 8018324:	f7f3 fd7a 	bl	800be1c <lv_obj_get_style>
    if(ext->long_mode == LV_LABEL_LONG_EXPAND ||
 8018328:	7921      	ldrb	r1, [r4, #4]
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 801832a:	7ea3      	ldrb	r3, [r4, #26]
        max_w = LV_COORD_MAX;
 801832c:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8018330:	f011 0ffd 	tst.w	r1, #253	; 0xfd
    const lv_font_t * font = style->text.font;
 8018334:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
    lv_style_t * style = lv_obj_get_style(label);
 8018336:	4680      	mov	r8, r0
    lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 8018338:	f3c3 00c0 	ubfx	r0, r3, #3, #1
        max_w = LV_COORD_MAX;
 801833c:	bf08      	it	eq
 801833e:	4616      	moveq	r6, r2
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 8018340:	06db      	lsls	r3, r3, #27
    lv_txt_get_size(&size, ext->text, font, style->text.letter_space, style->text.line_space, max_w, flag);
 8018342:	6821      	ldr	r1, [r4, #0]
 8018344:	463a      	mov	r2, r7
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 8018346:	bf48      	it	mi
 8018348:	f040 0002 	orrmi.w	r0, r0, #2
    lv_txt_get_size(&size, ext->text, font, style->text.letter_space, style->text.line_space, max_w, flag);
 801834c:	f9b8 3030 	ldrsh.w	r3, [r8, #48]	; 0x30
 8018350:	9601      	str	r6, [sp, #4]
 8018352:	9002      	str	r0, [sp, #8]
 8018354:	a807      	add	r0, sp, #28
 8018356:	f9b8 6032 	ldrsh.w	r6, [r8, #50]	; 0x32
 801835a:	9600      	str	r6, [sp, #0]
 801835c:	f7fb fcd8 	bl	8013d10 <lv_txt_get_size>
    if(ext->long_mode == LV_LABEL_LONG_EXPAND || ext->long_mode == LV_LABEL_LONG_SCROLL) {
 8018360:	7923      	ldrb	r3, [r4, #4]
 8018362:	f013 06fd 	ands.w	r6, r3, #253	; 0xfd
 8018366:	d00c      	beq.n	8018382 <lv_label_refr_text+0x7a>
    else if(ext->long_mode == LV_LABEL_LONG_ROLL) {
 8018368:	2b04      	cmp	r3, #4
 801836a:	d06d      	beq.n	8018448 <lv_label_refr_text+0x140>
    } else if(ext->long_mode == LV_LABEL_LONG_DOT) {
 801836c:	2b03      	cmp	r3, #3
 801836e:	f000 80aa 	beq.w	80184c6 <lv_label_refr_text+0x1be>
    else if(ext->long_mode == LV_LABEL_LONG_BREAK) {
 8018372:	2b01      	cmp	r3, #1
 8018374:	d062      	beq.n	801843c <lv_label_refr_text+0x134>
    lv_obj_invalidate(label);
 8018376:	4628      	mov	r0, r5
 8018378:	f7f1 fcb2 	bl	8009ce0 <lv_obj_invalidate>
}
 801837c:	b013      	add	sp, #76	; 0x4c
 801837e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_obj_set_size(label, size.x, size.y);
 8018382:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 8018386:	4628      	mov	r0, r5
 8018388:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
 801838c:	f7f2 fc26 	bl	800abdc <lv_obj_set_size>
        if(ext->long_mode == LV_LABEL_LONG_SCROLL) {
 8018390:	7923      	ldrb	r3, [r4, #4]
 8018392:	2b02      	cmp	r3, #2
 8018394:	d1ef      	bne.n	8018376 <lv_label_refr_text+0x6e>
            lv_anim_del(label, (lv_anim_fp_t) lv_obj_set_x);
 8018396:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 8018658 <lv_label_refr_text+0x350>
            lv_obj_t * parent = lv_obj_get_parent(label);
 801839a:	4628      	mov	r0, r5
            lv_anim_del(label, (lv_anim_fp_t) lv_obj_set_y);
 801839c:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 801865c <lv_label_refr_text+0x354>
            lv_obj_t * parent = lv_obj_get_parent(label);
 80183a0:	f7f3 fd10 	bl	800bdc4 <lv_obj_get_parent>
            lv_anim_del(label, (lv_anim_fp_t) lv_obj_set_x);
 80183a4:	4651      	mov	r1, sl
            lv_obj_t * parent = lv_obj_get_parent(label);
 80183a6:	4681      	mov	r9, r0
            lv_anim_del(label, (lv_anim_fp_t) lv_obj_set_x);
 80183a8:	4628      	mov	r0, r5
 80183aa:	f7fa fadf 	bl	801296c <lv_anim_del>
            lv_anim_del(label, (lv_anim_fp_t) lv_obj_set_y);
 80183ae:	4659      	mov	r1, fp
 80183b0:	4628      	mov	r0, r5
 80183b2:	f7fa fadb 	bl	801296c <lv_anim_del>
            anim.repeat = 1;
 80183b6:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
            anim.path = lv_anim_path_linear;
 80183ba:	4aa2      	ldr	r2, [pc, #648]	; (8018644 <lv_label_refr_text+0x33c>)
            anim.playback_pause = (((lv_font_get_width(style->text.font, ' ') +
 80183bc:	2120      	movs	r1, #32
            anim.playback = 1;
 80183be:	f043 0303 	orr.w	r3, r3, #3
            anim.start = 0;
 80183c2:	960d      	str	r6, [sp, #52]	; 0x34
            anim.var = label;
 80183c4:	9509      	str	r5, [sp, #36]	; 0x24
            anim.playback = 1;
 80183c6:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
            anim.playback_pause = (((lv_font_get_width(style->text.font, ' ') +
 80183ca:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
            anim.act_time = 0;
 80183ce:	f8ad 603e 	strh.w	r6, [sp, #62]	; 0x3e
            anim.end_cb = NULL;
 80183d2:	960b      	str	r6, [sp, #44]	; 0x2c
            anim.path = lv_anim_path_linear;
 80183d4:	920c      	str	r2, [sp, #48]	; 0x30
            anim.playback_pause = (((lv_font_get_width(style->text.font, ' ') +
 80183d6:	f7fa fc85 	bl	8012ce4 <lv_font_get_width>
                                     style->text.letter_space) * 1000) / ext->anim_speed) * ANIM_WAIT_CHAR_COUNT;
 80183da:	f9b8 2030 	ldrsh.w	r2, [r8, #48]	; 0x30
 80183de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80183e2:	8aa1      	ldrh	r1, [r4, #20]
            anim.playback_pause = (((lv_font_get_width(style->text.font, ' ') +
 80183e4:	4402      	add	r2, r0
            if(lv_obj_get_width(label) > lv_obj_get_width(parent)) {
 80183e6:	4628      	mov	r0, r5
                                     style->text.letter_space) * 1000) / ext->anim_speed) * ANIM_WAIT_CHAR_COUNT;
 80183e8:	fb03 f302 	mul.w	r3, r3, r2
 80183ec:	fb93 f3f1 	sdiv	r3, r3, r1
            anim.playback_pause = (((lv_font_get_width(style->text.font, ' ') +
 80183f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80183f4:	b29b      	uxth	r3, r3
 80183f6:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            anim.repeat_pause = anim.playback_pause;
 80183fa:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            if(lv_obj_get_width(label) > lv_obj_get_width(parent)) {
 80183fe:	f7f3 fd01 	bl	800be04 <lv_obj_get_width>
 8018402:	4606      	mov	r6, r0
 8018404:	4648      	mov	r0, r9
 8018406:	f7f3 fcfd 	bl	800be04 <lv_obj_get_width>
 801840a:	4286      	cmp	r6, r0
 801840c:	f340 80cf 	ble.w	80185ae <lv_label_refr_text+0x2a6>
                anim.end = lv_obj_get_width(parent) - lv_obj_get_width(label);
 8018410:	4648      	mov	r0, r9
 8018412:	f7f3 fcf7 	bl	800be04 <lv_obj_get_width>
 8018416:	4606      	mov	r6, r0
 8018418:	4628      	mov	r0, r5
 801841a:	f7f3 fcf3 	bl	800be04 <lv_obj_get_width>
 801841e:	1a36      	subs	r6, r6, r0
                anim.time = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 8018420:	990d      	ldr	r1, [sp, #52]	; 0x34
 8018422:	8aa0      	ldrh	r0, [r4, #20]
 8018424:	4632      	mov	r2, r6
                anim.end = lv_obj_get_width(parent) - lv_obj_get_width(label);
 8018426:	960e      	str	r6, [sp, #56]	; 0x38
                anim.fp = (lv_anim_fp_t) lv_obj_set_x;
 8018428:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
                anim.time = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 801842c:	f7fa fad8 	bl	80129e0 <lv_anim_speed_to_time>
 8018430:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
                lv_anim_create(&anim);
 8018434:	a809      	add	r0, sp, #36	; 0x24
 8018436:	f7fa fa37 	bl	80128a8 <lv_anim_create>
 801843a:	e79c      	b.n	8018376 <lv_label_refr_text+0x6e>
        lv_obj_set_height(label, size.y);
 801843c:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8018440:	4628      	mov	r0, r5
 8018442:	f7f2 fcb7 	bl	800adb4 <lv_obj_set_height>
 8018446:	e796      	b.n	8018376 <lv_label_refr_text+0x6e>
        anim.repeat = 1;
 8018448:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
        anim.start = 0;
 801844c:	2600      	movs	r6, #0
        anim.path = lv_anim_path_linear;
 801844e:	4a7d      	ldr	r2, [pc, #500]	; (8018644 <lv_label_refr_text+0x33c>)
        anim.playback_pause = (((lv_font_get_width(style->text.font, ' ') + style->text.letter_space) * 1000) / ext->anim_speed) * ANIM_WAIT_CHAR_COUNT;;
 8018450:	2120      	movs	r1, #32
        anim.playback = 1;
 8018452:	f043 0303 	orr.w	r3, r3, #3
        anim.var = label;
 8018456:	9509      	str	r5, [sp, #36]	; 0x24
        anim.start = 0;
 8018458:	960d      	str	r6, [sp, #52]	; 0x34
        anim.playback = 1;
 801845a:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
        anim.playback_pause = (((lv_font_get_width(style->text.font, ' ') + style->text.letter_space) * 1000) / ext->anim_speed) * ANIM_WAIT_CHAR_COUNT;;
 801845e:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
        anim.path = lv_anim_path_linear;
 8018462:	920c      	str	r2, [sp, #48]	; 0x30
        anim.act_time = 0;
 8018464:	f8ad 603e 	strh.w	r6, [sp, #62]	; 0x3e
        anim.end_cb = NULL;
 8018468:	960b      	str	r6, [sp, #44]	; 0x2c
        anim.playback_pause = (((lv_font_get_width(style->text.font, ' ') + style->text.letter_space) * 1000) / ext->anim_speed) * ANIM_WAIT_CHAR_COUNT;;
 801846a:	f7fa fc3b 	bl	8012ce4 <lv_font_get_width>
 801846e:	f9b8 2030 	ldrsh.w	r2, [r8, #48]	; 0x30
 8018472:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018476:	8aa1      	ldrh	r1, [r4, #20]
 8018478:	4410      	add	r0, r2
        if(size.x > lv_obj_get_width(label)) {
 801847a:	f9bd 801c 	ldrsh.w	r8, [sp, #28]
        anim.playback_pause = (((lv_font_get_width(style->text.font, ' ') + style->text.letter_space) * 1000) / ext->anim_speed) * ANIM_WAIT_CHAR_COUNT;;
 801847e:	fb03 f300 	mul.w	r3, r3, r0
        if(size.x > lv_obj_get_width(label)) {
 8018482:	4628      	mov	r0, r5
        anim.playback_pause = (((lv_font_get_width(style->text.font, ' ') + style->text.letter_space) * 1000) / ext->anim_speed) * ANIM_WAIT_CHAR_COUNT;;
 8018484:	fb93 f3f1 	sdiv	r3, r3, r1
 8018488:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801848c:	b29b      	uxth	r3, r3
 801848e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        anim.repeat_pause =  anim.playback_pause;
 8018492:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        if(size.x > lv_obj_get_width(label)) {
 8018496:	f7f3 fcb5 	bl	800be04 <lv_obj_get_width>
 801849a:	4580      	cmp	r8, r0
 801849c:	dc1e      	bgt.n	80184dc <lv_label_refr_text+0x1d4>
            lv_anim_del(label, (lv_anim_fp_t) lv_label_set_offset_x);
 801849e:	496a      	ldr	r1, [pc, #424]	; (8018648 <lv_label_refr_text+0x340>)
 80184a0:	4628      	mov	r0, r5
 80184a2:	f7fa fa63 	bl	801296c <lv_anim_del>
        if(size.y > lv_obj_get_height(label) && hor_anim == false) {
 80184a6:	f9bd 801e 	ldrsh.w	r8, [sp, #30]
            ext->offset.x = 0;
 80184aa:	82e6      	strh	r6, [r4, #22]
        if(size.y > lv_obj_get_height(label) && hor_anim == false) {
 80184ac:	4628      	mov	r0, r5
 80184ae:	f7f3 fcaf 	bl	800be10 <lv_obj_get_height>
 80184b2:	4580      	cmp	r8, r0
 80184b4:	f300 809e 	bgt.w	80185f4 <lv_label_refr_text+0x2ec>
            lv_anim_del(label, (lv_anim_fp_t) lv_label_set_offset_y);
 80184b8:	4964      	ldr	r1, [pc, #400]	; (801864c <lv_label_refr_text+0x344>)
 80184ba:	4628      	mov	r0, r5
 80184bc:	f7fa fa56 	bl	801296c <lv_anim_del>
            ext->offset.y = 0;
 80184c0:	2300      	movs	r3, #0
 80184c2:	8323      	strh	r3, [r4, #24]
 80184c4:	e757      	b.n	8018376 <lv_label_refr_text+0x6e>
        if(size.y <= lv_obj_get_height(label)) {                /*No dots are required, the text is short enough*/
 80184c6:	f9bd 601e 	ldrsh.w	r6, [sp, #30]
 80184ca:	4628      	mov	r0, r5
 80184cc:	f7f3 fca0 	bl	800be10 <lv_obj_get_height>
 80184d0:	4286      	cmp	r6, r0
 80184d2:	dc1a      	bgt.n	801850a <lv_label_refr_text+0x202>
            ext->dot_end = LV_LABEL_DOT_END_INV;
 80184d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80184d8:	8263      	strh	r3, [r4, #18]
 80184da:	e74c      	b.n	8018376 <lv_label_refr_text+0x6e>
            anim.end = lv_obj_get_width(label) - size.x;
 80184dc:	4628      	mov	r0, r5
            anim.fp = (lv_anim_fp_t) lv_label_set_offset_x;
 80184de:	4e5a      	ldr	r6, [pc, #360]	; (8018648 <lv_label_refr_text+0x340>)
            anim.end = lv_obj_get_width(label) - size.x;
 80184e0:	f7f3 fc90 	bl	800be04 <lv_obj_get_width>
 80184e4:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
            anim.time = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 80184e8:	990d      	ldr	r1, [sp, #52]	; 0x34
            anim.end = lv_obj_get_width(label) - size.x;
 80184ea:	1ac3      	subs	r3, r0, r3
            anim.time = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 80184ec:	8aa0      	ldrh	r0, [r4, #20]
            anim.fp = (lv_anim_fp_t) lv_label_set_offset_x;
 80184ee:	960a      	str	r6, [sp, #40]	; 0x28
            anim.time = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 80184f0:	461a      	mov	r2, r3
            anim.end = lv_obj_get_width(label) - size.x;
 80184f2:	930e      	str	r3, [sp, #56]	; 0x38
            anim.time = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 80184f4:	f7fa fa74 	bl	80129e0 <lv_anim_speed_to_time>
 80184f8:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
            lv_anim_create(&anim);
 80184fc:	a809      	add	r0, sp, #36	; 0x24
 80184fe:	f7fa f9d3 	bl	80128a8 <lv_anim_create>
        if(size.y > lv_obj_get_height(label) && hor_anim == false) {
 8018502:	4628      	mov	r0, r5
 8018504:	f7f3 fc84 	bl	800be10 <lv_obj_get_height>
 8018508:	e7d6      	b.n	80184b8 <lv_label_refr_text+0x1b0>
        } else if(lv_txt_get_encoded_length(ext->text) <= LV_LABEL_DOT_NUM) {     /*Don't turn to dots all the characters*/
 801850a:	4b51      	ldr	r3, [pc, #324]	; (8018650 <lv_label_refr_text+0x348>)
 801850c:	6820      	ldr	r0, [r4, #0]
 801850e:	681b      	ldr	r3, [r3, #0]
 8018510:	4798      	blx	r3
 8018512:	2803      	cmp	r0, #3
 8018514:	d9de      	bls.n	80184d4 <lv_label_refr_text+0x1cc>
            p.x = lv_obj_get_width(label) - (lv_font_get_width(style->text.font, '.') + style->text.letter_space) * LV_LABEL_DOT_NUM; /*Shrink with dots*/
 8018516:	4628      	mov	r0, r5
            uint32_t byte_id = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 8018518:	2704      	movs	r7, #4
            p.x = lv_obj_get_width(label) - (lv_font_get_width(style->text.font, '.') + style->text.letter_space) * LV_LABEL_DOT_NUM; /*Shrink with dots*/
 801851a:	f7f3 fc73 	bl	800be04 <lv_obj_get_width>
 801851e:	212e      	movs	r1, #46	; 0x2e
 8018520:	4681      	mov	r9, r0
 8018522:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
 8018526:	f7fa fbdd 	bl	8012ce4 <lv_font_get_width>
 801852a:	f9b8 3030 	ldrsh.w	r3, [r8, #48]	; 0x30
            uint8_t len = 0;
 801852e:	2600      	movs	r6, #0
 8018530:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8018660 <lv_label_refr_text+0x358>
            p.x = lv_obj_get_width(label) - (lv_font_get_width(style->text.font, '.') + style->text.letter_space) * LV_LABEL_DOT_NUM; /*Shrink with dots*/
 8018534:	4403      	add	r3, r0
            p.y = lv_obj_get_height(label);
 8018536:	4628      	mov	r0, r5
 8018538:	f8df a128 	ldr.w	sl, [pc, #296]	; 8018664 <lv_label_refr_text+0x35c>
            p.x = lv_obj_get_width(label) - (lv_font_get_width(style->text.font, '.') + style->text.letter_space) * LV_LABEL_DOT_NUM; /*Shrink with dots*/
 801853c:	ebc3 3283 	rsb	r2, r3, r3, lsl #14
 8018540:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8018544:	444b      	add	r3, r9
            uint32_t byte_id = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 8018546:	f10d 0948 	add.w	r9, sp, #72	; 0x48
            p.x = lv_obj_get_width(label) - (lv_font_get_width(style->text.font, '.') + style->text.letter_space) * LV_LABEL_DOT_NUM; /*Shrink with dots*/
 801854a:	f8ad 3020 	strh.w	r3, [sp, #32]
            p.y = lv_obj_get_height(label);
 801854e:	f7f3 fc5f 	bl	800be10 <lv_obj_get_height>
 8018552:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8018556:	4603      	mov	r3, r0
            p.y -= p.y  % (lv_font_get_height(style->text.font) + style->text.line_space);   /*Round down to the last line*/
 8018558:	f9b8 e032 	ldrsh.w	lr, [r8, #50]	; 0x32
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 801855c:	a908      	add	r1, sp, #32
            p.y -= p.y  % (lv_font_get_height(style->text.font) + style->text.line_space);   /*Round down to the last line*/
 801855e:	f892 2020 	ldrb.w	r2, [r2, #32]
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 8018562:	4628      	mov	r0, r5
            p.y -= p.y  % (lv_font_get_height(style->text.font) + style->text.line_space);   /*Round down to the last line*/
 8018564:	4472      	add	r2, lr
 8018566:	fb93 fcf2 	sdiv	ip, r3, r2
 801856a:	fb02 321c 	mls	r2, r2, ip, r3
 801856e:	1a9b      	subs	r3, r3, r2
            p.y -= style->text.line_space;                                                      /*Trim the last line space*/
 8018570:	eba3 030e 	sub.w	r3, r3, lr
 8018574:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 8018578:	f7ff fdde 	bl	8018138 <lv_label_get_letter_on>
            uint32_t byte_id = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 801857c:	4b35      	ldr	r3, [pc, #212]	; (8018654 <lv_label_refr_text+0x34c>)
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 801857e:	4601      	mov	r1, r0
 8018580:	9005      	str	r0, [sp, #20]
            uint32_t byte_id = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 8018582:	681b      	ldr	r3, [r3, #0]
 8018584:	6820      	ldr	r0, [r4, #0]
 8018586:	4798      	blx	r3
 8018588:	4680      	mov	r8, r0
 801858a:	f849 0d24 	str.w	r0, [r9, #-36]!
                len += lv_txt_encoded_size(&ext->text[byte_id]);
 801858e:	6822      	ldr	r2, [r4, #0]
 8018590:	f8db 3000 	ldr.w	r3, [fp]
 8018594:	4410      	add	r0, r2
 8018596:	4798      	blx	r3
                lv_txt_encoded_next(ext->text, &byte_id);
 8018598:	f8da 3000 	ldr.w	r3, [sl]
                len += lv_txt_encoded_size(&ext->text[byte_id]);
 801859c:	4406      	add	r6, r0
                lv_txt_encoded_next(ext->text, &byte_id);
 801859e:	4649      	mov	r1, r9
 80185a0:	6820      	ldr	r0, [r4, #0]
 80185a2:	4798      	blx	r3
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++)  {
 80185a4:	3f01      	subs	r7, #1
                len += lv_txt_encoded_size(&ext->text[byte_id]);
 80185a6:	b2f6      	uxtb	r6, r6
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++)  {
 80185a8:	d032      	beq.n	8018610 <lv_label_refr_text+0x308>
 80185aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80185ac:	e7ef      	b.n	801858e <lv_label_refr_text+0x286>
            } else if(lv_obj_get_height(label) > lv_obj_get_height(parent)) {
 80185ae:	4628      	mov	r0, r5
 80185b0:	f7f3 fc2e 	bl	800be10 <lv_obj_get_height>
 80185b4:	4606      	mov	r6, r0
 80185b6:	4648      	mov	r0, r9
 80185b8:	f7f3 fc2a 	bl	800be10 <lv_obj_get_height>
 80185bc:	4286      	cmp	r6, r0
 80185be:	f77f aeda 	ble.w	8018376 <lv_label_refr_text+0x6e>
                anim.end =  lv_obj_get_height(parent) - lv_obj_get_height(label) - lv_font_get_height(font);
 80185c2:	4648      	mov	r0, r9
 80185c4:	f7f3 fc24 	bl	800be10 <lv_obj_get_height>
 80185c8:	4606      	mov	r6, r0
 80185ca:	4628      	mov	r0, r5
 80185cc:	f7f3 fc20 	bl	800be10 <lv_obj_get_height>
 80185d0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80185d4:	1a33      	subs	r3, r6, r0
                anim.time = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 80185d6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80185d8:	8aa0      	ldrh	r0, [r4, #20]
                anim.end =  lv_obj_get_height(parent) - lv_obj_get_height(label) - lv_font_get_height(font);
 80185da:	1a9b      	subs	r3, r3, r2
                anim.fp = (lv_anim_fp_t)lv_obj_set_y;
 80185dc:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
            anim.time = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 80185e0:	461a      	mov	r2, r3
            anim.end =  lv_obj_get_height(label) - size.y - (lv_font_get_height(font));
 80185e2:	930e      	str	r3, [sp, #56]	; 0x38
            anim.time = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 80185e4:	f7fa f9fc 	bl	80129e0 <lv_anim_speed_to_time>
 80185e8:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
            lv_anim_create(&anim);
 80185ec:	a809      	add	r0, sp, #36	; 0x24
 80185ee:	f7fa f95b 	bl	80128a8 <lv_anim_create>
 80185f2:	e6c0      	b.n	8018376 <lv_label_refr_text+0x6e>
            anim.end =  lv_obj_get_height(label) - size.y - (lv_font_get_height(font));
 80185f4:	4628      	mov	r0, r5
 80185f6:	f7f3 fc0b 	bl	800be10 <lv_obj_get_height>
 80185fa:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80185fe:	f897 1020 	ldrb.w	r1, [r7, #32]
 8018602:	1ac3      	subs	r3, r0, r3
            anim.fp = (lv_anim_fp_t)lv_label_set_offset_y;
 8018604:	4a11      	ldr	r2, [pc, #68]	; (801864c <lv_label_refr_text+0x344>)
            anim.time = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 8018606:	8aa0      	ldrh	r0, [r4, #20]
            anim.end =  lv_obj_get_height(label) - size.y - (lv_font_get_height(font));
 8018608:	1a5b      	subs	r3, r3, r1
            anim.fp = (lv_anim_fp_t)lv_label_set_offset_y;
 801860a:	920a      	str	r2, [sp, #40]	; 0x28
            anim.time = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 801860c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801860e:	e7e7      	b.n	80185e0 <lv_label_refr_text+0x2d8>
            memcpy(ext->dot_tmp, &ext->text[byte_id_ori], len);
 8018610:	4620      	mov	r0, r4
 8018612:	4632      	mov	r2, r6
            ext->dot_tmp[len] = '\0';       /*Close with a zero*/
 8018614:	4426      	add	r6, r4
            memcpy(ext->dot_tmp, &ext->text[byte_id_ori], len);
 8018616:	f850 9b05 	ldr.w	r9, [r0], #5
 801861a:	eb09 0108 	add.w	r1, r9, r8
 801861e:	f005 f9dd 	bl	801d9dc <memcpy>
                ext->text[byte_id_ori + i] = '.';
 8018622:	212e      	movs	r1, #46	; 0x2e
            ext->dot_tmp[len] = '\0';       /*Close with a zero*/
 8018624:	7177      	strb	r7, [r6, #5]
                ext->text[byte_id_ori + i] = '.';
 8018626:	f809 1008 	strb.w	r1, [r9, r8]
 801862a:	6822      	ldr	r2, [r4, #0]
            ext->dot_end = letter_id + LV_LABEL_DOT_NUM;
 801862c:	9b05      	ldr	r3, [sp, #20]
                ext->text[byte_id_ori + i] = '.';
 801862e:	4442      	add	r2, r8
            ext->dot_end = letter_id + LV_LABEL_DOT_NUM;
 8018630:	3303      	adds	r3, #3
                ext->text[byte_id_ori + i] = '.';
 8018632:	7051      	strb	r1, [r2, #1]
 8018634:	6822      	ldr	r2, [r4, #0]
 8018636:	4442      	add	r2, r8
 8018638:	7091      	strb	r1, [r2, #2]
            ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 801863a:	6822      	ldr	r2, [r4, #0]
 801863c:	4442      	add	r2, r8
 801863e:	70d7      	strb	r7, [r2, #3]
            ext->dot_end = letter_id + LV_LABEL_DOT_NUM;
 8018640:	8263      	strh	r3, [r4, #18]
 8018642:	e698      	b.n	8018376 <lv_label_refr_text+0x6e>
 8018644:	08012a0d 	.word	0x08012a0d
 8018648:	08017e05 	.word	0x08017e05
 801864c:	08017ded 	.word	0x08017ded
 8018650:	200002ec 	.word	0x200002ec
 8018654:	200002e8 	.word	0x200002e8
 8018658:	08009869 	.word	0x08009869
 801865c:	080096d9 	.word	0x080096d9
 8018660:	200002dc 	.word	0x200002dc
 8018664:	200002e0 	.word	0x200002e0

08018668 <lv_label_signal>:
    res = ancestor_signal(label, sign, param);
 8018668:	4b5d      	ldr	r3, [pc, #372]	; (80187e0 <lv_label_signal+0x178>)
{
 801866a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = ancestor_signal(label, sign, param);
 801866e:	681b      	ldr	r3, [r3, #0]
{
 8018670:	4606      	mov	r6, r0
 8018672:	460d      	mov	r5, r1
 8018674:	4617      	mov	r7, r2
    res = ancestor_signal(label, sign, param);
 8018676:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8018678:	2801      	cmp	r0, #1
    res = ancestor_signal(label, sign, param);
 801867a:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
 801867c:	d002      	beq.n	8018684 <lv_label_signal+0x1c>
}
 801867e:	4620      	mov	r0, r4
 8018680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8018684:	4630      	mov	r0, r6
 8018686:	f7f3 fc47 	bl	800bf18 <lv_obj_get_ext_attr>
 801868a:	4680      	mov	r8, r0
    if(sign ==  LV_SIGNAL_CLEANUP) {
 801868c:	b94d      	cbnz	r5, 80186a2 <lv_label_signal+0x3a>
        if(ext->static_txt == 0) {
 801868e:	7e83      	ldrb	r3, [r0, #26]
 8018690:	f013 0501 	ands.w	r5, r3, #1
 8018694:	d1f3      	bne.n	801867e <lv_label_signal+0x16>
            lv_mem_free(ext->text);
 8018696:	6800      	ldr	r0, [r0, #0]
 8018698:	f7fa fde8 	bl	801326c <lv_mem_free>
            ext->text = NULL;
 801869c:	f8c8 5000 	str.w	r5, [r8]
 80186a0:	e7ed      	b.n	801867e <lv_label_signal+0x16>
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 80186a2:	2d03      	cmp	r5, #3
 80186a4:	d059      	beq.n	801875a <lv_label_signal+0xf2>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 80186a6:	2d02      	cmp	r5, #2
 80186a8:	d034      	beq.n	8018714 <lv_label_signal+0xac>
    } else if(sign == LV_SIGNAL_REFR_EXT_SIZE) {
 80186aa:	2d04      	cmp	r5, #4
 80186ac:	d01e      	beq.n	80186ec <lv_label_signal+0x84>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 80186ae:	2d06      	cmp	r5, #6
 80186b0:	d1e5      	bne.n	801867e <lv_label_signal+0x16>
            if(buf->type[i] == NULL) break;
 80186b2:	683b      	ldr	r3, [r7, #0]
 80186b4:	b1b3      	cbz	r3, 80186e4 <lv_label_signal+0x7c>
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	2b00      	cmp	r3, #0
 80186ba:	f000 808b 	beq.w	80187d4 <lv_label_signal+0x16c>
 80186be:	68bb      	ldr	r3, [r7, #8]
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	f000 8085 	beq.w	80187d0 <lv_label_signal+0x168>
 80186c6:	68fb      	ldr	r3, [r7, #12]
 80186c8:	2b00      	cmp	r3, #0
 80186ca:	d07f      	beq.n	80187cc <lv_label_signal+0x164>
 80186cc:	693b      	ldr	r3, [r7, #16]
 80186ce:	2b00      	cmp	r3, #0
 80186d0:	f000 8084 	beq.w	80187dc <lv_label_signal+0x174>
 80186d4:	697b      	ldr	r3, [r7, #20]
 80186d6:	2b00      	cmp	r3, #0
 80186d8:	d07e      	beq.n	80187d8 <lv_label_signal+0x170>
 80186da:	69bb      	ldr	r3, [r7, #24]
 80186dc:	2b00      	cmp	r3, #0
 80186de:	bf14      	ite	ne
 80186e0:	2307      	movne	r3, #7
 80186e2:	2306      	moveq	r3, #6
        buf->type[i] = "lv_label";
 80186e4:	4a3f      	ldr	r2, [pc, #252]	; (80187e4 <lv_label_signal+0x17c>)
 80186e6:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 80186ea:	e7c8      	b.n	801867e <lv_label_signal+0x16>
        if(ext->body_draw) {
 80186ec:	7e83      	ldrb	r3, [r0, #26]
 80186ee:	069b      	lsls	r3, r3, #26
 80186f0:	d5c5      	bpl.n	801867e <lv_label_signal+0x16>
 * @param label pointer to an label object
 * @return pointer to the label's style
 */
static inline lv_style_t* lv_label_get_style(const lv_obj_t *label)
{
    return lv_obj_get_style(label);
 80186f2:	4630      	mov	r0, r6
 80186f4:	f7f3 fb92 	bl	800be1c <lv_obj_get_style>
            label->ext_size = LV_MATH_MAX(label->ext_size, style->body.padding.ver);
 80186f8:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 80186fc:	f9b0 1020 	ldrsh.w	r1, [r0, #32]
 8018700:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
 8018704:	428b      	cmp	r3, r1
 8018706:	bfb8      	it	lt
 8018708:	460b      	movlt	r3, r1
 801870a:	4293      	cmp	r3, r2
 801870c:	bfb8      	it	lt
 801870e:	4613      	movlt	r3, r2
 8018710:	86b3      	strh	r3, [r6, #52]	; 0x34
 8018712:	e7b4      	b.n	801867e <lv_label_signal+0x16>
    return area_p->x2 - area_p->x1 + 1;
 8018714:	8ab2      	ldrh	r2, [r6, #20]
 8018716:	88bb      	ldrh	r3, [r7, #4]
 8018718:	3201      	adds	r2, #1
 801871a:	8a30      	ldrh	r0, [r6, #16]
 801871c:	3301      	adds	r3, #1
 801871e:	8839      	ldrh	r1, [r7, #0]
 8018720:	1a12      	subs	r2, r2, r0
 8018722:	1a5b      	subs	r3, r3, r1
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
 8018724:	b292      	uxth	r2, r2
 8018726:	b29b      	uxth	r3, r3
 8018728:	429a      	cmp	r2, r3
 801872a:	d10b      	bne.n	8018744 <lv_label_signal+0xdc>
    return area_p->y2 - area_p->y1 + 1;
 801872c:	8af2      	ldrh	r2, [r6, #22]
 801872e:	88fb      	ldrh	r3, [r7, #6]
 8018730:	3201      	adds	r2, #1
 8018732:	8a70      	ldrh	r0, [r6, #18]
 8018734:	3301      	adds	r3, #1
 8018736:	8879      	ldrh	r1, [r7, #2]
 8018738:	1a12      	subs	r2, r2, r0
 801873a:	1a5b      	subs	r3, r3, r1
 801873c:	b292      	uxth	r2, r2
 801873e:	b29b      	uxth	r3, r3
 8018740:	429a      	cmp	r2, r3
 8018742:	d09c      	beq.n	801867e <lv_label_signal+0x16>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8018744:	4630      	mov	r0, r6
 8018746:	f7f3 fbe7 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
 801874a:	7903      	ldrb	r3, [r0, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801874c:	4605      	mov	r5, r0
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
 801874e:	2b03      	cmp	r3, #3
 8018750:	d024      	beq.n	801879c <lv_label_signal+0x134>
        lv_label_refr_text(label);
 8018752:	4630      	mov	r0, r6
 8018754:	f7ff fdd8 	bl	8018308 <lv_label_refr_text>
 8018758:	e791      	b.n	801867e <lv_label_signal+0x16>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801875a:	4630      	mov	r0, r6
 801875c:	f7f3 fbdc 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
 8018760:	7903      	ldrb	r3, [r0, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8018762:	4605      	mov	r5, r0
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
 8018764:	2b03      	cmp	r3, #3
 8018766:	d1f4      	bne.n	8018752 <lv_label_signal+0xea>
    if(ext->dot_end == LV_LABEL_DOT_END_INV) return;
 8018768:	8a41      	ldrh	r1, [r0, #18]
 801876a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801876e:	4299      	cmp	r1, r3
 8018770:	d0ef      	beq.n	8018752 <lv_label_signal+0xea>
    uint32_t byte_i = lv_txt_encoded_get_byte_id(ext->text, letter_i);
 8018772:	4b1d      	ldr	r3, [pc, #116]	; (80187e8 <lv_label_signal+0x180>)
 8018774:	3903      	subs	r1, #3
 8018776:	6800      	ldr	r0, [r0, #0]
 8018778:	681b      	ldr	r3, [r3, #0]
 801877a:	4798      	blx	r3
    while(ext->dot_tmp[i] != '\0') {
 801877c:	7969      	ldrb	r1, [r5, #5]
 801877e:	b149      	cbz	r1, 8018794 <lv_label_signal+0x12c>
 8018780:	2300      	movs	r3, #0
        ext->text[byte_i + i] = ext->dot_tmp[i];
 8018782:	682a      	ldr	r2, [r5, #0]
        i++;
 8018784:	1c5f      	adds	r7, r3, #1
        ext->text[byte_i + i] = ext->dot_tmp[i];
 8018786:	4402      	add	r2, r0
 8018788:	54d1      	strb	r1, [r2, r3]
        i++;
 801878a:	b2fb      	uxtb	r3, r7
    while(ext->dot_tmp[i] != '\0') {
 801878c:	18ea      	adds	r2, r5, r3
 801878e:	7951      	ldrb	r1, [r2, #5]
 8018790:	2900      	cmp	r1, #0
 8018792:	d1f6      	bne.n	8018782 <lv_label_signal+0x11a>
    ext->dot_end = LV_LABEL_DOT_END_INV;
 8018794:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018798:	826b      	strh	r3, [r5, #18]
 801879a:	e7da      	b.n	8018752 <lv_label_signal+0xea>
    if(ext->dot_end == LV_LABEL_DOT_END_INV) return;
 801879c:	8a41      	ldrh	r1, [r0, #18]
 801879e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80187a2:	4299      	cmp	r1, r3
 80187a4:	d0d5      	beq.n	8018752 <lv_label_signal+0xea>
    uint32_t byte_i = lv_txt_encoded_get_byte_id(ext->text, letter_i);
 80187a6:	4b10      	ldr	r3, [pc, #64]	; (80187e8 <lv_label_signal+0x180>)
 80187a8:	3903      	subs	r1, #3
 80187aa:	6800      	ldr	r0, [r0, #0]
 80187ac:	681b      	ldr	r3, [r3, #0]
 80187ae:	4798      	blx	r3
    while(ext->dot_tmp[i] != '\0') {
 80187b0:	7969      	ldrb	r1, [r5, #5]
 80187b2:	2900      	cmp	r1, #0
 80187b4:	d0ee      	beq.n	8018794 <lv_label_signal+0x12c>
 80187b6:	2300      	movs	r3, #0
        ext->text[byte_i + i] = ext->dot_tmp[i];
 80187b8:	682a      	ldr	r2, [r5, #0]
        i++;
 80187ba:	1c5f      	adds	r7, r3, #1
        ext->text[byte_i + i] = ext->dot_tmp[i];
 80187bc:	4402      	add	r2, r0
 80187be:	54d1      	strb	r1, [r2, r3]
        i++;
 80187c0:	b2fb      	uxtb	r3, r7
    while(ext->dot_tmp[i] != '\0') {
 80187c2:	18ea      	adds	r2, r5, r3
 80187c4:	7951      	ldrb	r1, [r2, #5]
 80187c6:	2900      	cmp	r1, #0
 80187c8:	d1f6      	bne.n	80187b8 <lv_label_signal+0x150>
 80187ca:	e7e3      	b.n	8018794 <lv_label_signal+0x12c>
            if(buf->type[i] == NULL) break;
 80187cc:	2303      	movs	r3, #3
 80187ce:	e789      	b.n	80186e4 <lv_label_signal+0x7c>
 80187d0:	2302      	movs	r3, #2
 80187d2:	e787      	b.n	80186e4 <lv_label_signal+0x7c>
 80187d4:	4623      	mov	r3, r4
 80187d6:	e785      	b.n	80186e4 <lv_label_signal+0x7c>
 80187d8:	2305      	movs	r3, #5
 80187da:	e783      	b.n	80186e4 <lv_label_signal+0x7c>
 80187dc:	2304      	movs	r3, #4
 80187de:	e781      	b.n	80186e4 <lv_label_signal+0x7c>
 80187e0:	2001662c 	.word	0x2001662c
 80187e4:	080c7484 	.word	0x080c7484
 80187e8:	200002e8 	.word	0x200002e8

080187ec <lv_label_set_text>:
{
 80187ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80187f0:	4680      	mov	r8, r0
 80187f2:	460d      	mov	r5, r1
    lv_obj_invalidate(label);
 80187f4:	f7f1 fa74 	bl	8009ce0 <lv_obj_invalidate>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80187f8:	4640      	mov	r0, r8
 80187fa:	f7f3 fb8d 	bl	800bf18 <lv_obj_get_ext_attr>
    if(text == NULL) {
 80187fe:	b1ed      	cbz	r5, 801883c <lv_label_set_text+0x50>
    if(ext->text == text) {
 8018800:	6807      	ldr	r7, [r0, #0]
 8018802:	4604      	mov	r4, r0
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
 8018804:	4628      	mov	r0, r5
    if(ext->text == text) {
 8018806:	42bd      	cmp	r5, r7
 8018808:	d01e      	beq.n	8018848 <lv_label_set_text+0x5c>
        uint32_t len = strlen(text) + 1;
 801880a:	f7e7 fd07 	bl	800021c <strlen>
 801880e:	f100 0901 	add.w	r9, r0, #1
        if(ext->text != NULL && ext->static_txt == 0) {
 8018812:	b13f      	cbz	r7, 8018824 <lv_label_set_text+0x38>
 8018814:	7ea3      	ldrb	r3, [r4, #26]
 8018816:	f013 0601 	ands.w	r6, r3, #1
 801881a:	d103      	bne.n	8018824 <lv_label_set_text+0x38>
            lv_mem_free(ext->text);
 801881c:	4638      	mov	r0, r7
 801881e:	f7fa fd25 	bl	801326c <lv_mem_free>
            ext->text = NULL;
 8018822:	6026      	str	r6, [r4, #0]
        ext->text = lv_mem_alloc(len);
 8018824:	4648      	mov	r0, r9
 8018826:	f7fa fd19 	bl	801325c <lv_mem_alloc>
 801882a:	6020      	str	r0, [r4, #0]
        lv_mem_assert(ext->text);
 801882c:	b158      	cbz	r0, 8018846 <lv_label_set_text+0x5a>
        strcpy(ext->text, text);
 801882e:	4629      	mov	r1, r5
 8018830:	f005 f8e7 	bl	801da02 <strcpy>
        ext->static_txt = 0;    /*Now the text is dynamically allocated*/
 8018834:	7ea3      	ldrb	r3, [r4, #26]
 8018836:	f36f 0300 	bfc	r3, #0, #1
 801883a:	76a3      	strb	r3, [r4, #26]
        lv_label_refr_text(label);
 801883c:	4640      	mov	r0, r8
}
 801883e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        lv_label_refr_text(label);
 8018842:	f7ff bd61 	b.w	8018308 <lv_label_refr_text>
 8018846:	e7fe      	b.n	8018846 <lv_label_set_text+0x5a>
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
 8018848:	f7e7 fce8 	bl	800021c <strlen>
 801884c:	1c41      	adds	r1, r0, #1
 801884e:	4628      	mov	r0, r5
 8018850:	f7fa fd66 	bl	8013320 <lv_mem_realloc>
 8018854:	6020      	str	r0, [r4, #0]
        lv_mem_assert(ext->text);
 8018856:	2800      	cmp	r0, #0
 8018858:	d1f0      	bne.n	801883c <lv_label_set_text+0x50>
 801885a:	e7fe      	b.n	801885a <lv_label_set_text+0x6e>

0801885c <lv_label_set_long_mode>:
{
 801885c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018860:	4605      	mov	r5, r0
 8018862:	460f      	mov	r7, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8018864:	f7f3 fb58 	bl	800bf18 <lv_obj_get_ext_attr>
    lv_anim_del(label, (lv_anim_fp_t) lv_obj_set_x);
 8018868:	4926      	ldr	r1, [pc, #152]	; (8018904 <lv_label_set_long_mode+0xa8>)
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801886a:	4604      	mov	r4, r0
    lv_anim_del(label, (lv_anim_fp_t) lv_obj_set_x);
 801886c:	4628      	mov	r0, r5
 801886e:	f7fa f87d 	bl	801296c <lv_anim_del>
    lv_anim_del(label, (lv_anim_fp_t) lv_obj_set_y);
 8018872:	4925      	ldr	r1, [pc, #148]	; (8018908 <lv_label_set_long_mode+0xac>)
 8018874:	4628      	mov	r0, r5
    ext->offset.x = 0;
 8018876:	2600      	movs	r6, #0
    lv_anim_del(label, (lv_anim_fp_t) lv_obj_set_y);
 8018878:	f7fa f878 	bl	801296c <lv_anim_del>
    lv_anim_del(label, (lv_anim_fp_t) lv_label_set_offset_x);
 801887c:	4923      	ldr	r1, [pc, #140]	; (801890c <lv_label_set_long_mode+0xb0>)
 801887e:	4628      	mov	r0, r5
 8018880:	f7fa f874 	bl	801296c <lv_anim_del>
    lv_anim_del(label, (lv_anim_fp_t) lv_label_set_offset_y);
 8018884:	4922      	ldr	r1, [pc, #136]	; (8018910 <lv_label_set_long_mode+0xb4>)
 8018886:	4628      	mov	r0, r5
 8018888:	f7fa f870 	bl	801296c <lv_anim_del>
    if(long_mode == LV_LABEL_LONG_ROLL || long_mode == LV_LABEL_LONG_CROP) ext->expand = 1;
 801888c:	1f3b      	subs	r3, r7, #4
 801888e:	7ea2      	ldrb	r2, [r4, #26]
 8018890:	2b01      	cmp	r3, #1
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
 8018892:	7921      	ldrb	r1, [r4, #4]
    ext->offset.x = 0;
 8018894:	f8c4 6016 	str.w	r6, [r4, #22]
    if(long_mode == LV_LABEL_LONG_ROLL || long_mode == LV_LABEL_LONG_CROP) ext->expand = 1;
 8018898:	bf8c      	ite	hi
 801889a:	2300      	movhi	r3, #0
 801889c:	2301      	movls	r3, #1
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
 801889e:	2903      	cmp	r1, #3
 80188a0:	f363 1204 	bfi	r2, r3, #4, #1
 80188a4:	76a2      	strb	r2, [r4, #26]
 80188a6:	d005      	beq.n	80188b4 <lv_label_set_long_mode+0x58>
    ext->long_mode = long_mode;
 80188a8:	7127      	strb	r7, [r4, #4]
    lv_label_refr_text(label);
 80188aa:	4628      	mov	r0, r5
}
 80188ac:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    lv_label_refr_text(label);
 80188b0:	f7ff bd2a 	b.w	8018308 <lv_label_refr_text>
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
 80188b4:	8a63      	ldrh	r3, [r4, #18]
 80188b6:	f64f 79ff 	movw	r9, #65535	; 0xffff
 80188ba:	454b      	cmp	r3, r9
 80188bc:	d0f4      	beq.n	80188a8 <lv_label_set_long_mode+0x4c>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80188be:	4628      	mov	r0, r5
 80188c0:	f7f3 fb2a 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
 80188c4:	7903      	ldrb	r3, [r0, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80188c6:	4680      	mov	r8, r0
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
 80188c8:	2b03      	cmp	r3, #3
 80188ca:	d1ed      	bne.n	80188a8 <lv_label_set_long_mode+0x4c>
    if(ext->dot_end == LV_LABEL_DOT_END_INV) return;
 80188cc:	8a41      	ldrh	r1, [r0, #18]
 80188ce:	4549      	cmp	r1, r9
 80188d0:	d0ea      	beq.n	80188a8 <lv_label_set_long_mode+0x4c>
    uint32_t byte_i = lv_txt_encoded_get_byte_id(ext->text, letter_i);
 80188d2:	4b10      	ldr	r3, [pc, #64]	; (8018914 <lv_label_set_long_mode+0xb8>)
 80188d4:	3903      	subs	r1, #3
 80188d6:	6800      	ldr	r0, [r0, #0]
 80188d8:	681b      	ldr	r3, [r3, #0]
 80188da:	4798      	blx	r3
    while(ext->dot_tmp[i] != '\0') {
 80188dc:	f898 1005 	ldrb.w	r1, [r8, #5]
 80188e0:	b159      	cbz	r1, 80188fa <lv_label_set_long_mode+0x9e>
 80188e2:	4633      	mov	r3, r6
        ext->text[byte_i + i] = ext->dot_tmp[i];
 80188e4:	f8d8 2000 	ldr.w	r2, [r8]
        i++;
 80188e8:	1c5e      	adds	r6, r3, #1
        ext->text[byte_i + i] = ext->dot_tmp[i];
 80188ea:	4402      	add	r2, r0
 80188ec:	54d1      	strb	r1, [r2, r3]
        i++;
 80188ee:	b2f3      	uxtb	r3, r6
    while(ext->dot_tmp[i] != '\0') {
 80188f0:	eb08 0203 	add.w	r2, r8, r3
 80188f4:	7951      	ldrb	r1, [r2, #5]
 80188f6:	2900      	cmp	r1, #0
 80188f8:	d1f4      	bne.n	80188e4 <lv_label_set_long_mode+0x88>
    ext->dot_end = LV_LABEL_DOT_END_INV;
 80188fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80188fe:	f8a8 3012 	strh.w	r3, [r8, #18]
 8018902:	e7d1      	b.n	80188a8 <lv_label_set_long_mode+0x4c>
 8018904:	08009869 	.word	0x08009869
 8018908:	080096d9 	.word	0x080096d9
 801890c:	08017e05 	.word	0x08017e05
 8018910:	08017ded 	.word	0x08017ded
 8018914:	200002e8 	.word	0x200002e8

08018918 <lv_label_create>:
{
 8018918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801891c:	460e      	mov	r6, r1
    lv_obj_t * new_label = lv_obj_create(par, copy);
 801891e:	f7f1 fc6b 	bl	800a1f8 <lv_obj_create>
    lv_mem_assert(new_label);
 8018922:	2800      	cmp	r0, #0
 8018924:	f000 809f 	beq.w	8018a66 <lv_label_create+0x14e>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_label);
 8018928:	4d77      	ldr	r5, [pc, #476]	; (8018b08 <lv_label_create+0x1f0>)
 801892a:	4604      	mov	r4, r0
 801892c:	682b      	ldr	r3, [r5, #0]
 801892e:	2b00      	cmp	r3, #0
 8018930:	f000 80e5 	beq.w	8018afe <lv_label_create+0x1e6>
    lv_obj_allocate_ext_attr(new_label, sizeof(lv_label_ext_t));
 8018934:	211c      	movs	r1, #28
 8018936:	4620      	mov	r0, r4
 8018938:	f7f3 f95c 	bl	800bbf4 <lv_obj_allocate_ext_attr>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(new_label);
 801893c:	4620      	mov	r0, r4
 801893e:	f7f3 faeb 	bl	800bf18 <lv_obj_get_ext_attr>
    lv_mem_assert(ext);
 8018942:	4605      	mov	r5, r0
 8018944:	2800      	cmp	r0, #0
 8018946:	f000 808d 	beq.w	8018a64 <lv_label_create+0x14c>
    ext->static_txt = 0;
 801894a:	7e82      	ldrb	r2, [r0, #26]
    ext->text = NULL;
 801894c:	2300      	movs	r3, #0
    ext->anim_speed = LV_LABEL_SCROLL_SPEED;
 801894e:	2119      	movs	r1, #25
    ext->dot_end = LV_LABEL_DOT_END_INV;
 8018950:	f64f 77ff 	movw	r7, #65535	; 0xffff
    ext->align = LV_LABEL_ALIGN_LEFT;
 8018954:	f002 02d6 	and.w	r2, r2, #214	; 0xd6
    ext->text = NULL;
 8018958:	6003      	str	r3, [r0, #0]
    ext->long_mode = LV_LABEL_LONG_EXPAND;
 801895a:	7103      	strb	r3, [r0, #4]
    lv_obj_set_design_func(new_label, lv_label_design);
 801895c:	4620      	mov	r0, r4
    ext->align = LV_LABEL_ALIGN_LEFT;
 801895e:	f363 0242 	bfi	r2, r3, #1, #2
    ext->anim_speed = LV_LABEL_SCROLL_SPEED;
 8018962:	82a9      	strh	r1, [r5, #20]
    ext->offset.x = 0;
 8018964:	82eb      	strh	r3, [r5, #22]
    lv_obj_set_design_func(new_label, lv_label_design);
 8018966:	4969      	ldr	r1, [pc, #420]	; (8018b0c <lv_label_create+0x1f4>)
    ext->offset.y = 0;
 8018968:	832b      	strh	r3, [r5, #24]
    ext->align = LV_LABEL_ALIGN_LEFT;
 801896a:	76aa      	strb	r2, [r5, #26]
    ext->dot_end = LV_LABEL_DOT_END_INV;
 801896c:	826f      	strh	r7, [r5, #18]
    lv_obj_set_design_func(new_label, lv_label_design);
 801896e:	f7f3 f93f 	bl	800bbf0 <lv_obj_set_design_func>
    lv_obj_set_signal_func(new_label, lv_label_signal);
 8018972:	4967      	ldr	r1, [pc, #412]	; (8018b10 <lv_label_create+0x1f8>)
 8018974:	4620      	mov	r0, r4
 8018976:	f7f3 f939 	bl	800bbec <lv_obj_set_signal_func>
    if(copy == NULL) {
 801897a:	2e00      	cmp	r6, #0
 801897c:	f000 80ac 	beq.w	8018ad8 <lv_label_create+0x1c0>
        lv_label_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8018980:	4630      	mov	r0, r6
 8018982:	f7f3 fac9 	bl	800bf18 <lv_obj_get_ext_attr>
 8018986:	4607      	mov	r7, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8018988:	4630      	mov	r0, r6
 801898a:	f7f3 fac5 	bl	800bf18 <lv_obj_get_ext_attr>
        lv_label_set_long_mode(new_label, lv_label_get_long_mode(copy));
 801898e:	7901      	ldrb	r1, [r0, #4]
 8018990:	4620      	mov	r0, r4
 8018992:	f7ff ff63 	bl	801885c <lv_label_set_long_mode>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8018996:	4630      	mov	r0, r6
 8018998:	f7f3 fabe 	bl	800bf18 <lv_obj_get_ext_attr>
    return ext->recolor == 0 ? false : true;
 801899c:	f890 801a 	ldrb.w	r8, [r0, #26]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80189a0:	4620      	mov	r0, r4
 80189a2:	f7f3 fab9 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->recolor == en) return;
 80189a6:	7e83      	ldrb	r3, [r0, #26]
    return ext->recolor == 0 ? false : true;
 80189a8:	f3c8 08c0 	ubfx	r8, r8, #3, #1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80189ac:	4602      	mov	r2, r0
    if(ext->recolor == en) return;
 80189ae:	f3c3 01c0 	ubfx	r1, r3, #3, #1
 80189b2:	4541      	cmp	r1, r8
 80189b4:	d005      	beq.n	80189c2 <lv_label_create+0xaa>
    ext->recolor = en == false ? 0 : 1;
 80189b6:	f368 03c3 	bfi	r3, r8, #3, #1
    lv_label_refr_text(label);  /*Refresh the text because the potential colo codes in text needs to be hided or revealed*/
 80189ba:	4620      	mov	r0, r4
    ext->recolor = en == false ? 0 : 1;
 80189bc:	7693      	strb	r3, [r2, #26]
    lv_label_refr_text(label);  /*Refresh the text because the potential colo codes in text needs to be hided or revealed*/
 80189be:	f7ff fca3 	bl	8018308 <lv_label_refr_text>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80189c2:	4630      	mov	r0, r6
 80189c4:	f7f3 faa8 	bl	800bf18 <lv_obj_get_ext_attr>
    return ext->body_draw == 0 ? false : true;
 80189c8:	f890 801a 	ldrb.w	r8, [r0, #26]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80189cc:	4620      	mov	r0, r4
 80189ce:	f7f3 faa3 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->body_draw == en) return;
 80189d2:	7e83      	ldrb	r3, [r0, #26]
    return ext->body_draw == 0 ? false : true;
 80189d4:	f3c8 1840 	ubfx	r8, r8, #5, #1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80189d8:	4602      	mov	r2, r0
    if(ext->body_draw == en) return;
 80189da:	f3c3 1140 	ubfx	r1, r3, #5, #1
 80189de:	4541      	cmp	r1, r8
 80189e0:	d008      	beq.n	80189f4 <lv_label_create+0xdc>
    ext->body_draw = en == false ? 0 : 1;
 80189e2:	f368 1345 	bfi	r3, r8, #5, #1
    lv_obj_refresh_ext_size(label);
 80189e6:	4620      	mov	r0, r4
    ext->body_draw = en == false ? 0 : 1;
 80189e8:	7693      	strb	r3, [r2, #26]
    lv_obj_refresh_ext_size(label);
 80189ea:	f7f3 f90b 	bl	800bc04 <lv_obj_refresh_ext_size>
    lv_obj_invalidate(label);
 80189ee:	4620      	mov	r0, r4
 80189f0:	f7f1 f976 	bl	8009ce0 <lv_obj_invalidate>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80189f4:	4630      	mov	r0, r6
 80189f6:	f7f3 fa8f 	bl	800bf18 <lv_obj_get_ext_attr>
    return ext->align;
 80189fa:	f890 801a 	ldrb.w	r8, [r0, #26]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80189fe:	4620      	mov	r0, r4
 8018a00:	f7f3 fa8a 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->align == align) return;
 8018a04:	7e83      	ldrb	r3, [r0, #26]
    return ext->align;
 8018a06:	f3c8 0841 	ubfx	r8, r8, #1, #2
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8018a0a:	4602      	mov	r2, r0
    if(ext->align == align) return;
 8018a0c:	f3c3 0141 	ubfx	r1, r3, #1, #2
 8018a10:	4541      	cmp	r1, r8
 8018a12:	d005      	beq.n	8018a20 <lv_label_create+0x108>
    ext->align = align;
 8018a14:	f368 0342 	bfi	r3, r8, #1, #2
    lv_obj_invalidate(label);       /*Enough to invalidate because alignment is only drawing related (lv_refr_label_text() not required)*/
 8018a18:	4620      	mov	r0, r4
    ext->align = align;
 8018a1a:	7693      	strb	r3, [r2, #26]
    lv_obj_invalidate(label);       /*Enough to invalidate because alignment is only drawing related (lv_refr_label_text() not required)*/
 8018a1c:	f7f1 f960 	bl	8009ce0 <lv_obj_invalidate>
        if(copy_ext->static_txt == 0) lv_label_set_text(new_label, lv_label_get_text(copy));
 8018a20:	7ebb      	ldrb	r3, [r7, #26]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8018a22:	4630      	mov	r0, r6
        if(copy_ext->static_txt == 0) lv_label_set_text(new_label, lv_label_get_text(copy));
 8018a24:	07db      	lsls	r3, r3, #31
 8018a26:	d41f      	bmi.n	8018a68 <lv_label_create+0x150>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8018a28:	f7f3 fa76 	bl	800bf18 <lv_obj_get_ext_attr>
        if(copy_ext->static_txt == 0) lv_label_set_text(new_label, lv_label_get_text(copy));
 8018a2c:	6801      	ldr	r1, [r0, #0]
 8018a2e:	4620      	mov	r0, r4
 8018a30:	f7ff fedc 	bl	80187ec <lv_label_set_text>
        if(copy_ext->long_mode == LV_LABEL_LONG_DOT) {
 8018a34:	793b      	ldrb	r3, [r7, #4]
 8018a36:	2b03      	cmp	r3, #3
 8018a38:	d037      	beq.n	8018aaa <lv_label_create+0x192>
        memcpy(ext->dot_tmp, copy_ext->dot_tmp, sizeof(ext->dot_tmp));
 8018a3a:	463b      	mov	r3, r7
        lv_obj_refresh_style(new_label);
 8018a3c:	4620      	mov	r0, r4
        memcpy(ext->dot_tmp, copy_ext->dot_tmp, sizeof(ext->dot_tmp));
 8018a3e:	f853 ef05 	ldr.w	lr, [r3, #5]!
 8018a42:	685e      	ldr	r6, [r3, #4]
 8018a44:	6899      	ldr	r1, [r3, #8]
 8018a46:	f8c5 e005 	str.w	lr, [r5, #5]
 8018a4a:	f8c5 6009 	str.w	r6, [r5, #9]
 8018a4e:	f8c5 100d 	str.w	r1, [r5, #13]
 8018a52:	7b1b      	ldrb	r3, [r3, #12]
 8018a54:	746b      	strb	r3, [r5, #17]
        ext->dot_end = copy_ext->dot_end;
 8018a56:	8a7b      	ldrh	r3, [r7, #18]
 8018a58:	826b      	strh	r3, [r5, #18]
        lv_obj_refresh_style(new_label);
 8018a5a:	f7f2 ff89 	bl	800b970 <lv_obj_refresh_style>
}
 8018a5e:	4620      	mov	r0, r4
 8018a60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018a64:	e7fe      	b.n	8018a64 <lv_label_create+0x14c>
 8018a66:	e7fe      	b.n	8018a66 <lv_label_create+0x14e>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8018a68:	f7f3 fa56 	bl	800bf18 <lv_obj_get_ext_attr>
    return ext->text;
 8018a6c:	f8d0 9000 	ldr.w	r9, [r0]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8018a70:	4620      	mov	r0, r4
 8018a72:	f7f3 fa51 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->static_txt == 0 && ext->text != NULL) {
 8018a76:	7e83      	ldrb	r3, [r0, #26]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8018a78:	4606      	mov	r6, r0
    if(ext->static_txt == 0 && ext->text != NULL) {
 8018a7a:	f013 0801 	ands.w	r8, r3, #1
 8018a7e:	d105      	bne.n	8018a8c <lv_label_create+0x174>
 8018a80:	6800      	ldr	r0, [r0, #0]
 8018a82:	b118      	cbz	r0, 8018a8c <lv_label_create+0x174>
        lv_mem_free(ext->text);
 8018a84:	f7fa fbf2 	bl	801326c <lv_mem_free>
        ext->text = NULL;
 8018a88:	f8c6 8000 	str.w	r8, [r6]
    if(text != NULL) {
 8018a8c:	f1b9 0f00 	cmp.w	r9, #0
 8018a90:	d005      	beq.n	8018a9e <lv_label_create+0x186>
        ext->static_txt = 1;
 8018a92:	7eb3      	ldrb	r3, [r6, #26]
        ext->text = (char *) text;
 8018a94:	f8c6 9000 	str.w	r9, [r6]
        ext->static_txt = 1;
 8018a98:	f043 0301 	orr.w	r3, r3, #1
 8018a9c:	76b3      	strb	r3, [r6, #26]
    lv_label_refr_text(label);
 8018a9e:	4620      	mov	r0, r4
 8018aa0:	f7ff fc32 	bl	8018308 <lv_label_refr_text>
        if(copy_ext->long_mode == LV_LABEL_LONG_DOT) {
 8018aa4:	793b      	ldrb	r3, [r7, #4]
 8018aa6:	2b03      	cmp	r3, #3
 8018aa8:	d1c7      	bne.n	8018a3a <lv_label_create+0x122>
            ext->text = lv_mem_realloc(ext->text, lv_mem_get_size(copy_ext->text));
 8018aaa:	682e      	ldr	r6, [r5, #0]
 8018aac:	6838      	ldr	r0, [r7, #0]
 8018aae:	f7fa fd45 	bl	801353c <lv_mem_get_size>
 8018ab2:	4601      	mov	r1, r0
 8018ab4:	4630      	mov	r0, r6
 8018ab6:	f7fa fc33 	bl	8013320 <lv_mem_realloc>
 8018aba:	4606      	mov	r6, r0
 8018abc:	6028      	str	r0, [r5, #0]
            lv_mem_assert(ext->text);
 8018abe:	b150      	cbz	r0, 8018ad6 <lv_label_create+0x1be>
            memcpy(ext->text, copy_ext->text, lv_mem_get_size(copy_ext->text));
 8018ac0:	f8d7 8000 	ldr.w	r8, [r7]
 8018ac4:	4640      	mov	r0, r8
 8018ac6:	f7fa fd39 	bl	801353c <lv_mem_get_size>
 8018aca:	4641      	mov	r1, r8
 8018acc:	4602      	mov	r2, r0
 8018ace:	4630      	mov	r0, r6
 8018ad0:	f004 ff84 	bl	801d9dc <memcpy>
 8018ad4:	e7b1      	b.n	8018a3a <lv_label_create+0x122>
 8018ad6:	e7fe      	b.n	8018ad6 <lv_label_create+0x1be>
        lv_obj_set_click(new_label, false);
 8018ad8:	4631      	mov	r1, r6
 8018ada:	4620      	mov	r0, r4
 8018adc:	f7f3 f852 	bl	800bb84 <lv_obj_set_click>
        lv_label_set_long_mode(new_label, LV_LABEL_LONG_EXPAND);
 8018ae0:	4631      	mov	r1, r6
 8018ae2:	4620      	mov	r0, r4
 8018ae4:	f7ff feba 	bl	801885c <lv_label_set_long_mode>
        lv_label_set_text(new_label, "Text");
 8018ae8:	4620      	mov	r0, r4
 8018aea:	490a      	ldr	r1, [pc, #40]	; (8018b14 <lv_label_create+0x1fc>)
 8018aec:	f7ff fe7e 	bl	80187ec <lv_label_set_text>
    lv_obj_set_style(label, style);
 8018af0:	4620      	mov	r0, r4
 8018af2:	4631      	mov	r1, r6
 8018af4:	f7f2 fb2e 	bl	800b154 <lv_obj_set_style>
}
 8018af8:	4620      	mov	r0, r4
 8018afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_label);
 8018afe:	f7f3 fa07 	bl	800bf10 <lv_obj_get_signal_func>
 8018b02:	6028      	str	r0, [r5, #0]
 8018b04:	e716      	b.n	8018934 <lv_label_create+0x1c>
 8018b06:	bf00      	nop
 8018b08:	2001662c 	.word	0x2001662c
 8018b0c:	08017e1d 	.word	0x08017e1d
 8018b10:	08018669 	.word	0x08018669
 8018b14:	080c7490 	.word	0x080c7490

08018b18 <lv_label_ins_text>:
{
 8018b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018b1c:	460d      	mov	r5, r1
 8018b1e:	4690      	mov	r8, r2
 8018b20:	4607      	mov	r7, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8018b22:	f7f3 f9f9 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->static_txt != 0) return;
 8018b26:	7e83      	ldrb	r3, [r0, #26]
 8018b28:	07db      	lsls	r3, r3, #31
 8018b2a:	d501      	bpl.n	8018b30 <lv_label_ins_text+0x18>
 8018b2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018b30:	4604      	mov	r4, r0
    lv_obj_invalidate(label);
 8018b32:	4638      	mov	r0, r7
 8018b34:	f7f1 f8d4 	bl	8009ce0 <lv_obj_invalidate>
    uint32_t old_len = strlen(ext->text);
 8018b38:	f8d4 9000 	ldr.w	r9, [r4]
 8018b3c:	4648      	mov	r0, r9
 8018b3e:	f7e7 fb6d 	bl	800021c <strlen>
 8018b42:	4606      	mov	r6, r0
    uint32_t ins_len = strlen(txt);
 8018b44:	4640      	mov	r0, r8
 8018b46:	f7e7 fb69 	bl	800021c <strlen>
    uint32_t new_len = ins_len + old_len;
 8018b4a:	1831      	adds	r1, r6, r0
    ext->text = lv_mem_realloc(ext->text, new_len + 1);
 8018b4c:	4648      	mov	r0, r9
 8018b4e:	3101      	adds	r1, #1
 8018b50:	f7fa fbe6 	bl	8013320 <lv_mem_realloc>
 8018b54:	6020      	str	r0, [r4, #0]
    lv_mem_assert(ext->text);
 8018b56:	b160      	cbz	r0, 8018b72 <lv_label_ins_text+0x5a>
    if(pos == LV_LABEL_POS_LAST) {
 8018b58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018b5c:	4295      	cmp	r5, r2
 8018b5e:	d009      	beq.n	8018b74 <lv_label_ins_text+0x5c>
    lv_txt_ins(ext->text, pos, txt);
 8018b60:	4642      	mov	r2, r8
 8018b62:	4629      	mov	r1, r5
 8018b64:	f7fb fa36 	bl	8013fd4 <lv_txt_ins>
    lv_label_refr_text(label);
 8018b68:	4638      	mov	r0, r7
}
 8018b6a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    lv_label_refr_text(label);
 8018b6e:	f7ff bbcb 	b.w	8018308 <lv_label_refr_text>
 8018b72:	e7fe      	b.n	8018b72 <lv_label_ins_text+0x5a>
        pos = lv_txt_get_encoded_length(ext->text);
 8018b74:	4b02      	ldr	r3, [pc, #8]	; (8018b80 <lv_label_ins_text+0x68>)
 8018b76:	681b      	ldr	r3, [r3, #0]
 8018b78:	4798      	blx	r3
 8018b7a:	4605      	mov	r5, r0
 8018b7c:	6820      	ldr	r0, [r4, #0]
 8018b7e:	e7ef      	b.n	8018b60 <lv_label_ins_text+0x48>
 8018b80:	200002ec 	.word	0x200002ec

08018b84 <refr_btn_width>:

    return res;
}

static void refr_btn_width(lv_obj_t * list)
{
 8018b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018b88:	4681      	mov	r9, r0
    lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 8018b8a:	f7f3 f9c5 	bl	800bf18 <lv_obj_get_ext_attr>
            style = lv_page_get_style(list, LV_PAGE_STYLE_BG);
 8018b8e:	2100      	movs	r1, #0
 8018b90:	4648      	mov	r0, r9
 8018b92:	f001 fde5 	bl	801a760 <lv_page_get_style>
 8018b96:	4605      	mov	r5, r0
    lv_style_t * style = lv_list_get_style(list, LV_LIST_STYLE_BG);
    lv_style_t * style_scrl = lv_obj_get_style(lv_page_get_scrl(list));
 8018b98:	4648      	mov	r0, r9
 8018b9a:	f001 fdd3 	bl	801a744 <lv_page_get_scrl>
 8018b9e:	f7f3 f93d 	bl	800be1c <lv_obj_get_style>
 8018ba2:	4604      	mov	r4, r0
    lv_coord_t w = lv_obj_get_width(list);
 8018ba4:	4648      	mov	r0, r9
 8018ba6:	f7f3 f92d 	bl	800be04 <lv_obj_get_width>
    lv_coord_t btn_w = w - (style->body.padding.hor + style_scrl->body.padding.hor) * 2;
 8018baa:	f9b5 8022 	ldrsh.w	r8, [r5, #34]	; 0x22
 8018bae:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8018bb2:	4498      	add	r8, r3
 8018bb4:	eba0 0848 	sub.w	r8, r0, r8, lsl #1
    lv_obj_t * scrl = lv_page_get_scrl(list);
 8018bb8:	4648      	mov	r0, r9
 8018bba:	f001 fdc3 	bl	801a744 <lv_page_get_scrl>
    btn = lv_obj_get_child(scrl, prev_btn);
 8018bbe:	2100      	movs	r1, #0
    lv_obj_t * scrl = lv_page_get_scrl(list);
 8018bc0:	4605      	mov	r5, r0
    btn = lv_obj_get_child(scrl, prev_btn);
 8018bc2:	f7f3 f901 	bl	800bdc8 <lv_obj_get_child>
    if(btn == NULL) return NULL;
 8018bc6:	2800      	cmp	r0, #0
 8018bc8:	d050      	beq.n	8018c6c <refr_btn_width+0xe8>
 8018bca:	fa0f f888 	sxth.w	r8, r8
 8018bce:	4604      	mov	r4, r0
 8018bd0:	4e27      	ldr	r6, [pc, #156]	; (8018c70 <refr_btn_width+0xec>)
 8018bd2:	e006      	b.n	8018be2 <refr_btn_width+0x5e>
        btn = lv_obj_get_child(scrl, btn);
 8018bd4:	4621      	mov	r1, r4
 8018bd6:	4628      	mov	r0, r5
 8018bd8:	f7f3 f8f6 	bl	800bdc8 <lv_obj_get_child>
        if(btn == NULL) break;
 8018bdc:	4604      	mov	r4, r0
 8018bde:	2800      	cmp	r0, #0
 8018be0:	d040      	beq.n	8018c64 <refr_btn_width+0xe0>
    while(btn->signal_func != lv_list_btn_signal) {
 8018be2:	69a3      	ldr	r3, [r4, #24]
 8018be4:	42b3      	cmp	r3, r6
 8018be6:	d1f5      	bne.n	8018bd4 <refr_btn_width+0x50>
 8018be8:	4f22      	ldr	r7, [pc, #136]	; (8018c74 <refr_btn_width+0xf0>)

    lv_obj_t * btn = lv_list_get_prev_btn(list, NULL);
    while(btn) {
        /*Make the size adjustment for each buttons*/
        if(lv_obj_get_width(btn) != btn_w) {
 8018bea:	4620      	mov	r0, r4
 8018bec:	f7f3 f90a 	bl	800be04 <lv_obj_get_width>
 8018bf0:	4580      	cmp	r8, r0
 8018bf2:	d01f      	beq.n	8018c34 <refr_btn_width+0xb0>
            lv_obj_set_width(btn, btn_w);
 8018bf4:	4641      	mov	r1, r8
 8018bf6:	4620      	mov	r0, r4
 8018bf8:	f7f2 f9c4 	bl	800af84 <lv_obj_set_width>
    lv_obj_t * label = lv_obj_get_child(btn, NULL);
 8018bfc:	2100      	movs	r1, #0
 8018bfe:	4620      	mov	r0, r4
 8018c00:	f7f3 f8e2 	bl	800bdc8 <lv_obj_get_child>
    if(label == NULL) return NULL;
 8018c04:	4605      	mov	r5, r0
 8018c06:	b930      	cbnz	r0, 8018c16 <refr_btn_width+0x92>
 8018c08:	e029      	b.n	8018c5e <refr_btn_width+0xda>
        label = lv_obj_get_child(btn, label);
 8018c0a:	4629      	mov	r1, r5
 8018c0c:	4620      	mov	r0, r4
 8018c0e:	f7f3 f8db 	bl	800bdc8 <lv_obj_get_child>
        if(label == NULL) break;
 8018c12:	4605      	mov	r5, r0
 8018c14:	b318      	cbz	r0, 8018c5e <refr_btn_width+0xda>
    while(label->signal_func != label_signal) {
 8018c16:	69aa      	ldr	r2, [r5, #24]
 8018c18:	683b      	ldr	r3, [r7, #0]
 8018c1a:	429a      	cmp	r2, r3
 8018c1c:	d1f5      	bne.n	8018c0a <refr_btn_width+0x86>
            /*Set the label size to roll its text*/
            lv_obj_t * label = lv_list_get_btn_label(btn);
            lv_obj_set_width(label, btn->coords.x2 - label->coords.x1);
 8018c1e:	8aa1      	ldrh	r1, [r4, #20]
 8018c20:	4628      	mov	r0, r5
 8018c22:	8a2b      	ldrh	r3, [r5, #16]
 8018c24:	1ac9      	subs	r1, r1, r3
 8018c26:	b209      	sxth	r1, r1
 8018c28:	f7f2 f9ac 	bl	800af84 <lv_obj_set_width>
            lv_label_set_text(label, NULL);
 8018c2c:	4628      	mov	r0, r5
 8018c2e:	2100      	movs	r1, #0
 8018c30:	f7ff fddc 	bl	80187ec <lv_label_set_text>
    lv_obj_t * scrl = lv_page_get_scrl(list);
 8018c34:	4648      	mov	r0, r9
 8018c36:	f001 fd85 	bl	801a744 <lv_page_get_scrl>
    btn = lv_obj_get_child(scrl, prev_btn);
 8018c3a:	4621      	mov	r1, r4
    lv_obj_t * scrl = lv_page_get_scrl(list);
 8018c3c:	4605      	mov	r5, r0
    btn = lv_obj_get_child(scrl, prev_btn);
 8018c3e:	f7f3 f8c3 	bl	800bdc8 <lv_obj_get_child>
    if(btn == NULL) return NULL;
 8018c42:	4604      	mov	r4, r0
 8018c44:	b180      	cbz	r0, 8018c68 <refr_btn_width+0xe4>
    while(btn->signal_func != lv_list_btn_signal) {
 8018c46:	69a3      	ldr	r3, [r4, #24]
 8018c48:	42b3      	cmp	r3, r6
 8018c4a:	d0ce      	beq.n	8018bea <refr_btn_width+0x66>
        btn = lv_obj_get_child(scrl, btn);
 8018c4c:	4621      	mov	r1, r4
 8018c4e:	4628      	mov	r0, r5
 8018c50:	f7f3 f8ba 	bl	800bdc8 <lv_obj_get_child>
        if(btn == NULL) break;
 8018c54:	4604      	mov	r4, r0
 8018c56:	2800      	cmp	r0, #0
 8018c58:	d1f5      	bne.n	8018c46 <refr_btn_width+0xc2>
 8018c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            lv_obj_set_width(label, btn->coords.x2 - label->coords.x1);
 8018c5e:	2300      	movs	r3, #0
 8018c60:	8a1b      	ldrh	r3, [r3, #16]
 8018c62:	deff      	udf	#255	; 0xff
 8018c64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018c68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018c6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018c70:	08019241 	.word	0x08019241
 8018c74:	20016630 	.word	0x20016630

08018c78 <lv_list_set_btn_selected>:
{
 8018c78:	b570      	push	{r4, r5, r6, lr}
 8018c7a:	460d      	mov	r5, r1
 8018c7c:	4606      	mov	r6, r0
    lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 8018c7e:	f7f3 f94b 	bl	800bf18 <lv_obj_get_ext_attr>
 8018c82:	4604      	mov	r4, r0
    if(ext->selected_btn) {
 8018c84:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8018c86:	b128      	cbz	r0, 8018c94 <lv_list_set_btn_selected+0x1c>
        lv_btn_state_t s = lv_btn_get_state(ext->selected_btn);
 8018c88:	f7fc fafc 	bl	8015284 <lv_btn_get_state>
        if(s == LV_BTN_STATE_PR) lv_btn_set_state(ext->selected_btn, LV_BTN_STATE_REL);
 8018c8c:	2801      	cmp	r0, #1
 8018c8e:	d01c      	beq.n	8018cca <lv_list_set_btn_selected+0x52>
        else if(s == LV_BTN_STATE_TGL_PR) lv_btn_set_state(ext->selected_btn, LV_BTN_STATE_TGL_REL);
 8018c90:	2803      	cmp	r0, #3
 8018c92:	d01f      	beq.n	8018cd4 <lv_list_set_btn_selected+0x5c>
    ext->selected_btn = btn;
 8018c94:	6625      	str	r5, [r4, #96]	; 0x60
    ext->last_sel = btn;
 8018c96:	65e5      	str	r5, [r4, #92]	; 0x5c
    if(ext->selected_btn) {
 8018c98:	b18d      	cbz	r5, 8018cbe <lv_list_set_btn_selected+0x46>
        lv_btn_state_t s = lv_btn_get_state(ext->selected_btn);
 8018c9a:	4628      	mov	r0, r5
 8018c9c:	f7fc faf2 	bl	8015284 <lv_btn_get_state>
        if(s == LV_BTN_STATE_REL) lv_btn_set_state(ext->selected_btn, LV_BTN_STATE_PR);
 8018ca0:	b140      	cbz	r0, 8018cb4 <lv_list_set_btn_selected+0x3c>
        else if(s == LV_BTN_STATE_TGL_REL) lv_btn_set_state(ext->selected_btn, LV_BTN_STATE_TGL_PR);
 8018ca2:	2802      	cmp	r0, #2
 8018ca4:	d00c      	beq.n	8018cc0 <lv_list_set_btn_selected+0x48>
        lv_page_focus(list, ext->selected_btn, ext->anim_time);
 8018ca6:	4630      	mov	r0, r6
 8018ca8:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8018caa:	6e21      	ldr	r1, [r4, #96]	; 0x60
}
 8018cac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_page_focus(list, ext->selected_btn, ext->anim_time);
 8018cb0:	f001 bd7e 	b.w	801a7b0 <lv_page_focus>
        if(s == LV_BTN_STATE_REL) lv_btn_set_state(ext->selected_btn, LV_BTN_STATE_PR);
 8018cb4:	2101      	movs	r1, #1
 8018cb6:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8018cb8:	f7fc faa2 	bl	8015200 <lv_btn_set_state>
 8018cbc:	e7f3      	b.n	8018ca6 <lv_list_set_btn_selected+0x2e>
 8018cbe:	bd70      	pop	{r4, r5, r6, pc}
        else if(s == LV_BTN_STATE_TGL_REL) lv_btn_set_state(ext->selected_btn, LV_BTN_STATE_TGL_PR);
 8018cc0:	2103      	movs	r1, #3
 8018cc2:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8018cc4:	f7fc fa9c 	bl	8015200 <lv_btn_set_state>
 8018cc8:	e7ed      	b.n	8018ca6 <lv_list_set_btn_selected+0x2e>
        if(s == LV_BTN_STATE_PR) lv_btn_set_state(ext->selected_btn, LV_BTN_STATE_REL);
 8018cca:	2100      	movs	r1, #0
 8018ccc:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8018cce:	f7fc fa97 	bl	8015200 <lv_btn_set_state>
 8018cd2:	e7df      	b.n	8018c94 <lv_list_set_btn_selected+0x1c>
        else if(s == LV_BTN_STATE_TGL_PR) lv_btn_set_state(ext->selected_btn, LV_BTN_STATE_TGL_REL);
 8018cd4:	2102      	movs	r1, #2
 8018cd6:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8018cd8:	f7fc fa92 	bl	8015200 <lv_btn_set_state>
 8018cdc:	e7da      	b.n	8018c94 <lv_list_set_btn_selected+0x1c>
 8018cde:	bf00      	nop

08018ce0 <lv_list_add>:
{
 8018ce0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ce4:	4606      	mov	r6, r0
 8018ce6:	468a      	mov	sl, r1
 8018ce8:	4691      	mov	r9, r2
 8018cea:	461f      	mov	r7, r3
    lv_style_t * style = lv_obj_get_style(list);
 8018cec:	f7f3 f896 	bl	800be1c <lv_obj_get_style>
 8018cf0:	4683      	mov	fp, r0
    lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 8018cf2:	4630      	mov	r0, r6
    if(ancestor_btn_signal == NULL) ancestor_btn_signal = lv_obj_get_signal_func(liste);
 8018cf4:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8018e5c <lv_list_add+0x17c>
    lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 8018cf8:	f7f3 f90e 	bl	800bf18 <lv_obj_get_ext_attr>
 8018cfc:	4605      	mov	r5, r0
    liste = lv_btn_create(list, NULL);
 8018cfe:	2100      	movs	r1, #0
 8018d00:	4630      	mov	r0, r6
    ext->size ++;
 8018d02:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8018d04:	3301      	adds	r3, #1
 8018d06:	656b      	str	r3, [r5, #84]	; 0x54
    liste = lv_btn_create(list, NULL);
 8018d08:	f7fc f98c 	bl	8015024 <lv_btn_create>
    if(ancestor_btn_signal == NULL) ancestor_btn_signal = lv_obj_get_signal_func(liste);
 8018d0c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    liste = lv_btn_create(list, NULL);
 8018d10:	4604      	mov	r4, r0
    if(ancestor_btn_signal == NULL) ancestor_btn_signal = lv_obj_get_signal_func(liste);
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	f000 808f 	beq.w	8018e36 <lv_list_add+0x156>
    lv_btn_set_style(liste, LV_BTN_STYLE_REL, ext->styles_btn[LV_BTN_STATE_REL]);
 8018d18:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8018d1a:	2100      	movs	r1, #0
 8018d1c:	4620      	mov	r0, r4
 8018d1e:	f7fc fa8f 	bl	8015240 <lv_btn_set_style>
    lv_btn_set_style(liste, LV_BTN_STYLE_PR, ext->styles_btn[LV_BTN_STATE_PR]);
 8018d22:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8018d24:	2101      	movs	r1, #1
 8018d26:	4620      	mov	r0, r4
 8018d28:	f7fc fa8a 	bl	8015240 <lv_btn_set_style>
    lv_btn_set_style(liste, LV_BTN_STYLE_TGL_REL, ext->styles_btn[LV_BTN_STATE_TGL_REL]);
 8018d2c:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8018d2e:	2102      	movs	r1, #2
 8018d30:	4620      	mov	r0, r4
 8018d32:	f7fc fa85 	bl	8015240 <lv_btn_set_style>
    lv_btn_set_style(liste, LV_BTN_STYLE_TGL_PR, ext->styles_btn[LV_BTN_STATE_TGL_PR]);
 8018d36:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8018d38:	2103      	movs	r1, #3
 8018d3a:	4620      	mov	r0, r4
 8018d3c:	f7fc fa80 	bl	8015240 <lv_btn_set_style>
    lv_btn_set_style(liste, LV_BTN_STYLE_INA, ext->styles_btn[LV_BTN_STATE_INA]);
 8018d40:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8018d42:	2104      	movs	r1, #4
 8018d44:	4620      	mov	r0, r4
 8018d46:	f7fc fa7b 	bl	8015240 <lv_btn_set_style>
    lv_btn_set_action(liste, LV_BTN_ACTION_CLICK, rel_action);
 8018d4a:	463a      	mov	r2, r7
 8018d4c:	2100      	movs	r1, #0
 8018d4e:	4620      	mov	r0, r4
 8018d50:	f7fc fa6a 	bl	8015228 <lv_btn_set_action>
    lv_page_glue_obj(liste, true);
 8018d54:	2101      	movs	r1, #1
 8018d56:	4620      	mov	r0, r4
 8018d58:	f001 fd1e 	bl	801a798 <lv_page_glue_obj>
 8018d5c:	2106      	movs	r1, #6
 8018d5e:	4620      	mov	r0, r4
 8018d60:	f7fe fbd8 	bl	8017514 <lv_cont_set_layout>
 * @param hor_en true: enable the horizontal fit
 * @param ver_en true: enable the vertical fit
 */
static inline void lv_btn_set_fit(lv_obj_t * btn, bool hor_en, bool ver_en)
{
    lv_cont_set_fit(btn, hor_en, ver_en);
 8018d64:	2201      	movs	r2, #1
 8018d66:	2100      	movs	r1, #0
 8018d68:	4620      	mov	r0, r4
 8018d6a:	f7fe fbed 	bl	8017548 <lv_cont_set_fit>
    lv_obj_set_protect(liste, LV_PROTECT_PRESS_LOST);
 8018d6e:	2110      	movs	r1, #16
 8018d70:	4620      	mov	r0, r4
 8018d72:	f7f2 ff2d 	bl	800bbd0 <lv_obj_set_protect>
    lv_obj_set_signal_func(liste, lv_list_btn_signal);
 8018d76:	4938      	ldr	r1, [pc, #224]	; (8018e58 <lv_list_add+0x178>)
 8018d78:	4620      	mov	r0, r4
 8018d7a:	f7f2 ff37 	bl	800bbec <lv_obj_set_signal_func>
    lv_coord_t w = lv_obj_get_width(list);
 8018d7e:	4630      	mov	r0, r6
 8018d80:	f7f3 f840 	bl	800be04 <lv_obj_get_width>
 8018d84:	4607      	mov	r7, r0
    lv_style_t  * style_scrl = lv_obj_get_style(lv_page_get_scrl(list));
 8018d86:	4630      	mov	r0, r6
 8018d88:	f001 fcdc 	bl	801a744 <lv_page_get_scrl>
 8018d8c:	f7f3 f846 	bl	800be1c <lv_obj_get_style>
    lv_coord_t pad_hor_tot = style->body.padding.hor + style_scrl->body.padding.hor;
 8018d90:	f8bb 1022 	ldrh.w	r1, [fp, #34]	; 0x22
 8018d94:	8c43      	ldrh	r3, [r0, #34]	; 0x22
    lv_obj_set_width(liste, w);
 8018d96:	4620      	mov	r0, r4
    lv_coord_t pad_hor_tot = style->body.padding.hor + style_scrl->body.padding.hor;
 8018d98:	4419      	add	r1, r3
    w -= pad_hor_tot * 2;
 8018d9a:	eba7 0141 	sub.w	r1, r7, r1, lsl #1
    lv_obj_set_width(liste, w);
 8018d9e:	b209      	sxth	r1, r1
 8018da0:	f7f2 f8f0 	bl	800af84 <lv_obj_set_width>
    if(img_src) {
 8018da4:	f1ba 0f00 	cmp.w	sl, #0
 8018da8:	d012      	beq.n	8018dd0 <lv_list_add+0xf0>
        img = lv_img_create(liste, NULL);
 8018daa:	2100      	movs	r1, #0
 8018dac:	4620      	mov	r0, r4
 8018dae:	f7fe fd4d 	bl	801784c <lv_img_create>
 8018db2:	4607      	mov	r7, r0
        lv_img_set_src(img, img_src);
 8018db4:	4651      	mov	r1, sl
 8018db6:	f7fe fca1 	bl	80176fc <lv_img_set_src>
        lv_obj_set_style(img, ext->style_img);
 8018dba:	4638      	mov	r0, r7
 8018dbc:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8018dbe:	f7f2 f9c9 	bl	800b154 <lv_obj_set_style>
        lv_obj_set_click(img, false);
 8018dc2:	4638      	mov	r0, r7
 8018dc4:	2100      	movs	r1, #0
 8018dc6:	f7f2 fedd 	bl	800bb84 <lv_obj_set_click>
        if(img_signal == NULL) img_signal = lv_obj_get_signal_func(img);
 8018dca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018dce:	b3bb      	cbz	r3, 8018e40 <lv_list_add+0x160>
    if(txt != NULL) {
 8018dd0:	f1b9 0f00 	cmp.w	r9, #0
 8018dd4:	d01e      	beq.n	8018e14 <lv_list_add+0x134>
        lv_coord_t btn_hor_pad = ext->styles_btn[LV_BTN_STYLE_REL]->body.padding.hor;
 8018dd6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
        lv_obj_t * label = lv_label_create(liste, NULL);
 8018dd8:	2100      	movs	r1, #0
 8018dda:	4620      	mov	r0, r4
        lv_coord_t btn_hor_pad = ext->styles_btn[LV_BTN_STYLE_REL]->body.padding.hor;
 8018ddc:	f9b3 a022 	ldrsh.w	sl, [r3, #34]	; 0x22
        lv_obj_t * label = lv_label_create(liste, NULL);
 8018de0:	f7ff fd9a 	bl	8018918 <lv_label_create>
 8018de4:	4607      	mov	r7, r0
        lv_label_set_text(label, txt);
 8018de6:	4649      	mov	r1, r9
 8018de8:	f7ff fd00 	bl	80187ec <lv_label_set_text>
        lv_obj_set_click(label, false);
 8018dec:	2100      	movs	r1, #0
 8018dee:	4638      	mov	r0, r7
 8018df0:	f7f2 fec8 	bl	800bb84 <lv_obj_set_click>
        lv_label_set_long_mode(label, LV_LABEL_LONG_ROLL);
 8018df4:	4638      	mov	r0, r7
 8018df6:	2104      	movs	r1, #4
 8018df8:	f7ff fd30 	bl	801885c <lv_label_set_long_mode>
        lv_obj_set_width(label, liste->coords.x2 - label->coords.x1 - btn_hor_pad);
 8018dfc:	8a3b      	ldrh	r3, [r7, #16]
 8018dfe:	8aa1      	ldrh	r1, [r4, #20]
 8018e00:	4638      	mov	r0, r7
 8018e02:	1ac9      	subs	r1, r1, r3
 8018e04:	eba1 010a 	sub.w	r1, r1, sl
 8018e08:	b209      	sxth	r1, r1
 8018e0a:	f7f2 f8bb 	bl	800af84 <lv_obj_set_width>
        if(label_signal == NULL) label_signal = lv_obj_get_signal_func(label);
 8018e0e:	f8d8 3000 	ldr.w	r3, [r8]
 8018e12:	b1db      	cbz	r3, 8018e4c <lv_list_add+0x16c>
        lv_group_t *g = lv_obj_get_group(list);
 8018e14:	4630      	mov	r0, r6
 8018e16:	f7f3 f881 	bl	800bf1c <lv_obj_get_group>
        if(ext->size == 1 && lv_group_get_focused(g) == list) {
 8018e1a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8018e1c:	2b01      	cmp	r3, #1
 8018e1e:	d002      	beq.n	8018e26 <lv_list_add+0x146>
}
 8018e20:	4620      	mov	r0, r4
 8018e22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(ext->size == 1 && lv_group_get_focused(g) == list) {
 8018e26:	f7ef fb27 	bl	8008478 <lv_group_get_focused>
 8018e2a:	4286      	cmp	r6, r0
 8018e2c:	d1f8      	bne.n	8018e20 <lv_list_add+0x140>
            lv_list_set_btn_selected(list, liste);
 8018e2e:	4621      	mov	r1, r4
 8018e30:	f7ff ff22 	bl	8018c78 <lv_list_set_btn_selected>
    return liste;
 8018e34:	e7f4      	b.n	8018e20 <lv_list_add+0x140>
    if(ancestor_btn_signal == NULL) ancestor_btn_signal = lv_obj_get_signal_func(liste);
 8018e36:	f7f3 f86b 	bl	800bf10 <lv_obj_get_signal_func>
 8018e3a:	f8c8 0004 	str.w	r0, [r8, #4]
 8018e3e:	e76b      	b.n	8018d18 <lv_list_add+0x38>
        if(img_signal == NULL) img_signal = lv_obj_get_signal_func(img);
 8018e40:	4638      	mov	r0, r7
 8018e42:	f7f3 f865 	bl	800bf10 <lv_obj_get_signal_func>
 8018e46:	f8c8 0008 	str.w	r0, [r8, #8]
 8018e4a:	e7c1      	b.n	8018dd0 <lv_list_add+0xf0>
        if(label_signal == NULL) label_signal = lv_obj_get_signal_func(label);
 8018e4c:	4638      	mov	r0, r7
 8018e4e:	f7f3 f85f 	bl	800bf10 <lv_obj_get_signal_func>
 8018e52:	f8c8 0000 	str.w	r0, [r8]
 8018e56:	e7dd      	b.n	8018e14 <lv_list_add+0x134>
 8018e58:	08019241 	.word	0x08019241
 8018e5c:	20016630 	.word	0x20016630

08018e60 <lv_list_set_style>:
{
 8018e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018e64:	460c      	mov	r4, r1
 8018e66:	4615      	mov	r5, r2
 8018e68:	4680      	mov	r8, r0
    lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 8018e6a:	f7f3 f855 	bl	800bf18 <lv_obj_get_ext_attr>
 8018e6e:	4607      	mov	r7, r0
    switch(type) {
 8018e70:	2c08      	cmp	r4, #8
 8018e72:	d86f      	bhi.n	8018f54 <lv_list_set_style+0xf4>
 8018e74:	e8df f004 	tbb	[pc, r4]
 8018e78:	554e443d 	.word	0x554e443d
 8018e7c:	6864605c 	.word	0x6864605c
 8018e80:	05          	.byte	0x05
 8018e81:	00          	.byte	0x00
            btn_style_refr = LV_BTN_STYLE_INA;
 8018e82:	f04f 0904 	mov.w	r9, #4
            ext->styles_btn[LV_BTN_STATE_INA] = style;
 8018e86:	64c5      	str	r5, [r0, #76]	; 0x4c
    lv_obj_t * scrl = lv_page_get_scrl(list);
 8018e88:	4640      	mov	r0, r8
 8018e8a:	f001 fc5b 	bl	801a744 <lv_page_get_scrl>
    btn = lv_obj_get_child(scrl, prev_btn);
 8018e8e:	2100      	movs	r1, #0
    lv_obj_t * scrl = lv_page_get_scrl(list);
 8018e90:	4606      	mov	r6, r0
    btn = lv_obj_get_child(scrl, prev_btn);
 8018e92:	f7f2 ff99 	bl	800bdc8 <lv_obj_get_child>
    if(btn == NULL) return NULL;
 8018e96:	4604      	mov	r4, r0
 8018e98:	2800      	cmp	r0, #0
 8018e9a:	d063      	beq.n	8018f64 <lv_list_set_style+0x104>
 8018e9c:	4d32      	ldr	r5, [pc, #200]	; (8018f68 <lv_list_set_style+0x108>)
 8018e9e:	e004      	b.n	8018eaa <lv_list_set_style+0x4a>
        btn = lv_obj_get_child(scrl, btn);
 8018ea0:	f7f2 ff92 	bl	800bdc8 <lv_obj_get_child>
        if(btn == NULL) break;
 8018ea4:	4604      	mov	r4, r0
 8018ea6:	2800      	cmp	r0, #0
 8018ea8:	d052      	beq.n	8018f50 <lv_list_set_style+0xf0>
    while(btn->signal_func != lv_list_btn_signal) {
 8018eaa:	69a3      	ldr	r3, [r4, #24]
        btn = lv_obj_get_child(scrl, btn);
 8018eac:	4621      	mov	r1, r4
 8018eae:	4630      	mov	r0, r6
    while(btn->signal_func != lv_list_btn_signal) {
 8018eb0:	42ab      	cmp	r3, r5
 8018eb2:	d1f5      	bne.n	8018ea0 <lv_list_set_style+0x40>
 8018eb4:	f109 030e 	add.w	r3, r9, #14
            lv_btn_set_style(btn, btn_style_refr, ext->styles_btn[btn_style_refr]);
 8018eb8:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8018ebc:	687a      	ldr	r2, [r7, #4]
 8018ebe:	4649      	mov	r1, r9
 8018ec0:	4620      	mov	r0, r4
 8018ec2:	f7fc f9bd 	bl	8015240 <lv_btn_set_style>
    lv_obj_t * scrl = lv_page_get_scrl(list);
 8018ec6:	4640      	mov	r0, r8
 8018ec8:	f001 fc3c 	bl	801a744 <lv_page_get_scrl>
    btn = lv_obj_get_child(scrl, prev_btn);
 8018ecc:	4621      	mov	r1, r4
    lv_obj_t * scrl = lv_page_get_scrl(list);
 8018ece:	4606      	mov	r6, r0
    btn = lv_obj_get_child(scrl, prev_btn);
 8018ed0:	f7f2 ff7a 	bl	800bdc8 <lv_obj_get_child>
    if(btn == NULL) return NULL;
 8018ed4:	4604      	mov	r4, r0
 8018ed6:	2800      	cmp	r0, #0
 8018ed8:	d042      	beq.n	8018f60 <lv_list_set_style+0x100>
    while(btn->signal_func != lv_list_btn_signal) {
 8018eda:	69a3      	ldr	r3, [r4, #24]
        btn = lv_obj_get_child(scrl, btn);
 8018edc:	4621      	mov	r1, r4
 8018ede:	4630      	mov	r0, r6
    while(btn->signal_func != lv_list_btn_signal) {
 8018ee0:	42ab      	cmp	r3, r5
 8018ee2:	d0eb      	beq.n	8018ebc <lv_list_set_style+0x5c>
        btn = lv_obj_get_child(scrl, btn);
 8018ee4:	f7f2 ff70 	bl	800bdc8 <lv_obj_get_child>
        if(btn == NULL) break;
 8018ee8:	4604      	mov	r4, r0
 8018eea:	2800      	cmp	r0, #0
 8018eec:	d1f5      	bne.n	8018eda <lv_list_set_style+0x7a>
 8018eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            lv_page_set_style(list, LV_PAGE_STYLE_BG, style);
 8018ef2:	462a      	mov	r2, r5
 8018ef4:	4640      	mov	r0, r8
 8018ef6:	2100      	movs	r1, #0
}
 8018ef8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
            lv_page_set_style(list, LV_PAGE_STYLE_BG, style);
 8018efc:	f001 ba1e 	b.w	801a33c <lv_page_set_style>
            lv_page_set_style(list, LV_PAGE_STYLE_SCRL, style);
 8018f00:	4640      	mov	r0, r8
 8018f02:	462a      	mov	r2, r5
 8018f04:	2101      	movs	r1, #1
 8018f06:	f001 fa19 	bl	801a33c <lv_page_set_style>
            refr_btn_width(list);
 8018f0a:	4640      	mov	r0, r8
}
 8018f0c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
            refr_btn_width(list);
 8018f10:	f7ff be38 	b.w	8018b84 <refr_btn_width>
            lv_page_set_style(list, LV_PAGE_STYLE_SB, style);
 8018f14:	462a      	mov	r2, r5
 8018f16:	4640      	mov	r0, r8
 8018f18:	2102      	movs	r1, #2
}
 8018f1a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
            lv_page_set_style(list, LV_PAGE_STYLE_SB, style);
 8018f1e:	f001 ba0d 	b.w	801a33c <lv_page_set_style>
            lv_page_set_style(list, LV_PAGE_STYLE_EDGE_FLASH, style);
 8018f22:	462a      	mov	r2, r5
 8018f24:	4640      	mov	r0, r8
 8018f26:	2103      	movs	r1, #3
}
 8018f28:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
            lv_page_set_style(list, LV_PAGE_STYLE_EDGE_FLASH, style);
 8018f2c:	f001 ba06 	b.w	801a33c <lv_page_set_style>
            ext->styles_btn[LV_BTN_STATE_REL] = style;
 8018f30:	63c5      	str	r5, [r0, #60]	; 0x3c
            btn_style_refr = LV_BTN_STYLE_REL;
 8018f32:	f04f 0900 	mov.w	r9, #0
            break;
 8018f36:	e7a7      	b.n	8018e88 <lv_list_set_style+0x28>
            ext->styles_btn[LV_BTN_STATE_PR] = style;
 8018f38:	6405      	str	r5, [r0, #64]	; 0x40
            btn_style_refr = LV_BTN_STYLE_PR;
 8018f3a:	f04f 0901 	mov.w	r9, #1
            break;
 8018f3e:	e7a3      	b.n	8018e88 <lv_list_set_style+0x28>
            ext->styles_btn[LV_BTN_STATE_TGL_REL] = style;
 8018f40:	6445      	str	r5, [r0, #68]	; 0x44
            btn_style_refr = LV_BTN_STYLE_TGL_REL;
 8018f42:	f04f 0902 	mov.w	r9, #2
            break;
 8018f46:	e79f      	b.n	8018e88 <lv_list_set_style+0x28>
            ext->styles_btn[LV_BTN_STATE_TGL_PR] = style;
 8018f48:	6485      	str	r5, [r0, #72]	; 0x48
            btn_style_refr = LV_BTN_STYLE_TGL_PR;
 8018f4a:	f04f 0903 	mov.w	r9, #3
            break;
 8018f4e:	e79b      	b.n	8018e88 <lv_list_set_style+0x28>
 8018f50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(type == LV_LIST_STYLE_BTN_PR || type == LV_LIST_STYLE_BTN_REL ||
 8018f54:	3c04      	subs	r4, #4
 8018f56:	2c04      	cmp	r4, #4
 8018f58:	d8c9      	bhi.n	8018eee <lv_list_set_style+0x8e>
    lv_btn_style_t btn_style_refr = LV_BTN_STYLE_REL;
 8018f5a:	f04f 0900 	mov.w	r9, #0
 8018f5e:	e793      	b.n	8018e88 <lv_list_set_style+0x28>
 8018f60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018f64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018f68:	08019241 	.word	0x08019241

08018f6c <lv_list_create>:
{
 8018f6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f70:	4688      	mov	r8, r1
    lv_obj_t * new_list = lv_page_create(par, copy);
 8018f72:	f001 fa17 	bl	801a3a4 <lv_page_create>
    lv_mem_assert(new_list);
 8018f76:	2800      	cmp	r0, #0
 8018f78:	f000 8090 	beq.w	801909c <lv_list_create+0x130>
    if(ancestor_page_signal == NULL) ancestor_page_signal = lv_obj_get_signal_func(new_list);
 8018f7c:	4d88      	ldr	r5, [pc, #544]	; (80191a0 <lv_list_create+0x234>)
 8018f7e:	4606      	mov	r6, r0
 8018f80:	68eb      	ldr	r3, [r5, #12]
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	f000 80b5 	beq.w	80190f2 <lv_list_create+0x186>
    lv_list_ext_t * ext = lv_obj_allocate_ext_attr(new_list, sizeof(lv_list_ext_t));
 8018f88:	2164      	movs	r1, #100	; 0x64
 8018f8a:	4630      	mov	r0, r6
 8018f8c:	f7f2 fe32 	bl	800bbf4 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 8018f90:	4603      	mov	r3, r0
 8018f92:	2800      	cmp	r0, #0
 8018f94:	f000 8081 	beq.w	801909a <lv_list_create+0x12e>
    ext->styles_btn[LV_BTN_STATE_PR] = &lv_style_btn_pr;
 8018f98:	4a82      	ldr	r2, [pc, #520]	; (80191a4 <lv_list_create+0x238>)
    ext->anim_time = LV_LIST_FOCUS_TIME;
 8018f9a:	2164      	movs	r1, #100	; 0x64
    ext->style_img = NULL;
 8018f9c:	2400      	movs	r4, #0
    ext->styles_btn[LV_BTN_STATE_REL] = &lv_style_btn_rel;
 8018f9e:	4882      	ldr	r0, [pc, #520]	; (80191a8 <lv_list_create+0x23c>)
    ext->styles_btn[LV_BTN_STATE_PR] = &lv_style_btn_pr;
 8018fa0:	641a      	str	r2, [r3, #64]	; 0x40
    ext->styles_btn[LV_BTN_STATE_TGL_REL] = &lv_style_btn_tgl_rel;
 8018fa2:	4a82      	ldr	r2, [pc, #520]	; (80191ac <lv_list_create+0x240>)
    ext->anim_time = LV_LIST_FOCUS_TIME;
 8018fa4:	8719      	strh	r1, [r3, #56]	; 0x38
    ext->styles_btn[LV_BTN_STATE_TGL_REL] = &lv_style_btn_tgl_rel;
 8018fa6:	645a      	str	r2, [r3, #68]	; 0x44
    ext->styles_btn[LV_BTN_STATE_TGL_PR] = &lv_style_btn_tgl_pr;
 8018fa8:	4981      	ldr	r1, [pc, #516]	; (80191b0 <lv_list_create+0x244>)
    ext->styles_btn[LV_BTN_STATE_INA] = &lv_style_btn_ina;
 8018faa:	4a82      	ldr	r2, [pc, #520]	; (80191b4 <lv_list_create+0x248>)
    ext->styles_btn[LV_BTN_STATE_REL] = &lv_style_btn_rel;
 8018fac:	63d8      	str	r0, [r3, #60]	; 0x3c
    lv_obj_set_signal_func(new_list, lv_list_signal);
 8018fae:	4630      	mov	r0, r6
    ext->styles_btn[LV_BTN_STATE_TGL_PR] = &lv_style_btn_tgl_pr;
 8018fb0:	6499      	str	r1, [r3, #72]	; 0x48
    ext->style_img = NULL;
 8018fb2:	651c      	str	r4, [r3, #80]	; 0x50
    ext->single_mode = false;
 8018fb4:	f883 4058 	strb.w	r4, [r3, #88]	; 0x58
    ext->size = 0;
 8018fb8:	655c      	str	r4, [r3, #84]	; 0x54
    ext->last_sel = NULL;
 8018fba:	65dc      	str	r4, [r3, #92]	; 0x5c
    ext->selected_btn = NULL;
 8018fbc:	661c      	str	r4, [r3, #96]	; 0x60
    ext->styles_btn[LV_BTN_STATE_INA] = &lv_style_btn_ina;
 8018fbe:	64da      	str	r2, [r3, #76]	; 0x4c
    lv_obj_set_signal_func(new_list, lv_list_signal);
 8018fc0:	497d      	ldr	r1, [pc, #500]	; (80191b8 <lv_list_create+0x24c>)
 8018fc2:	f7f2 fe13 	bl	800bbec <lv_obj_set_signal_func>
    if(copy == NULL) {
 8018fc6:	f1b8 0f00 	cmp.w	r8, #0
 8018fca:	f000 8096 	beq.w	80190fa <lv_list_create+0x18e>
        lv_list_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8018fce:	4640      	mov	r0, r8
 8018fd0:	f7f2 ffa2 	bl	800bf18 <lv_obj_get_ext_attr>
 8018fd4:	4681      	mov	r9, r0
    lv_obj_t * scrl = lv_page_get_scrl(list);
 8018fd6:	4640      	mov	r0, r8
 8018fd8:	f001 fbb4 	bl	801a744 <lv_page_get_scrl>
    btn = lv_obj_get_child_back(scrl, prev_btn);
 8018fdc:	4621      	mov	r1, r4
    lv_obj_t * scrl = lv_page_get_scrl(list);
 8018fde:	4682      	mov	sl, r0
    btn = lv_obj_get_child_back(scrl, prev_btn);
 8018fe0:	f7f2 fef8 	bl	800bdd4 <lv_obj_get_child_back>
    if(btn == NULL) return NULL;
 8018fe4:	4604      	mov	r4, r0
 8018fe6:	2800      	cmp	r0, #0
 8018fe8:	d059      	beq.n	801909e <lv_list_create+0x132>
 8018fea:	4f74      	ldr	r7, [pc, #464]	; (80191bc <lv_list_create+0x250>)
 8018fec:	e004      	b.n	8018ff8 <lv_list_create+0x8c>
        btn = lv_obj_get_child_back(scrl, btn);
 8018fee:	f7f2 fef1 	bl	800bdd4 <lv_obj_get_child_back>
        if(btn == NULL) break;
 8018ff2:	4604      	mov	r4, r0
 8018ff4:	2800      	cmp	r0, #0
 8018ff6:	d052      	beq.n	801909e <lv_list_create+0x132>
    while(btn->signal_func != lv_list_btn_signal) {
 8018ff8:	69a3      	ldr	r3, [r4, #24]
        btn = lv_obj_get_child_back(scrl, btn);
 8018ffa:	4621      	mov	r1, r4
 8018ffc:	4650      	mov	r0, sl
    while(btn->signal_func != lv_list_btn_signal) {
 8018ffe:	42bb      	cmp	r3, r7
 8019000:	d1f5      	bne.n	8018fee <lv_list_create+0x82>
    lv_obj_t * img = lv_obj_get_child(btn, NULL);
 8019002:	2100      	movs	r1, #0
 8019004:	4620      	mov	r0, r4
 8019006:	f7f2 fedf 	bl	800bdc8 <lv_obj_get_child>
    if(img == NULL) return NULL;
 801900a:	4686      	mov	lr, r0
 801900c:	b928      	cbnz	r0, 801901a <lv_list_create+0xae>
 801900e:	e06d      	b.n	80190ec <lv_list_create+0x180>
        img = lv_obj_get_child(btn, img);
 8019010:	f7f2 feda 	bl	800bdc8 <lv_obj_get_child>
        if(img == NULL) break;
 8019014:	4686      	mov	lr, r0
 8019016:	2800      	cmp	r0, #0
 8019018:	d068      	beq.n	80190ec <lv_list_create+0x180>
    while(img->signal_func != img_signal) {
 801901a:	f8de 2018 	ldr.w	r2, [lr, #24]
        img = lv_obj_get_child(btn, img);
 801901e:	4671      	mov	r1, lr
    while(img->signal_func != img_signal) {
 8019020:	68ab      	ldr	r3, [r5, #8]
        img = lv_obj_get_child(btn, img);
 8019022:	4620      	mov	r0, r4
    while(img->signal_func != img_signal) {
 8019024:	429a      	cmp	r2, r3
 8019026:	d1f3      	bne.n	8019010 <lv_list_create+0xa4>
            if(copy_img) img_src = lv_img_get_src(copy_img);
 8019028:	4670      	mov	r0, lr
 801902a:	f7fe fccf 	bl	80179cc <lv_img_get_src>
 801902e:	4682      	mov	sl, r0
    lv_obj_t * label = lv_obj_get_child(btn, NULL);
 8019030:	2100      	movs	r1, #0
 8019032:	4620      	mov	r0, r4
 8019034:	f7f2 fec8 	bl	800bdc8 <lv_obj_get_child>
    if(label == NULL) return NULL;
 8019038:	4686      	mov	lr, r0
 801903a:	b928      	cbnz	r0, 8019048 <lv_list_create+0xdc>
 801903c:	e053      	b.n	80190e6 <lv_list_create+0x17a>
        label = lv_obj_get_child(btn, label);
 801903e:	f7f2 fec3 	bl	800bdc8 <lv_obj_get_child>
        if(label == NULL) break;
 8019042:	4686      	mov	lr, r0
 8019044:	2800      	cmp	r0, #0
 8019046:	d04e      	beq.n	80190e6 <lv_list_create+0x17a>
    while(label->signal_func != label_signal) {
 8019048:	f8de 2018 	ldr.w	r2, [lr, #24]
        label = lv_obj_get_child(btn, label);
 801904c:	4671      	mov	r1, lr
    while(label->signal_func != label_signal) {
 801904e:	682b      	ldr	r3, [r5, #0]
        label = lv_obj_get_child(btn, label);
 8019050:	4620      	mov	r0, r4
    while(label->signal_func != label_signal) {
 8019052:	429a      	cmp	r2, r3
 8019054:	d1f3      	bne.n	801903e <lv_list_create+0xd2>
    return lv_label_get_text(label);
 8019056:	4670      	mov	r0, lr
 8019058:	f7fe ff86 	bl	8017f68 <lv_label_get_text>
 801905c:	4683      	mov	fp, r0
            lv_list_add(new_list, img_src, lv_list_get_btn_text(copy_btn), lv_btn_get_action(copy_btn, LV_BTN_ACTION_CLICK));
 801905e:	2100      	movs	r1, #0
 8019060:	4620      	mov	r0, r4
 8019062:	f7fc f915 	bl	8015290 <lv_btn_get_action>
 8019066:	4651      	mov	r1, sl
 8019068:	4603      	mov	r3, r0
 801906a:	465a      	mov	r2, fp
 801906c:	4630      	mov	r0, r6
 801906e:	f7ff fe37 	bl	8018ce0 <lv_list_add>
    lv_obj_t * scrl = lv_page_get_scrl(list);
 8019072:	4640      	mov	r0, r8
 8019074:	f001 fb66 	bl	801a744 <lv_page_get_scrl>
    btn = lv_obj_get_child_back(scrl, prev_btn);
 8019078:	4621      	mov	r1, r4
    lv_obj_t * scrl = lv_page_get_scrl(list);
 801907a:	4682      	mov	sl, r0
    btn = lv_obj_get_child_back(scrl, prev_btn);
 801907c:	f7f2 feaa 	bl	800bdd4 <lv_obj_get_child_back>
    if(btn == NULL) return NULL;
 8019080:	4604      	mov	r4, r0
 8019082:	b920      	cbnz	r0, 801908e <lv_list_create+0x122>
 8019084:	e00b      	b.n	801909e <lv_list_create+0x132>
        btn = lv_obj_get_child_back(scrl, btn);
 8019086:	f7f2 fea5 	bl	800bdd4 <lv_obj_get_child_back>
        if(btn == NULL) break;
 801908a:	4604      	mov	r4, r0
 801908c:	b138      	cbz	r0, 801909e <lv_list_create+0x132>
    while(btn->signal_func != lv_list_btn_signal) {
 801908e:	69a3      	ldr	r3, [r4, #24]
        btn = lv_obj_get_child_back(scrl, btn);
 8019090:	4621      	mov	r1, r4
 8019092:	4650      	mov	r0, sl
    while(btn->signal_func != lv_list_btn_signal) {
 8019094:	42bb      	cmp	r3, r7
 8019096:	d1f6      	bne.n	8019086 <lv_list_create+0x11a>
 8019098:	e7b3      	b.n	8019002 <lv_list_create+0x96>
 801909a:	e7fe      	b.n	801909a <lv_list_create+0x12e>
 801909c:	e7fe      	b.n	801909c <lv_list_create+0x130>
        lv_list_set_style(new_list, LV_LIST_STYLE_BTN_REL, copy_ext->styles_btn[LV_BTN_STATE_REL]);
 801909e:	f8d9 203c 	ldr.w	r2, [r9, #60]	; 0x3c
 80190a2:	4630      	mov	r0, r6
 80190a4:	2104      	movs	r1, #4
 80190a6:	f7ff fedb 	bl	8018e60 <lv_list_set_style>
        lv_list_set_style(new_list, LV_LIST_STYLE_BTN_PR, copy_ext->styles_btn[LV_BTN_STATE_PR]);
 80190aa:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
 80190ae:	4630      	mov	r0, r6
 80190b0:	2105      	movs	r1, #5
 80190b2:	f7ff fed5 	bl	8018e60 <lv_list_set_style>
        lv_list_set_style(new_list, LV_LIST_STYLE_BTN_TGL_REL, copy_ext->styles_btn[LV_BTN_STATE_TGL_REL]);
 80190b6:	f8d9 2044 	ldr.w	r2, [r9, #68]	; 0x44
 80190ba:	4630      	mov	r0, r6
 80190bc:	2106      	movs	r1, #6
 80190be:	f7ff fecf 	bl	8018e60 <lv_list_set_style>
        lv_list_set_style(new_list, LV_LIST_STYLE_BTN_TGL_PR, copy_ext->styles_btn[LV_BTN_STATE_TGL_REL]);
 80190c2:	f8d9 2044 	ldr.w	r2, [r9, #68]	; 0x44
 80190c6:	4630      	mov	r0, r6
 80190c8:	2107      	movs	r1, #7
 80190ca:	f7ff fec9 	bl	8018e60 <lv_list_set_style>
        lv_list_set_style(new_list, LV_LIST_STYLE_BTN_INA, copy_ext->styles_btn[LV_BTN_STATE_INA]);
 80190ce:	f8d9 204c 	ldr.w	r2, [r9, #76]	; 0x4c
 80190d2:	2108      	movs	r1, #8
 80190d4:	4630      	mov	r0, r6
 80190d6:	f7ff fec3 	bl	8018e60 <lv_list_set_style>
        lv_obj_refresh_style(new_list);
 80190da:	4630      	mov	r0, r6
 80190dc:	f7f2 fc48 	bl	800b970 <lv_obj_refresh_style>
}
 80190e0:	4630      	mov	r0, r6
 80190e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(label == NULL) return "";
 80190e6:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 80191c8 <lv_list_create+0x25c>
 80190ea:	e7b8      	b.n	801905e <lv_list_create+0xf2>
            const void * img_src = NULL;
 80190ec:	f04f 0a00 	mov.w	sl, #0
 80190f0:	e79e      	b.n	8019030 <lv_list_create+0xc4>
    if(ancestor_page_signal == NULL) ancestor_page_signal = lv_obj_get_signal_func(new_list);
 80190f2:	f7f2 ff0d 	bl	800bf10 <lv_obj_get_signal_func>
 80190f6:	60e8      	str	r0, [r5, #12]
 80190f8:	e746      	b.n	8018f88 <lv_list_create+0x1c>
        lv_obj_set_size(new_list, 2 * LV_DPI, 3 * LV_DPI);
 80190fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80190fe:	21c8      	movs	r1, #200	; 0xc8
 8019100:	4630      	mov	r0, r6
 8019102:	f7f1 fd6b 	bl	800abdc <lv_obj_set_size>
* @param page pointer to a page object
* @param layout a layout from 'lv_cont_layout_t'
*/
static inline void lv_page_set_scrl_layout(lv_obj_t * page, lv_layout_t layout)
{
    lv_cont_set_layout(lv_page_get_scrl(page), layout);
 8019106:	4630      	mov	r0, r6
 8019108:	f001 fb1c 	bl	801a744 <lv_page_get_scrl>
 801910c:	2103      	movs	r1, #3
 801910e:	f7fe fa01 	bl	8017514 <lv_cont_set_layout>
 * @param list pointer to a list object
 * @param sb_mode the new mode from 'lv_page_sb_mode_t' enum
 */
static inline void lv_list_set_sb_mode(lv_obj_t * list, lv_sb_mode_t mode)
{
    lv_page_set_sb_mode(list, mode);
 8019112:	2102      	movs	r1, #2
 8019114:	4630      	mov	r0, r6
 8019116:	f001 f8cb 	bl	801a2b0 <lv_page_set_sb_mode>
        lv_theme_t * th = lv_theme_get_current();
 801911a:	f004 fc05 	bl	801d928 <lv_theme_get_current>
            lv_list_set_style(new_list, LV_LIST_STYLE_BG, th->list.bg);
 801911e:	4641      	mov	r1, r8
        if(th) {
 8019120:	4604      	mov	r4, r0
 8019122:	b388      	cbz	r0, 8019188 <lv_list_create+0x21c>
            lv_list_set_style(new_list, LV_LIST_STYLE_BG, th->list.bg);
 8019124:	f8d0 2128 	ldr.w	r2, [r0, #296]	; 0x128
 8019128:	4630      	mov	r0, r6
 801912a:	f7ff fe99 	bl	8018e60 <lv_list_set_style>
            lv_list_set_style(new_list, LV_LIST_STYLE_SCRL, th->list.scrl);
 801912e:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
 8019132:	4630      	mov	r0, r6
 8019134:	2101      	movs	r1, #1
 8019136:	f7ff fe93 	bl	8018e60 <lv_list_set_style>
            lv_list_set_style(new_list, LV_LIST_STYLE_SB, th->list.sb);
 801913a:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
 801913e:	4630      	mov	r0, r6
 8019140:	2102      	movs	r1, #2
 8019142:	f7ff fe8d 	bl	8018e60 <lv_list_set_style>
            lv_list_set_style(new_list, LV_LIST_STYLE_BTN_REL, th->list.btn.rel);
 8019146:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
 801914a:	4630      	mov	r0, r6
 801914c:	2104      	movs	r1, #4
 801914e:	f7ff fe87 	bl	8018e60 <lv_list_set_style>
            lv_list_set_style(new_list, LV_LIST_STYLE_BTN_PR, th->list.btn.pr);
 8019152:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 8019156:	4630      	mov	r0, r6
 8019158:	2105      	movs	r1, #5
 801915a:	f7ff fe81 	bl	8018e60 <lv_list_set_style>
            lv_list_set_style(new_list, LV_LIST_STYLE_BTN_TGL_REL, th->list.btn.tgl_rel);
 801915e:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 8019162:	4630      	mov	r0, r6
 8019164:	2106      	movs	r1, #6
 8019166:	f7ff fe7b 	bl	8018e60 <lv_list_set_style>
            lv_list_set_style(new_list, LV_LIST_STYLE_BTN_TGL_PR, th->list.btn.tgl_pr);
 801916a:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
 801916e:	4630      	mov	r0, r6
 8019170:	2107      	movs	r1, #7
 8019172:	f7ff fe75 	bl	8018e60 <lv_list_set_style>
            lv_list_set_style(new_list, LV_LIST_STYLE_BTN_INA, th->list.btn.ina);
 8019176:	4630      	mov	r0, r6
 8019178:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
 801917c:	2108      	movs	r1, #8
 801917e:	f7ff fe6f 	bl	8018e60 <lv_list_set_style>
}
 8019182:	4630      	mov	r0, r6
 8019184:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            lv_list_set_style(new_list, LV_LIST_STYLE_BG, &lv_style_transp_fit);
 8019188:	4630      	mov	r0, r6
 801918a:	4a0d      	ldr	r2, [pc, #52]	; (80191c0 <lv_list_create+0x254>)
 801918c:	f7ff fe68 	bl	8018e60 <lv_list_set_style>
            lv_list_set_style(new_list, LV_LIST_STYLE_SCRL, &lv_style_pretty);
 8019190:	4630      	mov	r0, r6
 8019192:	4a0c      	ldr	r2, [pc, #48]	; (80191c4 <lv_list_create+0x258>)
 8019194:	2101      	movs	r1, #1
 8019196:	f7ff fe63 	bl	8018e60 <lv_list_set_style>
}
 801919a:	4630      	mov	r0, r6
 801919c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191a0:	20016630 	.word	0x20016630
 80191a4:	200191d4 	.word	0x200191d4
 80191a8:	2001918c 	.word	0x2001918c
 80191ac:	20019384 	.word	0x20019384
 80191b0:	20019414 	.word	0x20019414
 80191b4:	200192ac 	.word	0x200192ac
 80191b8:	0801944d 	.word	0x0801944d
 80191bc:	08019241 	.word	0x08019241
 80191c0:	200192f4 	.word	0x200192f4
 80191c4:	2001921c 	.word	0x2001921c
 80191c8:	080c7258 	.word	0x080c7258

080191cc <lv_list_get_btn_text>:
{
 80191cc:	b570      	push	{r4, r5, r6, lr}
    lv_obj_t * label = lv_obj_get_child(btn, NULL);
 80191ce:	2100      	movs	r1, #0
{
 80191d0:	4605      	mov	r5, r0
    lv_obj_t * label = lv_obj_get_child(btn, NULL);
 80191d2:	f7f2 fdf9 	bl	800bdc8 <lv_obj_get_child>
    if(label == NULL) return NULL;
 80191d6:	b188      	cbz	r0, 80191fc <lv_list_get_btn_text+0x30>
 80191d8:	4603      	mov	r3, r0
 80191da:	4e09      	ldr	r6, [pc, #36]	; (8019200 <lv_list_get_btn_text+0x34>)
 80191dc:	e003      	b.n	80191e6 <lv_list_get_btn_text+0x1a>
        label = lv_obj_get_child(btn, label);
 80191de:	f7f2 fdf3 	bl	800bdc8 <lv_obj_get_child>
        if(label == NULL) break;
 80191e2:	4603      	mov	r3, r0
 80191e4:	b150      	cbz	r0, 80191fc <lv_list_get_btn_text+0x30>
    while(label->signal_func != label_signal) {
 80191e6:	699c      	ldr	r4, [r3, #24]
        label = lv_obj_get_child(btn, label);
 80191e8:	4619      	mov	r1, r3
    while(label->signal_func != label_signal) {
 80191ea:	6832      	ldr	r2, [r6, #0]
        label = lv_obj_get_child(btn, label);
 80191ec:	4628      	mov	r0, r5
    while(label->signal_func != label_signal) {
 80191ee:	4294      	cmp	r4, r2
 80191f0:	d1f5      	bne.n	80191de <lv_list_get_btn_text+0x12>
    return lv_label_get_text(label);
 80191f2:	4618      	mov	r0, r3
}
 80191f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return lv_label_get_text(label);
 80191f8:	f7fe beb6 	b.w	8017f68 <lv_label_get_text>
}
 80191fc:	4801      	ldr	r0, [pc, #4]	; (8019204 <lv_list_get_btn_text+0x38>)
 80191fe:	bd70      	pop	{r4, r5, r6, pc}
 8019200:	20016630 	.word	0x20016630
 8019204:	080c7258 	.word	0x080c7258

08019208 <lv_list_get_prev_btn>:
{
 8019208:	b538      	push	{r3, r4, r5, lr}
 801920a:	460d      	mov	r5, r1
    lv_obj_t * scrl = lv_page_get_scrl(list);
 801920c:	f001 fa9a 	bl	801a744 <lv_page_get_scrl>
 8019210:	4604      	mov	r4, r0
    btn = lv_obj_get_child(scrl, prev_btn);
 8019212:	4629      	mov	r1, r5
 8019214:	f7f2 fdd8 	bl	800bdc8 <lv_obj_get_child>
    if(btn == NULL) return NULL;
 8019218:	b168      	cbz	r0, 8019236 <lv_list_get_prev_btn+0x2e>
 801921a:	4603      	mov	r3, r0
 801921c:	4d07      	ldr	r5, [pc, #28]	; (801923c <lv_list_get_prev_btn+0x34>)
 801921e:	e003      	b.n	8019228 <lv_list_get_prev_btn+0x20>
        btn = lv_obj_get_child(scrl, btn);
 8019220:	f7f2 fdd2 	bl	800bdc8 <lv_obj_get_child>
        if(btn == NULL) break;
 8019224:	4603      	mov	r3, r0
 8019226:	b130      	cbz	r0, 8019236 <lv_list_get_prev_btn+0x2e>
    while(btn->signal_func != lv_list_btn_signal) {
 8019228:	699a      	ldr	r2, [r3, #24]
        btn = lv_obj_get_child(scrl, btn);
 801922a:	4619      	mov	r1, r3
 801922c:	4620      	mov	r0, r4
    while(btn->signal_func != lv_list_btn_signal) {
 801922e:	42aa      	cmp	r2, r5
 8019230:	d1f6      	bne.n	8019220 <lv_list_get_prev_btn+0x18>
}
 8019232:	4618      	mov	r0, r3
 8019234:	bd38      	pop	{r3, r4, r5, pc}
    if(btn == NULL) return NULL;
 8019236:	2300      	movs	r3, #0
}
 8019238:	4618      	mov	r0, r3
 801923a:	bd38      	pop	{r3, r4, r5, pc}
 801923c:	08019241 	.word	0x08019241

08019240 <lv_list_btn_signal>:
{
 8019240:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    res = ancestor_btn_signal(btn, sign, param);
 8019244:	4c71      	ldr	r4, [pc, #452]	; (801940c <lv_list_btn_signal+0x1cc>)
{
 8019246:	4607      	mov	r7, r0
 8019248:	460e      	mov	r6, r1
    res = ancestor_btn_signal(btn, sign, param);
 801924a:	6863      	ldr	r3, [r4, #4]
 801924c:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 801924e:	2801      	cmp	r0, #1
    res = ancestor_btn_signal(btn, sign, param);
 8019250:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 8019252:	d002      	beq.n	801925a <lv_list_btn_signal+0x1a>
}
 8019254:	4628      	mov	r0, r5
 8019256:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(sign == LV_SIGNAL_RELEASED) {
 801925a:	2e0b      	cmp	r6, #11
 801925c:	d02c      	beq.n	80192b8 <lv_list_btn_signal+0x78>
    else if(sign == LV_SIGNAL_PRESS_LOST) {
 801925e:	2e0a      	cmp	r6, #10
 8019260:	f000 80b3 	beq.w	80193ca <lv_list_btn_signal+0x18a>
    else if(sign == LV_SIGNAL_CLEANUP) {
 8019264:	2e00      	cmp	r6, #0
 8019266:	d1f5      	bne.n	8019254 <lv_list_btn_signal+0x14>
        lv_obj_t * list = lv_obj_get_parent(lv_obj_get_parent(btn));
 8019268:	4638      	mov	r0, r7
 801926a:	f7f2 fdab 	bl	800bdc4 <lv_obj_get_parent>
 801926e:	f7f2 fda9 	bl	800bdc4 <lv_obj_get_parent>
 8019272:	4680      	mov	r8, r0
    lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 8019274:	f7f2 fe50 	bl	800bf18 <lv_obj_get_ext_attr>
        if(sel == btn) lv_list_set_btn_selected(list, lv_list_get_next_btn(list, btn));
 8019278:	6e03      	ldr	r3, [r0, #96]	; 0x60
 801927a:	429f      	cmp	r7, r3
 801927c:	d1ea      	bne.n	8019254 <lv_list_btn_signal+0x14>
    lv_obj_t * scrl = lv_page_get_scrl(list);
 801927e:	4640      	mov	r0, r8
 8019280:	f001 fa60 	bl	801a744 <lv_page_get_scrl>
    btn = lv_obj_get_child_back(scrl, prev_btn);
 8019284:	4639      	mov	r1, r7
    lv_obj_t * scrl = lv_page_get_scrl(list);
 8019286:	4604      	mov	r4, r0
    btn = lv_obj_get_child_back(scrl, prev_btn);
 8019288:	f7f2 fda4 	bl	800bdd4 <lv_obj_get_child_back>
    if(btn == NULL) return NULL;
 801928c:	4603      	mov	r3, r0
 801928e:	2800      	cmp	r0, #0
 8019290:	f000 80ae 	beq.w	80193f0 <lv_list_btn_signal+0x1b0>
 8019294:	4e5e      	ldr	r6, [pc, #376]	; (8019410 <lv_list_btn_signal+0x1d0>)
 8019296:	e005      	b.n	80192a4 <lv_list_btn_signal+0x64>
        btn = lv_obj_get_child_back(scrl, btn);
 8019298:	f7f2 fd9c 	bl	800bdd4 <lv_obj_get_child_back>
        if(btn == NULL) break;
 801929c:	4603      	mov	r3, r0
 801929e:	2800      	cmp	r0, #0
 80192a0:	f000 80a6 	beq.w	80193f0 <lv_list_btn_signal+0x1b0>
    while(btn->signal_func != lv_list_btn_signal) {
 80192a4:	699a      	ldr	r2, [r3, #24]
        btn = lv_obj_get_child_back(scrl, btn);
 80192a6:	4619      	mov	r1, r3
 80192a8:	4620      	mov	r0, r4
    while(btn->signal_func != lv_list_btn_signal) {
 80192aa:	42b2      	cmp	r2, r6
 80192ac:	d1f4      	bne.n	8019298 <lv_list_btn_signal+0x58>
        if(sel == btn) lv_list_set_btn_selected(list, lv_list_get_next_btn(list, btn));
 80192ae:	4619      	mov	r1, r3
 80192b0:	4640      	mov	r0, r8
 80192b2:	f7ff fce1 	bl	8018c78 <lv_list_set_btn_selected>
 80192b6:	e7cd      	b.n	8019254 <lv_list_btn_signal+0x14>
        lv_obj_t * list = lv_obj_get_parent(lv_obj_get_parent(btn));
 80192b8:	4638      	mov	r0, r7
 80192ba:	f7f2 fd83 	bl	800bdc4 <lv_obj_get_parent>
 80192be:	f7f2 fd81 	bl	800bdc4 <lv_obj_get_parent>
 80192c2:	4680      	mov	r8, r0
        lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 80192c4:	f7f2 fe28 	bl	800bf18 <lv_obj_get_ext_attr>
 80192c8:	4606      	mov	r6, r0
        lv_group_t * g = lv_obj_get_group(list);
 80192ca:	4640      	mov	r0, r8
        ext->page.scroll_prop_ip = 0;
 80192cc:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 80192d0:	f36f 0382 	bfc	r3, #2, #1
 80192d4:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
        lv_group_t * g = lv_obj_get_group(list);
 80192d8:	f7f2 fe20 	bl	800bf1c <lv_obj_get_group>
        if(lv_group_get_focused(g) == list && lv_indev_is_dragging(lv_indev_get_act()) == false) {
 80192dc:	f7ef f8cc 	bl	8008478 <lv_group_get_focused>
 80192e0:	4580      	cmp	r8, r0
 80192e2:	d044      	beq.n	801936e <lv_list_btn_signal+0x12e>
        last_clicked_btn = btn;
 80192e4:	6127      	str	r7, [r4, #16]
        if(lv_indev_is_dragging(lv_indev_get_act()) == false && ext->single_mode)
 80192e6:	f7ef ff51 	bl	800918c <lv_indev_get_act>
 80192ea:	f7ef ff91 	bl	8009210 <lv_indev_is_dragging>
 80192ee:	4604      	mov	r4, r0
 80192f0:	2800      	cmp	r0, #0
 80192f2:	d1af      	bne.n	8019254 <lv_list_btn_signal+0x14>
 80192f4:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
 80192f8:	2b00      	cmp	r3, #0
 80192fa:	d0ab      	beq.n	8019254 <lv_list_btn_signal+0x14>
 * Make a single button selected in the list, deselect others, should be called in list btns call back.
 * @param btn pointer to the currently pressed list btn object
 */
static void lv_list_btn_single_selected(lv_obj_t *btn)
{
    lv_obj_t *list = lv_obj_get_parent(lv_obj_get_parent(btn));
 80192fc:	4638      	mov	r0, r7
 80192fe:	f7f2 fd61 	bl	800bdc4 <lv_obj_get_parent>
 8019302:	f7f2 fd5f 	bl	800bdc4 <lv_obj_get_parent>
 8019306:	4681      	mov	r9, r0
    lv_obj_t * scrl = lv_page_get_scrl(list);
 8019308:	f001 fa1c 	bl	801a744 <lv_page_get_scrl>
    btn = lv_obj_get_child_back(scrl, prev_btn);
 801930c:	4621      	mov	r1, r4
    lv_obj_t * scrl = lv_page_get_scrl(list);
 801930e:	4680      	mov	r8, r0
    btn = lv_obj_get_child_back(scrl, prev_btn);
 8019310:	f7f2 fd60 	bl	800bdd4 <lv_obj_get_child_back>
    if(btn == NULL) return NULL;
 8019314:	4604      	mov	r4, r0
 8019316:	2800      	cmp	r0, #0
 8019318:	d06c      	beq.n	80193f4 <lv_list_btn_signal+0x1b4>
 801931a:	4e3d      	ldr	r6, [pc, #244]	; (8019410 <lv_list_btn_signal+0x1d0>)
 801931c:	e004      	b.n	8019328 <lv_list_btn_signal+0xe8>
        btn = lv_obj_get_child_back(scrl, btn);
 801931e:	f7f2 fd59 	bl	800bdd4 <lv_obj_get_child_back>
        if(btn == NULL) break;
 8019322:	4604      	mov	r4, r0
 8019324:	2800      	cmp	r0, #0
 8019326:	d065      	beq.n	80193f4 <lv_list_btn_signal+0x1b4>
    while(btn->signal_func != lv_list_btn_signal) {
 8019328:	69a3      	ldr	r3, [r4, #24]
        btn = lv_obj_get_child_back(scrl, btn);
 801932a:	4621      	mov	r1, r4
 801932c:	4640      	mov	r0, r8
    while(btn->signal_func != lv_list_btn_signal) {
 801932e:	42b3      	cmp	r3, r6
 8019330:	d1f5      	bne.n	801931e <lv_list_btn_signal+0xde>
 8019332:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8019410 <lv_list_btn_signal+0x1d0>

    lv_obj_t * e = lv_list_get_next_btn(list, NULL);
    do
    {
        if(e == btn)
 8019336:	42a7      	cmp	r7, r4
 8019338:	d055      	beq.n	80193e6 <lv_list_btn_signal+0x1a6>
        {
            lv_btn_set_state(e, LV_BTN_STATE_TGL_REL);
        }
        else
        {
            lv_btn_set_state(e, LV_BTN_STATE_REL);
 801933a:	2100      	movs	r1, #0
 801933c:	4620      	mov	r0, r4
 801933e:	f7fb ff5f 	bl	8015200 <lv_btn_set_state>
    lv_obj_t * scrl = lv_page_get_scrl(list);
 8019342:	4648      	mov	r0, r9
 8019344:	f001 f9fe 	bl	801a744 <lv_page_get_scrl>
    btn = lv_obj_get_child_back(scrl, prev_btn);
 8019348:	4621      	mov	r1, r4
    lv_obj_t * scrl = lv_page_get_scrl(list);
 801934a:	4606      	mov	r6, r0
    btn = lv_obj_get_child_back(scrl, prev_btn);
 801934c:	f7f2 fd42 	bl	800bdd4 <lv_obj_get_child_back>
    if(btn == NULL) return NULL;
 8019350:	4604      	mov	r4, r0
 8019352:	2800      	cmp	r0, #0
 8019354:	f43f af7e 	beq.w	8019254 <lv_list_btn_signal+0x14>
    while(btn->signal_func != lv_list_btn_signal) {
 8019358:	69a3      	ldr	r3, [r4, #24]
        btn = lv_obj_get_child_back(scrl, btn);
 801935a:	4621      	mov	r1, r4
 801935c:	4630      	mov	r0, r6
    while(btn->signal_func != lv_list_btn_signal) {
 801935e:	4543      	cmp	r3, r8
 8019360:	d0e9      	beq.n	8019336 <lv_list_btn_signal+0xf6>
        btn = lv_obj_get_child_back(scrl, btn);
 8019362:	f7f2 fd37 	bl	800bdd4 <lv_obj_get_child_back>
        if(btn == NULL) break;
 8019366:	4604      	mov	r4, r0
 8019368:	2800      	cmp	r0, #0
 801936a:	d1f5      	bne.n	8019358 <lv_list_btn_signal+0x118>
 801936c:	e772      	b.n	8019254 <lv_list_btn_signal+0x14>
        if(lv_group_get_focused(g) == list && lv_indev_is_dragging(lv_indev_get_act()) == false) {
 801936e:	f7ef ff0d 	bl	800918c <lv_indev_get_act>
 8019372:	f7ef ff4d 	bl	8009210 <lv_indev_is_dragging>
 8019376:	2800      	cmp	r0, #0
 8019378:	d1b4      	bne.n	80192e4 <lv_list_btn_signal+0xa4>
            lv_obj_t * btn_i = lv_list_get_prev_btn(list, NULL);
 801937a:	4601      	mov	r1, r0
 801937c:	4640      	mov	r0, r8
 801937e:	f7ff ff43 	bl	8019208 <lv_list_get_prev_btn>
            while(btn_i) {
 8019382:	4683      	mov	fp, r0
 8019384:	b1e0      	cbz	r0, 80193c0 <lv_list_btn_signal+0x180>
 8019386:	f8df a088 	ldr.w	sl, [pc, #136]	; 8019410 <lv_list_btn_signal+0x1d0>
                lv_btn_state_t s = lv_btn_get_state(btn_i);
 801938a:	4658      	mov	r0, fp
 801938c:	f7fb ff7a 	bl	8015284 <lv_btn_get_state>
                if(s == LV_BTN_STATE_PR) lv_btn_set_state(btn_i, LV_BTN_STATE_REL);
 8019390:	2801      	cmp	r0, #1
 8019392:	d031      	beq.n	80193f8 <lv_list_btn_signal+0x1b8>
                else if(s == LV_BTN_STATE_TGL_PR) lv_btn_set_state(btn_i, LV_BTN_STATE_TGL_REL);
 8019394:	2803      	cmp	r0, #3
 8019396:	d034      	beq.n	8019402 <lv_list_btn_signal+0x1c2>
    lv_obj_t * scrl = lv_page_get_scrl(list);
 8019398:	4640      	mov	r0, r8
 801939a:	f001 f9d3 	bl	801a744 <lv_page_get_scrl>
    btn = lv_obj_get_child(scrl, prev_btn);
 801939e:	4659      	mov	r1, fp
    lv_obj_t * scrl = lv_page_get_scrl(list);
 80193a0:	4681      	mov	r9, r0
    btn = lv_obj_get_child(scrl, prev_btn);
 80193a2:	f7f2 fd11 	bl	800bdc8 <lv_obj_get_child>
    if(btn == NULL) return NULL;
 80193a6:	4683      	mov	fp, r0
 80193a8:	b150      	cbz	r0, 80193c0 <lv_list_btn_signal+0x180>
    while(btn->signal_func != lv_list_btn_signal) {
 80193aa:	f8db 3018 	ldr.w	r3, [fp, #24]
        btn = lv_obj_get_child(scrl, btn);
 80193ae:	4659      	mov	r1, fp
 80193b0:	4648      	mov	r0, r9
    while(btn->signal_func != lv_list_btn_signal) {
 80193b2:	4553      	cmp	r3, sl
 80193b4:	d0e9      	beq.n	801938a <lv_list_btn_signal+0x14a>
        btn = lv_obj_get_child(scrl, btn);
 80193b6:	f7f2 fd07 	bl	800bdc8 <lv_obj_get_child>
        if(btn == NULL) break;
 80193ba:	4683      	mov	fp, r0
 80193bc:	2800      	cmp	r0, #0
 80193be:	d1f4      	bne.n	80193aa <lv_list_btn_signal+0x16a>
            lv_list_set_btn_selected(list, btn);
 80193c0:	4640      	mov	r0, r8
 80193c2:	4639      	mov	r1, r7
 80193c4:	f7ff fc58 	bl	8018c78 <lv_list_set_btn_selected>
 80193c8:	e78c      	b.n	80192e4 <lv_list_btn_signal+0xa4>
        lv_obj_t * list = lv_obj_get_parent(lv_obj_get_parent(btn));
 80193ca:	4638      	mov	r0, r7
 80193cc:	f7f2 fcfa 	bl	800bdc4 <lv_obj_get_parent>
 80193d0:	f7f2 fcf8 	bl	800bdc4 <lv_obj_get_parent>
        lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 80193d4:	f7f2 fda0 	bl	800bf18 <lv_obj_get_ext_attr>
        ext->page.scroll_prop_ip = 0;
 80193d8:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80193dc:	f36f 0382 	bfc	r3, #2, #1
 80193e0:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
 80193e4:	e736      	b.n	8019254 <lv_list_btn_signal+0x14>
            lv_btn_set_state(e, LV_BTN_STATE_TGL_REL);
 80193e6:	2102      	movs	r1, #2
 80193e8:	4638      	mov	r0, r7
 80193ea:	f7fb ff09 	bl	8015200 <lv_btn_set_state>
 80193ee:	e7a8      	b.n	8019342 <lv_list_btn_signal+0x102>
    if(btn == NULL) return NULL;
 80193f0:	2300      	movs	r3, #0
 80193f2:	e75c      	b.n	80192ae <lv_list_btn_signal+0x6e>
 80193f4:	2400      	movs	r4, #0
 80193f6:	e79c      	b.n	8019332 <lv_list_btn_signal+0xf2>
                if(s == LV_BTN_STATE_PR) lv_btn_set_state(btn_i, LV_BTN_STATE_REL);
 80193f8:	2100      	movs	r1, #0
 80193fa:	4658      	mov	r0, fp
 80193fc:	f7fb ff00 	bl	8015200 <lv_btn_set_state>
 8019400:	e7ca      	b.n	8019398 <lv_list_btn_signal+0x158>
                else if(s == LV_BTN_STATE_TGL_PR) lv_btn_set_state(btn_i, LV_BTN_STATE_TGL_REL);
 8019402:	2102      	movs	r1, #2
 8019404:	4658      	mov	r0, fp
 8019406:	f7fb fefb 	bl	8015200 <lv_btn_set_state>
 801940a:	e7c5      	b.n	8019398 <lv_list_btn_signal+0x158>
 801940c:	20016630 	.word	0x20016630
 8019410:	08019241 	.word	0x08019241

08019414 <lv_list_get_next_btn>:
{
 8019414:	b538      	push	{r3, r4, r5, lr}
 8019416:	460d      	mov	r5, r1
    lv_obj_t * scrl = lv_page_get_scrl(list);
 8019418:	f001 f994 	bl	801a744 <lv_page_get_scrl>
 801941c:	4604      	mov	r4, r0
    btn = lv_obj_get_child_back(scrl, prev_btn);
 801941e:	4629      	mov	r1, r5
 8019420:	f7f2 fcd8 	bl	800bdd4 <lv_obj_get_child_back>
    if(btn == NULL) return NULL;
 8019424:	b168      	cbz	r0, 8019442 <lv_list_get_next_btn+0x2e>
 8019426:	4603      	mov	r3, r0
 8019428:	4d07      	ldr	r5, [pc, #28]	; (8019448 <lv_list_get_next_btn+0x34>)
 801942a:	e003      	b.n	8019434 <lv_list_get_next_btn+0x20>
        btn = lv_obj_get_child_back(scrl, btn);
 801942c:	f7f2 fcd2 	bl	800bdd4 <lv_obj_get_child_back>
        if(btn == NULL) break;
 8019430:	4603      	mov	r3, r0
 8019432:	b130      	cbz	r0, 8019442 <lv_list_get_next_btn+0x2e>
    while(btn->signal_func != lv_list_btn_signal) {
 8019434:	699a      	ldr	r2, [r3, #24]
        btn = lv_obj_get_child_back(scrl, btn);
 8019436:	4619      	mov	r1, r3
 8019438:	4620      	mov	r0, r4
    while(btn->signal_func != lv_list_btn_signal) {
 801943a:	42aa      	cmp	r2, r5
 801943c:	d1f6      	bne.n	801942c <lv_list_get_next_btn+0x18>
}
 801943e:	4618      	mov	r0, r3
 8019440:	bd38      	pop	{r3, r4, r5, pc}
    if(btn == NULL) return NULL;
 8019442:	2300      	movs	r3, #0
}
 8019444:	4618      	mov	r0, r3
 8019446:	bd38      	pop	{r3, r4, r5, pc}
 8019448:	08019241 	.word	0x08019241

0801944c <lv_list_signal>:
{
 801944c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = ancestor_page_signal(list, sign, param);
 8019450:	4ea8      	ldr	r6, [pc, #672]	; (80196f4 <lv_list_signal+0x2a8>)
{
 8019452:	4680      	mov	r8, r0
 8019454:	460c      	mov	r4, r1
 8019456:	4617      	mov	r7, r2
    res = ancestor_page_signal(list, sign, param);
 8019458:	68f3      	ldr	r3, [r6, #12]
 801945a:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 801945c:	2801      	cmp	r0, #1
    res = ancestor_page_signal(list, sign, param);
 801945e:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 8019460:	d002      	beq.n	8019468 <lv_list_signal+0x1c>
}
 8019462:	4628      	mov	r0, r5
 8019464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(sign == LV_SIGNAL_CORD_CHG) {
 8019468:	2c02      	cmp	r4, #2
 801946a:	d02c      	beq.n	80194c6 <lv_list_signal+0x7a>
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 801946c:	2c03      	cmp	r4, #3
 801946e:	d034      	beq.n	80194da <lv_list_signal+0x8e>
    } else if(sign == LV_SIGNAL_FOCUS) {
 8019470:	2c10      	cmp	r4, #16
 8019472:	f000 809a 	beq.w	80195aa <lv_list_signal+0x15e>
    } else if(sign == LV_SIGNAL_DEFOCUS) {
 8019476:	2c11      	cmp	r4, #17
 8019478:	f000 80ae 	beq.w	80195d8 <lv_list_signal+0x18c>
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 801947c:	2c14      	cmp	r4, #20
 801947e:	d06e      	beq.n	801955e <lv_list_signal+0x112>
    } else if(sign == LV_SIGNAL_CONTROLL) {
 8019480:	2c12      	cmp	r4, #18
 8019482:	d02e      	beq.n	80194e2 <lv_list_signal+0x96>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8019484:	2c06      	cmp	r4, #6
 8019486:	d1ec      	bne.n	8019462 <lv_list_signal+0x16>
            if(buf->type[i] == NULL) break;
 8019488:	683b      	ldr	r3, [r7, #0]
 801948a:	b1c3      	cbz	r3, 80194be <lv_list_signal+0x72>
 801948c:	687b      	ldr	r3, [r7, #4]
 801948e:	2b00      	cmp	r3, #0
 8019490:	f000 8102 	beq.w	8019698 <lv_list_signal+0x24c>
 8019494:	68bb      	ldr	r3, [r7, #8]
 8019496:	2b00      	cmp	r3, #0
 8019498:	f000 8100 	beq.w	801969c <lv_list_signal+0x250>
 801949c:	68fb      	ldr	r3, [r7, #12]
 801949e:	2b00      	cmp	r3, #0
 80194a0:	f000 810a 	beq.w	80196b8 <lv_list_signal+0x26c>
 80194a4:	693b      	ldr	r3, [r7, #16]
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	f000 8108 	beq.w	80196bc <lv_list_signal+0x270>
 80194ac:	697b      	ldr	r3, [r7, #20]
 80194ae:	2b00      	cmp	r3, #0
 80194b0:	f000 810b 	beq.w	80196ca <lv_list_signal+0x27e>
 80194b4:	69bb      	ldr	r3, [r7, #24]
 80194b6:	2b00      	cmp	r3, #0
 80194b8:	bf14      	ite	ne
 80194ba:	2307      	movne	r3, #7
 80194bc:	2306      	moveq	r3, #6
        buf->type[i] = "lv_list";
 80194be:	4a8e      	ldr	r2, [pc, #568]	; (80196f8 <lv_list_signal+0x2ac>)
 80194c0:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 80194c4:	e7cd      	b.n	8019462 <lv_list_signal+0x16>
        lv_coord_t w = lv_obj_get_width(list);
 80194c6:	4640      	mov	r0, r8
 80194c8:	f7f2 fc9c 	bl	800be04 <lv_obj_get_width>
    return area_p->x2 - area_p->x1 + 1;
 80194cc:	88bb      	ldrh	r3, [r7, #4]
 80194ce:	883a      	ldrh	r2, [r7, #0]
 80194d0:	3301      	adds	r3, #1
 80194d2:	1a9b      	subs	r3, r3, r2
        if(w != lv_area_get_width(param)) {   /*Width changed*/
 80194d4:	b21b      	sxth	r3, r3
 80194d6:	4298      	cmp	r0, r3
 80194d8:	d0c3      	beq.n	8019462 <lv_list_signal+0x16>
            refr_btn_width(list);
 80194da:	4640      	mov	r0, r8
 80194dc:	f7ff fb52 	bl	8018b84 <refr_btn_width>
 80194e0:	e7bf      	b.n	8019462 <lv_list_signal+0x16>
        char c = *((char *)param);
 80194e2:	783b      	ldrb	r3, [r7, #0]
        if(c == LV_GROUP_KEY_RIGHT || c == LV_GROUP_KEY_DOWN) {
 80194e4:	f1a3 0212 	sub.w	r2, r3, #18
 80194e8:	2a01      	cmp	r2, #1
 80194ea:	d93a      	bls.n	8019562 <lv_list_signal+0x116>
        } else if(c == LV_GROUP_KEY_LEFT || c == LV_GROUP_KEY_UP) {
 80194ec:	2b14      	cmp	r3, #20
 80194ee:	f000 8088 	beq.w	8019602 <lv_list_signal+0x1b6>
 80194f2:	2b11      	cmp	r3, #17
 80194f4:	f000 8085 	beq.w	8019602 <lv_list_signal+0x1b6>
        } else if(c == LV_GROUP_KEY_ENTER) {
 80194f8:	2b0a      	cmp	r3, #10
 80194fa:	d1b2      	bne.n	8019462 <lv_list_signal+0x16>
    lv_obj_t * scrl = lv_page_get_scrl(list);
 80194fc:	4640      	mov	r0, r8
 80194fe:	f001 f921 	bl	801a744 <lv_page_get_scrl>
    btn = lv_obj_get_child(scrl, prev_btn);
 8019502:	2100      	movs	r1, #0
    lv_obj_t * scrl = lv_page_get_scrl(list);
 8019504:	4607      	mov	r7, r0
    btn = lv_obj_get_child(scrl, prev_btn);
 8019506:	f7f2 fc5f 	bl	800bdc8 <lv_obj_get_child>
    if(btn == NULL) return NULL;
 801950a:	4604      	mov	r4, r0
 801950c:	2800      	cmp	r0, #0
 801950e:	d0a8      	beq.n	8019462 <lv_list_signal+0x16>
 8019510:	4e7a      	ldr	r6, [pc, #488]	; (80196fc <lv_list_signal+0x2b0>)
 8019512:	e004      	b.n	801951e <lv_list_signal+0xd2>
        btn = lv_obj_get_child(scrl, btn);
 8019514:	f7f2 fc58 	bl	800bdc8 <lv_obj_get_child>
        if(btn == NULL) break;
 8019518:	4604      	mov	r4, r0
 801951a:	2800      	cmp	r0, #0
 801951c:	d0a1      	beq.n	8019462 <lv_list_signal+0x16>
    while(btn->signal_func != lv_list_btn_signal) {
 801951e:	69a3      	ldr	r3, [r4, #24]
        btn = lv_obj_get_child(scrl, btn);
 8019520:	4621      	mov	r1, r4
 8019522:	4638      	mov	r0, r7
    while(btn->signal_func != lv_list_btn_signal) {
 8019524:	42b3      	cmp	r3, r6
 8019526:	d1f5      	bne.n	8019514 <lv_list_signal+0xc8>
                if(lv_btn_get_state(btn) == LV_BTN_STATE_PR) break;
 8019528:	4620      	mov	r0, r4
 801952a:	f7fb feab 	bl	8015284 <lv_btn_get_state>
 801952e:	2801      	cmp	r0, #1
                lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 8019530:	4640      	mov	r0, r8
                if(lv_btn_get_state(btn) == LV_BTN_STATE_PR) break;
 8019532:	f000 809e 	beq.w	8019672 <lv_list_signal+0x226>
    lv_obj_t * scrl = lv_page_get_scrl(list);
 8019536:	f001 f905 	bl	801a744 <lv_page_get_scrl>
    btn = lv_obj_get_child(scrl, prev_btn);
 801953a:	4621      	mov	r1, r4
    lv_obj_t * scrl = lv_page_get_scrl(list);
 801953c:	4607      	mov	r7, r0
    btn = lv_obj_get_child(scrl, prev_btn);
 801953e:	f7f2 fc43 	bl	800bdc8 <lv_obj_get_child>
    if(btn == NULL) return NULL;
 8019542:	4604      	mov	r4, r0
 8019544:	2800      	cmp	r0, #0
 8019546:	d08c      	beq.n	8019462 <lv_list_signal+0x16>
    while(btn->signal_func != lv_list_btn_signal) {
 8019548:	69a3      	ldr	r3, [r4, #24]
        btn = lv_obj_get_child(scrl, btn);
 801954a:	4621      	mov	r1, r4
 801954c:	4638      	mov	r0, r7
    while(btn->signal_func != lv_list_btn_signal) {
 801954e:	42b3      	cmp	r3, r6
 8019550:	d0ea      	beq.n	8019528 <lv_list_signal+0xdc>
        btn = lv_obj_get_child(scrl, btn);
 8019552:	f7f2 fc39 	bl	800bdc8 <lv_obj_get_child>
        if(btn == NULL) break;
 8019556:	4604      	mov	r4, r0
 8019558:	2800      	cmp	r0, #0
 801955a:	d1f5      	bne.n	8019548 <lv_list_signal+0xfc>
 801955c:	e781      	b.n	8019462 <lv_list_signal+0x16>
        *editable = true;
 801955e:	7038      	strb	r0, [r7, #0]
 8019560:	e77f      	b.n	8019462 <lv_list_signal+0x16>
            lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 8019562:	4640      	mov	r0, r8
 8019564:	f7f2 fcd8 	bl	800bf18 <lv_obj_get_ext_attr>
            if(ext->selected_btn) {
 8019568:	6e06      	ldr	r6, [r0, #96]	; 0x60
 801956a:	2e00      	cmp	r6, #0
 801956c:	f000 80af 	beq.w	80196ce <lv_list_signal+0x282>
    lv_obj_t * scrl = lv_page_get_scrl(list);
 8019570:	4640      	mov	r0, r8
 8019572:	f001 f8e7 	bl	801a744 <lv_page_get_scrl>
    btn = lv_obj_get_child_back(scrl, prev_btn);
 8019576:	4631      	mov	r1, r6
    lv_obj_t * scrl = lv_page_get_scrl(list);
 8019578:	4604      	mov	r4, r0
    btn = lv_obj_get_child_back(scrl, prev_btn);
 801957a:	f7f2 fc2b 	bl	800bdd4 <lv_obj_get_child_back>
    if(btn == NULL) return NULL;
 801957e:	4603      	mov	r3, r0
 8019580:	2800      	cmp	r0, #0
 8019582:	f43f af6e 	beq.w	8019462 <lv_list_signal+0x16>
 8019586:	4e5d      	ldr	r6, [pc, #372]	; (80196fc <lv_list_signal+0x2b0>)
 8019588:	e005      	b.n	8019596 <lv_list_signal+0x14a>
        btn = lv_obj_get_child_back(scrl, btn);
 801958a:	f7f2 fc23 	bl	800bdd4 <lv_obj_get_child_back>
        if(btn == NULL) break;
 801958e:	4603      	mov	r3, r0
 8019590:	2800      	cmp	r0, #0
 8019592:	f43f af66 	beq.w	8019462 <lv_list_signal+0x16>
    while(btn->signal_func != lv_list_btn_signal) {
 8019596:	699a      	ldr	r2, [r3, #24]
        btn = lv_obj_get_child_back(scrl, btn);
 8019598:	4619      	mov	r1, r3
 801959a:	4620      	mov	r0, r4
    while(btn->signal_func != lv_list_btn_signal) {
 801959c:	42b2      	cmp	r2, r6
 801959e:	d1f4      	bne.n	801958a <lv_list_signal+0x13e>
                if(btn_next) lv_list_set_btn_selected(list, btn_next);
 80195a0:	4619      	mov	r1, r3
 80195a2:	4640      	mov	r0, r8
 80195a4:	f7ff fb68 	bl	8018c78 <lv_list_set_btn_selected>
 80195a8:	e75b      	b.n	8019462 <lv_list_signal+0x16>
        lv_hal_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 80195aa:	f7ef fdef 	bl	800918c <lv_indev_get_act>
 80195ae:	f7ef fdf3 	bl	8009198 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 80195b2:	2804      	cmp	r0, #4
 80195b4:	d045      	beq.n	8019642 <lv_list_signal+0x1f6>
            if(last_clicked_btn) {
 80195b6:	6931      	ldr	r1, [r6, #16]
                lv_list_set_btn_selected(list, last_clicked_btn);
 80195b8:	4640      	mov	r0, r8
            if(last_clicked_btn) {
 80195ba:	2900      	cmp	r1, #0
 80195bc:	d1f2      	bne.n	80195a4 <lv_list_signal+0x158>
                lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 80195be:	f7f2 fcab 	bl	800bf18 <lv_obj_get_ext_attr>
                if(ext->last_sel) {
 80195c2:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
                    lv_list_set_btn_selected(list, ext->last_sel);
 80195c4:	4640      	mov	r0, r8
                if(ext->last_sel) {
 80195c6:	2900      	cmp	r1, #0
 80195c8:	d1ec      	bne.n	80195a4 <lv_list_signal+0x158>
                    lv_list_set_btn_selected(list, lv_list_get_next_btn(list, NULL));
 80195ca:	f7ff ff23 	bl	8019414 <lv_list_get_next_btn>
 80195ce:	4601      	mov	r1, r0
 80195d0:	4640      	mov	r0, r8
 80195d2:	f7ff fb51 	bl	8018c78 <lv_list_set_btn_selected>
 80195d6:	e744      	b.n	8019462 <lv_list_signal+0x16>
    lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 80195d8:	4640      	mov	r0, r8
 80195da:	f7f2 fc9d 	bl	800bf18 <lv_obj_get_ext_attr>
 80195de:	4607      	mov	r7, r0
    if(ext->selected_btn) {
 80195e0:	6e00      	ldr	r0, [r0, #96]	; 0x60
 80195e2:	b128      	cbz	r0, 80195f0 <lv_list_signal+0x1a4>
        lv_btn_state_t s = lv_btn_get_state(ext->selected_btn);
 80195e4:	f7fb fe4e 	bl	8015284 <lv_btn_get_state>
        if(s == LV_BTN_STATE_PR) lv_btn_set_state(ext->selected_btn, LV_BTN_STATE_REL);
 80195e8:	2801      	cmp	r0, #1
 80195ea:	d050      	beq.n	801968e <lv_list_signal+0x242>
        else if(s == LV_BTN_STATE_TGL_PR) lv_btn_set_state(ext->selected_btn, LV_BTN_STATE_TGL_REL);
 80195ec:	2803      	cmp	r0, #3
 80195ee:	d067      	beq.n	80196c0 <lv_list_signal+0x274>
    ext->selected_btn = btn;
 80195f0:	2400      	movs	r4, #0
        lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 80195f2:	4640      	mov	r0, r8
    ext->selected_btn = btn;
 80195f4:	663c      	str	r4, [r7, #96]	; 0x60
    ext->last_sel = btn;
 80195f6:	65fc      	str	r4, [r7, #92]	; 0x5c
        last_clicked_btn = NULL;        /*button click will be set if click happens before focus*/
 80195f8:	6134      	str	r4, [r6, #16]
        lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 80195fa:	f7f2 fc8d 	bl	800bf18 <lv_obj_get_ext_attr>
        ext->selected_btn = NULL;
 80195fe:	6604      	str	r4, [r0, #96]	; 0x60
 8019600:	e72f      	b.n	8019462 <lv_list_signal+0x16>
            lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 8019602:	4640      	mov	r0, r8
 8019604:	f7f2 fc88 	bl	800bf18 <lv_obj_get_ext_attr>
            if(ext->selected_btn != NULL) {
 8019608:	6e06      	ldr	r6, [r0, #96]	; 0x60
 801960a:	2e00      	cmp	r6, #0
 801960c:	d048      	beq.n	80196a0 <lv_list_signal+0x254>
    lv_obj_t * scrl = lv_page_get_scrl(list);
 801960e:	4640      	mov	r0, r8
 8019610:	f001 f898 	bl	801a744 <lv_page_get_scrl>
    btn = lv_obj_get_child(scrl, prev_btn);
 8019614:	4631      	mov	r1, r6
    lv_obj_t * scrl = lv_page_get_scrl(list);
 8019616:	4604      	mov	r4, r0
    btn = lv_obj_get_child(scrl, prev_btn);
 8019618:	f7f2 fbd6 	bl	800bdc8 <lv_obj_get_child>
    if(btn == NULL) return NULL;
 801961c:	4603      	mov	r3, r0
 801961e:	2800      	cmp	r0, #0
 8019620:	f43f af1f 	beq.w	8019462 <lv_list_signal+0x16>
 8019624:	4e35      	ldr	r6, [pc, #212]	; (80196fc <lv_list_signal+0x2b0>)
 8019626:	e005      	b.n	8019634 <lv_list_signal+0x1e8>
        btn = lv_obj_get_child(scrl, btn);
 8019628:	f7f2 fbce 	bl	800bdc8 <lv_obj_get_child>
        if(btn == NULL) break;
 801962c:	4603      	mov	r3, r0
 801962e:	2800      	cmp	r0, #0
 8019630:	f43f af17 	beq.w	8019462 <lv_list_signal+0x16>
    while(btn->signal_func != lv_list_btn_signal) {
 8019634:	699a      	ldr	r2, [r3, #24]
        btn = lv_obj_get_child(scrl, btn);
 8019636:	4619      	mov	r1, r3
 8019638:	4620      	mov	r0, r4
    while(btn->signal_func != lv_list_btn_signal) {
 801963a:	42b2      	cmp	r2, r6
 801963c:	d1f4      	bne.n	8019628 <lv_list_signal+0x1dc>
                if(btn_next) lv_list_set_btn_selected(list, btn_next);
 801963e:	4619      	mov	r1, r3
 8019640:	e7af      	b.n	80195a2 <lv_list_signal+0x156>
            lv_group_t * g = lv_obj_get_group(list);
 8019642:	4640      	mov	r0, r8
 8019644:	f7f2 fc6a 	bl	800bf1c <lv_obj_get_group>
            if(lv_group_get_editing(g)) {
 8019648:	f7ee ff1c 	bl	8008484 <lv_group_get_editing>
 801964c:	4604      	mov	r4, r0
                lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 801964e:	4640      	mov	r0, r8
            if(lv_group_get_editing(g)) {
 8019650:	2c00      	cmp	r4, #0
 8019652:	d1b4      	bne.n	80195be <lv_list_signal+0x172>
    lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 8019654:	f7f2 fc60 	bl	800bf18 <lv_obj_get_ext_attr>
 8019658:	4606      	mov	r6, r0
    if(ext->selected_btn) {
 801965a:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801965c:	b128      	cbz	r0, 801966a <lv_list_signal+0x21e>
        lv_btn_state_t s = lv_btn_get_state(ext->selected_btn);
 801965e:	f7fb fe11 	bl	8015284 <lv_btn_get_state>
        if(s == LV_BTN_STATE_PR) lv_btn_set_state(ext->selected_btn, LV_BTN_STATE_REL);
 8019662:	2801      	cmp	r0, #1
 8019664:	d041      	beq.n	80196ea <lv_list_signal+0x29e>
        else if(s == LV_BTN_STATE_TGL_PR) lv_btn_set_state(ext->selected_btn, LV_BTN_STATE_TGL_REL);
 8019666:	2803      	cmp	r0, #3
 8019668:	d03a      	beq.n	80196e0 <lv_list_signal+0x294>
    ext->selected_btn = btn;
 801966a:	2300      	movs	r3, #0
 801966c:	6633      	str	r3, [r6, #96]	; 0x60
    ext->last_sel = btn;
 801966e:	65f3      	str	r3, [r6, #92]	; 0x5c
 8019670:	e6f7      	b.n	8019462 <lv_list_signal+0x16>
                lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 8019672:	f7f2 fc51 	bl	800bf18 <lv_obj_get_ext_attr>
                rel_action = lv_btn_get_action(btn, LV_BTN_ACTION_CLICK);
 8019676:	2100      	movs	r1, #0
                ext->last_sel = btn;
 8019678:	65c4      	str	r4, [r0, #92]	; 0x5c
                rel_action = lv_btn_get_action(btn, LV_BTN_ACTION_CLICK);
 801967a:	4620      	mov	r0, r4
 801967c:	f7fb fe08 	bl	8015290 <lv_btn_get_action>
                if(rel_action != NULL) rel_action(btn);
 8019680:	4603      	mov	r3, r0
 8019682:	2800      	cmp	r0, #0
 8019684:	f43f aeed 	beq.w	8019462 <lv_list_signal+0x16>
 8019688:	4620      	mov	r0, r4
 801968a:	4798      	blx	r3
 801968c:	e6e9      	b.n	8019462 <lv_list_signal+0x16>
        if(s == LV_BTN_STATE_PR) lv_btn_set_state(ext->selected_btn, LV_BTN_STATE_REL);
 801968e:	2100      	movs	r1, #0
 8019690:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8019692:	f7fb fdb5 	bl	8015200 <lv_btn_set_state>
 8019696:	e7ab      	b.n	80195f0 <lv_list_signal+0x1a4>
            if(buf->type[i] == NULL) break;
 8019698:	2301      	movs	r3, #1
 801969a:	e710      	b.n	80194be <lv_list_signal+0x72>
 801969c:	2302      	movs	r3, #2
 801969e:	e70e      	b.n	80194be <lv_list_signal+0x72>
                lv_obj_t * btn = lv_list_get_next_btn(list, NULL);
 80196a0:	4631      	mov	r1, r6
 80196a2:	4640      	mov	r0, r8
 80196a4:	f7ff feb6 	bl	8019414 <lv_list_get_next_btn>
                if(btn) lv_list_set_btn_selected(list, btn);
 80196a8:	2800      	cmp	r0, #0
 80196aa:	f43f aeda 	beq.w	8019462 <lv_list_signal+0x16>
 80196ae:	4601      	mov	r1, r0
 80196b0:	4640      	mov	r0, r8
 80196b2:	f7ff fae1 	bl	8018c78 <lv_list_set_btn_selected>
 80196b6:	e6d4      	b.n	8019462 <lv_list_signal+0x16>
            if(buf->type[i] == NULL) break;
 80196b8:	2303      	movs	r3, #3
 80196ba:	e700      	b.n	80194be <lv_list_signal+0x72>
 80196bc:	2304      	movs	r3, #4
 80196be:	e6fe      	b.n	80194be <lv_list_signal+0x72>
        else if(s == LV_BTN_STATE_TGL_PR) lv_btn_set_state(ext->selected_btn, LV_BTN_STATE_TGL_REL);
 80196c0:	2102      	movs	r1, #2
 80196c2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80196c4:	f7fb fd9c 	bl	8015200 <lv_btn_set_state>
 80196c8:	e792      	b.n	80195f0 <lv_list_signal+0x1a4>
            if(buf->type[i] == NULL) break;
 80196ca:	2305      	movs	r3, #5
 80196cc:	e6f7      	b.n	80194be <lv_list_signal+0x72>
                lv_obj_t * btn = lv_list_get_next_btn(list, NULL);
 80196ce:	4631      	mov	r1, r6
 80196d0:	4640      	mov	r0, r8
 80196d2:	f7ff fe9f 	bl	8019414 <lv_list_get_next_btn>
                if(btn) lv_list_set_btn_selected(list, btn);    /*If there are no buttons on the list then there is no first button*/
 80196d6:	4601      	mov	r1, r0
 80196d8:	2800      	cmp	r0, #0
 80196da:	f47f af62 	bne.w	80195a2 <lv_list_signal+0x156>
 80196de:	e6c0      	b.n	8019462 <lv_list_signal+0x16>
        else if(s == LV_BTN_STATE_TGL_PR) lv_btn_set_state(ext->selected_btn, LV_BTN_STATE_TGL_REL);
 80196e0:	2102      	movs	r1, #2
 80196e2:	6e30      	ldr	r0, [r6, #96]	; 0x60
 80196e4:	f7fb fd8c 	bl	8015200 <lv_btn_set_state>
 80196e8:	e7bf      	b.n	801966a <lv_list_signal+0x21e>
        if(s == LV_BTN_STATE_PR) lv_btn_set_state(ext->selected_btn, LV_BTN_STATE_REL);
 80196ea:	4621      	mov	r1, r4
 80196ec:	6e30      	ldr	r0, [r6, #96]	; 0x60
 80196ee:	f7fb fd87 	bl	8015200 <lv_btn_set_state>
 80196f2:	e7ba      	b.n	801966a <lv_list_signal+0x21e>
 80196f4:	20016630 	.word	0x20016630
 80196f8:	080c7498 	.word	0x080c7498
 80196fc:	08019241 	.word	0x08019241

08019700 <lv_mbox_close_end_cb>:
    return LV_RES_OK;
}

static void lv_mbox_close_end_cb(lv_obj_t * mbox)
{
    lv_obj_del(mbox);
 8019700:	f7f0 ba44 	b.w	8009b8c <lv_obj_del>

08019704 <mbox_realign>:
{
 8019704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019706:	4605      	mov	r5, r0
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 8019708:	f7f2 fc06 	bl	800bf18 <lv_obj_get_ext_attr>
 801970c:	4606      	mov	r6, r0
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801970e:	4628      	mov	r0, r5
 8019710:	f7f2 fc02 	bl	800bf18 <lv_obj_get_ext_attr>
            style = lv_obj_get_style(mbox);
 8019714:	4628      	mov	r0, r5
 8019716:	f7f2 fb81 	bl	800be1c <lv_obj_get_style>
 801971a:	4604      	mov	r4, r0
    lv_coord_t w = lv_obj_get_width(mbox) - 2 * style->body.padding.hor;
 801971c:	4628      	mov	r0, r5
 801971e:	f7f2 fb71 	bl	800be04 <lv_obj_get_width>
 8019722:	8c64      	ldrh	r4, [r4, #34]	; 0x22
    if(ext->text) {
 8019724:	6873      	ldr	r3, [r6, #4]
    lv_coord_t w = lv_obj_get_width(mbox) - 2 * style->body.padding.hor;
 8019726:	eba0 0444 	sub.w	r4, r0, r4, lsl #1
 801972a:	b224      	sxth	r4, r4
    if(ext->text) {
 801972c:	b11b      	cbz	r3, 8019736 <mbox_realign+0x32>
        lv_obj_set_width(ext->text, w);
 801972e:	4618      	mov	r0, r3
 8019730:	4621      	mov	r1, r4
 8019732:	f7f1 fc27 	bl	800af84 <lv_obj_set_width>
    if(ext->btnm) {
 8019736:	68b3      	ldr	r3, [r6, #8]
 8019738:	b1eb      	cbz	r3, 8019776 <mbox_realign+0x72>
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801973a:	4628      	mov	r0, r5
 801973c:	f7f2 fbec 	bl	800bf18 <lv_obj_get_ext_attr>
            style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BG);
 8019740:	2100      	movs	r1, #0
 8019742:	6880      	ldr	r0, [r0, #8]
 8019744:	f7fc fd1c 	bl	8016180 <lv_btnm_get_style>
 8019748:	4607      	mov	r7, r0
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801974a:	4628      	mov	r0, r5
 801974c:	f7f2 fbe4 	bl	800bf18 <lv_obj_get_ext_attr>
            style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_REL);
 8019750:	2101      	movs	r1, #1
 8019752:	6880      	ldr	r0, [r0, #8]
 8019754:	f7fc fd14 	bl	8016180 <lv_btnm_get_style>
        lv_obj_set_size(ext->btnm, w, font_h + 2 * btn_rel_style->body.padding.ver + 2 * btn_bg_style->body.padding.ver);
 8019758:	8c3b      	ldrh	r3, [r7, #32]
 801975a:	8c02      	ldrh	r2, [r0, #32]
 801975c:	4621      	mov	r1, r4
 801975e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8019760:	4413      	add	r3, r2
 8019762:	68b0      	ldr	r0, [r6, #8]
 8019764:	f894 2020 	ldrb.w	r2, [r4, #32]
 8019768:	eb02 0243 	add.w	r2, r2, r3, lsl #1
}
 801976c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        lv_obj_set_size(ext->btnm, w, font_h + 2 * btn_rel_style->body.padding.ver + 2 * btn_bg_style->body.padding.ver);
 8019770:	b212      	sxth	r2, r2
 8019772:	f7f1 ba33 	b.w	800abdc <lv_obj_set_size>
 8019776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019778 <lv_mbox_signal>:
{
 8019778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    char c_trans = 0;
 801977c:	2300      	movs	r3, #0
{
 801977e:	b082      	sub	sp, #8
    if(sign == LV_SIGNAL_CONTROLL) {
 8019780:	2912      	cmp	r1, #18
{
 8019782:	460d      	mov	r5, r1
 8019784:	4607      	mov	r7, r0
 8019786:	4616      	mov	r6, r2
    char c_trans = 0;
 8019788:	f88d 3007 	strb.w	r3, [sp, #7]
    if(sign == LV_SIGNAL_CONTROLL) {
 801978c:	d009      	beq.n	80197a2 <lv_mbox_signal+0x2a>
    res = ancestor_signal(mbox, sign, param);
 801978e:	4b50      	ldr	r3, [pc, #320]	; (80198d0 <lv_mbox_signal+0x158>)
 8019790:	681b      	ldr	r3, [r3, #0]
 8019792:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8019794:	2801      	cmp	r0, #1
    res = ancestor_signal(mbox, sign, param);
 8019796:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
 8019798:	d02c      	beq.n	80197f4 <lv_mbox_signal+0x7c>
}
 801979a:	4620      	mov	r0, r4
 801979c:	b002      	add	sp, #8
 801979e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        c_trans = *((char *)param);
 80197a2:	7813      	ldrb	r3, [r2, #0]
        if(c_trans == LV_GROUP_KEY_DOWN) c_trans = LV_GROUP_KEY_LEFT;
 80197a4:	2b12      	cmp	r3, #18
 80197a6:	d050      	beq.n	801984a <lv_mbox_signal+0xd2>
        if(c_trans == LV_GROUP_KEY_UP) c_trans = LV_GROUP_KEY_RIGHT;
 80197a8:	2b11      	cmp	r3, #17
 80197aa:	d01f      	beq.n	80197ec <lv_mbox_signal+0x74>
        c_trans = *((char *)param);
 80197ac:	f88d 3007 	strb.w	r3, [sp, #7]
    res = ancestor_signal(mbox, sign, param);
 80197b0:	4b47      	ldr	r3, [pc, #284]	; (80198d0 <lv_mbox_signal+0x158>)
 80197b2:	2112      	movs	r1, #18
 80197b4:	4638      	mov	r0, r7
 80197b6:	f10d 0207 	add.w	r2, sp, #7
 80197ba:	681b      	ldr	r3, [r3, #0]
 80197bc:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 80197be:	2801      	cmp	r0, #1
    res = ancestor_signal(mbox, sign, param);
 80197c0:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
 80197c2:	d1ea      	bne.n	801979a <lv_mbox_signal+0x22>
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 80197c4:	4638      	mov	r0, r7
 80197c6:	f10d 0607 	add.w	r6, sp, #7
 80197ca:	f7f2 fba5 	bl	800bf18 <lv_obj_get_ext_attr>
 80197ce:	4680      	mov	r8, r0
        if(ext->btnm) {
 80197d0:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80197d4:	b118      	cbz	r0, 80197de <lv_mbox_signal+0x66>
            ext->btnm->signal_func(ext->btnm, sign, param);
 80197d6:	4632      	mov	r2, r6
 80197d8:	6983      	ldr	r3, [r0, #24]
 80197da:	4629      	mov	r1, r5
 80197dc:	4798      	blx	r3
        if(sign == LV_SIGNAL_FOCUS) {
 80197de:	2d10      	cmp	r5, #16
 80197e0:	d043      	beq.n	801986a <lv_mbox_signal+0xf2>
 80197e2:	2401      	movs	r4, #1
}
 80197e4:	4620      	mov	r0, r4
 80197e6:	b002      	add	sp, #8
 80197e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(c_trans == LV_GROUP_KEY_UP) c_trans = LV_GROUP_KEY_RIGHT;
 80197ec:	2313      	movs	r3, #19
 80197ee:	f88d 3007 	strb.w	r3, [sp, #7]
 80197f2:	e7dd      	b.n	80197b0 <lv_mbox_signal+0x38>
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 80197f4:	4638      	mov	r0, r7
 80197f6:	f7f2 fb8f 	bl	800bf18 <lv_obj_get_ext_attr>
    if(sign == LV_SIGNAL_CORD_CHG) {
 80197fa:	2d02      	cmp	r5, #2
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 80197fc:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CORD_CHG) {
 80197fe:	d049      	beq.n	8019894 <lv_mbox_signal+0x11c>
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 8019800:	2d03      	cmp	r5, #3
 8019802:	d052      	beq.n	80198aa <lv_mbox_signal+0x132>
    } else if(sign == LV_SIGNAL_FOCUS || sign == LV_SIGNAL_DEFOCUS ||
 8019804:	f1a5 0310 	sub.w	r3, r5, #16
 8019808:	2b02      	cmp	r3, #2
 801980a:	d9e1      	bls.n	80197d0 <lv_mbox_signal+0x58>
 801980c:	2d14      	cmp	r5, #20
 801980e:	d0df      	beq.n	80197d0 <lv_mbox_signal+0x58>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8019810:	2d06      	cmp	r5, #6
 8019812:	d1e6      	bne.n	80197e2 <lv_mbox_signal+0x6a>
            if(buf->type[i] == NULL) break;
 8019814:	6833      	ldr	r3, [r6, #0]
 8019816:	b19b      	cbz	r3, 8019840 <lv_mbox_signal+0xc8>
 8019818:	6873      	ldr	r3, [r6, #4]
 801981a:	2b00      	cmp	r3, #0
 801981c:	d04e      	beq.n	80198bc <lv_mbox_signal+0x144>
 801981e:	68b3      	ldr	r3, [r6, #8]
 8019820:	2b00      	cmp	r3, #0
 8019822:	d04d      	beq.n	80198c0 <lv_mbox_signal+0x148>
 8019824:	68f3      	ldr	r3, [r6, #12]
 8019826:	2b00      	cmp	r3, #0
 8019828:	d04c      	beq.n	80198c4 <lv_mbox_signal+0x14c>
 801982a:	6933      	ldr	r3, [r6, #16]
 801982c:	2b00      	cmp	r3, #0
 801982e:	d04d      	beq.n	80198cc <lv_mbox_signal+0x154>
 8019830:	6973      	ldr	r3, [r6, #20]
 8019832:	2b00      	cmp	r3, #0
 8019834:	d048      	beq.n	80198c8 <lv_mbox_signal+0x150>
 8019836:	69b3      	ldr	r3, [r6, #24]
 8019838:	2b00      	cmp	r3, #0
 801983a:	bf14      	ite	ne
 801983c:	2307      	movne	r3, #7
 801983e:	2306      	moveq	r3, #6
        buf->type[i] = "lv_mbox";
 8019840:	4a24      	ldr	r2, [pc, #144]	; (80198d4 <lv_mbox_signal+0x15c>)
 8019842:	2401      	movs	r4, #1
 8019844:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
 8019848:	e7a7      	b.n	801979a <lv_mbox_signal+0x22>
        if(c_trans == LV_GROUP_KEY_DOWN) c_trans = LV_GROUP_KEY_LEFT;
 801984a:	2214      	movs	r2, #20
 801984c:	ae02      	add	r6, sp, #8
    res = ancestor_signal(mbox, sign, param);
 801984e:	4b20      	ldr	r3, [pc, #128]	; (80198d0 <lv_mbox_signal+0x158>)
        if(c_trans == LV_GROUP_KEY_DOWN) c_trans = LV_GROUP_KEY_LEFT;
 8019850:	f806 2d01 	strb.w	r2, [r6, #-1]!
    res = ancestor_signal(mbox, sign, param);
 8019854:	4632      	mov	r2, r6
 8019856:	681b      	ldr	r3, [r3, #0]
 8019858:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 801985a:	2801      	cmp	r0, #1
    res = ancestor_signal(mbox, sign, param);
 801985c:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
 801985e:	d19c      	bne.n	801979a <lv_mbox_signal+0x22>
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 8019860:	4638      	mov	r0, r7
 8019862:	f7f2 fb59 	bl	800bf18 <lv_obj_get_ext_attr>
 8019866:	4680      	mov	r8, r0
 8019868:	e7cc      	b.n	8019804 <lv_mbox_signal+0x8c>
            lv_indev_t * indev = lv_indev_get_act();
 801986a:	f7ef fc8f 	bl	800918c <lv_indev_get_act>
            lv_hal_indev_type_t indev_type = lv_indev_get_type(indev);
 801986e:	f7ef fc93 	bl	8009198 <lv_indev_get_type>
            if(indev_type == LV_INDEV_TYPE_ENCODER) {
 8019872:	2804      	cmp	r0, #4
 8019874:	d1b5      	bne.n	80197e2 <lv_mbox_signal+0x6a>
                lv_btnm_ext_t * btnm_ext = lv_obj_get_ext_attr(ext->btnm);
 8019876:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801987a:	f7f2 fb4d 	bl	800bf18 <lv_obj_get_ext_attr>
 801987e:	4605      	mov	r5, r0
                if(lv_group_get_editing(lv_obj_get_group(mbox))) btnm_ext->btn_id_pr = 0;
 8019880:	4638      	mov	r0, r7
 8019882:	f7f2 fb4b 	bl	800bf1c <lv_obj_get_group>
 8019886:	f7ee fdfd 	bl	8008484 <lv_group_get_editing>
 801988a:	b190      	cbz	r0, 80198b2 <lv_mbox_signal+0x13a>
 801988c:	2300      	movs	r3, #0
 801988e:	2401      	movs	r4, #1
 8019890:	846b      	strh	r3, [r5, #34]	; 0x22
 8019892:	e782      	b.n	801979a <lv_mbox_signal+0x22>
        if(lv_obj_get_width(mbox) != lv_area_get_width(param)) {
 8019894:	4638      	mov	r0, r7
 8019896:	f7f2 fab5 	bl	800be04 <lv_obj_get_width>
 801989a:	88b3      	ldrh	r3, [r6, #4]
 801989c:	8832      	ldrh	r2, [r6, #0]
 801989e:	3301      	adds	r3, #1
 80198a0:	1a9b      	subs	r3, r3, r2
 80198a2:	b21b      	sxth	r3, r3
 80198a4:	4298      	cmp	r0, r3
 80198a6:	f43f af78 	beq.w	801979a <lv_mbox_signal+0x22>
        mbox_realign(mbox);
 80198aa:	4638      	mov	r0, r7
 80198ac:	f7ff ff2a 	bl	8019704 <mbox_realign>
 80198b0:	e773      	b.n	801979a <lv_mbox_signal+0x22>
                else btnm_ext->btn_id_pr = LV_BTNM_PR_NONE;
 80198b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80198b6:	2401      	movs	r4, #1
 80198b8:	846b      	strh	r3, [r5, #34]	; 0x22
 80198ba:	e76e      	b.n	801979a <lv_mbox_signal+0x22>
            if(buf->type[i] == NULL) break;
 80198bc:	2301      	movs	r3, #1
 80198be:	e7bf      	b.n	8019840 <lv_mbox_signal+0xc8>
 80198c0:	2302      	movs	r3, #2
 80198c2:	e7bd      	b.n	8019840 <lv_mbox_signal+0xc8>
 80198c4:	2303      	movs	r3, #3
 80198c6:	e7bb      	b.n	8019840 <lv_mbox_signal+0xc8>
 80198c8:	2305      	movs	r3, #5
 80198ca:	e7b9      	b.n	8019840 <lv_mbox_signal+0xc8>
 80198cc:	2304      	movs	r3, #4
 80198ce:	e7b7      	b.n	8019840 <lv_mbox_signal+0xc8>
 80198d0:	20016644 	.word	0x20016644
 80198d4:	080c74a0 	.word	0x080c74a0

080198d8 <lv_mbox_close_action>:
{
 80198d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80198da:	460c      	mov	r4, r1
 80198dc:	b083      	sub	sp, #12
    lv_obj_t * mbox = lv_obj_get_parent(btn);
 80198de:	f7f2 fa71 	bl	800bdc4 <lv_obj_get_parent>
    if(txt[0] != '\0') {
 80198e2:	7823      	ldrb	r3, [r4, #0]
 80198e4:	b913      	cbnz	r3, 80198ec <lv_mbox_close_action+0x14>
    return LV_RES_OK;
 80198e6:	2001      	movs	r0, #1
}
 80198e8:	b003      	add	sp, #12
 80198ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80198ec:	4605      	mov	r5, r0
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 80198ee:	f7f2 fb13 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->anim_time != 0) {
 80198f2:	8984      	ldrh	r4, [r0, #12]
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 80198f4:	4607      	mov	r7, r0
    if(ext->anim_time != 0) {
 80198f6:	b954      	cbnz	r4, 801990e <lv_mbox_close_action+0x36>
        lv_obj_animate(mbox, LV_ANIM_NONE, ext->anim_time, delay, lv_mbox_close_end_cb);
 80198f8:	4911      	ldr	r1, [pc, #68]	; (8019940 <lv_mbox_close_action+0x68>)
 80198fa:	4628      	mov	r0, r5
 80198fc:	4623      	mov	r3, r4
 80198fe:	4622      	mov	r2, r4
 8019900:	9100      	str	r1, [sp, #0]
 8019902:	4621      	mov	r1, r4
 8019904:	f7f2 f9d8 	bl	800bcb8 <lv_obj_animate>
        return LV_RES_INV;
 8019908:	4620      	mov	r0, r4
}
 801990a:	b003      	add	sp, #12
 801990c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_obj_animate(mbox, LV_ANIM_GROW_H | LV_ANIM_OUT, ext->anim_time, delay, NULL);
 801990e:	2600      	movs	r6, #0
 8019910:	4622      	mov	r2, r4
 8019912:	4628      	mov	r0, r5
 8019914:	2185      	movs	r1, #133	; 0x85
 8019916:	4633      	mov	r3, r6
 8019918:	9600      	str	r6, [sp, #0]
 801991a:	f7f2 f9cd 	bl	800bcb8 <lv_obj_animate>
        lv_obj_animate(mbox, LV_ANIM_GROW_V | LV_ANIM_OUT, ext->anim_time, delay, lv_mbox_close_end_cb);
 801991e:	4808      	ldr	r0, [pc, #32]	; (8019940 <lv_mbox_close_action+0x68>)
 8019920:	89ba      	ldrh	r2, [r7, #12]
 8019922:	4633      	mov	r3, r6
 8019924:	9000      	str	r0, [sp, #0]
 8019926:	2186      	movs	r1, #134	; 0x86
 8019928:	4628      	mov	r0, r5
 801992a:	f7f2 f9c5 	bl	800bcb8 <lv_obj_animate>
        lv_cont_set_fit(mbox, false, false);
 801992e:	4628      	mov	r0, r5
 8019930:	4632      	mov	r2, r6
 8019932:	4631      	mov	r1, r6
 8019934:	f7fd fe08 	bl	8017548 <lv_cont_set_fit>
        return LV_RES_INV;
 8019938:	4630      	mov	r0, r6
}
 801993a:	b003      	add	sp, #12
 801993c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801993e:	bf00      	nop
 8019940:	08019701 	.word	0x08019701

08019944 <lv_mbox_add_btns>:
{
 8019944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019948:	4688      	mov	r8, r1
 801994a:	4616      	mov	r6, r2
 801994c:	4607      	mov	r7, r0
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801994e:	f7f2 fae3 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->btnm == NULL) {
 8019952:	6884      	ldr	r4, [r0, #8]
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 8019954:	4605      	mov	r5, r0
    if(ext->btnm == NULL) {
 8019956:	b1b4      	cbz	r4, 8019986 <lv_mbox_add_btns+0x42>
    lv_btnm_set_map(ext->btnm, btn_map);
 8019958:	4641      	mov	r1, r8
 801995a:	4620      	mov	r0, r4
 801995c:	f7fb fe0e 	bl	801557c <lv_btnm_set_map>
    if(action == NULL) lv_btnm_set_action(ext->btnm, lv_mbox_close_action); /*Set a default action anyway*/
 8019960:	b146      	cbz	r6, 8019974 <lv_mbox_add_btns+0x30>
    else  lv_btnm_set_action(ext->btnm, action);
 8019962:	68a8      	ldr	r0, [r5, #8]
 8019964:	4631      	mov	r1, r6
 8019966:	f7fc fbab 	bl	80160c0 <lv_btnm_set_action>
    mbox_realign(mbox);
 801996a:	4638      	mov	r0, r7
}
 801996c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    mbox_realign(mbox);
 8019970:	f7ff bec8 	b.w	8019704 <mbox_realign>
    if(action == NULL) lv_btnm_set_action(ext->btnm, lv_mbox_close_action); /*Set a default action anyway*/
 8019974:	68a8      	ldr	r0, [r5, #8]
 8019976:	4920      	ldr	r1, [pc, #128]	; (80199f8 <lv_mbox_add_btns+0xb4>)
 8019978:	f7fc fba2 	bl	80160c0 <lv_btnm_set_action>
    mbox_realign(mbox);
 801997c:	4638      	mov	r0, r7
}
 801997e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    mbox_realign(mbox);
 8019982:	f7ff bebf 	b.w	8019704 <mbox_realign>
        ext->btnm = lv_btnm_create(mbox, NULL);
 8019986:	4621      	mov	r1, r4
 8019988:	4638      	mov	r0, r7
 801998a:	f7fb ff4d 	bl	8015828 <lv_btnm_create>
 801998e:	60a8      	str	r0, [r5, #8]
        lv_theme_t * th = lv_theme_get_current();
 8019990:	f003 ffca 	bl	801d928 <lv_theme_get_current>
        if(th) {
 8019994:	4681      	mov	r9, r0
 8019996:	b340      	cbz	r0, 80199ea <lv_mbox_add_btns+0xa6>
            lv_mbox_set_style(mbox, LV_MBOX_STYLE_BTN_BG, th->mbox.btn.bg);
 8019998:	f8d0 a0f4 	ldr.w	sl, [r0, #244]	; 0xf4
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801999c:	4638      	mov	r0, r7
 801999e:	f7f2 fabb 	bl	800bf18 <lv_obj_get_ext_attr>
            lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BG, style);
 80199a2:	4621      	mov	r1, r4
 80199a4:	4652      	mov	r2, sl
 80199a6:	6880      	ldr	r0, [r0, #8]
 80199a8:	f7fc fbb2 	bl	8016110 <lv_btnm_set_style>
    mbox_realign(mbox);
 80199ac:	4638      	mov	r0, r7
 80199ae:	f7ff fea9 	bl	8019704 <mbox_realign>
            lv_mbox_set_style(mbox, LV_MBOX_STYLE_BTN_REL, th->mbox.btn.rel);
 80199b2:	f8d9 40f8 	ldr.w	r4, [r9, #248]	; 0xf8
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 80199b6:	4638      	mov	r0, r7
 80199b8:	f7f2 faae 	bl	800bf18 <lv_obj_get_ext_attr>
            lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_REL, style);
 80199bc:	4622      	mov	r2, r4
 80199be:	2101      	movs	r1, #1
 80199c0:	6880      	ldr	r0, [r0, #8]
 80199c2:	f7fc fba5 	bl	8016110 <lv_btnm_set_style>
    mbox_realign(mbox);
 80199c6:	4638      	mov	r0, r7
 80199c8:	f7ff fe9c 	bl	8019704 <mbox_realign>
            lv_mbox_set_style(mbox, LV_MBOX_STYLE_BTN_PR, th->mbox.btn.pr);
 80199cc:	f8d9 40fc 	ldr.w	r4, [r9, #252]	; 0xfc
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 80199d0:	4638      	mov	r0, r7
 80199d2:	f7f2 faa1 	bl	800bf18 <lv_obj_get_ext_attr>
            lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_PR, style);
 80199d6:	4622      	mov	r2, r4
 80199d8:	6880      	ldr	r0, [r0, #8]
 80199da:	2102      	movs	r1, #2
 80199dc:	f7fc fb98 	bl	8016110 <lv_btnm_set_style>
    mbox_realign(mbox);
 80199e0:	4638      	mov	r0, r7
 80199e2:	f7ff fe8f 	bl	8019704 <mbox_realign>
 80199e6:	68ac      	ldr	r4, [r5, #8]
 80199e8:	e7b6      	b.n	8019958 <lv_mbox_add_btns+0x14>
            lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BG, &lv_style_transp_fit);
 80199ea:	4621      	mov	r1, r4
 80199ec:	4a03      	ldr	r2, [pc, #12]	; (80199fc <lv_mbox_add_btns+0xb8>)
 80199ee:	68a8      	ldr	r0, [r5, #8]
 80199f0:	f7fc fb8e 	bl	8016110 <lv_btnm_set_style>
 80199f4:	68ac      	ldr	r4, [r5, #8]
 80199f6:	e7af      	b.n	8019958 <lv_mbox_add_btns+0x14>
 80199f8:	080198d9 	.word	0x080198d9
 80199fc:	200192f4 	.word	0x200192f4

08019a00 <lv_mbox_set_text>:
{
 8019a00:	b538      	push	{r3, r4, r5, lr}
 8019a02:	460d      	mov	r5, r1
 8019a04:	4604      	mov	r4, r0
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 8019a06:	f7f2 fa87 	bl	800bf18 <lv_obj_get_ext_attr>
    lv_label_set_text(ext->text, txt);
 8019a0a:	6840      	ldr	r0, [r0, #4]
 8019a0c:	4629      	mov	r1, r5
 8019a0e:	f7fe feed 	bl	80187ec <lv_label_set_text>
    mbox_realign(mbox);
 8019a12:	4620      	mov	r0, r4
}
 8019a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mbox_realign(mbox);
 8019a18:	f7ff be74 	b.w	8019704 <mbox_realign>

08019a1c <lv_mbox_set_style>:
{
 8019a1c:	b570      	push	{r4, r5, r6, lr}
 8019a1e:	460c      	mov	r4, r1
 8019a20:	4616      	mov	r6, r2
 8019a22:	4605      	mov	r5, r0
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 8019a24:	f7f2 fa78 	bl	800bf18 <lv_obj_get_ext_attr>
    switch(type) {
 8019a28:	2c06      	cmp	r4, #6
 8019a2a:	d80a      	bhi.n	8019a42 <lv_mbox_set_style+0x26>
 8019a2c:	e8df f004 	tbb	[pc, r4]
 8019a30:	2b21170e 	.word	0x2b21170e
 8019a34:	3f35      	.short	0x3f35
 8019a36:	04          	.byte	0x04
 8019a37:	00          	.byte	0x00
            lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_INA, style);
 8019a38:	4632      	mov	r2, r6
 8019a3a:	6880      	ldr	r0, [r0, #8]
 8019a3c:	2105      	movs	r1, #5
 8019a3e:	f7fc fb67 	bl	8016110 <lv_btnm_set_style>
    mbox_realign(mbox);
 8019a42:	4628      	mov	r0, r5
}
 8019a44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    mbox_realign(mbox);
 8019a48:	f7ff be5c 	b.w	8019704 <mbox_realign>
            lv_obj_set_style(mbox, style);
 8019a4c:	4628      	mov	r0, r5
 8019a4e:	4631      	mov	r1, r6
 8019a50:	f7f1 fb80 	bl	800b154 <lv_obj_set_style>
    mbox_realign(mbox);
 8019a54:	4628      	mov	r0, r5
}
 8019a56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    mbox_realign(mbox);
 8019a5a:	f7ff be53 	b.w	8019704 <mbox_realign>
            lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BG, style);
 8019a5e:	4632      	mov	r2, r6
 8019a60:	6880      	ldr	r0, [r0, #8]
 8019a62:	2100      	movs	r1, #0
 8019a64:	f7fc fb54 	bl	8016110 <lv_btnm_set_style>
    mbox_realign(mbox);
 8019a68:	4628      	mov	r0, r5
}
 8019a6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    mbox_realign(mbox);
 8019a6e:	f7ff be49 	b.w	8019704 <mbox_realign>
            lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_REL, style);
 8019a72:	4632      	mov	r2, r6
 8019a74:	6880      	ldr	r0, [r0, #8]
 8019a76:	2101      	movs	r1, #1
 8019a78:	f7fc fb4a 	bl	8016110 <lv_btnm_set_style>
    mbox_realign(mbox);
 8019a7c:	4628      	mov	r0, r5
}
 8019a7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    mbox_realign(mbox);
 8019a82:	f7ff be3f 	b.w	8019704 <mbox_realign>
            lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_PR, style);
 8019a86:	4632      	mov	r2, r6
 8019a88:	6880      	ldr	r0, [r0, #8]
 8019a8a:	2102      	movs	r1, #2
 8019a8c:	f7fc fb40 	bl	8016110 <lv_btnm_set_style>
    mbox_realign(mbox);
 8019a90:	4628      	mov	r0, r5
}
 8019a92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    mbox_realign(mbox);
 8019a96:	f7ff be35 	b.w	8019704 <mbox_realign>
            lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_TGL_REL, style);
 8019a9a:	4632      	mov	r2, r6
 8019a9c:	6880      	ldr	r0, [r0, #8]
 8019a9e:	2103      	movs	r1, #3
 8019aa0:	f7fc fb36 	bl	8016110 <lv_btnm_set_style>
    mbox_realign(mbox);
 8019aa4:	4628      	mov	r0, r5
}
 8019aa6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    mbox_realign(mbox);
 8019aaa:	f7ff be2b 	b.w	8019704 <mbox_realign>
            lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_TGL_PR, style);
 8019aae:	4632      	mov	r2, r6
 8019ab0:	6880      	ldr	r0, [r0, #8]
 8019ab2:	2104      	movs	r1, #4
 8019ab4:	f7fc fb2c 	bl	8016110 <lv_btnm_set_style>
    mbox_realign(mbox);
 8019ab8:	4628      	mov	r0, r5
}
 8019aba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    mbox_realign(mbox);
 8019abe:	f7ff be21 	b.w	8019704 <mbox_realign>
 8019ac2:	bf00      	nop

08019ac4 <lv_mbox_create>:
{
 8019ac4:	b570      	push	{r4, r5, r6, lr}
 8019ac6:	b082      	sub	sp, #8
 8019ac8:	460d      	mov	r5, r1
    lv_obj_t * new_mbox = lv_cont_create(par, copy);
 8019aca:	f7fd fcc9 	bl	8017460 <lv_cont_create>
    lv_mem_assert(new_mbox);
 8019ace:	b350      	cbz	r0, 8019b26 <lv_mbox_create+0x62>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_mbox);
 8019ad0:	4e33      	ldr	r6, [pc, #204]	; (8019ba0 <lv_mbox_create+0xdc>)
 8019ad2:	4604      	mov	r4, r0
 8019ad4:	6833      	ldr	r3, [r6, #0]
 8019ad6:	2b00      	cmp	r3, #0
 8019ad8:	d056      	beq.n	8019b88 <lv_mbox_create+0xc4>
    lv_mbox_ext_t * ext = lv_obj_allocate_ext_attr(new_mbox, sizeof(lv_mbox_ext_t));
 8019ada:	2110      	movs	r1, #16
 8019adc:	4620      	mov	r0, r4
 8019ade:	f7f2 f889 	bl	800bbf4 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 8019ae2:	4606      	mov	r6, r0
 8019ae4:	b1f0      	cbz	r0, 8019b24 <lv_mbox_create+0x60>
    ext->text = NULL;
 8019ae6:	2300      	movs	r3, #0
    ext->anim_time = LV_MBOX_CLOSE_ANIM_TIME;
 8019ae8:	22c8      	movs	r2, #200	; 0xc8
    lv_obj_set_signal_func(new_mbox, lv_mbox_signal);
 8019aea:	492e      	ldr	r1, [pc, #184]	; (8019ba4 <lv_mbox_create+0xe0>)
 8019aec:	4620      	mov	r0, r4
    ext->text = NULL;
 8019aee:	6073      	str	r3, [r6, #4]
    ext->btnm = NULL;
 8019af0:	60b3      	str	r3, [r6, #8]
    ext->anim_time = LV_MBOX_CLOSE_ANIM_TIME;
 8019af2:	81b2      	strh	r2, [r6, #12]
    lv_obj_set_signal_func(new_mbox, lv_mbox_signal);
 8019af4:	f7f2 f87a 	bl	800bbec <lv_obj_set_signal_func>
    if(copy == NULL) {
 8019af8:	b1b5      	cbz	r5, 8019b28 <lv_mbox_create+0x64>
        lv_mbox_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8019afa:	4628      	mov	r0, r5
 8019afc:	f7f2 fa0c 	bl	800bf18 <lv_obj_get_ext_attr>
 8019b00:	4605      	mov	r5, r0
        ext->text = lv_label_create(new_mbox, copy_ext->text);
 8019b02:	4620      	mov	r0, r4
 8019b04:	6869      	ldr	r1, [r5, #4]
 8019b06:	f7fe ff07 	bl	8018918 <lv_label_create>
        if(copy_ext->btnm) ext->btnm = lv_btnm_create(new_mbox, copy_ext->btnm);
 8019b0a:	68a9      	ldr	r1, [r5, #8]
        ext->text = lv_label_create(new_mbox, copy_ext->text);
 8019b0c:	6070      	str	r0, [r6, #4]
        if(copy_ext->btnm) ext->btnm = lv_btnm_create(new_mbox, copy_ext->btnm);
 8019b0e:	b119      	cbz	r1, 8019b18 <lv_mbox_create+0x54>
 8019b10:	4620      	mov	r0, r4
 8019b12:	f7fb fe89 	bl	8015828 <lv_btnm_create>
 8019b16:	60b0      	str	r0, [r6, #8]
        lv_obj_refresh_style(new_mbox);
 8019b18:	4620      	mov	r0, r4
 8019b1a:	f7f1 ff29 	bl	800b970 <lv_obj_refresh_style>
}
 8019b1e:	4620      	mov	r0, r4
 8019b20:	b002      	add	sp, #8
 8019b22:	bd70      	pop	{r4, r5, r6, pc}
 8019b24:	e7fe      	b.n	8019b24 <lv_mbox_create+0x60>
 8019b26:	e7fe      	b.n	8019b26 <lv_mbox_create+0x62>
        ext->text = lv_label_create(new_mbox, NULL);
 8019b28:	4629      	mov	r1, r5
 8019b2a:	4620      	mov	r0, r4
 8019b2c:	f7fe fef4 	bl	8018918 <lv_label_create>
        lv_label_set_align(ext->text, LV_LABEL_ALIGN_CENTER);
 8019b30:	2101      	movs	r1, #1
        ext->text = lv_label_create(new_mbox, NULL);
 8019b32:	6070      	str	r0, [r6, #4]
        lv_label_set_align(ext->text, LV_LABEL_ALIGN_CENTER);
 8019b34:	f7fe fa04 	bl	8017f40 <lv_label_set_align>
        lv_label_set_long_mode(ext->text, LV_LABEL_LONG_BREAK);
 8019b38:	2101      	movs	r1, #1
 8019b3a:	6870      	ldr	r0, [r6, #4]
 8019b3c:	f7fe fe8e 	bl	801885c <lv_label_set_long_mode>
        lv_label_set_text(ext->text, "Message");
 8019b40:	6870      	ldr	r0, [r6, #4]
 8019b42:	4919      	ldr	r1, [pc, #100]	; (8019ba8 <lv_mbox_create+0xe4>)
 8019b44:	f7fe fe52 	bl	80187ec <lv_label_set_text>
        lv_cont_set_layout(new_mbox, LV_LAYOUT_COL_M);
 8019b48:	2103      	movs	r1, #3
 8019b4a:	4620      	mov	r0, r4
 8019b4c:	f7fd fce2 	bl	8017514 <lv_cont_set_layout>
        lv_cont_set_fit(new_mbox, false, true);
 8019b50:	2201      	movs	r2, #1
 8019b52:	4629      	mov	r1, r5
 8019b54:	4620      	mov	r0, r4
 8019b56:	f7fd fcf7 	bl	8017548 <lv_cont_set_fit>
        lv_obj_set_width(new_mbox, LV_HOR_RES / 2);
 8019b5a:	21f0      	movs	r1, #240	; 0xf0
 8019b5c:	4620      	mov	r0, r4
 8019b5e:	f7f1 fa11 	bl	800af84 <lv_obj_set_width>
        lv_obj_align(new_mbox, NULL, LV_ALIGN_CENTER, 0, 0);
 8019b62:	462b      	mov	r3, r5
 8019b64:	462a      	mov	r2, r5
 8019b66:	4629      	mov	r1, r5
 8019b68:	4620      	mov	r0, r4
 8019b6a:	9500      	str	r5, [sp, #0]
 8019b6c:	f7f0 fd1a 	bl	800a5a4 <lv_obj_align>
        lv_theme_t * th = lv_theme_get_current();
 8019b70:	f003 feda 	bl	801d928 <lv_theme_get_current>
        if(th) {
 8019b74:	b160      	cbz	r0, 8019b90 <lv_mbox_create+0xcc>
            lv_mbox_set_style(new_mbox, LV_MBOX_STYLE_BG, th->mbox.bg);
 8019b76:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
 8019b7a:	4629      	mov	r1, r5
 8019b7c:	4620      	mov	r0, r4
 8019b7e:	f7ff ff4d 	bl	8019a1c <lv_mbox_set_style>
}
 8019b82:	4620      	mov	r0, r4
 8019b84:	b002      	add	sp, #8
 8019b86:	bd70      	pop	{r4, r5, r6, pc}
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_mbox);
 8019b88:	f7f2 f9c2 	bl	800bf10 <lv_obj_get_signal_func>
 8019b8c:	6030      	str	r0, [r6, #0]
 8019b8e:	e7a4      	b.n	8019ada <lv_mbox_create+0x16>
            lv_mbox_set_style(new_mbox, LV_MBOX_STYLE_BG, &lv_style_pretty);
 8019b90:	4620      	mov	r0, r4
 8019b92:	4629      	mov	r1, r5
 8019b94:	4a05      	ldr	r2, [pc, #20]	; (8019bac <lv_mbox_create+0xe8>)
 8019b96:	f7ff ff41 	bl	8019a1c <lv_mbox_set_style>
}
 8019b9a:	4620      	mov	r0, r4
 8019b9c:	b002      	add	sp, #8
 8019b9e:	bd70      	pop	{r4, r5, r6, pc}
 8019ba0:	20016644 	.word	0x20016644
 8019ba4:	08019779 	.word	0x08019779
 8019ba8:	080c74a8 	.word	0x080c74a8
 8019bac:	2001921c 	.word	0x2001921c

08019bb0 <lv_page_sb_refresh>:
/**
 * Refresh the position and size of the scroll bars.
 * @param page pointer to a page object
 */
static void lv_page_sb_refresh(lv_obj_t * page)
{
 8019bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019bb4:	4606      	mov	r6, r0
 8019bb6:	b08b      	sub	sp, #44	; 0x2c
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8019bb8:	f7f2 f9ae 	bl	800bf18 <lv_obj_get_ext_attr>
 8019bbc:	4604      	mov	r4, r0
    lv_style_t * style = lv_obj_get_style(page);
 8019bbe:	4630      	mov	r0, r6
 8019bc0:	f7f2 f92c 	bl	800be1c <lv_obj_get_style>
    lv_obj_t * scrl = ext->scrl;
 8019bc4:	f8d4 8004 	ldr.w	r8, [r4, #4]
    lv_style_t * style = lv_obj_get_style(page);
 8019bc8:	4682      	mov	sl, r0
    lv_coord_t size_tmp;
    lv_coord_t scrl_w = lv_obj_get_width(scrl);
 8019bca:	4640      	mov	r0, r8
 8019bcc:	f7f2 f91a 	bl	800be04 <lv_obj_get_width>
 8019bd0:	4607      	mov	r7, r0
    lv_coord_t scrl_h =  lv_obj_get_height(scrl);
 8019bd2:	4640      	mov	r0, r8
 8019bd4:	f7f2 f91c 	bl	800be10 <lv_obj_get_height>
    lv_coord_t hpad = style->body.padding.hor;
 8019bd8:	f9ba 3022 	ldrsh.w	r3, [sl, #34]	; 0x22
    lv_coord_t scrl_h =  lv_obj_get_height(scrl);
 8019bdc:	9000      	str	r0, [sp, #0]
    lv_coord_t vpad = style->body.padding.ver;
    lv_coord_t obj_w = lv_obj_get_width(page);
 8019bde:	4630      	mov	r0, r6
    lv_coord_t hpad = style->body.padding.hor;
 8019be0:	9301      	str	r3, [sp, #4]
    lv_coord_t vpad = style->body.padding.ver;
 8019be2:	f9ba 3020 	ldrsh.w	r3, [sl, #32]
 8019be6:	9302      	str	r3, [sp, #8]
    lv_coord_t obj_w = lv_obj_get_width(page);
 8019be8:	f7f2 f90c 	bl	800be04 <lv_obj_get_width>
 8019bec:	4605      	mov	r5, r0
    lv_coord_t obj_h = lv_obj_get_height(page);
 8019bee:	4630      	mov	r0, r6
 8019bf0:	f7f2 f90e 	bl	800be10 <lv_obj_get_height>
     * - horizontal and vertical scrollbars can overlap on the corners
     * - if the page has radius the scrollbar can be out of the radius  */
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.hor);
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.ver);

    if(ext->sb.mode == LV_SB_MODE_OFF) return;
 8019bf4:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8019bf8:	f012 011c 	ands.w	r1, r2, #28
 8019bfc:	f000 80d1 	beq.w	8019da2 <lv_page_sb_refresh+0x1f2>
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.hor);
 8019c00:	6923      	ldr	r3, [r4, #16]

    if(ext->sb.mode == LV_SB_MODE_ON) {
 8019c02:	2904      	cmp	r1, #4
 8019c04:	4681      	mov	r9, r0
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.hor);
 8019c06:	f9ba b022 	ldrsh.w	fp, [sl, #34]	; 0x22
 8019c0a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8019c0e:	9303      	str	r3, [sp, #12]
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.ver);
 8019c10:	f9ba 3020 	ldrsh.w	r3, [sl, #32]
 8019c14:	9304      	str	r3, [sp, #16]
    if(ext->sb.mode == LV_SB_MODE_ON) {
 8019c16:	f000 8118 	beq.w	8019e4a <lv_page_sb_refresh+0x29a>
        ext->sb.ver_draw = 1;
    }

    /*Invalidate the current (old) scrollbar areas*/
    lv_area_t sb_area_tmp;
    if(ext->sb.hor_draw != 0) {
 8019c1a:	07d0      	lsls	r0, r2, #31
 8019c1c:	f100 80ca 	bmi.w	8019db4 <lv_page_sb_refresh+0x204>
        sb_area_tmp.y1 += page->coords.y1;
        sb_area_tmp.x2 += page->coords.x1;
        sb_area_tmp.y2 += page->coords.y1;
        lv_inv_area(&sb_area_tmp);
    }
    if(ext->sb.ver_draw != 0)  {
 8019c20:	0791      	lsls	r1, r2, #30
 8019c22:	f100 80eb 	bmi.w	8019dfc <lv_page_sb_refresh+0x24c>
        sb_area_tmp.y2 += page->coords.y1;
        lv_inv_area(&sb_area_tmp);
    }


    if(ext->sb.mode == LV_SB_MODE_DRAG && lv_indev_is_dragging(lv_indev_get_act()) == false) {
 8019c26:	f002 021c 	and.w	r2, r2, #28
 8019c2a:	2a08      	cmp	r2, #8
 8019c2c:	f000 8116 	beq.w	8019e5c <lv_page_sb_refresh+0x2ac>
        return;

    }

    /*Horizontal scrollbar*/
    if(scrl_w <= obj_w - 2 * hpad) {        /*Full sized scroll bar*/
 8019c30:	9b01      	ldr	r3, [sp, #4]
 8019c32:	ea4f 0a43 	mov.w	sl, r3, lsl #1
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.hor);
 8019c36:	9b03      	ldr	r3, [sp, #12]
 8019c38:	459b      	cmp	fp, r3
 8019c3a:	bfb8      	it	lt
 8019c3c:	469b      	movlt	fp, r3
    if(scrl_w <= obj_w - 2 * hpad) {        /*Full sized scroll bar*/
 8019c3e:	eba5 030a 	sub.w	r3, r5, sl
 8019c42:	429f      	cmp	r7, r3
 8019c44:	f340 813b 	ble.w	8019ebe <lv_page_sb_refresh+0x30e>
        lv_area_set_width(&ext->sb.hor_area, obj_w - 2 * sb_hor_pad);
        lv_area_set_pos(&ext->sb.hor_area, sb_hor_pad, obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.ver);
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG)  ext->sb.hor_draw = 0;
    } else {
        size_tmp = (obj_w * (obj_w - (2 * sb_hor_pad))) / (scrl_w + 2 * hpad);
 8019c48:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8019c4c:	44ba      	add	sl, r7
        if(size_tmp < LV_PAGE_SB_MIN_SIZE) size_tmp = LV_PAGE_SB_MIN_SIZE;
        lv_area_set_width(&ext->sb.hor_area,  size_tmp);
 8019c4e:	f104 0214 	add.w	r2, r4, #20

        lv_area_set_pos(&ext->sb.hor_area, sb_hor_pad +
                        (-(lv_obj_get_x(scrl) - hpad) * (obj_w - size_tmp -  2 * sb_hor_pad)) /
                        (scrl_w + 2 * hpad - obj_w),
                        obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.ver);
 8019c52:	fa1f f189 	uxth.w	r1, r9
        size_tmp = (obj_w * (obj_w - (2 * sb_hor_pad))) / (scrl_w + 2 * hpad);
 8019c56:	1aef      	subs	r7, r5, r3
 8019c58:	9307      	str	r3, [sp, #28]
        lv_area_set_width(&ext->sb.hor_area,  size_tmp);
 8019c5a:	4610      	mov	r0, r2
                        obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.ver);
 8019c5c:	9105      	str	r1, [sp, #20]
        size_tmp = (obj_w * (obj_w - (2 * sb_hor_pad))) / (scrl_w + 2 * hpad);
 8019c5e:	fb05 f707 	mul.w	r7, r5, r7
        lv_area_set_width(&ext->sb.hor_area,  size_tmp);
 8019c62:	9206      	str	r2, [sp, #24]
        size_tmp = (obj_w * (obj_w - (2 * sb_hor_pad))) / (scrl_w + 2 * hpad);
 8019c64:	fb97 f7fa 	sdiv	r7, r7, sl
 8019c68:	b23f      	sxth	r7, r7
                        (scrl_w + 2 * hpad - obj_w),
 8019c6a:	ebaa 0a05 	sub.w	sl, sl, r5
 8019c6e:	2f0c      	cmp	r7, #12
 8019c70:	bfb8      	it	lt
 8019c72:	270c      	movlt	r7, #12
        lv_area_set_width(&ext->sb.hor_area,  size_tmp);
 8019c74:	4639      	mov	r1, r7
                        (-(lv_obj_get_x(scrl) - hpad) * (obj_w - size_tmp -  2 * sb_hor_pad)) /
 8019c76:	1bef      	subs	r7, r5, r7
        lv_area_set_width(&ext->sb.hor_area,  size_tmp);
 8019c78:	f7f8 fefc 	bl	8012a74 <lv_area_set_width>
                        (-(lv_obj_get_x(scrl) - hpad) * (obj_w - size_tmp -  2 * sb_hor_pad)) /
 8019c7c:	4640      	mov	r0, r8
 8019c7e:	f7f2 f8b5 	bl	800bdec <lv_obj_get_x>
 8019c82:	9b01      	ldr	r3, [sp, #4]
                        obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.ver);
 8019c84:	6922      	ldr	r2, [r4, #16]
                        (-(lv_obj_get_x(scrl) - hpad) * (obj_w - size_tmp -  2 * sb_hor_pad)) /
 8019c86:	1a19      	subs	r1, r3, r0
 8019c88:	9b07      	ldr	r3, [sp, #28]
        lv_area_set_pos(&ext->sb.hor_area, sb_hor_pad +
 8019c8a:	9806      	ldr	r0, [sp, #24]
                        (-(lv_obj_get_x(scrl) - hpad) * (obj_w - size_tmp -  2 * sb_hor_pad)) /
 8019c8c:	1afb      	subs	r3, r7, r3
                        obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.ver);
 8019c8e:	9f05      	ldr	r7, [sp, #20]
                        (-(lv_obj_get_x(scrl) - hpad) * (obj_w - size_tmp -  2 * sb_hor_pad)) /
 8019c90:	fb01 f303 	mul.w	r3, r1, r3
                        obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.ver);
 8019c94:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8019c96:	8c12      	ldrh	r2, [r2, #32]
 8019c98:	1a79      	subs	r1, r7, r1
                        (-(lv_obj_get_x(scrl) - hpad) * (obj_w - size_tmp -  2 * sb_hor_pad)) /
 8019c9a:	fb93 fafa 	sdiv	sl, r3, sl
                        obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.ver);
 8019c9e:	1a8a      	subs	r2, r1, r2
        lv_area_set_pos(&ext->sb.hor_area, sb_hor_pad +
 8019ca0:	44d3      	add	fp, sl
 8019ca2:	b212      	sxth	r2, r2
 8019ca4:	fa0f f18b 	sxth.w	r1, fp
 8019ca8:	f7f8 fef0 	bl	8012a8c <lv_area_set_pos>

        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG)  ext->sb.hor_draw = 1;
 8019cac:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8019cb0:	f003 0218 	and.w	r2, r3, #24
 8019cb4:	2a08      	cmp	r2, #8
 8019cb6:	d077      	beq.n	8019da8 <lv_page_sb_refresh+0x1f8>
 8019cb8:	b2ad      	uxth	r5, r5
    }

    /*Vertical scrollbar*/
    if(scrl_h <= obj_h - 2 * vpad) {        /*Full sized scroll bar*/
 8019cba:	9b02      	ldr	r3, [sp, #8]
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.ver);
 8019cbc:	9904      	ldr	r1, [sp, #16]
    if(scrl_h <= obj_h - 2 * vpad) {        /*Full sized scroll bar*/
 8019cbe:	ea4f 0a43 	mov.w	sl, r3, lsl #1
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.ver);
 8019cc2:	9b03      	ldr	r3, [sp, #12]
 8019cc4:	428b      	cmp	r3, r1
 8019cc6:	bfb8      	it	lt
 8019cc8:	460b      	movlt	r3, r1
    if(scrl_h <= obj_h - 2 * vpad) {        /*Full sized scroll bar*/
 8019cca:	9900      	ldr	r1, [sp, #0]
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.ver);
 8019ccc:	461a      	mov	r2, r3
    if(scrl_h <= obj_h - 2 * vpad) {        /*Full sized scroll bar*/
 8019cce:	eba9 030a 	sub.w	r3, r9, sl
 8019cd2:	4299      	cmp	r1, r3
 8019cd4:	f340 80d2 	ble.w	8019e7c <lv_page_sb_refresh+0x2cc>
        lv_area_set_height(&ext->sb.ver_area,  obj_h - 2 * sb_ver_pad);
        lv_area_set_pos(&ext->sb.ver_area, obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.hor, sb_ver_pad);
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG)  ext->sb.ver_draw = 0;
    } else {
        size_tmp = (obj_h * (obj_h - (2 * sb_ver_pad))) / (scrl_h + 2 * vpad);
 8019cd8:	0053      	lsls	r3, r2, #1
 8019cda:	9201      	str	r2, [sp, #4]
 8019cdc:	9a00      	ldr	r2, [sp, #0]
        if(size_tmp < LV_PAGE_SB_MIN_SIZE) size_tmp = LV_PAGE_SB_MIN_SIZE;
        lv_area_set_height(&ext->sb.ver_area,  size_tmp);
 8019cde:	f104 0b1c 	add.w	fp, r4, #28
        size_tmp = (obj_h * (obj_h - (2 * sb_ver_pad))) / (scrl_h + 2 * vpad);
 8019ce2:	eba9 0703 	sub.w	r7, r9, r3
 8019ce6:	9300      	str	r3, [sp, #0]
 8019ce8:	4452      	add	r2, sl
        lv_area_set_height(&ext->sb.ver_area,  size_tmp);
 8019cea:	4658      	mov	r0, fp
        size_tmp = (obj_h * (obj_h - (2 * sb_ver_pad))) / (scrl_h + 2 * vpad);
 8019cec:	fb09 f707 	mul.w	r7, r9, r7
 8019cf0:	4692      	mov	sl, r2
 8019cf2:	fb97 f7f2 	sdiv	r7, r7, r2
 8019cf6:	b23f      	sxth	r7, r7

        lv_area_set_pos(&ext->sb.ver_area,  obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.hor,
                        sb_ver_pad +
                        (-(lv_obj_get_y(scrl) - vpad) * (obj_h - size_tmp -  2 * sb_ver_pad)) /
                        (scrl_h + 2 * vpad - obj_h));
 8019cf8:	ebaa 0a09 	sub.w	sl, sl, r9
 8019cfc:	2f0c      	cmp	r7, #12
 8019cfe:	bfb8      	it	lt
 8019d00:	270c      	movlt	r7, #12
        lv_area_set_height(&ext->sb.ver_area,  size_tmp);
 8019d02:	4639      	mov	r1, r7
                        (-(lv_obj_get_y(scrl) - vpad) * (obj_h - size_tmp -  2 * sb_ver_pad)) /
 8019d04:	eba9 0707 	sub.w	r7, r9, r7
        lv_area_set_height(&ext->sb.ver_area,  size_tmp);
 8019d08:	f7f8 feba 	bl	8012a80 <lv_area_set_height>
        lv_area_set_pos(&ext->sb.ver_area,  obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.hor,
 8019d0c:	6921      	ldr	r1, [r4, #16]
                        (-(lv_obj_get_y(scrl) - vpad) * (obj_h - size_tmp -  2 * sb_ver_pad)) /
 8019d0e:	4640      	mov	r0, r8
        lv_area_set_pos(&ext->sb.ver_area,  obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.hor,
 8019d10:	f8b1 e024 	ldrh.w	lr, [r1, #36]	; 0x24
 8019d14:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 8019d16:	eba5 050e 	sub.w	r5, r5, lr
 8019d1a:	1a6d      	subs	r5, r5, r1
                        (-(lv_obj_get_y(scrl) - vpad) * (obj_h - size_tmp -  2 * sb_ver_pad)) /
 8019d1c:	f7f2 f86c 	bl	800bdf8 <lv_obj_get_y>
 8019d20:	9b02      	ldr	r3, [sp, #8]
                        sb_ver_pad +
 8019d22:	9a01      	ldr	r2, [sp, #4]
        lv_area_set_pos(&ext->sb.ver_area,  obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.hor,
 8019d24:	b22d      	sxth	r5, r5
                        (-(lv_obj_get_y(scrl) - vpad) * (obj_h - size_tmp -  2 * sb_ver_pad)) /
 8019d26:	eba3 0e00 	sub.w	lr, r3, r0
 8019d2a:	9b00      	ldr	r3, [sp, #0]
        lv_area_set_pos(&ext->sb.ver_area,  obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.hor,
 8019d2c:	4629      	mov	r1, r5
 8019d2e:	4658      	mov	r0, fp
                        (-(lv_obj_get_y(scrl) - vpad) * (obj_h - size_tmp -  2 * sb_ver_pad)) /
 8019d30:	eba7 0903 	sub.w	r9, r7, r3
 8019d34:	fb0e f909 	mul.w	r9, lr, r9
 8019d38:	fb99 f9fa 	sdiv	r9, r9, sl
                        sb_ver_pad +
 8019d3c:	444a      	add	r2, r9
        lv_area_set_pos(&ext->sb.ver_area,  obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.hor,
 8019d3e:	b212      	sxth	r2, r2
 8019d40:	f7f8 fea4 	bl	8012a8c <lv_area_set_pos>

        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG)  ext->sb.ver_draw = 1;
 8019d44:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8019d48:	f003 0218 	and.w	r2, r3, #24
 8019d4c:	2a08      	cmp	r2, #8
 8019d4e:	d104      	bne.n	8019d5a <lv_page_sb_refresh+0x1aa>
 8019d50:	f043 0202 	orr.w	r2, r3, #2
 8019d54:	4613      	mov	r3, r2
 8019d56:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    }

    /*Invalidate the new scrollbar areas*/
    if(ext->sb.hor_draw != 0) {
 8019d5a:	07da      	lsls	r2, r3, #31
 8019d5c:	f100 80d4 	bmi.w	8019f08 <lv_page_sb_refresh+0x358>
        sb_area_tmp.y1 += page->coords.y1;
        sb_area_tmp.x2 += page->coords.x1;
        sb_area_tmp.y2 += page->coords.y1;
        lv_inv_area(&sb_area_tmp);
    }
    if(ext->sb.ver_draw != 0)  {
 8019d60:	079b      	lsls	r3, r3, #30
 8019d62:	d51e      	bpl.n	8019da2 <lv_page_sb_refresh+0x1f2>
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    memcpy(dest, src, sizeof(lv_area_t));
 8019d64:	f8db 0000 	ldr.w	r0, [fp]
 8019d68:	ac08      	add	r4, sp, #32
 8019d6a:	f8db 1004 	ldr.w	r1, [fp, #4]
        lv_area_copy(&sb_area_tmp, &ext->sb.ver_area);
        sb_area_tmp.x1 += page->coords.x1;
 8019d6e:	8a32      	ldrh	r2, [r6, #16]
        sb_area_tmp.y1 += page->coords.y1;
 8019d70:	8a73      	ldrh	r3, [r6, #18]
 8019d72:	c403      	stmia	r4!, {r0, r1}
        sb_area_tmp.x1 += page->coords.x1;
 8019d74:	f8bd 4020 	ldrh.w	r4, [sp, #32]
        sb_area_tmp.x2 += page->coords.x1;
        sb_area_tmp.y2 += page->coords.y1;
        lv_inv_area(&sb_area_tmp);
 8019d78:	a808      	add	r0, sp, #32
        sb_area_tmp.x2 += page->coords.x1;
 8019d7a:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
        sb_area_tmp.y1 += page->coords.y1;
 8019d7e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x1 += page->coords.x1;
 8019d82:	4414      	add	r4, r2
        sb_area_tmp.y2 += page->coords.y1;
 8019d84:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
        sb_area_tmp.x2 += page->coords.x1;
 8019d88:	4432      	add	r2, r6
        sb_area_tmp.y1 += page->coords.y1;
 8019d8a:	4419      	add	r1, r3
        sb_area_tmp.x1 += page->coords.x1;
 8019d8c:	f8ad 4020 	strh.w	r4, [sp, #32]
        sb_area_tmp.y2 += page->coords.y1;
 8019d90:	442b      	add	r3, r5
        sb_area_tmp.x2 += page->coords.x1;
 8019d92:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
        sb_area_tmp.y1 += page->coords.y1;
 8019d96:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.y2 += page->coords.y1;
 8019d9a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        lv_inv_area(&sb_area_tmp);
 8019d9e:	f7f2 fb3b 	bl	800c418 <lv_inv_area>
    }
}
 8019da2:	b00b      	add	sp, #44	; 0x2c
 8019da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG)  ext->sb.hor_draw = 1;
 8019da8:	f043 0301 	orr.w	r3, r3, #1
 8019dac:	b2ad      	uxth	r5, r5
 8019dae:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8019db2:	e782      	b.n	8019cba <lv_page_sb_refresh+0x10a>
 8019db4:	4621      	mov	r1, r4
 8019db6:	ab08      	add	r3, sp, #32
        sb_area_tmp.x1 += page->coords.x1;
 8019db8:	8a32      	ldrh	r2, [r6, #16]
 8019dba:	f851 0f14 	ldr.w	r0, [r1, #20]!
 8019dbe:	6849      	ldr	r1, [r1, #4]
 8019dc0:	c303      	stmia	r3!, {r0, r1}
        sb_area_tmp.x2 += page->coords.x1;
 8019dc2:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
        lv_inv_area(&sb_area_tmp);
 8019dc6:	a808      	add	r0, sp, #32
        sb_area_tmp.x1 += page->coords.x1;
 8019dc8:	f8bd e020 	ldrh.w	lr, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
 8019dcc:	8a73      	ldrh	r3, [r6, #18]
 8019dce:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x1 += page->coords.x1;
 8019dd2:	4496      	add	lr, r2
        sb_area_tmp.x2 += page->coords.x1;
 8019dd4:	4462      	add	r2, ip
        sb_area_tmp.y2 += page->coords.y1;
 8019dd6:	f8bd c026 	ldrh.w	ip, [sp, #38]	; 0x26
        sb_area_tmp.y1 += page->coords.y1;
 8019dda:	4419      	add	r1, r3
        sb_area_tmp.x1 += page->coords.x1;
 8019ddc:	f8ad e020 	strh.w	lr, [sp, #32]
        sb_area_tmp.y2 += page->coords.y1;
 8019de0:	4463      	add	r3, ip
        sb_area_tmp.x2 += page->coords.x1;
 8019de2:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
        sb_area_tmp.y1 += page->coords.y1;
 8019de6:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.y2 += page->coords.y1;
 8019dea:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        lv_inv_area(&sb_area_tmp);
 8019dee:	f7f2 fb13 	bl	800c418 <lv_inv_area>
 8019df2:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    if(ext->sb.ver_draw != 0)  {
 8019df6:	0791      	lsls	r1, r2, #30
 8019df8:	f57f af15 	bpl.w	8019c26 <lv_page_sb_refresh+0x76>
 8019dfc:	4621      	mov	r1, r4
 8019dfe:	ab08      	add	r3, sp, #32
        sb_area_tmp.x1 += page->coords.x1;
 8019e00:	8a32      	ldrh	r2, [r6, #16]
 8019e02:	f851 0f1c 	ldr.w	r0, [r1, #28]!
 8019e06:	6849      	ldr	r1, [r1, #4]
 8019e08:	c303      	stmia	r3!, {r0, r1}
        sb_area_tmp.x2 += page->coords.x1;
 8019e0a:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
        lv_inv_area(&sb_area_tmp);
 8019e0e:	a808      	add	r0, sp, #32
        sb_area_tmp.x1 += page->coords.x1;
 8019e10:	f8bd e020 	ldrh.w	lr, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
 8019e14:	8a73      	ldrh	r3, [r6, #18]
 8019e16:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x1 += page->coords.x1;
 8019e1a:	4496      	add	lr, r2
        sb_area_tmp.x2 += page->coords.x1;
 8019e1c:	4462      	add	r2, ip
        sb_area_tmp.y2 += page->coords.y1;
 8019e1e:	f8bd c026 	ldrh.w	ip, [sp, #38]	; 0x26
        sb_area_tmp.y1 += page->coords.y1;
 8019e22:	4419      	add	r1, r3
        sb_area_tmp.x1 += page->coords.x1;
 8019e24:	f8ad e020 	strh.w	lr, [sp, #32]
        sb_area_tmp.y2 += page->coords.y1;
 8019e28:	4463      	add	r3, ip
        sb_area_tmp.x2 += page->coords.x1;
 8019e2a:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
        sb_area_tmp.y1 += page->coords.y1;
 8019e2e:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.y2 += page->coords.y1;
 8019e32:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        lv_inv_area(&sb_area_tmp);
 8019e36:	f7f2 faef 	bl	800c418 <lv_inv_area>
 8019e3a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    if(ext->sb.mode == LV_SB_MODE_DRAG && lv_indev_is_dragging(lv_indev_get_act()) == false) {
 8019e3e:	f002 021c 	and.w	r2, r2, #28
 8019e42:	2a08      	cmp	r2, #8
 8019e44:	f47f aef4 	bne.w	8019c30 <lv_page_sb_refresh+0x80>
 8019e48:	e008      	b.n	8019e5c <lv_page_sb_refresh+0x2ac>
        ext->sb.ver_draw = 1;
 8019e4a:	f042 0303 	orr.w	r3, r2, #3
 8019e4e:	461a      	mov	r2, r3
 8019e50:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    if(ext->sb.hor_draw != 0) {
 8019e54:	07d0      	lsls	r0, r2, #31
 8019e56:	f57f aee3 	bpl.w	8019c20 <lv_page_sb_refresh+0x70>
 8019e5a:	e7ab      	b.n	8019db4 <lv_page_sb_refresh+0x204>
    if(ext->sb.mode == LV_SB_MODE_DRAG && lv_indev_is_dragging(lv_indev_get_act()) == false) {
 8019e5c:	f7ef f996 	bl	800918c <lv_indev_get_act>
 8019e60:	f7ef f9d6 	bl	8009210 <lv_indev_is_dragging>
 8019e64:	2800      	cmp	r0, #0
 8019e66:	f47f aee3 	bne.w	8019c30 <lv_page_sb_refresh+0x80>
        ext->sb.hor_draw = 0;
 8019e6a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8019e6e:	f360 0300 	bfi	r3, r0, #0, #1
        ext->sb.ver_draw = 0;
 8019e72:	f360 0341 	bfi	r3, r0, #1, #1
 8019e76:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        return;
 8019e7a:	e792      	b.n	8019da2 <lv_page_sb_refresh+0x1f2>
        lv_area_set_height(&ext->sb.ver_area,  obj_h - 2 * sb_ver_pad);
 8019e7c:	9b05      	ldr	r3, [sp, #20]
 8019e7e:	f104 0b1c 	add.w	fp, r4, #28
 8019e82:	9200      	str	r2, [sp, #0]
 8019e84:	eba3 0142 	sub.w	r1, r3, r2, lsl #1
 8019e88:	4658      	mov	r0, fp
 8019e8a:	b209      	sxth	r1, r1
 8019e8c:	f7f8 fdf8 	bl	8012a80 <lv_area_set_height>
        lv_area_set_pos(&ext->sb.ver_area, obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.hor, sb_ver_pad);
 8019e90:	6923      	ldr	r3, [r4, #16]
 8019e92:	9a00      	ldr	r2, [sp, #0]
 8019e94:	4658      	mov	r0, fp
 8019e96:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8019e98:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8019e9a:	1a6d      	subs	r5, r5, r1
 8019e9c:	1ae9      	subs	r1, r5, r3
 8019e9e:	b209      	sxth	r1, r1
 8019ea0:	f7f8 fdf4 	bl	8012a8c <lv_area_set_pos>
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG)  ext->sb.ver_draw = 0;
 8019ea4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8019ea8:	f003 0218 	and.w	r2, r3, #24
 8019eac:	2a08      	cmp	r2, #8
 8019eae:	f47f af54 	bne.w	8019d5a <lv_page_sb_refresh+0x1aa>
 8019eb2:	f36f 0341 	bfc	r3, #1, #1
 8019eb6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8019eba:	b2db      	uxtb	r3, r3
 8019ebc:	e74d      	b.n	8019d5a <lv_page_sb_refresh+0x1aa>
        lv_area_set_width(&ext->sb.hor_area, obj_w - 2 * sb_hor_pad);
 8019ebe:	b2ad      	uxth	r5, r5
 8019ec0:	f104 0314 	add.w	r3, r4, #20
        lv_area_set_pos(&ext->sb.hor_area, sb_hor_pad, obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.ver);
 8019ec4:	fa1f f289 	uxth.w	r2, r9
        lv_area_set_width(&ext->sb.hor_area, obj_w - 2 * sb_hor_pad);
 8019ec8:	eba5 014b 	sub.w	r1, r5, fp, lsl #1
 8019ecc:	4618      	mov	r0, r3
        lv_area_set_pos(&ext->sb.hor_area, sb_hor_pad, obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.ver);
 8019ece:	4617      	mov	r7, r2
        lv_area_set_width(&ext->sb.hor_area, obj_w - 2 * sb_hor_pad);
 8019ed0:	469a      	mov	sl, r3
 8019ed2:	b209      	sxth	r1, r1
 8019ed4:	9306      	str	r3, [sp, #24]
        lv_area_set_pos(&ext->sb.hor_area, sb_hor_pad, obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.ver);
 8019ed6:	9205      	str	r2, [sp, #20]
        lv_area_set_width(&ext->sb.hor_area, obj_w - 2 * sb_hor_pad);
 8019ed8:	f7f8 fdcc 	bl	8012a74 <lv_area_set_width>
        lv_area_set_pos(&ext->sb.hor_area, sb_hor_pad, obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.ver);
 8019edc:	6923      	ldr	r3, [r4, #16]
 8019ede:	4659      	mov	r1, fp
 8019ee0:	4650      	mov	r0, sl
 8019ee2:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8019ee4:	8c1b      	ldrh	r3, [r3, #32]
 8019ee6:	1aba      	subs	r2, r7, r2
 8019ee8:	1ad2      	subs	r2, r2, r3
 8019eea:	b212      	sxth	r2, r2
 8019eec:	f7f8 fdce 	bl	8012a8c <lv_area_set_pos>
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG)  ext->sb.hor_draw = 0;
 8019ef0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8019ef4:	f003 0218 	and.w	r2, r3, #24
 8019ef8:	2a08      	cmp	r2, #8
 8019efa:	f47f aede 	bne.w	8019cba <lv_page_sb_refresh+0x10a>
 8019efe:	f36f 0300 	bfc	r3, #0, #1
 8019f02:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8019f06:	e6d8      	b.n	8019cba <lv_page_sb_refresh+0x10a>
 8019f08:	9a06      	ldr	r2, [sp, #24]
 8019f0a:	ab08      	add	r3, sp, #32
 8019f0c:	6810      	ldr	r0, [r2, #0]
 8019f0e:	6851      	ldr	r1, [r2, #4]
        sb_area_tmp.x1 += page->coords.x1;
 8019f10:	8a32      	ldrh	r2, [r6, #16]
 8019f12:	c303      	stmia	r3!, {r0, r1}
        sb_area_tmp.x2 += page->coords.x1;
 8019f14:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
        lv_inv_area(&sb_area_tmp);
 8019f18:	a808      	add	r0, sp, #32
        sb_area_tmp.x1 += page->coords.x1;
 8019f1a:	f8bd 5020 	ldrh.w	r5, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
 8019f1e:	8a73      	ldrh	r3, [r6, #18]
 8019f20:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x1 += page->coords.x1;
 8019f24:	4415      	add	r5, r2
        sb_area_tmp.x2 += page->coords.x1;
 8019f26:	443a      	add	r2, r7
        sb_area_tmp.y2 += page->coords.y1;
 8019f28:	f8bd 7026 	ldrh.w	r7, [sp, #38]	; 0x26
        sb_area_tmp.y1 += page->coords.y1;
 8019f2c:	4419      	add	r1, r3
        sb_area_tmp.x1 += page->coords.x1;
 8019f2e:	f8ad 5020 	strh.w	r5, [sp, #32]
        sb_area_tmp.y2 += page->coords.y1;
 8019f32:	443b      	add	r3, r7
        sb_area_tmp.x2 += page->coords.x1;
 8019f34:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
        sb_area_tmp.y1 += page->coords.y1;
 8019f38:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.y2 += page->coords.y1;
 8019f3c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        lv_inv_area(&sb_area_tmp);
 8019f40:	f7f2 fa6a 	bl	800c418 <lv_inv_area>
 8019f44:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8019f48:	e70a      	b.n	8019d60 <lv_page_sb_refresh+0x1b0>
 8019f4a:	bf00      	nop

08019f4c <edge_flash_anim_end>:
    ext->edge_flash.state = v;
    lv_obj_invalidate(page);
}

static void edge_flash_anim_end(void * page)
{
 8019f4c:	b510      	push	{r4, lr}
 8019f4e:	4604      	mov	r4, r0
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8019f50:	f7f1 ffe2 	bl	800bf18 <lv_obj_get_ext_attr>
 8019f54:	4602      	mov	r2, r0
    ext->edge_flash.top_ip = 0;
    ext->edge_flash.bottom_ip = 0;
    ext->edge_flash.left_ip = 0;
    ext->edge_flash.right_ip = 0;
    lv_obj_invalidate(page);
 8019f56:	4620      	mov	r0, r4
    ext->edge_flash.top_ip = 0;
 8019f58:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    ext->edge_flash.right_ip = 0;
 8019f5c:	f003 03e9 	and.w	r3, r3, #233	; 0xe9
 8019f60:	f36f 03c3 	bfc	r3, #3, #1
}
 8019f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ext->edge_flash.right_ip = 0;
 8019f68:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    lv_obj_invalidate(page);
 8019f6c:	f7ef beb8 	b.w	8009ce0 <lv_obj_invalidate>

08019f70 <edge_flash_anim>:
{
 8019f70:	b538      	push	{r3, r4, r5, lr}
 8019f72:	460d      	mov	r5, r1
 8019f74:	4604      	mov	r4, r0
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8019f76:	f7f1 ffcf 	bl	800bf18 <lv_obj_get_ext_attr>
    ext->edge_flash.state = v;
 8019f7a:	8505      	strh	r5, [r0, #40]	; 0x28
    lv_obj_invalidate(page);
 8019f7c:	4620      	mov	r0, r4
}
 8019f7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(page);
 8019f82:	f7ef bead 	b.w	8009ce0 <lv_obj_invalidate>
 8019f86:	bf00      	nop

08019f88 <lv_scrl_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 8019f88:	2a02      	cmp	r2, #2
 8019f8a:	d03e      	beq.n	801a00a <lv_scrl_design+0x82>
{
 8019f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 8019f90:	b122      	cbz	r2, 8019f9c <lv_scrl_design+0x14>
    } else if(mode == LV_DESIGN_DRAW_POST) {
 8019f92:	2a01      	cmp	r2, #1
 8019f94:	d033      	beq.n	8019ffe <lv_scrl_design+0x76>
}
 8019f96:	2001      	movs	r0, #1
 8019f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f9c:	4604      	mov	r4, r0
 8019f9e:	460d      	mov	r5, r1
        lv_style_t * style_scrl_ori = lv_obj_get_style(scrl);
 8019fa0:	f7f1 ff3c 	bl	800be1c <lv_obj_get_style>
 8019fa4:	4680      	mov	r8, r0
        lv_obj_t * page = lv_obj_get_parent(scrl);
 8019fa6:	4620      	mov	r0, r4
 8019fa8:	f7f1 ff0c 	bl	800bdc4 <lv_obj_get_parent>
 8019fac:	4607      	mov	r7, r0
        lv_style_t * style_page = lv_obj_get_style(page);
 8019fae:	f7f1 ff35 	bl	800be1c <lv_obj_get_style>
 8019fb2:	4606      	mov	r6, r0
        lv_group_t * g = lv_obj_get_group(page);
 8019fb4:	4638      	mov	r0, r7
 8019fb6:	f7f1 ffb1 	bl	800bf1c <lv_obj_get_group>
        if((style_page->body.empty || style_page->body.opa == LV_OPA_TRANSP) && style_page->body.border.width == 0) { /*Is the background visible?*/
 8019fba:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
        lv_group_t * g = lv_obj_get_group(page);
 8019fbe:	4681      	mov	r9, r0
        if((style_page->body.empty || style_page->body.opa == LV_OPA_TRANSP) && style_page->body.border.width == 0) { /*Is the background visible?*/
 8019fc0:	07db      	lsls	r3, r3, #31
 8019fc2:	d50d      	bpl.n	8019fe0 <lv_scrl_design+0x58>
 8019fc4:	f9b6 3014 	ldrsh.w	r3, [r6, #20]
 8019fc8:	b173      	cbz	r3, 8019fe8 <lv_scrl_design+0x60>
        ancestor_design(scrl, mask, mode);
 8019fca:	4b11      	ldr	r3, [pc, #68]	; (801a010 <lv_scrl_design+0x88>)
 8019fcc:	4629      	mov	r1, r5
 8019fce:	2200      	movs	r2, #0
 8019fd0:	4620      	mov	r0, r4
 8019fd2:	681b      	ldr	r3, [r3, #0]
 8019fd4:	4798      	blx	r3
        scrl->style_p = style_scrl_ori;  /*Revert the style*/
 8019fd6:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
}
 8019fda:	2001      	movs	r0, #1
 8019fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if((style_page->body.empty || style_page->body.opa == LV_OPA_TRANSP) && style_page->body.border.width == 0) { /*Is the background visible?*/
 8019fe0:	7bb3      	ldrb	r3, [r6, #14]
 8019fe2:	2b00      	cmp	r3, #0
 8019fe4:	d0ee      	beq.n	8019fc4 <lv_scrl_design+0x3c>
 8019fe6:	e7f0      	b.n	8019fca <lv_scrl_design+0x42>
            if(lv_group_get_focused(g) == page) {
 8019fe8:	4648      	mov	r0, r9
 8019fea:	f7ee fa45 	bl	8008478 <lv_group_get_focused>
 8019fee:	4287      	cmp	r7, r0
 8019ff0:	d1eb      	bne.n	8019fca <lv_scrl_design+0x42>
                style_mod = lv_group_mod_style(g, style_scrl_ori);
 8019ff2:	4648      	mov	r0, r9
 8019ff4:	4641      	mov	r1, r8
 8019ff6:	f7ee fa29 	bl	800844c <lv_group_mod_style>
                scrl->style_p = style_mod;  /*Temporally change the style to the activated */
 8019ffa:	6260      	str	r0, [r4, #36]	; 0x24
 8019ffc:	e7e5      	b.n	8019fca <lv_scrl_design+0x42>
        ancestor_design(scrl, mask, mode);
 8019ffe:	4b04      	ldr	r3, [pc, #16]	; (801a010 <lv_scrl_design+0x88>)
 801a000:	681b      	ldr	r3, [r3, #0]
 801a002:	4798      	blx	r3
}
 801a004:	2001      	movs	r0, #1
 801a006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return ancestor_design(scrl, mask, mode);
 801a00a:	4b01      	ldr	r3, [pc, #4]	; (801a010 <lv_scrl_design+0x88>)
 801a00c:	681b      	ldr	r3, [r3, #0]
 801a00e:	4718      	bx	r3
 801a010:	20016648 	.word	0x20016648

0801a014 <lv_page_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 801a014:	2a02      	cmp	r2, #2
{
 801a016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a01a:	b096      	sub	sp, #88	; 0x58
    if(mode == LV_DESIGN_COVER_CHK) {
 801a01c:	f000 80ee 	beq.w	801a1fc <lv_page_design+0x1e8>
 801a020:	4614      	mov	r4, r2
 801a022:	4605      	mov	r5, r0
 801a024:	460e      	mov	r6, r1
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 801a026:	b12a      	cbz	r2, 801a034 <lv_page_design+0x20>
    } else if(mode == LV_DESIGN_DRAW_POST) { /*Draw the scroll bars finally*/
 801a028:	2a01      	cmp	r2, #1
 801a02a:	d01c      	beq.n	801a066 <lv_page_design+0x52>
    return true;
 801a02c:	2001      	movs	r0, #1
}
 801a02e:	b016      	add	sp, #88	; 0x58
 801a030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801a034:	f7f1 ff70 	bl	800bf18 <lv_obj_get_ext_attr>
            style = lv_obj_get_style(page);
 801a038:	4628      	mov	r0, r5
 801a03a:	f7f1 feef 	bl	800be1c <lv_obj_get_style>
 801a03e:	4607      	mov	r7, r0
        lv_draw_rect(&page->coords, mask, style, lv_obj_get_opa_scale(page));
 801a040:	4628      	mov	r0, r5
        lv_coord_t border_width_tmp =  style->body.border.width;
 801a042:	f9b7 8014 	ldrsh.w	r8, [r7, #20]
        style->body.border.width = 0;
 801a046:	82bc      	strh	r4, [r7, #20]
        lv_draw_rect(&page->coords, mask, style, lv_obj_get_opa_scale(page));
 801a048:	f7f1 ff46 	bl	800bed8 <lv_obj_get_opa_scale>
 801a04c:	463a      	mov	r2, r7
 801a04e:	4603      	mov	r3, r0
 801a050:	4631      	mov	r1, r6
 801a052:	f105 0010 	add.w	r0, r5, #16
 801a056:	f7f5 fe1d 	bl	800fc94 <lv_draw_rect>
    return true;
 801a05a:	2001      	movs	r0, #1
        style->body.border.width = border_width_tmp;
 801a05c:	f8a7 8014 	strh.w	r8, [r7, #20]
}
 801a060:	b016      	add	sp, #88	; 0x58
 801a062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801a066:	f7f1 ff57 	bl	800bf18 <lv_obj_get_ext_attr>
            style = lv_obj_get_style(page);
 801a06a:	4628      	mov	r0, r5
 801a06c:	f7f1 fed6 	bl	800be1c <lv_obj_get_style>
 801a070:	4604      	mov	r4, r0
        style->body.shadow.width = 0;
 801a072:	2100      	movs	r1, #0
        lv_draw_rect(&page->coords, mask, style, lv_obj_get_opa_scale(page));
 801a074:	4628      	mov	r0, r5
        uint8_t empty_tmp =  style->body.empty;
 801a076:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
        lv_coord_t shadow_width_tmp =  style->body.shadow.width;
 801a07a:	f9b4 801c 	ldrsh.w	r8, [r4, #28]
        style->body.empty = 1;
 801a07e:	f043 0201 	orr.w	r2, r3, #1
        style->body.shadow.width = 0;
 801a082:	83a1      	strh	r1, [r4, #28]
        uint8_t empty_tmp =  style->body.empty;
 801a084:	f003 0701 	and.w	r7, r3, #1
        style->body.empty = 1;
 801a088:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
        lv_draw_rect(&page->coords, mask, style, lv_obj_get_opa_scale(page));
 801a08c:	f7f1 ff24 	bl	800bed8 <lv_obj_get_opa_scale>
 801a090:	4622      	mov	r2, r4
 801a092:	4603      	mov	r3, r0
 801a094:	4631      	mov	r1, r6
 801a096:	f105 0010 	add.w	r0, r5, #16
 801a09a:	f7f5 fdfb 	bl	800fc94 <lv_draw_rect>
        style->body.empty = empty_tmp;
 801a09e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
        style->body.shadow.width = shadow_width_tmp;
 801a0a2:	f8a4 801c 	strh.w	r8, [r4, #28]
        lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801a0a6:	4628      	mov	r0, r5
        style->body.empty = empty_tmp;
 801a0a8:	f367 0300 	bfi	r3, r7, #0, #1
 801a0ac:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801a0b0:	f7f1 ff32 	bl	800bf18 <lv_obj_get_ext_attr>
        if(ext->sb.hor_draw && (ext->sb.mode & LV_SB_MODE_HIDE) == 0) {
 801a0b4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
        lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801a0b8:	4607      	mov	r7, r0
        if(ext->sb.hor_draw && (ext->sb.mode & LV_SB_MODE_HIDE) == 0) {
 801a0ba:	07da      	lsls	r2, r3, #31
 801a0bc:	d571      	bpl.n	801a1a2 <lv_page_design+0x18e>
 801a0be:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801a0c2:	075b      	lsls	r3, r3, #29
 801a0c4:	d545      	bpl.n	801a152 <lv_page_design+0x13e>
        lv_coord_t page_w = lv_obj_get_width(page);
 801a0c6:	4628      	mov	r0, r5
 801a0c8:	f7f1 fe9c 	bl	800be04 <lv_obj_get_width>
 801a0cc:	4604      	mov	r4, r0
        lv_coord_t page_h = lv_obj_get_height(page);
 801a0ce:	4628      	mov	r0, r5
 801a0d0:	f7f1 fe9e 	bl	800be10 <lv_obj_get_height>
        if(ext->edge_flash.top_ip) {
 801a0d4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801a0d8:	0799      	lsls	r1, r3, #30
 801a0da:	f140 8093 	bpl.w	801a204 <lv_page_design+0x1f0>
            flash_area.x1 = page->coords.x1 - page_w;
 801a0de:	b2a0      	uxth	r0, r4
 801a0e0:	f8b7 e028 	ldrh.w	lr, [r7, #40]	; 0x28
 801a0e4:	8a6a      	ldrh	r2, [r5, #18]
            flash_area.y1 = page->coords.y1 - 3 * page_w + ext->edge_flash.state;
 801a0e6:	ebc0 3180 	rsb	r1, r0, r0, lsl #14
            flash_area.x1 = page->coords.x1 - page_w;
 801a0ea:	8a2c      	ldrh	r4, [r5, #16]
 801a0ec:	4472      	add	r2, lr
            flash_area.x2 = page->coords.x2 + page_w;
 801a0ee:	f8b5 e014 	ldrh.w	lr, [r5, #20]
            flash_area.y1 = page->coords.y1 - 3 * page_w + ext->edge_flash.state;
 801a0f2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
            flash_area.x1 = page->coords.x1 - page_w;
 801a0f6:	1a24      	subs	r4, r4, r0
 801a0f8:	b292      	uxth	r2, r2
            flash_area.x2 = page->coords.x2 + page_w;
 801a0fa:	4470      	add	r0, lr
            flash_area.x1 = page->coords.x1 - page_w;
 801a0fc:	f8ad 4008 	strh.w	r4, [sp, #8]
            flash_area.y1 = page->coords.y1 - 3 * page_w + ext->edge_flash.state;
 801a100:	4411      	add	r1, r2
            flash_area.y2 = page->coords.y1 + ext->edge_flash.state;
 801a102:	f8ad 200e 	strh.w	r2, [sp, #14]
            flash_area.x2 = page->coords.x2 + page_w;
 801a106:	f8ad 000c 	strh.w	r0, [sp, #12]
            flash_area.y1 = page->coords.y1 - 3 * page_w + ext->edge_flash.state;
 801a10a:	f8ad 100a 	strh.w	r1, [sp, #10]
        if(ext->edge_flash.left_ip || ext->edge_flash.right_ip || ext->edge_flash.top_ip || ext->edge_flash.bottom_ip) {
 801a10e:	f013 0f1e 	tst.w	r3, #30
 801a112:	d08b      	beq.n	801a02c <lv_page_design+0x18>
            lv_style_copy(&flash_style, ext->edge_flash.style);
 801a114:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a116:	a804      	add	r0, sp, #16
 801a118:	f7f2 fbfc 	bl	800c914 <lv_style_copy>
            uint32_t opa = (flash_style.body.opa * ext->edge_flash.state) / LV_PAGE_END_FLASH_SIZE;
 801a11c:	f89d 401e 	ldrb.w	r4, [sp, #30]
 801a120:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
            flash_style.body.radius = LV_RADIUS_CIRCLE;
 801a122:	f643 71ff 	movw	r1, #16383	; 0x3fff
            uint32_t opa = (flash_style.body.opa * ext->edge_flash.state) / LV_PAGE_END_FLASH_SIZE;
 801a126:	4a5d      	ldr	r2, [pc, #372]	; (801a29c <lv_page_design+0x288>)
            lv_draw_rect(&flash_area, mask, &flash_style, lv_obj_get_opa_scale(page));
 801a128:	4628      	mov	r0, r5
            uint32_t opa = (flash_style.body.opa * ext->edge_flash.state) / LV_PAGE_END_FLASH_SIZE;
 801a12a:	fb03 f304 	mul.w	r3, r3, r4
            flash_style.body.radius = LV_RADIUS_CIRCLE;
 801a12e:	f8ad 101c 	strh.w	r1, [sp, #28]
            uint32_t opa = (flash_style.body.opa * ext->edge_flash.state) / LV_PAGE_END_FLASH_SIZE;
 801a132:	fb82 1203 	smull	r1, r2, r2, r3
 801a136:	17db      	asrs	r3, r3, #31
 801a138:	ebc3 03e2 	rsb	r3, r3, r2, asr #3
            flash_style.body.opa = opa;
 801a13c:	f88d 301e 	strb.w	r3, [sp, #30]
            lv_draw_rect(&flash_area, mask, &flash_style, lv_obj_get_opa_scale(page));
 801a140:	f7f1 feca 	bl	800bed8 <lv_obj_get_opa_scale>
 801a144:	aa04      	add	r2, sp, #16
 801a146:	4603      	mov	r3, r0
 801a148:	4631      	mov	r1, r6
 801a14a:	a802      	add	r0, sp, #8
 801a14c:	f7f5 fda2 	bl	800fc94 <lv_draw_rect>
 801a150:	e76c      	b.n	801a02c <lv_page_design+0x18>
 801a152:	4601      	mov	r1, r0
 801a154:	466b      	mov	r3, sp
            sb_area.x1 += page->coords.x1;
 801a156:	8a2a      	ldrh	r2, [r5, #16]
 801a158:	f851 0f14 	ldr.w	r0, [r1, #20]!
 801a15c:	6849      	ldr	r1, [r1, #4]
 801a15e:	c303      	stmia	r3!, {r0, r1}
            sb_area.x2 += page->coords.x1;
 801a160:	f8bd e004 	ldrh.w	lr, [sp, #4]
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 801a164:	4628      	mov	r0, r5
            sb_area.x1 += page->coords.x1;
 801a166:	f8bd 4000 	ldrh.w	r4, [sp]
            sb_area.y1 += page->coords.y1;
 801a16a:	8a6b      	ldrh	r3, [r5, #18]
            sb_area.x1 += page->coords.x1;
 801a16c:	4414      	add	r4, r2
            sb_area.y1 += page->coords.y1;
 801a16e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
            sb_area.x2 += page->coords.x1;
 801a172:	4472      	add	r2, lr
            sb_area.y2 += page->coords.y1;
 801a174:	f8bd e006 	ldrh.w	lr, [sp, #6]
            sb_area.y1 += page->coords.y1;
 801a178:	4419      	add	r1, r3
            sb_area.x1 += page->coords.x1;
 801a17a:	f8ad 4000 	strh.w	r4, [sp]
            sb_area.y2 += page->coords.y1;
 801a17e:	4473      	add	r3, lr
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 801a180:	693c      	ldr	r4, [r7, #16]
            sb_area.x2 += page->coords.x1;
 801a182:	f8ad 2004 	strh.w	r2, [sp, #4]
            sb_area.y1 += page->coords.y1;
 801a186:	f8ad 1002 	strh.w	r1, [sp, #2]
            sb_area.y2 += page->coords.y1;
 801a18a:	f8ad 3006 	strh.w	r3, [sp, #6]
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 801a18e:	f7f1 fea3 	bl	800bed8 <lv_obj_get_opa_scale>
 801a192:	4622      	mov	r2, r4
 801a194:	4603      	mov	r3, r0
 801a196:	4631      	mov	r1, r6
 801a198:	4668      	mov	r0, sp
 801a19a:	f7f5 fd7b 	bl	800fc94 <lv_draw_rect>
 801a19e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
        if(ext->sb.ver_draw && (ext->sb.mode & LV_SB_MODE_HIDE) == 0) {
 801a1a2:	079c      	lsls	r4, r3, #30
 801a1a4:	d58f      	bpl.n	801a0c6 <lv_page_design+0xb2>
 801a1a6:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801a1aa:	0758      	lsls	r0, r3, #29
 801a1ac:	d48b      	bmi.n	801a0c6 <lv_page_design+0xb2>
 801a1ae:	4639      	mov	r1, r7
 801a1b0:	466b      	mov	r3, sp
            sb_area.x1 += page->coords.x1;
 801a1b2:	8a2a      	ldrh	r2, [r5, #16]
 801a1b4:	f851 0f1c 	ldr.w	r0, [r1, #28]!
 801a1b8:	6849      	ldr	r1, [r1, #4]
 801a1ba:	c303      	stmia	r3!, {r0, r1}
            sb_area.x2 += page->coords.x1;
 801a1bc:	f8bd e004 	ldrh.w	lr, [sp, #4]
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 801a1c0:	4628      	mov	r0, r5
            sb_area.x1 += page->coords.x1;
 801a1c2:	f8bd 4000 	ldrh.w	r4, [sp]
            sb_area.y1 += page->coords.y1;
 801a1c6:	8a6b      	ldrh	r3, [r5, #18]
 801a1c8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
            sb_area.x1 += page->coords.x1;
 801a1cc:	4414      	add	r4, r2
            sb_area.x2 += page->coords.x1;
 801a1ce:	4472      	add	r2, lr
            sb_area.y2 += page->coords.y1;
 801a1d0:	f8bd e006 	ldrh.w	lr, [sp, #6]
            sb_area.y1 += page->coords.y1;
 801a1d4:	4419      	add	r1, r3
            sb_area.x1 += page->coords.x1;
 801a1d6:	f8ad 4000 	strh.w	r4, [sp]
            sb_area.y2 += page->coords.y1;
 801a1da:	4473      	add	r3, lr
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 801a1dc:	693c      	ldr	r4, [r7, #16]
            sb_area.x2 += page->coords.x1;
 801a1de:	f8ad 2004 	strh.w	r2, [sp, #4]
            sb_area.y1 += page->coords.y1;
 801a1e2:	f8ad 1002 	strh.w	r1, [sp, #2]
            sb_area.y2 += page->coords.y1;
 801a1e6:	f8ad 3006 	strh.w	r3, [sp, #6]
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 801a1ea:	f7f1 fe75 	bl	800bed8 <lv_obj_get_opa_scale>
 801a1ee:	4622      	mov	r2, r4
 801a1f0:	4603      	mov	r3, r0
 801a1f2:	4631      	mov	r1, r6
 801a1f4:	4668      	mov	r0, sp
 801a1f6:	f7f5 fd4d 	bl	800fc94 <lv_draw_rect>
 801a1fa:	e764      	b.n	801a0c6 <lv_page_design+0xb2>
        return ancestor_design(page, mask, mode);
 801a1fc:	4b28      	ldr	r3, [pc, #160]	; (801a2a0 <lv_page_design+0x28c>)
 801a1fe:	681b      	ldr	r3, [r3, #0]
 801a200:	4798      	blx	r3
 801a202:	e714      	b.n	801a02e <lv_page_design+0x1a>
        else if(ext->edge_flash.bottom_ip) {
 801a204:	075a      	lsls	r2, r3, #29
 801a206:	d417      	bmi.n	801a238 <lv_page_design+0x224>
        else if(ext->edge_flash.right_ip) {
 801a208:	0719      	lsls	r1, r3, #28
 801a20a:	d52b      	bpl.n	801a264 <lv_page_design+0x250>
            flash_area.x1 = page->coords.x2 - ext->edge_flash.state;
 801a20c:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
            flash_area.x2 = page->coords.x2 + 3 * page_h - ext->edge_flash.state;
 801a20e:	b280      	uxth	r0, r0
            flash_area.x1 = page->coords.x2 - ext->edge_flash.state;
 801a210:	8aaa      	ldrh	r2, [r5, #20]
            flash_area.x2 = page->coords.x2 + 3 * page_h - ext->edge_flash.state;
 801a212:	eb00 0140 	add.w	r1, r0, r0, lsl #1
            flash_area.y2 = page->coords.y2 + page_h;
 801a216:	f8b5 e016 	ldrh.w	lr, [r5, #22]
            flash_area.x1 = page->coords.x2 - ext->edge_flash.state;
 801a21a:	1b12      	subs	r2, r2, r4
            flash_area.y1 = page->coords.y1 - page_h;
 801a21c:	8a6c      	ldrh	r4, [r5, #18]
            flash_area.x1 = page->coords.x2 - ext->edge_flash.state;
 801a21e:	b292      	uxth	r2, r2
            flash_area.y1 = page->coords.y1 - page_h;
 801a220:	1a24      	subs	r4, r4, r0
            flash_area.y2 = page->coords.y2 + page_h;
 801a222:	4470      	add	r0, lr
            flash_area.x2 = page->coords.x2 + 3 * page_h - ext->edge_flash.state;
 801a224:	4411      	add	r1, r2
            flash_area.x1 = page->coords.x2 - ext->edge_flash.state;
 801a226:	f8ad 2008 	strh.w	r2, [sp, #8]
            flash_area.y1 = page->coords.y1 - page_h;
 801a22a:	f8ad 400a 	strh.w	r4, [sp, #10]
            flash_area.x2 = page->coords.x2 + 3 * page_h - ext->edge_flash.state;
 801a22e:	f8ad 100c 	strh.w	r1, [sp, #12]
            flash_area.y2 = page->coords.y2 + page_h;
 801a232:	f8ad 000e 	strh.w	r0, [sp, #14]
 801a236:	e76a      	b.n	801a10e <lv_page_design+0xfa>
            flash_area.x1 = page->coords.x1 - page_w;
 801a238:	b2a0      	uxth	r0, r4
            flash_area.y1 = page->coords.y2 - ext->edge_flash.state;
 801a23a:	8aea      	ldrh	r2, [r5, #22]
 801a23c:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
            flash_area.y2 = page->coords.y2 + 3 * page_w - ext->edge_flash.state;
 801a23e:	eb00 0140 	add.w	r1, r0, r0, lsl #1
            flash_area.x2 = page->coords.x2 + page_w;
 801a242:	f8b5 e014 	ldrh.w	lr, [r5, #20]
            flash_area.y1 = page->coords.y2 - ext->edge_flash.state;
 801a246:	1b12      	subs	r2, r2, r4
            flash_area.x1 = page->coords.x1 - page_w;
 801a248:	8a2c      	ldrh	r4, [r5, #16]
            flash_area.y1 = page->coords.y2 - ext->edge_flash.state;
 801a24a:	b292      	uxth	r2, r2
            flash_area.x1 = page->coords.x1 - page_w;
 801a24c:	1a24      	subs	r4, r4, r0
            flash_area.x2 = page->coords.x2 + page_w;
 801a24e:	4470      	add	r0, lr
            flash_area.y2 = page->coords.y2 + 3 * page_w - ext->edge_flash.state;
 801a250:	4411      	add	r1, r2
            flash_area.y1 = page->coords.y2 - ext->edge_flash.state;
 801a252:	f8ad 200a 	strh.w	r2, [sp, #10]
            flash_area.x1 = page->coords.x1 - page_w;
 801a256:	f8ad 4008 	strh.w	r4, [sp, #8]
            flash_area.y2 = page->coords.y2 + 3 * page_w - ext->edge_flash.state;
 801a25a:	f8ad 100e 	strh.w	r1, [sp, #14]
            flash_area.x2 = page->coords.x2 + page_w;
 801a25e:	f8ad 000c 	strh.w	r0, [sp, #12]
 801a262:	e754      	b.n	801a10e <lv_page_design+0xfa>
        else if(ext->edge_flash.left_ip) {
 801a264:	06da      	lsls	r2, r3, #27
 801a266:	f57f af52 	bpl.w	801a10e <lv_page_design+0xfa>
            flash_area.x1 = page->coords.x1 - 3 * page_h + ext->edge_flash.state;
 801a26a:	b280      	uxth	r0, r0
 801a26c:	f8b7 e028 	ldrh.w	lr, [r7, #40]	; 0x28
 801a270:	8a2a      	ldrh	r2, [r5, #16]
 801a272:	ebc0 3180 	rsb	r1, r0, r0, lsl #14
            flash_area.y1 = page->coords.y1 - page_h;
 801a276:	8a6c      	ldrh	r4, [r5, #18]
 801a278:	4472      	add	r2, lr
            flash_area.y2 = page->coords.y2 + page_h;
 801a27a:	f8b5 e016 	ldrh.w	lr, [r5, #22]
            flash_area.x1 = page->coords.x1 - 3 * page_h + ext->edge_flash.state;
 801a27e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
            flash_area.y1 = page->coords.y1 - page_h;
 801a282:	1a24      	subs	r4, r4, r0
 801a284:	b292      	uxth	r2, r2
            flash_area.y2 = page->coords.y2 + page_h;
 801a286:	4470      	add	r0, lr
            flash_area.y1 = page->coords.y1 - page_h;
 801a288:	f8ad 400a 	strh.w	r4, [sp, #10]
            flash_area.x1 = page->coords.x1 - 3 * page_h + ext->edge_flash.state;
 801a28c:	4411      	add	r1, r2
            flash_area.x2 = page->coords.x1 + ext->edge_flash.state;
 801a28e:	f8ad 200c 	strh.w	r2, [sp, #12]
            flash_area.y2 = page->coords.y2 + page_h;
 801a292:	f8ad 000e 	strh.w	r0, [sp, #14]
            flash_area.x1 = page->coords.x1 - 3 * page_h + ext->edge_flash.state;
 801a296:	f8ad 1008 	strh.w	r1, [sp, #8]
 801a29a:	e738      	b.n	801a10e <lv_page_design+0xfa>
 801a29c:	51eb851f 	.word	0x51eb851f
 801a2a0:	20016648 	.word	0x20016648

0801a2a4 <lv_page_set_rel_action>:
{
 801a2a4:	b510      	push	{r4, lr}
 801a2a6:	460c      	mov	r4, r1
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801a2a8:	f7f1 fe36 	bl	800bf18 <lv_obj_get_ext_attr>
    ext->rel_action = rel_action;
 801a2ac:	6084      	str	r4, [r0, #8]
 801a2ae:	bd10      	pop	{r4, pc}

0801a2b0 <lv_page_set_sb_mode>:
{
 801a2b0:	b538      	push	{r3, r4, r5, lr}
 801a2b2:	460c      	mov	r4, r1
 801a2b4:	4605      	mov	r5, r0
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801a2b6:	f7f1 fe2f 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->sb.mode == sb_mode) return;
 801a2ba:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
 801a2be:	f3c1 0282 	ubfx	r2, r1, #2, #3
 801a2c2:	42a2      	cmp	r2, r4
 801a2c4:	d02c      	beq.n	801a320 <lv_page_set_sb_mode+0x70>
    if(sb_mode == LV_SB_MODE_HIDE) ext->sb.mode |= LV_SB_MODE_HIDE;                 /*Set the hidden flag*/
 801a2c6:	2c04      	cmp	r4, #4
 801a2c8:	4603      	mov	r3, r0
 801a2ca:	d01b      	beq.n	801a304 <lv_page_set_sb_mode+0x54>
    else if(sb_mode == LV_SB_MODE_UNHIDE) ext->sb.mode &= (~LV_SB_MODE_HIDE);       /*Clear the hidden flag*/
 801a2cc:	2c05      	cmp	r4, #5
 801a2ce:	d020      	beq.n	801a312 <lv_page_set_sb_mode+0x62>
        if(ext->sb.mode & LV_SB_MODE_HIDE) sb_mode |= LV_SB_MODE_HIDE;
 801a2d0:	0752      	lsls	r2, r2, #29
        ext->sb.mode = sb_mode;
 801a2d2:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
        if(ext->sb.mode & LV_SB_MODE_HIDE) sb_mode |= LV_SB_MODE_HIDE;
 801a2d6:	bf48      	it	mi
 801a2d8:	f044 0404 	orrmi.w	r4, r4, #4
        ext->sb.mode = sb_mode;
 801a2dc:	f364 0284 	bfi	r2, r4, #2, #3
 801a2e0:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    ext->sb.hor_draw = 0;
 801a2e4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    lv_page_sb_refresh(page);
 801a2e8:	4628      	mov	r0, r5
    ext->sb.ver_draw = 0;
 801a2ea:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801a2ee:	f36f 0241 	bfc	r2, #1, #1
 801a2f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    lv_page_sb_refresh(page);
 801a2f6:	f7ff fc5b 	bl	8019bb0 <lv_page_sb_refresh>
    lv_obj_invalidate(page);
 801a2fa:	4628      	mov	r0, r5
}
 801a2fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(page);
 801a300:	f7ef bcee 	b.w	8009ce0 <lv_obj_invalidate>
    if(sb_mode == LV_SB_MODE_HIDE) ext->sb.mode |= LV_SB_MODE_HIDE;                 /*Set the hidden flag*/
 801a304:	f042 0204 	orr.w	r2, r2, #4
 801a308:	f362 0184 	bfi	r1, r2, #2, #3
 801a30c:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 801a310:	e7e8      	b.n	801a2e4 <lv_page_set_sb_mode+0x34>
    else if(sb_mode == LV_SB_MODE_UNHIDE) ext->sb.mode &= (~LV_SB_MODE_HIDE);       /*Clear the hidden flag*/
 801a312:	f002 0203 	and.w	r2, r2, #3
 801a316:	f362 0184 	bfi	r1, r2, #2, #3
 801a31a:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 801a31e:	e7e1      	b.n	801a2e4 <lv_page_set_sb_mode+0x34>
 801a320:	bd38      	pop	{r3, r4, r5, pc}
 801a322:	bf00      	nop

0801a324 <lv_page_set_edge_flash>:
{
 801a324:	b510      	push	{r4, lr}
 801a326:	460c      	mov	r4, r1
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801a328:	f7f1 fdf6 	bl	800bf18 <lv_obj_get_ext_attr>
    ext->edge_flash.enabled = en ? 1 : 0;
 801a32c:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 801a330:	f364 0300 	bfi	r3, r4, #0, #1
 801a334:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 801a338:	bd10      	pop	{r4, pc}
 801a33a:	bf00      	nop

0801a33c <lv_page_set_style>:
{
 801a33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a33e:	460c      	mov	r4, r1
 801a340:	4616      	mov	r6, r2
 801a342:	4607      	mov	r7, r0
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801a344:	f7f1 fde8 	bl	800bf18 <lv_obj_get_ext_attr>
 801a348:	4605      	mov	r5, r0
    switch(type) {
 801a34a:	2c03      	cmp	r4, #3
 801a34c:	d804      	bhi.n	801a358 <lv_page_set_style+0x1c>
 801a34e:	e8df f004 	tbb	[pc, r4]
 801a352:	221c      	.short	0x221c
 801a354:	0204      	.short	0x0204
            ext->edge_flash.style = style;
 801a356:	62c6      	str	r6, [r0, #44]	; 0x2c
 801a358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            ext->sb.style = style;
 801a35a:	6106      	str	r6, [r0, #16]
            lv_area_set_height(&ext->sb.hor_area, ext->sb.style->body.padding.inner);
 801a35c:	3014      	adds	r0, #20
 801a35e:	f9b6 1024 	ldrsh.w	r1, [r6, #36]	; 0x24
 801a362:	f7f8 fb8d 	bl	8012a80 <lv_area_set_height>
            lv_area_set_width(&ext->sb.ver_area, ext->sb.style->body.padding.inner);
 801a366:	692b      	ldr	r3, [r5, #16]
 801a368:	f105 001c 	add.w	r0, r5, #28
 801a36c:	f9b3 1024 	ldrsh.w	r1, [r3, #36]	; 0x24
 801a370:	f7f8 fb80 	bl	8012a74 <lv_area_set_width>
            lv_page_sb_refresh(page);
 801a374:	4638      	mov	r0, r7
 801a376:	f7ff fc1b 	bl	8019bb0 <lv_page_sb_refresh>
            lv_obj_refresh_ext_size(page);
 801a37a:	4638      	mov	r0, r7
 801a37c:	f7f1 fc42 	bl	800bc04 <lv_obj_refresh_ext_size>
            lv_obj_invalidate(page);
 801a380:	4638      	mov	r0, r7
}
 801a382:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_obj_invalidate(page);
 801a386:	f7ef bcab 	b.w	8009ce0 <lv_obj_invalidate>
            lv_obj_set_style(page, style);
 801a38a:	4631      	mov	r1, r6
 801a38c:	4638      	mov	r0, r7
}
 801a38e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_obj_set_style(page, style);
 801a392:	f7f0 bedf 	b.w	800b154 <lv_obj_set_style>
            lv_obj_set_style(ext->scrl, style);
 801a396:	4631      	mov	r1, r6
 801a398:	6840      	ldr	r0, [r0, #4]
}
 801a39a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_obj_set_style(ext->scrl, style);
 801a39e:	f7f0 bed9 	b.w	800b154 <lv_obj_set_style>
 801a3a2:	bf00      	nop

0801a3a4 <lv_page_create>:
{
 801a3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a3a8:	4607      	mov	r7, r0
 801a3aa:	460e      	mov	r6, r1
    lv_obj_t * new_page = lv_cont_create(par, copy);
 801a3ac:	f7fd f858 	bl	8017460 <lv_cont_create>
    lv_mem_assert(new_page);
 801a3b0:	2800      	cmp	r0, #0
 801a3b2:	f000 80d5 	beq.w	801a560 <lv_page_create+0x1bc>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_page);
 801a3b6:	4dda      	ldr	r5, [pc, #872]	; (801a720 <lv_page_create+0x37c>)
 801a3b8:	4604      	mov	r4, r0
 801a3ba:	686b      	ldr	r3, [r5, #4]
 801a3bc:	2b00      	cmp	r3, #0
 801a3be:	f000 8172 	beq.w	801a6a6 <lv_page_create+0x302>
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_func(new_page);
 801a3c2:	682b      	ldr	r3, [r5, #0]
 801a3c4:	2b00      	cmp	r3, #0
 801a3c6:	f000 8175 	beq.w	801a6b4 <lv_page_create+0x310>
    lv_page_ext_t * ext = lv_obj_allocate_ext_attr(new_page, sizeof(lv_page_ext_t));
 801a3ca:	2138      	movs	r1, #56	; 0x38
 801a3cc:	4620      	mov	r0, r4
 801a3ce:	f7f1 fc11 	bl	800bbf4 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 801a3d2:	4605      	mov	r5, r0
 801a3d4:	2800      	cmp	r0, #0
 801a3d6:	f000 80c4 	beq.w	801a562 <lv_page_create+0x1be>
    ext->sb.hor_draw = 0;
 801a3da:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
    ext->scrl = NULL;
 801a3de:	2300      	movs	r3, #0
    ext->edge_flash.enabled = 0;
 801a3e0:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
    ext->sb.mode = LV_SB_MODE_AUTO;
 801a3e4:	f04f 0e03 	mov.w	lr, #3
    ext->arrow_scroll = 0;
 801a3e8:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
    ext->sb.mode = LV_SB_MODE_AUTO;
 801a3ec:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
    ext->edge_flash.right_ip = 0;
 801a3f0:	f001 01e8 	and.w	r1, r1, #232	; 0xe8
    ext->scrl = NULL;
 801a3f4:	606b      	str	r3, [r5, #4]
    ext->sb.mode = LV_SB_MODE_AUTO;
 801a3f6:	f36e 0084 	bfi	r0, lr, #2, #3
    ext->scroll_prop_ip = 0;
 801a3fa:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    ext->edge_flash.right_ip = 0;
 801a3fe:	f363 01c3 	bfi	r1, r3, #3, #1
    ext->pr_action = NULL;
 801a402:	60eb      	str	r3, [r5, #12]
    ext->scroll_prop_ip = 0;
 801a404:	f363 0282 	bfi	r2, r3, #2, #1
    ext->sb.mode = LV_SB_MODE_AUTO;
 801a408:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    ext->edge_flash.right_ip = 0;
 801a40c:	f885 1030 	strb.w	r1, [r5, #48]	; 0x30
    ext->sb.style = &lv_style_pretty;
 801a410:	48c4      	ldr	r0, [pc, #784]	; (801a724 <lv_page_create+0x380>)
    ext->edge_flash.style = &lv_style_plain_color;
 801a412:	49c5      	ldr	r1, [pc, #788]	; (801a728 <lv_page_create+0x384>)
    ext->rel_action = NULL;
 801a414:	60ab      	str	r3, [r5, #8]
    ext->edge_flash.state = 0;
 801a416:	852b      	strh	r3, [r5, #40]	; 0x28
    ext->scroll_prop_ip = 0;
 801a418:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    ext->sb.style = &lv_style_pretty;
 801a41c:	6128      	str	r0, [r5, #16]
    ext->edge_flash.style = &lv_style_plain_color;
 801a41e:	62e9      	str	r1, [r5, #44]	; 0x2c
    if(copy == NULL) {
 801a420:	2e00      	cmp	r6, #0
 801a422:	f000 80a6 	beq.w	801a572 <lv_page_create+0x1ce>
        lv_page_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801a426:	4630      	mov	r0, r6
 801a428:	f7f1 fd76 	bl	800bf18 <lv_obj_get_ext_attr>
 801a42c:	4607      	mov	r7, r0
        ext->scrl = lv_cont_create(new_page, copy_ext->scrl);
 801a42e:	4620      	mov	r0, r4
 801a430:	6879      	ldr	r1, [r7, #4]
 801a432:	f7fd f815 	bl	8017460 <lv_cont_create>
        lv_obj_set_signal_func(ext->scrl, lv_page_scrollable_signal);
 801a436:	49bd      	ldr	r1, [pc, #756]	; (801a72c <lv_page_create+0x388>)
        ext->scrl = lv_cont_create(new_page, copy_ext->scrl);
 801a438:	6068      	str	r0, [r5, #4]
        lv_obj_set_signal_func(ext->scrl, lv_page_scrollable_signal);
 801a43a:	f7f1 fbd7 	bl	800bbec <lv_obj_set_signal_func>
        lv_page_set_pr_action(new_page, copy_ext->pr_action);
 801a43e:	68fd      	ldr	r5, [r7, #12]
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801a440:	4620      	mov	r0, r4
 801a442:	f7f1 fd69 	bl	800bf18 <lv_obj_get_ext_attr>
        lv_page_set_rel_action(new_page, copy_ext->rel_action);
 801a446:	f8d7 8008 	ldr.w	r8, [r7, #8]
    ext->pr_action = pr_action;
 801a44a:	60c5      	str	r5, [r0, #12]
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801a44c:	4620      	mov	r0, r4
 801a44e:	f7f1 fd63 	bl	800bf18 <lv_obj_get_ext_attr>
        lv_page_set_sb_mode(new_page, copy_ext->sb.mode);
 801a452:	f897 5024 	ldrb.w	r5, [r7, #36]	; 0x24
    ext->rel_action = rel_action;
 801a456:	f8c0 8008 	str.w	r8, [r0, #8]
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801a45a:	4620      	mov	r0, r4
 801a45c:	f7f1 fd5c 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->sb.mode == sb_mode) return;
 801a460:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
        lv_page_set_sb_mode(new_page, copy_ext->sb.mode);
 801a464:	f3c5 0582 	ubfx	r5, r5, #2, #3
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801a468:	4601      	mov	r1, r0
    if(ext->sb.mode == sb_mode) return;
 801a46a:	f3c3 0282 	ubfx	r2, r3, #2, #3
 801a46e:	4295      	cmp	r5, r2
 801a470:	d01c      	beq.n	801a4ac <lv_page_create+0x108>
    if(sb_mode == LV_SB_MODE_HIDE) ext->sb.mode |= LV_SB_MODE_HIDE;                 /*Set the hidden flag*/
 801a472:	2d04      	cmp	r5, #4
 801a474:	d076      	beq.n	801a564 <lv_page_create+0x1c0>
    else if(sb_mode == LV_SB_MODE_UNHIDE) ext->sb.mode &= (~LV_SB_MODE_HIDE);       /*Clear the hidden flag*/
 801a476:	2d05      	cmp	r5, #5
 801a478:	f000 80be 	beq.w	801a5f8 <lv_page_create+0x254>
        if(ext->sb.mode & LV_SB_MODE_HIDE) sb_mode |= LV_SB_MODE_HIDE;
 801a47c:	0753      	lsls	r3, r2, #29
        ext->sb.mode = sb_mode;
 801a47e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
        if(ext->sb.mode & LV_SB_MODE_HIDE) sb_mode |= LV_SB_MODE_HIDE;
 801a482:	bf48      	it	mi
 801a484:	f045 0504 	orrmi.w	r5, r5, #4
        ext->sb.mode = sb_mode;
 801a488:	f365 0384 	bfi	r3, r5, #2, #3
 801a48c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    ext->sb.hor_draw = 0;
 801a490:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
    lv_page_sb_refresh(page);
 801a494:	4620      	mov	r0, r4
    ext->sb.ver_draw = 0;
 801a496:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 801a49a:	f36f 0341 	bfc	r3, #1, #1
 801a49e:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
    lv_page_sb_refresh(page);
 801a4a2:	f7ff fb85 	bl	8019bb0 <lv_page_sb_refresh>
    lv_obj_invalidate(page);
 801a4a6:	4620      	mov	r0, r4
 801a4a8:	f7ef fc1a 	bl	8009ce0 <lv_obj_invalidate>
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801a4ac:	4620      	mov	r0, r4
        lv_page_set_arrow_scroll(new_page, copy_ext->arrow_scroll);
 801a4ae:	f897 5034 	ldrb.w	r5, [r7, #52]	; 0x34
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801a4b2:	f7f1 fd31 	bl	800bf18 <lv_obj_get_ext_attr>
 801a4b6:	4603      	mov	r3, r0
        lv_page_set_arrow_scroll(new_page, copy_ext->arrow_scroll);
 801a4b8:	f005 0501 	and.w	r5, r5, #1
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801a4bc:	4630      	mov	r0, r6
    ext->arrow_scroll = en ? 1 : 0;
 801a4be:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801a4c2:	f365 0200 	bfi	r2, r5, #0, #1
 801a4c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801a4ca:	f7f1 fd25 	bl	800bf18 <lv_obj_get_ext_attr>
            style = lv_obj_get_style(page);
 801a4ce:	4630      	mov	r0, r6
 801a4d0:	f7f1 fca4 	bl	800be1c <lv_obj_get_style>
 801a4d4:	4605      	mov	r5, r0
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801a4d6:	4620      	mov	r0, r4
 801a4d8:	f7f1 fd1e 	bl	800bf18 <lv_obj_get_ext_attr>
            lv_obj_set_style(page, style);
 801a4dc:	4629      	mov	r1, r5
 801a4de:	4620      	mov	r0, r4
 801a4e0:	f7f0 fe38 	bl	800b154 <lv_obj_set_style>
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801a4e4:	4630      	mov	r0, r6
 801a4e6:	f7f1 fd17 	bl	800bf18 <lv_obj_get_ext_attr>
            style = lv_obj_get_style(ext->scrl);
 801a4ea:	6840      	ldr	r0, [r0, #4]
 801a4ec:	f7f1 fc96 	bl	800be1c <lv_obj_get_style>
 801a4f0:	4605      	mov	r5, r0
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801a4f2:	4620      	mov	r0, r4
 801a4f4:	f7f1 fd10 	bl	800bf18 <lv_obj_get_ext_attr>
            lv_obj_set_style(ext->scrl, style);
 801a4f8:	4629      	mov	r1, r5
 801a4fa:	6840      	ldr	r0, [r0, #4]
 801a4fc:	f7f0 fe2a 	bl	800b154 <lv_obj_set_style>
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801a500:	4630      	mov	r0, r6
 801a502:	f7f1 fd09 	bl	800bf18 <lv_obj_get_ext_attr>
            style = ext->sb.style;
 801a506:	6906      	ldr	r6, [r0, #16]
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801a508:	4620      	mov	r0, r4
 801a50a:	f7f1 fd05 	bl	800bf18 <lv_obj_get_ext_attr>
 801a50e:	4605      	mov	r5, r0
            lv_area_set_height(&ext->sb.hor_area, ext->sb.style->body.padding.inner);
 801a510:	f9b6 1024 	ldrsh.w	r1, [r6, #36]	; 0x24
 801a514:	3014      	adds	r0, #20
            ext->sb.style = style;
 801a516:	f840 6c04 	str.w	r6, [r0, #-4]
            lv_area_set_height(&ext->sb.hor_area, ext->sb.style->body.padding.inner);
 801a51a:	f7f8 fab1 	bl	8012a80 <lv_area_set_height>
            lv_area_set_width(&ext->sb.ver_area, ext->sb.style->body.padding.inner);
 801a51e:	692b      	ldr	r3, [r5, #16]
 801a520:	f105 001c 	add.w	r0, r5, #28
 801a524:	f9b3 1024 	ldrsh.w	r1, [r3, #36]	; 0x24
 801a528:	f7f8 faa4 	bl	8012a74 <lv_area_set_width>
            lv_page_sb_refresh(page);
 801a52c:	4620      	mov	r0, r4
 801a52e:	f7ff fb3f 	bl	8019bb0 <lv_page_sb_refresh>
            lv_obj_refresh_ext_size(page);
 801a532:	4620      	mov	r0, r4
 801a534:	f7f1 fb66 	bl	800bc04 <lv_obj_refresh_ext_size>
            lv_obj_invalidate(page);
 801a538:	4620      	mov	r0, r4
 801a53a:	f7ef fbd1 	bl	8009ce0 <lv_obj_invalidate>
        lv_obj_set_signal_func(new_page, lv_page_signal);
 801a53e:	4620      	mov	r0, r4
 801a540:	497b      	ldr	r1, [pc, #492]	; (801a730 <lv_page_create+0x38c>)
 801a542:	f7f1 fb53 	bl	800bbec <lv_obj_set_signal_func>
        lv_obj_set_design_func(new_page, lv_page_design);
 801a546:	497b      	ldr	r1, [pc, #492]	; (801a734 <lv_page_create+0x390>)
 801a548:	4620      	mov	r0, r4
 801a54a:	f7f1 fb51 	bl	800bbf0 <lv_obj_set_design_func>
        lv_obj_refresh_style(new_page);
 801a54e:	4620      	mov	r0, r4
 801a550:	f7f1 fa0e 	bl	800b970 <lv_obj_refresh_style>
    lv_page_sb_refresh(new_page);
 801a554:	4620      	mov	r0, r4
 801a556:	f7ff fb2b 	bl	8019bb0 <lv_page_sb_refresh>
}
 801a55a:	4620      	mov	r0, r4
 801a55c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a560:	e7fe      	b.n	801a560 <lv_page_create+0x1bc>
 801a562:	e7fe      	b.n	801a562 <lv_page_create+0x1be>
    if(sb_mode == LV_SB_MODE_HIDE) ext->sb.mode |= LV_SB_MODE_HIDE;                 /*Set the hidden flag*/
 801a564:	f042 0204 	orr.w	r2, r2, #4
 801a568:	f362 0384 	bfi	r3, r2, #2, #3
 801a56c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 801a570:	e78e      	b.n	801a490 <lv_page_create+0xec>
        ext->scrl = lv_cont_create(new_page, NULL);
 801a572:	4631      	mov	r1, r6
 801a574:	4620      	mov	r0, r4
 801a576:	f7fc ff73 	bl	8017460 <lv_cont_create>
        lv_obj_set_signal_func(ext->scrl, lv_page_scrollable_signal);
 801a57a:	496c      	ldr	r1, [pc, #432]	; (801a72c <lv_page_create+0x388>)
        ext->scrl = lv_cont_create(new_page, NULL);
 801a57c:	6068      	str	r0, [r5, #4]
        lv_obj_set_signal_func(ext->scrl, lv_page_scrollable_signal);
 801a57e:	f7f1 fb35 	bl	800bbec <lv_obj_set_signal_func>
        lv_obj_set_design_func(ext->scrl, lv_scrl_design);
 801a582:	6868      	ldr	r0, [r5, #4]
 801a584:	496c      	ldr	r1, [pc, #432]	; (801a738 <lv_page_create+0x394>)
 801a586:	f7f1 fb33 	bl	800bbf0 <lv_obj_set_design_func>
        lv_obj_set_drag(ext->scrl, true);
 801a58a:	6868      	ldr	r0, [r5, #4]
 801a58c:	2101      	movs	r1, #1
 801a58e:	f7f1 fb01 	bl	800bb94 <lv_obj_set_drag>
        lv_obj_set_drag_throw(ext->scrl, true);
 801a592:	6868      	ldr	r0, [r5, #4]
 801a594:	2101      	movs	r1, #1
 801a596:	f7f1 fb0b 	bl	800bbb0 <lv_obj_set_drag_throw>
        lv_obj_set_protect(ext->scrl, LV_PROTECT_PARENT | LV_PROTECT_PRESS_LOST);
 801a59a:	6868      	ldr	r0, [r5, #4]
 801a59c:	2112      	movs	r1, #18
 801a59e:	f7f1 fb17 	bl	800bbd0 <lv_obj_set_protect>
        lv_cont_set_fit(ext->scrl, false, true);
 801a5a2:	2201      	movs	r2, #1
 801a5a4:	6868      	ldr	r0, [r5, #4]
 801a5a6:	4631      	mov	r1, r6
 801a5a8:	f7fc ffce 	bl	8017548 <lv_cont_set_fit>
        lv_obj_set_signal_func(new_page, lv_page_signal);
 801a5ac:	4960      	ldr	r1, [pc, #384]	; (801a730 <lv_page_create+0x38c>)
 801a5ae:	4620      	mov	r0, r4
 801a5b0:	f7f1 fb1c 	bl	800bbec <lv_obj_set_signal_func>
        lv_obj_set_design_func(new_page, lv_page_design);
 801a5b4:	495f      	ldr	r1, [pc, #380]	; (801a734 <lv_page_create+0x390>)
 801a5b6:	4620      	mov	r0, r4
 801a5b8:	f7f1 fb1a 	bl	800bbf0 <lv_obj_set_design_func>
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801a5bc:	4620      	mov	r0, r4
        lv_page_set_sb_mode(new_page, ext->sb.mode);
 801a5be:	f895 5024 	ldrb.w	r5, [r5, #36]	; 0x24
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801a5c2:	f7f1 fca9 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->sb.mode == sb_mode) return;
 801a5c6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801a5ca:	4601      	mov	r1, r0
        lv_page_set_sb_mode(new_page, ext->sb.mode);
 801a5cc:	f3c5 0582 	ubfx	r5, r5, #2, #3
    if(ext->sb.mode == sb_mode) return;
 801a5d0:	f3c3 0282 	ubfx	r2, r3, #2, #3
 801a5d4:	4295      	cmp	r5, r2
 801a5d6:	d02a      	beq.n	801a62e <lv_page_create+0x28a>
    if(sb_mode == LV_SB_MODE_HIDE) ext->sb.mode |= LV_SB_MODE_HIDE;                 /*Set the hidden flag*/
 801a5d8:	2d04      	cmp	r5, #4
 801a5da:	d014      	beq.n	801a606 <lv_page_create+0x262>
    else if(sb_mode == LV_SB_MODE_UNHIDE) ext->sb.mode &= (~LV_SB_MODE_HIDE);       /*Clear the hidden flag*/
 801a5dc:	2d05      	cmp	r5, #5
 801a5de:	f000 8097 	beq.w	801a710 <lv_page_create+0x36c>
        if(ext->sb.mode & LV_SB_MODE_HIDE) sb_mode |= LV_SB_MODE_HIDE;
 801a5e2:	0752      	lsls	r2, r2, #29
        ext->sb.mode = sb_mode;
 801a5e4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
        if(ext->sb.mode & LV_SB_MODE_HIDE) sb_mode |= LV_SB_MODE_HIDE;
 801a5e8:	bf48      	it	mi
 801a5ea:	f045 0504 	orrmi.w	r5, r5, #4
        ext->sb.mode = sb_mode;
 801a5ee:	f365 0384 	bfi	r3, r5, #2, #3
 801a5f2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 801a5f6:	e00c      	b.n	801a612 <lv_page_create+0x26e>
    else if(sb_mode == LV_SB_MODE_UNHIDE) ext->sb.mode &= (~LV_SB_MODE_HIDE);       /*Clear the hidden flag*/
 801a5f8:	f002 0203 	and.w	r2, r2, #3
 801a5fc:	f362 0384 	bfi	r3, r2, #2, #3
 801a600:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 801a604:	e744      	b.n	801a490 <lv_page_create+0xec>
    if(sb_mode == LV_SB_MODE_HIDE) ext->sb.mode |= LV_SB_MODE_HIDE;                 /*Set the hidden flag*/
 801a606:	f042 0204 	orr.w	r2, r2, #4
 801a60a:	f362 0384 	bfi	r3, r2, #2, #3
 801a60e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    ext->sb.hor_draw = 0;
 801a612:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
    lv_page_sb_refresh(page);
 801a616:	4620      	mov	r0, r4
    ext->sb.ver_draw = 0;
 801a618:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 801a61c:	f36f 0341 	bfc	r3, #1, #1
 801a620:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
    lv_page_sb_refresh(page);
 801a624:	f7ff fac4 	bl	8019bb0 <lv_page_sb_refresh>
    lv_obj_invalidate(page);
 801a628:	4620      	mov	r0, r4
 801a62a:	f7ef fb59 	bl	8009ce0 <lv_obj_invalidate>
        lv_theme_t * th = lv_theme_get_current();
 801a62e:	f003 f97b 	bl	801d928 <lv_theme_get_current>
        if(th) {
 801a632:	4605      	mov	r5, r0
 801a634:	2800      	cmp	r0, #0
 801a636:	d052      	beq.n	801a6de <lv_page_create+0x33a>
            if(par == NULL) { /*Different styles if it is screen*/
 801a638:	2f00      	cmp	r7, #0
 801a63a:	d040      	beq.n	801a6be <lv_page_create+0x31a>
                lv_page_set_style(new_page, LV_PAGE_STYLE_BG, th->page.bg);
 801a63c:	f8d0 6100 	ldr.w	r6, [r0, #256]	; 0x100
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801a640:	4620      	mov	r0, r4
 801a642:	f7f1 fc69 	bl	800bf18 <lv_obj_get_ext_attr>
            lv_obj_set_style(page, style);
 801a646:	4620      	mov	r0, r4
 801a648:	4631      	mov	r1, r6
 801a64a:	f7f0 fd83 	bl	800b154 <lv_obj_set_style>
                lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, th->page.scrl);
 801a64e:	f8d5 6104 	ldr.w	r6, [r5, #260]	; 0x104
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801a652:	4620      	mov	r0, r4
 801a654:	f7f1 fc60 	bl	800bf18 <lv_obj_get_ext_attr>
            lv_obj_set_style(ext->scrl, style);
 801a658:	4631      	mov	r1, r6
 801a65a:	6840      	ldr	r0, [r0, #4]
 801a65c:	f7f0 fd7a 	bl	800b154 <lv_obj_set_style>
            lv_page_set_style(new_page, LV_PAGE_STYLE_SB, th->page.sb);
 801a660:	f8d5 6108 	ldr.w	r6, [r5, #264]	; 0x108
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801a664:	4620      	mov	r0, r4
 801a666:	f7f1 fc57 	bl	800bf18 <lv_obj_get_ext_attr>
 801a66a:	4605      	mov	r5, r0
            lv_area_set_height(&ext->sb.hor_area, ext->sb.style->body.padding.inner);
 801a66c:	f9b6 1024 	ldrsh.w	r1, [r6, #36]	; 0x24
 801a670:	3014      	adds	r0, #20
            ext->sb.style = style;
 801a672:	f840 6c04 	str.w	r6, [r0, #-4]
            lv_area_set_height(&ext->sb.hor_area, ext->sb.style->body.padding.inner);
 801a676:	f7f8 fa03 	bl	8012a80 <lv_area_set_height>
            lv_area_set_width(&ext->sb.ver_area, ext->sb.style->body.padding.inner);
 801a67a:	692b      	ldr	r3, [r5, #16]
 801a67c:	f105 001c 	add.w	r0, r5, #28
 801a680:	f9b3 1024 	ldrsh.w	r1, [r3, #36]	; 0x24
 801a684:	f7f8 f9f6 	bl	8012a74 <lv_area_set_width>
            lv_page_sb_refresh(page);
 801a688:	4620      	mov	r0, r4
 801a68a:	f7ff fa91 	bl	8019bb0 <lv_page_sb_refresh>
            lv_obj_refresh_ext_size(page);
 801a68e:	4620      	mov	r0, r4
 801a690:	f7f1 fab8 	bl	800bc04 <lv_obj_refresh_ext_size>
            lv_obj_invalidate(page);
 801a694:	4620      	mov	r0, r4
 801a696:	f7ef fb23 	bl	8009ce0 <lv_obj_invalidate>
    lv_page_sb_refresh(new_page);
 801a69a:	4620      	mov	r0, r4
 801a69c:	f7ff fa88 	bl	8019bb0 <lv_page_sb_refresh>
}
 801a6a0:	4620      	mov	r0, r4
 801a6a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_page);
 801a6a6:	f7f1 fc33 	bl	800bf10 <lv_obj_get_signal_func>
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_func(new_page);
 801a6aa:	682b      	ldr	r3, [r5, #0]
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_page);
 801a6ac:	6068      	str	r0, [r5, #4]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_func(new_page);
 801a6ae:	2b00      	cmp	r3, #0
 801a6b0:	f47f ae8b 	bne.w	801a3ca <lv_page_create+0x26>
 801a6b4:	4620      	mov	r0, r4
 801a6b6:	f7f1 fc2d 	bl	800bf14 <lv_obj_get_design_func>
 801a6ba:	6028      	str	r0, [r5, #0]
 801a6bc:	e685      	b.n	801a3ca <lv_page_create+0x26>
                lv_page_set_style(new_page, LV_PAGE_STYLE_BG, th->bg);
 801a6be:	6806      	ldr	r6, [r0, #0]
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801a6c0:	4620      	mov	r0, r4
 801a6c2:	f7f1 fc29 	bl	800bf18 <lv_obj_get_ext_attr>
            lv_obj_set_style(page, style);
 801a6c6:	4620      	mov	r0, r4
 801a6c8:	4631      	mov	r1, r6
 801a6ca:	f7f0 fd43 	bl	800b154 <lv_obj_set_style>
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801a6ce:	4620      	mov	r0, r4
 801a6d0:	f7f1 fc22 	bl	800bf18 <lv_obj_get_ext_attr>
            lv_obj_set_style(ext->scrl, style);
 801a6d4:	4919      	ldr	r1, [pc, #100]	; (801a73c <lv_page_create+0x398>)
 801a6d6:	6840      	ldr	r0, [r0, #4]
 801a6d8:	f7f0 fd3c 	bl	800b154 <lv_obj_set_style>
 801a6dc:	e7c0      	b.n	801a660 <lv_page_create+0x2bc>
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801a6de:	4620      	mov	r0, r4
 801a6e0:	f7f1 fc1a 	bl	800bf18 <lv_obj_get_ext_attr>
            lv_obj_set_style(page, style);
 801a6e4:	4916      	ldr	r1, [pc, #88]	; (801a740 <lv_page_create+0x39c>)
 801a6e6:	4620      	mov	r0, r4
 801a6e8:	f7f0 fd34 	bl	800b154 <lv_obj_set_style>
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801a6ec:	4620      	mov	r0, r4
 801a6ee:	f7f1 fc13 	bl	800bf18 <lv_obj_get_ext_attr>
            lv_obj_set_style(ext->scrl, style);
 801a6f2:	490c      	ldr	r1, [pc, #48]	; (801a724 <lv_page_create+0x380>)
 801a6f4:	6840      	ldr	r0, [r0, #4]
 801a6f6:	f7f0 fd2d 	bl	800b154 <lv_obj_set_style>
            lv_page_set_style(new_page, LV_PAGE_STYLE_SB, &lv_style_pretty_color);
 801a6fa:	4a11      	ldr	r2, [pc, #68]	; (801a740 <lv_page_create+0x39c>)
 801a6fc:	2102      	movs	r1, #2
 801a6fe:	4620      	mov	r0, r4
 801a700:	f7ff fe1c 	bl	801a33c <lv_page_set_style>
    lv_page_sb_refresh(new_page);
 801a704:	4620      	mov	r0, r4
 801a706:	f7ff fa53 	bl	8019bb0 <lv_page_sb_refresh>
}
 801a70a:	4620      	mov	r0, r4
 801a70c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(sb_mode == LV_SB_MODE_UNHIDE) ext->sb.mode &= (~LV_SB_MODE_HIDE);       /*Clear the hidden flag*/
 801a710:	f002 0203 	and.w	r2, r2, #3
 801a714:	f362 0384 	bfi	r3, r2, #2, #3
 801a718:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 801a71c:	e779      	b.n	801a612 <lv_page_create+0x26e>
 801a71e:	bf00      	nop
 801a720:	20016648 	.word	0x20016648
 801a724:	2001921c 	.word	0x2001921c
 801a728:	2001945c 	.word	0x2001945c
 801a72c:	0801ad09 	.word	0x0801ad09
 801a730:	0801a9a1 	.word	0x0801a9a1
 801a734:	0801a015 	.word	0x0801a015
 801a738:	08019f89 	.word	0x08019f89
 801a73c:	20019144 	.word	0x20019144
 801a740:	200190fc 	.word	0x200190fc

0801a744 <lv_page_get_scrl>:
{
 801a744:	b508      	push	{r3, lr}
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801a746:	f7f1 fbe7 	bl	800bf18 <lv_obj_get_ext_attr>
}
 801a74a:	6840      	ldr	r0, [r0, #4]
 801a74c:	bd08      	pop	{r3, pc}
 801a74e:	bf00      	nop

0801a750 <lv_page_get_edge_flash>:
{
 801a750:	b508      	push	{r3, lr}
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801a752:	f7f1 fbe1 	bl	800bf18 <lv_obj_get_ext_attr>
    return ext->edge_flash.enabled == 0 ? false : true;
 801a756:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
}
 801a75a:	f000 0001 	and.w	r0, r0, #1
 801a75e:	bd08      	pop	{r3, pc}

0801a760 <lv_page_get_style>:
{
 801a760:	b538      	push	{r3, r4, r5, lr}
 801a762:	460c      	mov	r4, r1
 801a764:	4605      	mov	r5, r0
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801a766:	f7f1 fbd7 	bl	800bf18 <lv_obj_get_ext_attr>
    switch(type) {
 801a76a:	2c03      	cmp	r4, #3
 801a76c:	d811      	bhi.n	801a792 <lv_page_get_style+0x32>
 801a76e:	e8df f004 	tbb	[pc, r4]
 801a772:	060b      	.short	0x060b
 801a774:	0204      	.short	0x0204
            style = ext->edge_flash.style;
 801a776:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
            break;
 801a778:	bd38      	pop	{r3, r4, r5, pc}
            style = ext->sb.style;
 801a77a:	6900      	ldr	r0, [r0, #16]
            break;
 801a77c:	bd38      	pop	{r3, r4, r5, pc}
            style = lv_obj_get_style(ext->scrl);
 801a77e:	6840      	ldr	r0, [r0, #4]
}
 801a780:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            style = lv_obj_get_style(ext->scrl);
 801a784:	f7f1 bb4a 	b.w	800be1c <lv_obj_get_style>
            style = lv_obj_get_style(page);
 801a788:	4628      	mov	r0, r5
}
 801a78a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            style = lv_obj_get_style(page);
 801a78e:	f7f1 bb45 	b.w	800be1c <lv_obj_get_style>
            style = NULL;
 801a792:	2000      	movs	r0, #0
}
 801a794:	bd38      	pop	{r3, r4, r5, pc}
 801a796:	bf00      	nop

0801a798 <lv_page_glue_obj>:
{
 801a798:	b538      	push	{r3, r4, r5, lr}
 801a79a:	4604      	mov	r4, r0
 801a79c:	460d      	mov	r5, r1
    lv_obj_set_drag_parent(obj, glue);
 801a79e:	f7f1 fa0f 	bl	800bbc0 <lv_obj_set_drag_parent>
    lv_obj_set_drag(obj, glue);
 801a7a2:	4629      	mov	r1, r5
 801a7a4:	4620      	mov	r0, r4
}
 801a7a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_set_drag(obj, glue);
 801a7aa:	f7f1 b9f3 	b.w	800bb94 <lv_obj_set_drag>
 801a7ae:	bf00      	nop

0801a7b0 <lv_page_focus>:
{
 801a7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7b4:	4682      	mov	sl, r0
 801a7b6:	b08b      	sub	sp, #44	; 0x2c
 801a7b8:	4616      	mov	r6, r2
 801a7ba:	460c      	mov	r4, r1
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801a7bc:	f7f1 fbac 	bl	800bf18 <lv_obj_get_ext_attr>
    lv_anim_del(page, (lv_anim_fp_t)lv_obj_set_y);
 801a7c0:	4946      	ldr	r1, [pc, #280]	; (801a8dc <lv_page_focus+0x12c>)
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801a7c2:	4605      	mov	r5, r0
    lv_anim_del(page, (lv_anim_fp_t)lv_obj_set_y);
 801a7c4:	4650      	mov	r0, sl
 801a7c6:	f7f8 f8d1 	bl	801296c <lv_anim_del>
    lv_anim_del(page, (lv_anim_fp_t)lv_obj_set_pos);
 801a7ca:	4945      	ldr	r1, [pc, #276]	; (801a8e0 <lv_page_focus+0x130>)
 801a7cc:	4650      	mov	r0, sl
 801a7ce:	f7f8 f8cd 	bl	801296c <lv_anim_del>
    lv_anim_del(ext->scrl, (lv_anim_fp_t)lv_obj_set_y);
 801a7d2:	4942      	ldr	r1, [pc, #264]	; (801a8dc <lv_page_focus+0x12c>)
 801a7d4:	6868      	ldr	r0, [r5, #4]
 801a7d6:	f7f8 f8c9 	bl	801296c <lv_anim_del>
    lv_anim_del(ext->scrl, (lv_anim_fp_t)lv_obj_set_pos);
 801a7da:	4941      	ldr	r1, [pc, #260]	; (801a8e0 <lv_page_focus+0x130>)
 801a7dc:	6868      	ldr	r0, [r5, #4]
 801a7de:	f7f8 f8c5 	bl	801296c <lv_anim_del>
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801a7e2:	4650      	mov	r0, sl
 801a7e4:	f7f1 fb98 	bl	800bf18 <lv_obj_get_ext_attr>
            style = lv_obj_get_style(page);
 801a7e8:	4650      	mov	r0, sl
 801a7ea:	f7f1 fb17 	bl	800be1c <lv_obj_get_style>
 801a7ee:	4680      	mov	r8, r0
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801a7f0:	4650      	mov	r0, sl
 801a7f2:	f7f1 fb91 	bl	800bf18 <lv_obj_get_ext_attr>
            style = lv_obj_get_style(ext->scrl);
 801a7f6:	6840      	ldr	r0, [r0, #4]
 801a7f8:	f7f1 fb10 	bl	800be1c <lv_obj_get_style>
    lv_coord_t obj_y = obj->coords.y1 - ext->scrl->coords.y1;
 801a7fc:	686b      	ldr	r3, [r5, #4]
            style = lv_obj_get_style(ext->scrl);
 801a7fe:	4681      	mov	r9, r0
    lv_coord_t obj_h = lv_obj_get_height(obj);
 801a800:	4620      	mov	r0, r4
    lv_coord_t obj_y = obj->coords.y1 - ext->scrl->coords.y1;
 801a802:	8a5f      	ldrh	r7, [r3, #18]
 801a804:	8a64      	ldrh	r4, [r4, #18]
    lv_coord_t obj_h = lv_obj_get_height(obj);
 801a806:	f7f1 fb03 	bl	800be10 <lv_obj_get_height>
 801a80a:	4683      	mov	fp, r0
    lv_coord_t scrlable_y = lv_obj_get_y(ext->scrl);
 801a80c:	6868      	ldr	r0, [r5, #4]
    lv_coord_t obj_y = obj->coords.y1 - ext->scrl->coords.y1;
 801a80e:	1be4      	subs	r4, r4, r7
    lv_coord_t scrlable_y = lv_obj_get_y(ext->scrl);
 801a810:	f7f1 faf2 	bl	800bdf8 <lv_obj_get_y>
    lv_coord_t obj_y = obj->coords.y1 - ext->scrl->coords.y1;
 801a814:	b2a7      	uxth	r7, r4
    lv_coord_t scrlable_y = lv_obj_get_y(ext->scrl);
 801a816:	4604      	mov	r4, r0
    lv_coord_t page_h = lv_obj_get_height(page);
 801a818:	4650      	mov	r0, sl
 801a81a:	f7f1 faf9 	bl	800be10 <lv_obj_get_height>
    lv_coord_t top_err = -(scrlable_y + obj_y);
 801a81e:	193b      	adds	r3, r7, r4
    if((obj_h <= page_h && top_err > 0) ||
 801a820:	4583      	cmp	fp, r0
    lv_coord_t top_err = -(scrlable_y + obj_y);
 801a822:	b29b      	uxth	r3, r3
    if((obj_h <= page_h && top_err > 0) ||
 801a824:	bfcc      	ite	gt
 801a826:	2100      	movgt	r1, #0
 801a828:	2101      	movle	r1, #1
    lv_coord_t top_err = -(scrlable_y + obj_y);
 801a82a:	425a      	negs	r2, r3
 801a82c:	b212      	sxth	r2, r2
    if((obj_h <= page_h && top_err > 0) ||
 801a82e:	2a00      	cmp	r2, #0
 801a830:	dd29      	ble.n	801a886 <lv_page_focus+0xd6>
 801a832:	b341      	cbz	r1, 801a886 <lv_page_focus+0xd6>
        scrlable_y = -(obj_y - style_scrl->body.padding.ver - style->body.padding.ver);
 801a834:	f8b9 1020 	ldrh.w	r1, [r9, #32]
        scrlable_y += style_scrl->body.padding.ver;
 801a838:	f8b8 4020 	ldrh.w	r4, [r8, #32]
 801a83c:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801a840:	1be4      	subs	r4, r4, r7
 801a842:	b224      	sxth	r4, r4
    if(anim_time == 0) {
 801a844:	2e00      	cmp	r6, #0
 801a846:	d03d      	beq.n	801a8c4 <lv_page_focus+0x114>
        a.act_time = 0;
 801a848:	2700      	movs	r7, #0
        a.start = lv_obj_get_y(ext->scrl);
 801a84a:	6868      	ldr	r0, [r5, #4]
        a.act_time = 0;
 801a84c:	f8ad 701e 	strh.w	r7, [sp, #30]
        a.start = lv_obj_get_y(ext->scrl);
 801a850:	f7f1 fad2 	bl	800bdf8 <lv_obj_get_y>
        a.playback = 0;
 801a854:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
        a.var = ext->scrl;
 801a858:	6869      	ldr	r1, [r5, #4]
        a.repeat = 0;
 801a85a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
        a.path = lv_anim_path_linear;
 801a85e:	4d21      	ldr	r5, [pc, #132]	; (801a8e4 <lv_page_focus+0x134>)
        a.fp = (lv_anim_fp_t) lv_obj_set_y;
 801a860:	4a1e      	ldr	r2, [pc, #120]	; (801a8dc <lv_page_focus+0x12c>)
        a.repeat = 0;
 801a862:	f367 0341 	bfi	r3, r7, #1, #1
        a.start = lv_obj_get_y(ext->scrl);
 801a866:	9005      	str	r0, [sp, #20]
        lv_anim_create(&a);
 801a868:	a801      	add	r0, sp, #4
        a.end_cb = NULL;
 801a86a:	9703      	str	r7, [sp, #12]
        a.var = ext->scrl;
 801a86c:	9101      	str	r1, [sp, #4]
        a.end = scrlable_y;
 801a86e:	9406      	str	r4, [sp, #24]
        a.time = anim_time;
 801a870:	f8ad 601c 	strh.w	r6, [sp, #28]
        a.repeat = 0;
 801a874:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        a.path = lv_anim_path_linear;
 801a878:	9504      	str	r5, [sp, #16]
        a.fp = (lv_anim_fp_t) lv_obj_set_y;
 801a87a:	9202      	str	r2, [sp, #8]
        lv_anim_create(&a);
 801a87c:	f7f8 f814 	bl	80128a8 <lv_anim_create>
}
 801a880:	b00b      	add	sp, #44	; 0x2c
 801a882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            (obj_h > page_h && top_err < bot_err)) {
 801a886:	4583      	cmp	fp, r0
    lv_coord_t bot_err = scrlable_y + obj_y + obj_h - page_h;
 801a888:	fa1f fe8b 	uxth.w	lr, fp
 801a88c:	b280      	uxth	r0, r0
            (obj_h > page_h && top_err < bot_err)) {
 801a88e:	bfd4      	ite	le
 801a890:	2400      	movle	r4, #0
 801a892:	2401      	movgt	r4, #1
    lv_coord_t bot_err = scrlable_y + obj_y + obj_h - page_h;
 801a894:	ebae 0c00 	sub.w	ip, lr, r0
 801a898:	4463      	add	r3, ip
 801a89a:	b21b      	sxth	r3, r3
    if((obj_h <= page_h && top_err > 0) ||
 801a89c:	429a      	cmp	r2, r3
 801a89e:	da01      	bge.n	801a8a4 <lv_page_focus+0xf4>
 801a8a0:	2c00      	cmp	r4, #0
 801a8a2:	d1c7      	bne.n	801a834 <lv_page_focus+0x84>
    else if((obj_h <= page_h && bot_err > 0) ||
 801a8a4:	2b00      	cmp	r3, #0
 801a8a6:	dd14      	ble.n	801a8d2 <lv_page_focus+0x122>
 801a8a8:	b199      	cbz	r1, 801a8d2 <lv_page_focus+0x122>
        scrlable_y = -(obj_y + style_scrl->body.padding.ver + style->body.padding.ver);
 801a8aa:	f8b9 4020 	ldrh.w	r4, [r9, #32]
        scrlable_y += page_h - obj_h;
 801a8ae:	eba0 000e 	sub.w	r0, r0, lr
 801a8b2:	f8b8 3020 	ldrh.w	r3, [r8, #32]
 801a8b6:	1b00      	subs	r0, r0, r4
 801a8b8:	441c      	add	r4, r3
 801a8ba:	1b00      	subs	r0, r0, r4
 801a8bc:	1bc4      	subs	r4, r0, r7
 801a8be:	b224      	sxth	r4, r4
    if(anim_time == 0) {
 801a8c0:	2e00      	cmp	r6, #0
 801a8c2:	d1c1      	bne.n	801a848 <lv_page_focus+0x98>
        lv_obj_set_y(ext->scrl, scrlable_y);
 801a8c4:	4621      	mov	r1, r4
 801a8c6:	6868      	ldr	r0, [r5, #4]
 801a8c8:	f7ee ff06 	bl	80096d8 <lv_obj_set_y>
}
 801a8cc:	b00b      	add	sp, #44	; 0x2c
 801a8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if((obj_h <= page_h && bot_err > 0) ||
 801a8d2:	429a      	cmp	r2, r3
 801a8d4:	dbd4      	blt.n	801a880 <lv_page_focus+0xd0>
 801a8d6:	2c00      	cmp	r4, #0
 801a8d8:	d1e7      	bne.n	801a8aa <lv_page_focus+0xfa>
 801a8da:	e7d1      	b.n	801a880 <lv_page_focus+0xd0>
 801a8dc:	080096d9 	.word	0x080096d9
 801a8e0:	0800a165 	.word	0x0800a165
 801a8e4:	08012a0d 	.word	0x08012a0d

0801a8e8 <lv_page_scroll_hor>:
{
 801a8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a8ea:	b08b      	sub	sp, #44	; 0x2c
 801a8ec:	460c      	mov	r4, r1
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801a8ee:	f7f1 fb13 	bl	800bf18 <lv_obj_get_ext_attr>
    return ext->scrl;
 801a8f2:	6843      	ldr	r3, [r0, #4]
    a.fp = (lv_anim_fp_t)lv_obj_set_x;
 801a8f4:	4f11      	ldr	r7, [pc, #68]	; (801a93c <lv_page_scroll_hor+0x54>)
    a.time = LV_PAGE_SCROLL_ANIM_TIME;
 801a8f6:	25c8      	movs	r5, #200	; 0xc8
    a.start = lv_obj_get_x(scrl);
 801a8f8:	4618      	mov	r0, r3
    a.var = scrl;
 801a8fa:	9301      	str	r3, [sp, #4]
    a.start = lv_obj_get_x(scrl);
 801a8fc:	f7f1 fa76 	bl	800bdec <lv_obj_get_x>
    a.playback = 0;
 801a900:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    a.end_cb = NULL;
 801a904:	2300      	movs	r3, #0
    a.start = lv_obj_get_x(scrl);
 801a906:	4601      	mov	r1, r0
    a.repeat = 0;
 801a908:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    a.end = a.start + dist;
 801a90c:	4404      	add	r4, r0
    a.path = lv_anim_path_linear;
 801a90e:	4e0c      	ldr	r6, [pc, #48]	; (801a940 <lv_page_scroll_hor+0x58>)
    lv_anim_create(&a);
 801a910:	a801      	add	r0, sp, #4
    a.repeat = 0;
 801a912:	f363 0241 	bfi	r2, r3, #1, #1
    a.end = a.start + dist;
 801a916:	9406      	str	r4, [sp, #24]
    a.start = lv_obj_get_x(scrl);
 801a918:	9105      	str	r1, [sp, #20]
    a.repeat = 0;
 801a91a:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
    a.end_cb = NULL;
 801a91e:	9303      	str	r3, [sp, #12]
    a.act_time = 0;
 801a920:	f8ad 301e 	strh.w	r3, [sp, #30]
    a.playback_pause = 0;
 801a924:	f8ad 3020 	strh.w	r3, [sp, #32]
    a.repeat_pause = 0;
 801a928:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    a.fp = (lv_anim_fp_t)lv_obj_set_x;
 801a92c:	9702      	str	r7, [sp, #8]
    a.path = lv_anim_path_linear;
 801a92e:	9604      	str	r6, [sp, #16]
    a.time = LV_PAGE_SCROLL_ANIM_TIME;
 801a930:	f8ad 501c 	strh.w	r5, [sp, #28]
    lv_anim_create(&a);
 801a934:	f7f7 ffb8 	bl	80128a8 <lv_anim_create>
}
 801a938:	b00b      	add	sp, #44	; 0x2c
 801a93a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a93c:	08009869 	.word	0x08009869
 801a940:	08012a0d 	.word	0x08012a0d

0801a944 <lv_page_scroll_ver>:
{
 801a944:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a946:	b08b      	sub	sp, #44	; 0x2c
 801a948:	460c      	mov	r4, r1
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801a94a:	f7f1 fae5 	bl	800bf18 <lv_obj_get_ext_attr>
    return ext->scrl;
 801a94e:	6843      	ldr	r3, [r0, #4]
    a.fp = (lv_anim_fp_t)lv_obj_set_y;
 801a950:	4f11      	ldr	r7, [pc, #68]	; (801a998 <lv_page_scroll_ver+0x54>)
    a.time = LV_PAGE_SCROLL_ANIM_TIME;
 801a952:	25c8      	movs	r5, #200	; 0xc8
    a.start = lv_obj_get_y(scrl);
 801a954:	4618      	mov	r0, r3
    a.var = scrl;
 801a956:	9301      	str	r3, [sp, #4]
    a.start = lv_obj_get_y(scrl);
 801a958:	f7f1 fa4e 	bl	800bdf8 <lv_obj_get_y>
    a.playback = 0;
 801a95c:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    a.end_cb = NULL;
 801a960:	2300      	movs	r3, #0
    a.start = lv_obj_get_y(scrl);
 801a962:	4601      	mov	r1, r0
    a.repeat = 0;
 801a964:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    a.end = a.start + dist;
 801a968:	4404      	add	r4, r0
    a.path = lv_anim_path_linear;
 801a96a:	4e0c      	ldr	r6, [pc, #48]	; (801a99c <lv_page_scroll_ver+0x58>)
    lv_anim_create(&a);
 801a96c:	a801      	add	r0, sp, #4
    a.repeat = 0;
 801a96e:	f363 0241 	bfi	r2, r3, #1, #1
    a.end = a.start + dist;
 801a972:	9406      	str	r4, [sp, #24]
    a.start = lv_obj_get_y(scrl);
 801a974:	9105      	str	r1, [sp, #20]
    a.repeat = 0;
 801a976:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
    a.end_cb = NULL;
 801a97a:	9303      	str	r3, [sp, #12]
    a.act_time = 0;
 801a97c:	f8ad 301e 	strh.w	r3, [sp, #30]
    a.playback_pause = 0;
 801a980:	f8ad 3020 	strh.w	r3, [sp, #32]
    a.repeat_pause = 0;
 801a984:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    a.fp = (lv_anim_fp_t)lv_obj_set_y;
 801a988:	9702      	str	r7, [sp, #8]
    a.path = lv_anim_path_linear;
 801a98a:	9604      	str	r6, [sp, #16]
    a.time = LV_PAGE_SCROLL_ANIM_TIME;
 801a98c:	f8ad 501c 	strh.w	r5, [sp, #28]
    lv_anim_create(&a);
 801a990:	f7f7 ff8a 	bl	80128a8 <lv_anim_create>
}
 801a994:	b00b      	add	sp, #44	; 0x2c
 801a996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a998:	080096d9 	.word	0x080096d9
 801a99c:	08012a0d 	.word	0x08012a0d

0801a9a0 <lv_page_signal>:
    res = ancestor_signal(page, sign, param);
 801a9a0:	4bbd      	ldr	r3, [pc, #756]	; (801ac98 <lv_page_signal+0x2f8>)
{
 801a9a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    res = ancestor_signal(page, sign, param);
 801a9a6:	685b      	ldr	r3, [r3, #4]
{
 801a9a8:	4606      	mov	r6, r0
 801a9aa:	460d      	mov	r5, r1
 801a9ac:	4617      	mov	r7, r2
    res = ancestor_signal(page, sign, param);
 801a9ae:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 801a9b0:	2801      	cmp	r0, #1
    res = ancestor_signal(page, sign, param);
 801a9b2:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
 801a9b4:	d002      	beq.n	801a9bc <lv_page_signal+0x1c>
}
 801a9b6:	4620      	mov	r0, r4
 801a9b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801a9bc:	4630      	mov	r0, r6
 801a9be:	f7f1 faab 	bl	800bf18 <lv_obj_get_ext_attr>
 801a9c2:	4680      	mov	r8, r0
    lv_style_t * style = lv_obj_get_style(page);
 801a9c4:	4630      	mov	r0, r6
 801a9c6:	f7f1 fa29 	bl	800be1c <lv_obj_get_style>
    if(sign == LV_SIGNAL_CHILD_CHG) { /*Automatically move children to the scrollable object*/
 801a9ca:	2d01      	cmp	r5, #1
    lv_style_t * style = lv_obj_get_style(page);
 801a9cc:	4681      	mov	r9, r0
    if(sign == LV_SIGNAL_CHILD_CHG) { /*Automatically move children to the scrollable object*/
 801a9ce:	d072      	beq.n	801aab6 <lv_page_signal+0x116>
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 801a9d0:	2d03      	cmp	r5, #3
 801a9d2:	f000 809c 	beq.w	801ab0e <lv_page_signal+0x16e>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 801a9d6:	2d02      	cmp	r5, #2
 801a9d8:	d040      	beq.n	801aa5c <lv_page_signal+0xbc>
    } else if(sign == LV_SIGNAL_PRESSED) {
 801a9da:	2d08      	cmp	r5, #8
 801a9dc:	d063      	beq.n	801aaa6 <lv_page_signal+0x106>
    } else if(sign == LV_SIGNAL_RELEASED) {
 801a9de:	2d0b      	cmp	r5, #11
 801a9e0:	f000 80df 	beq.w	801aba2 <lv_page_signal+0x202>
    } else if(sign == LV_SIGNAL_REFR_EXT_SIZE) {
 801a9e4:	2d04      	cmp	r5, #4
 801a9e6:	d026      	beq.n	801aa36 <lv_page_signal+0x96>
    } else if(sign == LV_SIGNAL_CONTROLL) {
 801a9e8:	2d12      	cmp	r5, #18
 801a9ea:	f000 80ae 	beq.w	801ab4a <lv_page_signal+0x1aa>
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 801a9ee:	2d14      	cmp	r5, #20
 801a9f0:	f000 811f 	beq.w	801ac32 <lv_page_signal+0x292>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801a9f4:	2d06      	cmp	r5, #6
 801a9f6:	d1de      	bne.n	801a9b6 <lv_page_signal+0x16>
            if(buf->type[i] == NULL) break;
 801a9f8:	683b      	ldr	r3, [r7, #0]
 801a9fa:	b1c3      	cbz	r3, 801aa2e <lv_page_signal+0x8e>
 801a9fc:	687b      	ldr	r3, [r7, #4]
 801a9fe:	2b00      	cmp	r3, #0
 801aa00:	f000 8143 	beq.w	801ac8a <lv_page_signal+0x2ea>
 801aa04:	68bb      	ldr	r3, [r7, #8]
 801aa06:	2b00      	cmp	r3, #0
 801aa08:	f000 813d 	beq.w	801ac86 <lv_page_signal+0x2e6>
 801aa0c:	68fb      	ldr	r3, [r7, #12]
 801aa0e:	2b00      	cmp	r3, #0
 801aa10:	f000 8137 	beq.w	801ac82 <lv_page_signal+0x2e2>
 801aa14:	693b      	ldr	r3, [r7, #16]
 801aa16:	2b00      	cmp	r3, #0
 801aa18:	f000 813b 	beq.w	801ac92 <lv_page_signal+0x2f2>
 801aa1c:	697b      	ldr	r3, [r7, #20]
 801aa1e:	2b00      	cmp	r3, #0
 801aa20:	f000 8135 	beq.w	801ac8e <lv_page_signal+0x2ee>
 801aa24:	69bb      	ldr	r3, [r7, #24]
 801aa26:	2b00      	cmp	r3, #0
 801aa28:	bf14      	ite	ne
 801aa2a:	2307      	movne	r3, #7
 801aa2c:	2306      	moveq	r3, #6
        buf->type[i] = "lv_page";
 801aa2e:	4a9b      	ldr	r2, [pc, #620]	; (801ac9c <lv_page_signal+0x2fc>)
 801aa30:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 801aa34:	e7bf      	b.n	801a9b6 <lv_page_signal+0x16>
        if(page->ext_size < (-ext->sb.style->body.padding.hor)) page->ext_size = -ext->sb.style->body.padding.hor;
 801aa36:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801aa3a:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
 801aa3e:	f9b1 3022 	ldrsh.w	r3, [r1, #34]	; 0x22
 801aa42:	425b      	negs	r3, r3
 801aa44:	429a      	cmp	r2, r3
 801aa46:	da02      	bge.n	801aa4e <lv_page_signal+0xae>
 801aa48:	b21b      	sxth	r3, r3
 801aa4a:	461a      	mov	r2, r3
 801aa4c:	86b3      	strh	r3, [r6, #52]	; 0x34
        if(page->ext_size < (-ext->sb.style->body.padding.ver)) page->ext_size = -ext->sb.style->body.padding.ver;
 801aa4e:	f9b1 3020 	ldrsh.w	r3, [r1, #32]
 801aa52:	425b      	negs	r3, r3
 801aa54:	4293      	cmp	r3, r2
 801aa56:	ddae      	ble.n	801a9b6 <lv_page_signal+0x16>
 801aa58:	86b3      	strh	r3, [r6, #52]	; 0x34
 801aa5a:	e7ac      	b.n	801a9b6 <lv_page_signal+0x16>
        if(ext->scrl != NULL && (lv_obj_get_width(page) != lv_area_get_width(param) ||
 801aa5c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801aa60:	2b00      	cmp	r3, #0
 801aa62:	d0a8      	beq.n	801a9b6 <lv_page_signal+0x16>
 801aa64:	4630      	mov	r0, r6
 801aa66:	f7f1 f9cd 	bl	800be04 <lv_obj_get_width>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 801aa6a:	88bb      	ldrh	r3, [r7, #4]
 801aa6c:	883a      	ldrh	r2, [r7, #0]
 801aa6e:	3301      	adds	r3, #1
 801aa70:	1a9b      	subs	r3, r3, r2
 801aa72:	b21b      	sxth	r3, r3
 801aa74:	4298      	cmp	r0, r3
 801aa76:	f000 80a1 	beq.w	801abbc <lv_page_signal+0x21c>
            if(lv_cont_get_hor_fit(ext->scrl) == false) {
 801aa7a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801aa7e:	f7fc fd87 	bl	8017590 <lv_cont_get_hor_fit>
 801aa82:	2800      	cmp	r0, #0
 801aa84:	f000 80a6 	beq.w	801abd4 <lv_page_signal+0x234>
            ext->scrl->signal_func(ext->scrl, LV_SIGNAL_CORD_CHG, &ext->scrl->coords);
 801aa88:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801aa8c:	2102      	movs	r1, #2
 801aa8e:	6983      	ldr	r3, [r0, #24]
 801aa90:	f100 0210 	add.w	r2, r0, #16
 801aa94:	4798      	blx	r3
            if(ext->sb.hor_draw || ext->sb.ver_draw) lv_page_sb_refresh(page);
 801aa96:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
 801aa9a:	079d      	lsls	r5, r3, #30
 801aa9c:	d08b      	beq.n	801a9b6 <lv_page_signal+0x16>
 801aa9e:	4630      	mov	r0, r6
 801aaa0:	f7ff f886 	bl	8019bb0 <lv_page_sb_refresh>
 801aaa4:	e787      	b.n	801a9b6 <lv_page_signal+0x16>
        if(ext->pr_action != NULL) {
 801aaa6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801aaaa:	2b00      	cmp	r3, #0
 801aaac:	d083      	beq.n	801a9b6 <lv_page_signal+0x16>
                res = ext->rel_action(page);
 801aaae:	4630      	mov	r0, r6
}
 801aab0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                res = ext->rel_action(page);
 801aab4:	4718      	bx	r3
        child = lv_obj_get_child(page, NULL);
 801aab6:	2100      	movs	r1, #0
 801aab8:	4630      	mov	r0, r6
 801aaba:	f7f1 f985 	bl	800bdc8 <lv_obj_get_child>
        while(child != NULL) {
 801aabe:	4605      	mov	r5, r0
 801aac0:	2800      	cmp	r0, #0
 801aac2:	f43f af78 	beq.w	801a9b6 <lv_page_signal+0x16>
            if(lv_obj_is_protected(child, LV_PROTECT_PARENT) == false) {
 801aac6:	2102      	movs	r1, #2
 801aac8:	4628      	mov	r0, r5
 801aaca:	f7f1 fa19 	bl	800bf00 <lv_obj_is_protected>
                child = lv_obj_get_child(page, child); /*Get the next child before move this*/
 801aace:	4629      	mov	r1, r5
            if(lv_obj_is_protected(child, LV_PROTECT_PARENT) == false) {
 801aad0:	b998      	cbnz	r0, 801aafa <lv_page_signal+0x15a>
                child = lv_obj_get_child(page, child); /*Get the next child before move this*/
 801aad2:	4630      	mov	r0, r6
 801aad4:	f7f1 f978 	bl	800bdc8 <lv_obj_get_child>
 801aad8:	4607      	mov	r7, r0
                lv_obj_set_parent(tmp, ext->scrl);
 801aada:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801aade:	4628      	mov	r0, r5
 801aae0:	f7ef fc9c 	bl	800a41c <lv_obj_set_parent>
        while(child != NULL) {
 801aae4:	2f00      	cmp	r7, #0
 801aae6:	f43f af66 	beq.w	801a9b6 <lv_page_signal+0x16>
{
 801aaea:	463d      	mov	r5, r7
            if(lv_obj_is_protected(child, LV_PROTECT_PARENT) == false) {
 801aaec:	2102      	movs	r1, #2
 801aaee:	4628      	mov	r0, r5
 801aaf0:	f7f1 fa06 	bl	800bf00 <lv_obj_is_protected>
                child = lv_obj_get_child(page, child); /*Get the next child before move this*/
 801aaf4:	4629      	mov	r1, r5
            if(lv_obj_is_protected(child, LV_PROTECT_PARENT) == false) {
 801aaf6:	2800      	cmp	r0, #0
 801aaf8:	d0eb      	beq.n	801aad2 <lv_page_signal+0x132>
                child = lv_obj_get_child(page, child);
 801aafa:	4629      	mov	r1, r5
 801aafc:	4630      	mov	r0, r6
 801aafe:	f7f1 f963 	bl	800bdc8 <lv_obj_get_child>
        while(child != NULL) {
 801ab02:	4607      	mov	r7, r0
 801ab04:	2800      	cmp	r0, #0
 801ab06:	f43f af56 	beq.w	801a9b6 <lv_page_signal+0x16>
{
 801ab0a:	463d      	mov	r5, r7
 801ab0c:	e7ee      	b.n	801aaec <lv_page_signal+0x14c>
        if(lv_cont_get_hor_fit(ext->scrl) == false) {
 801ab0e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801ab12:	f7fc fd3d 	bl	8017590 <lv_cont_get_hor_fit>
 801ab16:	2800      	cmp	r0, #0
 801ab18:	d13b      	bne.n	801ab92 <lv_page_signal+0x1f2>
            lv_obj_set_width(ext->scrl, lv_obj_get_width(page) - 2 * style->body.padding.hor);
 801ab1a:	4630      	mov	r0, r6
 801ab1c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801ab20:	f7f1 f970 	bl	800be04 <lv_obj_get_width>
 801ab24:	f8b9 1022 	ldrh.w	r1, [r9, #34]	; 0x22
 801ab28:	eba0 0141 	sub.w	r1, r0, r1, lsl #1
 801ab2c:	4628      	mov	r0, r5
 801ab2e:	b209      	sxth	r1, r1
 801ab30:	f7f0 fa28 	bl	800af84 <lv_obj_set_width>
        if(ext->sb.hor_draw || ext->sb.ver_draw) lv_page_sb_refresh(page);
 801ab34:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
 801ab38:	079f      	lsls	r7, r3, #30
 801ab3a:	d002      	beq.n	801ab42 <lv_page_signal+0x1a2>
 801ab3c:	4630      	mov	r0, r6
 801ab3e:	f7ff f837 	bl	8019bb0 <lv_page_sb_refresh>
        lv_obj_refresh_ext_size(page);
 801ab42:	4630      	mov	r0, r6
 801ab44:	f7f1 f85e 	bl	800bc04 <lv_obj_refresh_ext_size>
 801ab48:	e735      	b.n	801a9b6 <lv_page_signal+0x16>
        uint32_t c = *((uint32_t *) param);
 801ab4a:	683b      	ldr	r3, [r7, #0]
        if((c == LV_GROUP_KEY_DOWN) && ext->arrow_scroll) {
 801ab4c:	2b12      	cmp	r3, #18
 801ab4e:	d04f      	beq.n	801abf0 <lv_page_signal+0x250>
        } else if((c == LV_GROUP_KEY_UP) && ext->arrow_scroll) {
 801ab50:	2b11      	cmp	r3, #17
 801ab52:	d05e      	beq.n	801ac12 <lv_page_signal+0x272>
        } else if((c == LV_GROUP_KEY_RIGHT) && ext->arrow_scroll) {
 801ab54:	2b13      	cmp	r3, #19
 801ab56:	d175      	bne.n	801ac44 <lv_page_signal+0x2a4>
 801ab58:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
 801ab5c:	07da      	lsls	r2, r3, #31
 801ab5e:	f57f af2a 	bpl.w	801a9b6 <lv_page_signal+0x16>
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801ab62:	4630      	mov	r0, r6
 801ab64:	f7f1 f9d8 	bl	800bf18 <lv_obj_get_ext_attr>
 * @param page pointer to a page object
 * @return the width of the scrollable
 */
static inline lv_coord_t lv_page_get_scrl_width(const lv_obj_t *page)
{
    return lv_obj_get_width(lv_page_get_scrl(page));
 801ab68:	6840      	ldr	r0, [r0, #4]
 801ab6a:	f7f1 f94b 	bl	800be04 <lv_obj_get_width>
 801ab6e:	4605      	mov	r5, r0
            if(lv_page_get_scrl_width(page) < lv_obj_get_width(page)) lv_page_scroll_ver(page, - lv_obj_get_height(page) / 4);
 801ab70:	4630      	mov	r0, r6
 801ab72:	f7f1 f947 	bl	800be04 <lv_obj_get_width>
 801ab76:	42a8      	cmp	r0, r5
 801ab78:	4630      	mov	r0, r6
 801ab7a:	dc3f      	bgt.n	801abfc <lv_page_signal+0x25c>
            else lv_page_scroll_hor(page, - lv_obj_get_width(page) / 4);
 801ab7c:	f7f1 f942 	bl	800be04 <lv_obj_get_width>
 801ab80:	2104      	movs	r1, #4
 801ab82:	fb90 f1f1 	sdiv	r1, r0, r1
 801ab86:	4249      	negs	r1, r1
 801ab88:	4630      	mov	r0, r6
 801ab8a:	b209      	sxth	r1, r1
 801ab8c:	f7ff feac 	bl	801a8e8 <lv_page_scroll_hor>
 801ab90:	e711      	b.n	801a9b6 <lv_page_signal+0x16>
            ext->scrl->signal_func(ext->scrl, LV_SIGNAL_CORD_CHG, &ext->scrl->coords);
 801ab92:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801ab96:	2102      	movs	r1, #2
 801ab98:	6983      	ldr	r3, [r0, #24]
 801ab9a:	f100 0210 	add.w	r2, r0, #16
 801ab9e:	4798      	blx	r3
 801aba0:	e7c8      	b.n	801ab34 <lv_page_signal+0x194>
        if(lv_indev_is_dragging(lv_indev_get_act()) == false) {
 801aba2:	f7ee faf3 	bl	800918c <lv_indev_get_act>
 801aba6:	f7ee fb33 	bl	8009210 <lv_indev_is_dragging>
 801abaa:	2800      	cmp	r0, #0
 801abac:	f47f af03 	bne.w	801a9b6 <lv_page_signal+0x16>
            if(ext->rel_action != NULL) {
 801abb0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801abb4:	2b00      	cmp	r3, #0
 801abb6:	f47f af7a 	bne.w	801aaae <lv_page_signal+0x10e>
 801abba:	e6fc      	b.n	801a9b6 <lv_page_signal+0x16>
                                 lv_obj_get_height(page) != lv_area_get_height(param))) {
 801abbc:	4630      	mov	r0, r6
 801abbe:	f7f1 f927 	bl	800be10 <lv_obj_get_height>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 801abc2:	88fb      	ldrh	r3, [r7, #6]
 801abc4:	887a      	ldrh	r2, [r7, #2]
 801abc6:	3301      	adds	r3, #1
 801abc8:	1a9b      	subs	r3, r3, r2
        if(ext->scrl != NULL && (lv_obj_get_width(page) != lv_area_get_width(param) ||
 801abca:	b21b      	sxth	r3, r3
 801abcc:	4298      	cmp	r0, r3
 801abce:	f47f af54 	bne.w	801aa7a <lv_page_signal+0xda>
 801abd2:	e6f0      	b.n	801a9b6 <lv_page_signal+0x16>
                lv_obj_set_width(ext->scrl, lv_obj_get_width(page) - 2 * style->body.padding.hor);
 801abd4:	4630      	mov	r0, r6
 801abd6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801abda:	f7f1 f913 	bl	800be04 <lv_obj_get_width>
 801abde:	f8b9 1022 	ldrh.w	r1, [r9, #34]	; 0x22
 801abe2:	eba0 0141 	sub.w	r1, r0, r1, lsl #1
 801abe6:	4628      	mov	r0, r5
 801abe8:	b209      	sxth	r1, r1
 801abea:	f7f0 f9cb 	bl	800af84 <lv_obj_set_width>
 801abee:	e74b      	b.n	801aa88 <lv_page_signal+0xe8>
        if((c == LV_GROUP_KEY_DOWN) && ext->arrow_scroll) {
 801abf0:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
 801abf4:	07d8      	lsls	r0, r3, #31
 801abf6:	f57f aede 	bpl.w	801a9b6 <lv_page_signal+0x16>
            lv_page_scroll_ver(page, - lv_obj_get_height(page) / 4);
 801abfa:	4630      	mov	r0, r6
            if(lv_page_get_scrl_width(page) < lv_obj_get_width(page)) lv_page_scroll_ver(page, - lv_obj_get_height(page) / 4);
 801abfc:	f7f1 f908 	bl	800be10 <lv_obj_get_height>
 801ac00:	2104      	movs	r1, #4
 801ac02:	fb90 f1f1 	sdiv	r1, r0, r1
 801ac06:	4249      	negs	r1, r1
 801ac08:	4630      	mov	r0, r6
 801ac0a:	b209      	sxth	r1, r1
 801ac0c:	f7ff fe9a 	bl	801a944 <lv_page_scroll_ver>
 801ac10:	e6d1      	b.n	801a9b6 <lv_page_signal+0x16>
        } else if((c == LV_GROUP_KEY_UP) && ext->arrow_scroll) {
 801ac12:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
 801ac16:	07d9      	lsls	r1, r3, #31
 801ac18:	f57f aecd 	bpl.w	801a9b6 <lv_page_signal+0x16>
            lv_page_scroll_ver(page, lv_obj_get_height(page) / 4);
 801ac1c:	4630      	mov	r0, r6
            if(lv_page_get_scrl_width(page) < lv_obj_get_width(page)) lv_page_scroll_ver(page, lv_obj_get_height(page) / 4);
 801ac1e:	f7f1 f8f7 	bl	800be10 <lv_obj_get_height>
 801ac22:	2104      	movs	r1, #4
 801ac24:	fb90 f1f1 	sdiv	r1, r0, r1
 801ac28:	4630      	mov	r0, r6
 801ac2a:	b209      	sxth	r1, r1
 801ac2c:	f7ff fe8a 	bl	801a944 <lv_page_scroll_ver>
 801ac30:	e6c1      	b.n	801a9b6 <lv_page_signal+0x16>
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801ac32:	4630      	mov	r0, r6
 801ac34:	f7f1 f970 	bl	800bf18 <lv_obj_get_ext_attr>
    return ext->arrow_scroll ? true : false;
 801ac38:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 801ac3c:	f003 0301 	and.w	r3, r3, #1
 801ac40:	703b      	strb	r3, [r7, #0]
 801ac42:	e6b8      	b.n	801a9b6 <lv_page_signal+0x16>
        } else if((c == LV_GROUP_KEY_LEFT) && ext->arrow_scroll) {
 801ac44:	2b14      	cmp	r3, #20
 801ac46:	f47f aeb6 	bne.w	801a9b6 <lv_page_signal+0x16>
 801ac4a:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
 801ac4e:	07db      	lsls	r3, r3, #31
 801ac50:	f57f aeb1 	bpl.w	801a9b6 <lv_page_signal+0x16>
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801ac54:	4630      	mov	r0, r6
 801ac56:	f7f1 f95f 	bl	800bf18 <lv_obj_get_ext_attr>
 801ac5a:	6840      	ldr	r0, [r0, #4]
 801ac5c:	f7f1 f8d2 	bl	800be04 <lv_obj_get_width>
 801ac60:	4605      	mov	r5, r0
            if(lv_page_get_scrl_width(page) < lv_obj_get_width(page)) lv_page_scroll_ver(page, lv_obj_get_height(page) / 4);
 801ac62:	4630      	mov	r0, r6
 801ac64:	f7f1 f8ce 	bl	800be04 <lv_obj_get_width>
 801ac68:	42a8      	cmp	r0, r5
 801ac6a:	4630      	mov	r0, r6
 801ac6c:	dcd7      	bgt.n	801ac1e <lv_page_signal+0x27e>
            else lv_page_scroll_hor(page,  lv_obj_get_width(page) / 4);
 801ac6e:	f7f1 f8c9 	bl	800be04 <lv_obj_get_width>
 801ac72:	2104      	movs	r1, #4
 801ac74:	fb90 f1f1 	sdiv	r1, r0, r1
 801ac78:	4630      	mov	r0, r6
 801ac7a:	b209      	sxth	r1, r1
 801ac7c:	f7ff fe34 	bl	801a8e8 <lv_page_scroll_hor>
 801ac80:	e699      	b.n	801a9b6 <lv_page_signal+0x16>
            if(buf->type[i] == NULL) break;
 801ac82:	2303      	movs	r3, #3
 801ac84:	e6d3      	b.n	801aa2e <lv_page_signal+0x8e>
 801ac86:	2302      	movs	r3, #2
 801ac88:	e6d1      	b.n	801aa2e <lv_page_signal+0x8e>
 801ac8a:	2301      	movs	r3, #1
 801ac8c:	e6cf      	b.n	801aa2e <lv_page_signal+0x8e>
 801ac8e:	2305      	movs	r3, #5
 801ac90:	e6cd      	b.n	801aa2e <lv_page_signal+0x8e>
 801ac92:	2304      	movs	r3, #4
 801ac94:	e6cb      	b.n	801aa2e <lv_page_signal+0x8e>
 801ac96:	bf00      	nop
 801ac98:	20016648 	.word	0x20016648
 801ac9c:	080c74b0 	.word	0x080c74b0

0801aca0 <lv_page_start_edge_flash>:
{
 801aca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aca2:	b08b      	sub	sp, #44	; 0x2c
 801aca4:	4604      	mov	r4, r0
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801aca6:	f7f1 f937 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->edge_flash.enabled) {
 801acaa:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 801acae:	07db      	lsls	r3, r3, #31
 801acb0:	d521      	bpl.n	801acf6 <lv_page_start_edge_flash+0x56>
        a.playback = 1;
 801acb2:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
        a.start = 0;
 801acb6:	2300      	movs	r3, #0
        a.time = LV_PAGE_END_ANIM_TIME;
 801acb8:	f44f 7196 	mov.w	r1, #300	; 0x12c
        a.end = LV_PAGE_END_FLASH_SIZE;
 801acbc:	f04f 0e19 	mov.w	lr, #25
        a.repeat = 0;
 801acc0:	f042 0201 	orr.w	r2, r2, #1
        a.fp = (lv_anim_fp_t)edge_flash_anim;
 801acc4:	4f0d      	ldr	r7, [pc, #52]	; (801acfc <lv_page_start_edge_flash+0x5c>)
        a.path = lv_anim_path_linear;
 801acc6:	4e0e      	ldr	r6, [pc, #56]	; (801ad00 <lv_page_start_edge_flash+0x60>)
        lv_anim_create(&a);
 801acc8:	a801      	add	r0, sp, #4
        a.end_cb = edge_flash_anim_end;
 801acca:	4d0e      	ldr	r5, [pc, #56]	; (801ad04 <lv_page_start_edge_flash+0x64>)
        a.repeat = 0;
 801accc:	f363 0241 	bfi	r2, r3, #1, #1
        a.var = page;
 801acd0:	9401      	str	r4, [sp, #4]
        a.start = 0;
 801acd2:	9305      	str	r3, [sp, #20]
        a.repeat = 0;
 801acd4:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
        a.act_time = 0;
 801acd8:	f8ad 301e 	strh.w	r3, [sp, #30]
        a.repeat_pause = 0;
 801acdc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
        a.end = LV_PAGE_END_FLASH_SIZE;
 801ace0:	f8cd e018 	str.w	lr, [sp, #24]
        a.fp = (lv_anim_fp_t)edge_flash_anim;
 801ace4:	9702      	str	r7, [sp, #8]
        a.path = lv_anim_path_linear;
 801ace6:	9604      	str	r6, [sp, #16]
        a.end_cb = edge_flash_anim_end;
 801ace8:	9503      	str	r5, [sp, #12]
        a.time = LV_PAGE_END_ANIM_TIME;
 801acea:	f8ad 101c 	strh.w	r1, [sp, #28]
        a.playback_pause = LV_PAGE_END_ANIM_WAIT_TIME;
 801acee:	f8ad 1020 	strh.w	r1, [sp, #32]
        lv_anim_create(&a);
 801acf2:	f7f7 fdd9 	bl	80128a8 <lv_anim_create>
}
 801acf6:	b00b      	add	sp, #44	; 0x2c
 801acf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801acfa:	bf00      	nop
 801acfc:	08019f71 	.word	0x08019f71
 801ad00:	08012a0d 	.word	0x08012a0d
 801ad04:	08019f4d 	.word	0x08019f4d

0801ad08 <lv_page_scrollable_signal>:
    res = ancestor_signal(scrl, sign, param);
 801ad08:	4bc4      	ldr	r3, [pc, #784]	; (801b01c <lv_page_scrollable_signal+0x314>)
{
 801ad0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    res = ancestor_signal(scrl, sign, param);
 801ad0e:	685b      	ldr	r3, [r3, #4]
{
 801ad10:	b08f      	sub	sp, #60	; 0x3c
 801ad12:	4605      	mov	r5, r0
 801ad14:	468a      	mov	sl, r1
 801ad16:	4616      	mov	r6, r2
    res = ancestor_signal(scrl, sign, param);
 801ad18:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 801ad1a:	2801      	cmp	r0, #1
    res = ancestor_signal(scrl, sign, param);
 801ad1c:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
 801ad1e:	d003      	beq.n	801ad28 <lv_page_scrollable_signal+0x20>
}
 801ad20:	4620      	mov	r0, r4
 801ad22:	b00f      	add	sp, #60	; 0x3c
 801ad24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_obj_t * page = lv_obj_get_parent(scrl);
 801ad28:	4628      	mov	r0, r5
 801ad2a:	f7f1 f84b 	bl	800bdc4 <lv_obj_get_parent>
 801ad2e:	4607      	mov	r7, r0
    lv_style_t * page_style = lv_obj_get_style(page);
 801ad30:	f7f1 f874 	bl	800be1c <lv_obj_get_style>
 801ad34:	4681      	mov	r9, r0
    lv_page_ext_t * page_ext = lv_obj_get_ext_attr(page);
 801ad36:	4638      	mov	r0, r7
 801ad38:	f7f1 f8ee 	bl	800bf18 <lv_obj_get_ext_attr>
    if(sign == LV_SIGNAL_CORD_CHG) {
 801ad3c:	f1ba 0f02 	cmp.w	sl, #2
    lv_page_ext_t * page_ext = lv_obj_get_ext_attr(page);
 801ad40:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CORD_CHG) {
 801ad42:	d051      	beq.n	801ade8 <lv_page_scrollable_signal+0xe0>
    else if(sign == LV_SIGNAL_DRAG_END) {
 801ad44:	f1ba 0f0f 	cmp.w	sl, #15
 801ad48:	d013      	beq.n	801ad72 <lv_page_scrollable_signal+0x6a>
    } else if(sign == LV_SIGNAL_PRESSED) {
 801ad4a:	f1ba 0f08 	cmp.w	sl, #8
 801ad4e:	d047      	beq.n	801ade0 <lv_page_scrollable_signal+0xd8>
    } else if(sign == LV_SIGNAL_RELEASED) {
 801ad50:	f1ba 0f0b 	cmp.w	sl, #11
 801ad54:	d1e4      	bne.n	801ad20 <lv_page_scrollable_signal+0x18>
        if(lv_indev_is_dragging(lv_indev_get_act()) == false) {
 801ad56:	f7ee fa19 	bl	800918c <lv_indev_get_act>
 801ad5a:	f7ee fa59 	bl	8009210 <lv_indev_is_dragging>
 801ad5e:	2800      	cmp	r0, #0
 801ad60:	d1de      	bne.n	801ad20 <lv_page_scrollable_signal+0x18>
            if(page_ext->rel_action != NULL) {
 801ad62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ad66:	2b00      	cmp	r3, #0
 801ad68:	d0da      	beq.n	801ad20 <lv_page_scrollable_signal+0x18>
                res = page_ext->rel_action(page);
 801ad6a:	4638      	mov	r0, r7
 801ad6c:	4798      	blx	r3
 801ad6e:	4604      	mov	r4, r0
 801ad70:	e7d6      	b.n	801ad20 <lv_page_scrollable_signal+0x18>
        if(page_ext->sb.mode == LV_SB_MODE_DRAG) {
 801ad72:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
        page_ext->scroll_prop_ip = 0;
 801ad76:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
        if(page_ext->sb.mode == LV_SB_MODE_DRAG) {
 801ad7a:	f002 011c 	and.w	r1, r2, #28
        page_ext->scroll_prop_ip = 0;
 801ad7e:	f36f 0382 	bfc	r3, #2, #1
        if(page_ext->sb.mode == LV_SB_MODE_DRAG) {
 801ad82:	2908      	cmp	r1, #8
        page_ext->scroll_prop_ip = 0;
 801ad84:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
        if(page_ext->sb.mode == LV_SB_MODE_DRAG) {
 801ad88:	d1ca      	bne.n	801ad20 <lv_page_scrollable_signal+0x18>
            if(page_ext->sb.hor_draw) {
 801ad8a:	07d0      	lsls	r0, r2, #31
 801ad8c:	f100 811f 	bmi.w	801afce <lv_page_scrollable_signal+0x2c6>
            if(page_ext->sb.ver_draw)  {
 801ad90:	0791      	lsls	r1, r2, #30
 801ad92:	d5c5      	bpl.n	801ad20 <lv_page_scrollable_signal+0x18>
    memcpy(dest, src, sizeof(lv_area_t));
 801ad94:	4642      	mov	r2, r8
 801ad96:	ab0c      	add	r3, sp, #48	; 0x30
 801ad98:	f852 0f1c 	ldr.w	r0, [r2, #28]!
 801ad9c:	6851      	ldr	r1, [r2, #4]
 801ad9e:	c303      	stmia	r3!, {r0, r1}
                sb_area_tmp.x1 += page->coords.x1;
 801ada0:	8a3a      	ldrh	r2, [r7, #16]
                lv_inv_area(&sb_area_tmp);
 801ada2:	a80c      	add	r0, sp, #48	; 0x30
                sb_area_tmp.x2 += page->coords.x1;
 801ada4:	f8bd 6034 	ldrh.w	r6, [sp, #52]	; 0x34
                sb_area_tmp.x1 += page->coords.x1;
 801ada8:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
                sb_area_tmp.y1 += page->coords.y1;
 801adac:	8a7b      	ldrh	r3, [r7, #18]
 801adae:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
                sb_area_tmp.x1 += page->coords.x1;
 801adb2:	4415      	add	r5, r2
                sb_area_tmp.x2 += page->coords.x1;
 801adb4:	4432      	add	r2, r6
                sb_area_tmp.y2 += page->coords.y1;
 801adb6:	f8bd 6036 	ldrh.w	r6, [sp, #54]	; 0x36
                sb_area_tmp.y1 += page->coords.y1;
 801adba:	4419      	add	r1, r3
                sb_area_tmp.x1 += page->coords.x1;
 801adbc:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
                sb_area_tmp.y2 += page->coords.y1;
 801adc0:	4433      	add	r3, r6
                sb_area_tmp.x2 += page->coords.x1;
 801adc2:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
                sb_area_tmp.y1 += page->coords.y1;
 801adc6:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
                sb_area_tmp.y2 += page->coords.y1;
 801adca:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
                lv_inv_area(&sb_area_tmp);
 801adce:	f7f1 fb23 	bl	800c418 <lv_inv_area>
                page_ext->sb.ver_draw = 0;
 801add2:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
 801add6:	f36f 0341 	bfc	r3, #1, #1
 801adda:	f888 3024 	strb.w	r3, [r8, #36]	; 0x24
 801adde:	e79f      	b.n	801ad20 <lv_page_scrollable_signal+0x18>
        if(page_ext->pr_action != NULL) {
 801ade0:	68c3      	ldr	r3, [r0, #12]
 801ade2:	2b00      	cmp	r3, #0
 801ade4:	d1c1      	bne.n	801ad6a <lv_page_scrollable_signal+0x62>
 801ade6:	e79b      	b.n	801ad20 <lv_page_scrollable_signal+0x18>
        lv_coord_t new_x = lv_obj_get_x(scrl);
 801ade8:	4628      	mov	r0, r5
 801adea:	f7f0 ffff 	bl	800bdec <lv_obj_get_x>
 801adee:	9003      	str	r0, [sp, #12]
        lv_coord_t new_y = lv_obj_get_y(scrl);
 801adf0:	4628      	mov	r0, r5
 801adf2:	f7f1 f801 	bl	800bdf8 <lv_obj_get_y>
        lv_obj_get_coords(scrl, &scrl_coords);
 801adf6:	a90c      	add	r1, sp, #48	; 0x30
        lv_coord_t new_y = lv_obj_get_y(scrl);
 801adf8:	9007      	str	r0, [sp, #28]
        lv_obj_get_coords(scrl, &scrl_coords);
 801adfa:	4628      	mov	r0, r5
 801adfc:	f7f0 fff0 	bl	800bde0 <lv_obj_get_coords>
        lv_obj_get_coords(page, &page_coords);
 801ae00:	a90a      	add	r1, sp, #40	; 0x28
 801ae02:	4638      	mov	r0, r7
 801ae04:	f7f0 ffec 	bl	800bde0 <lv_obj_get_coords>
        lv_coord_t diff_x = scrl->coords.x1 - ori_coords->x1;
 801ae08:	f8b6 e000 	ldrh.w	lr, [r6]
 801ae0c:	8a2a      	ldrh	r2, [r5, #16]
        lv_obj_t * page_parent = lv_obj_get_parent(page);
 801ae0e:	4638      	mov	r0, r7
        lv_coord_t diff_y = scrl->coords.y1 - ori_coords->y1;
 801ae10:	8871      	ldrh	r1, [r6, #2]
        lv_coord_t diff_x = scrl->coords.x1 - ori_coords->x1;
 801ae12:	eba2 020e 	sub.w	r2, r2, lr
        lv_coord_t diff_y = scrl->coords.y1 - ori_coords->y1;
 801ae16:	8a6b      	ldrh	r3, [r5, #18]
        lv_coord_t hpad = page_style->body.padding.hor;
 801ae18:	f9b9 b022 	ldrsh.w	fp, [r9, #34]	; 0x22
        lv_coord_t diff_y = scrl->coords.y1 - ori_coords->y1;
 801ae1c:	1a5b      	subs	r3, r3, r1
        lv_coord_t diff_x = scrl->coords.x1 - ori_coords->x1;
 801ae1e:	b292      	uxth	r2, r2
        lv_coord_t diff_y = scrl->coords.y1 - ori_coords->y1;
 801ae20:	b29b      	uxth	r3, r3
        lv_coord_t diff_x = scrl->coords.x1 - ori_coords->x1;
 801ae22:	9206      	str	r2, [sp, #24]
        lv_coord_t vpad = page_style->body.padding.ver;
 801ae24:	f9b9 2020 	ldrsh.w	r2, [r9, #32]
        lv_coord_t diff_y = scrl->coords.y1 - ori_coords->y1;
 801ae28:	9304      	str	r3, [sp, #16]
        lv_coord_t vpad = page_style->body.padding.ver;
 801ae2a:	9201      	str	r2, [sp, #4]
        lv_obj_t * page_parent = lv_obj_get_parent(page);
 801ae2c:	f7f0 ffca 	bl	800bdc4 <lv_obj_get_parent>
 801ae30:	9005      	str	r0, [sp, #20]
        lv_indev_t * indev = lv_indev_get_act();
 801ae32:	f7ee f9ab 	bl	800918c <lv_indev_get_act>
        lv_indev_get_vect(indev, &drag_vect);
 801ae36:	a909      	add	r1, sp, #36	; 0x24
        lv_indev_t * indev = lv_indev_get_act();
 801ae38:	4681      	mov	r9, r0
        lv_indev_get_vect(indev, &drag_vect);
 801ae3a:	f7ee f9f7 	bl	800922c <lv_indev_get_vect>
        if(page_ext->scroll_prop && page_ext->scroll_prop_ip == 0 && lv_indev_is_dragging(indev) == false) {
 801ae3e:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
 801ae42:	f003 0306 	and.w	r3, r3, #6
 801ae46:	2b02      	cmp	r3, #2
 801ae48:	f000 80ea 	beq.w	801b020 <lv_page_scrollable_signal+0x318>
 801ae4c:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801ae50:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
    return area_p->x2 - area_p->x1 + 1;
 801ae54:	f109 0201 	add.w	r2, r9, #1
 801ae58:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801ae5c:	f9bd e02c 	ldrsh.w	lr, [sp, #44]	; 0x2c
 801ae60:	eba2 020c 	sub.w	r2, r2, ip
 801ae64:	fa1f fa80 	uxth.w	sl, r0
 801ae68:	f10e 0301 	add.w	r3, lr, #1
 801ae6c:	b292      	uxth	r2, r2
 801ae6e:	eba3 030a 	sub.w	r3, r3, sl
        if(lv_area_get_width(&scrl_coords) + 2 * hpad <= lv_area_get_width(&page_coords)) {
 801ae72:	b211      	sxth	r1, r2
 801ae74:	b29b      	uxth	r3, r3
 801ae76:	9302      	str	r3, [sp, #8]
 801ae78:	eb01 034b 	add.w	r3, r1, fp, lsl #1
 801ae7c:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801ae80:	428b      	cmp	r3, r1
 801ae82:	dc35      	bgt.n	801aef0 <lv_page_scrollable_signal+0x1e8>
            if(scrl_coords.x1 != page_coords.x1 + hpad) {
 801ae84:	4458      	add	r0, fp
        lv_coord_t new_x = lv_obj_get_x(scrl);
 801ae86:	9b03      	ldr	r3, [sp, #12]
 801ae88:	4584      	cmp	ip, r0
 801ae8a:	bf0a      	itet	eq
 801ae8c:	469b      	moveq	fp, r3
 801ae8e:	2301      	movne	r3, #1
 801ae90:	2300      	moveq	r3, #0
 801ae92:	9303      	str	r3, [sp, #12]
 801ae94:	f9bd 9036 	ldrsh.w	r9, [sp, #54]	; 0x36
 801ae98:	f9bd 002a 	ldrsh.w	r0, [sp, #42]	; 0x2a
 801ae9c:	f9bd e02e 	ldrsh.w	lr, [sp, #46]	; 0x2e
    return area_p->y2 - area_p->y1 + 1;
 801aea0:	f109 0201 	add.w	r2, r9, #1
 801aea4:	f9bd c032 	ldrsh.w	ip, [sp, #50]	; 0x32
 801aea8:	fa1f fa80 	uxth.w	sl, r0
 801aeac:	f10e 0301 	add.w	r3, lr, #1
 801aeb0:	eba2 020c 	sub.w	r2, r2, ip
 801aeb4:	eba3 030a 	sub.w	r3, r3, sl
 801aeb8:	b292      	uxth	r2, r2
 801aeba:	b29b      	uxth	r3, r3
        if(lv_area_get_height(&scrl_coords) + 2 * vpad <= lv_area_get_height(&page_coords)) {
 801aebc:	b211      	sxth	r1, r2
 801aebe:	9302      	str	r3, [sp, #8]
 801aec0:	9b01      	ldr	r3, [sp, #4]
 801aec2:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 801aec6:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801aeca:	4299      	cmp	r1, r3
 801aecc:	dc20      	bgt.n	801af10 <lv_page_scrollable_signal+0x208>
            if(scrl_coords.y1 != page_coords.y1 + vpad) {
 801aece:	9b01      	ldr	r3, [sp, #4]
 801aed0:	4418      	add	r0, r3
 801aed2:	4584      	cmp	ip, r0
 801aed4:	d026      	beq.n	801af24 <lv_page_scrollable_signal+0x21c>
            lv_obj_set_pos(scrl, new_x, new_y);
 801aed6:	9a01      	ldr	r2, [sp, #4]
 801aed8:	4659      	mov	r1, fp
 801aeda:	4628      	mov	r0, r5
 801aedc:	f7ef f942 	bl	800a164 <lv_obj_set_pos>
            if(page_ext->scroll_prop_ip) {
 801aee0:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
 801aee4:	075a      	lsls	r2, r3, #29
 801aee6:	d464      	bmi.n	801afb2 <lv_page_scrollable_signal+0x2aa>
        lv_page_sb_refresh(page);
 801aee8:	4638      	mov	r0, r7
 801aeea:	f7fe fe61 	bl	8019bb0 <lv_page_sb_refresh>
 801aeee:	e717      	b.n	801ad20 <lv_page_scrollable_signal+0x18>
            if(page_ext->scroll_prop_ip) {
 801aef0:	f898 1034 	ldrb.w	r1, [r8, #52]	; 0x34
 801aef4:	f011 0104 	ands.w	r1, r1, #4
 801aef8:	d046      	beq.n	801af88 <lv_page_scrollable_signal+0x280>
                if(drag_vect.x == diff_x) {   /*`scrl` is bouncing: drag pos. it somewhere and here it is reverted. Handle only the pos. because of drag*/
 801aefa:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801aefe:	9a06      	ldr	r2, [sp, #24]
 801af00:	429a      	cmp	r2, r3
 801af02:	f000 80ea 	beq.w	801b0da <lv_page_scrollable_signal+0x3d2>
        bool refr_x = false;
 801af06:	2300      	movs	r3, #0
        lv_coord_t new_x = lv_obj_get_x(scrl);
 801af08:	f8dd b00c 	ldr.w	fp, [sp, #12]
        bool refr_x = false;
 801af0c:	9303      	str	r3, [sp, #12]
 801af0e:	e7c1      	b.n	801ae94 <lv_page_scrollable_signal+0x18c>
            if(page_ext->scroll_prop_ip) {
 801af10:	f898 1034 	ldrb.w	r1, [r8, #52]	; 0x34
 801af14:	074b      	lsls	r3, r1, #29
 801af16:	d51c      	bpl.n	801af52 <lv_page_scrollable_signal+0x24a>
              if(drag_vect.y == diff_y) {   /*`scrl` is bouncing: drag pos. it somewhere and here it is reverted. Handle only the pos. because of drag*/
 801af18:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801af1c:	9a04      	ldr	r2, [sp, #16]
 801af1e:	429a      	cmp	r2, r3
 801af20:	f000 80d4 	beq.w	801b0cc <lv_page_scrollable_signal+0x3c4>
        if(refr_x || refr_y) {
 801af24:	9b03      	ldr	r3, [sp, #12]
 801af26:	2b00      	cmp	r3, #0
 801af28:	d0de      	beq.n	801aee8 <lv_page_scrollable_signal+0x1e0>
            lv_obj_set_pos(scrl, new_x, new_y);
 801af2a:	9a07      	ldr	r2, [sp, #28]
 801af2c:	4659      	mov	r1, fp
 801af2e:	4628      	mov	r0, r5
 801af30:	f7ef f918 	bl	800a164 <lv_obj_set_pos>
            if(page_ext->scroll_prop_ip) {
 801af34:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
 801af38:	075b      	lsls	r3, r3, #29
 801af3a:	d5d5      	bpl.n	801aee8 <lv_page_scrollable_signal+0x1e0>
                if(refr_x) lv_obj_set_x(page_parent, lv_obj_get_x(page_parent) + diff_x);
 801af3c:	9d05      	ldr	r5, [sp, #20]
 801af3e:	4628      	mov	r0, r5
 801af40:	f7f0 ff54 	bl	800bdec <lv_obj_get_x>
 801af44:	9b06      	ldr	r3, [sp, #24]
 801af46:	4403      	add	r3, r0
 801af48:	4628      	mov	r0, r5
 801af4a:	b219      	sxth	r1, r3
 801af4c:	f7ee fc8c 	bl	8009868 <lv_obj_set_x>
 801af50:	e7ca      	b.n	801aee8 <lv_page_scrollable_signal+0x1e0>
            else if(scrl_coords.y2 < page_coords.y2 - vpad) {
 801af52:	9901      	ldr	r1, [sp, #4]
 801af54:	ebae 0e01 	sub.w	lr, lr, r1
 801af58:	45f1      	cmp	r9, lr
 801af5a:	f280 808d 	bge.w	801b078 <lv_page_scrollable_signal+0x370>
                new_y =  lv_area_get_height(&page_coords) - lv_area_get_height(&scrl_coords) - vpad;   /* Bottom align */
 801af5e:	9b02      	ldr	r3, [sp, #8]
 801af60:	1a9a      	subs	r2, r3, r2
                        page_ext->edge_flash.top_ip == 0 && page_ext->edge_flash.bottom_ip == 0) {
 801af62:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
                new_y =  lv_area_get_height(&page_coords) - lv_area_get_height(&scrl_coords) - vpad;   /* Bottom align */
 801af66:	1a52      	subs	r2, r2, r1
                if(page_ext->edge_flash.enabled &&
 801af68:	f003 031f 	and.w	r3, r3, #31
                new_y =  lv_area_get_height(&page_coords) - lv_area_get_height(&scrl_coords) - vpad;   /* Bottom align */
 801af6c:	b212      	sxth	r2, r2
                if(page_ext->edge_flash.enabled &&
 801af6e:	2b01      	cmp	r3, #1
                new_y =  lv_area_get_height(&page_coords) - lv_area_get_height(&scrl_coords) - vpad;   /* Bottom align */
 801af70:	9201      	str	r2, [sp, #4]
                if(page_ext->edge_flash.enabled &&
 801af72:	d1b0      	bne.n	801aed6 <lv_page_scrollable_signal+0x1ce>
                    lv_page_start_edge_flash(page);
 801af74:	4638      	mov	r0, r7
 801af76:	f7ff fe93 	bl	801aca0 <lv_page_start_edge_flash>
                    page_ext->edge_flash.bottom_ip = 1;
 801af7a:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
 801af7e:	f043 0304 	orr.w	r3, r3, #4
 801af82:	f888 3030 	strb.w	r3, [r8, #48]	; 0x30
 801af86:	e7a6      	b.n	801aed6 <lv_page_scrollable_signal+0x1ce>
            else if(scrl_coords.x2  < page_coords.x2 - hpad) {
 801af88:	ebae 0e0b 	sub.w	lr, lr, fp
 801af8c:	45f1      	cmp	r9, lr
 801af8e:	f280 8088 	bge.w	801b0a2 <lv_page_scrollable_signal+0x39a>
                new_x =  lv_area_get_width(&page_coords) - lv_area_get_width(&scrl_coords) - hpad;   /* Right align */
 801af92:	9b02      	ldr	r3, [sp, #8]
 801af94:	1a9b      	subs	r3, r3, r2
                        page_ext->edge_flash.top_ip == 0 && page_ext->edge_flash.bottom_ip == 0) {
 801af96:	f898 2030 	ldrb.w	r2, [r8, #48]	; 0x30
                if(page_ext->edge_flash.enabled &&
 801af9a:	f002 021f 	and.w	r2, r2, #31
                new_x =  lv_area_get_width(&page_coords) - lv_area_get_width(&scrl_coords) - hpad;   /* Right align */
 801af9e:	eba3 030b 	sub.w	r3, r3, fp
                if(page_ext->edge_flash.enabled &&
 801afa2:	2a01      	cmp	r2, #1
                new_x =  lv_area_get_width(&page_coords) - lv_area_get_width(&scrl_coords) - hpad;   /* Right align */
 801afa4:	fa0f fb83 	sxth.w	fp, r3
                if(page_ext->edge_flash.enabled &&
 801afa8:	f000 80a3 	beq.w	801b0f2 <lv_page_scrollable_signal+0x3ea>
                refr_x = true;
 801afac:	2301      	movs	r3, #1
 801afae:	9303      	str	r3, [sp, #12]
 801afb0:	e770      	b.n	801ae94 <lv_page_scrollable_signal+0x18c>
                if(refr_y) lv_obj_set_y(page_parent, lv_obj_get_y(page_parent) + diff_y);
 801afb2:	9d05      	ldr	r5, [sp, #20]
 801afb4:	4628      	mov	r0, r5
 801afb6:	f7f0 ff1f 	bl	800bdf8 <lv_obj_get_y>
 801afba:	9b04      	ldr	r3, [sp, #16]
 801afbc:	4403      	add	r3, r0
 801afbe:	4628      	mov	r0, r5
 801afc0:	b219      	sxth	r1, r3
 801afc2:	f7ee fb89 	bl	80096d8 <lv_obj_set_y>
                if(refr_x) lv_obj_set_x(page_parent, lv_obj_get_x(page_parent) + diff_x);
 801afc6:	9b03      	ldr	r3, [sp, #12]
 801afc8:	2b00      	cmp	r3, #0
 801afca:	d08d      	beq.n	801aee8 <lv_page_scrollable_signal+0x1e0>
 801afcc:	e7b6      	b.n	801af3c <lv_page_scrollable_signal+0x234>
    memcpy(dest, src, sizeof(lv_area_t));
 801afce:	4642      	mov	r2, r8
 801afd0:	ab0c      	add	r3, sp, #48	; 0x30
 801afd2:	f852 0f14 	ldr.w	r0, [r2, #20]!
 801afd6:	6851      	ldr	r1, [r2, #4]
 801afd8:	c303      	stmia	r3!, {r0, r1}
                sb_area_tmp.x1 += page->coords.x1;
 801afda:	8a3a      	ldrh	r2, [r7, #16]
                lv_inv_area(&sb_area_tmp);
 801afdc:	a80c      	add	r0, sp, #48	; 0x30
                sb_area_tmp.x2 += page->coords.x1;
 801afde:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
                sb_area_tmp.x1 += page->coords.x1;
 801afe2:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
                sb_area_tmp.y1 += page->coords.y1;
 801afe6:	8a7b      	ldrh	r3, [r7, #18]
                sb_area_tmp.y2 += page->coords.y1;
 801afe8:	f8bd 6036 	ldrh.w	r6, [sp, #54]	; 0x36
                sb_area_tmp.x1 += page->coords.x1;
 801afec:	4415      	add	r5, r2
                sb_area_tmp.x2 += page->coords.x1;
 801afee:	440a      	add	r2, r1
                sb_area_tmp.y1 += page->coords.y1;
 801aff0:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
                sb_area_tmp.x1 += page->coords.x1;
 801aff4:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
                sb_area_tmp.y1 += page->coords.y1;
 801aff8:	4419      	add	r1, r3
                sb_area_tmp.y2 += page->coords.y1;
 801affa:	4433      	add	r3, r6
                sb_area_tmp.x2 += page->coords.x1;
 801affc:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
                sb_area_tmp.y2 += page->coords.y1;
 801b000:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
                sb_area_tmp.y1 += page->coords.y1;
 801b004:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
                lv_inv_area(&sb_area_tmp);
 801b008:	f7f1 fa06 	bl	800c418 <lv_inv_area>
                page_ext->sb.hor_draw = 0;
 801b00c:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
 801b010:	f36f 0300 	bfc	r3, #0, #1
 801b014:	b2da      	uxtb	r2, r3
 801b016:	f888 3024 	strb.w	r3, [r8, #36]	; 0x24
 801b01a:	e6b9      	b.n	801ad90 <lv_page_scrollable_signal+0x88>
 801b01c:	20016648 	.word	0x20016648
        if(page_ext->scroll_prop && page_ext->scroll_prop_ip == 0 && lv_indev_is_dragging(indev) == false) {
 801b020:	4648      	mov	r0, r9
 801b022:	f7ee f8f5 	bl	8009210 <lv_indev_is_dragging>
 801b026:	2800      	cmp	r0, #0
 801b028:	f47f af10 	bne.w	801ae4c <lv_page_scrollable_signal+0x144>
            if(((drag_vect.y > 0 && scrl_coords.y1 == page_coords.y1 + vpad) ||
 801b02c:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801b030:	2b00      	cmp	r3, #0
 801b032:	dd69      	ble.n	801b108 <lv_page_scrollable_signal+0x400>
 801b034:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801b038:	9901      	ldr	r1, [sp, #4]
 801b03a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801b03e:	440b      	add	r3, r1
 801b040:	429a      	cmp	r2, r3
 801b042:	f47f af03 	bne.w	801ae4c <lv_page_scrollable_signal+0x144>
               ((drag_vect.x > 0 && scrl_coords.x1 == page_coords.x1 + hpad) ||
 801b046:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
                (drag_vect.y < 0 && scrl_coords.y2 == page_coords.y2 - vpad)) &&
 801b04a:	2b00      	cmp	r3, #0
 801b04c:	dd68      	ble.n	801b120 <lv_page_scrollable_signal+0x418>
               ((drag_vect.x > 0 && scrl_coords.x1 == page_coords.x1 + hpad) ||
 801b04e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801b052:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801b056:	445b      	add	r3, fp
 801b058:	429a      	cmp	r2, r3
 801b05a:	f47f aef7 	bne.w	801ae4c <lv_page_scrollable_signal+0x144>
                if(lv_obj_get_parent(page_parent) != NULL) {    /*Do not propagate the scroll to a screen*/
 801b05e:	9805      	ldr	r0, [sp, #20]
 801b060:	f7f0 feb0 	bl	800bdc4 <lv_obj_get_parent>
 801b064:	2800      	cmp	r0, #0
 801b066:	f43f aef1 	beq.w	801ae4c <lv_page_scrollable_signal+0x144>
                    page_ext->scroll_prop_ip = 1;
 801b06a:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
 801b06e:	f043 0304 	orr.w	r3, r3, #4
 801b072:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
 801b076:	e6e9      	b.n	801ae4c <lv_page_scrollable_signal+0x144>
            else if(scrl_coords.y1  > page_coords.y1 + vpad) {
 801b078:	4408      	add	r0, r1
 801b07a:	4584      	cmp	ip, r0
 801b07c:	f77f af52 	ble.w	801af24 <lv_page_scrollable_signal+0x21c>
                        page_ext->edge_flash.top_ip == 0 && page_ext->edge_flash.bottom_ip == 0) {
 801b080:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
                if(page_ext->edge_flash.enabled &&
 801b084:	f003 031f 	and.w	r3, r3, #31
 801b088:	2b01      	cmp	r3, #1
 801b08a:	f47f af24 	bne.w	801aed6 <lv_page_scrollable_signal+0x1ce>
                    lv_page_start_edge_flash(page);
 801b08e:	4638      	mov	r0, r7
 801b090:	f7ff fe06 	bl	801aca0 <lv_page_start_edge_flash>
                    page_ext->edge_flash.top_ip = 1;
 801b094:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
 801b098:	f043 0302 	orr.w	r3, r3, #2
 801b09c:	f888 3030 	strb.w	r3, [r8, #48]	; 0x30
 801b0a0:	e719      	b.n	801aed6 <lv_page_scrollable_signal+0x1ce>
            else if(scrl_coords.x1 > page_coords.x1 + hpad) {
 801b0a2:	4458      	add	r0, fp
 801b0a4:	4584      	cmp	ip, r0
 801b0a6:	dd20      	ble.n	801b0ea <lv_page_scrollable_signal+0x3e2>
                        page_ext->edge_flash.top_ip == 0 && page_ext->edge_flash.bottom_ip == 0) {
 801b0a8:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
                if(page_ext->edge_flash.enabled &&
 801b0ac:	f003 031f 	and.w	r3, r3, #31
 801b0b0:	2b01      	cmp	r3, #1
 801b0b2:	f47f af7b 	bne.w	801afac <lv_page_scrollable_signal+0x2a4>
                    lv_page_start_edge_flash(page);
 801b0b6:	4638      	mov	r0, r7
                refr_x = true;
 801b0b8:	9303      	str	r3, [sp, #12]
                    lv_page_start_edge_flash(page);
 801b0ba:	f7ff fdf1 	bl	801aca0 <lv_page_start_edge_flash>
                    page_ext->edge_flash.left_ip = 1;
 801b0be:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
 801b0c2:	f043 0310 	orr.w	r3, r3, #16
 801b0c6:	f888 3030 	strb.w	r3, [r8, #48]	; 0x30
 801b0ca:	e6e3      	b.n	801ae94 <lv_page_scrollable_signal+0x18c>
                    new_y = ori_coords->y1 - page_coords.y1;
 801b0cc:	8873      	ldrh	r3, [r6, #2]
 801b0ce:	eba3 0a0a 	sub.w	sl, r3, sl
 801b0d2:	fa0f f38a 	sxth.w	r3, sl
 801b0d6:	9301      	str	r3, [sp, #4]
 801b0d8:	e6fd      	b.n	801aed6 <lv_page_scrollable_signal+0x1ce>
                    new_x = ori_coords->x1 - page_coords.x1;
 801b0da:	8833      	ldrh	r3, [r6, #0]
                    refr_x = true;
 801b0dc:	2201      	movs	r2, #1
                    new_x = ori_coords->x1 - page_coords.x1;
 801b0de:	eba3 0a0a 	sub.w	sl, r3, sl
                    refr_x = true;
 801b0e2:	9203      	str	r2, [sp, #12]
                    new_x = ori_coords->x1 - page_coords.x1;
 801b0e4:	fa0f fb8a 	sxth.w	fp, sl
 801b0e8:	e6d4      	b.n	801ae94 <lv_page_scrollable_signal+0x18c>
        lv_coord_t new_x = lv_obj_get_x(scrl);
 801b0ea:	f8dd b00c 	ldr.w	fp, [sp, #12]
        bool refr_x = false;
 801b0ee:	9103      	str	r1, [sp, #12]
 801b0f0:	e6d0      	b.n	801ae94 <lv_page_scrollable_signal+0x18c>
                    lv_page_start_edge_flash(page);
 801b0f2:	4638      	mov	r0, r7
                refr_x = true;
 801b0f4:	9203      	str	r2, [sp, #12]
                    lv_page_start_edge_flash(page);
 801b0f6:	f7ff fdd3 	bl	801aca0 <lv_page_start_edge_flash>
                    page_ext->edge_flash.right_ip = 1;
 801b0fa:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
 801b0fe:	f043 0308 	orr.w	r3, r3, #8
 801b102:	f888 3030 	strb.w	r3, [r8, #48]	; 0x30
 801b106:	e6c5      	b.n	801ae94 <lv_page_scrollable_signal+0x18c>
            if(((drag_vect.y > 0 && scrl_coords.y1 == page_coords.y1 + vpad) ||
 801b108:	f43f aea0 	beq.w	801ae4c <lv_page_scrollable_signal+0x144>
                (drag_vect.y < 0 && scrl_coords.y2 == page_coords.y2 - vpad)) &&
 801b10c:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801b110:	9901      	ldr	r1, [sp, #4]
 801b112:	f9bd 2036 	ldrsh.w	r2, [sp, #54]	; 0x36
 801b116:	1a5b      	subs	r3, r3, r1
 801b118:	429a      	cmp	r2, r3
 801b11a:	f47f ae97 	bne.w	801ae4c <lv_page_scrollable_signal+0x144>
 801b11e:	e792      	b.n	801b046 <lv_page_scrollable_signal+0x33e>
               ((drag_vect.x > 0 && scrl_coords.x1 == page_coords.x1 + hpad) ||
 801b120:	f43f ae94 	beq.w	801ae4c <lv_page_scrollable_signal+0x144>
                (drag_vect.x < 0 && scrl_coords.x2 == page_coords.x2 - hpad))) {
 801b124:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801b128:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801b12c:	eba3 030b 	sub.w	r3, r3, fp
 801b130:	429a      	cmp	r2, r3
 801b132:	f47f ae8b 	bne.w	801ae4c <lv_page_scrollable_signal+0x144>
 801b136:	e792      	b.n	801b05e <lv_page_scrollable_signal+0x356>

0801b138 <lv_slider_design>:
 * @param return true/false, depends on 'mode'
 */
static bool lv_slider_design(lv_obj_t * slider, const lv_area_t * mask, lv_design_mode_t mode)
{
    /*Return false if the object is not covers the mask_p area*/
    if(mode == LV_DESIGN_COVER_CHK) {
 801b138:	2a02      	cmp	r2, #2
 801b13a:	f000 8160 	beq.w	801b3fe <lv_slider_design+0x2c6>
        return false;
    }
    /*Draw the object*/
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 801b13e:	b10a      	cbz	r2, 801b144 <lv_slider_design+0xc>
    /*Post draw when the children are drawn*/
    else if(mode == LV_DESIGN_DRAW_POST) {

    }

    return true;
 801b140:	2001      	movs	r0, #1
 801b142:	4770      	bx	lr
{
 801b144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b148:	4604      	mov	r4, r0
 801b14a:	b0a1      	sub	sp, #132	; 0x84
 801b14c:	4615      	mov	r5, r2
 801b14e:	9104      	str	r1, [sp, #16]
        lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 801b150:	f7f0 fee2 	bl	800bf18 <lv_obj_get_ext_attr>
 801b154:	9001      	str	r0, [sp, #4]
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 801b156:	4620      	mov	r0, r4
 801b158:	f7f0 fede 	bl	800bf18 <lv_obj_get_ext_attr>
            style = lv_bar_get_style(slider, LV_BAR_STYLE_BG);
 801b15c:	4629      	mov	r1, r5
 801b15e:	4620      	mov	r0, r4
        lv_area_copy(&area_bg, &slider->coords);
 801b160:	4625      	mov	r5, r4
            style = lv_bar_get_style(slider, LV_BAR_STYLE_BG);
 801b162:	f7f9 fbc3 	bl	80148ec <lv_bar_get_style>
 801b166:	4680      	mov	r8, r0
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 801b168:	4620      	mov	r0, r4
    memcpy(dest, src, sizeof(lv_area_t));
 801b16a:	ae0a      	add	r6, sp, #40	; 0x28
 801b16c:	f7f0 fed4 	bl	800bf18 <lv_obj_get_ext_attr>
            style = ext->style_knob;
 801b170:	6903      	ldr	r3, [r0, #16]
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 801b172:	4620      	mov	r0, r4
 801b174:	4637      	mov	r7, r6
            style = ext->style_knob;
 801b176:	9306      	str	r3, [sp, #24]
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 801b178:	f7f0 fece 	bl	800bf18 <lv_obj_get_ext_attr>
            style = lv_bar_get_style(slider, LV_BAR_STYLE_INDIC);
 801b17c:	2101      	movs	r1, #1
 801b17e:	4620      	mov	r0, r4
 801b180:	f7f9 fbb4 	bl	80148ec <lv_bar_get_style>
 801b184:	9005      	str	r0, [sp, #20]
        lv_opa_t opa_scale = lv_obj_get_opa_scale(slider);
 801b186:	4620      	mov	r0, r4
 801b188:	f7f0 fea6 	bl	800bed8 <lv_obj_get_opa_scale>
    return area_p->y2 - area_p->y1 + 1;
 801b18c:	f8b4 c016 	ldrh.w	ip, [r4, #22]
 801b190:	8a63      	ldrh	r3, [r4, #18]
 801b192:	9003      	str	r0, [sp, #12]
 801b194:	f10c 0c01 	add.w	ip, ip, #1
    memcpy(dest, src, sizeof(lv_area_t));
 801b198:	f855 0f10 	ldr.w	r0, [r5, #16]!
    return area_p->y2 - area_p->y1 + 1;
 801b19c:	ebac 0c03 	sub.w	ip, ip, r3
    return area_p->x2 - area_p->x1 + 1;
 801b1a0:	8aa2      	ldrh	r2, [r4, #20]
    memcpy(dest, src, sizeof(lv_area_t));
 801b1a2:	6869      	ldr	r1, [r5, #4]
    return area_p->y2 - area_p->y1 + 1;
 801b1a4:	fa1f f38c 	uxth.w	r3, ip
    return area_p->x2 - area_p->x1 + 1;
 801b1a8:	f8b4 e010 	ldrh.w	lr, [r4, #16]
 801b1ac:	3201      	adds	r2, #1
        lv_coord_t pad_hor_bg = style_bg->body.padding.hor;
 801b1ae:	f9b8 a022 	ldrsh.w	sl, [r8, #34]	; 0x22
    return area_p->y2 - area_p->y1 + 1;
 801b1b2:	9309      	str	r3, [sp, #36]	; 0x24
 801b1b4:	b21b      	sxth	r3, r3
    return area_p->x2 - area_p->x1 + 1;
 801b1b6:	eba2 020e 	sub.w	r2, r2, lr
        lv_coord_t pad_ver_bg = style_bg->body.padding.ver;
 801b1ba:	f9b8 e020 	ldrsh.w	lr, [r8, #32]
    return area_p->y2 - area_p->y1 + 1;
 801b1be:	9302      	str	r3, [sp, #8]
    return area_p->x2 - area_p->x1 + 1;
 801b1c0:	b292      	uxth	r2, r2
        if(pad_ver_bg * 2 + LV_SLIDER_SIZE_MIN > lv_area_get_height(&area_bg)) {
 801b1c2:	f10e 0902 	add.w	r9, lr, #2
    memcpy(dest, src, sizeof(lv_area_t));
 801b1c6:	c703      	stmia	r7!, {r0, r1}
    return area_p->y2 - area_p->y1 + 1;
 801b1c8:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 801b1cc:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
 801b1d0:	f10c 0001 	add.w	r0, ip, #1
    return area_p->x2 - area_p->x1 + 1;
 801b1d4:	9208      	str	r2, [sp, #32]
 801b1d6:	b212      	sxth	r2, r2
    return area_p->y2 - area_p->y1 + 1;
 801b1d8:	1a40      	subs	r0, r0, r1
    return area_p->x2 - area_p->x1 + 1;
 801b1da:	9200      	str	r2, [sp, #0]
 801b1dc:	b200      	sxth	r0, r0
 801b1de:	ebb0 0f49 	cmp.w	r0, r9, lsl #1
 801b1e2:	da03      	bge.n	801b1ec <lv_slider_design+0xb4>
            pad_ver_bg = (lv_area_get_height(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 801b1e4:	f1a0 0e04 	sub.w	lr, r0, #4
 801b1e8:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 801b1ec:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
        if(pad_hor_bg * 2 + LV_SLIDER_SIZE_MIN > lv_area_get_width(&area_bg)) {
 801b1f0:	f10a 0902 	add.w	r9, sl, #2
 801b1f4:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
 801b1f8:	1c42      	adds	r2, r0, #1
 801b1fa:	1bd2      	subs	r2, r2, r7
 801b1fc:	b212      	sxth	r2, r2
 801b1fe:	ebb2 0f49 	cmp.w	r2, r9, lsl #1
 801b202:	da02      	bge.n	801b20a <lv_slider_design+0xd2>
            pad_hor_bg = (lv_area_get_width(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 801b204:	1f13      	subs	r3, r2, #4
 801b206:	ea4f 0a63 	mov.w	sl, r3, asr #1
        if(ext->knob_in) {  /*Enable extra size if the knob is inside */
 801b20a:	9b01      	ldr	r3, [sp, #4]
 801b20c:	7d9a      	ldrb	r2, [r3, #22]
 801b20e:	f012 0201 	ands.w	r2, r2, #1
 801b212:	f040 80d7 	bne.w	801b3c4 <lv_slider_design+0x28c>
            area_bg.x1 += slider_w < slider_h ? pad_hor_bg : 0;   /*Pad only for vertical slider*/
 801b216:	9b00      	ldr	r3, [sp, #0]
 801b218:	4699      	mov	r9, r3
 801b21a:	9b02      	ldr	r3, [sp, #8]
 801b21c:	4599      	cmp	r9, r3
 801b21e:	f280 8136 	bge.w	801b48e <lv_slider_design+0x356>
 801b222:	fa1f f38a 	uxth.w	r3, sl
 801b226:	441f      	add	r7, r3
            area_bg.x2 -= slider_w < slider_h ? pad_hor_bg : 0;   /*Pad only for vertical slider*/
 801b228:	1ac3      	subs	r3, r0, r3
            area_bg.x1 += slider_w < slider_h ? pad_hor_bg : 0;   /*Pad only for vertical slider*/
 801b22a:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
            area_bg.x2 -= slider_w < slider_h ? pad_hor_bg : 0;   /*Pad only for vertical slider*/
 801b22e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            area_bg.y1 += slider_w > slider_h ? pad_ver_bg : 0;   /*Pad only for horizontal slider*/
 801b232:	4411      	add	r1, r2
            area_bg.y2 -= slider_w > slider_h ? pad_ver_bg : 0;   /*Pad only for horizontal slider*/
 801b234:	ebac 0c02 	sub.w	ip, ip, r2
        if(lv_obj_is_focused(slider)) {
 801b238:	4620      	mov	r0, r4
            lv_style_copy(&style_tmp, style_bg);
 801b23a:	af0e      	add	r7, sp, #56	; 0x38
            area_bg.y1 += slider_w > slider_h ? pad_ver_bg : 0;   /*Pad only for horizontal slider*/
 801b23c:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
            area_bg.y2 -= slider_w > slider_h ? pad_ver_bg : 0;   /*Pad only for horizontal slider*/
 801b240:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
        if(lv_obj_is_focused(slider)) {
 801b244:	f7f0 fe6c 	bl	800bf20 <lv_obj_is_focused>
 801b248:	2800      	cmp	r0, #0
 801b24a:	f000 80d1 	beq.w	801b3f0 <lv_slider_design+0x2b8>
            lv_style_copy(&style_tmp, style_bg);
 801b24e:	4641      	mov	r1, r8
 801b250:	4638      	mov	r0, r7
 801b252:	f7f1 fb5f 	bl	800c914 <lv_style_copy>
            style_tmp.body.border.width = 0;
 801b256:	f04f 0e00 	mov.w	lr, #0
            lv_draw_rect(&area_bg, mask, &style_tmp, opa_scale);
 801b25a:	463a      	mov	r2, r7
 801b25c:	9b03      	ldr	r3, [sp, #12]
 801b25e:	9904      	ldr	r1, [sp, #16]
 801b260:	4630      	mov	r0, r6
            style_tmp.body.border.width = 0;
 801b262:	f8ad e04c 	strh.w	lr, [sp, #76]	; 0x4c
            lv_draw_rect(&area_bg, mask, &style_tmp, opa_scale);
 801b266:	f7f4 fd15 	bl	800fc94 <lv_draw_rect>
    return area_p->y2 - area_p->y1 + 1;
 801b26a:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
    memcpy(dest, src, sizeof(lv_area_t));
 801b26e:	f10d 0930 	add.w	r9, sp, #48	; 0x30
        lv_coord_t pad_ver_indic = style_indic->body.padding.ver;
 801b272:	9905      	ldr	r1, [sp, #20]
    return area_p->y2 - area_p->y1 + 1;
 801b274:	f8bd a02a 	ldrh.w	sl, [sp, #42]	; 0x2a
 801b278:	f10c 0201 	add.w	r2, ip, #1
 801b27c:	f9b1 e020 	ldrsh.w	lr, [r1, #32]
 801b280:	eba2 020a 	sub.w	r2, r2, sl
        lv_coord_t pad_hor_indic = style_indic->body.padding.hor;
 801b284:	f9b1 3022 	ldrsh.w	r3, [r1, #34]	; 0x22
        if(pad_ver_indic * 2 + LV_SLIDER_SIZE_MIN > lv_area_get_height(&area_bg)) {
 801b288:	f10e 0b02 	add.w	fp, lr, #2
 801b28c:	b212      	sxth	r2, r2
    memcpy(dest, src, sizeof(lv_area_t));
 801b28e:	e896 0003 	ldmia.w	r6, {r0, r1}
 801b292:	ebb2 0f4b 	cmp.w	r2, fp, lsl #1
 801b296:	e889 0003 	stmia.w	r9, {r0, r1}
 801b29a:	da02      	bge.n	801b2a2 <lv_slider_design+0x16a>
            pad_ver_indic = (lv_area_get_height(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 801b29c:	3a04      	subs	r2, #4
 801b29e:	ea4f 0e62 	mov.w	lr, r2, asr #1
    return area_p->x2 - area_p->x1 + 1;
 801b2a2:	f8bd b02c 	ldrh.w	fp, [sp, #44]	; 0x2c
        if(pad_hor_indic * 2 + LV_SLIDER_SIZE_MIN > lv_area_get_width(&area_bg)) {
 801b2a6:	1c98      	adds	r0, r3, #2
 801b2a8:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801b2ac:	f10b 0201 	add.w	r2, fp, #1
 801b2b0:	1a52      	subs	r2, r2, r1
 801b2b2:	b212      	sxth	r2, r2
 801b2b4:	ebb2 0f40 	cmp.w	r2, r0, lsl #1
 801b2b8:	da01      	bge.n	801b2be <lv_slider_design+0x186>
            pad_hor_indic = (lv_area_get_width(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 801b2ba:	1f13      	subs	r3, r2, #4
 801b2bc:	105b      	asrs	r3, r3, #1
        area_indic.x1 += pad_hor_indic;
 801b2be:	b29b      	uxth	r3, r3
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 801b2c0:	4620      	mov	r0, r4
        area_indic.y1 += pad_ver_indic;
 801b2c2:	fa1f fe8e 	uxth.w	lr, lr
        area_indic.x1 += pad_hor_indic;
 801b2c6:	4419      	add	r1, r3
        area_indic.x2 -= pad_hor_indic;
 801b2c8:	ebab 0303 	sub.w	r3, fp, r3
        area_indic.y1 += pad_ver_indic;
 801b2cc:	44f2      	add	sl, lr
        area_indic.y2 -= pad_ver_indic;
 801b2ce:	ebac 0e0e 	sub.w	lr, ip, lr
        area_indic.x1 += pad_hor_indic;
 801b2d2:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
        area_indic.x2 -= pad_hor_indic;
 801b2d6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
        area_indic.y1 += pad_ver_indic;
 801b2da:	f8ad a032 	strh.w	sl, [sp, #50]	; 0x32
        area_indic.y2 -= pad_ver_indic;
 801b2de:	f8ad e036 	strh.w	lr, [sp, #54]	; 0x36
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 801b2e2:	f7f0 fe19 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->drag_value != LV_SLIDER_NOT_PRESSED) return ext->drag_value;
 801b2e6:	f9b0 b014 	ldrsh.w	fp, [r0, #20]
 801b2ea:	f51b 4f00 	cmn.w	fp, #32768	; 0x8000
 801b2ee:	f000 80f9 	beq.w	801b4e4 <lv_slider_design+0x3ac>
 * @param slider pointer to a slider object
 * @return the minimum value of the slider
 */
static inline int16_t lv_slider_get_min_value(const lv_obj_t * slider)
{
    return lv_bar_get_min_value(slider);
 801b2f2:	4620      	mov	r0, r4
 801b2f4:	f7f9 faee 	bl	80148d4 <lv_bar_get_min_value>
 801b2f8:	9007      	str	r0, [sp, #28]
 * @param slider pointer to a slider object
 * @return the maximum value of the slider
 */
static inline int16_t lv_slider_get_max_value(const lv_obj_t * slider)
{
    return lv_bar_get_max_value(slider);
 801b2fa:	4620      	mov	r0, r4
 801b2fc:	f7f9 faf0 	bl	80148e0 <lv_bar_get_max_value>
        if(ext->drag_value != LV_SLIDER_NOT_PRESSED) cur_value = ext->drag_value;
 801b300:	9b01      	ldr	r3, [sp, #4]
        if(slider_w >= slider_h) {
 801b302:	9a02      	ldr	r2, [sp, #8]
        if(ext->drag_value != LV_SLIDER_NOT_PRESSED) cur_value = ext->drag_value;
 801b304:	f9b3 1014 	ldrsh.w	r1, [r3, #20]
        if(slider_w >= slider_h) {
 801b308:	9b00      	ldr	r3, [sp, #0]
        lv_coord_t cur_value = lv_slider_get_value(slider);
 801b30a:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 801b30e:	bf08      	it	eq
 801b310:	4659      	moveq	r1, fp
        if(slider_w >= slider_h) {
 801b312:	4293      	cmp	r3, r2
 801b314:	9a07      	ldr	r2, [sp, #28]
 801b316:	f2c0 8091 	blt.w	801b43c <lv_slider_design+0x304>
 801b31a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
            area_indic.x2 = (int32_t)((int32_t)(lv_area_get_width(&area_indic)) * (cur_value - min_value)) / (max_value - min_value);
 801b31e:	eba1 0b02 	sub.w	fp, r1, r2
 801b322:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 801b326:	eba0 0a02 	sub.w	sl, r0, r2
 801b32a:	3301      	adds	r3, #1
            area_indic.x2 = area_indic.x1 + area_indic.x2 - 1;
 801b32c:	f10e 30ff 	add.w	r0, lr, #4294967295
 801b330:	eba3 030e 	sub.w	r3, r3, lr
            area_indic.x2 = (int32_t)((int32_t)(lv_area_get_width(&area_indic)) * (cur_value - min_value)) / (max_value - min_value);
 801b334:	b21b      	sxth	r3, r3
 801b336:	fb0b f303 	mul.w	r3, fp, r3
 801b33a:	fb93 f3fa 	sdiv	r3, r3, sl
            area_indic.x2 = area_indic.x1 + area_indic.x2 - 1;
 801b33e:	4403      	add	r3, r0
 801b340:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
        if(cur_value != min_value) lv_draw_rect(&area_indic, mask, style_indic, opa_scale);
 801b344:	428a      	cmp	r2, r1
 801b346:	d005      	beq.n	801b354 <lv_slider_design+0x21c>
 801b348:	9a05      	ldr	r2, [sp, #20]
 801b34a:	4648      	mov	r0, r9
 801b34c:	9b03      	ldr	r3, [sp, #12]
 801b34e:	9904      	ldr	r1, [sp, #16]
 801b350:	f7f4 fca0 	bl	800fc94 <lv_draw_rect>
        if(lv_obj_is_focused(slider)) {
 801b354:	4620      	mov	r0, r4
 801b356:	f7f0 fde3 	bl	800bf20 <lv_obj_is_focused>
 801b35a:	2800      	cmp	r0, #0
 801b35c:	f040 8083 	bne.w	801b466 <lv_slider_design+0x32e>
    memcpy(dest, src, sizeof(lv_area_t));
 801b360:	6869      	ldr	r1, [r5, #4]
 801b362:	463b      	mov	r3, r7
 801b364:	6828      	ldr	r0, [r5, #0]
        if(slider_w >= slider_h) {
 801b366:	9a02      	ldr	r2, [sp, #8]
 801b368:	c303      	stmia	r3!, {r0, r1}
 801b36a:	9b00      	ldr	r3, [sp, #0]
 801b36c:	4619      	mov	r1, r3
            if(ext->knob_in == 0) {
 801b36e:	9b01      	ldr	r3, [sp, #4]
        if(slider_w >= slider_h) {
 801b370:	4291      	cmp	r1, r2
            if(ext->knob_in == 0) {
 801b372:	7d9b      	ldrb	r3, [r3, #22]
        if(slider_w >= slider_h) {
 801b374:	db45      	blt.n	801b402 <lv_slider_design+0x2ca>
            if(ext->knob_in == 0) {
 801b376:	07d9      	lsls	r1, r3, #31
 801b378:	f100 808d 	bmi.w	801b496 <lv_slider_design+0x35e>
                knob_area.x1 = area_indic.x2 - slider_h / 2;
 801b37c:	4613      	mov	r3, r2
                knob_area.x2 = knob_area.x1 + slider_h - 1;
 801b37e:	9909      	ldr	r1, [sp, #36]	; 0x24
                knob_area.x1 = area_indic.x2 - slider_h / 2;
 801b380:	2b00      	cmp	r3, #0
 801b382:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
                knob_area.x2 = knob_area.x1 + slider_h - 1;
 801b386:	f101 3cff 	add.w	ip, r1, #4294967295
                knob_area.x1 = area_indic.x2 - slider_h / 2;
 801b38a:	bfb8      	it	lt
 801b38c:	3201      	addlt	r2, #1
 801b38e:	eba3 0362 	sub.w	r3, r3, r2, asr #1
 801b392:	b29b      	uxth	r3, r3
                knob_area.x2 = knob_area.x1 + slider_h - 1;
 801b394:	449c      	add	ip, r3
                knob_area.x1 = area_indic.x2 - slider_h / 2;
 801b396:	b21b      	sxth	r3, r3
                knob_area.x2 = knob_area.x1 + slider_h - 1;
 801b398:	fa0f fc8c 	sxth.w	ip, ip
            knob_area.y1 = slider->coords.y1;
 801b39c:	8a61      	ldrh	r1, [r4, #18]
            knob_area.y2 = slider->coords.y2;
 801b39e:	8ae2      	ldrh	r2, [r4, #22]
 801b3a0:	f8ad c03c 	strh.w	ip, [sp, #60]	; 0x3c
 801b3a4:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
            knob_area.y1 = slider->coords.y1;
 801b3a8:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
            knob_area.y2 = slider->coords.y2;
 801b3ac:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
        lv_draw_rect(&knob_area, mask, style_knob, opa_scale);
 801b3b0:	4638      	mov	r0, r7
 801b3b2:	9b03      	ldr	r3, [sp, #12]
 801b3b4:	9a06      	ldr	r2, [sp, #24]
 801b3b6:	9904      	ldr	r1, [sp, #16]
 801b3b8:	f7f4 fc6c 	bl	800fc94 <lv_draw_rect>
 801b3bc:	2001      	movs	r0, #1
}
 801b3be:	b021      	add	sp, #132	; 0x84
 801b3c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            area_bg.x1 += pad_hor_bg;
 801b3c4:	fa1f f38a 	uxth.w	r3, sl
            area_bg.x2 -= pad_hor_bg;
 801b3c8:	1ac0      	subs	r0, r0, r3
            area_bg.x1 += pad_hor_bg;
 801b3ca:	441f      	add	r7, r3
            area_bg.y1 += pad_hor_bg;
 801b3cc:	4419      	add	r1, r3
            area_bg.y2 -= pad_hor_bg;
 801b3ce:	ebac 0303 	sub.w	r3, ip, r3
            area_bg.x2 -= pad_hor_bg;
 801b3d2:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
        if(lv_obj_is_focused(slider)) {
 801b3d6:	4620      	mov	r0, r4
            area_bg.x1 += pad_hor_bg;
 801b3d8:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
            lv_style_copy(&style_tmp, style_bg);
 801b3dc:	af0e      	add	r7, sp, #56	; 0x38
            area_bg.y1 += pad_hor_bg;
 801b3de:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
            area_bg.y2 -= pad_hor_bg;
 801b3e2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        if(lv_obj_is_focused(slider)) {
 801b3e6:	f7f0 fd9b 	bl	800bf20 <lv_obj_is_focused>
 801b3ea:	2800      	cmp	r0, #0
 801b3ec:	f47f af2f 	bne.w	801b24e <lv_slider_design+0x116>
            lv_draw_rect(&area_bg, mask, style_bg, opa_scale);
 801b3f0:	9b03      	ldr	r3, [sp, #12]
 801b3f2:	4642      	mov	r2, r8
 801b3f4:	9904      	ldr	r1, [sp, #16]
 801b3f6:	4630      	mov	r0, r6
 801b3f8:	f7f4 fc4c 	bl	800fc94 <lv_draw_rect>
 801b3fc:	e735      	b.n	801b26a <lv_slider_design+0x132>
        return false;
 801b3fe:	2000      	movs	r0, #0
 801b400:	4770      	bx	lr
            if(ext->knob_in == 0) {
 801b402:	07db      	lsls	r3, r3, #31
 801b404:	d459      	bmi.n	801b4ba <lv_slider_design+0x382>
                knob_area.y1 = area_indic.y1 - slider_w / 2;
 801b406:	9b00      	ldr	r3, [sp, #0]
                knob_area.y2 = knob_area.y1 + slider_w - 1;
 801b408:	9a08      	ldr	r2, [sp, #32]
                knob_area.y1 = area_indic.y1 - slider_w / 2;
 801b40a:	2b00      	cmp	r3, #0
                knob_area.y2 = knob_area.y1 + slider_w - 1;
 801b40c:	f102 32ff 	add.w	r2, r2, #4294967295
                knob_area.y1 = area_indic.y1 - slider_w / 2;
 801b410:	4619      	mov	r1, r3
 801b412:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801b416:	bfb8      	it	lt
 801b418:	3101      	addlt	r1, #1
 801b41a:	eba3 0361 	sub.w	r3, r3, r1, asr #1
 801b41e:	b29b      	uxth	r3, r3
                knob_area.y2 = knob_area.y1 + slider_w - 1;
 801b420:	441a      	add	r2, r3
                knob_area.y1 = area_indic.y1 - slider_w / 2;
 801b422:	b21b      	sxth	r3, r3
                knob_area.y2 = knob_area.y1 + slider_w - 1;
 801b424:	b212      	sxth	r2, r2
            knob_area.x1 = slider->coords.x1;
 801b426:	8a20      	ldrh	r0, [r4, #16]
            knob_area.x2 = slider->coords.x2;
 801b428:	8aa1      	ldrh	r1, [r4, #20]
 801b42a:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801b42e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
            knob_area.x1 = slider->coords.x1;
 801b432:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
            knob_area.x2 = slider->coords.x2;
 801b436:	f8ad 103c 	strh.w	r1, [sp, #60]	; 0x3c
 801b43a:	e7b9      	b.n	801b3b0 <lv_slider_design+0x278>
 801b43c:	f8bd e036 	ldrh.w	lr, [sp, #54]	; 0x36
            area_indic.y1 = (int32_t)((int32_t)(lv_area_get_height(&area_indic)) * (cur_value - min_value)) / (max_value - min_value);
 801b440:	eba0 0a02 	sub.w	sl, r0, r2
    return area_p->y2 - area_p->y1 + 1;
 801b444:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801b448:	eba1 0b02 	sub.w	fp, r1, r2
 801b44c:	f10e 0001 	add.w	r0, lr, #1
 801b450:	b280      	uxth	r0, r0
 801b452:	1ac3      	subs	r3, r0, r3
 801b454:	b21b      	sxth	r3, r3
 801b456:	fb0b f303 	mul.w	r3, fp, r3
 801b45a:	fb93 f3fa 	sdiv	r3, r3, sl
            area_indic.y1 = area_indic.y2 - area_indic.y1 + 1;
 801b45e:	1ac3      	subs	r3, r0, r3
 801b460:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801b464:	e76e      	b.n	801b344 <lv_slider_design+0x20c>
            lv_style_copy(&style_tmp, style_bg);
 801b466:	4641      	mov	r1, r8
 801b468:	4638      	mov	r0, r7
 801b46a:	f7f1 fa53 	bl	800c914 <lv_style_copy>
            style_tmp.body.empty = 1;
 801b46e:	f89d 305e 	ldrb.w	r3, [sp, #94]	; 0x5e
            style_tmp.body.shadow.width = 0;
 801b472:	2100      	movs	r1, #0
            lv_draw_rect(&area_bg, mask, &style_tmp, opa_scale);
 801b474:	4630      	mov	r0, r6
            style_tmp.body.empty = 1;
 801b476:	f043 0601 	orr.w	r6, r3, #1
            lv_draw_rect(&area_bg, mask, &style_tmp, opa_scale);
 801b47a:	463a      	mov	r2, r7
            style_tmp.body.shadow.width = 0;
 801b47c:	f8ad 1054 	strh.w	r1, [sp, #84]	; 0x54
            lv_draw_rect(&area_bg, mask, &style_tmp, opa_scale);
 801b480:	9b03      	ldr	r3, [sp, #12]
 801b482:	9904      	ldr	r1, [sp, #16]
            style_tmp.body.empty = 1;
 801b484:	f88d 605e 	strb.w	r6, [sp, #94]	; 0x5e
            lv_draw_rect(&area_bg, mask, &style_tmp, opa_scale);
 801b488:	f7f4 fc04 	bl	800fc94 <lv_draw_rect>
 801b48c:	e768      	b.n	801b360 <lv_slider_design+0x228>
            area_bg.y1 += slider_w > slider_h ? pad_ver_bg : 0;   /*Pad only for horizontal slider*/
 801b48e:	bfc8      	it	gt
 801b490:	fa1f f28e 	uxthgt.w	r2, lr
 801b494:	e6cd      	b.n	801b232 <lv_slider_design+0xfa>
                knob_area.x1 = (int32_t)((int32_t)(slider_w - slider_h - 1) * (cur_value - min_value)) / (max_value - min_value);
 801b496:	9b00      	ldr	r3, [sp, #0]
                knob_area.x2 = knob_area.x1 + slider_h - 1;
 801b498:	9909      	ldr	r1, [sp, #36]	; 0x24
                knob_area.x1 = (int32_t)((int32_t)(slider_w - slider_h - 1) * (cur_value - min_value)) / (max_value - min_value);
 801b49a:	1a9b      	subs	r3, r3, r2
                knob_area.x1 += slider->coords.x1;
 801b49c:	8a22      	ldrh	r2, [r4, #16]
                knob_area.x2 = knob_area.x1 + slider_h - 1;
 801b49e:	f101 3cff 	add.w	ip, r1, #4294967295
                knob_area.x1 = (int32_t)((int32_t)(slider_w - slider_h - 1) * (cur_value - min_value)) / (max_value - min_value);
 801b4a2:	3b01      	subs	r3, #1
 801b4a4:	fb0b f303 	mul.w	r3, fp, r3
 801b4a8:	fb93 f3fa 	sdiv	r3, r3, sl
                knob_area.x1 += slider->coords.x1;
 801b4ac:	4413      	add	r3, r2
 801b4ae:	b29b      	uxth	r3, r3
                knob_area.x2 = knob_area.x1 + slider_h - 1;
 801b4b0:	449c      	add	ip, r3
                knob_area.x1 += slider->coords.x1;
 801b4b2:	b21b      	sxth	r3, r3
                knob_area.x2 = knob_area.x1 + slider_h - 1;
 801b4b4:	fa0f fc8c 	sxth.w	ip, ip
 801b4b8:	e770      	b.n	801b39c <lv_slider_design+0x264>
 801b4ba:	4613      	mov	r3, r2
                knob_area.y2 = (int32_t)((int32_t)(slider_h - slider_w - 1) * (cur_value - min_value)) / (max_value - min_value);
 801b4bc:	9a00      	ldr	r2, [sp, #0]
                knob_area.y2 = slider->coords.y2 - knob_area.y2;
 801b4be:	8ae1      	ldrh	r1, [r4, #22]
                knob_area.y2 = (int32_t)((int32_t)(slider_h - slider_w - 1) * (cur_value - min_value)) / (max_value - min_value);
 801b4c0:	1a9b      	subs	r3, r3, r2
                knob_area.y1 = knob_area.y2 - slider_w - 1;
 801b4c2:	9a08      	ldr	r2, [sp, #32]
                knob_area.y2 = (int32_t)((int32_t)(slider_h - slider_w - 1) * (cur_value - min_value)) / (max_value - min_value);
 801b4c4:	3b01      	subs	r3, #1
                knob_area.y1 = knob_area.y2 - slider_w - 1;
 801b4c6:	43d2      	mvns	r2, r2
                knob_area.y2 = (int32_t)((int32_t)(slider_h - slider_w - 1) * (cur_value - min_value)) / (max_value - min_value);
 801b4c8:	fb0b fb03 	mul.w	fp, fp, r3
 801b4cc:	fb9b fafa 	sdiv	sl, fp, sl
                knob_area.y2 = slider->coords.y2 - knob_area.y2;
 801b4d0:	eba1 0a0a 	sub.w	sl, r1, sl
 801b4d4:	fa1f fa8a 	uxth.w	sl, sl
                knob_area.y1 = knob_area.y2 - slider_w - 1;
 801b4d8:	eb0a 0302 	add.w	r3, sl, r2
                knob_area.y2 = slider->coords.y2 - knob_area.y2;
 801b4dc:	fa0f f28a 	sxth.w	r2, sl
                knob_area.y1 = knob_area.y2 - slider_w - 1;
 801b4e0:	b21b      	sxth	r3, r3
 801b4e2:	e7a0      	b.n	801b426 <lv_slider_design+0x2ee>
    else return lv_bar_get_value(slider);
 801b4e4:	4620      	mov	r0, r4
 801b4e6:	f7f9 f9ef 	bl	80148c8 <lv_bar_get_value>
 801b4ea:	4683      	mov	fp, r0
 801b4ec:	e701      	b.n	801b2f2 <lv_slider_design+0x1ba>
 801b4ee:	bf00      	nop

0801b4f0 <lv_slider_signal>:
static lv_res_t lv_slider_signal(lv_obj_t * slider, lv_signal_t sign, void * param)
{
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(slider, sign, param);
 801b4f0:	4bc1      	ldr	r3, [pc, #772]	; (801b7f8 <lv_slider_signal+0x308>)
{
 801b4f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    res = ancestor_signal(slider, sign, param);
 801b4f6:	681b      	ldr	r3, [r3, #0]
{
 801b4f8:	b082      	sub	sp, #8
 801b4fa:	4606      	mov	r6, r0
 801b4fc:	460d      	mov	r5, r1
 801b4fe:	4617      	mov	r7, r2
    res = ancestor_signal(slider, sign, param);
 801b500:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 801b502:	2801      	cmp	r0, #1
    res = ancestor_signal(slider, sign, param);
 801b504:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
 801b506:	d003      	beq.n	801b510 <lv_slider_signal+0x20>
        }
        buf->type[i] = "lv_slider";
    }

    return res;
}
 801b508:	4620      	mov	r0, r4
 801b50a:	b002      	add	sp, #8
 801b50c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 801b510:	4630      	mov	r0, r6
 801b512:	f7f0 fd01 	bl	800bf18 <lv_obj_get_ext_attr>
 801b516:	4680      	mov	r8, r0
    lv_coord_t w = lv_obj_get_width(slider);
 801b518:	4630      	mov	r0, r6
 801b51a:	f7f0 fc73 	bl	800be04 <lv_obj_get_width>
 801b51e:	4681      	mov	r9, r0
    lv_coord_t h = lv_obj_get_height(slider);
 801b520:	4630      	mov	r0, r6
 801b522:	f7f0 fc75 	bl	800be10 <lv_obj_get_height>
    if(sign == LV_SIGNAL_PRESSED) {
 801b526:	2d08      	cmp	r5, #8
    lv_coord_t h = lv_obj_get_height(slider);
 801b528:	4682      	mov	sl, r0
    if(sign == LV_SIGNAL_PRESSED) {
 801b52a:	f000 808d 	beq.w	801b648 <lv_slider_signal+0x158>
    } else if(sign == LV_SIGNAL_PRESSING) {
 801b52e:	2d09      	cmp	r5, #9
 801b530:	d031      	beq.n	801b596 <lv_slider_signal+0xa6>
    } else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
 801b532:	f1a5 030a 	sub.w	r3, r5, #10
 801b536:	2b01      	cmp	r3, #1
 801b538:	d967      	bls.n	801b60a <lv_slider_signal+0x11a>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 801b53a:	2d02      	cmp	r5, #2
 801b53c:	d073      	beq.n	801b626 <lv_slider_signal+0x136>
    } else if(sign == LV_SIGNAL_REFR_EXT_SIZE) {
 801b53e:	2d04      	cmp	r5, #4
 801b540:	f000 8090 	beq.w	801b664 <lv_slider_signal+0x174>
    } else if(sign == LV_SIGNAL_CONTROLL) {
 801b544:	2d12      	cmp	r5, #18
 801b546:	f000 80bc 	beq.w	801b6c2 <lv_slider_signal+0x1d2>
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 801b54a:	2d14      	cmp	r5, #20
 801b54c:	f000 8088 	beq.w	801b660 <lv_slider_signal+0x170>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801b550:	2d06      	cmp	r5, #6
 801b552:	d1d9      	bne.n	801b508 <lv_slider_signal+0x18>
            if(buf->type[i] == NULL) break;
 801b554:	683b      	ldr	r3, [r7, #0]
 801b556:	2b00      	cmp	r3, #0
 801b558:	f000 813a 	beq.w	801b7d0 <lv_slider_signal+0x2e0>
 801b55c:	687b      	ldr	r3, [r7, #4]
 801b55e:	2b00      	cmp	r3, #0
 801b560:	f000 8138 	beq.w	801b7d4 <lv_slider_signal+0x2e4>
 801b564:	68bb      	ldr	r3, [r7, #8]
 801b566:	2b00      	cmp	r3, #0
 801b568:	f000 8136 	beq.w	801b7d8 <lv_slider_signal+0x2e8>
 801b56c:	68fb      	ldr	r3, [r7, #12]
 801b56e:	2b00      	cmp	r3, #0
 801b570:	f000 8134 	beq.w	801b7dc <lv_slider_signal+0x2ec>
 801b574:	693b      	ldr	r3, [r7, #16]
 801b576:	2b00      	cmp	r3, #0
 801b578:	f000 8132 	beq.w	801b7e0 <lv_slider_signal+0x2f0>
 801b57c:	697b      	ldr	r3, [r7, #20]
 801b57e:	2b00      	cmp	r3, #0
 801b580:	f000 8130 	beq.w	801b7e4 <lv_slider_signal+0x2f4>
 801b584:	69bb      	ldr	r3, [r7, #24]
 801b586:	2b00      	cmp	r3, #0
 801b588:	bf14      	ite	ne
 801b58a:	2307      	movne	r3, #7
 801b58c:	2306      	moveq	r3, #6
        buf->type[i] = "lv_slider";
 801b58e:	4a9b      	ldr	r2, [pc, #620]	; (801b7fc <lv_slider_signal+0x30c>)
 801b590:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 801b594:	e7b8      	b.n	801b508 <lv_slider_signal+0x18>
        lv_indev_get_point(param, &p);
 801b596:	4638      	mov	r0, r7
 801b598:	a901      	add	r1, sp, #4
 801b59a:	f7ed fe27 	bl	80091ec <lv_indev_get_point>
        if(w > h) {
 801b59e:	45d1      	cmp	r9, sl
 801b5a0:	f340 80c3 	ble.w	801b72a <lv_slider_signal+0x23a>
            p.x -= slider->coords.x1 + h / 2;    /*Modify the point to shift with half knob (important on the start and end)*/
 801b5a4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801b5a8:	f1ba 0f00 	cmp.w	sl, #0
 801b5ac:	8a31      	ldrh	r1, [r6, #16]
 801b5ae:	4652      	mov	r2, sl
 801b5b0:	bfb8      	it	lt
 801b5b2:	f10a 0201 	addlt.w	r2, sl, #1
            tmp = (int32_t)((int32_t) p.x * (ext->bar.max_value - ext->bar.min_value + 1)) / (w - knob_w);
 801b5b6:	eba9 090a 	sub.w	r9, r9, sl
            p.x -= slider->coords.x1 + h / 2;    /*Modify the point to shift with half knob (important on the start and end)*/
 801b5ba:	1a5b      	subs	r3, r3, r1
            tmp = (int32_t)((int32_t) p.x * (ext->bar.max_value - ext->bar.min_value + 1)) / (w - knob_w);
 801b5bc:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
            p.x -= slider->coords.x1 + h / 2;    /*Modify the point to shift with half knob (important on the start and end)*/
 801b5c0:	eba3 0362 	sub.w	r3, r3, r2, asr #1
            tmp = (int32_t)((int32_t) p.x * (ext->bar.max_value - ext->bar.min_value + 1)) / (w - knob_w);
 801b5c4:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
            p.x -= slider->coords.x1 + h / 2;    /*Modify the point to shift with half knob (important on the start and end)*/
 801b5c8:	b21b      	sxth	r3, r3
            tmp = (int32_t)((int32_t) p.x * (ext->bar.max_value - ext->bar.min_value + 1)) / (w - knob_w);
 801b5ca:	1a88      	subs	r0, r1, r2
            p.x -= slider->coords.x1 + h / 2;    /*Modify the point to shift with half knob (important on the start and end)*/
 801b5cc:	f8ad 3004 	strh.w	r3, [sp, #4]
            tmp = (int32_t)((int32_t) p.x * (ext->bar.max_value - ext->bar.min_value + 1)) / (w - knob_w);
 801b5d0:	fb00 3303 	mla	r3, r0, r3, r3
 801b5d4:	fb93 f3f9 	sdiv	r3, r3, r9
            tmp += ext->bar.min_value;
 801b5d8:	4413      	add	r3, r2
 801b5da:	b21b      	sxth	r3, r3
        if(tmp < ext->bar.min_value) tmp = ext->bar.min_value;
 801b5dc:	4293      	cmp	r3, r2
 801b5de:	db03      	blt.n	801b5e8 <lv_slider_signal+0xf8>
 801b5e0:	428b      	cmp	r3, r1
 801b5e2:	bfa8      	it	ge
 801b5e4:	460b      	movge	r3, r1
 801b5e6:	461a      	mov	r2, r3
        if(tmp != ext->drag_value) {
 801b5e8:	f9b8 3014 	ldrsh.w	r3, [r8, #20]
 801b5ec:	4293      	cmp	r3, r2
 801b5ee:	d08b      	beq.n	801b508 <lv_slider_signal+0x18>
            ext->drag_value = tmp;
 801b5f0:	f8a8 2014 	strh.w	r2, [r8, #20]
            lv_obj_invalidate(slider);
 801b5f4:	4630      	mov	r0, r6
 801b5f6:	f7ee fb73 	bl	8009ce0 <lv_obj_invalidate>
            if(ext->action != NULL) res = ext->action(slider);
 801b5fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b5fe:	2b00      	cmp	r3, #0
 801b600:	d082      	beq.n	801b508 <lv_slider_signal+0x18>
            if(ext->action != NULL) res = ext->action(slider);
 801b602:	4630      	mov	r0, r6
 801b604:	4798      	blx	r3
 801b606:	4604      	mov	r4, r0
 801b608:	e77e      	b.n	801b508 <lv_slider_signal+0x18>
    lv_bar_set_value(slider, value);
 801b60a:	f9b8 1014 	ldrsh.w	r1, [r8, #20]
 801b60e:	4630      	mov	r0, r6
 801b610:	f7f8 fef0 	bl	80143f4 <lv_bar_set_value>
        ext->drag_value = LV_SLIDER_NOT_PRESSED;
 801b614:	f44f 4200 	mov.w	r2, #32768	; 0x8000
        if(ext->action != NULL) res = ext->action(slider);
 801b618:	f8d8 300c 	ldr.w	r3, [r8, #12]
        ext->drag_value = LV_SLIDER_NOT_PRESSED;
 801b61c:	f8a8 2014 	strh.w	r2, [r8, #20]
        if(ext->action != NULL) res = ext->action(slider);
 801b620:	2b00      	cmp	r3, #0
 801b622:	d1ee      	bne.n	801b602 <lv_slider_signal+0x112>
 801b624:	e770      	b.n	801b508 <lv_slider_signal+0x18>
        if(lv_obj_get_width(slider) != lv_area_get_width(param) ||
 801b626:	4630      	mov	r0, r6
 801b628:	f7f0 fbec 	bl	800be04 <lv_obj_get_width>
    return area_p->x2 - area_p->x1 + 1;
 801b62c:	88bb      	ldrh	r3, [r7, #4]
 801b62e:	883a      	ldrh	r2, [r7, #0]
 801b630:	3301      	adds	r3, #1
 801b632:	1a9b      	subs	r3, r3, r2
 801b634:	b21b      	sxth	r3, r3
 801b636:	4298      	cmp	r0, r3
 801b638:	f000 80a8 	beq.w	801b78c <lv_slider_signal+0x29c>
            slider->signal_func(slider, LV_SIGNAL_REFR_EXT_SIZE, NULL);
 801b63c:	69b3      	ldr	r3, [r6, #24]
 801b63e:	4630      	mov	r0, r6
 801b640:	2200      	movs	r2, #0
 801b642:	2104      	movs	r1, #4
 801b644:	4798      	blx	r3
 801b646:	e75f      	b.n	801b508 <lv_slider_signal+0x18>
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 801b648:	4630      	mov	r0, r6
 801b64a:	f7f0 fc65 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->drag_value != LV_SLIDER_NOT_PRESSED) return ext->drag_value;
 801b64e:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
 801b652:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801b656:	f000 80af 	beq.w	801b7b8 <lv_slider_signal+0x2c8>
        ext->drag_value = lv_slider_get_value(slider);
 801b65a:	f8a8 0014 	strh.w	r0, [r8, #20]
 801b65e:	e753      	b.n	801b508 <lv_slider_signal+0x18>
        *editable = true;
 801b660:	703c      	strb	r4, [r7, #0]
 801b662:	e751      	b.n	801b508 <lv_slider_signal+0x18>
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 801b664:	4630      	mov	r0, r6
 801b666:	f7f0 fc57 	bl	800bf18 <lv_obj_get_ext_attr>
            style = lv_bar_get_style(slider, LV_BAR_STYLE_BG);
 801b66a:	2100      	movs	r1, #0
 801b66c:	4630      	mov	r0, r6
 801b66e:	f7f9 f93d 	bl	80148ec <lv_bar_get_style>
 801b672:	4605      	mov	r5, r0
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 801b674:	4630      	mov	r0, r6
 801b676:	f7f0 fc4f 	bl	800bf18 <lv_obj_get_ext_attr>
        if(ext->knob_in == 0) {
 801b67a:	f898 3016 	ldrb.w	r3, [r8, #22]
        lv_coord_t shadow_w = knob_style->body.shadow.width;
 801b67e:	6902      	ldr	r2, [r0, #16]
        if(ext->knob_in == 0) {
 801b680:	07db      	lsls	r3, r3, #31
        lv_coord_t shadow_w = knob_style->body.shadow.width;
 801b682:	f9b2 101c 	ldrsh.w	r1, [r2, #28]
        if(ext->knob_in == 0) {
 801b686:	d46d      	bmi.n	801b764 <lv_slider_signal+0x274>
            lv_coord_t x = LV_MATH_MIN(w / 2 + 1 + shadow_w, h / 2 + 1 + shadow_w);
 801b688:	f1ba 0f00 	cmp.w	sl, #0
            if(slider->ext_size < x) slider->ext_size = x;
 801b68c:	f9b6 0034 	ldrsh.w	r0, [r6, #52]	; 0x34
            lv_coord_t x = LV_MATH_MIN(w / 2 + 1 + shadow_w, h / 2 + 1 + shadow_w);
 801b690:	bfb8      	it	lt
 801b692:	f10a 0a01 	addlt.w	sl, sl, #1
 801b696:	f1b9 0f00 	cmp.w	r9, #0
 801b69a:	bfb8      	it	lt
 801b69c:	f109 0901 	addlt.w	r9, r9, #1
 801b6a0:	f34a 034f 	sbfx	r3, sl, #1, #16
 801b6a4:	f349 024f 	sbfx	r2, r9, #1, #16
 801b6a8:	3301      	adds	r3, #1
 801b6aa:	3201      	adds	r2, #1
 801b6ac:	440b      	add	r3, r1
 801b6ae:	440a      	add	r2, r1
 801b6b0:	4293      	cmp	r3, r2
 801b6b2:	bfa8      	it	ge
 801b6b4:	4613      	movge	r3, r2
 801b6b6:	b21b      	sxth	r3, r3
            if(slider->ext_size < x) slider->ext_size = x;
 801b6b8:	4298      	cmp	r0, r3
 801b6ba:	f6bf af25 	bge.w	801b508 <lv_slider_signal+0x18>
 801b6be:	86b3      	strh	r3, [r6, #52]	; 0x34
 801b6c0:	e722      	b.n	801b508 <lv_slider_signal+0x18>
        ext->drag_value = LV_SLIDER_NOT_PRESSED;
 801b6c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
        char c = *((char *)param);
 801b6c6:	783d      	ldrb	r5, [r7, #0]
        lv_group_t * g = lv_obj_get_group(slider);
 801b6c8:	4630      	mov	r0, r6
        ext->drag_value = LV_SLIDER_NOT_PRESSED;
 801b6ca:	f8a8 3014 	strh.w	r3, [r8, #20]
        lv_group_t * g = lv_obj_get_group(slider);
 801b6ce:	f7f0 fc25 	bl	800bf1c <lv_obj_get_group>
 801b6d2:	4681      	mov	r9, r0
        bool editing = lv_group_get_editing(g);
 801b6d4:	f7ec fed6 	bl	8008484 <lv_group_get_editing>
 801b6d8:	4607      	mov	r7, r0
        lv_hal_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801b6da:	f7ed fd57 	bl	800918c <lv_indev_get_act>
            if(editing) lv_group_set_editing(g, false);
 801b6de:	2d0a      	cmp	r5, #10
 801b6e0:	bf14      	ite	ne
 801b6e2:	2700      	movne	r7, #0
 801b6e4:	f007 0701 	andeq.w	r7, r7, #1
        lv_hal_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801b6e8:	f7ed fd56 	bl	8009198 <lv_indev_get_type>
            if(editing) lv_group_set_editing(g, false);
 801b6ec:	b10f      	cbz	r7, 801b6f2 <lv_slider_signal+0x202>
 801b6ee:	2804      	cmp	r0, #4
 801b6f0:	d069      	beq.n	801b7c6 <lv_slider_signal+0x2d6>
        if(c == LV_GROUP_KEY_RIGHT || c == LV_GROUP_KEY_UP) {
 801b6f2:	f005 03fd 	and.w	r3, r5, #253	; 0xfd
 801b6f6:	2b11      	cmp	r3, #17
 801b6f8:	d054      	beq.n	801b7a4 <lv_slider_signal+0x2b4>
        } else if(c == LV_GROUP_KEY_LEFT || c == LV_GROUP_KEY_DOWN) {
 801b6fa:	2d14      	cmp	r5, #20
 801b6fc:	d002      	beq.n	801b704 <lv_slider_signal+0x214>
 801b6fe:	2d12      	cmp	r5, #18
 801b700:	f47f af02 	bne.w	801b508 <lv_slider_signal+0x18>
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 801b704:	4630      	mov	r0, r6
 801b706:	f7f0 fc07 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->drag_value != LV_SLIDER_NOT_PRESSED) return ext->drag_value;
 801b70a:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
 801b70e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801b712:	d069      	beq.n	801b7e8 <lv_slider_signal+0x2f8>
            lv_slider_set_value(slider, lv_slider_get_value(slider) - 1);
 801b714:	1e41      	subs	r1, r0, #1
 801b716:	4630      	mov	r0, r6
 801b718:	b209      	sxth	r1, r1
 801b71a:	f7f8 fe6b 	bl	80143f4 <lv_bar_set_value>
            if(ext->action != NULL) res = ext->action(slider);
 801b71e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b722:	2b00      	cmp	r3, #0
 801b724:	f47f af6d 	bne.w	801b602 <lv_slider_signal+0x112>
 801b728:	e6ee      	b.n	801b508 <lv_slider_signal+0x18>
            p.y -= slider->coords.y1 + w / 2;    /*Modify the point to shift with half knob (important on the start and end)*/
 801b72a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801b72e:	f1b9 0f00 	cmp.w	r9, #0
 801b732:	8a71      	ldrh	r1, [r6, #18]
 801b734:	464a      	mov	r2, r9
 801b736:	bfb8      	it	lt
 801b738:	f109 0201 	addlt.w	r2, r9, #1
            tmp = (int32_t)((int32_t) p.y * (ext->bar.max_value - ext->bar.min_value + 1)) / (h - knob_h);
 801b73c:	ebaa 0909 	sub.w	r9, sl, r9
            p.y -= slider->coords.y1 + w / 2;    /*Modify the point to shift with half knob (important on the start and end)*/
 801b740:	1a5b      	subs	r3, r3, r1
            tmp = (int32_t)((int32_t) p.y * (ext->bar.max_value - ext->bar.min_value + 1)) / (h - knob_h);
 801b742:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
            p.y -= slider->coords.y1 + w / 2;    /*Modify the point to shift with half knob (important on the start and end)*/
 801b746:	eba3 0362 	sub.w	r3, r3, r2, asr #1
            tmp = (int32_t)((int32_t) p.y * (ext->bar.max_value - ext->bar.min_value + 1)) / (h - knob_h);
 801b74a:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
            p.y -= slider->coords.y1 + w / 2;    /*Modify the point to shift with half knob (important on the start and end)*/
 801b74e:	b21b      	sxth	r3, r3
            tmp = (int32_t)((int32_t) p.y * (ext->bar.max_value - ext->bar.min_value + 1)) / (h - knob_h);
 801b750:	1a88      	subs	r0, r1, r2
            p.y -= slider->coords.y1 + w / 2;    /*Modify the point to shift with half knob (important on the start and end)*/
 801b752:	f8ad 3006 	strh.w	r3, [sp, #6]
            tmp = (int32_t)((int32_t) p.y * (ext->bar.max_value - ext->bar.min_value + 1)) / (h - knob_h);
 801b756:	fb00 3303 	mla	r3, r0, r3, r3
 801b75a:	fb93 f3f9 	sdiv	r3, r3, r9
            tmp = ext->bar.max_value - tmp;     /*Invert the value: smaller value means higher y*/
 801b75e:	1acb      	subs	r3, r1, r3
 801b760:	b21b      	sxth	r3, r3
 801b762:	e73b      	b.n	801b5dc <lv_slider_signal+0xec>
            lv_coord_t pad = LV_MATH_MIN(style->body.padding.hor, style->body.padding.ver);
 801b764:	f9b5 3020 	ldrsh.w	r3, [r5, #32]
 801b768:	f9b5 2022 	ldrsh.w	r2, [r5, #34]	; 0x22
 801b76c:	4293      	cmp	r3, r2
 801b76e:	bfa8      	it	ge
 801b770:	4613      	movge	r3, r2
            if(pad < 0) pad = -pad;
 801b772:	2b00      	cmp	r3, #0
 801b774:	db24      	blt.n	801b7c0 <lv_slider_signal+0x2d0>
            if(slider->ext_size < pad) slider->ext_size = pad;
 801b776:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
 801b77a:	4293      	cmp	r3, r2
 801b77c:	dd01      	ble.n	801b782 <lv_slider_signal+0x292>
 801b77e:	461a      	mov	r2, r3
 801b780:	86b3      	strh	r3, [r6, #52]	; 0x34
            if(slider->ext_size < shadow_w) slider->ext_size = shadow_w;
 801b782:	428a      	cmp	r2, r1
 801b784:	f6bf aec0 	bge.w	801b508 <lv_slider_signal+0x18>
 801b788:	86b1      	strh	r1, [r6, #52]	; 0x34
 801b78a:	e6bd      	b.n	801b508 <lv_slider_signal+0x18>
                lv_obj_get_height(slider) != lv_area_get_height(param)) {
 801b78c:	4630      	mov	r0, r6
 801b78e:	f7f0 fb3f 	bl	800be10 <lv_obj_get_height>
    return area_p->y2 - area_p->y1 + 1;
 801b792:	88fb      	ldrh	r3, [r7, #6]
 801b794:	887a      	ldrh	r2, [r7, #2]
 801b796:	3301      	adds	r3, #1
 801b798:	1a9b      	subs	r3, r3, r2
        if(lv_obj_get_width(slider) != lv_area_get_width(param) ||
 801b79a:	b21b      	sxth	r3, r3
 801b79c:	4298      	cmp	r0, r3
 801b79e:	f47f af4d 	bne.w	801b63c <lv_slider_signal+0x14c>
 801b7a2:	e6b1      	b.n	801b508 <lv_slider_signal+0x18>
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 801b7a4:	4630      	mov	r0, r6
 801b7a6:	f7f0 fbb7 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->drag_value != LV_SLIDER_NOT_PRESSED) return ext->drag_value;
 801b7aa:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
 801b7ae:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801b7b2:	d01d      	beq.n	801b7f0 <lv_slider_signal+0x300>
            lv_slider_set_value(slider, lv_slider_get_value(slider) + 1);
 801b7b4:	1c41      	adds	r1, r0, #1
 801b7b6:	e7ae      	b.n	801b716 <lv_slider_signal+0x226>
    else return lv_bar_get_value(slider);
 801b7b8:	4630      	mov	r0, r6
 801b7ba:	f7f9 f885 	bl	80148c8 <lv_bar_get_value>
 801b7be:	e74c      	b.n	801b65a <lv_slider_signal+0x16a>
            if(pad < 0) pad = -pad;
 801b7c0:	425b      	negs	r3, r3
 801b7c2:	b21b      	sxth	r3, r3
 801b7c4:	e7d7      	b.n	801b776 <lv_slider_signal+0x286>
            if(editing) lv_group_set_editing(g, false);
 801b7c6:	4648      	mov	r0, r9
 801b7c8:	2100      	movs	r1, #0
 801b7ca:	f7ec fe25 	bl	8008418 <lv_group_set_editing>
 801b7ce:	e790      	b.n	801b6f2 <lv_slider_signal+0x202>
            if(buf->type[i] == NULL) break;
 801b7d0:	2300      	movs	r3, #0
 801b7d2:	e6dc      	b.n	801b58e <lv_slider_signal+0x9e>
 801b7d4:	2301      	movs	r3, #1
 801b7d6:	e6da      	b.n	801b58e <lv_slider_signal+0x9e>
 801b7d8:	2302      	movs	r3, #2
 801b7da:	e6d8      	b.n	801b58e <lv_slider_signal+0x9e>
 801b7dc:	2303      	movs	r3, #3
 801b7de:	e6d6      	b.n	801b58e <lv_slider_signal+0x9e>
 801b7e0:	2304      	movs	r3, #4
 801b7e2:	e6d4      	b.n	801b58e <lv_slider_signal+0x9e>
 801b7e4:	2305      	movs	r3, #5
 801b7e6:	e6d2      	b.n	801b58e <lv_slider_signal+0x9e>
    else return lv_bar_get_value(slider);
 801b7e8:	4630      	mov	r0, r6
 801b7ea:	f7f9 f86d 	bl	80148c8 <lv_bar_get_value>
 801b7ee:	e791      	b.n	801b714 <lv_slider_signal+0x224>
 801b7f0:	4630      	mov	r0, r6
 801b7f2:	f7f9 f869 	bl	80148c8 <lv_bar_get_value>
 801b7f6:	e7dd      	b.n	801b7b4 <lv_slider_signal+0x2c4>
 801b7f8:	20016650 	.word	0x20016650
 801b7fc:	080c74b8 	.word	0x080c74b8

0801b800 <lv_slider_set_action>:
{
 801b800:	b510      	push	{r4, lr}
 801b802:	460c      	mov	r4, r1
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 801b804:	f7f0 fb88 	bl	800bf18 <lv_obj_get_ext_attr>
    ext->action = action;
 801b808:	60c4      	str	r4, [r0, #12]
 801b80a:	bd10      	pop	{r4, pc}

0801b80c <lv_slider_set_style>:
{
 801b80c:	b570      	push	{r4, r5, r6, lr}
 801b80e:	460c      	mov	r4, r1
 801b810:	4616      	mov	r6, r2
 801b812:	4605      	mov	r5, r0
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 801b814:	f7f0 fb80 	bl	800bf18 <lv_obj_get_ext_attr>
    switch(type) {
 801b818:	2c01      	cmp	r4, #1
 801b81a:	d010      	beq.n	801b83e <lv_slider_set_style+0x32>
 801b81c:	d308      	bcc.n	801b830 <lv_slider_set_style+0x24>
 801b81e:	2c02      	cmp	r4, #2
 801b820:	d105      	bne.n	801b82e <lv_slider_set_style+0x22>
            ext->style_knob = style;
 801b822:	6106      	str	r6, [r0, #16]
            lv_obj_refresh_ext_size(slider);
 801b824:	4628      	mov	r0, r5
}
 801b826:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_obj_refresh_ext_size(slider);
 801b82a:	f7f0 b9eb 	b.w	800bc04 <lv_obj_refresh_ext_size>
 801b82e:	bd70      	pop	{r4, r5, r6, pc}
            lv_bar_set_style(slider, LV_BAR_STYLE_BG, style);
 801b830:	4632      	mov	r2, r6
 801b832:	4628      	mov	r0, r5
 801b834:	2100      	movs	r1, #0
}
 801b836:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_bar_set_style(slider, LV_BAR_STYLE_BG, style);
 801b83a:	f7f9 b82f 	b.w	801489c <lv_bar_set_style>
            lv_bar_set_style(slider, LV_BAR_STYLE_INDIC, style);
 801b83e:	4632      	mov	r2, r6
 801b840:	4621      	mov	r1, r4
 801b842:	4628      	mov	r0, r5
}
 801b844:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_bar_set_style(slider, LV_BAR_STYLE_INDIC, style);
 801b848:	f7f9 b828 	b.w	801489c <lv_bar_set_style>

0801b84c <lv_slider_create>:
{
 801b84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b84e:	460f      	mov	r7, r1
    lv_obj_t * new_slider = lv_bar_create(par, copy);
 801b850:	f7f8 ff36 	bl	80146c0 <lv_bar_create>
    lv_mem_assert(new_slider);
 801b854:	2800      	cmp	r0, #0
 801b856:	d034      	beq.n	801b8c2 <lv_slider_create+0x76>
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_func(new_slider);
 801b858:	4d31      	ldr	r5, [pc, #196]	; (801b920 <lv_slider_create+0xd4>)
 801b85a:	4604      	mov	r4, r0
 801b85c:	686b      	ldr	r3, [r5, #4]
 801b85e:	2b00      	cmp	r3, #0
 801b860:	d030      	beq.n	801b8c4 <lv_slider_create+0x78>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_slider);
 801b862:	682b      	ldr	r3, [r5, #0]
 801b864:	2b00      	cmp	r3, #0
 801b866:	d033      	beq.n	801b8d0 <lv_slider_create+0x84>
    lv_slider_ext_t * ext = lv_obj_allocate_ext_attr(new_slider, sizeof(lv_slider_ext_t));
 801b868:	2118      	movs	r1, #24
 801b86a:	4620      	mov	r0, r4
 801b86c:	f7f0 f9c2 	bl	800bbf4 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 801b870:	4605      	mov	r5, r0
 801b872:	b328      	cbz	r0, 801b8c0 <lv_slider_create+0x74>
    ext->knob_in = 0;
 801b874:	7d83      	ldrb	r3, [r0, #22]
    ext->action = NULL;
 801b876:	2200      	movs	r2, #0
    ext->drag_value = LV_SLIDER_NOT_PRESSED;
 801b878:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    ext->style_knob = &lv_style_pretty;
 801b87c:	4929      	ldr	r1, [pc, #164]	; (801b924 <lv_slider_create+0xd8>)
    ext->knob_in = 0;
 801b87e:	f362 0300 	bfi	r3, r2, #0, #1
    ext->action = NULL;
 801b882:	60ea      	str	r2, [r5, #12]
    ext->drag_value = LV_SLIDER_NOT_PRESSED;
 801b884:	82a8      	strh	r0, [r5, #20]
    lv_obj_set_signal_func(new_slider, lv_slider_signal);
 801b886:	4620      	mov	r0, r4
    ext->style_knob = &lv_style_pretty;
 801b888:	6129      	str	r1, [r5, #16]
    ext->knob_in = 0;
 801b88a:	75ab      	strb	r3, [r5, #22]
    lv_obj_set_signal_func(new_slider, lv_slider_signal);
 801b88c:	4926      	ldr	r1, [pc, #152]	; (801b928 <lv_slider_create+0xdc>)
 801b88e:	f7f0 f9ad 	bl	800bbec <lv_obj_set_signal_func>
    lv_obj_set_design_func(new_slider, lv_slider_design);
 801b892:	4926      	ldr	r1, [pc, #152]	; (801b92c <lv_slider_create+0xe0>)
 801b894:	4620      	mov	r0, r4
 801b896:	f7f0 f9ab 	bl	800bbf0 <lv_obj_set_design_func>
    if(copy == NULL) {
 801b89a:	b1f7      	cbz	r7, 801b8da <lv_slider_create+0x8e>
        lv_slider_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801b89c:	4638      	mov	r0, r7
 801b89e:	f7f0 fb3b 	bl	800bf18 <lv_obj_get_ext_attr>
 801b8a2:	4603      	mov	r3, r0
        ext->knob_in = copy_ext->knob_in;
 801b8a4:	7daa      	ldrb	r2, [r5, #22]
        lv_obj_refresh_style(new_slider);
 801b8a6:	4620      	mov	r0, r4
        ext->knob_in = copy_ext->knob_in;
 801b8a8:	7d9e      	ldrb	r6, [r3, #22]
        ext->style_knob = copy_ext->style_knob;
 801b8aa:	6919      	ldr	r1, [r3, #16]
        ext->knob_in = copy_ext->knob_in;
 801b8ac:	f366 0200 	bfi	r2, r6, #0, #1
        ext->action = copy_ext->action;
 801b8b0:	68db      	ldr	r3, [r3, #12]
        ext->style_knob = copy_ext->style_knob;
 801b8b2:	6129      	str	r1, [r5, #16]
        ext->knob_in = copy_ext->knob_in;
 801b8b4:	75aa      	strb	r2, [r5, #22]
        ext->action = copy_ext->action;
 801b8b6:	60eb      	str	r3, [r5, #12]
        lv_obj_refresh_style(new_slider);
 801b8b8:	f7f0 f85a 	bl	800b970 <lv_obj_refresh_style>
}
 801b8bc:	4620      	mov	r0, r4
 801b8be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b8c0:	e7fe      	b.n	801b8c0 <lv_slider_create+0x74>
 801b8c2:	e7fe      	b.n	801b8c2 <lv_slider_create+0x76>
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_func(new_slider);
 801b8c4:	f7f0 fb26 	bl	800bf14 <lv_obj_get_design_func>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_slider);
 801b8c8:	682b      	ldr	r3, [r5, #0]
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_func(new_slider);
 801b8ca:	6068      	str	r0, [r5, #4]
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_slider);
 801b8cc:	2b00      	cmp	r3, #0
 801b8ce:	d1cb      	bne.n	801b868 <lv_slider_create+0x1c>
 801b8d0:	4620      	mov	r0, r4
 801b8d2:	f7f0 fb1d 	bl	800bf10 <lv_obj_get_signal_func>
 801b8d6:	6028      	str	r0, [r5, #0]
 801b8d8:	e7c6      	b.n	801b868 <lv_slider_create+0x1c>
        lv_obj_set_click(new_slider, true);
 801b8da:	2101      	movs	r1, #1
 801b8dc:	4620      	mov	r0, r4
 801b8de:	f7f0 f951 	bl	800bb84 <lv_obj_set_click>
        lv_obj_set_protect(new_slider, LV_PROTECT_PRESS_LOST);
 801b8e2:	2110      	movs	r1, #16
 801b8e4:	4620      	mov	r0, r4
 801b8e6:	f7f0 f973 	bl	800bbd0 <lv_obj_set_protect>
        lv_theme_t * th = lv_theme_get_current();
 801b8ea:	f002 f81d 	bl	801d928 <lv_theme_get_current>
        if(th) {
 801b8ee:	4606      	mov	r6, r0
 801b8f0:	b198      	cbz	r0, 801b91a <lv_slider_create+0xce>
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_BG, th->slider.bg);
 801b8f2:	6d82      	ldr	r2, [r0, #88]	; 0x58
 801b8f4:	4639      	mov	r1, r7
 801b8f6:	4620      	mov	r0, r4
 801b8f8:	f7ff ff88 	bl	801b80c <lv_slider_set_style>
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_INDIC, th->slider.indic);
 801b8fc:	6df2      	ldr	r2, [r6, #92]	; 0x5c
 801b8fe:	2101      	movs	r1, #1
 801b900:	4620      	mov	r0, r4
 801b902:	f7ff ff83 	bl	801b80c <lv_slider_set_style>
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_KNOB, th->slider.knob);
 801b906:	6e35      	ldr	r5, [r6, #96]	; 0x60
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 801b908:	4620      	mov	r0, r4
 801b90a:	f7f0 fb05 	bl	800bf18 <lv_obj_get_ext_attr>
            ext->style_knob = style;
 801b90e:	6105      	str	r5, [r0, #16]
            lv_obj_refresh_ext_size(slider);
 801b910:	4620      	mov	r0, r4
 801b912:	f7f0 f977 	bl	800bc04 <lv_obj_refresh_ext_size>
}
 801b916:	4620      	mov	r0, r4
 801b918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_KNOB, ext->style_knob);
 801b91a:	692d      	ldr	r5, [r5, #16]
 801b91c:	e7f4      	b.n	801b908 <lv_slider_create+0xbc>
 801b91e:	bf00      	nop
 801b920:	20016650 	.word	0x20016650
 801b924:	2001921c 	.word	0x2001921c
 801b928:	0801b4f1 	.word	0x0801b4f1
 801b92c:	0801b139 	.word	0x0801b139

0801b930 <lv_slider_get_value>:
{
 801b930:	b510      	push	{r4, lr}
 801b932:	4604      	mov	r4, r0
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 801b934:	f7f0 faf0 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->drag_value != LV_SLIDER_NOT_PRESSED) return ext->drag_value;
 801b938:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
 801b93c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801b940:	d000      	beq.n	801b944 <lv_slider_get_value+0x14>
}
 801b942:	bd10      	pop	{r4, pc}
    else return lv_bar_get_value(slider);
 801b944:	4620      	mov	r0, r4
}
 801b946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    else return lv_bar_get_value(slider);
 801b94a:	f7f8 bfbd 	b.w	80148c8 <lv_bar_get_value>
 801b94e:	bf00      	nop

0801b950 <pwd_char_hider_anim>:
 * (pwd_char_hider callback do the real job)
 * @param ta unused
 * @param x unused
 */
static void pwd_char_hider_anim(lv_obj_t * ta, int32_t x)
{
 801b950:	4770      	bx	lr
 801b952:	bf00      	nop

0801b954 <cursor_blink_anim>:
{
 801b954:	b570      	push	{r4, r5, r6, lr}
 801b956:	b082      	sub	sp, #8
 801b958:	460c      	mov	r4, r1
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801b95a:	f7f0 fadd 	bl	800bf18 <lv_obj_get_ext_attr>
    if(show != ext->cursor.state) {
 801b95e:	f890 305a 	ldrb.w	r3, [r0, #90]	; 0x5a
 801b962:	f3c3 1200 	ubfx	r2, r3, #4, #1
 801b966:	42a2      	cmp	r2, r4
 801b968:	d00b      	beq.n	801b982 <cursor_blink_anim+0x2e>
        ext->cursor.state = show == 0 ? 0 : 1;
 801b96a:	3400      	adds	r4, #0
 801b96c:	bf18      	it	ne
 801b96e:	2401      	movne	r4, #1
 801b970:	f364 1304 	bfi	r3, r4, #4, #1
        if(ext->cursor.type != LV_CURSOR_NONE &&
 801b974:	b2da      	uxtb	r2, r3
        ext->cursor.state = show == 0 ? 0 : 1;
 801b976:	f880 305a 	strb.w	r3, [r0, #90]	; 0x5a
        if(ext->cursor.type != LV_CURSOR_NONE &&
 801b97a:	0711      	lsls	r1, r2, #28
 801b97c:	d001      	beq.n	801b982 <cursor_blink_anim+0x2e>
 801b97e:	0713      	lsls	r3, r2, #28
 801b980:	d501      	bpl.n	801b986 <cursor_blink_anim+0x32>
}
 801b982:	b002      	add	sp, #8
 801b984:	bd70      	pop	{r4, r5, r6, pc}
    memcpy(dest, src, sizeof(lv_area_t));
 801b986:	4603      	mov	r3, r0
            area_tmp.x1 += ext->label->coords.x1;
 801b988:	6b85      	ldr	r5, [r0, #56]	; 0x38
 801b98a:	466c      	mov	r4, sp
 801b98c:	f853 0f50 	ldr.w	r0, [r3, #80]!
 801b990:	8a2a      	ldrh	r2, [r5, #16]
 801b992:	6859      	ldr	r1, [r3, #4]
            area_tmp.y1 += ext->label->coords.y1;
 801b994:	8a6b      	ldrh	r3, [r5, #18]
 801b996:	c403      	stmia	r4!, {r0, r1}
            area_tmp.x1 += ext->label->coords.x1;
 801b998:	f8bd 4000 	ldrh.w	r4, [sp]
            lv_inv_area(&area_tmp);
 801b99c:	4668      	mov	r0, sp
            area_tmp.x2 += ext->label->coords.x1;
 801b99e:	f8bd 6004 	ldrh.w	r6, [sp, #4]
            area_tmp.y1 += ext->label->coords.y1;
 801b9a2:	f8bd 1002 	ldrh.w	r1, [sp, #2]
            area_tmp.x1 += ext->label->coords.x1;
 801b9a6:	4414      	add	r4, r2
            area_tmp.y2 += ext->label->coords.y1;
 801b9a8:	f8bd 5006 	ldrh.w	r5, [sp, #6]
            area_tmp.x2 += ext->label->coords.x1;
 801b9ac:	4432      	add	r2, r6
            area_tmp.y1 += ext->label->coords.y1;
 801b9ae:	4419      	add	r1, r3
            area_tmp.x1 += ext->label->coords.x1;
 801b9b0:	f8ad 4000 	strh.w	r4, [sp]
            area_tmp.y2 += ext->label->coords.y1;
 801b9b4:	442b      	add	r3, r5
            area_tmp.x2 += ext->label->coords.x1;
 801b9b6:	f8ad 2004 	strh.w	r2, [sp, #4]
            area_tmp.y1 += ext->label->coords.y1;
 801b9ba:	f8ad 1002 	strh.w	r1, [sp, #2]
            area_tmp.y2 += ext->label->coords.y1;
 801b9be:	f8ad 3006 	strh.w	r3, [sp, #6]
            lv_inv_area(&area_tmp);
 801b9c2:	f7f0 fd29 	bl	800c418 <lv_inv_area>
}
 801b9c6:	b002      	add	sp, #8
 801b9c8:	bd70      	pop	{r4, r5, r6, pc}
 801b9ca:	bf00      	nop

0801b9cc <pwd_char_hider>:
/**
 * Hide all characters (convert them to '*')
 * @param ta: pointer to text area object
 */
static void pwd_char_hider(lv_obj_t * ta)
{
 801b9cc:	b538      	push	{r3, r4, r5, lr}
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801b9ce:	f7f0 faa3 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->pwd_mode != 0) {
 801b9d2:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 801b9d6:	07db      	lsls	r3, r3, #31
 801b9d8:	d400      	bmi.n	801b9dc <pwd_char_hider+0x10>
 801b9da:	bd38      	pop	{r3, r4, r5, pc}
 801b9dc:	4605      	mov	r5, r0
        char * txt = lv_label_get_text(ext->label);
 801b9de:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801b9e0:	f7fc fac2 	bl	8017f68 <lv_label_get_text>
        int16_t len = lv_txt_get_encoded_length(txt);
 801b9e4:	4b0b      	ldr	r3, [pc, #44]	; (801ba14 <pwd_char_hider+0x48>)
        char * txt = lv_label_get_text(ext->label);
 801b9e6:	4604      	mov	r4, r0
        int16_t len = lv_txt_get_encoded_length(txt);
 801b9e8:	681b      	ldr	r3, [r3, #0]
 801b9ea:	4798      	blx	r3
        bool refr = false;
        uint16_t i;
        for(i = 0; i < len; i++) {
 801b9ec:	2300      	movs	r3, #0
 801b9ee:	b200      	sxth	r0, r0
 801b9f0:	2800      	cmp	r0, #0
 801b9f2:	dd0d      	ble.n	801ba10 <pwd_char_hider+0x44>
            txt[i] = '*';
 801b9f4:	212a      	movs	r1, #42	; 0x2a
        for(i = 0; i < len; i++) {
 801b9f6:	1c5a      	adds	r2, r3, #1
            txt[i] = '*';
 801b9f8:	54e1      	strb	r1, [r4, r3]
        for(i = 0; i < len; i++) {
 801b9fa:	b293      	uxth	r3, r2
 801b9fc:	4283      	cmp	r3, r0
 801b9fe:	dbfa      	blt.n	801b9f6 <pwd_char_hider+0x2a>
            refr = true;
        }

        txt[i] = '\0';
 801ba00:	2200      	movs	r2, #0

        if(refr != false) lv_label_set_text(ext->label, txt);
 801ba02:	4621      	mov	r1, r4
        txt[i] = '\0';
 801ba04:	54e2      	strb	r2, [r4, r3]
        if(refr != false) lv_label_set_text(ext->label, txt);
 801ba06:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    }
}
 801ba08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if(refr != false) lv_label_set_text(ext->label, txt);
 801ba0c:	f7fc beee 	b.w	80187ec <lv_label_set_text>
        txt[i] = '\0';
 801ba10:	7023      	strb	r3, [r4, #0]
 801ba12:	bd38      	pop	{r3, r4, r5, pc}
 801ba14:	200002ec 	.word	0x200002ec

0801ba18 <lv_ta_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 801ba18:	2a02      	cmp	r2, #2
 801ba1a:	d00a      	beq.n	801ba32 <lv_ta_design+0x1a>
{
 801ba1c:	b510      	push	{r4, lr}
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 801ba1e:	b11a      	cbz	r2, 801ba28 <lv_ta_design+0x10>
    } else if(mode == LV_DESIGN_DRAW_POST) {
 801ba20:	2a01      	cmp	r2, #1
 801ba22:	d001      	beq.n	801ba28 <lv_ta_design+0x10>
}
 801ba24:	2001      	movs	r0, #1
 801ba26:	bd10      	pop	{r4, pc}
        ancestor_design(ta, mask, mode);
 801ba28:	4b03      	ldr	r3, [pc, #12]	; (801ba38 <lv_ta_design+0x20>)
 801ba2a:	681b      	ldr	r3, [r3, #0]
 801ba2c:	4798      	blx	r3
}
 801ba2e:	2001      	movs	r0, #1
 801ba30:	bd10      	pop	{r4, pc}
        return ancestor_design(ta, mask, mode);
 801ba32:	4b01      	ldr	r3, [pc, #4]	; (801ba38 <lv_ta_design+0x20>)
 801ba34:	681b      	ldr	r3, [r3, #0]
 801ba36:	4718      	bx	r3
 801ba38:	20016658 	.word	0x20016658

0801ba3c <lv_ta_scrollable_signal>:
    res = scrl_signal(scrl, sign, param);
 801ba3c:	4b10      	ldr	r3, [pc, #64]	; (801ba80 <lv_ta_scrollable_signal+0x44>)
{
 801ba3e:	b570      	push	{r4, r5, r6, lr}
 801ba40:	460d      	mov	r5, r1
    res = scrl_signal(scrl, sign, param);
 801ba42:	685b      	ldr	r3, [r3, #4]
{
 801ba44:	4606      	mov	r6, r0
    res = scrl_signal(scrl, sign, param);
 801ba46:	4798      	blx	r3
    if(sign == LV_SIGNAL_REFR_EXT_SIZE) {
 801ba48:	2d04      	cmp	r5, #4
    res = scrl_signal(scrl, sign, param);
 801ba4a:	4604      	mov	r4, r0
    if(sign == LV_SIGNAL_REFR_EXT_SIZE) {
 801ba4c:	d101      	bne.n	801ba52 <lv_ta_scrollable_signal+0x16>
 801ba4e:	2801      	cmp	r0, #1
 801ba50:	d001      	beq.n	801ba56 <lv_ta_scrollable_signal+0x1a>
}
 801ba52:	4620      	mov	r0, r4
 801ba54:	bd70      	pop	{r4, r5, r6, pc}
        lv_obj_t * ta = lv_obj_get_parent(scrl);
 801ba56:	4630      	mov	r0, r6
 801ba58:	f7f0 f9b4 	bl	800bdc4 <lv_obj_get_parent>
        lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801ba5c:	f7f0 fa5c 	bl	800bf18 <lv_obj_get_ext_attr>
        lv_style_t * style_label = lv_obj_get_style(ext->label);
 801ba60:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801ba62:	f7f0 f9db 	bl	800be1c <lv_obj_get_style>
 801ba66:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        scrl->ext_size = LV_MATH_MAX(scrl->ext_size, style_label->text.line_space + font_h);
 801ba68:	f9b0 3032 	ldrsh.w	r3, [r0, #50]	; 0x32
 801ba6c:	f892 2020 	ldrb.w	r2, [r2, #32]
 801ba70:	f9b6 1034 	ldrsh.w	r1, [r6, #52]	; 0x34
 801ba74:	4413      	add	r3, r2
 801ba76:	428b      	cmp	r3, r1
 801ba78:	bfb8      	it	lt
 801ba7a:	460b      	movlt	r3, r1
 801ba7c:	86b3      	strh	r3, [r6, #52]	; 0x34
 801ba7e:	e7e8      	b.n	801ba52 <lv_ta_scrollable_signal+0x16>
 801ba80:	20016658 	.word	0x20016658

0801ba84 <lv_ta_scrollable_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 801ba84:	2a02      	cmp	r2, #2
{
 801ba86:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ba8a:	b09d      	sub	sp, #116	; 0x74
    if(mode == LV_DESIGN_COVER_CHK) {
 801ba8c:	d06e      	beq.n	801bb6c <lv_ta_scrollable_design+0xe8>
 801ba8e:	4614      	mov	r4, r2
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 801ba90:	b12a      	cbz	r2, 801ba9e <lv_ta_scrollable_design+0x1a>
    } else if(mode == LV_DESIGN_DRAW_POST) {
 801ba92:	2a01      	cmp	r2, #1
 801ba94:	d00a      	beq.n	801baac <lv_ta_scrollable_design+0x28>
    return true;
 801ba96:	2001      	movs	r0, #1
}
 801ba98:	b01d      	add	sp, #116	; 0x74
 801ba9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        scrl_design(scrl, mask, mode);
 801ba9e:	4b69      	ldr	r3, [pc, #420]	; (801bc44 <lv_ta_scrollable_design+0x1c0>)
 801baa0:	689b      	ldr	r3, [r3, #8]
 801baa2:	4798      	blx	r3
    return true;
 801baa4:	2001      	movs	r0, #1
}
 801baa6:	b01d      	add	sp, #116	; 0x74
 801baa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        scrl_design(scrl, mask, mode);
 801baac:	4b65      	ldr	r3, [pc, #404]	; (801bc44 <lv_ta_scrollable_design+0x1c0>)
 801baae:	4605      	mov	r5, r0
 801bab0:	460e      	mov	r6, r1
 801bab2:	689b      	ldr	r3, [r3, #8]
 801bab4:	4798      	blx	r3
        lv_obj_t * ta = lv_obj_get_parent(scrl);
 801bab6:	4628      	mov	r0, r5
 801bab8:	f7f0 f984 	bl	800bdc4 <lv_obj_get_parent>
 801babc:	4607      	mov	r7, r0
        lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801babe:	f7f0 fa2b 	bl	800bf18 <lv_obj_get_ext_attr>
        if(ext->cursor.type == LV_CURSOR_NONE ||
 801bac2:	f890 305a 	ldrb.w	r3, [r0, #90]	; 0x5a
        lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801bac6:	4605      	mov	r5, r0
        if(ext->cursor.type == LV_CURSOR_NONE ||
 801bac8:	0719      	lsls	r1, r3, #28
 801baca:	d0e4      	beq.n	801ba96 <lv_ta_scrollable_design+0x12>
 801bacc:	071a      	lsls	r2, r3, #28
 801bace:	d4e2      	bmi.n	801ba96 <lv_ta_scrollable_design+0x12>
                (ext->cursor.type & LV_CURSOR_HIDDEN) ||
 801bad0:	06db      	lsls	r3, r3, #27
 801bad2:	d5e0      	bpl.n	801ba96 <lv_ta_scrollable_design+0x12>

}

static void get_cursor_style(lv_obj_t * ta, lv_style_t * style_res)
{
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801bad4:	4638      	mov	r0, r7
 801bad6:	f7f0 fa1f 	bl	800bf18 <lv_obj_get_ext_attr>
 801bada:	4680      	mov	r8, r0
    lv_style_t * label_style = lv_obj_get_style(ext->label);
 801badc:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801bade:	f7f0 f99d 	bl	800be1c <lv_obj_get_style>

    if(ext->cursor.style) {
 801bae2:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 801bae6:	2b00      	cmp	r3, #0
 801bae8:	d044      	beq.n	801bb74 <lv_ta_scrollable_design+0xf0>
        lv_style_copy(style_res, ext->cursor.style);
 801baea:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801baee:	4619      	mov	r1, r3
 801baf0:	4640      	mov	r0, r8
 801baf2:	f7f0 ff0f 	bl	800c914 <lv_style_copy>
        const char * txt = lv_label_get_text(ext->label);
 801baf6:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801baf8:	f7fc fa36 	bl	8017f68 <lv_label_get_text>
 801bafc:	462a      	mov	r2, r5
 801bafe:	4604      	mov	r4, r0
         cur_area.x1 += ext->label->coords.x1;
 801bb00:	f8d5 e038 	ldr.w	lr, [r5, #56]	; 0x38
 801bb04:	f852 0f50 	ldr.w	r0, [r2, #80]!
 801bb08:	ab06      	add	r3, sp, #24
 801bb0a:	6851      	ldr	r1, [r2, #4]
 801bb0c:	f8be 2010 	ldrh.w	r2, [lr, #16]
 801bb10:	c303      	stmia	r3!, {r0, r1}
         cur_area.y1 += ext->label->coords.y1;
 801bb12:	f8be 3012 	ldrh.w	r3, [lr, #18]
         lv_opa_t opa_scale = lv_obj_get_opa_scale(ta);
 801bb16:	4638      	mov	r0, r7
         cur_area.x2 += ext->label->coords.x1;
 801bb18:	f8bd e01c 	ldrh.w	lr, [sp, #28]
         cur_area.x1 += ext->label->coords.x1;
 801bb1c:	f8bd 7018 	ldrh.w	r7, [sp, #24]
         cur_area.y1 += ext->label->coords.y1;
 801bb20:	f8bd 101a 	ldrh.w	r1, [sp, #26]
         cur_area.x1 += ext->label->coords.x1;
 801bb24:	4417      	add	r7, r2
         cur_area.x2 += ext->label->coords.x1;
 801bb26:	4472      	add	r2, lr
         cur_area.y2 += ext->label->coords.y1;
 801bb28:	f8bd e01e 	ldrh.w	lr, [sp, #30]
         cur_area.y1 += ext->label->coords.y1;
 801bb2c:	4419      	add	r1, r3
         cur_area.x1 += ext->label->coords.x1;
 801bb2e:	f8ad 7018 	strh.w	r7, [sp, #24]
         cur_area.y2 += ext->label->coords.y1;
 801bb32:	4473      	add	r3, lr
         cur_area.x2 += ext->label->coords.x1;
 801bb34:	f8ad 201c 	strh.w	r2, [sp, #28]
         cur_area.y1 += ext->label->coords.y1;
 801bb38:	f8ad 101a 	strh.w	r1, [sp, #26]
         cur_area.y2 += ext->label->coords.y1;
 801bb3c:	f8ad 301e 	strh.w	r3, [sp, #30]
         lv_opa_t opa_scale = lv_obj_get_opa_scale(ta);
 801bb40:	f7f0 f9ca 	bl	800bed8 <lv_obj_get_opa_scale>
        if(ext->cursor.type == LV_CURSOR_LINE) {
 801bb44:	f895 305a 	ldrb.w	r3, [r5, #90]	; 0x5a
         lv_opa_t opa_scale = lv_obj_get_opa_scale(ta);
 801bb48:	4607      	mov	r7, r0
        if(ext->cursor.type == LV_CURSOR_LINE) {
 801bb4a:	f003 030f 	and.w	r3, r3, #15
 801bb4e:	2b01      	cmp	r3, #1
 801bb50:	d005      	beq.n	801bb5e <lv_ta_scrollable_design+0xda>
        } else if(ext->cursor.type == LV_CURSOR_BLOCK) {
 801bb52:	2b02      	cmp	r3, #2
 801bb54:	d044      	beq.n	801bbe0 <lv_ta_scrollable_design+0x15c>
        } else if(ext->cursor.type == LV_CURSOR_OUTLINE) {
 801bb56:	2b03      	cmp	r3, #3
 801bb58:	d034      	beq.n	801bbc4 <lv_ta_scrollable_design+0x140>
        } else if(ext->cursor.type == LV_CURSOR_UNDERLINE) {
 801bb5a:	2b04      	cmp	r3, #4
 801bb5c:	d19b      	bne.n	801ba96 <lv_ta_scrollable_design+0x12>
            lv_draw_rect(&cur_area, mask, &cur_style, opa_scale);
 801bb5e:	463b      	mov	r3, r7
 801bb60:	4642      	mov	r2, r8
 801bb62:	4631      	mov	r1, r6
 801bb64:	a806      	add	r0, sp, #24
 801bb66:	f7f4 f895 	bl	800fc94 <lv_draw_rect>
 801bb6a:	e794      	b.n	801ba96 <lv_ta_scrollable_design+0x12>
        return scrl_design(scrl, mask, mode);
 801bb6c:	4b35      	ldr	r3, [pc, #212]	; (801bc44 <lv_ta_scrollable_design+0x1c0>)
 801bb6e:	689b      	ldr	r3, [r3, #8]
 801bb70:	4798      	blx	r3
 801bb72:	e791      	b.n	801ba98 <lv_ta_scrollable_design+0x14>
    } else {
        /*If cursor style is not specified then use the modified label style */
        lv_style_copy(style_res, label_style);
 801bb74:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801bb78:	4601      	mov	r1, r0
 801bb7a:	9305      	str	r3, [sp, #20]
 801bb7c:	4640      	mov	r0, r8
 801bb7e:	f7f0 fec9 	bl	800c914 <lv_style_copy>
        style_res->body.border.color = clv_color_tmp;
        style_res->body.border.opa = LV_OPA_COVER;
        style_res->body.border.width = 1;
        style_res->body.shadow.width = 0;
        style_res->body.radius = 0;
        style_res->body.empty = 0;
 801bb82:	9b05      	ldr	r3, [sp, #20]
 801bb84:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
        style_res->body.border.opa = LV_OPA_COVER;
 801bb88:	21ff      	movs	r1, #255	; 0xff
        lv_color_t clv_color_tmp = style_res->text.color;        /*Make letter color to cursor color*/
 801bb8a:	9a14      	ldr	r2, [sp, #80]	; 0x50
        style_res->text.color = style_res->body.main_color;       /*In block mode the letter color will be current background color*/
 801bb8c:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
        style_res->body.empty = 0;
 801bb90:	f363 0000 	bfi	r0, r3, #0, #1
        style_res->body.border.width = 1;
 801bb94:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
        style_res->body.shadow.width = 0;
 801bb98:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
        style_res->body.radius = 0;
 801bb9c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
        style_res->body.padding.hor = 0;
 801bba0:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        style_res->body.padding.ver = 0;
 801bba4:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        style_res->line.width = 1;
 801bba8:	f8ad 406c 	strh.w	r4, [sp, #108]	; 0x6c
        style_res->body.empty = 0;
 801bbac:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
        style_res->body.grad_color = clv_color_tmp;
 801bbb0:	920c      	str	r2, [sp, #48]	; 0x30
        style_res->body.border.color = clv_color_tmp;
 801bbb2:	920e      	str	r2, [sp, #56]	; 0x38
        style_res->body.main_color = clv_color_tmp;
 801bbb4:	920b      	str	r2, [sp, #44]	; 0x2c
        style_res->text.color = style_res->body.main_color;       /*In block mode the letter color will be current background color*/
 801bbb6:	f8cd e050 	str.w	lr, [sp, #80]	; 0x50
        style_res->body.border.opa = LV_OPA_COVER;
 801bbba:	f88d 103f 	strb.w	r1, [sp, #63]	; 0x3f
        style_res->body.opa = LV_OPA_COVER;
 801bbbe:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
 801bbc2:	e798      	b.n	801baf6 <lv_ta_scrollable_design+0x72>
            cur_style.body.empty = 1;
 801bbc4:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
            if(cur_style.body.border.width == 0) cur_style.body.border.width = 1; /*Be sure the border will be drawn*/
 801bbc8:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
            cur_style.body.empty = 1;
 801bbcc:	f043 0301 	orr.w	r3, r3, #1
 801bbd0:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
            if(cur_style.body.border.width == 0) cur_style.body.border.width = 1; /*Be sure the border will be drawn*/
 801bbd4:	2a00      	cmp	r2, #0
 801bbd6:	d1c2      	bne.n	801bb5e <lv_ta_scrollable_design+0xda>
 801bbd8:	2301      	movs	r3, #1
 801bbda:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
 801bbde:	e7be      	b.n	801bb5e <lv_ta_scrollable_design+0xda>
            lv_draw_rect(&cur_area, mask, &cur_style, opa_scale);
 801bbe0:	4642      	mov	r2, r8
 801bbe2:	4631      	mov	r1, r6
 801bbe4:	4603      	mov	r3, r0
 801bbe6:	a806      	add	r0, sp, #24
 801bbe8:	f7f4 f854 	bl	800fc94 <lv_draw_rect>
            memcpy(letter_buf, &txt[ext->cursor.txt_byte_pos], lv_txt_encoded_size(&txt[ext->cursor.txt_byte_pos]));
 801bbec:	f8b5 3058 	ldrh.w	r3, [r5, #88]	; 0x58
            char letter_buf[8] = {0};
 801bbf0:	2500      	movs	r5, #0
 801bbf2:	f10d 0920 	add.w	r9, sp, #32
            memcpy(letter_buf, &txt[ext->cursor.txt_byte_pos], lv_txt_encoded_size(&txt[ext->cursor.txt_byte_pos]));
 801bbf6:	441c      	add	r4, r3
 801bbf8:	4b13      	ldr	r3, [pc, #76]	; (801bc48 <lv_ta_scrollable_design+0x1c4>)
            char letter_buf[8] = {0};
 801bbfa:	9509      	str	r5, [sp, #36]	; 0x24
            memcpy(letter_buf, &txt[ext->cursor.txt_byte_pos], lv_txt_encoded_size(&txt[ext->cursor.txt_byte_pos]));
 801bbfc:	681b      	ldr	r3, [r3, #0]
 801bbfe:	4620      	mov	r0, r4
            char letter_buf[8] = {0};
 801bc00:	9508      	str	r5, [sp, #32]
            memcpy(letter_buf, &txt[ext->cursor.txt_byte_pos], lv_txt_encoded_size(&txt[ext->cursor.txt_byte_pos]));
 801bc02:	4798      	blx	r3
 801bc04:	4621      	mov	r1, r4
 801bc06:	4602      	mov	r2, r0
 801bc08:	4648      	mov	r0, r9
 801bc0a:	f001 fee7 	bl	801d9dc <memcpy>
            cur_area.x1 += cur_style.body.padding.hor;
 801bc0e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
            cur_area.y1 += cur_style.body.padding.ver;
 801bc12:	f8bd 401a 	ldrh.w	r4, [sp, #26]
            lv_draw_label(&cur_area, mask, &cur_style, opa_scale, letter_buf, LV_TXT_FLAG_NONE, 0);
 801bc16:	463b      	mov	r3, r7
            cur_area.y1 += cur_style.body.padding.ver;
 801bc18:	f8bd 0048 	ldrh.w	r0, [sp, #72]	; 0x48
            lv_draw_label(&cur_area, mask, &cur_style, opa_scale, letter_buf, LV_TXT_FLAG_NONE, 0);
 801bc1c:	4642      	mov	r2, r8
            cur_area.x1 += cur_style.body.padding.hor;
 801bc1e:	f8bd e04a 	ldrh.w	lr, [sp, #74]	; 0x4a
            cur_area.y1 += cur_style.body.padding.ver;
 801bc22:	4404      	add	r4, r0
            lv_draw_label(&cur_area, mask, &cur_style, opa_scale, letter_buf, LV_TXT_FLAG_NONE, 0);
 801bc24:	9502      	str	r5, [sp, #8]
            cur_area.x1 += cur_style.body.padding.hor;
 801bc26:	eb01 070e 	add.w	r7, r1, lr
            lv_draw_label(&cur_area, mask, &cur_style, opa_scale, letter_buf, LV_TXT_FLAG_NONE, 0);
 801bc2a:	9501      	str	r5, [sp, #4]
 801bc2c:	4631      	mov	r1, r6
 801bc2e:	f8cd 9000 	str.w	r9, [sp]
 801bc32:	a806      	add	r0, sp, #24
            cur_area.x1 += cur_style.body.padding.hor;
 801bc34:	f8ad 7018 	strh.w	r7, [sp, #24]
            cur_area.y1 += cur_style.body.padding.ver;
 801bc38:	f8ad 401a 	strh.w	r4, [sp, #26]
            lv_draw_label(&cur_area, mask, &cur_style, opa_scale, letter_buf, LV_TXT_FLAG_NONE, 0);
 801bc3c:	f7f1 fee8 	bl	800da10 <lv_draw_label>
 801bc40:	e729      	b.n	801ba96 <lv_ta_scrollable_design+0x12>
 801bc42:	bf00      	nop
 801bc44:	20016658 	.word	0x20016658
 801bc48:	200002dc 	.word	0x200002dc

0801bc4c <refr_cursor_area>:
    }

}

static void refr_cursor_area(lv_obj_t * ta)
{
 801bc4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc50:	4606      	mov	r6, r0
 801bc52:	b09b      	sub	sp, #108	; 0x6c
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801bc54:	f7f0 f960 	bl	800bf18 <lv_obj_get_ext_attr>
 801bc58:	4604      	mov	r4, r0
    lv_style_t * label_style = lv_obj_get_style(ext->label);
 801bc5a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801bc5c:	f7f0 f8de 	bl	800be1c <lv_obj_get_style>
 801bc60:	4680      	mov	r8, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801bc62:	4630      	mov	r0, r6
 801bc64:	f7f0 f958 	bl	800bf18 <lv_obj_get_ext_attr>
 801bc68:	4605      	mov	r5, r0
    lv_style_t * label_style = lv_obj_get_style(ext->label);
 801bc6a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801bc6c:	f7f0 f8d6 	bl	800be1c <lv_obj_get_style>
    if(ext->cursor.style) {
 801bc70:	6cad      	ldr	r5, [r5, #72]	; 0x48
 801bc72:	2d00      	cmp	r5, #0
 801bc74:	f000 80b9 	beq.w	801bdea <refr_cursor_area+0x19e>
        lv_style_copy(style_res, ext->cursor.style);
 801bc78:	4629      	mov	r1, r5
 801bc7a:	a808      	add	r0, sp, #32
 801bc7c:	f7f0 fe4a 	bl	800c914 <lv_style_copy>
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801bc80:	4630      	mov	r0, r6
    uint16_t cur_pos = lv_ta_get_cursor_pos(ta);
    const char * txt = lv_label_get_text(ext->label);
    uint32_t byte_pos;
#if LV_TXT_UTF8 != 0
    byte_pos = lv_txt_encoded_get_byte_id(txt, cur_pos);
    uint32_t letter = lv_txt_encoded_next(&txt[byte_pos], NULL);
 801bc82:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 801bf38 <refr_cursor_area+0x2ec>
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801bc86:	f7f0 f947 	bl	800bf18 <lv_obj_get_ext_attr>
    return ext->cursor.pos;
 801bc8a:	f8b0 704e 	ldrh.w	r7, [r0, #78]	; 0x4e
    const char * txt = lv_label_get_text(ext->label);
 801bc8e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801bc90:	f7fc f96a 	bl	8017f68 <lv_label_get_text>
    byte_pos = lv_txt_encoded_get_byte_id(txt, cur_pos);
 801bc94:	4ba6      	ldr	r3, [pc, #664]	; (801bf30 <refr_cursor_area+0x2e4>)
    const char * txt = lv_label_get_text(ext->label);
 801bc96:	4605      	mov	r5, r0
    byte_pos = lv_txt_encoded_get_byte_id(txt, cur_pos);
 801bc98:	4639      	mov	r1, r7
 801bc9a:	681b      	ldr	r3, [r3, #0]
    const char * txt = lv_label_get_text(ext->label);
 801bc9c:	9001      	str	r0, [sp, #4]
    byte_pos = lv_txt_encoded_get_byte_id(txt, cur_pos);
 801bc9e:	4798      	blx	r3
    uint32_t letter = lv_txt_encoded_next(&txt[byte_pos], NULL);
 801bca0:	eb05 0b00 	add.w	fp, r5, r0
 801bca4:	f8da 3000 	ldr.w	r3, [sl]
    byte_pos = lv_txt_encoded_get_byte_id(txt, cur_pos);
 801bca8:	4606      	mov	r6, r0
    uint32_t letter = lv_txt_encoded_next(&txt[byte_pos], NULL);
 801bcaa:	2100      	movs	r1, #0
 801bcac:	4658      	mov	r0, fp
 801bcae:	4798      	blx	r3
 801bcb0:	4605      	mov	r5, r0
#else
    byte_pos = cur_pos;
    uint32_t letter = txt[byte_pos];
#endif

    lv_coord_t letter_h = lv_font_get_height(label_style->text.font);
 801bcb2:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
    /*Set letter_w (set not 0 on non printable but valid chars)*/
    lv_coord_t letter_w;
    if(letter == '\0' || letter == '\n' || letter == '\r') {
 801bcb6:	2d0d      	cmp	r5, #13
 801bcb8:	f890 3020 	ldrb.w	r3, [r0, #32]
 801bcbc:	9300      	str	r3, [sp, #0]
 801bcbe:	d96e      	bls.n	801bd9e <refr_cursor_area+0x152>
        letter_w = lv_font_get_width(label_style->text.font, ' ');
    } else {
        letter_w = lv_font_get_width(label_style->text.font, letter);
 801bcc0:	4629      	mov	r1, r5
 801bcc2:	f7f7 f80f 	bl	8012ce4 <lv_font_get_width>
 801bcc6:	fa0f f980 	sxth.w	r9, r0
    }

    lv_point_t letter_pos;
    lv_label_get_letter_pos(ext->label, cur_pos, &letter_pos);
 801bcca:	4639      	mov	r1, r7
 801bccc:	aa03      	add	r2, sp, #12
 801bcce:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801bcd0:	f7fc f958 	bl	8017f84 <lv_label_get_letter_pos>

    /*If the cursor is out of the text (most right) draw it to the next line*/
    if(letter_pos.x + ext->label->coords.x1 + letter_w > ext->label->coords.x2 && ext->one_line == 0 && lv_label_get_align(ext->label) != LV_LABEL_ALIGN_RIGHT) {
 801bcd4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801bcd6:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 801bcda:	f9b1 2010 	ldrsh.w	r2, [r1, #16]
 801bcde:	f9b1 7014 	ldrsh.w	r7, [r1, #20]
 801bce2:	4410      	add	r0, r2
 801bce4:	4448      	add	r0, r9
 801bce6:	42b8      	cmp	r0, r7
 801bce8:	dd05      	ble.n	801bcf6 <refr_cursor_area+0xaa>
 801bcea:	f894 7046 	ldrb.w	r7, [r4, #70]	; 0x46
 801bcee:	f017 0702 	ands.w	r7, r7, #2
 801bcf2:	f000 80bf 	beq.w	801be74 <refr_cursor_area+0x228>
    ext->cursor.txt_byte_pos = byte_pos;

    /*Draw he cursor according to the type*/
    lv_area_t cur_area;

    if(ext->cursor.type == LV_CURSOR_LINE) {
 801bcf6:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
    ext->cursor.txt_byte_pos = byte_pos;
 801bcfa:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    if(ext->cursor.type == LV_CURSOR_LINE) {
 801bcfe:	f000 000f 	and.w	r0, r0, #15
 801bd02:	2801      	cmp	r0, #1
 801bd04:	f000 80d2 	beq.w	801beac <refr_cursor_area+0x260>
        cur_area.x1 = letter_pos.x + cur_style.body.padding.hor - (cur_style.line.width >> 1) - (cur_style.line.width & 0x1);
        cur_area.y1 = letter_pos.y + cur_style.body.padding.ver;
        cur_area.x2 = letter_pos.x + cur_style.body.padding.hor + (cur_style.line.width >> 1);
        cur_area.y2 = letter_pos.y + cur_style.body.padding.ver + letter_h;
    } else if(ext->cursor.type == LV_CURSOR_BLOCK) {
 801bd08:	2802      	cmp	r0, #2
 801bd0a:	d053      	beq.n	801bdb4 <refr_cursor_area+0x168>
        cur_area.x1 = letter_pos.x - cur_style.body.padding.hor;
        cur_area.y1 = letter_pos.y - cur_style.body.padding.ver;
        cur_area.x2 = letter_pos.x + cur_style.body.padding.hor + letter_w;
        cur_area.y2 = letter_pos.y + cur_style.body.padding.ver + letter_h;

    } else if(ext->cursor.type == LV_CURSOR_OUTLINE) {
 801bd0c:	2803      	cmp	r0, #3
 801bd0e:	d051      	beq.n	801bdb4 <refr_cursor_area+0x168>
        cur_area.x1 = letter_pos.x - cur_style.body.padding.hor;
        cur_area.y1 = letter_pos.y - cur_style.body.padding.ver;
        cur_area.x2 = letter_pos.x + cur_style.body.padding.hor + letter_w;
        cur_area.y2 = letter_pos.y + cur_style.body.padding.ver + letter_h;
    } else if(ext->cursor.type == LV_CURSOR_UNDERLINE) {
 801bd10:	2804      	cmp	r0, #4
 801bd12:	f000 808d 	beq.w	801be30 <refr_cursor_area+0x1e4>
        cur_area.y2 = letter_pos.y + cur_style.body.padding.ver + letter_h + (cur_style.line.width >> 1) + (cur_style.line.width & 0x1);
    }

    /*Save the new area*/
    lv_area_t area_tmp;
    lv_area_copy(&area_tmp, &ext->cursor.area);
 801bd16:	4625      	mov	r5, r4
    area_tmp.x1 += ext->label->coords.x1;
    area_tmp.y1 += ext->label->coords.y1;
 801bd18:	8a4b      	ldrh	r3, [r1, #18]
 801bd1a:	ae06      	add	r6, sp, #24
    area_tmp.x1 += ext->label->coords.x1;
 801bd1c:	b292      	uxth	r2, r2
 801bd1e:	f855 0f50 	ldr.w	r0, [r5, #80]!
 801bd22:	6869      	ldr	r1, [r5, #4]
 801bd24:	c603      	stmia	r6!, {r0, r1}
    area_tmp.x2 += ext->label->coords.x1;
 801bd26:	f8bd 701c 	ldrh.w	r7, [sp, #28]
    area_tmp.y2 += ext->label->coords.y1;
    lv_inv_area(&area_tmp);
 801bd2a:	a806      	add	r0, sp, #24
    area_tmp.x1 += ext->label->coords.x1;
 801bd2c:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    area_tmp.y1 += ext->label->coords.y1;
 801bd30:	f8bd 101a 	ldrh.w	r1, [sp, #26]
    area_tmp.x1 += ext->label->coords.x1;
 801bd34:	4416      	add	r6, r2
    area_tmp.x2 += ext->label->coords.x1;
 801bd36:	443a      	add	r2, r7
    area_tmp.y2 += ext->label->coords.y1;
 801bd38:	f8bd 701e 	ldrh.w	r7, [sp, #30]
    area_tmp.y1 += ext->label->coords.y1;
 801bd3c:	4419      	add	r1, r3
    area_tmp.x1 += ext->label->coords.x1;
 801bd3e:	f8ad 6018 	strh.w	r6, [sp, #24]
 801bd42:	ae06      	add	r6, sp, #24
    area_tmp.y2 += ext->label->coords.y1;
 801bd44:	443b      	add	r3, r7
    area_tmp.x2 += ext->label->coords.x1;
 801bd46:	f8ad 201c 	strh.w	r2, [sp, #28]
    area_tmp.y1 += ext->label->coords.y1;
 801bd4a:	f8ad 101a 	strh.w	r1, [sp, #26]
    area_tmp.y2 += ext->label->coords.y1;
 801bd4e:	f8ad 301e 	strh.w	r3, [sp, #30]
    lv_inv_area(&area_tmp);
 801bd52:	f7f0 fb61 	bl	800c418 <lv_inv_area>
 801bd56:	ab04      	add	r3, sp, #16
 801bd58:	cb03      	ldmia	r3!, {r0, r1}
 801bd5a:	6520      	str	r0, [r4, #80]	; 0x50
 801bd5c:	6069      	str	r1, [r5, #4]
 801bd5e:	6828      	ldr	r0, [r5, #0]
 801bd60:	6869      	ldr	r1, [r5, #4]

    lv_area_copy(&ext->cursor.area, &cur_area);

    lv_area_copy(&area_tmp, &ext->cursor.area);
    area_tmp.x1 += ext->label->coords.x1;
 801bd62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801bd64:	c603      	stmia	r6!, {r0, r1}
 801bd66:	8a1a      	ldrh	r2, [r3, #16]
    area_tmp.y1 += ext->label->coords.y1;
    area_tmp.x2 += ext->label->coords.x1;
    area_tmp.y2 += ext->label->coords.y1;
    lv_inv_area(&area_tmp);
 801bd68:	a806      	add	r0, sp, #24
    area_tmp.x1 += ext->label->coords.x1;
 801bd6a:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    area_tmp.x2 += ext->label->coords.x1;
 801bd6e:	f8bd 601c 	ldrh.w	r6, [sp, #28]
    area_tmp.y1 += ext->label->coords.y1;
 801bd72:	f8bd 101a 	ldrh.w	r1, [sp, #26]
    area_tmp.x1 += ext->label->coords.x1;
 801bd76:	4414      	add	r4, r2
    area_tmp.y2 += ext->label->coords.y1;
 801bd78:	f8bd 501e 	ldrh.w	r5, [sp, #30]
    area_tmp.x2 += ext->label->coords.x1;
 801bd7c:	4432      	add	r2, r6
    area_tmp.y1 += ext->label->coords.y1;
 801bd7e:	8a5b      	ldrh	r3, [r3, #18]
    area_tmp.x1 += ext->label->coords.x1;
 801bd80:	f8ad 4018 	strh.w	r4, [sp, #24]
    area_tmp.y1 += ext->label->coords.y1;
 801bd84:	4419      	add	r1, r3
    area_tmp.y2 += ext->label->coords.y1;
 801bd86:	442b      	add	r3, r5
    area_tmp.x2 += ext->label->coords.x1;
 801bd88:	f8ad 201c 	strh.w	r2, [sp, #28]
    area_tmp.y1 += ext->label->coords.y1;
 801bd8c:	f8ad 101a 	strh.w	r1, [sp, #26]
    area_tmp.y2 += ext->label->coords.y1;
 801bd90:	f8ad 301e 	strh.w	r3, [sp, #30]
    lv_inv_area(&area_tmp);
 801bd94:	f7f0 fb40 	bl	800c418 <lv_inv_area>
}
 801bd98:	b01b      	add	sp, #108	; 0x6c
 801bd9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(letter == '\0' || letter == '\n' || letter == '\r') {
 801bd9e:	f242 4301 	movw	r3, #9217	; 0x2401
 801bda2:	40eb      	lsrs	r3, r5
 801bda4:	07da      	lsls	r2, r3, #31
 801bda6:	d58b      	bpl.n	801bcc0 <refr_cursor_area+0x74>
        letter_w = lv_font_get_width(label_style->text.font, ' ');
 801bda8:	2120      	movs	r1, #32
 801bdaa:	f7f6 ff9b 	bl	8012ce4 <lv_font_get_width>
 801bdae:	fa0f f980 	sxth.w	r9, r0
 801bdb2:	e78a      	b.n	801bcca <refr_cursor_area+0x7e>
        cur_area.x1 = letter_pos.x - cur_style.body.padding.hor;
 801bdb4:	f8bd 500c 	ldrh.w	r5, [sp, #12]
 801bdb8:	f8bd e042 	ldrh.w	lr, [sp, #66]	; 0x42
        cur_area.y1 = letter_pos.y - cur_style.body.padding.ver;
 801bdbc:	f8bd 000e 	ldrh.w	r0, [sp, #14]
        cur_area.x2 = letter_pos.x + cur_style.body.padding.hor + letter_w;
 801bdc0:	eb05 060e 	add.w	r6, r5, lr
        cur_area.y1 = letter_pos.y - cur_style.body.padding.ver;
 801bdc4:	f8bd 7040 	ldrh.w	r7, [sp, #64]	; 0x40
        cur_area.x1 = letter_pos.x - cur_style.body.padding.hor;
 801bdc8:	eba5 050e 	sub.w	r5, r5, lr
        cur_area.x2 = letter_pos.x + cur_style.body.padding.hor + letter_w;
 801bdcc:	eb06 0309 	add.w	r3, r6, r9
        cur_area.y2 = letter_pos.y + cur_style.body.padding.ver + letter_h;
 801bdd0:	19c6      	adds	r6, r0, r7
        cur_area.x1 = letter_pos.x - cur_style.body.padding.hor;
 801bdd2:	f8ad 5010 	strh.w	r5, [sp, #16]
        cur_area.y1 = letter_pos.y - cur_style.body.padding.ver;
 801bdd6:	1bc0      	subs	r0, r0, r7
        cur_area.y2 = letter_pos.y + cur_style.body.padding.ver + letter_h;
 801bdd8:	9d00      	ldr	r5, [sp, #0]
        cur_area.x2 = letter_pos.x + cur_style.body.padding.hor + letter_w;
 801bdda:	f8ad 3014 	strh.w	r3, [sp, #20]
        cur_area.y2 = letter_pos.y + cur_style.body.padding.ver + letter_h;
 801bdde:	4435      	add	r5, r6
        cur_area.y1 = letter_pos.y - cur_style.body.padding.ver;
 801bde0:	f8ad 0012 	strh.w	r0, [sp, #18]
        cur_area.y2 = letter_pos.y + cur_style.body.padding.ver + letter_h;
 801bde4:	f8ad 5016 	strh.w	r5, [sp, #22]
 801bde8:	e795      	b.n	801bd16 <refr_cursor_area+0xca>
        lv_style_copy(style_res, label_style);
 801bdea:	4601      	mov	r1, r0
 801bdec:	a808      	add	r0, sp, #32
 801bdee:	f7f0 fd91 	bl	800c914 <lv_style_copy>
        style_res->body.empty = 0;
 801bdf2:	f89d 0046 	ldrb.w	r0, [sp, #70]	; 0x46
        lv_color_t clv_color_tmp = style_res->text.color;        /*Make letter color to cursor color*/
 801bdf6:	9b12      	ldr	r3, [sp, #72]	; 0x48
        style_res->body.border.opa = LV_OPA_COVER;
 801bdf8:	21ff      	movs	r1, #255	; 0xff
        style_res->text.color = style_res->body.main_color;       /*In block mode the letter color will be current background color*/
 801bdfa:	9f09      	ldr	r7, [sp, #36]	; 0x24
        style_res->body.border.width = 1;
 801bdfc:	2201      	movs	r2, #1
        style_res->body.empty = 0;
 801bdfe:	f365 0000 	bfi	r0, r5, #0, #1
        style_res->body.shadow.width = 0;
 801be02:	f8ad 503c 	strh.w	r5, [sp, #60]	; 0x3c
        style_res->body.radius = 0;
 801be06:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
        style_res->body.padding.hor = 0;
 801be0a:	f8ad 5042 	strh.w	r5, [sp, #66]	; 0x42
        style_res->body.padding.ver = 0;
 801be0e:	f8ad 5040 	strh.w	r5, [sp, #64]	; 0x40
        style_res->body.empty = 0;
 801be12:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
        style_res->body.grad_color = clv_color_tmp;
 801be16:	930a      	str	r3, [sp, #40]	; 0x28
        style_res->body.border.color = clv_color_tmp;
 801be18:	930c      	str	r3, [sp, #48]	; 0x30
        style_res->body.main_color = clv_color_tmp;
 801be1a:	9309      	str	r3, [sp, #36]	; 0x24
        style_res->text.color = style_res->body.main_color;       /*In block mode the letter color will be current background color*/
 801be1c:	9712      	str	r7, [sp, #72]	; 0x48
        style_res->body.border.opa = LV_OPA_COVER;
 801be1e:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
        style_res->body.opa = LV_OPA_COVER;
 801be22:	f88d 102e 	strb.w	r1, [sp, #46]	; 0x2e
        style_res->body.border.width = 1;
 801be26:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
        style_res->line.width = 1;
 801be2a:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 801be2e:	e727      	b.n	801bc80 <refr_cursor_area+0x34>
        cur_area.y1 = letter_pos.y + cur_style.body.padding.ver + letter_h - (cur_style.line.width >> 1);
 801be30:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 801be34:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 801be38:	f9bd 6064 	ldrsh.w	r6, [sp, #100]	; 0x64
 801be3c:	4428      	add	r0, r5
 801be3e:	9b00      	ldr	r3, [sp, #0]
        cur_area.x1 = letter_pos.x + cur_style.body.padding.hor;
 801be40:	f8bd 500c 	ldrh.w	r5, [sp, #12]
        cur_area.y1 = letter_pos.y + cur_style.body.padding.ver + letter_h - (cur_style.line.width >> 1);
 801be44:	f3c6 074f 	ubfx	r7, r6, #1, #16
        cur_area.x1 = letter_pos.x + cur_style.body.padding.hor;
 801be48:	f8bd e042 	ldrh.w	lr, [sp, #66]	; 0x42
        cur_area.y1 = letter_pos.y + cur_style.body.padding.ver + letter_h - (cur_style.line.width >> 1);
 801be4c:	4418      	add	r0, r3
        cur_area.y2 = letter_pos.y + cur_style.body.padding.ver + letter_h + (cur_style.line.width >> 1) + (cur_style.line.width & 0x1);
 801be4e:	f006 0601 	and.w	r6, r6, #1
        cur_area.x1 = letter_pos.x + cur_style.body.padding.hor;
 801be52:	4475      	add	r5, lr
        cur_area.y1 = letter_pos.y + cur_style.body.padding.ver + letter_h - (cur_style.line.width >> 1);
 801be54:	b280      	uxth	r0, r0
        cur_area.y2 = letter_pos.y + cur_style.body.padding.ver + letter_h + (cur_style.line.width >> 1) + (cur_style.line.width & 0x1);
 801be56:	443e      	add	r6, r7
        cur_area.x1 = letter_pos.x + cur_style.body.padding.hor;
 801be58:	b2ad      	uxth	r5, r5
        cur_area.y1 = letter_pos.y + cur_style.body.padding.ver + letter_h - (cur_style.line.width >> 1);
 801be5a:	1bc7      	subs	r7, r0, r7
        cur_area.y2 = letter_pos.y + cur_style.body.padding.ver + letter_h + (cur_style.line.width >> 1) + (cur_style.line.width & 0x1);
 801be5c:	4430      	add	r0, r6
        cur_area.x2 = letter_pos.x + cur_style.body.padding.hor + letter_w;
 801be5e:	eb05 0309 	add.w	r3, r5, r9
        cur_area.y1 = letter_pos.y + cur_style.body.padding.ver + letter_h - (cur_style.line.width >> 1);
 801be62:	f8ad 7012 	strh.w	r7, [sp, #18]
        cur_area.y2 = letter_pos.y + cur_style.body.padding.ver + letter_h + (cur_style.line.width >> 1) + (cur_style.line.width & 0x1);
 801be66:	f8ad 0016 	strh.w	r0, [sp, #22]
        cur_area.x2 = letter_pos.x + cur_style.body.padding.hor + letter_w;
 801be6a:	f8ad 3014 	strh.w	r3, [sp, #20]
        cur_area.x1 = letter_pos.x + cur_style.body.padding.hor;
 801be6e:	f8ad 5010 	strh.w	r5, [sp, #16]
 801be72:	e750      	b.n	801bd16 <refr_cursor_area+0xca>
    if(letter_pos.x + ext->label->coords.x1 + letter_w > ext->label->coords.x2 && ext->one_line == 0 && lv_label_get_align(ext->label) != LV_LABEL_ALIGN_RIGHT) {
 801be74:	4608      	mov	r0, r1
 801be76:	f7fc f87d 	bl	8017f74 <lv_label_get_align>
 801be7a:	2802      	cmp	r0, #2
 801be7c:	d054      	beq.n	801bf28 <refr_cursor_area+0x2dc>
        letter_pos.y += letter_h + label_style->text.line_space;
 801be7e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801be82:	f8b8 2032 	ldrh.w	r2, [r8, #50]	; 0x32
        letter_pos.x = 0;
 801be86:	f8ad 700c 	strh.w	r7, [sp, #12]
        letter_pos.y += letter_h + label_style->text.line_space;
 801be8a:	4413      	add	r3, r2
 801be8c:	9a00      	ldr	r2, [sp, #0]
 801be8e:	4413      	add	r3, r2
 801be90:	f8ad 300e 	strh.w	r3, [sp, #14]
        if(letter != '\0') {
 801be94:	bb55      	cbnz	r5, 801beec <refr_cursor_area+0x2a0>
            letter_w = lv_font_get_width(label_style->text.font, ' ');
 801be96:	2120      	movs	r1, #32
 801be98:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
 801be9c:	f7f6 ff22 	bl	8012ce4 <lv_font_get_width>
 801bea0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801bea2:	fa0f f980 	sxth.w	r9, r0
 801bea6:	f9b1 2010 	ldrsh.w	r2, [r1, #16]
 801beaa:	e724      	b.n	801bcf6 <refr_cursor_area+0xaa>
        cur_area.x1 = letter_pos.x + cur_style.body.padding.hor - (cur_style.line.width >> 1) - (cur_style.line.width & 0x1);
 801beac:	f8bd 0042 	ldrh.w	r0, [sp, #66]	; 0x42
 801beb0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801beb4:	f9bd 5064 	ldrsh.w	r5, [sp, #100]	; 0x64
 801beb8:	4403      	add	r3, r0
        cur_area.y1 = letter_pos.y + cur_style.body.padding.ver;
 801beba:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
        cur_area.x1 = letter_pos.x + cur_style.body.padding.hor - (cur_style.line.width >> 1) - (cur_style.line.width & 0x1);
 801bebe:	f3c5 074f 	ubfx	r7, r5, #1, #16
        cur_area.y1 = letter_pos.y + cur_style.body.padding.ver;
 801bec2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
        cur_area.x1 = letter_pos.x + cur_style.body.padding.hor - (cur_style.line.width >> 1) - (cur_style.line.width & 0x1);
 801bec6:	b29b      	uxth	r3, r3
 801bec8:	f005 0501 	and.w	r5, r5, #1
        cur_area.y1 = letter_pos.y + cur_style.body.padding.ver;
 801becc:	4430      	add	r0, r6
        cur_area.x1 = letter_pos.x + cur_style.body.padding.hor - (cur_style.line.width >> 1) - (cur_style.line.width & 0x1);
 801bece:	1bde      	subs	r6, r3, r7
        cur_area.x2 = letter_pos.x + cur_style.body.padding.hor + (cur_style.line.width >> 1);
 801bed0:	443b      	add	r3, r7
        cur_area.y1 = letter_pos.y + cur_style.body.padding.ver;
 801bed2:	b280      	uxth	r0, r0
        cur_area.x2 = letter_pos.x + cur_style.body.padding.hor + (cur_style.line.width >> 1);
 801bed4:	f8ad 3014 	strh.w	r3, [sp, #20]
        cur_area.x1 = letter_pos.x + cur_style.body.padding.hor - (cur_style.line.width >> 1) - (cur_style.line.width & 0x1);
 801bed8:	1b75      	subs	r5, r6, r5
        cur_area.y2 = letter_pos.y + cur_style.body.padding.ver + letter_h;
 801beda:	9b00      	ldr	r3, [sp, #0]
        cur_area.y1 = letter_pos.y + cur_style.body.padding.ver;
 801bedc:	f8ad 0012 	strh.w	r0, [sp, #18]
        cur_area.y2 = letter_pos.y + cur_style.body.padding.ver + letter_h;
 801bee0:	4403      	add	r3, r0
        cur_area.x1 = letter_pos.x + cur_style.body.padding.hor - (cur_style.line.width >> 1) - (cur_style.line.width & 0x1);
 801bee2:	f8ad 5010 	strh.w	r5, [sp, #16]
        cur_area.y2 = letter_pos.y + cur_style.body.padding.ver + letter_h;
 801bee6:	f8ad 3016 	strh.w	r3, [sp, #22]
 801beea:	e714      	b.n	801bd16 <refr_cursor_area+0xca>
            byte_pos += lv_txt_encoded_size(&txt[byte_pos]);
 801beec:	4b11      	ldr	r3, [pc, #68]	; (801bf34 <refr_cursor_area+0x2e8>)
 801beee:	4658      	mov	r0, fp
 801bef0:	681b      	ldr	r3, [r3, #0]
 801bef2:	4798      	blx	r3
            letter = lv_txt_encoded_next(&txt[byte_pos], NULL);
 801bef4:	9a01      	ldr	r2, [sp, #4]
            byte_pos += lv_txt_encoded_size(&txt[byte_pos]);
 801bef6:	4406      	add	r6, r0
            letter = lv_txt_encoded_next(&txt[byte_pos], NULL);
 801bef8:	f8da 3000 	ldr.w	r3, [sl]
 801befc:	4639      	mov	r1, r7
 801befe:	4432      	add	r2, r6
 801bf00:	4610      	mov	r0, r2
 801bf02:	4798      	blx	r3
        if(letter == '\0' || letter == '\n' || letter == '\r') {
 801bf04:	280d      	cmp	r0, #13
 801bf06:	d804      	bhi.n	801bf12 <refr_cursor_area+0x2c6>
 801bf08:	f242 4301 	movw	r3, #9217	; 0x2401
 801bf0c:	40c3      	lsrs	r3, r0
 801bf0e:	07db      	lsls	r3, r3, #31
 801bf10:	d4c1      	bmi.n	801be96 <refr_cursor_area+0x24a>
            letter_w = lv_font_get_width(label_style->text.font, letter);
 801bf12:	4601      	mov	r1, r0
 801bf14:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
 801bf18:	f7f6 fee4 	bl	8012ce4 <lv_font_get_width>
 801bf1c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801bf1e:	fa0f f980 	sxth.w	r9, r0
 801bf22:	f9b1 2010 	ldrsh.w	r2, [r1, #16]
 801bf26:	e6e6      	b.n	801bcf6 <refr_cursor_area+0xaa>
 801bf28:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801bf2a:	f9b1 2010 	ldrsh.w	r2, [r1, #16]
 801bf2e:	e6e2      	b.n	801bcf6 <refr_cursor_area+0xaa>
 801bf30:	200002e8 	.word	0x200002e8
 801bf34:	200002dc 	.word	0x200002dc
 801bf38:	200002e0 	.word	0x200002e0

0801bf3c <lv_ta_set_cursor_pos>:
{
 801bf3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bf40:	b08e      	sub	sp, #56	; 0x38
 801bf42:	460c      	mov	r4, r1
 801bf44:	4606      	mov	r6, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801bf46:	f7ef ffe7 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->cursor.pos == pos) return;
 801bf4a:	f8b0 304e 	ldrh.w	r3, [r0, #78]	; 0x4e
 801bf4e:	42a3      	cmp	r3, r4
 801bf50:	f000 8084 	beq.w	801c05c <lv_ta_set_cursor_pos+0x120>
    uint16_t len = lv_txt_get_encoded_length(lv_label_get_text(ext->label));
 801bf54:	4b57      	ldr	r3, [pc, #348]	; (801c0b4 <lv_ta_set_cursor_pos+0x178>)
 801bf56:	4605      	mov	r5, r0
 801bf58:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801bf5a:	681f      	ldr	r7, [r3, #0]
 801bf5c:	f7fc f804 	bl	8017f68 <lv_label_get_text>
 801bf60:	47b8      	blx	r7
    if(pos < 0) pos = len + pos;
 801bf62:	2c00      	cmp	r4, #0
 801bf64:	db7f      	blt.n	801c066 <lv_ta_set_cursor_pos+0x12a>
    if(pos > len || pos == LV_TA_CURSOR_LAST) pos = len;
 801bf66:	b283      	uxth	r3, r0
 801bf68:	42a3      	cmp	r3, r4
 801bf6a:	db7a      	blt.n	801c062 <lv_ta_set_cursor_pos+0x126>
 801bf6c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801bf70:	429c      	cmp	r4, r3
 801bf72:	d076      	beq.n	801c062 <lv_ta_set_cursor_pos+0x126>
    ext->cursor.pos = pos;
 801bf74:	b2a4      	uxth	r4, r4
    lv_obj_t * label_par = lv_obj_get_parent(ext->label);
 801bf76:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    ext->cursor.pos = pos;
 801bf78:	f8a5 404e 	strh.w	r4, [r5, #78]	; 0x4e
    lv_obj_t * label_par = lv_obj_get_parent(ext->label);
 801bf7c:	f7ef ff22 	bl	800bdc4 <lv_obj_get_parent>
 801bf80:	4680      	mov	r8, r0
    lv_style_t * style = lv_obj_get_style(ta);
 801bf82:	4630      	mov	r0, r6
 801bf84:	f7ef ff4a 	bl	800be1c <lv_obj_get_style>
 801bf88:	4607      	mov	r7, r0
    lv_label_get_letter_pos(ext->label, pos, &cur_pos);
 801bf8a:	466a      	mov	r2, sp
 801bf8c:	4621      	mov	r1, r4
 801bf8e:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    const lv_font_t * font_p = style->text.font;
 801bf90:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    lv_label_get_letter_pos(ext->label, pos, &cur_pos);
 801bf92:	f7fb fff7 	bl	8017f84 <lv_label_get_letter_pos>
    lv_obj_get_coords(ta, &ta_cords);
 801bf96:	a903      	add	r1, sp, #12
 801bf98:	4630      	mov	r0, r6
 801bf9a:	f7ef ff21 	bl	800bde0 <lv_obj_get_coords>
    lv_obj_get_coords(ext->label, &label_cords);
 801bf9e:	a901      	add	r1, sp, #4
 801bfa0:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801bfa2:	f7ef ff1d 	bl	800bde0 <lv_obj_get_coords>
    if(lv_obj_get_y(label_par) + cur_pos.y < 0) {
 801bfa6:	4640      	mov	r0, r8
 801bfa8:	f894 4020 	ldrb.w	r4, [r4, #32]
 801bfac:	f7ef ff24 	bl	800bdf8 <lv_obj_get_y>
 801bfb0:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 801bfb4:	42c8      	cmn	r0, r1
 801bfb6:	d474      	bmi.n	801c0a2 <lv_ta_set_cursor_pos+0x166>
    if(label_cords.y1 + cur_pos.y + font_h + style->body.padding.ver > ta_cords.y2) {
 801bfb8:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801bfbc:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 801bfc0:	440b      	add	r3, r1
 801bfc2:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 801bfc6:	4423      	add	r3, r4
 801bfc8:	4403      	add	r3, r0
 801bfca:	4293      	cmp	r3, r2
 801bfcc:	dc5a      	bgt.n	801c084 <lv_ta_set_cursor_pos+0x148>
    if(lv_obj_get_x(label_par) + cur_pos.x < font_h) {
 801bfce:	4640      	mov	r0, r8
 801bfd0:	f7ef ff0c 	bl	800bdec <lv_obj_get_x>
 801bfd4:	f9bd 1000 	ldrsh.w	r1, [sp]
 801bfd8:	4408      	add	r0, r1
 801bfda:	4284      	cmp	r4, r0
 801bfdc:	dc4a      	bgt.n	801c074 <lv_ta_set_cursor_pos+0x138>
    if(label_cords.x1 + cur_pos.x + font_h + style->body.padding.hor > ta_cords.x2) {
 801bfde:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801bfe2:	f9b7 0022 	ldrsh.w	r0, [r7, #34]	; 0x22
 801bfe6:	440b      	add	r3, r1
 801bfe8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801bfec:	4423      	add	r3, r4
 801bfee:	4403      	add	r3, r0
 801bff0:	4293      	cmp	r3, r2
 801bff2:	dd0f      	ble.n	801c014 <lv_ta_set_cursor_pos+0xd8>
        lv_obj_set_x(label_par, -(cur_pos.x - lv_obj_get_width(ta) +
 801bff4:	4630      	mov	r0, r6
 801bff6:	f7ef ff05 	bl	800be04 <lv_obj_get_width>
 801bffa:	f8bd 1000 	ldrh.w	r1, [sp]
 801bffe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c000:	1a41      	subs	r1, r0, r1
 801c002:	4640      	mov	r0, r8
 801c004:	1b0c      	subs	r4, r1, r4
 801c006:	eba4 0143 	sub.w	r1, r4, r3, lsl #1
 801c00a:	b209      	sxth	r1, r1
 801c00c:	f7ed fc2c 	bl	8009868 <lv_obj_set_x>
 801c010:	f9bd 1000 	ldrsh.w	r1, [sp]
    a.repeat = 1;
 801c014:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
    a.act_time = 0;
 801c018:	2300      	movs	r3, #0
    a.fp = (lv_anim_fp_t)cursor_blink_anim;
 801c01a:	f8df e0a0 	ldr.w	lr, [pc, #160]	; 801c0bc <lv_ta_set_cursor_pos+0x180>
    a.time = LV_TA_CURSOR_BLINK_TIME;
 801c01e:	f44f 77c8 	mov.w	r7, #400	; 0x190
    a.playback = 1;
 801c022:	f042 0203 	orr.w	r2, r2, #3
    ext->cursor.valid_x = cur_pos.x;
 801c026:	f8a5 104c 	strh.w	r1, [r5, #76]	; 0x4c
    a.start = 1;
 801c02a:	2401      	movs	r4, #1
    a.path = lv_anim_path_step;
 801c02c:	4922      	ldr	r1, [pc, #136]	; (801c0b8 <lv_ta_set_cursor_pos+0x17c>)
    lv_anim_create(&a);
 801c02e:	a805      	add	r0, sp, #20
    a.var = ta;
 801c030:	9605      	str	r6, [sp, #20]
    a.playback = 1;
 801c032:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
    a.fp = (lv_anim_fp_t)cursor_blink_anim;
 801c036:	f8cd e018 	str.w	lr, [sp, #24]
    a.time = LV_TA_CURSOR_BLINK_TIME;
 801c03a:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
    a.act_time = 0;
 801c03e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    a.end_cb = NULL;
 801c042:	9307      	str	r3, [sp, #28]
    a.end = 0;
 801c044:	930a      	str	r3, [sp, #40]	; 0x28
    a.repeat_pause = 0;
 801c046:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    a.playback_pause = 0;
 801c04a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
    a.start = 1;
 801c04e:	9409      	str	r4, [sp, #36]	; 0x24
    a.path = lv_anim_path_step;
 801c050:	9108      	str	r1, [sp, #32]
    lv_anim_create(&a);
 801c052:	f7f6 fc29 	bl	80128a8 <lv_anim_create>
    refr_cursor_area(ta);
 801c056:	4630      	mov	r0, r6
 801c058:	f7ff fdf8 	bl	801bc4c <refr_cursor_area>
}
 801c05c:	b00e      	add	sp, #56	; 0x38
 801c05e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(pos > len || pos == LV_TA_CURSOR_LAST) pos = len;
 801c062:	b204      	sxth	r4, r0
 801c064:	e786      	b.n	801bf74 <lv_ta_set_cursor_pos+0x38>
    if(pos < 0) pos = len + pos;
 801c066:	4404      	add	r4, r0
    if(pos > len || pos == LV_TA_CURSOR_LAST) pos = len;
 801c068:	b283      	uxth	r3, r0
    if(pos < 0) pos = len + pos;
 801c06a:	b224      	sxth	r4, r4
    if(pos > len || pos == LV_TA_CURSOR_LAST) pos = len;
 801c06c:	42a3      	cmp	r3, r4
 801c06e:	f6bf af7d 	bge.w	801bf6c <lv_ta_set_cursor_pos+0x30>
 801c072:	e7f6      	b.n	801c062 <lv_ta_set_cursor_pos+0x126>
        lv_obj_set_x(label_par, - cur_pos.x + font_h);
 801c074:	1a61      	subs	r1, r4, r1
 801c076:	4640      	mov	r0, r8
 801c078:	b209      	sxth	r1, r1
 801c07a:	f7ed fbf5 	bl	8009868 <lv_obj_set_x>
 801c07e:	f9bd 1000 	ldrsh.w	r1, [sp]
 801c082:	e7ac      	b.n	801bfde <lv_ta_set_cursor_pos+0xa2>
        lv_obj_set_y(label_par, -(cur_pos.y - lv_obj_get_height(ta) +
 801c084:	4630      	mov	r0, r6
 801c086:	f7ef fec3 	bl	800be10 <lv_obj_get_height>
 801c08a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 801c08e:	8c3b      	ldrh	r3, [r7, #32]
 801c090:	1a41      	subs	r1, r0, r1
 801c092:	4640      	mov	r0, r8
 801c094:	1b09      	subs	r1, r1, r4
 801c096:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
 801c09a:	b209      	sxth	r1, r1
 801c09c:	f7ed fb1c 	bl	80096d8 <lv_obj_set_y>
 801c0a0:	e795      	b.n	801bfce <lv_ta_set_cursor_pos+0x92>
        lv_obj_set_y(label_par, - cur_pos.y + style->body.padding.ver);
 801c0a2:	8c3b      	ldrh	r3, [r7, #32]
 801c0a4:	4640      	mov	r0, r8
 801c0a6:	1a59      	subs	r1, r3, r1
 801c0a8:	b209      	sxth	r1, r1
 801c0aa:	f7ed fb15 	bl	80096d8 <lv_obj_set_y>
 801c0ae:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 801c0b2:	e781      	b.n	801bfb8 <lv_ta_set_cursor_pos+0x7c>
 801c0b4:	200002ec 	.word	0x200002ec
 801c0b8:	08012a35 	.word	0x08012a35
 801c0bc:	0801b955 	.word	0x0801b955

0801c0c0 <lv_ta_del_char>:
{
 801c0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c0c2:	4605      	mov	r5, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801c0c4:	f7ef ff28 	bl	800bf18 <lv_obj_get_ext_attr>
    if(cur_pos == 0) return;
 801c0c8:	f8b0 304e 	ldrh.w	r3, [r0, #78]	; 0x4e
 801c0cc:	b903      	cbnz	r3, 801c0d0 <lv_ta_del_char+0x10>
 801c0ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c0d0:	4604      	mov	r4, r0
    char * label_txt = lv_label_get_text(ext->label);
 801c0d2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801c0d4:	f7fb ff48 	bl	8017f68 <lv_label_get_text>
 801c0d8:	4607      	mov	r7, r0
    lv_txt_cut(label_txt, ext->cursor.pos - 1, 1);
 801c0da:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 801c0de:	2201      	movs	r2, #1
 801c0e0:	3901      	subs	r1, #1
 801c0e2:	f7f7 ffa1 	bl	8014028 <lv_txt_cut>
    lv_label_set_text(ext->label, label_txt);
 801c0e6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801c0e8:	4639      	mov	r1, r7
 801c0ea:	f7fc fb7f 	bl	80187ec <lv_label_set_text>
    if(lv_obj_get_width(ext->label) == 0) {
 801c0ee:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801c0f0:	f7ef fe88 	bl	800be04 <lv_obj_get_width>
 801c0f4:	b358      	cbz	r0, 801c14e <lv_ta_del_char+0x8e>
    if(ext->pwd_mode != 0) {
 801c0f6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801c0fa:	07db      	lsls	r3, r3, #31
 801c0fc:	d51d      	bpl.n	801c13a <lv_ta_del_char+0x7a>
        uint32_t byte_pos = lv_txt_encoded_get_byte_id(ext->pwd_tmp, ext->cursor.pos - 1);
 801c0fe:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 801c102:	4b17      	ldr	r3, [pc, #92]	; (801c160 <lv_ta_del_char+0xa0>)
 801c104:	3901      	subs	r1, #1
 801c106:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801c108:	681b      	ldr	r3, [r3, #0]
 801c10a:	4798      	blx	r3
        lv_txt_cut(ext->pwd_tmp, ext->cursor.pos - 1, lv_txt_encoded_size(&label_txt[byte_pos]));
 801c10c:	f8b4 604e 	ldrh.w	r6, [r4, #78]	; 0x4e
 801c110:	4b14      	ldr	r3, [pc, #80]	; (801c164 <lv_ta_del_char+0xa4>)
 801c112:	4438      	add	r0, r7
 801c114:	3e01      	subs	r6, #1
 801c116:	6be7      	ldr	r7, [r4, #60]	; 0x3c
 801c118:	681b      	ldr	r3, [r3, #0]
 801c11a:	4798      	blx	r3
 801c11c:	4631      	mov	r1, r6
 801c11e:	4602      	mov	r2, r0
 801c120:	4638      	mov	r0, r7
 801c122:	f7f7 ff81 	bl	8014028 <lv_txt_cut>
        ext->pwd_tmp = lv_mem_realloc(ext->pwd_tmp, strlen(ext->pwd_tmp) + 1);
 801c126:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 801c128:	4630      	mov	r0, r6
 801c12a:	f7e4 f877 	bl	800021c <strlen>
 801c12e:	1c41      	adds	r1, r0, #1
 801c130:	4630      	mov	r0, r6
 801c132:	f7f7 f8f5 	bl	8013320 <lv_mem_realloc>
 801c136:	63e0      	str	r0, [r4, #60]	; 0x3c
        lv_mem_assert(ext->pwd_tmp);
 801c138:	b140      	cbz	r0, 801c14c <lv_ta_del_char+0x8c>
    lv_ta_set_cursor_pos(ta, ext->cursor.pos - 1);
 801c13a:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 801c13e:	4628      	mov	r0, r5
 801c140:	3901      	subs	r1, #1
}
 801c142:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_ta_set_cursor_pos(ta, ext->cursor.pos - 1);
 801c146:	b209      	sxth	r1, r1
 801c148:	f7ff bef8 	b.w	801bf3c <lv_ta_set_cursor_pos>
 801c14c:	e7fe      	b.n	801c14c <lv_ta_del_char+0x8c>
        lv_style_t * style = lv_obj_get_style(ext->label);
 801c14e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801c150:	f7ef fe64 	bl	800be1c <lv_obj_get_style>
        lv_obj_set_width(ext->label, style->line.width);
 801c154:	f9b0 1044 	ldrsh.w	r1, [r0, #68]	; 0x44
 801c158:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801c15a:	f7ee ff13 	bl	800af84 <lv_obj_set_width>
 801c15e:	e7ca      	b.n	801c0f6 <lv_ta_del_char+0x36>
 801c160:	200002e8 	.word	0x200002e8
 801c164:	200002dc 	.word	0x200002dc

0801c168 <lv_ta_add_char>:
{
 801c168:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c16c:	b08f      	sub	sp, #60	; 0x3c
 801c16e:	4681      	mov	r9, r0
 801c170:	9101      	str	r1, [sp, #4]
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801c172:	f7ef fed1 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->one_line && (c == '\n' || c == '\r')) {
 801c176:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801c17a:	4680      	mov	r8, r0
    if(ext->one_line && (c == '\n' || c == '\r')) {
 801c17c:	079a      	lsls	r2, r3, #30
 801c17e:	d504      	bpl.n	801c18a <lv_ta_add_char+0x22>
 801c180:	9b01      	ldr	r3, [sp, #4]
 801c182:	2b0a      	cmp	r3, #10
 801c184:	d020      	beq.n	801c1c8 <lv_ta_add_char+0x60>
 801c186:	2b0d      	cmp	r3, #13
 801c188:	d01e      	beq.n	801c1c8 <lv_ta_add_char+0x60>
    uint32_t c_uni = lv_txt_encoded_next((const char *)&c, NULL);
 801c18a:	4e5e      	ldr	r6, [pc, #376]	; (801c304 <lv_ta_add_char+0x19c>)
 801c18c:	2100      	movs	r1, #0
 801c18e:	a801      	add	r0, sp, #4
 801c190:	6833      	ldr	r3, [r6, #0]
 801c192:	4798      	blx	r3
 801c194:	4607      	mov	r7, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801c196:	4648      	mov	r0, r9
 801c198:	f7ef febe 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->accapted_chars == NULL && ext->max_length == 0) return true;
 801c19c:	6c03      	ldr	r3, [r0, #64]	; 0x40
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801c19e:	4604      	mov	r4, r0
    if(ext->accapted_chars == NULL && ext->max_length == 0) return true;
 801c1a0:	b1ab      	cbz	r3, 801c1ce <lv_ta_add_char+0x66>
    if(ext->max_length > 0 &&
 801c1a2:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
 801c1a6:	b9aa      	cbnz	r2, 801c1d4 <lv_ta_add_char+0x6c>
        uint32_t i = 0;
 801c1a8:	2200      	movs	r2, #0
 801c1aa:	ad0e      	add	r5, sp, #56	; 0x38
 801c1ac:	f845 2d24 	str.w	r2, [r5, #-36]!
 801c1b0:	e005      	b.n	801c1be <lv_ta_add_char+0x56>
            a = lv_txt_encoded_next(ext->accapted_chars, &i);
 801c1b2:	6833      	ldr	r3, [r6, #0]
 801c1b4:	4798      	blx	r3
            if(a == c) return true; /*Accepted*/
 801c1b6:	4287      	cmp	r7, r0
 801c1b8:	d01f      	beq.n	801c1fa <lv_ta_add_char+0x92>
 801c1ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c1bc:	9a05      	ldr	r2, [sp, #20]
            a = lv_txt_encoded_next(ext->accapted_chars, &i);
 801c1be:	4618      	mov	r0, r3
        while(ext->accapted_chars[i] != '\0') {
 801c1c0:	5c9b      	ldrb	r3, [r3, r2]
            a = lv_txt_encoded_next(ext->accapted_chars, &i);
 801c1c2:	4629      	mov	r1, r5
        while(ext->accapted_chars[i] != '\0') {
 801c1c4:	2b00      	cmp	r3, #0
 801c1c6:	d1f4      	bne.n	801c1b2 <lv_ta_add_char+0x4a>
}
 801c1c8:	b00f      	add	sp, #60	; 0x3c
 801c1ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(ext->accapted_chars == NULL && ext->max_length == 0) return true;
 801c1ce:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 801c1d2:	b193      	cbz	r3, 801c1fa <lv_ta_add_char+0x92>
            lv_txt_get_encoded_length(lv_ta_get_text(ta)) >= ext->max_length) {
 801c1d4:	4b4c      	ldr	r3, [pc, #304]	; (801c308 <lv_ta_add_char+0x1a0>)
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801c1d6:	4648      	mov	r0, r9
            lv_txt_get_encoded_length(lv_ta_get_text(ta)) >= ext->max_length) {
 801c1d8:	681d      	ldr	r5, [r3, #0]
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801c1da:	f7ef fe9d 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->pwd_mode == 0) {
 801c1de:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 801c1e2:	07db      	lsls	r3, r3, #31
 801c1e4:	f140 8088 	bpl.w	801c2f8 <lv_ta_add_char+0x190>
        txt = ext->pwd_tmp;
 801c1e8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
            lv_txt_get_encoded_length(lv_ta_get_text(ta)) >= ext->max_length) {
 801c1ea:	47a8      	blx	r5
 801c1ec:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
    if(ext->max_length > 0 &&
 801c1f0:	4298      	cmp	r0, r3
 801c1f2:	d2e9      	bcs.n	801c1c8 <lv_ta_add_char+0x60>
    if(ext->accapted_chars) {
 801c1f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c1f6:	2b00      	cmp	r3, #0
 801c1f8:	d1d6      	bne.n	801c1a8 <lv_ta_add_char+0x40>
 * @param ta pointer to a Text area
 * @return true or false
 */
static inline bool lv_ta_get_edge_flash(lv_obj_t * ta)
{
    return lv_page_get_edge_flash(ta);
 801c1fa:	4648      	mov	r0, r9
 801c1fc:	f7fe faa8 	bl	801a750 <lv_page_get_edge_flash>
    lv_page_set_edge_flash(ta, en);
 801c200:	2100      	movs	r1, #0
    return lv_page_get_edge_flash(ta);
 801c202:	4605      	mov	r5, r0
    lv_page_set_edge_flash(ta, en);
 801c204:	4648      	mov	r0, r9
 801c206:	f7fe f88d 	bl	801a324 <lv_page_set_edge_flash>
    if(ext->pwd_mode != 0) pwd_char_hider(ta);  /*Make sure all the current text contains only '*'*/
 801c20a:	f898 3046 	ldrb.w	r3, [r8, #70]	; 0x46
 801c20e:	07d9      	lsls	r1, r3, #31
 801c210:	d452      	bmi.n	801c2b8 <lv_ta_add_char+0x150>
    letter_buf[0] = c;
 801c212:	9b01      	ldr	r3, [sp, #4]
    letter_buf[1] = '\0';
 801c214:	2400      	movs	r4, #0
    lv_label_ins_text(ext->label, ext->cursor.pos, (const char *)letter_buf);    /*Insert the character*/
 801c216:	f8b8 104e 	ldrh.w	r1, [r8, #78]	; 0x4e
 801c21a:	aa03      	add	r2, sp, #12
 801c21c:	f8d8 0038 	ldr.w	r0, [r8, #56]	; 0x38
    letter_buf[0] = c;
 801c220:	9303      	str	r3, [sp, #12]
    letter_buf[1] = '\0';
 801c222:	9404      	str	r4, [sp, #16]
    lv_label_ins_text(ext->label, ext->cursor.pos, (const char *)letter_buf);    /*Insert the character*/
 801c224:	f7fc fc78 	bl	8018b18 <lv_label_ins_text>
    if(ext->pwd_mode != 0) {
 801c228:	f898 3046 	ldrb.w	r3, [r8, #70]	; 0x46
 801c22c:	07db      	lsls	r3, r3, #31
 801c22e:	d531      	bpl.n	801c294 <lv_ta_add_char+0x12c>
        ext->pwd_tmp = lv_mem_realloc(ext->pwd_tmp, strlen(ext->pwd_tmp) + 2);  /*+2: the new char + \0 */
 801c230:	f8d8 603c 	ldr.w	r6, [r8, #60]	; 0x3c
 801c234:	4630      	mov	r0, r6
 801c236:	f7e3 fff1 	bl	800021c <strlen>
 801c23a:	1c81      	adds	r1, r0, #2
 801c23c:	4630      	mov	r0, r6
 801c23e:	f7f7 f86f 	bl	8013320 <lv_mem_realloc>
 801c242:	f8c8 003c 	str.w	r0, [r8, #60]	; 0x3c
        lv_mem_assert(ext->pwd_tmp);
 801c246:	2800      	cmp	r0, #0
 801c248:	d035      	beq.n	801c2b6 <lv_ta_add_char+0x14e>
        lv_txt_ins(ext->pwd_tmp, ext->cursor.pos, (const char *)letter_buf);
 801c24a:	aa03      	add	r2, sp, #12
 801c24c:	f8b8 104e 	ldrh.w	r1, [r8, #78]	; 0x4e
 801c250:	f7f7 fec0 	bl	8013fd4 <lv_txt_ins>
        a.repeat = 0;
 801c254:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
        a.fp = (lv_anim_fp_t)pwd_char_hider_anim;
 801c258:	4f2c      	ldr	r7, [pc, #176]	; (801c30c <lv_ta_add_char+0x1a4>)
        a.time = LV_TA_PWD_SHOW_TIME;
 801c25a:	f240 56dc 	movw	r6, #1500	; 0x5dc
        a.playback = 0;
 801c25e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
        a.end_cb = (lv_anim_cb_t)pwd_char_hider;
 801c262:	492b      	ldr	r1, [pc, #172]	; (801c310 <lv_ta_add_char+0x1a8>)
        a.end = 1;
 801c264:	2201      	movs	r2, #1
        lv_anim_create(&a);
 801c266:	a805      	add	r0, sp, #20
        a.playback = 0;
 801c268:	f364 0300 	bfi	r3, r4, #0, #1
        a.var = ta;
 801c26c:	f8cd 9014 	str.w	r9, [sp, #20]
        a.act_time = 0;
 801c270:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
        a.playback = 0;
 801c274:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
        a.path = lv_anim_path_step;
 801c278:	4b26      	ldr	r3, [pc, #152]	; (801c314 <lv_ta_add_char+0x1ac>)
        a.start = 0;
 801c27a:	9409      	str	r4, [sp, #36]	; 0x24
        a.repeat_pause = 0;
 801c27c:	f8ad 4032 	strh.w	r4, [sp, #50]	; 0x32
        a.playback_pause = 0;
 801c280:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
        a.fp = (lv_anim_fp_t)pwd_char_hider_anim;
 801c284:	9706      	str	r7, [sp, #24]
        a.time = LV_TA_PWD_SHOW_TIME;
 801c286:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
        a.end_cb = (lv_anim_cb_t)pwd_char_hider;
 801c28a:	9107      	str	r1, [sp, #28]
        a.end = 1;
 801c28c:	920a      	str	r2, [sp, #40]	; 0x28
        a.path = lv_anim_path_step;
 801c28e:	9308      	str	r3, [sp, #32]
        lv_anim_create(&a);
 801c290:	f7f6 fb0a 	bl	80128a8 <lv_anim_create>
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801c294:	4648      	mov	r0, r9
 801c296:	f7ef fe3f 	bl	800bf18 <lv_obj_get_ext_attr>
    lv_ta_set_cursor_pos(ta, lv_ta_get_cursor_pos(ta) + 1);
 801c29a:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
 801c29e:	4648      	mov	r0, r9
 801c2a0:	3101      	adds	r1, #1
 801c2a2:	b209      	sxth	r1, r1
 801c2a4:	f7ff fe4a 	bl	801bf3c <lv_ta_set_cursor_pos>
 801c2a8:	4629      	mov	r1, r5
 801c2aa:	4648      	mov	r0, r9
 801c2ac:	f7fe f83a 	bl	801a324 <lv_page_set_edge_flash>
}
 801c2b0:	b00f      	add	sp, #60	; 0x3c
 801c2b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c2b6:	e7fe      	b.n	801c2b6 <lv_ta_add_char+0x14e>
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801c2b8:	4648      	mov	r0, r9
 801c2ba:	f7ef fe2d 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->pwd_mode != 0) {
 801c2be:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801c2c2:	4606      	mov	r6, r0
    if(ext->pwd_mode != 0) {
 801c2c4:	07da      	lsls	r2, r3, #31
 801c2c6:	d5a4      	bpl.n	801c212 <lv_ta_add_char+0xaa>
        char * txt = lv_label_get_text(ext->label);
 801c2c8:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801c2ca:	f7fb fe4d 	bl	8017f68 <lv_label_get_text>
        int16_t len = lv_txt_get_encoded_length(txt);
 801c2ce:	4b0e      	ldr	r3, [pc, #56]	; (801c308 <lv_ta_add_char+0x1a0>)
        char * txt = lv_label_get_text(ext->label);
 801c2d0:	4604      	mov	r4, r0
        int16_t len = lv_txt_get_encoded_length(txt);
 801c2d2:	681b      	ldr	r3, [r3, #0]
 801c2d4:	4798      	blx	r3
        for(i = 0; i < len; i++) {
 801c2d6:	2300      	movs	r3, #0
 801c2d8:	b200      	sxth	r0, r0
 801c2da:	2800      	cmp	r0, #0
 801c2dc:	dd10      	ble.n	801c300 <lv_ta_add_char+0x198>
            txt[i] = '*';
 801c2de:	222a      	movs	r2, #42	; 0x2a
        for(i = 0; i < len; i++) {
 801c2e0:	1c59      	adds	r1, r3, #1
            txt[i] = '*';
 801c2e2:	54e2      	strb	r2, [r4, r3]
        for(i = 0; i < len; i++) {
 801c2e4:	b28b      	uxth	r3, r1
 801c2e6:	4283      	cmp	r3, r0
 801c2e8:	dbfa      	blt.n	801c2e0 <lv_ta_add_char+0x178>
        txt[i] = '\0';
 801c2ea:	2200      	movs	r2, #0
        if(refr != false) lv_label_set_text(ext->label, txt);
 801c2ec:	4621      	mov	r1, r4
        txt[i] = '\0';
 801c2ee:	54e2      	strb	r2, [r4, r3]
        if(refr != false) lv_label_set_text(ext->label, txt);
 801c2f0:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 801c2f2:	f7fc fa7b 	bl	80187ec <lv_label_set_text>
 801c2f6:	e78c      	b.n	801c212 <lv_ta_add_char+0xaa>
        txt = lv_label_get_text(ext->label);
 801c2f8:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801c2fa:	f7fb fe35 	bl	8017f68 <lv_label_get_text>
 801c2fe:	e774      	b.n	801c1ea <lv_ta_add_char+0x82>
        txt[i] = '\0';
 801c300:	7023      	strb	r3, [r4, #0]
 801c302:	e786      	b.n	801c212 <lv_ta_add_char+0xaa>
 801c304:	200002e0 	.word	0x200002e0
 801c308:	200002ec 	.word	0x200002ec
 801c30c:	0801b951 	.word	0x0801b951
 801c310:	0801b9cd 	.word	0x0801b9cd
 801c314:	08012a35 	.word	0x08012a35

0801c318 <lv_ta_add_text>:
{
 801c318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c31c:	b08a      	sub	sp, #40	; 0x28
 801c31e:	460c      	mov	r4, r1
 801c320:	4605      	mov	r5, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801c322:	f7ef fdf9 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->pwd_mode != 0) pwd_char_hider(ta);  /*Make sure all the current text contains only '*'*/
 801c326:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801c32a:	4606      	mov	r6, r0
    if(ext->pwd_mode != 0) pwd_char_hider(ta);  /*Make sure all the current text contains only '*'*/
 801c32c:	07d9      	lsls	r1, r3, #31
 801c32e:	d41c      	bmi.n	801c36a <lv_ta_add_text+0x52>
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801c330:	4628      	mov	r0, r5
 801c332:	f7ef fdf1 	bl	800bf18 <lv_obj_get_ext_attr>
    if(lv_ta_get_accepted_chars(ta) || lv_ta_get_max_length(ta)) {
 801c336:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801c338:	2b00      	cmp	r3, #0
 801c33a:	d037      	beq.n	801c3ac <lv_ta_add_text+0x94>
        uint32_t i = 0;
 801c33c:	2200      	movs	r2, #0
        while(txt[i] != '\0') {
 801c33e:	7823      	ldrb	r3, [r4, #0]
        uint32_t i = 0;
 801c340:	9201      	str	r2, [sp, #4]
        while(txt[i] != '\0') {
 801c342:	b17b      	cbz	r3, 801c364 <lv_ta_add_text+0x4c>
 801c344:	4f4d      	ldr	r7, [pc, #308]	; (801c47c <lv_ta_add_text+0x164>)
 801c346:	4e4e      	ldr	r6, [pc, #312]	; (801c480 <lv_ta_add_text+0x168>)
            uint32_t c = lv_txt_encoded_next(txt, &i);
 801c348:	a901      	add	r1, sp, #4
 801c34a:	683b      	ldr	r3, [r7, #0]
 801c34c:	4620      	mov	r0, r4
 801c34e:	4798      	blx	r3
            lv_ta_add_char(ta, lv_txt_unicode_to_encoded(c));
 801c350:	6833      	ldr	r3, [r6, #0]
 801c352:	4798      	blx	r3
 801c354:	4601      	mov	r1, r0
 801c356:	4628      	mov	r0, r5
 801c358:	f7ff ff06 	bl	801c168 <lv_ta_add_char>
        while(txt[i] != '\0') {
 801c35c:	9b01      	ldr	r3, [sp, #4]
 801c35e:	5ce3      	ldrb	r3, [r4, r3]
 801c360:	2b00      	cmp	r3, #0
 801c362:	d1f1      	bne.n	801c348 <lv_ta_add_text+0x30>
}
 801c364:	b00a      	add	sp, #40	; 0x28
 801c366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801c36a:	4628      	mov	r0, r5
 801c36c:	f7ef fdd4 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->pwd_mode != 0) {
 801c370:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801c374:	4680      	mov	r8, r0
    if(ext->pwd_mode != 0) {
 801c376:	07da      	lsls	r2, r3, #31
 801c378:	d5da      	bpl.n	801c330 <lv_ta_add_text+0x18>
        char * txt = lv_label_get_text(ext->label);
 801c37a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801c37c:	f7fb fdf4 	bl	8017f68 <lv_label_get_text>
        int16_t len = lv_txt_get_encoded_length(txt);
 801c380:	4b40      	ldr	r3, [pc, #256]	; (801c484 <lv_ta_add_text+0x16c>)
        char * txt = lv_label_get_text(ext->label);
 801c382:	4607      	mov	r7, r0
        int16_t len = lv_txt_get_encoded_length(txt);
 801c384:	681b      	ldr	r3, [r3, #0]
 801c386:	4798      	blx	r3
        for(i = 0; i < len; i++) {
 801c388:	2300      	movs	r3, #0
 801c38a:	b200      	sxth	r0, r0
 801c38c:	2800      	cmp	r0, #0
 801c38e:	dd72      	ble.n	801c476 <lv_ta_add_text+0x15e>
            txt[i] = '*';
 801c390:	212a      	movs	r1, #42	; 0x2a
        for(i = 0; i < len; i++) {
 801c392:	1c5a      	adds	r2, r3, #1
            txt[i] = '*';
 801c394:	54f9      	strb	r1, [r7, r3]
        for(i = 0; i < len; i++) {
 801c396:	b293      	uxth	r3, r2
 801c398:	4283      	cmp	r3, r0
 801c39a:	dbfa      	blt.n	801c392 <lv_ta_add_text+0x7a>
        txt[i] = '\0';
 801c39c:	2200      	movs	r2, #0
        if(refr != false) lv_label_set_text(ext->label, txt);
 801c39e:	4639      	mov	r1, r7
        txt[i] = '\0';
 801c3a0:	54fa      	strb	r2, [r7, r3]
        if(refr != false) lv_label_set_text(ext->label, txt);
 801c3a2:	f8d8 0038 	ldr.w	r0, [r8, #56]	; 0x38
 801c3a6:	f7fc fa21 	bl	80187ec <lv_label_set_text>
 801c3aa:	e7c1      	b.n	801c330 <lv_ta_add_text+0x18>
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801c3ac:	4628      	mov	r0, r5
 801c3ae:	f7ef fdb3 	bl	800bf18 <lv_obj_get_ext_attr>
    if(lv_ta_get_accepted_chars(ta) || lv_ta_get_max_length(ta)) {
 801c3b2:	f8b0 7044 	ldrh.w	r7, [r0, #68]	; 0x44
 801c3b6:	2f00      	cmp	r7, #0
 801c3b8:	d1c0      	bne.n	801c33c <lv_ta_add_text+0x24>
    return lv_page_get_edge_flash(ta);
 801c3ba:	4628      	mov	r0, r5
 801c3bc:	f7fe f9c8 	bl	801a750 <lv_page_get_edge_flash>
    lv_page_set_edge_flash(ta, en);
 801c3c0:	4639      	mov	r1, r7
    return lv_page_get_edge_flash(ta);
 801c3c2:	4680      	mov	r8, r0
    lv_page_set_edge_flash(ta, en);
 801c3c4:	4628      	mov	r0, r5
 801c3c6:	f7fd ffad 	bl	801a324 <lv_page_set_edge_flash>
    lv_label_ins_text(ext->label, ext->cursor.pos, txt);
 801c3ca:	4622      	mov	r2, r4
 801c3cc:	f8b6 104e 	ldrh.w	r1, [r6, #78]	; 0x4e
 801c3d0:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 801c3d2:	f7fc fba1 	bl	8018b18 <lv_label_ins_text>
    if(ext->pwd_mode != 0) {
 801c3d6:	f896 3046 	ldrb.w	r3, [r6, #70]	; 0x46
 801c3da:	07db      	lsls	r3, r3, #31
 801c3dc:	d537      	bpl.n	801c44e <lv_ta_add_text+0x136>
        ext->pwd_tmp = lv_mem_realloc(ext->pwd_tmp, strlen(ext->pwd_tmp) + strlen(txt) + 1);
 801c3de:	f8d6 a03c 	ldr.w	sl, [r6, #60]	; 0x3c
 801c3e2:	4650      	mov	r0, sl
 801c3e4:	f7e3 ff1a 	bl	800021c <strlen>
 801c3e8:	4681      	mov	r9, r0
 801c3ea:	4620      	mov	r0, r4
 801c3ec:	f7e3 ff16 	bl	800021c <strlen>
 801c3f0:	eb09 0100 	add.w	r1, r9, r0
 801c3f4:	4650      	mov	r0, sl
 801c3f6:	3101      	adds	r1, #1
 801c3f8:	f7f6 ff92 	bl	8013320 <lv_mem_realloc>
 801c3fc:	63f0      	str	r0, [r6, #60]	; 0x3c
        lv_mem_assert(ext->pwd_tmp);
 801c3fe:	2800      	cmp	r0, #0
 801c400:	d038      	beq.n	801c474 <lv_ta_add_text+0x15c>
        lv_txt_ins(ext->pwd_tmp, ext->cursor.pos, txt);
 801c402:	f8b6 104e 	ldrh.w	r1, [r6, #78]	; 0x4e
 801c406:	4622      	mov	r2, r4
 801c408:	f7f7 fde4 	bl	8013fd4 <lv_txt_ins>
        a.repeat = 0;
 801c40c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
        a.fp = (lv_anim_fp_t)pwd_char_hider_anim;
 801c410:	f8df e07c 	ldr.w	lr, [pc, #124]	; 801c490 <lv_ta_add_text+0x178>
        a.time = LV_TA_PWD_SHOW_TIME;
 801c414:	f240 56dc 	movw	r6, #1500	; 0x5dc
        a.repeat = 0;
 801c418:	f367 0341 	bfi	r3, r7, #1, #1
        a.end = 1;
 801c41c:	2201      	movs	r2, #1
        a.end_cb = (lv_anim_cb_t)pwd_char_hider;
 801c41e:	491a      	ldr	r1, [pc, #104]	; (801c488 <lv_ta_add_text+0x170>)
        lv_anim_create(&a);
 801c420:	a801      	add	r0, sp, #4
        a.playback = 0;
 801c422:	f367 0300 	bfi	r3, r7, #0, #1
        a.var = ta;
 801c426:	9501      	str	r5, [sp, #4]
        a.act_time = 0;
 801c428:	f8ad 701e 	strh.w	r7, [sp, #30]
        a.playback = 0;
 801c42c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        a.path = lv_anim_path_step;
 801c430:	4b16      	ldr	r3, [pc, #88]	; (801c48c <lv_ta_add_text+0x174>)
        a.start = 0;
 801c432:	9705      	str	r7, [sp, #20]
        a.repeat_pause = 0;
 801c434:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
        a.playback_pause = 0;
 801c438:	f8ad 7020 	strh.w	r7, [sp, #32]
        a.fp = (lv_anim_fp_t)pwd_char_hider_anim;
 801c43c:	f8cd e008 	str.w	lr, [sp, #8]
        a.time = LV_TA_PWD_SHOW_TIME;
 801c440:	f8ad 601c 	strh.w	r6, [sp, #28]
        a.end_cb = (lv_anim_cb_t)pwd_char_hider;
 801c444:	9103      	str	r1, [sp, #12]
        a.end = 1;
 801c446:	9206      	str	r2, [sp, #24]
        a.path = lv_anim_path_step;
 801c448:	9304      	str	r3, [sp, #16]
        lv_anim_create(&a);
 801c44a:	f7f6 fa2d 	bl	80128a8 <lv_anim_create>
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801c44e:	4628      	mov	r0, r5
 801c450:	f7ef fd62 	bl	800bf18 <lv_obj_get_ext_attr>
    lv_ta_set_cursor_pos(ta, lv_ta_get_cursor_pos(ta) + lv_txt_get_encoded_length(txt));
 801c454:	4b0b      	ldr	r3, [pc, #44]	; (801c484 <lv_ta_add_text+0x16c>)
    return ext->cursor.pos;
 801c456:	f8b0 604e 	ldrh.w	r6, [r0, #78]	; 0x4e
    lv_ta_set_cursor_pos(ta, lv_ta_get_cursor_pos(ta) + lv_txt_get_encoded_length(txt));
 801c45a:	4620      	mov	r0, r4
 801c45c:	681b      	ldr	r3, [r3, #0]
 801c45e:	4798      	blx	r3
 801c460:	1831      	adds	r1, r6, r0
 801c462:	4628      	mov	r0, r5
 801c464:	b209      	sxth	r1, r1
 801c466:	f7ff fd69 	bl	801bf3c <lv_ta_set_cursor_pos>
 801c46a:	4641      	mov	r1, r8
 801c46c:	4628      	mov	r0, r5
 801c46e:	f7fd ff59 	bl	801a324 <lv_page_set_edge_flash>
 801c472:	e777      	b.n	801c364 <lv_ta_add_text+0x4c>
 801c474:	e7fe      	b.n	801c474 <lv_ta_add_text+0x15c>
        txt[i] = '\0';
 801c476:	703b      	strb	r3, [r7, #0]
 801c478:	e75a      	b.n	801c330 <lv_ta_add_text+0x18>
 801c47a:	bf00      	nop
 801c47c:	200002e0 	.word	0x200002e0
 801c480:	200002f8 	.word	0x200002f8
 801c484:	200002ec 	.word	0x200002ec
 801c488:	0801b9cd 	.word	0x0801b9cd
 801c48c:	08012a35 	.word	0x08012a35
 801c490:	0801b951 	.word	0x0801b951

0801c494 <lv_ta_set_text>:
{
 801c494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c498:	4605      	mov	r5, r0
 801c49a:	b08a      	sub	sp, #40	; 0x28
 801c49c:	460c      	mov	r4, r1
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801c49e:	f7ef fd3b 	bl	800bf18 <lv_obj_get_ext_attr>
 801c4a2:	4606      	mov	r6, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801c4a4:	4628      	mov	r0, r5
 801c4a6:	f7ef fd37 	bl	800bf18 <lv_obj_get_ext_attr>
    if(lv_ta_get_accepted_chars(ta) || lv_ta_get_max_length(ta)) {
 801c4aa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801c4ac:	2b00      	cmp	r3, #0
 801c4ae:	d069      	beq.n	801c584 <lv_ta_set_text+0xf0>
        lv_label_set_text(ext->label, "");
 801c4b0:	493d      	ldr	r1, [pc, #244]	; (801c5a8 <lv_ta_set_text+0x114>)
 801c4b2:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 801c4b4:	f7fc f99a 	bl	80187ec <lv_label_set_text>
        lv_ta_set_cursor_pos(ta, LV_TA_CURSOR_LAST);
 801c4b8:	f647 71ff 	movw	r1, #32767	; 0x7fff
 801c4bc:	4628      	mov	r0, r5
 801c4be:	f7ff fd3d 	bl	801bf3c <lv_ta_set_cursor_pos>
        uint32_t i = 0;
 801c4c2:	2200      	movs	r2, #0
        while(txt[i] != '\0') {
 801c4c4:	7823      	ldrb	r3, [r4, #0]
        uint32_t i = 0;
 801c4c6:	9201      	str	r2, [sp, #4]
        while(txt[i] != '\0') {
 801c4c8:	b18b      	cbz	r3, 801c4ee <lv_ta_set_text+0x5a>
 801c4ca:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 801c5b8 <lv_ta_set_text+0x124>
 801c4ce:	4f37      	ldr	r7, [pc, #220]	; (801c5ac <lv_ta_set_text+0x118>)
            uint32_t c = lv_txt_encoded_next(txt, &i);
 801c4d0:	a901      	add	r1, sp, #4
 801c4d2:	f8d8 3000 	ldr.w	r3, [r8]
 801c4d6:	4620      	mov	r0, r4
 801c4d8:	4798      	blx	r3
            lv_ta_add_char(ta, lv_txt_unicode_to_encoded(c));
 801c4da:	683b      	ldr	r3, [r7, #0]
 801c4dc:	4798      	blx	r3
 801c4de:	4601      	mov	r1, r0
 801c4e0:	4628      	mov	r0, r5
 801c4e2:	f7ff fe41 	bl	801c168 <lv_ta_add_char>
        while(txt[i] != '\0') {
 801c4e6:	9b01      	ldr	r3, [sp, #4]
 801c4e8:	5ce3      	ldrb	r3, [r4, r3]
 801c4ea:	2b00      	cmp	r3, #0
 801c4ec:	d1f0      	bne.n	801c4d0 <lv_ta_set_text+0x3c>
    if(lv_obj_get_width(ext->label) == 0) {
 801c4ee:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 801c4f0:	f7ef fc88 	bl	800be04 <lv_obj_get_width>
 801c4f4:	2800      	cmp	r0, #0
 801c4f6:	d038      	beq.n	801c56a <lv_ta_set_text+0xd6>
    if(ext->pwd_mode != 0) {
 801c4f8:	f896 3046 	ldrb.w	r3, [r6, #70]	; 0x46
 801c4fc:	07db      	lsls	r3, r3, #31
 801c4fe:	d402      	bmi.n	801c506 <lv_ta_set_text+0x72>
}
 801c500:	b00a      	add	sp, #40	; 0x28
 801c502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ext->pwd_tmp = lv_mem_realloc(ext->pwd_tmp, strlen(txt) + 1);
 801c506:	4620      	mov	r0, r4
 801c508:	f7e3 fe88 	bl	800021c <strlen>
 801c50c:	1c41      	adds	r1, r0, #1
 801c50e:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 801c510:	f7f6 ff06 	bl	8013320 <lv_mem_realloc>
 801c514:	63f0      	str	r0, [r6, #60]	; 0x3c
        lv_mem_assert(ext->pwd_tmp);
 801c516:	b338      	cbz	r0, 801c568 <lv_ta_set_text+0xd4>
        strcpy(ext->pwd_tmp, txt);
 801c518:	4621      	mov	r1, r4
        a.time = LV_TA_PWD_SHOW_TIME;
 801c51a:	f240 57dc 	movw	r7, #1500	; 0x5dc
        strcpy(ext->pwd_tmp, txt);
 801c51e:	f001 fa70 	bl	801da02 <strcpy>
        a.repeat = 0;
 801c522:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
        a.act_time = 0;
 801c526:	2300      	movs	r3, #0
        a.fp = (lv_anim_fp_t)pwd_char_hider_anim;
 801c528:	f8df e090 	ldr.w	lr, [pc, #144]	; 801c5bc <lv_ta_set_text+0x128>
        a.playback = 0;
 801c52c:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
        a.path = lv_anim_path_step;
 801c530:	491f      	ldr	r1, [pc, #124]	; (801c5b0 <lv_ta_set_text+0x11c>)
        a.end_cb = (lv_anim_cb_t)pwd_char_hider;
 801c532:	4e20      	ldr	r6, [pc, #128]	; (801c5b4 <lv_ta_set_text+0x120>)
        a.end = 1;
 801c534:	2401      	movs	r4, #1
        a.playback = 0;
 801c536:	f363 0200 	bfi	r2, r3, #0, #1
        lv_anim_create(&a);
 801c53a:	a801      	add	r0, sp, #4
        a.var = ta;
 801c53c:	9501      	str	r5, [sp, #4]
        a.playback = 0;
 801c53e:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
        a.act_time = 0;
 801c542:	f8ad 301e 	strh.w	r3, [sp, #30]
        a.start = 0;
 801c546:	9305      	str	r3, [sp, #20]
        a.repeat_pause = 0;
 801c548:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
        a.playback_pause = 0;
 801c54c:	f8ad 3020 	strh.w	r3, [sp, #32]
        a.fp = (lv_anim_fp_t)pwd_char_hider_anim;
 801c550:	f8cd e008 	str.w	lr, [sp, #8]
        a.time = LV_TA_PWD_SHOW_TIME;
 801c554:	f8ad 701c 	strh.w	r7, [sp, #28]
        a.end_cb = (lv_anim_cb_t)pwd_char_hider;
 801c558:	9603      	str	r6, [sp, #12]
        a.end = 1;
 801c55a:	9406      	str	r4, [sp, #24]
        a.path = lv_anim_path_step;
 801c55c:	9104      	str	r1, [sp, #16]
        lv_anim_create(&a);
 801c55e:	f7f6 f9a3 	bl	80128a8 <lv_anim_create>
}
 801c562:	b00a      	add	sp, #40	; 0x28
 801c564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c568:	e7fe      	b.n	801c568 <lv_ta_set_text+0xd4>
        lv_style_t * style = lv_obj_get_style(ext->label);
 801c56a:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 801c56c:	f7ef fc56 	bl	800be1c <lv_obj_get_style>
        lv_obj_set_width(ext->label, lv_font_get_width(style->text.font, ' '));
 801c570:	6bb7      	ldr	r7, [r6, #56]	; 0x38
 801c572:	2120      	movs	r1, #32
 801c574:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801c576:	f7f6 fbb5 	bl	8012ce4 <lv_font_get_width>
 801c57a:	b201      	sxth	r1, r0
 801c57c:	4638      	mov	r0, r7
 801c57e:	f7ee fd01 	bl	800af84 <lv_obj_set_width>
 801c582:	e7b9      	b.n	801c4f8 <lv_ta_set_text+0x64>
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801c584:	4628      	mov	r0, r5
 801c586:	f7ef fcc7 	bl	800bf18 <lv_obj_get_ext_attr>
    if(lv_ta_get_accepted_chars(ta) || lv_ta_get_max_length(ta)) {
 801c58a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 801c58e:	2b00      	cmp	r3, #0
 801c590:	d18e      	bne.n	801c4b0 <lv_ta_set_text+0x1c>
        lv_label_set_text(ext->label, txt);
 801c592:	4621      	mov	r1, r4
 801c594:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 801c596:	f7fc f929 	bl	80187ec <lv_label_set_text>
        lv_ta_set_cursor_pos(ta, LV_TA_CURSOR_LAST);
 801c59a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 801c59e:	4628      	mov	r0, r5
 801c5a0:	f7ff fccc 	bl	801bf3c <lv_ta_set_cursor_pos>
 801c5a4:	e7a3      	b.n	801c4ee <lv_ta_set_text+0x5a>
 801c5a6:	bf00      	nop
 801c5a8:	080c7258 	.word	0x080c7258
 801c5ac:	200002f8 	.word	0x200002f8
 801c5b0:	08012a35 	.word	0x08012a35
 801c5b4:	0801b9cd 	.word	0x0801b9cd
 801c5b8:	200002e0 	.word	0x200002e0
 801c5bc:	0801b951 	.word	0x0801b951

0801c5c0 <lv_ta_set_cursor_type>:
{
 801c5c0:	b538      	push	{r3, r4, r5, lr}
 801c5c2:	460c      	mov	r4, r1
 801c5c4:	4605      	mov	r5, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801c5c6:	f7ef fca7 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->cursor.type == cur_type) return;
 801c5ca:	f890 305a 	ldrb.w	r3, [r0, #90]	; 0x5a
 801c5ce:	f003 010f 	and.w	r1, r3, #15
 801c5d2:	42a1      	cmp	r1, r4
 801c5d4:	d009      	beq.n	801c5ea <lv_ta_set_cursor_type+0x2a>
 801c5d6:	4602      	mov	r2, r0
    ext->cursor.type = cur_type;
 801c5d8:	f364 0303 	bfi	r3, r4, #0, #4
    refr_cursor_area(ta);
 801c5dc:	4628      	mov	r0, r5
    ext->cursor.type = cur_type;
 801c5de:	f882 305a 	strb.w	r3, [r2, #90]	; 0x5a
}
 801c5e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    refr_cursor_area(ta);
 801c5e6:	f7ff bb31 	b.w	801bc4c <refr_cursor_area>
 801c5ea:	bd38      	pop	{r3, r4, r5, pc}

0801c5ec <lv_ta_set_one_line>:
{
 801c5ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c5f0:	460e      	mov	r6, r1
 801c5f2:	4604      	mov	r4, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801c5f4:	f7ef fc90 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->one_line == en) return;
 801c5f8:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 801c5fc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801c600:	42b3      	cmp	r3, r6
 801c602:	d061      	beq.n	801c6c8 <lv_ta_set_one_line+0xdc>
 801c604:	4605      	mov	r5, r0
        lv_style_t * style_ta = lv_obj_get_style(ta);
 801c606:	4620      	mov	r0, r4
    if(en) {
 801c608:	bb2e      	cbnz	r6, 801c656 <lv_ta_set_one_line+0x6a>
        lv_style_t * style_ta = lv_obj_get_style(ta);
 801c60a:	f7ef fc07 	bl	800be1c <lv_obj_get_style>
        ext->one_line = 0;
 801c60e:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
        lv_style_t * style_ta = lv_obj_get_style(ta);
 801c612:	4607      	mov	r7, r0
    lv_cont_set_fit(lv_page_get_scrl(page), hor_en, ver_en);
 801c614:	4620      	mov	r0, r4
        ext->one_line = 0;
 801c616:	f366 0341 	bfi	r3, r6, #1, #1
 801c61a:	f885 3046 	strb.w	r3, [r5, #70]	; 0x46
 801c61e:	f7fe f891 	bl	801a744 <lv_page_get_scrl>
 801c622:	2201      	movs	r2, #1
 801c624:	4631      	mov	r1, r6
 801c626:	f7fa ff8f 	bl	8017548 <lv_cont_set_fit>
        lv_label_set_long_mode(ext->label, LV_LABEL_LONG_BREAK);
 801c62a:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801c62c:	2101      	movs	r1, #1
 801c62e:	f7fc f915 	bl	801885c <lv_label_set_long_mode>
        lv_obj_set_height(ta, LV_TA_DEF_HEIGHT);
 801c632:	2164      	movs	r1, #100	; 0x64
 801c634:	4620      	mov	r0, r4
 801c636:	f7ee fbbd 	bl	800adb4 <lv_obj_set_height>
        lv_obj_set_pos(lv_page_get_scrl(ta), style_ta->body.padding.hor, style_ta->body.padding.ver);
 801c63a:	4620      	mov	r0, r4
 801c63c:	f7fe f882 	bl	801a744 <lv_page_get_scrl>
 801c640:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c644:	f9b7 1022 	ldrsh.w	r1, [r7, #34]	; 0x22
 801c648:	f7ed fd8c 	bl	800a164 <lv_obj_set_pos>
    refr_cursor_area(ta);
 801c64c:	4620      	mov	r0, r4
}
 801c64e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    refr_cursor_area(ta);
 801c652:	f7ff bafb 	b.w	801bc4c <refr_cursor_area>
        lv_style_t * style_ta = lv_obj_get_style(ta);
 801c656:	f7ef fbe1 	bl	800be1c <lv_obj_get_style>
 801c65a:	4606      	mov	r6, r0
        lv_style_t * style_scrl = lv_obj_get_style(lv_page_get_scrl(ta));
 801c65c:	4620      	mov	r0, r4
 801c65e:	f7fe f871 	bl	801a744 <lv_page_get_scrl>
 801c662:	f7ef fbdb 	bl	800be1c <lv_obj_get_style>
 801c666:	4680      	mov	r8, r0
        lv_style_t * style_label = lv_obj_get_style(ext->label);
 801c668:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801c66a:	f7ef fbd7 	bl	800be1c <lv_obj_get_style>
        ext->one_line = 1;
 801c66e:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 801c672:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 801c674:	4620      	mov	r0, r4
 801c676:	f043 0302 	orr.w	r3, r3, #2
 801c67a:	f892 7020 	ldrb.w	r7, [r2, #32]
 801c67e:	f885 3046 	strb.w	r3, [r5, #70]	; 0x46
 801c682:	f7fe f85f 	bl	801a744 <lv_page_get_scrl>
 801c686:	2201      	movs	r2, #1
 801c688:	4611      	mov	r1, r2
 801c68a:	f7fa ff5d 	bl	8017548 <lv_cont_set_fit>
        lv_obj_set_height(ta, font_h + (style_ta->body.padding.ver + style_scrl->body.padding.ver) * 2);
 801c68e:	f9b8 3020 	ldrsh.w	r3, [r8, #32]
 801c692:	f9b6 1020 	ldrsh.w	r1, [r6, #32]
 801c696:	4620      	mov	r0, r4
 801c698:	4419      	add	r1, r3
 801c69a:	eb07 0141 	add.w	r1, r7, r1, lsl #1
 801c69e:	b209      	sxth	r1, r1
 801c6a0:	f7ee fb88 	bl	800adb4 <lv_obj_set_height>
        lv_label_set_long_mode(ext->label, LV_LABEL_LONG_EXPAND);
 801c6a4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801c6a6:	2100      	movs	r1, #0
 801c6a8:	f7fc f8d8 	bl	801885c <lv_label_set_long_mode>
        lv_obj_set_pos(lv_page_get_scrl(ta), style_ta->body.padding.hor, style_ta->body.padding.ver);
 801c6ac:	4620      	mov	r0, r4
 801c6ae:	f7fe f849 	bl	801a744 <lv_page_get_scrl>
 801c6b2:	f9b6 2020 	ldrsh.w	r2, [r6, #32]
 801c6b6:	f9b6 1022 	ldrsh.w	r1, [r6, #34]	; 0x22
 801c6ba:	f7ed fd53 	bl	800a164 <lv_obj_set_pos>
    refr_cursor_area(ta);
 801c6be:	4620      	mov	r0, r4
}
 801c6c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    refr_cursor_area(ta);
 801c6c4:	f7ff bac2 	b.w	801bc4c <refr_cursor_area>
 801c6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c6cc <lv_ta_set_style>:
{
 801c6cc:	b570      	push	{r4, r5, r6, lr}
 801c6ce:	460c      	mov	r4, r1
 801c6d0:	4616      	mov	r6, r2
 801c6d2:	4605      	mov	r5, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801c6d4:	f7ef fc20 	bl	800bf18 <lv_obj_get_ext_attr>
    switch(type) {
 801c6d8:	2c03      	cmp	r4, #3
 801c6da:	d823      	bhi.n	801c724 <lv_ta_set_style+0x58>
 801c6dc:	e8df f004 	tbb	[pc, r4]
 801c6e0:	020d141b 	.word	0x020d141b
            ext->cursor.style = style;
 801c6e4:	6486      	str	r6, [r0, #72]	; 0x48
            lv_obj_refresh_ext_size(lv_page_get_scrl(ta)); /*Refresh ext. size because of cursor drawing*/
 801c6e6:	4628      	mov	r0, r5
 801c6e8:	f7fe f82c 	bl	801a744 <lv_page_get_scrl>
 801c6ec:	f7ef fa8a 	bl	800bc04 <lv_obj_refresh_ext_size>
            refr_cursor_area(ta);
 801c6f0:	4628      	mov	r0, r5
}
 801c6f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            refr_cursor_area(ta);
 801c6f6:	f7ff baa9 	b.w	801bc4c <refr_cursor_area>
            lv_page_set_style(ta, LV_PAGE_STYLE_EDGE_FLASH, style);
 801c6fa:	4632      	mov	r2, r6
 801c6fc:	4628      	mov	r0, r5
 801c6fe:	2103      	movs	r1, #3
}
 801c700:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_page_set_style(ta, LV_PAGE_STYLE_EDGE_FLASH, style);
 801c704:	f7fd be1a 	b.w	801a33c <lv_page_set_style>
            lv_page_set_style(ta, LV_PAGE_STYLE_SB, style);
 801c708:	4632      	mov	r2, r6
 801c70a:	4628      	mov	r0, r5
 801c70c:	2102      	movs	r1, #2
}
 801c70e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_page_set_style(ta, LV_PAGE_STYLE_SB, style);
 801c712:	f7fd be13 	b.w	801a33c <lv_page_set_style>
            lv_page_set_style(ta, LV_PAGE_STYLE_BG, style);
 801c716:	4632      	mov	r2, r6
 801c718:	4628      	mov	r0, r5
 801c71a:	2100      	movs	r1, #0
}
 801c71c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_page_set_style(ta, LV_PAGE_STYLE_BG, style);
 801c720:	f7fd be0c 	b.w	801a33c <lv_page_set_style>
 801c724:	bd70      	pop	{r4, r5, r6, pc}
 801c726:	bf00      	nop

0801c728 <lv_ta_create>:
{
 801c728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c72c:	b08a      	sub	sp, #40	; 0x28
 801c72e:	460f      	mov	r7, r1
    lv_obj_t * new_ta = lv_page_create(par, copy);
 801c730:	f7fd fe38 	bl	801a3a4 <lv_page_create>
    lv_mem_assert(new_ta);
 801c734:	2800      	cmp	r0, #0
 801c736:	f000 80ad 	beq.w	801c894 <lv_ta_create+0x16c>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_ta);
 801c73a:	4c83      	ldr	r4, [pc, #524]	; (801c948 <lv_ta_create+0x220>)
 801c73c:	4605      	mov	r5, r0
 801c73e:	68e3      	ldr	r3, [r4, #12]
 801c740:	2b00      	cmp	r3, #0
 801c742:	f000 80f7 	beq.w	801c934 <lv_ta_create+0x20c>
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_func(new_ta);
 801c746:	6823      	ldr	r3, [r4, #0]
 801c748:	2b00      	cmp	r3, #0
 801c74a:	f000 80e4 	beq.w	801c916 <lv_ta_create+0x1ee>
    if(scrl_signal == NULL) scrl_signal = lv_obj_get_signal_func(lv_page_get_scrl(new_ta));
 801c74e:	6863      	ldr	r3, [r4, #4]
 801c750:	2b00      	cmp	r3, #0
 801c752:	f000 80e8 	beq.w	801c926 <lv_ta_create+0x1fe>
    if(scrl_design == NULL) scrl_design = lv_obj_get_design_func(lv_page_get_scrl(new_ta));
 801c756:	68a3      	ldr	r3, [r4, #8]
 801c758:	2b00      	cmp	r3, #0
 801c75a:	f000 80d5 	beq.w	801c908 <lv_ta_create+0x1e0>
    lv_ta_ext_t * ext = lv_obj_allocate_ext_attr(new_ta, sizeof(lv_ta_ext_t));
 801c75e:	215c      	movs	r1, #92	; 0x5c
 801c760:	4628      	mov	r0, r5
 801c762:	f7ef fa47 	bl	800bbf4 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 801c766:	4604      	mov	r4, r0
 801c768:	2800      	cmp	r0, #0
 801c76a:	f000 8092 	beq.w	801c892 <lv_ta_create+0x16a>
    ext->cursor.state = 1;
 801c76e:	f890 005a 	ldrb.w	r0, [r0, #90]	; 0x5a
    ext->pwd_tmp = NULL;
 801c772:	2300      	movs	r3, #0
    ext->pwd_mode = 0;
 801c774:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
    ext->cursor.type = LV_CURSOR_LINE;
 801c778:	f04f 0801 	mov.w	r8, #1
 801c77c:	f040 0010 	orr.w	r0, r0, #16
    lv_obj_set_signal_func(new_ta, lv_ta_signal);
 801c780:	4972      	ldr	r1, [pc, #456]	; (801c94c <lv_ta_create+0x224>)
    ext->one_line = 0;
 801c782:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    ext->pwd_tmp = NULL;
 801c786:	63e3      	str	r3, [r4, #60]	; 0x3c
    ext->cursor.type = LV_CURSOR_LINE;
 801c788:	f368 0003 	bfi	r0, r8, #0, #4
    ext->accapted_chars = NULL;
 801c78c:	6423      	str	r3, [r4, #64]	; 0x40
    ext->one_line = 0;
 801c78e:	f363 0241 	bfi	r2, r3, #1, #1
    ext->max_length = 0;
 801c792:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    ext->cursor.style = NULL;
 801c796:	64a3      	str	r3, [r4, #72]	; 0x48
    ext->one_line = 0;
 801c798:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
    ext->cursor.pos = 0;
 801c79c:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
    ext->cursor.valid_x = 0;
 801c7a0:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
    ext->label = NULL;
 801c7a4:	63a3      	str	r3, [r4, #56]	; 0x38
    ext->cursor.type = LV_CURSOR_LINE;
 801c7a6:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
    lv_obj_set_signal_func(new_ta, lv_ta_signal);
 801c7aa:	4628      	mov	r0, r5
 801c7ac:	f7ef fa1e 	bl	800bbec <lv_obj_set_signal_func>
    lv_obj_set_signal_func(lv_page_get_scrl(new_ta), lv_ta_scrollable_signal);
 801c7b0:	4628      	mov	r0, r5
 801c7b2:	f7fd ffc7 	bl	801a744 <lv_page_get_scrl>
 801c7b6:	4966      	ldr	r1, [pc, #408]	; (801c950 <lv_ta_create+0x228>)
 801c7b8:	f7ef fa18 	bl	800bbec <lv_obj_set_signal_func>
    lv_obj_set_design_func(new_ta, lv_ta_design);
 801c7bc:	4965      	ldr	r1, [pc, #404]	; (801c954 <lv_ta_create+0x22c>)
 801c7be:	4628      	mov	r0, r5
 801c7c0:	f7ef fa16 	bl	800bbf0 <lv_obj_set_design_func>
    if(copy == NULL) {
 801c7c4:	2f00      	cmp	r7, #0
 801c7c6:	d06b      	beq.n	801c8a0 <lv_ta_create+0x178>
        lv_obj_set_design_func(ext->page.scrl, lv_ta_scrollable_design);
 801c7c8:	4963      	ldr	r1, [pc, #396]	; (801c958 <lv_ta_create+0x230>)
 801c7ca:	6860      	ldr	r0, [r4, #4]
 801c7cc:	f7ef fa10 	bl	800bbf0 <lv_obj_set_design_func>
        lv_ta_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801c7d0:	4638      	mov	r0, r7
 801c7d2:	f7ef fba1 	bl	800bf18 <lv_obj_get_ext_attr>
 801c7d6:	4606      	mov	r6, r0
        ext->label = lv_label_create(new_ta, copy_ext->label);
 801c7d8:	4628      	mov	r0, r5
 801c7da:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 801c7dc:	f7fc f89c 	bl	8018918 <lv_label_create>
        ext->pwd_mode = copy_ext->pwd_mode;
 801c7e0:	f896 1046 	ldrb.w	r1, [r6, #70]	; 0x46
 801c7e4:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
        ext->cursor.type = copy_ext->cursor.type;
 801c7e8:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
        ext->pwd_mode = copy_ext->pwd_mode;
 801c7ec:	f361 0200 	bfi	r2, r1, #0, #1
        ext->label = lv_label_create(new_ta, copy_ext->label);
 801c7f0:	63a0      	str	r0, [r4, #56]	; 0x38
        ext->pwd_mode = copy_ext->pwd_mode;
 801c7f2:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
        ext->cursor.type = copy_ext->cursor.type;
 801c7f6:	f896 205a 	ldrb.w	r2, [r6, #90]	; 0x5a
        ext->cursor.style = copy_ext->cursor.style;
 801c7fa:	6cb1      	ldr	r1, [r6, #72]	; 0x48
        ext->cursor.pos = copy_ext->cursor.pos;
 801c7fc:	f8b6 c04e 	ldrh.w	ip, [r6, #78]	; 0x4e
        ext->cursor.type = copy_ext->cursor.type;
 801c800:	f362 0303 	bfi	r3, r2, #0, #4
        ext->cursor.valid_x = copy_ext->cursor.valid_x;
 801c804:	f9b6 e04c 	ldrsh.w	lr, [r6, #76]	; 0x4c
        ext->accapted_chars = copy_ext->accapted_chars;
 801c808:	6c32      	ldr	r2, [r6, #64]	; 0x40
        ext->max_length = copy_ext->max_length;
 801c80a:	f8b6 0044 	ldrh.w	r0, [r6, #68]	; 0x44
        ext->cursor.type = copy_ext->cursor.type;
 801c80e:	f884 305a 	strb.w	r3, [r4, #90]	; 0x5a
        ext->cursor.style = copy_ext->cursor.style;
 801c812:	64a1      	str	r1, [r4, #72]	; 0x48
        ext->cursor.pos = copy_ext->cursor.pos;
 801c814:	f8a4 c04e 	strh.w	ip, [r4, #78]	; 0x4e
        ext->cursor.valid_x = copy_ext->cursor.valid_x;
 801c818:	f8a4 e04c 	strh.w	lr, [r4, #76]	; 0x4c
        if(copy_ext->one_line) lv_ta_set_one_line(new_ta, true);
 801c81c:	f896 3046 	ldrb.w	r3, [r6, #70]	; 0x46
        ext->accapted_chars = copy_ext->accapted_chars;
 801c820:	6422      	str	r2, [r4, #64]	; 0x40
        if(copy_ext->one_line) lv_ta_set_one_line(new_ta, true);
 801c822:	079b      	lsls	r3, r3, #30
        ext->max_length = copy_ext->max_length;
 801c824:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44
        if(copy_ext->one_line) lv_ta_set_one_line(new_ta, true);
 801c828:	d435      	bmi.n	801c896 <lv_ta_create+0x16e>
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801c82a:	4638      	mov	r0, r7
 801c82c:	f7ef fb74 	bl	800bf18 <lv_obj_get_ext_attr>
            style = ext->cursor.style;
 801c830:	6c84      	ldr	r4, [r0, #72]	; 0x48
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801c832:	4628      	mov	r0, r5
 801c834:	f7ef fb70 	bl	800bf18 <lv_obj_get_ext_attr>
            ext->cursor.style = style;
 801c838:	6484      	str	r4, [r0, #72]	; 0x48
            lv_obj_refresh_ext_size(lv_page_get_scrl(ta)); /*Refresh ext. size because of cursor drawing*/
 801c83a:	4628      	mov	r0, r5
 801c83c:	f7fd ff82 	bl	801a744 <lv_page_get_scrl>
 801c840:	f7ef f9e0 	bl	800bc04 <lv_obj_refresh_ext_size>
            refr_cursor_area(ta);
 801c844:	4628      	mov	r0, r5
 801c846:	f7ff fa01 	bl	801bc4c <refr_cursor_area>
        lv_obj_refresh_style(new_ta);
 801c84a:	4628      	mov	r0, r5
 801c84c:	f7ef f890 	bl	800b970 <lv_obj_refresh_style>
    a.repeat = 1;
 801c850:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    a.act_time = 0;
 801c854:	2300      	movs	r3, #0
    a.path = lv_anim_path_step;
 801c856:	4941      	ldr	r1, [pc, #260]	; (801c95c <lv_ta_create+0x234>)
    a.time = LV_TA_CURSOR_BLINK_TIME;
 801c858:	f44f 76c8 	mov.w	r6, #400	; 0x190
    a.playback = 1;
 801c85c:	f042 0203 	orr.w	r2, r2, #3
    a.fp = (lv_anim_fp_t)cursor_blink_anim;
 801c860:	4f3f      	ldr	r7, [pc, #252]	; (801c960 <lv_ta_create+0x238>)
    a.start = 1;
 801c862:	2401      	movs	r4, #1
    lv_anim_create(&a);
 801c864:	a801      	add	r0, sp, #4
    a.var = new_ta;
 801c866:	9501      	str	r5, [sp, #4]
    a.playback = 1;
 801c868:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
    a.fp = (lv_anim_fp_t)cursor_blink_anim;
 801c86c:	9702      	str	r7, [sp, #8]
    a.time = LV_TA_CURSOR_BLINK_TIME;
 801c86e:	f8ad 601c 	strh.w	r6, [sp, #28]
    a.act_time = 0;
 801c872:	f8ad 301e 	strh.w	r3, [sp, #30]
    a.end_cb = NULL;
 801c876:	9303      	str	r3, [sp, #12]
    a.end = 0;
 801c878:	9306      	str	r3, [sp, #24]
    a.repeat_pause = 0;
 801c87a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    a.playback_pause = 0;
 801c87e:	f8ad 3020 	strh.w	r3, [sp, #32]
    a.start = 1;
 801c882:	9405      	str	r4, [sp, #20]
    a.path = lv_anim_path_step;
 801c884:	9104      	str	r1, [sp, #16]
    lv_anim_create(&a);
 801c886:	f7f6 f80f 	bl	80128a8 <lv_anim_create>
}
 801c88a:	4628      	mov	r0, r5
 801c88c:	b00a      	add	sp, #40	; 0x28
 801c88e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c892:	e7fe      	b.n	801c892 <lv_ta_create+0x16a>
 801c894:	e7fe      	b.n	801c894 <lv_ta_create+0x16c>
        if(copy_ext->one_line) lv_ta_set_one_line(new_ta, true);
 801c896:	4641      	mov	r1, r8
 801c898:	4628      	mov	r0, r5
 801c89a:	f7ff fea7 	bl	801c5ec <lv_ta_set_one_line>
 801c89e:	e7c4      	b.n	801c82a <lv_ta_create+0x102>
        ext->label = lv_label_create(new_ta, NULL);
 801c8a0:	4639      	mov	r1, r7
 801c8a2:	4628      	mov	r0, r5
 801c8a4:	f7fc f838 	bl	8018918 <lv_label_create>
        lv_obj_set_design_func(ext->page.scrl, lv_ta_scrollable_design);
 801c8a8:	492b      	ldr	r1, [pc, #172]	; (801c958 <lv_ta_create+0x230>)
        ext->label = lv_label_create(new_ta, NULL);
 801c8aa:	63a0      	str	r0, [r4, #56]	; 0x38
        lv_obj_set_design_func(ext->page.scrl, lv_ta_scrollable_design);
 801c8ac:	6860      	ldr	r0, [r4, #4]
 801c8ae:	f7ef f99f 	bl	800bbf0 <lv_obj_set_design_func>
        lv_label_set_long_mode(ext->label, LV_LABEL_LONG_BREAK);
 801c8b2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801c8b4:	4641      	mov	r1, r8
 801c8b6:	f7fb ffd1 	bl	801885c <lv_label_set_long_mode>
        lv_label_set_text(ext->label, "Text area");
 801c8ba:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801c8bc:	4929      	ldr	r1, [pc, #164]	; (801c964 <lv_ta_create+0x23c>)
 801c8be:	f7fb ff95 	bl	80187ec <lv_label_set_text>
        lv_obj_set_click(ext->label, false);
 801c8c2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801c8c4:	4639      	mov	r1, r7
 801c8c6:	f7ef f95d 	bl	800bb84 <lv_obj_set_click>
        lv_obj_set_size(new_ta, LV_TA_DEF_WIDTH, LV_TA_DEF_HEIGHT);
 801c8ca:	2264      	movs	r2, #100	; 0x64
 801c8cc:	21c8      	movs	r1, #200	; 0xc8
 801c8ce:	4628      	mov	r0, r5
 801c8d0:	f7ee f984 	bl	800abdc <lv_obj_set_size>
    lv_page_set_sb_mode(ta, mode);
 801c8d4:	2102      	movs	r1, #2
 801c8d6:	4628      	mov	r0, r5
 801c8d8:	f7fd fcea 	bl	801a2b0 <lv_page_set_sb_mode>
        lv_page_set_style(new_ta, LV_PAGE_STYLE_SCRL, &lv_style_transp_tight);
 801c8dc:	4641      	mov	r1, r8
 801c8de:	4a22      	ldr	r2, [pc, #136]	; (801c968 <lv_ta_create+0x240>)
 801c8e0:	4628      	mov	r0, r5
 801c8e2:	f7fd fd2b 	bl	801a33c <lv_page_set_style>
        lv_theme_t * th = lv_theme_get_current();
 801c8e6:	f001 f81f 	bl	801d928 <lv_theme_get_current>
            lv_ta_set_style(new_ta, LV_TA_STYLE_BG, th->ta.area);
 801c8ea:	4639      	mov	r1, r7
        if(th) {
 801c8ec:	4604      	mov	r4, r0
 801c8ee:	b328      	cbz	r0, 801c93c <lv_ta_create+0x214>
            lv_ta_set_style(new_ta, LV_TA_STYLE_BG, th->ta.area);
 801c8f0:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 801c8f4:	4628      	mov	r0, r5
 801c8f6:	f7ff fee9 	bl	801c6cc <lv_ta_set_style>
            lv_ta_set_style(new_ta, LV_TA_STYLE_SB, th->ta.sb);
 801c8fa:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
 801c8fe:	4641      	mov	r1, r8
 801c900:	4628      	mov	r0, r5
 801c902:	f7ff fee3 	bl	801c6cc <lv_ta_set_style>
 801c906:	e7a3      	b.n	801c850 <lv_ta_create+0x128>
    if(scrl_design == NULL) scrl_design = lv_obj_get_design_func(lv_page_get_scrl(new_ta));
 801c908:	4628      	mov	r0, r5
 801c90a:	f7fd ff1b 	bl	801a744 <lv_page_get_scrl>
 801c90e:	f7ef fb01 	bl	800bf14 <lv_obj_get_design_func>
 801c912:	60a0      	str	r0, [r4, #8]
 801c914:	e723      	b.n	801c75e <lv_ta_create+0x36>
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_func(new_ta);
 801c916:	4628      	mov	r0, r5
 801c918:	f7ef fafc 	bl	800bf14 <lv_obj_get_design_func>
    if(scrl_signal == NULL) scrl_signal = lv_obj_get_signal_func(lv_page_get_scrl(new_ta));
 801c91c:	6863      	ldr	r3, [r4, #4]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_func(new_ta);
 801c91e:	6020      	str	r0, [r4, #0]
    if(scrl_signal == NULL) scrl_signal = lv_obj_get_signal_func(lv_page_get_scrl(new_ta));
 801c920:	2b00      	cmp	r3, #0
 801c922:	f47f af18 	bne.w	801c756 <lv_ta_create+0x2e>
 801c926:	4628      	mov	r0, r5
 801c928:	f7fd ff0c 	bl	801a744 <lv_page_get_scrl>
 801c92c:	f7ef faf0 	bl	800bf10 <lv_obj_get_signal_func>
 801c930:	6060      	str	r0, [r4, #4]
 801c932:	e710      	b.n	801c756 <lv_ta_create+0x2e>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_ta);
 801c934:	f7ef faec 	bl	800bf10 <lv_obj_get_signal_func>
 801c938:	60e0      	str	r0, [r4, #12]
 801c93a:	e704      	b.n	801c746 <lv_ta_create+0x1e>
            lv_ta_set_style(new_ta, LV_TA_STYLE_BG, &lv_style_pretty);
 801c93c:	4a0b      	ldr	r2, [pc, #44]	; (801c96c <lv_ta_create+0x244>)
 801c93e:	4628      	mov	r0, r5
 801c940:	f7ff fec4 	bl	801c6cc <lv_ta_set_style>
 801c944:	e784      	b.n	801c850 <lv_ta_create+0x128>
 801c946:	bf00      	nop
 801c948:	20016658 	.word	0x20016658
 801c94c:	0801cab1 	.word	0x0801cab1
 801c950:	0801ba3d 	.word	0x0801ba3d
 801c954:	0801ba19 	.word	0x0801ba19
 801c958:	0801ba85 	.word	0x0801ba85
 801c95c:	08012a35 	.word	0x08012a35
 801c960:	0801b955 	.word	0x0801b955
 801c964:	080c74c4 	.word	0x080c74c4
 801c968:	20019264 	.word	0x20019264
 801c96c:	2001921c 	.word	0x2001921c

0801c970 <lv_ta_get_text>:
{
 801c970:	b508      	push	{r3, lr}
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801c972:	f7ef fad1 	bl	800bf18 <lv_obj_get_ext_attr>
    if(ext->pwd_mode == 0) {
 801c976:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 801c97a:	07db      	lsls	r3, r3, #31
 801c97c:	d501      	bpl.n	801c982 <lv_ta_get_text+0x12>
}
 801c97e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801c980:	bd08      	pop	{r3, pc}
        txt = lv_label_get_text(ext->label);
 801c982:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
 801c984:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        txt = lv_label_get_text(ext->label);
 801c988:	f7fb baee 	b.w	8017f68 <lv_label_get_text>

0801c98c <lv_ta_get_cursor_pos>:
{
 801c98c:	b508      	push	{r3, lr}
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801c98e:	f7ef fac3 	bl	800bf18 <lv_obj_get_ext_attr>
}
 801c992:	f8b0 004e 	ldrh.w	r0, [r0, #78]	; 0x4e
 801c996:	bd08      	pop	{r3, pc}

0801c998 <lv_ta_get_cursor_type>:
{
 801c998:	b508      	push	{r3, lr}
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801c99a:	f7ef fabd 	bl	800bf18 <lv_obj_get_ext_attr>
    return ext->cursor.type;
 801c99e:	f890 005a 	ldrb.w	r0, [r0, #90]	; 0x5a
}
 801c9a2:	f000 000f 	and.w	r0, r0, #15
 801c9a6:	bd08      	pop	{r3, pc}

0801c9a8 <lv_ta_cursor_right>:
{
 801c9a8:	b510      	push	{r4, lr}
 801c9aa:	4604      	mov	r4, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801c9ac:	f7ef fab4 	bl	800bf18 <lv_obj_get_ext_attr>
    cp++;
 801c9b0:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    lv_ta_set_cursor_pos(ta, cp);
 801c9b4:	4620      	mov	r0, r4
    cp++;
 801c9b6:	3101      	adds	r1, #1
}
 801c9b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_ta_set_cursor_pos(ta, cp);
 801c9bc:	b209      	sxth	r1, r1
 801c9be:	f7ff babd 	b.w	801bf3c <lv_ta_set_cursor_pos>
 801c9c2:	bf00      	nop

0801c9c4 <lv_ta_cursor_left>:
{
 801c9c4:	b510      	push	{r4, lr}
 801c9c6:	4604      	mov	r4, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801c9c8:	f7ef faa6 	bl	800bf18 <lv_obj_get_ext_attr>
    return ext->cursor.pos;
 801c9cc:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    if(cp > 0)  {
 801c9d0:	b901      	cbnz	r1, 801c9d4 <lv_ta_cursor_left+0x10>
 801c9d2:	bd10      	pop	{r4, pc}
        cp--;
 801c9d4:	3901      	subs	r1, #1
        lv_ta_set_cursor_pos(ta, cp);
 801c9d6:	4620      	mov	r0, r4
 801c9d8:	b209      	sxth	r1, r1
}
 801c9da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        lv_ta_set_cursor_pos(ta, cp);
 801c9de:	f7ff baad 	b.w	801bf3c <lv_ta_set_cursor_pos>
 801c9e2:	bf00      	nop

0801c9e4 <lv_ta_cursor_down>:
{
 801c9e4:	b570      	push	{r4, r5, r6, lr}
 801c9e6:	b082      	sub	sp, #8
 801c9e8:	4606      	mov	r6, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801c9ea:	f7ef fa95 	bl	800bf18 <lv_obj_get_ext_attr>
 801c9ee:	4605      	mov	r5, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801c9f0:	4630      	mov	r0, r6
    lv_label_get_letter_pos(ext->label, lv_ta_get_cursor_pos(ta), &pos);
 801c9f2:	6bac      	ldr	r4, [r5, #56]	; 0x38
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801c9f4:	f7ef fa90 	bl	800bf18 <lv_obj_get_ext_attr>
    lv_label_get_letter_pos(ext->label, lv_ta_get_cursor_pos(ta), &pos);
 801c9f8:	aa01      	add	r2, sp, #4
 801c9fa:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
 801c9fe:	4620      	mov	r0, r4
 801ca00:	f7fb fac0 	bl	8017f84 <lv_label_get_letter_pos>
    lv_style_t * label_style = lv_obj_get_style(ext->label);
 801ca04:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801ca06:	f7ef fa09 	bl	800be1c <lv_obj_get_style>
    pos.y += font_h + label_style->text.line_space + 1;
 801ca0a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801ca0e:	8e41      	ldrh	r1, [r0, #50]	; 0x32
 801ca10:	3301      	adds	r3, #1
 801ca12:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    pos.x = ext->cursor.valid_x;
 801ca14:	f8b5 204c 	ldrh.w	r2, [r5, #76]	; 0x4c
    pos.y += font_h + label_style->text.line_space + 1;
 801ca18:	f890 4020 	ldrb.w	r4, [r0, #32]
 801ca1c:	440b      	add	r3, r1
    if(pos.y < lv_obj_get_height(ext->label)) {
 801ca1e:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    pos.y += font_h + label_style->text.line_space + 1;
 801ca20:	441c      	add	r4, r3
    pos.x = ext->cursor.valid_x;
 801ca22:	f8ad 2004 	strh.w	r2, [sp, #4]
    pos.y += font_h + label_style->text.line_space + 1;
 801ca26:	b224      	sxth	r4, r4
 801ca28:	f8ad 4006 	strh.w	r4, [sp, #6]
    if(pos.y < lv_obj_get_height(ext->label)) {
 801ca2c:	f7ef f9f0 	bl	800be10 <lv_obj_get_height>
 801ca30:	4284      	cmp	r4, r0
 801ca32:	da0b      	bge.n	801ca4c <lv_ta_cursor_down+0x68>
        uint16_t new_cur_pos = lv_label_get_letter_on(ext->label, &pos);
 801ca34:	a901      	add	r1, sp, #4
 801ca36:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801ca38:	f7fb fb7e 	bl	8018138 <lv_label_get_letter_on>
        lv_coord_t cur_valid_x_tmp = ext->cursor.valid_x;   /*Cursor position set overwrites the valid positon */
 801ca3c:	f9b5 404c 	ldrsh.w	r4, [r5, #76]	; 0x4c
        lv_ta_set_cursor_pos(ta, new_cur_pos);
 801ca40:	b201      	sxth	r1, r0
 801ca42:	4630      	mov	r0, r6
 801ca44:	f7ff fa7a 	bl	801bf3c <lv_ta_set_cursor_pos>
        ext->cursor.valid_x = cur_valid_x_tmp;
 801ca48:	f8a5 404c 	strh.w	r4, [r5, #76]	; 0x4c
}
 801ca4c:	b002      	add	sp, #8
 801ca4e:	bd70      	pop	{r4, r5, r6, pc}

0801ca50 <lv_ta_cursor_up>:
{
 801ca50:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ca52:	b083      	sub	sp, #12
 801ca54:	4605      	mov	r5, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801ca56:	f7ef fa5f 	bl	800bf18 <lv_obj_get_ext_attr>
 801ca5a:	4604      	mov	r4, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801ca5c:	4628      	mov	r0, r5
    lv_label_get_letter_pos(ext->label, lv_ta_get_cursor_pos(ta), &pos);
 801ca5e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801ca60:	f7ef fa5a 	bl	800bf18 <lv_obj_get_ext_attr>
    lv_label_get_letter_pos(ext->label, lv_ta_get_cursor_pos(ta), &pos);
 801ca64:	aa01      	add	r2, sp, #4
 801ca66:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
 801ca6a:	4630      	mov	r0, r6
 801ca6c:	f7fb fa8a 	bl	8017f84 <lv_label_get_letter_pos>
    lv_style_t * label_style = lv_obj_get_style(ext->label);
 801ca70:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801ca72:	f7ef f9d3 	bl	800be1c <lv_obj_get_style>
    pos.y -= font_h + label_style->text.line_space - 1;
 801ca76:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801ca7a:	8e47      	ldrh	r7, [r0, #50]	; 0x32
    uint16_t new_cur_pos = lv_label_get_letter_on(ext->label, &pos);
 801ca7c:	a901      	add	r1, sp, #4
 801ca7e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    pos.y -= font_h + label_style->text.line_space - 1;
 801ca80:	3301      	adds	r3, #1
    pos.x = ext->cursor.valid_x;
 801ca82:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
    pos.y -= font_h + label_style->text.line_space - 1;
 801ca86:	f890 6020 	ldrb.w	r6, [r0, #32]
 801ca8a:	1bdb      	subs	r3, r3, r7
    uint16_t new_cur_pos = lv_label_get_letter_on(ext->label, &pos);
 801ca8c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    pos.y -= font_h + label_style->text.line_space - 1;
 801ca8e:	1b9b      	subs	r3, r3, r6
    pos.x = ext->cursor.valid_x;
 801ca90:	f8ad 2004 	strh.w	r2, [sp, #4]
    pos.y -= font_h + label_style->text.line_space - 1;
 801ca94:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t new_cur_pos = lv_label_get_letter_on(ext->label, &pos);
 801ca98:	f7fb fb4e 	bl	8018138 <lv_label_get_letter_on>
    lv_coord_t cur_valid_x_tmp = ext->cursor.valid_x;   /*Cursor position set overwrites the valid positon */
 801ca9c:	f9b4 604c 	ldrsh.w	r6, [r4, #76]	; 0x4c
    lv_ta_set_cursor_pos(ta, new_cur_pos);
 801caa0:	b201      	sxth	r1, r0
 801caa2:	4628      	mov	r0, r5
 801caa4:	f7ff fa4a 	bl	801bf3c <lv_ta_set_cursor_pos>
    ext->cursor.valid_x = cur_valid_x_tmp;
 801caa8:	f8a4 604c 	strh.w	r6, [r4, #76]	; 0x4c
}
 801caac:	b003      	add	sp, #12
 801caae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cab0 <lv_ta_signal>:
{
 801cab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    res = ancestor_signal(ta, sign, param);
 801cab4:	4b9b      	ldr	r3, [pc, #620]	; (801cd24 <lv_ta_signal+0x274>)
{
 801cab6:	4606      	mov	r6, r0
 801cab8:	460d      	mov	r5, r1
 801caba:	4617      	mov	r7, r2
    res = ancestor_signal(ta, sign, param);
 801cabc:	68db      	ldr	r3, [r3, #12]
 801cabe:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 801cac0:	2801      	cmp	r0, #1
    res = ancestor_signal(ta, sign, param);
 801cac2:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
 801cac4:	d002      	beq.n	801cacc <lv_ta_signal+0x1c>
}
 801cac6:	4620      	mov	r0, r4
 801cac8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801cacc:	4630      	mov	r0, r6
 801cace:	f7ef fa23 	bl	800bf18 <lv_obj_get_ext_attr>
 801cad2:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CLEANUP) {
 801cad4:	b92d      	cbnz	r5, 801cae2 <lv_ta_signal+0x32>
        if(ext->pwd_tmp != NULL) lv_mem_free(ext->pwd_tmp);
 801cad6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801cad8:	2800      	cmp	r0, #0
 801cada:	d0f4      	beq.n	801cac6 <lv_ta_signal+0x16>
 801cadc:	f7f6 fbc6 	bl	801326c <lv_mem_free>
 801cae0:	e7f1      	b.n	801cac6 <lv_ta_signal+0x16>
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 801cae2:	2d03      	cmp	r5, #3
 801cae4:	d042      	beq.n	801cb6c <lv_ta_signal+0xbc>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 801cae6:	2d02      	cmp	r5, #2
 801cae8:	d06b      	beq.n	801cbc2 <lv_ta_signal+0x112>
    } else if(sign == LV_SIGNAL_CONTROLL) {
 801caea:	2d12      	cmp	r5, #18
 801caec:	d027      	beq.n	801cb3e <lv_ta_signal+0x8e>
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 801caee:	2d14      	cmp	r5, #20
 801caf0:	f000 80c8 	beq.w	801cc84 <lv_ta_signal+0x1d4>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801caf4:	2d06      	cmp	r5, #6
 801caf6:	f000 80ab 	beq.w	801cc50 <lv_ta_signal+0x1a0>
    } else if(sign == LV_SIGNAL_DEFOCUS) {
 801cafa:	2d11      	cmp	r5, #17
 801cafc:	f000 80ea 	beq.w	801ccd4 <lv_ta_signal+0x224>
    } else if(sign == LV_SIGNAL_FOCUS) {
 801cb00:	2d10      	cmp	r5, #16
 801cb02:	d1e0      	bne.n	801cac6 <lv_ta_signal+0x16>
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801cb04:	4630      	mov	r0, r6
 801cb06:	f7ef fa07 	bl	800bf18 <lv_obj_get_ext_attr>
    return ext->cursor.type;
 801cb0a:	f890 505a 	ldrb.w	r5, [r0, #90]	; 0x5a
        lv_group_t * g = lv_obj_get_group(ta);
 801cb0e:	4630      	mov	r0, r6
 801cb10:	f7ef fa04 	bl	800bf1c <lv_obj_get_group>
    return ext->cursor.type;
 801cb14:	f005 050f 	and.w	r5, r5, #15
        bool editing = lv_group_get_editing(g);
 801cb18:	f7eb fcb4 	bl	8008484 <lv_group_get_editing>
 801cb1c:	4607      	mov	r7, r0
        lv_hal_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801cb1e:	f7ec fb35 	bl	800918c <lv_indev_get_act>
 801cb22:	f7ec fb39 	bl	8009198 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801cb26:	2804      	cmp	r0, #4
 801cb28:	f040 80ce 	bne.w	801ccc8 <lv_ta_signal+0x218>
            if(editing) lv_ta_set_cursor_type(ta, cur_type & (~LV_CURSOR_HIDDEN));
 801cb2c:	2f00      	cmp	r7, #0
 801cb2e:	f040 80cb 	bne.w	801ccc8 <lv_ta_signal+0x218>
            else lv_ta_set_cursor_type(ta, cur_type | LV_CURSOR_HIDDEN);
 801cb32:	f045 0108 	orr.w	r1, r5, #8
 801cb36:	4630      	mov	r0, r6
 801cb38:	f7ff fd42 	bl	801c5c0 <lv_ta_set_cursor_type>
 801cb3c:	e7c3      	b.n	801cac6 <lv_ta_signal+0x16>
        uint32_t c = *((uint32_t *)param);      /*uint32_t because can be UTF-8*/
 801cb3e:	6839      	ldr	r1, [r7, #0]
        if(c == LV_GROUP_KEY_RIGHT)     lv_ta_cursor_right(ta);
 801cb40:	2913      	cmp	r1, #19
 801cb42:	f000 80d4 	beq.w	801ccee <lv_ta_signal+0x23e>
        else if(c == LV_GROUP_KEY_LEFT) lv_ta_cursor_left(ta);
 801cb46:	2914      	cmp	r1, #20
 801cb48:	f000 80d5 	beq.w	801ccf6 <lv_ta_signal+0x246>
        else if(c == LV_GROUP_KEY_UP)   lv_ta_cursor_up(ta);
 801cb4c:	2911      	cmp	r1, #17
 801cb4e:	f000 80d6 	beq.w	801ccfe <lv_ta_signal+0x24e>
        else if(c == LV_GROUP_KEY_DOWN) lv_ta_cursor_down(ta);
 801cb52:	2912      	cmp	r1, #18
 801cb54:	f000 80d7 	beq.w	801cd06 <lv_ta_signal+0x256>
        else if(c == LV_GROUP_KEY_BACKSPACE) lv_ta_del_char(ta);
 801cb58:	2908      	cmp	r1, #8
 801cb5a:	f000 80b1 	beq.w	801ccc0 <lv_ta_signal+0x210>
        else if(c == LV_GROUP_KEY_DEL)  {
 801cb5e:	297f      	cmp	r1, #127	; 0x7f
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801cb60:	4630      	mov	r0, r6
        else if(c == LV_GROUP_KEY_DEL)  {
 801cb62:	f000 809c 	beq.w	801cc9e <lv_ta_signal+0x1ee>
            lv_ta_add_char(ta, c);
 801cb66:	f7ff faff 	bl	801c168 <lv_ta_add_char>
 801cb6a:	e7ac      	b.n	801cac6 <lv_ta_signal+0x16>
        if(ext->label) {
 801cb6c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801cb6e:	2b00      	cmp	r3, #0
 801cb70:	d0a9      	beq.n	801cac6 <lv_ta_signal+0x16>
            lv_obj_t * scrl = lv_page_get_scrl(ta);
 801cb72:	4630      	mov	r0, r6
 801cb74:	f7fd fde6 	bl	801a744 <lv_page_get_scrl>
 801cb78:	4607      	mov	r7, r0
            lv_style_t * style_ta = lv_obj_get_style(ta);
 801cb7a:	4630      	mov	r0, r6
 801cb7c:	f7ef f94e 	bl	800be1c <lv_obj_get_style>
 801cb80:	4681      	mov	r9, r0
            lv_style_t * style_scrl = lv_obj_get_style(scrl);
 801cb82:	4638      	mov	r0, r7
 801cb84:	f7ef f94a 	bl	800be1c <lv_obj_get_style>
            if(ext->one_line) {
 801cb88:	f898 3046 	ldrb.w	r3, [r8, #70]	; 0x46
            lv_style_t * style_scrl = lv_obj_get_style(scrl);
 801cb8c:	4605      	mov	r5, r0
            if(ext->one_line) {
 801cb8e:	079b      	lsls	r3, r3, #30
 801cb90:	d549      	bpl.n	801cc26 <lv_ta_signal+0x176>
                lv_style_t * style_label = lv_obj_get_style(ext->label);
 801cb92:	f8d8 0038 	ldr.w	r0, [r8, #56]	; 0x38
 801cb96:	f7ef f941 	bl	800be1c <lv_obj_get_style>
                lv_obj_set_height(ta, font_h + (style_ta->body.padding.ver + style_scrl->body.padding.ver) * 2);
 801cb9a:	f9b9 3020 	ldrsh.w	r3, [r9, #32]
 801cb9e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 801cba0:	4630      	mov	r0, r6
 801cba2:	f9b5 2020 	ldrsh.w	r2, [r5, #32]
 801cba6:	f891 1020 	ldrb.w	r1, [r1, #32]
 801cbaa:	4413      	add	r3, r2
 801cbac:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 801cbb0:	b209      	sxth	r1, r1
 801cbb2:	f7ee f8ff 	bl	800adb4 <lv_obj_set_height>
            lv_label_set_text(ext->label, NULL);
 801cbb6:	f8d8 0038 	ldr.w	r0, [r8, #56]	; 0x38
 801cbba:	2100      	movs	r1, #0
 801cbbc:	f7fb fe16 	bl	80187ec <lv_label_set_text>
 801cbc0:	e781      	b.n	801cac6 <lv_ta_signal+0x16>
        if(ext->label) {
 801cbc2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801cbc4:	2b00      	cmp	r3, #0
 801cbc6:	f43f af7e 	beq.w	801cac6 <lv_ta_signal+0x16>
            if(lv_obj_get_width(ta) != lv_area_get_width(param) ||
 801cbca:	4630      	mov	r0, r6
 801cbcc:	f7ef f91a 	bl	800be04 <lv_obj_get_width>
    return area_p->x2 - area_p->x1 + 1;
 801cbd0:	88bb      	ldrh	r3, [r7, #4]
 801cbd2:	883a      	ldrh	r2, [r7, #0]
 801cbd4:	3301      	adds	r3, #1
 801cbd6:	1a9b      	subs	r3, r3, r2
 801cbd8:	b21b      	sxth	r3, r3
 801cbda:	4298      	cmp	r0, r3
 801cbdc:	d054      	beq.n	801cc88 <lv_ta_signal+0x1d8>
                lv_obj_t * scrl = lv_page_get_scrl(ta);
 801cbde:	4630      	mov	r0, r6
 801cbe0:	f7fd fdb0 	bl	801a744 <lv_page_get_scrl>
 801cbe4:	4607      	mov	r7, r0
                lv_style_t * style_scrl = lv_obj_get_style(scrl);
 801cbe6:	f7ef f919 	bl	800be1c <lv_obj_get_style>
 801cbea:	4605      	mov	r5, r0
                lv_obj_set_width(ext->label, lv_obj_get_width(scrl) - 2 * style_scrl->body.padding.hor);
 801cbec:	4638      	mov	r0, r7
 801cbee:	f8d8 7038 	ldr.w	r7, [r8, #56]	; 0x38
 801cbf2:	f7ef f907 	bl	800be04 <lv_obj_get_width>
 801cbf6:	8c69      	ldrh	r1, [r5, #34]	; 0x22
 801cbf8:	eba0 0141 	sub.w	r1, r0, r1, lsl #1
 801cbfc:	4638      	mov	r0, r7
 801cbfe:	b209      	sxth	r1, r1
 801cc00:	f7ee f9c0 	bl	800af84 <lv_obj_set_width>
                lv_obj_set_pos(ext->label, style_scrl->body.padding.hor, style_scrl->body.padding.ver);
 801cc04:	f9b5 2020 	ldrsh.w	r2, [r5, #32]
 801cc08:	f9b5 1022 	ldrsh.w	r1, [r5, #34]	; 0x22
 801cc0c:	f8d8 0038 	ldr.w	r0, [r8, #56]	; 0x38
 801cc10:	f7ed faa8 	bl	800a164 <lv_obj_set_pos>
                lv_label_set_text(ext->label, NULL);    /*Refresh the label*/
 801cc14:	f8d8 0038 	ldr.w	r0, [r8, #56]	; 0x38
 801cc18:	2100      	movs	r1, #0
 801cc1a:	f7fb fde7 	bl	80187ec <lv_label_set_text>
                refr_cursor_area(ta);
 801cc1e:	4630      	mov	r0, r6
 801cc20:	f7ff f814 	bl	801bc4c <refr_cursor_area>
 801cc24:	e74f      	b.n	801cac6 <lv_ta_signal+0x16>
                lv_obj_set_width(ext->label, lv_obj_get_width(scrl) - 2 * style_scrl->body.padding.hor);
 801cc26:	4638      	mov	r0, r7
 801cc28:	f8d8 6038 	ldr.w	r6, [r8, #56]	; 0x38
 801cc2c:	f7ef f8ea 	bl	800be04 <lv_obj_get_width>
 801cc30:	8c69      	ldrh	r1, [r5, #34]	; 0x22
 801cc32:	eba0 0141 	sub.w	r1, r0, r1, lsl #1
 801cc36:	4630      	mov	r0, r6
 801cc38:	b209      	sxth	r1, r1
 801cc3a:	f7ee f9a3 	bl	800af84 <lv_obj_set_width>
                lv_obj_set_pos(ext->label, style_scrl->body.padding.hor, style_scrl->body.padding.ver);         /*Be sure the Label is in the correct position*/
 801cc3e:	f9b5 2020 	ldrsh.w	r2, [r5, #32]
 801cc42:	f9b5 1022 	ldrsh.w	r1, [r5, #34]	; 0x22
 801cc46:	f8d8 0038 	ldr.w	r0, [r8, #56]	; 0x38
 801cc4a:	f7ed fa8b 	bl	800a164 <lv_obj_set_pos>
 801cc4e:	e7b2      	b.n	801cbb6 <lv_ta_signal+0x106>
            if(buf->type[i] == NULL) break;
 801cc50:	683b      	ldr	r3, [r7, #0]
 801cc52:	b19b      	cbz	r3, 801cc7c <lv_ta_signal+0x1cc>
 801cc54:	687b      	ldr	r3, [r7, #4]
 801cc56:	2b00      	cmp	r3, #0
 801cc58:	d059      	beq.n	801cd0e <lv_ta_signal+0x25e>
 801cc5a:	68bb      	ldr	r3, [r7, #8]
 801cc5c:	2b00      	cmp	r3, #0
 801cc5e:	d05a      	beq.n	801cd16 <lv_ta_signal+0x266>
 801cc60:	68fb      	ldr	r3, [r7, #12]
 801cc62:	2b00      	cmp	r3, #0
 801cc64:	d05b      	beq.n	801cd1e <lv_ta_signal+0x26e>
 801cc66:	693b      	ldr	r3, [r7, #16]
 801cc68:	2b00      	cmp	r3, #0
 801cc6a:	d056      	beq.n	801cd1a <lv_ta_signal+0x26a>
 801cc6c:	697b      	ldr	r3, [r7, #20]
 801cc6e:	2b00      	cmp	r3, #0
 801cc70:	d04f      	beq.n	801cd12 <lv_ta_signal+0x262>
 801cc72:	69bb      	ldr	r3, [r7, #24]
 801cc74:	2b00      	cmp	r3, #0
 801cc76:	bf14      	ite	ne
 801cc78:	2307      	movne	r3, #7
 801cc7a:	2306      	moveq	r3, #6
        buf->type[i] = "lv_ta";
 801cc7c:	4a2a      	ldr	r2, [pc, #168]	; (801cd28 <lv_ta_signal+0x278>)
 801cc7e:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 801cc82:	e720      	b.n	801cac6 <lv_ta_signal+0x16>
        *editable = true;
 801cc84:	703c      	strb	r4, [r7, #0]
 801cc86:	e71e      	b.n	801cac6 <lv_ta_signal+0x16>
                    lv_obj_get_height(ta) != lv_area_get_height(param)) {
 801cc88:	4630      	mov	r0, r6
 801cc8a:	f7ef f8c1 	bl	800be10 <lv_obj_get_height>
    return area_p->y2 - area_p->y1 + 1;
 801cc8e:	88fb      	ldrh	r3, [r7, #6]
 801cc90:	887a      	ldrh	r2, [r7, #2]
 801cc92:	3301      	adds	r3, #1
 801cc94:	1a9b      	subs	r3, r3, r2
            if(lv_obj_get_width(ta) != lv_area_get_width(param) ||
 801cc96:	b21b      	sxth	r3, r3
 801cc98:	4298      	cmp	r0, r3
 801cc9a:	d1a0      	bne.n	801cbde <lv_ta_signal+0x12e>
 801cc9c:	e713      	b.n	801cac6 <lv_ta_signal+0x16>
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801cc9e:	f7ef f93b 	bl	800bf18 <lv_obj_get_ext_attr>
    return ext->cursor.pos;
 801cca2:	f8b0 504e 	ldrh.w	r5, [r0, #78]	; 0x4e
            lv_ta_set_cursor_pos(ta, cp + 1);
 801cca6:	4630      	mov	r0, r6
 801cca8:	1c69      	adds	r1, r5, #1
 801ccaa:	b209      	sxth	r1, r1
 801ccac:	f7ff f946 	bl	801bf3c <lv_ta_set_cursor_pos>
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801ccb0:	4630      	mov	r0, r6
 801ccb2:	f7ef f931 	bl	800bf18 <lv_obj_get_ext_attr>
            if(cp != lv_ta_get_cursor_pos(ta)) lv_ta_del_char(ta);
 801ccb6:	f8b0 304e 	ldrh.w	r3, [r0, #78]	; 0x4e
 801ccba:	42ab      	cmp	r3, r5
 801ccbc:	f43f af03 	beq.w	801cac6 <lv_ta_signal+0x16>
        else if(c == LV_GROUP_KEY_BACKSPACE) lv_ta_del_char(ta);
 801ccc0:	4630      	mov	r0, r6
 801ccc2:	f7ff f9fd 	bl	801c0c0 <lv_ta_del_char>
 801ccc6:	e6fe      	b.n	801cac6 <lv_ta_signal+0x16>
            lv_ta_set_cursor_type(ta, cur_type & (~LV_CURSOR_HIDDEN));
 801ccc8:	f005 0107 	and.w	r1, r5, #7
 801cccc:	4630      	mov	r0, r6
 801ccce:	f7ff fc77 	bl	801c5c0 <lv_ta_set_cursor_type>
 801ccd2:	e6f8      	b.n	801cac6 <lv_ta_signal+0x16>
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801ccd4:	4630      	mov	r0, r6
 801ccd6:	f7ef f91f 	bl	800bf18 <lv_obj_get_ext_attr>
    return ext->cursor.type;
 801ccda:	f890 105a 	ldrb.w	r1, [r0, #90]	; 0x5a
        lv_ta_set_cursor_type(ta, cur_type | LV_CURSOR_HIDDEN);
 801ccde:	4630      	mov	r0, r6
 801cce0:	f001 0107 	and.w	r1, r1, #7
 801cce4:	f041 0108 	orr.w	r1, r1, #8
 801cce8:	f7ff fc6a 	bl	801c5c0 <lv_ta_set_cursor_type>
 801ccec:	e6eb      	b.n	801cac6 <lv_ta_signal+0x16>
        if(c == LV_GROUP_KEY_RIGHT)     lv_ta_cursor_right(ta);
 801ccee:	4630      	mov	r0, r6
 801ccf0:	f7ff fe5a 	bl	801c9a8 <lv_ta_cursor_right>
 801ccf4:	e6e7      	b.n	801cac6 <lv_ta_signal+0x16>
        else if(c == LV_GROUP_KEY_LEFT) lv_ta_cursor_left(ta);
 801ccf6:	4630      	mov	r0, r6
 801ccf8:	f7ff fe64 	bl	801c9c4 <lv_ta_cursor_left>
 801ccfc:	e6e3      	b.n	801cac6 <lv_ta_signal+0x16>
        else if(c == LV_GROUP_KEY_UP)   lv_ta_cursor_up(ta);
 801ccfe:	4630      	mov	r0, r6
 801cd00:	f7ff fea6 	bl	801ca50 <lv_ta_cursor_up>
 801cd04:	e6df      	b.n	801cac6 <lv_ta_signal+0x16>
        else if(c == LV_GROUP_KEY_DOWN) lv_ta_cursor_down(ta);
 801cd06:	4630      	mov	r0, r6
 801cd08:	f7ff fe6c 	bl	801c9e4 <lv_ta_cursor_down>
 801cd0c:	e6db      	b.n	801cac6 <lv_ta_signal+0x16>
            if(buf->type[i] == NULL) break;
 801cd0e:	4623      	mov	r3, r4
 801cd10:	e7b4      	b.n	801cc7c <lv_ta_signal+0x1cc>
 801cd12:	2305      	movs	r3, #5
 801cd14:	e7b2      	b.n	801cc7c <lv_ta_signal+0x1cc>
 801cd16:	2302      	movs	r3, #2
 801cd18:	e7b0      	b.n	801cc7c <lv_ta_signal+0x1cc>
 801cd1a:	2304      	movs	r3, #4
 801cd1c:	e7ae      	b.n	801cc7c <lv_ta_signal+0x1cc>
 801cd1e:	2303      	movs	r3, #3
 801cd20:	e7ac      	b.n	801cc7c <lv_ta_signal+0x1cc>
 801cd22:	bf00      	nop
 801cd24:	20016658 	.word	0x20016658
 801cd28:	080c74d0 	.word	0x080c74d0

0801cd2c <tabpage_pressing_handler>:
 * Called when a tab's page or scrollable object is being pressed
 * @param tabview pointer to the btn view object
 * @param tabpage pointer to the page of a btn
 */
static void tabpage_pressing_handler(lv_obj_t * tabview, lv_obj_t * tabpage)
{
 801cd2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cd30:	b083      	sub	sp, #12
 801cd32:	460d      	mov	r5, r1
 801cd34:	4606      	mov	r6, r0
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 801cd36:	f7ef f8ef 	bl	800bf18 <lv_obj_get_ext_attr>
 801cd3a:	4604      	mov	r4, r0
    lv_indev_t * indev = lv_indev_get_act();
 801cd3c:	f7ec fa26 	bl	800918c <lv_indev_get_act>
    lv_point_t point_act;
    lv_indev_get_point(indev, &point_act);
 801cd40:	a901      	add	r1, sp, #4
 801cd42:	f7ec fa53 	bl	80091ec <lv_indev_get_point>
    lv_coord_t x_diff = point_act.x - ext->point_last.x;
    lv_coord_t y_diff = point_act.y - ext->point_last.y;

    if(ext->draging == 0) {
 801cd46:	7ea3      	ldrb	r3, [r4, #26]
 801cd48:	f013 0702 	ands.w	r7, r3, #2
 801cd4c:	d10f      	bne.n	801cd6e <tabpage_pressing_handler+0x42>
        if(x_diff >= LV_INDEV_DRAG_LIMIT || x_diff <= -LV_INDEV_DRAG_LIMIT) {
 801cd4e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801cd52:	8a21      	ldrh	r1, [r4, #16]
 801cd54:	3209      	adds	r2, #9
 801cd56:	1a52      	subs	r2, r2, r1
 801cd58:	b292      	uxth	r2, r2
 801cd5a:	2a12      	cmp	r2, #18
 801cd5c:	d84a      	bhi.n	801cdf4 <tabpage_pressing_handler+0xc8>
            ext->drag_hor = 1;
            ext->draging = 1;
            lv_obj_set_drag(lv_page_get_scrl(tabpage), false);
        } else if(y_diff >= LV_INDEV_DRAG_LIMIT || y_diff <= -LV_INDEV_DRAG_LIMIT) {
 801cd5e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801cd62:	8a61      	ldrh	r1, [r4, #18]
 801cd64:	3209      	adds	r2, #9
 801cd66:	1a52      	subs	r2, r2, r1
 801cd68:	b292      	uxth	r2, r2
 801cd6a:	2a12      	cmp	r2, #18
 801cd6c:	d83b      	bhi.n	801cde6 <tabpage_pressing_handler+0xba>
            ext->drag_hor = 0;
            ext->draging = 1;
        }
    }
    if(ext->drag_hor) {
 801cd6e:	075b      	lsls	r3, r3, #29
 801cd70:	d536      	bpl.n	801cde0 <tabpage_pressing_handler+0xb4>
        lv_obj_set_x(ext->content, lv_obj_get_x(ext->content) + point_act.x - ext->point_last.x);
 801cd72:	68a7      	ldr	r7, [r4, #8]
 801cd74:	4638      	mov	r0, r7
 801cd76:	f7ef f839 	bl	800bdec <lv_obj_get_x>
 801cd7a:	8a23      	ldrh	r3, [r4, #16]
 801cd7c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801cd80:	1ac9      	subs	r1, r1, r3
 801cd82:	4401      	add	r1, r0
 801cd84:	4638      	mov	r0, r7
 801cd86:	b209      	sxth	r1, r1
 801cd88:	f7ec fd6e 	bl	8009868 <lv_obj_set_x>
        ext->point_last.x = point_act.x;
 801cd8c:	9b01      	ldr	r3, [sp, #4]
        ext->point_last.y = point_act.y;

        /*Move the indicator*/
        lv_coord_t indic_width = lv_obj_get_width(ext->indic);
 801cd8e:	6860      	ldr	r0, [r4, #4]
        ext->point_last.x = point_act.x;
 801cd90:	6123      	str	r3, [r4, #16]
        lv_coord_t indic_width = lv_obj_get_width(ext->indic);
 801cd92:	f7ef f837 	bl	800be04 <lv_obj_get_width>
 801cd96:	4607      	mov	r7, r0
        lv_style_t * tabs_style = lv_obj_get_style(ext->btns);
 801cd98:	6820      	ldr	r0, [r4, #0]
 801cd9a:	f7ef f83f 	bl	800be1c <lv_obj_get_style>
 801cd9e:	4680      	mov	r8, r0
        lv_style_t * indic_style = lv_obj_get_style(ext->indic);
 801cda0:	6860      	ldr	r0, [r4, #4]
 801cda2:	f7ef f83b 	bl	800be1c <lv_obj_get_style>
        lv_coord_t p = ((tabpage->coords.x1 - tabview->coords.x1) * (indic_width + tabs_style->body.padding.inner)) / lv_obj_get_width(tabview);
 801cda6:	f9b5 1010 	ldrsh.w	r1, [r5, #16]
 801cdaa:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
        lv_style_t * indic_style = lv_obj_get_style(ext->indic);
 801cdae:	4681      	mov	r9, r0
        lv_coord_t p = ((tabpage->coords.x1 - tabview->coords.x1) * (indic_width + tabs_style->body.padding.inner)) / lv_obj_get_width(tabview);
 801cdb0:	f9b8 5024 	ldrsh.w	r5, [r8, #36]	; 0x24
 801cdb4:	4630      	mov	r0, r6
 801cdb6:	1ac9      	subs	r1, r1, r3
 801cdb8:	443d      	add	r5, r7
 801cdba:	fb05 f501 	mul.w	r5, r5, r1
 801cdbe:	f7ef f821 	bl	800be04 <lv_obj_get_width>

        lv_obj_set_x(ext->indic, indic_width * ext->tab_cur + tabs_style->body.padding.inner * ext->tab_cur + indic_style->body.padding.hor - p);
 801cdc2:	f9b8 3024 	ldrsh.w	r3, [r8, #36]	; 0x24
 801cdc6:	f8b9 2022 	ldrh.w	r2, [r9, #34]	; 0x22
 801cdca:	443b      	add	r3, r7
 801cdcc:	8aa1      	ldrh	r1, [r4, #20]
        lv_coord_t p = ((tabpage->coords.x1 - tabview->coords.x1) * (indic_width + tabs_style->body.padding.inner)) / lv_obj_get_width(tabview);
 801cdce:	fb95 f5f0 	sdiv	r5, r5, r0
        lv_obj_set_x(ext->indic, indic_width * ext->tab_cur + tabs_style->body.padding.inner * ext->tab_cur + indic_style->body.padding.hor - p);
 801cdd2:	fb11 2103 	smlabb	r1, r1, r3, r2
 801cdd6:	6860      	ldr	r0, [r4, #4]
 801cdd8:	1b49      	subs	r1, r1, r5
 801cdda:	b209      	sxth	r1, r1
 801cddc:	f7ec fd44 	bl	8009868 <lv_obj_set_x>
    }
}
 801cde0:	b003      	add	sp, #12
 801cde2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            ext->draging = 1;
 801cde6:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 801cdea:	f043 0202 	orr.w	r2, r3, #2
 801cdee:	4613      	mov	r3, r2
 801cdf0:	76a2      	strb	r2, [r4, #26]
 801cdf2:	e7bc      	b.n	801cd6e <tabpage_pressing_handler+0x42>
            ext->draging = 1;
 801cdf4:	f043 0306 	orr.w	r3, r3, #6
            lv_obj_set_drag(lv_page_get_scrl(tabpage), false);
 801cdf8:	4628      	mov	r0, r5
            ext->draging = 1;
 801cdfa:	76a3      	strb	r3, [r4, #26]
            lv_obj_set_drag(lv_page_get_scrl(tabpage), false);
 801cdfc:	f7fd fca2 	bl	801a744 <lv_page_get_scrl>
 801ce00:	4639      	mov	r1, r7
 801ce02:	f7ee fec7 	bl	800bb94 <lv_obj_set_drag>
 801ce06:	7ea3      	ldrb	r3, [r4, #26]
 801ce08:	e7b1      	b.n	801cd6e <tabpage_pressing_handler+0x42>
 801ce0a:	bf00      	nop

0801ce0c <lv_tabview_set_tab_act>:
{
 801ce0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ce10:	b08a      	sub	sp, #40	; 0x28
 801ce12:	460e      	mov	r6, r1
 801ce14:	4617      	mov	r7, r2
 801ce16:	4680      	mov	r8, r0
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 801ce18:	f7ef f87e 	bl	800bf18 <lv_obj_get_ext_attr>
 801ce1c:	4604      	mov	r4, r0
    lv_style_t * style = lv_obj_get_style(ext->content);
 801ce1e:	6880      	ldr	r0, [r0, #8]
 801ce20:	f7ee fffc 	bl	800be1c <lv_obj_get_style>
    if(id >= ext->tab_cnt) id = ext->tab_cnt - 1;
 801ce24:	8ae1      	ldrh	r1, [r4, #22]
    lv_style_t * style = lv_obj_get_style(ext->content);
 801ce26:	4605      	mov	r5, r0
    if(id >= ext->tab_cnt) id = ext->tab_cnt - 1;
 801ce28:	42b1      	cmp	r1, r6
 801ce2a:	d801      	bhi.n	801ce30 <lv_tabview_set_tab_act+0x24>
 801ce2c:	1e4e      	subs	r6, r1, #1
 801ce2e:	b2b6      	uxth	r6, r6
    if(ext->tab_load_action && id != ext->tab_cur) res = ext->tab_load_action(tabview, id);
 801ce30:	69e3      	ldr	r3, [r4, #28]
 801ce32:	b153      	cbz	r3, 801ce4a <lv_tabview_set_tab_act+0x3e>
 801ce34:	8aa2      	ldrh	r2, [r4, #20]
 801ce36:	42b2      	cmp	r2, r6
 801ce38:	d007      	beq.n	801ce4a <lv_tabview_set_tab_act+0x3e>
 801ce3a:	4631      	mov	r1, r6
 801ce3c:	4640      	mov	r0, r8
 801ce3e:	4798      	blx	r3
    if(res != LV_RES_OK) return;        /*Prevent the tab loading*/
 801ce40:	2801      	cmp	r0, #1
 801ce42:	d002      	beq.n	801ce4a <lv_tabview_set_tab_act+0x3e>
}
 801ce44:	b00a      	add	sp, #40	; 0x28
 801ce46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ext->tab_cur = id;
 801ce4a:	82a6      	strh	r6, [r4, #20]
    lv_coord_t cont_x = -(lv_obj_get_width(tabview) * id + style->body.padding.inner * id + style->body.padding.hor);
 801ce4c:	4640      	mov	r0, r8
 801ce4e:	f7ee ffd9 	bl	800be04 <lv_obj_get_width>
 801ce52:	f9b5 3024 	ldrsh.w	r3, [r5, #36]	; 0x24
 801ce56:	8c6d      	ldrh	r5, [r5, #34]	; 0x22
 801ce58:	1819      	adds	r1, r3, r0
    if(ext->anim_time == 0 || anim_en == false) {
 801ce5a:	8b22      	ldrh	r2, [r4, #24]
    lv_coord_t cont_x = -(lv_obj_get_width(tabview) * id + style->body.padding.inner * id + style->body.padding.hor);
 801ce5c:	fb11 5106 	smlabb	r1, r1, r6, r5
 801ce60:	4249      	negs	r1, r1
 801ce62:	b20d      	sxth	r5, r1
    if(ext->anim_time == 0 || anim_en == false) {
 801ce64:	b102      	cbz	r2, 801ce68 <lv_tabview_set_tab_act+0x5c>
 801ce66:	bb07      	cbnz	r7, 801ceaa <lv_tabview_set_tab_act+0x9e>
        lv_obj_set_x(ext->content, cont_x);
 801ce68:	4629      	mov	r1, r5
 801ce6a:	68a0      	ldr	r0, [r4, #8]
 801ce6c:	f7ec fcfc 	bl	8009868 <lv_obj_set_x>
    lv_coord_t indic_width = lv_obj_get_width(ext->indic);
 801ce70:	6860      	ldr	r0, [r4, #4]
 801ce72:	f7ee ffc7 	bl	800be04 <lv_obj_get_width>
 801ce76:	4605      	mov	r5, r0
    lv_style_t * tabs_style = lv_obj_get_style(ext->btns);
 801ce78:	6820      	ldr	r0, [r4, #0]
 801ce7a:	f7ee ffcf 	bl	800be1c <lv_obj_get_style>
    lv_coord_t indic_x = indic_width * id + tabs_style->body.padding.inner * id + tabs_style->body.padding.hor;
 801ce7e:	f9b0 1024 	ldrsh.w	r1, [r0, #36]	; 0x24
 801ce82:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 801ce84:	4429      	add	r1, r5
    if(ext->anim_time == 0 || anim_en == false) {
 801ce86:	8b23      	ldrh	r3, [r4, #24]
    lv_coord_t indic_x = indic_width * id + tabs_style->body.padding.inner * id + tabs_style->body.padding.hor;
 801ce88:	fb11 2606 	smlabb	r6, r1, r6, r2
 801ce8c:	b236      	sxth	r6, r6
    if(ext->anim_time == 0 || anim_en == false) {
 801ce8e:	b103      	cbz	r3, 801ce92 <lv_tabview_set_tab_act+0x86>
 801ce90:	bb87      	cbnz	r7, 801cef4 <lv_tabview_set_tab_act+0xe8>
        lv_obj_set_x(ext->indic, indic_x);
 801ce92:	4631      	mov	r1, r6
 801ce94:	6860      	ldr	r0, [r4, #4]
 801ce96:	f7ec fce7 	bl	8009868 <lv_obj_set_x>
    lv_btnm_set_toggle(ext->btns, true, ext->tab_cur);
 801ce9a:	8aa2      	ldrh	r2, [r4, #20]
 801ce9c:	2101      	movs	r1, #1
 801ce9e:	6820      	ldr	r0, [r4, #0]
 801cea0:	f7f9 f914 	bl	80160cc <lv_btnm_set_toggle>
}
 801cea4:	b00a      	add	sp, #40	; 0x28
 801cea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        a.var = ext->content;
 801ceaa:	68a3      	ldr	r3, [r4, #8]
        a.start = lv_obj_get_x(ext->content);
 801ceac:	4618      	mov	r0, r3
        a.var = ext->content;
 801ceae:	9301      	str	r3, [sp, #4]
        a.start = lv_obj_get_x(ext->content);
 801ceb0:	f7ee ff9c 	bl	800bdec <lv_obj_get_x>
        a.playback = 0;
 801ceb4:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
        a.end_cb = NULL;
 801ceb8:	2300      	movs	r3, #0
        a.time = ext->anim_time;
 801ceba:	f8b4 c018 	ldrh.w	ip, [r4, #24]
        a.repeat = 0;
 801cebe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
        a.fp = (lv_anim_fp_t)lv_obj_set_x;
 801cec2:	f8df e078 	ldr.w	lr, [pc, #120]	; 801cf3c <lv_tabview_set_tab_act+0x130>
        a.path = lv_anim_path_linear;
 801cec6:	491c      	ldr	r1, [pc, #112]	; (801cf38 <lv_tabview_set_tab_act+0x12c>)
        a.repeat = 0;
 801cec8:	f363 0241 	bfi	r2, r3, #1, #1
        a.start = lv_obj_get_x(ext->content);
 801cecc:	9005      	str	r0, [sp, #20]
        lv_anim_create(&a);
 801cece:	a801      	add	r0, sp, #4
        a.end = cont_x;
 801ced0:	9506      	str	r5, [sp, #24]
        a.end_cb = NULL;
 801ced2:	9303      	str	r3, [sp, #12]
        a.act_time = 0;
 801ced4:	f8ad 301e 	strh.w	r3, [sp, #30]
        a.repeat = 0;
 801ced8:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
        a.time = ext->anim_time;
 801cedc:	f8ad c01c 	strh.w	ip, [sp, #28]
        a.playback_pause = 0;
 801cee0:	f8ad 3020 	strh.w	r3, [sp, #32]
        a.repeat_pause = 0;
 801cee4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
        a.fp = (lv_anim_fp_t)lv_obj_set_x;
 801cee8:	f8cd e008 	str.w	lr, [sp, #8]
        a.path = lv_anim_path_linear;
 801ceec:	9104      	str	r1, [sp, #16]
        lv_anim_create(&a);
 801ceee:	f7f5 fcdb 	bl	80128a8 <lv_anim_create>
 801cef2:	e7bd      	b.n	801ce70 <lv_tabview_set_tab_act+0x64>
        a.var = ext->indic;
 801cef4:	6863      	ldr	r3, [r4, #4]
        a.fp = (lv_anim_fp_t)lv_obj_set_x;
 801cef6:	4d11      	ldr	r5, [pc, #68]	; (801cf3c <lv_tabview_set_tab_act+0x130>)
        a.start = lv_obj_get_x(ext->indic);
 801cef8:	4618      	mov	r0, r3
        a.var = ext->indic;
 801cefa:	9301      	str	r3, [sp, #4]
        a.start = lv_obj_get_x(ext->indic);
 801cefc:	f7ee ff76 	bl	800bdec <lv_obj_get_x>
        a.playback = 0;
 801cf00:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
        a.end_cb = NULL;
 801cf04:	2300      	movs	r3, #0
        a.time = ext->anim_time;
 801cf06:	8b27      	ldrh	r7, [r4, #24]
        a.repeat = 0;
 801cf08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
        a.path = lv_anim_path_linear;
 801cf0c:	490a      	ldr	r1, [pc, #40]	; (801cf38 <lv_tabview_set_tab_act+0x12c>)
        a.start = lv_obj_get_x(ext->indic);
 801cf0e:	9005      	str	r0, [sp, #20]
        lv_anim_create(&a);
 801cf10:	a801      	add	r0, sp, #4
        a.repeat = 0;
 801cf12:	f363 0241 	bfi	r2, r3, #1, #1
        a.end = indic_x;
 801cf16:	9606      	str	r6, [sp, #24]
        a.end_cb = NULL;
 801cf18:	9303      	str	r3, [sp, #12]
        a.act_time = 0;
 801cf1a:	f8ad 301e 	strh.w	r3, [sp, #30]
        a.repeat = 0;
 801cf1e:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
        a.time = ext->anim_time;
 801cf22:	f8ad 701c 	strh.w	r7, [sp, #28]
        a.playback_pause = 0;
 801cf26:	f8ad 3020 	strh.w	r3, [sp, #32]
        a.repeat_pause = 0;
 801cf2a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
        a.fp = (lv_anim_fp_t)lv_obj_set_x;
 801cf2e:	9502      	str	r5, [sp, #8]
        a.path = lv_anim_path_linear;
 801cf30:	9104      	str	r1, [sp, #16]
        lv_anim_create(&a);
 801cf32:	f7f5 fcb9 	bl	80128a8 <lv_anim_create>
 801cf36:	e7b0      	b.n	801ce9a <lv_tabview_set_tab_act+0x8e>
 801cf38:	08012a0d 	.word	0x08012a0d
 801cf3c:	08009869 	.word	0x08009869

0801cf40 <tab_btnm_action>:
 * @param tab_btnm pointer to the tab's button matrix object
 * @param id the id of the tab (>= 0)
 * @return LV_ACTION_RES_OK because the button matrix in not deleted in the function
 */
static lv_res_t tab_btnm_action(lv_obj_t * tab_btnm, const char * tab_name)
{
 801cf40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cf42:	4604      	mov	r4, r0
 801cf44:	460f      	mov	r7, r1
    lv_obj_t * tab = lv_obj_get_parent(tab_btnm);
 801cf46:	f7ee ff3d 	bl	800bdc4 <lv_obj_get_parent>
 801cf4a:	4606      	mov	r6, r0
    const char ** tabs_map = lv_btnm_get_map(tab_btnm);
 801cf4c:	4620      	mov	r0, r4
 801cf4e:	f7f9 f911 	bl	8016174 <lv_btnm_get_map>
 801cf52:	4605      	mov	r5, r0

    uint8_t i = 0;

    while(tabs_map[i][0] != '\0') {
 801cf54:	6800      	ldr	r0, [r0, #0]
 801cf56:	7801      	ldrb	r1, [r0, #0]
 801cf58:	b171      	cbz	r1, 801cf78 <tab_btnm_action+0x38>
 801cf5a:	2400      	movs	r4, #0
 801cf5c:	e004      	b.n	801cf68 <tab_btnm_action+0x28>
        if(strcmp(&tabs_map[i][1], tab_name) == 0) break;   /*[1] to skip the control byte*/
        i++;
 801cf5e:	b2dc      	uxtb	r4, r3
    while(tabs_map[i][0] != '\0') {
 801cf60:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 801cf64:	7803      	ldrb	r3, [r0, #0]
 801cf66:	b133      	cbz	r3, 801cf76 <tab_btnm_action+0x36>
        if(strcmp(&tabs_map[i][1], tab_name) == 0) break;   /*[1] to skip the control byte*/
 801cf68:	3001      	adds	r0, #1
 801cf6a:	4639      	mov	r1, r7
 801cf6c:	f7e3 f94c 	bl	8000208 <strcmp>
        i++;
 801cf70:	1c63      	adds	r3, r4, #1
        if(strcmp(&tabs_map[i][1], tab_name) == 0) break;   /*[1] to skip the control byte*/
 801cf72:	2800      	cmp	r0, #0
 801cf74:	d1f3      	bne.n	801cf5e <tab_btnm_action+0x1e>
 801cf76:	b2a1      	uxth	r1, r4
    }

    lv_tabview_set_tab_act(tab, i, true);
 801cf78:	4630      	mov	r0, r6
 801cf7a:	2201      	movs	r2, #1
 801cf7c:	f7ff ff46 	bl	801ce0c <lv_tabview_set_tab_act>

    return LV_RES_OK;
}
 801cf80:	2001      	movs	r0, #1
 801cf82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801cf84 <tabpage_press_lost_handler>:
{
 801cf84:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cf86:	b083      	sub	sp, #12
 801cf88:	460f      	mov	r7, r1
 801cf8a:	4604      	mov	r4, r0
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 801cf8c:	f7ee ffc4 	bl	800bf18 <lv_obj_get_ext_attr>
 801cf90:	4606      	mov	r6, r0
    lv_obj_set_drag(lv_page_get_scrl(tabpage), true);
 801cf92:	4638      	mov	r0, r7
    ext->drag_hor = 0;
 801cf94:	7eb3      	ldrb	r3, [r6, #26]
    ext->draging = 0;
 801cf96:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 801cf9a:	f36f 0341 	bfc	r3, #1, #1
 801cf9e:	76b3      	strb	r3, [r6, #26]
    lv_obj_set_drag(lv_page_get_scrl(tabpage), true);
 801cfa0:	f7fd fbd0 	bl	801a744 <lv_page_get_scrl>
 801cfa4:	2101      	movs	r1, #1
 801cfa6:	f7ee fdf5 	bl	800bb94 <lv_obj_set_drag>
    lv_indev_t * indev = lv_indev_get_act();
 801cfaa:	f7ec f8ef 	bl	800918c <lv_indev_get_act>
 801cfae:	4605      	mov	r5, r0
    lv_indev_get_point(indev, &point_act);
 801cfb0:	4669      	mov	r1, sp
 801cfb2:	f7ec f91b 	bl	80091ec <lv_indev_get_point>
    lv_indev_get_vect(indev, &vect);
 801cfb6:	4628      	mov	r0, r5
 801cfb8:	a901      	add	r1, sp, #4
 801cfba:	f7ec f937 	bl	800922c <lv_indev_get_vect>
    while(vect.x != 0)   {
 801cfbe:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801cfc2:	2a00      	cmp	r2, #0
 801cfc4:	d03a      	beq.n	801d03c <tabpage_press_lost_handler+0xb8>
 801cfc6:	2000      	movs	r0, #0
        vect.x = vect.x * (100 - LV_INDEV_DRAG_THROW) / 100;
 801cfc8:	4d1d      	ldr	r5, [pc, #116]	; (801d040 <tabpage_press_lost_handler+0xbc>)
 801cfca:	eb02 0382 	add.w	r3, r2, r2, lsl #2
        x_predict += vect.x;
 801cfce:	4402      	add	r2, r0
        vect.x = vect.x * (100 - LV_INDEV_DRAG_THROW) / 100;
 801cfd0:	011b      	lsls	r3, r3, #4
        x_predict += vect.x;
 801cfd2:	b291      	uxth	r1, r2
        vect.x = vect.x * (100 - LV_INDEV_DRAG_THROW) / 100;
 801cfd4:	fb85 0203 	smull	r0, r2, r5, r3
 801cfd8:	17db      	asrs	r3, r3, #31
        x_predict += vect.x;
 801cfda:	b208      	sxth	r0, r1
        vect.x = vect.x * (100 - LV_INDEV_DRAG_THROW) / 100;
 801cfdc:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 801cfe0:	b21a      	sxth	r2, r3
    while(vect.x != 0)   {
 801cfe2:	2b00      	cmp	r3, #0
 801cfe4:	d1f1      	bne.n	801cfca <tabpage_press_lost_handler+0x46>
 801cfe6:	f8ad 3004 	strh.w	r3, [sp, #4]
    lv_coord_t page_x1 = tabpage->coords.x1 - tabview->coords.x1 + x_predict;
 801cfea:	8a3a      	ldrh	r2, [r7, #16]
    lv_coord_t page_x2 = page_x1 + lv_obj_get_width(tabpage);
 801cfec:	4638      	mov	r0, r7
    lv_coord_t page_x1 = tabpage->coords.x1 - tabview->coords.x1 + x_predict;
 801cfee:	8a25      	ldrh	r5, [r4, #16]
 801cff0:	1b52      	subs	r2, r2, r5
 801cff2:	440a      	add	r2, r1
 801cff4:	b295      	uxth	r5, r2
    lv_coord_t page_x2 = page_x1 + lv_obj_get_width(tabpage);
 801cff6:	f7ee ff05 	bl	800be04 <lv_obj_get_width>
 801cffa:	4607      	mov	r7, r0
    lv_coord_t treshold = lv_obj_get_width(tabview) / 2;
 801cffc:	4620      	mov	r0, r4
 801cffe:	f7ee ff01 	bl	800be04 <lv_obj_get_width>
 801d002:	2800      	cmp	r0, #0
    if(page_x1 > treshold) {
 801d004:	b22b      	sxth	r3, r5
    uint16_t tab_cur = ext->tab_cur;
 801d006:	8ab1      	ldrh	r1, [r6, #20]
    lv_coord_t treshold = lv_obj_get_width(tabview) / 2;
 801d008:	bfb8      	it	lt
 801d00a:	3001      	addlt	r0, #1
 801d00c:	f340 004f 	sbfx	r0, r0, #1, #16
    if(page_x1 > treshold) {
 801d010:	4283      	cmp	r3, r0
 801d012:	dd08      	ble.n	801d026 <tabpage_press_lost_handler+0xa2>
        if(tab_cur != 0) tab_cur--;
 801d014:	b109      	cbz	r1, 801d01a <tabpage_press_lost_handler+0x96>
 801d016:	3901      	subs	r1, #1
 801d018:	b289      	uxth	r1, r1
    lv_tabview_set_tab_act(tabview, tab_cur, true);
 801d01a:	4620      	mov	r0, r4
 801d01c:	2201      	movs	r2, #1
 801d01e:	f7ff fef5 	bl	801ce0c <lv_tabview_set_tab_act>
}
 801d022:	b003      	add	sp, #12
 801d024:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_coord_t page_x2 = page_x1 + lv_obj_get_width(tabpage);
 801d026:	443d      	add	r5, r7
    } else if(page_x2 < treshold) {
 801d028:	b22d      	sxth	r5, r5
 801d02a:	4285      	cmp	r5, r0
 801d02c:	daf5      	bge.n	801d01a <tabpage_press_lost_handler+0x96>
        if(tab_cur < ext->tab_cnt - 1) tab_cur++;
 801d02e:	8af3      	ldrh	r3, [r6, #22]
 801d030:	3b01      	subs	r3, #1
 801d032:	4299      	cmp	r1, r3
 801d034:	daf1      	bge.n	801d01a <tabpage_press_lost_handler+0x96>
 801d036:	3101      	adds	r1, #1
 801d038:	b289      	uxth	r1, r1
 801d03a:	e7ee      	b.n	801d01a <tabpage_press_lost_handler+0x96>
    while(vect.x != 0)   {
 801d03c:	4611      	mov	r1, r2
 801d03e:	e7d4      	b.n	801cfea <tabpage_press_lost_handler+0x66>
 801d040:	51eb851f 	.word	0x51eb851f

0801d044 <tabpage_signal>:
{
 801d044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    res = page_signal(tab_page, sign, param);
 801d046:	4b18      	ldr	r3, [pc, #96]	; (801d0a8 <tabpage_signal+0x64>)
{
 801d048:	4606      	mov	r6, r0
 801d04a:	460d      	mov	r5, r1
    res = page_signal(tab_page, sign, param);
 801d04c:	681b      	ldr	r3, [r3, #0]
 801d04e:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 801d050:	2801      	cmp	r0, #1
    res = page_signal(tab_page, sign, param);
 801d052:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
 801d054:	d001      	beq.n	801d05a <tabpage_signal+0x16>
}
 801d056:	4620      	mov	r0, r4
 801d058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_obj_t * cont = lv_obj_get_parent(tab_page);
 801d05a:	4630      	mov	r0, r6
 801d05c:	f7ee feb2 	bl	800bdc4 <lv_obj_get_parent>
    lv_obj_t * tabview = lv_obj_get_parent(cont);
 801d060:	f7ee feb0 	bl	800bdc4 <lv_obj_get_parent>
 801d064:	4607      	mov	r7, r0
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 801d066:	f7ee ff57 	bl	800bf18 <lv_obj_get_ext_attr>
    return ext->slide_enable ? true : false;
 801d06a:	7e83      	ldrb	r3, [r0, #26]
    if(lv_tabview_get_sliding(tabview) == false) return res;
 801d06c:	07db      	lsls	r3, r3, #31
 801d06e:	d5f2      	bpl.n	801d056 <tabpage_signal+0x12>
    if(sign == LV_SIGNAL_PRESSED) {
 801d070:	2d08      	cmp	r5, #8
 801d072:	d009      	beq.n	801d088 <tabpage_signal+0x44>
    } else if(sign == LV_SIGNAL_PRESSING) {
 801d074:	2d09      	cmp	r5, #9
 801d076:	d012      	beq.n	801d09e <tabpage_signal+0x5a>
    } else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
 801d078:	3d0a      	subs	r5, #10
 801d07a:	2d01      	cmp	r5, #1
 801d07c:	d8eb      	bhi.n	801d056 <tabpage_signal+0x12>
        tabpage_press_lost_handler(tabview, tab_page);
 801d07e:	4631      	mov	r1, r6
 801d080:	4638      	mov	r0, r7
 801d082:	f7ff ff7f 	bl	801cf84 <tabpage_press_lost_handler>
 801d086:	e7e6      	b.n	801d056 <tabpage_signal+0x12>
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 801d088:	4638      	mov	r0, r7
 801d08a:	f7ee ff45 	bl	800bf18 <lv_obj_get_ext_attr>
 801d08e:	4605      	mov	r5, r0
    lv_indev_t * indev = lv_indev_get_act();
 801d090:	f7ec f87c 	bl	800918c <lv_indev_get_act>
    lv_indev_get_point(indev, &ext->point_last);
 801d094:	f105 0110 	add.w	r1, r5, #16
 801d098:	f7ec f8a8 	bl	80091ec <lv_indev_get_point>
 801d09c:	e7db      	b.n	801d056 <tabpage_signal+0x12>
        tabpage_pressing_handler(tabview, tab_page);
 801d09e:	4631      	mov	r1, r6
 801d0a0:	4638      	mov	r0, r7
 801d0a2:	f7ff fe43 	bl	801cd2c <tabpage_pressing_handler>
 801d0a6:	e7d6      	b.n	801d056 <tabpage_signal+0x12>
 801d0a8:	20016668 	.word	0x20016668

0801d0ac <tabpage_scrl_signal>:
{
 801d0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    res = page_scrl_signal(tab_scrl, sign, param);
 801d0ae:	4b1a      	ldr	r3, [pc, #104]	; (801d118 <tabpage_scrl_signal+0x6c>)
{
 801d0b0:	4606      	mov	r6, r0
 801d0b2:	460d      	mov	r5, r1
    res = page_scrl_signal(tab_scrl, sign, param);
 801d0b4:	685b      	ldr	r3, [r3, #4]
 801d0b6:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 801d0b8:	2801      	cmp	r0, #1
    res = page_scrl_signal(tab_scrl, sign, param);
 801d0ba:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
 801d0bc:	d001      	beq.n	801d0c2 <tabpage_scrl_signal+0x16>
}
 801d0be:	4620      	mov	r0, r4
 801d0c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_obj_t * tab_page = lv_obj_get_parent(tab_scrl);
 801d0c2:	4630      	mov	r0, r6
 801d0c4:	f7ee fe7e 	bl	800bdc4 <lv_obj_get_parent>
 801d0c8:	4607      	mov	r7, r0
    lv_obj_t * cont = lv_obj_get_parent(tab_page);
 801d0ca:	f7ee fe7b 	bl	800bdc4 <lv_obj_get_parent>
    lv_obj_t * tabview = lv_obj_get_parent(cont);
 801d0ce:	f7ee fe79 	bl	800bdc4 <lv_obj_get_parent>
 801d0d2:	4606      	mov	r6, r0
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 801d0d4:	f7ee ff20 	bl	800bf18 <lv_obj_get_ext_attr>
    return ext->slide_enable ? true : false;
 801d0d8:	7e83      	ldrb	r3, [r0, #26]
    if(lv_tabview_get_sliding(tabview) == false) return res;
 801d0da:	07db      	lsls	r3, r3, #31
 801d0dc:	d5ef      	bpl.n	801d0be <tabpage_scrl_signal+0x12>
    if(sign == LV_SIGNAL_PRESSED) {
 801d0de:	2d08      	cmp	r5, #8
 801d0e0:	d009      	beq.n	801d0f6 <tabpage_scrl_signal+0x4a>
    } else if(sign == LV_SIGNAL_PRESSING) {
 801d0e2:	2d09      	cmp	r5, #9
 801d0e4:	d012      	beq.n	801d10c <tabpage_scrl_signal+0x60>
    } else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
 801d0e6:	3d0a      	subs	r5, #10
 801d0e8:	2d01      	cmp	r5, #1
 801d0ea:	d8e8      	bhi.n	801d0be <tabpage_scrl_signal+0x12>
        tabpage_press_lost_handler(tabview, tab_page);
 801d0ec:	4639      	mov	r1, r7
 801d0ee:	4630      	mov	r0, r6
 801d0f0:	f7ff ff48 	bl	801cf84 <tabpage_press_lost_handler>
 801d0f4:	e7e3      	b.n	801d0be <tabpage_scrl_signal+0x12>
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 801d0f6:	4630      	mov	r0, r6
 801d0f8:	f7ee ff0e 	bl	800bf18 <lv_obj_get_ext_attr>
 801d0fc:	4605      	mov	r5, r0
    lv_indev_t * indev = lv_indev_get_act();
 801d0fe:	f7ec f845 	bl	800918c <lv_indev_get_act>
    lv_indev_get_point(indev, &ext->point_last);
 801d102:	f105 0110 	add.w	r1, r5, #16
 801d106:	f7ec f871 	bl	80091ec <lv_indev_get_point>
 801d10a:	e7d8      	b.n	801d0be <tabpage_scrl_signal+0x12>
        tabpage_pressing_handler(tabview, tab_page);
 801d10c:	4639      	mov	r1, r7
 801d10e:	4630      	mov	r0, r6
 801d110:	f7ff fe0c 	bl	801cd2c <tabpage_pressing_handler>
 801d114:	e7d3      	b.n	801d0be <tabpage_scrl_signal+0x12>
 801d116:	bf00      	nop
 801d118:	20016668 	.word	0x20016668

0801d11c <tabview_realign>:
/**
 * Realign and resize the elements of Tab view
 * @param tabview pointer to a Tab view object
 */
static void tabview_realign(lv_obj_t * tabview)
{
 801d11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d120:	b082      	sub	sp, #8
 801d122:	4607      	mov	r7, r0
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 801d124:	f7ee fef8 	bl	800bf18 <lv_obj_get_ext_attr>
 801d128:	4605      	mov	r5, r0

    lv_obj_set_width(ext->btns, lv_obj_get_width(tabview));
 801d12a:	4638      	mov	r0, r7
 801d12c:	682c      	ldr	r4, [r5, #0]
 801d12e:	f7ee fe69 	bl	800be04 <lv_obj_get_width>
 801d132:	4601      	mov	r1, r0
 801d134:	4620      	mov	r0, r4
 801d136:	f7ed ff25 	bl	800af84 <lv_obj_set_width>

    if(ext->btns_hide) {
 801d13a:	7ea9      	ldrb	r1, [r5, #26]
 801d13c:	f011 0408 	ands.w	r4, r1, #8
 801d140:	d135      	bne.n	801d1ae <tabview_realign+0x92>
    	lv_obj_set_hidden(ext->btns, true);
    	lv_obj_set_hidden(ext->indic, true);
    	lv_obj_set_height(ext->content, lv_obj_get_height(tabview));
    	lv_obj_align(ext->content, NULL, LV_ALIGN_IN_TOP_LEFT, 0, 0);
    }
    else if(ext->tab_cnt != 0) {
 801d142:	8aeb      	ldrh	r3, [r5, #22]
 801d144:	2b00      	cmp	r3, #0
 801d146:	d14a      	bne.n	801d1de <tabview_realign+0xc2>
				lv_obj_align(ext->btns, ext->content, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
				break;
		}
    }

    lv_obj_t * pages = lv_obj_get_child(ext->content, NULL);
 801d148:	2100      	movs	r1, #0
 801d14a:	68a8      	ldr	r0, [r5, #8]
 801d14c:	f7ee fe3c 	bl	800bdc8 <lv_obj_get_child>
    while(pages != NULL) {
 801d150:	4604      	mov	r4, r0
 801d152:	b160      	cbz	r0, 801d16e <tabview_realign+0x52>
 801d154:	4e56      	ldr	r6, [pc, #344]	; (801d2b0 <tabview_realign+0x194>)
        if(lv_obj_get_signal_func(pages) == tabpage_signal) {  /*Be sure adjust only the pages (user can other things)*/
 801d156:	4620      	mov	r0, r4
 801d158:	f7ee feda 	bl	800bf10 <lv_obj_get_signal_func>
 801d15c:	4286      	cmp	r6, r0
 801d15e:	d019      	beq.n	801d194 <tabview_realign+0x78>
            lv_obj_set_size(pages, lv_obj_get_width(tabview), lv_obj_get_height(ext->content));
        }
        pages = lv_obj_get_child(ext->content, pages);
 801d160:	4621      	mov	r1, r4
 801d162:	68a8      	ldr	r0, [r5, #8]
 801d164:	f7ee fe30 	bl	800bdc8 <lv_obj_get_child>
    while(pages != NULL) {
 801d168:	4604      	mov	r4, r0
 801d16a:	2800      	cmp	r0, #0
 801d16c:	d1f3      	bne.n	801d156 <tabview_realign+0x3a>
    }

    if(!ext->btns_hide) {
 801d16e:	7eab      	ldrb	r3, [r5, #26]
 801d170:	f013 0408 	ands.w	r4, r3, #8
 801d174:	d106      	bne.n	801d184 <tabview_realign+0x68>
    	lv_obj_align(ext->indic, ext->btns, LV_ALIGN_IN_BOTTOM_LEFT, 0, 0);
 801d176:	6829      	ldr	r1, [r5, #0]
 801d178:	4623      	mov	r3, r4
 801d17a:	6868      	ldr	r0, [r5, #4]
 801d17c:	2204      	movs	r2, #4
 801d17e:	9400      	str	r4, [sp, #0]
 801d180:	f7ed fa10 	bl	800a5a4 <lv_obj_align>
    }

    lv_tabview_set_tab_act(tabview, ext->tab_cur, false);
 801d184:	8aa9      	ldrh	r1, [r5, #20]
 801d186:	4638      	mov	r0, r7
 801d188:	2200      	movs	r2, #0
}
 801d18a:	b002      	add	sp, #8
 801d18c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_tabview_set_tab_act(tabview, ext->tab_cur, false);
 801d190:	f7ff be3c 	b.w	801ce0c <lv_tabview_set_tab_act>
            lv_obj_set_size(pages, lv_obj_get_width(tabview), lv_obj_get_height(ext->content));
 801d194:	4638      	mov	r0, r7
 801d196:	f7ee fe35 	bl	800be04 <lv_obj_get_width>
 801d19a:	4680      	mov	r8, r0
 801d19c:	68a8      	ldr	r0, [r5, #8]
 801d19e:	f7ee fe37 	bl	800be10 <lv_obj_get_height>
 801d1a2:	4641      	mov	r1, r8
 801d1a4:	4602      	mov	r2, r0
 801d1a6:	4620      	mov	r0, r4
 801d1a8:	f7ed fd18 	bl	800abdc <lv_obj_set_size>
 801d1ac:	e7d8      	b.n	801d160 <tabview_realign+0x44>
    	lv_obj_set_hidden(ext->btns, true);
 801d1ae:	6828      	ldr	r0, [r5, #0]
 801d1b0:	2101      	movs	r1, #1
 801d1b2:	f7ee fc83 	bl	800babc <lv_obj_set_hidden>
    	lv_obj_set_hidden(ext->indic, true);
 801d1b6:	2101      	movs	r1, #1
 801d1b8:	6868      	ldr	r0, [r5, #4]
 801d1ba:	f7ee fc7f 	bl	800babc <lv_obj_set_hidden>
    	lv_obj_set_height(ext->content, lv_obj_get_height(tabview));
 801d1be:	68ac      	ldr	r4, [r5, #8]
 801d1c0:	4638      	mov	r0, r7
 801d1c2:	f7ee fe25 	bl	800be10 <lv_obj_get_height>
 801d1c6:	4601      	mov	r1, r0
 801d1c8:	4620      	mov	r0, r4
 801d1ca:	f7ed fdf3 	bl	800adb4 <lv_obj_set_height>
    	lv_obj_align(ext->content, NULL, LV_ALIGN_IN_TOP_LEFT, 0, 0);
 801d1ce:	2300      	movs	r3, #0
 801d1d0:	68a8      	ldr	r0, [r5, #8]
 801d1d2:	2201      	movs	r2, #1
 801d1d4:	9300      	str	r3, [sp, #0]
 801d1d6:	4619      	mov	r1, r3
 801d1d8:	f7ed f9e4 	bl	800a5a4 <lv_obj_align>
 801d1dc:	e7b4      	b.n	801d148 <tabview_realign+0x2c>
    	lv_obj_set_hidden(ext->btns, false);
 801d1de:	4621      	mov	r1, r4
 801d1e0:	6828      	ldr	r0, [r5, #0]
 801d1e2:	f7ee fc6b 	bl	800babc <lv_obj_set_hidden>
    	lv_obj_set_hidden(ext->indic, false);
 801d1e6:	4621      	mov	r1, r4
 801d1e8:	6868      	ldr	r0, [r5, #4]
 801d1ea:	f7ee fc67 	bl	800babc <lv_obj_set_hidden>
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 801d1ee:	4638      	mov	r0, r7
 801d1f0:	f7ee fe92 	bl	800bf18 <lv_obj_get_ext_attr>
            style = lv_btnm_get_style(ext->btns, LV_BTNM_STYLE_BG);
 801d1f4:	4621      	mov	r1, r4
 801d1f6:	6800      	ldr	r0, [r0, #0]
 801d1f8:	f7f8 ffc2 	bl	8016180 <lv_btnm_get_style>
 801d1fc:	4606      	mov	r6, r0
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 801d1fe:	4638      	mov	r0, r7
 801d200:	f7ee fe8a 	bl	800bf18 <lv_obj_get_ext_attr>
            style = lv_btnm_get_style(ext->btns, LV_BTNM_STYLE_BTN_REL);
 801d204:	2101      	movs	r1, #1
 801d206:	6800      	ldr	r0, [r0, #0]
 801d208:	f7f8 ffba 	bl	8016180 <lv_btnm_get_style>
 801d20c:	4680      	mov	r8, r0
        lv_coord_t indic_width = (lv_obj_get_width(tabview) - style_btn_bg->body.padding.inner * (ext->tab_cnt - 1) -
 801d20e:	4638      	mov	r0, r7
 801d210:	f7ee fdf8 	bl	800be04 <lv_obj_get_width>
 801d214:	8aeb      	ldrh	r3, [r5, #22]
 801d216:	f9b6 1024 	ldrsh.w	r1, [r6, #36]	; 0x24
 801d21a:	f103 3eff 	add.w	lr, r3, #4294967295
                                  2 * style_btn_bg->body.padding.hor) / ext->tab_cnt;
 801d21e:	f9b6 2022 	ldrsh.w	r2, [r6, #34]	; 0x22
        lv_coord_t indic_width = (lv_obj_get_width(tabview) - style_btn_bg->body.padding.inner * (ext->tab_cnt - 1) -
 801d222:	fb0e 0111 	mls	r1, lr, r1, r0
        lv_obj_set_width(ext->indic, indic_width);
 801d226:	6868      	ldr	r0, [r5, #4]
        lv_coord_t indic_width = (lv_obj_get_width(tabview) - style_btn_bg->body.padding.inner * (ext->tab_cnt - 1) -
 801d228:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
                                  2 * style_btn_bg->body.padding.hor) / ext->tab_cnt;
 801d22c:	fb91 f1f3 	sdiv	r1, r1, r3
        lv_obj_set_width(ext->indic, indic_width);
 801d230:	b209      	sxth	r1, r1
 801d232:	f7ed fea7 	bl	800af84 <lv_obj_set_width>
 801d236:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
                                 2 * style_btn_rel->body.padding.ver +
 801d23a:	8c31      	ldrh	r1, [r6, #32]
 801d23c:	f8b8 3020 	ldrh.w	r3, [r8, #32]
        lv_obj_set_height(ext->btns, btns_height);
 801d240:	6828      	ldr	r0, [r5, #0]
                                 2 * style_btn_rel->body.padding.ver +
 801d242:	440b      	add	r3, r1
        lv_coord_t btns_height = lv_font_get_height(style_btn_rel->text.font) +
 801d244:	f892 1020 	ldrb.w	r1, [r2, #32]
                                 2 * style_btn_rel->body.padding.ver +
 801d248:	eb01 0143 	add.w	r1, r1, r3, lsl #1
        lv_obj_set_height(ext->btns, btns_height);
 801d24c:	b209      	sxth	r1, r1
 801d24e:	f7ed fdb1 	bl	800adb4 <lv_obj_set_height>
        lv_obj_set_height(ext->content, lv_obj_get_height(tabview) - lv_obj_get_height(ext->btns));
 801d252:	4638      	mov	r0, r7
 801d254:	f8d5 8008 	ldr.w	r8, [r5, #8]
 801d258:	f7ee fdda 	bl	800be10 <lv_obj_get_height>
 801d25c:	4606      	mov	r6, r0
 801d25e:	6828      	ldr	r0, [r5, #0]
 801d260:	f7ee fdd6 	bl	800be10 <lv_obj_get_height>
 801d264:	1a31      	subs	r1, r6, r0
 801d266:	4640      	mov	r0, r8
 801d268:	b209      	sxth	r1, r1
 801d26a:	f7ed fda3 	bl	800adb4 <lv_obj_set_height>
        switch(ext->btns_pos) {
 801d26e:	7eaa      	ldrb	r2, [r5, #26]
 801d270:	f3c2 1200 	ubfx	r2, r2, #4, #1
 801d274:	b16a      	cbz	r2, 801d292 <tabview_realign+0x176>
				lv_obj_align(ext->content, NULL, LV_ALIGN_IN_TOP_LEFT, 0, 0);
 801d276:	68a8      	ldr	r0, [r5, #8]
 801d278:	4623      	mov	r3, r4
 801d27a:	4621      	mov	r1, r4
 801d27c:	9400      	str	r4, [sp, #0]
 801d27e:	f7ed f991 	bl	800a5a4 <lv_obj_align>
				lv_obj_align(ext->btns, ext->content, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
 801d282:	68a9      	ldr	r1, [r5, #8]
 801d284:	6828      	ldr	r0, [r5, #0]
 801d286:	4623      	mov	r3, r4
 801d288:	9400      	str	r4, [sp, #0]
 801d28a:	220c      	movs	r2, #12
 801d28c:	f7ed f98a 	bl	800a5a4 <lv_obj_align>
				break;
 801d290:	e75a      	b.n	801d148 <tabview_realign+0x2c>
				lv_obj_align(ext->btns, NULL, LV_ALIGN_IN_TOP_LEFT, 0, 0);
 801d292:	6828      	ldr	r0, [r5, #0]
 801d294:	4623      	mov	r3, r4
 801d296:	4621      	mov	r1, r4
 801d298:	9400      	str	r4, [sp, #0]
 801d29a:	2201      	movs	r2, #1
 801d29c:	f7ed f982 	bl	800a5a4 <lv_obj_align>
				lv_obj_align(ext->content, ext->btns, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
 801d2a0:	6829      	ldr	r1, [r5, #0]
 801d2a2:	68a8      	ldr	r0, [r5, #8]
 801d2a4:	4623      	mov	r3, r4
 801d2a6:	9400      	str	r4, [sp, #0]
 801d2a8:	220c      	movs	r2, #12
 801d2aa:	f7ed f97b 	bl	800a5a4 <lv_obj_align>
				break;
 801d2ae:	e74b      	b.n	801d148 <tabview_realign+0x2c>
 801d2b0:	0801d045 	.word	0x0801d045

0801d2b4 <lv_tabview_signal>:
    res = ancestor_signal(tabview, sign, param);
 801d2b4:	4b50      	ldr	r3, [pc, #320]	; (801d3f8 <lv_tabview_signal+0x144>)
{
 801d2b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = ancestor_signal(tabview, sign, param);
 801d2ba:	689b      	ldr	r3, [r3, #8]
{
 801d2bc:	4607      	mov	r7, r0
 801d2be:	460c      	mov	r4, r1
 801d2c0:	4690      	mov	r8, r2
    res = ancestor_signal(tabview, sign, param);
 801d2c2:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 801d2c4:	2801      	cmp	r0, #1
    res = ancestor_signal(tabview, sign, param);
 801d2c6:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 801d2c8:	d002      	beq.n	801d2d0 <lv_tabview_signal+0x1c>
}
 801d2ca:	4628      	mov	r0, r5
 801d2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 801d2d0:	4638      	mov	r0, r7
 801d2d2:	f7ee fe21 	bl	800bf18 <lv_obj_get_ext_attr>
 801d2d6:	4606      	mov	r6, r0
    if(sign == LV_SIGNAL_CLEANUP) {
 801d2d8:	b9ac      	cbnz	r4, 801d306 <lv_tabview_signal+0x52>
        for(i = 0; ext->tab_name_ptr[i][0] != '\0'; i++) lv_mem_free(ext->tab_name_ptr[i]);
 801d2da:	68c3      	ldr	r3, [r0, #12]
 801d2dc:	6818      	ldr	r0, [r3, #0]
 801d2de:	7802      	ldrb	r2, [r0, #0]
 801d2e0:	b14a      	cbz	r2, 801d2f6 <lv_tabview_signal+0x42>
 801d2e2:	3401      	adds	r4, #1
 801d2e4:	f7f5 ffc2 	bl	801326c <lv_mem_free>
 801d2e8:	68f3      	ldr	r3, [r6, #12]
 801d2ea:	b2e4      	uxtb	r4, r4
 801d2ec:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801d2f0:	7802      	ldrb	r2, [r0, #0]
 801d2f2:	2a00      	cmp	r2, #0
 801d2f4:	d1f5      	bne.n	801d2e2 <lv_tabview_signal+0x2e>
        lv_mem_free(ext->tab_name_ptr);
 801d2f6:	4618      	mov	r0, r3
 801d2f8:	f7f5 ffb8 	bl	801326c <lv_mem_free>
        ext->tab_name_ptr = NULL;
 801d2fc:	2300      	movs	r3, #0
 801d2fe:	60f3      	str	r3, [r6, #12]
        ext->btns = NULL;     /*These objects were children so they are already invalid*/
 801d300:	6033      	str	r3, [r6, #0]
        ext->content = NULL;
 801d302:	60b3      	str	r3, [r6, #8]
 801d304:	e7e1      	b.n	801d2ca <lv_tabview_signal+0x16>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 801d306:	2c02      	cmp	r4, #2
 801d308:	d040      	beq.n	801d38c <lv_tabview_signal+0xd8>
    } else if(sign == LV_SIGNAL_FOCUS || sign == LV_SIGNAL_DEFOCUS || sign == LV_SIGNAL_CONTROLL) {
 801d30a:	f1a4 0310 	sub.w	r3, r4, #16
 801d30e:	2b02      	cmp	r3, #2
 801d310:	d924      	bls.n	801d35c <lv_tabview_signal+0xa8>
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 801d312:	2c14      	cmp	r4, #20
 801d314:	d05a      	beq.n	801d3cc <lv_tabview_signal+0x118>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801d316:	2c06      	cmp	r4, #6
 801d318:	d1d7      	bne.n	801d2ca <lv_tabview_signal+0x16>
            if(buf->type[i] == NULL) break;
 801d31a:	f8d8 3000 	ldr.w	r3, [r8]
 801d31e:	b1cb      	cbz	r3, 801d354 <lv_tabview_signal+0xa0>
 801d320:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d324:	2b00      	cmp	r3, #0
 801d326:	d065      	beq.n	801d3f4 <lv_tabview_signal+0x140>
 801d328:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d32c:	2b00      	cmp	r3, #0
 801d32e:	d05f      	beq.n	801d3f0 <lv_tabview_signal+0x13c>
 801d330:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d334:	2b00      	cmp	r3, #0
 801d336:	d059      	beq.n	801d3ec <lv_tabview_signal+0x138>
 801d338:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801d33c:	2b00      	cmp	r3, #0
 801d33e:	d053      	beq.n	801d3e8 <lv_tabview_signal+0x134>
 801d340:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801d344:	2b00      	cmp	r3, #0
 801d346:	d04d      	beq.n	801d3e4 <lv_tabview_signal+0x130>
 801d348:	f8d8 3018 	ldr.w	r3, [r8, #24]
 801d34c:	2b00      	cmp	r3, #0
 801d34e:	bf14      	ite	ne
 801d350:	2307      	movne	r3, #7
 801d352:	2306      	moveq	r3, #6
        buf->type[i] = "lv_tabview";
 801d354:	4a29      	ldr	r2, [pc, #164]	; (801d3fc <lv_tabview_signal+0x148>)
 801d356:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
 801d35a:	e7b6      	b.n	801d2ca <lv_tabview_signal+0x16>
        if(ext->btns) {
 801d35c:	6800      	ldr	r0, [r0, #0]
 801d35e:	b118      	cbz	r0, 801d368 <lv_tabview_signal+0xb4>
            ext->btns->signal_func(ext->btns, sign, param);
 801d360:	4642      	mov	r2, r8
 801d362:	6983      	ldr	r3, [r0, #24]
 801d364:	4621      	mov	r1, r4
 801d366:	4798      	blx	r3
        if(sign == LV_SIGNAL_FOCUS) {
 801d368:	2c10      	cmp	r4, #16
 801d36a:	d1ae      	bne.n	801d2ca <lv_tabview_signal+0x16>
            lv_hal_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801d36c:	f7eb ff0e 	bl	800918c <lv_indev_get_act>
 801d370:	f7eb ff12 	bl	8009198 <lv_indev_get_type>
            if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801d374:	2804      	cmp	r0, #4
 801d376:	d02c      	beq.n	801d3d2 <lv_tabview_signal+0x11e>
                lv_btnm_ext_t * btnm_ext = lv_obj_get_ext_attr(ext->btns);
 801d378:	6830      	ldr	r0, [r6, #0]
 801d37a:	f7ee fdcd 	bl	800bf18 <lv_obj_get_ext_attr>
                btnm_ext->btn_id_pr = 0;
 801d37e:	2200      	movs	r2, #0
                lv_btnm_ext_t * btnm_ext = lv_obj_get_ext_attr(ext->btns);
 801d380:	4603      	mov	r3, r0
                lv_obj_invalidate(ext->btns);
 801d382:	6830      	ldr	r0, [r6, #0]
                btnm_ext->btn_id_pr = 0;
 801d384:	845a      	strh	r2, [r3, #34]	; 0x22
                lv_obj_invalidate(ext->btns);
 801d386:	f7ec fcab 	bl	8009ce0 <lv_obj_invalidate>
 801d38a:	e79e      	b.n	801d2ca <lv_tabview_signal+0x16>
        if(ext->content != NULL &&
 801d38c:	6883      	ldr	r3, [r0, #8]
 801d38e:	2b00      	cmp	r3, #0
 801d390:	d09b      	beq.n	801d2ca <lv_tabview_signal+0x16>
                (lv_obj_get_width(tabview) != lv_area_get_width(param) ||
 801d392:	4638      	mov	r0, r7
 801d394:	f7ee fd36 	bl	800be04 <lv_obj_get_width>
    return area_p->x2 - area_p->x1 + 1;
 801d398:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 801d39c:	f8b8 2000 	ldrh.w	r2, [r8]
 801d3a0:	3301      	adds	r3, #1
 801d3a2:	1a9b      	subs	r3, r3, r2
        if(ext->content != NULL &&
 801d3a4:	b21b      	sxth	r3, r3
 801d3a6:	4298      	cmp	r0, r3
 801d3a8:	d003      	beq.n	801d3b2 <lv_tabview_signal+0xfe>
            tabview_realign(tabview);
 801d3aa:	4638      	mov	r0, r7
 801d3ac:	f7ff feb6 	bl	801d11c <tabview_realign>
 801d3b0:	e78b      	b.n	801d2ca <lv_tabview_signal+0x16>
                 lv_obj_get_height(tabview) != lv_area_get_height(param))) {
 801d3b2:	4638      	mov	r0, r7
 801d3b4:	f7ee fd2c 	bl	800be10 <lv_obj_get_height>
    return area_p->y2 - area_p->y1 + 1;
 801d3b8:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801d3bc:	f8b8 2002 	ldrh.w	r2, [r8, #2]
 801d3c0:	3301      	adds	r3, #1
 801d3c2:	1a9b      	subs	r3, r3, r2
                (lv_obj_get_width(tabview) != lv_area_get_width(param) ||
 801d3c4:	b21b      	sxth	r3, r3
 801d3c6:	4298      	cmp	r0, r3
 801d3c8:	d1ef      	bne.n	801d3aa <lv_tabview_signal+0xf6>
 801d3ca:	e77e      	b.n	801d2ca <lv_tabview_signal+0x16>
        *editable = true;
 801d3cc:	f888 5000 	strb.w	r5, [r8]
 801d3d0:	e77b      	b.n	801d2ca <lv_tabview_signal+0x16>
                lv_group_t * g = lv_obj_get_group(tabview);
 801d3d2:	4638      	mov	r0, r7
 801d3d4:	f7ee fda2 	bl	800bf1c <lv_obj_get_group>
                if(lv_group_get_editing(g)) {
 801d3d8:	f7eb f854 	bl	8008484 <lv_group_get_editing>
 801d3dc:	2800      	cmp	r0, #0
 801d3de:	f43f af74 	beq.w	801d2ca <lv_tabview_signal+0x16>
 801d3e2:	e7c9      	b.n	801d378 <lv_tabview_signal+0xc4>
            if(buf->type[i] == NULL) break;
 801d3e4:	2305      	movs	r3, #5
 801d3e6:	e7b5      	b.n	801d354 <lv_tabview_signal+0xa0>
 801d3e8:	2304      	movs	r3, #4
 801d3ea:	e7b3      	b.n	801d354 <lv_tabview_signal+0xa0>
 801d3ec:	2303      	movs	r3, #3
 801d3ee:	e7b1      	b.n	801d354 <lv_tabview_signal+0xa0>
 801d3f0:	2302      	movs	r3, #2
 801d3f2:	e7af      	b.n	801d354 <lv_tabview_signal+0xa0>
 801d3f4:	462b      	mov	r3, r5
 801d3f6:	e7ad      	b.n	801d354 <lv_tabview_signal+0xa0>
 801d3f8:	20016668 	.word	0x20016668
 801d3fc:	080c74d8 	.word	0x080c74d8

0801d400 <lv_tabview_add_tab>:
{
 801d400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d404:	4607      	mov	r7, r0
 801d406:	4688      	mov	r8, r1
    lv_tabview_ext_t  * ext = lv_obj_get_ext_attr(tabview);
 801d408:	f7ee fd86 	bl	800bf18 <lv_obj_get_ext_attr>
    lv_obj_t * h = lv_page_create(ext->content, NULL);
 801d40c:	2100      	movs	r1, #0
    lv_tabview_ext_t  * ext = lv_obj_get_ext_attr(tabview);
 801d40e:	4604      	mov	r4, r0
    lv_obj_t * h = lv_page_create(ext->content, NULL);
 801d410:	6880      	ldr	r0, [r0, #8]
 801d412:	f7fc ffc7 	bl	801a3a4 <lv_page_create>
 801d416:	4606      	mov	r6, r0
    lv_obj_set_size(h, lv_obj_get_width(tabview), lv_obj_get_height(ext->content));
 801d418:	4638      	mov	r0, r7
    if(page_signal == NULL) page_signal = lv_obj_get_signal_func(h);
 801d41a:	4d56      	ldr	r5, [pc, #344]	; (801d574 <lv_tabview_add_tab+0x174>)
    lv_obj_set_size(h, lv_obj_get_width(tabview), lv_obj_get_height(ext->content));
 801d41c:	f7ee fcf2 	bl	800be04 <lv_obj_get_width>
 801d420:	4681      	mov	r9, r0
 801d422:	68a0      	ldr	r0, [r4, #8]
 801d424:	f7ee fcf4 	bl	800be10 <lv_obj_get_height>
 801d428:	4649      	mov	r1, r9
 801d42a:	4602      	mov	r2, r0
 801d42c:	4630      	mov	r0, r6
 801d42e:	f7ed fbd5 	bl	800abdc <lv_obj_set_size>
    lv_page_set_sb_mode(h, LV_SB_MODE_AUTO);
 801d432:	4630      	mov	r0, r6
 801d434:	2103      	movs	r1, #3
 801d436:	f7fc ff3b 	bl	801a2b0 <lv_page_set_sb_mode>
    lv_page_set_style(h, LV_PAGE_STYLE_BG, &lv_style_transp);
 801d43a:	4630      	mov	r0, r6
 801d43c:	4a4e      	ldr	r2, [pc, #312]	; (801d578 <lv_tabview_add_tab+0x178>)
 801d43e:	2100      	movs	r1, #0
 801d440:	f7fc ff7c 	bl	801a33c <lv_page_set_style>
    lv_page_set_style(h, LV_PAGE_STYLE_SCRL, &lv_style_transp);
 801d444:	4630      	mov	r0, r6
 801d446:	4a4c      	ldr	r2, [pc, #304]	; (801d578 <lv_tabview_add_tab+0x178>)
 801d448:	2101      	movs	r1, #1
 801d44a:	f7fc ff77 	bl	801a33c <lv_page_set_style>
    if(page_signal == NULL) page_signal = lv_obj_get_signal_func(h);
 801d44e:	682b      	ldr	r3, [r5, #0]
 801d450:	2b00      	cmp	r3, #0
 801d452:	f000 808a 	beq.w	801d56a <lv_tabview_add_tab+0x16a>
    if(page_scrl_signal == NULL) page_scrl_signal = lv_obj_get_signal_func(lv_page_get_scrl(h));
 801d456:	686b      	ldr	r3, [r5, #4]
 801d458:	2b00      	cmp	r3, #0
 801d45a:	d073      	beq.n	801d544 <lv_tabview_add_tab+0x144>
    lv_obj_set_signal_func(h, tabpage_signal);
 801d45c:	4947      	ldr	r1, [pc, #284]	; (801d57c <lv_tabview_add_tab+0x17c>)
 801d45e:	4630      	mov	r0, r6
 801d460:	f7ee fbc4 	bl	800bbec <lv_obj_set_signal_func>
    lv_obj_set_signal_func(lv_page_get_scrl(h), tabpage_scrl_signal);
 801d464:	4630      	mov	r0, r6
 801d466:	f7fd f96d 	bl	801a744 <lv_page_get_scrl>
 801d46a:	4945      	ldr	r1, [pc, #276]	; (801d580 <lv_tabview_add_tab+0x180>)
 801d46c:	f7ee fbbe 	bl	800bbec <lv_obj_set_signal_func>
    if((name[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) { /*If control byte presented let is*/
 801d470:	f898 3000 	ldrb.w	r3, [r8]
        name_dm = lv_mem_alloc(strlen(name) + 1); /*+1 for the the closing '\0' */
 801d474:	4640      	mov	r0, r8
    if((name[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) { /*If control byte presented let is*/
 801d476:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801d47a:	2b80      	cmp	r3, #128	; 0x80
 801d47c:	d056      	beq.n	801d52c <lv_tabview_add_tab+0x12c>
        name_dm = lv_mem_alloc(strlen(name) + 2); /*+1 for the the closing '\0' and +1 for the control byte */
 801d47e:	f7e2 fecd 	bl	800021c <strlen>
 801d482:	3002      	adds	r0, #2
 801d484:	f7f5 feea 	bl	801325c <lv_mem_alloc>
        lv_mem_assert(name_dm);
 801d488:	4605      	mov	r5, r0
 801d48a:	2800      	cmp	r0, #0
 801d48c:	d04c      	beq.n	801d528 <lv_tabview_add_tab+0x128>
        name_dm[0] = '\221';
 801d48e:	2391      	movs	r3, #145	; 0x91
        strcpy(&name_dm[1], name);
 801d490:	4641      	mov	r1, r8
        name_dm[0] = '\221';
 801d492:	f800 3b01 	strb.w	r3, [r0], #1
        strcpy(&name_dm[1], name);
 801d496:	f000 fab4 	bl	801da02 <strcpy>
    ext->tab_cnt++;
 801d49a:	8ae3      	ldrh	r3, [r4, #22]
    ext->tab_name_ptr = lv_mem_realloc(ext->tab_name_ptr, sizeof(char *) * (ext->tab_cnt + 1));
 801d49c:	68e0      	ldr	r0, [r4, #12]
    ext->tab_cnt++;
 801d49e:	3301      	adds	r3, #1
 801d4a0:	b29b      	uxth	r3, r3
    ext->tab_name_ptr = lv_mem_realloc(ext->tab_name_ptr, sizeof(char *) * (ext->tab_cnt + 1));
 801d4a2:	1c59      	adds	r1, r3, #1
    ext->tab_cnt++;
 801d4a4:	82e3      	strh	r3, [r4, #22]
    ext->tab_name_ptr = lv_mem_realloc(ext->tab_name_ptr, sizeof(char *) * (ext->tab_cnt + 1));
 801d4a6:	0089      	lsls	r1, r1, #2
 801d4a8:	f7f5 ff3a 	bl	8013320 <lv_mem_realloc>
 801d4ac:	4603      	mov	r3, r0
 801d4ae:	60e0      	str	r0, [r4, #12]
    lv_mem_assert(ext->tab_name_ptr);
 801d4b0:	2800      	cmp	r0, #0
 801d4b2:	d03a      	beq.n	801d52a <lv_tabview_add_tab+0x12a>
    ext->tab_name_ptr[ext->tab_cnt - 1] = name_dm;
 801d4b4:	8ae0      	ldrh	r0, [r4, #22]
 801d4b6:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
    ext->tab_name_ptr[ext->tab_cnt] = "";
 801d4ba:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 801d584 <lv_tabview_add_tab+0x184>
    lv_btnm_set_map(ext->btns, ext->tab_name_ptr);
 801d4be:	4619      	mov	r1, r3
    ext->tab_name_ptr[ext->tab_cnt - 1] = name_dm;
 801d4c0:	4402      	add	r2, r0
    lv_btnm_set_map(ext->btns, ext->tab_name_ptr);
 801d4c2:	6820      	ldr	r0, [r4, #0]
    ext->tab_name_ptr[ext->tab_cnt - 1] = name_dm;
 801d4c4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    ext->tab_name_ptr[ext->tab_cnt] = "";
 801d4c8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801d4cc:	f8c3 e004 	str.w	lr, [r3, #4]
    lv_btnm_set_map(ext->btns, ext->tab_name_ptr);
 801d4d0:	f7f8 f854 	bl	801557c <lv_btnm_set_map>
    lv_style_t * style_tabs = lv_obj_get_style(ext->btns);
 801d4d4:	6820      	ldr	r0, [r4, #0]
 801d4d6:	f7ee fca1 	bl	800be1c <lv_obj_get_style>
 801d4da:	4680      	mov	r8, r0
    lv_coord_t indic_width = (lv_obj_get_width(tabview) - style_tabs->body.padding.inner * (ext->tab_cnt - 1) - 2 * style_tabs->body.padding.hor) / ext->tab_cnt;
 801d4dc:	4638      	mov	r0, r7
 801d4de:	f7ee fc91 	bl	800be04 <lv_obj_get_width>
 801d4e2:	8ae3      	ldrh	r3, [r4, #22]
 801d4e4:	f9b8 5024 	ldrsh.w	r5, [r8, #36]	; 0x24
 801d4e8:	1e59      	subs	r1, r3, #1
 801d4ea:	f9b8 2022 	ldrsh.w	r2, [r8, #34]	; 0x22
 801d4ee:	fb01 0515 	mls	r5, r1, r5, r0
    lv_obj_set_width(ext->indic, indic_width);
 801d4f2:	6860      	ldr	r0, [r4, #4]
    lv_coord_t indic_width = (lv_obj_get_width(tabview) - style_tabs->body.padding.inner * (ext->tab_cnt - 1) - 2 * style_tabs->body.padding.hor) / ext->tab_cnt;
 801d4f4:	eba5 0542 	sub.w	r5, r5, r2, lsl #1
 801d4f8:	fb95 f5f3 	sdiv	r5, r5, r3
 801d4fc:	b22d      	sxth	r5, r5
    lv_obj_set_width(ext->indic, indic_width);
 801d4fe:	4629      	mov	r1, r5
 801d500:	f7ed fd40 	bl	800af84 <lv_obj_set_width>
    lv_obj_set_x(ext->indic, indic_width * ext->tab_cur + style_tabs->body.padding.inner * ext->tab_cur + style_tabs->body.padding.hor);
 801d504:	f9b8 1024 	ldrsh.w	r1, [r8, #36]	; 0x24
 801d508:	f8b8 3022 	ldrh.w	r3, [r8, #34]	; 0x22
 801d50c:	440d      	add	r5, r1
 801d50e:	8aa1      	ldrh	r1, [r4, #20]
 801d510:	6860      	ldr	r0, [r4, #4]
 801d512:	fb11 3105 	smlabb	r1, r1, r5, r3
 801d516:	b209      	sxth	r1, r1
 801d518:	f7ec f9a6 	bl	8009868 <lv_obj_set_x>
    if(ext->tab_cnt == 1) {
 801d51c:	8ae3      	ldrh	r3, [r4, #22]
 801d51e:	2b01      	cmp	r3, #1
 801d520:	d017      	beq.n	801d552 <lv_tabview_add_tab+0x152>
}
 801d522:	4630      	mov	r0, r6
 801d524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d528:	e7fe      	b.n	801d528 <lv_tabview_add_tab+0x128>
 801d52a:	e7fe      	b.n	801d52a <lv_tabview_add_tab+0x12a>
        name_dm = lv_mem_alloc(strlen(name) + 1); /*+1 for the the closing '\0' */
 801d52c:	f7e2 fe76 	bl	800021c <strlen>
 801d530:	3001      	adds	r0, #1
 801d532:	f7f5 fe93 	bl	801325c <lv_mem_alloc>
        lv_mem_assert(name_dm);
 801d536:	4605      	mov	r5, r0
 801d538:	b118      	cbz	r0, 801d542 <lv_tabview_add_tab+0x142>
        strcpy(name_dm, name);
 801d53a:	4641      	mov	r1, r8
 801d53c:	f000 fa61 	bl	801da02 <strcpy>
 801d540:	e7ab      	b.n	801d49a <lv_tabview_add_tab+0x9a>
 801d542:	e7fe      	b.n	801d542 <lv_tabview_add_tab+0x142>
    if(page_scrl_signal == NULL) page_scrl_signal = lv_obj_get_signal_func(lv_page_get_scrl(h));
 801d544:	4630      	mov	r0, r6
 801d546:	f7fd f8fd 	bl	801a744 <lv_page_get_scrl>
 801d54a:	f7ee fce1 	bl	800bf10 <lv_obj_get_signal_func>
 801d54e:	6068      	str	r0, [r5, #4]
 801d550:	e784      	b.n	801d45c <lv_tabview_add_tab+0x5c>
        ext->tab_cur = 0;
 801d552:	2200      	movs	r2, #0
        lv_tabview_set_tab_act(tabview, 0, false);
 801d554:	4638      	mov	r0, r7
        ext->tab_cur = 0;
 801d556:	82a2      	strh	r2, [r4, #20]
        lv_tabview_set_tab_act(tabview, 0, false);
 801d558:	4611      	mov	r1, r2
 801d55a:	f7ff fc57 	bl	801ce0c <lv_tabview_set_tab_act>
        tabview_realign(tabview);       /*To set the proper btns height*/
 801d55e:	4638      	mov	r0, r7
 801d560:	f7ff fddc 	bl	801d11c <tabview_realign>
}
 801d564:	4630      	mov	r0, r6
 801d566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(page_signal == NULL) page_signal = lv_obj_get_signal_func(h);
 801d56a:	4630      	mov	r0, r6
 801d56c:	f7ee fcd0 	bl	800bf10 <lv_obj_get_signal_func>
 801d570:	6028      	str	r0, [r5, #0]
 801d572:	e770      	b.n	801d456 <lv_tabview_add_tab+0x56>
 801d574:	20016668 	.word	0x20016668
 801d578:	20019144 	.word	0x20019144
 801d57c:	0801d045 	.word	0x0801d045
 801d580:	0801d0ad 	.word	0x0801d0ad
 801d584:	080c7258 	.word	0x080c7258

0801d588 <lv_tabview_set_style>:
{
 801d588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d58a:	460c      	mov	r4, r1
 801d58c:	4615      	mov	r5, r2
 801d58e:	4607      	mov	r7, r0
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 801d590:	f7ee fcc2 	bl	800bf18 <lv_obj_get_ext_attr>
 801d594:	4606      	mov	r6, r0
    switch(type) {
 801d596:	2c06      	cmp	r4, #6
 801d598:	d842      	bhi.n	801d620 <lv_tabview_set_style+0x98>
 801d59a:	e8df f004 	tbb	[pc, r4]
 801d59e:	110b      	.short	0x110b
 801d5a0:	3a33291f 	.word	0x3a33291f
 801d5a4:	04          	.byte	0x04
 801d5a5:	00          	.byte	0x00
            lv_btnm_set_style(ext->btns, LV_BTNM_STYLE_BTN_TGL_PR, style);
 801d5a6:	462a      	mov	r2, r5
 801d5a8:	6800      	ldr	r0, [r0, #0]
 801d5aa:	2104      	movs	r1, #4
}
 801d5ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_btnm_set_style(ext->btns, LV_BTNM_STYLE_BTN_TGL_PR, style);
 801d5b0:	f7f8 bdae 	b.w	8016110 <lv_btnm_set_style>
            lv_obj_set_style(tabview, style);
 801d5b4:	4629      	mov	r1, r5
 801d5b6:	4638      	mov	r0, r7
}
 801d5b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_obj_set_style(tabview, style);
 801d5bc:	f7ed bdca 	b.w	800b154 <lv_obj_set_style>
            lv_obj_set_style(ext->indic, style);
 801d5c0:	4629      	mov	r1, r5
 801d5c2:	6840      	ldr	r0, [r0, #4]
 801d5c4:	f7ed fdc6 	bl	800b154 <lv_obj_set_style>
            lv_obj_set_height(ext->indic, style->body.padding.inner);
 801d5c8:	6870      	ldr	r0, [r6, #4]
 801d5ca:	f9b5 1024 	ldrsh.w	r1, [r5, #36]	; 0x24
 801d5ce:	f7ed fbf1 	bl	800adb4 <lv_obj_set_height>
            tabview_realign(tabview);
 801d5d2:	4638      	mov	r0, r7
}
 801d5d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            tabview_realign(tabview);
 801d5d8:	f7ff bda0 	b.w	801d11c <tabview_realign>
            lv_btnm_set_style(ext->btns, LV_BTNM_STYLE_BG, style);
 801d5dc:	462a      	mov	r2, r5
 801d5de:	6800      	ldr	r0, [r0, #0]
 801d5e0:	2100      	movs	r1, #0
 801d5e2:	f7f8 fd95 	bl	8016110 <lv_btnm_set_style>
            tabview_realign(tabview);
 801d5e6:	4638      	mov	r0, r7
}
 801d5e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            tabview_realign(tabview);
 801d5ec:	f7ff bd96 	b.w	801d11c <tabview_realign>
            lv_btnm_set_style(ext->btns, LV_BTNM_STYLE_BTN_REL, style);
 801d5f0:	462a      	mov	r2, r5
 801d5f2:	6800      	ldr	r0, [r0, #0]
 801d5f4:	2101      	movs	r1, #1
 801d5f6:	f7f8 fd8b 	bl	8016110 <lv_btnm_set_style>
            tabview_realign(tabview);
 801d5fa:	4638      	mov	r0, r7
}
 801d5fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            tabview_realign(tabview);
 801d600:	f7ff bd8c 	b.w	801d11c <tabview_realign>
            lv_btnm_set_style(ext->btns, LV_BTNM_STYLE_BTN_PR, style);
 801d604:	462a      	mov	r2, r5
 801d606:	6800      	ldr	r0, [r0, #0]
 801d608:	2102      	movs	r1, #2
}
 801d60a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_btnm_set_style(ext->btns, LV_BTNM_STYLE_BTN_PR, style);
 801d60e:	f7f8 bd7f 	b.w	8016110 <lv_btnm_set_style>
            lv_btnm_set_style(ext->btns, LV_BTNM_STYLE_BTN_TGL_REL, style);
 801d612:	462a      	mov	r2, r5
 801d614:	6800      	ldr	r0, [r0, #0]
 801d616:	2103      	movs	r1, #3
}
 801d618:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_btnm_set_style(ext->btns, LV_BTNM_STYLE_BTN_TGL_REL, style);
 801d61c:	f7f8 bd78 	b.w	8016110 <lv_btnm_set_style>
 801d620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d622:	bf00      	nop

0801d624 <lv_tabview_create>:
{
 801d624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d628:	b083      	sub	sp, #12
 801d62a:	460f      	mov	r7, r1
    lv_obj_t * new_tabview = lv_obj_create(par, copy);
 801d62c:	f7ec fde4 	bl	800a1f8 <lv_obj_create>
    lv_mem_assert(new_tabview);
 801d630:	2800      	cmp	r0, #0
 801d632:	f000 80b9 	beq.w	801d7a8 <lv_tabview_create+0x184>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_tabview);
 801d636:	4cb3      	ldr	r4, [pc, #716]	; (801d904 <lv_tabview_create+0x2e0>)
 801d638:	4605      	mov	r5, r0
 801d63a:	68a3      	ldr	r3, [r4, #8]
 801d63c:	2b00      	cmp	r3, #0
 801d63e:	f000 814a 	beq.w	801d8d6 <lv_tabview_create+0x2b2>
    lv_tabview_ext_t * ext = lv_obj_allocate_ext_attr(new_tabview, sizeof(lv_tabview_ext_t));
 801d642:	2120      	movs	r1, #32
 801d644:	4628      	mov	r0, r5
 801d646:	f7ee fad5 	bl	800bbf4 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 801d64a:	4604      	mov	r4, r0
 801d64c:	2800      	cmp	r0, #0
 801d64e:	f000 80a9 	beq.w	801d7a4 <lv_tabview_create+0x180>
    ext->drag_hor = 0;
 801d652:	7e83      	ldrb	r3, [r0, #26]
    ext->tab_cur = 0;
 801d654:	f04f 0800 	mov.w	r8, #0
    ext->anim_time = LV_TABVIEW_ANIM_TIME;
 801d658:	f44f 7296 	mov.w	r2, #300	; 0x12c
    lv_obj_set_signal_func(new_tabview, lv_tabview_signal);
 801d65c:	49aa      	ldr	r1, [pc, #680]	; (801d908 <lv_tabview_create+0x2e4>)
    ext->slide_enable = 1;
 801d65e:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
    ext->tab_cur = 0;
 801d662:	f8a0 8014 	strh.w	r8, [r0, #20]
    ext->point_last.x = 0;
 801d666:	f8a0 8010 	strh.w	r8, [r0, #16]
    lv_obj_set_signal_func(new_tabview, lv_tabview_signal);
 801d66a:	4628      	mov	r0, r5
    ext->btns_pos = LV_TABVIEW_BTNS_POS_TOP;
 801d66c:	f043 0301 	orr.w	r3, r3, #1
    ext->point_last.y = 0;
 801d670:	f8a4 8012 	strh.w	r8, [r4, #18]
    ext->content = NULL;
 801d674:	f8c4 8008 	str.w	r8, [r4, #8]
    ext->btns_hide = 0;
 801d678:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    ext->indic = NULL;
 801d67c:	f8c4 8004 	str.w	r8, [r4, #4]
    ext->btns = NULL;
 801d680:	f8c4 8000 	str.w	r8, [r4]
    ext->btns_hide = 0;
 801d684:	f368 03c3 	bfi	r3, r8, #3, #1
    ext->tab_load_action = NULL;
 801d688:	f8c4 801c 	str.w	r8, [r4, #28]
    ext->anim_time = LV_TABVIEW_ANIM_TIME;
 801d68c:	8322      	strh	r2, [r4, #24]
    ext->btns_hide = 0;
 801d68e:	76a3      	strb	r3, [r4, #26]
    lv_obj_set_signal_func(new_tabview, lv_tabview_signal);
 801d690:	f7ee faac 	bl	800bbec <lv_obj_set_signal_func>
    if(copy == NULL) {
 801d694:	2f00      	cmp	r7, #0
 801d696:	f000 808f 	beq.w	801d7b8 <lv_tabview_create+0x194>
        lv_tabview_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801d69a:	4638      	mov	r0, r7
 801d69c:	f7ee fc3c 	bl	800bf18 <lv_obj_get_ext_attr>
 801d6a0:	4681      	mov	r9, r0
        ext->point_last.x = 0;
 801d6a2:	f8c4 8010 	str.w	r8, [r4, #16]
        ext->btns = lv_btnm_create(new_tabview, copy_ext->btns);
 801d6a6:	4628      	mov	r0, r5
 801d6a8:	f8d9 1000 	ldr.w	r1, [r9]
 801d6ac:	f7f8 f8bc 	bl	8015828 <lv_btnm_create>
        ext->indic = lv_obj_create(ext->btns, copy_ext->indic);
 801d6b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
        ext->btns = lv_btnm_create(new_tabview, copy_ext->btns);
 801d6b4:	6020      	str	r0, [r4, #0]
        ext->indic = lv_obj_create(ext->btns, copy_ext->indic);
 801d6b6:	f7ec fd9f 	bl	800a1f8 <lv_obj_create>
        ext->content = lv_cont_create(new_tabview, copy_ext->content);
 801d6ba:	f8d9 1008 	ldr.w	r1, [r9, #8]
        ext->indic = lv_obj_create(ext->btns, copy_ext->indic);
 801d6be:	6060      	str	r0, [r4, #4]
        ext->content = lv_cont_create(new_tabview, copy_ext->content);
 801d6c0:	4628      	mov	r0, r5
 801d6c2:	f7f9 fecd 	bl	8017460 <lv_cont_create>
        ext->tab_load_action = copy_ext->tab_load_action;
 801d6c6:	f8d9 301c 	ldr.w	r3, [r9, #28]
        ext->anim_time = copy_ext->anim_time;
 801d6ca:	f8b9 2018 	ldrh.w	r2, [r9, #24]
        ext->content = lv_cont_create(new_tabview, copy_ext->content);
 801d6ce:	60a0      	str	r0, [r4, #8]
        ext->tab_name_ptr = lv_mem_alloc(sizeof(char *));
 801d6d0:	2004      	movs	r0, #4
        ext->tab_load_action = copy_ext->tab_load_action;
 801d6d2:	61e3      	str	r3, [r4, #28]
        ext->anim_time = copy_ext->anim_time;
 801d6d4:	8322      	strh	r2, [r4, #24]
        ext->tab_name_ptr = lv_mem_alloc(sizeof(char *));
 801d6d6:	f7f5 fdc1 	bl	801325c <lv_mem_alloc>
 801d6da:	4603      	mov	r3, r0
 801d6dc:	60e0      	str	r0, [r4, #12]
        lv_mem_assert(ext->tab_name_ptr);
 801d6de:	2800      	cmp	r0, #0
 801d6e0:	d061      	beq.n	801d7a6 <lv_tabview_create+0x182>
        ext->tab_name_ptr[0] = "";
 801d6e2:	4a8a      	ldr	r2, [pc, #552]	; (801d90c <lv_tabview_create+0x2e8>)
        lv_btnm_set_map(ext->btns, ext->tab_name_ptr);
 801d6e4:	4601      	mov	r1, r0
 801d6e6:	6820      	ldr	r0, [r4, #0]
        ext->tab_name_ptr[0] = "";
 801d6e8:	601a      	str	r2, [r3, #0]
        lv_btnm_set_map(ext->btns, ext->tab_name_ptr);
 801d6ea:	f7f7 ff47 	bl	801557c <lv_btnm_set_map>
        for(i = 0; i < copy_ext->tab_cnt; i++) {
 801d6ee:	f8b9 3016 	ldrh.w	r3, [r9, #22]
 801d6f2:	2b00      	cmp	r3, #0
 801d6f4:	d059      	beq.n	801d7aa <lv_tabview_create+0x186>
            new_tab = lv_tabview_add_tab(new_tabview, copy_ext->tab_name_ptr[i]);
 801d6f6:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801d6fa:	4628      	mov	r0, r5
    lv_obj_t * page = lv_obj_get_child_back(ext->content, NULL);
 801d6fc:	4646      	mov	r6, r8
            new_tab = lv_tabview_add_tab(new_tabview, copy_ext->tab_name_ptr[i]);
 801d6fe:	6819      	ldr	r1, [r3, #0]
 801d700:	f7ff fe7e 	bl	801d400 <lv_tabview_add_tab>
 801d704:	4682      	mov	sl, r0
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 801d706:	4638      	mov	r0, r7
 801d708:	f7ee fc06 	bl	800bf18 <lv_obj_get_ext_attr>
    lv_obj_t * page = lv_obj_get_child_back(ext->content, NULL);
 801d70c:	4641      	mov	r1, r8
 801d70e:	6880      	ldr	r0, [r0, #8]
 801d710:	f7ee fb60 	bl	800bdd4 <lv_obj_get_child_back>
 801d714:	4683      	mov	fp, r0
            lv_page_set_style(new_tab, LV_PAGE_STYLE_BG, lv_page_get_style(copy_tab, LV_PAGE_STYLE_BG));
 801d716:	2100      	movs	r1, #0
 801d718:	4658      	mov	r0, fp
 801d71a:	f7fd f821 	bl	801a760 <lv_page_get_style>
 801d71e:	2100      	movs	r1, #0
 801d720:	4602      	mov	r2, r0
 801d722:	4650      	mov	r0, sl
 801d724:	f7fc fe0a 	bl	801a33c <lv_page_set_style>
            lv_page_set_style(new_tab, LV_PAGE_STYLE_SCRL, lv_page_get_style(copy_tab, LV_PAGE_STYLE_SCRL));
 801d728:	2101      	movs	r1, #1
 801d72a:	4658      	mov	r0, fp
        for(i = 0; i < copy_ext->tab_cnt; i++) {
 801d72c:	3601      	adds	r6, #1
            lv_page_set_style(new_tab, LV_PAGE_STYLE_SCRL, lv_page_get_style(copy_tab, LV_PAGE_STYLE_SCRL));
 801d72e:	f7fd f817 	bl	801a760 <lv_page_get_style>
 801d732:	2101      	movs	r1, #1
 801d734:	4602      	mov	r2, r0
 801d736:	4650      	mov	r0, sl
 801d738:	f7fc fe00 	bl	801a33c <lv_page_set_style>
            lv_page_set_style(new_tab, LV_PAGE_STYLE_SB, lv_page_get_style(copy_tab, LV_PAGE_STYLE_SB));
 801d73c:	2102      	movs	r1, #2
 801d73e:	4658      	mov	r0, fp
        for(i = 0; i < copy_ext->tab_cnt; i++) {
 801d740:	b2b6      	uxth	r6, r6
            lv_page_set_style(new_tab, LV_PAGE_STYLE_SB, lv_page_get_style(copy_tab, LV_PAGE_STYLE_SB));
 801d742:	f7fd f80d 	bl	801a760 <lv_page_get_style>
 801d746:	2102      	movs	r1, #2
 801d748:	4602      	mov	r2, r0
 801d74a:	4650      	mov	r0, sl
 801d74c:	f7fc fdf6 	bl	801a33c <lv_page_set_style>
        for(i = 0; i < copy_ext->tab_cnt; i++) {
 801d750:	f8b9 3016 	ldrh.w	r3, [r9, #22]
 801d754:	42b3      	cmp	r3, r6
 801d756:	d928      	bls.n	801d7aa <lv_tabview_create+0x186>
            new_tab = lv_tabview_add_tab(new_tabview, copy_ext->tab_name_ptr[i]);
 801d758:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801d75c:	4628      	mov	r0, r5
    while(page != NULL && i != id) {
 801d75e:	2400      	movs	r4, #0
            new_tab = lv_tabview_add_tab(new_tabview, copy_ext->tab_name_ptr[i]);
 801d760:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 801d764:	f7ff fe4c 	bl	801d400 <lv_tabview_add_tab>
 801d768:	4682      	mov	sl, r0
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 801d76a:	4638      	mov	r0, r7
 801d76c:	f7ee fbd4 	bl	800bf18 <lv_obj_get_ext_attr>
    lv_obj_t * page = lv_obj_get_child_back(ext->content, NULL);
 801d770:	2100      	movs	r1, #0
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 801d772:	4680      	mov	r8, r0
    lv_obj_t * page = lv_obj_get_child_back(ext->content, NULL);
 801d774:	6880      	ldr	r0, [r0, #8]
 801d776:	f7ee fb2d 	bl	800bdd4 <lv_obj_get_child_back>
 801d77a:	4683      	mov	fp, r0
    while(page != NULL && i != id) {
 801d77c:	b16e      	cbz	r6, 801d79a <lv_tabview_create+0x176>
 801d77e:	b910      	cbnz	r0, 801d786 <lv_tabview_create+0x162>
 801d780:	e00b      	b.n	801d79a <lv_tabview_create+0x176>
 801d782:	42a6      	cmp	r6, r4
 801d784:	d009      	beq.n	801d79a <lv_tabview_create+0x176>
        i++;
 801d786:	3401      	adds	r4, #1
        page = lv_obj_get_child_back(ext->content, page);
 801d788:	4659      	mov	r1, fp
 801d78a:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801d78e:	f7ee fb21 	bl	800bdd4 <lv_obj_get_child_back>
    while(page != NULL && i != id) {
 801d792:	4683      	mov	fp, r0
        i++;
 801d794:	b2a4      	uxth	r4, r4
    while(page != NULL && i != id) {
 801d796:	2800      	cmp	r0, #0
 801d798:	d1f3      	bne.n	801d782 <lv_tabview_create+0x15e>
    return NULL;
 801d79a:	42a6      	cmp	r6, r4
 801d79c:	bf18      	it	ne
 801d79e:	f04f 0b00 	movne.w	fp, #0
 801d7a2:	e7b8      	b.n	801d716 <lv_tabview_create+0xf2>
 801d7a4:	e7fe      	b.n	801d7a4 <lv_tabview_create+0x180>
 801d7a6:	e7fe      	b.n	801d7a6 <lv_tabview_create+0x182>
 801d7a8:	e7fe      	b.n	801d7a8 <lv_tabview_create+0x184>
        lv_obj_refresh_style(new_tabview);
 801d7aa:	4628      	mov	r0, r5
 801d7ac:	f7ee f8e0 	bl	800b970 <lv_obj_refresh_style>
}
 801d7b0:	4628      	mov	r0, r5
 801d7b2:	b003      	add	sp, #12
 801d7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ext->tab_name_ptr = lv_mem_alloc(sizeof(char *));
 801d7b8:	2004      	movs	r0, #4
 801d7ba:	f7f5 fd4f 	bl	801325c <lv_mem_alloc>
 801d7be:	4603      	mov	r3, r0
 801d7c0:	60e0      	str	r0, [r4, #12]
        lv_mem_assert(ext->tab_name_ptr);
 801d7c2:	2800      	cmp	r0, #0
 801d7c4:	f000 8086 	beq.w	801d8d4 <lv_tabview_create+0x2b0>
        ext->tab_name_ptr[0] = "";
 801d7c8:	4e50      	ldr	r6, [pc, #320]	; (801d90c <lv_tabview_create+0x2e8>)
        lv_obj_set_size(new_tabview, LV_HOR_RES, LV_VER_RES);
 801d7ca:	f44f 7288 	mov.w	r2, #272	; 0x110
 801d7ce:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 801d7d2:	4628      	mov	r0, r5
        ext->tab_name_ptr[0] = "";
 801d7d4:	601e      	str	r6, [r3, #0]
        ext->tab_cnt = 0;
 801d7d6:	82e7      	strh	r7, [r4, #22]
        lv_obj_set_size(new_tabview, LV_HOR_RES, LV_VER_RES);
 801d7d8:	f7ed fa00 	bl	800abdc <lv_obj_set_size>
        ext->btns = lv_btnm_create(new_tabview, NULL);
 801d7dc:	4639      	mov	r1, r7
 801d7de:	4628      	mov	r0, r5
 801d7e0:	f7f8 f822 	bl	8015828 <lv_btnm_create>
        lv_obj_set_height(ext->btns, 3 * LV_DPI / 4);
 801d7e4:	214b      	movs	r1, #75	; 0x4b
        ext->btns = lv_btnm_create(new_tabview, NULL);
 801d7e6:	6020      	str	r0, [r4, #0]
        lv_obj_set_height(ext->btns, 3 * LV_DPI / 4);
 801d7e8:	f7ed fae4 	bl	800adb4 <lv_obj_set_height>
        lv_btnm_set_map(ext->btns, tab_def);
 801d7ec:	6820      	ldr	r0, [r4, #0]
 801d7ee:	4948      	ldr	r1, [pc, #288]	; (801d910 <lv_tabview_create+0x2ec>)
 801d7f0:	f7f7 fec4 	bl	801557c <lv_btnm_set_map>
        lv_btnm_set_action(ext->btns, tab_btnm_action);
 801d7f4:	6820      	ldr	r0, [r4, #0]
 801d7f6:	4947      	ldr	r1, [pc, #284]	; (801d914 <lv_tabview_create+0x2f0>)
 801d7f8:	f7f8 fc62 	bl	80160c0 <lv_btnm_set_action>
        lv_btnm_set_toggle(ext->btns, true, 0);
 801d7fc:	463a      	mov	r2, r7
 801d7fe:	6820      	ldr	r0, [r4, #0]
 801d800:	2101      	movs	r1, #1
 801d802:	f7f8 fc63 	bl	80160cc <lv_btnm_set_toggle>
        ext->indic = lv_obj_create(ext->btns, NULL);
 801d806:	4639      	mov	r1, r7
 801d808:	6820      	ldr	r0, [r4, #0]
 801d80a:	f7ec fcf5 	bl	800a1f8 <lv_obj_create>
        lv_obj_set_width(ext->indic, LV_DPI);
 801d80e:	2164      	movs	r1, #100	; 0x64
        ext->indic = lv_obj_create(ext->btns, NULL);
 801d810:	6060      	str	r0, [r4, #4]
        lv_obj_set_width(ext->indic, LV_DPI);
 801d812:	f7ed fbb7 	bl	800af84 <lv_obj_set_width>
        lv_obj_align(ext->indic, ext->btns, LV_ALIGN_IN_BOTTOM_LEFT, 0, 0);
 801d816:	463b      	mov	r3, r7
 801d818:	6821      	ldr	r1, [r4, #0]
 801d81a:	2204      	movs	r2, #4
 801d81c:	6860      	ldr	r0, [r4, #4]
 801d81e:	9700      	str	r7, [sp, #0]
 801d820:	f7ec fec0 	bl	800a5a4 <lv_obj_align>
        lv_obj_set_click(ext->indic, false);
 801d824:	6860      	ldr	r0, [r4, #4]
 801d826:	4639      	mov	r1, r7
 801d828:	f7ee f9ac 	bl	800bb84 <lv_obj_set_click>
        ext->content = lv_cont_create(new_tabview, NULL);
 801d82c:	4639      	mov	r1, r7
 801d82e:	4628      	mov	r0, r5
 801d830:	f7f9 fe16 	bl	8017460 <lv_cont_create>
        lv_cont_set_fit(ext->content, true, false);
 801d834:	463a      	mov	r2, r7
        ext->content = lv_cont_create(new_tabview, NULL);
 801d836:	60a0      	str	r0, [r4, #8]
        lv_cont_set_fit(ext->content, true, false);
 801d838:	2101      	movs	r1, #1
 801d83a:	f7f9 fe85 	bl	8017548 <lv_cont_set_fit>
        lv_cont_set_layout(ext->content, LV_LAYOUT_ROW_T);
 801d83e:	68a0      	ldr	r0, [r4, #8]
 801d840:	2105      	movs	r1, #5
 801d842:	f7f9 fe67 	bl	8017514 <lv_cont_set_layout>
 * @param cont pointer to a container object
 * @param style pointer to the new style
 */
static inline void lv_cont_set_style(lv_obj_t *cont, lv_style_t * style)
{
    lv_obj_set_style(cont, style);
 801d846:	4934      	ldr	r1, [pc, #208]	; (801d918 <lv_tabview_create+0x2f4>)
 801d848:	68a0      	ldr	r0, [r4, #8]
 801d84a:	f7ed fc83 	bl	800b154 <lv_obj_set_style>
        lv_obj_set_height(ext->content, LV_VER_RES - lv_obj_get_height(ext->btns));
 801d84e:	6820      	ldr	r0, [r4, #0]
 801d850:	68a6      	ldr	r6, [r4, #8]
 801d852:	f7ee fadd 	bl	800be10 <lv_obj_get_height>
 801d856:	f5c0 7188 	rsb	r1, r0, #272	; 0x110
 801d85a:	4630      	mov	r0, r6
 801d85c:	b209      	sxth	r1, r1
 801d85e:	f7ed faa9 	bl	800adb4 <lv_obj_set_height>
        lv_obj_align(ext->content, ext->btns, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
 801d862:	6821      	ldr	r1, [r4, #0]
 801d864:	68a0      	ldr	r0, [r4, #8]
 801d866:	463b      	mov	r3, r7
 801d868:	220c      	movs	r2, #12
 801d86a:	9700      	str	r7, [sp, #0]
 801d86c:	f7ec fe9a 	bl	800a5a4 <lv_obj_align>
        lv_theme_t * th = lv_theme_get_current();
 801d870:	f000 f85a 	bl	801d928 <lv_theme_get_current>
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_BG, th->tabview.bg);
 801d874:	4639      	mov	r1, r7
        if(th) {
 801d876:	4604      	mov	r4, r0
 801d878:	b388      	cbz	r0, 801d8de <lv_tabview_create+0x2ba>
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_BG, th->tabview.bg);
 801d87a:	f8d0 215c 	ldr.w	r2, [r0, #348]	; 0x15c
 801d87e:	4628      	mov	r0, r5
 801d880:	f7ff fe82 	bl	801d588 <lv_tabview_set_style>
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_INDIC, th->tabview.indic);
 801d884:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
 801d888:	4628      	mov	r0, r5
 801d88a:	2101      	movs	r1, #1
 801d88c:	f7ff fe7c 	bl	801d588 <lv_tabview_set_style>
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_BTN_BG, th->tabview.btn.bg);
 801d890:	f8d4 2164 	ldr.w	r2, [r4, #356]	; 0x164
 801d894:	4628      	mov	r0, r5
 801d896:	2102      	movs	r1, #2
 801d898:	f7ff fe76 	bl	801d588 <lv_tabview_set_style>
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_BTN_REL, th->tabview.btn.rel);
 801d89c:	f8d4 2168 	ldr.w	r2, [r4, #360]	; 0x168
 801d8a0:	4628      	mov	r0, r5
 801d8a2:	2103      	movs	r1, #3
 801d8a4:	f7ff fe70 	bl	801d588 <lv_tabview_set_style>
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_BTN_PR, th->tabview.btn.pr);
 801d8a8:	f8d4 216c 	ldr.w	r2, [r4, #364]	; 0x16c
 801d8ac:	4628      	mov	r0, r5
 801d8ae:	2104      	movs	r1, #4
 801d8b0:	f7ff fe6a 	bl	801d588 <lv_tabview_set_style>
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_BTN_TGL_REL, th->tabview.btn.tgl_rel);
 801d8b4:	f8d4 2170 	ldr.w	r2, [r4, #368]	; 0x170
 801d8b8:	4628      	mov	r0, r5
 801d8ba:	2105      	movs	r1, #5
 801d8bc:	f7ff fe64 	bl	801d588 <lv_tabview_set_style>
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_BTN_TGL_PR, th->tabview.btn.tgl_pr);
 801d8c0:	4628      	mov	r0, r5
 801d8c2:	f8d4 2174 	ldr.w	r2, [r4, #372]	; 0x174
 801d8c6:	2106      	movs	r1, #6
 801d8c8:	f7ff fe5e 	bl	801d588 <lv_tabview_set_style>
}
 801d8cc:	4628      	mov	r0, r5
 801d8ce:	b003      	add	sp, #12
 801d8d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d8d4:	e7fe      	b.n	801d8d4 <lv_tabview_create+0x2b0>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_tabview);
 801d8d6:	f7ee fb1b 	bl	800bf10 <lv_obj_get_signal_func>
 801d8da:	60a0      	str	r0, [r4, #8]
 801d8dc:	e6b1      	b.n	801d642 <lv_tabview_create+0x1e>
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_BG, &lv_style_plain);
 801d8de:	4628      	mov	r0, r5
 801d8e0:	4a0e      	ldr	r2, [pc, #56]	; (801d91c <lv_tabview_create+0x2f8>)
 801d8e2:	f7ff fe51 	bl	801d588 <lv_tabview_set_style>
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_BTN_BG, &lv_style_transp);
 801d8e6:	4628      	mov	r0, r5
 801d8e8:	4a0d      	ldr	r2, [pc, #52]	; (801d920 <lv_tabview_create+0x2fc>)
 801d8ea:	2102      	movs	r1, #2
 801d8ec:	f7ff fe4c 	bl	801d588 <lv_tabview_set_style>
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_INDIC, &lv_style_plain_color);
 801d8f0:	4628      	mov	r0, r5
 801d8f2:	4a0c      	ldr	r2, [pc, #48]	; (801d924 <lv_tabview_create+0x300>)
 801d8f4:	2101      	movs	r1, #1
 801d8f6:	f7ff fe47 	bl	801d588 <lv_tabview_set_style>
}
 801d8fa:	4628      	mov	r0, r5
 801d8fc:	b003      	add	sp, #12
 801d8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d902:	bf00      	nop
 801d904:	20016668 	.word	0x20016668
 801d908:	0801d2b5 	.word	0x0801d2b5
 801d90c:	080c7258 	.word	0x080c7258
 801d910:	2000057c 	.word	0x2000057c
 801d914:	0801cf41 	.word	0x0801cf41
 801d918:	20019264 	.word	0x20019264
 801d91c:	2001933c 	.word	0x2001933c
 801d920:	20019144 	.word	0x20019144
 801d924:	2001945c 	.word	0x2001945c

0801d928 <lv_theme_get_current>:
lv_theme_t * lv_theme_get_current(void)
{
#if LV_THEME_LIVE_UPDATE == 0
    return current_theme;
#else
    if(!inited) return NULL;
 801d928:	4b03      	ldr	r3, [pc, #12]	; (801d938 <lv_theme_get_current+0x10>)
    else return &current_theme;
 801d92a:	4804      	ldr	r0, [pc, #16]	; (801d93c <lv_theme_get_current+0x14>)
    if(!inited) return NULL;
 801d92c:	781b      	ldrb	r3, [r3, #0]
 801d92e:	2b00      	cmp	r3, #0
#endif
}
 801d930:	bf08      	it	eq
 801d932:	2000      	moveq	r0, #0
 801d934:	4770      	bx	lr
 801d936:	bf00      	nop
 801d938:	20016674 	.word	0x20016674
 801d93c:	20018838 	.word	0x20018838

0801d940 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 801d940:	f8df d034 	ldr.w	sp, [pc, #52]	; 801d978 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 801d944:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801d946:	e003      	b.n	801d950 <LoopCopyDataInit>

0801d948 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 801d948:	4b0c      	ldr	r3, [pc, #48]	; (801d97c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801d94a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 801d94c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801d94e:	3104      	adds	r1, #4

0801d950 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 801d950:	480b      	ldr	r0, [pc, #44]	; (801d980 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 801d952:	4b0c      	ldr	r3, [pc, #48]	; (801d984 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 801d954:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801d956:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 801d958:	d3f6      	bcc.n	801d948 <CopyDataInit>
  ldr  r2, =_sbss
 801d95a:	4a0b      	ldr	r2, [pc, #44]	; (801d988 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 801d95c:	e002      	b.n	801d964 <LoopFillZerobss>

0801d95e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801d95e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 801d960:	f842 3b04 	str.w	r3, [r2], #4

0801d964 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 801d964:	4b09      	ldr	r3, [pc, #36]	; (801d98c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 801d966:	429a      	cmp	r2, r3
  bcc  FillZerobss
 801d968:	d3f9      	bcc.n	801d95e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 801d96a:	f7e4 f901 	bl	8001b70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801d96e:	f000 f811 	bl	801d994 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801d972:	f7e2 fe5d 	bl	8000630 <main>
  bx  lr    
 801d976:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 801d978:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 801d97c:	080c74f4 	.word	0x080c74f4
  ldr  r0, =_sdata
 801d980:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 801d984:	20000580 	.word	0x20000580
  ldr  r2, =_sbss
 801d988:	20000580 	.word	0x20000580
  ldr  r3, = _ebss
 801d98c:	200194fc 	.word	0x200194fc

0801d990 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801d990:	e7fe      	b.n	801d990 <ADC_IRQHandler>
	...

0801d994 <__libc_init_array>:
 801d994:	b570      	push	{r4, r5, r6, lr}
 801d996:	4e0d      	ldr	r6, [pc, #52]	; (801d9cc <__libc_init_array+0x38>)
 801d998:	4c0d      	ldr	r4, [pc, #52]	; (801d9d0 <__libc_init_array+0x3c>)
 801d99a:	1ba4      	subs	r4, r4, r6
 801d99c:	10a4      	asrs	r4, r4, #2
 801d99e:	2500      	movs	r5, #0
 801d9a0:	42a5      	cmp	r5, r4
 801d9a2:	d109      	bne.n	801d9b8 <__libc_init_array+0x24>
 801d9a4:	4e0b      	ldr	r6, [pc, #44]	; (801d9d4 <__libc_init_array+0x40>)
 801d9a6:	4c0c      	ldr	r4, [pc, #48]	; (801d9d8 <__libc_init_array+0x44>)
 801d9a8:	f000 f834 	bl	801da14 <_init>
 801d9ac:	1ba4      	subs	r4, r4, r6
 801d9ae:	10a4      	asrs	r4, r4, #2
 801d9b0:	2500      	movs	r5, #0
 801d9b2:	42a5      	cmp	r5, r4
 801d9b4:	d105      	bne.n	801d9c2 <__libc_init_array+0x2e>
 801d9b6:	bd70      	pop	{r4, r5, r6, pc}
 801d9b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801d9bc:	4798      	blx	r3
 801d9be:	3501      	adds	r5, #1
 801d9c0:	e7ee      	b.n	801d9a0 <__libc_init_array+0xc>
 801d9c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801d9c6:	4798      	blx	r3
 801d9c8:	3501      	adds	r5, #1
 801d9ca:	e7f2      	b.n	801d9b2 <__libc_init_array+0x1e>
 801d9cc:	080c74ec 	.word	0x080c74ec
 801d9d0:	080c74ec 	.word	0x080c74ec
 801d9d4:	080c74ec 	.word	0x080c74ec
 801d9d8:	080c74f0 	.word	0x080c74f0

0801d9dc <memcpy>:
 801d9dc:	b510      	push	{r4, lr}
 801d9de:	1e43      	subs	r3, r0, #1
 801d9e0:	440a      	add	r2, r1
 801d9e2:	4291      	cmp	r1, r2
 801d9e4:	d100      	bne.n	801d9e8 <memcpy+0xc>
 801d9e6:	bd10      	pop	{r4, pc}
 801d9e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d9ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d9f0:	e7f7      	b.n	801d9e2 <memcpy+0x6>

0801d9f2 <memset>:
 801d9f2:	4402      	add	r2, r0
 801d9f4:	4603      	mov	r3, r0
 801d9f6:	4293      	cmp	r3, r2
 801d9f8:	d100      	bne.n	801d9fc <memset+0xa>
 801d9fa:	4770      	bx	lr
 801d9fc:	f803 1b01 	strb.w	r1, [r3], #1
 801da00:	e7f9      	b.n	801d9f6 <memset+0x4>

0801da02 <strcpy>:
 801da02:	4603      	mov	r3, r0
 801da04:	f811 2b01 	ldrb.w	r2, [r1], #1
 801da08:	f803 2b01 	strb.w	r2, [r3], #1
 801da0c:	2a00      	cmp	r2, #0
 801da0e:	d1f9      	bne.n	801da04 <strcpy+0x2>
 801da10:	4770      	bx	lr
	...

0801da14 <_init>:
 801da14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801da16:	bf00      	nop
 801da18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801da1a:	bc08      	pop	{r3}
 801da1c:	469e      	mov	lr, r3
 801da1e:	4770      	bx	lr

0801da20 <_fini>:
 801da20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801da22:	bf00      	nop
 801da24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801da26:	bc08      	pop	{r3}
 801da28:	469e      	mov	lr, r3
 801da2a:	4770      	bx	lr
