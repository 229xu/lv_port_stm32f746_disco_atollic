
stm32f746_disco_no_os.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000159a4  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000724a8  08015b6c  08015b6c  00025b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08088014  08088014  00098014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0808801c  0808801c  0009801c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08088020  08088020  00098020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002f4  20000000  08088024  000a0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00017c34  200002f4  08088318  000a02f4  2**2
                  ALLOC
  8 ._user_heap_stack 00001800  20017f28  08088318  000a7f28  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000a02f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   000935c0  00000000  00000000  000a0324  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00010776  00000000  00000000  001338e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00030b98  00000000  00000000  0014405a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000030e8  00000000  00000000  00174bf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00005878  00000000  00000000  00177ce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001fca4  00000000  00000000  0017d558  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000106a7  00000000  00000000  0019d1fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  001ad8a3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009690  00000000  00000000  001ad920  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200002f4 	.word	0x200002f4
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08015b54 	.word	0x08015b54

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200002f8 	.word	0x200002f8
 8000204:	08015b54 	.word	0x08015b54

08000208 <strcmp>:
 8000208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000210:	2a01      	cmp	r2, #1
 8000212:	bf28      	it	cs
 8000214:	429a      	cmpcs	r2, r3
 8000216:	d0f7      	beq.n	8000208 <strcmp>
 8000218:	1ad0      	subs	r0, r2, r3
 800021a:	4770      	bx	lr

0800021c <strlen>:
 800021c:	4603      	mov	r3, r0
 800021e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000222:	2a00      	cmp	r2, #0
 8000224:	d1fb      	bne.n	800021e <strlen+0x2>
 8000226:	1a18      	subs	r0, r3, r0
 8000228:	3801      	subs	r0, #1
 800022a:	4770      	bx	lr

0800022c <__aeabi_uldivmod>:
 800022c:	b953      	cbnz	r3, 8000244 <__aeabi_uldivmod+0x18>
 800022e:	b94a      	cbnz	r2, 8000244 <__aeabi_uldivmod+0x18>
 8000230:	2900      	cmp	r1, #0
 8000232:	bf08      	it	eq
 8000234:	2800      	cmpeq	r0, #0
 8000236:	bf1c      	itt	ne
 8000238:	f04f 31ff 	movne.w	r1, #4294967295
 800023c:	f04f 30ff 	movne.w	r0, #4294967295
 8000240:	f000 b97a 	b.w	8000538 <__aeabi_idiv0>
 8000244:	f1ad 0c08 	sub.w	ip, sp, #8
 8000248:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000254:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000258:	b004      	add	sp, #16
 800025a:	4770      	bx	lr

0800025c <__udivmoddi4>:
 800025c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000260:	468c      	mov	ip, r1
 8000262:	460d      	mov	r5, r1
 8000264:	4604      	mov	r4, r0
 8000266:	9e08      	ldr	r6, [sp, #32]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d151      	bne.n	8000310 <__udivmoddi4+0xb4>
 800026c:	428a      	cmp	r2, r1
 800026e:	4617      	mov	r7, r2
 8000270:	d96d      	bls.n	800034e <__udivmoddi4+0xf2>
 8000272:	fab2 fe82 	clz	lr, r2
 8000276:	f1be 0f00 	cmp.w	lr, #0
 800027a:	d00b      	beq.n	8000294 <__udivmoddi4+0x38>
 800027c:	f1ce 0c20 	rsb	ip, lr, #32
 8000280:	fa01 f50e 	lsl.w	r5, r1, lr
 8000284:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000288:	fa02 f70e 	lsl.w	r7, r2, lr
 800028c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000290:	fa00 f40e 	lsl.w	r4, r0, lr
 8000294:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000298:	0c25      	lsrs	r5, r4, #16
 800029a:	fbbc f8fa 	udiv	r8, ip, sl
 800029e:	fa1f f987 	uxth.w	r9, r7
 80002a2:	fb0a cc18 	mls	ip, sl, r8, ip
 80002a6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002aa:	fb08 f309 	mul.w	r3, r8, r9
 80002ae:	42ab      	cmp	r3, r5
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x6c>
 80002b2:	19ed      	adds	r5, r5, r7
 80002b4:	f108 32ff 	add.w	r2, r8, #4294967295
 80002b8:	f080 8123 	bcs.w	8000502 <__udivmoddi4+0x2a6>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	f240 8120 	bls.w	8000502 <__udivmoddi4+0x2a6>
 80002c2:	f1a8 0802 	sub.w	r8, r8, #2
 80002c6:	443d      	add	r5, r7
 80002c8:	1aed      	subs	r5, r5, r3
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb5 f0fa 	udiv	r0, r5, sl
 80002d0:	fb0a 5510 	mls	r5, sl, r0, r5
 80002d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002d8:	fb00 f909 	mul.w	r9, r0, r9
 80002dc:	45a1      	cmp	r9, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x98>
 80002e0:	19e4      	adds	r4, r4, r7
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 810a 	bcs.w	80004fe <__udivmoddi4+0x2a2>
 80002ea:	45a1      	cmp	r9, r4
 80002ec:	f240 8107 	bls.w	80004fe <__udivmoddi4+0x2a2>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	eba4 0409 	sub.w	r4, r4, r9
 80002f8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002fc:	2100      	movs	r1, #0
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d061      	beq.n	80003c6 <__udivmoddi4+0x16a>
 8000302:	fa24 f40e 	lsr.w	r4, r4, lr
 8000306:	2300      	movs	r3, #0
 8000308:	6034      	str	r4, [r6, #0]
 800030a:	6073      	str	r3, [r6, #4]
 800030c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xc8>
 8000314:	2e00      	cmp	r6, #0
 8000316:	d054      	beq.n	80003c2 <__udivmoddi4+0x166>
 8000318:	2100      	movs	r1, #0
 800031a:	e886 0021 	stmia.w	r6, {r0, r5}
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	f040 808e 	bne.w	800044a <__udivmoddi4+0x1ee>
 800032e:	42ab      	cmp	r3, r5
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xdc>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2d0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb65 0503 	sbc.w	r5, r5, r3
 800033e:	2001      	movs	r0, #1
 8000340:	46ac      	mov	ip, r5
 8000342:	2e00      	cmp	r6, #0
 8000344:	d03f      	beq.n	80003c6 <__udivmoddi4+0x16a>
 8000346:	e886 1010 	stmia.w	r6, {r4, ip}
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	b912      	cbnz	r2, 8000356 <__udivmoddi4+0xfa>
 8000350:	2701      	movs	r7, #1
 8000352:	fbb7 f7f2 	udiv	r7, r7, r2
 8000356:	fab7 fe87 	clz	lr, r7
 800035a:	f1be 0f00 	cmp.w	lr, #0
 800035e:	d134      	bne.n	80003ca <__udivmoddi4+0x16e>
 8000360:	1beb      	subs	r3, r5, r7
 8000362:	0c3a      	lsrs	r2, r7, #16
 8000364:	fa1f fc87 	uxth.w	ip, r7
 8000368:	2101      	movs	r1, #1
 800036a:	fbb3 f8f2 	udiv	r8, r3, r2
 800036e:	0c25      	lsrs	r5, r4, #16
 8000370:	fb02 3318 	mls	r3, r2, r8, r3
 8000374:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000378:	fb0c f308 	mul.w	r3, ip, r8
 800037c:	42ab      	cmp	r3, r5
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x134>
 8000380:	19ed      	adds	r5, r5, r7
 8000382:	f108 30ff 	add.w	r0, r8, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x132>
 8000388:	42ab      	cmp	r3, r5
 800038a:	f200 80d1 	bhi.w	8000530 <__udivmoddi4+0x2d4>
 800038e:	4680      	mov	r8, r0
 8000390:	1aed      	subs	r5, r5, r3
 8000392:	b2a3      	uxth	r3, r4
 8000394:	fbb5 f0f2 	udiv	r0, r5, r2
 8000398:	fb02 5510 	mls	r5, r2, r0, r5
 800039c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003a0:	fb0c fc00 	mul.w	ip, ip, r0
 80003a4:	45a4      	cmp	ip, r4
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0x15c>
 80003a8:	19e4      	adds	r4, r4, r7
 80003aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x15a>
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	f200 80b8 	bhi.w	8000526 <__udivmoddi4+0x2ca>
 80003b6:	4618      	mov	r0, r3
 80003b8:	eba4 040c 	sub.w	r4, r4, ip
 80003bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003c0:	e79d      	b.n	80002fe <__udivmoddi4+0xa2>
 80003c2:	4631      	mov	r1, r6
 80003c4:	4630      	mov	r0, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	f1ce 0420 	rsb	r4, lr, #32
 80003ce:	fa05 f30e 	lsl.w	r3, r5, lr
 80003d2:	fa07 f70e 	lsl.w	r7, r7, lr
 80003d6:	fa20 f804 	lsr.w	r8, r0, r4
 80003da:	0c3a      	lsrs	r2, r7, #16
 80003dc:	fa25 f404 	lsr.w	r4, r5, r4
 80003e0:	ea48 0803 	orr.w	r8, r8, r3
 80003e4:	fbb4 f1f2 	udiv	r1, r4, r2
 80003e8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003ec:	fb02 4411 	mls	r4, r2, r1, r4
 80003f0:	fa1f fc87 	uxth.w	ip, r7
 80003f4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003f8:	fb01 f30c 	mul.w	r3, r1, ip
 80003fc:	42ab      	cmp	r3, r5
 80003fe:	fa00 f40e 	lsl.w	r4, r0, lr
 8000402:	d909      	bls.n	8000418 <__udivmoddi4+0x1bc>
 8000404:	19ed      	adds	r5, r5, r7
 8000406:	f101 30ff 	add.w	r0, r1, #4294967295
 800040a:	f080 808a 	bcs.w	8000522 <__udivmoddi4+0x2c6>
 800040e:	42ab      	cmp	r3, r5
 8000410:	f240 8087 	bls.w	8000522 <__udivmoddi4+0x2c6>
 8000414:	3902      	subs	r1, #2
 8000416:	443d      	add	r5, r7
 8000418:	1aeb      	subs	r3, r5, r3
 800041a:	fa1f f588 	uxth.w	r5, r8
 800041e:	fbb3 f0f2 	udiv	r0, r3, r2
 8000422:	fb02 3310 	mls	r3, r2, r0, r3
 8000426:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800042a:	fb00 f30c 	mul.w	r3, r0, ip
 800042e:	42ab      	cmp	r3, r5
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1e6>
 8000432:	19ed      	adds	r5, r5, r7
 8000434:	f100 38ff 	add.w	r8, r0, #4294967295
 8000438:	d26f      	bcs.n	800051a <__udivmoddi4+0x2be>
 800043a:	42ab      	cmp	r3, r5
 800043c:	d96d      	bls.n	800051a <__udivmoddi4+0x2be>
 800043e:	3802      	subs	r0, #2
 8000440:	443d      	add	r5, r7
 8000442:	1aeb      	subs	r3, r5, r3
 8000444:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000448:	e78f      	b.n	800036a <__udivmoddi4+0x10e>
 800044a:	f1c1 0720 	rsb	r7, r1, #32
 800044e:	fa22 f807 	lsr.w	r8, r2, r7
 8000452:	408b      	lsls	r3, r1
 8000454:	fa05 f401 	lsl.w	r4, r5, r1
 8000458:	ea48 0303 	orr.w	r3, r8, r3
 800045c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000460:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000464:	40fd      	lsrs	r5, r7
 8000466:	ea4e 0e04 	orr.w	lr, lr, r4
 800046a:	fbb5 f9fc 	udiv	r9, r5, ip
 800046e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000472:	fb0c 5519 	mls	r5, ip, r9, r5
 8000476:	fa1f f883 	uxth.w	r8, r3
 800047a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800047e:	fb09 f408 	mul.w	r4, r9, r8
 8000482:	42ac      	cmp	r4, r5
 8000484:	fa02 f201 	lsl.w	r2, r2, r1
 8000488:	fa00 fa01 	lsl.w	sl, r0, r1
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x244>
 800048e:	18ed      	adds	r5, r5, r3
 8000490:	f109 30ff 	add.w	r0, r9, #4294967295
 8000494:	d243      	bcs.n	800051e <__udivmoddi4+0x2c2>
 8000496:	42ac      	cmp	r4, r5
 8000498:	d941      	bls.n	800051e <__udivmoddi4+0x2c2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	441d      	add	r5, r3
 80004a0:	1b2d      	subs	r5, r5, r4
 80004a2:	fa1f fe8e 	uxth.w	lr, lr
 80004a6:	fbb5 f0fc 	udiv	r0, r5, ip
 80004aa:	fb0c 5510 	mls	r5, ip, r0, r5
 80004ae:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004b2:	fb00 f808 	mul.w	r8, r0, r8
 80004b6:	45a0      	cmp	r8, r4
 80004b8:	d907      	bls.n	80004ca <__udivmoddi4+0x26e>
 80004ba:	18e4      	adds	r4, r4, r3
 80004bc:	f100 35ff 	add.w	r5, r0, #4294967295
 80004c0:	d229      	bcs.n	8000516 <__udivmoddi4+0x2ba>
 80004c2:	45a0      	cmp	r8, r4
 80004c4:	d927      	bls.n	8000516 <__udivmoddi4+0x2ba>
 80004c6:	3802      	subs	r0, #2
 80004c8:	441c      	add	r4, r3
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	eba4 0408 	sub.w	r4, r4, r8
 80004d2:	fba0 8902 	umull	r8, r9, r0, r2
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c6      	mov	lr, r8
 80004da:	464d      	mov	r5, r9
 80004dc:	d315      	bcc.n	800050a <__udivmoddi4+0x2ae>
 80004de:	d012      	beq.n	8000506 <__udivmoddi4+0x2aa>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x29c>
 80004e2:	ebba 030e 	subs.w	r3, sl, lr
 80004e6:	eb64 0405 	sbc.w	r4, r4, r5
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40cb      	lsrs	r3, r1
 80004f0:	431f      	orrs	r7, r3
 80004f2:	40cc      	lsrs	r4, r1
 80004f4:	6037      	str	r7, [r6, #0]
 80004f6:	6074      	str	r4, [r6, #4]
 80004f8:	2100      	movs	r1, #0
 80004fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fe:	4618      	mov	r0, r3
 8000500:	e6f8      	b.n	80002f4 <__udivmoddi4+0x98>
 8000502:	4690      	mov	r8, r2
 8000504:	e6e0      	b.n	80002c8 <__udivmoddi4+0x6c>
 8000506:	45c2      	cmp	sl, r8
 8000508:	d2ea      	bcs.n	80004e0 <__udivmoddi4+0x284>
 800050a:	ebb8 0e02 	subs.w	lr, r8, r2
 800050e:	eb69 0503 	sbc.w	r5, r9, r3
 8000512:	3801      	subs	r0, #1
 8000514:	e7e4      	b.n	80004e0 <__udivmoddi4+0x284>
 8000516:	4628      	mov	r0, r5
 8000518:	e7d7      	b.n	80004ca <__udivmoddi4+0x26e>
 800051a:	4640      	mov	r0, r8
 800051c:	e791      	b.n	8000442 <__udivmoddi4+0x1e6>
 800051e:	4681      	mov	r9, r0
 8000520:	e7be      	b.n	80004a0 <__udivmoddi4+0x244>
 8000522:	4601      	mov	r1, r0
 8000524:	e778      	b.n	8000418 <__udivmoddi4+0x1bc>
 8000526:	3802      	subs	r0, #2
 8000528:	443c      	add	r4, r7
 800052a:	e745      	b.n	80003b8 <__udivmoddi4+0x15c>
 800052c:	4608      	mov	r0, r1
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xe6>
 8000530:	f1a8 0802 	sub.w	r8, r8, #2
 8000534:	443d      	add	r5, r7
 8000536:	e72b      	b.n	8000390 <__udivmoddi4+0x134>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800053e:	b0b5      	sub	sp, #212	; 0xd4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000540:	2230      	movs	r2, #48	; 0x30
 8000542:	2100      	movs	r1, #0
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000544:	2502      	movs	r5, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000548:	2601      	movs	r6, #1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f015 faf2 	bl	8015b32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054e:	2214      	movs	r2, #20
 8000550:	2100      	movs	r1, #0
 8000552:	a802      	add	r0, sp, #8
 8000554:	f015 faed 	bl	8015b32 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000558:	2100      	movs	r1, #0
 800055a:	2284      	movs	r2, #132	; 0x84
 800055c:	a813      	add	r0, sp, #76	; 0x4c
 800055e:	f015 fae8 	bl	8015b32 <memset>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000562:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  HAL_PWR_EnableBkUpAccess();
 8000566:	f002 fe49 	bl	80031fc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 800056a:	4b29      	ldr	r3, [pc, #164]	; (8000610 <SystemClock_Config+0xd4>)
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 400;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 8;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056c:	a807      	add	r0, sp, #28
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056e:	2400      	movs	r4, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8000570:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000572:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000576:	641a      	str	r2, [r3, #64]	; 0x40
 8000578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057e:	9300      	str	r3, [sp, #0]
 8000580:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000582:	4b24      	ldr	r3, [pc, #144]	; (8000614 <SystemClock_Config+0xd8>)
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800058e:	9708      	str	r7, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000590:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000594:	960c      	str	r6, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	950d      	str	r5, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000598:	9301      	str	r3, [sp, #4]
 800059a:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800059c:	2309      	movs	r3, #9
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800059e:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80005a0:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005a6:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005a8:	2319      	movs	r3, #25
 80005aa:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 400;
 80005ac:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80005b0:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80005b2:	2308      	movs	r3, #8
 80005b4:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b6:	f002 fee3 	bl	8003380 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005ba:	f002 fe27 	bl	800320c <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005be:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80005c0:	2106      	movs	r1, #6
 80005c2:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ca:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005cc:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d4:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80005d6:	f003 f895 	bl	8003704 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 80005da:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <SystemClock_Config+0xdc>)
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005dc:	a813      	add	r0, sp, #76	; 0x4c
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80005de:	9519      	str	r5, [sp, #100]	; 0x64
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 80005e0:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80005e2:	23c0      	movs	r3, #192	; 0xc0
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 80005e4:	961b      	str	r6, [sp, #108]	; 0x6c
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80005e6:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80005e8:	2305      	movs	r3, #5
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80005ea:	961d      	str	r6, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80005ec:	931a      	str	r3, [sp, #104]	; 0x68
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80005ee:	f44f 7300 	mov.w	r3, #512	; 0x200
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80005f2:	971e      	str	r7, [sp, #120]	; 0x78
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80005f4:	931f      	str	r3, [sp, #124]	; 0x7c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80005f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80005fa:	9423      	str	r4, [sp, #140]	; 0x8c
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005fc:	9424      	str	r4, [sp, #144]	; 0x90
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80005fe:	9429      	str	r4, [sp, #164]	; 0xa4
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000600:	942c      	str	r4, [sp, #176]	; 0xb0
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000602:	942e      	str	r4, [sp, #184]	; 0xb8
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000604:	9332      	str	r3, [sp, #200]	; 0xc8
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000606:	9433      	str	r4, [sp, #204]	; 0xcc
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000608:	f003 f958 	bl	80038bc <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800060c:	b035      	add	sp, #212	; 0xd4
 800060e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000610:	40023800 	.word	0x40023800
 8000614:	40007000 	.word	0x40007000
 8000618:	00b14868 	.word	0x00b14868

0800061c <main>:
{
 800061c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000620:	b0a9      	sub	sp, #164	; 0xa4
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000622:	2400      	movs	r4, #0
  HAL_Init();
 8000624:	f001 fa6a 	bl	8001afc <HAL_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000628:	2702      	movs	r7, #2
  SystemClock_Config();
 800062a:	f7ff ff87 	bl	800053c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062e:	2214      	movs	r2, #20
 8000630:	2100      	movs	r1, #0
 8000632:	a81b      	add	r0, sp, #108	; 0x6c
 8000634:	f015 fa7d 	bl	8015b32 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000638:	4ba8      	ldr	r3, [pc, #672]	; (80008dc <main+0x2c0>)
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800063a:	2120      	movs	r1, #32
 800063c:	48a8      	ldr	r0, [pc, #672]	; (80008e0 <main+0x2c4>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800063e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000640:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000644:	260a      	movs	r6, #10
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000646:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800064a:	f042 0210 	orr.w	r2, r2, #16
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800064e:	f8df b2b8 	ldr.w	fp, [pc, #696]	; 8000908 <main+0x2ec>
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000652:	2501      	movs	r5, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000654:	f04f 0910 	mov.w	r9, #16
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
 800065a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800065c:	f002 0210 	and.w	r2, r2, #16
 8000660:	9202      	str	r2, [sp, #8]
 8000662:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000666:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800066a:	631a      	str	r2, [r3, #48]	; 0x30
 800066c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800066e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000672:	9203      	str	r2, [sp, #12]
 8000674:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000676:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000678:	f042 0202 	orr.w	r2, r2, #2
 800067c:	631a      	str	r2, [r3, #48]	; 0x30
 800067e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000680:	f002 0202 	and.w	r2, r2, #2
 8000684:	9204      	str	r2, [sp, #16]
 8000686:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800068a:	f042 0208 	orr.w	r2, r2, #8
 800068e:	631a      	str	r2, [r3, #48]	; 0x30
 8000690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000692:	f002 0208 	and.w	r2, r2, #8
 8000696:	9205      	str	r2, [sp, #20]
 8000698:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800069c:	f042 0204 	orr.w	r2, r2, #4
 80006a0:	631a      	str	r2, [r3, #48]	; 0x30
 80006a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006a4:	f002 0204 	and.w	r2, r2, #4
 80006a8:	9206      	str	r2, [sp, #24]
 80006aa:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006ae:	f042 0201 	orr.w	r2, r2, #1
 80006b2:	631a      	str	r2, [r3, #48]	; 0x30
 80006b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006b6:	f002 0201 	and.w	r2, r2, #1
 80006ba:	9207      	str	r2, [sp, #28]
 80006bc:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80006be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80006c4:	631a      	str	r2, [r3, #48]	; 0x30
 80006c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006c8:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80006cc:	9208      	str	r2, [sp, #32]
 80006ce:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80006d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80006d6:	631a      	str	r2, [r3, #48]	; 0x30
 80006d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006da:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80006de:	9209      	str	r2, [sp, #36]	; 0x24
 80006e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80006e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80006e8:	631a      	str	r2, [r3, #48]	; 0x30
 80006ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006ec:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80006f0:	920a      	str	r2, [sp, #40]	; 0x28
 80006f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006f6:	f042 0220 	orr.w	r2, r2, #32
 80006fa:	631a      	str	r2, [r3, #48]	; 0x30
 80006fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006fe:	f002 0220 	and.w	r2, r2, #32
 8000702:	920b      	str	r2, [sp, #44]	; 0x2c
 8000704:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000706:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000708:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800070c:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800070e:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000716:	930c      	str	r3, [sp, #48]	; 0x30
 8000718:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800071a:	f002 f8cf 	bl	80028bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	210c      	movs	r1, #12
 8000722:	4870      	ldr	r0, [pc, #448]	; (80008e4 <main+0x2c8>)
 8000724:	f002 f8ca 	bl	80028bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8000728:	2201      	movs	r2, #1
 800072a:	2108      	movs	r1, #8
 800072c:	486e      	ldr	r0, [pc, #440]	; (80008e8 <main+0x2cc>)
 800072e:	f002 f8c5 	bl	80028bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8000732:	2201      	movs	r2, #1
 8000734:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000738:	486a      	ldr	r0, [pc, #424]	; (80008e4 <main+0x2c8>)
 800073a:	f002 f8bf 	bl	80028bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000744:	4869      	ldr	r0, [pc, #420]	; (80008ec <main+0x2d0>)
 8000746:	f002 f8b9 	bl	80028bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	21c8      	movs	r1, #200	; 0xc8
 800074e:	4868      	ldr	r0, [pc, #416]	; (80008f0 <main+0x2d4>)
 8000750:	f002 f8b4 	bl	80028bc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000754:	2308      	movs	r3, #8
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000756:	a91b      	add	r1, sp, #108	; 0x6c
 8000758:	4866      	ldr	r0, [pc, #408]	; (80008f4 <main+0x2d8>)
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800075a:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800075c:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000760:	f001 ff1e 	bl	80025a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000764:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000768:	a91b      	add	r1, sp, #108	; 0x6c
 800076a:	4861      	ldr	r0, [pc, #388]	; (80008f0 <main+0x2d4>)
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800076c:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800076e:	230b      	movs	r3, #11
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000772:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000774:	971c      	str	r7, [sp, #112]	; 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000776:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800077a:	f001 ff11 	bl	80025a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 800077e:	f643 4323 	movw	r3, #15395	; 0x3c23
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000782:	a91b      	add	r1, sp, #108	; 0x6c
 8000784:	485c      	ldr	r0, [pc, #368]	; (80008f8 <main+0x2dc>)
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8000786:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800078a:	961f      	str	r6, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078c:	971c      	str	r7, [sp, #112]	; 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078e:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000792:	f001 ff05 	bl	80025a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000796:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000798:	a91b      	add	r1, sp, #108	; 0x6c
 800079a:	4851      	ldr	r0, [pc, #324]	; (80008e0 <main+0x2c4>)
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800079c:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800079e:	2308      	movs	r3, #8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80007a2:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a4:	941e      	str	r4, [sp, #120]	; 0x78
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a6:	971c      	str	r7, [sp, #112]	; 0x70
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80007a8:	f001 fefa 	bl	80025a0 <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80007ac:	a91b      	add	r1, sp, #108	; 0x6c
 80007ae:	4853      	ldr	r0, [pc, #332]	; (80008fc <main+0x2e0>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b0:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80007b4:	f8cd a06c 	str.w	sl, [sp, #108]	; 0x6c
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80007b8:	f001 fef2 	bl	80025a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80007bc:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80007be:	a91b      	add	r1, sp, #108	; 0x6c
 80007c0:	4847      	ldr	r0, [pc, #284]	; (80008e0 <main+0x2c4>)
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80007c2:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007c4:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80007ca:	f001 fee9 	bl	80025a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80007ce:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d2:	a91b      	add	r1, sp, #108	; 0x6c
 80007d4:	484a      	ldr	r0, [pc, #296]	; (8000900 <main+0x2e4>)
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80007d6:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80007da:	961f      	str	r6, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007dc:	971c      	str	r7, [sp, #112]	; 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007de:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e2:	f001 fedd 	bl	80025a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007e6:	2320      	movs	r3, #32
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007e8:	a91b      	add	r1, sp, #108	; 0x6c
 80007ea:	483d      	ldr	r0, [pc, #244]	; (80008e0 <main+0x2c4>)
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007ec:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f001 fed4 	bl	80025a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80007f8:	f241 030c 	movw	r3, #4108	; 0x100c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80007fc:	a91b      	add	r1, sp, #108	; 0x6c
 80007fe:	4839      	ldr	r0, [pc, #228]	; (80008e4 <main+0x2c8>)
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000800:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000808:	f001 feca 	bl	80025a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800080c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000810:	a91b      	add	r1, sp, #108	; 0x6c
 8000812:	483c      	ldr	r0, [pc, #240]	; (8000904 <main+0x2e8>)
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000814:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000816:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800081a:	f001 fec1 	bl	80025a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800081e:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000820:	a91b      	add	r1, sp, #108	; 0x6c
 8000822:	4831      	ldr	r0, [pc, #196]	; (80008e8 <main+0x2cc>)
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000824:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800082c:	f001 feb8 	bl	80025a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000830:	a91b      	add	r1, sp, #108	; 0x6c
 8000832:	482b      	ldr	r0, [pc, #172]	; (80008e0 <main+0x2c4>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000834:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000838:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800083c:	f001 feb0 	bl	80025a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000840:	f248 0304 	movw	r3, #32772	; 0x8004
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000844:	a91b      	add	r1, sp, #108	; 0x6c
 8000846:	4829      	ldr	r0, [pc, #164]	; (80008ec <main+0x2d0>)
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000848:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084a:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800084e:	f001 fea7 	bl	80025a0 <HAL_GPIO_Init>
  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000852:	2305      	movs	r3, #5
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000854:	a91b      	add	r1, sp, #108	; 0x6c
 8000856:	4823      	ldr	r0, [pc, #140]	; (80008e4 <main+0x2c8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	941e      	str	r4, [sp, #120]	; 0x78
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800085c:	931f      	str	r3, [sp, #124]	; 0x7c
 800085e:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000860:	971b      	str	r7, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	971c      	str	r7, [sp, #112]	; 0x70
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000864:	f001 fe9c 	bl	80025a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000868:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800086c:	a91b      	add	r1, sp, #108	; 0x6c
 800086e:	481f      	ldr	r0, [pc, #124]	; (80008ec <main+0x2d0>)
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000870:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000878:	f001 fe92 	bl	80025a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800087c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000880:	a91b      	add	r1, sp, #108	; 0x6c
 8000882:	4818      	ldr	r0, [pc, #96]	; (80008e4 <main+0x2c8>)
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000884:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000888:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800088c:	f001 fe88 	bl	80025a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000894:	a91b      	add	r1, sp, #108	; 0x6c
 8000896:	4813      	ldr	r0, [pc, #76]	; (80008e4 <main+0x2c8>)
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000898:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800089a:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800089e:	f04f 0b04 	mov.w	fp, #4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80008a4:	f001 fe7c 	bl	80025a0 <HAL_GPIO_Init>
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80008a8:	a91b      	add	r1, sp, #108	; 0x6c
 80008aa:	4810      	ldr	r0, [pc, #64]	; (80008ec <main+0x2d0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80008ae:	961f      	str	r6, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80008b0:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b4:	971c      	str	r7, [sp, #112]	; 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b6:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f001 fe71 	bl	80025a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80008be:	22c8      	movs	r2, #200	; 0xc8
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008c0:	a91b      	add	r1, sp, #108	; 0x6c
 80008c2:	480b      	ldr	r0, [pc, #44]	; (80008f0 <main+0x2d4>)
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80008c4:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c6:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008cc:	f001 fe68 	bl	80025a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80008d0:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d2:	a91b      	add	r1, sp, #108	; 0x6c
 80008d4:	480b      	ldr	r0, [pc, #44]	; (8000904 <main+0x2e8>)
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80008d6:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	941d      	str	r4, [sp, #116]	; 0x74
 80008da:	e017      	b.n	800090c <main+0x2f0>
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020c00 	.word	0x40020c00
 80008e4:	40022000 	.word	0x40022000
 80008e8:	40022800 	.word	0x40022800
 80008ec:	40021c00 	.word	0x40021c00
 80008f0:	40021800 	.word	0x40021800
 80008f4:	40021000 	.word	0x40021000
 80008f8:	40020400 	.word	0x40020400
 80008fc:	40022400 	.word	0x40022400
 8000900:	40020000 	.word	0x40020000
 8000904:	40020800 	.word	0x40020800
 8000908:	10120000 	.word	0x10120000
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800090c:	961f      	str	r6, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090e:	971c      	str	r7, [sp, #112]	; 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000910:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000914:	f001 fe44 	bl	80025a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000918:	2232      	movs	r2, #50	; 0x32
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800091a:	230b      	movs	r3, #11
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800091c:	a91b      	add	r1, sp, #108	; 0x6c
 800091e:	48b1      	ldr	r0, [pc, #708]	; (8000be4 <main+0x5c8>)
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000920:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000922:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	971c      	str	r7, [sp, #112]	; 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000928:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092c:	f001 fe38 	bl	80025a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000930:	a91b      	add	r1, sp, #108	; 0x6c
 8000932:	48ad      	ldr	r0, [pc, #692]	; (8000be8 <main+0x5cc>)
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000934:	f8cd b06c 	str.w	fp, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000938:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800093c:	f001 fe30 	bl	80025a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000940:	2286      	movs	r2, #134	; 0x86
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000942:	230b      	movs	r3, #11
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000944:	a91b      	add	r1, sp, #108	; 0x6c
 8000946:	48a9      	ldr	r0, [pc, #676]	; (8000bec <main+0x5d0>)
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000948:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800094c:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	971c      	str	r7, [sp, #112]	; 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000950:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000954:	f001 fe24 	bl	80025a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000958:	2328      	movs	r3, #40	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095a:	a91b      	add	r1, sp, #108	; 0x6c
 800095c:	48a3      	ldr	r0, [pc, #652]	; (8000bec <main+0x5d0>)
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800095e:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000962:	961f      	str	r6, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	971c      	str	r7, [sp, #112]	; 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000966:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096a:	f001 fe19 	bl	80025a0 <HAL_GPIO_Init>
  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800096e:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000970:	f44f 4240 	mov.w	r2, #49152	; 0xc000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000974:	a91b      	add	r1, sp, #108	; 0x6c
 8000976:	489e      	ldr	r0, [pc, #632]	; (8000bf0 <main+0x5d4>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000978:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800097a:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	941e      	str	r4, [sp, #120]	; 0x78
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	971c      	str	r7, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000982:	f001 fe0d 	bl	80025a0 <HAL_GPIO_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000986:	4621      	mov	r1, r4
 8000988:	464a      	mov	r2, r9
 800098a:	a81b      	add	r0, sp, #108	; 0x6c
  hadc3.Instance = ADC3;
 800098c:	4e99      	ldr	r6, [pc, #612]	; (8000bf4 <main+0x5d8>)
  ADC_ChannelConfTypeDef sConfig = {0};
 800098e:	f015 f8d0 	bl	8015b32 <memset>
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000992:	4a99      	ldr	r2, [pc, #612]	; (8000bf8 <main+0x5dc>)
 8000994:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000998:	4630      	mov	r0, r6
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800099a:	60b4      	str	r4, [r6, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800099c:	6134      	str	r4, [r6, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800099e:	61b4      	str	r4, [r6, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80009a0:	6234      	str	r4, [r6, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009a2:	62f4      	str	r4, [r6, #44]	; 0x2c
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009a4:	60f4      	str	r4, [r6, #12]
  hadc3.Init.NbrOfConversion = 1;
 80009a6:	61f5      	str	r5, [r6, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80009a8:	6334      	str	r4, [r6, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009aa:	6175      	str	r5, [r6, #20]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009ac:	e886 000c 	stmia.w	r6, {r2, r3}
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009b0:	4b92      	ldr	r3, [pc, #584]	; (8000bfc <main+0x5e0>)
 80009b2:	62b3      	str	r3, [r6, #40]	; 0x28
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80009b4:	f001 f8dc 	bl	8001b70 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009b8:	a91b      	add	r1, sp, #108	; 0x6c
 80009ba:	4630      	mov	r0, r6
  sConfig.Channel = ADC_CHANNEL_4;
 80009bc:	f8cd b06c 	str.w	fp, [sp, #108]	; 0x6c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009c0:	951c      	str	r5, [sp, #112]	; 0x70
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009c2:	941d      	str	r4, [sp, #116]	; 0x74
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009c4:	f001 f978 	bl	8001cb8 <HAL_ADC_ConfigChannel>
  hdcmi.Instance = DCMI;
 80009c8:	488d      	ldr	r0, [pc, #564]	; (8000c00 <main+0x5e4>)
 80009ca:	4b8e      	ldr	r3, [pc, #568]	; (8000c04 <main+0x5e8>)
  hdma2d.Instance = DMA2D;
 80009cc:	4e8e      	ldr	r6, [pc, #568]	; (8000c08 <main+0x5ec>)
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80009ce:	6084      	str	r4, [r0, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80009d0:	60c4      	str	r4, [r0, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80009d2:	6104      	str	r4, [r0, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80009d4:	6144      	str	r4, [r0, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80009d6:	6184      	str	r4, [r0, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80009d8:	6204      	str	r4, [r0, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80009da:	6244      	str	r4, [r0, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80009dc:	6284      	str	r4, [r0, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80009de:	62c4      	str	r4, [r0, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80009e0:	6304      	str	r4, [r0, #48]	; 0x30
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80009e2:	e880 0018 	stmia.w	r0, {r3, r4}
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80009e6:	f001 fa5d 	bl	8001ea4 <HAL_DCMI_Init>
  hdma2d.Instance = DMA2D;
 80009ea:	4b88      	ldr	r3, [pc, #544]	; (8000c0c <main+0x5f0>)
  hdma2d.LayerCfg[1].InputOffset = 0;
 80009ec:	62b4      	str	r4, [r6, #40]	; 0x28
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80009ee:	4630      	mov	r0, r6
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80009f0:	62f4      	str	r4, [r6, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80009f2:	6334      	str	r4, [r6, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80009f4:	6374      	str	r4, [r6, #52]	; 0x34
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80009f6:	60b4      	str	r4, [r6, #8]
  hdma2d.Init.OutputOffset = 0;
 80009f8:	60f4      	str	r4, [r6, #12]
  hdma2d.Init.Mode = DMA2D_M2M;
 80009fa:	e886 0018 	stmia.w	r6, {r3, r4}
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80009fe:	f001 fcb7 	bl	8002370 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000a02:	4629      	mov	r1, r5
 8000a04:	4630      	mov	r0, r6
  hi2c1.Instance = I2C1;
 8000a06:	4e82      	ldr	r6, [pc, #520]	; (8000c10 <main+0x5f4>)
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000a08:	f001 fd80 	bl	800250c <HAL_DMA2D_ConfigLayer>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a0c:	4881      	ldr	r0, [pc, #516]	; (8000c14 <main+0x5f8>)
 8000a0e:	4b82      	ldr	r3, [pc, #520]	; (8000c18 <main+0x5fc>)
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a10:	a91b      	add	r1, sp, #108	; 0x6c
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000a12:	6084      	str	r4, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a14:	f8c0 b00c 	str.w	fp, [r0, #12]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a18:	61c4      	str	r4, [r0, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000a1a:	6284      	str	r4, [r0, #40]	; 0x28
  SdramTiming.SelfRefreshTime = 4;
 8000a1c:	f8cd b074 	str.w	fp, [sp, #116]	; 0x74
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a20:	f8c0 9010 	str.w	r9, [r0, #16]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000a24:	f8df b218 	ldr.w	fp, [pc, #536]	; 8000c40 <main+0x624>
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000a28:	f8c0 a024 	str.w	sl, [r0, #36]	; 0x24
  SdramTiming.LoadToActiveDelay = 2;
 8000a2c:	971b      	str	r7, [sp, #108]	; 0x6c
  SdramTiming.WriteRecoveryTime = 3;
 8000a2e:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
  SdramTiming.RPDelay = 2;
 8000a32:	9720      	str	r7, [sp, #128]	; 0x80
  SdramTiming.RCDDelay = 2;
 8000a34:	9721      	str	r7, [sp, #132]	; 0x84
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000a36:	e880 0018 	stmia.w	r0, {r3, r4}
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a3a:	2340      	movs	r3, #64	; 0x40
 8000a3c:	6143      	str	r3, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000a3e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000a42:	6183      	str	r3, [r0, #24]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a48:	6203      	str	r3, [r0, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000a4a:	2307      	movs	r3, #7
 8000a4c:	931c      	str	r3, [sp, #112]	; 0x70
  SdramTiming.RowCycleDelay = 7;
 8000a4e:	931e      	str	r3, [sp, #120]	; 0x78
 8000a50:	9301      	str	r3, [sp, #4]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a52:	f004 f800 	bl	8004a56 <HAL_SDRAM_Init>
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000a56:	4a71      	ldr	r2, [pc, #452]	; (8000c1c <main+0x600>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a58:	4630      	mov	r0, r6
  hi2c1.Init.OwnAddress1 = 0;
 8000a5a:	60b4      	str	r4, [r6, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a5c:	60f5      	str	r5, [r6, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a5e:	6134      	str	r4, [r6, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a60:	6174      	str	r4, [r6, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a62:	61b4      	str	r4, [r6, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a64:	61f4      	str	r4, [r6, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a66:	6234      	str	r4, [r6, #32]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000a68:	e886 0804 	stmia.w	r6, {r2, fp}
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a6c:	f002 f875 	bl	8002b5a <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a70:	4621      	mov	r1, r4
 8000a72:	4630      	mov	r0, r6
 8000a74:	f002 fa55 	bl	8002f22 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a78:	4621      	mov	r1, r4
 8000a7a:	4630      	mov	r0, r6
  hi2c3.Instance = I2C3;
 8000a7c:	4e68      	ldr	r6, [pc, #416]	; (8000c20 <main+0x604>)
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a7e:	f002 fa76 	bl	8002f6e <HAL_I2CEx_ConfigDigitalFilter>
  hi2c3.Instance = I2C3;
 8000a82:	4a68      	ldr	r2, [pc, #416]	; (8000c24 <main+0x608>)
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a84:	4630      	mov	r0, r6
  hi2c3.Init.OwnAddress1 = 0;
 8000a86:	60b4      	str	r4, [r6, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a88:	60f5      	str	r5, [r6, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a8a:	6134      	str	r4, [r6, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000a8c:	6174      	str	r4, [r6, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a8e:	61b4      	str	r4, [r6, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a90:	61f4      	str	r4, [r6, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a92:	6234      	str	r4, [r6, #32]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000a94:	e886 0804 	stmia.w	r6, {r2, fp}
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a98:	f002 f85f 	bl	8002b5a <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a9c:	4621      	mov	r1, r4
 8000a9e:	4630      	mov	r0, r6
  pLayerCfg.Alpha = 255;
 8000aa0:	f04f 0bff 	mov.w	fp, #255	; 0xff
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aa4:	f002 fa3d 	bl	8002f22 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000aa8:	4621      	mov	r1, r4
 8000aaa:	4630      	mov	r0, r6
  hltdc.Instance = LTDC;
 8000aac:	4e5e      	ldr	r6, [pc, #376]	; (8000c28 <main+0x60c>)
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000aae:	f002 fa5e 	bl	8002f6e <HAL_I2CEx_ConfigDigitalFilter>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000ab2:	4621      	mov	r1, r4
 8000ab4:	2234      	movs	r2, #52	; 0x34
 8000ab6:	a81b      	add	r0, sp, #108	; 0x6c
 8000ab8:	f015 f83b 	bl	8015b32 <memset>
  hltdc.Instance = LTDC;
 8000abc:	4a5b      	ldr	r2, [pc, #364]	; (8000c2c <main+0x610>)
  hltdc.Init.HorizontalSync = 40;
 8000abe:	2328      	movs	r3, #40	; 0x28
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000ac0:	4630      	mov	r0, r6
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000ac2:	60b4      	str	r4, [r6, #8]
  hltdc.Init.HorizontalSync = 40;
 8000ac4:	6173      	str	r3, [r6, #20]
  hltdc.Init.AccumulatedVBP = 11;
 8000ac6:	230b      	movs	r3, #11
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000ac8:	60f4      	str	r4, [r6, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000aca:	6134      	str	r4, [r6, #16]
  hltdc.Init.AccumulatedVBP = 11;
 8000acc:	6233      	str	r3, [r6, #32]
  hltdc.Init.Backcolor.Blue = 0;
 8000ace:	f886 4034 	strb.w	r4, [r6, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000ad2:	f886 4035 	strb.w	r4, [r6, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000ad6:	f886 4036 	strb.w	r4, [r6, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000ada:	e886 0014 	stmia.w	r6, {r2, r4}
  hltdc.Init.VerticalSync = 9;
 8000ade:	2209      	movs	r2, #9
 8000ae0:	61b2      	str	r2, [r6, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000ae2:	2235      	movs	r2, #53	; 0x35
 8000ae4:	61f2      	str	r2, [r6, #28]
  hltdc.Init.AccumulatedActiveW = 533;
 8000ae6:	f240 2215 	movw	r2, #533	; 0x215
 8000aea:	6272      	str	r2, [r6, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000aec:	f240 121b 	movw	r2, #283	; 0x11b
 8000af0:	62b2      	str	r2, [r6, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000af2:	f240 2235 	movw	r2, #565	; 0x235
 8000af6:	62f2      	str	r2, [r6, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000af8:	f240 121d 	movw	r2, #285	; 0x11d
 8000afc:	6332      	str	r2, [r6, #48]	; 0x30
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000afe:	f002 fae1 	bl	80030c4 <HAL_LTDC_Init>
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b02:	9b01      	ldr	r3, [sp, #4]
  pLayerCfg.WindowX1 = 480;
 8000b04:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
  pLayerCfg.WindowY1 = 272;
 8000b08:	f44f 7288 	mov.w	r2, #272	; 0x110
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000b0c:	f44f 60c0 	mov.w	r0, #1536	; 0x600
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b10:	9323      	str	r3, [sp, #140]	; 0x8c
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000b12:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
  pLayerCfg.WindowX1 = 480;
 8000b16:	911c      	str	r1, [sp, #112]	; 0x70
  pLayerCfg.WindowY1 = 272;
 8000b18:	921e      	str	r2, [sp, #120]	; 0x78
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000b1a:	9022      	str	r0, [sp, #136]	; 0x88
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b1c:	4630      	mov	r0, r6
  pLayerCfg.ImageWidth = 480;
 8000b1e:	9125      	str	r1, [sp, #148]	; 0x94
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b20:	a91b      	add	r1, sp, #108	; 0x6c
  pLayerCfg.ImageHeight = 272;
 8000b22:	9226      	str	r2, [sp, #152]	; 0x98
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b24:	4622      	mov	r2, r4
  pLayerCfg.WindowX0 = 0;
 8000b26:	941b      	str	r4, [sp, #108]	; 0x6c
  pLayerCfg.WindowY0 = 0;
 8000b28:	941d      	str	r4, [sp, #116]	; 0x74
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000b2a:	941f      	str	r4, [sp, #124]	; 0x7c
  pLayerCfg.Alpha0 = 0;
 8000b2c:	9421      	str	r4, [sp, #132]	; 0x84
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000b2e:	9324      	str	r3, [sp, #144]	; 0x90
  pLayerCfg.Backcolor.Blue = 0;
 8000b30:	f88d 409c 	strb.w	r4, [sp, #156]	; 0x9c
  pLayerCfg.Backcolor.Green = 0;
 8000b34:	f88d 409d 	strb.w	r4, [sp, #157]	; 0x9d
  pLayerCfg.Backcolor.Red = 0;
 8000b38:	f88d 409e 	strb.w	r4, [sp, #158]	; 0x9e
  pLayerCfg.Alpha = 255;
 8000b3c:	f8cd b080 	str.w	fp, [sp, #128]	; 0x80
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b40:	f002 fb30 	bl	80031a4 <HAL_LTDC_ConfigLayer>
  hqspi.Instance = QUADSPI;
 8000b44:	483a      	ldr	r0, [pc, #232]	; (8000c30 <main+0x614>)
 8000b46:	4b3b      	ldr	r3, [pc, #236]	; (8000c34 <main+0x618>)
  hqspi.Init.FifoThreshold = 1;
 8000b48:	6085      	str	r5, [r0, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000b4a:	60c4      	str	r4, [r0, #12]
  hqspi.Init.FlashSize = 1;
 8000b4c:	6105      	str	r5, [r0, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000b4e:	6144      	str	r4, [r0, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000b50:	6184      	str	r4, [r0, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000b52:	61c4      	str	r4, [r0, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000b54:	6204      	str	r4, [r0, #32]
  hrtc.Instance = RTC;
 8000b56:	4e38      	ldr	r6, [pc, #224]	; (8000c38 <main+0x61c>)
  hqspi.Init.ClockPrescaler = 255;
 8000b58:	e880 0808 	stmia.w	r0, {r3, fp}
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000b5c:	f002 fbb4 	bl	80032c8 <HAL_QSPI_Init>
  RTC_TimeTypeDef sTime = {0};
 8000b60:	4621      	mov	r1, r4
 8000b62:	2218      	movs	r2, #24
 8000b64:	a814      	add	r0, sp, #80	; 0x50
 8000b66:	f014 ffe4 	bl	8015b32 <memset>
  RTC_AlarmTypeDef sAlarm = {0};
 8000b6a:	4621      	mov	r1, r4
 8000b6c:	222c      	movs	r2, #44	; 0x2c
 8000b6e:	a81b      	add	r0, sp, #108	; 0x6c
  RTC_DateTypeDef sDate = {0};
 8000b70:	9410      	str	r4, [sp, #64]	; 0x40
  RTC_AlarmTypeDef sAlarm = {0};
 8000b72:	f014 ffde 	bl	8015b32 <memset>
  hrtc.Instance = RTC;
 8000b76:	4b31      	ldr	r3, [pc, #196]	; (8000c3c <main+0x620>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b78:	4630      	mov	r0, r6
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b7a:	6134      	str	r4, [r6, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b7c:	6174      	str	r4, [r6, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b7e:	61b4      	str	r4, [r6, #24]
  hrtc.Init.SynchPrediv = 255;
 8000b80:	f8c6 b00c 	str.w	fp, [r6, #12]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b84:	e886 0018 	stmia.w	r6, {r3, r4}
  hrtc.Init.AsynchPrediv = 127;
 8000b88:	237f      	movs	r3, #127	; 0x7f
 8000b8a:	60b3      	str	r3, [r6, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b8c:	f003 f9b6 	bl	8003efc <HAL_RTC_Init>
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000b90:	462a      	mov	r2, r5
 8000b92:	a914      	add	r1, sp, #80	; 0x50
 8000b94:	4630      	mov	r0, r6
  sTime.Hours = 0x0;
 8000b96:	f88d 4050 	strb.w	r4, [sp, #80]	; 0x50
  sTime.Minutes = 0x0;
 8000b9a:	f88d 4051 	strb.w	r4, [sp, #81]	; 0x51
  sTime.Seconds = 0x0;
 8000b9e:	f88d 4052 	strb.w	r4, [sp, #82]	; 0x52
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ba2:	9418      	str	r4, [sp, #96]	; 0x60
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ba4:	9419      	str	r4, [sp, #100]	; 0x64
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ba6:	f003 fa55 	bl	8004054 <HAL_RTC_SetTime>
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000baa:	462a      	mov	r2, r5
 8000bac:	a910      	add	r1, sp, #64	; 0x40
 8000bae:	4630      	mov	r0, r6
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000bb0:	f88d 5040 	strb.w	r5, [sp, #64]	; 0x40
  sDate.Month = RTC_MONTH_JANUARY;
 8000bb4:	f88d 5041 	strb.w	r5, [sp, #65]	; 0x41
  sDate.Date = 0x1;
 8000bb8:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
  sDate.Year = 0x0;
 8000bbc:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000bc0:	f003 f9e9 	bl	8003f96 <HAL_RTC_SetDate>
  sAlarm.Alarm = RTC_ALARM_A;
 8000bc4:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000bc8:	462a      	mov	r2, r5
 8000bca:	a91b      	add	r1, sp, #108	; 0x6c
 8000bcc:	4630      	mov	r0, r6
  sAlarm.AlarmTime.Hours = 0x0;
 8000bce:	f88d 406c 	strb.w	r4, [sp, #108]	; 0x6c
  sAlarm.AlarmTime.Minutes = 0x0;
 8000bd2:	f88d 406d 	strb.w	r4, [sp, #109]	; 0x6d
  sAlarm.AlarmTime.Seconds = 0x0;
 8000bd6:	f88d 406e 	strb.w	r4, [sp, #110]	; 0x6e
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000bda:	941c      	str	r4, [sp, #112]	; 0x70
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000bdc:	941f      	str	r4, [sp, #124]	; 0x7c
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000bde:	9420      	str	r4, [sp, #128]	; 0x80
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000be0:	9421      	str	r4, [sp, #132]	; 0x84
 8000be2:	e02f      	b.n	8000c44 <main+0x628>
 8000be4:	40020800 	.word	0x40020800
 8000be8:	40021800 	.word	0x40021800
 8000bec:	40020000 	.word	0x40020000
 8000bf0:	40020400 	.word	0x40020400
 8000bf4:	200177f0 	.word	0x200177f0
 8000bf8:	40012200 	.word	0x40012200
 8000bfc:	0f000001 	.word	0x0f000001
 8000c00:	20017838 	.word	0x20017838
 8000c04:	50050000 	.word	0x50050000
 8000c08:	200179c8 	.word	0x200179c8
 8000c0c:	4002b000 	.word	0x4002b000
 8000c10:	200175f8 	.word	0x200175f8
 8000c14:	20017a88 	.word	0x20017a88
 8000c18:	a0000140 	.word	0xa0000140
 8000c1c:	40005400 	.word	0x40005400
 8000c20:	200174e8 	.word	0x200174e8
 8000c24:	40005c00 	.word	0x40005c00
 8000c28:	20017748 	.word	0x20017748
 8000c2c:	40016800 	.word	0x40016800
 8000c30:	20017abc 	.word	0x20017abc
 8000c34:	a0001000 	.word	0xa0001000
 8000c38:	200178f8 	.word	0x200178f8
 8000c3c:	40002800 	.word	0x40002800
 8000c40:	00c0eaff 	.word	0x00c0eaff
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000c44:	9422      	str	r4, [sp, #136]	; 0x88
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000c46:	9423      	str	r4, [sp, #140]	; 0x8c
  sAlarm.AlarmDateWeekDay = 0x1;
 8000c48:	f88d 5090 	strb.w	r5, [sp, #144]	; 0x90
  sAlarm.Alarm = RTC_ALARM_A;
 8000c4c:	9325      	str	r3, [sp, #148]	; 0x94
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000c4e:	f003 fa6f 	bl	8004130 <HAL_RTC_SetAlarm>
  sAlarm.Alarm = RTC_ALARM_B;
 8000c52:	f44f 7300 	mov.w	r3, #512	; 0x200
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000c56:	462a      	mov	r2, r5
 8000c58:	a91b      	add	r1, sp, #108	; 0x6c
 8000c5a:	4630      	mov	r0, r6
  sAlarm.Alarm = RTC_ALARM_B;
 8000c5c:	9325      	str	r3, [sp, #148]	; 0x94
  sAlarm.AlarmDateWeekDay = 0x1;
 8000c5e:	f88d 5090 	strb.w	r5, [sp, #144]	; 0x90
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000c62:	f003 fa65 	bl	8004130 <HAL_RTC_SetAlarm>
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000c66:	463a      	mov	r2, r7
 8000c68:	4621      	mov	r1, r4
 8000c6a:	4630      	mov	r0, r6
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c6c:	2660      	movs	r6, #96	; 0x60
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000c6e:	f003 fafd 	bl	800426c <HAL_RTCEx_SetTimeStamp>
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000c72:	48aa      	ldr	r0, [pc, #680]	; (8000f1c <main+0x900>)
 8000c74:	4baa      	ldr	r3, [pc, #680]	; (8000f20 <main+0x904>)
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000c76:	6304      	str	r4, [r0, #48]	; 0x30
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000c78:	6003      	str	r3, [r0, #0]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000c7a:	2340      	movs	r3, #64	; 0x40
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000c7c:	6044      	str	r4, [r0, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000c7e:	6343      	str	r3, [r0, #52]	; 0x34
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000c80:	4ba8      	ldr	r3, [pc, #672]	; (8000f24 <main+0x908>)
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000c82:	6384      	str	r4, [r0, #56]	; 0x38
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000c84:	61c3      	str	r3, [r0, #28]
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000c86:	2308      	movs	r3, #8
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000c88:	63c4      	str	r4, [r0, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000c8a:	6084      	str	r4, [r0, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000c8c:	6104      	str	r4, [r0, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000c8e:	6144      	str	r4, [r0, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000c90:	6184      	str	r4, [r0, #24]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000c92:	60c4      	str	r4, [r0, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000c94:	6244      	str	r4, [r0, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000c96:	6284      	str	r4, [r0, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000c98:	62c4      	str	r4, [r0, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000c9a:	6403      	str	r3, [r0, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000c9c:	6445      	str	r5, [r0, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000c9e:	6484      	str	r4, [r0, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000ca0:	64c4      	str	r4, [r0, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000ca2:	6504      	str	r4, [r0, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000ca4:	6544      	str	r4, [r0, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000ca6:	6584      	str	r4, [r0, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000ca8:	65c5      	str	r5, [r0, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000caa:	6604      	str	r4, [r0, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000cac:	f003 fb24 	bl	80042f8 <HAL_SAI_Init>
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000cb0:	489d      	ldr	r0, [pc, #628]	; (8000f28 <main+0x90c>)
 8000cb2:	4b9e      	ldr	r3, [pc, #632]	; (8000f2c <main+0x910>)
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000cb4:	6085      	str	r5, [r0, #8]
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000cb6:	6003      	str	r3, [r0, #0]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000cb8:	2340      	movs	r3, #64	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000cba:	6445      	str	r5, [r0, #68]	; 0x44
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000cbc:	6343      	str	r3, [r0, #52]	; 0x34
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000cbe:	2308      	movs	r3, #8
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000cc0:	65c5      	str	r5, [r0, #92]	; 0x5c
  hsd1.Instance = SDMMC1;
 8000cc2:	4d9b      	ldr	r5, [pc, #620]	; (8000f30 <main+0x914>)
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000cc4:	6304      	str	r4, [r0, #48]	; 0x30
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000cc6:	6384      	str	r4, [r0, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000cc8:	63c4      	str	r4, [r0, #60]	; 0x3c
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000cca:	6104      	str	r4, [r0, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000ccc:	6184      	str	r4, [r0, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000cce:	60c4      	str	r4, [r0, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000cd0:	6244      	str	r4, [r0, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000cd2:	6284      	str	r4, [r0, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000cd4:	62c4      	str	r4, [r0, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000cd6:	6403      	str	r3, [r0, #64]	; 0x40
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000cd8:	6484      	str	r4, [r0, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000cda:	64c4      	str	r4, [r0, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000cdc:	6504      	str	r4, [r0, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000cde:	6544      	str	r4, [r0, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000ce0:	6584      	str	r4, [r0, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000ce2:	6604      	str	r4, [r0, #96]	; 0x60
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000ce4:	f8c0 8004 	str.w	r8, [r0, #4]
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000ce8:	f003 fb06 	bl	80042f8 <HAL_SAI_Init>
  hsd1.Instance = SDMMC1;
 8000cec:	4b91      	ldr	r3, [pc, #580]	; (8000f34 <main+0x918>)
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000cee:	4628      	mov	r0, r5
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000cf0:	60ac      	str	r4, [r5, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000cf2:	60ec      	str	r4, [r5, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000cf4:	612c      	str	r4, [r5, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000cf6:	616c      	str	r4, [r5, #20]
  hsd1.Init.ClockDiv = 0;
 8000cf8:	61ac      	str	r4, [r5, #24]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000cfa:	e885 0018 	stmia.w	r5, {r3, r4}
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000cfe:	f003 fe0c 	bl	800491a <HAL_SD_Init>
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8000d02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d06:	4628      	mov	r0, r5
  htim1.Instance = TIM1;
 8000d08:	4d8b      	ldr	r5, [pc, #556]	; (8000f38 <main+0x91c>)
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8000d0a:	f003 fe20 	bl	800494e <HAL_SD_ConfigWideBusOperation>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d0e:	4621      	mov	r1, r4
 8000d10:	464a      	mov	r2, r9
 8000d12:	a810      	add	r0, sp, #64	; 0x40
 8000d14:	f014 ff0d 	bl	8015b32 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d18:	4621      	mov	r1, r4
 8000d1a:	221c      	movs	r2, #28
 8000d1c:	a814      	add	r0, sp, #80	; 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d1e:	940d      	str	r4, [sp, #52]	; 0x34
 8000d20:	940e      	str	r4, [sp, #56]	; 0x38
 8000d22:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d24:	f014 ff05 	bl	8015b32 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d28:	222c      	movs	r2, #44	; 0x2c
 8000d2a:	4621      	mov	r1, r4
 8000d2c:	a81b      	add	r0, sp, #108	; 0x6c
 8000d2e:	f014 ff00 	bl	8015b32 <memset>
  htim1.Instance = TIM1;
 8000d32:	4b82      	ldr	r3, [pc, #520]	; (8000f3c <main+0x920>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d34:	4628      	mov	r0, r5
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d36:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 0;
 8000d38:	60ec      	str	r4, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d3a:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d3c:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3e:	61ac      	str	r4, [r5, #24]
  htim1.Init.Prescaler = 0;
 8000d40:	e885 0018 	stmia.w	r5, {r3, r4}
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d44:	f004 f81a 	bl	8004d7c <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d48:	a910      	add	r1, sp, #64	; 0x40
 8000d4a:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d4c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d50:	f004 f90e 	bl	8004f70 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d54:	4628      	mov	r0, r5
 8000d56:	f004 f82b 	bl	8004db0 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d5a:	a90d      	add	r1, sp, #52	; 0x34
 8000d5c:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d5e:	940d      	str	r4, [sp, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d60:	940e      	str	r4, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d62:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d64:	f004 f9e2 	bl	800512c <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d68:	4622      	mov	r2, r4
 8000d6a:	a914      	add	r1, sp, #80	; 0x50
 8000d6c:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d6e:	9614      	str	r6, [sp, #80]	; 0x50
  sConfigOC.Pulse = 0;
 8000d70:	9415      	str	r4, [sp, #84]	; 0x54
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d72:	9416      	str	r4, [sp, #88]	; 0x58
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d74:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d76:	9418      	str	r4, [sp, #96]	; 0x60
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d78:	9419      	str	r4, [sp, #100]	; 0x64
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d7a:	941a      	str	r4, [sp, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d7c:	f004 fa40 	bl	8005200 <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d84:	a91b      	add	r1, sp, #108	; 0x6c
 8000d86:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d88:	941b      	str	r4, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d8a:	9320      	str	r3, [sp, #128]	; 0x80
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d90:	941c      	str	r4, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d92:	9323      	str	r3, [sp, #140]	; 0x8c
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d94:	941d      	str	r4, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d96:	941e      	str	r4, [sp, #120]	; 0x78
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d98:	941f      	str	r4, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d9a:	9421      	str	r4, [sp, #132]	; 0x84
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d9c:	9422      	str	r4, [sp, #136]	; 0x88
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d9e:	9424      	str	r4, [sp, #144]	; 0x90
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000da0:	9425      	str	r4, [sp, #148]	; 0x94
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000da2:	f004 f9e9 	bl	8005178 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 8000da6:	4628      	mov	r0, r5
  htim2.Instance = TIM2;
 8000da8:	4d65      	ldr	r5, [pc, #404]	; (8000f40 <main+0x924>)
  HAL_TIM_MspPostInit(&htim1);
 8000daa:	f000 fc87 	bl	80016bc <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dae:	4621      	mov	r1, r4
 8000db0:	464a      	mov	r2, r9
 8000db2:	a814      	add	r0, sp, #80	; 0x50
 8000db4:	f014 febd 	bl	8015b32 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000db8:	221c      	movs	r2, #28
 8000dba:	4621      	mov	r1, r4
 8000dbc:	a81b      	add	r0, sp, #108	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dbe:	9410      	str	r4, [sp, #64]	; 0x40
 8000dc0:	9411      	str	r4, [sp, #68]	; 0x44
 8000dc2:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dc4:	f014 feb5 	bl	8015b32 <memset>
  htim2.Instance = TIM2;
 8000dc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dcc:	4628      	mov	r0, r5
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dce:	60ac      	str	r4, [r5, #8]
  htim2.Init.Period = 0;
 8000dd0:	60ec      	str	r4, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd2:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd4:	61ac      	str	r4, [r5, #24]
  htim2.Init.Prescaler = 0;
 8000dd6:	e885 0018 	stmia.w	r5, {r3, r4}
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dda:	f003 ffcf 	bl	8004d7c <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dde:	a914      	add	r1, sp, #80	; 0x50
 8000de0:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000de2:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000de6:	f004 f8c3 	bl	8004f70 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000dea:	4628      	mov	r0, r5
 8000dec:	f003 ffe0 	bl	8004db0 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000df0:	a910      	add	r1, sp, #64	; 0x40
 8000df2:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df4:	9410      	str	r4, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df6:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000df8:	f004 f998 	bl	800512c <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dfc:	4622      	mov	r2, r4
 8000dfe:	a91b      	add	r1, sp, #108	; 0x6c
 8000e00:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e02:	961b      	str	r6, [sp, #108]	; 0x6c
  sConfigOC.Pulse = 0;
 8000e04:	941c      	str	r4, [sp, #112]	; 0x70
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e06:	941d      	str	r4, [sp, #116]	; 0x74
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e08:	941f      	str	r4, [sp, #124]	; 0x7c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e0a:	f004 f9f9 	bl	8005200 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim2);
 8000e0e:	4628      	mov	r0, r5
  htim3.Instance = TIM3;
 8000e10:	4d4c      	ldr	r5, [pc, #304]	; (8000f44 <main+0x928>)
  HAL_TIM_MspPostInit(&htim2);
 8000e12:	f000 fc53 	bl	80016bc <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e16:	4621      	mov	r1, r4
 8000e18:	464a      	mov	r2, r9
 8000e1a:	a814      	add	r0, sp, #80	; 0x50
 8000e1c:	f014 fe89 	bl	8015b32 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e20:	221c      	movs	r2, #28
 8000e22:	4621      	mov	r1, r4
 8000e24:	a81b      	add	r0, sp, #108	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e26:	9410      	str	r4, [sp, #64]	; 0x40
 8000e28:	9411      	str	r4, [sp, #68]	; 0x44
 8000e2a:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e2c:	f014 fe81 	bl	8015b32 <memset>
  htim3.Instance = TIM3;
 8000e30:	4b45      	ldr	r3, [pc, #276]	; (8000f48 <main+0x92c>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e32:	4628      	mov	r0, r5
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e34:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 0;
 8000e36:	60ec      	str	r4, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e38:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e3a:	61ac      	str	r4, [r5, #24]
  htim3.Init.Prescaler = 0;
 8000e3c:	e885 0018 	stmia.w	r5, {r3, r4}
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e40:	f003 ff9c 	bl	8004d7c <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e44:	a914      	add	r1, sp, #80	; 0x50
 8000e46:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e48:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e4c:	f004 f890 	bl	8004f70 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e50:	4628      	mov	r0, r5
 8000e52:	f003 ffad 	bl	8004db0 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e56:	a910      	add	r1, sp, #64	; 0x40
 8000e58:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e5a:	9410      	str	r4, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e5c:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e5e:	f004 f965 	bl	800512c <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e62:	4622      	mov	r2, r4
 8000e64:	a91b      	add	r1, sp, #108	; 0x6c
 8000e66:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e68:	961b      	str	r6, [sp, #108]	; 0x6c
  sConfigOC.Pulse = 0;
 8000e6a:	941c      	str	r4, [sp, #112]	; 0x70
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e6c:	941d      	str	r4, [sp, #116]	; 0x74
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e6e:	941f      	str	r4, [sp, #124]	; 0x7c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e70:	f004 f9c6 	bl	8005200 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 8000e74:	4628      	mov	r0, r5
  htim5.Instance = TIM5;
 8000e76:	4d35      	ldr	r5, [pc, #212]	; (8000f4c <main+0x930>)
  HAL_TIM_MspPostInit(&htim3);
 8000e78:	f000 fc20 	bl	80016bc <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e7c:	4621      	mov	r1, r4
 8000e7e:	464a      	mov	r2, r9
 8000e80:	a814      	add	r0, sp, #80	; 0x50
 8000e82:	f014 fe56 	bl	8015b32 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e86:	221c      	movs	r2, #28
 8000e88:	4621      	mov	r1, r4
 8000e8a:	a81b      	add	r0, sp, #108	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e8c:	9410      	str	r4, [sp, #64]	; 0x40
 8000e8e:	9411      	str	r4, [sp, #68]	; 0x44
 8000e90:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e92:	f014 fe4e 	bl	8015b32 <memset>
  htim5.Instance = TIM5;
 8000e96:	4b2e      	ldr	r3, [pc, #184]	; (8000f50 <main+0x934>)
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000e98:	4628      	mov	r0, r5
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9a:	60ac      	str	r4, [r5, #8]
  htim5.Init.Period = 0;
 8000e9c:	60ec      	str	r4, [r5, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9e:	612c      	str	r4, [r5, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea0:	61ac      	str	r4, [r5, #24]
  htim5.Init.Prescaler = 0;
 8000ea2:	e885 0018 	stmia.w	r5, {r3, r4}
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000ea6:	f003 ff69 	bl	8004d7c <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000eaa:	a914      	add	r1, sp, #80	; 0x50
 8000eac:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eae:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000eb2:	f004 f85d 	bl	8004f70 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000eb6:	4628      	mov	r0, r5
 8000eb8:	f003 ff7a 	bl	8004db0 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ebc:	a910      	add	r1, sp, #64	; 0x40
 8000ebe:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec0:	9410      	str	r4, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec2:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ec4:	f004 f932 	bl	800512c <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ec8:	220c      	movs	r2, #12
 8000eca:	a91b      	add	r1, sp, #108	; 0x6c
 8000ecc:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ece:	961b      	str	r6, [sp, #108]	; 0x6c
  sConfigOC.Pulse = 0;
 8000ed0:	941c      	str	r4, [sp, #112]	; 0x70
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ed2:	941d      	str	r4, [sp, #116]	; 0x74
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ed4:	941f      	str	r4, [sp, #124]	; 0x7c
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ed6:	f004 f993 	bl	8005200 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim5);
 8000eda:	4628      	mov	r0, r5
  htim8.Instance = TIM8;
 8000edc:	4d1d      	ldr	r5, [pc, #116]	; (8000f54 <main+0x938>)
  HAL_TIM_MspPostInit(&htim5);
 8000ede:	f000 fbed 	bl	80016bc <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ee2:	464a      	mov	r2, r9
 8000ee4:	4621      	mov	r1, r4
 8000ee6:	a81b      	add	r0, sp, #108	; 0x6c
 8000ee8:	f014 fe23 	bl	8015b32 <memset>
  htim8.Instance = TIM8;
 8000eec:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <main+0x93c>)
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000eee:	4628      	mov	r0, r5
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef0:	60ac      	str	r4, [r5, #8]
  htim8.Init.Period = 0;
 8000ef2:	60ec      	str	r4, [r5, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef4:	612c      	str	r4, [r5, #16]
  htim8.Init.RepetitionCounter = 0;
 8000ef6:	616c      	str	r4, [r5, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef8:	61ac      	str	r4, [r5, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000efa:	9414      	str	r4, [sp, #80]	; 0x50
 8000efc:	9415      	str	r4, [sp, #84]	; 0x54
 8000efe:	9416      	str	r4, [sp, #88]	; 0x58
  htim8.Init.Prescaler = 0;
 8000f00:	e885 0018 	stmia.w	r5, {r3, r4}
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000f04:	f003 ff3a 	bl	8004d7c <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000f08:	a91b      	add	r1, sp, #108	; 0x6c
 8000f0a:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f0c:	f8cd a06c 	str.w	sl, [sp, #108]	; 0x6c
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000f10:	f004 f82e 	bl	8004f70 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000f14:	a914      	add	r1, sp, #80	; 0x50
 8000f16:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f18:	9414      	str	r4, [sp, #80]	; 0x50
 8000f1a:	e01f      	b.n	8000f5c <main+0x940>
 8000f1c:	20017574 	.word	0x20017574
 8000f20:	40015c04 	.word	0x40015c04
 8000f24:	0002ee00 	.word	0x0002ee00
 8000f28:	20017464 	.word	0x20017464
 8000f2c:	40015c24 	.word	0x40015c24
 8000f30:	20017644 	.word	0x20017644
 8000f34:	40012c00 	.word	0x40012c00
 8000f38:	20017918 	.word	0x20017918
 8000f3c:	40010000 	.word	0x40010000
 8000f40:	20017a08 	.word	0x20017a08
 8000f44:	20017708 	.word	0x20017708
 8000f48:	40000400 	.word	0x40000400
 8000f4c:	200176c8 	.word	0x200176c8
 8000f50:	40000c00 	.word	0x40000c00
 8000f54:	20017534 	.word	0x20017534
 8000f58:	40010400 	.word	0x40010400
  htim12.Instance = TIM12;
 8000f5c:	4d2a      	ldr	r5, [pc, #168]	; (8001008 <main+0x9ec>)
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f5e:	9415      	str	r4, [sp, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f60:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000f62:	f004 f8e3 	bl	800512c <HAL_TIMEx_MasterConfigSynchronization>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f66:	4621      	mov	r1, r4
 8000f68:	221c      	movs	r2, #28
 8000f6a:	a81b      	add	r0, sp, #108	; 0x6c
 8000f6c:	f014 fde1 	bl	8015b32 <memset>
  htim12.Instance = TIM12;
 8000f70:	4b26      	ldr	r3, [pc, #152]	; (800100c <main+0x9f0>)
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000f72:	4628      	mov	r0, r5
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f74:	60ac      	str	r4, [r5, #8]
  htim12.Init.Period = 0;
 8000f76:	60ec      	str	r4, [r5, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f78:	612c      	str	r4, [r5, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f7a:	61ac      	str	r4, [r5, #24]
  htim12.Init.Prescaler = 0;
 8000f7c:	e885 0018 	stmia.w	r5, {r3, r4}
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000f80:	f003 ff16 	bl	8004db0 <HAL_TIM_PWM_Init>
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f84:	4622      	mov	r2, r4
 8000f86:	a91b      	add	r1, sp, #108	; 0x6c
 8000f88:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f8a:	961b      	str	r6, [sp, #108]	; 0x6c
  huart1.Init.BaudRate = 115200;
 8000f8c:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
  sConfigOC.Pulse = 0;
 8000f90:	941c      	str	r4, [sp, #112]	; 0x70
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f92:	941d      	str	r4, [sp, #116]	; 0x74
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f94:	941f      	str	r4, [sp, #124]	; 0x7c
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f96:	f004 f933 	bl	8005200 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim12);
 8000f9a:	4628      	mov	r0, r5
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f9c:	250c      	movs	r5, #12
  HAL_TIM_MspPostInit(&htim12);
 8000f9e:	f000 fb8d 	bl	80016bc <HAL_TIM_MspPostInit>
  huart1.Instance = USART1;
 8000fa2:	481b      	ldr	r0, [pc, #108]	; (8001010 <main+0x9f4>)
  huart1.Init.BaudRate = 115200;
 8000fa4:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <main+0x9f8>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fa6:	6084      	str	r4, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fa8:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000faa:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fac:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fae:	61c4      	str	r4, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fb0:	6204      	str	r4, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fb2:	6244      	str	r4, [r0, #36]	; 0x24
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fb4:	6145      	str	r5, [r0, #20]
  huart1.Init.BaudRate = 115200;
 8000fb6:	e880 0048 	stmia.w	r0, {r3, r6}
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fba:	f004 fb98 	bl	80056ee <HAL_UART_Init>
  huart6.Instance = USART6;
 8000fbe:	4816      	ldr	r0, [pc, #88]	; (8001018 <main+0x9fc>)
 8000fc0:	4b16      	ldr	r3, [pc, #88]	; (800101c <main+0xa00>)
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000fc2:	6084      	str	r4, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000fc4:	60c4      	str	r4, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000fc6:	6104      	str	r4, [r0, #16]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fc8:	6184      	str	r4, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fca:	61c4      	str	r4, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fcc:	6204      	str	r4, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fce:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000fd0:	2408      	movs	r4, #8
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000fd2:	6145      	str	r5, [r0, #20]
  huart6.Init.BaudRate = 115200;
 8000fd4:	e880 0048 	stmia.w	r0, {r3, r6}
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000fd8:	f004 fb89 	bl	80056ee <HAL_UART_Init>
 8000fdc:	3c01      	subs	r4, #1
      HAL_Delay(50);
 8000fde:	2032      	movs	r0, #50	; 0x32
 8000fe0:	f000 fdb4 	bl	8001b4c <HAL_Delay>
  for (i = 0; i < 8; i++) {
 8000fe4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8000fe8:	d1f8      	bne.n	8000fdc <main+0x9c0>
  lv_init();
 8000fea:	f007 fe17 	bl	8008c1c <lv_init>
  tft_init();
 8000fee:	f005 fca1 	bl	8006934 <tft_init>
  touchpad_init();
 8000ff2:	f005 fe71 	bl	8006cd8 <touchpad_init>
  demo_create();
 8000ff6:	f005 ff23 	bl	8006e40 <demo_create>
      HAL_Delay(5);
 8000ffa:	2005      	movs	r0, #5
 8000ffc:	f000 fda6 	bl	8001b4c <HAL_Delay>
      lv_task_handler();
 8001000:	f00d f844 	bl	800e08c <lv_task_handler>
 8001004:	e7f9      	b.n	8000ffa <main+0x9de>
 8001006:	bf00      	nop
 8001008:	20017a48 	.word	0x20017a48
 800100c:	40001800 	.word	0x40001800
 8001010:	20017888 	.word	0x20017888
 8001014:	40011000 	.word	0x40011000
 8001018:	20017958 	.word	0x20017958
 800101c:	40011400 	.word	0x40011400

08001020 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001020:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001022:	6802      	ldr	r2, [r0, #0]
{
 8001024:	4605      	mov	r5, r0
  if (htim->Instance == TIM6) {
 8001026:	4c07      	ldr	r4, [pc, #28]	; (8001044 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001028:	42a2      	cmp	r2, r4
 800102a:	d101      	bne.n	8001030 <HAL_TIM_PeriodElapsedCallback+0x10>
    HAL_IncTick();
 800102c:	f000 fd7c 	bl	8001b28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM6) {
 8001030:	682b      	ldr	r3, [r5, #0]
 8001032:	42a3      	cmp	r3, r4
 8001034:	d104      	bne.n	8001040 <HAL_TIM_PeriodElapsedCallback+0x20>
    lv_tick_inc(1);
 8001036:	2001      	movs	r0, #1
  }
  /* USER CODE END Callback 1 */
}
 8001038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_tick_inc(1);
 800103c:	f00c ba5c 	b.w	800d4f8 <lv_tick_inc>
 8001040:	bd38      	pop	{r3, r4, r5, pc}
 8001042:	bf00      	nop
 8001044:	40001000 	.word	0x40001000

08001048 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001048:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <HAL_MspInit+0x2c>)
{
 800104a:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 800104c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800104e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001052:	641a      	str	r2, [r3, #64]	; 0x40
 8001054:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001056:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800105a:	9200      	str	r2, [sp, #0]
 800105c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001060:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001064:	645a      	str	r2, [r3, #68]	; 0x44
 8001066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001068:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800106c:	9301      	str	r3, [sp, #4]
 800106e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001070:	b002      	add	sp, #8
 8001072:	4770      	bx	lr
 8001074:	40023800 	.word	0x40023800

08001078 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001078:	b510      	push	{r4, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107e:	2214      	movs	r2, #20
 8001080:	2100      	movs	r1, #0
 8001082:	a803      	add	r0, sp, #12
 8001084:	f014 fd55 	bl	8015b32 <memset>
  if(hadc->Instance==ADC3)
 8001088:	6822      	ldr	r2, [r4, #0]
 800108a:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <HAL_ADC_MspInit+0x7c>)
 800108c:	429a      	cmp	r2, r3
 800108e:	d12e      	bne.n	80010ee <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001090:	f503 338b 	add.w	r3, r3, #71168	; 0x11600
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001094:	2403      	movs	r4, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001096:	a903      	add	r1, sp, #12
 8001098:	4817      	ldr	r0, [pc, #92]	; (80010f8 <HAL_ADC_MspInit+0x80>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 800109a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800109c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80010a0:	645a      	str	r2, [r3, #68]	; 0x44
 80010a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010a4:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80010a8:	9200      	str	r2, [sp, #0]
 80010aa:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010ae:	f042 0220 	orr.w	r2, r2, #32
 80010b2:	631a      	str	r2, [r3, #48]	; 0x30
 80010b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010b6:	f002 0220 	and.w	r2, r2, #32
 80010ba:	9201      	str	r2, [sp, #4]
 80010bc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010c0:	f042 0201 	orr.w	r2, r2, #1
 80010c4:	631a      	str	r2, [r3, #48]	; 0x30
 80010c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010c8:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	9302      	str	r3, [sp, #8]
 80010d0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 80010d2:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80010d6:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010d8:	f001 fa62 	bl	80025a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80010dc:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80010de:	a903      	add	r1, sp, #12
 80010e0:	4806      	ldr	r0, [pc, #24]	; (80010fc <HAL_ADC_MspInit+0x84>)
    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80010e2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010e6:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80010ea:	f001 fa59 	bl	80025a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80010ee:	b008      	add	sp, #32
 80010f0:	bd10      	pop	{r4, pc}
 80010f2:	bf00      	nop
 80010f4:	40012200 	.word	0x40012200
 80010f8:	40021400 	.word	0x40021400
 80010fc:	40020000 	.word	0x40020000

08001100 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001100:	b570      	push	{r4, r5, r6, lr}
 8001102:	b08c      	sub	sp, #48	; 0x30
 8001104:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001106:	2214      	movs	r2, #20
 8001108:	2100      	movs	r1, #0
 800110a:	a807      	add	r0, sp, #28
 800110c:	f014 fd11 	bl	8015b32 <memset>
  if(hdcmi->Instance==DCMI)
 8001110:	6822      	ldr	r2, [r4, #0]
 8001112:	4b38      	ldr	r3, [pc, #224]	; (80011f4 <HAL_DCMI_MspInit+0xf4>)
 8001114:	429a      	cmp	r2, r3
 8001116:	d16b      	bne.n	80011f0 <HAL_DCMI_MspInit+0xf0>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001118:	4b37      	ldr	r3, [pc, #220]	; (80011f8 <HAL_DCMI_MspInit+0xf8>)
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800111c:	250d      	movs	r5, #13
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800111e:	a907      	add	r1, sp, #28
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001120:	6b5a      	ldr	r2, [r3, #52]	; 0x34

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001124:	4835      	ldr	r0, [pc, #212]	; (80011fc <HAL_DCMI_MspInit+0xfc>)
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001126:	f042 0201 	orr.w	r2, r2, #1
 800112a:	635a      	str	r2, [r3, #52]	; 0x34
 800112c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800112e:	f002 0201 	and.w	r2, r2, #1
 8001132:	9201      	str	r2, [sp, #4]
 8001134:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001136:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001138:	f042 0210 	orr.w	r2, r2, #16
 800113c:	631a      	str	r2, [r3, #48]	; 0x30
 800113e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001140:	f002 0210 	and.w	r2, r2, #16
 8001144:	9202      	str	r2, [sp, #8]
 8001146:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001148:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800114a:	f042 0208 	orr.w	r2, r2, #8
 800114e:	631a      	str	r2, [r3, #48]	; 0x30
 8001150:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001152:	f002 0208 	and.w	r2, r2, #8
 8001156:	9203      	str	r2, [sp, #12]
 8001158:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800115a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800115c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001160:	631a      	str	r2, [r3, #48]	; 0x30
 8001162:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001164:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001168:	9204      	str	r2, [sp, #16]
 800116a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800116c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800116e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001172:	631a      	str	r2, [r3, #48]	; 0x30
 8001174:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001176:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800117a:	9205      	str	r2, [sp, #20]
 800117c:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001180:	f042 0201 	orr.w	r2, r2, #1
 8001184:	631a      	str	r2, [r3, #48]	; 0x30
 8001186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	9306      	str	r3, [sp, #24]
 8001190:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001192:	2360      	movs	r3, #96	; 0x60
 8001194:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001196:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001198:	f001 fa02 	bl	80025a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800119c:	2308      	movs	r3, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800119e:	a907      	add	r1, sp, #28
 80011a0:	4817      	ldr	r0, [pc, #92]	; (8001200 <HAL_DCMI_MspInit+0x100>)
    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80011a2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a4:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a8:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80011aa:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80011ac:	f001 f9f8 	bl	80025a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80011b0:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80011b4:	a907      	add	r1, sp, #28
 80011b6:	4813      	ldr	r0, [pc, #76]	; (8001204 <HAL_DCMI_MspInit+0x104>)
    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80011b8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ba:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80011c0:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80011c2:	f001 f9ed 	bl	80025a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 80011c6:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011ca:	a907      	add	r1, sp, #28
 80011cc:	480e      	ldr	r0, [pc, #56]	; (8001208 <HAL_DCMI_MspInit+0x108>)
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 80011ce:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d0:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80011d6:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011d8:	f001 f9e2 	bl	80025a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80011dc:	2350      	movs	r3, #80	; 0x50
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011de:	a907      	add	r1, sp, #28
 80011e0:	480a      	ldr	r0, [pc, #40]	; (800120c <HAL_DCMI_MspInit+0x10c>)
    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80011e2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e4:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80011ea:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	f001 f9d8 	bl	80025a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80011f0:	b00c      	add	sp, #48	; 0x30
 80011f2:	bd70      	pop	{r4, r5, r6, pc}
 80011f4:	50050000 	.word	0x50050000
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40021000 	.word	0x40021000
 8001200:	40020c00 	.word	0x40020c00
 8001204:	40021800 	.word	0x40021800
 8001208:	40021c00 	.word	0x40021c00
 800120c:	40020000 	.word	0x40020000

08001210 <HAL_DMA2D_MspInit>:
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{

  if(hdma2d->Instance==DMA2D)
 8001210:	6802      	ldr	r2, [r0, #0]
{
 8001212:	b082      	sub	sp, #8
  if(hdma2d->Instance==DMA2D)
 8001214:	4b07      	ldr	r3, [pc, #28]	; (8001234 <HAL_DMA2D_MspInit+0x24>)
 8001216:	429a      	cmp	r2, r3
 8001218:	d10a      	bne.n	8001230 <HAL_DMA2D_MspInit+0x20>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800121a:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
 800121e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001220:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001224:	631a      	str	r2, [r3, #48]	; 0x30
 8001226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001228:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001230:	b002      	add	sp, #8
 8001232:	4770      	bx	lr
 8001234:	4002b000 	.word	0x4002b000

08001238 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001238:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123a:	2214      	movs	r2, #20
{
 800123c:	b08a      	sub	sp, #40	; 0x28
 800123e:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	2100      	movs	r1, #0
 8001242:	eb0d 0002 	add.w	r0, sp, r2
 8001246:	f014 fc74 	bl	8015b32 <memset>
  if(hi2c->Instance==I2C1)
 800124a:	6823      	ldr	r3, [r4, #0]
 800124c:	4a25      	ldr	r2, [pc, #148]	; (80012e4 <HAL_I2C_MspInit+0xac>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d121      	bne.n	8001296 <HAL_I2C_MspInit+0x5e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001252:	4c25      	ldr	r4, [pc, #148]	; (80012e8 <HAL_I2C_MspInit+0xb0>)
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001254:	a905      	add	r1, sp, #20
 8001256:	4825      	ldr	r0, [pc, #148]	; (80012ec <HAL_I2C_MspInit+0xb4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001258:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800125a:	f043 0302 	orr.w	r3, r3, #2
 800125e:	6323      	str	r3, [r4, #48]	; 0x30
 8001260:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	9301      	str	r3, [sp, #4]
 8001268:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800126a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800126e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001270:	2312      	movs	r3, #18
 8001272:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001274:	2301      	movs	r3, #1
 8001276:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001278:	2304      	movs	r3, #4
 800127a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127c:	f001 f990 	bl	80025a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001280:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001282:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001286:	6423      	str	r3, [r4, #64]	; 0x40
 8001288:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800128a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800128e:	9302      	str	r3, [sp, #8]
 8001290:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001292:	b00a      	add	sp, #40	; 0x28
 8001294:	bd10      	pop	{r4, pc}
  else if(hi2c->Instance==I2C3)
 8001296:	4a16      	ldr	r2, [pc, #88]	; (80012f0 <HAL_I2C_MspInit+0xb8>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d1fa      	bne.n	8001292 <HAL_I2C_MspInit+0x5a>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800129c:	4c12      	ldr	r4, [pc, #72]	; (80012e8 <HAL_I2C_MspInit+0xb0>)
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800129e:	a905      	add	r1, sp, #20
 80012a0:	4814      	ldr	r0, [pc, #80]	; (80012f4 <HAL_I2C_MspInit+0xbc>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80012a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80012a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012a8:	6323      	str	r3, [r4, #48]	; 0x30
 80012aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80012ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012b0:	9303      	str	r3, [sp, #12]
 80012b2:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80012b4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80012b8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ba:	2312      	movs	r3, #18
 80012bc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012be:	2301      	movs	r3, #1
 80012c0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c2:	2303      	movs	r3, #3
 80012c4:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80012c6:	2304      	movs	r3, #4
 80012c8:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012ca:	f001 f969 	bl	80025a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80012ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012d4:	6423      	str	r3, [r4, #64]	; 0x40
 80012d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012dc:	9304      	str	r3, [sp, #16]
 80012de:	9b04      	ldr	r3, [sp, #16]
}
 80012e0:	e7d7      	b.n	8001292 <HAL_I2C_MspInit+0x5a>
 80012e2:	bf00      	nop
 80012e4:	40005400 	.word	0x40005400
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40020400 	.word	0x40020400
 80012f0:	40005c00 	.word	0x40005c00
 80012f4:	40021c00 	.word	0x40021c00

080012f8 <HAL_I2C_MspDeInit>:
*/

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{

  if(hi2c->Instance==I2C1)
 80012f8:	6803      	ldr	r3, [r0, #0]
 80012fa:	4a0e      	ldr	r2, [pc, #56]	; (8001334 <HAL_I2C_MspDeInit+0x3c>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d10a      	bne.n	8001316 <HAL_I2C_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001300:	f502 32f2 	add.w	r2, r2, #123904	; 0x1e400
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin);
 8001304:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001308:	480b      	ldr	r0, [pc, #44]	; (8001338 <HAL_I2C_MspDeInit+0x40>)
    __HAL_RCC_I2C1_CLK_DISABLE();
 800130a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800130c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001310:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C3 GPIO Configuration    
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA 
    */
    HAL_GPIO_DeInit(GPIOH, LCD_SCL_Pin|LCD_SDA_Pin);
 8001312:	f001 ba2f 	b.w	8002774 <HAL_GPIO_DeInit>
  else if(hi2c->Instance==I2C3)
 8001316:	4a09      	ldr	r2, [pc, #36]	; (800133c <HAL_I2C_MspDeInit+0x44>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d109      	bne.n	8001330 <HAL_I2C_MspDeInit+0x38>
    __HAL_RCC_I2C3_CLK_DISABLE();
 800131c:	f502 32ee 	add.w	r2, r2, #121856	; 0x1dc00
    HAL_GPIO_DeInit(GPIOH, LCD_SCL_Pin|LCD_SDA_Pin);
 8001320:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001324:	4806      	ldr	r0, [pc, #24]	; (8001340 <HAL_I2C_MspDeInit+0x48>)
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001326:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001328:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800132c:	6413      	str	r3, [r2, #64]	; 0x40
 800132e:	e7f0      	b.n	8001312 <HAL_I2C_MspDeInit+0x1a>
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	40005400 	.word	0x40005400
 8001338:	40020400 	.word	0x40020400
 800133c:	40005c00 	.word	0x40005c00
 8001340:	40021c00 	.word	0x40021c00

08001344 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001344:	b570      	push	{r4, r5, r6, lr}
 8001346:	b08c      	sub	sp, #48	; 0x30
 8001348:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134a:	2214      	movs	r2, #20
 800134c:	2100      	movs	r1, #0
 800134e:	a807      	add	r0, sp, #28
 8001350:	f014 fbef 	bl	8015b32 <memset>
  if(hltdc->Instance==LTDC)
 8001354:	6822      	ldr	r2, [r4, #0]
 8001356:	4b3a      	ldr	r3, [pc, #232]	; (8001440 <HAL_LTDC_MspInit+0xfc>)
 8001358:	429a      	cmp	r2, r3
 800135a:	d16e      	bne.n	800143a <HAL_LTDC_MspInit+0xf6>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800135c:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001360:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001362:	260e      	movs	r6, #14
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001364:	a907      	add	r1, sp, #28
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001366:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2400      	movs	r4, #0
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800136a:	4836      	ldr	r0, [pc, #216]	; (8001444 <HAL_LTDC_MspInit+0x100>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 800136c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001370:	645a      	str	r2, [r3, #68]	; 0x44
 8001372:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001374:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8001378:	9201      	str	r2, [sp, #4]
 800137a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800137c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800137e:	f042 0210 	orr.w	r2, r2, #16
 8001382:	631a      	str	r2, [r3, #48]	; 0x30
 8001384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001386:	f002 0210 	and.w	r2, r2, #16
 800138a:	9202      	str	r2, [sp, #8]
 800138c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800138e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001390:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001394:	631a      	str	r2, [r3, #48]	; 0x30
 8001396:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001398:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800139c:	9203      	str	r2, [sp, #12]
 800139e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80013a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80013a6:	631a      	str	r2, [r3, #48]	; 0x30
 80013a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013aa:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80013ae:	9204      	str	r2, [sp, #16]
 80013b0:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80013b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013b8:	631a      	str	r2, [r3, #48]	; 0x30
 80013ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013bc:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80013c0:	9205      	str	r2, [sp, #20]
 80013c2:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80013c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013ca:	631a      	str	r2, [r3, #48]	; 0x30
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80013d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d4:	9306      	str	r3, [sp, #24]
 80013d6:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80013d8:	2310      	movs	r3, #16
 80013da:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013dc:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80013de:	f001 f8df 	bl	80025a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 80013e2:	f64e 73ff 	movw	r3, #61439	; 0xefff
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80013e6:	a907      	add	r1, sp, #28
 80013e8:	4817      	ldr	r0, [pc, #92]	; (8001448 <HAL_LTDC_MspInit+0x104>)
    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 80013ea:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ec:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f0:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013f2:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80013f4:	f001 f8d4 	bl	80025a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 80013f8:	23f7      	movs	r3, #247	; 0xf7
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80013fa:	a907      	add	r1, sp, #28
 80013fc:	4813      	ldr	r0, [pc, #76]	; (800144c <HAL_LTDC_MspInit+0x108>)
    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 80013fe:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001406:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001408:	f001 f8ca 	bl	80025a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800140c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001410:	a907      	add	r1, sp, #28
 8001412:	480f      	ldr	r0, [pc, #60]	; (8001450 <HAL_LTDC_MspInit+0x10c>)
    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001414:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001416:	2309      	movs	r3, #9
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800141a:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141e:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001420:	f001 f8be 	bl	80025a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001424:	f44f 4346 	mov.w	r3, #50688	; 0xc600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001428:	a907      	add	r1, sp, #28
 800142a:	480a      	ldr	r0, [pc, #40]	; (8001454 <HAL_LTDC_MspInit+0x110>)
    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800142c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001434:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001436:	f001 f8b3 	bl	80025a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800143a:	b00c      	add	sp, #48	; 0x30
 800143c:	bd70      	pop	{r4, r5, r6, pc}
 800143e:	bf00      	nop
 8001440:	40016800 	.word	0x40016800
 8001444:	40021000 	.word	0x40021000
 8001448:	40022400 	.word	0x40022400
 800144c:	40022800 	.word	0x40022800
 8001450:	40021800 	.word	0x40021800
 8001454:	40022000 	.word	0x40022000

08001458 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	2214      	movs	r2, #20
{
 800145e:	b08a      	sub	sp, #40	; 0x28
 8001460:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001462:	2100      	movs	r1, #0
 8001464:	eb0d 0002 	add.w	r0, sp, r2
 8001468:	f014 fb63 	bl	8015b32 <memset>
  if(hqspi->Instance==QUADSPI)
 800146c:	6822      	ldr	r2, [r4, #0]
 800146e:	4b2d      	ldr	r3, [pc, #180]	; (8001524 <HAL_QSPI_MspInit+0xcc>)
 8001470:	429a      	cmp	r2, r3
 8001472:	d153      	bne.n	800151c <HAL_QSPI_MspInit+0xc4>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001474:	4b2c      	ldr	r3, [pc, #176]	; (8001528 <HAL_QSPI_MspInit+0xd0>)
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001476:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001478:	2403      	movs	r4, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800147a:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 800147c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800147e:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001482:	a905      	add	r1, sp, #20
 8001484:	4829      	ldr	r0, [pc, #164]	; (800152c <HAL_QSPI_MspInit+0xd4>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001486:	f042 0202 	orr.w	r2, r2, #2

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2700      	movs	r7, #0
    __HAL_RCC_QSPI_CLK_ENABLE();
 800148c:	639a      	str	r2, [r3, #56]	; 0x38
 800148e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001490:	f002 0202 	and.w	r2, r2, #2
 8001494:	9201      	str	r2, [sp, #4]
 8001496:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001498:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800149a:	f042 0210 	orr.w	r2, r2, #16
 800149e:	631a      	str	r2, [r3, #48]	; 0x30
 80014a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014a2:	f002 0210 	and.w	r2, r2, #16
 80014a6:	9202      	str	r2, [sp, #8]
 80014a8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014ac:	f042 0202 	orr.w	r2, r2, #2
 80014b0:	631a      	str	r2, [r3, #48]	; 0x30
 80014b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014b4:	f002 0202 	and.w	r2, r2, #2
 80014b8:	9203      	str	r2, [sp, #12]
 80014ba:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014be:	f042 0208 	orr.w	r2, r2, #8
 80014c2:	631a      	str	r2, [r3, #48]	; 0x30
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80014c6:	f8cd 8014 	str.w	r8, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ca:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ce:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d0:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d2:	9304      	str	r3, [sp, #16]
 80014d4:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80014d6:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80014d8:	f001 f862 	bl	80025a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80014dc:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80014de:	a905      	add	r1, sp, #20
 80014e0:	4813      	ldr	r0, [pc, #76]	; (8001530 <HAL_QSPI_MspInit+0xd8>)
    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80014e2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80014e4:	230a      	movs	r3, #10
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e6:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80014e8:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ec:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80014ee:	f001 f857 	bl	80025a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f2:	a905      	add	r1, sp, #20
 80014f4:	480e      	ldr	r0, [pc, #56]	; (8001530 <HAL_QSPI_MspInit+0xd8>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014f6:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fe:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001500:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001502:	f001 f84d 	bl	80025a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001506:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800150a:	a905      	add	r1, sp, #20
 800150c:	4809      	ldr	r0, [pc, #36]	; (8001534 <HAL_QSPI_MspInit+0xdc>)
    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800150e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001510:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001514:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001516:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001518:	f001 f842 	bl	80025a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800151c:	b00a      	add	sp, #40	; 0x28
 800151e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001522:	bf00      	nop
 8001524:	a0001000 	.word	0xa0001000
 8001528:	40023800 	.word	0x40023800
 800152c:	40021000 	.word	0x40021000
 8001530:	40020400 	.word	0x40020400
 8001534:	40020c00 	.word	0x40020c00

08001538 <HAL_RTC_MspInit>:
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{

  if(hrtc->Instance==RTC)
 8001538:	6802      	ldr	r2, [r0, #0]
 800153a:	4b04      	ldr	r3, [pc, #16]	; (800154c <HAL_RTC_MspInit+0x14>)
 800153c:	429a      	cmp	r2, r3
 800153e:	d104      	bne.n	800154a <HAL_RTC_MspInit+0x12>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001540:	4a03      	ldr	r2, [pc, #12]	; (8001550 <HAL_RTC_MspInit+0x18>)
 8001542:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001544:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001548:	6713      	str	r3, [r2, #112]	; 0x70
 800154a:	4770      	bx	lr
 800154c:	40002800 	.word	0x40002800
 8001550:	40023800 	.word	0x40023800

08001554 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001554:	b570      	push	{r4, r5, r6, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155a:	2214      	movs	r2, #20
 800155c:	2100      	movs	r1, #0
 800155e:	a803      	add	r0, sp, #12
 8001560:	f014 fae7 	bl	8015b32 <memset>
  if(hsd->Instance==SDMMC1)
 8001564:	6822      	ldr	r2, [r4, #0]
 8001566:	4b1e      	ldr	r3, [pc, #120]	; (80015e0 <HAL_SD_MspInit+0x8c>)
 8001568:	429a      	cmp	r2, r3
 800156a:	d136      	bne.n	80015da <HAL_SD_MspInit+0x86>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800156c:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001570:	240c      	movs	r4, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001574:	2503      	movs	r5, #3
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001576:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001578:	eb0d 0104 	add.w	r1, sp, r4
 800157c:	4819      	ldr	r0, [pc, #100]	; (80015e4 <HAL_SD_MspInit+0x90>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800157e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001582:	645a      	str	r2, [r3, #68]	; 0x44
 8001584:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001586:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800158a:	9200      	str	r2, [sp, #0]
 800158c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800158e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001590:	f042 0204 	orr.w	r2, r2, #4
 8001594:	631a      	str	r2, [r3, #48]	; 0x30
 8001596:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001598:	f002 0204 	and.w	r2, r2, #4
 800159c:	9201      	str	r2, [sp, #4]
 800159e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015a2:	f042 0208 	orr.w	r2, r2, #8
 80015a6:	631a      	str	r2, [r3, #48]	; 0x30
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015aa:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ac:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b0:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80015b2:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015b4:	9302      	str	r3, [sp, #8]
 80015b6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 80015b8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80015bc:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015be:	f000 ffef 	bl	80025a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80015c2:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80015c4:	eb0d 0104 	add.w	r1, sp, r4
 80015c8:	4807      	ldr	r0, [pc, #28]	; (80015e8 <HAL_SD_MspInit+0x94>)
    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80015ca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d2:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80015d4:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80015d6:	f000 ffe3 	bl	80025a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80015da:	b008      	add	sp, #32
 80015dc:	bd70      	pop	{r4, r5, r6, pc}
 80015de:	bf00      	nop
 80015e0:	40012c00 	.word	0x40012c00
 80015e4:	40020800 	.word	0x40020800
 80015e8:	40020c00 	.word	0x40020c00

080015ec <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM1)
 80015ec:	6803      	ldr	r3, [r0, #0]
{
 80015ee:	b086      	sub	sp, #24
  if(htim_base->Instance==TIM1)
 80015f0:	4a23      	ldr	r2, [pc, #140]	; (8001680 <HAL_TIM_Base_MspInit+0x94>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d10b      	bne.n	800160e <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015f6:	4b23      	ldr	r3, [pc, #140]	; (8001684 <HAL_TIM_Base_MspInit+0x98>)
 80015f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015fa:	f042 0201 	orr.w	r2, r2, #1
 80015fe:	645a      	str	r2, [r3, #68]	; 0x44
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	9301      	str	r3, [sp, #4]
 8001608:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800160a:	b006      	add	sp, #24
 800160c:	4770      	bx	lr
  else if(htim_base->Instance==TIM2)
 800160e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001612:	d10b      	bne.n	800162c <HAL_TIM_Base_MspInit+0x40>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001614:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8001618:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800161a:	f042 0201 	orr.w	r2, r2, #1
 800161e:	641a      	str	r2, [r3, #64]	; 0x40
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	9302      	str	r3, [sp, #8]
 8001628:	9b02      	ldr	r3, [sp, #8]
 800162a:	e7ee      	b.n	800160a <HAL_TIM_Base_MspInit+0x1e>
  else if(htim_base->Instance==TIM3)
 800162c:	4a16      	ldr	r2, [pc, #88]	; (8001688 <HAL_TIM_Base_MspInit+0x9c>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d10a      	bne.n	8001648 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001632:	4b14      	ldr	r3, [pc, #80]	; (8001684 <HAL_TIM_Base_MspInit+0x98>)
 8001634:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001636:	f042 0202 	orr.w	r2, r2, #2
 800163a:	641a      	str	r2, [r3, #64]	; 0x40
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	9303      	str	r3, [sp, #12]
 8001644:	9b03      	ldr	r3, [sp, #12]
 8001646:	e7e0      	b.n	800160a <HAL_TIM_Base_MspInit+0x1e>
  else if(htim_base->Instance==TIM5)
 8001648:	4a10      	ldr	r2, [pc, #64]	; (800168c <HAL_TIM_Base_MspInit+0xa0>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d10a      	bne.n	8001664 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800164e:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <HAL_TIM_Base_MspInit+0x98>)
 8001650:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001652:	f042 0208 	orr.w	r2, r2, #8
 8001656:	641a      	str	r2, [r3, #64]	; 0x40
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f003 0308 	and.w	r3, r3, #8
 800165e:	9304      	str	r3, [sp, #16]
 8001660:	9b04      	ldr	r3, [sp, #16]
 8001662:	e7d2      	b.n	800160a <HAL_TIM_Base_MspInit+0x1e>
  else if(htim_base->Instance==TIM8)
 8001664:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <HAL_TIM_Base_MspInit+0xa4>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d1cf      	bne.n	800160a <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800166a:	4b06      	ldr	r3, [pc, #24]	; (8001684 <HAL_TIM_Base_MspInit+0x98>)
 800166c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800166e:	f042 0202 	orr.w	r2, r2, #2
 8001672:	645a      	str	r2, [r3, #68]	; 0x44
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	9305      	str	r3, [sp, #20]
 800167c:	9b05      	ldr	r3, [sp, #20]
}
 800167e:	e7c4      	b.n	800160a <HAL_TIM_Base_MspInit+0x1e>
 8001680:	40010000 	.word	0x40010000
 8001684:	40023800 	.word	0x40023800
 8001688:	40000400 	.word	0x40000400
 800168c:	40000c00 	.word	0x40000c00
 8001690:	40010400 	.word	0x40010400

08001694 <HAL_TIM_PWM_MspInit>:
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM12)
 8001694:	6802      	ldr	r2, [r0, #0]
{
 8001696:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM12)
 8001698:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <HAL_TIM_PWM_MspInit+0x24>)
 800169a:	429a      	cmp	r2, r3
 800169c:	d10a      	bne.n	80016b4 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800169e:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
 80016a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016a8:	641a      	str	r2, [r3, #64]	; 0x40
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016b0:	9301      	str	r3, [sp, #4]
 80016b2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80016b4:	b002      	add	sp, #8
 80016b6:	4770      	bx	lr
 80016b8:	40001800 	.word	0x40001800

080016bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016bc:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016be:	2214      	movs	r2, #20
{
 80016c0:	b08a      	sub	sp, #40	; 0x28
 80016c2:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c4:	2100      	movs	r1, #0
 80016c6:	eb0d 0002 	add.w	r0, sp, r2
 80016ca:	f014 fa32 	bl	8015b32 <memset>
  if(htim->Instance==TIM1)
 80016ce:	6823      	ldr	r3, [r4, #0]
 80016d0:	4a35      	ldr	r2, [pc, #212]	; (80017a8 <HAL_TIM_MspPostInit+0xec>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d116      	bne.n	8001704 <HAL_TIM_MspPostInit+0x48>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d6:	4b35      	ldr	r3, [pc, #212]	; (80017ac <HAL_TIM_MspPostInit+0xf0>)
 80016d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016da:	f042 0201 	orr.w	r2, r2, #1
 80016de:	631a      	str	r2, [r3, #48]	; 0x30
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	9b00      	ldr	r3, [sp, #0]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80016ea:	f44f 7380 	mov.w	r3, #256	; 0x100
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80016ee:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f0:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80016f2:	a905      	add	r1, sp, #20
 80016f4:	482e      	ldr	r0, [pc, #184]	; (80017b0 <HAL_TIM_MspPostInit+0xf4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016f8:	2301      	movs	r3, #1
 80016fa:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80016fc:	f000 ff50 	bl	80025a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001700:	b00a      	add	sp, #40	; 0x28
 8001702:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM2)
 8001704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001708:	d10d      	bne.n	8001726 <HAL_TIM_MspPostInit+0x6a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800170e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001710:	f042 0201 	orr.w	r2, r2, #1
 8001714:	631a      	str	r2, [r3, #48]	; 0x30
 8001716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	9301      	str	r3, [sp, #4]
 800171e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8001720:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001724:	e7e3      	b.n	80016ee <HAL_TIM_MspPostInit+0x32>
  else if(htim->Instance==TIM3)
 8001726:	4a23      	ldr	r2, [pc, #140]	; (80017b4 <HAL_TIM_MspPostInit+0xf8>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d111      	bne.n	8001750 <HAL_TIM_MspPostInit+0x94>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800172c:	4b1f      	ldr	r3, [pc, #124]	; (80017ac <HAL_TIM_MspPostInit+0xf0>)
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800172e:	a905      	add	r1, sp, #20
 8001730:	4821      	ldr	r0, [pc, #132]	; (80017b8 <HAL_TIM_MspPostInit+0xfc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001732:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001734:	f042 0202 	orr.w	r2, r2, #2
 8001738:	631a      	str	r2, [r3, #48]	; 0x30
 800173a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	9302      	str	r3, [sp, #8]
 8001742:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8001744:	2310      	movs	r3, #16
 8001746:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800174c:	9309      	str	r3, [sp, #36]	; 0x24
 800174e:	e7d5      	b.n	80016fc <HAL_TIM_MspPostInit+0x40>
  else if(htim->Instance==TIM5)
 8001750:	4a1a      	ldr	r2, [pc, #104]	; (80017bc <HAL_TIM_MspPostInit+0x100>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d111      	bne.n	800177a <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001756:	4b15      	ldr	r3, [pc, #84]	; (80017ac <HAL_TIM_MspPostInit+0xf0>)
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8001758:	a905      	add	r1, sp, #20
 800175a:	4819      	ldr	r0, [pc, #100]	; (80017c0 <HAL_TIM_MspPostInit+0x104>)
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800175c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800175e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001762:	631a      	str	r2, [r3, #48]	; 0x30
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176a:	9303      	str	r3, [sp, #12]
 800176c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800176e:	2301      	movs	r3, #1
 8001770:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001776:	9309      	str	r3, [sp, #36]	; 0x24
 8001778:	e7c0      	b.n	80016fc <HAL_TIM_MspPostInit+0x40>
  else if(htim->Instance==TIM12)
 800177a:	4a12      	ldr	r2, [pc, #72]	; (80017c4 <HAL_TIM_MspPostInit+0x108>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d1bf      	bne.n	8001700 <HAL_TIM_MspPostInit+0x44>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001780:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <HAL_TIM_MspPostInit+0xf0>)
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001782:	a905      	add	r1, sp, #20
 8001784:	4810      	ldr	r0, [pc, #64]	; (80017c8 <HAL_TIM_MspPostInit+0x10c>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001786:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001788:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800178c:	631a      	str	r2, [r3, #48]	; 0x30
 800178e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001794:	9304      	str	r3, [sp, #16]
 8001796:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001798:	2340      	movs	r3, #64	; 0x40
 800179a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	2302      	movs	r3, #2
 800179e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80017a0:	2309      	movs	r3, #9
 80017a2:	9309      	str	r3, [sp, #36]	; 0x24
 80017a4:	e7aa      	b.n	80016fc <HAL_TIM_MspPostInit+0x40>
 80017a6:	bf00      	nop
 80017a8:	40010000 	.word	0x40010000
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40020000 	.word	0x40020000
 80017b4:	40000400 	.word	0x40000400
 80017b8:	40020400 	.word	0x40020400
 80017bc:	40000c00 	.word	0x40000c00
 80017c0:	40022000 	.word	0x40022000
 80017c4:	40001800 	.word	0x40001800
 80017c8:	40021c00 	.word	0x40021c00

080017cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017cc:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ce:	2214      	movs	r2, #20
{
 80017d0:	b08b      	sub	sp, #44	; 0x2c
 80017d2:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	2100      	movs	r1, #0
 80017d6:	eb0d 0002 	add.w	r0, sp, r2
 80017da:	f014 f9aa 	bl	8015b32 <memset>
  if(huart->Instance==USART1)
 80017de:	6823      	ldr	r3, [r4, #0]
 80017e0:	4a2b      	ldr	r2, [pc, #172]	; (8001890 <HAL_UART_MspInit+0xc4>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d133      	bne.n	800184e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017e6:	4b2b      	ldr	r3, [pc, #172]	; (8001894 <HAL_UART_MspInit+0xc8>)
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e8:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017ea:	2407      	movs	r4, #7
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80017ec:	a905      	add	r1, sp, #20
    __HAL_RCC_USART1_CLK_ENABLE();
 80017ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80017f0:	4829      	ldr	r0, [pc, #164]	; (8001898 <HAL_UART_MspInit+0xcc>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80017f2:	f042 0210 	orr.w	r2, r2, #16
 80017f6:	645a      	str	r2, [r3, #68]	; 0x44
 80017f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017fa:	f002 0210 	and.w	r2, r2, #16
 80017fe:	9200      	str	r2, [sp, #0]
 8001800:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001802:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001804:	f042 0202 	orr.w	r2, r2, #2
 8001808:	631a      	str	r2, [r3, #48]	; 0x30
 800180a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800180c:	f002 0202 	and.w	r2, r2, #2
 8001810:	9201      	str	r2, [sp, #4]
 8001812:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001814:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001816:	f042 0201 	orr.w	r2, r2, #1
 800181a:	631a      	str	r2, [r3, #48]	; 0x30
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	9506      	str	r5, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001820:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001824:	9409      	str	r4, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	9302      	str	r3, [sp, #8]
 8001828:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800182a:	2380      	movs	r3, #128	; 0x80
 800182c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800182e:	f000 feb7 	bl	80025a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001832:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001836:	a905      	add	r1, sp, #20
 8001838:	4818      	ldr	r0, [pc, #96]	; (800189c <HAL_UART_MspInit+0xd0>)
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800183a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001842:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001844:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001846:	f000 feab 	bl	80025a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800184a:	b00b      	add	sp, #44	; 0x2c
 800184c:	bd30      	pop	{r4, r5, pc}
  else if(huart->Instance==USART6)
 800184e:	4a14      	ldr	r2, [pc, #80]	; (80018a0 <HAL_UART_MspInit+0xd4>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d1fa      	bne.n	800184a <HAL_UART_MspInit+0x7e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001854:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <HAL_UART_MspInit+0xc8>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001856:	a905      	add	r1, sp, #20
 8001858:	4812      	ldr	r0, [pc, #72]	; (80018a4 <HAL_UART_MspInit+0xd8>)
    __HAL_RCC_USART6_CLK_ENABLE();
 800185a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800185c:	f042 0220 	orr.w	r2, r2, #32
 8001860:	645a      	str	r2, [r3, #68]	; 0x44
 8001862:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001864:	f002 0220 	and.w	r2, r2, #32
 8001868:	9203      	str	r2, [sp, #12]
 800186a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800186c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800186e:	f042 0204 	orr.w	r2, r2, #4
 8001872:	631a      	str	r2, [r3, #48]	; 0x30
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	9304      	str	r3, [sp, #16]
 800187c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800187e:	23c0      	movs	r3, #192	; 0xc0
 8001880:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001882:	2302      	movs	r3, #2
 8001884:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001886:	2303      	movs	r3, #3
 8001888:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800188a:	2308      	movs	r3, #8
 800188c:	9309      	str	r3, [sp, #36]	; 0x24
 800188e:	e7da      	b.n	8001846 <HAL_UART_MspInit+0x7a>
 8001890:	40011000 	.word	0x40011000
 8001894:	40023800 	.word	0x40023800
 8001898:	40020400 	.word	0x40020400
 800189c:	40020000 	.word	0x40020000
 80018a0:	40011400 	.word	0x40011400
 80018a4:	40020800 	.word	0x40020800

080018a8 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 80018a8:	4b2b      	ldr	r3, [pc, #172]	; (8001958 <HAL_SDRAM_MspInit+0xb0>)
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80018aa:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (FMC_Initialized) {
 80018ac:	681c      	ldr	r4, [r3, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80018ae:	b087      	sub	sp, #28
  if (FMC_Initialized) {
 80018b0:	2c00      	cmp	r4, #0
 80018b2:	d14e      	bne.n	8001952 <HAL_SDRAM_MspInit+0xaa>
  FMC_Initialized = 1;
 80018b4:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b6:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b8:	2603      	movs	r6, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018ba:	250c      	movs	r5, #12
  FMC_Initialized = 1;
 80018bc:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018be:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 80018c0:	4b26      	ldr	r3, [pc, #152]	; (800195c <HAL_SDRAM_MspInit+0xb4>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018c2:	4827      	ldr	r0, [pc, #156]	; (8001960 <HAL_SDRAM_MspInit+0xb8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80018c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018c6:	f042 0201 	orr.w	r2, r2, #1
 80018ca:	639a      	str	r2, [r3, #56]	; 0x38
 80018cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ce:	9702      	str	r7, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
 80018d0:	f003 0301 	and.w	r3, r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d6:	9604      	str	r6, [sp, #16]
  __HAL_RCC_FMC_CLK_ENABLE();
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 80018dc:	f64f 7383 	movw	r3, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018e0:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 80018e2:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018e4:	f000 fe5c 	bl	80025a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 80018e8:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018ec:	a901      	add	r1, sp, #4
 80018ee:	481d      	ldr	r0, [pc, #116]	; (8001964 <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 80018f0:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f2:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f6:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018f8:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018fa:	f000 fe51 	bl	80025a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 80018fe:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001902:	a901      	add	r1, sp, #4
 8001904:	4818      	ldr	r0, [pc, #96]	; (8001968 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8001906:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001908:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190c:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800190e:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001910:	f000 fe46 	bl	80025a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8001914:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001918:	a901      	add	r1, sp, #4
 800191a:	4814      	ldr	r0, [pc, #80]	; (800196c <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 800191c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191e:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001922:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001924:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001926:	f000 fe3b 	bl	80025a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800192a:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800192c:	a901      	add	r1, sp, #4
 800192e:	4810      	ldr	r0, [pc, #64]	; (8001970 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001930:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001936:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001938:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800193a:	f000 fe31 	bl	80025a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800193e:	2308      	movs	r3, #8
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001940:	a901      	add	r1, sp, #4
 8001942:	480c      	ldr	r0, [pc, #48]	; (8001974 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001944:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001946:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194a:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800194c:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800194e:	f000 fe27 	bl	80025a0 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001952:	b007      	add	sp, #28
 8001954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001956:	bf00      	nop
 8001958:	20000310 	.word	0x20000310
 800195c:	40023800 	.word	0x40023800
 8001960:	40021000 	.word	0x40021000
 8001964:	40021800 	.word	0x40021800
 8001968:	40020c00 	.word	0x40020c00
 800196c:	40021400 	.word	0x40021400
 8001970:	40021c00 	.word	0x40021c00
 8001974:	40020800 	.word	0x40020800

08001978 <HAL_SAI_MspInit>:
void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8001978:	6802      	ldr	r2, [r0, #0]
 800197a:	4b22      	ldr	r3, [pc, #136]	; (8001a04 <HAL_SAI_MspInit+0x8c>)
 800197c:	429a      	cmp	r2, r3
{
 800197e:	b510      	push	{r4, lr}
 8001980:	4604      	mov	r4, r0
 8001982:	b088      	sub	sp, #32
    if(hsai->Instance==SAI2_Block_A)
 8001984:	d11b      	bne.n	80019be <HAL_SAI_MspInit+0x46>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8001986:	4b20      	ldr	r3, [pc, #128]	; (8001a08 <HAL_SAI_MspInit+0x90>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	b94a      	cbnz	r2, 80019a0 <HAL_SAI_MspInit+0x28>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800198c:	491f      	ldr	r1, [pc, #124]	; (8001a0c <HAL_SAI_MspInit+0x94>)
 800198e:	6c48      	ldr	r0, [r1, #68]	; 0x44
 8001990:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001994:	6448      	str	r0, [r1, #68]	; 0x44
 8001996:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001998:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 800199c:	9101      	str	r1, [sp, #4]
 800199e:	9901      	ldr	r1, [sp, #4]
    }
    SAI2_client ++;
 80019a0:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80019a2:	a903      	add	r1, sp, #12
 80019a4:	481a      	ldr	r0, [pc, #104]	; (8001a10 <HAL_SAI_MspInit+0x98>)
    SAI2_client ++;
 80019a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80019a8:	23f0      	movs	r3, #240	; 0xf0
 80019aa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ac:	2302      	movs	r3, #2
 80019ae:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80019b6:	230a      	movs	r3, #10
 80019b8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80019ba:	f000 fdf1 	bl	80025a0 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80019be:	6822      	ldr	r2, [r4, #0]
 80019c0:	4b14      	ldr	r3, [pc, #80]	; (8001a14 <HAL_SAI_MspInit+0x9c>)
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d11c      	bne.n	8001a00 <HAL_SAI_MspInit+0x88>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80019c6:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <HAL_SAI_MspInit+0x90>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	b94a      	cbnz	r2, 80019e0 <HAL_SAI_MspInit+0x68>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80019cc:	490f      	ldr	r1, [pc, #60]	; (8001a0c <HAL_SAI_MspInit+0x94>)
 80019ce:	6c48      	ldr	r0, [r1, #68]	; 0x44
 80019d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80019d4:	6448      	str	r0, [r1, #68]	; 0x44
 80019d6:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80019d8:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 80019dc:	9102      	str	r1, [sp, #8]
 80019de:	9902      	ldr	r1, [sp, #8]
      }
    SAI2_client ++;
 80019e0:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80019e2:	a903      	add	r1, sp, #12
 80019e4:	480c      	ldr	r0, [pc, #48]	; (8001a18 <HAL_SAI_MspInit+0xa0>)
    SAI2_client ++;
 80019e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80019e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019ec:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ee:	2302      	movs	r3, #2
 80019f0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80019f8:	230a      	movs	r3, #10
 80019fa:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80019fc:	f000 fdd0 	bl	80025a0 <HAL_GPIO_Init>

    }
}
 8001a00:	b008      	add	sp, #32
 8001a02:	bd10      	pop	{r4, pc}
 8001a04:	40015c04 	.word	0x40015c04
 8001a08:	20000314 	.word	0x20000314
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40022000 	.word	0x40022000
 8001a14:	40015c24 	.word	0x40015c24
 8001a18:	40021800 	.word	0x40021800

08001a1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a1c:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001a1e:	4601      	mov	r1, r0
{
 8001a20:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001a22:	2200      	movs	r2, #0
 8001a24:	2036      	movs	r0, #54	; 0x36
 8001a26:	f000 f9f9 	bl	8001e1c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001a2a:	2036      	movs	r0, #54	; 0x36
 8001a2c:	f000 fa2e 	bl	8001e8c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a30:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a32:	a901      	add	r1, sp, #4
 8001a34:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001a38:	4c13      	ldr	r4, [pc, #76]	; (8001a88 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a3a:	f042 0210 	orr.w	r2, r2, #16
 8001a3e:	641a      	str	r2, [r3, #64]	; 0x40
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f003 0310 	and.w	r3, r3, #16
 8001a46:	9302      	str	r3, [sp, #8]
 8001a48:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a4a:	f001 ff19 	bl	8003880 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001a4e:	f001 fef7 	bl	8003840 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <HAL_InitTick+0x70>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001a54:	0040      	lsls	r0, r0, #1
  htim6.Instance = TIM6;
 8001a56:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001a58:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001a5c:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001a5e:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <HAL_InitTick+0x74>)
 8001a60:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a64:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 8001a66:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 8001a68:	6060      	str	r0, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001a6a:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001a6c:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6e:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001a70:	f003 f984 	bl	8004d7c <HAL_TIM_Base_Init>
 8001a74:	b920      	cbnz	r0, 8001a80 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001a76:	4620      	mov	r0, r4
 8001a78:	f003 f859 	bl	8004b2e <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8001a7c:	b008      	add	sp, #32
 8001a7e:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8001a80:	2001      	movs	r0, #1
 8001a82:	e7fb      	b.n	8001a7c <HAL_InitTick+0x60>
 8001a84:	40023800 	.word	0x40023800
 8001a88:	20017b08 	.word	0x20017b08
 8001a8c:	40001000 	.word	0x40001000
 8001a90:	000f4240 	.word	0x000f4240

08001a94 <NMI_Handler>:
 8001a94:	4770      	bx	lr

08001a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a96:	e7fe      	b.n	8001a96 <HardFault_Handler>

08001a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a98:	e7fe      	b.n	8001a98 <MemManage_Handler>

08001a9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a9a:	e7fe      	b.n	8001a9a <BusFault_Handler>

08001a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a9c:	e7fe      	b.n	8001a9c <UsageFault_Handler>

08001a9e <SVC_Handler>:
 8001a9e:	4770      	bx	lr

08001aa0 <DebugMon_Handler>:
 8001aa0:	4770      	bx	lr

08001aa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aa2:	4770      	bx	lr

08001aa4 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001aa4:	4801      	ldr	r0, [pc, #4]	; (8001aac <TIM6_DAC_IRQHandler+0x8>)
 8001aa6:	f003 b851 	b.w	8004b4c <HAL_TIM_IRQHandler>
 8001aaa:	bf00      	nop
 8001aac:	20017b08 	.word	0x20017b08

08001ab0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ab0:	490f      	ldr	r1, [pc, #60]	; (8001af0 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ab2:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ab4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001abc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <SystemInit+0x44>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	f042 0201 	orr.w	r2, r2, #1
 8001ac8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001aca:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001ad2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ad6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001ad8:	4a07      	ldr	r2, [pc, #28]	; (8001af8 <SystemInit+0x48>)
 8001ada:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ae2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001ae4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ae6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001aea:	608b      	str	r3, [r1, #8]
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000ed00 	.word	0xe000ed00
 8001af4:	40023800 	.word	0x40023800
 8001af8:	24003010 	.word	0x24003010

08001afc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001afc:	b508      	push	{r3, lr}
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8001afe:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <HAL_Init+0x28>)
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b00:	2003      	movs	r0, #3
   __HAL_FLASH_ART_ENABLE();
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b08:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b10:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b12:	f000 f971 	bl	8001df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b16:	2000      	movs	r0, #0
 8001b18:	f7ff ff80 	bl	8001a1c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001b1c:	f7ff fa94 	bl	8001048 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8001b20:	2000      	movs	r0, #0
 8001b22:	bd08      	pop	{r3, pc}
 8001b24:	40023c00 	.word	0x40023c00

08001b28 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001b28:	4a03      	ldr	r2, [pc, #12]	; (8001b38 <HAL_IncTick+0x10>)
 8001b2a:	4b04      	ldr	r3, [pc, #16]	; (8001b3c <HAL_IncTick+0x14>)
 8001b2c:	6811      	ldr	r1, [r2, #0]
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	440b      	add	r3, r1
 8001b32:	6013      	str	r3, [r2, #0]
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20017b48 	.word	0x20017b48
 8001b3c:	20000004 	.word	0x20000004

08001b40 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001b40:	4b01      	ldr	r3, [pc, #4]	; (8001b48 <HAL_GetTick+0x8>)
 8001b42:	6818      	ldr	r0, [r3, #0]
}
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	20017b48 	.word	0x20017b48

08001b4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b4c:	b538      	push	{r3, r4, r5, lr}
 8001b4e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001b50:	f7ff fff6 	bl	8001b40 <HAL_GetTick>
 8001b54:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b56:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001b58:	bf1e      	ittt	ne
 8001b5a:	4b04      	ldrne	r3, [pc, #16]	; (8001b6c <HAL_Delay+0x20>)
 8001b5c:	781b      	ldrbne	r3, [r3, #0]
 8001b5e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b60:	f7ff ffee 	bl	8001b40 <HAL_GetTick>
 8001b64:	1b40      	subs	r0, r0, r5
 8001b66:	4284      	cmp	r4, r0
 8001b68:	d8fa      	bhi.n	8001b60 <HAL_Delay+0x14>
  {
  }
}
 8001b6a:	bd38      	pop	{r3, r4, r5, pc}
 8001b6c:	20000004 	.word	0x20000004

08001b70 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b70:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b72:	4604      	mov	r4, r0
 8001b74:	2800      	cmp	r0, #0
 8001b76:	f000 8099 	beq.w	8001cac <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b7a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001b7c:	b923      	cbnz	r3, 8001b88 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b7e:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b80:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b84:	f7ff fa78 	bl	8001078 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b8a:	06db      	lsls	r3, r3, #27
 8001b8c:	f100 808c 	bmi.w	8001ca8 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b96:	f023 0302 	bic.w	r3, r3, #2
 8001b9a:	f043 0302 	orr.w	r3, r3, #2
 8001b9e:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001ba0:	4b43      	ldr	r3, [pc, #268]	; (8001cb0 <HAL_ADC_Init+0x140>)
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001ba8:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	6861      	ldr	r1, [r4, #4]
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001bb2:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001bb4:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001bc4:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001bc6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001bce:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	430a      	orrs	r2, r1
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001bd4:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001bd6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001bd8:	689a      	ldr	r2, [r3, #8]
 8001bda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001be0:	689a      	ldr	r2, [r3, #8]
 8001be2:	430a      	orrs	r2, r1
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001be4:	4933      	ldr	r1, [pc, #204]	; (8001cb4 <HAL_ADC_Init+0x144>)
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001be6:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001be8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001bea:	428a      	cmp	r2, r1
 8001bec:	d050      	beq.n	8001c90 <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bee:	6899      	ldr	r1, [r3, #8]
 8001bf0:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8001bf4:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001bf6:	6899      	ldr	r1, [r3, #8]
 8001bf8:	430a      	orrs	r2, r1
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001bfa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001bfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c0a:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c0c:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8001c0e:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c10:	f022 0202 	bic.w	r2, r2, #2
 8001c14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8001c1c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c1e:	6a22      	ldr	r2, [r4, #32]
 8001c20:	2a00      	cmp	r2, #0
 8001c22:	d03d      	beq.n	8001ca0 <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c24:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c26:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c2c:	3901      	subs	r1, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c36:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c3e:	605a      	str	r2, [r3, #4]
    ADC_CLEAR_ERRORCODE(hadc);
 8001c40:	2000      	movs	r0, #0
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c44:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c46:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c4a:	3901      	subs	r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c50:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8001c54:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c66:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8001c68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8001c78:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001c7a:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001c7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c7e:	f023 0303 	bic.w	r3, r3, #3
 8001c82:	f043 0301 	orr.w	r3, r3, #1
 8001c86:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001c88:	2300      	movs	r3, #0
 8001c8a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8001c8e:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c90:	689a      	ldr	r2, [r3, #8]
 8001c92:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c96:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c9e:	e7b4      	b.n	8001c0a <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ca6:	e7ca      	b.n	8001c3e <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 8001ca8:	2001      	movs	r0, #1
 8001caa:	e7ed      	b.n	8001c88 <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 8001cac:	2001      	movs	r0, #1
}
 8001cae:	bd10      	pop	{r4, pc}
 8001cb0:	40012300 	.word	0x40012300
 8001cb4:	0f000001 	.word	0x0f000001

08001cb8 <HAL_ADC_ConfigChannel>:
  __IO uint32_t counter = 0;
 8001cb8:	2300      	movs	r3, #0
{
 8001cba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 8001cbc:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001cbe:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d071      	beq.n	8001daa <HAL_ADC_ConfigChannel+0xf2>
	if (sConfig->Channel > ADC_CHANNEL_9)
 8001cc6:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8001cc8:	2301      	movs	r3, #1
 8001cca:	6804      	ldr	r4, [r0, #0]
	if (sConfig->Channel > ADC_CHANNEL_9)
 8001ccc:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8001cce:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8001cd2:	b2ae      	uxth	r6, r5
 8001cd4:	688a      	ldr	r2, [r1, #8]
	if (sConfig->Channel > ADC_CHANNEL_9)
 8001cd6:	d931      	bls.n	8001d3c <HAL_ADC_ConfigChannel+0x84>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001cd8:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8001cdc:	f04f 0e07 	mov.w	lr, #7
 8001ce0:	68e7      	ldr	r7, [r4, #12]
 8001ce2:	3b1e      	subs	r3, #30
 8001ce4:	fa0e fe03 	lsl.w	lr, lr, r3
 8001ce8:	ea27 070e 	bic.w	r7, r7, lr
 8001cec:	60e7      	str	r7, [r4, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cee:	4f3d      	ldr	r7, [pc, #244]	; (8001de4 <HAL_ADC_ConfigChannel+0x12c>)
 8001cf0:	42bd      	cmp	r5, r7
 8001cf2:	d11e      	bne.n	8001d32 <HAL_ADC_ConfigChannel+0x7a>
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001cf4:	68e3      	ldr	r3, [r4, #12]
 8001cf6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001cfa:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7)
 8001cfc:	684a      	ldr	r2, [r1, #4]
 8001cfe:	2a06      	cmp	r2, #6
 8001d00:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8001d04:	d82a      	bhi.n	8001d5c <HAL_ADC_ConfigChannel+0xa4>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d06:	4413      	add	r3, r2
 8001d08:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8001d0a:	1f59      	subs	r1, r3, #5
 8001d0c:	231f      	movs	r3, #31
 8001d0e:	408b      	lsls	r3, r1
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d10:	fa06 f101 	lsl.w	r1, r6, r1
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d14:	ea27 0303 	bic.w	r3, r7, r3
 8001d18:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d1a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001d1c:	4311      	orrs	r1, r2
 8001d1e:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d20:	4b31      	ldr	r3, [pc, #196]	; (8001de8 <HAL_ADC_ConfigChannel+0x130>)
 8001d22:	429c      	cmp	r4, r3
 8001d24:	d039      	beq.n	8001d9a <HAL_ADC_ConfigChannel+0xe2>
  __HAL_UNLOCK(hadc);
 8001d26:	2300      	movs	r3, #0
 8001d28:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001d2c:	4618      	mov	r0, r3
}
 8001d2e:	b003      	add	sp, #12
 8001d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d32:	68e7      	ldr	r7, [r4, #12]
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	433b      	orrs	r3, r7
 8001d3a:	e7de      	b.n	8001cfa <HAL_ADC_ConfigChannel+0x42>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d3c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001d40:	f04f 0e07 	mov.w	lr, #7
 8001d44:	6927      	ldr	r7, [r4, #16]
 8001d46:	fa0e fe03 	lsl.w	lr, lr, r3
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d4e:	ea27 070e 	bic.w	r7, r7, lr
 8001d52:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d54:	6927      	ldr	r7, [r4, #16]
 8001d56:	433b      	orrs	r3, r7
 8001d58:	6123      	str	r3, [r4, #16]
 8001d5a:	e7cf      	b.n	8001cfc <HAL_ADC_ConfigChannel+0x44>
  else if (sConfig->Rank < 13)
 8001d5c:	2a0c      	cmp	r2, #12
 8001d5e:	d80e      	bhi.n	8001d7e <HAL_ADC_ConfigChannel+0xc6>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d60:	4413      	add	r3, r2
 8001d62:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001d64:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8001d68:	231f      	movs	r3, #31
 8001d6a:	4093      	lsls	r3, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d6c:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d70:	ea21 0303 	bic.w	r3, r1, r3
 8001d74:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d76:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	6322      	str	r2, [r4, #48]	; 0x30
 8001d7c:	e7d0      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x68>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d7e:	4413      	add	r3, r2
 8001d80:	221f      	movs	r2, #31
 8001d82:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001d84:	3b41      	subs	r3, #65	; 0x41
 8001d86:	409a      	lsls	r2, r3
 8001d88:	ea21 0202 	bic.w	r2, r1, r2
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d8c:	fa06 f103 	lsl.w	r1, r6, r3
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d90:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d92:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001d94:	4311      	orrs	r1, r2
 8001d96:	62e1      	str	r1, [r4, #44]	; 0x2c
 8001d98:	e7c2      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x68>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d9a:	2d12      	cmp	r5, #18
 8001d9c:	d107      	bne.n	8001dae <HAL_ADC_ConfigChannel+0xf6>
    ADC->CCR |= ADC_CCR_VBATE;
 8001d9e:	4a13      	ldr	r2, [pc, #76]	; (8001dec <HAL_ADC_ConfigChannel+0x134>)
 8001da0:	6853      	ldr	r3, [r2, #4]
 8001da2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001da6:	6053      	str	r3, [r2, #4]
 8001da8:	e7bd      	b.n	8001d26 <HAL_ADC_ConfigChannel+0x6e>
  __HAL_LOCK(hadc);
 8001daa:	2002      	movs	r0, #2
 8001dac:	e7bf      	b.n	8001d2e <HAL_ADC_ConfigChannel+0x76>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001dae:	4b0d      	ldr	r3, [pc, #52]	; (8001de4 <HAL_ADC_ConfigChannel+0x12c>)
 8001db0:	429d      	cmp	r5, r3
 8001db2:	d001      	beq.n	8001db8 <HAL_ADC_ConfigChannel+0x100>
 8001db4:	2d11      	cmp	r5, #17
 8001db6:	d1b6      	bne.n	8001d26 <HAL_ADC_ConfigChannel+0x6e>
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001db8:	490c      	ldr	r1, [pc, #48]	; (8001dec <HAL_ADC_ConfigChannel+0x134>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dba:	429d      	cmp	r5, r3
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001dbc:	684a      	ldr	r2, [r1, #4]
 8001dbe:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001dc2:	604a      	str	r2, [r1, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dc4:	d1af      	bne.n	8001d26 <HAL_ADC_ConfigChannel+0x6e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <HAL_ADC_ConfigChannel+0x138>)
 8001dc8:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <HAL_ADC_ConfigChannel+0x13c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	fbb3 f2f2 	udiv	r2, r3, r2
 8001dd0:	230a      	movs	r3, #10
 8001dd2:	4353      	muls	r3, r2
        counter--;
 8001dd4:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8001dd6:	9b01      	ldr	r3, [sp, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0a4      	beq.n	8001d26 <HAL_ADC_ConfigChannel+0x6e>
        counter--;
 8001ddc:	9b01      	ldr	r3, [sp, #4]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	e7f8      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0x11c>
 8001de2:	bf00      	nop
 8001de4:	10000012 	.word	0x10000012
 8001de8:	40012000 	.word	0x40012000
 8001dec:	40012300 	.word	0x40012300
 8001df0:	20000000 	.word	0x20000000
 8001df4:	000f4240 	.word	0x000f4240

08001df8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001df8:	4a07      	ldr	r2, [pc, #28]	; (8001e18 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001dfa:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dfc:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001dfe:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e02:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e06:	041b      	lsls	r3, r3, #16
 8001e08:	0c1b      	lsrs	r3, r3, #16
 8001e0a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001e12:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001e14:	60d3      	str	r3, [r2, #12]
 8001e16:	4770      	bx	lr
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e1c:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e1e:	b530      	push	{r4, r5, lr}
 8001e20:	68dc      	ldr	r4, [r3, #12]
 8001e22:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e26:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e2a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e2c:	2b04      	cmp	r3, #4
 8001e2e:	bf28      	it	cs
 8001e30:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e32:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e34:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e38:	bf8c      	ite	hi
 8001e3a:	3c03      	subhi	r4, #3
 8001e3c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e3e:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) < 0)
 8001e42:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e44:	f103 33ff 	add.w	r3, r3, #4294967295
 8001e48:	ea01 0103 	and.w	r1, r1, r3
 8001e4c:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e50:	fa05 f404 	lsl.w	r4, r5, r4
 8001e54:	f104 34ff 	add.w	r4, r4, #4294967295
 8001e58:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e5c:	ea42 0201 	orr.w	r2, r2, r1
 8001e60:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) < 0)
 8001e64:	da05      	bge.n	8001e72 <HAL_NVIC_SetPriority+0x56>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e66:	f000 000f 	and.w	r0, r0, #15
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <HAL_NVIC_SetPriority+0x6c>)
 8001e6e:	541a      	strb	r2, [r3, r0]
 8001e70:	bd30      	pop	{r4, r5, pc}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e72:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001e7c:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8001e80:	bd30      	pop	{r4, r5, pc}
 8001e82:	bf00      	nop
 8001e84:	e000ed00 	.word	0xe000ed00
 8001e88:	e000ed14 	.word	0xe000ed14

08001e8c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001e8c:	0942      	lsrs	r2, r0, #5
 8001e8e:	2301      	movs	r3, #1
 8001e90:	f000 001f 	and.w	r0, r0, #31
 8001e94:	fa03 f000 	lsl.w	r0, r3, r0
 8001e98:	4b01      	ldr	r3, [pc, #4]	; (8001ea0 <HAL_NVIC_EnableIRQ+0x14>)
 8001e9a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001e9e:	4770      	bx	lr
 8001ea0:	e000e100 	.word	0xe000e100

08001ea4 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{     
 8001ea4:	b538      	push	{r3, r4, r5, lr}
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8001ea6:	4604      	mov	r4, r0
 8001ea8:	2800      	cmp	r0, #0
 8001eaa:	d03d      	beq.n	8001f28 <HAL_DCMI_Init+0x84>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
                
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8001eac:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001eb0:	b90b      	cbnz	r3, 8001eb6 <HAL_DCMI_Init+0x12>
  {
    /* Init the low level hardware */
    HAL_DCMI_MspInit(hdcmi);
 8001eb2:	f7ff f925 	bl	8001100 <HAL_DCMI_MspInit>
  } 
  
  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8001eb6:	6822      	ldr	r2, [r4, #0]
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8001eb8:	2302      	movs	r3, #2
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001eba:	68e5      	ldr	r5, [r4, #12]
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8001ebc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8001ec0:	4b1a      	ldr	r3, [pc, #104]	; (8001f2c <HAL_DCMI_Init+0x88>)
 8001ec2:	6811      	ldr	r1, [r2, #0]
 8001ec4:	400b      	ands	r3, r1
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001ec6:	6861      	ldr	r1, [r4, #4]
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8001ec8:	6013      	str	r3, [r2, #0]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart);
                                     
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001eca:	2910      	cmp	r1, #16
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001ecc:	6963      	ldr	r3, [r4, #20]
 8001ece:	6810      	ldr	r0, [r2, #0]
 8001ed0:	ea43 0301 	orr.w	r3, r3, r1
 8001ed4:	ea43 0305 	orr.w	r3, r3, r5
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001ed8:	6925      	ldr	r5, [r4, #16]
 8001eda:	ea43 0305 	orr.w	r3, r3, r5
 8001ede:	68a5      	ldr	r5, [r4, #8]
 8001ee0:	ea43 0305 	orr.w	r3, r3, r5
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001ee4:	69a5      	ldr	r5, [r4, #24]
 8001ee6:	ea43 0305 	orr.w	r3, r3, r5
 8001eea:	6a25      	ldr	r5, [r4, #32]
 8001eec:	ea43 0305 	orr.w	r3, r3, r5
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001ef0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001ef2:	ea43 0305 	orr.w	r3, r3, r5
 8001ef6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8001ef8:	ea43 0305 	orr.w	r3, r3, r5
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001efc:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8001efe:	ea43 0305 	orr.w	r3, r3, r5
 8001f02:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8001f04:	ea43 0305 	orr.w	r3, r3, r5
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001f08:	ea43 0300 	orr.w	r3, r3, r0
 8001f0c:	6013      	str	r3, [r2, #0]
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001f0e:	d101      	bne.n	8001f14 <HAL_DCMI_Init+0x70>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8001f10:	69e3      	ldr	r3, [r4, #28]
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001f12:	6193      	str	r3, [r2, #24]
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001f14:	68d3      	ldr	r3, [r2, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001f16:	2000      	movs	r0, #0
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001f18:	f043 031e 	orr.w	r3, r3, #30
 8001f1c:	60d3      	str	r3, [r2, #12]
  
  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001f1e:	2301      	movs	r3, #1
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001f20:	64e0      	str	r0, [r4, #76]	; 0x4c
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001f22:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 8001f26:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_ERROR;
 8001f28:	2001      	movs	r0, #1
}
 8001f2a:	bd38      	pop	{r3, r4, r5, pc}
 8001f2c:	ffe0f007 	.word	0xffe0f007

08001f30 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f30:	6803      	ldr	r3, [r0, #0]
 8001f32:	2118      	movs	r1, #24
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f3a:	3a10      	subs	r2, #16
 8001f3c:	f023 0303 	bic.w	r3, r3, #3
 8001f40:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f44:	4904      	ldr	r1, [pc, #16]	; (8001f58 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8001f46:	2a03      	cmp	r2, #3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f48:	5c89      	ldrb	r1, [r1, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f4a:	bf88      	it	hi
 8001f4c:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f4e:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f50:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8001f52:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	08015b94 	.word	0x08015b94

08001f5c <HAL_DMA_Init>:
{
 8001f5c:	b570      	push	{r4, r5, r6, lr}
 8001f5e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001f60:	f7ff fdee 	bl	8001b40 <HAL_GetTick>
 8001f64:	4605      	mov	r5, r0
  if(hdma == NULL)
 8001f66:	2c00      	cmp	r4, #0
 8001f68:	d071      	beq.n	800204e <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8001f6a:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 8001f6c:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8001f6e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f72:	2302      	movs	r3, #2
 8001f74:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001f78:	6813      	ldr	r3, [r2, #0]
 8001f7a:	f023 0301 	bic.w	r3, r3, #1
 8001f7e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f80:	6821      	ldr	r1, [r4, #0]
 8001f82:	680b      	ldr	r3, [r1, #0]
 8001f84:	07d8      	lsls	r0, r3, #31
 8001f86:	d43c      	bmi.n	8002002 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8001f88:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f8a:	4d32      	ldr	r5, [pc, #200]	; (8002054 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f8c:	6862      	ldr	r2, [r4, #4]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f8e:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f90:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f92:	69a0      	ldr	r0, [r4, #24]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f94:	4313      	orrs	r3, r2
 8001f96:	68e2      	ldr	r2, [r4, #12]
 8001f98:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f9a:	6922      	ldr	r2, [r4, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	6962      	ldr	r2, [r4, #20]
 8001fa0:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa2:	69e2      	ldr	r2, [r4, #28]
 8001fa4:	4303      	orrs	r3, r0
 8001fa6:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fa8:	6a22      	ldr	r2, [r4, #32]
 8001faa:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001fae:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fb0:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fb4:	bf01      	itttt	eq
 8001fb6:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8001fb8:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8001fba:	4335      	orreq	r5, r6
 8001fbc:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fbe:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 8001fc0:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8001fc2:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fc4:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8001fc8:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fcc:	d10b      	bne.n	8001fe6 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8001fce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fd0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8001fd2:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fd4:	b13d      	cbz	r5, 8001fe6 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001fd6:	b9f8      	cbnz	r0, 8002018 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8001fd8:	2a01      	cmp	r2, #1
 8001fda:	d02d      	beq.n	8002038 <HAL_DMA_Init+0xdc>
 8001fdc:	d301      	bcc.n	8001fe2 <HAL_DMA_Init+0x86>
 8001fde:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001fe0:	d101      	bne.n	8001fe6 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fe2:	01ea      	lsls	r2, r5, #7
 8001fe4:	d42b      	bmi.n	800203e <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8001fe6:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fe8:	4620      	mov	r0, r4
 8001fea:	f7ff ffa1 	bl	8001f30 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fee:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001ff0:	233f      	movs	r3, #63	; 0x3f
 8001ff2:	4093      	lsls	r3, r2
 8001ff4:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ff6:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001ff8:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ffa:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001ffc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002000:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002002:	f7ff fd9d 	bl	8001b40 <HAL_GetTick>
 8002006:	1b40      	subs	r0, r0, r5
 8002008:	2805      	cmp	r0, #5
 800200a:	d9b9      	bls.n	8001f80 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800200c:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800200e:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002010:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002012:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8002016:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002018:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800201c:	d113      	bne.n	8002046 <HAL_DMA_Init+0xea>
    switch (tmp)
 800201e:	2a03      	cmp	r2, #3
 8002020:	d8e1      	bhi.n	8001fe6 <HAL_DMA_Init+0x8a>
 8002022:	a001      	add	r0, pc, #4	; (adr r0, 8002028 <HAL_DMA_Init+0xcc>)
 8002024:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8002028:	0800203f 	.word	0x0800203f
 800202c:	08001fe3 	.word	0x08001fe3
 8002030:	0800203f 	.word	0x0800203f
 8002034:	08002039 	.word	0x08002039
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002038:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800203c:	d1d3      	bne.n	8001fe6 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800203e:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8002040:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002042:	6563      	str	r3, [r4, #84]	; 0x54
 8002044:	e7e5      	b.n	8002012 <HAL_DMA_Init+0xb6>
    switch (tmp)
 8002046:	2a02      	cmp	r2, #2
 8002048:	d9f9      	bls.n	800203e <HAL_DMA_Init+0xe2>
 800204a:	2a03      	cmp	r2, #3
 800204c:	e7c8      	b.n	8001fe0 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 800204e:	2001      	movs	r0, #1
 8002050:	bd70      	pop	{r4, r5, r6, pc}
 8002052:	bf00      	nop
 8002054:	f010803f 	.word	0xf010803f

08002058 <HAL_DMA_DeInit>:
{
 8002058:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 800205a:	4605      	mov	r5, r0
 800205c:	b320      	cbz	r0, 80020a8 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800205e:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8002062:	b2e4      	uxtb	r4, r4
 8002064:	2c02      	cmp	r4, #2
 8002066:	d01d      	beq.n	80020a4 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8002068:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
 800206a:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	f022 0201 	bic.w	r2, r2, #1
 8002072:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8002074:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 8002076:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8002078:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 800207a:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 800207c:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 800207e:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8002080:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002082:	f7ff ff55 	bl	8001f30 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002086:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8002088:	233f      	movs	r3, #63	; 0x3f
 800208a:	4093      	lsls	r3, r2
 800208c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800208e:	656c      	str	r4, [r5, #84]	; 0x54
  hdma->XferCpltCallback = NULL;
 8002090:	63ec      	str	r4, [r5, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002092:	642c      	str	r4, [r5, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002094:	646c      	str	r4, [r5, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002096:	64ac      	str	r4, [r5, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002098:	64ec      	str	r4, [r5, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800209a:	652c      	str	r4, [r5, #80]	; 0x50
  hdma->State = HAL_DMA_STATE_RESET;
 800209c:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 80020a0:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
    return HAL_BUSY;
 80020a4:	4620      	mov	r0, r4
}
 80020a6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80020a8:	2001      	movs	r0, #1
 80020aa:	bd38      	pop	{r3, r4, r5, pc}

080020ac <HAL_DMA_Start_IT>:
{
 80020ac:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 80020ae:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80020b2:	2c01      	cmp	r4, #1
 80020b4:	d035      	beq.n	8002122 <HAL_DMA_Start_IT+0x76>
 80020b6:	2401      	movs	r4, #1
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020b8:	6d86      	ldr	r6, [r0, #88]	; 0x58
 80020ba:	2500      	movs	r5, #0
  __HAL_LOCK(hdma);
 80020bc:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80020c0:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80020c4:	2c01      	cmp	r4, #1
 80020c6:	f04f 0402 	mov.w	r4, #2
 80020ca:	d128      	bne.n	800211e <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 80020cc:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020d0:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020d2:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020d4:	6825      	ldr	r5, [r4, #0]
 80020d6:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 80020da:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80020dc:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020de:	6883      	ldr	r3, [r0, #8]
 80020e0:	2b40      	cmp	r3, #64	; 0x40
 80020e2:	d119      	bne.n	8002118 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 80020e4:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 80020e6:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020e8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80020ea:	233f      	movs	r3, #63	; 0x3f
 80020ec:	4093      	lsls	r3, r2
 80020ee:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020f0:	6823      	ldr	r3, [r4, #0]
 80020f2:	f043 0316 	orr.w	r3, r3, #22
 80020f6:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80020f8:	6963      	ldr	r3, [r4, #20]
 80020fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020fe:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8002100:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002102:	b11b      	cbz	r3, 800210c <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002104:	6823      	ldr	r3, [r4, #0]
 8002106:	f043 0308 	orr.w	r3, r3, #8
 800210a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800210c:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800210e:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	6023      	str	r3, [r4, #0]
 8002116:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 8002118:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 800211a:	60e2      	str	r2, [r4, #12]
 800211c:	e7e4      	b.n	80020e8 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 800211e:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8002122:	2002      	movs	r0, #2
}
 8002124:	bd70      	pop	{r4, r5, r6, pc}
	...

08002128 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8002128:	2300      	movs	r3, #0
{
 800212a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 800212c:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800212e:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8002130:	4b59      	ldr	r3, [pc, #356]	; (8002298 <HAL_DMA_IRQHandler+0x170>)
{
 8002132:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002134:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 8002136:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002138:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800213a:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800213c:	409a      	lsls	r2, r3
 800213e:	4216      	tst	r6, r2
 8002140:	d00c      	beq.n	800215c <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002142:	6801      	ldr	r1, [r0, #0]
 8002144:	6808      	ldr	r0, [r1, #0]
 8002146:	0740      	lsls	r0, r0, #29
 8002148:	d508      	bpl.n	800215c <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800214a:	6808      	ldr	r0, [r1, #0]
 800214c:	f020 0004 	bic.w	r0, r0, #4
 8002150:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002152:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002154:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002156:	f042 0201 	orr.w	r2, r2, #1
 800215a:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800215c:	2201      	movs	r2, #1
 800215e:	409a      	lsls	r2, r3
 8002160:	4216      	tst	r6, r2
 8002162:	d008      	beq.n	8002176 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002164:	6821      	ldr	r1, [r4, #0]
 8002166:	6949      	ldr	r1, [r1, #20]
 8002168:	0609      	lsls	r1, r1, #24
 800216a:	d504      	bpl.n	8002176 <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800216c:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800216e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002170:	f042 0202 	orr.w	r2, r2, #2
 8002174:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002176:	2204      	movs	r2, #4
 8002178:	409a      	lsls	r2, r3
 800217a:	4216      	tst	r6, r2
 800217c:	d008      	beq.n	8002190 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800217e:	6821      	ldr	r1, [r4, #0]
 8002180:	6809      	ldr	r1, [r1, #0]
 8002182:	0788      	lsls	r0, r1, #30
 8002184:	d504      	bpl.n	8002190 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002186:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002188:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800218a:	f042 0204 	orr.w	r2, r2, #4
 800218e:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002190:	2210      	movs	r2, #16
 8002192:	409a      	lsls	r2, r3
 8002194:	4216      	tst	r6, r2
 8002196:	d010      	beq.n	80021ba <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002198:	6823      	ldr	r3, [r4, #0]
 800219a:	6819      	ldr	r1, [r3, #0]
 800219c:	0709      	lsls	r1, r1, #28
 800219e:	d50c      	bpl.n	80021ba <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021a0:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	0350      	lsls	r0, r2, #13
 80021a6:	d535      	bpl.n	8002214 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	0319      	lsls	r1, r3, #12
 80021ac:	d401      	bmi.n	80021b2 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80021ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021b0:	e000      	b.n	80021b4 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021b2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80021b4:	b10b      	cbz	r3, 80021ba <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80021b6:	4620      	mov	r0, r4
 80021b8:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021ba:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80021bc:	2220      	movs	r2, #32
 80021be:	408a      	lsls	r2, r1
 80021c0:	4216      	tst	r6, r2
 80021c2:	d038      	beq.n	8002236 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021c4:	6823      	ldr	r3, [r4, #0]
 80021c6:	6818      	ldr	r0, [r3, #0]
 80021c8:	06c6      	lsls	r6, r0, #27
 80021ca:	d534      	bpl.n	8002236 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021cc:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021ce:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80021d2:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021d4:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021d6:	d125      	bne.n	8002224 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021d8:	f022 0216 	bic.w	r2, r2, #22
 80021dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021de:	695a      	ldr	r2, [r3, #20]
 80021e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021e4:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80021e8:	b90a      	cbnz	r2, 80021ee <HAL_DMA_IRQHandler+0xc6>
 80021ea:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80021ec:	b11a      	cbz	r2, 80021f6 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	f022 0208 	bic.w	r2, r2, #8
 80021f4:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021f6:	233f      	movs	r3, #63	; 0x3f
 80021f8:	408b      	lsls	r3, r1
 80021fa:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 80021fc:	2300      	movs	r3, #0
 80021fe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8002202:	2301      	movs	r3, #1
 8002204:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8002208:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 800220a:	b10b      	cbz	r3, 8002210 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 800220c:	4620      	mov	r0, r4
 800220e:	4798      	blx	r3
}
 8002210:	b003      	add	sp, #12
 8002212:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	05d2      	lsls	r2, r2, #23
 8002218:	d4c9      	bmi.n	80021ae <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	f022 0208 	bic.w	r2, r2, #8
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	e7c4      	b.n	80021ae <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002224:	0350      	lsls	r0, r2, #13
 8002226:	d528      	bpl.n	800227a <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	0319      	lsls	r1, r3, #12
 800222c:	d432      	bmi.n	8002294 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 800222e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8002230:	b10b      	cbz	r3, 8002236 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8002232:	4620      	mov	r0, r4
 8002234:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002236:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0e9      	beq.n	8002210 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800223c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800223e:	07da      	lsls	r2, r3, #31
 8002240:	d519      	bpl.n	8002276 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8002242:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8002244:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8002246:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800224a:	6813      	ldr	r3, [r2, #0]
 800224c:	f023 0301 	bic.w	r3, r3, #1
 8002250:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8002252:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002256:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 800225a:	9b01      	ldr	r3, [sp, #4]
 800225c:	3301      	adds	r3, #1
 800225e:	429f      	cmp	r7, r3
 8002260:	9301      	str	r3, [sp, #4]
 8002262:	d302      	bcc.n	800226a <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002264:	6813      	ldr	r3, [r2, #0]
 8002266:	07db      	lsls	r3, r3, #31
 8002268:	d4f7      	bmi.n	800225a <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 800226a:	2300      	movs	r3, #0
 800226c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8002270:	2301      	movs	r3, #1
 8002272:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8002276:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002278:	e7c7      	b.n	800220a <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8002280:	d108      	bne.n	8002294 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002282:	6819      	ldr	r1, [r3, #0]
 8002284:	f021 0110 	bic.w	r1, r1, #16
 8002288:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800228a:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 800228c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002290:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8002294:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002296:	e7cb      	b.n	8002230 <HAL_DMA_IRQHandler+0x108>
 8002298:	20000000 	.word	0x20000000

0800229c <HAL_DMA_RegisterCallback>:
  __HAL_LOCK(hdma);
 800229c:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80022a0:	2b01      	cmp	r3, #1
{
 80022a2:	b510      	push	{r4, lr}
 80022a4:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80022a6:	d01f      	beq.n	80022e8 <HAL_DMA_RegisterCallback+0x4c>
 80022a8:	2301      	movs	r3, #1
 80022aa:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80022ae:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
 80022b2:	4298      	cmp	r0, r3
 80022b4:	d113      	bne.n	80022de <HAL_DMA_RegisterCallback+0x42>
    switch (CallbackID)
 80022b6:	2905      	cmp	r1, #5
 80022b8:	d805      	bhi.n	80022c6 <HAL_DMA_RegisterCallback+0x2a>
 80022ba:	e8df f001 	tbb	[pc, r1]
 80022be:	0603      	.short	0x0603
 80022c0:	0e0c0a08 	.word	0x0e0c0a08
      hdma->XferCpltCallback = pCallback;
 80022c4:	63e2      	str	r2, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80022c6:	2000      	movs	r0, #0
 80022c8:	e00a      	b.n	80022e0 <HAL_DMA_RegisterCallback+0x44>
      hdma->XferHalfCpltCallback = pCallback;
 80022ca:	6422      	str	r2, [r4, #64]	; 0x40
 80022cc:	e7fb      	b.n	80022c6 <HAL_DMA_RegisterCallback+0x2a>
      hdma->XferM1CpltCallback = pCallback;
 80022ce:	6462      	str	r2, [r4, #68]	; 0x44
 80022d0:	e7f9      	b.n	80022c6 <HAL_DMA_RegisterCallback+0x2a>
      hdma->XferM1HalfCpltCallback = pCallback;
 80022d2:	64a2      	str	r2, [r4, #72]	; 0x48
 80022d4:	e7f7      	b.n	80022c6 <HAL_DMA_RegisterCallback+0x2a>
      hdma->XferErrorCallback = pCallback;
 80022d6:	64e2      	str	r2, [r4, #76]	; 0x4c
 80022d8:	e7f5      	b.n	80022c6 <HAL_DMA_RegisterCallback+0x2a>
      hdma->XferAbortCallback = pCallback;
 80022da:	6522      	str	r2, [r4, #80]	; 0x50
 80022dc:	e7f3      	b.n	80022c6 <HAL_DMA_RegisterCallback+0x2a>
    status =  HAL_ERROR;
 80022de:	4618      	mov	r0, r3
  __HAL_UNLOCK(hdma);
 80022e0:	2300      	movs	r3, #0
 80022e2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return status;
 80022e6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdma);
 80022e8:	2002      	movs	r0, #2
}
 80022ea:	bd10      	pop	{r4, pc}

080022ec <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{  
 80022ec:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2 = 0;
  uint32_t tmp3 = 0;
  uint32_t tmp4 = 0;
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 80022ee:	6804      	ldr	r4, [r0, #0]
 80022f0:	9d04      	ldr	r5, [sp, #16]
 80022f2:	6c66      	ldr	r6, [r4, #68]	; 0x44
 80022f4:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 80022f8:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
 80022fc:	4333      	orrs	r3, r6
 80022fe:	6463      	str	r3, [r4, #68]	; 0x44
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002300:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002302:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002304:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002308:	d130      	bne.n	800236c <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
    
    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800230a:	6886      	ldr	r6, [r0, #8]
 800230c:	b11e      	cbz	r6, 8002316 <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800230e:	2e01      	cmp	r6, #1
 8002310:	d103      	bne.n	800231a <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);  
 8002312:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12);
      tmp4 = (tmp4 >> 4 );
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
    }    
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);    
 8002316:	63a1      	str	r1, [r4, #56]	; 0x38
 8002318:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800231a:	2e02      	cmp	r6, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800231c:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002320:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002324:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002326:	d107      	bne.n	8002338 <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19);
 8002328:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10);
 800232a:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5) | (tmp2 << 11) | tmp4); 
 800232c:	02c9      	lsls	r1, r1, #11
 800232e:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 8002332:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 8002336:	e7ee      	b.n	8002316 <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002338:	2e03      	cmp	r6, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800233a:	f001 427f 	and.w	r2, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800233e:	d10a      	bne.n	8002356 <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19);
 8002340:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11);
 8002342:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 8002344:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31);
 8002346:	0fd1      	lsrs	r1, r2, #31
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 8002348:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 800234c:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 8002350:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8002354:	e7df      	b.n	8002316 <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20);
 8002356:	0d19      	lsrs	r1, r3, #20
      tmp3 = (tmp3 >> 12);
 8002358:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 800235a:	0209      	lsls	r1, r1, #8
      tmp1 = (tmp1 >> 28);
 800235c:	0f13      	lsrs	r3, r2, #28
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 800235e:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8002362:	ea41 1110 	orr.w	r1, r1, r0, lsr #4
 8002366:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
 800236a:	e7d4      	b.n	8002316 <DMA2D_SetConfig+0x2a>
  } 
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800236c:	60e1      	str	r1, [r4, #12]
 800236e:	bd70      	pop	{r4, r5, r6, pc}

08002370 <HAL_DMA2D_Init>:
{ 
 8002370:	b510      	push	{r4, lr}
  if(hdma2d == NULL)
 8002372:	4604      	mov	r4, r0
 8002374:	b330      	cbz	r0, 80023c4 <HAL_DMA2D_Init+0x54>
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002376:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800237a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800237e:	b91b      	cbnz	r3, 8002388 <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
 8002380:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8002384:	f7fe ff44 	bl	8001210 <HAL_DMA2D_MspInit>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002388:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 800238a:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800238c:	6861      	ldr	r1, [r4, #4]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800238e:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8002390:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002394:	6813      	ldr	r3, [r2, #0]
 8002396:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800239a:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800239c:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800239e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80023a0:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80023a2:	f023 0307 	bic.w	r3, r3, #7
 80023a6:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 80023a8:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80023aa:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 80023ac:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80023ae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80023b2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023b6:	430b      	orrs	r3, r1
 80023b8:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80023ba:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80023bc:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80023be:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80023c2:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 80023c4:	2001      	movs	r0, #1
}
 80023c6:	bd10      	pop	{r4, pc}

080023c8 <HAL_DMA2D_BlendingStart>:
{
 80023c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80023ca:	4615      	mov	r5, r2
 80023cc:	461a      	mov	r2, r3
  __HAL_LOCK(hdma2d);
 80023ce:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
{
 80023d2:	4604      	mov	r4, r0
  __HAL_LOCK(hdma2d);
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	f04f 0302 	mov.w	r3, #2
 80023da:	d012      	beq.n	8002402 <HAL_DMA2D_BlendingStart+0x3a>
  hdma2d->State = HAL_DMA2D_STATE_BUSY; 
 80023dc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 80023e0:	2601      	movs	r6, #1
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 80023e2:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdma2d);
 80023e4:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 80023e8:	615d      	str	r5, [r3, #20]
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 80023ea:	9b07      	ldr	r3, [sp, #28]
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	9b06      	ldr	r3, [sp, #24]
 80023f0:	f7ff ff7c 	bl	80022ec <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 80023f4:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
 80023f6:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 80023f8:	6813      	ldr	r3, [r2, #0]
 80023fa:	4333      	orrs	r3, r6
 80023fc:	6013      	str	r3, [r2, #0]
}
 80023fe:	b002      	add	sp, #8
 8002400:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 8002402:	4618      	mov	r0, r3
 8002404:	e7fb      	b.n	80023fe <HAL_DMA2D_BlendingStart+0x36>

08002406 <HAL_DMA2D_PollForTransfer>:
  __IO uint32_t isrflags = 0x0;  
 8002406:	2300      	movs	r3, #0
{
 8002408:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0;  
 800240a:	9301      	str	r3, [sp, #4]
{
 800240c:	4604      	mov	r4, r0
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 800240e:	6803      	ldr	r3, [r0, #0]
{
 8002410:	460d      	mov	r5, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	07db      	lsls	r3, r3, #31
 8002416:	d427      	bmi.n	8002468 <HAL_DMA2D_PollForTransfer+0x62>
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8002418:	6823      	ldr	r3, [r4, #0]
 800241a:	69da      	ldr	r2, [r3, #28]
 800241c:	0696      	lsls	r6, r2, #26
 800241e:	d55c      	bpl.n	80024da <HAL_DMA2D_PollForTransfer+0xd4>
    tickstart = HAL_GetTick();
 8002420:	f7ff fb8e 	bl	8001b40 <HAL_GetTick>
 8002424:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8002426:	6823      	ldr	r3, [r4, #0]
 8002428:	685a      	ldr	r2, [r3, #4]
 800242a:	06d2      	lsls	r2, r2, #27
 800242c:	d458      	bmi.n	80024e0 <HAL_DMA2D_PollForTransfer+0xda>
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 8002432:	9a01      	ldr	r2, [sp, #4]
 8002434:	f012 0f29 	tst.w	r2, #41	; 0x29
 8002438:	d05d      	beq.n	80024f6 <HAL_DMA2D_PollForTransfer+0xf0>
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 800243a:	9a01      	ldr	r2, [sp, #4]
 800243c:	0716      	lsls	r6, r2, #28
 800243e:	d503      	bpl.n	8002448 <HAL_DMA2D_PollForTransfer+0x42>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;        
 8002440:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002442:	f042 0204 	orr.w	r2, r2, #4
 8002446:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != RESET)             
 8002448:	9a01      	ldr	r2, [sp, #4]
 800244a:	0695      	lsls	r5, r2, #26
 800244c:	d503      	bpl.n	8002456 <HAL_DMA2D_PollForTransfer+0x50>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 800244e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002450:	f042 0202 	orr.w	r2, r2, #2
 8002454:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8002456:	9a01      	ldr	r2, [sp, #4]
 8002458:	07d0      	lsls	r0, r2, #31
 800245a:	d503      	bpl.n	8002464 <HAL_DMA2D_PollForTransfer+0x5e>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 800245c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800245e:	f042 0201 	orr.w	r2, r2, #1
 8002462:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002464:	2229      	movs	r2, #41	; 0x29
 8002466:	e01b      	b.n	80024a0 <HAL_DMA2D_PollForTransfer+0x9a>
   tickstart = HAL_GetTick();
 8002468:	f7ff fb6a 	bl	8001b40 <HAL_GetTick>
 800246c:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 800246e:	6823      	ldr	r3, [r4, #0]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	0792      	lsls	r2, r2, #30
 8002474:	d4d0      	bmi.n	8002418 <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 800247a:	9a01      	ldr	r2, [sp, #4]
 800247c:	f012 0f21 	tst.w	r2, #33	; 0x21
 8002480:	d017      	beq.n	80024b2 <HAL_DMA2D_PollForTransfer+0xac>
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8002482:	9a01      	ldr	r2, [sp, #4]
 8002484:	0695      	lsls	r5, r2, #26
 8002486:	d503      	bpl.n	8002490 <HAL_DMA2D_PollForTransfer+0x8a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8002488:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800248a:	f042 0202 	orr.w	r2, r2, #2
 800248e:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8002490:	9a01      	ldr	r2, [sp, #4]
 8002492:	07d0      	lsls	r0, r2, #31
 8002494:	d503      	bpl.n	800249e <HAL_DMA2D_PollForTransfer+0x98>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8002496:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002498:	f042 0201 	orr.w	r2, r2, #1
 800249c:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800249e:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80024a0:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80024a2:	2304      	movs	r3, #4
        return HAL_ERROR;      
 80024a4:	2001      	movs	r0, #1
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80024a6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 80024aa:	2300      	movs	r3, #0
 80024ac:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;      
 80024b0:	e01f      	b.n	80024f2 <HAL_DMA2D_PollForTransfer+0xec>
      if(Timeout != HAL_MAX_DELAY)
 80024b2:	1c69      	adds	r1, r5, #1
 80024b4:	d0dc      	beq.n	8002470 <HAL_DMA2D_PollForTransfer+0x6a>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80024b6:	b955      	cbnz	r5, 80024ce <HAL_DMA2D_PollForTransfer+0xc8>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80024b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80024ba:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80024bc:	f043 0320 	orr.w	r3, r3, #32
 80024c0:	63e3      	str	r3, [r4, #60]	; 0x3c
          __HAL_UNLOCK(hdma2d);
 80024c2:	2300      	movs	r3, #0
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80024c4:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 80024c8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 80024cc:	e011      	b.n	80024f2 <HAL_DMA2D_PollForTransfer+0xec>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80024ce:	f7ff fb37 	bl	8001b40 <HAL_GetTick>
 80024d2:	1b80      	subs	r0, r0, r6
 80024d4:	4285      	cmp	r5, r0
 80024d6:	d2ca      	bcs.n	800246e <HAL_DMA2D_PollForTransfer+0x68>
 80024d8:	e7ee      	b.n	80024b8 <HAL_DMA2D_PollForTransfer+0xb2>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 80024da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 80024dc:	069b      	lsls	r3, r3, #26
 80024de:	d49f      	bmi.n	8002420 <HAL_DMA2D_PollForTransfer+0x1a>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 80024e0:	6823      	ldr	r3, [r4, #0]
 80024e2:	2212      	movs	r2, #18
  __HAL_UNLOCK(hdma2d);
 80024e4:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 80024e6:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80024e8:	2301      	movs	r3, #1
  __HAL_UNLOCK(hdma2d);
 80024ea:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80024ee:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 80024f2:	b002      	add	sp, #8
 80024f4:	bd70      	pop	{r4, r5, r6, pc}
      if(Timeout != HAL_MAX_DELAY)
 80024f6:	1c69      	adds	r1, r5, #1
 80024f8:	d096      	beq.n	8002428 <HAL_DMA2D_PollForTransfer+0x22>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80024fa:	2d00      	cmp	r5, #0
 80024fc:	d0dc      	beq.n	80024b8 <HAL_DMA2D_PollForTransfer+0xb2>
 80024fe:	f7ff fb1f 	bl	8001b40 <HAL_GetTick>
 8002502:	1b80      	subs	r0, r0, r6
 8002504:	4285      	cmp	r5, r0
 8002506:	d28e      	bcs.n	8002426 <HAL_DMA2D_PollForTransfer+0x20>
 8002508:	e7d6      	b.n	80024b8 <HAL_DMA2D_PollForTransfer+0xb2>
	...

0800250c <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 800250c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002510:	2b01      	cmp	r3, #1
 8002512:	f04f 0302 	mov.w	r3, #2
{ 
 8002516:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 8002518:	d037      	beq.n	800258a <HAL_DMA2D_ConfigLayer+0x7e>
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800251a:	010e      	lsls	r6, r1, #4
  __HAL_LOCK(hdma2d);
 800251c:	2201      	movs	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 800251e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002522:	1983      	adds	r3, r0, r6
  __HAL_LOCK(hdma2d);
 8002524:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
 8002528:	4f1c      	ldr	r7, [pc, #112]	; (800259c <HAL_DMA2D_ConfigLayer+0x90>)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800252a:	69dd      	ldr	r5, [r3, #28]
 800252c:	6a1a      	ldr	r2, [r3, #32]
 800252e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002530:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002534:	3d09      	subs	r5, #9
 8002536:	6803      	ldr	r3, [r0, #0]
 8002538:	2d01      	cmp	r5, #1
 800253a:	d80f      	bhi.n	800255c <HAL_DMA2D_ConfigLayer+0x50>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800253c:	f004 4e7f 	and.w	lr, r4, #4278190080	; 0xff000000
 8002540:	ea4e 0202 	orr.w	r2, lr, r2
  if(LayerIdx == 0)
 8002544:	b969      	cbnz	r1, 8002562 <HAL_DMA2D_ConfigLayer+0x56>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002546:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002548:	4039      	ands	r1, r7
 800254a:	430a      	orrs	r2, r1
 800254c:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800254e:	6982      	ldr	r2, [r0, #24]
 8002550:	619a      	str	r2, [r3, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8002552:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002554:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002558:	629a      	str	r2, [r3, #40]	; 0x28
 800255a:	e010      	b.n	800257e <HAL_DMA2D_ConfigLayer+0x72>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800255c:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
  if(LayerIdx == 0)
 8002560:	b1a9      	cbz	r1, 800258e <HAL_DMA2D_ConfigLayer+0x82>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002562:	69d9      	ldr	r1, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 8002564:	4406      	add	r6, r0
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002566:	2d01      	cmp	r5, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002568:	ea01 0107 	and.w	r1, r1, r7
 800256c:	ea42 0201 	orr.w	r2, r2, r1
 8002570:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 8002572:	69b2      	ldr	r2, [r6, #24]
 8002574:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002576:	d802      	bhi.n	800257e <HAL_DMA2D_ConfigLayer+0x72>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 8002578:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 800257c:	621c      	str	r4, [r3, #32]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800257e:	2301      	movs	r3, #1
 8002580:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);  
 8002584:	2300      	movs	r3, #0
 8002586:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 800258a:	4618      	mov	r0, r3
 800258c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800258e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002590:	4039      	ands	r1, r7
 8002592:	430a      	orrs	r2, r1
 8002594:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002596:	6982      	ldr	r2, [r0, #24]
 8002598:	619a      	str	r2, [r3, #24]
 800259a:	e7f0      	b.n	800257e <HAL_DMA2D_ConfigLayer+0x72>
 800259c:	00fcfff0 	.word	0x00fcfff0

080025a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025a4:	680b      	ldr	r3, [r1, #0]
{
 80025a6:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800276c <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ac:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 80025ae:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025b0:	4a6c      	ldr	r2, [pc, #432]	; (8002764 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80025b2:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8002770 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 80025b6:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ba:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 80025bc:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025c0:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80025c4:	45b6      	cmp	lr, r6
 80025c6:	f040 80b3 	bne.w	8002730 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025ca:	684c      	ldr	r4, [r1, #4]
 80025cc:	f024 0710 	bic.w	r7, r4, #16
 80025d0:	2f02      	cmp	r7, #2
 80025d2:	d116      	bne.n	8002602 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 80025d4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80025d8:	f003 0b07 	and.w	fp, r3, #7
 80025dc:	f04f 0c0f 	mov.w	ip, #15
 80025e0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80025e4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80025e8:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80025ec:	fa0c fc0b 	lsl.w	ip, ip, fp
 80025f0:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80025f4:	690d      	ldr	r5, [r1, #16]
 80025f6:	fa05 f50b 	lsl.w	r5, r5, fp
 80025fa:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 80025fe:	f8ca 5020 	str.w	r5, [sl, #32]
 8002602:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002606:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8002608:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800260c:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002610:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002614:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002616:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800261a:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800261c:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800261e:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002622:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 8002626:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800262a:	d811      	bhi.n	8002650 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 800262c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800262e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8002632:	68cf      	ldr	r7, [r1, #12]
 8002634:	fa07 fc0a 	lsl.w	ip, r7, sl
 8002638:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 800263c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800263e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002640:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002644:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8002648:	409f      	lsls	r7, r3
 800264a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800264e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8002650:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002652:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002654:	688f      	ldr	r7, [r1, #8]
 8002656:	fa07 f70a 	lsl.w	r7, r7, sl
 800265a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800265c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800265e:	00e5      	lsls	r5, r4, #3
 8002660:	d566      	bpl.n	8002730 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002662:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8002666:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800266a:	f003 0e03 	and.w	lr, r3, #3
 800266e:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002672:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8002676:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800267a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800267e:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 8002682:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8002686:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 800268a:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 800268e:	9503      	str	r5, [sp, #12]
 8002690:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002692:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 8002696:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800269a:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800269e:	4d32      	ldr	r5, [pc, #200]	; (8002768 <HAL_GPIO_Init+0x1c8>)
 80026a0:	42a8      	cmp	r0, r5
 80026a2:	d04c      	beq.n	800273e <HAL_GPIO_Init+0x19e>
 80026a4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80026a8:	42a8      	cmp	r0, r5
 80026aa:	d04a      	beq.n	8002742 <HAL_GPIO_Init+0x1a2>
 80026ac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80026b0:	42a8      	cmp	r0, r5
 80026b2:	d048      	beq.n	8002746 <HAL_GPIO_Init+0x1a6>
 80026b4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80026b8:	42a8      	cmp	r0, r5
 80026ba:	d046      	beq.n	800274a <HAL_GPIO_Init+0x1aa>
 80026bc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80026c0:	42a8      	cmp	r0, r5
 80026c2:	d044      	beq.n	800274e <HAL_GPIO_Init+0x1ae>
 80026c4:	4548      	cmp	r0, r9
 80026c6:	d044      	beq.n	8002752 <HAL_GPIO_Init+0x1b2>
 80026c8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80026cc:	42a8      	cmp	r0, r5
 80026ce:	d042      	beq.n	8002756 <HAL_GPIO_Init+0x1b6>
 80026d0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80026d4:	42a8      	cmp	r0, r5
 80026d6:	d040      	beq.n	800275a <HAL_GPIO_Init+0x1ba>
 80026d8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80026dc:	42a8      	cmp	r0, r5
 80026de:	d03e      	beq.n	800275e <HAL_GPIO_Init+0x1be>
 80026e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80026e4:	42a8      	cmp	r0, r5
 80026e6:	bf14      	ite	ne
 80026e8:	250a      	movne	r5, #10
 80026ea:	2509      	moveq	r5, #9
 80026ec:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026f0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80026f4:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 80026f8:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 80026fa:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 80026fe:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002700:	bf0c      	ite	eq
 8002702:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8002704:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002706:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 800270a:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800270c:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 800270e:	bf0c      	ite	eq
 8002710:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8002712:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002714:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8002718:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800271a:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800271c:	bf0c      	ite	eq
 800271e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8002720:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002722:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8002724:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8002726:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8002728:	bf54      	ite	pl
 800272a:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800272c:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800272e:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002730:	3301      	adds	r3, #1
 8002732:	2b10      	cmp	r3, #16
 8002734:	f47f af3f 	bne.w	80025b6 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8002738:	b005      	add	sp, #20
 800273a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800273e:	2500      	movs	r5, #0
 8002740:	e7d4      	b.n	80026ec <HAL_GPIO_Init+0x14c>
 8002742:	2501      	movs	r5, #1
 8002744:	e7d2      	b.n	80026ec <HAL_GPIO_Init+0x14c>
 8002746:	2502      	movs	r5, #2
 8002748:	e7d0      	b.n	80026ec <HAL_GPIO_Init+0x14c>
 800274a:	2503      	movs	r5, #3
 800274c:	e7ce      	b.n	80026ec <HAL_GPIO_Init+0x14c>
 800274e:	2504      	movs	r5, #4
 8002750:	e7cc      	b.n	80026ec <HAL_GPIO_Init+0x14c>
 8002752:	2505      	movs	r5, #5
 8002754:	e7ca      	b.n	80026ec <HAL_GPIO_Init+0x14c>
 8002756:	2506      	movs	r5, #6
 8002758:	e7c8      	b.n	80026ec <HAL_GPIO_Init+0x14c>
 800275a:	2507      	movs	r5, #7
 800275c:	e7c6      	b.n	80026ec <HAL_GPIO_Init+0x14c>
 800275e:	2508      	movs	r5, #8
 8002760:	e7c4      	b.n	80026ec <HAL_GPIO_Init+0x14c>
 8002762:	bf00      	nop
 8002764:	40013c00 	.word	0x40013c00
 8002768:	40020000 	.word	0x40020000
 800276c:	40023800 	.word	0x40023800
 8002770:	40021400 	.word	0x40021400

08002774 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002778:	2400      	movs	r4, #0
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800277a:	4e4c      	ldr	r6, [pc, #304]	; (80028ac <HAL_GPIO_DeInit+0x138>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800277c:	f8df a134 	ldr.w	sl, [pc, #308]	; 80028b4 <HAL_GPIO_DeInit+0x140>
 8002780:	f8df b134 	ldr.w	fp, [pc, #308]	; 80028b8 <HAL_GPIO_DeInit+0x144>
    ioposition = ((uint32_t)0x01) << position;
 8002784:	f04f 0901 	mov.w	r9, #1
 8002788:	fa09 f204 	lsl.w	r2, r9, r4
    if(iocurrent == ioposition)
 800278c:	ea32 0301 	bics.w	r3, r2, r1
 8002790:	d174      	bne.n	800287c <HAL_GPIO_DeInit+0x108>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002792:	2303      	movs	r3, #3
 8002794:	fa04 f509 	lsl.w	r5, r4, r9
 8002798:	6807      	ldr	r7, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800279a:	f004 0e07 	and.w	lr, r4, #7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800279e:	fa03 f505 	lsl.w	r5, r3, r5
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80027a2:	fa24 fc03 	lsr.w	ip, r4, r3
 80027a6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027aa:	43d2      	mvns	r2, r2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80027ac:	43ed      	mvns	r5, r5
 80027ae:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80027b2:	402f      	ands	r7, r5
 80027b4:	6007      	str	r7, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80027b6:	270f      	movs	r7, #15
 80027b8:	f8dc 8020 	ldr.w	r8, [ip, #32]
 80027bc:	fa07 fe0e 	lsl.w	lr, r7, lr
 80027c0:	ea28 0e0e 	bic.w	lr, r8, lr
 80027c4:	f8cc e020 	str.w	lr, [ip, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80027c8:	f8d0 e008 	ldr.w	lr, [r0, #8]
 80027cc:	ea05 0e0e 	and.w	lr, r5, lr
 80027d0:	f8c0 e008 	str.w	lr, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027d4:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80027d8:	ea02 0e0e 	and.w	lr, r2, lr
 80027dc:	f8c0 e004 	str.w	lr, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80027e0:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 80027e4:	ea05 050e 	and.w	r5, r5, lr
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80027e8:	ea04 0e03 	and.w	lr, r4, r3
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80027ec:	4b30      	ldr	r3, [pc, #192]	; (80028b0 <HAL_GPIO_DeInit+0x13c>)
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80027ee:	60c5      	str	r5, [r0, #12]
 80027f0:	f024 0503 	bic.w	r5, r4, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80027f4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80027f8:	4298      	cmp	r0, r3
 80027fa:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80027fe:	fa07 f70e 	lsl.w	r7, r7, lr
 8002802:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp = SYSCFG->EXTICR[position >> 2];
 8002806:	f8d5 c008 	ldr.w	ip, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800280a:	ea0c 0c07 	and.w	ip, ip, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800280e:	d03a      	beq.n	8002886 <HAL_GPIO_DeInit+0x112>
 8002810:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002814:	4298      	cmp	r0, r3
 8002816:	d038      	beq.n	800288a <HAL_GPIO_DeInit+0x116>
 8002818:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800281c:	4298      	cmp	r0, r3
 800281e:	d036      	beq.n	800288e <HAL_GPIO_DeInit+0x11a>
 8002820:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002824:	4298      	cmp	r0, r3
 8002826:	d034      	beq.n	8002892 <HAL_GPIO_DeInit+0x11e>
 8002828:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800282c:	4298      	cmp	r0, r3
 800282e:	d032      	beq.n	8002896 <HAL_GPIO_DeInit+0x122>
 8002830:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002834:	4298      	cmp	r0, r3
 8002836:	d030      	beq.n	800289a <HAL_GPIO_DeInit+0x126>
 8002838:	4550      	cmp	r0, sl
 800283a:	d030      	beq.n	800289e <HAL_GPIO_DeInit+0x12a>
 800283c:	4558      	cmp	r0, fp
 800283e:	d030      	beq.n	80028a2 <HAL_GPIO_DeInit+0x12e>
 8002840:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8002844:	4298      	cmp	r0, r3
 8002846:	d02e      	beq.n	80028a6 <HAL_GPIO_DeInit+0x132>
 8002848:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800284c:	4298      	cmp	r0, r3
 800284e:	bf0c      	ite	eq
 8002850:	2309      	moveq	r3, #9
 8002852:	230a      	movne	r3, #10
 8002854:	fa03 f30e 	lsl.w	r3, r3, lr
 8002858:	459c      	cmp	ip, r3
 800285a:	d10f      	bne.n	800287c <HAL_GPIO_DeInit+0x108>
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800285c:	68ab      	ldr	r3, [r5, #8]
 800285e:	ea23 0707 	bic.w	r7, r3, r7
 8002862:	60af      	str	r7, [r5, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002864:	6833      	ldr	r3, [r6, #0]
 8002866:	4013      	ands	r3, r2
 8002868:	6033      	str	r3, [r6, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800286a:	6873      	ldr	r3, [r6, #4]
 800286c:	4013      	ands	r3, r2
 800286e:	6073      	str	r3, [r6, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002870:	68b3      	ldr	r3, [r6, #8]
 8002872:	4013      	ands	r3, r2
 8002874:	60b3      	str	r3, [r6, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002876:	68f3      	ldr	r3, [r6, #12]
 8002878:	401a      	ands	r2, r3
 800287a:	60f2      	str	r2, [r6, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800287c:	3401      	adds	r4, #1
 800287e:	2c10      	cmp	r4, #16
 8002880:	d180      	bne.n	8002784 <HAL_GPIO_DeInit+0x10>
	  }
    }
  }
}
 8002882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8002886:	2300      	movs	r3, #0
 8002888:	e7e4      	b.n	8002854 <HAL_GPIO_DeInit+0xe0>
 800288a:	464b      	mov	r3, r9
 800288c:	e7e2      	b.n	8002854 <HAL_GPIO_DeInit+0xe0>
 800288e:	2302      	movs	r3, #2
 8002890:	e7e0      	b.n	8002854 <HAL_GPIO_DeInit+0xe0>
 8002892:	2303      	movs	r3, #3
 8002894:	e7de      	b.n	8002854 <HAL_GPIO_DeInit+0xe0>
 8002896:	2304      	movs	r3, #4
 8002898:	e7dc      	b.n	8002854 <HAL_GPIO_DeInit+0xe0>
 800289a:	2305      	movs	r3, #5
 800289c:	e7da      	b.n	8002854 <HAL_GPIO_DeInit+0xe0>
 800289e:	2306      	movs	r3, #6
 80028a0:	e7d8      	b.n	8002854 <HAL_GPIO_DeInit+0xe0>
 80028a2:	2307      	movs	r3, #7
 80028a4:	e7d6      	b.n	8002854 <HAL_GPIO_DeInit+0xe0>
 80028a6:	2308      	movs	r3, #8
 80028a8:	e7d4      	b.n	8002854 <HAL_GPIO_DeInit+0xe0>
 80028aa:	bf00      	nop
 80028ac:	40013c00 	.word	0x40013c00
 80028b0:	40020000 	.word	0x40020000
 80028b4:	40021800 	.word	0x40021800
 80028b8:	40021c00 	.word	0x40021c00

080028bc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028bc:	b10a      	cbz	r2, 80028c2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80028be:	6181      	str	r1, [r0, #24]
 80028c0:	4770      	bx	lr
 80028c2:	0409      	lsls	r1, r1, #16
 80028c4:	e7fb      	b.n	80028be <HAL_GPIO_WritePin+0x2>

080028c6 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80028c6:	6943      	ldr	r3, [r0, #20]
 80028c8:	4059      	eors	r1, r3
 80028ca:	6141      	str	r1, [r0, #20]
 80028cc:	4770      	bx	lr

080028ce <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80028ce:	6803      	ldr	r3, [r0, #0]
 80028d0:	699a      	ldr	r2, [r3, #24]
 80028d2:	0791      	lsls	r1, r2, #30
 80028d4:	d501      	bpl.n	80028da <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80028d6:	2200      	movs	r2, #0
 80028d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028da:	699a      	ldr	r2, [r3, #24]
 80028dc:	07d2      	lsls	r2, r2, #31
 80028de:	d403      	bmi.n	80028e8 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80028e0:	699a      	ldr	r2, [r3, #24]
 80028e2:	f042 0201 	orr.w	r2, r2, #1
 80028e6:	619a      	str	r2, [r3, #24]
 80028e8:	4770      	bx	lr

080028ea <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80028ea:	b530      	push	{r4, r5, lr}
 80028ec:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80028ee:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80028f2:	6805      	ldr	r5, [r0, #0]
 80028f4:	4323      	orrs	r3, r4
 80028f6:	0d64      	lsrs	r4, r4, #21
 80028f8:	6868      	ldr	r0, [r5, #4]
 80028fa:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 80028fe:	4319      	orrs	r1, r3
 8002900:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8002904:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002908:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 800290c:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8002910:	f044 0403 	orr.w	r4, r4, #3
 8002914:	ea20 0404 	bic.w	r4, r0, r4
 8002918:	4321      	orrs	r1, r4
 800291a:	6069      	str	r1, [r5, #4]
 800291c:	bd30      	pop	{r4, r5, pc}

0800291e <I2C_WaitOnFlagUntilTimeout>:
{
 800291e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002922:	9f06      	ldr	r7, [sp, #24]
 8002924:	4604      	mov	r4, r0
 8002926:	4688      	mov	r8, r1
 8002928:	4616      	mov	r6, r2
 800292a:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800292c:	6822      	ldr	r2, [r4, #0]
 800292e:	6993      	ldr	r3, [r2, #24]
 8002930:	ea38 0303 	bics.w	r3, r8, r3
 8002934:	bf0c      	ite	eq
 8002936:	2301      	moveq	r3, #1
 8002938:	2300      	movne	r3, #0
 800293a:	42b3      	cmp	r3, r6
 800293c:	d002      	beq.n	8002944 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800293e:	2000      	movs	r0, #0
}
 8002940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002944:	1c6b      	adds	r3, r5, #1
 8002946:	d0f2      	beq.n	800292e <I2C_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002948:	b955      	cbnz	r5, 8002960 <I2C_WaitOnFlagUntilTimeout+0x42>
        hi2c->State = HAL_I2C_STATE_READY;
 800294a:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 800294c:	2003      	movs	r0, #3
        hi2c->State = HAL_I2C_STATE_READY;
 800294e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002952:	2300      	movs	r3, #0
 8002954:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002958:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 800295c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002960:	f7ff f8ee 	bl	8001b40 <HAL_GetTick>
 8002964:	1bc0      	subs	r0, r0, r7
 8002966:	4285      	cmp	r5, r0
 8002968:	d2e0      	bcs.n	800292c <I2C_WaitOnFlagUntilTimeout+0xe>
 800296a:	e7ee      	b.n	800294a <I2C_WaitOnFlagUntilTimeout+0x2c>

0800296c <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800296c:	6803      	ldr	r3, [r0, #0]
{
 800296e:	b570      	push	{r4, r5, r6, lr}
 8002970:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002972:	6998      	ldr	r0, [r3, #24]
{
 8002974:	460d      	mov	r5, r1
 8002976:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002978:	f010 0010 	ands.w	r0, r0, #16
 800297c:	d112      	bne.n	80029a4 <I2C_IsAcknowledgeFailed+0x38>
 800297e:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8002980:	1c69      	adds	r1, r5, #1
 8002982:	d010      	beq.n	80029a6 <I2C_IsAcknowledgeFailed+0x3a>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002984:	b94d      	cbnz	r5, 800299a <I2C_IsAcknowledgeFailed+0x2e>
          hi2c->State = HAL_I2C_STATE_READY;
 8002986:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 8002988:	2003      	movs	r0, #3
          hi2c->State = HAL_I2C_STATE_READY;
 800298a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800298e:	2300      	movs	r3, #0
 8002990:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8002994:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002998:	bd70      	pop	{r4, r5, r6, pc}
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800299a:	f7ff f8d1 	bl	8001b40 <HAL_GetTick>
 800299e:	1b80      	subs	r0, r0, r6
 80029a0:	4285      	cmp	r5, r0
 80029a2:	d3f0      	bcc.n	8002986 <I2C_IsAcknowledgeFailed+0x1a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029a4:	6823      	ldr	r3, [r4, #0]
 80029a6:	6999      	ldr	r1, [r3, #24]
 80029a8:	068a      	lsls	r2, r1, #26
 80029aa:	d5e9      	bpl.n	8002980 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029ac:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029ae:	2520      	movs	r5, #32
    I2C_Flush_TXDR(hi2c);
 80029b0:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029b2:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029b4:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80029b6:	f7ff ff8a 	bl	80028ce <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80029ba:	6822      	ldr	r2, [r4, #0]
    return HAL_ERROR;
 80029bc:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 80029be:	6853      	ldr	r3, [r2, #4]
 80029c0:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80029c4:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80029c8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80029cc:	f023 0301 	bic.w	r3, r3, #1
 80029d0:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80029d2:	2304      	movs	r3, #4
 80029d4:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d6:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80029d8:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80029dc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 80029e4:	bd70      	pop	{r4, r5, r6, pc}

080029e6 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80029e6:	b570      	push	{r4, r5, r6, lr}
 80029e8:	4604      	mov	r4, r0
 80029ea:	460d      	mov	r5, r1
 80029ec:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029ee:	6823      	ldr	r3, [r4, #0]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	079b      	lsls	r3, r3, #30
 80029f4:	d501      	bpl.n	80029fa <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80029f6:	2000      	movs	r0, #0
 80029f8:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80029fa:	4632      	mov	r2, r6
 80029fc:	4629      	mov	r1, r5
 80029fe:	4620      	mov	r0, r4
 8002a00:	f7ff ffb4 	bl	800296c <I2C_IsAcknowledgeFailed>
 8002a04:	b9b0      	cbnz	r0, 8002a34 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8002a06:	1c6a      	adds	r2, r5, #1
 8002a08:	d0f1      	beq.n	80029ee <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a0a:	b96d      	cbnz	r5, 8002a28 <I2C_WaitOnTXISFlagUntilTimeout+0x42>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a0c:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8002a0e:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a10:	f043 0320 	orr.w	r3, r3, #32
 8002a14:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a16:	2320      	movs	r3, #32
 8002a18:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002a22:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002a26:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a28:	f7ff f88a 	bl	8001b40 <HAL_GetTick>
 8002a2c:	1b80      	subs	r0, r0, r6
 8002a2e:	4285      	cmp	r5, r0
 8002a30:	d2dd      	bcs.n	80029ee <I2C_WaitOnTXISFlagUntilTimeout+0x8>
 8002a32:	e7eb      	b.n	8002a0c <I2C_WaitOnTXISFlagUntilTimeout+0x26>
      return HAL_ERROR;
 8002a34:	2001      	movs	r0, #1
}
 8002a36:	bd70      	pop	{r4, r5, r6, pc}

08002a38 <I2C_RequestMemoryWrite>:
{
 8002a38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a3a:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002a3c:	4b18      	ldr	r3, [pc, #96]	; (8002aa0 <I2C_RequestMemoryWrite+0x68>)
{
 8002a3e:	4604      	mov	r4, r0
 8002a40:	9e09      	ldr	r6, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002a42:	9300      	str	r3, [sp, #0]
{
 8002a44:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002a46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a4a:	b2fa      	uxtb	r2, r7
 8002a4c:	f7ff ff4d 	bl	80028ea <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a50:	4632      	mov	r2, r6
 8002a52:	9908      	ldr	r1, [sp, #32]
 8002a54:	4620      	mov	r0, r4
 8002a56:	f7ff ffc6 	bl	80029e6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a5a:	b128      	cbz	r0, 8002a68 <I2C_RequestMemoryWrite+0x30>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a5c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d110      	bne.n	8002a84 <I2C_RequestMemoryWrite+0x4c>
      return HAL_ERROR;
 8002a62:	2001      	movs	r0, #1
}
 8002a64:	b003      	add	sp, #12
 8002a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a68:	2f01      	cmp	r7, #1
 8002a6a:	6823      	ldr	r3, [r4, #0]
 8002a6c:	d10c      	bne.n	8002a88 <I2C_RequestMemoryWrite+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a6e:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002a70:	2200      	movs	r2, #0
 8002a72:	2180      	movs	r1, #128	; 0x80
 8002a74:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a76:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002a78:	9b08      	ldr	r3, [sp, #32]
 8002a7a:	9600      	str	r6, [sp, #0]
 8002a7c:	f7ff ff4f 	bl	800291e <I2C_WaitOnFlagUntilTimeout>
 8002a80:	2800      	cmp	r0, #0
 8002a82:	d0ef      	beq.n	8002a64 <I2C_RequestMemoryWrite+0x2c>
      return HAL_TIMEOUT;
 8002a84:	2003      	movs	r0, #3
 8002a86:	e7ed      	b.n	8002a64 <I2C_RequestMemoryWrite+0x2c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a88:	0a2a      	lsrs	r2, r5, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a8a:	9908      	ldr	r1, [sp, #32]
 8002a8c:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a8e:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a90:	4632      	mov	r2, r6
 8002a92:	f7ff ffa8 	bl	80029e6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a96:	2800      	cmp	r0, #0
 8002a98:	d1e0      	bne.n	8002a5c <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a9a:	6823      	ldr	r3, [r4, #0]
 8002a9c:	e7e7      	b.n	8002a6e <I2C_RequestMemoryWrite+0x36>
 8002a9e:	bf00      	nop
 8002aa0:	80002000 	.word	0x80002000

08002aa4 <I2C_RequestMemoryRead>:
{
 8002aa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002aa6:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002aa8:	4b17      	ldr	r3, [pc, #92]	; (8002b08 <I2C_RequestMemoryRead+0x64>)
{
 8002aaa:	4604      	mov	r4, r0
 8002aac:	9e09      	ldr	r6, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002aae:	9300      	str	r3, [sp, #0]
{
 8002ab0:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	b2fa      	uxtb	r2, r7
 8002ab6:	f7ff ff18 	bl	80028ea <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aba:	4632      	mov	r2, r6
 8002abc:	9908      	ldr	r1, [sp, #32]
 8002abe:	4620      	mov	r0, r4
 8002ac0:	f7ff ff91 	bl	80029e6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ac4:	b128      	cbz	r0, 8002ad2 <I2C_RequestMemoryRead+0x2e>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ac6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002ac8:	2b04      	cmp	r3, #4
 8002aca:	d110      	bne.n	8002aee <I2C_RequestMemoryRead+0x4a>
      return HAL_ERROR;
 8002acc:	2001      	movs	r0, #1
}
 8002ace:	b003      	add	sp, #12
 8002ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ad2:	2f01      	cmp	r7, #1
 8002ad4:	6823      	ldr	r3, [r4, #0]
 8002ad6:	d10c      	bne.n	8002af2 <I2C_RequestMemoryRead+0x4e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ad8:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002ada:	2200      	movs	r2, #0
 8002adc:	2140      	movs	r1, #64	; 0x40
 8002ade:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ae0:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002ae2:	9b08      	ldr	r3, [sp, #32]
 8002ae4:	9600      	str	r6, [sp, #0]
 8002ae6:	f7ff ff1a 	bl	800291e <I2C_WaitOnFlagUntilTimeout>
 8002aea:	2800      	cmp	r0, #0
 8002aec:	d0ef      	beq.n	8002ace <I2C_RequestMemoryRead+0x2a>
      return HAL_TIMEOUT;
 8002aee:	2003      	movs	r0, #3
 8002af0:	e7ed      	b.n	8002ace <I2C_RequestMemoryRead+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002af2:	0a2a      	lsrs	r2, r5, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002af4:	9908      	ldr	r1, [sp, #32]
 8002af6:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002af8:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002afa:	4632      	mov	r2, r6
 8002afc:	f7ff ff73 	bl	80029e6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b00:	2800      	cmp	r0, #0
 8002b02:	d1e0      	bne.n	8002ac6 <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b04:	6823      	ldr	r3, [r4, #0]
 8002b06:	e7e7      	b.n	8002ad8 <I2C_RequestMemoryRead+0x34>
 8002b08:	80002000 	.word	0x80002000

08002b0c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002b0c:	b570      	push	{r4, r5, r6, lr}
 8002b0e:	4604      	mov	r4, r0
 8002b10:	460d      	mov	r5, r1
 8002b12:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b14:	6823      	ldr	r3, [r4, #0]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	069b      	lsls	r3, r3, #26
 8002b1a:	d501      	bpl.n	8002b20 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b20:	4632      	mov	r2, r6
 8002b22:	4629      	mov	r1, r5
 8002b24:	4620      	mov	r0, r4
 8002b26:	f7ff ff21 	bl	800296c <I2C_IsAcknowledgeFailed>
 8002b2a:	b9a0      	cbnz	r0, 8002b56 <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b2c:	b96d      	cbnz	r5, 8002b4a <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b2e:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8002b30:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b32:	f043 0320 	orr.w	r3, r3, #32
 8002b36:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002b38:	2320      	movs	r3, #32
 8002b3a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002b44:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002b48:	bd70      	pop	{r4, r5, r6, pc}
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b4a:	f7fe fff9 	bl	8001b40 <HAL_GetTick>
 8002b4e:	1b80      	subs	r0, r0, r6
 8002b50:	4285      	cmp	r5, r0
 8002b52:	d2df      	bcs.n	8002b14 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
 8002b54:	e7eb      	b.n	8002b2e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8002b56:	2001      	movs	r0, #1
}
 8002b58:	bd70      	pop	{r4, r5, r6, pc}

08002b5a <HAL_I2C_Init>:
{
 8002b5a:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8002b5c:	4604      	mov	r4, r0
 8002b5e:	2800      	cmp	r0, #0
 8002b60:	d04a      	beq.n	8002bf8 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b62:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002b66:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002b6a:	b91b      	cbnz	r3, 8002b74 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8002b6c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002b70:	f7fe fb62 	bl	8001238 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b74:	2324      	movs	r3, #36	; 0x24
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b76:	68e1      	ldr	r1, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b78:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b7c:	2901      	cmp	r1, #1
  __HAL_I2C_DISABLE(hi2c);
 8002b7e:	6823      	ldr	r3, [r4, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	f022 0201 	bic.w	r2, r2, #1
 8002b86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b88:	6862      	ldr	r2, [r4, #4]
 8002b8a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b8e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b9a:	d124      	bne.n	8002be6 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ba0:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ba2:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ba4:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002ba6:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ba8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002bac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bb0:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bb2:	68da      	ldr	r2, [r3, #12]
 8002bb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bb8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002bba:	6922      	ldr	r2, [r4, #16]
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	69a1      	ldr	r1, [r4, #24]
 8002bc0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002bc4:	6a21      	ldr	r1, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002bc6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002bc8:	69e2      	ldr	r2, [r4, #28]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	f042 0201 	orr.w	r2, r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002bd6:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd8:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002bda:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bde:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8002be4:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002be6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002bea:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002bec:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002bee:	d1d8      	bne.n	8002ba2 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002bf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bf4:	605a      	str	r2, [r3, #4]
 8002bf6:	e7d4      	b.n	8002ba2 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8002bf8:	2001      	movs	r0, #1
}
 8002bfa:	bd10      	pop	{r4, pc}

08002bfc <HAL_I2C_DeInit>:
{
 8002bfc:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8002bfe:	4604      	mov	r4, r0
 8002c00:	b198      	cbz	r0, 8002c2a <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8002c02:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c04:	2324      	movs	r3, #36	; 0x24
 8002c06:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002c0a:	6813      	ldr	r3, [r2, #0]
 8002c0c:	f023 0301 	bic.w	r3, r3, #1
 8002c10:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8002c12:	f7fe fb71 	bl	80012f8 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c16:	2000      	movs	r0, #0
 8002c18:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 8002c1a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8002c1e:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c22:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c24:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8002c28:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002c2a:	2001      	movs	r0, #1
}
 8002c2c:	bd10      	pop	{r4, pc}

08002c2e <HAL_I2C_Mem_Write>:
{
 8002c2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c32:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c34:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8002c38:	b085      	sub	sp, #20
 8002c3a:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c3c:	2b20      	cmp	r3, #32
{
 8002c3e:	460f      	mov	r7, r1
 8002c40:	9203      	str	r2, [sp, #12]
 8002c42:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8002c46:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c4a:	f040 80a6 	bne.w	8002d9a <HAL_I2C_Mem_Write+0x16c>
    if ((pData == NULL) || (Size == 0U))
 8002c4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002c50:	b91b      	cbnz	r3, 8002c5a <HAL_I2C_Mem_Write+0x2c>
      return  HAL_ERROR;
 8002c52:	2001      	movs	r0, #1
}
 8002c54:	b005      	add	sp, #20
 8002c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pData == NULL) || (Size == 0U))
 8002c5a:	f1ba 0f00 	cmp.w	sl, #0
 8002c5e:	d0f8      	beq.n	8002c52 <HAL_I2C_Mem_Write+0x24>
    __HAL_LOCK(hi2c);
 8002c60:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	f000 8098 	beq.w	8002d9a <HAL_I2C_Mem_Write+0x16c>
 8002c6a:	2501      	movs	r5, #1
 8002c6c:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002c70:	f7fe ff66 	bl	8001b40 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c74:	2319      	movs	r3, #25
 8002c76:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8002c78:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c7a:	462a      	mov	r2, r5
 8002c7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c80:	4620      	mov	r0, r4
 8002c82:	f7ff fe4c 	bl	800291e <I2C_WaitOnFlagUntilTimeout>
 8002c86:	4680      	mov	r8, r0
 8002c88:	b9d0      	cbnz	r0, 8002cc0 <HAL_I2C_Mem_Write+0x92>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c8a:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
 8002c8c:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c8e:	9601      	str	r6, [sp, #4]
 8002c90:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c92:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c96:	2340      	movs	r3, #64	; 0x40
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c98:	f8cd 9000 	str.w	r9, [sp]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8002ca0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ca2:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ca4:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8002ca6:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ca8:	465b      	mov	r3, fp
    hi2c->XferCount = Size;
 8002caa:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cae:	9a03      	ldr	r2, [sp, #12]
 8002cb0:	f7ff fec2 	bl	8002a38 <I2C_RequestMemoryWrite>
 8002cb4:	b130      	cbz	r0, 8002cc4 <HAL_I2C_Mem_Write+0x96>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cb6:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8002cb8:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cbc:	2b04      	cmp	r3, #4
 8002cbe:	d0c8      	beq.n	8002c52 <HAL_I2C_Mem_Write+0x24>
          return HAL_TIMEOUT;
 8002cc0:	2003      	movs	r0, #3
 8002cc2:	e7c7      	b.n	8002c54 <HAL_I2C_Mem_Write+0x26>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cc4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	2bff      	cmp	r3, #255	; 0xff
 8002cca:	d910      	bls.n	8002cee <HAL_I2C_Mem_Write+0xc0>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ccc:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002cce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cd2:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cd4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002cd6:	4639      	mov	r1, r7
 8002cd8:	4620      	mov	r0, r4
 8002cda:	f7ff fe06 	bl	80028ea <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cde:	4632      	mov	r2, r6
 8002ce0:	4649      	mov	r1, r9
 8002ce2:	4620      	mov	r0, r4
 8002ce4:	f7ff fe7f 	bl	80029e6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ce8:	b148      	cbz	r0, 8002cfe <HAL_I2C_Mem_Write+0xd0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002cec:	e7e6      	b.n	8002cbc <HAL_I2C_Mem_Write+0x8e>
      hi2c->XferSize = hi2c->XferCount;
 8002cee:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002cf0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cf4:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8002cf6:	b292      	uxth	r2, r2
 8002cf8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	e7eb      	b.n	8002cd6 <HAL_I2C_Mem_Write+0xa8>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8002cfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d00:	6822      	ldr	r2, [r4, #0]
 8002d02:	1c59      	adds	r1, r3, #1
 8002d04:	6261      	str	r1, [r4, #36]	; 0x24
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferSize--;
 8002d0a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002d0c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002d0e:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8002d10:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8002d12:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8002d14:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8002d16:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002d18:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8002d1a:	b9ba      	cbnz	r2, 8002d4c <HAL_I2C_Mem_Write+0x11e>
 8002d1c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	b1a3      	cbz	r3, 8002d4c <HAL_I2C_Mem_Write+0x11e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d22:	9600      	str	r6, [sp, #0]
 8002d24:	464b      	mov	r3, r9
 8002d26:	2180      	movs	r1, #128	; 0x80
 8002d28:	4620      	mov	r0, r4
 8002d2a:	f7ff fdf8 	bl	800291e <I2C_WaitOnFlagUntilTimeout>
 8002d2e:	2800      	cmp	r0, #0
 8002d30:	d1c6      	bne.n	8002cc0 <HAL_I2C_Mem_Write+0x92>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d32:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	2bff      	cmp	r3, #255	; 0xff
 8002d38:	d927      	bls.n	8002d8a <HAL_I2C_Mem_Write+0x15c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d3a:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d40:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d42:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d44:	4639      	mov	r1, r7
 8002d46:	4620      	mov	r0, r4
 8002d48:	f7ff fdcf 	bl	80028ea <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8002d4c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1c4      	bne.n	8002cde <HAL_I2C_Mem_Write+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d54:	4632      	mov	r2, r6
 8002d56:	4649      	mov	r1, r9
 8002d58:	4620      	mov	r0, r4
 8002d5a:	f7ff fed7 	bl	8002b0c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d5e:	2800      	cmp	r0, #0
 8002d60:	d1c3      	bne.n	8002cea <HAL_I2C_Mem_Write+0xbc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d62:	6823      	ldr	r3, [r4, #0]
 8002d64:	2120      	movs	r1, #32
 8002d66:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002d6e:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002d72:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002d76:	f022 0201 	bic.w	r2, r2, #1
 8002d7a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002d7c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002d80:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d84:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002d88:	e764      	b.n	8002c54 <HAL_I2C_Mem_Write+0x26>
          hi2c->XferSize = hi2c->XferCount;
 8002d8a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d90:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8002d92:	b292      	uxth	r2, r2
 8002d94:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	e7d4      	b.n	8002d44 <HAL_I2C_Mem_Write+0x116>
    return HAL_BUSY;
 8002d9a:	2002      	movs	r0, #2
 8002d9c:	e75a      	b.n	8002c54 <HAL_I2C_Mem_Write+0x26>
	...

08002da0 <HAL_I2C_Mem_Read>:
{
 8002da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002da4:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002da6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8002daa:	b085      	sub	sp, #20
 8002dac:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dae:	2b20      	cmp	r3, #32
{
 8002db0:	460f      	mov	r7, r1
 8002db2:	9203      	str	r2, [sp, #12]
 8002db4:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8002db8:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dbc:	f040 80a9 	bne.w	8002f12 <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 8002dc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002dc2:	b91b      	cbnz	r3, 8002dcc <HAL_I2C_Mem_Read+0x2c>
      return  HAL_ERROR;
 8002dc4:	2001      	movs	r0, #1
}
 8002dc6:	b005      	add	sp, #20
 8002dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pData == NULL) || (Size == 0U))
 8002dcc:	f1ba 0f00 	cmp.w	sl, #0
 8002dd0:	d0f8      	beq.n	8002dc4 <HAL_I2C_Mem_Read+0x24>
    __HAL_LOCK(hi2c);
 8002dd2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	f000 809b 	beq.w	8002f12 <HAL_I2C_Mem_Read+0x172>
 8002ddc:	2501      	movs	r5, #1
 8002dde:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002de2:	f7fe fead 	bl	8001b40 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002de6:	2319      	movs	r3, #25
 8002de8:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8002dea:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002dec:	462a      	mov	r2, r5
 8002dee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002df2:	4620      	mov	r0, r4
 8002df4:	f7ff fd93 	bl	800291e <I2C_WaitOnFlagUntilTimeout>
 8002df8:	4680      	mov	r8, r0
 8002dfa:	b9d0      	cbnz	r0, 8002e32 <HAL_I2C_Mem_Read+0x92>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002dfc:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 8002dfe:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e00:	9601      	str	r6, [sp, #4]
 8002e02:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e04:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e08:	2340      	movs	r3, #64	; 0x40
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e0a:	f8cd 9000 	str.w	r9, [sp]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e0e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8002e12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e14:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e16:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8002e18:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e1a:	465b      	mov	r3, fp
    hi2c->XferCount = Size;
 8002e1c:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e20:	9a03      	ldr	r2, [sp, #12]
 8002e22:	f7ff fe3f 	bl	8002aa4 <I2C_RequestMemoryRead>
 8002e26:	b130      	cbz	r0, 8002e36 <HAL_I2C_Mem_Read+0x96>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e28:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8002e2a:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d0c8      	beq.n	8002dc4 <HAL_I2C_Mem_Read+0x24>
        return HAL_TIMEOUT;
 8002e32:	2003      	movs	r0, #3
 8002e34:	e7c7      	b.n	8002dc6 <HAL_I2C_Mem_Read+0x26>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e36:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	2bff      	cmp	r3, #255	; 0xff
 8002e3c:	4b36      	ldr	r3, [pc, #216]	; (8002f18 <HAL_I2C_Mem_Read+0x178>)
 8002e3e:	d944      	bls.n	8002eca <HAL_I2C_Mem_Read+0x12a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e40:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e48:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002e4a:	4639      	mov	r1, r7
 8002e4c:	4620      	mov	r0, r4
 8002e4e:	f7ff fd4c 	bl	80028ea <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002e52:	9600      	str	r6, [sp, #0]
 8002e54:	464b      	mov	r3, r9
 8002e56:	2200      	movs	r2, #0
 8002e58:	2104      	movs	r1, #4
 8002e5a:	4620      	mov	r0, r4
 8002e5c:	f7ff fd5f 	bl	800291e <I2C_WaitOnFlagUntilTimeout>
 8002e60:	2800      	cmp	r0, #0
 8002e62:	d1e6      	bne.n	8002e32 <HAL_I2C_Mem_Read+0x92>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8002e64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e66:	1c5a      	adds	r2, r3, #1
 8002e68:	6262      	str	r2, [r4, #36]	; 0x24
 8002e6a:	6822      	ldr	r2, [r4, #0]
 8002e6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e6e:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8002e70:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002e72:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002e74:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8002e76:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8002e78:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8002e7a:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8002e7c:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002e7e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8002e80:	b9ba      	cbnz	r2, 8002eb2 <HAL_I2C_Mem_Read+0x112>
 8002e82:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	b1a3      	cbz	r3, 8002eb2 <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e88:	9600      	str	r6, [sp, #0]
 8002e8a:	464b      	mov	r3, r9
 8002e8c:	2180      	movs	r1, #128	; 0x80
 8002e8e:	4620      	mov	r0, r4
 8002e90:	f7ff fd45 	bl	800291e <I2C_WaitOnFlagUntilTimeout>
 8002e94:	2800      	cmp	r0, #0
 8002e96:	d1cc      	bne.n	8002e32 <HAL_I2C_Mem_Read+0x92>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e98:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	2bff      	cmp	r3, #255	; 0xff
 8002e9e:	d91c      	bls.n	8002eda <HAL_I2C_Mem_Read+0x13a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ea0:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ea2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ea6:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ea8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002eaa:	4639      	mov	r1, r7
 8002eac:	4620      	mov	r0, r4
 8002eae:	f7ff fd1c 	bl	80028ea <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8002eb2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1cb      	bne.n	8002e52 <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eba:	4632      	mov	r2, r6
 8002ebc:	4649      	mov	r1, r9
 8002ebe:	4620      	mov	r0, r4
 8002ec0:	f7ff fe24 	bl	8002b0c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ec4:	b188      	cbz	r0, 8002eea <HAL_I2C_Mem_Read+0x14a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ec6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002ec8:	e7b1      	b.n	8002e2e <HAL_I2C_Mem_Read+0x8e>
      hi2c->XferSize = hi2c->XferCount;
 8002eca:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8002ed2:	b292      	uxth	r2, r2
 8002ed4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	e7b7      	b.n	8002e4a <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 8002eda:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002edc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ee0:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8002ee2:	b292      	uxth	r2, r2
 8002ee4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	e7df      	b.n	8002eaa <HAL_I2C_Mem_Read+0x10a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eea:	6823      	ldr	r3, [r4, #0]
 8002eec:	2120      	movs	r1, #32
 8002eee:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002ef6:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002efa:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002efe:	f022 0201 	bic.w	r2, r2, #1
 8002f02:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002f04:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002f08:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f0c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002f10:	e759      	b.n	8002dc6 <HAL_I2C_Mem_Read+0x26>
    return HAL_BUSY;
 8002f12:	2002      	movs	r0, #2
 8002f14:	e757      	b.n	8002dc6 <HAL_I2C_Mem_Read+0x26>
 8002f16:	bf00      	nop
 8002f18:	80002400 	.word	0x80002400

08002f1c <HAL_I2C_GetState>:
  return hi2c->State;
 8002f1c:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8002f20:	4770      	bx	lr

08002f22 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f22:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002f26:	b2d2      	uxtb	r2, r2
 8002f28:	2a20      	cmp	r2, #32
{
 8002f2a:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f2c:	d11d      	bne.n	8002f6a <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f2e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d019      	beq.n	8002f6a <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f36:	2324      	movs	r3, #36	; 0x24
 8002f38:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f3c:	6803      	ldr	r3, [r0, #0]
 8002f3e:	681c      	ldr	r4, [r3, #0]
 8002f40:	f024 0401 	bic.w	r4, r4, #1
 8002f44:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f46:	681c      	ldr	r4, [r3, #0]
 8002f48:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8002f4c:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f4e:	681c      	ldr	r4, [r3, #0]
 8002f50:	4321      	orrs	r1, r4
 8002f52:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f54:	6819      	ldr	r1, [r3, #0]
 8002f56:	f041 0101 	orr.w	r1, r1, #1
 8002f5a:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f5c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002f5e:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002f62:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002f66:	4618      	mov	r0, r3
 8002f68:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8002f6a:	2002      	movs	r0, #2
  }
}
 8002f6c:	bd10      	pop	{r4, pc}

08002f6e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f6e:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f70:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8002f74:	b2e4      	uxtb	r4, r4
 8002f76:	2c20      	cmp	r4, #32
 8002f78:	d11c      	bne.n	8002fb4 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f7a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d018      	beq.n	8002fb4 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f82:	2324      	movs	r3, #36	; 0x24
 8002f84:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f88:	6803      	ldr	r3, [r0, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	f022 0201 	bic.w	r2, r2, #1
 8002f90:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f92:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f94:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f98:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f9c:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	f042 0201 	orr.w	r2, r2, #1
 8002fa4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fa6:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002fa8:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002fac:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8002fb4:	2002      	movs	r0, #2
  }
}
 8002fb6:	bd10      	pop	{r4, pc}

08002fb8 <LTDC_SetConfig>:
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002fb8:	01d2      	lsls	r2, r2, #7

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
  tmp2 = (pLayerCfg->Alpha0 << 24);  
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002fba:	f04f 0c00 	mov.w	ip, #0
{
 8002fbe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002fc2:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8002fc4:	6804      	ldr	r4, [r0, #0]
 8002fc6:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002fc8:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8002fca:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8002fcc:	f8d1 e000 	ldr.w	lr, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002fd0:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8002fd2:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8002fd6:	f10e 0601 	add.w	r6, lr, #1
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8002fda:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002fde:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8002fe2:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002fe4:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8002fe6:	68e0      	ldr	r0, [r4, #12]
 8002fe8:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8002fec:	4430      	add	r0, r6
 8002fee:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8002ff2:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8002ff4:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8002ff6:	68e0      	ldr	r0, [r4, #12]
 8002ff8:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8002ffc:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002ffe:	6898      	ldr	r0, [r3, #8]
 8003000:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8003004:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8003006:	6888      	ldr	r0, [r1, #8]
 8003008:	68e6      	ldr	r6, [r4, #12]
 800300a:	3001      	adds	r0, #1
 800300c:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8003010:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003012:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8003014:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8003018:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800301a:	6918      	ldr	r0, [r3, #16]
 800301c:	f020 0007 	bic.w	r0, r0, #7
 8003020:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003022:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003024:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 8003026:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 800302a:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800302e:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8003032:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8003036:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 800303a:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 800303e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8003042:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003044:	6958      	ldr	r0, [r3, #20]
 8003046:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 800304a:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800304c:	6948      	ldr	r0, [r1, #20]
 800304e:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003050:	69d8      	ldr	r0, [r3, #28]
 8003052:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8003056:	f020 0007 	bic.w	r0, r0, #7
 800305a:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800305c:	6a08      	ldr	r0, [r1, #32]
 800305e:	69cd      	ldr	r5, [r1, #28]
 8003060:	4305      	orrs	r5, r0
 8003062:	61dd      	str	r5, [r3, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003064:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003066:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003068:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800306c:	6298      	str	r0, [r3, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800306e:	b31e      	cbz	r6, 80030b8 <LTDC_SetConfig+0x100>
  {
    tmp = 4;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003070:	2e01      	cmp	r6, #1
 8003072:	d023      	beq.n	80030bc <LTDC_SetConfig+0x104>
  {
    tmp = 3;
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003074:	1eb0      	subs	r0, r6, #2
 8003076:	2802      	cmp	r0, #2
 8003078:	d922      	bls.n	80030c0 <LTDC_SetConfig+0x108>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800307a:	2e07      	cmp	r6, #7
  {
    tmp = 2;
  }
  else
  {
    tmp = 1;
 800307c:	bf0c      	ite	eq
 800307e:	2002      	moveq	r0, #2
 8003080:	2001      	movne	r0, #1
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003082:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8003084:	eba7 070e 	sub.w	r7, r7, lr
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003088:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 800308c:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800308e:	6a8d      	ldr	r5, [r1, #40]	; 0x28

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003090:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8003092:	4345      	muls	r5, r0
 8003094:	4378      	muls	r0, r7
 8003096:	3003      	adds	r0, #3
 8003098:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800309c:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800309e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80030a0:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 80030a4:	f020 0007 	bic.w	r0, r0, #7
 80030a8:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80030aa:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80030ac:	58a3      	ldr	r3, [r4, r2]
 80030ae:	f043 0301 	orr.w	r3, r3, #1
 80030b2:	50a3      	str	r3, [r4, r2]
 80030b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4;
 80030b8:	2004      	movs	r0, #4
 80030ba:	e7e2      	b.n	8003082 <LTDC_SetConfig+0xca>
    tmp = 3;
 80030bc:	2003      	movs	r0, #3
 80030be:	e7e0      	b.n	8003082 <LTDC_SetConfig+0xca>
    tmp = 2;
 80030c0:	2002      	movs	r0, #2
 80030c2:	e7de      	b.n	8003082 <LTDC_SetConfig+0xca>

080030c4 <HAL_LTDC_Init>:
{
 80030c4:	b538      	push	{r3, r4, r5, lr}
  if(hltdc == NULL)
 80030c6:	4604      	mov	r4, r0
 80030c8:	2800      	cmp	r0, #0
 80030ca:	d067      	beq.n	800319c <HAL_LTDC_Init+0xd8>
  if(hltdc->State == HAL_LTDC_STATE_RESET)
 80030cc:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80030d0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80030d4:	b91b      	cbnz	r3, 80030de <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 80030d6:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80030da:	f7fe f933 	bl	8001344 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80030de:	2302      	movs	r3, #2
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80030e0:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80030e2:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80030e6:	6823      	ldr	r3, [r4, #0]
 80030e8:	699a      	ldr	r2, [r3, #24]
 80030ea:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80030ee:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80030f0:	6862      	ldr	r2, [r4, #4]
 80030f2:	6999      	ldr	r1, [r3, #24]
 80030f4:	4302      	orrs	r2, r0
 80030f6:	68e0      	ldr	r0, [r4, #12]
 80030f8:	4302      	orrs	r2, r0
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80030fa:	6920      	ldr	r0, [r4, #16]
 80030fc:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16);
 80030fe:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003100:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003102:	4927      	ldr	r1, [pc, #156]	; (80031a0 <HAL_LTDC_Init+0xdc>)
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003104:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	400a      	ands	r2, r1
 800310a:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003112:	69a0      	ldr	r0, [r4, #24]
 8003114:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 8003116:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003118:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800311a:	68da      	ldr	r2, [r3, #12]
 800311c:	400a      	ands	r2, r1
 800311e:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003126:	6a20      	ldr	r0, [r4, #32]
 8003128:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 800312a:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800312c:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	400a      	ands	r2, r1
 8003132:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003134:	691a      	ldr	r2, [r3, #16]
 8003136:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800313a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800313c:	4302      	orrs	r2, r0
 800313e:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003140:	695a      	ldr	r2, [r3, #20]
 8003142:	4011      	ands	r1, r2
 8003144:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 8003146:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003148:	695a      	ldr	r2, [r3, #20]
 800314a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800314e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003150:	430a      	orrs	r2, r1
 8003152:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003154:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 8003156:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800315a:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 800315e:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003162:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003164:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003166:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800316a:	430a      	orrs	r2, r1
 800316c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8003170:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8003174:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003176:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 8003178:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800317a:	f042 0204 	orr.w	r2, r2, #4
 800317e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 8003180:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003182:	f042 0202 	orr.w	r2, r2, #2
 8003186:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8003188:	699a      	ldr	r2, [r3, #24]
 800318a:	f042 0201 	orr.w	r2, r2, #1
 800318e:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8003190:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8003192:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8003196:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  return HAL_OK;
 800319a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800319c:	2001      	movs	r0, #1
}
 800319e:	bd38      	pop	{r3, r4, r5, pc}
 80031a0:	f000f800 	.word	0xf000f800

080031a4 <HAL_LTDC_ConfigLayer>:
{   
 80031a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 80031a6:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{   
 80031aa:	4606      	mov	r6, r0
 80031ac:	468e      	mov	lr, r1
 80031ae:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	f04f 0002 	mov.w	r0, #2
 80031b6:	d01d      	beq.n	80031f4 <HAL_LTDC_ConfigLayer+0x50>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80031b8:	2434      	movs	r4, #52	; 0x34
 80031ba:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80031bc:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  __HAL_LOCK(hltdc);
 80031c0:	2701      	movs	r7, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80031c2:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 80031c6:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80031ca:	3438      	adds	r4, #56	; 0x38
 80031cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031d8:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80031da:	4630      	mov	r0, r6
 80031dc:	4662      	mov	r2, ip
 80031de:	4671      	mov	r1, lr
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80031e0:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80031e2:	f7ff fee9 	bl	8002fb8 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80031e6:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 80031e8:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80031ea:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 80031ec:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80031f0:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 80031f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080031f6 <HAL_LTDC_GetState>:
  return hltdc->State;
 80031f6:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
}
 80031fa:	4770      	bx	lr

080031fc <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031fc:	4a02      	ldr	r2, [pc, #8]	; (8003208 <HAL_PWR_EnableBkUpAccess+0xc>)
 80031fe:	6813      	ldr	r3, [r2, #0]
 8003200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	4770      	bx	lr
 8003208:	40007000 	.word	0x40007000

0800320c <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800320c:	4b19      	ldr	r3, [pc, #100]	; (8003274 <HAL_PWREx_EnableOverDrive+0x68>)
{
 800320e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8003210:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003212:	4c19      	ldr	r4, [pc, #100]	; (8003278 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003214:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003218:	641a      	str	r2, [r3, #64]	; 0x40
 800321a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003220:	9301      	str	r3, [sp, #4]
 8003222:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003224:	6823      	ldr	r3, [r4, #0]
 8003226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800322a:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800322c:	f7fe fc88 	bl	8001b40 <HAL_GetTick>
 8003230:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003232:	6863      	ldr	r3, [r4, #4]
 8003234:	03da      	lsls	r2, r3, #15
 8003236:	d50c      	bpl.n	8003252 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003238:	6823      	ldr	r3, [r4, #0]
 800323a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800323e:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003240:	f7fe fc7e 	bl	8001b40 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003244:	4c0c      	ldr	r4, [pc, #48]	; (8003278 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 8003246:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003248:	6863      	ldr	r3, [r4, #4]
 800324a:	039b      	lsls	r3, r3, #14
 800324c:	d50a      	bpl.n	8003264 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800324e:	2000      	movs	r0, #0
 8003250:	e006      	b.n	8003260 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003252:	f7fe fc75 	bl	8001b40 <HAL_GetTick>
 8003256:	1b40      	subs	r0, r0, r5
 8003258:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800325c:	d9e9      	bls.n	8003232 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 800325e:	2003      	movs	r0, #3
}
 8003260:	b003      	add	sp, #12
 8003262:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003264:	f7fe fc6c 	bl	8001b40 <HAL_GetTick>
 8003268:	1b40      	subs	r0, r0, r5
 800326a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800326e:	d9eb      	bls.n	8003248 <HAL_PWREx_EnableOverDrive+0x3c>
 8003270:	e7f5      	b.n	800325e <HAL_PWREx_EnableOverDrive+0x52>
 8003272:	bf00      	nop
 8003274:	40023800 	.word	0x40023800
 8003278:	40007000 	.word	0x40007000

0800327c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 800327c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003280:	9d06      	ldr	r5, [sp, #24]
 8003282:	4604      	mov	r4, r0
 8003284:	460f      	mov	r7, r1
 8003286:	4616      	mov	r6, r2
 8003288:	4698      	mov	r8, r3
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800328a:	6821      	ldr	r1, [r4, #0]
 800328c:	688a      	ldr	r2, [r1, #8]
 800328e:	423a      	tst	r2, r7
 8003290:	bf14      	ite	ne
 8003292:	2201      	movne	r2, #1
 8003294:	2200      	moveq	r2, #0
 8003296:	42b2      	cmp	r2, r6
 8003298:	d102      	bne.n	80032a0 <QSPI_WaitFlagStateUntilTimeout+0x24>
        
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800329a:	2000      	movs	r0, #0
}
 800329c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80032a0:	1c6b      	adds	r3, r5, #1
 80032a2:	d0f3      	beq.n	800328c <QSPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 80032a4:	b94d      	cbnz	r5, 80032ba <QSPI_WaitFlagStateUntilTimeout+0x3e>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80032a6:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80032a8:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80032aa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80032ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80032b0:	f043 0301 	orr.w	r3, r3, #1
 80032b4:	6463      	str	r3, [r4, #68]	; 0x44
 80032b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 80032ba:	f7fe fc41 	bl	8001b40 <HAL_GetTick>
 80032be:	eba0 0008 	sub.w	r0, r0, r8
 80032c2:	4285      	cmp	r5, r0
 80032c4:	d2e1      	bcs.n	800328a <QSPI_WaitFlagStateUntilTimeout+0xe>
 80032c6:	e7ee      	b.n	80032a6 <QSPI_WaitFlagStateUntilTimeout+0x2a>

080032c8 <HAL_QSPI_Init>:
{
 80032c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80032ca:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80032cc:	f7fe fc38 	bl	8001b40 <HAL_GetTick>
 80032d0:	4605      	mov	r5, r0
  if(hqspi == NULL)
 80032d2:	2c00      	cmp	r4, #0
 80032d4:	d04d      	beq.n	8003372 <HAL_QSPI_Init+0xaa>
  __HAL_LOCK(hqspi);
 80032d6:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d04b      	beq.n	8003376 <HAL_QSPI_Init+0xae>
 80032de:	2301      	movs	r3, #1
 80032e0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80032e4:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80032e8:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 80032ec:	b93a      	cbnz	r2, 80032fe <HAL_QSPI_Init+0x36>
    hqspi->Lock = HAL_UNLOCKED;
 80032ee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 80032f2:	4620      	mov	r0, r4
 80032f4:	f7fe f8b0 	bl	8001458 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 80032f8:	f241 3388 	movw	r3, #5000	; 0x1388
 80032fc:	64a3      	str	r3, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 80032fe:	6820      	ldr	r0, [r4, #0]
 8003300:	68a1      	ldr	r1, [r4, #8]
 8003302:	6802      	ldr	r2, [r0, #0]
 8003304:	3901      	subs	r1, #1
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003306:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8003308:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800330c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003310:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8003312:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003314:	2200      	movs	r2, #0
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	4620      	mov	r0, r4
 800331a:	462b      	mov	r3, r5
 800331c:	f7ff ffae 	bl	800327c <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8003320:	bb10      	cbnz	r0, 8003368 <HAL_QSPI_Init+0xa0>
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8003322:	6822      	ldr	r2, [r4, #0]
 8003324:	69e5      	ldr	r5, [r4, #28]
 8003326:	68e3      	ldr	r3, [r4, #12]
 8003328:	6811      	ldr	r1, [r2, #0]
 800332a:	432b      	orrs	r3, r5
 800332c:	6a25      	ldr	r5, [r4, #32]
 800332e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8003332:	432b      	orrs	r3, r5
 8003334:	6865      	ldr	r5, [r4, #4]
 8003336:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 800333a:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800333e:	430b      	orrs	r3, r1
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8003340:	69a1      	ldr	r1, [r4, #24]
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8003342:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8003344:	6963      	ldr	r3, [r4, #20]
 8003346:	6855      	ldr	r5, [r2, #4]
 8003348:	430b      	orrs	r3, r1
 800334a:	6921      	ldr	r1, [r4, #16]
 800334c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003350:	490a      	ldr	r1, [pc, #40]	; (800337c <HAL_QSPI_Init+0xb4>)
 8003352:	4029      	ands	r1, r5
 8003354:	430b      	orrs	r3, r1
 8003356:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8003358:	6813      	ldr	r3, [r2, #0]
 800335a:	f043 0301 	orr.w	r3, r3, #1
 800335e:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8003360:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8003362:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8003364:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8003368:	2300      	movs	r3, #0
 800336a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800336e:	b003      	add	sp, #12
 8003370:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8003372:	2001      	movs	r0, #1
 8003374:	e7fb      	b.n	800336e <HAL_QSPI_Init+0xa6>
  __HAL_LOCK(hqspi);
 8003376:	2002      	movs	r0, #2
 8003378:	e7f9      	b.n	800336e <HAL_QSPI_Init+0xa6>
 800337a:	bf00      	nop
 800337c:	ffe0f8fe 	.word	0xffe0f8fe

08003380 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003380:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003384:	4604      	mov	r4, r0
 8003386:	b918      	cbnz	r0, 8003390 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8003388:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800338a:	b002      	add	sp, #8
 800338c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003390:	6803      	ldr	r3, [r0, #0]
 8003392:	07d8      	lsls	r0, r3, #31
 8003394:	d410      	bmi.n	80033b8 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003396:	6823      	ldr	r3, [r4, #0]
 8003398:	0799      	lsls	r1, r3, #30
 800339a:	d45e      	bmi.n	800345a <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800339c:	6823      	ldr	r3, [r4, #0]
 800339e:	0719      	lsls	r1, r3, #28
 80033a0:	f100 80a3 	bmi.w	80034ea <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033a4:	6823      	ldr	r3, [r4, #0]
 80033a6:	075a      	lsls	r2, r3, #29
 80033a8:	f100 80c4 	bmi.w	8003534 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033ac:	69a2      	ldr	r2, [r4, #24]
 80033ae:	2a00      	cmp	r2, #0
 80033b0:	f040 812e 	bne.w	8003610 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 80033b4:	2000      	movs	r0, #0
 80033b6:	e7e8      	b.n	800338a <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033b8:	4b93      	ldr	r3, [pc, #588]	; (8003608 <HAL_RCC_OscConfig+0x288>)
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	f002 020c 	and.w	r2, r2, #12
 80033c0:	2a04      	cmp	r2, #4
 80033c2:	d007      	beq.n	80033d4 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	f002 020c 	and.w	r2, r2, #12
 80033ca:	2a08      	cmp	r2, #8
 80033cc:	d10a      	bne.n	80033e4 <HAL_RCC_OscConfig+0x64>
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	025a      	lsls	r2, r3, #9
 80033d2:	d507      	bpl.n	80033e4 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d4:	4b8c      	ldr	r3, [pc, #560]	; (8003608 <HAL_RCC_OscConfig+0x288>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	039b      	lsls	r3, r3, #14
 80033da:	d5dc      	bpl.n	8003396 <HAL_RCC_OscConfig+0x16>
 80033dc:	6863      	ldr	r3, [r4, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1d9      	bne.n	8003396 <HAL_RCC_OscConfig+0x16>
 80033e2:	e7d1      	b.n	8003388 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033e4:	6863      	ldr	r3, [r4, #4]
 80033e6:	4d88      	ldr	r5, [pc, #544]	; (8003608 <HAL_RCC_OscConfig+0x288>)
 80033e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ec:	d111      	bne.n	8003412 <HAL_RCC_OscConfig+0x92>
 80033ee:	682b      	ldr	r3, [r5, #0]
 80033f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80033f6:	f7fe fba3 	bl	8001b40 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fa:	4d83      	ldr	r5, [pc, #524]	; (8003608 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 80033fc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fe:	682b      	ldr	r3, [r5, #0]
 8003400:	039f      	lsls	r7, r3, #14
 8003402:	d4c8      	bmi.n	8003396 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003404:	f7fe fb9c 	bl	8001b40 <HAL_GetTick>
 8003408:	1b80      	subs	r0, r0, r6
 800340a:	2864      	cmp	r0, #100	; 0x64
 800340c:	d9f7      	bls.n	80033fe <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800340e:	2003      	movs	r0, #3
 8003410:	e7bb      	b.n	800338a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003412:	b99b      	cbnz	r3, 800343c <HAL_RCC_OscConfig+0xbc>
 8003414:	682b      	ldr	r3, [r5, #0]
 8003416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800341a:	602b      	str	r3, [r5, #0]
 800341c:	682b      	ldr	r3, [r5, #0]
 800341e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003422:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003424:	f7fe fb8c 	bl	8001b40 <HAL_GetTick>
 8003428:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800342a:	682b      	ldr	r3, [r5, #0]
 800342c:	0398      	lsls	r0, r3, #14
 800342e:	d5b2      	bpl.n	8003396 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003430:	f7fe fb86 	bl	8001b40 <HAL_GetTick>
 8003434:	1b80      	subs	r0, r0, r6
 8003436:	2864      	cmp	r0, #100	; 0x64
 8003438:	d9f7      	bls.n	800342a <HAL_RCC_OscConfig+0xaa>
 800343a:	e7e8      	b.n	800340e <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800343c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003440:	682b      	ldr	r3, [r5, #0]
 8003442:	d103      	bne.n	800344c <HAL_RCC_OscConfig+0xcc>
 8003444:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003448:	602b      	str	r3, [r5, #0]
 800344a:	e7d0      	b.n	80033ee <HAL_RCC_OscConfig+0x6e>
 800344c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003450:	602b      	str	r3, [r5, #0]
 8003452:	682b      	ldr	r3, [r5, #0]
 8003454:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003458:	e7cc      	b.n	80033f4 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800345a:	4b6b      	ldr	r3, [pc, #428]	; (8003608 <HAL_RCC_OscConfig+0x288>)
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	f012 0f0c 	tst.w	r2, #12
 8003462:	d007      	beq.n	8003474 <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	f002 020c 	and.w	r2, r2, #12
 800346a:	2a08      	cmp	r2, #8
 800346c:	d111      	bne.n	8003492 <HAL_RCC_OscConfig+0x112>
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	0259      	lsls	r1, r3, #9
 8003472:	d40e      	bmi.n	8003492 <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003474:	4b64      	ldr	r3, [pc, #400]	; (8003608 <HAL_RCC_OscConfig+0x288>)
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	0792      	lsls	r2, r2, #30
 800347a:	d502      	bpl.n	8003482 <HAL_RCC_OscConfig+0x102>
 800347c:	68e2      	ldr	r2, [r4, #12]
 800347e:	2a01      	cmp	r2, #1
 8003480:	d182      	bne.n	8003388 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	6921      	ldr	r1, [r4, #16]
 8003486:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800348a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800348e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003490:	e784      	b.n	800339c <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003492:	68e3      	ldr	r3, [r4, #12]
 8003494:	4d5c      	ldr	r5, [pc, #368]	; (8003608 <HAL_RCC_OscConfig+0x288>)
 8003496:	b1bb      	cbz	r3, 80034c8 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8003498:	682b      	ldr	r3, [r5, #0]
 800349a:	f043 0301 	orr.w	r3, r3, #1
 800349e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80034a0:	f7fe fb4e 	bl	8001b40 <HAL_GetTick>
 80034a4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a6:	682b      	ldr	r3, [r5, #0]
 80034a8:	079f      	lsls	r7, r3, #30
 80034aa:	d507      	bpl.n	80034bc <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ac:	682b      	ldr	r3, [r5, #0]
 80034ae:	6922      	ldr	r2, [r4, #16]
 80034b0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80034b4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80034b8:	602b      	str	r3, [r5, #0]
 80034ba:	e76f      	b.n	800339c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034bc:	f7fe fb40 	bl	8001b40 <HAL_GetTick>
 80034c0:	1b80      	subs	r0, r0, r6
 80034c2:	2802      	cmp	r0, #2
 80034c4:	d9ef      	bls.n	80034a6 <HAL_RCC_OscConfig+0x126>
 80034c6:	e7a2      	b.n	800340e <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80034c8:	682b      	ldr	r3, [r5, #0]
 80034ca:	f023 0301 	bic.w	r3, r3, #1
 80034ce:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80034d0:	f7fe fb36 	bl	8001b40 <HAL_GetTick>
 80034d4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034d6:	682b      	ldr	r3, [r5, #0]
 80034d8:	0798      	lsls	r0, r3, #30
 80034da:	f57f af5f 	bpl.w	800339c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034de:	f7fe fb2f 	bl	8001b40 <HAL_GetTick>
 80034e2:	1b80      	subs	r0, r0, r6
 80034e4:	2802      	cmp	r0, #2
 80034e6:	d9f6      	bls.n	80034d6 <HAL_RCC_OscConfig+0x156>
 80034e8:	e791      	b.n	800340e <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034ea:	6963      	ldr	r3, [r4, #20]
 80034ec:	4d46      	ldr	r5, [pc, #280]	; (8003608 <HAL_RCC_OscConfig+0x288>)
 80034ee:	b183      	cbz	r3, 8003512 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 80034f0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80034f2:	f043 0301 	orr.w	r3, r3, #1
 80034f6:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80034f8:	f7fe fb22 	bl	8001b40 <HAL_GetTick>
 80034fc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034fe:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003500:	079b      	lsls	r3, r3, #30
 8003502:	f53f af4f 	bmi.w	80033a4 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003506:	f7fe fb1b 	bl	8001b40 <HAL_GetTick>
 800350a:	1b80      	subs	r0, r0, r6
 800350c:	2802      	cmp	r0, #2
 800350e:	d9f6      	bls.n	80034fe <HAL_RCC_OscConfig+0x17e>
 8003510:	e77d      	b.n	800340e <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8003512:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003514:	f023 0301 	bic.w	r3, r3, #1
 8003518:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800351a:	f7fe fb11 	bl	8001b40 <HAL_GetTick>
 800351e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003520:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003522:	079f      	lsls	r7, r3, #30
 8003524:	f57f af3e 	bpl.w	80033a4 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003528:	f7fe fb0a 	bl	8001b40 <HAL_GetTick>
 800352c:	1b80      	subs	r0, r0, r6
 800352e:	2802      	cmp	r0, #2
 8003530:	d9f6      	bls.n	8003520 <HAL_RCC_OscConfig+0x1a0>
 8003532:	e76c      	b.n	800340e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003534:	4b34      	ldr	r3, [pc, #208]	; (8003608 <HAL_RCC_OscConfig+0x288>)
 8003536:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003538:	00d0      	lsls	r0, r2, #3
 800353a:	d427      	bmi.n	800358c <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800353c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800353e:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003540:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003544:	641a      	str	r2, [r3, #64]	; 0x40
 8003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354c:	9301      	str	r3, [sp, #4]
 800354e:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003550:	4d2e      	ldr	r5, [pc, #184]	; (800360c <HAL_RCC_OscConfig+0x28c>)
 8003552:	682b      	ldr	r3, [r5, #0]
 8003554:	05d9      	lsls	r1, r3, #23
 8003556:	d51b      	bpl.n	8003590 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003558:	68a3      	ldr	r3, [r4, #8]
 800355a:	4d2b      	ldr	r5, [pc, #172]	; (8003608 <HAL_RCC_OscConfig+0x288>)
 800355c:	2b01      	cmp	r3, #1
 800355e:	d127      	bne.n	80035b0 <HAL_RCC_OscConfig+0x230>
 8003560:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003562:	f043 0301 	orr.w	r3, r3, #1
 8003566:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003568:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800356c:	f7fe fae8 	bl	8001b40 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003570:	4f25      	ldr	r7, [pc, #148]	; (8003608 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8003572:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003574:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003576:	079b      	lsls	r3, r3, #30
 8003578:	d53f      	bpl.n	80035fa <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 800357a:	2e00      	cmp	r6, #0
 800357c:	f43f af16 	beq.w	80033ac <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003580:	4a21      	ldr	r2, [pc, #132]	; (8003608 <HAL_RCC_OscConfig+0x288>)
 8003582:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003584:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003588:	6413      	str	r3, [r2, #64]	; 0x40
 800358a:	e70f      	b.n	80033ac <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 800358c:	2600      	movs	r6, #0
 800358e:	e7df      	b.n	8003550 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8003590:	682b      	ldr	r3, [r5, #0]
 8003592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003596:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003598:	f7fe fad2 	bl	8001b40 <HAL_GetTick>
 800359c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800359e:	682b      	ldr	r3, [r5, #0]
 80035a0:	05da      	lsls	r2, r3, #23
 80035a2:	d4d9      	bmi.n	8003558 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80035a4:	f7fe facc 	bl	8001b40 <HAL_GetTick>
 80035a8:	1bc0      	subs	r0, r0, r7
 80035aa:	2864      	cmp	r0, #100	; 0x64
 80035ac:	d9f7      	bls.n	800359e <HAL_RCC_OscConfig+0x21e>
 80035ae:	e72e      	b.n	800340e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035b0:	b9ab      	cbnz	r3, 80035de <HAL_RCC_OscConfig+0x25e>
 80035b2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035b4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035b8:	f023 0301 	bic.w	r3, r3, #1
 80035bc:	672b      	str	r3, [r5, #112]	; 0x70
 80035be:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80035c0:	f023 0304 	bic.w	r3, r3, #4
 80035c4:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80035c6:	f7fe fabb 	bl	8001b40 <HAL_GetTick>
 80035ca:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035cc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80035ce:	0798      	lsls	r0, r3, #30
 80035d0:	d5d3      	bpl.n	800357a <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035d2:	f7fe fab5 	bl	8001b40 <HAL_GetTick>
 80035d6:	1bc0      	subs	r0, r0, r7
 80035d8:	4540      	cmp	r0, r8
 80035da:	d9f7      	bls.n	80035cc <HAL_RCC_OscConfig+0x24c>
 80035dc:	e717      	b.n	800340e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035de:	2b05      	cmp	r3, #5
 80035e0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80035e2:	d103      	bne.n	80035ec <HAL_RCC_OscConfig+0x26c>
 80035e4:	f043 0304 	orr.w	r3, r3, #4
 80035e8:	672b      	str	r3, [r5, #112]	; 0x70
 80035ea:	e7b9      	b.n	8003560 <HAL_RCC_OscConfig+0x1e0>
 80035ec:	f023 0301 	bic.w	r3, r3, #1
 80035f0:	672b      	str	r3, [r5, #112]	; 0x70
 80035f2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80035f4:	f023 0304 	bic.w	r3, r3, #4
 80035f8:	e7b5      	b.n	8003566 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035fa:	f7fe faa1 	bl	8001b40 <HAL_GetTick>
 80035fe:	eba0 0008 	sub.w	r0, r0, r8
 8003602:	42a8      	cmp	r0, r5
 8003604:	d9b6      	bls.n	8003574 <HAL_RCC_OscConfig+0x1f4>
 8003606:	e702      	b.n	800340e <HAL_RCC_OscConfig+0x8e>
 8003608:	40023800 	.word	0x40023800
 800360c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003610:	4d24      	ldr	r5, [pc, #144]	; (80036a4 <HAL_RCC_OscConfig+0x324>)
 8003612:	68ab      	ldr	r3, [r5, #8]
 8003614:	f003 030c 	and.w	r3, r3, #12
 8003618:	2b08      	cmp	r3, #8
 800361a:	f43f aeb5 	beq.w	8003388 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 800361e:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003620:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8003622:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003626:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003628:	d12e      	bne.n	8003688 <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 800362a:	f7fe fa89 	bl	8001b40 <HAL_GetTick>
 800362e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003630:	682b      	ldr	r3, [r5, #0]
 8003632:	0199      	lsls	r1, r3, #6
 8003634:	d422      	bmi.n	800367c <HAL_RCC_OscConfig+0x2fc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003636:	6a22      	ldr	r2, [r4, #32]
 8003638:	69e3      	ldr	r3, [r4, #28]
 800363a:	4313      	orrs	r3, r2
 800363c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800363e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003642:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003646:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003648:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800364c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800364e:	4c15      	ldr	r4, [pc, #84]	; (80036a4 <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003650:	0852      	lsrs	r2, r2, #1
 8003652:	3a01      	subs	r2, #1
 8003654:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003658:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800365a:	682b      	ldr	r3, [r5, #0]
 800365c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003660:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003662:	f7fe fa6d 	bl	8001b40 <HAL_GetTick>
 8003666:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003668:	6823      	ldr	r3, [r4, #0]
 800366a:	019a      	lsls	r2, r3, #6
 800366c:	f53f aea2 	bmi.w	80033b4 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003670:	f7fe fa66 	bl	8001b40 <HAL_GetTick>
 8003674:	1b40      	subs	r0, r0, r5
 8003676:	2802      	cmp	r0, #2
 8003678:	d9f6      	bls.n	8003668 <HAL_RCC_OscConfig+0x2e8>
 800367a:	e6c8      	b.n	800340e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800367c:	f7fe fa60 	bl	8001b40 <HAL_GetTick>
 8003680:	1b80      	subs	r0, r0, r6
 8003682:	2802      	cmp	r0, #2
 8003684:	d9d4      	bls.n	8003630 <HAL_RCC_OscConfig+0x2b0>
 8003686:	e6c2      	b.n	800340e <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 8003688:	f7fe fa5a 	bl	8001b40 <HAL_GetTick>
 800368c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800368e:	682b      	ldr	r3, [r5, #0]
 8003690:	019b      	lsls	r3, r3, #6
 8003692:	f57f ae8f 	bpl.w	80033b4 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003696:	f7fe fa53 	bl	8001b40 <HAL_GetTick>
 800369a:	1b00      	subs	r0, r0, r4
 800369c:	2802      	cmp	r0, #2
 800369e:	d9f6      	bls.n	800368e <HAL_RCC_OscConfig+0x30e>
 80036a0:	e6b5      	b.n	800340e <HAL_RCC_OscConfig+0x8e>
 80036a2:	bf00      	nop
 80036a4:	40023800 	.word	0x40023800

080036a8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036a8:	4913      	ldr	r1, [pc, #76]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80036aa:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036ac:	688b      	ldr	r3, [r1, #8]
 80036ae:	f003 030c 	and.w	r3, r3, #12
 80036b2:	2b04      	cmp	r3, #4
 80036b4:	d003      	beq.n	80036be <HAL_RCC_GetSysClockFreq+0x16>
 80036b6:	2b08      	cmp	r3, #8
 80036b8:	d003      	beq.n	80036c2 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036ba:	4810      	ldr	r0, [pc, #64]	; (80036fc <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80036bc:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80036be:	4810      	ldr	r0, [pc, #64]	; (8003700 <HAL_RCC_GetSysClockFreq+0x58>)
 80036c0:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036c2:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80036c4:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036c6:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036c8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80036cc:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036d0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80036d4:	bf1a      	itte	ne
 80036d6:	480a      	ldrne	r0, [pc, #40]	; (8003700 <HAL_RCC_GetSysClockFreq+0x58>)
 80036d8:	2300      	movne	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036da:	4808      	ldreq	r0, [pc, #32]	; (80036fc <HAL_RCC_GetSysClockFreq+0x54>)
 80036dc:	fba1 0100 	umull	r0, r1, r1, r0
 80036e0:	f7fc fda4 	bl	800022c <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80036e4:	4b04      	ldr	r3, [pc, #16]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x50>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80036ec:	3301      	adds	r3, #1
 80036ee:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80036f0:	fbb0 f0f3 	udiv	r0, r0, r3
 80036f4:	bd08      	pop	{r3, pc}
 80036f6:	bf00      	nop
 80036f8:	40023800 	.word	0x40023800
 80036fc:	00f42400 	.word	0x00f42400
 8003700:	017d7840 	.word	0x017d7840

08003704 <HAL_RCC_ClockConfig>:
{
 8003704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003708:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800370a:	4604      	mov	r4, r0
 800370c:	b910      	cbnz	r0, 8003714 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800370e:	2001      	movs	r0, #1
 8003710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003714:	4a46      	ldr	r2, [pc, #280]	; (8003830 <HAL_RCC_ClockConfig+0x12c>)
 8003716:	6813      	ldr	r3, [r2, #0]
 8003718:	f003 030f 	and.w	r3, r3, #15
 800371c:	428b      	cmp	r3, r1
 800371e:	d328      	bcc.n	8003772 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003720:	6821      	ldr	r1, [r4, #0]
 8003722:	078f      	lsls	r7, r1, #30
 8003724:	d430      	bmi.n	8003788 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003726:	07c8      	lsls	r0, r1, #31
 8003728:	d443      	bmi.n	80037b2 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800372a:	4a41      	ldr	r2, [pc, #260]	; (8003830 <HAL_RCC_ClockConfig+0x12c>)
 800372c:	6813      	ldr	r3, [r2, #0]
 800372e:	f003 030f 	and.w	r3, r3, #15
 8003732:	429d      	cmp	r5, r3
 8003734:	d367      	bcc.n	8003806 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003736:	6822      	ldr	r2, [r4, #0]
 8003738:	0751      	lsls	r1, r2, #29
 800373a:	d470      	bmi.n	800381e <HAL_RCC_ClockConfig+0x11a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800373c:	0713      	lsls	r3, r2, #28
 800373e:	d507      	bpl.n	8003750 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003740:	4a3c      	ldr	r2, [pc, #240]	; (8003834 <HAL_RCC_ClockConfig+0x130>)
 8003742:	6921      	ldr	r1, [r4, #16]
 8003744:	6893      	ldr	r3, [r2, #8]
 8003746:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800374a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800374e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003750:	f7ff ffaa 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 8003754:	4b37      	ldr	r3, [pc, #220]	; (8003834 <HAL_RCC_ClockConfig+0x130>)
 8003756:	4a38      	ldr	r2, [pc, #224]	; (8003838 <HAL_RCC_ClockConfig+0x134>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800375e:	5cd3      	ldrb	r3, [r2, r3]
 8003760:	40d8      	lsrs	r0, r3
 8003762:	4b36      	ldr	r3, [pc, #216]	; (800383c <HAL_RCC_ClockConfig+0x138>)
 8003764:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003766:	2000      	movs	r0, #0
 8003768:	f7fe f958 	bl	8001a1c <HAL_InitTick>
  return HAL_OK;
 800376c:	2000      	movs	r0, #0
 800376e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003772:	6813      	ldr	r3, [r2, #0]
 8003774:	f023 030f 	bic.w	r3, r3, #15
 8003778:	430b      	orrs	r3, r1
 800377a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800377c:	6813      	ldr	r3, [r2, #0]
 800377e:	f003 030f 	and.w	r3, r3, #15
 8003782:	4299      	cmp	r1, r3
 8003784:	d1c3      	bne.n	800370e <HAL_RCC_ClockConfig+0xa>
 8003786:	e7cb      	b.n	8003720 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003788:	f011 0f04 	tst.w	r1, #4
 800378c:	4b29      	ldr	r3, [pc, #164]	; (8003834 <HAL_RCC_ClockConfig+0x130>)
 800378e:	d003      	beq.n	8003798 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8003796:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003798:	070e      	lsls	r6, r1, #28
 800379a:	d503      	bpl.n	80037a4 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800379c:	689a      	ldr	r2, [r3, #8]
 800379e:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80037a2:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037a4:	689a      	ldr	r2, [r3, #8]
 80037a6:	68a0      	ldr	r0, [r4, #8]
 80037a8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80037ac:	4302      	orrs	r2, r0
 80037ae:	609a      	str	r2, [r3, #8]
 80037b0:	e7b9      	b.n	8003726 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037b2:	6861      	ldr	r1, [r4, #4]
 80037b4:	4b1f      	ldr	r3, [pc, #124]	; (8003834 <HAL_RCC_ClockConfig+0x130>)
 80037b6:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b8:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ba:	d11c      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037bc:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c0:	d0a5      	beq.n	800370e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037c2:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c4:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c8:	4e1a      	ldr	r6, [pc, #104]	; (8003834 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ca:	f022 0203 	bic.w	r2, r2, #3
 80037ce:	430a      	orrs	r2, r1
 80037d0:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80037d2:	f7fe f9b5 	bl	8001b40 <HAL_GetTick>
 80037d6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037d8:	68b3      	ldr	r3, [r6, #8]
 80037da:	6862      	ldr	r2, [r4, #4]
 80037dc:	f003 030c 	and.w	r3, r3, #12
 80037e0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80037e4:	d0a1      	beq.n	800372a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e6:	f7fe f9ab 	bl	8001b40 <HAL_GetTick>
 80037ea:	1bc0      	subs	r0, r0, r7
 80037ec:	4540      	cmp	r0, r8
 80037ee:	d9f3      	bls.n	80037d8 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 80037f0:	2003      	movs	r0, #3
}
 80037f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037f6:	2902      	cmp	r1, #2
 80037f8:	d102      	bne.n	8003800 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037fa:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80037fe:	e7df      	b.n	80037c0 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003800:	f012 0f02 	tst.w	r2, #2
 8003804:	e7dc      	b.n	80037c0 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003806:	6813      	ldr	r3, [r2, #0]
 8003808:	f023 030f 	bic.w	r3, r3, #15
 800380c:	432b      	orrs	r3, r5
 800380e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003810:	6813      	ldr	r3, [r2, #0]
 8003812:	f003 030f 	and.w	r3, r3, #15
 8003816:	429d      	cmp	r5, r3
 8003818:	f47f af79 	bne.w	800370e <HAL_RCC_ClockConfig+0xa>
 800381c:	e78b      	b.n	8003736 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800381e:	4905      	ldr	r1, [pc, #20]	; (8003834 <HAL_RCC_ClockConfig+0x130>)
 8003820:	68e0      	ldr	r0, [r4, #12]
 8003822:	688b      	ldr	r3, [r1, #8]
 8003824:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003828:	4303      	orrs	r3, r0
 800382a:	608b      	str	r3, [r1, #8]
 800382c:	e786      	b.n	800373c <HAL_RCC_ClockConfig+0x38>
 800382e:	bf00      	nop
 8003830:	40023c00 	.word	0x40023c00
 8003834:	40023800 	.word	0x40023800
 8003838:	08015b7c 	.word	0x08015b7c
 800383c:	20000000 	.word	0x20000000

08003840 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003840:	4b04      	ldr	r3, [pc, #16]	; (8003854 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003842:	4a05      	ldr	r2, [pc, #20]	; (8003858 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800384a:	5cd3      	ldrb	r3, [r2, r3]
 800384c:	4a03      	ldr	r2, [pc, #12]	; (800385c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800384e:	6810      	ldr	r0, [r2, #0]
}
 8003850:	40d8      	lsrs	r0, r3
 8003852:	4770      	bx	lr
 8003854:	40023800 	.word	0x40023800
 8003858:	08015b8c 	.word	0x08015b8c
 800385c:	20000000 	.word	0x20000000

08003860 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003860:	4b04      	ldr	r3, [pc, #16]	; (8003874 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003862:	4a05      	ldr	r2, [pc, #20]	; (8003878 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800386a:	5cd3      	ldrb	r3, [r2, r3]
 800386c:	4a03      	ldr	r2, [pc, #12]	; (800387c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800386e:	6810      	ldr	r0, [r2, #0]
}
 8003870:	40d8      	lsrs	r0, r3
 8003872:	4770      	bx	lr
 8003874:	40023800 	.word	0x40023800
 8003878:	08015b8c 	.word	0x08015b8c
 800387c:	20000000 	.word	0x20000000

08003880 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003880:	230f      	movs	r3, #15
 8003882:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003884:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <HAL_RCC_GetClockConfig+0x34>)
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	f002 0203 	and.w	r2, r2, #3
 800388c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003894:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800389c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	08db      	lsrs	r3, r3, #3
 80038a2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80038a6:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80038a8:	4b03      	ldr	r3, [pc, #12]	; (80038b8 <HAL_RCC_GetClockConfig+0x38>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 030f 	and.w	r3, r3, #15
 80038b0:	600b      	str	r3, [r1, #0]
 80038b2:	4770      	bx	lr
 80038b4:	40023800 	.word	0x40023800
 80038b8:	40023c00 	.word	0x40023c00

080038bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80038c0:	6802      	ldr	r2, [r0, #0]
{
 80038c2:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80038c4:	f012 0601 	ands.w	r6, r2, #1
 80038c8:	d00b      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038ca:	4bb8      	ldr	r3, [pc, #736]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038cc:	6899      	ldr	r1, [r3, #8]
 80038ce:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80038d2:	6099      	str	r1, [r3, #8]
 80038d4:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80038d6:	6899      	ldr	r1, [r3, #8]
 80038d8:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80038da:	fab6 f686 	clz	r6, r6
 80038de:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038e0:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80038e2:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 80038e6:	d012      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038e8:	49b0      	ldr	r1, [pc, #704]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038ea:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80038ec:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80038f0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038f4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 80038f8:	bf08      	it	eq
 80038fa:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038fc:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003900:	bf16      	itet	ne
 8003902:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8003906:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003908:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800390a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800390e:	02d1      	lsls	r1, r2, #11
 8003910:	d510      	bpl.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003912:	48a6      	ldr	r0, [pc, #664]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003914:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003916:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800391a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800391e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003922:	ea43 0301 	orr.w	r3, r3, r1
 8003926:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800392a:	f000 8185 	beq.w	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800392e:	2900      	cmp	r1, #0
 8003930:	bf08      	it	eq
 8003932:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8003934:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8003938:	bf18      	it	ne
 800393a:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800393c:	0692      	lsls	r2, r2, #26
 800393e:	d531      	bpl.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003940:	4b9a      	ldr	r3, [pc, #616]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003942:	4f9b      	ldr	r7, [pc, #620]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8003944:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003946:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800394a:	641a      	str	r2, [r3, #64]	; 0x40
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003952:	9301      	str	r3, [sp, #4]
 8003954:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800395c:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800395e:	f7fe f8ef 	bl	8001b40 <HAL_GetTick>
 8003962:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	05db      	lsls	r3, r3, #23
 8003968:	f140 8168 	bpl.w	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x380>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800396c:	4f8f      	ldr	r7, [pc, #572]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800396e:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003970:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003974:	f040 816d 	bne.w	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x396>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003978:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800397a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800397e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003982:	4a8a      	ldr	r2, [pc, #552]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003984:	f040 818b 	bne.w	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8003988:	6891      	ldr	r1, [r2, #8]
 800398a:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 800398e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8003992:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8003996:	4301      	orrs	r1, r0
 8003998:	6091      	str	r1, [r2, #8]
 800399a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800399e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80039a0:	430b      	orrs	r3, r1
 80039a2:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80039a4:	6823      	ldr	r3, [r4, #0]
 80039a6:	06da      	lsls	r2, r3, #27
 80039a8:	d50c      	bpl.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80039aa:	4a80      	ldr	r2, [pc, #512]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80039ac:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80039b0:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80039b4:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 80039b8:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80039bc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80039be:	4301      	orrs	r1, r0
 80039c0:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039c4:	045f      	lsls	r7, r3, #17
 80039c6:	d508      	bpl.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039c8:	4978      	ldr	r1, [pc, #480]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80039ca:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80039cc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80039d0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80039d4:	4302      	orrs	r2, r0
 80039d6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039da:	0418      	lsls	r0, r3, #16
 80039dc:	d508      	bpl.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039de:	4973      	ldr	r1, [pc, #460]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80039e0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80039e2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80039e6:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80039ea:	4302      	orrs	r2, r0
 80039ec:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039f0:	03d9      	lsls	r1, r3, #15
 80039f2:	d508      	bpl.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039f4:	496d      	ldr	r1, [pc, #436]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80039f6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80039f8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80039fc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003a00:	4302      	orrs	r2, r0
 8003a02:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a06:	039a      	lsls	r2, r3, #14
 8003a08:	d508      	bpl.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a0a:	4968      	ldr	r1, [pc, #416]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a0c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8003a0e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003a12:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8003a16:	4302      	orrs	r2, r0
 8003a18:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a1c:	065f      	lsls	r7, r3, #25
 8003a1e:	d508      	bpl.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a20:	4962      	ldr	r1, [pc, #392]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a22:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003a24:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003a28:	f022 0203 	bic.w	r2, r2, #3
 8003a2c:	4302      	orrs	r2, r0
 8003a2e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a32:	0618      	lsls	r0, r3, #24
 8003a34:	d508      	bpl.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a36:	495d      	ldr	r1, [pc, #372]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a38:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003a3a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003a3e:	f022 020c 	bic.w	r2, r2, #12
 8003a42:	4302      	orrs	r2, r0
 8003a44:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a48:	05d9      	lsls	r1, r3, #23
 8003a4a:	d508      	bpl.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a4c:	4957      	ldr	r1, [pc, #348]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a4e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003a50:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003a54:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8003a58:	4302      	orrs	r2, r0
 8003a5a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a5e:	059a      	lsls	r2, r3, #22
 8003a60:	d508      	bpl.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a62:	4952      	ldr	r1, [pc, #328]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a64:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003a66:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003a6a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003a6e:	4302      	orrs	r2, r0
 8003a70:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a74:	055f      	lsls	r7, r3, #21
 8003a76:	d508      	bpl.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a78:	494c      	ldr	r1, [pc, #304]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003a7c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003a80:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003a84:	4302      	orrs	r2, r0
 8003a86:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003a8a:	0518      	lsls	r0, r3, #20
 8003a8c:	d508      	bpl.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003a8e:	4947      	ldr	r1, [pc, #284]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a92:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003a96:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003a9a:	4302      	orrs	r2, r0
 8003a9c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003aa0:	04d9      	lsls	r1, r3, #19
 8003aa2:	d508      	bpl.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003aa4:	4941      	ldr	r1, [pc, #260]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003aa6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8003aa8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003aac:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003ab0:	4302      	orrs	r2, r0
 8003ab2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003ab6:	049a      	lsls	r2, r3, #18
 8003ab8:	d508      	bpl.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003aba:	493c      	ldr	r1, [pc, #240]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003abc:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003abe:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003ac2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003ac6:	4302      	orrs	r2, r0
 8003ac8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003acc:	025f      	lsls	r7, r3, #9
 8003ace:	d508      	bpl.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ad0:	4936      	ldr	r1, [pc, #216]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ad2:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8003ad4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003ad8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003adc:	4302      	orrs	r2, r0
 8003ade:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003ae2:	0298      	lsls	r0, r3, #10
 8003ae4:	d50c      	bpl.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ae6:	4831      	ldr	r0, [pc, #196]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ae8:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8003aea:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8003aee:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003af2:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8003af6:	bf08      	it	eq
 8003af8:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003afa:	430a      	orrs	r2, r1
 8003afc:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8003b00:	f013 0f08 	tst.w	r3, #8
 8003b04:	bf18      	it	ne
 8003b06:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b08:	0359      	lsls	r1, r3, #13
 8003b0a:	d508      	bpl.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b0c:	4927      	ldr	r1, [pc, #156]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b0e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003b10:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003b14:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003b18:	4302      	orrs	r2, r0
 8003b1a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003b1e:	021a      	lsls	r2, r3, #8
 8003b20:	d509      	bpl.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b22:	4922      	ldr	r1, [pc, #136]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b24:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8003b28:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003b2c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003b30:	4302      	orrs	r2, r0
 8003b32:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003b36:	2e01      	cmp	r6, #1
 8003b38:	f000 80b5 	beq.w	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003b3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b40:	f000 80b1 	beq.w	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b44:	2d01      	cmp	r5, #1
 8003b46:	d175      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x378>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b48:	4d18      	ldr	r5, [pc, #96]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b4a:	682b      	ldr	r3, [r5, #0]
 8003b4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b50:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b52:	f7fd fff5 	bl	8001b40 <HAL_GetTick>
 8003b56:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b58:	682b      	ldr	r3, [r5, #0]
 8003b5a:	009f      	lsls	r7, r3, #2
 8003b5c:	f100 8127 	bmi.w	8003dae <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b60:	6821      	ldr	r1, [r4, #0]
 8003b62:	030e      	lsls	r6, r1, #12
 8003b64:	d501      	bpl.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 8003b66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003b68:	b11b      	cbz	r3, 8003b72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8003b6a:	02cd      	lsls	r5, r1, #11
 8003b6c:	d522      	bpl.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b70:	bb03      	cbnz	r3, 8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b72:	4a0e      	ldr	r2, [pc, #56]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b74:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b78:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003b7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b80:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8003b84:	4303      	orrs	r3, r0
 8003b86:	6960      	ldr	r0, [r4, #20]
 8003b88:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003b8c:	69a0      	ldr	r0, [r4, #24]
 8003b8e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003b92:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003b96:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003b9a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003b9c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003ba0:	3801      	subs	r0, #1
 8003ba2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003ba6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003baa:	e003      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	40007000 	.word	0x40007000
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003bb4:	0288      	lsls	r0, r1, #10
 8003bb6:	d515      	bpl.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8003bb8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003bba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bbe:	d111      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003bc0:	4a82      	ldr	r2, [pc, #520]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003bc2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003bc6:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003bca:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8003bce:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8003bd2:	4303      	orrs	r3, r0
 8003bd4:	6960      	ldr	r0, [r4, #20]
 8003bd6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003bda:	6a20      	ldr	r0, [r4, #32]
 8003bdc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003be0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003be4:	070a      	lsls	r2, r1, #28
 8003be6:	d519      	bpl.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003be8:	4978      	ldr	r1, [pc, #480]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003bea:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003bee:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003bf2:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8003bf6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	6962      	ldr	r2, [r4, #20]
 8003bfe:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003c02:	69e2      	ldr	r2, [r4, #28]
 8003c04:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8003c08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003c0c:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8003c10:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003c12:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003c16:	4313      	orrs	r3, r2
 8003c18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003c1c:	4c6b      	ldr	r4, [pc, #428]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003c1e:	6823      	ldr	r3, [r4, #0]
 8003c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c24:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c26:	f7fd ff8b 	bl	8001b40 <HAL_GetTick>
 8003c2a:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c2c:	6823      	ldr	r3, [r4, #0]
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	f140 80c4 	bpl.w	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x500>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003c34:	2000      	movs	r0, #0
 8003c36:	e009      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x390>
      plli2sused = 1;
 8003c38:	2601      	movs	r6, #1
 8003c3a:	e67b      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c3c:	f7fd ff80 	bl	8001b40 <HAL_GetTick>
 8003c40:	eba0 0008 	sub.w	r0, r0, r8
 8003c44:	2864      	cmp	r0, #100	; 0x64
 8003c46:	f67f ae8d 	bls.w	8003964 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8003c4a:	2003      	movs	r0, #3
}
 8003c4c:	b003      	add	sp, #12
 8003c4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c52:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003c54:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	f43f ae8d 	beq.w	8003978 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c60:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c66:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003c6a:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c6c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003c6e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003c72:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8003c74:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c78:	07d8      	lsls	r0, r3, #31
 8003c7a:	f57f ae7d 	bpl.w	8003978 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8003c7e:	f7fd ff5f 	bl	8001b40 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c82:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003c86:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c8a:	0799      	lsls	r1, r3, #30
 8003c8c:	f53f ae74 	bmi.w	8003978 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c90:	f7fd ff56 	bl	8001b40 <HAL_GetTick>
 8003c94:	eba0 0008 	sub.w	r0, r0, r8
 8003c98:	4548      	cmp	r0, r9
 8003c9a:	d9f5      	bls.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003c9c:	e7d5      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c9e:	6891      	ldr	r1, [r2, #8]
 8003ca0:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8003ca4:	e678      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8003ca6:	4e49      	ldr	r6, [pc, #292]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003ca8:	6833      	ldr	r3, [r6, #0]
 8003caa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cae:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003cb0:	f7fd ff46 	bl	8001b40 <HAL_GetTick>
 8003cb4:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cb6:	6833      	ldr	r3, [r6, #0]
 8003cb8:	011b      	lsls	r3, r3, #4
 8003cba:	d472      	bmi.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003cbc:	6822      	ldr	r2, [r4, #0]
 8003cbe:	07d7      	lsls	r7, r2, #31
 8003cc0:	d512      	bpl.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8003cc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003cc4:	b983      	cbnz	r3, 8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003cc6:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003cca:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003cce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cd2:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8003cd6:	430b      	orrs	r3, r1
 8003cd8:	6861      	ldr	r1, [r4, #4]
 8003cda:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8003cde:	68a1      	ldr	r1, [r4, #8]
 8003ce0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003ce4:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ce8:	0316      	lsls	r6, r2, #12
 8003cea:	d503      	bpl.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x438>
 8003cec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003cee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cf2:	d005      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x444>
 8003cf4:	02d0      	lsls	r0, r2, #11
 8003cf6:	d51e      	bpl.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x47a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003cf8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003cfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cfe:	d11a      	bne.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d00:	4932      	ldr	r1, [pc, #200]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003d02:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d06:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003d0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d0e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8003d12:	4303      	orrs	r3, r0
 8003d14:	6860      	ldr	r0, [r4, #4]
 8003d16:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003d1a:	68e0      	ldr	r0, [r4, #12]
 8003d1c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003d20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003d24:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8003d28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d2a:	f020 001f 	bic.w	r0, r0, #31
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	4303      	orrs	r3, r0
 8003d32:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d36:	01d1      	lsls	r1, r2, #7
 8003d38:	d511      	bpl.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d3a:	4924      	ldr	r1, [pc, #144]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003d3c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d40:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003d44:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8003d48:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8003d4c:	4303      	orrs	r3, r0
 8003d4e:	6860      	ldr	r0, [r4, #4]
 8003d50:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003d54:	6920      	ldr	r0, [r4, #16]
 8003d56:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003d5a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003d5e:	0192      	lsls	r2, r2, #6
 8003d60:	d50d      	bpl.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d62:	6923      	ldr	r3, [r4, #16]
 8003d64:	6862      	ldr	r2, [r4, #4]
 8003d66:	041b      	lsls	r3, r3, #16
 8003d68:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003d6c:	68e2      	ldr	r2, [r4, #12]
 8003d6e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003d72:	68a2      	ldr	r2, [r4, #8]
 8003d74:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8003d78:	4a14      	ldr	r2, [pc, #80]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003d7a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8003d7e:	4e13      	ldr	r6, [pc, #76]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003d80:	6833      	ldr	r3, [r6, #0]
 8003d82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d86:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003d88:	f7fd feda 	bl	8001b40 <HAL_GetTick>
 8003d8c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d8e:	6833      	ldr	r3, [r6, #0]
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	f53f aed7 	bmi.w	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x288>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d96:	f7fd fed3 	bl	8001b40 <HAL_GetTick>
 8003d9a:	1bc0      	subs	r0, r0, r7
 8003d9c:	2864      	cmp	r0, #100	; 0x64
 8003d9e:	d9f6      	bls.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003da0:	e753      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003da2:	f7fd fecd 	bl	8001b40 <HAL_GetTick>
 8003da6:	1bc0      	subs	r0, r0, r7
 8003da8:	2864      	cmp	r0, #100	; 0x64
 8003daa:	d984      	bls.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8003dac:	e74d      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003dae:	f7fd fec7 	bl	8001b40 <HAL_GetTick>
 8003db2:	1b80      	subs	r0, r0, r6
 8003db4:	2864      	cmp	r0, #100	; 0x64
 8003db6:	f67f aecf 	bls.w	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 8003dba:	e746      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003dbc:	f7fd fec0 	bl	8001b40 <HAL_GetTick>
 8003dc0:	1b40      	subs	r0, r0, r5
 8003dc2:	2864      	cmp	r0, #100	; 0x64
 8003dc4:	f67f af32 	bls.w	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x370>
 8003dc8:	e73f      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x38e>
 8003dca:	bf00      	nop
 8003dcc:	40023800 	.word	0x40023800

08003dd0 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8003dd0:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8003dd4:	d12a      	bne.n	8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8003dd6:	4b2c      	ldr	r3, [pc, #176]	; (8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003dd8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8003ddc:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
    switch (saiclocksource)
 8003de0:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8003de4:	d032      	beq.n	8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8003de6:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
  {
    saiclocksource = RCC->DCKCFGR1;
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
    switch (saiclocksource)
 8003dea:	d02d      	beq.n	8003e48 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 8003dec:	2a00      	cmp	r2, #0
 8003dee:	d148      	bne.n	8003e82 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {
    case 0: /* PLLSAI is the clock source for SAI*/
      {
        /* Configure the PLLSAI division factor */
        /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003df0:	685a      	ldr	r2, [r3, #4]
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003df2:	6858      	ldr	r0, [r3, #4]
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003df4:	0252      	lsls	r2, r2, #9
          /* In Case the PLL Source is HSE (External Clock) */
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
        }
        /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
        /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8003df6:	4a24      	ldr	r2, [pc, #144]	; (8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003df8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8003dfc:	bf54      	ite	pl
 8003dfe:	4b23      	ldrpl	r3, [pc, #140]	; (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003e00:	4b23      	ldrmi	r3, [pc, #140]	; (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8003e02:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003e06:	fbb3 f3f0 	udiv	r3, r3, r0
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8003e0a:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 8003e0e:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8003e12:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8003e14:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8003e18:	fbb0 f0f3 	udiv	r0, r0, r3

        /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8003e1c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003e20:	f3c3 2304 	ubfx	r3, r3, #8, #5
        /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);

        /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8003e24:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 8003e26:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8003e2a:	4770      	bx	lr
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8003e2c:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 8003e30:	d127      	bne.n	8003e82 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    saiclocksource = RCC->DCKCFGR1;
 8003e32:	4b15      	ldr	r3, [pc, #84]	; (8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003e34:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8003e38:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
    switch (saiclocksource)
 8003e3c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8003e40:	d004      	beq.n	8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8003e42:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8003e46:	e7d0      	b.n	8003dea <HAL_RCCEx_GetPeriphCLKFreq+0x1a>
      }
    case RCC_DCKCFGR1_SAI2SEL_1: /* External clock is the clock source for SAI2 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8003e48:	4812      	ldr	r0, [pc, #72]	; (8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8003e4a:	4770      	bx	lr
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003e4c:	685a      	ldr	r2, [r3, #4]
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003e4e:	6858      	ldr	r0, [r3, #4]
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003e50:	0253      	lsls	r3, r2, #9
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8003e52:	4a0d      	ldr	r2, [pc, #52]	; (8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003e54:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8003e58:	bf54      	ite	pl
 8003e5a:	4b0c      	ldrpl	r3, [pc, #48]	; (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003e5c:	4b0c      	ldrmi	r3, [pc, #48]	; (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8003e5e:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003e62:	fbb3 f3f0 	udiv	r3, r3, r0
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8003e66:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 8003e6a:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8003e6e:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8003e70:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8003e74:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8003e78:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003e7c:	f003 031f 	and.w	r3, r3, #31
 8003e80:	e7d0      	b.n	8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
  uint32_t frequency = 0;
 8003e82:	2000      	movs	r0, #0
      }
    }
  }

  return frequency;
}
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	00f42400 	.word	0x00f42400
 8003e90:	017d7840 	.word	0x017d7840
 8003e94:	00bb8000 	.word	0x00bb8000

08003e98 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003e98:	6802      	ldr	r2, [r0, #0]
{
 8003e9a:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003e9c:	68d3      	ldr	r3, [r2, #12]
{
 8003e9e:	4604      	mov	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003ea0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ea4:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ea6:	f7fd fe4b 	bl	8001b40 <HAL_GetTick>
 8003eaa:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003eac:	6823      	ldr	r3, [r4, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	069b      	lsls	r3, r3, #26
 8003eb2:	d501      	bpl.n	8003eb8 <HAL_RTC_WaitForSynchro+0x20>
    {       
      return HAL_TIMEOUT;
    } 
  }

  return HAL_OK;
 8003eb4:	2000      	movs	r0, #0
 8003eb6:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003eb8:	f7fd fe42 	bl	8001b40 <HAL_GetTick>
 8003ebc:	1b40      	subs	r0, r0, r5
 8003ebe:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003ec2:	d9f3      	bls.n	8003eac <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8003ec4:	2003      	movs	r0, #3
}
 8003ec6:	bd38      	pop	{r3, r4, r5, pc}

08003ec8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003ec8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0; 
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003eca:	6803      	ldr	r3, [r0, #0]
{
 8003ecc:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003ece:	68da      	ldr	r2, [r3, #12]
 8003ed0:	0652      	lsls	r2, r2, #25
 8003ed2:	d501      	bpl.n	8003ed8 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8003edc:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8003ede:	f7fd fe2f 	bl	8001b40 <HAL_GetTick>
 8003ee2:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003ee4:	6823      	ldr	r3, [r4, #0]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	065b      	lsls	r3, r3, #25
 8003eea:	d4f3      	bmi.n	8003ed4 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003eec:	f7fd fe28 	bl	8001b40 <HAL_GetTick>
 8003ef0:	1b40      	subs	r0, r0, r5
 8003ef2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003ef6:	d9f5      	bls.n	8003ee4 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8003ef8:	2003      	movs	r0, #3
}
 8003efa:	bd38      	pop	{r3, r4, r5, pc}

08003efc <HAL_RTC_Init>:
{
 8003efc:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8003efe:	4604      	mov	r4, r0
 8003f00:	b1b0      	cbz	r0, 8003f30 <HAL_RTC_Init+0x34>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003f02:	7f43      	ldrb	r3, [r0, #29]
 8003f04:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003f08:	b913      	cbnz	r3, 8003f10 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8003f0a:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8003f0c:	f7fd fb14 	bl	8001538 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8003f10:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f12:	22ca      	movs	r2, #202	; 0xca
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003f14:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8003f16:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f18:	6823      	ldr	r3, [r4, #0]
 8003f1a:	625a      	str	r2, [r3, #36]	; 0x24
 8003f1c:	2253      	movs	r2, #83	; 0x53
 8003f1e:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003f20:	f7ff ffd2 	bl	8003ec8 <RTC_EnterInitMode>
 8003f24:	6823      	ldr	r3, [r4, #0]
 8003f26:	b128      	cbz	r0, 8003f34 <HAL_RTC_Init+0x38>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8003f28:	22ff      	movs	r2, #255	; 0xff
 8003f2a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003f2c:	2304      	movs	r3, #4
 8003f2e:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 8003f30:	2001      	movs	r0, #1
}
 8003f32:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003f34:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003f36:	6925      	ldr	r5, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003f38:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8003f3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f40:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003f42:	6862      	ldr	r2, [r4, #4]
 8003f44:	6899      	ldr	r1, [r3, #8]
 8003f46:	432a      	orrs	r2, r5
 8003f48:	6965      	ldr	r5, [r4, #20]
 8003f4a:	432a      	orrs	r2, r5
 8003f4c:	430a      	orrs	r2, r1
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8003f4e:	68a1      	ldr	r1, [r4, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003f50:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003f52:	68e2      	ldr	r2, [r4, #12]
 8003f54:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType); 
 8003f5c:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8003f5e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f66:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8003f68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f6a:	f022 0208 	bic.w	r2, r2, #8
 8003f6e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType); 
 8003f70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f72:	430a      	orrs	r2, r1
 8003f74:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8003f76:	22ff      	movs	r2, #255	; 0xff
 8003f78:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 8003f7e:	bd38      	pop	{r3, r4, r5, pc}

08003f80 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 8003f80:	2300      	movs	r3, #0
  
  while(Value >= 10)
 8003f82:	2809      	cmp	r0, #9
 8003f84:	d803      	bhi.n	8003f8e <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10;
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8003f86:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8003f8a:	b2c0      	uxtb	r0, r0
 8003f8c:	4770      	bx	lr
    Value -= 10;
 8003f8e:	380a      	subs	r0, #10
    bcdhigh++;
 8003f90:	3301      	adds	r3, #1
    Value -= 10;
 8003f92:	b2c0      	uxtb	r0, r0
 8003f94:	e7f5      	b.n	8003f82 <RTC_ByteToBcd2+0x2>

08003f96 <HAL_RTC_SetDate>:
{
 8003f96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8003f98:	7f03      	ldrb	r3, [r0, #28]
{
 8003f9a:	4605      	mov	r5, r0
 8003f9c:	2602      	movs	r6, #2
 __HAL_LOCK(hrtc);
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d030      	beq.n	8004004 <HAL_RTC_SetDate+0x6e>
 8003fa2:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8003fa4:	7746      	strb	r6, [r0, #29]
 __HAL_LOCK(hrtc);
 8003fa6:	7703      	strb	r3, [r0, #28]
 8003fa8:	784b      	ldrb	r3, [r1, #1]
 8003faa:	78c8      	ldrb	r0, [r1, #3]
 8003fac:	788e      	ldrb	r6, [r1, #2]
 8003fae:	780c      	ldrb	r4, [r1, #0]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003fb0:	2a00      	cmp	r2, #0
 8003fb2:	d148      	bne.n	8004046 <HAL_RTC_SetDate+0xb0>
 8003fb4:	06da      	lsls	r2, r3, #27
 8003fb6:	d503      	bpl.n	8003fc0 <HAL_RTC_SetDate+0x2a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003fb8:	f023 0310 	bic.w	r3, r3, #16
 8003fbc:	330a      	adds	r3, #10
 8003fbe:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8003fc0:	f7ff ffde 	bl	8003f80 <RTC_ByteToBcd2>
 8003fc4:	4607      	mov	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8003fc6:	7848      	ldrb	r0, [r1, #1]
 8003fc8:	f7ff ffda 	bl	8003f80 <RTC_ByteToBcd2>
 8003fcc:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003fce:	4630      	mov	r0, r6
 8003fd0:	f7ff ffd6 	bl	8003f80 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8003fd4:	ea40 3044 	orr.w	r0, r0, r4, lsl #13
 8003fd8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8003fdc:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003fe0:	682b      	ldr	r3, [r5, #0]
 8003fe2:	22ca      	movs	r2, #202	; 0xca
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003fe4:	4628      	mov	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003fe6:	625a      	str	r2, [r3, #36]	; 0x24
 8003fe8:	2253      	movs	r2, #83	; 0x53
 8003fea:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003fec:	f7ff ff6c 	bl	8003ec8 <RTC_EnterInitMode>
 8003ff0:	682b      	ldr	r3, [r5, #0]
 8003ff2:	4606      	mov	r6, r0
 8003ff4:	b140      	cbz	r0, 8004008 <HAL_RTC_SetDate+0x72>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8003ff6:	22ff      	movs	r2, #255	; 0xff
 8003ff8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003ffa:	2304      	movs	r3, #4
 8003ffc:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8003ffe:	2300      	movs	r3, #0
 8004000:	772b      	strb	r3, [r5, #28]
        return HAL_ERROR;
 8004002:	2601      	movs	r6, #1
}
 8004004:	4630      	mov	r0, r6
 8004006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004008:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 800400c:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8004010:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8004012:	68da      	ldr	r2, [r3, #12]
 8004014:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004018:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	069b      	lsls	r3, r3, #26
 800401e:	d40a      	bmi.n	8004036 <HAL_RTC_SetDate+0xa0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004020:	4628      	mov	r0, r5
 8004022:	f7ff ff39 	bl	8003e98 <HAL_RTC_WaitForSynchro>
 8004026:	b130      	cbz	r0, 8004036 <HAL_RTC_SetDate+0xa0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8004028:	682b      	ldr	r3, [r5, #0]
 800402a:	22ff      	movs	r2, #255	; 0xff
 800402c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800402e:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 8004030:	772e      	strb	r6, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004032:	776b      	strb	r3, [r5, #29]
 8004034:	e7e5      	b.n	8004002 <HAL_RTC_SetDate+0x6c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8004036:	682b      	ldr	r3, [r5, #0]
 8004038:	22ff      	movs	r2, #255	; 0xff
 800403a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 800403c:	2301      	movs	r3, #1
 800403e:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8004040:	2300      	movs	r3, #0
 8004042:	772b      	strb	r3, [r5, #28]
    return HAL_OK;    
 8004044:	e7de      	b.n	8004004 <HAL_RTC_SetDate+0x6e>
                  (((uint32_t)sDate->Month) << 8) | \
 8004046:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8004048:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
                  (((uint32_t)sDate->Month) << 8) | \
 800404c:	4330      	orrs	r0, r6
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800404e:	ea40 3444 	orr.w	r4, r0, r4, lsl #13
 8004052:	e7c5      	b.n	8003fe0 <HAL_RTC_SetDate+0x4a>

08004054 <HAL_RTC_SetTime>:
{
 8004054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8004056:	7f03      	ldrb	r3, [r0, #28]
{
 8004058:	4606      	mov	r6, r0
 800405a:	460f      	mov	r7, r1
 800405c:	2502      	movs	r5, #2
  __HAL_LOCK(hrtc);
 800405e:	2b01      	cmp	r3, #1
 8004060:	d02f      	beq.n	80040c2 <HAL_RTC_SetTime+0x6e>
 8004062:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004064:	7745      	strb	r5, [r0, #29]
  __HAL_LOCK(hrtc);
 8004066:	7703      	strb	r3, [r0, #28]
 8004068:	6803      	ldr	r3, [r0, #0]
 800406a:	784d      	ldrb	r5, [r1, #1]
 800406c:	7808      	ldrb	r0, [r1, #0]
 800406e:	788c      	ldrb	r4, [r1, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004070:	689b      	ldr	r3, [r3, #8]
  if(Format == RTC_FORMAT_BIN)
 8004072:	bb42      	cbnz	r2, 80040c6 <HAL_RTC_SetTime+0x72>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004074:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00;
 8004078:	bf08      	it	eq
 800407a:	730b      	strbeq	r3, [r1, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800407c:	f7ff ff80 	bl	8003f80 <RTC_ByteToBcd2>
 8004080:	4601      	mov	r1, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8004082:	4628      	mov	r0, r5
 8004084:	f7ff ff7c 	bl	8003f80 <RTC_ByteToBcd2>
 8004088:	4602      	mov	r2, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800408a:	4620      	mov	r0, r4
 800408c:	f7ff ff78 	bl	8003f80 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));  
 8004090:	7b3b      	ldrb	r3, [r7, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8004092:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8004096:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800409a:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800409e:	6833      	ldr	r3, [r6, #0]
 80040a0:	22ca      	movs	r2, #202	; 0xca
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80040a2:	4630      	mov	r0, r6
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80040a4:	625a      	str	r2, [r3, #36]	; 0x24
 80040a6:	2253      	movs	r2, #83	; 0x53
 80040a8:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80040aa:	f7ff ff0d 	bl	8003ec8 <RTC_EnterInitMode>
 80040ae:	6833      	ldr	r3, [r6, #0]
 80040b0:	4605      	mov	r5, r0
 80040b2:	b1a0      	cbz	r0, 80040de <HAL_RTC_SetTime+0x8a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80040b4:	22ff      	movs	r2, #255	; 0xff
 80040b6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80040b8:	2304      	movs	r3, #4
 80040ba:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 80040bc:	2300      	movs	r3, #0
 80040be:	7733      	strb	r3, [r6, #28]
        return HAL_ERROR;
 80040c0:	2501      	movs	r5, #1
}
 80040c2:	4628      	mov	r0, r5
 80040c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
              ((uint32_t)(sTime->Minutes) << 8) | \
 80040c6:	022d      	lsls	r5, r5, #8
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80040c8:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80040cc:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
      sTime->TimeFormat = 0x00;
 80040d0:	bf08      	it	eq
 80040d2:	730b      	strbeq	r3, [r1, #12]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80040d4:	4320      	orrs	r0, r4
              ((uint32_t)(sTime->TimeFormat) << 16));   
 80040d6:	7b0c      	ldrb	r4, [r1, #12]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80040d8:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80040dc:	e7df      	b.n	800409e <HAL_RTC_SetTime+0x4a>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80040de:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80040e2:	6978      	ldr	r0, [r7, #20]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80040e4:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 80040e8:	601c      	str	r4, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040f0:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	6899      	ldr	r1, [r3, #8]
 80040f6:	4302      	orrs	r2, r0
 80040f8:	430a      	orrs	r2, r1
 80040fa:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 80040fc:	68da      	ldr	r2, [r3, #12]
 80040fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004102:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	069b      	lsls	r3, r3, #26
 8004108:	d40a      	bmi.n	8004120 <HAL_RTC_SetTime+0xcc>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800410a:	4630      	mov	r0, r6
 800410c:	f7ff fec4 	bl	8003e98 <HAL_RTC_WaitForSynchro>
 8004110:	b130      	cbz	r0, 8004120 <HAL_RTC_SetTime+0xcc>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8004112:	6833      	ldr	r3, [r6, #0]
 8004114:	22ff      	movs	r2, #255	; 0xff
 8004116:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004118:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 800411a:	7735      	strb	r5, [r6, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 800411c:	7773      	strb	r3, [r6, #29]
 800411e:	e7cf      	b.n	80040c0 <HAL_RTC_SetTime+0x6c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004120:	6833      	ldr	r3, [r6, #0]
 8004122:	22ff      	movs	r2, #255	; 0xff
 8004124:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8004126:	2301      	movs	r3, #1
 8004128:	7773      	strb	r3, [r6, #29]
   __HAL_UNLOCK(hrtc); 
 800412a:	2300      	movs	r3, #0
 800412c:	7733      	strb	r3, [r6, #28]
   return HAL_OK;
 800412e:	e7c8      	b.n	80040c2 <HAL_RTC_SetTime+0x6e>

08004130 <HAL_RTC_SetAlarm>:
  __HAL_LOCK(hrtc);
 8004130:	7f03      	ldrb	r3, [r0, #28]
 8004132:	2b01      	cmp	r3, #1
{
 8004134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004138:	4604      	mov	r4, r0
 800413a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 800413e:	d056      	beq.n	80041ee <HAL_RTC_SetAlarm+0xbe>
 8004140:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004142:	7760      	strb	r0, [r4, #29]
 8004144:	6a0e      	ldr	r6, [r1, #32]
  __HAL_LOCK(hrtc);
 8004146:	7723      	strb	r3, [r4, #28]
 8004148:	6823      	ldr	r3, [r4, #0]
 800414a:	7808      	ldrb	r0, [r1, #0]
 800414c:	f891 9001 	ldrb.w	r9, [r1, #1]
 8004150:	788d      	ldrb	r5, [r1, #2]
 8004152:	f891 8024 	ldrb.w	r8, [r1, #36]	; 0x24
 8004156:	698f      	ldr	r7, [r1, #24]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004158:	689b      	ldr	r3, [r3, #8]
  if(Format == RTC_FORMAT_BIN)
 800415a:	2a00      	cmp	r2, #0
 800415c:	d149      	bne.n	80041f2 <HAL_RTC_SetAlarm+0xc2>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800415e:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8004162:	ea46 0607 	orr.w	r6, r6, r7
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8004166:	bf08      	it	eq
 8004168:	730b      	strbeq	r3, [r1, #12]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800416a:	f7ff ff09 	bl	8003f80 <RTC_ByteToBcd2>
 800416e:	4682      	mov	sl, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8004170:	4648      	mov	r0, r9
 8004172:	f7ff ff05 	bl	8003f80 <RTC_ByteToBcd2>
 8004176:	4602      	mov	r2, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004178:	4628      	mov	r0, r5
 800417a:	f7ff ff01 	bl	8003f80 <RTC_ByteToBcd2>
 800417e:	4681      	mov	r9, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8004180:	4640      	mov	r0, r8
 8004182:	f7ff fefd 	bl	8003f80 <RTC_ByteToBcd2>
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8004186:	7b0d      	ldrb	r5, [r1, #12]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8004188:	ea46 4505 	orr.w	r5, r6, r5, lsl #16
 800418c:	ea45 0509 	orr.w	r5, r5, r9
 8004190:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8004194:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 8004198:	ea45 6500 	orr.w	r5, r5, r0, lsl #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800419c:	69cb      	ldr	r3, [r1, #28]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800419e:	22ca      	movs	r2, #202	; 0xca
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80041a0:	684e      	ldr	r6, [r1, #4]
 80041a2:	431e      	orrs	r6, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041a4:	6823      	ldr	r3, [r4, #0]
 80041a6:	625a      	str	r2, [r3, #36]	; 0x24
 80041a8:	2253      	movs	r2, #83	; 0x53
 80041aa:	625a      	str	r2, [r3, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 80041ac:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80041ae:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80041b2:	689a      	ldr	r2, [r3, #8]
  if(sAlarm->Alarm == RTC_ALARM_A)
 80041b4:	d13d      	bne.n	8004232 <HAL_RTC_SetAlarm+0x102>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80041b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041ba:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80041bc:	689a      	ldr	r2, [r3, #8]
 80041be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041c2:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80041c4:	f7fd fcbc 	bl	8001b40 <HAL_GetTick>
 80041c8:	4680      	mov	r8, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80041ca:	6823      	ldr	r3, [r4, #0]
 80041cc:	68df      	ldr	r7, [r3, #12]
 80041ce:	f017 0701 	ands.w	r7, r7, #1
 80041d2:	d01f      	beq.n	8004214 <HAL_RTC_SetAlarm+0xe4>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80041d4:	61dd      	str	r5, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80041d6:	645e      	str	r6, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80041d8:	689a      	ldr	r2, [r3, #8]
 80041da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    __HAL_RTC_ALARMB_ENABLE(hrtc); 
 80041de:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);   
 80041e0:	22ff      	movs	r2, #255	; 0xff
 80041e2:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hrtc);
 80041e4:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);   
 80041e6:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY; 
 80041e8:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 80041ea:	7720      	strb	r0, [r4, #28]
  hrtc->State = HAL_RTC_STATE_READY; 
 80041ec:	7763      	strb	r3, [r4, #29]
}
 80041ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80041f2:	433e      	orrs	r6, r7
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80041f4:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80041f8:	ea45 0506 	orr.w	r5, r5, r6
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80041fc:	bf08      	it	eq
 80041fe:	730b      	strbeq	r3, [r1, #12]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8004200:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8004204:	7b08      	ldrb	r0, [r1, #12]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8004206:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 800420a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800420e:	ea45 6508 	orr.w	r5, r5, r8, lsl #24
 8004212:	e7c3      	b.n	800419c <HAL_RTC_SetAlarm+0x6c>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004214:	f7fd fc94 	bl	8001b40 <HAL_GetTick>
 8004218:	eba0 0008 	sub.w	r0, r0, r8
 800421c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004220:	d9d3      	bls.n	80041ca <HAL_RTC_SetAlarm+0x9a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004222:	6823      	ldr	r3, [r4, #0]
 8004224:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 8004226:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004228:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 800422a:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 800422c:	7727      	strb	r7, [r4, #28]
        return HAL_TIMEOUT;
 800422e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004232:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004236:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8004238:	689a      	ldr	r2, [r3, #8]
 800423a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800423e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8004240:	f7fd fc7e 	bl	8001b40 <HAL_GetTick>
 8004244:	4680      	mov	r8, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8004246:	6823      	ldr	r3, [r4, #0]
 8004248:	68df      	ldr	r7, [r3, #12]
 800424a:	f017 0702 	ands.w	r7, r7, #2
 800424e:	d005      	beq.n	800425c <HAL_RTC_SetAlarm+0x12c>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004250:	621d      	str	r5, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004252:	649e      	str	r6, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc); 
 8004254:	689a      	ldr	r2, [r3, #8]
 8004256:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800425a:	e7c0      	b.n	80041de <HAL_RTC_SetAlarm+0xae>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800425c:	f7fd fc70 	bl	8001b40 <HAL_GetTick>
 8004260:	eba0 0008 	sub.w	r0, r0, r8
 8004264:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004268:	d9ed      	bls.n	8004246 <HAL_RTC_SetAlarm+0x116>
 800426a:	e7da      	b.n	8004222 <HAL_RTC_SetAlarm+0xf2>

0800426c <HAL_RTCEx_SetTimeStamp>:
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
  
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 800426c:	7f03      	ldrb	r3, [r0, #28]
 800426e:	2b01      	cmp	r3, #1
 8004270:	f04f 0302 	mov.w	r3, #2
{
 8004274:	b510      	push	{r4, lr}
  __HAL_LOCK(hrtc);
 8004276:	d01d      	beq.n	80042b4 <HAL_RTCEx_SetTimeStamp+0x48>
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004278:	7743      	strb	r3, [r0, #29]
  
  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800427a:	6803      	ldr	r3, [r0, #0]
 800427c:	689c      	ldr	r4, [r3, #8]
 800427e:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8004282:	f024 0408 	bic.w	r4, r4, #8
    
  tmpreg|= TimeStampEdge;
 8004286:	430c      	orrs	r4, r1
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004288:	21ca      	movs	r1, #202	; 0xca
 800428a:	6259      	str	r1, [r3, #36]	; 0x24
 800428c:	2153      	movs	r1, #83	; 0x53
 800428e:	6259      	str	r1, [r3, #36]	; 0x24
  
  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8004290:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004292:	f021 0106 	bic.w	r1, r1, #6
 8004296:	64d9      	str	r1, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin); 
 8004298:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800429a:	430a      	orrs	r2, r1
 800429c:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800429e:	609c      	str	r4, [r3, #8]
  
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 80042a0:	689a      	ldr	r2, [r3, #8]
 80042a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042a6:	609a      	str	r2, [r3, #8]
  
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);    
 80042a8:	22ff      	movs	r2, #255	; 0xff
 80042aa:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY; 
 80042ac:	2301      	movs	r3, #1
 80042ae:	7743      	strb	r3, [r0, #29]
  
  /* Process Unlocked */ 
  __HAL_UNLOCK(hrtc);
 80042b0:	2300      	movs	r3, #0
 80042b2:	7703      	strb	r3, [r0, #28]
  __HAL_LOCK(hrtc);
 80042b4:	4618      	mov	r0, r3
  
  return HAL_OK;
}
 80042b6:	bd10      	pop	{r4, pc}

080042b8 <SAI_Disable>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 80042b8:	4b0e      	ldr	r3, [pc, #56]	; (80042f4 <SAI_Disable+0x3c>)
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80042ba:	6801      	ldr	r1, [r0, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	f641 3358 	movw	r3, #7000	; 0x1b58
 80042c2:	fbb2 f2f3 	udiv	r2, r2, r3
  __HAL_SAI_DISABLE(hsai);
 80042c6:	680b      	ldr	r3, [r1, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 80042c8:	0092      	lsls	r2, r2, #2
  __HAL_SAI_DISABLE(hsai);
 80042ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ce:	600b      	str	r3, [r1, #0]

  do 
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80042d0:	f112 32ff 	adds.w	r2, r2, #4294967295
 80042d4:	d207      	bcs.n	80042e6 <SAI_Disable+0x2e>
    {         
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80042d6:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80042da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042de:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
 80042e2:	2003      	movs	r0, #3
      break;
 80042e4:	4770      	bx	lr
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80042e6:	680b      	ldr	r3, [r1, #0]
 80042e8:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 80042ec:	d1f0      	bne.n	80042d0 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80042ee:	4618      	mov	r0, r3

  return status;
}
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	20000000 	.word	0x20000000

080042f8 <HAL_SAI_Init>:
{
 80042f8:	b570      	push	{r4, r5, r6, lr}
  if(hsai == NULL)
 80042fa:	4604      	mov	r4, r0
 80042fc:	2800      	cmp	r0, #0
 80042fe:	f000 80c5 	beq.w	800448c <HAL_SAI_Init+0x194>
  if(hsai->State == HAL_SAI_STATE_RESET)
 8004302:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 8004306:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800430a:	b91b      	cbnz	r3, 8004314 <HAL_SAI_Init+0x1c>
    hsai->Lock = HAL_UNLOCKED;
 800430c:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 8004310:	f7fd fb32 	bl	8001978 <HAL_SAI_MspInit>
  hsai->State = HAL_SAI_STATE_BUSY;
 8004314:	2302      	movs	r3, #2
  SAI_Disable(hsai);
 8004316:	4620      	mov	r0, r4
  hsai->State = HAL_SAI_STATE_BUSY;
 8004318:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  SAI_Disable(hsai);
 800431c:	f7ff ffcc 	bl	80042b8 <SAI_Disable>
  switch(hsai->Init.SynchroExt)
 8004320:	68e3      	ldr	r3, [r4, #12]
 8004322:	2b01      	cmp	r3, #1
 8004324:	f000 80a1 	beq.w	800446a <HAL_SAI_Init+0x172>
  uint32_t tmpregisterGCR = 0;
 8004328:	2b02      	cmp	r3, #2
 800432a:	bf0c      	ite	eq
 800432c:	2320      	moveq	r3, #32
 800432e:	2300      	movne	r3, #0
  switch(hsai->Init.Synchro)
 8004330:	68a2      	ldr	r2, [r4, #8]
 8004332:	2a02      	cmp	r2, #2
 8004334:	f000 809d 	beq.w	8004472 <HAL_SAI_Init+0x17a>
 8004338:	2a03      	cmp	r2, #3
 800433a:	f000 8098 	beq.w	800446e <HAL_SAI_Init+0x176>
  uint32_t syncen_bits = 0;
 800433e:	2a01      	cmp	r2, #1
 8004340:	bf0c      	ite	eq
 8004342:	f44f 6580 	moveq.w	r5, #1024	; 0x400
 8004346:	2500      	movne	r5, #0
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004348:	6822      	ldr	r2, [r4, #0]
 800434a:	4951      	ldr	r1, [pc, #324]	; (8004490 <HAL_SAI_Init+0x198>)
 800434c:	428a      	cmp	r2, r1
 800434e:	d003      	beq.n	8004358 <HAL_SAI_Init+0x60>
 8004350:	4850      	ldr	r0, [pc, #320]	; (8004494 <HAL_SAI_Init+0x19c>)
 8004352:	4282      	cmp	r2, r0
 8004354:	f040 8090 	bne.w	8004478 <HAL_SAI_Init+0x180>
    SAI1->GCR = tmpregisterGCR;
 8004358:	484f      	ldr	r0, [pc, #316]	; (8004498 <HAL_SAI_Init+0x1a0>)
    SAI2->GCR = tmpregisterGCR;
 800435a:	6003      	str	r3, [r0, #0]
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800435c:	69e3      	ldr	r3, [r4, #28]
 800435e:	b313      	cbz	r3, 80043a6 <HAL_SAI_Init+0xae>
    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8004360:	428a      	cmp	r2, r1
 8004362:	d003      	beq.n	800436c <HAL_SAI_Init+0x74>
 8004364:	4b4b      	ldr	r3, [pc, #300]	; (8004494 <HAL_SAI_Init+0x19c>)
 8004366:	429a      	cmp	r2, r3
 8004368:	f040 8088 	bne.w	800447c <HAL_SAI_Init+0x184>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800436c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004370:	f7ff fd2e 	bl	8003dd0 <HAL_RCCEx_GetPeriphCLKFreq>
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8004374:	6823      	ldr	r3, [r4, #0]
 8004376:	4a49      	ldr	r2, [pc, #292]	; (800449c <HAL_SAI_Init+0x1a4>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d002      	beq.n	8004382 <HAL_SAI_Init+0x8a>
 800437c:	3220      	adds	r2, #32
 800437e:	4293      	cmp	r3, r2
 8004380:	d103      	bne.n	800438a <HAL_SAI_Init+0x92>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004382:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004386:	f7ff fd23 	bl	8003dd0 <HAL_RCCEx_GetPeriphCLKFreq>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800438a:	220a      	movs	r2, #10
 800438c:	69e3      	ldr	r3, [r4, #28]
 800438e:	4350      	muls	r0, r2
 8004390:	025b      	lsls	r3, r3, #9
 8004392:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 8004396:	fbb0 f3f2 	udiv	r3, r0, r2
    if((tmpval % 10) > 8)
 800439a:	fb02 0013 	mls	r0, r2, r3, r0
 800439e:	2809      	cmp	r0, #9
      hsai->Init.Mckdiv+= 1;
 80043a0:	bf08      	it	eq
 80043a2:	3301      	addeq	r3, #1
 80043a4:	6223      	str	r3, [r4, #32]
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80043a6:	6863      	ldr	r3, [r4, #4]
 80043a8:	f033 0202 	bics.w	r2, r3, #2
 80043ac:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80043ae:	d167      	bne.n	8004480 <HAL_SAI_Init+0x188>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80043b0:	2a01      	cmp	r2, #1
 80043b2:	bf14      	ite	ne
 80043b4:	f44f 7100 	movne.w	r1, #512	; 0x200
 80043b8:	2100      	moveq	r1, #0
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80043ba:	6822      	ldr	r2, [r4, #0]
 80043bc:	4838      	ldr	r0, [pc, #224]	; (80044a0 <HAL_SAI_Init+0x1a8>)
 80043be:	6816      	ldr	r6, [r2, #0]
 80043c0:	4030      	ands	r0, r6
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80043c2:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80043c4:	4333      	orrs	r3, r6
 80043c6:	6b66      	ldr	r6, [r4, #52]	; 0x34
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80043c8:	6010      	str	r0, [r2, #0]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80043ca:	4333      	orrs	r3, r6
 80043cc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80043ce:	6810      	ldr	r0, [r2, #0]
 80043d0:	4333      	orrs	r3, r6
 80043d2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80043d4:	4333      	orrs	r3, r6
 80043d6:	6926      	ldr	r6, [r4, #16]
 80043d8:	4333      	orrs	r3, r6
 80043da:	6966      	ldr	r6, [r4, #20]
 80043dc:	4333      	orrs	r3, r6
 80043de:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80043e0:	6a20      	ldr	r0, [r4, #32]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80043e2:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80043e6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80043e8:	432b      	orrs	r3, r5
 80043ea:	430b      	orrs	r3, r1
 80043ec:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80043ee:	6853      	ldr	r3, [r2, #4]
 80043f0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80043f4:	f023 030f 	bic.w	r3, r3, #15
 80043f8:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80043fa:	69a3      	ldr	r3, [r4, #24]
 80043fc:	6851      	ldr	r1, [r2, #4]
 80043fe:	4303      	orrs	r3, r0
 8004400:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004402:	4303      	orrs	r3, r0
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8004404:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004406:	430b      	orrs	r3, r1
 8004408:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800440a:	4b26      	ldr	r3, [pc, #152]	; (80044a4 <HAL_SAI_Init+0x1ac>)
 800440c:	6891      	ldr	r1, [r2, #8]
 800440e:	400b      	ands	r3, r1
 8004410:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8004412:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004414:	6891      	ldr	r1, [r2, #8]
 8004416:	4303      	orrs	r3, r0
 8004418:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800441a:	4303      	orrs	r3, r0
 800441c:	430b      	orrs	r3, r1
 800441e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004420:	3901      	subs	r1, #1
 8004422:	430b      	orrs	r3, r1
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8004424:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004426:	3901      	subs	r1, #1
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8004428:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800442c:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800442e:	68d3      	ldr	r3, [r2, #12]
 8004430:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8004434:	f023 030f 	bic.w	r3, r3, #15
 8004438:	041b      	lsls	r3, r3, #16
 800443a:	0c1b      	lsrs	r3, r3, #16
 800443c:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800443e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004440:	68d1      	ldr	r1, [r2, #12]
 8004442:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004444:	4303      	orrs	r3, r0
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004446:	2000      	movs	r0, #0
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004448:	430b      	orrs	r3, r1
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800444a:	6e21      	ldr	r1, [r4, #96]	; 0x60
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800444c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8004450:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004452:	3901      	subs	r1, #1
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004454:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004458:	60d3      	str	r3, [r2, #12]
  hsai->State= HAL_SAI_STATE_READY;
 800445a:	2301      	movs	r3, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800445c:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  __HAL_UNLOCK(hsai);
 8004460:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  hsai->State= HAL_SAI_STATE_READY;
 8004464:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  return HAL_OK;
 8004468:	bd70      	pop	{r4, r5, r6, pc}
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800446a:	2310      	movs	r3, #16
 800446c:	e760      	b.n	8004330 <HAL_SAI_Init+0x38>
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800446e:	f043 0301 	orr.w	r3, r3, #1
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8004472:	f44f 6500 	mov.w	r5, #2048	; 0x800
      break;
 8004476:	e767      	b.n	8004348 <HAL_SAI_Init+0x50>
    SAI2->GCR = tmpregisterGCR;
 8004478:	480b      	ldr	r0, [pc, #44]	; (80044a8 <HAL_SAI_Init+0x1b0>)
 800447a:	e76e      	b.n	800435a <HAL_SAI_Init+0x62>
    uint32_t freq = 0;
 800447c:	2000      	movs	r0, #0
 800447e:	e779      	b.n	8004374 <HAL_SAI_Init+0x7c>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8004480:	2a01      	cmp	r2, #1
 8004482:	bf14      	ite	ne
 8004484:	2100      	movne	r1, #0
 8004486:	f44f 7100 	moveq.w	r1, #512	; 0x200
 800448a:	e796      	b.n	80043ba <HAL_SAI_Init+0xc2>
    return HAL_ERROR;
 800448c:	2001      	movs	r0, #1
}
 800448e:	bd70      	pop	{r4, r5, r6, pc}
 8004490:	40015804 	.word	0x40015804
 8004494:	40015824 	.word	0x40015824
 8004498:	40015800 	.word	0x40015800
 800449c:	40015c04 	.word	0x40015c04
 80044a0:	ff05c010 	.word	0xff05c010
 80044a4:	fff88000 	.word	0xfff88000
 80044a8:	40015c00 	.word	0x40015c00

080044ac <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80044ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80044b0:	4605      	mov	r5, r0
 80044b2:	b089      	sub	sp, #36	; 0x24
 80044b4:	460e      	mov	r6, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 80044b6:	f7fd fb43 	bl	8001b40 <HAL_GetTick>
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
 80044ba:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 80044bc:	4681      	mov	r9, r0
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 80044be:	2108      	movs	r1, #8
 80044c0:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2] = {0, 0};
 80044c2:	9300      	str	r3, [sp, #0]
 80044c4:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 80044c6:	f001 fb12 	bl	8005aee <SDMMC_CmdBlockLength>
  if(errorstate != HAL_OK)
 80044ca:	4604      	mov	r4, r0
 80044cc:	bb40      	cbnz	r0, 8004520 <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 80044ce:	6d29      	ldr	r1, [r5, #80]	; 0x50
 80044d0:	6828      	ldr	r0, [r5, #0]
 80044d2:	0409      	lsls	r1, r1, #16
 80044d4:	f001 fb9c 	bl	8005c10 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_OK)
 80044d8:	4604      	mov	r4, r0
 80044da:	bb08      	cbnz	r0, 8004520 <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80044dc:	f04f 33ff 	mov.w	r3, #4294967295
  config.DataLength    = 8;
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80044e0:	9006      	str	r0, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
  SDMMC_ConfigData(hsd->Instance, &config);
 80044e2:	a902      	add	r1, sp, #8
 80044e4:	6828      	ldr	r0, [r5, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80044e6:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8;
 80044e8:	2308      	movs	r3, #8
 80044ea:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80044ec:	2330      	movs	r3, #48	; 0x30
 80044ee:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80044f0:	2302      	movs	r3, #2
 80044f2:	9305      	str	r3, [sp, #20]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80044f4:	2301      	movs	r3, #1
 80044f6:	9307      	str	r3, [sp, #28]
  SDMMC_ConfigData(hsd->Instance, &config);
 80044f8:	f001 fae6 	bl	8005ac8 <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80044fc:	6828      	ldr	r0, [r5, #0]
 80044fe:	f001 fbb8 	bl	8005c72 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_OK)
 8004502:	4604      	mov	r4, r0
 8004504:	b960      	cbnz	r0, 8004520 <SD_FindSCR+0x74>
 8004506:	4607      	mov	r7, r0
  {
    return errorstate;
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8004508:	f240 482a 	movw	r8, #1066	; 0x42a
 800450c:	6828      	ldr	r0, [r5, #0]
 800450e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004510:	ea13 0f08 	tst.w	r3, r8
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8004514:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8004516:	d007      	beq.n	8004528 <SD_FindSCR+0x7c>
    {
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004518:	0719      	lsls	r1, r3, #28
 800451a:	d518      	bpl.n	800454e <SD_FindSCR+0xa2>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800451c:	2408      	movs	r4, #8
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800451e:	6384      	str	r4, [r0, #56]	; 0x38
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
  }

  return HAL_SD_ERROR_NONE;
}
 8004520:	4620      	mov	r0, r4
 8004522:	b009      	add	sp, #36	; 0x24
 8004524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8004528:	029b      	lsls	r3, r3, #10
 800452a:	d507      	bpl.n	800453c <SD_FindSCR+0x90>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800452c:	f001 fa16 	bl	800595c <SDMMC_ReadFIFO>
 8004530:	ab08      	add	r3, sp, #32
 8004532:	eb03 0387 	add.w	r3, r3, r7, lsl #2
      index++;
 8004536:	3701      	adds	r7, #1
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8004538:	f843 0c20 	str.w	r0, [r3, #-32]
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800453c:	f7fd fb00 	bl	8001b40 <HAL_GetTick>
 8004540:	eba0 0009 	sub.w	r0, r0, r9
 8004544:	3001      	adds	r0, #1
 8004546:	d1e1      	bne.n	800450c <SD_FindSCR+0x60>
      return HAL_SD_ERROR_TIMEOUT;
 8004548:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800454c:	e7e8      	b.n	8004520 <SD_FindSCR+0x74>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800454e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004550:	079a      	lsls	r2, r3, #30
 8004552:	d501      	bpl.n	8004558 <SD_FindSCR+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8004554:	2402      	movs	r4, #2
 8004556:	e7e2      	b.n	800451e <SD_FindSCR+0x72>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004558:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800455a:	069b      	lsls	r3, r3, #26
 800455c:	d501      	bpl.n	8004562 <SD_FindSCR+0xb6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800455e:	2420      	movs	r4, #32
 8004560:	e7dd      	b.n	800451e <SD_FindSCR+0x72>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004562:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8004566:	6383      	str	r3, [r0, #56]	; 0x38
 8004568:	9b00      	ldr	r3, [sp, #0]
 800456a:	ba1b      	rev	r3, r3
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800456c:	6073      	str	r3, [r6, #4]
 800456e:	9b01      	ldr	r3, [sp, #4]
 8004570:	ba1b      	rev	r3, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004572:	6033      	str	r3, [r6, #0]
  return HAL_SD_ERROR_NONE;
 8004574:	e7d4      	b.n	8004520 <SD_FindSCR+0x74>

08004576 <HAL_SD_GetCardCSD>:
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8004576:	6e43      	ldr	r3, [r0, #100]	; 0x64
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8004578:	0f9a      	lsrs	r2, r3, #30
 800457a:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 800457c:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8004580:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8004582:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8004586:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)tmp;
 8004588:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800458c:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)tmp;
 800458e:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8004592:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)tmp;
 8004594:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8004596:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8004598:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800459a:	0e1a      	lsrs	r2, r3, #24
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 800459c:	0112      	lsls	r2, r2, #4
 800459e:	80ca      	strh	r2, [r1, #6]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 80045a0:	88ca      	ldrh	r2, [r1, #6]
{
 80045a2:	b530      	push	{r4, r5, lr}
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 80045a4:	b292      	uxth	r2, r2
 80045a6:	f3c3 5403 	ubfx	r4, r3, #20, #4
 80045aa:	4322      	orrs	r2, r4
 80045ac:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 80045ae:	f3c3 4203 	ubfx	r2, r3, #16, #4
 80045b2:	720a      	strb	r2, [r1, #8]
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 80045b4:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 80045b8:	09d4      	lsrs	r4, r2, #7
 80045ba:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 80045bc:	f3c2 1480 	ubfx	r4, r2, #6, #1
 80045c0:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 80045c2:	f3c2 1440 	ubfx	r4, r2, #5, #1
 80045c6:	72cc      	strb	r4, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 80045c8:	f3c2 1400 	ubfx	r4, r2, #4, #1
 80045cc:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 80045ce:	2400      	movs	r4, #0
 80045d0:	734c      	strb	r4, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 80045d2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80045d4:	2c00      	cmp	r4, #0
 80045d6:	f040 8083 	bne.w	80046e0 <HAL_SD_GetCardCSD+0x16a>
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 80045da:	0292      	lsls	r2, r2, #10
    pCSD->DeviceSize |= (tmp) << 2;
 80045dc:	009b      	lsls	r3, r3, #2
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 80045de:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
    pCSD->DeviceSize |= (tmp) << 2;
 80045e2:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 80045e6:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp) << 2;
 80045e8:	690a      	ldr	r2, [r1, #16]
 80045ea:	4313      	orrs	r3, r2
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 80045ec:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp) << 2;
 80045ee:	610b      	str	r3, [r1, #16]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 80045f0:	690b      	ldr	r3, [r1, #16]
 80045f2:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 80045f6:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 80045f8:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 80045fc:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 80045fe:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8004602:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8004604:	f3c2 5342 	ubfx	r3, r2, #21, #3
 8004608:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 800460a:	f3c2 4382 	ubfx	r3, r2, #18, #3
 800460e:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8004610:	0bd3      	lsrs	r3, r2, #15
 8004612:	f003 0306 	and.w	r3, r3, #6
 8004616:	760b      	strb	r3, [r1, #24]
 8004618:	f3c2 2307 	ubfx	r3, r2, #8, #8
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 800461c:	7e0c      	ldrb	r4, [r1, #24]
 800461e:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8004622:	4322      	orrs	r2, r4
 8004624:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8004626:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8004628:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 800462a:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 800462c:	3402      	adds	r4, #2
 800462e:	40a2      	lsls	r2, r4
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8004630:	2401      	movs	r4, #1
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8004632:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8004634:	7a0d      	ldrb	r5, [r1, #8]
 8004636:	40ac      	lsls	r4, r5
 8004638:	6584      	str	r4, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 800463a:	0a64      	lsrs	r4, r4, #9
 800463c:	4362      	muls	r2, r4
 800463e:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 8004640:	f44f 7200 	mov.w	r2, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8004644:	6602      	str	r2, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8004646:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 800464a:	005b      	lsls	r3, r3, #1
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 800464c:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 800464e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004652:	768b      	strb	r3, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8004654:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8004656:	7e8a      	ldrb	r2, [r1, #26]
 8004658:	f3c3 14c0 	ubfx	r4, r3, #7, #1
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 800465c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8004660:	4322      	orrs	r2, r4
 8004662:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8004664:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8004666:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8004668:	0fda      	lsrs	r2, r3, #31
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 800466a:	f3c3 5081 	ubfx	r0, r3, #22, #2
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 800466e:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8004670:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8004674:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8004676:	f3c3 6282 	ubfx	r2, r3, #26, #3
 800467a:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 800467c:	0d9a      	lsrs	r2, r3, #22
 800467e:	f002 020c 	and.w	r2, r2, #12
 8004682:	77ca      	strb	r2, [r1, #31]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8004684:	7fca      	ldrb	r2, [r1, #31]
 8004686:	4302      	orrs	r2, r0
  pCSD->Reserved3           = 0;
 8004688:	2000      	movs	r0, #0
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 800468a:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 800468c:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8004690:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8004694:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3           = 0;
 8004698:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 800469c:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 80046a0:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 80046a4:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 80046a8:	f3c3 3280 	ubfx	r2, r3, #14, #1
 80046ac:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 80046b0:	f3c3 3240 	ubfx	r2, r3, #13, #1
 80046b4:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 80046b8:	f3c3 3200 	ubfx	r2, r3, #12, #1
 80046bc:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 80046c0:	f3c3 2281 	ubfx	r2, r3, #10, #2
 80046c4:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 80046c8:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 80046cc:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC              = (tmp & 0x03);
 80046d0:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 80046d4:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 80046d8:	2301      	movs	r3, #1
 80046da:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 80046de:	bd30      	pop	{r4, r5, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80046e0:	2c01      	cmp	r4, #1
 80046e2:	d11a      	bne.n	800471a <HAL_SD_GetCardCSD+0x1a4>
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 80046e4:	041b      	lsls	r3, r3, #16
 80046e6:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80046ea:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 80046ec:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp << 8);
 80046ee:	690a      	ldr	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 80046f0:	0e1c      	lsrs	r4, r3, #24
    pCSD->DeviceSize |= (tmp << 8);
 80046f2:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 80046f6:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 80046f8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80046fc:	690c      	ldr	r4, [r1, #16]
 80046fe:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004702:	4322      	orrs	r2, r4
 8004704:	610a      	str	r2, [r1, #16]
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8004706:	690a      	ldr	r2, [r1, #16]
 8004708:	0292      	lsls	r2, r2, #10
 800470a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800470e:	6542      	str	r2, [r0, #84]	; 0x54
 8004710:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8004712:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004716:	6582      	str	r2, [r0, #88]	; 0x58
 8004718:	e794      	b.n	8004644 <HAL_SD_GetCardCSD+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 800471a:	6803      	ldr	r3, [r0, #0]
 800471c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004720:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004722:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004728:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800472a:	2301      	movs	r3, #1
 800472c:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8004730:	4618      	mov	r0, r3
 8004732:	bd30      	pop	{r4, r5, pc}

08004734 <HAL_SD_InitCard>:
{
 8004734:	b570      	push	{r4, r5, r6, lr}
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8004736:	2376      	movs	r3, #118	; 0x76
{
 8004738:	b098      	sub	sp, #96	; 0x60
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800473a:	2500      	movs	r5, #0
{
 800473c:	4604      	mov	r4, r0
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800473e:	930c      	str	r3, [sp, #48]	; 0x30
  SDMMC_Init(hsd->Instance, Init);
 8004740:	ab0a      	add	r3, sp, #40	; 0x28
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8004742:	950a      	str	r5, [sp, #40]	; 0x28
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004744:	950b      	str	r5, [sp, #44]	; 0x2c
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8004746:	9507      	str	r5, [sp, #28]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8004748:	9508      	str	r5, [sp, #32]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800474a:	9509      	str	r5, [sp, #36]	; 0x24
  SDMMC_Init(hsd->Instance, Init);
 800474c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004750:	ab07      	add	r3, sp, #28
 8004752:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8004756:	6820      	ldr	r0, [r4, #0]
 8004758:	cb0e      	ldmia	r3, {r1, r2, r3}
 800475a:	f001 f8e3 	bl	8005924 <SDMMC_Init>
  __HAL_SD_DISABLE(hsd); 
 800475e:	6820      	ldr	r0, [r4, #0]
 8004760:	6843      	ldr	r3, [r0, #4]
 8004762:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004766:	6043      	str	r3, [r0, #4]
  SDMMC_PowerState_ON(hsd->Instance);
 8004768:	f001 f8fb 	bl	8005962 <SDMMC_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 800476c:	6822      	ldr	r2, [r4, #0]
  HAL_Delay(2);
 800476e:	2002      	movs	r0, #2
  __HAL_SD_ENABLE(hsd);
 8004770:	6853      	ldr	r3, [r2, #4]
 8004772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004776:	6053      	str	r3, [r2, #4]
  HAL_Delay(2);
 8004778:	f7fd f9e8 	bl	8001b4c <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800477c:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0;
 800477e:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004780:	f001 f9e6 	bl	8005b50 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004784:	4606      	mov	r6, r0
 8004786:	b968      	cbnz	r0, 80047a4 <HAL_SD_InitCard+0x70>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004788:	6820      	ldr	r0, [r4, #0]
 800478a:	f001 fa09 	bl	8005ba0 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 800478e:	b380      	cbz	r0, 80047f2 <HAL_SD_InitCard+0xbe>
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8004790:	f64f 75ff 	movw	r5, #65535	; 0xffff
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004794:	64a6      	str	r6, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8004796:	9b06      	ldr	r3, [sp, #24]
 8004798:	1c5a      	adds	r2, r3, #1
 800479a:	42ab      	cmp	r3, r5
 800479c:	9206      	str	r2, [sp, #24]
 800479e:	d108      	bne.n	80047b2 <HAL_SD_InitCard+0x7e>
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80047a0:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    hsd->State = HAL_SD_STATE_READY;
 80047a4:	2001      	movs	r0, #1
 80047a6:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80047aa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80047ac:	430e      	orrs	r6, r1
 80047ae:	63a6      	str	r6, [r4, #56]	; 0x38
    return HAL_ERROR;
 80047b0:	e083      	b.n	80048ba <HAL_SD_InitCard+0x186>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80047b2:	2100      	movs	r1, #0
 80047b4:	6820      	ldr	r0, [r4, #0]
 80047b6:	f001 fa2b 	bl	8005c10 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80047ba:	4601      	mov	r1, r0
 80047bc:	b110      	cbz	r0, 80047c4 <HAL_SD_InitCard+0x90>
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80047be:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 80047c2:	e7ef      	b.n	80047a4 <HAL_SD_InitCard+0x70>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 80047c4:	6820      	ldr	r0, [r4, #0]
 80047c6:	f001 fa3b 	bl	8005c40 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80047ca:	4601      	mov	r1, r0
 80047cc:	2800      	cmp	r0, #0
 80047ce:	d1f6      	bne.n	80047be <HAL_SD_InitCard+0x8a>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80047d0:	6820      	ldr	r0, [r4, #0]
 80047d2:	f001 f8e1 	bl	8005998 <SDMMC_GetResponse>
    while(validvoltage == 0)
 80047d6:	2800      	cmp	r0, #0
 80047d8:	dadd      	bge.n	8004796 <HAL_SD_InitCard+0x62>
    hsd->SdCard.CardType = CARD_SDSC;
 80047da:	2300      	movs	r3, #0
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80047dc:	6463      	str	r3, [r4, #68]	; 0x44
  uint16_t sd_rca = 1;
 80047de:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 80047e0:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1;
 80047e2:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 80047e6:	f001 f8c0 	bl	800596a <SDMMC_GetPowerState>
 80047ea:	bb20      	cbnz	r0, 8004836 <HAL_SD_InitCard+0x102>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80047ec:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80047f0:	e06d      	b.n	80048ce <HAL_SD_InitCard+0x19a>
    hsd->SdCard.CardVersion = CARD_V2_X;
 80047f2:	2301      	movs	r3, #1
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80047f4:	f64f 75ff 	movw	r5, #65535	; 0xffff
    hsd->SdCard.CardVersion = CARD_V2_X;
 80047f8:	64a3      	str	r3, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80047fa:	9b06      	ldr	r3, [sp, #24]
 80047fc:	1c5a      	adds	r2, r3, #1
 80047fe:	42ab      	cmp	r3, r5
 8004800:	9206      	str	r2, [sp, #24]
 8004802:	d0cd      	beq.n	80047a0 <HAL_SD_InitCard+0x6c>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004804:	2100      	movs	r1, #0
 8004806:	6820      	ldr	r0, [r4, #0]
 8004808:	f001 fa02 	bl	8005c10 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 800480c:	4606      	mov	r6, r0
 800480e:	2800      	cmp	r0, #0
 8004810:	d1c8      	bne.n	80047a4 <HAL_SD_InitCard+0x70>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8004812:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004816:	6820      	ldr	r0, [r4, #0]
 8004818:	f001 fa12 	bl	8005c40 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 800481c:	4606      	mov	r6, r0
 800481e:	2800      	cmp	r0, #0
 8004820:	d1c0      	bne.n	80047a4 <HAL_SD_InitCard+0x70>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004822:	4601      	mov	r1, r0
 8004824:	6820      	ldr	r0, [r4, #0]
 8004826:	f001 f8b7 	bl	8005998 <SDMMC_GetResponse>
    while(validvoltage == 0)
 800482a:	2800      	cmp	r0, #0
 800482c:	dae5      	bge.n	80047fa <HAL_SD_InitCard+0xc6>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800482e:	0043      	lsls	r3, r0, #1
 8004830:	d5d3      	bpl.n	80047da <HAL_SD_InitCard+0xa6>
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004832:	2301      	movs	r3, #1
 8004834:	e7d2      	b.n	80047dc <HAL_SD_InitCard+0xa8>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004836:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004838:	2b03      	cmp	r3, #3
 800483a:	d01a      	beq.n	8004872 <HAL_SD_InitCard+0x13e>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800483c:	6820      	ldr	r0, [r4, #0]
 800483e:	f001 fa30 	bl	8005ca2 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004842:	4605      	mov	r5, r0
 8004844:	2800      	cmp	r0, #0
 8004846:	d142      	bne.n	80048ce <HAL_SD_InitCard+0x19a>
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004848:	4601      	mov	r1, r0
 800484a:	6820      	ldr	r0, [r4, #0]
 800484c:	f001 f8a4 	bl	8005998 <SDMMC_GetResponse>
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004850:	2104      	movs	r1, #4
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004852:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004854:	6820      	ldr	r0, [r4, #0]
 8004856:	f001 f89f 	bl	8005998 <SDMMC_GetResponse>
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800485a:	2108      	movs	r1, #8
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800485c:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800485e:	6820      	ldr	r0, [r4, #0]
 8004860:	f001 f89a 	bl	8005998 <SDMMC_GetResponse>
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004864:	210c      	movs	r1, #12
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004866:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004868:	6820      	ldr	r0, [r4, #0]
 800486a:	f001 f895 	bl	8005998 <SDMMC_GetResponse>
 800486e:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004872:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004874:	2b03      	cmp	r3, #3
 8004876:	d122      	bne.n	80048be <HAL_SD_InitCard+0x18a>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004878:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800487a:	2b03      	cmp	r3, #3
 800487c:	d12e      	bne.n	80048dc <HAL_SD_InitCard+0x1a8>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 800487e:	2104      	movs	r1, #4
 8004880:	6820      	ldr	r0, [r4, #0]
 8004882:	f001 f889 	bl	8005998 <SDMMC_GetResponse>
  HAL_SD_GetCardCSD(hsd, &CSD);
 8004886:	a90d      	add	r1, sp, #52	; 0x34
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8004888:	0d00      	lsrs	r0, r0, #20
 800488a:	64e0      	str	r0, [r4, #76]	; 0x4c
  HAL_SD_GetCardCSD(hsd, &CSD);
 800488c:	4620      	mov	r0, r4
 800488e:	f7ff fe72 	bl	8004576 <HAL_SD_GetCardCSD>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 8004892:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004894:	2300      	movs	r3, #0
 8004896:	6820      	ldr	r0, [r4, #0]
 8004898:	0412      	lsls	r2, r2, #16
 800489a:	f001 f940 	bl	8005b1e <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 800489e:	4605      	mov	r5, r0
 80048a0:	b9a8      	cbnz	r0, 80048ce <HAL_SD_InitCard+0x19a>
  SDMMC_Init(hsd->Instance, hsd->Init);
 80048a2:	f104 0310 	add.w	r3, r4, #16
 80048a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80048aa:	1d23      	adds	r3, r4, #4
 80048ac:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80048b0:	6820      	ldr	r0, [r4, #0]
 80048b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048b4:	f001 f836 	bl	8005924 <SDMMC_Init>
  return HAL_OK;
 80048b8:	4628      	mov	r0, r5
}
 80048ba:	b018      	add	sp, #96	; 0x60
 80048bc:	bd70      	pop	{r4, r5, r6, pc}
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80048be:	f10d 0116 	add.w	r1, sp, #22
 80048c2:	6820      	ldr	r0, [r4, #0]
 80048c4:	f001 fa18 	bl	8005cf8 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 80048c8:	4605      	mov	r5, r0
 80048ca:	2800      	cmp	r0, #0
 80048cc:	d0d4      	beq.n	8004878 <HAL_SD_InitCard+0x144>
    hsd->State = HAL_SD_STATE_READY;
 80048ce:	2001      	movs	r0, #1
 80048d0:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80048d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80048d6:	431d      	orrs	r5, r3
 80048d8:	63a5      	str	r5, [r4, #56]	; 0x38
 80048da:	e7ee      	b.n	80048ba <HAL_SD_InitCard+0x186>
    hsd->SdCard.RelCardAdd = sd_rca;
 80048dc:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80048e0:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
 80048e2:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80048e4:	0409      	lsls	r1, r1, #16
 80048e6:	f001 f9f1 	bl	8005ccc <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80048ea:	4605      	mov	r5, r0
 80048ec:	2800      	cmp	r0, #0
 80048ee:	d1ee      	bne.n	80048ce <HAL_SD_InitCard+0x19a>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80048f0:	4601      	mov	r1, r0
 80048f2:	6820      	ldr	r0, [r4, #0]
 80048f4:	f001 f850 	bl	8005998 <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80048f8:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80048fa:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80048fc:	6820      	ldr	r0, [r4, #0]
 80048fe:	f001 f84b 	bl	8005998 <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004902:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004904:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004906:	6820      	ldr	r0, [r4, #0]
 8004908:	f001 f846 	bl	8005998 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800490c:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800490e:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004910:	6820      	ldr	r0, [r4, #0]
 8004912:	f001 f841 	bl	8005998 <SDMMC_GetResponse>
 8004916:	6720      	str	r0, [r4, #112]	; 0x70
 8004918:	e7b1      	b.n	800487e <HAL_SD_InitCard+0x14a>

0800491a <HAL_SD_Init>:
{
 800491a:	b510      	push	{r4, lr}
  if(hsd == NULL)
 800491c:	4604      	mov	r4, r0
 800491e:	b1a0      	cbz	r0, 800494a <HAL_SD_Init+0x30>
  if(hsd->State == HAL_SD_STATE_RESET)
 8004920:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8004924:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004928:	b913      	cbnz	r3, 8004930 <HAL_SD_Init+0x16>
    hsd->Lock = HAL_UNLOCKED;
 800492a:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 800492c:	f7fc fe12 	bl	8001554 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8004930:	2303      	movs	r3, #3
  HAL_SD_InitCard(hsd);
 8004932:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 8004934:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_InitCard(hsd);
 8004938:	f7ff fefc 	bl	8004734 <HAL_SD_InitCard>
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800493c:	2000      	movs	r0, #0
  hsd->State = HAL_SD_STATE_READY;
 800493e:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8004940:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8004942:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8004944:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8004948:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800494a:	2001      	movs	r0, #1
}
 800494c:	bd10      	pop	{r4, pc}

0800494e <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 800494e:	2303      	movs	r3, #3
{
 8004950:	b570      	push	{r4, r5, r6, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 8004952:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
{
 8004956:	b08a      	sub	sp, #40	; 0x28
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004958:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 800495a:	4604      	mov	r4, r0
 800495c:	460e      	mov	r6, r1
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800495e:	2b03      	cmp	r3, #3
 8004960:	d002      	beq.n	8004968 <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8004962:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8004966:	d103      	bne.n	8004970 <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004968:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800496a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800496e:	e056      	b.n	8004a1e <HAL_SD_ConfigWideBusOperation+0xd0>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8004970:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8004974:	d12d      	bne.n	80049d2 <HAL_SD_ConfigWideBusOperation+0x84>
  uint32_t scr[2] = {0, 0};
 8004976:	2100      	movs	r1, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004978:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 800497a:	9104      	str	r1, [sp, #16]
 800497c:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800497e:	f001 f80b 	bl	8005998 <SDMMC_GetResponse>
 8004982:	0180      	lsls	r0, r0, #6
 8004984:	d420      	bmi.n	80049c8 <HAL_SD_ConfigWideBusOperation+0x7a>
  errorstate = SD_FindSCR(hsd, scr);
 8004986:	a904      	add	r1, sp, #16
 8004988:	4620      	mov	r0, r4
 800498a:	f7ff fd8f 	bl	80044ac <SD_FindSCR>
  if(errorstate != HAL_OK)
 800498e:	b960      	cbnz	r0, 80049aa <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004990:	9b05      	ldr	r3, [sp, #20]
 8004992:	0359      	lsls	r1, r3, #13
 8004994:	d51a      	bpl.n	80049cc <HAL_SD_ConfigWideBusOperation+0x7e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8004996:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004998:	6820      	ldr	r0, [r4, #0]
 800499a:	0409      	lsls	r1, r1, #16
 800499c:	f001 f938 	bl	8005c10 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 80049a0:	b918      	cbnz	r0, 80049aa <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 80049a2:	2102      	movs	r1, #2
 80049a4:	6820      	ldr	r0, [r4, #0]
 80049a6:	f001 fa13 	bl	8005dd0 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 80049aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80049ac:	4318      	orrs	r0, r3
      hsd->ErrorCode |= errorstate;
 80049ae:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80049b0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80049b2:	2d00      	cmp	r5, #0
 80049b4:	d035      	beq.n	8004a22 <HAL_SD_ConfigWideBusOperation+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80049b6:	6823      	ldr	r3, [r4, #0]
 80049b8:	f240 52ff 	movw	r2, #1535	; 0x5ff
    hsd->State = HAL_SD_STATE_READY;
 80049bc:	2001      	movs	r0, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80049be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80049c0:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 80049c4:	b00a      	add	sp, #40	; 0x28
 80049c6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80049c8:	4630      	mov	r0, r6
 80049ca:	e7ee      	b.n	80049aa <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80049cc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80049d0:	e7eb      	b.n	80049aa <HAL_SD_ConfigWideBusOperation+0x5c>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80049d2:	bb09      	cbnz	r1, 8004a18 <HAL_SD_ConfigWideBusOperation+0xca>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80049d4:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 80049d6:	9104      	str	r1, [sp, #16]
 80049d8:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80049da:	f000 ffdd 	bl	8005998 <SDMMC_GetResponse>
 80049de:	0182      	lsls	r2, r0, #6
 80049e0:	d414      	bmi.n	8004a0c <HAL_SD_ConfigWideBusOperation+0xbe>
  errorstate = SD_FindSCR(hsd, scr);
 80049e2:	a904      	add	r1, sp, #16
 80049e4:	4620      	mov	r0, r4
 80049e6:	f7ff fd61 	bl	80044ac <SD_FindSCR>
  if(errorstate != HAL_OK)
 80049ea:	b960      	cbnz	r0, 8004a06 <HAL_SD_ConfigWideBusOperation+0xb8>
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80049ec:	9b05      	ldr	r3, [sp, #20]
 80049ee:	03db      	lsls	r3, r3, #15
 80049f0:	d50f      	bpl.n	8004a12 <HAL_SD_ConfigWideBusOperation+0xc4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80049f2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80049f4:	6820      	ldr	r0, [r4, #0]
 80049f6:	0409      	lsls	r1, r1, #16
 80049f8:	f001 f90a 	bl	8005c10 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 80049fc:	b918      	cbnz	r0, 8004a06 <HAL_SD_ConfigWideBusOperation+0xb8>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 80049fe:	4601      	mov	r1, r0
 8004a00:	6820      	ldr	r0, [r4, #0]
 8004a02:	f001 f9e5 	bl	8005dd0 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8004a06:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004a08:	4308      	orrs	r0, r1
 8004a0a:	e7d0      	b.n	80049ae <HAL_SD_ConfigWideBusOperation+0x60>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004a0c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004a10:	e7f9      	b.n	8004a06 <HAL_SD_ConfigWideBusOperation+0xb8>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004a12:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8004a16:	e7f6      	b.n	8004a06 <HAL_SD_ConfigWideBusOperation+0xb8>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004a18:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004a1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a1e:	63a3      	str	r3, [r4, #56]	; 0x38
 8004a20:	e7c6      	b.n	80049b0 <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004a22:	6863      	ldr	r3, [r4, #4]
    Init.BusWide             = WideMode;
 8004a24:	9607      	str	r6, [sp, #28]
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004a26:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004a28:	68a3      	ldr	r3, [r4, #8]
 8004a2a:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004a2c:	68e3      	ldr	r3, [r4, #12]
 8004a2e:	9306      	str	r3, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004a30:	6963      	ldr	r3, [r4, #20]
 8004a32:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004a34:	69a3      	ldr	r3, [r4, #24]
 8004a36:	9309      	str	r3, [sp, #36]	; 0x24
    SDMMC_Init(hsd->Instance, Init);
 8004a38:	ab0a      	add	r3, sp, #40	; 0x28
 8004a3a:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8004a3e:	ab04      	add	r3, sp, #16
 8004a40:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8004a44:	6820      	ldr	r0, [r4, #0]
 8004a46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a48:	f000 ff6c 	bl	8005924 <SDMMC_Init>
  hsd->State = HAL_SD_STATE_READY;
 8004a4c:	2301      	movs	r3, #1
  return HAL_OK;
 8004a4e:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 8004a50:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8004a54:	e7b6      	b.n	80049c4 <HAL_SD_ConfigWideBusOperation+0x76>

08004a56 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8004a56:	b538      	push	{r3, r4, r5, lr}
 8004a58:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8004a5a:	4604      	mov	r4, r0
 8004a5c:	b1c8      	cbz	r0, 8004a92 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004a5e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004a62:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004a66:	b91b      	cbnz	r3, 8004a70 <HAL_SDRAM_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004a68:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004a6c:	f7fc ff1c 	bl	80018a8 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004a70:	2302      	movs	r3, #2
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004a72:	1d21      	adds	r1, r4, #4
 8004a74:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004a76:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004a7a:	f000 fe6a 	bl	8005752 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004a7e:	6862      	ldr	r2, [r4, #4]
 8004a80:	4629      	mov	r1, r5
 8004a82:	6820      	ldr	r0, [r4, #0]
 8004a84:	f000 fea4 	bl	80057d0 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004a88:	2301      	movs	r3, #1
  
  return HAL_OK;
 8004a8a:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004a8c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8004a90:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004a92:	2001      	movs	r0, #1
}
 8004a94:	bd38      	pop	{r3, r4, r5, pc}

08004a96 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004a96:	b538      	push	{r3, r4, r5, lr}
 8004a98:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004a9a:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
{
 8004a9e:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004aa0:	b2c0      	uxtb	r0, r0
 8004aa2:	2802      	cmp	r0, #2
 8004aa4:	d00d      	beq.n	8004ac2 <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004aa6:	2302      	movs	r3, #2
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004aa8:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004aaa:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004aae:	f000 fed7 	bl	8005860 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004ab2:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 8004ab4:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004ab6:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004ab8:	bf0c      	ite	eq
 8004aba:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004abc:	2301      	movne	r3, #1
 8004abe:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8004ac2:	bd38      	pop	{r3, r4, r5, pc}

08004ac4 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8004ac4:	b510      	push	{r4, lr}
 8004ac6:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004ac8:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8004acc:	b2c0      	uxtb	r0, r0
 8004ace:	2802      	cmp	r0, #2
 8004ad0:	d009      	beq.n	8004ae6 <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004ad2:	2302      	movs	r3, #2
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8004ad4:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004ad6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8004ada:	f000 fed4 	bl	8005886 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004ade:	2301      	movs	r3, #1
  
  return HAL_OK;   
 8004ae0:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004ae2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8004ae6:	bd10      	pop	{r4, pc}

08004ae8 <TIM_TI1_ConfigInputStage>:
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ae8:	6a03      	ldr	r3, [r0, #32]
{
 8004aea:	b510      	push	{r4, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aec:	6a04      	ldr	r4, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004aee:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004af2:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 8004af6:	430b      	orrs	r3, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004af8:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8004afa:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004afc:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8004b00:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b04:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004b06:	6203      	str	r3, [r0, #32]
 8004b08:	bd10      	pop	{r4, pc}

08004b0a <TIM_TI2_ConfigInputStage>:
{
uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b0a:	6a03      	ldr	r3, [r0, #32]
 8004b0c:	f023 0310 	bic.w	r3, r3, #16
{
 8004b10:	b510      	push	{r4, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b12:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b14:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8004b16:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b18:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b1c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12);
 8004b20:	ea44 3202 	orr.w	r2, r4, r2, lsl #12
  tmpccer |= (TIM_ICPolarity << 4);
 8004b24:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b28:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004b2a:	6203      	str	r3, [r0, #32]
 8004b2c:	bd10      	pop	{r4, pc}

08004b2e <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b2e:	6803      	ldr	r3, [r0, #0]
}
 8004b30:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b32:	68da      	ldr	r2, [r3, #12]
 8004b34:	f042 0201 	orr.w	r2, r2, #1
 8004b38:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	f042 0201 	orr.w	r2, r2, #1
 8004b40:	601a      	str	r2, [r3, #0]
}
 8004b42:	4770      	bx	lr

08004b44 <HAL_TIM_OC_DelayElapsedCallback>:
 8004b44:	4770      	bx	lr

08004b46 <HAL_TIM_IC_CaptureCallback>:
 8004b46:	4770      	bx	lr

08004b48 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004b48:	4770      	bx	lr

08004b4a <HAL_TIM_TriggerCallback>:
 8004b4a:	4770      	bx	lr

08004b4c <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b4c:	6803      	ldr	r3, [r0, #0]
 8004b4e:	691a      	ldr	r2, [r3, #16]
 8004b50:	0791      	lsls	r1, r2, #30
{
 8004b52:	b510      	push	{r4, lr}
 8004b54:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b56:	d50f      	bpl.n	8004b78 <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	0792      	lsls	r2, r2, #30
 8004b5c:	d50c      	bpl.n	8004b78 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b5e:	f06f 0202 	mvn.w	r2, #2
 8004b62:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b64:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8004b66:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b68:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8004b6a:	0799      	lsls	r1, r3, #30
 8004b6c:	f000 8085 	beq.w	8004c7a <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8004b70:	f7ff ffe9 	bl	8004b46 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b74:	2300      	movs	r3, #0
 8004b76:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b78:	6823      	ldr	r3, [r4, #0]
 8004b7a:	691a      	ldr	r2, [r3, #16]
 8004b7c:	0752      	lsls	r2, r2, #29
 8004b7e:	d510      	bpl.n	8004ba2 <HAL_TIM_IRQHandler+0x56>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8004b80:	68da      	ldr	r2, [r3, #12]
 8004b82:	0750      	lsls	r0, r2, #29
 8004b84:	d50d      	bpl.n	8004ba2 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b86:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8004b8a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b8e:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8004b90:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b92:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8004b94:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004b98:	d075      	beq.n	8004c86 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8004b9a:	f7ff ffd4 	bl	8004b46 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ba2:	6823      	ldr	r3, [r4, #0]
 8004ba4:	691a      	ldr	r2, [r3, #16]
 8004ba6:	0711      	lsls	r1, r2, #28
 8004ba8:	d50f      	bpl.n	8004bca <HAL_TIM_IRQHandler+0x7e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8004baa:	68da      	ldr	r2, [r3, #12]
 8004bac:	0712      	lsls	r2, r2, #28
 8004bae:	d50c      	bpl.n	8004bca <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bb0:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8004bb4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bb8:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8004bba:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bbc:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8004bbe:	079b      	lsls	r3, r3, #30
 8004bc0:	d067      	beq.n	8004c92 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8004bc2:	f7ff ffc0 	bl	8004b46 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bca:	6823      	ldr	r3, [r4, #0]
 8004bcc:	691a      	ldr	r2, [r3, #16]
 8004bce:	06d0      	lsls	r0, r2, #27
 8004bd0:	d510      	bpl.n	8004bf4 <HAL_TIM_IRQHandler+0xa8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8004bd2:	68da      	ldr	r2, [r3, #12]
 8004bd4:	06d1      	lsls	r1, r2, #27
 8004bd6:	d50d      	bpl.n	8004bf4 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004bd8:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 8004bdc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004bde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004be0:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8004be2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004be4:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8004be6:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004bea:	d058      	beq.n	8004c9e <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8004bec:	f7ff ffab 	bl	8004b46 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004bf4:	6823      	ldr	r3, [r4, #0]
 8004bf6:	691a      	ldr	r2, [r3, #16]
 8004bf8:	07d2      	lsls	r2, r2, #31
 8004bfa:	d508      	bpl.n	8004c0e <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8004bfc:	68da      	ldr	r2, [r3, #12]
 8004bfe:	07d0      	lsls	r0, r2, #31
 8004c00:	d505      	bpl.n	8004c0e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c02:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c06:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c08:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c0a:	f7fc fa09 	bl	8001020 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c0e:	6823      	ldr	r3, [r4, #0]
 8004c10:	691a      	ldr	r2, [r3, #16]
 8004c12:	0611      	lsls	r1, r2, #24
 8004c14:	d508      	bpl.n	8004c28 <HAL_TIM_IRQHandler+0xdc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8004c16:	68da      	ldr	r2, [r3, #12]
 8004c18:	0612      	lsls	r2, r2, #24
 8004c1a:	d505      	bpl.n	8004c28 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8004c20:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c22:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004c24:	f000 faeb 	bl	80051fe <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004c28:	6823      	ldr	r3, [r4, #0]
 8004c2a:	691a      	ldr	r2, [r3, #16]
 8004c2c:	05d0      	lsls	r0, r2, #23
 8004c2e:	d508      	bpl.n	8004c42 <HAL_TIM_IRQHandler+0xf6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8004c30:	68da      	ldr	r2, [r3, #12]
 8004c32:	0611      	lsls	r1, r2, #24
 8004c34:	d505      	bpl.n	8004c42 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c36:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8004c3a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c3c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004c3e:	f000 fade 	bl	80051fe <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c42:	6823      	ldr	r3, [r4, #0]
 8004c44:	691a      	ldr	r2, [r3, #16]
 8004c46:	0652      	lsls	r2, r2, #25
 8004c48:	d508      	bpl.n	8004c5c <HAL_TIM_IRQHandler+0x110>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8004c4a:	68da      	ldr	r2, [r3, #12]
 8004c4c:	0650      	lsls	r0, r2, #25
 8004c4e:	d505      	bpl.n	8004c5c <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c50:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8004c54:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c56:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004c58:	f7ff ff77 	bl	8004b4a <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c5c:	6823      	ldr	r3, [r4, #0]
 8004c5e:	691a      	ldr	r2, [r3, #16]
 8004c60:	0691      	lsls	r1, r2, #26
 8004c62:	d522      	bpl.n	8004caa <HAL_TIM_IRQHandler+0x15e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8004c64:	68da      	ldr	r2, [r3, #12]
 8004c66:	0692      	lsls	r2, r2, #26
 8004c68:	d51f      	bpl.n	8004caa <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c6a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8004c6e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c70:	611a      	str	r2, [r3, #16]
}
 8004c72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8004c76:	f000 bac1 	b.w	80051fc <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c7a:	f7ff ff63 	bl	8004b44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c7e:	4620      	mov	r0, r4
 8004c80:	f7ff ff62 	bl	8004b48 <HAL_TIM_PWM_PulseFinishedCallback>
 8004c84:	e776      	b.n	8004b74 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c86:	f7ff ff5d 	bl	8004b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c8a:	4620      	mov	r0, r4
 8004c8c:	f7ff ff5c 	bl	8004b48 <HAL_TIM_PWM_PulseFinishedCallback>
 8004c90:	e785      	b.n	8004b9e <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c92:	f7ff ff57 	bl	8004b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c96:	4620      	mov	r0, r4
 8004c98:	f7ff ff56 	bl	8004b48 <HAL_TIM_PWM_PulseFinishedCallback>
 8004c9c:	e793      	b.n	8004bc6 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c9e:	f7ff ff51 	bl	8004b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca2:	4620      	mov	r0, r4
 8004ca4:	f7ff ff50 	bl	8004b48 <HAL_TIM_PWM_PulseFinishedCallback>
 8004ca8:	e7a2      	b.n	8004bf0 <HAL_TIM_IRQHandler+0xa4>
 8004caa:	bd10      	pop	{r4, pc}

08004cac <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8004cac:	4a30      	ldr	r2, [pc, #192]	; (8004d70 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8004cae:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8004cb0:	4290      	cmp	r0, r2
 8004cb2:	d012      	beq.n	8004cda <TIM_Base_SetConfig+0x2e>
 8004cb4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004cb8:	d00f      	beq.n	8004cda <TIM_Base_SetConfig+0x2e>
 8004cba:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004cbe:	4290      	cmp	r0, r2
 8004cc0:	d00b      	beq.n	8004cda <TIM_Base_SetConfig+0x2e>
 8004cc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004cc6:	4290      	cmp	r0, r2
 8004cc8:	d007      	beq.n	8004cda <TIM_Base_SetConfig+0x2e>
 8004cca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004cce:	4290      	cmp	r0, r2
 8004cd0:	d003      	beq.n	8004cda <TIM_Base_SetConfig+0x2e>
 8004cd2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004cd6:	4290      	cmp	r0, r2
 8004cd8:	d11d      	bne.n	8004d16 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8004cda:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004ce0:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8004ce2:	4a23      	ldr	r2, [pc, #140]	; (8004d70 <TIM_Base_SetConfig+0xc4>)
 8004ce4:	4290      	cmp	r0, r2
 8004ce6:	d104      	bne.n	8004cf2 <TIM_Base_SetConfig+0x46>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cec:	68ca      	ldr	r2, [r1, #12]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	e028      	b.n	8004d44 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8004cf2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004cf6:	d0f7      	beq.n	8004ce8 <TIM_Base_SetConfig+0x3c>
 8004cf8:	4a1e      	ldr	r2, [pc, #120]	; (8004d74 <TIM_Base_SetConfig+0xc8>)
 8004cfa:	4290      	cmp	r0, r2
 8004cfc:	d0f4      	beq.n	8004ce8 <TIM_Base_SetConfig+0x3c>
 8004cfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d02:	4290      	cmp	r0, r2
 8004d04:	d0f0      	beq.n	8004ce8 <TIM_Base_SetConfig+0x3c>
 8004d06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d0a:	4290      	cmp	r0, r2
 8004d0c:	d0ec      	beq.n	8004ce8 <TIM_Base_SetConfig+0x3c>
 8004d0e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004d12:	4290      	cmp	r0, r2
 8004d14:	d0e8      	beq.n	8004ce8 <TIM_Base_SetConfig+0x3c>
 8004d16:	4a18      	ldr	r2, [pc, #96]	; (8004d78 <TIM_Base_SetConfig+0xcc>)
 8004d18:	4290      	cmp	r0, r2
 8004d1a:	d0e5      	beq.n	8004ce8 <TIM_Base_SetConfig+0x3c>
 8004d1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d20:	4290      	cmp	r0, r2
 8004d22:	d0e1      	beq.n	8004ce8 <TIM_Base_SetConfig+0x3c>
 8004d24:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d28:	4290      	cmp	r0, r2
 8004d2a:	d0dd      	beq.n	8004ce8 <TIM_Base_SetConfig+0x3c>
 8004d2c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8004d30:	4290      	cmp	r0, r2
 8004d32:	d0d9      	beq.n	8004ce8 <TIM_Base_SetConfig+0x3c>
 8004d34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d38:	4290      	cmp	r0, r2
 8004d3a:	d0d5      	beq.n	8004ce8 <TIM_Base_SetConfig+0x3c>
 8004d3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d40:	4290      	cmp	r0, r2
 8004d42:	d0d1      	beq.n	8004ce8 <TIM_Base_SetConfig+0x3c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d44:	694a      	ldr	r2, [r1, #20]
 8004d46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d4a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004d4c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d4e:	688b      	ldr	r3, [r1, #8]
 8004d50:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004d52:	680b      	ldr	r3, [r1, #0]
 8004d54:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8004d56:	4b06      	ldr	r3, [pc, #24]	; (8004d70 <TIM_Base_SetConfig+0xc4>)
 8004d58:	4298      	cmp	r0, r3
 8004d5a:	d006      	beq.n	8004d6a <TIM_Base_SetConfig+0xbe>
 8004d5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d60:	4298      	cmp	r0, r3
 8004d62:	d002      	beq.n	8004d6a <TIM_Base_SetConfig+0xbe>
  TIMx->EGR = TIM_EGR_UG;
 8004d64:	2301      	movs	r3, #1
 8004d66:	6143      	str	r3, [r0, #20]
}
 8004d68:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8004d6a:	690b      	ldr	r3, [r1, #16]
 8004d6c:	6303      	str	r3, [r0, #48]	; 0x30
 8004d6e:	e7f9      	b.n	8004d64 <TIM_Base_SetConfig+0xb8>
 8004d70:	40010000 	.word	0x40010000
 8004d74:	40000400 	.word	0x40000400
 8004d78:	40014000 	.word	0x40014000

08004d7c <HAL_TIM_Base_Init>:
{ 
 8004d7c:	b510      	push	{r4, lr}
  if(htim == NULL)
 8004d7e:	4604      	mov	r4, r0
 8004d80:	b1a0      	cbz	r0, 8004dac <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8004d82:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004d86:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004d8a:	b91b      	cbnz	r3, 8004d94 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8004d8c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004d90:	f7fc fc2c 	bl	80015ec <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8004d94:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8004d96:	6820      	ldr	r0, [r4, #0]
 8004d98:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;
 8004d9a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8004d9e:	f7ff ff85 	bl	8004cac <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8004da2:	2301      	movs	r3, #1
  return HAL_OK;
 8004da4:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8004da6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004daa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004dac:	2001      	movs	r0, #1
}
 8004dae:	bd10      	pop	{r4, pc}

08004db0 <HAL_TIM_PWM_Init>:
{
 8004db0:	b510      	push	{r4, lr}
  if(htim == NULL)
 8004db2:	4604      	mov	r4, r0
 8004db4:	b1a0      	cbz	r0, 8004de0 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8004db6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004dba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004dbe:	b91b      	cbnz	r3, 8004dc8 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8004dc0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004dc4:	f7fc fc66 	bl	8001694 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 8004dc8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8004dca:	6820      	ldr	r0, [r4, #0]
 8004dcc:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;  
 8004dce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8004dd2:	f7ff ff6b 	bl	8004cac <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8004dd6:	2301      	movs	r3, #1
  return HAL_OK;
 8004dd8:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8004dda:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004dde:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004de0:	2001      	movs	r0, #1
}  
 8004de2:	bd10      	pop	{r4, pc}

08004de4 <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004de4:	6a03      	ldr	r3, [r0, #32]
 8004de6:	f023 0301 	bic.w	r3, r3, #1
{
 8004dea:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dec:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004dee:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8004df0:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004df2:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8004df4:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 8004df8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004dfa:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8004dfe:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004e02:	432c      	orrs	r4, r5
  tmpccer |= OC_Config->OCPolarity;
 8004e04:	688d      	ldr	r5, [r1, #8]
 8004e06:	432b      	orrs	r3, r5
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004e08:	4d0c      	ldr	r5, [pc, #48]	; (8004e3c <TIM_OC1_SetConfig+0x58>)
 8004e0a:	42a8      	cmp	r0, r5
 8004e0c:	d009      	beq.n	8004e22 <TIM_OC1_SetConfig+0x3e>
 8004e0e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004e12:	42a8      	cmp	r0, r5
 8004e14:	d005      	beq.n	8004e22 <TIM_OC1_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 8004e16:	6042      	str	r2, [r0, #4]
  TIMx->CCR1 = OC_Config->Pulse;
 8004e18:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004e1a:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8004e1c:	6342      	str	r2, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;  
 8004e1e:	6203      	str	r3, [r0, #32]
} 
 8004e20:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8004e22:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e24:	f023 0308 	bic.w	r3, r3, #8
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e28:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e2a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 8004e2e:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e30:	694d      	ldr	r5, [r1, #20]
 8004e32:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e34:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e38:	432a      	orrs	r2, r5
 8004e3a:	e7ec      	b.n	8004e16 <TIM_OC1_SetConfig+0x32>
 8004e3c:	40010000 	.word	0x40010000

08004e40 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e40:	6a03      	ldr	r3, [r0, #32]
 8004e42:	f023 0310 	bic.w	r3, r3, #16
{
 8004e46:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e48:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004e4a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8004e4c:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004e4e:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8004e50:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004e54:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e56:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8004e5a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004e5e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4);
 8004e62:	688d      	ldr	r5, [r1, #8]
 8004e64:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004e68:	4d0d      	ldr	r5, [pc, #52]	; (8004ea0 <TIM_OC2_SetConfig+0x60>)
 8004e6a:	42a8      	cmp	r0, r5
 8004e6c:	d009      	beq.n	8004e82 <TIM_OC2_SetConfig+0x42>
 8004e6e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004e72:	42a8      	cmp	r0, r5
 8004e74:	d005      	beq.n	8004e82 <TIM_OC2_SetConfig+0x42>
  TIMx->CR2 = tmpcr2;
 8004e76:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8004e78:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004e7a:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004e7c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004e7e:	6203      	str	r3, [r0, #32]
}
 8004e80:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8004e82:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8004e88:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e8a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8004e8e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8004e92:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8004e94:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8004e9a:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 8004e9e:	e7ea      	b.n	8004e76 <TIM_OC2_SetConfig+0x36>
 8004ea0:	40010000 	.word	0x40010000

08004ea4 <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ea4:	6a03      	ldr	r3, [r0, #32]
 8004ea6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 8004eaa:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004eac:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004eae:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8004eb0:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8004eb2:	69c4      	ldr	r4, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8004eb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 8004eb8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8004eba:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8004ebe:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004ec2:	432c      	orrs	r4, r5
  tmpccer |= (OC_Config->OCPolarity << 8);
 8004ec4:	688d      	ldr	r5, [r1, #8]
 8004ec6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004eca:	4d0e      	ldr	r5, [pc, #56]	; (8004f04 <TIM_OC3_SetConfig+0x60>)
 8004ecc:	42a8      	cmp	r0, r5
 8004ece:	d009      	beq.n	8004ee4 <TIM_OC3_SetConfig+0x40>
 8004ed0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004ed4:	42a8      	cmp	r0, r5
 8004ed6:	d005      	beq.n	8004ee4 <TIM_OC3_SetConfig+0x40>
  TIMx->CR2 = tmpcr2;
 8004ed8:	6042      	str	r2, [r0, #4]
  TIMx->CCR3 = OC_Config->Pulse;
 8004eda:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004edc:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004ede:	63c2      	str	r2, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8004ee0:	6203      	str	r3, [r0, #32]
}
 8004ee2:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8004ee4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ee6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8004eea:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004eec:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8004ef0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8004ef4:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8004ef6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ef8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8004efc:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8004f00:	e7ea      	b.n	8004ed8 <TIM_OC3_SetConfig+0x34>
 8004f02:	bf00      	nop
 8004f04:	40010000 	.word	0x40010000

08004f08 <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f08:	6a03      	ldr	r3, [r0, #32]
 8004f0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 8004f0e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f10:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004f12:	6a04      	ldr	r4, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8004f14:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8004f16:	69c3      	ldr	r3, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8004f18:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004f1c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f22:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004f26:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12);
 8004f2a:	688d      	ldr	r5, [r1, #8]
 8004f2c:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004f30:	4d09      	ldr	r5, [pc, #36]	; (8004f58 <TIM_OC4_SetConfig+0x50>)
 8004f32:	42a8      	cmp	r0, r5
 8004f34:	d009      	beq.n	8004f4a <TIM_OC4_SetConfig+0x42>
 8004f36:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004f3a:	42a8      	cmp	r0, r5
 8004f3c:	d005      	beq.n	8004f4a <TIM_OC4_SetConfig+0x42>
  TIMx->CR2 = tmpcr2;
 8004f3e:	6042      	str	r2, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004f40:	61c3      	str	r3, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8004f42:	684b      	ldr	r3, [r1, #4]
 8004f44:	6403      	str	r3, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8004f46:	6204      	str	r4, [r0, #32]
}
 8004f48:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f4a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8004f4e:	694d      	ldr	r5, [r1, #20]
 8004f50:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 8004f54:	e7f3      	b.n	8004f3e <TIM_OC4_SetConfig+0x36>
 8004f56:	bf00      	nop
 8004f58:	40010000 	.word	0x40010000

08004f5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f5c:	b510      	push	{r4, lr}

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8004f5e:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 8004f60:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8004f62:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f66:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8004f6a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f6c:	6083      	str	r3, [r0, #8]
 8004f6e:	bd10      	pop	{r4, pc}

08004f70 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004f70:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004f74:	2b01      	cmp	r3, #1
{
 8004f76:	b510      	push	{r4, lr}
 8004f78:	4604      	mov	r4, r0
 8004f7a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8004f7e:	d018      	beq.n	8004fb2 <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 8004f80:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8004f84:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 8004f86:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8004f88:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8004f8c:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f8e:	4b3e      	ldr	r3, [pc, #248]	; (8005088 <HAL_TIM_ConfigClockSource+0x118>)
 8004f90:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8004f92:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8004f94:	680b      	ldr	r3, [r1, #0]
 8004f96:	2b40      	cmp	r3, #64	; 0x40
 8004f98:	d059      	beq.n	800504e <HAL_TIM_ConfigClockSource+0xde>
 8004f9a:	d815      	bhi.n	8004fc8 <HAL_TIM_ConfigClockSource+0x58>
 8004f9c:	2b10      	cmp	r3, #16
 8004f9e:	d067      	beq.n	8005070 <HAL_TIM_ConfigClockSource+0x100>
 8004fa0:	d808      	bhi.n	8004fb4 <HAL_TIM_ConfigClockSource+0x44>
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d05e      	beq.n	8005064 <HAL_TIM_ConfigClockSource+0xf4>
  htim->State = HAL_TIM_STATE_READY;
 8004fa6:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8004fa8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004faa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004fae:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004fb2:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8004fb4:	2b20      	cmp	r3, #32
 8004fb6:	d061      	beq.n	800507c <HAL_TIM_ConfigClockSource+0x10c>
 8004fb8:	2b30      	cmp	r3, #48	; 0x30
 8004fba:	d1f4      	bne.n	8004fa6 <HAL_TIM_ConfigClockSource+0x36>
   tmpsmcr = TIMx->SMCR;
 8004fbc:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8004fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8004fc2:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8004fc6:	e026      	b.n	8005016 <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8004fc8:	2b70      	cmp	r3, #112	; 0x70
 8004fca:	d026      	beq.n	800501a <HAL_TIM_ConfigClockSource+0xaa>
 8004fcc:	d80e      	bhi.n	8004fec <HAL_TIM_ConfigClockSource+0x7c>
 8004fce:	2b50      	cmp	r3, #80	; 0x50
 8004fd0:	d032      	beq.n	8005038 <HAL_TIM_ConfigClockSource+0xc8>
 8004fd2:	2b60      	cmp	r3, #96	; 0x60
 8004fd4:	d1e7      	bne.n	8004fa6 <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8004fd6:	68ca      	ldr	r2, [r1, #12]
 8004fd8:	6849      	ldr	r1, [r1, #4]
 8004fda:	f7ff fd96 	bl	8004b0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fde:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 8004fe0:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8004fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8004fe6:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8004fea:	e023      	b.n	8005034 <HAL_TIM_ConfigClockSource+0xc4>
  switch (sClockSourceConfig->ClockSource)
 8004fec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ff0:	d00c      	beq.n	800500c <HAL_TIM_ConfigClockSource+0x9c>
 8004ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ff6:	d1d6      	bne.n	8004fa6 <HAL_TIM_ConfigClockSource+0x36>
      TIM_ETR_SetConfig(htim->Instance, 
 8004ff8:	68cb      	ldr	r3, [r1, #12]
 8004ffa:	684a      	ldr	r2, [r1, #4]
 8004ffc:	6889      	ldr	r1, [r1, #8]
 8004ffe:	f7ff ffad 	bl	8004f5c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005002:	6822      	ldr	r2, [r4, #0]
 8005004:	6893      	ldr	r3, [r2, #8]
 8005006:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800500a:	e013      	b.n	8005034 <HAL_TIM_ConfigClockSource+0xc4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800500c:	6883      	ldr	r3, [r0, #8]
 800500e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005012:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 8005016:	6083      	str	r3, [r0, #8]
 8005018:	e7c5      	b.n	8004fa6 <HAL_TIM_ConfigClockSource+0x36>
      TIM_ETR_SetConfig(htim->Instance, 
 800501a:	68cb      	ldr	r3, [r1, #12]
 800501c:	684a      	ldr	r2, [r1, #4]
 800501e:	6889      	ldr	r1, [r1, #8]
 8005020:	f7ff ff9c 	bl	8004f5c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005024:	6822      	ldr	r2, [r4, #0]
 8005026:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005028:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800502c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005030:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005034:	6093      	str	r3, [r2, #8]
    break;
 8005036:	e7b6      	b.n	8004fa6 <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8005038:	68ca      	ldr	r2, [r1, #12]
 800503a:	6849      	ldr	r1, [r1, #4]
 800503c:	f7ff fd54 	bl	8004ae8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005040:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 8005042:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8005044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8005048:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 800504c:	e7f2      	b.n	8005034 <HAL_TIM_ConfigClockSource+0xc4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800504e:	68ca      	ldr	r2, [r1, #12]
 8005050:	6849      	ldr	r1, [r1, #4]
 8005052:	f7ff fd49 	bl	8004ae8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005056:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 8005058:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800505a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800505e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8005062:	e7e7      	b.n	8005034 <HAL_TIM_ConfigClockSource+0xc4>
   tmpsmcr = TIMx->SMCR;
 8005064:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8005066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800506a:	f043 0307 	orr.w	r3, r3, #7
 800506e:	e7d2      	b.n	8005016 <HAL_TIM_ConfigClockSource+0xa6>
   tmpsmcr = TIMx->SMCR;
 8005070:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8005072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8005076:	f043 0317 	orr.w	r3, r3, #23
 800507a:	e7cc      	b.n	8005016 <HAL_TIM_ConfigClockSource+0xa6>
   tmpsmcr = TIMx->SMCR;
 800507c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800507e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8005082:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8005086:	e7c6      	b.n	8005016 <HAL_TIM_ConfigClockSource+0xa6>
 8005088:	fffe0088 	.word	0xfffe0088

0800508c <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800508c:	6a03      	ldr	r3, [r0, #32]
 800508e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 8005092:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005094:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005096:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8005098:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800509a:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800509c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 80050a0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80050a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 80050aa:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 80050ac:	688d      	ldr	r5, [r1, #8]
 80050ae:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80050b2:	4d09      	ldr	r5, [pc, #36]	; (80050d8 <TIM_OC5_SetConfig+0x4c>)
 80050b4:	42a8      	cmp	r0, r5
 80050b6:	d003      	beq.n	80050c0 <TIM_OC5_SetConfig+0x34>
 80050b8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80050bc:	42a8      	cmp	r0, r5
 80050be:	d104      	bne.n	80050ca <TIM_OC5_SetConfig+0x3e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80050c0:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 80050c4:	694d      	ldr	r5, [r1, #20]
 80050c6:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050ca:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80050cc:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80050ce:	684b      	ldr	r3, [r1, #4]
 80050d0:	6583      	str	r3, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80050d2:	6202      	str	r2, [r0, #32]
 80050d4:	bd30      	pop	{r4, r5, pc}
 80050d6:	bf00      	nop
 80050d8:	40010000 	.word	0x40010000

080050dc <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80050dc:	6a03      	ldr	r3, [r0, #32]
 80050de:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 80050e2:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80050e4:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050e6:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80050e8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050ea:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80050ec:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8);
 80050f0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80050f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8);
 80050fa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 80050fe:	688d      	ldr	r5, [r1, #8]
 8005100:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005104:	4d08      	ldr	r5, [pc, #32]	; (8005128 <TIM_OC6_SetConfig+0x4c>)
 8005106:	42a8      	cmp	r0, r5
 8005108:	d003      	beq.n	8005112 <TIM_OC6_SetConfig+0x36>
 800510a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800510e:	42a8      	cmp	r0, r5
 8005110:	d104      	bne.n	800511c <TIM_OC6_SetConfig+0x40>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005112:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8005116:	694d      	ldr	r5, [r1, #20]
 8005118:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800511c:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800511e:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005120:	684b      	ldr	r3, [r1, #4]
 8005122:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8005124:	6202      	str	r2, [r0, #32]
 8005126:	bd30      	pop	{r4, r5, pc}
 8005128:	40010000 	.word	0x40010000

0800512c <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 800512c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005130:	2b01      	cmp	r3, #1
{
 8005132:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8005134:	d01c      	beq.n	8005170 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  tmpcr2 = htim->Instance->CR2;
 8005136:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005138:	4d0e      	ldr	r5, [pc, #56]	; (8005174 <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  tmpcr2 = htim->Instance->CR2;
 800513a:	6853      	ldr	r3, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800513c:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 800513e:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005140:	d003      	beq.n	800514a <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 8005142:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005146:	42aa      	cmp	r2, r5
 8005148:	d103      	bne.n	8005152 <HAL_TIMEx_MasterConfigSynchronization+0x26>
    tmpcr2 &= ~TIM_CR2_MMS2;
 800514a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800514e:	684d      	ldr	r5, [r1, #4]
 8005150:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005152:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005158:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 800515a:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800515e:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005160:	4321      	orrs	r1, r4
  htim->Instance->CR2 = tmpcr2;
 8005162:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(htim);
 8005164:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 8005166:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8005168:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800516c:	4618      	mov	r0, r3
 800516e:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8005170:	2002      	movs	r0, #2
} 
 8005172:	bd30      	pop	{r4, r5, pc}
 8005174:	40010000 	.word	0x40010000

08005178 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8005178:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800517c:	2b01      	cmp	r3, #1
{
 800517e:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8005180:	d038      	beq.n	80051f4 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005182:	68cb      	ldr	r3, [r1, #12]
 8005184:	688a      	ldr	r2, [r1, #8]
 8005186:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800518a:	4c1b      	ldr	r4, [pc, #108]	; (80051f8 <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800518c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800518e:	684a      	ldr	r2, [r1, #4]
 8005190:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005194:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005196:	680a      	ldr	r2, [r1, #0]
 8005198:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800519c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800519e:	690a      	ldr	r2, [r1, #16]
 80051a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051a4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80051a6:	694a      	ldr	r2, [r1, #20]
 80051a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051ac:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80051ae:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80051b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80051b4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 80051b6:	698a      	ldr	r2, [r1, #24]
 80051b8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80051bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80051c0:	6802      	ldr	r2, [r0, #0]
 80051c2:	42a2      	cmp	r2, r4
 80051c4:	d003      	beq.n	80051ce <HAL_TIMEx_ConfigBreakDeadTime+0x56>
 80051c6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80051ca:	42a2      	cmp	r2, r4
 80051cc:	d10c      	bne.n	80051e8 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 80051ce:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80051d0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80051d4:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80051d8:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80051da:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80051dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051e0:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80051e2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80051e6:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 80051e8:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80051ea:	2300      	movs	r3, #0
 80051ec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80051f0:	4618      	mov	r0, r3
 80051f2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 80051f4:	2002      	movs	r0, #2
}
 80051f6:	bd10      	pop	{r4, pc}
 80051f8:	40010000 	.word	0x40010000

080051fc <HAL_TIMEx_CommutationCallback>:
 80051fc:	4770      	bx	lr

080051fe <HAL_TIMEx_BreakCallback>:
{
 80051fe:	4770      	bx	lr

08005200 <HAL_TIM_PWM_ConfigChannel>:
{
 8005200:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005202:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8005206:	4604      	mov	r4, r0
 8005208:	460d      	mov	r5, r1
 800520a:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 800520c:	2b01      	cmp	r3, #1
 800520e:	d010      	beq.n	8005232 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005210:	2301      	movs	r3, #1
  switch (Channel)
 8005212:	2a08      	cmp	r2, #8
  htim->State = HAL_TIM_STATE_BUSY;
 8005214:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8005218:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 800521c:	d043      	beq.n	80052a6 <HAL_TIM_PWM_ConfigChannel+0xa6>
 800521e:	d809      	bhi.n	8005234 <HAL_TIM_PWM_ConfigChannel+0x34>
 8005220:	b1fa      	cbz	r2, 8005262 <HAL_TIM_PWM_ConfigChannel+0x62>
 8005222:	2a04      	cmp	r2, #4
 8005224:	d02e      	beq.n	8005284 <HAL_TIM_PWM_ConfigChannel+0x84>
  htim->State = HAL_TIM_STATE_READY;
 8005226:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8005228:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800522a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800522e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005232:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8005234:	2a10      	cmp	r2, #16
 8005236:	d047      	beq.n	80052c8 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8005238:	2a14      	cmp	r2, #20
 800523a:	d056      	beq.n	80052ea <HAL_TIM_PWM_ConfigChannel+0xea>
 800523c:	2a0c      	cmp	r2, #12
 800523e:	d1f2      	bne.n	8005226 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005240:	6820      	ldr	r0, [r4, #0]
 8005242:	f7ff fe61 	bl	8004f08 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005246:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8005248:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800524a:	69da      	ldr	r2, [r3, #28]
 800524c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005250:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005252:	69da      	ldr	r2, [r3, #28]
 8005254:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005258:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 800525a:	69da      	ldr	r2, [r3, #28]
 800525c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005260:	e030      	b.n	80052c4 <HAL_TIM_PWM_ConfigChannel+0xc4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005262:	6820      	ldr	r0, [r4, #0]
 8005264:	f7ff fdbe 	bl	8004de4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005268:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800526a:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800526c:	699a      	ldr	r2, [r3, #24]
 800526e:	f042 0208 	orr.w	r2, r2, #8
 8005272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005274:	699a      	ldr	r2, [r3, #24]
 8005276:	f022 0204 	bic.w	r2, r2, #4
 800527a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800527c:	699a      	ldr	r2, [r3, #24]
 800527e:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8005280:	619a      	str	r2, [r3, #24]
    break;
 8005282:	e7d0      	b.n	8005226 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005284:	6820      	ldr	r0, [r4, #0]
 8005286:	f7ff fddb 	bl	8004e40 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800528a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800528c:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800528e:	699a      	ldr	r2, [r3, #24]
 8005290:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005294:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005296:	699a      	ldr	r2, [r3, #24]
 8005298:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800529c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800529e:	699a      	ldr	r2, [r3, #24]
 80052a0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80052a4:	e7ec      	b.n	8005280 <HAL_TIM_PWM_ConfigChannel+0x80>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052a6:	6820      	ldr	r0, [r4, #0]
 80052a8:	f7ff fdfc 	bl	8004ea4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052ac:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80052ae:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052b0:	69da      	ldr	r2, [r3, #28]
 80052b2:	f042 0208 	orr.w	r2, r2, #8
 80052b6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052b8:	69da      	ldr	r2, [r3, #28]
 80052ba:	f022 0204 	bic.w	r2, r2, #4
 80052be:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80052c0:	69da      	ldr	r2, [r3, #28]
 80052c2:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 80052c4:	61da      	str	r2, [r3, #28]
    break;
 80052c6:	e7ae      	b.n	8005226 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80052c8:	6820      	ldr	r0, [r4, #0]
 80052ca:	f7ff fedf 	bl	800508c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80052ce:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 80052d0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80052d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052d4:	f042 0208 	orr.w	r2, r2, #8
 80052d8:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80052da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052dc:	f022 0204 	bic.w	r2, r2, #4
 80052e0:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 80052e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052e4:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 80052e6:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 80052e8:	e79d      	b.n	8005226 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80052ea:	6820      	ldr	r0, [r4, #0]
 80052ec:	f7ff fef6 	bl	80050dc <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80052f0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 80052f2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80052f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80052fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005302:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8005304:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005306:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800530a:	e7ec      	b.n	80052e6 <HAL_TIM_PWM_ConfigChannel+0xe6>

0800530c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800530c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005310:	9d06      	ldr	r5, [sp, #24]
 8005312:	4604      	mov	r4, r0
 8005314:	460f      	mov	r7, r1
 8005316:	4616      	mov	r6, r2
 8005318:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800531a:	6821      	ldr	r1, [r4, #0]
 800531c:	69ca      	ldr	r2, [r1, #28]
 800531e:	ea37 0302 	bics.w	r3, r7, r2
 8005322:	bf0c      	ite	eq
 8005324:	2201      	moveq	r2, #1
 8005326:	2200      	movne	r2, #0
 8005328:	42b2      	cmp	r2, r6
 800532a:	d002      	beq.n	8005332 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800532c:	2000      	movs	r0, #0
}
 800532e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8005332:	1c6b      	adds	r3, r5, #1
 8005334:	d0f2      	beq.n	800531c <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8005336:	b99d      	cbnz	r5, 8005360 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005338:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 800533a:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005342:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005344:	689a      	ldr	r2, [r3, #8]
 8005346:	f022 0201 	bic.w	r2, r2, #1
 800534a:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800534c:	2320      	movs	r3, #32
 800534e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8005352:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8005356:	2300      	movs	r3, #0
 8005358:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800535c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8005360:	f7fc fbee 	bl	8001b40 <HAL_GetTick>
 8005364:	eba0 0008 	sub.w	r0, r0, r8
 8005368:	4285      	cmp	r5, r0
 800536a:	d8d6      	bhi.n	800531a <UART_WaitOnFlagUntilTimeout+0xe>
 800536c:	e7e4      	b.n	8005338 <UART_WaitOnFlagUntilTimeout+0x2c>
	...

08005370 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005370:	b538      	push	{r3, r4, r5, lr}
 8005372:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005374:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005376:	69c3      	ldr	r3, [r0, #28]
 8005378:	6921      	ldr	r1, [r4, #16]
 800537a:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800537c:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800537e:	430a      	orrs	r2, r1
 8005380:	6961      	ldr	r1, [r4, #20]
 8005382:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005384:	4993      	ldr	r1, [pc, #588]	; (80055d4 <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005386:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005388:	4001      	ands	r1, r0
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800538a:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800538c:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800538e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005390:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005392:	686a      	ldr	r2, [r5, #4]
 8005394:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005398:	430a      	orrs	r2, r1
 800539a:	606a      	str	r2, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800539c:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800539e:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80053a0:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80053a2:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80053a6:	430a      	orrs	r2, r1
 80053a8:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053aa:	4a8b      	ldr	r2, [pc, #556]	; (80055d8 <UART_SetConfig+0x268>)
 80053ac:	4295      	cmp	r5, r2
 80053ae:	d119      	bne.n	80053e4 <UART_SetConfig+0x74>
 80053b0:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80053b4:	4989      	ldr	r1, [pc, #548]	; (80055dc <UART_SetConfig+0x26c>)
 80053b6:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80053ba:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053c2:	5c8a      	ldrb	r2, [r1, r2]
 80053c4:	f040 80b3 	bne.w	800552e <UART_SetConfig+0x1be>
  {
    switch (clocksource)
 80053c8:	2a08      	cmp	r2, #8
 80053ca:	f200 80ad 	bhi.w	8005528 <UART_SetConfig+0x1b8>
 80053ce:	e8df f012 	tbh	[pc, r2, lsl #1]
 80053d2:	0026      	.short	0x0026
 80053d4:	00e9007b 	.word	0x00e9007b
 80053d8:	00f500ab 	.word	0x00f500ab
 80053dc:	00ab00ab 	.word	0x00ab00ab
 80053e0:	00fb00ab 	.word	0x00fb00ab
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053e4:	4a7e      	ldr	r2, [pc, #504]	; (80055e0 <UART_SetConfig+0x270>)
 80053e6:	4295      	cmp	r5, r2
 80053e8:	d107      	bne.n	80053fa <UART_SetConfig+0x8a>
 80053ea:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 80053ee:	497d      	ldr	r1, [pc, #500]	; (80055e4 <UART_SetConfig+0x274>)
 80053f0:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80053f4:	f002 020c 	and.w	r2, r2, #12
 80053f8:	e7e1      	b.n	80053be <UART_SetConfig+0x4e>
 80053fa:	4a7b      	ldr	r2, [pc, #492]	; (80055e8 <UART_SetConfig+0x278>)
 80053fc:	4295      	cmp	r5, r2
 80053fe:	d12b      	bne.n	8005458 <UART_SetConfig+0xe8>
 8005400:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 8005404:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8005408:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800540c:	2a10      	cmp	r2, #16
 800540e:	f000 80d2 	beq.w	80055b6 <UART_SetConfig+0x246>
 8005412:	d816      	bhi.n	8005442 <UART_SetConfig+0xd2>
 8005414:	b9da      	cbnz	r2, 800544e <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005416:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800541a:	f040 809f 	bne.w	800555c <UART_SetConfig+0x1ec>
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800541e:	f7fe fa0f 	bl	8003840 <HAL_RCC_GetPCLK1Freq>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005422:	6861      	ldr	r1, [r4, #4]
 8005424:	084a      	lsrs	r2, r1, #1
 8005426:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800542a:	fbb3 f3f1 	udiv	r3, r3, r1
 800542e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005430:	2000      	movs	r0, #0
    default:
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8005432:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005436:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 800543a:	6821      	ldr	r1, [r4, #0]
 800543c:	4313      	orrs	r3, r2
 800543e:	60cb      	str	r3, [r1, #12]
 8005440:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005442:	2a20      	cmp	r2, #32
 8005444:	f000 80ab 	beq.w	800559e <UART_SetConfig+0x22e>
 8005448:	2a30      	cmp	r2, #48	; 0x30
 800544a:	f000 80ba 	beq.w	80055c2 <UART_SetConfig+0x252>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800544e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005452:	d069      	beq.n	8005528 <UART_SetConfig+0x1b8>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8005454:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 8005456:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005458:	4a64      	ldr	r2, [pc, #400]	; (80055ec <UART_SetConfig+0x27c>)
 800545a:	4295      	cmp	r5, r2
 800545c:	d10e      	bne.n	800547c <UART_SetConfig+0x10c>
 800545e:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 8005462:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8005466:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 800546a:	2a40      	cmp	r2, #64	; 0x40
 800546c:	f000 80a3 	beq.w	80055b6 <UART_SetConfig+0x246>
 8005470:	d9d0      	bls.n	8005414 <UART_SetConfig+0xa4>
 8005472:	2a80      	cmp	r2, #128	; 0x80
 8005474:	f000 8093 	beq.w	800559e <UART_SetConfig+0x22e>
 8005478:	2ac0      	cmp	r2, #192	; 0xc0
 800547a:	e7e6      	b.n	800544a <UART_SetConfig+0xda>
 800547c:	4a5c      	ldr	r2, [pc, #368]	; (80055f0 <UART_SetConfig+0x280>)
 800547e:	4295      	cmp	r5, r2
 8005480:	d110      	bne.n	80054a4 <UART_SetConfig+0x134>
 8005482:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 8005486:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800548a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800548e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8005492:	f000 8090 	beq.w	80055b6 <UART_SetConfig+0x246>
 8005496:	d9bd      	bls.n	8005414 <UART_SetConfig+0xa4>
 8005498:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800549c:	d07f      	beq.n	800559e <UART_SetConfig+0x22e>
 800549e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80054a2:	e7d2      	b.n	800544a <UART_SetConfig+0xda>
 80054a4:	4a53      	ldr	r2, [pc, #332]	; (80055f4 <UART_SetConfig+0x284>)
 80054a6:	4295      	cmp	r5, r2
 80054a8:	d117      	bne.n	80054da <UART_SetConfig+0x16a>
 80054aa:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 80054ae:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80054b2:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80054b6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80054ba:	d07c      	beq.n	80055b6 <UART_SetConfig+0x246>
 80054bc:	d807      	bhi.n	80054ce <UART_SetConfig+0x15e>
 80054be:	2a00      	cmp	r2, #0
 80054c0:	d1c5      	bne.n	800544e <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054c6:	d154      	bne.n	8005572 <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80054c8:	f7fe f9ca 	bl	8003860 <HAL_RCC_GetPCLK2Freq>
 80054cc:	e7a9      	b.n	8005422 <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054ce:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80054d2:	d064      	beq.n	800559e <UART_SetConfig+0x22e>
 80054d4:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80054d8:	e7b7      	b.n	800544a <UART_SetConfig+0xda>
 80054da:	4a47      	ldr	r2, [pc, #284]	; (80055f8 <UART_SetConfig+0x288>)
 80054dc:	4295      	cmp	r5, r2
 80054de:	d10f      	bne.n	8005500 <UART_SetConfig+0x190>
 80054e0:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 80054e4:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80054e8:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 80054ec:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80054f0:	d061      	beq.n	80055b6 <UART_SetConfig+0x246>
 80054f2:	d98f      	bls.n	8005414 <UART_SetConfig+0xa4>
 80054f4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80054f8:	d051      	beq.n	800559e <UART_SetConfig+0x22e>
 80054fa:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 80054fe:	e7a4      	b.n	800544a <UART_SetConfig+0xda>
 8005500:	4a3e      	ldr	r2, [pc, #248]	; (80055fc <UART_SetConfig+0x28c>)
 8005502:	4295      	cmp	r5, r2
 8005504:	d1a3      	bne.n	800544e <UART_SetConfig+0xde>
 8005506:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 800550a:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800550e:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8005512:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8005516:	d04e      	beq.n	80055b6 <UART_SetConfig+0x246>
 8005518:	f67f af7c 	bls.w	8005414 <UART_SetConfig+0xa4>
 800551c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005520:	d03d      	beq.n	800559e <UART_SetConfig+0x22e>
 8005522:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 8005526:	e790      	b.n	800544a <UART_SetConfig+0xda>
        ret = HAL_ERROR;
 8005528:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 800552a:	2300      	movs	r3, #0
 800552c:	e781      	b.n	8005432 <UART_SetConfig+0xc2>
    switch (clocksource)
 800552e:	2a08      	cmp	r2, #8
 8005530:	d890      	bhi.n	8005454 <UART_SetConfig+0xe4>
 8005532:	a301      	add	r3, pc, #4	; (adr r3, 8005538 <UART_SetConfig+0x1c8>)
 8005534:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8005538:	0800555d 	.word	0x0800555d
 800553c:	08005573 	.word	0x08005573
 8005540:	08005579 	.word	0x08005579
 8005544:	08005455 	.word	0x08005455
 8005548:	0800558f 	.word	0x0800558f
 800554c:	08005455 	.word	0x08005455
 8005550:	08005455 	.word	0x08005455
 8005554:	08005455 	.word	0x08005455
 8005558:	08005595 	.word	0x08005595
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800555c:	f7fe f970 	bl	8003840 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005560:	6863      	ldr	r3, [r4, #4]
 8005562:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8005566:	fbb0 f0f3 	udiv	r0, r0, r3
 800556a:	b280      	uxth	r0, r0
 800556c:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800556e:	2000      	movs	r0, #0
      break;
 8005570:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005572:	f7fe f975 	bl	8003860 <HAL_RCC_GetPCLK2Freq>
 8005576:	e7f3      	b.n	8005560 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005578:	6862      	ldr	r2, [r4, #4]
 800557a:	0853      	lsrs	r3, r2, #1
 800557c:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005580:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005584:	fbb3 f3f2 	udiv	r3, r3, r2
 8005588:	b29b      	uxth	r3, r3
 800558a:	60eb      	str	r3, [r5, #12]
 800558c:	e7ef      	b.n	800556e <UART_SetConfig+0x1fe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800558e:	f7fe f88b 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 8005592:	e7e5      	b.n	8005560 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005594:	6862      	ldr	r2, [r4, #4]
 8005596:	0853      	lsrs	r3, r2, #1
 8005598:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800559c:	e7f2      	b.n	8005584 <UART_SetConfig+0x214>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800559e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055a2:	d1e9      	bne.n	8005578 <UART_SetConfig+0x208>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80055a4:	6860      	ldr	r0, [r4, #4]
 80055a6:	0843      	lsrs	r3, r0, #1
 80055a8:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80055ac:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80055b0:	fbb3 f3f0 	udiv	r3, r3, r0
 80055b4:	e73b      	b.n	800542e <UART_SetConfig+0xbe>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055ba:	d1e8      	bne.n	800558e <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80055bc:	f7fe f874 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 80055c0:	e72f      	b.n	8005422 <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055c6:	d1e5      	bne.n	8005594 <UART_SetConfig+0x224>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80055c8:	6860      	ldr	r0, [r4, #4]
 80055ca:	0843      	lsrs	r3, r0, #1
 80055cc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80055d0:	e7ee      	b.n	80055b0 <UART_SetConfig+0x240>
 80055d2:	bf00      	nop
 80055d4:	efff69f3 	.word	0xefff69f3
 80055d8:	40011000 	.word	0x40011000
 80055dc:	08015b9c 	.word	0x08015b9c
 80055e0:	40004400 	.word	0x40004400
 80055e4:	08015ba0 	.word	0x08015ba0
 80055e8:	40004800 	.word	0x40004800
 80055ec:	40004c00 	.word	0x40004c00
 80055f0:	40005000 	.word	0x40005000
 80055f4:	40011400 	.word	0x40011400
 80055f8:	40007800 	.word	0x40007800
 80055fc:	40007c00 	.word	0x40007c00

08005600 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005600:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005602:	07da      	lsls	r2, r3, #31
{
 8005604:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005606:	d506      	bpl.n	8005616 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005608:	6801      	ldr	r1, [r0, #0]
 800560a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800560c:	684a      	ldr	r2, [r1, #4]
 800560e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005612:	4322      	orrs	r2, r4
 8005614:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005616:	079c      	lsls	r4, r3, #30
 8005618:	d506      	bpl.n	8005628 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800561a:	6801      	ldr	r1, [r0, #0]
 800561c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800561e:	684a      	ldr	r2, [r1, #4]
 8005620:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005624:	4322      	orrs	r2, r4
 8005626:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005628:	0759      	lsls	r1, r3, #29
 800562a:	d506      	bpl.n	800563a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800562c:	6801      	ldr	r1, [r0, #0]
 800562e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005630:	684a      	ldr	r2, [r1, #4]
 8005632:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005636:	4322      	orrs	r2, r4
 8005638:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800563a:	071a      	lsls	r2, r3, #28
 800563c:	d506      	bpl.n	800564c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800563e:	6801      	ldr	r1, [r0, #0]
 8005640:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005642:	684a      	ldr	r2, [r1, #4]
 8005644:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005648:	4322      	orrs	r2, r4
 800564a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800564c:	06dc      	lsls	r4, r3, #27
 800564e:	d506      	bpl.n	800565e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005650:	6801      	ldr	r1, [r0, #0]
 8005652:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005654:	688a      	ldr	r2, [r1, #8]
 8005656:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800565a:	4322      	orrs	r2, r4
 800565c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800565e:	0699      	lsls	r1, r3, #26
 8005660:	d506      	bpl.n	8005670 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005662:	6801      	ldr	r1, [r0, #0]
 8005664:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005666:	688a      	ldr	r2, [r1, #8]
 8005668:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800566c:	4322      	orrs	r2, r4
 800566e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005670:	065a      	lsls	r2, r3, #25
 8005672:	d510      	bpl.n	8005696 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005674:	6801      	ldr	r1, [r0, #0]
 8005676:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005678:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800567a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800567e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8005682:	ea42 0204 	orr.w	r2, r2, r4
 8005686:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005688:	d105      	bne.n	8005696 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800568a:	684a      	ldr	r2, [r1, #4]
 800568c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800568e:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8005692:	4322      	orrs	r2, r4
 8005694:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005696:	061b      	lsls	r3, r3, #24
 8005698:	d506      	bpl.n	80056a8 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800569a:	6802      	ldr	r2, [r0, #0]
 800569c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800569e:	6853      	ldr	r3, [r2, #4]
 80056a0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80056a4:	430b      	orrs	r3, r1
 80056a6:	6053      	str	r3, [r2, #4]
 80056a8:	bd10      	pop	{r4, pc}

080056aa <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ac:	2500      	movs	r5, #0
{
 80056ae:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056b0:	66c5      	str	r5, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80056b2:	f7fc fa45 	bl	8001b40 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056b6:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 80056b8:	4603      	mov	r3, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056ba:	6812      	ldr	r2, [r2, #0]
 80056bc:	0712      	lsls	r2, r2, #28
 80056be:	d409      	bmi.n	80056d4 <UART_CheckIdleState+0x2a>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 80056c0:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056c2:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80056c4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 80056c8:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState= HAL_UART_STATE_READY;
 80056cc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  return HAL_OK;
}
 80056d0:	b003      	add	sp, #12
 80056d2:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056d4:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80056d8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80056dc:	4620      	mov	r0, r4
 80056de:	9200      	str	r2, [sp, #0]
 80056e0:	462a      	mov	r2, r5
 80056e2:	f7ff fe13 	bl	800530c <UART_WaitOnFlagUntilTimeout>
 80056e6:	2800      	cmp	r0, #0
 80056e8:	d0ea      	beq.n	80056c0 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80056ea:	2003      	movs	r0, #3
 80056ec:	e7f0      	b.n	80056d0 <UART_CheckIdleState+0x26>

080056ee <HAL_UART_Init>:
{
 80056ee:	b510      	push	{r4, lr}
  if(huart == NULL)
 80056f0:	4604      	mov	r4, r0
 80056f2:	b360      	cbz	r0, 800574e <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 80056f4:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80056f8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80056fc:	b91b      	cbnz	r3, 8005706 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80056fe:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8005702:	f7fc f863 	bl	80017cc <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8005706:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005708:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800570a:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800570c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8005710:	6813      	ldr	r3, [r2, #0]
 8005712:	f023 0301 	bic.w	r3, r3, #1
 8005716:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005718:	f7ff fe2a 	bl	8005370 <UART_SetConfig>
 800571c:	2801      	cmp	r0, #1
 800571e:	d016      	beq.n	800574e <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005720:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005722:	b113      	cbz	r3, 800572a <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8005724:	4620      	mov	r0, r4
 8005726:	f7ff ff6b 	bl	8005600 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800572a:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800572c:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005734:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005736:	689a      	ldr	r2, [r3, #8]
 8005738:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800573c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	f042 0201 	orr.w	r2, r2, #1
}
 8005744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8005748:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800574a:	f7ff bfae 	b.w	80056aa <UART_CheckIdleState>
}
 800574e:	2001      	movs	r0, #1
 8005750:	bd10      	pop	{r4, pc}

08005752 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005752:	680b      	ldr	r3, [r1, #0]
 8005754:	684a      	ldr	r2, [r1, #4]
 8005756:	2b01      	cmp	r3, #1
 8005758:	f8d1 c010 	ldr.w	ip, [r1, #16]
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800575c:	6803      	ldr	r3, [r0, #0]
{
 800575e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005762:	f8d1 9008 	ldr.w	r9, [r1, #8]
 8005766:	f8d1 800c 	ldr.w	r8, [r1, #12]
 800576a:	694d      	ldr	r5, [r1, #20]
 800576c:	698c      	ldr	r4, [r1, #24]
 800576e:	f8d1 e01c 	ldr.w	lr, [r1, #28]
 8005772:	6a0f      	ldr	r7, [r1, #32]
 8005774:	6a4e      	ldr	r6, [r1, #36]	; 0x24
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005776:	d014      	beq.n	80057a2 <FMC_SDRAM_Init+0x50>
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005778:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800577c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005780:	431a      	orrs	r2, r3
 8005782:	ea42 0209 	orr.w	r2, r2, r9
 8005786:	ea42 0208 	orr.w	r2, r2, r8
 800578a:	ea42 030c 	orr.w	r3, r2, ip
 800578e:	432b      	orrs	r3, r5
 8005790:	4323      	orrs	r3, r4
 8005792:	ea43 030e 	orr.w	r3, r3, lr
 8005796:	433b      	orrs	r3, r7
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005798:	4333      	orrs	r3, r6
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800579a:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 800579c:	2000      	movs	r0, #0
 800579e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80057a2:	6841      	ldr	r1, [r0, #4]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80057a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80057a8:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 80057ac:	ea43 030e 	orr.w	r3, r3, lr
 80057b0:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 80057b4:	433b      	orrs	r3, r7
 80057b6:	430a      	orrs	r2, r1
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80057b8:	431e      	orrs	r6, r3
 80057ba:	ea42 0209 	orr.w	r2, r2, r9
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80057be:	6006      	str	r6, [r0, #0]
 80057c0:	ea42 0208 	orr.w	r2, r2, r8
 80057c4:	ea42 030c 	orr.w	r3, r2, ip
 80057c8:	432b      	orrs	r3, r5
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80057ca:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80057cc:	6043      	str	r3, [r0, #4]
 80057ce:	e7e5      	b.n	800579c <FMC_SDRAM_Init+0x4a>

080057d0 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80057d0:	2a01      	cmp	r2, #1
 80057d2:	f8d1 c00c 	ldr.w	ip, [r1, #12]
{
 80057d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057d8:	e891 4008 	ldmia.w	r1, {r3, lr}
 80057dc:	688f      	ldr	r7, [r1, #8]
 80057de:	690d      	ldr	r5, [r1, #16]
 80057e0:	694e      	ldr	r6, [r1, #20]
 80057e2:	6989      	ldr	r1, [r1, #24]
  if (Bank != FMC_SDRAM_BANK2) 
 80057e4:	d01b      	beq.n	800581e <FMC_SDRAM_Timing_Init+0x4e>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80057e6:	6882      	ldr	r2, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80057e8:	f10e 3eff 	add.w	lr, lr, #4294967295
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80057ec:	3b01      	subs	r3, #1
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80057ee:	f10c 3cff 	add.w	ip, ip, #4294967295
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80057f2:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80057f6:	3d01      	subs	r5, #1
                       (((Timing->RPDelay)-1) << 20)             |\
 80057f8:	3e01      	subs	r6, #1
                       (((Timing->RCDDelay)-1) << 24));
 80057fa:	3901      	subs	r1, #1
 80057fc:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
 8005800:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8005802:	1e7b      	subs	r3, r7, #1
 8005804:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8005808:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 800580c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8005810:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005814:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005818:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 800581a:	2000      	movs	r0, #0
 800581c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800581e:	6884      	ldr	r4, [r0, #8]
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8005820:	f10e 3eff 	add.w	lr, lr, #4294967295
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8005824:	68c2      	ldr	r2, [r0, #12]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005826:	3b01      	subs	r3, #1
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005828:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800582c:	f10c 3cff 	add.w	ip, ip, #4294967295
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005830:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                        (((Timing->RPDelay)-1) << 20)); 
 8005834:	3e01      	subs	r6, #1
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005836:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
                       (((Timing->RCDDelay)-1) << 24));   
 800583a:	3901      	subs	r1, #1
 800583c:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
 8005840:	ea44 340c 	orr.w	r4, r4, ip, lsl #12
 8005844:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8005846:	1e7b      	subs	r3, r7, #1
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8005848:	ea44 5606 	orr.w	r6, r4, r6, lsl #20
 800584c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8005850:	1e6b      	subs	r3, r5, #1
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005852:	6086      	str	r6, [r0, #8]
 8005854:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005858:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800585c:	60c3      	str	r3, [r0, #12]
 800585e:	e7dc      	b.n	800581a <FMC_SDRAM_Timing_Init+0x4a>

08005860 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005860:	e891 000c 	ldmia.w	r1, {r2, r3}
{
 8005864:	b513      	push	{r0, r1, r4, lr}
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005866:	4313      	orrs	r3, r2
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1) << 5) |\
                    ((Command->ModeRegisterDefinition) << 9)
 8005868:	68ca      	ldr	r2, [r1, #12]
{
 800586a:	4604      	mov	r4, r0
  __IO uint32_t tmpr = 0;
 800586c:	2000      	movs	r0, #0
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800586e:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8005872:	688a      	ldr	r2, [r1, #8]
  __IO uint32_t tmpr = 0;
 8005874:	9001      	str	r0, [sp, #4]
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8005876:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005878:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800587c:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 800587e:	9b01      	ldr	r3, [sp, #4]
 8005880:	6123      	str	r3, [r4, #16]
  
  return HAL_OK;  
}
 8005882:	b002      	add	sp, #8
 8005884:	bd10      	pop	{r4, pc}

08005886 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8005886:	6943      	ldr	r3, [r0, #20]
 8005888:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800588c:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 800588e:	2000      	movs	r0, #0
 8005890:	4770      	bx	lr
	...

08005894 <SDMMC_GetCmdResp2>:
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005894:	4b11      	ldr	r3, [pc, #68]	; (80058dc <SDMMC_GetCmdResp2+0x48>)
 8005896:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	fbb3 f2f2 	udiv	r2, r3, r2
 80058a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80058a4:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 80058a6:	f113 33ff 	adds.w	r3, r3, #4294967295
 80058aa:	d314      	bcc.n	80058d6 <SDMMC_GetCmdResp2+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80058ac:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80058ae:	f012 0f45 	tst.w	r2, #69	; 0x45
 80058b2:	d0f8      	beq.n	80058a6 <SDMMC_GetCmdResp2+0x12>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80058b4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80058b6:	075b      	lsls	r3, r3, #29
 80058b8:	d503      	bpl.n	80058c2 <SDMMC_GetCmdResp2+0x2e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80058ba:	2304      	movs	r3, #4
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80058bc:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 80058be:	4618      	mov	r0, r3
 80058c0:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80058c2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80058c4:	f013 0301 	ands.w	r3, r3, #1
 80058c8:	d001      	beq.n	80058ce <SDMMC_GetCmdResp2+0x3a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80058ca:	2301      	movs	r3, #1
 80058cc:	e7f6      	b.n	80058bc <SDMMC_GetCmdResp2+0x28>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80058ce:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80058d2:	6382      	str	r2, [r0, #56]	; 0x38
 80058d4:	e7f3      	b.n	80058be <SDMMC_GetCmdResp2+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 80058d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80058da:	e7f0      	b.n	80058be <SDMMC_GetCmdResp2+0x2a>
 80058dc:	20000000 	.word	0x20000000

080058e0 <SDMMC_GetCmdResp3>:
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80058e0:	4b0f      	ldr	r3, [pc, #60]	; (8005920 <SDMMC_GetCmdResp3+0x40>)
 80058e2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	fbb3 f2f2 	udiv	r2, r3, r2
 80058ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80058f0:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 80058f2:	f113 33ff 	adds.w	r3, r3, #4294967295
 80058f6:	d30f      	bcc.n	8005918 <SDMMC_GetCmdResp3+0x38>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80058f8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80058fa:	f012 0f45 	tst.w	r2, #69	; 0x45
 80058fe:	d0f8      	beq.n	80058f2 <SDMMC_GetCmdResp3+0x12>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005900:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005902:	f013 0304 	ands.w	r3, r3, #4
 8005906:	d003      	beq.n	8005910 <SDMMC_GetCmdResp3+0x30>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005908:	2304      	movs	r3, #4
 800590a:	6383      	str	r3, [r0, #56]	; 0x38
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
  }
  
  return SDMMC_ERROR_NONE;
 800590c:	4618      	mov	r0, r3
 800590e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8005910:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005914:	6382      	str	r2, [r0, #56]	; 0x38
 8005916:	e7f9      	b.n	800590c <SDMMC_GetCmdResp3+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8005918:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	20000000 	.word	0x20000000

08005924 <SDMMC_Init>:
{
 8005924:	b084      	sub	sp, #16
 8005926:	b510      	push	{r4, lr}
 8005928:	ac03      	add	r4, sp, #12
 800592a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 800592e:	9904      	ldr	r1, [sp, #16]
 8005930:	9b03      	ldr	r3, [sp, #12]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005932:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 8005934:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 8005936:	9905      	ldr	r1, [sp, #20]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005938:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.ClockBypass         |\
 800593c:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 800593e:	9906      	ldr	r1, [sp, #24]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005940:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
             Init.ClockPowerSave      |\
 8005944:	430b      	orrs	r3, r1
             Init.BusWide             |\
 8005946:	9907      	ldr	r1, [sp, #28]
 8005948:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 800594a:	9908      	ldr	r1, [sp, #32]
 800594c:	430b      	orrs	r3, r1
}
 800594e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005952:	4313      	orrs	r3, r2
}
 8005954:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005956:	6043      	str	r3, [r0, #4]
}
 8005958:	2000      	movs	r0, #0
 800595a:	4770      	bx	lr

0800595c <SDMMC_ReadFIFO>:
 800595c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8005960:	4770      	bx	lr

08005962 <SDMMC_PowerState_ON>:
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8005962:	2303      	movs	r3, #3
 8005964:	6003      	str	r3, [r0, #0]
}
 8005966:	2000      	movs	r0, #0
 8005968:	4770      	bx	lr

0800596a <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800596a:	6800      	ldr	r0, [r0, #0]
}
 800596c:	f000 0003 	and.w	r0, r0, #3
 8005970:	4770      	bx	lr

08005972 <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 8005972:	680b      	ldr	r3, [r1, #0]
{
 8005974:	b510      	push	{r4, lr}
  SDMMCx->ARG = Command->Argument;
 8005976:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005978:	688c      	ldr	r4, [r1, #8]
 800597a:	684b      	ldr	r3, [r1, #4]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800597c:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800597e:	4323      	orrs	r3, r4
                       Command->Response         |\
 8005980:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005982:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
                       Command->WaitForInterrupt |\
 8005986:	6909      	ldr	r1, [r1, #16]
                       Command->Response         |\
 8005988:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800598a:	f022 020f 	bic.w	r2, r2, #15
                       Command->WaitForInterrupt |\
 800598e:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005990:	4313      	orrs	r3, r2
 8005992:	60c3      	str	r3, [r0, #12]
}
 8005994:	2000      	movs	r0, #0
 8005996:	bd10      	pop	{r4, pc}

08005998 <SDMMC_GetResponse>:
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8005998:	3014      	adds	r0, #20
{
 800599a:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 800599c:	2300      	movs	r3, #0
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800599e:	4401      	add	r1, r0
  __IO uint32_t tmp = 0;
 80059a0:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 80059a2:	9101      	str	r1, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 80059a4:	9b01      	ldr	r3, [sp, #4]
 80059a6:	6818      	ldr	r0, [r3, #0]
}  
 80059a8:	b002      	add	sp, #8
 80059aa:	4770      	bx	lr

080059ac <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80059ac:	4b44      	ldr	r3, [pc, #272]	; (8005ac0 <SDMMC_GetCmdResp1+0x114>)
{
 80059ae:	b510      	push	{r4, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 80059b6:	fbb3 f3f4 	udiv	r3, r3, r4
 80059ba:	435a      	muls	r2, r3
    if (count-- == 0)
 80059bc:	2a00      	cmp	r2, #0
 80059be:	d049      	beq.n	8005a54 <SDMMC_GetCmdResp1+0xa8>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80059c0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80059c2:	3a01      	subs	r2, #1
 80059c4:	f013 0f45 	tst.w	r3, #69	; 0x45
 80059c8:	d0f8      	beq.n	80059bc <SDMMC_GetCmdResp1+0x10>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80059ca:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80059cc:	075c      	lsls	r4, r3, #29
 80059ce:	d503      	bpl.n	80059d8 <SDMMC_GetCmdResp1+0x2c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80059d0:	2304      	movs	r3, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80059d2:	6383      	str	r3, [r0, #56]	; 0x38
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80059d8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80059da:	f013 0301 	ands.w	r3, r3, #1
 80059de:	d001      	beq.n	80059e4 <SDMMC_GetCmdResp1+0x38>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80059e0:	2301      	movs	r3, #1
 80059e2:	e7f6      	b.n	80059d2 <SDMMC_GetCmdResp1+0x26>
  return (uint8_t)(SDMMCx->RESPCMD);
 80059e4:	6902      	ldr	r2, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80059e6:	b2d2      	uxtb	r2, r2
 80059e8:	4291      	cmp	r1, r2
 80059ea:	d136      	bne.n	8005a5a <SDMMC_GetCmdResp1+0xae>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80059ec:	f240 52ff 	movw	r2, #1535	; 0x5ff
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80059f0:	4619      	mov	r1, r3
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80059f2:	6382      	str	r2, [r0, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80059f4:	f7ff ffd0 	bl	8005998 <SDMMC_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80059f8:	4b32      	ldr	r3, [pc, #200]	; (8005ac4 <SDMMC_GetCmdResp1+0x118>)
 80059fa:	4003      	ands	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d0e9      	beq.n	80059d4 <SDMMC_GetCmdResp1+0x28>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005a00:	2800      	cmp	r0, #0
 8005a02:	db2c      	blt.n	8005a5e <SDMMC_GetCmdResp1+0xb2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005a04:	0042      	lsls	r2, r0, #1
 8005a06:	d42d      	bmi.n	8005a64 <SDMMC_GetCmdResp1+0xb8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005a08:	0084      	lsls	r4, r0, #2
 8005a0a:	d42d      	bmi.n	8005a68 <SDMMC_GetCmdResp1+0xbc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005a0c:	00c1      	lsls	r1, r0, #3
 8005a0e:	d42d      	bmi.n	8005a6c <SDMMC_GetCmdResp1+0xc0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005a10:	0102      	lsls	r2, r0, #4
 8005a12:	d42e      	bmi.n	8005a72 <SDMMC_GetCmdResp1+0xc6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005a14:	0144      	lsls	r4, r0, #5
 8005a16:	d42f      	bmi.n	8005a78 <SDMMC_GetCmdResp1+0xcc>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005a18:	01c1      	lsls	r1, r0, #7
 8005a1a:	d430      	bmi.n	8005a7e <SDMMC_GetCmdResp1+0xd2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005a1c:	0202      	lsls	r2, r0, #8
 8005a1e:	d431      	bmi.n	8005a84 <SDMMC_GetCmdResp1+0xd8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005a20:	0244      	lsls	r4, r0, #9
 8005a22:	d432      	bmi.n	8005a8a <SDMMC_GetCmdResp1+0xde>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005a24:	0281      	lsls	r1, r0, #10
 8005a26:	d433      	bmi.n	8005a90 <SDMMC_GetCmdResp1+0xe4>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005a28:	02c2      	lsls	r2, r0, #11
 8005a2a:	d434      	bmi.n	8005a96 <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005a2c:	0344      	lsls	r4, r0, #13
 8005a2e:	d435      	bmi.n	8005a9c <SDMMC_GetCmdResp1+0xf0>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005a30:	0381      	lsls	r1, r0, #14
 8005a32:	d436      	bmi.n	8005aa2 <SDMMC_GetCmdResp1+0xf6>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005a34:	03c2      	lsls	r2, r0, #15
 8005a36:	d437      	bmi.n	8005aa8 <SDMMC_GetCmdResp1+0xfc>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005a38:	0404      	lsls	r4, r0, #16
 8005a3a:	d438      	bmi.n	8005aae <SDMMC_GetCmdResp1+0x102>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005a3c:	0441      	lsls	r1, r0, #17
 8005a3e:	d439      	bmi.n	8005ab4 <SDMMC_GetCmdResp1+0x108>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005a40:	0482      	lsls	r2, r0, #18
 8005a42:	d43a      	bmi.n	8005aba <SDMMC_GetCmdResp1+0x10e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005a44:	f010 0f08 	tst.w	r0, #8
 8005a48:	bf14      	ite	ne
 8005a4a:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8005a4e:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8005a52:	e7bf      	b.n	80059d4 <SDMMC_GetCmdResp1+0x28>
      return SDMMC_ERROR_TIMEOUT;
 8005a54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005a58:	e7bc      	b.n	80059d4 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e7ba      	b.n	80059d4 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005a5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a62:	e7b7      	b.n	80059d4 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005a64:	2340      	movs	r3, #64	; 0x40
 8005a66:	e7b5      	b.n	80059d4 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005a68:	2380      	movs	r3, #128	; 0x80
 8005a6a:	e7b3      	b.n	80059d4 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005a6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a70:	e7b0      	b.n	80059d4 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005a72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a76:	e7ad      	b.n	80059d4 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005a78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a7c:	e7aa      	b.n	80059d4 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005a7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a82:	e7a7      	b.n	80059d4 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a88:	e7a4      	b.n	80059d4 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005a8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a8e:	e7a1      	b.n	80059d4 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005a90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005a94:	e79e      	b.n	80059d4 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_CC_ERR;
 8005a96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a9a:	e79b      	b.n	80059d4 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005a9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005aa0:	e798      	b.n	80059d4 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005aa2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005aa6:	e795      	b.n	80059d4 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005aa8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005aac:	e792      	b.n	80059d4 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005aae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005ab2:	e78f      	b.n	80059d4 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005ab4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005ab8:	e78c      	b.n	80059d4 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_ERASE_RESET;
 8005aba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005abe:	e789      	b.n	80059d4 <SDMMC_GetCmdResp1+0x28>
 8005ac0:	20000000 	.word	0x20000000
 8005ac4:	fdffe008 	.word	0xfdffe008

08005ac8 <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 8005ac8:	680b      	ldr	r3, [r1, #0]
{
 8005aca:	b510      	push	{r4, lr}
  SDMMCx->DTIMER = Data->DataTimeOut;
 8005acc:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 8005ace:	684b      	ldr	r3, [r1, #4]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005ad0:	68cc      	ldr	r4, [r1, #12]
  SDMMCx->DLEN = Data->DataLength;
 8005ad2:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005ad4:	688b      	ldr	r3, [r1, #8]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005ad6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005ad8:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 8005ada:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 8005adc:	6949      	ldr	r1, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005ade:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
                       Data->TransferDir   |\
 8005ae2:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8005ae4:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8005aea:	2000      	movs	r0, #0
 8005aec:	bd10      	pop	{r4, pc}

08005aee <SDMMC_CmdBlockLength>:
{
 8005aee:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005af0:	2340      	movs	r3, #64	; 0x40
{
 8005af2:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005af4:	2410      	movs	r4, #16
{
 8005af6:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005af8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005afa:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005afc:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005afe:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005b00:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005b02:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005b06:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005b08:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005b0a:	f7ff ff32 	bl	8005972 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8005b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b12:	4621      	mov	r1, r4
 8005b14:	4628      	mov	r0, r5
 8005b16:	f7ff ff49 	bl	80059ac <SDMMC_GetCmdResp1>
}
 8005b1a:	b007      	add	sp, #28
 8005b1c:	bd30      	pop	{r4, r5, pc}

08005b1e <SDMMC_CmdSelDesel>:
{
 8005b1e:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005b20:	2340      	movs	r3, #64	; 0x40
{
 8005b22:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005b24:	2407      	movs	r4, #7
{
 8005b26:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005b28:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005b2a:	2300      	movs	r3, #0
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005b2c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005b2e:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005b30:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005b36:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005b38:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005b3a:	f7ff ff1a 	bl	8005972 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8005b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b42:	4621      	mov	r1, r4
 8005b44:	4628      	mov	r0, r5
 8005b46:	f7ff ff31 	bl	80059ac <SDMMC_GetCmdResp1>
}
 8005b4a:	b007      	add	sp, #28
 8005b4c:	bd30      	pop	{r4, r5, pc}
	...

08005b50 <SDMMC_CmdGoIdleState>:
{
 8005b50:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = 0;
 8005b52:	2300      	movs	r3, #0
{
 8005b54:	b086      	sub	sp, #24
 8005b56:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 8005b58:	9301      	str	r3, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005b5a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005b5c:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8005b5e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005b60:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005b62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b66:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005b68:	f7ff ff03 	bl	8005972 <SDMMC_SendCommand>
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005b6c:	4b0b      	ldr	r3, [pc, #44]	; (8005b9c <SDMMC_CmdGoIdleState+0x4c>)
 8005b6e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	fbb3 f2f2 	udiv	r2, r3, r2
 8005b78:	f241 3388 	movw	r3, #5000	; 0x1388
 8005b7c:	4353      	muls	r3, r2
    if (count-- == 0)
 8005b7e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8005b82:	d308      	bcc.n	8005b96 <SDMMC_CmdGoIdleState+0x46>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8005b84:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005b86:	0612      	lsls	r2, r2, #24
 8005b88:	d5f9      	bpl.n	8005b7e <SDMMC_CmdGoIdleState+0x2e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8005b8a:	f240 53ff 	movw	r3, #1535	; 0x5ff
  return SDMMC_ERROR_NONE;
 8005b8e:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8005b90:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8005b92:	b006      	add	sp, #24
 8005b94:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8005b96:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 8005b9a:	e7fa      	b.n	8005b92 <SDMMC_CmdGoIdleState+0x42>
 8005b9c:	20000000 	.word	0x20000000

08005ba0 <SDMMC_CmdOperCond>:
{
 8005ba0:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005ba2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
{
 8005ba6:	b086      	sub	sp, #24
 8005ba8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005baa:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005bac:	2308      	movs	r3, #8
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005bae:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005bb0:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005bb2:	2340      	movs	r3, #64	; 0x40
 8005bb4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005bba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bbe:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005bc0:	f7ff fed7 	bl	8005972 <SDMMC_SendCommand>
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005bc4:	4b11      	ldr	r3, [pc, #68]	; (8005c0c <SDMMC_CmdOperCond+0x6c>)
 8005bc6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	fbb3 f2f2 	udiv	r2, r3, r2
 8005bd0:	f241 3388 	movw	r3, #5000	; 0x1388
 8005bd4:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 8005bd6:	f113 33ff 	adds.w	r3, r3, #4294967295
 8005bda:	d314      	bcc.n	8005c06 <SDMMC_CmdOperCond+0x66>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8005bdc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005bde:	f012 0f45 	tst.w	r2, #69	; 0x45
 8005be2:	d0f8      	beq.n	8005bd6 <SDMMC_CmdOperCond+0x36>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005be4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005be6:	f012 0204 	ands.w	r2, r2, #4
 8005bea:	d004      	beq.n	8005bf6 <SDMMC_CmdOperCond+0x56>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005bec:	2340      	movs	r3, #64	; 0x40
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005bee:	2004      	movs	r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005bf0:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8005bf2:	b006      	add	sp, #24
 8005bf4:	bd10      	pop	{r4, pc}
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8005bf6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005bf8:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8005bfc:	d0f9      	beq.n	8005bf2 <SDMMC_CmdOperCond+0x52>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005bfe:	2340      	movs	r3, #64	; 0x40
  }
  
  return SDMMC_ERROR_NONE;
 8005c00:	4610      	mov	r0, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005c02:	63a3      	str	r3, [r4, #56]	; 0x38
 8005c04:	e7f5      	b.n	8005bf2 <SDMMC_CmdOperCond+0x52>
      return SDMMC_ERROR_TIMEOUT;
 8005c06:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005c0a:	e7f2      	b.n	8005bf2 <SDMMC_CmdOperCond+0x52>
 8005c0c:	20000000 	.word	0x20000000

08005c10 <SDMMC_CmdAppCommand>:
{
 8005c10:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005c12:	2340      	movs	r3, #64	; 0x40
{
 8005c14:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005c16:	2437      	movs	r4, #55	; 0x37
{
 8005c18:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005c1a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005c1c:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005c1e:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005c20:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005c22:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005c24:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005c28:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005c2a:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005c2c:	f7ff fea1 	bl	8005972 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8005c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c34:	4621      	mov	r1, r4
 8005c36:	4628      	mov	r0, r5
 8005c38:	f7ff feb8 	bl	80059ac <SDMMC_GetCmdResp1>
}
 8005c3c:	b007      	add	sp, #28
 8005c3e:	bd30      	pop	{r4, r5, pc}

08005c40 <SDMMC_CmdAppOperCommand>:
{
 8005c40:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005c42:	2329      	movs	r3, #41	; 0x29
{
 8005c44:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8005c46:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
{
 8005c4a:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005c4c:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005c4e:	2340      	movs	r3, #64	; 0x40
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8005c50:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005c54:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005c56:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8005c58:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005c5a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005c5c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005c5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c62:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005c64:	f7ff fe85 	bl	8005972 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8005c68:	4620      	mov	r0, r4
 8005c6a:	f7ff fe39 	bl	80058e0 <SDMMC_GetCmdResp3>
}
 8005c6e:	b006      	add	sp, #24
 8005c70:	bd10      	pop	{r4, pc}

08005c72 <SDMMC_CmdSendSCR>:
{
 8005c72:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Argument         = 0;
 8005c74:	2300      	movs	r3, #0
{
 8005c76:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005c78:	2433      	movs	r4, #51	; 0x33
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005c7a:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.Argument         = 0;
 8005c7c:	9301      	str	r3, [sp, #4]
{
 8005c7e:	4605      	mov	r5, r0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005c80:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005c82:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005c86:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005c88:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005c8a:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005c8c:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005c8e:	f7ff fe70 	bl	8005972 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8005c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c96:	4621      	mov	r1, r4
 8005c98:	4628      	mov	r0, r5
 8005c9a:	f7ff fe87 	bl	80059ac <SDMMC_GetCmdResp1>
}
 8005c9e:	b007      	add	sp, #28
 8005ca0:	bd30      	pop	{r4, r5, pc}

08005ca2 <SDMMC_CmdSendCID>:
{
 8005ca2:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = 0;
 8005ca4:	2300      	movs	r3, #0
{
 8005ca6:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005ca8:	2202      	movs	r2, #2
{
 8005caa:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 8005cac:	9301      	str	r3, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005cae:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005cb0:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005cb2:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005cb4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005cb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005cba:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005cbc:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005cbe:	f7ff fe58 	bl	8005972 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005cc2:	4620      	mov	r0, r4
 8005cc4:	f7ff fde6 	bl	8005894 <SDMMC_GetCmdResp2>
}
 8005cc8:	b006      	add	sp, #24
 8005cca:	bd10      	pop	{r4, pc}

08005ccc <SDMMC_CmdSendCSD>:
{
 8005ccc:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005cce:	2309      	movs	r3, #9
{
 8005cd0:	b086      	sub	sp, #24
 8005cd2:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005cd4:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005cd6:	23c0      	movs	r3, #192	; 0xc0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005cd8:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005cda:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005cdc:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005ce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ce6:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005ce8:	f7ff fe43 	bl	8005972 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005cec:	4620      	mov	r0, r4
 8005cee:	f7ff fdd1 	bl	8005894 <SDMMC_GetCmdResp2>
}
 8005cf2:	b006      	add	sp, #24
 8005cf4:	bd10      	pop	{r4, pc}
	...

08005cf8 <SDMMC_CmdSetRelAdd>:
{
 8005cf8:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Argument         = 0;
 8005cfa:	2300      	movs	r3, #0
{
 8005cfc:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005cfe:	2203      	movs	r2, #3
{
 8005d00:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0;
 8005d02:	9301      	str	r3, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005d04:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005d06:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005d08:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005d0a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005d0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005d10:	9203      	str	r2, [sp, #12]
{
 8005d12:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005d14:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005d16:	f7ff fe2c 	bl	8005972 <SDMMC_SendCommand>
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005d1a:	4b20      	ldr	r3, [pc, #128]	; (8005d9c <SDMMC_CmdSetRelAdd+0xa4>)
 8005d1c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d26:	f241 3388 	movw	r3, #5000	; 0x1388
 8005d2a:	4353      	muls	r3, r2
    if (count-- == 0)
 8005d2c:	f113 33ff 	adds.w	r3, r3, #4294967295
 8005d30:	d32b      	bcc.n	8005d8a <SDMMC_CmdSetRelAdd+0x92>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8005d32:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005d34:	f012 0f45 	tst.w	r2, #69	; 0x45
 8005d38:	d0f8      	beq.n	8005d2c <SDMMC_CmdSetRelAdd+0x34>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005d3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d3c:	075a      	lsls	r2, r3, #29
 8005d3e:	d503      	bpl.n	8005d48 <SDMMC_CmdSetRelAdd+0x50>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005d40:	2004      	movs	r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005d42:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8005d44:	b007      	add	sp, #28
 8005d46:	bd30      	pop	{r4, r5, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005d48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d4a:	f011 0101 	ands.w	r1, r1, #1
 8005d4e:	d001      	beq.n	8005d54 <SDMMC_CmdSetRelAdd+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005d50:	2001      	movs	r0, #1
 8005d52:	e7f6      	b.n	8005d42 <SDMMC_CmdSetRelAdd+0x4a>
  return (uint8_t)(SDMMCx->RESPCMD);
 8005d54:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	2b03      	cmp	r3, #3
 8005d5a:	d119      	bne.n	8005d90 <SDMMC_CmdSetRelAdd+0x98>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8005d5c:	f240 53ff 	movw	r3, #1535	; 0x5ff
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005d60:	4620      	mov	r0, r4
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8005d62:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005d64:	f7ff fe18 	bl	8005998 <SDMMC_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005d68:	f410 4360 	ands.w	r3, r0, #57344	; 0xe000
 8005d6c:	d103      	bne.n	8005d76 <SDMMC_CmdSetRelAdd+0x7e>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005d6e:	0c00      	lsrs	r0, r0, #16
 8005d70:	8028      	strh	r0, [r5, #0]
    return SDMMC_ERROR_NONE;
 8005d72:	4618      	mov	r0, r3
 8005d74:	e7e6      	b.n	8005d44 <SDMMC_CmdSetRelAdd+0x4c>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005d76:	0443      	lsls	r3, r0, #17
 8005d78:	d40c      	bmi.n	8005d94 <SDMMC_CmdSetRelAdd+0x9c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005d7a:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8005d7e:	bf14      	ite	ne
 8005d80:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8005d84:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8005d88:	e7dc      	b.n	8005d44 <SDMMC_CmdSetRelAdd+0x4c>
      return SDMMC_ERROR_TIMEOUT;
 8005d8a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005d8e:	e7d9      	b.n	8005d44 <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005d90:	2001      	movs	r0, #1
 8005d92:	e7d7      	b.n	8005d44 <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005d94:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005d98:	e7d4      	b.n	8005d44 <SDMMC_CmdSetRelAdd+0x4c>
 8005d9a:	bf00      	nop
 8005d9c:	20000000 	.word	0x20000000

08005da0 <SDMMC_CmdSwitch>:
{
 8005da0:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005da2:	2340      	movs	r3, #64	; 0x40
{
 8005da4:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 8005da6:	2406      	movs	r4, #6
{
 8005da8:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005daa:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005dac:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = Argument;
 8005dae:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005db0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005db2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005db4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 8005db8:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005dba:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005dbc:	f7ff fdd9 	bl	8005972 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 8005dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dc4:	4621      	mov	r1, r4
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	f7ff fdf0 	bl	80059ac <SDMMC_GetCmdResp1>
}
 8005dcc:	b007      	add	sp, #28
 8005dce:	bd30      	pop	{r4, r5, pc}

08005dd0 <SDMMC_CmdBusWidth>:
 8005dd0:	f7ff bfe6 	b.w	8005da0 <SDMMC_CmdSwitch>

08005dd4 <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 8005dd4:	2000      	movs	r0, #0
 8005dd6:	4770      	bx	lr

08005dd8 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8005dd8:	4770      	bx	lr
	...

08005ddc <ft5336_ReadID>:
{
 8005ddc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  volatile uint8_t ucReadId = 0;
 8005dde:	2300      	movs	r3, #0
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
 8005de0:	4c0f      	ldr	r4, [pc, #60]	; (8005e20 <ft5336_ReadID+0x44>)
{
 8005de2:	4605      	mov	r5, r0
  volatile uint8_t ucReadId = 0;
 8005de4:	f88d 3007 	strb.w	r3, [sp, #7]
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8005de8:	7823      	ldrb	r3, [r4, #0]
 8005dea:	b91b      	cbnz	r3, 8005df4 <ft5336_ReadID+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8005dec:	f000 f9f0 	bl	80061d0 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8005df0:	2301      	movs	r3, #1
 8005df2:	7023      	strb	r3, [r4, #0]
{
 8005df4:	2403      	movs	r4, #3
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8005df6:	b2ed      	uxtb	r5, r5
 8005df8:	3c01      	subs	r4, #1
 8005dfa:	21a8      	movs	r1, #168	; 0xa8
 8005dfc:	4628      	mov	r0, r5
 8005dfe:	f000 f9fd 	bl	80061fc <TS_IO_Read>
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8005e02:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8005e06:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 8005e0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005e0e:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8005e10:	d103      	bne.n	8005e1a <ft5336_ReadID+0x3e>
  return (ucReadId);
 8005e12:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8005e16:	b003      	add	sp, #12
 8005e18:	bd30      	pop	{r4, r5, pc}
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8005e1a:	2b51      	cmp	r3, #81	; 0x51
 8005e1c:	d1ec      	bne.n	8005df8 <ft5336_ReadID+0x1c>
 8005e1e:	e7f8      	b.n	8005e12 <ft5336_ReadID+0x36>
 8005e20:	2000031a 	.word	0x2000031a

08005e24 <ft5336_TS_DetectTouch>:
{
 8005e24:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
 8005e26:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8005e28:	2102      	movs	r1, #2
 8005e2a:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 8005e2c:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8005e30:	f000 f9e4 	bl	80061fc <TS_IO_Read>
 8005e34:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 8005e38:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005e3c:	f003 030f 	and.w	r3, r3, #15
 8005e40:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8005e44:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005e48:	2b05      	cmp	r3, #5
 8005e4a:	d901      	bls.n	8005e50 <ft5336_TS_DetectTouch+0x2c>
    nbTouch = 0;
 8005e4c:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 8005e50:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8005e54:	4b03      	ldr	r3, [pc, #12]	; (8005e64 <ft5336_TS_DetectTouch+0x40>)
  return(nbTouch);
 8005e56:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 8005e5a:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	709a      	strb	r2, [r3, #2]
}
 8005e60:	b002      	add	sp, #8
 8005e62:	bd10      	pop	{r4, pc}
 8005e64:	2000031a 	.word	0x2000031a

08005e68 <ft5336_TS_GetXY>:
{
 8005e68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8005e6c:	4d29      	ldr	r5, [pc, #164]	; (8005f14 <ft5336_TS_GetXY+0xac>)
{
 8005e6e:	4617      	mov	r7, r2
  volatile uint8_t ucReadData = 0;
 8005e70:	2400      	movs	r4, #0
{
 8005e72:	4689      	mov	r9, r1
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8005e74:	78ab      	ldrb	r3, [r5, #2]
 8005e76:	786a      	ldrb	r2, [r5, #1]
  volatile uint8_t ucReadData = 0;
 8005e78:	f88d 4007 	strb.w	r4, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d941      	bls.n	8005f04 <ft5336_TS_GetXY+0x9c>
 8005e80:	2b09      	cmp	r3, #9
 8005e82:	d842      	bhi.n	8005f0a <ft5336_TS_GetXY+0xa2>
 8005e84:	4a24      	ldr	r2, [pc, #144]	; (8005f18 <ft5336_TS_GetXY+0xb0>)
 8005e86:	5cd1      	ldrb	r1, [r2, r3]
 8005e88:	4a24      	ldr	r2, [pc, #144]	; (8005f1c <ft5336_TS_GetXY+0xb4>)
 8005e8a:	f812 b003 	ldrb.w	fp, [r2, r3]
 8005e8e:	4a24      	ldr	r2, [pc, #144]	; (8005f20 <ft5336_TS_GetXY+0xb8>)
 8005e90:	f812 a003 	ldrb.w	sl, [r2, r3]
 8005e94:	4a23      	ldr	r2, [pc, #140]	; (8005f24 <ft5336_TS_GetXY+0xbc>)
 8005e96:	5cd4      	ldrb	r4, [r2, r3]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8005e98:	fa5f f880 	uxtb.w	r8, r0
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8005e9c:	4e22      	ldr	r6, [pc, #136]	; (8005f28 <ft5336_TS_GetXY+0xc0>)
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8005e9e:	4640      	mov	r0, r8
 8005ea0:	f000 f9ac 	bl	80061fc <TS_IO_Read>
 8005ea4:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8005ea8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8005eac:	4659      	mov	r1, fp
 8005eae:	4640      	mov	r0, r8
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8005eb0:	8033      	strh	r3, [r6, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8005eb2:	f000 f9a3 	bl	80061fc <TS_IO_Read>
 8005eb6:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8005eba:	4651      	mov	r1, sl
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8005ebc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8005ec0:	4640      	mov	r0, r8
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8005ec2:	8832      	ldrh	r2, [r6, #0]
 8005ec4:	021b      	lsls	r3, r3, #8
 8005ec6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005eca:	4313      	orrs	r3, r2
    *X = coord;
 8005ecc:	f8a9 3000 	strh.w	r3, [r9]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8005ed0:	8033      	strh	r3, [r6, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8005ed2:	f000 f993 	bl	80061fc <TS_IO_Read>
 8005ed6:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8005eda:	4621      	mov	r1, r4
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8005edc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8005ee0:	4640      	mov	r0, r8
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8005ee2:	8033      	strh	r3, [r6, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8005ee4:	f000 f98a 	bl	80061fc <TS_IO_Read>
 8005ee8:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8005eec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005ef0:	8832      	ldrh	r2, [r6, #0]
 8005ef2:	021b      	lsls	r3, r3, #8
 8005ef4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	8033      	strh	r3, [r6, #0]
    *Y = coord;
 8005efc:	803b      	strh	r3, [r7, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8005efe:	78ab      	ldrb	r3, [r5, #2]
 8005f00:	3301      	adds	r3, #1
 8005f02:	70ab      	strb	r3, [r5, #2]
}
 8005f04:	b003      	add	sp, #12
 8005f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8005f0a:	46a2      	mov	sl, r4
 8005f0c:	46a3      	mov	fp, r4
 8005f0e:	4621      	mov	r1, r4
 8005f10:	e7c2      	b.n	8005e98 <ft5336_TS_GetXY+0x30>
 8005f12:	bf00      	nop
 8005f14:	2000031a 	.word	0x2000031a
 8005f18:	08015bad 	.word	0x08015bad
 8005f1c:	08015bb7 	.word	0x08015bb7
 8005f20:	08015bc1 	.word	0x08015bc1
 8005f24:	08015bcb 	.word	0x08015bcb
 8005f28:	20000318 	.word	0x20000318

08005f2c <ft5336_TS_EnableIT>:
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	21a4      	movs	r1, #164	; 0xa4
 8005f30:	b2c0      	uxtb	r0, r0
 8005f32:	f000 b953 	b.w	80061dc <TS_IO_Write>

08005f36 <ft5336_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8005f36:	2200      	movs	r2, #0
 8005f38:	21a4      	movs	r1, #164	; 0xa4
 8005f3a:	b2c0      	uxtb	r0, r0
 8005f3c:	f000 b94e 	b.w	80061dc <TS_IO_Write>

08005f40 <ft5336_TS_Start>:
  ft5336_TS_DisableIT(DeviceAddr);
 8005f40:	f7ff bff9 	b.w	8005f36 <ft5336_TS_DisableIT>

08005f44 <ft5336_Reset>:
 8005f44:	4770      	bx	lr
	...

08005f48 <ft5336_Init>:
{
 8005f48:	b510      	push	{r4, lr}
  return(ft5336_handle.i2cInitialized);
 8005f4a:	4c05      	ldr	r4, [pc, #20]	; (8005f60 <ft5336_Init+0x18>)
  TS_IO_Delay(200);
 8005f4c:	20c8      	movs	r0, #200	; 0xc8
 8005f4e:	f000 f969 	bl	8006224 <TS_IO_Delay>
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8005f52:	7823      	ldrb	r3, [r4, #0]
 8005f54:	b91b      	cbnz	r3, 8005f5e <ft5336_Init+0x16>
    TS_IO_Init();
 8005f56:	f000 f93b 	bl	80061d0 <TS_IO_Init>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	7023      	strb	r3, [r4, #0]
 8005f5e:	bd10      	pop	{r4, pc}
 8005f60:	2000031a 	.word	0x2000031a

08005f64 <ft5336_TS_GetGestureID>:
  volatile uint8_t ucReadData = 0;
 8005f64:	2300      	movs	r3, #0
{
 8005f66:	b513      	push	{r0, r1, r4, lr}
 8005f68:	460c      	mov	r4, r1
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8005f6a:	b2c0      	uxtb	r0, r0
 8005f6c:	2101      	movs	r1, #1
  volatile uint8_t ucReadData = 0;
 8005f6e:	f88d 3007 	strb.w	r3, [sp, #7]
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8005f72:	f000 f943 	bl	80061fc <TS_IO_Read>
 8005f76:	f88d 0007 	strb.w	r0, [sp, #7]
  * pGestureId = ucReadData;
 8005f7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005f7e:	6023      	str	r3, [r4, #0]
}
 8005f80:	b002      	add	sp, #8
 8005f82:	bd10      	pop	{r4, pc}

08005f84 <ft5336_TS_GetTouchInfo>:
{
 8005f84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005f88:	461f      	mov	r7, r3
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8005f8a:	4b1c      	ldr	r3, [pc, #112]	; (8005ffc <ft5336_TS_GetTouchInfo+0x78>)
  volatile uint8_t ucReadData = 0;
 8005f8c:	2400      	movs	r4, #0
{
 8005f8e:	4690      	mov	r8, r2
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8005f90:	785b      	ldrb	r3, [r3, #1]
  volatile uint8_t ucReadData = 0;
 8005f92:	f88d 4007 	strb.w	r4, [sp, #7]
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8005f96:	428b      	cmp	r3, r1
 8005f98:	d92d      	bls.n	8005ff6 <ft5336_TS_GetTouchInfo+0x72>
 8005f9a:	2909      	cmp	r1, #9
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8005f9c:	b2c5      	uxtb	r5, r0
 8005f9e:	bf96      	itet	ls
 8005fa0:	4a17      	ldrls	r2, [pc, #92]	; (8006000 <ft5336_TS_GetTouchInfo+0x7c>)
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8005fa2:	4623      	movhi	r3, r4
 8005fa4:	4b17      	ldrls	r3, [pc, #92]	; (8006004 <ft5336_TS_GetTouchInfo+0x80>)
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8005fa6:	4628      	mov	r0, r5
 8005fa8:	bf97      	itett	ls
 8005faa:	5c56      	ldrbls	r6, [r2, r1]
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8005fac:	4626      	movhi	r6, r4
 8005fae:	5c5b      	ldrbls	r3, [r3, r1]
 8005fb0:	4a15      	ldrls	r2, [pc, #84]	; (8006008 <ft5336_TS_GetTouchInfo+0x84>)
 8005fb2:	bf98      	it	ls
 8005fb4:	5c54      	ldrbls	r4, [r2, r1]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	f000 f920 	bl	80061fc <TS_IO_Read>
 8005fbc:	f88d 0007 	strb.w	r0, [sp, #7]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8005fc0:	f89d 1007 	ldrb.w	r1, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8005fc4:	4628      	mov	r0, r5
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8005fc6:	9b08      	ldr	r3, [sp, #32]
 8005fc8:	0989      	lsrs	r1, r1, #6
 8005fca:	6019      	str	r1, [r3, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8005fcc:	4631      	mov	r1, r6
 8005fce:	f000 f915 	bl	80061fc <TS_IO_Read>
 8005fd2:	f88d 0007 	strb.w	r0, [sp, #7]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8005fd6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8005fda:	4621      	mov	r1, r4
 8005fdc:	4628      	mov	r0, r5
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8005fde:	f8c8 3000 	str.w	r3, [r8]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8005fe2:	f000 f90b 	bl	80061fc <TS_IO_Read>
 8005fe6:	f88d 0007 	strb.w	r0, [sp, #7]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8005fea:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8005fee:	0912      	lsrs	r2, r2, #4
 8005ff0:	f002 0204 	and.w	r2, r2, #4
 8005ff4:	603a      	str	r2, [r7, #0]
}
 8005ff6:	b002      	add	sp, #8
 8005ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ffc:	2000031a 	.word	0x2000031a
 8006000:	08015bdf 	.word	0x08015bdf
 8006004:	08015bd5 	.word	0x08015bd5
 8006008:	08015be9 	.word	0x08015be9

0800600c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800600c:	b570      	push	{r4, r5, r6, lr}
 800600e:	b08a      	sub	sp, #40	; 0x28
 8006010:	4605      	mov	r5, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8006012:	f7fc ff83 	bl	8002f1c <HAL_I2C_GetState>
 8006016:	2800      	cmp	r0, #0
 8006018:	d154      	bne.n	80060c4 <I2Cx_Init+0xb8>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800601a:	4b4a      	ldr	r3, [pc, #296]	; (8006144 <I2Cx_Init+0x138>)
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
    i2c_handler->Init.OwnAddress1      = 0;
 800601c:	2600      	movs	r6, #0
 800601e:	4c4a      	ldr	r4, [pc, #296]	; (8006148 <I2Cx_Init+0x13c>)
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8006020:	429d      	cmp	r5, r3
    i2c_handler->Init.OwnAddress1      = 0;
 8006022:	60ae      	str	r6, [r5, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8006024:	612e      	str	r6, [r5, #16]
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8006026:	bf0c      	ite	eq
 8006028:	4a48      	ldreq	r2, [pc, #288]	; (800614c <I2Cx_Init+0x140>)
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800602a:	4a49      	ldrne	r2, [pc, #292]	; (8006150 <I2Cx_Init+0x144>)
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800602c:	429d      	cmp	r5, r3
    i2c_handler->Init.OwnAddress2      = 0;
 800602e:	616e      	str	r6, [r5, #20]
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8006030:	602a      	str	r2, [r5, #0]
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8006032:	4a48      	ldr	r2, [pc, #288]	; (8006154 <I2Cx_Init+0x148>)
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8006034:	61ee      	str	r6, [r5, #28]
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8006036:	606a      	str	r2, [r5, #4]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8006038:	f04f 0201 	mov.w	r2, #1
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800603c:	622e      	str	r6, [r5, #32]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800603e:	60ea      	str	r2, [r5, #12]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8006040:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8006042:	d141      	bne.n	80060c8 <I2Cx_Init+0xbc>
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8006044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006048:	a905      	add	r1, sp, #20
 800604a:	4843      	ldr	r0, [pc, #268]	; (8006158 <I2Cx_Init+0x14c>)
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800604c:	6323      	str	r3, [r4, #48]	; 0x30
 800604e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
 8006050:	9607      	str	r6, [sp, #28]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8006052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006056:	9301      	str	r3, [sp, #4]
 8006058:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800605a:	2380      	movs	r3, #128	; 0x80
 800605c:	9305      	str	r3, [sp, #20]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800605e:	2312      	movs	r3, #18
 8006060:	9306      	str	r3, [sp, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8006062:	2302      	movs	r3, #2
 8006064:	9308      	str	r3, [sp, #32]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8006066:	2304      	movs	r3, #4
 8006068:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800606a:	f7fc fa99 	bl	80025a0 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800606e:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006072:	a905      	add	r1, sp, #20
 8006074:	4838      	ldr	r0, [pc, #224]	; (8006158 <I2Cx_Init+0x14c>)
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8006076:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006078:	f7fc fa92 	bl	80025a0 <HAL_GPIO_Init>
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800607c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800607e:	4632      	mov	r2, r6
 8006080:	210f      	movs	r1, #15
 8006082:	2048      	movs	r0, #72	; 0x48
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8006084:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006088:	6423      	str	r3, [r4, #64]	; 0x40
 800608a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800608c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006090:	9302      	str	r3, [sp, #8]
 8006092:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8006094:	6a23      	ldr	r3, [r4, #32]
 8006096:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800609a:	6223      	str	r3, [r4, #32]
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800609c:	6a23      	ldr	r3, [r4, #32]
 800609e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80060a2:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80060a4:	f7fb feba 	bl	8001e1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80060a8:	2048      	movs	r0, #72	; 0x48
 80060aa:	f7fb feef 	bl	8001e8c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80060ae:	2049      	movs	r0, #73	; 0x49
 80060b0:	4632      	mov	r2, r6
 80060b2:	210f      	movs	r1, #15
 80060b4:	f7fb feb2 	bl	8001e1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80060b8:	2049      	movs	r0, #73	; 0x49
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80060ba:	f7fb fee7 	bl	8001e8c <HAL_NVIC_EnableIRQ>

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
    HAL_I2C_Init(i2c_handler);
 80060be:	4628      	mov	r0, r5
 80060c0:	f7fc fd4b 	bl	8002b5a <HAL_I2C_Init>
  }
}
 80060c4:	b00a      	add	sp, #40	; 0x28
 80060c6:	bd70      	pop	{r4, r5, r6, pc}
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80060c8:	f043 0302 	orr.w	r3, r3, #2
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80060cc:	a905      	add	r1, sp, #20
 80060ce:	4823      	ldr	r0, [pc, #140]	; (800615c <I2Cx_Init+0x150>)
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80060d0:	6323      	str	r3, [r4, #48]	; 0x30
 80060d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
 80060d4:	9607      	str	r6, [sp, #28]
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	9303      	str	r3, [sp, #12]
 80060dc:	9b03      	ldr	r3, [sp, #12]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80060de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060e2:	9305      	str	r3, [sp, #20]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80060e4:	2312      	movs	r3, #18
 80060e6:	9306      	str	r3, [sp, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80060e8:	2302      	movs	r3, #2
 80060ea:	9308      	str	r3, [sp, #32]
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80060ec:	2304      	movs	r3, #4
 80060ee:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80060f0:	f7fc fa56 	bl	80025a0 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80060f4:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80060f8:	a905      	add	r1, sp, #20
 80060fa:	4818      	ldr	r0, [pc, #96]	; (800615c <I2Cx_Init+0x150>)
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80060fc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80060fe:	f7fc fa4f 	bl	80025a0 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8006102:	6c23      	ldr	r3, [r4, #64]	; 0x40
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8006104:	4632      	mov	r2, r6
 8006106:	210f      	movs	r1, #15
 8006108:	201f      	movs	r0, #31
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800610a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800610e:	6423      	str	r3, [r4, #64]	; 0x40
 8006110:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006112:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006116:	9304      	str	r3, [sp, #16]
 8006118:	9b04      	ldr	r3, [sp, #16]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800611a:	6a23      	ldr	r3, [r4, #32]
 800611c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006120:	6223      	str	r3, [r4, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8006122:	6a23      	ldr	r3, [r4, #32]
 8006124:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006128:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800612a:	f7fb fe77 	bl	8001e1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800612e:	201f      	movs	r0, #31
 8006130:	f7fb feac 	bl	8001e8c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8006134:	2020      	movs	r0, #32
 8006136:	4632      	mov	r2, r6
 8006138:	210f      	movs	r1, #15
 800613a:	f7fb fe6f 	bl	8001e1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800613e:	2020      	movs	r0, #32
 8006140:	e7bb      	b.n	80060ba <I2Cx_Init+0xae>
 8006142:	bf00      	nop
 8006144:	20000320 	.word	0x20000320
 8006148:	40023800 	.word	0x40023800
 800614c:	40005c00 	.word	0x40005c00
 8006150:	40005400 	.word	0x40005400
 8006154:	40912732 	.word	0x40912732
 8006158:	40021c00 	.word	0x40021c00
 800615c:	40020400 	.word	0x40020400

08006160 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8006160:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8006162:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 8006166:	b085      	sub	sp, #20
 8006168:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800616a:	9402      	str	r4, [sp, #8]
 800616c:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8006170:	9401      	str	r4, [sp, #4]
 8006172:	9c08      	ldr	r4, [sp, #32]
 8006174:	9400      	str	r4, [sp, #0]
 8006176:	f7fc fe13 	bl	8002da0 <HAL_I2C_Mem_Read>

  /* Check the communication status */
  if(status != HAL_OK)
 800617a:	4604      	mov	r4, r0
 800617c:	b128      	cbz	r0, 800618a <I2Cx_ReadMultiple+0x2a>
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800617e:	4628      	mov	r0, r5
 8006180:	f7fc fd3c 	bl	8002bfc <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8006184:	4628      	mov	r0, r5
 8006186:	f7ff ff41 	bl	800600c <I2Cx_Init>
}
 800618a:	4620      	mov	r0, r4
 800618c:	b005      	add	sp, #20
 800618e:	bd30      	pop	{r4, r5, pc}

08006190 <I2Cx_WriteMultiple>:
{
 8006190:	b530      	push	{r4, r5, lr}
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8006192:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 8006196:	b085      	sub	sp, #20
 8006198:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800619a:	9402      	str	r4, [sp, #8]
 800619c:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 80061a0:	9401      	str	r4, [sp, #4]
 80061a2:	9c08      	ldr	r4, [sp, #32]
 80061a4:	9400      	str	r4, [sp, #0]
 80061a6:	f7fc fd42 	bl	8002c2e <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 80061aa:	4604      	mov	r4, r0
 80061ac:	b128      	cbz	r0, 80061ba <I2Cx_WriteMultiple+0x2a>
  HAL_I2C_DeInit(i2c_handler);
 80061ae:	4628      	mov	r0, r5
 80061b0:	f7fc fd24 	bl	8002bfc <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 80061b4:	4628      	mov	r0, r5
 80061b6:	f7ff ff29 	bl	800600c <I2Cx_Init>
}
 80061ba:	4620      	mov	r0, r4
 80061bc:	b005      	add	sp, #20
 80061be:	bd30      	pop	{r4, r5, pc}

080061c0 <BSP_LED_Toggle>:
  if (Led == LED1)	/* Toggle LED connected to GPIO */
 80061c0:	b918      	cbnz	r0, 80061ca <BSP_LED_Toggle+0xa>
    HAL_GPIO_TogglePin(gpio_led, GPIO_PIN[Led]);
 80061c2:	2102      	movs	r1, #2
 80061c4:	4801      	ldr	r0, [pc, #4]	; (80061cc <BSP_LED_Toggle+0xc>)
 80061c6:	f7fc bb7e 	b.w	80028c6 <HAL_GPIO_TogglePin>
 80061ca:	4770      	bx	lr
 80061cc:	40022000 	.word	0x40022000

080061d0 <TS_IO_Init>:
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
  I2Cx_Init(&hI2cAudioHandler);
 80061d0:	4801      	ldr	r0, [pc, #4]	; (80061d8 <TS_IO_Init+0x8>)
 80061d2:	f7ff bf1b 	b.w	800600c <I2Cx_Init>
 80061d6:	bf00      	nop
 80061d8:	20000320 	.word	0x20000320

080061dc <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80061dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80061de:	ac04      	add	r4, sp, #16
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80061e0:	2301      	movs	r3, #1
{
 80061e2:	f804 2d01 	strb.w	r2, [r4, #-1]!
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80061e6:	460a      	mov	r2, r1
 80061e8:	4601      	mov	r1, r0
 80061ea:	9301      	str	r3, [sp, #4]
 80061ec:	9400      	str	r4, [sp, #0]
 80061ee:	4802      	ldr	r0, [pc, #8]	; (80061f8 <TS_IO_Write+0x1c>)
 80061f0:	f7ff ffce 	bl	8006190 <I2Cx_WriteMultiple>
}
 80061f4:	b004      	add	sp, #16
 80061f6:	bd10      	pop	{r4, pc}
 80061f8:	20000320 	.word	0x20000320

080061fc <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80061fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t read_value = 0;
 80061fe:	2300      	movs	r3, #0
 8006200:	aa04      	add	r2, sp, #16
 8006202:	f802 3d01 	strb.w	r3, [r2, #-1]!

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8006206:	2301      	movs	r3, #1
 8006208:	e88d 000c 	stmia.w	sp, {r2, r3}
 800620c:	460a      	mov	r2, r1
 800620e:	4601      	mov	r1, r0
 8006210:	4803      	ldr	r0, [pc, #12]	; (8006220 <TS_IO_Read+0x24>)
 8006212:	f7ff ffa5 	bl	8006160 <I2Cx_ReadMultiple>

  return read_value;
}
 8006216:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800621a:	b005      	add	sp, #20
 800621c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006220:	20000320 	.word	0x20000320

08006224 <TS_IO_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8006224:	f7fb bc92 	b.w	8001b4c <HAL_Delay>

08006228 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8006228:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800622c:	4c22      	ldr	r4, [pc, #136]	; (80062b8 <BSP_SDRAM_Initialization_sequence+0x90>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800622e:	2601      	movs	r6, #1
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006230:	4d22      	ldr	r5, [pc, #136]	; (80062bc <BSP_SDRAM_Initialization_sequence+0x94>)
  __IO uint32_t tmpmrd = 0;
 8006232:	f04f 0800 	mov.w	r8, #0
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006236:	2710      	movs	r7, #16
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006238:	4621      	mov	r1, r4
{
 800623a:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800623c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006240:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 8006242:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.AutoRefreshNumber      = 1;
 8006246:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8006248:	f8c4 800c 	str.w	r8, [r4, #12]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800624c:	e884 00c0 	stmia.w	r4, {r6, r7}
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006250:	f7fe fc21 	bl	8004a96 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8006254:	4630      	mov	r0, r6
 8006256:	f7fb fc79 	bl	8001b4c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800625a:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800625c:	4621      	mov	r1, r4
 800625e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006262:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
 8006264:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8006266:	f8c4 800c 	str.w	r8, [r4, #12]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800626a:	e884 0088 	stmia.w	r4, {r3, r7}
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800626e:	f7fe fc12 	bl	8004a96 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8006272:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006274:	4621      	mov	r1, r4
 8006276:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800627a:	4628      	mov	r0, r5
  Command.ModeRegisterDefinition = 0;
 800627c:	f8c4 800c 	str.w	r8, [r4, #12]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006280:	e884 0088 	stmia.w	r4, {r3, r7}
  Command.AutoRefreshNumber      = 8;
 8006284:	2308      	movs	r3, #8
 8006286:	60a3      	str	r3, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006288:	f7fe fc05 	bl	8004a96 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800628c:	f44f 7308 	mov.w	r3, #544	; 0x220
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006290:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006294:	4621      	mov	r1, r4
 8006296:	4628      	mov	r0, r5
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8006298:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800629a:	2304      	movs	r3, #4
  Command.AutoRefreshNumber      = 1;
 800629c:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800629e:	e884 0088 	stmia.w	r4, {r3, r7}
  Command.ModeRegisterDefinition = tmpmrd;
 80062a2:	9b01      	ldr	r3, [sp, #4]
 80062a4:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80062a6:	f7fe fbf6 	bl	8004a96 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80062aa:	4649      	mov	r1, r9
 80062ac:	4628      	mov	r0, r5
 80062ae:	f7fe fc09 	bl	8004ac4 <HAL_SDRAM_ProgramRefreshRate>
}
 80062b2:	b003      	add	sp, #12
 80062b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062b8:	2000036c 	.word	0x2000036c
 80062bc:	20017b4c 	.word	0x20017b4c

080062c0 <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80062c0:	4b55      	ldr	r3, [pc, #340]	; (8006418 <BSP_SDRAM_MspInit+0x158>)
 80062c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062c4:	f042 0201 	orr.w	r2, r2, #1
{  
 80062c8:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 80062ca:	639a      	str	r2, [r3, #56]	; 0x38
{  
 80062cc:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
 80062ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{  
 80062d0:	4606      	mov	r6, r0
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80062d2:	ac0e      	add	r4, sp, #56	; 0x38
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80062d4:	4851      	ldr	r0, [pc, #324]	; (800641c <BSP_SDRAM_MspInit+0x15c>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80062d6:	f002 0201 	and.w	r2, r2, #1
  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80062da:	2500      	movs	r5, #0
  __HAL_RCC_FMC_CLK_ENABLE();
 80062dc:	9201      	str	r2, [sp, #4]
 80062de:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 80062e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062e2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80062e6:	631a      	str	r2, [r3, #48]	; 0x30
 80062e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062ea:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80062ee:	9202      	str	r2, [sp, #8]
 80062f0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80062f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062f4:	f042 0204 	orr.w	r2, r2, #4
 80062f8:	631a      	str	r2, [r3, #48]	; 0x30
 80062fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062fc:	f002 0204 	and.w	r2, r2, #4
 8006300:	9203      	str	r2, [sp, #12]
 8006302:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006304:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006306:	f042 0208 	orr.w	r2, r2, #8
 800630a:	631a      	str	r2, [r3, #48]	; 0x30
 800630c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800630e:	f002 0208 	and.w	r2, r2, #8
 8006312:	9204      	str	r2, [sp, #16]
 8006314:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006316:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006318:	f042 0210 	orr.w	r2, r2, #16
 800631c:	631a      	str	r2, [r3, #48]	; 0x30
 800631e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006320:	f002 0210 	and.w	r2, r2, #16
 8006324:	9205      	str	r2, [sp, #20]
 8006326:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006328:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800632a:	f042 0220 	orr.w	r2, r2, #32
 800632e:	631a      	str	r2, [r3, #48]	; 0x30
 8006330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006332:	f002 0220 	and.w	r2, r2, #32
 8006336:	9206      	str	r2, [sp, #24]
 8006338:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800633a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800633c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006340:	631a      	str	r2, [r3, #48]	; 0x30
 8006342:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006344:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8006348:	9207      	str	r2, [sp, #28]
 800634a:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800634c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800634e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006352:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8006354:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8006358:	920b      	str	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800635a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800635e:	9308      	str	r3, [sp, #32]
 8006360:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006362:	2302      	movs	r3, #2
 8006364:	930a      	str	r3, [sp, #40]	; 0x28
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8006366:	930c      	str	r3, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8006368:	230c      	movs	r3, #12
 800636a:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800636c:	2308      	movs	r3, #8
 800636e:	f844 3d14 	str.w	r3, [r4, #-20]!
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8006372:	4621      	mov	r1, r4
 8006374:	f7fc f914 	bl	80025a0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8006378:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800637c:	4621      	mov	r1, r4
 800637e:	4828      	ldr	r0, [pc, #160]	; (8006420 <BSP_SDRAM_MspInit+0x160>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8006380:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006382:	f7fc f90d 	bl	80025a0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8006386:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800638a:	4621      	mov	r1, r4
 800638c:	4825      	ldr	r0, [pc, #148]	; (8006424 <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800638e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006390:	f7fc f906 	bl	80025a0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8006394:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8006398:	4621      	mov	r1, r4
 800639a:	4823      	ldr	r0, [pc, #140]	; (8006428 <BSP_SDRAM_MspInit+0x168>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800639c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800639e:	f7fc f8ff 	bl	80025a0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80063a2:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80063a6:	4621      	mov	r1, r4
 80063a8:	4820      	ldr	r0, [pc, #128]	; (800642c <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80063aa:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80063ac:	f7fc f8f8 	bl	80025a0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80063b0:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80063b2:	4621      	mov	r1, r4
 80063b4:	481e      	ldr	r0, [pc, #120]	; (8006430 <BSP_SDRAM_MspInit+0x170>)
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80063b6:	4c1f      	ldr	r4, [pc, #124]	; (8006434 <BSP_SDRAM_MspInit+0x174>)
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80063b8:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80063ba:	f7fc f8f1 	bl	80025a0 <HAL_GPIO_Init>
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80063be:	2380      	movs	r3, #128	; 0x80
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80063c0:	6325      	str	r5, [r4, #48]	; 0x30
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80063c2:	4620      	mov	r0, r4
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80063c4:	6334      	str	r4, [r6, #48]	; 0x30
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80063c6:	60a3      	str	r3, [r4, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80063c8:	f44f 7300 	mov.w	r3, #512	; 0x200
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80063cc:	6065      	str	r5, [r4, #4]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80063ce:	60e3      	str	r3, [r4, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80063d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  dma_handle.Init.Mode                = DMA_NORMAL;
 80063d4:	61e5      	str	r5, [r4, #28]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80063d6:	6123      	str	r3, [r4, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80063d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80063dc:	6265      	str	r5, [r4, #36]	; 0x24
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80063de:	6163      	str	r3, [r4, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80063e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80063e4:	62e5      	str	r5, [r4, #44]	; 0x2c
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80063e6:	61a3      	str	r3, [r4, #24]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80063e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80063ec:	63a6      	str	r6, [r4, #56]	; 0x38
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80063ee:	6223      	str	r3, [r4, #32]
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80063f0:	2303      	movs	r3, #3
 80063f2:	62a3      	str	r3, [r4, #40]	; 0x28
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80063f4:	4b10      	ldr	r3, [pc, #64]	; (8006438 <BSP_SDRAM_MspInit+0x178>)
 80063f6:	6023      	str	r3, [r4, #0]
  HAL_DMA_DeInit(&dma_handle);
 80063f8:	f7fb fe2e 	bl	8002058 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80063fc:	4620      	mov	r0, r4
 80063fe:	f7fb fdad 	bl	8001f5c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8006402:	462a      	mov	r2, r5
 8006404:	210f      	movs	r1, #15
 8006406:	2038      	movs	r0, #56	; 0x38
 8006408:	f7fb fd08 	bl	8001e1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800640c:	2038      	movs	r0, #56	; 0x38
 800640e:	f7fb fd3d 	bl	8001e8c <HAL_NVIC_EnableIRQ>
}
 8006412:	b00e      	add	sp, #56	; 0x38
 8006414:	bd70      	pop	{r4, r5, r6, pc}
 8006416:	bf00      	nop
 8006418:	40023800 	.word	0x40023800
 800641c:	40020800 	.word	0x40020800
 8006420:	40020c00 	.word	0x40020c00
 8006424:	40021000 	.word	0x40021000
 8006428:	40021400 	.word	0x40021400
 800642c:	40021800 	.word	0x40021800
 8006430:	40021c00 	.word	0x40021c00
 8006434:	20000398 	.word	0x20000398
 8006438:	40026410 	.word	0x40026410

0800643c <BSP_SDRAM_Init>:
{ 
 800643c:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800643e:	4c1a      	ldr	r4, [pc, #104]	; (80064a8 <BSP_SDRAM_Init+0x6c>)
  Timing.ExitSelfRefreshDelay = 7;
 8006440:	2107      	movs	r1, #7
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8006442:	4b1a      	ldr	r3, [pc, #104]	; (80064ac <BSP_SDRAM_Init+0x70>)
  Timing.SelfRefreshTime      = 4;
 8006444:	2204      	movs	r2, #4
  Timing.LoadToActiveDelay    = 2;
 8006446:	4d1a      	ldr	r5, [pc, #104]	; (80064b0 <BSP_SDRAM_Init+0x74>)
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8006448:	4620      	mov	r0, r4
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800644a:	6023      	str	r3, [r4, #0]
  Timing.LoadToActiveDelay    = 2;
 800644c:	2302      	movs	r3, #2
  Timing.ExitSelfRefreshDelay = 7;
 800644e:	6069      	str	r1, [r5, #4]
  Timing.LoadToActiveDelay    = 2;
 8006450:	602b      	str	r3, [r5, #0]
  Timing.WriteRecoveryTime    = 2;
 8006452:	612b      	str	r3, [r5, #16]
  Timing.RPDelay              = 2;
 8006454:	616b      	str	r3, [r5, #20]
  Timing.RCDDelay             = 2;
 8006456:	61ab      	str	r3, [r5, #24]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8006458:	2310      	movs	r3, #16
  Timing.RowCycleDelay        = 7;
 800645a:	60e9      	str	r1, [r5, #12]
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800645c:	2100      	movs	r1, #0
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800645e:	6123      	str	r3, [r4, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8006460:	2340      	movs	r3, #64	; 0x40
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8006462:	6061      	str	r1, [r4, #4]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8006464:	6163      	str	r3, [r4, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8006466:	f44f 7380 	mov.w	r3, #256	; 0x100
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800646a:	60a1      	str	r1, [r4, #8]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800646c:	61a3      	str	r3, [r4, #24]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800646e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8006472:	60e2      	str	r2, [r4, #12]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8006474:	6223      	str	r3, [r4, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8006476:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800647a:	61e1      	str	r1, [r4, #28]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800647c:	6263      	str	r3, [r4, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800647e:	62a1      	str	r1, [r4, #40]	; 0x28
  Timing.SelfRefreshTime      = 4;
 8006480:	60aa      	str	r2, [r5, #8]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8006482:	f7ff ff1d 	bl	80062c0 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8006486:	4620      	mov	r0, r4
 8006488:	4629      	mov	r1, r5
 800648a:	f7fe fae4 	bl	8004a56 <HAL_SDRAM_Init>
 800648e:	4c09      	ldr	r4, [pc, #36]	; (80064b4 <BSP_SDRAM_Init+0x78>)
 8006490:	b138      	cbz	r0, 80064a2 <BSP_SDRAM_Init+0x66>
    sdramstatus = SDRAM_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	7023      	strb	r3, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8006496:	f240 6003 	movw	r0, #1539	; 0x603
 800649a:	f7ff fec5 	bl	8006228 <BSP_SDRAM_Initialization_sequence>
}
 800649e:	7820      	ldrb	r0, [r4, #0]
 80064a0:	bd38      	pop	{r3, r4, r5, pc}
    sdramstatus = SDRAM_OK;
 80064a2:	7020      	strb	r0, [r4, #0]
 80064a4:	e7f7      	b.n	8006496 <BSP_SDRAM_Init+0x5a>
 80064a6:	bf00      	nop
 80064a8:	20017b4c 	.word	0x20017b4c
 80064ac:	a0000140 	.word	0xa0000140
 80064b0:	2000037c 	.word	0x2000037c
 80064b4:	20000030 	.word	0x20000030

080064b8 <BSP_TS_Init>:
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
  uint8_t status = TS_OK;
  tsXBoundary = ts_SizeX;
 80064b8:	4b0d      	ldr	r3, [pc, #52]	; (80064f0 <BSP_TS_Init+0x38>)
{
 80064ba:	b510      	push	{r4, lr}
  tsXBoundary = ts_SizeX;
 80064bc:	8018      	strh	r0, [r3, #0]
  tsYBoundary = ts_SizeY;
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 80064be:	2070      	movs	r0, #112	; 0x70
  tsYBoundary = ts_SizeY;
 80064c0:	4b0c      	ldr	r3, [pc, #48]	; (80064f4 <BSP_TS_Init+0x3c>)
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 80064c2:	4c0d      	ldr	r4, [pc, #52]	; (80064f8 <BSP_TS_Init+0x40>)
  tsYBoundary = ts_SizeY;
 80064c4:	8019      	strh	r1, [r3, #0]
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 80064c6:	6823      	ldr	r3, [r4, #0]
 80064c8:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 80064ca:	6863      	ldr	r3, [r4, #4]
 80064cc:	2070      	movs	r0, #112	; 0x70
 80064ce:	4798      	blx	r3
 80064d0:	2851      	cmp	r0, #81	; 0x51
 80064d2:	d10b      	bne.n	80064ec <BSP_TS_Init+0x34>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 80064d4:	4b09      	ldr	r3, [pc, #36]	; (80064fc <BSP_TS_Init+0x44>)
    I2cAddress = TS_I2C_ADDRESS;
 80064d6:	2070      	movs	r0, #112	; 0x70
    tsOrientation = TS_SWAP_XY;
 80064d8:	2208      	movs	r2, #8
    tsDriver = &ft5336_ts_drv;
 80064da:	601c      	str	r4, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 80064dc:	4b08      	ldr	r3, [pc, #32]	; (8006500 <BSP_TS_Init+0x48>)
 80064de:	7018      	strb	r0, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 80064e0:	4b08      	ldr	r3, [pc, #32]	; (8006504 <BSP_TS_Init+0x4c>)
 80064e2:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 80064e4:	68e3      	ldr	r3, [r4, #12]
 80064e6:	4798      	blx	r3
  uint8_t status = TS_OK;
 80064e8:	2000      	movs	r0, #0
 80064ea:	bd10      	pop	{r4, pc}
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 80064ec:	2003      	movs	r0, #3
  }

  return status;
}
 80064ee:	bd10      	pop	{r4, pc}
 80064f0:	2000042a 	.word	0x2000042a
 80064f4:	2000042c 	.word	0x2000042c
 80064f8:	20000008 	.word	0x20000008
 80064fc:	20000424 	.word	0x20000424
 8006500:	200003f8 	.word	0x200003f8
 8006504:	20000428 	.word	0x20000428

08006508 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8006508:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t gestureId = 0;
  uint8_t  ts_status = TS_OK;

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 800650a:	4b16      	ldr	r3, [pc, #88]	; (8006564 <BSP_TS_Get_GestureId+0x5c>)
  uint32_t gestureId = 0;
 800650c:	a902      	add	r1, sp, #8
 800650e:	2400      	movs	r4, #0
{
 8006510:	4605      	mov	r5, r0
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8006512:	7818      	ldrb	r0, [r3, #0]
  uint32_t gestureId = 0;
 8006514:	f841 4d04 	str.w	r4, [r1, #-4]!
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8006518:	f7ff fd24 	bl	8005f64 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 800651c:	9801      	ldr	r0, [sp, #4]
 800651e:	2818      	cmp	r0, #24
 8006520:	d017      	beq.n	8006552 <BSP_TS_Get_GestureId+0x4a>
 8006522:	d809      	bhi.n	8006538 <BSP_TS_Get_GestureId+0x30>
 8006524:	2810      	cmp	r0, #16
 8006526:	d00f      	beq.n	8006548 <BSP_TS_Get_GestureId+0x40>
 8006528:	2814      	cmp	r0, #20
 800652a:	d010      	beq.n	800654e <BSP_TS_Get_GestureId+0x46>
 800652c:	b9b8      	cbnz	r0, 800655e <BSP_TS_Get_GestureId+0x56>
  uint8_t  ts_status = TS_OK;
 800652e:	4604      	mov	r4, r0
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8006530:	62a8      	str	r0, [r5, #40]	; 0x28
      ts_status = TS_ERROR;
      break;
  } /* of switch(gestureId) */

  return(ts_status);
}
 8006532:	4620      	mov	r0, r4
 8006534:	b003      	add	sp, #12
 8006536:	bd30      	pop	{r4, r5, pc}
  switch(gestureId)
 8006538:	2840      	cmp	r0, #64	; 0x40
 800653a:	d00c      	beq.n	8006556 <BSP_TS_Get_GestureId+0x4e>
 800653c:	2849      	cmp	r0, #73	; 0x49
 800653e:	d00c      	beq.n	800655a <BSP_TS_Get_GestureId+0x52>
 8006540:	281c      	cmp	r0, #28
 8006542:	d10c      	bne.n	800655e <BSP_TS_Get_GestureId+0x56>
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8006544:	2304      	movs	r3, #4
 8006546:	e000      	b.n	800654a <BSP_TS_Get_GestureId+0x42>
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8006548:	2301      	movs	r3, #1
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 800654a:	62ab      	str	r3, [r5, #40]	; 0x28
      break;
 800654c:	e7f1      	b.n	8006532 <BSP_TS_Get_GestureId+0x2a>
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 800654e:	2302      	movs	r3, #2
 8006550:	e7fb      	b.n	800654a <BSP_TS_Get_GestureId+0x42>
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8006552:	2303      	movs	r3, #3
 8006554:	e7f9      	b.n	800654a <BSP_TS_Get_GestureId+0x42>
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8006556:	2305      	movs	r3, #5
 8006558:	e7f7      	b.n	800654a <BSP_TS_Get_GestureId+0x42>
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 800655a:	2306      	movs	r3, #6
 800655c:	e7f5      	b.n	800654a <BSP_TS_Get_GestureId+0x42>
      ts_status = TS_ERROR;
 800655e:	2401      	movs	r4, #1
 8006560:	e7e7      	b.n	8006532 <BSP_TS_Get_GestureId+0x2a>
 8006562:	bf00      	nop
 8006564:	200003f8 	.word	0x200003f8

08006568 <BSP_TS_GetState>:
{
 8006568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800656c:	4d53      	ldr	r5, [pc, #332]	; (80066bc <BSP_TS_GetState+0x154>)
{
 800656e:	b095      	sub	sp, #84	; 0x54
  uint32_t weight = 0;
 8006570:	2400      	movs	r4, #0
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8006572:	4e53      	ldr	r6, [pc, #332]	; (80066c0 <BSP_TS_GetState+0x158>)
 8006574:	682b      	ldr	r3, [r5, #0]
{
 8006576:	4681      	mov	r9, r0
  uint32_t weight = 0;
 8006578:	9405      	str	r4, [sp, #20]
 800657a:	46aa      	mov	sl, r5
  uint32_t area = 0;
 800657c:	9406      	str	r4, [sp, #24]
  uint32_t event = 0;
 800657e:	9407      	str	r4, [sp, #28]
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	7830      	ldrb	r0, [r6, #0]
 8006584:	4798      	blx	r3
 8006586:	9603      	str	r6, [sp, #12]
 8006588:	f889 0000 	strb.w	r0, [r9]
  if(TS_State->touchDetected)
 800658c:	b178      	cbz	r0, 80065ae <BSP_TS_GetState+0x46>
 800658e:	f109 0516 	add.w	r5, r9, #22
 8006592:	f109 0602 	add.w	r6, r9, #2
 8006596:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800659a:	af11      	add	r7, sp, #68	; 0x44
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800659c:	f8df b130 	ldr.w	fp, [pc, #304]	; 80066d0 <BSP_TS_GetState+0x168>
    for(index=0; index < TS_State->touchDetected; index++)
 80065a0:	f899 3000 	ldrb.w	r3, [r9]
 80065a4:	429c      	cmp	r4, r3
 80065a6:	d305      	bcc.n	80065b4 <BSP_TS_GetState+0x4c>
    ts_status = BSP_TS_Get_GestureId(TS_State);
 80065a8:	4648      	mov	r0, r9
 80065aa:	f7ff ffad 	bl	8006508 <BSP_TS_Get_GestureId>
}
 80065ae:	b015      	add	sp, #84	; 0x54
 80065b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 80065b4:	f8da 3000 	ldr.w	r3, [sl]
 80065b8:	463a      	mov	r2, r7
 80065ba:	9803      	ldr	r0, [sp, #12]
 80065bc:	4641      	mov	r1, r8
 80065be:	695b      	ldr	r3, [r3, #20]
 80065c0:	7800      	ldrb	r0, [r0, #0]
 80065c2:	4798      	blx	r3
      if(tsOrientation == TS_SWAP_NONE)
 80065c4:	4b3f      	ldr	r3, [pc, #252]	; (80066c4 <BSP_TS_GetState+0x15c>)
 80065c6:	a90b      	add	r1, sp, #44	; 0x2c
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80065c8:	f8df c108 	ldr.w	ip, [pc, #264]	; 80066d4 <BSP_TS_GetState+0x16c>
      if(tsOrientation == TS_SWAP_NONE)
 80065cc:	781a      	ldrb	r2, [r3, #0]
 80065ce:	ab08      	add	r3, sp, #32
 80065d0:	2a01      	cmp	r2, #1
        x[index] = brute_x[index];
 80065d2:	bf01      	itttt	eq
 80065d4:	f8b8 0000 	ldrheq.w	r0, [r8]
 80065d8:	f823 0014 	strheq.w	r0, [r3, r4, lsl #1]
        y[index] = brute_y[index];
 80065dc:	8838      	ldrheq	r0, [r7, #0]
 80065de:	f821 0014 	strheq.w	r0, [r1, r4, lsl #1]
      if(tsOrientation & TS_SWAP_X)
 80065e2:	0790      	lsls	r0, r2, #30
        x[index] = 4096 - brute_x[index];
 80065e4:	bf42      	ittt	mi
 80065e6:	f8b8 0000 	ldrhmi.w	r0, [r8]
 80065ea:	f5c0 5080 	rsbmi	r0, r0, #4096	; 0x1000
 80065ee:	f823 0014 	strhmi.w	r0, [r3, r4, lsl #1]
      if(tsOrientation & TS_SWAP_Y)
 80065f2:	0750      	lsls	r0, r2, #29
        y[index] = 4096 - brute_y[index];
 80065f4:	bf42      	ittt	mi
 80065f6:	8838      	ldrhmi	r0, [r7, #0]
 80065f8:	f5c0 5080 	rsbmi	r0, r0, #4096	; 0x1000
 80065fc:	f821 0014 	strhmi.w	r0, [r1, r4, lsl #1]
      if(tsOrientation & TS_SWAP_XY)
 8006600:	0712      	lsls	r2, r2, #28
        y[index] = brute_x[index];
 8006602:	bf42      	ittt	mi
 8006604:	f8b8 2000 	ldrhmi.w	r2, [r8]
 8006608:	f821 2014 	strhmi.w	r2, [r1, r4, lsl #1]
        x[index] = brute_y[index];
 800660c:	883a      	ldrhmi	r2, [r7, #0]
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800660e:	f831 1014 	ldrh.w	r1, [r1, r4, lsl #1]
        x[index] = brute_y[index];
 8006612:	bf48      	it	mi
 8006614:	f823 2014 	strhmi.w	r2, [r3, r4, lsl #1]
 8006618:	00a2      	lsls	r2, r4, #2
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800661a:	f833 e014 	ldrh.w	lr, [r3, r4, lsl #1]
 800661e:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8006622:	f852 000c 	ldr.w	r0, [r2, ip]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8006626:	459e      	cmp	lr, r3
 8006628:	bf8c      	ite	hi
 800662a:	ebae 0303 	subhi.w	r3, lr, r3
 800662e:	eba3 030e 	subls.w	r3, r3, lr
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8006632:	4281      	cmp	r1, r0
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8006634:	b29b      	uxth	r3, r3
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8006636:	bf8c      	ite	hi
 8006638:	1a08      	subhi	r0, r1, r0
 800663a:	1a40      	subls	r0, r0, r1
 800663c:	b280      	uxth	r0, r0
      if ((x_diff + y_diff) > 5)
 800663e:	4418      	add	r0, r3
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8006640:	9b03      	ldr	r3, [sp, #12]
      if ((x_diff + y_diff) > 5)
 8006642:	2805      	cmp	r0, #5
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8006644:	7818      	ldrb	r0, [r3, #0]
        _x[index] = x[index];
 8006646:	bfc4      	itt	gt
 8006648:	f84b e002 	strgt.w	lr, [fp, r2]
        _y[index] = y[index];
 800664c:	f84c 1002 	strgt.w	r1, [ip, r2]
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8006650:	2870      	cmp	r0, #112	; 0x70
 8006652:	d115      	bne.n	8006680 <BSP_TS_GetState+0x118>
        TS_State->touchX[index] = x[index];
 8006654:	f8a6 e000 	strh.w	lr, [r6]
        TS_State->touchY[index] = y[index];
 8006658:	8171      	strh	r1, [r6, #10]
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 800665a:	ab07      	add	r3, sp, #28
 800665c:	aa05      	add	r2, sp, #20
 800665e:	4621      	mov	r1, r4
 8006660:	9300      	str	r3, [sp, #0]
 8006662:	ab06      	add	r3, sp, #24
 8006664:	f7ff fc8e 	bl	8005f84 <ft5336_TS_GetTouchInfo>
      TS_State->touchWeight[index] = weight;
 8006668:	9b05      	ldr	r3, [sp, #20]
 800666a:	f805 3b01 	strb.w	r3, [r5], #1
      TS_State->touchArea[index]   = area;
 800666e:	9b06      	ldr	r3, [sp, #24]
 8006670:	726b      	strb	r3, [r5, #9]
      switch(event)
 8006672:	9b07      	ldr	r3, [sp, #28]
 8006674:	2b03      	cmp	r3, #3
 8006676:	d814      	bhi.n	80066a2 <BSP_TS_GetState+0x13a>
 8006678:	e8df f003 	tbb	[pc, r3]
 800667c:	1d1b1911 	.word	0x1d1b1911
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8006680:	4b11      	ldr	r3, [pc, #68]	; (80066c8 <BSP_TS_GetState+0x160>)
 8006682:	8819      	ldrh	r1, [r3, #0]
 8006684:	f85b 3002 	ldr.w	r3, [fp, r2]
 8006688:	434b      	muls	r3, r1
 800668a:	0b1b      	lsrs	r3, r3, #12
 800668c:	8033      	strh	r3, [r6, #0]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800668e:	4b0f      	ldr	r3, [pc, #60]	; (80066cc <BSP_TS_GetState+0x164>)
 8006690:	8819      	ldrh	r1, [r3, #0]
 8006692:	f85c 3002 	ldr.w	r3, [ip, r2]
 8006696:	434b      	muls	r3, r1
 8006698:	0b1b      	lsrs	r3, r3, #12
 800669a:	8173      	strh	r3, [r6, #10]
 800669c:	e7dd      	b.n	800665a <BSP_TS_GetState+0xf2>
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 800669e:	2301      	movs	r3, #1
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80066a0:	712b      	strb	r3, [r5, #4]
    for(index=0; index < TS_State->touchDetected; index++)
 80066a2:	3401      	adds	r4, #1
 80066a4:	3602      	adds	r6, #2
 80066a6:	f108 0802 	add.w	r8, r8, #2
 80066aa:	3702      	adds	r7, #2
 80066ac:	e778      	b.n	80065a0 <BSP_TS_GetState+0x38>
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 80066ae:	2302      	movs	r3, #2
 80066b0:	e7f6      	b.n	80066a0 <BSP_TS_GetState+0x138>
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 80066b2:	2303      	movs	r3, #3
 80066b4:	e7f4      	b.n	80066a0 <BSP_TS_GetState+0x138>
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80066b6:	2300      	movs	r3, #0
 80066b8:	e7f2      	b.n	80066a0 <BSP_TS_GetState+0x138>
 80066ba:	bf00      	nop
 80066bc:	20000424 	.word	0x20000424
 80066c0:	200003f8 	.word	0x200003f8
 80066c4:	20000428 	.word	0x20000428
 80066c8:	2000042a 	.word	0x2000042a
 80066cc:	2000042c 	.word	0x2000042c
 80066d0:	200003fc 	.word	0x200003fc
 80066d4:	20000410 	.word	0x20000410

080066d8 <ex_disp_fill>:
/* Write a pixel array (called 'map') to the a specific area on the display
 * This function is required only when LV_VDB_SIZE == 0 in lv_conf.h*/
static void ex_disp_fill(int32_t x1, int32_t y1, int32_t x2, int32_t y2,  lv_color_t color)
{
    /*Return if the area is out the screen*/
    if(x2 < 0) return;
 80066d8:	2a00      	cmp	r2, #0
{
 80066da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066dc:	9d05      	ldr	r5, [sp, #20]
    if(x2 < 0) return;
 80066de:	db1e      	blt.n	800671e <ex_disp_fill+0x46>
    if(y2 < 0) return;
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	db1c      	blt.n	800671e <ex_disp_fill+0x46>
    if(x1 > TFT_HOR_RES - 1) return;
 80066e4:	f5b0 7ff0 	cmp.w	r0, #480	; 0x1e0
 80066e8:	da19      	bge.n	800671e <ex_disp_fill+0x46>
    if(y1 > TFT_VER_RES - 1) return;
 80066ea:	f5b1 7f88 	cmp.w	r1, #272	; 0x110
 80066ee:	da16      	bge.n	800671e <ex_disp_fill+0x46>

    /*Truncate the area to the screen*/
    int32_t act_x1 = x1 < 0 ? 0 : x1;
    int32_t act_y1 = y1 < 0 ? 0 : y1;
    int32_t act_x2 = x2 > TFT_HOR_RES - 1 ? TFT_HOR_RES - 1 : x2;
 80066f0:	f240 14df 	movw	r4, #479	; 0x1df
    int32_t act_x1 = x1 < 0 ? 0 : x1;
 80066f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    int32_t act_y1 = y1 < 0 ? 0 : y1;
 80066f8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    int32_t act_x2 = x2 > TFT_HOR_RES - 1 ? TFT_HOR_RES - 1 : x2;
 80066fc:	42a2      	cmp	r2, r4
 80066fe:	bfa8      	it	ge
 8006700:	4622      	movge	r2, r4
    int32_t act_y2 = y2 > TFT_VER_RES - 1 ? TFT_VER_RES - 1 : y2;
 8006702:	f240 140f 	movw	r4, #271	; 0x10f
 8006706:	42a3      	cmp	r3, r4
 8006708:	bfa8      	it	ge
 800670a:	4623      	movge	r3, r4
 800670c:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
 8006710:	fb04 0401 	mla	r4, r4, r1, r0
 8006714:	00a4      	lsls	r4, r4, #2
 8006716:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000

    uint32_t x;
    uint32_t y;

    /*Fill the remaining area*/
    for(x = act_x1; x <= act_x2; x++) {
 800671a:	4290      	cmp	r0, r2
 800671c:	d909      	bls.n	8006732 <ex_disp_fill+0x5a>
 800671e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for(y = act_y1; y <= act_y2; y++) {
            my_fb[y * TFT_HOR_RES + x] = color.full;
 8006720:	603d      	str	r5, [r7, #0]
        for(y = act_y1; y <= act_y2; y++) {
 8006722:	3601      	adds	r6, #1
 8006724:	f507 67f0 	add.w	r7, r7, #1920	; 0x780
 8006728:	429e      	cmp	r6, r3
 800672a:	d9f9      	bls.n	8006720 <ex_disp_fill+0x48>
    for(x = act_x1; x <= act_x2; x++) {
 800672c:	3001      	adds	r0, #1
 800672e:	3404      	adds	r4, #4
 8006730:	e7f3      	b.n	800671a <ex_disp_fill+0x42>
 8006732:	4627      	mov	r7, r4
        for(y = act_y1; y <= act_y2; y++) {
 8006734:	460e      	mov	r6, r1
 8006736:	e7f7      	b.n	8006728 <ex_disp_fill+0x50>

08006738 <DMA2D_TransferError>:
  * @note   This example shows a simple way to report DMA2D transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
static void DMA2D_TransferError(DMA2D_HandleTypeDef *hdma2d)
{
 8006738:	4770      	bx	lr
	...

0800673c <gpu_mem_fill>:
{
 800673c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    HAL_DMA2D_PollForTransfer(&Dma2dHandle, 100);
 800673e:	4c10      	ldr	r4, [pc, #64]	; (8006780 <gpu_mem_fill+0x44>)
{
 8006740:	4606      	mov	r6, r0
 8006742:	460f      	mov	r7, r1
    HAL_DMA2D_PollForTransfer(&Dma2dHandle, 100);
 8006744:	2164      	movs	r1, #100	; 0x64
 8006746:	4620      	mov	r0, r4
{
 8006748:	4615      	mov	r5, r2
    HAL_DMA2D_PollForTransfer(&Dma2dHandle, 100);
 800674a:	f7fb fe5c 	bl	8002406 <HAL_DMA2D_PollForTransfer>
    Dma2dHandle.Init.Mode = DMA2D_R2M;
 800674e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    if(HAL_DMA2D_Init(&Dma2dHandle) != HAL_OK)
 8006752:	4620      	mov	r0, r4
    Dma2dHandle.Init.Mode = DMA2D_R2M;
 8006754:	6063      	str	r3, [r4, #4]
    if(HAL_DMA2D_Init(&Dma2dHandle) != HAL_OK)
 8006756:	f7fb fe0b 	bl	8002370 <HAL_DMA2D_Init>
 800675a:	b100      	cbz	r0, 800675e <gpu_mem_fill+0x22>
 800675c:	e7fe      	b.n	800675c <gpu_mem_fill+0x20>
    Dma2dHandle.LayerCfg[1].InputAlpha = 0xff;
 800675e:	23ff      	movs	r3, #255	; 0xff
    HAL_DMA2D_ConfigLayer(&Dma2dHandle, 1);
 8006760:	2101      	movs	r1, #1
 8006762:	4620      	mov	r0, r4
    Dma2dHandle.LayerCfg[1].InputAlpha = 0xff;
 8006764:	6363      	str	r3, [r4, #52]	; 0x34
    HAL_DMA2D_ConfigLayer(&Dma2dHandle, 1);
 8006766:	f7fb fed1 	bl	800250c <HAL_DMA2D_ConfigLayer>
    HAL_DMA2D_BlendingStart(&Dma2dHandle, (uint32_t) lv_color_to32(color), (uint32_t) dest, (uint32_t)dest, length, 1);
 800676a:	2301      	movs	r3, #1
 800676c:	4632      	mov	r2, r6
 800676e:	4629      	mov	r1, r5
 8006770:	9700      	str	r7, [sp, #0]
 8006772:	9301      	str	r3, [sp, #4]
 8006774:	4633      	mov	r3, r6
 8006776:	4620      	mov	r0, r4
 8006778:	f7fb fe26 	bl	80023c8 <HAL_DMA2D_BlendingStart>
}
 800677c:	b003      	add	sp, #12
 800677e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006780:	20000430 	.word	0x20000430

08006784 <gpu_mem_blend>:
{
 8006784:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    HAL_DMA2D_PollForTransfer(&Dma2dHandle, 100);
 8006788:	4c11      	ldr	r4, [pc, #68]	; (80067d0 <gpu_mem_blend+0x4c>)
{
 800678a:	4606      	mov	r6, r0
 800678c:	460d      	mov	r5, r1
    HAL_DMA2D_PollForTransfer(&Dma2dHandle, 100);
 800678e:	2164      	movs	r1, #100	; 0x64
 8006790:	4620      	mov	r0, r4
{
 8006792:	4698      	mov	r8, r3
 8006794:	4617      	mov	r7, r2
    HAL_DMA2D_PollForTransfer(&Dma2dHandle, 100);
 8006796:	f7fb fe36 	bl	8002406 <HAL_DMA2D_PollForTransfer>
    Dma2dHandle.Init.Mode         = DMA2D_M2M_BLEND;
 800679a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    if(HAL_DMA2D_Init(&Dma2dHandle) != HAL_OK)
 800679e:	4620      	mov	r0, r4
    Dma2dHandle.Init.Mode         = DMA2D_M2M_BLEND;
 80067a0:	6063      	str	r3, [r4, #4]
    if(HAL_DMA2D_Init(&Dma2dHandle) != HAL_OK)
 80067a2:	f7fb fde5 	bl	8002370 <HAL_DMA2D_Init>
 80067a6:	b100      	cbz	r0, 80067aa <gpu_mem_blend+0x26>
 80067a8:	e7fe      	b.n	80067a8 <gpu_mem_blend+0x24>
    HAL_DMA2D_ConfigLayer(&Dma2dHandle, 1);
 80067aa:	2101      	movs	r1, #1
 80067ac:	4620      	mov	r0, r4
    Dma2dHandle.LayerCfg[1].InputAlpha = opa;
 80067ae:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
    HAL_DMA2D_ConfigLayer(&Dma2dHandle, 1);
 80067b2:	f7fb feab 	bl	800250c <HAL_DMA2D_ConfigLayer>
    HAL_DMA2D_BlendingStart(&Dma2dHandle, (uint32_t) src, (uint32_t) dest, (uint32_t)dest, length, 1);
 80067b6:	2301      	movs	r3, #1
 80067b8:	4632      	mov	r2, r6
 80067ba:	4629      	mov	r1, r5
 80067bc:	9700      	str	r7, [sp, #0]
 80067be:	9301      	str	r3, [sp, #4]
 80067c0:	4633      	mov	r3, r6
 80067c2:	4620      	mov	r0, r4
 80067c4:	f7fb fe00 	bl	80023c8 <HAL_DMA2D_BlendingStart>
}
 80067c8:	b002      	add	sp, #8
 80067ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067ce:	bf00      	nop
 80067d0:	20000430 	.word	0x20000430

080067d4 <DMA_TransferComplete>:
{
 80067d4:	b538      	push	{r3, r4, r5, lr}
    y_fill_act ++;
 80067d6:	4b12      	ldr	r3, [pc, #72]	; (8006820 <DMA_TransferComplete+0x4c>)
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	3201      	adds	r2, #1
 80067dc:	601a      	str	r2, [r3, #0]
    if(y_fill_act > y2_fill) {
 80067de:	4b11      	ldr	r3, [pc, #68]	; (8006824 <DMA_TransferComplete+0x50>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	dd03      	ble.n	80067ee <DMA_TransferComplete+0x1a>
}
 80067e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_flush_ready();
 80067ea:	f002 bfcd 	b.w	8009788 <lv_flush_ready>
    	uint32_t length = (x2_flush - x1_flush + 1);
 80067ee:	4b0e      	ldr	r3, [pc, #56]	; (8006828 <DMA_TransferComplete+0x54>)
        buf_to_flush += x2_flush - x1_flush + 1;
 80067f0:	4d0e      	ldr	r5, [pc, #56]	; (800682c <DMA_TransferComplete+0x58>)
    	uint32_t length = (x2_flush - x1_flush + 1);
 80067f2:	681c      	ldr	r4, [r3, #0]
 80067f4:	4b0e      	ldr	r3, [pc, #56]	; (8006830 <DMA_TransferComplete+0x5c>)
        buf_to_flush += x2_flush - x1_flush + 1;
 80067f6:	6829      	ldr	r1, [r5, #0]
    	uint32_t length = (x2_flush - x1_flush + 1);
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	1b1b      	subs	r3, r3, r4
 80067fc:	3301      	adds	r3, #1
        buf_to_flush += x2_flush - x1_flush + 1;
 80067fe:	eb01 0183 	add.w	r1, r1, r3, lsl #2
        if(HAL_DMA_Start_IT(han,(uint32_t)buf_to_flush, (uint32_t)&my_fb[y_fill_act * TFT_HOR_RES + x1_flush],
 8006802:	005b      	lsls	r3, r3, #1
        buf_to_flush += x2_flush - x1_flush + 1;
 8006804:	6029      	str	r1, [r5, #0]
        if(HAL_DMA_Start_IT(han,(uint32_t)buf_to_flush, (uint32_t)&my_fb[y_fill_act * TFT_HOR_RES + x1_flush],
 8006806:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
 800680a:	fb05 4202 	mla	r2, r5, r2, r4
 800680e:	0092      	lsls	r2, r2, #2
 8006810:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
 8006814:	f7fb fc4a 	bl	80020ac <HAL_DMA_Start_IT>
 8006818:	b100      	cbz	r0, 800681c <DMA_TransferComplete+0x48>
 800681a:	e7fe      	b.n	800681a <DMA_TransferComplete+0x46>
 800681c:	bd38      	pop	{r3, r4, r5, pc}
 800681e:	bf00      	nop
 8006820:	20000588 	.word	0x20000588
 8006824:	20000584 	.word	0x20000584
 8006828:	2000057c 	.word	0x2000057c
 800682c:	200004d0 	.word	0x200004d0
 8006830:	20000580 	.word	0x20000580

08006834 <ex_disp_flush>:
    if(x2 < 0) return;
 8006834:	2a00      	cmp	r2, #0
{
 8006836:	b570      	push	{r4, r5, r6, lr}
 8006838:	460c      	mov	r4, r1
 800683a:	9904      	ldr	r1, [sp, #16]
    if(x2 < 0) return;
 800683c:	db2e      	blt.n	800689c <ex_disp_flush+0x68>
    if(y2 < 0) return;
 800683e:	2b00      	cmp	r3, #0
 8006840:	db2c      	blt.n	800689c <ex_disp_flush+0x68>
    if(x1 > TFT_HOR_RES - 1) return;
 8006842:	f5b0 7ff0 	cmp.w	r0, #480	; 0x1e0
 8006846:	da29      	bge.n	800689c <ex_disp_flush+0x68>
    if(y1 > TFT_VER_RES - 1) return;
 8006848:	f5b4 7f88 	cmp.w	r4, #272	; 0x110
 800684c:	da26      	bge.n	800689c <ex_disp_flush+0x68>
    int32_t act_x2 = x2 > TFT_HOR_RES - 1 ? TFT_HOR_RES - 1 : x2;
 800684e:	f240 15df 	movw	r5, #479	; 0x1df
    int32_t act_x1 = x1 < 0 ? 0 : x1;
 8006852:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    y2_fill = act_y2;
 8006856:	f240 160f 	movw	r6, #271	; 0x10f
    int32_t act_y1 = y1 < 0 ? 0 : y1;
 800685a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    int32_t act_x2 = x2 > TFT_HOR_RES - 1 ? TFT_HOR_RES - 1 : x2;
 800685e:	42aa      	cmp	r2, r5
 8006860:	bfa8      	it	ge
 8006862:	462a      	movge	r2, r5
    x1_flush = act_x1;
 8006864:	4d0e      	ldr	r5, [pc, #56]	; (80068a0 <ex_disp_flush+0x6c>)
 8006866:	6028      	str	r0, [r5, #0]
    x2_flush = act_x2;
 8006868:	4d0e      	ldr	r5, [pc, #56]	; (80068a4 <ex_disp_flush+0x70>)
 800686a:	602a      	str	r2, [r5, #0]
    uint32_t length = (x2_flush - x1_flush + 1);
 800686c:	1a12      	subs	r2, r2, r0
    y2_fill = act_y2;
 800686e:	4d0e      	ldr	r5, [pc, #56]	; (80068a8 <ex_disp_flush+0x74>)
 8006870:	42b3      	cmp	r3, r6
 8006872:	bfd4      	ite	le
 8006874:	602b      	strle	r3, [r5, #0]
 8006876:	602e      	strgt	r6, [r5, #0]
    y_fill_act = act_y1;
 8006878:	4b0c      	ldr	r3, [pc, #48]	; (80068ac <ex_disp_flush+0x78>)
 800687a:	601c      	str	r4, [r3, #0]
    buf_to_flush = color_p;
 800687c:	4b0c      	ldr	r3, [pc, #48]	; (80068b0 <ex_disp_flush+0x7c>)
 800687e:	6019      	str	r1, [r3, #0]
    uint32_t length = (x2_flush - x1_flush + 1);
 8006880:	1c53      	adds	r3, r2, #1
    err = HAL_DMA_Start_IT(&DmaHandle,(uint32_t)buf_to_flush, (uint32_t)&my_fb[y_fill_act * TFT_HOR_RES + x1_flush],
 8006882:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8006886:	005b      	lsls	r3, r3, #1
 8006888:	fb02 0204 	mla	r2, r2, r4, r0
 800688c:	4809      	ldr	r0, [pc, #36]	; (80068b4 <ex_disp_flush+0x80>)
 800688e:	0092      	lsls	r2, r2, #2
 8006890:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
 8006894:	f7fb fc0a 	bl	80020ac <HAL_DMA_Start_IT>
    if(err != HAL_OK)
 8006898:	b100      	cbz	r0, 800689c <ex_disp_flush+0x68>
 800689a:	e7fe      	b.n	800689a <ex_disp_flush+0x66>
 800689c:	bd70      	pop	{r4, r5, r6, pc}
 800689e:	bf00      	nop
 80068a0:	2000057c 	.word	0x2000057c
 80068a4:	20000580 	.word	0x20000580
 80068a8:	20000584 	.word	0x20000584
 80068ac:	20000588 	.word	0x20000588
 80068b0:	200004d0 	.word	0x200004d0
 80068b4:	20000470 	.word	0x20000470

080068b8 <ex_disp_map>:
    if(x2 < 0) return;
 80068b8:	2a00      	cmp	r2, #0
{
 80068ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068be:	f8dd 8020 	ldr.w	r8, [sp, #32]
    if(x2 < 0) return;
 80068c2:	db28      	blt.n	8006916 <ex_disp_map+0x5e>
    if(y2 < 0) return;
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	db26      	blt.n	8006916 <ex_disp_map+0x5e>
    if(x1 > TFT_HOR_RES - 1) return;
 80068c8:	f5b0 7ff0 	cmp.w	r0, #480	; 0x1e0
 80068cc:	da23      	bge.n	8006916 <ex_disp_map+0x5e>
    if(y1 > TFT_VER_RES - 1) return;
 80068ce:	f5b1 7f88 	cmp.w	r1, #272	; 0x110
 80068d2:	da20      	bge.n	8006916 <ex_disp_map+0x5e>
    int32_t act_y2 = y2 > TFT_VER_RES - 1 ? TFT_VER_RES - 1 : y2;
 80068d4:	f240 170f 	movw	r7, #271	; 0x10f
    int32_t act_y1 = y1 < 0 ? 0 : y1;
 80068d8:	ea21 75e1 	bic.w	r5, r1, r1, asr #31
 80068dc:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
                (act_x2 - act_x1 + 1) * sizeof(my_fb[0]));
 80068e0:	f240 11df 	movw	r1, #479	; 0x1df
    int32_t act_y2 = y2 > TFT_VER_RES - 1 ? TFT_VER_RES - 1 : y2;
 80068e4:	429f      	cmp	r7, r3
        color_p += x2 - x1 + 1;    /*Skip the parts out of the screen*/
 80068e6:	eba2 0900 	sub.w	r9, r2, r0
    int32_t act_y2 = y2 > TFT_VER_RES - 1 ? TFT_VER_RES - 1 : y2;
 80068ea:	bfa8      	it	ge
 80068ec:	461f      	movge	r7, r3
    int32_t act_x1 = x1 < 0 ? 0 : x1;
 80068ee:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
        color_p += x2 - x1 + 1;    /*Skip the parts out of the screen*/
 80068f2:	f109 0901 	add.w	r9, r9, #1
                (act_x2 - act_x1 + 1) * sizeof(my_fb[0]));
 80068f6:	f1c3 0601 	rsb	r6, r3, #1
 80068fa:	fb04 3405 	mla	r4, r4, r5, r3
        color_p += x2 - x1 + 1;    /*Skip the parts out of the screen*/
 80068fe:	ea4f 0989 	mov.w	r9, r9, lsl #2
                (act_x2 - act_x1 + 1) * sizeof(my_fb[0]));
 8006902:	428a      	cmp	r2, r1
 8006904:	bfd4      	ite	le
 8006906:	18b6      	addle	r6, r6, r2
 8006908:	1876      	addgt	r6, r6, r1
 800690a:	00a4      	lsls	r4, r4, #2
 800690c:	00b6      	lsls	r6, r6, #2
 800690e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
    for(y = act_y1; y <= act_y2; y++) {
 8006912:	42bd      	cmp	r5, r7
 8006914:	d901      	bls.n	800691a <ex_disp_map+0x62>
 8006916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        memcpy((void*)&my_fb[y * TFT_HOR_RES + act_x1],
 800691a:	4641      	mov	r1, r8
 800691c:	4620      	mov	r0, r4
 800691e:	4632      	mov	r2, r6
        color_p += x2 - x1 + 1;    /*Skip the parts out of the screen*/
 8006920:	44c8      	add	r8, r9
        memcpy((void*)&my_fb[y * TFT_HOR_RES + act_x1],
 8006922:	f00f f8fb 	bl	8015b1c <memcpy>
    for(y = act_y1; y <= act_y2; y++) {
 8006926:	3501      	adds	r5, #1
 8006928:	f504 64f0 	add.w	r4, r4, #1920	; 0x780
 800692c:	e7f1      	b.n	8006912 <ex_disp_map+0x5a>

0800692e <DMA2D_TransferComplete>:
 800692e:	4770      	bx	lr

08006930 <DMA_TransferError>:
 8006930:	4770      	bx	lr
	...

08006934 <tft_init>:
{
 8006934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006938:	b09c      	sub	sp, #112	; 0x70
    hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 800693a:	4c9c      	ldr	r4, [pc, #624]	; (8006bac <tft_init+0x278>)
    hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800693c:	2709      	movs	r7, #9
    lv_disp_drv_init(&disp_drv);
 800693e:	a809      	add	r0, sp, #36	; 0x24
 8006940:	f006 fd28 	bl	800d394 <lv_disp_drv_init>
    hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8006944:	2328      	movs	r3, #40	; 0x28
    if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8006946:	4620      	mov	r0, r4
    hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8006948:	61a7      	str	r7, [r4, #24]
    hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 800694a:	6163      	str	r3, [r4, #20]
    hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800694c:	2335      	movs	r3, #53	; 0x35
 800694e:	61e3      	str	r3, [r4, #28]
    hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8006950:	230b      	movs	r3, #11
 8006952:	6223      	str	r3, [r4, #32]
    hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8006954:	f240 131b 	movw	r3, #283	; 0x11b
 8006958:	62a3      	str	r3, [r4, #40]	; 0x28
    hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800695a:	f240 2315 	movw	r3, #533	; 0x215
 800695e:	6263      	str	r3, [r4, #36]	; 0x24
    hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8006960:	f240 131d 	movw	r3, #285	; 0x11d
 8006964:	6323      	str	r3, [r4, #48]	; 0x30
    hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8006966:	f240 2335 	movw	r3, #565	; 0x235
 800696a:	62e3      	str	r3, [r4, #44]	; 0x2c
    hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 800696c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006970:	6623      	str	r3, [r4, #96]	; 0x60
    hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8006972:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006976:	6663      	str	r3, [r4, #100]	; 0x64
    hLtdcHandler.Init.Backcolor.Blue = 0;
 8006978:	2300      	movs	r3, #0
 800697a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hLtdcHandler.Init.Backcolor.Green = 0;
 800697e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    hLtdcHandler.Init.Backcolor.Red = 0;
 8006982:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8006986:	6063      	str	r3, [r4, #4]
    hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8006988:	60a3      	str	r3, [r4, #8]
    hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800698a:	60e3      	str	r3, [r4, #12]
    hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800698c:	6123      	str	r3, [r4, #16]
    hLtdcHandler.Instance = LTDC;
 800698e:	4b88      	ldr	r3, [pc, #544]	; (8006bb0 <tft_init+0x27c>)
 8006990:	6023      	str	r3, [r4, #0]
    if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8006992:	f7fc fc30 	bl	80031f6 <HAL_LTDC_GetState>
 8006996:	2800      	cmp	r0, #0
 8006998:	f040 8094 	bne.w	8006ac4 <tft_init+0x190>
    __HAL_RCC_LTDC_CLK_ENABLE();
 800699c:	4b85      	ldr	r3, [pc, #532]	; (8006bb4 <tft_init+0x280>)
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800699e:	2502      	movs	r5, #2
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80069a0:	260e      	movs	r6, #14
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80069a2:	a90f      	add	r1, sp, #60	; 0x3c
    __HAL_RCC_LTDC_CLK_ENABLE();
 80069a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    gpio_init_structure.Pin       = GPIO_PIN_12;
 80069a6:	f44f 5880 	mov.w	r8, #4096	; 0x1000
    __HAL_RCC_LTDC_CLK_ENABLE();
 80069aa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80069ae:	645a      	str	r2, [r3, #68]	; 0x44
 80069b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069b2:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80069b6:	9200      	str	r2, [sp, #0]
 80069b8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80069ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069bc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80069c0:	631a      	str	r2, [r3, #48]	; 0x30
 80069c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069c4:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 80069c8:	9201      	str	r2, [sp, #4]
 80069ca:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80069cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069ce:	f042 0210 	orr.w	r2, r2, #16
 80069d2:	631a      	str	r2, [r3, #48]	; 0x30
 80069d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069d6:	f002 0210 	and.w	r2, r2, #16
 80069da:	9202      	str	r2, [sp, #8]
 80069dc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80069de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069e4:	631a      	str	r2, [r3, #48]	; 0x30
 80069e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069e8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80069ec:	9203      	str	r2, [sp, #12]
 80069ee:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80069f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069f6:	631a      	str	r2, [r3, #48]	; 0x30
 80069f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069fa:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80069fe:	9204      	str	r2, [sp, #16]
 8006a00:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8006a02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a08:	631a      	str	r2, [r3, #48]	; 0x30
 8006a0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a0c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8006a10:	9205      	str	r2, [sp, #20]
 8006a12:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8006a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a1a:	631a      	str	r2, [r3, #48]	; 0x30
 8006a1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a1e:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8006a22:	9206      	str	r2, [sp, #24]
 8006a24:	9a06      	ldr	r2, [sp, #24]
    LCD_DISP_GPIO_CLK_ENABLE();
 8006a26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a2c:	631a      	str	r2, [r3, #48]	; 0x30
 8006a2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a30:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8006a34:	9207      	str	r2, [sp, #28]
 8006a36:	9a07      	ldr	r2, [sp, #28]
    LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8006a38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a3e:	631a      	str	r2, [r3, #48]	; 0x30
 8006a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    gpio_init_structure.Pull      = GPIO_NOPULL;
 8006a42:	9011      	str	r0, [sp, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006a44:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8006a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006a4c:	9510      	str	r5, [sp, #64]	; 0x40
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006a4e:	f500 3004 	add.w	r0, r0, #135168	; 0x21000
    gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8006a52:	9512      	str	r5, [sp, #72]	; 0x48
    LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8006a54:	9308      	str	r3, [sp, #32]
 8006a56:	9b08      	ldr	r3, [sp, #32]
    gpio_init_structure.Pin       = GPIO_PIN_4;
 8006a58:	2310      	movs	r3, #16
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8006a5a:	9613      	str	r6, [sp, #76]	; 0x4c
    gpio_init_structure.Pin       = GPIO_PIN_4;
 8006a5c:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006a5e:	f7fb fd9f 	bl	80025a0 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006a62:	a90f      	add	r1, sp, #60	; 0x3c
 8006a64:	4854      	ldr	r0, [pc, #336]	; (8006bb8 <tft_init+0x284>)
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006a66:	9510      	str	r5, [sp, #64]	; 0x40
    gpio_init_structure.Pin       = GPIO_PIN_12;
 8006a68:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8006a6c:	9713      	str	r7, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006a6e:	f7fb fd97 	bl	80025a0 <HAL_GPIO_Init>
    gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8006a72:	f44f 4366 	mov.w	r3, #58880	; 0xe600
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8006a76:	a90f      	add	r1, sp, #60	; 0x3c
 8006a78:	4850      	ldr	r0, [pc, #320]	; (8006bbc <tft_init+0x288>)
    gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8006a7a:	930f      	str	r3, [sp, #60]	; 0x3c
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006a7c:	9510      	str	r5, [sp, #64]	; 0x40
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8006a7e:	9613      	str	r6, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8006a80:	f7fb fd8e 	bl	80025a0 <HAL_GPIO_Init>
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8006a84:	f64e 73ff 	movw	r3, #61439	; 0xefff
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8006a88:	a90f      	add	r1, sp, #60	; 0x3c
 8006a8a:	484d      	ldr	r0, [pc, #308]	; (8006bc0 <tft_init+0x28c>)
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8006a8c:	930f      	str	r3, [sp, #60]	; 0x3c
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006a8e:	9510      	str	r5, [sp, #64]	; 0x40
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8006a90:	9613      	str	r6, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8006a92:	f7fb fd85 	bl	80025a0 <HAL_GPIO_Init>
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8006a96:	23f7      	movs	r3, #247	; 0xf7
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006a98:	9510      	str	r5, [sp, #64]	; 0x40
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8006a9a:	a90f      	add	r1, sp, #60	; 0x3c
 8006a9c:	4849      	ldr	r0, [pc, #292]	; (8006bc4 <tft_init+0x290>)
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8006a9e:	2501      	movs	r5, #1
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8006aa0:	930f      	str	r3, [sp, #60]	; 0x3c
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8006aa2:	9613      	str	r6, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8006aa4:	f7fb fd7c 	bl	80025a0 <HAL_GPIO_Init>
    HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8006aa8:	a90f      	add	r1, sp, #60	; 0x3c
 8006aaa:	4844      	ldr	r0, [pc, #272]	; (8006bbc <tft_init+0x288>)
    gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8006aac:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8006ab0:	9510      	str	r5, [sp, #64]	; 0x40
    HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8006ab2:	f7fb fd75 	bl	80025a0 <HAL_GPIO_Init>
    gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8006ab6:	2308      	movs	r3, #8
    HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8006ab8:	a90f      	add	r1, sp, #60	; 0x3c
 8006aba:	4842      	ldr	r0, [pc, #264]	; (8006bc4 <tft_init+0x290>)
    gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8006abc:	930f      	str	r3, [sp, #60]	; 0x3c
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8006abe:	9510      	str	r5, [sp, #64]	; 0x40
    HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8006ac0:	f7fb fd6e 	bl	80025a0 <HAL_GPIO_Init>
    HAL_LTDC_Init(&hLtdcHandler);
 8006ac4:	4839      	ldr	r0, [pc, #228]	; (8006bac <tft_init+0x278>)
        my_fb[i] = 0;
 8006ac6:	2500      	movs	r5, #0
    HAL_LTDC_Init(&hLtdcHandler);
 8006ac8:	f7fc fafc 	bl	80030c4 <HAL_LTDC_Init>
    HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8006acc:	2201      	movs	r2, #1
 8006ace:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006ad2:	483a      	ldr	r0, [pc, #232]	; (8006bbc <tft_init+0x288>)
 8006ad4:	f7fb fef2 	bl	80028bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8006ad8:	2201      	movs	r2, #1
 8006ada:	2108      	movs	r1, #8
 8006adc:	4839      	ldr	r0, [pc, #228]	; (8006bc4 <tft_init+0x290>)
 8006ade:	f7fb feed 	bl	80028bc <HAL_GPIO_WritePin>
    BSP_SDRAM_Init();
 8006ae2:	f7ff fcab 	bl	800643c <BSP_SDRAM_Init>
 8006ae6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    for(i = 0; i < (TFT_HOR_RES * TFT_VER_RES) ; i++)
 8006aea:	4a37      	ldr	r2, [pc, #220]	; (8006bc8 <tft_init+0x294>)
        my_fb[i] = 0;
 8006aec:	f843 5b04 	str.w	r5, [r3], #4
    for(i = 0; i < (TFT_HOR_RES * TFT_VER_RES) ; i++)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d1fb      	bne.n	8006aec <tft_init+0x1b8>
    layer_cfg.FBStartAdress = FB_Address;
 8006af4:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    layer_cfg.WindowX1 = TFT_HOR_RES;
 8006af8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    layer_cfg.WindowY1 = TFT_VER_RES;
 8006afc:	f44f 7388 	mov.w	r3, #272	; 0x110
    layer_cfg.Alpha = 255;
 8006b00:	27ff      	movs	r7, #255	; 0xff
    layer_cfg.FBStartAdress = FB_Address;
 8006b02:	9118      	str	r1, [sp, #96]	; 0x60
    layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8006b04:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    layer_cfg.WindowX1 = TFT_HOR_RES;
 8006b08:	9210      	str	r2, [sp, #64]	; 0x40
    DmaHandle.Init.Priority = DMA_PRIORITY_HIGH;                    /* priority level : high            */
 8006b0a:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8006b0e:	9116      	str	r1, [sp, #88]	; 0x58
    layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8006b10:	2107      	movs	r1, #7
    layer_cfg.ImageWidth = TFT_HOR_RES;
 8006b12:	9219      	str	r2, [sp, #100]	; 0x64
    HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, 0);
 8006b14:	2200      	movs	r2, #0
    layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8006b16:	9117      	str	r1, [sp, #92]	; 0x5c
    HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, 0);
 8006b18:	a90f      	add	r1, sp, #60	; 0x3c
 8006b1a:	4824      	ldr	r0, [pc, #144]	; (8006bac <tft_init+0x278>)
    DmaHandle.Init.FIFOMode = DMA_FIFOMODE_ENABLE;                  /* FIFO mode enabled                */
 8006b1c:	f04f 0804 	mov.w	r8, #4
    layer_cfg.WindowX0 = 0;
 8006b20:	950f      	str	r5, [sp, #60]	; 0x3c
    layer_cfg.WindowY0 = 0;
 8006b22:	9511      	str	r5, [sp, #68]	; 0x44
    layer_cfg.WindowY1 = TFT_VER_RES;
 8006b24:	9312      	str	r3, [sp, #72]	; 0x48
    layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8006b26:	9513      	str	r5, [sp, #76]	; 0x4c
    layer_cfg.Alpha0 = 0;
 8006b28:	9515      	str	r5, [sp, #84]	; 0x54
    layer_cfg.Backcolor.Blue = 0;
 8006b2a:	f88d 506c 	strb.w	r5, [sp, #108]	; 0x6c
    layer_cfg.Backcolor.Green = 0;
 8006b2e:	f88d 506d 	strb.w	r5, [sp, #109]	; 0x6d
    layer_cfg.Backcolor.Red = 0;
 8006b32:	f88d 506e 	strb.w	r5, [sp, #110]	; 0x6e
    layer_cfg.ImageHeight = TFT_VER_RES;
 8006b36:	931a      	str	r3, [sp, #104]	; 0x68
    layer_cfg.Alpha = 255;
 8006b38:	9714      	str	r7, [sp, #80]	; 0x50
    HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, 0);
 8006b3a:	f7fc fb33 	bl	80031a4 <HAL_LTDC_ConfigLayer>
    __HAL_LTDC_ENABLE(&hLtdcHandler);
 8006b3e:	6822      	ldr	r2, [r4, #0]
    HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8006b40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006b44:	481d      	ldr	r0, [pc, #116]	; (8006bbc <tft_init+0x288>)
    __HAL_LTDC_ENABLE(&hLtdcHandler);
 8006b46:	6993      	ldr	r3, [r2, #24]
    DmaHandle.Init.Channel = CPY_BUF_DMA_CHANNEL;                   /* DMA_CHANNEL_0                    */
 8006b48:	4c20      	ldr	r4, [pc, #128]	; (8006bcc <tft_init+0x298>)
    __HAL_LTDC_ENABLE(&hLtdcHandler);
 8006b4a:	f043 0301 	orr.w	r3, r3, #1
 8006b4e:	6193      	str	r3, [r2, #24]
    HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8006b50:	2201      	movs	r2, #1
 8006b52:	f7fb feb3 	bl	80028bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8006b56:	2201      	movs	r2, #1
 8006b58:	2108      	movs	r1, #8
 8006b5a:	481a      	ldr	r0, [pc, #104]	; (8006bc4 <tft_init+0x290>)
 8006b5c:	f7fb feae 	bl	80028bc <HAL_GPIO_WritePin>
    __HAL_RCC_DMA2_CLK_ENABLE();
 8006b60:	4b14      	ldr	r3, [pc, #80]	; (8006bb4 <tft_init+0x280>)
    if(HAL_DMA_Init(&DmaHandle) != HAL_OK)
 8006b62:	4620      	mov	r0, r4
    __HAL_RCC_DMA2_CLK_ENABLE();
 8006b64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b66:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006b6a:	631a      	str	r2, [r3, #48]	; 0x30
 8006b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    DmaHandle.Init.Channel = CPY_BUF_DMA_CHANNEL;                   /* DMA_CHANNEL_0                    */
 8006b6e:	6065      	str	r5, [r4, #4]
    __HAL_RCC_DMA2_CLK_ENABLE();
 8006b70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    DmaHandle.Init.Mode = DMA_NORMAL;                               /* Normal DMA mode                  */
 8006b74:	61e5      	str	r5, [r4, #28]
    DmaHandle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL; /* FIFO threshold: 1/4 full   */
 8006b76:	62a5      	str	r5, [r4, #40]	; 0x28
    __HAL_RCC_DMA2_CLK_ENABLE();
 8006b78:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    DmaHandle.Init.Direction = DMA_MEMORY_TO_MEMORY;                /* M2M transfer mode                */
 8006b7c:	2380      	movs	r3, #128	; 0x80
    DmaHandle.Init.MemBurst = DMA_MBURST_SINGLE;                    /* Memory burst                     */
 8006b7e:	62e5      	str	r5, [r4, #44]	; 0x2c
    DmaHandle.Init.Direction = DMA_MEMORY_TO_MEMORY;                /* M2M transfer mode                */
 8006b80:	60a3      	str	r3, [r4, #8]
    DmaHandle.Init.PeriphInc = DMA_PINC_ENABLE;                     /* Peripheral increment mode Enable */
 8006b82:	f44f 7300 	mov.w	r3, #512	; 0x200
    DmaHandle.Init.PeriphBurst = DMA_PBURST_SINGLE;                 /* Peripheral burst                 */
 8006b86:	6325      	str	r5, [r4, #48]	; 0x30
    DmaHandle.Init.PeriphInc = DMA_PINC_ENABLE;                     /* Peripheral increment mode Enable */
 8006b88:	60e3      	str	r3, [r4, #12]
    DmaHandle.Init.MemInc = DMA_MINC_ENABLE;                        /* Memory increment mode Enable     */
 8006b8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    DmaHandle.Init.Priority = DMA_PRIORITY_HIGH;                    /* priority level : high            */
 8006b8e:	6226      	str	r6, [r4, #32]
    DmaHandle.Init.MemInc = DMA_MINC_ENABLE;                        /* Memory increment mode Enable     */
 8006b90:	6123      	str	r3, [r4, #16]
    DmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;   /* Peripheral data alignment : 16bit */
 8006b92:	f44f 6300 	mov.w	r3, #2048	; 0x800
    DmaHandle.Init.FIFOMode = DMA_FIFOMODE_ENABLE;                  /* FIFO mode enabled                */
 8006b96:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    DmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;   /* Peripheral data alignment : 16bit */
 8006b9a:	6163      	str	r3, [r4, #20]
    DmaHandle.Init.MemDataAlignment = DMA_PDATAALIGN_HALFWORD;      /* memory data alignment : 16bit     */
 8006b9c:	61a3      	str	r3, [r4, #24]
    DmaHandle.Instance = CPY_BUF_DMA_STREAM;
 8006b9e:	4b0c      	ldr	r3, [pc, #48]	; (8006bd0 <tft_init+0x29c>)
 8006ba0:	6023      	str	r3, [r4, #0]
    if(HAL_DMA_Init(&DmaHandle) != HAL_OK)
 8006ba2:	f7fb f9db 	bl	8001f5c <HAL_DMA_Init>
 8006ba6:	4605      	mov	r5, r0
 8006ba8:	b1a0      	cbz	r0, 8006bd4 <tft_init+0x2a0>
 8006baa:	e7fe      	b.n	8006baa <tft_init+0x276>
 8006bac:	200004d4 	.word	0x200004d4
 8006bb0:	40016800 	.word	0x40016800
 8006bb4:	40023800 	.word	0x40023800
 8006bb8:	40021800 	.word	0x40021800
 8006bbc:	40022000 	.word	0x40022000
 8006bc0:	40022400 	.word	0x40022400
 8006bc4:	40022800 	.word	0x40022800
 8006bc8:	c007f800 	.word	0xc007f800
 8006bcc:	20000470 	.word	0x20000470
 8006bd0:	40026410 	.word	0x40026410
    HAL_DMA_RegisterCallback(&DmaHandle, HAL_DMA_XFER_CPLT_CB_ID, DMA_TransferComplete);
 8006bd4:	4601      	mov	r1, r0
 8006bd6:	4a20      	ldr	r2, [pc, #128]	; (8006c58 <tft_init+0x324>)
 8006bd8:	4620      	mov	r0, r4
 8006bda:	f7fb fb5f 	bl	800229c <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&DmaHandle, HAL_DMA_XFER_ERROR_CB_ID, DMA_TransferError);
 8006bde:	4a1f      	ldr	r2, [pc, #124]	; (8006c5c <tft_init+0x328>)
 8006be0:	4641      	mov	r1, r8
 8006be2:	4620      	mov	r0, r4
 8006be4:	f7fb fb5a 	bl	800229c <HAL_DMA_RegisterCallback>
    HAL_NVIC_SetPriority(CPY_BUF_DMA_STREAM_IRQ, 0, 0);
 8006be8:	4629      	mov	r1, r5
 8006bea:	462a      	mov	r2, r5
 8006bec:	2038      	movs	r0, #56	; 0x38
 8006bee:	f7fb f915 	bl	8001e1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CPY_BUF_DMA_STREAM_IRQ);
 8006bf2:	2038      	movs	r0, #56	; 0x38
 8006bf4:	f7fb f94a 	bl	8001e8c <HAL_NVIC_EnableIRQ>
    disp_drv.disp_fill = ex_disp_fill;
 8006bf8:	4b19      	ldr	r3, [pc, #100]	; (8006c60 <tft_init+0x32c>)
  * @retval None
  */
static void DMA2D_Config(void)
{
    /* Configure the DMA2D Mode, Color Mode and output offset */
    Dma2dHandle.Init.Mode         = DMA2D_M2M_BLEND;
 8006bfa:	4c1a      	ldr	r4, [pc, #104]	; (8006c64 <tft_init+0x330>)
    disp_drv.disp_fill = ex_disp_fill;
 8006bfc:	930a      	str	r3, [sp, #40]	; 0x28
    disp_drv.disp_map = ex_disp_map;
 8006bfe:	4b1a      	ldr	r3, [pc, #104]	; (8006c68 <tft_init+0x334>)
    Dma2dHandle.LayerCfg[0].InputOffset = 0x0;

    Dma2dHandle.Instance   = DMA2D;

    /* DMA2D Initialization */
    if(HAL_DMA2D_Init(&Dma2dHandle) != HAL_OK)
 8006c00:	4620      	mov	r0, r4
    Dma2dHandle.Init.Mode         = DMA2D_M2M_BLEND;
 8006c02:	6066      	str	r6, [r4, #4]
    Dma2dHandle.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8006c04:	2601      	movs	r6, #1
    disp_drv.disp_map = ex_disp_map;
 8006c06:	930b      	str	r3, [sp, #44]	; 0x2c
    disp_drv.disp_flush = ex_disp_flush;
 8006c08:	4b18      	ldr	r3, [pc, #96]	; (8006c6c <tft_init+0x338>)
    Dma2dHandle.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8006c0a:	6326      	str	r6, [r4, #48]	; 0x30
    disp_drv.disp_flush = ex_disp_flush;
 8006c0c:	9309      	str	r3, [sp, #36]	; 0x24
    Dma2dHandle.XferCpltCallback  = DMA2D_TransferComplete;
 8006c0e:	4b18      	ldr	r3, [pc, #96]	; (8006c70 <tft_init+0x33c>)
    Dma2dHandle.LayerCfg[1].InputAlpha = 0xFF;
 8006c10:	6367      	str	r7, [r4, #52]	; 0x34
    Dma2dHandle.XferCpltCallback  = DMA2D_TransferComplete;
 8006c12:	6123      	str	r3, [r4, #16]
    Dma2dHandle.XferErrorCallback = DMA2D_TransferError;
 8006c14:	4b17      	ldr	r3, [pc, #92]	; (8006c74 <tft_init+0x340>)
    Dma2dHandle.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8006c16:	62e5      	str	r5, [r4, #44]	; 0x2c
    Dma2dHandle.XferErrorCallback = DMA2D_TransferError;
 8006c18:	6163      	str	r3, [r4, #20]
    Dma2dHandle.Instance   = DMA2D;
 8006c1a:	4b17      	ldr	r3, [pc, #92]	; (8006c78 <tft_init+0x344>)
    Dma2dHandle.LayerCfg[1].InputOffset = 0x0;
 8006c1c:	62a5      	str	r5, [r4, #40]	; 0x28
    Dma2dHandle.LayerCfg[0].AlphaMode = DMA2D_REPLACE_ALPHA;
 8006c1e:	6226      	str	r6, [r4, #32]
    Dma2dHandle.LayerCfg[0].InputAlpha = 0xFF;
 8006c20:	6267      	str	r7, [r4, #36]	; 0x24
    Dma2dHandle.LayerCfg[0].InputColorMode = DMA2D_INPUT_ARGB8888;
 8006c22:	61e5      	str	r5, [r4, #28]
    Dma2dHandle.LayerCfg[0].InputOffset = 0x0;
 8006c24:	61a5      	str	r5, [r4, #24]
    Dma2dHandle.Init.ColorMode    = DMA2D_ARGB8888;
 8006c26:	60a5      	str	r5, [r4, #8]
    Dma2dHandle.Init.OutputOffset = 0x0;
 8006c28:	60e5      	str	r5, [r4, #12]
    Dma2dHandle.Instance   = DMA2D;
 8006c2a:	6023      	str	r3, [r4, #0]
    if(HAL_DMA2D_Init(&Dma2dHandle) != HAL_OK)
 8006c2c:	f7fb fba0 	bl	8002370 <HAL_DMA2D_Init>
 8006c30:	4601      	mov	r1, r0
 8006c32:	b100      	cbz	r0, 8006c36 <tft_init+0x302>
 8006c34:	e7fe      	b.n	8006c34 <tft_init+0x300>
    {
        /* Initialization Error */
        Error_Handler();
    }

    HAL_DMA2D_ConfigLayer(&Dma2dHandle, 0);
 8006c36:	4620      	mov	r0, r4
 8006c38:	f7fb fc68 	bl	800250c <HAL_DMA2D_ConfigLayer>
    HAL_DMA2D_ConfigLayer(&Dma2dHandle, 1);
 8006c3c:	4631      	mov	r1, r6
 8006c3e:	4620      	mov	r0, r4
 8006c40:	f7fb fc64 	bl	800250c <HAL_DMA2D_ConfigLayer>
    disp_drv.mem_blend = gpu_mem_blend;
 8006c44:	4b0d      	ldr	r3, [pc, #52]	; (8006c7c <tft_init+0x348>)
    lv_disp_drv_register(&disp_drv);
 8006c46:	a809      	add	r0, sp, #36	; 0x24
    disp_drv.mem_blend = gpu_mem_blend;
 8006c48:	930c      	str	r3, [sp, #48]	; 0x30
    disp_drv.mem_fill = gpu_mem_fill;
 8006c4a:	4b0d      	ldr	r3, [pc, #52]	; (8006c80 <tft_init+0x34c>)
 8006c4c:	930d      	str	r3, [sp, #52]	; 0x34
    lv_disp_drv_register(&disp_drv);
 8006c4e:	f006 fba9 	bl	800d3a4 <lv_disp_drv_register>
}
 8006c52:	b01c      	add	sp, #112	; 0x70
 8006c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c58:	080067d5 	.word	0x080067d5
 8006c5c:	08006931 	.word	0x08006931
 8006c60:	080066d9 	.word	0x080066d9
 8006c64:	20000430 	.word	0x20000430
 8006c68:	080068b9 	.word	0x080068b9
 8006c6c:	08006835 	.word	0x08006835
 8006c70:	0800692f 	.word	0x0800692f
 8006c74:	08006739 	.word	0x08006739
 8006c78:	4002b000 	.word	0x4002b000
 8006c7c:	08006785 	.word	0x08006785
 8006c80:	0800673d 	.word	0x0800673d

08006c84 <DMA2_Stream0_IRQHandler>:
    HAL_DMA_IRQHandler(&DmaHandle);
 8006c84:	4801      	ldr	r0, [pc, #4]	; (8006c8c <DMA2_Stream0_IRQHandler+0x8>)
 8006c86:	f7fb ba4f 	b.w	8002128 <HAL_DMA_IRQHandler>
 8006c8a:	bf00      	nop
 8006c8c:	20000470 	.word	0x20000470

08006c90 <touchpad_read>:
 * @param x put the x coordinate here
 * @param y put the y coordinate here
 * @return true: the device is pressed, false: released
 */
static bool touchpad_read(lv_indev_data_t *data)
{
 8006c90:	b538      	push	{r3, r4, r5, lr}
    /* Read your touchpad */
    static int16_t last_x = 0;
    static int16_t last_y = 0;
    BSP_LED_Toggle(LED1);

    BSP_TS_GetState(&TS_State);
 8006c92:	4d0e      	ldr	r5, [pc, #56]	; (8006ccc <touchpad_read+0x3c>)
{
 8006c94:	4604      	mov	r4, r0
    BSP_LED_Toggle(LED1);
 8006c96:	2000      	movs	r0, #0
 8006c98:	f7ff fa92 	bl	80061c0 <BSP_LED_Toggle>
    BSP_TS_GetState(&TS_State);
 8006c9c:	4628      	mov	r0, r5
 8006c9e:	f7ff fc63 	bl	8006568 <BSP_TS_GetState>
    if(TS_State.touchDetected) {
 8006ca2:	782b      	ldrb	r3, [r5, #0]
 8006ca4:	490a      	ldr	r1, [pc, #40]	; (8006cd0 <touchpad_read+0x40>)
 8006ca6:	4a0b      	ldr	r2, [pc, #44]	; (8006cd4 <touchpad_read+0x44>)
 8006ca8:	b15b      	cbz	r3, 8006cc2 <touchpad_read+0x32>
            data->point.x = TS_State.touchX[0];
 8006caa:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
 8006cae:	8020      	strh	r0, [r4, #0]
            data->point.y = TS_State.touchY[0];
 8006cb0:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
            last_x = data->point.x;
 8006cb4:	8008      	strh	r0, [r1, #0]
            data->point.y = TS_State.touchY[0];
 8006cb6:	8063      	strh	r3, [r4, #2]
            last_y = data->point.y;
 8006cb8:	8013      	strh	r3, [r2, #0]
            data->state = LV_INDEV_STATE_PR;
 8006cba:	2301      	movs	r3, #1
    } else {
            data->point.x = last_x;
            data->point.y = last_y;
            data->state = LV_INDEV_STATE_REL;
 8006cbc:	7223      	strb	r3, [r4, #8]
    }

    return false;   /*false: no more data to read because we are no buffering*/
}
 8006cbe:	2000      	movs	r0, #0
 8006cc0:	bd38      	pop	{r3, r4, r5, pc}
            data->point.x = last_x;
 8006cc2:	8809      	ldrh	r1, [r1, #0]
            data->point.y = last_y;
 8006cc4:	8812      	ldrh	r2, [r2, #0]
            data->point.x = last_x;
 8006cc6:	8021      	strh	r1, [r4, #0]
            data->point.y = last_y;
 8006cc8:	8062      	strh	r2, [r4, #2]
 8006cca:	e7f7      	b.n	8006cbc <touchpad_read+0x2c>
 8006ccc:	2000058c 	.word	0x2000058c
 8006cd0:	200005b8 	.word	0x200005b8
 8006cd4:	200005ba 	.word	0x200005ba

08006cd8 <touchpad_init>:
{
 8006cd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    BSP_TS_Init(TFT_HOR_RES, TFT_VER_RES);
 8006cda:	f44f 7188 	mov.w	r1, #272	; 0x110
 8006cde:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8006ce2:	f7ff fbe9 	bl	80064b8 <BSP_TS_Init>
    lv_indev_drv_init(&indev_drv);                  /*Basic initialization*/
 8006ce6:	a801      	add	r0, sp, #4
 8006ce8:	f006 fbc4 	bl	800d474 <lv_indev_drv_init>
    indev_drv.type = LV_INDEV_TYPE_POINTER;         /*The touchpad is pointer type device*/
 8006cec:	2301      	movs	r3, #1
    lv_indev_drv_register(&indev_drv);
 8006cee:	a801      	add	r0, sp, #4
    indev_drv.type = LV_INDEV_TYPE_POINTER;         /*The touchpad is pointer type device*/
 8006cf0:	f88d 3004 	strb.w	r3, [sp, #4]
    indev_drv.read = touchpad_read;
 8006cf4:	4b03      	ldr	r3, [pc, #12]	; (8006d04 <touchpad_init+0x2c>)
 8006cf6:	9302      	str	r3, [sp, #8]
    lv_indev_drv_register(&indev_drv);
 8006cf8:	f006 fbc2 	bl	800d480 <lv_indev_drv_register>
}
 8006cfc:	b005      	add	sp, #20
 8006cfe:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d02:	bf00      	nop
 8006d04:	08006c91 	.word	0x08006c91

08006d08 <keyboard_hide_action>:
 * Called when the close or ok button is pressed on the keyboard
 * @param keyboard pointer to the keyboard
 * @return
 */
static lv_res_t keyboard_hide_action(lv_obj_t * keyboard)
{
 8006d08:	b513      	push	{r0, r1, r4, lr}
    (void) keyboard;    /*Unused*/

#if USE_LV_ANIMATION
    lv_obj_animate(kb, LV_ANIM_FLOAT_BOTTOM | LV_ANIM_OUT, 300, 0, (void(*)(lv_obj_t *))lv_obj_del);
 8006d0a:	4b07      	ldr	r3, [pc, #28]	; (8006d28 <keyboard_hide_action+0x20>)
 8006d0c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006d10:	4c06      	ldr	r4, [pc, #24]	; (8006d2c <keyboard_hide_action+0x24>)
 8006d12:	2183      	movs	r1, #131	; 0x83
 8006d14:	9300      	str	r3, [sp, #0]
 8006d16:	2300      	movs	r3, #0
 8006d18:	6820      	ldr	r0, [r4, #0]
 8006d1a:	f001 fec5 	bl	8008aa8 <lv_obj_animate>
    kb = NULL;
 8006d1e:	2300      	movs	r3, #0
#else
    lv_obj_del(kb);
    kb = NULL;
    return LV_RES_INV;
#endif
}
 8006d20:	2001      	movs	r0, #1
    kb = NULL;
 8006d22:	6023      	str	r3, [r4, #0]
}
 8006d24:	b002      	add	sp, #8
 8006d26:	bd10      	pop	{r4, pc}
 8006d28:	08008355 	.word	0x08008355
 8006d2c:	200005c0 	.word	0x200005c0

08006d30 <keyboard_open_close>:
{
 8006d30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    lv_obj_t * parent = lv_obj_get_parent(lv_obj_get_parent(ta));   /*Test area is on the scrollable part of the page but we need the page itself*/
 8006d34:	4e29      	ldr	r6, [pc, #164]	; (8006ddc <keyboard_open_close+0xac>)
    if(kb) {
 8006d36:	4c2a      	ldr	r4, [pc, #168]	; (8006de0 <keyboard_open_close+0xb0>)
    lv_obj_t * parent = lv_obj_get_parent(lv_obj_get_parent(ta));   /*Test area is on the scrollable part of the page but we need the page itself*/
 8006d38:	6830      	ldr	r0, [r6, #0]
 8006d3a:	f001 ff41 	bl	8008bc0 <lv_obj_get_parent>
 8006d3e:	f001 ff3f 	bl	8008bc0 <lv_obj_get_parent>
    if(kb) {
 8006d42:	6825      	ldr	r5, [r4, #0]
    lv_obj_t * parent = lv_obj_get_parent(lv_obj_get_parent(ta));   /*Test area is on the scrollable part of the page but we need the page itself*/
 8006d44:	4607      	mov	r7, r0
    if(kb) {
 8006d46:	b12d      	cbz	r5, 8006d54 <keyboard_open_close+0x24>
        return keyboard_hide_action(kb);
 8006d48:	4628      	mov	r0, r5
}
 8006d4a:	b003      	add	sp, #12
 8006d4c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return keyboard_hide_action(kb);
 8006d50:	f7ff bfda 	b.w	8006d08 <keyboard_hide_action>
        kb = lv_kb_create(parent, NULL);
 8006d54:	4629      	mov	r1, r5
 8006d56:	f00a f9ad 	bl	80110b4 <lv_kb_create>
 8006d5a:	4680      	mov	r8, r0
 8006d5c:	6020      	str	r0, [r4, #0]
 * @param page pointer to a page object
 * @return the width of the scrollable
 */
static inline lv_coord_t lv_page_get_scrl_width(const lv_obj_t *page)
{
    return lv_obj_get_width(lv_page_get_scrl(page));
 8006d5e:	4638      	mov	r0, r7
 8006d60:	f00c fa29 	bl	80131b6 <lv_page_get_scrl>
 8006d64:	f001 ffb2 	bl	8008ccc <lv_obj_get_width>
 8006d68:	4681      	mov	r9, r0
        lv_obj_set_size(kb, lv_page_get_scrl_width(parent), lv_obj_get_height(parent) / 2);
 8006d6a:	4638      	mov	r0, r7
 8006d6c:	2702      	movs	r7, #2
 8006d6e:	f001 ffb3 	bl	8008cd8 <lv_obj_get_height>
 8006d72:	4649      	mov	r1, r9
 8006d74:	fb90 f2f7 	sdiv	r2, r0, r7
 8006d78:	4640      	mov	r0, r8
 8006d7a:	b212      	sxth	r2, r2
 8006d7c:	f001 fcad 	bl	80086da <lv_obj_set_size>
        lv_obj_align(kb, ta, LV_ALIGN_OUT_BOTTOM_MID, 0, 0);
 8006d80:	462b      	mov	r3, r5
 8006d82:	220d      	movs	r2, #13
 8006d84:	6831      	ldr	r1, [r6, #0]
 8006d86:	6820      	ldr	r0, [r4, #0]
 8006d88:	9500      	str	r5, [sp, #0]
 8006d8a:	f001 fce8 	bl	800875e <lv_obj_align>
        lv_kb_set_ta(kb, ta);
 8006d8e:	6831      	ldr	r1, [r6, #0]
 8006d90:	6820      	ldr	r0, [r4, #0]
 8006d92:	f00a fa17 	bl	80111c4 <lv_kb_set_ta>
        lv_kb_set_style(kb, LV_KB_STYLE_BG, &style_kb);
 8006d96:	4629      	mov	r1, r5
 8006d98:	6820      	ldr	r0, [r4, #0]
 8006d9a:	4a12      	ldr	r2, [pc, #72]	; (8006de4 <keyboard_open_close+0xb4>)
 8006d9c:	f00a faf8 	bl	8011390 <lv_kb_set_style>
        lv_kb_set_style(kb, LV_KB_STYLE_BTN_REL, &style_kb_rel);
 8006da0:	6820      	ldr	r0, [r4, #0]
 8006da2:	4a11      	ldr	r2, [pc, #68]	; (8006de8 <keyboard_open_close+0xb8>)
 8006da4:	2101      	movs	r1, #1
 8006da6:	f00a faf3 	bl	8011390 <lv_kb_set_style>
        lv_kb_set_style(kb, LV_KB_STYLE_BTN_PR, &style_kb_pr);
 8006daa:	4a10      	ldr	r2, [pc, #64]	; (8006dec <keyboard_open_close+0xbc>)
 8006dac:	4639      	mov	r1, r7
 8006dae:	6820      	ldr	r0, [r4, #0]
 8006db0:	f00a faee 	bl	8011390 <lv_kb_set_style>
        lv_kb_set_hide_action(kb, keyboard_hide_action);
 8006db4:	6820      	ldr	r0, [r4, #0]
 8006db6:	490e      	ldr	r1, [pc, #56]	; (8006df0 <keyboard_open_close+0xc0>)
 8006db8:	f00a fae4 	bl	8011384 <lv_kb_set_hide_action>
        lv_kb_set_ok_action(kb, keyboard_hide_action);
 8006dbc:	6820      	ldr	r0, [r4, #0]
 8006dbe:	490c      	ldr	r1, [pc, #48]	; (8006df0 <keyboard_open_close+0xc0>)
 8006dc0:	f00a fada 	bl	8011378 <lv_kb_set_ok_action>
        lv_obj_animate(kb, LV_ANIM_FLOAT_BOTTOM | LV_ANIM_IN, 300, 0, NULL);
 8006dc4:	6820      	ldr	r0, [r4, #0]
 8006dc6:	9500      	str	r5, [sp, #0]
 8006dc8:	462b      	mov	r3, r5
 8006dca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006dce:	2103      	movs	r1, #3
 8006dd0:	f001 fe6a 	bl	8008aa8 <lv_obj_animate>
}
 8006dd4:	2001      	movs	r0, #1
 8006dd6:	b003      	add	sp, #12
 8006dd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ddc:	2000096c 	.word	0x2000096c
 8006de0:	200005c0 	.word	0x200005c0
 8006de4:	2000072c 	.word	0x2000072c
 8006de8:	200007bc 	.word	0x200007bc
 8006dec:	20000774 	.word	0x20000774
 8006df0:	08006d09 	.word	0x08006d09

08006df4 <list_btn_action>:
 * Called when a a list button is clicked on the List tab
 * @param btn pointer to a list button
 * @return LV_RES_OK because the button is not deleted in the function
 */
static lv_res_t list_btn_action(lv_obj_t * btn)
{
 8006df4:	b538      	push	{r3, r4, r5, lr}
    lv_ta_add_char(ta, '\n');
 8006df6:	4c08      	ldr	r4, [pc, #32]	; (8006e18 <list_btn_action+0x24>)
{
 8006df8:	4605      	mov	r5, r0
    lv_ta_add_char(ta, '\n');
 8006dfa:	210a      	movs	r1, #10
 8006dfc:	6820      	ldr	r0, [r4, #0]
 8006dfe:	f00d fdf1 	bl	80149e4 <lv_ta_add_char>
    lv_ta_add_text(ta, lv_list_get_btn_text(btn));
 8006e02:	6824      	ldr	r4, [r4, #0]
 8006e04:	4628      	mov	r0, r5
 8006e06:	f00b f9fb 	bl	8012200 <lv_list_get_btn_text>
 8006e0a:	4601      	mov	r1, r0
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	f00d fe8f 	bl	8014b30 <lv_ta_add_text>

    return LV_RES_OK;
}
 8006e12:	2001      	movs	r0, #1
 8006e14:	bd38      	pop	{r3, r4, r5, pc}
 8006e16:	bf00      	nop
 8006e18:	2000096c 	.word	0x2000096c

08006e1c <slider_action>:
{
 8006e1c:	b508      	push	{r3, lr}
    int16_t v = lv_slider_get_value(slider);
 8006e1e:	f00c fe25 	bl	8013a6c <lv_slider_get_value>
    v = 1000 * 100 / v; /*Convert to range modify values linearly*/
 8006e22:	4a05      	ldr	r2, [pc, #20]	; (8006e38 <slider_action+0x1c>)
    lv_chart_set_range(chart, 0, v);
 8006e24:	4b05      	ldr	r3, [pc, #20]	; (8006e3c <slider_action+0x20>)
 8006e26:	2100      	movs	r1, #0
    v = 1000 * 100 / v; /*Convert to range modify values linearly*/
 8006e28:	fb92 f2f0 	sdiv	r2, r2, r0
    lv_chart_set_range(chart, 0, v);
 8006e2c:	6818      	ldr	r0, [r3, #0]
 8006e2e:	b212      	sxth	r2, r2
 8006e30:	f009 fae8 	bl	8010404 <lv_chart_set_range>
}
 8006e34:	2001      	movs	r0, #1
 8006e36:	bd08      	pop	{r3, pc}
 8006e38:	000186a0 	.word	0x000186a0
 8006e3c:	200005bc 	.word	0x200005bc

08006e40 <demo_create>:
{
 8006e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e44:	b085      	sub	sp, #20
    lv_style_copy(&style_tv_btn_bg, &lv_style_plain);
 8006e46:	4fe5      	ldr	r7, [pc, #916]	; (80071dc <demo_create+0x39c>)
    lv_obj_t * wp = lv_img_create(lv_scr_act(), NULL);
 8006e48:	f001 fea8 	bl	8008b9c <lv_scr_act>
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	f00a f875 	bl	8010f3c <lv_img_create>
 8006e52:	4680      	mov	r8, r0
    lv_img_set_src(wp, &img_bubble_pattern);
 8006e54:	49e2      	ldr	r1, [pc, #904]	; (80071e0 <demo_create+0x3a0>)
    style_tv_btn_bg.body.padding.ver = 0;
 8006e56:	2400      	movs	r4, #0
    lv_img_set_src(wp, &img_bubble_pattern);
 8006e58:	f009 fff0 	bl	8010e3c <lv_img_set_src>
    lv_obj_set_width(wp, LV_HOR_RES * 4);
 8006e5c:	4640      	mov	r0, r8
 8006e5e:	f44f 61f0 	mov.w	r1, #1920	; 0x780
    style_tv_btn_bg.body.main_color = LV_COLOR_HEX(0x487fb7);
 8006e62:	25ff      	movs	r5, #255	; 0xff
    lv_obj_set_width(wp, LV_HOR_RES * 4);
 8006e64:	f001 fc6c 	bl	8008740 <lv_obj_set_width>
    lv_obj_set_protect(wp, LV_PROTECT_POS);
 8006e68:	4640      	mov	r0, r8
 8006e6a:	2104      	movs	r1, #4
    style_tv_btn_bg.body.main_color = LV_COLOR_HEX(0x487fb7);
 8006e6c:	f04f 0b7f 	mov.w	fp, #127	; 0x7f
    lv_obj_set_protect(wp, LV_PROTECT_POS);
 8006e70:	f001 fdf5 	bl	8008a5e <lv_obj_set_protect>
    lv_style_copy(&style_tv_btn_bg, &lv_style_plain);
 8006e74:	4638      	mov	r0, r7
 8006e76:	49db      	ldr	r1, [pc, #876]	; (80071e4 <demo_create+0x3a4>)
 8006e78:	f002 fc5c 	bl	8009734 <lv_style_copy>
    style_tv_btn_bg.body.main_color = LV_COLOR_HEX(0x487fb7);
 8006e7c:	2348      	movs	r3, #72	; 0x48
 8006e7e:	22b7      	movs	r2, #183	; 0xb7
    lv_style_copy(&style_tv_btn_rel, &lv_style_btn_rel);
 8006e80:	49d9      	ldr	r1, [pc, #868]	; (80071e8 <demo_create+0x3a8>)
    style_tv_btn_bg.body.main_color = LV_COLOR_HEX(0x487fb7);
 8006e82:	71bb      	strb	r3, [r7, #6]
    style_tv_btn_bg.body.grad_color = LV_COLOR_HEX(0x487fb7);
 8006e84:	72bb      	strb	r3, [r7, #10]
    lv_style_copy(&style_tv_btn_rel, &lv_style_btn_rel);
 8006e86:	4bd9      	ldr	r3, [pc, #868]	; (80071ec <demo_create+0x3ac>)
    style_tv_btn_bg.body.main_color = LV_COLOR_HEX(0x487fb7);
 8006e88:	713a      	strb	r2, [r7, #4]
    lv_style_copy(&style_tv_btn_rel, &lv_style_btn_rel);
 8006e8a:	4618      	mov	r0, r3
    style_tv_btn_bg.body.main_color = LV_COLOR_HEX(0x487fb7);
 8006e8c:	f887 b005 	strb.w	fp, [r7, #5]
 8006e90:	71fd      	strb	r5, [r7, #7]
    style_tv_btn_bg.body.grad_color = LV_COLOR_HEX(0x487fb7);
 8006e92:	723a      	strb	r2, [r7, #8]
 8006e94:	f887 b009 	strb.w	fp, [r7, #9]
 8006e98:	72fd      	strb	r5, [r7, #11]
    style_tv_btn_bg.body.padding.ver = 0;
 8006e9a:	843c      	strh	r4, [r7, #32]
    lv_style_copy(&style_tv_btn_rel, &lv_style_btn_rel);
 8006e9c:	9302      	str	r3, [sp, #8]
 8006e9e:	f002 fc49 	bl	8009734 <lv_style_copy>
    style_tv_btn_rel.body.empty = 1;
 8006ea2:	9b02      	ldr	r3, [sp, #8]
    lv_style_copy(&style_tv_btn_pr, &lv_style_btn_pr);
 8006ea4:	4ed2      	ldr	r6, [pc, #840]	; (80071f0 <demo_create+0x3b0>)
    style_tv_btn_rel.body.empty = 1;
 8006ea6:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
    lv_style_copy(&style_tv_btn_pr, &lv_style_btn_pr);
 8006eaa:	49d2      	ldr	r1, [pc, #840]	; (80071f4 <demo_create+0x3b4>)
 8006eac:	4630      	mov	r0, r6
    style_tv_btn_rel.body.empty = 1;
 8006eae:	f042 0201 	orr.w	r2, r2, #1
    style_tv_btn_rel.body.border.width = 0;
 8006eb2:	829c      	strh	r4, [r3, #20]
 8006eb4:	9303      	str	r3, [sp, #12]
    style_tv_btn_rel.body.empty = 1;
 8006eb6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    lv_style_copy(&style_tv_btn_pr, &lv_style_btn_pr);
 8006eba:	f002 fc3b 	bl	8009734 <lv_style_copy>
    style_tv_btn_pr.text.color = LV_COLOR_GRAY;
 8006ebe:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    style_tv_btn_pr.body.radius = 0;
 8006ec2:	81b4      	strh	r4, [r6, #12]
    style_tv_btn_pr.body.opa = LV_OPA_50;
 8006ec4:	f886 b00e 	strb.w	fp, [r6, #14]
    style_tv_btn_pr.text.color = LV_COLOR_GRAY;
 8006ec8:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
 8006ecc:	f886 3029 	strb.w	r3, [r6, #41]	; 0x29
 8006ed0:	f886 302a 	strb.w	r3, [r6, #42]	; 0x2a
    style_tv_btn_pr.body.main_color = LV_COLOR_WHITE;
 8006ed4:	7135      	strb	r5, [r6, #4]
 8006ed6:	7175      	strb	r5, [r6, #5]
 8006ed8:	71b5      	strb	r5, [r6, #6]
 8006eda:	71f5      	strb	r5, [r6, #7]
    style_tv_btn_pr.body.grad_color = LV_COLOR_WHITE;
 8006edc:	7235      	strb	r5, [r6, #8]
 8006ede:	7275      	strb	r5, [r6, #9]
 8006ee0:	72b5      	strb	r5, [r6, #10]
 8006ee2:	72f5      	strb	r5, [r6, #11]
    style_tv_btn_pr.body.border.width = 0;
 8006ee4:	82b4      	strh	r4, [r6, #20]
    style_tv_btn_pr.text.color = LV_COLOR_GRAY;
 8006ee6:	f886 502b 	strb.w	r5, [r6, #43]	; 0x2b
    lv_obj_t * tv = lv_tabview_create(lv_scr_act(), NULL);
 8006eea:	f001 fe57 	bl	8008b9c <lv_scr_act>
 8006eee:	4621      	mov	r1, r4
 8006ef0:	f00e fc88 	bl	8015804 <lv_tabview_create>
    lv_obj_set_parent(wp, ((lv_tabview_ext_t *) tv->ext_attr)->content);
 8006ef4:	6a02      	ldr	r2, [r0, #32]
    lv_obj_t * tv = lv_tabview_create(lv_scr_act(), NULL);
 8006ef6:	4681      	mov	r9, r0
    lv_obj_set_parent(wp, ((lv_tabview_ext_t *) tv->ext_attr)->content);
 8006ef8:	4640      	mov	r0, r8
 8006efa:	6891      	ldr	r1, [r2, #8]
 8006efc:	f001 fbaa 	bl	8008654 <lv_obj_set_parent>
    lv_obj_set_pos(wp, 0, -5);
 8006f00:	f06f 0204 	mvn.w	r2, #4
 8006f04:	4621      	mov	r1, r4
 8006f06:	4640      	mov	r0, r8
 8006f08:	f001 fa70 	bl	80083ec <lv_obj_set_pos>
    lv_obj_t * tab1 = lv_tabview_add_tab(tv, "Write");
 8006f0c:	49ba      	ldr	r1, [pc, #744]	; (80071f8 <demo_create+0x3b8>)
 8006f0e:	4648      	mov	r0, r9
 8006f10:	f00e fb88 	bl	8015624 <lv_tabview_add_tab>
    lv_obj_t * tab2 = lv_tabview_add_tab(tv, "List");
 8006f14:	49b9      	ldr	r1, [pc, #740]	; (80071fc <demo_create+0x3bc>)
    lv_obj_t * tab1 = lv_tabview_add_tab(tv, "Write");
 8006f16:	4682      	mov	sl, r0
    lv_obj_t * tab2 = lv_tabview_add_tab(tv, "List");
 8006f18:	4648      	mov	r0, r9
 8006f1a:	f00e fb83 	bl	8015624 <lv_tabview_add_tab>
    lv_obj_t * tab3 = lv_tabview_add_tab(tv, "Chart");
 8006f1e:	49b8      	ldr	r1, [pc, #736]	; (8007200 <demo_create+0x3c0>)
    lv_obj_t * tab2 = lv_tabview_add_tab(tv, "List");
 8006f20:	4680      	mov	r8, r0
    lv_obj_t * tab3 = lv_tabview_add_tab(tv, "Chart");
 8006f22:	4648      	mov	r0, r9
 8006f24:	f00e fb7e 	bl	8015624 <lv_tabview_add_tab>
    lv_tabview_set_style(tv, LV_TABVIEW_STYLE_BTN_BG, &style_tv_btn_bg);
 8006f28:	463a      	mov	r2, r7
    lv_obj_t * tab3 = lv_tabview_add_tab(tv, "Chart");
 8006f2a:	9002      	str	r0, [sp, #8]
    lv_tabview_set_style(tv, LV_TABVIEW_STYLE_BTN_BG, &style_tv_btn_bg);
 8006f2c:	2102      	movs	r1, #2
 8006f2e:	4648      	mov	r0, r9
    ta = lv_ta_create(parent, NULL);
 8006f30:	4fb4      	ldr	r7, [pc, #720]	; (8007204 <demo_create+0x3c4>)
    lv_tabview_set_style(tv, LV_TABVIEW_STYLE_BTN_BG, &style_tv_btn_bg);
 8006f32:	f00e fc2d 	bl	8015790 <lv_tabview_set_style>
    lv_tabview_set_style(tv, LV_TABVIEW_STYLE_INDIC, &lv_style_plain);
 8006f36:	4648      	mov	r0, r9
 8006f38:	4aaa      	ldr	r2, [pc, #680]	; (80071e4 <demo_create+0x3a4>)
 8006f3a:	2101      	movs	r1, #1
 8006f3c:	f00e fc28 	bl	8015790 <lv_tabview_set_style>
    lv_tabview_set_style(tv, LV_TABVIEW_STYLE_BTN_REL, &style_tv_btn_rel);
 8006f40:	9b03      	ldr	r3, [sp, #12]
 8006f42:	4648      	mov	r0, r9
 8006f44:	2103      	movs	r1, #3
 8006f46:	461a      	mov	r2, r3
 8006f48:	f00e fc22 	bl	8015790 <lv_tabview_set_style>
    lv_tabview_set_style(tv, LV_TABVIEW_STYLE_BTN_PR, &style_tv_btn_pr);
 8006f4c:	4632      	mov	r2, r6
 8006f4e:	4648      	mov	r0, r9
 8006f50:	2104      	movs	r1, #4
 8006f52:	f00e fc1d 	bl	8015790 <lv_tabview_set_style>
    lv_tabview_set_style(tv, LV_TABVIEW_STYLE_BTN_TGL_REL, &style_tv_btn_rel);
 8006f56:	9b03      	ldr	r3, [sp, #12]
 8006f58:	4648      	mov	r0, r9
 8006f5a:	2105      	movs	r1, #5
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	f00e fc17 	bl	8015790 <lv_tabview_set_style>
    lv_tabview_set_style(tv, LV_TABVIEW_STYLE_BTN_TGL_PR, &style_tv_btn_pr);
 8006f62:	4632      	mov	r2, r6
 8006f64:	4648      	mov	r0, r9
 8006f66:	2106      	movs	r1, #6
 8006f68:	f00e fc12 	bl	8015790 <lv_tabview_set_style>
    lv_page_set_style(parent, LV_PAGE_STYLE_BG, &lv_style_transp_fit);
 8006f6c:	4621      	mov	r1, r4
 8006f6e:	4650      	mov	r0, sl
 8006f70:	4aa5      	ldr	r2, [pc, #660]	; (8007208 <demo_create+0x3c8>)
    lv_style_copy(&style_ta, &lv_style_pretty);
 8006f72:	4ea6      	ldr	r6, [pc, #664]	; (800720c <demo_create+0x3cc>)
    lv_page_set_style(parent, LV_PAGE_STYLE_BG, &lv_style_transp_fit);
 8006f74:	f00c f8f1 	bl	801315a <lv_page_set_style>
    lv_page_set_style(parent, LV_PAGE_STYLE_SCRL, &lv_style_transp_fit);
 8006f78:	4aa3      	ldr	r2, [pc, #652]	; (8007208 <demo_create+0x3c8>)
 8006f7a:	4650      	mov	r0, sl
 8006f7c:	2101      	movs	r1, #1
 8006f7e:	f00c f8ec 	bl	801315a <lv_page_set_style>
    lv_page_set_sb_mode(parent, LV_SB_MODE_OFF);
 8006f82:	4621      	mov	r1, r4
 8006f84:	4650      	mov	r0, sl
 8006f86:	f00c f8ab 	bl	80130e0 <lv_page_set_sb_mode>
    lv_style_copy(&style_ta, &lv_style_pretty);
 8006f8a:	4630      	mov	r0, r6
 8006f8c:	49a0      	ldr	r1, [pc, #640]	; (8007210 <demo_create+0x3d0>)
 8006f8e:	f002 fbd1 	bl	8009734 <lv_style_copy>
    style_ta.body.opa = LV_OPA_30;
 8006f92:	234c      	movs	r3, #76	; 0x4c
    ta = lv_ta_create(parent, NULL);
 8006f94:	4621      	mov	r1, r4
 8006f96:	4650      	mov	r0, sl
    style_ta.body.opa = LV_OPA_30;
 8006f98:	73b3      	strb	r3, [r6, #14]
    style_ta.text.color = LV_COLOR_HEX3(0x222);
 8006f9a:	2322      	movs	r3, #34	; 0x22
    style_ta.body.radius = 0;
 8006f9c:	81b4      	strh	r4, [r6, #12]
    style_ta.text.color = LV_COLOR_HEX3(0x222);
 8006f9e:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
 8006fa2:	f886 3029 	strb.w	r3, [r6, #41]	; 0x29
 8006fa6:	f886 302a 	strb.w	r3, [r6, #42]	; 0x2a
 8006faa:	f886 502b 	strb.w	r5, [r6, #43]	; 0x2b
    ta = lv_ta_create(parent, NULL);
 8006fae:	f00d fa7d 	bl	80144ac <lv_ta_create>
 8006fb2:	4681      	mov	r9, r0
 8006fb4:	6038      	str	r0, [r7, #0]
 8006fb6:	4650      	mov	r0, sl
 8006fb8:	f00c f8fd 	bl	80131b6 <lv_page_get_scrl>
 8006fbc:	f001 fe86 	bl	8008ccc <lv_obj_get_width>
 8006fc0:	9003      	str	r0, [sp, #12]
    lv_obj_set_size(ta, lv_page_get_scrl_width(parent), lv_obj_get_height(parent) / 2);
 8006fc2:	4650      	mov	r0, sl
    lv_style_copy(&style_kb_rel, &lv_style_plain);
 8006fc4:	f8df a25c 	ldr.w	sl, [pc, #604]	; 8007224 <demo_create+0x3e4>
    lv_obj_set_size(ta, lv_page_get_scrl_width(parent), lv_obj_get_height(parent) / 2);
 8006fc8:	f001 fe86 	bl	8008cd8 <lv_obj_get_height>
 8006fcc:	2302      	movs	r3, #2
 8006fce:	9903      	ldr	r1, [sp, #12]
 8006fd0:	fb90 f2f3 	sdiv	r2, r0, r3
 8006fd4:	4648      	mov	r0, r9
 8006fd6:	b212      	sxth	r2, r2
 8006fd8:	f001 fb7f 	bl	80086da <lv_obj_set_size>
    lv_ta_set_style(ta, LV_TA_STYLE_BG, &style_ta);
 8006fdc:	4632      	mov	r2, r6
 8006fde:	4621      	mov	r1, r4
 8006fe0:	6838      	ldr	r0, [r7, #0]
    lv_style_copy(&style_kb, &lv_style_plain);
 8006fe2:	f8df 9244 	ldr.w	r9, [pc, #580]	; 8007228 <demo_create+0x3e8>
    lv_ta_set_style(ta, LV_TA_STYLE_BG, &style_ta);
 8006fe6:	f00d fa43 	bl	8014470 <lv_ta_set_style>
    lv_ta_set_text(ta, "");
 8006fea:	6838      	ldr	r0, [r7, #0]
    style_kb.body.main_color = LV_COLOR_HEX3(0x333);
 8006fec:	2633      	movs	r6, #51	; 0x33
    lv_ta_set_text(ta, "");
 8006fee:	4989      	ldr	r1, [pc, #548]	; (8007214 <demo_create+0x3d4>)
 8006ff0:	f00d fe2a 	bl	8014c48 <lv_ta_set_text>
    lv_page_set_rel_action(ta, keyboard_open_close);
 8006ff4:	6838      	ldr	r0, [r7, #0]
 8006ff6:	4988      	ldr	r1, [pc, #544]	; (8007218 <demo_create+0x3d8>)
 8006ff8:	f00c f866 	bl	80130c8 <lv_page_set_rel_action>
    lv_style_copy(&style_kb, &lv_style_plain);
 8006ffc:	4648      	mov	r0, r9
 8006ffe:	4979      	ldr	r1, [pc, #484]	; (80071e4 <demo_create+0x3a4>)
 8007000:	f002 fb98 	bl	8009734 <lv_style_copy>
    style_kb.body.opa = LV_OPA_70;
 8007004:	f06f 034d 	mvn.w	r3, #77	; 0x4d
    lv_style_copy(&style_kb_rel, &lv_style_plain);
 8007008:	4650      	mov	r0, sl
 800700a:	4976      	ldr	r1, [pc, #472]	; (80071e4 <demo_create+0x3a4>)
    style_kb.body.opa = LV_OPA_70;
 800700c:	f889 300e 	strb.w	r3, [r9, #14]
    style_kb.body.main_color = LV_COLOR_HEX3(0x333);
 8007010:	f889 6004 	strb.w	r6, [r9, #4]
 8007014:	f889 6005 	strb.w	r6, [r9, #5]
 8007018:	f889 6006 	strb.w	r6, [r9, #6]
 800701c:	f889 5007 	strb.w	r5, [r9, #7]
    style_kb.body.grad_color = LV_COLOR_HEX3(0x333);
 8007020:	f889 6008 	strb.w	r6, [r9, #8]
 8007024:	f889 6009 	strb.w	r6, [r9, #9]
 8007028:	f889 600a 	strb.w	r6, [r9, #10]
 800702c:	f889 500b 	strb.w	r5, [r9, #11]
    style_kb.body.padding.hor = 0;
 8007030:	f8a9 4022 	strh.w	r4, [r9, #34]	; 0x22
    style_kb.body.padding.ver = 0;
 8007034:	f8a9 4020 	strh.w	r4, [r9, #32]
    style_kb.body.padding.inner = 0;
 8007038:	f8a9 4024 	strh.w	r4, [r9, #36]	; 0x24
    lv_style_copy(&style_kb_rel, &lv_style_plain);
 800703c:	f002 fb7a 	bl	8009734 <lv_style_copy>
    style_kb_rel.body.empty = 1;
 8007040:	f89a 3026 	ldrb.w	r3, [sl, #38]	; 0x26
    style_kb_rel.body.border.color = LV_COLOR_SILVER;
 8007044:	f04f 09c0 	mov.w	r9, #192	; 0xc0
    style_kb_rel.body.radius = 0;
 8007048:	f8aa 400c 	strh.w	r4, [sl, #12]
    style_kb_rel.body.empty = 1;
 800704c:	f043 0301 	orr.w	r3, r3, #1
    style_kb_rel.body.border.color = LV_COLOR_SILVER;
 8007050:	f88a 9010 	strb.w	r9, [sl, #16]
 8007054:	f88a 9011 	strb.w	r9, [sl, #17]
    style_kb_rel.body.empty = 1;
 8007058:	f88a 3026 	strb.w	r3, [sl, #38]	; 0x26
    style_kb_rel.body.border.width = 1;
 800705c:	f04f 0301 	mov.w	r3, #1
    style_kb_rel.body.border.color = LV_COLOR_SILVER;
 8007060:	f88a 9012 	strb.w	r9, [sl, #18]
    style_kb_rel.body.border.width = 1;
 8007064:	f8aa 3014 	strh.w	r3, [sl, #20]
    style_kb_rel.body.border.color = LV_COLOR_SILVER;
 8007068:	f88a 5013 	strb.w	r5, [sl, #19]
    style_kb_rel.body.border.opa = LV_OPA_50;
 800706c:	f88a b017 	strb.w	fp, [sl, #23]
    style_kb_rel.body.main_color = LV_COLOR_HEX3(0x333);    /*Recommended if LV_VDB_SIZE == 0 and bpp > 1 fonts are used*/
 8007070:	f88a 6004 	strb.w	r6, [sl, #4]
 8007074:	f88a 6005 	strb.w	r6, [sl, #5]
 8007078:	f88a 6006 	strb.w	r6, [sl, #6]
 800707c:	f88a 5007 	strb.w	r5, [sl, #7]
    style_kb_rel.body.grad_color = LV_COLOR_HEX3(0x333);
 8007080:	f88a 6008 	strb.w	r6, [sl, #8]
 8007084:	f88a 6009 	strb.w	r6, [sl, #9]
 8007088:	f88a 600a 	strb.w	r6, [sl, #10]
 800708c:	f88a 500b 	strb.w	r5, [sl, #11]
    style_kb_rel.text.color = LV_COLOR_WHITE;
 8007090:	f88a 5028 	strb.w	r5, [sl, #40]	; 0x28
 8007094:	f88a 5029 	strb.w	r5, [sl, #41]	; 0x29
 8007098:	f88a 502a 	strb.w	r5, [sl, #42]	; 0x2a
 800709c:	f88a 502b 	strb.w	r5, [sl, #43]	; 0x2b
    lv_style_copy(&style_kb_pr, &lv_style_plain);
 80070a0:	f8df a188 	ldr.w	sl, [pc, #392]	; 800722c <demo_create+0x3ec>
 80070a4:	494f      	ldr	r1, [pc, #316]	; (80071e4 <demo_create+0x3a4>)
 80070a6:	4650      	mov	r0, sl
 80070a8:	f002 fb44 	bl	8009734 <lv_style_copy>
    style_kb_pr.body.border.width = 1;
 80070ac:	f04f 0301 	mov.w	r3, #1
    keyboard_open_close(ta);
 80070b0:	6838      	ldr	r0, [r7, #0]
    style_kb_pr.body.border.width = 1;
 80070b2:	f8aa 3014 	strh.w	r3, [sl, #20]
    style_kb_pr.body.radius = 0;
 80070b6:	f8aa 400c 	strh.w	r4, [sl, #12]
    style_kb_pr.body.opa = LV_OPA_50;
 80070ba:	f88a b00e 	strb.w	fp, [sl, #14]
    style_kb_pr.body.main_color = LV_COLOR_WHITE;
 80070be:	f88a 5004 	strb.w	r5, [sl, #4]
 80070c2:	f88a 5005 	strb.w	r5, [sl, #5]
 80070c6:	f88a 5006 	strb.w	r5, [sl, #6]
 80070ca:	f88a 5007 	strb.w	r5, [sl, #7]
    style_kb_pr.body.grad_color = LV_COLOR_WHITE;
 80070ce:	f88a 5008 	strb.w	r5, [sl, #8]
 80070d2:	f88a 5009 	strb.w	r5, [sl, #9]
 80070d6:	f88a 500a 	strb.w	r5, [sl, #10]
 80070da:	f88a 500b 	strb.w	r5, [sl, #11]
    style_kb_pr.body.border.color = LV_COLOR_SILVER;
 80070de:	f88a 9010 	strb.w	r9, [sl, #16]
 80070e2:	f88a 9011 	strb.w	r9, [sl, #17]
 80070e6:	f88a 9012 	strb.w	r9, [sl, #18]
 80070ea:	f88a 5013 	strb.w	r5, [sl, #19]
    keyboard_open_close(ta);
 80070ee:	f7ff fe1f 	bl	8006d30 <keyboard_open_close>
    lv_page_set_style(parent, LV_PAGE_STYLE_BG, &lv_style_transp_fit);
 80070f2:	4621      	mov	r1, r4
 80070f4:	4640      	mov	r0, r8
 80070f6:	4a44      	ldr	r2, [pc, #272]	; (8007208 <demo_create+0x3c8>)
 80070f8:	f00c f82f 	bl	801315a <lv_page_set_style>
    lv_page_set_style(parent, LV_PAGE_STYLE_SCRL, &lv_style_transp_fit);
 80070fc:	4a42      	ldr	r2, [pc, #264]	; (8007208 <demo_create+0x3c8>)
 80070fe:	2101      	movs	r1, #1
 8007100:	4640      	mov	r0, r8
 8007102:	f00c f82a 	bl	801315a <lv_page_set_style>
    lv_cont_set_fit(lv_page_get_scrl(page), hor_en, ver_en);
 8007106:	4640      	mov	r0, r8
 8007108:	f00c f855 	bl	80131b6 <lv_page_get_scrl>
 800710c:	4622      	mov	r2, r4
 800710e:	4621      	mov	r1, r4
 8007110:	f009 faeb 	bl	80106ea <lv_cont_set_fit>
    lv_page_set_scrl_height(parent, lv_obj_get_height(parent));
 8007114:	4640      	mov	r0, r8
 8007116:	f001 fddf 	bl	8008cd8 <lv_obj_get_height>
 800711a:	4607      	mov	r7, r0
    lv_obj_set_height(lv_page_get_scrl(page), h);
 800711c:	4640      	mov	r0, r8
 800711e:	f00c f84a 	bl	80131b6 <lv_page_get_scrl>
 8007122:	4639      	mov	r1, r7
    lv_style_copy(&style_btn_rel, &lv_style_btn_rel);
 8007124:	4f3d      	ldr	r7, [pc, #244]	; (800721c <demo_create+0x3dc>)
 8007126:	f001 fb12 	bl	800874e <lv_obj_set_height>
    lv_page_set_sb_mode(parent, LV_SB_MODE_OFF);
 800712a:	4621      	mov	r1, r4
 800712c:	4640      	mov	r0, r8
 800712e:	f00b ffd7 	bl	80130e0 <lv_page_set_sb_mode>
    lv_style_copy(&style_btn_rel, &lv_style_btn_rel);
 8007132:	4638      	mov	r0, r7
 8007134:	492c      	ldr	r1, [pc, #176]	; (80071e8 <demo_create+0x3a8>)
 8007136:	f002 fafd 	bl	8009734 <lv_style_copy>
    style_btn_rel.body.main_color = LV_COLOR_HEX3(0x333);
 800713a:	713e      	strb	r6, [r7, #4]
 800713c:	717e      	strb	r6, [r7, #5]
    style_btn_rel.body.border.width = 1;
 800713e:	f04f 0301 	mov.w	r3, #1
    style_btn_rel.body.main_color = LV_COLOR_HEX3(0x333);
 8007142:	71be      	strb	r6, [r7, #6]
    lv_style_copy(&style_btn_pr, &style_btn_rel);
 8007144:	4639      	mov	r1, r7
 8007146:	4e36      	ldr	r6, [pc, #216]	; (8007220 <demo_create+0x3e0>)
    style_btn_rel.body.main_color = LV_COLOR_HEX3(0x333);
 8007148:	71fd      	strb	r5, [r7, #7]
    lv_style_copy(&style_btn_pr, &style_btn_rel);
 800714a:	4630      	mov	r0, r6
    style_btn_rel.body.grad_color = LV_COLOR_BLACK;
 800714c:	723c      	strb	r4, [r7, #8]
 800714e:	727c      	strb	r4, [r7, #9]
 8007150:	72bc      	strb	r4, [r7, #10]
 8007152:	72fd      	strb	r5, [r7, #11]
    style_btn_rel.body.border.color = LV_COLOR_SILVER;
 8007154:	f887 9010 	strb.w	r9, [r7, #16]
 8007158:	f887 9011 	strb.w	r9, [r7, #17]
 800715c:	f887 9012 	strb.w	r9, [r7, #18]
    lv_obj_set_height(list, 2 * lv_obj_get_height(parent) / 3);
 8007160:	f04f 0903 	mov.w	r9, #3
    style_btn_rel.body.border.color = LV_COLOR_SILVER;
 8007164:	74fd      	strb	r5, [r7, #19]
    style_btn_rel.body.border.width = 1;
 8007166:	82bb      	strh	r3, [r7, #20]
    style_btn_rel.body.border.opa = LV_OPA_50;
 8007168:	f887 b017 	strb.w	fp, [r7, #23]
    style_btn_rel.body.radius = 0;
 800716c:	81bc      	strh	r4, [r7, #12]
    lv_style_copy(&style_btn_pr, &style_btn_rel);
 800716e:	f002 fae1 	bl	8009734 <lv_style_copy>
    style_btn_pr.body.main_color = LV_COLOR_MAKE(0x55, 0x96, 0xd8);
 8007172:	23d8      	movs	r3, #216	; 0xd8
    lv_obj_t * list = lv_list_create(parent, NULL);
 8007174:	4621      	mov	r1, r4
 8007176:	4640      	mov	r0, r8
    style_btn_pr.body.main_color = LV_COLOR_MAKE(0x55, 0x96, 0xd8);
 8007178:	71f5      	strb	r5, [r6, #7]
 800717a:	7133      	strb	r3, [r6, #4]
 800717c:	2396      	movs	r3, #150	; 0x96
    style_btn_pr.body.grad_color = LV_COLOR_MAKE(0x37, 0x62, 0x90);
 800717e:	72f5      	strb	r5, [r6, #11]
    style_btn_pr.body.main_color = LV_COLOR_MAKE(0x55, 0x96, 0xd8);
 8007180:	7173      	strb	r3, [r6, #5]
 8007182:	2355      	movs	r3, #85	; 0x55
    style_btn_pr.text.color = LV_COLOR_MAKE(0xbb, 0xd5, 0xf1);
 8007184:	f886 502b 	strb.w	r5, [r6, #43]	; 0x2b
    style_btn_pr.body.main_color = LV_COLOR_MAKE(0x55, 0x96, 0xd8);
 8007188:	71b3      	strb	r3, [r6, #6]
    style_btn_pr.body.grad_color = LV_COLOR_MAKE(0x37, 0x62, 0x90);
 800718a:	2390      	movs	r3, #144	; 0x90
    lv_list_set_style(list, LV_LIST_STYLE_BG, &lv_style_transp_tight);
 800718c:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 8007230 <demo_create+0x3f0>
    style_btn_pr.body.grad_color = LV_COLOR_MAKE(0x37, 0x62, 0x90);
 8007190:	7233      	strb	r3, [r6, #8]
 8007192:	2362      	movs	r3, #98	; 0x62
 8007194:	7273      	strb	r3, [r6, #9]
 8007196:	f04f 0337 	mov.w	r3, #55	; 0x37
 800719a:	72b3      	strb	r3, [r6, #10]
    style_btn_pr.text.color = LV_COLOR_MAKE(0xbb, 0xd5, 0xf1);
 800719c:	23f1      	movs	r3, #241	; 0xf1
 800719e:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
 80071a2:	23d5      	movs	r3, #213	; 0xd5
 80071a4:	f886 3029 	strb.w	r3, [r6, #41]	; 0x29
 80071a8:	23bb      	movs	r3, #187	; 0xbb
 80071aa:	f886 302a 	strb.w	r3, [r6, #42]	; 0x2a
    lv_obj_t * list = lv_list_create(parent, NULL);
 80071ae:	f00b f9eb 	bl	8012588 <lv_list_create>
 80071b2:	4682      	mov	sl, r0
    lv_obj_set_height(list, 2 * lv_obj_get_height(parent) / 3);
 80071b4:	4640      	mov	r0, r8
 80071b6:	f001 fd8f 	bl	8008cd8 <lv_obj_get_height>
 80071ba:	0041      	lsls	r1, r0, #1
 80071bc:	4650      	mov	r0, sl
 80071be:	fb91 f1f9 	sdiv	r1, r1, r9
 80071c2:	b209      	sxth	r1, r1
 80071c4:	f001 fac3 	bl	800874e <lv_obj_set_height>
    lv_list_set_style(list, LV_LIST_STYLE_BG, &lv_style_transp_tight);
 80071c8:	465a      	mov	r2, fp
 80071ca:	4621      	mov	r1, r4
 80071cc:	4650      	mov	r0, sl
 80071ce:	f00b f991 	bl	80124f4 <lv_list_set_style>
    lv_list_set_style(list, LV_LIST_STYLE_SCRL, &lv_style_transp_tight);
 80071d2:	465a      	mov	r2, fp
 80071d4:	4650      	mov	r0, sl
 80071d6:	2101      	movs	r1, #1
 80071d8:	e02c      	b.n	8007234 <demo_create+0x3f4>
 80071da:	bf00      	nop
 80071dc:	20000894 	.word	0x20000894
 80071e0:	2000003c 	.word	0x2000003c
 80071e4:	20017dc0 	.word	0x20017dc0
 80071e8:	20017c10 	.word	0x20017c10
 80071ec:	20000924 	.word	0x20000924
 80071f0:	200008dc 	.word	0x200008dc
 80071f4:	20017c58 	.word	0x20017c58
 80071f8:	08015bf3 	.word	0x08015bf3
 80071fc:	08015bf9 	.word	0x08015bf9
 8007200:	08015bfe 	.word	0x08015bfe
 8007204:	2000096c 	.word	0x2000096c
 8007208:	20017d78 	.word	0x20017d78
 800720c:	2000084c 	.word	0x2000084c
 8007210:	20017ca0 	.word	0x20017ca0
 8007214:	08087e8b 	.word	0x08087e8b
 8007218:	08006d31 	.word	0x08006d31
 800721c:	20000654 	.word	0x20000654
 8007220:	2000060c 	.word	0x2000060c
 8007224:	200007bc 	.word	0x200007bc
 8007228:	2000072c 	.word	0x2000072c
 800722c:	20000774 	.word	0x20000774
 8007230:	20017ce8 	.word	0x20017ce8
 8007234:	f00b f95e 	bl	80124f4 <lv_list_set_style>
    lv_obj_align(list, NULL, LV_ALIGN_IN_TOP_MID, 0, LV_DPI / 4);
 8007238:	f04f 0b19 	mov.w	fp, #25
    lv_list_set_style(list, LV_LIST_STYLE_BTN_REL, &style_btn_rel);
 800723c:	463a      	mov	r2, r7
 800723e:	4649      	mov	r1, r9
 8007240:	4650      	mov	r0, sl
    lv_style_copy(&style_chart, &lv_style_pretty);
 8007242:	4fbe      	ldr	r7, [pc, #760]	; (800753c <demo_create+0x6fc>)
    lv_list_set_style(list, LV_LIST_STYLE_BTN_REL, &style_btn_rel);
 8007244:	f00b f956 	bl	80124f4 <lv_list_set_style>
    lv_list_set_style(list, LV_LIST_STYLE_BTN_PR, &style_btn_pr);
 8007248:	4632      	mov	r2, r6
 800724a:	4650      	mov	r0, sl
    lv_list_add(list, SYMBOL_FILE, "New", list_btn_action);
 800724c:	4ebc      	ldr	r6, [pc, #752]	; (8007540 <demo_create+0x700>)
    lv_list_set_style(list, LV_LIST_STYLE_BTN_PR, &style_btn_pr);
 800724e:	2104      	movs	r1, #4
 8007250:	f00b f950 	bl	80124f4 <lv_list_set_style>
    lv_obj_align(list, NULL, LV_ALIGN_IN_TOP_MID, 0, LV_DPI / 4);
 8007254:	f8cd b000 	str.w	fp, [sp]
 8007258:	4623      	mov	r3, r4
 800725a:	4621      	mov	r1, r4
 800725c:	4650      	mov	r0, sl
 800725e:	2202      	movs	r2, #2
 8007260:	f001 fa7d 	bl	800875e <lv_obj_align>
    lv_list_add(list, SYMBOL_FILE, "New", list_btn_action);
 8007264:	4633      	mov	r3, r6
 8007266:	4ab7      	ldr	r2, [pc, #732]	; (8007544 <demo_create+0x704>)
 8007268:	4650      	mov	r0, sl
 800726a:	49b7      	ldr	r1, [pc, #732]	; (8007548 <demo_create+0x708>)
 800726c:	f00a fee2 	bl	8012034 <lv_list_add>
    lv_list_add(list, SYMBOL_DIRECTORY, "Open", list_btn_action);
 8007270:	4633      	mov	r3, r6
 8007272:	4ab6      	ldr	r2, [pc, #728]	; (800754c <demo_create+0x70c>)
 8007274:	4650      	mov	r0, sl
 8007276:	49b6      	ldr	r1, [pc, #728]	; (8007550 <demo_create+0x710>)
 8007278:	f00a fedc 	bl	8012034 <lv_list_add>
    lv_list_add(list, SYMBOL_TRASH, "Delete", list_btn_action);
 800727c:	4633      	mov	r3, r6
 800727e:	4ab5      	ldr	r2, [pc, #724]	; (8007554 <demo_create+0x714>)
 8007280:	4650      	mov	r0, sl
 8007282:	49b5      	ldr	r1, [pc, #724]	; (8007558 <demo_create+0x718>)
 8007284:	f00a fed6 	bl	8012034 <lv_list_add>
    lv_list_add(list, SYMBOL_EDIT, "Edit", list_btn_action);
 8007288:	4633      	mov	r3, r6
 800728a:	4ab4      	ldr	r2, [pc, #720]	; (800755c <demo_create+0x71c>)
 800728c:	4650      	mov	r0, sl
 800728e:	49b4      	ldr	r1, [pc, #720]	; (8007560 <demo_create+0x720>)
 8007290:	f00a fed0 	bl	8012034 <lv_list_add>
    lv_list_add(list, SYMBOL_SAVE, "Save", list_btn_action);
 8007294:	4633      	mov	r3, r6
 8007296:	4ab3      	ldr	r2, [pc, #716]	; (8007564 <demo_create+0x724>)
 8007298:	4650      	mov	r0, sl
 800729a:	49b3      	ldr	r1, [pc, #716]	; (8007568 <demo_create+0x728>)
 800729c:	f00a feca 	bl	8012034 <lv_list_add>
    lv_list_add(list, SYMBOL_WIFI, "WiFi", list_btn_action);
 80072a0:	4633      	mov	r3, r6
 80072a2:	4ab2      	ldr	r2, [pc, #712]	; (800756c <demo_create+0x72c>)
 80072a4:	4650      	mov	r0, sl
 80072a6:	49b2      	ldr	r1, [pc, #712]	; (8007570 <demo_create+0x730>)
 80072a8:	f00a fec4 	bl	8012034 <lv_list_add>
    lv_list_add(list, SYMBOL_GPS, "GPS", list_btn_action);
 80072ac:	4633      	mov	r3, r6
 80072ae:	4ab1      	ldr	r2, [pc, #708]	; (8007574 <demo_create+0x734>)
 80072b0:	4650      	mov	r0, sl
 80072b2:	49b1      	ldr	r1, [pc, #708]	; (8007578 <demo_create+0x738>)
 80072b4:	f00a febe 	bl	8012034 <lv_list_add>
    lv_obj_t * mbox = lv_mbox_create(parent, NULL);
 80072b8:	4621      	mov	r1, r4
 80072ba:	4640      	mov	r0, r8
 80072bc:	f00b fa8e 	bl	80127dc <lv_mbox_create>
 80072c0:	4606      	mov	r6, r0
    lv_mbox_set_text(mbox, "Click a button to copy its text to the Text area ");
 80072c2:	49ae      	ldr	r1, [pc, #696]	; (800757c <demo_create+0x73c>)
 80072c4:	f00b fbfa 	bl	8012abc <lv_mbox_set_text>
    lv_obj_set_width(mbox, LV_HOR_RES - LV_DPI);
 80072c8:	4630      	mov	r0, r6
 80072ca:	f44f 71be 	mov.w	r1, #380	; 0x17c
 80072ce:	f001 fa37 	bl	8008740 <lv_obj_set_width>
    lv_mbox_add_btns(mbox, mbox_btns, NULL);    /*The default action is close*/
 80072d2:	4622      	mov	r2, r4
 80072d4:	4630      	mov	r0, r6
 80072d6:	49aa      	ldr	r1, [pc, #680]	; (8007580 <demo_create+0x740>)
 80072d8:	f00b fbb2 	bl	8012a40 <lv_mbox_add_btns>
    lv_obj_align(mbox, parent, LV_ALIGN_IN_TOP_MID, 0, LV_DPI / 2);
 80072dc:	2332      	movs	r3, #50	; 0x32
 80072de:	4641      	mov	r1, r8
 80072e0:	4630      	mov	r0, r6
 80072e2:	9300      	str	r3, [sp, #0]
 80072e4:	2202      	movs	r2, #2
 80072e6:	4623      	mov	r3, r4
    chart = lv_chart_create(parent, NULL);
 80072e8:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 80075a0 <demo_create+0x760>
    lv_obj_align(mbox, parent, LV_ALIGN_IN_TOP_MID, 0, LV_DPI / 2);
 80072ec:	f001 fa37 	bl	800875e <lv_obj_align>
    lv_page_set_style(parent, LV_PAGE_STYLE_BG, &lv_style_transp_fit);
 80072f0:	4621      	mov	r1, r4
 80072f2:	9802      	ldr	r0, [sp, #8]
 80072f4:	4aa3      	ldr	r2, [pc, #652]	; (8007584 <demo_create+0x744>)
 80072f6:	f00b ff30 	bl	801315a <lv_page_set_style>
    lv_page_set_style(parent, LV_PAGE_STYLE_SCRL, &lv_style_transp_fit);
 80072fa:	4aa2      	ldr	r2, [pc, #648]	; (8007584 <demo_create+0x744>)
 80072fc:	2101      	movs	r1, #1
 80072fe:	9802      	ldr	r0, [sp, #8]
 8007300:	f00b ff2b 	bl	801315a <lv_page_set_style>
    lv_cont_set_fit(lv_page_get_scrl(page), hor_en, ver_en);
 8007304:	9802      	ldr	r0, [sp, #8]
 8007306:	f00b ff56 	bl	80131b6 <lv_page_get_scrl>
 800730a:	4622      	mov	r2, r4
 800730c:	4621      	mov	r1, r4
 800730e:	f009 f9ec 	bl	80106ea <lv_cont_set_fit>
    lv_page_set_scrl_height(parent, lv_obj_get_height(parent));
 8007312:	9802      	ldr	r0, [sp, #8]
 8007314:	f001 fce0 	bl	8008cd8 <lv_obj_get_height>
 8007318:	4606      	mov	r6, r0
    lv_obj_set_height(lv_page_get_scrl(page), h);
 800731a:	9802      	ldr	r0, [sp, #8]
 800731c:	f00b ff4b 	bl	80131b6 <lv_page_get_scrl>
 8007320:	4631      	mov	r1, r6
 8007322:	f001 fa14 	bl	800874e <lv_obj_set_height>
    lv_page_set_sb_mode(parent, LV_SB_MODE_OFF);
 8007326:	4621      	mov	r1, r4
 8007328:	9802      	ldr	r0, [sp, #8]
    style_chart.body.opa = LV_OPA_60;
 800732a:	2699      	movs	r6, #153	; 0x99
    lv_page_set_sb_mode(parent, LV_SB_MODE_OFF);
 800732c:	f00b fed8 	bl	80130e0 <lv_page_set_sb_mode>
    lv_style_copy(&style_chart, &lv_style_pretty);
 8007330:	4638      	mov	r0, r7
 8007332:	4995      	ldr	r1, [pc, #596]	; (8007588 <demo_create+0x748>)
 8007334:	f002 f9fe 	bl	8009734 <lv_style_copy>
    style_chart.line.color = LV_COLOR_GRAY;
 8007338:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    chart = lv_chart_create(parent, NULL);
 800733c:	4621      	mov	r1, r4
 800733e:	9802      	ldr	r0, [sp, #8]
    style_chart.line.color = LV_COLOR_GRAY;
 8007340:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8007344:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8007348:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
    style_chart.body.opa = LV_OPA_60;
 800734c:	73be      	strb	r6, [r7, #14]
    style_chart.body.radius = 0;
 800734e:	81bc      	strh	r4, [r7, #12]
    style_chart.line.color = LV_COLOR_GRAY;
 8007350:	f887 5043 	strb.w	r5, [r7, #67]	; 0x43
    chart = lv_chart_create(parent, NULL);
 8007354:	f008 ffbe 	bl	80102d4 <lv_chart_create>
 8007358:	4682      	mov	sl, r0
 800735a:	f8c8 0000 	str.w	r0, [r8]
    lv_obj_set_size(chart, 2 * lv_obj_get_width(parent) / 3, lv_obj_get_height(parent) / 2);
 800735e:	9802      	ldr	r0, [sp, #8]
 8007360:	f001 fcb4 	bl	8008ccc <lv_obj_get_width>
 8007364:	9003      	str	r0, [sp, #12]
 8007366:	9802      	ldr	r0, [sp, #8]
 8007368:	f001 fcb6 	bl	8008cd8 <lv_obj_get_height>
 800736c:	9903      	ldr	r1, [sp, #12]
 800736e:	2302      	movs	r3, #2
 8007370:	0049      	lsls	r1, r1, #1
 8007372:	fb90 f2f3 	sdiv	r2, r0, r3
 8007376:	fb91 f1f9 	sdiv	r1, r1, r9
 800737a:	4650      	mov	r0, sl
 800737c:	b212      	sxth	r2, r2
 800737e:	b209      	sxth	r1, r1
    style_bar.body.padding.ver = LV_DPI / 10;
 8007380:	f04f 0a0a 	mov.w	sl, #10
    lv_obj_set_size(chart, 2 * lv_obj_get_width(parent) / 3, lv_obj_get_height(parent) / 2);
 8007384:	f001 f9a9 	bl	80086da <lv_obj_set_size>
    lv_obj_align(chart, NULL,  LV_ALIGN_IN_TOP_MID, 0, LV_DPI / 4);
 8007388:	4623      	mov	r3, r4
 800738a:	2202      	movs	r2, #2
 800738c:	f8cd b000 	str.w	fp, [sp]
 8007390:	4621      	mov	r1, r4
 8007392:	f8d8 0000 	ldr.w	r0, [r8]
 8007396:	f001 f9e2 	bl	800875e <lv_obj_align>
    lv_chart_set_type(chart, LV_CHART_TYPE_COLUMN);
 800739a:	f8d8 0000 	ldr.w	r0, [r8]
 800739e:	2102      	movs	r1, #2
    style_bar.body.radius = LV_RADIUS_CIRCLE;
 80073a0:	f643 7bff 	movw	fp, #16383	; 0x3fff
    lv_chart_set_type(chart, LV_CHART_TYPE_COLUMN);
 80073a4:	f009 f844 	bl	8010430 <lv_chart_set_type>
 * @param chart pointer to a chart object
 * @param style pointer to a style
 */
static inline void lv_chart_set_style(lv_obj_t *chart, lv_style_t *style)
{
    lv_obj_set_style(chart, style);
 80073a8:	4639      	mov	r1, r7
 80073aa:	f8d8 0000 	ldr.w	r0, [r8]
 80073ae:	f001 fc2b 	bl	8008c08 <lv_obj_set_style>
    lv_chart_set_series_opa(chart, LV_OPA_70);
 80073b2:	f8d8 0000 	ldr.w	r0, [r8]
 80073b6:	21b2      	movs	r1, #178	; 0xb2
 80073b8:	f009 f84d 	bl	8010456 <lv_chart_set_series_opa>
    ser1 = lv_chart_add_series(chart, LV_COLOR_RED);
 80073bc:	4973      	ldr	r1, [pc, #460]	; (800758c <demo_create+0x74c>)
 80073be:	f8d8 0000 	ldr.w	r0, [r8]
 80073c2:	f008 fff9 	bl	80103b8 <lv_chart_add_series>
 80073c6:	4607      	mov	r7, r0
    lv_chart_set_next(chart, ser1, 40);
 80073c8:	4601      	mov	r1, r0
 80073ca:	2228      	movs	r2, #40	; 0x28
 80073cc:	f8d8 0000 	ldr.w	r0, [r8]
 80073d0:	f009 f850 	bl	8010474 <lv_chart_set_next>
    lv_chart_set_next(chart, ser1, 30);
 80073d4:	4639      	mov	r1, r7
 80073d6:	f8d8 0000 	ldr.w	r0, [r8]
 80073da:	221e      	movs	r2, #30
 80073dc:	f009 f84a 	bl	8010474 <lv_chart_set_next>
    lv_chart_set_next(chart, ser1, 47);
 80073e0:	4639      	mov	r1, r7
 80073e2:	f8d8 0000 	ldr.w	r0, [r8]
 80073e6:	222f      	movs	r2, #47	; 0x2f
 80073e8:	f009 f844 	bl	8010474 <lv_chart_set_next>
    lv_chart_set_next(chart, ser1, 59);
 80073ec:	4639      	mov	r1, r7
 80073ee:	f8d8 0000 	ldr.w	r0, [r8]
 80073f2:	223b      	movs	r2, #59	; 0x3b
 80073f4:	f009 f83e 	bl	8010474 <lv_chart_set_next>
    lv_chart_set_next(chart, ser1, 59);
 80073f8:	4639      	mov	r1, r7
 80073fa:	f8d8 0000 	ldr.w	r0, [r8]
 80073fe:	223b      	movs	r2, #59	; 0x3b
 8007400:	f009 f838 	bl	8010474 <lv_chart_set_next>
    lv_chart_set_next(chart, ser1, 31);
 8007404:	4639      	mov	r1, r7
 8007406:	f8d8 0000 	ldr.w	r0, [r8]
 800740a:	221f      	movs	r2, #31
 800740c:	f009 f832 	bl	8010474 <lv_chart_set_next>
    lv_chart_set_next(chart, ser1, 55);
 8007410:	4639      	mov	r1, r7
 8007412:	f8d8 0000 	ldr.w	r0, [r8]
 8007416:	2237      	movs	r2, #55	; 0x37
 8007418:	f009 f82c 	bl	8010474 <lv_chart_set_next>
    lv_chart_set_next(chart, ser1, 70);
 800741c:	4639      	mov	r1, r7
 800741e:	f8d8 0000 	ldr.w	r0, [r8]
 8007422:	2246      	movs	r2, #70	; 0x46
 8007424:	f009 f826 	bl	8010474 <lv_chart_set_next>
    lv_chart_set_next(chart, ser1, 82);
 8007428:	4639      	mov	r1, r7
    lv_style_copy(&style_bar, &lv_style_pretty);
 800742a:	4f59      	ldr	r7, [pc, #356]	; (8007590 <demo_create+0x750>)
    lv_chart_set_next(chart, ser1, 82);
 800742c:	2252      	movs	r2, #82	; 0x52
 800742e:	f8d8 0000 	ldr.w	r0, [r8]
 8007432:	f009 f81f 	bl	8010474 <lv_chart_set_next>
    lv_style_copy(&style_bar, &lv_style_pretty);
 8007436:	4638      	mov	r0, r7
 8007438:	4953      	ldr	r1, [pc, #332]	; (8007588 <demo_create+0x748>)
 800743a:	f002 f97b 	bl	8009734 <lv_style_copy>
    style_bar.body.opa = LV_OPA_60;
 800743e:	73be      	strb	r6, [r7, #14]
    lv_style_copy(&style_indic, &lv_style_pretty);
 8007440:	4e54      	ldr	r6, [pc, #336]	; (8007594 <demo_create+0x754>)
    style_bar.body.grad_color =  LV_COLOR_GRAY;
 8007442:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    lv_style_copy(&style_indic, &lv_style_pretty);
 8007446:	4950      	ldr	r1, [pc, #320]	; (8007588 <demo_create+0x748>)
 8007448:	4630      	mov	r0, r6
    style_bar.body.main_color =  LV_COLOR_BLACK;
 800744a:	71fd      	strb	r5, [r7, #7]
    style_bar.body.grad_color =  LV_COLOR_GRAY;
 800744c:	723b      	strb	r3, [r7, #8]
 800744e:	727b      	strb	r3, [r7, #9]
 8007450:	72bb      	strb	r3, [r7, #10]
 8007452:	72fd      	strb	r5, [r7, #11]
    style_bar.body.border.color = LV_COLOR_WHITE;
 8007454:	743d      	strb	r5, [r7, #16]
 8007456:	747d      	strb	r5, [r7, #17]
 8007458:	74bd      	strb	r5, [r7, #18]
 800745a:	74fd      	strb	r5, [r7, #19]
    style_bar.body.main_color =  LV_COLOR_BLACK;
 800745c:	713c      	strb	r4, [r7, #4]
 800745e:	717c      	strb	r4, [r7, #5]
 8007460:	71bc      	strb	r4, [r7, #6]
    style_bar.body.radius = LV_RADIUS_CIRCLE;
 8007462:	f8a7 b00c 	strh.w	fp, [r7, #12]
    style_bar.body.padding.hor = 0;
 8007466:	847c      	strh	r4, [r7, #34]	; 0x22
    style_bar.body.padding.ver = LV_DPI / 10;
 8007468:	f8a7 a020 	strh.w	sl, [r7, #32]
    lv_style_copy(&style_indic, &lv_style_pretty);
 800746c:	f002 f962 	bl	8009734 <lv_style_copy>
    style_indic.body.grad_color =  LV_COLOR_MAROON;
 8007470:	72f5      	strb	r5, [r6, #11]
 8007472:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    style_indic.body.main_color =  LV_COLOR_RED;
 8007476:	71b5      	strb	r5, [r6, #6]
 8007478:	71f5      	strb	r5, [r6, #7]
    style_indic.body.shadow.color = LV_COLOR_RED;
 800747a:	76b5      	strb	r5, [r6, #26]
 800747c:	76f5      	strb	r5, [r6, #27]
    lv_style_copy(&style_knob, &lv_style_pretty);
 800747e:	4d46      	ldr	r5, [pc, #280]	; (8007598 <demo_create+0x758>)
 8007480:	4941      	ldr	r1, [pc, #260]	; (8007588 <demo_create+0x748>)
 8007482:	4628      	mov	r0, r5
    style_indic.body.grad_color =  LV_COLOR_MAROON;
 8007484:	7234      	strb	r4, [r6, #8]
 8007486:	7274      	strb	r4, [r6, #9]
 8007488:	72b3      	strb	r3, [r6, #10]
    style_indic.body.main_color =  LV_COLOR_RED;
 800748a:	7134      	strb	r4, [r6, #4]
 800748c:	7174      	strb	r4, [r6, #5]
    style_indic.body.radius = LV_RADIUS_CIRCLE;
 800748e:	f8a6 b00c 	strh.w	fp, [r6, #12]
    style_indic.body.shadow.width = LV_DPI / 10;
 8007492:	f8a6 a01c 	strh.w	sl, [r6, #28]
    style_indic.body.shadow.color = LV_COLOR_RED;
 8007496:	7634      	strb	r4, [r6, #24]
 8007498:	7674      	strb	r4, [r6, #25]
    style_indic.body.padding.hor = LV_DPI / 30;
 800749a:	f8a6 9022 	strh.w	r9, [r6, #34]	; 0x22
    style_indic.body.padding.ver = LV_DPI / 30;
 800749e:	f8a6 9020 	strh.w	r9, [r6, #32]
    lv_style_copy(&style_knob, &lv_style_pretty);
 80074a2:	f002 f947 	bl	8009734 <lv_style_copy>
    style_knob.body.opa = LV_OPA_70;
 80074a6:	f06f 034d 	mvn.w	r3, #77	; 0x4d
    lv_obj_t * slider = lv_slider_create(parent, NULL);
 80074aa:	4621      	mov	r1, r4
 80074ac:	9802      	ldr	r0, [sp, #8]
    style_knob.body.opa = LV_OPA_70;
 80074ae:	73ab      	strb	r3, [r5, #14]
    style_knob.body.radius = LV_RADIUS_CIRCLE;
 80074b0:	f8a5 b00c 	strh.w	fp, [r5, #12]
    lv_obj_t * slider = lv_slider_create(parent, NULL);
 80074b4:	f00c fa72 	bl	801399c <lv_slider_create>
 80074b8:	4681      	mov	r9, r0
    lv_slider_set_style(slider, LV_SLIDER_STYLE_BG, &style_bar);
 80074ba:	463a      	mov	r2, r7
 80074bc:	4621      	mov	r1, r4
 80074be:	f00c fa51 	bl	8013964 <lv_slider_set_style>
    lv_slider_set_style(slider, LV_SLIDER_STYLE_INDIC, &style_indic);
 80074c2:	4632      	mov	r2, r6
 80074c4:	4648      	mov	r0, r9
 80074c6:	2101      	movs	r1, #1
 80074c8:	f00c fa4c 	bl	8013964 <lv_slider_set_style>
    lv_slider_set_style(slider, LV_SLIDER_STYLE_KNOB, &style_knob);
 80074cc:	462a      	mov	r2, r5
 80074ce:	2102      	movs	r1, #2
 80074d0:	4648      	mov	r0, r9
 80074d2:	f00c fa47 	bl	8013964 <lv_slider_set_style>
    lv_obj_set_size(slider, lv_obj_get_width(chart), LV_DPI / 3);
 80074d6:	f8d8 0000 	ldr.w	r0, [r8]
 80074da:	f001 fbf7 	bl	8008ccc <lv_obj_get_width>
 80074de:	2221      	movs	r2, #33	; 0x21
 80074e0:	4601      	mov	r1, r0
 80074e2:	4648      	mov	r0, r9
 80074e4:	f001 f8f9 	bl	80086da <lv_obj_set_size>
    lv_obj_align(slider, chart, LV_ALIGN_OUT_BOTTOM_MID, 0, (LV_VER_RES - chart->coords.y2 - lv_obj_get_height(slider)) / 2); /*Align to below the chart*/
 80074e8:	f8d8 6000 	ldr.w	r6, [r8]
 80074ec:	4648      	mov	r0, r9
 80074ee:	f9b6 5016 	ldrsh.w	r5, [r6, #22]
 80074f2:	f001 fbf1 	bl	8008cd8 <lv_obj_get_height>
 80074f6:	2302      	movs	r3, #2
 80074f8:	220d      	movs	r2, #13
 80074fa:	f5c5 7588 	rsb	r5, r5, #272	; 0x110
 80074fe:	4631      	mov	r1, r6
 8007500:	1a28      	subs	r0, r5, r0
 8007502:	fb90 f0f3 	sdiv	r0, r0, r3
 8007506:	b200      	sxth	r0, r0
 8007508:	4623      	mov	r3, r4
 800750a:	9000      	str	r0, [sp, #0]
 800750c:	4648      	mov	r0, r9
 800750e:	f001 f926 	bl	800875e <lv_obj_align>
    lv_slider_set_action(slider, slider_action);
 8007512:	4648      	mov	r0, r9
 8007514:	4921      	ldr	r1, [pc, #132]	; (800759c <demo_create+0x75c>)
 8007516:	f00c fa1f 	bl	8013958 <lv_slider_set_action>
 * @param min minimum value
 * @param max maximum value
 */
static inline void lv_slider_set_range(lv_obj_t *slider, int16_t min, int16_t max)
{
    lv_bar_set_range(slider, min, max);
 800751a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800751e:	4651      	mov	r1, sl
 8007520:	4648      	mov	r0, r9
 8007522:	f007 facf 	bl	800eac4 <lv_bar_set_range>
    lv_bar_set_value(slider, value);
 8007526:	4648      	mov	r0, r9
 8007528:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 800752c:	f007 fa82 	bl	800ea34 <lv_bar_set_value>
    slider_action(slider);          /*Simulate a user value set the refresh the chart*/
 8007530:	4648      	mov	r0, r9
}
 8007532:	b005      	add	sp, #20
 8007534:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    slider_action(slider);          /*Simulate a user value set the refresh the chart*/
 8007538:	f7ff bc70 	b.w	8006e1c <slider_action>
 800753c:	2000069c 	.word	0x2000069c
 8007540:	08006df5 	.word	0x08006df5
 8007544:	08015c04 	.word	0x08015c04
 8007548:	08015c08 	.word	0x08015c08
 800754c:	08015c0c 	.word	0x08015c0c
 8007550:	08015c11 	.word	0x08015c11
 8007554:	08015c15 	.word	0x08015c15
 8007558:	08015c1c 	.word	0x08015c1c
 800755c:	08015c20 	.word	0x08015c20
 8007560:	08015c25 	.word	0x08015c25
 8007564:	08015c29 	.word	0x08015c29
 8007568:	08015c2e 	.word	0x08015c2e
 800756c:	08015c32 	.word	0x08015c32
 8007570:	08015c37 	.word	0x08015c37
 8007574:	08015c3b 	.word	0x08015c3b
 8007578:	08015c3f 	.word	0x08015c3f
 800757c:	08015c43 	.word	0x08015c43
 8007580:	20000034 	.word	0x20000034
 8007584:	20017d78 	.word	0x20017d78
 8007588:	20017ca0 	.word	0x20017ca0
 800758c:	ffff0000 	.word	0xffff0000
 8007590:	200005c4 	.word	0x200005c4
 8007594:	200006e4 	.word	0x200006e4
 8007598:	20000804 	.word	0x20000804
 800759c:	08006e1d 	.word	0x08006e1d
 80075a0:	200005bc 	.word	0x200005bc

080075a4 <lv_color_mix.constprop.1>:
#elif LV_COLOR_DEPTH == 32
    return color.full;
#endif
}

static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
 80075a4:	b570      	push	{r4, r5, r6, lr}
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 80075a6:	b296      	uxth	r6, r2
 80075a8:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 80075ac:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80075b0:	f3c0 4507 	ubfx	r5, r0, #16, #8
 80075b4:	b292      	uxth	r2, r2
    uint16_t g_2 = (c2.green_h << 3) + c2.green_l;
    uint16_t g_out = (uint16_t)((uint16_t) g_1 * mix + (g_2 * (255 - mix))) >> 8;
    ret.green_h = g_out >> 3;
    ret.green_l = g_out & 0x7;
#  else
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 80075b6:	f3c1 2107 	ubfx	r1, r1, #8, #8
#  endif
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
# if LV_COLOR_DEPTH == 32
//    ret.alpha = 0xFF;
    ret.alpha = (uint16_t)((uint16_t) c1.alpha * mix + (c2.alpha * (255 - mix))) >> 8;
 80075ba:	0e04      	lsrs	r4, r0, #24
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 80075bc:	fb13 f302 	smulbb	r3, r3, r2
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 80075c0:	fb11 f102 	smulbb	r1, r1, r2
    ret.alpha = (uint16_t)((uint16_t) c1.alpha * mix + (c2.alpha * (255 - mix))) >> 8;
 80075c4:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 80075c8:	fb05 3506 	mla	r5, r5, r6, r3
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 80075cc:	f3c0 2307 	ubfx	r3, r0, #8, #8
    ret.alpha = (uint16_t)((uint16_t) c1.alpha * mix + (c2.alpha * (255 - mix))) >> 8;
 80075d0:	fb04 2206 	mla	r2, r4, r6, r2
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 80075d4:	fb03 1106 	mla	r1, r3, r6, r1
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 80075d8:	b2c3      	uxtb	r3, r0
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 80075da:	2000      	movs	r0, #0
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 80075dc:	f3c5 2507 	ubfx	r5, r5, #8, #8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 80075e0:	4373      	muls	r3, r6
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 80075e2:	f3c1 2107 	ubfx	r1, r1, #8, #8
    ret.alpha = (uint16_t)((uint16_t) c1.alpha * mix + (c2.alpha * (255 - mix))) >> 8;
 80075e6:	f3c2 2207 	ubfx	r2, r2, #8, #8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 80075ea:	0a1b      	lsrs	r3, r3, #8
    return ret;
 80075ec:	f363 0007 	bfi	r0, r3, #0, #8
 80075f0:	f361 200f 	bfi	r0, r1, #8, #8
 80075f4:	f365 4017 	bfi	r0, r5, #16, #8
 80075f8:	f362 601f 	bfi	r0, r2, #24, #8
}
 80075fc:	bd70      	pop	{r4, r5, r6, pc}

080075fe <style_mod_edit_def>:
/**
 * Default style modifier function
 * @param style pointer to a style to modify. (Typically group.style_tmp) It will be OVERWRITTEN.
 */
static void style_mod_edit_def(lv_style_t * style)
{
 80075fe:	b538      	push	{r3, r4, r5, lr}
#if LV_COLOR_DEPTH != 1

    /*Make the style to be a little bit orange*/
    style->body.border.opa = LV_OPA_COVER;
 8007600:	23ff      	movs	r3, #255	; 0xff
    style->body.border.color = LV_COLOR_GREEN;
 8007602:	2200      	movs	r2, #0
 8007604:	2180      	movs	r1, #128	; 0x80
{
 8007606:	4604      	mov	r4, r0
    style->body.border.opa = LV_OPA_COVER;
 8007608:	75c3      	strb	r3, [r0, #23]
    style->body.border.color = LV_COLOR_GREEN;
 800760a:	74c3      	strb	r3, [r0, #19]

    /*If not empty or has border then emphasis the border*/
    if(style->body.empty == 0 || style->body.border.width != 0) style->body.border.width = LV_DPI / 20;
 800760c:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
    style->body.border.color = LV_COLOR_GREEN;
 8007610:	7402      	strb	r2, [r0, #16]
    if(style->body.empty == 0 || style->body.border.width != 0) style->body.border.width = LV_DPI / 20;
 8007612:	07db      	lsls	r3, r3, #31
    style->body.border.color = LV_COLOR_GREEN;
 8007614:	7441      	strb	r1, [r0, #17]
 8007616:	7482      	strb	r2, [r0, #18]
    if(style->body.empty == 0 || style->body.border.width != 0) style->body.border.width = LV_DPI / 20;
 8007618:	d502      	bpl.n	8007620 <style_mod_edit_def+0x22>
 800761a:	f9b0 3014 	ldrsh.w	r3, [r0, #20]
 800761e:	b10b      	cbz	r3, 8007624 <style_mod_edit_def+0x26>
 8007620:	2305      	movs	r3, #5
 8007622:	82a3      	strh	r3, [r4, #20]

    style->body.main_color = lv_color_mix(style->body.main_color, LV_COLOR_GREEN, LV_OPA_70);
 8007624:	2100      	movs	r1, #0
 8007626:	f06f 057f 	mvn.w	r5, #127	; 0x7f
 800762a:	22b2      	movs	r2, #178	; 0xb2
 800762c:	6860      	ldr	r0, [r4, #4]
 800762e:	f36f 0107 	bfc	r1, #0, #8
 8007632:	f365 210f 	bfi	r1, r5, #8, #8
 8007636:	f6cf 7100 	movt	r1, #65280	; 0xff00
 800763a:	f7ff ffb3 	bl	80075a4 <lv_color_mix.constprop.1>
    style->body.grad_color = lv_color_mix(style->body.grad_color, LV_COLOR_GREEN, LV_OPA_70);
 800763e:	2100      	movs	r1, #0
    style->body.main_color = lv_color_mix(style->body.main_color, LV_COLOR_GREEN, LV_OPA_70);
 8007640:	6060      	str	r0, [r4, #4]
    style->body.grad_color = lv_color_mix(style->body.grad_color, LV_COLOR_GREEN, LV_OPA_70);
 8007642:	22b2      	movs	r2, #178	; 0xb2
 8007644:	f36f 0107 	bfc	r1, #0, #8
 8007648:	68a0      	ldr	r0, [r4, #8]
 800764a:	f365 210f 	bfi	r1, r5, #8, #8
 800764e:	f6cf 7100 	movt	r1, #65280	; 0xff00
 8007652:	f7ff ffa7 	bl	80075a4 <lv_color_mix.constprop.1>
    style->body.shadow.color = lv_color_mix(style->body.shadow.color, LV_COLOR_GREEN, LV_OPA_60);
 8007656:	2100      	movs	r1, #0
    style->body.grad_color = lv_color_mix(style->body.grad_color, LV_COLOR_GREEN, LV_OPA_70);
 8007658:	60a0      	str	r0, [r4, #8]
    style->body.shadow.color = lv_color_mix(style->body.shadow.color, LV_COLOR_GREEN, LV_OPA_60);
 800765a:	2299      	movs	r2, #153	; 0x99
 800765c:	f36f 0107 	bfc	r1, #0, #8
 8007660:	69a0      	ldr	r0, [r4, #24]
 8007662:	f365 210f 	bfi	r1, r5, #8, #8
 8007666:	f6cf 7100 	movt	r1, #65280	; 0xff00
 800766a:	f7ff ff9b 	bl	80075a4 <lv_color_mix.constprop.1>

    style->text.color = lv_color_mix(style->text.color, LV_COLOR_GREEN, LV_OPA_70);
 800766e:	2100      	movs	r1, #0
    style->body.shadow.color = lv_color_mix(style->body.shadow.color, LV_COLOR_GREEN, LV_OPA_60);
 8007670:	61a0      	str	r0, [r4, #24]
    style->text.color = lv_color_mix(style->text.color, LV_COLOR_GREEN, LV_OPA_70);
 8007672:	22b2      	movs	r2, #178	; 0xb2
 8007674:	f36f 0107 	bfc	r1, #0, #8
 8007678:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800767a:	f365 210f 	bfi	r1, r5, #8, #8
 800767e:	f6cf 7100 	movt	r1, #65280	; 0xff00
 8007682:	f7ff ff8f 	bl	80075a4 <lv_color_mix.constprop.1>
 8007686:	62a0      	str	r0, [r4, #40]	; 0x28
 8007688:	bd38      	pop	{r3, r4, r5, pc}

0800768a <style_mod_def>:
{
 800768a:	b538      	push	{r3, r4, r5, lr}
    style->body.border.opa = LV_OPA_COVER;
 800768c:	23ff      	movs	r3, #255	; 0xff
    style->body.border.color = LV_COLOR_ORANGE;
 800768e:	2200      	movs	r2, #0
{
 8007690:	4604      	mov	r4, r0
    style->body.border.opa = LV_OPA_COVER;
 8007692:	75c3      	strb	r3, [r0, #23]
    style->body.border.color = LV_COLOR_ORANGE;
 8007694:	7483      	strb	r3, [r0, #18]
 8007696:	74c3      	strb	r3, [r0, #19]
    if(style->body.empty == 0 || style->body.border.width != 0) style->body.border.width = LV_DPI / 20;
 8007698:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
    style->body.border.color = LV_COLOR_ORANGE;
 800769c:	7402      	strb	r2, [r0, #16]
 800769e:	22a5      	movs	r2, #165	; 0xa5
    if(style->body.empty == 0 || style->body.border.width != 0) style->body.border.width = LV_DPI / 20;
 80076a0:	07db      	lsls	r3, r3, #31
    style->body.border.color = LV_COLOR_ORANGE;
 80076a2:	7442      	strb	r2, [r0, #17]
    if(style->body.empty == 0 || style->body.border.width != 0) style->body.border.width = LV_DPI / 20;
 80076a4:	d502      	bpl.n	80076ac <style_mod_def+0x22>
 80076a6:	f9b0 3014 	ldrsh.w	r3, [r0, #20]
 80076aa:	b10b      	cbz	r3, 80076b0 <style_mod_def+0x26>
 80076ac:	2305      	movs	r3, #5
 80076ae:	82a3      	strh	r3, [r4, #20]
    style->body.main_color = lv_color_mix(style->body.main_color, LV_COLOR_ORANGE, LV_OPA_70);
 80076b0:	2100      	movs	r1, #0
 80076b2:	f06f 055a 	mvn.w	r5, #90	; 0x5a
 80076b6:	22b2      	movs	r2, #178	; 0xb2
 80076b8:	6860      	ldr	r0, [r4, #4]
 80076ba:	f36f 0107 	bfc	r1, #0, #8
 80076be:	f365 210f 	bfi	r1, r5, #8, #8
 80076c2:	ea6f 4101 	mvn.w	r1, r1, lsl #16
 80076c6:	ea6f 4111 	mvn.w	r1, r1, lsr #16
 80076ca:	f7ff ff6b 	bl	80075a4 <lv_color_mix.constprop.1>
    style->body.grad_color = lv_color_mix(style->body.grad_color, LV_COLOR_ORANGE, LV_OPA_70);
 80076ce:	2100      	movs	r1, #0
    style->body.main_color = lv_color_mix(style->body.main_color, LV_COLOR_ORANGE, LV_OPA_70);
 80076d0:	6060      	str	r0, [r4, #4]
    style->body.grad_color = lv_color_mix(style->body.grad_color, LV_COLOR_ORANGE, LV_OPA_70);
 80076d2:	22b2      	movs	r2, #178	; 0xb2
 80076d4:	f36f 0107 	bfc	r1, #0, #8
 80076d8:	68a0      	ldr	r0, [r4, #8]
 80076da:	f365 210f 	bfi	r1, r5, #8, #8
 80076de:	ea6f 4101 	mvn.w	r1, r1, lsl #16
 80076e2:	ea6f 4111 	mvn.w	r1, r1, lsr #16
 80076e6:	f7ff ff5d 	bl	80075a4 <lv_color_mix.constprop.1>
    style->body.shadow.color = lv_color_mix(style->body.shadow.color, LV_COLOR_ORANGE, LV_OPA_60);
 80076ea:	2100      	movs	r1, #0
    style->body.grad_color = lv_color_mix(style->body.grad_color, LV_COLOR_ORANGE, LV_OPA_70);
 80076ec:	60a0      	str	r0, [r4, #8]
    style->body.shadow.color = lv_color_mix(style->body.shadow.color, LV_COLOR_ORANGE, LV_OPA_60);
 80076ee:	2299      	movs	r2, #153	; 0x99
 80076f0:	f36f 0107 	bfc	r1, #0, #8
 80076f4:	69a0      	ldr	r0, [r4, #24]
 80076f6:	f365 210f 	bfi	r1, r5, #8, #8
 80076fa:	ea6f 4101 	mvn.w	r1, r1, lsl #16
 80076fe:	ea6f 4111 	mvn.w	r1, r1, lsr #16
 8007702:	f7ff ff4f 	bl	80075a4 <lv_color_mix.constprop.1>
    style->text.color = lv_color_mix(style->text.color, LV_COLOR_ORANGE, LV_OPA_70);
 8007706:	2100      	movs	r1, #0
    style->body.shadow.color = lv_color_mix(style->body.shadow.color, LV_COLOR_ORANGE, LV_OPA_60);
 8007708:	61a0      	str	r0, [r4, #24]
    style->text.color = lv_color_mix(style->text.color, LV_COLOR_ORANGE, LV_OPA_70);
 800770a:	22b2      	movs	r2, #178	; 0xb2
 800770c:	f36f 0107 	bfc	r1, #0, #8
 8007710:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007712:	f365 210f 	bfi	r1, r5, #8, #8
 8007716:	ea6f 4101 	mvn.w	r1, r1, lsl #16
 800771a:	ea6f 4111 	mvn.w	r1, r1, lsr #16
 800771e:	f7ff ff41 	bl	80075a4 <lv_color_mix.constprop.1>
 8007722:	62a0      	str	r0, [r4, #40]	; 0x28
 8007724:	bd38      	pop	{r3, r4, r5, pc}

08007726 <lv_group_focus_obj>:
{
 8007726:	b570      	push	{r4, r5, r6, lr}
    lv_group_t * g = obj->group_p;
 8007728:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
{
 800772a:	4606      	mov	r6, r0
    if(g == NULL) return;
 800772c:	b144      	cbz	r4, 8007740 <lv_group_focus_obj+0x1a>
    if(g->frozen != 0) return;
 800772e:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 8007732:	07db      	lsls	r3, r3, #31
 8007734:	d404      	bmi.n	8007740 <lv_group_focus_obj+0x1a>
    LL_READ(g->obj_ll, i) {
 8007736:	4620      	mov	r0, r4
 8007738:	f006 fa97 	bl	800dc6a <lv_ll_get_head>
 800773c:	4605      	mov	r5, r0
 800773e:	b900      	cbnz	r0, 8007742 <lv_group_focus_obj+0x1c>
 8007740:	bd70      	pop	{r4, r5, r6, pc}
        if(*i == obj) {
 8007742:	682b      	ldr	r3, [r5, #0]
 8007744:	429e      	cmp	r6, r3
 8007746:	d11c      	bne.n	8007782 <lv_group_focus_obj+0x5c>
            if(g->obj_focus == i) return;       /*Don't focus the already focused object again*/
 8007748:	68e3      	ldr	r3, [r4, #12]
 800774a:	429d      	cmp	r5, r3
 800774c:	d0f8      	beq.n	8007740 <lv_group_focus_obj+0x1a>
            if(g->obj_focus != NULL) {
 800774e:	b143      	cbz	r3, 8007762 <lv_group_focus_obj+0x3c>
                (*g->obj_focus)->signal_func(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 8007750:	6818      	ldr	r0, [r3, #0]
 8007752:	2200      	movs	r2, #0
 8007754:	210f      	movs	r1, #15
 8007756:	6983      	ldr	r3, [r0, #24]
 8007758:	4798      	blx	r3
                lv_obj_invalidate(*g->obj_focus);
 800775a:	68e3      	ldr	r3, [r4, #12]
 800775c:	6818      	ldr	r0, [r3, #0]
 800775e:	f000 fdab 	bl	80082b8 <lv_obj_invalidate>
                (*g->obj_focus)->signal_func(*g->obj_focus, LV_SIGNAL_FOCUS, NULL);
 8007762:	6828      	ldr	r0, [r5, #0]
 8007764:	2200      	movs	r2, #0
            g->obj_focus = i;
 8007766:	60e5      	str	r5, [r4, #12]
                (*g->obj_focus)->signal_func(*g->obj_focus, LV_SIGNAL_FOCUS, NULL);
 8007768:	210e      	movs	r1, #14
 800776a:	6983      	ldr	r3, [r0, #24]
 800776c:	4798      	blx	r3
                if(g->focus_cb) g->focus_cb(g);
 800776e:	69a3      	ldr	r3, [r4, #24]
 8007770:	b10b      	cbz	r3, 8007776 <lv_group_focus_obj+0x50>
 8007772:	4620      	mov	r0, r4
 8007774:	4798      	blx	r3
                lv_obj_invalidate(*g->obj_focus);
 8007776:	68e3      	ldr	r3, [r4, #12]
}
 8007778:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                lv_obj_invalidate(*g->obj_focus);
 800777c:	6818      	ldr	r0, [r3, #0]
 800777e:	f000 bd9b 	b.w	80082b8 <lv_obj_invalidate>
    LL_READ(g->obj_ll, i) {
 8007782:	4629      	mov	r1, r5
 8007784:	4620      	mov	r0, r4
 8007786:	f006 fa76 	bl	800dc76 <lv_ll_get_next>
 800778a:	e7d7      	b.n	800773c <lv_group_focus_obj+0x16>

0800778c <lv_group_focus_next>:
    if(group->frozen) return;
 800778c:	f890 2064 	ldrb.w	r2, [r0, #100]	; 0x64
 8007790:	f012 0201 	ands.w	r2, r2, #1
{
 8007794:	b510      	push	{r4, lr}
 8007796:	4604      	mov	r4, r0
    if(group->frozen) return;
 8007798:	d126      	bne.n	80077e8 <lv_group_focus_next+0x5c>
    if(group->obj_focus) {
 800779a:	68c3      	ldr	r3, [r0, #12]
 800779c:	b13b      	cbz	r3, 80077ae <lv_group_focus_next+0x22>
        (*group->obj_focus)->signal_func(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 800779e:	6818      	ldr	r0, [r3, #0]
 80077a0:	210f      	movs	r1, #15
 80077a2:	6983      	ldr	r3, [r0, #24]
 80077a4:	4798      	blx	r3
        lv_obj_invalidate(*group->obj_focus);
 80077a6:	68e3      	ldr	r3, [r4, #12]
 80077a8:	6818      	ldr	r0, [r3, #0]
 80077aa:	f000 fd85 	bl	80082b8 <lv_obj_invalidate>
    if(group->obj_focus == NULL) obj_next = lv_ll_get_head(&group->obj_ll);
 80077ae:	68e1      	ldr	r1, [r4, #12]
 80077b0:	4620      	mov	r0, r4
 80077b2:	b9b1      	cbnz	r1, 80077e2 <lv_group_focus_next+0x56>
 80077b4:	f006 fa59 	bl	800dc6a <lv_ll_get_head>
    if(obj_next == NULL) obj_next = lv_ll_get_head(&group->obj_ll);
 80077b8:	b910      	cbnz	r0, 80077c0 <lv_group_focus_next+0x34>
 80077ba:	4620      	mov	r0, r4
 80077bc:	f006 fa55 	bl	800dc6a <lv_ll_get_head>
    group->obj_focus = obj_next;
 80077c0:	60e0      	str	r0, [r4, #12]
    if(group->obj_focus) {
 80077c2:	b188      	cbz	r0, 80077e8 <lv_group_focus_next+0x5c>
        (*group->obj_focus)->signal_func(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 80077c4:	6800      	ldr	r0, [r0, #0]
 80077c6:	2200      	movs	r2, #0
 80077c8:	210e      	movs	r1, #14
 80077ca:	6983      	ldr	r3, [r0, #24]
 80077cc:	4798      	blx	r3
        lv_obj_invalidate(*group->obj_focus);
 80077ce:	68e3      	ldr	r3, [r4, #12]
 80077d0:	6818      	ldr	r0, [r3, #0]
 80077d2:	f000 fd71 	bl	80082b8 <lv_obj_invalidate>
        if(group->focus_cb) group->focus_cb(group);
 80077d6:	69a3      	ldr	r3, [r4, #24]
 80077d8:	b133      	cbz	r3, 80077e8 <lv_group_focus_next+0x5c>
 80077da:	4620      	mov	r0, r4
}
 80077dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        if(group->focus_cb) group->focus_cb(group);
 80077e0:	4718      	bx	r3
    else obj_next = lv_ll_get_next(&group->obj_ll, group->obj_focus);
 80077e2:	f006 fa48 	bl	800dc76 <lv_ll_get_next>
 80077e6:	e7e7      	b.n	80077b8 <lv_group_focus_next+0x2c>
 80077e8:	bd10      	pop	{r4, pc}

080077ea <lv_group_add_obj>:
{
 80077ea:	b570      	push	{r4, r5, r6, lr}
 80077ec:	460d      	mov	r5, r1
    if(group == NULL) return;
 80077ee:	4604      	mov	r4, r0
 80077f0:	b1d0      	cbz	r0, 8007828 <lv_group_add_obj+0x3e>
    if(obj->group_p) {
 80077f2:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80077f4:	b133      	cbz	r3, 8007804 <lv_group_add_obj+0x1a>
        if(lv_obj_is_focused(obj)) {
 80077f6:	4608      	mov	r0, r1
 80077f8:	f001 fb43 	bl	8008e82 <lv_obj_is_focused>
 80077fc:	b110      	cbz	r0, 8007804 <lv_group_add_obj+0x1a>
            lv_group_focus_next(obj->group_p);
 80077fe:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8007800:	f7ff ffc4 	bl	800778c <lv_group_focus_next>
    obj->group_p = group;
 8007804:	62ec      	str	r4, [r5, #44]	; 0x2c
    lv_obj_t ** next = lv_ll_ins_tail(&group->obj_ll);
 8007806:	4620      	mov	r0, r4
 8007808:	f006 fa11 	bl	800dc2e <lv_ll_ins_tail>
    lv_mem_assert(next);
 800780c:	4606      	mov	r6, r0
 800780e:	b900      	cbnz	r0, 8007812 <lv_group_add_obj+0x28>
 8007810:	e7fe      	b.n	8007810 <lv_group_add_obj+0x26>
    *next = obj;
 8007812:	6005      	str	r5, [r0, #0]
    if(lv_ll_get_head(&group->obj_ll) == next) {
 8007814:	4620      	mov	r0, r4
 8007816:	f006 fa28 	bl	800dc6a <lv_ll_get_head>
 800781a:	4286      	cmp	r6, r0
 800781c:	d104      	bne.n	8007828 <lv_group_add_obj+0x3e>
        lv_group_focus_next(group);
 800781e:	4620      	mov	r0, r4
}
 8007820:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_group_focus_next(group);
 8007824:	f7ff bfb2 	b.w	800778c <lv_group_focus_next>
 8007828:	bd70      	pop	{r4, r5, r6, pc}

0800782a <lv_group_remove_obj>:
{
 800782a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_group_t * g = obj->group_p;
 800782c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
{
 800782e:	4606      	mov	r6, r0
    if(g == NULL) return;
 8007830:	b19c      	cbz	r4, 800785a <lv_group_remove_obj+0x30>
    if(g->obj_focus == NULL) return;        /*Just to be sure (Not possible if there is at least one object in the group)*/
 8007832:	68e3      	ldr	r3, [r4, #12]
 8007834:	b18b      	cbz	r3, 800785a <lv_group_remove_obj+0x30>
    if(*g->obj_focus == obj) {
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4298      	cmp	r0, r3
 800783a:	d102      	bne.n	8007842 <lv_group_remove_obj+0x18>
        lv_group_focus_next(g);
 800783c:	4620      	mov	r0, r4
 800783e:	f7ff ffa5 	bl	800778c <lv_group_focus_next>
    if(*g->obj_focus == obj) {
 8007842:	68e3      	ldr	r3, [r4, #12]
    LL_READ(g->obj_ll, i) {
 8007844:	4620      	mov	r0, r4
            obj->group_p = NULL;
 8007846:	2700      	movs	r7, #0
    if(*g->obj_focus == obj) {
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	429e      	cmp	r6, r3
        g->obj_focus = NULL;
 800784c:	bf04      	itt	eq
 800784e:	2300      	moveq	r3, #0
 8007850:	60e3      	streq	r3, [r4, #12]
    LL_READ(g->obj_ll, i) {
 8007852:	f006 fa0a 	bl	800dc6a <lv_ll_get_head>
 8007856:	4605      	mov	r5, r0
 8007858:	b905      	cbnz	r5, 800785c <lv_group_remove_obj+0x32>
 800785a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(*i == obj) {
 800785c:	682b      	ldr	r3, [r5, #0]
 800785e:	429e      	cmp	r6, r3
 8007860:	d107      	bne.n	8007872 <lv_group_remove_obj+0x48>
            lv_ll_rem(&g->obj_ll, i);
 8007862:	4629      	mov	r1, r5
 8007864:	4620      	mov	r0, r4
 8007866:	f006 fa3f 	bl	800dce8 <lv_ll_rem>
            lv_mem_free(i);
 800786a:	4628      	mov	r0, r5
 800786c:	f006 fb10 	bl	800de90 <lv_mem_free>
            obj->group_p = NULL;
 8007870:	62f7      	str	r7, [r6, #44]	; 0x2c
    LL_READ(g->obj_ll, i) {
 8007872:	4629      	mov	r1, r5
 8007874:	4620      	mov	r0, r4
 8007876:	f006 f9fe 	bl	800dc76 <lv_ll_get_next>
 800787a:	4605      	mov	r5, r0
 800787c:	e7ec      	b.n	8007858 <lv_group_remove_obj+0x2e>

0800787e <lv_group_focus_prev>:
    if(group->frozen) return;
 800787e:	f890 2064 	ldrb.w	r2, [r0, #100]	; 0x64
 8007882:	f012 0201 	ands.w	r2, r2, #1
{
 8007886:	b510      	push	{r4, lr}
 8007888:	4604      	mov	r4, r0
    if(group->frozen) return;
 800788a:	d126      	bne.n	80078da <lv_group_focus_prev+0x5c>
    if(group->obj_focus) {
 800788c:	68c3      	ldr	r3, [r0, #12]
 800788e:	b13b      	cbz	r3, 80078a0 <lv_group_focus_prev+0x22>
        (*group->obj_focus)->signal_func(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 8007890:	6818      	ldr	r0, [r3, #0]
 8007892:	210f      	movs	r1, #15
 8007894:	6983      	ldr	r3, [r0, #24]
 8007896:	4798      	blx	r3
        lv_obj_invalidate(*group->obj_focus);
 8007898:	68e3      	ldr	r3, [r4, #12]
 800789a:	6818      	ldr	r0, [r3, #0]
 800789c:	f000 fd0c 	bl	80082b8 <lv_obj_invalidate>
    if(group->obj_focus == NULL) obj_next = lv_ll_get_tail(&group->obj_ll);
 80078a0:	68e1      	ldr	r1, [r4, #12]
 80078a2:	4620      	mov	r0, r4
 80078a4:	b9b1      	cbnz	r1, 80078d4 <lv_group_focus_prev+0x56>
 80078a6:	f006 f9e3 	bl	800dc70 <lv_ll_get_tail>
    if(obj_next == NULL) obj_next = lv_ll_get_tail(&group->obj_ll);
 80078aa:	b910      	cbnz	r0, 80078b2 <lv_group_focus_prev+0x34>
 80078ac:	4620      	mov	r0, r4
 80078ae:	f006 f9df 	bl	800dc70 <lv_ll_get_tail>
    group->obj_focus = obj_next;
 80078b2:	60e0      	str	r0, [r4, #12]
    if(group->obj_focus != NULL) {
 80078b4:	b188      	cbz	r0, 80078da <lv_group_focus_prev+0x5c>
        (*group->obj_focus)->signal_func(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 80078b6:	6800      	ldr	r0, [r0, #0]
 80078b8:	2200      	movs	r2, #0
 80078ba:	210e      	movs	r1, #14
 80078bc:	6983      	ldr	r3, [r0, #24]
 80078be:	4798      	blx	r3
        lv_obj_invalidate(*group->obj_focus);
 80078c0:	68e3      	ldr	r3, [r4, #12]
 80078c2:	6818      	ldr	r0, [r3, #0]
 80078c4:	f000 fcf8 	bl	80082b8 <lv_obj_invalidate>
        if(group->focus_cb) group->focus_cb(group);
 80078c8:	69a3      	ldr	r3, [r4, #24]
 80078ca:	b133      	cbz	r3, 80078da <lv_group_focus_prev+0x5c>
 80078cc:	4620      	mov	r0, r4
}
 80078ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        if(group->focus_cb) group->focus_cb(group);
 80078d2:	4718      	bx	r3
    else obj_next = lv_ll_get_prev(&group->obj_ll, group->obj_focus);
 80078d4:	f006 f9d4 	bl	800dc80 <lv_ll_get_prev>
 80078d8:	e7e7      	b.n	80078aa <lv_group_focus_prev+0x2c>
 80078da:	bd10      	pop	{r4, pc}

080078dc <lv_group_mod_style>:
{
 80078dc:	b538      	push	{r3, r4, r5, lr}
    lv_style_copy(&group->style_tmp, style);
 80078de:	f100 041c 	add.w	r4, r0, #28
{
 80078e2:	4605      	mov	r5, r0
    lv_style_copy(&group->style_tmp, style);
 80078e4:	4620      	mov	r0, r4
 80078e6:	f001 ff25 	bl	8009734 <lv_style_copy>
    if(group->editing) {
 80078ea:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
 80078ee:	079b      	lsls	r3, r3, #30
 80078f0:	d508      	bpl.n	8007904 <lv_group_mod_style+0x28>
        if(group->style_mod_edit != NULL) group->style_mod_edit(&group->style_tmp);
 80078f2:	696b      	ldr	r3, [r5, #20]
 80078f4:	4620      	mov	r0, r4
 80078f6:	b10b      	cbz	r3, 80078fc <lv_group_mod_style+0x20>
        if(group->style_mod != NULL) group->style_mod(&group->style_tmp);
 80078f8:	4798      	blx	r3
 80078fa:	e001      	b.n	8007900 <lv_group_mod_style+0x24>
        else style_mod_edit_def(&group->style_tmp);
 80078fc:	f7ff fe7f 	bl	80075fe <style_mod_edit_def>
}
 8007900:	4620      	mov	r0, r4
 8007902:	bd38      	pop	{r3, r4, r5, pc}
        if(group->style_mod != NULL) group->style_mod(&group->style_tmp);
 8007904:	692b      	ldr	r3, [r5, #16]
 8007906:	4620      	mov	r0, r4
 8007908:	2b00      	cmp	r3, #0
 800790a:	d1f5      	bne.n	80078f8 <lv_group_mod_style+0x1c>
        else style_mod_def(&group->style_tmp);
 800790c:	f7ff febd 	bl	800768a <style_mod_def>
    return &group->style_tmp;
 8007910:	e7f6      	b.n	8007900 <lv_group_mod_style+0x24>

08007912 <lv_group_get_focused>:
    if(!group) return NULL;
 8007912:	b110      	cbz	r0, 800791a <lv_group_get_focused+0x8>
    if(group->obj_focus == NULL) return NULL;
 8007914:	68c0      	ldr	r0, [r0, #12]
 8007916:	b100      	cbz	r0, 800791a <lv_group_get_focused+0x8>
    return *group->obj_focus;
 8007918:	6800      	ldr	r0, [r0, #0]
}
 800791a:	4770      	bx	lr

0800791c <lv_group_send_data>:
{
 800791c:	b507      	push	{r0, r1, r2, lr}
 800791e:	9101      	str	r1, [sp, #4]
    lv_obj_t * act = lv_group_get_focused(group);
 8007920:	f7ff fff7 	bl	8007912 <lv_group_get_focused>
    if(act == NULL) return;
 8007924:	b118      	cbz	r0, 800792e <lv_group_send_data+0x12>
    act->signal_func(act, LV_SIGNAL_CONTROLL, &c);
 8007926:	6983      	ldr	r3, [r0, #24]
 8007928:	aa01      	add	r2, sp, #4
 800792a:	2110      	movs	r1, #16
 800792c:	4798      	blx	r3
}
 800792e:	b003      	add	sp, #12
 8007930:	f85d fb04 	ldr.w	pc, [sp], #4

08007934 <lv_group_set_editing>:
    group->editing = edit ? 1 : 0;
 8007934:	f890 2064 	ldrb.w	r2, [r0, #100]	; 0x64
 8007938:	f361 0241 	bfi	r2, r1, #1, #1
{
 800793c:	b508      	push	{r3, lr}
    group->editing = edit ? 1 : 0;
 800793e:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
    lv_obj_t * focused = lv_group_get_focused(group);
 8007942:	f7ff ffe6 	bl	8007912 <lv_group_get_focused>
}
 8007946:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    lv_obj_invalidate(focused);
 800794a:	f000 bcb5 	b.w	80082b8 <lv_obj_invalidate>

0800794e <lv_group_get_editing>:
    if(!group) return false;
 800794e:	b118      	cbz	r0, 8007958 <lv_group_get_editing+0xa>
    return group->editing ? true : false;
 8007950:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
 8007954:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
 8007958:	4770      	bx	lr

0800795a <lv_group_get_click_focus>:
    if(!group) return false;
 800795a:	b118      	cbz	r0, 8007964 <lv_group_get_click_focus+0xa>
    return group->click_focus ? true : false;
 800795c:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
 8007960:	f3c0 0080 	ubfx	r0, r0, #2, #1
}
 8007964:	4770      	bx	lr

08007966 <indev_search_obj>:
 * @param proc pointer to  the `lv_indev_proc_t` part of the input device
 * @param obj pointer to a start object, typically the screen
 * @return pointer to the found object or NULL if there was no suitable object
 */
static lv_obj_t * indev_search_obj(const lv_indev_proc_t * proc, lv_obj_t * obj)
{
 8007966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007968:	460c      	mov	r4, r1
 800796a:	4607      	mov	r7, r0
    lv_obj_t * found_p = NULL;

    /*If the point is on this object*/
    /*Check its children too*/
    if(lv_area_is_point_on(&obj->coords, &proc->act_point)) {
 800796c:	1d01      	adds	r1, r0, #4
 800796e:	f104 0010 	add.w	r0, r4, #16
 8007972:	f005 ff83 	bl	800d87c <lv_area_is_point_on>
 8007976:	b908      	cbnz	r0, 800797c <indev_search_obj+0x16>
    lv_obj_t * found_p = NULL;
 8007978:	2000      	movs	r0, #0
 800797a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_t * i;

        LL_READ(obj->child_ll, i) {
 800797c:	1d26      	adds	r6, r4, #4
 800797e:	4630      	mov	r0, r6
 8007980:	f006 f973 	bl	800dc6a <lv_ll_get_head>
 8007984:	4605      	mov	r5, r0
 8007986:	b930      	cbnz	r0, 8007996 <indev_search_obj+0x30>
            }
        }

        /*If then the children was not ok, and this obj is clickable
         * and it or its parent is not hidden then save this object*/
        if(found_p == NULL && lv_obj_get_click(obj) != false) {
 8007988:	4620      	mov	r0, r4
 800798a:	f001 fa02 	bl	8008d92 <lv_obj_get_click>
 800798e:	2800      	cmp	r0, #0
 8007990:	d0f2      	beq.n	8007978 <indev_search_obj+0x12>
 8007992:	4625      	mov	r5, r4
 8007994:	e012      	b.n	80079bc <indev_search_obj+0x56>
            found_p = indev_search_obj(proc, i);
 8007996:	4629      	mov	r1, r5
 8007998:	4638      	mov	r0, r7
 800799a:	f7ff ffe4 	bl	8007966 <indev_search_obj>
            if(found_p != NULL) {
 800799e:	b988      	cbnz	r0, 80079c4 <indev_search_obj+0x5e>
        LL_READ(obj->child_ll, i) {
 80079a0:	4629      	mov	r1, r5
 80079a2:	4630      	mov	r0, r6
 80079a4:	f006 f967 	bl	800dc76 <lv_ll_get_next>
 80079a8:	e7ec      	b.n	8007984 <indev_search_obj+0x1e>
            lv_obj_t * hidden_i = obj;
            while(hidden_i != NULL) {
                if(lv_obj_get_hidden(hidden_i) == true) break;
 80079aa:	4628      	mov	r0, r5
 80079ac:	f001 f9ec 	bl	8008d88 <lv_obj_get_hidden>
 80079b0:	2800      	cmp	r0, #0
 80079b2:	d1e1      	bne.n	8007978 <indev_search_obj+0x12>
                hidden_i = lv_obj_get_parent(hidden_i);
 80079b4:	4628      	mov	r0, r5
 80079b6:	f001 f903 	bl	8008bc0 <lv_obj_get_parent>
 80079ba:	4605      	mov	r5, r0
            while(hidden_i != NULL) {
 80079bc:	2d00      	cmp	r5, #0
 80079be:	d1f4      	bne.n	80079aa <indev_search_obj+0x44>
            }
            /*No parent found with hidden == true*/
            if(hidden_i == NULL) found_p = obj;
 80079c0:	4620      	mov	r0, r4
        }

    }

    return found_p;
 80079c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}
 80079c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080079c8 <indev_proc_press>:
{
 80079c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(proc->wait_unil_release != 0) return;
 80079cc:	7f03      	ldrb	r3, [r0, #28]
{
 80079ce:	4604      	mov	r4, r0
    if(proc->wait_unil_release != 0) return;
 80079d0:	075a      	lsls	r2, r3, #29
 80079d2:	d428      	bmi.n	8007a26 <indev_proc_press+0x5e>
    lv_obj_t * pr_obj = proc->act_obj;
 80079d4:	6945      	ldr	r5, [r0, #20]
    if(proc->act_obj == NULL) {
 80079d6:	b97d      	cbnz	r5, 80079f8 <indev_proc_press+0x30>
        pr_obj = indev_search_obj(proc, lv_layer_top());
 80079d8:	f001 f8e6 	bl	8008ba8 <lv_layer_top>
 80079dc:	4601      	mov	r1, r0
 80079de:	4620      	mov	r0, r4
 80079e0:	f7ff ffc1 	bl	8007966 <indev_search_obj>
        if(pr_obj == NULL) pr_obj = indev_search_obj(proc, lv_scr_act());
 80079e4:	4605      	mov	r5, r0
 80079e6:	b978      	cbnz	r0, 8007a08 <indev_proc_press+0x40>
 80079e8:	f001 f8d8 	bl	8008b9c <lv_scr_act>
 80079ec:	4601      	mov	r1, r0
 80079ee:	4620      	mov	r0, r4
 80079f0:	f7ff ffb9 	bl	8007966 <indev_search_obj>
 80079f4:	4605      	mov	r5, r0
 80079f6:	e007      	b.n	8007a08 <indev_proc_press+0x40>
    else if(proc->drag_in_prog == 0 &&
 80079f8:	079b      	lsls	r3, r3, #30
 80079fa:	d405      	bmi.n	8007a08 <indev_proc_press+0x40>
            lv_obj_is_protected(proc->act_obj, LV_PROTECT_PRESS_LOST) == false) {/*Now act_obj != NULL*/
 80079fc:	2110      	movs	r1, #16
 80079fe:	4628      	mov	r0, r5
 8007a00:	f001 fa30 	bl	8008e64 <lv_obj_is_protected>
    else if(proc->drag_in_prog == 0 &&
 8007a04:	2800      	cmp	r0, #0
 8007a06:	d0e7      	beq.n	80079d8 <indev_proc_press+0x10>
    if(pr_obj != proc->act_obj) {
 8007a08:	6960      	ldr	r0, [r4, #20]
 8007a0a:	4285      	cmp	r5, r0
 8007a0c:	d10e      	bne.n	8007a2c <indev_proc_press+0x64>
    proc->vect.x = proc->act_point.x - proc->last_point.x;
 8007a0e:	8922      	ldrh	r2, [r4, #8]
 8007a10:	88a3      	ldrh	r3, [r4, #4]
    proc->act_obj = pr_obj;            /*Save the pressed object*/
 8007a12:	6165      	str	r5, [r4, #20]
    proc->vect.x = proc->act_point.x - proc->last_point.x;
 8007a14:	1a9b      	subs	r3, r3, r2
    proc->vect.y = proc->act_point.y - proc->last_point.y;
 8007a16:	8962      	ldrh	r2, [r4, #10]
    proc->last_obj = proc->act_obj;   /*Refresh the last_obj*/
 8007a18:	61a5      	str	r5, [r4, #24]
    proc->vect.x = proc->act_point.x - proc->last_point.x;
 8007a1a:	81a3      	strh	r3, [r4, #12]
    proc->vect.y = proc->act_point.y - proc->last_point.y;
 8007a1c:	88e3      	ldrh	r3, [r4, #6]
 8007a1e:	1a9b      	subs	r3, r3, r2
 8007a20:	81e3      	strh	r3, [r4, #14]
    if(proc->act_obj != NULL) {
 8007a22:	2d00      	cmp	r5, #0
 8007a24:	d148      	bne.n	8007ab8 <indev_proc_press+0xf0>
}
 8007a26:	b003      	add	sp, #12
 8007a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        proc->last_point.x = proc->act_point.x;
 8007a2c:	88a3      	ldrh	r3, [r4, #4]
 8007a2e:	8123      	strh	r3, [r4, #8]
        proc->last_point.y = proc->act_point.y;
 8007a30:	88e3      	ldrh	r3, [r4, #6]
 8007a32:	8163      	strh	r3, [r4, #10]
        if(proc->act_obj != NULL) {
 8007a34:	2800      	cmp	r0, #0
 8007a36:	d135      	bne.n	8007aa4 <indev_proc_press+0xdc>
        if(pr_obj != NULL) {
 8007a38:	2d00      	cmp	r5, #0
 8007a3a:	d0e8      	beq.n	8007a0e <indev_proc_press+0x46>
            proc->pr_timestamp = lv_tick_get();
 8007a3c:	f005 fd68 	bl	800d510 <lv_tick_get>
            proc->long_pr_sent = 0;
 8007a40:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
            proc->drag_sum.x = 0;
 8007a44:	2600      	movs	r6, #0
            proc->pr_timestamp = lv_tick_get();
 8007a46:	6220      	str	r0, [r4, #32]
            proc->long_pr_sent = 0;
 8007a48:	f36f 0300 	bfc	r3, #0, #1
            proc->drag_sum.y = 0;
 8007a4c:	4628      	mov	r0, r5
            proc->drag_sum.x = 0;
 8007a4e:	8226      	strh	r6, [r4, #16]
            proc->long_pr_sent = 0;
 8007a50:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
            proc->drag_range_out = 0;
 8007a54:	7f23      	ldrb	r3, [r4, #28]
            proc->drag_sum.y = 0;
 8007a56:	8266      	strh	r6, [r4, #18]
            proc->drag_in_prog = 0;
 8007a58:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007a5c:	f36f 0341 	bfc	r3, #1, #1
 8007a60:	7723      	strb	r3, [r4, #28]
                if(i->top != 0) last_top = i;
 8007a62:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8007a66:	f013 0f20 	tst.w	r3, #32
 8007a6a:	bf18      	it	ne
 8007a6c:	4606      	movne	r6, r0
                i = lv_obj_get_parent(i);
 8007a6e:	f001 f8a7 	bl	8008bc0 <lv_obj_get_parent>
            while(i != NULL) {
 8007a72:	2800      	cmp	r0, #0
 8007a74:	d1f5      	bne.n	8007a62 <indev_proc_press+0x9a>
            if(last_top != NULL) {
 8007a76:	b156      	cbz	r6, 8007a8e <indev_proc_press+0xc6>
                lv_obj_t * par = lv_obj_get_parent(last_top);
 8007a78:	4630      	mov	r0, r6
 8007a7a:	f001 f8a1 	bl	8008bc0 <lv_obj_get_parent>
                lv_ll_chg_list(&par->child_ll, &par->child_ll, last_top);
 8007a7e:	1d01      	adds	r1, r0, #4
 8007a80:	4632      	mov	r2, r6
 8007a82:	4608      	mov	r0, r1
 8007a84:	f006 f97e 	bl	800dd84 <lv_ll_chg_list>
                lv_obj_invalidate(last_top);
 8007a88:	4630      	mov	r0, r6
 8007a8a:	f000 fc15 	bl	80082b8 <lv_obj_invalidate>
            pr_obj->signal_func(pr_obj, LV_SIGNAL_PRESSED, indev_act);
 8007a8e:	4a65      	ldr	r2, [pc, #404]	; (8007c24 <indev_proc_press+0x25c>)
 8007a90:	2106      	movs	r1, #6
 8007a92:	69ab      	ldr	r3, [r5, #24]
 8007a94:	4628      	mov	r0, r5
 8007a96:	6812      	ldr	r2, [r2, #0]
 8007a98:	4798      	blx	r3
            if(proc->reset_query != 0) return;
 8007a9a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8007a9e:	079e      	lsls	r6, r3, #30
 8007aa0:	d5b5      	bpl.n	8007a0e <indev_proc_press+0x46>
 8007aa2:	e7c0      	b.n	8007a26 <indev_proc_press+0x5e>
            proc->act_obj->signal_func(proc->act_obj, LV_SIGNAL_PRESS_LOST, indev_act);
 8007aa4:	4a5f      	ldr	r2, [pc, #380]	; (8007c24 <indev_proc_press+0x25c>)
 8007aa6:	2108      	movs	r1, #8
 8007aa8:	6983      	ldr	r3, [r0, #24]
 8007aaa:	6812      	ldr	r2, [r2, #0]
 8007aac:	4798      	blx	r3
            if(proc->reset_query != 0) return;
 8007aae:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8007ab2:	079f      	lsls	r7, r3, #30
 8007ab4:	d5c0      	bpl.n	8007a38 <indev_proc_press+0x70>
 8007ab6:	e7b6      	b.n	8007a26 <indev_proc_press+0x5e>
        proc->act_obj->signal_func(proc->act_obj, LV_SIGNAL_PRESSING, indev_act);
 8007ab8:	4f5a      	ldr	r7, [pc, #360]	; (8007c24 <indev_proc_press+0x25c>)
 8007aba:	2107      	movs	r1, #7
 8007abc:	69ab      	ldr	r3, [r5, #24]
 8007abe:	4628      	mov	r0, r5
 8007ac0:	683a      	ldr	r2, [r7, #0]
 8007ac2:	4798      	blx	r3
        if(proc->reset_query != 0) return;
 8007ac4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8007ac8:	0798      	lsls	r0, r3, #30
 8007aca:	d4ac      	bmi.n	8007a26 <indev_proc_press+0x5e>
 * Handle the dragging of indev_proc_p->act_obj
 * @param indev pointer to a input device state
 */
static void indev_drag(lv_indev_proc_t * state)
{
    lv_obj_t * drag_obj = state->act_obj;
 8007acc:	6966      	ldr	r6, [r4, #20]

    /*If drag parent is active check recursively the drag_parent attribute*/
    while(lv_obj_get_drag_parent(drag_obj) != false &&
 8007ace:	4630      	mov	r0, r6
 8007ad0:	f001 f96e 	bl	8008db0 <lv_obj_get_drag_parent>
 8007ad4:	2800      	cmp	r0, #0
 8007ad6:	d041      	beq.n	8007b5c <indev_proc_press+0x194>
 8007ad8:	2e00      	cmp	r6, #0
 8007ada:	d13a      	bne.n	8007b52 <indev_proc_press+0x18a>
        if(proc->reset_query != 0) return;
 8007adc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8007ae0:	0799      	lsls	r1, r3, #30
 8007ae2:	d4a0      	bmi.n	8007a26 <indev_proc_press+0x5e>
        if(proc->drag_in_prog == 0 && proc->long_pr_sent == 0) {
 8007ae4:	7f22      	ldrb	r2, [r4, #28]
 8007ae6:	0792      	lsls	r2, r2, #30
 8007ae8:	d49d      	bmi.n	8007a26 <indev_proc_press+0x5e>
 8007aea:	07de      	lsls	r6, r3, #31
 8007aec:	d418      	bmi.n	8007b20 <indev_proc_press+0x158>
            if(lv_tick_elaps(proc->pr_timestamp) > LV_INDEV_LONG_PRESS_TIME) {
 8007aee:	6a20      	ldr	r0, [r4, #32]
 8007af0:	f005 fd1c 	bl	800d52c <lv_tick_elaps>
 8007af4:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 8007af8:	d90f      	bls.n	8007b1a <indev_proc_press+0x152>
                pr_obj->signal_func(pr_obj, LV_SIGNAL_LONG_PRESS, indev_act);
 8007afa:	69ab      	ldr	r3, [r5, #24]
 8007afc:	210a      	movs	r1, #10
 8007afe:	683a      	ldr	r2, [r7, #0]
 8007b00:	4628      	mov	r0, r5
 8007b02:	4798      	blx	r3
                if(proc->reset_query != 0) return;
 8007b04:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8007b08:	0798      	lsls	r0, r3, #30
 8007b0a:	d48c      	bmi.n	8007a26 <indev_proc_press+0x5e>
                proc->long_pr_sent = 1;
 8007b0c:	f043 0301 	orr.w	r3, r3, #1
 8007b10:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
                proc->longpr_rep_timestamp = lv_tick_get();
 8007b14:	f005 fcfc 	bl	800d510 <lv_tick_get>
 8007b18:	6260      	str	r0, [r4, #36]	; 0x24
        if(proc->drag_in_prog == 0 && proc->long_pr_sent == 1) {
 8007b1a:	7f23      	ldrb	r3, [r4, #28]
 8007b1c:	0799      	lsls	r1, r3, #30
 8007b1e:	d482      	bmi.n	8007a26 <indev_proc_press+0x5e>
 8007b20:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8007b24:	07da      	lsls	r2, r3, #31
 8007b26:	f57f af7e 	bpl.w	8007a26 <indev_proc_press+0x5e>
            if(lv_tick_elaps(proc->longpr_rep_timestamp) > LV_INDEV_LONG_PRESS_REP_TIME) {
 8007b2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007b2c:	f005 fcfe 	bl	800d52c <lv_tick_elaps>
 8007b30:	2864      	cmp	r0, #100	; 0x64
 8007b32:	f67f af78 	bls.w	8007a26 <indev_proc_press+0x5e>
                pr_obj->signal_func(pr_obj, LV_SIGNAL_LONG_PRESS_REP, indev_act);
 8007b36:	69ab      	ldr	r3, [r5, #24]
 8007b38:	210b      	movs	r1, #11
 8007b3a:	683a      	ldr	r2, [r7, #0]
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	4798      	blx	r3
                if(proc->reset_query != 0) return;
 8007b40:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8007b44:	079b      	lsls	r3, r3, #30
 8007b46:	f53f af6e 	bmi.w	8007a26 <indev_proc_press+0x5e>
                proc->longpr_rep_timestamp = lv_tick_get();
 8007b4a:	f005 fce1 	bl	800d510 <lv_tick_get>
 8007b4e:	6260      	str	r0, [r4, #36]	; 0x24
 8007b50:	e769      	b.n	8007a26 <indev_proc_press+0x5e>
            drag_obj != NULL) {
        drag_obj = lv_obj_get_parent(drag_obj);
 8007b52:	4630      	mov	r0, r6
 8007b54:	f001 f834 	bl	8008bc0 <lv_obj_get_parent>
 8007b58:	4606      	mov	r6, r0
 8007b5a:	e7b8      	b.n	8007ace <indev_proc_press+0x106>
    }

    if(drag_obj == NULL) return;
 8007b5c:	2e00      	cmp	r6, #0
 8007b5e:	d0bd      	beq.n	8007adc <indev_proc_press+0x114>

    if(lv_obj_get_drag(drag_obj) == false) return;
 8007b60:	4630      	mov	r0, r6
 8007b62:	f001 f91b 	bl	8008d9c <lv_obj_get_drag>
 8007b66:	2800      	cmp	r0, #0
 8007b68:	d0b8      	beq.n	8007adc <indev_proc_press+0x114>

    /*If still there is no drag then count the movement*/
    if(state->drag_range_out == 0) {
 8007b6a:	7f23      	ldrb	r3, [r4, #28]
 8007b6c:	07d9      	lsls	r1, r3, #31
 8007b6e:	d419      	bmi.n	8007ba4 <indev_proc_press+0x1dc>
        state->drag_sum.x += state->vect.x;
 8007b70:	8a22      	ldrh	r2, [r4, #16]
 8007b72:	89a3      	ldrh	r3, [r4, #12]
        state->drag_sum.y += state->vect.y;
 8007b74:	89e1      	ldrh	r1, [r4, #14]
        state->drag_sum.x += state->vect.x;
 8007b76:	441a      	add	r2, r3
        state->drag_sum.y += state->vect.y;
 8007b78:	8a63      	ldrh	r3, [r4, #18]
        state->drag_sum.x += state->vect.x;
 8007b7a:	b212      	sxth	r2, r2
        state->drag_sum.y += state->vect.y;
 8007b7c:	440b      	add	r3, r1

        /*If a move is greater then LV_DRAG_LIMIT then begin the drag*/
        if(LV_MATH_ABS(state->drag_sum.x) >= LV_INDEV_DRAG_LIMIT ||
 8007b7e:	2a00      	cmp	r2, #0
        state->drag_sum.x += state->vect.x;
 8007b80:	8222      	strh	r2, [r4, #16]
        state->drag_sum.y += state->vect.y;
 8007b82:	b21b      	sxth	r3, r3
        if(LV_MATH_ABS(state->drag_sum.x) >= LV_INDEV_DRAG_LIMIT ||
 8007b84:	bfb8      	it	lt
 8007b86:	4252      	neglt	r2, r2
        state->drag_sum.y += state->vect.y;
 8007b88:	8263      	strh	r3, [r4, #18]
        if(LV_MATH_ABS(state->drag_sum.x) >= LV_INDEV_DRAG_LIMIT ||
 8007b8a:	2a09      	cmp	r2, #9
 8007b8c:	dc04      	bgt.n	8007b98 <indev_proc_press+0x1d0>
                LV_MATH_ABS(state->drag_sum.y) >= LV_INDEV_DRAG_LIMIT) {
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	bfb8      	it	lt
 8007b92:	425b      	neglt	r3, r3
        if(LV_MATH_ABS(state->drag_sum.x) >= LV_INDEV_DRAG_LIMIT ||
 8007b94:	2b09      	cmp	r3, #9
 8007b96:	dda1      	ble.n	8007adc <indev_proc_press+0x114>
            state->drag_range_out = 1;
 8007b98:	7f23      	ldrb	r3, [r4, #28]
 8007b9a:	f043 0301 	orr.w	r3, r3, #1
        }
    }

    /*If the drag limit is stepped over then handle the dragging*/
    if(state->drag_range_out != 0) {
 8007b9e:	07da      	lsls	r2, r3, #31
            state->drag_range_out = 1;
 8007ba0:	7723      	strb	r3, [r4, #28]
    if(state->drag_range_out != 0) {
 8007ba2:	d59b      	bpl.n	8007adc <indev_proc_press+0x114>
        /*Set new position if the vector is not zero*/
        if(state->vect.x != 0 ||
 8007ba4:	68e3      	ldr	r3, [r4, #12]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d098      	beq.n	8007adc <indev_proc_press+0x114>
                state->vect.y != 0) {
            /*Get the coordinates of the object and modify them*/
            lv_coord_t act_x = lv_obj_get_x(drag_obj);
 8007baa:	4630      	mov	r0, r6
 8007bac:	f001 f882 	bl	8008cb4 <lv_obj_get_x>
 8007bb0:	4681      	mov	r9, r0
            lv_coord_t act_y = lv_obj_get_y(drag_obj);
 8007bb2:	4630      	mov	r0, r6
 8007bb4:	f001 f884 	bl	8008cc0 <lv_obj_get_y>
 8007bb8:	9001      	str	r0, [sp, #4]
            uint16_t inv_buf_size = lv_refr_get_buf_size(); /*Get the number of currently invalidated areas*/
 8007bba:	f001 fbc5 	bl	8009348 <lv_refr_get_buf_size>

            lv_coord_t prev_x = drag_obj->coords.x1;
            lv_coord_t prev_y = drag_obj->coords.y1;

            lv_obj_set_pos(drag_obj, act_x + state->vect.x, act_y + state->vect.y);
 8007bbe:	89e3      	ldrh	r3, [r4, #14]
 8007bc0:	9a01      	ldr	r2, [sp, #4]
            uint16_t inv_buf_size = lv_refr_get_buf_size(); /*Get the number of currently invalidated areas*/
 8007bc2:	4680      	mov	r8, r0
            lv_obj_set_pos(drag_obj, act_x + state->vect.x, act_y + state->vect.y);
 8007bc4:	89a1      	ldrh	r1, [r4, #12]
 8007bc6:	4630      	mov	r0, r6
 8007bc8:	441a      	add	r2, r3
            lv_coord_t prev_x = drag_obj->coords.x1;
 8007bca:	f9b6 b010 	ldrsh.w	fp, [r6, #16]
            lv_obj_set_pos(drag_obj, act_x + state->vect.x, act_y + state->vect.y);
 8007bce:	4449      	add	r1, r9
            lv_coord_t prev_y = drag_obj->coords.y1;
 8007bd0:	f9b6 a012 	ldrsh.w	sl, [r6, #18]
            lv_obj_set_pos(drag_obj, act_x + state->vect.x, act_y + state->vect.y);
 8007bd4:	b212      	sxth	r2, r2
 8007bd6:	b209      	sxth	r1, r1
 8007bd8:	f000 fc08 	bl	80083ec <lv_obj_set_pos>

            /*Set the drag in progress flag if the object is really moved*/

            if(drag_obj->coords.x1 != prev_x || drag_obj->coords.y1 != prev_y) {
 8007bdc:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
 8007be0:	455b      	cmp	r3, fp
 8007be2:	d103      	bne.n	8007bec <indev_proc_press+0x224>
 8007be4:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
 8007be8:	4553      	cmp	r3, sl
 8007bea:	d012      	beq.n	8007c12 <indev_proc_press+0x24a>
                if(state->drag_range_out != 0) { /*Send the drag begin signal on first move*/
 8007bec:	7f23      	ldrb	r3, [r4, #28]
 8007bee:	07db      	lsls	r3, r3, #31
 8007bf0:	d404      	bmi.n	8007bfc <indev_proc_press+0x234>
                    drag_obj->signal_func(drag_obj,  LV_SIGNAL_DRAG_BEGIN, indev_act);
                    if(state->reset_query != 0) return;
                }
                state->drag_in_prog = 1;
 8007bf2:	7f23      	ldrb	r3, [r4, #28]
 8007bf4:	f043 0302 	orr.w	r3, r3, #2
 8007bf8:	7723      	strb	r3, [r4, #28]
 8007bfa:	e76f      	b.n	8007adc <indev_proc_press+0x114>
                    drag_obj->signal_func(drag_obj,  LV_SIGNAL_DRAG_BEGIN, indev_act);
 8007bfc:	69b3      	ldr	r3, [r6, #24]
 8007bfe:	210c      	movs	r1, #12
 8007c00:	683a      	ldr	r2, [r7, #0]
 8007c02:	4630      	mov	r0, r6
 8007c04:	4798      	blx	r3
                    if(state->reset_query != 0) return;
 8007c06:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8007c0a:	0798      	lsls	r0, r3, #30
 8007c0c:	f53f af0b 	bmi.w	8007a26 <indev_proc_press+0x5e>
 8007c10:	e7ef      	b.n	8007bf2 <indev_proc_press+0x22a>
            }
            /*If the object didn't moved then clear the invalidated areas*/
            else {
                uint16_t new_inv_buf_size = lv_refr_get_buf_size();
 8007c12:	f001 fb99 	bl	8009348 <lv_refr_get_buf_size>
                lv_refr_pop_from_buf(new_inv_buf_size - inv_buf_size);
 8007c16:	eba0 0008 	sub.w	r0, r0, r8
 8007c1a:	b280      	uxth	r0, r0
 8007c1c:	f001 fb9a 	bl	8009354 <lv_refr_pop_from_buf>
 8007c20:	e75c      	b.n	8007adc <indev_proc_press+0x114>
 8007c22:	bf00      	nop
 8007c24:	20000970 	.word	0x20000970

08007c28 <indev_proc_release>:
{
 8007c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(proc->wait_unil_release != 0) {
 8007c2c:	7f03      	ldrb	r3, [r0, #28]
{
 8007c2e:	4604      	mov	r4, r0
    if(proc->wait_unil_release != 0) {
 8007c30:	0759      	lsls	r1, r3, #29
 8007c32:	d507      	bpl.n	8007c44 <indev_proc_release+0x1c>
        proc->act_obj = NULL;
 8007c34:	2200      	movs	r2, #0
        proc->wait_unil_release = 0;
 8007c36:	f362 0382 	bfi	r3, r2, #2, #1
        proc->act_obj = NULL;
 8007c3a:	6142      	str	r2, [r0, #20]
        proc->last_obj = NULL;
 8007c3c:	6182      	str	r2, [r0, #24]
        proc->pr_timestamp = 0;
 8007c3e:	6202      	str	r2, [r0, #32]
        proc->longpr_rep_timestamp = 0;
 8007c40:	6242      	str	r2, [r0, #36]	; 0x24
        proc->wait_unil_release = 0;
 8007c42:	7703      	strb	r3, [r0, #28]
    if(proc->act_obj != NULL) {
 8007c44:	6960      	ldr	r0, [r4, #20]
 8007c46:	2800      	cmp	r0, #0
 8007c48:	d03f      	beq.n	8007cca <indev_proc_release+0xa2>
        if(lv_obj_is_protected(proc->act_obj, LV_PROTECT_PRESS_LOST)) {
 8007c4a:	2110      	movs	r1, #16
 8007c4c:	4d5e      	ldr	r5, [pc, #376]	; (8007dc8 <indev_proc_release+0x1a0>)
 8007c4e:	f001 f909 	bl	8008e64 <lv_obj_is_protected>
 8007c52:	2800      	cmp	r0, #0
 8007c54:	d045      	beq.n	8007ce2 <indev_proc_release+0xba>
            lv_obj_t * obj_on = indev_search_obj(proc, proc->act_obj);
 8007c56:	6961      	ldr	r1, [r4, #20]
 8007c58:	4620      	mov	r0, r4
 8007c5a:	f7ff fe84 	bl	8007966 <indev_search_obj>
            if(obj_on == proc->act_obj) proc->act_obj->signal_func(proc->act_obj, LV_SIGNAL_RELEASED, indev_act);
 8007c5e:	6963      	ldr	r3, [r4, #20]
 8007c60:	4298      	cmp	r0, r3
 8007c62:	d104      	bne.n	8007c6e <indev_proc_release+0x46>
 8007c64:	6983      	ldr	r3, [r0, #24]
            proc->act_obj->signal_func(proc->act_obj, LV_SIGNAL_RELEASED, indev_act);
 8007c66:	682a      	ldr	r2, [r5, #0]
 8007c68:	2109      	movs	r1, #9
 8007c6a:	4798      	blx	r3
 8007c6c:	e004      	b.n	8007c78 <indev_proc_release+0x50>
            else proc->act_obj->signal_func(proc->act_obj, LV_SIGNAL_PRESS_LOST, indev_act);
 8007c6e:	699e      	ldr	r6, [r3, #24]
 8007c70:	2108      	movs	r1, #8
 8007c72:	682a      	ldr	r2, [r5, #0]
 8007c74:	4618      	mov	r0, r3
 8007c76:	47b0      	blx	r6
        lv_group_t * act_g = lv_obj_get_group(proc->act_obj);
 8007c78:	6960      	ldr	r0, [r4, #20]
 8007c7a:	f001 f900 	bl	8008e7e <lv_obj_get_group>
 8007c7e:	4605      	mov	r5, r0
        if(lv_group_get_editing(act_g)) {
 8007c80:	f7ff fe65 	bl	800794e <lv_group_get_editing>
 8007c84:	b140      	cbz	r0, 8007c98 <indev_proc_release+0x70>
            lv_group_set_editing(act_g, false);
 8007c86:	2100      	movs	r1, #0
 8007c88:	4628      	mov	r0, r5
 8007c8a:	f7ff fe53 	bl	8007934 <lv_group_set_editing>
            proc->act_obj->signal_func(proc->act_obj, LV_SIGNAL_FOCUS, NULL);       /*Focus again to properly leave edit mode*/
 8007c8e:	6960      	ldr	r0, [r4, #20]
 8007c90:	2200      	movs	r2, #0
 8007c92:	210e      	movs	r1, #14
 8007c94:	6983      	ldr	r3, [r0, #24]
 8007c96:	4798      	blx	r3
        if(lv_obj_is_protected(proc->act_obj, LV_PROTECT_CLICK_FOCUS) == false) {       /*Respect the click protection*/
 8007c98:	2120      	movs	r1, #32
 8007c9a:	6960      	ldr	r0, [r4, #20]
 8007c9c:	f001 f8e2 	bl	8008e64 <lv_obj_is_protected>
 8007ca0:	b958      	cbnz	r0, 8007cba <indev_proc_release+0x92>
            lv_group_t * g = lv_obj_get_group(proc->act_obj);
 8007ca2:	6960      	ldr	r0, [r4, #20]
 8007ca4:	f001 f8eb 	bl	8008e7e <lv_obj_get_group>
            lv_obj_t * parent = proc->act_obj;
 8007ca8:	6965      	ldr	r5, [r4, #20]
            while(g == NULL) {
 8007caa:	b1e8      	cbz	r0, 8007ce8 <indev_proc_release+0xc0>
            if(g != NULL && parent != NULL)
 8007cac:	b12d      	cbz	r5, 8007cba <indev_proc_release+0x92>
                if(lv_group_get_click_focus(g)) {
 8007cae:	f7ff fe54 	bl	800795a <lv_group_get_click_focus>
 8007cb2:	b110      	cbz	r0, 8007cba <indev_proc_release+0x92>
                    lv_group_focus_obj(parent);
 8007cb4:	4628      	mov	r0, r5
 8007cb6:	f7ff fd36 	bl	8007726 <lv_group_focus_obj>
        if(proc->reset_query != 0) return;
 8007cba:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8007cbe:	f013 0302 	ands.w	r3, r3, #2
 8007cc2:	d17e      	bne.n	8007dc2 <indev_proc_release+0x19a>
        proc->act_obj = NULL;
 8007cc4:	6163      	str	r3, [r4, #20]
        proc->pr_timestamp = 0;
 8007cc6:	6223      	str	r3, [r4, #32]
        proc->longpr_rep_timestamp = 0;
 8007cc8:	6263      	str	r3, [r4, #36]	; 0x24
    if(proc->last_obj != NULL && proc->reset_query == 0) {
 8007cca:	69a5      	ldr	r5, [r4, #24]
 8007ccc:	2d00      	cmp	r5, #0
 8007cce:	d078      	beq.n	8007dc2 <indev_proc_release+0x19a>
 8007cd0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8007cd4:	079a      	lsls	r2, r3, #30
 8007cd6:	d474      	bmi.n	8007dc2 <indev_proc_release+0x19a>
 * Handle throwing by drag if the drag is ended
 * @param indev pointer to an input device state
 */
static void indev_drag_throw(lv_indev_proc_t * state)
{
    if(state->drag_in_prog == 0) return;
 8007cd8:	7f23      	ldrb	r3, [r4, #28]
 8007cda:	079b      	lsls	r3, r3, #30
 8007cdc:	d417      	bmi.n	8007d0e <indev_proc_release+0xe6>
 8007cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            proc->act_obj->signal_func(proc->act_obj, LV_SIGNAL_RELEASED, indev_act);
 8007ce2:	6960      	ldr	r0, [r4, #20]
 8007ce4:	6983      	ldr	r3, [r0, #24]
 8007ce6:	e7be      	b.n	8007c66 <indev_proc_release+0x3e>
                parent = lv_obj_get_parent(parent);
 8007ce8:	4628      	mov	r0, r5
 8007cea:	f000 ff69 	bl	8008bc0 <lv_obj_get_parent>
                if(parent == NULL) break;
 8007cee:	4605      	mov	r5, r0
 8007cf0:	2800      	cmp	r0, #0
 8007cf2:	d0e2      	beq.n	8007cba <indev_proc_release+0x92>
                if(lv_obj_is_protected(parent, LV_PROTECT_CLICK_FOCUS)) {   /*Ignore is the protected against click focus*/
 8007cf4:	2120      	movs	r1, #32
 8007cf6:	f001 f8b5 	bl	8008e64 <lv_obj_is_protected>
 8007cfa:	2800      	cmp	r0, #0
 8007cfc:	d1dd      	bne.n	8007cba <indev_proc_release+0x92>
                g = lv_obj_get_group(parent);
 8007cfe:	4628      	mov	r0, r5
 8007d00:	f001 f8bd 	bl	8008e7e <lv_obj_get_group>
 8007d04:	e7d1      	b.n	8007caa <indev_proc_release+0x82>
    lv_obj_t * drag_obj = state->last_obj;

    /*If drag parent is active check recursively the drag_parent attribute*/
    while(lv_obj_get_drag_parent(drag_obj) != false &&
            drag_obj != NULL) {
        drag_obj = lv_obj_get_parent(drag_obj);
 8007d06:	4628      	mov	r0, r5
 8007d08:	f000 ff5a 	bl	8008bc0 <lv_obj_get_parent>
 8007d0c:	4605      	mov	r5, r0
    while(lv_obj_get_drag_parent(drag_obj) != false &&
 8007d0e:	4628      	mov	r0, r5
 8007d10:	f001 f84e 	bl	8008db0 <lv_obj_get_drag_parent>
 8007d14:	b118      	cbz	r0, 8007d1e <indev_proc_release+0xf6>
 8007d16:	2d00      	cmp	r5, #0
 8007d18:	d1f5      	bne.n	8007d06 <indev_proc_release+0xde>
 8007d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }

    if(drag_obj == NULL) return;
 8007d1e:	2d00      	cmp	r5, #0
 8007d20:	d04f      	beq.n	8007dc2 <indev_proc_release+0x19a>

    /*Return if the drag throw is not enabled*/
    if(lv_obj_get_drag_throw(drag_obj) == false) {
 8007d22:	4628      	mov	r0, r5
 8007d24:	f001 f83f 	bl	8008da6 <lv_obj_get_drag_throw>
 8007d28:	b920      	cbnz	r0, 8007d34 <indev_proc_release+0x10c>
        state->drag_in_prog = 0;
 8007d2a:	7f23      	ldrb	r3, [r4, #28]
 8007d2c:	f360 0341 	bfi	r3, r0, #1, #1

        }
    }
    /*If the vectors become 0 -> drag_in_prog = 0 and send a drag end signal*/
    else {
        state->drag_in_prog = 0;
 8007d30:	7723      	strb	r3, [r4, #28]
 8007d32:	e03a      	b.n	8007daa <indev_proc_release+0x182>
    state->vect.x = state->vect.x * (100 - LV_INDEV_DRAG_THROW) / 100;
 8007d34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d38:	2164      	movs	r1, #100	; 0x64
 8007d3a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007d3e:	011a      	lsls	r2, r3, #4
    state->vect.y = state->vect.y * (100 - LV_INDEV_DRAG_THROW) / 100;
 8007d40:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8007d44:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007d48:	011b      	lsls	r3, r3, #4
    state->vect.x = state->vect.x * (100 - LV_INDEV_DRAG_THROW) / 100;
 8007d4a:	fb92 f2f1 	sdiv	r2, r2, r1
    state->vect.y = state->vect.y * (100 - LV_INDEV_DRAG_THROW) / 100;
 8007d4e:	fb93 f3f1 	sdiv	r3, r3, r1
    state->vect.x = state->vect.x * (100 - LV_INDEV_DRAG_THROW) / 100;
 8007d52:	81a2      	strh	r2, [r4, #12]
    state->vect.y = state->vect.y * (100 - LV_INDEV_DRAG_THROW) / 100;
 8007d54:	81e3      	strh	r3, [r4, #14]
    if(state->vect.x != 0 ||
 8007d56:	68e2      	ldr	r2, [r4, #12]
 8007d58:	b37a      	cbz	r2, 8007dba <indev_proc_release+0x192>
        lv_coord_t act_x = lv_obj_get_x(drag_obj) + state->vect.x;
 8007d5a:	4628      	mov	r0, r5
 8007d5c:	f000 ffaa 	bl	8008cb4 <lv_obj_get_x>
 8007d60:	89a7      	ldrh	r7, [r4, #12]
 8007d62:	4407      	add	r7, r0
        lv_coord_t act_y = lv_obj_get_y(drag_obj) + state->vect.y;
 8007d64:	4628      	mov	r0, r5
 8007d66:	f000 ffab 	bl	8008cc0 <lv_obj_get_y>
 8007d6a:	89e6      	ldrh	r6, [r4, #14]
        lv_coord_t act_x = lv_obj_get_x(drag_obj) + state->vect.x;
 8007d6c:	b23f      	sxth	r7, r7
        lv_coord_t act_y = lv_obj_get_y(drag_obj) + state->vect.y;
 8007d6e:	4406      	add	r6, r0
        lv_obj_set_pos(drag_obj, act_x, act_y);
 8007d70:	4628      	mov	r0, r5
 8007d72:	4639      	mov	r1, r7
        lv_coord_t act_y = lv_obj_get_y(drag_obj) + state->vect.y;
 8007d74:	b236      	sxth	r6, r6
        lv_obj_set_pos(drag_obj, act_x, act_y);
 8007d76:	4632      	mov	r2, r6
 8007d78:	f000 fb38 	bl	80083ec <lv_obj_set_pos>
        if((lv_obj_get_x(drag_obj) != act_x || state->vect.x == 0) &&
 8007d7c:	4628      	mov	r0, r5
 8007d7e:	f000 ff99 	bl	8008cb4 <lv_obj_get_x>
 8007d82:	4287      	cmp	r7, r0
 8007d84:	d102      	bne.n	8007d8c <indev_proc_release+0x164>
 8007d86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d8a:	b9d3      	cbnz	r3, 8007dc2 <indev_proc_release+0x19a>
                (lv_obj_get_y(drag_obj) != act_y || state->vect.y == 0)) {
 8007d8c:	4628      	mov	r0, r5
 8007d8e:	f000 ff97 	bl	8008cc0 <lv_obj_get_y>
        if((lv_obj_get_x(drag_obj) != act_x || state->vect.x == 0) &&
 8007d92:	4286      	cmp	r6, r0
 8007d94:	d102      	bne.n	8007d9c <indev_proc_release+0x174>
                (lv_obj_get_y(drag_obj) != act_y || state->vect.y == 0)) {
 8007d96:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8007d9a:	b993      	cbnz	r3, 8007dc2 <indev_proc_release+0x19a>
            state->drag_in_prog = 0;
 8007d9c:	7f23      	ldrb	r3, [r4, #28]
 8007d9e:	f36f 0341 	bfc	r3, #1, #1
 8007da2:	7723      	strb	r3, [r4, #28]
            state->vect.x = 0;
 8007da4:	2300      	movs	r3, #0
 8007da6:	81a3      	strh	r3, [r4, #12]
            state->vect.y = 0;
 8007da8:	81e3      	strh	r3, [r4, #14]
        drag_obj->signal_func(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8007daa:	4a07      	ldr	r2, [pc, #28]	; (8007dc8 <indev_proc_release+0x1a0>)
 8007dac:	4628      	mov	r0, r5
 8007dae:	69ab      	ldr	r3, [r5, #24]
 8007db0:	210d      	movs	r1, #13
 8007db2:	6812      	ldr	r2, [r2, #0]
}
 8007db4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        drag_obj->signal_func(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8007db8:	4718      	bx	r3
        state->drag_in_prog = 0;
 8007dba:	7f23      	ldrb	r3, [r4, #28]
 8007dbc:	f362 0341 	bfi	r3, r2, #1, #1
 8007dc0:	e7b6      	b.n	8007d30 <indev_proc_release+0x108>
 8007dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dc6:	bf00      	nop
 8007dc8:	20000970 	.word	0x20000970

08007dcc <indev_proc_reset_query_handler>:
    if(indev->proc.reset_query) {
 8007dcc:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 8007dd0:	0793      	lsls	r3, r2, #30
 8007dd2:	d514      	bpl.n	8007dfe <indev_proc_reset_query_handler+0x32>
        indev->proc.drag_range_out = 0;
 8007dd4:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
        indev->proc.act_obj = NULL;
 8007dd8:	2300      	movs	r3, #0
        indev->proc.reset_query = 0;
 8007dda:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
        indev->proc.drag_in_prog = 0;
 8007dde:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
        indev->proc.act_obj = NULL;
 8007de2:	6203      	str	r3, [r0, #32]
        indev->proc.reset_query = 0;
 8007de4:	f363 0241 	bfi	r2, r3, #1, #1
        indev->proc.last_obj = NULL;
 8007de8:	6243      	str	r3, [r0, #36]	; 0x24
        indev->proc.drag_in_prog = 0;
 8007dea:	f363 0141 	bfi	r1, r3, #1, #1
        indev->proc.pr_timestamp = 0;
 8007dee:	62c3      	str	r3, [r0, #44]	; 0x2c
        indev->proc.longpr_rep_timestamp = 0;
 8007df0:	6303      	str	r3, [r0, #48]	; 0x30
        indev->proc.drag_in_prog = 0;
 8007df2:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
        indev->proc.drag_sum.x = 0;
 8007df6:	8383      	strh	r3, [r0, #28]
        indev->proc.drag_sum.y = 0;
 8007df8:	83c3      	strh	r3, [r0, #30]
        indev->proc.reset_query = 0;
 8007dfa:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
 8007dfe:	4770      	bx	lr

08007e00 <indev_proc_task>:
{
 8007e00:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    i = lv_indev_next(NULL);
 8007e04:	2000      	movs	r0, #0
 8007e06:	4eae      	ldr	r6, [pc, #696]	; (80080c0 <indev_proc_task+0x2c0>)
 8007e08:	f005 fb62 	bl	800d4d0 <lv_indev_next>
 8007e0c:	4604      	mov	r4, r0
        indev_act = i;
 8007e0e:	6034      	str	r4, [r6, #0]
    while(i) {
 8007e10:	b914      	cbnz	r4, 8007e18 <indev_proc_task+0x18>
}
 8007e12:	b004      	add	sp, #16
 8007e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        indev_proc_reset_query_handler(i);
 8007e18:	4620      	mov	r0, r4
 8007e1a:	f7ff ffd7 	bl	8007dcc <indev_proc_reset_query_handler>
        if(i->proc.disabled == 0) {
 8007e1e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8007e22:	0758      	lsls	r0, r3, #29
 8007e24:	d44a      	bmi.n	8007ebc <indev_proc_task+0xbc>
 8007e26:	f104 070c 	add.w	r7, r4, #12
                more_to_read = lv_indev_read(i, &data);
 8007e2a:	a901      	add	r1, sp, #4
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	f005 fb57 	bl	800d4e0 <lv_indev_read>
 8007e32:	4680      	mov	r8, r0
                indev_proc_reset_query_handler(i);          /*The active object might deleted even in the read function*/
 8007e34:	4620      	mov	r0, r4
 8007e36:	f7ff ffc9 	bl	8007dcc <indev_proc_reset_query_handler>
                i->proc.state = data.state;
 8007e3a:	f89d 300c 	ldrb.w	r3, [sp, #12]
                if(i->proc.state == LV_INDEV_STATE_PR) {
 8007e3e:	2b01      	cmp	r3, #1
                i->proc.state = data.state;
 8007e40:	7323      	strb	r3, [r4, #12]
                if(i->proc.state == LV_INDEV_STATE_PR) {
 8007e42:	d102      	bne.n	8007e4a <indev_proc_task+0x4a>
                    i->last_activity_time = lv_tick_get();
 8007e44:	f005 fb64 	bl	800d510 <lv_tick_get>
 8007e48:	63a0      	str	r0, [r4, #56]	; 0x38
                if(i->driver.type == LV_INDEV_TYPE_POINTER) {
 8007e4a:	7823      	ldrb	r3, [r4, #0]
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d11d      	bne.n	8007e8c <indev_proc_task+0x8c>
    if(i->cursor != NULL &&
 8007e50:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007e52:	b148      	cbz	r0, 8007e68 <indev_proc_task+0x68>
 8007e54:	6962      	ldr	r2, [r4, #20]
 8007e56:	9b01      	ldr	r3, [sp, #4]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d005      	beq.n	8007e68 <indev_proc_task+0x68>
        lv_obj_set_pos(i->cursor, data->point.x, data->point.y);
 8007e5c:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8007e60:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8007e64:	f000 fac2 	bl	80083ec <lv_obj_set_pos>
    i->proc.act_point.x = data->point.x;
 8007e68:	f8bd 3004 	ldrh.w	r3, [sp, #4]
        indev_proc_press(&i->proc);
 8007e6c:	4638      	mov	r0, r7
    i->proc.act_point.x = data->point.x;
 8007e6e:	8223      	strh	r3, [r4, #16]
    i->proc.act_point.y = data->point.y;
 8007e70:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8007e74:	8263      	strh	r3, [r4, #18]
    if(i->proc.state == LV_INDEV_STATE_PR) {
 8007e76:	7b23      	ldrb	r3, [r4, #12]
            i->proc.last_point.y == i->proc.act_point.y &&
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	f040 814b 	bne.w	8008114 <indev_proc_task+0x314>
        indev_proc_press(&i->proc);
 8007e7e:	f7ff fda3 	bl	80079c8 <indev_proc_press>
    i->proc.last_point.x = i->proc.act_point.x;
 8007e82:	8a23      	ldrh	r3, [r4, #16]
 8007e84:	82a3      	strh	r3, [r4, #20]
    i->proc.last_point.y = i->proc.act_point.y;
 8007e86:	8a63      	ldrh	r3, [r4, #18]
 8007e88:	82e3      	strh	r3, [r4, #22]
 8007e8a:	e011      	b.n	8007eb0 <indev_proc_task+0xb0>
                } else if(i->driver.type == LV_INDEV_TYPE_KEYPAD) {
 8007e8c:	2b02      	cmp	r3, #2
 8007e8e:	d16c      	bne.n	8007f6a <indev_proc_task+0x16a>
    if(i->group == NULL) return;
 8007e90:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007e92:	b168      	cbz	r0, 8007eb0 <indev_proc_task+0xb0>
    if(data->state == LV_INDEV_STATE_PR &&
 8007e94:	f89d 500c 	ldrb.w	r5, [sp, #12]
 8007e98:	2d01      	cmp	r5, #1
 8007e9a:	d12d      	bne.n	8007ef8 <indev_proc_task+0xf8>
            i->proc.last_state == LV_INDEV_STATE_REL) {
 8007e9c:	7c23      	ldrb	r3, [r4, #16]
    if(data->state == LV_INDEV_STATE_PR &&
 8007e9e:	b993      	cbnz	r3, 8007ec6 <indev_proc_task+0xc6>
        i->proc.pr_timestamp = lv_tick_get();
 8007ea0:	f005 fb36 	bl	800d510 <lv_tick_get>
 8007ea4:	62e0      	str	r0, [r4, #44]	; 0x2c
    i->proc.last_state = data->state;
 8007ea6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8007eaa:	7423      	strb	r3, [r4, #16]
    i->proc.last_key = data->key;
 8007eac:	9b01      	ldr	r3, [sp, #4]
 8007eae:	6163      	str	r3, [r4, #20]
                indev_proc_reset_query_handler(i);
 8007eb0:	4620      	mov	r0, r4
 8007eb2:	f7ff ff8b 	bl	8007dcc <indev_proc_reset_query_handler>
            } while(more_to_read);
 8007eb6:	f1b8 0f00 	cmp.w	r8, #0
 8007eba:	d1b6      	bne.n	8007e2a <indev_proc_task+0x2a>
        i = lv_indev_next(i);    /*Go to the next indev*/
 8007ebc:	4620      	mov	r0, r4
 8007ebe:	f005 fb07 	bl	800d4d0 <lv_indev_next>
 8007ec2:	4604      	mov	r4, r0
 8007ec4:	e7a3      	b.n	8007e0e <indev_proc_task+0xe>
    else if(data->state == LV_INDEV_STATE_PR && i->proc.last_state == LV_INDEV_STATE_PR) {
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d1ed      	bne.n	8007ea6 <indev_proc_task+0xa6>
        if(data->key == LV_GROUP_KEY_ENTER &&
 8007eca:	9b01      	ldr	r3, [sp, #4]
 8007ecc:	2b0a      	cmp	r3, #10
 8007ece:	d1ea      	bne.n	8007ea6 <indev_proc_task+0xa6>
                i->proc.long_pr_sent == 0 &&
 8007ed0:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
        if(data->key == LV_GROUP_KEY_ENTER &&
 8007ed4:	07d9      	lsls	r1, r3, #31
 8007ed6:	d4e6      	bmi.n	8007ea6 <indev_proc_task+0xa6>
                lv_tick_elaps(i->proc.pr_timestamp) > LV_INDEV_LONG_PRESS_TIME) {
 8007ed8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007eda:	f005 fb27 	bl	800d52c <lv_tick_elaps>
                i->proc.long_pr_sent == 0 &&
 8007ede:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 8007ee2:	d9e0      	bls.n	8007ea6 <indev_proc_task+0xa6>
            lv_obj_t * focused = lv_group_get_focused(i->group);
 8007ee4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007ee6:	f7ff fd14 	bl	8007912 <lv_group_get_focused>
            if(focused) {
 8007eea:	2800      	cmp	r0, #0
 8007eec:	d0db      	beq.n	8007ea6 <indev_proc_task+0xa6>
                focused->signal_func(focused, LV_SIGNAL_LONG_PRESS, indev_act);
 8007eee:	6983      	ldr	r3, [r0, #24]
 8007ef0:	210a      	movs	r1, #10
 8007ef2:	6832      	ldr	r2, [r6, #0]
                if(focused) focused->signal_func(focused, LV_SIGNAL_LONG_PRESS, indev_act);
 8007ef4:	4798      	blx	r3
 8007ef6:	e07b      	b.n	8007ff0 <indev_proc_task+0x1f0>
    else if(data->state == LV_INDEV_STATE_REL && i->proc.last_state == LV_INDEV_STATE_PR) {
 8007ef8:	2d00      	cmp	r5, #0
 8007efa:	d1d4      	bne.n	8007ea6 <indev_proc_task+0xa6>
 8007efc:	7c23      	ldrb	r3, [r4, #16]
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d1d1      	bne.n	8007ea6 <indev_proc_task+0xa6>
        data->key = i->proc.last_key;
 8007f02:	6963      	ldr	r3, [r4, #20]
 8007f04:	9301      	str	r3, [sp, #4]
        if(data->key == LV_GROUP_KEY_NEXT || data->key == LV_GROUP_KEY_PREV) {
 8007f06:	f023 0302 	bic.w	r3, r3, #2
 8007f0a:	2b09      	cmp	r3, #9
 8007f0c:	d10e      	bne.n	8007f2c <indev_proc_task+0x12c>
            if(lv_group_get_editing(i->group)) {
 8007f0e:	f7ff fd1e 	bl	800794e <lv_group_get_editing>
 8007f12:	b158      	cbz	r0, 8007f2c <indev_proc_task+0x12c>
                lv_group_set_editing(i->group, false);
 8007f14:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007f16:	4629      	mov	r1, r5
 8007f18:	f7ff fd0c 	bl	8007934 <lv_group_set_editing>
                lv_obj_t * focused = lv_group_get_focused(i->group);
 8007f1c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007f1e:	f7ff fcf8 	bl	8007912 <lv_group_get_focused>
                if(focused) focused->signal_func(focused, LV_SIGNAL_FOCUS, NULL);       /*Focus again to properly leave edit mode*/
 8007f22:	b118      	cbz	r0, 8007f2c <indev_proc_task+0x12c>
 8007f24:	6983      	ldr	r3, [r0, #24]
 8007f26:	462a      	mov	r2, r5
 8007f28:	210e      	movs	r1, #14
 8007f2a:	4798      	blx	r3
        if(data->key == LV_GROUP_KEY_NEXT) {
 8007f2c:	9901      	ldr	r1, [sp, #4]
 8007f2e:	2909      	cmp	r1, #9
 8007f30:	d10b      	bne.n	8007f4a <indev_proc_task+0x14a>
            lv_group_focus_next(i->group);
 8007f32:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007f34:	f7ff fc2a 	bl	800778c <lv_group_focus_next>
        if(i->proc.reset_query) return;     /*The object might be deleted in `focus_cb` or due to any other user event*/
 8007f38:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8007f3c:	f013 0202 	ands.w	r2, r3, #2
 8007f40:	d1b6      	bne.n	8007eb0 <indev_proc_task+0xb0>
        i->proc.pr_timestamp = 0;
 8007f42:	62e2      	str	r2, [r4, #44]	; 0x2c
        i->proc.long_pr_sent = 0;
 8007f44:	f362 0300 	bfi	r3, r2, #0, #1
 8007f48:	e056      	b.n	8007ff8 <indev_proc_task+0x1f8>
        } else if(data->key == LV_GROUP_KEY_PREV) {
 8007f4a:	290b      	cmp	r1, #11
 8007f4c:	d103      	bne.n	8007f56 <indev_proc_task+0x156>
            lv_group_focus_prev(i->group);
 8007f4e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007f50:	f7ff fc95 	bl	800787e <lv_group_focus_prev>
 8007f54:	e7f0      	b.n	8007f38 <indev_proc_task+0x138>
        } else if(data->key == LV_GROUP_KEY_ENTER) {
 8007f56:	290a      	cmp	r1, #10
 8007f58:	d103      	bne.n	8007f62 <indev_proc_task+0x162>
            if(!i->proc.long_pr_sent) {
 8007f5a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8007f5e:	07da      	lsls	r2, r3, #31
 8007f60:	d4ea      	bmi.n	8007f38 <indev_proc_task+0x138>
            lv_group_send_data(i->group, LV_GROUP_KEY_ENTER);
 8007f62:	6be0      	ldr	r0, [r4, #60]	; 0x3c
            if(!i->proc.long_pr_sent) lv_group_send_data(i->group, LV_GROUP_KEY_ENTER);  /*Ignore long pressed enter release because it comes from mode switch*/
 8007f64:	f7ff fcda 	bl	800791c <lv_group_send_data>
 8007f68:	e7e6      	b.n	8007f38 <indev_proc_task+0x138>
                } else if(i->driver.type == LV_INDEV_TYPE_ENCODER) {
 8007f6a:	2b04      	cmp	r3, #4
 8007f6c:	f040 80bd 	bne.w	80080ea <indev_proc_task+0x2ea>
    if(i->group == NULL) return;
 8007f70:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007f72:	2800      	cmp	r0, #0
 8007f74:	d09c      	beq.n	8007eb0 <indev_proc_task+0xb0>
    if(data->state == LV_INDEV_STATE_REL) {
 8007f76:	f89d 500c 	ldrb.w	r5, [sp, #12]
 8007f7a:	2d00      	cmp	r5, #0
 8007f7c:	d03f      	beq.n	8007ffe <indev_proc_task+0x1fe>
    if(data->state == LV_INDEV_STATE_PR &&
 8007f7e:	f89d 500c 	ldrb.w	r5, [sp, #12]
 8007f82:	2d01      	cmp	r5, #1
 8007f84:	d177      	bne.n	8008076 <indev_proc_task+0x276>
            i->proc.last_state == LV_INDEV_STATE_REL) {
 8007f86:	7c23      	ldrb	r3, [r4, #16]
    if(data->state == LV_INDEV_STATE_PR &&
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d089      	beq.n	8007ea0 <indev_proc_task+0xa0>
    else if(data->state == LV_INDEV_STATE_PR && i->proc.last_state == LV_INDEV_STATE_PR) {
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d18a      	bne.n	8007ea6 <indev_proc_task+0xa6>
        if(i->proc.long_pr_sent == 0 &&
 8007f90:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8007f94:	f013 0501 	ands.w	r5, r3, #1
 8007f98:	d185      	bne.n	8007ea6 <indev_proc_task+0xa6>
                lv_tick_elaps(i->proc.pr_timestamp) > LV_INDEV_LONG_PRESS_TIME) {
 8007f9a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007f9c:	f005 fac6 	bl	800d52c <lv_tick_elaps>
        if(i->proc.long_pr_sent == 0 &&
 8007fa0:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 8007fa4:	f67f af7f 	bls.w	8007ea6 <indev_proc_task+0xa6>
            lv_obj_t * focused = lv_group_get_focused(i->group);
 8007fa8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007faa:	f7ff fcb2 	bl	8007912 <lv_group_get_focused>
            bool editable = false;
 8007fae:	f88d 5003 	strb.w	r5, [sp, #3]
            if(focused) focused->signal_func(focused, LV_SIGNAL_GET_EDITABLE, &editable);
 8007fb2:	4605      	mov	r5, r0
 8007fb4:	b120      	cbz	r0, 8007fc0 <indev_proc_task+0x1c0>
 8007fb6:	6983      	ldr	r3, [r0, #24]
 8007fb8:	f10d 0203 	add.w	r2, sp, #3
 8007fbc:	2111      	movs	r1, #17
 8007fbe:	4798      	blx	r3
            if(editable) {
 8007fc0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d04f      	beq.n	8008068 <indev_proc_task+0x268>
                i->group->editing = i->group->editing ? 0 : 1;
 8007fc8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007fca:	f891 3064 	ldrb.w	r3, [r1, #100]	; 0x64
 8007fce:	f083 0202 	eor.w	r2, r3, #2
 8007fd2:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8007fd6:	f362 0341 	bfi	r3, r2, #1, #1
 8007fda:	f881 3064 	strb.w	r3, [r1, #100]	; 0x64
                if(focused) focused->signal_func(focused, LV_SIGNAL_FOCUS, NULL);      /*Focus again. Some object do something on navigate->edit change*/
 8007fde:	b13d      	cbz	r5, 8007ff0 <indev_proc_task+0x1f0>
 8007fe0:	69ab      	ldr	r3, [r5, #24]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	210e      	movs	r1, #14
 8007fe6:	4628      	mov	r0, r5
 8007fe8:	4798      	blx	r3
                if(focused) lv_obj_invalidate(focused);
 8007fea:	4628      	mov	r0, r5
 8007fec:	f000 f964 	bl	80082b8 <lv_obj_invalidate>
            i->proc.long_pr_sent = 1;
 8007ff0:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8007ff4:	f043 0301 	orr.w	r3, r3, #1
        i->proc.long_pr_sent = 0;
 8007ff8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8007ffc:	e753      	b.n	8007ea6 <indev_proc_task+0xa6>
        if(lv_group_get_editing(i->group)) {
 8007ffe:	f7ff fca6 	bl	800794e <lv_group_get_editing>
 8008002:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8008006:	b1b8      	cbz	r0, 8008038 <indev_proc_task+0x238>
            if(data->enc_diff < 0) {
 8008008:	2b00      	cmp	r3, #0
 800800a:	da0a      	bge.n	8008022 <indev_proc_task+0x222>
                for(s = 0; s < -data->enc_diff; s++) lv_group_send_data(i->group, LV_GROUP_KEY_LEFT);
 800800c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8008010:	425b      	negs	r3, r3
 8008012:	429d      	cmp	r5, r3
 8008014:	dab3      	bge.n	8007f7e <indev_proc_task+0x17e>
 8008016:	2114      	movs	r1, #20
 8008018:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800801a:	f7ff fc7f 	bl	800791c <lv_group_send_data>
 800801e:	3501      	adds	r5, #1
 8008020:	e7f4      	b.n	800800c <indev_proc_task+0x20c>
            } else if(data->enc_diff > 0) {
 8008022:	d0ac      	beq.n	8007f7e <indev_proc_task+0x17e>
                for(s = 0; s < data->enc_diff; s++) lv_group_send_data(i->group, LV_GROUP_KEY_RIGHT);
 8008024:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8008028:	429d      	cmp	r5, r3
 800802a:	daa8      	bge.n	8007f7e <indev_proc_task+0x17e>
 800802c:	2113      	movs	r1, #19
 800802e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008030:	f7ff fc74 	bl	800791c <lv_group_send_data>
 8008034:	3501      	adds	r5, #1
 8008036:	e7f5      	b.n	8008024 <indev_proc_task+0x224>
            if(data->enc_diff < 0) {
 8008038:	2b00      	cmp	r3, #0
 800803a:	da0a      	bge.n	8008052 <indev_proc_task+0x252>
 800803c:	4605      	mov	r5, r0
                for(s = 0; s < -data->enc_diff; s++) lv_group_focus_prev(i->group);
 800803e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8008042:	425b      	negs	r3, r3
 8008044:	429d      	cmp	r5, r3
 8008046:	da9a      	bge.n	8007f7e <indev_proc_task+0x17e>
 8008048:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800804a:	3501      	adds	r5, #1
 800804c:	f7ff fc17 	bl	800787e <lv_group_focus_prev>
 8008050:	e7f5      	b.n	800803e <indev_proc_task+0x23e>
            } else if(data->enc_diff > 0) {
 8008052:	d094      	beq.n	8007f7e <indev_proc_task+0x17e>
 8008054:	4605      	mov	r5, r0
                for(s = 0; s < data->enc_diff; s++) lv_group_focus_next(i->group);
 8008056:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800805a:	429d      	cmp	r5, r3
 800805c:	da8f      	bge.n	8007f7e <indev_proc_task+0x17e>
 800805e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008060:	3501      	adds	r5, #1
 8008062:	f7ff fb93 	bl	800778c <lv_group_focus_next>
 8008066:	e7f6      	b.n	8008056 <indev_proc_task+0x256>
                if(focused) focused->signal_func(focused, LV_SIGNAL_LONG_PRESS, indev_act);
 8008068:	2d00      	cmp	r5, #0
 800806a:	d0c1      	beq.n	8007ff0 <indev_proc_task+0x1f0>
 800806c:	69ab      	ldr	r3, [r5, #24]
 800806e:	210a      	movs	r1, #10
 8008070:	6832      	ldr	r2, [r6, #0]
 8008072:	4628      	mov	r0, r5
 8008074:	e73e      	b.n	8007ef4 <indev_proc_task+0xf4>
    else if(data->state == LV_INDEV_STATE_REL && i->proc.last_state == LV_INDEV_STATE_PR) {
 8008076:	2d00      	cmp	r5, #0
 8008078:	f47f af15 	bne.w	8007ea6 <indev_proc_task+0xa6>
 800807c:	7c23      	ldrb	r3, [r4, #16]
 800807e:	2b01      	cmp	r3, #1
 8008080:	f47f af11 	bne.w	8007ea6 <indev_proc_task+0xa6>
        lv_obj_t * focused = lv_group_get_focused(i->group);
 8008084:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008086:	f7ff fc44 	bl	8007912 <lv_group_get_focused>
        bool editable = false;
 800808a:	f88d 5003 	strb.w	r5, [sp, #3]
        if(focused) focused->signal_func(focused, LV_SIGNAL_GET_EDITABLE, &editable);
 800808e:	4605      	mov	r5, r0
 8008090:	b120      	cbz	r0, 800809c <indev_proc_task+0x29c>
 8008092:	6983      	ldr	r3, [r0, #24]
 8008094:	f10d 0203 	add.w	r2, sp, #3
 8008098:	2111      	movs	r1, #17
 800809a:	4798      	blx	r3
        if(!editable) {
 800809c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80080a0:	b90b      	cbnz	r3, 80080a6 <indev_proc_task+0x2a6>
            lv_group_send_data(i->group, LV_GROUP_KEY_ENTER);
 80080a2:	210a      	movs	r1, #10
 80080a4:	e75d      	b.n	8007f62 <indev_proc_task+0x162>
        else if(i->group->editing) {
 80080a6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80080a8:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80080ac:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 80080b0:	f013 0f02 	tst.w	r3, #2
 80080b4:	d006      	beq.n	80080c4 <indev_proc_task+0x2c4>
            if(!i->proc.long_pr_sent) lv_group_send_data(i->group, LV_GROUP_KEY_ENTER);  /*Ignore long pressed enter release because it comes from mode switch*/
 80080b6:	07d3      	lsls	r3, r2, #31
 80080b8:	f53f af3e 	bmi.w	8007f38 <indev_proc_task+0x138>
 80080bc:	210a      	movs	r1, #10
 80080be:	e751      	b.n	8007f64 <indev_proc_task+0x164>
 80080c0:	20000970 	.word	0x20000970
        else if(editable && !i->group->editing && !i->proc.long_pr_sent) {
 80080c4:	f012 0201 	ands.w	r2, r2, #1
 80080c8:	f47f af36 	bne.w	8007f38 <indev_proc_task+0x138>
            i->group->editing = i->group->editing ? 0 : 1;
 80080cc:	f043 0302 	orr.w	r3, r3, #2
 80080d0:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
            if(focused) focused->signal_func(focused, LV_SIGNAL_FOCUS, NULL);      /*Focus again. Some object do something on navigate->edit change*/
 80080d4:	2d00      	cmp	r5, #0
 80080d6:	f43f af2f 	beq.w	8007f38 <indev_proc_task+0x138>
 80080da:	69ab      	ldr	r3, [r5, #24]
 80080dc:	210e      	movs	r1, #14
 80080de:	4628      	mov	r0, r5
 80080e0:	4798      	blx	r3
            if(focused) lv_obj_invalidate(focused);
 80080e2:	4628      	mov	r0, r5
 80080e4:	f000 f8e8 	bl	80082b8 <lv_obj_invalidate>
 80080e8:	e726      	b.n	8007f38 <indev_proc_task+0x138>
                } else if(i->driver.type == LV_INDEV_TYPE_BUTTON) {
 80080ea:	2b03      	cmp	r3, #3
 80080ec:	f47f aee0 	bne.w	8007eb0 <indev_proc_task+0xb0>
    i->proc.act_point.x = i->btn_points[data->btn].x;
 80080f0:	9a01      	ldr	r2, [sp, #4]
        indev_proc_press(&i->proc);
 80080f2:	4638      	mov	r0, r7
    i->proc.act_point.x = i->btn_points[data->btn].x;
 80080f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80080f6:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 80080fa:	f933 3022 	ldrsh.w	r3, [r3, r2, lsl #2]
    if(i->proc.last_point.x == i->proc.act_point.x &&
 80080fe:	6962      	ldr	r2, [r4, #20]
    i->proc.act_point.x = i->btn_points[data->btn].x;
 8008100:	8223      	strh	r3, [r4, #16]
    i->proc.act_point.y = i->btn_points[data->btn].y;
 8008102:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8008106:	8263      	strh	r3, [r4, #18]
    if(i->proc.last_point.x == i->proc.act_point.x &&
 8008108:	6923      	ldr	r3, [r4, #16]
 800810a:	429a      	cmp	r2, r3
 800810c:	d102      	bne.n	8008114 <indev_proc_task+0x314>
            i->proc.last_point.y == i->proc.act_point.y &&
 800810e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8008112:	e6b1      	b.n	8007e78 <indev_proc_task+0x78>
        indev_proc_release(&i->proc);
 8008114:	f7ff fd88 	bl	8007c28 <indev_proc_release>
 8008118:	e6b3      	b.n	8007e82 <indev_proc_task+0x82>
 800811a:	bf00      	nop

0800811c <lv_indev_reset.part.1>:
        lv_indev_t * i = lv_indev_next(NULL);
 800811c:	2000      	movs	r0, #0
void lv_indev_reset(lv_indev_t * indev)
 800811e:	b508      	push	{r3, lr}
            i = lv_indev_next(i);
 8008120:	f005 f9d6 	bl	800d4d0 <lv_indev_next>
        while(i) {
 8008124:	b900      	cbnz	r0, 8008128 <lv_indev_reset.part.1+0xc>
}
 8008126:	bd08      	pop	{r3, pc}
            i->proc.reset_query = 1;
 8008128:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800812c:	f043 0302 	orr.w	r3, r3, #2
 8008130:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
 8008134:	e7f4      	b.n	8008120 <lv_indev_reset.part.1+0x4>
	...

08008138 <lv_indev_init>:
{
 8008138:	b508      	push	{r3, lr}
    lv_task_create(indev_proc_task, LV_INDEV_READ_PERIOD, LV_TASK_PRIO_MID, NULL);
 800813a:	2203      	movs	r2, #3
 800813c:	2300      	movs	r3, #0
 800813e:	2132      	movs	r1, #50	; 0x32
 8008140:	4803      	ldr	r0, [pc, #12]	; (8008150 <lv_indev_init+0x18>)
 8008142:	f005 ff41 	bl	800dfc8 <lv_task_create>
}
 8008146:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800814a:	f7ff bfe7 	b.w	800811c <lv_indev_reset.part.1>
 800814e:	bf00      	nop
 8008150:	08007e01 	.word	0x08007e01

08008154 <lv_indev_get_act>:
}
 8008154:	4b01      	ldr	r3, [pc, #4]	; (800815c <lv_indev_get_act+0x8>)
 8008156:	6818      	ldr	r0, [r3, #0]
 8008158:	4770      	bx	lr
 800815a:	bf00      	nop
 800815c:	20000970 	.word	0x20000970

08008160 <lv_indev_get_type>:
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
 8008160:	b100      	cbz	r0, 8008164 <lv_indev_get_type+0x4>
    return indev->driver.type;
 8008162:	7800      	ldrb	r0, [r0, #0]
}
 8008164:	4770      	bx	lr

08008166 <lv_indev_reset>:
    if(indev) indev->proc.reset_query = 1;
 8008166:	b130      	cbz	r0, 8008176 <lv_indev_reset+0x10>
 8008168:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800816c:	f043 0302 	orr.w	r3, r3, #2
 8008170:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
 8008174:	4770      	bx	lr
 8008176:	f7ff bfd1 	b.w	800811c <lv_indev_reset.part.1>

0800817a <lv_indev_reset_lpr>:
    indev->proc.long_pr_sent = 0;
 800817a:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800817e:	f36f 0300 	bfc	r3, #0, #1
{
 8008182:	b510      	push	{r4, lr}
 8008184:	4604      	mov	r4, r0
    indev->proc.long_pr_sent = 0;
 8008186:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    indev->proc.longpr_rep_timestamp = lv_tick_get();
 800818a:	f005 f9c1 	bl	800d510 <lv_tick_get>
 800818e:	6320      	str	r0, [r4, #48]	; 0x30
    indev->proc.pr_timestamp = lv_tick_get();
 8008190:	f005 f9be 	bl	800d510 <lv_tick_get>
 8008194:	62e0      	str	r0, [r4, #44]	; 0x2c
 8008196:	bd10      	pop	{r4, pc}

08008198 <lv_indev_get_point>:
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) {
 8008198:	7803      	ldrb	r3, [r0, #0]
 800819a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800819e:	2b01      	cmp	r3, #1
        point->x = indev->proc.act_point.x;
 80081a0:	bf09      	itett	eq
 80081a2:	f9b0 3010 	ldrsheq.w	r3, [r0, #16]
        point->x = -1;
 80081a6:	f64f 73ff 	movwne	r3, #65535	; 0xffff
        point->x = indev->proc.act_point.x;
 80081aa:	800b      	strheq	r3, [r1, #0]
        point->y = indev->proc.act_point.y;
 80081ac:	f9b0 3012 	ldrsheq.w	r3, [r0, #18]
        point->x = -1;
 80081b0:	bf18      	it	ne
 80081b2:	800b      	strhne	r3, [r1, #0]
        point->y = indev->proc.act_point.y;
 80081b4:	804b      	strh	r3, [r1, #2]
 80081b6:	4770      	bx	lr

080081b8 <lv_indev_is_dragging>:
    if(indev == NULL) return false;
 80081b8:	b150      	cbz	r0, 80081d0 <lv_indev_is_dragging+0x18>
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) return false;
 80081ba:	7803      	ldrb	r3, [r0, #0]
 80081bc:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d104      	bne.n	80081ce <lv_indev_is_dragging+0x16>
    return indev->proc.drag_in_prog == 0 ? false : true;
 80081c4:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
 80081c8:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80081cc:	4770      	bx	lr
    if(indev == NULL) return false;
 80081ce:	2000      	movs	r0, #0
}
 80081d0:	4770      	bx	lr

080081d2 <lv_indev_get_vect>:
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) {
 80081d2:	7803      	ldrb	r3, [r0, #0]
 80081d4:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80081d8:	2b01      	cmp	r3, #1
        point->x = indev->proc.vect.x;
 80081da:	bf09      	itett	eq
 80081dc:	f9b0 3018 	ldrsheq.w	r3, [r0, #24]
        point->x = 0;
 80081e0:	2300      	movne	r3, #0
        point->x = indev->proc.vect.x;
 80081e2:	800b      	strheq	r3, [r1, #0]
        point->y = indev->proc.vect.y;
 80081e4:	f9b0 301a 	ldrsheq.w	r3, [r0, #26]
        point->x = 0;
 80081e8:	bf18      	it	ne
 80081ea:	800b      	strhne	r3, [r1, #0]
        point->y = indev->proc.vect.y;
 80081ec:	804b      	strh	r3, [r1, #2]
 80081ee:	4770      	bx	lr

080081f0 <refresh_childen_position>:
 * @param obj pointer to an object which children will be repositioned
 * @param x_diff x coordinate shift
 * @param y_diff y coordinate shift
 */
static void refresh_childen_position(lv_obj_t * obj, lv_coord_t x_diff, lv_coord_t y_diff)
{
 80081f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    lv_obj_t * i;
    LL_READ(obj->child_ll, i) {
 80081f4:	1d05      	adds	r5, r0, #4
{
 80081f6:	460e      	mov	r6, r1
 80081f8:	4617      	mov	r7, r2
    LL_READ(obj->child_ll, i) {
 80081fa:	4628      	mov	r0, r5
        i->coords.x1 += x_diff;
 80081fc:	fa1f f886 	uxth.w	r8, r6
    LL_READ(obj->child_ll, i) {
 8008200:	f005 fd33 	bl	800dc6a <lv_ll_get_head>
 8008204:	4604      	mov	r4, r0
        i->coords.y1 += y_diff;
 8008206:	fa1f f987 	uxth.w	r9, r7
    LL_READ(obj->child_ll, i) {
 800820a:	b90c      	cbnz	r4, 8008210 <refresh_childen_position+0x20>
        i->coords.x2 += x_diff;
        i->coords.y2 += y_diff;

        refresh_childen_position(i, x_diff, y_diff);
    }
}
 800820c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        i->coords.x1 += x_diff;
 8008210:	8a23      	ldrh	r3, [r4, #16]
        refresh_childen_position(i, x_diff, y_diff);
 8008212:	4620      	mov	r0, r4
 8008214:	463a      	mov	r2, r7
 8008216:	4631      	mov	r1, r6
        i->coords.x1 += x_diff;
 8008218:	4443      	add	r3, r8
 800821a:	8223      	strh	r3, [r4, #16]
        i->coords.y1 += y_diff;
 800821c:	8a63      	ldrh	r3, [r4, #18]
 800821e:	444b      	add	r3, r9
 8008220:	8263      	strh	r3, [r4, #18]
        i->coords.x2 += x_diff;
 8008222:	8aa3      	ldrh	r3, [r4, #20]
 8008224:	4443      	add	r3, r8
 8008226:	82a3      	strh	r3, [r4, #20]
        i->coords.y2 += y_diff;
 8008228:	8ae3      	ldrh	r3, [r4, #22]
 800822a:	444b      	add	r3, r9
 800822c:	82e3      	strh	r3, [r4, #22]
        refresh_childen_position(i, x_diff, y_diff);
 800822e:	f7ff ffdf 	bl	80081f0 <refresh_childen_position>
    LL_READ(obj->child_ll, i) {
 8008232:	4621      	mov	r1, r4
 8008234:	4628      	mov	r0, r5
 8008236:	f005 fd1e 	bl	800dc76 <lv_ll_get_next>
 800823a:	4604      	mov	r4, r0
 800823c:	e7e5      	b.n	800820a <refresh_childen_position+0x1a>

0800823e <delete_children>:
/**
 * Called by 'lv_obj_del' to delete the children objects
 * @param obj pointer to an object (all of its children will be deleted)
 */
static void delete_children(lv_obj_t * obj)
{
 800823e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_obj_t * i;
    lv_obj_t * i_next;
    i = lv_ll_get_head(&(obj->child_ll));
 8008240:	1d06      	adds	r6, r0, #4
{
 8008242:	4604      	mov	r4, r0
    i = lv_ll_get_head(&(obj->child_ll));
 8008244:	4630      	mov	r0, r6
 8008246:	f005 fd10 	bl	800dc6a <lv_ll_get_head>
 800824a:	4605      	mov	r5, r0
    while(i != NULL) {
        /*Get the next object before delete this*/
        i_next = lv_ll_get_next(&(obj->child_ll), i);
 800824c:	4629      	mov	r1, r5
    while(i != NULL) {
 800824e:	b9fd      	cbnz	r5, 8008290 <delete_children+0x52>
        i = i_next;
    }

    /*Remove the animations from this object*/
#if USE_LV_ANIMATION
    lv_anim_del(obj, NULL);
 8008250:	4620      	mov	r0, r4
 8008252:	f005 fa13 	bl	800d67c <lv_anim_del>
#endif

    /*Delete from the group*/
#if USE_LV_GROUP
    if(obj->group_p != NULL) lv_group_remove_obj(obj);
 8008256:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008258:	b113      	cbz	r3, 8008260 <delete_children+0x22>
 800825a:	4620      	mov	r0, r4
 800825c:	f7ff fae5 	bl	800782a <lv_group_remove_obj>
#endif

    /* Reset the input devices if
     * the currently pressed object is deleted*/
    lv_indev_t * indev = lv_indev_next(NULL);
 8008260:	2000      	movs	r0, #0
    while(indev) {
        if(indev->proc.act_obj == obj || indev->proc.last_obj == obj) {
            lv_indev_reset(indev);
        }
        indev = lv_indev_next(indev);
 8008262:	f005 f935 	bl	800d4d0 <lv_indev_next>
 8008266:	4605      	mov	r5, r0
    while(indev) {
 8008268:	b9d8      	cbnz	r0, 80082a2 <delete_children+0x64>
    }

    /*Remove the object from parent's children list*/
    lv_obj_t * par = lv_obj_get_parent(obj);
    lv_ll_rem(&(par->child_ll), obj);
 800826a:	6820      	ldr	r0, [r4, #0]
 800826c:	4621      	mov	r1, r4
 800826e:	3004      	adds	r0, #4
 8008270:	f005 fd3a 	bl	800dce8 <lv_ll_rem>

    /* Clean up the object specific data*/
    obj->signal_func(obj, LV_SIGNAL_CLEANUP, NULL);
 8008274:	69a3      	ldr	r3, [r4, #24]
 8008276:	462a      	mov	r2, r5
 8008278:	4629      	mov	r1, r5
 800827a:	4620      	mov	r0, r4
 800827c:	4798      	blx	r3

    /*Delete the base objects*/
    if(obj->ext_attr != NULL)  lv_mem_free(obj->ext_attr);
 800827e:	6a20      	ldr	r0, [r4, #32]
 8008280:	b108      	cbz	r0, 8008286 <delete_children+0x48>
 8008282:	f005 fe05 	bl	800de90 <lv_mem_free>
    lv_mem_free(obj); /*Free the object itself*/
 8008286:	4620      	mov	r0, r4

}
 8008288:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_mem_free(obj); /*Free the object itself*/
 800828c:	f005 be00 	b.w	800de90 <lv_mem_free>
        i_next = lv_ll_get_next(&(obj->child_ll), i);
 8008290:	4630      	mov	r0, r6
 8008292:	f005 fcf0 	bl	800dc76 <lv_ll_get_next>
 8008296:	4607      	mov	r7, r0
        delete_children(i);
 8008298:	4628      	mov	r0, r5
 800829a:	f7ff ffd0 	bl	800823e <delete_children>
        i = i_next;
 800829e:	463d      	mov	r5, r7
 80082a0:	e7d4      	b.n	800824c <delete_children+0xe>
        if(indev->proc.act_obj == obj || indev->proc.last_obj == obj) {
 80082a2:	6a2b      	ldr	r3, [r5, #32]
 80082a4:	429c      	cmp	r4, r3
 80082a6:	d002      	beq.n	80082ae <delete_children+0x70>
 80082a8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80082aa:	429c      	cmp	r4, r3
 80082ac:	d102      	bne.n	80082b4 <delete_children+0x76>
            lv_indev_reset(indev);
 80082ae:	4628      	mov	r0, r5
 80082b0:	f7ff ff59 	bl	8008166 <lv_indev_reset>
        indev = lv_indev_next(indev);
 80082b4:	4628      	mov	r0, r5
 80082b6:	e7d4      	b.n	8008262 <delete_children+0x24>

080082b8 <lv_obj_invalidate>:
    return obj->hidden == 0 ? false : true;
 80082b8:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
{
 80082bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if(lv_obj_get_hidden(obj)) return;
 80082be:	06da      	lsls	r2, r3, #27
 80082c0:	d430      	bmi.n	8008324 <lv_obj_invalidate+0x6c>
 80082c2:	4603      	mov	r3, r0
    return obj->par;
 80082c4:	681a      	ldr	r2, [r3, #0]
    } while(par != NULL);
 80082c6:	bb7a      	cbnz	r2, 8008328 <lv_obj_invalidate+0x70>
    return act_scr;
 80082c8:	4a1f      	ldr	r2, [pc, #124]	; (8008348 <lv_obj_invalidate+0x90>)
    if(obj_scr == lv_scr_act() ||
 80082ca:	6812      	ldr	r2, [r2, #0]
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d007      	beq.n	80082e0 <lv_obj_invalidate+0x28>
    return top_layer;
 80082d0:	4a1e      	ldr	r2, [pc, #120]	; (800834c <lv_obj_invalidate+0x94>)
    if(obj_scr == lv_scr_act() ||
 80082d2:	6812      	ldr	r2, [r2, #0]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d003      	beq.n	80082e0 <lv_obj_invalidate+0x28>
    return sys_layer;
 80082d8:	4a1d      	ldr	r2, [pc, #116]	; (8008350 <lv_obj_invalidate+0x98>)
            obj_scr == lv_layer_top() ||
 80082da:	6812      	ldr	r2, [r2, #0]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d121      	bne.n	8008324 <lv_obj_invalidate+0x6c>
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    memcpy(dest, src, sizeof(lv_area_t));
 80082e0:	4603      	mov	r3, r0
        lv_coord_t ext_size = obj->ext_size;
 80082e2:	f9b0 2034 	ldrsh.w	r2, [r0, #52]	; 0x34
    return obj->par;
 80082e6:	6804      	ldr	r4, [r0, #0]
 80082e8:	466d      	mov	r5, sp
 80082ea:	f853 0f10 	ldr.w	r0, [r3, #16]!
 80082ee:	6859      	ldr	r1, [r3, #4]
        area_trunc.x1 -= ext_size;
 80082f0:	b293      	uxth	r3, r2
 80082f2:	c503      	stmia	r5!, {r0, r1}
 80082f4:	f8bd 2000 	ldrh.w	r2, [sp]
 80082f8:	1ad2      	subs	r2, r2, r3
 80082fa:	f8ad 2000 	strh.w	r2, [sp]
        area_trunc.y1 -= ext_size;
 80082fe:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8008302:	1ad2      	subs	r2, r2, r3
 8008304:	f8ad 2002 	strh.w	r2, [sp, #2]
        area_trunc.x2 += ext_size;
 8008308:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800830c:	441a      	add	r2, r3
 800830e:	f8ad 2004 	strh.w	r2, [sp, #4]
        area_trunc.y2 += ext_size;
 8008312:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008316:	4413      	add	r3, r2
 8008318:	f8ad 3006 	strh.w	r3, [sp, #6]
        while(par != NULL) {
 800831c:	b934      	cbnz	r4, 800832c <lv_obj_invalidate+0x74>
        if(union_ok != false) lv_inv_area(&area_trunc);
 800831e:	4668      	mov	r0, sp
 8008320:	f000 ffc4 	bl	80092ac <lv_inv_area>
}
 8008324:	b003      	add	sp, #12
 8008326:	bd30      	pop	{r4, r5, pc}
    } while(par != NULL);
 8008328:	4613      	mov	r3, r2
 800832a:	e7cb      	b.n	80082c4 <lv_obj_invalidate+0xc>
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 800832c:	f104 0210 	add.w	r2, r4, #16
 8008330:	4669      	mov	r1, sp
 8008332:	4668      	mov	r0, sp
 8008334:	f005 fa56 	bl	800d7e4 <lv_area_intersect>
            if(union_ok == false) break;        /*If no common parts with parent break;*/
 8008338:	2800      	cmp	r0, #0
 800833a:	d0f3      	beq.n	8008324 <lv_obj_invalidate+0x6c>
    return obj->hidden == 0 ? false : true;
 800833c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
            if(lv_obj_get_hidden(par)) return;  /*If the parent is hidden then the child is hidden and won't be drawn*/
 8008340:	06db      	lsls	r3, r3, #27
 8008342:	d4ef      	bmi.n	8008324 <lv_obj_invalidate+0x6c>
    return obj->par;
 8008344:	6824      	ldr	r4, [r4, #0]
 8008346:	e7e9      	b.n	800831c <lv_obj_invalidate+0x64>
 8008348:	20000974 	.word	0x20000974
 800834c:	20000988 	.word	0x20000988
 8008350:	20000984 	.word	0x20000984

08008354 <lv_obj_del>:
{
 8008354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008356:	4604      	mov	r4, r0
    lv_obj_invalidate(obj);
 8008358:	f7ff ffae 	bl	80082b8 <lv_obj_invalidate>
    if(obj->group_p != NULL) lv_group_remove_obj(obj);
 800835c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800835e:	b113      	cbz	r3, 8008366 <lv_obj_del+0x12>
 8008360:	4620      	mov	r0, r4
 8008362:	f7ff fa62 	bl	800782a <lv_group_remove_obj>
    i = lv_ll_get_head(&(obj->child_ll));
 8008366:	1d26      	adds	r6, r4, #4
    lv_anim_del(obj, NULL);
 8008368:	2100      	movs	r1, #0
 800836a:	4620      	mov	r0, r4
 800836c:	f005 f986 	bl	800d67c <lv_anim_del>
    i = lv_ll_get_head(&(obj->child_ll));
 8008370:	4630      	mov	r0, r6
 8008372:	f005 fc7a 	bl	800dc6a <lv_ll_get_head>
 8008376:	4605      	mov	r5, r0
    while(i != NULL) {
 8008378:	b9f5      	cbnz	r5, 80083b8 <lv_obj_del+0x64>
    return obj->par;
 800837a:	6826      	ldr	r6, [r4, #0]
        lv_ll_rem(&scr_ll, obj);
 800837c:	4621      	mov	r1, r4
    if(par == NULL) { /*It is a screen*/
 800837e:	bb2e      	cbnz	r6, 80083cc <lv_obj_del+0x78>
        lv_ll_rem(&scr_ll, obj);
 8008380:	4819      	ldr	r0, [pc, #100]	; (80083e8 <lv_obj_del+0x94>)
        lv_ll_rem(&(par->child_ll), obj);
 8008382:	f005 fcb1 	bl	800dce8 <lv_ll_rem>
    lv_indev_t * indev = lv_indev_next(NULL);
 8008386:	2000      	movs	r0, #0
        indev = lv_indev_next(indev);
 8008388:	f005 f8a2 	bl	800d4d0 <lv_indev_next>
 800838c:	4605      	mov	r5, r0
    while(indev) {
 800838e:	b9f8      	cbnz	r0, 80083d0 <lv_obj_del+0x7c>
    obj->signal_func(obj, LV_SIGNAL_CLEANUP, NULL);
 8008390:	4602      	mov	r2, r0
 8008392:	4601      	mov	r1, r0
 8008394:	69a3      	ldr	r3, [r4, #24]
 8008396:	4620      	mov	r0, r4
 8008398:	4798      	blx	r3
    if(obj->ext_attr != NULL)  lv_mem_free(obj->ext_attr);
 800839a:	6a20      	ldr	r0, [r4, #32]
 800839c:	b108      	cbz	r0, 80083a2 <lv_obj_del+0x4e>
 800839e:	f005 fd77 	bl	800de90 <lv_mem_free>
    lv_mem_free(obj); /*Free the object itself*/
 80083a2:	4620      	mov	r0, r4
 80083a4:	f005 fd74 	bl	800de90 <lv_mem_free>
    if(par != NULL) {
 80083a8:	b126      	cbz	r6, 80083b4 <lv_obj_del+0x60>
        par->signal_func(par, LV_SIGNAL_CHILD_CHG, NULL);
 80083aa:	69b3      	ldr	r3, [r6, #24]
 80083ac:	2200      	movs	r2, #0
 80083ae:	2101      	movs	r1, #1
 80083b0:	4630      	mov	r0, r6
 80083b2:	4798      	blx	r3
}
 80083b4:	2000      	movs	r0, #0
 80083b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        i_next = lv_ll_get_next(&(obj->child_ll), i);
 80083b8:	4629      	mov	r1, r5
 80083ba:	4630      	mov	r0, r6
 80083bc:	f005 fc5b 	bl	800dc76 <lv_ll_get_next>
 80083c0:	4607      	mov	r7, r0
        delete_children(i);
 80083c2:	4628      	mov	r0, r5
 80083c4:	f7ff ff3b 	bl	800823e <delete_children>
        i = i_next;
 80083c8:	463d      	mov	r5, r7
 80083ca:	e7d5      	b.n	8008378 <lv_obj_del+0x24>
        lv_ll_rem(&(par->child_ll), obj);
 80083cc:	1d30      	adds	r0, r6, #4
 80083ce:	e7d8      	b.n	8008382 <lv_obj_del+0x2e>
        if(indev->proc.act_obj == obj || indev->proc.last_obj == obj) {
 80083d0:	6a2b      	ldr	r3, [r5, #32]
 80083d2:	429c      	cmp	r4, r3
 80083d4:	d002      	beq.n	80083dc <lv_obj_del+0x88>
 80083d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80083d8:	429c      	cmp	r4, r3
 80083da:	d102      	bne.n	80083e2 <lv_obj_del+0x8e>
            lv_indev_reset(indev);
 80083dc:	4628      	mov	r0, r5
 80083de:	f7ff fec2 	bl	8008166 <lv_indev_reset>
        indev = lv_indev_next(indev);
 80083e2:	4628      	mov	r0, r5
 80083e4:	e7d0      	b.n	8008388 <lv_obj_del+0x34>
 80083e6:	bf00      	nop
 80083e8:	20000978 	.word	0x20000978

080083ec <lv_obj_set_pos>:
{
 80083ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    lv_obj_t * par = obj->par;
 80083f0:	6806      	ldr	r6, [r0, #0]
{
 80083f2:	4604      	mov	r4, r0
    diff.x =  x - obj->coords.x1;
 80083f4:	8a03      	ldrh	r3, [r0, #16]
 80083f6:	f8b6 8010 	ldrh.w	r8, [r6, #16]
    diff.y =  y - obj->coords.y1;
 80083fa:	8a75      	ldrh	r5, [r6, #18]
    diff.x =  x - obj->coords.x1;
 80083fc:	eba8 0803 	sub.w	r8, r8, r3
    diff.y =  y - obj->coords.y1;
 8008400:	8a43      	ldrh	r3, [r0, #18]
    diff.x =  x - obj->coords.x1;
 8008402:	4488      	add	r8, r1
    diff.y =  y - obj->coords.y1;
 8008404:	1aed      	subs	r5, r5, r3
    diff.x =  x - obj->coords.x1;
 8008406:	fa1f f888 	uxth.w	r8, r8
    diff.y =  y - obj->coords.y1;
 800840a:	4415      	add	r5, r2
    diff.x =  x - obj->coords.x1;
 800840c:	fa0f f788 	sxth.w	r7, r8
    diff.y =  y - obj->coords.y1;
 8008410:	b2ad      	uxth	r5, r5
 8008412:	fa0f f985 	sxth.w	r9, r5
    if(diff.x == 0 && diff.y == 0) return;
 8008416:	b917      	cbnz	r7, 800841e <lv_obj_set_pos+0x32>
 8008418:	f1b9 0f00 	cmp.w	r9, #0
 800841c:	d026      	beq.n	800846c <lv_obj_set_pos+0x80>
    lv_obj_invalidate(obj);
 800841e:	4620      	mov	r0, r4
 8008420:	f7ff ff4a 	bl	80082b8 <lv_obj_invalidate>
 8008424:	4622      	mov	r2, r4
 8008426:	466b      	mov	r3, sp
 8008428:	f852 0f10 	ldr.w	r0, [r2, #16]!
 800842c:	6851      	ldr	r1, [r2, #4]
    obj->coords.y2 += diff.y;
 800842e:	8ae2      	ldrh	r2, [r4, #22]
 8008430:	c303      	stmia	r3!, {r0, r1}
    obj->coords.x1 += diff.x;
 8008432:	8a23      	ldrh	r3, [r4, #16]
    refresh_childen_position(obj, diff.x, diff.y);
 8008434:	4620      	mov	r0, r4
    obj->coords.x2 += diff.x;
 8008436:	8aa1      	ldrh	r1, [r4, #20]
    obj->coords.x1 += diff.x;
 8008438:	4443      	add	r3, r8
    obj->coords.x2 += diff.x;
 800843a:	4441      	add	r1, r8
    obj->coords.x1 += diff.x;
 800843c:	8223      	strh	r3, [r4, #16]
    obj->coords.y1 += diff.y;
 800843e:	8a63      	ldrh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
 8008440:	82a1      	strh	r1, [r4, #20]
    refresh_childen_position(obj, diff.x, diff.y);
 8008442:	4639      	mov	r1, r7
    obj->coords.y1 += diff.y;
 8008444:	442b      	add	r3, r5
    obj->coords.y2 += diff.y;
 8008446:	4415      	add	r5, r2
    refresh_childen_position(obj, diff.x, diff.y);
 8008448:	464a      	mov	r2, r9
    obj->coords.y1 += diff.y;
 800844a:	8263      	strh	r3, [r4, #18]
    obj->coords.y2 += diff.y;
 800844c:	82e5      	strh	r5, [r4, #22]
    refresh_childen_position(obj, diff.x, diff.y);
 800844e:	f7ff fecf 	bl	80081f0 <refresh_childen_position>
    obj->signal_func(obj, LV_SIGNAL_CORD_CHG, &ori);
 8008452:	69a3      	ldr	r3, [r4, #24]
 8008454:	466a      	mov	r2, sp
 8008456:	2102      	movs	r1, #2
 8008458:	4620      	mov	r0, r4
 800845a:	4798      	blx	r3
    par->signal_func(par, LV_SIGNAL_CHILD_CHG, obj);
 800845c:	69b3      	ldr	r3, [r6, #24]
 800845e:	4622      	mov	r2, r4
 8008460:	2101      	movs	r1, #1
 8008462:	4630      	mov	r0, r6
 8008464:	4798      	blx	r3
    lv_obj_invalidate(obj);
 8008466:	4620      	mov	r0, r4
 8008468:	f7ff ff26 	bl	80082b8 <lv_obj_invalidate>
}
 800846c:	b003      	add	sp, #12
 800846e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08008474 <lv_obj_create>:
{
 8008474:	b570      	push	{r4, r5, r6, lr}
 8008476:	460d      	mov	r5, r1
    if(parent == NULL) {
 8008478:	4606      	mov	r6, r0
 800847a:	2800      	cmp	r0, #0
 800847c:	f040 80a7 	bne.w	80085ce <lv_obj_create+0x15a>
        new_obj = lv_ll_ins_head(&scr_ll);
 8008480:	486f      	ldr	r0, [pc, #444]	; (8008640 <lv_obj_create+0x1cc>)
 8008482:	f005 fbb6 	bl	800dbf2 <lv_ll_ins_head>
        lv_mem_assert(new_obj);
 8008486:	4604      	mov	r4, r0
 8008488:	b900      	cbnz	r0, 800848c <lv_obj_create+0x18>
 800848a:	e7fe      	b.n	800848a <lv_obj_create+0x16>
        new_obj->par = NULL; /*Screens has no a parent*/
 800848c:	f840 6b04 	str.w	r6, [r0], #4
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 8008490:	213c      	movs	r1, #60	; 0x3c
 8008492:	f005 fba4 	bl	800dbde <lv_ll_init>
        new_obj->coords.x2 = LV_HOR_RES - 1;
 8008496:	f240 13df 	movw	r3, #479	; 0x1df
        new_obj->coords.x1 = 0;
 800849a:	8226      	strh	r6, [r4, #16]
        new_obj->coords.x2 = LV_HOR_RES - 1;
 800849c:	82a3      	strh	r3, [r4, #20]
        new_obj->coords.y2 = LV_VER_RES - 1;
 800849e:	f240 130f 	movw	r3, #271	; 0x10f
        new_obj->coords.y1 = 0;
 80084a2:	8266      	strh	r6, [r4, #18]
        new_obj->coords.y2 = LV_VER_RES - 1;
 80084a4:	82e3      	strh	r3, [r4, #22]
        new_obj->ext_size = 0;
 80084a6:	86a6      	strh	r6, [r4, #52]	; 0x34
        lv_theme_t * th = lv_theme_get_current();
 80084a8:	f00d fae4 	bl	8015a74 <lv_theme_get_current>
        if(th) {
 80084ac:	2800      	cmp	r0, #0
 80084ae:	f000 808c 	beq.w	80085ca <lv_obj_create+0x156>
            new_obj->style_p = th->bg;
 80084b2:	6803      	ldr	r3, [r0, #0]
            new_obj->style_p = &lv_style_scr;
 80084b4:	6263      	str	r3, [r4, #36]	; 0x24
    obj->signal_func = fp;
 80084b6:	4b63      	ldr	r3, [pc, #396]	; (8008644 <lv_obj_create+0x1d0>)
        new_obj->click = 0;
 80084b8:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
    obj->signal_func = fp;
 80084bc:	61a3      	str	r3, [r4, #24]
    obj->design_func = fp;
 80084be:	4b62      	ldr	r3, [pc, #392]	; (8008648 <lv_obj_create+0x1d4>)
        new_obj->opa_scale_en = 0;
 80084c0:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    obj->design_func = fp;
 80084c4:	61e3      	str	r3, [r4, #28]
        new_obj->free_num = 0;
 80084c6:	2300      	movs	r3, #0
        new_obj->opa_scale_en = 0;
 80084c8:	f363 1286 	bfi	r2, r3, #6, #1
        new_obj->free_num = 0;
 80084cc:	63a3      	str	r3, [r4, #56]	; 0x38
        new_obj->free_ptr = NULL;
 80084ce:	62a3      	str	r3, [r4, #40]	; 0x28
        new_obj->opa_scale_en = 0;
 80084d0:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->opa_scale = LV_OPA_COVER;
 80084d4:	22ff      	movs	r2, #255	; 0xff
        new_obj->group_p = NULL;
 80084d6:	62e3      	str	r3, [r4, #44]	; 0x2c
        new_obj->protect = LV_PROTECT_NONE;
 80084d8:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
        new_obj->opa_scale = LV_OPA_COVER;
 80084dc:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
        new_obj->ext_attr = NULL;
 80084e0:	6223      	str	r3, [r4, #32]
    if(copy != NULL) {
 80084e2:	2d00      	cmp	r5, #0
 80084e4:	d066      	beq.n	80085b4 <lv_obj_create+0x140>
 80084e6:	462a      	mov	r2, r5
 80084e8:	f852 3f10 	ldr.w	r3, [r2, #16]!
 80084ec:	6123      	str	r3, [r4, #16]
 80084ee:	6853      	ldr	r3, [r2, #4]
 80084f0:	6163      	str	r3, [r4, #20]
        new_obj->ext_size = copy->ext_size;
 80084f2:	f9b5 3034 	ldrsh.w	r3, [r5, #52]	; 0x34
 80084f6:	86a3      	strh	r3, [r4, #52]	; 0x34
        new_obj->free_num = copy->free_num;
 80084f8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80084fa:	63a3      	str	r3, [r4, #56]	; 0x38
        new_obj->free_ptr = copy->free_ptr;
 80084fc:	6aab      	ldr	r3, [r5, #40]	; 0x28
        new_obj->click = copy->click;
 80084fe:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
        new_obj->free_ptr = copy->free_ptr;
 8008502:	62a3      	str	r3, [r4, #40]	; 0x28
        new_obj->click = copy->click;
 8008504:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8008508:	f362 0300 	bfi	r3, r2, #0, #1
 800850c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        new_obj->drag = copy->drag;
 8008510:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8008514:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8008518:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800851c:	f363 0241 	bfi	r2, r3, #1, #1
 8008520:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->drag_throw = copy->drag_throw;
 8008524:	b2d2      	uxtb	r2, r2
 8008526:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800852a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800852e:	f363 0282 	bfi	r2, r3, #2, #1
 8008532:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->drag_parent = copy->drag_parent;
 8008536:	b2d2      	uxtb	r2, r2
 8008538:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800853c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008540:	f363 02c3 	bfi	r2, r3, #3, #1
 8008544:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->hidden = copy->hidden;
 8008548:	b2d2      	uxtb	r2, r2
 800854a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800854e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008552:	f363 1204 	bfi	r2, r3, #4, #1
 8008556:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->top = copy->top;
 800855a:	b2d2      	uxtb	r2, r2
 800855c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8008560:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008564:	f363 1245 	bfi	r2, r3, #5, #1
 8008568:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->opa_scale_en = copy->opa_scale_en;
 800856c:	b2d2      	uxtb	r2, r2
 800856e:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8008572:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008576:	f363 1286 	bfi	r2, r3, #6, #1
 800857a:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->protect = copy->protect;
 800857e:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 8008582:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
        new_obj->opa_scale = copy->opa_scale;
 8008586:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
 800858a:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        new_obj->style_p = copy->style_p;
 800858e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008590:	6263      	str	r3, [r4, #36]	; 0x24
        if(copy->group_p != NULL) {
 8008592:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8008594:	b110      	cbz	r0, 800859c <lv_obj_create+0x128>
            lv_group_add_obj(copy->group_p, new_obj);
 8008596:	4621      	mov	r1, r4
 8008598:	f7ff f927 	bl	80077ea <lv_group_add_obj>
    return obj->par;
 800859c:	682b      	ldr	r3, [r5, #0]
        lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
 800859e:	4620      	mov	r0, r4
    rel_y = obj->coords.y1 - parent->coords.y1;
 80085a0:	8a6a      	ldrh	r2, [r5, #18]
 80085a2:	8a59      	ldrh	r1, [r3, #18]
    rel_x = obj->coords.x1 - parent->coords.x1;
 80085a4:	8a1b      	ldrh	r3, [r3, #16]
    rel_y = obj->coords.y1 - parent->coords.y1;
 80085a6:	1a52      	subs	r2, r2, r1
    rel_x = obj->coords.x1 - parent->coords.x1;
 80085a8:	8a29      	ldrh	r1, [r5, #16]
 80085aa:	1ac9      	subs	r1, r1, r3
        lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
 80085ac:	b212      	sxth	r2, r2
 80085ae:	b209      	sxth	r1, r1
 80085b0:	f7ff ff1c 	bl	80083ec <lv_obj_set_pos>
    if(parent != NULL) {
 80085b4:	b13e      	cbz	r6, 80085c6 <lv_obj_create+0x152>
        parent->signal_func(parent, LV_SIGNAL_CHILD_CHG, new_obj);
 80085b6:	69b3      	ldr	r3, [r6, #24]
 80085b8:	4622      	mov	r2, r4
 80085ba:	2101      	movs	r1, #1
 80085bc:	4630      	mov	r0, r6
 80085be:	4798      	blx	r3
        lv_obj_invalidate(new_obj);
 80085c0:	4620      	mov	r0, r4
 80085c2:	f7ff fe79 	bl	80082b8 <lv_obj_invalidate>
}
 80085c6:	4620      	mov	r0, r4
 80085c8:	bd70      	pop	{r4, r5, r6, pc}
            new_obj->style_p = &lv_style_scr;
 80085ca:	4b20      	ldr	r3, [pc, #128]	; (800864c <lv_obj_create+0x1d8>)
 80085cc:	e772      	b.n	80084b4 <lv_obj_create+0x40>
        new_obj = lv_ll_ins_head(&(parent)->child_ll);
 80085ce:	3004      	adds	r0, #4
 80085d0:	f005 fb0f 	bl	800dbf2 <lv_ll_ins_head>
        lv_mem_assert(new_obj);
 80085d4:	4604      	mov	r4, r0
 80085d6:	b900      	cbnz	r0, 80085da <lv_obj_create+0x166>
 80085d8:	e7fe      	b.n	80085d8 <lv_obj_create+0x164>
        new_obj->par = parent; /*Set the parent*/
 80085da:	f840 6b04 	str.w	r6, [r0], #4
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 80085de:	213c      	movs	r1, #60	; 0x3c
 80085e0:	f005 fafd 	bl	800dbde <lv_ll_init>
        new_obj->coords.x1 = parent->coords.x1;
 80085e4:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
 80085e8:	8223      	strh	r3, [r4, #16]
        new_obj->coords.y1 = parent->coords.y1;
 80085ea:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
 80085ee:	8263      	strh	r3, [r4, #18]
        new_obj->coords.x2 = parent->coords.x1 +
 80085f0:	8a33      	ldrh	r3, [r6, #16]
 80085f2:	3364      	adds	r3, #100	; 0x64
 80085f4:	82a3      	strh	r3, [r4, #20]
        new_obj->coords.y2 = parent->coords.y1 +
 80085f6:	8a73      	ldrh	r3, [r6, #18]
 80085f8:	3342      	adds	r3, #66	; 0x42
 80085fa:	82e3      	strh	r3, [r4, #22]
        new_obj->ext_size = 0;
 80085fc:	2300      	movs	r3, #0
 80085fe:	86a3      	strh	r3, [r4, #52]	; 0x34
        lv_theme_t * th = lv_theme_get_current();
 8008600:	f00d fa38 	bl	8015a74 <lv_theme_get_current>
        if(th) {
 8008604:	b1c8      	cbz	r0, 800863a <lv_obj_create+0x1c6>
            new_obj->style_p = th->panel;
 8008606:	6843      	ldr	r3, [r0, #4]
        new_obj->click = 1;
 8008608:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
        new_obj->opa_scale = LV_OPA_COVER;
 800860c:	21ff      	movs	r1, #255	; 0xff
            new_obj->style_p = &lv_style_plain_color;
 800860e:	6263      	str	r3, [r4, #36]	; 0x24
    obj->signal_func = fp;
 8008610:	4b0c      	ldr	r3, [pc, #48]	; (8008644 <lv_obj_create+0x1d0>)
        new_obj->drag = 0;
 8008612:	f042 0201 	orr.w	r2, r2, #1
        new_obj->opa_scale = LV_OPA_COVER;
 8008616:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
    obj->signal_func = fp;
 800861a:	61a3      	str	r3, [r4, #24]
        new_obj->opa_scale_en = 0;
 800861c:	f002 02c1 	and.w	r2, r2, #193	; 0xc1
    obj->design_func = fp;
 8008620:	4b09      	ldr	r3, [pc, #36]	; (8008648 <lv_obj_create+0x1d4>)
 8008622:	61e3      	str	r3, [r4, #28]
        new_obj->free_num = 0;
 8008624:	2300      	movs	r3, #0
        new_obj->opa_scale_en = 0;
 8008626:	f363 1286 	bfi	r2, r3, #6, #1
        new_obj->free_num = 0;
 800862a:	63a3      	str	r3, [r4, #56]	; 0x38
        new_obj->free_ptr = NULL;
 800862c:	62a3      	str	r3, [r4, #40]	; 0x28
        new_obj->group_p = NULL;
 800862e:	62e3      	str	r3, [r4, #44]	; 0x2c
        new_obj->protect = LV_PROTECT_NONE;
 8008630:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
        new_obj->opa_scale_en = 0;
 8008634:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
 8008638:	e752      	b.n	80084e0 <lv_obj_create+0x6c>
            new_obj->style_p = &lv_style_plain_color;
 800863a:	4b05      	ldr	r3, [pc, #20]	; (8008650 <lv_obj_create+0x1dc>)
 800863c:	e7e4      	b.n	8008608 <lv_obj_create+0x194>
 800863e:	bf00      	nop
 8008640:	20000978 	.word	0x20000978
 8008644:	08008d3d 	.word	0x08008d3d
 8008648:	08008dd3 	.word	0x08008dd3
 800864c:	20017e50 	.word	0x20017e50
 8008650:	20017ee0 	.word	0x20017ee0

08008654 <lv_obj_set_parent>:
    if(obj->par == NULL) {
 8008654:	6803      	ldr	r3, [r0, #0]
{
 8008656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800865a:	4604      	mov	r4, r0
 800865c:	460d      	mov	r5, r1
    if(obj->par == NULL) {
 800865e:	b343      	cbz	r3, 80086b2 <lv_obj_set_parent+0x5e>
    if(parent == NULL) {
 8008660:	b339      	cbz	r1, 80086b2 <lv_obj_set_parent+0x5e>
    lv_obj_invalidate(obj);
 8008662:	f7ff fe29 	bl	80082b8 <lv_obj_invalidate>
    return obj->par;
 8008666:	6826      	ldr	r6, [r4, #0]
    rel_x = obj->coords.x1 - parent->coords.x1;
 8008668:	8a27      	ldrh	r7, [r4, #16]
    lv_ll_chg_list(&obj->par->child_ll, &parent->child_ll, obj);
 800866a:	4622      	mov	r2, r4
    rel_x = obj->coords.x1 - parent->coords.x1;
 800866c:	8a33      	ldrh	r3, [r6, #16]
    lv_ll_chg_list(&obj->par->child_ll, &parent->child_ll, obj);
 800866e:	1d29      	adds	r1, r5, #4
    rel_y = obj->coords.y1 - parent->coords.y1;
 8008670:	f8b4 8012 	ldrh.w	r8, [r4, #18]
    lv_ll_chg_list(&obj->par->child_ll, &parent->child_ll, obj);
 8008674:	1d30      	adds	r0, r6, #4
    rel_x = obj->coords.x1 - parent->coords.x1;
 8008676:	1aff      	subs	r7, r7, r3
    rel_y = obj->coords.y1 - parent->coords.y1;
 8008678:	8a73      	ldrh	r3, [r6, #18]
 800867a:	eba8 0803 	sub.w	r8, r8, r3
    rel_x = obj->coords.x1 - parent->coords.x1;
 800867e:	b23f      	sxth	r7, r7
    lv_ll_chg_list(&obj->par->child_ll, &parent->child_ll, obj);
 8008680:	f005 fb80 	bl	800dd84 <lv_ll_chg_list>
    lv_obj_set_pos(obj, old_pos.x, old_pos.y);
 8008684:	4620      	mov	r0, r4
    rel_y = obj->coords.y1 - parent->coords.y1;
 8008686:	fa0f f888 	sxth.w	r8, r8
    lv_obj_set_pos(obj, old_pos.x, old_pos.y);
 800868a:	4639      	mov	r1, r7
    obj->par = parent;
 800868c:	6025      	str	r5, [r4, #0]
    lv_obj_set_pos(obj, old_pos.x, old_pos.y);
 800868e:	4642      	mov	r2, r8
 8008690:	f7ff feac 	bl	80083ec <lv_obj_set_pos>
    old_par->signal_func(old_par, LV_SIGNAL_CHILD_CHG, NULL);
 8008694:	69b3      	ldr	r3, [r6, #24]
 8008696:	2200      	movs	r2, #0
 8008698:	2101      	movs	r1, #1
 800869a:	4630      	mov	r0, r6
 800869c:	4798      	blx	r3
    parent->signal_func(parent, LV_SIGNAL_CHILD_CHG, obj);
 800869e:	69ab      	ldr	r3, [r5, #24]
 80086a0:	4622      	mov	r2, r4
 80086a2:	4628      	mov	r0, r5
 80086a4:	2101      	movs	r1, #1
 80086a6:	4798      	blx	r3
    lv_obj_invalidate(obj);
 80086a8:	4620      	mov	r0, r4
}
 80086aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_invalidate(obj);
 80086ae:	f7ff be03 	b.w	80082b8 <lv_obj_invalidate>
 80086b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080086b6 <lv_obj_set_x>:
{
 80086b6:	b410      	push	{r4}
    rel_y = obj->coords.y1 - parent->coords.y1;
 80086b8:	6804      	ldr	r4, [r0, #0]
 80086ba:	8a42      	ldrh	r2, [r0, #18]
 80086bc:	8a63      	ldrh	r3, [r4, #18]
}
 80086be:	f85d 4b04 	ldr.w	r4, [sp], #4
    rel_y = obj->coords.y1 - parent->coords.y1;
 80086c2:	1ad2      	subs	r2, r2, r3
    lv_obj_set_pos(obj, x, lv_obj_get_y(obj));
 80086c4:	b212      	sxth	r2, r2
 80086c6:	f7ff be91 	b.w	80083ec <lv_obj_set_pos>

080086ca <lv_obj_set_y>:
    rel_x = obj->coords.x1 - parent->coords.x1;
 80086ca:	6802      	ldr	r2, [r0, #0]
 80086cc:	8a03      	ldrh	r3, [r0, #16]
 80086ce:	8a12      	ldrh	r2, [r2, #16]
 80086d0:	1a9b      	subs	r3, r3, r2
    lv_obj_set_pos(obj, lv_obj_get_x(obj), y);
 80086d2:	460a      	mov	r2, r1
 80086d4:	b219      	sxth	r1, r3
 80086d6:	f7ff be89 	b.w	80083ec <lv_obj_set_pos>

080086da <lv_obj_set_size>:
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 80086da:	8a83      	ldrh	r3, [r0, #20]
{
 80086dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80086de:	3301      	adds	r3, #1
 80086e0:	4616      	mov	r6, r2
 80086e2:	8a02      	ldrh	r2, [r0, #16]
 80086e4:	4604      	mov	r4, r0
 80086e6:	460d      	mov	r5, r1
 80086e8:	1a9b      	subs	r3, r3, r2
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
 80086ea:	b21b      	sxth	r3, r3
 80086ec:	4299      	cmp	r1, r3
 80086ee:	d106      	bne.n	80086fe <lv_obj_set_size+0x24>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 80086f0:	8ac3      	ldrh	r3, [r0, #22]
 80086f2:	8a42      	ldrh	r2, [r0, #18]
 80086f4:	3301      	adds	r3, #1
 80086f6:	1a9b      	subs	r3, r3, r2
 80086f8:	b21b      	sxth	r3, r3
 80086fa:	429e      	cmp	r6, r3
 80086fc:	d01e      	beq.n	800873c <lv_obj_set_size+0x62>
    lv_obj_invalidate(obj);
 80086fe:	4620      	mov	r0, r4
    obj->coords.x2 = obj->coords.x1 + w - 1;
 8008700:	3d01      	subs	r5, #1
    lv_obj_invalidate(obj);
 8008702:	f7ff fdd9 	bl	80082b8 <lv_obj_invalidate>
    memcpy(dest, src, sizeof(lv_area_t));
 8008706:	4622      	mov	r2, r4
 8008708:	466b      	mov	r3, sp
    obj->coords.y2 = obj->coords.y1 + h - 1;
 800870a:	3e01      	subs	r6, #1
 800870c:	f852 0f10 	ldr.w	r0, [r2, #16]!
 8008710:	6851      	ldr	r1, [r2, #4]
 8008712:	8a62      	ldrh	r2, [r4, #18]
 8008714:	c303      	stmia	r3!, {r0, r1}
    obj->coords.x2 = obj->coords.x1 + w - 1;
 8008716:	8a23      	ldrh	r3, [r4, #16]
    obj->coords.y2 = obj->coords.y1 + h - 1;
 8008718:	4416      	add	r6, r2
    obj->signal_func(obj, LV_SIGNAL_CORD_CHG, &ori);
 800871a:	2102      	movs	r1, #2
 800871c:	466a      	mov	r2, sp
    obj->coords.x2 = obj->coords.x1 + w - 1;
 800871e:	441d      	add	r5, r3
    obj->coords.y2 = obj->coords.y1 + h - 1;
 8008720:	82e6      	strh	r6, [r4, #22]
    obj->signal_func(obj, LV_SIGNAL_CORD_CHG, &ori);
 8008722:	69a3      	ldr	r3, [r4, #24]
 8008724:	4620      	mov	r0, r4
    obj->coords.x2 = obj->coords.x1 + w - 1;
 8008726:	82a5      	strh	r5, [r4, #20]
    obj->signal_func(obj, LV_SIGNAL_CORD_CHG, &ori);
 8008728:	4798      	blx	r3
    return obj->par;
 800872a:	6820      	ldr	r0, [r4, #0]
    if(par != NULL) par->signal_func(par, LV_SIGNAL_CHILD_CHG, obj);
 800872c:	b118      	cbz	r0, 8008736 <lv_obj_set_size+0x5c>
 800872e:	6983      	ldr	r3, [r0, #24]
 8008730:	4622      	mov	r2, r4
 8008732:	2101      	movs	r1, #1
 8008734:	4798      	blx	r3
    lv_obj_invalidate(obj);
 8008736:	4620      	mov	r0, r4
 8008738:	f7ff fdbe 	bl	80082b8 <lv_obj_invalidate>
}
 800873c:	b002      	add	sp, #8
 800873e:	bd70      	pop	{r4, r5, r6, pc}

08008740 <lv_obj_set_width>:
    return area_p->y2 - area_p->y1 + 1;
 8008740:	8ac2      	ldrh	r2, [r0, #22]
 8008742:	8a43      	ldrh	r3, [r0, #18]
 8008744:	3201      	adds	r2, #1
 8008746:	1ad2      	subs	r2, r2, r3
    lv_obj_set_size(obj, w, lv_obj_get_height(obj));
 8008748:	b212      	sxth	r2, r2
 800874a:	f7ff bfc6 	b.w	80086da <lv_obj_set_size>

0800874e <lv_obj_set_height>:
    return area_p->x2 - area_p->x1 + 1;
 800874e:	8a83      	ldrh	r3, [r0, #20]
 8008750:	8a02      	ldrh	r2, [r0, #16]
 8008752:	3301      	adds	r3, #1
 8008754:	1a9b      	subs	r3, r3, r2
    lv_obj_set_size(obj, lv_obj_get_width(obj), h);
 8008756:	460a      	mov	r2, r1
 8008758:	b219      	sxth	r1, r3
 800875a:	f7ff bfbe 	b.w	80086da <lv_obj_set_size>

0800875e <lv_obj_align>:
    return obj->par;
 800875e:	f8d0 c000 	ldr.w	ip, [r0]
{
 8008762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008766:	2900      	cmp	r1, #0
 8008768:	bf08      	it	eq
 800876a:	4661      	moveq	r1, ip
 800876c:	f9bd 4018 	ldrsh.w	r4, [sp, #24]
    rel_x = obj->coords.x1 - parent->coords.x1;
 8008770:	8a07      	ldrh	r7, [r0, #16]
 8008772:	f8bc 6010 	ldrh.w	r6, [ip, #16]
    rel_y = obj->coords.y1 - parent->coords.y1;
 8008776:	f8b0 e012 	ldrh.w	lr, [r0, #18]
 800877a:	f8bc 5012 	ldrh.w	r5, [ip, #18]
    switch(align) {
 800877e:	2a14      	cmp	r2, #20
 8008780:	d816      	bhi.n	80087b0 <lv_obj_align+0x52>
 8008782:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008786:	001b      	.short	0x001b
 8008788:	00460138 	.word	0x00460138
 800878c:	0065005e 	.word	0x0065005e
 8008790:	009c007f 	.word	0x009c007f
 8008794:	00b500a3 	.word	0x00b500a3
 8008798:	00c100bc 	.word	0x00c100bc
 800879c:	00e300dc 	.word	0x00e300dc
 80087a0:	010300e8 	.word	0x010300e8
 80087a4:	010f010b 	.word	0x010f010b
 80087a8:	012f012b 	.word	0x012f012b
 80087ac:	01350132 	.word	0x01350132
    rel_x = obj->coords.x1 - parent->coords.x1;
 80087b0:	1bbf      	subs	r7, r7, r6
    rel_y = obj->coords.y1 - parent->coords.y1;
 80087b2:	ebae 0205 	sub.w	r2, lr, r5
    rel_x = obj->coords.x1 - parent->coords.x1;
 80087b6:	b23f      	sxth	r7, r7
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 80087b8:	b212      	sxth	r2, r2
            break;
 80087ba:	e055      	b.n	8008868 <lv_obj_align+0x10a>
 80087bc:	8a8a      	ldrh	r2, [r1, #20]
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 80087be:	f04f 0802 	mov.w	r8, #2
 80087c2:	f8b1 c010 	ldrh.w	ip, [r1, #16]
 80087c6:	3201      	adds	r2, #1
 80087c8:	eba2 020c 	sub.w	r2, r2, ip
 80087cc:	f8b0 c014 	ldrh.w	ip, [r0, #20]
 80087d0:	f10c 0c01 	add.w	ip, ip, #1
 80087d4:	b212      	sxth	r2, r2
 80087d6:	ebac 0707 	sub.w	r7, ip, r7
    return area_p->y2 - area_p->y1 + 1;
 80087da:	f8b1 c016 	ldrh.w	ip, [r1, #22]
 80087de:	b23f      	sxth	r7, r7
 80087e0:	f10c 0c01 	add.w	ip, ip, #1
 80087e4:	fb92 f2f8 	sdiv	r2, r2, r8
 80087e8:	fb97 f7f8 	sdiv	r7, r7, r8
 80087ec:	1bd7      	subs	r7, r2, r7
 80087ee:	8a4a      	ldrh	r2, [r1, #18]
 80087f0:	ebac 0c02 	sub.w	ip, ip, r2
 80087f4:	8ac2      	ldrh	r2, [r0, #22]
 80087f6:	b23f      	sxth	r7, r7
 80087f8:	3201      	adds	r2, #1
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 80087fa:	fa0f fc8c 	sxth.w	ip, ip
 80087fe:	eba2 020e 	sub.w	r2, r2, lr
 8008802:	b212      	sxth	r2, r2
 8008804:	fb9c fcf8 	sdiv	ip, ip, r8
 8008808:	fb92 f2f8 	sdiv	r2, r2, r8
 800880c:	ebac 0202 	sub.w	r2, ip, r2
 8008810:	e7d2      	b.n	80087b8 <lv_obj_align+0x5a>
    return area_p->x2 - area_p->x1 + 1;
 8008812:	8a8a      	ldrh	r2, [r1, #20]
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8008814:	f04f 0c02 	mov.w	ip, #2
 8008818:	f8b1 e010 	ldrh.w	lr, [r1, #16]
 800881c:	3201      	adds	r2, #1
 800881e:	eba2 020e 	sub.w	r2, r2, lr
 8008822:	f8b0 e014 	ldrh.w	lr, [r0, #20]
 8008826:	f10e 0e01 	add.w	lr, lr, #1
 800882a:	b212      	sxth	r2, r2
 800882c:	ebae 0707 	sub.w	r7, lr, r7
 8008830:	b23f      	sxth	r7, r7
 8008832:	fb92 f2fc 	sdiv	r2, r2, ip
 8008836:	fb97 f7fc 	sdiv	r7, r7, ip
 800883a:	1bd7      	subs	r7, r2, r7
 800883c:	b23f      	sxth	r7, r7
            new_y = 0;
 800883e:	2200      	movs	r2, #0
            break;
 8008840:	e012      	b.n	8008868 <lv_obj_align+0x10a>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8008842:	8a82      	ldrh	r2, [r0, #20]
 8008844:	1bd2      	subs	r2, r2, r7
 8008846:	8a8f      	ldrh	r7, [r1, #20]
 8008848:	1abf      	subs	r7, r7, r2
 800884a:	8a0a      	ldrh	r2, [r1, #16]
 800884c:	1abf      	subs	r7, r7, r2
 800884e:	e7f5      	b.n	800883c <lv_obj_align+0xde>
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 8008850:	8ac2      	ldrh	r2, [r0, #22]
 8008852:	eba2 0e0e 	sub.w	lr, r2, lr
 8008856:	8aca      	ldrh	r2, [r1, #22]
 8008858:	eba2 020e 	sub.w	r2, r2, lr
 800885c:	f8b1 e012 	ldrh.w	lr, [r1, #18]
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 8008860:	eba2 020e 	sub.w	r2, r2, lr
    return area_p->y2 - area_p->y1 + 1;
 8008864:	b212      	sxth	r2, r2
            new_x = 0;
 8008866:	2700      	movs	r7, #0
    new_x -= par_abs_x;
 8008868:	1b9b      	subs	r3, r3, r6
    new_y -= par_abs_y;
 800886a:	1b64      	subs	r4, r4, r5
    new_x -= par_abs_x;
 800886c:	8a0e      	ldrh	r6, [r1, #16]
    new_y -= par_abs_y;
 800886e:	8a4d      	ldrh	r5, [r1, #18]
    new_x -= par_abs_x;
 8008870:	4433      	add	r3, r6
    new_y -= par_abs_y;
 8008872:	442c      	add	r4, r5
    new_x -= par_abs_x;
 8008874:	441f      	add	r7, r3
    new_y -= par_abs_y;
 8008876:	4422      	add	r2, r4
    lv_obj_set_pos(obj, new_x, new_y);
 8008878:	b239      	sxth	r1, r7
 800887a:	b212      	sxth	r2, r2
}
 800887c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_set_pos(obj, new_x, new_y);
 8008880:	f7ff bdb4 	b.w	80083ec <lv_obj_set_pos>
    return area_p->x2 - area_p->x1 + 1;
 8008884:	8a8a      	ldrh	r2, [r1, #20]
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8008886:	f04f 0802 	mov.w	r8, #2
 800888a:	f8b1 c010 	ldrh.w	ip, [r1, #16]
 800888e:	3201      	adds	r2, #1
 8008890:	eba2 020c 	sub.w	r2, r2, ip
 8008894:	f8b0 c014 	ldrh.w	ip, [r0, #20]
 8008898:	f10c 0c01 	add.w	ip, ip, #1
 800889c:	b212      	sxth	r2, r2
 800889e:	ebac 0707 	sub.w	r7, ip, r7
 80088a2:	b23f      	sxth	r7, r7
 80088a4:	fb92 f2f8 	sdiv	r2, r2, r8
 80088a8:	fb97 f7f8 	sdiv	r7, r7, r8
 80088ac:	1bd7      	subs	r7, r2, r7
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 80088ae:	8ac2      	ldrh	r2, [r0, #22]
 80088b0:	b23f      	sxth	r7, r7
 80088b2:	eba2 0e0e 	sub.w	lr, r2, lr
 80088b6:	8aca      	ldrh	r2, [r1, #22]
 80088b8:	eba2 020e 	sub.w	r2, r2, lr
 80088bc:	e063      	b.n	8008986 <lv_obj_align+0x228>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 80088be:	8a82      	ldrh	r2, [r0, #20]
 80088c0:	1bd2      	subs	r2, r2, r7
 80088c2:	8a8f      	ldrh	r7, [r1, #20]
 80088c4:	1abf      	subs	r7, r7, r2
 80088c6:	8a0a      	ldrh	r2, [r1, #16]
 80088c8:	1abf      	subs	r7, r7, r2
 80088ca:	e7f0      	b.n	80088ae <lv_obj_align+0x150>
    return area_p->y2 - area_p->y1 + 1;
 80088cc:	8aca      	ldrh	r2, [r1, #22]
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 80088ce:	f04f 0c02 	mov.w	ip, #2
 80088d2:	8a4f      	ldrh	r7, [r1, #18]
 80088d4:	3201      	adds	r2, #1
 80088d6:	1bd2      	subs	r2, r2, r7
 80088d8:	8ac7      	ldrh	r7, [r0, #22]
 80088da:	3701      	adds	r7, #1
 80088dc:	b212      	sxth	r2, r2
 80088de:	eba7 0e0e 	sub.w	lr, r7, lr
 80088e2:	fa0f fe8e 	sxth.w	lr, lr
 80088e6:	fb92 f2fc 	sdiv	r2, r2, ip
 80088ea:	fb9e fefc 	sdiv	lr, lr, ip
 80088ee:	e7b7      	b.n	8008860 <lv_obj_align+0x102>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 80088f0:	8a82      	ldrh	r2, [r0, #20]
 80088f2:	1bd2      	subs	r2, r2, r7
 80088f4:	8a8f      	ldrh	r7, [r1, #20]
 80088f6:	1abf      	subs	r7, r7, r2
    return area_p->x2 - area_p->x1 + 1;
 80088f8:	8a0a      	ldrh	r2, [r1, #16]
 80088fa:	1abf      	subs	r7, r7, r2
 80088fc:	e055      	b.n	80089aa <lv_obj_align+0x24c>
    return area_p->y2 - area_p->y1 + 1;
 80088fe:	8ac2      	ldrh	r2, [r0, #22]
 8008900:	eba2 020e 	sub.w	r2, r2, lr
            new_y = -lv_obj_get_height(obj);
 8008904:	43d2      	mvns	r2, r2
 8008906:	e7ad      	b.n	8008864 <lv_obj_align+0x106>
    return area_p->x2 - area_p->x1 + 1;
 8008908:	8a8a      	ldrh	r2, [r1, #20]
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800890a:	f04f 0802 	mov.w	r8, #2
 800890e:	f8b1 c010 	ldrh.w	ip, [r1, #16]
 8008912:	3201      	adds	r2, #1
 8008914:	eba2 020c 	sub.w	r2, r2, ip
 8008918:	f8b0 c014 	ldrh.w	ip, [r0, #20]
 800891c:	f10c 0c01 	add.w	ip, ip, #1
 8008920:	b212      	sxth	r2, r2
 8008922:	ebac 0707 	sub.w	r7, ip, r7
 8008926:	b23f      	sxth	r7, r7
 8008928:	fb92 f2f8 	sdiv	r2, r2, r8
 800892c:	fb97 f7f8 	sdiv	r7, r7, r8
 8008930:	1bd7      	subs	r7, r2, r7
    return area_p->y2 - area_p->y1 + 1;
 8008932:	8ac2      	ldrh	r2, [r0, #22]
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8008934:	b23f      	sxth	r7, r7
 8008936:	eba2 020e 	sub.w	r2, r2, lr
            new_y = - lv_obj_get_height(obj);
 800893a:	43d2      	mvns	r2, r2
 800893c:	e73c      	b.n	80087b8 <lv_obj_align+0x5a>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800893e:	8a82      	ldrh	r2, [r0, #20]
 8008940:	1bd2      	subs	r2, r2, r7
 8008942:	8a8f      	ldrh	r7, [r1, #20]
 8008944:	1abf      	subs	r7, r7, r2
 8008946:	8a0a      	ldrh	r2, [r1, #16]
 8008948:	1abf      	subs	r7, r7, r2
 800894a:	e7f2      	b.n	8008932 <lv_obj_align+0x1d4>
 800894c:	8aca      	ldrh	r2, [r1, #22]
 800894e:	8a4f      	ldrh	r7, [r1, #18]
 8008950:	3201      	adds	r2, #1
 8008952:	1bd2      	subs	r2, r2, r7
 8008954:	e786      	b.n	8008864 <lv_obj_align+0x106>
    return area_p->x2 - area_p->x1 + 1;
 8008956:	8a8a      	ldrh	r2, [r1, #20]
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8008958:	f04f 0c02 	mov.w	ip, #2
 800895c:	f8b1 e010 	ldrh.w	lr, [r1, #16]
 8008960:	3201      	adds	r2, #1
 8008962:	eba2 020e 	sub.w	r2, r2, lr
 8008966:	f8b0 e014 	ldrh.w	lr, [r0, #20]
 800896a:	f10e 0e01 	add.w	lr, lr, #1
 800896e:	b212      	sxth	r2, r2
 8008970:	ebae 0707 	sub.w	r7, lr, r7
 8008974:	b23f      	sxth	r7, r7
 8008976:	fb92 f2fc 	sdiv	r2, r2, ip
 800897a:	fb97 f7fc 	sdiv	r7, r7, ip
 800897e:	1bd2      	subs	r2, r2, r7
 8008980:	b217      	sxth	r7, r2
    return area_p->y2 - area_p->y1 + 1;
 8008982:	8aca      	ldrh	r2, [r1, #22]
 8008984:	3201      	adds	r2, #1
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 8008986:	f8b1 e012 	ldrh.w	lr, [r1, #18]
 800898a:	e024      	b.n	80089d6 <lv_obj_align+0x278>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800898c:	8a82      	ldrh	r2, [r0, #20]
 800898e:	1bd2      	subs	r2, r2, r7
 8008990:	8a8f      	ldrh	r7, [r1, #20]
 8008992:	1abf      	subs	r7, r7, r2
 8008994:	8a0a      	ldrh	r2, [r1, #16]
 8008996:	1abf      	subs	r7, r7, r2
 8008998:	b23f      	sxth	r7, r7
 800899a:	e7f2      	b.n	8008982 <lv_obj_align+0x224>
    return area_p->x2 - area_p->x1 + 1;
 800899c:	8a82      	ldrh	r2, [r0, #20]
 800899e:	1bd7      	subs	r7, r2, r7
            new_x = - lv_obj_get_width(obj);
 80089a0:	43ff      	mvns	r7, r7
 80089a2:	e74b      	b.n	800883c <lv_obj_align+0xde>
 80089a4:	8a82      	ldrh	r2, [r0, #20]
 80089a6:	1bd7      	subs	r7, r2, r7
            new_x = - lv_obj_get_width(obj);
 80089a8:	43ff      	mvns	r7, r7
    return area_p->y2 - area_p->y1 + 1;
 80089aa:	8aca      	ldrh	r2, [r1, #22]
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 80089ac:	f04f 0802 	mov.w	r8, #2
 80089b0:	f8b1 c012 	ldrh.w	ip, [r1, #18]
    return area_p->x2 - area_p->x1 + 1;
 80089b4:	b23f      	sxth	r7, r7
    return area_p->y2 - area_p->y1 + 1;
 80089b6:	3201      	adds	r2, #1
 80089b8:	eba2 020c 	sub.w	r2, r2, ip
 80089bc:	f8b0 c016 	ldrh.w	ip, [r0, #22]
 80089c0:	f10c 0c01 	add.w	ip, ip, #1
 80089c4:	b212      	sxth	r2, r2
 80089c6:	ebac 0e0e 	sub.w	lr, ip, lr
 80089ca:	fa0f fe8e 	sxth.w	lr, lr
 80089ce:	fb92 f2f8 	sdiv	r2, r2, r8
 80089d2:	fb9e fef8 	sdiv	lr, lr, r8
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 80089d6:	eba2 020e 	sub.w	r2, r2, lr
 80089da:	e6ed      	b.n	80087b8 <lv_obj_align+0x5a>
    return area_p->x2 - area_p->x1 + 1;
 80089dc:	8a82      	ldrh	r2, [r0, #20]
 80089de:	1bd7      	subs	r7, r2, r7
            new_x = - lv_obj_get_width(obj);
 80089e0:	43ff      	mvns	r7, r7
 80089e2:	e764      	b.n	80088ae <lv_obj_align+0x150>
 80089e4:	8a8f      	ldrh	r7, [r1, #20]
 80089e6:	3701      	adds	r7, #1
 80089e8:	e72f      	b.n	800884a <lv_obj_align+0xec>
 80089ea:	8a8f      	ldrh	r7, [r1, #20]
 80089ec:	3701      	adds	r7, #1
 80089ee:	e783      	b.n	80088f8 <lv_obj_align+0x19a>
 80089f0:	8a8f      	ldrh	r7, [r1, #20]
 80089f2:	3701      	adds	r7, #1
 80089f4:	e767      	b.n	80088c6 <lv_obj_align+0x168>
            new_y = 0;
 80089f6:	2200      	movs	r2, #0
            new_x = 0;
 80089f8:	4617      	mov	r7, r2
 80089fa:	e735      	b.n	8008868 <lv_obj_align+0x10a>

080089fc <lv_obj_refresh_style>:
{
 80089fc:	b510      	push	{r4, lr}
 80089fe:	4604      	mov	r4, r0
    lv_obj_invalidate(obj);
 8008a00:	f7ff fc5a 	bl	80082b8 <lv_obj_invalidate>
    obj->signal_func(obj, LV_SIGNAL_STYLE_CHG, NULL);
 8008a04:	2200      	movs	r2, #0
 8008a06:	2103      	movs	r1, #3
 8008a08:	69a3      	ldr	r3, [r4, #24]
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	4798      	blx	r3
    lv_obj_invalidate(obj);
 8008a0e:	4620      	mov	r0, r4
}
 8008a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(obj);
 8008a14:	f7ff bc50 	b.w	80082b8 <lv_obj_invalidate>

08008a18 <lv_obj_set_click>:
    obj->click = (en == true ? 1 : 0);
 8008a18:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8008a1c:	f361 0300 	bfi	r3, r1, #0, #1
 8008a20:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 8008a24:	4770      	bx	lr

08008a26 <lv_obj_set_drag>:
    if(en == true) lv_obj_set_click(obj, true);     /*Drag is useless without enabled clicking*/
 8008a26:	b129      	cbz	r1, 8008a34 <lv_obj_set_drag+0xe>
    obj->click = (en == true ? 1 : 0);
 8008a28:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8008a2c:	f043 0301 	orr.w	r3, r3, #1
 8008a30:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    obj->drag = (en == true ? 1 : 0);
 8008a34:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8008a38:	f361 0341 	bfi	r3, r1, #1, #1
 8008a3c:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 8008a40:	4770      	bx	lr

08008a42 <lv_obj_set_drag_throw>:
    obj->drag_throw = (en == true ? 1 : 0);
 8008a42:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8008a46:	f361 0382 	bfi	r3, r1, #2, #1
 8008a4a:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 8008a4e:	4770      	bx	lr

08008a50 <lv_obj_set_drag_parent>:
    obj->drag_parent = (en == true ? 1 : 0);
 8008a50:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8008a54:	f361 03c3 	bfi	r3, r1, #3, #1
 8008a58:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 8008a5c:	4770      	bx	lr

08008a5e <lv_obj_set_protect>:
    obj->protect |= prot;
 8008a5e:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8008a62:	4319      	orrs	r1, r3
 8008a64:	f880 1031 	strb.w	r1, [r0, #49]	; 0x31
 8008a68:	4770      	bx	lr

08008a6a <lv_obj_clear_protect>:
    obj->protect &= prot;
 8008a6a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8008a6e:	ea23 0101 	bic.w	r1, r3, r1
 8008a72:	f880 1031 	strb.w	r1, [r0, #49]	; 0x31
 8008a76:	4770      	bx	lr

08008a78 <lv_obj_set_signal_func>:
    obj->signal_func = fp;
 8008a78:	6181      	str	r1, [r0, #24]
 8008a7a:	4770      	bx	lr

08008a7c <lv_obj_set_design_func>:
    obj->design_func = fp;
 8008a7c:	61c1      	str	r1, [r0, #28]
 8008a7e:	4770      	bx	lr

08008a80 <lv_obj_allocate_ext_attr>:
{
 8008a80:	b510      	push	{r4, lr}
 8008a82:	4604      	mov	r4, r0
    obj->ext_attr = lv_mem_realloc(obj->ext_attr, ext_size);
 8008a84:	6a00      	ldr	r0, [r0, #32]
 8008a86:	f005 fa67 	bl	800df58 <lv_mem_realloc>
 8008a8a:	6220      	str	r0, [r4, #32]
}
 8008a8c:	bd10      	pop	{r4, pc}

08008a8e <lv_obj_refresh_ext_size>:
    obj->ext_size = 0;
 8008a8e:	2200      	movs	r2, #0
    obj->signal_func(obj, LV_SIGNAL_REFR_EXT_SIZE, NULL);
 8008a90:	6983      	ldr	r3, [r0, #24]
 8008a92:	2104      	movs	r1, #4
{
 8008a94:	b510      	push	{r4, lr}
 8008a96:	4604      	mov	r4, r0
    obj->ext_size = 0;
 8008a98:	8682      	strh	r2, [r0, #52]	; 0x34
    obj->signal_func(obj, LV_SIGNAL_REFR_EXT_SIZE, NULL);
 8008a9a:	4798      	blx	r3
    lv_obj_invalidate(obj);
 8008a9c:	4620      	mov	r0, r4
}
 8008a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(obj);
 8008aa2:	f7ff bc09 	b.w	80082b8 <lv_obj_invalidate>
	...

08008aa8 <lv_obj_animate>:
{
 8008aa8:	b530      	push	{r4, r5, lr}
    a.act_time = (int32_t) - delay;
 8008aaa:	425b      	negs	r3, r3
{
 8008aac:	b08b      	sub	sp, #44	; 0x2c
    bool out = (type & LV_ANIM_DIR_MASK) == LV_ANIM_IN ? false : true;
 8008aae:	b24d      	sxtb	r5, r1
    switch(type) {
 8008ab0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    a.act_time = (int32_t) - delay;
 8008ab4:	f8ad 301e 	strh.w	r3, [sp, #30]
    a.end_cb = (void(*)(void *))cb;
 8008ab8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a.time = time;
 8008aba:	f8ad 201c 	strh.w	r2, [sp, #28]
    a.end_cb = (void(*)(void *))cb;
 8008abe:	9303      	str	r3, [sp, #12]
    a.playback = 0;
 8008ac0:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    a.path = lv_anim_path_linear;
 8008ac4:	4b30      	ldr	r3, [pc, #192]	; (8008b88 <lv_obj_animate+0xe0>)
    a.repeat = 0;
 8008ac6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    return obj->par;
 8008aca:	6804      	ldr	r4, [r0, #0]
    a.path = lv_anim_path_linear;
 8008acc:	9304      	str	r3, [sp, #16]
    a.playback_pause = 0;
 8008ace:	2300      	movs	r3, #0
    a.var = obj;
 8008ad0:	9001      	str	r0, [sp, #4]
    a.repeat = 0;
 8008ad2:	f363 0241 	bfi	r2, r3, #1, #1
    a.playback_pause = 0;
 8008ad6:	f8ad 3020 	strh.w	r3, [sp, #32]
    a.repeat_pause = 0;
 8008ada:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    a.repeat = 0;
 8008ade:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
    switch(type) {
 8008ae2:	2906      	cmp	r1, #6
 8008ae4:	d812      	bhi.n	8008b0c <lv_obj_animate+0x64>
 8008ae6:	e8df f001 	tbb	[pc, r1]
 8008aea:	294c      	.short	0x294c
 8008aec:	3e1c3404 	.word	0x3e1c3404
 8008af0:	45          	.byte	0x45
 8008af1:	00          	.byte	0x00
            a.fp = (void(*)(void *, int32_t))lv_obj_set_x;
 8008af2:	4b26      	ldr	r3, [pc, #152]	; (8008b8c <lv_obj_animate+0xe4>)
 8008af4:	8a02      	ldrh	r2, [r0, #16]
 8008af6:	9302      	str	r3, [sp, #8]
 8008af8:	8a83      	ldrh	r3, [r0, #20]
 8008afa:	3301      	adds	r3, #1
 8008afc:	1a9b      	subs	r3, r3, r2
            a.start = -lv_obj_get_width(obj);
 8008afe:	b21b      	sxth	r3, r3
 8008b00:	425b      	negs	r3, r3
 8008b02:	9305      	str	r3, [sp, #20]
    rel_x = obj->coords.x1 - parent->coords.x1;
 8008b04:	8a23      	ldrh	r3, [r4, #16]
    rel_y = obj->coords.y1 - parent->coords.y1;
 8008b06:	1ad2      	subs	r2, r2, r3
            a.end = lv_obj_get_y(obj);
 8008b08:	b212      	sxth	r2, r2
 8008b0a:	9206      	str	r2, [sp, #24]
    if(out != false) {
 8008b0c:	2d00      	cmp	r5, #0
    lv_anim_create(&a);
 8008b0e:	a801      	add	r0, sp, #4
        int32_t tmp = a.start;
 8008b10:	bfbf      	itttt	lt
 8008b12:	9b05      	ldrlt	r3, [sp, #20]
        a.start = a.end;
 8008b14:	9a06      	ldrlt	r2, [sp, #24]
        a.end = tmp;
 8008b16:	9306      	strlt	r3, [sp, #24]
        a.start = a.end;
 8008b18:	9205      	strlt	r2, [sp, #20]
    lv_anim_create(&a);
 8008b1a:	f004 fddd 	bl	800d6d8 <lv_anim_create>
}
 8008b1e:	b00b      	add	sp, #44	; 0x2c
 8008b20:	bd30      	pop	{r4, r5, pc}
            a.fp = (void(*)(void *, int32_t))lv_obj_set_x;
 8008b22:	4b1a      	ldr	r3, [pc, #104]	; (8008b8c <lv_obj_animate+0xe4>)
 8008b24:	8a22      	ldrh	r2, [r4, #16]
 8008b26:	9302      	str	r3, [sp, #8]
 8008b28:	8aa3      	ldrh	r3, [r4, #20]
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	1a9b      	subs	r3, r3, r2
            a.start = lv_obj_get_width(par);
 8008b2e:	b21b      	sxth	r3, r3
 8008b30:	9305      	str	r3, [sp, #20]
    rel_x = obj->coords.x1 - parent->coords.x1;
 8008b32:	8a03      	ldrh	r3, [r0, #16]
    return area_p->y2 - area_p->y1 + 1;
 8008b34:	1a9b      	subs	r3, r3, r2
            a.end = lv_obj_get_height(obj);
 8008b36:	b21b      	sxth	r3, r3
            a.end = 0;
 8008b38:	9306      	str	r3, [sp, #24]
            break;
 8008b3a:	e7e7      	b.n	8008b0c <lv_obj_animate+0x64>
            a.fp = (void(*)(void *, int32_t))lv_obj_set_y;
 8008b3c:	4b14      	ldr	r3, [pc, #80]	; (8008b90 <lv_obj_animate+0xe8>)
 8008b3e:	8a42      	ldrh	r2, [r0, #18]
 8008b40:	9302      	str	r3, [sp, #8]
 8008b42:	8ac3      	ldrh	r3, [r0, #22]
 8008b44:	3301      	adds	r3, #1
 8008b46:	1a9b      	subs	r3, r3, r2
            a.start = -lv_obj_get_height(obj);
 8008b48:	b21b      	sxth	r3, r3
 8008b4a:	425b      	negs	r3, r3
 8008b4c:	9305      	str	r3, [sp, #20]
    rel_y = obj->coords.y1 - parent->coords.y1;
 8008b4e:	8a63      	ldrh	r3, [r4, #18]
 8008b50:	e7d9      	b.n	8008b06 <lv_obj_animate+0x5e>
            a.fp = (void(*)(void *, int32_t))lv_obj_set_y;
 8008b52:	4b0f      	ldr	r3, [pc, #60]	; (8008b90 <lv_obj_animate+0xe8>)
 8008b54:	8a62      	ldrh	r2, [r4, #18]
 8008b56:	9302      	str	r3, [sp, #8]
 8008b58:	8ae3      	ldrh	r3, [r4, #22]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	1a9b      	subs	r3, r3, r2
            a.start = lv_obj_get_height(par);
 8008b5e:	b21b      	sxth	r3, r3
 8008b60:	9305      	str	r3, [sp, #20]
    rel_y = obj->coords.y1 - parent->coords.y1;
 8008b62:	8a43      	ldrh	r3, [r0, #18]
 8008b64:	e7e6      	b.n	8008b34 <lv_obj_animate+0x8c>
            a.fp = (void(*)(void *, int32_t))lv_obj_set_width;
 8008b66:	4a0b      	ldr	r2, [pc, #44]	; (8008b94 <lv_obj_animate+0xec>)
            a.start = 0;
 8008b68:	9305      	str	r3, [sp, #20]
    return area_p->x2 - area_p->x1 + 1;
 8008b6a:	8a83      	ldrh	r3, [r0, #20]
            a.fp = (void(*)(void *, int32_t))lv_obj_set_width;
 8008b6c:	9202      	str	r2, [sp, #8]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	8a02      	ldrh	r2, [r0, #16]
 8008b72:	e7df      	b.n	8008b34 <lv_obj_animate+0x8c>
            a.fp = (void(*)(void *, int32_t))lv_obj_set_height;
 8008b74:	4a08      	ldr	r2, [pc, #32]	; (8008b98 <lv_obj_animate+0xf0>)
            a.start = 0;
 8008b76:	9305      	str	r3, [sp, #20]
    return area_p->y2 - area_p->y1 + 1;
 8008b78:	8ac3      	ldrh	r3, [r0, #22]
            a.fp = (void(*)(void *, int32_t))lv_obj_set_height;
 8008b7a:	9202      	str	r2, [sp, #8]
 8008b7c:	3301      	adds	r3, #1
 8008b7e:	8a42      	ldrh	r2, [r0, #18]
 8008b80:	e7d8      	b.n	8008b34 <lv_obj_animate+0x8c>
            a.fp = NULL;
 8008b82:	9302      	str	r3, [sp, #8]
            a.start = 0;
 8008b84:	9305      	str	r3, [sp, #20]
 8008b86:	e7d7      	b.n	8008b38 <lv_obj_animate+0x90>
 8008b88:	0800d751 	.word	0x0800d751
 8008b8c:	080086b7 	.word	0x080086b7
 8008b90:	080086cb 	.word	0x080086cb
 8008b94:	08008741 	.word	0x08008741
 8008b98:	0800874f 	.word	0x0800874f

08008b9c <lv_scr_act>:
}
 8008b9c:	4b01      	ldr	r3, [pc, #4]	; (8008ba4 <lv_scr_act+0x8>)
 8008b9e:	6818      	ldr	r0, [r3, #0]
 8008ba0:	4770      	bx	lr
 8008ba2:	bf00      	nop
 8008ba4:	20000974 	.word	0x20000974

08008ba8 <lv_layer_top>:
}
 8008ba8:	4b01      	ldr	r3, [pc, #4]	; (8008bb0 <lv_layer_top+0x8>)
 8008baa:	6818      	ldr	r0, [r3, #0]
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop
 8008bb0:	20000988 	.word	0x20000988

08008bb4 <lv_layer_sys>:
}
 8008bb4:	4b01      	ldr	r3, [pc, #4]	; (8008bbc <lv_layer_sys+0x8>)
 8008bb6:	6818      	ldr	r0, [r3, #0]
 8008bb8:	4770      	bx	lr
 8008bba:	bf00      	nop
 8008bbc:	20000984 	.word	0x20000984

08008bc0 <lv_obj_get_parent>:
}
 8008bc0:	6800      	ldr	r0, [r0, #0]
 8008bc2:	4770      	bx	lr

08008bc4 <lv_obj_get_child>:
{
 8008bc4:	3004      	adds	r0, #4
    if(child == NULL) {
 8008bc6:	b909      	cbnz	r1, 8008bcc <lv_obj_get_child+0x8>
        return lv_ll_get_head(&obj->child_ll);
 8008bc8:	f005 b84f 	b.w	800dc6a <lv_ll_get_head>
        return lv_ll_get_next(&obj->child_ll, child);
 8008bcc:	f005 b853 	b.w	800dc76 <lv_ll_get_next>

08008bd0 <refresh_childen_style>:
{
 8008bd0:	b538      	push	{r3, r4, r5, lr}
 8008bd2:	4605      	mov	r5, r0
        return lv_ll_get_head(&obj->child_ll);
 8008bd4:	3004      	adds	r0, #4
 8008bd6:	f005 f848 	bl	800dc6a <lv_ll_get_head>
        child = lv_obj_get_child(obj, child);
 8008bda:	4604      	mov	r4, r0
    while(child != NULL) {
 8008bdc:	b900      	cbnz	r0, 8008be0 <refresh_childen_style+0x10>
}
 8008bde:	bd38      	pop	{r3, r4, r5, pc}
        if(child->style_p == NULL) {
 8008be0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008be2:	b953      	cbnz	r3, 8008bfa <refresh_childen_style+0x2a>
            refresh_childen_style(child);     /*Check children too*/
 8008be4:	4620      	mov	r0, r4
 8008be6:	f7ff fff3 	bl	8008bd0 <refresh_childen_style>
            lv_obj_refresh_style(child);       /*Notify the child about the style change*/
 8008bea:	4620      	mov	r0, r4
 8008bec:	f7ff ff06 	bl	80089fc <lv_obj_refresh_style>
        child = lv_obj_get_child(obj, child);
 8008bf0:	4621      	mov	r1, r4
 8008bf2:	4628      	mov	r0, r5
 8008bf4:	f7ff ffe6 	bl	8008bc4 <lv_obj_get_child>
 8008bf8:	e7ef      	b.n	8008bda <refresh_childen_style+0xa>
        } else if(child->style_p->glass) {
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	07db      	lsls	r3, r3, #31
 8008bfe:	d5f7      	bpl.n	8008bf0 <refresh_childen_style+0x20>
            refresh_childen_style(child);
 8008c00:	4620      	mov	r0, r4
 8008c02:	f7ff ffe5 	bl	8008bd0 <refresh_childen_style>
 8008c06:	e7f3      	b.n	8008bf0 <refresh_childen_style+0x20>

08008c08 <lv_obj_set_style>:
{
 8008c08:	b510      	push	{r4, lr}
 8008c0a:	4604      	mov	r4, r0
    obj->style_p = style;
 8008c0c:	6241      	str	r1, [r0, #36]	; 0x24
    refresh_childen_style(obj);
 8008c0e:	f7ff ffdf 	bl	8008bd0 <refresh_childen_style>
    lv_obj_refresh_style(obj);
 8008c12:	4620      	mov	r0, r4
}
 8008c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_refresh_style(obj);
 8008c18:	f7ff bef0 	b.w	80089fc <lv_obj_refresh_style>

08008c1c <lv_init>:
{
 8008c1c:	b538      	push	{r3, r4, r5, lr}
    lv_mem_init();
 8008c1e:	f005 f901 	bl	800de24 <lv_mem_init>
    act_scr = def_scr;
 8008c22:	4c19      	ldr	r4, [pc, #100]	; (8008c88 <lv_init+0x6c>)
    lv_task_init();
 8008c24:	f005 f9c2 	bl	800dfac <lv_task_init>
    lv_obj_set_style(top_layer, &lv_style_transp_fit);
 8008c28:	4d18      	ldr	r5, [pc, #96]	; (8008c8c <lv_init+0x70>)
    lv_fs_init();
 8008c2a:	f004 ff41 	bl	800dab0 <lv_fs_init>
    lv_ufs_init();
 8008c2e:	f005 fea7 	bl	800e980 <lv_ufs_init>
    lv_font_init();
 8008c32:	f004 fea0 	bl	800d976 <lv_font_init>
    lv_anim_init();
 8008c36:	f004 fd09 	bl	800d64c <lv_anim_init>
    lv_style_init();
 8008c3a:	f000 fb95 	bl	8009368 <lv_style_init>
    lv_refr_init();
 8008c3e:	f000 fb1b 	bl	8009278 <lv_refr_init>
    lv_ll_init(&scr_ll, sizeof(lv_obj_t));
 8008c42:	213c      	movs	r1, #60	; 0x3c
 8008c44:	4812      	ldr	r0, [pc, #72]	; (8008c90 <lv_init+0x74>)
 8008c46:	f004 ffca 	bl	800dbde <lv_ll_init>
    def_scr = lv_obj_create(NULL, NULL);
 8008c4a:	2100      	movs	r1, #0
 8008c4c:	4608      	mov	r0, r1
 8008c4e:	f7ff fc11 	bl	8008474 <lv_obj_create>
    top_layer = lv_obj_create(NULL, NULL);
 8008c52:	2100      	movs	r1, #0
    act_scr = def_scr;
 8008c54:	6020      	str	r0, [r4, #0]
    top_layer = lv_obj_create(NULL, NULL);
 8008c56:	4608      	mov	r0, r1
 8008c58:	f7ff fc0c 	bl	8008474 <lv_obj_create>
 8008c5c:	4b0d      	ldr	r3, [pc, #52]	; (8008c94 <lv_init+0x78>)
    lv_obj_set_style(top_layer, &lv_style_transp_fit);
 8008c5e:	4629      	mov	r1, r5
    top_layer = lv_obj_create(NULL, NULL);
 8008c60:	6018      	str	r0, [r3, #0]
    lv_obj_set_style(top_layer, &lv_style_transp_fit);
 8008c62:	f7ff ffd1 	bl	8008c08 <lv_obj_set_style>
    sys_layer = lv_obj_create(NULL, NULL);
 8008c66:	2100      	movs	r1, #0
 8008c68:	4608      	mov	r0, r1
 8008c6a:	f7ff fc03 	bl	8008474 <lv_obj_create>
 8008c6e:	4b0a      	ldr	r3, [pc, #40]	; (8008c98 <lv_init+0x7c>)
    lv_obj_set_style(sys_layer, &lv_style_transp_fit);
 8008c70:	4629      	mov	r1, r5
    sys_layer = lv_obj_create(NULL, NULL);
 8008c72:	6018      	str	r0, [r3, #0]
    lv_obj_set_style(sys_layer, &lv_style_transp_fit);
 8008c74:	f7ff ffc8 	bl	8008c08 <lv_obj_set_style>
    lv_obj_invalidate(act_scr);
 8008c78:	6820      	ldr	r0, [r4, #0]
 8008c7a:	f7ff fb1d 	bl	80082b8 <lv_obj_invalidate>
}
 8008c7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_indev_init();
 8008c82:	f7ff ba59 	b.w	8008138 <lv_indev_init>
 8008c86:	bf00      	nop
 8008c88:	20000974 	.word	0x20000974
 8008c8c:	20017d78 	.word	0x20017d78
 8008c90:	20000978 	.word	0x20000978
 8008c94:	20000988 	.word	0x20000988
 8008c98:	20000984 	.word	0x20000984

08008c9c <lv_obj_get_child_back>:
{
 8008c9c:	3004      	adds	r0, #4
    if(child == NULL) {
 8008c9e:	b909      	cbnz	r1, 8008ca4 <lv_obj_get_child_back+0x8>
        return lv_ll_get_tail(&obj->child_ll);
 8008ca0:	f004 bfe6 	b.w	800dc70 <lv_ll_get_tail>
        return lv_ll_get_prev(&obj->child_ll, child);
 8008ca4:	f004 bfec 	b.w	800dc80 <lv_ll_get_prev>

08008ca8 <lv_obj_get_coords>:
    memcpy(dest, src, sizeof(lv_area_t));
 8008ca8:	f850 3f10 	ldr.w	r3, [r0, #16]!
 8008cac:	600b      	str	r3, [r1, #0]
 8008cae:	6843      	ldr	r3, [r0, #4]
 8008cb0:	604b      	str	r3, [r1, #4]
 8008cb2:	4770      	bx	lr

08008cb4 <lv_obj_get_x>:
    rel_x = obj->coords.x1 - parent->coords.x1;
 8008cb4:	6803      	ldr	r3, [r0, #0]
 8008cb6:	8a00      	ldrh	r0, [r0, #16]
 8008cb8:	8a1b      	ldrh	r3, [r3, #16]
 8008cba:	1ac0      	subs	r0, r0, r3
}
 8008cbc:	b200      	sxth	r0, r0
 8008cbe:	4770      	bx	lr

08008cc0 <lv_obj_get_y>:
    rel_y = obj->coords.y1 - parent->coords.y1;
 8008cc0:	6803      	ldr	r3, [r0, #0]
 8008cc2:	8a40      	ldrh	r0, [r0, #18]
 8008cc4:	8a5b      	ldrh	r3, [r3, #18]
 8008cc6:	1ac0      	subs	r0, r0, r3
}
 8008cc8:	b200      	sxth	r0, r0
 8008cca:	4770      	bx	lr

08008ccc <lv_obj_get_width>:
    return area_p->x2 - area_p->x1 + 1;
 8008ccc:	8a83      	ldrh	r3, [r0, #20]
 8008cce:	8a00      	ldrh	r0, [r0, #16]
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	1a18      	subs	r0, r3, r0
}
 8008cd4:	b200      	sxth	r0, r0
 8008cd6:	4770      	bx	lr

08008cd8 <lv_obj_get_height>:
    return area_p->y2 - area_p->y1 + 1;
 8008cd8:	8ac3      	ldrh	r3, [r0, #22]
 8008cda:	8a40      	ldrh	r0, [r0, #18]
 8008cdc:	3301      	adds	r3, #1
 8008cde:	1a18      	subs	r0, r3, r0
}
 8008ce0:	b200      	sxth	r0, r0
 8008ce2:	4770      	bx	lr

08008ce4 <lv_obj_get_style>:
{
 8008ce4:	b570      	push	{r4, r5, r6, lr}
    lv_style_t * style_act = obj->style_p;
 8008ce6:	6a45      	ldr	r5, [r0, #36]	; 0x24
{
 8008ce8:	4606      	mov	r6, r0
    if(style_act == NULL) {
 8008cea:	b98d      	cbnz	r5, 8008d10 <lv_obj_get_style+0x2c>
        lv_obj_t * par = obj->par;
 8008cec:	6804      	ldr	r4, [r0, #0]
        while(par) {
 8008cee:	b17c      	cbz	r4, 8008d10 <lv_obj_get_style+0x2c>
            if(par->style_p) {
 8008cf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cf2:	b1fb      	cbz	r3, 8008d34 <lv_obj_get_style+0x50>
                if(par->style_p->glass == 0) {
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	07db      	lsls	r3, r3, #31
 8008cf8:	d41c      	bmi.n	8008d34 <lv_obj_get_style+0x50>
    return obj->group_p;
 8008cfa:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
                    if(lv_group_get_focused(g) == par) {
 8008cfc:	4628      	mov	r0, r5
 8008cfe:	f7fe fe08 	bl	8007912 <lv_group_get_focused>
 8008d02:	4284      	cmp	r4, r0
 8008d04:	d114      	bne.n	8008d30 <lv_obj_get_style+0x4c>
                        style_act = lv_group_mod_style(g, par->style_p);
 8008d06:	4628      	mov	r0, r5
 8008d08:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008d0a:	f7fe fde7 	bl	80078dc <lv_group_mod_style>
 8008d0e:	4605      	mov	r5, r0
    if(obj->group_p) {
 8008d10:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8008d12:	b140      	cbz	r0, 8008d26 <lv_obj_get_style+0x42>
        if(lv_group_get_focused(obj->group_p) == obj) {
 8008d14:	f7fe fdfd 	bl	8007912 <lv_group_get_focused>
 8008d18:	4286      	cmp	r6, r0
 8008d1a:	d104      	bne.n	8008d26 <lv_obj_get_style+0x42>
            style_act = lv_group_mod_style(obj->group_p, style_act);
 8008d1c:	4629      	mov	r1, r5
 8008d1e:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8008d20:	f7fe fddc 	bl	80078dc <lv_group_mod_style>
 8008d24:	4605      	mov	r5, r0
}
 8008d26:	4804      	ldr	r0, [pc, #16]	; (8008d38 <lv_obj_get_style+0x54>)
 8008d28:	2d00      	cmp	r5, #0
 8008d2a:	bf18      	it	ne
 8008d2c:	4628      	movne	r0, r5
 8008d2e:	bd70      	pop	{r4, r5, r6, pc}
                        style_act = par->style_p;
 8008d30:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008d32:	e7ed      	b.n	8008d10 <lv_obj_get_style+0x2c>
            par = par->par;
 8008d34:	6824      	ldr	r4, [r4, #0]
 8008d36:	e7da      	b.n	8008cee <lv_obj_get_style+0xa>
 8008d38:	20017dc0 	.word	0x20017dc0

08008d3c <lv_obj_signal>:
{
 8008d3c:	b570      	push	{r4, r5, r6, lr}
 8008d3e:	460c      	mov	r4, r1
 8008d40:	4605      	mov	r5, r0
 8008d42:	4616      	mov	r6, r2
    lv_style_t * style = lv_obj_get_style(obj);
 8008d44:	f7ff ffce 	bl	8008ce4 <lv_obj_get_style>
    if(sign == LV_SIGNAL_CHILD_CHG) {
 8008d48:	2c01      	cmp	r4, #1
 8008d4a:	d105      	bne.n	8008d58 <lv_obj_signal+0x1c>
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
 8008d4c:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
 8008d50:	43c0      	mvns	r0, r0
 8008d52:	f000 0001 	and.w	r0, r0, #1
 8008d56:	bd70      	pop	{r4, r5, r6, pc}
    } else if(sign == LV_SIGNAL_REFR_EXT_SIZE) {
 8008d58:	2c04      	cmp	r4, #4
 8008d5a:	d108      	bne.n	8008d6e <lv_obj_signal+0x32>
        if(style->body.shadow.width > obj->ext_size) obj->ext_size = style->body.shadow.width;
 8008d5c:	f9b0 301c 	ldrsh.w	r3, [r0, #28]
 8008d60:	f9b5 2034 	ldrsh.w	r2, [r5, #52]	; 0x34
 8008d64:	429a      	cmp	r2, r3
 8008d66:	da00      	bge.n	8008d6a <lv_obj_signal+0x2e>
 8008d68:	86ab      	strh	r3, [r5, #52]	; 0x34
    lv_res_t res = LV_RES_OK;
 8008d6a:	2001      	movs	r0, #1
}
 8008d6c:	bd70      	pop	{r4, r5, r6, pc}
    } else if(sign ==  LV_SIGNAL_STYLE_CHG) {
 8008d6e:	2c03      	cmp	r4, #3
 8008d70:	d103      	bne.n	8008d7a <lv_obj_signal+0x3e>
        lv_obj_refresh_ext_size(obj);
 8008d72:	4628      	mov	r0, r5
 8008d74:	f7ff fe8b 	bl	8008a8e <lv_obj_refresh_ext_size>
 8008d78:	e7f7      	b.n	8008d6a <lv_obj_signal+0x2e>
    } else if(sign ==  LV_SIGNAL_GET_TYPE) {
 8008d7a:	2c05      	cmp	r4, #5
        buf->type[0] = "lv_obj";
 8008d7c:	bf04      	itt	eq
 8008d7e:	4b01      	ldreq	r3, [pc, #4]	; (8008d84 <lv_obj_signal+0x48>)
 8008d80:	6033      	streq	r3, [r6, #0]
 8008d82:	e7f2      	b.n	8008d6a <lv_obj_signal+0x2e>
 8008d84:	0808377c 	.word	0x0808377c

08008d88 <lv_obj_get_hidden>:
    return obj->hidden == 0 ? false : true;
 8008d88:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
}
 8008d8c:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8008d90:	4770      	bx	lr

08008d92 <lv_obj_get_click>:
    return obj->click == 0 ? false : true;
 8008d92:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
}
 8008d96:	f000 0001 	and.w	r0, r0, #1
 8008d9a:	4770      	bx	lr

08008d9c <lv_obj_get_drag>:
    return obj->drag == 0 ? false : true;
 8008d9c:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
}
 8008da0:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8008da4:	4770      	bx	lr

08008da6 <lv_obj_get_drag_throw>:
    return obj->drag_throw == 0 ? false : true;
 8008da6:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
}
 8008daa:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8008dae:	4770      	bx	lr

08008db0 <lv_obj_get_drag_parent>:
    return obj->drag_parent == 0 ? false : true;
 8008db0:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
}
 8008db4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8008db8:	4770      	bx	lr

08008dba <lv_obj_get_opa_scale>:
    while(parent) {
 8008dba:	b908      	cbnz	r0, 8008dc0 <lv_obj_get_opa_scale+0x6>
    return LV_OPA_COVER;
 8008dbc:	20ff      	movs	r0, #255	; 0xff
}
 8008dbe:	4770      	bx	lr
        if(parent->opa_scale_en) return parent->opa_scale;
 8008dc0:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8008dc4:	065b      	lsls	r3, r3, #25
 8008dc6:	d502      	bpl.n	8008dce <lv_obj_get_opa_scale+0x14>
 8008dc8:	f890 0032 	ldrb.w	r0, [r0, #50]	; 0x32
 8008dcc:	4770      	bx	lr
    return obj->par;
 8008dce:	6800      	ldr	r0, [r0, #0]
 8008dd0:	e7f3      	b.n	8008dba <lv_obj_get_opa_scale>

08008dd2 <lv_obj_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 8008dd2:	2a02      	cmp	r2, #2
{
 8008dd4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008dd6:	4604      	mov	r4, r0
 8008dd8:	460e      	mov	r6, r1
    if(mode == LV_DESIGN_COVER_CHK) {
 8008dda:	d134      	bne.n	8008e46 <lv_obj_design+0x74>
        lv_style_t * style = lv_obj_get_style(obj);
 8008ddc:	f7ff ff82 	bl	8008ce4 <lv_obj_get_style>
        if(style->body.empty != 0) return false;
 8008de0:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 8008de4:	07db      	lsls	r3, r3, #31
 8008de6:	d42b      	bmi.n	8008e40 <lv_obj_design+0x6e>
        uint16_t r = style->body.radius;
 8008de8:	8985      	ldrh	r5, [r0, #12]
        if(r == LV_RADIUS_CIRCLE) return false;
 8008dea:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8008dee:	429d      	cmp	r5, r3
 8008df0:	d026      	beq.n	8008e40 <lv_obj_design+0x6e>
    memcpy(dest, src, sizeof(lv_area_t));
 8008df2:	f854 0f10 	ldr.w	r0, [r4, #16]!
 8008df6:	466b      	mov	r3, sp
 8008df8:	6861      	ldr	r1, [r4, #4]
 8008dfa:	c303      	stmia	r3!, {r0, r1}
        area_tmp.x1 += r;
 8008dfc:	f8bd 3000 	ldrh.w	r3, [sp]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8008e00:	4669      	mov	r1, sp
 8008e02:	4630      	mov	r0, r6
        area_tmp.x1 += r;
 8008e04:	442b      	add	r3, r5
 8008e06:	f8ad 3000 	strh.w	r3, [sp]
        area_tmp.x2 -= r;
 8008e0a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8008e0e:	1b5b      	subs	r3, r3, r5
 8008e10:	f8ad 3004 	strh.w	r3, [sp, #4]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8008e14:	f004 fd68 	bl	800d8e8 <lv_area_is_in>
 8008e18:	b190      	cbz	r0, 8008e40 <lv_obj_design+0x6e>
 8008e1a:	6820      	ldr	r0, [r4, #0]
 8008e1c:	466b      	mov	r3, sp
 8008e1e:	6861      	ldr	r1, [r4, #4]
 8008e20:	c303      	stmia	r3!, {r0, r1}
        area_tmp.y1 += r;
 8008e22:	f8bd 3002 	ldrh.w	r3, [sp, #2]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8008e26:	4669      	mov	r1, sp
 8008e28:	4630      	mov	r0, r6
        area_tmp.y1 += r;
 8008e2a:	442b      	add	r3, r5
 8008e2c:	f8ad 3002 	strh.w	r3, [sp, #2]
        area_tmp.y2 -= r;
 8008e30:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008e34:	1b5d      	subs	r5, r3, r5
 8008e36:	f8ad 5006 	strh.w	r5, [sp, #6]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8008e3a:	f004 fd55 	bl	800d8e8 <lv_area_is_in>
 8008e3e:	b900      	cbnz	r0, 8008e42 <lv_obj_design+0x70>
        if(style->body.empty != 0) return false;
 8008e40:	2000      	movs	r0, #0
}
 8008e42:	b002      	add	sp, #8
 8008e44:	bd70      	pop	{r4, r5, r6, pc}
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 8008e46:	b95a      	cbnz	r2, 8008e60 <lv_obj_design+0x8e>
        lv_style_t * style = lv_obj_get_style(obj);
 8008e48:	f7ff ff4c 	bl	8008ce4 <lv_obj_get_style>
 8008e4c:	4602      	mov	r2, r0
        lv_draw_rect(&obj->coords, mask_p, style, lv_obj_get_opa_scale(obj));
 8008e4e:	4620      	mov	r0, r4
 8008e50:	f7ff ffb3 	bl	8008dba <lv_obj_get_opa_scale>
 8008e54:	4631      	mov	r1, r6
 8008e56:	4603      	mov	r3, r0
 8008e58:	f104 0010 	add.w	r0, r4, #16
 8008e5c:	f001 fe16 	bl	800aa8c <lv_draw_rect>
    return true;
 8008e60:	2001      	movs	r0, #1
 8008e62:	e7ee      	b.n	8008e42 <lv_obj_design+0x70>

08008e64 <lv_obj_is_protected>:
    return (obj->protect & prot) == 0 ? false : true ;
 8008e64:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8008e68:	4219      	tst	r1, r3
}
 8008e6a:	bf14      	ite	ne
 8008e6c:	2001      	movne	r0, #1
 8008e6e:	2000      	moveq	r0, #0
 8008e70:	4770      	bx	lr

08008e72 <lv_obj_get_signal_func>:
}
 8008e72:	6980      	ldr	r0, [r0, #24]
 8008e74:	4770      	bx	lr

08008e76 <lv_obj_get_design_func>:
}
 8008e76:	69c0      	ldr	r0, [r0, #28]
 8008e78:	4770      	bx	lr

08008e7a <lv_obj_get_ext_attr>:
}
 8008e7a:	6a00      	ldr	r0, [r0, #32]
 8008e7c:	4770      	bx	lr

08008e7e <lv_obj_get_group>:
}
 8008e7e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8008e80:	4770      	bx	lr

08008e82 <lv_obj_is_focused>:
{
 8008e82:	b510      	push	{r4, lr}
 8008e84:	4604      	mov	r4, r0
    if(obj->group_p) {
 8008e86:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8008e88:	b120      	cbz	r0, 8008e94 <lv_obj_is_focused+0x12>
        if(lv_group_get_focused(obj->group_p) == obj) return true;
 8008e8a:	f7fe fd42 	bl	8007912 <lv_group_get_focused>
 8008e8e:	1a23      	subs	r3, r4, r0
 8008e90:	4258      	negs	r0, r3
 8008e92:	4158      	adcs	r0, r3
}
 8008e94:	bd10      	pop	{r4, pc}

08008e96 <lv_refr_get_top_obj>:
 * @param area_p pointer to an area
 * @param obj the first object to start the searching (typically a screen)
 * @return
 */
static lv_obj_t * lv_refr_get_top_obj(const lv_area_t * area_p, lv_obj_t * obj)
{
 8008e96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e98:	460c      	mov	r4, r1
    lv_obj_t * i;
    lv_obj_t * found_p = NULL;

    /*If this object is fully cover the draw area check the children too */
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 8008e9a:	3110      	adds	r1, #16
{
 8008e9c:	4606      	mov	r6, r0
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 8008e9e:	f004 fd23 	bl	800d8e8 <lv_area_is_in>
 8008ea2:	b908      	cbnz	r0, 8008ea8 <lv_refr_get_top_obj+0x12>
    lv_obj_t * found_p = NULL;
 8008ea4:	2000      	movs	r0, #0
 8008ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 8008ea8:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8008eac:	06db      	lsls	r3, r3, #27
 8008eae:	d4f9      	bmi.n	8008ea4 <lv_refr_get_top_obj+0xe>
        LL_READ(obj->child_ll, i)        {
 8008eb0:	1d27      	adds	r7, r4, #4
 8008eb2:	4638      	mov	r0, r7
 8008eb4:	f004 fed9 	bl	800dc6a <lv_ll_get_head>
 8008eb8:	4605      	mov	r5, r0
 8008eba:	b998      	cbnz	r0, 8008ee4 <lv_refr_get_top_obj+0x4e>
            }
        }

        /*If no better children check this object*/
        if(found_p == NULL) {
            lv_style_t * style = lv_obj_get_style(obj);
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	f7ff ff11 	bl	8008ce4 <lv_obj_get_style>
            if(style->body.opa == LV_OPA_COVER &&
 8008ec2:	7b83      	ldrb	r3, [r0, #14]
 8008ec4:	2bff      	cmp	r3, #255	; 0xff
 8008ec6:	d1ed      	bne.n	8008ea4 <lv_refr_get_top_obj+0xe>
                    obj->design_func(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
 8008ec8:	69e3      	ldr	r3, [r4, #28]
 8008eca:	2202      	movs	r2, #2
 8008ecc:	4631      	mov	r1, r6
 8008ece:	4620      	mov	r0, r4
 8008ed0:	4798      	blx	r3
            if(style->body.opa == LV_OPA_COVER &&
 8008ed2:	2800      	cmp	r0, #0
 8008ed4:	d0e6      	beq.n	8008ea4 <lv_refr_get_top_obj+0xe>
                    lv_obj_get_opa_scale(obj) == LV_OPA_COVER) {
 8008ed6:	4620      	mov	r0, r4
 8008ed8:	f7ff ff6f 	bl	8008dba <lv_obj_get_opa_scale>
                    obj->design_func(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
 8008edc:	28ff      	cmp	r0, #255	; 0xff
 8008ede:	d1e1      	bne.n	8008ea4 <lv_refr_get_top_obj+0xe>
 8008ee0:	4620      	mov	r0, r4
                found_p = obj;
            }
        }
    }

    return found_p;
 8008ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            found_p = lv_refr_get_top_obj(area_p, i);
 8008ee4:	4629      	mov	r1, r5
 8008ee6:	4630      	mov	r0, r6
 8008ee8:	f7ff ffd5 	bl	8008e96 <lv_refr_get_top_obj>
            if(found_p != NULL) {
 8008eec:	b920      	cbnz	r0, 8008ef8 <lv_refr_get_top_obj+0x62>
        LL_READ(obj->child_ll, i)        {
 8008eee:	4629      	mov	r1, r5
 8008ef0:	4638      	mov	r0, r7
 8008ef2:	f004 fec0 	bl	800dc76 <lv_ll_get_next>
 8008ef6:	e7df      	b.n	8008eb8 <lv_refr_get_top_obj+0x22>
}
 8008ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008efa <lv_refr_obj>:
 * Refresh an object an all of its children. (Called recursively)
 * @param obj pointer to an object to refresh
 * @param mask_ori_p pointer to an area, the objects will be drawn only here
 */
static void lv_refr_obj(lv_obj_t * obj, const lv_area_t * mask_ori_p)
{
 8008efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /*Do not refresh hidden objects*/
    if(obj->hidden != 0) return;
 8008efe:	f890 6030 	ldrb.w	r6, [r0, #48]	; 0x30
{
 8008f02:	b08a      	sub	sp, #40	; 0x28
 8008f04:	4604      	mov	r4, r0
 8008f06:	4688      	mov	r8, r1
    if(obj->hidden != 0) return;
 8008f08:	f016 0610 	ands.w	r6, r6, #16
 8008f0c:	d141      	bne.n	8008f92 <lv_refr_obj+0x98>
    /* Truncate the original mask to the coordinates of the parent
     * because the parent and its children are visible only here */
    lv_area_t obj_mask;
    lv_area_t obj_ext_mask;
    lv_area_t obj_area;
    lv_coord_t ext_size = obj->ext_size;
 8008f0e:	f9b0 5034 	ldrsh.w	r5, [r0, #52]	; 0x34
    lv_obj_get_coords(obj, &obj_area);
 8008f12:	a904      	add	r1, sp, #16
 8008f14:	f7ff fec8 	bl	8008ca8 <lv_obj_get_coords>
    obj_area.x1 -= ext_size;
 8008f18:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8008f1c:	b2ab      	uxth	r3, r5
    obj_area.y1 -= ext_size;
    obj_area.x2 += ext_size;
    obj_area.y2 += ext_size;
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 8008f1e:	4641      	mov	r1, r8
 8008f20:	a802      	add	r0, sp, #8
    obj_area.x1 -= ext_size;
 8008f22:	1ad2      	subs	r2, r2, r3
 8008f24:	f8ad 2010 	strh.w	r2, [sp, #16]
    obj_area.y1 -= ext_size;
 8008f28:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8008f2c:	1ad2      	subs	r2, r2, r3
 8008f2e:	f8ad 2012 	strh.w	r2, [sp, #18]
    obj_area.x2 += ext_size;
 8008f32:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8008f36:	441a      	add	r2, r3
 8008f38:	f8ad 2014 	strh.w	r2, [sp, #20]
    obj_area.y2 += ext_size;
 8008f3c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8008f40:	4413      	add	r3, r2
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 8008f42:	aa04      	add	r2, sp, #16
    obj_area.y2 += ext_size;
 8008f44:	f8ad 3016 	strh.w	r3, [sp, #22]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 8008f48:	f004 fc4c 	bl	800d7e4 <lv_area_intersect>

    /*Draw the parent and its children only if they ore on 'mask_parent'*/
    if(union_ok != false) {
 8008f4c:	b308      	cbz	r0, 8008f92 <lv_refr_obj+0x98>

        /* Redraw the object */
        lv_style_t * style = lv_obj_get_style(obj);
 8008f4e:	4620      	mov	r0, r4
 8008f50:	f7ff fec8 	bl	8008ce4 <lv_obj_get_style>
        if(style->body.opa != LV_OPA_TRANSP) {
 8008f54:	7b83      	ldrb	r3, [r0, #14]
        lv_style_t * style = lv_obj_get_style(obj);
 8008f56:	4607      	mov	r7, r0
        if(style->body.opa != LV_OPA_TRANSP) {
 8008f58:	b123      	cbz	r3, 8008f64 <lv_refr_obj+0x6a>
            obj->design_func(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
 8008f5a:	69e3      	ldr	r3, [r4, #28]
 8008f5c:	4632      	mov	r2, r6
 8008f5e:	a902      	add	r1, sp, #8
 8008f60:	4620      	mov	r0, r4
 8008f62:	4798      	blx	r3
            //tick_wait_ms(100);  /*DEBUG: Wait after every object draw to see the order of drawing*/
        }

        /*Create a new 'obj_mask' without 'ext_size' because the children can't be visible there*/
        lv_obj_get_coords(obj, &obj_area);
 8008f64:	a904      	add	r1, sp, #16
 8008f66:	4620      	mov	r0, r4
 8008f68:	f7ff fe9e 	bl	8008ca8 <lv_obj_get_coords>
        union_ok = lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
 8008f6c:	aa04      	add	r2, sp, #16
 8008f6e:	4641      	mov	r1, r8
 8008f70:	4668      	mov	r0, sp
 8008f72:	f004 fc37 	bl	800d7e4 <lv_area_intersect>
        if(union_ok != false) {
 8008f76:	b128      	cbz	r0, 8008f84 <lv_refr_obj+0x8a>
            lv_area_t mask_child; /*Mask from obj and its child*/
            lv_obj_t * child_p;
            lv_area_t child_area;
            LL_READ_BACK(obj->child_ll, child_p) {
 8008f78:	1d26      	adds	r6, r4, #4
 8008f7a:	4630      	mov	r0, r6
 8008f7c:	f004 fe78 	bl	800dc70 <lv_ll_get_tail>
 8008f80:	4605      	mov	r5, r0
 8008f82:	b948      	cbnz	r0, 8008f98 <lv_refr_obj+0x9e>
                }
            }
        }

        /* If all the children are redrawn make 'post draw' design */
        if(style->body.opa != LV_OPA_TRANSP) {
 8008f84:	7bbb      	ldrb	r3, [r7, #14]
 8008f86:	b123      	cbz	r3, 8008f92 <lv_refr_obj+0x98>
            obj->design_func(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
 8008f88:	69e3      	ldr	r3, [r4, #28]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	a902      	add	r1, sp, #8
 8008f8e:	4620      	mov	r0, r4
 8008f90:	4798      	blx	r3
        }
    }
}
 8008f92:	b00a      	add	sp, #40	; 0x28
 8008f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                lv_obj_get_coords(child_p, &child_area);
 8008f98:	a908      	add	r1, sp, #32
 8008f9a:	4628      	mov	r0, r5
 8008f9c:	f7ff fe84 	bl	8008ca8 <lv_obj_get_coords>
                child_area.x1 -= ext_size;
 8008fa0:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 8008fa2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8008fa6:	4669      	mov	r1, sp
 8008fa8:	a806      	add	r0, sp, #24
                child_area.x1 -= ext_size;
 8008faa:	1ad2      	subs	r2, r2, r3
 8008fac:	f8ad 2020 	strh.w	r2, [sp, #32]
                child_area.y1 -= ext_size;
 8008fb0:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8008fb4:	1ad2      	subs	r2, r2, r3
 8008fb6:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
                child_area.x2 += ext_size;
 8008fba:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8008fbe:	441a      	add	r2, r3
 8008fc0:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
                child_area.y2 += ext_size;
 8008fc4:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 8008fc8:	4413      	add	r3, r2
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8008fca:	aa08      	add	r2, sp, #32
                child_area.y2 += ext_size;
 8008fcc:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8008fd0:	f004 fc08 	bl	800d7e4 <lv_area_intersect>
                if(union_ok) {
 8008fd4:	b118      	cbz	r0, 8008fde <lv_refr_obj+0xe4>
                    lv_refr_obj(child_p, &mask_child);
 8008fd6:	a906      	add	r1, sp, #24
 8008fd8:	4628      	mov	r0, r5
 8008fda:	f7ff ff8e 	bl	8008efa <lv_refr_obj>
            LL_READ_BACK(obj->child_ll, child_p) {
 8008fde:	4629      	mov	r1, r5
 8008fe0:	4630      	mov	r0, r6
 8008fe2:	f004 fe4d 	bl	800dc80 <lv_ll_get_prev>
 8008fe6:	e7cb      	b.n	8008f80 <lv_refr_obj+0x86>

08008fe8 <lv_refr_obj_and_children>:
{
 8008fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fec:	460f      	mov	r7, r1
    if(top_p == NULL) top_p = lv_scr_act();
 8008fee:	4604      	mov	r4, r0
 8008ff0:	b910      	cbnz	r0, 8008ff8 <lv_refr_obj_and_children+0x10>
 8008ff2:	f7ff fdd3 	bl	8008b9c <lv_scr_act>
 8008ff6:	4604      	mov	r4, r0
    lv_refr_obj(top_p, mask_p);
 8008ff8:	4639      	mov	r1, r7
 8008ffa:	4620      	mov	r0, r4
 8008ffc:	f7ff ff7d 	bl	8008efa <lv_refr_obj>
    par = lv_obj_get_parent(top_p);
 8009000:	4620      	mov	r0, r4
 8009002:	f7ff fddd 	bl	8008bc0 <lv_obj_get_parent>
    lv_obj_t * border_p = top_p;
 8009006:	4621      	mov	r1, r4
    par = lv_obj_get_parent(top_p);
 8009008:	4605      	mov	r5, r0
    while(par != NULL) {
 800900a:	b935      	cbnz	r5, 800901a <lv_refr_obj_and_children+0x32>
        par = lv_obj_get_parent(par);
 800900c:	4620      	mov	r0, r4
 800900e:	f7ff fdd7 	bl	8008bc0 <lv_obj_get_parent>
 8009012:	4604      	mov	r4, r0
    while(par != NULL) {
 8009014:	b9a0      	cbnz	r0, 8009040 <lv_refr_obj_and_children+0x58>
}
 8009016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        i = lv_ll_get_prev(&(par->child_ll), border_p);
 800901a:	f105 0804 	add.w	r8, r5, #4
            i = lv_ll_get_prev(&(par->child_ll), i);
 800901e:	4640      	mov	r0, r8
 8009020:	f004 fe2e 	bl	800dc80 <lv_ll_get_prev>
 8009024:	4606      	mov	r6, r0
        while(i != NULL) {
 8009026:	b928      	cbnz	r0, 8009034 <lv_refr_obj_and_children+0x4c>
        par = lv_obj_get_parent(par);
 8009028:	4628      	mov	r0, r5
 800902a:	f7ff fdc9 	bl	8008bc0 <lv_obj_get_parent>
 800902e:	4629      	mov	r1, r5
 8009030:	4605      	mov	r5, r0
 8009032:	e7ea      	b.n	800900a <lv_refr_obj_and_children+0x22>
            lv_refr_obj(i, mask_p);
 8009034:	4639      	mov	r1, r7
 8009036:	4630      	mov	r0, r6
 8009038:	f7ff ff5f 	bl	8008efa <lv_refr_obj>
            i = lv_ll_get_prev(&(par->child_ll), i);
 800903c:	4631      	mov	r1, r6
 800903e:	e7ee      	b.n	800901e <lv_refr_obj_and_children+0x36>
        par->design_func(par, mask_p, LV_DESIGN_DRAW_POST);
 8009040:	69e3      	ldr	r3, [r4, #28]
 8009042:	2201      	movs	r2, #1
 8009044:	4639      	mov	r1, r7
 8009046:	4620      	mov	r0, r4
 8009048:	4798      	blx	r3
 800904a:	e7df      	b.n	800900c <lv_refr_obj_and_children+0x24>

0800904c <lv_refr_area_part_vdb>:
{
 800904c:	b513      	push	{r0, r1, r4, lr}
 800904e:	4604      	mov	r4, r0
    lv_vdb_t * vdb_p = lv_vdb_get();
 8009050:	f000 fb74 	bl	800973c <lv_vdb_get>
    if(!vdb_p) {
 8009054:	4602      	mov	r2, r0
 8009056:	b1c0      	cbz	r0, 800908a <lv_refr_area_part_vdb+0x3e>
    lv_area_intersect(&start_mask, area_p, &vdb_p->area);
 8009058:	4621      	mov	r1, r4
 800905a:	4668      	mov	r0, sp
 800905c:	f004 fbc2 	bl	800d7e4 <lv_area_intersect>
    top_p = lv_refr_get_top_obj(&start_mask, lv_scr_act());
 8009060:	f7ff fd9c 	bl	8008b9c <lv_scr_act>
 8009064:	4601      	mov	r1, r0
 8009066:	4668      	mov	r0, sp
 8009068:	f7ff ff15 	bl	8008e96 <lv_refr_get_top_obj>
    lv_refr_obj_and_children(top_p, &start_mask);
 800906c:	4669      	mov	r1, sp
 800906e:	f7ff ffbb 	bl	8008fe8 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_layer_top(), &start_mask);
 8009072:	f7ff fd99 	bl	8008ba8 <lv_layer_top>
 8009076:	4669      	mov	r1, sp
 8009078:	f7ff ffb6 	bl	8008fe8 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_layer_sys(), &start_mask);
 800907c:	f7ff fd9a 	bl	8008bb4 <lv_layer_sys>
 8009080:	4669      	mov	r1, sp
 8009082:	f7ff ffb1 	bl	8008fe8 <lv_refr_obj_and_children>
    lv_vdb_flush();
 8009086:	f000 fb67 	bl	8009758 <lv_vdb_flush>
}
 800908a:	b002      	add	sp, #8
 800908c:	bd10      	pop	{r4, pc}
	...

08009090 <lv_refr_task>:
{
 8009090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009094:	4c73      	ldr	r4, [pc, #460]	; (8009264 <lv_refr_task+0x1d4>)
 8009096:	b087      	sub	sp, #28
    for(join_in = 0; join_in < inv_buf_p; join_in++) {
 8009098:	f04f 0b00 	mov.w	fp, #0
 800909c:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 800926c <lv_refr_task+0x1dc>
    uint32_t start = lv_tick_get();
 80090a0:	4625      	mov	r5, r4
 80090a2:	f004 fa35 	bl	800d510 <lv_tick_get>
 80090a6:	9001      	str	r0, [sp, #4]
    for(join_in = 0; join_in < inv_buf_p; join_in++) {
 80090a8:	f8b9 3000 	ldrh.w	r3, [r9]
 80090ac:	459b      	cmp	fp, r3
 80090ae:	d31d      	bcc.n	80090ec <lv_refr_task+0x5c>
    px_num = 0;
 80090b0:	4e6d      	ldr	r6, [pc, #436]	; (8009268 <lv_refr_task+0x1d8>)
 80090b2:	2700      	movs	r7, #0
    if(round_cb) {
 80090b4:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8009274 <lv_refr_task+0x1e4>
    px_num = 0;
 80090b8:	6037      	str	r7, [r6, #0]
    for(i = 0; i < inv_buf_p; i++) {
 80090ba:	4b6c      	ldr	r3, [pc, #432]	; (800926c <lv_refr_task+0x1dc>)
 80090bc:	881d      	ldrh	r5, [r3, #0]
 80090be:	42af      	cmp	r7, r5
 80090c0:	d348      	bcc.n	8009154 <lv_refr_task+0xc4>
    memset(inv_buf, 0, sizeof(inv_buf));
 80090c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80090c6:	2100      	movs	r1, #0
 80090c8:	4866      	ldr	r0, [pc, #408]	; (8009264 <lv_refr_task+0x1d4>)
 80090ca:	f00c fd32 	bl	8015b32 <memset>
    inv_buf_p = 0;
 80090ce:	2300      	movs	r3, #0
 80090d0:	4a66      	ldr	r2, [pc, #408]	; (800926c <lv_refr_task+0x1dc>)
 80090d2:	8013      	strh	r3, [r2, #0]
    if(refr_done != false) {
 80090d4:	b13d      	cbz	r5, 80090e6 <lv_refr_task+0x56>
        if(monitor_cb != NULL) {
 80090d6:	4b66      	ldr	r3, [pc, #408]	; (8009270 <lv_refr_task+0x1e0>)
 80090d8:	681c      	ldr	r4, [r3, #0]
 80090da:	b124      	cbz	r4, 80090e6 <lv_refr_task+0x56>
            monitor_cb(lv_tick_elaps(start), px_num);
 80090dc:	9801      	ldr	r0, [sp, #4]
 80090de:	f004 fa25 	bl	800d52c <lv_tick_elaps>
 80090e2:	6831      	ldr	r1, [r6, #0]
 80090e4:	47a0      	blx	r4
}
 80090e6:	b007      	add	sp, #28
 80090e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(inv_buf[join_in].joined != 0) continue;
 80090ec:	7a2e      	ldrb	r6, [r5, #8]
 80090ee:	b36e      	cbz	r6, 800914c <lv_refr_task+0xbc>
    for(join_in = 0; join_in < inv_buf_p; join_in++) {
 80090f0:	f10b 0b01 	add.w	fp, fp, #1
 80090f4:	350a      	adds	r5, #10
 80090f6:	e7d7      	b.n	80090a8 <lv_refr_task+0x18>
            if(inv_buf[join_from].joined != 0 || join_in == join_from) {
 80090f8:	7a3b      	ldrb	r3, [r7, #8]
 80090fa:	bb03      	cbnz	r3, 800913e <lv_refr_task+0xae>
 80090fc:	45b3      	cmp	fp, r6
 80090fe:	d01e      	beq.n	800913e <lv_refr_task+0xae>
            if(lv_area_is_on(&inv_buf[join_in].area,
 8009100:	4639      	mov	r1, r7
 8009102:	4628      	mov	r0, r5
 8009104:	f004 fbd3 	bl	800d8ae <lv_area_is_on>
 8009108:	b1c8      	cbz	r0, 800913e <lv_refr_task+0xae>
            lv_area_join(&joined_area, &inv_buf[join_in].area,
 800910a:	463a      	mov	r2, r7
 800910c:	4629      	mov	r1, r5
 800910e:	a804      	add	r0, sp, #16
 8009110:	f004 fb92 	bl	800d838 <lv_area_join>
            if(lv_area_get_size(&joined_area) <
 8009114:	a804      	add	r0, sp, #16
 8009116:	f004 fb57 	bl	800d7c8 <lv_area_get_size>
 800911a:	4680      	mov	r8, r0
                    (lv_area_get_size(&inv_buf[join_in].area) + lv_area_get_size(&inv_buf[join_from].area))) {
 800911c:	4628      	mov	r0, r5
 800911e:	f004 fb53 	bl	800d7c8 <lv_area_get_size>
 8009122:	9002      	str	r0, [sp, #8]
 8009124:	4638      	mov	r0, r7
 8009126:	f004 fb4f 	bl	800d7c8 <lv_area_get_size>
 800912a:	9b02      	ldr	r3, [sp, #8]
 800912c:	4418      	add	r0, r3
            if(lv_area_get_size(&joined_area) <
 800912e:	4580      	cmp	r8, r0
 8009130:	d205      	bcs.n	800913e <lv_refr_task+0xae>
 8009132:	ab04      	add	r3, sp, #16
 8009134:	cb03      	ldmia	r3!, {r0, r1}
 8009136:	6028      	str	r0, [r5, #0]
 8009138:	6069      	str	r1, [r5, #4]
                inv_buf[join_from].joined = 1;
 800913a:	f887 a008 	strb.w	sl, [r7, #8]
        for(join_from = 0; join_from < inv_buf_p; join_from++) {
 800913e:	3601      	adds	r6, #1
 8009140:	370a      	adds	r7, #10
 8009142:	4b4a      	ldr	r3, [pc, #296]	; (800926c <lv_refr_task+0x1dc>)
 8009144:	881b      	ldrh	r3, [r3, #0]
 8009146:	429e      	cmp	r6, r3
 8009148:	d3d6      	bcc.n	80090f8 <lv_refr_task+0x68>
 800914a:	e7d1      	b.n	80090f0 <lv_refr_task+0x60>
        if(inv_buf[join_in].joined != 0) continue;
 800914c:	4627      	mov	r7, r4
                inv_buf[join_from].joined = 1;
 800914e:	f04f 0a01 	mov.w	sl, #1
 8009152:	e7f6      	b.n	8009142 <lv_refr_task+0xb2>
        if(inv_buf[i].joined == 0) {
 8009154:	7a21      	ldrb	r1, [r4, #8]
 8009156:	2900      	cmp	r1, #0
 8009158:	d139      	bne.n	80091ce <lv_refr_task+0x13e>
    return area_p->x2 - area_p->x1 + 1;
 800915a:	88a3      	ldrh	r3, [r4, #4]
    int32_t max_row = (uint32_t) LV_VDB_SIZE / w;
 800915c:	f44f 5061 	mov.w	r0, #14400	; 0x3840
 8009160:	8822      	ldrh	r2, [r4, #0]
 8009162:	3301      	adds	r3, #1
 8009164:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 8009168:	1a9b      	subs	r3, r3, r2
    return area_p->y2 - area_p->y1 + 1;
 800916a:	f10a 0201 	add.w	r2, sl, #1
 800916e:	b21b      	sxth	r3, r3
 8009170:	fbb0 f0f3 	udiv	r0, r0, r3
 8009174:	8863      	ldrh	r3, [r4, #2]
 8009176:	1ad2      	subs	r2, r2, r3
    if(max_row > h) max_row = h;
 8009178:	b213      	sxth	r3, r2
    if(round_cb) {
 800917a:	f8d9 2000 	ldr.w	r2, [r9]
 800917e:	4283      	cmp	r3, r0
 8009180:	bfa8      	it	ge
 8009182:	4603      	movge	r3, r0
 8009184:	4698      	mov	r8, r3
 8009186:	b342      	cbz	r2, 80091da <lv_refr_task+0x14a>
        tmp.y2 = max_row;
 8009188:	b21d      	sxth	r5, r3
        tmp.x1 = 0;
 800918a:	f8ad 1010 	strh.w	r1, [sp, #16]
        tmp.x2 = 0;
 800918e:	f8ad 1014 	strh.w	r1, [sp, #20]
        tmp.y1 = 0;
 8009192:	f8ad 1012 	strh.w	r1, [sp, #18]
            tmp.y2 = y_tmp;
 8009196:	f8ad 5016 	strh.w	r5, [sp, #22]
            round_cb(&tmp);
 800919a:	a804      	add	r0, sp, #16
 800919c:	f8d9 2000 	ldr.w	r2, [r9]
 80091a0:	3d01      	subs	r5, #1
 80091a2:	4790      	blx	r2
 80091a4:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80091a8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80091ac:	b22d      	sxth	r5, r5
 80091ae:	3101      	adds	r1, #1
 80091b0:	1a8a      	subs	r2, r1, r2
        } while(lv_area_get_height(&tmp) > max_row && y_tmp != 0);
 80091b2:	b212      	sxth	r2, r2
 80091b4:	4542      	cmp	r2, r8
 80091b6:	dd0d      	ble.n	80091d4 <lv_refr_task+0x144>
 80091b8:	2d00      	cmp	r5, #0
 80091ba:	d1ec      	bne.n	8009196 <lv_refr_task+0x106>
            if(monitor_cb != NULL) px_num += lv_area_get_size(&inv_buf[i].area);
 80091bc:	4b2c      	ldr	r3, [pc, #176]	; (8009270 <lv_refr_task+0x1e0>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	b12b      	cbz	r3, 80091ce <lv_refr_task+0x13e>
 80091c2:	4620      	mov	r0, r4
 80091c4:	f004 fb00 	bl	800d7c8 <lv_area_get_size>
 80091c8:	6833      	ldr	r3, [r6, #0]
 80091ca:	4418      	add	r0, r3
 80091cc:	6030      	str	r0, [r6, #0]
    for(i = 0; i < inv_buf_p; i++) {
 80091ce:	3701      	adds	r7, #1
 80091d0:	340a      	adds	r4, #10
 80091d2:	e772      	b.n	80090ba <lv_refr_task+0x2a>
        if(y_tmp == 0) {
 80091d4:	2d00      	cmp	r5, #0
 80091d6:	d0f1      	beq.n	80091bc <lv_refr_task+0x12c>
            max_row = tmp.y2 + 1;
 80091d8:	4688      	mov	r8, r1
 80091da:	f240 150f 	movw	r5, #271	; 0x10f
    for(row = area_p->y1; row  + max_row - 1 <= y2; row += max_row)  {
 80091de:	f9b4 b002 	ldrsh.w	fp, [r4, #2]
    lv_coord_t row_last = 0;
 80091e2:	2100      	movs	r1, #0
 80091e4:	4555      	cmp	r5, sl
 80091e6:	bfa8      	it	ge
 80091e8:	4655      	movge	r5, sl
        vdb_p->area.y2 = row + max_row - 1;
 80091ea:	fa1f fa88 	uxth.w	sl, r8
 80091ee:	f10a 33ff 	add.w	r3, sl, #4294967295
 80091f2:	9302      	str	r3, [sp, #8]
    for(row = area_p->y1; row  + max_row - 1 <= y2; row += max_row)  {
 80091f4:	eb0b 0008 	add.w	r0, fp, r8
 80091f8:	3801      	subs	r0, #1
 80091fa:	42a8      	cmp	r0, r5
 80091fc:	dd12      	ble.n	8009224 <lv_refr_task+0x194>
    if(y2 != row_last) {
 80091fe:	428d      	cmp	r5, r1
 8009200:	d0dc      	beq.n	80091bc <lv_refr_task+0x12c>
        lv_vdb_t * vdb_p = lv_vdb_get();
 8009202:	f000 fa9b 	bl	800973c <lv_vdb_get>
        if(!vdb_p) {
 8009206:	2800      	cmp	r0, #0
 8009208:	d0d8      	beq.n	80091bc <lv_refr_task+0x12c>
        vdb_p->area.x1 = area_p->x1;
 800920a:	f9b4 3000 	ldrsh.w	r3, [r4]
 800920e:	8003      	strh	r3, [r0, #0]
        vdb_p->area.x2 = area_p->x2;
 8009210:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
        vdb_p->area.y1 = row;
 8009214:	f8a0 b002 	strh.w	fp, [r0, #2]
        vdb_p->area.x2 = area_p->x2;
 8009218:	8083      	strh	r3, [r0, #4]
        vdb_p->area.y2 = y2;
 800921a:	80c5      	strh	r5, [r0, #6]
        lv_refr_area_part_vdb(area_p);
 800921c:	4620      	mov	r0, r4
 800921e:	f7ff ff15 	bl	800904c <lv_refr_area_part_vdb>
 8009222:	e7cb      	b.n	80091bc <lv_refr_task+0x12c>
        lv_vdb_t * vdb_p = lv_vdb_get();
 8009224:	f000 fa8a 	bl	800973c <lv_vdb_get>
        if(!vdb_p) {
 8009228:	2800      	cmp	r0, #0
 800922a:	d0c7      	beq.n	80091bc <lv_refr_task+0x12c>
        vdb_p->area.x1 = area_p->x1;
 800922c:	f9b4 1000 	ldrsh.w	r1, [r4]
 8009230:	9b02      	ldr	r3, [sp, #8]
 8009232:	8001      	strh	r1, [r0, #0]
        vdb_p->area.x2 = area_p->x2;
 8009234:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
        vdb_p->area.y1 = row;
 8009238:	f8a0 b002 	strh.w	fp, [r0, #2]
 800923c:	fa1f fb8b 	uxth.w	fp, fp
        vdb_p->area.x2 = area_p->x2;
 8009240:	8081      	strh	r1, [r0, #4]
 8009242:	eb0b 0103 	add.w	r1, fp, r3
 8009246:	b209      	sxth	r1, r1
        vdb_p->area.y2 = row + max_row - 1;
 8009248:	42a9      	cmp	r1, r5
 800924a:	bfa8      	it	ge
 800924c:	4629      	movge	r1, r5
 800924e:	80c1      	strh	r1, [r0, #6]
        lv_refr_area_part_vdb(area_p);
 8009250:	4620      	mov	r0, r4
        row_last = vdb_p->area.y2;
 8009252:	9103      	str	r1, [sp, #12]
        lv_refr_area_part_vdb(area_p);
 8009254:	f7ff fefa 	bl	800904c <lv_refr_area_part_vdb>
    for(row = area_p->y1; row  + max_row - 1 <= y2; row += max_row)  {
 8009258:	eb0a 020b 	add.w	r2, sl, fp
 800925c:	9903      	ldr	r1, [sp, #12]
 800925e:	fa0f fb82 	sxth.w	fp, r2
 8009262:	e7c7      	b.n	80091f4 <lv_refr_task+0x164>
 8009264:	2000098c 	.word	0x2000098c
 8009268:	20000ad4 	.word	0x20000ad4
 800926c:	20000acc 	.word	0x20000acc
 8009270:	20000ad0 	.word	0x20000ad0
 8009274:	20000ad8 	.word	0x20000ad8

08009278 <lv_refr_init>:
{
 8009278:	b510      	push	{r4, lr}
    inv_buf_p = 0;
 800927a:	2400      	movs	r4, #0
 800927c:	4b08      	ldr	r3, [pc, #32]	; (80092a0 <lv_refr_init+0x28>)
    memset(inv_buf, 0, sizeof(inv_buf));
 800927e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8009282:	4808      	ldr	r0, [pc, #32]	; (80092a4 <lv_refr_init+0x2c>)
 8009284:	4621      	mov	r1, r4
    inv_buf_p = 0;
 8009286:	801c      	strh	r4, [r3, #0]
    memset(inv_buf, 0, sizeof(inv_buf));
 8009288:	f00c fc53 	bl	8015b32 <memset>
    task = lv_task_create(lv_refr_task, LV_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 800928c:	4623      	mov	r3, r4
 800928e:	2203      	movs	r2, #3
 8009290:	2132      	movs	r1, #50	; 0x32
 8009292:	4805      	ldr	r0, [pc, #20]	; (80092a8 <lv_refr_init+0x30>)
 8009294:	f004 fe98 	bl	800dfc8 <lv_task_create>
}
 8009298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_task_ready(task);        /*Be sure the screen will be refreshed immediately on start up*/
 800929c:	f004 bf6e 	b.w	800e17c <lv_task_ready>
 80092a0:	20000acc 	.word	0x20000acc
 80092a4:	2000098c 	.word	0x2000098c
 80092a8:	08009091 	.word	0x08009091

080092ac <lv_inv_area>:
{
 80092ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(area_p == NULL) {
 80092ae:	4601      	mov	r1, r0
{
 80092b0:	b085      	sub	sp, #20
    if(area_p == NULL) {
 80092b2:	b918      	cbnz	r0, 80092bc <lv_inv_area+0x10>
        inv_buf_p = 0;
 80092b4:	4b21      	ldr	r3, [pc, #132]	; (800933c <lv_inv_area+0x90>)
 80092b6:	8018      	strh	r0, [r3, #0]
}
 80092b8:	b005      	add	sp, #20
 80092ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    scr_area.x1 = 0;
 80092bc:	2300      	movs	r3, #0
    suc = lv_area_intersect(&com_area, area_p, &scr_area);
 80092be:	466a      	mov	r2, sp
 80092c0:	a802      	add	r0, sp, #8
    scr_area.x1 = 0;
 80092c2:	f8ad 3000 	strh.w	r3, [sp]
    scr_area.y1 = 0;
 80092c6:	f8ad 3002 	strh.w	r3, [sp, #2]
    scr_area.x2 = LV_HOR_RES - 1;
 80092ca:	f240 13df 	movw	r3, #479	; 0x1df
 80092ce:	f8ad 3004 	strh.w	r3, [sp, #4]
    scr_area.y2 = LV_VER_RES - 1;
 80092d2:	f240 130f 	movw	r3, #271	; 0x10f
 80092d6:	f8ad 3006 	strh.w	r3, [sp, #6]
    suc = lv_area_intersect(&com_area, area_p, &scr_area);
 80092da:	f004 fa83 	bl	800d7e4 <lv_area_intersect>
    if(suc != false) {
 80092de:	2800      	cmp	r0, #0
 80092e0:	d0ea      	beq.n	80092b8 <lv_inv_area+0xc>
        if(round_cb) round_cb(&com_area);
 80092e2:	4b17      	ldr	r3, [pc, #92]	; (8009340 <lv_inv_area+0x94>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	b10b      	cbz	r3, 80092ec <lv_inv_area+0x40>
 80092e8:	a802      	add	r0, sp, #8
 80092ea:	4798      	blx	r3
        for(i = 0; i < inv_buf_p; i++) {
 80092ec:	4e13      	ldr	r6, [pc, #76]	; (800933c <lv_inv_area+0x90>)
{
 80092ee:	2500      	movs	r5, #0
 80092f0:	4c14      	ldr	r4, [pc, #80]	; (8009344 <lv_inv_area+0x98>)
 80092f2:	4637      	mov	r7, r6
        for(i = 0; i < inv_buf_p; i++) {
 80092f4:	8833      	ldrh	r3, [r6, #0]
 80092f6:	b2aa      	uxth	r2, r5
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d30c      	bcc.n	8009316 <lv_inv_area+0x6a>
        if(inv_buf_p < LV_INV_FIFO_SIZE) {
 80092fc:	2b1f      	cmp	r3, #31
 80092fe:	d815      	bhi.n	800932c <lv_inv_area+0x80>
    memcpy(dest, src, sizeof(lv_area_t));
 8009300:	220a      	movs	r2, #10
 8009302:	435a      	muls	r2, r3
 8009304:	ab02      	add	r3, sp, #8
 8009306:	18a5      	adds	r5, r4, r2
 8009308:	cb03      	ldmia	r3!, {r0, r1}
 800930a:	50a0      	str	r0, [r4, r2]
 800930c:	6069      	str	r1, [r5, #4]
        inv_buf_p ++;
 800930e:	883b      	ldrh	r3, [r7, #0]
 8009310:	3301      	adds	r3, #1
 8009312:	803b      	strh	r3, [r7, #0]
 8009314:	e7d0      	b.n	80092b8 <lv_inv_area+0xc>
            if(lv_area_is_in(&com_area, &inv_buf[i].area) != false) return;
 8009316:	b2ab      	uxth	r3, r5
 8009318:	210a      	movs	r1, #10
 800931a:	a802      	add	r0, sp, #8
 800931c:	3501      	adds	r5, #1
 800931e:	fb01 4103 	mla	r1, r1, r3, r4
 8009322:	f004 fae1 	bl	800d8e8 <lv_area_is_in>
 8009326:	2800      	cmp	r0, #0
 8009328:	d0e4      	beq.n	80092f4 <lv_inv_area+0x48>
 800932a:	e7c5      	b.n	80092b8 <lv_inv_area+0xc>
            inv_buf_p = 0;
 800932c:	2300      	movs	r3, #0
 800932e:	8033      	strh	r3, [r6, #0]
 8009330:	466b      	mov	r3, sp
 8009332:	cb03      	ldmia	r3!, {r0, r1}
 8009334:	6020      	str	r0, [r4, #0]
 8009336:	6061      	str	r1, [r4, #4]
 8009338:	e7e9      	b.n	800930e <lv_inv_area+0x62>
 800933a:	bf00      	nop
 800933c:	20000acc 	.word	0x20000acc
 8009340:	20000ad8 	.word	0x20000ad8
 8009344:	2000098c 	.word	0x2000098c

08009348 <lv_refr_get_buf_size>:
}
 8009348:	4b01      	ldr	r3, [pc, #4]	; (8009350 <lv_refr_get_buf_size+0x8>)
 800934a:	8818      	ldrh	r0, [r3, #0]
 800934c:	4770      	bx	lr
 800934e:	bf00      	nop
 8009350:	20000acc 	.word	0x20000acc

08009354 <lv_refr_pop_from_buf>:
    if(inv_buf_p < num) inv_buf_p = 0;
 8009354:	4a03      	ldr	r2, [pc, #12]	; (8009364 <lv_refr_pop_from_buf+0x10>)
 8009356:	8813      	ldrh	r3, [r2, #0]
 8009358:	4283      	cmp	r3, r0
 800935a:	bf34      	ite	cc
 800935c:	2300      	movcc	r3, #0
    else inv_buf_p -= num;
 800935e:	1a1b      	subcs	r3, r3, r0
 8009360:	8013      	strh	r3, [r2, #0]
 8009362:	4770      	bx	lr
 8009364:	20000acc 	.word	0x20000acc

08009368 <lv_style_init>:

/**
 *  Init the basic styles
 */
void lv_style_init(void)
{
 8009368:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /* Not White/Black/Gray colors are created by HSV model with
     * HUE = 210*/

    /*Screen style*/
    lv_style_scr.glass = 0;
 800936c:	49e3      	ldr	r1, [pc, #908]	; (80096fc <lv_style_init+0x394>)
    lv_style_scr.body.opa = LV_OPA_COVER;
 800936e:	25ff      	movs	r5, #255	; 0xff
    lv_style_scr.body.main_color = LV_COLOR_WHITE;
    lv_style_scr.body.grad_color = LV_COLOR_WHITE;
    lv_style_scr.body.radius = 0;
 8009370:	2700      	movs	r7, #0
    lv_style_scr.line.color = LV_COLOR_MAKE(0x20, 0x20, 0x20);
    lv_style_scr.line.width = 2;
    lv_style_scr.line.rounded = 0;

    /*Plain style (by default near the same as the screen style)*/
    memcpy(&lv_style_plain, &lv_style_scr, sizeof(lv_style_t));
 8009372:	2648      	movs	r6, #72	; 0x48
    lv_style_scr.glass = 0;
 8009374:	780b      	ldrb	r3, [r1, #0]
    lv_style_scr.image.color = LV_COLOR_MAKE(0x20, 0x20, 0x20);
 8009376:	f04f 0a20 	mov.w	sl, #32
    lv_style_scr.body.opa = LV_OPA_COVER;
 800937a:	738d      	strb	r5, [r1, #14]
    memcpy(&lv_style_plain, &lv_style_scr, sizeof(lv_style_t));
 800937c:	4632      	mov	r2, r6
    lv_style_scr.glass = 0;
 800937e:	f36f 0300 	bfc	r3, #0, #1
    lv_style_scr.body.main_color = LV_COLOR_WHITE;
 8009382:	710d      	strb	r5, [r1, #4]
 8009384:	714d      	strb	r5, [r1, #5]
    /*Plain color style*/
    memcpy(&lv_style_plain_color, &lv_style_plain, sizeof(lv_style_t));
    lv_style_plain_color.text.color = LV_COLOR_MAKE(0xf0, 0xf0, 0xf0);
    lv_style_plain_color.image.color = LV_COLOR_MAKE(0xf0, 0xf0, 0xf0);
    lv_style_plain_color.line.color = LV_COLOR_MAKE(0xf0, 0xf0, 0xf0);
    lv_style_plain_color.body.main_color = LV_COLOR_MAKE(0x55, 0x96, 0xd8);
 8009386:	f04f 08d8 	mov.w	r8, #216	; 0xd8
    lv_style_scr.glass = 0;
 800938a:	700b      	strb	r3, [r1, #0]
    lv_style_scr.body.padding.ver = LV_DPI / 12;
 800938c:	2308      	movs	r3, #8
    lv_style_scr.body.main_color = LV_COLOR_WHITE;
 800938e:	718d      	strb	r5, [r1, #6]
    memcpy(&lv_style_pretty, &lv_style_plain, sizeof(lv_style_t));
    lv_style_pretty.text.color = LV_COLOR_MAKE(0x20, 0x20, 0x20);
    lv_style_pretty.image.color = LV_COLOR_MAKE(0x20, 0x20, 0x20);
    lv_style_pretty.line.color = LV_COLOR_MAKE(0x20, 0x20, 0x20);
    lv_style_pretty.body.main_color = LV_COLOR_WHITE;
    lv_style_pretty.body.grad_color = LV_COLOR_SILVER;
 8009390:	f04f 0bc0 	mov.w	fp, #192	; 0xc0
    lv_style_scr.body.padding.ver = LV_DPI / 12;
 8009394:	840b      	strh	r3, [r1, #32]
    lv_style_scr.body.padding.hor = LV_DPI / 12;
 8009396:	844b      	strh	r3, [r1, #34]	; 0x22
    lv_style_scr.body.padding.inner = LV_DPI / 12;
 8009398:	848b      	strh	r3, [r1, #36]	; 0x24
    lv_style_scr.body.border.part = LV_BORDER_FULL;
 800939a:	230f      	movs	r3, #15
    lv_style_scr.body.main_color = LV_COLOR_WHITE;
 800939c:	71cd      	strb	r5, [r1, #7]
    lv_style_scr.body.border.part = LV_BORDER_FULL;
 800939e:	758b      	strb	r3, [r1, #22]
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 80093a0:	2380      	movs	r3, #128	; 0x80
    lv_style_scr.body.grad_color = LV_COLOR_WHITE;
 80093a2:	720d      	strb	r5, [r1, #8]
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 80093a4:	760b      	strb	r3, [r1, #24]
 80093a6:	764b      	strb	r3, [r1, #25]
 80093a8:	768b      	strb	r3, [r1, #26]
    lv_style_scr.body.shadow.type = LV_SHADOW_FULL;
 80093aa:	f04f 0301 	mov.w	r3, #1
    lv_style_scr.body.grad_color = LV_COLOR_WHITE;
 80093ae:	724d      	strb	r5, [r1, #9]
    lv_style_scr.body.shadow.type = LV_SHADOW_FULL;
 80093b0:	778b      	strb	r3, [r1, #30]
    lv_style_scr.text.color = LV_COLOR_MAKE(0x30, 0x30, 0x30);
 80093b2:	2330      	movs	r3, #48	; 0x30
    lv_style_scr.body.grad_color = LV_COLOR_WHITE;
 80093b4:	728d      	strb	r5, [r1, #10]
 80093b6:	72cd      	strb	r5, [r1, #11]
    lv_style_scr.body.radius = 0;
 80093b8:	818f      	strh	r7, [r1, #12]
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 80093ba:	740f      	strb	r7, [r1, #16]
 80093bc:	744f      	strb	r7, [r1, #17]
 80093be:	748f      	strb	r7, [r1, #18]
 80093c0:	74cd      	strb	r5, [r1, #19]
    lv_style_scr.body.border.opa = LV_OPA_COVER;
 80093c2:	75cd      	strb	r5, [r1, #23]
    lv_style_scr.body.border.width = 0;
 80093c4:	828f      	strh	r7, [r1, #20]
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 80093c6:	76cd      	strb	r5, [r1, #27]
    lv_style_scr.body.shadow.width = 0;
 80093c8:	838f      	strh	r7, [r1, #28]
    lv_style_scr.text.opa = LV_OPA_COVER;
 80093ca:	f881 5034 	strb.w	r5, [r1, #52]	; 0x34
    lv_style_scr.text.color = LV_COLOR_MAKE(0x30, 0x30, 0x30);
 80093ce:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
 80093d2:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
 80093d6:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
    lv_style_scr.text.font = LV_FONT_DEFAULT;
 80093da:	4bc9      	ldr	r3, [pc, #804]	; (8009700 <lv_style_init+0x398>)
    memcpy(&lv_style_plain, &lv_style_scr, sizeof(lv_style_t));
 80093dc:	f8df 9350 	ldr.w	r9, [pc, #848]	; 8009730 <lv_style_init+0x3c8>
    lv_style_scr.text.font = LV_FONT_DEFAULT;
 80093e0:	62cb      	str	r3, [r1, #44]	; 0x2c
    lv_style_scr.text.letter_space = 2;
 80093e2:	f04f 0302 	mov.w	r3, #2
    memcpy(&lv_style_plain, &lv_style_scr, sizeof(lv_style_t));
 80093e6:	4648      	mov	r0, r9
    lv_style_scr.text.color = LV_COLOR_MAKE(0x30, 0x30, 0x30);
 80093e8:	f881 502b 	strb.w	r5, [r1, #43]	; 0x2b
    lv_style_scr.text.letter_space = 2;
 80093ec:	860b      	strh	r3, [r1, #48]	; 0x30
    lv_style_scr.text.line_space = 2;
 80093ee:	864b      	strh	r3, [r1, #50]	; 0x32
    lv_style_scr.line.width = 2;
 80093f0:	f8a1 3044 	strh.w	r3, [r1, #68]	; 0x44
    lv_style_scr.line.rounded = 0;
 80093f4:	f891 3047 	ldrb.w	r3, [r1, #71]	; 0x47
    lv_style_scr.image.opa = LV_OPA_COVER;
 80093f8:	f881 503d 	strb.w	r5, [r1, #61]	; 0x3d
    lv_style_scr.line.rounded = 0;
 80093fc:	f367 0300 	bfi	r3, r7, #0, #1
    lv_style_scr.image.color = LV_COLOR_MAKE(0x20, 0x20, 0x20);
 8009400:	f881 a038 	strb.w	sl, [r1, #56]	; 0x38
 8009404:	f881 a039 	strb.w	sl, [r1, #57]	; 0x39
 8009408:	f881 a03a 	strb.w	sl, [r1, #58]	; 0x3a
 800940c:	f881 503b 	strb.w	r5, [r1, #59]	; 0x3b
    lv_style_scr.image.intense = LV_OPA_TRANSP;
 8009410:	f881 703c 	strb.w	r7, [r1, #60]	; 0x3c
    lv_style_scr.line.opa = LV_OPA_COVER;
 8009414:	f881 5046 	strb.w	r5, [r1, #70]	; 0x46
    lv_style_scr.line.color = LV_COLOR_MAKE(0x20, 0x20, 0x20);
 8009418:	f881 a040 	strb.w	sl, [r1, #64]	; 0x40
 800941c:	f881 a041 	strb.w	sl, [r1, #65]	; 0x41
 8009420:	f881 a042 	strb.w	sl, [r1, #66]	; 0x42
 8009424:	f881 5043 	strb.w	r5, [r1, #67]	; 0x43
    lv_style_scr.line.rounded = 0;
 8009428:	f881 3047 	strb.w	r3, [r1, #71]	; 0x47
    memcpy(&lv_style_plain, &lv_style_scr, sizeof(lv_style_t));
 800942c:	f00c fb76 	bl	8015b1c <memcpy>
    memcpy(&lv_style_plain_color, &lv_style_plain, sizeof(lv_style_t));
 8009430:	4bb4      	ldr	r3, [pc, #720]	; (8009704 <lv_style_init+0x39c>)
 8009432:	4632      	mov	r2, r6
 8009434:	4649      	mov	r1, r9
    memcpy(&lv_style_pretty, &lv_style_plain, sizeof(lv_style_t));
 8009436:	4cb4      	ldr	r4, [pc, #720]	; (8009708 <lv_style_init+0x3a0>)
    memcpy(&lv_style_plain_color, &lv_style_plain, sizeof(lv_style_t));
 8009438:	4618      	mov	r0, r3
 800943a:	f00c fb6f 	bl	8015b1c <memcpy>
    lv_style_plain_color.text.color = LV_COLOR_MAKE(0xf0, 0xf0, 0xf0);
 800943e:	22f0      	movs	r2, #240	; 0xf0
    lv_style_plain_color.body.main_color = LV_COLOR_MAKE(0x55, 0x96, 0xd8);
 8009440:	f880 8004 	strb.w	r8, [r0, #4]
    memcpy(&lv_style_pretty, &lv_style_plain, sizeof(lv_style_t));
 8009444:	4649      	mov	r1, r9
    lv_style_plain_color.text.color = LV_COLOR_MAKE(0xf0, 0xf0, 0xf0);
 8009446:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 800944a:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
 800944e:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
    lv_style_plain_color.image.color = LV_COLOR_MAKE(0xf0, 0xf0, 0xf0);
 8009452:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
 8009456:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
 800945a:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    lv_style_plain_color.line.color = LV_COLOR_MAKE(0xf0, 0xf0, 0xf0);
 800945e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
 8009462:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
 8009466:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
    lv_style_plain_color.body.main_color = LV_COLOR_MAKE(0x55, 0x96, 0xd8);
 800946a:	2296      	movs	r2, #150	; 0x96
 800946c:	7142      	strb	r2, [r0, #5]
 800946e:	2255      	movs	r2, #85	; 0x55
 8009470:	7182      	strb	r2, [r0, #6]
    lv_style_plain_color.body.grad_color = lv_style_plain_color.body.main_color;
 8009472:	6842      	ldr	r2, [r0, #4]
 8009474:	6082      	str	r2, [r0, #8]
    memcpy(&lv_style_pretty, &lv_style_plain, sizeof(lv_style_t));
 8009476:	4632      	mov	r2, r6
 8009478:	4620      	mov	r0, r4
 800947a:	f00c fb4f 	bl	8015b1c <memcpy>
    lv_style_pretty.body.radius = LV_DPI / 15;
    lv_style_pretty.body.border.color = LV_COLOR_MAKE(0x40, 0x40, 0x40);
 800947e:	2340      	movs	r3, #64	; 0x40
    lv_style_pretty.text.color = LV_COLOR_MAKE(0x20, 0x20, 0x20);
 8009480:	f884 a028 	strb.w	sl, [r4, #40]	; 0x28
    lv_style_pretty.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50  : 1;
    lv_style_pretty.body.border.opa = LV_OPA_30;

    /*Pretty color style*/
    memcpy(&lv_style_pretty_color, &lv_style_pretty, sizeof(lv_style_t));
 8009484:	4632      	mov	r2, r6
    lv_style_pretty.body.border.color = LV_COLOR_MAKE(0x40, 0x40, 0x40);
 8009486:	7423      	strb	r3, [r4, #16]
    memcpy(&lv_style_pretty_color, &lv_style_pretty, sizeof(lv_style_t));
 8009488:	4621      	mov	r1, r4
    lv_style_pretty.body.border.color = LV_COLOR_MAKE(0x40, 0x40, 0x40);
 800948a:	7463      	strb	r3, [r4, #17]
 800948c:	74a3      	strb	r3, [r4, #18]
    lv_style_pretty.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50  : 1;
 800948e:	f04f 0302 	mov.w	r3, #2
    lv_style_pretty.text.color = LV_COLOR_MAKE(0x20, 0x20, 0x20);
 8009492:	f884 a029 	strb.w	sl, [r4, #41]	; 0x29
    lv_style_pretty.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50  : 1;
 8009496:	82a3      	strh	r3, [r4, #20]
    lv_style_pretty.body.border.opa = LV_OPA_30;
 8009498:	f04f 034c 	mov.w	r3, #76	; 0x4c
    lv_style_pretty.text.color = LV_COLOR_MAKE(0x20, 0x20, 0x20);
 800949c:	f884 a02a 	strb.w	sl, [r4, #42]	; 0x2a
    lv_style_pretty.body.radius = LV_DPI / 15;
 80094a0:	f04f 0a06 	mov.w	sl, #6
    lv_style_pretty.body.border.opa = LV_OPA_30;
 80094a4:	75e3      	strb	r3, [r4, #23]
    memcpy(&lv_style_pretty_color, &lv_style_pretty, sizeof(lv_style_t));
 80094a6:	4b99      	ldr	r3, [pc, #612]	; (800970c <lv_style_init+0x3a4>)
    lv_style_pretty.body.grad_color = LV_COLOR_SILVER;
 80094a8:	f884 b008 	strb.w	fp, [r4, #8]
    memcpy(&lv_style_pretty_color, &lv_style_pretty, sizeof(lv_style_t));
 80094ac:	4618      	mov	r0, r3
    lv_style_pretty.body.grad_color = LV_COLOR_SILVER;
 80094ae:	f884 b009 	strb.w	fp, [r4, #9]
 80094b2:	f884 b00a 	strb.w	fp, [r4, #10]
    lv_style_pretty.body.radius = LV_DPI / 15;
 80094b6:	f8a4 a00c 	strh.w	sl, [r4, #12]
    memcpy(&lv_style_pretty_color, &lv_style_pretty, sizeof(lv_style_t));
 80094ba:	f00c fb2f 	bl	8015b1c <memcpy>
    lv_style_pretty_color.text.color = LV_COLOR_MAKE(0xe0, 0xe0, 0xe0);
 80094be:	22e0      	movs	r2, #224	; 0xe0
    lv_style_pretty_color.body.main_color = LV_COLOR_MAKE(0x6b, 0x9a, 0xc7);
    lv_style_pretty_color.body.grad_color = LV_COLOR_MAKE(0x2b, 0x59, 0x8b);
    lv_style_pretty_color.body.border.color = LV_COLOR_MAKE(0x15, 0x2c, 0x42);

    /*Transparent style*/
    memcpy(&lv_style_transp, &lv_style_plain, sizeof(lv_style_t));
 80094c0:	4b93      	ldr	r3, [pc, #588]	; (8009710 <lv_style_init+0x3a8>)
    lv_style_pretty_color.line.color = LV_COLOR_MAKE(0xc0, 0xc0, 0xc0);
 80094c2:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    memcpy(&lv_style_transp, &lv_style_plain, sizeof(lv_style_t));
 80094c6:	4649      	mov	r1, r9
    lv_style_pretty_color.text.color = LV_COLOR_MAKE(0xe0, 0xe0, 0xe0);
 80094c8:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 80094cc:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
 80094d0:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
    lv_style_pretty_color.image.color = LV_COLOR_MAKE(0xe0, 0xe0, 0xe0);
 80094d4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
 80094d8:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
 80094dc:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    lv_style_pretty_color.body.main_color = LV_COLOR_MAKE(0x6b, 0x9a, 0xc7);
 80094e0:	22c7      	movs	r2, #199	; 0xc7
    lv_style_pretty_color.line.color = LV_COLOR_MAKE(0xc0, 0xc0, 0xc0);
 80094e2:	f880 b041 	strb.w	fp, [r0, #65]	; 0x41
    lv_style_pretty_color.body.main_color = LV_COLOR_MAKE(0x6b, 0x9a, 0xc7);
 80094e6:	7102      	strb	r2, [r0, #4]
 80094e8:	229a      	movs	r2, #154	; 0x9a
    lv_style_pretty_color.line.color = LV_COLOR_MAKE(0xc0, 0xc0, 0xc0);
 80094ea:	f880 b042 	strb.w	fp, [r0, #66]	; 0x42
    lv_style_btn_rel.body.main_color = LV_COLOR_MAKE(0x76, 0xa2, 0xd0);
    lv_style_btn_rel.body.grad_color = LV_COLOR_MAKE(0x19, 0x3a, 0x5d);
    lv_style_btn_rel.body.radius = LV_DPI / 15;
    lv_style_btn_rel.body.padding.hor = LV_DPI / 4;
    lv_style_btn_rel.body.padding.ver = LV_DPI / 6;
    lv_style_btn_rel.body.padding.inner = LV_DPI / 10;
 80094ee:	f04f 0b0a 	mov.w	fp, #10
    lv_style_pretty_color.body.main_color = LV_COLOR_MAKE(0x6b, 0x9a, 0xc7);
 80094f2:	7142      	strb	r2, [r0, #5]
 80094f4:	226b      	movs	r2, #107	; 0x6b
    memcpy(&lv_style_transp_fit, &lv_style_transp, sizeof(lv_style_t));
 80094f6:	4c87      	ldr	r4, [pc, #540]	; (8009714 <lv_style_init+0x3ac>)
    lv_style_pretty_color.body.main_color = LV_COLOR_MAKE(0x6b, 0x9a, 0xc7);
 80094f8:	7182      	strb	r2, [r0, #6]
    lv_style_pretty_color.body.grad_color = LV_COLOR_MAKE(0x2b, 0x59, 0x8b);
 80094fa:	228b      	movs	r2, #139	; 0x8b
 80094fc:	7202      	strb	r2, [r0, #8]
 80094fe:	2259      	movs	r2, #89	; 0x59
 8009500:	7242      	strb	r2, [r0, #9]
 8009502:	f04f 022b 	mov.w	r2, #43	; 0x2b
 8009506:	7282      	strb	r2, [r0, #10]
    lv_style_pretty_color.body.border.color = LV_COLOR_MAKE(0x15, 0x2c, 0x42);
 8009508:	2242      	movs	r2, #66	; 0x42
 800950a:	7402      	strb	r2, [r0, #16]
 800950c:	222c      	movs	r2, #44	; 0x2c
 800950e:	7442      	strb	r2, [r0, #17]
 8009510:	2215      	movs	r2, #21
 8009512:	7482      	strb	r2, [r0, #18]
    memcpy(&lv_style_transp, &lv_style_plain, sizeof(lv_style_t));
 8009514:	4632      	mov	r2, r6
 8009516:	4618      	mov	r0, r3
 8009518:	f00c fb00 	bl	8015b1c <memcpy>
    lv_style_transp.body.empty = 1;
 800951c:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
    memcpy(&lv_style_transp_fit, &lv_style_transp, sizeof(lv_style_t));
 8009520:	4601      	mov	r1, r0
    lv_style_transp.body.empty = 1;
 8009522:	f042 0201 	orr.w	r2, r2, #1
 8009526:	f880 2026 	strb.w	r2, [r0, #38]	; 0x26
    lv_style_transp.glass = 1;
 800952a:	7802      	ldrb	r2, [r0, #0]
 800952c:	f042 0201 	orr.w	r2, r2, #1
 8009530:	7002      	strb	r2, [r0, #0]
    memcpy(&lv_style_transp_fit, &lv_style_transp, sizeof(lv_style_t));
 8009532:	4632      	mov	r2, r6
 8009534:	4620      	mov	r0, r4
 8009536:	f00c faf1 	bl	8015b1c <memcpy>
    memcpy(&lv_style_transp_tight, &lv_style_transp_fit, sizeof(lv_style_t));
 800953a:	4b77      	ldr	r3, [pc, #476]	; (8009718 <lv_style_init+0x3b0>)
    lv_style_transp_fit.body.padding.hor = 0;
 800953c:	8467      	strh	r7, [r4, #34]	; 0x22
    memcpy(&lv_style_transp_tight, &lv_style_transp_fit, sizeof(lv_style_t));
 800953e:	4621      	mov	r1, r4
    lv_style_transp_fit.body.padding.ver = 0;
 8009540:	8427      	strh	r7, [r4, #32]
    memcpy(&lv_style_transp_tight, &lv_style_transp_fit, sizeof(lv_style_t));
 8009542:	4632      	mov	r2, r6
    memcpy(&lv_style_btn_rel, &lv_style_plain, sizeof(lv_style_t));
 8009544:	4c75      	ldr	r4, [pc, #468]	; (800971c <lv_style_init+0x3b4>)
    memcpy(&lv_style_transp_tight, &lv_style_transp_fit, sizeof(lv_style_t));
 8009546:	4618      	mov	r0, r3
 8009548:	f00c fae8 	bl	8015b1c <memcpy>
    memcpy(&lv_style_btn_rel, &lv_style_plain, sizeof(lv_style_t));
 800954c:	4632      	mov	r2, r6
    lv_style_transp_tight.body.padding.inner = 0;
 800954e:	8487      	strh	r7, [r0, #36]	; 0x24
    memcpy(&lv_style_btn_rel, &lv_style_plain, sizeof(lv_style_t));
 8009550:	4649      	mov	r1, r9
 8009552:	4620      	mov	r0, r4
    lv_style_btn_rel.body.padding.ver = LV_DPI / 6;
 8009554:	2710      	movs	r7, #16
    memcpy(&lv_style_btn_rel, &lv_style_plain, sizeof(lv_style_t));
 8009556:	f00c fae1 	bl	8015b1c <memcpy>
    lv_style_btn_rel.body.main_color = LV_COLOR_MAKE(0x76, 0xa2, 0xd0);
 800955a:	23d0      	movs	r3, #208	; 0xd0
    lv_style_btn_rel.body.border.color = LV_COLOR_MAKE(0x0b, 0x19, 0x28);
 800955c:	2228      	movs	r2, #40	; 0x28
    lv_style_btn_rel.text.color = LV_COLOR_MAKE(0xff, 0xff, 0xff);
    lv_style_btn_rel.body.shadow.color = LV_COLOR_GRAY;
    lv_style_btn_rel.body.shadow.width = 0;

    /*Button pressed style*/
    memcpy(&lv_style_btn_pr, &lv_style_btn_rel, sizeof(lv_style_t));
 800955e:	4621      	mov	r1, r4
    lv_style_btn_rel.body.main_color = LV_COLOR_MAKE(0x76, 0xa2, 0xd0);
 8009560:	7123      	strb	r3, [r4, #4]
 8009562:	23a2      	movs	r3, #162	; 0xa2
    lv_style_btn_rel.body.border.color = LV_COLOR_MAKE(0x0b, 0x19, 0x28);
 8009564:	7422      	strb	r2, [r4, #16]
    memcpy(&lv_style_btn_pr, &lv_style_btn_rel, sizeof(lv_style_t));
 8009566:	4632      	mov	r2, r6
    lv_style_btn_rel.body.main_color = LV_COLOR_MAKE(0x76, 0xa2, 0xd0);
 8009568:	7163      	strb	r3, [r4, #5]
 800956a:	2376      	movs	r3, #118	; 0x76
    lv_style_btn_rel.body.radius = LV_DPI / 15;
 800956c:	f8a4 a00c 	strh.w	sl, [r4, #12]
    lv_style_btn_pr.body.main_color = LV_COLOR_MAKE(0x33, 0x62, 0x94);
    lv_style_btn_pr.body.grad_color = LV_COLOR_MAKE(0x10, 0x26, 0x3c);
    lv_style_btn_pr.text.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 8009570:	f04f 09b5 	mov.w	r9, #181	; 0xb5
    lv_style_btn_rel.body.main_color = LV_COLOR_MAKE(0x76, 0xa2, 0xd0);
 8009574:	71a3      	strb	r3, [r4, #6]
    lv_style_btn_rel.body.grad_color = LV_COLOR_MAKE(0x19, 0x3a, 0x5d);
 8009576:	235d      	movs	r3, #93	; 0x5d
    lv_style_btn_rel.body.padding.ver = LV_DPI / 6;
 8009578:	8427      	strh	r7, [r4, #32]
    lv_style_btn_pr.text.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 800957a:	f04f 0ac6 	mov.w	sl, #198	; 0xc6
    lv_style_btn_rel.body.grad_color = LV_COLOR_MAKE(0x19, 0x3a, 0x5d);
 800957e:	7223      	strb	r3, [r4, #8]
 8009580:	233a      	movs	r3, #58	; 0x3a
    lv_style_btn_rel.body.padding.inner = LV_DPI / 10;
 8009582:	f8a4 b024 	strh.w	fp, [r4, #36]	; 0x24
    lv_style_btn_rel.body.grad_color = LV_COLOR_MAKE(0x19, 0x3a, 0x5d);
 8009586:	7263      	strb	r3, [r4, #9]
 8009588:	2319      	movs	r3, #25
    lv_style_btn_rel.text.color = LV_COLOR_MAKE(0xff, 0xff, 0xff);
 800958a:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    lv_style_btn_rel.body.grad_color = LV_COLOR_MAKE(0x19, 0x3a, 0x5d);
 800958e:	72a3      	strb	r3, [r4, #10]
    lv_style_btn_rel.body.padding.hor = LV_DPI / 4;
 8009590:	8463      	strh	r3, [r4, #34]	; 0x22
    lv_style_btn_rel.body.border.color = LV_COLOR_MAKE(0x0b, 0x19, 0x28);
 8009592:	7463      	strb	r3, [r4, #17]
 8009594:	230b      	movs	r3, #11
    lv_style_btn_rel.text.color = LV_COLOR_MAKE(0xff, 0xff, 0xff);
 8009596:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
    lv_style_btn_rel.body.border.color = LV_COLOR_MAKE(0x0b, 0x19, 0x28);
 800959a:	74a3      	strb	r3, [r4, #18]
    lv_style_btn_rel.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50  : 1;
 800959c:	f04f 0302 	mov.w	r3, #2
    lv_style_btn_rel.text.color = LV_COLOR_MAKE(0xff, 0xff, 0xff);
 80095a0:	f884 502a 	strb.w	r5, [r4, #42]	; 0x2a
    lv_style_btn_pr.body.main_color = LV_COLOR_MAKE(0x33, 0x62, 0x94);
 80095a4:	2562      	movs	r5, #98	; 0x62
    lv_style_btn_rel.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50  : 1;
 80095a6:	82a3      	strh	r3, [r4, #20]
    lv_style_btn_rel.body.border.opa = LV_OPA_70;
 80095a8:	23b2      	movs	r3, #178	; 0xb2
 80095aa:	75e3      	strb	r3, [r4, #23]
    memcpy(&lv_style_btn_pr, &lv_style_btn_rel, sizeof(lv_style_t));
 80095ac:	4b5c      	ldr	r3, [pc, #368]	; (8009720 <lv_style_init+0x3b8>)
 80095ae:	4618      	mov	r0, r3
 80095b0:	f00c fab4 	bl	8015b1c <memcpy>
    lv_style_btn_pr.body.main_color = LV_COLOR_MAKE(0x33, 0x62, 0x94);
 80095b4:	2294      	movs	r2, #148	; 0x94
    lv_style_btn_pr.body.grad_color = LV_COLOR_MAKE(0x10, 0x26, 0x3c);
 80095b6:	7287      	strb	r7, [r0, #10]
    lv_style_btn_pr.text.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 80095b8:	27a4      	movs	r7, #164	; 0xa4
    lv_style_btn_pr.body.main_color = LV_COLOR_MAKE(0x33, 0x62, 0x94);
 80095ba:	7102      	strb	r2, [r0, #4]
 80095bc:	2233      	movs	r2, #51	; 0x33
    lv_style_btn_pr.image.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
    lv_style_btn_pr.line.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);

    /*Button toggle released style*/
    memcpy(&lv_style_btn_tgl_rel, &lv_style_btn_rel, sizeof(lv_style_t));
 80095be:	4b59      	ldr	r3, [pc, #356]	; (8009724 <lv_style_init+0x3bc>)
 80095c0:	4621      	mov	r1, r4
    lv_style_btn_pr.body.main_color = LV_COLOR_MAKE(0x33, 0x62, 0x94);
 80095c2:	7182      	strb	r2, [r0, #6]
    lv_style_btn_pr.body.grad_color = LV_COLOR_MAKE(0x10, 0x26, 0x3c);
 80095c4:	223c      	movs	r2, #60	; 0x3c
    lv_style_btn_pr.body.main_color = LV_COLOR_MAKE(0x33, 0x62, 0x94);
 80095c6:	7145      	strb	r5, [r0, #5]
    lv_style_btn_pr.body.grad_color = LV_COLOR_MAKE(0x10, 0x26, 0x3c);
 80095c8:	7202      	strb	r2, [r0, #8]
 80095ca:	2226      	movs	r2, #38	; 0x26
    lv_style_btn_pr.text.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 80095cc:	f880 a028 	strb.w	sl, [r0, #40]	; 0x28
    lv_style_btn_pr.body.grad_color = LV_COLOR_MAKE(0x10, 0x26, 0x3c);
 80095d0:	7242      	strb	r2, [r0, #9]
    memcpy(&lv_style_btn_tgl_rel, &lv_style_btn_rel, sizeof(lv_style_t));
 80095d2:	4632      	mov	r2, r6
    lv_style_btn_pr.text.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 80095d4:	f880 9029 	strb.w	r9, [r0, #41]	; 0x29
 80095d8:	f880 702a 	strb.w	r7, [r0, #42]	; 0x2a
    lv_style_btn_pr.image.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 80095dc:	f880 a038 	strb.w	sl, [r0, #56]	; 0x38
 80095e0:	f880 9039 	strb.w	r9, [r0, #57]	; 0x39
 80095e4:	f880 703a 	strb.w	r7, [r0, #58]	; 0x3a
    lv_style_btn_pr.line.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 80095e8:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
 80095ec:	f880 9041 	strb.w	r9, [r0, #65]	; 0x41
 80095f0:	f880 7042 	strb.w	r7, [r0, #66]	; 0x42
    memcpy(&lv_style_btn_tgl_rel, &lv_style_btn_rel, sizeof(lv_style_t));
 80095f4:	4618      	mov	r0, r3
 80095f6:	f00c fa91 	bl	8015b1c <memcpy>
    lv_style_btn_tgl_rel.body.main_color = LV_COLOR_MAKE(0x0a, 0x11, 0x22);
 80095fa:	2222      	movs	r2, #34	; 0x22
 80095fc:	f880 b006 	strb.w	fp, [r0, #6]
    lv_style_btn_tgl_rel.body.grad_color = LV_COLOR_MAKE(0x37, 0x62, 0x90);
 8009600:	f04f 0b90 	mov.w	fp, #144	; 0x90
    lv_style_btn_tgl_rel.body.main_color = LV_COLOR_MAKE(0x0a, 0x11, 0x22);
 8009604:	7102      	strb	r2, [r0, #4]
 8009606:	2211      	movs	r2, #17
    memcpy(&lv_style_btn_tgl_rel, &lv_style_btn_rel, sizeof(lv_style_t));
 8009608:	4603      	mov	r3, r0
    lv_style_btn_tgl_rel.body.border.color = LV_COLOR_MAKE(0x01, 0x07, 0x0d);
    lv_style_btn_tgl_rel.text.color = LV_COLOR_MAKE(0xc8, 0xdd, 0xf4);
 800960a:	21dd      	movs	r1, #221	; 0xdd
    lv_style_btn_tgl_rel.body.main_color = LV_COLOR_MAKE(0x0a, 0x11, 0x22);
 800960c:	7142      	strb	r2, [r0, #5]
    lv_style_btn_tgl_rel.body.grad_color = LV_COLOR_MAKE(0x37, 0x62, 0x90);
 800960e:	2237      	movs	r2, #55	; 0x37
 8009610:	f880 b008 	strb.w	fp, [r0, #8]
 8009614:	7282      	strb	r2, [r0, #10]
    lv_style_btn_tgl_rel.body.border.color = LV_COLOR_MAKE(0x01, 0x07, 0x0d);
 8009616:	220d      	movs	r2, #13
    lv_style_btn_tgl_rel.body.grad_color = LV_COLOR_MAKE(0x37, 0x62, 0x90);
 8009618:	7245      	strb	r5, [r0, #9]
    lv_style_btn_tgl_rel.body.border.color = LV_COLOR_MAKE(0x01, 0x07, 0x0d);
 800961a:	7402      	strb	r2, [r0, #16]
 800961c:	2207      	movs	r2, #7
    lv_style_btn_tgl_rel.image.color = LV_COLOR_MAKE(0xc8, 0xdd, 0xf4);
    lv_style_btn_tgl_rel.line.color = LV_COLOR_MAKE(0xc8, 0xdd, 0xf4);

    /*Button toggle pressed style*/
    memcpy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel, sizeof(lv_style_t));
 800961e:	4d42      	ldr	r5, [pc, #264]	; (8009728 <lv_style_init+0x3c0>)
    lv_style_btn_tgl_rel.body.border.color = LV_COLOR_MAKE(0x01, 0x07, 0x0d);
 8009620:	7442      	strb	r2, [r0, #17]
 8009622:	f04f 0201 	mov.w	r2, #1
    lv_style_btn_tgl_rel.text.color = LV_COLOR_MAKE(0xc8, 0xdd, 0xf4);
 8009626:	f883 1029 	strb.w	r1, [r3, #41]	; 0x29
    lv_style_btn_tgl_rel.body.border.color = LV_COLOR_MAKE(0x01, 0x07, 0x0d);
 800962a:	7482      	strb	r2, [r0, #18]
    lv_style_btn_tgl_rel.text.color = LV_COLOR_MAKE(0xc8, 0xdd, 0xf4);
 800962c:	20f4      	movs	r0, #244	; 0xf4
 800962e:	22c8      	movs	r2, #200	; 0xc8
    lv_style_btn_tgl_rel.image.color = LV_COLOR_MAKE(0xc8, 0xdd, 0xf4);
 8009630:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
    lv_style_btn_tgl_rel.text.color = LV_COLOR_MAKE(0xc8, 0xdd, 0xf4);
 8009634:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
 8009638:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    lv_style_btn_tgl_rel.image.color = LV_COLOR_MAKE(0xc8, 0xdd, 0xf4);
 800963c:	f883 0038 	strb.w	r0, [r3, #56]	; 0x38
 8009640:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    lv_style_btn_tgl_rel.line.color = LV_COLOR_MAKE(0xc8, 0xdd, 0xf4);
 8009644:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    memcpy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel, sizeof(lv_style_t));
 8009648:	4628      	mov	r0, r5
    lv_style_btn_tgl_rel.line.color = LV_COLOR_MAKE(0xc8, 0xdd, 0xf4);
 800964a:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
    memcpy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel, sizeof(lv_style_t));
 800964e:	4619      	mov	r1, r3
    lv_style_btn_tgl_rel.line.color = LV_COLOR_MAKE(0xc8, 0xdd, 0xf4);
 8009650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    memcpy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel, sizeof(lv_style_t));
 8009654:	4632      	mov	r2, r6
 8009656:	f00c fa61 	bl	8015b1c <memcpy>
    lv_style_btn_tgl_pr.body.main_color = LV_COLOR_MAKE(0x02, 0x14, 0x27);
 800965a:	2327      	movs	r3, #39	; 0x27
    lv_style_btn_tgl_pr.body.grad_color = LV_COLOR_MAKE(0x2b, 0x4c, 0x70);
    lv_style_btn_tgl_pr.text.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 800965c:	f885 a028 	strb.w	sl, [r5, #40]	; 0x28
    lv_style_btn_tgl_pr.image.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
    lv_style_btn_tgl_pr.line.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);

    /*Button inactive style*/
    memcpy(&lv_style_btn_ina, &lv_style_btn_rel, sizeof(lv_style_t));
 8009660:	4632      	mov	r2, r6
    lv_style_btn_tgl_pr.body.main_color = LV_COLOR_MAKE(0x02, 0x14, 0x27);
 8009662:	712b      	strb	r3, [r5, #4]
 8009664:	2314      	movs	r3, #20
    lv_style_btn_tgl_pr.text.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 8009666:	f885 9029 	strb.w	r9, [r5, #41]	; 0x29
    memcpy(&lv_style_btn_ina, &lv_style_btn_rel, sizeof(lv_style_t));
 800966a:	4621      	mov	r1, r4
    lv_style_btn_tgl_pr.body.main_color = LV_COLOR_MAKE(0x02, 0x14, 0x27);
 800966c:	716b      	strb	r3, [r5, #5]
 800966e:	f04f 0302 	mov.w	r3, #2
    lv_style_btn_tgl_pr.text.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 8009672:	f885 702a 	strb.w	r7, [r5, #42]	; 0x2a
    lv_style_btn_tgl_pr.body.main_color = LV_COLOR_MAKE(0x02, 0x14, 0x27);
 8009676:	71ab      	strb	r3, [r5, #6]
    lv_style_btn_tgl_pr.body.grad_color = LV_COLOR_MAKE(0x2b, 0x4c, 0x70);
 8009678:	2370      	movs	r3, #112	; 0x70
    lv_style_btn_tgl_pr.image.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 800967a:	f885 a038 	strb.w	sl, [r5, #56]	; 0x38
    lv_style_btn_tgl_pr.body.grad_color = LV_COLOR_MAKE(0x2b, 0x4c, 0x70);
 800967e:	722b      	strb	r3, [r5, #8]
 8009680:	9301      	str	r3, [sp, #4]
 8009682:	f04f 034c 	mov.w	r3, #76	; 0x4c
    lv_style_btn_tgl_pr.image.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 8009686:	f885 9039 	strb.w	r9, [r5, #57]	; 0x39
    lv_style_btn_tgl_pr.body.grad_color = LV_COLOR_MAKE(0x2b, 0x4c, 0x70);
 800968a:	726b      	strb	r3, [r5, #9]
 800968c:	f04f 032b 	mov.w	r3, #43	; 0x2b
    lv_style_btn_tgl_pr.image.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 8009690:	f885 703a 	strb.w	r7, [r5, #58]	; 0x3a
    lv_style_btn_tgl_pr.body.grad_color = LV_COLOR_MAKE(0x2b, 0x4c, 0x70);
 8009694:	72ab      	strb	r3, [r5, #10]
    lv_style_btn_tgl_pr.line.color = LV_COLOR_MAKE(0xa4, 0xb5, 0xc6);
 8009696:	f885 a040 	strb.w	sl, [r5, #64]	; 0x40
 800969a:	f885 9041 	strb.w	r9, [r5, #65]	; 0x41
 800969e:	f885 7042 	strb.w	r7, [r5, #66]	; 0x42
    memcpy(&lv_style_btn_ina, &lv_style_btn_rel, sizeof(lv_style_t));
 80096a2:	4d22      	ldr	r5, [pc, #136]	; (800972c <lv_style_init+0x3c4>)
 80096a4:	4628      	mov	r0, r5
 80096a6:	f00c fa39 	bl	8015b1c <memcpy>
    lv_style_btn_ina.body.main_color = LV_COLOR_MAKE(0xd8, 0xd8, 0xd8);
    lv_style_btn_ina.body.grad_color = LV_COLOR_MAKE(0xd8, 0xd8, 0xd8);
    lv_style_btn_ina.body.border.color = LV_COLOR_MAKE(0x90, 0x90, 0x90);
    lv_style_btn_ina.text.color = LV_COLOR_MAKE(0x70, 0x70, 0x70);
 80096aa:	9b01      	ldr	r3, [sp, #4]
    lv_style_btn_ina.body.main_color = LV_COLOR_MAKE(0xd8, 0xd8, 0xd8);
 80096ac:	f885 8004 	strb.w	r8, [r5, #4]
 80096b0:	f885 8005 	strb.w	r8, [r5, #5]
 80096b4:	f885 8006 	strb.w	r8, [r5, #6]
    lv_style_btn_ina.body.grad_color = LV_COLOR_MAKE(0xd8, 0xd8, 0xd8);
 80096b8:	f885 8008 	strb.w	r8, [r5, #8]
 80096bc:	f885 8009 	strb.w	r8, [r5, #9]
 80096c0:	f885 800a 	strb.w	r8, [r5, #10]
    lv_style_btn_ina.body.border.color = LV_COLOR_MAKE(0x90, 0x90, 0x90);
 80096c4:	f885 b010 	strb.w	fp, [r5, #16]
 80096c8:	f885 b011 	strb.w	fp, [r5, #17]
 80096cc:	f885 b012 	strb.w	fp, [r5, #18]
    lv_style_btn_ina.text.color = LV_COLOR_MAKE(0x70, 0x70, 0x70);
 80096d0:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
 80096d4:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
 80096d8:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
    lv_style_btn_ina.image.color = LV_COLOR_MAKE(0x70, 0x70, 0x70);
 80096dc:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 80096e0:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
 80096e4:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
    lv_style_btn_ina.line.color = LV_COLOR_MAKE(0x70, 0x70, 0x70);
 80096e8:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 80096ec:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
 80096f0:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
}
 80096f4:	b003      	add	sp, #12
 80096f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096fa:	bf00      	nop
 80096fc:	20017e50 	.word	0x20017e50
 8009700:	20000058 	.word	0x20000058
 8009704:	20017ee0 	.word	0x20017ee0
 8009708:	20017ca0 	.word	0x20017ca0
 800970c:	20017b80 	.word	0x20017b80
 8009710:	20017bc8 	.word	0x20017bc8
 8009714:	20017d78 	.word	0x20017d78
 8009718:	20017ce8 	.word	0x20017ce8
 800971c:	20017c10 	.word	0x20017c10
 8009720:	20017c58 	.word	0x20017c58
 8009724:	20017e08 	.word	0x20017e08
 8009728:	20017e98 	.word	0x20017e98
 800972c:	20017d30 	.word	0x20017d30
 8009730:	20017dc0 	.word	0x20017dc0

08009734 <lv_style_copy>:
 * @param dest pointer to the destination style
 * @param src pointer to the source style
 */
void lv_style_copy(lv_style_t * dest, const lv_style_t * src)
{
    memcpy(dest, src, sizeof(lv_style_t));
 8009734:	2248      	movs	r2, #72	; 0x48
 8009736:	f00c b9f1 	b.w	8015b1c <memcpy>
	...

0800973c <lv_vdb_get>:
lv_vdb_t * lv_vdb_get(void)
{
#if LV_VDB_DOUBLE == 0
    /* Wait until VDB become ACTIVE from FLUSH by the
     * user call of 'lv_flush_ready()' in display drivers's flush function*/
    while(vdb_state != LV_VDB_STATE_ACTIVE);
 800973c:	4a04      	ldr	r2, [pc, #16]	; (8009750 <lv_vdb_get+0x14>)
 800973e:	7813      	ldrb	r3, [r2, #0]
 8009740:	2b01      	cmp	r3, #1
 8009742:	d1fc      	bne.n	800973e <lv_vdb_get+0x2>

    if(vdb.buf == (void *)LV_VDB_ADR_INV) {
 8009744:	4803      	ldr	r0, [pc, #12]	; (8009754 <lv_vdb_get+0x18>)
 8009746:	6883      	ldr	r3, [r0, #8]
        LV_LOG_ERROR("VDB address is invalid. Use `lv_vdb_set_adr` to set a valid address or use LV_VDB_ADR = 0 in lv_conf.h");
        return NULL;
    }
    return &vdb;
 8009748:	2b08      	cmp	r3, #8
        return &vdb[1];
    }

    return NULL;   /*There wasn't free VDB (never happen)*/
#endif
}
 800974a:	bf08      	it	eq
 800974c:	2000      	moveq	r0, #0
 800974e:	4770      	bx	lr
 8009750:	20000054 	.word	0x20000054
 8009754:	20000048 	.word	0x20000048

08009758 <lv_vdb_flush>:

/**
 * Flush the content of the VDB
 */
void lv_vdb_flush(void)
{
 8009758:	b513      	push	{r0, r1, r4, lr}
    lv_vdb_t * vdb_act = lv_vdb_get();
 800975a:	f7ff ffef 	bl	800973c <lv_vdb_get>
    if(!vdb_act) {
 800975e:	b178      	cbz	r0, 8009780 <lv_vdb_flush+0x28>
        LV_LOG_WARN("Invalid VDB pointer");
        return;
    }
#if LV_VDB_DOUBLE == 0
    vdb_state = LV_VDB_STATE_FLUSH;     /*User call to 'lv_flush_ready()' will set to ACTIVE 'disp_flush'*/
 8009760:	2202      	movs	r2, #2
 8009762:	4b08      	ldr	r3, [pc, #32]	; (8009784 <lv_vdb_flush+0x2c>)
    if(vdb_state[0] == LV_VDB_STATE_ACTIVE) vdb_state[0] = LV_VDB_STATE_FLUSH;
    if(vdb_state[1] == LV_VDB_STATE_ACTIVE) vdb_state[1] = LV_VDB_STATE_FLUSH;
#endif

    /*Flush the rendered content to the display*/
    lv_disp_flush(vdb_act->area.x1, vdb_act->area.y1, vdb_act->area.x2, vdb_act->area.y2, vdb_act->buf);
 8009764:	f9b0 4000 	ldrsh.w	r4, [r0]
    vdb_state = LV_VDB_STATE_FLUSH;     /*User call to 'lv_flush_ready()' will set to ACTIVE 'disp_flush'*/
 8009768:	701a      	strb	r2, [r3, #0]
    lv_disp_flush(vdb_act->area.x1, vdb_act->area.y1, vdb_act->area.x2, vdb_act->area.y2, vdb_act->buf);
 800976a:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800976e:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8009772:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8009776:	6880      	ldr	r0, [r0, #8]
 8009778:	9000      	str	r0, [sp, #0]
 800977a:	4620      	mov	r0, r4
 800977c:	f003 fe3e 	bl	800d3fc <lv_disp_flush>

}
 8009780:	b002      	add	sp, #8
 8009782:	bd10      	pop	{r4, pc}
 8009784:	20000054 	.word	0x20000054

08009788 <lv_flush_ready>:
 * Call in the display driver's  'disp_flush' function when the flushing is finished
 */
void lv_flush_ready(void)
{
#if LV_VDB_DOUBLE == 0
    vdb_state = LV_VDB_STATE_ACTIVE;
 8009788:	2201      	movs	r2, #1
 800978a:	4b01      	ldr	r3, [pc, #4]	; (8009790 <lv_flush_ready+0x8>)
 800978c:	701a      	strb	r2, [r3, #0]
 800978e:	4770      	bx	lr
 8009790:	20000054 	.word	0x20000054

08009794 <lv_draw_aa_get_opa>:

    static const lv_opa_t * seg_map[] = {seg1, seg2, seg3, seg4,
                                         seg5, seg6, seg7, seg8
                                        };

    if(seg == 0) return LV_OPA_TRANSP;
 8009794:	b188      	cbz	r0, 80097ba <lv_draw_aa_get_opa+0x26>
    else if(seg < 8) return (uint32_t)((uint32_t)seg_map[seg - 1][px_id] * base_opa) >> 8;
 8009796:	2807      	cmp	r0, #7
 8009798:	dc08      	bgt.n	80097ac <lv_draw_aa_get_opa+0x18>
 800979a:	3801      	subs	r0, #1
 800979c:	4b07      	ldr	r3, [pc, #28]	; (80097bc <lv_draw_aa_get_opa+0x28>)
 800979e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80097a2:	5c58      	ldrb	r0, [r3, r1]
 80097a4:	fb10 f002 	smulbb	r0, r0, r2
 80097a8:	0a00      	lsrs	r0, r0, #8
 80097aa:	4770      	bx	lr
    else {
        return ((px_id * 2 + 1) * base_opa) / (2 * seg);
 80097ac:	0049      	lsls	r1, r1, #1
 80097ae:	0040      	lsls	r0, r0, #1
 80097b0:	fb01 2202 	mla	r2, r1, r2, r2
 80097b4:	fb92 f0f0 	sdiv	r0, r2, r0
 80097b8:	b2c0      	uxtb	r0, r0
    }

}
 80097ba:	4770      	bx	lr
 80097bc:	080837b8 	.word	0x080837b8

080097c0 <lv_draw_aa_ver_seg>:
 * @param mask draw only in this area
 * @param color color of pixels
 * @param opa maximum opacity
 */
void lv_draw_aa_ver_seg(lv_coord_t x, lv_coord_t y, lv_coord_t length, const lv_area_t * mask, lv_color_t color, lv_opa_t opa)
{
 80097c0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    bool aa_inv = false;
    if(length < 0) {
 80097c4:	1e14      	subs	r4, r2, #0
{
 80097c6:	4680      	mov	r8, r0
 80097c8:	4689      	mov	r9, r1
 80097ca:	469a      	mov	sl, r3
        aa_inv = true;
        length = -length;
 80097cc:	bfb8      	it	lt
 80097ce:	4264      	neglt	r4, r4
{
 80097d0:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
        aa_inv = true;
 80097d4:	bfb6      	itet	lt
 80097d6:	2601      	movlt	r6, #1
    bool aa_inv = false;
 80097d8:	2600      	movge	r6, #0
        length = -length;
 80097da:	b224      	sxthlt	r4, r4
    }

    lv_coord_t i;
    for(i = 0; i < length; i++) {
 80097dc:	2500      	movs	r5, #0
 80097de:	b229      	sxth	r1, r5
 80097e0:	428c      	cmp	r4, r1
 80097e2:	dc02      	bgt.n	80097ea <lv_draw_aa_ver_seg+0x2a>
        lv_opa_t px_opa = lv_draw_aa_get_opa(length, i, opa);
        if(aa_inv) px_opa = opa - px_opa;
        px_fp(x, y + i, mask, color, px_opa);
    }
}
 80097e4:	b002      	add	sp, #8
 80097e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        lv_opa_t px_opa = lv_draw_aa_get_opa(length, i, opa);
 80097ea:	463a      	mov	r2, r7
 80097ec:	4620      	mov	r0, r4
 80097ee:	f7ff ffd1 	bl	8009794 <lv_draw_aa_get_opa>
        if(aa_inv) px_opa = opa - px_opa;
 80097f2:	b10e      	cbz	r6, 80097f8 <lv_draw_aa_ver_seg+0x38>
 80097f4:	1a38      	subs	r0, r7, r0
 80097f6:	b2c0      	uxtb	r0, r0
        px_fp(x, y + i, mask, color, px_opa);
 80097f8:	eb09 0105 	add.w	r1, r9, r5
 80097fc:	9000      	str	r0, [sp, #0]
 80097fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009800:	4652      	mov	r2, sl
 8009802:	b209      	sxth	r1, r1
 8009804:	4640      	mov	r0, r8
 8009806:	f003 f990 	bl	800cb2a <lv_vpx>
 800980a:	3501      	adds	r5, #1
 800980c:	e7e7      	b.n	80097de <lv_draw_aa_ver_seg+0x1e>

0800980e <lv_draw_aa_hor_seg>:
 * @param mask draw only in this area
 * @param color color of pixels
 * @param opa maximum opacity
 */
void lv_draw_aa_hor_seg(lv_coord_t x, lv_coord_t y, lv_coord_t length, const lv_area_t * mask, lv_color_t color, lv_opa_t opa)
{
 800980e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    bool aa_inv = false;
    if(length < 0) {
 8009812:	1e14      	subs	r4, r2, #0
{
 8009814:	4680      	mov	r8, r0
 8009816:	4689      	mov	r9, r1
 8009818:	469a      	mov	sl, r3
        aa_inv = true;
        length = -length;
 800981a:	bfb8      	it	lt
 800981c:	4264      	neglt	r4, r4
{
 800981e:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
        aa_inv = true;
 8009822:	bfb6      	itet	lt
 8009824:	2601      	movlt	r6, #1
    bool aa_inv = false;
 8009826:	2600      	movge	r6, #0
        length = -length;
 8009828:	b224      	sxthlt	r4, r4
    }

    lv_coord_t i;
    for(i = 0; i < length; i++) {
 800982a:	2500      	movs	r5, #0
 800982c:	b229      	sxth	r1, r5
 800982e:	428c      	cmp	r4, r1
 8009830:	dc02      	bgt.n	8009838 <lv_draw_aa_hor_seg+0x2a>
        lv_opa_t px_opa = lv_draw_aa_get_opa(length, i, opa);
        if(aa_inv) px_opa = opa - px_opa;
        px_fp(x + i, y, mask, color, px_opa);
    }
}
 8009832:	b002      	add	sp, #8
 8009834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        lv_opa_t px_opa = lv_draw_aa_get_opa(length, i, opa);
 8009838:	463a      	mov	r2, r7
 800983a:	4620      	mov	r0, r4
 800983c:	f7ff ffaa 	bl	8009794 <lv_draw_aa_get_opa>
        if(aa_inv) px_opa = opa - px_opa;
 8009840:	b10e      	cbz	r6, 8009846 <lv_draw_aa_hor_seg+0x38>
 8009842:	1a38      	subs	r0, r7, r0
 8009844:	b2c0      	uxtb	r0, r0
        px_fp(x + i, y, mask, color, px_opa);
 8009846:	eb08 0e05 	add.w	lr, r8, r5
 800984a:	9000      	str	r0, [sp, #0]
 800984c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800984e:	4652      	mov	r2, sl
 8009850:	4649      	mov	r1, r9
 8009852:	fa0f f08e 	sxth.w	r0, lr
 8009856:	f003 f968 	bl	800cb2a <lv_vpx>
 800985a:	3501      	adds	r5, #1
 800985c:	e7e6      	b.n	800982c <lv_draw_aa_hor_seg+0x1e>
	...

08009860 <lv_img_decoder_close>:
}

static void lv_img_decoder_close(void)
{
    /*Try to close with the custom functions*/
    if(decoder_custom) {
 8009860:	4b0c      	ldr	r3, [pc, #48]	; (8009894 <lv_img_decoder_close+0x34>)
 8009862:	781b      	ldrb	r3, [r3, #0]
{
 8009864:	b570      	push	{r4, r5, r6, lr}
    if(decoder_custom) {
 8009866:	b12b      	cbz	r3, 8009874 <lv_img_decoder_close+0x14>
        if(lv_img_decoder_close_custom) lv_img_decoder_close_custom();
 8009868:	4b0b      	ldr	r3, [pc, #44]	; (8009898 <lv_img_decoder_close+0x38>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	b183      	cbz	r3, 8009890 <lv_img_decoder_close+0x30>
        }
#endif
        decoder_src_type = LV_IMG_SRC_UNKNOWN;
        decoder_src = NULL;
    }
}
 800986e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if(lv_img_decoder_close_custom) lv_img_decoder_close_custom();
 8009872:	4718      	bx	r3
    if(decoder_src) {
 8009874:	4c09      	ldr	r4, [pc, #36]	; (800989c <lv_img_decoder_close+0x3c>)
 8009876:	6822      	ldr	r2, [r4, #0]
 8009878:	b152      	cbz	r2, 8009890 <lv_img_decoder_close+0x30>
        if(decoder_src_type == LV_IMG_SRC_FILE) {
 800987a:	4d09      	ldr	r5, [pc, #36]	; (80098a0 <lv_img_decoder_close+0x40>)
 800987c:	782a      	ldrb	r2, [r5, #0]
 800987e:	2a01      	cmp	r2, #1
 8009880:	d102      	bne.n	8009888 <lv_img_decoder_close+0x28>
            lv_fs_close(&decoder_file);
 8009882:	4808      	ldr	r0, [pc, #32]	; (80098a4 <lv_img_decoder_close+0x44>)
 8009884:	f004 f955 	bl	800db32 <lv_fs_close>
        decoder_src_type = LV_IMG_SRC_UNKNOWN;
 8009888:	2303      	movs	r3, #3
 800988a:	702b      	strb	r3, [r5, #0]
        decoder_src = NULL;
 800988c:	2300      	movs	r3, #0
 800988e:	6023      	str	r3, [r4, #0]
 8009890:	bd70      	pop	{r4, r5, r6, pc}
 8009892:	bf00      	nop
 8009894:	2000ebdc 	.word	0x2000ebdc
 8009898:	2000ebf4 	.word	0x2000ebf4
 800989c:	2000ebec 	.word	0x2000ebec
 80098a0:	2000ebf0 	.word	0x2000ebf0
 80098a4:	2000ebe0 	.word	0x2000ebe0

080098a8 <lv_img_color_format_get_px_size>:
{
 80098a8:	3804      	subs	r0, #4
 80098aa:	b2c0      	uxtb	r0, r0
 80098ac:	280a      	cmp	r0, #10
 80098ae:	bf9a      	itte	ls
 80098b0:	4b01      	ldrls	r3, [pc, #4]	; (80098b8 <lv_img_color_format_get_px_size+0x10>)
 80098b2:	5c18      	ldrbls	r0, [r3, r0]
 80098b4:	2000      	movhi	r0, #0
}
 80098b6:	4770      	bx	lr
 80098b8:	080837d8 	.word	0x080837d8

080098bc <lv_img_color_format_is_chroma_keyed>:
{
 80098bc:	280a      	cmp	r0, #10
 80098be:	d808      	bhi.n	80098d2 <lv_img_color_format_is_chroma_keyed+0x16>
 80098c0:	2301      	movs	r3, #1
 80098c2:	fa03 f000 	lsl.w	r0, r3, r0
 80098c6:	f410 6ff9 	tst.w	r0, #1992	; 0x7c8
 80098ca:	bf14      	ite	ne
 80098cc:	4618      	movne	r0, r3
 80098ce:	2000      	moveq	r0, #0
 80098d0:	4770      	bx	lr
            return false;
 80098d2:	2000      	movs	r0, #0
}
 80098d4:	4770      	bx	lr

080098d6 <lv_img_color_format_has_alpha>:
{
 80098d6:	3802      	subs	r0, #2
 80098d8:	b2c0      	uxtb	r0, r0
 80098da:	280c      	cmp	r0, #12
 80098dc:	d809      	bhi.n	80098f2 <lv_img_color_format_has_alpha+0x1c>
 80098de:	2301      	movs	r3, #1
 80098e0:	fa03 f000 	lsl.w	r0, r3, r0
 80098e4:	f641 6309 	movw	r3, #7689	; 0x1e09
 80098e8:	4218      	tst	r0, r3
 80098ea:	bf14      	ite	ne
 80098ec:	2001      	movne	r0, #1
 80098ee:	2000      	moveq	r0, #0
 80098f0:	4770      	bx	lr
            return false;
 80098f2:	2000      	movs	r0, #0
}
 80098f4:	4770      	bx	lr

080098f6 <lv_img_src_get_type>:
    if(src == NULL) return LV_IMG_SRC_UNKNOWN;
 80098f6:	b150      	cbz	r0, 800990e <lv_img_src_get_type+0x18>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 80098f8:	7803      	ldrb	r3, [r0, #0]
 80098fa:	f1a3 0220 	sub.w	r2, r3, #32
 80098fe:	2a5f      	cmp	r2, #95	; 0x5f
 8009900:	d907      	bls.n	8009912 <lv_img_src_get_type+0x1c>
    } else if(u8_p[0] >= 0x80) {
 8009902:	f013 0f80 	tst.w	r3, #128	; 0x80
        return LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
 8009906:	bf14      	ite	ne
 8009908:	2002      	movne	r0, #2
 800990a:	2000      	moveq	r0, #0
 800990c:	4770      	bx	lr
    if(src == NULL) return LV_IMG_SRC_UNKNOWN;
 800990e:	2003      	movs	r0, #3
 8009910:	4770      	bx	lr
        return LV_IMG_SRC_FILE;     /*If it's an ASCII character then it's file name*/
 8009912:	2001      	movs	r0, #1
}
 8009914:	4770      	bx	lr
	...

08009918 <lv_img_dsc_get_info>:
    header->always_zero = 0;
 8009918:	780b      	ldrb	r3, [r1, #0]
 800991a:	f36f 1347 	bfc	r3, #5, #3
{
 800991e:	b530      	push	{r4, r5, lr}
    header->always_zero = 0;
 8009920:	700b      	strb	r3, [r1, #0]
{
 8009922:	b085      	sub	sp, #20
    if(lv_img_decoder_info_custom) {
 8009924:	4b2c      	ldr	r3, [pc, #176]	; (80099d8 <lv_img_dsc_get_info+0xc0>)
{
 8009926:	4605      	mov	r5, r0
 8009928:	460c      	mov	r4, r1
    if(lv_img_decoder_info_custom) {
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	b9c3      	cbnz	r3, 8009960 <lv_img_dsc_get_info+0x48>
    lv_img_src_t src_type = lv_img_src_get_type(src);
 800992e:	4628      	mov	r0, r5
 8009930:	f7ff ffe1 	bl	80098f6 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8009934:	b9c8      	cbnz	r0, 800996a <lv_img_dsc_get_info+0x52>
        header->w = ((lv_img_dsc_t *)src)->header.w;
 8009936:	682b      	ldr	r3, [r5, #0]
 8009938:	6822      	ldr	r2, [r4, #0]
 800993a:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800993e:	f363 2294 	bfi	r2, r3, #10, #11
 8009942:	6022      	str	r2, [r4, #0]
        header->h = ((lv_img_dsc_t *)src)->header.h;
 8009944:	886b      	ldrh	r3, [r5, #2]
 8009946:	8862      	ldrh	r2, [r4, #2]
 8009948:	f3c3 134a 	ubfx	r3, r3, #5, #11
 800994c:	f363 124f 	bfi	r2, r3, #5, #11
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 8009950:	7823      	ldrb	r3, [r4, #0]
        header->h = ((lv_img_dsc_t *)src)->header.h;
 8009952:	8062      	strh	r2, [r4, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 8009954:	782a      	ldrb	r2, [r5, #0]
 8009956:	f362 0304 	bfi	r3, r2, #0, #5
 800995a:	7023      	strb	r3, [r4, #0]
 800995c:	2001      	movs	r0, #1
 800995e:	e002      	b.n	8009966 <lv_img_dsc_get_info+0x4e>
        custom_res = lv_img_decoder_info_custom(src, header);
 8009960:	4798      	blx	r3
        if(custom_res == LV_RES_OK) return LV_RES_OK;       /*Custom info has supported this source*/
 8009962:	2801      	cmp	r0, #1
 8009964:	d1e3      	bne.n	800992e <lv_img_dsc_get_info+0x16>
}
 8009966:	b005      	add	sp, #20
 8009968:	bd30      	pop	{r4, r5, pc}
    else if(src_type == LV_IMG_SRC_FILE) {
 800996a:	2801      	cmp	r0, #1
 800996c:	d121      	bne.n	80099b2 <lv_img_dsc_get_info+0x9a>
        res = lv_fs_open(&file, src, LV_FS_MODE_RD);
 800996e:	2202      	movs	r2, #2
 8009970:	4629      	mov	r1, r5
 8009972:	a802      	add	r0, sp, #8
 8009974:	f004 f8a2 	bl	800dabc <lv_fs_open>
        if(res == LV_FS_RES_OK) {
 8009978:	b178      	cbz	r0, 800999a <lv_img_dsc_get_info+0x82>
            header->w = LV_DPI;
 800997a:	6823      	ldr	r3, [r4, #0]
 800997c:	2164      	movs	r1, #100	; 0x64
 800997e:	f361 2394 	bfi	r3, r1, #10, #11
            header->h = LV_DPI;
 8009982:	0c1a      	lsrs	r2, r3, #16
            header->w = LV_DPI;
 8009984:	6023      	str	r3, [r4, #0]
            header->cf = LV_IMG_CF_UNKOWN;
 8009986:	f36f 0304 	bfc	r3, #0, #5
            header->h = LV_DPI;
 800998a:	f361 124f 	bfi	r2, r1, #5, #11
            header->cf = LV_IMG_CF_UNKOWN;
 800998e:	7023      	strb	r3, [r4, #0]
            header->h = LV_DPI;
 8009990:	8062      	strh	r2, [r4, #2]
        lv_fs_close(&file);
 8009992:	a802      	add	r0, sp, #8
 8009994:	f004 f8cd 	bl	800db32 <lv_fs_close>
 8009998:	e7e0      	b.n	800995c <lv_img_dsc_get_info+0x44>
            res = lv_fs_read(&file, header, sizeof(lv_img_header_t), &rn);
 800999a:	ab01      	add	r3, sp, #4
 800999c:	2204      	movs	r2, #4
 800999e:	4621      	mov	r1, r4
 80099a0:	a802      	add	r0, sp, #8
 80099a2:	f004 f8db 	bl	800db5c <lv_fs_read>
        if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
 80099a6:	2800      	cmp	r0, #0
 80099a8:	d1e7      	bne.n	800997a <lv_img_dsc_get_info+0x62>
 80099aa:	9b01      	ldr	r3, [sp, #4]
 80099ac:	2b04      	cmp	r3, #4
 80099ae:	d1e4      	bne.n	800997a <lv_img_dsc_get_info+0x62>
 80099b0:	e7ef      	b.n	8009992 <lv_img_dsc_get_info+0x7a>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 80099b2:	2802      	cmp	r0, #2
 80099b4:	d10d      	bne.n	80099d2 <lv_img_dsc_get_info+0xba>
        header->w = 1;
 80099b6:	6823      	ldr	r3, [r4, #0]
 80099b8:	2001      	movs	r0, #1
 80099ba:	f360 2394 	bfi	r3, r0, #10, #11
        header->h = 1;
 80099be:	0c1a      	lsrs	r2, r3, #16
        header->w = 1;
 80099c0:	6023      	str	r3, [r4, #0]
        header->h = 1;
 80099c2:	f360 124f 	bfi	r2, r0, #5, #11
 80099c6:	8062      	strh	r2, [r4, #2]
        header->cf  = LV_IMG_CF_ALPHA_1BIT;
 80099c8:	220b      	movs	r2, #11
 80099ca:	f362 0304 	bfi	r3, r2, #0, #5
 80099ce:	7023      	strb	r3, [r4, #0]
 80099d0:	e7c9      	b.n	8009966 <lv_img_dsc_get_info+0x4e>
        return false;
 80099d2:	2000      	movs	r0, #0
 80099d4:	e7c7      	b.n	8009966 <lv_img_dsc_get_info+0x4e>
 80099d6:	bf00      	nop
 80099d8:	2000ebf8 	.word	0x2000ebf8

080099dc <lv_draw_img>:
{
 80099dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e0:	b093      	sub	sp, #76	; 0x4c
 80099e2:	4605      	mov	r5, r0
 80099e4:	4688      	mov	r8, r1
 80099e6:	461e      	mov	r6, r3
 80099e8:	af04      	add	r7, sp, #16
    if(src == NULL) {
 80099ea:	4614      	mov	r4, r2
{
 80099ec:	f897 a060 	ldrb.w	sl, [r7, #96]	; 0x60
    if(src == NULL) {
 80099f0:	b972      	cbnz	r2, 8009a10 <lv_draw_img+0x34>
        lv_draw_rect(coords, mask, &lv_style_plain, LV_OPA_COVER);
 80099f2:	23ff      	movs	r3, #255	; 0xff
 80099f4:	4a9e      	ldr	r2, [pc, #632]	; (8009c70 <lv_draw_img+0x294>)
 80099f6:	f001 f849 	bl	800aa8c <lv_draw_rect>
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, "No\ndata", LV_TXT_FLAG_NONE, NULL);
 80099fa:	9402      	str	r4, [sp, #8]
 80099fc:	9401      	str	r4, [sp, #4]
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, "No\ndata", LV_TXT_FLAG_NONE, NULL);
 80099fe:	4b9d      	ldr	r3, [pc, #628]	; (8009c74 <lv_draw_img+0x298>)
 8009a00:	4641      	mov	r1, r8
 8009a02:	4a9b      	ldr	r2, [pc, #620]	; (8009c70 <lv_draw_img+0x294>)
 8009a04:	4628      	mov	r0, r5
 8009a06:	9300      	str	r3, [sp, #0]
 8009a08:	23ff      	movs	r3, #255	; 0xff
 8009a0a:	f000 f95b 	bl	8009cc4 <lv_draw_label>
        return;
 8009a0e:	e054      	b.n	8009aba <lv_draw_img+0xde>
    union_ok = lv_area_intersect(&mask_com, mask, coords);
 8009a10:	f107 0928 	add.w	r9, r7, #40	; 0x28
 8009a14:	4602      	mov	r2, r0
 8009a16:	4648      	mov	r0, r9
 8009a18:	f003 fee4 	bl	800d7e4 <lv_area_intersect>
    if(union_ok == false) {
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	d04c      	beq.n	8009aba <lv_draw_img+0xde>
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->image.opa : (uint16_t)((uint16_t) style->image.opa * opa_scale) >> 8;
 8009a20:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8009a24:	f896 303d 	ldrb.w	r3, [r6, #61]	; 0x3d
    header_res = lv_img_dsc_get_info(src, &header);
 8009a28:	f107 0120 	add.w	r1, r7, #32
 8009a2c:	4620      	mov	r0, r4
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->image.opa : (uint16_t)((uint16_t) style->image.opa * opa_scale) >> 8;
 8009a2e:	bf1c      	itt	ne
 8009a30:	fb03 f30a 	mulne.w	r3, r3, sl
 8009a34:	f3c3 2307 	ubfxne	r3, r3, #8, #8
 8009a38:	61fb      	str	r3, [r7, #28]
    header_res = lv_img_dsc_get_info(src, &header);
 8009a3a:	f7ff ff6d 	bl	8009918 <lv_img_dsc_get_info>
    if(header_res != LV_RES_OK) {
 8009a3e:	2801      	cmp	r0, #1
    header_res = lv_img_dsc_get_info(src, &header);
 8009a40:	4682      	mov	sl, r0
    if(header_res != LV_RES_OK) {
 8009a42:	d00b      	beq.n	8009a5c <lv_draw_img+0x80>
        lv_img_decoder_close();
 8009a44:	f7ff ff0c 	bl	8009860 <lv_img_decoder_close>
        lv_draw_rect(coords, mask, &lv_style_plain, LV_OPA_COVER);
 8009a48:	23ff      	movs	r3, #255	; 0xff
 8009a4a:	4a89      	ldr	r2, [pc, #548]	; (8009c70 <lv_draw_img+0x294>)
 8009a4c:	4641      	mov	r1, r8
 8009a4e:	4628      	mov	r0, r5
 8009a50:	f001 f81c 	bl	800aa8c <lv_draw_rect>
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, "No\ndata", LV_TXT_FLAG_NONE, NULL);
 8009a54:	2300      	movs	r3, #0
 8009a56:	9302      	str	r3, [sp, #8]
 8009a58:	9301      	str	r3, [sp, #4]
 8009a5a:	e7d0      	b.n	80099fe <lv_draw_img+0x22>
    bool chroma_keyed = lv_img_color_format_is_chroma_keyed(header.cf);
 8009a5c:	f897 2020 	ldrb.w	r2, [r7, #32]
    decoder_custom = false;
 8009a60:	f8df b228 	ldr.w	fp, [pc, #552]	; 8009c8c <lv_draw_img+0x2b0>
    bool chroma_keyed = lv_img_color_format_is_chroma_keyed(header.cf);
 8009a64:	f002 021f 	and.w	r2, r2, #31
 8009a68:	4610      	mov	r0, r2
 8009a6a:	f7ff ff27 	bl	80098bc <lv_img_color_format_is_chroma_keyed>
 8009a6e:	61b8      	str	r0, [r7, #24]
    bool alpha_byte = lv_img_color_format_has_alpha(header.cf);
 8009a70:	4610      	mov	r0, r2
 8009a72:	f7ff ff30 	bl	80098d6 <lv_img_color_format_has_alpha>
    decoder_custom = false;
 8009a76:	2300      	movs	r3, #0
    bool alpha_byte = lv_img_color_format_has_alpha(header.cf);
 8009a78:	6178      	str	r0, [r7, #20]
    decoder_custom = false;
 8009a7a:	f88b 3000 	strb.w	r3, [fp]
    if(lv_img_decoder_open_custom) {
 8009a7e:	4b7e      	ldr	r3, [pc, #504]	; (8009c78 <lv_draw_img+0x29c>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	b1f3      	cbz	r3, 8009ac2 <lv_draw_img+0xe6>
        custom_res = lv_img_decoder_open_custom(src, style);
 8009a84:	4631      	mov	r1, r6
 8009a86:	4620      	mov	r0, r4
 8009a88:	4798      	blx	r3
        if(custom_res != LV_IMG_DECODER_OPEN_FAIL) {
 8009a8a:	1c41      	adds	r1, r0, #1
        custom_res = lv_img_decoder_open_custom(src, style);
 8009a8c:	4602      	mov	r2, r0
        if(custom_res != LV_IMG_DECODER_OPEN_FAIL) {
 8009a8e:	d018      	beq.n	8009ac2 <lv_draw_img+0xe6>
            decoder_custom = true;  /*Mark that custom decoder function should be used for this img source.*/
 8009a90:	f88b a000 	strb.w	sl, [fp]
    if(img_data) {
 8009a94:	2a00      	cmp	r2, #0
 8009a96:	d049      	beq.n	8009b2c <lv_draw_img+0x150>
        map_fp(coords, mask, img_data, opa, chroma_keyed, alpha_byte, style->image.color, style->image.intense);
 8009a98:	f896 303c 	ldrb.w	r3, [r6, #60]	; 0x3c
 8009a9c:	4641      	mov	r1, r8
 8009a9e:	4c77      	ldr	r4, [pc, #476]	; (8009c7c <lv_draw_img+0x2a0>)
 8009aa0:	4628      	mov	r0, r5
 8009aa2:	9303      	str	r3, [sp, #12]
 8009aa4:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8009aa6:	6824      	ldr	r4, [r4, #0]
 8009aa8:	9302      	str	r3, [sp, #8]
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	9301      	str	r3, [sp, #4]
 8009aae:	69bb      	ldr	r3, [r7, #24]
 8009ab0:	9300      	str	r3, [sp, #0]
 8009ab2:	69fb      	ldr	r3, [r7, #28]
 8009ab4:	47a0      	blx	r4
    lv_img_decoder_close();
 8009ab6:	f7ff fed3 	bl	8009860 <lv_img_decoder_close>
}
 8009aba:	373c      	adds	r7, #60	; 0x3c
 8009abc:	46bd      	mov	sp, r7
 8009abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    decoder_src = src;
 8009ac2:	4a6f      	ldr	r2, [pc, #444]	; (8009c80 <lv_draw_img+0x2a4>)
    decoder_src_type = lv_img_src_get_type(src);
 8009ac4:	4620      	mov	r0, r4
 8009ac6:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 8009c94 <lv_draw_img+0x2b8>
    decoder_src = src;
 8009aca:	6014      	str	r4, [r2, #0]
 8009acc:	613a      	str	r2, [r7, #16]
    decoder_src_type = lv_img_src_get_type(src);
 8009ace:	f7ff ff12 	bl	80098f6 <lv_img_src_get_type>
    header_res = lv_img_dsc_get_info(src, &decoder_header);
 8009ad2:	496c      	ldr	r1, [pc, #432]	; (8009c84 <lv_draw_img+0x2a8>)
 8009ad4:	46d3      	mov	fp, sl
    decoder_src_type = lv_img_src_get_type(src);
 8009ad6:	f88a 0000 	strb.w	r0, [sl]
    header_res = lv_img_dsc_get_info(src, &decoder_header);
 8009ada:	4620      	mov	r0, r4
 8009adc:	f7ff ff1c 	bl	8009918 <lv_img_dsc_get_info>
 8009ae0:	693a      	ldr	r2, [r7, #16]
 8009ae2:	4613      	mov	r3, r2
    if(header_res == LV_RES_INV) {
 8009ae4:	b920      	cbnz	r0, 8009af0 <lv_draw_img+0x114>
        decoder_src_type = LV_IMG_SRC_UNKNOWN;
 8009ae6:	2303      	movs	r3, #3
        decoder_src = NULL;
 8009ae8:	6010      	str	r0, [r2, #0]
        decoder_src_type = LV_IMG_SRC_UNKNOWN;
 8009aea:	f88a 3000 	strb.w	r3, [sl]
 8009aee:	e7a9      	b.n	8009a44 <lv_draw_img+0x68>
    if(decoder_src_type == LV_IMG_SRC_FILE) {
 8009af0:	f89a 2000 	ldrb.w	r2, [sl]
 8009af4:	2a01      	cmp	r2, #1
 8009af6:	d00f      	beq.n	8009b18 <lv_draw_img+0x13c>
    lv_img_cf_t cf = decoder_header.cf;
 8009af8:	4a62      	ldr	r2, [pc, #392]	; (8009c84 <lv_draw_img+0x2a8>)
 8009afa:	7812      	ldrb	r2, [r2, #0]
 8009afc:	f3c2 0204 	ubfx	r2, r2, #0, #5
            cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8009b00:	3a04      	subs	r2, #4
    if(cf == LV_IMG_CF_TRUE_COLOR ||
 8009b02:	b2d2      	uxtb	r2, r2
 8009b04:	2a02      	cmp	r2, #2
 8009b06:	d89d      	bhi.n	8009a44 <lv_draw_img+0x68>
        if(decoder_src_type == LV_IMG_SRC_VARIABLE) {
 8009b08:	f89b 2000 	ldrb.w	r2, [fp]
 8009b0c:	b972      	cbnz	r2, 8009b2c <lv_draw_img+0x150>
            return ((lv_img_dsc_t *)decoder_src)->data;
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	689a      	ldr	r2, [r3, #8]
    if(img_data == LV_IMG_DECODER_OPEN_FAIL) {
 8009b12:	1c53      	adds	r3, r2, #1
 8009b14:	d1be      	bne.n	8009a94 <lv_draw_img+0xb8>
 8009b16:	e795      	b.n	8009a44 <lv_draw_img+0x68>
        lv_fs_res_t res = lv_fs_open(&decoder_file, src, LV_FS_MODE_RD);
 8009b18:	2202      	movs	r2, #2
 8009b1a:	4621      	mov	r1, r4
 8009b1c:	485a      	ldr	r0, [pc, #360]	; (8009c88 <lv_draw_img+0x2ac>)
 8009b1e:	613b      	str	r3, [r7, #16]
 8009b20:	f003 ffcc 	bl	800dabc <lv_fs_open>
        if(res != LV_FS_RES_OK) {
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	2800      	cmp	r0, #0
 8009b28:	d0e6      	beq.n	8009af8 <lv_draw_img+0x11c>
 8009b2a:	e78b      	b.n	8009a44 <lv_draw_img+0x68>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 8009b2c:	f8b7 a02c 	ldrh.w	sl, [r7, #44]	; 0x2c
 8009b30:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009b32:	f10a 0a01 	add.w	sl, sl, #1
    else {
 8009b36:	f8c7 d010 	str.w	sp, [r7, #16]
 8009b3a:	ebaa 0a03 	sub.w	sl, sl, r3
 8009b3e:	fa0f fa8a 	sxth.w	sl, sl
        uint8_t buf[(lv_area_get_width(&mask_com) * (LV_COLOR_SIZE + 1))];
 8009b42:	eb0a 134a 	add.w	r3, sl, sl, lsl #5
 8009b46:	3307      	adds	r3, #7
 8009b48:	f023 0307 	bic.w	r3, r3, #7
    memcpy(dest, src, sizeof(lv_area_t));
 8009b4c:	e899 0003 	ldmia.w	r9, {r0, r1}
 8009b50:	ebad 0d03 	sub.w	sp, sp, r3
 8009b54:	f107 0330 	add.w	r3, r7, #48	; 0x30
        lv_coord_t y = mask_com.y1 - coords->y1;
 8009b58:	f04f 0900 	mov.w	r9, #0
        uint8_t buf[(lv_area_get_width(&mask_com) * (LV_COLOR_SIZE + 1))];
 8009b5c:	f10d 0b10 	add.w	fp, sp, #16
 8009b60:	e883 0003 	stmia.w	r3, {r0, r1}
        lv_area_set_height(&line, 1);
 8009b64:	4618      	mov	r0, r3
 8009b66:	2101      	movs	r1, #1
 8009b68:	f003 fe1b 	bl	800d7a2 <lv_area_set_height>
        lv_coord_t x = mask_com.x1 - coords->x1;
 8009b6c:	882a      	ldrh	r2, [r5, #0]
 8009b6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009b70:	1a9b      	subs	r3, r3, r2
 8009b72:	b21b      	sxth	r3, r3
 8009b74:	60fb      	str	r3, [r7, #12]
        lv_coord_t y = mask_com.y1 - coords->y1;
 8009b76:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009b78:	60bb      	str	r3, [r7, #8]
 8009b7a:	68ba      	ldr	r2, [r7, #8]
 8009b7c:	886b      	ldrh	r3, [r5, #2]
 8009b7e:	1ad3      	subs	r3, r2, r3
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	603b      	str	r3, [r7, #0]
 8009b84:	fa1f f389 	uxth.w	r3, r9
 8009b88:	683a      	ldr	r2, [r7, #0]
 8009b8a:	18d1      	adds	r1, r2, r3
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 8009b8c:	68ba      	ldr	r2, [r7, #8]
 8009b8e:	4413      	add	r3, r2
 8009b90:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8009b94:	b209      	sxth	r1, r1
 8009b96:	b21b      	sxth	r3, r3
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	da02      	bge.n	8009ba2 <lv_draw_img+0x1c6>
 8009b9c:	f8d7 d010 	ldr.w	sp, [r7, #16]
 8009ba0:	e789      	b.n	8009ab6 <lv_draw_img+0xda>
    if(decoder_custom) {
 8009ba2:	4b3a      	ldr	r3, [pc, #232]	; (8009c8c <lv_draw_img+0x2b0>)
 8009ba4:	781b      	ldrb	r3, [r3, #0]
 8009ba6:	b31b      	cbz	r3, 8009bf0 <lv_draw_img+0x214>
        if(lv_img_decoder_read_line_custom) {
 8009ba8:	4b39      	ldr	r3, [pc, #228]	; (8009c90 <lv_draw_img+0x2b4>)
 8009baa:	681c      	ldr	r4, [r3, #0]
 8009bac:	2c00      	cmp	r4, #0
 8009bae:	d04f      	beq.n	8009c50 <lv_draw_img+0x274>
            custom_res = lv_img_decoder_read_line_custom(x, y, len, buf);
 8009bb0:	465b      	mov	r3, fp
 8009bb2:	4652      	mov	r2, sl
 8009bb4:	68f8      	ldr	r0, [r7, #12]
 8009bb6:	47a0      	blx	r4
            if(read_res != LV_RES_OK) {
 8009bb8:	2801      	cmp	r0, #1
            if(res != LV_FS_RES_OK || btr != br) {
 8009bba:	d149      	bne.n	8009c50 <lv_draw_img+0x274>
            map_fp(&line, mask, buf, opa, chroma_keyed, alpha_byte, style->image.color, style->image.intense);
 8009bbc:	f896 303c 	ldrb.w	r3, [r6, #60]	; 0x3c
 8009bc0:	465a      	mov	r2, fp
 8009bc2:	4c2e      	ldr	r4, [pc, #184]	; (8009c7c <lv_draw_img+0x2a0>)
 8009bc4:	4641      	mov	r1, r8
 8009bc6:	9303      	str	r3, [sp, #12]
 8009bc8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8009bcc:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8009bce:	f109 0901 	add.w	r9, r9, #1
 8009bd2:	6824      	ldr	r4, [r4, #0]
 8009bd4:	9302      	str	r3, [sp, #8]
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	9301      	str	r3, [sp, #4]
 8009bda:	69bb      	ldr	r3, [r7, #24]
 8009bdc:	9300      	str	r3, [sp, #0]
 8009bde:	69fb      	ldr	r3, [r7, #28]
 8009be0:	47a0      	blx	r4
            line.y1++;
 8009be2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009be4:	3301      	adds	r3, #1
 8009be6:	867b      	strh	r3, [r7, #50]	; 0x32
            line.y2++;
 8009be8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009bea:	3301      	adds	r3, #1
 8009bec:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009bee:	e7c9      	b.n	8009b84 <lv_draw_img+0x1a8>
    if(decoder_src_type == LV_IMG_SRC_FILE) {
 8009bf0:	4b28      	ldr	r3, [pc, #160]	; (8009c94 <lv_draw_img+0x2b8>)
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	d130      	bne.n	8009c5a <lv_draw_img+0x27e>
        uint8_t px_size = lv_img_color_format_get_px_size(decoder_header.cf);
 8009bf8:	4a22      	ldr	r2, [pc, #136]	; (8009c84 <lv_draw_img+0x2a8>)
 8009bfa:	7814      	ldrb	r4, [r2, #0]
 8009bfc:	f004 001f 	and.w	r0, r4, #31
                decoder_header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8009c00:	f004 041f 	and.w	r4, r4, #31
        uint8_t px_size = lv_img_color_format_get_px_size(decoder_header.cf);
 8009c04:	f7ff fe50 	bl	80098a8 <lv_img_color_format_get_px_size>
 8009c08:	6078      	str	r0, [r7, #4]
        if(decoder_header.cf == LV_IMG_CF_TRUE_COLOR ||
 8009c0a:	1f23      	subs	r3, r4, #4
 8009c0c:	2b02      	cmp	r3, #2
 8009c0e:	d81c      	bhi.n	8009c4a <lv_draw_img+0x26e>
            uint32_t pos = ((y * decoder_header.w + x) * px_size) >> 3;
 8009c10:	6813      	ldr	r3, [r2, #0]
 8009c12:	68fa      	ldr	r2, [r7, #12]
 8009c14:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8009c18:	fb11 2103 	smlabb	r1, r1, r3, r2
 8009c1c:	4341      	muls	r1, r0
            res = lv_fs_seek(&decoder_file, pos);
 8009c1e:	481a      	ldr	r0, [pc, #104]	; (8009c88 <lv_draw_img+0x2ac>)
 8009c20:	10c9      	asrs	r1, r1, #3
 8009c22:	f003 ffb3 	bl	800db8c <lv_fs_seek>
            if(res != LV_FS_RES_OK) {
 8009c26:	b998      	cbnz	r0, 8009c50 <lv_draw_img+0x274>
            uint32_t btr = len * (px_size >> 3);
 8009c28:	687b      	ldr	r3, [r7, #4]
            lv_fs_read(&decoder_file, buf, btr, &br);
 8009c2a:	4659      	mov	r1, fp
            uint32_t btr = len * (px_size >> 3);
 8009c2c:	f3c3 04c7 	ubfx	r4, r3, #3, #8
            uint32_t br = 0;
 8009c30:	f107 0338 	add.w	r3, r7, #56	; 0x38
            uint32_t btr = len * (px_size >> 3);
 8009c34:	fb14 f40a 	smulbb	r4, r4, sl
            uint32_t br = 0;
 8009c38:	f843 0d14 	str.w	r0, [r3, #-20]!
            lv_fs_read(&decoder_file, buf, btr, &br);
 8009c3c:	4812      	ldr	r0, [pc, #72]	; (8009c88 <lv_draw_img+0x2ac>)
 8009c3e:	4622      	mov	r2, r4
 8009c40:	f003 ff8c 	bl	800db5c <lv_fs_read>
            if(res != LV_FS_RES_OK || btr != br) {
 8009c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c46:	429c      	cmp	r4, r3
 8009c48:	e7b7      	b.n	8009bba <lv_draw_img+0x1de>
        } else if(decoder_header.cf == LV_IMG_CF_INDEXED_1BIT ||
 8009c4a:	3c07      	subs	r4, #7
 8009c4c:	2c07      	cmp	r4, #7
        } else if(img_dsc->header.cf == LV_IMG_CF_INDEXED_1BIT ||
 8009c4e:	d9b5      	bls.n	8009bbc <lv_draw_img+0x1e0>
                lv_img_decoder_close();
 8009c50:	f7ff fe06 	bl	8009860 <lv_img_decoder_close>
 8009c54:	f8d7 d010 	ldr.w	sp, [r7, #16]
 8009c58:	e6f6      	b.n	8009a48 <lv_draw_img+0x6c>
    } else if(decoder_src_type == LV_IMG_SRC_VARIABLE) {
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d1ae      	bne.n	8009bbc <lv_draw_img+0x1e0>
        if(img_dsc->header.cf == LV_IMG_CF_ALPHA_1BIT ||
 8009c5e:	4b08      	ldr	r3, [pc, #32]	; (8009c80 <lv_draw_img+0x2a4>)
 8009c60:	681b      	ldr	r3, [r3, #0]
                img_dsc->header.cf == LV_IMG_CF_ALPHA_4BIT ||
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	f003 031f 	and.w	r3, r3, #31
        } else if(img_dsc->header.cf == LV_IMG_CF_INDEXED_1BIT ||
 8009c68:	3b07      	subs	r3, #7
 8009c6a:	2b07      	cmp	r3, #7
 8009c6c:	e7ef      	b.n	8009c4e <lv_draw_img+0x272>
 8009c6e:	bf00      	nop
 8009c70:	20017dc0 	.word	0x20017dc0
 8009c74:	080837e3 	.word	0x080837e3
 8009c78:	2000ebfc 	.word	0x2000ebfc
 8009c7c:	0808378c 	.word	0x0808378c
 8009c80:	2000ebec 	.word	0x2000ebec
 8009c84:	2000ebe8 	.word	0x2000ebe8
 8009c88:	2000ebe0 	.word	0x2000ebe0
 8009c8c:	2000ebdc 	.word	0x2000ebdc
 8009c90:	2000ec00 	.word	0x2000ec00
 8009c94:	2000ebf0 	.word	0x2000ebf0

08009c98 <hex_char_to_num>:
 * @param hex Pointer to a hexadecimal character (0..9, A..F)
 * @return the numerical value of `hex` or 0 on error
 */
static uint8_t hex_char_to_num(char hex)
{
    if(hex >= '0' && hex <= '9') {
 8009c98:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	2b09      	cmp	r3, #9
 8009ca0:	d90a      	bls.n	8009cb8 <hex_char_to_num+0x20>
        return hex - '0';
    }

    if(hex >= 'a') hex -= 'a' - 'A';    /*Convert to upper case*/
 8009ca2:	2860      	cmp	r0, #96	; 0x60
 8009ca4:	bf84      	itt	hi
 8009ca6:	3820      	subhi	r0, #32
 8009ca8:	b2c0      	uxtbhi	r0, r0
 8009caa:	3841      	subs	r0, #65	; 0x41
 8009cac:	b2c0      	uxtb	r0, r0
 8009cae:	2805      	cmp	r0, #5
 8009cb0:	d804      	bhi.n	8009cbc <hex_char_to_num+0x24>
 8009cb2:	4b03      	ldr	r3, [pc, #12]	; (8009cc0 <hex_char_to_num+0x28>)
 8009cb4:	5c18      	ldrb	r0, [r3, r0]
 8009cb6:	4770      	bx	lr
 8009cb8:	4618      	mov	r0, r3
 8009cba:	4770      	bx	lr
 8009cbc:	2000      	movs	r0, #0
        default:
            return 0;
    }

    return 0;
}
 8009cbe:	4770      	bx	lr
 8009cc0:	080837eb 	.word	0x080837eb

08009cc4 <lv_draw_label>:
{
 8009cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc8:	b093      	sub	sp, #76	; 0x4c
 8009cca:	4605      	mov	r5, r0
 8009ccc:	4614      	mov	r4, r2
 8009cce:	461f      	mov	r7, r3
 8009cd0:	f89d 6074 	ldrb.w	r6, [sp, #116]	; 0x74
 8009cd4:	910c      	str	r1, [sp, #48]	; 0x30
    if((flag & LV_TXT_FLAG_EXPAND) == 0) {
 8009cd6:	07b1      	lsls	r1, r6, #30
{
 8009cd8:	f8dd b070 	ldr.w	fp, [sp, #112]	; 0x70
    const lv_font_t * font = style->text.font;
 8009cdc:	f8d2 902c 	ldr.w	r9, [r2, #44]	; 0x2c
    if((flag & LV_TXT_FLAG_EXPAND) == 0) {
 8009ce0:	d44b      	bmi.n	8009d7a <lv_draw_label+0xb6>
    return area_p->x2 - area_p->x1 + 1;
 8009ce2:	8883      	ldrh	r3, [r0, #4]
 8009ce4:	8802      	ldrh	r2, [r0, #0]
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	1a9b      	subs	r3, r3, r2
 8009cea:	b21b      	sxth	r3, r3
        w = p.x;
 8009cec:	9308      	str	r3, [sp, #32]
    uint32_t line_end = lv_txt_get_next_line(txt, font, style->text.letter_space, w, flag);
 8009cee:	4649      	mov	r1, r9
 8009cf0:	9b08      	ldr	r3, [sp, #32]
 8009cf2:	4658      	mov	r0, fp
 8009cf4:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8009cf8:	9600      	str	r6, [sp, #0]
 8009cfa:	f004 fb9b 	bl	800e434 <lv_txt_get_next_line>
    pos.x = coords->x1;
 8009cfe:	882b      	ldrh	r3, [r5, #0]
    uint32_t line_end = lv_txt_get_next_line(txt, font, style->text.letter_space, w, flag);
 8009d00:	4680      	mov	r8, r0
    pos.x = coords->x1;
 8009d02:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
    pos.y = coords->y1;
 8009d06:	886b      	ldrh	r3, [r5, #2]
 8009d08:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
    if(flag & LV_TXT_FLAG_CENTER) {
 8009d0c:	f016 0304 	ands.w	r3, r6, #4
 8009d10:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d12:	d043      	beq.n	8009d9c <lv_draw_label+0xd8>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start,
 8009d14:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8009d18:	464a      	mov	r2, r9
 8009d1a:	4601      	mov	r1, r0
 8009d1c:	9600      	str	r6, [sp, #0]
 8009d1e:	4658      	mov	r0, fp
 8009d20:	f004 fc12 	bl	800e548 <lv_txt_get_width>
 8009d24:	88ab      	ldrh	r3, [r5, #4]
 8009d26:	882a      	ldrh	r2, [r5, #0]
 8009d28:	3301      	adds	r3, #1
 8009d2a:	1a9b      	subs	r3, r3, r2
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 8009d2c:	b21b      	sxth	r3, r3
 8009d2e:	1a18      	subs	r0, r3, r0
 8009d30:	2302      	movs	r3, #2
 8009d32:	fb90 f0f3 	sdiv	r0, r0, r3
        pos.x += lv_area_get_width(coords) - line_width;
 8009d36:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8009d3a:	4418      	add	r0, r3
 8009d3c:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 8009d40:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->text.opa : (uint16_t)((uint16_t) style->text.opa * opa_scale) >> 8;
 8009d44:	2fff      	cmp	r7, #255	; 0xff
 8009d46:	bf1c      	itt	ne
 8009d48:	435f      	mulne	r7, r3
 8009d4a:	f3c7 2307 	ubfxne	r3, r7, #8, #8
 8009d4e:	9309      	str	r3, [sp, #36]	; 0x24
    if(offset != NULL) {
 8009d50:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d033      	beq.n	8009dbe <lv_draw_label+0xfa>
        x_ofs = offset->x;
 8009d56:	f9b3 3000 	ldrsh.w	r3, [r3]
        pos.y += y_ofs;
 8009d5a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
        x_ofs = offset->x;
 8009d5c:	930a      	str	r3, [sp, #40]	; 0x28
        pos.y += y_ofs;
 8009d5e:	8852      	ldrh	r2, [r2, #2]
 8009d60:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8009d64:	4413      	add	r3, r2
 8009d66:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
        cmd_state = CMD_STATE_WAIT;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	9306      	str	r3, [sp, #24]
    while(txt[line_start] != '\0') {
 8009d6e:	f81b 2003 	ldrb.w	r2, [fp, r3]
 8009d72:	bb3a      	cbnz	r2, 8009dc4 <lv_draw_label+0x100>
}
 8009d74:	b013      	add	sp, #76	; 0x4c
 8009d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_txt_get_size(&p, txt, style->text.font, style->text.letter_space, style->text.line_space, LV_COORD_MAX, flag);
 8009d7a:	f9b2 3030 	ldrsh.w	r3, [r2, #48]	; 0x30
 8009d7e:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8009d82:	9602      	str	r6, [sp, #8]
 8009d84:	4659      	mov	r1, fp
 8009d86:	9201      	str	r2, [sp, #4]
 8009d88:	a810      	add	r0, sp, #64	; 0x40
 8009d8a:	f9b4 2032 	ldrsh.w	r2, [r4, #50]	; 0x32
 8009d8e:	9200      	str	r2, [sp, #0]
 8009d90:	464a      	mov	r2, r9
 8009d92:	f004 fc11 	bl	800e5b8 <lv_txt_get_size>
        w = p.x;
 8009d96:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8009d9a:	e7a7      	b.n	8009cec <lv_draw_label+0x28>
    else if(flag & LV_TXT_FLAG_RIGHT) {
 8009d9c:	0732      	lsls	r2, r6, #28
 8009d9e:	d5cf      	bpl.n	8009d40 <lv_draw_label+0x7c>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start,
 8009da0:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8009da4:	464a      	mov	r2, r9
 8009da6:	4601      	mov	r1, r0
 8009da8:	9600      	str	r6, [sp, #0]
 8009daa:	4658      	mov	r0, fp
 8009dac:	f004 fbcc 	bl	800e548 <lv_txt_get_width>
 8009db0:	88ab      	ldrh	r3, [r5, #4]
 8009db2:	882a      	ldrh	r2, [r5, #0]
 8009db4:	3301      	adds	r3, #1
 8009db6:	1a9b      	subs	r3, r3, r2
        pos.x += lv_area_get_width(coords) - line_width;
 8009db8:	b21b      	sxth	r3, r3
 8009dba:	1a18      	subs	r0, r3, r0
 8009dbc:	e7bb      	b.n	8009d36 <lv_draw_label+0x72>
    lv_coord_t x_ofs = 0;
 8009dbe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009dc0:	930a      	str	r3, [sp, #40]	; 0x28
 8009dc2:	e7d2      	b.n	8009d6a <lv_draw_label+0xa6>
        if(offset != NULL) {
 8009dc4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009dc6:	b12a      	cbz	r2, 8009dd4 <lv_draw_label+0x110>
            pos.x += x_ofs;
 8009dc8:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8009dcc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009dce:	440a      	add	r2, r1
 8009dd0:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        i = line_start;
 8009dd4:	930f      	str	r3, [sp, #60]	; 0x3c
        cmd_state = CMD_STATE_WAIT;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	9305      	str	r3, [sp, #20]
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8009dda:	f006 0301 	and.w	r3, r6, #1
 8009dde:	930d      	str	r3, [sp, #52]	; 0x34
        while(i < line_end) {
 8009de0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009de2:	4598      	cmp	r8, r3
 8009de4:	d836      	bhi.n	8009e54 <lv_draw_label+0x190>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 8009de6:	eb0b 0708 	add.w	r7, fp, r8
 8009dea:	9b08      	ldr	r3, [sp, #32]
 8009dec:	4649      	mov	r1, r9
 8009dee:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8009df2:	9600      	str	r6, [sp, #0]
 8009df4:	4638      	mov	r0, r7
 8009df6:	f004 fb1d 	bl	800e434 <lv_txt_get_next_line>
 8009dfa:	eb00 0308 	add.w	r3, r0, r8
 8009dfe:	4601      	mov	r1, r0
 8009e00:	9305      	str	r3, [sp, #20]
        pos.x = coords->x1;
 8009e02:	882b      	ldrh	r3, [r5, #0]
 8009e04:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
        if(flag & LV_TXT_FLAG_CENTER) {
 8009e08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	f000 8098 	beq.w	8009f40 <lv_draw_label+0x27c>
            line_width = lv_txt_get_width(&txt[line_start], line_end - line_start,
 8009e10:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8009e14:	464a      	mov	r2, r9
 8009e16:	9600      	str	r6, [sp, #0]
 8009e18:	4638      	mov	r0, r7
 8009e1a:	f004 fb95 	bl	800e548 <lv_txt_get_width>
 8009e1e:	88ab      	ldrh	r3, [r5, #4]
 8009e20:	882a      	ldrh	r2, [r5, #0]
 8009e22:	3301      	adds	r3, #1
 8009e24:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 8009e26:	b21b      	sxth	r3, r3
 8009e28:	1a18      	subs	r0, r3, r0
 8009e2a:	2302      	movs	r3, #2
 8009e2c:	fb90 f0f3 	sdiv	r0, r0, r3
            pos.x += lv_area_get_width(coords) - line_width;
 8009e30:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8009e34:	4418      	add	r0, r3
 8009e36:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
        pos.y += style->text.line_space;
 8009e3a:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8009e3e:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8009e40:	441a      	add	r2, r3
        pos.y += lv_font_get_height(font);
 8009e42:	f899 3020 	ldrb.w	r3, [r9, #32]
        pos.y += style->text.line_space;
 8009e46:	4413      	add	r3, r2
 8009e48:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8009e4c:	4643      	mov	r3, r8
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 8009e4e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009e52:	e78c      	b.n	8009d6e <lv_draw_label+0xaa>
            letter = lv_txt_encoded_next(txt, &i);
 8009e54:	4b44      	ldr	r3, [pc, #272]	; (8009f68 <lv_draw_label+0x2a4>)
 8009e56:	a90f      	add	r1, sp, #60	; 0x3c
 8009e58:	4658      	mov	r0, fp
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4798      	blx	r3
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8009e5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            letter = lv_txt_encoded_next(txt, &i);
 8009e60:	9007      	str	r0, [sp, #28]
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d050      	beq.n	8009f08 <lv_draw_label+0x244>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8009e66:	2823      	cmp	r0, #35	; 0x23
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 8009e68:	9b05      	ldr	r3, [sp, #20]
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8009e6a:	d10d      	bne.n	8009e88 <lv_draw_label+0x1c4>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 8009e6c:	b92b      	cbnz	r3, 8009e7a <lv_draw_label+0x1b6>
                        par_start = i;
 8009e6e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8009e72:	9306      	str	r3, [sp, #24]
                        cmd_state = CMD_STATE_PAR;
 8009e74:	2301      	movs	r3, #1
                        cmd_state = CMD_STATE_WAIT;
 8009e76:	9305      	str	r3, [sp, #20]
 8009e78:	e7b2      	b.n	8009de0 <lv_draw_label+0x11c>
                    } else if(cmd_state == CMD_STATE_PAR) { /*Other start char in parameter escaped cmd. char */
 8009e7a:	9b05      	ldr	r3, [sp, #20]
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d070      	beq.n	8009f62 <lv_draw_label+0x29e>
                    } else if(cmd_state == CMD_STATE_IN) { /*Command end */
 8009e80:	2b02      	cmp	r3, #2
 8009e82:	d144      	bne.n	8009f0e <lv_draw_label+0x24a>
                        cmd_state = CMD_STATE_WAIT;
 8009e84:	2300      	movs	r3, #0
 8009e86:	e7f6      	b.n	8009e76 <lv_draw_label+0x1b2>
                if(cmd_state == CMD_STATE_PAR) {
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d13d      	bne.n	8009f08 <lv_draw_label+0x244>
                    if(letter == ' ') {
 8009e8c:	9b07      	ldr	r3, [sp, #28]
 8009e8e:	2b20      	cmp	r3, #32
 8009e90:	d1a6      	bne.n	8009de0 <lv_draw_label+0x11c>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 8009e92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e94:	9a06      	ldr	r2, [sp, #24]
 8009e96:	1a9b      	subs	r3, r3, r2
 8009e98:	2b07      	cmp	r3, #7
 8009e9a:	d132      	bne.n	8009f02 <lv_draw_label+0x23e>
                            memcpy(buf, &txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 8009e9c:	eb0b 0302 	add.w	r3, fp, r2
 8009ea0:	6818      	ldr	r0, [r3, #0]
 8009ea2:	889b      	ldrh	r3, [r3, #4]
 8009ea4:	0a02      	lsrs	r2, r0, #8
 8009ea6:	9010      	str	r0, [sp, #64]	; 0x40
 8009ea8:	0e01      	lsrs	r1, r0, #24
 8009eaa:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8009eae:	0c07      	lsrs	r7, r0, #16
 8009eb0:	9205      	str	r2, [sp, #20]
                            r = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 8009eb2:	b2c0      	uxtb	r0, r0
 8009eb4:	f7ff fef0 	bl	8009c98 <hex_char_to_num>
 8009eb8:	4602      	mov	r2, r0
 8009eba:	f89d 0014 	ldrb.w	r0, [sp, #20]
 8009ebe:	f7ff feeb 	bl	8009c98 <hex_char_to_num>
 8009ec2:	eb00 1202 	add.w	r2, r0, r2, lsl #4
                            g = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 8009ec6:	b2f8      	uxtb	r0, r7
 8009ec8:	f7ff fee6 	bl	8009c98 <hex_char_to_num>
 8009ecc:	4607      	mov	r7, r0
 8009ece:	b2c8      	uxtb	r0, r1
 8009ed0:	f7ff fee2 	bl	8009c98 <hex_char_to_num>
 8009ed4:	eb00 1107 	add.w	r1, r0, r7, lsl #4
                            b = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 8009ed8:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8009edc:	f7ff fedc 	bl	8009c98 <hex_char_to_num>
 8009ee0:	4607      	mov	r7, r0
 8009ee2:	f89d 0045 	ldrb.w	r0, [sp, #69]	; 0x45
 8009ee6:	f7ff fed7 	bl	8009c98 <hex_char_to_num>
 8009eea:	eb00 1007 	add.w	r0, r0, r7, lsl #4
                            recolor = LV_COLOR_MAKE(r, g, b);
 8009eee:	f360 0a07 	bfi	sl, r0, #0, #8
 8009ef2:	f361 2a0f 	bfi	sl, r1, #8, #8
 8009ef6:	f362 4a17 	bfi	sl, r2, #16, #8
 8009efa:	f04a 4a7f 	orr.w	sl, sl, #4278190080	; 0xff000000
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 8009efe:	2302      	movs	r3, #2
 8009f00:	e7b9      	b.n	8009e76 <lv_draw_label+0x1b2>
                            recolor.full = style->text.color.full;
 8009f02:	f8d4 a028 	ldr.w	sl, [r4, #40]	; 0x28
 8009f06:	e7fa      	b.n	8009efe <lv_draw_label+0x23a>
            if(cmd_state == CMD_STATE_IN) color = recolor;
 8009f08:	9b05      	ldr	r3, [sp, #20]
 8009f0a:	2b02      	cmp	r3, #2
 8009f0c:	d016      	beq.n	8009f3c <lv_draw_label+0x278>
            lv_color_t color = style->text.color;
 8009f0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
            letter_fp(&pos, mask, font, letter, color, opa);
 8009f10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f12:	a80e      	add	r0, sp, #56	; 0x38
 8009f14:	4f15      	ldr	r7, [pc, #84]	; (8009f6c <lv_draw_label+0x2a8>)
 8009f16:	9201      	str	r2, [sp, #4]
 8009f18:	464a      	mov	r2, r9
 8009f1a:	9300      	str	r3, [sp, #0]
 8009f1c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009f1e:	9b07      	ldr	r3, [sp, #28]
 8009f20:	683f      	ldr	r7, [r7, #0]
 8009f22:	47b8      	blx	r7
            letter_w = lv_font_get_width(font, letter);
 8009f24:	9907      	ldr	r1, [sp, #28]
 8009f26:	4648      	mov	r0, r9
 8009f28:	f003 fd52 	bl	800d9d0 <lv_font_get_width>
            pos.x += letter_w + style->text.letter_space;
 8009f2c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8009f30:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8009f32:	4413      	add	r3, r2
 8009f34:	4418      	add	r0, r3
 8009f36:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 8009f3a:	e751      	b.n	8009de0 <lv_draw_label+0x11c>
            if(cmd_state == CMD_STATE_IN) color = recolor;
 8009f3c:	4653      	mov	r3, sl
 8009f3e:	e7e7      	b.n	8009f10 <lv_draw_label+0x24c>
        else if(flag & LV_TXT_FLAG_RIGHT) {
 8009f40:	0733      	lsls	r3, r6, #28
 8009f42:	f57f af7a 	bpl.w	8009e3a <lv_draw_label+0x176>
            line_width = lv_txt_get_width(&txt[line_start], line_end - line_start,
 8009f46:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8009f4a:	464a      	mov	r2, r9
 8009f4c:	9600      	str	r6, [sp, #0]
 8009f4e:	4638      	mov	r0, r7
 8009f50:	f004 fafa 	bl	800e548 <lv_txt_get_width>
 8009f54:	88ab      	ldrh	r3, [r5, #4]
 8009f56:	882a      	ldrh	r2, [r5, #0]
 8009f58:	3301      	adds	r3, #1
 8009f5a:	1a9b      	subs	r3, r3, r2
            pos.x += lv_area_get_width(coords) - line_width;
 8009f5c:	b21b      	sxth	r3, r3
 8009f5e:	1a18      	subs	r0, r3, r0
 8009f60:	e766      	b.n	8009e30 <lv_draw_label+0x16c>
                        cmd_state = CMD_STATE_WAIT;
 8009f62:	2300      	movs	r3, #0
 8009f64:	9305      	str	r3, [sp, #20]
 8009f66:	e7d2      	b.n	8009f0e <lv_draw_label+0x24a>
 8009f68:	200000b0 	.word	0x200000b0
 8009f6c:	08083788 	.word	0x08083788

08009f70 <line_init>:
    }
}


static void line_init(line_draw_t * line, const lv_point_t * p1, const lv_point_t * p2)
{
 8009f70:	b530      	push	{r4, r5, lr}
    line->p1.x = p1->x;
 8009f72:	f9b1 5000 	ldrsh.w	r5, [r1]
    line->p1.y = p1->y;
 8009f76:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
    line->p1.x = p1->x;
 8009f7a:	8005      	strh	r5, [r0, #0]
    line->p2.x = p2->x;
 8009f7c:	f9b2 1000 	ldrsh.w	r1, [r2]
    line->p1.y = p1->y;
 8009f80:	8044      	strh	r4, [r0, #2]
    line->p2.y = p2->y;

    line->dx = LV_MATH_ABS(line->p2.x - line->p1.x);
 8009f82:	1b4b      	subs	r3, r1, r5
    line->p2.y = p2->y;
 8009f84:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
    line->p2.x = p2->x;
 8009f88:	8081      	strh	r1, [r0, #4]
    line->dx = LV_MATH_ABS(line->p2.x - line->p1.x);
 8009f8a:	2b00      	cmp	r3, #0
    line->p2.y = p2->y;
 8009f8c:	80c2      	strh	r2, [r0, #6]
    line->sy = line->p1.y < line->p2.y ? 1 : -1;
    line->err = (line->dx > line->dy ? line->dx : -line->dy) / 2;
    line->e2 = 0;
    line->hor = line->dx > line->dy ? true : false; /*Rather horizontal or vertical*/

    line->p_act.x = line->p1.x;
 8009f8e:	8105      	strh	r5, [r0, #8]
    line->dx = LV_MATH_ABS(line->p2.x - line->p1.x);
 8009f90:	bfb8      	it	lt
 8009f92:	425b      	neglt	r3, r3
    line->sx = line->p1.x < line->p2.x ? 1 : -1;
 8009f94:	428d      	cmp	r5, r1
 8009f96:	bfb4      	ite	lt
 8009f98:	2101      	movlt	r1, #1
 8009f9a:	f04f 31ff 	movge.w	r1, #4294967295
    line->p_act.y = line->p1.y;
 8009f9e:	8144      	strh	r4, [r0, #10]
    line->sx = line->p1.x < line->p2.x ? 1 : -1;
 8009fa0:	81c1      	strh	r1, [r0, #14]
    line->dy = LV_MATH_ABS(line->p2.y - line->p1.y);
 8009fa2:	1b11      	subs	r1, r2, r4
    line->dx = LV_MATH_ABS(line->p2.x - line->p1.x);
 8009fa4:	b21b      	sxth	r3, r3
    line->dy = LV_MATH_ABS(line->p2.y - line->p1.y);
 8009fa6:	2900      	cmp	r1, #0
    line->dx = LV_MATH_ABS(line->p2.x - line->p1.x);
 8009fa8:	8183      	strh	r3, [r0, #12]
    line->dy = LV_MATH_ABS(line->p2.y - line->p1.y);
 8009faa:	bfb8      	it	lt
 8009fac:	4249      	neglt	r1, r1
    line->sy = line->p1.y < line->p2.y ? 1 : -1;
 8009fae:	4294      	cmp	r4, r2
 8009fb0:	bfb4      	ite	lt
 8009fb2:	2201      	movlt	r2, #1
 8009fb4:	f04f 32ff 	movge.w	r2, #4294967295
    line->dy = LV_MATH_ABS(line->p2.y - line->p1.y);
 8009fb8:	b209      	sxth	r1, r1
    line->sy = line->p1.y < line->p2.y ? 1 : -1;
 8009fba:	8242      	strh	r2, [r0, #18]
 8009fbc:	2202      	movs	r2, #2
    line->err = (line->dx > line->dy ? line->dx : -line->dy) / 2;
 8009fbe:	428b      	cmp	r3, r1
    line->dy = LV_MATH_ABS(line->p2.y - line->p1.y);
 8009fc0:	8201      	strh	r1, [r0, #16]
    line->err = (line->dx > line->dy ? line->dx : -line->dy) / 2;
 8009fc2:	bfd7      	itett	le
 8009fc4:	fb91 f2f2 	sdivle	r2, r1, r2
 8009fc8:	fb93 f2f2 	sdivgt	r2, r3, r2
 8009fcc:	4252      	negle	r2, r2
 8009fce:	b212      	sxthle	r2, r2
    line->hor = line->dx > line->dy ? true : false; /*Rather horizontal or vertical*/
 8009fd0:	428b      	cmp	r3, r1
    line->err = (line->dx > line->dy ? line->dx : -line->dy) / 2;
 8009fd2:	8282      	strh	r2, [r0, #20]
    line->hor = line->dx > line->dy ? true : false; /*Rather horizontal or vertical*/
 8009fd4:	bfd8      	it	le
 8009fd6:	2300      	movle	r3, #0
    line->e2 = 0;
 8009fd8:	f04f 0200 	mov.w	r2, #0
    line->hor = line->dx > line->dy ? true : false; /*Rather horizontal or vertical*/
 8009fdc:	bfc8      	it	gt
 8009fde:	2301      	movgt	r3, #1
    line->e2 = 0;
 8009fe0:	82c2      	strh	r2, [r0, #22]
    line->hor = line->dx > line->dy ? true : false; /*Rather horizontal or vertical*/
 8009fe2:	7603      	strb	r3, [r0, #24]
    line->p_act.y = line->p1.y;
 8009fe4:	bd30      	pop	{r4, r5, pc}

08009fe6 <line_next>:
}

static bool line_next(line_draw_t * line)
{
    if(line->p_act.x == line->p2.x && line->p_act.y == line->p2.y) return false;
 8009fe6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8009fea:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8009fee:	428b      	cmp	r3, r1
{
 8009ff0:	b510      	push	{r4, lr}
    if(line->p_act.x == line->p2.x && line->p_act.y == line->p2.y) return false;
 8009ff2:	d105      	bne.n	800a000 <line_next+0x1a>
 8009ff4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8009ff8:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d01a      	beq.n	800a036 <line_next+0x50>
    line->e2 = line->err;
    if(line->e2 > -line->dx) {
 800a000:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    line->e2 = line->err;
 800a004:	f9b0 2014 	ldrsh.w	r2, [r0, #20]
    if(line->e2 > -line->dx) {
 800a008:	425c      	negs	r4, r3
    line->e2 = line->err;
 800a00a:	82c2      	strh	r2, [r0, #22]
    if(line->e2 > -line->dx) {
 800a00c:	42a2      	cmp	r2, r4
 800a00e:	dd05      	ble.n	800a01c <line_next+0x36>
        line->err -= line->dy;
 800a010:	8a04      	ldrh	r4, [r0, #16]
 800a012:	1b14      	subs	r4, r2, r4
 800a014:	8284      	strh	r4, [r0, #20]
        line->p_act.x += line->sx;
 800a016:	89c4      	ldrh	r4, [r0, #14]
 800a018:	4421      	add	r1, r4
 800a01a:	8101      	strh	r1, [r0, #8]
    }
    if(line->e2 < line->dy) {
 800a01c:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
 800a020:	4291      	cmp	r1, r2
 800a022:	dd06      	ble.n	800a032 <line_next+0x4c>
        line->err += line->dx;
 800a024:	8a82      	ldrh	r2, [r0, #20]
 800a026:	4413      	add	r3, r2
        line->p_act.y += line->sy;
 800a028:	8a42      	ldrh	r2, [r0, #18]
        line->err += line->dx;
 800a02a:	8283      	strh	r3, [r0, #20]
        line->p_act.y += line->sy;
 800a02c:	8943      	ldrh	r3, [r0, #10]
 800a02e:	4413      	add	r3, r2
 800a030:	8143      	strh	r3, [r0, #10]
    }
    return true;
 800a032:	2001      	movs	r0, #1
}
 800a034:	bd10      	pop	{r4, pc}
    if(line->p_act.x == line->p2.x && line->p_act.y == line->p2.y) return false;
 800a036:	2000      	movs	r0, #0
 800a038:	bd10      	pop	{r4, pc}
	...

0800a03c <lv_draw_line>:
{
 800a03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a040:	b09d      	sub	sp, #116	; 0x74
 800a042:	461d      	mov	r5, r3
 800a044:	4690      	mov	r8, r2
 800a046:	af02      	add	r7, sp, #8
    if(style->line.width == 0) return;
 800a048:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
{
 800a04c:	f897 9090 	ldrb.w	r9, [r7, #144]	; 0x90
    if(style->line.width == 0) return;
 800a050:	2b00      	cmp	r3, #0
 800a052:	d06d      	beq.n	800a130 <lv_draw_line+0xf4>
    if(point1->x == point2->x && point1->y == point2->y) return;
 800a054:	f9b1 4000 	ldrsh.w	r4, [r1]
 800a058:	f9b0 2000 	ldrsh.w	r2, [r0]
 800a05c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800a060:	42a2      	cmp	r2, r4
 800a062:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800a066:	d101      	bne.n	800a06c <lv_draw_line+0x30>
 800a068:	428b      	cmp	r3, r1
 800a06a:	d061      	beq.n	800a130 <lv_draw_line+0xf4>
    if(LV_MATH_ABS(point1->x - point2->x) > LV_MATH_ABS(point1->y - point2->y)) {
 800a06c:	1b16      	subs	r6, r2, r4
 800a06e:	1a58      	subs	r0, r3, r1
 800a070:	2e00      	cmp	r6, #0
 800a072:	bfb8      	it	lt
 800a074:	4276      	neglt	r6, r6
 800a076:	2800      	cmp	r0, #0
 800a078:	bfb8      	it	lt
 800a07a:	4240      	neglt	r0, r0
 800a07c:	4286      	cmp	r6, r0
 800a07e:	dd5b      	ble.n	800a138 <lv_draw_line+0xfc>
        if(point1->x < point2->x) {
 800a080:	42a2      	cmp	r2, r4
            p1.x = point1->x;
 800a082:	bfb8      	it	lt
 800a084:	843a      	strhlt	r2, [r7, #32]
    line_init(&main_line, &p1, &p2);
 800a086:	f107 0030 	add.w	r0, r7, #48	; 0x30
            p2.y = point2->y;
 800a08a:	bfb4      	ite	lt
 800a08c:	84f9      	strhlt	r1, [r7, #38]	; 0x26
            p1.y = point2->y;
 800a08e:	8479      	strhge	r1, [r7, #34]	; 0x22
    line_init(&main_line, &p1, &p2);
 800a090:	f107 0120 	add.w	r1, r7, #32
            p2.x = point1->x;
 800a094:	bfa8      	it	ge
 800a096:	84ba      	strhge	r2, [r7, #36]	; 0x24
    line_init(&main_line, &p1, &p2);
 800a098:	f107 0224 	add.w	r2, r7, #36	; 0x24
            p1.y = point1->y;
 800a09c:	bfb5      	itete	lt
 800a09e:	847b      	strhlt	r3, [r7, #34]	; 0x22
            p2.y = point1->y;
 800a0a0:	84fb      	strhge	r3, [r7, #38]	; 0x26
            p2.x = point2->x;
 800a0a2:	84bc      	strhlt	r4, [r7, #36]	; 0x24
            p1.x = point2->x;
 800a0a4:	843c      	strhge	r4, [r7, #32]
    line_init(&main_line, &p1, &p2);
 800a0a6:	f7ff ff63 	bl	8009f70 <line_init>
    if(main_line.p1.y == main_line.p2.y) {
 800a0aa:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 800a0ae:	f9b7 c036 	ldrsh.w	ip, [r7, #54]	; 0x36
 800a0b2:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 800a0b6:	4561      	cmp	r1, ip
 800a0b8:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 800a0bc:	f9b7 a034 	ldrsh.w	sl, [r7, #52]	; 0x34
 800a0c0:	d13c      	bne.n	800a13c <lv_draw_line+0x100>
    lv_coord_t width = style->line.width - 1;
 800a0c2:	f8b5 4044 	ldrh.w	r4, [r5, #68]	; 0x44
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t) style->line.opa * opa_scale) >> 8;
 800a0c6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    lv_coord_t width = style->line.width - 1;
 800a0ca:	f104 34ff 	add.w	r4, r4, #4294967295
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t) style->line.opa * opa_scale) >> 8;
 800a0ce:	bf18      	it	ne
 800a0d0:	fb03 f309 	mulne.w	r3, r3, r9
    lv_coord_t width = style->line.width - 1;
 800a0d4:	b224      	sxth	r4, r4
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t) style->line.opa * opa_scale) >> 8;
 800a0d6:	bf18      	it	ne
 800a0d8:	f3c3 2307 	ubfxne	r3, r3, #8, #8
    draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
 800a0dc:	4552      	cmp	r2, sl
    lv_coord_t width_half = width >> 1;
 800a0de:	ea4f 0064 	mov.w	r0, r4, asr #1
    lv_coord_t width_1 = width & 0x1;
 800a0e2:	f004 0601 	and.w	r6, r4, #1
    act_area.y1 = line->p1.y - width_half - width_1;
 800a0e6:	b280      	uxth	r0, r0
 800a0e8:	eba1 0100 	sub.w	r1, r1, r0
    act_area.y2 = line->p2.y + width_half ;
 800a0ec:	4460      	add	r0, ip
    act_area.y1 = line->p1.y - width_half - width_1;
 800a0ee:	eba1 0106 	sub.w	r1, r1, r6
    act_area.y2 = line->p2.y + width_half ;
 800a0f2:	fa0f fc80 	sxth.w	ip, r0
    draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
 800a0f6:	4610      	mov	r0, r2
 800a0f8:	bfa8      	it	ge
 800a0fa:	4650      	movge	r0, sl
    act_area.y1 = line->p1.y - width_half - width_1;
 800a0fc:	b209      	sxth	r1, r1
    draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
 800a0fe:	4552      	cmp	r2, sl
    draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
 800a100:	f8a7 004c 	strh.w	r0, [r7, #76]	; 0x4c
    draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
 800a104:	bfb8      	it	lt
 800a106:	4652      	movlt	r2, sl
    draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
 800a108:	4561      	cmp	r1, ip
    draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
 800a10a:	f8a7 2050 	strh.w	r2, [r7, #80]	; 0x50
    draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
 800a10e:	460a      	mov	r2, r1
 800a110:	bfa8      	it	ge
 800a112:	4662      	movge	r2, ip
    draw_area.y2 = LV_MATH_MAX(act_area.y1, act_area.y2);
 800a114:	458c      	cmp	ip, r1
 800a116:	bfb8      	it	lt
 800a118:	468c      	movlt	ip, r1
    draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
 800a11a:	f8a7 204e 	strh.w	r2, [r7, #78]	; 0x4e
    draw_area.y2 = LV_MATH_MAX(act_area.y1, act_area.y2);
 800a11e:	f8a7 c052 	strh.w	ip, [r7, #82]	; 0x52
    fill_fp(&draw_area, mask, style->line.color, opa);
 800a122:	4cb4      	ldr	r4, [pc, #720]	; (800a3f4 <lv_draw_line+0x3b8>)
 800a124:	4641      	mov	r1, r8
 800a126:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800a128:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800a12c:	6824      	ldr	r4, [r4, #0]
 800a12e:	47a0      	blx	r4
}
 800a130:	376c      	adds	r7, #108	; 0x6c
 800a132:	46bd      	mov	sp, r7
 800a134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(point1->y < point2->y) {
 800a138:	428b      	cmp	r3, r1
 800a13a:	e7a2      	b.n	800a082 <lv_draw_line+0x46>
    else if(main_line.p1.x == main_line.p2.x) {
 800a13c:	4552      	cmp	r2, sl
 800a13e:	d12e      	bne.n	800a19e <lv_draw_line+0x162>
    lv_coord_t width = style->line.width - 1;
 800a140:	f8b5 6044 	ldrh.w	r6, [r5, #68]	; 0x44
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t) style->line.opa * opa_scale) >> 8;
 800a144:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    lv_coord_t width = style->line.width - 1;
 800a148:	f106 36ff 	add.w	r6, r6, #4294967295
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t) style->line.opa * opa_scale) >> 8;
 800a14c:	bf18      	it	ne
 800a14e:	fb03 f309 	mulne.w	r3, r3, r9
    lv_coord_t width = style->line.width - 1;
 800a152:	b236      	sxth	r6, r6
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t) style->line.opa * opa_scale) >> 8;
 800a154:	bf18      	it	ne
 800a156:	f3c3 2307 	ubfxne	r3, r3, #8, #8
    lv_coord_t width_half = width >> 1;
 800a15a:	ea4f 0e66 	mov.w	lr, r6, asr #1
    lv_coord_t width_1 = width & 0x1;
 800a15e:	f006 0b01 	and.w	fp, r6, #1
    act_area.x1 = line->p1.x - width_half;
 800a162:	fa1f f68e 	uxth.w	r6, lr
 800a166:	1b92      	subs	r2, r2, r6
    act_area.x2 = line->p2.x + width_half + width_1;
 800a168:	445e      	add	r6, fp
 800a16a:	4456      	add	r6, sl
    act_area.x1 = line->p1.x - width_half;
 800a16c:	b212      	sxth	r2, r2
    act_area.x2 = line->p2.x + width_half + width_1;
 800a16e:	b230      	sxth	r0, r6
    draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
 800a170:	4614      	mov	r4, r2
 800a172:	4282      	cmp	r2, r0
 800a174:	bfa8      	it	ge
 800a176:	4604      	movge	r4, r0
    draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
 800a178:	4282      	cmp	r2, r0
 800a17a:	bfb8      	it	lt
 800a17c:	4602      	movlt	r2, r0
    draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
 800a17e:	4561      	cmp	r1, ip
    draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
 800a180:	f8a7 404c 	strh.w	r4, [r7, #76]	; 0x4c
    draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
 800a184:	f8a7 2050 	strh.w	r2, [r7, #80]	; 0x50
    draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
 800a188:	460a      	mov	r2, r1
 800a18a:	bfa8      	it	ge
 800a18c:	4662      	movge	r2, ip
    draw_area.y2 = LV_MATH_MAX(act_area.y1, act_area.y2);
 800a18e:	4561      	cmp	r1, ip
 800a190:	bfb8      	it	lt
 800a192:	4661      	movlt	r1, ip
    draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
 800a194:	f8a7 204e 	strh.w	r2, [r7, #78]	; 0x4e
    draw_area.y2 = LV_MATH_MAX(act_area.y1, act_area.y2);
 800a198:	f8a7 1052 	strh.w	r1, [r7, #82]	; 0x52
 800a19c:	e7c1      	b.n	800a122 <lv_draw_line+0xe6>
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t) style->line.opa * opa_scale) >> 8;
 800a19e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    vect_main.x = main_line->p2.x - main_line->p1.x;
 800a1a2:	ebaa 0602 	sub.w	r6, sl, r2
{
 800a1a6:	f8c7 d000 	str.w	sp, [r7]
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t) style->line.opa * opa_scale) >> 8;
 800a1aa:	bf18      	it	ne
 800a1ac:	fb03 f409 	mulne.w	r4, r3, r9
    vect_main.x = main_line->p2.x - main_line->p1.x;
 800a1b0:	b2b6      	uxth	r6, r6
    if(main_line->hor) {
 800a1b2:	f897 9048 	ldrb.w	r9, [r7, #72]	; 0x48
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t) style->line.opa * opa_scale) >> 8;
 800a1b6:	bf18      	it	ne
 800a1b8:	f3c4 2307 	ubfxne	r3, r4, #8, #8
    vect_main.x = main_line->p2.x - main_line->p1.x;
 800a1bc:	b230      	sxth	r0, r6
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t) style->line.opa * opa_scale) >> 8;
 800a1be:	61fb      	str	r3, [r7, #28]
    vect_main.y = main_line->p2.y - main_line->p1.y;
 800a1c0:	ebac 0301 	sub.w	r3, ip, r1
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	fa0f fe83 	sxth.w	lr, r3
    if(main_line->hor) {
 800a1ca:	f1b9 0f00 	cmp.w	r9, #0
 800a1ce:	d005      	beq.n	800a1dc <lv_draw_line+0x1a0>
        if(main_line->p1.y < main_line->p2.y) {
 800a1d0:	4561      	cmp	r1, ip
 800a1d2:	da05      	bge.n	800a1e0 <lv_draw_line+0x1a4>
            vect_norm.x = - vect_main.y;
 800a1d4:	425b      	negs	r3, r3
            vect_norm.y = vect_main.x;
 800a1d6:	8578      	strh	r0, [r7, #42]	; 0x2a
            vect_norm.x = - vect_main.y;
 800a1d8:	853b      	strh	r3, [r7, #40]	; 0x28
 800a1da:	e005      	b.n	800a1e8 <lv_draw_line+0x1ac>
        if(main_line->p1.x < main_line->p2.x) {
 800a1dc:	4552      	cmp	r2, sl
 800a1de:	daf9      	bge.n	800a1d4 <lv_draw_line+0x198>
            vect_norm.y = - vect_main.x;
 800a1e0:	4276      	negs	r6, r6
            vect_norm.x = vect_main.y;
 800a1e2:	f8a7 e028 	strh.w	lr, [r7, #40]	; 0x28
            vect_norm.y = - vect_main.x;
 800a1e6:	857e      	strh	r6, [r7, #42]	; 0x2a
    vect_norm.x = vect_norm.x << 4;
 800a1e8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800a1ec:	011b      	lsls	r3, r3, #4
 800a1ee:	853b      	strh	r3, [r7, #40]	; 0x28
    vect_norm.y = vect_norm.y << 4;
 800a1f0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800a1f4:	011b      	lsls	r3, r3, #4
 800a1f6:	857b      	strh	r3, [r7, #42]	; 0x2a
    width = style->line.width;
 800a1f8:	f9b5 3044 	ldrsh.w	r3, [r5, #68]	; 0x44
    lv_point_t pattern[width * 2];
 800a1fc:	ea4f 09c3 	mov.w	r9, r3, lsl #3
    width = style->line.width;
 800a200:	61bb      	str	r3, [r7, #24]
    lv_point_t pattern[width * 2];
 800a202:	f109 0308 	add.w	r3, r9, #8
 800a206:	ebad 0d03 	sub.w	sp, sp, r3
    if(width != 0) {
 800a20a:	69bb      	ldr	r3, [r7, #24]
    lv_point_t pattern[width * 2];
 800a20c:	f10d 0b08 	add.w	fp, sp, #8
    if(width != 0) {
 800a210:	2b00      	cmp	r3, #0
 800a212:	f000 80e9 	beq.w	800a3e8 <lv_draw_line+0x3ac>
        lv_point_t p0 = {0, 0};
 800a216:	2600      	movs	r6, #0
        line_init(&pattern_line, &p0, &vect_norm);
 800a218:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800a21c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800a220:	f107 004c 	add.w	r0, r7, #76	; 0x4c
        lv_point_t p0 = {0, 0};
 800a224:	85be      	strh	r6, [r7, #44]	; 0x2c
        for(i = 0; i < (lv_coord_t)sizeof(pattern); i ++) {
 800a226:	fa0f f989 	sxth.w	r9, r9
        lv_point_t p0 = {0, 0};
 800a22a:	85fe      	strh	r6, [r7, #46]	; 0x2e
        line_init(&pattern_line, &p0, &vect_norm);
 800a22c:	f7ff fea0 	bl	8009f70 <line_init>
        uint32_t width_sqr = width * width;
 800a230:	69bb      	ldr	r3, [r7, #24]
 800a232:	fb03 fa03 	mul.w	sl, r3, r3
        for(i = 0; i < (lv_coord_t)sizeof(pattern); i ++) {
 800a236:	b233      	sxth	r3, r6
 800a238:	454b      	cmp	r3, r9
 800a23a:	f2c0 80b2 	blt.w	800a3a2 <lv_draw_line+0x366>
 800a23e:	f1ab 0304 	sub.w	r3, fp, #4
 800a242:	69ba      	ldr	r2, [r7, #24]
 800a244:	617b      	str	r3, [r7, #20]
 800a246:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
                        lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x, main_line->p2.y + pattern[aa_last_corner].y + 1,
 800a24a:	2300      	movs	r3, #0
 800a24c:	60ba      	str	r2, [r7, #8]
 800a24e:	60fb      	str	r3, [r7, #12]
 800a250:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
    for(i = 0; i < width; i++) {
 800a254:	69b9      	ldr	r1, [r7, #24]
 800a256:	613a      	str	r2, [r7, #16]
 800a258:	428a      	cmp	r2, r1
 800a25a:	f2c0 80cd 	blt.w	800a3f8 <lv_draw_line+0x3bc>
 800a25e:	6179      	str	r1, [r7, #20]
 800a260:	69bc      	ldr	r4, [r7, #24]
 800a262:	009a      	lsls	r2, r3, #2
    if(main_line->hor) {
 800a264:	f897 0048 	ldrb.w	r0, [r7, #72]	; 0x48
 800a268:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 800a26a:	1e66      	subs	r6, r4, #1
 800a26c:	2800      	cmp	r0, #0
 800a26e:	f000 81ab 	beq.w	800a5c8 <lv_draw_line+0x58c>
 800a272:	445a      	add	r2, fp
        lv_coord_t seg_w = pattern[width_safe - 1].y - pattern[aa_last_corner].y;
 800a274:	eb0b 0686 	add.w	r6, fp, r6, lsl #2
 800a278:	f83b a023 	ldrh.w	sl, [fp, r3, lsl #2]
 800a27c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a280:	8876      	ldrh	r6, [r6, #2]
        if(main_line->sy < 0) {
 800a282:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
            lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1, main_line->p1.y + pattern[aa_last_corner].y + seg_w,
 800a286:	4449      	add	r1, r9
        lv_coord_t seg_w = pattern[width_safe - 1].y - pattern[aa_last_corner].y;
 800a288:	eba6 0609 	sub.w	r6, r6, r9
        if(main_line->sy < 0) {
 800a28c:	2a00      	cmp	r2, #0
        lv_coord_t seg_w = pattern[width_safe - 1].y - pattern[aa_last_corner].y;
 800a28e:	b2b6      	uxth	r6, r6
 800a290:	4432      	add	r2, r6
        if(main_line->sy < 0) {
 800a292:	f280 817b 	bge.w	800a58c <lv_draw_line+0x550>
            lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1, main_line->p1.y + pattern[aa_last_corner].y + seg_w,
 800a296:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 800a298:	4431      	add	r1, r6
 800a29a:	69fb      	ldr	r3, [r7, #28]
 800a29c:	b212      	sxth	r2, r2
 800a29e:	3801      	subs	r0, #1
 800a2a0:	b209      	sxth	r1, r1
 800a2a2:	9301      	str	r3, [sp, #4]
 800a2a4:	4450      	add	r0, sl
 800a2a6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800a2a8:	b200      	sxth	r0, r0
 800a2aa:	9300      	str	r3, [sp, #0]
 800a2ac:	4643      	mov	r3, r8
 800a2ae:	f7ff fa87 	bl	80097c0 <lv_draw_aa_ver_seg>
            lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1, main_line->p2.y + pattern[aa_last_corner].y + seg_w,
 800a2b2:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
                               -(seg_w + main_line->sy), mask, style->line.color, opa);
 800a2b4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
            lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1, main_line->p2.y + pattern[aa_last_corner].y + seg_w,
 800a2b8:	8eb8      	ldrh	r0, [r7, #52]	; 0x34
 800a2ba:	4489      	add	r9, r1
 800a2bc:	69fb      	ldr	r3, [r7, #28]
                               -(seg_w + main_line->sy), mask, style->line.color, opa);
 800a2be:	4432      	add	r2, r6
            lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1, main_line->p2.y + pattern[aa_last_corner].y + seg_w,
 800a2c0:	44b1      	add	r9, r6
 800a2c2:	3001      	adds	r0, #1
 800a2c4:	4252      	negs	r2, r2
 800a2c6:	9301      	str	r3, [sp, #4]
 800a2c8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800a2ca:	4450      	add	r0, sl
 800a2cc:	b212      	sxth	r2, r2
 800a2ce:	9300      	str	r3, [sp, #0]
 800a2d0:	fa0f f189 	sxth.w	r1, r9
 800a2d4:	4643      	mov	r3, r8
            lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1, main_line->p2.y + pattern[aa_last_corner].y,
 800a2d6:	b200      	sxth	r0, r0
 800a2d8:	f7ff fa72 	bl	80097c0 <lv_draw_aa_ver_seg>
    if(main_line->hor == false) {
 800a2dc:	f897 6048 	ldrb.w	r6, [r7, #72]	; 0x48
 800a2e0:	2e00      	cmp	r6, #0
 800a2e2:	f040 81c0 	bne.w	800a666 <lv_draw_line+0x62a>
        if(main_line->sx < 0) {
 800a2e6:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
        if(main_line->sy < 0) {
 800a2ea:	2b00      	cmp	r3, #0
            aa_shift2 = width == 0 ? 0 : aa_shift1;
 800a2ec:	697b      	ldr	r3, [r7, #20]
        if(main_line->sy < 0) {
 800a2ee:	f280 81bd 	bge.w	800a66c <lv_draw_line+0x630>
            aa_shift2 = width == 0 ? 0 : aa_shift1;
 800a2f2:	1c19      	adds	r1, r3, #0
 800a2f4:	bf18      	it	ne
 800a2f6:	2101      	movne	r1, #1
 800a2f8:	424b      	negs	r3, r1
 800a2fa:	60fb      	str	r3, [r7, #12]
            aa_shift1 = -1;
 800a2fc:	f04f 33ff 	mov.w	r3, #4294967295
 800a300:	613b      	str	r3, [r7, #16]
    prev_p.x = main_line->p1.x;
 800a302:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800a306:	85bb      	strh	r3, [r7, #44]	; 0x2c
    prev_p.y = main_line->p1.y;
 800a308:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800a30c:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(main_line->hor) {
 800a30e:	2e00      	cmp	r6, #0
 800a310:	f040 822d 	bne.w	800a76e <lv_draw_line+0x732>
 800a314:	2301      	movs	r3, #1
 * @param line
 * @return
 */
static bool line_next_x(line_draw_t * line)
{
    lv_coord_t last_x = line->p_act.x;
 800a316:	f9b7 6038 	ldrsh.w	r6, [r7, #56]	; 0x38
            first_run = false;
 800a31a:	60bb      	str	r3, [r7, #8]

    do {
        if(!line_next(line)) return false;
 800a31c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800a320:	f7ff fe61 	bl	8009fe6 <line_next>
 800a324:	2800      	cmp	r0, #0
 800a326:	f040 8326 	bne.w	800a976 <lv_draw_line+0x93a>
 800a32a:	46d9      	mov	r9, fp
 800a32c:	4682      	mov	sl, r0
        for(i = 0; i < width; i++) {
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	fa0f f68a 	sxth.w	r6, sl
 800a334:	429e      	cmp	r6, r3
            draw_area.x1 = prev_p.x + pattern[i].x;
 800a336:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
        for(i = 0; i < width; i++) {
 800a338:	f2c0 8325 	blt.w	800a986 <lv_draw_line+0x94a>
        lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
 800a33c:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
                           -(main_line->p_act.y - prev_p.y + 1), mask, style->line.color, opa);
 800a33e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a340:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 800a342:	1a12      	subs	r2, r2, r0
        lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
 800a344:	f8bb 0002 	ldrh.w	r0, [fp, #2]
 800a348:	4401      	add	r1, r0
 800a34a:	f8bb 0000 	ldrh.w	r0, [fp]
 800a34e:	43d2      	mvns	r2, r2
 800a350:	4418      	add	r0, r3
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	b212      	sxth	r2, r2
 800a356:	1ac0      	subs	r0, r0, r3
 800a358:	69fb      	ldr	r3, [r7, #28]
 800a35a:	b209      	sxth	r1, r1
 800a35c:	9301      	str	r3, [sp, #4]
 800a35e:	b200      	sxth	r0, r0
 800a360:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800a362:	9300      	str	r3, [sp, #0]
 800a364:	4643      	mov	r3, r8
 800a366:	f7ff fa2b 	bl	80097c0 <lv_draw_aa_ver_seg>
 800a36a:	69ba      	ldr	r2, [r7, #24]
        lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2, prev_p.y + pattern[width_safe - 1].y,
 800a36c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a36e:	eb0b 0082 	add.w	r0, fp, r2, lsl #2
                           main_line->p_act.y - prev_p.y + 1, mask, style->line.color, opa);
 800a372:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
        lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2, prev_p.y + pattern[width_safe - 1].y,
 800a374:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
                           main_line->p_act.y - prev_p.y + 1, mask, style->line.color, opa);
 800a376:	3201      	adds	r2, #1
 800a378:	8dfe      	ldrh	r6, [r7, #46]	; 0x2e
 800a37a:	1b92      	subs	r2, r2, r6
        lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2, prev_p.y + pattern[width_safe - 1].y,
 800a37c:	f830 6c02 	ldrh.w	r6, [r0, #-2]
 800a380:	f830 0c04 	ldrh.w	r0, [r0, #-4]
 800a384:	4431      	add	r1, r6
 800a386:	b212      	sxth	r2, r2
 800a388:	4418      	add	r0, r3
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	b209      	sxth	r1, r1
 800a38e:	4418      	add	r0, r3
 800a390:	69fb      	ldr	r3, [r7, #28]
 800a392:	9301      	str	r3, [sp, #4]
 800a394:	b200      	sxth	r0, r0
 800a396:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800a398:	9300      	str	r3, [sp, #0]
 800a39a:	4643      	mov	r3, r8
 800a39c:	f7ff fa10 	bl	80097c0 <lv_draw_aa_ver_seg>
 800a3a0:	e229      	b.n	800a7f6 <lv_draw_line+0x7ba>
            pattern[i].x = pattern_line.p_act.x;
 800a3a2:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
            pattern[i].y = pattern_line.p_act.y;
 800a3a6:	eb0b 0186 	add.w	r1, fp, r6, lsl #2
 800a3aa:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
            pattern[i].x = pattern_line.p_act.x;
 800a3ae:	f82b 3026 	strh.w	r3, [fp, r6, lsl #2]
            pattern[i].y = pattern_line.p_act.y;
 800a3b2:	804a      	strh	r2, [r1, #2]
 800a3b4:	1c71      	adds	r1, r6, #1
            uint32_t  sqr = pattern_line.p_act.x * pattern_line.p_act.x + pattern_line.p_act.y * pattern_line.p_act.y;
 800a3b6:	4352      	muls	r2, r2
 800a3b8:	fb03 2303 	mla	r3, r3, r3, r2
            if(sqr >= width_sqr) {
 800a3bc:	459a      	cmp	sl, r3
 800a3be:	d80b      	bhi.n	800a3d8 <lv_draw_line+0x39c>
                width--;
 800a3c0:	3e01      	subs	r6, #1
 800a3c2:	b233      	sxth	r3, r6
 800a3c4:	61bb      	str	r3, [r7, #24]
    if(width == 0) width_safe = 1;
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	f47f af39 	bne.w	800a23e <lv_draw_line+0x202>
    for(i = 0; i < width; i++) {
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	617b      	str	r3, [r7, #20]
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	61bb      	str	r3, [r7, #24]
    aa_last_corner = 0;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	e743      	b.n	800a260 <lv_draw_line+0x224>
            line_next(&pattern_line);
 800a3d8:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800a3dc:	6179      	str	r1, [r7, #20]
 800a3de:	f7ff fe02 	bl	8009fe6 <line_next>
 800a3e2:	6979      	ldr	r1, [r7, #20]
 800a3e4:	460e      	mov	r6, r1
 800a3e6:	e726      	b.n	800a236 <lv_draw_line+0x1fa>
        pattern[0].x = 0;
 800a3e8:	8b3b      	ldrh	r3, [r7, #24]
 800a3ea:	f8ab 3000 	strh.w	r3, [fp]
        pattern[0].y = 0;
 800a3ee:	f8ab 3002 	strh.w	r3, [fp, #2]
 800a3f2:	e7eb      	b.n	800a3cc <lv_draw_line+0x390>
 800a3f4:	08083784 	.word	0x08083784
        pattern[i].x -= pattern[width - 1].x / 2;
 800a3f8:	68ba      	ldr	r2, [r7, #8]
        pattern[i].y -= pattern[width - 1].y / 2;
 800a3fa:	2002      	movs	r0, #2
        pattern[i].x -= pattern[width - 1].x / 2;
 800a3fc:	6979      	ldr	r1, [r7, #20]
 800a3fe:	f932 6c04 	ldrsh.w	r6, [r2, #-4]
 800a402:	2202      	movs	r2, #2
        pattern[i].y -= pattern[width - 1].y / 2;
 800a404:	697c      	ldr	r4, [r7, #20]
        pattern[i].x -= pattern[width - 1].x / 2;
 800a406:	fb96 f2f2 	sdiv	r2, r6, r2
 800a40a:	888e      	ldrh	r6, [r1, #4]
 800a40c:	1ab6      	subs	r6, r6, r2
 800a40e:	b2b6      	uxth	r6, r6
 800a410:	b232      	sxth	r2, r6
 800a412:	808a      	strh	r2, [r1, #4]
        pattern[i].y -= pattern[width - 1].y / 2;
 800a414:	68b9      	ldr	r1, [r7, #8]
 800a416:	f931 1c02 	ldrsh.w	r1, [r1, #-2]
 800a41a:	fb91 f0f0 	sdiv	r0, r1, r0
 800a41e:	6979      	ldr	r1, [r7, #20]
 800a420:	88c9      	ldrh	r1, [r1, #6]
 800a422:	1a09      	subs	r1, r1, r0
 800a424:	b289      	uxth	r1, r1
 800a426:	b208      	sxth	r0, r1
 800a428:	80e0      	strh	r0, [r4, #6]
        if(i != 0) {
 800a42a:	693c      	ldr	r4, [r7, #16]
 800a42c:	2c00      	cmp	r4, #0
 800a42e:	d03b      	beq.n	800a4a8 <lv_draw_line+0x46c>
            if(main_line->hor) {
 800a430:	f897 e048 	ldrb.w	lr, [r7, #72]	; 0x48
 800a434:	f1be 0f00 	cmp.w	lr, #0
 800a438:	d058      	beq.n	800a4ec <lv_draw_line+0x4b0>
                if(pattern[i - 1].x != pattern[i].x) {
 800a43a:	6978      	ldr	r0, [r7, #20]
 800a43c:	f9b0 0000 	ldrsh.w	r0, [r0]
 800a440:	4290      	cmp	r0, r2
 800a442:	d031      	beq.n	800a4a8 <lv_draw_line+0x46c>
 800a444:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
 800a448:	f83b a023 	ldrh.w	sl, [fp, r3, lsl #2]
                    lv_coord_t seg_w = pattern[i].y - pattern[aa_last_corner].y;
 800a44c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a450:	eba1 0109 	sub.w	r1, r1, r9
 800a454:	b28e      	uxth	r6, r1
                    if(main_line->sy < 0) {
 800a456:	f9b7 1042 	ldrsh.w	r1, [r7, #66]	; 0x42
 800a45a:	2900      	cmp	r1, #0
                    lv_coord_t seg_w = pattern[i].y - pattern[aa_last_corner].y;
 800a45c:	b232      	sxth	r2, r6
 800a45e:	8e79      	ldrh	r1, [r7, #50]	; 0x32
                    if(main_line->sy < 0) {
 800a460:	da29      	bge.n	800a4b6 <lv_draw_line+0x47a>
                        lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1, main_line->p1.y + pattern[aa_last_corner].y + seg_w + 1,
 800a462:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 800a464:	3101      	adds	r1, #1
 800a466:	69fb      	ldr	r3, [r7, #28]
 800a468:	4449      	add	r1, r9
 800a46a:	3801      	subs	r0, #1
 800a46c:	9301      	str	r3, [sp, #4]
 800a46e:	4431      	add	r1, r6
 800a470:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800a472:	4450      	add	r0, sl
 800a474:	9300      	str	r3, [sp, #0]
 800a476:	b209      	sxth	r1, r1
 800a478:	4643      	mov	r3, r8
 800a47a:	b200      	sxth	r0, r0
 800a47c:	f7ff f9a0 	bl	80097c0 <lv_draw_aa_ver_seg>
                        lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1, main_line->p2.y + pattern[aa_last_corner].y + seg_w + 1,
 800a480:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800a482:	8eb8      	ldrh	r0, [r7, #52]	; 0x34
 800a484:	4272      	negs	r2, r6
 800a486:	3101      	adds	r1, #1
 800a488:	69fb      	ldr	r3, [r7, #28]
 800a48a:	3001      	adds	r0, #1
 800a48c:	b212      	sxth	r2, r2
 800a48e:	4489      	add	r9, r1
 800a490:	9301      	str	r3, [sp, #4]
 800a492:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800a494:	4450      	add	r0, sl
 800a496:	44b1      	add	r9, r6
 800a498:	9300      	str	r3, [sp, #0]
 800a49a:	4643      	mov	r3, r8
 800a49c:	fa0f f189 	sxth.w	r1, r9
                        lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1, main_line->p2.y + pattern[aa_last_corner].y,
 800a4a0:	b200      	sxth	r0, r0
 800a4a2:	f7ff f98d 	bl	80097c0 <lv_draw_aa_ver_seg>
                        lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x, main_line->p2.y + pattern[aa_last_corner].y + 1,
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	68fa      	ldr	r2, [r7, #12]
 800a4aa:	3201      	adds	r2, #1
 800a4ac:	60fa      	str	r2, [r7, #12]
 800a4ae:	697a      	ldr	r2, [r7, #20]
 800a4b0:	3204      	adds	r2, #4
 800a4b2:	617a      	str	r2, [r7, #20]
 800a4b4:	e6cc      	b.n	800a250 <lv_draw_line+0x214>
                        lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1, main_line->p1.y + pattern[aa_last_corner].y,
 800a4b6:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 800a4b8:	4449      	add	r1, r9
 800a4ba:	69fb      	ldr	r3, [r7, #28]
 800a4bc:	3801      	subs	r0, #1
 800a4be:	b209      	sxth	r1, r1
 800a4c0:	9301      	str	r3, [sp, #4]
 800a4c2:	4450      	add	r0, sl
 800a4c4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800a4c6:	b200      	sxth	r0, r0
 800a4c8:	9300      	str	r3, [sp, #0]
 800a4ca:	4643      	mov	r3, r8
 800a4cc:	f7ff f978 	bl	80097c0 <lv_draw_aa_ver_seg>
                        lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1, main_line->p2.y + pattern[aa_last_corner].y,
 800a4d0:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800a4d2:	8eb8      	ldrh	r0, [r7, #52]	; 0x34
 800a4d4:	4272      	negs	r2, r6
 800a4d6:	69fb      	ldr	r3, [r7, #28]
 800a4d8:	4449      	add	r1, r9
 800a4da:	3001      	adds	r0, #1
 800a4dc:	b212      	sxth	r2, r2
 800a4de:	9301      	str	r3, [sp, #4]
 800a4e0:	b209      	sxth	r1, r1
 800a4e2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800a4e4:	4450      	add	r0, sl
 800a4e6:	9300      	str	r3, [sp, #0]
 800a4e8:	4643      	mov	r3, r8
 800a4ea:	e7d9      	b.n	800a4a0 <lv_draw_line+0x464>
                if(pattern[i - 1].y != pattern[i].y) {
 800a4ec:	697a      	ldr	r2, [r7, #20]
 800a4ee:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800a4f2:	4282      	cmp	r2, r0
 800a4f4:	d0d8      	beq.n	800a4a8 <lv_draw_line+0x46c>
                    lv_coord_t seg_w = pattern[i].x - pattern[aa_last_corner].x;
 800a4f6:	f83b 9023 	ldrh.w	r9, [fp, r3, lsl #2]
 800a4fa:	eb0b 0083 	add.w	r0, fp, r3, lsl #2
 800a4fe:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 800a500:	eba6 0609 	sub.w	r6, r6, r9
                    if(main_line->sx < 0) {
 800a504:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800a508:	f8b0 a002 	ldrh.w	sl, [r0, #2]
                        lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w + 1, main_line->p1.y + pattern[aa_last_corner].y - 1,
 800a50c:	3901      	subs	r1, #1
                    lv_coord_t seg_w = pattern[i].x - pattern[aa_last_corner].x;
 800a50e:	b2b6      	uxth	r6, r6
                    if(main_line->sx < 0) {
 800a510:	2b00      	cmp	r3, #0
                        lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w + 1, main_line->p1.y + pattern[aa_last_corner].y - 1,
 800a512:	4451      	add	r1, sl
 800a514:	8e38      	ldrh	r0, [r7, #48]	; 0x30
                    lv_coord_t seg_w = pattern[i].x - pattern[aa_last_corner].x;
 800a516:	b232      	sxth	r2, r6
                    if(main_line->sx < 0) {
 800a518:	da1f      	bge.n	800a55a <lv_draw_line+0x51e>
                        lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w + 1, main_line->p1.y + pattern[aa_last_corner].y - 1,
 800a51a:	3001      	adds	r0, #1
 800a51c:	69fb      	ldr	r3, [r7, #28]
 800a51e:	b209      	sxth	r1, r1
 800a520:	4448      	add	r0, r9
 800a522:	9301      	str	r3, [sp, #4]
 800a524:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800a526:	4430      	add	r0, r6
 800a528:	9300      	str	r3, [sp, #0]
 800a52a:	4643      	mov	r3, r8
 800a52c:	b200      	sxth	r0, r0
 800a52e:	f7ff f96e 	bl	800980e <lv_draw_aa_hor_seg>
                        lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x + seg_w + 1, main_line->p2.y + pattern[aa_last_corner].y + 1,
 800a532:	8eb8      	ldrh	r0, [r7, #52]	; 0x34
 800a534:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800a536:	4272      	negs	r2, r6
 800a538:	3001      	adds	r0, #1
 800a53a:	69fb      	ldr	r3, [r7, #28]
 800a53c:	3101      	adds	r1, #1
 800a53e:	b212      	sxth	r2, r2
 800a540:	4481      	add	r9, r0
 800a542:	9301      	str	r3, [sp, #4]
 800a544:	4451      	add	r1, sl
 800a546:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800a548:	44b1      	add	r9, r6
 800a54a:	9300      	str	r3, [sp, #0]
 800a54c:	b209      	sxth	r1, r1
 800a54e:	4643      	mov	r3, r8
 800a550:	fa0f f089 	sxth.w	r0, r9
                        lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x, main_line->p2.y + pattern[aa_last_corner].y + 1,
 800a554:	f7ff f95b 	bl	800980e <lv_draw_aa_hor_seg>
 800a558:	e7a5      	b.n	800a4a6 <lv_draw_line+0x46a>
                        lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x, main_line->p1.y + pattern[aa_last_corner].y - 1,
 800a55a:	69fb      	ldr	r3, [r7, #28]
 800a55c:	4448      	add	r0, r9
 800a55e:	b209      	sxth	r1, r1
 800a560:	9301      	str	r3, [sp, #4]
 800a562:	b200      	sxth	r0, r0
 800a564:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800a566:	9300      	str	r3, [sp, #0]
 800a568:	4643      	mov	r3, r8
 800a56a:	f7ff f950 	bl	800980e <lv_draw_aa_hor_seg>
                        lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x, main_line->p2.y + pattern[aa_last_corner].y + 1,
 800a56e:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800a570:	8eb8      	ldrh	r0, [r7, #52]	; 0x34
 800a572:	4272      	negs	r2, r6
 800a574:	69fb      	ldr	r3, [r7, #28]
 800a576:	3101      	adds	r1, #1
 800a578:	4448      	add	r0, r9
 800a57a:	b212      	sxth	r2, r2
 800a57c:	4451      	add	r1, sl
 800a57e:	9301      	str	r3, [sp, #4]
 800a580:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800a582:	b200      	sxth	r0, r0
 800a584:	b209      	sxth	r1, r1
 800a586:	9300      	str	r3, [sp, #0]
 800a588:	4643      	mov	r3, r8
 800a58a:	e7e3      	b.n	800a554 <lv_draw_line+0x518>
            lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1, main_line->p1.y + pattern[aa_last_corner].y,
 800a58c:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 800a58e:	b212      	sxth	r2, r2
 800a590:	69fb      	ldr	r3, [r7, #28]
 800a592:	b209      	sxth	r1, r1
 800a594:	3801      	subs	r0, #1
 800a596:	9301      	str	r3, [sp, #4]
 800a598:	4450      	add	r0, sl
 800a59a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800a59c:	b200      	sxth	r0, r0
 800a59e:	9300      	str	r3, [sp, #0]
 800a5a0:	4643      	mov	r3, r8
 800a5a2:	f7ff f90d 	bl	80097c0 <lv_draw_aa_ver_seg>
                               -(seg_w + main_line->sy), mask, style->line.color, opa);
 800a5a6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
            lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1, main_line->p2.y + pattern[aa_last_corner].y,
 800a5aa:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800a5ac:	8eb8      	ldrh	r0, [r7, #52]	; 0x34
                               -(seg_w + main_line->sy), mask, style->line.color, opa);
 800a5ae:	4432      	add	r2, r6
            lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1, main_line->p2.y + pattern[aa_last_corner].y,
 800a5b0:	69fb      	ldr	r3, [r7, #28]
 800a5b2:	4449      	add	r1, r9
 800a5b4:	4252      	negs	r2, r2
 800a5b6:	3001      	adds	r0, #1
 800a5b8:	9301      	str	r3, [sp, #4]
 800a5ba:	b209      	sxth	r1, r1
 800a5bc:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800a5be:	4450      	add	r0, sl
 800a5c0:	b212      	sxth	r2, r2
 800a5c2:	9300      	str	r3, [sp, #0]
 800a5c4:	4643      	mov	r3, r8
 800a5c6:	e686      	b.n	800a2d6 <lv_draw_line+0x29a>
        lv_coord_t seg_w = pattern[width_safe - 1].x - pattern[aa_last_corner].x;
 800a5c8:	f83b 9023 	ldrh.w	r9, [fp, r3, lsl #2]
 800a5cc:	eb0b 0002 	add.w	r0, fp, r2
 800a5d0:	f83b 6026 	ldrh.w	r6, [fp, r6, lsl #2]
            lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w, main_line->p1.y + pattern[aa_last_corner].y - 1,
 800a5d4:	3901      	subs	r1, #1
        if(main_line->sx < 0) {
 800a5d6:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
        lv_coord_t seg_w = pattern[width_safe - 1].x - pattern[aa_last_corner].x;
 800a5da:	eba6 0609 	sub.w	r6, r6, r9
 800a5de:	f8b0 a002 	ldrh.w	sl, [r0, #2]
        if(main_line->sx < 0) {
 800a5e2:	2a00      	cmp	r2, #0
            lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w, main_line->p1.y + pattern[aa_last_corner].y - 1,
 800a5e4:	8e38      	ldrh	r0, [r7, #48]	; 0x30
        lv_coord_t seg_w = pattern[width_safe - 1].x - pattern[aa_last_corner].x;
 800a5e6:	b2b6      	uxth	r6, r6
            lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w, main_line->p1.y + pattern[aa_last_corner].y - 1,
 800a5e8:	4451      	add	r1, sl
 800a5ea:	4448      	add	r0, r9
 800a5ec:	4432      	add	r2, r6
        if(main_line->sx < 0) {
 800a5ee:	da1f      	bge.n	800a630 <lv_draw_line+0x5f4>
            lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w, main_line->p1.y + pattern[aa_last_corner].y - 1,
 800a5f0:	69fb      	ldr	r3, [r7, #28]
 800a5f2:	4430      	add	r0, r6
 800a5f4:	b212      	sxth	r2, r2
 800a5f6:	9301      	str	r3, [sp, #4]
 800a5f8:	b209      	sxth	r1, r1
 800a5fa:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800a5fc:	b200      	sxth	r0, r0
 800a5fe:	9300      	str	r3, [sp, #0]
 800a600:	4643      	mov	r3, r8
 800a602:	f7ff f904 	bl	800980e <lv_draw_aa_hor_seg>
            lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x + seg_w, main_line->p2.y + pattern[aa_last_corner].y + 1,
 800a606:	8eb8      	ldrh	r0, [r7, #52]	; 0x34
                               -(seg_w + main_line->sx), mask, style->line.color, opa);
 800a608:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
            lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x + seg_w, main_line->p2.y + pattern[aa_last_corner].y + 1,
 800a60a:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800a60c:	4481      	add	r9, r0
 800a60e:	69fb      	ldr	r3, [r7, #28]
                               -(seg_w + main_line->sx), mask, style->line.color, opa);
 800a610:	4432      	add	r2, r6
            lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x + seg_w, main_line->p2.y + pattern[aa_last_corner].y + 1,
 800a612:	3101      	adds	r1, #1
 800a614:	44b1      	add	r9, r6
 800a616:	4252      	negs	r2, r2
 800a618:	9301      	str	r3, [sp, #4]
 800a61a:	4451      	add	r1, sl
 800a61c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800a61e:	b212      	sxth	r2, r2
 800a620:	9300      	str	r3, [sp, #0]
 800a622:	b209      	sxth	r1, r1
 800a624:	4643      	mov	r3, r8
 800a626:	fa0f f089 	sxth.w	r0, r9
            lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x, main_line->p2.y + pattern[aa_last_corner].y + 1,
 800a62a:	f7ff f8f0 	bl	800980e <lv_draw_aa_hor_seg>
 800a62e:	e655      	b.n	800a2dc <lv_draw_line+0x2a0>
            lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x, main_line->p1.y + pattern[aa_last_corner].y - 1,
 800a630:	69fb      	ldr	r3, [r7, #28]
 800a632:	b212      	sxth	r2, r2
 800a634:	b209      	sxth	r1, r1
 800a636:	9301      	str	r3, [sp, #4]
 800a638:	b200      	sxth	r0, r0
 800a63a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800a63c:	9300      	str	r3, [sp, #0]
 800a63e:	4643      	mov	r3, r8
 800a640:	f7ff f8e5 	bl	800980e <lv_draw_aa_hor_seg>
                               -(seg_w + main_line->sx), mask, style->line.color, opa);
 800a644:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
            lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x, main_line->p2.y + pattern[aa_last_corner].y + 1,
 800a646:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800a648:	8eb8      	ldrh	r0, [r7, #52]	; 0x34
                               -(seg_w + main_line->sx), mask, style->line.color, opa);
 800a64a:	4432      	add	r2, r6
            lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x, main_line->p2.y + pattern[aa_last_corner].y + 1,
 800a64c:	69fb      	ldr	r3, [r7, #28]
 800a64e:	3101      	adds	r1, #1
 800a650:	4252      	negs	r2, r2
 800a652:	4448      	add	r0, r9
 800a654:	4451      	add	r1, sl
 800a656:	9301      	str	r3, [sp, #4]
 800a658:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800a65a:	b212      	sxth	r2, r2
 800a65c:	b209      	sxth	r1, r1
 800a65e:	9300      	str	r3, [sp, #0]
 800a660:	b200      	sxth	r0, r0
 800a662:	4643      	mov	r3, r8
 800a664:	e7e1      	b.n	800a62a <lv_draw_line+0x5ee>
        if(main_line->sy < 0) {
 800a666:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800a66a:	e63e      	b.n	800a2ea <lv_draw_line+0x2ae>
            aa_shift1 = -1;
 800a66c:	3300      	adds	r3, #0
 800a66e:	bf18      	it	ne
 800a670:	2301      	movne	r3, #1
 800a672:	613b      	str	r3, [r7, #16]
            aa_shift2 = 1;
 800a674:	2301      	movs	r3, #1
 800a676:	60fb      	str	r3, [r7, #12]
 800a678:	e643      	b.n	800a302 <lv_draw_line+0x2c6>
                draw_area.x1 = prev_p.x + pattern[i].x;
 800a67a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a67c:	f9b9 2000 	ldrsh.w	r2, [r9]
                draw_area.y1 = prev_p.y + pattern[i].y;
 800a680:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
                draw_area.x1 = prev_p.x + pattern[i].x;
 800a682:	4413      	add	r3, r2
 800a684:	60ba      	str	r2, [r7, #8]
                draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x - 1;
 800a686:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
                draw_area.x1 = prev_p.x + pattern[i].x;
 800a688:	b29a      	uxth	r2, r3
                draw_area.y1 = prev_p.y + pattern[i].y;
 800a68a:	f8b9 3002 	ldrh.w	r3, [r9, #2]
                fill_fp(&draw_area, mask, style->line.color, opa);
 800a68e:	4c7d      	ldr	r4, [pc, #500]	; (800a884 <lv_draw_line+0x848>)
                draw_area.y1 = prev_p.y + pattern[i].y;
 800a690:	440b      	add	r3, r1
                draw_area.x1 = prev_p.x + pattern[i].x;
 800a692:	f8a7 204c 	strh.w	r2, [r7, #76]	; 0x4c
                fill_fp(&draw_area, mask, style->line.color, opa);
 800a696:	6824      	ldr	r4, [r4, #0]
                draw_area.y1 = prev_p.y + pattern[i].y;
 800a698:	b219      	sxth	r1, r3
                draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x - 1;
 800a69a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a69c:	3b01      	subs	r3, #1
                draw_area.y1 = prev_p.y + pattern[i].y;
 800a69e:	f8a7 104e 	strh.w	r1, [r7, #78]	; 0x4e
                draw_area.y2 = draw_area.y1;
 800a6a2:	f8a7 1052 	strh.w	r1, [r7, #82]	; 0x52
                fill_fp(&draw_area, mask, style->line.color, opa);
 800a6a6:	4641      	mov	r1, r8
                draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x - 1;
 800a6a8:	1a1b      	subs	r3, r3, r0
                fill_fp(&draw_area, mask, style->line.color, opa);
 800a6aa:	f107 004c 	add.w	r0, r7, #76	; 0x4c
                draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x - 1;
 800a6ae:	4413      	add	r3, r2
                fill_fp(&draw_area, mask, style->line.color, opa);
 800a6b0:	6c2a      	ldr	r2, [r5, #64]	; 0x40
                draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x - 1;
 800a6b2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                fill_fp(&draw_area, mask, style->line.color, opa);
 800a6b6:	69fb      	ldr	r3, [r7, #28]
 800a6b8:	47a0      	blx	r4
                if(i != 0 && pattern[i].x != pattern[i - 1].x && !first_run) {
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	b1a3      	cbz	r3, 800a6e8 <lv_draw_line+0x6ac>
 800a6be:	f939 3c04 	ldrsh.w	r3, [r9, #-4]
 800a6c2:	68ba      	ldr	r2, [r7, #8]
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d00f      	beq.n	800a6e8 <lv_draw_line+0x6ac>
 800a6c8:	b976      	cbnz	r6, 800a6e8 <lv_draw_line+0x6ac>
                    px_fp(draw_area.x1, draw_area.y1 - main_line->sy, mask, style->line.color, opa);
 800a6ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a6ce:	4642      	mov	r2, r8
 800a6d0:	f8b7 104e 	ldrh.w	r1, [r7, #78]	; 0x4e
 800a6d4:	4c6c      	ldr	r4, [pc, #432]	; (800a888 <lv_draw_line+0x84c>)
 800a6d6:	1ac9      	subs	r1, r1, r3
 800a6d8:	69fb      	ldr	r3, [r7, #28]
 800a6da:	f9b7 004c 	ldrsh.w	r0, [r7, #76]	; 0x4c
 800a6de:	b209      	sxth	r1, r1
 800a6e0:	9300      	str	r3, [sp, #0]
 800a6e2:	6824      	ldr	r4, [r4, #0]
 800a6e4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800a6e6:	47a0      	blx	r4
 800a6e8:	f10a 0a01 	add.w	sl, sl, #1
 800a6ec:	f109 0904 	add.w	r9, r9, #4
 800a6f0:	fa0f f38a 	sxth.w	r3, sl
 800a6f4:	607b      	str	r3, [r7, #4]
            for(i = 0; i < width; i++) {
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	dcbd      	bgt.n	800a67a <lv_draw_line+0x63e>
            lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 800a6fe:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
                               -(main_line->p_act.x - prev_p.x), mask, style->line.color, opa);
 800a700:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
            lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 800a702:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
                               -(main_line->p_act.x - prev_p.x), mask, style->line.color, opa);
 800a704:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 800a706:	1a8a      	subs	r2, r1, r2
            lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 800a708:	f8bb 1002 	ldrh.w	r1, [fp, #2]
 800a70c:	4419      	add	r1, r3
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	b212      	sxth	r2, r2
 800a712:	1ac9      	subs	r1, r1, r3
 800a714:	f8bb 3000 	ldrh.w	r3, [fp]
 800a718:	4418      	add	r0, r3
 800a71a:	69fb      	ldr	r3, [r7, #28]
 800a71c:	b209      	sxth	r1, r1
 800a71e:	9301      	str	r3, [sp, #4]
 800a720:	b200      	sxth	r0, r0
 800a722:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800a724:	9300      	str	r3, [sp, #0]
 800a726:	4643      	mov	r3, r8
 800a728:	f7ff f871 	bl	800980e <lv_draw_aa_hor_seg>
 800a72c:	69bb      	ldr	r3, [r7, #24]
            lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x, prev_p.y + pattern[width_safe - 1].y + aa_shift2,
 800a72e:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
                               main_line->p_act.x - prev_p.x, mask, style->line.color, opa);
 800a730:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 800a732:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
            lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x, prev_p.y + pattern[width_safe - 1].y + aa_shift2,
 800a736:	8dfe      	ldrh	r6, [r7, #46]	; 0x2e
                               main_line->p_act.x - prev_p.x, mask, style->line.color, opa);
 800a738:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
            lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x, prev_p.y + pattern[width_safe - 1].y + aa_shift2,
 800a73a:	68fc      	ldr	r4, [r7, #12]
                               main_line->p_act.x - prev_p.x, mask, style->line.color, opa);
 800a73c:	1a8a      	subs	r2, r1, r2
            lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x, prev_p.y + pattern[width_safe - 1].y + aa_shift2,
 800a73e:	f833 1c02 	ldrh.w	r1, [r3, #-2]
 800a742:	f833 3c04 	ldrh.w	r3, [r3, #-4]
 800a746:	4431      	add	r1, r6
 800a748:	b212      	sxth	r2, r2
 800a74a:	4418      	add	r0, r3
 800a74c:	69fb      	ldr	r3, [r7, #28]
 800a74e:	4421      	add	r1, r4
            first_run = false;
 800a750:	2600      	movs	r6, #0
            lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x, prev_p.y + pattern[width_safe - 1].y + aa_shift2,
 800a752:	9301      	str	r3, [sp, #4]
 800a754:	b200      	sxth	r0, r0
 800a756:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800a758:	b209      	sxth	r1, r1
 800a75a:	9300      	str	r3, [sp, #0]
 800a75c:	4643      	mov	r3, r8
 800a75e:	f7ff f856 	bl	800980e <lv_draw_aa_hor_seg>
            prev_p.x = main_line->p_act.x;
 800a762:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800a766:	85bb      	strh	r3, [r7, #44]	; 0x2c
            prev_p.y = main_line->p_act.y;
 800a768:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800a76c:	85fb      	strh	r3, [r7, #46]	; 0x2e
    lv_coord_t last_y = line->p_act.y;
 800a76e:	f9b7 903a 	ldrsh.w	r9, [r7, #58]	; 0x3a
        if(!line_next(line)) return false;
 800a772:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800a776:	f7ff fc36 	bl	8009fe6 <line_next>
 800a77a:	2800      	cmp	r0, #0
 800a77c:	d13e      	bne.n	800a7fc <lv_draw_line+0x7c0>
 800a77e:	46d9      	mov	r9, fp
 800a780:	4682      	mov	sl, r0
 800a782:	fa0f f38a 	sxth.w	r3, sl
 800a786:	607b      	str	r3, [r7, #4]
        for(i = 0; i < width; i++) {
 800a788:	687a      	ldr	r2, [r7, #4]
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	4293      	cmp	r3, r2
 800a78e:	dc3d      	bgt.n	800a80c <lv_draw_line+0x7d0>
        lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 800a790:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
                           -(main_line->p_act.x - prev_p.x + 1), mask, style->line.color, opa);
 800a792:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
        lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 800a794:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
                           -(main_line->p_act.x - prev_p.x + 1), mask, style->line.color, opa);
 800a796:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 800a798:	1a52      	subs	r2, r2, r1
        lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 800a79a:	f8bb 1002 	ldrh.w	r1, [fp, #2]
 800a79e:	4419      	add	r1, r3
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	43d2      	mvns	r2, r2
 800a7a4:	1ac9      	subs	r1, r1, r3
 800a7a6:	f8bb 3000 	ldrh.w	r3, [fp]
 800a7aa:	b212      	sxth	r2, r2
 800a7ac:	4418      	add	r0, r3
 800a7ae:	69fb      	ldr	r3, [r7, #28]
 800a7b0:	b209      	sxth	r1, r1
 800a7b2:	9301      	str	r3, [sp, #4]
 800a7b4:	b200      	sxth	r0, r0
 800a7b6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800a7b8:	9300      	str	r3, [sp, #0]
 800a7ba:	4643      	mov	r3, r8
 800a7bc:	f7ff f827 	bl	800980e <lv_draw_aa_hor_seg>
 800a7c0:	69ba      	ldr	r2, [r7, #24]
        lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x, prev_p.y + pattern[width_safe - 1].y + aa_shift2,
 800a7c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a7c4:	eb0b 0082 	add.w	r0, fp, r2, lsl #2
                           main_line->p_act.x - prev_p.x + 1, mask, style->line.color, opa);
 800a7c8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
        lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x, prev_p.y + pattern[width_safe - 1].y + aa_shift2,
 800a7ca:	8dfe      	ldrh	r6, [r7, #46]	; 0x2e
                           main_line->p_act.x - prev_p.x + 1, mask, style->line.color, opa);
 800a7cc:	3201      	adds	r2, #1
 800a7ce:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
        lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x, prev_p.y + pattern[width_safe - 1].y + aa_shift2,
 800a7d0:	68fc      	ldr	r4, [r7, #12]
                           main_line->p_act.x - prev_p.x + 1, mask, style->line.color, opa);
 800a7d2:	1a52      	subs	r2, r2, r1
        lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x, prev_p.y + pattern[width_safe - 1].y + aa_shift2,
 800a7d4:	f830 1c02 	ldrh.w	r1, [r0, #-2]
 800a7d8:	f830 0c04 	ldrh.w	r0, [r0, #-4]
 800a7dc:	4431      	add	r1, r6
 800a7de:	b212      	sxth	r2, r2
 800a7e0:	4418      	add	r0, r3
 800a7e2:	69fb      	ldr	r3, [r7, #28]
 800a7e4:	4421      	add	r1, r4
 800a7e6:	9301      	str	r3, [sp, #4]
 800a7e8:	b200      	sxth	r0, r0
 800a7ea:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800a7ec:	b209      	sxth	r1, r1
 800a7ee:	9300      	str	r3, [sp, #0]
 800a7f0:	4643      	mov	r3, r8
 800a7f2:	f7ff f80c 	bl	800980e <lv_draw_aa_hor_seg>
 800a7f6:	f8d7 d000 	ldr.w	sp, [r7]
 800a7fa:	e499      	b.n	800a130 <lv_draw_line+0xf4>
    } while(last_y == line->p_act.y);
 800a7fc:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800a800:	454b      	cmp	r3, r9
 800a802:	d0b6      	beq.n	800a772 <lv_draw_line+0x736>
 800a804:	46d9      	mov	r9, fp
 800a806:	f04f 0a00 	mov.w	sl, #0
 800a80a:	e771      	b.n	800a6f0 <lv_draw_line+0x6b4>
            draw_area.x1 = prev_p.x + pattern[i].x;
 800a80c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800a80e:	f9b9 3000 	ldrsh.w	r3, [r9]
            draw_area.y1 = prev_p.y + pattern[i].y;
 800a812:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
            draw_area.x1 = prev_p.x + pattern[i].x;
 800a814:	60bb      	str	r3, [r7, #8]
 800a816:	441a      	add	r2, r3
            draw_area.y1 = prev_p.y + pattern[i].y;
 800a818:	f8b9 3002 	ldrh.w	r3, [r9, #2]
            draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x;
 800a81c:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
            draw_area.x1 = prev_p.x + pattern[i].x;
 800a81e:	b292      	uxth	r2, r2
            draw_area.y1 = prev_p.y + pattern[i].y;
 800a820:	440b      	add	r3, r1
            draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x;
 800a822:	8f39      	ldrh	r1, [r7, #56]	; 0x38
            draw_area.x1 = prev_p.x + pattern[i].x;
 800a824:	f8a7 204c 	strh.w	r2, [r7, #76]	; 0x4c
            draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x;
 800a828:	1a09      	subs	r1, r1, r0
            draw_area.y1 = prev_p.y + pattern[i].y;
 800a82a:	b21b      	sxth	r3, r3
            fill_fp(&draw_area, mask, style->line.color, opa);
 800a82c:	4c15      	ldr	r4, [pc, #84]	; (800a884 <lv_draw_line+0x848>)
 800a82e:	f107 004c 	add.w	r0, r7, #76	; 0x4c
            draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x;
 800a832:	440a      	add	r2, r1
            draw_area.y1 = prev_p.y + pattern[i].y;
 800a834:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            draw_area.y2 = draw_area.y1;
 800a838:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            fill_fp(&draw_area, mask, style->line.color, opa);
 800a83c:	4641      	mov	r1, r8
            draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x;
 800a83e:	f8a7 2050 	strh.w	r2, [r7, #80]	; 0x50
            fill_fp(&draw_area, mask, style->line.color, opa);
 800a842:	69fb      	ldr	r3, [r7, #28]
 800a844:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800a846:	6824      	ldr	r4, [r4, #0]
 800a848:	47a0      	blx	r4
            if(i != 0 && pattern[i].x != pattern[i - 1].x && !first_run) {
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	b1a3      	cbz	r3, 800a878 <lv_draw_line+0x83c>
 800a84e:	f939 3c04 	ldrsh.w	r3, [r9, #-4]
 800a852:	68ba      	ldr	r2, [r7, #8]
 800a854:	4293      	cmp	r3, r2
 800a856:	d00f      	beq.n	800a878 <lv_draw_line+0x83c>
 800a858:	b976      	cbnz	r6, 800a878 <lv_draw_line+0x83c>
                px_fp(draw_area.x1, draw_area.y1 - main_line->sy, mask, style->line.color, opa);
 800a85a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a85e:	4642      	mov	r2, r8
 800a860:	f8b7 104e 	ldrh.w	r1, [r7, #78]	; 0x4e
 800a864:	4c08      	ldr	r4, [pc, #32]	; (800a888 <lv_draw_line+0x84c>)
 800a866:	1ac9      	subs	r1, r1, r3
 800a868:	69fb      	ldr	r3, [r7, #28]
 800a86a:	f9b7 004c 	ldrsh.w	r0, [r7, #76]	; 0x4c
 800a86e:	b209      	sxth	r1, r1
 800a870:	9300      	str	r3, [sp, #0]
 800a872:	6824      	ldr	r4, [r4, #0]
 800a874:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800a876:	47a0      	blx	r4
 800a878:	f10a 0a01 	add.w	sl, sl, #1
 800a87c:	f109 0904 	add.w	r9, r9, #4
 800a880:	e77f      	b.n	800a782 <lv_draw_line+0x746>
 800a882:	bf00      	nop
 800a884:	08083784 	.word	0x08083784
 800a888:	08083790 	.word	0x08083790
                draw_area.x1 = prev_p.x + pattern[i].x;
 800a88c:	f8b9 2000 	ldrh.w	r2, [r9]
                fill_fp(&draw_area, mask, style->line.color, opa);
 800a890:	f107 004c 	add.w	r0, r7, #76	; 0x4c
                draw_area.y1 = prev_p.y + pattern[i].y;
 800a894:	f9b9 a002 	ldrsh.w	sl, [r9, #2]
                draw_area.x1 = prev_p.x + pattern[i].x;
 800a898:	441a      	add	r2, r3
                draw_area.y1 = prev_p.y + pattern[i].y;
 800a89a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
                draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y - 1;
 800a89c:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
                draw_area.x1 = prev_p.x + pattern[i].x;
 800a89e:	b212      	sxth	r2, r2
                draw_area.y1 = prev_p.y + pattern[i].y;
 800a8a0:	4453      	add	r3, sl
                fill_fp(&draw_area, mask, style->line.color, opa);
 800a8a2:	4c55      	ldr	r4, [pc, #340]	; (800a9f8 <lv_draw_line+0x9bc>)
                draw_area.x1 = prev_p.x + pattern[i].x;
 800a8a4:	f8a7 204c 	strh.w	r2, [r7, #76]	; 0x4c
                draw_area.y1 = prev_p.y + pattern[i].y;
 800a8a8:	b29b      	uxth	r3, r3
                draw_area.x2 = draw_area.x1;
 800a8aa:	f8a7 2050 	strh.w	r2, [r7, #80]	; 0x50
                draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y - 1;
 800a8ae:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
                draw_area.y1 = prev_p.y + pattern[i].y;
 800a8b0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
                draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y - 1;
 800a8b4:	3a01      	subs	r2, #1
                fill_fp(&draw_area, mask, style->line.color, opa);
 800a8b6:	6824      	ldr	r4, [r4, #0]
                draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y - 1;
 800a8b8:	1a52      	subs	r2, r2, r1
                fill_fp(&draw_area, mask, style->line.color, opa);
 800a8ba:	4641      	mov	r1, r8
                draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y - 1;
 800a8bc:	4413      	add	r3, r2
                fill_fp(&draw_area, mask, style->line.color, opa);
 800a8be:	6c2a      	ldr	r2, [r5, #64]	; 0x40
                draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y - 1;
 800a8c0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
                fill_fp(&draw_area, mask, style->line.color, opa);
 800a8c4:	69fb      	ldr	r3, [r7, #28]
 800a8c6:	47a0      	blx	r4
                if(i != 0 && pattern[i].y != pattern[i - 1].y && !first_run) {
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	b19b      	cbz	r3, 800a8f4 <lv_draw_line+0x8b8>
 800a8cc:	f939 3c02 	ldrsh.w	r3, [r9, #-2]
 800a8d0:	4553      	cmp	r3, sl
 800a8d2:	d00f      	beq.n	800a8f4 <lv_draw_line+0x8b8>
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	b96b      	cbnz	r3, 800a8f4 <lv_draw_line+0x8b8>
                    px_fp(draw_area.x1 - main_line->sx, draw_area.y1, mask, style->line.color, opa);
 800a8d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a8da:	4642      	mov	r2, r8
 800a8dc:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800a8e0:	4c46      	ldr	r4, [pc, #280]	; (800a9fc <lv_draw_line+0x9c0>)
 800a8e2:	1ac0      	subs	r0, r0, r3
 800a8e4:	69fb      	ldr	r3, [r7, #28]
 800a8e6:	f9b7 104e 	ldrsh.w	r1, [r7, #78]	; 0x4e
 800a8ea:	b200      	sxth	r0, r0
 800a8ec:	9300      	str	r3, [sp, #0]
 800a8ee:	6824      	ldr	r4, [r4, #0]
 800a8f0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800a8f2:	47a0      	blx	r4
 800a8f4:	3601      	adds	r6, #1
 800a8f6:	f109 0904 	add.w	r9, r9, #4
 800a8fa:	b233      	sxth	r3, r6
            for(i = 0; i < width; i++) {
 800a8fc:	697a      	ldr	r2, [r7, #20]
 800a8fe:	4293      	cmp	r3, r2
 800a900:	607b      	str	r3, [r7, #4]
                draw_area.x1 = prev_p.x + pattern[i].x;
 800a902:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
            for(i = 0; i < width; i++) {
 800a904:	dbc2      	blt.n	800a88c <lv_draw_line+0x850>
            lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
 800a906:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
                               -(main_line->p_act.y - prev_p.y), mask, style->line.color, opa);
 800a908:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a90a:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 800a90c:	1a82      	subs	r2, r0, r2
            lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
 800a90e:	f8bb 0002 	ldrh.w	r0, [fp, #2]
 800a912:	4401      	add	r1, r0
 800a914:	f8bb 0000 	ldrh.w	r0, [fp]
 800a918:	b212      	sxth	r2, r2
 800a91a:	4418      	add	r0, r3
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	b209      	sxth	r1, r1
 800a920:	1ac0      	subs	r0, r0, r3
 800a922:	69fb      	ldr	r3, [r7, #28]
 800a924:	9301      	str	r3, [sp, #4]
 800a926:	b200      	sxth	r0, r0
 800a928:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800a92a:	9300      	str	r3, [sp, #0]
 800a92c:	4643      	mov	r3, r8
 800a92e:	f7fe ff47 	bl	80097c0 <lv_draw_aa_ver_seg>
 800a932:	69bb      	ldr	r3, [r7, #24]
            lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2, prev_p.y + pattern[width_safe - 1].y,
 800a934:	8dbe      	ldrh	r6, [r7, #44]	; 0x2c
                               main_line->p_act.y - prev_p.y, mask, style->line.color, opa);
 800a936:	8f78      	ldrh	r0, [r7, #58]	; 0x3a
 800a938:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
            lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2, prev_p.y + pattern[width_safe - 1].y,
 800a93c:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
                               main_line->p_act.y - prev_p.y, mask, style->line.color, opa);
 800a93e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a940:	1a82      	subs	r2, r0, r2
            lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2, prev_p.y + pattern[width_safe - 1].y,
 800a942:	f833 0c02 	ldrh.w	r0, [r3, #-2]
 800a946:	4401      	add	r1, r0
 800a948:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	b212      	sxth	r2, r2
 800a950:	4430      	add	r0, r6
 800a952:	b209      	sxth	r1, r1
 800a954:	4418      	add	r0, r3
 800a956:	69fb      	ldr	r3, [r7, #28]
 800a958:	9301      	str	r3, [sp, #4]
 800a95a:	b200      	sxth	r0, r0
 800a95c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800a95e:	9300      	str	r3, [sp, #0]
 800a960:	4643      	mov	r3, r8
 800a962:	f7fe ff2d 	bl	80097c0 <lv_draw_aa_ver_seg>
            prev_p.x = main_line->p_act.x;
 800a966:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800a96a:	85bb      	strh	r3, [r7, #44]	; 0x2c
            prev_p.y = main_line->p_act.y;
 800a96c:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800a970:	85fb      	strh	r3, [r7, #46]	; 0x2e
            first_run = false;
 800a972:	2300      	movs	r3, #0
 800a974:	e4cf      	b.n	800a316 <lv_draw_line+0x2da>
    } while(last_x == line->p_act.x);
 800a976:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800a97a:	42b3      	cmp	r3, r6
 800a97c:	f43f acce 	beq.w	800a31c <lv_draw_line+0x2e0>
 800a980:	46d9      	mov	r9, fp
 800a982:	2600      	movs	r6, #0
 800a984:	e7b9      	b.n	800a8fa <lv_draw_line+0x8be>
            draw_area.x1 = prev_p.x + pattern[i].x;
 800a986:	f8b9 2000 	ldrh.w	r2, [r9]
            fill_fp(&draw_area, mask, style->line.color, opa);
 800a98a:	f107 004c 	add.w	r0, r7, #76	; 0x4c
            draw_area.y1 = prev_p.y + pattern[i].y;
 800a98e:	f9b9 1002 	ldrsh.w	r1, [r9, #2]
            draw_area.x1 = prev_p.x + pattern[i].x;
 800a992:	441a      	add	r2, r3
            draw_area.y1 = prev_p.y + pattern[i].y;
 800a994:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a996:	6079      	str	r1, [r7, #4]
            draw_area.x1 = prev_p.x + pattern[i].x;
 800a998:	b212      	sxth	r2, r2
            draw_area.y1 = prev_p.y + pattern[i].y;
 800a99a:	440b      	add	r3, r1
            draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y;
 800a99c:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
            draw_area.x1 = prev_p.x + pattern[i].x;
 800a99e:	f8a7 204c 	strh.w	r2, [r7, #76]	; 0x4c
            draw_area.y1 = prev_p.y + pattern[i].y;
 800a9a2:	b29b      	uxth	r3, r3
            draw_area.x2 = draw_area.x1;
 800a9a4:	f8a7 2050 	strh.w	r2, [r7, #80]	; 0x50
            draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y;
 800a9a8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
            draw_area.y1 = prev_p.y + pattern[i].y;
 800a9aa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y;
 800a9ae:	1a52      	subs	r2, r2, r1
            fill_fp(&draw_area, mask, style->line.color, opa);
 800a9b0:	4c11      	ldr	r4, [pc, #68]	; (800a9f8 <lv_draw_line+0x9bc>)
 800a9b2:	4641      	mov	r1, r8
            draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y;
 800a9b4:	4413      	add	r3, r2
            fill_fp(&draw_area, mask, style->line.color, opa);
 800a9b6:	6824      	ldr	r4, [r4, #0]
 800a9b8:	6c2a      	ldr	r2, [r5, #64]	; 0x40
            draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y;
 800a9ba:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            fill_fp(&draw_area, mask, style->line.color, opa);
 800a9be:	69fb      	ldr	r3, [r7, #28]
 800a9c0:	47a0      	blx	r4
            if(i != 0 && pattern[i].y != pattern[i - 1].y && !first_run) {
 800a9c2:	b1a6      	cbz	r6, 800a9ee <lv_draw_line+0x9b2>
 800a9c4:	f939 3c02 	ldrsh.w	r3, [r9, #-2]
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d00f      	beq.n	800a9ee <lv_draw_line+0x9b2>
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	b96b      	cbnz	r3, 800a9ee <lv_draw_line+0x9b2>
                px_fp(draw_area.x1 - main_line->sx, draw_area.y1, mask, style->line.color, opa);
 800a9d2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a9d4:	4642      	mov	r2, r8
 800a9d6:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800a9da:	4c08      	ldr	r4, [pc, #32]	; (800a9fc <lv_draw_line+0x9c0>)
 800a9dc:	1ac0      	subs	r0, r0, r3
 800a9de:	69fb      	ldr	r3, [r7, #28]
 800a9e0:	f9b7 104e 	ldrsh.w	r1, [r7, #78]	; 0x4e
 800a9e4:	b200      	sxth	r0, r0
 800a9e6:	9300      	str	r3, [sp, #0]
 800a9e8:	6826      	ldr	r6, [r4, #0]
 800a9ea:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800a9ec:	47b0      	blx	r6
 800a9ee:	f10a 0a01 	add.w	sl, sl, #1
 800a9f2:	f109 0904 	add.w	r9, r9, #4
 800a9f6:	e49a      	b.n	800a32e <lv_draw_line+0x2f2>
 800a9f8:	08083784 	.word	0x08083784
 800a9fc:	08083790 	.word	0x08083790

0800aa00 <lv_color_mix>:
static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800aa00:	f1c2 03ff 	rsb	r3, r2, #255	; 0xff
{
 800aa04:	b5f0      	push	{r4, r5, r6, r7, lr}
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800aa06:	b294      	uxth	r4, r2
 800aa08:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800aa0c:	b29a      	uxth	r2, r3
 800aa0e:	f3c1 4307 	ubfx	r3, r1, #16, #8
    uint16_t g_2 = (c2.green_h << 3) + c2.green_l;
    uint16_t g_out = (uint16_t)((uint16_t) g_1 * mix + (g_2 * (255 - mix))) >> 8;
    ret.green_h = g_out >> 3;
    ret.green_l = g_out & 0x7;
#  else
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800aa12:	f3c0 2607 	ubfx	r6, r0, #8, #8
#  endif
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
# if LV_COLOR_DEPTH == 32
//    ret.alpha = 0xFF;
    ret.alpha = (uint16_t)((uint16_t) c1.alpha * mix + (c2.alpha * (255 - mix))) >> 8;
 800aa16:	0e0f      	lsrs	r7, r1, #24
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800aa18:	fb13 f302 	smulbb	r3, r3, r2
    ret.alpha = (uint16_t)((uint16_t) c1.alpha * mix + (c2.alpha * (255 - mix))) >> 8;
 800aa1c:	fb17 f702 	smulbb	r7, r7, r2
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800aa20:	fb05 3504 	mla	r5, r5, r4, r3
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800aa24:	f3c1 2307 	ubfx	r3, r1, #8, #8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800aa28:	b2c9      	uxtb	r1, r1
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800aa2a:	fb13 f302 	smulbb	r3, r3, r2
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800aa2e:	f3c5 2507 	ubfx	r5, r5, #8, #8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800aa32:	fb11 f202 	smulbb	r2, r1, r2
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800aa36:	fb06 3604 	mla	r6, r6, r4, r3
    ret.alpha = (uint16_t)((uint16_t) c1.alpha * mix + (c2.alpha * (255 - mix))) >> 8;
 800aa3a:	0e03      	lsrs	r3, r0, #24
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800aa3c:	b2c0      	uxtb	r0, r0
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800aa3e:	f3c6 2607 	ubfx	r6, r6, #8, #8
    ret.alpha = (uint16_t)((uint16_t) c1.alpha * mix + (c2.alpha * (255 - mix))) >> 8;
 800aa42:	fb03 7304 	mla	r3, r3, r4, r7
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800aa46:	fb00 2204 	mla	r2, r0, r4, r2
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 800aa4a:	2000      	movs	r0, #0
    ret.alpha = (uint16_t)((uint16_t) c1.alpha * mix + (c2.alpha * (255 - mix))) >> 8;
 800aa4c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800aa50:	f3c2 2207 	ubfx	r2, r2, #8, #8
    return ret;
 800aa54:	f362 0007 	bfi	r0, r2, #0, #8
 800aa58:	f366 200f 	bfi	r0, r6, #8, #8
 800aa5c:	f365 4017 	bfi	r0, r5, #16, #8
 800aa60:	f363 601f 	bfi	r0, r3, #24, #8
}
 800aa64:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aa66 <lv_draw_cont_radius_corr>:
#endif


static uint16_t lv_draw_cont_radius_corr(uint16_t r, lv_coord_t w, lv_coord_t h)
{
    if(r >= (w >> 1)) {
 800aa66:	1049      	asrs	r1, r1, #1
 800aa68:	4288      	cmp	r0, r1
 800aa6a:	db03      	blt.n	800aa74 <lv_draw_cont_radius_corr+0xe>
        r = (w >> 1);
 800aa6c:	b288      	uxth	r0, r1
        if(r != 0) r--;
 800aa6e:	b108      	cbz	r0, 800aa74 <lv_draw_cont_radius_corr+0xe>
 800aa70:	3801      	subs	r0, #1
 800aa72:	b280      	uxth	r0, r0
    }
    if(r >= (h >> 1)) {
 800aa74:	1052      	asrs	r2, r2, #1
 800aa76:	4290      	cmp	r0, r2
 800aa78:	db03      	blt.n	800aa82 <lv_draw_cont_radius_corr+0x1c>
        r = (h >> 1);
 800aa7a:	b290      	uxth	r0, r2
        if(r != 0) r--;
 800aa7c:	b120      	cbz	r0, 800aa88 <lv_draw_cont_radius_corr+0x22>
 800aa7e:	3801      	subs	r0, #1
 800aa80:	b280      	uxth	r0, r0
    }

    if(r > 0) r -= LV_ANTIALIAS;
 800aa82:	b108      	cbz	r0, 800aa88 <lv_draw_cont_radius_corr+0x22>
 800aa84:	3801      	subs	r0, #1
 800aa86:	b280      	uxth	r0, r0

    return r;
}
 800aa88:	4770      	bx	lr
	...

0800aa8c <lv_draw_rect>:
{
 800aa8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa90:	b0ab      	sub	sp, #172	; 0xac
 800aa92:	4682      	mov	sl, r0
 800aa94:	468b      	mov	fp, r1
 800aa96:	af02      	add	r7, sp, #8
 800aa98:	66fa      	str	r2, [r7, #108]	; 0x6c
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 800aa9a:	88c2      	ldrh	r2, [r0, #6]
 800aa9c:	657b      	str	r3, [r7, #84]	; 0x54
 800aa9e:	3201      	adds	r2, #1
 800aaa0:	8843      	ldrh	r3, [r0, #2]
 800aaa2:	1ad2      	subs	r2, r2, r3
 800aaa4:	b212      	sxth	r2, r2
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 800aaa6:	2a00      	cmp	r2, #0
 800aaa8:	f340 849a 	ble.w	800b3e0 <lv_draw_rect+0x954>
    return area_p->x2 - area_p->x1 + 1;
 800aaac:	8883      	ldrh	r3, [r0, #4]
 800aaae:	8804      	ldrh	r4, [r0, #0]
 800aab0:	1c59      	adds	r1, r3, #1
 800aab2:	1b09      	subs	r1, r1, r4
 800aab4:	b209      	sxth	r1, r1
 800aab6:	2900      	cmp	r1, #0
 800aab8:	f340 8492 	ble.w	800b3e0 <lv_draw_rect+0x954>
    if(style->body.shadow.width != 0) {
 800aabc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800aabe:	f9b0 001c 	ldrsh.w	r0, [r0, #28]
 800aac2:	2800      	cmp	r0, #0
 800aac4:	f000 80d6 	beq.w	800ac74 <lv_draw_rect+0x1e8>
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800aac8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800aaca:	8980      	ldrh	r0, [r0, #12]
 800aacc:	f7ff ffcb 	bl	800aa66 <lv_draw_cont_radius_corr>
 800aad0:	4605      	mov	r5, r0
    memcpy(dest, src, sizeof(lv_area_t));
 800aad2:	f8da 1004 	ldr.w	r1, [sl, #4]
 800aad6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800aada:	f8da 0000 	ldr.w	r0, [sl]
    area_tmp.x1 += radius;
 800aade:	442c      	add	r4, r5
    area_tmp.x2 -= radius;
 800aae0:	1b5b      	subs	r3, r3, r5
 800aae2:	c203      	stmia	r2!, {r0, r1}
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800aae4:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800aae8:	4658      	mov	r0, fp
    area_tmp.x1 += radius;
 800aaea:	f8a7 4078 	strh.w	r4, [r7, #120]	; 0x78
    area_tmp.x2 -= radius;
 800aaee:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800aaf2:	f002 fef9 	bl	800d8e8 <lv_area_is_in>
 800aaf6:	2800      	cmp	r0, #0
 800aaf8:	f040 80bc 	bne.w	800ac74 <lv_draw_rect+0x1e8>
 800aafc:	f8da 0000 	ldr.w	r0, [sl]
 800ab00:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800ab04:	f8da 1004 	ldr.w	r1, [sl, #4]
 800ab08:	c303      	stmia	r3!, {r0, r1}
    area_tmp.y1 += radius;
 800ab0a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800ab0e:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800ab12:	4658      	mov	r0, fp
    area_tmp.y1 += radius;
 800ab14:	442b      	add	r3, r5
 800ab16:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    area_tmp.y2 -= radius;
 800ab1a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800ab1e:	1b5d      	subs	r5, r3, r5
 800ab20:	f8a7 507e 	strh.w	r5, [r7, #126]	; 0x7e
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800ab24:	f002 fee0 	bl	800d8e8 <lv_area_is_in>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	2800      	cmp	r0, #0
 800ab2c:	f040 80a2 	bne.w	800ac74 <lv_draw_rect+0x1e8>
    if(style->body.shadow.type == LV_SHADOW_FULL) {
 800ab30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ab32:	7f92      	ldrb	r2, [r2, #30]
 800ab34:	2a01      	cmp	r2, #1
 800ab36:	f040 85da 	bne.w	800b6ee <lv_draw_rect+0xc62>
    lv_coord_t swidth = style->body.shadow.width;
 800ab3a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    lv_circ_init(&circ, &circ_tmp, radius);
 800ab3c:	f107 0572 	add.w	r5, r7, #114	; 0x72
    return area_p->y2 - area_p->y1 + 1;
 800ab40:	f8ba 1002 	ldrh.w	r1, [sl, #2]
    lv_coord_t swidth = style->body.shadow.width;
 800ab44:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
    return area_p->x2 - area_p->x1 + 1;
 800ab48:	f8ba 0000 	ldrh.w	r0, [sl]
 800ab4c:	667a      	str	r2, [r7, #100]	; 0x64
    return area_p->y2 - area_p->y1 + 1;
 800ab4e:	f8ba 2006 	ldrh.w	r2, [sl, #6]
{
 800ab52:	f8c7 d018 	str.w	sp, [r7, #24]
 800ab56:	3201      	adds	r2, #1
 800ab58:	1a52      	subs	r2, r2, r1
    return area_p->x2 - area_p->x1 + 1;
 800ab5a:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 800ab5e:	3101      	adds	r1, #1
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800ab60:	b212      	sxth	r2, r2
 800ab62:	1a09      	subs	r1, r1, r0
 800ab64:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ab66:	b209      	sxth	r1, r1
 800ab68:	8980      	ldrh	r0, [r0, #12]
 800ab6a:	f7ff ff7c 	bl	800aa66 <lv_draw_cont_radius_corr>
    radius += LV_ANTIALIAS;
 800ab6e:	3001      	adds	r0, #1
    lv_coord_t curve_x[radius + swidth + 1];     /*Stores the 'x' coordinates of a quarter circle.*/
 800ab70:	6e79      	ldr	r1, [r7, #100]	; 0x64
    radius += LV_ANTIALIAS;
 800ab72:	b282      	uxth	r2, r0
 800ab74:	663a      	str	r2, [r7, #96]	; 0x60
 800ab76:	f9b7 2060 	ldrsh.w	r2, [r7, #96]	; 0x60
 800ab7a:	64ba      	str	r2, [r7, #72]	; 0x48
    lv_coord_t curve_x[radius + swidth + 1];     /*Stores the 'x' coordinates of a quarter circle.*/
 800ab7c:	440a      	add	r2, r1
 800ab7e:	1c54      	adds	r4, r2, #1
 800ab80:	647a      	str	r2, [r7, #68]	; 0x44
 800ab82:	0062      	lsls	r2, r4, #1
 800ab84:	f102 0108 	add.w	r1, r2, #8
 800ab88:	f021 0107 	bic.w	r1, r1, #7
 800ab8c:	ebad 0d01 	sub.w	sp, sp, r1
 800ab90:	a902      	add	r1, sp, #8
 800ab92:	66b9      	str	r1, [r7, #104]	; 0x68
    memset(curve_x, 0, sizeof(curve_x));
 800ab94:	4619      	mov	r1, r3
 800ab96:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800ab98:	f00a ffcb 	bl	8015b32 <memset>
    lv_circ_init(&circ, &circ_tmp, radius);
 800ab9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab9e:	4629      	mov	r1, r5
 800aba0:	f107 0074 	add.w	r0, r7, #116	; 0x74
 800aba4:	f002 febd 	bl	800d922 <lv_circ_init>
    while(lv_circ_cont(&circ)) {
 800aba8:	f107 0074 	add.w	r0, r7, #116	; 0x74
 800abac:	f002 fec0 	bl	800d930 <lv_circ_cont>
 800abb0:	2800      	cmp	r0, #0
 800abb2:	f040 8419 	bne.w	800b3e8 <lv_draw_rect+0x95c>
    int16_t filter_width = 2 * swidth + 1;
 800abb6:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 800abba:	f06f 05ff 	mvn.w	r5, #255	; 0xff
 800abbe:	004a      	lsls	r2, r1, #1
 800abc0:	3201      	adds	r2, #1
 800abc2:	b212      	sxth	r2, r2
    uint32_t line_1d_blur[filter_width];
 800abc4:	0093      	lsls	r3, r2, #2
        line_1d_blur[line] = (uint32_t)((uint32_t)(filter_width - line) * (opa * 2)  << SHADOW_OPA_EXTRA_PRECISION) / (filter_width * filter_width);
 800abc6:	fb02 fe02 	mul.w	lr, r2, r2
    uint32_t line_1d_blur[filter_width];
 800abca:	330a      	adds	r3, #10
 800abcc:	f023 0307 	bic.w	r3, r3, #7
 800abd0:	ebad 0d03 	sub.w	sp, sp, r3
 800abd4:	ab02      	add	r3, sp, #8
 800abd6:	643b      	str	r3, [r7, #64]	; 0x40
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t) style->body.opa * opa_scale) >> 8;
 800abd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abda:	2bff      	cmp	r3, #255	; 0xff
 800abdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abde:	bf18      	it	ne
 800abe0:	6d78      	ldrne	r0, [r7, #84]	; 0x54
 800abe2:	7b9b      	ldrb	r3, [r3, #14]
 800abe4:	bf18      	it	ne
 800abe6:	4343      	mulne	r3, r0
 800abe8:	ea4f 2002 	mov.w	r0, r2, lsl #8
 800abec:	bf18      	it	ne
 800abee:	f3c3 2307 	ubfxne	r3, r3, #8, #8
 800abf2:	005b      	lsls	r3, r3, #1
 800abf4:	435d      	muls	r5, r3
 800abf6:	4343      	muls	r3, r0
        line_1d_blur[line] = (uint32_t)((uint32_t)(filter_width - line) * (opa * 2)  << SHADOW_OPA_EXTRA_PRECISION) / (filter_width * filter_width);
 800abf8:	2000      	movs	r0, #0
    for(line = 0; line < filter_width; line++) {
 800abfa:	b206      	sxth	r6, r0
 800abfc:	42b2      	cmp	r2, r6
 800abfe:	f300 8407 	bgt.w	800b410 <lv_draw_rect+0x984>
    lv_opa_t line_2d_blur[radius + swidth + 1];
 800ac02:	3407      	adds	r4, #7
    ofs_rb.x = coords->x2 - radius - LV_ANTIALIAS;
 800ac04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
            for(line_rel = -swidth; line_rel <= swidth; line_rel ++) {
 800ac06:	4249      	negs	r1, r1
    lv_opa_t line_2d_blur[radius + swidth + 1];
 800ac08:	f024 0407 	bic.w	r4, r4, #7
 800ac0c:	ebad 0d04 	sub.w	sp, sp, r4
 800ac10:	ab02      	add	r3, sp, #8
 800ac12:	637b      	str	r3, [r7, #52]	; 0x34
    ofs_rb.x = coords->x2 - radius - LV_ANTIALIAS;
 800ac14:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800ac18:	3b01      	subs	r3, #1
 800ac1a:	1a9b      	subs	r3, r3, r2
 800ac1c:	b29b      	uxth	r3, r3
 800ac1e:	633b      	str	r3, [r7, #48]	; 0x30
 800ac20:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800ac24:	617b      	str	r3, [r7, #20]
    ofs_rb.y = coords->y2 - radius - LV_ANTIALIAS;
 800ac26:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 800ac2a:	3b01      	subs	r3, #1
 800ac2c:	1a9b      	subs	r3, r3, r2
 800ac2e:	b29b      	uxth	r3, r3
 800ac30:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac32:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800ac36:	62bb      	str	r3, [r7, #40]	; 0x28
    ofs_rt.y = coords->y1 + radius + LV_ANTIALIAS;
 800ac38:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 800ac3c:	3301      	adds	r3, #1
 800ac3e:	4413      	add	r3, r2
 800ac40:	b29b      	uxth	r3, r3
 800ac42:	627b      	str	r3, [r7, #36]	; 0x24
 800ac44:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ac48:	623b      	str	r3, [r7, #32]
    ofs_lb.x = coords->x1 + radius + LV_ANTIALIAS;
 800ac4a:	f8ba 3000 	ldrh.w	r3, [sl]
 800ac4e:	3301      	adds	r3, #1
 800ac50:	4413      	add	r3, r2
 800ac52:	b29b      	uxth	r3, r3
 800ac54:	61fb      	str	r3, [r7, #28]
 800ac56:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800ac5a:	613b      	str	r3, [r7, #16]
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	64fb      	str	r3, [r7, #76]	; 0x4c
            for(line_rel = -swidth; line_rel <= swidth; line_rel ++) {
 800ac60:	b20b      	sxth	r3, r1
 800ac62:	607b      	str	r3, [r7, #4]
 800ac64:	f9b7 504c 	ldrsh.w	r5, [r7, #76]	; 0x4c
    for(line = 0; line <= radius + swidth; line++) {        /*Check all rows and make the 1D blur to 2D*/
 800ac68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac6a:	42ab      	cmp	r3, r5
 800ac6c:	f280 8499 	bge.w	800b5a2 <lv_draw_rect+0xb16>
 800ac70:	f8d7 d018 	ldr.w	sp, [r7, #24]
    if(style->body.empty == 0) {
 800ac74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac76:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800ac7a:	07db      	lsls	r3, r3, #31
 800ac7c:	f100 81ee 	bmi.w	800b05c <lv_draw_rect+0x5d0>
 800ac80:	f9ba 2000 	ldrsh.w	r2, [sl]
    return area_p->y2 - area_p->y1 + 1;
 800ac84:	f8ba 5006 	ldrh.w	r5, [sl, #6]
 800ac88:	667a      	str	r2, [r7, #100]	; 0x64
 800ac8a:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 800ac8e:	f105 0801 	add.w	r8, r5, #1
 800ac92:	f8ba 4002 	ldrh.w	r4, [sl, #2]
 800ac96:	663a      	str	r2, [r7, #96]	; 0x60
    return area_p->x2 - area_p->x1 + 1;
 800ac98:	1c51      	adds	r1, r2, #1
 800ac9a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    return area_p->y2 - area_p->y1 + 1;
 800ac9c:	eba8 0804 	sub.w	r8, r8, r4
    uint16_t radius = style->body.radius;
 800aca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    return area_p->x2 - area_p->x1 + 1;
 800aca2:	1a89      	subs	r1, r1, r2
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t) style->body.opa * opa_scale) >> 8;
 800aca4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    uint16_t radius = style->body.radius;
 800aca6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    return area_p->y2 - area_p->y1 + 1;
 800acaa:	fa0f f888 	sxth.w	r8, r8
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t) style->body.opa * opa_scale) >> 8;
 800acae:	2aff      	cmp	r2, #255	; 0xff
 800acb0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    uint16_t radius = style->body.radius;
 800acb2:	b298      	uxth	r0, r3
 800acb4:	7b96      	ldrb	r6, [r2, #14]
    return area_p->x2 - area_p->x1 + 1;
 800acb6:	b209      	sxth	r1, r1
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t) style->body.opa * opa_scale) >> 8;
 800acb8:	bf1c      	itt	ne
 800acba:	6d7a      	ldrne	r2, [r7, #84]	; 0x54
 800acbc:	4356      	mulne	r6, r2
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800acbe:	4642      	mov	r2, r8
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t) style->body.opa * opa_scale) >> 8;
 800acc0:	bf18      	it	ne
 800acc2:	f3c6 2607 	ubfxne	r6, r6, #8, #8
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800acc6:	f7ff fece 	bl	800aa66 <lv_draw_cont_radius_corr>
    if(radius > height / 2)  return;
 800acca:	2202      	movs	r2, #2
 800accc:	fb98 f2f2 	sdiv	r2, r8, r2
 800acd0:	4290      	cmp	r0, r2
 800acd2:	dc28      	bgt.n	800ad26 <lv_draw_rect+0x29a>
    lv_color_t mcolor = style->body.main_color;
 800acd4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800acd6:	4404      	add	r4, r0
 800acd8:	f8d2 9004 	ldr.w	r9, [r2, #4]
        work_area.y1 = coords->y1 + radius;
 800acdc:	b2a4      	uxth	r4, r4
    lv_color_t gcolor = style->body.grad_color;
 800acde:	6892      	ldr	r2, [r2, #8]
 800ace0:	66ba      	str	r2, [r7, #104]	; 0x68
    work_area.x1 = coords->x1;
 800ace2:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800ace6:	f8a7 2098 	strh.w	r2, [r7, #152]	; 0x98
    work_area.x2 = coords->x2;
 800acea:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 800acee:	f8a7 209c 	strh.w	r2, [r7, #156]	; 0x9c
    if(mcolor.full == gcolor.full) {
 800acf2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800acf4:	4591      	cmp	r9, r2
 800acf6:	eba5 0200 	sub.w	r2, r5, r0
 800acfa:	f040 85f3 	bne.w	800b8e4 <lv_draw_rect+0xe58>
        work_area.y2 = coords->y2 - radius;
 800acfe:	b292      	uxth	r2, r2
        work_area.y1 = coords->y1 + radius;
 800ad00:	f8a7 409a 	strh.w	r4, [r7, #154]	; 0x9a
        work_area.y2 = coords->y2 - radius;
 800ad04:	f8a7 209e 	strh.w	r2, [r7, #158]	; 0x9e
        if(style->body.radius != 0) {
 800ad08:	b12b      	cbz	r3, 800ad16 <lv_draw_rect+0x28a>
            work_area.y1 += 2;
 800ad0a:	3402      	adds	r4, #2
            work_area.y2 -= 2;
 800ad0c:	1e93      	subs	r3, r2, #2
            work_area.y1 += 2;
 800ad0e:	f8a7 409a 	strh.w	r4, [r7, #154]	; 0x9a
            work_area.y2 -= 2;
 800ad12:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
        fill_fp(&work_area, mask, mcolor, opa);
 800ad16:	4cba      	ldr	r4, [pc, #744]	; (800b000 <lv_draw_rect+0x574>)
 800ad18:	4633      	mov	r3, r6
 800ad1a:	464a      	mov	r2, r9
 800ad1c:	4659      	mov	r1, fp
 800ad1e:	f107 0098 	add.w	r0, r7, #152	; 0x98
 800ad22:	6824      	ldr	r4, [r4, #0]
 800ad24:	47a0      	blx	r4
        if(style->body.radius != 0) {
 800ad26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad28:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800ad2c:	2800      	cmp	r0, #0
 800ad2e:	f000 8195 	beq.w	800b05c <lv_draw_rect+0x5d0>
    lv_color_t mcolor = style->body.main_color;
 800ad32:	685b      	ldr	r3, [r3, #4]
    uint16_t radius = style->body.radius;
 800ad34:	b280      	uxth	r0, r0
    return area_p->y2 - area_p->y1 + 1;
 800ad36:	f8ba 5006 	ldrh.w	r5, [sl, #6]
    lv_color_t mcolor = style->body.main_color;
 800ad3a:	66bb      	str	r3, [r7, #104]	; 0x68
    lv_color_t gcolor = style->body.grad_color;
 800ad3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad3e:	f8ba 4002 	ldrh.w	r4, [sl, #2]
 800ad42:	f8d3 9008 	ldr.w	r9, [r3, #8]
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t) style->body.opa * opa_scale) >> 8;
 800ad46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    return area_p->x2 - area_p->x1 + 1;
 800ad48:	f8ba 6000 	ldrh.w	r6, [sl]
 800ad4c:	2bff      	cmp	r3, #255	; 0xff
 800ad4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad50:	f893 800e 	ldrb.w	r8, [r3, #14]
 800ad54:	bf17      	itett	ne
 800ad56:	6d7b      	ldrne	r3, [r7, #84]	; 0x54
 800ad58:	f8c7 8064 	streq.w	r8, [r7, #100]	; 0x64
 800ad5c:	fb08 f803 	mulne.w	r8, r8, r3
 800ad60:	f3c8 2307 	ubfxne	r3, r8, #8, #8
 800ad64:	bf18      	it	ne
 800ad66:	667b      	strne	r3, [r7, #100]	; 0x64
    return area_p->y2 - area_p->y1 + 1;
 800ad68:	1c6b      	adds	r3, r5, #1
    lb_origo.y = coords->y2 - radius - LV_ANTIALIAS;
 800ad6a:	3d01      	subs	r5, #1
 800ad6c:	1b1b      	subs	r3, r3, r4
    lt_origo.y = coords->y1 + radius + LV_ANTIALIAS;
 800ad6e:	3401      	adds	r4, #1
 800ad70:	b21b      	sxth	r3, r3
 800ad72:	663b      	str	r3, [r7, #96]	; 0x60
    return area_p->x2 - area_p->x1 + 1;
 800ad74:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800ad78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ad7a:	1c59      	adds	r1, r3, #1
 800ad7c:	1b89      	subs	r1, r1, r6
    lt_origo.x = coords->x1 + radius + LV_ANTIALIAS;
 800ad7e:	3601      	adds	r6, #1
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800ad80:	b209      	sxth	r1, r1
 800ad82:	f7ff fe70 	bl	800aa66 <lv_draw_cont_radius_corr>
    lt_origo.x = coords->x1 + radius + LV_ANTIALIAS;
 800ad86:	4406      	add	r6, r0
    lt_origo.y = coords->y1 + radius + LV_ANTIALIAS;
 800ad88:	4404      	add	r4, r0
    rt_origo.x = coords->x2 - radius - LV_ANTIALIAS;
 800ad8a:	3b01      	subs	r3, #1
    lt_origo.x = coords->x1 + radius + LV_ANTIALIAS;
 800ad8c:	b2b2      	uxth	r2, r6
    lb_origo.y = coords->y2 - radius - LV_ANTIALIAS;
 800ad8e:	1a2d      	subs	r5, r5, r0
    rt_origo.x = coords->x2 - radius - LV_ANTIALIAS;
 800ad90:	1a1b      	subs	r3, r3, r0
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800ad92:	6538      	str	r0, [r7, #80]	; 0x50
    lt_origo.x = coords->x1 + radius + LV_ANTIALIAS;
 800ad94:	65fa      	str	r2, [r7, #92]	; 0x5c
    lt_origo.y = coords->y1 + radius + LV_ANTIALIAS;
 800ad96:	b2a2      	uxth	r2, r4
    rt_origo.x = coords->x2 - radius - LV_ANTIALIAS;
 800ad98:	b29b      	uxth	r3, r3
    lv_circ_init(&cir, &cir_tmp, radius);
 800ad9a:	f107 0174 	add.w	r1, r7, #116	; 0x74
    lt_origo.y = coords->y1 + radius + LV_ANTIALIAS;
 800ad9e:	64fa      	str	r2, [r7, #76]	; 0x4c
    lv_circ_init(&cir, &cir_tmp, radius);
 800ada0:	f107 0078 	add.w	r0, r7, #120	; 0x78
    lt_origo.y = coords->y1 + radius + LV_ANTIALIAS;
 800ada4:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
    rt_origo.x = coords->x2 - radius - LV_ANTIALIAS;
 800ada8:	65bb      	str	r3, [r7, #88]	; 0x58
    lt_origo.y = coords->y1 + radius + LV_ANTIALIAS;
 800adaa:	623a      	str	r2, [r7, #32]
    lb_origo.y = coords->y2 - radius - LV_ANTIALIAS;
 800adac:	b2aa      	uxth	r2, r5
    lv_circ_init(&cir, &cir_tmp, radius);
 800adae:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
    lb_origo.y = coords->y2 - radius - LV_ANTIALIAS;
 800adb2:	64ba      	str	r2, [r7, #72]	; 0x48
 800adb4:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
    lv_circ_init(&cir, &cir_tmp, radius);
 800adb8:	647b      	str	r3, [r7, #68]	; 0x44
    lb_origo.y = coords->y2 - radius - LV_ANTIALIAS;
 800adba:	61fa      	str	r2, [r7, #28]
    lv_circ_init(&cir, &cir_tmp, radius);
 800adbc:	461a      	mov	r2, r3
 800adbe:	f002 fdb0 	bl	800d922 <lv_circ_init>
                lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800adc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800adc4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
    lv_area_set(&mid_bot_area,  lb_origo.x + LV_CIRC_OCT4_X(cir),
 800adc8:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 800adcc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
                lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800adce:	441a      	add	r2, r3
                rb_origo.x + LV_CIRC_OCT1_X(cir),
 800add0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    lv_area_set(&mid_bot_area,  lb_origo.x + LV_CIRC_OCT4_X(cir),
 800add2:	b212      	sxth	r2, r2
                rb_origo.x + LV_CIRC_OCT1_X(cir),
 800add4:	440b      	add	r3, r1
    lv_area_set(&mid_bot_area,  lb_origo.x + LV_CIRC_OCT4_X(cir),
 800add6:	1a41      	subs	r1, r0, r1
 800add8:	9200      	str	r2, [sp, #0]
 800adda:	f107 0090 	add.w	r0, r7, #144	; 0x90
 800adde:	b21b      	sxth	r3, r3
 800ade0:	b209      	sxth	r1, r1
 800ade2:	f002 fcd2 	bl	800d78a <lv_area_set>
                lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800ade6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ade8:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir),
 800adec:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
 800adf0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
                lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800adf2:	441a      	add	r2, r3
                rb_origo.x + LV_CIRC_OCT2_X(cir),
 800adf4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir),
 800adf6:	b212      	sxth	r2, r2
                rb_origo.x + LV_CIRC_OCT2_X(cir),
 800adf8:	440b      	add	r3, r1
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir),
 800adfa:	1a41      	subs	r1, r0, r1
 800adfc:	9200      	str	r2, [sp, #0]
 800adfe:	f107 0098 	add.w	r0, r7, #152	; 0x98
 800ae02:	b21b      	sxth	r3, r3
 800ae04:	b209      	sxth	r1, r1
 800ae06:	f002 fcc0 	bl	800d78a <lv_area_set>
                lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800ae0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae0c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
    lv_area_set(&mid_top_area,  lt_origo.x + LV_CIRC_OCT5_X(cir),
 800ae10:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 800ae14:	6df8      	ldr	r0, [r7, #92]	; 0x5c
                lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800ae16:	1a9a      	subs	r2, r3, r2
                rt_origo.x + LV_CIRC_OCT8_X(cir),
 800ae18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    lv_area_set(&mid_top_area,  lt_origo.x + LV_CIRC_OCT5_X(cir),
 800ae1a:	b212      	sxth	r2, r2
                rt_origo.x + LV_CIRC_OCT8_X(cir),
 800ae1c:	440b      	add	r3, r1
    lv_area_set(&mid_top_area,  lt_origo.x + LV_CIRC_OCT5_X(cir),
 800ae1e:	1a41      	subs	r1, r0, r1
 800ae20:	9200      	str	r2, [sp, #0]
 800ae22:	f107 0088 	add.w	r0, r7, #136	; 0x88
 800ae26:	b21b      	sxth	r3, r3
 800ae28:	b209      	sxth	r1, r1
 800ae2a:	f002 fcae 	bl	800d78a <lv_area_set>
                lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800ae2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae30:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir),
 800ae34:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
 800ae38:	6df8      	ldr	r0, [r7, #92]	; 0x5c
                lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800ae3a:	1a9a      	subs	r2, r3, r2
                rt_origo.x + LV_CIRC_OCT7_X(cir),
 800ae3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir),
 800ae3e:	b212      	sxth	r2, r2
                rt_origo.x + LV_CIRC_OCT7_X(cir),
 800ae40:	440b      	add	r3, r1
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir),
 800ae42:	1a41      	subs	r1, r0, r1
 800ae44:	9200      	str	r2, [sp, #0]
 800ae46:	f107 0080 	add.w	r0, r7, #128	; 0x80
 800ae4a:	b21b      	sxth	r3, r3
 800ae4c:	b209      	sxth	r1, r1
 800ae4e:	f002 fc9c 	bl	800d78a <lv_area_set>
    lv_coord_t out_y_seg_start = 0;
 800ae52:	2300      	movs	r3, #0
 800ae54:	637b      	str	r3, [r7, #52]	; 0x34
                px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask, aa_color_hor_bottom, aa_opa);
 800ae56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae58:	3301      	adds	r3, #1
 800ae5a:	607b      	str	r3, [r7, #4]
    while(lv_circ_cont(&cir)) {
 800ae5c:	f107 0078 	add.w	r0, r7, #120	; 0x78
 800ae60:	f002 fd66 	bl	800d930 <lv_circ_cont>
 800ae64:	2800      	cmp	r0, #0
 800ae66:	f040 856d 	bne.w	800b944 <lv_draw_rect+0xeb8>
    if(mcolor.full == gcolor.full) act_color = mcolor;
 800ae6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae6c:	454b      	cmp	r3, r9
 800ae6e:	f040 8727 	bne.w	800bcc0 <lv_draw_rect+0x1234>
 800ae72:	461a      	mov	r2, r3
    fill_fp(&edge_top_area, mask, act_color, opa);
 800ae74:	4b62      	ldr	r3, [pc, #392]	; (800b000 <lv_draw_rect+0x574>)
 800ae76:	4659      	mov	r1, fp
 800ae78:	f107 0080 	add.w	r0, r7, #128	; 0x80
 800ae7c:	681c      	ldr	r4, [r3, #0]
 800ae7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae80:	47a0      	blx	r4
    if(edge_top_area.y1 != mid_top_area.y1) {
 800ae82:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800ae86:	f9b7 2082 	ldrsh.w	r2, [r7, #130]	; 0x82
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	d015      	beq.n	800aeba <lv_draw_rect+0x42e>
        if(mcolor.full == gcolor.full) act_color = mcolor;
 800ae8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ae90:	454a      	cmp	r2, r9
 800ae92:	d00d      	beq.n	800aeb0 <lv_draw_rect+0x424>
            mix = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 800ae94:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
            act_color = lv_color_mix(mcolor, gcolor, mix);
 800ae98:	4649      	mov	r1, r9
 800ae9a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
            mix = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 800ae9c:	1ad2      	subs	r2, r2, r3
 800ae9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aea0:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 800aea4:	fbb2 f2f3 	udiv	r2, r2, r3
            act_color = lv_color_mix(mcolor, gcolor, mix);
 800aea8:	b2d2      	uxtb	r2, r2
 800aeaa:	f7ff fda9 	bl	800aa00 <lv_color_mix>
 800aeae:	4602      	mov	r2, r0
        fill_fp(&mid_top_area, mask, act_color, opa);
 800aeb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aeb2:	4659      	mov	r1, fp
 800aeb4:	f107 0088 	add.w	r0, r7, #136	; 0x88
 800aeb8:	47a0      	blx	r4
    if(mcolor.full == gcolor.full) act_color = mcolor;
 800aeba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aebc:	454b      	cmp	r3, r9
 800aebe:	f040 8711 	bne.w	800bce4 <lv_draw_rect+0x1258>
 800aec2:	461a      	mov	r2, r3
    fill_fp(&mid_bot_area, mask, act_color, opa);
 800aec4:	4b4e      	ldr	r3, [pc, #312]	; (800b000 <lv_draw_rect+0x574>)
 800aec6:	4659      	mov	r1, fp
 800aec8:	f107 0090 	add.w	r0, r7, #144	; 0x90
 800aecc:	681c      	ldr	r4, [r3, #0]
 800aece:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aed0:	47a0      	blx	r4
    if(edge_bot_area.y1 != mid_bot_area.y1) {
 800aed2:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 800aed6:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d015      	beq.n	800af0a <lv_draw_rect+0x47e>
        if(mcolor.full == gcolor.full) act_color = mcolor;
 800aede:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aee0:	454a      	cmp	r2, r9
 800aee2:	d00d      	beq.n	800af00 <lv_draw_rect+0x474>
            mix = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 800aee4:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
            act_color = lv_color_mix(mcolor, gcolor, mix);
 800aee8:	4649      	mov	r1, r9
 800aeea:	6eb8      	ldr	r0, [r7, #104]	; 0x68
            mix = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 800aeec:	1ad2      	subs	r2, r2, r3
 800aeee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aef0:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 800aef4:	fbb2 f2f3 	udiv	r2, r2, r3
            act_color = lv_color_mix(mcolor, gcolor, mix);
 800aef8:	b2d2      	uxtb	r2, r2
 800aefa:	f7ff fd81 	bl	800aa00 <lv_color_mix>
 800aefe:	4602      	mov	r2, r0
        fill_fp(&edge_bot_area, mask, act_color, opa);
 800af00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af02:	4659      	mov	r1, fp
 800af04:	f107 0098 	add.w	r0, r7, #152	; 0x98
 800af08:	47a0      	blx	r4
    edge_top_area.x1 = coords->x1 + radius + 2;
 800af0a:	f8ba 3000 	ldrh.w	r3, [sl]
    fill_fp(&edge_top_area, mask, style->body.main_color, opa);
 800af0e:	4659      	mov	r1, fp
    edge_top_area.x1 = coords->x1 + radius + 2;
 800af10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    fill_fp(&edge_top_area, mask, style->body.main_color, opa);
 800af12:	f107 0080 	add.w	r0, r7, #128	; 0x80
    edge_top_area.x1 = coords->x1 + radius + 2;
 800af16:	3302      	adds	r3, #2
 800af18:	4413      	add	r3, r2
 800af1a:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
    edge_top_area.x2 = coords->x2 - radius - 2;
 800af1e:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800af22:	3b02      	subs	r3, #2
 800af24:	1a9b      	subs	r3, r3, r2
    fill_fp(&edge_top_area, mask, style->body.main_color, opa);
 800af26:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    edge_top_area.x2 = coords->x2 - radius - 2;
 800af28:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
    edge_top_area.y1 = coords->y1;
 800af2c:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
    fill_fp(&edge_top_area, mask, style->body.main_color, opa);
 800af30:	6852      	ldr	r2, [r2, #4]
    edge_top_area.y1 = coords->y1;
 800af32:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
    edge_top_area.y2 = coords->y1;
 800af36:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    fill_fp(&edge_top_area, mask, style->body.main_color, opa);
 800af3a:	4b31      	ldr	r3, [pc, #196]	; (800b000 <lv_draw_rect+0x574>)
 800af3c:	681c      	ldr	r4, [r3, #0]
 800af3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af40:	47a0      	blx	r4
    edge_top_area.y1 = coords->y2;
 800af42:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
    fill_fp(&edge_top_area, mask, style->body.grad_color, opa);
 800af46:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800af48:	4659      	mov	r1, fp
    edge_top_area.y1 = coords->y2;
 800af4a:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
    fill_fp(&edge_top_area, mask, style->body.grad_color, opa);
 800af4e:	f107 0080 	add.w	r0, r7, #128	; 0x80
    edge_top_area.y2 = coords->y2;
 800af52:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    fill_fp(&edge_top_area, mask, style->body.grad_color, opa);
 800af56:	6892      	ldr	r2, [r2, #8]
 800af58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af5a:	47a0      	blx	r4
    lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800af5c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
    aa_color_hor_bottom = lv_color_mix(gcolor, mcolor, mix);
 800af5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800af60:	4648      	mov	r0, r9
    lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800af62:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af66:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800af6a:	1a9b      	subs	r3, r3, r2
    mix = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800af6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800af6e:	b21b      	sxth	r3, r3
 800af70:	623b      	str	r3, [r7, #32]
    mix = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800af72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af74:	1a9c      	subs	r4, r3, r2
 800af76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af78:	ebc4 2404 	rsb	r4, r4, r4, lsl #8
 800af7c:	fbb4 f4f3 	udiv	r4, r4, r3
 800af80:	b2e4      	uxtb	r4, r4
    aa_color_hor_bottom = lv_color_mix(gcolor, mcolor, mix);
 800af82:	4622      	mov	r2, r4
 800af84:	f7ff fd3c 	bl	800aa00 <lv_color_mix>
    aa_color_hor_top = lv_color_mix(mcolor, gcolor, mix);
 800af88:	4622      	mov	r2, r4
    aa_color_hor_bottom = lv_color_mix(gcolor, mcolor, mix);
 800af8a:	63b8      	str	r0, [r7, #56]	; 0x38
    aa_color_hor_top = lv_color_mix(mcolor, gcolor, mix);
 800af8c:	4649      	mov	r1, r9
 800af8e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800af90:	f7ff fd36 	bl	800aa00 <lv_color_mix>
 800af94:	2300      	movs	r3, #0
 800af96:	63f8      	str	r0, [r7, #60]	; 0x3c
 800af98:	633b      	str	r3, [r7, #48]	; 0x30
        px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask, aa_color_hor_top, aa_opa);
 800af9a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800af9e:	627b      	str	r3, [r7, #36]	; 0x24
 800afa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afa4:	3301      	adds	r3, #1
 800afa6:	18d3      	adds	r3, r2, r3
 800afa8:	613b      	str	r3, [r7, #16]
 800afaa:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
    for(i = 0; i  < seg_size; i++) {
 800afae:	6a3b      	ldr	r3, [r7, #32]
 800afb0:	428b      	cmp	r3, r1
 800afb2:	f300 86a9 	bgt.w	800bd08 <lv_draw_rect+0x127c>
    if(LV_MATH_ABS(aa_p.x - aa_p.y) == seg_size) {
 800afb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800afb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800afba:	1a9b      	subs	r3, r3, r2
 800afbc:	6a3a      	ldr	r2, [r7, #32]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	bfb8      	it	lt
 800afc2:	425b      	neglt	r3, r3
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d149      	bne.n	800b05c <lv_draw_rect+0x5d0>
        mix = (uint32_t)((uint32_t)(out_x_last) * 255) / height;
 800afc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
        aa_color_hor_top = lv_color_mix(gcolor, mcolor, mix);
 800afca:	4648      	mov	r0, r9
 800afcc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
        mix = (uint32_t)((uint32_t)(out_x_last) * 255) / height;
 800afce:	ebc3 2403 	rsb	r4, r3, r3, lsl #8
 800afd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800afd4:	fbb4 f4f3 	udiv	r4, r4, r3
 800afd8:	b2e4      	uxtb	r4, r4
        aa_color_hor_top = lv_color_mix(gcolor, mcolor, mix);
 800afda:	4622      	mov	r2, r4
 800afdc:	f7ff fd10 	bl	800aa00 <lv_color_mix>
        aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 800afe0:	4622      	mov	r2, r4
 800afe2:	4649      	mov	r1, r9
        aa_color_hor_top = lv_color_mix(gcolor, mcolor, mix);
 800afe4:	63f8      	str	r0, [r7, #60]	; 0x3c
        aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 800afe6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800afe8:	f7ff fd0a 	bl	800aa00 <lv_color_mix>
        lv_opa_t aa_opa = opa >> 1;
 800afec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
        px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask, aa_color_hor_bottom, aa_opa);
 800afee:	f8b7 4044 	ldrh.w	r4, [r7, #68]	; 0x44
 800aff2:	465a      	mov	r2, fp
        lv_opa_t aa_opa = opa >> 1;
 800aff4:	ea4f 0853 	mov.w	r8, r3, lsr #1
        px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask, aa_color_hor_bottom, aa_opa);
 800aff8:	4b02      	ldr	r3, [pc, #8]	; (800b004 <lv_draw_rect+0x578>)
        aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 800affa:	63b8      	str	r0, [r7, #56]	; 0x38
        px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask, aa_color_hor_bottom, aa_opa);
 800affc:	681d      	ldr	r5, [r3, #0]
 800affe:	e003      	b.n	800b008 <lv_draw_rect+0x57c>
 800b000:	08083784 	.word	0x08083784
 800b004:	08083790 	.word	0x08083790
 800b008:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b00a:	4423      	add	r3, r4
 800b00c:	b21e      	sxth	r6, r3
 800b00e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b010:	4423      	add	r3, r4
 800b012:	4630      	mov	r0, r6
 800b014:	b21b      	sxth	r3, r3
 800b016:	66bb      	str	r3, [r7, #104]	; 0x68
 800b018:	f8cd 8000 	str.w	r8, [sp]
 800b01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b01e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b020:	47a8      	blx	r5
        px_fp(lb_origo.x + LV_CIRC_OCT4_X(aa_p), lb_origo.y + LV_CIRC_OCT4_Y(aa_p), mask, aa_color_hor_bottom, aa_opa);
 800b022:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b024:	f8cd 8000 	str.w	r8, [sp]
 800b028:	465a      	mov	r2, fp
 800b02a:	eba3 0904 	sub.w	r9, r3, r4
 800b02e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b032:	fa0f f989 	sxth.w	r9, r9
 800b036:	4648      	mov	r0, r9
 800b038:	47a8      	blx	r5
        px_fp(lt_origo.x + LV_CIRC_OCT6_X(aa_p), lt_origo.y + LV_CIRC_OCT6_Y(aa_p), mask, aa_color_hor_top, aa_opa);
 800b03a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b03c:	f8cd 8000 	str.w	r8, [sp]
 800b040:	465a      	mov	r2, fp
 800b042:	1b1c      	subs	r4, r3, r4
 800b044:	4648      	mov	r0, r9
 800b046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b048:	b224      	sxth	r4, r4
 800b04a:	4621      	mov	r1, r4
 800b04c:	47a8      	blx	r5
        px_fp(rt_origo.x + LV_CIRC_OCT8_X(aa_p), rt_origo.y + LV_CIRC_OCT8_Y(aa_p), mask, aa_color_hor_top, aa_opa);
 800b04e:	f8cd 8000 	str.w	r8, [sp]
 800b052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b054:	465a      	mov	r2, fp
 800b056:	4621      	mov	r1, r4
 800b058:	4630      	mov	r0, r6
 800b05a:	47a8      	blx	r5
    if(style->body.border.width != 0 && style->body.border.part != LV_BORDER_NONE) {
 800b05c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b05e:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 800b062:	2c00      	cmp	r4, #0
 800b064:	f000 81bc 	beq.w	800b3e0 <lv_draw_rect+0x954>
 800b068:	f893 8016 	ldrb.w	r8, [r3, #22]
 800b06c:	f1b8 0f00 	cmp.w	r8, #0
 800b070:	f000 81b6 	beq.w	800b3e0 <lv_draw_rect+0x954>
    uint16_t radius = style->body.radius;
 800b074:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    uint16_t bwidth = style->body.border.width;
 800b078:	b2a4      	uxth	r4, r4
 800b07a:	f9ba 6000 	ldrsh.w	r6, [sl]
    uint16_t radius = style->body.radius;
 800b07e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b080:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
    uint16_t bwidth = style->body.border.width;
 800b084:	667c      	str	r4, [r7, #100]	; 0x64
 800b086:	653b      	str	r3, [r7, #80]	; 0x50
 800b088:	b2b3      	uxth	r3, r6
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.border.opa : (uint16_t)((uint16_t) style->body.border.opa * opa_scale) >> 8;
 800b08a:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 800b08c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b08e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b090:	2cff      	cmp	r4, #255	; 0xff
 800b092:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800b094:	f103 0101 	add.w	r1, r3, #1
 800b098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b09a:	bf18      	it	ne
 800b09c:	6d7d      	ldrne	r5, [r7, #84]	; 0x54
 800b09e:	eba1 0103 	sub.w	r1, r1, r3
 800b0a2:	7de4      	ldrb	r4, [r4, #23]
 800b0a4:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
 800b0a8:	bf18      	it	ne
 800b0aa:	436c      	mulne	r4, r5
    lv_color_t color = style->body.border.color;
 800b0ac:	6efd      	ldr	r5, [r7, #108]	; 0x6c
 800b0ae:	64bb      	str	r3, [r7, #72]	; 0x48
 800b0b0:	b209      	sxth	r1, r1
    return area_p->y2 - area_p->y1 + 1;
 800b0b2:	f8ba 3006 	ldrh.w	r3, [sl, #6]
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.border.opa : (uint16_t)((uint16_t) style->body.border.opa * opa_scale) >> 8;
 800b0b6:	bf18      	it	ne
 800b0b8:	f3c4 2407 	ubfxne	r4, r4, #8, #8
    lv_color_t color = style->body.border.color;
 800b0bc:	692d      	ldr	r5, [r5, #16]
 800b0be:	663b      	str	r3, [r7, #96]	; 0x60
 800b0c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b0c2:	66bd      	str	r5, [r7, #104]	; 0x68
    bwidth--;
 800b0c4:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800b0c6:	3201      	adds	r2, #1
 800b0c8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b0cc:	3d01      	subs	r5, #1
    uint16_t radius = style->body.radius;
 800b0ce:	f8b7 0058 	ldrh.w	r0, [r7, #88]	; 0x58
 800b0d2:	1ad2      	subs	r2, r2, r3
    bwidth--;
 800b0d4:	b2ad      	uxth	r5, r5
 800b0d6:	b212      	sxth	r2, r2
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800b0d8:	f7ff fcc5 	bl	800aa66 <lv_draw_cont_radius_corr>
    if(radius < bwidth) {
 800b0dc:	4285      	cmp	r5, r0
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800b0de:	4681      	mov	r9, r0
    if(radius < bwidth) {
 800b0e0:	f240 86a5 	bls.w	800be2e <lv_draw_rect+0x13a2>
        length_corr = bwidth - radius - LV_ANTIALIAS;
 800b0e4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b0e6:	3a02      	subs	r2, #2
 800b0e8:	1a12      	subs	r2, r2, r0
 800b0ea:	b212      	sxth	r2, r2
 800b0ec:	65fa      	str	r2, [r7, #92]	; 0x5c
        corner_size = bwidth;
 800b0ee:	b22a      	sxth	r2, r5
    if(style->body.radius == 0) {
 800b0f0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b0f2:	f008 0102 	and.w	r1, r8, #2
 800b0f6:	2800      	cmp	r0, #0
 800b0f8:	f040 86a2 	bne.w	800be40 <lv_draw_rect+0x13b4>
        if(part & LV_BORDER_TOP) {
 800b0fc:	f001 09ff 	and.w	r9, r1, #255	; 0xff
 800b100:	b1a1      	cbz	r1, 800b12c <lv_draw_rect+0x6a0>
            work_area.x2 = coords->x2;
 800b102:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
            work_area.y2 = coords->y1 + bwidth;
 800b106:	442b      	add	r3, r5
            work_area.x1 = coords->x1;
 800b108:	f8a7 6098 	strh.w	r6, [r7, #152]	; 0x98
            fill_fp(&work_area, mask, color, opa);
 800b10c:	4659      	mov	r1, fp
            work_area.x2 = coords->x2;
 800b10e:	f8a7 209c 	strh.w	r2, [r7, #156]	; 0x9c
            fill_fp(&work_area, mask, color, opa);
 800b112:	f107 0098 	add.w	r0, r7, #152	; 0x98
            work_area.y1 = coords->y1;
 800b116:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
            fill_fp(&work_area, mask, color, opa);
 800b11a:	4ebb      	ldr	r6, [pc, #748]	; (800b408 <lv_draw_rect+0x97c>)
            work_area.y1 = coords->y1;
 800b11c:	f8a7 209a 	strh.w	r2, [r7, #154]	; 0x9a
            work_area.y2 = coords->y1 + bwidth;
 800b120:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
            fill_fp(&work_area, mask, color, opa);
 800b124:	4623      	mov	r3, r4
 800b126:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b128:	6836      	ldr	r6, [r6, #0]
 800b12a:	47b0      	blx	r6
        if(part & LV_BORDER_RIGHT) {
 800b12c:	f018 0f08 	tst.w	r8, #8
 800b130:	d023      	beq.n	800b17a <lv_draw_rect+0x6ee>
            work_area.x1 = coords->x2 - bwidth;
 800b132:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800b136:	f1b9 0f00 	cmp.w	r9, #0
            fill_fp(&work_area, mask, color, opa);
 800b13a:	4eb3      	ldr	r6, [pc, #716]	; (800b408 <lv_draw_rect+0x97c>)
 800b13c:	4659      	mov	r1, fp
            work_area.x1 = coords->x2 - bwidth;
 800b13e:	eba3 0205 	sub.w	r2, r3, r5
            work_area.x2 = coords->x2;
 800b142:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800b146:	f8ba 3002 	ldrh.w	r3, [sl, #2]
            fill_fp(&work_area, mask, color, opa);
 800b14a:	f107 0098 	add.w	r0, r7, #152	; 0x98
            work_area.x1 = coords->x2 - bwidth;
 800b14e:	f8a7 2098 	strh.w	r2, [r7, #152]	; 0x98
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800b152:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b154:	bf08      	it	eq
 800b156:	2200      	moveq	r2, #0
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800b158:	f018 0f01 	tst.w	r8, #1
            fill_fp(&work_area, mask, color, opa);
 800b15c:	6836      	ldr	r6, [r6, #0]
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800b15e:	4413      	add	r3, r2
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800b160:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b162:	bf08      	it	eq
 800b164:	2200      	moveq	r2, #0
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800b166:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800b16a:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 800b16e:	1a9b      	subs	r3, r3, r2
            fill_fp(&work_area, mask, color, opa);
 800b170:	6eba      	ldr	r2, [r7, #104]	; 0x68
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800b172:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
            fill_fp(&work_area, mask, color, opa);
 800b176:	4623      	mov	r3, r4
 800b178:	47b0      	blx	r6
        if(part & LV_BORDER_LEFT) {
 800b17a:	f018 0f04 	tst.w	r8, #4
 800b17e:	f008 0801 	and.w	r8, r8, #1
 800b182:	d022      	beq.n	800b1ca <lv_draw_rect+0x73e>
            work_area.x1 = coords->x1;
 800b184:	f9ba 3000 	ldrsh.w	r3, [sl]
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800b188:	f1b9 0f00 	cmp.w	r9, #0
 800b18c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
            fill_fp(&work_area, mask, color, opa);
 800b18e:	4659      	mov	r1, fp
            work_area.x1 = coords->x1;
 800b190:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
            work_area.x2 = coords->x1 + bwidth;
 800b194:	442b      	add	r3, r5
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800b196:	bf08      	it	eq
 800b198:	2200      	moveq	r2, #0
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800b19a:	f1b8 0f00 	cmp.w	r8, #0
            work_area.x2 = coords->x1 + bwidth;
 800b19e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
            fill_fp(&work_area, mask, color, opa);
 800b1a2:	f107 0098 	add.w	r0, r7, #152	; 0x98
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800b1a6:	f8ba 3002 	ldrh.w	r3, [sl, #2]
            fill_fp(&work_area, mask, color, opa);
 800b1aa:	4e97      	ldr	r6, [pc, #604]	; (800b408 <lv_draw_rect+0x97c>)
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800b1ac:	4413      	add	r3, r2
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800b1ae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b1b0:	bf08      	it	eq
 800b1b2:	2200      	moveq	r2, #0
            fill_fp(&work_area, mask, color, opa);
 800b1b4:	6836      	ldr	r6, [r6, #0]
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800b1b6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800b1ba:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 800b1be:	1a9b      	subs	r3, r3, r2
            fill_fp(&work_area, mask, color, opa);
 800b1c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800b1c2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
            fill_fp(&work_area, mask, color, opa);
 800b1c6:	4623      	mov	r3, r4
 800b1c8:	47b0      	blx	r6
        if(part & LV_BORDER_BOTTOM) {
 800b1ca:	f1b8 0f00 	cmp.w	r8, #0
 800b1ce:	d016      	beq.n	800b1fe <lv_draw_rect+0x772>
            work_area.x1 = coords->x1;
 800b1d0:	f8ba 3000 	ldrh.w	r3, [sl]
 800b1d4:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
            work_area.x2 = coords->x2;
 800b1d8:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800b1dc:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
            work_area.y1 = coords->y2 - bwidth;
 800b1e0:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 800b1e4:	1b5d      	subs	r5, r3, r5
 800b1e6:	f8a7 509a 	strh.w	r5, [r7, #154]	; 0x9a
            work_area.y2 = coords->y2;
 800b1ea:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
            fill_fp(&work_area, mask, color, opa);
 800b1ee:	4623      	mov	r3, r4
 800b1f0:	4c85      	ldr	r4, [pc, #532]	; (800b408 <lv_draw_rect+0x97c>)
 800b1f2:	4659      	mov	r1, fp
 800b1f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b1f6:	f107 0098 	add.w	r0, r7, #152	; 0x98
 800b1fa:	6824      	ldr	r4, [r4, #0]
 800b1fc:	47a0      	blx	r4
        if(style->body.radius != 0) {
 800b1fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b200:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800b204:	2800      	cmp	r0, #0
 800b206:	f000 80eb 	beq.w	800b3e0 <lv_draw_rect+0x954>
    uint16_t bwidth = style->body.border.width;
 800b20a:	8a9d      	ldrh	r5, [r3, #20]
    uint16_t radius = style->body.radius ;
 800b20c:	b280      	uxth	r0, r0
    lv_color_t color = style->body.border.color;
 800b20e:	691b      	ldr	r3, [r3, #16]
 800b210:	f8ba 6006 	ldrh.w	r6, [sl, #6]
    lv_coord_t radius_in = radius - bwidth;
 800b214:	f1c5 0502 	rsb	r5, r5, #2
    lv_color_t color = style->body.border.color;
 800b218:	64bb      	str	r3, [r7, #72]	; 0x48
    lv_border_part_t part = style->body.border.part;
 800b21a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    return area_p->x2 - area_p->x1 + 1;
 800b21c:	f8ba 8000 	ldrh.w	r8, [sl]
 800b220:	7d9b      	ldrb	r3, [r3, #22]
    return area_p->y2 - area_p->y1 + 1;
 800b222:	f8ba 9002 	ldrh.w	r9, [sl, #2]
 800b226:	663b      	str	r3, [r7, #96]	; 0x60
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.border.opa : (uint16_t)((uint16_t) style->body.border.opa * opa_scale) >> 8;
 800b228:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b22a:	2bff      	cmp	r3, #255	; 0xff
 800b22c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b22e:	bf18      	it	ne
 800b230:	6d7a      	ldrne	r2, [r7, #84]	; 0x54
 800b232:	7ddb      	ldrb	r3, [r3, #23]
 800b234:	bf18      	it	ne
 800b236:	4353      	mulne	r3, r2
 800b238:	f106 0201 	add.w	r2, r6, #1
    lb_origo.y = coords->y2 - radius - LV_ANTIALIAS;
 800b23c:	f106 36ff 	add.w	r6, r6, #4294967295
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.border.opa : (uint16_t)((uint16_t) style->body.border.opa * opa_scale) >> 8;
 800b240:	bf18      	it	ne
 800b242:	f3c3 2307 	ubfxne	r3, r3, #8, #8
 800b246:	eba2 0209 	sub.w	r2, r2, r9
    lt_origo.y = coords->y1 + radius + LV_ANTIALIAS;
 800b24a:	f109 0901 	add.w	r9, r9, #1
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.border.opa : (uint16_t)((uint16_t) style->body.border.opa * opa_scale) >> 8;
 800b24e:	65bb      	str	r3, [r7, #88]	; 0x58
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800b250:	b212      	sxth	r2, r2
    return area_p->x2 - area_p->x1 + 1;
 800b252:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800b256:	1c59      	adds	r1, r3, #1
 800b258:	eba1 0108 	sub.w	r1, r1, r8
    lt_origo.x = coords->x1 + radius + LV_ANTIALIAS;
 800b25c:	f108 0801 	add.w	r8, r8, #1
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800b260:	b209      	sxth	r1, r1
 800b262:	f7ff fc00 	bl	800aa66 <lv_draw_cont_radius_corr>
    lt_origo.x = coords->x1 + radius + LV_ANTIALIAS;
 800b266:	4480      	add	r8, r0
    lt_origo.y = coords->y1 + radius + LV_ANTIALIAS;
 800b268:	4481      	add	r9, r0
    lb_origo.y = coords->y2 - radius - LV_ANTIALIAS;
 800b26a:	1a36      	subs	r6, r6, r0
    lt_origo.x = coords->x1 + radius + LV_ANTIALIAS;
 800b26c:	fa1f f288 	uxth.w	r2, r8
    rt_origo.x = coords->x2 - radius - LV_ANTIALIAS;
 800b270:	3b01      	subs	r3, #1
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800b272:	4604      	mov	r4, r0
    lv_circ_init(&cir_out, &tmp_out, radius);
 800b274:	fa0f fa80 	sxth.w	sl, r0
    lt_origo.x = coords->x1 + radius + LV_ANTIALIAS;
 800b278:	65fa      	str	r2, [r7, #92]	; 0x5c
    lt_origo.y = coords->y1 + radius + LV_ANTIALIAS;
 800b27a:	fa1f f289 	uxth.w	r2, r9
    rt_origo.x = coords->x2 - radius - LV_ANTIALIAS;
 800b27e:	1a1b      	subs	r3, r3, r0
    lv_coord_t radius_in = radius - bwidth;
 800b280:	442c      	add	r4, r5
    lt_origo.y = coords->y1 + radius + LV_ANTIALIAS;
 800b282:	66ba      	str	r2, [r7, #104]	; 0x68
    lv_circ_init(&cir_out, &tmp_out, radius);
 800b284:	f107 0178 	add.w	r1, r7, #120	; 0x78
    lt_origo.y = coords->y1 + radius + LV_ANTIALIAS;
 800b288:	f9b7 2068 	ldrsh.w	r2, [r7, #104]	; 0x68
    rt_origo.x = coords->x2 - radius - LV_ANTIALIAS;
 800b28c:	b29b      	uxth	r3, r3
    lv_circ_init(&cir_out, &tmp_out, radius);
 800b28e:	f107 0088 	add.w	r0, r7, #136	; 0x88
                    px_fp(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask, style->body.border.color, aa_opa);
 800b292:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b40c <lv_draw_rect+0x980>
    lt_origo.y = coords->y1 + radius + LV_ANTIALIAS;
 800b296:	62fa      	str	r2, [r7, #44]	; 0x2c
    lb_origo.y = coords->y2 - radius - LV_ANTIALIAS;
 800b298:	b2b2      	uxth	r2, r6
    rt_origo.x = coords->x2 - radius - LV_ANTIALIAS;
 800b29a:	653b      	str	r3, [r7, #80]	; 0x50
    lb_origo.y = coords->y2 - radius - LV_ANTIALIAS;
 800b29c:	667a      	str	r2, [r7, #100]	; 0x64
 800b29e:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	; 0x64
 800b2a2:	62ba      	str	r2, [r7, #40]	; 0x28
    lv_circ_init(&cir_out, &tmp_out, radius);
 800b2a4:	4652      	mov	r2, sl
 800b2a6:	f002 fb3c 	bl	800d922 <lv_circ_init>
    lv_circ_init(&cir_in, &tmp_in, radius_in);
 800b2aa:	f107 0180 	add.w	r1, r7, #128	; 0x80
    lv_coord_t radius_in = radius - bwidth;
 800b2ae:	b223      	sxth	r3, r4
    lv_circ_init(&cir_in, &tmp_in, radius_in);
 800b2b0:	f107 0090 	add.w	r0, r7, #144	; 0x90
 800b2b4:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
    lv_coord_t radius_in = radius - bwidth;
 800b2b8:	657b      	str	r3, [r7, #84]	; 0x54
    lv_circ_init(&cir_in, &tmp_in, radius_in);
 800b2ba:	f002 fb32 	bl	800d922 <lv_circ_init>
    lv_coord_t in_y_seg_start = 0;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	643b      	str	r3, [r7, #64]	; 0x40
    lv_coord_t out_y_seg_start = 0;
 800b2c2:	637b      	str	r3, [r7, #52]	; 0x34
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800b2c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b2c6:	f003 0309 	and.w	r3, r3, #9
 800b2ca:	633b      	str	r3, [r7, #48]	; 0x30
    while(cir_out.y <= cir_out.x) {
 800b2cc:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800b2d0:	f9b7 2088 	ldrsh.w	r2, [r7, #136]	; 0x88
 800b2d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	f280 8702 	bge.w	800c0e0 <lv_draw_rect+0x1654>
    lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800b2dc:	8ebd      	ldrh	r5, [r7, #52]	; 0x34
            px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 800b2de:	fa1f f88a 	uxth.w	r8, sl
    lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800b2e2:	1b5b      	subs	r3, r3, r5
 800b2e4:	b21b      	sxth	r3, r3
 800b2e6:	64bb      	str	r3, [r7, #72]	; 0x48
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	64fb      	str	r3, [r7, #76]	; 0x4c
            px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 800b2ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	4443      	add	r3, r8
 800b2f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2f4:	f9b7 104c 	ldrsh.w	r1, [r7, #76]	; 0x4c
    for(i = 0; i  < seg_size; i++) {
 800b2f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2fa:	428b      	cmp	r3, r1
 800b2fc:	f301 81d8 	bgt.w	800c6b0 <lv_draw_rect+0x1c24>
    if(LV_MATH_ABS(aa_p.x - aa_p.y) == seg_size) {
 800b300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b302:	ebaa 0603 	sub.w	r6, sl, r3
 800b306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b308:	2e00      	cmp	r6, #0
 800b30a:	bfb8      	it	lt
 800b30c:	4276      	neglt	r6, r6
 800b30e:	429e      	cmp	r6, r3
 800b310:	d153      	bne.n	800b3ba <lv_draw_rect+0x92e>
        lv_opa_t aa_opa = opa >> 1;
 800b312:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b314:	085d      	lsrs	r5, r3, #1
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800b316:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b318:	f003 0309 	and.w	r3, r3, #9
 800b31c:	2b09      	cmp	r3, #9
 800b31e:	d10e      	bne.n	800b33e <lv_draw_rect+0x8b2>
            px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask, style->body.border.color, aa_opa);
 800b320:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b322:	fa1f f08a 	uxth.w	r0, sl
 800b326:	4c39      	ldr	r4, [pc, #228]	; (800b40c <lv_draw_rect+0x980>)
 800b328:	465a      	mov	r2, fp
 800b32a:	1819      	adds	r1, r3, r0
 800b32c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b32e:	9500      	str	r5, [sp, #0]
 800b330:	4418      	add	r0, r3
 800b332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b334:	b209      	sxth	r1, r1
 800b336:	6824      	ldr	r4, [r4, #0]
 800b338:	691b      	ldr	r3, [r3, #16]
 800b33a:	b200      	sxth	r0, r0
 800b33c:	47a0      	blx	r4
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800b33e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b340:	f003 0305 	and.w	r3, r3, #5
 800b344:	2b05      	cmp	r3, #5
 800b346:	d10e      	bne.n	800b366 <lv_draw_rect+0x8da>
            px_fp(lb_origo.x + LV_CIRC_OCT4_X(aa_p), lb_origo.y + LV_CIRC_OCT4_Y(aa_p), mask, style->body.border.color, aa_opa);
 800b348:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b34a:	fa1f f08a 	uxth.w	r0, sl
 800b34e:	4c2f      	ldr	r4, [pc, #188]	; (800b40c <lv_draw_rect+0x980>)
 800b350:	465a      	mov	r2, fp
 800b352:	1819      	adds	r1, r3, r0
 800b354:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b356:	9500      	str	r5, [sp, #0]
 800b358:	1a18      	subs	r0, r3, r0
 800b35a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b35c:	b209      	sxth	r1, r1
 800b35e:	6824      	ldr	r4, [r4, #0]
 800b360:	691b      	ldr	r3, [r3, #16]
 800b362:	b200      	sxth	r0, r0
 800b364:	47a0      	blx	r4
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800b366:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b368:	f003 0306 	and.w	r3, r3, #6
 800b36c:	2b06      	cmp	r3, #6
 800b36e:	d10e      	bne.n	800b38e <lv_draw_rect+0x902>
            px_fp(lt_origo.x + LV_CIRC_OCT6_X(aa_p), lt_origo.y + LV_CIRC_OCT6_Y(aa_p), mask, style->body.border.color, aa_opa);
 800b370:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b372:	fa1f f08a 	uxth.w	r0, sl
 800b376:	4c25      	ldr	r4, [pc, #148]	; (800b40c <lv_draw_rect+0x980>)
 800b378:	465a      	mov	r2, fp
 800b37a:	1a19      	subs	r1, r3, r0
 800b37c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b37e:	9500      	str	r5, [sp, #0]
 800b380:	1a18      	subs	r0, r3, r0
 800b382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b384:	b209      	sxth	r1, r1
 800b386:	6824      	ldr	r4, [r4, #0]
 800b388:	691b      	ldr	r3, [r3, #16]
 800b38a:	b200      	sxth	r0, r0
 800b38c:	47a0      	blx	r4
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800b38e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b390:	f003 030a 	and.w	r3, r3, #10
 800b394:	2b0a      	cmp	r3, #10
 800b396:	d110      	bne.n	800b3ba <lv_draw_rect+0x92e>
            px_fp(rt_origo.x + LV_CIRC_OCT8_X(aa_p), rt_origo.y + LV_CIRC_OCT8_Y(aa_p), mask, style->body.border.color, aa_opa);
 800b398:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b39a:	fa1f f88a 	uxth.w	r8, sl
 800b39e:	4c1b      	ldr	r4, [pc, #108]	; (800b40c <lv_draw_rect+0x980>)
 800b3a0:	465a      	mov	r2, fp
 800b3a2:	eba3 0108 	sub.w	r1, r3, r8
 800b3a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3a8:	9500      	str	r5, [sp, #0]
 800b3aa:	4498      	add	r8, r3
 800b3ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3ae:	b209      	sxth	r1, r1
 800b3b0:	6824      	ldr	r4, [r4, #0]
 800b3b2:	691b      	ldr	r3, [r3, #16]
 800b3b4:	fa0f f088 	sxth.w	r0, r8
 800b3b8:	47a0      	blx	r4
    seg_size = in_y_seg_end - in_y_seg_start;
 800b3ba:	f8b7 6040 	ldrh.w	r6, [r7, #64]	; 0x40
 800b3be:	2400      	movs	r4, #0
 800b3c0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
            px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 800b3c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    seg_size = in_y_seg_end - in_y_seg_start;
 800b3c6:	1b9b      	subs	r3, r3, r6
 800b3c8:	b21b      	sxth	r3, r3
 800b3ca:	64fb      	str	r3, [r7, #76]	; 0x4c
            px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 800b3cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3ce:	3b01      	subs	r3, #1
 800b3d0:	4413      	add	r3, r2
 800b3d2:	b21b      	sxth	r3, r3
 800b3d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3d6:	b221      	sxth	r1, r4
    for(i = 0; i  < seg_size; i++) {
 800b3d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3da:	428b      	cmp	r3, r1
 800b3dc:	f301 8216 	bgt.w	800c80c <lv_draw_rect+0x1d80>
}
 800b3e0:	37a4      	adds	r7, #164	; 0xa4
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 800b3e8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
        lv_circ_next(&circ, &circ_tmp);
 800b3ea:	f107 0074 	add.w	r0, r7, #116	; 0x74
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 800b3ee:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
 800b3f2:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 800b3f6:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
        curve_x[LV_CIRC_OCT2_Y(circ)] = LV_CIRC_OCT2_X(circ);
 800b3fa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        lv_circ_next(&circ, &circ_tmp);
 800b3fe:	4629      	mov	r1, r5
 800b400:	f002 fa9f 	bl	800d942 <lv_circ_next>
 800b404:	f7ff bbd0 	b.w	800aba8 <lv_draw_rect+0x11c>
 800b408:	08083784 	.word	0x08083784
 800b40c:	08083790 	.word	0x08083790
        line_1d_blur[line] = (uint32_t)((uint32_t)(filter_width - line) * (opa * 2)  << SHADOW_OPA_EXTRA_PRECISION) / (filter_width * filter_width);
 800b410:	fbb3 fcfe 	udiv	ip, r3, lr
 800b414:	6c3e      	ldr	r6, [r7, #64]	; 0x40
 800b416:	442b      	add	r3, r5
 800b418:	f846 c020 	str.w	ip, [r6, r0, lsl #2]
 800b41c:	3001      	adds	r0, #1
 800b41e:	f7ff bbec 	b.w	800abfa <lv_draw_rect+0x16e>
                if(line + line_rel < 0) {                       /*Below the radius, here is the blur of the edge */
 800b422:	1953      	adds	r3, r2, r5
 800b424:	f140 80a4 	bpl.w	800b570 <lv_draw_rect+0xae4>
                    col_rel = radius - curve_x[line] - col;
 800b428:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b42a:	6e3e      	ldr	r6, [r7, #96]	; 0x60
 800b42c:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800b430:	1af3      	subs	r3, r6, r3
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 800b432:	6dfe      	ldr	r6, [r7, #92]	; 0x5c
 800b434:	1b9b      	subs	r3, r3, r6
 800b436:	b21b      	sxth	r3, r3
                if(col_rel < -swidth) {                         /*Outside of the blurred area. */
 800b438:	4573      	cmp	r3, lr
 800b43a:	f280 80a3 	bge.w	800b584 <lv_draw_rect+0xaf8>
                    if(line_rel == -swidth) line_ready = true;  /*If no data even on the very first line then it wont't be anything else in this line*/
 800b43e:	eba2 060e 	sub.w	r6, r2, lr
 800b442:	4272      	negs	r2, r6
 800b444:	4172      	adcs	r2, r6
            line_2d_blur[col] = px_opa_sum >> SHADOW_OPA_EXTRA_PRECISION;
 800b446:	0a09      	lsrs	r1, r1, #8
 800b448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b44a:	3001      	adds	r0, #1
 800b44c:	5519      	strb	r1, [r3, r4]
            if(line_ready) {
 800b44e:	2a00      	cmp	r2, #0
 800b450:	f000 80ab 	beq.w	800b5aa <lv_draw_rect+0xb1e>
                col++;      /*To make this line to the last one ( drawing will go to '< col')*/
 800b454:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b456:	3301      	adds	r3, #1
 800b458:	b29b      	uxth	r3, r3
 800b45a:	65fb      	str	r3, [r7, #92]	; 0x5c
        point_rt.x = curve_x[line] + ofs_rt.x + 1;
 800b45c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                px_fp(point_lb.x, point_lb.y, mask, style->body.shadow.color, line_2d_blur[d]);
 800b45e:	f8df 84e0 	ldr.w	r8, [pc, #1248]	; 800b940 <lv_draw_rect+0xeb4>
        point_rt.x = curve_x[line] + ofs_rt.x + 1;
 800b462:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 800b466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b468:	1c5a      	adds	r2, r3, #1
 800b46a:	440a      	add	r2, r1
 800b46c:	b293      	uxth	r3, r2
 800b46e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b470:	60fb      	str	r3, [r7, #12]
 800b472:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b476:	1ad2      	subs	r2, r2, r3
 800b478:	b212      	sxth	r2, r2
 800b47a:	653a      	str	r2, [r7, #80]	; 0x50
 800b47c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b47e:	4413      	add	r3, r2
 800b480:	b21b      	sxth	r3, r3
 800b482:	65bb      	str	r3, [r7, #88]	; 0x58
        point_lt.x = ofs_lt.x -  curve_x[line] - 1;
 800b484:	69fb      	ldr	r3, [r7, #28]
 800b486:	3b01      	subs	r3, #1
 800b488:	1a5b      	subs	r3, r3, r1
 800b48a:	b29b      	uxth	r3, r3
 800b48c:	60bb      	str	r3, [r7, #8]
 800b48e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b490:	1c5c      	adds	r4, r3, #1
 800b492:	2300      	movs	r3, #0
 800b494:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b496:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b498:	68ba      	ldr	r2, [r7, #8]
 800b49a:	eba2 0903 	sub.w	r9, r2, r3
 800b49e:	68fa      	ldr	r2, [r7, #12]
 800b4a0:	18d6      	adds	r6, r2, r3
        for(d = 1; d < col; d++) {
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	fa0f f989 	sxth.w	r9, r9
 800b4a8:	b232      	sxth	r2, r6
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	63ba      	str	r2, [r7, #56]	; 0x38
 800b4ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	f200 8089 	bhi.w	800b5c8 <lv_draw_rect+0xb3c>
        if(line == 0) lv_draw_shadow_full_straight(coords, mask, style, line_2d_blur);
 800b4b6:	2d00      	cmp	r5, #0
 800b4b8:	d155      	bne.n	800b566 <lv_draw_rect+0xada>
    lv_coord_t swidth = style->body.shadow.width;// + LV_ANTIALIAS;
 800b4ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4bc:	f9ba 4004 	ldrsh.w	r4, [sl, #4]
 800b4c0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800b4c4:	b2a2      	uxth	r2, r4
 800b4c6:	f9ba 8006 	ldrsh.w	r8, [sl, #6]
 800b4ca:	653b      	str	r3, [r7, #80]	; 0x50
 800b4cc:	f9ba 3000 	ldrsh.w	r3, [sl]
    return area_p->y2 - area_p->y1 + 1;
 800b4d0:	fa1f f588 	uxth.w	r5, r8
    return area_p->x2 - area_p->x1 + 1;
 800b4d4:	65fa      	str	r2, [r7, #92]	; 0x5c
 800b4d6:	b29a      	uxth	r2, r3
 800b4d8:	f9ba 9002 	ldrsh.w	r9, [sl, #2]
 800b4dc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800b4de:	65ba      	str	r2, [r7, #88]	; 0x58
    return area_p->y2 - area_p->y1 + 1;
 800b4e0:	fa1f f689 	uxth.w	r6, r9
 800b4e4:	1c6a      	adds	r2, r5, #1
    return area_p->x2 - area_p->x1 + 1;
 800b4e6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b4e8:	3101      	adds	r1, #1
    right_area.y2 = coords->y2 - radius - LV_ANTIALIAS;
 800b4ea:	3d01      	subs	r5, #1
    return area_p->y2 - area_p->y1 + 1;
 800b4ec:	1b92      	subs	r2, r2, r6
    right_area.y1 = coords->y1 + radius + LV_ANTIALIAS;
 800b4ee:	3601      	adds	r6, #1
    return area_p->x2 - area_p->x1 + 1;
 800b4f0:	1a09      	subs	r1, r1, r0
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800b4f2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b4f4:	b212      	sxth	r2, r2
 800b4f6:	b209      	sxth	r1, r1
 800b4f8:	8980      	ldrh	r0, [r0, #12]
 800b4fa:	f7ff fab4 	bl	800aa66 <lv_draw_cont_radius_corr>
    radius += LV_ANTIALIAS;
 800b4fe:	3001      	adds	r0, #1
    left_area.x1 = coords->x1 - 1 + LV_ANTIALIAS;
 800b500:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
    left_area.x2 = left_area.x1;
 800b504:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
    radius += LV_ANTIALIAS;
 800b508:	b280      	uxth	r0, r0
    top_area.x1 = coords->x1 + radius + LV_ANTIALIAS;
 800b50a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    right_area.x1 = coords->x2 + 1 - LV_ANTIALIAS;
 800b50c:	f8a7 4080 	strh.w	r4, [r7, #128]	; 0x80
    right_area.y1 = coords->y1 + radius + LV_ANTIALIAS;
 800b510:	4406      	add	r6, r0
    right_area.x2 = right_area.x1;
 800b512:	f8a7 4084 	strh.w	r4, [r7, #132]	; 0x84
    top_area.x1 = coords->x1 + radius + LV_ANTIALIAS;
 800b516:	1c5c      	adds	r4, r3, #1
    top_area.x2 = coords->x2 - radius - LV_ANTIALIAS;
 800b518:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    right_area.y2 = coords->y2 - radius - LV_ANTIALIAS;
 800b51a:	1a2d      	subs	r5, r5, r0
    top_area.x1 = coords->x1 + radius + LV_ANTIALIAS;
 800b51c:	4404      	add	r4, r0
    right_area.y1 = coords->y1 + radius + LV_ANTIALIAS;
 800b51e:	b236      	sxth	r6, r6
    top_area.x2 = coords->x2 - radius - LV_ANTIALIAS;
 800b520:	3b01      	subs	r3, #1
    right_area.y2 = coords->y2 - radius - LV_ANTIALIAS;
 800b522:	b22d      	sxth	r5, r5
    top_area.x1 = coords->x1 + radius + LV_ANTIALIAS;
 800b524:	b224      	sxth	r4, r4
    bottom_area.y1 = coords->y2 + 1 - LV_ANTIALIAS;
 800b526:	f8a7 809a 	strh.w	r8, [r7, #154]	; 0x9a
    top_area.x2 = coords->x2 - radius - LV_ANTIALIAS;
 800b52a:	1a1b      	subs	r3, r3, r0
    bottom_area.y2 = bottom_area.y1;
 800b52c:	f8a7 809e 	strh.w	r8, [r7, #158]	; 0x9e
    top_area.x1 = coords->x1 + radius + LV_ANTIALIAS;
 800b530:	f8a7 4090 	strh.w	r4, [r7, #144]	; 0x90
    top_area.x2 = coords->x2 - radius - LV_ANTIALIAS;
 800b534:	b21b      	sxth	r3, r3
    bottom_area.x1 = coords->x1 + radius + LV_ANTIALIAS;
 800b536:	f8a7 4098 	strh.w	r4, [r7, #152]	; 0x98
        fill_fp(&right_area, mask, style->body.shadow.color, opa_act);
 800b53a:	f8df 8400 	ldr.w	r8, [pc, #1024]	; 800b93c <lv_draw_rect+0xeb0>
    for(d = 1 /*+ LV_ANTIALIAS*/; d <= swidth/* - LV_ANTIALIAS*/; d++) {
 800b53e:	2401      	movs	r4, #1
    right_area.y1 = coords->y1 + radius + LV_ANTIALIAS;
 800b540:	f8a7 6082 	strh.w	r6, [r7, #130]	; 0x82
    right_area.y2 = coords->y2 - radius - LV_ANTIALIAS;
 800b544:	f8a7 5086 	strh.w	r5, [r7, #134]	; 0x86
    left_area.y1 = coords->y1 + radius + LV_ANTIALIAS;
 800b548:	f8a7 608a 	strh.w	r6, [r7, #138]	; 0x8a
    left_area.y2 = coords->y2 - radius - LV_ANTIALIAS;
 800b54c:	f8a7 508e 	strh.w	r5, [r7, #142]	; 0x8e
    top_area.y1 = coords->y1 - 1 + LV_ANTIALIAS;
 800b550:	f8a7 9092 	strh.w	r9, [r7, #146]	; 0x92
    top_area.x2 = coords->x2 - radius - LV_ANTIALIAS;
 800b554:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
    top_area.y2 = top_area.y1;
 800b558:	f8a7 9096 	strh.w	r9, [r7, #150]	; 0x96
    bottom_area.x2 = coords->x2 - radius - LV_ANTIALIAS;
 800b55c:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
    for(d = 1 /*+ LV_ANTIALIAS*/; d <= swidth/* - LV_ANTIALIAS*/; d++) {
 800b560:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b562:	42a3      	cmp	r3, r4
 800b564:	da78      	bge.n	800b658 <lv_draw_rect+0xbcc>
 800b566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b568:	3301      	adds	r3, #1
 800b56a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b56c:	f7ff bb7a 	b.w	800ac64 <lv_draw_rect+0x1d8>
                } else if(line + line_rel > radius) {           /*Above the radius, here won't be more 1D blur*/
 800b570:	6cbe      	ldr	r6, [r7, #72]	; 0x48
 800b572:	429e      	cmp	r6, r3
 800b574:	db26      	blt.n	800b5c4 <lv_draw_rect+0xb38>
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 800b576:	6ebe      	ldr	r6, [r7, #104]	; 0x68
 800b578:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 800b57c:	f836 6015 	ldrh.w	r6, [r6, r5, lsl #1]
 800b580:	1b9b      	subs	r3, r3, r6
 800b582:	e756      	b.n	800b432 <lv_draw_rect+0x9a6>
                } else if(col_rel > swidth) px_opa_sum += line_1d_blur[0];      /*Inside the not blurred area*/
 800b584:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 800b586:	3201      	adds	r2, #1
 800b588:	429e      	cmp	r6, r3
 800b58a:	b212      	sxth	r2, r2
                else px_opa_sum += line_1d_blur[swidth - col_rel];              /*On the 1D blur (+ swidth to align to the center)*/
 800b58c:	bfa9      	itett	ge
 800b58e:	6e7e      	ldrge	r6, [r7, #100]	; 0x64
                } else if(col_rel > swidth) px_opa_sum += line_1d_blur[0];      /*Inside the not blurred area*/
 800b590:	6c3b      	ldrlt	r3, [r7, #64]	; 0x40
                else px_opa_sum += line_1d_blur[swidth - col_rel];              /*On the 1D blur (+ swidth to align to the center)*/
 800b592:	1af3      	subge	r3, r6, r3
 800b594:	6c3e      	ldrge	r6, [r7, #64]	; 0x40
                } else if(col_rel > swidth) px_opa_sum += line_1d_blur[0];      /*Inside the not blurred area*/
 800b596:	bfb4      	ite	lt
 800b598:	681b      	ldrlt	r3, [r3, #0]
                else px_opa_sum += line_1d_blur[swidth - col_rel];              /*On the 1D blur (+ swidth to align to the center)*/
 800b59a:	f856 3023 	ldrge.w	r3, [r6, r3, lsl #2]
 800b59e:	4419      	add	r1, r3
 800b5a0:	e00c      	b.n	800b5bc <lv_draw_rect+0xb30>
                if(col_rel < -swidth) {                         /*Outside of the blurred area. */
 800b5a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    for(line = 0; line <= radius + swidth; line++) {        /*Check all rows and make the 1D blur to 2D*/
 800b5a4:	2000      	movs	r0, #0
                if(col_rel < -swidth) {                         /*Outside of the blurred area. */
 800b5a6:	f1c3 0e00 	rsb	lr, r3, #0
 800b5aa:	b283      	uxth	r3, r0
        for(col = 0; col <= radius + swidth; col++) {        /*Check all pixels in a 1D blur line (from the origo to last shadow pixel (radius + swidth))*/
 800b5ac:	461c      	mov	r4, r3
 800b5ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b5b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5b2:	42a3      	cmp	r3, r4
 800b5b4:	f6ff af52 	blt.w	800b45c <lv_draw_rect+0x9d0>
            for(line_rel = -swidth; line_rel <= swidth; line_rel ++) {
 800b5b8:	687a      	ldr	r2, [r7, #4]
            uint32_t px_opa_sum = 0;
 800b5ba:	2100      	movs	r1, #0
            for(line_rel = -swidth; line_rel <= swidth; line_rel ++) {
 800b5bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	f6bf af2f 	bge.w	800b422 <lv_draw_rect+0x996>
                } else if(line + line_rel > radius) {           /*Above the radius, here won't be more 1D blur*/
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	e73e      	b.n	800b446 <lv_draw_rect+0x9ba>
            if(point_lt.x < ofs_lt.x && point_lt.y < ofs_lt.y) {
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	454b      	cmp	r3, r9
 800b5cc:	dd1d      	ble.n	800b60a <lv_draw_rect+0xb7e>
 800b5ce:	6a3b      	ldr	r3, [r7, #32]
 800b5d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	dd0a      	ble.n	800b5ec <lv_draw_rect+0xb60>
                px_fp(point_lt.x, point_lt.y, mask, style->body.shadow.color, line_2d_blur[d]);
 800b5d6:	7823      	ldrb	r3, [r4, #0]
 800b5d8:	465a      	mov	r2, fp
 800b5da:	4648      	mov	r0, r9
 800b5dc:	9300      	str	r3, [sp, #0]
 800b5de:	f8d8 3000 	ldr.w	r3, [r8]
 800b5e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b5e4:	461e      	mov	r6, r3
 800b5e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5e8:	699b      	ldr	r3, [r3, #24]
 800b5ea:	47b0      	blx	r6
            if(point_lb.x < ofs_lb.x && point_lb.y > ofs_lb.y) {
 800b5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	da0a      	bge.n	800b60a <lv_draw_rect+0xb7e>
                px_fp(point_lb.x, point_lb.y, mask, style->body.shadow.color, line_2d_blur[d]);
 800b5f4:	7823      	ldrb	r3, [r4, #0]
 800b5f6:	465a      	mov	r2, fp
 800b5f8:	4648      	mov	r0, r9
 800b5fa:	9300      	str	r3, [sp, #0]
 800b5fc:	f8d8 3000 	ldr.w	r3, [r8]
 800b600:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b602:	461e      	mov	r6, r3
 800b604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b606:	699b      	ldr	r3, [r3, #24]
 800b608:	47b0      	blx	r6
            if(point_rt.x > ofs_rt.x && point_rt.y < ofs_rt.y) {
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b60e:	4293      	cmp	r3, r2
 800b610:	da1d      	bge.n	800b64e <lv_draw_rect+0xbc2>
 800b612:	6a3b      	ldr	r3, [r7, #32]
 800b614:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b616:	4293      	cmp	r3, r2
 800b618:	dd0a      	ble.n	800b630 <lv_draw_rect+0xba4>
                px_fp(point_rt.x, point_rt.y, mask, style->body.shadow.color, line_2d_blur[d]);
 800b61a:	7823      	ldrb	r3, [r4, #0]
 800b61c:	465a      	mov	r2, fp
 800b61e:	9300      	str	r3, [sp, #0]
 800b620:	f8d8 3000 	ldr.w	r3, [r8]
 800b624:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b626:	461e      	mov	r6, r3
 800b628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b62a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b62c:	699b      	ldr	r3, [r3, #24]
 800b62e:	47b0      	blx	r6
            if(point_rb.x > ofs_rb.x && point_rb.y > ofs_rb.y) {
 800b630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b632:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b634:	4293      	cmp	r3, r2
 800b636:	da0a      	bge.n	800b64e <lv_draw_rect+0xbc2>
                px_fp(point_rb.x, point_rb.y, mask, style->body.shadow.color, line_2d_blur[d]);
 800b638:	7823      	ldrb	r3, [r4, #0]
 800b63a:	465a      	mov	r2, fp
 800b63c:	9300      	str	r3, [sp, #0]
 800b63e:	f8d8 3000 	ldr.w	r3, [r8]
 800b642:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b644:	461e      	mov	r6, r3
 800b646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b648:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b64a:	699b      	ldr	r3, [r3, #24]
 800b64c:	47b0      	blx	r6
 800b64e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b650:	3401      	adds	r4, #1
 800b652:	3301      	adds	r3, #1
 800b654:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b656:	e71e      	b.n	800b496 <lv_draw_rect+0xa0a>
        opa_act = map[d];
 800b658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        fill_fp(&right_area, mask, style->body.shadow.color, opa_act);
 800b65a:	4659      	mov	r1, fp
 800b65c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b65e:	f107 0080 	add.w	r0, r7, #128	; 0x80
        opa_act = map[d];
 800b662:	5d1e      	ldrb	r6, [r3, r4]
 800b664:	3401      	adds	r4, #1
        fill_fp(&right_area, mask, style->body.shadow.color, opa_act);
 800b666:	f8d8 5000 	ldr.w	r5, [r8]
 800b66a:	4633      	mov	r3, r6
 800b66c:	6992      	ldr	r2, [r2, #24]
 800b66e:	47a8      	blx	r5
        right_area.x1++;
 800b670:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
        fill_fp(&left_area, mask, style->body.shadow.color, opa_act);
 800b674:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b676:	4659      	mov	r1, fp
        right_area.x1++;
 800b678:	3301      	adds	r3, #1
        fill_fp(&left_area, mask, style->body.shadow.color, opa_act);
 800b67a:	f107 0088 	add.w	r0, r7, #136	; 0x88
 800b67e:	6992      	ldr	r2, [r2, #24]
 800b680:	b224      	sxth	r4, r4
        right_area.x1++;
 800b682:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
        right_area.x2++;
 800b686:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800b68a:	3301      	adds	r3, #1
 800b68c:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
        fill_fp(&left_area, mask, style->body.shadow.color, opa_act);
 800b690:	4633      	mov	r3, r6
 800b692:	47a8      	blx	r5
        left_area.x1--;
 800b694:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
        fill_fp(&top_area, mask, style->body.shadow.color, opa_act);
 800b698:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b69a:	4659      	mov	r1, fp
        left_area.x1--;
 800b69c:	3b01      	subs	r3, #1
        fill_fp(&top_area, mask, style->body.shadow.color, opa_act);
 800b69e:	f107 0090 	add.w	r0, r7, #144	; 0x90
 800b6a2:	6992      	ldr	r2, [r2, #24]
        left_area.x1--;
 800b6a4:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
        left_area.x2--;
 800b6a8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800b6ac:	3b01      	subs	r3, #1
 800b6ae:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
        fill_fp(&top_area, mask, style->body.shadow.color, opa_act);
 800b6b2:	4633      	mov	r3, r6
 800b6b4:	47a8      	blx	r5
        top_area.y1--;
 800b6b6:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
        fill_fp(&bottom_area, mask, style->body.shadow.color, opa_act);
 800b6ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b6bc:	4659      	mov	r1, fp
        top_area.y1--;
 800b6be:	3b01      	subs	r3, #1
        fill_fp(&bottom_area, mask, style->body.shadow.color, opa_act);
 800b6c0:	f107 0098 	add.w	r0, r7, #152	; 0x98
 800b6c4:	6992      	ldr	r2, [r2, #24]
        top_area.y1--;
 800b6c6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
        top_area.y2--;
 800b6ca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b6ce:	3b01      	subs	r3, #1
 800b6d0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
        fill_fp(&bottom_area, mask, style->body.shadow.color, opa_act);
 800b6d4:	4633      	mov	r3, r6
 800b6d6:	47a8      	blx	r5
        bottom_area.y1++;
 800b6d8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800b6dc:	3301      	adds	r3, #1
 800b6de:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
        bottom_area.y2++;
 800b6e2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800b6e6:	3301      	adds	r3, #1
 800b6e8:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 800b6ec:	e738      	b.n	800b560 <lv_draw_rect+0xad4>
    } else if(style->body.shadow.type == LV_SHADOW_BOTTOM) {
 800b6ee:	2a00      	cmp	r2, #0
 800b6f0:	f47f aac0 	bne.w	800ac74 <lv_draw_rect+0x1e8>
    return area_p->y2 - area_p->y1 + 1;
 800b6f4:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 800b6f8:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 800b6fc:	3201      	adds	r2, #1
    return area_p->x2 - area_p->x1 + 1;
 800b6fe:	f8ba 1004 	ldrh.w	r1, [sl, #4]
{
 800b702:	f8c7 d03c 	str.w	sp, [r7, #60]	; 0x3c
    return area_p->y2 - area_p->y1 + 1;
 800b706:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 800b708:	3101      	adds	r1, #1
 800b70a:	f8ba 3000 	ldrh.w	r3, [sl]
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800b70e:	b212      	sxth	r2, r2
 800b710:	1ac9      	subs	r1, r1, r3
 800b712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b714:	b209      	sxth	r1, r1
 800b716:	8998      	ldrh	r0, [r3, #12]
 800b718:	f7ff f9a5 	bl	800aa66 <lv_draw_cont_radius_corr>
    radius += LV_ANTIALIAS * SHADOW_BOTTOM_AA_EXTRA_RADIUS;
 800b71c:	3003      	adds	r0, #3
    lv_circ_init(&circ, &circ_tmp, radius);
 800b71e:	f107 0188 	add.w	r1, r7, #136	; 0x88
    radius += LV_ANTIALIAS * SHADOW_BOTTOM_AA_EXTRA_RADIUS;
 800b722:	b284      	uxth	r4, r0
    lv_circ_init(&circ, &circ_tmp, radius);
 800b724:	f107 0090 	add.w	r0, r7, #144	; 0x90
    radius += LV_ANTIALIAS * SHADOW_BOTTOM_AA_EXTRA_RADIUS;
 800b728:	b223      	sxth	r3, r4
 800b72a:	663b      	str	r3, [r7, #96]	; 0x60
    swidth += LV_ANTIALIAS;
 800b72c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    lv_circ_init(&circ, &circ_tmp, radius);
 800b72e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    swidth += LV_ANTIALIAS;
 800b730:	8b9d      	ldrh	r5, [r3, #28]
    lv_coord_t curve_x[radius + 1];             /*Stores the 'x' coordinates of a quarter circle.*/
 800b732:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    swidth += LV_ANTIALIAS;
 800b734:	3501      	adds	r5, #1
    lv_coord_t curve_x[radius + 1];             /*Stores the 'x' coordinates of a quarter circle.*/
 800b736:	005b      	lsls	r3, r3, #1
    swidth += LV_ANTIALIAS;
 800b738:	b22d      	sxth	r5, r5
    lv_coord_t curve_x[radius + 1];             /*Stores the 'x' coordinates of a quarter circle.*/
 800b73a:	330a      	adds	r3, #10
 800b73c:	f023 0307 	bic.w	r3, r3, #7
 800b740:	ebad 0d03 	sub.w	sp, sp, r3
 800b744:	ab02      	add	r3, sp, #8
 800b746:	66bb      	str	r3, [r7, #104]	; 0x68
    lv_circ_init(&circ, &circ_tmp, radius);
 800b748:	f002 f8eb 	bl	800d922 <lv_circ_init>
    while(lv_circ_cont(&circ)) {
 800b74c:	f107 0090 	add.w	r0, r7, #144	; 0x90
 800b750:	f002 f8ee 	bl	800d930 <lv_circ_cont>
 800b754:	2800      	cmp	r0, #0
 800b756:	d14f      	bne.n	800b7f8 <lv_draw_rect+0xd6c>
    lv_opa_t line_1d_blur[swidth];
 800b758:	1deb      	adds	r3, r5, #7
 800b75a:	f023 0307 	bic.w	r3, r3, #7
 800b75e:	ebad 0d03 	sub.w	sp, sp, r3
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t) style->body.opa * opa_scale) >> 8;
 800b762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b764:	2bff      	cmp	r3, #255	; 0xff
 800b766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    lv_opa_t line_1d_blur[swidth];
 800b768:	f10d 0808 	add.w	r8, sp, #8
 800b76c:	7b9b      	ldrb	r3, [r3, #14]
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t) style->body.opa * opa_scale) >> 8;
 800b76e:	bf18      	it	ne
 800b770:	6d7a      	ldrne	r2, [r7, #84]	; 0x54
    ofs_lb.x = coords->x1 + radius + LV_ANTIALIAS;
 800b772:	4641      	mov	r1, r8
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t) style->body.opa * opa_scale) >> 8;
 800b774:	bf1c      	itt	ne
 800b776:	4353      	mulne	r3, r2
 800b778:	f3c3 2307 	ubfxne	r3, r3, #8, #8
 800b77c:	fb13 f005 	smulbb	r0, r3, r5
    for(col = 0; col < swidth; col++) {
 800b780:	eba1 0208 	sub.w	r2, r1, r8
 800b784:	b212      	sxth	r2, r2
 800b786:	4295      	cmp	r5, r2
 800b788:	dc46      	bgt.n	800b818 <lv_draw_rect+0xd8c>
    ofs_l.x = coords->x1 + radius;
 800b78a:	f8ba 3000 	ldrh.w	r3, [sl]
    ofs_r.x = coords->x2 - radius;
 800b78e:	f8ba 0004 	ldrh.w	r0, [sl, #4]
    ofs_l.x = coords->x1 + radius;
 800b792:	4423      	add	r3, r4
 800b794:	b29b      	uxth	r3, r3
 800b796:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b798:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 800b79c:	63bb      	str	r3, [r7, #56]	; 0x38
    ofs_l.y = coords->y2 - radius + 1 - LV_ANTIALIAS;
 800b79e:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 800b7a2:	65bb      	str	r3, [r7, #88]	; 0x58
 800b7a4:	1b1b      	subs	r3, r3, r4
    ofs_r.x = coords->x2 - radius;
 800b7a6:	1b04      	subs	r4, r0, r4
    ofs_l.y = coords->y2 - radius + 1 - LV_ANTIALIAS;
 800b7a8:	b29b      	uxth	r3, r3
 800b7aa:	637b      	str	r3, [r7, #52]	; 0x34
    ofs_r.x = coords->x2 - radius;
 800b7ac:	b2a3      	uxth	r3, r4
 800b7ae:	653b      	str	r3, [r7, #80]	; 0x50
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	667b      	str	r3, [r7, #100]	; 0x64
    for(col = 0; col <= radius; col++) {
 800b7b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b7b6:	f9b7 4064 	ldrsh.w	r4, [r7, #100]	; 0x64
 800b7ba:	42a3      	cmp	r3, r4
 800b7bc:	da33      	bge.n	800b826 <lv_draw_rect+0xd9a>
    area_mid.x1 = ofs_l.x + 1;
 800b7be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    area_mid.y2 = area_mid.y1;
 800b7c0:	f04f 0900 	mov.w	r9, #0
    area_mid.x1 = ofs_l.x + 1;
 800b7c4:	3301      	adds	r3, #1
 800b7c6:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
    area_mid.y1 = ofs_l.y + radius;
 800b7ca:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800b7ce:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
    area_mid.x2 = ofs_r.x - 1;
 800b7d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7d4:	1e5c      	subs	r4, r3, #1
    area_mid.y2 = area_mid.y1;
 800b7d6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
    area_mid.x2 = ofs_r.x - 1;
 800b7da:	f8a7 409c 	strh.w	r4, [r7, #156]	; 0x9c
        fill_fp(&area_mid, mask, style->body.shadow.color, line_1d_blur[d]);
 800b7de:	4c57      	ldr	r4, [pc, #348]	; (800b93c <lv_draw_rect+0xeb0>)
    area_mid.y2 = area_mid.y1;
 800b7e0:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    for(d = 0; d < swidth; d++) {
 800b7e4:	fa1f f389 	uxth.w	r3, r9
 800b7e8:	f109 0901 	add.w	r9, r9, #1
 800b7ec:	429d      	cmp	r5, r3
 800b7ee:	dc65      	bgt.n	800b8bc <lv_draw_rect+0xe30>
 800b7f0:	f8d7 d03c 	ldr.w	sp, [r7, #60]	; 0x3c
 800b7f4:	f7ff ba3e 	b.w	800ac74 <lv_draw_rect+0x1e8>
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 800b7f8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
        lv_circ_next(&circ, &circ_tmp);
 800b7fa:	f107 0090 	add.w	r0, r7, #144	; 0x90
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 800b7fe:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 800b802:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 800b806:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
        curve_x[LV_CIRC_OCT2_Y(circ)] = LV_CIRC_OCT2_X(circ);
 800b80a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        lv_circ_next(&circ, &circ_tmp);
 800b80e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800b812:	f002 f896 	bl	800d942 <lv_circ_next>
 800b816:	e799      	b.n	800b74c <lv_draw_rect+0xcc0>
        line_1d_blur[col] = (uint32_t)((uint32_t)(swidth - col) * opa / 2) / (swidth);
 800b818:	0842      	lsrs	r2, r0, #1
 800b81a:	1ac0      	subs	r0, r0, r3
 800b81c:	fbb2 f2f5 	udiv	r2, r2, r5
 800b820:	f801 2b01 	strb.w	r2, [r1], #1
 800b824:	e7ac      	b.n	800b780 <lv_draw_rect+0xcf4>
 800b826:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800b82a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
        point_l.y = ofs_l.y + curve_x[col];
 800b82c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b82e:	1ad2      	subs	r2, r2, r3
 800b830:	b212      	sxth	r2, r2
 800b832:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b834:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b836:	eb02 0144 	add.w	r1, r2, r4, lsl #1
 800b83a:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
 800b83e:	4410      	add	r0, r2
 800b840:	b280      	uxth	r0, r0
 800b842:	6338      	str	r0, [r7, #48]	; 0x30
 800b844:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b846:	4403      	add	r3, r0
 800b848:	b21b      	sxth	r3, r3
 800b84a:	647b      	str	r3, [r7, #68]	; 0x44
        int16_t diff = col == 0 ? 0 : curve_x[col - 1] - curve_x[col];
 800b84c:	b11c      	cbz	r4, 800b856 <lv_draw_rect+0xdca>
 800b84e:	f831 4c02 	ldrh.w	r4, [r1, #-2]
 800b852:	1aa4      	subs	r4, r4, r2
 800b854:	b2a4      	uxth	r4, r4
 800b856:	b223      	sxth	r3, r4
 800b858:	f04f 0900 	mov.w	r9, #0
 800b85c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b860:	444b      	add	r3, r9
 800b862:	b21b      	sxth	r3, r3
 800b864:	643b      	str	r3, [r7, #64]	; 0x40
        for(d = 0; d < swidth; d++) {
 800b866:	fa1f f389 	uxth.w	r3, r9
 800b86a:	429d      	cmp	r5, r3
 800b86c:	dc02      	bgt.n	800b874 <lv_draw_rect+0xde8>
 800b86e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b870:	3301      	adds	r3, #1
 800b872:	e79e      	b.n	800b7b2 <lv_draw_rect+0xd26>
            if(diff == 0) {
 800b874:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b876:	f818 6003 	ldrb.w	r6, [r8, r3]
 800b87a:	b12a      	cbz	r2, 800b888 <lv_draw_rect+0xdfc>
                px_opa = (uint16_t)((uint16_t)line_1d_blur[d] + line_1d_blur[d - diff]) >> 1;
 800b87c:	1a9b      	subs	r3, r3, r2
 800b87e:	f818 3003 	ldrb.w	r3, [r8, r3]
 800b882:	441e      	add	r6, r3
 800b884:	f3c6 0647 	ubfx	r6, r6, #1, #8
            px_fp(point_l.x, point_l.y, mask, style->body.shadow.color, px_opa);
 800b888:	4b2d      	ldr	r3, [pc, #180]	; (800b940 <lv_draw_rect+0xeb4>)
 800b88a:	465a      	mov	r2, fp
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b890:	9600      	str	r6, [sp, #0]
 800b892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b894:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b896:	699b      	ldr	r3, [r3, #24]
 800b898:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b89a:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800b89c:	47a0      	blx	r4
            if(point_r.x > ofs_l.x) {
 800b89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	da07      	bge.n	800b8b6 <lv_draw_rect+0xe2a>
                px_fp(point_r.x, point_r.y, mask, style->body.shadow.color, px_opa);
 800b8a6:	9600      	str	r6, [sp, #0]
 800b8a8:	465a      	mov	r2, fp
 800b8aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b8ae:	699b      	ldr	r3, [r3, #24]
 800b8b0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b8b2:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800b8b4:	47a0      	blx	r4
 800b8b6:	f109 0901 	add.w	r9, r9, #1
 800b8ba:	e7d0      	b.n	800b85e <lv_draw_rect+0xdd2>
        fill_fp(&area_mid, mask, style->body.shadow.color, line_1d_blur[d]);
 800b8bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b8be:	4659      	mov	r1, fp
 800b8c0:	f818 3003 	ldrb.w	r3, [r8, r3]
 800b8c4:	f107 0098 	add.w	r0, r7, #152	; 0x98
 800b8c8:	6992      	ldr	r2, [r2, #24]
 800b8ca:	6826      	ldr	r6, [r4, #0]
 800b8cc:	47b0      	blx	r6
        area_mid.y1 ++;
 800b8ce:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800b8d2:	3301      	adds	r3, #1
 800b8d4:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
        area_mid.y2 ++;
 800b8d8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800b8dc:	3301      	adds	r3, #1
 800b8de:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 800b8e2:	e77f      	b.n	800b7e4 <lv_draw_rect+0xd58>
        lv_coord_t row_end = coords->y2 - radius;
 800b8e4:	b292      	uxth	r2, r2
        if(style->body.radius != 0) {
 800b8e6:	bb1b      	cbnz	r3, 800b930 <lv_draw_rect+0xea4>
        lv_coord_t row_start = coords->y1 + radius;
 800b8e8:	b224      	sxth	r4, r4
        lv_coord_t row_end = coords->y2 - radius;
 800b8ea:	b213      	sxth	r3, r2
 800b8ec:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
            row_end -= 2;
 800b8f0:	667b      	str	r3, [r7, #100]	; 0x64
        for(row = row_start; row <= row_end; row ++) {
 800b8f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b8f4:	429c      	cmp	r4, r3
 800b8f6:	f73f aa16 	bgt.w	800ad26 <lv_draw_rect+0x29a>
            mix = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 800b8fa:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
            act_color = lv_color_mix(mcolor, gcolor, mix);
 800b8fe:	4648      	mov	r0, r9
            fill_fp(&work_area, mask, act_color, opa);
 800b900:	4d0e      	ldr	r5, [pc, #56]	; (800b93c <lv_draw_rect+0xeb0>)
            mix = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 800b902:	1b12      	subs	r2, r2, r4
            work_area.y1 = row;
 800b904:	f8a7 409a 	strh.w	r4, [r7, #154]	; 0x9a
            work_area.y2 = row;
 800b908:	f8a7 409e 	strh.w	r4, [r7, #158]	; 0x9e
 800b90c:	3401      	adds	r4, #1
            mix = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 800b90e:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
            act_color = lv_color_mix(mcolor, gcolor, mix);
 800b912:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b914:	b224      	sxth	r4, r4
            mix = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 800b916:	fbb2 f2f8 	udiv	r2, r2, r8
            act_color = lv_color_mix(mcolor, gcolor, mix);
 800b91a:	b2d2      	uxtb	r2, r2
 800b91c:	f7ff f870 	bl	800aa00 <lv_color_mix>
            fill_fp(&work_area, mask, act_color, opa);
 800b920:	4633      	mov	r3, r6
 800b922:	4602      	mov	r2, r0
 800b924:	4659      	mov	r1, fp
 800b926:	f107 0098 	add.w	r0, r7, #152	; 0x98
 800b92a:	682d      	ldr	r5, [r5, #0]
 800b92c:	47a8      	blx	r5
 800b92e:	e7e0      	b.n	800b8f2 <lv_draw_rect+0xe66>
            row_start += 2;
 800b930:	3402      	adds	r4, #2
            row_end -= 2;
 800b932:	1e93      	subs	r3, r2, #2
            row_start += 2;
 800b934:	b224      	sxth	r4, r4
            row_end -= 2;
 800b936:	b21b      	sxth	r3, r3
 800b938:	e7d8      	b.n	800b8ec <lv_draw_rect+0xe60>
 800b93a:	bf00      	nop
 800b93c:	08083784 	.word	0x08083784
 800b940:	08083790 	.word	0x08083790
        if(out_x_last != cir.x) {
 800b944:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	; 0x78
 800b948:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b94a:	4293      	cmp	r3, r2
 800b94c:	d031      	beq.n	800b9b2 <lv_draw_rect+0xf26>
            out_y_seg_end = cir.y;
 800b94e:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
            aa_color_hor_top = lv_color_mix(gcolor, mcolor, mix);
 800b952:	4648      	mov	r0, r9
 800b954:	6eb9      	ldr	r1, [r7, #104]	; 0x68
            out_y_seg_end = cir.y;
 800b956:	61bb      	str	r3, [r7, #24]
            lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800b958:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b95a:	633b      	str	r3, [r7, #48]	; 0x30
 800b95c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b95e:	69bb      	ldr	r3, [r7, #24]
 800b960:	1a9b      	subs	r3, r3, r2
            mix = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800b962:	6c7a      	ldr	r2, [r7, #68]	; 0x44
            lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800b964:	b21b      	sxth	r3, r3
 800b966:	62fb      	str	r3, [r7, #44]	; 0x2c
            mix = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800b968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b96a:	1a9c      	subs	r4, r3, r2
 800b96c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b96e:	ebc4 2404 	rsb	r4, r4, r4, lsl #8
 800b972:	fbb4 f4f3 	udiv	r4, r4, r3
 800b976:	b2e4      	uxtb	r4, r4
            aa_color_hor_top = lv_color_mix(gcolor, mcolor, mix);
 800b978:	4622      	mov	r2, r4
 800b97a:	f7ff f841 	bl	800aa00 <lv_color_mix>
            aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 800b97e:	4622      	mov	r2, r4
            aa_color_hor_top = lv_color_mix(gcolor, mcolor, mix);
 800b980:	63f8      	str	r0, [r7, #60]	; 0x3c
            aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 800b982:	4649      	mov	r1, r9
 800b984:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800b986:	f7ff f83b 	bl	800aa00 <lv_color_mix>
 800b98a:	2300      	movs	r3, #0
                px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask, aa_color_hor_bottom, aa_opa);
 800b98c:	687a      	ldr	r2, [r7, #4]
            aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 800b98e:	643b      	str	r3, [r7, #64]	; 0x40
                px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask, aa_color_hor_bottom, aa_opa);
 800b990:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
            aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 800b994:	63b8      	str	r0, [r7, #56]	; 0x38
                px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask, aa_color_hor_bottom, aa_opa);
 800b996:	627b      	str	r3, [r7, #36]	; 0x24
 800b998:	4413      	add	r3, r2
 800b99a:	60bb      	str	r3, [r7, #8]
 800b99c:	f9b7 1040 	ldrsh.w	r1, [r7, #64]	; 0x40
            for(i = 0; i  < seg_size; i++) {
 800b9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9a2:	428b      	cmp	r3, r1
 800b9a4:	f300 809c 	bgt.w	800bae0 <lv_draw_rect+0x1054>
            out_x_last = cir.x;
 800b9a8:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	; 0x78
 800b9ac:	647b      	str	r3, [r7, #68]	; 0x44
            out_y_seg_start = out_y_seg_end;
 800b9ae:	69bb      	ldr	r3, [r7, #24]
 800b9b0:	637b      	str	r3, [r7, #52]	; 0x34
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
 800b9b2:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 800b9b6:	f9b7 507a 	ldrsh.w	r5, [r7, #122]	; 0x7a
 800b9ba:	643b      	str	r3, [r7, #64]	; 0x40
 800b9bc:	69fb      	ldr	r3, [r7, #28]
        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
 800b9be:	69fa      	ldr	r2, [r7, #28]
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
 800b9c0:	eb05 0803 	add.w	r8, r5, r3
        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
 800b9c4:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 800b9c8:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
 800b9cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9ce:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	; 0x78
        if(mid_top_area.y1 != LV_CIRC_OCT8_Y(cir) + lt_origo.y) mid_top_refr = 1;
 800b9d2:	f9b7 608a 	ldrsh.w	r6, [r7, #138]	; 0x8a
        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
 800b9d6:	441a      	add	r2, r3
 800b9d8:	63ba      	str	r2, [r7, #56]	; 0x38
        if(mid_top_area.y1 != LV_CIRC_OCT8_Y(cir) + lt_origo.y) mid_top_refr = 1;
 800b9da:	6a3a      	ldr	r2, [r7, #32]
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 800b9dc:	1ad3      	subs	r3, r2, r3
        if(mid_top_area.y1 != LV_CIRC_OCT8_Y(cir) + lt_origo.y) mid_top_refr = 1;
 800b9de:	1b55      	subs	r5, r2, r5
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 800b9e0:	4299      	cmp	r1, r3
 800b9e2:	f040 87c4 	bne.w	800c96e <lv_draw_rect+0x1ee2>
        if(mid_top_refr != 0) {
 800b9e6:	42ae      	cmp	r6, r5
 800b9e8:	d00b      	beq.n	800ba02 <lv_draw_rect+0xf76>
            if(mcolor.full == gcolor.full) act_color = mcolor;
 800b9ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b9ec:	454b      	cmp	r3, r9
 800b9ee:	f040 812e 	bne.w	800bc4e <lv_draw_rect+0x11c2>
 800b9f2:	461a      	mov	r2, r3
            fill_fp(&mid_top_area, mask, act_color, opa);
 800b9f4:	4caf      	ldr	r4, [pc, #700]	; (800bcb4 <lv_draw_rect+0x1228>)
 800b9f6:	4659      	mov	r1, fp
 800b9f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b9fa:	f107 0088 	add.w	r0, r7, #136	; 0x88
 800b9fe:	6824      	ldr	r4, [r4, #0]
 800ba00:	47a0      	blx	r4
        if(mid_bot_refr != 0) {
 800ba02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba04:	4543      	cmp	r3, r8
 800ba06:	d00b      	beq.n	800ba20 <lv_draw_rect+0xf94>
            if(mcolor.full == gcolor.full) act_color = mcolor;
 800ba08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ba0a:	454b      	cmp	r3, r9
 800ba0c:	f040 8130 	bne.w	800bc70 <lv_draw_rect+0x11e4>
 800ba10:	461a      	mov	r2, r3
            fill_fp(&mid_bot_area, mask, act_color, opa);
 800ba12:	4ca8      	ldr	r4, [pc, #672]	; (800bcb4 <lv_draw_rect+0x1228>)
 800ba14:	4659      	mov	r1, fp
 800ba16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba18:	f107 0090 	add.w	r0, r7, #144	; 0x90
 800ba1c:	6824      	ldr	r4, [r4, #0]
 800ba1e:	47a0      	blx	r4
        if(edge_bot_refr != 0) {
 800ba20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba24:	4293      	cmp	r3, r2
 800ba26:	d00b      	beq.n	800ba40 <lv_draw_rect+0xfb4>
            if(mcolor.full == gcolor.full) act_color = mcolor;
 800ba28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ba2a:	454b      	cmp	r3, r9
 800ba2c:	f040 8131 	bne.w	800bc92 <lv_draw_rect+0x1206>
 800ba30:	461a      	mov	r2, r3
            fill_fp(&edge_bot_area, mask, act_color, opa);
 800ba32:	4ca0      	ldr	r4, [pc, #640]	; (800bcb4 <lv_draw_rect+0x1228>)
 800ba34:	4659      	mov	r1, fp
 800ba36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba38:	f107 0098 	add.w	r0, r7, #152	; 0x98
 800ba3c:	6824      	ldr	r4, [r4, #0]
 800ba3e:	47a0      	blx	r4
                    lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800ba40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba42:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
        lv_area_set(&mid_bot_area,  lb_origo.x + LV_CIRC_OCT4_X(cir),
 800ba46:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 800ba4a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
                    lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800ba4c:	441a      	add	r2, r3
                    rb_origo.x + LV_CIRC_OCT1_X(cir),
 800ba4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
        lv_area_set(&mid_bot_area,  lb_origo.x + LV_CIRC_OCT4_X(cir),
 800ba50:	b212      	sxth	r2, r2
                    rb_origo.x + LV_CIRC_OCT1_X(cir),
 800ba52:	440b      	add	r3, r1
        lv_area_set(&mid_bot_area,  lb_origo.x + LV_CIRC_OCT4_X(cir),
 800ba54:	1a41      	subs	r1, r0, r1
 800ba56:	9200      	str	r2, [sp, #0]
 800ba58:	f107 0090 	add.w	r0, r7, #144	; 0x90
 800ba5c:	b21b      	sxth	r3, r3
 800ba5e:	b209      	sxth	r1, r1
 800ba60:	f001 fe93 	bl	800d78a <lv_area_set>
                    lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800ba64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba66:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir),
 800ba6a:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
 800ba6e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
                    lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800ba70:	441a      	add	r2, r3
                    rb_origo.x + LV_CIRC_OCT2_X(cir),
 800ba72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir),
 800ba74:	b212      	sxth	r2, r2
                    rb_origo.x + LV_CIRC_OCT2_X(cir),
 800ba76:	440b      	add	r3, r1
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir),
 800ba78:	1a41      	subs	r1, r0, r1
 800ba7a:	9200      	str	r2, [sp, #0]
 800ba7c:	f107 0098 	add.w	r0, r7, #152	; 0x98
 800ba80:	b21b      	sxth	r3, r3
 800ba82:	b209      	sxth	r1, r1
 800ba84:	f001 fe81 	bl	800d78a <lv_area_set>
                    lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800ba88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba8a:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
        lv_area_set(&mid_top_area,  lt_origo.x + LV_CIRC_OCT5_X(cir),
 800ba8e:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 800ba92:	6df8      	ldr	r0, [r7, #92]	; 0x5c
                    lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800ba94:	1a9a      	subs	r2, r3, r2
                    rt_origo.x + LV_CIRC_OCT8_X(cir),
 800ba96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
        lv_area_set(&mid_top_area,  lt_origo.x + LV_CIRC_OCT5_X(cir),
 800ba98:	b212      	sxth	r2, r2
                    rt_origo.x + LV_CIRC_OCT8_X(cir),
 800ba9a:	440b      	add	r3, r1
        lv_area_set(&mid_top_area,  lt_origo.x + LV_CIRC_OCT5_X(cir),
 800ba9c:	1a41      	subs	r1, r0, r1
 800ba9e:	9200      	str	r2, [sp, #0]
 800baa0:	f107 0088 	add.w	r0, r7, #136	; 0x88
 800baa4:	b21b      	sxth	r3, r3
 800baa6:	b209      	sxth	r1, r1
 800baa8:	f001 fe6f 	bl	800d78a <lv_area_set>
                    lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800baac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800baae:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir),
 800bab2:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
 800bab6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
                    lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800bab8:	1a9a      	subs	r2, r3, r2
                    rt_origo.x + LV_CIRC_OCT7_X(cir),
 800baba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir),
 800babc:	b212      	sxth	r2, r2
                    rt_origo.x + LV_CIRC_OCT7_X(cir),
 800babe:	440b      	add	r3, r1
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir),
 800bac0:	1a41      	subs	r1, r0, r1
 800bac2:	9200      	str	r2, [sp, #0]
 800bac4:	f107 0080 	add.w	r0, r7, #128	; 0x80
 800bac8:	b21b      	sxth	r3, r3
 800baca:	b209      	sxth	r1, r1
 800bacc:	f001 fe5d 	bl	800d78a <lv_area_set>
        lv_circ_next(&cir, &cir_tmp);
 800bad0:	f107 0174 	add.w	r1, r7, #116	; 0x74
 800bad4:	f107 0078 	add.w	r0, r7, #120	; 0x78
 800bad8:	f001 ff33 	bl	800d942 <lv_circ_next>
 800badc:	f7ff b9be 	b.w	800ae5c <lv_draw_rect+0x3d0>
                if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) {    /*Use non-linear opa mapping on the first segment*/
 800bae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bae2:	2b05      	cmp	r3, #5
 800bae4:	f340 809b 	ble.w	800bc1e <lv_draw_rect+0x1192>

    if(seg == 0) return LV_OPA_TRANSP;
    else if(seg == 1) return LV_OPA_80;
    else {

        uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map) - 1)) / (seg - 1);
 800bae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800baea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800baec:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800baf0:	3a01      	subs	r2, #1
 800baf2:	fbb3 f3f2 	udiv	r3, r3, r2
        return (uint32_t)((uint32_t) opa_map[id] * opa) >> 8;
 800baf6:	4a70      	ldr	r2, [pc, #448]	; (800bcb8 <lv_draw_rect+0x122c>)
 800baf8:	b2db      	uxtb	r3, r3
 800bafa:	5cd4      	ldrb	r4, [r2, r3]
 800bafc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800bb00:	fb14 f403 	smulbb	r4, r4, r3
 800bb04:	0a24      	lsrs	r4, r4, #8
                px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask, aa_color_hor_bottom, aa_opa);
 800bb06:	4b6d      	ldr	r3, [pc, #436]	; (800bcbc <lv_draw_rect+0x1230>)
 800bb08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f9b7 6008 	ldrsh.w	r6, [r7, #8]
 800bb10:	647b      	str	r3, [r7, #68]	; 0x44
 800bb12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bb16:	4631      	mov	r1, r6
 800bb18:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bb1c:	189d      	adds	r5, r3, r2
 800bb1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb20:	465a      	mov	r2, fp
 800bb22:	441d      	add	r5, r3
 800bb24:	b22b      	sxth	r3, r5
 800bb26:	617b      	str	r3, [r7, #20]
 800bb28:	9400      	str	r4, [sp, #0]
 800bb2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb2c:	6978      	ldr	r0, [r7, #20]
 800bb2e:	6c7d      	ldr	r5, [r7, #68]	; 0x44
 800bb30:	47a8      	blx	r5
                px_fp(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask, aa_color_hor_bottom, aa_opa);
 800bb32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb36:	4631      	mov	r1, r6
 800bb38:	eba3 0802 	sub.w	r8, r3, r2
 800bb3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb3e:	9400      	str	r4, [sp, #0]
 800bb40:	465a      	mov	r2, fp
 800bb42:	eba8 0803 	sub.w	r8, r8, r3
 800bb46:	6c7d      	ldr	r5, [r7, #68]	; 0x44
 800bb48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb4a:	fa0f f888 	sxth.w	r8, r8
 800bb4e:	4640      	mov	r0, r8
 800bb50:	47a8      	blx	r5
                px_fp(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask, aa_color_hor_top, aa_opa);
 800bb52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb54:	4640      	mov	r0, r8
 800bb56:	465a      	mov	r2, fp
 800bb58:	1e5e      	subs	r6, r3, #1
 800bb5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb5c:	9400      	str	r4, [sp, #0]
 800bb5e:	1af6      	subs	r6, r6, r3
 800bb60:	6c7d      	ldr	r5, [r7, #68]	; 0x44
 800bb62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb64:	b236      	sxth	r6, r6
 800bb66:	4631      	mov	r1, r6
 800bb68:	47a8      	blx	r5
                px_fp(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask, aa_color_hor_top, aa_opa);
 800bb6a:	9400      	str	r4, [sp, #0]
 800bb6c:	4631      	mov	r1, r6
 800bb6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb70:	465a      	mov	r2, fp
 800bb72:	6978      	ldr	r0, [r7, #20]
 800bb74:	6c7d      	ldr	r5, [r7, #68]	; 0x44
 800bb76:	47a8      	blx	r5
                mix = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800bb78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
                aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800bb7c:	4649      	mov	r1, r9
 800bb7e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
                mix = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800bb80:	1a9e      	subs	r6, r3, r2
 800bb82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb84:	441e      	add	r6, r3
 800bb86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb88:	ebc6 2606 	rsb	r6, r6, r6, lsl #8
 800bb8c:	fbb6 f6f3 	udiv	r6, r6, r3
 800bb90:	b2f3      	uxtb	r3, r6
                aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800bb92:	461a      	mov	r2, r3
                mix = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800bb94:	617b      	str	r3, [r7, #20]
                aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800bb96:	f7fe ff33 	bl	800aa00 <lv_color_mix>
                px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, aa_color_ver, aa_opa);
 800bb9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bb9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
                aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800bb9e:	4605      	mov	r5, r0
                px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, aa_color_ver, aa_opa);
 800bba0:	f103 0801 	add.w	r8, r3, #1
 800bba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba6:	4498      	add	r8, r3
 800bba8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbaa:	4413      	add	r3, r2
 800bbac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bbae:	fa0f f888 	sxth.w	r8, r8
 800bbb2:	4413      	add	r3, r2
 800bbb4:	465a      	mov	r2, fp
 800bbb6:	b21b      	sxth	r3, r3
 800bbb8:	60fb      	str	r3, [r7, #12]
 800bbba:	4603      	mov	r3, r0
 800bbbc:	9400      	str	r4, [sp, #0]
 800bbbe:	4640      	mov	r0, r8
 800bbc0:	68f9      	ldr	r1, [r7, #12]
 800bbc2:	6c7e      	ldr	r6, [r7, #68]	; 0x44
 800bbc4:	47b0      	blx	r6
                px_fp(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask, aa_color_ver, aa_opa);
 800bbc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbca:	3b01      	subs	r3, #1
 800bbcc:	1a9b      	subs	r3, r3, r2
 800bbce:	465a      	mov	r2, fp
 800bbd0:	b21b      	sxth	r3, r3
 800bbd2:	613b      	str	r3, [r7, #16]
 800bbd4:	462b      	mov	r3, r5
 800bbd6:	9400      	str	r4, [sp, #0]
 800bbd8:	68f9      	ldr	r1, [r7, #12]
 800bbda:	6938      	ldr	r0, [r7, #16]
 800bbdc:	6c7d      	ldr	r5, [r7, #68]	; 0x44
 800bbde:	47a8      	blx	r5
                aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 800bbe0:	697a      	ldr	r2, [r7, #20]
 800bbe2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bbe4:	4648      	mov	r0, r9
 800bbe6:	f7fe ff0b 	bl	800aa00 <lv_color_mix>
                px_fp(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, aa_color_ver, aa_opa);
 800bbea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
                aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 800bbee:	4605      	mov	r5, r0
                px_fp(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, aa_color_ver, aa_opa);
 800bbf0:	1a9e      	subs	r6, r3, r2
 800bbf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf4:	465a      	mov	r2, fp
 800bbf6:	1af6      	subs	r6, r6, r3
 800bbf8:	b233      	sxth	r3, r6
 800bbfa:	62bb      	str	r3, [r7, #40]	; 0x28
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	9400      	str	r4, [sp, #0]
 800bc00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bc02:	6938      	ldr	r0, [r7, #16]
 800bc04:	6c7e      	ldr	r6, [r7, #68]	; 0x44
 800bc06:	47b0      	blx	r6
                px_fp(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask, aa_color_ver, aa_opa);
 800bc08:	9400      	str	r4, [sp, #0]
 800bc0a:	462b      	mov	r3, r5
 800bc0c:	465a      	mov	r2, fp
 800bc0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bc10:	4640      	mov	r0, r8
 800bc12:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800bc14:	47a0      	blx	r4
 800bc16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc18:	3301      	adds	r3, #1
 800bc1a:	643b      	str	r3, [r7, #64]	; 0x40
 800bc1c:	e6be      	b.n	800b99c <lv_draw_rect+0xf10>
                    aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800bc1e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bc20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc22:	f7fd fdb7 	bl	8009794 <lv_draw_aa_get_opa>
 800bc26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc28:	1a18      	subs	r0, r3, r0
 800bc2a:	b2c4      	uxtb	r4, r0
 800bc2c:	e76b      	b.n	800bb06 <lv_draw_rect+0x107a>
                mix = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1)  * 255) / height;
 800bc2e:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
 800bc32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc34:	1a52      	subs	r2, r2, r1
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800bc36:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800bc38:	4649      	mov	r1, r9
                mix = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1)  * 255) / height;
 800bc3a:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 800bc3e:	fbb2 f2f3 	udiv	r2, r2, r3
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800bc42:	b2d2      	uxtb	r2, r2
 800bc44:	f7fe fedc 	bl	800aa00 <lv_color_mix>
 800bc48:	4602      	mov	r2, r0
 800bc4a:	f000 be95 	b.w	800c978 <lv_draw_rect+0x1eec>
                mix = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 800bc4e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800bc52:	4649      	mov	r1, r9
                mix = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 800bc54:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800bc58:	6eb8      	ldr	r0, [r7, #104]	; 0x68
                mix = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 800bc5a:	1ad2      	subs	r2, r2, r3
 800bc5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc5e:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 800bc62:	fbb2 f2f3 	udiv	r2, r2, r3
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800bc66:	b2d2      	uxtb	r2, r2
 800bc68:	f7fe feca 	bl	800aa00 <lv_color_mix>
 800bc6c:	4602      	mov	r2, r0
 800bc6e:	e6c1      	b.n	800b9f4 <lv_draw_rect+0xf68>
                mix = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800bc70:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800bc74:	4649      	mov	r1, r9
                mix = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800bc76:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800bc7a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
                mix = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800bc7c:	1ad2      	subs	r2, r2, r3
 800bc7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc80:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 800bc84:	fbb2 f2f3 	udiv	r2, r2, r3
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800bc88:	b2d2      	uxtb	r2, r2
 800bc8a:	f7fe feb9 	bl	800aa00 <lv_color_mix>
 800bc8e:	4602      	mov	r2, r0
 800bc90:	e6bf      	b.n	800ba12 <lv_draw_rect+0xf86>
                mix = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 800bc92:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800bc96:	4649      	mov	r1, r9
                mix = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 800bc98:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800bc9c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
                mix = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 800bc9e:	1ad2      	subs	r2, r2, r3
 800bca0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bca2:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 800bca6:	fbb2 f2f3 	udiv	r2, r2, r3
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800bcaa:	b2d2      	uxtb	r2, r2
 800bcac:	f7fe fea8 	bl	800aa00 <lv_color_mix>
 800bcb0:	4602      	mov	r2, r0
 800bcb2:	e6be      	b.n	800ba32 <lv_draw_rect+0xfa6>
 800bcb4:	08083784 	.word	0x08083784
 800bcb8:	080837f1 	.word	0x080837f1
 800bcbc:	08083790 	.word	0x08083790
        mix = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1)  * 255) / height;
 800bcc0:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
        act_color = lv_color_mix(mcolor, gcolor, mix);
 800bcc4:	4649      	mov	r1, r9
        mix = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1)  * 255) / height;
 800bcc6:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
        act_color = lv_color_mix(mcolor, gcolor, mix);
 800bcca:	6eb8      	ldr	r0, [r7, #104]	; 0x68
        mix = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1)  * 255) / height;
 800bccc:	1ad2      	subs	r2, r2, r3
 800bcce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bcd0:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 800bcd4:	fbb2 f2f3 	udiv	r2, r2, r3
        act_color = lv_color_mix(mcolor, gcolor, mix);
 800bcd8:	b2d2      	uxtb	r2, r2
 800bcda:	f7fe fe91 	bl	800aa00 <lv_color_mix>
 800bcde:	4602      	mov	r2, r0
 800bce0:	f7ff b8c8 	b.w	800ae74 <lv_draw_rect+0x3e8>
        mix = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800bce4:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
        act_color = lv_color_mix(mcolor, gcolor, mix);
 800bce8:	4649      	mov	r1, r9
        mix = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800bcea:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
        act_color = lv_color_mix(mcolor, gcolor, mix);
 800bcee:	6eb8      	ldr	r0, [r7, #104]	; 0x68
        mix = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800bcf0:	1ad2      	subs	r2, r2, r3
 800bcf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bcf4:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 800bcf8:	fbb2 f2f3 	udiv	r2, r2, r3
        act_color = lv_color_mix(mcolor, gcolor, mix);
 800bcfc:	b2d2      	uxtb	r2, r2
 800bcfe:	f7fe fe7f 	bl	800aa00 <lv_color_mix>
 800bd02:	4602      	mov	r2, r0
 800bd04:	f7ff b8de 	b.w	800aec4 <lv_draw_rect+0x438>
        lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800bd08:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bd0a:	6a38      	ldr	r0, [r7, #32]
 800bd0c:	f7fd fd42 	bl	8009794 <lv_draw_aa_get_opa>
 800bd10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
        px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask, aa_color_hor_top, aa_opa);
 800bd12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
        lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800bd14:	1a18      	subs	r0, r3, r0
        px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask, aa_color_hor_top, aa_opa);
 800bd16:	4b49      	ldr	r3, [pc, #292]	; (800be3c <lv_draw_rect+0x13b0>)
 800bd18:	f9b7 5010 	ldrsh.w	r5, [r7, #16]
 800bd1c:	681b      	ldr	r3, [r3, #0]
        lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800bd1e:	b2c6      	uxtb	r6, r0
        px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask, aa_color_hor_top, aa_opa);
 800bd20:	4629      	mov	r1, r5
 800bd22:	643b      	str	r3, [r7, #64]	; 0x40
 800bd24:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800bd26:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bd2a:	189c      	adds	r4, r3, r2
 800bd2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd2e:	465a      	mov	r2, fp
 800bd30:	441c      	add	r4, r3
 800bd32:	b223      	sxth	r3, r4
 800bd34:	61fb      	str	r3, [r7, #28]
 800bd36:	9600      	str	r6, [sp, #0]
 800bd38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd3a:	69f8      	ldr	r0, [r7, #28]
 800bd3c:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800bd3e:	47a0      	blx	r4
        px_fp(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask, aa_color_hor_top, aa_opa);
 800bd40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd44:	4629      	mov	r1, r5
 800bd46:	eba3 0802 	sub.w	r8, r3, r2
 800bd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd4c:	9600      	str	r6, [sp, #0]
 800bd4e:	465a      	mov	r2, fp
 800bd50:	eba8 0803 	sub.w	r8, r8, r3
 800bd54:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800bd56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd58:	fa0f f888 	sxth.w	r8, r8
 800bd5c:	4640      	mov	r0, r8
 800bd5e:	47a0      	blx	r4
        px_fp(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask, aa_color_hor_bottom, aa_opa);
 800bd60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd62:	4640      	mov	r0, r8
 800bd64:	465a      	mov	r2, fp
 800bd66:	1e5d      	subs	r5, r3, #1
 800bd68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd6a:	9600      	str	r6, [sp, #0]
 800bd6c:	1aed      	subs	r5, r5, r3
 800bd6e:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800bd70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd72:	b22d      	sxth	r5, r5
 800bd74:	4629      	mov	r1, r5
 800bd76:	47a0      	blx	r4
        px_fp(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask, aa_color_hor_bottom, aa_opa);
 800bd78:	9600      	str	r6, [sp, #0]
 800bd7a:	4629      	mov	r1, r5
 800bd7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd7e:	465a      	mov	r2, fp
 800bd80:	69f8      	ldr	r0, [r7, #28]
 800bd82:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800bd84:	47a0      	blx	r4
        mix = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800bd86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
        aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800bd8a:	4649      	mov	r1, r9
 800bd8c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
        mix = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800bd8e:	1a9c      	subs	r4, r3, r2
 800bd90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd92:	441c      	add	r4, r3
 800bd94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd96:	ebc4 2404 	rsb	r4, r4, r4, lsl #8
 800bd9a:	fbb4 f4f3 	udiv	r4, r4, r3
 800bd9e:	b2e3      	uxtb	r3, r4
        aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800bda0:	461a      	mov	r2, r3
        mix = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800bda2:	61fb      	str	r3, [r7, #28]
        aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800bda4:	f7fe fe2c 	bl	800aa00 <lv_color_mix>
        px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, aa_color_ver, aa_opa);
 800bda8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bdaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
        aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800bdac:	4605      	mov	r5, r0
        px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, aa_color_ver, aa_opa);
 800bdae:	f103 0801 	add.w	r8, r3, #1
 800bdb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb4:	4498      	add	r8, r3
 800bdb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdb8:	4413      	add	r3, r2
 800bdba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdbc:	fa0f f888 	sxth.w	r8, r8
 800bdc0:	4413      	add	r3, r2
 800bdc2:	465a      	mov	r2, fp
 800bdc4:	b21b      	sxth	r3, r3
 800bdc6:	617b      	str	r3, [r7, #20]
 800bdc8:	4603      	mov	r3, r0
 800bdca:	9600      	str	r6, [sp, #0]
 800bdcc:	4640      	mov	r0, r8
 800bdce:	6979      	ldr	r1, [r7, #20]
 800bdd0:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800bdd2:	47a0      	blx	r4
        px_fp(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask, aa_color_ver, aa_opa);
 800bdd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdd8:	3b01      	subs	r3, #1
 800bdda:	1a9b      	subs	r3, r3, r2
 800bddc:	465a      	mov	r2, fp
 800bdde:	b21b      	sxth	r3, r3
 800bde0:	61bb      	str	r3, [r7, #24]
 800bde2:	462b      	mov	r3, r5
 800bde4:	9600      	str	r6, [sp, #0]
 800bde6:	6979      	ldr	r1, [r7, #20]
 800bde8:	69b8      	ldr	r0, [r7, #24]
 800bdea:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800bdec:	47a0      	blx	r4
        aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 800bdee:	69fa      	ldr	r2, [r7, #28]
 800bdf0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bdf2:	4648      	mov	r0, r9
 800bdf4:	f7fe fe04 	bl	800aa00 <lv_color_mix>
        px_fp(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, aa_color_ver, aa_opa);
 800bdf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
        aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 800bdfc:	4605      	mov	r5, r0
        px_fp(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, aa_color_ver, aa_opa);
 800bdfe:	1a9c      	subs	r4, r3, r2
 800be00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be02:	465a      	mov	r2, fp
 800be04:	1ae4      	subs	r4, r4, r3
 800be06:	b223      	sxth	r3, r4
 800be08:	62bb      	str	r3, [r7, #40]	; 0x28
 800be0a:	4603      	mov	r3, r0
 800be0c:	9600      	str	r6, [sp, #0]
 800be0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be10:	69b8      	ldr	r0, [r7, #24]
 800be12:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800be14:	47a0      	blx	r4
        px_fp(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask, aa_color_ver, aa_opa);
 800be16:	9600      	str	r6, [sp, #0]
 800be18:	462b      	mov	r3, r5
 800be1a:	465a      	mov	r2, fp
 800be1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be1e:	4640      	mov	r0, r8
 800be20:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800be22:	47a0      	blx	r4
 800be24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be26:	3301      	adds	r3, #1
 800be28:	633b      	str	r3, [r7, #48]	; 0x30
 800be2a:	f7ff b8be 	b.w	800afaa <lv_draw_rect+0x51e>
        corner_size = radius + LV_ANTIALIAS;
 800be2e:	1c42      	adds	r2, r0, #1
    lv_coord_t length_corr = 0;
 800be30:	2100      	movs	r1, #0
        corner_size = radius + LV_ANTIALIAS;
 800be32:	b212      	sxth	r2, r2
    lv_coord_t length_corr = 0;
 800be34:	65f9      	str	r1, [r7, #92]	; 0x5c
 800be36:	f7ff b95b 	b.w	800b0f0 <lv_draw_rect+0x664>
 800be3a:	bf00      	nop
 800be3c:	08083790 	.word	0x08083790
    corner_size ++;
 800be40:	3201      	adds	r2, #1
 800be42:	b292      	uxth	r2, r2
 800be44:	667a      	str	r2, [r7, #100]	; 0x64
    if(part & LV_BORDER_TOP) work_area.y1 = coords->y1 + corner_size;
 800be46:	f001 02ff 	and.w	r2, r1, #255	; 0xff
 800be4a:	65ba      	str	r2, [r7, #88]	; 0x58
 800be4c:	2900      	cmp	r1, #0
 800be4e:	f000 8143 	beq.w	800c0d8 <lv_draw_rect+0x164c>
 800be52:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800be54:	4413      	add	r3, r2
    else  work_area.y1 = coords->y1 + radius;
 800be56:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
    if(part & LV_BORDER_BOTTOM) work_area.y2 = coords->y2 - corner_size;
 800be5a:	f018 0301 	ands.w	r3, r8, #1
 800be5e:	bf18      	it	ne
 800be60:	6e7a      	ldrne	r2, [r7, #100]	; 0x64
 800be62:	653b      	str	r3, [r7, #80]	; 0x50
 800be64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be66:	bf14      	ite	ne
 800be68:	1a9b      	subne	r3, r3, r2
    else work_area.y2 = coords->y2 - radius;
 800be6a:	eba3 0309 	subeq.w	r3, r3, r9
    if(part & LV_BORDER_LEFT) {
 800be6e:	f018 0f04 	tst.w	r8, #4
    else work_area.y2 = coords->y2 - radius;
 800be72:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    if(part & LV_BORDER_LEFT) {
 800be76:	d00d      	beq.n	800be94 <lv_draw_rect+0x1408>
        work_area.x2 = work_area.x1 + bwidth;
 800be78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
        fill_fp(&work_area, mask, color, opa);
 800be7a:	4659      	mov	r1, fp
        work_area.x1 = coords->x1;
 800be7c:	f8a7 6098 	strh.w	r6, [r7, #152]	; 0x98
        fill_fp(&work_area, mask, color, opa);
 800be80:	f107 0098 	add.w	r0, r7, #152	; 0x98
        work_area.x2 = work_area.x1 + bwidth;
 800be84:	442b      	add	r3, r5
        fill_fp(&work_area, mask, color, opa);
 800be86:	4e95      	ldr	r6, [pc, #596]	; (800c0dc <lv_draw_rect+0x1650>)
 800be88:	6eba      	ldr	r2, [r7, #104]	; 0x68
        work_area.x2 = work_area.x1 + bwidth;
 800be8a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
        fill_fp(&work_area, mask, color, opa);
 800be8e:	4623      	mov	r3, r4
 800be90:	6836      	ldr	r6, [r6, #0]
 800be92:	47b0      	blx	r6
    if(part & LV_BORDER_RIGHT) {
 800be94:	f018 0f08 	tst.w	r8, #8
 800be98:	d00e      	beq.n	800beb8 <lv_draw_rect+0x142c>
        work_area.x2 = coords->x2;
 800be9a:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
        work_area.x1 = work_area.x2 - bwidth;
 800be9e:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
        fill_fp(&work_area, mask, color, opa);
 800bea2:	4e8e      	ldr	r6, [pc, #568]	; (800c0dc <lv_draw_rect+0x1650>)
 800bea4:	4659      	mov	r1, fp
        work_area.x2 = coords->x2;
 800bea6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
        work_area.x1 = work_area.x2 - bwidth;
 800beaa:	1b5b      	subs	r3, r3, r5
        fill_fp(&work_area, mask, color, opa);
 800beac:	6eba      	ldr	r2, [r7, #104]	; 0x68
        work_area.x1 = work_area.x2 - bwidth;
 800beae:	f820 3d08 	strh.w	r3, [r0, #-8]!
        fill_fp(&work_area, mask, color, opa);
 800beb2:	4623      	mov	r3, r4
 800beb4:	6836      	ldr	r6, [r6, #0]
 800beb6:	47b0      	blx	r6
    work_area.x1 = coords->x1 + corner_size - length_corr;
 800beb8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800bebc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bebe:	f8ba 1000 	ldrh.w	r1, [sl]
 800bec2:	1ad2      	subs	r2, r2, r3
 800bec4:	440a      	add	r2, r1
 800bec6:	f8a7 2098 	strh.w	r2, [r7, #152]	; 0x98
    work_area.x2 = coords->x2 - corner_size + length_corr;
 800beca:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800bece:	4413      	add	r3, r2
 800bed0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bed2:	1a9b      	subs	r3, r3, r2
 800bed4:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
    if(part & LV_BORDER_TOP) {
 800bed8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800beda:	b173      	cbz	r3, 800befa <lv_draw_rect+0x146e>
        work_area.y1 = coords->y1;
 800bedc:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
        fill_fp(&work_area, mask, color, opa);
 800bee0:	4659      	mov	r1, fp
 800bee2:	4e7e      	ldr	r6, [pc, #504]	; (800c0dc <lv_draw_rect+0x1650>)
 800bee4:	f107 0098 	add.w	r0, r7, #152	; 0x98
        work_area.y1 = coords->y1;
 800bee8:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
        work_area.y2 = coords->y1 + bwidth;
 800beec:	442b      	add	r3, r5
        fill_fp(&work_area, mask, color, opa);
 800beee:	6eba      	ldr	r2, [r7, #104]	; 0x68
        work_area.y2 = coords->y1 + bwidth;
 800bef0:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
        fill_fp(&work_area, mask, color, opa);
 800bef4:	4623      	mov	r3, r4
 800bef6:	6836      	ldr	r6, [r6, #0]
 800bef8:	47b0      	blx	r6
    if(part & LV_BORDER_BOTTOM) {
 800befa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800befc:	b173      	cbz	r3, 800bf1c <lv_draw_rect+0x1490>
        work_area.y2 = coords->y2;
 800befe:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
        fill_fp(&work_area, mask, color, opa);
 800bf02:	4659      	mov	r1, fp
 800bf04:	4e75      	ldr	r6, [pc, #468]	; (800c0dc <lv_draw_rect+0x1650>)
 800bf06:	f107 0098 	add.w	r0, r7, #152	; 0x98
        work_area.y2 = coords->y2;
 800bf0a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
        work_area.y1 = work_area.y2 - bwidth;
 800bf0e:	1b5b      	subs	r3, r3, r5
        fill_fp(&work_area, mask, color, opa);
 800bf10:	6eba      	ldr	r2, [r7, #104]	; 0x68
        work_area.y1 = work_area.y2 - bwidth;
 800bf12:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
        fill_fp(&work_area, mask, color, opa);
 800bf16:	4623      	mov	r3, r4
 800bf18:	6836      	ldr	r6, [r6, #0]
 800bf1a:	47b0      	blx	r6
    if(length_corr != 0) {
 800bf1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d077      	beq.n	800c012 <lv_draw_rect+0x1586>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800bf22:	f008 0306 	and.w	r3, r8, #6
 800bf26:	2b06      	cmp	r3, #6
 800bf28:	d118      	bne.n	800bf5c <lv_draw_rect+0x14d0>
            work_area.x1 = coords->x1;
 800bf2a:	f9ba 3000 	ldrsh.w	r3, [sl]
            fill_fp(&work_area, mask, color, opa);
 800bf2e:	4659      	mov	r1, fp
 800bf30:	4e6a      	ldr	r6, [pc, #424]	; (800c0dc <lv_draw_rect+0x1650>)
 800bf32:	f107 0098 	add.w	r0, r7, #152	; 0x98
            work_area.x1 = coords->x1;
 800bf36:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
            work_area.x2 = coords->x1 + radius + LV_ANTIALIAS;
 800bf3a:	3301      	adds	r3, #1
            fill_fp(&work_area, mask, color, opa);
 800bf3c:	6836      	ldr	r6, [r6, #0]
            work_area.x2 = coords->x1 + radius + LV_ANTIALIAS;
 800bf3e:	444b      	add	r3, r9
 800bf40:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
            work_area.y1 = coords->y1 + radius + 1 + LV_ANTIALIAS;
 800bf44:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 800bf48:	1c9a      	adds	r2, r3, #2
            work_area.y2 = coords->y1 + bwidth;
 800bf4a:	442b      	add	r3, r5
            work_area.y1 = coords->y1 + radius + 1 + LV_ANTIALIAS;
 800bf4c:	444a      	add	r2, r9
            work_area.y2 = coords->y1 + bwidth;
 800bf4e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
            fill_fp(&work_area, mask, color, opa);
 800bf52:	4623      	mov	r3, r4
            work_area.y1 = coords->y1 + radius + 1 + LV_ANTIALIAS;
 800bf54:	f8a7 209a 	strh.w	r2, [r7, #154]	; 0x9a
            fill_fp(&work_area, mask, color, opa);
 800bf58:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bf5a:	47b0      	blx	r6
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800bf5c:	f008 030a 	and.w	r3, r8, #10
 800bf60:	2b0a      	cmp	r3, #10
 800bf62:	d119      	bne.n	800bf98 <lv_draw_rect+0x150c>
            work_area.x1 = coords->x2 - radius - LV_ANTIALIAS;
 800bf64:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
            fill_fp(&work_area, mask, color, opa);
 800bf68:	4659      	mov	r1, fp
 800bf6a:	4e5c      	ldr	r6, [pc, #368]	; (800c0dc <lv_draw_rect+0x1650>)
 800bf6c:	f107 0098 	add.w	r0, r7, #152	; 0x98
            work_area.x1 = coords->x2 - radius - LV_ANTIALIAS;
 800bf70:	1e53      	subs	r3, r2, #1
            work_area.x2 = coords->x2;
 800bf72:	f8a7 209c 	strh.w	r2, [r7, #156]	; 0x9c
            fill_fp(&work_area, mask, color, opa);
 800bf76:	6836      	ldr	r6, [r6, #0]
            work_area.x1 = coords->x2 - radius - LV_ANTIALIAS;
 800bf78:	eba3 0309 	sub.w	r3, r3, r9
 800bf7c:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
            work_area.y1 = coords->y1 + radius + 1 + LV_ANTIALIAS;
 800bf80:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 800bf84:	1c9a      	adds	r2, r3, #2
            work_area.y2 = coords->y1 + bwidth;
 800bf86:	442b      	add	r3, r5
            work_area.y1 = coords->y1 + radius + 1 + LV_ANTIALIAS;
 800bf88:	444a      	add	r2, r9
            work_area.y2 = coords->y1 + bwidth;
 800bf8a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
            fill_fp(&work_area, mask, color, opa);
 800bf8e:	4623      	mov	r3, r4
            work_area.y1 = coords->y1 + radius + 1 + LV_ANTIALIAS;
 800bf90:	f8a7 209a 	strh.w	r2, [r7, #154]	; 0x9a
            fill_fp(&work_area, mask, color, opa);
 800bf94:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bf96:	47b0      	blx	r6
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800bf98:	f008 0305 	and.w	r3, r8, #5
 800bf9c:	2b05      	cmp	r3, #5
 800bf9e:	d119      	bne.n	800bfd4 <lv_draw_rect+0x1548>
            work_area.x1 = coords->x1;
 800bfa0:	f9ba 3000 	ldrsh.w	r3, [sl]
            fill_fp(&work_area, mask, color, opa);
 800bfa4:	4659      	mov	r1, fp
 800bfa6:	4e4d      	ldr	r6, [pc, #308]	; (800c0dc <lv_draw_rect+0x1650>)
 800bfa8:	f107 0098 	add.w	r0, r7, #152	; 0x98
            work_area.x1 = coords->x1;
 800bfac:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
            work_area.x2 = coords->x1 + radius + LV_ANTIALIAS;
 800bfb0:	3301      	adds	r3, #1
            fill_fp(&work_area, mask, color, opa);
 800bfb2:	6836      	ldr	r6, [r6, #0]
            work_area.x2 = coords->x1 + radius + LV_ANTIALIAS;
 800bfb4:	444b      	add	r3, r9
 800bfb6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
            work_area.y1 = coords->y2 - bwidth;
 800bfba:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 800bfbe:	1b5a      	subs	r2, r3, r5
            work_area.y2 = coords->y2 - radius - 1 - LV_ANTIALIAS;
 800bfc0:	3b02      	subs	r3, #2
 800bfc2:	eba3 0309 	sub.w	r3, r3, r9
            work_area.y1 = coords->y2 - bwidth;
 800bfc6:	f8a7 209a 	strh.w	r2, [r7, #154]	; 0x9a
            fill_fp(&work_area, mask, color, opa);
 800bfca:	6eba      	ldr	r2, [r7, #104]	; 0x68
            work_area.y2 = coords->y2 - radius - 1 - LV_ANTIALIAS;
 800bfcc:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
            fill_fp(&work_area, mask, color, opa);
 800bfd0:	4623      	mov	r3, r4
 800bfd2:	47b0      	blx	r6
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800bfd4:	f008 0309 	and.w	r3, r8, #9
 800bfd8:	2b09      	cmp	r3, #9
 800bfda:	d11a      	bne.n	800c012 <lv_draw_rect+0x1586>
            work_area.x1 = coords->x2 - radius - LV_ANTIALIAS;
 800bfdc:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
            fill_fp(&work_area, mask, color, opa);
 800bfe0:	4659      	mov	r1, fp
 800bfe2:	f107 0098 	add.w	r0, r7, #152	; 0x98
            work_area.x1 = coords->x2 - radius - LV_ANTIALIAS;
 800bfe6:	1e53      	subs	r3, r2, #1
            work_area.x2 = coords->x2;
 800bfe8:	f8a7 209c 	strh.w	r2, [r7, #156]	; 0x9c
            fill_fp(&work_area, mask, color, opa);
 800bfec:	6eba      	ldr	r2, [r7, #104]	; 0x68
            work_area.x1 = coords->x2 - radius - LV_ANTIALIAS;
 800bfee:	eba3 0309 	sub.w	r3, r3, r9
 800bff2:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
            work_area.y1 = coords->y2 - bwidth;
 800bff6:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 800bffa:	1b5d      	subs	r5, r3, r5
            work_area.y2 = coords->y2 - radius - 1 - LV_ANTIALIAS;
 800bffc:	3b02      	subs	r3, #2
            work_area.y1 = coords->y2 - bwidth;
 800bffe:	f8a7 509a 	strh.w	r5, [r7, #154]	; 0x9a
            work_area.y2 = coords->y2 - radius - 1 - LV_ANTIALIAS;
 800c002:	eba3 0909 	sub.w	r9, r3, r9
            fill_fp(&work_area, mask, color, opa);
 800c006:	4d35      	ldr	r5, [pc, #212]	; (800c0dc <lv_draw_rect+0x1650>)
 800c008:	4623      	mov	r3, r4
            work_area.y2 = coords->y2 - radius - 1 - LV_ANTIALIAS;
 800c00a:	f8a7 909e 	strh.w	r9, [r7, #158]	; 0x9e
            fill_fp(&work_area, mask, color, opa);
 800c00e:	682d      	ldr	r5, [r5, #0]
 800c010:	47a8      	blx	r5
    if(style->body.radius == 0) {
 800c012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c014:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	f47f a8f0 	bne.w	800b1fe <lv_draw_rect+0x772>
        if(part & (LV_BORDER_TOP | LV_BORDER_LEFT)) {
 800c01e:	f018 0f06 	tst.w	r8, #6
 800c022:	d015      	beq.n	800c050 <lv_draw_rect+0x15c4>
            work_area.x1 = coords->x1;
 800c024:	f9ba 3000 	ldrsh.w	r3, [sl]
            fill_fp(&work_area, mask, color, opa);
 800c028:	4659      	mov	r1, fp
 800c02a:	4d2c      	ldr	r5, [pc, #176]	; (800c0dc <lv_draw_rect+0x1650>)
 800c02c:	f107 0098 	add.w	r0, r7, #152	; 0x98
            work_area.x1 = coords->x1;
 800c030:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
            work_area.x2 = coords->x1 + LV_ANTIALIAS;
 800c034:	3301      	adds	r3, #1
            fill_fp(&work_area, mask, color, opa);
 800c036:	6eba      	ldr	r2, [r7, #104]	; 0x68
            work_area.x2 = coords->x1 + LV_ANTIALIAS;
 800c038:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
            work_area.y1 = coords->y1;
 800c03c:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
            fill_fp(&work_area, mask, color, opa);
 800c040:	682d      	ldr	r5, [r5, #0]
            work_area.y1 = coords->y1;
 800c042:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
            work_area.y2 = coords->y1 + LV_ANTIALIAS;
 800c046:	3301      	adds	r3, #1
 800c048:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
            fill_fp(&work_area, mask, color, opa);
 800c04c:	4623      	mov	r3, r4
 800c04e:	47a8      	blx	r5
        if(part & (LV_BORDER_TOP | LV_BORDER_RIGHT)) {
 800c050:	f018 0f0a 	tst.w	r8, #10
 800c054:	d015      	beq.n	800c082 <lv_draw_rect+0x15f6>
            work_area.x1 = coords->x2 - LV_ANTIALIAS;
 800c056:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
            fill_fp(&work_area, mask, color, opa);
 800c05a:	4659      	mov	r1, fp
 800c05c:	4d1f      	ldr	r5, [pc, #124]	; (800c0dc <lv_draw_rect+0x1650>)
 800c05e:	f107 0098 	add.w	r0, r7, #152	; 0x98
            work_area.x1 = coords->x2 - LV_ANTIALIAS;
 800c062:	1e5a      	subs	r2, r3, #1
            work_area.x2 = coords->x2;
 800c064:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
            work_area.y1 = coords->y1;
 800c068:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
            work_area.x1 = coords->x2 - LV_ANTIALIAS;
 800c06c:	f8a7 2098 	strh.w	r2, [r7, #152]	; 0x98
            work_area.y1 = coords->y1;
 800c070:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
            work_area.y2 = coords->y1 + LV_ANTIALIAS;
 800c074:	3301      	adds	r3, #1
            fill_fp(&work_area, mask, color, opa);
 800c076:	6eba      	ldr	r2, [r7, #104]	; 0x68
            work_area.y2 = coords->y1 + LV_ANTIALIAS;
 800c078:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
            fill_fp(&work_area, mask, color, opa);
 800c07c:	4623      	mov	r3, r4
 800c07e:	682d      	ldr	r5, [r5, #0]
 800c080:	47a8      	blx	r5
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_LEFT)) {
 800c082:	f018 0f05 	tst.w	r8, #5
 800c086:	d015      	beq.n	800c0b4 <lv_draw_rect+0x1628>
            work_area.x1 = coords->x1;
 800c088:	f9ba 3000 	ldrsh.w	r3, [sl]
            fill_fp(&work_area, mask, color, opa);
 800c08c:	4659      	mov	r1, fp
 800c08e:	4d13      	ldr	r5, [pc, #76]	; (800c0dc <lv_draw_rect+0x1650>)
 800c090:	f107 0098 	add.w	r0, r7, #152	; 0x98
            work_area.x1 = coords->x1;
 800c094:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
            work_area.x2 = coords->x1 + LV_ANTIALIAS;
 800c098:	3301      	adds	r3, #1
            fill_fp(&work_area, mask, color, opa);
 800c09a:	682d      	ldr	r5, [r5, #0]
            work_area.x2 = coords->x1 + LV_ANTIALIAS;
 800c09c:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
            work_area.y1 = coords->y2 - LV_ANTIALIAS;
 800c0a0:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 800c0a4:	1e5a      	subs	r2, r3, #1
            work_area.y2 = coords->y2;
 800c0a6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
            fill_fp(&work_area, mask, color, opa);
 800c0aa:	4623      	mov	r3, r4
            work_area.y1 = coords->y2 - LV_ANTIALIAS;
 800c0ac:	f8a7 209a 	strh.w	r2, [r7, #154]	; 0x9a
            fill_fp(&work_area, mask, color, opa);
 800c0b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c0b2:	47a8      	blx	r5
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_RIGHT)) {
 800c0b4:	f018 0f09 	tst.w	r8, #9
 800c0b8:	f43f a8a1 	beq.w	800b1fe <lv_draw_rect+0x772>
            work_area.x1 = coords->x2 - LV_ANTIALIAS;
 800c0bc:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
 800c0c0:	1e5a      	subs	r2, r3, #1
            work_area.x2 = coords->x2;
 800c0c2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
            work_area.y1 = coords->y2 - LV_ANTIALIAS;
 800c0c6:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
            work_area.x1 = coords->x2 - LV_ANTIALIAS;
 800c0ca:	f8a7 2098 	strh.w	r2, [r7, #152]	; 0x98
            work_area.y1 = coords->y2 - LV_ANTIALIAS;
 800c0ce:	1e5a      	subs	r2, r3, #1
 800c0d0:	f8a7 209a 	strh.w	r2, [r7, #154]	; 0x9a
 800c0d4:	f7ff b889 	b.w	800b1ea <lv_draw_rect+0x75e>
    else  work_area.y1 = coords->y1 + radius;
 800c0d8:	444b      	add	r3, r9
 800c0da:	e6bc      	b.n	800be56 <lv_draw_rect+0x13ca>
 800c0dc:	08083784 	.word	0x08083784
        if(cir_in.y < cir_in.x) {
 800c0e0:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 800c0e4:	f9b7 1092 	ldrsh.w	r1, [r7, #146]	; 0x92
 800c0e8:	4299      	cmp	r1, r3
 800c0ea:	f280 8148 	bge.w	800c37e <lv_draw_rect+0x18f2>
            act_w1 = cir_out.x - cir_in.x;
 800c0ee:	1ad3      	subs	r3, r2, r3
 800c0f0:	b21b      	sxth	r3, r3
 800c0f2:	647b      	str	r3, [r7, #68]	; 0x44
        if(out_x_last != cir_out.x) {
 800c0f4:	4552      	cmp	r2, sl
            act_w2 = act_w1 - 1;
 800c0f6:	63bb      	str	r3, [r7, #56]	; 0x38
        if(out_x_last != cir_out.x) {
 800c0f8:	d016      	beq.n	800c128 <lv_draw_rect+0x169c>
            lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800c0fa:	8ebe      	ldrh	r6, [r7, #52]	; 0x34
                    px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 800c0fc:	fa1f f88a 	uxth.w	r8, sl
            lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800c100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c102:	1b9b      	subs	r3, r3, r6
 800c104:	b21b      	sxth	r3, r3
 800c106:	637b      	str	r3, [r7, #52]	; 0x34
 800c108:	2300      	movs	r3, #0
 800c10a:	64fb      	str	r3, [r7, #76]	; 0x4c
                    px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 800c10c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c10e:	3301      	adds	r3, #1
 800c110:	4443      	add	r3, r8
 800c112:	623b      	str	r3, [r7, #32]
 800c114:	f9b7 104c 	ldrsh.w	r1, [r7, #76]	; 0x4c
            for(i = 0; i  < seg_size; i++) {
 800c118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c11a:	428b      	cmp	r3, r1
 800c11c:	f300 813a 	bgt.w	800c394 <lv_draw_rect+0x1908>
            out_x_last = cir_out.x;
 800c120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c122:	f9b7 a088 	ldrsh.w	sl, [r7, #136]	; 0x88
 800c126:	637b      	str	r3, [r7, #52]	; 0x34
        if(in_x_last != cir_in.x) {
 800c128:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 800c12c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c12e:	4293      	cmp	r3, r2
 800c130:	d018      	beq.n	800c164 <lv_draw_rect+0x16d8>
            in_y_seg_end = cir_out.y;
 800c132:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
            lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 800c136:	2600      	movs	r6, #0
 800c138:	f8b7 8040 	ldrh.w	r8, [r7, #64]	; 0x40
            in_y_seg_end = cir_out.y;
 800c13c:	63fb      	str	r3, [r7, #60]	; 0x3c
            lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 800c13e:	eba3 0308 	sub.w	r3, r3, r8
 800c142:	b21b      	sxth	r3, r3
 800c144:	64fb      	str	r3, [r7, #76]	; 0x4c
                    px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 800c146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c148:	3b01      	subs	r3, #1
 800c14a:	4413      	add	r3, r2
 800c14c:	b21b      	sxth	r3, r3
 800c14e:	61bb      	str	r3, [r7, #24]
 800c150:	b231      	sxth	r1, r6
            for(i = 0; i  < seg_size; i++) {
 800c152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c154:	428b      	cmp	r3, r1
 800c156:	f300 81dd 	bgt.w	800c514 <lv_draw_rect+0x1a88>
            in_x_last = cir_in.x;
 800c15a:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 800c15e:	657b      	str	r3, [r7, #84]	; 0x54
            in_y_seg_start = in_y_seg_end;
 800c160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c162:	643b      	str	r3, [r7, #64]	; 0x40
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800c164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c166:	2b09      	cmp	r3, #9
 800c168:	d135      	bne.n	800c1d6 <lv_draw_rect+0x174a>
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
 800c16a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
            fill_fp(&circ_area, mask, color, opa);
 800c16c:	4659      	mov	r1, fp
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
 800c16e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
            fill_fp(&circ_area, mask, color, opa);
 800c172:	f107 0098 	add.w	r0, r7, #152	; 0x98
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
 800c176:	4413      	add	r3, r2
 800c178:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c17a:	b29b      	uxth	r3, r3
 800c17c:	1a9a      	subs	r2, r3, r2
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT1_X(cir_out);
 800c17e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 800c182:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
 800c186:	f8a7 2098 	strh.w	r2, [r7, #152]	; 0x98
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 800c18a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c18c:	4413      	add	r3, r2
            fill_fp(&circ_area, mask, color, opa);
 800c18e:	6cba      	ldr	r2, [r7, #72]	; 0x48
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 800c190:	b21b      	sxth	r3, r3
 800c192:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 800c196:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
            fill_fp(&circ_area, mask, color, opa);
 800c19a:	4b7d      	ldr	r3, [pc, #500]	; (800c390 <lv_draw_rect+0x1904>)
 800c19c:	681c      	ldr	r4, [r3, #0]
 800c19e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c1a0:	47a0      	blx	r4
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 800c1a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c1a4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
            fill_fp(&circ_area, mask, color, opa);
 800c1a8:	4659      	mov	r1, fp
 800c1aa:	f107 0098 	add.w	r0, r7, #152	; 0x98
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 800c1ae:	4413      	add	r3, r2
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 800c1b0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 800c1b2:	b21b      	sxth	r3, r3
 800c1b4:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 800c1b8:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 800c1bc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800c1c0:	4413      	add	r3, r2
 800c1c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c1c4:	b29b      	uxth	r3, r3
 800c1c6:	1a9a      	subs	r2, r3, r2
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out);
 800c1c8:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
            fill_fp(&circ_area, mask, color, opa);
 800c1cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 800c1ce:	f8a7 209a 	strh.w	r2, [r7, #154]	; 0x9a
            fill_fp(&circ_area, mask, color, opa);
 800c1d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c1d4:	47a0      	blx	r4
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800c1d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c1d8:	f003 0305 	and.w	r3, r3, #5
 800c1dc:	2b05      	cmp	r3, #5
 800c1de:	d135      	bne.n	800c24c <lv_draw_rect+0x17c0>
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 800c1e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
            fill_fp(&circ_area, mask, color, opa);
 800c1e2:	4659      	mov	r1, fp
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 800c1e4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
            fill_fp(&circ_area, mask, color, opa);
 800c1e8:	f107 0098 	add.w	r0, r7, #152	; 0x98
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 800c1ec:	1ad3      	subs	r3, r2, r3
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 800c1ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 800c1f0:	b21b      	sxth	r3, r3
 800c1f2:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 800c1f6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 800c1fa:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800c1fe:	4413      	add	r3, r2
 800c200:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c202:	b29b      	uxth	r3, r3
 800c204:	1a9a      	subs	r2, r3, r2
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out);
 800c206:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
            fill_fp(&circ_area, mask, color, opa);
 800c20a:	4b61      	ldr	r3, [pc, #388]	; (800c390 <lv_draw_rect+0x1904>)
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 800c20c:	f8a7 209a 	strh.w	r2, [r7, #154]	; 0x9a
            fill_fp(&circ_area, mask, color, opa);
 800c210:	681c      	ldr	r4, [r3, #0]
 800c212:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c214:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c216:	47a0      	blx	r4
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 800c218:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c21a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
            fill_fp(&circ_area, mask, color, opa);
 800c21e:	4659      	mov	r1, fp
 800c220:	f107 0098 	add.w	r0, r7, #152	; 0x98
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 800c224:	1ad3      	subs	r3, r2, r3
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT4_X(cir_out) + act_w1;
 800c226:	6c7a      	ldr	r2, [r7, #68]	; 0x44
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 800c228:	b29b      	uxth	r3, r3
 800c22a:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT4_X(cir_out) + act_w1;
 800c22e:	4413      	add	r3, r2
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 800c230:	6e7a      	ldr	r2, [r7, #100]	; 0x64
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT4_X(cir_out) + act_w1;
 800c232:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 800c236:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c23a:	4413      	add	r3, r2
            fill_fp(&circ_area, mask, color, opa);
 800c23c:	6cba      	ldr	r2, [r7, #72]	; 0x48
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 800c23e:	b21b      	sxth	r3, r3
 800c240:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 800c244:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
            fill_fp(&circ_area, mask, color, opa);
 800c248:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c24a:	47a0      	blx	r4
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800c24c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c24e:	f003 0306 	and.w	r3, r3, #6
 800c252:	2b06      	cmp	r3, #6
 800c254:	d13d      	bne.n	800c2d2 <lv_draw_rect+0x1846>
            if(lb_origo.y + LV_CIRC_OCT4_Y(cir_out) > lt_origo.y + LV_CIRC_OCT5_Y(cir_out)) {
 800c256:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800c25a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c25c:	18d1      	adds	r1, r2, r3
 800c25e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c260:	1ad2      	subs	r2, r2, r3
 800c262:	4291      	cmp	r1, r2
 800c264:	dd19      	ble.n	800c29a <lv_draw_rect+0x180e>
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
 800c266:	6df9      	ldr	r1, [r7, #92]	; 0x5c
                fill_fp(&circ_area, mask, color, opa);
 800c268:	f107 0098 	add.w	r0, r7, #152	; 0x98
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
 800c26c:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
                fill_fp(&circ_area, mask, color, opa);
 800c270:	4c47      	ldr	r4, [pc, #284]	; (800c390 <lv_draw_rect+0x1904>)
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
 800c272:	1a8a      	subs	r2, r1, r2
                circ_area.x2 = lt_origo.x + LV_CIRC_OCT5_X(cir_out) + act_w2;
 800c274:	6bb9      	ldr	r1, [r7, #56]	; 0x38
                fill_fp(&circ_area, mask, color, opa);
 800c276:	6824      	ldr	r4, [r4, #0]
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
 800c278:	b292      	uxth	r2, r2
 800c27a:	f8a7 2098 	strh.w	r2, [r7, #152]	; 0x98
                circ_area.x2 = lt_origo.x + LV_CIRC_OCT5_X(cir_out) + act_w2;
 800c27e:	440a      	add	r2, r1
                fill_fp(&circ_area, mask, color, opa);
 800c280:	4659      	mov	r1, fp
                circ_area.x2 = lt_origo.x + LV_CIRC_OCT5_X(cir_out) + act_w2;
 800c282:	f8a7 209c 	strh.w	r2, [r7, #156]	; 0x9c
                circ_area.y1 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 800c286:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c288:	1ad3      	subs	r3, r2, r3
                fill_fp(&circ_area, mask, color, opa);
 800c28a:	6cba      	ldr	r2, [r7, #72]	; 0x48
                circ_area.y1 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 800c28c:	b21b      	sxth	r3, r3
 800c28e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
                circ_area.y2 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 800c292:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
                fill_fp(&circ_area, mask, color, opa);
 800c296:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c298:	47a0      	blx	r4
            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 800c29a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
            fill_fp(&circ_area, mask, color, opa);
 800c29c:	4659      	mov	r1, fp
            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 800c29e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
            fill_fp(&circ_area, mask, color, opa);
 800c2a2:	f107 0098 	add.w	r0, r7, #152	; 0x98
 800c2a6:	4c3a      	ldr	r4, [pc, #232]	; (800c390 <lv_draw_rect+0x1904>)
            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 800c2a8:	1ad3      	subs	r3, r2, r3
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 800c2aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
            fill_fp(&circ_area, mask, color, opa);
 800c2ac:	6824      	ldr	r4, [r4, #0]
            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 800c2ae:	b21b      	sxth	r3, r3
 800c2b0:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
            circ_area.x2 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 800c2b4:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 800c2b8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800c2bc:	1ad3      	subs	r3, r2, r3
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
 800c2be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 800c2c0:	b29b      	uxth	r3, r3
 800c2c2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
 800c2c6:	4413      	add	r3, r2
            fill_fp(&circ_area, mask, color, opa);
 800c2c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
 800c2ca:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
            fill_fp(&circ_area, mask, color, opa);
 800c2ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c2d0:	47a0      	blx	r4
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800c2d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2d4:	f003 030a 	and.w	r3, r3, #10
 800c2d8:	2b0a      	cmp	r3, #10
 800c2da:	d13b      	bne.n	800c354 <lv_draw_rect+0x18c8>
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 800c2dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
            fill_fp(&circ_area, mask, color, opa);
 800c2de:	4659      	mov	r1, fp
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 800c2e0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
            fill_fp(&circ_area, mask, color, opa);
 800c2e4:	f107 0098 	add.w	r0, r7, #152	; 0x98
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 800c2e8:	4413      	add	r3, r2
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 800c2ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 800c2ec:	b21b      	sxth	r3, r3
 800c2ee:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
            circ_area.x2 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 800c2f2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 800c2f6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800c2fa:	1ad3      	subs	r3, r2, r3
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
 800c2fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 800c2fe:	b29b      	uxth	r3, r3
 800c300:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
 800c304:	4413      	add	r3, r2
            fill_fp(&circ_area, mask, color, opa);
 800c306:	6cba      	ldr	r2, [r7, #72]	; 0x48
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
 800c308:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
            fill_fp(&circ_area, mask, color, opa);
 800c30c:	4b20      	ldr	r3, [pc, #128]	; (800c390 <lv_draw_rect+0x1904>)
 800c30e:	681c      	ldr	r4, [r3, #0]
 800c310:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c312:	47a0      	blx	r4
            if(rb_origo.y + LV_CIRC_OCT1_Y(cir_out) > rt_origo.y + LV_CIRC_OCT8_Y(cir_out)) {
 800c314:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800c318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c31a:	18d1      	adds	r1, r2, r3
 800c31c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c31e:	1ad2      	subs	r2, r2, r3
 800c320:	4291      	cmp	r1, r2
 800c322:	dd17      	ble.n	800c354 <lv_draw_rect+0x18c8>
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
 800c324:	6d3a      	ldr	r2, [r7, #80]	; 0x50
                fill_fp(&circ_area, mask, color, opa);
 800c326:	f107 0098 	add.w	r0, r7, #152	; 0x98
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
 800c32a:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
 800c32e:	4411      	add	r1, r2
 800c330:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c332:	b289      	uxth	r1, r1
 800c334:	1a8a      	subs	r2, r1, r2
                circ_area.x2 = rt_origo.x + LV_CIRC_OCT8_X(cir_out);
 800c336:	f8a7 109c 	strh.w	r1, [r7, #156]	; 0x9c
                fill_fp(&circ_area, mask, color, opa);
 800c33a:	4659      	mov	r1, fp
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
 800c33c:	f8a7 2098 	strh.w	r2, [r7, #152]	; 0x98
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 800c340:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c342:	1ad3      	subs	r3, r2, r3
                fill_fp(&circ_area, mask, color, opa);
 800c344:	6cba      	ldr	r2, [r7, #72]	; 0x48
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 800c346:	b21b      	sxth	r3, r3
 800c348:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
                circ_area.y2 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 800c34c:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
                fill_fp(&circ_area, mask, color, opa);
 800c350:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c352:	47a0      	blx	r4
        lv_circ_next(&cir_out, &tmp_out);
 800c354:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800c358:	f107 0088 	add.w	r0, r7, #136	; 0x88
 800c35c:	f001 faf1 	bl	800d942 <lv_circ_next>
        if(cir_in.y < cir_in.x) {
 800c360:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 800c364:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 800c368:	429a      	cmp	r2, r3
 800c36a:	f6be afaf 	bge.w	800b2cc <lv_draw_rect+0x840>
            lv_circ_next(&cir_in, &tmp_in);
 800c36e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800c372:	f107 0090 	add.w	r0, r7, #144	; 0x90
 800c376:	f001 fae4 	bl	800d942 <lv_circ_next>
 800c37a:	f7fe bfa7 	b.w	800b2cc <lv_draw_rect+0x840>
            act_w1 = cir_out.x - cir_out.y;
 800c37e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c380:	1ad3      	subs	r3, r2, r3
 800c382:	b29b      	uxth	r3, r3
 800c384:	b219      	sxth	r1, r3
            act_w2 = act_w1 - 1;
 800c386:	3b01      	subs	r3, #1
            act_w1 = cir_out.x - cir_out.y;
 800c388:	6479      	str	r1, [r7, #68]	; 0x44
            act_w2 = act_w1 - 1;
 800c38a:	b21b      	sxth	r3, r3
 800c38c:	e6b2      	b.n	800c0f4 <lv_draw_rect+0x1668>
 800c38e:	bf00      	nop
 800c390:	08083784 	.word	0x08083784
                if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) {    /*Use non-linear opa mapping on the first segment*/
 800c394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c396:	2b05      	cmp	r3, #5
 800c398:	f340 80b1 	ble.w	800c4fe <lv_draw_rect+0x1a72>
        uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map) - 1)) / (seg - 1);
 800c39c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c39e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c3a0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800c3a4:	3a01      	subs	r2, #1
 800c3a6:	fbb3 f3f2 	udiv	r3, r3, r2
        return (uint32_t)((uint32_t) opa_map[id] * opa) >> 8;
 800c3aa:	4a59      	ldr	r2, [pc, #356]	; (800c510 <lv_draw_rect+0x1a84>)
 800c3ac:	b2db      	uxtb	r3, r3
 800c3ae:	5cd4      	ldrb	r4, [r2, r3]
 800c3b0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800c3b4:	fb14 f403 	smulbb	r4, r4, r3
 800c3b8:	0a24      	lsrs	r4, r4, #8
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800c3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3bc:	2b09      	cmp	r3, #9
 800c3be:	d11e      	bne.n	800c3fe <lv_draw_rect+0x1972>
                    px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 800c3c0:	f8d9 3000 	ldr.w	r3, [r9]
 800c3c4:	465a      	mov	r2, fp
 800c3c6:	f8b7 a04c 	ldrh.w	sl, [r7, #76]	; 0x4c
 800c3ca:	627b      	str	r3, [r7, #36]	; 0x24
 800c3cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c3ce:	9400      	str	r4, [sp, #0]
 800c3d0:	1999      	adds	r1, r3, r6
 800c3d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3d4:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 800c3d8:	4451      	add	r1, sl
 800c3da:	691b      	ldr	r3, [r3, #16]
 800c3dc:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800c3de:	b209      	sxth	r1, r1
 800c3e0:	47a8      	blx	r5
                    px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask, style->body.border.color, aa_opa);
 800c3e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c3e4:	465a      	mov	r2, fp
 800c3e6:	1c59      	adds	r1, r3, #1
 800c3e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3ea:	9400      	str	r4, [sp, #0]
 800c3ec:	1998      	adds	r0, r3, r6
 800c3ee:	4441      	add	r1, r8
 800c3f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3f2:	4450      	add	r0, sl
 800c3f4:	b209      	sxth	r1, r1
 800c3f6:	691b      	ldr	r3, [r3, #16]
 800c3f8:	b200      	sxth	r0, r0
 800c3fa:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800c3fc:	47a8      	blx	r5
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800c3fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c400:	f003 0305 	and.w	r3, r3, #5
 800c404:	2b05      	cmp	r3, #5
 800c406:	d124      	bne.n	800c452 <lv_draw_rect+0x19c6>
                    px_fp(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask, style->body.border.color, aa_opa);
 800c408:	f8d9 3000 	ldr.w	r3, [r9]
 800c40c:	465a      	mov	r2, fp
 800c40e:	f8b7 a04c 	ldrh.w	sl, [r7, #76]	; 0x4c
 800c412:	627b      	str	r3, [r7, #36]	; 0x24
 800c414:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c416:	f103 0e01 	add.w	lr, r3, #1
 800c41a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c41c:	9400      	str	r4, [sp, #0]
 800c41e:	1b98      	subs	r0, r3, r6
 800c420:	44c6      	add	lr, r8
 800c422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c424:	eba0 000a 	sub.w	r0, r0, sl
 800c428:	fa0f f18e 	sxth.w	r1, lr
 800c42c:	691b      	ldr	r3, [r3, #16]
 800c42e:	b200      	sxth	r0, r0
 800c430:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800c432:	47a8      	blx	r5
                    px_fp(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 800c434:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c436:	465a      	mov	r2, fp
 800c438:	1999      	adds	r1, r3, r6
 800c43a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c43c:	9400      	str	r4, [sp, #0]
 800c43e:	1e58      	subs	r0, r3, #1
 800c440:	4451      	add	r1, sl
 800c442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c444:	eba0 0008 	sub.w	r0, r0, r8
 800c448:	b209      	sxth	r1, r1
 800c44a:	691b      	ldr	r3, [r3, #16]
 800c44c:	b200      	sxth	r0, r0
 800c44e:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800c450:	47a8      	blx	r5
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800c452:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c454:	f003 0306 	and.w	r3, r3, #6
 800c458:	2b06      	cmp	r3, #6
 800c45a:	d124      	bne.n	800c4a6 <lv_draw_rect+0x1a1a>
                    px_fp(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, style->body.border.color, aa_opa);
 800c45c:	f8d9 3000 	ldr.w	r3, [r9]
 800c460:	465a      	mov	r2, fp
 800c462:	f8b7 a04c 	ldrh.w	sl, [r7, #76]	; 0x4c
 800c466:	627b      	str	r3, [r7, #36]	; 0x24
 800c468:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c46a:	1b99      	subs	r1, r3, r6
 800c46c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c46e:	9400      	str	r4, [sp, #0]
 800c470:	1e58      	subs	r0, r3, #1
 800c472:	eba1 010a 	sub.w	r1, r1, sl
 800c476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c478:	eba0 0008 	sub.w	r0, r0, r8
 800c47c:	b209      	sxth	r1, r1
 800c47e:	691b      	ldr	r3, [r3, #16]
 800c480:	b200      	sxth	r0, r0
 800c482:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800c484:	47a8      	blx	r5
                    px_fp(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask, style->body.border.color, aa_opa);
 800c486:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c488:	465a      	mov	r2, fp
 800c48a:	1e59      	subs	r1, r3, #1
 800c48c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c48e:	9400      	str	r4, [sp, #0]
 800c490:	1b98      	subs	r0, r3, r6
 800c492:	eba1 0108 	sub.w	r1, r1, r8
 800c496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c498:	eba0 000a 	sub.w	r0, r0, sl
 800c49c:	b209      	sxth	r1, r1
 800c49e:	691b      	ldr	r3, [r3, #16]
 800c4a0:	b200      	sxth	r0, r0
 800c4a2:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800c4a4:	47a8      	blx	r5
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800c4a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c4a8:	f003 030a 	and.w	r3, r3, #10
 800c4ac:	2b0a      	cmp	r3, #10
 800c4ae:	d122      	bne.n	800c4f6 <lv_draw_rect+0x1a6a>
                    px_fp(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask, style->body.border.color, aa_opa);
 800c4b0:	f8d9 3000 	ldr.w	r3, [r9]
 800c4b4:	465a      	mov	r2, fp
 800c4b6:	f8b7 a04c 	ldrh.w	sl, [r7, #76]	; 0x4c
 800c4ba:	627b      	str	r3, [r7, #36]	; 0x24
 800c4bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c4be:	f103 3eff 	add.w	lr, r3, #4294967295
 800c4c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4c4:	9400      	str	r4, [sp, #0]
 800c4c6:	1998      	adds	r0, r3, r6
 800c4c8:	ebae 0e08 	sub.w	lr, lr, r8
 800c4cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4ce:	4450      	add	r0, sl
 800c4d0:	fa0f f18e 	sxth.w	r1, lr
 800c4d4:	691b      	ldr	r3, [r3, #16]
 800c4d6:	b200      	sxth	r0, r0
 800c4d8:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800c4da:	47a8      	blx	r5
                    px_fp(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask, style->body.border.color, aa_opa);
 800c4dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c4de:	9400      	str	r4, [sp, #0]
 800c4e0:	465a      	mov	r2, fp
 800c4e2:	1b99      	subs	r1, r3, r6
 800c4e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4e6:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 800c4ea:	eba1 010a 	sub.w	r1, r1, sl
 800c4ee:	691b      	ldr	r3, [r3, #16]
 800c4f0:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800c4f2:	b209      	sxth	r1, r1
 800c4f4:	47a0      	blx	r4
 800c4f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4f8:	3301      	adds	r3, #1
 800c4fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c4fc:	e60a      	b.n	800c114 <lv_draw_rect+0x1688>
                    aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800c4fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c500:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c502:	f7fd f947 	bl	8009794 <lv_draw_aa_get_opa>
 800c506:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c508:	1a18      	subs	r0, r3, r0
 800c50a:	b2c4      	uxtb	r4, r0
 800c50c:	e755      	b.n	800c3ba <lv_draw_rect+0x192e>
 800c50e:	bf00      	nop
 800c510:	080837f1 	.word	0x080837f1
                if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) {    /*Use non-linear opa mapping on the first segment*/
 800c514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c516:	2b05      	cmp	r3, #5
 800c518:	f340 80c1 	ble.w	800c69e <lv_draw_rect+0x1c12>
        uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map) - 1)) / (seg - 1);
 800c51c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c51e:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
 800c522:	3a01      	subs	r2, #1
 800c524:	fbb3 f3f2 	udiv	r3, r3, r2
        return (uint32_t)((uint32_t) opa_map[id] * opa) >> 8;
 800c528:	4a60      	ldr	r2, [pc, #384]	; (800c6ac <lv_draw_rect+0x1c20>)
 800c52a:	b2db      	uxtb	r3, r3
 800c52c:	5cd4      	ldrb	r4, [r2, r3]
 800c52e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800c532:	fb14 f403 	smulbb	r4, r4, r3
                    aa_opa = opa - antialias_get_opa_circ(seg_size, i, opa);
 800c536:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c538:	eba3 2414 	sub.w	r4, r3, r4, lsr #8
 800c53c:	b2e4      	uxtb	r4, r4
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800c53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c540:	2b09      	cmp	r3, #9
 800c542:	d10d      	bne.n	800c560 <lv_draw_rect+0x1ad4>
                    px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 800c544:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c546:	465a      	mov	r2, fp
 800c548:	9400      	str	r4, [sp, #0]
 800c54a:	eb03 0108 	add.w	r1, r3, r8
 800c54e:	f8d9 3000 	ldr.w	r3, [r9]
 800c552:	69b8      	ldr	r0, [r7, #24]
 800c554:	4431      	add	r1, r6
 800c556:	461d      	mov	r5, r3
 800c558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c55a:	b209      	sxth	r1, r1
 800c55c:	691b      	ldr	r3, [r3, #16]
 800c55e:	47a8      	blx	r5
 800c560:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c562:	f003 0305 	and.w	r3, r3, #5
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800c566:	2b05      	cmp	r3, #5
 800c568:	627b      	str	r3, [r7, #36]	; 0x24
 800c56a:	d111      	bne.n	800c590 <lv_draw_rect+0x1b04>
                    px_fp(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) - 1, mask, style->body.border.color, aa_opa);
 800c56c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c56e:	465a      	mov	r2, fp
 800c570:	1e59      	subs	r1, r3, #1
 800c572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c574:	4419      	add	r1, r3
 800c576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c578:	9400      	str	r4, [sp, #0]
 800c57a:	eba3 0008 	sub.w	r0, r3, r8
 800c57e:	f8d9 3000 	ldr.w	r3, [r9]
 800c582:	b209      	sxth	r1, r1
 800c584:	1b80      	subs	r0, r0, r6
 800c586:	461d      	mov	r5, r3
 800c588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c58a:	b200      	sxth	r0, r0
 800c58c:	691b      	ldr	r3, [r3, #16]
 800c58e:	47a8      	blx	r5
 800c590:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c592:	f003 0306 	and.w	r3, r3, #6
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800c596:	2b06      	cmp	r3, #6
 800c598:	623b      	str	r3, [r7, #32]
 800c59a:	d111      	bne.n	800c5c0 <lv_draw_rect+0x1b34>
                    px_fp(lt_origo.x + LV_CIRC_OCT5_X(aa_p) + 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, style->body.border.color, aa_opa);
 800c59c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c59e:	465a      	mov	r2, fp
 800c5a0:	eba3 0108 	sub.w	r1, r3, r8
 800c5a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c5a6:	1c58      	adds	r0, r3, #1
 800c5a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5aa:	9400      	str	r4, [sp, #0]
 800c5ac:	1b89      	subs	r1, r1, r6
 800c5ae:	1ac0      	subs	r0, r0, r3
 800c5b0:	f8d9 3000 	ldr.w	r3, [r9]
 800c5b4:	b209      	sxth	r1, r1
 800c5b6:	461d      	mov	r5, r3
 800c5b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5ba:	b200      	sxth	r0, r0
 800c5bc:	691b      	ldr	r3, [r3, #16]
 800c5be:	47a8      	blx	r5
 800c5c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c5c2:	f003 030a 	and.w	r3, r3, #10
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800c5c6:	2b0a      	cmp	r3, #10
 800c5c8:	61fb      	str	r3, [r7, #28]
 800c5ca:	d111      	bne.n	800c5f0 <lv_draw_rect+0x1b64>
                    px_fp(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) + 1, mask, style->body.border.color, aa_opa);
 800c5cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c5ce:	465a      	mov	r2, fp
 800c5d0:	1c59      	adds	r1, r3, #1
 800c5d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5d4:	1ac9      	subs	r1, r1, r3
 800c5d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5d8:	9400      	str	r4, [sp, #0]
 800c5da:	eb03 0008 	add.w	r0, r3, r8
 800c5de:	f8d9 3000 	ldr.w	r3, [r9]
 800c5e2:	b209      	sxth	r1, r1
 800c5e4:	4430      	add	r0, r6
 800c5e6:	461d      	mov	r5, r3
 800c5e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5ea:	b200      	sxth	r0, r0
 800c5ec:	691b      	ldr	r3, [r3, #16]
 800c5ee:	47a8      	blx	r5
                if(LV_CIRC_OCT1_X(aa_p) - 1 != LV_CIRC_OCT2_X(aa_p) + i) {
 800c5f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c5f4:	4433      	add	r3, r6
 800c5f6:	3a01      	subs	r2, #1
 800c5f8:	4293      	cmp	r3, r2
 800c5fa:	d04e      	beq.n	800c69a <lv_draw_rect+0x1c0e>
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800c5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5fe:	2b09      	cmp	r3, #9
 800c600:	d111      	bne.n	800c626 <lv_draw_rect+0x1b9a>
                        px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) - 1, mask, style->body.border.color, aa_opa);
 800c602:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c604:	465a      	mov	r2, fp
 800c606:	1e59      	subs	r1, r3, #1
 800c608:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c60a:	4419      	add	r1, r3
 800c60c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c60e:	9400      	str	r4, [sp, #0]
 800c610:	eb03 0008 	add.w	r0, r3, r8
 800c614:	f8d9 3000 	ldr.w	r3, [r9]
 800c618:	b209      	sxth	r1, r1
 800c61a:	4430      	add	r0, r6
 800c61c:	461d      	mov	r5, r3
 800c61e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c620:	b200      	sxth	r0, r0
 800c622:	691b      	ldr	r3, [r3, #16]
 800c624:	47a8      	blx	r5
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800c626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c628:	2b05      	cmp	r3, #5
 800c62a:	d111      	bne.n	800c650 <lv_draw_rect+0x1bc4>
                        px_fp(lb_origo.x + LV_CIRC_OCT4_X(aa_p) + 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 800c62c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c62e:	465a      	mov	r2, fp
 800c630:	eb03 0108 	add.w	r1, r3, r8
 800c634:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c636:	1c58      	adds	r0, r3, #1
 800c638:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c63a:	9400      	str	r4, [sp, #0]
 800c63c:	4431      	add	r1, r6
 800c63e:	1ac0      	subs	r0, r0, r3
 800c640:	f8d9 3000 	ldr.w	r3, [r9]
 800c644:	b209      	sxth	r1, r1
 800c646:	461d      	mov	r5, r3
 800c648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c64a:	b200      	sxth	r0, r0
 800c64c:	691b      	ldr	r3, [r3, #16]
 800c64e:	47a8      	blx	r5
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800c650:	6a3b      	ldr	r3, [r7, #32]
 800c652:	2b06      	cmp	r3, #6
 800c654:	d111      	bne.n	800c67a <lv_draw_rect+0x1bee>
                        px_fp(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) + 1, mask, style->body.border.color, aa_opa);
 800c656:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c658:	465a      	mov	r2, fp
 800c65a:	1c59      	adds	r1, r3, #1
 800c65c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c65e:	1ac9      	subs	r1, r1, r3
 800c660:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c662:	9400      	str	r4, [sp, #0]
 800c664:	eba3 0008 	sub.w	r0, r3, r8
 800c668:	f8d9 3000 	ldr.w	r3, [r9]
 800c66c:	b209      	sxth	r1, r1
 800c66e:	1b80      	subs	r0, r0, r6
 800c670:	461d      	mov	r5, r3
 800c672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c674:	b200      	sxth	r0, r0
 800c676:	691b      	ldr	r3, [r3, #16]
 800c678:	47a8      	blx	r5
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800c67a:	69fb      	ldr	r3, [r7, #28]
 800c67c:	2b0a      	cmp	r3, #10
 800c67e:	d10c      	bne.n	800c69a <lv_draw_rect+0x1c0e>
                        px_fp(rt_origo.x + LV_CIRC_OCT8_X(aa_p) - 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask, style->body.border.color, aa_opa);
 800c680:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c682:	465a      	mov	r2, fp
 800c684:	9400      	str	r4, [sp, #0]
 800c686:	eba3 0108 	sub.w	r1, r3, r8
 800c68a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c68c:	f8d9 4000 	ldr.w	r4, [r9]
 800c690:	1b89      	subs	r1, r1, r6
 800c692:	691b      	ldr	r3, [r3, #16]
 800c694:	69b8      	ldr	r0, [r7, #24]
 800c696:	b209      	sxth	r1, r1
 800c698:	47a0      	blx	r4
 800c69a:	3601      	adds	r6, #1
 800c69c:	e558      	b.n	800c150 <lv_draw_rect+0x16c4>
                    aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 800c69e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c6a0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c6a2:	f7fd f877 	bl	8009794 <lv_draw_aa_get_opa>
 800c6a6:	4604      	mov	r4, r0
 800c6a8:	e749      	b.n	800c53e <lv_draw_rect+0x1ab2>
 800c6aa:	bf00      	nop
 800c6ac:	080837f1 	.word	0x080837f1
        lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800c6b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c6b2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c6b4:	f7fd f86e 	bl	8009794 <lv_draw_aa_get_opa>
 800c6b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c6ba:	1a18      	subs	r0, r3, r0
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800c6bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c6be:	f003 0309 	and.w	r3, r3, #9
        lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800c6c2:	b2c4      	uxtb	r4, r0
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800c6c4:	2b09      	cmp	r3, #9
 800c6c6:	d11e      	bne.n	800c706 <lv_draw_rect+0x1c7a>
            px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 800c6c8:	4b4f      	ldr	r3, [pc, #316]	; (800c808 <lv_draw_rect+0x1d7c>)
 800c6ca:	465a      	mov	r2, fp
 800c6cc:	f8b7 904c 	ldrh.w	r9, [r7, #76]	; 0x4c
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	647b      	str	r3, [r7, #68]	; 0x44
 800c6d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c6d6:	9400      	str	r4, [sp, #0]
 800c6d8:	1959      	adds	r1, r3, r5
 800c6da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c6dc:	f9b7 003c 	ldrsh.w	r0, [r7, #60]	; 0x3c
 800c6e0:	4449      	add	r1, r9
 800c6e2:	691b      	ldr	r3, [r3, #16]
 800c6e4:	6c7e      	ldr	r6, [r7, #68]	; 0x44
 800c6e6:	b209      	sxth	r1, r1
 800c6e8:	47b0      	blx	r6
            px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask, style->body.border.color, aa_opa);
 800c6ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c6ec:	465a      	mov	r2, fp
 800c6ee:	1c59      	adds	r1, r3, #1
 800c6f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6f2:	9400      	str	r4, [sp, #0]
 800c6f4:	1958      	adds	r0, r3, r5
 800c6f6:	4441      	add	r1, r8
 800c6f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c6fa:	4448      	add	r0, r9
 800c6fc:	b209      	sxth	r1, r1
 800c6fe:	691b      	ldr	r3, [r3, #16]
 800c700:	b200      	sxth	r0, r0
 800c702:	6c7e      	ldr	r6, [r7, #68]	; 0x44
 800c704:	47b0      	blx	r6
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800c706:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c708:	f003 0305 	and.w	r3, r3, #5
 800c70c:	2b05      	cmp	r3, #5
 800c70e:	d124      	bne.n	800c75a <lv_draw_rect+0x1cce>
            px_fp(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask, style->body.border.color, aa_opa);
 800c710:	4b3d      	ldr	r3, [pc, #244]	; (800c808 <lv_draw_rect+0x1d7c>)
 800c712:	465a      	mov	r2, fp
 800c714:	f8b7 904c 	ldrh.w	r9, [r7, #76]	; 0x4c
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	647b      	str	r3, [r7, #68]	; 0x44
 800c71c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c71e:	f103 0e01 	add.w	lr, r3, #1
 800c722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c724:	9400      	str	r4, [sp, #0]
 800c726:	1b58      	subs	r0, r3, r5
 800c728:	44c6      	add	lr, r8
 800c72a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c72c:	eba0 0009 	sub.w	r0, r0, r9
 800c730:	fa0f f18e 	sxth.w	r1, lr
 800c734:	691b      	ldr	r3, [r3, #16]
 800c736:	b200      	sxth	r0, r0
 800c738:	6c7e      	ldr	r6, [r7, #68]	; 0x44
 800c73a:	47b0      	blx	r6
            px_fp(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 800c73c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c73e:	465a      	mov	r2, fp
 800c740:	1959      	adds	r1, r3, r5
 800c742:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c744:	9400      	str	r4, [sp, #0]
 800c746:	1e58      	subs	r0, r3, #1
 800c748:	4449      	add	r1, r9
 800c74a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c74c:	eba0 0008 	sub.w	r0, r0, r8
 800c750:	b209      	sxth	r1, r1
 800c752:	691b      	ldr	r3, [r3, #16]
 800c754:	b200      	sxth	r0, r0
 800c756:	6c7e      	ldr	r6, [r7, #68]	; 0x44
 800c758:	47b0      	blx	r6
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800c75a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c75c:	f003 0306 	and.w	r3, r3, #6
 800c760:	2b06      	cmp	r3, #6
 800c762:	d124      	bne.n	800c7ae <lv_draw_rect+0x1d22>
            px_fp(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, style->body.border.color, aa_opa);
 800c764:	4b28      	ldr	r3, [pc, #160]	; (800c808 <lv_draw_rect+0x1d7c>)
 800c766:	465a      	mov	r2, fp
 800c768:	f8b7 904c 	ldrh.w	r9, [r7, #76]	; 0x4c
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	647b      	str	r3, [r7, #68]	; 0x44
 800c770:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c772:	1b59      	subs	r1, r3, r5
 800c774:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c776:	9400      	str	r4, [sp, #0]
 800c778:	1e58      	subs	r0, r3, #1
 800c77a:	eba1 0109 	sub.w	r1, r1, r9
 800c77e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c780:	eba0 0008 	sub.w	r0, r0, r8
 800c784:	b209      	sxth	r1, r1
 800c786:	691b      	ldr	r3, [r3, #16]
 800c788:	b200      	sxth	r0, r0
 800c78a:	6c7e      	ldr	r6, [r7, #68]	; 0x44
 800c78c:	47b0      	blx	r6
            px_fp(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask, style->body.border.color, aa_opa);
 800c78e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c790:	465a      	mov	r2, fp
 800c792:	1e59      	subs	r1, r3, #1
 800c794:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c796:	9400      	str	r4, [sp, #0]
 800c798:	1b58      	subs	r0, r3, r5
 800c79a:	eba1 0108 	sub.w	r1, r1, r8
 800c79e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c7a0:	eba0 0009 	sub.w	r0, r0, r9
 800c7a4:	b209      	sxth	r1, r1
 800c7a6:	691b      	ldr	r3, [r3, #16]
 800c7a8:	b200      	sxth	r0, r0
 800c7aa:	6c7e      	ldr	r6, [r7, #68]	; 0x44
 800c7ac:	47b0      	blx	r6
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800c7ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c7b0:	f003 030a 	and.w	r3, r3, #10
 800c7b4:	2b0a      	cmp	r3, #10
 800c7b6:	d122      	bne.n	800c7fe <lv_draw_rect+0x1d72>
            px_fp(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask, style->body.border.color, aa_opa);
 800c7b8:	4b13      	ldr	r3, [pc, #76]	; (800c808 <lv_draw_rect+0x1d7c>)
 800c7ba:	465a      	mov	r2, fp
 800c7bc:	f8b7 904c 	ldrh.w	r9, [r7, #76]	; 0x4c
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	647b      	str	r3, [r7, #68]	; 0x44
 800c7c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c7c6:	f103 3eff 	add.w	lr, r3, #4294967295
 800c7ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7cc:	9400      	str	r4, [sp, #0]
 800c7ce:	1958      	adds	r0, r3, r5
 800c7d0:	ebae 0e08 	sub.w	lr, lr, r8
 800c7d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c7d6:	4448      	add	r0, r9
 800c7d8:	fa0f f18e 	sxth.w	r1, lr
 800c7dc:	691b      	ldr	r3, [r3, #16]
 800c7de:	b200      	sxth	r0, r0
 800c7e0:	6c7e      	ldr	r6, [r7, #68]	; 0x44
 800c7e2:	47b0      	blx	r6
            px_fp(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask, style->body.border.color, aa_opa);
 800c7e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c7e6:	9400      	str	r4, [sp, #0]
 800c7e8:	465a      	mov	r2, fp
 800c7ea:	1b59      	subs	r1, r3, r5
 800c7ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c7ee:	f9b7 003c 	ldrsh.w	r0, [r7, #60]	; 0x3c
 800c7f2:	eba1 0109 	sub.w	r1, r1, r9
 800c7f6:	691b      	ldr	r3, [r3, #16]
 800c7f8:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800c7fa:	b209      	sxth	r1, r1
 800c7fc:	47a0      	blx	r4
 800c7fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c800:	3301      	adds	r3, #1
 800c802:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c804:	f7fe bd76 	b.w	800b2f4 <lv_draw_rect+0x868>
 800c808:	08083790 	.word	0x08083790
        lv_opa_t aa_opa =  lv_draw_aa_get_opa(seg_size, i, opa);
 800c80c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c80e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c810:	f7fc ffc0 	bl	8009794 <lv_draw_aa_get_opa>
 800c814:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c816:	4680      	mov	r8, r0
 800c818:	f003 0a09 	and.w	sl, r3, #9
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800c81c:	f1ba 0f09 	cmp.w	sl, #9
 800c820:	d10b      	bne.n	800c83a <lv_draw_rect+0x1dae>
            px_fp(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 800c822:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c824:	465a      	mov	r2, fp
 800c826:	9000      	str	r0, [sp, #0]
 800c828:	1999      	adds	r1, r3, r6
 800c82a:	4d58      	ldr	r5, [pc, #352]	; (800c98c <lv_draw_rect+0x1f00>)
 800c82c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c82e:	4421      	add	r1, r4
 800c830:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c832:	691b      	ldr	r3, [r3, #16]
 800c834:	b209      	sxth	r1, r1
 800c836:	682d      	ldr	r5, [r5, #0]
 800c838:	47a8      	blx	r5
 800c83a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c83c:	f003 0305 	and.w	r3, r3, #5
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800c840:	2b05      	cmp	r3, #5
 800c842:	64bb      	str	r3, [r7, #72]	; 0x48
 800c844:	d110      	bne.n	800c868 <lv_draw_rect+0x1ddc>
            px_fp(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) - 1, mask, style->body.border.color, aa_opa);
 800c846:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c848:	465a      	mov	r2, fp
 800c84a:	4d50      	ldr	r5, [pc, #320]	; (800c98c <lv_draw_rect+0x1f00>)
 800c84c:	1e59      	subs	r1, r3, #1
 800c84e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c850:	682d      	ldr	r5, [r5, #0]
 800c852:	4419      	add	r1, r3
 800c854:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c856:	f8cd 8000 	str.w	r8, [sp]
 800c85a:	1b98      	subs	r0, r3, r6
 800c85c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c85e:	b209      	sxth	r1, r1
 800c860:	1b00      	subs	r0, r0, r4
 800c862:	691b      	ldr	r3, [r3, #16]
 800c864:	b200      	sxth	r0, r0
 800c866:	47a8      	blx	r5
 800c868:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c86a:	f003 0306 	and.w	r3, r3, #6
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800c86e:	2b06      	cmp	r3, #6
 800c870:	647b      	str	r3, [r7, #68]	; 0x44
 800c872:	d110      	bne.n	800c896 <lv_draw_rect+0x1e0a>
            px_fp(lt_origo.x + LV_CIRC_OCT5_X(aa_p) + 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, style->body.border.color, aa_opa);
 800c874:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c876:	465a      	mov	r2, fp
 800c878:	4d44      	ldr	r5, [pc, #272]	; (800c98c <lv_draw_rect+0x1f00>)
 800c87a:	1b99      	subs	r1, r3, r6
 800c87c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c87e:	682d      	ldr	r5, [r5, #0]
 800c880:	1c58      	adds	r0, r3, #1
 800c882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c884:	f8cd 8000 	str.w	r8, [sp]
 800c888:	1b09      	subs	r1, r1, r4
 800c88a:	1ac0      	subs	r0, r0, r3
 800c88c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c88e:	b209      	sxth	r1, r1
 800c890:	691b      	ldr	r3, [r3, #16]
 800c892:	b200      	sxth	r0, r0
 800c894:	47a8      	blx	r5
 800c896:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c898:	f003 090a 	and.w	r9, r3, #10
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800c89c:	f1b9 0f0a 	cmp.w	r9, #10
 800c8a0:	d110      	bne.n	800c8c4 <lv_draw_rect+0x1e38>
            px_fp(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) + 1, mask, style->body.border.color, aa_opa);
 800c8a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c8a4:	465a      	mov	r2, fp
 800c8a6:	4d39      	ldr	r5, [pc, #228]	; (800c98c <lv_draw_rect+0x1f00>)
 800c8a8:	1c59      	adds	r1, r3, #1
 800c8aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8ac:	682d      	ldr	r5, [r5, #0]
 800c8ae:	1ac9      	subs	r1, r1, r3
 800c8b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8b2:	f8cd 8000 	str.w	r8, [sp]
 800c8b6:	1998      	adds	r0, r3, r6
 800c8b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8ba:	b209      	sxth	r1, r1
 800c8bc:	4420      	add	r0, r4
 800c8be:	691b      	ldr	r3, [r3, #16]
 800c8c0:	b200      	sxth	r0, r0
 800c8c2:	47a8      	blx	r5
        if(LV_CIRC_OCT1_X(aa_p) - 1 != LV_CIRC_OCT2_X(aa_p) + i) {
 800c8c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c8c8:	3b01      	subs	r3, #1
 800c8ca:	4422      	add	r2, r4
 800c8cc:	4293      	cmp	r3, r2
 800c8ce:	d04b      	beq.n	800c968 <lv_draw_rect+0x1edc>
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800c8d0:	f1ba 0f09 	cmp.w	sl, #9
 800c8d4:	d110      	bne.n	800c8f8 <lv_draw_rect+0x1e6c>
                px_fp(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) - 1, mask, style->body.border.color, aa_opa);
 800c8d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c8d8:	465a      	mov	r2, fp
 800c8da:	4d2c      	ldr	r5, [pc, #176]	; (800c98c <lv_draw_rect+0x1f00>)
 800c8dc:	1e59      	subs	r1, r3, #1
 800c8de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8e0:	682d      	ldr	r5, [r5, #0]
 800c8e2:	4419      	add	r1, r3
 800c8e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8e6:	f8cd 8000 	str.w	r8, [sp]
 800c8ea:	1998      	adds	r0, r3, r6
 800c8ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8ee:	b209      	sxth	r1, r1
 800c8f0:	4420      	add	r0, r4
 800c8f2:	691b      	ldr	r3, [r3, #16]
 800c8f4:	b200      	sxth	r0, r0
 800c8f6:	47a8      	blx	r5
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800c8f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8fa:	2b05      	cmp	r3, #5
 800c8fc:	d110      	bne.n	800c920 <lv_draw_rect+0x1e94>
                px_fp(lb_origo.x + LV_CIRC_OCT4_X(aa_p) + 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask, style->body.border.color, aa_opa);
 800c8fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c900:	465a      	mov	r2, fp
 800c902:	4d22      	ldr	r5, [pc, #136]	; (800c98c <lv_draw_rect+0x1f00>)
 800c904:	1999      	adds	r1, r3, r6
 800c906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c908:	682d      	ldr	r5, [r5, #0]
 800c90a:	1c58      	adds	r0, r3, #1
 800c90c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c90e:	f8cd 8000 	str.w	r8, [sp]
 800c912:	4421      	add	r1, r4
 800c914:	1ac0      	subs	r0, r0, r3
 800c916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c918:	b209      	sxth	r1, r1
 800c91a:	691b      	ldr	r3, [r3, #16]
 800c91c:	b200      	sxth	r0, r0
 800c91e:	47a8      	blx	r5
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800c920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c922:	2b06      	cmp	r3, #6
 800c924:	d110      	bne.n	800c948 <lv_draw_rect+0x1ebc>
                px_fp(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) + 1, mask, style->body.border.color, aa_opa);
 800c926:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c928:	465a      	mov	r2, fp
 800c92a:	4d18      	ldr	r5, [pc, #96]	; (800c98c <lv_draw_rect+0x1f00>)
 800c92c:	1c59      	adds	r1, r3, #1
 800c92e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c930:	682d      	ldr	r5, [r5, #0]
 800c932:	1ac9      	subs	r1, r1, r3
 800c934:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c936:	f8cd 8000 	str.w	r8, [sp]
 800c93a:	1b98      	subs	r0, r3, r6
 800c93c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c93e:	b209      	sxth	r1, r1
 800c940:	1b00      	subs	r0, r0, r4
 800c942:	691b      	ldr	r3, [r3, #16]
 800c944:	b200      	sxth	r0, r0
 800c946:	47a8      	blx	r5
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800c948:	f1b9 0f0a 	cmp.w	r9, #10
 800c94c:	d10c      	bne.n	800c968 <lv_draw_rect+0x1edc>
                px_fp(rt_origo.x + LV_CIRC_OCT8_X(aa_p) - 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask, style->body.border.color, aa_opa);
 800c94e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c950:	465a      	mov	r2, fp
 800c952:	f8cd 8000 	str.w	r8, [sp]
 800c956:	1b99      	subs	r1, r3, r6
 800c958:	4d0c      	ldr	r5, [pc, #48]	; (800c98c <lv_draw_rect+0x1f00>)
 800c95a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c95c:	1b09      	subs	r1, r1, r4
 800c95e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c960:	691b      	ldr	r3, [r3, #16]
 800c962:	b209      	sxth	r1, r1
 800c964:	682d      	ldr	r5, [r5, #0]
 800c966:	47a8      	blx	r5
 800c968:	3401      	adds	r4, #1
 800c96a:	f7fe bd34 	b.w	800b3d6 <lv_draw_rect+0x94a>
            if(mcolor.full == gcolor.full) act_color = mcolor;
 800c96e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c970:	454b      	cmp	r3, r9
 800c972:	f47f a95c 	bne.w	800bc2e <lv_draw_rect+0x11a2>
 800c976:	6eba      	ldr	r2, [r7, #104]	; 0x68
            fill_fp(&edge_top_area, mask, act_color, opa);
 800c978:	4c05      	ldr	r4, [pc, #20]	; (800c990 <lv_draw_rect+0x1f04>)
 800c97a:	4659      	mov	r1, fp
 800c97c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c97e:	f107 0080 	add.w	r0, r7, #128	; 0x80
 800c982:	6824      	ldr	r4, [r4, #0]
 800c984:	47a0      	blx	r4
 800c986:	f7ff b82e 	b.w	800b9e6 <lv_draw_rect+0xf5a>
 800c98a:	bf00      	nop
 800c98c:	08083790 	.word	0x08083790
 800c990:	08083784 	.word	0x08083784

0800c994 <lv_color_mix>:
static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c994:	f1c2 03ff 	rsb	r3, r2, #255	; 0xff
{
 800c998:	b5f0      	push	{r4, r5, r6, r7, lr}
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c99a:	b294      	uxth	r4, r2
 800c99c:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800c9a0:	b29a      	uxth	r2, r3
 800c9a2:	f3c1 4307 	ubfx	r3, r1, #16, #8
    uint16_t g_2 = (c2.green_h << 3) + c2.green_l;
    uint16_t g_out = (uint16_t)((uint16_t) g_1 * mix + (g_2 * (255 - mix))) >> 8;
    ret.green_h = g_out >> 3;
    ret.green_l = g_out & 0x7;
#  else
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c9a6:	f3c0 2607 	ubfx	r6, r0, #8, #8
#  endif
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
# if LV_COLOR_DEPTH == 32
//    ret.alpha = 0xFF;
    ret.alpha = (uint16_t)((uint16_t) c1.alpha * mix + (c2.alpha * (255 - mix))) >> 8;
 800c9aa:	0e0f      	lsrs	r7, r1, #24
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c9ac:	fb13 f302 	smulbb	r3, r3, r2
    ret.alpha = (uint16_t)((uint16_t) c1.alpha * mix + (c2.alpha * (255 - mix))) >> 8;
 800c9b0:	fb17 f702 	smulbb	r7, r7, r2
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c9b4:	fb05 3504 	mla	r5, r5, r4, r3
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c9b8:	f3c1 2307 	ubfx	r3, r1, #8, #8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c9bc:	b2c9      	uxtb	r1, r1
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c9be:	fb13 f302 	smulbb	r3, r3, r2
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800c9c2:	f3c5 2507 	ubfx	r5, r5, #8, #8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c9c6:	fb11 f202 	smulbb	r2, r1, r2
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c9ca:	fb06 3604 	mla	r6, r6, r4, r3
    ret.alpha = (uint16_t)((uint16_t) c1.alpha * mix + (c2.alpha * (255 - mix))) >> 8;
 800c9ce:	0e03      	lsrs	r3, r0, #24
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c9d0:	b2c0      	uxtb	r0, r0
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800c9d2:	f3c6 2607 	ubfx	r6, r6, #8, #8
    ret.alpha = (uint16_t)((uint16_t) c1.alpha * mix + (c2.alpha * (255 - mix))) >> 8;
 800c9d6:	fb03 7304 	mla	r3, r3, r4, r7
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c9da:	fb00 2204 	mla	r2, r0, r4, r2
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 800c9de:	2000      	movs	r0, #0
    ret.alpha = (uint16_t)((uint16_t) c1.alpha * mix + (c2.alpha * (255 - mix))) >> 8;
 800c9e0:	f3c3 2307 	ubfx	r3, r3, #8, #8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800c9e4:	f3c2 2207 	ubfx	r2, r2, #8, #8
    return ret;
 800c9e8:	f362 0007 	bfi	r0, r2, #0, #8
 800c9ec:	f366 200f 	bfi	r0, r6, #8, #8
 800c9f0:	f365 4017 	bfi	r0, r5, #16, #8
 800c9f4:	f363 601f 	bfi	r0, r3, #24, #8
}
 800c9f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c9fa <sw_color_fill>:
 * @param fill_area coordinates of an area to fill. Relative to 'mem_area'.
 * @param color fill color
 * @param opa opacity (0, LV_OPA_TRANSP: transparent ... 255, LV_OPA_COVER, fully cover)
 */
static void sw_color_fill(lv_area_t * mem_area, lv_color_t * mem, const lv_area_t * fill_area, lv_color_t color, lv_opa_t opa)
{
 800c9fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 800c9fe:	8884      	ldrh	r4, [r0, #4]
 800ca00:	b085      	sub	sp, #20
 800ca02:	4699      	mov	r9, r3
 800ca04:	8803      	ldrh	r3, [r0, #0]
 800ca06:	3401      	adds	r4, #1
 800ca08:	9103      	str	r1, [sp, #12]
 800ca0a:	4615      	mov	r5, r2
 800ca0c:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
 800ca10:	1ae4      	subs	r4, r4, r3
    /*Set all row in vdb to the given color*/
    lv_coord_t row;
    lv_coord_t col;
    lv_coord_t mem_width = lv_area_get_width(mem_area);

    lv_disp_t * disp = lv_disp_get_active();
 800ca12:	f000 fced 	bl	800d3f0 <lv_disp_get_active>
    if(disp->driver.vdb_wr) {
 800ca16:	6943      	ldr	r3, [r0, #20]
    lv_disp_t * disp = lv_disp_get_active();
 800ca18:	4683      	mov	fp, r0
 800ca1a:	b224      	sxth	r4, r4
    if(disp->driver.vdb_wr) {
 800ca1c:	b1fb      	cbz	r3, 800ca5e <sw_color_fill+0x64>
        for(col = fill_area->x1; col <= fill_area->x2; col++) {
 800ca1e:	f9b5 6000 	ldrsh.w	r6, [r5]
 800ca22:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800ca26:	42b3      	cmp	r3, r6
 800ca28:	da02      	bge.n	800ca30 <sw_color_fill+0x36>
                }
                mem += mem_width;
            }
        }
    }
}
 800ca2a:	b005      	add	sp, #20
 800ca2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 800ca30:	f9b5 8002 	ldrsh.w	r8, [r5, #2]
 800ca34:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800ca38:	4543      	cmp	r3, r8
 800ca3a:	da02      	bge.n	800ca42 <sw_color_fill+0x48>
 800ca3c:	3601      	adds	r6, #1
 800ca3e:	b236      	sxth	r6, r6
 800ca40:	e7ef      	b.n	800ca22 <sw_color_fill+0x28>
                disp->driver.vdb_wr((uint8_t *)mem, mem_width, col, row, color, opa);
 800ca42:	4643      	mov	r3, r8
 800ca44:	f108 0801 	add.w	r8, r8, #1
 800ca48:	4632      	mov	r2, r6
 800ca4a:	4621      	mov	r1, r4
 800ca4c:	9803      	ldr	r0, [sp, #12]
 800ca4e:	fa0f f888 	sxth.w	r8, r8
 800ca52:	e88d 0600 	stmia.w	sp, {r9, sl}
 800ca56:	f8db 7014 	ldr.w	r7, [fp, #20]
 800ca5a:	47b8      	blx	r7
 800ca5c:	e7ea      	b.n	800ca34 <sw_color_fill+0x3a>
        mem += fill_area->y1 * mem_width;  /*Go to the first row*/
 800ca5e:	f9b5 7002 	ldrsh.w	r7, [r5, #2]
        if(opa == LV_OPA_COVER) {
 800ca62:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
        mem += fill_area->y1 * mem_width;  /*Go to the first row*/
 800ca66:	9a03      	ldr	r2, [sp, #12]
 800ca68:	fb07 f604 	mul.w	r6, r7, r4
 800ca6c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
        if(opa == LV_OPA_COVER) {
 800ca70:	d126      	bne.n	800cac0 <sw_color_fill+0xc6>
            for(col = fill_area->x1; col <= fill_area->x2; col++) {
 800ca72:	f9b5 1000 	ldrsh.w	r1, [r5]
 800ca76:	460a      	mov	r2, r1
 800ca78:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800ca7c:	429a      	cmp	r2, r3
 800ca7e:	dd1a      	ble.n	800cab6 <sw_color_fill+0xbc>
            lv_coord_t copy_size = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 800ca80:	eba3 0901 	sub.w	r9, r3, r1
            lv_color_t * mem_first = &mem[fill_area->x1];
 800ca84:	eb06 0881 	add.w	r8, r6, r1, lsl #2
            mem += mem_width;
 800ca88:	00a4      	lsls	r4, r4, #2
            lv_coord_t copy_size = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 800ca8a:	f109 0901 	add.w	r9, r9, #1
 800ca8e:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800ca92:	fa0f f989 	sxth.w	r9, r9
 800ca96:	3701      	adds	r7, #1
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 800ca98:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
                mem += mem_width;
 800ca9c:	4426      	add	r6, r4
 800ca9e:	b23f      	sxth	r7, r7
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 800caa0:	42bb      	cmp	r3, r7
 800caa2:	dbc2      	blt.n	800ca2a <sw_color_fill+0x30>
                memcpy(&mem[fill_area->x1], mem_first, copy_size);
 800caa4:	f9b5 0000 	ldrsh.w	r0, [r5]
 800caa8:	464a      	mov	r2, r9
 800caaa:	4641      	mov	r1, r8
 800caac:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 800cab0:	f009 f834 	bl	8015b1c <memcpy>
 800cab4:	e7ef      	b.n	800ca96 <sw_color_fill+0x9c>
                mem[col] = color;
 800cab6:	f846 9022 	str.w	r9, [r6, r2, lsl #2]
 800caba:	3201      	adds	r2, #1
 800cabc:	b212      	sxth	r2, r2
 800cabe:	e7db      	b.n	800ca78 <sw_color_fill+0x7e>
            lv_color_t bg_tmp = LV_COLOR_BLACK;
 800cac0:	2700      	movs	r7, #0
            lv_color_t opa_tmp = lv_color_mix(color, bg_tmp, opa);
 800cac2:	4652      	mov	r2, sl
 800cac4:	4648      	mov	r0, r9
                mem += mem_width;
 800cac6:	00a4      	lsls	r4, r4, #2
            lv_color_t bg_tmp = LV_COLOR_BLACK;
 800cac8:	f363 0707 	bfi	r7, r3, #0, #8
 800cacc:	f363 270f 	bfi	r7, r3, #8, #8
 800cad0:	f363 4717 	bfi	r7, r3, #16, #8
 800cad4:	f047 477f 	orr.w	r7, r7, #4278190080	; 0xff000000
            lv_color_t opa_tmp = lv_color_mix(color, bg_tmp, opa);
 800cad8:	4639      	mov	r1, r7
 800cada:	f7ff ff5b 	bl	800c994 <lv_color_mix>
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 800cade:	f9b5 b002 	ldrsh.w	fp, [r5, #2]
 800cae2:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800cae6:	455b      	cmp	r3, fp
 800cae8:	db9f      	blt.n	800ca2a <sw_color_fill+0x30>
                for(col = fill_area->x1; col <= fill_area->x2; col++) {
 800caea:	f9b5 8000 	ldrsh.w	r8, [r5]
 800caee:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800caf2:	4543      	cmp	r3, r8
 800caf4:	da05      	bge.n	800cb02 <sw_color_fill+0x108>
 800caf6:	f10b 0b01 	add.w	fp, fp, #1
                mem += mem_width;
 800cafa:	4426      	add	r6, r4
 800cafc:	fa0f fb8b 	sxth.w	fp, fp
 800cb00:	e7ef      	b.n	800cae2 <sw_color_fill+0xe8>
                    if(mem[col].full != bg_tmp.full) {
 800cb02:	f856 2028 	ldr.w	r2, [r6, r8, lsl #2]
 800cb06:	eb06 0388 	add.w	r3, r6, r8, lsl #2
 800cb0a:	42ba      	cmp	r2, r7
 800cb0c:	d007      	beq.n	800cb1e <sw_color_fill+0x124>
                        bg_tmp = mem[col];
 800cb0e:	4617      	mov	r7, r2
                        opa_tmp = lv_color_mix(color, bg_tmp, opa);
 800cb10:	4648      	mov	r0, r9
 800cb12:	4652      	mov	r2, sl
 800cb14:	9303      	str	r3, [sp, #12]
 800cb16:	4639      	mov	r1, r7
 800cb18:	f7ff ff3c 	bl	800c994 <lv_color_mix>
 800cb1c:	9b03      	ldr	r3, [sp, #12]
 800cb1e:	f108 0801 	add.w	r8, r8, #1
                    mem[col] = opa_tmp;
 800cb22:	6018      	str	r0, [r3, #0]
 800cb24:	fa0f f888 	sxth.w	r8, r8
 800cb28:	e7e1      	b.n	800caee <sw_color_fill+0xf4>

0800cb2a <lv_vpx>:
{
 800cb2a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb2e:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
 800cb32:	4606      	mov	r6, r0
 800cb34:	460d      	mov	r5, r1
 800cb36:	4614      	mov	r4, r2
    if(opa < LV_OPA_MIN) return;
 800cb38:	f1ba 0f0f 	cmp.w	sl, #15
{
 800cb3c:	4698      	mov	r8, r3
    if(opa < LV_OPA_MIN) return;
 800cb3e:	d92e      	bls.n	800cb9e <lv_vpx+0x74>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800cb40:	f1ba 0ffc 	cmp.w	sl, #252	; 0xfc
 800cb44:	bf28      	it	cs
 800cb46:	f04f 0aff 	movcs.w	sl, #255	; 0xff
    lv_vdb_t * vdb_p = lv_vdb_get();
 800cb4a:	f7fc fdf7 	bl	800973c <lv_vdb_get>
    if(!vdb_p) {
 800cb4e:	4607      	mov	r7, r0
 800cb50:	b328      	cbz	r0, 800cb9e <lv_vpx+0x74>
    if(x < mask_p->x1 || x > mask_p->x2 ||
 800cb52:	f9b4 3000 	ldrsh.w	r3, [r4]
 800cb56:	42b3      	cmp	r3, r6
 800cb58:	dc21      	bgt.n	800cb9e <lv_vpx+0x74>
 800cb5a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800cb5e:	42b3      	cmp	r3, r6
 800cb60:	db1d      	blt.n	800cb9e <lv_vpx+0x74>
 800cb62:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800cb66:	42ab      	cmp	r3, r5
 800cb68:	dc19      	bgt.n	800cb9e <lv_vpx+0x74>
            y < mask_p->y1 || y > mask_p->y2) {
 800cb6a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800cb6e:	42ab      	cmp	r3, r5
 800cb70:	db15      	blt.n	800cb9e <lv_vpx+0x74>
 800cb72:	8884      	ldrh	r4, [r0, #4]
 800cb74:	8802      	ldrh	r2, [r0, #0]
 800cb76:	3401      	adds	r4, #1
    x -= vdb_p->area.x1;
 800cb78:	1ab6      	subs	r6, r6, r2
 800cb7a:	1aa4      	subs	r4, r4, r2
 800cb7c:	b236      	sxth	r6, r6
 800cb7e:	fa0f f984 	sxth.w	r9, r4
    y -= vdb_p->area.y1;
 800cb82:	8844      	ldrh	r4, [r0, #2]
    lv_disp_t * disp = lv_disp_get_active();
 800cb84:	f000 fc34 	bl	800d3f0 <lv_disp_get_active>
    y -= vdb_p->area.y1;
 800cb88:	1b2c      	subs	r4, r5, r4
    if(disp->driver.vdb_wr) {
 800cb8a:	6945      	ldr	r5, [r0, #20]
    y -= vdb_p->area.y1;
 800cb8c:	b224      	sxth	r4, r4
    if(disp->driver.vdb_wr) {
 800cb8e:	b14d      	cbz	r5, 800cba4 <lv_vpx+0x7a>
        disp->driver.vdb_wr((uint8_t *)vdb_p->buf, vdb_width, x, y, color, opa);
 800cb90:	4623      	mov	r3, r4
 800cb92:	4632      	mov	r2, r6
 800cb94:	4649      	mov	r1, r9
 800cb96:	e88d 0500 	stmia.w	sp, {r8, sl}
 800cb9a:	68b8      	ldr	r0, [r7, #8]
 800cb9c:	47a8      	blx	r5
}
 800cb9e:	b002      	add	sp, #8
 800cba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(opa == LV_OPA_COVER) {
 800cba4:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
        lv_color_t * vdb_px_p = vdb_p->buf + y * vdb_width + x;
 800cba8:	fb09 6404 	mla	r4, r9, r4, r6
 800cbac:	68bd      	ldr	r5, [r7, #8]
        if(opa == LV_OPA_COVER) {
 800cbae:	d102      	bne.n	800cbb6 <lv_vpx+0x8c>
            *vdb_px_p = color;
 800cbb0:	f845 8024 	str.w	r8, [r5, r4, lsl #2]
 800cbb4:	e7f3      	b.n	800cb9e <lv_vpx+0x74>
            *vdb_px_p = lv_color_mix(color, *vdb_px_p, opa);
 800cbb6:	4652      	mov	r2, sl
 800cbb8:	f855 1024 	ldr.w	r1, [r5, r4, lsl #2]
 800cbbc:	4640      	mov	r0, r8
 800cbbe:	f7ff fee9 	bl	800c994 <lv_color_mix>
 800cbc2:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 800cbc6:	e7ea      	b.n	800cb9e <lv_vpx+0x74>

0800cbc8 <lv_vfill>:
    if(opa < LV_OPA_MIN) return;
 800cbc8:	2b0f      	cmp	r3, #15
{
 800cbca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cbce:	4604      	mov	r4, r0
 800cbd0:	b087      	sub	sp, #28
 800cbd2:	460d      	mov	r5, r1
 800cbd4:	4617      	mov	r7, r2
 800cbd6:	4698      	mov	r8, r3
    if(opa < LV_OPA_MIN) return;
 800cbd8:	d950      	bls.n	800cc7c <lv_vfill+0xb4>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800cbda:	2bfc      	cmp	r3, #252	; 0xfc
 800cbdc:	bf28      	it	cs
 800cbde:	f04f 08ff 	movcs.w	r8, #255	; 0xff
    lv_vdb_t * vdb_p = lv_vdb_get();
 800cbe2:	f7fc fdab 	bl	800973c <lv_vdb_get>
    if(!vdb_p) {
 800cbe6:	4606      	mov	r6, r0
 800cbe8:	2800      	cmp	r0, #0
 800cbea:	d047      	beq.n	800cc7c <lv_vfill+0xb4>
    union_ok = lv_area_intersect(&res_a, cords_p, mask_p);
 800cbec:	462a      	mov	r2, r5
 800cbee:	4621      	mov	r1, r4
 800cbf0:	a802      	add	r0, sp, #8
 800cbf2:	f000 fdf7 	bl	800d7e4 <lv_area_intersect>
    if(union_ok == false) return;
 800cbf6:	2800      	cmp	r0, #0
 800cbf8:	d040      	beq.n	800cc7c <lv_vfill+0xb4>
    vdb_rel_a.x1 = res_a.x1 - vdb_p->area.x1;
 800cbfa:	8831      	ldrh	r1, [r6, #0]
    vdb_rel_a.x2 = res_a.x2 - vdb_p->area.x1;
 800cbfc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    vdb_rel_a.x1 = res_a.x1 - vdb_p->area.x1;
 800cc00:	f8bd 4008 	ldrh.w	r4, [sp, #8]
    vdb_rel_a.x2 = res_a.x2 - vdb_p->area.x1;
 800cc04:	1a5b      	subs	r3, r3, r1
    vdb_rel_a.y1 = res_a.y1 - vdb_p->area.y1;
 800cc06:	8870      	ldrh	r0, [r6, #2]
    vdb_rel_a.x1 = res_a.x1 - vdb_p->area.x1;
 800cc08:	1a64      	subs	r4, r4, r1
    vdb_rel_a.y1 = res_a.y1 - vdb_p->area.y1;
 800cc0a:	f8bd 500a 	ldrh.w	r5, [sp, #10]
    vdb_rel_a.x2 = res_a.x2 - vdb_p->area.x1;
 800cc0e:	b29b      	uxth	r3, r3
    vdb_rel_a.y2 = res_a.y2 - vdb_p->area.y1;
 800cc10:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    vdb_rel_a.x1 = res_a.x1 - vdb_p->area.x1;
 800cc14:	b2a2      	uxth	r2, r4
    vdb_rel_a.y1 = res_a.y1 - vdb_p->area.y1;
 800cc16:	1a2d      	subs	r5, r5, r0
 800cc18:	1c5c      	adds	r4, r3, #1
    vdb_rel_a.y2 = res_a.y2 - vdb_p->area.y1;
 800cc1a:	1a09      	subs	r1, r1, r0
    vdb_rel_a.y1 = res_a.y1 - vdb_p->area.y1;
 800cc1c:	b22d      	sxth	r5, r5
    vdb_rel_a.x1 = res_a.x1 - vdb_p->area.x1;
 800cc1e:	f8ad 2010 	strh.w	r2, [sp, #16]
 800cc22:	1aa4      	subs	r4, r4, r2
    vdb_rel_a.y2 = res_a.y2 - vdb_p->area.y1;
 800cc24:	f8ad 1016 	strh.w	r1, [sp, #22]
    vdb_rel_a.y1 = res_a.y1 - vdb_p->area.y1;
 800cc28:	f8ad 5012 	strh.w	r5, [sp, #18]
 800cc2c:	b224      	sxth	r4, r4
    vdb_rel_a.x2 = res_a.x2 - vdb_p->area.x1;
 800cc2e:	f8ad 3014 	strh.w	r3, [sp, #20]
    lv_color_t * vdb_buf_tmp = vdb_p->buf;
 800cc32:	68b1      	ldr	r1, [r6, #8]
    if(w < VFILL_HW_ACC_SIZE_LIMIT) {
 800cc34:	2c31      	cmp	r4, #49	; 0x31
 800cc36:	dc07      	bgt.n	800cc48 <lv_vfill+0x80>
        sw_color_fill(&vdb_p->area, vdb_p->buf, &vdb_rel_a, color, opa);
 800cc38:	463b      	mov	r3, r7
 800cc3a:	aa04      	add	r2, sp, #16
 800cc3c:	f8cd 8000 	str.w	r8, [sp]
            sw_color_fill(&vdb_p->area, vdb_p->buf, &vdb_rel_a, color, opa);
 800cc40:	4630      	mov	r0, r6
 800cc42:	f7ff feda 	bl	800c9fa <sw_color_fill>
 800cc46:	e019      	b.n	800cc7c <lv_vfill+0xb4>
 800cc48:	f8b6 9004 	ldrh.w	r9, [r6, #4]
    vdb_buf_tmp += vdb_width * vdb_rel_a.y1;
 800cc4c:	00ad      	lsls	r5, r5, #2
 800cc4e:	8833      	ldrh	r3, [r6, #0]
    else if(opa == LV_OPA_COVER) {
 800cc50:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800cc54:	f109 0901 	add.w	r9, r9, #1
 800cc58:	eba9 0903 	sub.w	r9, r9, r3
 800cc5c:	fa0f f989 	sxth.w	r9, r9
    vdb_buf_tmp += vdb_width * vdb_rel_a.y1;
 800cc60:	fb09 1505 	mla	r5, r9, r5, r1
    else if(opa == LV_OPA_COVER) {
 800cc64:	d154      	bne.n	800cd10 <lv_vfill+0x148>
        if(lv_disp_is_mem_fill_supported()) {
 800cc66:	f000 fbfb 	bl	800d460 <lv_disp_is_mem_fill_supported>
 800cc6a:	b1b0      	cbz	r0, 800cc9a <lv_vfill+0xd2>
            for(row = vdb_rel_a.y1; row <= vdb_rel_a.y2; row++) {
 800cc6c:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
                vdb_buf_tmp += vdb_width;
 800cc70:	ea4f 0989 	mov.w	r9, r9, lsl #2
            for(row = vdb_rel_a.y1; row <= vdb_rel_a.y2; row++) {
 800cc74:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800cc78:	42b3      	cmp	r3, r6
 800cc7a:	da02      	bge.n	800cc82 <lv_vfill+0xba>
}
 800cc7c:	b007      	add	sp, #28
 800cc7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                lv_disp_mem_fill(&vdb_buf_tmp[vdb_rel_a.x1], w, color);
 800cc82:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 800cc86:	3601      	adds	r6, #1
 800cc88:	463a      	mov	r2, r7
 800cc8a:	4621      	mov	r1, r4
 800cc8c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
                vdb_buf_tmp += vdb_width;
 800cc90:	444d      	add	r5, r9
                lv_disp_mem_fill(&vdb_buf_tmp[vdb_rel_a.x1], w, color);
 800cc92:	f000 fbd1 	bl	800d438 <lv_disp_mem_fill>
 800cc96:	b236      	sxth	r6, r6
 800cc98:	e7ec      	b.n	800cc74 <lv_vfill+0xac>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 800cc9a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800cc9e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800cca2:	3301      	adds	r3, #1
 800cca4:	1a9b      	subs	r3, r3, r2
        else if(lv_area_get_height(&vdb_rel_a) > VFILL_HW_ACC_SIZE_LIMIT &&
 800cca6:	b21b      	sxth	r3, r3
 800cca8:	2b32      	cmp	r3, #50	; 0x32
 800ccaa:	dd2b      	ble.n	800cd04 <lv_vfill+0x13c>
                lv_disp_is_mem_blend_supported()) {
 800ccac:	f000 fbce 	bl	800d44c <lv_disp_is_mem_blend_supported>
        else if(lv_area_get_height(&vdb_rel_a) > VFILL_HW_ACC_SIZE_LIMIT &&
 800ccb0:	b340      	cbz	r0, 800cd04 <lv_vfill+0x13c>
            if(color_array_tmp[0].full != color.full || last_width != w) {
 800ccb2:	4b2f      	ldr	r3, [pc, #188]	; (800cd70 <lv_vfill+0x1a8>)
 800ccb4:	681a      	ldr	r2, [r3, #0]
 800ccb6:	42ba      	cmp	r2, r7
 800ccb8:	d104      	bne.n	800ccc4 <lv_vfill+0xfc>
 800ccba:	4a2e      	ldr	r2, [pc, #184]	; (800cd74 <lv_vfill+0x1ac>)
 800ccbc:	f9b2 2000 	ldrsh.w	r2, [r2]
 800ccc0:	42a2      	cmp	r2, r4
 800ccc2:	d006      	beq.n	800ccd2 <lv_vfill+0x10a>
 800ccc4:	2000      	movs	r0, #0
                for(i = 0; i < w; i++) {
 800ccc6:	b282      	uxth	r2, r0
 800ccc8:	3001      	adds	r0, #1
 800ccca:	42a2      	cmp	r2, r4
 800cccc:	db17      	blt.n	800ccfe <lv_vfill+0x136>
                last_width = w;
 800ccce:	4b29      	ldr	r3, [pc, #164]	; (800cd74 <lv_vfill+0x1ac>)
 800ccd0:	801c      	strh	r4, [r3, #0]
            for(row = vdb_rel_a.y1; row <= vdb_rel_a.y2; row++) {
 800ccd2:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
                vdb_buf_tmp += vdb_width;
 800ccd6:	ea4f 0989 	mov.w	r9, r9, lsl #2
                lv_disp_mem_blend(&vdb_buf_tmp[vdb_rel_a.x1], color_array_tmp, w, opa);
 800ccda:	4f25      	ldr	r7, [pc, #148]	; (800cd70 <lv_vfill+0x1a8>)
            for(row = vdb_rel_a.y1; row <= vdb_rel_a.y2; row++) {
 800ccdc:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800cce0:	42b3      	cmp	r3, r6
 800cce2:	dbcb      	blt.n	800cc7c <lv_vfill+0xb4>
                lv_disp_mem_blend(&vdb_buf_tmp[vdb_rel_a.x1], color_array_tmp, w, opa);
 800cce4:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 800cce8:	3601      	adds	r6, #1
 800ccea:	23ff      	movs	r3, #255	; 0xff
 800ccec:	4622      	mov	r2, r4
 800ccee:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800ccf2:	4639      	mov	r1, r7
 800ccf4:	f000 fb90 	bl	800d418 <lv_disp_mem_blend>
                vdb_buf_tmp += vdb_width;
 800ccf8:	444d      	add	r5, r9
 800ccfa:	b236      	sxth	r6, r6
 800ccfc:	e7ee      	b.n	800ccdc <lv_vfill+0x114>
                    color_array_tmp[i].full = color.full;
 800ccfe:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 800cd02:	e7e0      	b.n	800ccc6 <lv_vfill+0xfe>
            sw_color_fill(&vdb_p->area, vdb_p->buf, &vdb_rel_a, color, opa);
 800cd04:	23ff      	movs	r3, #255	; 0xff
 800cd06:	9300      	str	r3, [sp, #0]
            sw_color_fill(&vdb_p->area, vdb_p->buf, &vdb_rel_a, color, opa);
 800cd08:	463b      	mov	r3, r7
 800cd0a:	aa04      	add	r2, sp, #16
 800cd0c:	68b1      	ldr	r1, [r6, #8]
 800cd0e:	e797      	b.n	800cc40 <lv_vfill+0x78>
        if(lv_disp_is_mem_blend_supported()) {
 800cd10:	f000 fb9c 	bl	800d44c <lv_disp_is_mem_blend_supported>
 800cd14:	b340      	cbz	r0, 800cd68 <lv_vfill+0x1a0>
            if(color_array_tmp[0].full != color.full || last_width != w) {
 800cd16:	4a16      	ldr	r2, [pc, #88]	; (800cd70 <lv_vfill+0x1a8>)
 800cd18:	6813      	ldr	r3, [r2, #0]
 800cd1a:	42bb      	cmp	r3, r7
 800cd1c:	d104      	bne.n	800cd28 <lv_vfill+0x160>
 800cd1e:	4b15      	ldr	r3, [pc, #84]	; (800cd74 <lv_vfill+0x1ac>)
 800cd20:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cd24:	42a3      	cmp	r3, r4
 800cd26:	d006      	beq.n	800cd36 <lv_vfill+0x16e>
 800cd28:	2300      	movs	r3, #0
                for(i = 0; i < w; i++) {
 800cd2a:	b299      	uxth	r1, r3
 800cd2c:	3301      	adds	r3, #1
 800cd2e:	42a1      	cmp	r1, r4
 800cd30:	db17      	blt.n	800cd62 <lv_vfill+0x19a>
                last_width = w;
 800cd32:	4b10      	ldr	r3, [pc, #64]	; (800cd74 <lv_vfill+0x1ac>)
 800cd34:	801c      	strh	r4, [r3, #0]
            for(row = vdb_rel_a.y1; row <= vdb_rel_a.y2; row++) {
 800cd36:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
                vdb_buf_tmp += vdb_width;
 800cd3a:	ea4f 0989 	mov.w	r9, r9, lsl #2
                lv_disp_mem_blend(&vdb_buf_tmp[vdb_rel_a.x1], color_array_tmp, w, opa);
 800cd3e:	4f0c      	ldr	r7, [pc, #48]	; (800cd70 <lv_vfill+0x1a8>)
            for(row = vdb_rel_a.y1; row <= vdb_rel_a.y2; row++) {
 800cd40:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800cd44:	42b3      	cmp	r3, r6
 800cd46:	db99      	blt.n	800cc7c <lv_vfill+0xb4>
                lv_disp_mem_blend(&vdb_buf_tmp[vdb_rel_a.x1], color_array_tmp, w, opa);
 800cd48:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 800cd4c:	3601      	adds	r6, #1
 800cd4e:	4643      	mov	r3, r8
 800cd50:	4622      	mov	r2, r4
 800cd52:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800cd56:	4639      	mov	r1, r7
 800cd58:	f000 fb5e 	bl	800d418 <lv_disp_mem_blend>
                vdb_buf_tmp += vdb_width;
 800cd5c:	444d      	add	r5, r9
 800cd5e:	b236      	sxth	r6, r6
 800cd60:	e7ee      	b.n	800cd40 <lv_vfill+0x178>
                    color_array_tmp[i].full = color.full;
 800cd62:	f842 7021 	str.w	r7, [r2, r1, lsl #2]
 800cd66:	e7e0      	b.n	800cd2a <lv_vfill+0x162>
            sw_color_fill(&vdb_p->area, vdb_p->buf, &vdb_rel_a, color, opa);
 800cd68:	f8cd 8000 	str.w	r8, [sp]
 800cd6c:	e7cc      	b.n	800cd08 <lv_vfill+0x140>
 800cd6e:	bf00      	nop
 800cd70:	2000ec04 	.word	0x2000ec04
 800cd74:	20000056 	.word	0x20000056

0800cd78 <lv_vletter>:
{
 800cd78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd7c:	4693      	mov	fp, r2
 800cd7e:	b09b      	sub	sp, #108	; 0x6c
    const uint8_t bpp1_opa_table[2] =  {0, 255};                   /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800cd80:	2200      	movs	r2, #0
{
 800cd82:	461e      	mov	r6, r3
 800cd84:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 800cd88:	4605      	mov	r5, r0
    const uint8_t bpp1_opa_table[2] =  {0, 255};                   /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800cd8a:	f88d 2050 	strb.w	r2, [sp, #80]	; 0x50
{
 800cd8e:	460f      	mov	r7, r1
    const uint8_t bpp2_opa_table[4] =  {0, 85, 170, 255};          /*Opacity mapping with bpp = 2*/
 800cd90:	f88d 2054 	strb.w	r2, [sp, #84]	; 0x54
 800cd94:	2255      	movs	r2, #85	; 0x55
{
 800cd96:	9303      	str	r3, [sp, #12]
    const uint8_t bpp1_opa_table[2] =  {0, 255};                   /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800cd98:	23ff      	movs	r3, #255	; 0xff
    const uint8_t bpp2_opa_table[4] =  {0, 85, 170, 255};          /*Opacity mapping with bpp = 2*/
 800cd9a:	f88d 2055 	strb.w	r2, [sp, #85]	; 0x55
 800cd9e:	22aa      	movs	r2, #170	; 0xaa
    const uint8_t bpp1_opa_table[2] =  {0, 255};                   /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800cda0:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    const uint8_t bpp2_opa_table[4] =  {0, 85, 170, 255};          /*Opacity mapping with bpp = 2*/
 800cda4:	f88d 2056 	strb.w	r2, [sp, #86]	; 0x56
    const uint8_t bpp4_opa_table[16] = {0,   17,  34,  51,         /*Opacity mapping with bpp = 4*/
 800cda8:	aa16      	add	r2, sp, #88	; 0x58
    const uint8_t bpp2_opa_table[4] =  {0, 85, 170, 255};          /*Opacity mapping with bpp = 2*/
 800cdaa:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
    const uint8_t bpp4_opa_table[16] = {0,   17,  34,  51,         /*Opacity mapping with bpp = 4*/
 800cdae:	4bb5      	ldr	r3, [pc, #724]	; (800d084 <lv_vletter+0x30c>)
 800cdb0:	4692      	mov	sl, r2
 800cdb2:	f103 0e10 	add.w	lr, r3, #16
 800cdb6:	6818      	ldr	r0, [r3, #0]
 800cdb8:	3308      	adds	r3, #8
 800cdba:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800cdbe:	4614      	mov	r4, r2
 800cdc0:	4573      	cmp	r3, lr
 800cdc2:	c403      	stmia	r4!, {r0, r1}
 800cdc4:	4622      	mov	r2, r4
 800cdc6:	d1f6      	bne.n	800cdb6 <lv_vletter+0x3e>
    if(opa < LV_OPA_MIN) return;
 800cdc8:	9b03      	ldr	r3, [sp, #12]
 800cdca:	2b0f      	cmp	r3, #15
 800cdcc:	f240 816e 	bls.w	800d0ac <lv_vletter+0x334>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800cdd0:	2bfc      	cmp	r3, #252	; 0xfc
 800cdd2:	bf28      	it	cs
 800cdd4:	23ff      	movcs	r3, #255	; 0xff
 800cdd6:	9303      	str	r3, [sp, #12]
    if(font_p == NULL) {
 800cdd8:	f1bb 0f00 	cmp.w	fp, #0
 800cddc:	f000 8166 	beq.w	800d0ac <lv_vletter+0x334>
    lv_coord_t pos_y = pos_p->y;
 800cde0:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
    uint8_t letter_w = lv_font_get_real_width(font_p, letter);
 800cde4:	4631      	mov	r1, r6
 800cde6:	4658      	mov	r0, fp
    lv_coord_t pos_x = pos_p->x;
 800cde8:	f9b5 4000 	ldrsh.w	r4, [r5]
    lv_coord_t pos_y = pos_p->y;
 800cdec:	9302      	str	r3, [sp, #8]
    uint8_t letter_w = lv_font_get_real_width(font_p, letter);
 800cdee:	f000 fe04 	bl	800d9fa <lv_font_get_real_width>
    uint8_t bpp = lv_font_get_bpp(font_p, letter);  /*Bit per pixel (1,2, 4 or 8)*/
 800cdf2:	4631      	mov	r1, r6
    uint8_t letter_w = lv_font_get_real_width(font_p, letter);
 800cdf4:	4681      	mov	r9, r0
    uint8_t bpp = lv_font_get_bpp(font_p, letter);  /*Bit per pixel (1,2, 4 or 8)*/
 800cdf6:	4658      	mov	r0, fp
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline uint8_t lv_font_get_height(const lv_font_t * font_p)
{
    return font_p->h_px;
 800cdf8:	f89b 8020 	ldrb.w	r8, [fp, #32]
 800cdfc:	f000 fe0d 	bl	800da1a <lv_font_get_bpp>
    if(lv_font_is_monospace(font_p, letter)) {
 800ce00:	4631      	mov	r1, r6
    uint8_t bpp = lv_font_get_bpp(font_p, letter);  /*Bit per pixel (1,2, 4 or 8)*/
 800ce02:	4605      	mov	r5, r0
    if(lv_font_is_monospace(font_p, letter)) {
 800ce04:	4658      	mov	r0, fp
 800ce06:	f000 fdc0 	bl	800d98a <lv_font_is_monospace>
 800ce0a:	b150      	cbz	r0, 800ce22 <lv_vletter+0xaa>
        pos_x += (lv_font_get_width(font_p, letter) - letter_w) / 2;
 800ce0c:	4631      	mov	r1, r6
 800ce0e:	4658      	mov	r0, fp
 800ce10:	f000 fdde 	bl	800d9d0 <lv_font_get_width>
 800ce14:	2302      	movs	r3, #2
 800ce16:	eba0 0009 	sub.w	r0, r0, r9
 800ce1a:	fb90 f0f3 	sdiv	r0, r0, r3
 800ce1e:	4404      	add	r4, r0
 800ce20:	b224      	sxth	r4, r4
    switch(bpp) {
 800ce22:	1e6b      	subs	r3, r5, #1
 800ce24:	2b07      	cmp	r3, #7
 800ce26:	f200 8141 	bhi.w	800d0ac <lv_vletter+0x334>
 800ce2a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ce2e:	0008      	.short	0x0008
 800ce30:	013f00d2 	.word	0x013f00d2
 800ce34:	013f000d 	.word	0x013f000d
 800ce38:	013f013f 	.word	0x013f013f
 800ce3c:	00ce      	.short	0x00ce
            mask_init = 0x80;
 800ce3e:	2380      	movs	r3, #128	; 0x80
 800ce40:	9306      	str	r3, [sp, #24]
            bpp_opa_table = bpp1_opa_table;
 800ce42:	ab14      	add	r3, sp, #80	; 0x50
            bpp_opa_table = bpp2_opa_table;
 800ce44:	9305      	str	r3, [sp, #20]
 800ce46:	e003      	b.n	800ce50 <lv_vletter+0xd8>
            mask_init = 0xF0;
 800ce48:	23f0      	movs	r3, #240	; 0xf0
            bpp_opa_table = bpp4_opa_table;
 800ce4a:	f8cd a014 	str.w	sl, [sp, #20]
            mask_init = 0xF0;
 800ce4e:	9306      	str	r3, [sp, #24]
    const uint8_t * map_p = lv_font_get_bitmap(font_p, letter);
 800ce50:	4631      	mov	r1, r6
 800ce52:	4658      	mov	r0, fp
 800ce54:	f000 fdae 	bl	800d9b4 <lv_font_get_bitmap>
    if(map_p == NULL) return;
 800ce58:	9009      	str	r0, [sp, #36]	; 0x24
 800ce5a:	2800      	cmp	r0, #0
 800ce5c:	f000 8126 	beq.w	800d0ac <lv_vletter+0x334>
    if(pos_x + letter_w < mask_p->x1 || pos_x > mask_p->x2 ||
 800ce60:	eb09 0304 	add.w	r3, r9, r4
 800ce64:	f9b7 2000 	ldrsh.w	r2, [r7]
 800ce68:	4293      	cmp	r3, r2
 800ce6a:	f2c0 811f 	blt.w	800d0ac <lv_vletter+0x334>
 800ce6e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800ce72:	42a2      	cmp	r2, r4
 800ce74:	f2c0 811a 	blt.w	800d0ac <lv_vletter+0x334>
            pos_y + letter_h < mask_p->y1 || pos_y > mask_p->y2) return;
 800ce78:	9a02      	ldr	r2, [sp, #8]
 800ce7a:	eb08 0a02 	add.w	sl, r8, r2
 800ce7e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
    if(pos_x + letter_w < mask_p->x1 || pos_x > mask_p->x2 ||
 800ce82:	4592      	cmp	sl, r2
 800ce84:	f2c0 8112 	blt.w	800d0ac <lv_vletter+0x334>
            pos_y + letter_h < mask_p->y1 || pos_y > mask_p->y2) return;
 800ce88:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ce8c:	9902      	ldr	r1, [sp, #8]
 800ce8e:	428a      	cmp	r2, r1
 800ce90:	f2c0 810c 	blt.w	800d0ac <lv_vletter+0x334>
 800ce94:	9304      	str	r3, [sp, #16]
    lv_vdb_t * vdb_p = lv_vdb_get();
 800ce96:	f7fc fc51 	bl	800973c <lv_vdb_get>
    if(!vdb_p) {
 800ce9a:	4683      	mov	fp, r0
 800ce9c:	2800      	cmp	r0, #0
 800ce9e:	f000 8105 	beq.w	800d0ac <lv_vletter+0x334>
    return area_p->x2 - area_p->x1 + 1;
 800cea2:	8882      	ldrh	r2, [r0, #4]
 800cea4:	f9b0 1000 	ldrsh.w	r1, [r0]
 800cea8:	3201      	adds	r2, #1
    lv_coord_t col_start = pos_x >= mask_p->x1 ? 0 : mask_p->x1 - pos_x;
 800ceaa:	f9b7 6000 	ldrsh.w	r6, [r7]
 800ceae:	1a52      	subs	r2, r2, r1
 800ceb0:	b213      	sxth	r3, r2
    lv_color_t * vdb_buf_tmp = vdb_p->buf;
 800ceb2:	6882      	ldr	r2, [r0, #8]
    uint8_t width_byte_bpp = (letter_w * bpp) >> 3;    /*Letter width in byte. Real width in the font*/
 800ceb4:	fb15 f009 	smulbb	r0, r5, r9
 800ceb8:	930b      	str	r3, [sp, #44]	; 0x2c
    if((letter_w * bpp) & 0x7) width_byte_bpp++;
 800ceba:	f010 0f07 	tst.w	r0, #7
    uint8_t width_byte_bpp = (letter_w * bpp) >> 3;    /*Letter width in byte. Real width in the font*/
 800cebe:	f3c0 03c7 	ubfx	r3, r0, #3, #8
 800cec2:	930a      	str	r3, [sp, #40]	; 0x28
    if((letter_w * bpp) & 0x7) width_byte_bpp++;
 800cec4:	bf18      	it	ne
 800cec6:	980a      	ldrne	r0, [sp, #40]	; 0x28
 800cec8:	9b04      	ldr	r3, [sp, #16]
 800ceca:	bf1e      	ittt	ne
 800cecc:	3001      	addne	r0, #1
 800cece:	b2c0      	uxtbne	r0, r0
 800ced0:	900a      	strne	r0, [sp, #40]	; 0x28
    lv_coord_t col_start = pos_x >= mask_p->x1 ? 0 : mask_p->x1 - pos_x;
 800ced2:	42b4      	cmp	r4, r6
 800ced4:	bfb6      	itet	lt
 800ced6:	1b36      	sublt	r6, r6, r4
 800ced8:	2600      	movge	r6, #0
 800ceda:	b2b6      	uxthlt	r6, r6
 800cedc:	b230      	sxth	r0, r6
 800cede:	9007      	str	r0, [sp, #28]
    lv_coord_t col_end = pos_x + letter_w <= mask_p->x2 ? letter_w : mask_p->x2 - pos_x + 1;
 800cee0:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 800cee4:	4283      	cmp	r3, r0
 800cee6:	bfc8      	it	gt
 800cee8:	f100 0901 	addgt.w	r9, r0, #1
    lv_coord_t row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
 800ceec:	9802      	ldr	r0, [sp, #8]
    lv_coord_t col_end = pos_x + letter_w <= mask_p->x2 ? letter_w : mask_p->x2 - pos_x + 1;
 800ceee:	bfc8      	it	gt
 800cef0:	eba9 0904 	subgt.w	r9, r9, r4
 800cef4:	fa0f f389 	sxth.w	r3, r9
 800cef8:	9308      	str	r3, [sp, #32]
    lv_coord_t row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
 800cefa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cefe:	4298      	cmp	r0, r3
 800cf00:	bfb4      	ite	lt
 800cf02:	1a1b      	sublt	r3, r3, r0
 800cf04:	2300      	movge	r3, #0
    vdb_buf_tmp += ((pos_y - vdb_p->area.y1) * vdb_width)
 800cf06:	9802      	ldr	r0, [sp, #8]
    lv_coord_t row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
 800cf08:	bfb8      	it	lt
 800cf0a:	b29b      	uxthlt	r3, r3
 800cf0c:	b21b      	sxth	r3, r3
 800cf0e:	9304      	str	r3, [sp, #16]
    lv_coord_t row_end  = pos_y + letter_h <= mask_p->y2 ? letter_h : mask_p->y2 - pos_y + 1;
 800cf10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    vdb_buf_tmp += (row_start * vdb_width) + col_start;
 800cf14:	9f07      	ldr	r7, [sp, #28]
    lv_coord_t row_end  = pos_y + letter_h <= mask_p->y2 ? letter_h : mask_p->y2 - pos_y + 1;
 800cf16:	459a      	cmp	sl, r3
 800cf18:	bfc2      	ittt	gt
 800cf1a:	f103 0801 	addgt.w	r8, r3, #1
 800cf1e:	9b02      	ldrgt	r3, [sp, #8]
 800cf20:	eba8 0803 	subgt.w	r8, r8, r3
 800cf24:	fa0f f388 	sxth.w	r3, r8
 800cf28:	930e      	str	r3, [sp, #56]	; 0x38
    vdb_buf_tmp += ((pos_y - vdb_p->area.y1) * vdb_width)
 800cf2a:	f9bb 3002 	ldrsh.w	r3, [fp, #2]
 800cf2e:	1ac3      	subs	r3, r0, r3
                   + pos_x - vdb_p->area.x1;
 800cf30:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800cf32:	fb00 4303 	mla	r3, r0, r3, r4
 800cf36:	1a5b      	subs	r3, r3, r1
    vdb_buf_tmp += (row_start * vdb_width) + col_start;
 800cf38:	9904      	ldr	r1, [sp, #16]
 800cf3a:	fb00 7801 	mla	r8, r0, r1, r7
    map_p += (row_start * width_byte_bpp) + ((col_start * bpp) >> 3);
 800cf3e:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
    vdb_buf_tmp += (row_start * vdb_width) + col_start;
 800cf42:	4443      	add	r3, r8
 800cf44:	eb02 0883 	add.w	r8, r2, r3, lsl #2
    map_p += (row_start * width_byte_bpp) + ((col_start * bpp) >> 3);
 800cf48:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800cf4c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800cf50:	fb15 f703 	smulbb	r7, r5, r3
 800cf54:	10fb      	asrs	r3, r7, #3
 800cf56:	fb12 3301 	smlabb	r3, r2, r1, r3
 800cf5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf5c:	441a      	add	r2, r3
 800cf5e:	4692      	mov	sl, r2
    lv_disp_t * disp = lv_disp_get_active();
 800cf60:	f000 fa46 	bl	800d3f0 <lv_disp_get_active>
        col_bit = (col_start * bpp) % 8;
 800cf64:	427b      	negs	r3, r7
 800cf66:	f007 0707 	and.w	r7, r7, #7
 800cf6a:	9908      	ldr	r1, [sp, #32]
 800cf6c:	f003 0307 	and.w	r3, r3, #7
    lv_disp_t * disp = lv_disp_get_active();
 800cf70:	9010      	str	r0, [sp, #64]	; 0x40
 800cf72:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
        col_bit = (col_start * bpp) % 8;
 800cf76:	bf58      	it	pl
 800cf78:	425f      	negpl	r7, r3
 800cf7a:	b2fb      	uxtb	r3, r7
 800cf7c:	930f      	str	r3, [sp, #60]	; 0x3c
        mask = mask_init >> col_bit;
 800cf7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cf80:	9b06      	ldr	r3, [sp, #24]
 800cf82:	4113      	asrs	r3, r2
        vdb_buf_tmp += vdb_width  - (col_end - col_start); /*Next row in VDB*/
 800cf84:	9a07      	ldr	r2, [sp, #28]
        mask = mask_init >> col_bit;
 800cf86:	b2db      	uxtb	r3, r3
 800cf88:	9311      	str	r3, [sp, #68]	; 0x44
        vdb_buf_tmp += vdb_width  - (col_end - col_start); /*Next row in VDB*/
 800cf8a:	9b08      	ldr	r3, [sp, #32]
 800cf8c:	1a9b      	subs	r3, r3, r2
 800cf8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cf90:	1ad3      	subs	r3, r2, r3
 800cf92:	9a08      	ldr	r2, [sp, #32]
 800cf94:	1b96      	subs	r6, r2, r6
 800cf96:	9a07      	ldr	r2, [sp, #28]
 800cf98:	b2b6      	uxth	r6, r6
 800cf9a:	00b6      	lsls	r6, r6, #2
 800cf9c:	428a      	cmp	r2, r1
 800cf9e:	bfc8      	it	gt
 800cfa0:	2600      	movgt	r6, #0
 800cfa2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cfa6:	9312      	str	r3, [sp, #72]	; 0x48
            if(col_bit < 8 - bpp) {
 800cfa8:	f1c5 0308 	rsb	r3, r5, #8
 800cfac:	9313      	str	r3, [sp, #76]	; 0x4c
 800cfae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    for(row = row_start; row < row_end; row ++) {
 800cfb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cfb2:	9309      	str	r3, [sp, #36]	; 0x24
 800cfb4:	9b04      	ldr	r3, [sp, #16]
 800cfb6:	4293      	cmp	r3, r2
 800cfb8:	da78      	bge.n	800d0ac <lv_vletter+0x334>
 800cfba:	2300      	movs	r3, #0
 800cfbc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800cfbe:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800cfc2:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 800cfc6:	930c      	str	r3, [sp, #48]	; 0x30
 800cfc8:	e041      	b.n	800d04e <lv_vletter+0x2d6>
            mask_init = 0xFF;
 800cfca:	23ff      	movs	r3, #255	; 0xff
 800cfcc:	9306      	str	r3, [sp, #24]
            bpp_opa_table = NULL;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	e738      	b.n	800ce44 <lv_vletter+0xcc>
            mask_init = 0xC0;
 800cfd2:	23c0      	movs	r3, #192	; 0xc0
 800cfd4:	9306      	str	r3, [sp, #24]
            bpp_opa_table = bpp2_opa_table;
 800cfd6:	ab15      	add	r3, sp, #84	; 0x54
 800cfd8:	e734      	b.n	800ce44 <lv_vletter+0xcc>
            letter_px = (*map_p & mask) >> (8 - col_bit - bpp);
 800cfda:	f89a 2000 	ldrb.w	r2, [sl]
 800cfde:	f1c7 0308 	rsb	r3, r7, #8
 800cfe2:	ea08 0202 	and.w	r2, r8, r2
 800cfe6:	1b5b      	subs	r3, r3, r5
 800cfe8:	411a      	asrs	r2, r3
            if(letter_px != 0) {
 800cfea:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 800cfee:	d01e      	beq.n	800d02e <lv_vletter+0x2b6>
                if(opa == LV_OPA_COVER) {
 800cff0:	9b03      	ldr	r3, [sp, #12]
 800cff2:	2bff      	cmp	r3, #255	; 0xff
 800cff4:	d13b      	bne.n	800d06e <lv_vletter+0x2f6>
                    px_opa = bpp == 8 ? letter_px : bpp_opa_table[letter_px];
 800cff6:	2d08      	cmp	r5, #8
 800cff8:	d001      	beq.n	800cffe <lv_vletter+0x286>
 800cffa:	9b05      	ldr	r3, [sp, #20]
 800cffc:	5c9a      	ldrb	r2, [r3, r2]
                if(disp->driver.vdb_wr) {
 800cffe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d000:	695b      	ldr	r3, [r3, #20]
 800d002:	461e      	mov	r6, r3
 800d004:	2b00      	cmp	r3, #0
 800d006:	d03f      	beq.n	800d088 <lv_vletter+0x310>
                                        (col + pos_x) - vdb_p->area.x1, (row + pos_y) - vdb_p->area.y1,
 800d008:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 800d00c:	9902      	ldr	r1, [sp, #8]
 800d00e:	1acb      	subs	r3, r1, r3
 800d010:	9904      	ldr	r1, [sp, #16]
 800d012:	440b      	add	r3, r1
 800d014:	f8bb 1000 	ldrh.w	r1, [fp]
                    disp->driver.vdb_wr((uint8_t *)vdb_p->buf, vdb_width,
 800d018:	9201      	str	r2, [sp, #4]
                                        (col + pos_x) - vdb_p->area.x1, (row + pos_y) - vdb_p->area.y1,
 800d01a:	1a61      	subs	r1, r4, r1
                    disp->driver.vdb_wr((uint8_t *)vdb_p->buf, vdb_width,
 800d01c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d01e:	b21b      	sxth	r3, r3
                                        (col + pos_x) - vdb_p->area.x1, (row + pos_y) - vdb_p->area.y1,
 800d020:	4449      	add	r1, r9
                    disp->driver.vdb_wr((uint8_t *)vdb_p->buf, vdb_width,
 800d022:	9200      	str	r2, [sp, #0]
 800d024:	f8db 0008 	ldr.w	r0, [fp, #8]
 800d028:	b20a      	sxth	r2, r1
 800d02a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d02c:	47b0      	blx	r6
            vdb_buf_tmp++;
 800d02e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d030:	3304      	adds	r3, #4
 800d032:	9309      	str	r3, [sp, #36]	; 0x24
            if(col_bit < 8 - bpp) {
 800d034:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d036:	429f      	cmp	r7, r3
 800d038:	da2e      	bge.n	800d098 <lv_vletter+0x320>
                col_bit += bpp;
 800d03a:	442f      	add	r7, r5
                mask = mask >> bpp;
 800d03c:	fa48 f805 	asr.w	r8, r8, r5
                col_bit += bpp;
 800d040:	b2ff      	uxtb	r7, r7
                mask = mask >> bpp;
 800d042:	fa5f f888 	uxtb.w	r8, r8
 800d046:	f109 0901 	add.w	r9, r9, #1
 800d04a:	fa0f f989 	sxth.w	r9, r9
        for(col = col_start; col < col_end; col ++) {
 800d04e:	9b08      	ldr	r3, [sp, #32]
 800d050:	4599      	cmp	r9, r3
 800d052:	dbc2      	blt.n	800cfda <lv_vletter+0x262>
        map_p += (width_byte_bpp) - col_byte_cnt;
 800d054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d056:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d058:	1a9e      	subs	r6, r3, r2
 800d05a:	9b04      	ldr	r3, [sp, #16]
 800d05c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d05e:	3301      	adds	r3, #1
 800d060:	44b2      	add	sl, r6
 800d062:	b21b      	sxth	r3, r3
 800d064:	9304      	str	r3, [sp, #16]
 800d066:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d068:	4413      	add	r3, r2
 800d06a:	930d      	str	r3, [sp, #52]	; 0x34
 800d06c:	e79f      	b.n	800cfae <lv_vletter+0x236>
                    px_opa = bpp == 8 ?
 800d06e:	2d08      	cmp	r5, #8
                             (uint16_t)((uint16_t)bpp_opa_table[letter_px] * opa) >> 8;
 800d070:	bf1c      	itt	ne
 800d072:	9b05      	ldrne	r3, [sp, #20]
 800d074:	5c9a      	ldrbne	r2, [r3, r2]
 800d076:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800d07a:	fb12 f203 	smulbb	r2, r2, r3
                    px_opa = bpp == 8 ?
 800d07e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800d082:	e7bc      	b.n	800cffe <lv_vletter+0x286>
 800d084:	08015b6c 	.word	0x08015b6c
                    *vdb_buf_tmp = lv_color_mix(color, *vdb_buf_tmp, px_opa);
 800d088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d08a:	9824      	ldr	r0, [sp, #144]	; 0x90
 800d08c:	6819      	ldr	r1, [r3, #0]
 800d08e:	f7ff fc81 	bl	800c994 <lv_color_mix>
 800d092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d094:	6018      	str	r0, [r3, #0]
 800d096:	e7ca      	b.n	800d02e <lv_vletter+0x2b6>
                col_byte_cnt ++;
 800d098:	9e0c      	ldr	r6, [sp, #48]	; 0x30
                map_p ++;
 800d09a:	f10a 0a01 	add.w	sl, sl, #1
                mask = mask_init;
 800d09e:	f8dd 8018 	ldr.w	r8, [sp, #24]
                col_bit = 0;
 800d0a2:	2700      	movs	r7, #0
                col_byte_cnt ++;
 800d0a4:	3601      	adds	r6, #1
 800d0a6:	b2f3      	uxtb	r3, r6
 800d0a8:	930c      	str	r3, [sp, #48]	; 0x30
 800d0aa:	e7cc      	b.n	800d046 <lv_vletter+0x2ce>
}
 800d0ac:	b01b      	add	sp, #108	; 0x6c
 800d0ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0b2:	bf00      	nop

0800d0b4 <lv_vmap>:
{
 800d0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0b8:	b093      	sub	sp, #76	; 0x4c
 800d0ba:	461d      	mov	r5, r3
 800d0bc:	4606      	mov	r6, r0
 800d0be:	4688      	mov	r8, r1
 800d0c0:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
    if(opa < LV_OPA_MIN) return;
 800d0c4:	2d0f      	cmp	r5, #15
{
 800d0c6:	4614      	mov	r4, r2
 800d0c8:	930c      	str	r3, [sp, #48]	; 0x30
 800d0ca:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 800d0ce:	930d      	str	r3, [sp, #52]	; 0x34
 800d0d0:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
 800d0d4:	930a      	str	r3, [sp, #40]	; 0x28
    if(opa < LV_OPA_MIN) return;
 800d0d6:	f240 8098 	bls.w	800d20a <lv_vmap+0x156>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800d0da:	2dfc      	cmp	r5, #252	; 0xfc
 800d0dc:	bf28      	it	cs
 800d0de:	25ff      	movcs	r5, #255	; 0xff
    lv_vdb_t * vdb_p = lv_vdb_get();
 800d0e0:	f7fc fb2c 	bl	800973c <lv_vdb_get>
    if(!vdb_p) {
 800d0e4:	4607      	mov	r7, r0
 800d0e6:	2800      	cmp	r0, #0
 800d0e8:	f000 808f 	beq.w	800d20a <lv_vmap+0x156>
    union_ok = lv_area_intersect(&masked_a, cords_p, mask_p);
 800d0ec:	4642      	mov	r2, r8
 800d0ee:	4631      	mov	r1, r6
 800d0f0:	a810      	add	r0, sp, #64	; 0x40
 800d0f2:	f000 fb77 	bl	800d7e4 <lv_area_intersect>
    if(union_ok == false)  return;
 800d0f6:	2800      	cmp	r0, #0
 800d0f8:	f000 8087 	beq.w	800d20a <lv_vmap+0x156>
    if(cords_p->y1 < masked_a.y1) {
 800d0fc:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800d100:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 800d104:	f8b6 8004 	ldrh.w	r8, [r6, #4]
 800d108:	f9b6 1000 	ldrsh.w	r1, [r6]
 800d10c:	4293      	cmp	r3, r2
 800d10e:	f108 0801 	add.w	r8, r8, #1
    masked_a.x1 = masked_a.x1 - vdb_p->area.x1;
 800d112:	883e      	ldrh	r6, [r7, #0]
        map_p += (uint32_t) map_width * ((masked_a.y1 - cords_p->y1)) * px_size_byte;
 800d114:	bfb8      	it	lt
 800d116:	1ad3      	sublt	r3, r2, r3
    masked_a.y1 = masked_a.y1 - vdb_p->area.y1;
 800d118:	8878      	ldrh	r0, [r7, #2]
 800d11a:	eba8 0801 	sub.w	r8, r8, r1
        map_p += (uint32_t) map_width * ((masked_a.y1 - cords_p->y1)) * px_size_byte;
 800d11e:	bfb8      	it	lt
 800d120:	009b      	lsllt	r3, r3, #2
    masked_a.y1 = masked_a.y1 - vdb_p->area.y1;
 800d122:	eba2 0200 	sub.w	r2, r2, r0
 800d126:	fa0f f888 	sxth.w	r8, r8
 800d12a:	b212      	sxth	r2, r2
        map_p += (uint32_t) map_width * ((masked_a.y1 - cords_p->y1)) * px_size_byte;
 800d12c:	bfb8      	it	lt
 800d12e:	fb08 4403 	mlalt	r4, r8, r3, r4
    if(cords_p->x1 < masked_a.x1) {
 800d132:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
    masked_a.y1 = masked_a.y1 - vdb_p->area.y1;
 800d136:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
    if(cords_p->x1 < masked_a.x1) {
 800d13a:	428b      	cmp	r3, r1
        map_p += (masked_a.x1 - cords_p->x1) * px_size_byte;
 800d13c:	bfc8      	it	gt
 800d13e:	1a59      	subgt	r1, r3, r1
    masked_a.x1 = masked_a.x1 - vdb_p->area.x1;
 800d140:	eba3 0306 	sub.w	r3, r3, r6
        map_p += (masked_a.x1 - cords_p->x1) * px_size_byte;
 800d144:	bfc8      	it	gt
 800d146:	eb04 0481 	addgt.w	r4, r4, r1, lsl #2
    masked_a.x1 = masked_a.x1 - vdb_p->area.x1;
 800d14a:	b299      	uxth	r1, r3
    masked_a.x2 = masked_a.x2 - vdb_p->area.x1;
 800d14c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800d150:	1b9b      	subs	r3, r3, r6
    masked_a.y2 = masked_a.y2 - vdb_p->area.y1;
 800d152:	f8bd 6046 	ldrh.w	r6, [sp, #70]	; 0x46
    masked_a.x1 = masked_a.x1 - vdb_p->area.x1;
 800d156:	fa0f fe81 	sxth.w	lr, r1
    masked_a.y2 = masked_a.y2 - vdb_p->area.y1;
 800d15a:	1a30      	subs	r0, r6, r0
    masked_a.x2 = masked_a.x2 - vdb_p->area.x1;
 800d15c:	b29b      	uxth	r3, r3
    masked_a.x1 = masked_a.x1 - vdb_p->area.x1;
 800d15e:	f8ad e040 	strh.w	lr, [sp, #64]	; 0x40
    masked_a.x2 = masked_a.x2 - vdb_p->area.x1;
 800d162:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 800d166:	3301      	adds	r3, #1
    masked_a.y2 = masked_a.y2 - vdb_p->area.y1;
 800d168:	f8ad 0046 	strh.w	r0, [sp, #70]	; 0x46
 800d16c:	88b8      	ldrh	r0, [r7, #4]
 800d16e:	1a5b      	subs	r3, r3, r1
 800d170:	883e      	ldrh	r6, [r7, #0]
 800d172:	3001      	adds	r0, #1
 800d174:	b21b      	sxth	r3, r3
 800d176:	1b80      	subs	r0, r0, r6
    lv_color_t * vdb_buf_tmp = vdb_p->buf;
 800d178:	68be      	ldr	r6, [r7, #8]
 800d17a:	9308      	str	r3, [sp, #32]
 800d17c:	b200      	sxth	r0, r0
    vdb_buf_tmp += (uint32_t) masked_a.x1; /*Move to the first col*/
 800d17e:	fb00 e202 	mla	r2, r0, r2, lr
 800d182:	9004      	str	r0, [sp, #16]
 800d184:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800d188:	9203      	str	r2, [sp, #12]
    lv_disp_t * disp = lv_disp_get_active();
 800d18a:	f000 f931 	bl	800d3f0 <lv_disp_get_active>
 800d18e:	ea4f 0388 	mov.w	r3, r8, lsl #2
 800d192:	4683      	mov	fp, r0
 800d194:	930b      	str	r3, [sp, #44]	; 0x2c
    if(chroma_key == false && alpha_byte == false && opa == LV_OPA_COVER && recolor_opa == LV_OPA_TRANSP) {
 800d196:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d152      	bne.n	800d242 <lv_vmap+0x18e>
 800d19c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d14f      	bne.n	800d242 <lv_vmap+0x18e>
 800d1a2:	2dff      	cmp	r5, #255	; 0xff
 800d1a4:	d14d      	bne.n	800d242 <lv_vmap+0x18e>
 800d1a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d14a      	bne.n	800d242 <lv_vmap+0x18e>
        if(disp->driver.vdb_wr) {
 800d1ac:	6943      	ldr	r3, [r0, #20]
 800d1ae:	f9bd 8042 	ldrsh.w	r8, [sp, #66]	; 0x42
 800d1b2:	b313      	cbz	r3, 800d1fa <lv_vmap+0x146>
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 800d1b4:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 800d1b8:	4543      	cmp	r3, r8
 800d1ba:	db26      	blt.n	800d20a <lv_vmap+0x156>
 800d1bc:	f04f 0900 	mov.w	r9, #0
 800d1c0:	e00f      	b.n	800d1e2 <lv_vmap+0x12e>
                    disp->driver.vdb_wr((uint8_t *)vdb_p->buf, vdb_width, col + masked_a.x1, row, px_color, opa);
 800d1c2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
                    lv_color_t px_color = (lv_color_t) * ((lv_color_t *)&map_p[(uint32_t)col * px_size_byte]);
 800d1c6:	f854 3029 	ldr.w	r3, [r4, r9, lsl #2]
                    disp->driver.vdb_wr((uint8_t *)vdb_p->buf, vdb_width, col + masked_a.x1, row, px_color, opa);
 800d1ca:	444a      	add	r2, r9
 800d1cc:	f109 0901 	add.w	r9, r9, #1
 800d1d0:	9904      	ldr	r1, [sp, #16]
 800d1d2:	b212      	sxth	r2, r2
 800d1d4:	e88d 0028 	stmia.w	sp, {r3, r5}
 800d1d8:	4643      	mov	r3, r8
 800d1da:	f8db 6014 	ldr.w	r6, [fp, #20]
 800d1de:	68b8      	ldr	r0, [r7, #8]
 800d1e0:	47b0      	blx	r6
                for(col = 0; col < map_useful_w; col++) {
 800d1e2:	fa0f f389 	sxth.w	r3, r9
 800d1e6:	9a08      	ldr	r2, [sp, #32]
 800d1e8:	4293      	cmp	r3, r2
 800d1ea:	dbea      	blt.n	800d1c2 <lv_vmap+0x10e>
                map_p += map_width * px_size_byte;  /*Next row on the map*/
 800d1ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d1ee:	f108 0801 	add.w	r8, r8, #1
 800d1f2:	441c      	add	r4, r3
 800d1f4:	fa0f f888 	sxth.w	r8, r8
 800d1f8:	e7dc      	b.n	800d1b4 <lv_vmap+0x100>
        memcpy(dest, src, length * sizeof(lv_color_t));
 800d1fa:	9b08      	ldr	r3, [sp, #32]
 800d1fc:	009d      	lsls	r5, r3, #2
                vdb_buf_tmp += vdb_width;                        /*Next row on the VDB*/
 800d1fe:	9b04      	ldr	r3, [sp, #16]
 800d200:	009f      	lsls	r7, r3, #2
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 800d202:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 800d206:	4543      	cmp	r3, r8
 800d208:	da02      	bge.n	800d210 <lv_vmap+0x15c>
}
 800d20a:	b013      	add	sp, #76	; 0x4c
 800d20c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if(lv_disp_is_mem_blend_supported() == false) {
 800d210:	f000 f91c 	bl	800d44c <lv_disp_is_mem_blend_supported>
 800d214:	b970      	cbnz	r0, 800d234 <lv_vmap+0x180>
        memcpy(dest, src, length * sizeof(lv_color_t));
 800d216:	462a      	mov	r2, r5
 800d218:	4621      	mov	r1, r4
 800d21a:	9803      	ldr	r0, [sp, #12]
 800d21c:	f008 fc7e 	bl	8015b1c <memcpy>
                map_p += map_width * px_size_byte;               /*Next row on the map*/
 800d220:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d222:	f108 0801 	add.w	r8, r8, #1
 800d226:	441c      	add	r4, r3
                vdb_buf_tmp += vdb_width;                        /*Next row on the VDB*/
 800d228:	9b03      	ldr	r3, [sp, #12]
 800d22a:	fa0f f888 	sxth.w	r8, r8
 800d22e:	443b      	add	r3, r7
 800d230:	9303      	str	r3, [sp, #12]
 800d232:	e7e6      	b.n	800d202 <lv_vmap+0x14e>
                    lv_disp_mem_blend(vdb_buf_tmp, (lv_color_t *)map_p, map_useful_w, opa);
 800d234:	23ff      	movs	r3, #255	; 0xff
 800d236:	9a08      	ldr	r2, [sp, #32]
 800d238:	4621      	mov	r1, r4
 800d23a:	9803      	ldr	r0, [sp, #12]
 800d23c:	f000 f8ec 	bl	800d418 <lv_disp_mem_blend>
 800d240:	e7ee      	b.n	800d220 <lv_vmap+0x16c>
        lv_color_t last_img_px = LV_COLOR_BLACK;
 800d242:	f04f 0900 	mov.w	r9, #0
        lv_color_t chroma_key_color = LV_COLOR_TRANSP;
 800d246:	f04f 0a00 	mov.w	sl, #0
        lv_color_t recolored_px = lv_color_mix(recolor, last_img_px, recolor_opa);
 800d24a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
        lv_color_t last_img_px = LV_COLOR_BLACK;
 800d24c:	f36f 0907 	bfc	r9, #0, #8
        lv_color_t recolored_px = lv_color_mix(recolor, last_img_px, recolor_opa);
 800d250:	981e      	ldr	r0, [sp, #120]	; 0x78
        lv_color_t chroma_key_color = LV_COLOR_TRANSP;
 800d252:	f36f 0a07 	bfc	sl, #0, #8
        lv_color_t last_img_px = LV_COLOR_BLACK;
 800d256:	f36f 290f 	bfc	r9, #8, #8
        lv_color_t chroma_key_color = LV_COLOR_TRANSP;
 800d25a:	f44a 4a7f 	orr.w	sl, sl, #65280	; 0xff00
        lv_color_t last_img_px = LV_COLOR_BLACK;
 800d25e:	f6cf 7900 	movt	r9, #65280	; 0xff00
        lv_color_t chroma_key_color = LV_COLOR_TRANSP;
 800d262:	f6cf 7a00 	movt	sl, #65280	; 0xff00
        lv_color_t recolored_px = lv_color_mix(recolor, last_img_px, recolor_opa);
 800d266:	4649      	mov	r1, r9
 800d268:	f7ff fb94 	bl	800c994 <lv_color_mix>
        for(row = masked_a.y1; row <= masked_a.y2; row++) {
 800d26c:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
        lv_color_t recolored_px = lv_color_mix(recolor, last_img_px, recolor_opa);
 800d270:	9009      	str	r0, [sp, #36]	; 0x24
        for(row = masked_a.y1; row <= masked_a.y2; row++) {
 800d272:	9305      	str	r3, [sp, #20]
            vdb_buf_tmp += vdb_width;           /*Next row on the VDB*/
 800d274:	9b04      	ldr	r3, [sp, #16]
 800d276:	009b      	lsls	r3, r3, #2
 800d278:	930e      	str	r3, [sp, #56]	; 0x38
        for(row = masked_a.y1; row <= masked_a.y2; row++) {
 800d27a:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 800d27e:	9a05      	ldr	r2, [sp, #20]
 800d280:	4293      	cmp	r3, r2
 800d282:	dbc2      	blt.n	800d20a <lv_vmap+0x156>
 800d284:	2300      	movs	r3, #0
 800d286:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d28a:	9406      	str	r4, [sp, #24]
 800d28c:	9307      	str	r3, [sp, #28]
 800d28e:	e040      	b.n	800d312 <lv_vmap+0x25e>
                if(alpha_byte) {
 800d290:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d292:	2b00      	cmp	r3, #0
 800d294:	d02c      	beq.n	800d2f0 <lv_vmap+0x23c>
                    px_color = *((lv_color_t *)px_color_p);
 800d296:	9b06      	ldr	r3, [sp, #24]
 800d298:	6818      	ldr	r0, [r3, #0]
                    lv_opa_t px_opa = *(px_color_p + LV_IMG_PX_SIZE_ALPHA_BYTE - 1);
 800d29a:	78db      	ldrb	r3, [r3, #3]
                    if(px_opa == LV_OPA_TRANSP) continue;
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d030      	beq.n	800d302 <lv_vmap+0x24e>
                    else if(px_opa != LV_OPA_COVER) opa_result = (uint32_t)((uint32_t)px_opa * opa_result) >> 8;
 800d2a0:	2bff      	cmp	r3, #255	; 0xff
 800d2a2:	d027      	beq.n	800d2f4 <lv_vmap+0x240>
 800d2a4:	fb13 f305 	smulbb	r3, r3, r5
 800d2a8:	f3c3 2307 	ubfx	r3, r3, #8, #8
                if(chroma_key && px_color.full == chroma_key_color.full) continue;
 800d2ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d2ae:	b10a      	cbz	r2, 800d2b4 <lv_vmap+0x200>
 800d2b0:	4550      	cmp	r0, sl
 800d2b2:	d026      	beq.n	800d302 <lv_vmap+0x24e>
                if(recolor_opa != LV_OPA_TRANSP) {
 800d2b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d2b6:	2a00      	cmp	r2, #0
 800d2b8:	d042      	beq.n	800d340 <lv_vmap+0x28c>
                    if(last_img_px.full != px_color.full) {     /*Minor acceleration: calculate only for new colors (save the last)*/
 800d2ba:	4548      	cmp	r0, r9
 800d2bc:	d007      	beq.n	800d2ce <lv_vmap+0x21a>
                        recolored_px = lv_color_mix(recolor, last_img_px, recolor_opa);
 800d2be:	4601      	mov	r1, r0
                        last_img_px = px_color;
 800d2c0:	4681      	mov	r9, r0
                        recolored_px = lv_color_mix(recolor, last_img_px, recolor_opa);
 800d2c2:	981e      	ldr	r0, [sp, #120]	; 0x78
 800d2c4:	930f      	str	r3, [sp, #60]	; 0x3c
 800d2c6:	f7ff fb65 	bl	800c994 <lv_color_mix>
 800d2ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d2cc:	9009      	str	r0, [sp, #36]	; 0x24
                    if(disp->driver.vdb_wr) {
 800d2ce:	f8db 2014 	ldr.w	r2, [fp, #20]
 800d2d2:	4616      	mov	r6, r2
 800d2d4:	b182      	cbz	r2, 800d2f8 <lv_vmap+0x244>
                        disp->driver.vdb_wr((uint8_t *)vdb_p->buf, vdb_width, col + masked_a.x1, row, recolored_px, opa_result);
 800d2d6:	9907      	ldr	r1, [sp, #28]
 800d2d8:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800d2dc:	9301      	str	r3, [sp, #4]
 800d2de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2e0:	440a      	add	r2, r1
 800d2e2:	9904      	ldr	r1, [sp, #16]
 800d2e4:	9300      	str	r3, [sp, #0]
 800d2e6:	b212      	sxth	r2, r2
 800d2e8:	9b05      	ldr	r3, [sp, #20]
 800d2ea:	68b8      	ldr	r0, [r7, #8]
                        disp->driver.vdb_wr((uint8_t *)vdb_p->buf, vdb_width, col + masked_a.x1, row, px_color, opa_result);
 800d2ec:	47b0      	blx	r6
 800d2ee:	e008      	b.n	800d302 <lv_vmap+0x24e>
                    px_color = *((lv_color_t *)px_color_p);
 800d2f0:	9b06      	ldr	r3, [sp, #24]
 800d2f2:	6818      	ldr	r0, [r3, #0]
 800d2f4:	462b      	mov	r3, r5
 800d2f6:	e7d9      	b.n	800d2ac <lv_vmap+0x1f8>
                        if(opa_result == LV_OPA_COVER) vdb_buf_tmp[col].full = recolored_px.full;
 800d2f8:	2bff      	cmp	r3, #255	; 0xff
 800d2fa:	d11a      	bne.n	800d332 <lv_vmap+0x27e>
 800d2fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2fe:	f8c8 3000 	str.w	r3, [r8]
 800d302:	9b07      	ldr	r3, [sp, #28]
 800d304:	f108 0804 	add.w	r8, r8, #4
 800d308:	3301      	adds	r3, #1
 800d30a:	9307      	str	r3, [sp, #28]
 800d30c:	9b06      	ldr	r3, [sp, #24]
 800d30e:	3304      	adds	r3, #4
 800d310:	9306      	str	r3, [sp, #24]
            for(col = 0; col < map_useful_w; col++) {
 800d312:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800d316:	9a08      	ldr	r2, [sp, #32]
 800d318:	429a      	cmp	r2, r3
 800d31a:	dcb9      	bgt.n	800d290 <lv_vmap+0x1dc>
            map_p += map_width * px_size_byte;  /*Next row on the map*/
 800d31c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            vdb_buf_tmp += vdb_width;           /*Next row on the VDB*/
 800d31e:	9a03      	ldr	r2, [sp, #12]
            map_p += map_width * px_size_byte;  /*Next row on the map*/
 800d320:	441c      	add	r4, r3
            vdb_buf_tmp += vdb_width;           /*Next row on the VDB*/
 800d322:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d324:	441a      	add	r2, r3
 800d326:	9b05      	ldr	r3, [sp, #20]
 800d328:	3301      	adds	r3, #1
 800d32a:	9203      	str	r2, [sp, #12]
 800d32c:	b21b      	sxth	r3, r3
 800d32e:	9305      	str	r3, [sp, #20]
 800d330:	e7a3      	b.n	800d27a <lv_vmap+0x1c6>
                        else vdb_buf_tmp[col] = lv_color_mix(recolored_px, vdb_buf_tmp[col], opa_result);
 800d332:	461a      	mov	r2, r3
 800d334:	f8d8 1000 	ldr.w	r1, [r8]
 800d338:	9809      	ldr	r0, [sp, #36]	; 0x24
                            vdb_buf_tmp[col] = lv_color_mix(px_color, vdb_buf_tmp[col], opa_result);
 800d33a:	f7ff fb2b 	bl	800c994 <lv_color_mix>
 800d33e:	e012      	b.n	800d366 <lv_vmap+0x2b2>
                    if(disp->driver.vdb_wr) {
 800d340:	f8db 2014 	ldr.w	r2, [fp, #20]
 800d344:	4616      	mov	r6, r2
 800d346:	b162      	cbz	r2, 800d362 <lv_vmap+0x2ae>
                        disp->driver.vdb_wr((uint8_t *)vdb_p->buf, vdb_width, col + masked_a.x1, row, px_color, opa_result);
 800d348:	9907      	ldr	r1, [sp, #28]
 800d34a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800d34e:	f8d7 e008 	ldr.w	lr, [r7, #8]
 800d352:	440a      	add	r2, r1
 800d354:	9904      	ldr	r1, [sp, #16]
 800d356:	e88d 0009 	stmia.w	sp, {r0, r3}
 800d35a:	b212      	sxth	r2, r2
 800d35c:	9b05      	ldr	r3, [sp, #20]
 800d35e:	4670      	mov	r0, lr
 800d360:	e7c4      	b.n	800d2ec <lv_vmap+0x238>
                        if(opa_result == LV_OPA_COVER) vdb_buf_tmp[col] = px_color;
 800d362:	2bff      	cmp	r3, #255	; 0xff
 800d364:	d102      	bne.n	800d36c <lv_vmap+0x2b8>
                            vdb_buf_tmp[col] = lv_color_mix(px_color, vdb_buf_tmp[col], opa_result);
 800d366:	f8c8 0000 	str.w	r0, [r8]
 800d36a:	e7ca      	b.n	800d302 <lv_vmap+0x24e>
 800d36c:	461a      	mov	r2, r3
 800d36e:	f8d8 1000 	ldr.w	r1, [r8]
 800d372:	e7e2      	b.n	800d33a <lv_vmap+0x286>

0800d374 <lv_font_builtin_init>:

/**
 * Initialize the built-in fonts
 */
void lv_font_builtin_init(void)
{
 800d374:	b510      	push	{r4, lr}
#endif


    /*DEJAVU 20*/
#if USE_LV_FONT_DEJAVU_20 != 0
    lv_font_add(&lv_font_dejavu_20, NULL);
 800d376:	4c05      	ldr	r4, [pc, #20]	; (800d38c <lv_font_builtin_init+0x18>)
 800d378:	2100      	movs	r1, #0
 800d37a:	4620      	mov	r0, r4
 800d37c:	f000 fafd 	bl	800d97a <lv_font_add>
#endif

    /*SYMBOL 20*/
#if USE_LV_FONT_SYMBOL_20 != 0
#if USE_LV_FONT_DEJAVU_20 != 0
    lv_font_add(&lv_font_symbol_20, &lv_font_dejavu_20);
 800d380:	4621      	mov	r1, r4
 800d382:	4803      	ldr	r0, [pc, #12]	; (800d390 <lv_font_builtin_init+0x1c>)
    lv_font_add(&lv_font_symbol_40, &lv_font_dejavu_40);
#else
    lv_font_add(&lv_font_symbol_40, NULL);
#endif
#endif
}
 800d384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_font_add(&lv_font_symbol_20, &lv_font_dejavu_20);
 800d388:	f000 baf7 	b.w	800d97a <lv_font_add>
 800d38c:	20000058 	.word	0x20000058
 800d390:	20000080 	.word	0x20000080

0800d394 <lv_disp_drv_init>:
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
    driver->disp_fill = NULL;
 800d394:	2300      	movs	r3, #0
 800d396:	6043      	str	r3, [r0, #4]
    driver->disp_map = NULL;
 800d398:	6083      	str	r3, [r0, #8]
    driver->disp_flush = NULL;
 800d39a:	6003      	str	r3, [r0, #0]

#if USE_LV_GPU
    driver->mem_blend = NULL;
 800d39c:	60c3      	str	r3, [r0, #12]
    driver->mem_fill = NULL;
 800d39e:	6103      	str	r3, [r0, #16]
#endif

#if LV_VDB_SIZE
    driver->vdb_wr = NULL;
 800d3a0:	6143      	str	r3, [r0, #20]
 800d3a2:	4770      	bx	lr

0800d3a4 <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable (can be local variable)
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
 800d3a4:	b538      	push	{r3, r4, r5, lr}
 800d3a6:	4605      	mov	r5, r0
    lv_disp_t * node;

    node = lv_mem_alloc(sizeof(lv_disp_t));
 800d3a8:	201c      	movs	r0, #28
 800d3aa:	f000 fd4d 	bl	800de48 <lv_mem_alloc>
    lv_mem_assert(node);
 800d3ae:	4604      	mov	r4, r0
 800d3b0:	b900      	cbnz	r0, 800d3b4 <lv_disp_drv_register+0x10>
 800d3b2:	e7fe      	b.n	800d3b2 <lv_disp_drv_register+0xe>
    if(node == NULL) return NULL;

    memcpy(&node->driver, driver, sizeof(lv_disp_drv_t));
 800d3b4:	4628      	mov	r0, r5
 800d3b6:	4623      	mov	r3, r4
 800d3b8:	f105 0218 	add.w	r2, r5, #24
 800d3bc:	f850 1b04 	ldr.w	r1, [r0], #4
 800d3c0:	4290      	cmp	r0, r2
 800d3c2:	f843 1b04 	str.w	r1, [r3], #4
 800d3c6:	d1f9      	bne.n	800d3bc <lv_disp_drv_register+0x18>
    node->next = NULL;
 800d3c8:	2300      	movs	r3, #0

    /* Set first display as active by default */
    if(disp_list == NULL) {
 800d3ca:	4a07      	ldr	r2, [pc, #28]	; (800d3e8 <lv_disp_drv_register+0x44>)
    node->next = NULL;
 800d3cc:	61a3      	str	r3, [r4, #24]
    if(disp_list == NULL) {
 800d3ce:	6813      	ldr	r3, [r2, #0]
 800d3d0:	b943      	cbnz	r3, 800d3e4 <lv_disp_drv_register+0x40>
        disp_list = node;
        active = node;
 800d3d2:	4b06      	ldr	r3, [pc, #24]	; (800d3ec <lv_disp_drv_register+0x48>)
        disp_list = node;
 800d3d4:	6014      	str	r4, [r2, #0]
        active = node;
 800d3d6:	601c      	str	r4, [r3, #0]
        lv_obj_invalidate(lv_scr_act());
 800d3d8:	f7fb fbe0 	bl	8008b9c <lv_scr_act>
 800d3dc:	f7fa ff6c 	bl	80082b8 <lv_obj_invalidate>
    } else {
        disp_list->next = node;
    }

    return node;
}
 800d3e0:	4620      	mov	r0, r4
 800d3e2:	bd38      	pop	{r3, r4, r5, pc}
        disp_list->next = node;
 800d3e4:	619c      	str	r4, [r3, #24]
 800d3e6:	e7fb      	b.n	800d3e0 <lv_disp_drv_register+0x3c>
 800d3e8:	2000f388 	.word	0x2000f388
 800d3ec:	2000f384 	.word	0x2000f384

0800d3f0 <lv_disp_get_active>:
 * @return pointer to the active display
 */
lv_disp_t * lv_disp_get_active(void)
{
    return active;
}
 800d3f0:	4b01      	ldr	r3, [pc, #4]	; (800d3f8 <lv_disp_get_active+0x8>)
 800d3f2:	6818      	ldr	r0, [r3, #0]
 800d3f4:	4770      	bx	lr
 800d3f6:	bf00      	nop
 800d3f8:	2000f384 	.word	0x2000f384

0800d3fc <lv_disp_flush>:
 * @param y1 top coordinate of the rectangle
 * @param y2 bottom coordinate of the rectangle
 * @param color_p pointer to an array of colors
 */
void lv_disp_flush(int32_t x1, int32_t y1, int32_t x2, int32_t y2, lv_color_t * color_p)
{
 800d3fc:	b430      	push	{r4, r5}
    if(active == NULL) return;
 800d3fe:	4c05      	ldr	r4, [pc, #20]	; (800d414 <lv_disp_flush+0x18>)
 800d400:	6824      	ldr	r4, [r4, #0]
 800d402:	b124      	cbz	r4, 800d40e <lv_disp_flush+0x12>
    if(active->driver.disp_flush != NULL) {
 800d404:	6824      	ldr	r4, [r4, #0]
 800d406:	b114      	cbz	r4, 800d40e <lv_disp_flush+0x12>

        LV_LOG_TRACE("disp flush  started");
        active->driver.disp_flush(x1, y1, x2, y2, color_p);
 800d408:	46a4      	mov	ip, r4
        LV_LOG_TRACE("disp flush ready");

    } else {
        LV_LOG_WARN("disp flush function registered");
    }
}
 800d40a:	bc30      	pop	{r4, r5}
        active->driver.disp_flush(x1, y1, x2, y2, color_p);
 800d40c:	4760      	bx	ip
}
 800d40e:	bc30      	pop	{r4, r5}
 800d410:	4770      	bx	lr
 800d412:	bf00      	nop
 800d414:	2000f384 	.word	0x2000f384

0800d418 <lv_disp_mem_blend>:
 * @param src pointer to pixel map. Blend it to 'dest'.
 * @param length number of pixels in 'src'
 * @param opa opacity (0, LV_OPA_TRANSP: transparent ... 255, LV_OPA_COVER, fully cover)
 */
void lv_disp_mem_blend(lv_color_t * dest, const lv_color_t * src, uint32_t length, lv_opa_t opa)
{
 800d418:	b410      	push	{r4}
    if(active == NULL) return;
 800d41a:	4c06      	ldr	r4, [pc, #24]	; (800d434 <lv_disp_mem_blend+0x1c>)
 800d41c:	6824      	ldr	r4, [r4, #0]
 800d41e:	b12c      	cbz	r4, 800d42c <lv_disp_mem_blend+0x14>
    if(active->driver.mem_blend != NULL) active->driver.mem_blend(dest, src, length, opa);
 800d420:	68e4      	ldr	r4, [r4, #12]
 800d422:	b11c      	cbz	r4, 800d42c <lv_disp_mem_blend+0x14>
 800d424:	46a4      	mov	ip, r4
}
 800d426:	f85d 4b04 	ldr.w	r4, [sp], #4
    if(active->driver.mem_blend != NULL) active->driver.mem_blend(dest, src, length, opa);
 800d42a:	4760      	bx	ip
}
 800d42c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d430:	4770      	bx	lr
 800d432:	bf00      	nop
 800d434:	2000f384 	.word	0x2000f384

0800d438 <lv_disp_mem_fill>:
 * @param length number of pixels in 'src'
 * @param opa opacity (0, LV_OPA_TRANSP: transparent ... 255, LV_OPA_COVER, fully cover)
 */
void lv_disp_mem_fill(lv_color_t * dest, uint32_t length, lv_color_t color)
{
    if(active == NULL) return;
 800d438:	4b03      	ldr	r3, [pc, #12]	; (800d448 <lv_disp_mem_fill+0x10>)
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	b113      	cbz	r3, 800d444 <lv_disp_mem_fill+0xc>
    if(active->driver.mem_fill != NULL) active->driver.mem_fill(dest, length, color);
 800d43e:	691b      	ldr	r3, [r3, #16]
 800d440:	b103      	cbz	r3, 800d444 <lv_disp_mem_fill+0xc>
 800d442:	4718      	bx	r3
 800d444:	4770      	bx	lr
 800d446:	bf00      	nop
 800d448:	2000f384 	.word	0x2000f384

0800d44c <lv_disp_is_mem_blend_supported>:
 * Shows if memory blending (by GPU) is supported or not
 * @return false: 'mem_blend' is not supported in the driver; true: 'mem_blend' is supported in the driver
 */
bool lv_disp_is_mem_blend_supported(void)
{
    if(active == NULL) return false;
 800d44c:	4b03      	ldr	r3, [pc, #12]	; (800d45c <lv_disp_is_mem_blend_supported+0x10>)
 800d44e:	6818      	ldr	r0, [r3, #0]
 800d450:	b118      	cbz	r0, 800d45a <lv_disp_is_mem_blend_supported+0xe>
    if(active->driver.mem_blend) return true;
 800d452:	68c0      	ldr	r0, [r0, #12]
 800d454:	3000      	adds	r0, #0
 800d456:	bf18      	it	ne
 800d458:	2001      	movne	r0, #1
    else return false;
}
 800d45a:	4770      	bx	lr
 800d45c:	2000f384 	.word	0x2000f384

0800d460 <lv_disp_is_mem_fill_supported>:
 * Shows if memory fill (by GPU) is supported or not
 * @return false: 'mem_fill' is not supported in the drover; true: 'mem_fill' is supported in the driver
 */
bool lv_disp_is_mem_fill_supported(void)
{
    if(active == NULL) return false;
 800d460:	4b03      	ldr	r3, [pc, #12]	; (800d470 <lv_disp_is_mem_fill_supported+0x10>)
 800d462:	6818      	ldr	r0, [r3, #0]
 800d464:	b118      	cbz	r0, 800d46e <lv_disp_is_mem_fill_supported+0xe>
    if(active->driver.mem_fill) return true;
 800d466:	6900      	ldr	r0, [r0, #16]
 800d468:	3000      	adds	r0, #0
 800d46a:	bf18      	it	ne
 800d46c:	2001      	movne	r0, #1
    else return false;
}
 800d46e:	4770      	bx	lr
 800d470:	2000f384 	.word	0x2000f384

0800d474 <lv_indev_drv_init>:
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_indev_drv_init(lv_indev_drv_t * driver)
{
    driver->read = NULL;
 800d474:	2300      	movs	r3, #0
 800d476:	6043      	str	r3, [r0, #4]
    driver->type = LV_INDEV_TYPE_NONE;
 800d478:	7003      	strb	r3, [r0, #0]
    driver->user_data = NULL;
 800d47a:	6083      	str	r3, [r0, #8]
 800d47c:	4770      	bx	lr
	...

0800d480 <lv_indev_drv_register>:
 * Register an initialized input device driver.
 * @param driver pointer to an initialized 'lv_indev_drv_t' variable (can be local variable)
 * @return pointer to the new input device or NULL on error
 */
lv_indev_t * lv_indev_drv_register(lv_indev_drv_t * driver)
{
 800d480:	b538      	push	{r3, r4, r5, lr}
 800d482:	4605      	mov	r5, r0
    lv_indev_t * node;

    node = lv_mem_alloc(sizeof(lv_indev_t));
 800d484:	2044      	movs	r0, #68	; 0x44
 800d486:	f000 fcdf 	bl	800de48 <lv_mem_alloc>
    if(!node) return NULL;
 800d48a:	4604      	mov	r4, r0
 800d48c:	b1b0      	cbz	r0, 800d4bc <lv_indev_drv_register+0x3c>

    memset(node, 0, sizeof(lv_indev_t));
 800d48e:	2244      	movs	r2, #68	; 0x44
 800d490:	2100      	movs	r1, #0
 800d492:	f008 fb4e 	bl	8015b32 <memset>
    memcpy(&node->driver, driver, sizeof(lv_indev_drv_t));
 800d496:	682b      	ldr	r3, [r5, #0]

    node->next = NULL;
 800d498:	2200      	movs	r2, #0
    memcpy(&node->driver, driver, sizeof(lv_indev_drv_t));
 800d49a:	6023      	str	r3, [r4, #0]
 800d49c:	686b      	ldr	r3, [r5, #4]
 800d49e:	6063      	str	r3, [r4, #4]
 800d4a0:	68ab      	ldr	r3, [r5, #8]
    node->next = NULL;
 800d4a2:	6422      	str	r2, [r4, #64]	; 0x40
    memcpy(&node->driver, driver, sizeof(lv_indev_drv_t));
 800d4a4:	60a3      	str	r3, [r4, #8]
    node->proc.reset_query = 1;
 800d4a6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    node->cursor = NULL;
 800d4aa:	63e2      	str	r2, [r4, #60]	; 0x3c
    node->proc.reset_query = 1;
 800d4ac:	f043 0302 	orr.w	r3, r3, #2
    node->group = NULL;
    node->btn_points = NULL;

    if(indev_list == NULL) {
 800d4b0:	4a06      	ldr	r2, [pc, #24]	; (800d4cc <lv_indev_drv_register+0x4c>)
    node->proc.reset_query = 1;
 800d4b2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(indev_list == NULL) {
 800d4b6:	6813      	ldr	r3, [r2, #0]
 800d4b8:	b91b      	cbnz	r3, 800d4c2 <lv_indev_drv_register+0x42>
        indev_list = node;
 800d4ba:	6014      	str	r4, [r2, #0]

        last->next = node;
    }

    return node;
}
 800d4bc:	4620      	mov	r0, r4
 800d4be:	bd38      	pop	{r3, r4, r5, pc}
 800d4c0:	4613      	mov	r3, r2
        while(last->next)
 800d4c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d4c4:	2a00      	cmp	r2, #0
 800d4c6:	d1fb      	bne.n	800d4c0 <lv_indev_drv_register+0x40>
        last->next = node;
 800d4c8:	641c      	str	r4, [r3, #64]	; 0x40
 800d4ca:	e7f7      	b.n	800d4bc <lv_indev_drv_register+0x3c>
 800d4cc:	2000f38c 	.word	0x2000f38c

0800d4d0 <lv_indev_next>:
 * @return the next input devise or NULL if no more. Give the first input device when the parameter is NULL
 */
lv_indev_t * lv_indev_next(lv_indev_t * indev)
{

    if(indev == NULL) {
 800d4d0:	b910      	cbnz	r0, 800d4d8 <lv_indev_next+0x8>
        return indev_list;
 800d4d2:	4b02      	ldr	r3, [pc, #8]	; (800d4dc <lv_indev_next+0xc>)
 800d4d4:	6818      	ldr	r0, [r3, #0]
 800d4d6:	4770      	bx	lr
    } else {
        if(indev->next == NULL) return NULL;
 800d4d8:	6c00      	ldr	r0, [r0, #64]	; 0x40
        else return indev->next;
    }
}
 800d4da:	4770      	bx	lr
 800d4dc:	2000f38c 	.word	0x2000f38c

0800d4e0 <lv_indev_read>:
 */
bool lv_indev_read(lv_indev_t * indev, lv_indev_data_t * data)
{
    bool cont = false;

    if(indev->driver.read) {
 800d4e0:	6843      	ldr	r3, [r0, #4]
 800d4e2:	b11b      	cbz	r3, 800d4ec <lv_indev_read+0xc>
        data->user_data = indev->driver.user_data;
 800d4e4:	6882      	ldr	r2, [r0, #8]

        LV_LOG_TRACE("idnev read started");
        cont = indev->driver.read(data);
 800d4e6:	4608      	mov	r0, r1
        data->user_data = indev->driver.user_data;
 800d4e8:	604a      	str	r2, [r1, #4]
        cont = indev->driver.read(data);
 800d4ea:	4718      	bx	r3
        LV_LOG_TRACE("idnev read finished");
    } else {
        LV_LOG_WARN("indev function registered");
        memset(data, 0, sizeof(lv_indev_data_t));
 800d4ec:	600b      	str	r3, [r1, #0]
    }

    return cont;
}
 800d4ee:	4618      	mov	r0, r3
        memset(data, 0, sizeof(lv_indev_data_t));
 800d4f0:	604b      	str	r3, [r1, #4]
 800d4f2:	608b      	str	r3, [r1, #8]
}
 800d4f4:	4770      	bx	lr
	...

0800d4f8 <lv_tick_inc>:
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
    tick_irq_flag = 0;
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	4b03      	ldr	r3, [pc, #12]	; (800d508 <lv_tick_inc+0x10>)
 800d4fc:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
 800d4fe:	4a03      	ldr	r2, [pc, #12]	; (800d50c <lv_tick_inc+0x14>)
 800d500:	6813      	ldr	r3, [r2, #0]
 800d502:	4418      	add	r0, r3
 800d504:	6010      	str	r0, [r2, #0]
 800d506:	4770      	bx	lr
 800d508:	2000f394 	.word	0x2000f394
 800d50c:	2000f390 	.word	0x2000f390

0800d510 <lv_tick_get>:
uint32_t lv_tick_get(void)
{
#if LV_TICK_CUSTOM == 0
    uint32_t result;
    do {
        tick_irq_flag = 1;
 800d510:	4b04      	ldr	r3, [pc, #16]	; (800d524 <lv_tick_get+0x14>)
 800d512:	f04f 0101 	mov.w	r1, #1
 800d516:	7019      	strb	r1, [r3, #0]
        result = sys_time;
    } while(!tick_irq_flag);     /*'lv_tick_inc()' clears this flag which can be in an interrupt. Continue until make a non interrupted cycle */
 800d518:	781a      	ldrb	r2, [r3, #0]
 800d51a:	2a00      	cmp	r2, #0
 800d51c:	d0fb      	beq.n	800d516 <lv_tick_get+0x6>

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 800d51e:	4b02      	ldr	r3, [pc, #8]	; (800d528 <lv_tick_get+0x18>)
 800d520:	6818      	ldr	r0, [r3, #0]
 800d522:	4770      	bx	lr
 800d524:	2000f394 	.word	0x2000f394
 800d528:	2000f390 	.word	0x2000f390

0800d52c <lv_tick_elaps>:
 * Get the elapsed milliseconds science a previous time stamp
 * @param prev_tick a previous time stamp (return value of systick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 800d52c:	b510      	push	{r4, lr}
 800d52e:	4604      	mov	r4, r0
    uint32_t act_time = lv_tick_get();
 800d530:	f7ff ffee 	bl	800d510 <lv_tick_get>
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
}
 800d534:	1b00      	subs	r0, r0, r4
 800d536:	bd10      	pop	{r4, pc}

0800d538 <anim_task>:
/**
 * Periodically handle the animations.
 * @param param unused
 */
static void anim_task(void * param)
{
 800d538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    (void)param;

    lv_anim_t * a;
    LL_READ(anim_ll, a) {
 800d53c:	4c40      	ldr	r4, [pc, #256]	; (800d640 <anim_task+0x108>)
 800d53e:	4840      	ldr	r0, [pc, #256]	; (800d640 <anim_task+0x108>)
 800d540:	f000 fb93 	bl	800dc6a <lv_ll_get_head>
 800d544:	b980      	cbnz	r0, 800d568 <anim_task+0x30>
        a->has_run = 0;
    }

    uint32_t elaps = lv_tick_elaps(last_task_run);
 800d546:	4d3f      	ldr	r5, [pc, #252]	; (800d644 <anim_task+0x10c>)

    while(a != NULL) {
        /*It can be set by `lv_anim_del()` typically in `end_cb`. If set then an animation delete happened in `anim_ready_handler`
         * which could make this linked list reading corrupt because the list is changed meanwhile
         */
        anim_list_changed = false;
 800d548:	4f3f      	ldr	r7, [pc, #252]	; (800d648 <anim_task+0x110>)
    uint32_t elaps = lv_tick_elaps(last_task_run);
 800d54a:	6828      	ldr	r0, [r5, #0]
 800d54c:	f7ff ffee 	bl	800d52c <lv_tick_elaps>
 800d550:	4680      	mov	r8, r0
    a = lv_ll_get_head(&anim_ll);
 800d552:	483b      	ldr	r0, [pc, #236]	; (800d640 <anim_task+0x108>)
 800d554:	f000 fb89 	bl	800dc6a <lv_ll_get_head>
        }

        /* If the linked list changed due to anim. delete then it's not safe to continue
         * the reading of the list from here -> start from the head*/
        if(anim_list_changed) a = lv_ll_get_head(&anim_ll);
        else a = lv_ll_get_next(&anim_ll, a);
 800d558:	4e39      	ldr	r6, [pc, #228]	; (800d640 <anim_task+0x108>)
    a = lv_ll_get_head(&anim_ll);
 800d55a:	4604      	mov	r4, r0
    while(a != NULL) {
 800d55c:	b97c      	cbnz	r4, 800d57e <anim_task+0x46>
    }

    last_task_run = lv_tick_get();
 800d55e:	f7ff ffd7 	bl	800d510 <lv_tick_get>
 800d562:	6028      	str	r0, [r5, #0]
 800d564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        a->has_run = 0;
 800d568:	f890 3020 	ldrb.w	r3, [r0, #32]
    LL_READ(anim_ll, a) {
 800d56c:	4601      	mov	r1, r0
        a->has_run = 0;
 800d56e:	f36f 03c3 	bfc	r3, #3, #1
 800d572:	f880 3020 	strb.w	r3, [r0, #32]
    LL_READ(anim_ll, a) {
 800d576:	4620      	mov	r0, r4
 800d578:	f000 fb7d 	bl	800dc76 <lv_ll_get_next>
 800d57c:	e7e2      	b.n	800d544 <anim_task+0xc>
        anim_list_changed = false;
 800d57e:	2300      	movs	r3, #0
 800d580:	703b      	strb	r3, [r7, #0]
        if(!a->has_run) {
 800d582:	f894 3020 	ldrb.w	r3, [r4, #32]
 800d586:	0718      	lsls	r0, r3, #28
 800d588:	d455      	bmi.n	800d636 <anim_task+0xfe>
            a->has_run = 1;         /*The list readying might be reseted so need to know which anim has run already*/
 800d58a:	f043 0308 	orr.w	r3, r3, #8
 800d58e:	f884 3020 	strb.w	r3, [r4, #32]
            a->act_time += elaps;
 800d592:	8b63      	ldrh	r3, [r4, #26]
 800d594:	4443      	add	r3, r8
 800d596:	b21b      	sxth	r3, r3
            if(a->act_time >= 0) {
 800d598:	2b00      	cmp	r3, #0
            a->act_time += elaps;
 800d59a:	8363      	strh	r3, [r4, #26]
            if(a->act_time >= 0) {
 800d59c:	db4b      	blt.n	800d636 <anim_task+0xfe>
                if(a->act_time > a->time) a->act_time = a->time;
 800d59e:	8b22      	ldrh	r2, [r4, #24]
                new_value = a->path(a);
 800d5a0:	4620      	mov	r0, r4
                if(a->act_time > a->time) a->act_time = a->time;
 800d5a2:	4293      	cmp	r3, r2
                new_value = a->path(a);
 800d5a4:	68e3      	ldr	r3, [r4, #12]
                if(a->act_time > a->time) a->act_time = a->time;
 800d5a6:	bfc8      	it	gt
 800d5a8:	8362      	strhgt	r2, [r4, #26]
                new_value = a->path(a);
 800d5aa:	4798      	blx	r3
                if(a->fp != NULL) a->fp(a->var, new_value); /*Apply the calculated value*/
 800d5ac:	6863      	ldr	r3, [r4, #4]
                new_value = a->path(a);
 800d5ae:	4601      	mov	r1, r0
                if(a->fp != NULL) a->fp(a->var, new_value); /*Apply the calculated value*/
 800d5b0:	b10b      	cbz	r3, 800d5b6 <anim_task+0x7e>
 800d5b2:	6820      	ldr	r0, [r4, #0]
 800d5b4:	4798      	blx	r3
                if(a->act_time >= a->time) {
 800d5b6:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
 800d5ba:	8b23      	ldrh	r3, [r4, #24]
 800d5bc:	429a      	cmp	r2, r3
 800d5be:	db17      	blt.n	800d5f0 <anim_task+0xb8>
{

    /*Delete the animation if
     * - no repeat and no play back (simple one shot animation)
     * - no repeat, play back is enabled and play back is ready */
    if((a->repeat == 0 && a->playback == 0) ||
 800d5c0:	f894 3020 	ldrb.w	r3, [r4, #32]
 800d5c4:	0799      	lsls	r1, r3, #30
 800d5c6:	d003      	beq.n	800d5d0 <anim_task+0x98>
 800d5c8:	f003 0207 	and.w	r2, r3, #7
 800d5cc:	2a05      	cmp	r2, #5
 800d5ce:	d116      	bne.n	800d5fe <anim_task+0xc6>
            (a->repeat == 0 && a->playback == 1 && a->playback_now == 1)) {
        void (*cb)(void *) = a->end_cb;
 800d5d0:	f8d4 9008 	ldr.w	r9, [r4, #8]
        void * p = a->var;
        lv_ll_rem(&anim_ll, a);
 800d5d4:	4630      	mov	r0, r6
 800d5d6:	4621      	mov	r1, r4
        void * p = a->var;
 800d5d8:	f8d4 a000 	ldr.w	sl, [r4]
        lv_ll_rem(&anim_ll, a);
 800d5dc:	f000 fb84 	bl	800dce8 <lv_ll_rem>
        lv_mem_free(a);
 800d5e0:	4620      	mov	r0, r4
 800d5e2:	f000 fc55 	bl	800de90 <lv_mem_free>

        /* Call the callback function at the end*/
        /* Check if an animation is deleted in the cb function
         * if yes then the caller function has to know this*/
        if(cb != NULL) cb(p);
 800d5e6:	f1b9 0f00 	cmp.w	r9, #0
 800d5ea:	d001      	beq.n	800d5f0 <anim_task+0xb8>
 800d5ec:	4650      	mov	r0, sl
 800d5ee:	47c8      	blx	r9
        if(anim_list_changed) a = lv_ll_get_head(&anim_ll);
 800d5f0:	783b      	ldrb	r3, [r7, #0]
 800d5f2:	b303      	cbz	r3, 800d636 <anim_task+0xfe>
 800d5f4:	4630      	mov	r0, r6
 800d5f6:	f000 fb38 	bl	800dc6a <lv_ll_get_head>
        else a = lv_ll_get_next(&anim_ll, a);
 800d5fa:	4604      	mov	r4, r0
 800d5fc:	e7ae      	b.n	800d55c <anim_task+0x24>
    }
    /*If the animation is not deleted then restart it*/
    else {
        a->act_time = - a->repeat_pause;    /*Restart the animation*/
 800d5fe:	8be2      	ldrh	r2, [r4, #30]
 800d600:	4252      	negs	r2, r2
 800d602:	8362      	strh	r2, [r4, #26]
        /*Swap the start and end values in play back mode*/
        if(a->playback != 0) {
 800d604:	07da      	lsls	r2, r3, #31
 800d606:	d5f3      	bpl.n	800d5f0 <anim_task+0xb8>
            /*If now turning back use the 'playback_pause*/
            if(a->playback_now == 0) a->act_time = - a->playback_pause;
 800d608:	f013 0304 	ands.w	r3, r3, #4
 800d60c:	bf08      	it	eq
 800d60e:	8ba2      	ldrheq	r2, [r4, #28]

            /*Toggle the play back state*/
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 800d610:	fab3 f383 	clz	r3, r3
            if(a->playback_now == 0) a->act_time = - a->playback_pause;
 800d614:	bf08      	it	eq
 800d616:	4252      	negeq	r2, r2
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 800d618:	ea4f 1353 	mov.w	r3, r3, lsr #5
            if(a->playback_now == 0) a->act_time = - a->playback_pause;
 800d61c:	bf08      	it	eq
 800d61e:	8362      	strheq	r2, [r4, #26]
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 800d620:	f894 2020 	ldrb.w	r2, [r4, #32]
 800d624:	f363 0282 	bfi	r2, r3, #2, #1
            /*Swap the start and end values*/
            int32_t tmp;
            tmp = a->start;
 800d628:	6923      	ldr	r3, [r4, #16]
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 800d62a:	f884 2020 	strb.w	r2, [r4, #32]
            a->start = a->end;
 800d62e:	6962      	ldr	r2, [r4, #20]
            a->end = tmp;
 800d630:	6163      	str	r3, [r4, #20]
            a->start = a->end;
 800d632:	6122      	str	r2, [r4, #16]
 800d634:	e7dc      	b.n	800d5f0 <anim_task+0xb8>
        else a = lv_ll_get_next(&anim_ll, a);
 800d636:	4621      	mov	r1, r4
 800d638:	4630      	mov	r0, r6
 800d63a:	f000 fb1c 	bl	800dc76 <lv_ll_get_next>
 800d63e:	e7dc      	b.n	800d5fa <anim_task+0xc2>
 800d640:	2000f398 	.word	0x2000f398
 800d644:	2000f3a4 	.word	0x2000f3a4
 800d648:	2000f395 	.word	0x2000f395

0800d64c <lv_anim_init>:
{
 800d64c:	b510      	push	{r4, lr}
    lv_ll_init(&anim_ll, sizeof(lv_anim_t));
 800d64e:	2124      	movs	r1, #36	; 0x24
 800d650:	4807      	ldr	r0, [pc, #28]	; (800d670 <lv_anim_init+0x24>)
 800d652:	f000 fac4 	bl	800dbde <lv_ll_init>
    last_task_run = lv_tick_get();
 800d656:	f7ff ff5b 	bl	800d510 <lv_tick_get>
 800d65a:	4b06      	ldr	r3, [pc, #24]	; (800d674 <lv_anim_init+0x28>)
    lv_task_create(anim_task, LV_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 800d65c:	2203      	movs	r2, #3
 800d65e:	2132      	movs	r1, #50	; 0x32
    last_task_run = lv_tick_get();
 800d660:	6018      	str	r0, [r3, #0]
    lv_task_create(anim_task, LV_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 800d662:	2300      	movs	r3, #0
 800d664:	4804      	ldr	r0, [pc, #16]	; (800d678 <lv_anim_init+0x2c>)
}
 800d666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_task_create(anim_task, LV_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 800d66a:	f000 bcad 	b.w	800dfc8 <lv_task_create>
 800d66e:	bf00      	nop
 800d670:	2000f398 	.word	0x2000f398
 800d674:	2000f3a4 	.word	0x2000f3a4
 800d678:	0800d539 	.word	0x0800d539

0800d67c <lv_anim_del>:
{
 800d67c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d680:	4680      	mov	r8, r0
    a = lv_ll_get_head(&anim_ll);
 800d682:	4813      	ldr	r0, [pc, #76]	; (800d6d0 <lv_anim_del+0x54>)
{
 800d684:	460e      	mov	r6, r1
    bool del = false;
 800d686:	2500      	movs	r5, #0
    a = lv_ll_get_head(&anim_ll);
 800d688:	f000 faef 	bl	800dc6a <lv_ll_get_head>
        a_next = lv_ll_get_next(&anim_ll, a);
 800d68c:	4f10      	ldr	r7, [pc, #64]	; (800d6d0 <lv_anim_del+0x54>)
    a = lv_ll_get_head(&anim_ll);
 800d68e:	4604      	mov	r4, r0
            anim_list_changed = true;       /*Read by `anim_task`. It need to know if a delete occurred in the linked list*/
 800d690:	f8df 9040 	ldr.w	r9, [pc, #64]	; 800d6d4 <lv_anim_del+0x58>
 800d694:	f04f 0a01 	mov.w	sl, #1
    while(a != NULL) {
 800d698:	b914      	cbnz	r4, 800d6a0 <lv_anim_del+0x24>
}
 800d69a:	4628      	mov	r0, r5
 800d69c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        a_next = lv_ll_get_next(&anim_ll, a);
 800d6a0:	4621      	mov	r1, r4
 800d6a2:	4638      	mov	r0, r7
 800d6a4:	f000 fae7 	bl	800dc76 <lv_ll_get_next>
        if(a->var == var && (a->fp == fp || fp == NULL)) {
 800d6a8:	6823      	ldr	r3, [r4, #0]
        a_next = lv_ll_get_next(&anim_ll, a);
 800d6aa:	4683      	mov	fp, r0
        if(a->var == var && (a->fp == fp || fp == NULL)) {
 800d6ac:	4543      	cmp	r3, r8
 800d6ae:	d10d      	bne.n	800d6cc <lv_anim_del+0x50>
 800d6b0:	6863      	ldr	r3, [r4, #4]
 800d6b2:	42b3      	cmp	r3, r6
 800d6b4:	d000      	beq.n	800d6b8 <lv_anim_del+0x3c>
 800d6b6:	b94e      	cbnz	r6, 800d6cc <lv_anim_del+0x50>
            lv_ll_rem(&anim_ll, a);
 800d6b8:	4621      	mov	r1, r4
 800d6ba:	4638      	mov	r0, r7
            del = true;
 800d6bc:	2501      	movs	r5, #1
            lv_ll_rem(&anim_ll, a);
 800d6be:	f000 fb13 	bl	800dce8 <lv_ll_rem>
            lv_mem_free(a);
 800d6c2:	4620      	mov	r0, r4
 800d6c4:	f000 fbe4 	bl	800de90 <lv_mem_free>
            anim_list_changed = true;       /*Read by `anim_task`. It need to know if a delete occurred in the linked list*/
 800d6c8:	f889 a000 	strb.w	sl, [r9]
            del = true;
 800d6cc:	465c      	mov	r4, fp
 800d6ce:	e7e3      	b.n	800d698 <lv_anim_del+0x1c>
 800d6d0:	2000f398 	.word	0x2000f398
 800d6d4:	2000f395 	.word	0x2000f395

0800d6d8 <lv_anim_create>:
    if(anim_p->fp != NULL) lv_anim_del(anim_p->var, anim_p->fp);       /*fp == NULL would delete all animations of var*/
 800d6d8:	6841      	ldr	r1, [r0, #4]
{
 800d6da:	b510      	push	{r4, lr}
 800d6dc:	4604      	mov	r4, r0
    if(anim_p->fp != NULL) lv_anim_del(anim_p->var, anim_p->fp);       /*fp == NULL would delete all animations of var*/
 800d6de:	b111      	cbz	r1, 800d6e6 <lv_anim_create+0xe>
 800d6e0:	6800      	ldr	r0, [r0, #0]
 800d6e2:	f7ff ffcb 	bl	800d67c <lv_anim_del>
    lv_anim_t * new_anim = lv_ll_ins_head(&anim_ll);
 800d6e6:	480e      	ldr	r0, [pc, #56]	; (800d720 <lv_anim_create+0x48>)
 800d6e8:	f000 fa83 	bl	800dbf2 <lv_ll_ins_head>
    lv_mem_assert(new_anim);
 800d6ec:	b900      	cbnz	r0, 800d6f0 <lv_anim_create+0x18>
 800d6ee:	e7fe      	b.n	800d6ee <lv_anim_create+0x16>
    anim_p->playback_now = 0;
 800d6f0:	f894 3020 	ldrb.w	r3, [r4, #32]
    memcpy(new_anim, anim_p, sizeof(lv_anim_t));
 800d6f4:	f104 0224 	add.w	r2, r4, #36	; 0x24
    anim_p->playback_now = 0;
 800d6f8:	f36f 0382 	bfc	r3, #2, #1
 800d6fc:	f884 3020 	strb.w	r3, [r4, #32]
    memcpy(new_anim, anim_p, sizeof(lv_anim_t));
 800d700:	4603      	mov	r3, r0
 800d702:	f854 1b04 	ldr.w	r1, [r4], #4
 800d706:	4294      	cmp	r4, r2
 800d708:	f843 1b04 	str.w	r1, [r3], #4
 800d70c:	d1f9      	bne.n	800d702 <lv_anim_create+0x2a>
    if(new_anim->fp != NULL) new_anim->fp(new_anim->var, new_anim->start);
 800d70e:	6843      	ldr	r3, [r0, #4]
 800d710:	b113      	cbz	r3, 800d718 <lv_anim_create+0x40>
 800d712:	6901      	ldr	r1, [r0, #16]
 800d714:	6800      	ldr	r0, [r0, #0]
 800d716:	4798      	blx	r3
    anim_list_changed = true;
 800d718:	2201      	movs	r2, #1
 800d71a:	4b02      	ldr	r3, [pc, #8]	; (800d724 <lv_anim_create+0x4c>)
 800d71c:	701a      	strb	r2, [r3, #0]
 800d71e:	bd10      	pop	{r4, pc}
 800d720:	2000f398 	.word	0x2000f398
 800d724:	2000f395 	.word	0x2000f395

0800d728 <lv_anim_speed_to_time>:
    int32_t d = LV_MATH_ABS((int32_t) start - end);
 800d728:	1a89      	subs	r1, r1, r2
    uint32_t time = (int32_t)((int32_t)(d * 1000) / speed);
 800d72a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    int32_t d = LV_MATH_ABS((int32_t) start - end);
 800d72e:	2900      	cmp	r1, #0
 800d730:	bfb8      	it	lt
 800d732:	4249      	neglt	r1, r1
    uint32_t time = (int32_t)((int32_t)(d * 1000) / speed);
 800d734:	434a      	muls	r2, r1
 800d736:	fb92 f0f0 	sdiv	r0, r2, r0
    if(time > UINT16_MAX) time = UINT16_MAX;
 800d73a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800d73e:	da04      	bge.n	800d74a <lv_anim_speed_to_time+0x22>
        time++;
 800d740:	2800      	cmp	r0, #0
 800d742:	bf08      	it	eq
 800d744:	2001      	moveq	r0, #1
}
 800d746:	b280      	uxth	r0, r0
 800d748:	4770      	bx	lr
    if(time > UINT16_MAX) time = UINT16_MAX;
 800d74a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d74e:	e7fa      	b.n	800d746 <lv_anim_speed_to_time+0x1e>

0800d750 <lv_anim_path_linear>:
    if(a->time == a->act_time) step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
 800d750:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 800d754:	8b02      	ldrh	r2, [r0, #24]
    new_value = (int32_t) step * (a->end - a->start);
 800d756:	6901      	ldr	r1, [r0, #16]
    if(a->time == a->act_time) step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
 800d758:	429a      	cmp	r2, r3
    else step = (a->act_time * LV_ANIM_RESOLUTION) / a->time;
 800d75a:	bf16      	itet	ne
 800d75c:	029b      	lslne	r3, r3, #10
 800d75e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d762:	fb93 f3f2 	sdivne	r3, r3, r2
    new_value = (int32_t) step * (a->end - a->start);
 800d766:	6942      	ldr	r2, [r0, #20]
 800d768:	b29b      	uxth	r3, r3
 800d76a:	1a52      	subs	r2, r2, r1
 800d76c:	4353      	muls	r3, r2
}
 800d76e:	eb01 20a3 	add.w	r0, r1, r3, asr #10
 800d772:	4770      	bx	lr

0800d774 <lv_anim_path_step>:
    else return a->start;
 800d774:	6903      	ldr	r3, [r0, #16]
    if(a->act_time >= a->time) return a->end;
 800d776:	6942      	ldr	r2, [r0, #20]
{
 800d778:	b510      	push	{r4, lr}
    if(a->act_time >= a->time) return a->end;
 800d77a:	f9b0 401a 	ldrsh.w	r4, [r0, #26]
 800d77e:	8b00      	ldrh	r0, [r0, #24]
}
 800d780:	4284      	cmp	r4, r0
 800d782:	bfac      	ite	ge
 800d784:	4610      	movge	r0, r2
 800d786:	4618      	movlt	r0, r3
 800d788:	bd10      	pop	{r4, pc}

0800d78a <lv_area_set>:
 */
void lv_area_set(lv_area_t * area_p, lv_coord_t x1, lv_coord_t y1, lv_coord_t x2, lv_coord_t y2)
{
    area_p->x1 = x1;
    area_p->y1 = y1;
    area_p->x2 = x2;
 800d78a:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
 800d78c:	f9bd 3000 	ldrsh.w	r3, [sp]
    area_p->x1 = x1;
 800d790:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
 800d792:	8042      	strh	r2, [r0, #2]
    area_p->y2 = y2;
 800d794:	80c3      	strh	r3, [r0, #6]
 800d796:	4770      	bx	lr

0800d798 <lv_area_set_width>:
 * @param area_p pointer to an area
 * @param w the new width of the area (w == 1 makes x1 == x2)
 */
void lv_area_set_width(lv_area_t * area_p, lv_coord_t w)
{
    area_p->x2 = area_p->x1 + w - 1;
 800d798:	3901      	subs	r1, #1
 800d79a:	8803      	ldrh	r3, [r0, #0]
 800d79c:	4419      	add	r1, r3
 800d79e:	8081      	strh	r1, [r0, #4]
 800d7a0:	4770      	bx	lr

0800d7a2 <lv_area_set_height>:
 * @param area_p pointer to an area
 * @param h the new height of the area (h == 1 makes y1 == y2)
 */
void lv_area_set_height(lv_area_t * area_p, lv_coord_t h)
{
    area_p->y2 = area_p->y1 + h - 1;
 800d7a2:	3901      	subs	r1, #1
 800d7a4:	8843      	ldrh	r3, [r0, #2]
 800d7a6:	4419      	add	r1, r3
 800d7a8:	80c1      	strh	r1, [r0, #6]
 800d7aa:	4770      	bx	lr

0800d7ac <lv_area_set_pos>:
 * @param area_p pointer to an area
 * @param x the new x coordinate of the area
 * @param y the new y coordinate of the area
 */
void lv_area_set_pos(lv_area_t * area_p, lv_coord_t x, lv_coord_t y)
{
 800d7ac:	b570      	push	{r4, r5, r6, lr}
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 800d7ae:	88c3      	ldrh	r3, [r0, #6]
    return area_p->x2 - area_p->x1 + 1;
 800d7b0:	8884      	ldrh	r4, [r0, #4]
 800d7b2:	8806      	ldrh	r6, [r0, #0]
    return area_p->y2 - area_p->y1 + 1;
 800d7b4:	8845      	ldrh	r5, [r0, #2]
    lv_coord_t w = lv_area_get_width(area_p);
    lv_coord_t h = lv_area_get_height(area_p);
    area_p->x1 = x;
 800d7b6:	8001      	strh	r1, [r0, #0]
    area_p->x2 = area_p->x1 + w - 1;
 800d7b8:	4421      	add	r1, r4
    area_p->y1 = y;
 800d7ba:	8042      	strh	r2, [r0, #2]
    area_p->y2 = area_p->y1 + h - 1;
 800d7bc:	441a      	add	r2, r3
    area_p->x2 = area_p->x1 + w - 1;
 800d7be:	1b89      	subs	r1, r1, r6
    area_p->y2 = area_p->y1 + h - 1;
 800d7c0:	1b52      	subs	r2, r2, r5
    area_p->x2 = area_p->x1 + w - 1;
 800d7c2:	8081      	strh	r1, [r0, #4]
    area_p->y2 = area_p->y1 + h - 1;
 800d7c4:	80c2      	strh	r2, [r0, #6]
 800d7c6:	bd70      	pop	{r4, r5, r6, pc}

0800d7c8 <lv_area_get_size>:
 */
uint32_t lv_area_get_size(const lv_area_t * area_p)
{
    uint32_t size;

    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) *
 800d7c8:	f9b0 3000 	ldrsh.w	r3, [r0]
 800d7cc:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800d7d0:	1ad2      	subs	r2, r2, r3
           (area_p->y2 - area_p->y1 + 1);
 800d7d2:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800d7d6:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 800d7da:	1a18      	subs	r0, r3, r0
 800d7dc:	3001      	adds	r0, #1

    return size;
}
 800d7de:	fb02 0000 	mla	r0, r2, r0, r0
 800d7e2:	4770      	bx	lr

0800d7e4 <lv_area_intersect>:
 * @return false: the two area has NO common parts, res_p is invalid
 */
bool lv_area_intersect(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    /* Get the smaller area from 'a1_p' and 'a2_p' */
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 800d7e4:	f9b1 3000 	ldrsh.w	r3, [r1]
{
 800d7e8:	b570      	push	{r4, r5, r6, lr}
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 800d7ea:	f9b2 5000 	ldrsh.w	r5, [r2]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800d7ee:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 800d7f2:	429d      	cmp	r5, r3
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800d7f4:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 800d7f8:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 800d7fc:	bfb8      	it	lt
 800d7fe:	461d      	movlt	r5, r3
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800d800:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800d804:	42a3      	cmp	r3, r4
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 800d806:	8005      	strh	r5, [r0, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800d808:	bfb8      	it	lt
 800d80a:	4623      	movlt	r3, r4
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800d80c:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 800d810:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800d814:	42b4      	cmp	r4, r6
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800d816:	8043      	strh	r3, [r0, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800d818:	bfa8      	it	ge
 800d81a:	4634      	movge	r4, r6
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 800d81c:	428a      	cmp	r2, r1
 800d81e:	bfa8      	it	ge
 800d820:	460a      	movge	r2, r1

    /*If x1 or y1 greater then x2 or y2 then the areas union is empty*/
    bool union_ok = true;
    if((res_p->x1 > res_p->x2) ||
 800d822:	42a5      	cmp	r5, r4
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800d824:	8084      	strh	r4, [r0, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 800d826:	80c2      	strh	r2, [r0, #6]
    if((res_p->x1 > res_p->x2) ||
 800d828:	dc04      	bgt.n	800d834 <lv_area_intersect+0x50>
 800d82a:	4293      	cmp	r3, r2
 800d82c:	bfcc      	ite	gt
 800d82e:	2000      	movgt	r0, #0
 800d830:	2001      	movle	r0, #1
 800d832:	bd70      	pop	{r4, r5, r6, pc}
            (res_p->y1 > res_p->y2)) {
        union_ok = false;
 800d834:	2000      	movs	r0, #0
    }

    return union_ok;
}
 800d836:	bd70      	pop	{r4, r5, r6, pc}

0800d838 <lv_area_join>:
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 */
void lv_area_join(lv_area_t * a_res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 800d838:	f9b2 3000 	ldrsh.w	r3, [r2]
{
 800d83c:	b510      	push	{r4, lr}
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 800d83e:	f9b1 4000 	ldrsh.w	r4, [r1]
 800d842:	42a3      	cmp	r3, r4
 800d844:	bfa8      	it	ge
 800d846:	4623      	movge	r3, r4
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 800d848:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 800d84c:	8003      	strh	r3, [r0, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 800d84e:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800d852:	42a3      	cmp	r3, r4
 800d854:	bfa8      	it	ge
 800d856:	4623      	movge	r3, r4
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 800d858:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 800d85c:	8043      	strh	r3, [r0, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 800d85e:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800d862:	42a3      	cmp	r3, r4
 800d864:	bfb8      	it	lt
 800d866:	4623      	movlt	r3, r4
 800d868:	8083      	strh	r3, [r0, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
 800d86a:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 800d86e:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 800d872:	4293      	cmp	r3, r2
 800d874:	bfb8      	it	lt
 800d876:	4613      	movlt	r3, r2
 800d878:	80c3      	strh	r3, [r0, #6]
 800d87a:	bd10      	pop	{r4, pc}

0800d87c <lv_area_is_point_on>:
 */
bool lv_area_is_point_on(const lv_area_t * a_p, const lv_point_t * p_p)
{
    bool is_on = false;

    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) &&
 800d87c:	f9b1 3000 	ldrsh.w	r3, [r1]
 800d880:	f9b0 2000 	ldrsh.w	r2, [r0]
 800d884:	429a      	cmp	r2, r3
 800d886:	dc10      	bgt.n	800d8aa <lv_area_is_point_on+0x2e>
 800d888:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800d88c:	429a      	cmp	r2, r3
 800d88e:	db0c      	blt.n	800d8aa <lv_area_is_point_on+0x2e>
            ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 800d890:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) &&
 800d894:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800d898:	429a      	cmp	r2, r3
 800d89a:	dc06      	bgt.n	800d8aa <lv_area_is_point_on+0x2e>
            ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 800d89c:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800d8a0:	4298      	cmp	r0, r3
 800d8a2:	bfb4      	ite	lt
 800d8a4:	2000      	movlt	r0, #0
 800d8a6:	2001      	movge	r0, #1
 800d8a8:	4770      	bx	lr
    bool is_on = false;
 800d8aa:	2000      	movs	r0, #0
        is_on = true;
    }

    return is_on;
}
 800d8ac:	4770      	bx	lr

0800d8ae <lv_area_is_on>:
 * @param a2_p pointer to an other area
 * @return false: a1_p and a2_p has no common parts
 */
bool lv_area_is_on(const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    if((a1_p->x1 <= a2_p->x2) &&
 800d8ae:	f9b0 2000 	ldrsh.w	r2, [r0]
 800d8b2:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800d8b6:	429a      	cmp	r2, r3
 800d8b8:	dc14      	bgt.n	800d8e4 <lv_area_is_on+0x36>
 800d8ba:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800d8be:	f9b1 3000 	ldrsh.w	r3, [r1]
 800d8c2:	429a      	cmp	r2, r3
 800d8c4:	db0e      	blt.n	800d8e4 <lv_area_is_on+0x36>
            (a1_p->x2 >= a2_p->x1) &&
 800d8c6:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800d8ca:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800d8ce:	429a      	cmp	r2, r3
 800d8d0:	dc08      	bgt.n	800d8e4 <lv_area_is_on+0x36>
            (a1_p->y1 <= a2_p->y2) &&
 800d8d2:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800d8d6:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800d8da:	4298      	cmp	r0, r3
 800d8dc:	bfb4      	ite	lt
 800d8de:	2000      	movlt	r0, #0
 800d8e0:	2001      	movge	r0, #1
 800d8e2:	4770      	bx	lr
            (a1_p->y2 >= a2_p->y1)) {
        return true;
    } else {
        return false;
 800d8e4:	2000      	movs	r0, #0
    }

}
 800d8e6:	4770      	bx	lr

0800d8e8 <lv_area_is_in>:
 */
bool lv_area_is_in(const lv_area_t * ain_p, const lv_area_t * aholder_p)
{
    bool is_in = false;

    if(ain_p->x1  >= aholder_p->x1 &&
 800d8e8:	f9b0 2000 	ldrsh.w	r2, [r0]
 800d8ec:	f9b1 3000 	ldrsh.w	r3, [r1]
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	db14      	blt.n	800d91e <lv_area_is_in+0x36>
 800d8f4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800d8f8:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800d8fc:	429a      	cmp	r2, r3
 800d8fe:	db0e      	blt.n	800d91e <lv_area_is_in+0x36>
            ain_p->y1  >= aholder_p->y1 &&
 800d900:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800d904:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800d908:	429a      	cmp	r2, r3
 800d90a:	dc08      	bgt.n	800d91e <lv_area_is_in+0x36>
            ain_p->x2  <= aholder_p->x2 &&
 800d90c:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800d910:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800d914:	4298      	cmp	r0, r3
 800d916:	bfcc      	ite	gt
 800d918:	2000      	movgt	r0, #0
 800d91a:	2001      	movle	r0, #1
 800d91c:	4770      	bx	lr
    bool is_in = false;
 800d91e:	2000      	movs	r0, #0
            ain_p->y2  <= aholder_p->y2) {
        is_in = true;
    }

    return is_in;
}
 800d920:	4770      	bx	lr

0800d922 <lv_circ_init>:
 * @param tmp point to a variable. It will store temporary data
 * @param radius radius of the circle
 */
void lv_circ_init(lv_point_t * c, lv_coord_t * tmp, lv_coord_t radius)
{
    c->x = radius;
 800d922:	8002      	strh	r2, [r0, #0]
    c->y = 0;
 800d924:	2300      	movs	r3, #0
    *tmp = 1 - radius;
 800d926:	f1c2 0201 	rsb	r2, r2, #1
    c->y = 0;
 800d92a:	8043      	strh	r3, [r0, #2]
    *tmp = 1 - radius;
 800d92c:	800a      	strh	r2, [r1, #0]
 800d92e:	4770      	bx	lr

0800d930 <lv_circ_cont>:
 * @param c same as in circ_init
 * @return true if the circle is not ready yet
 */
bool lv_circ_cont(lv_point_t * c)
{
    return c->y <= c->x ? true : false;
 800d930:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800d934:	f9b0 0000 	ldrsh.w	r0, [r0]
}
 800d938:	4282      	cmp	r2, r0
 800d93a:	bfcc      	ite	gt
 800d93c:	2000      	movgt	r0, #0
 800d93e:	2001      	movle	r0, #1
 800d940:	4770      	bx	lr

0800d942 <lv_circ_next>:
 * @param c same as in circ_init. The next point stored here.
 * @param tmp same as in circ_init.
 */
void lv_circ_next(lv_point_t * c, lv_coord_t * tmp)
{
    c->y++;
 800d942:	8842      	ldrh	r2, [r0, #2]
 800d944:	3201      	adds	r2, #1
{
 800d946:	b530      	push	{r4, r5, lr}
    c->y++;
 800d948:	b294      	uxth	r4, r2
 800d94a:	b225      	sxth	r5, r4
 800d94c:	8045      	strh	r5, [r0, #2]

    if(*tmp <= 0) {
 800d94e:	f9b1 2000 	ldrsh.w	r2, [r1]
 800d952:	2a00      	cmp	r2, #0
 800d954:	dc04      	bgt.n	800d960 <lv_circ_next+0x1e>
        (*tmp) += 2 * c->y + 1;   // Change in decision criterion for y -> y+1
 800d956:	3201      	adds	r2, #1
 800d958:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 800d95c:	800a      	strh	r2, [r1, #0]
 800d95e:	bd30      	pop	{r4, r5, pc}
    } else {
        c->x--;
 800d960:	8803      	ldrh	r3, [r0, #0]
 800d962:	3b01      	subs	r3, #1
 800d964:	b21b      	sxth	r3, r3
 800d966:	8003      	strh	r3, [r0, #0]
        (*tmp) += 2 * (c->y - c->x) + 1;   // Change for y -> y+1, x -> x-1
 800d968:	1aed      	subs	r5, r5, r3
 800d96a:	880b      	ldrh	r3, [r1, #0]
 800d96c:	3301      	adds	r3, #1
 800d96e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 800d972:	800b      	strh	r3, [r1, #0]
 800d974:	bd30      	pop	{r4, r5, pc}

0800d976 <lv_font_init>:
/**
 * Initialize the fonts
 */
void lv_font_init(void)
{
    lv_font_builtin_init();
 800d976:	f7ff bcfd 	b.w	800d374 <lv_font_builtin_init>

0800d97a <lv_font_add>:
 * @param dsc_get_fp the font descriptor get function
 * @param parent add this font as charter set extension of 'parent'
 */
void lv_font_add(lv_font_t * child, lv_font_t * parent)
{
    if(parent == NULL) return;
 800d97a:	b909      	cbnz	r1, 800d980 <lv_font_add+0x6>
 800d97c:	4770      	bx	lr
 800d97e:	4619      	mov	r1, r3

    while(parent->next_page != NULL) {
 800d980:	69cb      	ldr	r3, [r1, #28]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d1fb      	bne.n	800d97e <lv_font_add+0x4>
        parent = parent->next_page; /*Got to the last page and add the new font there*/
    }

    parent->next_page = child;
 800d986:	61c8      	str	r0, [r1, #28]
 800d988:	4770      	bx	lr

0800d98a <lv_font_is_monospace>:
 * @param font_p point to font
 * @param letter an UNICODE character code
 * @return true: the letter is monospace; false not monospace
 */
bool lv_font_is_monospace(const lv_font_t * font_p, uint32_t letter)
{
 800d98a:	b538      	push	{r3, r4, r5, lr}
 800d98c:	4604      	mov	r4, r0
 800d98e:	460d      	mov	r5, r1
    const lv_font_t * font_i = font_p;
    int16_t w;
    while(font_i != NULL) {
 800d990:	b90c      	cbnz	r4, 800d996 <lv_font_is_monospace+0xc>
        }

        font_i = font_i->next_page;
    }

    return 0;
 800d992:	4620      	mov	r0, r4
}
 800d994:	bd38      	pop	{r3, r4, r5, pc}
        w = font_i->get_width(font_i, letter);
 800d996:	69a3      	ldr	r3, [r4, #24]
 800d998:	4629      	mov	r1, r5
 800d99a:	4620      	mov	r0, r4
 800d99c:	4798      	blx	r3
        if(w >= 0) {
 800d99e:	2800      	cmp	r0, #0
 800d9a0:	db06      	blt.n	800d9b0 <lv_font_is_monospace+0x26>
            if(font_i->monospace) return true;
 800d9a2:	6a23      	ldr	r3, [r4, #32]
 800d9a4:	f413 2f7f 	tst.w	r3, #1044480	; 0xff000
 800d9a8:	bf14      	ite	ne
 800d9aa:	2001      	movne	r0, #1
 800d9ac:	2000      	moveq	r0, #0
 800d9ae:	bd38      	pop	{r3, r4, r5, pc}
        font_i = font_i->next_page;
 800d9b0:	69e4      	ldr	r4, [r4, #28]
 800d9b2:	e7ed      	b.n	800d990 <lv_font_is_monospace+0x6>

0800d9b4 <lv_font_get_bitmap>:
 * @param font_p pointer to a font
 * @param letter an UNICODE character code
 * @return  pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_bitmap(const lv_font_t * font_p, uint32_t letter)
{
 800d9b4:	b538      	push	{r3, r4, r5, lr}
 800d9b6:	4604      	mov	r4, r0
 800d9b8:	460d      	mov	r5, r1
    const lv_font_t * font_i = font_p;
    while(font_i != NULL) {
 800d9ba:	b90c      	cbnz	r4, 800d9c0 <lv_font_get_bitmap+0xc>
        if(bitmap) return bitmap;

        font_i = font_i->next_page;
    }

    return NULL;
 800d9bc:	4620      	mov	r0, r4
}
 800d9be:	bd38      	pop	{r3, r4, r5, pc}
        const uint8_t * bitmap = font_i->get_bitmap(font_i, letter);
 800d9c0:	6963      	ldr	r3, [r4, #20]
 800d9c2:	4629      	mov	r1, r5
 800d9c4:	4620      	mov	r0, r4
 800d9c6:	4798      	blx	r3
        if(bitmap) return bitmap;
 800d9c8:	2800      	cmp	r0, #0
 800d9ca:	d1f8      	bne.n	800d9be <lv_font_get_bitmap+0xa>
        font_i = font_i->next_page;
 800d9cc:	69e4      	ldr	r4, [r4, #28]
 800d9ce:	e7f4      	b.n	800d9ba <lv_font_get_bitmap+0x6>

0800d9d0 <lv_font_get_width>:
 * @param font_p pointer to a font
 * @param letter an UNICODE character code
 * @return the width of a letter
 */
uint8_t lv_font_get_width(const lv_font_t * font_p, uint32_t letter)
{
 800d9d0:	b538      	push	{r3, r4, r5, lr}
 800d9d2:	4604      	mov	r4, r0
 800d9d4:	460d      	mov	r5, r1
    const lv_font_t * font_i = font_p;
    int16_t w;
    while(font_i != NULL) {
 800d9d6:	b90c      	cbnz	r4, 800d9dc <lv_font_get_width+0xc>
        }

        font_i = font_i->next_page;
    }

    return 0;
 800d9d8:	4620      	mov	r0, r4

}
 800d9da:	bd38      	pop	{r3, r4, r5, pc}
        w = font_i->get_width(font_i, letter);
 800d9dc:	69a3      	ldr	r3, [r4, #24]
 800d9de:	4629      	mov	r1, r5
 800d9e0:	4620      	mov	r0, r4
 800d9e2:	4798      	blx	r3
        if(w >= 0) {
 800d9e4:	2800      	cmp	r0, #0
 800d9e6:	db06      	blt.n	800d9f6 <lv_font_get_width+0x26>
            uint8_t m = font_i->monospace;
 800d9e8:	6a23      	ldr	r3, [r4, #32]
 800d9ea:	f3c3 3307 	ubfx	r3, r3, #12, #8
            if(m) w = m;
 800d9ee:	b103      	cbz	r3, 800d9f2 <lv_font_get_width+0x22>
 800d9f0:	b218      	sxth	r0, r3
            return w;
 800d9f2:	b2c0      	uxtb	r0, r0
 800d9f4:	bd38      	pop	{r3, r4, r5, pc}
        font_i = font_i->next_page;
 800d9f6:	69e4      	ldr	r4, [r4, #28]
 800d9f8:	e7ed      	b.n	800d9d6 <lv_font_get_width+0x6>

0800d9fa <lv_font_get_real_width>:
 * @param font_p pointer to a font
 * @param letter an UNICODE character code
 * @return the width of a letter
 */
uint8_t lv_font_get_real_width(const lv_font_t * font_p, uint32_t letter)
{
 800d9fa:	b538      	push	{r3, r4, r5, lr}
 800d9fc:	4604      	mov	r4, r0
 800d9fe:	460d      	mov	r5, r1
    const lv_font_t * font_i = font_p;
    int16_t w;
    while(font_i != NULL) {
 800da00:	b90c      	cbnz	r4, 800da06 <lv_font_get_real_width+0xc>
        if(w >= 0) return w;

        font_i = font_i->next_page;
    }

    return 0;
 800da02:	4620      	mov	r0, r4
}
 800da04:	bd38      	pop	{r3, r4, r5, pc}
        w = font_i->get_width(font_i, letter);
 800da06:	69a3      	ldr	r3, [r4, #24]
 800da08:	4629      	mov	r1, r5
 800da0a:	4620      	mov	r0, r4
 800da0c:	4798      	blx	r3
        if(w >= 0) return w;
 800da0e:	2800      	cmp	r0, #0
 800da10:	db01      	blt.n	800da16 <lv_font_get_real_width+0x1c>
 800da12:	b2c0      	uxtb	r0, r0
 800da14:	bd38      	pop	{r3, r4, r5, pc}
        font_i = font_i->next_page;
 800da16:	69e4      	ldr	r4, [r4, #28]
 800da18:	e7f2      	b.n	800da00 <lv_font_get_real_width+0x6>

0800da1a <lv_font_get_bpp>:
 * @return bpp of the font (or font extension)
 */
uint8_t lv_font_get_bpp(const lv_font_t * font, uint32_t letter)
{
    const lv_font_t * font_i = font;
    while(font_i != NULL) {
 800da1a:	b900      	cbnz	r0, 800da1e <lv_font_get_bpp+0x4>
        font_i = font_i->next_page;
    }

    return 0;

}
 800da1c:	4770      	bx	lr
        if(letter >= font_i->unicode_first && letter <= font_i->unicode_last) {
 800da1e:	6803      	ldr	r3, [r0, #0]
 800da20:	428b      	cmp	r3, r1
 800da22:	d807      	bhi.n	800da34 <lv_font_get_bpp+0x1a>
 800da24:	6843      	ldr	r3, [r0, #4]
 800da26:	4299      	cmp	r1, r3
 800da28:	d804      	bhi.n	800da34 <lv_font_get_bpp+0x1a>
            return font_i->bpp;
 800da2a:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
 800da2e:	f000 000f 	and.w	r0, r0, #15
 800da32:	4770      	bx	lr
        font_i = font_i->next_page;
 800da34:	69c0      	ldr	r0, [r0, #28]
 800da36:	e7f0      	b.n	800da1a <lv_font_get_bpp>

0800da38 <lv_font_get_bitmap_continuous>:
 * @return pointer to the bitmap or NULL if not found
 */
const uint8_t * lv_font_get_bitmap_continuous(const lv_font_t * font, uint32_t unicode_letter)
{
    /*Check the range*/
    if(unicode_letter < font->unicode_first || unicode_letter > font->unicode_last) return NULL;
 800da38:	6803      	ldr	r3, [r0, #0]
 800da3a:	428b      	cmp	r3, r1
 800da3c:	d80a      	bhi.n	800da54 <lv_font_get_bitmap_continuous+0x1c>
 800da3e:	6842      	ldr	r2, [r0, #4]
 800da40:	4291      	cmp	r1, r2
 800da42:	d807      	bhi.n	800da54 <lv_font_get_bitmap_continuous+0x1c>

    uint32_t index = (unicode_letter - font->unicode_first);
 800da44:	1ac9      	subs	r1, r1, r3
    return &font->glyph_bitmap[font->glyph_dsc[index].glyph_index];
 800da46:	68c3      	ldr	r3, [r0, #12]
 800da48:	6880      	ldr	r0, [r0, #8]
 800da4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800da4e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 800da52:	4770      	bx	lr
    if(unicode_letter < font->unicode_first || unicode_letter > font->unicode_last) return NULL;
 800da54:	2000      	movs	r0, #0
}
 800da56:	4770      	bx	lr

0800da58 <lv_font_get_width_continuous>:
 * @return width of the gylph or -1 if not found
 */
int16_t lv_font_get_width_continuous(const lv_font_t * font, uint32_t unicode_letter)
{
    /*Check the range*/
    if(unicode_letter < font->unicode_first || unicode_letter > font->unicode_last) {
 800da58:	6803      	ldr	r3, [r0, #0]
 800da5a:	428b      	cmp	r3, r1
 800da5c:	d807      	bhi.n	800da6e <lv_font_get_width_continuous+0x16>
 800da5e:	6842      	ldr	r2, [r0, #4]
 800da60:	4291      	cmp	r1, r2
 800da62:	d804      	bhi.n	800da6e <lv_font_get_width_continuous+0x16>
        return -1;
    }

    uint32_t index = (unicode_letter - font->unicode_first);
 800da64:	1ac9      	subs	r1, r1, r3
    return font->glyph_dsc[index].w_px;
 800da66:	68c3      	ldr	r3, [r0, #12]
 800da68:	f813 0021 	ldrb.w	r0, [r3, r1, lsl #2]
 800da6c:	4770      	bx	lr
        return -1;
 800da6e:	f04f 30ff 	mov.w	r0, #4294967295
}
 800da72:	4770      	bx	lr

0800da74 <lv_fs_get_real_path>:
static const char * lv_fs_get_real_path(const char * path)
{
    /* Example path: "S:/folder/file.txt"
     * Leave the letter and the : / \ characters*/

    path ++; /*Ignore the driver letter*/
 800da74:	1c42      	adds	r2, r0, #1
 800da76:	4610      	mov	r0, r2

    while(*path != '\0') {
 800da78:	f812 3b01 	ldrb.w	r3, [r2], #1
 800da7c:	b12b      	cbz	r3, 800da8a <lv_fs_get_real_path+0x16>
        if(*path == ':' || *path == '\\' || *path == '/') {
 800da7e:	2b3a      	cmp	r3, #58	; 0x3a
 800da80:	d0f9      	beq.n	800da76 <lv_fs_get_real_path+0x2>
 800da82:	2b5c      	cmp	r3, #92	; 0x5c
 800da84:	d0f7      	beq.n	800da76 <lv_fs_get_real_path+0x2>
 800da86:	2b2f      	cmp	r3, #47	; 0x2f
 800da88:	d0f5      	beq.n	800da76 <lv_fs_get_real_path+0x2>
            break;
        }
    }

    return path;
}
 800da8a:	4770      	bx	lr

0800da8c <lv_fs_get_drv>:
 * Give a pointer to a driver from its letter
 * @param letter the driver letter
 * @return pointer to a driver or NULL if not found
 */
static lv_fs_drv_t * lv_fs_get_drv(char letter)
{
 800da8c:	b538      	push	{r3, r4, r5, lr}
    lv_fs_drv_t * drv;

    LL_READ(drv_ll, drv) {
 800da8e:	4d07      	ldr	r5, [pc, #28]	; (800daac <lv_fs_get_drv+0x20>)
{
 800da90:	4604      	mov	r4, r0
    LL_READ(drv_ll, drv) {
 800da92:	4806      	ldr	r0, [pc, #24]	; (800daac <lv_fs_get_drv+0x20>)
 800da94:	f000 f8e9 	bl	800dc6a <lv_ll_get_head>
 800da98:	b900      	cbnz	r0, 800da9c <lv_fs_get_drv+0x10>
            return drv;
        }
    }

    return NULL;
}
 800da9a:	bd38      	pop	{r3, r4, r5, pc}
        if(drv->letter == letter) {
 800da9c:	7803      	ldrb	r3, [r0, #0]
 800da9e:	42a3      	cmp	r3, r4
 800daa0:	d0fb      	beq.n	800da9a <lv_fs_get_drv+0xe>
    LL_READ(drv_ll, drv) {
 800daa2:	4601      	mov	r1, r0
 800daa4:	4628      	mov	r0, r5
 800daa6:	f000 f8e6 	bl	800dc76 <lv_ll_get_next>
 800daaa:	e7f5      	b.n	800da98 <lv_fs_get_drv+0xc>
 800daac:	2000f3a8 	.word	0x2000f3a8

0800dab0 <lv_fs_init>:
    lv_ll_init(&drv_ll, sizeof(lv_fs_drv_t));
 800dab0:	2144      	movs	r1, #68	; 0x44
 800dab2:	4801      	ldr	r0, [pc, #4]	; (800dab8 <lv_fs_init+0x8>)
 800dab4:	f000 b893 	b.w	800dbde <lv_ll_init>
 800dab8:	2000f3a8 	.word	0x2000f3a8

0800dabc <lv_fs_open>:
    file_p->drv = NULL;
 800dabc:	2300      	movs	r3, #0
{
 800dabe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dac2:	4604      	mov	r4, r0
 800dac4:	4690      	mov	r8, r2
    file_p->drv = NULL;
 800dac6:	6043      	str	r3, [r0, #4]
    if(path == NULL) return LV_FS_RES_INV_PARAM;
 800dac8:	460e      	mov	r6, r1
    file_p->file_d = NULL;
 800daca:	6003      	str	r3, [r0, #0]
    if(path == NULL) return LV_FS_RES_INV_PARAM;
 800dacc:	b369      	cbz	r1, 800db2a <lv_fs_open+0x6e>
    file_p->drv = lv_fs_get_drv(letter);
 800dace:	7808      	ldrb	r0, [r1, #0]
 800dad0:	f7ff ffdc 	bl	800da8c <lv_fs_get_drv>
 800dad4:	6060      	str	r0, [r4, #4]
    if(file_p->drv == NULL) {
 800dad6:	b920      	cbnz	r0, 800dae2 <lv_fs_open+0x26>
        return LV_FS_RES_NOT_EX;
 800dad8:	2503      	movs	r5, #3
        file_p->file_d = NULL;
 800dada:	6020      	str	r0, [r4, #0]
}
 800dadc:	4628      	mov	r0, r5
 800dade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(file_p->drv->ready != NULL) {
 800dae2:	6883      	ldr	r3, [r0, #8]
 800dae4:	b12b      	cbz	r3, 800daf2 <lv_fs_open+0x36>
        if(file_p->drv->ready() == false) {
 800dae6:	4798      	blx	r3
 800dae8:	b918      	cbnz	r0, 800daf2 <lv_fs_open+0x36>
            file_p->drv = NULL;
 800daea:	6060      	str	r0, [r4, #4]
            return LV_FS_RES_HW_ERR;
 800daec:	2501      	movs	r5, #1
            file_p->file_d = NULL;
 800daee:	6020      	str	r0, [r4, #0]
            return LV_FS_RES_HW_ERR;
 800daf0:	e7f4      	b.n	800dadc <lv_fs_open+0x20>
    file_p->file_d = lv_mem_alloc(file_p->drv->file_size);
 800daf2:	6863      	ldr	r3, [r4, #4]
 800daf4:	8858      	ldrh	r0, [r3, #2]
 800daf6:	f000 f9a7 	bl	800de48 <lv_mem_alloc>
 800dafa:	4605      	mov	r5, r0
 800dafc:	6020      	str	r0, [r4, #0]
    lv_mem_assert(file_p->file_d);
 800dafe:	b900      	cbnz	r0, 800db02 <lv_fs_open+0x46>
 800db00:	e7fe      	b.n	800db00 <lv_fs_open+0x44>
    if(file_p->drv->open == NULL) {
 800db02:	6863      	ldr	r3, [r4, #4]
 800db04:	68df      	ldr	r7, [r3, #12]
 800db06:	b197      	cbz	r7, 800db2e <lv_fs_open+0x72>
    const char * real_path = lv_fs_get_real_path(path);
 800db08:	4630      	mov	r0, r6
 800db0a:	f7ff ffb3 	bl	800da74 <lv_fs_get_real_path>
    lv_fs_res_t res = file_p->drv->open(file_p->file_d, real_path, mode);
 800db0e:	4642      	mov	r2, r8
 800db10:	4601      	mov	r1, r0
 800db12:	4628      	mov	r0, r5
 800db14:	47b8      	blx	r7
    if(res != LV_FS_RES_OK) {
 800db16:	4605      	mov	r5, r0
 800db18:	2800      	cmp	r0, #0
 800db1a:	d0df      	beq.n	800dadc <lv_fs_open+0x20>
        lv_mem_free(file_p->file_d);
 800db1c:	6820      	ldr	r0, [r4, #0]
 800db1e:	f000 f9b7 	bl	800de90 <lv_mem_free>
        file_p->file_d = NULL;
 800db22:	2300      	movs	r3, #0
 800db24:	6023      	str	r3, [r4, #0]
        file_p->drv = NULL;
 800db26:	6063      	str	r3, [r4, #4]
 800db28:	e7d8      	b.n	800dadc <lv_fs_open+0x20>
    if(path == NULL) return LV_FS_RES_INV_PARAM;
 800db2a:	250b      	movs	r5, #11
 800db2c:	e7d6      	b.n	800dadc <lv_fs_open+0x20>
        return LV_FS_RES_NOT_IMP;
 800db2e:	2509      	movs	r5, #9
 800db30:	e7d4      	b.n	800dadc <lv_fs_open+0x20>

0800db32 <lv_fs_close>:
{
 800db32:	b538      	push	{r3, r4, r5, lr}
    if(file_p->drv == NULL) {
 800db34:	6843      	ldr	r3, [r0, #4]
{
 800db36:	4604      	mov	r4, r0
    if(file_p->drv == NULL) {
 800db38:	b163      	cbz	r3, 800db54 <lv_fs_close+0x22>
    if(file_p->drv->close == NULL) {
 800db3a:	691b      	ldr	r3, [r3, #16]
 800db3c:	b163      	cbz	r3, 800db58 <lv_fs_close+0x26>
    lv_fs_res_t res = file_p->drv->close(file_p->file_d);
 800db3e:	6800      	ldr	r0, [r0, #0]
 800db40:	4798      	blx	r3
 800db42:	4605      	mov	r5, r0
    lv_mem_free(file_p->file_d);   /*Clean up*/
 800db44:	6820      	ldr	r0, [r4, #0]
 800db46:	f000 f9a3 	bl	800de90 <lv_mem_free>
    file_p->file_d = NULL;
 800db4a:	2300      	movs	r3, #0
 800db4c:	6023      	str	r3, [r4, #0]
    file_p->drv = NULL;
 800db4e:	6063      	str	r3, [r4, #4]
}
 800db50:	4628      	mov	r0, r5
 800db52:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
 800db54:	250b      	movs	r5, #11
 800db56:	e7fb      	b.n	800db50 <lv_fs_close+0x1e>
        return LV_FS_RES_NOT_IMP;
 800db58:	2509      	movs	r5, #9
 800db5a:	e7f9      	b.n	800db50 <lv_fs_close+0x1e>

0800db5c <lv_fs_read>:
{
 800db5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if(br != NULL) *br = 0;
 800db5e:	461c      	mov	r4, r3
 800db60:	b10b      	cbz	r3, 800db66 <lv_fs_read+0xa>
 800db62:	2300      	movs	r3, #0
 800db64:	6023      	str	r3, [r4, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 800db66:	6843      	ldr	r3, [r0, #4]
 800db68:	b163      	cbz	r3, 800db84 <lv_fs_read+0x28>
    if(file_p->drv->read == NULL) return LV_FS_RES_NOT_IMP;
 800db6a:	699d      	ldr	r5, [r3, #24]
 800db6c:	b165      	cbz	r5, 800db88 <lv_fs_read+0x2c>
    uint32_t br_tmp = 0;
 800db6e:	ab02      	add	r3, sp, #8
 800db70:	2600      	movs	r6, #0
    lv_fs_res_t res = file_p->drv->read(file_p->file_d, buf, btr, &br_tmp);
 800db72:	6800      	ldr	r0, [r0, #0]
    uint32_t br_tmp = 0;
 800db74:	f843 6d04 	str.w	r6, [r3, #-4]!
    lv_fs_res_t res = file_p->drv->read(file_p->file_d, buf, btr, &br_tmp);
 800db78:	47a8      	blx	r5
    if(br != NULL) *br = br_tmp;
 800db7a:	b10c      	cbz	r4, 800db80 <lv_fs_read+0x24>
 800db7c:	9b01      	ldr	r3, [sp, #4]
 800db7e:	6023      	str	r3, [r4, #0]
}
 800db80:	b002      	add	sp, #8
 800db82:	bd70      	pop	{r4, r5, r6, pc}
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 800db84:	200b      	movs	r0, #11
 800db86:	e7fb      	b.n	800db80 <lv_fs_read+0x24>
    if(file_p->drv->read == NULL) return LV_FS_RES_NOT_IMP;
 800db88:	2009      	movs	r0, #9
 800db8a:	e7f9      	b.n	800db80 <lv_fs_read+0x24>

0800db8c <lv_fs_seek>:
    if(file_p->drv == NULL) {
 800db8c:	6843      	ldr	r3, [r0, #4]
 800db8e:	b11b      	cbz	r3, 800db98 <lv_fs_seek+0xc>
    if(file_p->drv->seek == NULL) {
 800db90:	6a1b      	ldr	r3, [r3, #32]
 800db92:	b11b      	cbz	r3, 800db9c <lv_fs_seek+0x10>
    lv_fs_res_t res = file_p->drv->seek(file_p->file_d, pos);
 800db94:	6800      	ldr	r0, [r0, #0]
 800db96:	4718      	bx	r3
        return LV_FS_RES_INV_PARAM;
 800db98:	200b      	movs	r0, #11
 800db9a:	4770      	bx	lr
        return LV_FS_RES_NOT_IMP;
 800db9c:	2009      	movs	r0, #9
}
 800db9e:	4770      	bx	lr

0800dba0 <lv_fs_add_drv>:
{
 800dba0:	b510      	push	{r4, lr}
 800dba2:	4604      	mov	r4, r0
    new_drv =  lv_ll_ins_head(&drv_ll);
 800dba4:	4805      	ldr	r0, [pc, #20]	; (800dbbc <lv_fs_add_drv+0x1c>)
 800dba6:	f000 f824 	bl	800dbf2 <lv_ll_ins_head>
    lv_mem_assert(new_drv);
 800dbaa:	b900      	cbnz	r0, 800dbae <lv_fs_add_drv+0xe>
 800dbac:	e7fe      	b.n	800dbac <lv_fs_add_drv+0xc>
    memcpy(new_drv, drv_p, sizeof(lv_fs_drv_t));
 800dbae:	4621      	mov	r1, r4
 800dbb0:	2244      	movs	r2, #68	; 0x44
}
 800dbb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memcpy(new_drv, drv_p, sizeof(lv_fs_drv_t));
 800dbb6:	f007 bfb1 	b.w	8015b1c <memcpy>
 800dbba:	bf00      	nop
 800dbbc:	2000f3a8 	.word	0x2000f3a8

0800dbc0 <node_set_next.isra.0>:
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
    if(act == NULL) return;     /*Can't set the next node of `NULL`*/
 800dbc0:	b131      	cbz	r1, 800dbd0 <node_set_next.isra.0+0x10>
 800dbc2:	6803      	ldr	r3, [r0, #0]

    uint32_t node_p_size = sizeof(lv_ll_node_t *);
    if(next) memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
 800dbc4:	b112      	cbz	r2, 800dbcc <node_set_next.isra.0+0xc>
 800dbc6:	4419      	add	r1, r3
 800dbc8:	604a      	str	r2, [r1, #4]
 800dbca:	4770      	bx	lr
    else memset(act + LL_NEXT_P_OFFSET(ll_p), 0, node_p_size);
 800dbcc:	3304      	adds	r3, #4
 800dbce:	50ca      	str	r2, [r1, r3]
 800dbd0:	4770      	bx	lr

0800dbd2 <node_set_prev.isra.2>:
    if(act == NULL) return;     /*Can't set the prev node of `NULL`*/
 800dbd2:	b119      	cbz	r1, 800dbdc <node_set_prev.isra.2+0xa>
 800dbd4:	6803      	ldr	r3, [r0, #0]
    if(prev) memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
 800dbd6:	50ca      	str	r2, [r1, r3]
 800dbd8:	b102      	cbz	r2, 800dbdc <node_set_prev.isra.2+0xa>
 800dbda:	4770      	bx	lr
 800dbdc:	4770      	bx	lr

0800dbde <lv_ll_init>:
    ll_p->head = NULL;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	6043      	str	r3, [r0, #4]
    ll_p->tail = NULL;
 800dbe2:	6083      	str	r3, [r0, #8]
    if(n_size & 0x3) {
 800dbe4:	078b      	lsls	r3, r1, #30
        n_size = n_size & (~0x3);
 800dbe6:	bf1c      	itt	ne
 800dbe8:	f021 0103 	bicne.w	r1, r1, #3
        n_size += 4;
 800dbec:	3104      	addne	r1, #4
    ll_p->n_size = n_size;
 800dbee:	6001      	str	r1, [r0, #0]
 800dbf0:	4770      	bx	lr

0800dbf2 <lv_ll_ins_head>:
{
 800dbf2:	b538      	push	{r3, r4, r5, lr}
 800dbf4:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800dbf6:	6800      	ldr	r0, [r0, #0]
 800dbf8:	3008      	adds	r0, #8
 800dbfa:	f000 f925 	bl	800de48 <lv_mem_alloc>
    if(n_new != NULL) {
 800dbfe:	4605      	mov	r5, r0
 800dc00:	b198      	cbz	r0, 800dc2a <lv_ll_ins_head+0x38>
        node_set_prev(ll_p, n_new, NULL);           /*No prev. before the new head*/
 800dc02:	4601      	mov	r1, r0
 800dc04:	2200      	movs	r2, #0
 800dc06:	4620      	mov	r0, r4
 800dc08:	f7ff ffe3 	bl	800dbd2 <node_set_prev.isra.2>
        node_set_next(ll_p, n_new, ll_p->head);     /*After new comes the old head*/
 800dc0c:	4629      	mov	r1, r5
 800dc0e:	6862      	ldr	r2, [r4, #4]
 800dc10:	4620      	mov	r0, r4
 800dc12:	f7ff ffd5 	bl	800dbc0 <node_set_next.isra.0>
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 800dc16:	6861      	ldr	r1, [r4, #4]
 800dc18:	b119      	cbz	r1, 800dc22 <lv_ll_ins_head+0x30>
            node_set_prev(ll_p, ll_p->head, n_new);
 800dc1a:	462a      	mov	r2, r5
 800dc1c:	4620      	mov	r0, r4
 800dc1e:	f7ff ffd8 	bl	800dbd2 <node_set_prev.isra.2>
        if(ll_p->tail == NULL) {/*If there is no tail (1. node) set the tail too*/
 800dc22:	68a3      	ldr	r3, [r4, #8]
        ll_p->head = n_new;         /*Set the new head in the dsc.*/
 800dc24:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) {/*If there is no tail (1. node) set the tail too*/
 800dc26:	b903      	cbnz	r3, 800dc2a <lv_ll_ins_head+0x38>
            ll_p->tail = n_new;
 800dc28:	60a5      	str	r5, [r4, #8]
}
 800dc2a:	4628      	mov	r0, r5
 800dc2c:	bd38      	pop	{r3, r4, r5, pc}

0800dc2e <lv_ll_ins_tail>:
{
 800dc2e:	b538      	push	{r3, r4, r5, lr}
 800dc30:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800dc32:	6800      	ldr	r0, [r0, #0]
 800dc34:	3008      	adds	r0, #8
 800dc36:	f000 f907 	bl	800de48 <lv_mem_alloc>
    if(n_new == NULL) return NULL;
 800dc3a:	4605      	mov	r5, r0
 800dc3c:	b198      	cbz	r0, 800dc66 <lv_ll_ins_tail+0x38>
        node_set_next(ll_p, n_new, NULL); /*No next after the new tail*/
 800dc3e:	4601      	mov	r1, r0
 800dc40:	2200      	movs	r2, #0
 800dc42:	4620      	mov	r0, r4
 800dc44:	f7ff ffbc 	bl	800dbc0 <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is tho old tail*/
 800dc48:	4629      	mov	r1, r5
 800dc4a:	68a2      	ldr	r2, [r4, #8]
 800dc4c:	4620      	mov	r0, r4
 800dc4e:	f7ff ffc0 	bl	800dbd2 <node_set_prev.isra.2>
        if(ll_p->tail != NULL) {    /*If there is old tail then the new comes after it*/
 800dc52:	68a1      	ldr	r1, [r4, #8]
 800dc54:	b119      	cbz	r1, 800dc5e <lv_ll_ins_tail+0x30>
            node_set_next(ll_p, ll_p->tail, n_new);
 800dc56:	462a      	mov	r2, r5
 800dc58:	4620      	mov	r0, r4
 800dc5a:	f7ff ffb1 	bl	800dbc0 <node_set_next.isra.0>
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 800dc5e:	6863      	ldr	r3, [r4, #4]
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 800dc60:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 800dc62:	b903      	cbnz	r3, 800dc66 <lv_ll_ins_tail+0x38>
            ll_p->head = n_new;
 800dc64:	6065      	str	r5, [r4, #4]
}
 800dc66:	4628      	mov	r0, r5
 800dc68:	bd38      	pop	{r3, r4, r5, pc}

0800dc6a <lv_ll_get_head>:
    if(ll_p != NULL)    {
 800dc6a:	b100      	cbz	r0, 800dc6e <lv_ll_get_head+0x4>
        head = ll_p->head;
 800dc6c:	6840      	ldr	r0, [r0, #4]
}
 800dc6e:	4770      	bx	lr

0800dc70 <lv_ll_get_tail>:
    if(ll_p != NULL)    {
 800dc70:	b100      	cbz	r0, 800dc74 <lv_ll_get_tail+0x4>
        tail = ll_p->tail;
 800dc72:	6880      	ldr	r0, [r0, #8]
}
 800dc74:	4770      	bx	lr

0800dc76 <lv_ll_get_next>:
    if(ll_p != NULL)    {
 800dc76:	b110      	cbz	r0, 800dc7e <lv_ll_get_next+0x8>
        memcpy(&next, n_act_d + LL_NEXT_P_OFFSET(ll_p), sizeof(void *));
 800dc78:	6803      	ldr	r3, [r0, #0]
 800dc7a:	4419      	add	r1, r3
 800dc7c:	6848      	ldr	r0, [r1, #4]
}
 800dc7e:	4770      	bx	lr

0800dc80 <lv_ll_get_prev>:
    if(ll_p != NULL) {
 800dc80:	b108      	cbz	r0, 800dc86 <lv_ll_get_prev+0x6>
        memcpy(&prev, n_act_d + LL_PREV_P_OFFSET(ll_p), sizeof(void *));
 800dc82:	6803      	ldr	r3, [r0, #0]
 800dc84:	58c8      	ldr	r0, [r1, r3]
}
 800dc86:	4770      	bx	lr

0800dc88 <lv_ll_ins_prev>:
{
 800dc88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc8a:	460c      	mov	r4, r1
    if(NULL == ll_p || NULL == n_act) return NULL;
 800dc8c:	4605      	mov	r5, r0
 800dc8e:	b340      	cbz	r0, 800dce2 <lv_ll_ins_prev+0x5a>
 800dc90:	b341      	cbz	r1, 800dce4 <lv_ll_ins_prev+0x5c>
    if(lv_ll_get_head(ll_p) == n_act) {
 800dc92:	6843      	ldr	r3, [r0, #4]
 800dc94:	4299      	cmp	r1, r3
 800dc96:	d103      	bne.n	800dca0 <lv_ll_ins_prev+0x18>
}
 800dc98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        n_new = lv_ll_ins_head(ll_p);
 800dc9c:	f7ff bfa9 	b.w	800dbf2 <lv_ll_ins_head>
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800dca0:	6800      	ldr	r0, [r0, #0]
 800dca2:	3008      	adds	r0, #8
 800dca4:	f000 f8d0 	bl	800de48 <lv_mem_alloc>
        if(n_new == NULL) return NULL;
 800dca8:	4606      	mov	r6, r0
 800dcaa:	b1c0      	cbz	r0, 800dcde <lv_ll_ins_prev+0x56>
        n_prev = lv_ll_get_prev(ll_p, n_act);
 800dcac:	4621      	mov	r1, r4
 800dcae:	4628      	mov	r0, r5
 800dcb0:	f7ff ffe6 	bl	800dc80 <lv_ll_get_prev>
 800dcb4:	4607      	mov	r7, r0
        node_set_next(ll_p, n_prev, n_new);
 800dcb6:	4601      	mov	r1, r0
 800dcb8:	4632      	mov	r2, r6
 800dcba:	4628      	mov	r0, r5
 800dcbc:	f7ff ff80 	bl	800dbc0 <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, n_prev);
 800dcc0:	463a      	mov	r2, r7
 800dcc2:	4631      	mov	r1, r6
 800dcc4:	4628      	mov	r0, r5
 800dcc6:	f7ff ff84 	bl	800dbd2 <node_set_prev.isra.2>
        node_set_prev(ll_p, n_act, n_new);
 800dcca:	4632      	mov	r2, r6
 800dccc:	4621      	mov	r1, r4
 800dcce:	4628      	mov	r0, r5
 800dcd0:	f7ff ff7f 	bl	800dbd2 <node_set_prev.isra.2>
        node_set_next(ll_p, n_new, n_act);
 800dcd4:	4622      	mov	r2, r4
 800dcd6:	4631      	mov	r1, r6
 800dcd8:	4628      	mov	r0, r5
 800dcda:	f7ff ff71 	bl	800dbc0 <node_set_next.isra.0>
        if(n_new == NULL) return NULL;
 800dcde:	4634      	mov	r4, r6
 800dce0:	e000      	b.n	800dce4 <lv_ll_ins_prev+0x5c>
    if(NULL == ll_p || NULL == n_act) return NULL;
 800dce2:	4604      	mov	r4, r0
}
 800dce4:	4620      	mov	r0, r4
 800dce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dce8 <lv_ll_rem>:
{
 800dce8:	b570      	push	{r4, r5, r6, lr}
 800dcea:	460a      	mov	r2, r1
    if(ll_p != NULL)    {
 800dcec:	4604      	mov	r4, r0
 800dcee:	b308      	cbz	r0, 800dd34 <lv_ll_rem+0x4c>
    if(lv_ll_get_head(ll_p) == node_p) {
 800dcf0:	6843      	ldr	r3, [r0, #4]
 800dcf2:	4299      	cmp	r1, r3
 800dcf4:	d10e      	bne.n	800dd14 <lv_ll_rem+0x2c>
        ll_p->head = lv_ll_get_next(ll_p, node_p);
 800dcf6:	4611      	mov	r1, r2
 800dcf8:	4620      	mov	r0, r4
 800dcfa:	f7ff ffbc 	bl	800dc76 <lv_ll_get_next>
 800dcfe:	4601      	mov	r1, r0
 800dd00:	6060      	str	r0, [r4, #4]
        if(ll_p->head == NULL) {
 800dd02:	b908      	cbnz	r0, 800dd08 <lv_ll_rem+0x20>
            ll_p->tail = NULL;
 800dd04:	60a0      	str	r0, [r4, #8]
 800dd06:	bd70      	pop	{r4, r5, r6, pc}
            node_set_prev(ll_p, ll_p->head, NULL);
 800dd08:	2200      	movs	r2, #0
        node_set_prev(ll_p, n_next, n_prev);
 800dd0a:	4620      	mov	r0, r4
}
 800dd0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        node_set_prev(ll_p, n_next, n_prev);
 800dd10:	f7ff bf5f 	b.w	800dbd2 <node_set_prev.isra.2>
    } else if(lv_ll_get_tail(ll_p) == node_p) {
 800dd14:	6883      	ldr	r3, [r0, #8]
 800dd16:	4299      	cmp	r1, r3
 800dd18:	d10e      	bne.n	800dd38 <lv_ll_rem+0x50>
        ll_p->tail = lv_ll_get_prev(ll_p, node_p);
 800dd1a:	f7ff ffb1 	bl	800dc80 <lv_ll_get_prev>
 800dd1e:	4601      	mov	r1, r0
 800dd20:	60a0      	str	r0, [r4, #8]
        if(ll_p->tail == NULL) {
 800dd22:	b908      	cbnz	r0, 800dd28 <lv_ll_rem+0x40>
            ll_p->head = NULL;
 800dd24:	6060      	str	r0, [r4, #4]
 800dd26:	bd70      	pop	{r4, r5, r6, pc}
            node_set_next(ll_p, ll_p->tail, NULL);
 800dd28:	4620      	mov	r0, r4
 800dd2a:	2200      	movs	r2, #0
}
 800dd2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            node_set_next(ll_p, ll_p->tail, NULL);
 800dd30:	f7ff bf46 	b.w	800dbc0 <node_set_next.isra.0>
    if(lv_ll_get_head(ll_p) == node_p) {
 800dd34:	2900      	cmp	r1, #0
 800dd36:	d0de      	beq.n	800dcf6 <lv_ll_rem+0xe>
        lv_ll_node_t * n_prev = lv_ll_get_prev(ll_p, node_p);
 800dd38:	4611      	mov	r1, r2
 800dd3a:	4620      	mov	r0, r4
 800dd3c:	f7ff ffa0 	bl	800dc80 <lv_ll_get_prev>
 800dd40:	4606      	mov	r6, r0
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);
 800dd42:	4611      	mov	r1, r2
 800dd44:	4620      	mov	r0, r4
 800dd46:	f7ff ff96 	bl	800dc76 <lv_ll_get_next>
 800dd4a:	4605      	mov	r5, r0
        node_set_next(ll_p, n_prev, n_next);
 800dd4c:	4602      	mov	r2, r0
 800dd4e:	4631      	mov	r1, r6
 800dd50:	4620      	mov	r0, r4
 800dd52:	f7ff ff35 	bl	800dbc0 <node_set_next.isra.0>
        node_set_prev(ll_p, n_next, n_prev);
 800dd56:	4632      	mov	r2, r6
 800dd58:	4629      	mov	r1, r5
 800dd5a:	e7d6      	b.n	800dd0a <lv_ll_rem+0x22>

0800dd5c <lv_ll_clear>:
{
 800dd5c:	b570      	push	{r4, r5, r6, lr}
    if(ll_p != NULL)    {
 800dd5e:	4605      	mov	r5, r0
 800dd60:	b108      	cbz	r0, 800dd66 <lv_ll_clear+0xa>
        head = ll_p->head;
 800dd62:	6844      	ldr	r4, [r0, #4]
    while(i != NULL) {
 800dd64:	b904      	cbnz	r4, 800dd68 <lv_ll_clear+0xc>
 800dd66:	bd70      	pop	{r4, r5, r6, pc}
        i_next = lv_ll_get_next(ll_p, i);
 800dd68:	4621      	mov	r1, r4
 800dd6a:	4628      	mov	r0, r5
 800dd6c:	f7ff ff83 	bl	800dc76 <lv_ll_get_next>
        lv_ll_rem(ll_p, i);
 800dd70:	4621      	mov	r1, r4
        i_next = lv_ll_get_next(ll_p, i);
 800dd72:	4606      	mov	r6, r0
        lv_ll_rem(ll_p, i);
 800dd74:	4628      	mov	r0, r5
 800dd76:	f7ff ffb7 	bl	800dce8 <lv_ll_rem>
        lv_mem_free(i);
 800dd7a:	4620      	mov	r0, r4
 800dd7c:	f000 f888 	bl	800de90 <lv_mem_free>
        i = i_next;
 800dd80:	4634      	mov	r4, r6
 800dd82:	e7ef      	b.n	800dd64 <lv_ll_clear+0x8>

0800dd84 <lv_ll_chg_list>:
{
 800dd84:	b538      	push	{r3, r4, r5, lr}
 800dd86:	460c      	mov	r4, r1
 800dd88:	4615      	mov	r5, r2
    lv_ll_rem(ll_ori_p, node);
 800dd8a:	4611      	mov	r1, r2
 800dd8c:	f7ff ffac 	bl	800dce8 <lv_ll_rem>
    node_set_prev(ll_new_p, node, NULL);
 800dd90:	2200      	movs	r2, #0
 800dd92:	4629      	mov	r1, r5
 800dd94:	4620      	mov	r0, r4
 800dd96:	f7ff ff1c 	bl	800dbd2 <node_set_prev.isra.2>
    node_set_next(ll_new_p, node, ll_new_p->head);
 800dd9a:	4629      	mov	r1, r5
 800dd9c:	6862      	ldr	r2, [r4, #4]
 800dd9e:	4620      	mov	r0, r4
 800dda0:	f7ff ff0e 	bl	800dbc0 <node_set_next.isra.0>
    if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
 800dda4:	6861      	ldr	r1, [r4, #4]
 800dda6:	b119      	cbz	r1, 800ddb0 <lv_ll_chg_list+0x2c>
        node_set_prev(ll_new_p, ll_new_p->head, node);
 800dda8:	462a      	mov	r2, r5
 800ddaa:	4620      	mov	r0, r4
 800ddac:	f7ff ff11 	bl	800dbd2 <node_set_prev.isra.2>
    if(ll_new_p->tail == NULL) {     /*If there is no tail (first node) set the tail too*/
 800ddb0:	68a3      	ldr	r3, [r4, #8]
    ll_new_p->head = node;        /*Set the new head in the dsc.*/
 800ddb2:	6065      	str	r5, [r4, #4]
    if(ll_new_p->tail == NULL) {     /*If there is no tail (first node) set the tail too*/
 800ddb4:	b903      	cbnz	r3, 800ddb8 <lv_ll_chg_list+0x34>
        ll_new_p->tail = node;
 800ddb6:	60a5      	str	r5, [r4, #8]
 800ddb8:	bd38      	pop	{r3, r4, r5, pc}
	...

0800ddbc <ent_get_next>:
 * Give the next entry after 'act_e'
 * @param act_e pointer to an entry
 * @return pointer to an entry after 'act_e'
 */
static lv_mem_ent_t * ent_get_next(lv_mem_ent_t * act_e)
{
 800ddbc:	4a07      	ldr	r2, [pc, #28]	; (800dddc <ent_get_next+0x20>)
    lv_mem_ent_t * next_e = NULL;

    if(act_e == NULL) { /*NULL means: get the first entry*/
 800ddbe:	b908      	cbnz	r0, 800ddc4 <ent_get_next+0x8>
        next_e = (lv_mem_ent_t *) work_mem;
 800ddc0:	6810      	ldr	r0, [r2, #0]
 800ddc2:	4770      	bx	lr
    } else { /*Get the next entry */
        uint8_t * data = &act_e->first_data;
 800ddc4:	1d03      	adds	r3, r0, #4
        next_e = (lv_mem_ent_t *)&data[act_e->header.d_size];
 800ddc6:	6800      	ldr	r0, [r0, #0]
 800ddc8:	eb03 0050 	add.w	r0, r3, r0, lsr #1

        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 800ddcc:	6813      	ldr	r3, [r2, #0]
 800ddce:	1d01      	adds	r1, r0, #4
 800ddd0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ddd4:	4299      	cmp	r1, r3
 800ddd6:	bf28      	it	cs
 800ddd8:	2000      	movcs	r0, #0
    }

    return next_e;
}
 800ddda:	4770      	bx	lr
 800dddc:	2000f3b4 	.word	0x2000f3b4

0800dde0 <ent_trunc>:
        size = size & (~0x7);
        size += 8;
    }
#else
    /*Round the size up to 4*/
    if(size & 0x3) {
 800dde0:	078b      	lsls	r3, r1, #30
        size += 4;
    }
#endif

    /*Don't let empty space only for a header without data*/
    if(e->header.d_size == size + sizeof(lv_mem_header_t)) {
 800dde2:	6803      	ldr	r3, [r0, #0]
        size = size & (~0x3);
 800dde4:	bf18      	it	ne
 800dde6:	f021 0103 	bicne.w	r1, r1, #3
    if(e->header.d_size == size + sizeof(lv_mem_header_t)) {
 800ddea:	f3c3 035e 	ubfx	r3, r3, #1, #31
        size += 4;
 800ddee:	bf18      	it	ne
 800ddf0:	3104      	addne	r1, #4
    if(e->header.d_size == size + sizeof(lv_mem_header_t)) {
 800ddf2:	1d0a      	adds	r2, r1, #4
 800ddf4:	4293      	cmp	r3, r2
{
 800ddf6:	b510      	push	{r4, lr}
    if(e->header.d_size == size + sizeof(lv_mem_header_t)) {
 800ddf8:	d011      	beq.n	800de1e <ent_trunc+0x3e>
        size = e->header.d_size;
    }

    /* Create the new entry after the current if there is space for it */
    if(e->header.d_size != size) {
 800ddfa:	4299      	cmp	r1, r3
 800ddfc:	d00a      	beq.n	800de14 <ent_trunc+0x34>
        uint8_t * e_data = &e->first_data;
 800ddfe:	1d02      	adds	r2, r0, #4
        lv_mem_ent_t * after_new_e = (lv_mem_ent_t *)&e_data[size];
        after_new_e->header.used = 0;
        after_new_e->header.d_size = e->header.d_size - size - sizeof(lv_mem_header_t);
 800de00:	3b04      	subs	r3, #4
        after_new_e->header.used = 0;
 800de02:	5c54      	ldrb	r4, [r2, r1]
        after_new_e->header.d_size = e->header.d_size - size - sizeof(lv_mem_header_t);
 800de04:	1a5b      	subs	r3, r3, r1
        after_new_e->header.used = 0;
 800de06:	f36f 0400 	bfc	r4, #0, #1
 800de0a:	5454      	strb	r4, [r2, r1]
        after_new_e->header.d_size = e->header.d_size - size - sizeof(lv_mem_header_t);
 800de0c:	5854      	ldr	r4, [r2, r1]
 800de0e:	f363 045f 	bfi	r4, r3, #1, #31
 800de12:	5054      	str	r4, [r2, r1]
    }

    /* Set the new size for the original entry */
    e->header.d_size = size;
 800de14:	6803      	ldr	r3, [r0, #0]
 800de16:	f361 035f 	bfi	r3, r1, #1, #31
 800de1a:	6003      	str	r3, [r0, #0]
 800de1c:	bd10      	pop	{r4, pc}
 800de1e:	4619      	mov	r1, r3
 800de20:	e7f8      	b.n	800de14 <ent_trunc+0x34>
	...

0800de24 <lv_mem_init>:
    work_mem = (uint8_t *) work_mem_int;
 800de24:	4b06      	ldr	r3, [pc, #24]	; (800de40 <lv_mem_init+0x1c>)
    full->header.d_size = LV_MEM_SIZE - sizeof(lv_mem_header_t);
 800de26:	f647 71fc 	movw	r1, #32764	; 0x7ffc
    work_mem = (uint8_t *) work_mem_int;
 800de2a:	4a06      	ldr	r2, [pc, #24]	; (800de44 <lv_mem_init+0x20>)
 800de2c:	6013      	str	r3, [r2, #0]
    full->header.used = 0;
 800de2e:	781a      	ldrb	r2, [r3, #0]
 800de30:	f36f 0200 	bfc	r2, #0, #1
 800de34:	701a      	strb	r2, [r3, #0]
    full->header.d_size = LV_MEM_SIZE - sizeof(lv_mem_header_t);
 800de36:	681a      	ldr	r2, [r3, #0]
 800de38:	f361 025f 	bfi	r2, r1, #1, #31
 800de3c:	601a      	str	r2, [r3, #0]
 800de3e:	4770      	bx	lr
 800de40:	2000f3b8 	.word	0x2000f3b8
 800de44:	2000f3b4 	.word	0x2000f3b4

0800de48 <lv_mem_alloc>:
{
 800de48:	b538      	push	{r3, r4, r5, lr}
    if(size == 0) {
 800de4a:	4605      	mov	r5, r0
 800de4c:	b1d8      	cbz	r0, 800de86 <lv_mem_alloc+0x3e>
    if(size & 0x3) {
 800de4e:	0782      	lsls	r2, r0, #30
    lv_mem_ent_t * e = NULL;
 800de50:	f04f 0400 	mov.w	r4, #0
        size = size & (~0x3);
 800de54:	bf1c      	itt	ne
 800de56:	f020 0503 	bicne.w	r5, r0, #3
        size += 4;
 800de5a:	3504      	addne	r5, #4
        e = ent_get_next(e);
 800de5c:	4620      	mov	r0, r4
 800de5e:	f7ff ffad 	bl	800ddbc <ent_get_next>
        if(e != NULL) {
 800de62:	4604      	mov	r4, r0
 800de64:	b188      	cbz	r0, 800de8a <lv_mem_alloc+0x42>
    if(e->header.used == 0 && e->header.d_size >= size) {
 800de66:	7803      	ldrb	r3, [r0, #0]
 800de68:	07db      	lsls	r3, r3, #31
 800de6a:	d4f7      	bmi.n	800de5c <lv_mem_alloc+0x14>
 800de6c:	6803      	ldr	r3, [r0, #0]
 800de6e:	ebb5 0f53 	cmp.w	r5, r3, lsr #1
 800de72:	d8f3      	bhi.n	800de5c <lv_mem_alloc+0x14>
        ent_trunc(e, size),
 800de74:	4629      	mov	r1, r5
 800de76:	f7ff ffb3 	bl	800dde0 <ent_trunc>
                  e->header.used = 1;
 800de7a:	7803      	ldrb	r3, [r0, #0]
 800de7c:	f043 0301 	orr.w	r3, r3, #1
 800de80:	f800 3b04 	strb.w	r3, [r0], #4
 800de84:	bd38      	pop	{r3, r4, r5, pc}
        return &zero_mem;
 800de86:	4801      	ldr	r0, [pc, #4]	; (800de8c <lv_mem_alloc+0x44>)
 800de88:	bd38      	pop	{r3, r4, r5, pc}
}
 800de8a:	bd38      	pop	{r3, r4, r5, pc}
 800de8c:	200173b8 	.word	0x200173b8

0800de90 <lv_mem_free>:
    if(data == &zero_mem) return;
 800de90:	4b0f      	ldr	r3, [pc, #60]	; (800ded0 <lv_mem_free+0x40>)
 800de92:	4298      	cmp	r0, r3
{
 800de94:	b510      	push	{r4, lr}
 800de96:	4604      	mov	r4, r0
    if(data == &zero_mem) return;
 800de98:	d009      	beq.n	800deae <lv_mem_free+0x1e>
    if(data == NULL) return;
 800de9a:	b140      	cbz	r0, 800deae <lv_mem_free+0x1e>
    e->header.used = 0;
 800de9c:	f810 3c04 	ldrb.w	r3, [r0, #-4]
 800dea0:	f36f 0300 	bfc	r3, #0, #1
 800dea4:	f800 3d04 	strb.w	r3, [r0, #-4]!
        e_next = ent_get_next(e_next);
 800dea8:	f7ff ff88 	bl	800ddbc <ent_get_next>
    while(e_next != NULL) {
 800deac:	b900      	cbnz	r0, 800deb0 <lv_mem_free+0x20>
 800deae:	bd10      	pop	{r4, pc}
        if(e_next->header.used == 0) {
 800deb0:	7803      	ldrb	r3, [r0, #0]
 800deb2:	07db      	lsls	r3, r3, #31
 800deb4:	d4fb      	bmi.n	800deae <lv_mem_free+0x1e>
            e->header.d_size += e_next->header.d_size + sizeof(e->header);
 800deb6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800deba:	6801      	ldr	r1, [r0, #0]
 800debc:	f3c3 025e 	ubfx	r2, r3, #1, #31
 800dec0:	3204      	adds	r2, #4
 800dec2:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 800dec6:	f362 035f 	bfi	r3, r2, #1, #31
 800deca:	f844 3c04 	str.w	r3, [r4, #-4]
 800dece:	e7eb      	b.n	800dea8 <lv_mem_free+0x18>
 800ded0:	200173b8 	.word	0x200173b8

0800ded4 <lv_mem_monitor>:
{
 800ded4:	b510      	push	{r4, lr}
    memset(mon_p, 0, sizeof(lv_mem_monitor_t));
 800ded6:	2218      	movs	r2, #24
 800ded8:	2100      	movs	r1, #0
{
 800deda:	4604      	mov	r4, r0
    memset(mon_p, 0, sizeof(lv_mem_monitor_t));
 800dedc:	f007 fe29 	bl	8015b32 <memset>
        next_e = (lv_mem_ent_t *) work_mem;
 800dee0:	4b15      	ldr	r3, [pc, #84]	; (800df38 <lv_mem_monitor+0x64>)
 800dee2:	6818      	ldr	r0, [r3, #0]
    while(e != NULL)  {
 800dee4:	b988      	cbnz	r0, 800df0a <lv_mem_monitor+0x36>
    mon_p->total_size = LV_MEM_SIZE;
 800dee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    mon_p->used_pct = 100 - (100U * mon_p->free_size) / mon_p->total_size;
 800deea:	68a1      	ldr	r1, [r4, #8]
    mon_p->total_size = LV_MEM_SIZE;
 800deec:	6023      	str	r3, [r4, #0]
    mon_p->used_pct = 100 - (100U * mon_p->free_size) / mon_p->total_size;
 800deee:	2364      	movs	r3, #100	; 0x64
 800def0:	fb03 f201 	mul.w	r2, r3, r1
 800def4:	0bd2      	lsrs	r2, r2, #15
 800def6:	1a9a      	subs	r2, r3, r2
 800def8:	7522      	strb	r2, [r4, #20]
    mon_p->frag_pct = (uint32_t)mon_p->free_biggest_size * 100U / mon_p->free_size;
 800defa:	68e2      	ldr	r2, [r4, #12]
 800defc:	4353      	muls	r3, r2
 800defe:	fbb3 f3f1 	udiv	r3, r3, r1
    mon_p->frag_pct = 100 - mon_p->frag_pct;
 800df02:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800df06:	7563      	strb	r3, [r4, #21]
 800df08:	bd10      	pop	{r4, pc}
        if(e->header.used == 0) {
 800df0a:	7803      	ldrb	r3, [r0, #0]
 800df0c:	07db      	lsls	r3, r3, #31
 800df0e:	d40f      	bmi.n	800df30 <lv_mem_monitor+0x5c>
            mon_p->free_cnt++;
 800df10:	6863      	ldr	r3, [r4, #4]
            mon_p->free_size += e->header.d_size;
 800df12:	68a2      	ldr	r2, [r4, #8]
            mon_p->free_cnt++;
 800df14:	3301      	adds	r3, #1
 800df16:	6063      	str	r3, [r4, #4]
            mon_p->free_size += e->header.d_size;
 800df18:	6803      	ldr	r3, [r0, #0]
 800df1a:	f3c3 035e 	ubfx	r3, r3, #1, #31
 800df1e:	441a      	add	r2, r3
 800df20:	60a2      	str	r2, [r4, #8]
            if(e->header.d_size > mon_p->free_biggest_size) {
 800df22:	68e2      	ldr	r2, [r4, #12]
 800df24:	4293      	cmp	r3, r2
 800df26:	d900      	bls.n	800df2a <lv_mem_monitor+0x56>
                mon_p->free_biggest_size = e->header.d_size;
 800df28:	60e3      	str	r3, [r4, #12]
        e = ent_get_next(e);
 800df2a:	f7ff ff47 	bl	800ddbc <ent_get_next>
 800df2e:	e7d9      	b.n	800dee4 <lv_mem_monitor+0x10>
            mon_p->used_cnt++;
 800df30:	6923      	ldr	r3, [r4, #16]
 800df32:	3301      	adds	r3, #1
 800df34:	6123      	str	r3, [r4, #16]
 800df36:	e7f8      	b.n	800df2a <lv_mem_monitor+0x56>
 800df38:	2000f3b4 	.word	0x2000f3b4

0800df3c <lv_mem_get_size>:
    if(data == NULL) return 0;
 800df3c:	b140      	cbz	r0, 800df50 <lv_mem_get_size+0x14>
    if(data == &zero_mem) return 0;
 800df3e:	4b05      	ldr	r3, [pc, #20]	; (800df54 <lv_mem_get_size+0x18>)
 800df40:	4298      	cmp	r0, r3
 800df42:	d004      	beq.n	800df4e <lv_mem_get_size+0x12>
    return e->header.d_size;
 800df44:	f850 0c04 	ldr.w	r0, [r0, #-4]
 800df48:	f3c0 005e 	ubfx	r0, r0, #1, #31
 800df4c:	4770      	bx	lr
    if(data == NULL) return 0;
 800df4e:	2000      	movs	r0, #0
}
 800df50:	4770      	bx	lr
 800df52:	bf00      	nop
 800df54:	200173b8 	.word	0x200173b8

0800df58 <lv_mem_realloc>:
{
 800df58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df5a:	460d      	mov	r5, r1
    if(data_p != NULL) {
 800df5c:	4604      	mov	r4, r0
 800df5e:	b128      	cbz	r0, 800df6c <lv_mem_realloc+0x14>
        if(e->header.used == 0) {
 800df60:	f810 3c04 	ldrb.w	r3, [r0, #-4]
            data_p = NULL;
 800df64:	f013 0f01 	tst.w	r3, #1
 800df68:	bf08      	it	eq
 800df6a:	2400      	moveq	r4, #0
    uint32_t old_size = lv_mem_get_size(data_p);
 800df6c:	4620      	mov	r0, r4
 800df6e:	f7ff ffe5 	bl	800df3c <lv_mem_get_size>
    if(old_size == new_size) return data_p;     /*Also avoid reallocating the same memory*/
 800df72:	42a8      	cmp	r0, r5
    uint32_t old_size = lv_mem_get_size(data_p);
 800df74:	4607      	mov	r7, r0
    if(old_size == new_size) return data_p;     /*Also avoid reallocating the same memory*/
 800df76:	d004      	beq.n	800df82 <lv_mem_realloc+0x2a>
    if(new_size < old_size) {
 800df78:	d905      	bls.n	800df86 <lv_mem_realloc+0x2e>
        ent_trunc(e, new_size);
 800df7a:	4629      	mov	r1, r5
 800df7c:	1f20      	subs	r0, r4, #4
 800df7e:	f7ff ff2f 	bl	800dde0 <ent_trunc>
 800df82:	4626      	mov	r6, r4
 800df84:	e010      	b.n	800dfa8 <lv_mem_realloc+0x50>
    new_p = lv_mem_alloc(new_size);
 800df86:	4628      	mov	r0, r5
 800df88:	f7ff ff5e 	bl	800de48 <lv_mem_alloc>
    if(new_p != NULL && data_p != NULL) {
 800df8c:	4606      	mov	r6, r0
 800df8e:	b158      	cbz	r0, 800dfa8 <lv_mem_realloc+0x50>
 800df90:	b154      	cbz	r4, 800dfa8 <lv_mem_realloc+0x50>
        if(old_size != 0) {
 800df92:	b14f      	cbz	r7, 800dfa8 <lv_mem_realloc+0x50>
            memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
 800df94:	42af      	cmp	r7, r5
 800df96:	463a      	mov	r2, r7
 800df98:	4621      	mov	r1, r4
 800df9a:	bf28      	it	cs
 800df9c:	462a      	movcs	r2, r5
 800df9e:	f007 fdbd 	bl	8015b1c <memcpy>
            lv_mem_free(data_p);
 800dfa2:	4620      	mov	r0, r4
 800dfa4:	f7ff ff74 	bl	800de90 <lv_mem_free>
}
 800dfa8:	4630      	mov	r0, r6
 800dfaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dfac <lv_task_init>:

/**
 * Init the lv_task module
 */
void lv_task_init(void)
{
 800dfac:	b508      	push	{r3, lr}
    lv_ll_init(&lv_task_ll, sizeof(lv_task_t));
 800dfae:	2114      	movs	r1, #20
 800dfb0:	4803      	ldr	r0, [pc, #12]	; (800dfc0 <lv_task_init+0x14>)
 800dfb2:	f7ff fe14 	bl	800dbde <lv_ll_init>
 * Enable or disable the whole lv_task handling
 * @param en: true: lv_task handling is running, false: lv_task handling is suspended
 */
void lv_task_enable(bool en)
{
    lv_task_run = en;
 800dfb6:	2201      	movs	r2, #1
 800dfb8:	4b02      	ldr	r3, [pc, #8]	; (800dfc4 <lv_task_init+0x18>)
 800dfba:	701a      	strb	r2, [r3, #0]
 800dfbc:	bd08      	pop	{r3, pc}
 800dfbe:	bf00      	nop
 800dfc0:	200173cc 	.word	0x200173cc
 800dfc4:	200173d8 	.word	0x200173d8

0800dfc8 <lv_task_create>:
{
 800dfc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfcc:	4606      	mov	r6, r0
    tmp = lv_ll_get_head(&lv_task_ll);
 800dfce:	481b      	ldr	r0, [pc, #108]	; (800e03c <lv_task_create+0x74>)
{
 800dfd0:	4688      	mov	r8, r1
 800dfd2:	4615      	mov	r5, r2
 800dfd4:	461f      	mov	r7, r3
    tmp = lv_ll_get_head(&lv_task_ll);
 800dfd6:	f7ff fe48 	bl	800dc6a <lv_ll_get_head>
    if(NULL == tmp) {                               /*First task*/
 800dfda:	4601      	mov	r1, r0
 800dfdc:	b928      	cbnz	r0, 800dfea <lv_task_create+0x22>
        new_lv_task = lv_ll_ins_head(&lv_task_ll);
 800dfde:	4817      	ldr	r0, [pc, #92]	; (800e03c <lv_task_create+0x74>)
 800dfe0:	f7ff fe07 	bl	800dbf2 <lv_ll_ins_head>
        lv_mem_assert(new_lv_task);
 800dfe4:	4604      	mov	r4, r0
 800dfe6:	b9b8      	cbnz	r0, 800e018 <lv_task_create+0x50>
 800dfe8:	e7fe      	b.n	800dfe8 <lv_task_create+0x20>
            tmp = lv_ll_get_next(&lv_task_ll, tmp);
 800dfea:	4c14      	ldr	r4, [pc, #80]	; (800e03c <lv_task_create+0x74>)
            if(tmp->prio <= prio) {
 800dfec:	7c0b      	ldrb	r3, [r1, #16]
 800dfee:	f003 0307 	and.w	r3, r3, #7
 800dff2:	42ab      	cmp	r3, r5
 800dff4:	dc05      	bgt.n	800e002 <lv_task_create+0x3a>
                new_lv_task = lv_ll_ins_prev(&lv_task_ll, tmp);
 800dff6:	4811      	ldr	r0, [pc, #68]	; (800e03c <lv_task_create+0x74>)
 800dff8:	f7ff fe46 	bl	800dc88 <lv_ll_ins_prev>
                lv_mem_assert(new_lv_task);
 800dffc:	4604      	mov	r4, r0
 800dffe:	b958      	cbnz	r0, 800e018 <lv_task_create+0x50>
 800e000:	e7fe      	b.n	800e000 <lv_task_create+0x38>
            tmp = lv_ll_get_next(&lv_task_ll, tmp);
 800e002:	4620      	mov	r0, r4
 800e004:	f7ff fe37 	bl	800dc76 <lv_ll_get_next>
        } while(tmp != NULL);
 800e008:	4601      	mov	r1, r0
 800e00a:	2800      	cmp	r0, #0
 800e00c:	d1ee      	bne.n	800dfec <lv_task_create+0x24>
            new_lv_task = lv_ll_ins_tail(&lv_task_ll);
 800e00e:	480b      	ldr	r0, [pc, #44]	; (800e03c <lv_task_create+0x74>)
 800e010:	f7ff fe0d 	bl	800dc2e <lv_ll_ins_tail>
            lv_mem_assert(new_lv_task);
 800e014:	4604      	mov	r4, r0
 800e016:	b178      	cbz	r0, 800e038 <lv_task_create+0x70>
    new_lv_task->prio = prio;
 800e018:	7c23      	ldrb	r3, [r4, #16]
    new_lv_task->period = period;
 800e01a:	f8c4 8000 	str.w	r8, [r4]
    new_lv_task->prio = prio;
 800e01e:	f365 0302 	bfi	r3, r5, #0, #3
    new_lv_task->task = task;
 800e022:	60a6      	str	r6, [r4, #8]
    new_lv_task->param = param;
 800e024:	60e7      	str	r7, [r4, #12]
    new_lv_task->once = 0;
 800e026:	f36f 03c3 	bfc	r3, #3, #1
 800e02a:	7423      	strb	r3, [r4, #16]
    new_lv_task->last_run = lv_tick_get();
 800e02c:	f7ff fa70 	bl	800d510 <lv_tick_get>
 800e030:	6060      	str	r0, [r4, #4]
}
 800e032:	4620      	mov	r0, r4
 800e034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e038:	e7fe      	b.n	800e038 <lv_task_create+0x70>
 800e03a:	bf00      	nop
 800e03c:	200173cc 	.word	0x200173cc

0800e040 <lv_task_del>:
{
 800e040:	b510      	push	{r4, lr}
 800e042:	4604      	mov	r4, r0
    lv_ll_rem(&lv_task_ll, lv_task_p);
 800e044:	4601      	mov	r1, r0
 800e046:	4804      	ldr	r0, [pc, #16]	; (800e058 <lv_task_del+0x18>)
 800e048:	f7ff fe4e 	bl	800dce8 <lv_ll_rem>
    lv_mem_free(lv_task_p);
 800e04c:	4620      	mov	r0, r4
}
 800e04e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_mem_free(lv_task_p);
 800e052:	f7ff bf1d 	b.w	800de90 <lv_mem_free>
 800e056:	bf00      	nop
 800e058:	200173cc 	.word	0x200173cc

0800e05c <lv_task_exec>:
 * Execute task if its the priority is appropriate
 * @param lv_task_p pointer to lv_task
 * @return true: execute, false: not executed
 */
static bool lv_task_exec(lv_task_t * lv_task_p)
{
 800e05c:	b510      	push	{r4, lr}
 800e05e:	4604      	mov	r4, r0
    bool exec = false;

    /*Execute if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(lv_task_p->last_run);
 800e060:	6840      	ldr	r0, [r0, #4]
 800e062:	f7ff fa63 	bl	800d52c <lv_tick_elaps>
    if(elp >= lv_task_p->period) {
 800e066:	6823      	ldr	r3, [r4, #0]
 800e068:	4298      	cmp	r0, r3
 800e06a:	d30d      	bcc.n	800e088 <lv_task_exec+0x2c>
        lv_task_p->last_run = lv_tick_get();
 800e06c:	f7ff fa50 	bl	800d510 <lv_tick_get>
        lv_task_p->task(lv_task_p->param);
 800e070:	68a3      	ldr	r3, [r4, #8]
        lv_task_p->last_run = lv_tick_get();
 800e072:	6060      	str	r0, [r4, #4]
        lv_task_p->task(lv_task_p->param);
 800e074:	68e0      	ldr	r0, [r4, #12]
 800e076:	4798      	blx	r3

        /*Delete if it was a one shot lv_task*/
        if(lv_task_p->once != 0) lv_task_del(lv_task_p);
 800e078:	7c23      	ldrb	r3, [r4, #16]
 800e07a:	071b      	lsls	r3, r3, #28
 800e07c:	d502      	bpl.n	800e084 <lv_task_exec+0x28>
 800e07e:	4620      	mov	r0, r4
 800e080:	f7ff ffde 	bl	800e040 <lv_task_del>
 800e084:	2001      	movs	r0, #1

        exec = true;
    }

    return exec;
}
 800e086:	bd10      	pop	{r4, pc}
    bool exec = false;
 800e088:	2000      	movs	r0, #0
 800e08a:	bd10      	pop	{r4, pc}

0800e08c <lv_task_handler>:
{
 800e08c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(task_handler_mutex) return;
 800e090:	4d33      	ldr	r5, [pc, #204]	; (800e160 <lv_task_handler+0xd4>)
 800e092:	782e      	ldrb	r6, [r5, #0]
 800e094:	2e00      	cmp	r6, #0
 800e096:	d160      	bne.n	800e15a <lv_task_handler+0xce>
    task_handler_mutex = true;
 800e098:	2301      	movs	r3, #1
 800e09a:	702b      	strb	r3, [r5, #0]
    if(lv_task_run == false) return;
 800e09c:	4b31      	ldr	r3, [pc, #196]	; (800e164 <lv_task_handler+0xd8>)
 800e09e:	781b      	ldrb	r3, [r3, #0]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d05a      	beq.n	800e15a <lv_task_handler+0xce>
    handler_start = lv_tick_get();
 800e0a4:	4f30      	ldr	r7, [pc, #192]	; (800e168 <lv_task_handler+0xdc>)
 800e0a6:	f7ff fa33 	bl	800d510 <lv_tick_get>
        lv_task_t * act = lv_ll_get_head(&lv_task_ll);
 800e0aa:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 800e178 <lv_task_handler+0xec>
    handler_start = lv_tick_get();
 800e0ae:	6038      	str	r0, [r7, #0]
        lv_task_t * act = lv_ll_get_head(&lv_task_ll);
 800e0b0:	4640      	mov	r0, r8
 800e0b2:	f7ff fdda 	bl	800dc6a <lv_ll_get_head>
 800e0b6:	4604      	mov	r4, r0
        while(act) {
 800e0b8:	bb34      	cbnz	r4, 800e108 <lv_task_handler+0x7c>
    busy_time += lv_tick_elaps(handler_start);
 800e0ba:	4c2c      	ldr	r4, [pc, #176]	; (800e16c <lv_task_handler+0xe0>)
 800e0bc:	6838      	ldr	r0, [r7, #0]
 800e0be:	f7ff fa35 	bl	800d52c <lv_tick_elaps>
 800e0c2:	6823      	ldr	r3, [r4, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 800e0c4:	4e2a      	ldr	r6, [pc, #168]	; (800e170 <lv_task_handler+0xe4>)
    busy_time += lv_tick_elaps(handler_start);
 800e0c6:	4418      	add	r0, r3
 800e0c8:	6020      	str	r0, [r4, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 800e0ca:	6830      	ldr	r0, [r6, #0]
 800e0cc:	f7ff fa2e 	bl	800d52c <lv_tick_elaps>
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 800e0d0:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800e0d4:	d314      	bcc.n	800e100 <lv_task_handler+0x74>
        idle_last = (uint32_t)((uint32_t)busy_time * 100) / IDLE_MEAS_PERIOD;   /*Calculate the busy percentage*/
 800e0d6:	6822      	ldr	r2, [r4, #0]
 800e0d8:	2364      	movs	r3, #100	; 0x64
 800e0da:	4353      	muls	r3, r2
 800e0dc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800e0e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800e0e4:	b2db      	uxtb	r3, r3
        idle_last = idle_last > 100 ? 0 : 100 - idle_last;                      /*But we need idle time*/
 800e0e6:	4a23      	ldr	r2, [pc, #140]	; (800e174 <lv_task_handler+0xe8>)
 800e0e8:	2b64      	cmp	r3, #100	; 0x64
 800e0ea:	bf96      	itet	ls
 800e0ec:	f1c3 0364 	rsbls	r3, r3, #100	; 0x64
 800e0f0:	2300      	movhi	r3, #0
 800e0f2:	b2db      	uxtbls	r3, r3
 800e0f4:	7013      	strb	r3, [r2, #0]
        busy_time = 0;
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	6023      	str	r3, [r4, #0]
        idle_period_start = lv_tick_get();
 800e0fa:	f7ff fa09 	bl	800d510 <lv_tick_get>
 800e0fe:	6030      	str	r0, [r6, #0]
    task_handler_mutex = false;     /*Release the mutex*/
 800e100:	2300      	movs	r3, #0
 800e102:	702b      	strb	r3, [r5, #0]
 800e104:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            next = lv_ll_get_next(&lv_task_ll, act);
 800e108:	4621      	mov	r1, r4
 800e10a:	4640      	mov	r0, r8
 800e10c:	f7ff fdb3 	bl	800dc76 <lv_ll_get_next>
            if(act->prio == LV_TASK_PRIO_OFF) {
 800e110:	7c23      	ldrb	r3, [r4, #16]
            next = lv_ll_get_next(&lv_task_ll, act);
 800e112:	4681      	mov	r9, r0
            if(act->prio == LV_TASK_PRIO_OFF) {
 800e114:	f013 0207 	ands.w	r2, r3, #7
 800e118:	d0cf      	beq.n	800e0ba <lv_task_handler+0x2e>
            if(act == task_interrupter) {
 800e11a:	42a6      	cmp	r6, r4
 800e11c:	d102      	bne.n	800e124 <lv_task_handler+0x98>
                task_interrupter = NULL;     /*From this point only task after the interrupter comes, so the interrupter is not interesting anymore*/
 800e11e:	2600      	movs	r6, #0
 800e120:	464c      	mov	r4, r9
 800e122:	e7c9      	b.n	800e0b8 <lv_task_handler+0x2c>
            if(act->prio == LV_TASK_PRIO_HIGHEST) {
 800e124:	2a05      	cmp	r2, #5
 800e126:	d103      	bne.n	800e130 <lv_task_handler+0xa4>
                lv_task_exec(act);
 800e128:	4620      	mov	r0, r4
 800e12a:	f7ff ff97 	bl	800e05c <lv_task_exec>
 800e12e:	e7f7      	b.n	800e120 <lv_task_handler+0x94>
            else if(task_interrupter) {
 800e130:	b16e      	cbz	r6, 800e14e <lv_task_handler+0xc2>
                if(act->prio > task_interrupter->prio) {
 800e132:	7c32      	ldrb	r2, [r6, #16]
 800e134:	f003 0307 	and.w	r3, r3, #7
 800e138:	f002 0207 	and.w	r2, r2, #7
 800e13c:	4293      	cmp	r3, r2
 800e13e:	ddef      	ble.n	800e120 <lv_task_handler+0x94>
                    if(lv_task_exec(act)) {
 800e140:	4620      	mov	r0, r4
 800e142:	f7ff ff8b 	bl	800e05c <lv_task_exec>
 800e146:	2800      	cmp	r0, #0
 800e148:	d0ea      	beq.n	800e120 <lv_task_handler+0x94>
{
 800e14a:	4626      	mov	r6, r4
 800e14c:	e7b0      	b.n	800e0b0 <lv_task_handler+0x24>
                if(lv_task_exec(act)) {
 800e14e:	4620      	mov	r0, r4
 800e150:	f7ff ff84 	bl	800e05c <lv_task_exec>
 800e154:	2800      	cmp	r0, #0
 800e156:	d0e2      	beq.n	800e11e <lv_task_handler+0x92>
 800e158:	e7f7      	b.n	800e14a <lv_task_handler+0xbe>
 800e15a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e15e:	bf00      	nop
 800e160:	200173d9 	.word	0x200173d9
 800e164:	200173d8 	.word	0x200173d8
 800e168:	200173c0 	.word	0x200173c0
 800e16c:	200173bc 	.word	0x200173bc
 800e170:	200173c8 	.word	0x200173c8
 800e174:	200173c4 	.word	0x200173c4
 800e178:	200173cc 	.word	0x200173cc

0800e17c <lv_task_ready>:
{
 800e17c:	b510      	push	{r4, lr}
 800e17e:	4604      	mov	r4, r0
    lv_task_p->last_run = lv_tick_get() - lv_task_p->period - 1;
 800e180:	f7ff f9c6 	bl	800d510 <lv_tick_get>
 800e184:	6823      	ldr	r3, [r4, #0]
 800e186:	43db      	mvns	r3, r3
 800e188:	4403      	add	r3, r0
 800e18a:	6063      	str	r3, [r4, #4]
 800e18c:	bd10      	pop	{r4, pc}

0800e18e <lv_txt_utf8_size>:
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4). O on invalid code
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
    if((str[0] & 0x80) == 0) return 1;
 800e18e:	7803      	ldrb	r3, [r0, #0]
 800e190:	061a      	lsls	r2, r3, #24
 800e192:	d50e      	bpl.n	800e1b2 <lv_txt_utf8_size+0x24>
    else if((str[0] & 0xE0) == 0xC0) return 2;
 800e194:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
 800e198:	2ac0      	cmp	r2, #192	; 0xc0
 800e19a:	d00c      	beq.n	800e1b6 <lv_txt_utf8_size+0x28>
    else if((str[0] & 0xF0) == 0xE0) return 3;
 800e19c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800e1a0:	2ae0      	cmp	r2, #224	; 0xe0
 800e1a2:	d00a      	beq.n	800e1ba <lv_txt_utf8_size+0x2c>
    else if((str[0] & 0xF8) == 0xF0) return 4;
 800e1a4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800e1a8:	2bf0      	cmp	r3, #240	; 0xf0
    return 0;
 800e1aa:	bf0c      	ite	eq
 800e1ac:	2004      	moveq	r0, #4
 800e1ae:	2000      	movne	r0, #0
 800e1b0:	4770      	bx	lr
    if((str[0] & 0x80) == 0) return 1;
 800e1b2:	2001      	movs	r0, #1
 800e1b4:	4770      	bx	lr
    else if((str[0] & 0xE0) == 0xC0) return 2;
 800e1b6:	2002      	movs	r0, #2
 800e1b8:	4770      	bx	lr
    else if((str[0] & 0xF0) == 0xE0) return 3;
 800e1ba:	2003      	movs	r0, #3
}
 800e1bc:	4770      	bx	lr

0800e1be <lv_txt_utf8_next>:
     * */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 800e1be:	2300      	movs	r3, #0
{
 800e1c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t i_tmp = 0;
 800e1c2:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
 800e1c4:	b901      	cbnz	r1, 800e1c8 <lv_txt_utf8_next+0xa>
 800e1c6:	a901      	add	r1, sp, #4

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
 800e1c8:	680a      	ldr	r2, [r1, #0]
 800e1ca:	5c83      	ldrb	r3, [r0, r2]
 800e1cc:	1c54      	adds	r4, r2, #1
 800e1ce:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e1d2:	d103      	bne.n	800e1dc <lv_txt_utf8_next+0x1e>
        result = txt[*i];
 800e1d4:	4618      	mov	r0, r3
        (*i)++;
 800e1d6:	600c      	str	r4, [r1, #0]
        } else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
 800e1d8:	b002      	add	sp, #8
 800e1da:	bd70      	pop	{r4, r5, r6, pc}
        if((txt[*i] & 0xE0) == 0xC0) {
 800e1dc:	f003 05e0 	and.w	r5, r3, #224	; 0xe0
 800e1e0:	2dc0      	cmp	r5, #192	; 0xc0
 800e1e2:	d110      	bne.n	800e206 <lv_txt_utf8_next+0x48>
            (*i)++;
 800e1e4:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0;  /*Invalid UTF-8 code*/
 800e1e6:	5d00      	ldrb	r0, [r0, r4]
 800e1e8:	f000 04c0 	and.w	r4, r0, #192	; 0xc0
 800e1ec:	2c80      	cmp	r4, #128	; 0x80
 800e1ee:	d001      	beq.n	800e1f4 <lv_txt_utf8_next+0x36>
    uint32_t result = 0;
 800e1f0:	2000      	movs	r0, #0
 800e1f2:	e7f1      	b.n	800e1d8 <lv_txt_utf8_next+0x1a>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 800e1f4:	019b      	lsls	r3, r3, #6
            result += (txt[*i] & 0x3F);
 800e1f6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            (*i)++;
 800e1fa:	3202      	adds	r2, #2
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 800e1fc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
            result += (txt[*i] & 0x3F);
 800e200:	4418      	add	r0, r3
            (*i)++;
 800e202:	600a      	str	r2, [r1, #0]
 800e204:	e7e8      	b.n	800e1d8 <lv_txt_utf8_next+0x1a>
        else if((txt[*i] & 0xF0) == 0xE0) {
 800e206:	f003 05f0 	and.w	r5, r3, #240	; 0xf0
 800e20a:	2de0      	cmp	r5, #224	; 0xe0
 800e20c:	d117      	bne.n	800e23e <lv_txt_utf8_next+0x80>
            (*i)++;
 800e20e:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0;  /*Invalid UTF-8 code*/
 800e210:	5d04      	ldrb	r4, [r0, r4]
 800e212:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
 800e216:	2d80      	cmp	r5, #128	; 0x80
 800e218:	d1ea      	bne.n	800e1f0 <lv_txt_utf8_next+0x32>
            (*i)++;
 800e21a:	1c95      	adds	r5, r2, #2
 800e21c:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0;  /*Invalid UTF-8 code*/
 800e21e:	5d45      	ldrb	r5, [r0, r5]
 800e220:	f005 00c0 	and.w	r0, r5, #192	; 0xc0
 800e224:	2880      	cmp	r0, #128	; 0x80
 800e226:	d1e3      	bne.n	800e1f0 <lv_txt_utf8_next+0x32>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 800e228:	0318      	lsls	r0, r3, #12
            result += (txt[*i] & 0x3F);
 800e22a:	f005 053f 	and.w	r5, r5, #63	; 0x3f
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 800e22e:	01a3      	lsls	r3, r4, #6
            (*i)++;
 800e230:	3203      	adds	r2, #3
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 800e232:	b280      	uxth	r0, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 800e234:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 800e238:	4428      	add	r0, r5
            result += (txt[*i] & 0x3F);
 800e23a:	4418      	add	r0, r3
 800e23c:	e7e1      	b.n	800e202 <lv_txt_utf8_next+0x44>
        else if((txt[*i] & 0xF8) == 0xF0) {
 800e23e:	f003 05f8 	and.w	r5, r3, #248	; 0xf8
            (*i)++;
 800e242:	600c      	str	r4, [r1, #0]
        else if((txt[*i] & 0xF8) == 0xF0) {
 800e244:	2df0      	cmp	r5, #240	; 0xf0
 800e246:	d1d3      	bne.n	800e1f0 <lv_txt_utf8_next+0x32>
            if((txt[*i] & 0xC0) != 0x80) return 0;  /*Invalid UTF-8 code*/
 800e248:	5d04      	ldrb	r4, [r0, r4]
 800e24a:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
 800e24e:	2d80      	cmp	r5, #128	; 0x80
 800e250:	d1ce      	bne.n	800e1f0 <lv_txt_utf8_next+0x32>
            (*i)++;
 800e252:	1c95      	adds	r5, r2, #2
 800e254:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0;  /*Invalid UTF-8 code*/
 800e256:	5d45      	ldrb	r5, [r0, r5]
 800e258:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
 800e25c:	2e80      	cmp	r6, #128	; 0x80
 800e25e:	d1c7      	bne.n	800e1f0 <lv_txt_utf8_next+0x32>
            (*i)++;
 800e260:	1cd6      	adds	r6, r2, #3
 800e262:	600e      	str	r6, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0;  /*Invalid UTF-8 code*/
 800e264:	5d86      	ldrb	r6, [r0, r6]
 800e266:	f006 00c0 	and.w	r0, r6, #192	; 0xc0
 800e26a:	2880      	cmp	r0, #128	; 0x80
 800e26c:	d1c0      	bne.n	800e1f0 <lv_txt_utf8_next+0x32>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 800e26e:	049b      	lsls	r3, r3, #18
            result += txt[*i] & 0x3F;
 800e270:	f006 063f 	and.w	r6, r6, #63	; 0x3f
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 800e274:	0320      	lsls	r0, r4, #12
            (*i)++;
 800e276:	3204      	adds	r2, #4
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 800e278:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 800e27c:	f400 307c 	and.w	r0, r0, #258048	; 0x3f000
 800e280:	4303      	orrs	r3, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 800e282:	01a8      	lsls	r0, r5, #6
 800e284:	f400 607c 	and.w	r0, r0, #4032	; 0xfc0
            result += txt[*i] & 0x3F;
 800e288:	4430      	add	r0, r6
 800e28a:	4418      	add	r0, r3
 800e28c:	e7b9      	b.n	800e202 <lv_txt_utf8_next+0x44>
	...

0800e290 <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
 800e290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t i;
    uint32_t byte_cnt = 0;
 800e294:	2400      	movs	r4, #0
{
 800e296:	4607      	mov	r7, r0
 800e298:	460e      	mov	r6, r1
    for(i = 0; i < utf8_id; i++) {
        byte_cnt += lv_txt_encoded_size(&txt[byte_cnt]);
 800e29a:	f8df 801c 	ldr.w	r8, [pc, #28]	; 800e2b8 <lv_txt_utf8_get_byte_id+0x28>
    for(i = 0; i < utf8_id; i++) {
 800e29e:	4625      	mov	r5, r4
 800e2a0:	42b5      	cmp	r5, r6
 800e2a2:	d102      	bne.n	800e2aa <lv_txt_utf8_get_byte_id+0x1a>
    }

    return byte_cnt;

}
 800e2a4:	4620      	mov	r0, r4
 800e2a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        byte_cnt += lv_txt_encoded_size(&txt[byte_cnt]);
 800e2aa:	1938      	adds	r0, r7, r4
 800e2ac:	f8d8 3000 	ldr.w	r3, [r8]
 800e2b0:	4798      	blx	r3
    for(i = 0; i < utf8_id; i++) {
 800e2b2:	3501      	adds	r5, #1
        byte_cnt += lv_txt_encoded_size(&txt[byte_cnt]);
 800e2b4:	4404      	add	r4, r0
 800e2b6:	e7f3      	b.n	800e2a0 <lv_txt_utf8_get_byte_id+0x10>
 800e2b8:	200000b8 	.word	0x200000b8

0800e2bc <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 800e2bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint32_t i = 0;
 800e2c0:	2400      	movs	r4, #0
 800e2c2:	ad02      	add	r5, sp, #8
{
 800e2c4:	4607      	mov	r7, r0
 800e2c6:	460e      	mov	r6, r1
    uint32_t char_cnt = 0;

    while(i < byte_id) {
        lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 800e2c8:	f8df 8020 	ldr.w	r8, [pc, #32]	; 800e2ec <lv_txt_utf8_get_char_id+0x30>
    uint32_t i = 0;
 800e2cc:	f845 4d04 	str.w	r4, [r5, #-4]!
    while(i < byte_id) {
 800e2d0:	9b01      	ldr	r3, [sp, #4]
 800e2d2:	42b3      	cmp	r3, r6
 800e2d4:	d303      	bcc.n	800e2de <lv_txt_utf8_get_char_id+0x22>
        char_cnt++;
    }

    return char_cnt;
}
 800e2d6:	4620      	mov	r0, r4
 800e2d8:	b002      	add	sp, #8
 800e2da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 800e2de:	4629      	mov	r1, r5
 800e2e0:	4638      	mov	r0, r7
 800e2e2:	f8d8 3000 	ldr.w	r3, [r8]
        char_cnt++;
 800e2e6:	3401      	adds	r4, #1
        lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 800e2e8:	4798      	blx	r3
 800e2ea:	e7f1      	b.n	800e2d0 <lv_txt_utf8_get_char_id+0x14>
 800e2ec:	200000b0 	.word	0x200000b0

0800e2f0 <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
 800e2f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if LV_TXT_UTF8 == 0
    return strlen(txt);
#else
    uint32_t len = 0;
    uint32_t i = 0;
 800e2f2:	2400      	movs	r4, #0
 800e2f4:	ad02      	add	r5, sp, #8
{
 800e2f6:	4606      	mov	r6, r0

    while(txt[i] != '\0') {
        lv_txt_encoded_next(txt, &i);
 800e2f8:	4f07      	ldr	r7, [pc, #28]	; (800e318 <lv_txt_utf8_get_length+0x28>)
    uint32_t i = 0;
 800e2fa:	f845 4d04 	str.w	r4, [r5, #-4]!
    while(txt[i] != '\0') {
 800e2fe:	9b01      	ldr	r3, [sp, #4]
 800e300:	5cf3      	ldrb	r3, [r6, r3]
 800e302:	b913      	cbnz	r3, 800e30a <lv_txt_utf8_get_length+0x1a>
        len++;
    }

    return len;
#endif
}
 800e304:	4620      	mov	r0, r4
 800e306:	b003      	add	sp, #12
 800e308:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_txt_encoded_next(txt, &i);
 800e30a:	4629      	mov	r1, r5
 800e30c:	4630      	mov	r0, r6
 800e30e:	683b      	ldr	r3, [r7, #0]
        len++;
 800e310:	3401      	adds	r4, #1
        lv_txt_encoded_next(txt, &i);
 800e312:	4798      	blx	r3
 800e314:	e7f3      	b.n	800e2fe <lv_txt_utf8_get_length+0xe>
 800e316:	bf00      	nop
 800e318:	200000b0 	.word	0x200000b0

0800e31c <lv_txt_unicode_to_utf8>:
    if(letter_uni < 128) return letter_uni;
 800e31c:	287f      	cmp	r0, #127	; 0x7f
{
 800e31e:	b082      	sub	sp, #8
    if(letter_uni < 128) return letter_uni;
 800e320:	d913      	bls.n	800e34a <lv_txt_unicode_to_utf8+0x2e>
    if(letter_uni < 0x0800) {
 800e322:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800e326:	d212      	bcs.n	800e34e <lv_txt_unicode_to_utf8+0x32>
        bytes[0] = ((letter_uni >> 6)  & 0x1F) | 0xC0;
 800e328:	0983      	lsrs	r3, r0, #6
        bytes[1] = ((letter_uni >> 0)  & 0x3F) | 0x80;
 800e32a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        bytes[0] = ((letter_uni >> 6)  & 0x1F) | 0xC0;
 800e32e:	f063 033f 	orn	r3, r3, #63	; 0x3f
        bytes[1] = ((letter_uni >> 0)  & 0x3F) | 0x80;
 800e332:	f060 007f 	orn	r0, r0, #127	; 0x7f
        bytes[0] = ((letter_uni >> 6)  & 0x1F) | 0xC0;
 800e336:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[2] = 0;
 800e33a:	2300      	movs	r3, #0
        bytes[1] = ((letter_uni >> 0)  & 0x3F) | 0x80;
 800e33c:	f88d 0005 	strb.w	r0, [sp, #5]
        bytes[2] = 0;
 800e340:	f88d 3006 	strb.w	r3, [sp, #6]
        bytes[3] = 0;
 800e344:	f88d 3007 	strb.w	r3, [sp, #7]
    return *res_p;
 800e348:	9801      	ldr	r0, [sp, #4]
}
 800e34a:	b002      	add	sp, #8
 800e34c:	4770      	bx	lr
    } else if(letter_uni < 0x010000) {
 800e34e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800e352:	d212      	bcs.n	800e37a <lv_txt_unicode_to_utf8+0x5e>
        bytes[0] = ((letter_uni >> 12) & 0x0F) | 0xE0;
 800e354:	0b03      	lsrs	r3, r0, #12
 800e356:	f063 031f 	orn	r3, r3, #31
 800e35a:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 6)  & 0x3F) | 0x80;
 800e35e:	f3c0 1385 	ubfx	r3, r0, #6, #6
        bytes[2] = ((letter_uni >> 0)  & 0x3F) | 0x80;
 800e362:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        bytes[1] = ((letter_uni >> 6)  & 0x3F) | 0x80;
 800e366:	f063 037f 	orn	r3, r3, #127	; 0x7f
        bytes[2] = ((letter_uni >> 0)  & 0x3F) | 0x80;
 800e36a:	f060 007f 	orn	r0, r0, #127	; 0x7f
        bytes[1] = ((letter_uni >> 6)  & 0x3F) | 0x80;
 800e36e:	f88d 3005 	strb.w	r3, [sp, #5]
        bytes[3] = 0;
 800e372:	2300      	movs	r3, #0
        bytes[2] = ((letter_uni >> 0)  & 0x3F) | 0x80;
 800e374:	f88d 0006 	strb.w	r0, [sp, #6]
 800e378:	e7e4      	b.n	800e344 <lv_txt_unicode_to_utf8+0x28>
    } else if(letter_uni < 0x110000) {
 800e37a:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
 800e37e:	d2e3      	bcs.n	800e348 <lv_txt_unicode_to_utf8+0x2c>
        bytes[0] = ((letter_uni >> 18) & 0x07) | 0xF0;
 800e380:	0c83      	lsrs	r3, r0, #18
 800e382:	f063 030f 	orn	r3, r3, #15
 800e386:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 12) & 0x3F) | 0x80;
 800e38a:	f3c0 3305 	ubfx	r3, r0, #12, #6
 800e38e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e392:	f88d 3005 	strb.w	r3, [sp, #5]
        bytes[2] = ((letter_uni >> 6)  & 0x3F) | 0x80;
 800e396:	f3c0 1385 	ubfx	r3, r0, #6, #6
        bytes[3] = ((letter_uni >> 0)  & 0x3F) | 0x80;
 800e39a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        bytes[2] = ((letter_uni >> 6)  & 0x3F) | 0x80;
 800e39e:	f063 037f 	orn	r3, r3, #127	; 0x7f
        bytes[3] = ((letter_uni >> 0)  & 0x3F) | 0x80;
 800e3a2:	f060 007f 	orn	r0, r0, #127	; 0x7f
        bytes[2] = ((letter_uni >> 6)  & 0x3F) | 0x80;
 800e3a6:	f88d 3006 	strb.w	r3, [sp, #6]
        bytes[3] = ((letter_uni >> 0)  & 0x3F) | 0x80;
 800e3aa:	f88d 0007 	strb.w	r0, [sp, #7]
 800e3ae:	e7cb      	b.n	800e348 <lv_txt_unicode_to_utf8+0x2c>

0800e3b0 <lv_txt_utf8_prev>:
    (*i)--;
 800e3b0:	680b      	ldr	r3, [r1, #0]
{
 800e3b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    (*i)--;
 800e3b4:	3b01      	subs	r3, #1
{
 800e3b6:	4606      	mov	r6, r0
 800e3b8:	460d      	mov	r5, r1
    (*i)--;
 800e3ba:	2404      	movs	r4, #4
        c_size = lv_txt_encoded_size(&txt[*i]);
 800e3bc:	4f0c      	ldr	r7, [pc, #48]	; (800e3f0 <lv_txt_utf8_prev+0x40>)
    (*i)--;
 800e3be:	600b      	str	r3, [r1, #0]
        c_size = lv_txt_encoded_size(&txt[*i]);
 800e3c0:	6828      	ldr	r0, [r5, #0]
 800e3c2:	683b      	ldr	r3, [r7, #0]
 800e3c4:	4430      	add	r0, r6
 800e3c6:	4798      	blx	r3
 800e3c8:	682b      	ldr	r3, [r5, #0]
        if(c_size == 0) {
 800e3ca:	b948      	cbnz	r0, 800e3e0 <lv_txt_utf8_prev+0x30>
            if(*i != 0)(*i)--;
 800e3cc:	b12b      	cbz	r3, 800e3da <lv_txt_utf8_prev+0x2a>
 800e3ce:	3c01      	subs	r4, #1
 800e3d0:	3b01      	subs	r3, #1
        if(cnt >= 4) return 0;      /*No UTF-8 char found before the initial*/
 800e3d2:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
            if(*i != 0)(*i)--;
 800e3d6:	602b      	str	r3, [r5, #0]
        if(cnt >= 4) return 0;      /*No UTF-8 char found before the initial*/
 800e3d8:	d1f2      	bne.n	800e3c0 <lv_txt_utf8_prev+0x10>
 800e3da:	2000      	movs	r0, #0
}
 800e3dc:	b003      	add	sp, #12
 800e3de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t i_tmp = *i;
 800e3e0:	a902      	add	r1, sp, #8
    uint32_t letter = lv_txt_encoded_next(txt, &i_tmp);   /*Character found, get it*/
 800e3e2:	4630      	mov	r0, r6
    uint32_t i_tmp = *i;
 800e3e4:	f841 3d04 	str.w	r3, [r1, #-4]!
    uint32_t letter = lv_txt_encoded_next(txt, &i_tmp);   /*Character found, get it*/
 800e3e8:	4b02      	ldr	r3, [pc, #8]	; (800e3f4 <lv_txt_utf8_prev+0x44>)
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	4798      	blx	r3
 800e3ee:	e7f5      	b.n	800e3dc <lv_txt_utf8_prev+0x2c>
 800e3f0:	200000b8 	.word	0x200000b8
 800e3f4:	200000b0 	.word	0x200000b0

0800e3f8 <lv_txt_is_cmd>:
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800e3f8:	2923      	cmp	r1, #35	; 0x23
{
 800e3fa:	4602      	mov	r2, r0
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800e3fc:	d117      	bne.n	800e42e <lv_txt_is_cmd+0x36>
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 800e3fe:	7803      	ldrb	r3, [r0, #0]
 800e400:	b91b      	cbnz	r3, 800e40a <lv_txt_is_cmd+0x12>
            *state = LV_TXT_CMD_STATE_PAR;
 800e402:	2301      	movs	r3, #1
 800e404:	7003      	strb	r3, [r0, #0]
            ret = true;
 800e406:	2001      	movs	r0, #1
 800e408:	e004      	b.n	800e414 <lv_txt_is_cmd+0x1c>
        } else if(*state == LV_TXT_CMD_STATE_PAR) { /*Other start char in parameter is escaped cmd. char */
 800e40a:	2b01      	cmp	r3, #1
 800e40c:	f04f 0000 	mov.w	r0, #0
 800e410:	d109      	bne.n	800e426 <lv_txt_is_cmd+0x2e>
            *state = LV_TXT_CMD_STATE_WAIT;
 800e412:	7010      	strb	r0, [r2, #0]
    if(*state == LV_TXT_CMD_STATE_PAR) {
 800e414:	7813      	ldrb	r3, [r2, #0]
 800e416:	2b01      	cmp	r3, #1
 800e418:	d104      	bne.n	800e424 <lv_txt_is_cmd+0x2c>
        if(c == ' ') {
 800e41a:	2920      	cmp	r1, #32
        ret = true;
 800e41c:	4618      	mov	r0, r3
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 800e41e:	bf04      	itt	eq
 800e420:	2102      	moveq	r1, #2
 800e422:	7011      	strbeq	r1, [r2, #0]
}
 800e424:	4770      	bx	lr
        } else if(*state == LV_TXT_CMD_STATE_IN) { /*Command end */
 800e426:	2b02      	cmp	r3, #2
 800e428:	d1f4      	bne.n	800e414 <lv_txt_is_cmd+0x1c>
            *state = LV_TXT_CMD_STATE_WAIT;
 800e42a:	7010      	strb	r0, [r2, #0]
 800e42c:	e7eb      	b.n	800e406 <lv_txt_is_cmd+0xe>
    bool ret = false;
 800e42e:	2000      	movs	r0, #0
 800e430:	e7f0      	b.n	800e414 <lv_txt_is_cmd+0x1c>
	...

0800e434 <lv_txt_get_next_line>:
{
 800e434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e438:	b087      	sub	sp, #28
 800e43a:	460d      	mov	r5, r1
 800e43c:	461f      	mov	r7, r3
    if(txt == NULL) return 0;
 800e43e:	4683      	mov	fp, r0
{
 800e440:	9201      	str	r2, [sp, #4]
 800e442:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
    if(txt == NULL) return 0;
 800e446:	2800      	cmp	r0, #0
 800e448:	d074      	beq.n	800e534 <lv_txt_get_next_line+0x100>
    if(font == NULL) return 0;
 800e44a:	2900      	cmp	r1, #0
 800e44c:	d073      	beq.n	800e536 <lv_txt_get_next_line+0x102>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 800e44e:	f019 0f02 	tst.w	r9, #2
 800e452:	f643 72ff 	movw	r2, #16383	; 0x3fff
    uint32_t i = 0;
 800e456:	f04f 0400 	mov.w	r4, #0
    uint32_t last_break = NO_BREAK_FOUND;
 800e45a:	f04f 36ff 	mov.w	r6, #4294967295
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 800e45e:	bf18      	it	ne
 800e460:	4617      	movne	r7, r2
        letter = lv_txt_encoded_next(txt, &i);
 800e462:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 800e544 <lv_txt_get_next_line+0x110>
    uint32_t i = 0;
 800e466:	9404      	str	r4, [sp, #16]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 800e468:	f88d 400f 	strb.w	r4, [sp, #15]
    while(txt[i] != '\0') {
 800e46c:	9804      	ldr	r0, [sp, #16]
 800e46e:	f81b 2000 	ldrb.w	r2, [fp, r0]
 800e472:	b90a      	cbnz	r2, 800e478 <lv_txt_get_next_line+0x44>
    return i;
 800e474:	b280      	uxth	r0, r0
 800e476:	e01c      	b.n	800e4b2 <lv_txt_get_next_line+0x7e>
        letter = lv_txt_encoded_next(txt, &i);
 800e478:	f8d8 2000 	ldr.w	r2, [r8]
 800e47c:	a904      	add	r1, sp, #16
 800e47e:	4658      	mov	r0, fp
 800e480:	4790      	blx	r2
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800e482:	f019 0f01 	tst.w	r9, #1
        letter = lv_txt_encoded_next(txt, &i);
 800e486:	4682      	mov	sl, r0
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800e488:	d116      	bne.n	800e4b8 <lv_txt_get_next_line+0x84>
        if(letter == '\n' || letter == '\r') {
 800e48a:	f1ba 0f0a 	cmp.w	sl, #10
 800e48e:	d11b      	bne.n	800e4c8 <lv_txt_get_next_line+0x94>
            uint32_t i_tmp = i;
 800e490:	9804      	ldr	r0, [sp, #16]
 800e492:	a906      	add	r1, sp, #24
            uint32_t letter_next = lv_txt_encoded_next(txt, &i_tmp);
 800e494:	f8d8 4000 	ldr.w	r4, [r8]
            uint32_t i_tmp = i;
 800e498:	f841 0d04 	str.w	r0, [r1, #-4]!
            uint32_t letter_next = lv_txt_encoded_next(txt, &i_tmp);
 800e49c:	4658      	mov	r0, fp
 800e49e:	47a0      	blx	r4
            if(letter == '\r' &&  letter_next == '\n') i = i_tmp;
 800e4a0:	f1ba 0f0d 	cmp.w	sl, #13
 800e4a4:	d103      	bne.n	800e4ae <lv_txt_get_next_line+0x7a>
 800e4a6:	280a      	cmp	r0, #10
 800e4a8:	d101      	bne.n	800e4ae <lv_txt_get_next_line+0x7a>
 800e4aa:	9b05      	ldr	r3, [sp, #20]
 800e4ac:	9304      	str	r3, [sp, #16]
                return i;
 800e4ae:	f8bd 0010 	ldrh.w	r0, [sp, #16]
}
 800e4b2:	b007      	add	sp, #28
 800e4b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(lv_txt_is_cmd(&cmd_state, letter) != false) {
 800e4b8:	4601      	mov	r1, r0
 800e4ba:	f10d 000f 	add.w	r0, sp, #15
 800e4be:	f7ff ff9b 	bl	800e3f8 <lv_txt_is_cmd>
 800e4c2:	2800      	cmp	r0, #0
 800e4c4:	d1d2      	bne.n	800e46c <lv_txt_get_next_line+0x38>
 800e4c6:	e7e0      	b.n	800e48a <lv_txt_get_next_line+0x56>
        if(letter == '\n' || letter == '\r') {
 800e4c8:	f1ba 0f0d 	cmp.w	sl, #13
 800e4cc:	d0e0      	beq.n	800e490 <lv_txt_get_next_line+0x5c>
            cur_w += lv_font_get_width(font, letter);
 800e4ce:	4651      	mov	r1, sl
 800e4d0:	4628      	mov	r0, r5
 800e4d2:	f7ff fa7d 	bl	800d9d0 <lv_font_get_width>
 800e4d6:	4404      	add	r4, r0
 800e4d8:	b2a4      	uxth	r4, r4
            if(cur_w > max_width) {
 800e4da:	b221      	sxth	r1, r4
 800e4dc:	428f      	cmp	r7, r1
 800e4de:	f04f 0100 	mov.w	r1, #0
 800e4e2:	db07      	blt.n	800e4f4 <lv_txt_get_next_line+0xc0>
{
    uint8_t i;
    bool ret = false;

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 800e4e4:	b2c8      	uxtb	r0, r1
 800e4e6:	4b15      	ldr	r3, [pc, #84]	; (800e53c <lv_txt_get_next_line+0x108>)
 800e4e8:	5c18      	ldrb	r0, [r3, r0]
 800e4ea:	b9e8      	cbnz	r0, 800e528 <lv_txt_get_next_line+0xf4>
        cur_w += letter_space;
 800e4ec:	9b01      	ldr	r3, [sp, #4]
 800e4ee:	441c      	add	r4, r3
 800e4f0:	b224      	sxth	r4, r4
 800e4f2:	e7bb      	b.n	800e46c <lv_txt_get_next_line+0x38>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 800e4f4:	b2c8      	uxtb	r0, r1
 800e4f6:	4b11      	ldr	r3, [pc, #68]	; (800e53c <lv_txt_get_next_line+0x108>)
 800e4f8:	5c18      	ldrb	r0, [r3, r0]
 800e4fa:	b118      	cbz	r0, 800e504 <lv_txt_get_next_line+0xd0>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 800e4fc:	4582      	cmp	sl, r0
 800e4fe:	f101 0101 	add.w	r1, r1, #1
 800e502:	d1f7      	bne.n	800e4f4 <lv_txt_get_next_line+0xc0>
                if(last_break != NO_BREAK_FOUND) {
 800e504:	1c73      	adds	r3, r6, #1
 800e506:	d009      	beq.n	800e51c <lv_txt_get_next_line+0xe8>
                    i = last_break;
 800e508:	9604      	str	r6, [sp, #16]
                if(i == 0) lv_txt_encoded_next(txt, &i);
 800e50a:	9a04      	ldr	r2, [sp, #16]
 800e50c:	2a00      	cmp	r2, #0
 800e50e:	d1ce      	bne.n	800e4ae <lv_txt_get_next_line+0x7a>
 800e510:	f8d8 2000 	ldr.w	r2, [r8]
 800e514:	a904      	add	r1, sp, #16
 800e516:	4658      	mov	r0, fp
 800e518:	4790      	blx	r2
 800e51a:	e7c8      	b.n	800e4ae <lv_txt_get_next_line+0x7a>
                    lv_txt_encoded_prev(txt, &i);
 800e51c:	4a08      	ldr	r2, [pc, #32]	; (800e540 <lv_txt_get_next_line+0x10c>)
 800e51e:	a904      	add	r1, sp, #16
 800e520:	4658      	mov	r0, fp
 800e522:	6812      	ldr	r2, [r2, #0]
 800e524:	4790      	blx	r2
 800e526:	e7f0      	b.n	800e50a <lv_txt_get_next_line+0xd6>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 800e528:	4582      	cmp	sl, r0
 800e52a:	f101 0101 	add.w	r1, r1, #1
 800e52e:	d1d9      	bne.n	800e4e4 <lv_txt_get_next_line+0xb0>
                last_break = i; /*Save the first char index  after break*/
 800e530:	9e04      	ldr	r6, [sp, #16]
 800e532:	e7db      	b.n	800e4ec <lv_txt_get_next_line+0xb8>
 800e534:	e7bd      	b.n	800e4b2 <lv_txt_get_next_line+0x7e>
    if(txt == NULL) return 0;
 800e536:	4608      	mov	r0, r1
 800e538:	e7bb      	b.n	800e4b2 <lv_txt_get_next_line+0x7e>
 800e53a:	bf00      	nop
 800e53c:	08087e74 	.word	0x08087e74
 800e540:	200000b4 	.word	0x200000b4
 800e544:	200000b0 	.word	0x200000b0

0800e548 <lv_txt_get_width>:
{
 800e548:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e54c:	460f      	mov	r7, r1
 800e54e:	4691      	mov	r9, r2
 800e550:	461e      	mov	r6, r3
    if(txt == NULL) return 0;
 800e552:	4680      	mov	r8, r0
 800e554:	b918      	cbnz	r0, 800e55e <lv_txt_get_width+0x16>
 800e556:	2000      	movs	r0, #0
}
 800e558:	b003      	add	sp, #12
 800e55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(font == NULL) return 0;
 800e55e:	2a00      	cmp	r2, #0
 800e560:	d0f9      	beq.n	800e556 <lv_txt_get_width+0xe>
    uint32_t i = 0;
 800e562:	2400      	movs	r4, #0
 800e564:	9401      	str	r4, [sp, #4]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 800e566:	f88d 4003 	strb.w	r4, [sp, #3]
    if(length != 0) {
 800e56a:	2900      	cmp	r1, #0
 800e56c:	d0f3      	beq.n	800e556 <lv_txt_get_width+0xe>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800e56e:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
            letter = lv_txt_encoded_next(txt, &i);
 800e572:	f8df a040 	ldr.w	sl, [pc, #64]	; 800e5b4 <lv_txt_get_width+0x6c>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800e576:	f005 0501 	and.w	r5, r5, #1
        while(i < length) {
 800e57a:	9b01      	ldr	r3, [sp, #4]
 800e57c:	429f      	cmp	r7, r3
 800e57e:	d802      	bhi.n	800e586 <lv_txt_get_width+0x3e>
        width -= letter_space;  /*Trim the last letter space. Important if the text is center aligned */
 800e580:	1ba0      	subs	r0, r4, r6
 800e582:	b200      	sxth	r0, r0
 800e584:	e7e8      	b.n	800e558 <lv_txt_get_width+0x10>
            letter = lv_txt_encoded_next(txt, &i);
 800e586:	a901      	add	r1, sp, #4
 800e588:	4640      	mov	r0, r8
 800e58a:	f8da 3000 	ldr.w	r3, [sl]
 800e58e:	4798      	blx	r3
 800e590:	4683      	mov	fp, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800e592:	b93d      	cbnz	r5, 800e5a4 <lv_txt_get_width+0x5c>
            width += letter_space;
 800e594:	4434      	add	r4, r6
            width += lv_font_get_width(font, letter);
 800e596:	4659      	mov	r1, fp
 800e598:	4648      	mov	r0, r9
 800e59a:	f7ff fa19 	bl	800d9d0 <lv_font_get_width>
            width += letter_space;
 800e59e:	4404      	add	r4, r0
 800e5a0:	b224      	sxth	r4, r4
 800e5a2:	e7ea      	b.n	800e57a <lv_txt_get_width+0x32>
                if(lv_txt_is_cmd(&cmd_state, letter) != false) {
 800e5a4:	4601      	mov	r1, r0
 800e5a6:	f10d 0003 	add.w	r0, sp, #3
 800e5aa:	f7ff ff25 	bl	800e3f8 <lv_txt_is_cmd>
 800e5ae:	2800      	cmp	r0, #0
 800e5b0:	d0f0      	beq.n	800e594 <lv_txt_get_width+0x4c>
 800e5b2:	e7e2      	b.n	800e57a <lv_txt_get_width+0x32>
 800e5b4:	200000b0 	.word	0x200000b0

0800e5b8 <lv_txt_get_size>:
{
 800e5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5bc:	b087      	sub	sp, #28
    size_res->x = 0;
 800e5be:	2500      	movs	r5, #0
{
 800e5c0:	4604      	mov	r4, r0
 800e5c2:	4616      	mov	r6, r2
 800e5c4:	9304      	str	r3, [sp, #16]
    if(text == NULL) return;
 800e5c6:	4689      	mov	r9, r1
{
 800e5c8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800e5cc:	f9bd b040 	ldrsh.w	fp, [sp, #64]	; 0x40
 800e5d0:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 800e5d4:	9303      	str	r3, [sp, #12]
    size_res->x = 0;
 800e5d6:	8005      	strh	r5, [r0, #0]
    size_res->y = 0;
 800e5d8:	8045      	strh	r5, [r0, #2]
    if(text == NULL) return;
 800e5da:	b301      	cbz	r1, 800e61e <lv_txt_get_size+0x66>
    if(font == NULL) return;
 800e5dc:	b1fa      	cbz	r2, 800e61e <lv_txt_get_size+0x66>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 800e5de:	f013 0f02 	tst.w	r3, #2
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline uint8_t lv_font_get_height(const lv_font_t * font_p)
{
    return font_p->h_px;
 800e5e2:	f892 7020 	ldrb.w	r7, [r2, #32]
 800e5e6:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800e5ea:	bf18      	it	ne
 800e5ec:	469a      	movne	sl, r3
        size_res->y += line_space;
 800e5ee:	eb07 030b 	add.w	r3, r7, fp
 800e5f2:	9305      	str	r3, [sp, #20]
    while(text[line_start] != '\0') {
 800e5f4:	f819 3005 	ldrb.w	r3, [r9, r5]
 800e5f8:	eb09 0805 	add.w	r8, r9, r5
 800e5fc:	b993      	cbnz	r3, 800e624 <lv_txt_get_size+0x6c>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 800e5fe:	b155      	cbz	r5, 800e616 <lv_txt_get_size+0x5e>
 800e600:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800e604:	2b0a      	cmp	r3, #10
 800e606:	d001      	beq.n	800e60c <lv_txt_get_size+0x54>
 800e608:	2b0d      	cmp	r3, #13
 800e60a:	d104      	bne.n	800e616 <lv_txt_get_size+0x5e>
        size_res->y += letter_height + line_space;
 800e60c:	8862      	ldrh	r2, [r4, #2]
 800e60e:	eb07 030b 	add.w	r3, r7, fp
 800e612:	4413      	add	r3, r2
 800e614:	8063      	strh	r3, [r4, #2]
    if(size_res->y == 0) size_res->y = letter_height;
 800e616:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800e61a:	b9fb      	cbnz	r3, 800e65c <lv_txt_get_size+0xa4>
 800e61c:	8067      	strh	r7, [r4, #2]
}
 800e61e:	b007      	add	sp, #28
 800e620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 800e624:	9b03      	ldr	r3, [sp, #12]
 800e626:	4631      	mov	r1, r6
 800e628:	9a04      	ldr	r2, [sp, #16]
 800e62a:	4640      	mov	r0, r8
 800e62c:	9300      	str	r3, [sp, #0]
 800e62e:	4653      	mov	r3, sl
 800e630:	f7ff ff00 	bl	800e434 <lv_txt_get_next_line>
        size_res->y += line_space;
 800e634:	8863      	ldrh	r3, [r4, #2]
 800e636:	9a05      	ldr	r2, [sp, #20]
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 800e638:	4601      	mov	r1, r0
 800e63a:	4405      	add	r5, r0
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start,
 800e63c:	4640      	mov	r0, r8
        size_res->y += line_space;
 800e63e:	4413      	add	r3, r2
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start,
 800e640:	4632      	mov	r2, r6
        size_res->y += line_space;
 800e642:	8063      	strh	r3, [r4, #2]
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start,
 800e644:	9b03      	ldr	r3, [sp, #12]
 800e646:	9300      	str	r3, [sp, #0]
 800e648:	9b04      	ldr	r3, [sp, #16]
 800e64a:	f7ff ff7d 	bl	800e548 <lv_txt_get_width>
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
 800e64e:	f9b4 3000 	ldrsh.w	r3, [r4]
 800e652:	4298      	cmp	r0, r3
 800e654:	bfb8      	it	lt
 800e656:	4618      	movlt	r0, r3
 800e658:	8020      	strh	r0, [r4, #0]
 800e65a:	e7cb      	b.n	800e5f4 <lv_txt_get_size+0x3c>
    else size_res->y -= line_space;
 800e65c:	eba3 030b 	sub.w	r3, r3, fp
 800e660:	8063      	strh	r3, [r4, #2]
 800e662:	e7dc      	b.n	800e61e <lv_txt_get_size+0x66>

0800e664 <lv_txt_ins>:
{
 800e664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e668:	4617      	mov	r7, r2
 800e66a:	4605      	mov	r5, r0
 800e66c:	4688      	mov	r8, r1
    uint32_t old_len = strlen(txt_buf);
 800e66e:	f7f1 fdd5 	bl	800021c <strlen>
 800e672:	4604      	mov	r4, r0
    uint32_t ins_len = strlen(ins_txt);
 800e674:	4638      	mov	r0, r7
 800e676:	f7f1 fdd1 	bl	800021c <strlen>
    pos = lv_txt_encoded_get_byte_id(txt_buf, pos);   /*Convert to byte index instead of letter index*/
 800e67a:	4b0c      	ldr	r3, [pc, #48]	; (800e6ac <lv_txt_ins+0x48>)
    uint32_t ins_len = strlen(ins_txt);
 800e67c:	4606      	mov	r6, r0
    uint32_t new_len = ins_len + old_len;
 800e67e:	4404      	add	r4, r0
    pos = lv_txt_encoded_get_byte_id(txt_buf, pos);   /*Convert to byte index instead of letter index*/
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	4641      	mov	r1, r8
 800e684:	4628      	mov	r0, r5
 800e686:	4798      	blx	r3
 800e688:	192b      	adds	r3, r5, r4
    for(i = new_len; i >= pos + ins_len; i--) {
 800e68a:	1831      	adds	r1, r6, r0
        txt_buf[i] = txt_buf[i - ins_len];
 800e68c:	4274      	negs	r4, r6
    for(i = new_len; i >= pos + ins_len; i--) {
 800e68e:	1b5a      	subs	r2, r3, r5
 800e690:	4291      	cmp	r1, r2
 800e692:	d906      	bls.n	800e6a2 <lv_txt_ins+0x3e>
    memcpy(txt_buf + pos, ins_txt, ins_len);
 800e694:	4632      	mov	r2, r6
 800e696:	4639      	mov	r1, r7
 800e698:	4428      	add	r0, r5
}
 800e69a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    memcpy(txt_buf + pos, ins_txt, ins_len);
 800e69e:	f007 ba3d 	b.w	8015b1c <memcpy>
        txt_buf[i] = txt_buf[i - ins_len];
 800e6a2:	5d1a      	ldrb	r2, [r3, r4]
 800e6a4:	f803 2901 	strb.w	r2, [r3], #-1
 800e6a8:	e7f1      	b.n	800e68e <lv_txt_ins+0x2a>
 800e6aa:	bf00      	nop
 800e6ac:	200000ac 	.word	0x200000ac

0800e6b0 <lv_txt_cut>:
{
 800e6b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6b4:	4606      	mov	r6, r0
 800e6b6:	460c      	mov	r4, r1
    pos = lv_txt_encoded_get_byte_id(txt, pos);   /*Convert to byte index instead of letter index*/
 800e6b8:	4f0c      	ldr	r7, [pc, #48]	; (800e6ec <lv_txt_cut+0x3c>)
{
 800e6ba:	4690      	mov	r8, r2
    uint32_t old_len = strlen(txt);
 800e6bc:	f7f1 fdae 	bl	800021c <strlen>
    pos = lv_txt_encoded_get_byte_id(txt, pos);   /*Convert to byte index instead of letter index*/
 800e6c0:	4621      	mov	r1, r4
    uint32_t old_len = strlen(txt);
 800e6c2:	4605      	mov	r5, r0
    pos = lv_txt_encoded_get_byte_id(txt, pos);   /*Convert to byte index instead of letter index*/
 800e6c4:	683b      	ldr	r3, [r7, #0]
 800e6c6:	4630      	mov	r0, r6
 800e6c8:	4798      	blx	r3
    len = lv_txt_encoded_get_byte_id(&txt[pos], len);
 800e6ca:	1834      	adds	r4, r6, r0
 800e6cc:	683b      	ldr	r3, [r7, #0]
 800e6ce:	4641      	mov	r1, r8
 800e6d0:	4620      	mov	r0, r4
 800e6d2:	4798      	blx	r3
 800e6d4:	4623      	mov	r3, r4
    for(i = pos; i <= old_len - len; i++) {
 800e6d6:	1a2d      	subs	r5, r5, r0
 800e6d8:	1b9a      	subs	r2, r3, r6
 800e6da:	4295      	cmp	r5, r2
 800e6dc:	d201      	bcs.n	800e6e2 <lv_txt_cut+0x32>
}
 800e6de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        txt[i] = txt[i + len];
 800e6e2:	5c1a      	ldrb	r2, [r3, r0]
 800e6e4:	f803 2b01 	strb.w	r2, [r3], #1
 800e6e8:	e7f6      	b.n	800e6d8 <lv_txt_cut+0x28>
 800e6ea:	bf00      	nop
 800e6ec:	200000ac 	.word	0x200000ac

0800e6f0 <lv_ufs_ready>:
 * @return true if ufs is initialized and can be used else false
 */
bool lv_ufs_ready(void)
{
    return inited;
}
 800e6f0:	4b01      	ldr	r3, [pc, #4]	; (800e6f8 <lv_ufs_ready+0x8>)
 800e6f2:	7818      	ldrb	r0, [r3, #0]
 800e6f4:	4770      	bx	lr
 800e6f6:	bf00      	nop
 800e6f8:	200173e8 	.word	0x200173e8

0800e6fc <lv_ufs_close>:
 */
lv_fs_res_t lv_ufs_close(void * file_p)
{
    lv_ufs_file_t * fp = file_p;    /*Convert type*/

    if(fp->ent == NULL) return LV_FS_RES_OK;
 800e6fc:	6802      	ldr	r2, [r0, #0]
 800e6fe:	b11a      	cbz	r2, 800e708 <lv_ufs_close+0xc>

    /*Decrement the Open counter*/
    if(fp->ent->oc > 0) {
 800e700:	8993      	ldrh	r3, [r2, #12]
 800e702:	b10b      	cbz	r3, 800e708 <lv_ufs_close+0xc>
        fp->ent->oc--;
 800e704:	3b01      	subs	r3, #1
 800e706:	8193      	strh	r3, [r2, #12]
    }

    return LV_FS_RES_OK;
}
 800e708:	2000      	movs	r0, #0
 800e70a:	4770      	bx	lr

0800e70c <lv_ufs_tell>:
 */
lv_fs_res_t lv_ufs_tell(void * file_p, uint32_t * pos_p)
{
    lv_ufs_file_t * fp = file_p;    /*Convert type*/

    *pos_p = fp->rwp;
 800e70c:	6843      	ldr	r3, [r0, #4]

    return LV_FS_RES_OK;
}
 800e70e:	2000      	movs	r0, #0
    *pos_p = fp->rwp;
 800e710:	600b      	str	r3, [r1, #0]
}
 800e712:	4770      	bx	lr

0800e714 <lv_ufs_size>:
lv_fs_res_t lv_ufs_size(void * file_p, uint32_t * size_p)
{
    lv_ufs_file_t * fp = file_p;    /*Convert type*/
    lv_ufs_ent_t * ent = fp->ent;

    *size_p = ent->size;
 800e714:	6803      	ldr	r3, [r0, #0]

    return LV_FS_RES_OK;
}
 800e716:	2000      	movs	r0, #0
    *size_p = ent->size;
 800e718:	689b      	ldr	r3, [r3, #8]
 800e71a:	600b      	str	r3, [r1, #0]
}
 800e71c:	4770      	bx	lr

0800e71e <lv_ufs_dir_open>:
 */
lv_fs_res_t lv_ufs_dir_open(void * rddir_p, const char * path)
{
    lv_ufs_dir_t * lv_ufs_rddir_p = rddir_p;

    lv_ufs_rddir_p->last_ent = NULL;
 800e71e:	2300      	movs	r3, #0
 800e720:	6003      	str	r3, [r0, #0]

    if(path[0] != '\0') return LV_FS_RES_NOT_EX;       /*Must be "" */
 800e722:	780b      	ldrb	r3, [r1, #0]
 800e724:	2b00      	cmp	r3, #0
    else return LV_FS_RES_OK;
}
 800e726:	bf14      	ite	ne
 800e728:	2003      	movne	r0, #3
 800e72a:	2000      	moveq	r0, #0
 800e72c:	4770      	bx	lr

0800e72e <lv_ufs_dir_close>:
 */
lv_fs_res_t lv_ufs_dir_close(void * rddir_p)
{
    (void)rddir_p;
    return LV_FS_RES_OK;
}
 800e72e:	2000      	movs	r0, #0
 800e730:	4770      	bx	lr
	...

0800e734 <lv_ufs_ent_get>:
 * @param fn filename ('\0' terminated string)
 * @return pointer to the dynamically allocated entry with 'fn' filename.
 *         NULL if no entry found with that name.
 */
static lv_ufs_ent_t * lv_ufs_ent_get(const char * fn)
{
 800e734:	b570      	push	{r4, r5, r6, lr}
 800e736:	4605      	mov	r5, r0
    lv_ufs_ent_t * fp;

    LL_READ(file_ll, fp) {
 800e738:	4809      	ldr	r0, [pc, #36]	; (800e760 <lv_ufs_ent_get+0x2c>)
 800e73a:	f7ff fa96 	bl	800dc6a <lv_ll_get_head>
 800e73e:	4e08      	ldr	r6, [pc, #32]	; (800e760 <lv_ufs_ent_get+0x2c>)
 800e740:	4604      	mov	r4, r0
 800e742:	b90c      	cbnz	r4, 800e748 <lv_ufs_ent_get+0x14>
            return fp;
        }
    }

    return NULL;
}
 800e744:	4620      	mov	r0, r4
 800e746:	bd70      	pop	{r4, r5, r6, pc}
        if(strcmp(fp->fn_d, fn) == 0) {
 800e748:	4629      	mov	r1, r5
 800e74a:	6820      	ldr	r0, [r4, #0]
 800e74c:	f7f1 fd5c 	bl	8000208 <strcmp>
 800e750:	2800      	cmp	r0, #0
 800e752:	d0f7      	beq.n	800e744 <lv_ufs_ent_get+0x10>
    LL_READ(file_ll, fp) {
 800e754:	4621      	mov	r1, r4
 800e756:	4630      	mov	r0, r6
 800e758:	f7ff fa8d 	bl	800dc76 <lv_ll_get_next>
 800e75c:	4604      	mov	r4, r0
 800e75e:	e7f0      	b.n	800e742 <lv_ufs_ent_get+0xe>
 800e760:	200173dc 	.word	0x200173dc

0800e764 <lv_ufs_open>:
{
 800e764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e768:	4605      	mov	r5, r0
 800e76a:	4617      	mov	r7, r2
    fp->ent = NULL;
 800e76c:	2600      	movs	r6, #0
    lv_ufs_ent_t * ent = lv_ufs_ent_get(fn);
 800e76e:	4608      	mov	r0, r1
{
 800e770:	4688      	mov	r8, r1
 800e772:	f007 0901 	and.w	r9, r7, #1
    lv_ufs_ent_t * ent = lv_ufs_ent_get(fn);
 800e776:	f7ff ffdd 	bl	800e734 <lv_ufs_ent_get>
    fp->ent = NULL;
 800e77a:	602e      	str	r6, [r5, #0]
    if(ent == NULL) {
 800e77c:	4604      	mov	r4, r0
 800e77e:	b9d8      	cbnz	r0, 800e7b8 <lv_ufs_open+0x54>
        if((mode & LV_FS_MODE_WR) != 0) {  /*Create the file if opened for write*/
 800e780:	f1b9 0f00 	cmp.w	r9, #0
 800e784:	d030      	beq.n	800e7e8 <lv_ufs_open+0x84>
 *         NULL if no space for the entry.
 */
static lv_ufs_ent_t * lv_ufs_ent_new(const char * fn)
{
    lv_ufs_ent_t * new_ent = NULL;
    new_ent = lv_ll_ins_head(&file_ll);                 /*Create a new file*/
 800e786:	481d      	ldr	r0, [pc, #116]	; (800e7fc <lv_ufs_open+0x98>)
 800e788:	f7ff fa33 	bl	800dbf2 <lv_ll_ins_head>
    lv_mem_assert(new_ent);
 800e78c:	4604      	mov	r4, r0
 800e78e:	b900      	cbnz	r0, 800e792 <lv_ufs_open+0x2e>
 800e790:	e7fe      	b.n	800e790 <lv_ufs_open+0x2c>
    if(new_ent == NULL) return NULL;

    new_ent->fn_d = lv_mem_alloc(strlen(fn)  + 1); /*Save the name*/
 800e792:	4640      	mov	r0, r8
 800e794:	f7f1 fd42 	bl	800021c <strlen>
 800e798:	3001      	adds	r0, #1
 800e79a:	f7ff fb55 	bl	800de48 <lv_mem_alloc>
 800e79e:	6020      	str	r0, [r4, #0]
    lv_mem_assert(new_ent->fn_d);
 800e7a0:	b900      	cbnz	r0, 800e7a4 <lv_ufs_open+0x40>
 800e7a2:	e7fe      	b.n	800e7a2 <lv_ufs_open+0x3e>
    if(new_ent->fn_d == NULL) return NULL;

    strcpy(new_ent->fn_d, fn);
 800e7a4:	4641      	mov	r1, r8
 800e7a6:	f007 f9cc 	bl	8015b42 <strcpy>
    new_ent->data_d = NULL;
    new_ent->size = 0;
    new_ent->oc = 0;
    new_ent->const_data = 0;
 800e7aa:	7ba3      	ldrb	r3, [r4, #14]
    new_ent->data_d = NULL;
 800e7ac:	6066      	str	r6, [r4, #4]
    new_ent->const_data = 0;
 800e7ae:	f366 0300 	bfi	r3, r6, #0, #1
    new_ent->size = 0;
 800e7b2:	60a6      	str	r6, [r4, #8]
    new_ent->oc = 0;
 800e7b4:	81a6      	strh	r6, [r4, #12]
    new_ent->const_data = 0;
 800e7b6:	73a3      	strb	r3, [r4, #14]
    if((mode & LV_FS_MODE_WR) != 0) {
 800e7b8:	f1b9 0f00 	cmp.w	r9, #0
 800e7bc:	d004      	beq.n	800e7c8 <lv_ufs_open+0x64>
        if(ent->oc != 0) return LV_FS_RES_LOCKED;
 800e7be:	89a3      	ldrh	r3, [r4, #12]
 800e7c0:	b9ab      	cbnz	r3, 800e7ee <lv_ufs_open+0x8a>
        if(ent->const_data != 0) return LV_FS_RES_DENIED;
 800e7c2:	7ba3      	ldrb	r3, [r4, #14]
 800e7c4:	07db      	lsls	r3, r3, #31
 800e7c6:	d415      	bmi.n	800e7f4 <lv_ufs_open+0x90>
    fp->ar = mode & LV_FS_MODE_RD ? 1 : 0;
 800e7c8:	7a2b      	ldrb	r3, [r5, #8]
 800e7ca:	f3c7 0240 	ubfx	r2, r7, #1, #1
    fp->rwp = 0;
 800e7ce:	2000      	movs	r0, #0
    fp->ent = ent;
 800e7d0:	602c      	str	r4, [r5, #0]
    fp->ar = mode & LV_FS_MODE_RD ? 1 : 0;
 800e7d2:	f362 0300 	bfi	r3, r2, #0, #1
    fp->rwp = 0;
 800e7d6:	6068      	str	r0, [r5, #4]
    fp->aw = mode & LV_FS_MODE_WR ? 1 : 0;
 800e7d8:	f367 0341 	bfi	r3, r7, #1, #1
 800e7dc:	722b      	strb	r3, [r5, #8]
    ent->oc ++;
 800e7de:	89a3      	ldrh	r3, [r4, #12]
 800e7e0:	3301      	adds	r3, #1
 800e7e2:	81a3      	strh	r3, [r4, #12]
    return LV_FS_RES_OK;
 800e7e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            return LV_FS_RES_NOT_EX;       /*Can not read not existing file*/
 800e7e8:	2003      	movs	r0, #3
 800e7ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(ent->oc != 0) return LV_FS_RES_LOCKED;
 800e7ee:	2005      	movs	r0, #5
 800e7f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(ent->const_data != 0) return LV_FS_RES_DENIED;
 800e7f4:	2006      	movs	r0, #6
}
 800e7f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7fa:	bf00      	nop
 800e7fc:	200173dc 	.word	0x200173dc

0800e800 <lv_ufs_dir_read>:
{
 800e800:	b538      	push	{r3, r4, r5, lr}
 800e802:	460d      	mov	r5, r1
    if(ufs_dir_p->last_ent == NULL) {
 800e804:	6801      	ldr	r1, [r0, #0]
{
 800e806:	4604      	mov	r4, r0
        ufs_dir_p->last_ent = lv_ll_get_head(&file_ll);
 800e808:	4808      	ldr	r0, [pc, #32]	; (800e82c <lv_ufs_dir_read+0x2c>)
    if(ufs_dir_p->last_ent == NULL) {
 800e80a:	b951      	cbnz	r1, 800e822 <lv_ufs_dir_read+0x22>
        ufs_dir_p->last_ent = lv_ll_get_head(&file_ll);
 800e80c:	f7ff fa2d 	bl	800dc6a <lv_ll_get_head>
        ufs_dir_p->last_ent = lv_ll_get_next(&file_ll, ufs_dir_p->last_ent);
 800e810:	6020      	str	r0, [r4, #0]
    if(ufs_dir_p->last_ent != NULL) {
 800e812:	6823      	ldr	r3, [r4, #0]
 800e814:	b143      	cbz	r3, 800e828 <lv_ufs_dir_read+0x28>
        strcpy(fn, ufs_dir_p->last_ent->fn_d);
 800e816:	6819      	ldr	r1, [r3, #0]
 800e818:	4628      	mov	r0, r5
 800e81a:	f007 f992 	bl	8015b42 <strcpy>
}
 800e81e:	2000      	movs	r0, #0
 800e820:	bd38      	pop	{r3, r4, r5, pc}
        ufs_dir_p->last_ent = lv_ll_get_next(&file_ll, ufs_dir_p->last_ent);
 800e822:	f7ff fa28 	bl	800dc76 <lv_ll_get_next>
 800e826:	e7f3      	b.n	800e810 <lv_ufs_dir_read+0x10>
        fn[0] = '\0';
 800e828:	702b      	strb	r3, [r5, #0]
 800e82a:	e7f8      	b.n	800e81e <lv_ufs_dir_read+0x1e>
 800e82c:	200173dc 	.word	0x200173dc

0800e830 <lv_ufs_remove>:
{
 800e830:	b538      	push	{r3, r4, r5, lr}
    lv_ufs_ent_t * ent = lv_ufs_ent_get(fn);
 800e832:	f7ff ff7f 	bl	800e734 <lv_ufs_ent_get>
    if(ent == NULL) return LV_FS_RES_DENIED;    /*File not exists*/
 800e836:	4604      	mov	r4, r0
 800e838:	b1b0      	cbz	r0, 800e868 <lv_ufs_remove+0x38>
    if(ent->oc != 0) return LV_FS_RES_DENIED;
 800e83a:	8985      	ldrh	r5, [r0, #12]
 800e83c:	b9a5      	cbnz	r5, 800e868 <lv_ufs_remove+0x38>
    lv_ll_rem(&file_ll, ent);
 800e83e:	4601      	mov	r1, r0
 800e840:	480a      	ldr	r0, [pc, #40]	; (800e86c <lv_ufs_remove+0x3c>)
 800e842:	f7ff fa51 	bl	800dce8 <lv_ll_rem>
    lv_mem_free(ent->fn_d);
 800e846:	6820      	ldr	r0, [r4, #0]
 800e848:	f7ff fb22 	bl	800de90 <lv_mem_free>
    if(ent->const_data == 0) {
 800e84c:	7ba3      	ldrb	r3, [r4, #14]
    ent->fn_d = NULL;
 800e84e:	6025      	str	r5, [r4, #0]
    if(ent->const_data == 0) {
 800e850:	f013 0501 	ands.w	r5, r3, #1
 800e854:	d103      	bne.n	800e85e <lv_ufs_remove+0x2e>
        lv_mem_free(ent->data_d);
 800e856:	6860      	ldr	r0, [r4, #4]
 800e858:	f7ff fb1a 	bl	800de90 <lv_mem_free>
        ent->data_d = NULL;
 800e85c:	6065      	str	r5, [r4, #4]
    lv_mem_free(ent);
 800e85e:	4620      	mov	r0, r4
 800e860:	f7ff fb16 	bl	800de90 <lv_mem_free>
    return LV_FS_RES_OK;
 800e864:	2000      	movs	r0, #0
 800e866:	bd38      	pop	{r3, r4, r5, pc}
    if(ent == NULL) return LV_FS_RES_DENIED;    /*File not exists*/
 800e868:	2006      	movs	r0, #6
}
 800e86a:	bd38      	pop	{r3, r4, r5, pc}
 800e86c:	200173dc 	.word	0x200173dc

0800e870 <lv_ufs_read>:
{
 800e870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e872:	4604      	mov	r4, r0
 800e874:	461d      	mov	r5, r3
 800e876:	4608      	mov	r0, r1
    *br = 0;
 800e878:	2300      	movs	r3, #0
    lv_ufs_ent_t * ent = fp->ent;
 800e87a:	6821      	ldr	r1, [r4, #0]
    *br = 0;
 800e87c:	602b      	str	r3, [r5, #0]
    if(ent->data_d == NULL || ent->size == 0) { /*Don't read empty files*/
 800e87e:	684b      	ldr	r3, [r1, #4]
 800e880:	b1a3      	cbz	r3, 800e8ac <lv_ufs_read+0x3c>
 800e882:	6889      	ldr	r1, [r1, #8]
 800e884:	b191      	cbz	r1, 800e8ac <lv_ufs_read+0x3c>
    } else if(fp->ar == 0) {    /*The file is not opened for read*/
 800e886:	7a26      	ldrb	r6, [r4, #8]
 800e888:	07f6      	lsls	r6, r6, #31
 800e88a:	d511      	bpl.n	800e8b0 <lv_ufs_read+0x40>
    if(fp->rwp + btr > ent->size) {  /*Check too much bytes read*/
 800e88c:	6866      	ldr	r6, [r4, #4]
 800e88e:	18b7      	adds	r7, r6, r2
 800e890:	42b9      	cmp	r1, r7
        *br =  ent->size - fp->rwp;
 800e892:	bf36      	itet	cc
 800e894:	1b89      	subcc	r1, r1, r6
        *br = btr;
 800e896:	602a      	strcs	r2, [r5, #0]
        *br =  ent->size - fp->rwp;
 800e898:	6029      	strcc	r1, [r5, #0]
    data8_p += fp->rwp;
 800e89a:	6861      	ldr	r1, [r4, #4]
    memcpy(buf, data8_p, *br);
 800e89c:	682a      	ldr	r2, [r5, #0]
 800e89e:	4419      	add	r1, r3
 800e8a0:	f007 f93c 	bl	8015b1c <memcpy>
    fp->rwp += *br; /*Refresh the read write pointer*/
 800e8a4:	6863      	ldr	r3, [r4, #4]
 800e8a6:	682a      	ldr	r2, [r5, #0]
 800e8a8:	4413      	add	r3, r2
 800e8aa:	6063      	str	r3, [r4, #4]
    return LV_FS_RES_OK;
 800e8ac:	2000      	movs	r0, #0
 800e8ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LV_FS_RES_DENIED;
 800e8b0:	2006      	movs	r0, #6
}
 800e8b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e8b4 <lv_ufs_seek>:
{
 800e8b4:	b570      	push	{r4, r5, r6, lr}
    lv_ufs_ent_t * ent = fp->ent;
 800e8b6:	6806      	ldr	r6, [r0, #0]
{
 800e8b8:	4604      	mov	r4, r0
 800e8ba:	460d      	mov	r5, r1
    if(pos < ent->size) {
 800e8bc:	68b3      	ldr	r3, [r6, #8]
 800e8be:	428b      	cmp	r3, r1
 800e8c0:	d902      	bls.n	800e8c8 <lv_ufs_seek+0x14>
        fp->rwp = pos;
 800e8c2:	6065      	str	r5, [r4, #4]
    return LV_FS_RES_OK;
 800e8c4:	2000      	movs	r0, #0
 800e8c6:	bd70      	pop	{r4, r5, r6, pc}
        if(fp->aw == 0) return LV_FS_RES_DENIED;       /*Not opened for write*/
 800e8c8:	7a03      	ldrb	r3, [r0, #8]
 800e8ca:	079b      	lsls	r3, r3, #30
 800e8cc:	d507      	bpl.n	800e8de <lv_ufs_seek+0x2a>
        uint8_t * new_data = lv_mem_realloc(ent->data_d, pos);
 800e8ce:	6870      	ldr	r0, [r6, #4]
 800e8d0:	f7ff fb42 	bl	800df58 <lv_mem_realloc>
        lv_mem_assert(new_data);
 800e8d4:	b900      	cbnz	r0, 800e8d8 <lv_ufs_seek+0x24>
 800e8d6:	e7fe      	b.n	800e8d6 <lv_ufs_seek+0x22>
        ent->data_d = new_data;
 800e8d8:	6070      	str	r0, [r6, #4]
        ent->size = pos;
 800e8da:	60b5      	str	r5, [r6, #8]
 800e8dc:	e7f1      	b.n	800e8c2 <lv_ufs_seek+0xe>
        if(fp->aw == 0) return LV_FS_RES_DENIED;       /*Not opened for write*/
 800e8de:	2006      	movs	r0, #6
}
 800e8e0:	bd70      	pop	{r4, r5, r6, pc}

0800e8e2 <lv_ufs_trunc>:
{
 800e8e2:	b538      	push	{r3, r4, r5, lr}
    if(fp->aw == 0) return LV_FS_RES_DENIED; /*Not opened for write*/
 800e8e4:	7a03      	ldrb	r3, [r0, #8]
{
 800e8e6:	4604      	mov	r4, r0
    if(fp->aw == 0) return LV_FS_RES_DENIED; /*Not opened for write*/
 800e8e8:	079b      	lsls	r3, r3, #30
 800e8ea:	d50b      	bpl.n	800e904 <lv_ufs_trunc+0x22>
    lv_ufs_ent_t * ent = fp->ent;
 800e8ec:	6805      	ldr	r5, [r0, #0]
    void * new_data = lv_mem_realloc(ent->data_d, fp->rwp);
 800e8ee:	6841      	ldr	r1, [r0, #4]
 800e8f0:	6868      	ldr	r0, [r5, #4]
 800e8f2:	f7ff fb31 	bl	800df58 <lv_mem_realloc>
    lv_mem_assert(new_data);
 800e8f6:	b900      	cbnz	r0, 800e8fa <lv_ufs_trunc+0x18>
 800e8f8:	e7fe      	b.n	800e8f8 <lv_ufs_trunc+0x16>
    ent->size = fp->rwp;
 800e8fa:	6863      	ldr	r3, [r4, #4]
    ent->data_d = new_data;
 800e8fc:	6068      	str	r0, [r5, #4]
    return LV_FS_RES_OK;
 800e8fe:	2000      	movs	r0, #0
    ent->size = fp->rwp;
 800e900:	60ab      	str	r3, [r5, #8]
    return LV_FS_RES_OK;
 800e902:	bd38      	pop	{r3, r4, r5, pc}
    if(fp->aw == 0) return LV_FS_RES_DENIED; /*Not opened for write*/
 800e904:	2006      	movs	r0, #6
}
 800e906:	bd38      	pop	{r3, r4, r5, pc}

0800e908 <lv_ufs_free>:
{
 800e908:	b530      	push	{r4, r5, lr}
 800e90a:	b087      	sub	sp, #28
 800e90c:	4605      	mov	r5, r0
 800e90e:	460c      	mov	r4, r1
    lv_mem_monitor(&mon);
 800e910:	4668      	mov	r0, sp
 800e912:	f7ff fadf 	bl	800ded4 <lv_mem_monitor>
    *total_p = LV_MEM_SIZE >> 10;    /*Convert bytes to kB*/
 800e916:	2320      	movs	r3, #32
}
 800e918:	2000      	movs	r0, #0
    *total_p = LV_MEM_SIZE >> 10;    /*Convert bytes to kB*/
 800e91a:	602b      	str	r3, [r5, #0]
    *free_p = mon.free_size >> 10;
 800e91c:	9b02      	ldr	r3, [sp, #8]
 800e91e:	0a9b      	lsrs	r3, r3, #10
 800e920:	6023      	str	r3, [r4, #0]
}
 800e922:	b007      	add	sp, #28
 800e924:	bd30      	pop	{r4, r5, pc}

0800e926 <lv_ufs_write>:
{
 800e926:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e92a:	4698      	mov	r8, r3
    *bw = 0;
 800e92c:	2300      	movs	r3, #0
{
 800e92e:	4604      	mov	r4, r0
 800e930:	4689      	mov	r9, r1
    *bw = 0;
 800e932:	f8c8 3000 	str.w	r3, [r8]
{
 800e936:	4617      	mov	r7, r2
    if(fp->aw == 0) return LV_FS_RES_DENIED; /*Not opened for write*/
 800e938:	7a03      	ldrb	r3, [r0, #8]
 800e93a:	079b      	lsls	r3, r3, #30
 800e93c:	d51c      	bpl.n	800e978 <lv_ufs_write+0x52>
    uint32_t new_size = fp->rwp + btw;
 800e93e:	e890 0060 	ldmia.w	r0, {r5, r6}
 800e942:	4416      	add	r6, r2
    if(new_size > ent->size) {
 800e944:	68ab      	ldr	r3, [r5, #8]
 800e946:	429e      	cmp	r6, r3
 800e948:	d907      	bls.n	800e95a <lv_ufs_write+0x34>
        uint8_t * new_data = lv_mem_realloc(ent->data_d, new_size);
 800e94a:	4631      	mov	r1, r6
 800e94c:	6868      	ldr	r0, [r5, #4]
 800e94e:	f7ff fb03 	bl	800df58 <lv_mem_realloc>
        lv_mem_assert(new_data);
 800e952:	b900      	cbnz	r0, 800e956 <lv_ufs_write+0x30>
 800e954:	e7fe      	b.n	800e954 <lv_ufs_write+0x2e>
        ent->data_d = new_data;
 800e956:	6068      	str	r0, [r5, #4]
        ent->size = new_size;
 800e958:	60ae      	str	r6, [r5, #8]
    data8_p += fp->rwp;
 800e95a:	6863      	ldr	r3, [r4, #4]
    memcpy(data8_p, buf, btw);
 800e95c:	463a      	mov	r2, r7
    uint8_t * data8_p = (uint8_t *) ent->data_d;
 800e95e:	6868      	ldr	r0, [r5, #4]
    memcpy(data8_p, buf, btw);
 800e960:	4649      	mov	r1, r9
 800e962:	4418      	add	r0, r3
 800e964:	f007 f8da 	bl	8015b1c <memcpy>
    *bw = btw;
 800e968:	f8c8 7000 	str.w	r7, [r8]
    fp->rwp += *bw;
 800e96c:	6863      	ldr	r3, [r4, #4]
 800e96e:	2000      	movs	r0, #0
 800e970:	441f      	add	r7, r3
 800e972:	6067      	str	r7, [r4, #4]
 800e974:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(fp->aw == 0) return LV_FS_RES_DENIED; /*Not opened for write*/
 800e978:	2006      	movs	r0, #6
}
 800e97a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800e980 <lv_ufs_init>:
{
 800e980:	b500      	push	{lr}
 800e982:	b093      	sub	sp, #76	; 0x4c
    lv_ll_init(&file_ll, sizeof(lv_ufs_ent_t));
 800e984:	2110      	movs	r1, #16
 800e986:	481b      	ldr	r0, [pc, #108]	; (800e9f4 <lv_ufs_init+0x74>)
 800e988:	f7ff f929 	bl	800dbde <lv_ll_init>
    memset(&ufs_drv, 0, sizeof(lv_fs_drv_t));    /*Initialization*/
 800e98c:	2244      	movs	r2, #68	; 0x44
 800e98e:	2100      	movs	r1, #0
 800e990:	a801      	add	r0, sp, #4
 800e992:	f007 f8ce 	bl	8015b32 <memset>
    ufs_drv.file_size = sizeof(lv_ufs_file_t);
 800e996:	230c      	movs	r3, #12
    lv_fs_add_drv(&ufs_drv);
 800e998:	a801      	add	r0, sp, #4
    ufs_drv.file_size = sizeof(lv_ufs_file_t);
 800e99a:	f8ad 3006 	strh.w	r3, [sp, #6]
    ufs_drv.rddir_size = sizeof(lv_ufs_dir_t);
 800e99e:	2304      	movs	r3, #4
 800e9a0:	f8ad 3008 	strh.w	r3, [sp, #8]
    ufs_drv.letter = UFS_LETTER;
 800e9a4:	2355      	movs	r3, #85	; 0x55
 800e9a6:	f88d 3004 	strb.w	r3, [sp, #4]
    ufs_drv.ready = lv_ufs_ready;
 800e9aa:	4b13      	ldr	r3, [pc, #76]	; (800e9f8 <lv_ufs_init+0x78>)
 800e9ac:	9303      	str	r3, [sp, #12]
    ufs_drv.open = lv_ufs_open;
 800e9ae:	4b13      	ldr	r3, [pc, #76]	; (800e9fc <lv_ufs_init+0x7c>)
 800e9b0:	9304      	str	r3, [sp, #16]
    ufs_drv.close = lv_ufs_close;
 800e9b2:	4b13      	ldr	r3, [pc, #76]	; (800ea00 <lv_ufs_init+0x80>)
 800e9b4:	9305      	str	r3, [sp, #20]
    ufs_drv.remove = lv_ufs_remove;
 800e9b6:	4b13      	ldr	r3, [pc, #76]	; (800ea04 <lv_ufs_init+0x84>)
 800e9b8:	9306      	str	r3, [sp, #24]
    ufs_drv.read = lv_ufs_read;
 800e9ba:	4b13      	ldr	r3, [pc, #76]	; (800ea08 <lv_ufs_init+0x88>)
 800e9bc:	9307      	str	r3, [sp, #28]
    ufs_drv.write = lv_ufs_write;
 800e9be:	4b13      	ldr	r3, [pc, #76]	; (800ea0c <lv_ufs_init+0x8c>)
 800e9c0:	9308      	str	r3, [sp, #32]
    ufs_drv.seek = lv_ufs_seek;
 800e9c2:	4b13      	ldr	r3, [pc, #76]	; (800ea10 <lv_ufs_init+0x90>)
 800e9c4:	9309      	str	r3, [sp, #36]	; 0x24
    ufs_drv.tell = lv_ufs_tell;
 800e9c6:	4b13      	ldr	r3, [pc, #76]	; (800ea14 <lv_ufs_init+0x94>)
 800e9c8:	930a      	str	r3, [sp, #40]	; 0x28
    ufs_drv.size = lv_ufs_size;
 800e9ca:	4b13      	ldr	r3, [pc, #76]	; (800ea18 <lv_ufs_init+0x98>)
 800e9cc:	930c      	str	r3, [sp, #48]	; 0x30
    ufs_drv.trunc = lv_ufs_trunc;
 800e9ce:	4b13      	ldr	r3, [pc, #76]	; (800ea1c <lv_ufs_init+0x9c>)
 800e9d0:	930b      	str	r3, [sp, #44]	; 0x2c
    ufs_drv.free = lv_ufs_free;
 800e9d2:	4b13      	ldr	r3, [pc, #76]	; (800ea20 <lv_ufs_init+0xa0>)
 800e9d4:	930e      	str	r3, [sp, #56]	; 0x38
    ufs_drv.dir_open = lv_ufs_dir_open;
 800e9d6:	4b13      	ldr	r3, [pc, #76]	; (800ea24 <lv_ufs_init+0xa4>)
 800e9d8:	930f      	str	r3, [sp, #60]	; 0x3c
    ufs_drv.dir_read = lv_ufs_dir_read;
 800e9da:	4b13      	ldr	r3, [pc, #76]	; (800ea28 <lv_ufs_init+0xa8>)
 800e9dc:	9310      	str	r3, [sp, #64]	; 0x40
    ufs_drv.dir_close = lv_ufs_dir_close;
 800e9de:	4b13      	ldr	r3, [pc, #76]	; (800ea2c <lv_ufs_init+0xac>)
 800e9e0:	9311      	str	r3, [sp, #68]	; 0x44
    lv_fs_add_drv(&ufs_drv);
 800e9e2:	f7ff f8dd 	bl	800dba0 <lv_fs_add_drv>
    inited = true;
 800e9e6:	2201      	movs	r2, #1
 800e9e8:	4b11      	ldr	r3, [pc, #68]	; (800ea30 <lv_ufs_init+0xb0>)
 800e9ea:	701a      	strb	r2, [r3, #0]
}
 800e9ec:	b013      	add	sp, #76	; 0x4c
 800e9ee:	f85d fb04 	ldr.w	pc, [sp], #4
 800e9f2:	bf00      	nop
 800e9f4:	200173dc 	.word	0x200173dc
 800e9f8:	0800e6f1 	.word	0x0800e6f1
 800e9fc:	0800e765 	.word	0x0800e765
 800ea00:	0800e6fd 	.word	0x0800e6fd
 800ea04:	0800e831 	.word	0x0800e831
 800ea08:	0800e871 	.word	0x0800e871
 800ea0c:	0800e927 	.word	0x0800e927
 800ea10:	0800e8b5 	.word	0x0800e8b5
 800ea14:	0800e70d 	.word	0x0800e70d
 800ea18:	0800e715 	.word	0x0800e715
 800ea1c:	0800e8e3 	.word	0x0800e8e3
 800ea20:	0800e909 	.word	0x0800e909
 800ea24:	0800e71f 	.word	0x0800e71f
 800ea28:	0800e801 	.word	0x0800e801
 800ea2c:	0800e72f 	.word	0x0800e72f
 800ea30:	200173e8 	.word	0x200173e8

0800ea34 <lv_bar_set_value>:
 * Set a new value on the bar
 * @param bar pointer to a bar object
 * @param value new value
 */
void lv_bar_set_value(lv_obj_t * bar, int16_t value)
{
 800ea34:	b538      	push	{r3, r4, r5, lr}
 800ea36:	460c      	mov	r4, r1
 800ea38:	4605      	mov	r5, r0
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 800ea3a:	f7fa fa1e 	bl	8008e7a <lv_obj_get_ext_attr>
    if(ext->cur_value == value) return;
 800ea3e:	f9b0 3000 	ldrsh.w	r3, [r0]
 800ea42:	42a3      	cmp	r3, r4
 800ea44:	d010      	beq.n	800ea68 <lv_bar_set_value+0x34>

    ext->cur_value = value > ext->max_value ? ext->max_value : value;
 800ea46:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
    ext->cur_value = ext->cur_value < ext->min_value ? ext->min_value : ext->cur_value;
 800ea4a:	42a3      	cmp	r3, r4
 800ea4c:	bfa8      	it	ge
 800ea4e:	4623      	movge	r3, r4
 800ea50:	4619      	mov	r1, r3
 800ea52:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800ea56:	4299      	cmp	r1, r3
 800ea58:	bfb8      	it	lt
 800ea5a:	4619      	movlt	r1, r3
 800ea5c:	8001      	strh	r1, [r0, #0]
    lv_obj_invalidate(bar);
 800ea5e:	4628      	mov	r0, r5
}
 800ea60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(bar);
 800ea64:	f7f9 bc28 	b.w	80082b8 <lv_obj_invalidate>
 800ea68:	bd38      	pop	{r3, r4, r5, pc}
	...

0800ea6c <lv_bar_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_bar_signal(lv_obj_t * bar, lv_signal_t sign, void * param)
{
 800ea6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(bar, sign, param);
 800ea6e:	4b13      	ldr	r3, [pc, #76]	; (800eabc <lv_bar_signal+0x50>)
{
 800ea70:	4604      	mov	r4, r0
 800ea72:	460f      	mov	r7, r1
 800ea74:	4616      	mov	r6, r2
    res = ancestor_signal(bar, sign, param);
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 800ea7a:	2801      	cmp	r0, #1
    res = ancestor_signal(bar, sign, param);
 800ea7c:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 800ea7e:	d10c      	bne.n	800ea9a <lv_bar_signal+0x2e>

    if(sign == LV_SIGNAL_REFR_EXT_SIZE) {
 800ea80:	2f04      	cmp	r7, #4
 800ea82:	d10c      	bne.n	800ea9e <lv_bar_signal+0x32>
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 800ea84:	4620      	mov	r0, r4
 800ea86:	f7fa f9f8 	bl	8008e7a <lv_obj_get_ext_attr>
        lv_style_t * style_indic = lv_bar_get_style(bar, LV_BAR_STYLE_INDIC);
        if(style_indic->body.shadow.width > bar->ext_size) bar->ext_size = style_indic->body.shadow.width;
 800ea8a:	6883      	ldr	r3, [r0, #8]
 800ea8c:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 800ea90:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800ea94:	429a      	cmp	r2, r3
 800ea96:	da00      	bge.n	800ea9a <lv_bar_signal+0x2e>
 800ea98:	86a3      	strh	r3, [r4, #52]	; 0x34
        }
        buf->type[i] = "lv_bar";
    }

    return res;
}
 800ea9a:	4628      	mov	r0, r5
 800ea9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 800ea9e:	2f05      	cmp	r7, #5
 800eaa0:	d1fb      	bne.n	800ea9a <lv_bar_signal+0x2e>
 800eaa2:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 800eaa4:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800eaa8:	b2da      	uxtb	r2, r3
 800eaaa:	b119      	cbz	r1, 800eab4 <lv_bar_signal+0x48>
 800eaac:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) {  /*Find the last set data*/
 800eaae:	2b07      	cmp	r3, #7
 800eab0:	d1f8      	bne.n	800eaa4 <lv_bar_signal+0x38>
 800eab2:	461a      	mov	r2, r3
        buf->type[i] = "lv_bar";
 800eab4:	4b02      	ldr	r3, [pc, #8]	; (800eac0 <lv_bar_signal+0x54>)
 800eab6:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
 800eaba:	e7ee      	b.n	800ea9a <lv_bar_signal+0x2e>
 800eabc:	200173f0 	.word	0x200173f0
 800eac0:	08087e7c 	.word	0x08087e7c

0800eac4 <lv_bar_set_range>:
{
 800eac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eac6:	460d      	mov	r5, r1
 800eac8:	4607      	mov	r7, r0
 800eaca:	4616      	mov	r6, r2
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 800eacc:	f7fa f9d5 	bl	8008e7a <lv_obj_get_ext_attr>
    if(ext->min_value == min && ext->max_value == max) return;
 800ead0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 800ead4:	4604      	mov	r4, r0
    if(ext->min_value == min && ext->max_value == max) return;
 800ead6:	42ab      	cmp	r3, r5
 800ead8:	d103      	bne.n	800eae2 <lv_bar_set_range+0x1e>
 800eada:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800eade:	42b3      	cmp	r3, r6
 800eae0:	d018      	beq.n	800eb14 <lv_bar_set_range+0x50>
    if(ext->cur_value > max) {
 800eae2:	f9b4 3000 	ldrsh.w	r3, [r4]
    ext->max_value = max;
 800eae6:	80a6      	strh	r6, [r4, #4]
    if(ext->cur_value > max) {
 800eae8:	42b3      	cmp	r3, r6
    ext->min_value = min;
 800eaea:	8065      	strh	r5, [r4, #2]
    if(ext->cur_value > max) {
 800eaec:	dd04      	ble.n	800eaf8 <lv_bar_set_range+0x34>
        ext->cur_value = max;
 800eaee:	8026      	strh	r6, [r4, #0]
        lv_bar_set_value(bar, ext->cur_value);
 800eaf0:	4631      	mov	r1, r6
 800eaf2:	4638      	mov	r0, r7
 800eaf4:	f7ff ff9e 	bl	800ea34 <lv_bar_set_value>
    if(ext->cur_value < min) {
 800eaf8:	f9b4 3000 	ldrsh.w	r3, [r4]
 800eafc:	42ab      	cmp	r3, r5
 800eafe:	da04      	bge.n	800eb0a <lv_bar_set_range+0x46>
        ext->cur_value = min;
 800eb00:	8025      	strh	r5, [r4, #0]
        lv_bar_set_value(bar, ext->cur_value);
 800eb02:	4629      	mov	r1, r5
 800eb04:	4638      	mov	r0, r7
 800eb06:	f7ff ff95 	bl	800ea34 <lv_bar_set_value>
    lv_obj_invalidate(bar);
 800eb0a:	4638      	mov	r0, r7
}
 800eb0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_obj_invalidate(bar);
 800eb10:	f7f9 bbd2 	b.w	80082b8 <lv_obj_invalidate>
 800eb14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800eb16 <lv_bar_set_style>:
{
 800eb16:	b570      	push	{r4, r5, r6, lr}
 800eb18:	460e      	mov	r6, r1
 800eb1a:	4604      	mov	r4, r0
 800eb1c:	4615      	mov	r5, r2
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 800eb1e:	f7fa f9ac 	bl	8008e7a <lv_obj_get_ext_attr>
    switch(type) {
 800eb22:	b116      	cbz	r6, 800eb2a <lv_bar_set_style+0x14>
 800eb24:	2e01      	cmp	r6, #1
 800eb26:	d006      	beq.n	800eb36 <lv_bar_set_style+0x20>
 800eb28:	bd70      	pop	{r4, r5, r6, pc}
            lv_obj_set_style(bar, style);
 800eb2a:	4629      	mov	r1, r5
 800eb2c:	4620      	mov	r0, r4
}
 800eb2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_obj_set_style(bar, style);
 800eb32:	f7fa b869 	b.w	8008c08 <lv_obj_set_style>
            ext->style_indic = style;
 800eb36:	6085      	str	r5, [r0, #8]
            lv_obj_refresh_ext_size(bar);
 800eb38:	4620      	mov	r0, r4
}
 800eb3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_obj_refresh_ext_size(bar);
 800eb3e:	f7f9 bfa6 	b.w	8008a8e <lv_obj_refresh_ext_size>
	...

0800eb44 <lv_bar_create>:
{
 800eb44:	b570      	push	{r4, r5, r6, lr}
 800eb46:	460e      	mov	r6, r1
    lv_obj_t * new_bar = lv_obj_create(par, copy);
 800eb48:	f7f9 fc94 	bl	8008474 <lv_obj_create>
    lv_mem_assert(new_bar);
 800eb4c:	4604      	mov	r4, r0
 800eb4e:	b900      	cbnz	r0, 800eb52 <lv_bar_create+0xe>
 800eb50:	e7fe      	b.n	800eb50 <lv_bar_create+0xc>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_bar);
 800eb52:	4d2f      	ldr	r5, [pc, #188]	; (800ec10 <lv_bar_create+0xcc>)
 800eb54:	682b      	ldr	r3, [r5, #0]
 800eb56:	b913      	cbnz	r3, 800eb5e <lv_bar_create+0x1a>
 800eb58:	f7fa f98b 	bl	8008e72 <lv_obj_get_signal_func>
 800eb5c:	6028      	str	r0, [r5, #0]
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_func(new_bar);
 800eb5e:	4d2d      	ldr	r5, [pc, #180]	; (800ec14 <lv_bar_create+0xd0>)
 800eb60:	682b      	ldr	r3, [r5, #0]
 800eb62:	b91b      	cbnz	r3, 800eb6c <lv_bar_create+0x28>
 800eb64:	4620      	mov	r0, r4
 800eb66:	f7fa f986 	bl	8008e76 <lv_obj_get_design_func>
 800eb6a:	6028      	str	r0, [r5, #0]
    lv_bar_ext_t * ext = lv_obj_allocate_ext_attr(new_bar, sizeof(lv_bar_ext_t));
 800eb6c:	210c      	movs	r1, #12
 800eb6e:	4620      	mov	r0, r4
 800eb70:	f7f9 ff86 	bl	8008a80 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 800eb74:	4605      	mov	r5, r0
 800eb76:	b900      	cbnz	r0, 800eb7a <lv_bar_create+0x36>
 800eb78:	e7fe      	b.n	800eb78 <lv_bar_create+0x34>
    ext->min_value = 0;
 800eb7a:	2300      	movs	r3, #0
    ext->max_value = 100;
 800eb7c:	2264      	movs	r2, #100	; 0x64
    lv_obj_set_signal_func(new_bar, lv_bar_signal);
 800eb7e:	4926      	ldr	r1, [pc, #152]	; (800ec18 <lv_bar_create+0xd4>)
    ext->min_value = 0;
 800eb80:	8043      	strh	r3, [r0, #2]
    ext->cur_value = 0;
 800eb82:	8003      	strh	r3, [r0, #0]
    ext->style_indic = &lv_style_pretty_color;
 800eb84:	4b25      	ldr	r3, [pc, #148]	; (800ec1c <lv_bar_create+0xd8>)
    ext->max_value = 100;
 800eb86:	8082      	strh	r2, [r0, #4]
    ext->style_indic = &lv_style_pretty_color;
 800eb88:	6083      	str	r3, [r0, #8]
    lv_obj_set_signal_func(new_bar, lv_bar_signal);
 800eb8a:	4620      	mov	r0, r4
 800eb8c:	f7f9 ff74 	bl	8008a78 <lv_obj_set_signal_func>
    lv_obj_set_design_func(new_bar, lv_bar_design);
 800eb90:	4923      	ldr	r1, [pc, #140]	; (800ec20 <lv_bar_create+0xdc>)
 800eb92:	4620      	mov	r0, r4
 800eb94:	f7f9 ff72 	bl	8008a7c <lv_obj_set_design_func>
    if(copy == NULL) {
 800eb98:	bb16      	cbnz	r6, 800ebe0 <lv_bar_create+0x9c>
        lv_obj_set_click(new_bar, false);
 800eb9a:	4631      	mov	r1, r6
 800eb9c:	4620      	mov	r0, r4
 800eb9e:	f7f9 ff3b 	bl	8008a18 <lv_obj_set_click>
        lv_obj_set_size(new_bar, LV_DPI * 2, LV_DPI / 3);
 800eba2:	2221      	movs	r2, #33	; 0x21
 800eba4:	21c8      	movs	r1, #200	; 0xc8
 800eba6:	4620      	mov	r0, r4
 800eba8:	f7f9 fd97 	bl	80086da <lv_obj_set_size>
        lv_bar_set_value(new_bar, ext->cur_value);
 800ebac:	f9b5 1000 	ldrsh.w	r1, [r5]
 800ebb0:	4620      	mov	r0, r4
 800ebb2:	f7ff ff3f 	bl	800ea34 <lv_bar_set_value>
        lv_theme_t * th = lv_theme_get_current();
 800ebb6:	f006 ff5d 	bl	8015a74 <lv_theme_get_current>
        if(th) {
 800ebba:	4605      	mov	r5, r0
 800ebbc:	b158      	cbz	r0, 800ebd6 <lv_bar_create+0x92>
            lv_bar_set_style(new_bar, LV_BAR_STYLE_BG, th->bar.bg);
 800ebbe:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ebc0:	4631      	mov	r1, r6
 800ebc2:	4620      	mov	r0, r4
 800ebc4:	f7ff ffa7 	bl	800eb16 <lv_bar_set_style>
            lv_bar_set_style(new_bar, LV_BAR_STYLE_INDIC, th->bar.indic);
 800ebc8:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800ebca:	2101      	movs	r1, #1
 800ebcc:	4620      	mov	r0, r4
 800ebce:	f7ff ffa2 	bl	800eb16 <lv_bar_set_style>
}
 800ebd2:	4620      	mov	r0, r4
 800ebd4:	bd70      	pop	{r4, r5, r6, pc}
            lv_obj_set_style(new_bar, &lv_style_pretty);
 800ebd6:	4913      	ldr	r1, [pc, #76]	; (800ec24 <lv_bar_create+0xe0>)
 800ebd8:	4620      	mov	r0, r4
 800ebda:	f7fa f815 	bl	8008c08 <lv_obj_set_style>
 800ebde:	e7f8      	b.n	800ebd2 <lv_bar_create+0x8e>
        lv_bar_ext_t * ext_copy = lv_obj_get_ext_attr(copy);
 800ebe0:	4630      	mov	r0, r6
 800ebe2:	f7fa f94a 	bl	8008e7a <lv_obj_get_ext_attr>
        ext->min_value = ext_copy->min_value;
 800ebe6:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800ebea:	806b      	strh	r3, [r5, #2]
        ext->max_value = ext_copy->max_value;
 800ebec:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800ebf0:	80ab      	strh	r3, [r5, #4]
        ext->cur_value = ext_copy->cur_value;
 800ebf2:	f9b0 3000 	ldrsh.w	r3, [r0]
 800ebf6:	802b      	strh	r3, [r5, #0]
        ext->style_indic = ext_copy->style_indic;
 800ebf8:	6883      	ldr	r3, [r0, #8]
        lv_obj_refresh_style(new_bar);
 800ebfa:	4620      	mov	r0, r4
        ext->style_indic = ext_copy->style_indic;
 800ebfc:	60ab      	str	r3, [r5, #8]
        lv_obj_refresh_style(new_bar);
 800ebfe:	f7f9 fefd 	bl	80089fc <lv_obj_refresh_style>
        lv_bar_set_value(new_bar, ext->cur_value);
 800ec02:	f9b5 1000 	ldrsh.w	r1, [r5]
 800ec06:	4620      	mov	r0, r4
 800ec08:	f7ff ff14 	bl	800ea34 <lv_bar_set_value>
 800ec0c:	e7e1      	b.n	800ebd2 <lv_bar_create+0x8e>
 800ec0e:	bf00      	nop
 800ec10:	200173f0 	.word	0x200173f0
 800ec14:	200173ec 	.word	0x200173ec
 800ec18:	0800ea6d 	.word	0x0800ea6d
 800ec1c:	20017b80 	.word	0x20017b80
 800ec20:	0800ec71 	.word	0x0800ec71
 800ec24:	20017ca0 	.word	0x20017ca0

0800ec28 <lv_bar_get_value>:
{
 800ec28:	b508      	push	{r3, lr}
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 800ec2a:	f7fa f926 	bl	8008e7a <lv_obj_get_ext_attr>
}
 800ec2e:	f9b0 0000 	ldrsh.w	r0, [r0]
 800ec32:	bd08      	pop	{r3, pc}

0800ec34 <lv_bar_get_min_value>:
{
 800ec34:	b508      	push	{r3, lr}
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 800ec36:	f7fa f920 	bl	8008e7a <lv_obj_get_ext_attr>
}
 800ec3a:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 800ec3e:	bd08      	pop	{r3, pc}

0800ec40 <lv_bar_get_max_value>:
{
 800ec40:	b508      	push	{r3, lr}
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 800ec42:	f7fa f91a 	bl	8008e7a <lv_obj_get_ext_attr>
}
 800ec46:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 800ec4a:	bd08      	pop	{r3, pc}

0800ec4c <lv_bar_get_style>:
{
 800ec4c:	b538      	push	{r3, r4, r5, lr}
 800ec4e:	460c      	mov	r4, r1
 800ec50:	4605      	mov	r5, r0
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 800ec52:	f7fa f912 	bl	8008e7a <lv_obj_get_ext_attr>
    switch(type) {
 800ec56:	b11c      	cbz	r4, 800ec60 <lv_bar_get_style+0x14>
 800ec58:	2c01      	cmp	r4, #1
 800ec5a:	d006      	beq.n	800ec6a <lv_bar_get_style+0x1e>
            return NULL;
 800ec5c:	2000      	movs	r0, #0
}
 800ec5e:	bd38      	pop	{r3, r4, r5, pc}
            return lv_obj_get_style(bar);
 800ec60:	4628      	mov	r0, r5
}
 800ec62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            return lv_obj_get_style(bar);
 800ec66:	f7fa b83d 	b.w	8008ce4 <lv_obj_get_style>
            return ext->style_indic;
 800ec6a:	6880      	ldr	r0, [r0, #8]
 800ec6c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800ec70 <lv_bar_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 800ec70:	2a02      	cmp	r2, #2
{
 800ec72:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec74:	4604      	mov	r4, r0
 800ec76:	b093      	sub	sp, #76	; 0x4c
 800ec78:	460d      	mov	r5, r1
 800ec7a:	4617      	mov	r7, r2
    if(mode == LV_DESIGN_COVER_CHK) {
 800ec7c:	d106      	bne.n	800ec8c <lv_bar_design+0x1c>
        return  ancestor_design_f(bar, mask, mode);
 800ec7e:	4b54      	ldr	r3, [pc, #336]	; (800edd0 <lv_bar_design+0x160>)
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	4798      	blx	r3
 800ec84:	4606      	mov	r6, r0
}
 800ec86:	4630      	mov	r0, r6
 800ec88:	b013      	add	sp, #76	; 0x4c
 800ec8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 800ec8c:	2a00      	cmp	r2, #0
 800ec8e:	d17a      	bne.n	800ed86 <lv_bar_design+0x116>
        lv_opa_t opa_scale = lv_obj_get_opa_scale(bar);
 800ec90:	f7fa f893 	bl	8008dba <lv_obj_get_opa_scale>
 800ec94:	4606      	mov	r6, r0
        if(lv_obj_is_focused(bar)) {
 800ec96:	4620      	mov	r0, r4
 800ec98:	f7fa f8f3 	bl	8008e82 <lv_obj_is_focused>
 800ec9c:	4602      	mov	r2, r0
 800ec9e:	b1e0      	cbz	r0, 800ecda <lv_bar_design+0x6a>
            lv_style_t * style_bg = lv_bar_get_style(bar, LV_BAR_STYLE_BG);
 800eca0:	4639      	mov	r1, r7
 800eca2:	4620      	mov	r0, r4
 800eca4:	f7ff ffd2 	bl	800ec4c <lv_bar_get_style>
            lv_style_copy(&style_tmp, style_bg);
 800eca8:	4601      	mov	r1, r0
 800ecaa:	4668      	mov	r0, sp
 800ecac:	f7fa fd42 	bl	8009734 <lv_style_copy>
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
 800ecb0:	4633      	mov	r3, r6
 800ecb2:	466a      	mov	r2, sp
 800ecb4:	4629      	mov	r1, r5
 800ecb6:	f104 0010 	add.w	r0, r4, #16
            style_tmp.body.border.width = 0;
 800ecba:	f8ad 7014 	strh.w	r7, [sp, #20]
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
 800ecbe:	f7fb fee5 	bl	800aa8c <lv_draw_rect>
        lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 800ecc2:	4620      	mov	r0, r4
 800ecc4:	f7fa f8d9 	bl	8008e7a <lv_obj_get_ext_attr>
        if(ext->cur_value != ext->min_value) {
 800ecc8:	f9b0 2000 	ldrsh.w	r2, [r0]
 800eccc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
        lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 800ecd0:	4607      	mov	r7, r0
        if(ext->cur_value != ext->min_value) {
 800ecd2:	429a      	cmp	r2, r3
 800ecd4:	d107      	bne.n	800ece6 <lv_bar_design+0x76>
    return true;
 800ecd6:	2601      	movs	r6, #1
 800ecd8:	e7d5      	b.n	800ec86 <lv_bar_design+0x16>
            ancestor_design_f(bar, mask, mode);
 800ecda:	4b3d      	ldr	r3, [pc, #244]	; (800edd0 <lv_bar_design+0x160>)
 800ecdc:	4629      	mov	r1, r5
 800ecde:	4620      	mov	r0, r4
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	4798      	blx	r3
 800ece4:	e7ed      	b.n	800ecc2 <lv_bar_design+0x52>
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 800ece6:	4620      	mov	r0, r4
 800ece8:	f7fa f8c7 	bl	8008e7a <lv_obj_get_ext_attr>
            return ext->style_indic;
 800ecec:	6882      	ldr	r2, [r0, #8]
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    memcpy(dest, src, sizeof(lv_area_t));
 800ecee:	f854 0f10 	ldr.w	r0, [r4, #16]!
 800ecf2:	466b      	mov	r3, sp
 800ecf4:	6861      	ldr	r1, [r4, #4]
 800ecf6:	c303      	stmia	r3!, {r0, r1}
            indic_area.x1 += style_indic->body.padding.hor;
 800ecf8:	8c51      	ldrh	r1, [r2, #34]	; 0x22
            indic_area.y1 += style_indic->body.padding.ver;
 800ecfa:	f8b2 c020 	ldrh.w	ip, [r2, #32]
            indic_area.x1 += style_indic->body.padding.hor;
 800ecfe:	f8bd e000 	ldrh.w	lr, [sp]
            indic_area.x2 -= style_indic->body.padding.hor;
 800ed02:	f8bd 3004 	ldrh.w	r3, [sp, #4]
            indic_area.y2 -= style_indic->body.padding.ver;
 800ed06:	f8bd 4006 	ldrh.w	r4, [sp, #6]
            indic_area.x1 += style_indic->body.padding.hor;
 800ed0a:	448e      	add	lr, r1
            indic_area.x2 -= style_indic->body.padding.hor;
 800ed0c:	1a5b      	subs	r3, r3, r1
            indic_area.y1 += style_indic->body.padding.ver;
 800ed0e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
            indic_area.y2 -= style_indic->body.padding.ver;
 800ed12:	eba4 040c 	sub.w	r4, r4, ip
            indic_area.x1 += style_indic->body.padding.hor;
 800ed16:	fa1f fe8e 	uxth.w	lr, lr
            indic_area.y1 += style_indic->body.padding.ver;
 800ed1a:	4461      	add	r1, ip
            indic_area.x2 -= style_indic->body.padding.hor;
 800ed1c:	b29b      	uxth	r3, r3
            indic_area.y2 -= style_indic->body.padding.ver;
 800ed1e:	b2a4      	uxth	r4, r4
 800ed20:	f9b7 c002 	ldrsh.w	ip, [r7, #2]
            indic_area.y1 += style_indic->body.padding.ver;
 800ed24:	b288      	uxth	r0, r1
            indic_area.x2 -= style_indic->body.padding.hor;
 800ed26:	f8ad 3004 	strh.w	r3, [sp, #4]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 800ed2a:	1c61      	adds	r1, r4, #1
    return area_p->x2 - area_p->x1 + 1;
 800ed2c:	3301      	adds	r3, #1
            indic_area.y1 += style_indic->body.padding.ver;
 800ed2e:	f8ad 0002 	strh.w	r0, [sp, #2]
    return area_p->y2 - area_p->y1 + 1;
 800ed32:	1a09      	subs	r1, r1, r0
    return area_p->x2 - area_p->x1 + 1;
 800ed34:	eba3 030e 	sub.w	r3, r3, lr
 800ed38:	f9b7 0000 	ldrsh.w	r0, [r7]
 800ed3c:	b21b      	sxth	r3, r3
            indic_area.x1 += style_indic->body.padding.hor;
 800ed3e:	f8ad e000 	strh.w	lr, [sp]
    return area_p->y2 - area_p->y1 + 1;
 800ed42:	b209      	sxth	r1, r1
                indic_area.x2 = (int32_t)((int32_t)w * (ext->cur_value - ext->min_value - 1)) / (ext->max_value - ext->min_value);
 800ed44:	eba0 000c 	sub.w	r0, r0, ip
            indic_area.y2 -= style_indic->body.padding.ver;
 800ed48:	f8ad 4006 	strh.w	r4, [sp, #6]
            if(w >= h) {
 800ed4c:	4299      	cmp	r1, r3
 800ed4e:	f9b7 7004 	ldrsh.w	r7, [r7, #4]
                indic_area.x2 = (int32_t)((int32_t)w * (ext->cur_value - ext->min_value - 1)) / (ext->max_value - ext->min_value);
 800ed52:	f100 30ff 	add.w	r0, r0, #4294967295
            if(w >= h) {
 800ed56:	dc0d      	bgt.n	800ed74 <lv_bar_design+0x104>
                indic_area.x2 = (int32_t)((int32_t)w * (ext->cur_value - ext->min_value - 1)) / (ext->max_value - ext->min_value);
 800ed58:	4358      	muls	r0, r3
 800ed5a:	eba7 0c0c 	sub.w	ip, r7, ip
 800ed5e:	fb90 f0fc 	sdiv	r0, r0, ip
                indic_area.x2 = indic_area.x1 + indic_area.x2;
 800ed62:	4470      	add	r0, lr
 800ed64:	f8ad 0004 	strh.w	r0, [sp, #4]
            lv_draw_rect(&indic_area, mask, style_indic, opa_scale);
 800ed68:	4633      	mov	r3, r6
 800ed6a:	4629      	mov	r1, r5
 800ed6c:	4668      	mov	r0, sp
 800ed6e:	f7fb fe8d 	bl	800aa8c <lv_draw_rect>
 800ed72:	e7b0      	b.n	800ecd6 <lv_bar_design+0x66>
                indic_area.y1 = (int32_t)((int32_t)h * (ext->cur_value - ext->min_value - 1)) / (ext->max_value - ext->min_value);
 800ed74:	4341      	muls	r1, r0
 800ed76:	eba7 0c0c 	sub.w	ip, r7, ip
 800ed7a:	fb91 f1fc 	sdiv	r1, r1, ip
                indic_area.y1 = indic_area.y2 - indic_area.y1;
 800ed7e:	1a61      	subs	r1, r4, r1
 800ed80:	f8ad 1002 	strh.w	r1, [sp, #2]
 800ed84:	e7f0      	b.n	800ed68 <lv_bar_design+0xf8>
    } else if(mode == LV_DESIGN_DRAW_POST) {
 800ed86:	2a01      	cmp	r2, #1
 800ed88:	d1a5      	bne.n	800ecd6 <lv_bar_design+0x66>
        if(lv_obj_is_focused(bar)) {
 800ed8a:	f7fa f87a 	bl	8008e82 <lv_obj_is_focused>
 800ed8e:	4606      	mov	r6, r0
 800ed90:	2800      	cmp	r0, #0
 800ed92:	d0a0      	beq.n	800ecd6 <lv_bar_design+0x66>
            lv_opa_t opa_scale = lv_obj_get_opa_scale(bar);
 800ed94:	4620      	mov	r0, r4
 800ed96:	f7fa f810 	bl	8008dba <lv_obj_get_opa_scale>
            lv_style_t * style_bg = lv_bar_get_style(bar, LV_BAR_STYLE_BG);
 800ed9a:	2100      	movs	r1, #0
            lv_opa_t opa_scale = lv_obj_get_opa_scale(bar);
 800ed9c:	4607      	mov	r7, r0
            lv_style_t * style_bg = lv_bar_get_style(bar, LV_BAR_STYLE_BG);
 800ed9e:	4620      	mov	r0, r4
 800eda0:	f7ff ff54 	bl	800ec4c <lv_bar_get_style>
            lv_style_copy(&style_tmp, style_bg);
 800eda4:	4601      	mov	r1, r0
 800eda6:	4668      	mov	r0, sp
 800eda8:	f7fa fcc4 	bl	8009734 <lv_style_copy>
            style_tmp.body.empty = 1;
 800edac:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
            style_tmp.body.shadow.width = 0;
 800edb0:	2300      	movs	r3, #0
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
 800edb2:	4629      	mov	r1, r5
            style_tmp.body.empty = 1;
 800edb4:	f042 0201 	orr.w	r2, r2, #1
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
 800edb8:	f104 0010 	add.w	r0, r4, #16
            style_tmp.body.shadow.width = 0;
 800edbc:	f8ad 301c 	strh.w	r3, [sp, #28]
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
 800edc0:	463b      	mov	r3, r7
            style_tmp.body.empty = 1;
 800edc2:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
 800edc6:	466a      	mov	r2, sp
 800edc8:	f7fb fe60 	bl	800aa8c <lv_draw_rect>
 800edcc:	e75b      	b.n	800ec86 <lv_bar_design+0x16>
 800edce:	bf00      	nop
 800edd0:	200173ec 	.word	0x200173ec

0800edd4 <lv_btn_design>:
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_btn_design(lv_obj_t * btn, const lv_area_t * mask, lv_design_mode_t mode)
{
    if(mode == LV_DESIGN_COVER_CHK) {
 800edd4:	2a02      	cmp	r2, #2
{
 800edd6:	b510      	push	{r4, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
 800edd8:	d008      	beq.n	800edec <lv_btn_design+0x18>
        return false;
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 800edda:	b91a      	cbnz	r2, 800ede4 <lv_btn_design+0x10>
        }
#else
        ancestor_design(btn, mask, mode);
#endif
    } else if(mode == LV_DESIGN_DRAW_POST) {
        ancestor_design(btn, mask, mode);
 800eddc:	4b04      	ldr	r3, [pc, #16]	; (800edf0 <lv_btn_design+0x1c>)
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	4798      	blx	r3
 800ede2:	e001      	b.n	800ede8 <lv_btn_design+0x14>
    } else if(mode == LV_DESIGN_DRAW_POST) {
 800ede4:	2a01      	cmp	r2, #1
 800ede6:	d0f9      	beq.n	800eddc <lv_btn_design+0x8>
    }

    return true;
 800ede8:	2001      	movs	r0, #1
}
 800edea:	bd10      	pop	{r4, pc}
        return false;
 800edec:	2000      	movs	r0, #0
 800edee:	bd10      	pop	{r4, pc}
 800edf0:	200173f4 	.word	0x200173f4

0800edf4 <lv_btn_set_state>:
{
 800edf4:	b538      	push	{r3, r4, r5, lr}
 800edf6:	460c      	mov	r4, r1
 800edf8:	4605      	mov	r5, r0
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 800edfa:	f7fa f83e 	bl	8008e7a <lv_obj_get_ext_attr>
    if(ext->state != state) {
 800edfe:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800ee02:	42a3      	cmp	r3, r4
 800ee04:	d009      	beq.n	800ee1a <lv_btn_set_state+0x26>
        ext->state = state;
 800ee06:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
        lv_obj_set_style(btn, ext->styles[state]);
 800ee0a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800ee0e:	6941      	ldr	r1, [r0, #20]
 800ee10:	4628      	mov	r0, r5
}
 800ee12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_obj_set_style(btn, ext->styles[state]);
 800ee16:	f7f9 bef7 	b.w	8008c08 <lv_obj_set_style>
 800ee1a:	bd38      	pop	{r3, r4, r5, pc}

0800ee1c <lv_btn_set_action>:
    if(type >= LV_BTN_ACTION_NUM) return;
 800ee1c:	2903      	cmp	r1, #3
{
 800ee1e:	b538      	push	{r3, r4, r5, lr}
 800ee20:	460c      	mov	r4, r1
 800ee22:	4615      	mov	r5, r2
    if(type >= LV_BTN_ACTION_NUM) return;
 800ee24:	d804      	bhi.n	800ee30 <lv_btn_set_action+0x14>
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 800ee26:	f7fa f828 	bl	8008e7a <lv_obj_get_ext_attr>
    ext->actions[type] = action;
 800ee2a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800ee2e:	6045      	str	r5, [r0, #4]
 800ee30:	bd38      	pop	{r3, r4, r5, pc}

0800ee32 <lv_btn_set_style>:
{
 800ee32:	b570      	push	{r4, r5, r6, lr}
 800ee34:	460d      	mov	r5, r1
 800ee36:	4606      	mov	r6, r0
 800ee38:	4614      	mov	r4, r2
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 800ee3a:	f7fa f81e 	bl	8008e7a <lv_obj_get_ext_attr>
    switch(type) {
 800ee3e:	2d04      	cmp	r5, #4
 800ee40:	d805      	bhi.n	800ee4e <lv_btn_set_style+0x1c>
 800ee42:	e8df f005 	tbb	[pc, r5]
 800ee46:	0e03      	.short	0x0e03
 800ee48:	1210      	.short	0x1210
 800ee4a:	14          	.byte	0x14
 800ee4b:	00          	.byte	0x00
            ext->styles[LV_BTN_STATE_REL] = style;
 800ee4c:	6144      	str	r4, [r0, #20]
    lv_obj_set_style(btn, ext->styles[ext->state]);
 800ee4e:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800ee52:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800ee56:	6941      	ldr	r1, [r0, #20]
 800ee58:	4630      	mov	r0, r6
}
 800ee5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_set_style(btn, ext->styles[ext->state]);
 800ee5e:	f7f9 bed3 	b.w	8008c08 <lv_obj_set_style>
            ext->styles[LV_BTN_STATE_PR] = style;
 800ee62:	6184      	str	r4, [r0, #24]
            break;
 800ee64:	e7f3      	b.n	800ee4e <lv_btn_set_style+0x1c>
            ext->styles[LV_BTN_STATE_TGL_REL] = style;
 800ee66:	61c4      	str	r4, [r0, #28]
            break;
 800ee68:	e7f1      	b.n	800ee4e <lv_btn_set_style+0x1c>
            ext->styles[LV_BTN_STATE_TGL_PR] = style;
 800ee6a:	6204      	str	r4, [r0, #32]
            break;
 800ee6c:	e7ef      	b.n	800ee4e <lv_btn_set_style+0x1c>
            ext->styles[LV_BTN_STATE_INA] = style;
 800ee6e:	6244      	str	r4, [r0, #36]	; 0x24
            break;
 800ee70:	e7ed      	b.n	800ee4e <lv_btn_set_style+0x1c>
	...

0800ee74 <lv_btn_create>:
{
 800ee74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee76:	4607      	mov	r7, r0
 800ee78:	460e      	mov	r6, r1
    new_btn = lv_cont_create(par, copy);
 800ee7a:	f001 fbd3 	bl	8010624 <lv_cont_create>
    lv_mem_assert(new_btn);
 800ee7e:	4605      	mov	r5, r0
 800ee80:	b900      	cbnz	r0, 800ee84 <lv_btn_create+0x10>
 800ee82:	e7fe      	b.n	800ee82 <lv_btn_create+0xe>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_btn);
 800ee84:	4c43      	ldr	r4, [pc, #268]	; (800ef94 <lv_btn_create+0x120>)
 800ee86:	6823      	ldr	r3, [r4, #0]
 800ee88:	b913      	cbnz	r3, 800ee90 <lv_btn_create+0x1c>
 800ee8a:	f7f9 fff2 	bl	8008e72 <lv_obj_get_signal_func>
 800ee8e:	6020      	str	r0, [r4, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_func(new_btn);
 800ee90:	4c41      	ldr	r4, [pc, #260]	; (800ef98 <lv_btn_create+0x124>)
 800ee92:	6823      	ldr	r3, [r4, #0]
 800ee94:	b91b      	cbnz	r3, 800ee9e <lv_btn_create+0x2a>
 800ee96:	4628      	mov	r0, r5
 800ee98:	f7f9 ffed 	bl	8008e76 <lv_obj_get_design_func>
 800ee9c:	6020      	str	r0, [r4, #0]
    lv_btn_ext_t * ext = lv_obj_allocate_ext_attr(new_btn, sizeof(lv_btn_ext_t));
 800ee9e:	212c      	movs	r1, #44	; 0x2c
 800eea0:	4628      	mov	r0, r5
 800eea2:	f7f9 fded 	bl	8008a80 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 800eea6:	4604      	mov	r4, r0
 800eea8:	b900      	cbnz	r0, 800eeac <lv_btn_create+0x38>
 800eeaa:	e7fe      	b.n	800eeaa <lv_btn_create+0x36>
    ext->styles[LV_BTN_STATE_REL] = &lv_style_btn_rel;
 800eeac:	4a3b      	ldr	r2, [pc, #236]	; (800ef9c <lv_btn_create+0x128>)
    ext->state = LV_BTN_STATE_REL;
 800eeae:	2300      	movs	r3, #0
    lv_obj_set_signal_func(new_btn, lv_btn_signal);
 800eeb0:	493b      	ldr	r1, [pc, #236]	; (800efa0 <lv_btn_create+0x12c>)
    ext->styles[LV_BTN_STATE_REL] = &lv_style_btn_rel;
 800eeb2:	6142      	str	r2, [r0, #20]
    ext->styles[LV_BTN_STATE_PR] = &lv_style_btn_pr;
 800eeb4:	4a3b      	ldr	r2, [pc, #236]	; (800efa4 <lv_btn_create+0x130>)
    ext->state = LV_BTN_STATE_REL;
 800eeb6:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    ext->styles[LV_BTN_STATE_PR] = &lv_style_btn_pr;
 800eeba:	6182      	str	r2, [r0, #24]
    ext->styles[LV_BTN_STATE_TGL_REL] = &lv_style_btn_tgl_rel;
 800eebc:	4a3a      	ldr	r2, [pc, #232]	; (800efa8 <lv_btn_create+0x134>)
    ext->actions[LV_BTN_ACTION_PR] = NULL;
 800eebe:	6083      	str	r3, [r0, #8]
    ext->styles[LV_BTN_STATE_TGL_REL] = &lv_style_btn_tgl_rel;
 800eec0:	61c2      	str	r2, [r0, #28]
    ext->styles[LV_BTN_STATE_TGL_PR] = &lv_style_btn_tgl_pr;
 800eec2:	4a3a      	ldr	r2, [pc, #232]	; (800efac <lv_btn_create+0x138>)
    ext->actions[LV_BTN_ACTION_CLICK] = NULL;
 800eec4:	6043      	str	r3, [r0, #4]
    ext->styles[LV_BTN_STATE_TGL_PR] = &lv_style_btn_tgl_pr;
 800eec6:	6202      	str	r2, [r0, #32]
    ext->styles[LV_BTN_STATE_INA] = &lv_style_btn_ina;
 800eec8:	4a39      	ldr	r2, [pc, #228]	; (800efb0 <lv_btn_create+0x13c>)
    ext->actions[LV_BTN_ACTION_LONG_PR] = NULL;
 800eeca:	60c3      	str	r3, [r0, #12]
    ext->styles[LV_BTN_STATE_INA] = &lv_style_btn_ina;
 800eecc:	6242      	str	r2, [r0, #36]	; 0x24
    ext->long_pr_action_executed = 0;
 800eece:	f890 2029 	ldrb.w	r2, [r0, #41]	; 0x29
    ext->actions[LV_BTN_ACTION_LONG_PR_REPEAT] = NULL;
 800eed2:	6103      	str	r3, [r0, #16]
    ext->toggle = 0;
 800eed4:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 800eed8:	f363 0200 	bfi	r2, r3, #0, #1
 800eedc:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
    lv_obj_set_signal_func(new_btn, lv_btn_signal);
 800eee0:	4628      	mov	r0, r5
 800eee2:	f7f9 fdc9 	bl	8008a78 <lv_obj_set_signal_func>
    lv_obj_set_design_func(new_btn, lv_btn_design);
 800eee6:	4933      	ldr	r1, [pc, #204]	; (800efb4 <lv_btn_create+0x140>)
 800eee8:	4628      	mov	r0, r5
 800eeea:	f7f9 fdc7 	bl	8008a7c <lv_obj_set_design_func>
    if(copy == NULL) {
 800eeee:	bb66      	cbnz	r6, 800ef4a <lv_btn_create+0xd6>
        if(par != NULL) {
 800eef0:	b11f      	cbz	r7, 800eefa <lv_btn_create+0x86>
 * @param btn pointer to a button object
 * @param layout a layout from 'lv_cont_layout_t'
 */
static inline void lv_btn_set_layout(lv_obj_t * btn, lv_layout_t layout)
{
    lv_cont_set_layout(btn, layout);
 800eef2:	2101      	movs	r1, #1
 800eef4:	4628      	mov	r0, r5
 800eef6:	f001 fbe3 	bl	80106c0 <lv_cont_set_layout>
        lv_obj_set_click(new_btn, true);        /*Be sure the button is clickable*/
 800eefa:	2101      	movs	r1, #1
 800eefc:	4628      	mov	r0, r5
 800eefe:	f7f9 fd8b 	bl	8008a18 <lv_obj_set_click>
        lv_theme_t * th = lv_theme_get_current();
 800ef02:	f006 fdb7 	bl	8015a74 <lv_theme_get_current>
        if(th) {
 800ef06:	4606      	mov	r6, r0
 800ef08:	b1d0      	cbz	r0, 800ef40 <lv_btn_create+0xcc>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_REL, th->btn.rel);
 800ef0a:	68c2      	ldr	r2, [r0, #12]
 800ef0c:	2100      	movs	r1, #0
 800ef0e:	4628      	mov	r0, r5
 800ef10:	f7ff ff8f 	bl	800ee32 <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_PR, th->btn.pr);
 800ef14:	6932      	ldr	r2, [r6, #16]
 800ef16:	2101      	movs	r1, #1
 800ef18:	4628      	mov	r0, r5
 800ef1a:	f7ff ff8a 	bl	800ee32 <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_TGL_REL, th->btn.tgl_rel);
 800ef1e:	6972      	ldr	r2, [r6, #20]
 800ef20:	2102      	movs	r1, #2
 800ef22:	4628      	mov	r0, r5
 800ef24:	f7ff ff85 	bl	800ee32 <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_TGL_PR, th->btn.tgl_pr);
 800ef28:	69b2      	ldr	r2, [r6, #24]
 800ef2a:	2103      	movs	r1, #3
 800ef2c:	4628      	mov	r0, r5
 800ef2e:	f7ff ff80 	bl	800ee32 <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_INA, th->btn.ina);
 800ef32:	69f2      	ldr	r2, [r6, #28]
 800ef34:	2104      	movs	r1, #4
 800ef36:	4628      	mov	r0, r5
 800ef38:	f7ff ff7b 	bl	800ee32 <lv_btn_set_style>
}
 800ef3c:	4628      	mov	r0, r5
 800ef3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_obj_set_style(new_btn, ext->styles[LV_BTN_STATE_REL]);
 800ef40:	6961      	ldr	r1, [r4, #20]
 800ef42:	4628      	mov	r0, r5
 800ef44:	f7f9 fe60 	bl	8008c08 <lv_obj_set_style>
 800ef48:	e7f8      	b.n	800ef3c <lv_btn_create+0xc8>
        lv_btn_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 800ef4a:	4630      	mov	r0, r6
 800ef4c:	f7f9 ff95 	bl	8008e7a <lv_obj_get_ext_attr>
        ext->state = copy_ext->state;
 800ef50:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
        memcpy(ext->actions, copy_ext->actions, sizeof(ext->actions));
 800ef54:	f100 0114 	add.w	r1, r0, #20
        ext->state = copy_ext->state;
 800ef58:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        ext->toggle = copy_ext->toggle;
 800ef5c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 800ef60:	f890 2029 	ldrb.w	r2, [r0, #41]	; 0x29
 800ef64:	f362 0300 	bfi	r3, r2, #0, #1
        memcpy(ext->actions, copy_ext->actions, sizeof(ext->actions));
 800ef68:	1d22      	adds	r2, r4, #4
        ext->toggle = copy_ext->toggle;
 800ef6a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
        memcpy(ext->actions, copy_ext->actions, sizeof(ext->actions));
 800ef6e:	1d03      	adds	r3, r0, #4
 800ef70:	f853 6b04 	ldr.w	r6, [r3], #4
 800ef74:	428b      	cmp	r3, r1
 800ef76:	f842 6b04 	str.w	r6, [r2], #4
 800ef7a:	d1f9      	bne.n	800ef70 <lv_btn_create+0xfc>
        memcpy(ext->styles, copy_ext->styles, sizeof(ext->styles));
 800ef7c:	3414      	adds	r4, #20
 800ef7e:	3028      	adds	r0, #40	; 0x28
 800ef80:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef84:	4283      	cmp	r3, r0
 800ef86:	f844 2b04 	str.w	r2, [r4], #4
 800ef8a:	d1f9      	bne.n	800ef80 <lv_btn_create+0x10c>
        lv_obj_refresh_style(new_btn);
 800ef8c:	4628      	mov	r0, r5
 800ef8e:	f7f9 fd35 	bl	80089fc <lv_obj_refresh_style>
 800ef92:	e7d3      	b.n	800ef3c <lv_btn_create+0xc8>
 800ef94:	200173f8 	.word	0x200173f8
 800ef98:	200173f4 	.word	0x200173f4
 800ef9c:	20017c10 	.word	0x20017c10
 800efa0:	0800efd5 	.word	0x0800efd5
 800efa4:	20017c58 	.word	0x20017c58
 800efa8:	20017e08 	.word	0x20017e08
 800efac:	20017e98 	.word	0x20017e98
 800efb0:	20017d30 	.word	0x20017d30
 800efb4:	0800edd5 	.word	0x0800edd5

0800efb8 <lv_btn_get_state>:
{
 800efb8:	b508      	push	{r3, lr}
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 800efba:	f7f9 ff5e 	bl	8008e7a <lv_obj_get_ext_attr>
}
 800efbe:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
 800efc2:	bd08      	pop	{r3, pc}

0800efc4 <lv_btn_get_toggle>:
{
 800efc4:	b508      	push	{r3, lr}
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 800efc6:	f7f9 ff58 	bl	8008e7a <lv_obj_get_ext_attr>
    return ext->toggle != 0 ? true : false;
 800efca:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
}
 800efce:	f000 0001 	and.w	r0, r0, #1
 800efd2:	bd08      	pop	{r3, pc}

0800efd4 <lv_btn_signal>:
static lv_res_t lv_btn_signal(lv_obj_t * btn, lv_signal_t sign, void * param)
{
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(btn, sign, param);
 800efd4:	4b6e      	ldr	r3, [pc, #440]	; (800f190 <lv_btn_signal+0x1bc>)
{
 800efd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    res = ancestor_signal(btn, sign, param);
 800efda:	681b      	ldr	r3, [r3, #0]
{
 800efdc:	4604      	mov	r4, r0
 800efde:	460f      	mov	r7, r1
 800efe0:	4690      	mov	r8, r2
    res = ancestor_signal(btn, sign, param);
 800efe2:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 800efe4:	2801      	cmp	r0, #1
    res = ancestor_signal(btn, sign, param);
 800efe6:	4681      	mov	r9, r0
    if(res != LV_RES_OK) return res;
 800efe8:	d130      	bne.n	800f04c <lv_btn_signal+0x78>

    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 800efea:	4620      	mov	r0, r4
 800efec:	f7f9 ff45 	bl	8008e7a <lv_obj_get_ext_attr>
 800eff0:	4605      	mov	r5, r0
    lv_btn_state_t state = lv_btn_get_state(btn);
 800eff2:	4620      	mov	r0, r4
 800eff4:	f7ff ffe0 	bl	800efb8 <lv_btn_get_state>
 800eff8:	4606      	mov	r6, r0
    bool tgl = lv_btn_get_toggle(btn);
 800effa:	4620      	mov	r0, r4
 800effc:	f7ff ffe2 	bl	800efc4 <lv_btn_get_toggle>

    if(sign == LV_SIGNAL_PRESSED) {
 800f000:	2f06      	cmp	r7, #6
    bool tgl = lv_btn_get_toggle(btn);
 800f002:	4682      	mov	sl, r0
    if(sign == LV_SIGNAL_PRESSED) {
 800f004:	d118      	bne.n	800f038 <lv_btn_signal+0x64>
        /*Refresh the state*/
        if(ext->state == LV_BTN_STATE_REL) {
 800f006:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 800f00a:	b98b      	cbnz	r3, 800f030 <lv_btn_signal+0x5c>
            lv_btn_set_state(btn, LV_BTN_STATE_PR);
 800f00c:	4649      	mov	r1, r9
#if USE_LV_ANIMATION && LV_BTN_INK_EFFECT
            ink_bg_state = LV_BTN_STATE_REL;
            ink_top_state = LV_BTN_STATE_PR;
#endif
        } else if(ext->state == LV_BTN_STATE_TGL_REL) {
            lv_btn_set_state(btn, LV_BTN_STATE_TGL_PR);
 800f00e:	4620      	mov	r0, r4
 800f010:	f7ff fef0 	bl	800edf4 <lv_btn_set_state>
            ink_bg_state = LV_BTN_STATE_TGL_REL;
            ink_top_state = LV_BTN_STATE_TGL_PR;
#endif
        }

        ext->long_pr_action_executed = 0;
 800f014:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 800f018:	f36f 0341 	bfc	r3, #1, #1
 800f01c:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
            a.repeat_pause = 0;
            lv_anim_create(&a);
        }
#endif
        /*Call the press action, 'param' is the caller indev_proc*/
        if(ext->actions[LV_BTN_ACTION_PR] && state != LV_BTN_STATE_INA) {
 800f020:	68ab      	ldr	r3, [r5, #8]
        if(ext->actions[LV_BTN_ACTION_LONG_PR] && state != LV_BTN_STATE_INA) {
            ext->long_pr_action_executed = 1;
            res = ext->actions[LV_BTN_ACTION_LONG_PR](btn);
        }
    } else if(sign == LV_SIGNAL_LONG_PRESS_REP) {
        if(ext->actions[LV_BTN_ACTION_LONG_PR_REPEAT] && state != LV_BTN_STATE_INA) {
 800f022:	b19b      	cbz	r3, 800f04c <lv_btn_signal+0x78>
 800f024:	2e04      	cmp	r6, #4
 800f026:	d011      	beq.n	800f04c <lv_btn_signal+0x78>
                res = ext->actions[LV_BTN_ACTION_CLICK](btn);
            }
        } else if(c == LV_GROUP_KEY_LEFT || c == LV_GROUP_KEY_DOWN) {
            if(lv_btn_get_toggle(btn) != false) lv_btn_set_state(btn, LV_BTN_STATE_REL);
            if(ext->actions[LV_BTN_ACTION_CLICK] && lv_btn_get_state(btn) != LV_BTN_STATE_INA) {
                res = ext->actions[LV_BTN_ACTION_CLICK](btn);
 800f028:	4620      	mov	r0, r4
        }
        buf->type[i] = "lv_btn";
    }

    return res;
}
 800f02a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                res = ext->actions[LV_BTN_ACTION_CLICK](btn);
 800f02e:	4718      	bx	r3
        } else if(ext->state == LV_BTN_STATE_TGL_REL) {
 800f030:	2b02      	cmp	r3, #2
 800f032:	d1ef      	bne.n	800f014 <lv_btn_signal+0x40>
            lv_btn_set_state(btn, LV_BTN_STATE_TGL_PR);
 800f034:	2103      	movs	r1, #3
 800f036:	e7ea      	b.n	800f00e <lv_btn_signal+0x3a>
    } else if(sign == LV_SIGNAL_PRESS_LOST) {
 800f038:	2f08      	cmp	r7, #8
 800f03a:	d10e      	bne.n	800f05a <lv_btn_signal+0x86>
        if(ext->state == LV_BTN_STATE_PR) lv_btn_set_state(btn, LV_BTN_STATE_REL);
 800f03c:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 800f040:	2b01      	cmp	r3, #1
 800f042:	d106      	bne.n	800f052 <lv_btn_signal+0x7e>
 800f044:	2100      	movs	r1, #0
        else if(ext->state == LV_BTN_STATE_TGL_PR) lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 800f046:	4620      	mov	r0, r4
 800f048:	f7ff fed4 	bl	800edf4 <lv_btn_set_state>
}
 800f04c:	4648      	mov	r0, r9
 800f04e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else if(ext->state == LV_BTN_STATE_TGL_PR) lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 800f052:	2b03      	cmp	r3, #3
 800f054:	d1fa      	bne.n	800f04c <lv_btn_signal+0x78>
 800f056:	2102      	movs	r1, #2
 800f058:	e7f5      	b.n	800f046 <lv_btn_signal+0x72>
    } else if(sign == LV_SIGNAL_PRESSING) {
 800f05a:	2f07      	cmp	r7, #7
 800f05c:	d105      	bne.n	800f06a <lv_btn_signal+0x96>
        if(lv_indev_is_dragging(param) != false) {
 800f05e:	4640      	mov	r0, r8
 800f060:	f7f9 f8aa 	bl	80081b8 <lv_indev_is_dragging>
 800f064:	2800      	cmp	r0, #0
 800f066:	d1e9      	bne.n	800f03c <lv_btn_signal+0x68>
 800f068:	e7f0      	b.n	800f04c <lv_btn_signal+0x78>
    } else if(sign == LV_SIGNAL_RELEASED) {
 800f06a:	2f09      	cmp	r7, #9
 800f06c:	d11c      	bne.n	800f0a8 <lv_btn_signal+0xd4>
        if(lv_indev_is_dragging(param) == false && ext->long_pr_action_executed == 0) {
 800f06e:	4640      	mov	r0, r8
 800f070:	f7f9 f8a2 	bl	80081b8 <lv_indev_is_dragging>
 800f074:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 800f078:	2800      	cmp	r0, #0
 800f07a:	d1e1      	bne.n	800f040 <lv_btn_signal+0x6c>
 800f07c:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 800f080:	0792      	lsls	r2, r2, #30
 800f082:	d4dd      	bmi.n	800f040 <lv_btn_signal+0x6c>
            if(ext->state == LV_BTN_STATE_PR && tgl == false) {
 800f084:	2b01      	cmp	r3, #1
 800f086:	d108      	bne.n	800f09a <lv_btn_signal+0xc6>
 800f088:	f1ba 0f00 	cmp.w	sl, #0
 800f08c:	d10a      	bne.n	800f0a4 <lv_btn_signal+0xd0>
                lv_btn_set_state(btn, LV_BTN_STATE_REL);
 800f08e:	2100      	movs	r1, #0
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 800f090:	4620      	mov	r0, r4
 800f092:	f7ff feaf 	bl	800edf4 <lv_btn_set_state>
            if(ext->actions[LV_BTN_ACTION_CLICK] && state != LV_BTN_STATE_INA) {
 800f096:	686b      	ldr	r3, [r5, #4]
 800f098:	e7c3      	b.n	800f022 <lv_btn_signal+0x4e>
            } else if(ext->state == LV_BTN_STATE_TGL_PR && tgl == false) {
 800f09a:	2b03      	cmp	r3, #3
 800f09c:	d1fb      	bne.n	800f096 <lv_btn_signal+0xc2>
 800f09e:	f1ba 0f00 	cmp.w	sl, #0
 800f0a2:	d1f4      	bne.n	800f08e <lv_btn_signal+0xba>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 800f0a4:	2102      	movs	r1, #2
 800f0a6:	e7f3      	b.n	800f090 <lv_btn_signal+0xbc>
    } else if(sign == LV_SIGNAL_LONG_PRESS) {
 800f0a8:	2f0a      	cmp	r7, #10
 800f0aa:	d10e      	bne.n	800f0ca <lv_btn_signal+0xf6>
        if(ext->actions[LV_BTN_ACTION_LONG_PR] && state != LV_BTN_STATE_INA) {
 800f0ac:	68ea      	ldr	r2, [r5, #12]
 800f0ae:	2a00      	cmp	r2, #0
 800f0b0:	d0cc      	beq.n	800f04c <lv_btn_signal+0x78>
 800f0b2:	2e04      	cmp	r6, #4
 800f0b4:	d0ca      	beq.n	800f04c <lv_btn_signal+0x78>
            ext->long_pr_action_executed = 1;
 800f0b6:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
            res = ext->actions[LV_BTN_ACTION_LONG_PR](btn);
 800f0ba:	4620      	mov	r0, r4
            ext->long_pr_action_executed = 1;
 800f0bc:	f043 0302 	orr.w	r3, r3, #2
 800f0c0:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
}
 800f0c4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            res = ext->actions[LV_BTN_ACTION_LONG_PR](btn);
 800f0c8:	4710      	bx	r2
    } else if(sign == LV_SIGNAL_LONG_PRESS_REP) {
 800f0ca:	2f0b      	cmp	r7, #11
 800f0cc:	d101      	bne.n	800f0d2 <lv_btn_signal+0xfe>
        if(ext->actions[LV_BTN_ACTION_LONG_PR_REPEAT] && state != LV_BTN_STATE_INA) {
 800f0ce:	692b      	ldr	r3, [r5, #16]
 800f0d0:	e7a7      	b.n	800f022 <lv_btn_signal+0x4e>
    } else if(sign == LV_SIGNAL_CONTROLL) {
 800f0d2:	2f10      	cmp	r7, #16
 800f0d4:	d14c      	bne.n	800f170 <lv_btn_signal+0x19c>
        char c = *((char *)param);
 800f0d6:	f898 3000 	ldrb.w	r3, [r8]
        if(c == LV_GROUP_KEY_RIGHT || c == LV_GROUP_KEY_UP) {
 800f0da:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800f0de:	2a11      	cmp	r2, #17
 800f0e0:	d111      	bne.n	800f106 <lv_btn_signal+0x132>
            if(lv_btn_get_toggle(btn) != false) lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 800f0e2:	4620      	mov	r0, r4
 800f0e4:	f7ff ff6e 	bl	800efc4 <lv_btn_get_toggle>
 800f0e8:	b118      	cbz	r0, 800f0f2 <lv_btn_signal+0x11e>
 800f0ea:	2102      	movs	r1, #2
            if(lv_btn_get_toggle(btn) != false) lv_btn_set_state(btn, LV_BTN_STATE_REL);
 800f0ec:	4620      	mov	r0, r4
 800f0ee:	f7ff fe81 	bl	800edf4 <lv_btn_set_state>
            if(ext->actions[LV_BTN_ACTION_CLICK] && lv_btn_get_state(btn) != LV_BTN_STATE_INA) {
 800f0f2:	686b      	ldr	r3, [r5, #4]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d0a9      	beq.n	800f04c <lv_btn_signal+0x78>
 800f0f8:	4620      	mov	r0, r4
 800f0fa:	f7ff ff5d 	bl	800efb8 <lv_btn_get_state>
 800f0fe:	2804      	cmp	r0, #4
 800f100:	d0a4      	beq.n	800f04c <lv_btn_signal+0x78>
                res = ext->actions[LV_BTN_ACTION_CLICK](btn);
 800f102:	686b      	ldr	r3, [r5, #4]
 800f104:	e790      	b.n	800f028 <lv_btn_signal+0x54>
        } else if(c == LV_GROUP_KEY_LEFT || c == LV_GROUP_KEY_DOWN) {
 800f106:	2b14      	cmp	r3, #20
 800f108:	d001      	beq.n	800f10e <lv_btn_signal+0x13a>
 800f10a:	2b12      	cmp	r3, #18
 800f10c:	d106      	bne.n	800f11c <lv_btn_signal+0x148>
            if(lv_btn_get_toggle(btn) != false) lv_btn_set_state(btn, LV_BTN_STATE_REL);
 800f10e:	4620      	mov	r0, r4
 800f110:	f7ff ff58 	bl	800efc4 <lv_btn_get_toggle>
 800f114:	2800      	cmp	r0, #0
 800f116:	d0ec      	beq.n	800f0f2 <lv_btn_signal+0x11e>
 800f118:	2100      	movs	r1, #0
 800f11a:	e7e7      	b.n	800f0ec <lv_btn_signal+0x118>
        } else if(c == LV_GROUP_KEY_ENTER) {
 800f11c:	2b0a      	cmp	r3, #10
 800f11e:	d195      	bne.n	800f04c <lv_btn_signal+0x78>
            if(!ext->long_pr_action_executed) {
 800f120:	f895 1029 	ldrb.w	r1, [r5, #41]	; 0x29
 800f124:	f011 0702 	ands.w	r7, r1, #2
 800f128:	d10f      	bne.n	800f14a <lv_btn_signal+0x176>
                if(lv_btn_get_toggle(btn)) {
 800f12a:	4620      	mov	r0, r4
 800f12c:	f7ff ff4a 	bl	800efc4 <lv_btn_get_toggle>
 800f130:	b120      	cbz	r0, 800f13c <lv_btn_signal+0x168>
                    if(state == LV_BTN_STATE_REL) lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 800f132:	b98e      	cbnz	r6, 800f158 <lv_btn_signal+0x184>
 800f134:	2102      	movs	r1, #2
                    else if(state == LV_BTN_STATE_TGL_PR) lv_btn_set_state(btn, LV_BTN_STATE_PR);
 800f136:	4620      	mov	r0, r4
 800f138:	f7ff fe5c 	bl	800edf4 <lv_btn_set_state>
                if(ext->actions[LV_BTN_ACTION_CLICK] && state != LV_BTN_STATE_INA) {
 800f13c:	686b      	ldr	r3, [r5, #4]
 800f13e:	b123      	cbz	r3, 800f14a <lv_btn_signal+0x176>
 800f140:	2e04      	cmp	r6, #4
 800f142:	d002      	beq.n	800f14a <lv_btn_signal+0x176>
                    res = ext->actions[LV_BTN_ACTION_CLICK](btn);
 800f144:	4620      	mov	r0, r4
 800f146:	4798      	blx	r3
 800f148:	4681      	mov	r9, r0
            ext->long_pr_action_executed  = 0;
 800f14a:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 800f14e:	f36f 0341 	bfc	r3, #1, #1
 800f152:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
 800f156:	e779      	b.n	800f04c <lv_btn_signal+0x78>
                    else if(state == LV_BTN_STATE_PR) lv_btn_set_state(btn, LV_BTN_STATE_TGL_PR);
 800f158:	2e01      	cmp	r6, #1
 800f15a:	d101      	bne.n	800f160 <lv_btn_signal+0x18c>
 800f15c:	2103      	movs	r1, #3
 800f15e:	e7ea      	b.n	800f136 <lv_btn_signal+0x162>
                    else if(state == LV_BTN_STATE_TGL_REL) lv_btn_set_state(btn, LV_BTN_STATE_REL);
 800f160:	2e02      	cmp	r6, #2
 800f162:	d101      	bne.n	800f168 <lv_btn_signal+0x194>
 800f164:	4639      	mov	r1, r7
 800f166:	e7e6      	b.n	800f136 <lv_btn_signal+0x162>
                    else if(state == LV_BTN_STATE_TGL_PR) lv_btn_set_state(btn, LV_BTN_STATE_PR);
 800f168:	2e03      	cmp	r6, #3
 800f16a:	d1e7      	bne.n	800f13c <lv_btn_signal+0x168>
 800f16c:	2101      	movs	r1, #1
 800f16e:	e7e2      	b.n	800f136 <lv_btn_signal+0x162>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 800f170:	2f05      	cmp	r7, #5
 800f172:	f47f af6b 	bne.w	800f04c <lv_btn_signal+0x78>
 800f176:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 800f178:	f858 1023 	ldr.w	r1, [r8, r3, lsl #2]
 800f17c:	b2da      	uxtb	r2, r3
 800f17e:	b119      	cbz	r1, 800f188 <lv_btn_signal+0x1b4>
 800f180:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) {  /*Find the last set data*/
 800f182:	2b07      	cmp	r3, #7
 800f184:	d1f8      	bne.n	800f178 <lv_btn_signal+0x1a4>
 800f186:	461a      	mov	r2, r3
        buf->type[i] = "lv_btn";
 800f188:	4b02      	ldr	r3, [pc, #8]	; (800f194 <lv_btn_signal+0x1c0>)
 800f18a:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
 800f18e:	e75d      	b.n	800f04c <lv_btn_signal+0x78>
 800f190:	200173f8 	.word	0x200173f8
 800f194:	08087e83 	.word	0x08087e83

0800f198 <lv_btn_get_action>:
    if(type >= LV_BTN_ACTION_NUM) return NULL;
 800f198:	2903      	cmp	r1, #3
{
 800f19a:	b510      	push	{r4, lr}
 800f19c:	460c      	mov	r4, r1
    if(type >= LV_BTN_ACTION_NUM) return NULL;
 800f19e:	d805      	bhi.n	800f1ac <lv_btn_get_action+0x14>
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 800f1a0:	f7f9 fe6b 	bl	8008e7a <lv_obj_get_ext_attr>
    return ext->actions[type];
 800f1a4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800f1a8:	6840      	ldr	r0, [r0, #4]
 800f1aa:	bd10      	pop	{r4, pc}
    if(type >= LV_BTN_ACTION_NUM) return NULL;
 800f1ac:	2000      	movs	r0, #0
}
 800f1ae:	bd10      	pop	{r4, pc}

0800f1b0 <get_button_text>:
 * @param btnm pointer to a button matrix object
 * @param btn_id button id
 * @return text id in ext->map_p or LV_BTNM_PR_NONE if 'btn_id' was invalid
 */
static uint16_t get_button_text(lv_obj_t * btnm, uint16_t btn_id)
{
 800f1b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1b4:	4688      	mov	r8, r1
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 800f1b6:	f7f9 fe60 	bl	8008e7a <lv_obj_get_ext_attr>
    if(btn_id > ext->btn_cnt) return LV_BTNM_PR_NONE;
 800f1ba:	8c07      	ldrh	r7, [r0, #32]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 800f1bc:	4681      	mov	r9, r0
    if(btn_id > ext->btn_cnt) return LV_BTNM_PR_NONE;
 800f1be:	4547      	cmp	r7, r8
 800f1c0:	d31c      	bcc.n	800f1fc <get_button_text+0x4c>
 800f1c2:	2500      	movs	r5, #0
    /* Search the text of ext->btn_pr the buttons text in the map
     * Skip "\n"-s*/
    while(btn_i != btn_id) {
        btn_i ++;
        txt_i ++;
        if(strcmp(ext->map_p[txt_i], "\n") == 0) txt_i ++;
 800f1c4:	f8df a03c 	ldr.w	sl, [pc, #60]	; 800f204 <get_button_text+0x54>
    if(btn_id > ext->btn_cnt) return LV_BTNM_PR_NONE;
 800f1c8:	462c      	mov	r4, r5
    while(btn_i != btn_id) {
 800f1ca:	4545      	cmp	r5, r8
 800f1cc:	d107      	bne.n	800f1de <get_button_text+0x2e>
    if(btn_id > ext->btn_cnt) return LV_BTNM_PR_NONE;
 800f1ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f1d2:	42af      	cmp	r7, r5
 800f1d4:	bf08      	it	eq
 800f1d6:	461c      	moveq	r4, r3
    }

    if(btn_i == ext->btn_cnt) return  LV_BTNM_PR_NONE;

    return txt_i;
}
 800f1d8:	4620      	mov	r0, r4
 800f1da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        txt_i ++;
 800f1de:	1c66      	adds	r6, r4, #1
        if(strcmp(ext->map_p[txt_i], "\n") == 0) txt_i ++;
 800f1e0:	f8d9 3000 	ldr.w	r3, [r9]
 800f1e4:	4651      	mov	r1, sl
        txt_i ++;
 800f1e6:	b2b6      	uxth	r6, r6
        if(strcmp(ext->map_p[txt_i], "\n") == 0) txt_i ++;
 800f1e8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f1ec:	f7f1 f80c 	bl	8000208 <strcmp>
 800f1f0:	b908      	cbnz	r0, 800f1f6 <get_button_text+0x46>
 800f1f2:	3402      	adds	r4, #2
 800f1f4:	b2a6      	uxth	r6, r4
 800f1f6:	3501      	adds	r5, #1
    if(btn_id > ext->btn_cnt) return LV_BTNM_PR_NONE;
 800f1f8:	4634      	mov	r4, r6
 800f1fa:	e7e6      	b.n	800f1ca <get_button_text+0x1a>
 800f1fc:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800f200:	e7ea      	b.n	800f1d8 <get_button_text+0x28>
 800f202:	bf00      	nop
 800f204:	08087e8a 	.word	0x08087e8a

0800f208 <get_button_from_point>:
{
 800f208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f20a:	4604      	mov	r4, r0
 800f20c:	b085      	sub	sp, #20
    for(i = 0; i < ext->btn_cnt; i++) {
 800f20e:	2500      	movs	r5, #0
{
 800f210:	460e      	mov	r6, r1
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 800f212:	f7f9 fe32 	bl	8008e7a <lv_obj_get_ext_attr>
    lv_obj_get_coords(btnm, &btnm_cords);
 800f216:	4669      	mov	r1, sp
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 800f218:	4607      	mov	r7, r0
    lv_obj_get_coords(btnm, &btnm_cords);
 800f21a:	4620      	mov	r0, r4
 800f21c:	f7f9 fd44 	bl	8008ca8 <lv_obj_get_coords>
 800f220:	b2ac      	uxth	r4, r5
    for(i = 0; i < ext->btn_cnt; i++) {
 800f222:	8c3b      	ldrh	r3, [r7, #32]
 800f224:	42a3      	cmp	r3, r4
 800f226:	d926      	bls.n	800f276 <get_button_from_point+0x6e>
        lv_area_copy(&btn_area, &ext->button_areas[i]);
 800f228:	687a      	ldr	r2, [r7, #4]
 800f22a:	b2ab      	uxth	r3, r5
 800f22c:	3501      	adds	r5, #1
 800f22e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    memcpy(dest, src, sizeof(lv_area_t));
 800f232:	ab02      	add	r3, sp, #8
 800f234:	6810      	ldr	r0, [r2, #0]
 800f236:	6851      	ldr	r1, [r2, #4]
        btn_area.x1 += btnm_cords.x1;
 800f238:	f8bd 2000 	ldrh.w	r2, [sp]
 800f23c:	c303      	stmia	r3!, {r0, r1}
 800f23e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
        if(lv_area_is_point_on(&btn_area, p) != false) {
 800f242:	a802      	add	r0, sp, #8
        btn_area.y1 += btnm_cords.y1;
 800f244:	f8bd 100a 	ldrh.w	r1, [sp, #10]
        btn_area.x1 += btnm_cords.x1;
 800f248:	4413      	add	r3, r2
 800f24a:	f8ad 3008 	strh.w	r3, [sp, #8]
        btn_area.y1 += btnm_cords.y1;
 800f24e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800f252:	4419      	add	r1, r3
 800f254:	f8ad 100a 	strh.w	r1, [sp, #10]
        btn_area.x2 += btnm_cords.x1;
 800f258:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800f25c:	440a      	add	r2, r1
        if(lv_area_is_point_on(&btn_area, p) != false) {
 800f25e:	4631      	mov	r1, r6
        btn_area.x2 += btnm_cords.x1;
 800f260:	f8ad 200c 	strh.w	r2, [sp, #12]
        btn_area.y2 += btnm_cords.y1;
 800f264:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800f268:	4413      	add	r3, r2
 800f26a:	f8ad 300e 	strh.w	r3, [sp, #14]
        if(lv_area_is_point_on(&btn_area, p) != false) {
 800f26e:	f7fe fb05 	bl	800d87c <lv_area_is_point_on>
 800f272:	2800      	cmp	r0, #0
 800f274:	d0d4      	beq.n	800f220 <get_button_from_point+0x18>
    if(i == ext->btn_cnt) i = LV_BTNM_PR_NONE;
 800f276:	8c3a      	ldrh	r2, [r7, #32]
 800f278:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f27c:	42a2      	cmp	r2, r4
 800f27e:	bf08      	it	eq
 800f280:	461c      	moveq	r4, r3
}
 800f282:	4620      	mov	r0, r4
 800f284:	b005      	add	sp, #20
 800f286:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f288 <lv_btnm_design>:
{
 800f288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
 800f28c:	2a02      	cmp	r2, #2
{
 800f28e:	b091      	sub	sp, #68	; 0x44
 800f290:	4681      	mov	r9, r0
 800f292:	4614      	mov	r4, r2
 800f294:	9108      	str	r1, [sp, #32]
    if(mode == LV_DESIGN_COVER_CHK) {
 800f296:	d105      	bne.n	800f2a4 <lv_btnm_design+0x1c>
        return ancestor_design_f(btnm, mask, mode);
 800f298:	4b84      	ldr	r3, [pc, #528]	; (800f4ac <lv_btnm_design+0x224>)
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	4798      	blx	r3
}
 800f29e:	b011      	add	sp, #68	; 0x44
 800f2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 800f2a4:	2a00      	cmp	r2, #0
 800f2a6:	f040 80b7 	bne.w	800f418 <lv_btnm_design+0x190>
        ancestor_design_f(btnm, mask, mode);
 800f2aa:	4b80      	ldr	r3, [pc, #512]	; (800f4ac <lv_btnm_design+0x224>)
        lv_obj_get_coords(btnm, &area_btnm);
 800f2ac:	46a0      	mov	r8, r4
        uint16_t txt_i = 0;
 800f2ae:	4626      	mov	r6, r4
        ancestor_design_f(btnm, mask, mode);
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	4798      	blx	r3
        lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 800f2b4:	4648      	mov	r0, r9
 800f2b6:	f7f9 fde0 	bl	8008e7a <lv_obj_get_ext_attr>
 800f2ba:	4607      	mov	r7, r0
        lv_style_t * bg_style = lv_obj_get_style(btnm);
 800f2bc:	4648      	mov	r0, r9
 800f2be:	f7f9 fd11 	bl	8008ce4 <lv_obj_get_style>
 800f2c2:	9009      	str	r0, [sp, #36]	; 0x24
        lv_opa_t opa_scale = lv_obj_get_opa_scale(btnm);
 800f2c4:	4648      	mov	r0, r9
 800f2c6:	f7f9 fd78 	bl	8008dba <lv_obj_get_opa_scale>
        lv_obj_get_coords(btnm, &area_btnm);
 800f2ca:	a90c      	add	r1, sp, #48	; 0x30
        lv_opa_t opa_scale = lv_obj_get_opa_scale(btnm);
 800f2cc:	9004      	str	r0, [sp, #16]
        lv_obj_get_coords(btnm, &area_btnm);
 800f2ce:	4648      	mov	r0, r9
 800f2d0:	f7f9 fcea 	bl	8008ca8 <lv_obj_get_coords>
 800f2d4:	fa1f f588 	uxth.w	r5, r8
        for(btn_i = 0; btn_i < ext->btn_cnt; btn_i ++, txt_i ++) {
 800f2d8:	8c3b      	ldrh	r3, [r7, #32]
 800f2da:	42ab      	cmp	r3, r5
 800f2dc:	f240 809c 	bls.w	800f418 <lv_btnm_design+0x190>
            while(strcmp(ext->map_p[txt_i], "\n") == 0) txt_i ++;
 800f2e0:	f8d7 a000 	ldr.w	sl, [r7]
 800f2e4:	e001      	b.n	800f2ea <lv_btnm_design+0x62>
 800f2e6:	3601      	adds	r6, #1
 800f2e8:	b2b6      	uxth	r6, r6
 800f2ea:	f85a 4026 	ldr.w	r4, [sl, r6, lsl #2]
 800f2ee:	ea4f 0b86 	mov.w	fp, r6, lsl #2
 800f2f2:	496f      	ldr	r1, [pc, #444]	; (800f4b0 <lv_btnm_design+0x228>)
 800f2f4:	4620      	mov	r0, r4
 800f2f6:	f7f0 ff87 	bl	8000208 <strcmp>
 800f2fa:	2800      	cmp	r0, #0
 800f2fc:	d0f3      	beq.n	800f2e6 <lv_btnm_design+0x5e>
    if(((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) &&
 800f2fe:	7823      	ldrb	r3, [r4, #0]
 800f300:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800f304:	2b88      	cmp	r3, #136	; 0x88
 800f306:	f040 8089 	bne.w	800f41c <lv_btnm_design+0x194>
        for(btn_i = 0; btn_i < ext->btn_cnt; btn_i ++, txt_i ++) {
 800f30a:	3601      	adds	r6, #1
 800f30c:	f108 0801 	add.w	r8, r8, #1
 800f310:	b2b6      	uxth	r6, r6
 800f312:	e7df      	b.n	800f2d4 <lv_btnm_design+0x4c>
            else if(btn_i != ext->btn_id_pr && btn_i != ext->btn_id_tgl) btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_REL);
 800f314:	42ab      	cmp	r3, r5
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 800f316:	4648      	mov	r0, r9
            else if(btn_i != ext->btn_id_pr && btn_i != ext->btn_id_tgl) btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_REL);
 800f318:	d073      	beq.n	800f402 <lv_btnm_design+0x17a>
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 800f31a:	f7f9 fdae 	bl	8008e7a <lv_obj_get_ext_attr>
            return ext->styles_btn[LV_BTN_STATE_REL];
 800f31e:	68c5      	ldr	r5, [r0, #12]
            if(ext->map_p[txt_i + 1][0] == '\0' || ext->map_p[txt_i + 1][0] == '\n') {
 800f320:	1c73      	adds	r3, r6, #1
 800f322:	683a      	ldr	r2, [r7, #0]
 800f324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f328:	781b      	ldrb	r3, [r3, #0]
 800f32a:	b10b      	cbz	r3, 800f330 <lv_btnm_design+0xa8>
 800f32c:	2b0a      	cmp	r3, #10
 800f32e:	d170      	bne.n	800f412 <lv_btnm_design+0x18a>
                if(btn_style->body.border.part == LV_BORDER_RIGHT) {
 800f330:	7dab      	ldrb	r3, [r5, #22]
 800f332:	f04f 0a00 	mov.w	sl, #0
 800f336:	2b08      	cmp	r3, #8
 800f338:	d103      	bne.n	800f342 <lv_btnm_design+0xba>
                    btn_style->body.border.part  = LV_BORDER_NONE;
 800f33a:	f885 a016 	strb.w	sl, [r5, #22]
                    border_mod = true;
 800f33e:	f04f 0a01 	mov.w	sl, #1
            lv_draw_rect(&area_tmp, mask, btn_style, opa_scale);
 800f342:	9b04      	ldr	r3, [sp, #16]
 800f344:	462a      	mov	r2, r5
 800f346:	9908      	ldr	r1, [sp, #32]
 800f348:	a80e      	add	r0, sp, #56	; 0x38
 800f34a:	f7fb fb9f 	bl	800aa8c <lv_draw_rect>
            if(border_mod) {
 800f34e:	f1ba 0f00 	cmp.w	sl, #0
 800f352:	d001      	beq.n	800f358 <lv_btnm_design+0xd0>
                btn_style->body.border.part = LV_BORDER_RIGHT;
 800f354:	2308      	movs	r3, #8
 800f356:	75ab      	strb	r3, [r5, #22]
    return area_p->x2 - area_p->x1 + 1;
 800f358:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
            lv_txt_get_size(&txt_size, ext->map_p[txt_i], font,
 800f35c:	f04f 0a00 	mov.w	sl, #0
            if(btn_style->glass) btn_style = bg_style;
 800f360:	782b      	ldrb	r3, [r5, #0]
 800f362:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 800f366:	3201      	adds	r2, #1
 800f368:	f013 0f01 	tst.w	r3, #1
 800f36c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f36e:	eba2 0200 	sub.w	r2, r2, r0
            lv_txt_get_size(&txt_size, ext->map_p[txt_i], font,
 800f372:	6839      	ldr	r1, [r7, #0]
            if(btn_style->glass) btn_style = bg_style;
 800f374:	bf18      	it	ne
 800f376:	461d      	movne	r5, r3
            lv_txt_get_size(&txt_size, ext->map_p[txt_i], font,
 800f378:	a80b      	add	r0, sp, #44	; 0x2c
 800f37a:	b212      	sxth	r2, r2
 800f37c:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
 800f380:	f8cd a008 	str.w	sl, [sp, #8]
 800f384:	9201      	str	r2, [sp, #4]
 800f386:	f9b5 2032 	ldrsh.w	r2, [r5, #50]	; 0x32
 800f38a:	9200      	str	r2, [sp, #0]
 800f38c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800f38e:	f851 100b 	ldr.w	r1, [r1, fp]
 800f392:	f7ff f911 	bl	800e5b8 <lv_txt_get_size>
 800f396:	9b05      	ldr	r3, [sp, #20]
 800f398:	1c62      	adds	r2, r4, #1
            area_tmp.x1 += (btn_w - txt_size.x) / 2;
 800f39a:	f9bd 002c 	ldrsh.w	r0, [sp, #44]	; 0x2c
 800f39e:	f04f 0e02 	mov.w	lr, #2
    return area_p->y2 - area_p->y1 + 1;
 800f3a2:	9c06      	ldr	r4, [sp, #24]
    return area_p->x2 - area_p->x1 + 1;
 800f3a4:	1ad2      	subs	r2, r2, r3
 800f3a6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
 800f3aa:	f9bd 102e 	ldrsh.w	r1, [sp, #46]	; 0x2e
            area_tmp.x1 += (btn_w - txt_size.x) / 2;
 800f3ae:	b212      	sxth	r2, r2
            lv_draw_label(&area_tmp, mask, btn_style, opa_scale,  ext->map_p[txt_i], LV_TXT_FLAG_NONE, NULL);
 800f3b0:	f8cd a008 	str.w	sl, [sp, #8]
 800f3b4:	f8cd a004 	str.w	sl, [sp, #4]
            area_tmp.x1 += (btn_w - txt_size.x) / 2;
 800f3b8:	1a12      	subs	r2, r2, r0
 800f3ba:	fb92 f2fe 	sdiv	r2, r2, lr
 800f3be:	441a      	add	r2, r3
    return area_p->y2 - area_p->y1 + 1;
 800f3c0:	9b07      	ldr	r3, [sp, #28]
 800f3c2:	3301      	adds	r3, #1
 800f3c4:	b292      	uxth	r2, r2
 800f3c6:	1b1b      	subs	r3, r3, r4
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
 800f3c8:	f8bd 403a 	ldrh.w	r4, [sp, #58]	; 0x3a
            area_tmp.x1 += (btn_w - txt_size.x) / 2;
 800f3cc:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
            area_tmp.x2 = area_tmp.x1 + txt_size.x;
 800f3d0:	4402      	add	r2, r0
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
 800f3d2:	b21b      	sxth	r3, r3
            lv_draw_label(&area_tmp, mask, btn_style, opa_scale,  ext->map_p[txt_i], LV_TXT_FLAG_NONE, NULL);
 800f3d4:	a80e      	add	r0, sp, #56	; 0x38
            area_tmp.x2 = area_tmp.x1 + txt_size.x;
 800f3d6:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
            lv_draw_label(&area_tmp, mask, btn_style, opa_scale,  ext->map_p[txt_i], LV_TXT_FLAG_NONE, NULL);
 800f3da:	462a      	mov	r2, r5
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
 800f3dc:	1a5b      	subs	r3, r3, r1
 800f3de:	fb93 f3fe 	sdiv	r3, r3, lr
 800f3e2:	4423      	add	r3, r4
 800f3e4:	b29b      	uxth	r3, r3
 800f3e6:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
            area_tmp.y2 = area_tmp.y1 + txt_size.y;
 800f3ea:	440b      	add	r3, r1
            lv_draw_label(&area_tmp, mask, btn_style, opa_scale,  ext->map_p[txt_i], LV_TXT_FLAG_NONE, NULL);
 800f3ec:	9908      	ldr	r1, [sp, #32]
            area_tmp.y2 = area_tmp.y1 + txt_size.y;
 800f3ee:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
            lv_draw_label(&area_tmp, mask, btn_style, opa_scale,  ext->map_p[txt_i], LV_TXT_FLAG_NONE, NULL);
 800f3f2:	683b      	ldr	r3, [r7, #0]
 800f3f4:	f853 300b 	ldr.w	r3, [r3, fp]
 800f3f8:	9300      	str	r3, [sp, #0]
 800f3fa:	9b04      	ldr	r3, [sp, #16]
 800f3fc:	f7fa fc62 	bl	8009cc4 <lv_draw_label>
 800f400:	e783      	b.n	800f30a <lv_btnm_design+0x82>
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 800f402:	f7f9 fd3a 	bl	8008e7a <lv_obj_get_ext_attr>
            return ext->styles_btn[LV_BTN_STATE_TGL_REL];
 800f406:	6945      	ldr	r5, [r0, #20]
 800f408:	e78a      	b.n	800f320 <lv_btnm_design+0x98>
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 800f40a:	f7f9 fd36 	bl	8008e7a <lv_obj_get_ext_attr>
            return ext->styles_btn[LV_BTN_STATE_TGL_PR];
 800f40e:	6985      	ldr	r5, [r0, #24]
 800f410:	e786      	b.n	800f320 <lv_btnm_design+0x98>
            if(ext->map_p[txt_i + 1][0] == '\0' || ext->map_p[txt_i + 1][0] == '\n') {
 800f412:	f04f 0a00 	mov.w	sl, #0
 800f416:	e794      	b.n	800f342 <lv_btnm_design+0xba>
    return true;
 800f418:	2001      	movs	r0, #1
 800f41a:	e740      	b.n	800f29e <lv_btnm_design+0x16>
            lv_area_copy(&area_tmp, &ext->button_areas[btn_i]);
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	fa1f f288 	uxth.w	r2, r8
            area_tmp.x1 += area_btnm.x1;
 800f422:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
            lv_area_copy(&area_tmp, &ext->button_areas[btn_i]);
 800f426:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    memcpy(dest, src, sizeof(lv_area_t));
 800f42a:	ab0e      	add	r3, sp, #56	; 0x38
 800f42c:	6810      	ldr	r0, [r2, #0]
 800f42e:	6851      	ldr	r1, [r2, #4]
 800f430:	c303      	stmia	r3!, {r0, r1}
            area_tmp.x1 += area_btnm.x1;
 800f432:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
            area_tmp.y1 += area_btnm.y1;
 800f436:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
            area_tmp.x1 += area_btnm.x1;
 800f43a:	4423      	add	r3, r4
 800f43c:	b29b      	uxth	r3, r3
 800f43e:	9305      	str	r3, [sp, #20]
 800f440:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800f444:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
            area_tmp.y1 += area_btnm.y1;
 800f448:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 800f44c:	441a      	add	r2, r3
 800f44e:	b292      	uxth	r2, r2
 800f450:	9206      	str	r2, [sp, #24]
 800f452:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 800f456:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
            area_tmp.x2 += area_btnm.x1;
 800f45a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 800f45e:	4414      	add	r4, r2
            area_tmp.y2 += area_btnm.y1;
 800f460:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 800f464:	4413      	add	r3, r2
            area_tmp.x2 += area_btnm.x1;
 800f466:	b2a4      	uxth	r4, r4
            area_tmp.y2 += area_btnm.y1;
 800f468:	b29b      	uxth	r3, r3
            area_tmp.x2 += area_btnm.x1;
 800f46a:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
            area_tmp.y2 += area_btnm.y1;
 800f46e:	9307      	str	r3, [sp, #28]
 800f470:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800f474:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
            if(button_is_inactive(ext->map_p[txt_i])) btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_INA);
 800f478:	683b      	ldr	r3, [r7, #0]
    if(((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) &&
 800f47a:	f853 300b 	ldr.w	r3, [r3, fp]
 800f47e:	781b      	ldrb	r3, [r3, #0]
 800f480:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800f484:	2ba0      	cmp	r3, #160	; 0xa0
 800f486:	d104      	bne.n	800f492 <lv_btnm_design+0x20a>
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 800f488:	4648      	mov	r0, r9
 800f48a:	f7f9 fcf6 	bl	8008e7a <lv_obj_get_ext_attr>
            return ext->styles_btn[LV_BTN_STATE_INA];
 800f48e:	69c5      	ldr	r5, [r0, #28]
 800f490:	e746      	b.n	800f320 <lv_btnm_design+0x98>
            else if(btn_i != ext->btn_id_pr && btn_i != ext->btn_id_tgl) btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_REL);
 800f492:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f494:	42ab      	cmp	r3, r5
 800f496:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f498:	f47f af3c 	bne.w	800f314 <lv_btnm_design+0x8c>
            else if(btn_i == ext->btn_id_pr && btn_i != ext->btn_id_tgl) btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_PR);
 800f49c:	42ab      	cmp	r3, r5
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 800f49e:	4648      	mov	r0, r9
            else if(btn_i == ext->btn_id_pr && btn_i != ext->btn_id_tgl) btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_PR);
 800f4a0:	d0b3      	beq.n	800f40a <lv_btnm_design+0x182>
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 800f4a2:	f7f9 fcea 	bl	8008e7a <lv_obj_get_ext_attr>
            return ext->styles_btn[LV_BTN_STATE_PR];
 800f4a6:	6905      	ldr	r5, [r0, #16]
 800f4a8:	e73a      	b.n	800f320 <lv_btnm_design+0x98>
 800f4aa:	bf00      	nop
 800f4ac:	200173fc 	.word	0x200173fc
 800f4b0:	08087e8a 	.word	0x08087e8a

0800f4b4 <lv_btnm_set_action>:
{
 800f4b4:	b510      	push	{r4, lr}
 800f4b6:	460c      	mov	r4, r1
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 800f4b8:	f7f9 fcdf 	bl	8008e7a <lv_obj_get_ext_attr>
    ext->action = action;
 800f4bc:	6084      	str	r4, [r0, #8]
 800f4be:	bd10      	pop	{r4, pc}

0800f4c0 <lv_btnm_set_toggle>:
{
 800f4c0:	b570      	push	{r4, r5, r6, lr}
 800f4c2:	460e      	mov	r6, r1
 800f4c4:	4605      	mov	r5, r0
 800f4c6:	4614      	mov	r4, r2
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 800f4c8:	f7f9 fcd7 	bl	8008e7a <lv_obj_get_ext_attr>
    ext->toggle = en == false ? 0 : 1;
 800f4cc:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 800f4d0:	f366 0300 	bfi	r3, r6, #0, #1
 800f4d4:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
    if(ext->toggle != 0) {
 800f4d8:	07db      	lsls	r3, r3, #31
 800f4da:	d50b      	bpl.n	800f4f4 <lv_btnm_set_toggle+0x34>
        if(id >= ext->btn_cnt) id = ext->btn_cnt - 1;
 800f4dc:	8c03      	ldrh	r3, [r0, #32]
 800f4de:	42a3      	cmp	r3, r4
 800f4e0:	bf9c      	itt	ls
 800f4e2:	f103 33ff 	addls.w	r3, r3, #4294967295
 800f4e6:	b29c      	uxthls	r4, r3
        ext->btn_id_tgl = id;
 800f4e8:	8484      	strh	r4, [r0, #36]	; 0x24
    lv_obj_invalidate(btnm);
 800f4ea:	4628      	mov	r0, r5
}
 800f4ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_invalidate(btnm);
 800f4f0:	f7f8 bee2 	b.w	80082b8 <lv_obj_invalidate>
        ext->btn_id_tgl = LV_BTNM_PR_NONE;
 800f4f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f4f8:	8483      	strh	r3, [r0, #36]	; 0x24
 800f4fa:	e7f6      	b.n	800f4ea <lv_btnm_set_toggle+0x2a>

0800f4fc <lv_btnm_set_style>:
{
 800f4fc:	b570      	push	{r4, r5, r6, lr}
 800f4fe:	460e      	mov	r6, r1
 800f500:	4604      	mov	r4, r0
 800f502:	4615      	mov	r5, r2
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 800f504:	f7f9 fcb9 	bl	8008e7a <lv_obj_get_ext_attr>
    switch(type) {
 800f508:	2e05      	cmp	r6, #5
 800f50a:	d818      	bhi.n	800f53e <lv_btnm_set_style+0x42>
 800f50c:	e8df f006 	tbb	[pc, r6]
 800f510:	110f0903 	.word	0x110f0903
 800f514:	1513      	.short	0x1513
            lv_obj_set_style(btnm, style);
 800f516:	4629      	mov	r1, r5
 800f518:	4620      	mov	r0, r4
}
 800f51a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_obj_set_style(btnm, style);
 800f51e:	f7f9 bb73 	b.w	8008c08 <lv_obj_set_style>
            ext->styles_btn[LV_BTN_STATE_REL] = style;
 800f522:	60c5      	str	r5, [r0, #12]
            lv_obj_invalidate(btnm);
 800f524:	4620      	mov	r0, r4
}
 800f526:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_obj_invalidate(btnm);
 800f52a:	f7f8 bec5 	b.w	80082b8 <lv_obj_invalidate>
            ext->styles_btn[LV_BTN_STATE_PR] = style;
 800f52e:	6105      	str	r5, [r0, #16]
 800f530:	e7f8      	b.n	800f524 <lv_btnm_set_style+0x28>
            ext->styles_btn[LV_BTN_STATE_TGL_REL] = style;
 800f532:	6145      	str	r5, [r0, #20]
 800f534:	e7f6      	b.n	800f524 <lv_btnm_set_style+0x28>
            ext->styles_btn[LV_BTN_STATE_TGL_PR] = style;
 800f536:	6185      	str	r5, [r0, #24]
 800f538:	e7f4      	b.n	800f524 <lv_btnm_set_style+0x28>
            ext->styles_btn[LV_BTN_STATE_INA] = style;
 800f53a:	61c5      	str	r5, [r0, #28]
 800f53c:	e7f2      	b.n	800f524 <lv_btnm_set_style+0x28>
 800f53e:	bd70      	pop	{r4, r5, r6, pc}

0800f540 <lv_btnm_get_map>:
{
 800f540:	b508      	push	{r3, lr}
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 800f542:	f7f9 fc9a 	bl	8008e7a <lv_obj_get_ext_attr>
}
 800f546:	6800      	ldr	r0, [r0, #0]
 800f548:	bd08      	pop	{r3, pc}

0800f54a <lv_btnm_get_style>:
{
 800f54a:	b538      	push	{r3, r4, r5, lr}
 800f54c:	460c      	mov	r4, r1
 800f54e:	4605      	mov	r5, r0
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 800f550:	f7f9 fc93 	bl	8008e7a <lv_obj_get_ext_attr>
    switch(type) {
 800f554:	2c05      	cmp	r4, #5
 800f556:	d813      	bhi.n	800f580 <lv_btnm_get_style+0x36>
 800f558:	e8df f004 	tbb	[pc, r4]
 800f55c:	0c0a0803 	.word	0x0c0a0803
 800f560:	100e      	.short	0x100e
            return lv_obj_get_style(btnm);
 800f562:	4628      	mov	r0, r5
}
 800f564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            return lv_obj_get_style(btnm);
 800f568:	f7f9 bbbc 	b.w	8008ce4 <lv_obj_get_style>
            return ext->styles_btn[LV_BTN_STATE_REL];
 800f56c:	68c0      	ldr	r0, [r0, #12]
 800f56e:	bd38      	pop	{r3, r4, r5, pc}
            return ext->styles_btn[LV_BTN_STATE_PR];
 800f570:	6900      	ldr	r0, [r0, #16]
 800f572:	bd38      	pop	{r3, r4, r5, pc}
            return ext->styles_btn[LV_BTN_STATE_TGL_REL];
 800f574:	6940      	ldr	r0, [r0, #20]
 800f576:	bd38      	pop	{r3, r4, r5, pc}
            return ext->styles_btn[LV_BTN_STATE_TGL_PR];
 800f578:	6980      	ldr	r0, [r0, #24]
 800f57a:	bd38      	pop	{r3, r4, r5, pc}
            return ext->styles_btn[LV_BTN_STATE_INA];
 800f57c:	69c0      	ldr	r0, [r0, #28]
 800f57e:	bd38      	pop	{r3, r4, r5, pc}
            return NULL;
 800f580:	2000      	movs	r0, #0
}
 800f582:	bd38      	pop	{r3, r4, r5, pc}

0800f584 <lv_btnm_set_map>:
{
 800f584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f588:	4607      	mov	r7, r0
 800f58a:	b08f      	sub	sp, #60	; 0x3c
    if(map == NULL) return;
 800f58c:	460c      	mov	r4, r1
 800f58e:	2900      	cmp	r1, #0
 800f590:	f000 8129 	beq.w	800f7e6 <lv_btnm_set_map+0x262>
    ext->map_p = map;
 800f594:	2600      	movs	r6, #0
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 800f596:	f7f9 fc70 	bl	8008e7a <lv_obj_get_ext_attr>
        if(strcmp(map[i], "\n") != 0) { /*Do not count line breaks*/
 800f59a:	f8df a250 	ldr.w	sl, [pc, #592]	; 800f7ec <lv_btnm_set_map+0x268>
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 800f59e:	4681      	mov	r9, r0
    uint16_t btn_cnt = 0;
 800f5a0:	4635      	mov	r5, r6
    ext->map_p = map;
 800f5a2:	6004      	str	r4, [r0, #0]
    while(strlen(map[i]) != 0) {
 800f5a4:	b2b3      	uxth	r3, r6
 800f5a6:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800f5aa:	f890 8000 	ldrb.w	r8, [r0]
 800f5ae:	f1b8 0f00 	cmp.w	r8, #0
 800f5b2:	d10f      	bne.n	800f5d4 <lv_btnm_set_map+0x50>
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 800f5b4:	4638      	mov	r0, r7
 800f5b6:	f7f9 fc60 	bl	8008e7a <lv_obj_get_ext_attr>
 800f5ba:	4606      	mov	r6, r0
    if(ext->button_areas != NULL) {
 800f5bc:	6840      	ldr	r0, [r0, #4]
 800f5be:	b118      	cbz	r0, 800f5c8 <lv_btnm_set_map+0x44>
        lv_mem_free(ext->button_areas);
 800f5c0:	f7fe fc66 	bl	800de90 <lv_mem_free>
        ext->button_areas = NULL;
 800f5c4:	f8c6 8004 	str.w	r8, [r6, #4]
    ext->button_areas = lv_mem_alloc(sizeof(lv_area_t) * btn_cnt);
 800f5c8:	00e8      	lsls	r0, r5, #3
 800f5ca:	f7fe fc3d 	bl	800de48 <lv_mem_alloc>
 800f5ce:	6070      	str	r0, [r6, #4]
    lv_mem_assert(ext->button_areas);
 800f5d0:	b940      	cbnz	r0, 800f5e4 <lv_btnm_set_map+0x60>
 800f5d2:	e7fe      	b.n	800f5d2 <lv_btnm_set_map+0x4e>
        if(strcmp(map[i], "\n") != 0) { /*Do not count line breaks*/
 800f5d4:	4651      	mov	r1, sl
 800f5d6:	f7f0 fe17 	bl	8000208 <strcmp>
 800f5da:	b108      	cbz	r0, 800f5e0 <lv_btnm_set_map+0x5c>
            btn_cnt ++;
 800f5dc:	3501      	adds	r5, #1
 800f5de:	b2ad      	uxth	r5, r5
 800f5e0:	3601      	adds	r6, #1
 800f5e2:	e7df      	b.n	800f5a4 <lv_btnm_set_map+0x20>
    ext->btn_cnt = btn_cnt;
 800f5e4:	8435      	strh	r5, [r6, #32]
    lv_style_t * style_bg = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BG);
 800f5e6:	2100      	movs	r1, #0
 800f5e8:	4638      	mov	r0, r7
    for(li = 0; strlen(map[li]) != 0; li++) {
 800f5ea:	f04f 0b00 	mov.w	fp, #0
    lv_style_t * style_bg = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BG);
 800f5ee:	f7ff ffac 	bl	800f54a <lv_btnm_get_style>
 800f5f2:	4605      	mov	r5, r0
    lv_coord_t max_w = lv_obj_get_width(btnm) - 2 * style_bg->body.padding.hor;
 800f5f4:	4638      	mov	r0, r7
    uint8_t line_cnt = 1;
 800f5f6:	f04f 0801 	mov.w	r8, #1
    lv_coord_t max_w = lv_obj_get_width(btnm) - 2 * style_bg->body.padding.hor;
 800f5fa:	f7f9 fb67 	bl	8008ccc <lv_obj_get_width>
 800f5fe:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 800f600:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 800f604:	b283      	uxth	r3, r0
    lv_coord_t max_h = lv_obj_get_height(btnm) - 2 * style_bg->body.padding.ver;
 800f606:	4638      	mov	r0, r7
    lv_coord_t max_w = lv_obj_get_width(btnm) - 2 * style_bg->body.padding.hor;
 800f608:	9309      	str	r3, [sp, #36]	; 0x24
    lv_coord_t max_h = lv_obj_get_height(btnm) - 2 * style_bg->body.padding.ver;
 800f60a:	f7f9 fb65 	bl	8008cd8 <lv_obj_get_height>
 800f60e:	f9b5 6020 	ldrsh.w	r6, [r5, #32]
 800f612:	eba0 0046 	sub.w	r0, r0, r6, lsl #1
 800f616:	fa1f fa80 	uxth.w	sl, r0
 800f61a:	fa0f f38a 	sxth.w	r3, sl
 800f61e:	930a      	str	r3, [sp, #40]	; 0x28
        if(strcmp(map[li], "\n") == 0) line_cnt ++;
 800f620:	4b72      	ldr	r3, [pc, #456]	; (800f7ec <lv_btnm_set_map+0x268>)
    for(li = 0; strlen(map[li]) != 0; li++) {
 800f622:	fa5f f28b 	uxtb.w	r2, fp
 800f626:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
 800f62a:	7802      	ldrb	r2, [r0, #0]
 800f62c:	2a00      	cmp	r2, #0
 800f62e:	d147      	bne.n	800f6c0 <lv_btnm_set_map+0x13c>
    lv_coord_t btn_h = max_h - ((line_cnt - 1) * style_bg->body.padding.inner);
 800f630:	f108 31ff 	add.w	r1, r8, #4294967295
 800f634:	8cab      	ldrh	r3, [r5, #36]	; 0x24
    uint16_t btn_i = 0;     /*Act. index of button areas*/
 800f636:	9206      	str	r2, [sp, #24]
    lv_coord_t btn_h = max_h - ((line_cnt - 1) * style_bg->body.padding.inner);
 800f638:	fb13 f301 	smulbb	r3, r3, r1
 800f63c:	ebaa 0303 	sub.w	r3, sl, r3
    btn_h = btn_h / line_cnt;
 800f640:	b21b      	sxth	r3, r3
 800f642:	fb93 f8f8 	sdiv	r8, r3, r8
    btn_h --;                              /*-1 because e.g. height = 100 means 101 pixels (0..100)*/
 800f646:	f108 38ff 	add.w	r8, r8, #4294967295
 800f64a:	fa0f f388 	sxth.w	r3, r8
 800f64e:	9302      	str	r3, [sp, #8]
            btn_h = max_h - act_y - 1;
 800f650:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f654:	930d      	str	r3, [sp, #52]	; 0x34
        while(strcmp(map_p_tmp[btn_cnt], "\n") != 0 &&
 800f656:	f04f 0800 	mov.w	r8, #0
        unit_cnt = 0;
 800f65a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f65e:	fa1f f388 	uxth.w	r3, r8
        while(strcmp(map_p_tmp[btn_cnt], "\n") != 0 &&
 800f662:	4962      	ldr	r1, [pc, #392]	; (800f7ec <lv_btnm_set_map+0x268>)
 800f664:	9304      	str	r3, [sp, #16]
 800f666:	9305      	str	r3, [sp, #20]
 800f668:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f66c:	930b      	str	r3, [sp, #44]	; 0x2c
 800f66e:	9b04      	ldr	r3, [sp, #16]
 800f670:	f854 a023 	ldr.w	sl, [r4, r3, lsl #2]
 800f674:	4650      	mov	r0, sl
 800f676:	f7f0 fdc7 	bl	8000208 <strcmp>
 800f67a:	2800      	cmp	r0, #0
 800f67c:	d12d      	bne.n	800f6da <lv_btnm_set_map+0x156>
        if(btn_cnt != 0) {
 800f67e:	9b05      	ldr	r3, [sp, #20]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d13c      	bne.n	800f6fe <lv_btnm_set_map+0x17a>
        act_y += btn_h + style_bg->body.padding.inner;
 800f684:	9b02      	ldr	r3, [sp, #8]
        if(style_bg->body.padding.ver == 0  &&
 800f686:	f9b5 2020 	ldrsh.w	r2, [r5, #32]
        act_y += btn_h + style_bg->body.padding.inner;
 800f68a:	4433      	add	r3, r6
 800f68c:	8cae      	ldrh	r6, [r5, #36]	; 0x24
 800f68e:	4433      	add	r3, r6
 800f690:	b29b      	uxth	r3, r3
 800f692:	b21e      	sxth	r6, r3
        if(style_bg->body.padding.ver == 0  &&
 800f694:	b94a      	cbnz	r2, 800f6aa <lv_btnm_set_map+0x126>
                act_y + btn_h * 2 > max_h) {         /*Last row?*/
 800f696:	9a02      	ldr	r2, [sp, #8]
        if(style_bg->body.padding.ver == 0  &&
 800f698:	990a      	ldr	r1, [sp, #40]	; 0x28
                act_y + btn_h * 2 > max_h) {         /*Last row?*/
 800f69a:	eb06 0242 	add.w	r2, r6, r2, lsl #1
        if(style_bg->body.padding.ver == 0  &&
 800f69e:	428a      	cmp	r2, r1
            btn_h = max_h - act_y - 1;
 800f6a0:	bfc1      	itttt	gt
 800f6a2:	9a0d      	ldrgt	r2, [sp, #52]	; 0x34
 800f6a4:	1ad3      	subgt	r3, r2, r3
 800f6a6:	b21b      	sxthgt	r3, r3
 800f6a8:	9302      	strgt	r3, [sp, #8]
        if(strlen(map_p_tmp[btn_cnt]) == 0) break; /*Break on end of map*/
 800f6aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	781b      	ldrb	r3, [r3, #0]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	f000 8092 	beq.w	800f7da <lv_btnm_set_map+0x256>
        map_p_tmp = &map_p_tmp[btn_cnt + 1]; /*Set the map to the next line*/
 800f6b6:	9b04      	ldr	r3, [sp, #16]
 800f6b8:	3301      	adds	r3, #1
 800f6ba:	eb04 0483 	add.w	r4, r4, r3, lsl #2
        unit_cnt = 0;
 800f6be:	e7ca      	b.n	800f656 <lv_btnm_set_map+0xd2>
        if(strcmp(map[li], "\n") == 0) line_cnt ++;
 800f6c0:	4619      	mov	r1, r3
 800f6c2:	9302      	str	r3, [sp, #8]
 800f6c4:	f7f0 fda0 	bl	8000208 <strcmp>
 800f6c8:	9b02      	ldr	r3, [sp, #8]
 800f6ca:	b918      	cbnz	r0, 800f6d4 <lv_btnm_set_map+0x150>
 800f6cc:	f108 0801 	add.w	r8, r8, #1
 800f6d0:	fa5f f888 	uxtb.w	r8, r8
 800f6d4:	f10b 0b01 	add.w	fp, fp, #1
 800f6d8:	e7a3      	b.n	800f622 <lv_btnm_set_map+0x9e>
                strlen(map_p_tmp[btn_cnt]) != 0) { /*Check a line*/
 800f6da:	f89a 3000 	ldrb.w	r3, [sl]
        while(strcmp(map_p_tmp[btn_cnt], "\n") != 0 &&
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d0cd      	beq.n	800f67e <lv_btnm_set_map+0xfa>
    if((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) {
 800f6e2:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 800f6e6:	f108 0801 	add.w	r8, r8, #1
 800f6ea:	2a80      	cmp	r2, #128	; 0x80
            unit_cnt += get_button_width(map_p_tmp[btn_cnt]);
 800f6ec:	9a03      	ldr	r2, [sp, #12]
        return btn_str[0] & LV_BTNM_WIDTH_MASK;
 800f6ee:	bf0c      	ite	eq
 800f6f0:	f003 0307 	andeq.w	r3, r3, #7
    return 1;   /*Default width is 1*/
 800f6f4:	2301      	movne	r3, #1
            unit_cnt += get_button_width(map_p_tmp[btn_cnt]);
 800f6f6:	441a      	add	r2, r3
 800f6f8:	b293      	uxth	r3, r2
 800f6fa:	9303      	str	r3, [sp, #12]
 800f6fc:	e7af      	b.n	800f65e <lv_btnm_set_map+0xda>
            lv_coord_t all_unit_w = max_w - ((btn_cnt - 1) * style_bg->body.padding.inner);
 800f6fe:	9b04      	ldr	r3, [sp, #16]
            for(i = 0; i < btn_cnt; i++) {
 800f700:	f04f 0800 	mov.w	r8, #0
            lv_coord_t all_unit_w = max_w - ((btn_cnt - 1) * style_bg->body.padding.inner);
 800f704:	8caa      	ldrh	r2, [r5, #36]	; 0x24
 800f706:	f1a4 0b04 	sub.w	fp, r4, #4
 800f70a:	3b01      	subs	r3, #1
            unit_act_cnt = 0;
 800f70c:	46c2      	mov	sl, r8
            lv_coord_t all_unit_w = max_w - ((btn_cnt - 1) * style_bg->body.padding.inner);
 800f70e:	fb12 f303 	smulbb	r3, r2, r3
 800f712:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f714:	1ad3      	subs	r3, r2, r3
 800f716:	b21b      	sxth	r3, r3
 800f718:	9307      	str	r3, [sp, #28]
                                act_x + act_unit_w, act_y + btn_h);
 800f71a:	9b02      	ldr	r3, [sp, #8]
 800f71c:	18f3      	adds	r3, r6, r3
                    lv_area_set(&ext->button_areas[btn_i],  act_x, act_y,
 800f71e:	b21b      	sxth	r3, r3
 800f720:	9308      	str	r3, [sp, #32]
 800f722:	fa1f f188 	uxth.w	r1, r8
 800f726:	9b06      	ldr	r3, [sp, #24]
 800f728:	1858      	adds	r0, r3, r1
            for(i = 0; i < btn_cnt; i++) {
 800f72a:	9b05      	ldr	r3, [sp, #20]
 800f72c:	428b      	cmp	r3, r1
 800f72e:	b280      	uxth	r0, r0
 800f730:	d804      	bhi.n	800f73c <lv_btnm_set_map+0x1b8>
 800f732:	9a06      	ldr	r2, [sp, #24]
 800f734:	4413      	add	r3, r2
 800f736:	b29b      	uxth	r3, r3
 800f738:	9306      	str	r3, [sp, #24]
 800f73a:	e7a3      	b.n	800f684 <lv_btnm_set_map+0x100>
 800f73c:	f85b 3f04 	ldr.w	r3, [fp, #4]!
 800f740:	00c0      	lsls	r0, r0, #3
                act_x = (unit_act_cnt * all_unit_w) / unit_cnt + i * style_bg->body.padding.inner + style_bg->body.padding.hor;
 800f742:	f9b5 c024 	ldrsh.w	ip, [r5, #36]	; 0x24
 800f746:	781a      	ldrb	r2, [r3, #0]
 800f748:	f9b5 e022 	ldrsh.w	lr, [r5, #34]	; 0x22
    if((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) {
 800f74c:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
 800f750:	2b80      	cmp	r3, #128	; 0x80
                act_unit_w = (all_unit_w * get_button_width(map_p_tmp[i])) / unit_cnt;
 800f752:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        return btn_str[0] & LV_BTNM_WIDTH_MASK;
 800f756:	bf0c      	ite	eq
 800f758:	f002 0207 	andeq.w	r2, r2, #7
    return 1;   /*Default width is 1*/
 800f75c:	2201      	movne	r2, #1
                act_unit_w = (all_unit_w * get_button_width(map_p_tmp[i])) / unit_cnt;
 800f75e:	fb12 f203 	smulbb	r2, r2, r3
 800f762:	9b03      	ldr	r3, [sp, #12]
 800f764:	fb92 f2f3 	sdiv	r2, r2, r3
                act_x = (unit_act_cnt * all_unit_w) / unit_cnt + i * style_bg->body.padding.inner + style_bg->body.padding.hor;
 800f768:	fb1c f301 	smulbb	r3, ip, r1
 800f76c:	9907      	ldr	r1, [sp, #28]
                act_unit_w --;                              /*-1 because e.g. width = 100 means 101 pixels (0..100)*/
 800f76e:	3a01      	subs	r2, #1
                act_x = (unit_act_cnt * all_unit_w) / unit_cnt + i * style_bg->body.padding.inner + style_bg->body.padding.hor;
 800f770:	4473      	add	r3, lr
 800f772:	fb01 f10a 	mul.w	r1, r1, sl
 800f776:	930c      	str	r3, [sp, #48]	; 0x30
 800f778:	9b03      	ldr	r3, [sp, #12]
 800f77a:	fb91 f1f3 	sdiv	r1, r1, r3
 800f77e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f780:	440b      	add	r3, r1
 800f782:	b29b      	uxth	r3, r3
 800f784:	b219      	sxth	r1, r3
 800f786:	fa13 f382 	uxtah	r3, r3, r2
                if(style_bg->body.padding.inner == 0 && act_x != style_bg->body.padding.hor) {
 800f78a:	f1bc 0f00 	cmp.w	ip, #0
 800f78e:	d11c      	bne.n	800f7ca <lv_btnm_set_map+0x246>
 800f790:	458e      	cmp	lr, r1
 800f792:	d01a      	beq.n	800f7ca <lv_btnm_set_map+0x246>
                    lv_area_set(&ext->button_areas[btn_i],  ext->button_areas[btn_i - 1].x2, act_y,
 800f794:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800f798:	b21b      	sxth	r3, r3
 800f79a:	4410      	add	r0, r2
 800f79c:	9a08      	ldr	r2, [sp, #32]
 800f79e:	f930 1c04 	ldrsh.w	r1, [r0, #-4]
 800f7a2:	9200      	str	r2, [sp, #0]
 800f7a4:	4632      	mov	r2, r6
                    lv_area_set(&ext->button_areas[btn_i],  act_x, act_y,
 800f7a6:	f7fd fff0 	bl	800d78a <lv_area_set>
 800f7aa:	f8db 3000 	ldr.w	r3, [fp]
 800f7ae:	f108 0801 	add.w	r8, r8, #1
 800f7b2:	781b      	ldrb	r3, [r3, #0]
    if((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) {
 800f7b4:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 800f7b8:	2a80      	cmp	r2, #128	; 0x80
        return btn_str[0] & LV_BTNM_WIDTH_MASK;
 800f7ba:	bf0c      	ite	eq
 800f7bc:	f003 0307 	andeq.w	r3, r3, #7
    return 1;   /*Default width is 1*/
 800f7c0:	2301      	movne	r3, #1
                unit_act_cnt += get_button_width(map_p_tmp[i]);
 800f7c2:	449a      	add	sl, r3
 800f7c4:	fa1f fa8a 	uxth.w	sl, sl
 800f7c8:	e7ab      	b.n	800f722 <lv_btnm_set_map+0x19e>
                    lv_area_set(&ext->button_areas[btn_i],  act_x, act_y,
 800f7ca:	f8d9 e004 	ldr.w	lr, [r9, #4]
 800f7ce:	b21b      	sxth	r3, r3
 800f7d0:	9a08      	ldr	r2, [sp, #32]
 800f7d2:	4470      	add	r0, lr
 800f7d4:	9200      	str	r2, [sp, #0]
 800f7d6:	4632      	mov	r2, r6
 800f7d8:	e7e5      	b.n	800f7a6 <lv_btnm_set_map+0x222>
    lv_obj_invalidate(btnm);
 800f7da:	4638      	mov	r0, r7
}
 800f7dc:	b00f      	add	sp, #60	; 0x3c
 800f7de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_invalidate(btnm);
 800f7e2:	f7f8 bd69 	b.w	80082b8 <lv_obj_invalidate>
}
 800f7e6:	b00f      	add	sp, #60	; 0x3c
 800f7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7ec:	08087e8a 	.word	0x08087e8a

0800f7f0 <lv_btnm_create>:
{
 800f7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7f2:	460e      	mov	r6, r1
    lv_obj_t * new_btnm = lv_obj_create(par, copy);
 800f7f4:	f7f8 fe3e 	bl	8008474 <lv_obj_create>
    lv_mem_assert(new_btnm);
 800f7f8:	4605      	mov	r5, r0
 800f7fa:	b900      	cbnz	r0, 800f7fe <lv_btnm_create+0xe>
 800f7fc:	e7fe      	b.n	800f7fc <lv_btnm_create+0xc>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_btnm);
 800f7fe:	4c48      	ldr	r4, [pc, #288]	; (800f920 <lv_btnm_create+0x130>)
 800f800:	6823      	ldr	r3, [r4, #0]
 800f802:	b913      	cbnz	r3, 800f80a <lv_btnm_create+0x1a>
 800f804:	f7f9 fb35 	bl	8008e72 <lv_obj_get_signal_func>
 800f808:	6020      	str	r0, [r4, #0]
    lv_btnm_ext_t * ext = lv_obj_allocate_ext_attr(new_btnm, sizeof(lv_btnm_ext_t));
 800f80a:	2128      	movs	r1, #40	; 0x28
 800f80c:	4628      	mov	r0, r5
 800f80e:	f7f9 f937 	bl	8008a80 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 800f812:	4604      	mov	r4, r0
 800f814:	b900      	cbnz	r0, 800f818 <lv_btnm_create+0x28>
 800f816:	e7fe      	b.n	800f816 <lv_btnm_create+0x26>
    ext->btn_id_pr = LV_BTNM_PR_NONE;
 800f818:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ext->btn_cnt = 0;
 800f81c:	2300      	movs	r3, #0
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_func(new_btnm);
 800f81e:	4f41      	ldr	r7, [pc, #260]	; (800f924 <lv_btnm_create+0x134>)
    ext->btn_id_pr = LV_BTNM_PR_NONE;
 800f820:	8442      	strh	r2, [r0, #34]	; 0x22
    ext->btn_id_tgl = LV_BTNM_PR_NONE;
 800f822:	8482      	strh	r2, [r0, #36]	; 0x24
    ext->toggle = 0;
 800f824:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
    ext->btn_cnt = 0;
 800f828:	8403      	strh	r3, [r0, #32]
    ext->toggle = 0;
 800f82a:	f363 0200 	bfi	r2, r3, #0, #1
    ext->button_areas = NULL;
 800f82e:	6043      	str	r3, [r0, #4]
    ext->action = NULL;
 800f830:	6083      	str	r3, [r0, #8]
    ext->map_p = NULL;
 800f832:	6003      	str	r3, [r0, #0]
    ext->styles_btn[LV_BTN_STATE_REL] = &lv_style_btn_rel;
 800f834:	4b3c      	ldr	r3, [pc, #240]	; (800f928 <lv_btnm_create+0x138>)
    ext->toggle = 0;
 800f836:	f880 2026 	strb.w	r2, [r0, #38]	; 0x26
    ext->styles_btn[LV_BTN_STATE_REL] = &lv_style_btn_rel;
 800f83a:	60c3      	str	r3, [r0, #12]
    ext->styles_btn[LV_BTN_STATE_PR] = &lv_style_btn_pr;
 800f83c:	4b3b      	ldr	r3, [pc, #236]	; (800f92c <lv_btnm_create+0x13c>)
 800f83e:	6103      	str	r3, [r0, #16]
    ext->styles_btn[LV_BTN_STATE_TGL_REL] = &lv_style_btn_tgl_rel;
 800f840:	4b3b      	ldr	r3, [pc, #236]	; (800f930 <lv_btnm_create+0x140>)
 800f842:	6143      	str	r3, [r0, #20]
    ext->styles_btn[LV_BTN_STATE_TGL_PR] = &lv_style_btn_tgl_pr;
 800f844:	4b3b      	ldr	r3, [pc, #236]	; (800f934 <lv_btnm_create+0x144>)
 800f846:	6183      	str	r3, [r0, #24]
    ext->styles_btn[LV_BTN_STATE_INA] = &lv_style_btn_ina;
 800f848:	4b3b      	ldr	r3, [pc, #236]	; (800f938 <lv_btnm_create+0x148>)
 800f84a:	61c3      	str	r3, [r0, #28]
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_func(new_btnm);
 800f84c:	683b      	ldr	r3, [r7, #0]
 800f84e:	b91b      	cbnz	r3, 800f858 <lv_btnm_create+0x68>
 800f850:	4628      	mov	r0, r5
 800f852:	f7f9 fb10 	bl	8008e76 <lv_obj_get_design_func>
 800f856:	6038      	str	r0, [r7, #0]
    lv_obj_set_signal_func(new_btnm, lv_btnm_signal);
 800f858:	4938      	ldr	r1, [pc, #224]	; (800f93c <lv_btnm_create+0x14c>)
 800f85a:	4628      	mov	r0, r5
 800f85c:	f7f9 f90c 	bl	8008a78 <lv_obj_set_signal_func>
    lv_obj_set_design_func(new_btnm, lv_btnm_design);
 800f860:	4937      	ldr	r1, [pc, #220]	; (800f940 <lv_btnm_create+0x150>)
 800f862:	4628      	mov	r0, r5
 800f864:	f7f9 f90a 	bl	8008a7c <lv_obj_set_design_func>
    if(copy == NULL) {
 800f868:	bbbe      	cbnz	r6, 800f8da <lv_btnm_create+0xea>
        lv_obj_set_size(new_btnm, LV_HOR_RES / 2, LV_VER_RES / 4);
 800f86a:	2244      	movs	r2, #68	; 0x44
 800f86c:	21f0      	movs	r1, #240	; 0xf0
 800f86e:	4628      	mov	r0, r5
 800f870:	f7f8 ff33 	bl	80086da <lv_obj_set_size>
        lv_btnm_set_map(new_btnm, lv_btnm_def_map);
 800f874:	4933      	ldr	r1, [pc, #204]	; (800f944 <lv_btnm_create+0x154>)
 800f876:	4628      	mov	r0, r5
 800f878:	f7ff fe84 	bl	800f584 <lv_btnm_set_map>
        lv_theme_t * th = lv_theme_get_current();
 800f87c:	f006 f8fa 	bl	8015a74 <lv_theme_get_current>
        if(th) {
 800f880:	4604      	mov	r4, r0
 800f882:	b328      	cbz	r0, 800f8d0 <lv_btnm_create+0xe0>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BG, th->btnm.bg);
 800f884:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800f888:	4631      	mov	r1, r6
 800f88a:	4628      	mov	r0, r5
 800f88c:	f7ff fe36 	bl	800f4fc <lv_btnm_set_style>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_REL, th->btnm.btn.rel);
 800f890:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 800f894:	2101      	movs	r1, #1
 800f896:	4628      	mov	r0, r5
 800f898:	f7ff fe30 	bl	800f4fc <lv_btnm_set_style>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_PR, th->btnm.btn.pr);
 800f89c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800f8a0:	2102      	movs	r1, #2
 800f8a2:	4628      	mov	r0, r5
 800f8a4:	f7ff fe2a 	bl	800f4fc <lv_btnm_set_style>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_TGL_REL, th->btnm.btn.tgl_rel);
 800f8a8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800f8ac:	2103      	movs	r1, #3
 800f8ae:	4628      	mov	r0, r5
 800f8b0:	f7ff fe24 	bl	800f4fc <lv_btnm_set_style>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_TGL_PR, th->btnm.btn.tgl_pr);
 800f8b4:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800f8b8:	2104      	movs	r1, #4
 800f8ba:	4628      	mov	r0, r5
 800f8bc:	f7ff fe1e 	bl	800f4fc <lv_btnm_set_style>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_INA, th->btnm.btn.ina);
 800f8c0:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800f8c4:	2105      	movs	r1, #5
 800f8c6:	4628      	mov	r0, r5
 800f8c8:	f7ff fe18 	bl	800f4fc <lv_btnm_set_style>
}
 800f8cc:	4628      	mov	r0, r5
 800f8ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_obj_set_style(new_btnm, &lv_style_pretty);
 800f8d0:	491d      	ldr	r1, [pc, #116]	; (800f948 <lv_btnm_create+0x158>)
 800f8d2:	4628      	mov	r0, r5
 800f8d4:	f7f9 f998 	bl	8008c08 <lv_obj_set_style>
 800f8d8:	e7f8      	b.n	800f8cc <lv_btnm_create+0xdc>
        lv_btnm_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 800f8da:	4630      	mov	r0, r6
 800f8dc:	f7f9 facd 	bl	8008e7a <lv_obj_get_ext_attr>
        memcpy(ext->styles_btn, copy_ext->styles_btn, sizeof(ext->styles_btn));
 800f8e0:	f104 020c 	add.w	r2, r4, #12
 800f8e4:	f100 030c 	add.w	r3, r0, #12
 800f8e8:	f100 0120 	add.w	r1, r0, #32
 800f8ec:	f853 7b04 	ldr.w	r7, [r3], #4
 800f8f0:	428b      	cmp	r3, r1
 800f8f2:	f842 7b04 	str.w	r7, [r2], #4
 800f8f6:	d1f9      	bne.n	800f8ec <lv_btnm_create+0xfc>
        ext->action = copy_ext->action;
 800f8f8:	6883      	ldr	r3, [r0, #8]
        ext->toggle = copy_ext->toggle;
 800f8fa:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
        ext->action = copy_ext->action;
 800f8fe:	60a3      	str	r3, [r4, #8]
        ext->toggle = copy_ext->toggle;
 800f900:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800f904:	f362 0300 	bfi	r3, r2, #0, #1
 800f908:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        ext->btn_id_tgl = copy_ext->btn_id_tgl;
 800f90c:	8c83      	ldrh	r3, [r0, #36]	; 0x24
        lv_btnm_set_map(new_btnm, lv_btnm_get_map(copy));
 800f90e:	4630      	mov	r0, r6
        ext->btn_id_tgl = copy_ext->btn_id_tgl;
 800f910:	84a3      	strh	r3, [r4, #36]	; 0x24
        lv_btnm_set_map(new_btnm, lv_btnm_get_map(copy));
 800f912:	f7ff fe15 	bl	800f540 <lv_btnm_get_map>
 800f916:	4601      	mov	r1, r0
 800f918:	4628      	mov	r0, r5
 800f91a:	f7ff fe33 	bl	800f584 <lv_btnm_set_map>
 800f91e:	e7d5      	b.n	800f8cc <lv_btnm_create+0xdc>
 800f920:	20017400 	.word	0x20017400
 800f924:	200173fc 	.word	0x200173fc
 800f928:	20017c10 	.word	0x20017c10
 800f92c:	20017c58 	.word	0x20017c58
 800f930:	20017e08 	.word	0x20017e08
 800f934:	20017e98 	.word	0x20017e98
 800f938:	20017d30 	.word	0x20017d30
 800f93c:	0800f95d 	.word	0x0800f95d
 800f940:	0800f289 	.word	0x0800f289
 800f944:	200000c4 	.word	0x200000c4
 800f948:	20017ca0 	.word	0x20017ca0

0800f94c <cut_ctrl_byte>:
    if((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) return &btn_str[1];
 800f94c:	7803      	ldrb	r3, [r0, #0]
 800f94e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f952:	2b80      	cmp	r3, #128	; 0x80
 800f954:	bf08      	it	eq
 800f956:	3001      	addeq	r0, #1
}
 800f958:	4770      	bx	lr
	...

0800f95c <lv_btnm_signal>:
    res = ancestor_signal(btnm, sign, param);
 800f95c:	4bb0      	ldr	r3, [pc, #704]	; (800fc20 <lv_btnm_signal+0x2c4>)
{
 800f95e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = ancestor_signal(btnm, sign, param);
 800f962:	681b      	ldr	r3, [r3, #0]
{
 800f964:	b086      	sub	sp, #24
 800f966:	4605      	mov	r5, r0
 800f968:	460e      	mov	r6, r1
 800f96a:	4690      	mov	r8, r2
    res = ancestor_signal(btnm, sign, param);
 800f96c:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 800f96e:	2801      	cmp	r0, #1
    res = ancestor_signal(btnm, sign, param);
 800f970:	4607      	mov	r7, r0
    if(res != LV_RES_OK) return res;
 800f972:	d107      	bne.n	800f984 <lv_btnm_signal+0x28>
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 800f974:	4628      	mov	r0, r5
 800f976:	f7f9 fa80 	bl	8008e7a <lv_obj_get_ext_attr>
 800f97a:	4604      	mov	r4, r0
    if(sign == LV_SIGNAL_CLEANUP) {
 800f97c:	b936      	cbnz	r6, 800f98c <lv_btnm_signal+0x30>
        lv_mem_free(ext->button_areas);
 800f97e:	6840      	ldr	r0, [r0, #4]
 800f980:	f7fe fa86 	bl	800de90 <lv_mem_free>
}
 800f984:	4638      	mov	r0, r7
 800f986:	b006      	add	sp, #24
 800f988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if(sign == LV_SIGNAL_STYLE_CHG || sign == LV_SIGNAL_CORD_CHG) {
 800f98c:	1eb3      	subs	r3, r6, #2
 800f98e:	2b01      	cmp	r3, #1
 800f990:	d804      	bhi.n	800f99c <lv_btnm_signal+0x40>
        lv_btnm_set_map(btnm, ext->map_p);
 800f992:	6801      	ldr	r1, [r0, #0]
 800f994:	4628      	mov	r0, r5
 800f996:	f7ff fdf5 	bl	800f584 <lv_btnm_set_map>
 800f99a:	e7f3      	b.n	800f984 <lv_btnm_signal+0x28>
    } else if(sign == LV_SIGNAL_PRESSING) {
 800f99c:	2e07      	cmp	r6, #7
 800f99e:	d161      	bne.n	800fa64 <lv_btnm_signal+0x108>
        lv_indev_get_point(param, &p);
 800f9a0:	a901      	add	r1, sp, #4
 800f9a2:	4640      	mov	r0, r8
 800f9a4:	f7f8 fbf8 	bl	8008198 <lv_indev_get_point>
        btn_pr = get_button_from_point(btnm, &p);
 800f9a8:	a901      	add	r1, sp, #4
 800f9aa:	4628      	mov	r0, r5
 800f9ac:	f7ff fc2c 	bl	800f208 <get_button_from_point>
        lv_obj_get_coords(btnm, &btnm_area);
 800f9b0:	a902      	add	r1, sp, #8
        btn_pr = get_button_from_point(btnm, &p);
 800f9b2:	4606      	mov	r6, r0
        lv_obj_get_coords(btnm, &btnm_area);
 800f9b4:	4628      	mov	r0, r5
 800f9b6:	f7f9 f977 	bl	8008ca8 <lv_obj_get_coords>
        if(btn_pr != ext->btn_id_pr) {
 800f9ba:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800f9bc:	42b3      	cmp	r3, r6
 800f9be:	d04f      	beq.n	800fa60 <lv_btnm_signal+0x104>
            lv_indev_reset_lpr(param);
 800f9c0:	4640      	mov	r0, r8
 800f9c2:	f7f8 fbda 	bl	800817a <lv_indev_reset_lpr>
            if(ext->btn_id_pr != LV_BTNM_PR_NONE) {
 800f9c6:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800f9c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f9cc:	4293      	cmp	r3, r2
 800f9ce:	d021      	beq.n	800fa14 <lv_btnm_signal+0xb8>
                lv_area_copy(&btn_area, &ext->button_areas[ext->btn_id_pr]);
 800f9d0:	6862      	ldr	r2, [r4, #4]
 800f9d2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f9d6:	ab04      	add	r3, sp, #16
 800f9d8:	6810      	ldr	r0, [r2, #0]
 800f9da:	6851      	ldr	r1, [r2, #4]
                btn_area.x1 += btnm_area.x1;
 800f9dc:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800f9e0:	c303      	stmia	r3!, {r0, r1}
 800f9e2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
                lv_inv_area(&btn_area);
 800f9e6:	a804      	add	r0, sp, #16
                btn_area.y1 += btnm_area.y1;
 800f9e8:	f8bd 1012 	ldrh.w	r1, [sp, #18]
                btn_area.x1 += btnm_area.x1;
 800f9ec:	4413      	add	r3, r2
 800f9ee:	f8ad 3010 	strh.w	r3, [sp, #16]
                btn_area.y1 += btnm_area.y1;
 800f9f2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800f9f6:	4419      	add	r1, r3
 800f9f8:	f8ad 1012 	strh.w	r1, [sp, #18]
                btn_area.x2 += btnm_area.x1;
 800f9fc:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800fa00:	440a      	add	r2, r1
 800fa02:	f8ad 2014 	strh.w	r2, [sp, #20]
                btn_area.y2 += btnm_area.y1;
 800fa06:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800fa0a:	4413      	add	r3, r2
 800fa0c:	f8ad 3016 	strh.w	r3, [sp, #22]
                lv_inv_area(&btn_area);
 800fa10:	f7f9 fc4c 	bl	80092ac <lv_inv_area>
            if(btn_pr != LV_BTNM_PR_NONE) {
 800fa14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fa18:	429e      	cmp	r6, r3
 800fa1a:	d021      	beq.n	800fa60 <lv_btnm_signal+0x104>
                lv_area_copy(&btn_area, &ext->button_areas[btn_pr]);
 800fa1c:	6862      	ldr	r2, [r4, #4]
 800fa1e:	ab04      	add	r3, sp, #16
 800fa20:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
 800fa24:	6810      	ldr	r0, [r2, #0]
 800fa26:	6851      	ldr	r1, [r2, #4]
                btn_area.x1 += btnm_area.x1;
 800fa28:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800fa2c:	c303      	stmia	r3!, {r0, r1}
 800fa2e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
                lv_inv_area(&btn_area);
 800fa32:	a804      	add	r0, sp, #16
                btn_area.y1 += btnm_area.y1;
 800fa34:	f8bd 1012 	ldrh.w	r1, [sp, #18]
                btn_area.x1 += btnm_area.x1;
 800fa38:	4413      	add	r3, r2
 800fa3a:	f8ad 3010 	strh.w	r3, [sp, #16]
                btn_area.y1 += btnm_area.y1;
 800fa3e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800fa42:	4419      	add	r1, r3
 800fa44:	f8ad 1012 	strh.w	r1, [sp, #18]
                btn_area.x2 += btnm_area.x1;
 800fa48:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800fa4c:	440a      	add	r2, r1
 800fa4e:	f8ad 2014 	strh.w	r2, [sp, #20]
                btn_area.y2 += btnm_area.y1;
 800fa52:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800fa56:	4413      	add	r3, r2
 800fa58:	f8ad 3016 	strh.w	r3, [sp, #22]
                lv_inv_area(&btn_area);
 800fa5c:	f7f9 fc26 	bl	80092ac <lv_inv_area>
        ext->btn_id_pr = btn_pr;
 800fa60:	8466      	strh	r6, [r4, #34]	; 0x22
 800fa62:	e78f      	b.n	800f984 <lv_btnm_signal+0x28>
    else if(sign == LV_SIGNAL_LONG_PRESS_REP) {
 800fa64:	2e0b      	cmp	r6, #11
 800fa66:	d11b      	bne.n	800faa0 <lv_btnm_signal+0x144>
        if(ext->action && ext->btn_id_pr != LV_BTNM_PR_NONE) {
 800fa68:	6883      	ldr	r3, [r0, #8]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d08a      	beq.n	800f984 <lv_btnm_signal+0x28>
 800fa6e:	8c41      	ldrh	r1, [r0, #34]	; 0x22
 800fa70:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800fa74:	42b1      	cmp	r1, r6
 800fa76:	d085      	beq.n	800f984 <lv_btnm_signal+0x28>
            uint16_t txt_i = get_button_text(btnm, ext->btn_id_pr);
 800fa78:	4628      	mov	r0, r5
 800fa7a:	f7ff fb99 	bl	800f1b0 <get_button_text>
            if(txt_i != LV_BTNM_PR_NONE) {
 800fa7e:	42b0      	cmp	r0, r6
 800fa80:	d080      	beq.n	800f984 <lv_btnm_signal+0x28>
                if(button_is_repeat_disabled(ext->map_p[txt_i]) == false &&
 800fa82:	6823      	ldr	r3, [r4, #0]
 800fa84:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800fa88:	7803      	ldrb	r3, [r0, #0]
    if(((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) &&
 800fa8a:	f003 02d0 	and.w	r2, r3, #208	; 0xd0
 800fa8e:	2a90      	cmp	r2, #144	; 0x90
 800fa90:	f43f af78 	beq.w	800f984 <lv_btnm_signal+0x28>
    if(((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) &&
 800fa94:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800fa98:	2ba0      	cmp	r3, #160	; 0xa0
 800fa9a:	f040 813c 	bne.w	800fd16 <lv_btnm_signal+0x3ba>
 800fa9e:	e771      	b.n	800f984 <lv_btnm_signal+0x28>
    } else if(sign == LV_SIGNAL_RELEASED) {
 800faa0:	2e09      	cmp	r6, #9
 800faa2:	d171      	bne.n	800fb88 <lv_btnm_signal+0x22c>
        if(ext->btn_id_pr != LV_BTNM_PR_NONE) {
 800faa4:	8c41      	ldrh	r1, [r0, #34]	; 0x22
 800faa6:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800faaa:	42b1      	cmp	r1, r6
 800faac:	f43f af6a 	beq.w	800f984 <lv_btnm_signal+0x28>
            if(ext->action) {
 800fab0:	6883      	ldr	r3, [r0, #8]
 800fab2:	b16b      	cbz	r3, 800fad0 <lv_btnm_signal+0x174>
                uint16_t txt_i = get_button_text(btnm, ext->btn_id_pr);
 800fab4:	4628      	mov	r0, r5
 800fab6:	f7ff fb7b 	bl	800f1b0 <get_button_text>
                if(txt_i != LV_BTNM_PR_NONE && button_is_inactive(ext->map_p[txt_i]) == false) {
 800faba:	42b0      	cmp	r0, r6
 800fabc:	d008      	beq.n	800fad0 <lv_btnm_signal+0x174>
 800fabe:	6823      	ldr	r3, [r4, #0]
 800fac0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    if(((btn_str[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) &&
 800fac4:	7803      	ldrb	r3, [r0, #0]
 800fac6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800faca:	2ba0      	cmp	r3, #160	; 0xa0
 800facc:	f040 8140 	bne.w	800fd50 <lv_btnm_signal+0x3f4>
            lv_obj_get_coords(btnm, &btnm_area);
 800fad0:	a902      	add	r1, sp, #8
 800fad2:	4628      	mov	r0, r5
 800fad4:	f7f9 f8e8 	bl	8008ca8 <lv_obj_get_coords>
            lv_area_copy(&btn_area, &ext->button_areas[ext->btn_id_pr]);
 800fad8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800fada:	6862      	ldr	r2, [r4, #4]
 800fadc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800fae0:	ab04      	add	r3, sp, #16
 800fae2:	6810      	ldr	r0, [r2, #0]
 800fae4:	6851      	ldr	r1, [r2, #4]
            btn_area.x1 += btnm_area.x1;
 800fae6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800faea:	c303      	stmia	r3!, {r0, r1}
 800faec:	f8bd 3010 	ldrh.w	r3, [sp, #16]
            lv_inv_area(&btn_area);
 800faf0:	a804      	add	r0, sp, #16
            btn_area.y1 += btnm_area.y1;
 800faf2:	f8bd 1012 	ldrh.w	r1, [sp, #18]
            btn_area.x1 += btnm_area.x1;
 800faf6:	4413      	add	r3, r2
 800faf8:	f8ad 3010 	strh.w	r3, [sp, #16]
            btn_area.y1 += btnm_area.y1;
 800fafc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800fb00:	4419      	add	r1, r3
 800fb02:	f8ad 1012 	strh.w	r1, [sp, #18]
            btn_area.x2 += btnm_area.x1;
 800fb06:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800fb0a:	440a      	add	r2, r1
 800fb0c:	f8ad 2014 	strh.w	r2, [sp, #20]
            btn_area.y2 += btnm_area.y1;
 800fb10:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800fb14:	4413      	add	r3, r2
 800fb16:	f8ad 3016 	strh.w	r3, [sp, #22]
            lv_inv_area(&btn_area);
 800fb1a:	f7f9 fbc7 	bl	80092ac <lv_inv_area>
            if(ext->toggle != 0) {
 800fb1e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800fb22:	07db      	lsls	r3, r3, #31
 800fb24:	d524      	bpl.n	800fb70 <lv_btnm_signal+0x214>
                lv_area_copy(&btn_area, &ext->button_areas[ext->btn_id_tgl]);
 800fb26:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 800fb28:	6862      	ldr	r2, [r4, #4]
 800fb2a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800fb2e:	ab04      	add	r3, sp, #16
 800fb30:	6810      	ldr	r0, [r2, #0]
 800fb32:	6851      	ldr	r1, [r2, #4]
                btn_area.x1 += btnm_area.x1;
 800fb34:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800fb38:	c303      	stmia	r3!, {r0, r1}
 800fb3a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
                lv_inv_area(&btn_area);
 800fb3e:	a804      	add	r0, sp, #16
                btn_area.y1 += btnm_area.y1;
 800fb40:	f8bd 1012 	ldrh.w	r1, [sp, #18]
                btn_area.x1 += btnm_area.x1;
 800fb44:	4413      	add	r3, r2
 800fb46:	f8ad 3010 	strh.w	r3, [sp, #16]
                btn_area.y1 += btnm_area.y1;
 800fb4a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800fb4e:	4419      	add	r1, r3
 800fb50:	f8ad 1012 	strh.w	r1, [sp, #18]
                btn_area.x2 += btnm_area.x1;
 800fb54:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800fb58:	440a      	add	r2, r1
 800fb5a:	f8ad 2014 	strh.w	r2, [sp, #20]
                btn_area.y2 += btnm_area.y1;
 800fb5e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800fb62:	4413      	add	r3, r2
 800fb64:	f8ad 3016 	strh.w	r3, [sp, #22]
                lv_inv_area(&btn_area);
 800fb68:	f7f9 fba0 	bl	80092ac <lv_inv_area>
                ext->btn_id_tgl = ext->btn_id_pr;
 800fb6c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800fb6e:	84a3      	strh	r3, [r4, #36]	; 0x24
            lv_group_t * g = lv_obj_get_group(btnm);
 800fb70:	4628      	mov	r0, r5
 800fb72:	f7f9 f984 	bl	8008e7e <lv_obj_get_group>
            if(lv_group_get_focused(g) != btnm) {
 800fb76:	f7f7 fecc 	bl	8007912 <lv_group_get_focused>
 800fb7a:	4285      	cmp	r5, r0
 800fb7c:	f43f af02 	beq.w	800f984 <lv_btnm_signal+0x28>
                ext->btn_id_pr = LV_BTNM_PR_NONE;
 800fb80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fb84:	8463      	strh	r3, [r4, #34]	; 0x22
 800fb86:	e6fd      	b.n	800f984 <lv_btnm_signal+0x28>
    } else if(sign == LV_SIGNAL_PRESS_LOST || sign == LV_SIGNAL_DEFOCUS) {
 800fb88:	2e08      	cmp	r6, #8
 800fb8a:	d001      	beq.n	800fb90 <lv_btnm_signal+0x234>
 800fb8c:	2e0f      	cmp	r6, #15
 800fb8e:	d103      	bne.n	800fb98 <lv_btnm_signal+0x23c>
            else ext->btn_id_pr = LV_BTNM_PR_NONE;
 800fb90:	f64f 73ff 	movw	r3, #65535	; 0xffff
            ext->btn_id_pr = 0;
 800fb94:	8463      	strh	r3, [r4, #34]	; 0x22
 800fb96:	e011      	b.n	800fbbc <lv_btnm_signal+0x260>
    } else if(sign == LV_SIGNAL_FOCUS) {
 800fb98:	2e0e      	cmp	r6, #14
 800fb9a:	d11e      	bne.n	800fbda <lv_btnm_signal+0x27e>
        lv_indev_t * indev = lv_indev_get_act();
 800fb9c:	f7f8 fada 	bl	8008154 <lv_indev_get_act>
 800fba0:	4606      	mov	r6, r0
        lv_hal_indev_type_t indev_type = lv_indev_get_type(indev);
 800fba2:	f7f8 fadd 	bl	8008160 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_POINTER) {
 800fba6:	2801      	cmp	r0, #1
 800fba8:	d10c      	bne.n	800fbc4 <lv_btnm_signal+0x268>
            lv_indev_get_point(indev, &p1);
 800fbaa:	a904      	add	r1, sp, #16
 800fbac:	4630      	mov	r0, r6
 800fbae:	f7f8 faf3 	bl	8008198 <lv_indev_get_point>
            uint16_t btn_i = get_button_from_point(btnm, &p1);
 800fbb2:	a904      	add	r1, sp, #16
 800fbb4:	4628      	mov	r0, r5
 800fbb6:	f7ff fb27 	bl	800f208 <get_button_from_point>
            ext->btn_id_pr = btn_i;
 800fbba:	8460      	strh	r0, [r4, #34]	; 0x22
        lv_obj_invalidate(btnm);
 800fbbc:	4628      	mov	r0, r5
 800fbbe:	f7f8 fb7b 	bl	80082b8 <lv_obj_invalidate>
 800fbc2:	e6df      	b.n	800f984 <lv_btnm_signal+0x28>
        } else  if(indev_type == LV_INDEV_TYPE_ENCODER) {
 800fbc4:	2804      	cmp	r0, #4
 800fbc6:	d106      	bne.n	800fbd6 <lv_btnm_signal+0x27a>
            if(lv_group_get_editing(lv_obj_get_group(btnm))) ext->btn_id_pr = 0;
 800fbc8:	4628      	mov	r0, r5
 800fbca:	f7f9 f958 	bl	8008e7e <lv_obj_get_group>
 800fbce:	f7f7 febe 	bl	800794e <lv_group_get_editing>
 800fbd2:	2800      	cmp	r0, #0
 800fbd4:	d0dc      	beq.n	800fb90 <lv_btnm_signal+0x234>
            ext->btn_id_pr = 0;
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	e7dc      	b.n	800fb94 <lv_btnm_signal+0x238>
    } else if(sign == LV_SIGNAL_CONTROLL) {
 800fbda:	2e10      	cmp	r6, #16
 800fbdc:	f040 80a2 	bne.w	800fd24 <lv_btnm_signal+0x3c8>
        char c = *((char *)param);
 800fbe0:	f898 3000 	ldrb.w	r3, [r8]
        if(c == LV_GROUP_KEY_RIGHT) {
 800fbe4:	2b13      	cmp	r3, #19
 800fbe6:	d10d      	bne.n	800fc04 <lv_btnm_signal+0x2a8>
            if(ext->btn_id_pr  == LV_BTNM_PR_NONE) ext->btn_id_pr = 0;
 800fbe8:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800fbea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fbee:	4293      	cmp	r3, r2
 800fbf0:	bf0c      	ite	eq
 800fbf2:	2300      	moveq	r3, #0
            else ext->btn_id_pr++;
 800fbf4:	3301      	addne	r3, #1
 800fbf6:	8443      	strh	r3, [r0, #34]	; 0x22
            if(ext->btn_id_pr >= ext->btn_cnt - 1) ext->btn_id_pr = ext->btn_cnt - 1;
 800fbf8:	8c03      	ldrh	r3, [r0, #32]
 800fbfa:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 800fbfc:	3b01      	subs	r3, #1
 800fbfe:	429a      	cmp	r2, r3
 800fc00:	dac8      	bge.n	800fb94 <lv_btnm_signal+0x238>
 800fc02:	e7db      	b.n	800fbbc <lv_btnm_signal+0x260>
        } else if(c == LV_GROUP_KEY_LEFT) {
 800fc04:	2b14      	cmp	r3, #20
 800fc06:	d10d      	bne.n	800fc24 <lv_btnm_signal+0x2c8>
            if(ext->btn_id_pr  == LV_BTNM_PR_NONE) ext->btn_id_pr = 0;
 800fc08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fc0c:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 800fc0e:	429a      	cmp	r2, r3
 800fc10:	bf04      	itt	eq
 800fc12:	2300      	moveq	r3, #0
 800fc14:	8443      	strheq	r3, [r0, #34]	; 0x22
            if(ext->btn_id_pr > 0) ext->btn_id_pr--;
 800fc16:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d0cf      	beq.n	800fbbc <lv_btnm_signal+0x260>
 800fc1c:	3b01      	subs	r3, #1
 800fc1e:	e7b9      	b.n	800fb94 <lv_btnm_signal+0x238>
 800fc20:	20017400 	.word	0x20017400
        } else if(c == LV_GROUP_KEY_DOWN) {
 800fc24:	2b12      	cmp	r3, #18
 800fc26:	d130      	bne.n	800fc8a <lv_btnm_signal+0x32e>
            lv_style_t * style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BG);
 800fc28:	2100      	movs	r1, #0
 800fc2a:	4628      	mov	r0, r5
 800fc2c:	f7ff fc8d 	bl	800f54a <lv_btnm_get_style>
            if(ext->btn_id_pr  == LV_BTNM_PR_NONE) {
 800fc30:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 800fc32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fc36:	4299      	cmp	r1, r3
 800fc38:	d0cd      	beq.n	800fbd6 <lv_btnm_signal+0x27a>
                lv_coord_t pr_center = ext->button_areas[ext->btn_id_pr].x1 + (lv_area_get_width(&ext->button_areas[ext->btn_id_pr]) >> 1);
 800fc3a:	6863      	ldr	r3, [r4, #4]
                for(area_below = ext->btn_id_pr; area_below < ext->btn_cnt; area_below ++) {
 800fc3c:	f8b4 c020 	ldrh.w	ip, [r4, #32]
                lv_coord_t pr_center = ext->button_areas[ext->btn_id_pr].x1 + (lv_area_get_width(&ext->button_areas[ext->btn_id_pr]) >> 1);
 800fc40:	eb03 06c1 	add.w	r6, r3, r1, lsl #3
 800fc44:	f833 2031 	ldrh.w	r2, [r3, r1, lsl #3]
    return area_p->x2 - area_p->x1 + 1;
 800fc48:	88b3      	ldrh	r3, [r6, #4]
 800fc4a:	3301      	adds	r3, #1
 800fc4c:	1a9b      	subs	r3, r3, r2
 800fc4e:	f343 034e 	sbfx	r3, r3, #1, #15
 800fc52:	4413      	add	r3, r2
 800fc54:	4632      	mov	r2, r6
 800fc56:	b21b      	sxth	r3, r3
                for(area_below = ext->btn_id_pr; area_below < ext->btn_cnt; area_below ++) {
 800fc58:	4561      	cmp	r1, ip
 800fc5a:	d2af      	bcs.n	800fbbc <lv_btnm_signal+0x260>
                    if(ext->button_areas[area_below].y1 >  ext->button_areas[ext->btn_id_pr].y1 &&
 800fc5c:	f9b2 8002 	ldrsh.w	r8, [r2, #2]
 800fc60:	f9b6 e002 	ldrsh.w	lr, [r6, #2]
 800fc64:	45f0      	cmp	r8, lr
 800fc66:	dd0a      	ble.n	800fc7e <lv_btnm_signal+0x322>
 800fc68:	f9b2 e000 	ldrsh.w	lr, [r2]
 800fc6c:	459e      	cmp	lr, r3
 800fc6e:	dc06      	bgt.n	800fc7e <lv_btnm_signal+0x322>
                            pr_center <=  ext->button_areas[area_below].x2 + style->body.padding.hor) {
 800fc70:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 800fc74:	f9b0 8022 	ldrsh.w	r8, [r0, #34]	; 0x22
 800fc78:	44c6      	add	lr, r8
                            pr_center >=  ext->button_areas[area_below].x1 &&
 800fc7a:	4573      	cmp	r3, lr
 800fc7c:	dd03      	ble.n	800fc86 <lv_btnm_signal+0x32a>
                for(area_below = ext->btn_id_pr; area_below < ext->btn_cnt; area_below ++) {
 800fc7e:	3101      	adds	r1, #1
 800fc80:	3208      	adds	r2, #8
 800fc82:	b289      	uxth	r1, r1
 800fc84:	e7e8      	b.n	800fc58 <lv_btnm_signal+0x2fc>
                if(area_below < ext->btn_cnt) ext->btn_id_pr = area_below;
 800fc86:	8461      	strh	r1, [r4, #34]	; 0x22
 800fc88:	e798      	b.n	800fbbc <lv_btnm_signal+0x260>
        } else if(c == LV_GROUP_KEY_UP) {
 800fc8a:	2b11      	cmp	r3, #17
 800fc8c:	d130      	bne.n	800fcf0 <lv_btnm_signal+0x394>
            lv_style_t * style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BG);
 800fc8e:	2100      	movs	r1, #0
 800fc90:	4628      	mov	r0, r5
 800fc92:	f7ff fc5a 	bl	800f54a <lv_btnm_get_style>
            if(ext->btn_id_pr  == LV_BTNM_PR_NONE) {
 800fc96:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800fc98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc9c:	4293      	cmp	r3, r2
 800fc9e:	d09a      	beq.n	800fbd6 <lv_btnm_signal+0x27a>
                lv_coord_t pr_center = ext->button_areas[ext->btn_id_pr].x1 + (lv_area_get_width(&ext->button_areas[ext->btn_id_pr]) >> 1);
 800fca0:	6866      	ldr	r6, [r4, #4]
 800fca2:	eb06 0ec3 	add.w	lr, r6, r3, lsl #3
 800fca6:	f836 1033 	ldrh.w	r1, [r6, r3, lsl #3]
 800fcaa:	f8be 2004 	ldrh.w	r2, [lr, #4]
 800fcae:	3201      	adds	r2, #1
 800fcb0:	1a52      	subs	r2, r2, r1
 800fcb2:	f342 024e 	sbfx	r2, r2, #1, #15
 800fcb6:	440a      	add	r2, r1
 800fcb8:	b212      	sxth	r2, r2
 800fcba:	b21b      	sxth	r3, r3
                for(area_above = ext->btn_id_pr; area_above >= 0; area_above --) {
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	f6ff af7d 	blt.w	800fbbc <lv_btnm_signal+0x260>
                    if(ext->button_areas[area_above].y1 < ext->button_areas[ext->btn_id_pr].y1 &&
 800fcc2:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 800fcc6:	f9be 1002 	ldrsh.w	r1, [lr, #2]
 800fcca:	f9b8 c002 	ldrsh.w	ip, [r8, #2]
 800fcce:	458c      	cmp	ip, r1
 800fcd0:	da0c      	bge.n	800fcec <lv_btnm_signal+0x390>
                            pr_center >=  ext->button_areas[area_above].x1 - style->body.padding.hor &&
 800fcd2:	f936 c033 	ldrsh.w	ip, [r6, r3, lsl #3]
 800fcd6:	f9b0 1022 	ldrsh.w	r1, [r0, #34]	; 0x22
 800fcda:	ebac 0c01 	sub.w	ip, ip, r1
                    if(ext->button_areas[area_above].y1 < ext->button_areas[ext->btn_id_pr].y1 &&
 800fcde:	4562      	cmp	r2, ip
 800fce0:	db04      	blt.n	800fcec <lv_btnm_signal+0x390>
                            pr_center >=  ext->button_areas[area_above].x1 - style->body.padding.hor &&
 800fce2:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 800fce6:	4291      	cmp	r1, r2
 800fce8:	f6bf af54 	bge.w	800fb94 <lv_btnm_signal+0x238>
 800fcec:	3b01      	subs	r3, #1
 800fcee:	e7e4      	b.n	800fcba <lv_btnm_signal+0x35e>
        } else if(c == LV_GROUP_KEY_ENTER) {
 800fcf0:	2b0a      	cmp	r3, #10
 800fcf2:	f47f ae47 	bne.w	800f984 <lv_btnm_signal+0x28>
            if(ext->action != NULL) {
 800fcf6:	6883      	ldr	r3, [r0, #8]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	f43f ae43 	beq.w	800f984 <lv_btnm_signal+0x28>
                uint16_t txt_i = get_button_text(btnm, ext->btn_id_pr);
 800fcfe:	8c41      	ldrh	r1, [r0, #34]	; 0x22
 800fd00:	4628      	mov	r0, r5
 800fd02:	f7ff fa55 	bl	800f1b0 <get_button_text>
                if(txt_i != LV_BTNM_PR_NONE) {
 800fd06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fd0a:	4298      	cmp	r0, r3
 800fd0c:	f43f ae3a 	beq.w	800f984 <lv_btnm_signal+0x28>
                    ext->action(btnm, cut_ctrl_byte(ext->map_p[txt_i]));
 800fd10:	6823      	ldr	r3, [r4, #0]
 800fd12:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
                    ext->action(btnm, cut_ctrl_byte(ext->map_p[txt_i]));
 800fd16:	f7ff fe19 	bl	800f94c <cut_ctrl_byte>
 800fd1a:	68a3      	ldr	r3, [r4, #8]
 800fd1c:	4601      	mov	r1, r0
 800fd1e:	4628      	mov	r0, r5
 800fd20:	4798      	blx	r3
 800fd22:	e62f      	b.n	800f984 <lv_btnm_signal+0x28>
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 800fd24:	2e11      	cmp	r6, #17
 800fd26:	d103      	bne.n	800fd30 <lv_btnm_signal+0x3d4>
        *editable = true;
 800fd28:	2301      	movs	r3, #1
 800fd2a:	f888 3000 	strb.w	r3, [r8]
 800fd2e:	e629      	b.n	800f984 <lv_btnm_signal+0x28>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 800fd30:	2e05      	cmp	r6, #5
 800fd32:	f47f ae27 	bne.w	800f984 <lv_btnm_signal+0x28>
 800fd36:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 800fd38:	f858 1023 	ldr.w	r1, [r8, r3, lsl #2]
 800fd3c:	b2da      	uxtb	r2, r3
 800fd3e:	b119      	cbz	r1, 800fd48 <lv_btnm_signal+0x3ec>
 800fd40:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) {  /*Find the last set data*/
 800fd42:	2b07      	cmp	r3, #7
 800fd44:	d1f8      	bne.n	800fd38 <lv_btnm_signal+0x3dc>
 800fd46:	461a      	mov	r2, r3
        buf->type[i] = "lv_btnm";
 800fd48:	4b05      	ldr	r3, [pc, #20]	; (800fd60 <lv_btnm_signal+0x404>)
 800fd4a:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
 800fd4e:	e619      	b.n	800f984 <lv_btnm_signal+0x28>
                    ext->action(btnm, cut_ctrl_byte(ext->map_p[txt_i]));
 800fd50:	f7ff fdfc 	bl	800f94c <cut_ctrl_byte>
 800fd54:	68a3      	ldr	r3, [r4, #8]
 800fd56:	4601      	mov	r1, r0
 800fd58:	4628      	mov	r0, r5
 800fd5a:	4798      	blx	r3
 800fd5c:	e6b8      	b.n	800fad0 <lv_btnm_signal+0x174>
 800fd5e:	bf00      	nop
 800fd60:	08087e8c 	.word	0x08087e8c

0800fd64 <lv_chart_signal>:
 * @param chart pointer to a chart background object
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 */
static lv_res_t lv_chart_signal(lv_obj_t * chart, lv_signal_t sign, void * param)
{
 800fd64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(chart, sign, param);
 800fd66:	4b17      	ldr	r3, [pc, #92]	; (800fdc4 <lv_chart_signal+0x60>)
{
 800fd68:	4607      	mov	r7, r0
 800fd6a:	460e      	mov	r6, r1
 800fd6c:	4614      	mov	r4, r2
    res = ancestor_signal(chart, sign, param);
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 800fd72:	2801      	cmp	r0, #1
    res = ancestor_signal(chart, sign, param);
 800fd74:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 800fd76:	d10b      	bne.n	800fd90 <lv_chart_signal+0x2c>

    if(sign == LV_SIGNAL_CLEANUP) {
 800fd78:	b9a6      	cbnz	r6, 800fda4 <lv_chart_signal+0x40>
        lv_coord_t ** datal;
        lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 800fd7a:	4638      	mov	r0, r7
 800fd7c:	f7f9 f87d 	bl	8008e7a <lv_obj_get_ext_attr>
 800fd80:	4606      	mov	r6, r0
        LL_READ(ext->series_ll, datal) {
 800fd82:	f7fd ff72 	bl	800dc6a <lv_ll_get_head>
 800fd86:	4604      	mov	r4, r0
 800fd88:	b920      	cbnz	r0, 800fd94 <lv_chart_signal+0x30>
            lv_mem_free(*datal);
        }
        lv_ll_clear(&ext->series_ll);
 800fd8a:	4630      	mov	r0, r6
 800fd8c:	f7fd ffe6 	bl	800dd5c <lv_ll_clear>
        }
        buf->type[i] = "lv_chart";
    }

    return res;
}
 800fd90:	4628      	mov	r0, r5
 800fd92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_mem_free(*datal);
 800fd94:	6820      	ldr	r0, [r4, #0]
 800fd96:	f7fe f87b 	bl	800de90 <lv_mem_free>
        LL_READ(ext->series_ll, datal) {
 800fd9a:	4621      	mov	r1, r4
 800fd9c:	4630      	mov	r0, r6
 800fd9e:	f7fd ff6a 	bl	800dc76 <lv_ll_get_next>
 800fda2:	e7f0      	b.n	800fd86 <lv_chart_signal+0x22>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 800fda4:	2e05      	cmp	r6, #5
 800fda6:	d1f3      	bne.n	800fd90 <lv_chart_signal+0x2c>
 800fda8:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 800fdaa:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800fdae:	b2da      	uxtb	r2, r3
 800fdb0:	b119      	cbz	r1, 800fdba <lv_chart_signal+0x56>
 800fdb2:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) {  /*Find the last set data*/
 800fdb4:	2b07      	cmp	r3, #7
 800fdb6:	d1f8      	bne.n	800fdaa <lv_chart_signal+0x46>
 800fdb8:	461a      	mov	r2, r3
        buf->type[i] = "lv_chart";
 800fdba:	4b03      	ldr	r3, [pc, #12]	; (800fdc8 <lv_chart_signal+0x64>)
 800fdbc:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
 800fdc0:	e7e6      	b.n	800fd90 <lv_chart_signal+0x2c>
 800fdc2:	bf00      	nop
 800fdc4:	20017408 	.word	0x20017408
 800fdc8:	08087eae 	.word	0x08087eae

0800fdcc <lv_chart_design>:
{
 800fdcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
 800fdd0:	2a02      	cmp	r2, #2
{
 800fdd2:	b0a1      	sub	sp, #132	; 0x84
 800fdd4:	4683      	mov	fp, r0
 800fdd6:	9103      	str	r1, [sp, #12]
    if(mode == LV_DESIGN_COVER_CHK) {
 800fdd8:	d105      	bne.n	800fde6 <lv_chart_design+0x1a>
        return ancestor_design_f(chart, mask, mode);
 800fdda:	4bca      	ldr	r3, [pc, #808]	; (8010104 <lv_chart_design+0x338>)
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	4798      	blx	r3
}
 800fde0:	b021      	add	sp, #132	; 0x84
 800fde2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 800fde6:	b10a      	cbz	r2, 800fdec <lv_chart_design+0x20>
 800fde8:	2001      	movs	r0, #1
 800fdea:	e7f9      	b.n	800fde0 <lv_chart_design+0x14>
        lv_draw_rect(&chart->coords, mask, lv_obj_get_style(chart), lv_obj_get_opa_scale(chart));
 800fdec:	f100 0310 	add.w	r3, r0, #16
 800fdf0:	9306      	str	r3, [sp, #24]
 800fdf2:	f7f8 ff77 	bl	8008ce4 <lv_obj_get_style>
 800fdf6:	4604      	mov	r4, r0
 800fdf8:	4658      	mov	r0, fp
 800fdfa:	f7f8 ffde 	bl	8008dba <lv_obj_get_opa_scale>
 800fdfe:	9903      	ldr	r1, [sp, #12]
 800fe00:	4603      	mov	r3, r0
 800fe02:	4622      	mov	r2, r4
 800fe04:	9806      	ldr	r0, [sp, #24]
 800fe06:	f7fa fe41 	bl	800aa8c <lv_draw_rect>
        lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 800fe0a:	4658      	mov	r0, fp
 800fe0c:	f7f9 f835 	bl	8008e7a <lv_obj_get_ext_attr>
 800fe10:	9004      	str	r0, [sp, #16]
 * @param chart pointer to chart object
 * @param mask mask, inherited from the design function
 */
static void lv_chart_draw_div(lv_obj_t * chart, const lv_area_t * mask)
{
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 800fe12:	4658      	mov	r0, fp
 800fe14:	f7f9 f831 	bl	8008e7a <lv_obj_get_ext_attr>
 800fe18:	4681      	mov	r9, r0
    lv_style_t * style = lv_obj_get_style(chart);
 800fe1a:	4658      	mov	r0, fp
 800fe1c:	f7f8 ff62 	bl	8008ce4 <lv_obj_get_style>
 800fe20:	4604      	mov	r4, r0
    lv_opa_t opa_scale = lv_obj_get_opa_scale(chart);
 800fe22:	4658      	mov	r0, fp
 800fe24:	f7f8 ffc9 	bl	8008dba <lv_obj_get_opa_scale>
 800fe28:	9007      	str	r0, [sp, #28]
    uint8_t div_i;
    uint8_t div_i_end;
    uint8_t div_i_start;
    lv_point_t p1;
    lv_point_t p2;
    lv_coord_t w = lv_obj_get_width(chart);
 800fe2a:	4658      	mov	r0, fp
 800fe2c:	f7f8 ff4e 	bl	8008ccc <lv_obj_get_width>
 800fe30:	9008      	str	r0, [sp, #32]
    lv_coord_t h = lv_obj_get_height(chart);
 800fe32:	4658      	mov	r0, fp
 800fe34:	f7f8 ff50 	bl	8008cd8 <lv_obj_get_height>
    lv_coord_t x_ofs = chart->coords.x1;
 800fe38:	f9bb 3010 	ldrsh.w	r3, [fp, #16]
    lv_coord_t y_ofs = chart->coords.y1;

    if(ext->hdiv_cnt != 0) {
 800fe3c:	f899 6010 	ldrb.w	r6, [r9, #16]
    lv_coord_t h = lv_obj_get_height(chart);
 800fe40:	9009      	str	r0, [sp, #36]	; 0x24
    lv_coord_t x_ofs = chart->coords.x1;
 800fe42:	9305      	str	r3, [sp, #20]
    lv_coord_t y_ofs = chart->coords.y1;
 800fe44:	f9bb 8012 	ldrsh.w	r8, [fp, #18]
    if(ext->hdiv_cnt != 0) {
 800fe48:	2e00      	cmp	r6, #0
 800fe4a:	f040 80cc 	bne.w	800ffe6 <lv_chart_design+0x21a>
            p2.y = p1.y;
            lv_draw_line(&p1, &p2, mask, style, opa_scale);
        }
    }

    if(ext->vdiv_cnt != 0) {
 800fe4e:	f899 5011 	ldrb.w	r5, [r9, #17]
 800fe52:	2d00      	cmp	r5, #0
 800fe54:	f040 8110 	bne.w	8010078 <lv_chart_design+0x2ac>
        if(ext->type & LV_CHART_TYPE_LINE) lv_chart_draw_lines(chart, mask);
 800fe58:	9b04      	ldr	r3, [sp, #16]
 800fe5a:	7d1b      	ldrb	r3, [r3, #20]
 800fe5c:	07d9      	lsls	r1, r3, #31
 800fe5e:	d526      	bpl.n	800feae <lv_chart_design+0xe2>
 * Draw the data lines as lines on a chart
 * @param obj pointer to chart object
 */
static void lv_chart_draw_lines(lv_obj_t * chart, const lv_area_t * mask)
{
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 800fe60:	4658      	mov	r0, fp
 800fe62:	f7f9 f80a 	bl	8008e7a <lv_obj_get_ext_attr>
 800fe66:	4604      	mov	r4, r0

    uint16_t i;
    lv_point_t p1;
    lv_point_t p2;
    lv_coord_t w = lv_obj_get_width(chart);
 800fe68:	4658      	mov	r0, fp
 800fe6a:	f7f8 ff2f 	bl	8008ccc <lv_obj_get_width>
 800fe6e:	4682      	mov	sl, r0
    lv_coord_t h = lv_obj_get_height(chart);
 800fe70:	4658      	mov	r0, fp
 800fe72:	f7f8 ff31 	bl	8008cd8 <lv_obj_get_height>
 800fe76:	4680      	mov	r8, r0
    lv_coord_t x_ofs = chart->coords.x1;
    lv_coord_t y_ofs = chart->coords.y1;
    int32_t y_tmp;
    lv_chart_series_t * ser;
    lv_opa_t opa_scale = lv_obj_get_opa_scale(chart);
 800fe78:	4658      	mov	r0, fp
    lv_coord_t y_ofs = chart->coords.y1;
 800fe7a:	f9bb 7012 	ldrsh.w	r7, [fp, #18]
    lv_coord_t x_ofs = chart->coords.x1;
 800fe7e:	f9bb 9010 	ldrsh.w	r9, [fp, #16]
    lv_opa_t opa_scale = lv_obj_get_opa_scale(chart);
 800fe82:	f7f8 ff9a 	bl	8008dba <lv_obj_get_opa_scale>
    lv_style_t style;
    lv_style_copy(&style, &lv_style_plain);
 800fe86:	49a0      	ldr	r1, [pc, #640]	; (8010108 <lv_chart_design+0x33c>)
 800fe88:	4447      	add	r7, r8
    lv_opa_t opa_scale = lv_obj_get_opa_scale(chart);
 800fe8a:	9005      	str	r0, [sp, #20]
    lv_style_copy(&style, &lv_style_plain);
 800fe8c:	a80e      	add	r0, sp, #56	; 0x38
 800fe8e:	f7f9 fc51 	bl	8009734 <lv_style_copy>
    style.line.opa = ext->series.opa;
 800fe92:	7e63      	ldrb	r3, [r4, #25]
    style.line.width = ext->series.width;

    /*Go through all data lines*/
    LL_READ_BACK(ext->series_ll, ser) {
 800fe94:	4620      	mov	r0, r4
 800fe96:	b2bf      	uxth	r7, r7
    style.line.opa = ext->series.opa;
 800fe98:	f88d 307e 	strb.w	r3, [sp, #126]	; 0x7e
    style.line.width = ext->series.width;
 800fe9c:	8ae3      	ldrh	r3, [r4, #22]
 800fe9e:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
    LL_READ_BACK(ext->series_ll, ser) {
 800fea2:	f7fd fee5 	bl	800dc70 <lv_ll_get_tail>
 800fea6:	4606      	mov	r6, r0
 800fea8:	2e00      	cmp	r6, #0
 800feaa:	f040 812f 	bne.w	801010c <lv_chart_design+0x340>
        if(ext->type & LV_CHART_TYPE_COLUMN) lv_chart_draw_cols(chart, mask);
 800feae:	9b04      	ldr	r3, [sp, #16]
 800feb0:	7d1b      	ldrb	r3, [r3, #20]
 800feb2:	079a      	lsls	r2, r3, #30
 800feb4:	d533      	bpl.n	800ff1e <lv_chart_design+0x152>
 * @param chart pointer to chart object
 * @param mask mask, inherited from the design function
 */
static void lv_chart_draw_cols(lv_obj_t * chart, const lv_area_t * mask)
{
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 800feb6:	4658      	mov	r0, fp
    lv_style_t rects;
    lv_coord_t col_w = w / ((ext->series.num + 1) * ext->point_cnt); /* Suppose + 1 series as separator*/
    lv_coord_t x_ofs = col_w / 2; /*Shift with a half col.*/

    lv_style_copy(&rects, &lv_style_plain);
    rects.body.border.width = 0;
 800feb8:	2500      	movs	r5, #0
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 800feba:	f7f8 ffde 	bl	8008e7a <lv_obj_get_ext_attr>
 800febe:	4606      	mov	r6, r0
    lv_coord_t w = lv_obj_get_width(chart);
 800fec0:	4658      	mov	r0, fp
 800fec2:	f7f8 ff03 	bl	8008ccc <lv_obj_get_width>
 800fec6:	4681      	mov	r9, r0
    lv_coord_t h = lv_obj_get_height(chart);
 800fec8:	4658      	mov	r0, fp
 800feca:	f7f8 ff05 	bl	8008cd8 <lv_obj_get_height>
    lv_coord_t col_w = w / ((ext->series.num + 1) * ext->point_cnt); /* Suppose + 1 series as separator*/
 800fece:	7e33      	ldrb	r3, [r6, #24]
 800fed0:	f8b6 a012 	ldrh.w	sl, [r6, #18]
    lv_coord_t h = lv_obj_get_height(chart);
 800fed4:	4680      	mov	r8, r0
    lv_style_copy(&rects, &lv_style_plain);
 800fed6:	498c      	ldr	r1, [pc, #560]	; (8010108 <lv_chart_design+0x33c>)
 800fed8:	a80e      	add	r0, sp, #56	; 0x38
    lv_coord_t col_w = w / ((ext->series.num + 1) * ext->point_cnt); /* Suppose + 1 series as separator*/
 800feda:	fb03 aa0a 	mla	sl, r3, sl, sl
    lv_coord_t x_ofs = col_w / 2; /*Shift with a half col.*/
 800fede:	2302      	movs	r3, #2
    lv_coord_t col_w = w / ((ext->series.num + 1) * ext->point_cnt); /* Suppose + 1 series as separator*/
 800fee0:	fb99 fafa 	sdiv	sl, r9, sl
    lv_coord_t x_ofs = col_w / 2; /*Shift with a half col.*/
 800fee4:	fa0f f28a 	sxth.w	r2, sl
 800fee8:	fb92 f3f3 	sdiv	r3, r2, r3
 800feec:	9305      	str	r3, [sp, #20]
    lv_style_copy(&rects, &lv_style_plain);
 800feee:	f7f9 fc21 	bl	8009734 <lv_style_copy>
    rects.body.empty = 0;
 800fef2:	f89d 305e 	ldrb.w	r3, [sp, #94]	; 0x5e
    rects.body.border.width = 0;
 800fef6:	f8ad 504c 	strh.w	r5, [sp, #76]	; 0x4c
    rects.body.empty = 0;
 800fefa:	f365 0300 	bfi	r3, r5, #0, #1
    rects.body.radius = 0;
 800fefe:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
    rects.body.empty = 0;
 800ff02:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
    rects.body.opa = ext->series.opa;
 800ff06:	7e73      	ldrb	r3, [r6, #25]
 800ff08:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46

    col_a.y2 = chart->coords.y2;
 800ff0c:	f8bb 3016 	ldrh.w	r3, [fp, #22]
 800ff10:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e

    lv_coord_t x_act;

    /*Go through all points*/
    for(i = 0; i < ext->point_cnt; i ++) {
 800ff14:	8a73      	ldrh	r3, [r6, #18]
 800ff16:	b2aa      	uxth	r2, r5
 800ff18:	429a      	cmp	r2, r3
 800ff1a:	f0c0 8142 	bcc.w	80101a2 <lv_chart_design+0x3d6>
        if(ext->type & LV_CHART_TYPE_POINT) lv_chart_draw_points(chart, mask);
 800ff1e:	9b04      	ldr	r3, [sp, #16]
 800ff20:	7d1b      	ldrb	r3, [r3, #20]
 800ff22:	075b      	lsls	r3, r3, #29
 800ff24:	f57f af60 	bpl.w	800fde8 <lv_chart_design+0x1c>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 800ff28:	4658      	mov	r0, fp
 800ff2a:	f7f8 ffa6 	bl	8008e7a <lv_obj_get_ext_attr>
 800ff2e:	4605      	mov	r5, r0
    lv_coord_t w = lv_obj_get_width(chart);
 800ff30:	4658      	mov	r0, fp
 800ff32:	f7f8 fecb 	bl	8008ccc <lv_obj_get_width>
 800ff36:	4680      	mov	r8, r0
    lv_coord_t h = lv_obj_get_height(chart);
 800ff38:	4658      	mov	r0, fp
 800ff3a:	f7f8 fecd 	bl	8008cd8 <lv_obj_get_height>
    lv_style_copy(&style_point, &lv_style_plain);
 800ff3e:	4972      	ldr	r1, [pc, #456]	; (8010108 <lv_chart_design+0x33c>)
    lv_coord_t h = lv_obj_get_height(chart);
 800ff40:	4607      	mov	r7, r0
    lv_style_copy(&style_point, &lv_style_plain);
 800ff42:	a80e      	add	r0, sp, #56	; 0x38
    lv_coord_t y_ofs = chart->coords.y1;
 800ff44:	f9bb 6012 	ldrsh.w	r6, [fp, #18]
    lv_coord_t x_ofs = chart->coords.x1;
 800ff48:	f9bb 9010 	ldrsh.w	r9, [fp, #16]
    lv_style_copy(&style_point, &lv_style_plain);
 800ff4c:	f7f9 fbf2 	bl	8009734 <lv_style_copy>
    style_point.body.border.width = 0;
 800ff50:	2200      	movs	r2, #0
    style_point.body.empty = 0;
 800ff52:	f89d 305e 	ldrb.w	r3, [sp, #94]	; 0x5e
    LL_READ_BACK(ext->series_ll, ser) {
 800ff56:	4628      	mov	r0, r5
            cir_a.y1 = h - y_tmp + y_ofs;
 800ff58:	443e      	add	r6, r7
    style_point.body.empty = 0;
 800ff5a:	f362 0300 	bfi	r3, r2, #0, #1
    style_point.body.border.width = 0;
 800ff5e:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
    style_point.body.empty = 0;
 800ff62:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
    style_point.body.opa = ext->series.opa;
 800ff66:	7e6b      	ldrb	r3, [r5, #25]
 800ff68:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    style_point.body.radius = ext->series.width;
 800ff6c:	8aeb      	ldrh	r3, [r5, #22]
 800ff6e:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    LL_READ_BACK(ext->series_ll, ser) {
 800ff72:	f7fd fe7d 	bl	800dc70 <lv_ll_get_tail>
 800ff76:	4604      	mov	r4, r0
 800ff78:	2c00      	cmp	r4, #0
 800ff7a:	f43f af35 	beq.w	800fde8 <lv_chart_design+0x1c>
        style_point.body.main_color = ser->color;
 800ff7e:	6863      	ldr	r3, [r4, #4]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
#  endif
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
# if LV_COLOR_DEPTH == 32
//    ret.alpha = 0xFF;
    ret.alpha = (uint16_t)((uint16_t) c1.alpha * mix + (c2.alpha * (255 - mix))) >> 8;
 800ff80:	79e2      	ldrb	r2, [r4, #7]
 800ff82:	930f      	str	r3, [sp, #60]	; 0x3c
        style_point.body.grad_color = lv_color_mix(LV_COLOR_BLACK, ser->color, ext->series.dark);
 800ff84:	f895 e01a 	ldrb.w	lr, [r5, #26]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800ff88:	79a1      	ldrb	r1, [r4, #6]
 800ff8a:	f1ce 03ff 	rsb	r3, lr, #255	; 0xff
    ret.alpha = (uint16_t)((uint16_t) c1.alpha * mix + (c2.alpha * (255 - mix))) >> 8;
 800ff8e:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800ff92:	7960      	ldrb	r0, [r4, #5]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800ff94:	b29b      	uxth	r3, r3
    ret.alpha = (uint16_t)((uint16_t) c1.alpha * mix + (c2.alpha * (255 - mix))) >> 8;
 800ff96:	fb03 ee02 	mla	lr, r3, r2, lr
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800ff9a:	fb11 f103 	smulbb	r1, r1, r3
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800ff9e:	fb10 f003 	smulbb	r0, r0, r3
    ret.alpha = (uint16_t)((uint16_t) c1.alpha * mix + (c2.alpha * (255 - mix))) >> 8;
 800ffa2:	f3ce 2207 	ubfx	r2, lr, #8, #8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800ffa6:	f894 e004 	ldrb.w	lr, [r4, #4]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 800ffaa:	f3c1 2107 	ubfx	r1, r1, #8, #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 800ffae:	f3c0 2007 	ubfx	r0, r0, #8, #8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 800ffb2:	fb1e f303 	smulbb	r3, lr, r3
 800ffb6:	f88d 2043 	strb.w	r2, [sp, #67]	; 0x43
 800ffba:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
 800ffbe:	2100      	movs	r1, #0
 800ffc0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800ffc4:	f88d 0041 	strb.w	r0, [sp, #65]	; 0x41
 800ffc8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
        for(i = 0; i < ext->point_cnt; i ++) {
 800ffcc:	8a6a      	ldrh	r2, [r5, #18]
 800ffce:	b28b      	uxth	r3, r1
 800ffd0:	f101 0a01 	add.w	sl, r1, #1
 800ffd4:	4293      	cmp	r3, r2
 800ffd6:	f0c0 814e 	bcc.w	8010276 <lv_chart_design+0x4aa>
    LL_READ_BACK(ext->series_ll, ser) {
 800ffda:	4621      	mov	r1, r4
 800ffdc:	4628      	mov	r0, r5
 800ffde:	f7fd fe4f 	bl	800dc80 <lv_ll_get_prev>
 800ffe2:	4604      	mov	r4, r0
 800ffe4:	e7c8      	b.n	800ff78 <lv_chart_design+0x1ac>
        if(style->body.border.width != 0) {
 800ffe6:	f9b4 7014 	ldrsh.w	r7, [r4, #20]
 800ffea:	2f00      	cmp	r7, #0
 800ffec:	d142      	bne.n	8010074 <lv_chart_design+0x2a8>
            div_i_end = ext->hdiv_cnt + 1;
 800ffee:	3601      	adds	r6, #1
 800fff0:	b2f6      	uxtb	r6, r6
        p1.x = 0 + x_ofs;
 800fff2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
        p2.x = w + x_ofs;
 800fff6:	f10d 0a80 	add.w	sl, sp, #128	; 0x80
 800fffa:	9a08      	ldr	r2, [sp, #32]
        for(div_i = div_i_start; div_i <= div_i_end; div_i++) {
 800fffc:	463d      	mov	r5, r7
        p1.x = 0 + x_ofs;
 800fffe:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
        p2.x = w + x_ofs;
 8010002:	9b05      	ldr	r3, [sp, #20]
 8010004:	4413      	add	r3, r2
 8010006:	f82a 3d48 	strh.w	r3, [sl, #-72]!
        for(div_i = div_i_start; div_i <= div_i_end; div_i++) {
 801000a:	42b5      	cmp	r5, r6
 801000c:	f63f af1f 	bhi.w	800fe4e <lv_chart_design+0x82>
            p1.y = (int32_t)((int32_t)h * div_i) / (ext->hdiv_cnt + 1);
 8010010:	f899 2010 	ldrb.w	r2, [r9, #16]
            if(div_i == div_i_start) p1.y += (style->line.width >> 1) + 1;  /*The first line might not be visible*/
 8010014:	42bd      	cmp	r5, r7
            p1.y = (int32_t)((int32_t)h * div_i) / (ext->hdiv_cnt + 1);
 8010016:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801001a:	f102 0201 	add.w	r2, r2, #1
 801001e:	fb15 f303 	smulbb	r3, r5, r3
 8010022:	fb93 f3f2 	sdiv	r3, r3, r2
            p1.y +=  y_ofs;
 8010026:	4443      	add	r3, r8
            if(div_i == div_i_start) p1.y += (style->line.width >> 1) + 1;  /*The first line might not be visible*/
 8010028:	bf08      	it	eq
 801002a:	f9b4 2044 	ldrsheq.w	r2, [r4, #68]	; 0x44
            p1.y +=  y_ofs;
 801002e:	b29b      	uxth	r3, r3
 8010030:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            if(div_i == div_i_start) p1.y += (style->line.width >> 1) + 1;  /*The first line might not be visible*/
 8010034:	bf02      	ittt	eq
 8010036:	eb03 0362 	addeq.w	r3, r3, r2, asr #1
 801003a:	3301      	addeq	r3, #1
 801003c:	f8ad 3032 	strheq.w	r3, [sp, #50]	; 0x32
            if(div_i == div_i_end) p1.y -= (style->line.width >> 1) + 1;  /*The last line might not be visible*/
 8010040:	42b5      	cmp	r5, r6
 8010042:	d108      	bne.n	8010056 <lv_chart_design+0x28a>
 8010044:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8010048:	f9b4 2044 	ldrsh.w	r2, [r4, #68]	; 0x44
 801004c:	3b01      	subs	r3, #1
 801004e:	eba3 0362 	sub.w	r3, r3, r2, asr #1
 8010052:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            p2.y = p1.y;
 8010056:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
        for(div_i = div_i_start; div_i <= div_i_end; div_i++) {
 801005a:	3501      	adds	r5, #1
            lv_draw_line(&p1, &p2, mask, style, opa_scale);
 801005c:	9a03      	ldr	r2, [sp, #12]
 801005e:	4651      	mov	r1, sl
            p2.y = p1.y;
 8010060:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
            lv_draw_line(&p1, &p2, mask, style, opa_scale);
 8010064:	a80c      	add	r0, sp, #48	; 0x30
 8010066:	9b07      	ldr	r3, [sp, #28]
        for(div_i = div_i_start; div_i <= div_i_end; div_i++) {
 8010068:	b2ed      	uxtb	r5, r5
            lv_draw_line(&p1, &p2, mask, style, opa_scale);
 801006a:	9300      	str	r3, [sp, #0]
 801006c:	4623      	mov	r3, r4
 801006e:	f7f9 ffe5 	bl	800a03c <lv_draw_line>
 8010072:	e7ca      	b.n	801000a <lv_chart_design+0x23e>
            div_i_start = 1;
 8010074:	2701      	movs	r7, #1
 8010076:	e7bc      	b.n	800fff2 <lv_chart_design+0x226>
        if(style->body.border.width != 0) {
 8010078:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 801007c:	2e00      	cmp	r6, #0
 801007e:	d13e      	bne.n	80100fe <lv_chart_design+0x332>
            div_i_end = ext->vdiv_cnt + 1;
 8010080:	3501      	adds	r5, #1
 8010082:	b2ed      	uxtb	r5, r5
        p2.y = h + y_ofs;
 8010084:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(div_i = div_i_start; div_i <= div_i_end; div_i ++) {
 8010086:	4637      	mov	r7, r6
        p1.y = 0 + y_ofs;
 8010088:	f8ad 8032 	strh.w	r8, [sp, #50]	; 0x32
        p2.y = h + y_ofs;
 801008c:	4498      	add	r8, r3
 801008e:	f8ad 803a 	strh.w	r8, [sp, #58]	; 0x3a
        for(div_i = div_i_start; div_i <= div_i_end; div_i ++) {
 8010092:	42af      	cmp	r7, r5
 8010094:	f63f aee0 	bhi.w	800fe58 <lv_chart_design+0x8c>
            p1.x = (int32_t)((int32_t)w * div_i) / (ext->vdiv_cnt + 1);
 8010098:	f899 2011 	ldrb.w	r2, [r9, #17]
            if(div_i == div_i_start) p1.x += (style->line.width >> 1) + 1;  /*The first line might not be visible*/
 801009c:	42b7      	cmp	r7, r6
            p1.x = (int32_t)((int32_t)w * div_i) / (ext->vdiv_cnt + 1);
 801009e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80100a2:	f102 0201 	add.w	r2, r2, #1
 80100a6:	fb17 f303 	smulbb	r3, r7, r3
 80100aa:	fb93 f3f2 	sdiv	r3, r3, r2
            p1.x +=  x_ofs;
 80100ae:	9a05      	ldr	r2, [sp, #20]
 80100b0:	4413      	add	r3, r2
            if(div_i == div_i_start) p1.x += (style->line.width >> 1) + 1;  /*The first line might not be visible*/
 80100b2:	bf08      	it	eq
 80100b4:	f9b4 2044 	ldrsheq.w	r2, [r4, #68]	; 0x44
            p1.x +=  x_ofs;
 80100b8:	b29b      	uxth	r3, r3
 80100ba:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            if(div_i == div_i_start) p1.x += (style->line.width >> 1) + 1;  /*The first line might not be visible*/
 80100be:	bf02      	ittt	eq
 80100c0:	eb03 0362 	addeq.w	r3, r3, r2, asr #1
 80100c4:	3301      	addeq	r3, #1
 80100c6:	f8ad 3030 	strheq.w	r3, [sp, #48]	; 0x30
            if(div_i == div_i_end) p1.x -= (style->line.width >> 1) + 1;  /*The last line might not be visible*/
 80100ca:	42af      	cmp	r7, r5
 80100cc:	d108      	bne.n	80100e0 <lv_chart_design+0x314>
 80100ce:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80100d2:	f9b4 2044 	ldrsh.w	r2, [r4, #68]	; 0x44
 80100d6:	3b01      	subs	r3, #1
 80100d8:	eba3 0362 	sub.w	r3, r3, r2, asr #1
 80100dc:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            p2.x = p1.x;
 80100e0:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
        for(div_i = div_i_start; div_i <= div_i_end; div_i ++) {
 80100e4:	3701      	adds	r7, #1
            lv_draw_line(&p1, &p2, mask, style, opa_scale);
 80100e6:	9a03      	ldr	r2, [sp, #12]
 80100e8:	a90e      	add	r1, sp, #56	; 0x38
            p2.x = p1.x;
 80100ea:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
            lv_draw_line(&p1, &p2, mask, style, opa_scale);
 80100ee:	a80c      	add	r0, sp, #48	; 0x30
 80100f0:	9b07      	ldr	r3, [sp, #28]
        for(div_i = div_i_start; div_i <= div_i_end; div_i ++) {
 80100f2:	b2ff      	uxtb	r7, r7
            lv_draw_line(&p1, &p2, mask, style, opa_scale);
 80100f4:	9300      	str	r3, [sp, #0]
 80100f6:	4623      	mov	r3, r4
 80100f8:	f7f9 ffa0 	bl	800a03c <lv_draw_line>
 80100fc:	e7c9      	b.n	8010092 <lv_chart_design+0x2c6>
            div_i_start = 1;
 80100fe:	2601      	movs	r6, #1
 8010100:	e7c0      	b.n	8010084 <lv_chart_design+0x2b8>
 8010102:	bf00      	nop
 8010104:	20017404 	.word	0x20017404
 8010108:	20017dc0 	.word	0x20017dc0
        style.line.color = ser->color;
 801010c:	6873      	ldr	r3, [r6, #4]
        for(i = 1; i < ext->point_cnt; i ++) {
 801010e:	2501      	movs	r5, #1
        y_tmp = (int32_t)((int32_t) ser->points[0] - ext->ymin) * h;
 8010110:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
        style.line.color = ser->color;
 8010114:	931e      	str	r3, [sp, #120]	; 0x78
        y_tmp = (int32_t)((int32_t) ser->points[0] - ext->ymin) * h;
 8010116:	6833      	ldr	r3, [r6, #0]
        p1.x = 0 + x_ofs;
 8010118:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
        p2.x = 0 + x_ofs;
 801011c:	f8ad 9030 	strh.w	r9, [sp, #48]	; 0x30
        y_tmp = (int32_t)((int32_t) ser->points[0] - ext->ymin) * h;
 8010120:	f9b3 3000 	ldrsh.w	r3, [r3]
        y_tmp = y_tmp / (ext->ymax - ext->ymin);
 8010124:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
        y_tmp = (int32_t)((int32_t) ser->points[0] - ext->ymin) * h;
 8010128:	1a5b      	subs	r3, r3, r1
        y_tmp = y_tmp / (ext->ymax - ext->ymin);
 801012a:	1a52      	subs	r2, r2, r1
        y_tmp = (int32_t)((int32_t) ser->points[0] - ext->ymin) * h;
 801012c:	fb08 f303 	mul.w	r3, r8, r3
        y_tmp = y_tmp / (ext->ymax - ext->ymin);
 8010130:	fb93 f3f2 	sdiv	r3, r3, r2
        p2.y = h - y_tmp + y_ofs;
 8010134:	1afb      	subs	r3, r7, r3
 8010136:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
        for(i = 1; i < ext->point_cnt; i ++) {
 801013a:	8a62      	ldrh	r2, [r4, #18]
 801013c:	4295      	cmp	r5, r2
 801013e:	d305      	bcc.n	801014c <lv_chart_design+0x380>
    LL_READ_BACK(ext->series_ll, ser) {
 8010140:	4631      	mov	r1, r6
 8010142:	4620      	mov	r0, r4
 8010144:	f7fd fd9c 	bl	800dc80 <lv_ll_get_prev>
 8010148:	4606      	mov	r6, r0
 801014a:	e6ad      	b.n	800fea8 <lv_chart_design+0xdc>
            p1.x = p2.x;
 801014c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
            p2.x = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 8010150:	3a01      	subs	r2, #1
            y_tmp = (int32_t)((int32_t) ser->points[i] - ext->ymin) * h;
 8010152:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
            lv_draw_line(&p1, &p2, mask, &style, opa_scale);
 8010156:	a80a      	add	r0, sp, #40	; 0x28
            p1.x = p2.x;
 8010158:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            p1.y = p2.y;
 801015c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8010160:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
            p2.x = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 8010164:	fb05 f30a 	mul.w	r3, r5, sl
 8010168:	fb93 f3f2 	sdiv	r3, r3, r2
 801016c:	444b      	add	r3, r9
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
 801016e:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
            p2.x = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 8010172:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
 8010176:	1a52      	subs	r2, r2, r1
            y_tmp = (int32_t)((int32_t) ser->points[i] - ext->ymin) * h;
 8010178:	6833      	ldr	r3, [r6, #0]
 801017a:	f933 3015 	ldrsh.w	r3, [r3, r5, lsl #1]
        for(i = 1; i < ext->point_cnt; i ++) {
 801017e:	3501      	adds	r5, #1
            y_tmp = (int32_t)((int32_t) ser->points[i] - ext->ymin) * h;
 8010180:	1a5b      	subs	r3, r3, r1
            lv_draw_line(&p1, &p2, mask, &style, opa_scale);
 8010182:	a90c      	add	r1, sp, #48	; 0x30
        for(i = 1; i < ext->point_cnt; i ++) {
 8010184:	b2ad      	uxth	r5, r5
            y_tmp = (int32_t)((int32_t) ser->points[i] - ext->ymin) * h;
 8010186:	fb08 f303 	mul.w	r3, r8, r3
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
 801018a:	fb93 f3f2 	sdiv	r3, r3, r2
            p2.y = h - y_tmp + y_ofs;
 801018e:	1afb      	subs	r3, r7, r3
            lv_draw_line(&p1, &p2, mask, &style, opa_scale);
 8010190:	9a03      	ldr	r2, [sp, #12]
            p2.y = h - y_tmp + y_ofs;
 8010192:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            lv_draw_line(&p1, &p2, mask, &style, opa_scale);
 8010196:	9b05      	ldr	r3, [sp, #20]
 8010198:	9300      	str	r3, [sp, #0]
 801019a:	ab0e      	add	r3, sp, #56	; 0x38
 801019c:	f7f9 ff4e 	bl	800a03c <lv_draw_line>
 80101a0:	e7cb      	b.n	801013a <lv_chart_design+0x36e>
        x_act = (int32_t)((int32_t) w * i) / ext->point_cnt;
 80101a2:	b2aa      	uxth	r2, r5
        x_act += chart->coords.x1 + x_ofs;

        /*Draw the current point of all data line*/
        LL_READ_BACK(ext->series_ll, ser) {
 80101a4:	4630      	mov	r0, r6
        x_act = (int32_t)((int32_t) w * i) / ext->point_cnt;
 80101a6:	fb09 f402 	mul.w	r4, r9, r2
 80101aa:	9207      	str	r2, [sp, #28]
        x_act += chart->coords.x1 + x_ofs;
 80101ac:	9a05      	ldr	r2, [sp, #20]
        x_act = (int32_t)((int32_t) w * i) / ext->point_cnt;
 80101ae:	fb94 f4f3 	sdiv	r4, r4, r3
        x_act += chart->coords.x1 + x_ofs;
 80101b2:	f8bb 3010 	ldrh.w	r3, [fp, #16]
 80101b6:	4413      	add	r3, r2
 80101b8:	441c      	add	r4, r3
        LL_READ_BACK(ext->series_ll, ser) {
 80101ba:	f7fd fd59 	bl	800dc70 <lv_ll_get_tail>
            rects.body.grad_color = lv_color_mix(LV_COLOR_BLACK, ser->color, ext->series.dark);
            col_a.x1 = x_act;
            col_a.x2 = col_a.x1 + col_w;
            x_act += col_w;

            y_tmp = (int32_t)((int32_t) ser->points[i] - ext->ymin) * h;
 80101be:	9a07      	ldr	r2, [sp, #28]
        LL_READ_BACK(ext->series_ll, ser) {
 80101c0:	4607      	mov	r7, r0
        x_act += chart->coords.x1 + x_ofs;
 80101c2:	b224      	sxth	r4, r4
            y_tmp = (int32_t)((int32_t) ser->points[i] - ext->ymin) * h;
 80101c4:	0053      	lsls	r3, r2, #1
 80101c6:	9307      	str	r3, [sp, #28]
        LL_READ_BACK(ext->series_ll, ser) {
 80101c8:	b90f      	cbnz	r7, 80101ce <lv_chart_design+0x402>
 80101ca:	3501      	adds	r5, #1
 80101cc:	e6a2      	b.n	800ff14 <lv_chart_design+0x148>
            rects.body.main_color = ser->color;
 80101ce:	687b      	ldr	r3, [r7, #4]
    ret.alpha = (uint16_t)((uint16_t) c1.alpha * mix + (c2.alpha * (255 - mix))) >> 8;
 80101d0:	79fa      	ldrb	r2, [r7, #7]
 80101d2:	930f      	str	r3, [sp, #60]	; 0x3c
            rects.body.grad_color = lv_color_mix(LV_COLOR_BLACK, ser->color, ext->series.dark);
 80101d4:	f896 e01a 	ldrb.w	lr, [r6, #26]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 80101d8:	79b9      	ldrb	r1, [r7, #6]
 80101da:	f1ce 03ff 	rsb	r3, lr, #255	; 0xff
    ret.alpha = (uint16_t)((uint16_t) c1.alpha * mix + (c2.alpha * (255 - mix))) >> 8;
 80101de:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 80101e2:	7978      	ldrb	r0, [r7, #5]
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 80101e4:	b29b      	uxth	r3, r3
    ret.alpha = (uint16_t)((uint16_t) c1.alpha * mix + (c2.alpha * (255 - mix))) >> 8;
 80101e6:	fb03 ee02 	mla	lr, r3, r2, lr
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 80101ea:	fb11 f103 	smulbb	r1, r1, r3
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 80101ee:	fb10 f003 	smulbb	r0, r0, r3
    ret.alpha = (uint16_t)((uint16_t) c1.alpha * mix + (c2.alpha * (255 - mix))) >> 8;
 80101f2:	f3ce 2207 	ubfx	r2, lr, #8, #8
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 80101f6:	f897 e004 	ldrb.w	lr, [r7, #4]
            col_a.x1 = x_act;
 80101fa:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
 80101fe:	4454      	add	r4, sl
 8010200:	fb1e f303 	smulbb	r3, lr, r3
    ret.red =   (uint16_t)((uint16_t) c1.red * mix + (c2.red * (255 - mix))) >> 8;
 8010204:	f3c1 2107 	ubfx	r1, r1, #8, #8
            rects.body.grad_color = lv_color_mix(LV_COLOR_BLACK, ser->color, ext->series.dark);
 8010208:	f88d 2043 	strb.w	r2, [sp, #67]	; 0x43
 801020c:	b224      	sxth	r4, r4
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 801020e:	f3c3 2307 	ubfx	r3, r3, #8, #8
            y_tmp = (int32_t)((int32_t) ser->points[i] - ext->ymin) * h;
 8010212:	9a07      	ldr	r2, [sp, #28]
    ret.green = (uint16_t)((uint16_t) c1.green * mix + (c2.green * (255 - mix))) >> 8;
 8010214:	f3c0 2007 	ubfx	r0, r0, #8, #8
            rects.body.grad_color = lv_color_mix(LV_COLOR_BLACK, ser->color, ext->series.dark);
 8010218:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
    ret.blue =  (uint16_t)((uint16_t) c1.blue * mix + (c2.blue * (255 - mix))) >> 8;
 801021c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
            y_tmp = (int32_t)((int32_t) ser->points[i] - ext->ymin) * h;
 8010220:	683b      	ldr	r3, [r7, #0]
 8010222:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
            col_a.x2 = col_a.x1 + col_w;
 8010226:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
            y_tmp = (int32_t)((int32_t) ser->points[i] - ext->ymin) * h;
 801022a:	5e9b      	ldrsh	r3, [r3, r2]
            rects.body.grad_color = lv_color_mix(LV_COLOR_BLACK, ser->color, ext->series.dark);
 801022c:	f88d 0041 	strb.w	r0, [sp, #65]	; 0x41
            y_tmp = (int32_t)((int32_t) ser->points[i] - ext->ymin) * h;
 8010230:	1a5b      	subs	r3, r3, r1
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
 8010232:	f9b6 000e 	ldrsh.w	r0, [r6, #14]
            col_a.y1 = h - y_tmp + chart->coords.y1;
 8010236:	f8bb 2012 	ldrh.w	r2, [fp, #18]
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
 801023a:	1a41      	subs	r1, r0, r1
            y_tmp = (int32_t)((int32_t) ser->points[i] - ext->ymin) * h;
 801023c:	fb08 f303 	mul.w	r3, r8, r3
            col_a.y1 = h - y_tmp + chart->coords.y1;
 8010240:	4442      	add	r2, r8

            mask_ret = lv_area_intersect(&col_mask, mask, &col_a);
 8010242:	a80c      	add	r0, sp, #48	; 0x30
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
 8010244:	fb93 f3f1 	sdiv	r3, r3, r1
            col_a.y1 = h - y_tmp + chart->coords.y1;
 8010248:	1ad3      	subs	r3, r2, r3
            mask_ret = lv_area_intersect(&col_mask, mask, &col_a);
 801024a:	9903      	ldr	r1, [sp, #12]
 801024c:	aa0a      	add	r2, sp, #40	; 0x28
            col_a.y1 = h - y_tmp + chart->coords.y1;
 801024e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
            mask_ret = lv_area_intersect(&col_mask, mask, &col_a);
 8010252:	f7fd fac7 	bl	800d7e4 <lv_area_intersect>
            if(mask_ret != false) {
 8010256:	b140      	cbz	r0, 801026a <lv_chart_design+0x49e>
                lv_draw_rect(&chart->coords, &col_mask, &rects, lv_obj_get_opa_scale(chart));
 8010258:	4658      	mov	r0, fp
 801025a:	f7f8 fdae 	bl	8008dba <lv_obj_get_opa_scale>
 801025e:	aa0e      	add	r2, sp, #56	; 0x38
 8010260:	4603      	mov	r3, r0
 8010262:	a90c      	add	r1, sp, #48	; 0x30
 8010264:	9806      	ldr	r0, [sp, #24]
 8010266:	f7fa fc11 	bl	800aa8c <lv_draw_rect>
        LL_READ_BACK(ext->series_ll, ser) {
 801026a:	4639      	mov	r1, r7
 801026c:	4630      	mov	r0, r6
 801026e:	f7fd fd07 	bl	800dc80 <lv_ll_get_prev>
 8010272:	4607      	mov	r7, r0
 8010274:	e7a8      	b.n	80101c8 <lv_chart_design+0x3fc>
            cir_a.x1 = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 8010276:	b289      	uxth	r1, r1
 8010278:	3a01      	subs	r2, #1
 801027a:	fb08 f301 	mul.w	r3, r8, r1
 801027e:	fb93 f3f2 	sdiv	r3, r3, r2
 8010282:	444b      	add	r3, r9
            cir_a.x2 = cir_a.x1 + style_point.body.radius;
 8010284:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
            cir_a.x1 = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 8010288:	b29b      	uxth	r3, r3
            cir_a.x2 = cir_a.x1 + style_point.body.radius;
 801028a:	1898      	adds	r0, r3, r2
            cir_a.x1 -= style_point.body.radius;
 801028c:	1a9b      	subs	r3, r3, r2
 801028e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            y_tmp = (int32_t)((int32_t) ser->points[i] - ext->ymin) * h;
 8010292:	6823      	ldr	r3, [r4, #0]
            cir_a.x2 = cir_a.x1 + style_point.body.radius;
 8010294:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
            y_tmp = (int32_t)((int32_t) ser->points[i] - ext->ymin) * h;
 8010298:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
 801029c:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
 80102a0:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
            y_tmp = (int32_t)((int32_t) ser->points[i] - ext->ymin) * h;
 80102a4:	1a1b      	subs	r3, r3, r0
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
 80102a6:	1a09      	subs	r1, r1, r0
            lv_draw_rect(&cir_a, mask, &style_point, lv_obj_get_opa_scale(chart));
 80102a8:	4658      	mov	r0, fp
            y_tmp = (int32_t)((int32_t) ser->points[i] - ext->ymin) * h;
 80102aa:	437b      	muls	r3, r7
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
 80102ac:	fb93 f3f1 	sdiv	r3, r3, r1
            cir_a.y1 = h - y_tmp + y_ofs;
 80102b0:	1af3      	subs	r3, r6, r3
 80102b2:	b29b      	uxth	r3, r3
            cir_a.y2 = cir_a.y1 + style_point.body.radius;
 80102b4:	18d1      	adds	r1, r2, r3
            cir_a.y1 -= style_point.body.radius;
 80102b6:	1a9b      	subs	r3, r3, r2
            cir_a.y2 = cir_a.y1 + style_point.body.radius;
 80102b8:	f8ad 1036 	strh.w	r1, [sp, #54]	; 0x36
            cir_a.y1 -= style_point.body.radius;
 80102bc:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            lv_draw_rect(&cir_a, mask, &style_point, lv_obj_get_opa_scale(chart));
 80102c0:	f7f8 fd7b 	bl	8008dba <lv_obj_get_opa_scale>
 80102c4:	9903      	ldr	r1, [sp, #12]
 80102c6:	4603      	mov	r3, r0
 80102c8:	aa0e      	add	r2, sp, #56	; 0x38
 80102ca:	a80c      	add	r0, sp, #48	; 0x30
 80102cc:	f7fa fbde 	bl	800aa8c <lv_draw_rect>
 80102d0:	4651      	mov	r1, sl
 80102d2:	e67b      	b.n	800ffcc <lv_chart_design+0x200>

080102d4 <lv_chart_create>:
{
 80102d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102d6:	460e      	mov	r6, r1
    lv_obj_t * new_chart = lv_obj_create(par, copy);
 80102d8:	f7f8 f8cc 	bl	8008474 <lv_obj_create>
    lv_mem_assert(new_chart);
 80102dc:	4605      	mov	r5, r0
 80102de:	b900      	cbnz	r0, 80102e2 <lv_chart_create+0xe>
 80102e0:	e7fe      	b.n	80102e0 <lv_chart_create+0xc>
    lv_chart_ext_t * ext = lv_obj_allocate_ext_attr(new_chart, sizeof(lv_chart_ext_t));
 80102e2:	211c      	movs	r1, #28
 80102e4:	f7f8 fbcc 	bl	8008a80 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 80102e8:	4604      	mov	r4, r0
 80102ea:	b900      	cbnz	r0, 80102ee <lv_chart_create+0x1a>
 80102ec:	e7fe      	b.n	80102ec <lv_chart_create+0x18>
    lv_ll_init(&ext->series_ll, sizeof(lv_chart_series_t));
 80102ee:	2108      	movs	r1, #8
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_func(new_chart);
 80102f0:	4f2c      	ldr	r7, [pc, #176]	; (80103a4 <lv_chart_create+0xd0>)
    lv_ll_init(&ext->series_ll, sizeof(lv_chart_series_t));
 80102f2:	f7fd fc74 	bl	800dbde <lv_ll_init>
    ext->series.num = 0;
 80102f6:	2300      	movs	r3, #0
    ext->type = LV_CHART_TYPE_LINE;
 80102f8:	2201      	movs	r2, #1
    ext->series.num = 0;
 80102fa:	7623      	strb	r3, [r4, #24]
    ext->ymin = LV_CHART_YMIN_DEF;
 80102fc:	81a3      	strh	r3, [r4, #12]
    ext->ymax = LV_CHART_YMAX_DEF;
 80102fe:	2364      	movs	r3, #100	; 0x64
 8010300:	81e3      	strh	r3, [r4, #14]
    ext->hdiv_cnt = LV_CHART_HDIV_DEF;
 8010302:	2303      	movs	r3, #3
 8010304:	7423      	strb	r3, [r4, #16]
    ext->vdiv_cnt = LV_CHART_VDIV_DEF;
 8010306:	2305      	movs	r3, #5
 8010308:	7463      	strb	r3, [r4, #17]
    ext->point_cnt = LV_CHART_PNUM_DEF;
 801030a:	230a      	movs	r3, #10
 801030c:	8263      	strh	r3, [r4, #18]
    ext->type = LV_CHART_TYPE_LINE;
 801030e:	7d23      	ldrb	r3, [r4, #20]
 8010310:	f362 0302 	bfi	r3, r2, #0, #3
 8010314:	7523      	strb	r3, [r4, #20]
    ext->series.opa = LV_OPA_COVER;
 8010316:	23ff      	movs	r3, #255	; 0xff
 8010318:	7663      	strb	r3, [r4, #25]
    ext->series.dark = LV_OPA_50;
 801031a:	237f      	movs	r3, #127	; 0x7f
 801031c:	76a3      	strb	r3, [r4, #26]
    ext->series.width = 2;
 801031e:	2302      	movs	r3, #2
 8010320:	82e3      	strh	r3, [r4, #22]
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_func(new_chart);
 8010322:	683b      	ldr	r3, [r7, #0]
 8010324:	b91b      	cbnz	r3, 801032e <lv_chart_create+0x5a>
 8010326:	4628      	mov	r0, r5
 8010328:	f7f8 fda5 	bl	8008e76 <lv_obj_get_design_func>
 801032c:	6038      	str	r0, [r7, #0]
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_chart);
 801032e:	4f1e      	ldr	r7, [pc, #120]	; (80103a8 <lv_chart_create+0xd4>)
 8010330:	683b      	ldr	r3, [r7, #0]
 8010332:	b91b      	cbnz	r3, 801033c <lv_chart_create+0x68>
 8010334:	4628      	mov	r0, r5
 8010336:	f7f8 fd9c 	bl	8008e72 <lv_obj_get_signal_func>
 801033a:	6038      	str	r0, [r7, #0]
    lv_obj_set_signal_func(new_chart, lv_chart_signal);
 801033c:	491b      	ldr	r1, [pc, #108]	; (80103ac <lv_chart_create+0xd8>)
 801033e:	4628      	mov	r0, r5
 8010340:	f7f8 fb9a 	bl	8008a78 <lv_obj_set_signal_func>
    lv_obj_set_design_func(new_chart, lv_chart_design);
 8010344:	491a      	ldr	r1, [pc, #104]	; (80103b0 <lv_chart_create+0xdc>)
 8010346:	4628      	mov	r0, r5
 8010348:	f7f8 fb98 	bl	8008a7c <lv_obj_set_design_func>
    if(copy == NULL) {
 801034c:	b97e      	cbnz	r6, 801036e <lv_chart_create+0x9a>
        lv_obj_set_size(new_chart, LV_HOR_RES / 3, LV_VER_RES / 3);
 801034e:	225a      	movs	r2, #90	; 0x5a
 8010350:	21a0      	movs	r1, #160	; 0xa0
 8010352:	4628      	mov	r0, r5
 8010354:	f7f8 f9c1 	bl	80086da <lv_obj_set_size>
        lv_theme_t * th = lv_theme_get_current();
 8010358:	f005 fb8c 	bl	8015a74 <lv_theme_get_current>
        if(th) {
 801035c:	b128      	cbz	r0, 801036a <lv_chart_create+0x96>
 * @param chart pointer to a chart object
 * @param style pointer to a style
 */
static inline void lv_chart_set_style(lv_obj_t *chart, lv_style_t *style)
{
    lv_obj_set_style(chart, style);
 801035e:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8010360:	4628      	mov	r0, r5
 8010362:	f7f8 fc51 	bl	8008c08 <lv_obj_set_style>
}
 8010366:	4628      	mov	r0, r5
 8010368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801036a:	4912      	ldr	r1, [pc, #72]	; (80103b4 <lv_chart_create+0xe0>)
 801036c:	e7f8      	b.n	8010360 <lv_chart_create+0x8c>
        lv_chart_ext_t * ext_copy = lv_obj_get_ext_attr(copy);
 801036e:	4630      	mov	r0, r6
 8010370:	f7f8 fd83 	bl	8008e7a <lv_obj_get_ext_attr>
        ext->type = ext_copy->type;
 8010374:	7d23      	ldrb	r3, [r4, #20]
 8010376:	7d02      	ldrb	r2, [r0, #20]
 8010378:	f362 0302 	bfi	r3, r2, #0, #3
 801037c:	7523      	strb	r3, [r4, #20]
        ext->ymin = ext_copy->ymin;
 801037e:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8010382:	81a3      	strh	r3, [r4, #12]
        ext->ymax = ext_copy->ymax;
 8010384:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8010388:	81e3      	strh	r3, [r4, #14]
        ext->hdiv_cnt = ext_copy->hdiv_cnt;
 801038a:	7c03      	ldrb	r3, [r0, #16]
 801038c:	7423      	strb	r3, [r4, #16]
        ext->vdiv_cnt = ext_copy->vdiv_cnt;
 801038e:	7c43      	ldrb	r3, [r0, #17]
 8010390:	7463      	strb	r3, [r4, #17]
        ext->point_cnt = ext_copy->point_cnt;
 8010392:	8a43      	ldrh	r3, [r0, #18]
 8010394:	8263      	strh	r3, [r4, #18]
        ext->series.opa =  ext_copy->series.opa;
 8010396:	7e43      	ldrb	r3, [r0, #25]
        lv_obj_refresh_style(new_chart);
 8010398:	4628      	mov	r0, r5
        ext->series.opa =  ext_copy->series.opa;
 801039a:	7663      	strb	r3, [r4, #25]
        lv_obj_refresh_style(new_chart);
 801039c:	f7f8 fb2e 	bl	80089fc <lv_obj_refresh_style>
 80103a0:	e7e1      	b.n	8010366 <lv_chart_create+0x92>
 80103a2:	bf00      	nop
 80103a4:	20017404 	.word	0x20017404
 80103a8:	20017408 	.word	0x20017408
 80103ac:	0800fd65 	.word	0x0800fd65
 80103b0:	0800fdcd 	.word	0x0800fdcd
 80103b4:	20017ca0 	.word	0x20017ca0

080103b8 <lv_chart_add_series>:
{
 80103b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103ba:	460f      	mov	r7, r1
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 80103bc:	f7f8 fd5d 	bl	8008e7a <lv_obj_get_ext_attr>
 80103c0:	4604      	mov	r4, r0
    lv_chart_series_t * ser = lv_ll_ins_head(&ext->series_ll);
 80103c2:	f7fd fc16 	bl	800dbf2 <lv_ll_ins_head>
    lv_mem_assert(ser);
 80103c6:	4606      	mov	r6, r0
 80103c8:	b900      	cbnz	r0, 80103cc <lv_chart_add_series+0x14>
 80103ca:	e7fe      	b.n	80103ca <lv_chart_add_series+0x12>
    lv_coord_t def = (ext->ymin + ext->ymax) >> 1;  /*half range as default value*/
 80103cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80103d0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    ser->color = color;
 80103d4:	6047      	str	r7, [r0, #4]
    ser->points = lv_mem_alloc(sizeof(lv_coord_t) * ext->point_cnt);
 80103d6:	8a60      	ldrh	r0, [r4, #18]
    lv_coord_t def = (ext->ymin + ext->ymax) >> 1;  /*half range as default value*/
 80103d8:	441d      	add	r5, r3
    ser->points = lv_mem_alloc(sizeof(lv_coord_t) * ext->point_cnt);
 80103da:	0040      	lsls	r0, r0, #1
 80103dc:	f7fd fd34 	bl	800de48 <lv_mem_alloc>
 80103e0:	6030      	str	r0, [r6, #0]
    lv_coord_t def = (ext->ymin + ext->ymax) >> 1;  /*half range as default value*/
 80103e2:	106d      	asrs	r5, r5, #1
    lv_mem_assert(ser->points);
 80103e4:	b148      	cbz	r0, 80103fa <lv_chart_add_series+0x42>
 80103e6:	2300      	movs	r3, #0
    for(i = 0; i < ext->point_cnt; i++) {
 80103e8:	8a61      	ldrh	r1, [r4, #18]
 80103ea:	b29a      	uxth	r2, r3
 80103ec:	4291      	cmp	r1, r2
 80103ee:	d805      	bhi.n	80103fc <lv_chart_add_series+0x44>
    ext->series.num++;
 80103f0:	7e23      	ldrb	r3, [r4, #24]
}
 80103f2:	4630      	mov	r0, r6
    ext->series.num++;
 80103f4:	3301      	adds	r3, #1
 80103f6:	7623      	strb	r3, [r4, #24]
}
 80103f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103fa:	e7fe      	b.n	80103fa <lv_chart_add_series+0x42>
        *p_tmp = def;
 80103fc:	f820 5013 	strh.w	r5, [r0, r3, lsl #1]
 8010400:	3301      	adds	r3, #1
 8010402:	e7f1      	b.n	80103e8 <lv_chart_add_series+0x30>

08010404 <lv_chart_set_range>:
{
 8010404:	b570      	push	{r4, r5, r6, lr}
 8010406:	460d      	mov	r5, r1
 8010408:	4606      	mov	r6, r0
 801040a:	4614      	mov	r4, r2
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 801040c:	f7f8 fd35 	bl	8008e7a <lv_obj_get_ext_attr>
    if(ext->ymin == ymin && ext->ymax == ymax) return;
 8010410:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8010414:	42ab      	cmp	r3, r5
 8010416:	d103      	bne.n	8010420 <lv_chart_set_range+0x1c>
 8010418:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 801041c:	42a3      	cmp	r3, r4
 801041e:	d006      	beq.n	801042e <lv_chart_set_range+0x2a>
    ext->ymin = ymin;
 8010420:	8185      	strh	r5, [r0, #12]
    ext->ymax = ymax;
 8010422:	81c4      	strh	r4, [r0, #14]
    lv_obj_invalidate(chart);
 8010424:	4630      	mov	r0, r6
}
 8010426:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_invalidate(chart);
 801042a:	f7f7 bf45 	b.w	80082b8 <lv_obj_invalidate>
 801042e:	bd70      	pop	{r4, r5, r6, pc}

08010430 <lv_chart_set_type>:
{
 8010430:	b538      	push	{r3, r4, r5, lr}
 8010432:	460c      	mov	r4, r1
 8010434:	4605      	mov	r5, r0
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 8010436:	f7f8 fd20 	bl	8008e7a <lv_obj_get_ext_attr>
    if(ext->type == type) return;
 801043a:	7d03      	ldrb	r3, [r0, #20]
 801043c:	f003 0207 	and.w	r2, r3, #7
 8010440:	42a2      	cmp	r2, r4
 8010442:	d007      	beq.n	8010454 <lv_chart_set_type+0x24>
    ext->type = type;
 8010444:	f364 0302 	bfi	r3, r4, #0, #3
 8010448:	7503      	strb	r3, [r0, #20]
    lv_obj_invalidate(chart);
 801044a:	4628      	mov	r0, r5
}
 801044c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(chart);
 8010450:	f7f7 bf32 	b.w	80082b8 <lv_obj_invalidate>
 8010454:	bd38      	pop	{r3, r4, r5, pc}

08010456 <lv_chart_set_series_opa>:
{
 8010456:	b538      	push	{r3, r4, r5, lr}
 8010458:	460c      	mov	r4, r1
 801045a:	4605      	mov	r5, r0
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 801045c:	f7f8 fd0d 	bl	8008e7a <lv_obj_get_ext_attr>
    if(ext->series.opa == opa) return;
 8010460:	7e43      	ldrb	r3, [r0, #25]
 8010462:	42a3      	cmp	r3, r4
 8010464:	d005      	beq.n	8010472 <lv_chart_set_series_opa+0x1c>
    ext->series.opa = opa;
 8010466:	7644      	strb	r4, [r0, #25]
    lv_obj_invalidate(chart);
 8010468:	4628      	mov	r0, r5
}
 801046a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(chart);
 801046e:	f7f7 bf23 	b.w	80082b8 <lv_obj_invalidate>
 8010472:	bd38      	pop	{r3, r4, r5, pc}

08010474 <lv_chart_set_next>:
{
 8010474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010478:	4606      	mov	r6, r0
 801047a:	4688      	mov	r8, r1
 801047c:	4617      	mov	r7, r2
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 801047e:	f7f8 fcfc 	bl	8008e7a <lv_obj_get_ext_attr>
    for(i = 0; i < ext->point_cnt - 1; i++) {
 8010482:	2300      	movs	r3, #0
 8010484:	8a44      	ldrh	r4, [r0, #18]
 8010486:	1c59      	adds	r1, r3, #1
 8010488:	b29b      	uxth	r3, r3
 801048a:	f8d8 5000 	ldr.w	r5, [r8]
 801048e:	1e62      	subs	r2, r4, #1
 8010490:	4293      	cmp	r3, r2
 8010492:	db09      	blt.n	80104a8 <lv_chart_set_next+0x34>
    ser->points[ext->point_cnt - 1] = y;
 8010494:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
    lv_obj_invalidate(chart);
 8010498:	4630      	mov	r0, r6
    ser->points[ext->point_cnt - 1] = y;
 801049a:	3b01      	subs	r3, #1
 801049c:	f825 7013 	strh.w	r7, [r5, r3, lsl #1]
}
 80104a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_invalidate(chart);
 80104a4:	f7f7 bf08 	b.w	80082b8 <lv_obj_invalidate>
        ser->points[i] = ser->points[i + 1];
 80104a8:	eb05 0243 	add.w	r2, r5, r3, lsl #1
 80104ac:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80104b0:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
 80104b4:	460b      	mov	r3, r1
 80104b6:	e7e5      	b.n	8010484 <lv_chart_set_next+0x10>

080104b8 <lv_cont_refr_autofit>:
/**
 * Handle auto fit. Set the size of the object to involve all children.
 * @param cont pointer to an object which size will be modified
 */
static void lv_cont_refr_autofit(lv_obj_t * cont)
{
 80104b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80104bc:	b085      	sub	sp, #20
 80104be:	4604      	mov	r4, r0
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 80104c0:	f7f8 fcdb 	bl	8008e7a <lv_obj_get_ext_attr>

    if(ext->hor_fit == 0 &&
 80104c4:	7803      	ldrb	r3, [r0, #0]
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 80104c6:	4680      	mov	r8, r0
    if(ext->hor_fit == 0 &&
 80104c8:	f013 0f30 	tst.w	r3, #48	; 0x30
 80104cc:	d075      	beq.n	80105ba <lv_cont_refr_autofit+0x102>
        return;
    }

    lv_area_t new_cords;
    lv_area_t ori;
    lv_style_t * style = lv_obj_get_style(cont);
 80104ce:	4620      	mov	r0, r4
    new_cords.x1 = LV_COORD_MAX;
    new_cords.y1 = LV_COORD_MAX;
    new_cords.x2 = LV_COORD_MIN;
    new_cords.y2 = LV_COORD_MIN;

    LL_READ(cont->child_ll, i) {
 80104d0:	f104 0904 	add.w	r9, r4, #4
    lv_style_t * style = lv_obj_get_style(cont);
 80104d4:	f7f8 fc06 	bl	8008ce4 <lv_obj_get_style>
    lv_obj_get_coords(cont, &ori);
 80104d8:	a902      	add	r1, sp, #8
    lv_coord_t hpad = style->body.padding.hor;
 80104da:	f9b0 7022 	ldrsh.w	r7, [r0, #34]	; 0x22
    lv_coord_t vpad = style->body.padding.ver;
 80104de:	f9b0 6020 	ldrsh.w	r6, [r0, #32]
    lv_obj_get_coords(cont, &ori);
 80104e2:	4620      	mov	r0, r4
 80104e4:	f7f8 fbe0 	bl	8008ca8 <lv_obj_get_coords>
    lv_obj_get_coords(cont, &new_cords);
 80104e8:	4620      	mov	r0, r4
 80104ea:	4669      	mov	r1, sp
 80104ec:	f7f8 fbdc 	bl	8008ca8 <lv_obj_get_coords>
    new_cords.x1 = LV_COORD_MAX;
 80104f0:	f643 73ff 	movw	r3, #16383	; 0x3fff
    LL_READ(cont->child_ll, i) {
 80104f4:	4648      	mov	r0, r9
    new_cords.x1 = LV_COORD_MAX;
 80104f6:	f8ad 3000 	strh.w	r3, [sp]
    new_cords.y1 = LV_COORD_MAX;
 80104fa:	f8ad 3002 	strh.w	r3, [sp, #2]
    new_cords.x2 = LV_COORD_MIN;
 80104fe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8010502:	f8ad 3004 	strh.w	r3, [sp, #4]
    new_cords.y2 = LV_COORD_MIN;
 8010506:	f8ad 3006 	strh.w	r3, [sp, #6]
    LL_READ(cont->child_ll, i) {
 801050a:	f7fd fbae 	bl	800dc6a <lv_ll_get_head>
 801050e:	4605      	mov	r5, r0
 8010510:	2800      	cmp	r0, #0
 8010512:	d155      	bne.n	80105c0 <lv_cont_refr_autofit+0x108>
        new_cords.x2 = LV_MATH_MAX(new_cords.x2, i->coords.x2);
        new_cords.y2 = LV_MATH_MAX(new_cords.y2, i->coords.y2);
    }

    /*If the value is not the init value then the page has >=1 child.*/
    if(new_cords.x1 != LV_COORD_MAX) {
 8010514:	f9bd 2000 	ldrsh.w	r2, [sp]
 8010518:	f643 73ff 	movw	r3, #16383	; 0x3fff
 801051c:	429a      	cmp	r2, r3
 801051e:	d04c      	beq.n	80105ba <lv_cont_refr_autofit+0x102>
        if(ext->hor_fit != 0) {
 8010520:	f898 1000 	ldrb.w	r1, [r8]
 8010524:	06c8      	lsls	r0, r1, #27
            new_cords.x1 -= hpad;
 8010526:	bf4b      	itete	mi
 8010528:	b2bb      	uxthmi	r3, r7
            new_cords.x2 += hpad;
        } else {
            new_cords.x1 = cont->coords.x1;
 801052a:	8a23      	ldrhpl	r3, [r4, #16]
            new_cords.x1 -= hpad;
 801052c:	1ad2      	submi	r2, r2, r3
            new_cords.x1 = cont->coords.x1;
 801052e:	f8ad 3000 	strhpl.w	r3, [sp]
            new_cords.x2 = cont->coords.x2;
 8010532:	bf51      	iteee	pl
 8010534:	8aa3      	ldrhpl	r3, [r4, #20]
            new_cords.x1 -= hpad;
 8010536:	f8ad 2000 	strhmi.w	r2, [sp]
            new_cords.x2 += hpad;
 801053a:	f8bd 2004 	ldrhmi.w	r2, [sp, #4]
 801053e:	189b      	addmi	r3, r3, r2
            new_cords.x2 = cont->coords.x2;
 8010540:	f8ad 3004 	strh.w	r3, [sp, #4]
        }
        if(ext->ver_fit != 0) {
 8010544:	068b      	lsls	r3, r1, #26
 8010546:	d568      	bpl.n	801061a <lv_cont_refr_autofit+0x162>
            new_cords.y1 -= vpad;
 8010548:	b2b3      	uxth	r3, r6
 801054a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801054e:	1ad2      	subs	r2, r2, r3
 8010550:	f8ad 2002 	strh.w	r2, [sp, #2]
            new_cords.y2 += vpad;
 8010554:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010558:	4413      	add	r3, r2
        } else {
            new_cords.y1 = cont->coords.y1;
            new_cords.y2 = cont->coords.y2;
 801055a:	f8ad 3006 	strh.w	r3, [sp, #6]
        }

        /*Do nothing if the coordinates are not changed*/
        if(cont->coords.x1 != new_cords.x1 ||
 801055e:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 8010562:	f9bd 3000 	ldrsh.w	r3, [sp]
 8010566:	429a      	cmp	r2, r3
 8010568:	d111      	bne.n	801058e <lv_cont_refr_autofit+0xd6>
 801056a:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 801056e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8010572:	429a      	cmp	r2, r3
 8010574:	d10b      	bne.n	801058e <lv_cont_refr_autofit+0xd6>
                cont->coords.y1 != new_cords.y1 ||
 8010576:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 801057a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801057e:	429a      	cmp	r2, r3
 8010580:	d105      	bne.n	801058e <lv_cont_refr_autofit+0xd6>
                cont->coords.x2 != new_cords.x2 ||
 8010582:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8010586:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801058a:	429a      	cmp	r2, r3
 801058c:	d015      	beq.n	80105ba <lv_cont_refr_autofit+0x102>
                cont->coords.y2 != new_cords.y2) {

            lv_obj_invalidate(cont);
 801058e:	4620      	mov	r0, r4
 8010590:	f7f7 fe92 	bl	80082b8 <lv_obj_invalidate>
    memcpy(dest, src, sizeof(lv_area_t));
 8010594:	466b      	mov	r3, sp
 8010596:	cb03      	ldmia	r3!, {r0, r1}
 8010598:	6120      	str	r0, [r4, #16]
            lv_area_copy(&cont->coords, &new_cords);
            lv_obj_invalidate(cont);
 801059a:	4620      	mov	r0, r4
 801059c:	6161      	str	r1, [r4, #20]
 801059e:	f7f7 fe8b 	bl	80082b8 <lv_obj_invalidate>

            /*Notify the object about its new coordinates*/
            cont->signal_func(cont, LV_SIGNAL_CORD_CHG, &ori);
 80105a2:	69a3      	ldr	r3, [r4, #24]
 80105a4:	aa02      	add	r2, sp, #8
 80105a6:	2102      	movs	r1, #2
 80105a8:	4620      	mov	r0, r4
 80105aa:	4798      	blx	r3

            /*Inform the parent about the new coordinates*/
            lv_obj_t * par = lv_obj_get_parent(cont);
 80105ac:	4620      	mov	r0, r4
 80105ae:	f7f8 fb07 	bl	8008bc0 <lv_obj_get_parent>
            par->signal_func(par, LV_SIGNAL_CHILD_CHG, cont);
 80105b2:	4622      	mov	r2, r4
 80105b4:	6983      	ldr	r3, [r0, #24]
 80105b6:	2101      	movs	r1, #1
 80105b8:	4798      	blx	r3
        }
    }
}
 80105ba:	b005      	add	sp, #20
 80105bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if(lv_obj_get_hidden(i) != false) continue;
 80105c0:	4628      	mov	r0, r5
 80105c2:	f7f8 fbe1 	bl	8008d88 <lv_obj_get_hidden>
 80105c6:	bb18      	cbnz	r0, 8010610 <lv_cont_refr_autofit+0x158>
        new_cords.x1 = LV_MATH_MIN(new_cords.x1, i->coords.x1);
 80105c8:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
 80105cc:	f9bd 2000 	ldrsh.w	r2, [sp]
 80105d0:	4293      	cmp	r3, r2
 80105d2:	bfa8      	it	ge
 80105d4:	4613      	movge	r3, r2
        new_cords.y1 = LV_MATH_MIN(new_cords.y1, i->coords.y1);
 80105d6:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
        new_cords.x1 = LV_MATH_MIN(new_cords.x1, i->coords.x1);
 80105da:	f8ad 3000 	strh.w	r3, [sp]
        new_cords.y1 = LV_MATH_MIN(new_cords.y1, i->coords.y1);
 80105de:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
 80105e2:	4293      	cmp	r3, r2
 80105e4:	bfa8      	it	ge
 80105e6:	4613      	movge	r3, r2
        new_cords.x2 = LV_MATH_MAX(new_cords.x2, i->coords.x2);
 80105e8:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
        new_cords.y1 = LV_MATH_MIN(new_cords.y1, i->coords.y1);
 80105ec:	f8ad 3002 	strh.w	r3, [sp, #2]
        new_cords.x2 = LV_MATH_MAX(new_cords.x2, i->coords.x2);
 80105f0:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 80105f4:	4293      	cmp	r3, r2
 80105f6:	bfb8      	it	lt
 80105f8:	4613      	movlt	r3, r2
        new_cords.y2 = LV_MATH_MAX(new_cords.y2, i->coords.y2);
 80105fa:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
        new_cords.x2 = LV_MATH_MAX(new_cords.x2, i->coords.x2);
 80105fe:	f8ad 3004 	strh.w	r3, [sp, #4]
        new_cords.y2 = LV_MATH_MAX(new_cords.y2, i->coords.y2);
 8010602:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
 8010606:	4293      	cmp	r3, r2
 8010608:	bfb8      	it	lt
 801060a:	4613      	movlt	r3, r2
 801060c:	f8ad 3006 	strh.w	r3, [sp, #6]
    LL_READ(cont->child_ll, i) {
 8010610:	4629      	mov	r1, r5
 8010612:	4648      	mov	r0, r9
 8010614:	f7fd fb2f 	bl	800dc76 <lv_ll_get_next>
 8010618:	e779      	b.n	801050e <lv_cont_refr_autofit+0x56>
            new_cords.y1 = cont->coords.y1;
 801061a:	8a63      	ldrh	r3, [r4, #18]
 801061c:	f8ad 3002 	strh.w	r3, [sp, #2]
            new_cords.y2 = cont->coords.y2;
 8010620:	8ae3      	ldrh	r3, [r4, #22]
 8010622:	e79a      	b.n	801055a <lv_cont_refr_autofit+0xa2>

08010624 <lv_cont_create>:
{
 8010624:	b570      	push	{r4, r5, r6, lr}
 8010626:	460e      	mov	r6, r1
    lv_obj_t * new_cont = lv_obj_create(par, copy);
 8010628:	f7f7 ff24 	bl	8008474 <lv_obj_create>
    lv_mem_assert(new_cont);
 801062c:	4605      	mov	r5, r0
 801062e:	b900      	cbnz	r0, 8010632 <lv_cont_create+0xe>
 8010630:	e7fe      	b.n	8010630 <lv_cont_create+0xc>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_cont);
 8010632:	4c20      	ldr	r4, [pc, #128]	; (80106b4 <lv_cont_create+0x90>)
 8010634:	6823      	ldr	r3, [r4, #0]
 8010636:	b913      	cbnz	r3, 801063e <lv_cont_create+0x1a>
 8010638:	f7f8 fc1b 	bl	8008e72 <lv_obj_get_signal_func>
 801063c:	6020      	str	r0, [r4, #0]
    lv_obj_allocate_ext_attr(new_cont, sizeof(lv_cont_ext_t));
 801063e:	2101      	movs	r1, #1
 8010640:	4628      	mov	r0, r5
 8010642:	f7f8 fa1d 	bl	8008a80 <lv_obj_allocate_ext_attr>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(new_cont);
 8010646:	4628      	mov	r0, r5
 8010648:	f7f8 fc17 	bl	8008e7a <lv_obj_get_ext_attr>
    if(ext == NULL) return NULL;
 801064c:	4604      	mov	r4, r0
 801064e:	b378      	cbz	r0, 80106b0 <lv_cont_create+0x8c>
    ext->hor_fit = 0;
 8010650:	7803      	ldrb	r3, [r0, #0]
    lv_obj_set_signal_func(new_cont, lv_cont_signal);
 8010652:	4919      	ldr	r1, [pc, #100]	; (80106b8 <lv_cont_create+0x94>)
    ext->layout = LV_LAYOUT_OFF;
 8010654:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
 8010658:	f36f 0303 	bfc	r3, #0, #4
 801065c:	7003      	strb	r3, [r0, #0]
    lv_obj_set_signal_func(new_cont, lv_cont_signal);
 801065e:	4628      	mov	r0, r5
 8010660:	f7f8 fa0a 	bl	8008a78 <lv_obj_set_signal_func>
    if(copy == NULL) {
 8010664:	b956      	cbnz	r6, 801067c <lv_cont_create+0x58>
        lv_theme_t * th = lv_theme_get_current();
 8010666:	f005 fa05 	bl	8015a74 <lv_theme_get_current>
        if(th) {
 801066a:	b128      	cbz	r0, 8010678 <lv_cont_create+0x54>
 * @param cont pointer to a container object
 * @param style pointer to the new style
 */
static inline void lv_cont_set_style(lv_obj_t *cont, lv_style_t * style)
{
    lv_obj_set_style(cont, style);
 801066c:	6881      	ldr	r1, [r0, #8]
 801066e:	4628      	mov	r0, r5
 8010670:	f7f8 faca 	bl	8008c08 <lv_obj_set_style>
}
 8010674:	4628      	mov	r0, r5
 8010676:	bd70      	pop	{r4, r5, r6, pc}
 8010678:	4910      	ldr	r1, [pc, #64]	; (80106bc <lv_cont_create+0x98>)
 801067a:	e7f8      	b.n	801066e <lv_cont_create+0x4a>
        lv_cont_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801067c:	4630      	mov	r0, r6
 801067e:	f7f8 fbfc 	bl	8008e7a <lv_obj_get_ext_attr>
        ext->hor_fit = copy_ext->hor_fit;
 8010682:	7803      	ldrb	r3, [r0, #0]
 8010684:	7822      	ldrb	r2, [r4, #0]
 8010686:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801068a:	f363 1204 	bfi	r2, r3, #4, #1
 801068e:	7022      	strb	r2, [r4, #0]
        ext->ver_fit = copy_ext->ver_fit;
 8010690:	b2d2      	uxtb	r2, r2
 8010692:	7803      	ldrb	r3, [r0, #0]
 8010694:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8010698:	f363 1245 	bfi	r2, r3, #5, #1
 801069c:	7022      	strb	r2, [r4, #0]
        ext->layout = copy_ext->layout;
 801069e:	7802      	ldrb	r2, [r0, #0]
        lv_obj_refresh_style(new_cont);
 80106a0:	4628      	mov	r0, r5
        ext->layout = copy_ext->layout;
 80106a2:	7823      	ldrb	r3, [r4, #0]
 80106a4:	f362 0303 	bfi	r3, r2, #0, #4
 80106a8:	7023      	strb	r3, [r4, #0]
        lv_obj_refresh_style(new_cont);
 80106aa:	f7f8 f9a7 	bl	80089fc <lv_obj_refresh_style>
 80106ae:	e7e1      	b.n	8010674 <lv_cont_create+0x50>
    if(ext == NULL) return NULL;
 80106b0:	4605      	mov	r5, r0
 80106b2:	e7df      	b.n	8010674 <lv_cont_create+0x50>
 80106b4:	2001740c 	.word	0x2001740c
 80106b8:	08010c7d 	.word	0x08010c7d
 80106bc:	20017ca0 	.word	0x20017ca0

080106c0 <lv_cont_set_layout>:
{
 80106c0:	b570      	push	{r4, r5, r6, lr}
 80106c2:	460d      	mov	r5, r1
 80106c4:	4604      	mov	r4, r0
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 80106c6:	f7f8 fbd8 	bl	8008e7a <lv_obj_get_ext_attr>
    if(ext->layout == layout) return;
 80106ca:	7803      	ldrb	r3, [r0, #0]
 80106cc:	f003 020f 	and.w	r2, r3, #15
 80106d0:	42aa      	cmp	r2, r5
 80106d2:	d009      	beq.n	80106e8 <lv_cont_set_layout+0x28>
    ext->layout = layout;
 80106d4:	f365 0303 	bfi	r3, r5, #0, #4
    cont->signal_func(cont, LV_SIGNAL_CHILD_CHG, NULL);
 80106d8:	2200      	movs	r2, #0
 80106da:	2101      	movs	r1, #1
    ext->layout = layout;
 80106dc:	7003      	strb	r3, [r0, #0]
    cont->signal_func(cont, LV_SIGNAL_CHILD_CHG, NULL);
 80106de:	4620      	mov	r0, r4
 80106e0:	69a3      	ldr	r3, [r4, #24]
}
 80106e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cont->signal_func(cont, LV_SIGNAL_CHILD_CHG, NULL);
 80106e6:	4718      	bx	r3
 80106e8:	bd70      	pop	{r4, r5, r6, pc}

080106ea <lv_cont_set_fit>:
{
 80106ea:	b570      	push	{r4, r5, r6, lr}
 80106ec:	4604      	mov	r4, r0
 80106ee:	460e      	mov	r6, r1
 80106f0:	4615      	mov	r5, r2
    lv_obj_invalidate(cont);
 80106f2:	f7f7 fde1 	bl	80082b8 <lv_obj_invalidate>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 80106f6:	4620      	mov	r0, r4
 80106f8:	f7f8 fbbf 	bl	8008e7a <lv_obj_get_ext_attr>
    if(ext->hor_fit == hor_en && ext->ver_fit == ver_en) return;
 80106fc:	7803      	ldrb	r3, [r0, #0]
 80106fe:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8010702:	42b2      	cmp	r2, r6
 8010704:	d103      	bne.n	801070e <lv_cont_set_fit+0x24>
 8010706:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801070a:	42ab      	cmp	r3, r5
 801070c:	d00c      	beq.n	8010728 <lv_cont_set_fit+0x3e>
    ext->hor_fit = hor_en == false ? 0 : 1;
 801070e:	7803      	ldrb	r3, [r0, #0]
    cont->signal_func(cont, LV_SIGNAL_CHILD_CHG, NULL);
 8010710:	2200      	movs	r2, #0
 8010712:	2101      	movs	r1, #1
    ext->hor_fit = hor_en == false ? 0 : 1;
 8010714:	f366 1304 	bfi	r3, r6, #4, #1
    ext->ver_fit = ver_en == false ? 0 : 1;
 8010718:	f365 1345 	bfi	r3, r5, #5, #1
 801071c:	7003      	strb	r3, [r0, #0]
    cont->signal_func(cont, LV_SIGNAL_CHILD_CHG, NULL);
 801071e:	4620      	mov	r0, r4
 8010720:	69a3      	ldr	r3, [r4, #24]
}
 8010722:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cont->signal_func(cont, LV_SIGNAL_CHILD_CHG, NULL);
 8010726:	4718      	bx	r3
 8010728:	bd70      	pop	{r4, r5, r6, pc}

0801072a <lv_cont_get_layout>:
{
 801072a:	b508      	push	{r3, lr}
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 801072c:	f7f8 fba5 	bl	8008e7a <lv_obj_get_ext_attr>
    return ext->layout;
 8010730:	7800      	ldrb	r0, [r0, #0]
}
 8010732:	f000 000f 	and.w	r0, r0, #15
 8010736:	bd08      	pop	{r3, pc}

08010738 <lv_cont_refr_layout>:
{
 8010738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801073c:	4604      	mov	r4, r0
 801073e:	b087      	sub	sp, #28
    lv_layout_t type = lv_cont_get_layout(cont);
 8010740:	f7ff fff3 	bl	801072a <lv_cont_get_layout>
    if(lv_obj_get_child(cont, NULL) == NULL) return;
 8010744:	2100      	movs	r1, #0
    lv_layout_t type = lv_cont_get_layout(cont);
 8010746:	4605      	mov	r5, r0
    if(lv_obj_get_child(cont, NULL) == NULL) return;
 8010748:	4620      	mov	r0, r4
 801074a:	f7f8 fa3b 	bl	8008bc4 <lv_obj_get_child>
 801074e:	2800      	cmp	r0, #0
 8010750:	f000 8290 	beq.w	8010c74 <lv_cont_refr_layout+0x53c>
    if(type == LV_LAYOUT_OFF) return;
 8010754:	2d00      	cmp	r5, #0
 8010756:	f000 828d 	beq.w	8010c74 <lv_cont_refr_layout+0x53c>
    if(type == LV_LAYOUT_CENTER) {
 801075a:	2d01      	cmp	r5, #1
 801075c:	d16a      	bne.n	8010834 <lv_cont_refr_layout+0xfc>
    LL_READ(cont->child_ll, child) {
 801075e:	1d26      	adds	r6, r4, #4
    lv_style_t * style = lv_obj_get_style(cont);
 8010760:	4620      	mov	r0, r4
    lv_coord_t h_tot = 0;
 8010762:	2500      	movs	r5, #0
    lv_style_t * style = lv_obj_get_style(cont);
 8010764:	f7f8 fabe 	bl	8008ce4 <lv_obj_get_style>
 8010768:	4607      	mov	r7, r0
    LL_READ(cont->child_ll, child) {
 801076a:	4630      	mov	r0, r6
 801076c:	f7fd fa7d 	bl	800dc6a <lv_ll_get_head>
    uint32_t obj_num = 0;
 8010770:	46a9      	mov	r9, r5
    LL_READ(cont->child_ll, child) {
 8010772:	4680      	mov	r8, r0
 8010774:	f1b8 0f00 	cmp.w	r8, #0
 8010778:	d11d      	bne.n	80107b6 <lv_cont_refr_layout+0x7e>
    if(obj_num == 0) return;
 801077a:	f1b9 0f00 	cmp.w	r9, #0
 801077e:	f000 8279 	beq.w	8010c74 <lv_cont_refr_layout+0x53c>
    h_tot -= style->body.padding.inner;
 8010782:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
    lv_coord_t last_cord = - (h_tot / 2);
 8010784:	f04f 0902 	mov.w	r9, #2
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8010788:	2101      	movs	r1, #1
    h_tot -= style->body.padding.inner;
 801078a:	1a2d      	subs	r5, r5, r0
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 801078c:	4620      	mov	r0, r4
 801078e:	f7f8 f966 	bl	8008a5e <lv_obj_set_protect>
    LL_READ_BACK(cont->child_ll, child) {
 8010792:	4630      	mov	r0, r6
    h_tot -= style->body.padding.inner;
 8010794:	b2ad      	uxth	r5, r5
    lv_coord_t last_cord = - (h_tot / 2);
 8010796:	b22d      	sxth	r5, r5
 8010798:	fb95 f5f9 	sdiv	r5, r5, r9
 801079c:	426d      	negs	r5, r5
 801079e:	b22d      	sxth	r5, r5
    LL_READ_BACK(cont->child_ll, child) {
 80107a0:	f7fd fa66 	bl	800dc70 <lv_ll_get_tail>
 80107a4:	4680      	mov	r8, r0
 80107a6:	b9f8      	cbnz	r0, 80107e8 <lv_cont_refr_layout+0xb0>
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 80107a8:	2101      	movs	r1, #1
 80107aa:	4620      	mov	r0, r4
}
 80107ac:	b007      	add	sp, #28
 80107ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 80107b2:	f7f8 b95a 	b.w	8008a6a <lv_obj_clear_protect>
        if(lv_obj_get_hidden(child) != false ||
 80107b6:	4640      	mov	r0, r8
 80107b8:	f7f8 fae6 	bl	8008d88 <lv_obj_get_hidden>
 80107bc:	b970      	cbnz	r0, 80107dc <lv_cont_refr_layout+0xa4>
                lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 80107be:	2104      	movs	r1, #4
 80107c0:	4640      	mov	r0, r8
 80107c2:	f7f8 fb4f 	bl	8008e64 <lv_obj_is_protected>
        if(lv_obj_get_hidden(child) != false ||
 80107c6:	b948      	cbnz	r0, 80107dc <lv_cont_refr_layout+0xa4>
        h_tot += lv_obj_get_height(child) + style->body.padding.inner;
 80107c8:	4640      	mov	r0, r8
        obj_num ++;
 80107ca:	f109 0901 	add.w	r9, r9, #1
        h_tot += lv_obj_get_height(child) + style->body.padding.inner;
 80107ce:	f7f8 fa83 	bl	8008cd8 <lv_obj_get_height>
 80107d2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80107d6:	4418      	add	r0, r3
 80107d8:	4405      	add	r5, r0
 80107da:	b22d      	sxth	r5, r5
    LL_READ(cont->child_ll, child) {
 80107dc:	4641      	mov	r1, r8
 80107de:	4630      	mov	r0, r6
 80107e0:	f7fd fa49 	bl	800dc76 <lv_ll_get_next>
 80107e4:	4680      	mov	r8, r0
 80107e6:	e7c5      	b.n	8010774 <lv_cont_refr_layout+0x3c>
        if(lv_obj_get_hidden(child) != false ||
 80107e8:	4640      	mov	r0, r8
 80107ea:	f7f8 facd 	bl	8008d88 <lv_obj_get_hidden>
 80107ee:	b9e0      	cbnz	r0, 801082a <lv_cont_refr_layout+0xf2>
                lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 80107f0:	2104      	movs	r1, #4
 80107f2:	4640      	mov	r0, r8
 80107f4:	f7f8 fb36 	bl	8008e64 <lv_obj_is_protected>
        if(lv_obj_get_hidden(child) != false ||
 80107f8:	4682      	mov	sl, r0
 80107fa:	b9b0      	cbnz	r0, 801082a <lv_cont_refr_layout+0xf2>
        lv_obj_align(child, cont, LV_ALIGN_CENTER, 0, last_cord + lv_obj_get_height(child) / 2);
 80107fc:	4640      	mov	r0, r8
 80107fe:	b2ad      	uxth	r5, r5
 8010800:	f7f8 fa6a 	bl	8008cd8 <lv_obj_get_height>
 8010804:	4653      	mov	r3, sl
 8010806:	4652      	mov	r2, sl
 8010808:	4621      	mov	r1, r4
 801080a:	fb90 f0f9 	sdiv	r0, r0, r9
 801080e:	4428      	add	r0, r5
 8010810:	b200      	sxth	r0, r0
 8010812:	9000      	str	r0, [sp, #0]
 8010814:	4640      	mov	r0, r8
 8010816:	f7f7 ffa2 	bl	800875e <lv_obj_align>
        last_cord += lv_obj_get_height(child) + style->body.padding.inner;
 801081a:	4640      	mov	r0, r8
 801081c:	f7f8 fa5c 	bl	8008cd8 <lv_obj_get_height>
 8010820:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8010824:	4418      	add	r0, r3
 8010826:	4405      	add	r5, r0
 8010828:	b22d      	sxth	r5, r5
    LL_READ_BACK(cont->child_ll, child) {
 801082a:	4641      	mov	r1, r8
 801082c:	4630      	mov	r0, r6
 801082e:	f7fd fa27 	bl	800dc80 <lv_ll_get_prev>
 8010832:	e7b7      	b.n	80107a4 <lv_cont_refr_layout+0x6c>
    } else if(type == LV_LAYOUT_COL_L || type == LV_LAYOUT_COL_M || type == LV_LAYOUT_COL_R) {
 8010834:	1eab      	subs	r3, r5, #2
 8010836:	b2db      	uxtb	r3, r3
 8010838:	2b02      	cmp	r3, #2
 801083a:	d84a      	bhi.n	80108d2 <lv_cont_refr_layout+0x19a>
    lv_layout_t type = lv_cont_get_layout(cont);
 801083c:	4620      	mov	r0, r4
 801083e:	f7ff ff74 	bl	801072a <lv_cont_get_layout>
 8010842:	4605      	mov	r5, r0
    lv_style_t * style = lv_obj_get_style(cont);
 8010844:	4620      	mov	r0, r4
 8010846:	f7f8 fa4d 	bl	8008ce4 <lv_obj_get_style>
    switch(type) {
 801084a:	2d03      	cmp	r5, #3
    lv_style_t * style = lv_obj_get_style(cont);
 801084c:	4607      	mov	r7, r0
    switch(type) {
 801084e:	d008      	beq.n	8010862 <lv_cont_refr_layout+0x12a>
 8010850:	2d04      	cmp	r5, #4
 8010852:	d036      	beq.n	80108c2 <lv_cont_refr_layout+0x18a>
 8010854:	2d02      	cmp	r5, #2
 8010856:	d13a      	bne.n	80108ce <lv_cont_refr_layout+0x196>
            hpad_corr = style->body.padding.hor;
 8010858:	f9b0 5022 	ldrsh.w	r5, [r0, #34]	; 0x22
            align = LV_ALIGN_IN_TOP_LEFT;
 801085c:	f04f 0801 	mov.w	r8, #1
 8010860:	e002      	b.n	8010868 <lv_cont_refr_layout+0x130>
            hpad_corr = 0;
 8010862:	2500      	movs	r5, #0
            align = LV_ALIGN_IN_TOP_MID;
 8010864:	f04f 0802 	mov.w	r8, #2
    LL_READ_BACK(cont->child_ll, child) {
 8010868:	f104 0904 	add.w	r9, r4, #4
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 801086c:	4620      	mov	r0, r4
 801086e:	2101      	movs	r1, #1
 8010870:	f7f8 f8f5 	bl	8008a5e <lv_obj_set_protect>
    LL_READ_BACK(cont->child_ll, child) {
 8010874:	4648      	mov	r0, r9
    lv_coord_t last_cord = style->body.padding.ver;
 8010876:	f9b7 a020 	ldrsh.w	sl, [r7, #32]
    LL_READ_BACK(cont->child_ll, child) {
 801087a:	f7fd f9f9 	bl	800dc70 <lv_ll_get_tail>
 801087e:	4606      	mov	r6, r0
 8010880:	2800      	cmp	r0, #0
 8010882:	d091      	beq.n	80107a8 <lv_cont_refr_layout+0x70>
        if(lv_obj_get_hidden(child) != false ||
 8010884:	4630      	mov	r0, r6
 8010886:	f7f8 fa7f 	bl	8008d88 <lv_obj_get_hidden>
 801088a:	b9a8      	cbnz	r0, 80108b8 <lv_cont_refr_layout+0x180>
                lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801088c:	2104      	movs	r1, #4
 801088e:	4630      	mov	r0, r6
 8010890:	f7f8 fae8 	bl	8008e64 <lv_obj_is_protected>
        if(lv_obj_get_hidden(child) != false ||
 8010894:	b980      	cbnz	r0, 80108b8 <lv_cont_refr_layout+0x180>
        lv_obj_align(child, cont, align, hpad_corr, last_cord);
 8010896:	462b      	mov	r3, r5
 8010898:	f8cd a000 	str.w	sl, [sp]
 801089c:	4642      	mov	r2, r8
 801089e:	4621      	mov	r1, r4
 80108a0:	4630      	mov	r0, r6
 80108a2:	f7f7 ff5c 	bl	800875e <lv_obj_align>
        last_cord += lv_obj_get_height(child) + style->body.padding.inner;
 80108a6:	4630      	mov	r0, r6
 80108a8:	f7f8 fa16 	bl	8008cd8 <lv_obj_get_height>
 80108ac:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80108b0:	4418      	add	r0, r3
 80108b2:	4450      	add	r0, sl
 80108b4:	fa0f fa80 	sxth.w	sl, r0
    LL_READ_BACK(cont->child_ll, child) {
 80108b8:	4631      	mov	r1, r6
 80108ba:	4648      	mov	r0, r9
 80108bc:	f7fd f9e0 	bl	800dc80 <lv_ll_get_prev>
 80108c0:	e7dd      	b.n	801087e <lv_cont_refr_layout+0x146>
            hpad_corr = -style->body.padding.hor;
 80108c2:	8c45      	ldrh	r5, [r0, #34]	; 0x22
            align = LV_ALIGN_IN_TOP_RIGHT;
 80108c4:	f04f 0803 	mov.w	r8, #3
            hpad_corr = -style->body.padding.hor;
 80108c8:	426d      	negs	r5, r5
 80108ca:	b22d      	sxth	r5, r5
 80108cc:	e7cc      	b.n	8010868 <lv_cont_refr_layout+0x130>
            hpad_corr = 0;
 80108ce:	2500      	movs	r5, #0
 80108d0:	e7c4      	b.n	801085c <lv_cont_refr_layout+0x124>
    } else if(type == LV_LAYOUT_ROW_T || type == LV_LAYOUT_ROW_M || type == LV_LAYOUT_ROW_B) {
 80108d2:	1f6b      	subs	r3, r5, #5
 80108d4:	b2db      	uxtb	r3, r3
 80108d6:	2b02      	cmp	r3, #2
 80108d8:	d848      	bhi.n	801096c <lv_cont_refr_layout+0x234>
    lv_layout_t type = lv_cont_get_layout(cont);
 80108da:	4620      	mov	r0, r4
 80108dc:	f7ff ff25 	bl	801072a <lv_cont_get_layout>
 80108e0:	4606      	mov	r6, r0
    lv_style_t * style = lv_obj_get_style(cont);
 80108e2:	4620      	mov	r0, r4
 80108e4:	f7f8 f9fe 	bl	8008ce4 <lv_obj_get_style>
    switch(type) {
 80108e8:	2e06      	cmp	r6, #6
    lv_style_t * style = lv_obj_get_style(cont);
 80108ea:	4607      	mov	r7, r0
    lv_coord_t vpad_corr = style->body.padding.ver;
 80108ec:	f9b0 5020 	ldrsh.w	r5, [r0, #32]
    switch(type) {
 80108f0:	d033      	beq.n	801095a <lv_cont_refr_layout+0x222>
 80108f2:	2e07      	cmp	r6, #7
 80108f4:	d035      	beq.n	8010962 <lv_cont_refr_layout+0x22a>
            vpad_corr = 0;
 80108f6:	2e05      	cmp	r6, #5
 80108f8:	f04f 0801 	mov.w	r8, #1
 80108fc:	bf18      	it	ne
 80108fe:	2500      	movne	r5, #0
    LL_READ_BACK(cont->child_ll, child) {
 8010900:	f104 0904 	add.w	r9, r4, #4
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8010904:	4620      	mov	r0, r4
 8010906:	2101      	movs	r1, #1
 8010908:	f7f8 f8a9 	bl	8008a5e <lv_obj_set_protect>
    LL_READ_BACK(cont->child_ll, child) {
 801090c:	4648      	mov	r0, r9
    lv_coord_t last_cord = style->body.padding.hor;
 801090e:	f9b7 a022 	ldrsh.w	sl, [r7, #34]	; 0x22
    LL_READ_BACK(cont->child_ll, child) {
 8010912:	f7fd f9ad 	bl	800dc70 <lv_ll_get_tail>
 8010916:	4606      	mov	r6, r0
 8010918:	2800      	cmp	r0, #0
 801091a:	f43f af45 	beq.w	80107a8 <lv_cont_refr_layout+0x70>
        if(lv_obj_get_hidden(child) != false ||
 801091e:	4630      	mov	r0, r6
 8010920:	f7f8 fa32 	bl	8008d88 <lv_obj_get_hidden>
 8010924:	b9a0      	cbnz	r0, 8010950 <lv_cont_refr_layout+0x218>
                lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8010926:	2104      	movs	r1, #4
 8010928:	4630      	mov	r0, r6
 801092a:	f7f8 fa9b 	bl	8008e64 <lv_obj_is_protected>
        if(lv_obj_get_hidden(child) != false ||
 801092e:	b978      	cbnz	r0, 8010950 <lv_cont_refr_layout+0x218>
        lv_obj_align(child, cont, align, last_cord, vpad_corr);
 8010930:	4653      	mov	r3, sl
 8010932:	4642      	mov	r2, r8
 8010934:	4621      	mov	r1, r4
 8010936:	4630      	mov	r0, r6
 8010938:	9500      	str	r5, [sp, #0]
 801093a:	f7f7 ff10 	bl	800875e <lv_obj_align>
        last_cord += lv_obj_get_width(child) + style->body.padding.inner;
 801093e:	4630      	mov	r0, r6
 8010940:	f7f8 f9c4 	bl	8008ccc <lv_obj_get_width>
 8010944:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8010948:	4403      	add	r3, r0
 801094a:	4453      	add	r3, sl
 801094c:	fa0f fa83 	sxth.w	sl, r3
    LL_READ_BACK(cont->child_ll, child) {
 8010950:	4631      	mov	r1, r6
 8010952:	4648      	mov	r0, r9
 8010954:	f7fd f994 	bl	800dc80 <lv_ll_get_prev>
 8010958:	e7dd      	b.n	8010916 <lv_cont_refr_layout+0x1de>
            vpad_corr = 0;
 801095a:	2500      	movs	r5, #0
            align = LV_ALIGN_IN_LEFT_MID;
 801095c:	f04f 0807 	mov.w	r8, #7
 8010960:	e7ce      	b.n	8010900 <lv_cont_refr_layout+0x1c8>
            vpad_corr = -style->body.padding.ver;
 8010962:	426d      	negs	r5, r5
            align = LV_ALIGN_IN_BOTTOM_LEFT;
 8010964:	f04f 0804 	mov.w	r8, #4
            vpad_corr = -style->body.padding.ver;
 8010968:	b22d      	sxth	r5, r5
 801096a:	e7c9      	b.n	8010900 <lv_cont_refr_layout+0x1c8>
    } else if(type == LV_LAYOUT_PRETTY) {
 801096c:	2d08      	cmp	r5, #8
 801096e:	f040 80e6 	bne.w	8010b3e <lv_cont_refr_layout+0x406>
    lv_style_t * style = lv_obj_get_style(cont);
 8010972:	4620      	mov	r0, r4
 8010974:	f7f8 f9b6 	bl	8008ce4 <lv_obj_get_style>
 8010978:	4681      	mov	r9, r0
    lv_coord_t w_obj = lv_obj_get_width(cont);
 801097a:	4620      	mov	r0, r4
 801097c:	f7f8 f9a6 	bl	8008ccc <lv_obj_get_width>
    child_rs = lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
 8010980:	1d23      	adds	r3, r4, #4
    lv_coord_t w_obj = lv_obj_get_width(cont);
 8010982:	9003      	str	r0, [sp, #12]
    child_rs = lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
 8010984:	4618      	mov	r0, r3
    lv_coord_t act_y = style->body.padding.ver;
 8010986:	f9b9 a020 	ldrsh.w	sl, [r9, #32]
    child_rs = lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
 801098a:	9302      	str	r3, [sp, #8]
 801098c:	f7fd f970 	bl	800dc70 <lv_ll_get_tail>
    if(child_rs == NULL) return;    /*Return if no child*/
 8010990:	4605      	mov	r5, r0
 8010992:	2800      	cmp	r0, #0
 8010994:	f000 816e 	beq.w	8010c74 <lv_cont_refr_layout+0x53c>
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8010998:	2101      	movs	r1, #1
 801099a:	4620      	mov	r0, r4
 801099c:	f7f8 f85f 	bl	8008a5e <lv_obj_set_protect>
        lv_coord_t w_row = style->body.padding.hor * 2; /*The width is at least the left+right hpad*/
 80109a0:	f8b9 b022 	ldrh.w	fp, [r9, #34]	; 0x22
        uint32_t obj_num = 0;
 80109a4:	2700      	movs	r7, #0
        lv_coord_t w_row = style->body.padding.hor * 2; /*The width is at least the left+right hpad*/
 80109a6:	462e      	mov	r6, r5
 80109a8:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
        lv_coord_t h_row = 0;
 80109ac:	46b8      	mov	r8, r7
        lv_coord_t w_row = style->body.padding.hor * 2; /*The width is at least the left+right hpad*/
 80109ae:	fa0f fb8b 	sxth.w	fp, fp
            if(lv_obj_get_hidden(child_rc) == false &&
 80109b2:	4628      	mov	r0, r5
 80109b4:	f7f8 f9e8 	bl	8008d88 <lv_obj_get_hidden>
 80109b8:	2800      	cmp	r0, #0
 80109ba:	d13b      	bne.n	8010a34 <lv_cont_refr_layout+0x2fc>
                    lv_obj_is_protected(child_rc, LV_PROTECT_POS) == false) {
 80109bc:	2104      	movs	r1, #4
 80109be:	4628      	mov	r0, r5
 80109c0:	f7f8 fa50 	bl	8008e64 <lv_obj_is_protected>
            if(lv_obj_get_hidden(child_rc) == false &&
 80109c4:	bbb0      	cbnz	r0, 8010a34 <lv_cont_refr_layout+0x2fc>
                if(w_row + lv_obj_get_width(child_rc) > w_obj) {
 80109c6:	4628      	mov	r0, r5
 80109c8:	f7f8 f980 	bl	8008ccc <lv_obj_get_width>
 80109cc:	9b03      	ldr	r3, [sp, #12]
 80109ce:	4458      	add	r0, fp
 80109d0:	4298      	cmp	r0, r3
 80109d2:	dd15      	ble.n	8010a00 <lv_cont_refr_layout+0x2c8>
                    if(child_rc != NULL  && obj_num != 0) {
 80109d4:	2f00      	cmp	r7, #0
 80109d6:	f000 812c 	beq.w	8010c32 <lv_cont_refr_layout+0x4fa>
                        child_rc = lv_ll_get_next(&cont->child_ll, child_rc);
 80109da:	4629      	mov	r1, r5
 80109dc:	9802      	ldr	r0, [sp, #8]
 80109de:	f7fd f94a 	bl	800dc76 <lv_ll_get_next>
 80109e2:	4605      	mov	r5, r0
        else if(obj_num == 1) {
 80109e4:	2f01      	cmp	r7, #1
 80109e6:	d130      	bne.n	8010a4a <lv_cont_refr_layout+0x312>
            lv_obj_align(child_rs, cont, LV_ALIGN_IN_TOP_MID, 0, act_y);
 80109e8:	2300      	movs	r3, #0
 80109ea:	2202      	movs	r2, #2
 80109ec:	4621      	mov	r1, r4
 80109ee:	4630      	mov	r0, r6
 80109f0:	f8cd a000 	str.w	sl, [sp]
            lv_obj_align(obj2, cont, LV_ALIGN_IN_TOP_RIGHT, -pad, act_y + (h_row - lv_obj_get_height(obj2)) / 2);
 80109f4:	f7f7 feb3 	bl	800875e <lv_obj_align>
        if(child_rc == NULL) break;
 80109f8:	2d00      	cmp	r5, #0
 80109fa:	f040 8126 	bne.w	8010c4a <lv_cont_refr_layout+0x512>
 80109fe:	e6d3      	b.n	80107a8 <lv_cont_refr_layout+0x70>
                w_row += lv_obj_get_width(child_rc) + style->body.padding.inner; /*Add the object width + opad*/
 8010a00:	4628      	mov	r0, r5
 8010a02:	f7f8 f963 	bl	8008ccc <lv_obj_get_width>
 8010a06:	f9b9 3024 	ldrsh.w	r3, [r9, #36]	; 0x24
 8010a0a:	4418      	add	r0, r3
 8010a0c:	4483      	add	fp, r0
                h_row = LV_MATH_MAX(h_row, lv_obj_get_height(child_rc)); /*Search the highest object*/
 8010a0e:	4628      	mov	r0, r5
 8010a10:	f7f8 f962 	bl	8008cd8 <lv_obj_get_height>
 8010a14:	4540      	cmp	r0, r8
                w_row += lv_obj_get_width(child_rc) + style->body.padding.inner; /*Add the object width + opad*/
 8010a16:	fa0f fb8b 	sxth.w	fp, fp
                h_row = LV_MATH_MAX(h_row, lv_obj_get_height(child_rc)); /*Search the highest object*/
 8010a1a:	db03      	blt.n	8010a24 <lv_cont_refr_layout+0x2ec>
 8010a1c:	4628      	mov	r0, r5
 8010a1e:	f7f8 f95b 	bl	8008cd8 <lv_obj_get_height>
 8010a22:	4680      	mov	r8, r0
                if(lv_obj_is_protected(child_rc, LV_PROTECT_FOLLOW)) break; /*If can not be followed by an other object then break here*/
 8010a24:	2108      	movs	r1, #8
 8010a26:	4628      	mov	r0, r5
                obj_num ++;
 8010a28:	3701      	adds	r7, #1
                if(lv_obj_is_protected(child_rc, LV_PROTECT_FOLLOW)) break; /*If can not be followed by an other object then break here*/
 8010a2a:	f7f8 fa1b 	bl	8008e64 <lv_obj_is_protected>
 8010a2e:	2800      	cmp	r0, #0
 8010a30:	f040 80fc 	bne.w	8010c2c <lv_cont_refr_layout+0x4f4>
            child_rc = lv_ll_get_prev(&cont->child_ll, child_rc); /*Load the next object*/
 8010a34:	4629      	mov	r1, r5
 8010a36:	9802      	ldr	r0, [sp, #8]
 8010a38:	f7fd f922 	bl	800dc80 <lv_ll_get_prev>
 8010a3c:	4605      	mov	r5, r0
            if(obj_num == 0) child_rs = child_rc; /*If the first object was hidden (or too long) then set the next as first */
 8010a3e:	2f00      	cmp	r7, #0
 8010a40:	f000 8113 	beq.w	8010c6a <lv_cont_refr_layout+0x532>
        } while(child_rc != NULL);
 8010a44:	2800      	cmp	r0, #0
 8010a46:	d1b4      	bne.n	80109b2 <lv_cont_refr_layout+0x27a>
 8010a48:	e7cc      	b.n	80109e4 <lv_cont_refr_layout+0x2ac>
        else if(obj_num == 2) {
 8010a4a:	2f02      	cmp	r7, #2
 8010a4c:	d13a      	bne.n	8010ac4 <lv_cont_refr_layout+0x38c>
            lv_obj_t * obj2 = lv_ll_get_prev(&cont->child_ll, child_rs);
 8010a4e:	4631      	mov	r1, r6
 8010a50:	9802      	ldr	r0, [sp, #8]
 8010a52:	f7fd f915 	bl	800dc80 <lv_ll_get_prev>
 8010a56:	4683      	mov	fp, r0
            w_row = lv_obj_get_width(obj1) + lv_obj_get_width(obj2);
 8010a58:	4630      	mov	r0, r6
 8010a5a:	f7f8 f937 	bl	8008ccc <lv_obj_get_width>
 8010a5e:	9004      	str	r0, [sp, #16]
 8010a60:	4658      	mov	r0, fp
 8010a62:	f7f8 f933 	bl	8008ccc <lv_obj_get_width>
 8010a66:	9b04      	ldr	r3, [sp, #16]
            lv_coord_t pad = (w_obj - w_row) / 3;
 8010a68:	9a03      	ldr	r2, [sp, #12]
            w_row = lv_obj_get_width(obj1) + lv_obj_get_width(obj2);
 8010a6a:	4403      	add	r3, r0
            lv_obj_align(obj1, cont, LV_ALIGN_IN_TOP_LEFT, pad, act_y + (h_row - lv_obj_get_height(obj1)) / 2);
 8010a6c:	4630      	mov	r0, r6
            lv_coord_t pad = (w_obj - w_row) / 3;
 8010a6e:	b21b      	sxth	r3, r3
 8010a70:	1ad3      	subs	r3, r2, r3
 8010a72:	2203      	movs	r2, #3
 8010a74:	fb93 f3f2 	sdiv	r3, r3, r2
 8010a78:	9304      	str	r3, [sp, #16]
            lv_obj_align(obj1, cont, LV_ALIGN_IN_TOP_LEFT, pad, act_y + (h_row - lv_obj_get_height(obj1)) / 2);
 8010a7a:	f7f8 f92d 	bl	8008cd8 <lv_obj_get_height>
 8010a7e:	eba8 0000 	sub.w	r0, r8, r0
 8010a82:	fa1f f38a 	uxth.w	r3, sl
 8010a86:	2201      	movs	r2, #1
 8010a88:	4621      	mov	r1, r4
 8010a8a:	9305      	str	r3, [sp, #20]
 8010a8c:	fb90 f0f7 	sdiv	r0, r0, r7
 8010a90:	4418      	add	r0, r3
 8010a92:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8010a96:	b200      	sxth	r0, r0
 8010a98:	9000      	str	r0, [sp, #0]
 8010a9a:	4630      	mov	r0, r6
 8010a9c:	f7f7 fe5f 	bl	800875e <lv_obj_align>
            lv_obj_align(obj2, cont, LV_ALIGN_IN_TOP_RIGHT, -pad, act_y + (h_row - lv_obj_get_height(obj2)) / 2);
 8010aa0:	4658      	mov	r0, fp
 8010aa2:	f7f8 f919 	bl	8008cd8 <lv_obj_get_height>
 8010aa6:	eba8 0000 	sub.w	r0, r8, r0
 8010aaa:	9a05      	ldr	r2, [sp, #20]
 8010aac:	4621      	mov	r1, r4
 8010aae:	9b04      	ldr	r3, [sp, #16]
 8010ab0:	fb90 f7f7 	sdiv	r7, r0, r7
 8010ab4:	4417      	add	r7, r2
 8010ab6:	425b      	negs	r3, r3
 8010ab8:	2203      	movs	r2, #3
 8010aba:	4658      	mov	r0, fp
 8010abc:	b23f      	sxth	r7, r7
 8010abe:	b21b      	sxth	r3, r3
 8010ac0:	9700      	str	r7, [sp, #0]
 8010ac2:	e797      	b.n	80109f4 <lv_cont_refr_layout+0x2bc>
            w_row -= style->body.padding.inner * obj_num;
 8010ac4:	f9b9 0024 	ldrsh.w	r0, [r9, #36]	; 0x24
            lv_coord_t new_opad = (w_obj -  w_row) / (obj_num  - 1);
 8010ac8:	9b03      	ldr	r3, [sp, #12]
            w_row -= style->body.padding.inner * obj_num;
 8010aca:	fb10 f007 	smulbb	r0, r0, r7
            lv_coord_t new_opad = (w_obj -  w_row) / (obj_num  - 1);
 8010ace:	3f01      	subs	r7, #1
            w_row -= style->body.padding.inner * obj_num;
 8010ad0:	ebab 0b00 	sub.w	fp, fp, r0
            lv_coord_t new_opad = (w_obj -  w_row) / (obj_num  - 1);
 8010ad4:	fa0f fb8b 	sxth.w	fp, fp
 8010ad8:	eba3 0b0b 	sub.w	fp, r3, fp
 8010adc:	fbbb f7f7 	udiv	r7, fp, r7
            lv_coord_t act_x = style->body.padding.hor; /*x init*/
 8010ae0:	f9b9 b022 	ldrsh.w	fp, [r9, #34]	; 0x22
            lv_coord_t new_opad = (w_obj -  w_row) / (obj_num  - 1);
 8010ae4:	b23f      	sxth	r7, r7
                if(lv_obj_get_hidden(child_tmp) == false &&
 8010ae6:	4630      	mov	r0, r6
 8010ae8:	f7f8 f94e 	bl	8008d88 <lv_obj_get_hidden>
 8010aec:	b9e0      	cbnz	r0, 8010b28 <lv_cont_refr_layout+0x3f0>
                        lv_obj_is_protected(child_tmp, LV_PROTECT_POS) == false) {
 8010aee:	2104      	movs	r1, #4
 8010af0:	4630      	mov	r0, r6
 8010af2:	f7f8 f9b7 	bl	8008e64 <lv_obj_is_protected>
                if(lv_obj_get_hidden(child_tmp) == false &&
 8010af6:	b9b8      	cbnz	r0, 8010b28 <lv_cont_refr_layout+0x3f0>
                    lv_obj_align(child_tmp, cont, LV_ALIGN_IN_TOP_LEFT, act_x, act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
 8010af8:	4630      	mov	r0, r6
 8010afa:	f7f8 f8ed 	bl	8008cd8 <lv_obj_get_height>
 8010afe:	2302      	movs	r3, #2
 8010b00:	eba8 0000 	sub.w	r0, r8, r0
 8010b04:	2201      	movs	r2, #1
 8010b06:	4621      	mov	r1, r4
 8010b08:	fb90 f0f3 	sdiv	r0, r0, r3
 8010b0c:	4450      	add	r0, sl
 8010b0e:	465b      	mov	r3, fp
 8010b10:	b200      	sxth	r0, r0
 8010b12:	9000      	str	r0, [sp, #0]
 8010b14:	4630      	mov	r0, r6
 8010b16:	f7f7 fe22 	bl	800875e <lv_obj_align>
                    act_x += lv_obj_get_width(child_tmp) + new_opad;
 8010b1a:	4630      	mov	r0, r6
 8010b1c:	f7f8 f8d6 	bl	8008ccc <lv_obj_get_width>
 8010b20:	4438      	add	r0, r7
 8010b22:	4483      	add	fp, r0
 8010b24:	fa0f fb8b 	sxth.w	fp, fp
                if(child_tmp == child_rc) break;
 8010b28:	42ae      	cmp	r6, r5
 8010b2a:	f000 808f 	beq.w	8010c4c <lv_cont_refr_layout+0x514>
                child_tmp = lv_ll_get_prev(&cont->child_ll, child_tmp);
 8010b2e:	4631      	mov	r1, r6
 8010b30:	9802      	ldr	r0, [sp, #8]
 8010b32:	f7fd f8a5 	bl	800dc80 <lv_ll_get_prev>
            while(child_tmp != NULL) {
 8010b36:	4606      	mov	r6, r0
 8010b38:	2800      	cmp	r0, #0
 8010b3a:	d1d4      	bne.n	8010ae6 <lv_cont_refr_layout+0x3ae>
 8010b3c:	e75c      	b.n	80109f8 <lv_cont_refr_layout+0x2c0>
    }  else if(type == LV_LAYOUT_GRID) {
 8010b3e:	2d09      	cmp	r5, #9
 8010b40:	f040 8098 	bne.w	8010c74 <lv_cont_refr_layout+0x53c>
    lv_style_t * style = lv_obj_get_style(cont);
 8010b44:	4620      	mov	r0, r4
 8010b46:	f7f8 f8cd 	bl	8008ce4 <lv_obj_get_style>
 8010b4a:	4681      	mov	r9, r0
    lv_coord_t w_tot = lv_obj_get_width(cont);
 8010b4c:	4620      	mov	r0, r4
 8010b4e:	f7f8 f8bd 	bl	8008ccc <lv_obj_get_width>
    lv_coord_t w_obj = lv_obj_get_width(lv_obj_get_child(cont, NULL));
 8010b52:	2100      	movs	r1, #0
    lv_coord_t w_tot = lv_obj_get_width(cont);
 8010b54:	4607      	mov	r7, r0
    lv_coord_t w_obj = lv_obj_get_width(lv_obj_get_child(cont, NULL));
 8010b56:	4620      	mov	r0, r4
 8010b58:	f7f8 f834 	bl	8008bc4 <lv_obj_get_child>
 8010b5c:	f7f8 f8b6 	bl	8008ccc <lv_obj_get_width>
    lv_coord_t h_obj = lv_obj_get_height(lv_obj_get_child(cont, NULL));
 8010b60:	2100      	movs	r1, #0
    lv_coord_t w_obj = lv_obj_get_width(lv_obj_get_child(cont, NULL));
 8010b62:	4606      	mov	r6, r0
    lv_coord_t h_obj = lv_obj_get_height(lv_obj_get_child(cont, NULL));
 8010b64:	4620      	mov	r0, r4
 8010b66:	f7f8 f82d 	bl	8008bc4 <lv_obj_get_child>
 8010b6a:	f7f8 f8b5 	bl	8008cd8 <lv_obj_get_height>
    uint16_t obj_row = (w_tot - (2 * style->body.padding.hor)) / (w_obj + style->body.padding.inner); /*Obj. num. in a row*/
 8010b6e:	f9b9 3022 	ldrsh.w	r3, [r9, #34]	; 0x22
 8010b72:	f9b9 1024 	ldrsh.w	r1, [r9, #36]	; 0x24
 8010b76:	eba7 0343 	sub.w	r3, r7, r3, lsl #1
 8010b7a:	198a      	adds	r2, r1, r6
 8010b7c:	fb93 f2f2 	sdiv	r2, r3, r2
 8010b80:	fa1f fa82 	uxth.w	sl, r2
    if(obj_row > 1) {
 8010b84:	f1ba 0f01 	cmp.w	sl, #1
 8010b88:	d944      	bls.n	8010c14 <lv_cont_refr_layout+0x4dc>
        x_ofs = w_obj + (w_tot - (2 * style->body.padding.hor) - (obj_row * w_obj)) / (obj_row - 1);
 8010b8a:	fb0a 3316 	mls	r3, sl, r6, r3
 8010b8e:	f10a 35ff 	add.w	r5, sl, #4294967295
 8010b92:	fb93 f5f5 	sdiv	r5, r3, r5
 8010b96:	4435      	add	r5, r6
    lv_coord_t y_ofs = h_obj + style->body.padding.inner;
 8010b98:	4408      	add	r0, r1
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8010b9a:	2101      	movs	r1, #1
        x_ofs = w_tot / 2 - w_obj / 2;
 8010b9c:	b22d      	sxth	r5, r5
    uint16_t obj_cnt = 0;
 8010b9e:	f04f 0800 	mov.w	r8, #0
    lv_coord_t y_ofs = h_obj + style->body.padding.inner;
 8010ba2:	b283      	uxth	r3, r0
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8010ba4:	4620      	mov	r0, r4
    lv_coord_t y_ofs = h_obj + style->body.padding.inner;
 8010ba6:	9302      	str	r3, [sp, #8]
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8010ba8:	f7f7 ff59 	bl	8008a5e <lv_obj_set_protect>
    LL_READ_BACK(cont->child_ll, child) {
 8010bac:	1d23      	adds	r3, r4, #4
    lv_coord_t act_x = style->body.padding.hor;
 8010bae:	f9b9 6022 	ldrsh.w	r6, [r9, #34]	; 0x22
    lv_coord_t act_y = style->body.padding.ver;
 8010bb2:	f9b9 7020 	ldrsh.w	r7, [r9, #32]
    LL_READ_BACK(cont->child_ll, child) {
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	9303      	str	r3, [sp, #12]
 8010bba:	f7fd f859 	bl	800dc70 <lv_ll_get_tail>
 8010bbe:	4683      	mov	fp, r0
 8010bc0:	f1bb 0f00 	cmp.w	fp, #0
 8010bc4:	f43f adf0 	beq.w	80107a8 <lv_cont_refr_layout+0x70>
        if(lv_obj_get_hidden(child) != false ||
 8010bc8:	4658      	mov	r0, fp
 8010bca:	f7f8 f8dd 	bl	8008d88 <lv_obj_get_hidden>
 8010bce:	b9d8      	cbnz	r0, 8010c08 <lv_cont_refr_layout+0x4d0>
                lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8010bd0:	2104      	movs	r1, #4
 8010bd2:	4658      	mov	r0, fp
 8010bd4:	f7f8 f946 	bl	8008e64 <lv_obj_is_protected>
        if(lv_obj_get_hidden(child) != false ||
 8010bd8:	b9b0      	cbnz	r0, 8010c08 <lv_cont_refr_layout+0x4d0>
        if(obj_row > 1) {
 8010bda:	f1ba 0f01 	cmp.w	sl, #1
            lv_obj_set_pos(child, act_x, act_y);
 8010bde:	463a      	mov	r2, r7
        if(obj_row > 1) {
 8010be0:	d91f      	bls.n	8010c22 <lv_cont_refr_layout+0x4ea>
            lv_obj_set_pos(child, act_x, act_y);
 8010be2:	4631      	mov	r1, r6
            act_x += x_ofs;
 8010be4:	442e      	add	r6, r5
            lv_obj_set_pos(child, act_x, act_y);
 8010be6:	4658      	mov	r0, fp
            act_x += x_ofs;
 8010be8:	b236      	sxth	r6, r6
            lv_obj_set_pos(child, act_x, act_y);
 8010bea:	f7f7 fbff 	bl	80083ec <lv_obj_set_pos>
        obj_cnt ++;
 8010bee:	f108 0801 	add.w	r8, r8, #1
 8010bf2:	fa1f f888 	uxth.w	r8, r8
        if(obj_cnt >= obj_row) {
 8010bf6:	45c2      	cmp	sl, r8
 8010bf8:	d806      	bhi.n	8010c08 <lv_cont_refr_layout+0x4d0>
            act_y += y_ofs;
 8010bfa:	9b02      	ldr	r3, [sp, #8]
            obj_cnt = 0;
 8010bfc:	f04f 0800 	mov.w	r8, #0
            act_x = style->body.padding.hor;
 8010c00:	f9b9 6022 	ldrsh.w	r6, [r9, #34]	; 0x22
            act_y += y_ofs;
 8010c04:	441f      	add	r7, r3
 8010c06:	b23f      	sxth	r7, r7
    LL_READ_BACK(cont->child_ll, child) {
 8010c08:	4659      	mov	r1, fp
 8010c0a:	9803      	ldr	r0, [sp, #12]
 8010c0c:	f7fd f838 	bl	800dc80 <lv_ll_get_prev>
 8010c10:	4683      	mov	fp, r0
 8010c12:	e7d5      	b.n	8010bc0 <lv_cont_refr_layout+0x488>
        x_ofs = w_tot / 2 - w_obj / 2;
 8010c14:	2502      	movs	r5, #2
 8010c16:	fb97 f7f5 	sdiv	r7, r7, r5
 8010c1a:	fb96 f5f5 	sdiv	r5, r6, r5
 8010c1e:	1b7d      	subs	r5, r7, r5
 8010c20:	e7ba      	b.n	8010b98 <lv_cont_refr_layout+0x460>
            lv_obj_set_pos(child, x_ofs, act_y);
 8010c22:	4629      	mov	r1, r5
 8010c24:	4658      	mov	r0, fp
 8010c26:	f7f7 fbe1 	bl	80083ec <lv_obj_set_pos>
 8010c2a:	e7e0      	b.n	8010bee <lv_cont_refr_layout+0x4b6>
        if(obj_num == 0) {
 8010c2c:	2f00      	cmp	r7, #0
 8010c2e:	f47f aed9 	bne.w	80109e4 <lv_cont_refr_layout+0x2ac>
                lv_obj_align(child_rc, cont, LV_ALIGN_IN_TOP_MID, 0, act_y);
 8010c32:	2300      	movs	r3, #0
 8010c34:	2202      	movs	r2, #2
 8010c36:	4621      	mov	r1, r4
 8010c38:	4628      	mov	r0, r5
 8010c3a:	f8cd a000 	str.w	sl, [sp]
 8010c3e:	f7f7 fd8e 	bl	800875e <lv_obj_align>
                h_row = lv_obj_get_height(child_rc);    /*Not set previously because of the early break*/
 8010c42:	4628      	mov	r0, r5
 8010c44:	f7f8 f848 	bl	8008cd8 <lv_obj_get_height>
 8010c48:	4680      	mov	r8, r0
        if(child_rc == NULL) break;
 8010c4a:	462e      	mov	r6, r5
        act_y += style->body.padding.inner + h_row; /*y increment*/
 8010c4c:	f8b9 3024 	ldrh.w	r3, [r9, #36]	; 0x24
        child_rs = lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
 8010c50:	4631      	mov	r1, r6
 8010c52:	9802      	ldr	r0, [sp, #8]
        act_y += style->body.padding.inner + h_row; /*y increment*/
 8010c54:	449a      	add	sl, r3
        child_rs = lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
 8010c56:	f7fd f813 	bl	800dc80 <lv_ll_get_prev>
    while(child_rs != NULL) {
 8010c5a:	4605      	mov	r5, r0
        act_y += style->body.padding.inner + h_row; /*y increment*/
 8010c5c:	44d0      	add	r8, sl
 8010c5e:	fa0f fa88 	sxth.w	sl, r8
    while(child_rs != NULL) {
 8010c62:	2800      	cmp	r0, #0
 8010c64:	f47f ae9c 	bne.w	80109a0 <lv_cont_refr_layout+0x268>
 8010c68:	e59e      	b.n	80107a8 <lv_cont_refr_layout+0x70>
        } while(child_rc != NULL);
 8010c6a:	2800      	cmp	r0, #0
 8010c6c:	f43f ad9c 	beq.w	80107a8 <lv_cont_refr_layout+0x70>
 8010c70:	462e      	mov	r6, r5
 8010c72:	e69e      	b.n	80109b2 <lv_cont_refr_layout+0x27a>
}
 8010c74:	b007      	add	sp, #28
 8010c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08010c7c <lv_cont_signal>:
{
 8010c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    res = ancestor_signal(cont, sign, param);
 8010c7e:	4b1d      	ldr	r3, [pc, #116]	; (8010cf4 <lv_cont_signal+0x78>)
{
 8010c80:	4604      	mov	r4, r0
 8010c82:	460f      	mov	r7, r1
 8010c84:	4616      	mov	r6, r2
    res = ancestor_signal(cont, sign, param);
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8010c8a:	2801      	cmp	r0, #1
    res = ancestor_signal(cont, sign, param);
 8010c8c:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 8010c8e:	d11f      	bne.n	8010cd0 <lv_cont_signal+0x54>
    } else if(sign == LV_SIGNAL_CHILD_CHG) {
 8010c90:	f007 03fd 	and.w	r3, r7, #253	; 0xfd
 8010c94:	2b01      	cmp	r3, #1
 8010c96:	d015      	beq.n	8010cc4 <lv_cont_signal+0x48>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 8010c98:	2f02      	cmp	r7, #2
 8010c9a:	d11b      	bne.n	8010cd4 <lv_cont_signal+0x58>
        if(lv_obj_get_width(cont) != lv_area_get_width(param) ||
 8010c9c:	4620      	mov	r0, r4
 8010c9e:	f7f8 f815 	bl	8008ccc <lv_obj_get_width>
    return area_p->x2 - area_p->x1 + 1;
 8010ca2:	88b3      	ldrh	r3, [r6, #4]
 8010ca4:	8832      	ldrh	r2, [r6, #0]
 8010ca6:	3301      	adds	r3, #1
 8010ca8:	1a9b      	subs	r3, r3, r2
 8010caa:	b21b      	sxth	r3, r3
 8010cac:	4298      	cmp	r0, r3
 8010cae:	d109      	bne.n	8010cc4 <lv_cont_signal+0x48>
                lv_obj_get_height(cont) != lv_area_get_height(param)) {
 8010cb0:	4620      	mov	r0, r4
 8010cb2:	f7f8 f811 	bl	8008cd8 <lv_obj_get_height>
    return area_p->y2 - area_p->y1 + 1;
 8010cb6:	88f3      	ldrh	r3, [r6, #6]
 8010cb8:	8872      	ldrh	r2, [r6, #2]
 8010cba:	3301      	adds	r3, #1
 8010cbc:	1a9b      	subs	r3, r3, r2
        if(lv_obj_get_width(cont) != lv_area_get_width(param) ||
 8010cbe:	b21b      	sxth	r3, r3
 8010cc0:	4298      	cmp	r0, r3
 8010cc2:	d005      	beq.n	8010cd0 <lv_cont_signal+0x54>
        lv_cont_refr_layout(cont);
 8010cc4:	4620      	mov	r0, r4
 8010cc6:	f7ff fd37 	bl	8010738 <lv_cont_refr_layout>
        lv_cont_refr_autofit(cont);
 8010cca:	4620      	mov	r0, r4
 8010ccc:	f7ff fbf4 	bl	80104b8 <lv_cont_refr_autofit>
}
 8010cd0:	4628      	mov	r0, r5
 8010cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8010cd4:	2f05      	cmp	r7, #5
 8010cd6:	d1fb      	bne.n	8010cd0 <lv_cont_signal+0x54>
 8010cd8:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 8010cda:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8010cde:	b2da      	uxtb	r2, r3
 8010ce0:	b119      	cbz	r1, 8010cea <lv_cont_signal+0x6e>
 8010ce2:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) {  /*Find the last set data*/
 8010ce4:	2b07      	cmp	r3, #7
 8010ce6:	d1f8      	bne.n	8010cda <lv_cont_signal+0x5e>
 8010ce8:	461a      	mov	r2, r3
        buf->type[i] = "lv_cont";
 8010cea:	4b03      	ldr	r3, [pc, #12]	; (8010cf8 <lv_cont_signal+0x7c>)
 8010cec:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
 8010cf0:	e7ee      	b.n	8010cd0 <lv_cont_signal+0x54>
 8010cf2:	bf00      	nop
 8010cf4:	2001740c 	.word	0x2001740c
 8010cf8:	08087eb7 	.word	0x08087eb7

08010cfc <lv_cont_get_hor_fit>:
{
 8010cfc:	b508      	push	{r3, lr}
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8010cfe:	f7f8 f8bc 	bl	8008e7a <lv_obj_get_ext_attr>
    return ext->hor_fit == 0 ? false : true;
 8010d02:	7800      	ldrb	r0, [r0, #0]
}
 8010d04:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8010d08:	bd08      	pop	{r3, pc}

08010d0a <lv_img_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_img_design(lv_obj_t * img, const lv_area_t * mask, lv_design_mode_t mode)
{
 8010d0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010d0e:	4680      	mov	r8, r0
 8010d10:	4691      	mov	r9, r2
 8010d12:	b089      	sub	sp, #36	; 0x24
 8010d14:	460d      	mov	r5, r1
    lv_style_t * style = lv_obj_get_style(img);
 8010d16:	f7f7 ffe5 	bl	8008ce4 <lv_obj_get_style>
 8010d1a:	4606      	mov	r6, r0
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 8010d1c:	4640      	mov	r0, r8
 8010d1e:	f7f8 f8ac 	bl	8008e7a <lv_obj_get_ext_attr>

    if(mode == LV_DESIGN_COVER_CHK) {
 8010d22:	f1b9 0f02 	cmp.w	r9, #2
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 8010d26:	4604      	mov	r4, r0
    if(mode == LV_DESIGN_COVER_CHK) {
 8010d28:	d113      	bne.n	8010d52 <lv_img_design+0x48>
        bool cover = false;
        if(ext->src_type == LV_IMG_SRC_UNKNOWN || ext->src_type == LV_IMG_SRC_SYMBOL) return false;
 8010d2a:	7a03      	ldrb	r3, [r0, #8]
 8010d2c:	f003 0203 	and.w	r2, r3, #3
 8010d30:	3a02      	subs	r2, #2
 8010d32:	2a01      	cmp	r2, #1
 8010d34:	d974      	bls.n	8010e20 <lv_img_design+0x116>

        if(ext->cf == LV_IMG_CF_TRUE_COLOR || ext->cf == LV_IMG_CF_RAW) cover = lv_area_is_in(mask, &img->coords);
 8010d36:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8010d3a:	2b20      	cmp	r3, #32
 8010d3c:	d001      	beq.n	8010d42 <lv_img_design+0x38>
 8010d3e:	2b08      	cmp	r3, #8
 8010d40:	d16e      	bne.n	8010e20 <lv_img_design+0x116>
 8010d42:	f108 0110 	add.w	r1, r8, #16
 8010d46:	4628      	mov	r0, r5
 8010d48:	f7fc fdce 	bl	800d8e8 <lv_area_is_in>
            lv_draw_img(&img->coords, mask, NULL, style, opa_scale);
        }
    }

    return true;
}
 8010d4c:	b009      	add	sp, #36	; 0x24
 8010d4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 8010d52:	f1b9 0f00 	cmp.w	r9, #0
 8010d56:	d105      	bne.n	8010d64 <lv_img_design+0x5a>
        if(ext->h == 0 || ext->w == 0) return true;
 8010d58:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8010d5c:	b113      	cbz	r3, 8010d64 <lv_img_design+0x5a>
 8010d5e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8010d62:	b90b      	cbnz	r3, 8010d68 <lv_img_design+0x5e>
    return true;
 8010d64:	2001      	movs	r0, #1
 8010d66:	e7f1      	b.n	8010d4c <lv_img_design+0x42>
        lv_opa_t opa_scale = lv_obj_get_opa_scale(img);
 8010d68:	4640      	mov	r0, r8
 8010d6a:	f7f8 f826 	bl	8008dba <lv_obj_get_opa_scale>
        lv_obj_get_coords(img, &coords);
 8010d6e:	a904      	add	r1, sp, #16
        lv_opa_t opa_scale = lv_obj_get_opa_scale(img);
 8010d70:	4607      	mov	r7, r0
        lv_obj_get_coords(img, &coords);
 8010d72:	4640      	mov	r0, r8
 8010d74:	f7f7 ff98 	bl	8008ca8 <lv_obj_get_coords>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_VARIABLE) {
 8010d78:	7a23      	ldrb	r3, [r4, #8]
 8010d7a:	f003 0303 	and.w	r3, r3, #3
 8010d7e:	2b01      	cmp	r3, #1
 8010d80:	d836      	bhi.n	8010df0 <lv_img_design+0xe6>
            cords_tmp.y1 = coords.y1;
 8010d82:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
            cords_tmp.y2 = coords.y1 + ext->h - 1;
 8010d86:	88e2      	ldrh	r2, [r4, #6]
            cords_tmp.y1 = coords.y1;
 8010d88:	f8ad 301a 	strh.w	r3, [sp, #26]
            cords_tmp.y2 = coords.y1 + ext->h - 1;
 8010d8c:	3b01      	subs	r3, #1
            for(; cords_tmp.y1 < coords.y2; cords_tmp.y1 += ext->h, cords_tmp.y2 += ext->h) {
 8010d8e:	4413      	add	r3, r2
 8010d90:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 8010d94:	f8ad 301e 	strh.w	r3, [sp, #30]
 8010d98:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8010d9c:	429a      	cmp	r2, r3
 8010d9e:	dae1      	bge.n	8010d64 <lv_img_design+0x5a>
                cords_tmp.x1 = coords.x1;
 8010da0:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
                cords_tmp.x2 = coords.x1 + ext->w - 1;
 8010da4:	88a2      	ldrh	r2, [r4, #4]
                cords_tmp.x1 = coords.x1;
 8010da6:	f8ad 3018 	strh.w	r3, [sp, #24]
                cords_tmp.x2 = coords.x1 + ext->w - 1;
 8010daa:	3b01      	subs	r3, #1
                for(; cords_tmp.x1 < coords.x2; cords_tmp.x1 += ext->w, cords_tmp.x2 += ext->w) {
 8010dac:	4413      	add	r3, r2
 8010dae:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8010db2:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010db6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8010dba:	429a      	cmp	r2, r3
 8010dbc:	db08      	blt.n	8010dd0 <lv_img_design+0xc6>
            for(; cords_tmp.y1 < coords.y2; cords_tmp.y1 += ext->h, cords_tmp.y2 += ext->h) {
 8010dbe:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8010dc2:	88e3      	ldrh	r3, [r4, #6]
 8010dc4:	441a      	add	r2, r3
 8010dc6:	f8ad 201a 	strh.w	r2, [sp, #26]
 8010dca:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8010dce:	e7de      	b.n	8010d8e <lv_img_design+0x84>
                    lv_draw_img(&cords_tmp, mask, ext->src, style, opa_scale);
 8010dd0:	9700      	str	r7, [sp, #0]
 8010dd2:	4633      	mov	r3, r6
 8010dd4:	6822      	ldr	r2, [r4, #0]
 8010dd6:	4629      	mov	r1, r5
 8010dd8:	a806      	add	r0, sp, #24
 8010dda:	f7f8 fdff 	bl	80099dc <lv_draw_img>
                for(; cords_tmp.x1 < coords.x2; cords_tmp.x1 += ext->w, cords_tmp.x2 += ext->w) {
 8010dde:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8010de2:	88a3      	ldrh	r3, [r4, #4]
 8010de4:	441a      	add	r2, r3
 8010de6:	f8ad 2018 	strh.w	r2, [sp, #24]
 8010dea:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8010dee:	e7dd      	b.n	8010dac <lv_img_design+0xa2>
        } else if(ext->src_type == LV_IMG_SRC_SYMBOL) {
 8010df0:	2b02      	cmp	r3, #2
 8010df2:	d10c      	bne.n	8010e0e <lv_img_design+0x104>
            lv_draw_label(&coords, mask, style, opa_scale, ext->src, LV_TXT_FLAG_NONE, NULL);
 8010df4:	f8cd 9008 	str.w	r9, [sp, #8]
 8010df8:	4632      	mov	r2, r6
 8010dfa:	f8cd 9004 	str.w	r9, [sp, #4]
 8010dfe:	4629      	mov	r1, r5
 8010e00:	6823      	ldr	r3, [r4, #0]
 8010e02:	a804      	add	r0, sp, #16
 8010e04:	9300      	str	r3, [sp, #0]
 8010e06:	463b      	mov	r3, r7
 8010e08:	f7f8 ff5c 	bl	8009cc4 <lv_draw_label>
 8010e0c:	e7aa      	b.n	8010d64 <lv_img_design+0x5a>
            lv_draw_img(&img->coords, mask, NULL, style, opa_scale);
 8010e0e:	9700      	str	r7, [sp, #0]
 8010e10:	4633      	mov	r3, r6
 8010e12:	464a      	mov	r2, r9
 8010e14:	4629      	mov	r1, r5
 8010e16:	f108 0010 	add.w	r0, r8, #16
 8010e1a:	f7f8 fddf 	bl	80099dc <lv_draw_img>
 8010e1e:	e7a1      	b.n	8010d64 <lv_img_design+0x5a>
        if(ext->src_type == LV_IMG_SRC_UNKNOWN || ext->src_type == LV_IMG_SRC_SYMBOL) return false;
 8010e20:	2000      	movs	r0, #0
 8010e22:	e793      	b.n	8010d4c <lv_img_design+0x42>

08010e24 <lv_img_get_src>:
{
 8010e24:	b508      	push	{r3, lr}
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 8010e26:	f7f8 f828 	bl	8008e7a <lv_obj_get_ext_attr>
}
 8010e2a:	6800      	ldr	r0, [r0, #0]
 8010e2c:	bd08      	pop	{r3, pc}

08010e2e <lv_img_get_auto_size>:
{
 8010e2e:	b508      	push	{r3, lr}
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 8010e30:	f7f8 f823 	bl	8008e7a <lv_obj_get_ext_attr>
    return ext->auto_size == 0 ? false : true;
 8010e34:	7a00      	ldrb	r0, [r0, #8]
}
 8010e36:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8010e3a:	bd08      	pop	{r3, pc}

08010e3c <lv_img_set_src>:
{
 8010e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e40:	4606      	mov	r6, r0
 8010e42:	b086      	sub	sp, #24
    lv_img_src_t src_type = lv_img_src_get_type(src_img);
 8010e44:	4608      	mov	r0, r1
{
 8010e46:	460d      	mov	r5, r1
    lv_img_src_t src_type = lv_img_src_get_type(src_img);
 8010e48:	f7f8 fd55 	bl	80098f6 <lv_img_src_get_type>
 8010e4c:	4607      	mov	r7, r0
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 8010e4e:	4630      	mov	r0, r6
 8010e50:	f7f8 f813 	bl	8008e7a <lv_obj_get_ext_attr>
    if(src_type == LV_IMG_SRC_UNKNOWN) {
 8010e54:	2f03      	cmp	r7, #3
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 8010e56:	4604      	mov	r4, r0
    if(src_type == LV_IMG_SRC_UNKNOWN) {
 8010e58:	d111      	bne.n	8010e7e <lv_img_set_src+0x42>
        if(ext->src_type == LV_IMG_SRC_SYMBOL || ext->src_type == LV_IMG_SRC_FILE) {
 8010e5a:	7a03      	ldrb	r3, [r0, #8]
 8010e5c:	f003 0303 	and.w	r3, r3, #3
 8010e60:	3b01      	subs	r3, #1
 8010e62:	2b01      	cmp	r3, #1
 8010e64:	d802      	bhi.n	8010e6c <lv_img_set_src+0x30>
            lv_mem_free(ext->src);
 8010e66:	6800      	ldr	r0, [r0, #0]
 8010e68:	f7fd f812 	bl	800de90 <lv_mem_free>
        ext->src = NULL;
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	6023      	str	r3, [r4, #0]
        ext->src_type = LV_IMG_SRC_UNKNOWN;
 8010e70:	7a23      	ldrb	r3, [r4, #8]
 8010e72:	f043 0303 	orr.w	r3, r3, #3
 8010e76:	7223      	strb	r3, [r4, #8]
}
 8010e78:	b006      	add	sp, #24
 8010e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_img_dsc_get_info(src_img, &header);
 8010e7e:	a904      	add	r1, sp, #16
 8010e80:	4628      	mov	r0, r5
 8010e82:	f7f8 fd49 	bl	8009918 <lv_img_dsc_get_info>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8010e86:	bb07      	cbnz	r7, 8010eca <lv_img_set_src+0x8e>
        ext->src = src_img;
 8010e88:	6025      	str	r5, [r4, #0]
    ext->w = header.w;
 8010e8a:	9a04      	ldr	r2, [sp, #16]
    if(lv_img_get_auto_size(img) != false) {
 8010e8c:	4630      	mov	r0, r6
    ext->src_type = src_type;
 8010e8e:	7a23      	ldrb	r3, [r4, #8]
    ext->w = header.w;
 8010e90:	f3c2 228a 	ubfx	r2, r2, #10, #11
    ext->src_type = src_type;
 8010e94:	f367 0301 	bfi	r3, r7, #0, #2
    ext->w = header.w;
 8010e98:	80a2      	strh	r2, [r4, #4]
    ext->h = header.h;
 8010e9a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8010e9e:	f3c2 124a 	ubfx	r2, r2, #5, #11
 8010ea2:	80e2      	strh	r2, [r4, #6]
    ext->cf = header.cf;
 8010ea4:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8010ea8:	f362 03c7 	bfi	r3, r2, #3, #5
 8010eac:	7223      	strb	r3, [r4, #8]
    if(lv_img_get_auto_size(img) != false) {
 8010eae:	f7ff ffbe 	bl	8010e2e <lv_img_get_auto_size>
 8010eb2:	b130      	cbz	r0, 8010ec2 <lv_img_set_src+0x86>
        lv_obj_set_size(img, ext->w, ext->h);
 8010eb4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8010eb8:	4630      	mov	r0, r6
 8010eba:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8010ebe:	f7f7 fc0c 	bl	80086da <lv_obj_set_size>
    lv_obj_invalidate(img);
 8010ec2:	4630      	mov	r0, r6
 8010ec4:	f7f7 f9f8 	bl	80082b8 <lv_obj_invalidate>
 8010ec8:	e7d6      	b.n	8010e78 <lv_img_set_src+0x3c>
    } else if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_SYMBOL) {
 8010eca:	1e7b      	subs	r3, r7, #1
 8010ecc:	b2db      	uxtb	r3, r3
 8010ece:	2b01      	cmp	r3, #1
 8010ed0:	d8db      	bhi.n	8010e8a <lv_img_set_src+0x4e>
        if(ext->src != src_img) {
 8010ed2:	6820      	ldr	r0, [r4, #0]
 8010ed4:	4285      	cmp	r5, r0
 8010ed6:	d00f      	beq.n	8010ef8 <lv_img_set_src+0xbc>
            lv_mem_free(ext->src);
 8010ed8:	f7fc ffda 	bl	800de90 <lv_mem_free>
            char * new_str = lv_mem_alloc(strlen(src_img) + 1);
 8010edc:	4628      	mov	r0, r5
 8010ede:	f7ef f99d 	bl	800021c <strlen>
 8010ee2:	3001      	adds	r0, #1
 8010ee4:	f7fc ffb0 	bl	800de48 <lv_mem_alloc>
            lv_mem_assert(new_str);
 8010ee8:	4680      	mov	r8, r0
 8010eea:	b900      	cbnz	r0, 8010eee <lv_img_set_src+0xb2>
 8010eec:	e7fe      	b.n	8010eec <lv_img_set_src+0xb0>
            strcpy(new_str, src_img);
 8010eee:	4629      	mov	r1, r5
 8010ef0:	f004 fe27 	bl	8015b42 <strcpy>
            ext->src = new_str;
 8010ef4:	f8c4 8000 	str.w	r8, [r4]
    if(src_type == LV_IMG_SRC_SYMBOL) {
 8010ef8:	2f02      	cmp	r7, #2
 8010efa:	d1c6      	bne.n	8010e8a <lv_img_set_src+0x4e>
 * @param img pointer to an image object
 * @return pointer to the image's style
 */
static inline lv_style_t* lv_img_get_style(const lv_obj_t *img)
{
    return lv_obj_get_style(img);
 8010efc:	4630      	mov	r0, r6
 8010efe:	f7f7 fef1 	bl	8008ce4 <lv_obj_get_style>
        lv_txt_get_size(&size, src_img, style->text.font, style->text.letter_space, style->text.line_space, LV_COORD_MAX, LV_TXT_FLAG_NONE);
 8010f02:	2200      	movs	r2, #0
 8010f04:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	; 0x30
 8010f08:	4629      	mov	r1, r5
 8010f0a:	9202      	str	r2, [sp, #8]
 8010f0c:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8010f10:	9201      	str	r2, [sp, #4]
 8010f12:	f9b0 2032 	ldrsh.w	r2, [r0, #50]	; 0x32
 8010f16:	9200      	str	r2, [sp, #0]
 8010f18:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8010f1a:	a805      	add	r0, sp, #20
 8010f1c:	f7fd fb4c 	bl	800e5b8 <lv_txt_get_size>
        header.w = size.x;
 8010f20:	9b04      	ldr	r3, [sp, #16]
 8010f22:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8010f26:	f362 2394 	bfi	r3, r2, #10, #11
        header.h = size.y;
 8010f2a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
        header.w = size.x;
 8010f2e:	9304      	str	r3, [sp, #16]
        header.h = size.y;
 8010f30:	0c1b      	lsrs	r3, r3, #16
 8010f32:	f362 134f 	bfi	r3, r2, #5, #11
 8010f36:	f8ad 3012 	strh.w	r3, [sp, #18]
 8010f3a:	e7a6      	b.n	8010e8a <lv_img_set_src+0x4e>

08010f3c <lv_img_create>:
{
 8010f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f3e:	4607      	mov	r7, r0
 8010f40:	460e      	mov	r6, r1
    new_img = lv_obj_create(par, copy);
 8010f42:	f7f7 fa97 	bl	8008474 <lv_obj_create>
    lv_mem_assert(new_img);
 8010f46:	4605      	mov	r5, r0
 8010f48:	b900      	cbnz	r0, 8010f4c <lv_img_create+0x10>
 8010f4a:	e7fe      	b.n	8010f4a <lv_img_create+0xe>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_img);
 8010f4c:	4c27      	ldr	r4, [pc, #156]	; (8010fec <lv_img_create+0xb0>)
 8010f4e:	6823      	ldr	r3, [r4, #0]
 8010f50:	b913      	cbnz	r3, 8010f58 <lv_img_create+0x1c>
 8010f52:	f7f7 ff8e 	bl	8008e72 <lv_obj_get_signal_func>
 8010f56:	6020      	str	r0, [r4, #0]
    lv_img_ext_t * ext = lv_obj_allocate_ext_attr(new_img, sizeof(lv_img_ext_t));
 8010f58:	210c      	movs	r1, #12
 8010f5a:	4628      	mov	r0, r5
 8010f5c:	f7f7 fd90 	bl	8008a80 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 8010f60:	4604      	mov	r4, r0
 8010f62:	b900      	cbnz	r0, 8010f66 <lv_img_create+0x2a>
 8010f64:	e7fe      	b.n	8010f64 <lv_img_create+0x28>
    ext->src_type = LV_IMG_SRC_UNKNOWN;
 8010f66:	7a03      	ldrb	r3, [r0, #8]
    ext->src = NULL;
 8010f68:	2200      	movs	r2, #0
    ext->cf = LV_IMG_CF_UNKOWN;
 8010f6a:	f043 0303 	orr.w	r3, r3, #3
    ext->src = NULL;
 8010f6e:	6002      	str	r2, [r0, #0]
    ext->cf = LV_IMG_CF_UNKOWN;
 8010f70:	f362 03c7 	bfi	r3, r2, #3, #5
 8010f74:	7203      	strb	r3, [r0, #8]
    ext->w = lv_obj_get_width(new_img);
 8010f76:	4628      	mov	r0, r5
 8010f78:	f7f7 fea8 	bl	8008ccc <lv_obj_get_width>
 8010f7c:	80a0      	strh	r0, [r4, #4]
    ext->h = lv_obj_get_height(new_img);
 8010f7e:	4628      	mov	r0, r5
 8010f80:	f7f7 feaa 	bl	8008cd8 <lv_obj_get_height>
    ext->auto_size = 1;
 8010f84:	7a23      	ldrb	r3, [r4, #8]
    ext->h = lv_obj_get_height(new_img);
 8010f86:	80e0      	strh	r0, [r4, #6]
    lv_obj_set_signal_func(new_img, lv_img_signal);
 8010f88:	4628      	mov	r0, r5
    ext->auto_size = 1;
 8010f8a:	f043 0304 	orr.w	r3, r3, #4
    lv_obj_set_signal_func(new_img, lv_img_signal);
 8010f8e:	4918      	ldr	r1, [pc, #96]	; (8010ff0 <lv_img_create+0xb4>)
    ext->auto_size = 1;
 8010f90:	7223      	strb	r3, [r4, #8]
    lv_obj_set_signal_func(new_img, lv_img_signal);
 8010f92:	f7f7 fd71 	bl	8008a78 <lv_obj_set_signal_func>
    lv_obj_set_design_func(new_img, lv_img_design);
 8010f96:	4917      	ldr	r1, [pc, #92]	; (8010ff4 <lv_img_create+0xb8>)
 8010f98:	4628      	mov	r0, r5
 8010f9a:	f7f7 fd6f 	bl	8008a7c <lv_obj_set_design_func>
    if(copy == NULL) {
 8010f9e:	b99e      	cbnz	r6, 8010fc8 <lv_img_create+0x8c>
        lv_obj_set_click(new_img, false);
 8010fa0:	4631      	mov	r1, r6
 8010fa2:	4628      	mov	r0, r5
 8010fa4:	f7f7 fd38 	bl	8008a18 <lv_obj_set_click>
 8010fa8:	7a23      	ldrb	r3, [r4, #8]
        if(par != NULL) {
 8010faa:	b147      	cbz	r7, 8010fbe <lv_img_create+0x82>
            ext->auto_size = 1;
 8010fac:	f043 0304 	orr.w	r3, r3, #4
            lv_obj_set_style(new_img, NULL);                        /*Inherit the style  by default*/
 8010fb0:	4631      	mov	r1, r6
            ext->auto_size = 1;
 8010fb2:	7223      	strb	r3, [r4, #8]
            lv_obj_set_style(new_img, &lv_style_plain);            /*Set a style for screens*/
 8010fb4:	4628      	mov	r0, r5
 8010fb6:	f7f7 fe27 	bl	8008c08 <lv_obj_set_style>
}
 8010fba:	4628      	mov	r0, r5
 8010fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            ext->auto_size = 0;
 8010fbe:	f367 0382 	bfi	r3, r7, #2, #1
            lv_obj_set_style(new_img, &lv_style_plain);            /*Set a style for screens*/
 8010fc2:	490d      	ldr	r1, [pc, #52]	; (8010ff8 <lv_img_create+0xbc>)
            ext->auto_size = 0;
 8010fc4:	7223      	strb	r3, [r4, #8]
 8010fc6:	e7f5      	b.n	8010fb4 <lv_img_create+0x78>
        lv_img_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8010fc8:	4630      	mov	r0, r6
 8010fca:	f7f7 ff56 	bl	8008e7a <lv_obj_get_ext_attr>
        ext->auto_size = copy_ext->auto_size;
 8010fce:	7a03      	ldrb	r3, [r0, #8]
 8010fd0:	7a22      	ldrb	r2, [r4, #8]
 8010fd2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8010fd6:	f363 0282 	bfi	r2, r3, #2, #1
 8010fda:	7222      	strb	r2, [r4, #8]
        lv_img_set_src(new_img, copy_ext->src);
 8010fdc:	6801      	ldr	r1, [r0, #0]
 8010fde:	4628      	mov	r0, r5
 8010fe0:	f7ff ff2c 	bl	8010e3c <lv_img_set_src>
        lv_obj_refresh_style(new_img);
 8010fe4:	4628      	mov	r0, r5
 8010fe6:	f7f7 fd09 	bl	80089fc <lv_obj_refresh_style>
 8010fea:	e7e6      	b.n	8010fba <lv_img_create+0x7e>
 8010fec:	20017410 	.word	0x20017410
 8010ff0:	08010ffd 	.word	0x08010ffd
 8010ff4:	08010d0b 	.word	0x08010d0b
 8010ff8:	20017dc0 	.word	0x20017dc0

08010ffc <lv_img_signal>:
static lv_res_t lv_img_signal(lv_obj_t * img, lv_signal_t sign, void * param)
{
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(img, sign, param);
 8010ffc:	4b1d      	ldr	r3, [pc, #116]	; (8011074 <lv_img_signal+0x78>)
{
 8010ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = ancestor_signal(img, sign, param);
 8011002:	681b      	ldr	r3, [r3, #0]
{
 8011004:	4680      	mov	r8, r0
 8011006:	460d      	mov	r5, r1
 8011008:	4617      	mov	r7, r2
    res = ancestor_signal(img, sign, param);
 801100a:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 801100c:	2801      	cmp	r0, #1
    res = ancestor_signal(img, sign, param);
 801100e:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
 8011010:	d112      	bne.n	8011038 <lv_img_signal+0x3c>

    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 8011012:	4640      	mov	r0, r8
 8011014:	f7f7 ff31 	bl	8008e7a <lv_obj_get_ext_attr>
 8011018:	4604      	mov	r4, r0
    if(sign == LV_SIGNAL_CLEANUP) {
 801101a:	b985      	cbnz	r5, 801103e <lv_img_signal+0x42>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 801101c:	7a03      	ldrb	r3, [r0, #8]
 801101e:	f003 0303 	and.w	r3, r3, #3
 8011022:	3b01      	subs	r3, #1
 8011024:	2b01      	cmp	r3, #1
 8011026:	d807      	bhi.n	8011038 <lv_img_signal+0x3c>
            lv_mem_free(ext->src);
 8011028:	6800      	ldr	r0, [r0, #0]
 801102a:	f7fc ff31 	bl	800de90 <lv_mem_free>
            ext->src = NULL;
            ext->src_type = LV_IMG_SRC_UNKNOWN;
 801102e:	7a23      	ldrb	r3, [r4, #8]
            ext->src = NULL;
 8011030:	6025      	str	r5, [r4, #0]
            ext->src_type = LV_IMG_SRC_UNKNOWN;
 8011032:	f043 0303 	orr.w	r3, r3, #3
 8011036:	7223      	strb	r3, [r4, #8]
        }
        buf->type[i] = "lv_img";
    }

    return res;
}
 8011038:	4630      	mov	r0, r6
 801103a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 801103e:	2d03      	cmp	r5, #3
 8011040:	d109      	bne.n	8011056 <lv_img_signal+0x5a>
        if(ext->src_type == LV_IMG_SRC_SYMBOL) {
 8011042:	7a03      	ldrb	r3, [r0, #8]
 8011044:	f003 0303 	and.w	r3, r3, #3
 8011048:	2b02      	cmp	r3, #2
 801104a:	d1f5      	bne.n	8011038 <lv_img_signal+0x3c>
            lv_img_set_src(img, ext->src);
 801104c:	6801      	ldr	r1, [r0, #0]
 801104e:	4640      	mov	r0, r8
 8011050:	f7ff fef4 	bl	8010e3c <lv_img_set_src>
 8011054:	e7f0      	b.n	8011038 <lv_img_signal+0x3c>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8011056:	2d05      	cmp	r5, #5
 8011058:	d1ee      	bne.n	8011038 <lv_img_signal+0x3c>
 801105a:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 801105c:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8011060:	b2da      	uxtb	r2, r3
 8011062:	b119      	cbz	r1, 801106c <lv_img_signal+0x70>
 8011064:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) {  /*Find the last set data*/
 8011066:	2b07      	cmp	r3, #7
 8011068:	d1f8      	bne.n	801105c <lv_img_signal+0x60>
 801106a:	461a      	mov	r2, r3
        buf->type[i] = "lv_img";
 801106c:	4b02      	ldr	r3, [pc, #8]	; (8011078 <lv_img_signal+0x7c>)
 801106e:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
 8011072:	e7e1      	b.n	8011038 <lv_img_signal+0x3c>
 8011074:	20017410 	.word	0x20017410
 8011078:	08087ebf 	.word	0x08087ebf

0801107c <lv_kb_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_kb_signal(lv_obj_t * kb, lv_signal_t sign, void * param)
{
 801107c:	b538      	push	{r3, r4, r5, lr}
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(kb, sign, param);
 801107e:	4b0b      	ldr	r3, [pc, #44]	; (80110ac <lv_kb_signal+0x30>)
{
 8011080:	460d      	mov	r5, r1
 8011082:	4614      	mov	r4, r2
    res = ancestor_signal(kb, sign, param);
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8011088:	2801      	cmp	r0, #1
 801108a:	d10d      	bne.n	80110a8 <lv_kb_signal+0x2c>

    if(sign == LV_SIGNAL_CLEANUP) {
        /*Nothing to cleanup. (No dynamically allocated memory in 'ext')*/
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801108c:	2d05      	cmp	r5, #5
 801108e:	d10b      	bne.n	80110a8 <lv_kb_signal+0x2c>
 8011090:	2300      	movs	r3, #0
        lv_obj_type_t * buf = param;
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) {  /*Find the last set data*/
            if(buf->type[i] == NULL) break;
 8011092:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8011096:	b2da      	uxtb	r2, r3
 8011098:	b119      	cbz	r1, 80110a2 <lv_kb_signal+0x26>
 801109a:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) {  /*Find the last set data*/
 801109c:	2b07      	cmp	r3, #7
 801109e:	d1f8      	bne.n	8011092 <lv_kb_signal+0x16>
 80110a0:	461a      	mov	r2, r3
        }
        buf->type[i] = "lv_kb";
 80110a2:	4b03      	ldr	r3, [pc, #12]	; (80110b0 <lv_kb_signal+0x34>)
 80110a4:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
    }

    return res;
}
 80110a8:	bd38      	pop	{r3, r4, r5, pc}
 80110aa:	bf00      	nop
 80110ac:	20017414 	.word	0x20017414
 80110b0:	08087eca 	.word	0x08087eca

080110b4 <lv_kb_create>:
{
 80110b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80110b6:	460f      	mov	r7, r1
    lv_obj_t * new_kb = lv_btnm_create(par, copy);
 80110b8:	f7fe fb9a 	bl	800f7f0 <lv_btnm_create>
    lv_mem_assert(new_kb);
 80110bc:	4604      	mov	r4, r0
 80110be:	b900      	cbnz	r0, 80110c2 <lv_kb_create+0xe>
 80110c0:	e7fe      	b.n	80110c0 <lv_kb_create+0xc>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_kb);
 80110c2:	4d3c      	ldr	r5, [pc, #240]	; (80111b4 <lv_kb_create+0x100>)
 80110c4:	682b      	ldr	r3, [r5, #0]
 80110c6:	b913      	cbnz	r3, 80110ce <lv_kb_create+0x1a>
 80110c8:	f7f7 fed3 	bl	8008e72 <lv_obj_get_signal_func>
 80110cc:	6028      	str	r0, [r5, #0]
    lv_kb_ext_t * ext = lv_obj_allocate_ext_attr(new_kb, sizeof(lv_kb_ext_t));
 80110ce:	2138      	movs	r1, #56	; 0x38
 80110d0:	4620      	mov	r0, r4
 80110d2:	f7f7 fcd5 	bl	8008a80 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 80110d6:	4605      	mov	r5, r0
 80110d8:	b900      	cbnz	r0, 80110dc <lv_kb_create+0x28>
 80110da:	e7fe      	b.n	80110da <lv_kb_create+0x26>
    ext->ta = NULL;
 80110dc:	2600      	movs	r6, #0
    ext->cursor_mng = 0;
 80110de:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
    lv_obj_set_signal_func(new_kb, lv_kb_signal);
 80110e2:	4935      	ldr	r1, [pc, #212]	; (80111b8 <lv_kb_create+0x104>)
    ext->cursor_mng = 0;
 80110e4:	f366 0300 	bfi	r3, r6, #0, #1
    ext->ta = NULL;
 80110e8:	6286      	str	r6, [r0, #40]	; 0x28
    ext->mode = LV_KB_MODE_TEXT;
 80110ea:	f880 602c 	strb.w	r6, [r0, #44]	; 0x2c
    ext->cursor_mng = 0;
 80110ee:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    ext->hide_action = NULL;
 80110f2:	6346      	str	r6, [r0, #52]	; 0x34
    ext->ok_action = NULL;
 80110f4:	6306      	str	r6, [r0, #48]	; 0x30
    lv_obj_set_signal_func(new_kb, lv_kb_signal);
 80110f6:	4620      	mov	r0, r4
 80110f8:	f7f7 fcbe 	bl	8008a78 <lv_obj_set_signal_func>
    if(copy == NULL) {
 80110fc:	2f00      	cmp	r7, #0
 80110fe:	d13f      	bne.n	8011180 <lv_kb_create+0xcc>
        lv_obj_set_size(new_kb, LV_HOR_RES, LV_VER_RES / 2);
 8011100:	2288      	movs	r2, #136	; 0x88
 8011102:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8011106:	4620      	mov	r0, r4
 8011108:	f7f7 fae7 	bl	80086da <lv_obj_set_size>
        lv_obj_align(new_kb, NULL, LV_ALIGN_IN_BOTTOM_MID, 0, 0);
 801110c:	463b      	mov	r3, r7
 801110e:	2205      	movs	r2, #5
 8011110:	4639      	mov	r1, r7
 8011112:	4620      	mov	r0, r4
 8011114:	9700      	str	r7, [sp, #0]
 8011116:	f7f7 fb22 	bl	800875e <lv_obj_align>
        lv_btnm_set_action(new_kb, lv_app_kb_action);
 801111a:	4928      	ldr	r1, [pc, #160]	; (80111bc <lv_kb_create+0x108>)
 801111c:	4620      	mov	r0, r4
 801111e:	f7fe f9c9 	bl	800f4b4 <lv_btnm_set_action>
        lv_btnm_set_map(new_kb, kb_map_lc);
 8011122:	4927      	ldr	r1, [pc, #156]	; (80111c0 <lv_kb_create+0x10c>)
 8011124:	4620      	mov	r0, r4
 8011126:	f7fe fa2d 	bl	800f584 <lv_btnm_set_map>
        lv_theme_t * th = lv_theme_get_current();
 801112a:	f004 fca3 	bl	8015a74 <lv_theme_get_current>
        if(th) {
 801112e:	4605      	mov	r5, r0
 8011130:	b318      	cbz	r0, 801117a <lv_kb_create+0xc6>
            lv_btnm_set_style(kb, LV_BTNM_STYLE_BG, style);
 8011132:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 8011136:	4639      	mov	r1, r7
 8011138:	4620      	mov	r0, r4
 801113a:	f7fe f9df 	bl	800f4fc <lv_btnm_set_style>
            lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_REL, style);
 801113e:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
 8011142:	2101      	movs	r1, #1
 8011144:	4620      	mov	r0, r4
 8011146:	f7fe f9d9 	bl	800f4fc <lv_btnm_set_style>
            lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_PR, style);
 801114a:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
 801114e:	2102      	movs	r1, #2
 8011150:	4620      	mov	r0, r4
 8011152:	f7fe f9d3 	bl	800f4fc <lv_btnm_set_style>
            lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_TGL_REL, style);
 8011156:	f8d5 20a8 	ldr.w	r2, [r5, #168]	; 0xa8
 801115a:	2103      	movs	r1, #3
 801115c:	4620      	mov	r0, r4
 801115e:	f7fe f9cd 	bl	800f4fc <lv_btnm_set_style>
            lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_TGL_PR, style);
 8011162:	f8d5 20ac 	ldr.w	r2, [r5, #172]	; 0xac
 8011166:	2104      	movs	r1, #4
 8011168:	4620      	mov	r0, r4
 801116a:	f7fe f9c7 	bl	800f4fc <lv_btnm_set_style>
            lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_INA, style);
 801116e:	f8d5 20b0 	ldr.w	r2, [r5, #176]	; 0xb0
 8011172:	2105      	movs	r1, #5
 8011174:	4620      	mov	r0, r4
 8011176:	f7fe f9c1 	bl	800f4fc <lv_btnm_set_style>
}
 801117a:	4620      	mov	r0, r4
 801117c:	b003      	add	sp, #12
 801117e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_kb_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8011180:	4638      	mov	r0, r7
 8011182:	f7f7 fe7a 	bl	8008e7a <lv_obj_get_ext_attr>
        ext->ta = NULL;
 8011186:	62ae      	str	r6, [r5, #40]	; 0x28
        ext->ta = copy_ext->ta;
 8011188:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801118a:	62ab      	str	r3, [r5, #40]	; 0x28
        ext->mode = copy_ext->mode;
 801118c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8011190:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
        ext->cursor_mng = copy_ext->cursor_mng;
 8011194:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 8011198:	f890 202d 	ldrb.w	r2, [r0, #45]	; 0x2d
 801119c:	f362 0300 	bfi	r3, r2, #0, #1
 80111a0:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
        ext->hide_action = copy_ext->hide_action;
 80111a4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80111a6:	636b      	str	r3, [r5, #52]	; 0x34
        ext->ok_action = copy_ext->ok_action;
 80111a8:	6b03      	ldr	r3, [r0, #48]	; 0x30
        lv_obj_refresh_style(new_kb);
 80111aa:	4620      	mov	r0, r4
        ext->ok_action = copy_ext->ok_action;
 80111ac:	632b      	str	r3, [r5, #48]	; 0x30
        lv_obj_refresh_style(new_kb);
 80111ae:	f7f7 fc25 	bl	80089fc <lv_obj_refresh_style>
 80111b2:	e7e2      	b.n	801117a <lv_kb_create+0xc6>
 80111b4:	20017414 	.word	0x20017414
 80111b8:	0801107d 	.word	0x0801107d
 80111bc:	0801120d 	.word	0x0801120d
 80111c0:	200000e0 	.word	0x200000e0

080111c4 <lv_kb_set_ta>:
{
 80111c4:	b538      	push	{r3, r4, r5, lr}
 80111c6:	460d      	mov	r5, r1
    lv_kb_ext_t * ext = lv_obj_get_ext_attr(kb);
 80111c8:	f7f7 fe57 	bl	8008e7a <lv_obj_get_ext_attr>
 80111cc:	4604      	mov	r4, r0
    if(ext->ta && ext->cursor_mng) {
 80111ce:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80111d0:	b158      	cbz	r0, 80111ea <lv_kb_set_ta+0x26>
 80111d2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80111d6:	07da      	lsls	r2, r3, #31
 80111d8:	d507      	bpl.n	80111ea <lv_kb_set_ta+0x26>
        cur_type = lv_ta_get_cursor_type(ext->ta);
 80111da:	f003 fc97 	bl	8014b0c <lv_ta_get_cursor_type>
        lv_ta_set_cursor_type(ext->ta,  cur_type | LV_CURSOR_HIDDEN);
 80111de:	f040 0110 	orr.w	r1, r0, #16
 80111e2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80111e4:	b2c9      	uxtb	r1, r1
 80111e6:	f003 f8cb 	bl	8014380 <lv_ta_set_cursor_type>
    ext->ta = ta;
 80111ea:	62a5      	str	r5, [r4, #40]	; 0x28
    if(ext->ta && ext->cursor_mng) {
 80111ec:	b16d      	cbz	r5, 801120a <lv_kb_set_ta+0x46>
 80111ee:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80111f2:	07db      	lsls	r3, r3, #31
 80111f4:	d509      	bpl.n	801120a <lv_kb_set_ta+0x46>
        cur_type = lv_ta_get_cursor_type(ext->ta);
 80111f6:	4628      	mov	r0, r5
 80111f8:	f003 fc88 	bl	8014b0c <lv_ta_get_cursor_type>
        lv_ta_set_cursor_type(ext->ta,  cur_type & (~LV_CURSOR_HIDDEN));
 80111fc:	f000 01ef 	and.w	r1, r0, #239	; 0xef
 8011200:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
 8011202:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_ta_set_cursor_type(ext->ta,  cur_type & (~LV_CURSOR_HIDDEN));
 8011206:	f003 b8bb 	b.w	8014380 <lv_ta_set_cursor_type>
 801120a:	bd38      	pop	{r3, r4, r5, pc}

0801120c <lv_app_kb_action>:
 * @param btnm pointer to 'kb_btnm'
 * @param i the index of the released button from the current btnm map
 * @return LV_ACTION_RES_INV if the btnm is deleted else LV_ACTION_RES_OK
 */
static lv_res_t lv_app_kb_action(lv_obj_t * kb, const char * txt)
{
 801120c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801120e:	460e      	mov	r6, r1
 8011210:	4607      	mov	r7, r0
    lv_kb_ext_t * ext = lv_obj_get_ext_attr(kb);
 8011212:	f7f7 fe32 	bl	8008e7a <lv_obj_get_ext_attr>

    /*Do the corresponding action according to the text of the button*/
    if(strcmp(txt, "abc") == 0) {
 8011216:	494b      	ldr	r1, [pc, #300]	; (8011344 <lv_app_kb_action+0x138>)
    lv_kb_ext_t * ext = lv_obj_get_ext_attr(kb);
 8011218:	4605      	mov	r5, r0
    if(strcmp(txt, "abc") == 0) {
 801121a:	4630      	mov	r0, r6
 801121c:	f7ee fff4 	bl	8000208 <strcmp>
 8011220:	b928      	cbnz	r0, 801122e <lv_app_kb_action+0x22>
        lv_btnm_set_map(kb, kb_map_lc);
 8011222:	4949      	ldr	r1, [pc, #292]	; (8011348 <lv_app_kb_action+0x13c>)
        return LV_RES_OK;
    } else if(strcmp(txt, "ABC") == 0) {
        lv_btnm_set_map(kb, kb_map_uc);
        return LV_RES_OK;
    } else if(strcmp(txt, "1#") == 0) {
        lv_btnm_set_map(kb, kb_map_spec);
 8011224:	4638      	mov	r0, r7
 8011226:	f7fe f9ad 	bl	800f584 <lv_btnm_set_map>
            lv_obj_del(kb);
        }
        return LV_RES_INV;
    }

    if(ext->ta == NULL) return LV_RES_OK;
 801122a:	2001      	movs	r0, #1
        }
    } else {
        lv_ta_add_text(ext->ta, txt);
    }
    return LV_RES_OK;
}
 801122c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if(strcmp(txt, "ABC") == 0) {
 801122e:	4947      	ldr	r1, [pc, #284]	; (801134c <lv_app_kb_action+0x140>)
 8011230:	4630      	mov	r0, r6
 8011232:	f7ee ffe9 	bl	8000208 <strcmp>
 8011236:	b908      	cbnz	r0, 801123c <lv_app_kb_action+0x30>
        lv_btnm_set_map(kb, kb_map_uc);
 8011238:	4945      	ldr	r1, [pc, #276]	; (8011350 <lv_app_kb_action+0x144>)
 801123a:	e7f3      	b.n	8011224 <lv_app_kb_action+0x18>
    } else if(strcmp(txt, "1#") == 0) {
 801123c:	4945      	ldr	r1, [pc, #276]	; (8011354 <lv_app_kb_action+0x148>)
 801123e:	4630      	mov	r0, r6
 8011240:	f7ee ffe2 	bl	8000208 <strcmp>
 8011244:	b908      	cbnz	r0, 801124a <lv_app_kb_action+0x3e>
        lv_btnm_set_map(kb, kb_map_spec);
 8011246:	4944      	ldr	r1, [pc, #272]	; (8011358 <lv_app_kb_action+0x14c>)
 8011248:	e7ec      	b.n	8011224 <lv_app_kb_action+0x18>
    } else if(strcmp(txt, SYMBOL_CLOSE) == 0) {
 801124a:	4944      	ldr	r1, [pc, #272]	; (801135c <lv_app_kb_action+0x150>)
 801124c:	4630      	mov	r0, r6
 801124e:	f7ee ffdb 	bl	8000208 <strcmp>
 8011252:	b968      	cbnz	r0, 8011270 <lv_app_kb_action+0x64>
        if(ext->hide_action) ext->hide_action(kb);
 8011254:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if(ext->ok_action) ext->ok_action(kb);
 8011256:	b113      	cbz	r3, 801125e <lv_app_kb_action+0x52>
 8011258:	4638      	mov	r0, r7
 801125a:	4798      	blx	r3
 801125c:	e006      	b.n	801126c <lv_app_kb_action+0x60>
            lv_kb_set_ta(kb, NULL);         /*De-assign the text area  to hide it cursor if needed*/
 801125e:	4638      	mov	r0, r7
 8011260:	2100      	movs	r1, #0
 8011262:	f7ff ffaf 	bl	80111c4 <lv_kb_set_ta>
            lv_obj_del(kb);
 8011266:	4638      	mov	r0, r7
 8011268:	f7f7 f874 	bl	8008354 <lv_obj_del>
        return LV_RES_INV;
 801126c:	2000      	movs	r0, #0
 801126e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if(strcmp(txt, SYMBOL_OK) == 0) {
 8011270:	493b      	ldr	r1, [pc, #236]	; (8011360 <lv_app_kb_action+0x154>)
 8011272:	4630      	mov	r0, r6
 8011274:	f7ee ffc8 	bl	8000208 <strcmp>
 8011278:	b908      	cbnz	r0, 801127e <lv_app_kb_action+0x72>
        if(ext->ok_action) ext->ok_action(kb);
 801127a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801127c:	e7eb      	b.n	8011256 <lv_app_kb_action+0x4a>
    if(ext->ta == NULL) return LV_RES_OK;
 801127e:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8011280:	2c00      	cmp	r4, #0
 8011282:	d0d2      	beq.n	801122a <lv_app_kb_action+0x1e>
    if(strcmp(txt, "Enter") == 0)lv_ta_add_char(ext->ta, '\n');
 8011284:	4937      	ldr	r1, [pc, #220]	; (8011364 <lv_app_kb_action+0x158>)
 8011286:	4630      	mov	r0, r6
 8011288:	f7ee ffbe 	bl	8000208 <strcmp>
 801128c:	b920      	cbnz	r0, 8011298 <lv_app_kb_action+0x8c>
 801128e:	210a      	movs	r1, #10
 8011290:	4620      	mov	r0, r4
 8011292:	f003 fba7 	bl	80149e4 <lv_ta_add_char>
 8011296:	e7c8      	b.n	801122a <lv_app_kb_action+0x1e>
    else if(strcmp(txt, SYMBOL_LEFT) == 0) lv_ta_cursor_left(ext->ta);
 8011298:	4933      	ldr	r1, [pc, #204]	; (8011368 <lv_app_kb_action+0x15c>)
 801129a:	4630      	mov	r0, r6
 801129c:	f7ee ffb4 	bl	8000208 <strcmp>
 80112a0:	b918      	cbnz	r0, 80112aa <lv_app_kb_action+0x9e>
 80112a2:	4620      	mov	r0, r4
 80112a4:	f003 fd67 	bl	8014d76 <lv_ta_cursor_left>
 80112a8:	e7bf      	b.n	801122a <lv_app_kb_action+0x1e>
    else if(strcmp(txt, SYMBOL_RIGHT) == 0) lv_ta_cursor_right(ext->ta);
 80112aa:	4930      	ldr	r1, [pc, #192]	; (801136c <lv_app_kb_action+0x160>)
 80112ac:	4630      	mov	r0, r6
 80112ae:	f7ee ffab 	bl	8000208 <strcmp>
 80112b2:	b918      	cbnz	r0, 80112bc <lv_app_kb_action+0xb0>
 80112b4:	4620      	mov	r0, r4
 80112b6:	f003 fd53 	bl	8014d60 <lv_ta_cursor_right>
 80112ba:	e7b6      	b.n	801122a <lv_app_kb_action+0x1e>
    else if(strcmp(txt, "Del") == 0)  lv_ta_del_char(ext->ta);
 80112bc:	492c      	ldr	r1, [pc, #176]	; (8011370 <lv_app_kb_action+0x164>)
 80112be:	4630      	mov	r0, r6
 80112c0:	f7ee ffa2 	bl	8000208 <strcmp>
 80112c4:	b918      	cbnz	r0, 80112ce <lv_app_kb_action+0xc2>
 80112c6:	4620      	mov	r0, r4
 80112c8:	f003 f802 	bl	80142d0 <lv_ta_del_char>
 80112cc:	e7ad      	b.n	801122a <lv_app_kb_action+0x1e>
    else if(strcmp(txt, "+/-") == 0) {
 80112ce:	4929      	ldr	r1, [pc, #164]	; (8011374 <lv_app_kb_action+0x168>)
 80112d0:	4630      	mov	r0, r6
 80112d2:	f7ee ff99 	bl	8000208 <strcmp>
 80112d6:	4607      	mov	r7, r0
 80112d8:	bb78      	cbnz	r0, 801133a <lv_app_kb_action+0x12e>
        uint16_t cur = lv_ta_get_cursor_pos(ext->ta);
 80112da:	4620      	mov	r0, r4
 80112dc:	f003 fa00 	bl	80146e0 <lv_ta_get_cursor_pos>
 80112e0:	4604      	mov	r4, r0
        const char * ta_txt = lv_ta_get_text(ext->ta);
 80112e2:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80112e4:	f003 f9ee 	bl	80146c4 <lv_ta_get_text>
        if(ta_txt[0] == '-') {
 80112e8:	7803      	ldrb	r3, [r0, #0]
 80112ea:	2b2d      	cmp	r3, #45	; 0x2d
 80112ec:	d10f      	bne.n	801130e <lv_app_kb_action+0x102>
            lv_ta_set_cursor_pos(ext->ta, 1);
 80112ee:	2101      	movs	r1, #1
 80112f0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80112f2:	f002 ff31 	bl	8014158 <lv_ta_set_cursor_pos>
            lv_ta_del_char(ext->ta);
 80112f6:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80112f8:	f002 ffea 	bl	80142d0 <lv_ta_del_char>
            lv_ta_add_char(ext->ta, '+');
 80112fc:	212b      	movs	r1, #43	; 0x2b
            lv_ta_add_char(ext->ta, '-');
 80112fe:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8011300:	f003 fb70 	bl	80149e4 <lv_ta_add_char>
            lv_ta_set_cursor_pos(ext->ta, cur);
 8011304:	b221      	sxth	r1, r4
            lv_ta_set_cursor_pos(ext->ta, cur + 1);
 8011306:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8011308:	f002 ff26 	bl	8014158 <lv_ta_set_cursor_pos>
 801130c:	e78d      	b.n	801122a <lv_app_kb_action+0x1e>
        } else if(ta_txt[0] == '+') {
 801130e:	2b2b      	cmp	r3, #43	; 0x2b
 8011310:	d108      	bne.n	8011324 <lv_app_kb_action+0x118>
            lv_ta_set_cursor_pos(ext->ta, 1);
 8011312:	2101      	movs	r1, #1
 8011314:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8011316:	f002 ff1f 	bl	8014158 <lv_ta_set_cursor_pos>
            lv_ta_del_char(ext->ta);
 801131a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801131c:	f002 ffd8 	bl	80142d0 <lv_ta_del_char>
            lv_ta_add_char(ext->ta, '-');
 8011320:	212d      	movs	r1, #45	; 0x2d
 8011322:	e7ec      	b.n	80112fe <lv_app_kb_action+0xf2>
            lv_ta_set_cursor_pos(ext->ta, 0);
 8011324:	4639      	mov	r1, r7
 8011326:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8011328:	f002 ff16 	bl	8014158 <lv_ta_set_cursor_pos>
            lv_ta_add_char(ext->ta, '-');
 801132c:	212d      	movs	r1, #45	; 0x2d
 801132e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8011330:	f003 fb58 	bl	80149e4 <lv_ta_add_char>
            lv_ta_set_cursor_pos(ext->ta, cur + 1);
 8011334:	1c61      	adds	r1, r4, #1
 8011336:	b209      	sxth	r1, r1
 8011338:	e7e5      	b.n	8011306 <lv_app_kb_action+0xfa>
        lv_ta_add_text(ext->ta, txt);
 801133a:	4631      	mov	r1, r6
 801133c:	4620      	mov	r0, r4
 801133e:	f003 fbf7 	bl	8014b30 <lv_ta_add_text>
 8011342:	e772      	b.n	801122a <lv_app_kb_action+0x1e>
 8011344:	08087eec 	.word	0x08087eec
 8011348:	200000e0 	.word	0x200000e0
 801134c:	08087fa4 	.word	0x08087fa4
 8011350:	20000240 	.word	0x20000240
 8011354:	08087f28 	.word	0x08087f28
 8011358:	20000190 	.word	0x20000190
 801135c:	08087ed1 	.word	0x08087ed1
 8011360:	08087ed8 	.word	0x08087ed8
 8011364:	08087f6f 	.word	0x08087f6f
 8011368:	08087f1b 	.word	0x08087f1b
 801136c:	08087f23 	.word	0x08087f23
 8011370:	08087ee3 	.word	0x08087ee3
 8011374:	08087ec6 	.word	0x08087ec6

08011378 <lv_kb_set_ok_action>:
{
 8011378:	b510      	push	{r4, lr}
 801137a:	460c      	mov	r4, r1
    lv_kb_ext_t * ext = lv_obj_get_ext_attr(kb);
 801137c:	f7f7 fd7d 	bl	8008e7a <lv_obj_get_ext_attr>
    ext->ok_action = action;
 8011380:	6304      	str	r4, [r0, #48]	; 0x30
 8011382:	bd10      	pop	{r4, pc}

08011384 <lv_kb_set_hide_action>:
{
 8011384:	b510      	push	{r4, lr}
 8011386:	460c      	mov	r4, r1
    lv_kb_ext_t * ext = lv_obj_get_ext_attr(kb);
 8011388:	f7f7 fd77 	bl	8008e7a <lv_obj_get_ext_attr>
    ext->hide_action = action;
 801138c:	6344      	str	r4, [r0, #52]	; 0x34
 801138e:	bd10      	pop	{r4, pc}

08011390 <lv_kb_set_style>:
    switch(type) {
 8011390:	2905      	cmp	r1, #5
 8011392:	d811      	bhi.n	80113b8 <lv_kb_set_style+0x28>
 8011394:	e8df f001 	tbb	[pc, r1]
 8011398:	0a080603 	.word	0x0a080603
 801139c:	0e0c      	.short	0x0e0c
            lv_btnm_set_style(kb, LV_BTNM_STYLE_BG, style);
 801139e:	2100      	movs	r1, #0
            lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_INA, style);
 80113a0:	f7fe b8ac 	b.w	800f4fc <lv_btnm_set_style>
            lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_REL, style);
 80113a4:	2101      	movs	r1, #1
 80113a6:	e7fb      	b.n	80113a0 <lv_kb_set_style+0x10>
            lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_PR, style);
 80113a8:	2102      	movs	r1, #2
 80113aa:	e7f9      	b.n	80113a0 <lv_kb_set_style+0x10>
            lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_TGL_REL, style);
 80113ac:	2103      	movs	r1, #3
 80113ae:	e7f7      	b.n	80113a0 <lv_kb_set_style+0x10>
            lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_TGL_PR, style);
 80113b0:	2104      	movs	r1, #4
 80113b2:	e7f5      	b.n	80113a0 <lv_kb_set_style+0x10>
            lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_INA, style);
 80113b4:	2105      	movs	r1, #5
 80113b6:	e7f3      	b.n	80113a0 <lv_kb_set_style+0x10>
 80113b8:	4770      	bx	lr
	...

080113bc <lv_label_revert_dots>:

    lv_obj_invalidate(label);
}

static void lv_label_revert_dots(lv_obj_t * label)
{
 80113bc:	b538      	push	{r3, r4, r5, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80113be:	f7f7 fd5c 	bl	8008e7a <lv_obj_get_ext_attr>
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
 80113c2:	7903      	ldrb	r3, [r0, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80113c4:	4604      	mov	r4, r0
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
 80113c6:	2b03      	cmp	r3, #3
 80113c8:	d112      	bne.n	80113f0 <lv_label_revert_dots+0x34>
    if(ext->dot_end == LV_LABEL_DOT_END_INV) return;
 80113ca:	8a41      	ldrh	r1, [r0, #18]
 80113cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80113d0:	4299      	cmp	r1, r3
 80113d2:	d00d      	beq.n	80113f0 <lv_label_revert_dots+0x34>
    for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
        ext->text[ext->dot_end - i] = ext->dot_tmp[LV_LABEL_DOT_NUM - i];
    }
#else
    uint32_t letter_i = ext->dot_end - LV_LABEL_DOT_NUM;
    uint32_t byte_i = lv_txt_encoded_get_byte_id(ext->text, letter_i);
 80113d4:	4b09      	ldr	r3, [pc, #36]	; (80113fc <lv_label_revert_dots+0x40>)
 80113d6:	3903      	subs	r1, #3
 80113d8:	6800      	ldr	r0, [r0, #0]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	4798      	blx	r3

    /*Restore the characters*/
    uint8_t i = 0;
    while(ext->dot_tmp[i] != '\0') {
 80113de:	2300      	movs	r3, #0
 80113e0:	b2dd      	uxtb	r5, r3
 80113e2:	3301      	adds	r3, #1
 80113e4:	1962      	adds	r2, r4, r5
 80113e6:	7951      	ldrb	r1, [r2, #5]
 80113e8:	b919      	cbnz	r1, 80113f2 <lv_label_revert_dots+0x36>
        ext->text[byte_i + i] = ext->dot_tmp[i];
        i++;
    }
#endif

    ext->dot_end = LV_LABEL_DOT_END_INV;
 80113ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80113ee:	8263      	strh	r3, [r4, #18]
 80113f0:	bd38      	pop	{r3, r4, r5, pc}
        ext->text[byte_i + i] = ext->dot_tmp[i];
 80113f2:	6822      	ldr	r2, [r4, #0]
 80113f4:	4402      	add	r2, r0
 80113f6:	5551      	strb	r1, [r2, r5]
 80113f8:	e7f2      	b.n	80113e0 <lv_label_revert_dots+0x24>
 80113fa:	bf00      	nop
 80113fc:	200000ac 	.word	0x200000ac

08011400 <lv_label_set_offset_y>:
    ext->offset.x = x;
    lv_obj_invalidate(label);
}

static void lv_label_set_offset_y(lv_obj_t * label, lv_coord_t y)
{
 8011400:	b538      	push	{r3, r4, r5, lr}
 8011402:	4604      	mov	r4, r0
 8011404:	460d      	mov	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8011406:	f7f7 fd38 	bl	8008e7a <lv_obj_get_ext_attr>
    ext->offset.y = y;
 801140a:	8305      	strh	r5, [r0, #24]
    lv_obj_invalidate(label);
 801140c:	4620      	mov	r0, r4
}
 801140e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label);
 8011412:	f7f6 bf51 	b.w	80082b8 <lv_obj_invalidate>

08011416 <lv_label_set_offset_x>:
{
 8011416:	b538      	push	{r3, r4, r5, lr}
 8011418:	4604      	mov	r4, r0
 801141a:	460d      	mov	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801141c:	f7f7 fd2d 	bl	8008e7a <lv_obj_get_ext_attr>
    ext->offset.x = x;
 8011420:	82c5      	strh	r5, [r0, #22]
    lv_obj_invalidate(label);
 8011422:	4620      	mov	r0, r4
}
 8011424:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label);
 8011428:	f7f6 bf46 	b.w	80082b8 <lv_obj_invalidate>

0801142c <lv_label_design>:
    if(mode == LV_DESIGN_COVER_CHK) return false;
 801142c:	2a02      	cmp	r2, #2
{
 801142e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011432:	4606      	mov	r6, r0
 8011434:	b088      	sub	sp, #32
 8011436:	4688      	mov	r8, r1
    if(mode == LV_DESIGN_COVER_CHK) return false;
 8011438:	f000 8082 	beq.w	8011540 <lv_label_design+0x114>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 801143c:	2a00      	cmp	r2, #0
 801143e:	d178      	bne.n	8011532 <lv_label_design+0x106>
        lv_style_t * style = lv_obj_get_style(label);
 8011440:	f7f7 fc50 	bl	8008ce4 <lv_obj_get_style>
 8011444:	4605      	mov	r5, r0
        lv_opa_t opa_scale = lv_obj_get_opa_scale(label);
 8011446:	4630      	mov	r0, r6
 8011448:	f7f7 fcb7 	bl	8008dba <lv_obj_get_opa_scale>
        lv_obj_get_coords(label, &coords);
 801144c:	a904      	add	r1, sp, #16
        lv_opa_t opa_scale = lv_obj_get_opa_scale(label);
 801144e:	4681      	mov	r9, r0
        lv_obj_get_coords(label, &coords);
 8011450:	4630      	mov	r0, r6
 8011452:	f7f7 fc29 	bl	8008ca8 <lv_obj_get_coords>
        lv_group_t * g = lv_obj_get_group(label);
 8011456:	4630      	mov	r0, r6
 8011458:	f7f7 fd11 	bl	8008e7e <lv_obj_get_group>
        if(lv_group_get_focused(g) == label) {
 801145c:	f7f6 fa59 	bl	8007912 <lv_group_get_focused>
 8011460:	4286      	cmp	r6, r0
 8011462:	d105      	bne.n	8011470 <lv_label_design+0x44>
            lv_draw_rect(&coords, mask, style, opa_scale);
 8011464:	464b      	mov	r3, r9
 8011466:	462a      	mov	r2, r5
 8011468:	4641      	mov	r1, r8
 801146a:	a804      	add	r0, sp, #16
 801146c:	f7f9 fb0e 	bl	800aa8c <lv_draw_rect>
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8011470:	4630      	mov	r0, r6
 8011472:	f7f7 fd02 	bl	8008e7a <lv_obj_get_ext_attr>
        if(ext->body_draw) {
 8011476:	7e83      	ldrb	r3, [r0, #26]
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8011478:	4607      	mov	r7, r0
        if(ext->body_draw) {
 801147a:	0699      	lsls	r1, r3, #26
 801147c:	d522      	bpl.n	80114c4 <lv_label_design+0x98>
            lv_obj_get_coords(label, &bg);
 801147e:	a906      	add	r1, sp, #24
 8011480:	4630      	mov	r0, r6
 8011482:	f7f7 fc11 	bl	8008ca8 <lv_obj_get_coords>
            bg.x1 -= style->body.padding.hor;
 8011486:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 8011488:	f8bd 2018 	ldrh.w	r2, [sp, #24]
            lv_draw_rect(&bg, mask, style, lv_obj_get_opa_scale(label));
 801148c:	4630      	mov	r0, r6
            bg.x1 -= style->body.padding.hor;
 801148e:	1ad2      	subs	r2, r2, r3
 8011490:	f8ad 2018 	strh.w	r2, [sp, #24]
            bg.x2 += style->body.padding.hor;
 8011494:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8011498:	4413      	add	r3, r2
            bg.y1 -= style->body.padding.ver;
 801149a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
            bg.x2 += style->body.padding.hor;
 801149e:	f8ad 301c 	strh.w	r3, [sp, #28]
            bg.y1 -= style->body.padding.ver;
 80114a2:	8c2b      	ldrh	r3, [r5, #32]
 80114a4:	1ad2      	subs	r2, r2, r3
 80114a6:	f8ad 201a 	strh.w	r2, [sp, #26]
            bg.y2 += style->body.padding.ver;
 80114aa:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80114ae:	4413      	add	r3, r2
 80114b0:	f8ad 301e 	strh.w	r3, [sp, #30]
            lv_draw_rect(&bg, mask, style, lv_obj_get_opa_scale(label));
 80114b4:	f7f7 fc81 	bl	8008dba <lv_obj_get_opa_scale>
 80114b8:	462a      	mov	r2, r5
 80114ba:	4603      	mov	r3, r0
 80114bc:	4641      	mov	r1, r8
 80114be:	a806      	add	r0, sp, #24
 80114c0:	f7f9 fae4 	bl	800aa8c <lv_draw_rect>
        if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 80114c4:	7ebb      	ldrb	r3, [r7, #26]
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 80114c6:	06da      	lsls	r2, r3, #27
        lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 80114c8:	f3c3 04c0 	ubfx	r4, r3, #3, #1
        if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 80114cc:	f003 0306 	and.w	r3, r3, #6
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 80114d0:	bf48      	it	mi
 80114d2:	f044 0402 	orrmi.w	r4, r4, #2
        if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 80114d6:	2b02      	cmp	r3, #2
 80114d8:	d12d      	bne.n	8011536 <lv_label_design+0x10a>
 80114da:	f044 0404 	orr.w	r4, r4, #4
        if((ext->long_mode == LV_LABEL_LONG_ROLL) &&
 80114de:	793a      	ldrb	r2, [r7, #4]
 80114e0:	2a04      	cmp	r2, #4
 80114e2:	d11a      	bne.n	801151a <lv_label_design+0xee>
 80114e4:	2b02      	cmp	r3, #2
 80114e6:	d001      	beq.n	80114ec <lv_label_design+0xc0>
                (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
 80114e8:	2b04      	cmp	r3, #4
 80114ea:	d116      	bne.n	801151a <lv_label_design+0xee>
            lv_txt_get_size(&size, ext->text, style->text.font, style->text.letter_space, style->text.line_space, LV_COORD_MAX, flag);
 80114ec:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80114f0:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
 80114f4:	9402      	str	r4, [sp, #8]
 80114f6:	a806      	add	r0, sp, #24
 80114f8:	9201      	str	r2, [sp, #4]
 80114fa:	f9b5 2032 	ldrsh.w	r2, [r5, #50]	; 0x32
 80114fe:	9200      	str	r2, [sp, #0]
 8011500:	6839      	ldr	r1, [r7, #0]
 8011502:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8011504:	f7fd f858 	bl	800e5b8 <lv_txt_get_size>
            if(size.x > lv_obj_get_width(label)) {
 8011508:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 801150c:	4630      	mov	r0, r6
 801150e:	f7f7 fbdd 	bl	8008ccc <lv_obj_get_width>
 8011512:	4582      	cmp	sl, r0
                flag &= ~LV_TXT_FLAG_CENTER;
 8011514:	bfc8      	it	gt
 8011516:	f004 04f3 	andgt.w	r4, r4, #243	; 0xf3
        lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ext->offset);
 801151a:	f107 0316 	add.w	r3, r7, #22
 801151e:	9401      	str	r4, [sp, #4]
 8011520:	462a      	mov	r2, r5
 8011522:	4641      	mov	r1, r8
 8011524:	9302      	str	r3, [sp, #8]
 8011526:	a804      	add	r0, sp, #16
 8011528:	683b      	ldr	r3, [r7, #0]
 801152a:	9300      	str	r3, [sp, #0]
 801152c:	464b      	mov	r3, r9
 801152e:	f7f8 fbc9 	bl	8009cc4 <lv_draw_label>
    return true;
 8011532:	2001      	movs	r0, #1
 8011534:	e005      	b.n	8011542 <lv_label_design+0x116>
        if(ext->align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
 8011536:	2b04      	cmp	r3, #4
 8011538:	bf08      	it	eq
 801153a:	f044 0408 	orreq.w	r4, r4, #8
 801153e:	e7ce      	b.n	80114de <lv_label_design+0xb2>
    if(mode == LV_DESIGN_COVER_CHK) return false;
 8011540:	2000      	movs	r0, #0
}
 8011542:	b008      	add	sp, #32
 8011544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08011548 <lv_label_set_align>:
{
 8011548:	b538      	push	{r3, r4, r5, lr}
 801154a:	460c      	mov	r4, r1
 801154c:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801154e:	f7f7 fc94 	bl	8008e7a <lv_obj_get_ext_attr>
    if(ext->align == align) return;
 8011552:	7e83      	ldrb	r3, [r0, #26]
 8011554:	f3c3 0241 	ubfx	r2, r3, #1, #2
 8011558:	42a2      	cmp	r2, r4
 801155a:	d007      	beq.n	801156c <lv_label_set_align+0x24>
    ext->align = align;
 801155c:	f364 0342 	bfi	r3, r4, #1, #2
 8011560:	7683      	strb	r3, [r0, #26]
    lv_obj_invalidate(label);       /*Enough to invalidate because alignment is only drawing related (lv_refr_label_text() not required)*/
 8011562:	4628      	mov	r0, r5
}
 8011564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label);       /*Enough to invalidate because alignment is only drawing related (lv_refr_label_text() not required)*/
 8011568:	f7f6 bea6 	b.w	80082b8 <lv_obj_invalidate>
 801156c:	bd38      	pop	{r3, r4, r5, pc}

0801156e <lv_label_set_body_draw>:
{
 801156e:	b538      	push	{r3, r4, r5, lr}
 8011570:	460d      	mov	r5, r1
 8011572:	4604      	mov	r4, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8011574:	f7f7 fc81 	bl	8008e7a <lv_obj_get_ext_attr>
    if(ext->body_draw == body_en) return;
 8011578:	7e83      	ldrb	r3, [r0, #26]
 801157a:	f3c3 1240 	ubfx	r2, r3, #5, #1
 801157e:	42aa      	cmp	r2, r5
 8011580:	d00a      	beq.n	8011598 <lv_label_set_body_draw+0x2a>
    ext->body_draw = body_en == false ? 0 : 1;
 8011582:	f365 1345 	bfi	r3, r5, #5, #1
 8011586:	7683      	strb	r3, [r0, #26]
    lv_obj_refresh_ext_size(label);
 8011588:	4620      	mov	r0, r4
 801158a:	f7f7 fa80 	bl	8008a8e <lv_obj_refresh_ext_size>
    lv_obj_invalidate(label);
 801158e:	4620      	mov	r0, r4
}
 8011590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label);
 8011594:	f7f6 be90 	b.w	80082b8 <lv_obj_invalidate>
 8011598:	bd38      	pop	{r3, r4, r5, pc}

0801159a <lv_label_get_text>:
{
 801159a:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801159c:	f7f7 fc6d 	bl	8008e7a <lv_obj_get_ext_attr>
}
 80115a0:	6800      	ldr	r0, [r0, #0]
 80115a2:	bd08      	pop	{r3, pc}

080115a4 <lv_label_get_long_mode>:
{
 80115a4:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80115a6:	f7f7 fc68 	bl	8008e7a <lv_obj_get_ext_attr>
}
 80115aa:	7900      	ldrb	r0, [r0, #4]
 80115ac:	bd08      	pop	{r3, pc}

080115ae <lv_label_get_align>:
{
 80115ae:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80115b0:	f7f7 fc63 	bl	8008e7a <lv_obj_get_ext_attr>
    return ext->align;
 80115b4:	7e80      	ldrb	r0, [r0, #26]
}
 80115b6:	f3c0 0041 	ubfx	r0, r0, #1, #2
 80115ba:	bd08      	pop	{r3, pc}

080115bc <lv_label_get_recolor>:
{
 80115bc:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80115be:	f7f7 fc5c 	bl	8008e7a <lv_obj_get_ext_attr>
    return ext->recolor == 0 ? false : true;
 80115c2:	7e80      	ldrb	r0, [r0, #26]
}
 80115c4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 80115c8:	bd08      	pop	{r3, pc}

080115ca <lv_label_get_body_draw>:
{
 80115ca:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80115cc:	f7f7 fc55 	bl	8008e7a <lv_obj_get_ext_attr>
    return ext->body_draw == 0 ? false : true;
 80115d0:	7e80      	ldrb	r0, [r0, #26]
}
 80115d2:	f3c0 1040 	ubfx	r0, r0, #5, #1
 80115d6:	bd08      	pop	{r3, pc}

080115d8 <lv_label_get_letter_pos>:
{
 80115d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115dc:	b08b      	sub	sp, #44	; 0x2c
 80115de:	460c      	mov	r4, r1
    lv_coord_t y = 0;
 80115e0:	f04f 0b00 	mov.w	fp, #0
{
 80115e4:	9205      	str	r2, [sp, #20]
 80115e6:	9003      	str	r0, [sp, #12]
    const char * txt = lv_label_get_text(label);
 80115e8:	f7ff ffd7 	bl	801159a <lv_label_get_text>
 80115ec:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80115ee:	9803      	ldr	r0, [sp, #12]
 80115f0:	f7f7 fc43 	bl	8008e7a <lv_obj_get_ext_attr>
 80115f4:	9004      	str	r0, [sp, #16]
    lv_coord_t max_w = lv_obj_get_width(label);
 80115f6:	9803      	ldr	r0, [sp, #12]
 80115f8:	f7f7 fb68 	bl	8008ccc <lv_obj_get_width>
 80115fc:	4681      	mov	r9, r0
    lv_style_t * style = lv_obj_get_style(label);
 80115fe:	9803      	ldr	r0, [sp, #12]
 8011600:	f7f7 fb70 	bl	8008ce4 <lv_obj_get_style>
    const lv_font_t * font = style->text.font;
 8011604:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    index = lv_txt_encoded_get_byte_id(txt, index);
 8011606:	4621      	mov	r1, r4
    lv_style_t * style = lv_obj_get_style(label);
 8011608:	4607      	mov	r7, r0
    const lv_font_t * font = style->text.font;
 801160a:	9302      	str	r3, [sp, #8]
    index = lv_txt_encoded_get_byte_id(txt, index);
 801160c:	4628      	mov	r0, r5
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline uint8_t lv_font_get_height(const lv_font_t * font_p)
{
    return font_p->h_px;
 801160e:	f893 8020 	ldrb.w	r8, [r3, #32]
    uint32_t line_start = 0;
 8011612:	465c      	mov	r4, fp
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 8011614:	9b04      	ldr	r3, [sp, #16]
 8011616:	7e9b      	ldrb	r3, [r3, #26]
    lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 8011618:	f3c3 06c0 	ubfx	r6, r3, #3, #1
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 801161c:	06da      	lsls	r2, r3, #27
    if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 801161e:	f003 0306 	and.w	r3, r3, #6
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 8011622:	bf48      	it	mi
 8011624:	f046 0602 	orrmi.w	r6, r6, #2
    if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 8011628:	2b02      	cmp	r3, #2
    if(ext->long_mode == LV_LABEL_LONG_EXPAND || ext->long_mode == LV_LABEL_LONG_SCROLL) {
 801162a:	9b04      	ldr	r3, [sp, #16]
 801162c:	791b      	ldrb	r3, [r3, #4]
    if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 801162e:	bf08      	it	eq
 8011630:	f046 0604 	orreq.w	r6, r6, #4
        max_w = LV_COORD_MAX;
 8011634:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8011638:	f643 73ff 	movw	r3, #16383	; 0x3fff
 801163c:	bf08      	it	eq
 801163e:	4699      	moveq	r9, r3
    index = lv_txt_encoded_get_byte_id(txt, index);
 8011640:	4b50      	ldr	r3, [pc, #320]	; (8011784 <lv_label_get_letter_pos+0x1ac>)
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	4798      	blx	r3
 8011646:	4682      	mov	sl, r0
        if(index < new_line_start || txt[new_line_start] == '\0') break; /*The line of 'index' letter begins at 'line_start'*/
 8011648:	b283      	uxth	r3, r0
 801164a:	9306      	str	r3, [sp, #24]
    while(txt[new_line_start] != '\0') {
 801164c:	5d2b      	ldrb	r3, [r5, r4]
 801164e:	1928      	adds	r0, r5, r4
 8011650:	2b00      	cmp	r3, #0
 8011652:	d144      	bne.n	80116de <lv_label_get_letter_pos+0x106>
 8011654:	4622      	mov	r2, r4
 8011656:	fa1f fa8a 	uxth.w	sl, sl
    if((txt[index - 1] == '\n' || txt[index - 1] == '\r') && txt[index] == '\0') {
 801165a:	eb05 030a 	add.w	r3, r5, sl
 801165e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011662:	2b0a      	cmp	r3, #10
 8011664:	d001      	beq.n	801166a <lv_label_get_letter_pos+0x92>
 8011666:	2b0d      	cmp	r3, #13
 8011668:	d108      	bne.n	801167c <lv_label_get_letter_pos+0xa4>
 801166a:	f815 300a 	ldrb.w	r3, [r5, sl]
 801166e:	b92b      	cbnz	r3, 801167c <lv_label_get_letter_pos+0xa4>
        y += letter_height + style->text.line_space;
 8011670:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
        line_start = index;
 8011672:	4654      	mov	r4, sl
        y += letter_height + style->text.line_space;
 8011674:	4498      	add	r8, r3
 8011676:	44d8      	add	r8, fp
 8011678:	fa0f fb88 	sxth.w	fp, r8
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 801167c:	f04f 0800 	mov.w	r8, #0
    uint32_t cnt = line_start;                      /*Count the letter (in UTF-8 1 letter not 1 byte)*/
 8011680:	46a1      	mov	r9, r4
    uint32_t i = line_start;
 8011682:	9409      	str	r4, [sp, #36]	; 0x24
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 8011684:	f88d 8023 	strb.w	r8, [sp, #35]	; 0x23
    while(cnt < index) {
 8011688:	45d1      	cmp	r9, sl
 801168a:	d33d      	bcc.n	8011708 <lv_label_get_letter_pos+0x130>
    if(ext->align == LV_LABEL_ALIGN_CENTER) {
 801168c:	9b04      	ldr	r3, [sp, #16]
 801168e:	f893 901a 	ldrb.w	r9, [r3, #26]
 8011692:	f009 0906 	and.w	r9, r9, #6
 8011696:	f1b9 0f02 	cmp.w	r9, #2
 801169a:	d160      	bne.n	801175e <lv_label_get_letter_pos+0x186>
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start,
 801169c:	1b11      	subs	r1, r2, r4
 801169e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80116a2:	9a02      	ldr	r2, [sp, #8]
 80116a4:	1928      	adds	r0, r5, r4
 80116a6:	b289      	uxth	r1, r1
 80116a8:	9600      	str	r6, [sp, #0]
 80116aa:	f7fc ff4d 	bl	800e548 <lv_txt_get_width>
 80116ae:	4604      	mov	r4, r0
        x += lv_obj_get_width(label) / 2 - line_w / 2;
 80116b0:	9803      	ldr	r0, [sp, #12]
 80116b2:	f7f7 fb0b 	bl	8008ccc <lv_obj_get_width>
 80116b6:	fb90 f0f9 	sdiv	r0, r0, r9
 80116ba:	fb94 f9f9 	sdiv	r9, r4, r9
 80116be:	b200      	sxth	r0, r0
 80116c0:	fa0f f989 	sxth.w	r9, r9
 80116c4:	eba0 0009 	sub.w	r0, r0, r9
        x += lv_obj_get_width(label) - line_w;
 80116c8:	4480      	add	r8, r0
 80116ca:	fa0f f888 	sxth.w	r8, r8
    pos->x = x;
 80116ce:	9b05      	ldr	r3, [sp, #20]
 80116d0:	f8a3 8000 	strh.w	r8, [r3]
    pos->y = y;
 80116d4:	f8a3 b002 	strh.w	fp, [r3, #2]
}
 80116d8:	b00b      	add	sp, #44	; 0x2c
 80116da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
 80116de:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80116e2:	464b      	mov	r3, r9
 80116e4:	9600      	str	r6, [sp, #0]
 80116e6:	9902      	ldr	r1, [sp, #8]
 80116e8:	f7fc fea4 	bl	800e434 <lv_txt_get_next_line>
        if(index < new_line_start || txt[new_line_start] == '\0') break; /*The line of 'index' letter begins at 'line_start'*/
 80116ec:	9b06      	ldr	r3, [sp, #24]
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
 80116ee:	1902      	adds	r2, r0, r4
        if(index < new_line_start || txt[new_line_start] == '\0') break; /*The line of 'index' letter begins at 'line_start'*/
 80116f0:	4293      	cmp	r3, r2
 80116f2:	d3b0      	bcc.n	8011656 <lv_label_get_letter_pos+0x7e>
 80116f4:	5cab      	ldrb	r3, [r5, r2]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d0ad      	beq.n	8011656 <lv_label_get_letter_pos+0x7e>
        y += letter_height + style->text.line_space;
 80116fa:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80116fc:	4614      	mov	r4, r2
 80116fe:	4443      	add	r3, r8
 8011700:	445b      	add	r3, fp
 8011702:	fa0f fb83 	sxth.w	fp, r3
 8011706:	e7a1      	b.n	801164c <lv_label_get_letter_pos+0x74>
        cnt += lv_txt_encoded_size(&txt[i]);
 8011708:	9809      	ldr	r0, [sp, #36]	; 0x24
 801170a:	4b1f      	ldr	r3, [pc, #124]	; (8011788 <lv_label_get_letter_pos+0x1b0>)
 801170c:	4428      	add	r0, r5
 801170e:	9206      	str	r2, [sp, #24]
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	4798      	blx	r3
        letter = lv_txt_encoded_next(txt, &i);
 8011714:	4b1d      	ldr	r3, [pc, #116]	; (801178c <lv_label_get_letter_pos+0x1b4>)
        cnt += lv_txt_encoded_size(&txt[i]);
 8011716:	4481      	add	r9, r0
        letter = lv_txt_encoded_next(txt, &i);
 8011718:	a909      	add	r1, sp, #36	; 0x24
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	4628      	mov	r0, r5
 801171e:	4798      	blx	r3
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8011720:	f016 0f01 	tst.w	r6, #1
        letter = lv_txt_encoded_next(txt, &i);
 8011724:	4603      	mov	r3, r0
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8011726:	9a06      	ldr	r2, [sp, #24]
 8011728:	d10c      	bne.n	8011744 <lv_label_get_letter_pos+0x16c>
        x += lv_font_get_width(font, letter) + style->text.letter_space;
 801172a:	4619      	mov	r1, r3
 801172c:	9802      	ldr	r0, [sp, #8]
 801172e:	9206      	str	r2, [sp, #24]
 8011730:	f7fc f94e 	bl	800d9d0 <lv_font_get_width>
 8011734:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8011738:	9a06      	ldr	r2, [sp, #24]
 801173a:	4418      	add	r0, r3
 801173c:	4480      	add	r8, r0
 801173e:	fa0f f888 	sxth.w	r8, r8
 8011742:	e7a1      	b.n	8011688 <lv_label_get_letter_pos+0xb0>
            if(lv_txt_is_cmd(&cmd_state, txt[i]) != false) {
 8011744:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011746:	9007      	str	r0, [sp, #28]
 8011748:	f10d 0023 	add.w	r0, sp, #35	; 0x23
 801174c:	5c69      	ldrb	r1, [r5, r1]
 801174e:	9206      	str	r2, [sp, #24]
 8011750:	f7fc fe52 	bl	800e3f8 <lv_txt_is_cmd>
 8011754:	9a06      	ldr	r2, [sp, #24]
 8011756:	9b07      	ldr	r3, [sp, #28]
 8011758:	2800      	cmp	r0, #0
 801175a:	d0e6      	beq.n	801172a <lv_label_get_letter_pos+0x152>
 801175c:	e794      	b.n	8011688 <lv_label_get_letter_pos+0xb0>
    } else if(ext->align == LV_LABEL_ALIGN_RIGHT) {
 801175e:	f1b9 0f04 	cmp.w	r9, #4
 8011762:	d1b4      	bne.n	80116ce <lv_label_get_letter_pos+0xf6>
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start,
 8011764:	1b11      	subs	r1, r2, r4
 8011766:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801176a:	9a02      	ldr	r2, [sp, #8]
 801176c:	1928      	adds	r0, r5, r4
 801176e:	b289      	uxth	r1, r1
 8011770:	9600      	str	r6, [sp, #0]
 8011772:	f7fc fee9 	bl	800e548 <lv_txt_get_width>
 8011776:	4604      	mov	r4, r0
        x += lv_obj_get_width(label) - line_w;
 8011778:	9803      	ldr	r0, [sp, #12]
 801177a:	f7f7 faa7 	bl	8008ccc <lv_obj_get_width>
 801177e:	1b00      	subs	r0, r0, r4
 8011780:	e7a2      	b.n	80116c8 <lv_label_get_letter_pos+0xf0>
 8011782:	bf00      	nop
 8011784:	200000ac 	.word	0x200000ac
 8011788:	200000b8 	.word	0x200000b8
 801178c:	200000b0 	.word	0x200000b0

08011790 <lv_label_get_letter_on>:
{
 8011790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011794:	4682      	mov	sl, r0
 8011796:	b08b      	sub	sp, #44	; 0x2c
        max_w = LV_COORD_MAX;
 8011798:	f04f 0b00 	mov.w	fp, #0
{
 801179c:	9106      	str	r1, [sp, #24]
    const char * txt = lv_label_get_text(label);
 801179e:	f7ff fefc 	bl	801159a <lv_label_get_text>
 80117a2:	4606      	mov	r6, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80117a4:	4650      	mov	r0, sl
 80117a6:	f7f7 fb68 	bl	8008e7a <lv_obj_get_ext_attr>
 80117aa:	9003      	str	r0, [sp, #12]
    lv_coord_t max_w = lv_obj_get_width(label);
 80117ac:	4650      	mov	r0, sl
        max_w = LV_COORD_MAX;
 80117ae:	465c      	mov	r4, fp
    lv_coord_t max_w = lv_obj_get_width(label);
 80117b0:	f7f7 fa8c 	bl	8008ccc <lv_obj_get_width>
 80117b4:	9004      	str	r0, [sp, #16]
    lv_style_t * style = lv_obj_get_style(label);
 80117b6:	4650      	mov	r0, sl
 80117b8:	f7f7 fa94 	bl	8008ce4 <lv_obj_get_style>
    const lv_font_t * font = style->text.font;
 80117bc:	f8d0 902c 	ldr.w	r9, [r0, #44]	; 0x2c
    lv_style_t * style = lv_obj_get_style(label);
 80117c0:	4607      	mov	r7, r0
 80117c2:	f899 3020 	ldrb.w	r3, [r9, #32]
 80117c6:	9305      	str	r3, [sp, #20]
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 80117c8:	9b03      	ldr	r3, [sp, #12]
 80117ca:	7e9b      	ldrb	r3, [r3, #26]
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 80117cc:	06da      	lsls	r2, r3, #27
    lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 80117ce:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 80117d2:	f003 0306 	and.w	r3, r3, #6
        max_w = LV_COORD_MAX;
 80117d6:	9a04      	ldr	r2, [sp, #16]
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 80117d8:	bf48      	it	mi
 80117da:	f045 0502 	orrmi.w	r5, r5, #2
    if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 80117de:	2b02      	cmp	r3, #2
    if(ext->long_mode == LV_LABEL_LONG_EXPAND || ext->long_mode == LV_LABEL_LONG_SCROLL) {
 80117e0:	9b03      	ldr	r3, [sp, #12]
 80117e2:	791b      	ldrb	r3, [r3, #4]
    if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 80117e4:	bf08      	it	eq
 80117e6:	f045 0504 	orreq.w	r5, r5, #4
        max_w = LV_COORD_MAX;
 80117ea:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80117ee:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80117f2:	bf08      	it	eq
 80117f4:	461a      	moveq	r2, r3
 80117f6:	9204      	str	r2, [sp, #16]
    while(txt[line_start] != '\0') {
 80117f8:	1933      	adds	r3, r6, r4
 80117fa:	9307      	str	r3, [sp, #28]
 80117fc:	5d33      	ldrb	r3, [r6, r4]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d14c      	bne.n	801189c <lv_label_get_letter_on+0x10c>
 8011802:	46a0      	mov	r8, r4
    if(ext->align == LV_LABEL_ALIGN_CENTER) {
 8011804:	9b03      	ldr	r3, [sp, #12]
 8011806:	f893 b01a 	ldrb.w	fp, [r3, #26]
 801180a:	f00b 0b06 	and.w	fp, fp, #6
 801180e:	f1bb 0f02 	cmp.w	fp, #2
 8011812:	d15c      	bne.n	80118ce <lv_label_get_letter_on+0x13e>
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start,
 8011814:	eba8 0104 	sub.w	r1, r8, r4
 8011818:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801181c:	464a      	mov	r2, r9
 801181e:	9500      	str	r5, [sp, #0]
 8011820:	b289      	uxth	r1, r1
 8011822:	1930      	adds	r0, r6, r4
 8011824:	f7fc fe90 	bl	800e548 <lv_txt_get_width>
 8011828:	9003      	str	r0, [sp, #12]
        x += lv_obj_get_width(label) / 2 - line_w / 2;
 801182a:	4650      	mov	r0, sl
 801182c:	f7f7 fa4e 	bl	8008ccc <lv_obj_get_width>
 8011830:	9b03      	ldr	r3, [sp, #12]
 8011832:	fb90 f0fb 	sdiv	r0, r0, fp
 8011836:	fb93 fbfb 	sdiv	fp, r3, fp
 801183a:	eba0 0b0b 	sub.w	fp, r0, fp
 801183e:	fa0f fb8b 	sxth.w	fp, fp
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 8011842:	2300      	movs	r3, #0
        letter = lv_txt_encoded_next(txt, &i);    /*Be careful 'i' already points to the next character*/
 8011844:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 80118fc <lv_label_get_letter_on+0x16c>
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8011848:	f005 0501 	and.w	r5, r5, #1
    uint32_t i = line_start;
 801184c:	9409      	str	r4, [sp, #36]	; 0x24
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 801184e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    while(i < new_line_start - 1) {
 8011852:	f108 33ff 	add.w	r3, r8, #4294967295
 8011856:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011858:	4293      	cmp	r3, r2
 801185a:	d916      	bls.n	801188a <lv_label_get_letter_on+0xfa>
        letter = lv_txt_encoded_next(txt, &i);    /*Be careful 'i' already points to the next character*/
 801185c:	f8da 3000 	ldr.w	r3, [sl]
 8011860:	a909      	add	r1, sp, #36	; 0x24
 8011862:	4630      	mov	r0, r6
 8011864:	4798      	blx	r3
 8011866:	4603      	mov	r3, r0
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8011868:	2d00      	cmp	r5, #0
 801186a:	d133      	bne.n	80118d4 <lv_label_get_letter_on+0x144>
        x += lv_font_get_width(font, letter);
 801186c:	4619      	mov	r1, r3
 801186e:	4648      	mov	r0, r9
 8011870:	f7fc f8ae 	bl	800d9d0 <lv_font_get_width>
 8011874:	4483      	add	fp, r0
        if(pos->x < x) {
 8011876:	9b06      	ldr	r3, [sp, #24]
        x += lv_font_get_width(font, letter);
 8011878:	fa1f fb8b 	uxth.w	fp, fp
        if(pos->x < x) {
 801187c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011880:	fa0f f38b 	sxth.w	r3, fp
 8011884:	429a      	cmp	r2, r3
 8011886:	da30      	bge.n	80118ea <lv_label_get_letter_on+0x15a>
            i = i_current;
 8011888:	9409      	str	r4, [sp, #36]	; 0x24
    return lv_encoded_get_char_id(txt, i);
 801188a:	4b1b      	ldr	r3, [pc, #108]	; (80118f8 <lv_label_get_letter_on+0x168>)
 801188c:	4630      	mov	r0, r6
 801188e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	4798      	blx	r3
}
 8011894:	b280      	uxth	r0, r0
 8011896:	b00b      	add	sp, #44	; 0x2c
 8011898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
 801189c:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80118a0:	4649      	mov	r1, r9
 80118a2:	9b04      	ldr	r3, [sp, #16]
 80118a4:	1930      	adds	r0, r6, r4
 80118a6:	9500      	str	r5, [sp, #0]
 80118a8:	f7fc fdc4 	bl	800e434 <lv_txt_get_next_line>
        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 80118ac:	9b06      	ldr	r3, [sp, #24]
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
 80118ae:	eb00 0804 	add.w	r8, r0, r4
        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 80118b2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80118b6:	9b05      	ldr	r3, [sp, #20]
 80118b8:	445b      	add	r3, fp
 80118ba:	429a      	cmp	r2, r3
 80118bc:	dda2      	ble.n	8011804 <lv_label_get_letter_on+0x74>
        y += letter_height + style->text.line_space;
 80118be:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
 80118c0:	4644      	mov	r4, r8
        y += letter_height + style->text.line_space;
 80118c2:	9a05      	ldr	r2, [sp, #20]
 80118c4:	4413      	add	r3, r2
 80118c6:	449b      	add	fp, r3
 80118c8:	fa0f fb8b 	sxth.w	fp, fp
 80118cc:	e794      	b.n	80117f8 <lv_label_get_letter_on+0x68>
    lv_coord_t x = 0;
 80118ce:	f04f 0b00 	mov.w	fp, #0
 80118d2:	e7b6      	b.n	8011842 <lv_label_get_letter_on+0xb2>
            if(lv_txt_is_cmd(&cmd_state, txt[i]) != false) {
 80118d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80118d6:	9003      	str	r0, [sp, #12]
 80118d8:	f10d 0023 	add.w	r0, sp, #35	; 0x23
 80118dc:	5cb1      	ldrb	r1, [r6, r2]
 80118de:	f7fc fd8b 	bl	800e3f8 <lv_txt_is_cmd>
 80118e2:	2800      	cmp	r0, #0
 80118e4:	d1b5      	bne.n	8011852 <lv_label_get_letter_on+0xc2>
 80118e6:	9b03      	ldr	r3, [sp, #12]
 80118e8:	e7c0      	b.n	801186c <lv_label_get_letter_on+0xdc>
        x += style->text.letter_space;
 80118ea:	8e38      	ldrh	r0, [r7, #48]	; 0x30
        i_current = i;
 80118ec:	9c09      	ldr	r4, [sp, #36]	; 0x24
        x += style->text.letter_space;
 80118ee:	4483      	add	fp, r0
 80118f0:	fa0f fb8b 	sxth.w	fp, fp
 80118f4:	e7ad      	b.n	8011852 <lv_label_get_letter_on+0xc2>
 80118f6:	bf00      	nop
 80118f8:	200000a8 	.word	0x200000a8
 80118fc:	200000b0 	.word	0x200000b0

08011900 <lv_label_refr_text>:
{
 8011900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011904:	b093      	sub	sp, #76	; 0x4c
 8011906:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8011908:	f7f7 fab7 	bl	8008e7a <lv_obj_get_ext_attr>
    if(ext->text == NULL) return;
 801190c:	6803      	ldr	r3, [r0, #0]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801190e:	4604      	mov	r4, r0
    if(ext->text == NULL) return;
 8011910:	2b00      	cmp	r3, #0
 8011912:	f000 808d 	beq.w	8011a30 <lv_label_refr_text+0x130>
    lv_coord_t max_w = lv_obj_get_width(label);
 8011916:	4628      	mov	r0, r5
 8011918:	f7f7 f9d8 	bl	8008ccc <lv_obj_get_width>
 801191c:	4680      	mov	r8, r0
    lv_style_t * style = lv_obj_get_style(label);
 801191e:	4628      	mov	r0, r5
 8011920:	f7f7 f9e0 	bl	8008ce4 <lv_obj_get_style>
    if(ext->long_mode == LV_LABEL_LONG_EXPAND ||
 8011924:	7923      	ldrb	r3, [r4, #4]
    const lv_font_t * font = style->text.font;
 8011926:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
    lv_style_t * style = lv_obj_get_style(label);
 8011928:	4606      	mov	r6, r0
        max_w = LV_COORD_MAX;
 801192a:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801192e:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8011932:	bf08      	it	eq
 8011934:	4698      	moveq	r8, r3
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 8011936:	7ea3      	ldrb	r3, [r4, #26]
    lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 8011938:	f3c3 02c0 	ubfx	r2, r3, #3, #1
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 801193c:	06db      	lsls	r3, r3, #27
    lv_txt_get_size(&size, ext->text, font, style->text.letter_space, style->text.line_space, max_w, flag);
 801193e:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	; 0x30
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 8011942:	bf48      	it	mi
 8011944:	f042 0202 	orrmi.w	r2, r2, #2
    lv_txt_get_size(&size, ext->text, font, style->text.letter_space, style->text.line_space, max_w, flag);
 8011948:	f8cd 8004 	str.w	r8, [sp, #4]
 801194c:	9202      	str	r2, [sp, #8]
 801194e:	f9b0 2032 	ldrsh.w	r2, [r0, #50]	; 0x32
 8011952:	a807      	add	r0, sp, #28
 8011954:	9200      	str	r2, [sp, #0]
 8011956:	463a      	mov	r2, r7
 8011958:	6821      	ldr	r1, [r4, #0]
 801195a:	f7fc fe2d 	bl	800e5b8 <lv_txt_get_size>
    if(ext->long_mode == LV_LABEL_LONG_EXPAND || ext->long_mode == LV_LABEL_LONG_SCROLL) {
 801195e:	7923      	ldrb	r3, [r4, #4]
 8011960:	f013 0bfd 	ands.w	fp, r3, #253	; 0xfd
 8011964:	d17f      	bne.n	8011a66 <lv_label_refr_text+0x166>
        lv_obj_set_size(label, size.x, size.y);
 8011966:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 801196a:	4628      	mov	r0, r5
 801196c:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
 8011970:	f7f6 feb3 	bl	80086da <lv_obj_set_size>
        if(ext->long_mode == LV_LABEL_LONG_SCROLL) {
 8011974:	7923      	ldrb	r3, [r4, #4]
 8011976:	2b02      	cmp	r3, #2
 8011978:	d157      	bne.n	8011a2a <lv_label_refr_text+0x12a>
            lv_anim_del(label, (lv_anim_fp_t) lv_obj_set_x);
 801197a:	f8df a2d4 	ldr.w	sl, [pc, #724]	; 8011c50 <lv_label_refr_text+0x350>
            lv_obj_t * parent = lv_obj_get_parent(label);
 801197e:	4628      	mov	r0, r5
            lv_anim_del(label, (lv_anim_fp_t) lv_obj_set_y);
 8011980:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8011c54 <lv_label_refr_text+0x354>
            lv_obj_t * parent = lv_obj_get_parent(label);
 8011984:	f7f7 f91c 	bl	8008bc0 <lv_obj_get_parent>
            lv_anim_del(label, (lv_anim_fp_t) lv_obj_set_x);
 8011988:	4651      	mov	r1, sl
            lv_obj_t * parent = lv_obj_get_parent(label);
 801198a:	4680      	mov	r8, r0
            lv_anim_del(label, (lv_anim_fp_t) lv_obj_set_x);
 801198c:	4628      	mov	r0, r5
 801198e:	f7fb fe75 	bl	800d67c <lv_anim_del>
            lv_anim_del(label, (lv_anim_fp_t) lv_obj_set_y);
 8011992:	4649      	mov	r1, r9
 8011994:	4628      	mov	r0, r5
 8011996:	f7fb fe71 	bl	800d67c <lv_anim_del>
            anim.repeat = 1;
 801199a:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
            anim.start = lv_font_get_width(font, ' ');
 801199e:	2120      	movs	r1, #32
 80119a0:	4638      	mov	r0, r7
            anim.playback = 1;
 80119a2:	f043 0303 	orr.w	r3, r3, #3
            anim.var = label;
 80119a6:	9509      	str	r5, [sp, #36]	; 0x24
            anim.playback = 1;
 80119a8:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
            anim.start = lv_font_get_width(font, ' ');
 80119ac:	f7fc f810 	bl	800d9d0 <lv_font_get_width>
            anim.path = lv_anim_path_linear;
 80119b0:	4ba1      	ldr	r3, [pc, #644]	; (8011c38 <lv_label_refr_text+0x338>)
            anim.playback_pause = (((lv_font_get_width(style->text.font, ' ') +
 80119b2:	2120      	movs	r1, #32
            anim.start = lv_font_get_width(font, ' ');
 80119b4:	900d      	str	r0, [sp, #52]	; 0x34
            anim.playback_pause = (((lv_font_get_width(style->text.font, ' ') +
 80119b6:	6af0      	ldr	r0, [r6, #44]	; 0x2c
            anim.path = lv_anim_path_linear;
 80119b8:	930c      	str	r3, [sp, #48]	; 0x30
            anim.act_time = 0;
 80119ba:	f8ad b03e 	strh.w	fp, [sp, #62]	; 0x3e
            anim.end_cb = NULL;
 80119be:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
            anim.playback_pause = (((lv_font_get_width(style->text.font, ' ') +
 80119c2:	f7fc f805 	bl	800d9d0 <lv_font_get_width>
                                     style->text.letter_space) * 1000) / ext->anim_speed) * ANIM_WAIT_CHAR_COUNT;
 80119c6:	f9b6 3030 	ldrsh.w	r3, [r6, #48]	; 0x30
            anim.playback_pause = (((lv_font_get_width(style->text.font, ' ') +
 80119ca:	4418      	add	r0, r3
                                     style->text.letter_space) * 1000) / ext->anim_speed) * ANIM_WAIT_CHAR_COUNT;
 80119cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80119d0:	4343      	muls	r3, r0
 80119d2:	8aa0      	ldrh	r0, [r4, #20]
 80119d4:	fb93 f3f0 	sdiv	r3, r3, r0
            anim.playback_pause = (((lv_font_get_width(style->text.font, ' ') +
 80119d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
            if(lv_obj_get_width(label) > lv_obj_get_width(parent)) {
 80119dc:	4628      	mov	r0, r5
            anim.playback_pause = (((lv_font_get_width(style->text.font, ' ') +
 80119de:	b29b      	uxth	r3, r3
 80119e0:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            anim.repeat_pause = anim.playback_pause;
 80119e4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            if(lv_obj_get_width(label) > lv_obj_get_width(parent)) {
 80119e8:	f7f7 f970 	bl	8008ccc <lv_obj_get_width>
 80119ec:	4606      	mov	r6, r0
 80119ee:	4640      	mov	r0, r8
 80119f0:	f7f7 f96c 	bl	8008ccc <lv_obj_get_width>
 80119f4:	4286      	cmp	r6, r0
 80119f6:	dd1e      	ble.n	8011a36 <lv_label_refr_text+0x136>
                anim.end = lv_obj_get_width(parent) - lv_obj_get_width(label) - lv_font_get_width(font, ' ');
 80119f8:	4640      	mov	r0, r8
 80119fa:	f7f7 f967 	bl	8008ccc <lv_obj_get_width>
 80119fe:	4606      	mov	r6, r0
 8011a00:	4628      	mov	r0, r5
 8011a02:	f7f7 f963 	bl	8008ccc <lv_obj_get_width>
 8011a06:	1a36      	subs	r6, r6, r0
 8011a08:	2120      	movs	r1, #32
 8011a0a:	4638      	mov	r0, r7
 8011a0c:	f7fb ffe0 	bl	800d9d0 <lv_font_get_width>
 8011a10:	1a32      	subs	r2, r6, r0
                anim.fp = (lv_anim_fp_t) lv_obj_set_x;
 8011a12:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
                anim.end = lv_obj_get_width(parent) - lv_obj_get_width(label) - lv_font_get_width(font, ' ');
 8011a16:	920e      	str	r2, [sp, #56]	; 0x38
            anim.time = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 8011a18:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011a1a:	8aa0      	ldrh	r0, [r4, #20]
 8011a1c:	f7fb fe84 	bl	800d728 <lv_anim_speed_to_time>
 8011a20:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
            lv_anim_create(&anim);
 8011a24:	a809      	add	r0, sp, #36	; 0x24
 8011a26:	f7fb fe57 	bl	800d6d8 <lv_anim_create>
    lv_obj_invalidate(label);
 8011a2a:	4628      	mov	r0, r5
 8011a2c:	f7f6 fc44 	bl	80082b8 <lv_obj_invalidate>
}
 8011a30:	b013      	add	sp, #76	; 0x4c
 8011a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            } else if(lv_obj_get_height(label) > lv_obj_get_height(parent)) {
 8011a36:	4628      	mov	r0, r5
 8011a38:	f7f7 f94e 	bl	8008cd8 <lv_obj_get_height>
 8011a3c:	4606      	mov	r6, r0
 8011a3e:	4640      	mov	r0, r8
 8011a40:	f7f7 f94a 	bl	8008cd8 <lv_obj_get_height>
 8011a44:	4286      	cmp	r6, r0
 8011a46:	ddf0      	ble.n	8011a2a <lv_label_refr_text+0x12a>
                anim.end =  lv_obj_get_height(parent) - lv_obj_get_height(label) - lv_font_get_height(font);
 8011a48:	4640      	mov	r0, r8
 8011a4a:	f7f7 f945 	bl	8008cd8 <lv_obj_get_height>
 8011a4e:	4606      	mov	r6, r0
 8011a50:	4628      	mov	r0, r5
 8011a52:	f7f7 f941 	bl	8008cd8 <lv_obj_get_height>
 8011a56:	f897 2020 	ldrb.w	r2, [r7, #32]
 8011a5a:	1a30      	subs	r0, r6, r0
                anim.fp = (lv_anim_fp_t)lv_obj_set_y;
 8011a5c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
                anim.end =  lv_obj_get_height(parent) - lv_obj_get_height(label) - lv_font_get_height(font);
 8011a60:	1a82      	subs	r2, r0, r2
 8011a62:	920e      	str	r2, [sp, #56]	; 0x38
 8011a64:	e7d8      	b.n	8011a18 <lv_label_refr_text+0x118>
    else if(ext->long_mode == LV_LABEL_LONG_ROLL) {
 8011a66:	2b04      	cmp	r3, #4
 8011a68:	d16a      	bne.n	8011b40 <lv_label_refr_text+0x240>
        anim.repeat = 1;
 8011a6a:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
        anim.start = lv_font_get_width(font, ' ');
 8011a6e:	2120      	movs	r1, #32
 8011a70:	4638      	mov	r0, r7
        anim.act_time = 0;
 8011a72:	f04f 0800 	mov.w	r8, #0
        anim.playback = 1;
 8011a76:	f043 0303 	orr.w	r3, r3, #3
        anim.var = label;
 8011a7a:	9509      	str	r5, [sp, #36]	; 0x24
        anim.playback = 1;
 8011a7c:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
        anim.start = lv_font_get_width(font, ' ');
 8011a80:	f7fb ffa6 	bl	800d9d0 <lv_font_get_width>
        anim.path = lv_anim_path_linear;
 8011a84:	4b6c      	ldr	r3, [pc, #432]	; (8011c38 <lv_label_refr_text+0x338>)
        anim.playback_pause = (((lv_font_get_width(style->text.font, ' ') + style->text.letter_space) * 1000) / ext->anim_speed) * ANIM_WAIT_CHAR_COUNT;;
 8011a86:	2120      	movs	r1, #32
        anim.start = lv_font_get_width(font, ' ');
 8011a88:	900d      	str	r0, [sp, #52]	; 0x34
        anim.playback_pause = (((lv_font_get_width(style->text.font, ' ') + style->text.letter_space) * 1000) / ext->anim_speed) * ANIM_WAIT_CHAR_COUNT;;
 8011a8a:	6af0      	ldr	r0, [r6, #44]	; 0x2c
        anim.path = lv_anim_path_linear;
 8011a8c:	930c      	str	r3, [sp, #48]	; 0x30
        anim.act_time = 0;
 8011a8e:	f8ad 803e 	strh.w	r8, [sp, #62]	; 0x3e
        anim.end_cb = NULL;
 8011a92:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
        anim.playback_pause = (((lv_font_get_width(style->text.font, ' ') + style->text.letter_space) * 1000) / ext->anim_speed) * ANIM_WAIT_CHAR_COUNT;;
 8011a96:	f7fb ff9b 	bl	800d9d0 <lv_font_get_width>
 8011a9a:	f9b6 3030 	ldrsh.w	r3, [r6, #48]	; 0x30
        if(size.x > lv_obj_get_width(label)) {
 8011a9e:	f9bd 601c 	ldrsh.w	r6, [sp, #28]
        anim.playback_pause = (((lv_font_get_width(style->text.font, ' ') + style->text.letter_space) * 1000) / ext->anim_speed) * ANIM_WAIT_CHAR_COUNT;;
 8011aa2:	4418      	add	r0, r3
 8011aa4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011aa8:	4343      	muls	r3, r0
 8011aaa:	8aa0      	ldrh	r0, [r4, #20]
 8011aac:	fb93 f3f0 	sdiv	r3, r3, r0
 8011ab0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
        if(size.x > lv_obj_get_width(label)) {
 8011ab4:	4628      	mov	r0, r5
        anim.playback_pause = (((lv_font_get_width(style->text.font, ' ') + style->text.letter_space) * 1000) / ext->anim_speed) * ANIM_WAIT_CHAR_COUNT;;
 8011ab6:	b29b      	uxth	r3, r3
 8011ab8:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        anim.repeat_pause =  anim.playback_pause;
 8011abc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        if(size.x > lv_obj_get_width(label)) {
 8011ac0:	f7f7 f904 	bl	8008ccc <lv_obj_get_width>
 8011ac4:	4286      	cmp	r6, r0
 8011ac6:	dd2c      	ble.n	8011b22 <lv_label_refr_text+0x222>
            anim.end = lv_obj_get_width(label) - size.x - lv_font_get_width(font, ' ');
 8011ac8:	4628      	mov	r0, r5
 8011aca:	f7f7 f8ff 	bl	8008ccc <lv_obj_get_width>
 8011ace:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8011ad2:	2120      	movs	r1, #32
 8011ad4:	1a86      	subs	r6, r0, r2
 8011ad6:	4638      	mov	r0, r7
 8011ad8:	f7fb ff7a 	bl	800d9d0 <lv_font_get_width>
            anim.fp = (lv_anim_fp_t) lv_label_set_offset_x;
 8011adc:	4b57      	ldr	r3, [pc, #348]	; (8011c3c <lv_label_refr_text+0x33c>)
            anim.end = lv_obj_get_width(label) - size.x - lv_font_get_width(font, ' ');
 8011ade:	1a32      	subs	r2, r6, r0
            anim.time = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 8011ae0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011ae2:	8aa0      	ldrh	r0, [r4, #20]
            hor_anim = true;
 8011ae4:	2601      	movs	r6, #1
            anim.end = lv_obj_get_width(label) - size.x - lv_font_get_width(font, ' ');
 8011ae6:	920e      	str	r2, [sp, #56]	; 0x38
            anim.fp = (lv_anim_fp_t) lv_label_set_offset_x;
 8011ae8:	930a      	str	r3, [sp, #40]	; 0x28
            anim.time = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 8011aea:	f7fb fe1d 	bl	800d728 <lv_anim_speed_to_time>
 8011aee:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
            lv_anim_create(&anim);
 8011af2:	a809      	add	r0, sp, #36	; 0x24
 8011af4:	f7fb fdf0 	bl	800d6d8 <lv_anim_create>
        if(size.y > lv_obj_get_height(label) && hor_anim == false) {
 8011af8:	f9bd 801e 	ldrsh.w	r8, [sp, #30]
 8011afc:	4628      	mov	r0, r5
 8011afe:	f7f7 f8eb 	bl	8008cd8 <lv_obj_get_height>
 8011b02:	4580      	cmp	r8, r0
 8011b04:	dd15      	ble.n	8011b32 <lv_label_refr_text+0x232>
 8011b06:	b9a6      	cbnz	r6, 8011b32 <lv_label_refr_text+0x232>
            anim.end =  lv_obj_get_height(label) - size.y - (lv_font_get_height(font));
 8011b08:	4628      	mov	r0, r5
 8011b0a:	f7f7 f8e5 	bl	8008cd8 <lv_obj_get_height>
 8011b0e:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
            anim.fp = (lv_anim_fp_t)lv_label_set_offset_y;
 8011b12:	4b4b      	ldr	r3, [pc, #300]	; (8011c40 <lv_label_refr_text+0x340>)
            anim.end =  lv_obj_get_height(label) - size.y - (lv_font_get_height(font));
 8011b14:	1a82      	subs	r2, r0, r2
 8011b16:	f897 0020 	ldrb.w	r0, [r7, #32]
            anim.fp = (lv_anim_fp_t)lv_label_set_offset_y;
 8011b1a:	930a      	str	r3, [sp, #40]	; 0x28
            anim.end =  lv_obj_get_height(label) - size.y - (lv_font_get_height(font));
 8011b1c:	1a12      	subs	r2, r2, r0
 8011b1e:	920e      	str	r2, [sp, #56]	; 0x38
 8011b20:	e77a      	b.n	8011a18 <lv_label_refr_text+0x118>
            lv_anim_del(label, (lv_anim_fp_t) lv_label_set_offset_x);
 8011b22:	4946      	ldr	r1, [pc, #280]	; (8011c3c <lv_label_refr_text+0x33c>)
 8011b24:	4628      	mov	r0, r5
 8011b26:	f7fb fda9 	bl	800d67c <lv_anim_del>
        bool hor_anim = false;
 8011b2a:	4646      	mov	r6, r8
            ext->offset.x = 0;
 8011b2c:	f8a4 8016 	strh.w	r8, [r4, #22]
 8011b30:	e7e2      	b.n	8011af8 <lv_label_refr_text+0x1f8>
            lv_anim_del(label, (lv_anim_fp_t) lv_label_set_offset_y);
 8011b32:	4943      	ldr	r1, [pc, #268]	; (8011c40 <lv_label_refr_text+0x340>)
 8011b34:	4628      	mov	r0, r5
 8011b36:	f7fb fda1 	bl	800d67c <lv_anim_del>
            ext->offset.y = 0;
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	8323      	strh	r3, [r4, #24]
 8011b3e:	e774      	b.n	8011a2a <lv_label_refr_text+0x12a>
    } else if(ext->long_mode == LV_LABEL_LONG_DOT) {
 8011b40:	2b03      	cmp	r3, #3
 8011b42:	d16f      	bne.n	8011c24 <lv_label_refr_text+0x324>
        if(size.y <= lv_obj_get_height(label)) {                /*No dots are required, the text is short enough*/
 8011b44:	f9bd 701e 	ldrsh.w	r7, [sp, #30]
 8011b48:	4628      	mov	r0, r5
 8011b4a:	f7f7 f8c5 	bl	8008cd8 <lv_obj_get_height>
 8011b4e:	4287      	cmp	r7, r0
 8011b50:	dc03      	bgt.n	8011b5a <lv_label_refr_text+0x25a>
            ext->dot_end = LV_LABEL_DOT_END_INV;
 8011b52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011b56:	8263      	strh	r3, [r4, #18]
 8011b58:	e767      	b.n	8011a2a <lv_label_refr_text+0x12a>
        } else if(lv_txt_get_encoded_length(ext->text) <= LV_LABEL_DOT_NUM) {     /*Don't turn to dots all the characters*/
 8011b5a:	4b3a      	ldr	r3, [pc, #232]	; (8011c44 <lv_label_refr_text+0x344>)
 8011b5c:	6820      	ldr	r0, [r4, #0]
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	4798      	blx	r3
 8011b62:	2803      	cmp	r0, #3
 8011b64:	d9f5      	bls.n	8011b52 <lv_label_refr_text+0x252>
            p.x = lv_obj_get_width(label) - (lv_font_get_width(style->text.font, '.') + style->text.letter_space) * LV_LABEL_DOT_NUM; /*Shrink with dots*/
 8011b66:	4628      	mov	r0, r5
            uint32_t byte_id = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 8011b68:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
            p.x = lv_obj_get_width(label) - (lv_font_get_width(style->text.font, '.') + style->text.letter_space) * LV_LABEL_DOT_NUM; /*Shrink with dots*/
 8011b6c:	f7f7 f8ae 	bl	8008ccc <lv_obj_get_width>
 8011b70:	212e      	movs	r1, #46	; 0x2e
 8011b72:	4607      	mov	r7, r0
 8011b74:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8011b76:	f7fb ff2b 	bl	800d9d0 <lv_font_get_width>
 8011b7a:	f9b6 3030 	ldrsh.w	r3, [r6, #48]	; 0x30
                lv_txt_encoded_next(ext->text, &byte_id);
 8011b7e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8011c58 <lv_label_refr_text+0x358>
            p.x = lv_obj_get_width(label) - (lv_font_get_width(style->text.font, '.') + style->text.letter_space) * LV_LABEL_DOT_NUM; /*Shrink with dots*/
 8011b82:	4418      	add	r0, r3
 8011b84:	ebc0 3380 	rsb	r3, r0, r0, lsl #14
 8011b88:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8011b8c:	4438      	add	r0, r7
            uint8_t len = 0;
 8011b8e:	2700      	movs	r7, #0
            p.x = lv_obj_get_width(label) - (lv_font_get_width(style->text.font, '.') + style->text.letter_space) * LV_LABEL_DOT_NUM; /*Shrink with dots*/
 8011b90:	f8ad 0020 	strh.w	r0, [sp, #32]
            p.y = lv_obj_get_height(label);
 8011b94:	4628      	mov	r0, r5
 8011b96:	f7f7 f89f 	bl	8008cd8 <lv_obj_get_height>
 8011b9a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
            p.y -= p.y  % (lv_font_get_height(style->text.font) + style->text.line_space);   /*Round down to the last line*/
 8011b9c:	f9b6 1032 	ldrsh.w	r1, [r6, #50]	; 0x32
            uint32_t byte_id = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 8011ba0:	2604      	movs	r6, #4
            p.y -= p.y  % (lv_font_get_height(style->text.font) + style->text.line_space);   /*Round down to the last line*/
 8011ba2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011ba6:	440b      	add	r3, r1
 8011ba8:	fb90 f2f3 	sdiv	r2, r0, r3
 8011bac:	fb03 0312 	mls	r3, r3, r2, r0
 8011bb0:	1ac0      	subs	r0, r0, r3
            p.y -= style->text.line_space;                                                      /*Trim the last line space*/
 8011bb2:	1a40      	subs	r0, r0, r1
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 8011bb4:	a908      	add	r1, sp, #32
            p.y -= style->text.line_space;                                                      /*Trim the last line space*/
 8011bb6:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 8011bba:	4628      	mov	r0, r5
 8011bbc:	f7ff fde8 	bl	8011790 <lv_label_get_letter_on>
            uint32_t byte_id = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 8011bc0:	4b21      	ldr	r3, [pc, #132]	; (8011c48 <lv_label_refr_text+0x348>)
 8011bc2:	4601      	mov	r1, r0
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 8011bc4:	4680      	mov	r8, r0
            uint32_t byte_id = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	6820      	ldr	r0, [r4, #0]
 8011bca:	4798      	blx	r3
                len += lv_txt_encoded_size(&ext->text[byte_id]);
 8011bcc:	4a1f      	ldr	r2, [pc, #124]	; (8011c4c <lv_label_refr_text+0x34c>)
            uint32_t byte_id = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 8011bce:	4681      	mov	r9, r0
 8011bd0:	f84b 0d24 	str.w	r0, [fp, #-36]!
                len += lv_txt_encoded_size(&ext->text[byte_id]);
 8011bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bd6:	6820      	ldr	r0, [r4, #0]
 8011bd8:	9205      	str	r2, [sp, #20]
 8011bda:	4418      	add	r0, r3
 8011bdc:	6813      	ldr	r3, [r2, #0]
 8011bde:	4798      	blx	r3
                lv_txt_encoded_next(ext->text, &byte_id);
 8011be0:	4659      	mov	r1, fp
                len += lv_txt_encoded_size(&ext->text[byte_id]);
 8011be2:	4407      	add	r7, r0
                lv_txt_encoded_next(ext->text, &byte_id);
 8011be4:	f8da 3000 	ldr.w	r3, [sl]
 8011be8:	6820      	ldr	r0, [r4, #0]
 8011bea:	4798      	blx	r3
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++)  {
 8011bec:	3e01      	subs	r6, #1
                len += lv_txt_encoded_size(&ext->text[byte_id]);
 8011bee:	b2ff      	uxtb	r7, r7
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++)  {
 8011bf0:	9a05      	ldr	r2, [sp, #20]
 8011bf2:	d1ef      	bne.n	8011bd4 <lv_label_refr_text+0x2d4>
            memcpy(ext->dot_tmp, &ext->text[byte_id_ori], len);
 8011bf4:	6821      	ldr	r1, [r4, #0]
 8011bf6:	463a      	mov	r2, r7
 8011bf8:	1d60      	adds	r0, r4, #5
            ext->dot_tmp[len] = '\0';       /*Close with a zero*/
 8011bfa:	4427      	add	r7, r4
            memcpy(ext->dot_tmp, &ext->text[byte_id_ori], len);
 8011bfc:	4449      	add	r1, r9
 8011bfe:	f003 ff8d 	bl	8015b1c <memcpy>
                ext->text[byte_id_ori + i] = '.';
 8011c02:	222e      	movs	r2, #46	; 0x2e
            ext->dot_tmp[len] = '\0';       /*Close with a zero*/
 8011c04:	717e      	strb	r6, [r7, #5]
                ext->text[byte_id_ori + i] = '.';
 8011c06:	6823      	ldr	r3, [r4, #0]
 8011c08:	444b      	add	r3, r9
 8011c0a:	559a      	strb	r2, [r3, r6]
            for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
 8011c0c:	3601      	adds	r6, #1
 8011c0e:	2e03      	cmp	r6, #3
 8011c10:	d1f9      	bne.n	8011c06 <lv_label_refr_text+0x306>
            ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 8011c12:	6823      	ldr	r3, [r4, #0]
 8011c14:	2200      	movs	r2, #0
            ext->dot_end = letter_id + LV_LABEL_DOT_NUM;
 8011c16:	f108 0803 	add.w	r8, r8, #3
            ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 8011c1a:	444b      	add	r3, r9
 8011c1c:	70da      	strb	r2, [r3, #3]
            ext->dot_end = letter_id + LV_LABEL_DOT_NUM;
 8011c1e:	f8a4 8012 	strh.w	r8, [r4, #18]
 8011c22:	e702      	b.n	8011a2a <lv_label_refr_text+0x12a>
    else if(ext->long_mode == LV_LABEL_LONG_BREAK) {
 8011c24:	2b01      	cmp	r3, #1
 8011c26:	f47f af00 	bne.w	8011a2a <lv_label_refr_text+0x12a>
        lv_obj_set_height(label, size.y);
 8011c2a:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8011c2e:	4628      	mov	r0, r5
 8011c30:	f7f6 fd8d 	bl	800874e <lv_obj_set_height>
 8011c34:	e6f9      	b.n	8011a2a <lv_label_refr_text+0x12a>
 8011c36:	bf00      	nop
 8011c38:	0800d751 	.word	0x0800d751
 8011c3c:	08011417 	.word	0x08011417
 8011c40:	08011401 	.word	0x08011401
 8011c44:	200000bc 	.word	0x200000bc
 8011c48:	200000ac 	.word	0x200000ac
 8011c4c:	200000b8 	.word	0x200000b8
 8011c50:	080086b7 	.word	0x080086b7
 8011c54:	080086cb 	.word	0x080086cb
 8011c58:	200000b0 	.word	0x200000b0

08011c5c <lv_label_signal>:
    res = ancestor_signal(label, sign, param);
 8011c5c:	4b32      	ldr	r3, [pc, #200]	; (8011d28 <lv_label_signal+0xcc>)
{
 8011c5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = ancestor_signal(label, sign, param);
 8011c62:	681b      	ldr	r3, [r3, #0]
{
 8011c64:	4604      	mov	r4, r0
 8011c66:	460f      	mov	r7, r1
 8011c68:	4616      	mov	r6, r2
    res = ancestor_signal(label, sign, param);
 8011c6a:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8011c6c:	2801      	cmp	r0, #1
    res = ancestor_signal(label, sign, param);
 8011c6e:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 8011c70:	d10d      	bne.n	8011c8e <lv_label_signal+0x32>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8011c72:	4620      	mov	r0, r4
 8011c74:	f7f7 f901 	bl	8008e7a <lv_obj_get_ext_attr>
 8011c78:	4680      	mov	r8, r0
    if(sign ==  LV_SIGNAL_CLEANUP) {
 8011c7a:	b95f      	cbnz	r7, 8011c94 <lv_label_signal+0x38>
        if(ext->static_txt == 0) {
 8011c7c:	7e83      	ldrb	r3, [r0, #26]
 8011c7e:	f013 0401 	ands.w	r4, r3, #1
 8011c82:	d104      	bne.n	8011c8e <lv_label_signal+0x32>
            lv_mem_free(ext->text);
 8011c84:	6800      	ldr	r0, [r0, #0]
 8011c86:	f7fc f903 	bl	800de90 <lv_mem_free>
            ext->text = NULL;
 8011c8a:	f8c8 4000 	str.w	r4, [r8]
}
 8011c8e:	4628      	mov	r0, r5
 8011c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 8011c94:	2f03      	cmp	r7, #3
 8011c96:	d106      	bne.n	8011ca6 <lv_label_signal+0x4a>
        lv_label_revert_dots(label);
 8011c98:	4620      	mov	r0, r4
 8011c9a:	f7ff fb8f 	bl	80113bc <lv_label_revert_dots>
        lv_label_refr_text(label);
 8011c9e:	4620      	mov	r0, r4
 8011ca0:	f7ff fe2e 	bl	8011900 <lv_label_refr_text>
 8011ca4:	e7f3      	b.n	8011c8e <lv_label_signal+0x32>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 8011ca6:	2f02      	cmp	r7, #2
 8011ca8:	d118      	bne.n	8011cdc <lv_label_signal+0x80>
    return area_p->x2 - area_p->x1 + 1;
 8011caa:	8aa2      	ldrh	r2, [r4, #20]
 8011cac:	8a23      	ldrh	r3, [r4, #16]
 8011cae:	3201      	adds	r2, #1
 8011cb0:	8831      	ldrh	r1, [r6, #0]
 8011cb2:	1ad2      	subs	r2, r2, r3
 8011cb4:	88b3      	ldrh	r3, [r6, #4]
 8011cb6:	3301      	adds	r3, #1
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
 8011cb8:	b292      	uxth	r2, r2
 8011cba:	1a5b      	subs	r3, r3, r1
 8011cbc:	b29b      	uxth	r3, r3
 8011cbe:	429a      	cmp	r2, r3
 8011cc0:	d1ea      	bne.n	8011c98 <lv_label_signal+0x3c>
    return area_p->y2 - area_p->y1 + 1;
 8011cc2:	8ae2      	ldrh	r2, [r4, #22]
 8011cc4:	8a63      	ldrh	r3, [r4, #18]
 8011cc6:	3201      	adds	r2, #1
 8011cc8:	8871      	ldrh	r1, [r6, #2]
 8011cca:	1ad2      	subs	r2, r2, r3
 8011ccc:	88f3      	ldrh	r3, [r6, #6]
 8011cce:	3301      	adds	r3, #1
 8011cd0:	b292      	uxth	r2, r2
 8011cd2:	1a5b      	subs	r3, r3, r1
 8011cd4:	b29b      	uxth	r3, r3
 8011cd6:	429a      	cmp	r2, r3
 8011cd8:	d1de      	bne.n	8011c98 <lv_label_signal+0x3c>
 8011cda:	e7d8      	b.n	8011c8e <lv_label_signal+0x32>
    } else if(sign == LV_SIGNAL_REFR_EXT_SIZE) {
 8011cdc:	2f04      	cmp	r7, #4
 8011cde:	d113      	bne.n	8011d08 <lv_label_signal+0xac>
        if(ext->body_draw) {
 8011ce0:	7e83      	ldrb	r3, [r0, #26]
 8011ce2:	069b      	lsls	r3, r3, #26
 8011ce4:	d5d3      	bpl.n	8011c8e <lv_label_signal+0x32>
 * @param label pointer to an label object
 * @return pointer to the label's style
 */
static inline lv_style_t* lv_label_get_style(const lv_obj_t *label)
{
    return lv_obj_get_style(label);
 8011ce6:	4620      	mov	r0, r4
 8011ce8:	f7f6 fffc 	bl	8008ce4 <lv_obj_get_style>
            label->ext_size = LV_MATH_MAX(label->ext_size, style->body.padding.ver);
 8011cec:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8011cf0:	f9b0 2020 	ldrsh.w	r2, [r0, #32]
 8011cf4:	4293      	cmp	r3, r2
 8011cf6:	bfb8      	it	lt
 8011cf8:	4613      	movlt	r3, r2
 8011cfa:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8011cfe:	4293      	cmp	r3, r2
 8011d00:	bfb8      	it	lt
 8011d02:	4613      	movlt	r3, r2
 8011d04:	86a3      	strh	r3, [r4, #52]	; 0x34
 8011d06:	e7c2      	b.n	8011c8e <lv_label_signal+0x32>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8011d08:	2f05      	cmp	r7, #5
 8011d0a:	d1c0      	bne.n	8011c8e <lv_label_signal+0x32>
 8011d0c:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 8011d0e:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8011d12:	b2da      	uxtb	r2, r3
 8011d14:	b119      	cbz	r1, 8011d1e <lv_label_signal+0xc2>
 8011d16:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) {  /*Find the last set data*/
 8011d18:	2b07      	cmp	r3, #7
 8011d1a:	d1f8      	bne.n	8011d0e <lv_label_signal+0xb2>
 8011d1c:	461a      	mov	r2, r3
        buf->type[i] = "lv_label";
 8011d1e:	4b03      	ldr	r3, [pc, #12]	; (8011d2c <lv_label_signal+0xd0>)
 8011d20:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
 8011d24:	e7b3      	b.n	8011c8e <lv_label_signal+0x32>
 8011d26:	bf00      	nop
 8011d28:	20017418 	.word	0x20017418
 8011d2c:	08087fcc 	.word	0x08087fcc

08011d30 <lv_label_set_text>:
{
 8011d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d34:	4680      	mov	r8, r0
 8011d36:	460d      	mov	r5, r1
    lv_obj_invalidate(label);
 8011d38:	f7f6 fabe 	bl	80082b8 <lv_obj_invalidate>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8011d3c:	4640      	mov	r0, r8
 8011d3e:	f7f7 f89c 	bl	8008e7a <lv_obj_get_ext_attr>
 8011d42:	4604      	mov	r4, r0
    if(text == NULL) {
 8011d44:	b925      	cbnz	r5, 8011d50 <lv_label_set_text+0x20>
        lv_label_refr_text(label);
 8011d46:	4640      	mov	r0, r8
}
 8011d48:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        lv_label_refr_text(label);
 8011d4c:	f7ff bdd8 	b.w	8011900 <lv_label_refr_text>
    if(ext->text == text) {
 8011d50:	6807      	ldr	r7, [r0, #0]
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
 8011d52:	4628      	mov	r0, r5
    if(ext->text == text) {
 8011d54:	42bd      	cmp	r5, r7
 8011d56:	d109      	bne.n	8011d6c <lv_label_set_text+0x3c>
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
 8011d58:	f7ee fa60 	bl	800021c <strlen>
 8011d5c:	1c41      	adds	r1, r0, #1
 8011d5e:	4628      	mov	r0, r5
 8011d60:	f7fc f8fa 	bl	800df58 <lv_mem_realloc>
 8011d64:	6020      	str	r0, [r4, #0]
        lv_mem_assert(ext->text);
 8011d66:	2800      	cmp	r0, #0
 8011d68:	d1ed      	bne.n	8011d46 <lv_label_set_text+0x16>
 8011d6a:	e7fe      	b.n	8011d6a <lv_label_set_text+0x3a>
        uint32_t len = strlen(text) + 1;
 8011d6c:	f7ee fa56 	bl	800021c <strlen>
 8011d70:	f100 0901 	add.w	r9, r0, #1
        if(ext->text != NULL && ext->static_txt == 0) {
 8011d74:	b13f      	cbz	r7, 8011d86 <lv_label_set_text+0x56>
 8011d76:	7ea3      	ldrb	r3, [r4, #26]
 8011d78:	f013 0601 	ands.w	r6, r3, #1
 8011d7c:	d103      	bne.n	8011d86 <lv_label_set_text+0x56>
            lv_mem_free(ext->text);
 8011d7e:	4638      	mov	r0, r7
 8011d80:	f7fc f886 	bl	800de90 <lv_mem_free>
            ext->text = NULL;
 8011d84:	6026      	str	r6, [r4, #0]
        ext->text = lv_mem_alloc(len);
 8011d86:	4648      	mov	r0, r9
 8011d88:	f7fc f85e 	bl	800de48 <lv_mem_alloc>
 8011d8c:	6020      	str	r0, [r4, #0]
        lv_mem_assert(ext->text);
 8011d8e:	b900      	cbnz	r0, 8011d92 <lv_label_set_text+0x62>
 8011d90:	e7fe      	b.n	8011d90 <lv_label_set_text+0x60>
        strcpy(ext->text, text);
 8011d92:	4629      	mov	r1, r5
 8011d94:	f003 fed5 	bl	8015b42 <strcpy>
        ext->static_txt = 0;    /*Now the text is dynamically allocated*/
 8011d98:	7ea3      	ldrb	r3, [r4, #26]
 8011d9a:	f36f 0300 	bfc	r3, #0, #1
 8011d9e:	76a3      	strb	r3, [r4, #26]
 8011da0:	e7d1      	b.n	8011d46 <lv_label_set_text+0x16>

08011da2 <lv_label_set_static_text>:
{
 8011da2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011da4:	4607      	mov	r7, r0
 8011da6:	460e      	mov	r6, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8011da8:	f7f7 f867 	bl	8008e7a <lv_obj_get_ext_attr>
    if(ext->static_txt == 0 && ext->text != NULL) {
 8011dac:	7e83      	ldrb	r3, [r0, #26]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8011dae:	4604      	mov	r4, r0
    if(ext->static_txt == 0 && ext->text != NULL) {
 8011db0:	f013 0501 	ands.w	r5, r3, #1
 8011db4:	d104      	bne.n	8011dc0 <lv_label_set_static_text+0x1e>
 8011db6:	6800      	ldr	r0, [r0, #0]
 8011db8:	b110      	cbz	r0, 8011dc0 <lv_label_set_static_text+0x1e>
        lv_mem_free(ext->text);
 8011dba:	f7fc f869 	bl	800de90 <lv_mem_free>
        ext->text = NULL;
 8011dbe:	6025      	str	r5, [r4, #0]
    if(text != NULL) {
 8011dc0:	b126      	cbz	r6, 8011dcc <lv_label_set_static_text+0x2a>
        ext->static_txt = 1;
 8011dc2:	7ea3      	ldrb	r3, [r4, #26]
        ext->text = (char *) text;
 8011dc4:	6026      	str	r6, [r4, #0]
        ext->static_txt = 1;
 8011dc6:	f043 0301 	orr.w	r3, r3, #1
 8011dca:	76a3      	strb	r3, [r4, #26]
    lv_label_refr_text(label);
 8011dcc:	4638      	mov	r0, r7
}
 8011dce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_label_refr_text(label);
 8011dd2:	f7ff bd95 	b.w	8011900 <lv_label_refr_text>
	...

08011dd8 <lv_label_set_long_mode>:
{
 8011dd8:	b570      	push	{r4, r5, r6, lr}
 8011dda:	4605      	mov	r5, r0
 8011ddc:	460e      	mov	r6, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8011dde:	f7f7 f84c 	bl	8008e7a <lv_obj_get_ext_attr>
    lv_anim_del(label, (lv_anim_fp_t) lv_obj_set_x);
 8011de2:	4917      	ldr	r1, [pc, #92]	; (8011e40 <lv_label_set_long_mode+0x68>)
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8011de4:	4604      	mov	r4, r0
    lv_anim_del(label, (lv_anim_fp_t) lv_obj_set_x);
 8011de6:	4628      	mov	r0, r5
 8011de8:	f7fb fc48 	bl	800d67c <lv_anim_del>
    lv_anim_del(label, (lv_anim_fp_t) lv_obj_set_y);
 8011dec:	4915      	ldr	r1, [pc, #84]	; (8011e44 <lv_label_set_long_mode+0x6c>)
 8011dee:	4628      	mov	r0, r5
 8011df0:	f7fb fc44 	bl	800d67c <lv_anim_del>
    lv_anim_del(label, (lv_anim_fp_t) lv_label_set_offset_x);
 8011df4:	4914      	ldr	r1, [pc, #80]	; (8011e48 <lv_label_set_long_mode+0x70>)
 8011df6:	4628      	mov	r0, r5
 8011df8:	f7fb fc40 	bl	800d67c <lv_anim_del>
    lv_anim_del(label, (lv_anim_fp_t) lv_label_set_offset_y);
 8011dfc:	4913      	ldr	r1, [pc, #76]	; (8011e4c <lv_label_set_long_mode+0x74>)
 8011dfe:	4628      	mov	r0, r5
 8011e00:	f7fb fc3c 	bl	800d67c <lv_anim_del>
    if(long_mode == LV_LABEL_LONG_ROLL || long_mode == LV_LABEL_LONG_CROP) ext->expand = 1;
 8011e04:	1f33      	subs	r3, r6, #4
    ext->offset.x = 0;
 8011e06:	2200      	movs	r2, #0
    if(long_mode == LV_LABEL_LONG_ROLL || long_mode == LV_LABEL_LONG_CROP) ext->expand = 1;
 8011e08:	2b01      	cmp	r3, #1
 8011e0a:	7ea3      	ldrb	r3, [r4, #26]
    ext->offset.x = 0;
 8011e0c:	82e2      	strh	r2, [r4, #22]
    if(long_mode == LV_LABEL_LONG_ROLL || long_mode == LV_LABEL_LONG_CROP) ext->expand = 1;
 8011e0e:	bf94      	ite	ls
 8011e10:	f043 0310 	orrls.w	r3, r3, #16
    else ext->expand = 0;
 8011e14:	f362 1304 	bfihi	r3, r2, #4, #1
    ext->offset.y = 0;
 8011e18:	8322      	strh	r2, [r4, #24]
    else ext->expand = 0;
 8011e1a:	76a3      	strb	r3, [r4, #26]
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
 8011e1c:	7923      	ldrb	r3, [r4, #4]
 8011e1e:	2b03      	cmp	r3, #3
 8011e20:	d107      	bne.n	8011e32 <lv_label_set_long_mode+0x5a>
 8011e22:	8a62      	ldrh	r2, [r4, #18]
 8011e24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011e28:	429a      	cmp	r2, r3
 8011e2a:	d002      	beq.n	8011e32 <lv_label_set_long_mode+0x5a>
        lv_label_revert_dots(label);
 8011e2c:	4628      	mov	r0, r5
 8011e2e:	f7ff fac5 	bl	80113bc <lv_label_revert_dots>
    ext->long_mode = long_mode;
 8011e32:	7126      	strb	r6, [r4, #4]
    lv_label_refr_text(label);
 8011e34:	4628      	mov	r0, r5
}
 8011e36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_label_refr_text(label);
 8011e3a:	f7ff bd61 	b.w	8011900 <lv_label_refr_text>
 8011e3e:	bf00      	nop
 8011e40:	080086b7 	.word	0x080086b7
 8011e44:	080086cb 	.word	0x080086cb
 8011e48:	08011417 	.word	0x08011417
 8011e4c:	08011401 	.word	0x08011401

08011e50 <lv_label_set_recolor>:
{
 8011e50:	b538      	push	{r3, r4, r5, lr}
 8011e52:	460c      	mov	r4, r1
 8011e54:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8011e56:	f7f7 f810 	bl	8008e7a <lv_obj_get_ext_attr>
    if(ext->recolor == recolor_en) return;
 8011e5a:	7e83      	ldrb	r3, [r0, #26]
 8011e5c:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8011e60:	42a2      	cmp	r2, r4
 8011e62:	d007      	beq.n	8011e74 <lv_label_set_recolor+0x24>
    ext->recolor = recolor_en == false ? 0 : 1;
 8011e64:	f364 03c3 	bfi	r3, r4, #3, #1
 8011e68:	7683      	strb	r3, [r0, #26]
    lv_label_refr_text(label);  /*Refresh the text because the potential colo codes in text needs to be hided or revealed*/
 8011e6a:	4628      	mov	r0, r5
}
 8011e6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_label_refr_text(label);  /*Refresh the text because the potential colo codes in text needs to be hided or revealed*/
 8011e70:	f7ff bd46 	b.w	8011900 <lv_label_refr_text>
 8011e74:	bd38      	pop	{r3, r4, r5, pc}
	...

08011e78 <lv_label_create>:
{
 8011e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e7c:	460e      	mov	r6, r1
    lv_obj_t * new_label = lv_obj_create(par, copy);
 8011e7e:	f7f6 faf9 	bl	8008474 <lv_obj_create>
    lv_mem_assert(new_label);
 8011e82:	4604      	mov	r4, r0
 8011e84:	b900      	cbnz	r0, 8011e88 <lv_label_create+0x10>
 8011e86:	e7fe      	b.n	8011e86 <lv_label_create+0xe>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_label);
 8011e88:	4d4b      	ldr	r5, [pc, #300]	; (8011fb8 <lv_label_create+0x140>)
 8011e8a:	682b      	ldr	r3, [r5, #0]
 8011e8c:	b913      	cbnz	r3, 8011e94 <lv_label_create+0x1c>
 8011e8e:	f7f6 fff0 	bl	8008e72 <lv_obj_get_signal_func>
 8011e92:	6028      	str	r0, [r5, #0]
    lv_obj_allocate_ext_attr(new_label, sizeof(lv_label_ext_t));
 8011e94:	211c      	movs	r1, #28
 8011e96:	4620      	mov	r0, r4
 8011e98:	f7f6 fdf2 	bl	8008a80 <lv_obj_allocate_ext_attr>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(new_label);
 8011e9c:	4620      	mov	r0, r4
 8011e9e:	f7f6 ffec 	bl	8008e7a <lv_obj_get_ext_attr>
    lv_mem_assert(ext);
 8011ea2:	4605      	mov	r5, r0
 8011ea4:	b900      	cbnz	r0, 8011ea8 <lv_label_create+0x30>
 8011ea6:	e7fe      	b.n	8011ea6 <lv_label_create+0x2e>
    ext->static_txt = 0;
 8011ea8:	7e82      	ldrb	r2, [r0, #26]
    ext->text = NULL;
 8011eaa:	2300      	movs	r3, #0
    lv_obj_set_design_func(new_label, lv_label_design);
 8011eac:	4943      	ldr	r1, [pc, #268]	; (8011fbc <lv_label_create+0x144>)
    ext->align = LV_LABEL_ALIGN_LEFT;
 8011eae:	f002 02d6 	and.w	r2, r2, #214	; 0xd6
    ext->text = NULL;
 8011eb2:	6003      	str	r3, [r0, #0]
    ext->long_mode = LV_LABEL_LONG_EXPAND;
 8011eb4:	7103      	strb	r3, [r0, #4]
    ext->align = LV_LABEL_ALIGN_LEFT;
 8011eb6:	f363 0242 	bfi	r2, r3, #1, #2
    ext->offset.x = 0;
 8011eba:	82c3      	strh	r3, [r0, #22]
    ext->offset.y = 0;
 8011ebc:	8303      	strh	r3, [r0, #24]
    ext->align = LV_LABEL_ALIGN_LEFT;
 8011ebe:	7682      	strb	r2, [r0, #26]
    ext->dot_end = LV_LABEL_DOT_END_INV;
 8011ec0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011ec4:	8242      	strh	r2, [r0, #18]
    ext->anim_speed = LV_LABEL_SCROLL_SPEED;
 8011ec6:	2219      	movs	r2, #25
 8011ec8:	8282      	strh	r2, [r0, #20]
    lv_obj_set_design_func(new_label, lv_label_design);
 8011eca:	4620      	mov	r0, r4
 8011ecc:	f7f6 fdd6 	bl	8008a7c <lv_obj_set_design_func>
    lv_obj_set_signal_func(new_label, lv_label_signal);
 8011ed0:	493b      	ldr	r1, [pc, #236]	; (8011fc0 <lv_label_create+0x148>)
 8011ed2:	4620      	mov	r0, r4
 8011ed4:	f7f6 fdd0 	bl	8008a78 <lv_obj_set_signal_func>
    if(copy == NULL) {
 8011ed8:	b996      	cbnz	r6, 8011f00 <lv_label_create+0x88>
        lv_obj_set_click(new_label, false);
 8011eda:	4631      	mov	r1, r6
 8011edc:	4620      	mov	r0, r4
 8011ede:	f7f6 fd9b 	bl	8008a18 <lv_obj_set_click>
        lv_label_set_long_mode(new_label, LV_LABEL_LONG_EXPAND);
 8011ee2:	4631      	mov	r1, r6
 8011ee4:	4620      	mov	r0, r4
 8011ee6:	f7ff ff77 	bl	8011dd8 <lv_label_set_long_mode>
        lv_label_set_text(new_label, "Text");
 8011eea:	4936      	ldr	r1, [pc, #216]	; (8011fc4 <lv_label_create+0x14c>)
 8011eec:	4620      	mov	r0, r4
 8011eee:	f7ff ff1f 	bl	8011d30 <lv_label_set_text>
    lv_obj_set_style(label, style);
 8011ef2:	4631      	mov	r1, r6
 8011ef4:	4620      	mov	r0, r4
 8011ef6:	f7f6 fe87 	bl	8008c08 <lv_obj_set_style>
}
 8011efa:	4620      	mov	r0, r4
 8011efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_label_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8011f00:	4630      	mov	r0, r6
 8011f02:	f7f6 ffba 	bl	8008e7a <lv_obj_get_ext_attr>
 8011f06:	4607      	mov	r7, r0
        lv_label_set_long_mode(new_label, lv_label_get_long_mode(copy));
 8011f08:	4630      	mov	r0, r6
 8011f0a:	f7ff fb4b 	bl	80115a4 <lv_label_get_long_mode>
 8011f0e:	4601      	mov	r1, r0
 8011f10:	4620      	mov	r0, r4
 8011f12:	f7ff ff61 	bl	8011dd8 <lv_label_set_long_mode>
        lv_label_set_recolor(new_label, lv_label_get_recolor(copy));
 8011f16:	4630      	mov	r0, r6
 8011f18:	f7ff fb50 	bl	80115bc <lv_label_get_recolor>
 8011f1c:	4601      	mov	r1, r0
 8011f1e:	4620      	mov	r0, r4
 8011f20:	f7ff ff96 	bl	8011e50 <lv_label_set_recolor>
        lv_label_set_body_draw(new_label, lv_label_get_body_draw(copy));
 8011f24:	4630      	mov	r0, r6
 8011f26:	f7ff fb50 	bl	80115ca <lv_label_get_body_draw>
 8011f2a:	4601      	mov	r1, r0
 8011f2c:	4620      	mov	r0, r4
 8011f2e:	f7ff fb1e 	bl	801156e <lv_label_set_body_draw>
        lv_label_set_align(new_label, lv_label_get_align(copy));
 8011f32:	4630      	mov	r0, r6
 8011f34:	f7ff fb3b 	bl	80115ae <lv_label_get_align>
 8011f38:	4601      	mov	r1, r0
 8011f3a:	4620      	mov	r0, r4
 8011f3c:	f7ff fb04 	bl	8011548 <lv_label_set_align>
        if(copy_ext->static_txt == 0) lv_label_set_text(new_label, lv_label_get_text(copy));
 8011f40:	7ebb      	ldrb	r3, [r7, #26]
 8011f42:	4630      	mov	r0, r6
 8011f44:	07db      	lsls	r3, r3, #31
 8011f46:	d414      	bmi.n	8011f72 <lv_label_create+0xfa>
 8011f48:	f7ff fb27 	bl	801159a <lv_label_get_text>
 8011f4c:	4601      	mov	r1, r0
 8011f4e:	4620      	mov	r0, r4
 8011f50:	f7ff feee 	bl	8011d30 <lv_label_set_text>
        if(copy_ext->long_mode == LV_LABEL_LONG_DOT) {
 8011f54:	793b      	ldrb	r3, [r7, #4]
 8011f56:	2b03      	cmp	r3, #3
 8011f58:	d11c      	bne.n	8011f94 <lv_label_create+0x11c>
            ext->text = lv_mem_realloc(ext->text, lv_mem_get_size(copy_ext->text));
 8011f5a:	682e      	ldr	r6, [r5, #0]
 8011f5c:	6838      	ldr	r0, [r7, #0]
 8011f5e:	f7fb ffed 	bl	800df3c <lv_mem_get_size>
 8011f62:	4601      	mov	r1, r0
 8011f64:	4630      	mov	r0, r6
 8011f66:	f7fb fff7 	bl	800df58 <lv_mem_realloc>
 8011f6a:	4606      	mov	r6, r0
 8011f6c:	6028      	str	r0, [r5, #0]
            lv_mem_assert(ext->text);
 8011f6e:	b938      	cbnz	r0, 8011f80 <lv_label_create+0x108>
 8011f70:	e7fe      	b.n	8011f70 <lv_label_create+0xf8>
        else lv_label_set_static_text(new_label, lv_label_get_text(copy));
 8011f72:	f7ff fb12 	bl	801159a <lv_label_get_text>
 8011f76:	4601      	mov	r1, r0
 8011f78:	4620      	mov	r0, r4
 8011f7a:	f7ff ff12 	bl	8011da2 <lv_label_set_static_text>
 8011f7e:	e7e9      	b.n	8011f54 <lv_label_create+0xdc>
            memcpy(ext->text, copy_ext->text, lv_mem_get_size(copy_ext->text));
 8011f80:	f8d7 8000 	ldr.w	r8, [r7]
 8011f84:	4640      	mov	r0, r8
 8011f86:	f7fb ffd9 	bl	800df3c <lv_mem_get_size>
 8011f8a:	4641      	mov	r1, r8
 8011f8c:	4602      	mov	r2, r0
 8011f8e:	4630      	mov	r0, r6
 8011f90:	f003 fdc4 	bl	8015b1c <memcpy>
        memcpy(ext->dot_tmp, copy_ext->dot_tmp, sizeof(ext->dot_tmp));
 8011f94:	1d7b      	adds	r3, r7, #5
 8011f96:	1d6a      	adds	r2, r5, #5
 8011f98:	f107 0111 	add.w	r1, r7, #17
 8011f9c:	f853 0b04 	ldr.w	r0, [r3], #4
 8011fa0:	428b      	cmp	r3, r1
 8011fa2:	f842 0b04 	str.w	r0, [r2], #4
 8011fa6:	d1f9      	bne.n	8011f9c <lv_label_create+0x124>
 8011fa8:	781b      	ldrb	r3, [r3, #0]
        lv_obj_refresh_style(new_label);
 8011faa:	4620      	mov	r0, r4
        memcpy(ext->dot_tmp, copy_ext->dot_tmp, sizeof(ext->dot_tmp));
 8011fac:	7013      	strb	r3, [r2, #0]
        ext->dot_end = copy_ext->dot_end;
 8011fae:	8a7b      	ldrh	r3, [r7, #18]
 8011fb0:	826b      	strh	r3, [r5, #18]
        lv_obj_refresh_style(new_label);
 8011fb2:	f7f6 fd23 	bl	80089fc <lv_obj_refresh_style>
 8011fb6:	e7a0      	b.n	8011efa <lv_label_create+0x82>
 8011fb8:	20017418 	.word	0x20017418
 8011fbc:	0801142d 	.word	0x0801142d
 8011fc0:	08011c5d 	.word	0x08011c5d
 8011fc4:	08087fc7 	.word	0x08087fc7

08011fc8 <lv_label_ins_text>:
{
 8011fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011fcc:	4607      	mov	r7, r0
 8011fce:	460d      	mov	r5, r1
 8011fd0:	4690      	mov	r8, r2
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8011fd2:	f7f6 ff52 	bl	8008e7a <lv_obj_get_ext_attr>
    if(ext->static_txt != 0) return;
 8011fd6:	7e83      	ldrb	r3, [r0, #26]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8011fd8:	4604      	mov	r4, r0
    if(ext->static_txt != 0) return;
 8011fda:	07db      	lsls	r3, r3, #31
 8011fdc:	d425      	bmi.n	801202a <lv_label_ins_text+0x62>
    lv_obj_invalidate(label);
 8011fde:	4638      	mov	r0, r7
 8011fe0:	f7f6 f96a 	bl	80082b8 <lv_obj_invalidate>
    uint32_t old_len = strlen(ext->text);
 8011fe4:	f8d4 9000 	ldr.w	r9, [r4]
 8011fe8:	4648      	mov	r0, r9
 8011fea:	f7ee f917 	bl	800021c <strlen>
 8011fee:	4606      	mov	r6, r0
    uint32_t ins_len = strlen(txt);
 8011ff0:	4640      	mov	r0, r8
 8011ff2:	f7ee f913 	bl	800021c <strlen>
    uint32_t new_len = ins_len + old_len;
 8011ff6:	1831      	adds	r1, r6, r0
    ext->text = lv_mem_realloc(ext->text, new_len + 1);
 8011ff8:	4648      	mov	r0, r9
 8011ffa:	3101      	adds	r1, #1
 8011ffc:	f7fb ffac 	bl	800df58 <lv_mem_realloc>
 8012000:	6020      	str	r0, [r4, #0]
    lv_mem_assert(ext->text);
 8012002:	b900      	cbnz	r0, 8012006 <lv_label_ins_text+0x3e>
 8012004:	e7fe      	b.n	8012004 <lv_label_ins_text+0x3c>
    if(pos == LV_LABEL_POS_LAST) {
 8012006:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801200a:	429d      	cmp	r5, r3
 801200c:	d103      	bne.n	8012016 <lv_label_ins_text+0x4e>
        pos = lv_txt_get_encoded_length(ext->text);
 801200e:	4b08      	ldr	r3, [pc, #32]	; (8012030 <lv_label_ins_text+0x68>)
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	4798      	blx	r3
 8012014:	4605      	mov	r5, r0
    lv_txt_ins(ext->text, pos, txt);
 8012016:	6820      	ldr	r0, [r4, #0]
 8012018:	4642      	mov	r2, r8
 801201a:	4629      	mov	r1, r5
 801201c:	f7fc fb22 	bl	800e664 <lv_txt_ins>
    lv_label_refr_text(label);
 8012020:	4638      	mov	r0, r7
}
 8012022:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    lv_label_refr_text(label);
 8012026:	f7ff bc6b 	b.w	8011900 <lv_label_refr_text>
 801202a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801202e:	bf00      	nop
 8012030:	200000bc 	.word	0x200000bc

08012034 <lv_list_add>:
 * @param txt text of the list element (NULL if unused)
 * @param rel_action pointer to release action function (like with lv_btn)
 * @return pointer to the new list element which can be customized (a button)
 */
lv_obj_t * lv_list_add(lv_obj_t * list, const void * img_src, const char * txt, lv_action_t rel_action)
{
 8012034:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012038:	4606      	mov	r6, r0
 801203a:	469b      	mov	fp, r3
 801203c:	4689      	mov	r9, r1
 801203e:	4690      	mov	r8, r2
    /*Create a list element with the image an the text*/
    lv_obj_t * liste;
    liste = lv_btn_create(list, NULL);

    /*Save the original signal function because it will be required in `lv_list_btn_signal`*/
    if(ancestor_btn_signal == NULL) ancestor_btn_signal = lv_obj_get_signal_func(liste);
 8012040:	4f4a      	ldr	r7, [pc, #296]	; (801216c <lv_list_add+0x138>)
    lv_style_t * style = lv_obj_get_style(list);
 8012042:	f7f6 fe4f 	bl	8008ce4 <lv_obj_get_style>
 8012046:	4682      	mov	sl, r0
    lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 8012048:	4630      	mov	r0, r6
 801204a:	f7f6 ff16 	bl	8008e7a <lv_obj_get_ext_attr>
    liste = lv_btn_create(list, NULL);
 801204e:	2100      	movs	r1, #0
    lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 8012050:	4605      	mov	r5, r0
    liste = lv_btn_create(list, NULL);
 8012052:	4630      	mov	r0, r6
 8012054:	f7fc ff0e 	bl	800ee74 <lv_btn_create>
    if(ancestor_btn_signal == NULL) ancestor_btn_signal = lv_obj_get_signal_func(liste);
 8012058:	683b      	ldr	r3, [r7, #0]
    liste = lv_btn_create(list, NULL);
 801205a:	4604      	mov	r4, r0
    if(ancestor_btn_signal == NULL) ancestor_btn_signal = lv_obj_get_signal_func(liste);
 801205c:	b913      	cbnz	r3, 8012064 <lv_list_add+0x30>
 801205e:	f7f6 ff08 	bl	8008e72 <lv_obj_get_signal_func>
 8012062:	6038      	str	r0, [r7, #0]

    /*Set the default styles*/
    lv_btn_set_style(liste, LV_BTN_STYLE_REL, ext->styles_btn[LV_BTN_STATE_REL]);
 8012064:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8012066:	2100      	movs	r1, #0
 8012068:	4620      	mov	r0, r4
 801206a:	f7fc fee2 	bl	800ee32 <lv_btn_set_style>
    lv_btn_set_style(liste, LV_BTN_STYLE_PR, ext->styles_btn[LV_BTN_STATE_PR]);
 801206e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8012070:	2101      	movs	r1, #1
 8012072:	4620      	mov	r0, r4
 8012074:	f7fc fedd 	bl	800ee32 <lv_btn_set_style>
    lv_btn_set_style(liste, LV_BTN_STYLE_TGL_REL, ext->styles_btn[LV_BTN_STATE_TGL_REL]);
 8012078:	6baa      	ldr	r2, [r5, #56]	; 0x38
 801207a:	2102      	movs	r1, #2
 801207c:	4620      	mov	r0, r4
 801207e:	f7fc fed8 	bl	800ee32 <lv_btn_set_style>
    lv_btn_set_style(liste, LV_BTN_STYLE_TGL_PR, ext->styles_btn[LV_BTN_STATE_TGL_PR]);
 8012082:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8012084:	2103      	movs	r1, #3
 8012086:	4620      	mov	r0, r4
 8012088:	f7fc fed3 	bl	800ee32 <lv_btn_set_style>
    lv_btn_set_style(liste, LV_BTN_STYLE_INA, ext->styles_btn[LV_BTN_STATE_INA]);
 801208c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 801208e:	2104      	movs	r1, #4
 8012090:	4620      	mov	r0, r4
 8012092:	f7fc fece 	bl	800ee32 <lv_btn_set_style>

    lv_btn_set_action(liste, LV_BTN_ACTION_CLICK, rel_action);
 8012096:	465a      	mov	r2, fp
 8012098:	2100      	movs	r1, #0
 801209a:	4620      	mov	r0, r4
 801209c:	f7fc febe 	bl	800ee1c <lv_btn_set_action>
    lv_page_glue_obj(liste, true);
 80120a0:	2101      	movs	r1, #1
 80120a2:	4620      	mov	r0, r4
 80120a4:	f001 fa42 	bl	801352c <lv_page_glue_obj>
 80120a8:	2106      	movs	r1, #6
 80120aa:	4620      	mov	r0, r4
 80120ac:	f7fe fb08 	bl	80106c0 <lv_cont_set_layout>
 * @param hor_en true: enable the horizontal fit
 * @param ver_en true: enable the vertical fit
 */
static inline void lv_btn_set_fit(lv_obj_t * btn, bool hor_en, bool ver_en)
{
    lv_cont_set_fit(btn, hor_en, ver_en);
 80120b0:	2201      	movs	r2, #1
 80120b2:	2100      	movs	r1, #0
 80120b4:	4620      	mov	r0, r4
 80120b6:	f7fe fb18 	bl	80106ea <lv_cont_set_fit>
    lv_btn_set_layout(liste, LV_LAYOUT_ROW_M);
    lv_btn_set_fit(liste, false, true);
    lv_obj_set_protect(liste, LV_PROTECT_PRESS_LOST);
 80120ba:	2110      	movs	r1, #16
 80120bc:	4620      	mov	r0, r4
 80120be:	f7f6 fcce 	bl	8008a5e <lv_obj_set_protect>
    lv_obj_set_signal_func(liste, lv_list_btn_signal);
 80120c2:	492b      	ldr	r1, [pc, #172]	; (8012170 <lv_list_add+0x13c>)
 80120c4:	4620      	mov	r0, r4
 80120c6:	f7f6 fcd7 	bl	8008a78 <lv_obj_set_signal_func>

    /*Make the size adjustment*/
    lv_coord_t w = lv_obj_get_width(list);
 80120ca:	4630      	mov	r0, r6
 80120cc:	f7f6 fdfe 	bl	8008ccc <lv_obj_get_width>
 80120d0:	4607      	mov	r7, r0
    lv_style_t  * style_scrl = lv_obj_get_style(lv_page_get_scrl(list));
 80120d2:	4630      	mov	r0, r6
 80120d4:	f001 f86f 	bl	80131b6 <lv_page_get_scrl>
 80120d8:	f7f6 fe04 	bl	8008ce4 <lv_obj_get_style>
    lv_coord_t pad_hor_tot = style->body.padding.hor + style_scrl->body.padding.hor;
 80120dc:	f8ba 1022 	ldrh.w	r1, [sl, #34]	; 0x22
 80120e0:	8c43      	ldrh	r3, [r0, #34]	; 0x22
    w -= pad_hor_tot * 2;

    lv_obj_set_width(liste, w);
 80120e2:	4620      	mov	r0, r4
    lv_coord_t pad_hor_tot = style->body.padding.hor + style_scrl->body.padding.hor;
 80120e4:	4419      	add	r1, r3
    w -= pad_hor_tot * 2;
 80120e6:	eba7 0141 	sub.w	r1, r7, r1, lsl #1
    lv_obj_set_width(liste, w);
 80120ea:	b209      	sxth	r1, r1
 80120ec:	f7f6 fb28 	bl	8008740 <lv_obj_set_width>
#if USE_LV_IMG != 0
    lv_obj_t * img = NULL;
    if(img_src) {
 80120f0:	f1b9 0f00 	cmp.w	r9, #0
 80120f4:	d016      	beq.n	8012124 <lv_list_add+0xf0>
        img = lv_img_create(liste, NULL);
 80120f6:	2100      	movs	r1, #0
 80120f8:	4620      	mov	r0, r4
 80120fa:	f7fe ff1f 	bl	8010f3c <lv_img_create>
 80120fe:	4606      	mov	r6, r0
        lv_img_set_src(img, img_src);
 8012100:	4649      	mov	r1, r9
 8012102:	f7fe fe9b 	bl	8010e3c <lv_img_set_src>
        lv_obj_set_style(img, ext->style_img);
 8012106:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8012108:	4630      	mov	r0, r6
        lv_obj_set_click(img, false);
        if(img_signal == NULL) img_signal = lv_obj_get_signal_func(img);
 801210a:	4d1a      	ldr	r5, [pc, #104]	; (8012174 <lv_list_add+0x140>)
        lv_obj_set_style(img, ext->style_img);
 801210c:	f7f6 fd7c 	bl	8008c08 <lv_obj_set_style>
        lv_obj_set_click(img, false);
 8012110:	2100      	movs	r1, #0
 8012112:	4630      	mov	r0, r6
 8012114:	f7f6 fc80 	bl	8008a18 <lv_obj_set_click>
        if(img_signal == NULL) img_signal = lv_obj_get_signal_func(img);
 8012118:	682b      	ldr	r3, [r5, #0]
 801211a:	b91b      	cbnz	r3, 8012124 <lv_list_add+0xf0>
 801211c:	4630      	mov	r0, r6
 801211e:	f7f6 fea8 	bl	8008e72 <lv_obj_get_signal_func>
 8012122:	6028      	str	r0, [r5, #0]
    }
#endif
    if(txt != NULL) {
 8012124:	f1b8 0f00 	cmp.w	r8, #0
 8012128:	d01d      	beq.n	8012166 <lv_list_add+0x132>
        lv_obj_t * label = lv_label_create(liste, NULL);
 801212a:	2100      	movs	r1, #0
 801212c:	4620      	mov	r0, r4
 801212e:	f7ff fea3 	bl	8011e78 <lv_label_create>
 8012132:	4605      	mov	r5, r0
        lv_label_set_text(label, txt);
 8012134:	4641      	mov	r1, r8
        lv_obj_set_click(label, false);
        lv_label_set_long_mode(label, LV_LABEL_LONG_ROLL);
        lv_obj_set_width(label, liste->coords.x2 - label->coords.x1);
        if(label_signal == NULL) label_signal = lv_obj_get_signal_func(label);
 8012136:	4e10      	ldr	r6, [pc, #64]	; (8012178 <lv_list_add+0x144>)
        lv_label_set_text(label, txt);
 8012138:	f7ff fdfa 	bl	8011d30 <lv_label_set_text>
        lv_obj_set_click(label, false);
 801213c:	2100      	movs	r1, #0
 801213e:	4628      	mov	r0, r5
 8012140:	f7f6 fc6a 	bl	8008a18 <lv_obj_set_click>
        lv_label_set_long_mode(label, LV_LABEL_LONG_ROLL);
 8012144:	2104      	movs	r1, #4
 8012146:	4628      	mov	r0, r5
 8012148:	f7ff fe46 	bl	8011dd8 <lv_label_set_long_mode>
        lv_obj_set_width(label, liste->coords.x2 - label->coords.x1);
 801214c:	8a2b      	ldrh	r3, [r5, #16]
 801214e:	8aa1      	ldrh	r1, [r4, #20]
 8012150:	4628      	mov	r0, r5
 8012152:	1ac9      	subs	r1, r1, r3
 8012154:	b209      	sxth	r1, r1
 8012156:	f7f6 faf3 	bl	8008740 <lv_obj_set_width>
        if(label_signal == NULL) label_signal = lv_obj_get_signal_func(label);
 801215a:	6833      	ldr	r3, [r6, #0]
 801215c:	b91b      	cbnz	r3, 8012166 <lv_list_add+0x132>
 801215e:	4628      	mov	r0, r5
 8012160:	f7f6 fe87 	bl	8008e72 <lv_obj_get_signal_func>
 8012164:	6030      	str	r0, [r6, #0]
    }

    return liste;
}
 8012166:	4620      	mov	r0, r4
 8012168:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801216c:	2001741c 	.word	0x2001741c
 8012170:	0801227d 	.word	0x0801227d
 8012174:	20017424 	.word	0x20017424
 8012178:	20017428 	.word	0x20017428

0801217c <lv_list_set_btn_selected>:
 * Make a button selected
 * @param list pointer to a list object
 * @param btn pointer to a button to selectthe
 */
void lv_list_set_btn_selected(lv_obj_t * list, lv_obj_t * btn)
{
 801217c:	b570      	push	{r4, r5, r6, lr}
 801217e:	4606      	mov	r6, r0
 8012180:	460d      	mov	r5, r1
    lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 8012182:	f7f6 fe7a 	bl	8008e7a <lv_obj_get_ext_attr>
 8012186:	4604      	mov	r4, r0

    if(ext->selected_btn) {
 8012188:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801218a:	b138      	cbz	r0, 801219c <lv_list_set_btn_selected+0x20>
        lv_btn_state_t s = lv_btn_get_state(ext->selected_btn);
 801218c:	f7fc ff14 	bl	800efb8 <lv_btn_get_state>
        if(s == LV_BTN_STATE_PR) lv_btn_set_state(ext->selected_btn, LV_BTN_STATE_REL);
 8012190:	2801      	cmp	r0, #1
 8012192:	d114      	bne.n	80121be <lv_list_set_btn_selected+0x42>
 8012194:	2100      	movs	r1, #0
        else if(s == LV_BTN_STATE_TGL_PR) lv_btn_set_state(ext->selected_btn, LV_BTN_STATE_TGL_REL);
 8012196:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8012198:	f7fc fe2c 	bl	800edf4 <lv_btn_set_state>
    }

    ext->selected_btn = btn;
 801219c:	64a5      	str	r5, [r4, #72]	; 0x48

    if(ext->selected_btn) {
 801219e:	b1b5      	cbz	r5, 80121ce <lv_list_set_btn_selected+0x52>
        lv_btn_state_t s = lv_btn_get_state(ext->selected_btn);
 80121a0:	4628      	mov	r0, r5
 80121a2:	f7fc ff09 	bl	800efb8 <lv_btn_get_state>
        if(s == LV_BTN_STATE_REL) lv_btn_set_state(ext->selected_btn, LV_BTN_STATE_PR);
 80121a6:	b970      	cbnz	r0, 80121c6 <lv_list_set_btn_selected+0x4a>
 80121a8:	2101      	movs	r1, #1
        else if(s == LV_BTN_STATE_TGL_REL) lv_btn_set_state(ext->selected_btn, LV_BTN_STATE_TGL_PR);
 80121aa:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80121ac:	f7fc fe22 	bl	800edf4 <lv_btn_set_state>

        lv_page_focus(list, ext->selected_btn, ext->anim_time);
 80121b0:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80121b2:	4630      	mov	r0, r6
 80121b4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    }
}
 80121b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_page_focus(list, ext->selected_btn, ext->anim_time);
 80121ba:	f001 b9c3 	b.w	8013544 <lv_page_focus>
        else if(s == LV_BTN_STATE_TGL_PR) lv_btn_set_state(ext->selected_btn, LV_BTN_STATE_TGL_REL);
 80121be:	2803      	cmp	r0, #3
 80121c0:	d1ec      	bne.n	801219c <lv_list_set_btn_selected+0x20>
 80121c2:	2102      	movs	r1, #2
 80121c4:	e7e7      	b.n	8012196 <lv_list_set_btn_selected+0x1a>
        else if(s == LV_BTN_STATE_TGL_REL) lv_btn_set_state(ext->selected_btn, LV_BTN_STATE_TGL_PR);
 80121c6:	2802      	cmp	r0, #2
 80121c8:	d1f2      	bne.n	80121b0 <lv_list_set_btn_selected+0x34>
 80121ca:	2103      	movs	r1, #3
 80121cc:	e7ed      	b.n	80121aa <lv_list_set_btn_selected+0x2e>
 80121ce:	bd70      	pop	{r4, r5, r6, pc}

080121d0 <lv_list_get_btn_label>:
 * Get the label object from a list element
 * @param btn pointer to a list element (button)
 * @return pointer to the label from the list element or NULL if not found
 */
lv_obj_t * lv_list_get_btn_label(const lv_obj_t * btn)
{
 80121d0:	b538      	push	{r3, r4, r5, lr}
    lv_obj_t * label = lv_obj_get_child(btn, NULL);
 80121d2:	2100      	movs	r1, #0
{
 80121d4:	4605      	mov	r5, r0
    lv_obj_t * label = lv_obj_get_child(btn, NULL);
 80121d6:	f7f6 fcf5 	bl	8008bc4 <lv_obj_get_child>
    if(label == NULL) return NULL;
 80121da:	b960      	cbnz	r0, 80121f6 <lv_list_get_btn_label+0x26>
 80121dc:	2000      	movs	r0, #0
 80121de:	bd38      	pop	{r3, r4, r5, pc}

    while(label->signal_func != label_signal) {
        label = lv_obj_get_child(btn, label);
 80121e0:	4601      	mov	r1, r0
 80121e2:	4628      	mov	r0, r5
 80121e4:	f7f6 fcee 	bl	8008bc4 <lv_obj_get_child>
        if(label == NULL) break;
 80121e8:	2800      	cmp	r0, #0
 80121ea:	d0f7      	beq.n	80121dc <lv_list_get_btn_label+0xc>
    while(label->signal_func != label_signal) {
 80121ec:	6982      	ldr	r2, [r0, #24]
 80121ee:	6823      	ldr	r3, [r4, #0]
 80121f0:	429a      	cmp	r2, r3
 80121f2:	d1f5      	bne.n	80121e0 <lv_list_get_btn_label+0x10>
    }

    return label;
}
 80121f4:	bd38      	pop	{r3, r4, r5, pc}
    while(label->signal_func != label_signal) {
 80121f6:	4c01      	ldr	r4, [pc, #4]	; (80121fc <lv_list_get_btn_label+0x2c>)
 80121f8:	e7f8      	b.n	80121ec <lv_list_get_btn_label+0x1c>
 80121fa:	bf00      	nop
 80121fc:	20017428 	.word	0x20017428

08012200 <lv_list_get_btn_text>:
{
 8012200:	b508      	push	{r3, lr}
    lv_obj_t * label = lv_list_get_btn_label(btn);
 8012202:	f7ff ffe5 	bl	80121d0 <lv_list_get_btn_label>
    if(label == NULL) return "";
 8012206:	b118      	cbz	r0, 8012210 <lv_list_get_btn_text+0x10>
}
 8012208:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return lv_label_get_text(label);
 801220c:	f7ff b9c5 	b.w	801159a <lv_label_get_text>
}
 8012210:	4800      	ldr	r0, [pc, #0]	; (8012214 <lv_list_get_btn_text+0x14>)
 8012212:	bd08      	pop	{r3, pc}
 8012214:	08087e8b 	.word	0x08087e8b

08012218 <lv_list_get_btn_img>:
 * Get the image object from a list element
 * @param btn pointer to a list element (button)
 * @return pointer to the image from the list element or NULL if not found
 */
lv_obj_t * lv_list_get_btn_img(const lv_obj_t * btn)
{
 8012218:	b538      	push	{r3, r4, r5, lr}
#if USE_LV_IMG != 0
    lv_obj_t * img = lv_obj_get_child(btn, NULL);
 801221a:	2100      	movs	r1, #0
{
 801221c:	4605      	mov	r5, r0
    lv_obj_t * img = lv_obj_get_child(btn, NULL);
 801221e:	f7f6 fcd1 	bl	8008bc4 <lv_obj_get_child>
    if(img == NULL) return NULL;
 8012222:	b960      	cbnz	r0, 801223e <lv_list_get_btn_img+0x26>
 8012224:	2000      	movs	r0, #0
 8012226:	bd38      	pop	{r3, r4, r5, pc}

    while(img->signal_func != img_signal) {
        img = lv_obj_get_child(btn, img);
 8012228:	4601      	mov	r1, r0
 801222a:	4628      	mov	r0, r5
 801222c:	f7f6 fcca 	bl	8008bc4 <lv_obj_get_child>
        if(img == NULL) break;
 8012230:	2800      	cmp	r0, #0
 8012232:	d0f7      	beq.n	8012224 <lv_list_get_btn_img+0xc>
    while(img->signal_func != img_signal) {
 8012234:	6982      	ldr	r2, [r0, #24]
 8012236:	6823      	ldr	r3, [r4, #0]
 8012238:	429a      	cmp	r2, r3
 801223a:	d1f5      	bne.n	8012228 <lv_list_get_btn_img+0x10>

    return img;
#else
    return NULL;
#endif
}
 801223c:	bd38      	pop	{r3, r4, r5, pc}
    while(img->signal_func != img_signal) {
 801223e:	4c01      	ldr	r4, [pc, #4]	; (8012244 <lv_list_get_btn_img+0x2c>)
 8012240:	e7f8      	b.n	8012234 <lv_list_get_btn_img+0x1c>
 8012242:	bf00      	nop
 8012244:	20017424 	.word	0x20017424

08012248 <lv_list_get_prev_btn>:
 * @param list pointer to a list object
 * @param prev_btn pointer to button. Search the next after it.
 * @return pointer to the next button or NULL when no more buttons
 */
lv_obj_t * lv_list_get_prev_btn(const lv_obj_t * list, lv_obj_t * prev_btn)
{
 8012248:	b570      	push	{r4, r5, r6, lr}
 801224a:	460c      	mov	r4, r1
    /* Not a good practice but user can add/create objects to the lists manually.
     * When getting the next button try to be sure that it is at least a button */

    lv_obj_t * btn ;
    lv_obj_t * scrl = lv_page_get_scrl(list);
 801224c:	f000 ffb3 	bl	80131b6 <lv_page_get_scrl>
 8012250:	4606      	mov	r6, r0

    btn = lv_obj_get_child(scrl, prev_btn);
 8012252:	4621      	mov	r1, r4
 8012254:	f7f6 fcb6 	bl	8008bc4 <lv_obj_get_child>
    if(btn == NULL) return NULL;
 8012258:	b958      	cbnz	r0, 8012272 <lv_list_get_prev_btn+0x2a>
 801225a:	2000      	movs	r0, #0
 801225c:	bd70      	pop	{r4, r5, r6, pc}

    while(btn->signal_func != lv_list_btn_signal) {
        btn = lv_obj_get_child(scrl, prev_btn);
 801225e:	4621      	mov	r1, r4
 8012260:	4630      	mov	r0, r6
 8012262:	f7f6 fcaf 	bl	8008bc4 <lv_obj_get_child>
        if(btn == NULL) break;
 8012266:	2800      	cmp	r0, #0
 8012268:	d0f7      	beq.n	801225a <lv_list_get_prev_btn+0x12>
    while(btn->signal_func != lv_list_btn_signal) {
 801226a:	6983      	ldr	r3, [r0, #24]
 801226c:	42ab      	cmp	r3, r5
 801226e:	d1f6      	bne.n	801225e <lv_list_get_prev_btn+0x16>
    }

    return btn;
}
 8012270:	bd70      	pop	{r4, r5, r6, pc}
    while(btn->signal_func != lv_list_btn_signal) {
 8012272:	4d01      	ldr	r5, [pc, #4]	; (8012278 <lv_list_get_prev_btn+0x30>)
 8012274:	e7f9      	b.n	801226a <lv_list_get_prev_btn+0x22>
 8012276:	bf00      	nop
 8012278:	0801227d 	.word	0x0801227d

0801227c <lv_list_btn_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_list_btn_signal(lv_obj_t * btn, lv_signal_t sign, void * param)
{
 801227c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_btn_signal(btn, sign, param);
 801227e:	4b1c      	ldr	r3, [pc, #112]	; (80122f0 <lv_list_btn_signal+0x74>)
{
 8012280:	4606      	mov	r6, r0
 8012282:	460c      	mov	r4, r1
    res = ancestor_btn_signal(btn, sign, param);
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8012288:	2801      	cmp	r0, #1
    res = ancestor_btn_signal(btn, sign, param);
 801228a:	4607      	mov	r7, r0
    if(res != LV_RES_OK) return res;
 801228c:	d11e      	bne.n	80122cc <lv_list_btn_signal+0x50>

#if USE_LV_GROUP
    if(sign == LV_SIGNAL_RELEASED) {
 801228e:	2c09      	cmp	r4, #9
 8012290:	d11c      	bne.n	80122cc <lv_list_btn_signal+0x50>
        lv_obj_t * list = lv_obj_get_parent(lv_obj_get_parent(btn));
 8012292:	4630      	mov	r0, r6
 8012294:	f7f6 fc94 	bl	8008bc0 <lv_obj_get_parent>
 8012298:	f7f6 fc92 	bl	8008bc0 <lv_obj_get_parent>
 801229c:	4605      	mov	r5, r0
        lv_group_t * g = lv_obj_get_group(list);
 801229e:	f7f6 fdee 	bl	8008e7e <lv_obj_get_group>
        if(lv_group_get_focused(g) == list && lv_indev_is_dragging(lv_indev_get_act()) == false) {
 80122a2:	f7f5 fb36 	bl	8007912 <lv_group_get_focused>
 80122a6:	4285      	cmp	r5, r0
 80122a8:	d10e      	bne.n	80122c8 <lv_list_btn_signal+0x4c>
 80122aa:	f7f5 ff53 	bl	8008154 <lv_indev_get_act>
 80122ae:	f7f5 ff83 	bl	80081b8 <lv_indev_is_dragging>
 80122b2:	4601      	mov	r1, r0
 80122b4:	b940      	cbnz	r0, 80122c8 <lv_list_btn_signal+0x4c>
            lv_obj_t * btn_i = lv_list_get_prev_btn(list, NULL);
            while(btn_i) {
                lv_btn_state_t s = lv_btn_get_state(btn_i);
                if(s == LV_BTN_STATE_PR) lv_btn_set_state(btn_i, LV_BTN_STATE_REL);
                else if(s == LV_BTN_STATE_TGL_PR) lv_btn_set_state(btn_i, LV_BTN_STATE_TGL_REL);
                btn_i = lv_list_get_prev_btn(list, btn_i);
 80122b6:	4628      	mov	r0, r5
 80122b8:	f7ff ffc6 	bl	8012248 <lv_list_get_prev_btn>
 80122bc:	4604      	mov	r4, r0
            while(btn_i) {
 80122be:	b938      	cbnz	r0, 80122d0 <lv_list_btn_signal+0x54>
            }

            /*Make the released button "selected"*/
            lv_list_set_btn_selected(list, btn);
 80122c0:	4631      	mov	r1, r6
 80122c2:	4628      	mov	r0, r5
 80122c4:	f7ff ff5a 	bl	801217c <lv_list_set_btn_selected>
        }

        /* If `click_focus == 1` then LV_SIGNAL_FOCUS need to know which button triggered the focus
         * to mark it as selected (pressed state)*/
        last_clicked_btn = btn;
 80122c8:	4b0a      	ldr	r3, [pc, #40]	; (80122f4 <lv_list_btn_signal+0x78>)
 80122ca:	601e      	str	r6, [r3, #0]
    }
#endif


    return res;
}
 80122cc:	4638      	mov	r0, r7
 80122ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                lv_btn_state_t s = lv_btn_get_state(btn_i);
 80122d0:	4620      	mov	r0, r4
 80122d2:	f7fc fe71 	bl	800efb8 <lv_btn_get_state>
                if(s == LV_BTN_STATE_PR) lv_btn_set_state(btn_i, LV_BTN_STATE_REL);
 80122d6:	2801      	cmp	r0, #1
 80122d8:	d105      	bne.n	80122e6 <lv_list_btn_signal+0x6a>
 80122da:	2100      	movs	r1, #0
                else if(s == LV_BTN_STATE_TGL_PR) lv_btn_set_state(btn_i, LV_BTN_STATE_TGL_REL);
 80122dc:	4620      	mov	r0, r4
 80122de:	f7fc fd89 	bl	800edf4 <lv_btn_set_state>
                btn_i = lv_list_get_prev_btn(list, btn_i);
 80122e2:	4621      	mov	r1, r4
 80122e4:	e7e7      	b.n	80122b6 <lv_list_btn_signal+0x3a>
                else if(s == LV_BTN_STATE_TGL_PR) lv_btn_set_state(btn_i, LV_BTN_STATE_TGL_REL);
 80122e6:	2803      	cmp	r0, #3
 80122e8:	d1fb      	bne.n	80122e2 <lv_list_btn_signal+0x66>
 80122ea:	2102      	movs	r1, #2
 80122ec:	e7f6      	b.n	80122dc <lv_list_btn_signal+0x60>
 80122ee:	bf00      	nop
 80122f0:	2001741c 	.word	0x2001741c
 80122f4:	2001742c 	.word	0x2001742c

080122f8 <lv_list_get_next_btn>:
{
 80122f8:	b570      	push	{r4, r5, r6, lr}
 80122fa:	460c      	mov	r4, r1
    lv_obj_t * scrl = lv_page_get_scrl(list);
 80122fc:	f000 ff5b 	bl	80131b6 <lv_page_get_scrl>
 8012300:	4606      	mov	r6, r0
    btn = lv_obj_get_child_back(scrl, prev_btn);
 8012302:	4621      	mov	r1, r4
 8012304:	f7f6 fcca 	bl	8008c9c <lv_obj_get_child_back>
    if(btn == NULL) return NULL;
 8012308:	b958      	cbnz	r0, 8012322 <lv_list_get_next_btn+0x2a>
 801230a:	2000      	movs	r0, #0
 801230c:	bd70      	pop	{r4, r5, r6, pc}
        btn = lv_obj_get_child_back(scrl, prev_btn);
 801230e:	4621      	mov	r1, r4
 8012310:	4630      	mov	r0, r6
 8012312:	f7f6 fcc3 	bl	8008c9c <lv_obj_get_child_back>
        if(btn == NULL) break;
 8012316:	2800      	cmp	r0, #0
 8012318:	d0f7      	beq.n	801230a <lv_list_get_next_btn+0x12>
    while(btn->signal_func != lv_list_btn_signal) {
 801231a:	6983      	ldr	r3, [r0, #24]
 801231c:	42ab      	cmp	r3, r5
 801231e:	d1f6      	bne.n	801230e <lv_list_get_next_btn+0x16>
}
 8012320:	bd70      	pop	{r4, r5, r6, pc}
    while(btn->signal_func != lv_list_btn_signal) {
 8012322:	4d01      	ldr	r5, [pc, #4]	; (8012328 <lv_list_get_next_btn+0x30>)
 8012324:	e7f9      	b.n	801231a <lv_list_get_next_btn+0x22>
 8012326:	bf00      	nop
 8012328:	0801227d 	.word	0x0801227d

0801232c <lv_list_get_style>:
{
 801232c:	b538      	push	{r3, r4, r5, lr}
 801232e:	460d      	mov	r5, r1
 8012330:	4604      	mov	r4, r0
    lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 8012332:	f7f6 fda2 	bl	8008e7a <lv_obj_get_ext_attr>
    switch(type) {
 8012336:	2d07      	cmp	r5, #7
 8012338:	d819      	bhi.n	801236e <lv_list_get_style+0x42>
 801233a:	e8df f005 	tbb	[pc, r5]
 801233e:	0a04      	.short	0x0a04
 8012340:	12100e0c 	.word	0x12100e0c
 8012344:	1614      	.short	0x1614
            return lv_page_get_style(list, LV_PAGE_STYLE_BG);
 8012346:	2100      	movs	r1, #0
            return lv_page_get_style(list, LV_PAGE_STYLE_SCRL);
 8012348:	4620      	mov	r0, r4
}
 801234a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            return lv_page_get_style(list, LV_PAGE_STYLE_SCRL);
 801234e:	f000 bf3f 	b.w	80131d0 <lv_page_get_style>
            return lv_page_get_style(list, LV_PAGE_STYLE_SB);
 8012352:	2102      	movs	r1, #2
 8012354:	e7f8      	b.n	8012348 <lv_list_get_style+0x1c>
            return lv_page_get_style(list, LV_PAGE_STYLE_SCRL);
 8012356:	2101      	movs	r1, #1
 8012358:	e7f6      	b.n	8012348 <lv_list_get_style+0x1c>
            return ext->styles_btn[LV_BTN_STATE_REL];
 801235a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801235c:	bd38      	pop	{r3, r4, r5, pc}
            return ext->styles_btn[LV_BTN_STATE_PR];
 801235e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8012360:	bd38      	pop	{r3, r4, r5, pc}
            return ext->styles_btn[LV_BTN_STATE_TGL_REL];
 8012362:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8012364:	bd38      	pop	{r3, r4, r5, pc}
            return ext->styles_btn[LV_BTN_STATE_TGL_PR];
 8012366:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8012368:	bd38      	pop	{r3, r4, r5, pc}
            return ext->styles_btn[LV_BTN_STATE_INA];
 801236a:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801236c:	bd38      	pop	{r3, r4, r5, pc}
            return NULL;
 801236e:	2000      	movs	r0, #0
}
 8012370:	bd38      	pop	{r3, r4, r5, pc}

08012372 <refr_btn_width>:

static void refr_btn_width(lv_obj_t * list)
{
 8012372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012374:	4606      	mov	r6, r0
    lv_style_t * style = lv_list_get_style(list, LV_LIST_STYLE_BG);
 8012376:	2100      	movs	r1, #0
 8012378:	f7ff ffd8 	bl	801232c <lv_list_get_style>
 801237c:	4604      	mov	r4, r0
    lv_style_t * style_scrl = lv_obj_get_style(lv_page_get_scrl(list));
 801237e:	4630      	mov	r0, r6
 8012380:	f000 ff19 	bl	80131b6 <lv_page_get_scrl>
 8012384:	f7f6 fcae 	bl	8008ce4 <lv_obj_get_style>
 8012388:	4605      	mov	r5, r0
    lv_coord_t w = lv_obj_get_width(list);
 801238a:	4630      	mov	r0, r6
 801238c:	f7f6 fc9e 	bl	8008ccc <lv_obj_get_width>
    lv_coord_t btn_w = w - (style->body.padding.hor + style_scrl->body.padding.hor) * 2;
 8012390:	f9b4 4022 	ldrsh.w	r4, [r4, #34]	; 0x22
 8012394:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22

    lv_obj_t * btn = lv_list_get_prev_btn(list, NULL);
 8012398:	2100      	movs	r1, #0
    lv_coord_t btn_w = w - (style->body.padding.hor + style_scrl->body.padding.hor) * 2;
 801239a:	441c      	add	r4, r3
 801239c:	eba0 0444 	sub.w	r4, r0, r4, lsl #1
 80123a0:	b224      	sxth	r4, r4
            /*Set the label size to roll its text*/
            lv_obj_t * label = lv_list_get_btn_label(btn);
            lv_obj_set_width(label, btn->coords.x2 - label->coords.x1);
            lv_label_set_text(label, NULL);
        }
        btn = lv_list_get_prev_btn(list, btn);
 80123a2:	4630      	mov	r0, r6
 80123a4:	f7ff ff50 	bl	8012248 <lv_list_get_prev_btn>
 80123a8:	4605      	mov	r5, r0
    while(btn) {
 80123aa:	b900      	cbnz	r0, 80123ae <refr_btn_width+0x3c>
    }
}
 80123ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(lv_obj_get_width(btn) != btn_w) {
 80123ae:	4628      	mov	r0, r5
 80123b0:	f7f6 fc8c 	bl	8008ccc <lv_obj_get_width>
 80123b4:	4284      	cmp	r4, r0
 80123b6:	d011      	beq.n	80123dc <refr_btn_width+0x6a>
            lv_obj_set_width(btn, btn_w);
 80123b8:	4621      	mov	r1, r4
 80123ba:	4628      	mov	r0, r5
 80123bc:	f7f6 f9c0 	bl	8008740 <lv_obj_set_width>
            lv_obj_t * label = lv_list_get_btn_label(btn);
 80123c0:	4628      	mov	r0, r5
 80123c2:	f7ff ff05 	bl	80121d0 <lv_list_get_btn_label>
            lv_obj_set_width(label, btn->coords.x2 - label->coords.x1);
 80123c6:	8aa9      	ldrh	r1, [r5, #20]
 80123c8:	8a03      	ldrh	r3, [r0, #16]
            lv_obj_t * label = lv_list_get_btn_label(btn);
 80123ca:	4607      	mov	r7, r0
            lv_obj_set_width(label, btn->coords.x2 - label->coords.x1);
 80123cc:	1ac9      	subs	r1, r1, r3
 80123ce:	b209      	sxth	r1, r1
 80123d0:	f7f6 f9b6 	bl	8008740 <lv_obj_set_width>
            lv_label_set_text(label, NULL);
 80123d4:	2100      	movs	r1, #0
 80123d6:	4638      	mov	r0, r7
 80123d8:	f7ff fcaa 	bl	8011d30 <lv_label_set_text>
        btn = lv_list_get_prev_btn(list, btn);
 80123dc:	4629      	mov	r1, r5
 80123de:	e7e0      	b.n	80123a2 <refr_btn_width+0x30>

080123e0 <lv_list_signal>:
    res = ancestor_page_signal(list, sign, param);
 80123e0:	4b42      	ldr	r3, [pc, #264]	; (80124ec <lv_list_signal+0x10c>)
{
 80123e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = ancestor_page_signal(list, sign, param);
 80123e6:	681b      	ldr	r3, [r3, #0]
{
 80123e8:	4604      	mov	r4, r0
 80123ea:	460d      	mov	r5, r1
 80123ec:	4617      	mov	r7, r2
    res = ancestor_page_signal(list, sign, param);
 80123ee:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 80123f0:	2801      	cmp	r0, #1
    res = ancestor_page_signal(list, sign, param);
 80123f2:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
 80123f4:	d112      	bne.n	801241c <lv_list_signal+0x3c>
    lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 80123f6:	4620      	mov	r0, r4
 80123f8:	f7f6 fd3f 	bl	8008e7a <lv_obj_get_ext_attr>
    if(sign == LV_SIGNAL_CORD_CHG) {
 80123fc:	2d02      	cmp	r5, #2
    lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 80123fe:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CORD_CHG) {
 8012400:	d10f      	bne.n	8012422 <lv_list_signal+0x42>
        lv_coord_t w = lv_obj_get_width(list);
 8012402:	4620      	mov	r0, r4
 8012404:	f7f6 fc62 	bl	8008ccc <lv_obj_get_width>
    return area_p->x2 - area_p->x1 + 1;
 8012408:	88bb      	ldrh	r3, [r7, #4]
 801240a:	883a      	ldrh	r2, [r7, #0]
 801240c:	3301      	adds	r3, #1
 801240e:	1a9b      	subs	r3, r3, r2
        if(w != lv_area_get_width(param)) {   /*Width changed*/
 8012410:	b21b      	sxth	r3, r3
 8012412:	4298      	cmp	r0, r3
 8012414:	d002      	beq.n	801241c <lv_list_signal+0x3c>
            refr_btn_width(list);
 8012416:	4620      	mov	r0, r4
 8012418:	f7ff ffab 	bl	8012372 <refr_btn_width>
}
 801241c:	4630      	mov	r0, r6
 801241e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 8012422:	2d03      	cmp	r5, #3
 8012424:	d0f7      	beq.n	8012416 <lv_list_signal+0x36>
    } else if(sign == LV_SIGNAL_FOCUS) {
 8012426:	2d0e      	cmp	r5, #14
 8012428:	d11b      	bne.n	8012462 <lv_list_signal+0x82>
        lv_hal_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801242a:	f7f5 fe93 	bl	8008154 <lv_indev_get_act>
 801242e:	f7f5 fe97 	bl	8008160 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 8012432:	2804      	cmp	r0, #4
 8012434:	d10d      	bne.n	8012452 <lv_list_signal+0x72>
            lv_group_t * g = lv_obj_get_group(list);
 8012436:	4620      	mov	r0, r4
 8012438:	f7f6 fd21 	bl	8008e7e <lv_obj_get_group>
            if(lv_group_get_editing(g)) {
 801243c:	f7f5 fa87 	bl	800794e <lv_group_get_editing>
 8012440:	4601      	mov	r1, r0
 8012442:	b120      	cbz	r0, 801244e <lv_list_signal+0x6e>
                lv_list_set_btn_selected(list, lv_list_get_next_btn(list, NULL));
 8012444:	2100      	movs	r1, #0
 8012446:	4620      	mov	r0, r4
                lv_list_set_btn_selected(list, lv_list_get_next_btn(list, NULL));
 8012448:	f7ff ff56 	bl	80122f8 <lv_list_get_next_btn>
 801244c:	4601      	mov	r1, r0
                if(btn) lv_list_set_btn_selected(list, btn);
 801244e:	4620      	mov	r0, r4
 8012450:	e004      	b.n	801245c <lv_list_signal+0x7c>
            if(last_clicked_btn) {
 8012452:	4b27      	ldr	r3, [pc, #156]	; (80124f0 <lv_list_signal+0x110>)
                lv_list_set_btn_selected(list, last_clicked_btn);
 8012454:	4620      	mov	r0, r4
            if(last_clicked_btn) {
 8012456:	6819      	ldr	r1, [r3, #0]
 8012458:	2900      	cmp	r1, #0
 801245a:	d0f5      	beq.n	8012448 <lv_list_signal+0x68>
                if(btn) lv_list_set_btn_selected(list, btn);
 801245c:	f7ff fe8e 	bl	801217c <lv_list_set_btn_selected>
 8012460:	e7dc      	b.n	801241c <lv_list_signal+0x3c>
    } else if(sign == LV_SIGNAL_DEFOCUS) {
 8012462:	2d0f      	cmp	r5, #15
 8012464:	d109      	bne.n	801247a <lv_list_signal+0x9a>
        lv_list_set_btn_selected(list, NULL);
 8012466:	2100      	movs	r1, #0
 8012468:	4620      	mov	r0, r4
 801246a:	f7ff fe87 	bl	801217c <lv_list_set_btn_selected>
        last_clicked_btn = NULL;        /*button click will be set if click happens before focus*/
 801246e:	2300      	movs	r3, #0
 8012470:	4a1f      	ldr	r2, [pc, #124]	; (80124f0 <lv_list_signal+0x110>)
        ext->selected_btn = NULL;
 8012472:	f8c8 3048 	str.w	r3, [r8, #72]	; 0x48
        last_clicked_btn = NULL;        /*button click will be set if click happens before focus*/
 8012476:	6013      	str	r3, [r2, #0]
 8012478:	e7d0      	b.n	801241c <lv_list_signal+0x3c>
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 801247a:	2d11      	cmp	r5, #17
 801247c:	d101      	bne.n	8012482 <lv_list_signal+0xa2>
        *editable = true;
 801247e:	703e      	strb	r6, [r7, #0]
 8012480:	e7cc      	b.n	801241c <lv_list_signal+0x3c>
    } else if(sign == LV_SIGNAL_CONTROLL) {
 8012482:	2d10      	cmp	r5, #16
 8012484:	d1ca      	bne.n	801241c <lv_list_signal+0x3c>
        char c = *((char *)param);
 8012486:	783b      	ldrb	r3, [r7, #0]
        if(c == LV_GROUP_KEY_RIGHT || c == LV_GROUP_KEY_DOWN) {
 8012488:	f1a3 0212 	sub.w	r2, r3, #18
 801248c:	2a01      	cmp	r2, #1
 801248e:	d804      	bhi.n	801249a <lv_list_signal+0xba>
            if(ext->selected_btn) {
 8012490:	6c81      	ldr	r1, [r0, #72]	; 0x48
                lv_obj_t * btn_prev = lv_list_get_next_btn(list, ext->selected_btn);
 8012492:	4620      	mov	r0, r4
                lv_obj_t * btn = lv_list_get_next_btn(list, NULL);
 8012494:	f7ff ff30 	bl	80122f8 <lv_list_get_next_btn>
 8012498:	e00a      	b.n	80124b0 <lv_list_signal+0xd0>
        } else if(c == LV_GROUP_KEY_LEFT || c == LV_GROUP_KEY_UP) {
 801249a:	2b14      	cmp	r3, #20
 801249c:	d001      	beq.n	80124a2 <lv_list_signal+0xc2>
 801249e:	2b11      	cmp	r3, #17
 80124a0:	d10a      	bne.n	80124b8 <lv_list_signal+0xd8>
            if(ext->selected_btn != NULL) {
 80124a2:	f8d8 1048 	ldr.w	r1, [r8, #72]	; 0x48
                lv_obj_t * btn_next = lv_list_get_prev_btn(list, ext->selected_btn);
 80124a6:	4620      	mov	r0, r4
            if(ext->selected_btn != NULL) {
 80124a8:	2900      	cmp	r1, #0
 80124aa:	d0f3      	beq.n	8012494 <lv_list_signal+0xb4>
                lv_obj_t * btn_next = lv_list_get_prev_btn(list, ext->selected_btn);
 80124ac:	f7ff fecc 	bl	8012248 <lv_list_get_prev_btn>
                if(btn) lv_list_set_btn_selected(list, btn);
 80124b0:	4601      	mov	r1, r0
 80124b2:	2800      	cmp	r0, #0
 80124b4:	d1cb      	bne.n	801244e <lv_list_signal+0x6e>
 80124b6:	e7b1      	b.n	801241c <lv_list_signal+0x3c>
        } else if(c == LV_GROUP_KEY_ENTER) {
 80124b8:	2b0a      	cmp	r3, #10
 80124ba:	d1af      	bne.n	801241c <lv_list_signal+0x3c>
            btn = lv_list_get_prev_btn(list, btn);
 80124bc:	2100      	movs	r1, #0
                btn = lv_list_get_prev_btn(list, btn);
 80124be:	4620      	mov	r0, r4
 80124c0:	f7ff fec2 	bl	8012248 <lv_list_get_prev_btn>
 80124c4:	4605      	mov	r5, r0
            while(btn != NULL) {
 80124c6:	2800      	cmp	r0, #0
 80124c8:	d0a8      	beq.n	801241c <lv_list_signal+0x3c>
                if(lv_btn_get_state(btn) == LV_BTN_STATE_PR) break;
 80124ca:	4628      	mov	r0, r5
 80124cc:	f7fc fd74 	bl	800efb8 <lv_btn_get_state>
 80124d0:	2801      	cmp	r0, #1
 80124d2:	d001      	beq.n	80124d8 <lv_list_signal+0xf8>
                btn = lv_list_get_prev_btn(list, btn);
 80124d4:	4629      	mov	r1, r5
 80124d6:	e7f2      	b.n	80124be <lv_list_signal+0xde>
                rel_action = lv_btn_get_action(btn, LV_BTN_ACTION_CLICK);
 80124d8:	2100      	movs	r1, #0
 80124da:	4628      	mov	r0, r5
 80124dc:	f7fc fe5c 	bl	800f198 <lv_btn_get_action>
                if(rel_action != NULL) rel_action(btn);
 80124e0:	4603      	mov	r3, r0
 80124e2:	2800      	cmp	r0, #0
 80124e4:	d09a      	beq.n	801241c <lv_list_signal+0x3c>
 80124e6:	4628      	mov	r0, r5
 80124e8:	4798      	blx	r3
 80124ea:	e797      	b.n	801241c <lv_list_signal+0x3c>
 80124ec:	20017420 	.word	0x20017420
 80124f0:	2001742c 	.word	0x2001742c

080124f4 <lv_list_set_style>:
{
 80124f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124f8:	460f      	mov	r7, r1
 80124fa:	4606      	mov	r6, r0
 80124fc:	4614      	mov	r4, r2
    lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 80124fe:	f7f6 fcbc 	bl	8008e7a <lv_obj_get_ext_attr>
 8012502:	4605      	mov	r5, r0
    switch(type) {
 8012504:	2f07      	cmp	r7, #7
 8012506:	d813      	bhi.n	8012530 <lv_list_set_style+0x3c>
 8012508:	e8df f007 	tbb	[pc, r7]
 801250c:	17140a04 	.word	0x17140a04
 8012510:	2e2b2819 	.word	0x2e2b2819
            lv_page_set_style(list, LV_PAGE_STYLE_BG, style);
 8012514:	4622      	mov	r2, r4
 8012516:	2100      	movs	r1, #0
            lv_page_set_style(list, LV_PAGE_STYLE_SB, style);
 8012518:	4630      	mov	r0, r6
 801251a:	f000 fe1e 	bl	801315a <lv_page_set_style>
 801251e:	e007      	b.n	8012530 <lv_list_set_style+0x3c>
            lv_page_set_style(list, LV_PAGE_STYLE_SCRL, style);
 8012520:	4630      	mov	r0, r6
 8012522:	4622      	mov	r2, r4
 8012524:	2101      	movs	r1, #1
 8012526:	f000 fe18 	bl	801315a <lv_page_set_style>
            refr_btn_width(list);
 801252a:	4630      	mov	r0, r6
 801252c:	f7ff ff21 	bl	8012372 <refr_btn_width>
    lv_btn_style_t btn_style_refr = LV_BTN_STYLE_REL;
 8012530:	2400      	movs	r4, #0
 8012532:	e006      	b.n	8012542 <lv_list_set_style+0x4e>
            lv_page_set_style(list, LV_PAGE_STYLE_SB, style);
 8012534:	4622      	mov	r2, r4
 8012536:	2102      	movs	r1, #2
 8012538:	e7ee      	b.n	8012518 <lv_list_set_style+0x24>
            ext->styles_btn[LV_BTN_STATE_REL] = style;
 801253a:	6304      	str	r4, [r0, #48]	; 0x30
 801253c:	e7f8      	b.n	8012530 <lv_list_set_style+0x3c>
            ext->styles_btn[LV_BTN_STATE_PR] = style;
 801253e:	6344      	str	r4, [r0, #52]	; 0x34
            btn_style_refr = LV_BTN_STYLE_PR;
 8012540:	2401      	movs	r4, #1
    if(type == LV_LIST_STYLE_BTN_PR || type == LV_LIST_STYLE_BTN_REL ||
 8012542:	3f03      	subs	r7, #3
 8012544:	2f04      	cmp	r7, #4
 8012546:	d807      	bhi.n	8012558 <lv_list_set_style+0x64>
        btn = lv_list_get_prev_btn(list, NULL);
 8012548:	2100      	movs	r1, #0
 801254a:	4630      	mov	r0, r6
 801254c:	f7ff fe7c 	bl	8012248 <lv_list_get_prev_btn>
            lv_btn_set_style(btn, btn_style_refr, ext->styles_btn[btn_style_refr]);
 8012550:	f104 080c 	add.w	r8, r4, #12
        btn = lv_list_get_prev_btn(list, NULL);
 8012554:	4607      	mov	r7, r0
        while(btn != NULL) {
 8012556:	b957      	cbnz	r7, 801256e <lv_list_set_style+0x7a>
 8012558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            ext->styles_btn[LV_BTN_STATE_TGL_REL] = style;
 801255c:	6384      	str	r4, [r0, #56]	; 0x38
            btn_style_refr = LV_BTN_STYLE_TGL_REL;
 801255e:	2402      	movs	r4, #2
            break;
 8012560:	e7ef      	b.n	8012542 <lv_list_set_style+0x4e>
            ext->styles_btn[LV_BTN_STATE_TGL_PR] = style;
 8012562:	63c4      	str	r4, [r0, #60]	; 0x3c
            btn_style_refr = LV_BTN_STYLE_TGL_PR;
 8012564:	2403      	movs	r4, #3
            break;
 8012566:	e7ec      	b.n	8012542 <lv_list_set_style+0x4e>
            ext->styles_btn[LV_BTN_STATE_INA] = style;
 8012568:	6404      	str	r4, [r0, #64]	; 0x40
            btn_style_refr = LV_BTN_STYLE_INA;
 801256a:	2404      	movs	r4, #4
            break;
 801256c:	e7e9      	b.n	8012542 <lv_list_set_style+0x4e>
            lv_btn_set_style(btn, btn_style_refr, ext->styles_btn[btn_style_refr]);
 801256e:	4638      	mov	r0, r7
 8012570:	f855 2028 	ldr.w	r2, [r5, r8, lsl #2]
 8012574:	4621      	mov	r1, r4
 8012576:	f7fc fc5c 	bl	800ee32 <lv_btn_set_style>
            btn = lv_list_get_prev_btn(list, btn);
 801257a:	4639      	mov	r1, r7
 801257c:	4630      	mov	r0, r6
 801257e:	f7ff fe63 	bl	8012248 <lv_list_get_prev_btn>
 8012582:	4607      	mov	r7, r0
 8012584:	e7e7      	b.n	8012556 <lv_list_set_style+0x62>
	...

08012588 <lv_list_create>:
{
 8012588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801258c:	460e      	mov	r6, r1
    lv_obj_t * new_list = lv_page_create(par, copy);
 801258e:	f000 fe35 	bl	80131fc <lv_page_create>
    lv_mem_assert(new_list);
 8012592:	4604      	mov	r4, r0
 8012594:	b900      	cbnz	r0, 8012598 <lv_list_create+0x10>
 8012596:	e7fe      	b.n	8012596 <lv_list_create+0xe>
    if(ancestor_page_signal == NULL) ancestor_page_signal = lv_obj_get_signal_func(new_list);
 8012598:	4d56      	ldr	r5, [pc, #344]	; (80126f4 <lv_list_create+0x16c>)
 801259a:	682b      	ldr	r3, [r5, #0]
 801259c:	b913      	cbnz	r3, 80125a4 <lv_list_create+0x1c>
 801259e:	f7f6 fc68 	bl	8008e72 <lv_obj_get_signal_func>
 80125a2:	6028      	str	r0, [r5, #0]
    lv_list_ext_t * ext = lv_obj_allocate_ext_attr(new_list, sizeof(lv_list_ext_t));
 80125a4:	214c      	movs	r1, #76	; 0x4c
 80125a6:	4620      	mov	r0, r4
 80125a8:	f7f6 fa6a 	bl	8008a80 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 80125ac:	b900      	cbnz	r0, 80125b0 <lv_list_create+0x28>
 80125ae:	e7fe      	b.n	80125ae <lv_list_create+0x26>
    ext->styles_btn[LV_BTN_STATE_REL] = &lv_style_btn_rel;
 80125b0:	4b51      	ldr	r3, [pc, #324]	; (80126f8 <lv_list_create+0x170>)
    ext->style_img = NULL;
 80125b2:	2500      	movs	r5, #0
    lv_obj_set_signal_func(new_list, lv_list_signal);
 80125b4:	4951      	ldr	r1, [pc, #324]	; (80126fc <lv_list_create+0x174>)
    ext->styles_btn[LV_BTN_STATE_REL] = &lv_style_btn_rel;
 80125b6:	6303      	str	r3, [r0, #48]	; 0x30
    ext->styles_btn[LV_BTN_STATE_PR] = &lv_style_btn_pr;
 80125b8:	4b51      	ldr	r3, [pc, #324]	; (8012700 <lv_list_create+0x178>)
    ext->style_img = NULL;
 80125ba:	6445      	str	r5, [r0, #68]	; 0x44
    ext->styles_btn[LV_BTN_STATE_PR] = &lv_style_btn_pr;
 80125bc:	6343      	str	r3, [r0, #52]	; 0x34
    ext->styles_btn[LV_BTN_STATE_TGL_REL] = &lv_style_btn_tgl_rel;
 80125be:	4b51      	ldr	r3, [pc, #324]	; (8012704 <lv_list_create+0x17c>)
    ext->selected_btn = NULL;
 80125c0:	6485      	str	r5, [r0, #72]	; 0x48
    ext->styles_btn[LV_BTN_STATE_TGL_REL] = &lv_style_btn_tgl_rel;
 80125c2:	6383      	str	r3, [r0, #56]	; 0x38
    ext->styles_btn[LV_BTN_STATE_TGL_PR] = &lv_style_btn_tgl_pr;
 80125c4:	4b50      	ldr	r3, [pc, #320]	; (8012708 <lv_list_create+0x180>)
 80125c6:	63c3      	str	r3, [r0, #60]	; 0x3c
    ext->styles_btn[LV_BTN_STATE_INA] = &lv_style_btn_ina;
 80125c8:	4b50      	ldr	r3, [pc, #320]	; (801270c <lv_list_create+0x184>)
 80125ca:	6403      	str	r3, [r0, #64]	; 0x40
    ext->anim_time = LV_LIST_FOCUS_TIME;
 80125cc:	2364      	movs	r3, #100	; 0x64
 80125ce:	8583      	strh	r3, [r0, #44]	; 0x2c
    lv_obj_set_signal_func(new_list, lv_list_signal);
 80125d0:	4620      	mov	r0, r4
 80125d2:	f7f6 fa51 	bl	8008a78 <lv_obj_set_signal_func>
    if(copy == NULL) {
 80125d6:	2e00      	cmp	r6, #0
 80125d8:	d14e      	bne.n	8012678 <lv_list_create+0xf0>
        lv_obj_set_size(new_list, 2 * LV_DPI, 3 * LV_DPI);
 80125da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80125de:	21c8      	movs	r1, #200	; 0xc8
 80125e0:	4620      	mov	r0, r4
 80125e2:	f7f6 f87a 	bl	80086da <lv_obj_set_size>
* @param page pointer to a page object
* @param layout a layout from 'lv_cont_layout_t'
*/
static inline void lv_page_set_scrl_layout(lv_obj_t * page, lv_layout_t layout)
{
    lv_cont_set_layout(lv_page_get_scrl(page), layout);
 80125e6:	4620      	mov	r0, r4
 80125e8:	f000 fde5 	bl	80131b6 <lv_page_get_scrl>
 80125ec:	2103      	movs	r1, #3
 80125ee:	f7fe f867 	bl	80106c0 <lv_cont_set_layout>
 * @param list pointer to a list object
 * @param sb_mode the new mode from 'lv_page_sb_mode_t' enum
 */
static inline void lv_list_set_sb_mode(lv_obj_t * list, lv_sb_mode_t mode)
{
    lv_page_set_sb_mode(list, mode);
 80125f2:	2102      	movs	r1, #2
 80125f4:	4620      	mov	r0, r4
 80125f6:	f000 fd73 	bl	80130e0 <lv_page_set_sb_mode>
        lv_theme_t * th = lv_theme_get_current();
 80125fa:	f003 fa3b 	bl	8015a74 <lv_theme_get_current>
        if(th) {
 80125fe:	4605      	mov	r5, r0
 8012600:	b390      	cbz	r0, 8012668 <lv_list_create+0xe0>
            lv_list_set_style(new_list, LV_LIST_STYLE_BG, th->list.bg);
 8012602:	f8d0 20e0 	ldr.w	r2, [r0, #224]	; 0xe0
 8012606:	4631      	mov	r1, r6
 8012608:	4620      	mov	r0, r4
 801260a:	f7ff ff73 	bl	80124f4 <lv_list_set_style>
            lv_list_set_style(new_list, LV_LIST_STYLE_SCRL, th->list.scrl);
 801260e:	f8d5 20e4 	ldr.w	r2, [r5, #228]	; 0xe4
 8012612:	2101      	movs	r1, #1
 8012614:	4620      	mov	r0, r4
 8012616:	f7ff ff6d 	bl	80124f4 <lv_list_set_style>
            lv_list_set_style(new_list, LV_LIST_STYLE_SB, th->list.sb);
 801261a:	f8d5 20e8 	ldr.w	r2, [r5, #232]	; 0xe8
 801261e:	2102      	movs	r1, #2
 8012620:	4620      	mov	r0, r4
 8012622:	f7ff ff67 	bl	80124f4 <lv_list_set_style>
            lv_list_set_style(new_list, LV_LIST_STYLE_BTN_REL, th->list.btn.rel);
 8012626:	f8d5 20ec 	ldr.w	r2, [r5, #236]	; 0xec
 801262a:	2103      	movs	r1, #3
 801262c:	4620      	mov	r0, r4
 801262e:	f7ff ff61 	bl	80124f4 <lv_list_set_style>
            lv_list_set_style(new_list, LV_LIST_STYLE_BTN_PR, th->list.btn.pr);
 8012632:	f8d5 20f0 	ldr.w	r2, [r5, #240]	; 0xf0
 8012636:	2104      	movs	r1, #4
 8012638:	4620      	mov	r0, r4
 801263a:	f7ff ff5b 	bl	80124f4 <lv_list_set_style>
            lv_list_set_style(new_list, LV_LIST_STYLE_BTN_TGL_REL, th->list.btn.tgl_rel);
 801263e:	f8d5 20f4 	ldr.w	r2, [r5, #244]	; 0xf4
 8012642:	2105      	movs	r1, #5
 8012644:	4620      	mov	r0, r4
 8012646:	f7ff ff55 	bl	80124f4 <lv_list_set_style>
            lv_list_set_style(new_list, LV_LIST_STYLE_BTN_TGL_PR, th->list.btn.tgl_pr);
 801264a:	f8d5 20f8 	ldr.w	r2, [r5, #248]	; 0xf8
 801264e:	2106      	movs	r1, #6
 8012650:	4620      	mov	r0, r4
 8012652:	f7ff ff4f 	bl	80124f4 <lv_list_set_style>
            lv_list_set_style(new_list, LV_LIST_STYLE_BTN_INA, th->list.btn.ina);
 8012656:	f8d5 20fc 	ldr.w	r2, [r5, #252]	; 0xfc
 801265a:	2107      	movs	r1, #7
            lv_list_set_style(new_list, LV_LIST_STYLE_SCRL, &lv_style_pretty);
 801265c:	4620      	mov	r0, r4
 801265e:	f7ff ff49 	bl	80124f4 <lv_list_set_style>
}
 8012662:	4620      	mov	r0, r4
 8012664:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            lv_list_set_style(new_list, LV_LIST_STYLE_BG, &lv_style_transp_fit);
 8012668:	4a29      	ldr	r2, [pc, #164]	; (8012710 <lv_list_create+0x188>)
 801266a:	4631      	mov	r1, r6
 801266c:	4620      	mov	r0, r4
 801266e:	f7ff ff41 	bl	80124f4 <lv_list_set_style>
            lv_list_set_style(new_list, LV_LIST_STYLE_SCRL, &lv_style_pretty);
 8012672:	4a28      	ldr	r2, [pc, #160]	; (8012714 <lv_list_create+0x18c>)
 8012674:	2101      	movs	r1, #1
 8012676:	e7f1      	b.n	801265c <lv_list_create+0xd4>
        lv_list_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8012678:	4630      	mov	r0, r6
 801267a:	f7f6 fbfe 	bl	8008e7a <lv_obj_get_ext_attr>
 801267e:	4607      	mov	r7, r0
            copy_btn = lv_list_get_next_btn(copy, copy_btn);
 8012680:	4629      	mov	r1, r5
 8012682:	4630      	mov	r0, r6
 8012684:	f7ff fe38 	bl	80122f8 <lv_list_get_next_btn>
 8012688:	4605      	mov	r5, r0
        while(copy_btn) {
 801268a:	b9e0      	cbnz	r0, 80126c6 <lv_list_create+0x13e>
        lv_list_set_style(new_list, LV_LIST_STYLE_BTN_REL, copy_ext->styles_btn[LV_BTN_STATE_REL]);
 801268c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801268e:	4620      	mov	r0, r4
 8012690:	2103      	movs	r1, #3
 8012692:	f7ff ff2f 	bl	80124f4 <lv_list_set_style>
        lv_list_set_style(new_list, LV_LIST_STYLE_BTN_PR, copy_ext->styles_btn[LV_BTN_STATE_PR]);
 8012696:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012698:	4620      	mov	r0, r4
 801269a:	2104      	movs	r1, #4
 801269c:	f7ff ff2a 	bl	80124f4 <lv_list_set_style>
        lv_list_set_style(new_list, LV_LIST_STYLE_BTN_TGL_REL, copy_ext->styles_btn[LV_BTN_STATE_TGL_REL]);
 80126a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80126a2:	4620      	mov	r0, r4
 80126a4:	2105      	movs	r1, #5
 80126a6:	f7ff ff25 	bl	80124f4 <lv_list_set_style>
        lv_list_set_style(new_list, LV_LIST_STYLE_BTN_TGL_PR, copy_ext->styles_btn[LV_BTN_STATE_TGL_REL]);
 80126aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80126ac:	4620      	mov	r0, r4
 80126ae:	2106      	movs	r1, #6
 80126b0:	f7ff ff20 	bl	80124f4 <lv_list_set_style>
        lv_list_set_style(new_list, LV_LIST_STYLE_BTN_INA, copy_ext->styles_btn[LV_BTN_STATE_INA]);
 80126b4:	4620      	mov	r0, r4
 80126b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80126b8:	2107      	movs	r1, #7
 80126ba:	f7ff ff1b 	bl	80124f4 <lv_list_set_style>
        lv_obj_refresh_style(new_list);
 80126be:	4620      	mov	r0, r4
 80126c0:	f7f6 f99c 	bl	80089fc <lv_obj_refresh_style>
 80126c4:	e7cd      	b.n	8012662 <lv_list_create+0xda>
            lv_obj_t * copy_img = lv_list_get_btn_img(copy_btn);
 80126c6:	4628      	mov	r0, r5
 80126c8:	f7ff fda6 	bl	8012218 <lv_list_get_btn_img>
            if(copy_img) img_src = lv_img_get_src(copy_img);
 80126cc:	4680      	mov	r8, r0
 80126ce:	b110      	cbz	r0, 80126d6 <lv_list_create+0x14e>
 80126d0:	f7fe fba8 	bl	8010e24 <lv_img_get_src>
 80126d4:	4680      	mov	r8, r0
            lv_list_add(new_list, img_src, lv_list_get_btn_text(copy_btn), lv_btn_get_action(copy_btn, LV_BTN_ACTION_CLICK));
 80126d6:	4628      	mov	r0, r5
 80126d8:	f7ff fd92 	bl	8012200 <lv_list_get_btn_text>
 80126dc:	4681      	mov	r9, r0
 80126de:	2100      	movs	r1, #0
 80126e0:	4628      	mov	r0, r5
 80126e2:	f7fc fd59 	bl	800f198 <lv_btn_get_action>
 80126e6:	464a      	mov	r2, r9
 80126e8:	4603      	mov	r3, r0
 80126ea:	4641      	mov	r1, r8
 80126ec:	4620      	mov	r0, r4
 80126ee:	f7ff fca1 	bl	8012034 <lv_list_add>
 80126f2:	e7c5      	b.n	8012680 <lv_list_create+0xf8>
 80126f4:	20017420 	.word	0x20017420
 80126f8:	20017c10 	.word	0x20017c10
 80126fc:	080123e1 	.word	0x080123e1
 8012700:	20017c58 	.word	0x20017c58
 8012704:	20017e08 	.word	0x20017e08
 8012708:	20017e98 	.word	0x20017e98
 801270c:	20017d30 	.word	0x20017d30
 8012710:	20017d78 	.word	0x20017d78
 8012714:	20017ca0 	.word	0x20017ca0

08012718 <lv_mbox_start_auto_close>:
 * Automatically delete the message box after a given time
 * @param mbox pointer to a message box object
 * @param delay a time (in milliseconds) to wait before delete the message box
 */
void lv_mbox_start_auto_close(lv_obj_t * mbox, uint16_t delay)
{
 8012718:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801271c:	4604      	mov	r4, r0
 801271e:	460d      	mov	r5, r1
#if USE_LV_ANIMATION
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 8012720:	f7f6 fbab 	bl	8008e7a <lv_obj_get_ext_attr>

    if(ext->anim_time != 0) {
 8012724:	8982      	ldrh	r2, [r0, #12]
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 8012726:	4680      	mov	r8, r0
 8012728:	4e10      	ldr	r6, [pc, #64]	; (801276c <lv_mbox_start_auto_close+0x54>)
    if(ext->anim_time != 0) {
 801272a:	b1b2      	cbz	r2, 801275a <lv_mbox_start_auto_close+0x42>
        /*Add shrinking animations*/
        lv_obj_animate(mbox, LV_ANIM_GROW_H | LV_ANIM_OUT, ext->anim_time, delay, NULL);
 801272c:	2700      	movs	r7, #0
 801272e:	462b      	mov	r3, r5
 8012730:	4620      	mov	r0, r4
 8012732:	2185      	movs	r1, #133	; 0x85
 8012734:	9700      	str	r7, [sp, #0]
 8012736:	f7f6 f9b7 	bl	8008aa8 <lv_obj_animate>
        lv_obj_animate(mbox, LV_ANIM_GROW_V | LV_ANIM_OUT, ext->anim_time, delay, (void (*)(lv_obj_t *))lv_obj_del);
 801273a:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 801273e:	4620      	mov	r0, r4
 8012740:	9600      	str	r6, [sp, #0]
 8012742:	462b      	mov	r3, r5
 8012744:	2186      	movs	r1, #134	; 0x86
 8012746:	f7f6 f9af 	bl	8008aa8 <lv_obj_animate>

        /*Disable fit to let shrinking work*/
        lv_cont_set_fit(mbox, false, false);
 801274a:	463a      	mov	r2, r7
 801274c:	4639      	mov	r1, r7
 801274e:	4620      	mov	r0, r4
        lv_obj_animate(mbox, LV_ANIM_NONE, ext->anim_time, delay, (void (*)(lv_obj_t *))lv_obj_del);
    }
#else
    lv_obj_del(mbox);
#endif
}
 8012750:	b002      	add	sp, #8
 8012752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        lv_cont_set_fit(mbox, false, false);
 8012756:	f7fd bfc8 	b.w	80106ea <lv_cont_set_fit>
        lv_obj_animate(mbox, LV_ANIM_NONE, ext->anim_time, delay, (void (*)(lv_obj_t *))lv_obj_del);
 801275a:	462b      	mov	r3, r5
 801275c:	4611      	mov	r1, r2
 801275e:	4620      	mov	r0, r4
 8012760:	9600      	str	r6, [sp, #0]
 8012762:	f7f6 f9a1 	bl	8008aa8 <lv_obj_animate>
}
 8012766:	b002      	add	sp, #8
 8012768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801276c:	08008355 	.word	0x08008355

08012770 <lv_mbox_close_action>:
        lv_obj_set_size(ext->btnm, w, font_h + 2 * btn_rel_style->body.padding.ver + 2 * btn_bg_style->body.padding.ver);
    }
}

static lv_res_t lv_mbox_close_action(lv_obj_t * btn, const char * txt)
{
 8012770:	b510      	push	{r4, lr}
 8012772:	460c      	mov	r4, r1
    lv_obj_t * mbox = lv_obj_get_parent(btn);
 8012774:	f7f6 fa24 	bl	8008bc0 <lv_obj_get_parent>
    lv_obj_t * mbox = lv_mbox_get_from_btn(btn);

    if(txt[0] != '\0') {
 8012778:	7823      	ldrb	r3, [r4, #0]
 801277a:	b123      	cbz	r3, 8012786 <lv_mbox_close_action+0x16>
        lv_mbox_start_auto_close(mbox, 0);
 801277c:	2100      	movs	r1, #0
 801277e:	f7ff ffcb 	bl	8012718 <lv_mbox_start_auto_close>
        return LV_RES_INV;
 8012782:	2000      	movs	r0, #0
 8012784:	bd10      	pop	{r4, pc}
    }

    return LV_RES_OK;
 8012786:	2001      	movs	r0, #1
}
 8012788:	bd10      	pop	{r4, pc}

0801278a <lv_mbox_set_style>:
{
 801278a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801278c:	460c      	mov	r4, r1
 801278e:	9201      	str	r2, [sp, #4]
 8012790:	4605      	mov	r5, r0
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 8012792:	f7f6 fb72 	bl	8008e7a <lv_obj_get_ext_attr>
    switch(type) {
 8012796:	9a01      	ldr	r2, [sp, #4]
 8012798:	2c06      	cmp	r4, #6
 801279a:	d81d      	bhi.n	80127d8 <lv_mbox_set_style+0x4e>
 801279c:	e8df f004 	tbb	[pc, r4]
 80127a0:	14120b04 	.word	0x14120b04
 80127a4:	1816      	.short	0x1816
 80127a6:	1a          	.byte	0x1a
 80127a7:	00          	.byte	0x00
            lv_obj_set_style(mbox, style);
 80127a8:	4611      	mov	r1, r2
 80127aa:	4628      	mov	r0, r5
}
 80127ac:	b003      	add	sp, #12
 80127ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            lv_obj_set_style(mbox, style);
 80127b2:	f7f6 ba29 	b.w	8008c08 <lv_obj_set_style>
            lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BG, style);
 80127b6:	2100      	movs	r1, #0
            lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_INA, style);
 80127b8:	6880      	ldr	r0, [r0, #8]
}
 80127ba:	b003      	add	sp, #12
 80127bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_INA, style);
 80127c0:	f7fc be9c 	b.w	800f4fc <lv_btnm_set_style>
            lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_REL, style);
 80127c4:	2101      	movs	r1, #1
 80127c6:	e7f7      	b.n	80127b8 <lv_mbox_set_style+0x2e>
            lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_PR, style);
 80127c8:	2102      	movs	r1, #2
 80127ca:	e7f5      	b.n	80127b8 <lv_mbox_set_style+0x2e>
            lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_TGL_REL, style);
 80127cc:	2103      	movs	r1, #3
 80127ce:	e7f3      	b.n	80127b8 <lv_mbox_set_style+0x2e>
            lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_TGL_PR, style);
 80127d0:	2104      	movs	r1, #4
 80127d2:	e7f1      	b.n	80127b8 <lv_mbox_set_style+0x2e>
            lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_INA, style);
 80127d4:	2105      	movs	r1, #5
 80127d6:	e7ef      	b.n	80127b8 <lv_mbox_set_style+0x2e>
}
 80127d8:	b003      	add	sp, #12
 80127da:	bd30      	pop	{r4, r5, pc}

080127dc <lv_mbox_create>:
{
 80127dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80127de:	460d      	mov	r5, r1
    lv_obj_t * new_mbox = lv_cont_create(par, copy);
 80127e0:	f7fd ff20 	bl	8010624 <lv_cont_create>
    lv_mem_assert(new_mbox);
 80127e4:	4604      	mov	r4, r0
 80127e6:	b900      	cbnz	r0, 80127ea <lv_mbox_create+0xe>
 80127e8:	e7fe      	b.n	80127e8 <lv_mbox_create+0xc>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_mbox);
 80127ea:	4e2e      	ldr	r6, [pc, #184]	; (80128a4 <lv_mbox_create+0xc8>)
 80127ec:	6833      	ldr	r3, [r6, #0]
 80127ee:	b913      	cbnz	r3, 80127f6 <lv_mbox_create+0x1a>
 80127f0:	f7f6 fb3f 	bl	8008e72 <lv_obj_get_signal_func>
 80127f4:	6030      	str	r0, [r6, #0]
    lv_mbox_ext_t * ext = lv_obj_allocate_ext_attr(new_mbox, sizeof(lv_mbox_ext_t));
 80127f6:	2110      	movs	r1, #16
 80127f8:	4620      	mov	r0, r4
 80127fa:	f7f6 f941 	bl	8008a80 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 80127fe:	4606      	mov	r6, r0
 8012800:	b900      	cbnz	r0, 8012804 <lv_mbox_create+0x28>
 8012802:	e7fe      	b.n	8012802 <lv_mbox_create+0x26>
    ext->text = NULL;
 8012804:	2300      	movs	r3, #0
    lv_obj_set_signal_func(new_mbox, lv_mbox_signal);
 8012806:	4928      	ldr	r1, [pc, #160]	; (80128a8 <lv_mbox_create+0xcc>)
    ext->text = NULL;
 8012808:	6043      	str	r3, [r0, #4]
    ext->btnm = NULL;
 801280a:	6083      	str	r3, [r0, #8]
    ext->anim_time = LV_MBOX_CLOSE_ANIM_TIME;
 801280c:	23c8      	movs	r3, #200	; 0xc8
 801280e:	8183      	strh	r3, [r0, #12]
    lv_obj_set_signal_func(new_mbox, lv_mbox_signal);
 8012810:	4620      	mov	r0, r4
 8012812:	f7f6 f931 	bl	8008a78 <lv_obj_set_signal_func>
    if(copy == NULL) {
 8012816:	bb8d      	cbnz	r5, 801287c <lv_mbox_create+0xa0>
        ext->text = lv_label_create(new_mbox, NULL);
 8012818:	4629      	mov	r1, r5
 801281a:	4620      	mov	r0, r4
 801281c:	f7ff fb2c 	bl	8011e78 <lv_label_create>
        lv_label_set_align(ext->text, LV_LABEL_ALIGN_CENTER);
 8012820:	2101      	movs	r1, #1
        ext->text = lv_label_create(new_mbox, NULL);
 8012822:	6070      	str	r0, [r6, #4]
        lv_label_set_align(ext->text, LV_LABEL_ALIGN_CENTER);
 8012824:	f7fe fe90 	bl	8011548 <lv_label_set_align>
        lv_label_set_long_mode(ext->text, LV_LABEL_LONG_BREAK);
 8012828:	2101      	movs	r1, #1
 801282a:	6870      	ldr	r0, [r6, #4]
 801282c:	f7ff fad4 	bl	8011dd8 <lv_label_set_long_mode>
        lv_label_set_text(ext->text, "Message");
 8012830:	491e      	ldr	r1, [pc, #120]	; (80128ac <lv_mbox_create+0xd0>)
 8012832:	6870      	ldr	r0, [r6, #4]
 8012834:	f7ff fa7c 	bl	8011d30 <lv_label_set_text>
        lv_cont_set_layout(new_mbox, LV_LAYOUT_COL_M);
 8012838:	2103      	movs	r1, #3
 801283a:	4620      	mov	r0, r4
 801283c:	f7fd ff40 	bl	80106c0 <lv_cont_set_layout>
        lv_cont_set_fit(new_mbox, false, true);
 8012840:	2201      	movs	r2, #1
 8012842:	4629      	mov	r1, r5
 8012844:	4620      	mov	r0, r4
 8012846:	f7fd ff50 	bl	80106ea <lv_cont_set_fit>
        lv_obj_set_width(new_mbox, LV_HOR_RES / 2);
 801284a:	21f0      	movs	r1, #240	; 0xf0
 801284c:	4620      	mov	r0, r4
 801284e:	f7f5 ff77 	bl	8008740 <lv_obj_set_width>
        lv_obj_align(new_mbox, NULL, LV_ALIGN_CENTER, 0, 0);
 8012852:	462b      	mov	r3, r5
 8012854:	462a      	mov	r2, r5
 8012856:	4629      	mov	r1, r5
 8012858:	4620      	mov	r0, r4
 801285a:	9500      	str	r5, [sp, #0]
 801285c:	f7f5 ff7f 	bl	800875e <lv_obj_align>
        lv_theme_t * th = lv_theme_get_current();
 8012860:	f003 f908 	bl	8015a74 <lv_theme_get_current>
        if(th) {
 8012864:	b140      	cbz	r0, 8012878 <lv_mbox_create+0x9c>
            lv_mbox_set_style(new_mbox, LV_MBOX_STYLE_BG, th->mbox.bg);
 8012866:	f8d0 20b4 	ldr.w	r2, [r0, #180]	; 0xb4
            lv_mbox_set_style(new_mbox, LV_MBOX_STYLE_BG, &lv_style_pretty);
 801286a:	4629      	mov	r1, r5
 801286c:	4620      	mov	r0, r4
 801286e:	f7ff ff8c 	bl	801278a <lv_mbox_set_style>
}
 8012872:	4620      	mov	r0, r4
 8012874:	b002      	add	sp, #8
 8012876:	bd70      	pop	{r4, r5, r6, pc}
            lv_mbox_set_style(new_mbox, LV_MBOX_STYLE_BG, &lv_style_pretty);
 8012878:	4a0d      	ldr	r2, [pc, #52]	; (80128b0 <lv_mbox_create+0xd4>)
 801287a:	e7f6      	b.n	801286a <lv_mbox_create+0x8e>
        lv_mbox_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801287c:	4628      	mov	r0, r5
 801287e:	f7f6 fafc 	bl	8008e7a <lv_obj_get_ext_attr>
 8012882:	4605      	mov	r5, r0
        ext->text = lv_label_create(new_mbox, copy_ext->text);
 8012884:	6841      	ldr	r1, [r0, #4]
 8012886:	4620      	mov	r0, r4
 8012888:	f7ff faf6 	bl	8011e78 <lv_label_create>
        if(copy_ext->btnm) ext->btnm = lv_btnm_create(new_mbox, copy_ext->btnm);
 801288c:	68a9      	ldr	r1, [r5, #8]
        ext->text = lv_label_create(new_mbox, copy_ext->text);
 801288e:	6070      	str	r0, [r6, #4]
        if(copy_ext->btnm) ext->btnm = lv_btnm_create(new_mbox, copy_ext->btnm);
 8012890:	b119      	cbz	r1, 801289a <lv_mbox_create+0xbe>
 8012892:	4620      	mov	r0, r4
 8012894:	f7fc ffac 	bl	800f7f0 <lv_btnm_create>
 8012898:	60b0      	str	r0, [r6, #8]
        lv_obj_refresh_style(new_mbox);
 801289a:	4620      	mov	r0, r4
 801289c:	f7f6 f8ae 	bl	80089fc <lv_obj_refresh_style>
 80128a0:	e7e7      	b.n	8012872 <lv_mbox_create+0x96>
 80128a2:	bf00      	nop
 80128a4:	20017430 	.word	0x20017430
 80128a8:	08012961 	.word	0x08012961
 80128ac:	08087fd5 	.word	0x08087fd5
 80128b0:	20017ca0 	.word	0x20017ca0

080128b4 <lv_mbox_get_style>:
{
 80128b4:	b538      	push	{r3, r4, r5, lr}
 80128b6:	460c      	mov	r4, r1
 80128b8:	4605      	mov	r5, r0
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 80128ba:	f7f6 fade 	bl	8008e7a <lv_obj_get_ext_attr>
    switch(type) {
 80128be:	2c06      	cmp	r4, #6
 80128c0:	d81a      	bhi.n	80128f8 <lv_mbox_get_style+0x44>
 80128c2:	e8df f004 	tbb	[pc, r4]
 80128c6:	0904      	.short	0x0904
 80128c8:	1513110f 	.word	0x1513110f
 80128cc:	17          	.byte	0x17
 80128cd:	00          	.byte	0x00
            return lv_obj_get_style(mbox);
 80128ce:	4628      	mov	r0, r5
}
 80128d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            return lv_obj_get_style(mbox);
 80128d4:	f7f6 ba06 	b.w	8008ce4 <lv_obj_get_style>
            return lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BG);
 80128d8:	2100      	movs	r1, #0
            return lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_INA);
 80128da:	6880      	ldr	r0, [r0, #8]
}
 80128dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            return lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_INA);
 80128e0:	f7fc be33 	b.w	800f54a <lv_btnm_get_style>
            return lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_REL);
 80128e4:	2101      	movs	r1, #1
 80128e6:	e7f8      	b.n	80128da <lv_mbox_get_style+0x26>
            return lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_PR);
 80128e8:	2102      	movs	r1, #2
 80128ea:	e7f6      	b.n	80128da <lv_mbox_get_style+0x26>
            return lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_TGL_REL);
 80128ec:	2103      	movs	r1, #3
 80128ee:	e7f4      	b.n	80128da <lv_mbox_get_style+0x26>
            return lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_TGL_PR);
 80128f0:	2104      	movs	r1, #4
 80128f2:	e7f2      	b.n	80128da <lv_mbox_get_style+0x26>
            return lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_INA);
 80128f4:	2105      	movs	r1, #5
 80128f6:	e7f0      	b.n	80128da <lv_mbox_get_style+0x26>
}
 80128f8:	2000      	movs	r0, #0
 80128fa:	bd38      	pop	{r3, r4, r5, pc}

080128fc <mbox_realign>:
{
 80128fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128fe:	4605      	mov	r5, r0
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 8012900:	f7f6 fabb 	bl	8008e7a <lv_obj_get_ext_attr>
    lv_style_t * style = lv_mbox_get_style(mbox, LV_MBOX_STYLE_BG);
 8012904:	2100      	movs	r1, #0
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 8012906:	4606      	mov	r6, r0
    lv_style_t * style = lv_mbox_get_style(mbox, LV_MBOX_STYLE_BG);
 8012908:	4628      	mov	r0, r5
 801290a:	f7ff ffd3 	bl	80128b4 <lv_mbox_get_style>
 801290e:	4604      	mov	r4, r0
    lv_coord_t w = lv_obj_get_width(mbox) - 2 * style->body.padding.hor;
 8012910:	4628      	mov	r0, r5
 8012912:	f7f6 f9db 	bl	8008ccc <lv_obj_get_width>
 8012916:	8c64      	ldrh	r4, [r4, #34]	; 0x22
 8012918:	eba0 0444 	sub.w	r4, r0, r4, lsl #1
    if(ext->text) {
 801291c:	6870      	ldr	r0, [r6, #4]
    lv_coord_t w = lv_obj_get_width(mbox) - 2 * style->body.padding.hor;
 801291e:	b224      	sxth	r4, r4
    if(ext->text) {
 8012920:	b110      	cbz	r0, 8012928 <mbox_realign+0x2c>
        lv_obj_set_width(ext->text, w);
 8012922:	4621      	mov	r1, r4
 8012924:	f7f5 ff0c 	bl	8008740 <lv_obj_set_width>
    if(ext->btnm) {
 8012928:	68b3      	ldr	r3, [r6, #8]
 801292a:	b1bb      	cbz	r3, 801295c <mbox_realign+0x60>
        lv_style_t * btn_bg_style = lv_mbox_get_style(mbox, LV_MBOX_STYLE_BTN_BG);
 801292c:	2101      	movs	r1, #1
 801292e:	4628      	mov	r0, r5
 8012930:	f7ff ffc0 	bl	80128b4 <lv_mbox_get_style>
 8012934:	4607      	mov	r7, r0
        lv_style_t * btn_rel_style = lv_mbox_get_style(mbox, LV_MBOX_STYLE_BTN_REL);
 8012936:	2102      	movs	r1, #2
 8012938:	4628      	mov	r0, r5
 801293a:	f7ff ffbb 	bl	80128b4 <lv_mbox_get_style>
        lv_obj_set_size(ext->btnm, w, font_h + 2 * btn_rel_style->body.padding.ver + 2 * btn_bg_style->body.padding.ver);
 801293e:	8c3b      	ldrh	r3, [r7, #32]
 8012940:	8c02      	ldrh	r2, [r0, #32]
 8012942:	4621      	mov	r1, r4
 8012944:	4413      	add	r3, r2
 8012946:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8012948:	68b0      	ldr	r0, [r6, #8]
 801294a:	f892 2020 	ldrb.w	r2, [r2, #32]
 801294e:	eb02 0243 	add.w	r2, r2, r3, lsl #1
}
 8012952:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        lv_obj_set_size(ext->btnm, w, font_h + 2 * btn_rel_style->body.padding.ver + 2 * btn_bg_style->body.padding.ver);
 8012956:	b212      	sxth	r2, r2
 8012958:	f7f5 bebf 	b.w	80086da <lv_obj_set_size>
 801295c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012960 <lv_mbox_signal>:
    char c_trans = 0;
 8012960:	2300      	movs	r3, #0
    if(sign == LV_SIGNAL_CONTROLL) {
 8012962:	2910      	cmp	r1, #16
{
 8012964:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012968:	4607      	mov	r7, r0
 801296a:	460d      	mov	r5, r1
 801296c:	4614      	mov	r4, r2
    char c_trans = 0;
 801296e:	f88d 3007 	strb.w	r3, [sp, #7]
    if(sign == LV_SIGNAL_CONTROLL) {
 8012972:	d10d      	bne.n	8012990 <lv_mbox_signal+0x30>
        c_trans = *((char *)param);
 8012974:	7813      	ldrb	r3, [r2, #0]
        if(c_trans == LV_GROUP_KEY_UP) c_trans = LV_GROUP_KEY_RIGHT;
 8012976:	ac02      	add	r4, sp, #8
        if(c_trans == LV_GROUP_KEY_DOWN) c_trans = LV_GROUP_KEY_LEFT;
 8012978:	2b12      	cmp	r3, #18
 801297a:	bf08      	it	eq
 801297c:	2314      	moveq	r3, #20
 801297e:	f88d 3007 	strb.w	r3, [sp, #7]
        if(c_trans == LV_GROUP_KEY_UP) c_trans = LV_GROUP_KEY_RIGHT;
 8012982:	f814 3d01 	ldrb.w	r3, [r4, #-1]!
 8012986:	2b11      	cmp	r3, #17
 8012988:	bf04      	itt	eq
 801298a:	2313      	moveq	r3, #19
 801298c:	f88d 3007 	strbeq.w	r3, [sp, #7]
    res = ancestor_signal(mbox, sign, param);
 8012990:	4b29      	ldr	r3, [pc, #164]	; (8012a38 <lv_mbox_signal+0xd8>)
 8012992:	4622      	mov	r2, r4
 8012994:	4629      	mov	r1, r5
 8012996:	4638      	mov	r0, r7
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 801299c:	2801      	cmp	r0, #1
    res = ancestor_signal(mbox, sign, param);
 801299e:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
 80129a0:	d112      	bne.n	80129c8 <lv_mbox_signal+0x68>
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 80129a2:	4638      	mov	r0, r7
 80129a4:	f7f6 fa69 	bl	8008e7a <lv_obj_get_ext_attr>
    if(sign == LV_SIGNAL_CORD_CHG) {
 80129a8:	2d02      	cmp	r5, #2
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 80129aa:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CORD_CHG) {
 80129ac:	d110      	bne.n	80129d0 <lv_mbox_signal+0x70>
        if(lv_obj_get_width(mbox) != lv_area_get_width(param)) {
 80129ae:	4638      	mov	r0, r7
 80129b0:	f7f6 f98c 	bl	8008ccc <lv_obj_get_width>
 80129b4:	88a3      	ldrh	r3, [r4, #4]
 80129b6:	8822      	ldrh	r2, [r4, #0]
 80129b8:	3301      	adds	r3, #1
 80129ba:	1a9b      	subs	r3, r3, r2
 80129bc:	b21b      	sxth	r3, r3
 80129be:	4298      	cmp	r0, r3
 80129c0:	d002      	beq.n	80129c8 <lv_mbox_signal+0x68>
            mbox_realign(mbox);
 80129c2:	4638      	mov	r0, r7
 80129c4:	f7ff ff9a 	bl	80128fc <mbox_realign>
}
 80129c8:	4630      	mov	r0, r6
 80129ca:	b002      	add	sp, #8
 80129cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 80129d0:	2d03      	cmp	r5, #3
 80129d2:	d0f6      	beq.n	80129c2 <lv_mbox_signal+0x62>
    } else if(sign == LV_SIGNAL_FOCUS || sign == LV_SIGNAL_DEFOCUS ||
 80129d4:	f1a5 030e 	sub.w	r3, r5, #14
 80129d8:	2b03      	cmp	r3, #3
 80129da:	d81e      	bhi.n	8012a1a <lv_mbox_signal+0xba>
        if(ext->btnm) {
 80129dc:	6880      	ldr	r0, [r0, #8]
 80129de:	b118      	cbz	r0, 80129e8 <lv_mbox_signal+0x88>
            ext->btnm->signal_func(ext->btnm, sign, param);
 80129e0:	6983      	ldr	r3, [r0, #24]
 80129e2:	4622      	mov	r2, r4
 80129e4:	4629      	mov	r1, r5
 80129e6:	4798      	blx	r3
        if(sign == LV_SIGNAL_FOCUS) {
 80129e8:	2d0e      	cmp	r5, #14
 80129ea:	d1ed      	bne.n	80129c8 <lv_mbox_signal+0x68>
            lv_indev_t * indev = lv_indev_get_act();
 80129ec:	f7f5 fbb2 	bl	8008154 <lv_indev_get_act>
            lv_hal_indev_type_t indev_type = lv_indev_get_type(indev);
 80129f0:	f7f5 fbb6 	bl	8008160 <lv_indev_get_type>
            if(indev_type == LV_INDEV_TYPE_ENCODER) {
 80129f4:	2804      	cmp	r0, #4
 80129f6:	d1e7      	bne.n	80129c8 <lv_mbox_signal+0x68>
                lv_btnm_ext_t * btnm_ext = lv_obj_get_ext_attr(ext->btnm);
 80129f8:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80129fc:	f7f6 fa3d 	bl	8008e7a <lv_obj_get_ext_attr>
 8012a00:	4604      	mov	r4, r0
                if(lv_group_get_editing(lv_obj_get_group(mbox))) btnm_ext->btn_id_pr = 0;
 8012a02:	4638      	mov	r0, r7
 8012a04:	f7f6 fa3b 	bl	8008e7e <lv_obj_get_group>
 8012a08:	f7f4 ffa1 	bl	800794e <lv_group_get_editing>
 8012a0c:	b110      	cbz	r0, 8012a14 <lv_mbox_signal+0xb4>
 8012a0e:	2300      	movs	r3, #0
                else btnm_ext->btn_id_pr = LV_BTNM_PR_NONE;
 8012a10:	8463      	strh	r3, [r4, #34]	; 0x22
 8012a12:	e7d9      	b.n	80129c8 <lv_mbox_signal+0x68>
 8012a14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012a18:	e7fa      	b.n	8012a10 <lv_mbox_signal+0xb0>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8012a1a:	2d05      	cmp	r5, #5
 8012a1c:	d1d4      	bne.n	80129c8 <lv_mbox_signal+0x68>
 8012a1e:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 8012a20:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8012a24:	b2da      	uxtb	r2, r3
 8012a26:	b119      	cbz	r1, 8012a30 <lv_mbox_signal+0xd0>
 8012a28:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) {  /*Find the last set data*/
 8012a2a:	2b07      	cmp	r3, #7
 8012a2c:	d1f8      	bne.n	8012a20 <lv_mbox_signal+0xc0>
 8012a2e:	461a      	mov	r2, r3
        buf->type[i] = "lv_mbox";
 8012a30:	4b02      	ldr	r3, [pc, #8]	; (8012a3c <lv_mbox_signal+0xdc>)
 8012a32:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
 8012a36:	e7c7      	b.n	80129c8 <lv_mbox_signal+0x68>
 8012a38:	20017430 	.word	0x20017430
 8012a3c:	08087fdd 	.word	0x08087fdd

08012a40 <lv_mbox_add_btns>:
{
 8012a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a44:	4688      	mov	r8, r1
 8012a46:	4605      	mov	r5, r0
 8012a48:	4617      	mov	r7, r2
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 8012a4a:	f7f6 fa16 	bl	8008e7a <lv_obj_get_ext_attr>
    if(ext->btnm == NULL) {
 8012a4e:	6881      	ldr	r1, [r0, #8]
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 8012a50:	4604      	mov	r4, r0
    if(ext->btnm == NULL) {
 8012a52:	b9c9      	cbnz	r1, 8012a88 <lv_mbox_add_btns+0x48>
        ext->btnm = lv_btnm_create(mbox, NULL);
 8012a54:	4628      	mov	r0, r5
 8012a56:	f7fc fecb 	bl	800f7f0 <lv_btnm_create>
 8012a5a:	60a0      	str	r0, [r4, #8]
        lv_theme_t * th = lv_theme_get_current();
 8012a5c:	f003 f80a 	bl	8015a74 <lv_theme_get_current>
        if(th) {
 8012a60:	4606      	mov	r6, r0
 8012a62:	b1f8      	cbz	r0, 8012aa4 <lv_mbox_add_btns+0x64>
            lv_mbox_set_style(mbox, LV_MBOX_STYLE_BTN_BG, th->mbox.btn.bg);
 8012a64:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
 8012a68:	2101      	movs	r1, #1
 8012a6a:	4628      	mov	r0, r5
 8012a6c:	f7ff fe8d 	bl	801278a <lv_mbox_set_style>
            lv_mbox_set_style(mbox, LV_MBOX_STYLE_BTN_REL, th->mbox.btn.rel);
 8012a70:	f8d6 20bc 	ldr.w	r2, [r6, #188]	; 0xbc
 8012a74:	2102      	movs	r1, #2
 8012a76:	4628      	mov	r0, r5
 8012a78:	f7ff fe87 	bl	801278a <lv_mbox_set_style>
            lv_mbox_set_style(mbox, LV_MBOX_STYLE_BTN_PR, th->mbox.btn.pr);
 8012a7c:	f8d6 20c0 	ldr.w	r2, [r6, #192]	; 0xc0
 8012a80:	2103      	movs	r1, #3
 8012a82:	4628      	mov	r0, r5
 8012a84:	f7ff fe81 	bl	801278a <lv_mbox_set_style>
    lv_btnm_set_map(ext->btnm, btn_map);
 8012a88:	4641      	mov	r1, r8
 8012a8a:	68a0      	ldr	r0, [r4, #8]
 8012a8c:	f7fc fd7a 	bl	800f584 <lv_btnm_set_map>
    if(action == NULL) lv_btnm_set_action(ext->btnm, lv_mbox_close_action); /*Set a default action anyway*/
 8012a90:	b977      	cbnz	r7, 8012ab0 <lv_mbox_add_btns+0x70>
 8012a92:	4908      	ldr	r1, [pc, #32]	; (8012ab4 <lv_mbox_add_btns+0x74>)
    else  lv_btnm_set_action(ext->btnm, action);
 8012a94:	68a0      	ldr	r0, [r4, #8]
 8012a96:	f7fc fd0d 	bl	800f4b4 <lv_btnm_set_action>
    mbox_realign(mbox);
 8012a9a:	4628      	mov	r0, r5
}
 8012a9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    mbox_realign(mbox);
 8012aa0:	f7ff bf2c 	b.w	80128fc <mbox_realign>
            lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BG, &lv_style_transp_fit);
 8012aa4:	4601      	mov	r1, r0
 8012aa6:	4a04      	ldr	r2, [pc, #16]	; (8012ab8 <lv_mbox_add_btns+0x78>)
 8012aa8:	68a0      	ldr	r0, [r4, #8]
 8012aaa:	f7fc fd27 	bl	800f4fc <lv_btnm_set_style>
 8012aae:	e7eb      	b.n	8012a88 <lv_mbox_add_btns+0x48>
    else  lv_btnm_set_action(ext->btnm, action);
 8012ab0:	4639      	mov	r1, r7
 8012ab2:	e7ef      	b.n	8012a94 <lv_mbox_add_btns+0x54>
 8012ab4:	08012771 	.word	0x08012771
 8012ab8:	20017d78 	.word	0x20017d78

08012abc <lv_mbox_set_text>:
{
 8012abc:	b538      	push	{r3, r4, r5, lr}
 8012abe:	460d      	mov	r5, r1
 8012ac0:	4604      	mov	r4, r0
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 8012ac2:	f7f6 f9da 	bl	8008e7a <lv_obj_get_ext_attr>
    lv_label_set_text(ext->text, txt);
 8012ac6:	6840      	ldr	r0, [r0, #4]
 8012ac8:	4629      	mov	r1, r5
 8012aca:	f7ff f931 	bl	8011d30 <lv_label_set_text>
    mbox_realign(mbox);
 8012ace:	4620      	mov	r0, r4
}
 8012ad0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mbox_realign(mbox);
 8012ad4:	f7ff bf12 	b.w	80128fc <mbox_realign>

08012ad8 <lv_area_copy>:
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    memcpy(dest, src, sizeof(lv_area_t));
 8012ad8:	4603      	mov	r3, r0
 8012ada:	6808      	ldr	r0, [r1, #0]
 8012adc:	6849      	ldr	r1, [r1, #4]
 8012ade:	c303      	stmia	r3!, {r0, r1}
 8012ae0:	4770      	bx	lr

08012ae2 <lv_page_sb_refresh>:
/**
 * Refresh the position and size of the scroll bars.
 * @param page pointer to a page object
 */
static void lv_page_sb_refresh(lv_obj_t * page)
{
 8012ae2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ae6:	4607      	mov	r7, r0
 8012ae8:	b08b      	sub	sp, #44	; 0x2c

    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8012aea:	f7f6 f9c6 	bl	8008e7a <lv_obj_get_ext_attr>
 8012aee:	4604      	mov	r4, r0
    lv_style_t * style = lv_obj_get_style(page);
 8012af0:	4638      	mov	r0, r7
 8012af2:	f7f6 f8f7 	bl	8008ce4 <lv_obj_get_style>
    lv_obj_t * scrl = ext->scrl;
 8012af6:	f8d4 b004 	ldr.w	fp, [r4, #4]
    lv_style_t * style = lv_obj_get_style(page);
 8012afa:	4681      	mov	r9, r0
    lv_coord_t size_tmp;
    lv_coord_t scrl_w = lv_obj_get_width(scrl);
 8012afc:	4658      	mov	r0, fp
 8012afe:	f7f6 f8e5 	bl	8008ccc <lv_obj_get_width>
 8012b02:	4606      	mov	r6, r0
    lv_coord_t scrl_h =  lv_obj_get_height(scrl);
 8012b04:	4658      	mov	r0, fp
 8012b06:	f7f6 f8e7 	bl	8008cd8 <lv_obj_get_height>
    lv_coord_t hpad = style->body.padding.hor;
 8012b0a:	f9b9 3022 	ldrsh.w	r3, [r9, #34]	; 0x22
    lv_coord_t scrl_h =  lv_obj_get_height(scrl);
 8012b0e:	9001      	str	r0, [sp, #4]
    lv_coord_t vpad = style->body.padding.ver;
    lv_coord_t obj_w = lv_obj_get_width(page);
 8012b10:	4638      	mov	r0, r7
    lv_coord_t hpad = style->body.padding.hor;
 8012b12:	9302      	str	r3, [sp, #8]
    lv_coord_t vpad = style->body.padding.ver;
 8012b14:	f9b9 3020 	ldrsh.w	r3, [r9, #32]
 8012b18:	9303      	str	r3, [sp, #12]
    lv_coord_t obj_w = lv_obj_get_width(page);
 8012b1a:	f7f6 f8d7 	bl	8008ccc <lv_obj_get_width>
 8012b1e:	4605      	mov	r5, r0
    lv_coord_t obj_h = lv_obj_get_height(page);
 8012b20:	4638      	mov	r0, r7
 8012b22:	f7f6 f8d9 	bl	8008cd8 <lv_obj_get_height>
     * - horizontal and vertical scrollbars can overlap on the corners
     * - if the page has radius the scrollbar can be out of the radius  */
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.hor);
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.ver);

    if(ext->sb.mode == LV_SB_MODE_OFF) return;
 8012b26:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    lv_coord_t obj_h = lv_obj_get_height(page);
 8012b2a:	4680      	mov	r8, r0
    if(ext->sb.mode == LV_SB_MODE_OFF) return;
 8012b2c:	f013 011c 	ands.w	r1, r3, #28
 8012b30:	d066      	beq.n	8012c00 <lv_page_sb_refresh+0x11e>

    if(ext->sb.mode == LV_SB_MODE_ON) {
 8012b32:	2904      	cmp	r1, #4
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.hor);
 8012b34:	6922      	ldr	r2, [r4, #16]
 8012b36:	f9b9 a022 	ldrsh.w	sl, [r9, #34]	; 0x22
 8012b3a:	f9b2 2024 	ldrsh.w	r2, [r2, #36]	; 0x24
        ext->sb.hor_draw = 1;
        ext->sb.ver_draw = 1;
 8012b3e:	bf08      	it	eq
 8012b40:	f043 0303 	orreq.w	r3, r3, #3
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.hor);
 8012b44:	9204      	str	r2, [sp, #16]
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.ver);
 8012b46:	f9b9 2020 	ldrsh.w	r2, [r9, #32]
        ext->sb.ver_draw = 1;
 8012b4a:	bf08      	it	eq
 8012b4c:	f884 3024 	strbeq.w	r3, [r4, #36]	; 0x24
    }

    /*Invalidate the current (old) scrollbar areas*/
    lv_area_t sb_area_tmp;
    if(ext->sb.hor_draw != 0) {
 8012b50:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.ver);
 8012b54:	9205      	str	r2, [sp, #20]
    if(ext->sb.hor_draw != 0) {
 8012b56:	07d8      	lsls	r0, r3, #31
 8012b58:	d51d      	bpl.n	8012b96 <lv_page_sb_refresh+0xb4>
        lv_area_copy(&sb_area_tmp, &ext->sb.hor_area);
 8012b5a:	f104 0114 	add.w	r1, r4, #20
 8012b5e:	a808      	add	r0, sp, #32
 8012b60:	f7ff ffba 	bl	8012ad8 <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 8012b64:	8a3a      	ldrh	r2, [r7, #16]
 8012b66:	f8bd 3020 	ldrh.w	r3, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
        sb_area_tmp.x2 += page->coords.x1;
        sb_area_tmp.y2 += page->coords.y1;
        lv_inv_area(&sb_area_tmp);
 8012b6a:	a808      	add	r0, sp, #32
        sb_area_tmp.y1 += page->coords.y1;
 8012b6c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x1 += page->coords.x1;
 8012b70:	4413      	add	r3, r2
 8012b72:	f8ad 3020 	strh.w	r3, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
 8012b76:	8a7b      	ldrh	r3, [r7, #18]
 8012b78:	4419      	add	r1, r3
 8012b7a:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x2 += page->coords.x1;
 8012b7e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8012b82:	440a      	add	r2, r1
 8012b84:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
        sb_area_tmp.y2 += page->coords.y1;
 8012b88:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 8012b8c:	4413      	add	r3, r2
 8012b8e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        lv_inv_area(&sb_area_tmp);
 8012b92:	f7f6 fb8b 	bl	80092ac <lv_inv_area>
    }
    if(ext->sb.ver_draw != 0)  {
 8012b96:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8012b9a:	0799      	lsls	r1, r3, #30
 8012b9c:	d51d      	bpl.n	8012bda <lv_page_sb_refresh+0xf8>
        lv_area_copy(&sb_area_tmp, &ext->sb.ver_area);
 8012b9e:	f104 011c 	add.w	r1, r4, #28
 8012ba2:	a808      	add	r0, sp, #32
 8012ba4:	f7ff ff98 	bl	8012ad8 <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 8012ba8:	8a3a      	ldrh	r2, [r7, #16]
 8012baa:	f8bd 3020 	ldrh.w	r3, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
        sb_area_tmp.x2 += page->coords.x1;
        sb_area_tmp.y2 += page->coords.y1;
        lv_inv_area(&sb_area_tmp);
 8012bae:	a808      	add	r0, sp, #32
        sb_area_tmp.y1 += page->coords.y1;
 8012bb0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x1 += page->coords.x1;
 8012bb4:	4413      	add	r3, r2
 8012bb6:	f8ad 3020 	strh.w	r3, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
 8012bba:	8a7b      	ldrh	r3, [r7, #18]
 8012bbc:	4419      	add	r1, r3
 8012bbe:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x2 += page->coords.x1;
 8012bc2:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8012bc6:	440a      	add	r2, r1
 8012bc8:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
        sb_area_tmp.y2 += page->coords.y1;
 8012bcc:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 8012bd0:	4413      	add	r3, r2
 8012bd2:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        lv_inv_area(&sb_area_tmp);
 8012bd6:	f7f6 fb69 	bl	80092ac <lv_inv_area>
    }


    if(ext->sb.mode == LV_SB_MODE_DRAG && lv_indev_is_dragging(lv_indev_get_act()) == false) {
 8012bda:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8012bde:	f003 031c 	and.w	r3, r3, #28
 8012be2:	2b08      	cmp	r3, #8
 8012be4:	d10f      	bne.n	8012c06 <lv_page_sb_refresh+0x124>
 8012be6:	f7f5 fab5 	bl	8008154 <lv_indev_get_act>
 8012bea:	f7f5 fae5 	bl	80081b8 <lv_indev_is_dragging>
 8012bee:	b950      	cbnz	r0, 8012c06 <lv_page_sb_refresh+0x124>
        ext->sb.hor_draw = 0;
 8012bf0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8012bf4:	f360 0300 	bfi	r3, r0, #0, #1
        ext->sb.ver_draw = 0;
 8012bf8:	f360 0341 	bfi	r3, r0, #1, #1
 8012bfc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        sb_area_tmp.y1 += page->coords.y1;
        sb_area_tmp.x2 += page->coords.x1;
        sb_area_tmp.y2 += page->coords.y1;
        lv_inv_area(&sb_area_tmp);
    }
}
 8012c00:	b00b      	add	sp, #44	; 0x2c
 8012c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.hor);
 8012c06:	9b04      	ldr	r3, [sp, #16]
 8012c08:	459a      	cmp	sl, r3
 8012c0a:	bfb8      	it	lt
 8012c0c:	469a      	movlt	sl, r3
    if(scrl_w <= obj_w - 2 * hpad) {        /*Full sized scroll bar*/
 8012c0e:	9b02      	ldr	r3, [sp, #8]
 8012c10:	ea4f 0943 	mov.w	r9, r3, lsl #1
 8012c14:	ea4f 024a 	mov.w	r2, sl, lsl #1
 8012c18:	eba5 0309 	sub.w	r3, r5, r9
 8012c1c:	429e      	cmp	r6, r3
 8012c1e:	f300 808e 	bgt.w	8012d3e <lv_page_sb_refresh+0x25c>
        lv_area_set_width(&ext->sb.hor_area, obj_w - 2 * sb_hor_pad);
 8012c22:	1aa9      	subs	r1, r5, r2
 8012c24:	f104 0614 	add.w	r6, r4, #20
 8012c28:	b209      	sxth	r1, r1
 8012c2a:	4630      	mov	r0, r6
 8012c2c:	f7fa fdb4 	bl	800d798 <lv_area_set_width>
        lv_area_set_pos(&ext->sb.hor_area, sb_hor_pad, obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.ver);
 8012c30:	6923      	ldr	r3, [r4, #16]
 8012c32:	4651      	mov	r1, sl
 8012c34:	4630      	mov	r0, r6
 8012c36:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8012c38:	8c1b      	ldrh	r3, [r3, #32]
 8012c3a:	eba8 0202 	sub.w	r2, r8, r2
 8012c3e:	1ad2      	subs	r2, r2, r3
 8012c40:	b212      	sxth	r2, r2
 8012c42:	f7fa fdb3 	bl	800d7ac <lv_area_set_pos>
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG)  ext->sb.hor_draw = 0;
 8012c46:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8012c4a:	f003 0218 	and.w	r2, r3, #24
 8012c4e:	2a08      	cmp	r2, #8
 8012c50:	d103      	bne.n	8012c5a <lv_page_sb_refresh+0x178>
 8012c52:	f36f 0300 	bfc	r3, #0, #1
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG)  ext->sb.hor_draw = 1;
 8012c56:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.ver);
 8012c5a:	9b04      	ldr	r3, [sp, #16]
 8012c5c:	f104 091c 	add.w	r9, r4, #28
 8012c60:	9905      	ldr	r1, [sp, #20]
    if(scrl_h <= obj_h - 2 * vpad) {        /*Full sized scroll bar*/
 8012c62:	9801      	ldr	r0, [sp, #4]
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.ver);
 8012c64:	428b      	cmp	r3, r1
 8012c66:	bfb8      	it	lt
 8012c68:	460b      	movlt	r3, r1
 8012c6a:	461a      	mov	r2, r3
    if(scrl_h <= obj_h - 2 * vpad) {        /*Full sized scroll bar*/
 8012c6c:	9b03      	ldr	r3, [sp, #12]
 8012c6e:	005b      	lsls	r3, r3, #1
 8012c70:	ea4f 0a42 	mov.w	sl, r2, lsl #1
 8012c74:	eba8 0103 	sub.w	r1, r8, r3
 8012c78:	4288      	cmp	r0, r1
 8012c7a:	f300 8098 	bgt.w	8012dae <lv_page_sb_refresh+0x2cc>
        lv_area_set_height(&ext->sb.ver_area,  obj_h - 2 * sb_ver_pad);
 8012c7e:	eba8 010a 	sub.w	r1, r8, sl
 8012c82:	4648      	mov	r0, r9
 8012c84:	9201      	str	r2, [sp, #4]
 8012c86:	b209      	sxth	r1, r1
 8012c88:	f7fa fd8b 	bl	800d7a2 <lv_area_set_height>
        lv_area_set_pos(&ext->sb.ver_area, obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.hor, sb_ver_pad);
 8012c8c:	6923      	ldr	r3, [r4, #16]
 8012c8e:	9a01      	ldr	r2, [sp, #4]
 8012c90:	4648      	mov	r0, r9
 8012c92:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8012c94:	1a6d      	subs	r5, r5, r1
 8012c96:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8012c98:	1a69      	subs	r1, r5, r1
 8012c9a:	b209      	sxth	r1, r1
 8012c9c:	f7fa fd86 	bl	800d7ac <lv_area_set_pos>
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG)  ext->sb.ver_draw = 0;
 8012ca0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8012ca4:	f003 0218 	and.w	r2, r3, #24
 8012ca8:	2a08      	cmp	r2, #8
 8012caa:	d103      	bne.n	8012cb4 <lv_page_sb_refresh+0x1d2>
 8012cac:	f36f 0341 	bfc	r3, #1, #1
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG)  ext->sb.ver_draw = 1;
 8012cb0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    if(ext->sb.hor_draw != 0) {
 8012cb4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8012cb8:	07da      	lsls	r2, r3, #31
 8012cba:	d51d      	bpl.n	8012cf8 <lv_page_sb_refresh+0x216>
        lv_area_copy(&sb_area_tmp, &ext->sb.hor_area);
 8012cbc:	f104 0114 	add.w	r1, r4, #20
 8012cc0:	a808      	add	r0, sp, #32
 8012cc2:	f7ff ff09 	bl	8012ad8 <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 8012cc6:	8a3a      	ldrh	r2, [r7, #16]
 8012cc8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
        lv_inv_area(&sb_area_tmp);
 8012ccc:	a808      	add	r0, sp, #32
        sb_area_tmp.y1 += page->coords.y1;
 8012cce:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x1 += page->coords.x1;
 8012cd2:	4413      	add	r3, r2
 8012cd4:	f8ad 3020 	strh.w	r3, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
 8012cd8:	8a7b      	ldrh	r3, [r7, #18]
 8012cda:	4419      	add	r1, r3
 8012cdc:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x2 += page->coords.x1;
 8012ce0:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8012ce4:	440a      	add	r2, r1
 8012ce6:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
        sb_area_tmp.y2 += page->coords.y1;
 8012cea:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 8012cee:	4413      	add	r3, r2
 8012cf0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        lv_inv_area(&sb_area_tmp);
 8012cf4:	f7f6 fada 	bl	80092ac <lv_inv_area>
    if(ext->sb.ver_draw != 0)  {
 8012cf8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8012cfc:	079b      	lsls	r3, r3, #30
 8012cfe:	f57f af7f 	bpl.w	8012c00 <lv_page_sb_refresh+0x11e>
        lv_area_copy(&sb_area_tmp, &ext->sb.ver_area);
 8012d02:	4649      	mov	r1, r9
 8012d04:	a808      	add	r0, sp, #32
 8012d06:	f7ff fee7 	bl	8012ad8 <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 8012d0a:	8a3a      	ldrh	r2, [r7, #16]
 8012d0c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
        lv_inv_area(&sb_area_tmp);
 8012d10:	a808      	add	r0, sp, #32
        sb_area_tmp.y1 += page->coords.y1;
 8012d12:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x1 += page->coords.x1;
 8012d16:	4413      	add	r3, r2
 8012d18:	f8ad 3020 	strh.w	r3, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
 8012d1c:	8a7b      	ldrh	r3, [r7, #18]
 8012d1e:	4419      	add	r1, r3
 8012d20:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x2 += page->coords.x1;
 8012d24:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8012d28:	440a      	add	r2, r1
 8012d2a:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
        sb_area_tmp.y2 += page->coords.y1;
 8012d2e:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 8012d32:	4413      	add	r3, r2
 8012d34:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        lv_inv_area(&sb_area_tmp);
 8012d38:	f7f6 fab8 	bl	80092ac <lv_inv_area>
 8012d3c:	e760      	b.n	8012c00 <lv_page_sb_refresh+0x11e>
        size_tmp = (obj_w * (obj_w - (2 * sb_hor_pad))) / (scrl_w + 2 * hpad);
 8012d3e:	44b1      	add	r9, r6
 8012d40:	1aae      	subs	r6, r5, r2
        lv_area_set_width(&ext->sb.hor_area,  size_tmp);
 8012d42:	f104 0314 	add.w	r3, r4, #20
        size_tmp = (obj_w * (obj_w - (2 * sb_hor_pad))) / (scrl_w + 2 * hpad);
 8012d46:	9207      	str	r2, [sp, #28]
 8012d48:	436e      	muls	r6, r5
        lv_area_set_width(&ext->sb.hor_area,  size_tmp);
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	9306      	str	r3, [sp, #24]
        size_tmp = (obj_w * (obj_w - (2 * sb_hor_pad))) / (scrl_w + 2 * hpad);
 8012d4e:	fb96 f6f9 	sdiv	r6, r6, r9
 8012d52:	b236      	sxth	r6, r6
                        (scrl_w + 2 * hpad - obj_w),
 8012d54:	eba9 0905 	sub.w	r9, r9, r5
 8012d58:	2e0c      	cmp	r6, #12
 8012d5a:	bfb8      	it	lt
 8012d5c:	260c      	movlt	r6, #12
        lv_area_set_width(&ext->sb.hor_area,  size_tmp);
 8012d5e:	4631      	mov	r1, r6
 8012d60:	f7fa fd1a 	bl	800d798 <lv_area_set_width>
                        (-(lv_obj_get_x(scrl) - hpad) * (obj_w - size_tmp -  2 * sb_hor_pad)) /
 8012d64:	4658      	mov	r0, fp
 8012d66:	f7f5 ffa5 	bl	8008cb4 <lv_obj_get_x>
                        obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.ver);
 8012d6a:	6921      	ldr	r1, [r4, #16]
                        (-(lv_obj_get_x(scrl) - hpad) * (obj_w - size_tmp -  2 * sb_hor_pad)) /
 8012d6c:	9b02      	ldr	r3, [sp, #8]
                        obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.ver);
 8012d6e:	f8b1 e024 	ldrh.w	lr, [r1, #36]	; 0x24
 8012d72:	8c09      	ldrh	r1, [r1, #32]
 8012d74:	eba8 0e0e 	sub.w	lr, r8, lr
                        (-(lv_obj_get_x(scrl) - hpad) * (obj_w - size_tmp -  2 * sb_hor_pad)) /
 8012d78:	9a07      	ldr	r2, [sp, #28]
                        obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.ver);
 8012d7a:	ebae 0e01 	sub.w	lr, lr, r1
                        (-(lv_obj_get_x(scrl) - hpad) * (obj_w - size_tmp -  2 * sb_hor_pad)) /
 8012d7e:	1ba9      	subs	r1, r5, r6
 8012d80:	1a8a      	subs	r2, r1, r2
 8012d82:	1a19      	subs	r1, r3, r0
        lv_area_set_pos(&ext->sb.hor_area, sb_hor_pad +
 8012d84:	9b06      	ldr	r3, [sp, #24]
                        (-(lv_obj_get_x(scrl) - hpad) * (obj_w - size_tmp -  2 * sb_hor_pad)) /
 8012d86:	4351      	muls	r1, r2
        lv_area_set_pos(&ext->sb.hor_area, sb_hor_pad +
 8012d88:	fa0f f28e 	sxth.w	r2, lr
 8012d8c:	4618      	mov	r0, r3
                        (-(lv_obj_get_x(scrl) - hpad) * (obj_w - size_tmp -  2 * sb_hor_pad)) /
 8012d8e:	fb91 f1f9 	sdiv	r1, r1, r9
        lv_area_set_pos(&ext->sb.hor_area, sb_hor_pad +
 8012d92:	4451      	add	r1, sl
 8012d94:	b209      	sxth	r1, r1
 8012d96:	f7fa fd09 	bl	800d7ac <lv_area_set_pos>
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG)  ext->sb.hor_draw = 1;
 8012d9a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8012d9e:	f003 0218 	and.w	r2, r3, #24
 8012da2:	2a08      	cmp	r2, #8
 8012da4:	f47f af59 	bne.w	8012c5a <lv_page_sb_refresh+0x178>
 8012da8:	f043 0301 	orr.w	r3, r3, #1
 8012dac:	e753      	b.n	8012c56 <lv_page_sb_refresh+0x174>
 8012dae:	9202      	str	r2, [sp, #8]
        size_tmp = (obj_h * (obj_h - (2 * sb_ver_pad))) / (scrl_h + 2 * vpad);
 8012db0:	eba8 060a 	sub.w	r6, r8, sl
 8012db4:	9a01      	ldr	r2, [sp, #4]
        lv_area_set_height(&ext->sb.ver_area,  size_tmp);
 8012db6:	4648      	mov	r0, r9
        size_tmp = (obj_h * (obj_h - (2 * sb_ver_pad))) / (scrl_h + 2 * vpad);
 8012db8:	fb08 f606 	mul.w	r6, r8, r6
 8012dbc:	441a      	add	r2, r3
 8012dbe:	fb96 f6f2 	sdiv	r6, r6, r2
 8012dc2:	b236      	sxth	r6, r6
 8012dc4:	9201      	str	r2, [sp, #4]
 8012dc6:	2e0c      	cmp	r6, #12
 8012dc8:	bfb8      	it	lt
 8012dca:	260c      	movlt	r6, #12
        lv_area_set_height(&ext->sb.ver_area,  size_tmp);
 8012dcc:	4631      	mov	r1, r6
                        (-(lv_obj_get_y(scrl) - vpad) * (obj_h - size_tmp -  2 * sb_ver_pad)) /
 8012dce:	eba8 0606 	sub.w	r6, r8, r6
        lv_area_set_height(&ext->sb.ver_area,  size_tmp);
 8012dd2:	f7fa fce6 	bl	800d7a2 <lv_area_set_height>
        lv_area_set_pos(&ext->sb.ver_area,  obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.hor,
 8012dd6:	6920      	ldr	r0, [r4, #16]
                        (-(lv_obj_get_y(scrl) - vpad) * (obj_h - size_tmp -  2 * sb_ver_pad)) /
 8012dd8:	eba6 0a0a 	sub.w	sl, r6, sl
        lv_area_set_pos(&ext->sb.ver_area,  obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.hor,
 8012ddc:	8c81      	ldrh	r1, [r0, #36]	; 0x24
 8012dde:	1a6d      	subs	r5, r5, r1
 8012de0:	8c41      	ldrh	r1, [r0, #34]	; 0x22
                        (-(lv_obj_get_y(scrl) - vpad) * (obj_h - size_tmp -  2 * sb_ver_pad)) /
 8012de2:	4658      	mov	r0, fp
        lv_area_set_pos(&ext->sb.ver_area,  obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.hor,
 8012de4:	1a6d      	subs	r5, r5, r1
                        (-(lv_obj_get_y(scrl) - vpad) * (obj_h - size_tmp -  2 * sb_ver_pad)) /
 8012de6:	f7f5 ff6b 	bl	8008cc0 <lv_obj_get_y>
 8012dea:	9b03      	ldr	r3, [sp, #12]
                        sb_ver_pad +
 8012dec:	9a02      	ldr	r2, [sp, #8]
        lv_area_set_pos(&ext->sb.ver_area,  obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.hor,
 8012dee:	b22d      	sxth	r5, r5
                        (-(lv_obj_get_y(scrl) - vpad) * (obj_h - size_tmp -  2 * sb_ver_pad)) /
 8012df0:	1a18      	subs	r0, r3, r0
                        (scrl_h + 2 * vpad - obj_h));
 8012df2:	9b01      	ldr	r3, [sp, #4]
        lv_area_set_pos(&ext->sb.ver_area,  obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.hor,
 8012df4:	4629      	mov	r1, r5
                        (-(lv_obj_get_y(scrl) - vpad) * (obj_h - size_tmp -  2 * sb_ver_pad)) /
 8012df6:	fb00 f00a 	mul.w	r0, r0, sl
                        (scrl_h + 2 * vpad - obj_h));
 8012dfa:	eba3 0308 	sub.w	r3, r3, r8
                        (-(lv_obj_get_y(scrl) - vpad) * (obj_h - size_tmp -  2 * sb_ver_pad)) /
 8012dfe:	fb90 f3f3 	sdiv	r3, r0, r3
                        sb_ver_pad +
 8012e02:	441a      	add	r2, r3
        lv_area_set_pos(&ext->sb.ver_area,  obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.hor,
 8012e04:	4648      	mov	r0, r9
 8012e06:	b212      	sxth	r2, r2
 8012e08:	f7fa fcd0 	bl	800d7ac <lv_area_set_pos>
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG)  ext->sb.ver_draw = 1;
 8012e0c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8012e10:	f003 0218 	and.w	r2, r3, #24
 8012e14:	2a08      	cmp	r2, #8
 8012e16:	f47f af4d 	bne.w	8012cb4 <lv_page_sb_refresh+0x1d2>
 8012e1a:	f043 0302 	orr.w	r3, r3, #2
 8012e1e:	e747      	b.n	8012cb0 <lv_page_sb_refresh+0x1ce>

08012e20 <lv_scrl_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 8012e20:	2a02      	cmp	r2, #2
{
 8012e22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e26:	4604      	mov	r4, r0
 8012e28:	460f      	mov	r7, r1
    if(mode == LV_DESIGN_COVER_CHK) {
 8012e2a:	d104      	bne.n	8012e36 <lv_scrl_design+0x16>
        return ancestor_design(scrl, mask, mode);
 8012e2c:	4b23      	ldr	r3, [pc, #140]	; (8012ebc <lv_scrl_design+0x9c>)
}
 8012e2e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return ancestor_design(scrl, mask, mode);
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	4718      	bx	r3
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 8012e36:	2a00      	cmp	r2, #0
 8012e38:	d139      	bne.n	8012eae <lv_scrl_design+0x8e>
        lv_style_t * style_scrl_ori = lv_obj_get_style(scrl);
 8012e3a:	f7f5 ff53 	bl	8008ce4 <lv_obj_get_style>
 8012e3e:	4605      	mov	r5, r0
        lv_obj_t * page = lv_obj_get_parent(scrl);
 8012e40:	4620      	mov	r0, r4
 8012e42:	f7f5 febd 	bl	8008bc0 <lv_obj_get_parent>
 8012e46:	4680      	mov	r8, r0
        lv_style_t * style_page = lv_obj_get_style(page);
 8012e48:	f7f5 ff4c 	bl	8008ce4 <lv_obj_get_style>
 8012e4c:	4681      	mov	r9, r0
        lv_group_t * g = lv_obj_get_group(page);
 8012e4e:	4640      	mov	r0, r8
 8012e50:	f7f6 f815 	bl	8008e7e <lv_obj_get_group>
        if(style_page->body.empty || style_page->body.opa == LV_OPA_TRANSP) { /*Is the background visible?*/
 8012e54:	f899 3026 	ldrb.w	r3, [r9, #38]	; 0x26
        lv_group_t * g = lv_obj_get_group(page);
 8012e58:	4606      	mov	r6, r0
        if(style_page->body.empty || style_page->body.opa == LV_OPA_TRANSP) { /*Is the background visible?*/
 8012e5a:	07da      	lsls	r2, r3, #31
 8012e5c:	d402      	bmi.n	8012e64 <lv_scrl_design+0x44>
 8012e5e:	f899 300e 	ldrb.w	r3, [r9, #14]
 8012e62:	b9d3      	cbnz	r3, 8012e9a <lv_scrl_design+0x7a>
            if(lv_group_get_focused(g) == page) {
 8012e64:	4630      	mov	r0, r6
 8012e66:	f7f4 fd54 	bl	8007912 <lv_group_get_focused>
 8012e6a:	4580      	cmp	r8, r0
 8012e6c:	d115      	bne.n	8012e9a <lv_scrl_design+0x7a>
                style_mod = lv_group_mod_style(g, style_scrl_ori);
 8012e6e:	4629      	mov	r1, r5
 8012e70:	4630      	mov	r0, r6
 8012e72:	f7f4 fd33 	bl	80078dc <lv_group_mod_style>
                if((style_mod->body.empty || style_mod->body.opa == LV_OPA_TRANSP) && style_mod->body.border.width == 0) {
 8012e76:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 8012e7a:	07db      	lsls	r3, r3, #31
 8012e7c:	d401      	bmi.n	8012e82 <lv_scrl_design+0x62>
 8012e7e:	7b83      	ldrb	r3, [r0, #14]
 8012e80:	b953      	cbnz	r3, 8012e98 <lv_scrl_design+0x78>
 8012e82:	f9b0 2014 	ldrsh.w	r2, [r0, #20]
 8012e86:	b93a      	cbnz	r2, 8012e98 <lv_scrl_design+0x78>
                    style_mod->body.border.width = LV_DPI / 20;
 8012e88:	2305      	movs	r3, #5
 8012e8a:	8283      	strh	r3, [r0, #20]
                    style_mod->body.empty = 0;
 8012e8c:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 8012e90:	f362 0300 	bfi	r3, r2, #0, #1
 8012e94:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
                scrl->style_p = style_mod;  /*Temporally change the style to the activated */
 8012e98:	6260      	str	r0, [r4, #36]	; 0x24
        ancestor_design(scrl, mask, mode);
 8012e9a:	4b08      	ldr	r3, [pc, #32]	; (8012ebc <lv_scrl_design+0x9c>)
 8012e9c:	2200      	movs	r2, #0
 8012e9e:	4639      	mov	r1, r7
 8012ea0:	4620      	mov	r0, r4
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	4798      	blx	r3
        scrl->style_p = style_scrl_ori;  /*Revert the style*/
 8012ea6:	6265      	str	r5, [r4, #36]	; 0x24
}
 8012ea8:	2001      	movs	r0, #1
 8012eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    } else if(mode == LV_DESIGN_DRAW_POST) {
 8012eae:	2a01      	cmp	r2, #1
 8012eb0:	d1fa      	bne.n	8012ea8 <lv_scrl_design+0x88>
        ancestor_design(scrl, mask, mode);
 8012eb2:	4b02      	ldr	r3, [pc, #8]	; (8012ebc <lv_scrl_design+0x9c>)
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	4798      	blx	r3
 8012eb8:	e7f6      	b.n	8012ea8 <lv_scrl_design+0x88>
 8012eba:	bf00      	nop
 8012ebc:	20017434 	.word	0x20017434

08012ec0 <lv_page_scrollable_signal>:
    res = ancestor_signal(scrl, sign, param);
 8012ec0:	4b80      	ldr	r3, [pc, #512]	; (80130c4 <lv_page_scrollable_signal+0x204>)
{
 8012ec2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    res = ancestor_signal(scrl, sign, param);
 8012ec6:	681b      	ldr	r3, [r3, #0]
{
 8012ec8:	b087      	sub	sp, #28
 8012eca:	4607      	mov	r7, r0
 8012ecc:	460e      	mov	r6, r1
    res = ancestor_signal(scrl, sign, param);
 8012ece:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8012ed0:	2801      	cmp	r0, #1
    res = ancestor_signal(scrl, sign, param);
 8012ed2:	9001      	str	r0, [sp, #4]
    if(res != LV_RES_OK) return res;
 8012ed4:	f040 8086 	bne.w	8012fe4 <lv_page_scrollable_signal+0x124>
    lv_obj_t * page = lv_obj_get_parent(scrl);
 8012ed8:	4638      	mov	r0, r7
 8012eda:	f7f5 fe71 	bl	8008bc0 <lv_obj_get_parent>
 8012ede:	4604      	mov	r4, r0
    lv_style_t * page_style = lv_obj_get_style(page);
 8012ee0:	f7f5 ff00 	bl	8008ce4 <lv_obj_get_style>
 8012ee4:	4681      	mov	r9, r0
    lv_page_ext_t * page_ext = lv_obj_get_ext_attr(page);
 8012ee6:	4620      	mov	r0, r4
 8012ee8:	f7f5 ffc7 	bl	8008e7a <lv_obj_get_ext_attr>
    if(sign == LV_SIGNAL_CORD_CHG) {
 8012eec:	2e02      	cmp	r6, #2
    lv_page_ext_t * page_ext = lv_obj_get_ext_attr(page);
 8012eee:	4605      	mov	r5, r0
    if(sign == LV_SIGNAL_CORD_CHG) {
 8012ef0:	d17e      	bne.n	8012ff0 <lv_page_scrollable_signal+0x130>
        new_x = lv_obj_get_x(scrl);
 8012ef2:	4638      	mov	r0, r7
        lv_coord_t hpad = page_style->body.padding.hor;
 8012ef4:	f9b9 8022 	ldrsh.w	r8, [r9, #34]	; 0x22
        lv_coord_t vpad = page_style->body.padding.ver;
 8012ef8:	f9b9 6020 	ldrsh.w	r6, [r9, #32]
        new_x = lv_obj_get_x(scrl);
 8012efc:	f7f5 feda 	bl	8008cb4 <lv_obj_get_x>
 8012f00:	4605      	mov	r5, r0
        new_y = lv_obj_get_y(scrl);
 8012f02:	4638      	mov	r0, r7
 8012f04:	f7f5 fedc 	bl	8008cc0 <lv_obj_get_y>
        lv_obj_get_coords(scrl, &scrl_cords);
 8012f08:	a904      	add	r1, sp, #16
        new_y = lv_obj_get_y(scrl);
 8012f0a:	4681      	mov	r9, r0
        lv_obj_get_coords(scrl, &scrl_cords);
 8012f0c:	4638      	mov	r0, r7
 8012f0e:	f7f5 fecb 	bl	8008ca8 <lv_obj_get_coords>
        lv_obj_get_coords(page, &page_cords);
 8012f12:	a902      	add	r1, sp, #8
 8012f14:	4620      	mov	r0, r4
 8012f16:	f7f5 fec7 	bl	8008ca8 <lv_obj_get_coords>
 8012f1a:	f9bd a014 	ldrsh.w	sl, [sp, #20]
 8012f1e:	f9bd e010 	ldrsh.w	lr, [sp, #16]
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 8012f22:	f10a 0301 	add.w	r3, sl, #1
 8012f26:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8012f2a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8012f2e:	eba3 030e 	sub.w	r3, r3, lr
 8012f32:	1c41      	adds	r1, r0, #1
 8012f34:	b29b      	uxth	r3, r3
 8012f36:	1a89      	subs	r1, r1, r2
 8012f38:	4442      	add	r2, r8
 8012f3a:	b289      	uxth	r1, r1
        if(lv_area_get_width(&scrl_cords) + 2 * hpad < lv_area_get_width(&page_cords)) {
 8012f3c:	fa0f fc83 	sxth.w	ip, r3
 8012f40:	fa0f fb81 	sxth.w	fp, r1
 8012f44:	eb0c 0c48 	add.w	ip, ip, r8, lsl #1
 8012f48:	45dc      	cmp	ip, fp
 8012f4a:	da22      	bge.n	8012f92 <lv_page_scrollable_signal+0xd2>
                new_x = hpad;
 8012f4c:	4596      	cmp	lr, r2
 8012f4e:	bf16      	itet	ne
 8012f50:	4645      	movne	r5, r8
 8012f52:	2100      	moveq	r1, #0
 8012f54:	2101      	movne	r1, #1
 8012f56:	f9bd a016 	ldrsh.w	sl, [sp, #22]
 8012f5a:	f9bd 8012 	ldrsh.w	r8, [sp, #18]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 8012f5e:	f10a 0001 	add.w	r0, sl, #1
 8012f62:	f9bd c00e 	ldrsh.w	ip, [sp, #14]
 8012f66:	f9bd e00a 	ldrsh.w	lr, [sp, #10]
 8012f6a:	eba0 0008 	sub.w	r0, r0, r8
 8012f6e:	f10c 0301 	add.w	r3, ip, #1
 8012f72:	b280      	uxth	r0, r0
 8012f74:	eba3 030e 	sub.w	r3, r3, lr
 8012f78:	44b6      	add	lr, r6
 8012f7a:	b29b      	uxth	r3, r3
        if(lv_area_get_height(&scrl_cords) + 2 * vpad < lv_area_get_height(&page_cords)) {
 8012f7c:	b202      	sxth	r2, r0
 8012f7e:	fa0f fb83 	sxth.w	fp, r3
 8012f82:	eb02 0246 	add.w	r2, r2, r6, lsl #1
 8012f86:	455a      	cmp	r2, fp
 8012f88:	da13      	bge.n	8012fb2 <lv_page_scrollable_signal+0xf2>
            if(scrl_cords.y1 != page_cords.y1 + vpad) {
 8012f8a:	45f0      	cmp	r8, lr
 8012f8c:	d12e      	bne.n	8012fec <lv_page_scrollable_signal+0x12c>
        if(refr_x != false || refr_y != false) {
 8012f8e:	b331      	cbz	r1, 8012fde <lv_page_scrollable_signal+0x11e>
 8012f90:	e020      	b.n	8012fd4 <lv_page_scrollable_signal+0x114>
            if(scrl_cords.x2  < page_cords.x2 - hpad) {
 8012f92:	eba0 0008 	sub.w	r0, r0, r8
 8012f96:	4582      	cmp	sl, r0
                new_x =  lv_area_get_width(&page_cords) - lv_area_get_width(&scrl_cords) - hpad;   /* Right align */
 8012f98:	bfb7      	itett	lt
 8012f9a:	1acd      	sublt	r5, r1, r3
        bool refr_x = false;
 8012f9c:	2100      	movge	r1, #0
                refr_x = true;
 8012f9e:	9901      	ldrlt	r1, [sp, #4]
                new_x =  lv_area_get_width(&page_cords) - lv_area_get_width(&scrl_cords) - hpad;   /* Right align */
 8012fa0:	eba5 0508 	sublt.w	r5, r5, r8
 8012fa4:	bfb8      	it	lt
 8012fa6:	b22d      	sxthlt	r5, r5
                new_x = hpad;  /*Left align*/
 8012fa8:	4596      	cmp	lr, r2
 8012faa:	bfc4      	itt	gt
 8012fac:	4645      	movgt	r5, r8
 8012fae:	2101      	movgt	r1, #1
 8012fb0:	e7d1      	b.n	8012f56 <lv_page_scrollable_signal+0x96>
            if(scrl_cords.y2 < page_cords.y2 - vpad) {
 8012fb2:	ebac 0c06 	sub.w	ip, ip, r6
 8012fb6:	45e2      	cmp	sl, ip
                new_y =  lv_area_get_height(&page_cords) - lv_area_get_height(&scrl_cords) - vpad;   /* Bottom align */
 8012fb8:	bfb7      	itett	lt
 8012fba:	eba3 0900 	sublt.w	r9, r3, r0
        bool refr_y = false;
 8012fbe:	2300      	movge	r3, #0
                refr_y = true;
 8012fc0:	2301      	movlt	r3, #1
                new_y =  lv_area_get_height(&page_cords) - lv_area_get_height(&scrl_cords) - vpad;   /* Bottom align */
 8012fc2:	eba9 0906 	sublt.w	r9, r9, r6
 8012fc6:	bfb8      	it	lt
 8012fc8:	fa0f f989 	sxthlt.w	r9, r9
            if(scrl_cords.y1  > page_cords.y1 + vpad) {
 8012fcc:	45f0      	cmp	r8, lr
 8012fce:	dc0d      	bgt.n	8012fec <lv_page_scrollable_signal+0x12c>
        if(refr_x != false || refr_y != false) {
 8012fd0:	b901      	cbnz	r1, 8012fd4 <lv_page_scrollable_signal+0x114>
 8012fd2:	b123      	cbz	r3, 8012fde <lv_page_scrollable_signal+0x11e>
            lv_obj_set_pos(scrl, new_x, new_y);
 8012fd4:	464a      	mov	r2, r9
 8012fd6:	4629      	mov	r1, r5
 8012fd8:	4638      	mov	r0, r7
 8012fda:	f7f5 fa07 	bl	80083ec <lv_obj_set_pos>
        lv_page_sb_refresh(page);
 8012fde:	4620      	mov	r0, r4
 8012fe0:	f7ff fd7f 	bl	8012ae2 <lv_page_sb_refresh>
}
 8012fe4:	9801      	ldr	r0, [sp, #4]
 8012fe6:	b007      	add	sp, #28
 8012fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(scrl_cords.y1  > page_cords.y1 + vpad) {
 8012fec:	46b1      	mov	r9, r6
 8012fee:	e7f1      	b.n	8012fd4 <lv_page_scrollable_signal+0x114>
    } else if(sign == LV_SIGNAL_DRAG_END) {
 8012ff0:	2e0d      	cmp	r6, #13
 8012ff2:	d154      	bne.n	801309e <lv_page_scrollable_signal+0x1de>
        if(page_ext->sb.mode == LV_SB_MODE_DRAG) {
 8012ff4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8012ff8:	f003 021c 	and.w	r2, r3, #28
 8012ffc:	2a08      	cmp	r2, #8
 8012ffe:	d1f1      	bne.n	8012fe4 <lv_page_scrollable_signal+0x124>
            if(page_ext->sb.hor_draw) {
 8013000:	07da      	lsls	r2, r3, #31
 8013002:	d523      	bpl.n	801304c <lv_page_scrollable_signal+0x18c>
                lv_area_copy(&sb_area_tmp, &page_ext->sb.hor_area);
 8013004:	f100 0114 	add.w	r1, r0, #20
 8013008:	a804      	add	r0, sp, #16
 801300a:	f7ff fd65 	bl	8012ad8 <lv_area_copy>
                sb_area_tmp.x1 += page->coords.x1;
 801300e:	8a22      	ldrh	r2, [r4, #16]
 8013010:	f8bd 3010 	ldrh.w	r3, [sp, #16]
                lv_inv_area(&sb_area_tmp);
 8013014:	a804      	add	r0, sp, #16
                sb_area_tmp.y1 += page->coords.y1;
 8013016:	f8bd 1012 	ldrh.w	r1, [sp, #18]
                sb_area_tmp.x1 += page->coords.x1;
 801301a:	4413      	add	r3, r2
 801301c:	f8ad 3010 	strh.w	r3, [sp, #16]
                sb_area_tmp.y1 += page->coords.y1;
 8013020:	8a63      	ldrh	r3, [r4, #18]
 8013022:	4419      	add	r1, r3
 8013024:	f8ad 1012 	strh.w	r1, [sp, #18]
                sb_area_tmp.x2 += page->coords.x1;
 8013028:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801302c:	440a      	add	r2, r1
 801302e:	f8ad 2014 	strh.w	r2, [sp, #20]
                sb_area_tmp.y2 += page->coords.y1;
 8013032:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8013036:	4413      	add	r3, r2
 8013038:	f8ad 3016 	strh.w	r3, [sp, #22]
                lv_inv_area(&sb_area_tmp);
 801303c:	f7f6 f936 	bl	80092ac <lv_inv_area>
                page_ext->sb.hor_draw = 0;
 8013040:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8013044:	f36f 0300 	bfc	r3, #0, #1
 8013048:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
            if(page_ext->sb.ver_draw)  {
 801304c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8013050:	079b      	lsls	r3, r3, #30
 8013052:	d5c7      	bpl.n	8012fe4 <lv_page_scrollable_signal+0x124>
                lv_area_copy(&sb_area_tmp, &page_ext->sb.ver_area);
 8013054:	f105 011c 	add.w	r1, r5, #28
 8013058:	a804      	add	r0, sp, #16
 801305a:	f7ff fd3d 	bl	8012ad8 <lv_area_copy>
                sb_area_tmp.x1 += page->coords.x1;
 801305e:	8a22      	ldrh	r2, [r4, #16]
 8013060:	f8bd 3010 	ldrh.w	r3, [sp, #16]
                lv_inv_area(&sb_area_tmp);
 8013064:	a804      	add	r0, sp, #16
                sb_area_tmp.y1 += page->coords.y1;
 8013066:	f8bd 1012 	ldrh.w	r1, [sp, #18]
                sb_area_tmp.x1 += page->coords.x1;
 801306a:	4413      	add	r3, r2
 801306c:	f8ad 3010 	strh.w	r3, [sp, #16]
                sb_area_tmp.y1 += page->coords.y1;
 8013070:	8a63      	ldrh	r3, [r4, #18]
 8013072:	4419      	add	r1, r3
 8013074:	f8ad 1012 	strh.w	r1, [sp, #18]
                sb_area_tmp.x2 += page->coords.x1;
 8013078:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801307c:	440a      	add	r2, r1
 801307e:	f8ad 2014 	strh.w	r2, [sp, #20]
                sb_area_tmp.y2 += page->coords.y1;
 8013082:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8013086:	4413      	add	r3, r2
 8013088:	f8ad 3016 	strh.w	r3, [sp, #22]
                lv_inv_area(&sb_area_tmp);
 801308c:	f7f6 f90e 	bl	80092ac <lv_inv_area>
                page_ext->sb.ver_draw = 0;
 8013090:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8013094:	f36f 0341 	bfc	r3, #1, #1
 8013098:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 801309c:	e7a2      	b.n	8012fe4 <lv_page_scrollable_signal+0x124>
    } else if(sign == LV_SIGNAL_PRESSED) {
 801309e:	2e06      	cmp	r6, #6
 80130a0:	d105      	bne.n	80130ae <lv_page_scrollable_signal+0x1ee>
        if(page_ext->pr_action != NULL) {
 80130a2:	68c3      	ldr	r3, [r0, #12]
            if(page_ext->rel_action != NULL) {
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d09d      	beq.n	8012fe4 <lv_page_scrollable_signal+0x124>
                page_ext->rel_action(page);
 80130a8:	4620      	mov	r0, r4
 80130aa:	4798      	blx	r3
 80130ac:	e79a      	b.n	8012fe4 <lv_page_scrollable_signal+0x124>
    } else if(sign == LV_SIGNAL_RELEASED) {
 80130ae:	2e09      	cmp	r6, #9
 80130b0:	d198      	bne.n	8012fe4 <lv_page_scrollable_signal+0x124>
        if(lv_indev_is_dragging(lv_indev_get_act()) == false) {
 80130b2:	f7f5 f84f 	bl	8008154 <lv_indev_get_act>
 80130b6:	f7f5 f87f 	bl	80081b8 <lv_indev_is_dragging>
 80130ba:	2800      	cmp	r0, #0
 80130bc:	d192      	bne.n	8012fe4 <lv_page_scrollable_signal+0x124>
            if(page_ext->rel_action != NULL) {
 80130be:	68ab      	ldr	r3, [r5, #8]
 80130c0:	e7f0      	b.n	80130a4 <lv_page_scrollable_signal+0x1e4>
 80130c2:	bf00      	nop
 80130c4:	20017438 	.word	0x20017438

080130c8 <lv_page_set_rel_action>:
{
 80130c8:	b510      	push	{r4, lr}
 80130ca:	460c      	mov	r4, r1
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 80130cc:	f7f5 fed5 	bl	8008e7a <lv_obj_get_ext_attr>
    ext->rel_action = rel_action;
 80130d0:	6084      	str	r4, [r0, #8]
 80130d2:	bd10      	pop	{r4, pc}

080130d4 <lv_page_set_pr_action>:
{
 80130d4:	b510      	push	{r4, lr}
 80130d6:	460c      	mov	r4, r1
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 80130d8:	f7f5 fecf 	bl	8008e7a <lv_obj_get_ext_attr>
    ext->pr_action = pr_action;
 80130dc:	60c4      	str	r4, [r0, #12]
 80130de:	bd10      	pop	{r4, pc}

080130e0 <lv_page_set_sb_mode>:
{
 80130e0:	b538      	push	{r3, r4, r5, lr}
 80130e2:	460d      	mov	r5, r1
 80130e4:	4604      	mov	r4, r0
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 80130e6:	f7f5 fec8 	bl	8008e7a <lv_obj_get_ext_attr>
    if(ext->sb.mode == sb_mode) return;
 80130ea:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80130ee:	f3c3 0282 	ubfx	r2, r3, #2, #3
 80130f2:	42aa      	cmp	r2, r5
 80130f4:	d025      	beq.n	8013142 <lv_page_set_sb_mode+0x62>
    if(sb_mode == LV_SB_MODE_HIDE) ext->sb.mode |= LV_SB_MODE_HIDE;                 /*Set the hidden flag*/
 80130f6:	2d04      	cmp	r5, #4
 80130f8:	d115      	bne.n	8013126 <lv_page_set_sb_mode+0x46>
 80130fa:	f042 0204 	orr.w	r2, r2, #4
    else if(sb_mode == LV_SB_MODE_UNHIDE) ext->sb.mode &= (~LV_SB_MODE_HIDE);       /*Clear the hidden flag*/
 80130fe:	f362 0384 	bfi	r3, r2, #2, #3
        ext->sb.mode = sb_mode;
 8013102:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    ext->sb.hor_draw = 0;
 8013106:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    ext->sb.ver_draw = 0;
 801310a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 801310e:	f36f 0341 	bfc	r3, #1, #1
 8013112:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    lv_page_sb_refresh(page);
 8013116:	4620      	mov	r0, r4
 8013118:	f7ff fce3 	bl	8012ae2 <lv_page_sb_refresh>
    lv_obj_invalidate(page);
 801311c:	4620      	mov	r0, r4
}
 801311e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(page);
 8013122:	f7f5 b8c9 	b.w	80082b8 <lv_obj_invalidate>
    else if(sb_mode == LV_SB_MODE_UNHIDE) ext->sb.mode &= (~LV_SB_MODE_HIDE);       /*Clear the hidden flag*/
 8013126:	2d05      	cmp	r5, #5
 8013128:	d102      	bne.n	8013130 <lv_page_set_sb_mode+0x50>
 801312a:	f002 0203 	and.w	r2, r2, #3
 801312e:	e7e6      	b.n	80130fe <lv_page_set_sb_mode+0x1e>
        if(ext->sb.mode & LV_SB_MODE_HIDE) sb_mode |= LV_SB_MODE_HIDE;
 8013130:	0753      	lsls	r3, r2, #29
        ext->sb.mode = sb_mode;
 8013132:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
        if(ext->sb.mode & LV_SB_MODE_HIDE) sb_mode |= LV_SB_MODE_HIDE;
 8013136:	bf48      	it	mi
 8013138:	f045 0504 	orrmi.w	r5, r5, #4
        ext->sb.mode = sb_mode;
 801313c:	f365 0384 	bfi	r3, r5, #2, #3
 8013140:	e7df      	b.n	8013102 <lv_page_set_sb_mode+0x22>
 8013142:	bd38      	pop	{r3, r4, r5, pc}

08013144 <lv_page_set_arrow_scroll>:
{
 8013144:	b510      	push	{r4, lr}
 8013146:	460c      	mov	r4, r1
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8013148:	f7f5 fe97 	bl	8008e7a <lv_obj_get_ext_attr>
    ext->arrow_scroll = en ? 1 : 0;
 801314c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8013150:	f364 0300 	bfi	r3, r4, #0, #1
 8013154:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8013158:	bd10      	pop	{r4, pc}

0801315a <lv_page_set_style>:
{
 801315a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801315c:	460f      	mov	r7, r1
 801315e:	4605      	mov	r5, r0
 8013160:	4616      	mov	r6, r2
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8013162:	f7f5 fe8a 	bl	8008e7a <lv_obj_get_ext_attr>
    switch(type) {
 8013166:	2f01      	cmp	r7, #1
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8013168:	4604      	mov	r4, r0
    switch(type) {
 801316a:	d009      	beq.n	8013180 <lv_page_set_style+0x26>
 801316c:	d302      	bcc.n	8013174 <lv_page_set_style+0x1a>
 801316e:	2f02      	cmp	r7, #2
 8013170:	d009      	beq.n	8013186 <lv_page_set_style+0x2c>
 8013172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_obj_set_style(page, style);
 8013174:	4631      	mov	r1, r6
 8013176:	4628      	mov	r0, r5
}
 8013178:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_obj_set_style(ext->scrl, style);
 801317c:	f7f5 bd44 	b.w	8008c08 <lv_obj_set_style>
 8013180:	4631      	mov	r1, r6
 8013182:	6840      	ldr	r0, [r0, #4]
 8013184:	e7f8      	b.n	8013178 <lv_page_set_style+0x1e>
            ext->sb.style = style;
 8013186:	6106      	str	r6, [r0, #16]
            lv_area_set_height(&ext->sb.hor_area, ext->sb.style->body.padding.inner);
 8013188:	3014      	adds	r0, #20
 801318a:	f9b6 1024 	ldrsh.w	r1, [r6, #36]	; 0x24
 801318e:	f7fa fb08 	bl	800d7a2 <lv_area_set_height>
            lv_area_set_width(&ext->sb.ver_area, ext->sb.style->body.padding.inner);
 8013192:	6923      	ldr	r3, [r4, #16]
 8013194:	f104 001c 	add.w	r0, r4, #28
 8013198:	f9b3 1024 	ldrsh.w	r1, [r3, #36]	; 0x24
 801319c:	f7fa fafc 	bl	800d798 <lv_area_set_width>
            lv_page_sb_refresh(page);
 80131a0:	4628      	mov	r0, r5
 80131a2:	f7ff fc9e 	bl	8012ae2 <lv_page_sb_refresh>
            lv_obj_refresh_ext_size(page);
 80131a6:	4628      	mov	r0, r5
 80131a8:	f7f5 fc71 	bl	8008a8e <lv_obj_refresh_ext_size>
            lv_obj_invalidate(page);
 80131ac:	4628      	mov	r0, r5
}
 80131ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_obj_invalidate(page);
 80131b2:	f7f5 b881 	b.w	80082b8 <lv_obj_invalidate>

080131b6 <lv_page_get_scrl>:
{
 80131b6:	b508      	push	{r3, lr}
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 80131b8:	f7f5 fe5f 	bl	8008e7a <lv_obj_get_ext_attr>
}
 80131bc:	6840      	ldr	r0, [r0, #4]
 80131be:	bd08      	pop	{r3, pc}

080131c0 <lv_page_get_arrow_scroll>:
{
 80131c0:	b508      	push	{r3, lr}
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 80131c2:	f7f5 fe5a 	bl	8008e7a <lv_obj_get_ext_attr>
    return ext->arrow_scroll ? true : false;
 80131c6:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
}
 80131ca:	f000 0001 	and.w	r0, r0, #1
 80131ce:	bd08      	pop	{r3, pc}

080131d0 <lv_page_get_style>:
{
 80131d0:	b538      	push	{r3, r4, r5, lr}
 80131d2:	460c      	mov	r4, r1
 80131d4:	4605      	mov	r5, r0
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 80131d6:	f7f5 fe50 	bl	8008e7a <lv_obj_get_ext_attr>
    switch(type) {
 80131da:	2c01      	cmp	r4, #1
 80131dc:	d009      	beq.n	80131f2 <lv_page_get_style+0x22>
 80131de:	d303      	bcc.n	80131e8 <lv_page_get_style+0x18>
 80131e0:	2c02      	cmp	r4, #2
 80131e2:	d008      	beq.n	80131f6 <lv_page_get_style+0x26>
            return NULL;
 80131e4:	2000      	movs	r0, #0
}
 80131e6:	bd38      	pop	{r3, r4, r5, pc}
            return lv_obj_get_style(page);
 80131e8:	4628      	mov	r0, r5
}
 80131ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            return lv_obj_get_style(ext->scrl);
 80131ee:	f7f5 bd79 	b.w	8008ce4 <lv_obj_get_style>
 80131f2:	6840      	ldr	r0, [r0, #4]
 80131f4:	e7f9      	b.n	80131ea <lv_page_get_style+0x1a>
            return ext->sb.style;
 80131f6:	6900      	ldr	r0, [r0, #16]
 80131f8:	bd38      	pop	{r3, r4, r5, pc}
	...

080131fc <lv_page_create>:
{
 80131fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013200:	4681      	mov	r9, r0
 8013202:	460e      	mov	r6, r1
    lv_obj_t * new_page = lv_cont_create(par, copy);
 8013204:	f7fd fa0e 	bl	8010624 <lv_cont_create>
    lv_mem_assert(new_page);
 8013208:	4604      	mov	r4, r0
 801320a:	b900      	cbnz	r0, 801320e <lv_page_create+0x12>
 801320c:	e7fe      	b.n	801320c <lv_page_create+0x10>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_page);
 801320e:	4d6a      	ldr	r5, [pc, #424]	; (80133b8 <lv_page_create+0x1bc>)
 8013210:	682b      	ldr	r3, [r5, #0]
 8013212:	b913      	cbnz	r3, 801321a <lv_page_create+0x1e>
 8013214:	f7f5 fe2d 	bl	8008e72 <lv_obj_get_signal_func>
 8013218:	6028      	str	r0, [r5, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_func(new_page);
 801321a:	4d68      	ldr	r5, [pc, #416]	; (80133bc <lv_page_create+0x1c0>)
 801321c:	682b      	ldr	r3, [r5, #0]
 801321e:	b91b      	cbnz	r3, 8013228 <lv_page_create+0x2c>
 8013220:	4620      	mov	r0, r4
 8013222:	f7f5 fe28 	bl	8008e76 <lv_obj_get_design_func>
 8013226:	6028      	str	r0, [r5, #0]
    lv_page_ext_t * ext = lv_obj_allocate_ext_attr(new_page, sizeof(lv_page_ext_t));
 8013228:	212c      	movs	r1, #44	; 0x2c
 801322a:	4620      	mov	r0, r4
 801322c:	f7f5 fc28 	bl	8008a80 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 8013230:	4605      	mov	r5, r0
 8013232:	b900      	cbnz	r0, 8013236 <lv_page_create+0x3a>
 8013234:	e7fe      	b.n	8013234 <lv_page_create+0x38>
    ext->sb.hor_draw = 0;
 8013236:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    ext->sb.mode = LV_SB_MODE_AUTO;
 801323a:	2203      	movs	r2, #3
    ext->scrl = NULL;
 801323c:	2700      	movs	r7, #0
    ext->sb.style = &lv_style_pretty;
 801323e:	f8df 8198 	ldr.w	r8, [pc, #408]	; 80133d8 <lv_page_create+0x1dc>
    ext->sb.mode = LV_SB_MODE_AUTO;
 8013242:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    ext->scrl = NULL;
 8013246:	6047      	str	r7, [r0, #4]
    ext->sb.mode = LV_SB_MODE_AUTO;
 8013248:	f362 0384 	bfi	r3, r2, #2, #3
    ext->pr_action = NULL;
 801324c:	60c7      	str	r7, [r0, #12]
    ext->rel_action = NULL;
 801324e:	6087      	str	r7, [r0, #8]
    ext->sb.mode = LV_SB_MODE_AUTO;
 8013250:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    ext->arrow_scroll = 0;
 8013254:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    ext->sb.style = &lv_style_pretty;
 8013258:	f8c0 8010 	str.w	r8, [r0, #16]
    ext->arrow_scroll = 0;
 801325c:	f367 0300 	bfi	r3, r7, #0, #1
 8013260:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    if(copy == NULL) {
 8013264:	2e00      	cmp	r6, #0
 8013266:	d15d      	bne.n	8013324 <lv_page_create+0x128>
        ext->scrl = lv_cont_create(new_page, NULL);
 8013268:	4631      	mov	r1, r6
 801326a:	4620      	mov	r0, r4
 801326c:	f7fd f9da 	bl	8010624 <lv_cont_create>
        lv_obj_set_signal_func(ext->scrl, lv_page_scrollable_signal);
 8013270:	4953      	ldr	r1, [pc, #332]	; (80133c0 <lv_page_create+0x1c4>)
        ext->scrl = lv_cont_create(new_page, NULL);
 8013272:	6068      	str	r0, [r5, #4]
        lv_obj_set_signal_func(ext->scrl, lv_page_scrollable_signal);
 8013274:	f7f5 fc00 	bl	8008a78 <lv_obj_set_signal_func>
        lv_obj_set_design_func(ext->scrl, lv_scrl_design);
 8013278:	6868      	ldr	r0, [r5, #4]
 801327a:	4952      	ldr	r1, [pc, #328]	; (80133c4 <lv_page_create+0x1c8>)
 801327c:	f7f5 fbfe 	bl	8008a7c <lv_obj_set_design_func>
        lv_obj_set_drag(ext->scrl, true);
 8013280:	6868      	ldr	r0, [r5, #4]
 8013282:	2101      	movs	r1, #1
 8013284:	f7f5 fbcf 	bl	8008a26 <lv_obj_set_drag>
        lv_obj_set_drag_throw(ext->scrl, true);
 8013288:	6868      	ldr	r0, [r5, #4]
 801328a:	2101      	movs	r1, #1
 801328c:	f7f5 fbd9 	bl	8008a42 <lv_obj_set_drag_throw>
        lv_obj_set_protect(ext->scrl, LV_PROTECT_PARENT | LV_PROTECT_PRESS_LOST);
 8013290:	6868      	ldr	r0, [r5, #4]
 8013292:	2112      	movs	r1, #18
 8013294:	f7f5 fbe3 	bl	8008a5e <lv_obj_set_protect>
        lv_cont_set_fit(ext->scrl, false, true);
 8013298:	2201      	movs	r2, #1
 801329a:	6868      	ldr	r0, [r5, #4]
 801329c:	4631      	mov	r1, r6
 801329e:	f7fd fa24 	bl	80106ea <lv_cont_set_fit>
        lv_obj_set_signal_func(new_page, lv_page_signal);
 80132a2:	4949      	ldr	r1, [pc, #292]	; (80133c8 <lv_page_create+0x1cc>)
 80132a4:	4620      	mov	r0, r4
 80132a6:	f7f5 fbe7 	bl	8008a78 <lv_obj_set_signal_func>
        lv_obj_set_design_func(new_page, lv_page_design);
 80132aa:	4948      	ldr	r1, [pc, #288]	; (80133cc <lv_page_create+0x1d0>)
 80132ac:	4620      	mov	r0, r4
 80132ae:	f7f5 fbe5 	bl	8008a7c <lv_obj_set_design_func>
        lv_page_set_sb_mode(new_page, ext->sb.mode);
 80132b2:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
 80132b6:	4620      	mov	r0, r4
 80132b8:	f3c1 0182 	ubfx	r1, r1, #2, #3
 80132bc:	f7ff ff10 	bl	80130e0 <lv_page_set_sb_mode>
        lv_theme_t * th = lv_theme_get_current();
 80132c0:	f002 fbd8 	bl	8015a74 <lv_theme_get_current>
        if(th) {
 80132c4:	4605      	mov	r5, r0
 80132c6:	b308      	cbz	r0, 801330c <lv_page_create+0x110>
            if(par == NULL) { /*Different styles if it is screen*/
 80132c8:	f1b9 0f00 	cmp.w	r9, #0
 80132cc:	d115      	bne.n	80132fa <lv_page_create+0xfe>
                lv_page_set_style(new_page, LV_PAGE_STYLE_BG, th->bg);
 80132ce:	6802      	ldr	r2, [r0, #0]
 80132d0:	4649      	mov	r1, r9
 80132d2:	4620      	mov	r0, r4
 80132d4:	f7ff ff41 	bl	801315a <lv_page_set_style>
                lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, &lv_style_transp);
 80132d8:	4a3d      	ldr	r2, [pc, #244]	; (80133d0 <lv_page_create+0x1d4>)
                lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, th->page.scrl);
 80132da:	2101      	movs	r1, #1
 80132dc:	4620      	mov	r0, r4
 80132de:	f7ff ff3c 	bl	801315a <lv_page_set_style>
            lv_page_set_style(new_page, LV_PAGE_STYLE_SB, th->page.sb);
 80132e2:	f8d5 20cc 	ldr.w	r2, [r5, #204]	; 0xcc
            lv_page_set_style(new_page, LV_PAGE_STYLE_SB, &lv_style_pretty_color);
 80132e6:	2102      	movs	r1, #2
 80132e8:	4620      	mov	r0, r4
 80132ea:	f7ff ff36 	bl	801315a <lv_page_set_style>
    lv_page_sb_refresh(new_page);
 80132ee:	4620      	mov	r0, r4
 80132f0:	f7ff fbf7 	bl	8012ae2 <lv_page_sb_refresh>
}
 80132f4:	4620      	mov	r0, r4
 80132f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                lv_page_set_style(new_page, LV_PAGE_STYLE_BG, th->page.bg);
 80132fa:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
 80132fe:	4631      	mov	r1, r6
 8013300:	4620      	mov	r0, r4
 8013302:	f7ff ff2a 	bl	801315a <lv_page_set_style>
                lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, th->page.scrl);
 8013306:	f8d5 20c8 	ldr.w	r2, [r5, #200]	; 0xc8
 801330a:	e7e6      	b.n	80132da <lv_page_create+0xde>
            lv_page_set_style(new_page, LV_PAGE_STYLE_BG, &lv_style_pretty_color);
 801330c:	4a31      	ldr	r2, [pc, #196]	; (80133d4 <lv_page_create+0x1d8>)
 801330e:	4631      	mov	r1, r6
 8013310:	4620      	mov	r0, r4
 8013312:	f7ff ff22 	bl	801315a <lv_page_set_style>
            lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, &lv_style_pretty);
 8013316:	4642      	mov	r2, r8
 8013318:	2101      	movs	r1, #1
 801331a:	4620      	mov	r0, r4
 801331c:	f7ff ff1d 	bl	801315a <lv_page_set_style>
            lv_page_set_style(new_page, LV_PAGE_STYLE_SB, &lv_style_pretty_color);
 8013320:	4a2c      	ldr	r2, [pc, #176]	; (80133d4 <lv_page_create+0x1d8>)
 8013322:	e7e0      	b.n	80132e6 <lv_page_create+0xea>
        lv_page_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8013324:	4630      	mov	r0, r6
 8013326:	f7f5 fda8 	bl	8008e7a <lv_obj_get_ext_attr>
 801332a:	4680      	mov	r8, r0
        ext->scrl = lv_cont_create(new_page, copy_ext->scrl);
 801332c:	6841      	ldr	r1, [r0, #4]
 801332e:	4620      	mov	r0, r4
 8013330:	f7fd f978 	bl	8010624 <lv_cont_create>
        lv_obj_set_signal_func(ext->scrl, lv_page_scrollable_signal);
 8013334:	4922      	ldr	r1, [pc, #136]	; (80133c0 <lv_page_create+0x1c4>)
        ext->scrl = lv_cont_create(new_page, copy_ext->scrl);
 8013336:	6068      	str	r0, [r5, #4]
        lv_obj_set_signal_func(ext->scrl, lv_page_scrollable_signal);
 8013338:	f7f5 fb9e 	bl	8008a78 <lv_obj_set_signal_func>
        lv_page_set_pr_action(new_page, copy_ext->pr_action);
 801333c:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8013340:	4620      	mov	r0, r4
 8013342:	f7ff fec7 	bl	80130d4 <lv_page_set_pr_action>
        lv_page_set_rel_action(new_page, copy_ext->rel_action);
 8013346:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801334a:	4620      	mov	r0, r4
 801334c:	f7ff febc 	bl	80130c8 <lv_page_set_rel_action>
        lv_page_set_sb_mode(new_page, copy_ext->sb.mode);
 8013350:	f898 1024 	ldrb.w	r1, [r8, #36]	; 0x24
 8013354:	4620      	mov	r0, r4
 8013356:	f3c1 0182 	ubfx	r1, r1, #2, #3
 801335a:	f7ff fec1 	bl	80130e0 <lv_page_set_sb_mode>
        lv_page_set_arrow_scroll(new_page, copy_ext->arrow_scroll);
 801335e:	f898 1028 	ldrb.w	r1, [r8, #40]	; 0x28
 8013362:	4620      	mov	r0, r4
 8013364:	f001 0101 	and.w	r1, r1, #1
 8013368:	f7ff feec 	bl	8013144 <lv_page_set_arrow_scroll>
        lv_page_set_style(new_page, LV_PAGE_STYLE_BG, lv_page_get_style(copy, LV_PAGE_STYLE_BG));
 801336c:	4639      	mov	r1, r7
 801336e:	4630      	mov	r0, r6
 8013370:	f7ff ff2e 	bl	80131d0 <lv_page_get_style>
 8013374:	4639      	mov	r1, r7
 8013376:	4602      	mov	r2, r0
 8013378:	4620      	mov	r0, r4
 801337a:	f7ff feee 	bl	801315a <lv_page_set_style>
        lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, lv_page_get_style(copy, LV_PAGE_STYLE_SCRL));
 801337e:	2101      	movs	r1, #1
 8013380:	4630      	mov	r0, r6
 8013382:	f7ff ff25 	bl	80131d0 <lv_page_get_style>
 8013386:	2101      	movs	r1, #1
 8013388:	4602      	mov	r2, r0
 801338a:	4620      	mov	r0, r4
 801338c:	f7ff fee5 	bl	801315a <lv_page_set_style>
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8013390:	4630      	mov	r0, r6
 8013392:	f7f5 fd72 	bl	8008e7a <lv_obj_get_ext_attr>
        lv_page_set_style(new_page, LV_PAGE_STYLE_SB, lv_page_get_style(copy, LV_PAGE_STYLE_SB));
 8013396:	2102      	movs	r1, #2
 8013398:	6902      	ldr	r2, [r0, #16]
 801339a:	4620      	mov	r0, r4
 801339c:	f7ff fedd 	bl	801315a <lv_page_set_style>
        lv_obj_set_signal_func(new_page, lv_page_signal);
 80133a0:	4620      	mov	r0, r4
 80133a2:	4909      	ldr	r1, [pc, #36]	; (80133c8 <lv_page_create+0x1cc>)
 80133a4:	f7f5 fb68 	bl	8008a78 <lv_obj_set_signal_func>
        lv_obj_set_design_func(new_page, lv_page_design);
 80133a8:	4620      	mov	r0, r4
 80133aa:	4908      	ldr	r1, [pc, #32]	; (80133cc <lv_page_create+0x1d0>)
 80133ac:	f7f5 fb66 	bl	8008a7c <lv_obj_set_design_func>
        lv_obj_refresh_style(new_page);
 80133b0:	4620      	mov	r0, r4
 80133b2:	f7f5 fb23 	bl	80089fc <lv_obj_refresh_style>
 80133b6:	e79a      	b.n	80132ee <lv_page_create+0xf2>
 80133b8:	20017438 	.word	0x20017438
 80133bc:	20017434 	.word	0x20017434
 80133c0:	08012ec1 	.word	0x08012ec1
 80133c4:	08012e21 	.word	0x08012e21
 80133c8:	080136ed 	.word	0x080136ed
 80133cc:	080133dd 	.word	0x080133dd
 80133d0:	20017bc8 	.word	0x20017bc8
 80133d4:	20017b80 	.word	0x20017b80
 80133d8:	20017ca0 	.word	0x20017ca0

080133dc <lv_page_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 80133dc:	2a02      	cmp	r2, #2
{
 80133de:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80133e2:	4604      	mov	r4, r0
 80133e4:	460e      	mov	r6, r1
 80133e6:	4615      	mov	r5, r2
    if(mode == LV_DESIGN_COVER_CHK) {
 80133e8:	d105      	bne.n	80133f6 <lv_page_design+0x1a>
        return ancestor_design(page, mask, mode);
 80133ea:	4b4f      	ldr	r3, [pc, #316]	; (8013528 <lv_page_design+0x14c>)
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	4798      	blx	r3
}
 80133f0:	b002      	add	sp, #8
 80133f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 80133f6:	b9a2      	cbnz	r2, 8013422 <lv_page_design+0x46>
        lv_style_t * style = lv_page_get_style(page, LV_PAGE_STYLE_BG);
 80133f8:	4611      	mov	r1, r2
 80133fa:	f7ff fee9 	bl	80131d0 <lv_page_get_style>
 80133fe:	4607      	mov	r7, r0
        lv_coord_t border_width_tmp =  style->body.border.width;
 8013400:	f9b0 8014 	ldrsh.w	r8, [r0, #20]
        style->body.border.width = 0;
 8013404:	8285      	strh	r5, [r0, #20]
        lv_draw_rect(&page->coords, mask, style, lv_obj_get_opa_scale(page));
 8013406:	4620      	mov	r0, r4
 8013408:	f7f5 fcd7 	bl	8008dba <lv_obj_get_opa_scale>
 801340c:	463a      	mov	r2, r7
 801340e:	4603      	mov	r3, r0
 8013410:	4631      	mov	r1, r6
 8013412:	f104 0010 	add.w	r0, r4, #16
 8013416:	f7f7 fb39 	bl	800aa8c <lv_draw_rect>
        style->body.border.width = border_width_tmp;
 801341a:	f8a7 8014 	strh.w	r8, [r7, #20]
    return true;
 801341e:	2001      	movs	r0, #1
 8013420:	e7e6      	b.n	80133f0 <lv_page_design+0x14>
    } else if(mode == LV_DESIGN_DRAW_POST) { /*Draw the scroll bars finally*/
 8013422:	2a01      	cmp	r2, #1
 8013424:	d1fb      	bne.n	801341e <lv_page_design+0x42>
        lv_style_t * style = lv_page_get_style(page, LV_PAGE_STYLE_BG);
 8013426:	2100      	movs	r1, #0
 8013428:	f7ff fed2 	bl	80131d0 <lv_page_get_style>
        uint8_t empty_tmp =  style->body.empty;
 801342c:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
        style->body.shadow.width = 0;
 8013430:	2200      	movs	r2, #0
        lv_style_t * style = lv_page_get_style(page, LV_PAGE_STYLE_BG);
 8013432:	4605      	mov	r5, r0
        uint8_t empty_tmp =  style->body.empty;
 8013434:	f003 0701 	and.w	r7, r3, #1
        style->body.empty = 1;
 8013438:	f043 0301 	orr.w	r3, r3, #1
        lv_coord_t shadow_width_tmp =  style->body.shadow.width;
 801343c:	f9b0 801c 	ldrsh.w	r8, [r0, #28]
        style->body.empty = 1;
 8013440:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
        style->body.shadow.width = 0;
 8013444:	8382      	strh	r2, [r0, #28]
        lv_draw_rect(&page->coords, mask, style, lv_obj_get_opa_scale(page));
 8013446:	4620      	mov	r0, r4
 8013448:	f7f5 fcb7 	bl	8008dba <lv_obj_get_opa_scale>
 801344c:	462a      	mov	r2, r5
 801344e:	4603      	mov	r3, r0
 8013450:	4631      	mov	r1, r6
 8013452:	f104 0010 	add.w	r0, r4, #16
 8013456:	f7f7 fb19 	bl	800aa8c <lv_draw_rect>
        style->body.empty = empty_tmp;
 801345a:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
        style->body.shadow.width = shadow_width_tmp;
 801345e:	f8a5 801c 	strh.w	r8, [r5, #28]
        lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8013462:	4620      	mov	r0, r4
        style->body.empty = empty_tmp;
 8013464:	f367 0300 	bfi	r3, r7, #0, #1
 8013468:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
        lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801346c:	f7f5 fd05 	bl	8008e7a <lv_obj_get_ext_attr>
        if(ext->sb.hor_draw && (ext->sb.mode & LV_SB_MODE_HIDE) == 0) {
 8013470:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
        lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8013474:	4605      	mov	r5, r0
        if(ext->sb.hor_draw && (ext->sb.mode & LV_SB_MODE_HIDE) == 0) {
 8013476:	07d8      	lsls	r0, r3, #31
 8013478:	d528      	bpl.n	80134cc <lv_page_design+0xf0>
 801347a:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801347e:	0759      	lsls	r1, r3, #29
 8013480:	d424      	bmi.n	80134cc <lv_page_design+0xf0>
            lv_area_copy(&sb_area, &ext->sb.hor_area);
 8013482:	f105 0114 	add.w	r1, r5, #20
 8013486:	4668      	mov	r0, sp
 8013488:	f7ff fb26 	bl	8012ad8 <lv_area_copy>
            sb_area.x1 += page->coords.x1;
 801348c:	8a22      	ldrh	r2, [r4, #16]
 801348e:	f8bd 3000 	ldrh.w	r3, [sp]
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 8013492:	4620      	mov	r0, r4
            sb_area.y1 += page->coords.y1;
 8013494:	f8bd 1002 	ldrh.w	r1, [sp, #2]
            sb_area.x1 += page->coords.x1;
 8013498:	4413      	add	r3, r2
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 801349a:	692f      	ldr	r7, [r5, #16]
            sb_area.x1 += page->coords.x1;
 801349c:	f8ad 3000 	strh.w	r3, [sp]
            sb_area.y1 += page->coords.y1;
 80134a0:	8a63      	ldrh	r3, [r4, #18]
 80134a2:	4419      	add	r1, r3
 80134a4:	f8ad 1002 	strh.w	r1, [sp, #2]
            sb_area.x2 += page->coords.x1;
 80134a8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80134ac:	440a      	add	r2, r1
 80134ae:	f8ad 2004 	strh.w	r2, [sp, #4]
            sb_area.y2 += page->coords.y1;
 80134b2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80134b6:	4413      	add	r3, r2
 80134b8:	f8ad 3006 	strh.w	r3, [sp, #6]
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 80134bc:	f7f5 fc7d 	bl	8008dba <lv_obj_get_opa_scale>
 80134c0:	463a      	mov	r2, r7
 80134c2:	4603      	mov	r3, r0
 80134c4:	4631      	mov	r1, r6
 80134c6:	4668      	mov	r0, sp
 80134c8:	f7f7 fae0 	bl	800aa8c <lv_draw_rect>
        if(ext->sb.ver_draw && (ext->sb.mode & LV_SB_MODE_HIDE) == 0) {
 80134cc:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 80134d0:	079a      	lsls	r2, r3, #30
 80134d2:	d5a4      	bpl.n	801341e <lv_page_design+0x42>
 80134d4:	f3c3 0382 	ubfx	r3, r3, #2, #3
 80134d8:	075b      	lsls	r3, r3, #29
 80134da:	d4a0      	bmi.n	801341e <lv_page_design+0x42>
            lv_area_copy(&sb_area, &ext->sb.ver_area);
 80134dc:	f105 011c 	add.w	r1, r5, #28
 80134e0:	4668      	mov	r0, sp
 80134e2:	f7ff faf9 	bl	8012ad8 <lv_area_copy>
            sb_area.x1 += page->coords.x1;
 80134e6:	8a22      	ldrh	r2, [r4, #16]
 80134e8:	f8bd 3000 	ldrh.w	r3, [sp]
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 80134ec:	4620      	mov	r0, r4
            sb_area.y1 += page->coords.y1;
 80134ee:	f8bd 1002 	ldrh.w	r1, [sp, #2]
            sb_area.x1 += page->coords.x1;
 80134f2:	4413      	add	r3, r2
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 80134f4:	692d      	ldr	r5, [r5, #16]
            sb_area.x1 += page->coords.x1;
 80134f6:	f8ad 3000 	strh.w	r3, [sp]
            sb_area.y1 += page->coords.y1;
 80134fa:	8a63      	ldrh	r3, [r4, #18]
 80134fc:	4419      	add	r1, r3
 80134fe:	f8ad 1002 	strh.w	r1, [sp, #2]
            sb_area.x2 += page->coords.x1;
 8013502:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8013506:	440a      	add	r2, r1
 8013508:	f8ad 2004 	strh.w	r2, [sp, #4]
            sb_area.y2 += page->coords.y1;
 801350c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013510:	4413      	add	r3, r2
 8013512:	f8ad 3006 	strh.w	r3, [sp, #6]
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 8013516:	f7f5 fc50 	bl	8008dba <lv_obj_get_opa_scale>
 801351a:	462a      	mov	r2, r5
 801351c:	4603      	mov	r3, r0
 801351e:	4631      	mov	r1, r6
 8013520:	4668      	mov	r0, sp
 8013522:	f7f7 fab3 	bl	800aa8c <lv_draw_rect>
 8013526:	e77a      	b.n	801341e <lv_page_design+0x42>
 8013528:	20017434 	.word	0x20017434

0801352c <lv_page_glue_obj>:
{
 801352c:	b538      	push	{r3, r4, r5, lr}
 801352e:	4604      	mov	r4, r0
 8013530:	460d      	mov	r5, r1
    lv_obj_set_drag_parent(obj, glue);
 8013532:	f7f5 fa8d 	bl	8008a50 <lv_obj_set_drag_parent>
    lv_obj_set_drag(obj, glue);
 8013536:	4629      	mov	r1, r5
 8013538:	4620      	mov	r0, r4
}
 801353a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_set_drag(obj, glue);
 801353e:	f7f5 ba72 	b.w	8008a26 <lv_obj_set_drag>
	...

08013544 <lv_page_focus>:
{
 8013544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013548:	4683      	mov	fp, r0
 801354a:	b08b      	sub	sp, #44	; 0x2c
 801354c:	468a      	mov	sl, r1
    lv_anim_del(page, (lv_anim_fp_t)lv_obj_set_y);
 801354e:	4938      	ldr	r1, [pc, #224]	; (8013630 <lv_page_focus+0xec>)
{
 8013550:	4615      	mov	r5, r2
    lv_anim_del(page, (lv_anim_fp_t)lv_obj_set_y);
 8013552:	f7fa f893 	bl	800d67c <lv_anim_del>
    lv_anim_del(page, (lv_anim_fp_t)lv_obj_set_pos);
 8013556:	4937      	ldr	r1, [pc, #220]	; (8013634 <lv_page_focus+0xf0>)
 8013558:	4658      	mov	r0, fp
 801355a:	f7fa f88f 	bl	800d67c <lv_anim_del>
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801355e:	4658      	mov	r0, fp
 8013560:	f7f5 fc8b 	bl	8008e7a <lv_obj_get_ext_attr>
    lv_style_t * style = lv_page_get_style(page, LV_PAGE_STYLE_BG);
 8013564:	2100      	movs	r1, #0
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8013566:	4606      	mov	r6, r0
    lv_style_t * style = lv_page_get_style(page, LV_PAGE_STYLE_BG);
 8013568:	4658      	mov	r0, fp
 801356a:	f7ff fe31 	bl	80131d0 <lv_page_get_style>
    lv_style_t * style_scrl = lv_page_get_style(page, LV_PAGE_STYLE_SCRL);
 801356e:	2101      	movs	r1, #1
    lv_style_t * style = lv_page_get_style(page, LV_PAGE_STYLE_BG);
 8013570:	4680      	mov	r8, r0
    lv_style_t * style_scrl = lv_page_get_style(page, LV_PAGE_STYLE_SCRL);
 8013572:	4658      	mov	r0, fp
 8013574:	f7ff fe2c 	bl	80131d0 <lv_page_get_style>
    lv_coord_t obj_y = obj->coords.y1 - ext->scrl->coords.y1;
 8013578:	6873      	ldr	r3, [r6, #4]
 801357a:	f8ba 4012 	ldrh.w	r4, [sl, #18]
    lv_style_t * style_scrl = lv_page_get_style(page, LV_PAGE_STYLE_SCRL);
 801357e:	4681      	mov	r9, r0
    lv_coord_t obj_y = obj->coords.y1 - ext->scrl->coords.y1;
 8013580:	8a5f      	ldrh	r7, [r3, #18]
    lv_coord_t obj_h = lv_obj_get_height(obj);
 8013582:	4650      	mov	r0, sl
 8013584:	f7f5 fba8 	bl	8008cd8 <lv_obj_get_height>
 8013588:	4682      	mov	sl, r0
    lv_coord_t obj_y = obj->coords.y1 - ext->scrl->coords.y1;
 801358a:	1be4      	subs	r4, r4, r7
    lv_coord_t scrlable_y = lv_obj_get_y(ext->scrl);
 801358c:	6870      	ldr	r0, [r6, #4]
 801358e:	f7f5 fb97 	bl	8008cc0 <lv_obj_get_y>
    lv_coord_t obj_y = obj->coords.y1 - ext->scrl->coords.y1;
 8013592:	b2a7      	uxth	r7, r4
    lv_coord_t scrlable_y = lv_obj_get_y(ext->scrl);
 8013594:	4604      	mov	r4, r0
    lv_coord_t page_h = lv_obj_get_height(page);
 8013596:	4658      	mov	r0, fp
 8013598:	f7f5 fb9e 	bl	8008cd8 <lv_obj_get_height>
    lv_coord_t top_err = -(scrlable_y + obj_y);
 801359c:	193a      	adds	r2, r7, r4
    lv_coord_t bot_err = scrlable_y + obj_y + obj_h - page_h;
 801359e:	b283      	uxth	r3, r0
    if((obj_h <= page_h && top_err > 0) ||
 80135a0:	4582      	cmp	sl, r0
    lv_coord_t bot_err = scrlable_y + obj_y + obj_h - page_h;
 80135a2:	fa1f f48a 	uxth.w	r4, sl
    lv_coord_t top_err = -(scrlable_y + obj_y);
 80135a6:	b292      	uxth	r2, r2
    lv_coord_t bot_err = scrlable_y + obj_y + obj_h - page_h;
 80135a8:	eba4 0e03 	sub.w	lr, r4, r3
    lv_coord_t top_err = -(scrlable_y + obj_y);
 80135ac:	f1c2 0100 	rsb	r1, r2, #0
    lv_coord_t bot_err = scrlable_y + obj_y + obj_h - page_h;
 80135b0:	4472      	add	r2, lr
    lv_coord_t top_err = -(scrlable_y + obj_y);
 80135b2:	b209      	sxth	r1, r1
    lv_coord_t bot_err = scrlable_y + obj_y + obj_h - page_h;
 80135b4:	b212      	sxth	r2, r2
    if((obj_h <= page_h && top_err > 0) ||
 80135b6:	dc0c      	bgt.n	80135d2 <lv_page_focus+0x8e>
 80135b8:	2900      	cmp	r1, #0
 80135ba:	dc0c      	bgt.n	80135d6 <lv_page_focus+0x92>
    else if((obj_h <= page_h && bot_err > 0) ||
 80135bc:	2a00      	cmp	r2, #0
 80135be:	dd17      	ble.n	80135f0 <lv_page_focus+0xac>
        scrlable_y = -(obj_y + style_scrl->body.padding.ver + style->body.padding.ver);
 80135c0:	f8b9 2020 	ldrh.w	r2, [r9, #32]
        scrlable_y += page_h - obj_h;
 80135c4:	1b1c      	subs	r4, r3, r4
 80135c6:	f8b8 3020 	ldrh.w	r3, [r8, #32]
 80135ca:	1aa4      	subs	r4, r4, r2
 80135cc:	441a      	add	r2, r3
 80135ce:	1aa4      	subs	r4, r4, r2
 80135d0:	e007      	b.n	80135e2 <lv_page_focus+0x9e>
            (obj_h > page_h && top_err < bot_err)) {
 80135d2:	4291      	cmp	r1, r2
 80135d4:	daf4      	bge.n	80135c0 <lv_page_focus+0x7c>
        scrlable_y = -(obj_y - style_scrl->body.padding.ver - style->body.padding.ver);
 80135d6:	f8b9 1020 	ldrh.w	r1, [r9, #32]
        scrlable_y += style_scrl->body.padding.ver;
 80135da:	f8b8 4020 	ldrh.w	r4, [r8, #32]
 80135de:	eb04 0441 	add.w	r4, r4, r1, lsl #1
        scrlable_y += page_h - obj_h;
 80135e2:	1be4      	subs	r4, r4, r7
 80135e4:	b224      	sxth	r4, r4
    if(anim_time == 0) {
 80135e6:	b935      	cbnz	r5, 80135f6 <lv_page_focus+0xb2>
        lv_obj_set_y(ext->scrl, scrlable_y);
 80135e8:	4621      	mov	r1, r4
 80135ea:	6870      	ldr	r0, [r6, #4]
 80135ec:	f7f5 f86d 	bl	80086ca <lv_obj_set_y>
}
 80135f0:	b00b      	add	sp, #44	; 0x2c
 80135f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        a.act_time = 0;
 80135f6:	2700      	movs	r7, #0
        a.start = lv_obj_get_y(ext->scrl);
 80135f8:	6870      	ldr	r0, [r6, #4]
        a.act_time = 0;
 80135fa:	f8ad 701e 	strh.w	r7, [sp, #30]
        a.start = lv_obj_get_y(ext->scrl);
 80135fe:	f7f5 fb5f 	bl	8008cc0 <lv_obj_get_y>
        a.playback = 0;
 8013602:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
        a.start = lv_obj_get_y(ext->scrl);
 8013606:	9005      	str	r0, [sp, #20]
        lv_anim_create(&a);
 8013608:	a801      	add	r0, sp, #4
        a.repeat = 0;
 801360a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
        a.end = scrlable_y;
 801360e:	9406      	str	r4, [sp, #24]
        a.time = anim_time;
 8013610:	f8ad 501c 	strh.w	r5, [sp, #28]
        a.repeat = 0;
 8013614:	f367 0341 	bfi	r3, r7, #1, #1
        a.end_cb = NULL;
 8013618:	9703      	str	r7, [sp, #12]
        a.repeat = 0;
 801361a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        a.var = ext->scrl;
 801361e:	6873      	ldr	r3, [r6, #4]
 8013620:	9301      	str	r3, [sp, #4]
        a.path = lv_anim_path_linear;
 8013622:	4b05      	ldr	r3, [pc, #20]	; (8013638 <lv_page_focus+0xf4>)
 8013624:	9304      	str	r3, [sp, #16]
        a.fp = (lv_anim_fp_t) lv_obj_set_y;
 8013626:	4b02      	ldr	r3, [pc, #8]	; (8013630 <lv_page_focus+0xec>)
 8013628:	9302      	str	r3, [sp, #8]
        lv_anim_create(&a);
 801362a:	f7fa f855 	bl	800d6d8 <lv_anim_create>
 801362e:	e7df      	b.n	80135f0 <lv_page_focus+0xac>
 8013630:	080086cb 	.word	0x080086cb
 8013634:	080083ed 	.word	0x080083ed
 8013638:	0800d751 	.word	0x0800d751

0801363c <lv_page_scroll_hor>:
{
 801363c:	b510      	push	{r4, lr}
 801363e:	b08a      	sub	sp, #40	; 0x28
 8013640:	460c      	mov	r4, r1
    lv_obj_t * scrl = lv_page_get_scrl(page);
 8013642:	f7ff fdb8 	bl	80131b6 <lv_page_get_scrl>
    a.var = scrl;
 8013646:	9001      	str	r0, [sp, #4]
    a.start = lv_obj_get_x(scrl);
 8013648:	f7f5 fb34 	bl	8008cb4 <lv_obj_get_x>
    a.fp = (lv_anim_fp_t)lv_obj_set_x;
 801364c:	4b0f      	ldr	r3, [pc, #60]	; (801368c <lv_page_scroll_hor+0x50>)
    a.time = LV_PAGE_SCROLL_ANIM_TIME;
 801364e:	22c8      	movs	r2, #200	; 0xc8
    a.start = lv_obj_get_x(scrl);
 8013650:	9005      	str	r0, [sp, #20]
    a.end = a.start + dist;
 8013652:	4404      	add	r4, r0
    a.fp = (lv_anim_fp_t)lv_obj_set_x;
 8013654:	9302      	str	r3, [sp, #8]
    lv_anim_create(&a);
 8013656:	a801      	add	r0, sp, #4
    a.time = LV_PAGE_SCROLL_ANIM_TIME;
 8013658:	f8ad 201c 	strh.w	r2, [sp, #28]
    a.path = lv_anim_path_linear;
 801365c:	4b0c      	ldr	r3, [pc, #48]	; (8013690 <lv_page_scroll_hor+0x54>)
    a.playback = 0;
 801365e:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    a.path = lv_anim_path_linear;
 8013662:	9304      	str	r3, [sp, #16]
    a.end_cb = NULL;
 8013664:	2300      	movs	r3, #0
    a.repeat = 0;
 8013666:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    a.end = a.start + dist;
 801366a:	9406      	str	r4, [sp, #24]
    a.end_cb = NULL;
 801366c:	9303      	str	r3, [sp, #12]
    a.repeat = 0;
 801366e:	f363 0241 	bfi	r2, r3, #1, #1
    a.act_time = 0;
 8013672:	f8ad 301e 	strh.w	r3, [sp, #30]
    a.playback_pause = 0;
 8013676:	f8ad 3020 	strh.w	r3, [sp, #32]
    a.repeat = 0;
 801367a:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
    a.repeat_pause = 0;
 801367e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    lv_anim_create(&a);
 8013682:	f7fa f829 	bl	800d6d8 <lv_anim_create>
}
 8013686:	b00a      	add	sp, #40	; 0x28
 8013688:	bd10      	pop	{r4, pc}
 801368a:	bf00      	nop
 801368c:	080086b7 	.word	0x080086b7
 8013690:	0800d751 	.word	0x0800d751

08013694 <lv_page_scroll_ver>:
{
 8013694:	b510      	push	{r4, lr}
 8013696:	b08a      	sub	sp, #40	; 0x28
 8013698:	460c      	mov	r4, r1
    lv_obj_t * scrl = lv_page_get_scrl(page);
 801369a:	f7ff fd8c 	bl	80131b6 <lv_page_get_scrl>
    a.var = scrl;
 801369e:	9001      	str	r0, [sp, #4]
    a.start = lv_obj_get_y(scrl);
 80136a0:	f7f5 fb0e 	bl	8008cc0 <lv_obj_get_y>
    a.fp = (lv_anim_fp_t)lv_obj_set_y;
 80136a4:	4b0f      	ldr	r3, [pc, #60]	; (80136e4 <lv_page_scroll_ver+0x50>)
    a.time = LV_PAGE_SCROLL_ANIM_TIME;
 80136a6:	22c8      	movs	r2, #200	; 0xc8
    a.start = lv_obj_get_y(scrl);
 80136a8:	9005      	str	r0, [sp, #20]
    a.end = a.start + dist;
 80136aa:	4404      	add	r4, r0
    a.fp = (lv_anim_fp_t)lv_obj_set_y;
 80136ac:	9302      	str	r3, [sp, #8]
    lv_anim_create(&a);
 80136ae:	a801      	add	r0, sp, #4
    a.time = LV_PAGE_SCROLL_ANIM_TIME;
 80136b0:	f8ad 201c 	strh.w	r2, [sp, #28]
    a.path = lv_anim_path_linear;
 80136b4:	4b0c      	ldr	r3, [pc, #48]	; (80136e8 <lv_page_scroll_ver+0x54>)
    a.playback = 0;
 80136b6:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    a.path = lv_anim_path_linear;
 80136ba:	9304      	str	r3, [sp, #16]
    a.end_cb = NULL;
 80136bc:	2300      	movs	r3, #0
    a.repeat = 0;
 80136be:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    a.end = a.start + dist;
 80136c2:	9406      	str	r4, [sp, #24]
    a.end_cb = NULL;
 80136c4:	9303      	str	r3, [sp, #12]
    a.repeat = 0;
 80136c6:	f363 0241 	bfi	r2, r3, #1, #1
    a.act_time = 0;
 80136ca:	f8ad 301e 	strh.w	r3, [sp, #30]
    a.playback_pause = 0;
 80136ce:	f8ad 3020 	strh.w	r3, [sp, #32]
    a.repeat = 0;
 80136d2:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
    a.repeat_pause = 0;
 80136d6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    lv_anim_create(&a);
 80136da:	f7f9 fffd 	bl	800d6d8 <lv_anim_create>
}
 80136de:	b00a      	add	sp, #40	; 0x28
 80136e0:	bd10      	pop	{r4, pc}
 80136e2:	bf00      	nop
 80136e4:	080086cb 	.word	0x080086cb
 80136e8:	0800d751 	.word	0x0800d751

080136ec <lv_page_signal>:
{
 80136ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    res = ancestor_signal(page, sign, param);
 80136f0:	4b97      	ldr	r3, [pc, #604]	; (8013950 <lv_page_signal+0x264>)
{
 80136f2:	4604      	mov	r4, r0
 80136f4:	460e      	mov	r6, r1
 80136f6:	4617      	mov	r7, r2
    res = ancestor_signal(page, sign, param);
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 80136fc:	2801      	cmp	r0, #1
    res = ancestor_signal(page, sign, param);
 80136fe:	4680      	mov	r8, r0
    if(res != LV_RES_OK) return res;
 8013700:	d121      	bne.n	8013746 <lv_page_signal+0x5a>
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8013702:	4620      	mov	r0, r4
 8013704:	f7f5 fbb9 	bl	8008e7a <lv_obj_get_ext_attr>
 8013708:	4605      	mov	r5, r0
    lv_style_t * style = lv_obj_get_style(page);
 801370a:	4620      	mov	r0, r4
 801370c:	f7f5 faea 	bl	8008ce4 <lv_obj_get_style>
    if(sign == LV_SIGNAL_CHILD_CHG) { /*Automatically move children to the scrollable object*/
 8013710:	2e01      	cmp	r6, #1
    lv_style_t * style = lv_obj_get_style(page);
 8013712:	4681      	mov	r9, r0
    if(sign == LV_SIGNAL_CHILD_CHG) { /*Automatically move children to the scrollable object*/
 8013714:	d11a      	bne.n	801374c <lv_page_signal+0x60>
        child = lv_obj_get_child(page, NULL);
 8013716:	2100      	movs	r1, #0
                child = lv_obj_get_child(page, child);
 8013718:	4620      	mov	r0, r4
 801371a:	f7f5 fa53 	bl	8008bc4 <lv_obj_get_child>
 801371e:	4606      	mov	r6, r0
 8013720:	e00f      	b.n	8013742 <lv_page_signal+0x56>
            if(lv_obj_is_protected(child, LV_PROTECT_PARENT) == false) {
 8013722:	2102      	movs	r1, #2
 8013724:	4630      	mov	r0, r6
 8013726:	f7f5 fb9d 	bl	8008e64 <lv_obj_is_protected>
                child = lv_obj_get_child(page, child); /*Get the next child before move this*/
 801372a:	4631      	mov	r1, r6
            if(lv_obj_is_protected(child, LV_PROTECT_PARENT) == false) {
 801372c:	2800      	cmp	r0, #0
 801372e:	d1f3      	bne.n	8013718 <lv_page_signal+0x2c>
                child = lv_obj_get_child(page, child); /*Get the next child before move this*/
 8013730:	4620      	mov	r0, r4
 8013732:	f7f5 fa47 	bl	8008bc4 <lv_obj_get_child>
 8013736:	4607      	mov	r7, r0
                lv_obj_set_parent(tmp, ext->scrl);
 8013738:	4630      	mov	r0, r6
 801373a:	6869      	ldr	r1, [r5, #4]
                child = lv_obj_get_child(page, child); /*Get the next child before move this*/
 801373c:	463e      	mov	r6, r7
                lv_obj_set_parent(tmp, ext->scrl);
 801373e:	f7f4 ff89 	bl	8008654 <lv_obj_set_parent>
        while(child != NULL) {
 8013742:	2e00      	cmp	r6, #0
 8013744:	d1ed      	bne.n	8013722 <lv_page_signal+0x36>
}
 8013746:	4640      	mov	r0, r8
 8013748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 801374c:	2e03      	cmp	r6, #3
 801374e:	d121      	bne.n	8013794 <lv_page_signal+0xa8>
        if(lv_cont_get_hor_fit(ext->scrl) == false) {
 8013750:	6868      	ldr	r0, [r5, #4]
 8013752:	f7fd fad3 	bl	8010cfc <lv_cont_get_hor_fit>
 8013756:	686e      	ldr	r6, [r5, #4]
 8013758:	b9a8      	cbnz	r0, 8013786 <lv_page_signal+0x9a>
            lv_obj_set_width(ext->scrl, lv_obj_get_width(page) - 2 * style->body.padding.hor);
 801375a:	4620      	mov	r0, r4
 801375c:	f7f5 fab6 	bl	8008ccc <lv_obj_get_width>
 8013760:	f8b9 1022 	ldrh.w	r1, [r9, #34]	; 0x22
 8013764:	eba0 0141 	sub.w	r1, r0, r1, lsl #1
 8013768:	4630      	mov	r0, r6
 801376a:	b209      	sxth	r1, r1
 801376c:	f7f4 ffe8 	bl	8008740 <lv_obj_set_width>
        if(ext->sb.hor_draw || ext->sb.ver_draw) lv_page_sb_refresh(page);
 8013770:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8013774:	079e      	lsls	r6, r3, #30
 8013776:	d002      	beq.n	801377e <lv_page_signal+0x92>
 8013778:	4620      	mov	r0, r4
 801377a:	f7ff f9b2 	bl	8012ae2 <lv_page_sb_refresh>
        lv_obj_refresh_ext_size(page);
 801377e:	4620      	mov	r0, r4
 8013780:	f7f5 f985 	bl	8008a8e <lv_obj_refresh_ext_size>
 8013784:	e7df      	b.n	8013746 <lv_page_signal+0x5a>
            ext->scrl->signal_func(ext->scrl, LV_SIGNAL_CORD_CHG, &ext->scrl->coords);
 8013786:	69b3      	ldr	r3, [r6, #24]
 8013788:	f106 0210 	add.w	r2, r6, #16
 801378c:	2102      	movs	r1, #2
 801378e:	4630      	mov	r0, r6
 8013790:	4798      	blx	r3
 8013792:	e7ed      	b.n	8013770 <lv_page_signal+0x84>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 8013794:	2e02      	cmp	r6, #2
 8013796:	d135      	bne.n	8013804 <lv_page_signal+0x118>
        if(ext->scrl != NULL && (lv_obj_get_width(page) != lv_area_get_width(param) ||
 8013798:	686b      	ldr	r3, [r5, #4]
 801379a:	2b00      	cmp	r3, #0
 801379c:	d0d3      	beq.n	8013746 <lv_page_signal+0x5a>
 801379e:	4620      	mov	r0, r4
 80137a0:	f7f5 fa94 	bl	8008ccc <lv_obj_get_width>
    return area_p->x2 - area_p->x1 + 1;
 80137a4:	88bb      	ldrh	r3, [r7, #4]
 80137a6:	883a      	ldrh	r2, [r7, #0]
 80137a8:	3301      	adds	r3, #1
 80137aa:	1a9b      	subs	r3, r3, r2
 80137ac:	b21b      	sxth	r3, r3
 80137ae:	4298      	cmp	r0, r3
 80137b0:	d01d      	beq.n	80137ee <lv_page_signal+0x102>
            if(lv_cont_get_hor_fit(ext->scrl) == false) {
 80137b2:	6868      	ldr	r0, [r5, #4]
 80137b4:	f7fd faa2 	bl	8010cfc <lv_cont_get_hor_fit>
 80137b8:	b958      	cbnz	r0, 80137d2 <lv_page_signal+0xe6>
                lv_obj_set_width(ext->scrl, lv_obj_get_width(page) - 2 * style->body.padding.hor);
 80137ba:	4620      	mov	r0, r4
 80137bc:	686e      	ldr	r6, [r5, #4]
 80137be:	f7f5 fa85 	bl	8008ccc <lv_obj_get_width>
 80137c2:	f8b9 1022 	ldrh.w	r1, [r9, #34]	; 0x22
 80137c6:	eba0 0141 	sub.w	r1, r0, r1, lsl #1
 80137ca:	4630      	mov	r0, r6
 80137cc:	b209      	sxth	r1, r1
 80137ce:	f7f4 ffb7 	bl	8008740 <lv_obj_set_width>
            ext->scrl->signal_func(ext->scrl, LV_SIGNAL_CORD_CHG, &ext->scrl->coords);
 80137d2:	6868      	ldr	r0, [r5, #4]
 80137d4:	2102      	movs	r1, #2
 80137d6:	6983      	ldr	r3, [r0, #24]
 80137d8:	f100 0210 	add.w	r2, r0, #16
 80137dc:	4798      	blx	r3
            if(ext->sb.hor_draw || ext->sb.ver_draw) lv_page_sb_refresh(page);
 80137de:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 80137e2:	079d      	lsls	r5, r3, #30
 80137e4:	d0af      	beq.n	8013746 <lv_page_signal+0x5a>
 80137e6:	4620      	mov	r0, r4
 80137e8:	f7ff f97b 	bl	8012ae2 <lv_page_sb_refresh>
 80137ec:	e7ab      	b.n	8013746 <lv_page_signal+0x5a>
                                 lv_obj_get_height(page) != lv_area_get_height(param))) {
 80137ee:	4620      	mov	r0, r4
 80137f0:	f7f5 fa72 	bl	8008cd8 <lv_obj_get_height>
    return area_p->y2 - area_p->y1 + 1;
 80137f4:	88fb      	ldrh	r3, [r7, #6]
 80137f6:	887a      	ldrh	r2, [r7, #2]
 80137f8:	3301      	adds	r3, #1
 80137fa:	1a9b      	subs	r3, r3, r2
        if(ext->scrl != NULL && (lv_obj_get_width(page) != lv_area_get_width(param) ||
 80137fc:	b21b      	sxth	r3, r3
 80137fe:	4298      	cmp	r0, r3
 8013800:	d1d7      	bne.n	80137b2 <lv_page_signal+0xc6>
 8013802:	e7a0      	b.n	8013746 <lv_page_signal+0x5a>
    } else if(sign == LV_SIGNAL_PRESSED) {
 8013804:	2e06      	cmp	r6, #6
 8013806:	d105      	bne.n	8013814 <lv_page_signal+0x128>
        if(ext->pr_action != NULL) {
 8013808:	68eb      	ldr	r3, [r5, #12]
            if(ext->rel_action != NULL) {
 801380a:	2b00      	cmp	r3, #0
 801380c:	d09b      	beq.n	8013746 <lv_page_signal+0x5a>
                ext->rel_action(page);
 801380e:	4620      	mov	r0, r4
 8013810:	4798      	blx	r3
 8013812:	e798      	b.n	8013746 <lv_page_signal+0x5a>
    } else if(sign == LV_SIGNAL_RELEASED) {
 8013814:	2e09      	cmp	r6, #9
 8013816:	d107      	bne.n	8013828 <lv_page_signal+0x13c>
        if(lv_indev_is_dragging(lv_indev_get_act()) == false) {
 8013818:	f7f4 fc9c 	bl	8008154 <lv_indev_get_act>
 801381c:	f7f4 fccc 	bl	80081b8 <lv_indev_is_dragging>
 8013820:	2800      	cmp	r0, #0
 8013822:	d190      	bne.n	8013746 <lv_page_signal+0x5a>
            if(ext->rel_action != NULL) {
 8013824:	68ab      	ldr	r3, [r5, #8]
 8013826:	e7f0      	b.n	801380a <lv_page_signal+0x11e>
    } else if(sign == LV_SIGNAL_REFR_EXT_SIZE) {
 8013828:	2e04      	cmp	r6, #4
 801382a:	d112      	bne.n	8013852 <lv_page_signal+0x166>
        if(page->ext_size < (-ext->sb.style->body.padding.hor)) page->ext_size = -ext->sb.style->body.padding.hor;
 801382c:	692a      	ldr	r2, [r5, #16]
 801382e:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 8013832:	f9b2 3022 	ldrsh.w	r3, [r2, #34]	; 0x22
 8013836:	425b      	negs	r3, r3
 8013838:	4299      	cmp	r1, r3
 801383a:	bfb8      	it	lt
 801383c:	86a3      	strhlt	r3, [r4, #52]	; 0x34
        if(page->ext_size < (-ext->sb.style->body.padding.ver)) page->ext_size = -ext->sb.style->body.padding.ver;
 801383e:	f9b2 3020 	ldrsh.w	r3, [r2, #32]
 8013842:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8013846:	425b      	negs	r3, r3
 8013848:	429a      	cmp	r2, r3
 801384a:	f6bf af7c 	bge.w	8013746 <lv_page_signal+0x5a>
 801384e:	86a3      	strh	r3, [r4, #52]	; 0x34
 8013850:	e779      	b.n	8013746 <lv_page_signal+0x5a>
    } else if(sign == LV_SIGNAL_CONTROLL) {
 8013852:	2e10      	cmp	r6, #16
 8013854:	d165      	bne.n	8013922 <lv_page_signal+0x236>
        uint32_t c = *((uint32_t *) param);
 8013856:	683b      	ldr	r3, [r7, #0]
        if((c == LV_GROUP_KEY_DOWN) && ext->arrow_scroll) {
 8013858:	2b12      	cmp	r3, #18
 801385a:	d10c      	bne.n	8013876 <lv_page_signal+0x18a>
 801385c:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8013860:	07d8      	lsls	r0, r3, #31
 8013862:	f57f af70 	bpl.w	8013746 <lv_page_signal+0x5a>
            lv_page_scroll_ver(page, - lv_obj_get_height(page) / 4);
 8013866:	4620      	mov	r0, r4
 8013868:	f7f5 fa36 	bl	8008cd8 <lv_obj_get_height>
 801386c:	2104      	movs	r1, #4
 801386e:	fb90 f1f1 	sdiv	r1, r0, r1
            if(lv_page_get_scrl_width(page) < lv_obj_get_width(page)) lv_page_scroll_ver(page, - lv_obj_get_height(page) / 4);
 8013872:	4249      	negs	r1, r1
 8013874:	e00c      	b.n	8013890 <lv_page_signal+0x1a4>
        } else if((c == LV_GROUP_KEY_UP) && ext->arrow_scroll) {
 8013876:	2b11      	cmp	r3, #17
 8013878:	d10f      	bne.n	801389a <lv_page_signal+0x1ae>
 801387a:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 801387e:	07d9      	lsls	r1, r3, #31
 8013880:	f57f af61 	bpl.w	8013746 <lv_page_signal+0x5a>
            lv_page_scroll_ver(page, lv_obj_get_height(page) / 4);
 8013884:	4620      	mov	r0, r4
 8013886:	f7f5 fa27 	bl	8008cd8 <lv_obj_get_height>
 801388a:	2104      	movs	r1, #4
 801388c:	fb90 f1f1 	sdiv	r1, r0, r1
            if(lv_page_get_scrl_width(page) < lv_obj_get_width(page)) lv_page_scroll_ver(page, lv_obj_get_height(page) / 4);
 8013890:	b209      	sxth	r1, r1
 8013892:	4620      	mov	r0, r4
 8013894:	f7ff fefe 	bl	8013694 <lv_page_scroll_ver>
 8013898:	e755      	b.n	8013746 <lv_page_signal+0x5a>
        } else if((c == LV_GROUP_KEY_RIGHT) && ext->arrow_scroll) {
 801389a:	2b13      	cmp	r3, #19
 801389c:	d121      	bne.n	80138e2 <lv_page_signal+0x1f6>
 801389e:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 80138a2:	07da      	lsls	r2, r3, #31
 80138a4:	f57f af4f 	bpl.w	8013746 <lv_page_signal+0x5a>
 * @param page pointer to a page object
 * @return the width of the scrollable
 */
static inline lv_coord_t lv_page_get_scrl_width(const lv_obj_t *page)
{
    return lv_obj_get_width(lv_page_get_scrl(page));
 80138a8:	4620      	mov	r0, r4
 80138aa:	f7ff fc84 	bl	80131b6 <lv_page_get_scrl>
 80138ae:	f7f5 fa0d 	bl	8008ccc <lv_obj_get_width>
 80138b2:	4605      	mov	r5, r0
            if(lv_page_get_scrl_width(page) < lv_obj_get_width(page)) lv_page_scroll_ver(page, - lv_obj_get_height(page) / 4);
 80138b4:	4620      	mov	r0, r4
 80138b6:	f7f5 fa09 	bl	8008ccc <lv_obj_get_width>
 80138ba:	42a8      	cmp	r0, r5
 80138bc:	f04f 0504 	mov.w	r5, #4
 80138c0:	4620      	mov	r0, r4
 80138c2:	dd04      	ble.n	80138ce <lv_page_signal+0x1e2>
 80138c4:	f7f5 fa08 	bl	8008cd8 <lv_obj_get_height>
 80138c8:	fb90 f1f5 	sdiv	r1, r0, r5
 80138cc:	e7d1      	b.n	8013872 <lv_page_signal+0x186>
            else lv_page_scroll_hor(page, - lv_obj_get_width(page) / 4);
 80138ce:	f7f5 f9fd 	bl	8008ccc <lv_obj_get_width>
 80138d2:	fb90 f1f5 	sdiv	r1, r0, r5
 80138d6:	4249      	negs	r1, r1
            else lv_page_scroll_hor(page,  lv_obj_get_width(page) / 4);
 80138d8:	b209      	sxth	r1, r1
 80138da:	4620      	mov	r0, r4
 80138dc:	f7ff feae 	bl	801363c <lv_page_scroll_hor>
 80138e0:	e731      	b.n	8013746 <lv_page_signal+0x5a>
        } else if((c == LV_GROUP_KEY_LEFT) && ext->arrow_scroll) {
 80138e2:	2b14      	cmp	r3, #20
 80138e4:	f47f af2f 	bne.w	8013746 <lv_page_signal+0x5a>
 80138e8:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 80138ec:	07db      	lsls	r3, r3, #31
 80138ee:	f57f af2a 	bpl.w	8013746 <lv_page_signal+0x5a>
 80138f2:	4620      	mov	r0, r4
 80138f4:	f7ff fc5f 	bl	80131b6 <lv_page_get_scrl>
 80138f8:	f7f5 f9e8 	bl	8008ccc <lv_obj_get_width>
 80138fc:	4605      	mov	r5, r0
            if(lv_page_get_scrl_width(page) < lv_obj_get_width(page)) lv_page_scroll_ver(page, lv_obj_get_height(page) / 4);
 80138fe:	4620      	mov	r0, r4
 8013900:	f7f5 f9e4 	bl	8008ccc <lv_obj_get_width>
 8013904:	42a8      	cmp	r0, r5
 8013906:	f04f 0504 	mov.w	r5, #4
 801390a:	4620      	mov	r0, r4
 801390c:	dd04      	ble.n	8013918 <lv_page_signal+0x22c>
 801390e:	f7f5 f9e3 	bl	8008cd8 <lv_obj_get_height>
 8013912:	fb90 f1f5 	sdiv	r1, r0, r5
 8013916:	e7bb      	b.n	8013890 <lv_page_signal+0x1a4>
            else lv_page_scroll_hor(page,  lv_obj_get_width(page) / 4);
 8013918:	f7f5 f9d8 	bl	8008ccc <lv_obj_get_width>
 801391c:	fb90 f1f5 	sdiv	r1, r0, r5
 8013920:	e7da      	b.n	80138d8 <lv_page_signal+0x1ec>
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 8013922:	2e11      	cmp	r6, #17
 8013924:	d104      	bne.n	8013930 <lv_page_signal+0x244>
        *editable = lv_page_get_arrow_scroll(page);
 8013926:	4620      	mov	r0, r4
 8013928:	f7ff fc4a 	bl	80131c0 <lv_page_get_arrow_scroll>
 801392c:	7038      	strb	r0, [r7, #0]
 801392e:	e70a      	b.n	8013746 <lv_page_signal+0x5a>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8013930:	2e05      	cmp	r6, #5
 8013932:	f47f af08 	bne.w	8013746 <lv_page_signal+0x5a>
 8013936:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 8013938:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 801393c:	b2da      	uxtb	r2, r3
 801393e:	b119      	cbz	r1, 8013948 <lv_page_signal+0x25c>
 8013940:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) {  /*Find the last set data*/
 8013942:	2b07      	cmp	r3, #7
 8013944:	d1f8      	bne.n	8013938 <lv_page_signal+0x24c>
 8013946:	461a      	mov	r2, r3
        buf->type[i] = "lv_page";
 8013948:	4b02      	ldr	r3, [pc, #8]	; (8013954 <lv_page_signal+0x268>)
 801394a:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
 801394e:	e6fa      	b.n	8013746 <lv_page_signal+0x5a>
 8013950:	20017438 	.word	0x20017438
 8013954:	08087fe5 	.word	0x08087fe5

08013958 <lv_slider_set_action>:
 * Set a function which will be called when a new value is set on the slider
 * @param slider pointer to slider object
 * @param action a callback function
 */
void lv_slider_set_action(lv_obj_t * slider, lv_action_t action)
{
 8013958:	b510      	push	{r4, lr}
 801395a:	460c      	mov	r4, r1
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 801395c:	f7f5 fa8d 	bl	8008e7a <lv_obj_get_ext_attr>
    ext->action = action;
 8013960:	60c4      	str	r4, [r0, #12]
 8013962:	bd10      	pop	{r4, pc}

08013964 <lv_slider_set_style>:
 * @param slider pointer to a slider object
 * @param type which style should be set
 * @param style pointer to a style
 */
void lv_slider_set_style(lv_obj_t * slider, lv_slider_style_t type, lv_style_t * style)
{
 8013964:	b570      	push	{r4, r5, r6, lr}
 8013966:	460e      	mov	r6, r1
 8013968:	4604      	mov	r4, r0
 801396a:	4615      	mov	r5, r2
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 801396c:	f7f5 fa85 	bl	8008e7a <lv_obj_get_ext_attr>

    switch(type) {
 8013970:	2e01      	cmp	r6, #1
 8013972:	d00a      	beq.n	801398a <lv_slider_set_style+0x26>
 8013974:	d302      	bcc.n	801397c <lv_slider_set_style+0x18>
 8013976:	2e02      	cmp	r6, #2
 8013978:	d00a      	beq.n	8013990 <lv_slider_set_style+0x2c>
 801397a:	bd70      	pop	{r4, r5, r6, pc}
        case LV_SLIDER_STYLE_BG:
            lv_bar_set_style(slider, LV_BAR_STYLE_BG, style);
 801397c:	462a      	mov	r2, r5
 801397e:	2100      	movs	r1, #0
            break;
        case LV_SLIDER_STYLE_INDIC:
            lv_bar_set_style(slider, LV_BAR_STYLE_INDIC, style);
 8013980:	4620      	mov	r0, r4
        case LV_SLIDER_STYLE_KNOB:
            ext->style_knob = style;
            lv_obj_refresh_ext_size(slider);
            break;
    }
}
 8013982:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_bar_set_style(slider, LV_BAR_STYLE_INDIC, style);
 8013986:	f7fb b8c6 	b.w	800eb16 <lv_bar_set_style>
 801398a:	462a      	mov	r2, r5
 801398c:	4631      	mov	r1, r6
 801398e:	e7f7      	b.n	8013980 <lv_slider_set_style+0x1c>
            ext->style_knob = style;
 8013990:	6105      	str	r5, [r0, #16]
            lv_obj_refresh_ext_size(slider);
 8013992:	4620      	mov	r0, r4
}
 8013994:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_obj_refresh_ext_size(slider);
 8013998:	f7f5 b879 	b.w	8008a8e <lv_obj_refresh_ext_size>

0801399c <lv_slider_create>:
{
 801399c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801399e:	460f      	mov	r7, r1
    lv_obj_t * new_slider = lv_bar_create(par, copy);
 80139a0:	f7fb f8d0 	bl	800eb44 <lv_bar_create>
    lv_mem_assert(new_slider);
 80139a4:	4604      	mov	r4, r0
 80139a6:	b900      	cbnz	r0, 80139aa <lv_slider_create+0xe>
 80139a8:	e7fe      	b.n	80139a8 <lv_slider_create+0xc>
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_func(new_slider);
 80139aa:	4d2b      	ldr	r5, [pc, #172]	; (8013a58 <lv_slider_create+0xbc>)
 80139ac:	682b      	ldr	r3, [r5, #0]
 80139ae:	b913      	cbnz	r3, 80139b6 <lv_slider_create+0x1a>
 80139b0:	f7f5 fa61 	bl	8008e76 <lv_obj_get_design_func>
 80139b4:	6028      	str	r0, [r5, #0]
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_slider);
 80139b6:	4d29      	ldr	r5, [pc, #164]	; (8013a5c <lv_slider_create+0xc0>)
 80139b8:	682b      	ldr	r3, [r5, #0]
 80139ba:	b91b      	cbnz	r3, 80139c4 <lv_slider_create+0x28>
 80139bc:	4620      	mov	r0, r4
 80139be:	f7f5 fa58 	bl	8008e72 <lv_obj_get_signal_func>
 80139c2:	6028      	str	r0, [r5, #0]
    lv_slider_ext_t * ext = lv_obj_allocate_ext_attr(new_slider, sizeof(lv_slider_ext_t));
 80139c4:	2118      	movs	r1, #24
 80139c6:	4620      	mov	r0, r4
 80139c8:	f7f5 f85a 	bl	8008a80 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 80139cc:	4605      	mov	r5, r0
 80139ce:	b900      	cbnz	r0, 80139d2 <lv_slider_create+0x36>
 80139d0:	e7fe      	b.n	80139d0 <lv_slider_create+0x34>
    ext->drag_value = LV_SLIDER_NOT_PRESSED;
 80139d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    ext->action = NULL;
 80139d6:	2200      	movs	r2, #0
    lv_obj_set_signal_func(new_slider, lv_slider_signal);
 80139d8:	4921      	ldr	r1, [pc, #132]	; (8013a60 <lv_slider_create+0xc4>)
    ext->drag_value = LV_SLIDER_NOT_PRESSED;
 80139da:	8283      	strh	r3, [r0, #20]
    ext->style_knob = &lv_style_pretty;
 80139dc:	4b21      	ldr	r3, [pc, #132]	; (8013a64 <lv_slider_create+0xc8>)
    ext->action = NULL;
 80139de:	60c2      	str	r2, [r0, #12]
    ext->style_knob = &lv_style_pretty;
 80139e0:	6103      	str	r3, [r0, #16]
    ext->knob_in = 0;
 80139e2:	7d83      	ldrb	r3, [r0, #22]
 80139e4:	f362 0300 	bfi	r3, r2, #0, #1
 80139e8:	7583      	strb	r3, [r0, #22]
    lv_obj_set_signal_func(new_slider, lv_slider_signal);
 80139ea:	4620      	mov	r0, r4
 80139ec:	f7f5 f844 	bl	8008a78 <lv_obj_set_signal_func>
    lv_obj_set_design_func(new_slider, lv_slider_design);
 80139f0:	491d      	ldr	r1, [pc, #116]	; (8013a68 <lv_slider_create+0xcc>)
 80139f2:	4620      	mov	r0, r4
 80139f4:	f7f5 f842 	bl	8008a7c <lv_obj_set_design_func>
    if(copy == NULL) {
 80139f8:	b9f7      	cbnz	r7, 8013a38 <lv_slider_create+0x9c>
        lv_obj_set_click(new_slider, true);
 80139fa:	2101      	movs	r1, #1
 80139fc:	4620      	mov	r0, r4
 80139fe:	f7f5 f80b 	bl	8008a18 <lv_obj_set_click>
        lv_obj_set_protect(new_slider, LV_PROTECT_PRESS_LOST);
 8013a02:	2110      	movs	r1, #16
 8013a04:	4620      	mov	r0, r4
 8013a06:	f7f5 f82a 	bl	8008a5e <lv_obj_set_protect>
        lv_theme_t * th = lv_theme_get_current();
 8013a0a:	f002 f833 	bl	8015a74 <lv_theme_get_current>
        if(th) {
 8013a0e:	4606      	mov	r6, r0
 8013a10:	b180      	cbz	r0, 8013a34 <lv_slider_create+0x98>
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_BG, th->slider.bg);
 8013a12:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013a14:	4639      	mov	r1, r7
 8013a16:	4620      	mov	r0, r4
 8013a18:	f7ff ffa4 	bl	8013964 <lv_slider_set_style>
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_INDIC, th->slider.indic);
 8013a1c:	6cb2      	ldr	r2, [r6, #72]	; 0x48
 8013a1e:	2101      	movs	r1, #1
 8013a20:	4620      	mov	r0, r4
 8013a22:	f7ff ff9f 	bl	8013964 <lv_slider_set_style>
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_KNOB, th->slider.knob);
 8013a26:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_KNOB, ext->style_knob);
 8013a28:	2102      	movs	r1, #2
 8013a2a:	4620      	mov	r0, r4
 8013a2c:	f7ff ff9a 	bl	8013964 <lv_slider_set_style>
}
 8013a30:	4620      	mov	r0, r4
 8013a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_KNOB, ext->style_knob);
 8013a34:	692a      	ldr	r2, [r5, #16]
 8013a36:	e7f7      	b.n	8013a28 <lv_slider_create+0x8c>
        lv_slider_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8013a38:	4638      	mov	r0, r7
 8013a3a:	f7f5 fa1e 	bl	8008e7a <lv_obj_get_ext_attr>
        ext->style_knob = copy_ext->style_knob;
 8013a3e:	6903      	ldr	r3, [r0, #16]
        ext->knob_in = copy_ext->knob_in;
 8013a40:	7d82      	ldrb	r2, [r0, #22]
        ext->style_knob = copy_ext->style_knob;
 8013a42:	612b      	str	r3, [r5, #16]
        ext->action = copy_ext->action;
 8013a44:	68c3      	ldr	r3, [r0, #12]
        lv_obj_refresh_style(new_slider);
 8013a46:	4620      	mov	r0, r4
        ext->action = copy_ext->action;
 8013a48:	60eb      	str	r3, [r5, #12]
        ext->knob_in = copy_ext->knob_in;
 8013a4a:	7dab      	ldrb	r3, [r5, #22]
 8013a4c:	f362 0300 	bfi	r3, r2, #0, #1
 8013a50:	75ab      	strb	r3, [r5, #22]
        lv_obj_refresh_style(new_slider);
 8013a52:	f7f4 ffd3 	bl	80089fc <lv_obj_refresh_style>
 8013a56:	e7eb      	b.n	8013a30 <lv_slider_create+0x94>
 8013a58:	2001743c 	.word	0x2001743c
 8013a5c:	20017440 	.word	0x20017440
 8013a60:	08013ded 	.word	0x08013ded
 8013a64:	20017ca0 	.word	0x20017ca0
 8013a68:	08013ab7 	.word	0x08013ab7

08013a6c <lv_slider_get_value>:
 * Get the value of a slider
 * @param slider pointer to a slider object
 * @return the value of the slider
 */
int16_t lv_slider_get_value(const lv_obj_t * slider)
{
 8013a6c:	b510      	push	{r4, lr}
 8013a6e:	4604      	mov	r4, r0
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 8013a70:	f7f5 fa03 	bl	8008e7a <lv_obj_get_ext_attr>

    if(ext->drag_value != LV_SLIDER_NOT_PRESSED) return ext->drag_value;
 8013a74:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
 8013a78:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8013a7c:	d104      	bne.n	8013a88 <lv_slider_get_value+0x1c>
    else return lv_bar_get_value(slider);
 8013a7e:	4620      	mov	r0, r4
}
 8013a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    else return lv_bar_get_value(slider);
 8013a84:	f7fb b8d0 	b.w	800ec28 <lv_bar_get_value>
}
 8013a88:	bd10      	pop	{r4, pc}

08013a8a <lv_slider_get_style>:
 * @param slider pointer to a slider object
 * @param type which style should be get
 * @return style pointer to a style
 */
lv_style_t * lv_slider_get_style(const lv_obj_t * slider, lv_slider_style_t type)
{
 8013a8a:	b538      	push	{r3, r4, r5, lr}
 8013a8c:	460c      	mov	r4, r1
 8013a8e:	4605      	mov	r5, r0
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 8013a90:	f7f5 f9f3 	bl	8008e7a <lv_obj_get_ext_attr>

    switch(type) {
 8013a94:	2c01      	cmp	r4, #1
 8013a96:	d00a      	beq.n	8013aae <lv_slider_get_style+0x24>
 8013a98:	d303      	bcc.n	8013aa2 <lv_slider_get_style+0x18>
 8013a9a:	2c02      	cmp	r4, #2
 8013a9c:	d009      	beq.n	8013ab2 <lv_slider_get_style+0x28>
        case LV_SLIDER_STYLE_INDIC:
            return lv_bar_get_style(slider, LV_BAR_STYLE_INDIC);
        case LV_SLIDER_STYLE_KNOB:
            return ext->style_knob;
        default:
            return NULL;
 8013a9e:	2000      	movs	r0, #0
    }

    /*To avoid warning*/
    return NULL;
}
 8013aa0:	bd38      	pop	{r3, r4, r5, pc}
            return lv_bar_get_style(slider, LV_BAR_STYLE_BG);
 8013aa2:	2100      	movs	r1, #0
            return lv_bar_get_style(slider, LV_BAR_STYLE_INDIC);
 8013aa4:	4628      	mov	r0, r5
}
 8013aa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            return lv_bar_get_style(slider, LV_BAR_STYLE_INDIC);
 8013aaa:	f7fb b8cf 	b.w	800ec4c <lv_bar_get_style>
 8013aae:	4621      	mov	r1, r4
 8013ab0:	e7f8      	b.n	8013aa4 <lv_slider_get_style+0x1a>
            return ext->style_knob;
 8013ab2:	6900      	ldr	r0, [r0, #16]
 8013ab4:	bd38      	pop	{r3, r4, r5, pc}

08013ab6 <lv_slider_design>:
 * @param return true/false, depends on 'mode'
 */
static bool lv_slider_design(lv_obj_t * slider, const lv_area_t * mask, lv_design_mode_t mode)
{
    /*Return false if the object is not covers the mask_p area*/
    if(mode == LV_DESIGN_COVER_CHK) {
 8013ab6:	2a02      	cmp	r2, #2
{
 8013ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013abc:	4605      	mov	r5, r0
 8013abe:	b09f      	sub	sp, #124	; 0x7c
 8013ac0:	468a      	mov	sl, r1
 8013ac2:	4614      	mov	r4, r2
    if(mode == LV_DESIGN_COVER_CHK) {
 8013ac4:	f000 818e 	beq.w	8013de4 <lv_slider_design+0x32e>
        return false;
    }
    /*Draw the object*/
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 8013ac8:	2a00      	cmp	r2, #0
 8013aca:	f040 811e 	bne.w	8013d0a <lv_slider_design+0x254>
        lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 8013ace:	f7f5 f9d4 	bl	8008e7a <lv_obj_get_ext_attr>

        lv_style_t * style_bg = lv_slider_get_style(slider, LV_SLIDER_STYLE_BG);
 8013ad2:	4621      	mov	r1, r4
        lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 8013ad4:	9003      	str	r0, [sp, #12]
        lv_style_t * style_bg = lv_slider_get_style(slider, LV_SLIDER_STYLE_BG);
 8013ad6:	4628      	mov	r0, r5
 8013ad8:	f7ff ffd7 	bl	8013a8a <lv_slider_get_style>
 8013adc:	9001      	str	r0, [sp, #4]
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 8013ade:	4628      	mov	r0, r5
        lv_coord_t slider_w = lv_area_get_width(&slider->coords);
        lv_coord_t slider_h = lv_area_get_height(&slider->coords);

        /*Draw the bar*/
        lv_area_t area_bg;
        lv_area_copy(&area_bg, &slider->coords);
 8013ae0:	46a8      	mov	r8, r5
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 8013ae2:	f7f5 f9ca 	bl	8008e7a <lv_obj_get_ext_attr>
            return ext->style_knob;
 8013ae6:	6903      	ldr	r3, [r0, #16]
        lv_style_t * style_indic = lv_slider_get_style(slider, LV_SLIDER_STYLE_INDIC);
 8013ae8:	2101      	movs	r1, #1
 8013aea:	4628      	mov	r0, r5
            return ext->style_knob;
 8013aec:	9307      	str	r3, [sp, #28]
        lv_style_t * style_indic = lv_slider_get_style(slider, LV_SLIDER_STYLE_INDIC);
 8013aee:	f7ff ffcc 	bl	8013a8a <lv_slider_get_style>
 8013af2:	9004      	str	r0, [sp, #16]
        lv_opa_t opa_scale = lv_obj_get_opa_scale(slider);
 8013af4:	4628      	mov	r0, r5
 8013af6:	f7f5 f960 	bl	8008dba <lv_obj_get_opa_scale>
 8013afa:	8aab      	ldrh	r3, [r5, #20]
 8013afc:	8a2a      	ldrh	r2, [r5, #16]
 8013afe:	4683      	mov	fp, r0
 8013b00:	3301      	adds	r3, #1
    memcpy(dest, src, sizeof(lv_area_t));
 8013b02:	f858 0f10 	ldr.w	r0, [r8, #16]!
    return area_p->x2 - area_p->x1 + 1;
 8013b06:	1a9b      	subs	r3, r3, r2
    return area_p->y2 - area_p->y1 + 1;
 8013b08:	8a6a      	ldrh	r2, [r5, #18]
    memcpy(dest, src, sizeof(lv_area_t));
 8013b0a:	f8d8 1004 	ldr.w	r1, [r8, #4]
    return area_p->x2 - area_p->x1 + 1;
 8013b0e:	b29b      	uxth	r3, r3
 8013b10:	9305      	str	r3, [sp, #20]
    return area_p->y2 - area_p->y1 + 1;
 8013b12:	8aeb      	ldrh	r3, [r5, #22]
    return area_p->x2 - area_p->x1 + 1;
 8013b14:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
    return area_p->y2 - area_p->y1 + 1;
 8013b18:	3301      	adds	r3, #1
 8013b1a:	1a9b      	subs	r3, r3, r2
 8013b1c:	b29b      	uxth	r3, r3
 8013b1e:	9306      	str	r3, [sp, #24]
    memcpy(dest, src, sizeof(lv_area_t));
 8013b20:	ab08      	add	r3, sp, #32
    return area_p->y2 - area_p->y1 + 1;
 8013b22:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
    memcpy(dest, src, sizeof(lv_area_t));
 8013b26:	c303      	stmia	r3!, {r0, r1}
    return area_p->y2 - area_p->y1 + 1;
 8013b28:	f8bd 7026 	ldrh.w	r7, [sp, #38]	; 0x26

        /*Be sure at least LV_SLIDER_SIZE_MIN  size will remain*/
        lv_coord_t pad_ver_bg = style_bg->body.padding.ver;
 8013b2c:	9b01      	ldr	r3, [sp, #4]
 8013b2e:	f8bd 0022 	ldrh.w	r0, [sp, #34]	; 0x22
 8013b32:	1c79      	adds	r1, r7, #1
 8013b34:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8013b38:	1a09      	subs	r1, r1, r0
    return area_p->x2 - area_p->x1 + 1;
 8013b3a:	f8bd e024 	ldrh.w	lr, [sp, #36]	; 0x24
        lv_coord_t pad_hor_bg = style_bg->body.padding.hor;
        if(pad_ver_bg * 2 + LV_SLIDER_SIZE_MIN > lv_area_get_height(&area_bg)) {
 8013b3e:	1c94      	adds	r4, r2, #2
        lv_coord_t pad_hor_bg = style_bg->body.padding.hor;
 8013b40:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
        if(pad_ver_bg * 2 + LV_SLIDER_SIZE_MIN > lv_area_get_height(&area_bg)) {
 8013b44:	b209      	sxth	r1, r1
            pad_ver_bg = (lv_area_get_height(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
        }
        if(pad_hor_bg * 2 + LV_SLIDER_SIZE_MIN > lv_area_get_width(&area_bg)) {
 8013b46:	f103 0c02 	add.w	ip, r3, #2
        if(pad_ver_bg * 2 + LV_SLIDER_SIZE_MIN > lv_area_get_height(&area_bg)) {
 8013b4a:	ebb1 0f44 	cmp.w	r1, r4, lsl #1
 8013b4e:	f8bd 4020 	ldrh.w	r4, [sp, #32]
            pad_ver_bg = (lv_area_get_height(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 8013b52:	bfb8      	it	lt
 8013b54:	1f0a      	sublt	r2, r1, #4
 8013b56:	f10e 0101 	add.w	r1, lr, #1
 8013b5a:	eba1 0104 	sub.w	r1, r1, r4
 8013b5e:	bfb8      	it	lt
 8013b60:	1052      	asrlt	r2, r2, #1
        if(pad_hor_bg * 2 + LV_SLIDER_SIZE_MIN > lv_area_get_width(&area_bg)) {
 8013b62:	b209      	sxth	r1, r1
 8013b64:	ebb1 0f4c 	cmp.w	r1, ip, lsl #1
            pad_hor_bg = (lv_area_get_width(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 8013b68:	bfb8      	it	lt
 8013b6a:	1f0b      	sublt	r3, r1, #4
        }

        if(ext->knob_in) {  /*Enable extra size if the knob is inside */
 8013b6c:	9903      	ldr	r1, [sp, #12]
 8013b6e:	7d89      	ldrb	r1, [r1, #22]
            pad_hor_bg = (lv_area_get_width(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 8013b70:	bfb8      	it	lt
 8013b72:	105b      	asrlt	r3, r3, #1
        if(ext->knob_in) {  /*Enable extra size if the knob is inside */
 8013b74:	07c9      	lsls	r1, r1, #31
 8013b76:	f140 80ca 	bpl.w	8013d0e <lv_slider_design+0x258>
            if(pad_hor_bg < 0) {
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	da07      	bge.n	8013b8e <lv_slider_design+0xd8>
                area_bg.x1 += pad_hor_bg;
 8013b7e:	b299      	uxth	r1, r3
 8013b80:	440c      	add	r4, r1
                area_bg.x2 -= pad_hor_bg;
 8013b82:	ebae 0e01 	sub.w	lr, lr, r1
                area_bg.x1 += pad_hor_bg;
 8013b86:	f8ad 4020 	strh.w	r4, [sp, #32]
                area_bg.x2 -= pad_hor_bg;
 8013b8a:	f8ad e024 	strh.w	lr, [sp, #36]	; 0x24
            }
            if(pad_ver_bg < 0) {
 8013b8e:	2a00      	cmp	r2, #0
 8013b90:	da06      	bge.n	8013ba0 <lv_slider_design+0xea>
                area_bg.y1 += pad_hor_bg;
 8013b92:	b29b      	uxth	r3, r3
 8013b94:	4418      	add	r0, r3
                area_bg.y2 -= pad_hor_bg;
 8013b96:	1afb      	subs	r3, r7, r3
                area_bg.y1 += pad_hor_bg;
 8013b98:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
                area_bg.y2 -= pad_hor_bg;
 8013b9c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
#if USE_LV_GROUP == 0
        lv_draw_rect(&area_bg, mask, style_bg, lv_obj_get_opa_scale(slider));
#else
        /* Draw the borders later if the bar is focused.
         * At value = 100% the indicator can cover to whole background and the focused style won't be visible*/
        if(lv_obj_is_focused(slider)) {
 8013ba0:	4628      	mov	r0, r5
 8013ba2:	f7f5 f96e 	bl	8008e82 <lv_obj_is_focused>
 8013ba6:	2800      	cmp	r0, #0
 8013ba8:	f000 80c6 	beq.w	8013d38 <lv_slider_design+0x282>
            lv_style_t style_tmp;
            lv_style_copy(&style_tmp, style_bg);
 8013bac:	9901      	ldr	r1, [sp, #4]
 8013bae:	a80c      	add	r0, sp, #48	; 0x30
 8013bb0:	f7f5 fdc0 	bl	8009734 <lv_style_copy>
            style_tmp.body.border.width = 0;
 8013bb4:	2300      	movs	r3, #0
            lv_draw_rect(&area_bg, mask, &style_tmp, opa_scale);
 8013bb6:	aa0c      	add	r2, sp, #48	; 0x30
            style_tmp.body.border.width = 0;
 8013bb8:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            lv_draw_rect(&area_bg, mask, &style_tmp, opa_scale);
 8013bbc:	465b      	mov	r3, fp
        } else {
            lv_draw_rect(&area_bg, mask, style_bg, opa_scale);
 8013bbe:	4651      	mov	r1, sl
 8013bc0:	a808      	add	r0, sp, #32
 8013bc2:	f7f6 ff63 	bl	800aa8c <lv_draw_rect>
    memcpy(dest, src, sizeof(lv_area_t));
 8013bc6:	aa08      	add	r2, sp, #32
 8013bc8:	ab0a      	add	r3, sp, #40	; 0x28
    return area_p->y2 - area_p->y1 + 1;
 8013bca:	f8bd 4022 	ldrh.w	r4, [sp, #34]	; 0x22
    return area_p->x2 - area_p->x1 + 1;
 8013bce:	f8bd e020 	ldrh.w	lr, [sp, #32]
    memcpy(dest, src, sizeof(lv_area_t));
 8013bd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013bd6:	e883 0003 	stmia.w	r3, {r0, r1}
        /*Draw the indicator*/
        lv_area_t area_indic;
        lv_area_copy(&area_indic, &area_bg);

        /*Be sure at least ver pad/hor pad width indicator will remain*/
        lv_coord_t pad_ver_indic = style_indic->body.padding.ver;
 8013bda:	9b04      	ldr	r3, [sp, #16]
    return area_p->y2 - area_p->y1 + 1;
 8013bdc:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
 8013be0:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
        lv_coord_t pad_hor_indic = style_indic->body.padding.hor;
 8013be4:	f9b3 1022 	ldrsh.w	r1, [r3, #34]	; 0x22
 8013be8:	1c43      	adds	r3, r0, #1
        if(pad_ver_indic * 2 + LV_SLIDER_SIZE_MIN > lv_area_get_height(&area_bg)) {
 8013bea:	1c97      	adds	r7, r2, #2
 8013bec:	1b1b      	subs	r3, r3, r4
            pad_ver_indic = (lv_area_get_height(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
        }
        if(pad_hor_indic * 2 + LV_SLIDER_SIZE_MIN > lv_area_get_width(&area_bg)) {
 8013bee:	f101 0c02 	add.w	ip, r1, #2
        if(pad_ver_indic * 2 + LV_SLIDER_SIZE_MIN > lv_area_get_height(&area_bg)) {
 8013bf2:	b21b      	sxth	r3, r3
 8013bf4:	ebb3 0f47 	cmp.w	r3, r7, lsl #1
    return area_p->x2 - area_p->x1 + 1;
 8013bf8:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
            pad_ver_indic = (lv_area_get_height(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 8013bfc:	bfb8      	it	lt
 8013bfe:	1f1a      	sublt	r2, r3, #4
 8013c00:	f107 0301 	add.w	r3, r7, #1
 8013c04:	eba3 030e 	sub.w	r3, r3, lr
 8013c08:	bfb8      	it	lt
 8013c0a:	1052      	asrlt	r2, r2, #1
        if(pad_hor_indic * 2 + LV_SLIDER_SIZE_MIN > lv_area_get_width(&area_bg)) {
 8013c0c:	b21b      	sxth	r3, r3
            pad_hor_indic = (lv_area_get_width(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
        }

        area_indic.x1 += pad_hor_indic;
        area_indic.x2 -= pad_hor_indic;
        area_indic.y1 += pad_ver_indic;
 8013c0e:	b292      	uxth	r2, r2
        if(pad_hor_indic * 2 + LV_SLIDER_SIZE_MIN > lv_area_get_width(&area_bg)) {
 8013c10:	ebb3 0f4c 	cmp.w	r3, ip, lsl #1
        area_indic.y1 += pad_ver_indic;
 8013c14:	4414      	add	r4, r2
        area_indic.y2 -= pad_ver_indic;
 8013c16:	eba0 0202 	sub.w	r2, r0, r2
            pad_hor_indic = (lv_area_get_width(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 8013c1a:	bfb8      	it	lt
 8013c1c:	3b04      	sublt	r3, #4


        lv_coord_t cur_value = lv_slider_get_value(slider);
 8013c1e:	4628      	mov	r0, r5
        area_indic.y2 -= pad_ver_indic;
 8013c20:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            pad_hor_indic = (lv_area_get_width(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 8013c24:	bfb8      	it	lt
 8013c26:	1059      	asrlt	r1, r3, #1
        area_indic.y1 += pad_ver_indic;
 8013c28:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
        area_indic.x1 += pad_hor_indic;
 8013c2c:	b289      	uxth	r1, r1
        area_indic.x2 -= pad_hor_indic;
 8013c2e:	1a7f      	subs	r7, r7, r1
        area_indic.x1 += pad_hor_indic;
 8013c30:	448e      	add	lr, r1
        area_indic.x2 -= pad_hor_indic;
 8013c32:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
        area_indic.x1 += pad_hor_indic;
 8013c36:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
        lv_coord_t cur_value = lv_slider_get_value(slider);
 8013c3a:	f7ff ff17 	bl	8013a6c <lv_slider_get_value>
 8013c3e:	4604      	mov	r4, r0
 * @param slider pointer to a slider object
 * @return the minimum value of the slider
 */
static inline int16_t lv_slider_get_min_value(const lv_obj_t * slider)
{
    return lv_bar_get_min_value(slider);
 8013c40:	4628      	mov	r0, r5
 8013c42:	f7fa fff7 	bl	800ec34 <lv_bar_get_min_value>
 8013c46:	4607      	mov	r7, r0
 * @param slider pointer to a slider object
 * @return the maximum value of the slider
 */
static inline int16_t lv_slider_get_max_value(const lv_obj_t * slider)
{
    return lv_bar_get_max_value(slider);
 8013c48:	4628      	mov	r0, r5
 8013c4a:	f7fa fff9 	bl	800ec40 <lv_bar_get_max_value>
        lv_coord_t min_value = lv_slider_get_min_value(slider);
        lv_coord_t max_value = lv_slider_get_max_value(slider);

        /*If dragged draw to the drag position*/
        if(ext->drag_value != LV_SLIDER_NOT_PRESSED) cur_value = ext->drag_value;
 8013c4e:	9b03      	ldr	r3, [sp, #12]
 8013c50:	9002      	str	r0, [sp, #8]
 8013c52:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8013c56:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8013c5a:	bf18      	it	ne
 8013c5c:	461c      	movne	r4, r3

        if(slider_w >= slider_h) {
 8013c5e:	45b1      	cmp	r9, r6
 8013c60:	db6d      	blt.n	8013d3e <lv_slider_design+0x288>
 8013c62:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
            area_indic.x2 = (int32_t)((int32_t)(lv_area_get_width(&area_indic) - 1) * (cur_value - min_value)) / (max_value - min_value);
 8013c66:	1be1      	subs	r1, r4, r7
 8013c68:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8013c6c:	3301      	adds	r3, #1
 8013c6e:	1a9b      	subs	r3, r3, r2
 8013c70:	b21b      	sxth	r3, r3
 8013c72:	3b01      	subs	r3, #1
 8013c74:	434b      	muls	r3, r1
 8013c76:	1bc1      	subs	r1, r0, r7
 8013c78:	fb93 f3f1 	sdiv	r3, r3, r1
            area_indic.x2 = area_indic.x1 + area_indic.x2;
 8013c7c:	4413      	add	r3, r2
 8013c7e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
        } else {
            area_indic.y1 = (int32_t)((int32_t)(lv_area_get_height(&area_indic) - 1) * (cur_value - min_value)) / (max_value - min_value);
            area_indic.y1 = area_indic.y2 - area_indic.y1;
        }

        if(cur_value != min_value) lv_draw_rect(&area_indic, mask, style_indic, opa_scale);
 8013c82:	42a7      	cmp	r7, r4
 8013c84:	d005      	beq.n	8013c92 <lv_slider_design+0x1dc>
 8013c86:	465b      	mov	r3, fp
 8013c88:	9a04      	ldr	r2, [sp, #16]
 8013c8a:	4651      	mov	r1, sl
 8013c8c:	a80a      	add	r0, sp, #40	; 0x28
 8013c8e:	f7f6 fefd 	bl	800aa8c <lv_draw_rect>

        /*Before the knob add the border if required*/
#if USE_LV_GROUP
        /* Draw the borders later if the bar is focused.
         * At value = 100% the indicator can cover to whole background and the focused style won't be visible*/
        if(lv_obj_is_focused(slider)) {
 8013c92:	4628      	mov	r0, r5
 8013c94:	f7f5 f8f5 	bl	8008e82 <lv_obj_is_focused>
 8013c98:	b190      	cbz	r0, 8013cc0 <lv_slider_design+0x20a>
            lv_style_t style_tmp;
            lv_style_copy(&style_tmp, style_bg);
 8013c9a:	9901      	ldr	r1, [sp, #4]
 8013c9c:	a80c      	add	r0, sp, #48	; 0x30
 8013c9e:	f7f5 fd49 	bl	8009734 <lv_style_copy>
            style_tmp.body.empty = 1;
 8013ca2:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
            style_tmp.body.shadow.width = 0;
            lv_draw_rect(&area_bg, mask, &style_tmp, opa_scale);
 8013ca6:	aa0c      	add	r2, sp, #48	; 0x30
 8013ca8:	4651      	mov	r1, sl
            style_tmp.body.empty = 1;
 8013caa:	f043 0301 	orr.w	r3, r3, #1
            lv_draw_rect(&area_bg, mask, &style_tmp, opa_scale);
 8013cae:	a808      	add	r0, sp, #32
            style_tmp.body.empty = 1;
 8013cb0:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
            style_tmp.body.shadow.width = 0;
 8013cb4:	2300      	movs	r3, #0
 8013cb6:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            lv_draw_rect(&area_bg, mask, &style_tmp, opa_scale);
 8013cba:	465b      	mov	r3, fp
 8013cbc:	f7f6 fee6 	bl	800aa8c <lv_draw_rect>
    memcpy(dest, src, sizeof(lv_area_t));
 8013cc0:	ab0c      	add	r3, sp, #48	; 0x30
 8013cc2:	f8d8 0000 	ldr.w	r0, [r8]
 8013cc6:	f8d8 1004 	ldr.w	r1, [r8, #4]

        /*Draw the knob*/
        lv_area_t knob_area;
        lv_area_copy(&knob_area, &slider->coords);

        if(slider_w >= slider_h) {
 8013cca:	45b1      	cmp	r9, r6
 8013ccc:	c303      	stmia	r3!, {r0, r1}
 8013cce:	9b03      	ldr	r3, [sp, #12]
 8013cd0:	7d9b      	ldrb	r3, [r3, #22]
 8013cd2:	db5a      	blt.n	8013d8a <lv_slider_design+0x2d4>
            if(ext->knob_in == 0) {
 8013cd4:	07da      	lsls	r2, r3, #31
 8013cd6:	d444      	bmi.n	8013d62 <lv_slider_design+0x2ac>
                knob_area.x1 = area_indic.x2 - slider_h / 2;
 8013cd8:	2302      	movs	r3, #2
 8013cda:	fb96 f3f3 	sdiv	r3, r6, r3
 8013cde:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
 8013ce2:	1af6      	subs	r6, r6, r3
                knob_area.x2 = knob_area.x1 + slider_h;
 8013ce4:	9b06      	ldr	r3, [sp, #24]
                knob_area.x1 = area_indic.x2 - slider_h / 2;
 8013ce6:	b2b6      	uxth	r6, r6
                knob_area.x2 = knob_area.x1 + slider_h;
 8013ce8:	4433      	add	r3, r6
                knob_area.x1 = area_indic.x2 - slider_h / 2;
 8013cea:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
                knob_area.x2 = knob_area.x1 + slider_h;
 8013cee:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                knob_area.x1 = (int32_t)((int32_t)(slider_w - slider_h - 1) * (cur_value - min_value)) / (max_value - min_value);
                knob_area.x1 += slider->coords.x1;
                knob_area.x2 = knob_area.x1 + slider_h;
            }

            knob_area.y1 = slider->coords.y1;
 8013cf2:	8a6b      	ldrh	r3, [r5, #18]
 8013cf4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            knob_area.y2 = slider->coords.y2;
 8013cf8:	8aeb      	ldrh	r3, [r5, #22]
 8013cfa:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            knob_area.x1 = slider->coords.x1;
            knob_area.x2 = slider->coords.x2;

        }

        lv_draw_rect(&knob_area, mask, style_knob, opa_scale);
 8013cfe:	465b      	mov	r3, fp
 8013d00:	9a07      	ldr	r2, [sp, #28]
 8013d02:	4651      	mov	r1, sl
 8013d04:	a80c      	add	r0, sp, #48	; 0x30
 8013d06:	f7f6 fec1 	bl	800aa8c <lv_draw_rect>
    /*Post draw when the children are drawn*/
    else if(mode == LV_DESIGN_DRAW_POST) {

    }

    return true;
 8013d0a:	2001      	movs	r0, #1
 8013d0c:	e06b      	b.n	8013de6 <lv_slider_design+0x330>
            area_bg.x1 += slider_w < slider_h ? pad_hor_bg : 0;   /*Pad only for vertical slider*/
 8013d0e:	45b1      	cmp	r9, r6
 8013d10:	bfa8      	it	ge
 8013d12:	2300      	movge	r3, #0
            area_bg.y1 += slider_w > slider_h ? pad_ver_bg : 0;   /*Pad only for horizontal slider*/
 8013d14:	bfd8      	it	le
 8013d16:	2200      	movle	r2, #0
 8013d18:	b29b      	uxth	r3, r3
 8013d1a:	b292      	uxth	r2, r2
            area_bg.x1 += slider_w < slider_h ? pad_hor_bg : 0;   /*Pad only for vertical slider*/
 8013d1c:	441c      	add	r4, r3
            area_bg.x2 -= slider_w < slider_h ? pad_hor_bg : 0;   /*Pad only for vertical slider*/
 8013d1e:	ebae 0e03 	sub.w	lr, lr, r3
            area_bg.y1 += slider_w > slider_h ? pad_ver_bg : 0;   /*Pad only for horizontal slider*/
 8013d22:	4410      	add	r0, r2
            area_bg.y2 -= slider_w > slider_h ? pad_ver_bg : 0;   /*Pad only for horizontal slider*/
 8013d24:	1aba      	subs	r2, r7, r2
            area_bg.x1 += slider_w < slider_h ? pad_hor_bg : 0;   /*Pad only for vertical slider*/
 8013d26:	f8ad 4020 	strh.w	r4, [sp, #32]
            area_bg.x2 -= slider_w < slider_h ? pad_hor_bg : 0;   /*Pad only for vertical slider*/
 8013d2a:	f8ad e024 	strh.w	lr, [sp, #36]	; 0x24
            area_bg.y1 += slider_w > slider_h ? pad_ver_bg : 0;   /*Pad only for horizontal slider*/
 8013d2e:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
            area_bg.y2 -= slider_w > slider_h ? pad_ver_bg : 0;   /*Pad only for horizontal slider*/
 8013d32:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8013d36:	e733      	b.n	8013ba0 <lv_slider_design+0xea>
            lv_draw_rect(&area_bg, mask, style_bg, opa_scale);
 8013d38:	465b      	mov	r3, fp
 8013d3a:	9a01      	ldr	r2, [sp, #4]
 8013d3c:	e73f      	b.n	8013bbe <lv_slider_design+0x108>
    return area_p->y2 - area_p->y1 + 1;
 8013d3e:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8013d42:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
 8013d46:	1c53      	adds	r3, r2, #1
 8013d48:	1a5b      	subs	r3, r3, r1
            area_indic.y1 = (int32_t)((int32_t)(lv_area_get_height(&area_indic) - 1) * (cur_value - min_value)) / (max_value - min_value);
 8013d4a:	1be1      	subs	r1, r4, r7
 8013d4c:	b21b      	sxth	r3, r3
 8013d4e:	3b01      	subs	r3, #1
 8013d50:	434b      	muls	r3, r1
 8013d52:	9902      	ldr	r1, [sp, #8]
 8013d54:	1bc9      	subs	r1, r1, r7
 8013d56:	fb93 f3f1 	sdiv	r3, r3, r1
            area_indic.y1 = area_indic.y2 - area_indic.y1;
 8013d5a:	1ad3      	subs	r3, r2, r3
 8013d5c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8013d60:	e78f      	b.n	8013c82 <lv_slider_design+0x1cc>
                knob_area.x1 = (int32_t)((int32_t)(slider_w - slider_h - 1) * (cur_value - min_value)) / (max_value - min_value);
 8013d62:	eba9 0606 	sub.w	r6, r9, r6
 8013d66:	1be4      	subs	r4, r4, r7
 8013d68:	9b02      	ldr	r3, [sp, #8]
 8013d6a:	3e01      	subs	r6, #1
                knob_area.x1 += slider->coords.x1;
 8013d6c:	f8b5 8010 	ldrh.w	r8, [r5, #16]
                knob_area.x1 = (int32_t)((int32_t)(slider_w - slider_h - 1) * (cur_value - min_value)) / (max_value - min_value);
 8013d70:	1bdf      	subs	r7, r3, r7
                knob_area.x2 = knob_area.x1 + slider_h;
 8013d72:	9b06      	ldr	r3, [sp, #24]
                knob_area.x1 = (int32_t)((int32_t)(slider_w - slider_h - 1) * (cur_value - min_value)) / (max_value - min_value);
 8013d74:	4374      	muls	r4, r6
 8013d76:	fb94 f7f7 	sdiv	r7, r4, r7
                knob_area.x1 += slider->coords.x1;
 8013d7a:	4447      	add	r7, r8
 8013d7c:	b2bf      	uxth	r7, r7
                knob_area.x2 = knob_area.x1 + slider_h;
 8013d7e:	443b      	add	r3, r7
                knob_area.x1 += slider->coords.x1;
 8013d80:	f8ad 7030 	strh.w	r7, [sp, #48]	; 0x30
                knob_area.x2 = knob_area.x1 + slider_h;
 8013d84:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8013d88:	e7b3      	b.n	8013cf2 <lv_slider_design+0x23c>
            if(ext->knob_in == 0) {
 8013d8a:	07db      	lsls	r3, r3, #31
 8013d8c:	d415      	bmi.n	8013dba <lv_slider_design+0x304>
                knob_area.y1 = area_indic.y1 - slider_w / 2;
 8013d8e:	2602      	movs	r6, #2
                knob_area.y2 = knob_area.y1 + slider_w;
 8013d90:	9b05      	ldr	r3, [sp, #20]
                knob_area.y1 = area_indic.y1 - slider_w / 2;
 8013d92:	fb99 f6f6 	sdiv	r6, r9, r6
 8013d96:	f8bd 902a 	ldrh.w	r9, [sp, #42]	; 0x2a
 8013d9a:	eba9 0906 	sub.w	r9, r9, r6
 8013d9e:	fa1f f989 	uxth.w	r9, r9
                knob_area.y2 = knob_area.y1 + slider_w;
 8013da2:	444b      	add	r3, r9
                knob_area.y1 = area_indic.y1 - slider_w / 2;
 8013da4:	f8ad 9032 	strh.w	r9, [sp, #50]	; 0x32
                knob_area.y2 = knob_area.y1 + slider_w;
 8013da8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            knob_area.x1 = slider->coords.x1;
 8013dac:	8a2b      	ldrh	r3, [r5, #16]
 8013dae:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            knob_area.x2 = slider->coords.x2;
 8013db2:	8aab      	ldrh	r3, [r5, #20]
 8013db4:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8013db8:	e7a1      	b.n	8013cfe <lv_slider_design+0x248>
                knob_area.y2 = (int32_t)((int32_t)(slider_h - slider_w - 1) * (cur_value - min_value)) / (max_value - min_value);
 8013dba:	eba6 0609 	sub.w	r6, r6, r9
 8013dbe:	1be4      	subs	r4, r4, r7
 8013dc0:	9b02      	ldr	r3, [sp, #8]
 8013dc2:	3e01      	subs	r6, #1
                knob_area.y2 = slider->coords.y2 - knob_area.y2;
 8013dc4:	f8b5 8016 	ldrh.w	r8, [r5, #22]
                knob_area.y2 = (int32_t)((int32_t)(slider_h - slider_w - 1) * (cur_value - min_value)) / (max_value - min_value);
 8013dc8:	1bdf      	subs	r7, r3, r7
                knob_area.y1 = knob_area.y2 - slider_w;
 8013dca:	9b05      	ldr	r3, [sp, #20]
                knob_area.y2 = (int32_t)((int32_t)(slider_h - slider_w - 1) * (cur_value - min_value)) / (max_value - min_value);
 8013dcc:	4374      	muls	r4, r6
 8013dce:	fb94 f7f7 	sdiv	r7, r4, r7
                knob_area.y2 = slider->coords.y2 - knob_area.y2;
 8013dd2:	eba8 0707 	sub.w	r7, r8, r7
 8013dd6:	b2bf      	uxth	r7, r7
 8013dd8:	f8ad 7036 	strh.w	r7, [sp, #54]	; 0x36
                knob_area.y1 = knob_area.y2 - slider_w;
 8013ddc:	1aff      	subs	r7, r7, r3
 8013dde:	f8ad 7032 	strh.w	r7, [sp, #50]	; 0x32
 8013de2:	e7e3      	b.n	8013dac <lv_slider_design+0x2f6>
        return false;
 8013de4:	2000      	movs	r0, #0
}
 8013de6:	b01f      	add	sp, #124	; 0x7c
 8013de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013dec <lv_slider_signal>:
static lv_res_t lv_slider_signal(lv_obj_t * slider, lv_signal_t sign, void * param)
{
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(slider, sign, param);
 8013dec:	4b94      	ldr	r3, [pc, #592]	; (8014040 <lv_slider_signal+0x254>)
{
 8013dee:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    res = ancestor_signal(slider, sign, param);
 8013df2:	681b      	ldr	r3, [r3, #0]
{
 8013df4:	4604      	mov	r4, r0
 8013df6:	468a      	mov	sl, r1
 8013df8:	4691      	mov	r9, r2
    res = ancestor_signal(slider, sign, param);
 8013dfa:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8013dfc:	2801      	cmp	r0, #1
    res = ancestor_signal(slider, sign, param);
 8013dfe:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
 8013e00:	d112      	bne.n	8013e28 <lv_slider_signal+0x3c>

    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 8013e02:	4620      	mov	r0, r4
 8013e04:	f7f5 f839 	bl	8008e7a <lv_obj_get_ext_attr>
 8013e08:	4605      	mov	r5, r0
    lv_point_t p;
    lv_coord_t w = lv_obj_get_width(slider);
 8013e0a:	4620      	mov	r0, r4
 8013e0c:	f7f4 ff5e 	bl	8008ccc <lv_obj_get_width>
 8013e10:	4680      	mov	r8, r0
    lv_coord_t h = lv_obj_get_height(slider);
 8013e12:	4620      	mov	r0, r4
 8013e14:	f7f4 ff60 	bl	8008cd8 <lv_obj_get_height>

    if(sign == LV_SIGNAL_PRESSED) {
 8013e18:	f1ba 0f06 	cmp.w	sl, #6
    lv_coord_t h = lv_obj_get_height(slider);
 8013e1c:	4607      	mov	r7, r0
    if(sign == LV_SIGNAL_PRESSED) {
 8013e1e:	d107      	bne.n	8013e30 <lv_slider_signal+0x44>
        ext->drag_value = lv_slider_get_value(slider);
 8013e20:	4620      	mov	r0, r4
 8013e22:	f7ff fe23 	bl	8013a6c <lv_slider_get_value>
 8013e26:	82a8      	strh	r0, [r5, #20]
        }
        buf->type[i] = "lv_slider";
    }

    return res;
}
 8013e28:	4630      	mov	r0, r6
 8013e2a:	b002      	add	sp, #8
 8013e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    } else if(sign == LV_SIGNAL_PRESSING) {
 8013e30:	f1ba 0f07 	cmp.w	sl, #7
 8013e34:	d146      	bne.n	8013ec4 <lv_slider_signal+0xd8>
        lv_indev_get_point(param, &p);
 8013e36:	a901      	add	r1, sp, #4
 8013e38:	4648      	mov	r0, r9
 8013e3a:	f7f4 f9ad 	bl	8008198 <lv_indev_get_point>
        if(w > h) {
 8013e3e:	45b8      	cmp	r8, r7
 8013e40:	f04f 0e02 	mov.w	lr, #2
 8013e44:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8013e48:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8013e4c:	dd26      	ble.n	8013e9c <lv_slider_signal+0xb0>
            p.x -= slider->coords.x1 + h / 2;    /*Modify the point to shift with half knob (important on the start and end)*/
 8013e4e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8013e52:	8a23      	ldrh	r3, [r4, #16]
 8013e54:	fb97 fefe 	sdiv	lr, r7, lr
 8013e58:	1ad2      	subs	r2, r2, r3
            tmp = (int32_t)((int32_t) p.x * (ext->bar.max_value - ext->bar.min_value + 1)) / (w - knob_w);
 8013e5a:	1a43      	subs	r3, r0, r1
            p.x -= slider->coords.x1 + h / 2;    /*Modify the point to shift with half knob (important on the start and end)*/
 8013e5c:	eba2 020e 	sub.w	r2, r2, lr
 8013e60:	b212      	sxth	r2, r2
 8013e62:	f8ad 2004 	strh.w	r2, [sp, #4]
            tmp = (int32_t)((int32_t) p.x * (ext->bar.max_value - ext->bar.min_value + 1)) / (w - knob_w);
 8013e66:	fb03 2202 	mla	r2, r3, r2, r2
 8013e6a:	eba8 0307 	sub.w	r3, r8, r7
 8013e6e:	fb92 f3f3 	sdiv	r3, r2, r3
            tmp += ext->bar.min_value;
 8013e72:	440b      	add	r3, r1
            tmp = ext->bar.max_value - tmp;     /*Invert the value: smaller value means higher y*/
 8013e74:	b21b      	sxth	r3, r3
        if(tmp < ext->bar.min_value) tmp = ext->bar.min_value;
 8013e76:	4299      	cmp	r1, r3
 8013e78:	dc03      	bgt.n	8013e82 <lv_slider_signal+0x96>
 8013e7a:	4298      	cmp	r0, r3
 8013e7c:	4601      	mov	r1, r0
 8013e7e:	bfa8      	it	ge
 8013e80:	4619      	movge	r1, r3
        if(tmp != ext->drag_value) {
 8013e82:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 8013e86:	428b      	cmp	r3, r1
 8013e88:	d0ce      	beq.n	8013e28 <lv_slider_signal+0x3c>
            if(ext->action != NULL) ext->action(slider);
 8013e8a:	68eb      	ldr	r3, [r5, #12]
            ext->drag_value = tmp;
 8013e8c:	82a9      	strh	r1, [r5, #20]
            if(ext->action != NULL) ext->action(slider);
 8013e8e:	b10b      	cbz	r3, 8013e94 <lv_slider_signal+0xa8>
 8013e90:	4620      	mov	r0, r4
 8013e92:	4798      	blx	r3
            lv_obj_invalidate(slider);
 8013e94:	4620      	mov	r0, r4
 8013e96:	f7f4 fa0f 	bl	80082b8 <lv_obj_invalidate>
 8013e9a:	e7c5      	b.n	8013e28 <lv_slider_signal+0x3c>
            p.y -= slider->coords.y1 + w / 2;    /*Modify the point to shift with half knob (important on the start and end)*/
 8013e9c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
            tmp = (int32_t)((int32_t) p.y * (ext->bar.max_value - ext->bar.min_value + 1)) / (h - knob_h);
 8013ea0:	eba7 0708 	sub.w	r7, r7, r8
            p.y -= slider->coords.y1 + w / 2;    /*Modify the point to shift with half knob (important on the start and end)*/
 8013ea4:	8a62      	ldrh	r2, [r4, #18]
 8013ea6:	fb98 fefe 	sdiv	lr, r8, lr
 8013eaa:	1a9b      	subs	r3, r3, r2
            tmp = (int32_t)((int32_t) p.y * (ext->bar.max_value - ext->bar.min_value + 1)) / (h - knob_h);
 8013eac:	1a42      	subs	r2, r0, r1
            p.y -= slider->coords.y1 + w / 2;    /*Modify the point to shift with half knob (important on the start and end)*/
 8013eae:	eba3 030e 	sub.w	r3, r3, lr
 8013eb2:	b21b      	sxth	r3, r3
 8013eb4:	f8ad 3006 	strh.w	r3, [sp, #6]
            tmp = (int32_t)((int32_t) p.y * (ext->bar.max_value - ext->bar.min_value + 1)) / (h - knob_h);
 8013eb8:	fb02 3303 	mla	r3, r2, r3, r3
 8013ebc:	fb93 f3f7 	sdiv	r3, r3, r7
            tmp = ext->bar.max_value - tmp;     /*Invert the value: smaller value means higher y*/
 8013ec0:	1ac3      	subs	r3, r0, r3
 8013ec2:	e7d7      	b.n	8013e74 <lv_slider_signal+0x88>
    } else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
 8013ec4:	f1aa 0308 	sub.w	r3, sl, #8
 8013ec8:	2b01      	cmp	r3, #1
 8013eca:	d80d      	bhi.n	8013ee8 <lv_slider_signal+0xfc>
    lv_bar_set_value(slider, value);
 8013ecc:	f9b5 1014 	ldrsh.w	r1, [r5, #20]
 8013ed0:	4620      	mov	r0, r4
 8013ed2:	f7fa fdaf 	bl	800ea34 <lv_bar_set_value>
        ext->drag_value = LV_SLIDER_NOT_PRESSED;
 8013ed6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013eda:	82ab      	strh	r3, [r5, #20]
            if(ext->action != NULL) ext->action(slider);
 8013edc:	68eb      	ldr	r3, [r5, #12]
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d0a2      	beq.n	8013e28 <lv_slider_signal+0x3c>
 8013ee2:	4620      	mov	r0, r4
 8013ee4:	4798      	blx	r3
 8013ee6:	e79f      	b.n	8013e28 <lv_slider_signal+0x3c>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 8013ee8:	f1ba 0f02 	cmp.w	sl, #2
 8013eec:	d11e      	bne.n	8013f2c <lv_slider_signal+0x140>
        if(lv_obj_get_width(slider) != lv_area_get_width(param) ||
 8013eee:	4620      	mov	r0, r4
 8013ef0:	f7f4 feec 	bl	8008ccc <lv_obj_get_width>
    return area_p->x2 - area_p->x1 + 1;
 8013ef4:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8013ef8:	f8b9 2000 	ldrh.w	r2, [r9]
 8013efc:	3301      	adds	r3, #1
 8013efe:	1a9b      	subs	r3, r3, r2
 8013f00:	b21b      	sxth	r3, r3
 8013f02:	4298      	cmp	r0, r3
 8013f04:	d005      	beq.n	8013f12 <lv_slider_signal+0x126>
            slider->signal_func(slider, LV_SIGNAL_REFR_EXT_SIZE, NULL);
 8013f06:	69a3      	ldr	r3, [r4, #24]
 8013f08:	2200      	movs	r2, #0
 8013f0a:	2104      	movs	r1, #4
 8013f0c:	4620      	mov	r0, r4
 8013f0e:	4798      	blx	r3
 8013f10:	e78a      	b.n	8013e28 <lv_slider_signal+0x3c>
                lv_obj_get_height(slider) != lv_area_get_height(param)) {
 8013f12:	4620      	mov	r0, r4
 8013f14:	f7f4 fee0 	bl	8008cd8 <lv_obj_get_height>
    return area_p->y2 - area_p->y1 + 1;
 8013f18:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 8013f1c:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 8013f20:	3301      	adds	r3, #1
 8013f22:	1a9b      	subs	r3, r3, r2
        if(lv_obj_get_width(slider) != lv_area_get_width(param) ||
 8013f24:	b21b      	sxth	r3, r3
 8013f26:	4298      	cmp	r0, r3
 8013f28:	d1ed      	bne.n	8013f06 <lv_slider_signal+0x11a>
 8013f2a:	e77d      	b.n	8013e28 <lv_slider_signal+0x3c>
    } else if(sign == LV_SIGNAL_REFR_EXT_SIZE) {
 8013f2c:	f1ba 0f04 	cmp.w	sl, #4
 8013f30:	d13b      	bne.n	8013faa <lv_slider_signal+0x1be>
        lv_style_t * style = lv_slider_get_style(slider, LV_SLIDER_STYLE_BG);
 8013f32:	2100      	movs	r1, #0
 8013f34:	4620      	mov	r0, r4
 8013f36:	f7ff fda8 	bl	8013a8a <lv_slider_get_style>
 8013f3a:	4681      	mov	r9, r0
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 8013f3c:	4620      	mov	r0, r4
 8013f3e:	f7f4 ff9c 	bl	8008e7a <lv_obj_get_ext_attr>
        lv_coord_t shadow_w = knob_style->body.shadow.width;
 8013f42:	6903      	ldr	r3, [r0, #16]
 8013f44:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 8013f48:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
        if(ext->knob_in == 0) {
 8013f4c:	7dab      	ldrb	r3, [r5, #22]
 8013f4e:	f013 0f01 	tst.w	r3, #1
 8013f52:	d115      	bne.n	8013f80 <lv_slider_signal+0x194>
            lv_coord_t x = LV_MATH_MIN(w / 2 + 1 + shadow_w, h / 2 + 1 + shadow_w);
 8013f54:	2002      	movs	r0, #2
 8013f56:	fb97 f3f0 	sdiv	r3, r7, r0
 8013f5a:	fb98 f8f0 	sdiv	r8, r8, r0
 8013f5e:	b21b      	sxth	r3, r3
 8013f60:	fa0f f888 	sxth.w	r8, r8
 8013f64:	3301      	adds	r3, #1
 8013f66:	f108 0801 	add.w	r8, r8, #1
 8013f6a:	4413      	add	r3, r2
 8013f6c:	4490      	add	r8, r2
 8013f6e:	4543      	cmp	r3, r8
 8013f70:	bfa8      	it	ge
 8013f72:	4643      	movge	r3, r8
 8013f74:	b21b      	sxth	r3, r3
            if(slider->ext_size < x) slider->ext_size = x;
 8013f76:	4299      	cmp	r1, r3
 8013f78:	f6bf af56 	bge.w	8013e28 <lv_slider_signal+0x3c>
 8013f7c:	86a3      	strh	r3, [r4, #52]	; 0x34
 8013f7e:	e753      	b.n	8013e28 <lv_slider_signal+0x3c>
            lv_coord_t pad = LV_MATH_MIN(style->body.padding.hor, style->body.padding.ver);
 8013f80:	f9b9 3020 	ldrsh.w	r3, [r9, #32]
 8013f84:	f9b9 0022 	ldrsh.w	r0, [r9, #34]	; 0x22
 8013f88:	4283      	cmp	r3, r0
 8013f8a:	bfa8      	it	ge
 8013f8c:	4603      	movge	r3, r0
            if(pad < 0) pad = -pad;
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	bfbc      	itt	lt
 8013f92:	425b      	neglt	r3, r3
 8013f94:	b21b      	sxthlt	r3, r3
            if(slider->ext_size < pad) slider->ext_size = pad;
 8013f96:	4299      	cmp	r1, r3
 8013f98:	bfb8      	it	lt
 8013f9a:	86a3      	strhlt	r3, [r4, #52]	; 0x34
            if(slider->ext_size < shadow_w) slider->ext_size = shadow_w;
 8013f9c:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
 8013fa0:	4293      	cmp	r3, r2
 8013fa2:	f6bf af41 	bge.w	8013e28 <lv_slider_signal+0x3c>
 8013fa6:	86a2      	strh	r2, [r4, #52]	; 0x34
 8013fa8:	e73e      	b.n	8013e28 <lv_slider_signal+0x3c>
    } else if(sign == LV_SIGNAL_CONTROLL) {
 8013faa:	f1ba 0f10 	cmp.w	sl, #16
 8013fae:	d130      	bne.n	8014012 <lv_slider_signal+0x226>
        lv_group_t * g = lv_obj_get_group(slider);
 8013fb0:	4620      	mov	r0, r4
        char c = *((char *)param);
 8013fb2:	f899 7000 	ldrb.w	r7, [r9]
        lv_group_t * g = lv_obj_get_group(slider);
 8013fb6:	f7f4 ff62 	bl	8008e7e <lv_obj_get_group>
 8013fba:	4680      	mov	r8, r0
        bool editing = lv_group_get_editing(g);
 8013fbc:	f7f3 fcc7 	bl	800794e <lv_group_get_editing>
 8013fc0:	4681      	mov	r9, r0
        lv_hal_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 8013fc2:	f7f4 f8c7 	bl	8008154 <lv_indev_get_act>
 8013fc6:	f7f4 f8cb 	bl	8008160 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER && c == LV_GROUP_KEY_ENTER) {
 8013fca:	2804      	cmp	r0, #4
 8013fcc:	d10a      	bne.n	8013fe4 <lv_slider_signal+0x1f8>
 8013fce:	2f0a      	cmp	r7, #10
 8013fd0:	d108      	bne.n	8013fe4 <lv_slider_signal+0x1f8>
            if(editing) lv_group_set_editing(g, false);
 8013fd2:	f1b9 0f00 	cmp.w	r9, #0
 8013fd6:	f43f af27 	beq.w	8013e28 <lv_slider_signal+0x3c>
 8013fda:	2100      	movs	r1, #0
 8013fdc:	4640      	mov	r0, r8
 8013fde:	f7f3 fca9 	bl	8007934 <lv_group_set_editing>
 8013fe2:	e721      	b.n	8013e28 <lv_slider_signal+0x3c>
        if(c == LV_GROUP_KEY_RIGHT || c == LV_GROUP_KEY_UP) {
 8013fe4:	f007 03fd 	and.w	r3, r7, #253	; 0xfd
 8013fe8:	2b11      	cmp	r3, #17
 8013fea:	d108      	bne.n	8013ffe <lv_slider_signal+0x212>
            lv_slider_set_value(slider, lv_slider_get_value(slider) + 1);
 8013fec:	4620      	mov	r0, r4
 8013fee:	f7ff fd3d 	bl	8013a6c <lv_slider_get_value>
 8013ff2:	1c41      	adds	r1, r0, #1
 8013ff4:	b209      	sxth	r1, r1
 8013ff6:	4620      	mov	r0, r4
 8013ff8:	f7fa fd1c 	bl	800ea34 <lv_bar_set_value>
 8013ffc:	e76e      	b.n	8013edc <lv_slider_signal+0xf0>
        } else if(c == LV_GROUP_KEY_LEFT || c == LV_GROUP_KEY_DOWN) {
 8013ffe:	2f14      	cmp	r7, #20
 8014000:	d002      	beq.n	8014008 <lv_slider_signal+0x21c>
 8014002:	2f12      	cmp	r7, #18
 8014004:	f47f af10 	bne.w	8013e28 <lv_slider_signal+0x3c>
            lv_slider_set_value(slider, lv_slider_get_value(slider) - 1);
 8014008:	4620      	mov	r0, r4
 801400a:	f7ff fd2f 	bl	8013a6c <lv_slider_get_value>
 801400e:	1e41      	subs	r1, r0, #1
 8014010:	e7f0      	b.n	8013ff4 <lv_slider_signal+0x208>
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 8014012:	f1ba 0f11 	cmp.w	sl, #17
 8014016:	d102      	bne.n	801401e <lv_slider_signal+0x232>
        *editable = true;
 8014018:	f889 6000 	strb.w	r6, [r9]
 801401c:	e704      	b.n	8013e28 <lv_slider_signal+0x3c>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801401e:	f1ba 0f05 	cmp.w	sl, #5
 8014022:	f47f af01 	bne.w	8013e28 <lv_slider_signal+0x3c>
 8014026:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 8014028:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 801402c:	b2da      	uxtb	r2, r3
 801402e:	b119      	cbz	r1, 8014038 <lv_slider_signal+0x24c>
 8014030:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) {  /*Find the last set data*/
 8014032:	2b07      	cmp	r3, #7
 8014034:	d1f8      	bne.n	8014028 <lv_slider_signal+0x23c>
 8014036:	461a      	mov	r2, r3
        buf->type[i] = "lv_slider";
 8014038:	4b02      	ldr	r3, [pc, #8]	; (8014044 <lv_slider_signal+0x258>)
 801403a:	f849 3022 	str.w	r3, [r9, r2, lsl #2]
 801403e:	e6f3      	b.n	8013e28 <lv_slider_signal+0x3c>
 8014040:	20017440 	.word	0x20017440
 8014044:	08087fed 	.word	0x08087fed

08014048 <pwd_char_hider_anim>:
 * (pwd_char_hider callback do the real job)
 * @param ta unused
 * @param x unused
 */
static void pwd_char_hider_anim(lv_obj_t * ta, int32_t x)
{
 8014048:	4770      	bx	lr

0801404a <cursor_blink_anim>:
{
 801404a:	b538      	push	{r3, r4, r5, lr}
 801404c:	460c      	mov	r4, r1
 801404e:	4605      	mov	r5, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8014050:	f7f4 ff13 	bl	8008e7a <lv_obj_get_ext_attr>
    if(show != ext->cursor.state) {
 8014054:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8014058:	f3c3 0280 	ubfx	r2, r3, #2, #1
 801405c:	42a2      	cmp	r2, r4
 801405e:	d00d      	beq.n	801407c <cursor_blink_anim+0x32>
        ext->cursor.state = show == 0 ? 0 : 1;
 8014060:	3400      	adds	r4, #0
 8014062:	bf18      	it	ne
 8014064:	2401      	movne	r4, #1
 8014066:	f364 0382 	bfi	r3, r4, #2, #1
 801406a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
        if(ext->cursor.type != LV_CURSOR_NONE &&
 801406e:	079b      	lsls	r3, r3, #30
 8014070:	d004      	beq.n	801407c <cursor_blink_anim+0x32>
            lv_obj_invalidate(ta);
 8014072:	4628      	mov	r0, r5
}
 8014074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            lv_obj_invalidate(ta);
 8014078:	f7f4 b91e 	b.w	80082b8 <lv_obj_invalidate>
 801407c:	bd38      	pop	{r3, r4, r5, pc}
	...

08014080 <pwd_char_hider>:
/**
 * Hide all characters (convert them to '*')
 * @param ta: pointer to text area object
 */
static void pwd_char_hider(lv_obj_t * ta)
{
 8014080:	b570      	push	{r4, r5, r6, lr}
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8014082:	f7f4 fefa 	bl	8008e7a <lv_obj_get_ext_attr>
    if(ext->pwd_mode != 0) {
 8014086:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801408a:	4604      	mov	r4, r0
    if(ext->pwd_mode != 0) {
 801408c:	07db      	lsls	r3, r3, #31
 801408e:	d51b      	bpl.n	80140c8 <pwd_char_hider+0x48>
        char * txt = lv_label_get_text(ext->label);
 8014090:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
        int16_t len = lv_txt_get_encoded_length(txt);
        bool refr = false;
        uint16_t i;
        for(i = 0; i < len; i++) {
            txt[i] = '*';
 8014092:	262a      	movs	r6, #42	; 0x2a
        char * txt = lv_label_get_text(ext->label);
 8014094:	f7fd fa81 	bl	801159a <lv_label_get_text>
        int16_t len = lv_txt_get_encoded_length(txt);
 8014098:	4b0c      	ldr	r3, [pc, #48]	; (80140cc <pwd_char_hider+0x4c>)
        char * txt = lv_label_get_text(ext->label);
 801409a:	4605      	mov	r5, r0
        int16_t len = lv_txt_get_encoded_length(txt);
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	4798      	blx	r3
        for(i = 0; i < len; i++) {
 80140a0:	2300      	movs	r3, #0
        int16_t len = lv_txt_get_encoded_length(txt);
 80140a2:	b200      	sxth	r0, r0
        bool refr = false;
 80140a4:	461a      	mov	r2, r3
 80140a6:	1c59      	adds	r1, r3, #1
        for(i = 0; i < len; i++) {
 80140a8:	b29b      	uxth	r3, r3
 80140aa:	4283      	cmp	r3, r0
 80140ac:	db08      	blt.n	80140c0 <pwd_char_hider+0x40>
            refr = true;
        }

        txt[i] = '\0';
 80140ae:	2100      	movs	r1, #0
 80140b0:	54e9      	strb	r1, [r5, r3]

        if(refr != false) lv_label_set_text(ext->label, txt);
 80140b2:	b14a      	cbz	r2, 80140c8 <pwd_char_hider+0x48>
 80140b4:	4629      	mov	r1, r5
 80140b6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    }
}
 80140b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if(refr != false) lv_label_set_text(ext->label, txt);
 80140bc:	f7fd be38 	b.w	8011d30 <lv_label_set_text>
            txt[i] = '*';
 80140c0:	54ee      	strb	r6, [r5, r3]
            refr = true;
 80140c2:	2201      	movs	r2, #1
 80140c4:	460b      	mov	r3, r1
 80140c6:	e7ee      	b.n	80140a6 <pwd_char_hider+0x26>
 80140c8:	bd70      	pop	{r4, r5, r6, pc}
 80140ca:	bf00      	nop
 80140cc:	200000bc 	.word	0x200000bc

080140d0 <lv_page_set_scrl_fit>:
{
 80140d0:	b538      	push	{r3, r4, r5, lr}
 80140d2:	460c      	mov	r4, r1
 80140d4:	4615      	mov	r5, r2
    lv_cont_set_fit(lv_page_get_scrl(page), hor_en, ver_en);
 80140d6:	f7ff f86e 	bl	80131b6 <lv_page_get_scrl>
 80140da:	462a      	mov	r2, r5
 80140dc:	4621      	mov	r1, r4
}
 80140de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_cont_set_fit(lv_page_get_scrl(page), hor_en, ver_en);
 80140e2:	f7fc bb02 	b.w	80106ea <lv_cont_set_fit>
	...

080140e8 <lv_ta_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 80140e8:	2a02      	cmp	r2, #2
{
 80140ea:	b510      	push	{r4, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
 80140ec:	d104      	bne.n	80140f8 <lv_ta_design+0x10>
        return ancestor_design(ta, masp, mode);
 80140ee:	4b07      	ldr	r3, [pc, #28]	; (801410c <lv_ta_design+0x24>)
}
 80140f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return ancestor_design(ta, masp, mode);
 80140f4:	681b      	ldr	r3, [r3, #0]
 80140f6:	4718      	bx	r3
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 80140f8:	b91a      	cbnz	r2, 8014102 <lv_ta_design+0x1a>
        ancestor_design(ta, masp, mode);
 80140fa:	4b04      	ldr	r3, [pc, #16]	; (801410c <lv_ta_design+0x24>)
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	4798      	blx	r3
 8014100:	e001      	b.n	8014106 <lv_ta_design+0x1e>
    } else if(mode == LV_DESIGN_DRAW_POST) {
 8014102:	2a01      	cmp	r2, #1
 8014104:	d0f9      	beq.n	80140fa <lv_ta_design+0x12>
}
 8014106:	2001      	movs	r0, #1
 8014108:	bd10      	pop	{r4, pc}
 801410a:	bf00      	nop
 801410c:	20017444 	.word	0x20017444

08014110 <lv_ta_scrollable_signal>:
    res = scrl_signal(scrl, sign, param);
 8014110:	4b10      	ldr	r3, [pc, #64]	; (8014154 <lv_ta_scrollable_signal+0x44>)
{
 8014112:	b570      	push	{r4, r5, r6, lr}
    res = scrl_signal(scrl, sign, param);
 8014114:	681b      	ldr	r3, [r3, #0]
{
 8014116:	4604      	mov	r4, r0
 8014118:	460e      	mov	r6, r1
    res = scrl_signal(scrl, sign, param);
 801411a:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 801411c:	2801      	cmp	r0, #1
    res = scrl_signal(scrl, sign, param);
 801411e:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 8014120:	d115      	bne.n	801414e <lv_ta_scrollable_signal+0x3e>
    if(sign == LV_SIGNAL_REFR_EXT_SIZE) {
 8014122:	2e04      	cmp	r6, #4
 8014124:	d113      	bne.n	801414e <lv_ta_scrollable_signal+0x3e>
        lv_obj_t * ta = lv_obj_get_parent(scrl);
 8014126:	4620      	mov	r0, r4
 8014128:	f7f4 fd4a 	bl	8008bc0 <lv_obj_get_parent>
        lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801412c:	f7f4 fea5 	bl	8008e7a <lv_obj_get_ext_attr>
        lv_style_t * style_label = lv_obj_get_style(ext->label);
 8014130:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8014132:	f7f4 fdd7 	bl	8008ce4 <lv_obj_get_style>
 8014136:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
        scrl->ext_size = LV_MATH_MAX(scrl->ext_size, style_label->text.line_space + font_h);
 8014138:	f9b0 2032 	ldrsh.w	r2, [r0, #50]	; 0x32
 801413c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014140:	4413      	add	r3, r2
 8014142:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8014146:	4293      	cmp	r3, r2
 8014148:	bfb8      	it	lt
 801414a:	4613      	movlt	r3, r2
 801414c:	86a3      	strh	r3, [r4, #52]	; 0x34
}
 801414e:	4628      	mov	r0, r5
 8014150:	bd70      	pop	{r4, r5, r6, pc}
 8014152:	bf00      	nop
 8014154:	20017450 	.word	0x20017450

08014158 <lv_ta_set_cursor_pos>:
{
 8014158:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801415c:	b08f      	sub	sp, #60	; 0x3c
 801415e:	460c      	mov	r4, r1
 8014160:	4606      	mov	r6, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8014162:	f7f4 fe8a 	bl	8008e7a <lv_obj_get_ext_attr>
    if(ext->cursor.pos == pos) return;
 8014166:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801416a:	4605      	mov	r5, r0
    if(ext->cursor.pos == pos) return;
 801416c:	42a3      	cmp	r3, r4
 801416e:	f000 80a5 	beq.w	80142bc <lv_ta_set_cursor_pos+0x164>
    uint16_t len = lv_txt_get_encoded_length(lv_label_get_text(ext->label));
 8014172:	4b54      	ldr	r3, [pc, #336]	; (80142c4 <lv_ta_set_cursor_pos+0x16c>)
 8014174:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8014176:	681f      	ldr	r7, [r3, #0]
 8014178:	f7fd fa0f 	bl	801159a <lv_label_get_text>
 801417c:	47b8      	blx	r7
    if(pos < 0) pos = len + pos;
 801417e:	2c00      	cmp	r4, #0
    if(pos > len || pos == LV_TA_CURSOR_LAST) pos = len;
 8014180:	b283      	uxth	r3, r0
    if(pos < 0) pos = len + pos;
 8014182:	bfbc      	itt	lt
 8014184:	1824      	addlt	r4, r4, r0
 8014186:	b224      	sxthlt	r4, r4
    if(pos > len || pos == LV_TA_CURSOR_LAST) pos = len;
 8014188:	429c      	cmp	r4, r3
 801418a:	dc03      	bgt.n	8014194 <lv_ta_set_cursor_pos+0x3c>
 801418c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8014190:	429c      	cmp	r4, r3
 8014192:	d100      	bne.n	8014196 <lv_ta_set_cursor_pos+0x3e>
 8014194:	b204      	sxth	r4, r0
    ext->cursor.pos = pos;
 8014196:	b2a4      	uxth	r4, r4
    lv_obj_t * label_par = lv_obj_get_parent(ext->label);
 8014198:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    ext->cursor.pos = pos;
 801419a:	f8a5 4042 	strh.w	r4, [r5, #66]	; 0x42
    lv_obj_t * label_par = lv_obj_get_parent(ext->label);
 801419e:	f7f4 fd0f 	bl	8008bc0 <lv_obj_get_parent>
 80141a2:	4607      	mov	r7, r0
    lv_style_t * style = lv_obj_get_style(ta);
 80141a4:	4630      	mov	r0, r6
 80141a6:	f7f4 fd9d 	bl	8008ce4 <lv_obj_get_style>
    lv_label_get_letter_pos(ext->label, pos, &cur_pos);
 80141aa:	466a      	mov	r2, sp
    const lv_font_t * font_p = style->text.font;
 80141ac:	f8d0 902c 	ldr.w	r9, [r0, #44]	; 0x2c
    lv_label_get_letter_pos(ext->label, pos, &cur_pos);
 80141b0:	4621      	mov	r1, r4
    lv_style_t * style = lv_obj_get_style(ta);
 80141b2:	4680      	mov	r8, r0
    lv_label_get_letter_pos(ext->label, pos, &cur_pos);
 80141b4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80141b6:	f7fd fa0f 	bl	80115d8 <lv_label_get_letter_pos>
    lv_obj_get_coords(ta, &ta_cords);
 80141ba:	a903      	add	r1, sp, #12
 80141bc:	4630      	mov	r0, r6
 80141be:	f7f4 fd73 	bl	8008ca8 <lv_obj_get_coords>
    lv_obj_get_coords(ext->label, &label_cords);
 80141c2:	a901      	add	r1, sp, #4
 80141c4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80141c6:	f7f4 fd6f 	bl	8008ca8 <lv_obj_get_coords>
    if(lv_obj_get_y(label_par) + cur_pos.y < 0) {
 80141ca:	4638      	mov	r0, r7
 80141cc:	f899 4020 	ldrb.w	r4, [r9, #32]
 80141d0:	f7f4 fd76 	bl	8008cc0 <lv_obj_get_y>
 80141d4:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80141d8:	42d8      	cmn	r0, r3
 80141da:	d506      	bpl.n	80141ea <lv_ta_set_cursor_pos+0x92>
        lv_obj_set_y(label_par, - cur_pos.y + style->body.padding.ver);
 80141dc:	f8b8 1020 	ldrh.w	r1, [r8, #32]
 80141e0:	4638      	mov	r0, r7
 80141e2:	1ac9      	subs	r1, r1, r3
 80141e4:	b209      	sxth	r1, r1
 80141e6:	f7f4 fa70 	bl	80086ca <lv_obj_set_y>
    if(label_cords.y1 + cur_pos.y + font_h + style->body.padding.ver > ta_cords.y2) {
 80141ea:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 80141ee:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80141f2:	4413      	add	r3, r2
 80141f4:	f9b8 2020 	ldrsh.w	r2, [r8, #32]
 80141f8:	4423      	add	r3, r4
 80141fa:	4413      	add	r3, r2
 80141fc:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8014200:	4293      	cmp	r3, r2
 8014202:	dd0e      	ble.n	8014222 <lv_ta_set_cursor_pos+0xca>
        lv_obj_set_y(label_par, -(cur_pos.y - lv_obj_get_height(ta) +
 8014204:	4630      	mov	r0, r6
 8014206:	f7f4 fd67 	bl	8008cd8 <lv_obj_get_height>
 801420a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 801420e:	1a41      	subs	r1, r0, r1
 8014210:	f8b8 0020 	ldrh.w	r0, [r8, #32]
 8014214:	1b09      	subs	r1, r1, r4
 8014216:	eba1 0140 	sub.w	r1, r1, r0, lsl #1
 801421a:	4638      	mov	r0, r7
 801421c:	b209      	sxth	r1, r1
 801421e:	f7f4 fa54 	bl	80086ca <lv_obj_set_y>
    if(lv_obj_get_x(label_par) + cur_pos.x < font_h) {
 8014222:	4638      	mov	r0, r7
 8014224:	f7f4 fd46 	bl	8008cb4 <lv_obj_get_x>
 8014228:	f9bd 1000 	ldrsh.w	r1, [sp]
 801422c:	4408      	add	r0, r1
 801422e:	4284      	cmp	r4, r0
 8014230:	dd04      	ble.n	801423c <lv_ta_set_cursor_pos+0xe4>
        lv_obj_set_x(label_par, - cur_pos.x + font_h);
 8014232:	1a61      	subs	r1, r4, r1
 8014234:	4638      	mov	r0, r7
 8014236:	b209      	sxth	r1, r1
 8014238:	f7f4 fa3d 	bl	80086b6 <lv_obj_set_x>
    if(label_cords.x1 + cur_pos.x + font_h + style->body.padding.hor > ta_cords.x2) {
 801423c:	f9bd 2000 	ldrsh.w	r2, [sp]
 8014240:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8014244:	4413      	add	r3, r2
 8014246:	f9b8 2022 	ldrsh.w	r2, [r8, #34]	; 0x22
 801424a:	4423      	add	r3, r4
 801424c:	4413      	add	r3, r2
 801424e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8014252:	4293      	cmp	r3, r2
 8014254:	dd0e      	ble.n	8014274 <lv_ta_set_cursor_pos+0x11c>
        lv_obj_set_x(label_par, -(cur_pos.x - lv_obj_get_width(ta) +
 8014256:	4630      	mov	r0, r6
 8014258:	f7f4 fd38 	bl	8008ccc <lv_obj_get_width>
 801425c:	f8bd 1000 	ldrh.w	r1, [sp]
 8014260:	1a41      	subs	r1, r0, r1
 8014262:	f8b8 0022 	ldrh.w	r0, [r8, #34]	; 0x22
 8014266:	1b09      	subs	r1, r1, r4
 8014268:	eba1 0140 	sub.w	r1, r1, r0, lsl #1
 801426c:	4638      	mov	r0, r7
 801426e:	b209      	sxth	r1, r1
 8014270:	f7f4 fa21 	bl	80086b6 <lv_obj_set_x>
    ext->cursor.valid_x = cur_pos.x;
 8014274:	f8bd 3000 	ldrh.w	r3, [sp]
    a.start = 1;
 8014278:	2201      	movs	r2, #1
    lv_anim_create(&a);
 801427a:	a805      	add	r0, sp, #20
    a.var = ta;
 801427c:	9605      	str	r6, [sp, #20]
    ext->cursor.valid_x = cur_pos.x;
 801427e:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
    a.fp = (lv_anim_fp_t)cursor_blink_anim;
 8014282:	4b11      	ldr	r3, [pc, #68]	; (80142c8 <lv_ta_set_cursor_pos+0x170>)
    a.start = 1;
 8014284:	9209      	str	r2, [sp, #36]	; 0x24
    a.fp = (lv_anim_fp_t)cursor_blink_anim;
 8014286:	9306      	str	r3, [sp, #24]
    a.time = LV_TA_CURSOR_BLINK_TIME;
 8014288:	f44f 73c8 	mov.w	r3, #400	; 0x190
    a.repeat = 1;
 801428c:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
    a.time = LV_TA_CURSOR_BLINK_TIME;
 8014290:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    a.act_time = 0;
 8014294:	2300      	movs	r3, #0
    a.playback = 1;
 8014296:	f042 0203 	orr.w	r2, r2, #3
    a.act_time = 0;
 801429a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    a.end_cb = NULL;
 801429e:	9307      	str	r3, [sp, #28]
    a.end = 0;
 80142a0:	930a      	str	r3, [sp, #40]	; 0x28
    a.repeat_pause = 0;
 80142a2:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    a.playback_pause = 0;
 80142a6:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
    a.path = lv_anim_path_step;
 80142aa:	4b08      	ldr	r3, [pc, #32]	; (80142cc <lv_ta_set_cursor_pos+0x174>)
    a.playback = 1;
 80142ac:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
    a.path = lv_anim_path_step;
 80142b0:	9308      	str	r3, [sp, #32]
    lv_anim_create(&a);
 80142b2:	f7f9 fa11 	bl	800d6d8 <lv_anim_create>
    lv_obj_invalidate(ta);
 80142b6:	4630      	mov	r0, r6
 80142b8:	f7f3 fffe 	bl	80082b8 <lv_obj_invalidate>
}
 80142bc:	b00f      	add	sp, #60	; 0x3c
 80142be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80142c2:	bf00      	nop
 80142c4:	200000bc 	.word	0x200000bc
 80142c8:	0801404b 	.word	0x0801404b
 80142cc:	0800d775 	.word	0x0800d775

080142d0 <lv_ta_del_char>:
{
 80142d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142d4:	4606      	mov	r6, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 80142d6:	f7f4 fdd0 	bl	8008e7a <lv_obj_get_ext_attr>
    if(cur_pos == 0) return;
 80142da:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 80142de:	4604      	mov	r4, r0
    if(cur_pos == 0) return;
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d046      	beq.n	8014372 <lv_ta_del_char+0xa2>
    char * label_txt = lv_label_get_text(ext->label);
 80142e4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80142e6:	f7fd f958 	bl	801159a <lv_label_get_text>
    lv_txt_cut(label_txt, ext->cursor.pos - 1, 1);
 80142ea:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
    char * label_txt = lv_label_get_text(ext->label);
 80142ee:	4607      	mov	r7, r0
    lv_txt_cut(label_txt, ext->cursor.pos - 1, 1);
 80142f0:	2201      	movs	r2, #1
 80142f2:	3901      	subs	r1, #1
 80142f4:	f7fa f9dc 	bl	800e6b0 <lv_txt_cut>
    lv_label_set_text(ext->label, label_txt);
 80142f8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80142fa:	4639      	mov	r1, r7
 80142fc:	f7fd fd18 	bl	8011d30 <lv_label_set_text>
    if(lv_obj_get_width(ext->label) == 0) {
 8014300:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8014302:	f7f4 fce3 	bl	8008ccc <lv_obj_get_width>
 8014306:	b938      	cbnz	r0, 8014318 <lv_ta_del_char+0x48>
        lv_style_t * style = lv_obj_get_style(ext->label);
 8014308:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801430a:	f7f4 fceb 	bl	8008ce4 <lv_obj_get_style>
        lv_obj_set_width(ext->label, style->line.width);
 801430e:	f9b0 1044 	ldrsh.w	r1, [r0, #68]	; 0x44
 8014312:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8014314:	f7f4 fa14 	bl	8008740 <lv_obj_set_width>
    if(ext->pwd_mode != 0) {
 8014318:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 801431c:	07db      	lsls	r3, r3, #31
 801431e:	d51f      	bpl.n	8014360 <lv_ta_del_char+0x90>
        uint32_t byte_pos = lv_txt_encoded_get_byte_id(ext->pwd_tmp, ext->cursor.pos - 1);
 8014320:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
 8014324:	4b14      	ldr	r3, [pc, #80]	; (8014378 <lv_ta_del_char+0xa8>)
 8014326:	3901      	subs	r1, #1
 8014328:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	4798      	blx	r3
        lv_txt_cut(ext->pwd_tmp, ext->cursor.pos - 1, lv_txt_encoded_size(&label_txt[byte_pos]));
 801432e:	f8b4 5042 	ldrh.w	r5, [r4, #66]	; 0x42
 8014332:	4b12      	ldr	r3, [pc, #72]	; (801437c <lv_ta_del_char+0xac>)
 8014334:	4438      	add	r0, r7
 8014336:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 801433a:	3d01      	subs	r5, #1
 801433c:	681b      	ldr	r3, [r3, #0]
 801433e:	4798      	blx	r3
 8014340:	4629      	mov	r1, r5
 8014342:	4602      	mov	r2, r0
 8014344:	4640      	mov	r0, r8
 8014346:	f7fa f9b3 	bl	800e6b0 <lv_txt_cut>
        ext->pwd_tmp = lv_mem_realloc(ext->pwd_tmp, strlen(ext->pwd_tmp) + 1);
 801434a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801434c:	4628      	mov	r0, r5
 801434e:	f7eb ff65 	bl	800021c <strlen>
 8014352:	1c41      	adds	r1, r0, #1
 8014354:	4628      	mov	r0, r5
 8014356:	f7f9 fdff 	bl	800df58 <lv_mem_realloc>
 801435a:	6320      	str	r0, [r4, #48]	; 0x30
        lv_mem_assert(ext->pwd_tmp);
 801435c:	b900      	cbnz	r0, 8014360 <lv_ta_del_char+0x90>
 801435e:	e7fe      	b.n	801435e <lv_ta_del_char+0x8e>
    lv_ta_set_cursor_pos(ta, ext->cursor.pos - 1);
 8014360:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
 8014364:	4630      	mov	r0, r6
 8014366:	3901      	subs	r1, #1
}
 8014368:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_ta_set_cursor_pos(ta, ext->cursor.pos - 1);
 801436c:	b209      	sxth	r1, r1
 801436e:	f7ff bef3 	b.w	8014158 <lv_ta_set_cursor_pos>
 8014372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014376:	bf00      	nop
 8014378:	200000ac 	.word	0x200000ac
 801437c:	200000b8 	.word	0x200000b8

08014380 <lv_ta_set_cursor_type>:
{
 8014380:	b538      	push	{r3, r4, r5, lr}
 8014382:	460c      	mov	r4, r1
 8014384:	4605      	mov	r5, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8014386:	f7f4 fd78 	bl	8008e7a <lv_obj_get_ext_attr>
    if(ext->cursor.type == cur_type) return;
 801438a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 801438e:	f003 0203 	and.w	r2, r3, #3
 8014392:	42a2      	cmp	r2, r4
 8014394:	d008      	beq.n	80143a8 <lv_ta_set_cursor_type+0x28>
    ext->cursor.type = cur_type;
 8014396:	f364 0301 	bfi	r3, r4, #0, #2
 801439a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    lv_obj_invalidate(ta);
 801439e:	4628      	mov	r0, r5
}
 80143a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(ta);
 80143a4:	f7f3 bf88 	b.w	80082b8 <lv_obj_invalidate>
 80143a8:	bd38      	pop	{r3, r4, r5, pc}

080143aa <lv_ta_set_one_line>:
{
 80143aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143ae:	460e      	mov	r6, r1
 80143b0:	4604      	mov	r4, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 80143b2:	f7f4 fd62 	bl	8008e7a <lv_obj_get_ext_attr>
    if(ext->one_line == en) return;
 80143b6:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 80143ba:	4605      	mov	r5, r0
    if(ext->one_line == en) return;
 80143bc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80143c0:	42b3      	cmp	r3, r6
 80143c2:	d053      	beq.n	801446c <lv_ta_set_one_line+0xc2>
        lv_style_t * style_ta = lv_obj_get_style(ta);
 80143c4:	4620      	mov	r0, r4
    if(en) {
 80143c6:	b39e      	cbz	r6, 8014430 <lv_ta_set_one_line+0x86>
        lv_style_t * style_ta = lv_obj_get_style(ta);
 80143c8:	f7f4 fc8c 	bl	8008ce4 <lv_obj_get_style>
 80143cc:	4606      	mov	r6, r0
        lv_style_t * style_scrl = lv_obj_get_style(lv_page_get_scrl(ta));
 80143ce:	4620      	mov	r0, r4
 80143d0:	f7fe fef1 	bl	80131b6 <lv_page_get_scrl>
 80143d4:	f7f4 fc86 	bl	8008ce4 <lv_obj_get_style>
 80143d8:	4680      	mov	r8, r0
        lv_style_t * style_label = lv_obj_get_style(ext->label);
 80143da:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80143dc:	f7f4 fc82 	bl	8008ce4 <lv_obj_get_style>
 80143e0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
        lv_page_set_scrl_fit(ta, true, true);
 80143e2:	2201      	movs	r2, #1
 80143e4:	4620      	mov	r0, r4
 80143e6:	f893 7020 	ldrb.w	r7, [r3, #32]
        ext->one_line = 1;
 80143ea:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
        lv_page_set_scrl_fit(ta, true, true);
 80143ee:	4611      	mov	r1, r2
        ext->one_line = 1;
 80143f0:	f043 0302 	orr.w	r3, r3, #2
 80143f4:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        lv_page_set_scrl_fit(ta, true, true);
 80143f8:	f7ff fe6a 	bl	80140d0 <lv_page_set_scrl_fit>
        lv_obj_set_height(ta, font_h + (style_ta->body.padding.ver + style_scrl->body.padding.ver) * 2);
 80143fc:	f9b8 3020 	ldrsh.w	r3, [r8, #32]
 8014400:	f9b6 1020 	ldrsh.w	r1, [r6, #32]
 8014404:	4620      	mov	r0, r4
 8014406:	4419      	add	r1, r3
 8014408:	eb07 0141 	add.w	r1, r7, r1, lsl #1
 801440c:	b209      	sxth	r1, r1
 801440e:	f7f4 f99e 	bl	800874e <lv_obj_set_height>
        lv_label_set_long_mode(ext->label, LV_LABEL_LONG_EXPAND);
 8014412:	2100      	movs	r1, #0
 8014414:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8014416:	f7fd fcdf 	bl	8011dd8 <lv_label_set_long_mode>
        lv_obj_set_pos(lv_page_get_scrl(ta), style_ta->body.padding.hor, style_ta->body.padding.ver);
 801441a:	4620      	mov	r0, r4
 801441c:	f7fe fecb 	bl	80131b6 <lv_page_get_scrl>
 8014420:	f9b6 2020 	ldrsh.w	r2, [r6, #32]
 8014424:	f9b6 1022 	ldrsh.w	r1, [r6, #34]	; 0x22
}
 8014428:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        lv_obj_set_pos(lv_page_get_scrl(ta), style_ta->body.padding.hor, style_ta->body.padding.ver);
 801442c:	f7f3 bfde 	b.w	80083ec <lv_obj_set_pos>
        lv_style_t * style_ta = lv_obj_get_style(ta);
 8014430:	f7f4 fc58 	bl	8008ce4 <lv_obj_get_style>
        ext->one_line = 0;
 8014434:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
        lv_page_set_scrl_fit(ta, false, true);
 8014438:	2201      	movs	r2, #1
        lv_style_t * style_ta = lv_obj_get_style(ta);
 801443a:	4607      	mov	r7, r0
        ext->one_line = 0;
 801443c:	f366 0341 	bfi	r3, r6, #1, #1
        lv_page_set_scrl_fit(ta, false, true);
 8014440:	4631      	mov	r1, r6
 8014442:	4620      	mov	r0, r4
        ext->one_line = 0;
 8014444:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        lv_page_set_scrl_fit(ta, false, true);
 8014448:	f7ff fe42 	bl	80140d0 <lv_page_set_scrl_fit>
        lv_label_set_long_mode(ext->label, LV_LABEL_LONG_BREAK);
 801444c:	2101      	movs	r1, #1
 801444e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8014450:	f7fd fcc2 	bl	8011dd8 <lv_label_set_long_mode>
        lv_obj_set_height(ta, LV_TA_DEF_HEIGHT);
 8014454:	2164      	movs	r1, #100	; 0x64
 8014456:	4620      	mov	r0, r4
 8014458:	f7f4 f979 	bl	800874e <lv_obj_set_height>
        lv_obj_set_pos(lv_page_get_scrl(ta), style_ta->body.padding.hor, style_ta->body.padding.ver);
 801445c:	4620      	mov	r0, r4
 801445e:	f7fe feaa 	bl	80131b6 <lv_page_get_scrl>
 8014462:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014466:	f9b7 1022 	ldrsh.w	r1, [r7, #34]	; 0x22
 801446a:	e7dd      	b.n	8014428 <lv_ta_set_one_line+0x7e>
 801446c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014470 <lv_ta_set_style>:
{
 8014470:	b570      	push	{r4, r5, r6, lr}
 8014472:	460e      	mov	r6, r1
 8014474:	4604      	mov	r4, r0
 8014476:	4615      	mov	r5, r2
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8014478:	f7f4 fcff 	bl	8008e7a <lv_obj_get_ext_attr>
    switch(type) {
 801447c:	2e01      	cmp	r6, #1
 801447e:	d00a      	beq.n	8014496 <lv_ta_set_style+0x26>
 8014480:	d302      	bcc.n	8014488 <lv_ta_set_style+0x18>
 8014482:	2e02      	cmp	r6, #2
 8014484:	d00a      	beq.n	801449c <lv_ta_set_style+0x2c>
 8014486:	bd70      	pop	{r4, r5, r6, pc}
            lv_page_set_style(ta, LV_PAGE_STYLE_BG, style);
 8014488:	462a      	mov	r2, r5
 801448a:	2100      	movs	r1, #0
            lv_page_set_style(ta, LV_PAGE_STYLE_SB, style);
 801448c:	4620      	mov	r0, r4
}
 801448e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_page_set_style(ta, LV_PAGE_STYLE_SB, style);
 8014492:	f7fe be62 	b.w	801315a <lv_page_set_style>
 8014496:	462a      	mov	r2, r5
 8014498:	2102      	movs	r1, #2
 801449a:	e7f7      	b.n	801448c <lv_ta_set_style+0x1c>
            ext->cursor.style = style;
 801449c:	63c5      	str	r5, [r0, #60]	; 0x3c
            lv_obj_refresh_ext_size(lv_page_get_scrl(ta)); /*Refresh ext. size because of cursor drawing*/
 801449e:	4620      	mov	r0, r4
 80144a0:	f7fe fe89 	bl	80131b6 <lv_page_get_scrl>
}
 80144a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_obj_refresh_ext_size(lv_page_get_scrl(ta)); /*Refresh ext. size because of cursor drawing*/
 80144a8:	f7f4 baf1 	b.w	8008a8e <lv_obj_refresh_ext_size>

080144ac <lv_ta_create>:
{
 80144ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144b0:	b08a      	sub	sp, #40	; 0x28
 80144b2:	460f      	mov	r7, r1
    lv_obj_t * new_ta = lv_page_create(par, copy);
 80144b4:	f7fe fea2 	bl	80131fc <lv_page_create>
    lv_mem_assert(new_ta);
 80144b8:	4605      	mov	r5, r0
 80144ba:	b900      	cbnz	r0, 80144be <lv_ta_create+0x12>
 80144bc:	e7fe      	b.n	80144bc <lv_ta_create+0x10>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_ta);
 80144be:	4c74      	ldr	r4, [pc, #464]	; (8014690 <lv_ta_create+0x1e4>)
 80144c0:	6823      	ldr	r3, [r4, #0]
 80144c2:	b913      	cbnz	r3, 80144ca <lv_ta_create+0x1e>
 80144c4:	f7f4 fcd5 	bl	8008e72 <lv_obj_get_signal_func>
 80144c8:	6020      	str	r0, [r4, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_func(new_ta);
 80144ca:	4c72      	ldr	r4, [pc, #456]	; (8014694 <lv_ta_create+0x1e8>)
 80144cc:	6823      	ldr	r3, [r4, #0]
 80144ce:	b91b      	cbnz	r3, 80144d8 <lv_ta_create+0x2c>
 80144d0:	4628      	mov	r0, r5
 80144d2:	f7f4 fcd0 	bl	8008e76 <lv_obj_get_design_func>
 80144d6:	6020      	str	r0, [r4, #0]
    if(scrl_signal == NULL) scrl_signal = lv_obj_get_signal_func(lv_page_get_scrl(new_ta));
 80144d8:	4c6f      	ldr	r4, [pc, #444]	; (8014698 <lv_ta_create+0x1ec>)
 80144da:	6823      	ldr	r3, [r4, #0]
 80144dc:	b92b      	cbnz	r3, 80144ea <lv_ta_create+0x3e>
 80144de:	4628      	mov	r0, r5
 80144e0:	f7fe fe69 	bl	80131b6 <lv_page_get_scrl>
 80144e4:	f7f4 fcc5 	bl	8008e72 <lv_obj_get_signal_func>
 80144e8:	6020      	str	r0, [r4, #0]
    if(scrl_design == NULL) scrl_design = lv_obj_get_design_func(lv_page_get_scrl(new_ta));
 80144ea:	4c6c      	ldr	r4, [pc, #432]	; (801469c <lv_ta_create+0x1f0>)
 80144ec:	6823      	ldr	r3, [r4, #0]
 80144ee:	b92b      	cbnz	r3, 80144fc <lv_ta_create+0x50>
 80144f0:	4628      	mov	r0, r5
 80144f2:	f7fe fe60 	bl	80131b6 <lv_page_get_scrl>
 80144f6:	f7f4 fcbe 	bl	8008e76 <lv_obj_get_design_func>
 80144fa:	6020      	str	r0, [r4, #0]
    lv_ta_ext_t * ext = lv_obj_allocate_ext_attr(new_ta, sizeof(lv_ta_ext_t));
 80144fc:	2148      	movs	r1, #72	; 0x48
 80144fe:	4628      	mov	r0, r5
 8014500:	f7f4 fabe 	bl	8008a80 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 8014504:	4604      	mov	r4, r0
 8014506:	b900      	cbnz	r0, 801450a <lv_ta_create+0x5e>
 8014508:	e7fe      	b.n	8014508 <lv_ta_create+0x5c>
    ext->cursor.state = 1;
 801450a:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
    ext->pwd_tmp = NULL;
 801450e:	2300      	movs	r3, #0
    ext->pwd_mode = 0;
 8014510:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
    ext->cursor.type = LV_CURSOR_LINE;
 8014514:	f04f 0801 	mov.w	r8, #1
 8014518:	f041 0104 	orr.w	r1, r1, #4
    ext->pwd_tmp = NULL;
 801451c:	6303      	str	r3, [r0, #48]	; 0x30
    ext->one_line = 0;
 801451e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    ext->accapted_chars = NULL;
 8014522:	6343      	str	r3, [r0, #52]	; 0x34
    ext->cursor.type = LV_CURSOR_LINE;
 8014524:	f368 0101 	bfi	r1, r8, #0, #2
    ext->max_length = 0;
 8014528:	8703      	strh	r3, [r0, #56]	; 0x38
    ext->one_line = 0;
 801452a:	f363 0241 	bfi	r2, r3, #1, #1
    ext->cursor.style = NULL;
 801452e:	63c3      	str	r3, [r0, #60]	; 0x3c
    ext->cursor.pos = 0;
 8014530:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
    ext->cursor.valid_x = 0;
 8014534:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    ext->one_line = 0;
 8014538:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    ext->label = NULL;
 801453c:	62c3      	str	r3, [r0, #44]	; 0x2c
    ext->cursor.type = LV_CURSOR_LINE;
 801453e:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
    lv_obj_set_signal_func(new_ta, lv_ta_signal);
 8014542:	4628      	mov	r0, r5
 8014544:	4956      	ldr	r1, [pc, #344]	; (80146a0 <lv_ta_create+0x1f4>)
 8014546:	f7f4 fa97 	bl	8008a78 <lv_obj_set_signal_func>
    lv_obj_set_signal_func(lv_page_get_scrl(new_ta), lv_ta_scrollable_signal);
 801454a:	4628      	mov	r0, r5
 801454c:	f7fe fe33 	bl	80131b6 <lv_page_get_scrl>
 8014550:	4954      	ldr	r1, [pc, #336]	; (80146a4 <lv_ta_create+0x1f8>)
 8014552:	f7f4 fa91 	bl	8008a78 <lv_obj_set_signal_func>
    lv_obj_set_design_func(new_ta, lv_ta_design);
 8014556:	4954      	ldr	r1, [pc, #336]	; (80146a8 <lv_ta_create+0x1fc>)
 8014558:	4628      	mov	r0, r5
 801455a:	f7f4 fa8f 	bl	8008a7c <lv_obj_set_design_func>
    if(copy == NULL) {
 801455e:	2f00      	cmp	r7, #0
 8014560:	d156      	bne.n	8014610 <lv_ta_create+0x164>
        ext->label = lv_label_create(new_ta, NULL);
 8014562:	4639      	mov	r1, r7
 8014564:	4628      	mov	r0, r5
 8014566:	f7fd fc87 	bl	8011e78 <lv_label_create>
        lv_obj_set_design_func(ext->page.scrl, lv_ta_scrollable_design);
 801456a:	4950      	ldr	r1, [pc, #320]	; (80146ac <lv_ta_create+0x200>)
        ext->label = lv_label_create(new_ta, NULL);
 801456c:	62e0      	str	r0, [r4, #44]	; 0x2c
        lv_obj_set_design_func(ext->page.scrl, lv_ta_scrollable_design);
 801456e:	6860      	ldr	r0, [r4, #4]
 8014570:	f7f4 fa84 	bl	8008a7c <lv_obj_set_design_func>
        lv_label_set_long_mode(ext->label, LV_LABEL_LONG_BREAK);
 8014574:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8014576:	4641      	mov	r1, r8
 8014578:	f7fd fc2e 	bl	8011dd8 <lv_label_set_long_mode>
        lv_label_set_text(ext->label, "Text area");
 801457c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801457e:	494c      	ldr	r1, [pc, #304]	; (80146b0 <lv_ta_create+0x204>)
 8014580:	f7fd fbd6 	bl	8011d30 <lv_label_set_text>
        lv_obj_set_click(ext->label, false);
 8014584:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8014586:	4639      	mov	r1, r7
 8014588:	f7f4 fa46 	bl	8008a18 <lv_obj_set_click>
        lv_obj_set_size(new_ta, LV_TA_DEF_WIDTH, LV_TA_DEF_HEIGHT);
 801458c:	2264      	movs	r2, #100	; 0x64
 801458e:	21c8      	movs	r1, #200	; 0xc8
 8014590:	4628      	mov	r0, r5
 8014592:	f7f4 f8a2 	bl	80086da <lv_obj_set_size>
 * @param ta pointer to a text area object
 * @param sb_mode the new mode from 'lv_page_sb_mode_t' enum
 */
static inline void lv_ta_set_sb_mode(lv_obj_t * ta, lv_sb_mode_t mode)
{
    lv_page_set_sb_mode(ta, mode);
 8014596:	2102      	movs	r1, #2
 8014598:	4628      	mov	r0, r5
 801459a:	f7fe fda1 	bl	80130e0 <lv_page_set_sb_mode>
        lv_page_set_style(new_ta, LV_PAGE_STYLE_SCRL, &lv_style_transp_tight);
 801459e:	4a45      	ldr	r2, [pc, #276]	; (80146b4 <lv_ta_create+0x208>)
 80145a0:	4641      	mov	r1, r8
 80145a2:	4628      	mov	r0, r5
 80145a4:	f7fe fdd9 	bl	801315a <lv_page_set_style>
        lv_theme_t * th = lv_theme_get_current();
 80145a8:	f001 fa64 	bl	8015a74 <lv_theme_get_current>
        if(th) {
 80145ac:	4604      	mov	r4, r0
 80145ae:	b360      	cbz	r0, 801460a <lv_ta_create+0x15e>
            lv_ta_set_style(new_ta, LV_TA_STYLE_BG, th->ta.area);
 80145b0:	f8d0 20d0 	ldr.w	r2, [r0, #208]	; 0xd0
 80145b4:	4639      	mov	r1, r7
 80145b6:	4628      	mov	r0, r5
 80145b8:	f7ff ff5a 	bl	8014470 <lv_ta_set_style>
            lv_ta_set_style(new_ta, LV_TA_STYLE_SB, th->ta.sb);
 80145bc:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
 80145c0:	4641      	mov	r1, r8
            lv_ta_set_style(new_ta, LV_TA_STYLE_BG, &lv_style_pretty);
 80145c2:	4628      	mov	r0, r5
 80145c4:	f7ff ff54 	bl	8014470 <lv_ta_set_style>
    a.fp = (lv_anim_fp_t)cursor_blink_anim;
 80145c8:	4b3b      	ldr	r3, [pc, #236]	; (80146b8 <lv_ta_create+0x20c>)
    a.start = 1;
 80145ca:	2201      	movs	r2, #1
    lv_anim_create(&a);
 80145cc:	a801      	add	r0, sp, #4
    a.var = new_ta;
 80145ce:	9501      	str	r5, [sp, #4]
    a.fp = (lv_anim_fp_t)cursor_blink_anim;
 80145d0:	9302      	str	r3, [sp, #8]
    a.time = LV_TA_CURSOR_BLINK_TIME;
 80145d2:	f44f 73c8 	mov.w	r3, #400	; 0x190
    a.start = 1;
 80145d6:	9205      	str	r2, [sp, #20]
    a.time = LV_TA_CURSOR_BLINK_TIME;
 80145d8:	f8ad 301c 	strh.w	r3, [sp, #28]
    a.act_time = 0;
 80145dc:	2300      	movs	r3, #0
    a.repeat = 1;
 80145de:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    a.act_time = 0;
 80145e2:	f8ad 301e 	strh.w	r3, [sp, #30]
    a.end_cb = NULL;
 80145e6:	9303      	str	r3, [sp, #12]
    a.playback = 1;
 80145e8:	f042 0203 	orr.w	r2, r2, #3
    a.end = 0;
 80145ec:	9306      	str	r3, [sp, #24]
    a.repeat_pause = 0;
 80145ee:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    a.playback_pause = 0;
 80145f2:	f8ad 3020 	strh.w	r3, [sp, #32]
    a.path = lv_anim_path_step;
 80145f6:	4b31      	ldr	r3, [pc, #196]	; (80146bc <lv_ta_create+0x210>)
    a.playback = 1;
 80145f8:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
    a.path = lv_anim_path_step;
 80145fc:	9304      	str	r3, [sp, #16]
    lv_anim_create(&a);
 80145fe:	f7f9 f86b 	bl	800d6d8 <lv_anim_create>
}
 8014602:	4628      	mov	r0, r5
 8014604:	b00a      	add	sp, #40	; 0x28
 8014606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            lv_ta_set_style(new_ta, LV_TA_STYLE_BG, &lv_style_pretty);
 801460a:	4a2d      	ldr	r2, [pc, #180]	; (80146c0 <lv_ta_create+0x214>)
 801460c:	4639      	mov	r1, r7
 801460e:	e7d8      	b.n	80145c2 <lv_ta_create+0x116>
        lv_obj_set_design_func(ext->page.scrl, lv_ta_scrollable_design);
 8014610:	4926      	ldr	r1, [pc, #152]	; (80146ac <lv_ta_create+0x200>)
 8014612:	6860      	ldr	r0, [r4, #4]
 8014614:	f7f4 fa32 	bl	8008a7c <lv_obj_set_design_func>
        lv_ta_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8014618:	4638      	mov	r0, r7
 801461a:	f7f4 fc2e 	bl	8008e7a <lv_obj_get_ext_attr>
 801461e:	4606      	mov	r6, r0
        ext->label = lv_label_create(new_ta, copy_ext->label);
 8014620:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8014622:	4628      	mov	r0, r5
 8014624:	f7fd fc28 	bl	8011e78 <lv_label_create>
        ext->pwd_mode = copy_ext->pwd_mode;
 8014628:	f896 203a 	ldrb.w	r2, [r6, #58]	; 0x3a
 801462c:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
        ext->label = lv_label_create(new_ta, copy_ext->label);
 8014630:	62e0      	str	r0, [r4, #44]	; 0x2c
        ext->pwd_mode = copy_ext->pwd_mode;
 8014632:	f362 0300 	bfi	r3, r2, #0, #1
 8014636:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        ext->accapted_chars = copy_ext->accapted_chars;
 801463a:	6b73      	ldr	r3, [r6, #52]	; 0x34
        ext->cursor.type = copy_ext->cursor.type;
 801463c:	f896 2044 	ldrb.w	r2, [r6, #68]	; 0x44
        ext->accapted_chars = copy_ext->accapted_chars;
 8014640:	6363      	str	r3, [r4, #52]	; 0x34
        ext->max_length = copy_ext->max_length;
 8014642:	8f33      	ldrh	r3, [r6, #56]	; 0x38
 8014644:	8723      	strh	r3, [r4, #56]	; 0x38
        ext->cursor.style = copy_ext->cursor.style;
 8014646:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8014648:	63e3      	str	r3, [r4, #60]	; 0x3c
        ext->cursor.pos = copy_ext->cursor.pos;
 801464a:	f8b6 3042 	ldrh.w	r3, [r6, #66]	; 0x42
 801464e:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
        ext->cursor.valid_x = copy_ext->cursor.valid_x;
 8014652:	f9b6 3040 	ldrsh.w	r3, [r6, #64]	; 0x40
 8014656:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
        ext->cursor.type = copy_ext->cursor.type;
 801465a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801465e:	f362 0301 	bfi	r3, r2, #0, #2
 8014662:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        if(copy_ext->one_line) lv_ta_set_one_line(new_ta, true);
 8014666:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
 801466a:	079b      	lsls	r3, r3, #30
 801466c:	d503      	bpl.n	8014676 <lv_ta_create+0x1ca>
 801466e:	4641      	mov	r1, r8
 8014670:	4628      	mov	r0, r5
 8014672:	f7ff fe9a 	bl	80143aa <lv_ta_set_one_line>
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8014676:	4638      	mov	r0, r7
 8014678:	f7f4 fbff 	bl	8008e7a <lv_obj_get_ext_attr>
        lv_ta_set_style(new_ta, LV_TA_STYLE_CURSOR, lv_ta_get_style(copy, LV_TA_STYLE_CURSOR));
 801467c:	2102      	movs	r1, #2
 801467e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8014680:	4628      	mov	r0, r5
 8014682:	f7ff fef5 	bl	8014470 <lv_ta_set_style>
        lv_obj_refresh_style(new_ta);
 8014686:	4628      	mov	r0, r5
 8014688:	f7f4 f9b8 	bl	80089fc <lv_obj_refresh_style>
 801468c:	e79c      	b.n	80145c8 <lv_ta_create+0x11c>
 801468e:	bf00      	nop
 8014690:	20017448 	.word	0x20017448
 8014694:	20017444 	.word	0x20017444
 8014698:	20017450 	.word	0x20017450
 801469c:	2001744c 	.word	0x2001744c
 80146a0:	08014e55 	.word	0x08014e55
 80146a4:	08014111 	.word	0x08014111
 80146a8:	080140e9 	.word	0x080140e9
 80146ac:	080146ed 	.word	0x080146ed
 80146b0:	08087ff7 	.word	0x08087ff7
 80146b4:	20017ce8 	.word	0x20017ce8
 80146b8:	0801404b 	.word	0x0801404b
 80146bc:	0800d775 	.word	0x0800d775
 80146c0:	20017ca0 	.word	0x20017ca0

080146c4 <lv_ta_get_text>:
{
 80146c4:	b508      	push	{r3, lr}
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 80146c6:	f7f4 fbd8 	bl	8008e7a <lv_obj_get_ext_attr>
    if(ext->pwd_mode == 0) {
 80146ca:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80146ce:	07db      	lsls	r3, r3, #31
 80146d0:	d404      	bmi.n	80146dc <lv_ta_get_text+0x18>
        txt = lv_label_get_text(ext->label);
 80146d2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
 80146d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        txt = lv_label_get_text(ext->label);
 80146d8:	f7fc bf5f 	b.w	801159a <lv_label_get_text>
}
 80146dc:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80146de:	bd08      	pop	{r3, pc}

080146e0 <lv_ta_get_cursor_pos>:
{
 80146e0:	b508      	push	{r3, lr}
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 80146e2:	f7f4 fbca 	bl	8008e7a <lv_obj_get_ext_attr>
}
 80146e6:	f8b0 0042 	ldrh.w	r0, [r0, #66]	; 0x42
 80146ea:	bd08      	pop	{r3, pc}

080146ec <lv_ta_scrollable_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 80146ec:	2a02      	cmp	r2, #2
{
 80146ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146f2:	4604      	mov	r4, r0
 80146f4:	b0a1      	sub	sp, #132	; 0x84
 80146f6:	4688      	mov	r8, r1
 80146f8:	4617      	mov	r7, r2
    if(mode == LV_DESIGN_COVER_CHK) {
 80146fa:	d105      	bne.n	8014708 <lv_ta_scrollable_design+0x1c>
        return scrl_design(scrl, mask, mode);
 80146fc:	4bb5      	ldr	r3, [pc, #724]	; (80149d4 <lv_ta_scrollable_design+0x2e8>)
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	4798      	blx	r3
}
 8014702:	b021      	add	sp, #132	; 0x84
 8014704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 8014708:	b922      	cbnz	r2, 8014714 <lv_ta_scrollable_design+0x28>
        scrl_design(scrl, mask, mode);
 801470a:	4bb2      	ldr	r3, [pc, #712]	; (80149d4 <lv_ta_scrollable_design+0x2e8>)
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	4798      	blx	r3
    return true;
 8014710:	2001      	movs	r0, #1
 8014712:	e7f6      	b.n	8014702 <lv_ta_scrollable_design+0x16>
    } else if(mode == LV_DESIGN_DRAW_POST) {
 8014714:	2a01      	cmp	r2, #1
 8014716:	d1fb      	bne.n	8014710 <lv_ta_scrollable_design+0x24>
        scrl_design(scrl, mask, mode);
 8014718:	4bae      	ldr	r3, [pc, #696]	; (80149d4 <lv_ta_scrollable_design+0x2e8>)
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	4798      	blx	r3
        lv_obj_t * ta = lv_obj_get_parent(scrl);
 801471e:	4620      	mov	r0, r4
 8014720:	f7f4 fa4e 	bl	8008bc0 <lv_obj_get_parent>
 8014724:	4682      	mov	sl, r0
        lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8014726:	f7f4 fba8 	bl	8008e7a <lv_obj_get_ext_attr>
 801472a:	4604      	mov	r4, r0
        lv_style_t * label_style = lv_obj_get_style(ext->label);
 801472c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801472e:	f7f4 fad9 	bl	8008ce4 <lv_obj_get_style>
 8014732:	4605      	mov	r5, r0
        lv_opa_t opa_scale = lv_obj_get_opa_scale(ta);
 8014734:	4650      	mov	r0, sl
 8014736:	f7f4 fb40 	bl	8008dba <lv_obj_get_opa_scale>
        if(ext->cursor.type == LV_CURSOR_NONE ||
 801473a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
        lv_opa_t opa_scale = lv_obj_get_opa_scale(ta);
 801473e:	4681      	mov	r9, r0
        if(ext->cursor.type == LV_CURSOR_NONE ||
 8014740:	0798      	lsls	r0, r3, #30
 8014742:	d0e5      	beq.n	8014710 <lv_ta_scrollable_design+0x24>
                (ext->cursor.type & LV_CURSOR_HIDDEN) ||
 8014744:	0759      	lsls	r1, r3, #29
 8014746:	d5e3      	bpl.n	8014710 <lv_ta_scrollable_design+0x24>
                ext->cursor.state == 0 ||
 8014748:	7bab      	ldrb	r3, [r5, #14]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d0e0      	beq.n	8014710 <lv_ta_scrollable_design+0x24>
        if(ext->cursor.style != NULL) {
 801474e:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 8014750:	2e00      	cmp	r6, #0
 8014752:	f000 80a1 	beq.w	8014898 <lv_ta_scrollable_design+0x1ac>
            lv_style_copy(&cur_style, ext->cursor.style);
 8014756:	4631      	mov	r1, r6
 8014758:	a80e      	add	r0, sp, #56	; 0x38
 801475a:	f7f4 ffeb 	bl	8009734 <lv_style_copy>
        uint16_t cur_pos = lv_ta_get_cursor_pos(ta);
 801475e:	4650      	mov	r0, sl
 8014760:	f7ff ffbe 	bl	80146e0 <lv_ta_get_cursor_pos>
 8014764:	4683      	mov	fp, r0
        const char * txt = lv_label_get_text(ext->label);
 8014766:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8014768:	f7fc ff17 	bl	801159a <lv_label_get_text>
        byte_pos = lv_txt_encoded_get_byte_id(txt, cur_pos);
 801476c:	4b9a      	ldr	r3, [pc, #616]	; (80149d8 <lv_ta_scrollable_design+0x2ec>)
 801476e:	4659      	mov	r1, fp
        const char * txt = lv_label_get_text(ext->label);
 8014770:	9005      	str	r0, [sp, #20]
        byte_pos = lv_txt_encoded_get_byte_id(txt, cur_pos);
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	4798      	blx	r3
        uint32_t letter = lv_txt_encoded_next(&txt[byte_pos], NULL);
 8014776:	9b05      	ldr	r3, [sp, #20]
 8014778:	2100      	movs	r1, #0
        byte_pos = lv_txt_encoded_get_byte_id(txt, cur_pos);
 801477a:	4607      	mov	r7, r0
        uint32_t letter = lv_txt_encoded_next(&txt[byte_pos], NULL);
 801477c:	4403      	add	r3, r0
 801477e:	9306      	str	r3, [sp, #24]
 8014780:	4b96      	ldr	r3, [pc, #600]	; (80149dc <lv_ta_scrollable_design+0x2f0>)
 8014782:	9806      	ldr	r0, [sp, #24]
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	4798      	blx	r3
 8014788:	4682      	mov	sl, r0
        lv_coord_t letter_h = lv_font_get_height(label_style->text.font);
 801478a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
        if(letter == '\0' || letter == '\n' || letter == '\r') {
 801478c:	f1ba 0f0d 	cmp.w	sl, #13
 8014790:	f890 6020 	ldrb.w	r6, [r0, #32]
 8014794:	bf97      	itett	ls
 8014796:	f242 4301 	movwls	r3, #9217	; 0x2401
 801479a:	2301      	movhi	r3, #1
 801479c:	fa23 f30a 	lsrls.w	r3, r3, sl
 80147a0:	43db      	mvnls	r3, r3
 80147a2:	07da      	lsls	r2, r3, #31
            letter_w = lv_font_get_width(label_style->text.font, ' ');
 80147a4:	bf54      	ite	pl
 80147a6:	2120      	movpl	r1, #32
            letter_w = lv_font_get_width(label_style->text.font, letter);
 80147a8:	4651      	movmi	r1, sl
 80147aa:	f7f9 f911 	bl	800d9d0 <lv_font_get_width>
        lv_label_get_letter_pos(ext->label, cur_pos, &letter_pos);
 80147ae:	4659      	mov	r1, fp
            letter_w = lv_font_get_width(label_style->text.font, letter);
 80147b0:	b203      	sxth	r3, r0
        lv_label_get_letter_pos(ext->label, cur_pos, &letter_pos);
 80147b2:	aa09      	add	r2, sp, #36	; 0x24
 80147b4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80147b6:	9307      	str	r3, [sp, #28]
 80147b8:	f7fc ff0e 	bl	80115d8 <lv_label_get_letter_pos>
        if(ext->one_line && letter_pos.y > letter_h) return true;
 80147bc:	f894 b03a 	ldrb.w	fp, [r4, #58]	; 0x3a
 80147c0:	9b07      	ldr	r3, [sp, #28]
 80147c2:	f01b 0b02 	ands.w	fp, fp, #2
 80147c6:	d003      	beq.n	80147d0 <lv_ta_scrollable_design+0xe4>
 80147c8:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 80147cc:	42b2      	cmp	r2, r6
 80147ce:	dc9f      	bgt.n	8014710 <lv_ta_scrollable_design+0x24>
        if(letter_pos.x + ext->label->coords.x1 + letter_w > ext->label->coords.x2 && ext->one_line == 0) {
 80147d0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80147d2:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 80147d6:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
 80147da:	f9b1 1014 	ldrsh.w	r1, [r1, #20]
 80147de:	4402      	add	r2, r0
 80147e0:	441a      	add	r2, r3
 80147e2:	428a      	cmp	r2, r1
 80147e4:	dd28      	ble.n	8014838 <lv_ta_scrollable_design+0x14c>
 80147e6:	f1bb 0f00 	cmp.w	fp, #0
 80147ea:	d125      	bne.n	8014838 <lv_ta_scrollable_design+0x14c>
            letter_pos.y += letter_h + label_style->text.line_space;
 80147ec:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80147f0:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
            letter_pos.x = 0;
 80147f2:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
            letter_pos.y += letter_h + label_style->text.line_space;
 80147f6:	4413      	add	r3, r2
 80147f8:	4433      	add	r3, r6
 80147fa:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
            if(letter != '\0') {
 80147fe:	f1ba 0f00 	cmp.w	sl, #0
 8014802:	d014      	beq.n	801482e <lv_ta_scrollable_design+0x142>
                byte_pos += lv_txt_encoded_size(&txt[byte_pos]);
 8014804:	4b76      	ldr	r3, [pc, #472]	; (80149e0 <lv_ta_scrollable_design+0x2f4>)
 8014806:	9806      	ldr	r0, [sp, #24]
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	4798      	blx	r3
                letter = lv_txt_encoded_next(&txt[byte_pos], NULL);
 801480c:	9a05      	ldr	r2, [sp, #20]
                byte_pos += lv_txt_encoded_size(&txt[byte_pos]);
 801480e:	4407      	add	r7, r0
                letter = lv_txt_encoded_next(&txt[byte_pos], NULL);
 8014810:	4b72      	ldr	r3, [pc, #456]	; (80149dc <lv_ta_scrollable_design+0x2f0>)
 8014812:	4659      	mov	r1, fp
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	19d0      	adds	r0, r2, r7
 8014818:	4798      	blx	r3
            if(letter == '\0' || letter == '\n' || letter == '\r') {
 801481a:	280d      	cmp	r0, #13
                letter = lv_txt_encoded_next(&txt[byte_pos], NULL);
 801481c:	4601      	mov	r1, r0
            if(letter == '\0' || letter == '\n' || letter == '\r') {
 801481e:	bf97      	itett	ls
 8014820:	f242 4301 	movwls	r3, #9217	; 0x2401
 8014824:	2301      	movhi	r3, #1
 8014826:	40c3      	lsrls	r3, r0
 8014828:	43db      	mvnls	r3, r3
 801482a:	07db      	lsls	r3, r3, #31
 801482c:	d400      	bmi.n	8014830 <lv_ta_scrollable_design+0x144>
                letter_w = lv_font_get_width(label_style->text.font, ' ');
 801482e:	2120      	movs	r1, #32
                letter_w = lv_font_get_width(label_style->text.font, letter);
 8014830:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8014832:	f7f9 f8cd 	bl	800d9d0 <lv_font_get_width>
 8014836:	b203      	sxth	r3, r0
        if(ext->cursor.type == LV_CURSOR_LINE) {
 8014838:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 801483c:	f002 0203 	and.w	r2, r2, #3
 8014840:	2a01      	cmp	r2, #1
 8014842:	d14b      	bne.n	80148dc <lv_ta_scrollable_design+0x1f0>
            cur_area.x1 = letter_pos.x + ext->label->coords.x1 + cur_style.body.padding.hor - (cur_style.line.width >> 1) - (cur_style.line.width & 0x1);
 8014844:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8014846:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
 801484a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801484e:	441a      	add	r2, r3
 8014850:	8a03      	ldrh	r3, [r0, #16]
 8014852:	441a      	add	r2, r3
 8014854:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 8014858:	b292      	uxth	r2, r2
 801485a:	f3c3 044f 	ubfx	r4, r3, #1, #16
 801485e:	f003 0301 	and.w	r3, r3, #1
 8014862:	1b11      	subs	r1, r2, r4
            cur_area.x2 = letter_pos.x + ext->label->coords.x1 + cur_style.body.padding.hor + (cur_style.line.width >> 1);
 8014864:	4422      	add	r2, r4
            cur_area.x1 = letter_pos.x + ext->label->coords.x1 + cur_style.body.padding.hor - (cur_style.line.width >> 1) - (cur_style.line.width & 0x1);
 8014866:	1acb      	subs	r3, r1, r3
            cur_area.y1 = letter_pos.y + ext->label->coords.y1 + cur_style.body.padding.ver;
 8014868:	f8bd 1058 	ldrh.w	r1, [sp, #88]	; 0x58
            cur_area.x2 = letter_pos.x + ext->label->coords.x1 + cur_style.body.padding.hor + (cur_style.line.width >> 1);
 801486c:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
            cur_area.x1 = letter_pos.x + ext->label->coords.x1 + cur_style.body.padding.hor - (cur_style.line.width >> 1) - (cur_style.line.width & 0x1);
 8014870:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            cur_area.y1 = letter_pos.y + ext->label->coords.y1 + cur_style.body.padding.ver;
 8014874:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8014878:	440b      	add	r3, r1
 801487a:	8a41      	ldrh	r1, [r0, #18]
 801487c:	440b      	add	r3, r1
 801487e:	b29b      	uxth	r3, r3
            cur_area.y2 = letter_pos.y + ext->label->coords.y1 + cur_style.body.padding.ver + letter_h;
 8014880:	441e      	add	r6, r3
            cur_area.y1 = letter_pos.y + ext->label->coords.y1 + cur_style.body.padding.ver;
 8014882:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
            cur_area.y2 = letter_pos.y + ext->label->coords.y1 + cur_style.body.padding.ver + letter_h;
 8014886:	f8ad 602e 	strh.w	r6, [sp, #46]	; 0x2e
            lv_draw_rect(&cur_area, mask, &cur_style, opa_scale);
 801488a:	464b      	mov	r3, r9
 801488c:	aa0e      	add	r2, sp, #56	; 0x38
 801488e:	4641      	mov	r1, r8
 8014890:	a80a      	add	r0, sp, #40	; 0x28
 8014892:	f7f6 f8fb 	bl	800aa8c <lv_draw_rect>
 8014896:	e73b      	b.n	8014710 <lv_ta_scrollable_design+0x24>
            lv_style_copy(&cur_style, label_style);
 8014898:	4629      	mov	r1, r5
 801489a:	a80e      	add	r0, sp, #56	; 0x38
 801489c:	f7f4 ff4a 	bl	8009734 <lv_style_copy>
            cur_style.text.color = cur_style.body.main_color;       /*In block mode the letter color will be current background color*/
 80148a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
            lv_color_t clv_color_tmp = cur_style.text.color;        /*Make letter color to cursor color*/
 80148a2:	9b18      	ldr	r3, [sp, #96]	; 0x60
            cur_style.text.color = cur_style.body.main_color;       /*In block mode the letter color will be current background color*/
 80148a4:	9218      	str	r2, [sp, #96]	; 0x60
            cur_style.body.empty = 0;
 80148a6:	f89d 205e 	ldrb.w	r2, [sp, #94]	; 0x5e
            cur_style.body.main_color = clv_color_tmp;
 80148aa:	930f      	str	r3, [sp, #60]	; 0x3c
            cur_style.body.grad_color = clv_color_tmp;
 80148ac:	9310      	str	r3, [sp, #64]	; 0x40
            cur_style.body.empty = 0;
 80148ae:	f366 0200 	bfi	r2, r6, #0, #1
            cur_style.body.border.color = clv_color_tmp;
 80148b2:	9312      	str	r3, [sp, #72]	; 0x48
            cur_style.body.border.opa = LV_OPA_COVER;
 80148b4:	23ff      	movs	r3, #255	; 0xff
            cur_style.body.border.width = 1;
 80148b6:	f8ad 704c 	strh.w	r7, [sp, #76]	; 0x4c
            cur_style.body.border.opa = LV_OPA_COVER;
 80148ba:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
            cur_style.body.shadow.width = 0;
 80148be:	f8ad 6054 	strh.w	r6, [sp, #84]	; 0x54
            cur_style.body.radius = 0;
 80148c2:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
            cur_style.body.empty = 0;
 80148c6:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
            cur_style.body.padding.hor = 0;
 80148ca:	f8ad 605a 	strh.w	r6, [sp, #90]	; 0x5a
            cur_style.body.padding.ver = 0;
 80148ce:	f8ad 6058 	strh.w	r6, [sp, #88]	; 0x58
            cur_style.line.width = 1;
 80148d2:	f8ad 707c 	strh.w	r7, [sp, #124]	; 0x7c
            cur_style.body.opa = LV_OPA_COVER;
 80148d6:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 80148da:	e740      	b.n	801475e <lv_ta_scrollable_design+0x72>
        } else if(ext->cursor.type == LV_CURSOR_BLOCK) {
 80148dc:	2a02      	cmp	r2, #2
 80148de:	d14a      	bne.n	8014976 <lv_ta_scrollable_design+0x28a>
            cur_area.x1 = letter_pos.x + ext->label->coords.x1 - cur_style.body.padding.hor;
 80148e0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80148e2:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80148e6:	8a01      	ldrh	r1, [r0, #16]
 80148e8:	f8bd 405a 	ldrh.w	r4, [sp, #90]	; 0x5a
 80148ec:	440a      	add	r2, r1
            cur_area.y1 = letter_pos.y + ext->label->coords.y1 - cur_style.body.padding.ver;
 80148ee:	8a40      	ldrh	r0, [r0, #18]
            cur_area.x1 = letter_pos.x + ext->label->coords.x1 - cur_style.body.padding.hor;
 80148f0:	b292      	uxth	r2, r2
 80148f2:	1b11      	subs	r1, r2, r4
            cur_area.x2 = letter_pos.x + ext->label->coords.x1 + cur_style.body.padding.hor + letter_w;
 80148f4:	4422      	add	r2, r4
            char letter_buf[8] = {0};
 80148f6:	2400      	movs	r4, #0
            cur_area.x1 = letter_pos.x + ext->label->coords.x1 - cur_style.body.padding.hor;
 80148f8:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
            cur_area.x2 = letter_pos.x + ext->label->coords.x1 + cur_style.body.padding.hor + letter_w;
 80148fc:	4413      	add	r3, r2
            cur_area.y1 = letter_pos.y + ext->label->coords.y1 - cur_style.body.padding.ver;
 80148fe:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
            lv_draw_rect(&cur_area, mask, &cur_style, opa_scale);
 8014902:	aa0e      	add	r2, sp, #56	; 0x38
            cur_area.x2 = letter_pos.x + ext->label->coords.x1 + cur_style.body.padding.hor + letter_w;
 8014904:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            lv_draw_rect(&cur_area, mask, &cur_style, opa_scale);
 8014908:	464b      	mov	r3, r9
            cur_area.y1 = letter_pos.y + ext->label->coords.y1 - cur_style.body.padding.ver;
 801490a:	4401      	add	r1, r0
 801490c:	f8bd 0058 	ldrh.w	r0, [sp, #88]	; 0x58
 8014910:	b289      	uxth	r1, r1
            cur_area.y2 = letter_pos.y + ext->label->coords.y1 + cur_style.body.padding.ver + letter_h;
 8014912:	4406      	add	r6, r0
            cur_area.y1 = letter_pos.y + ext->label->coords.y1 - cur_style.body.padding.ver;
 8014914:	1a0d      	subs	r5, r1, r0
            cur_area.y2 = letter_pos.y + ext->label->coords.y1 + cur_style.body.padding.ver + letter_h;
 8014916:	4431      	add	r1, r6
            lv_draw_rect(&cur_area, mask, &cur_style, opa_scale);
 8014918:	a80a      	add	r0, sp, #40	; 0x28
            cur_area.y2 = letter_pos.y + ext->label->coords.y1 + cur_style.body.padding.ver + letter_h;
 801491a:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
            lv_draw_rect(&cur_area, mask, &cur_style, opa_scale);
 801491e:	4641      	mov	r1, r8
            cur_area.y1 = letter_pos.y + ext->label->coords.y1 - cur_style.body.padding.ver;
 8014920:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
            lv_draw_rect(&cur_area, mask, &cur_style, opa_scale);
 8014924:	f7f6 f8b2 	bl	800aa8c <lv_draw_rect>
            memcpy(letter_buf, &txt[byte_pos], lv_txt_encoded_size(&txt[byte_pos]));
 8014928:	9b05      	ldr	r3, [sp, #20]
            char letter_buf[8] = {0};
 801492a:	ad0c      	add	r5, sp, #48	; 0x30
 801492c:	940c      	str	r4, [sp, #48]	; 0x30
            memcpy(letter_buf, &txt[byte_pos], lv_txt_encoded_size(&txt[byte_pos]));
 801492e:	443b      	add	r3, r7
            char letter_buf[8] = {0};
 8014930:	940d      	str	r4, [sp, #52]	; 0x34
            memcpy(letter_buf, &txt[byte_pos], lv_txt_encoded_size(&txt[byte_pos]));
 8014932:	461f      	mov	r7, r3
 8014934:	4b2a      	ldr	r3, [pc, #168]	; (80149e0 <lv_ta_scrollable_design+0x2f4>)
 8014936:	4638      	mov	r0, r7
 8014938:	681b      	ldr	r3, [r3, #0]
 801493a:	4798      	blx	r3
 801493c:	4639      	mov	r1, r7
 801493e:	4602      	mov	r2, r0
 8014940:	4628      	mov	r0, r5
 8014942:	f001 f8eb 	bl	8015b1c <memcpy>
            cur_area.x1 += cur_style.body.padding.hor;
 8014946:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801494a:	f8bd 205a 	ldrh.w	r2, [sp, #90]	; 0x5a
            lv_draw_label(&cur_area, mask, &cur_style, opa_scale, letter_buf, LV_TXT_FLAG_NONE, 0);
 801494e:	4641      	mov	r1, r8
 8014950:	9402      	str	r4, [sp, #8]
 8014952:	a80a      	add	r0, sp, #40	; 0x28
            cur_area.x1 += cur_style.body.padding.hor;
 8014954:	4413      	add	r3, r2
            cur_area.y1 += cur_style.body.padding.ver;
 8014956:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
            lv_draw_label(&cur_area, mask, &cur_style, opa_scale, letter_buf, LV_TXT_FLAG_NONE, 0);
 801495a:	9401      	str	r4, [sp, #4]
            cur_area.x1 += cur_style.body.padding.hor;
 801495c:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            cur_area.y1 += cur_style.body.padding.ver;
 8014960:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
            lv_draw_label(&cur_area, mask, &cur_style, opa_scale, letter_buf, LV_TXT_FLAG_NONE, 0);
 8014964:	9500      	str	r5, [sp, #0]
            cur_area.y1 += cur_style.body.padding.ver;
 8014966:	4413      	add	r3, r2
            lv_draw_label(&cur_area, mask, &cur_style, opa_scale, letter_buf, LV_TXT_FLAG_NONE, 0);
 8014968:	aa0e      	add	r2, sp, #56	; 0x38
            cur_area.y1 += cur_style.body.padding.ver;
 801496a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
            lv_draw_label(&cur_area, mask, &cur_style, opa_scale, letter_buf, LV_TXT_FLAG_NONE, 0);
 801496e:	464b      	mov	r3, r9
 8014970:	f7f5 f9a8 	bl	8009cc4 <lv_draw_label>
 8014974:	e6cc      	b.n	8014710 <lv_ta_scrollable_design+0x24>
        } else if(ext->cursor.type == LV_CURSOR_OUTLINE) {
 8014976:	2a03      	cmp	r2, #3
 8014978:	f47f aeca 	bne.w	8014710 <lv_ta_scrollable_design+0x24>
            cur_area.x1 = letter_pos.x + ext->label->coords.x1 - cur_style.body.padding.hor;
 801497c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801497e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8014982:	8a01      	ldrh	r1, [r0, #16]
 8014984:	f8bd 405a 	ldrh.w	r4, [sp, #90]	; 0x5a
 8014988:	440a      	add	r2, r1
            cur_area.y1 = letter_pos.y + ext->label->coords.y1 - cur_style.body.padding.ver;
 801498a:	8a40      	ldrh	r0, [r0, #18]
            cur_area.x1 = letter_pos.x + ext->label->coords.x1 - cur_style.body.padding.hor;
 801498c:	b292      	uxth	r2, r2
 801498e:	1b11      	subs	r1, r2, r4
            cur_area.x2 = letter_pos.x + ext->label->coords.x1 + cur_style.body.padding.hor + letter_w;
 8014990:	4422      	add	r2, r4
            cur_area.x1 = letter_pos.x + ext->label->coords.x1 - cur_style.body.padding.hor;
 8014992:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
            cur_area.x2 = letter_pos.x + ext->label->coords.x1 + cur_style.body.padding.hor + letter_w;
 8014996:	4413      	add	r3, r2
            cur_area.y1 = letter_pos.y + ext->label->coords.y1 - cur_style.body.padding.ver;
 8014998:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
            cur_area.x2 = letter_pos.x + ext->label->coords.x1 + cur_style.body.padding.hor + letter_w;
 801499c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            cur_area.y1 = letter_pos.y + ext->label->coords.y1 - cur_style.body.padding.ver;
 80149a0:	4401      	add	r1, r0
            cur_style.body.empty = 1;
 80149a2:	f89d 305e 	ldrb.w	r3, [sp, #94]	; 0x5e
            cur_area.y1 = letter_pos.y + ext->label->coords.y1 - cur_style.body.padding.ver;
 80149a6:	f8bd 0058 	ldrh.w	r0, [sp, #88]	; 0x58
 80149aa:	b289      	uxth	r1, r1
            cur_style.body.empty = 1;
 80149ac:	f043 0301 	orr.w	r3, r3, #1
            cur_area.y2 = letter_pos.y + ext->label->coords.y1 + cur_style.body.padding.ver + letter_h;
 80149b0:	4406      	add	r6, r0
            cur_area.y1 = letter_pos.y + ext->label->coords.y1 - cur_style.body.padding.ver;
 80149b2:	1a0d      	subs	r5, r1, r0
            cur_style.body.empty = 1;
 80149b4:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
            cur_area.y2 = letter_pos.y + ext->label->coords.y1 + cur_style.body.padding.ver + letter_h;
 80149b8:	4431      	add	r1, r6
            if(cur_style.body.border.width == 0) cur_style.body.border.width = 1; /*Be sure the border will be drawn*/
 80149ba:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
            cur_area.y1 = letter_pos.y + ext->label->coords.y1 - cur_style.body.padding.ver;
 80149be:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
            cur_area.y2 = letter_pos.y + ext->label->coords.y1 + cur_style.body.padding.ver + letter_h;
 80149c2:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
            if(cur_style.body.border.width == 0) cur_style.body.border.width = 1; /*Be sure the border will be drawn*/
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	f47f af5f 	bne.w	801488a <lv_ta_scrollable_design+0x19e>
 80149cc:	2301      	movs	r3, #1
 80149ce:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 80149d2:	e75a      	b.n	801488a <lv_ta_scrollable_design+0x19e>
 80149d4:	2001744c 	.word	0x2001744c
 80149d8:	200000ac 	.word	0x200000ac
 80149dc:	200000b0 	.word	0x200000b0
 80149e0:	200000b8 	.word	0x200000b8

080149e4 <lv_ta_add_char>:
{
 80149e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80149e8:	b08f      	sub	sp, #60	; 0x3c
 80149ea:	4605      	mov	r5, r0
 80149ec:	9101      	str	r1, [sp, #4]
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 80149ee:	f7f4 fa44 	bl	8008e7a <lv_obj_get_ext_attr>
    if(ext->one_line && (c == '\n' || c == '\n')) {
 80149f2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 80149f6:	4604      	mov	r4, r0
    if(ext->one_line && (c == '\n' || c == '\n')) {
 80149f8:	0799      	lsls	r1, r3, #30
 80149fa:	d502      	bpl.n	8014a02 <lv_ta_add_char+0x1e>
 80149fc:	9b01      	ldr	r3, [sp, #4]
 80149fe:	2b0a      	cmp	r3, #10
 8014a00:	d03a      	beq.n	8014a78 <lv_ta_add_char+0x94>
    uint32_t c_uni = lv_txt_encoded_next((const char *)&c, NULL);
 8014a02:	4f3d      	ldr	r7, [pc, #244]	; (8014af8 <lv_ta_add_char+0x114>)
 8014a04:	2100      	movs	r1, #0
 8014a06:	a801      	add	r0, sp, #4
 8014a08:	683b      	ldr	r3, [r7, #0]
 8014a0a:	4798      	blx	r3
 8014a0c:	4681      	mov	r9, r0
 * @param c an unicode character
 * @return true: accapted; false: rejected
 */
static bool char_is_accepted(lv_obj_t * ta, uint32_t c)
{
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8014a0e:	4628      	mov	r0, r5
 8014a10:	f7f4 fa33 	bl	8008e7a <lv_obj_get_ext_attr>

    /*If no restriction accept it*/
    if(ext->accapted_chars == NULL && ext->max_length == 0) return true;
 8014a14:	6b42      	ldr	r2, [r0, #52]	; 0x34
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8014a16:	4606      	mov	r6, r0
 8014a18:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    if(ext->accapted_chars == NULL && ext->max_length == 0) return true;
 8014a1a:	b902      	cbnz	r2, 8014a1e <lv_ta_add_char+0x3a>
 8014a1c:	b113      	cbz	r3, 8014a24 <lv_ta_add_char+0x40>

    /*Too many characters?*/
    if(ext->max_length > 0 &&
 8014a1e:	bb0b      	cbnz	r3, 8014a64 <lv_ta_add_char+0x80>
            lv_txt_get_encoded_length(lv_ta_get_text(ta)) >= ext->max_length) {
        return false;
    }

    /*Accepted character?*/
    if(ext->accapted_chars) {
 8014a20:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8014a22:	bb63      	cbnz	r3, 8014a7e <lv_ta_add_char+0x9a>
    if(ext->pwd_mode != 0) pwd_char_hider(ta);  /*Make sure all the current text contains only '*'*/
 8014a24:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8014a28:	07da      	lsls	r2, r3, #31
 8014a2a:	d502      	bpl.n	8014a32 <lv_ta_add_char+0x4e>
 8014a2c:	4628      	mov	r0, r5
 8014a2e:	f7ff fb27 	bl	8014080 <pwd_char_hider>
    letter_buf[0] = c;
 8014a32:	9b01      	ldr	r3, [sp, #4]
    letter_buf[1] = '\0';
 8014a34:	2600      	movs	r6, #0
    lv_label_ins_text(ext->label, ext->cursor.pos, (const char *)letter_buf);    /*Insert the character*/
 8014a36:	aa03      	add	r2, sp, #12
 8014a38:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
 8014a3c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    letter_buf[0] = c;
 8014a3e:	9303      	str	r3, [sp, #12]
    letter_buf[1] = '\0';
 8014a40:	9604      	str	r6, [sp, #16]
    lv_label_ins_text(ext->label, ext->cursor.pos, (const char *)letter_buf);    /*Insert the character*/
 8014a42:	f7fd fac1 	bl	8011fc8 <lv_label_ins_text>
    if(ext->pwd_mode != 0) {
 8014a46:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8014a4a:	07db      	lsls	r3, r3, #31
 8014a4c:	d54b      	bpl.n	8014ae6 <lv_ta_add_char+0x102>
        ext->pwd_tmp = lv_mem_realloc(ext->pwd_tmp, strlen(ext->pwd_tmp) + 2);  /*+2: the new char + \0 */
 8014a4e:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8014a50:	4638      	mov	r0, r7
 8014a52:	f7eb fbe3 	bl	800021c <strlen>
 8014a56:	1c81      	adds	r1, r0, #2
 8014a58:	4638      	mov	r0, r7
 8014a5a:	f7f9 fa7d 	bl	800df58 <lv_mem_realloc>
 8014a5e:	6320      	str	r0, [r4, #48]	; 0x30
        lv_mem_assert(ext->pwd_tmp);
 8014a60:	b9e8      	cbnz	r0, 8014a9e <lv_ta_add_char+0xba>
 8014a62:	e7fe      	b.n	8014a62 <lv_ta_add_char+0x7e>
            lv_txt_get_encoded_length(lv_ta_get_text(ta)) >= ext->max_length) {
 8014a64:	4b25      	ldr	r3, [pc, #148]	; (8014afc <lv_ta_add_char+0x118>)
 8014a66:	4628      	mov	r0, r5
 8014a68:	f8d3 8000 	ldr.w	r8, [r3]
 8014a6c:	f7ff fe2a 	bl	80146c4 <lv_ta_get_text>
 8014a70:	47c0      	blx	r8
 8014a72:	8f33      	ldrh	r3, [r6, #56]	; 0x38
    if(ext->max_length > 0 &&
 8014a74:	4298      	cmp	r0, r3
 8014a76:	d3d3      	bcc.n	8014a20 <lv_ta_add_char+0x3c>
}
 8014a78:	b00f      	add	sp, #60	; 0x3c
 8014a7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        uint32_t i = 0;
 8014a7e:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8014a82:	2300      	movs	r3, #0
 8014a84:	f848 3d24 	str.w	r3, [r8, #-36]!
        uint32_t a;
        while(ext->accapted_chars[i] != '\0') {
 8014a88:	6b70      	ldr	r0, [r6, #52]	; 0x34
 8014a8a:	9b05      	ldr	r3, [sp, #20]
 8014a8c:	5cc3      	ldrb	r3, [r0, r3]
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d0f2      	beq.n	8014a78 <lv_ta_add_char+0x94>
            a = lv_txt_encoded_next(ext->accapted_chars, &i);
 8014a92:	683b      	ldr	r3, [r7, #0]
 8014a94:	4641      	mov	r1, r8
 8014a96:	4798      	blx	r3
            if(a == c) return true; /*Accepted*/
 8014a98:	4581      	cmp	r9, r0
 8014a9a:	d1f5      	bne.n	8014a88 <lv_ta_add_char+0xa4>
 8014a9c:	e7c2      	b.n	8014a24 <lv_ta_add_char+0x40>
        lv_txt_ins(ext->pwd_tmp, ext->cursor.pos, (const char *)letter_buf);
 8014a9e:	aa03      	add	r2, sp, #12
 8014aa0:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
 8014aa4:	f7f9 fdde 	bl	800e664 <lv_txt_ins>
        a.fp = (lv_anim_fp_t)pwd_char_hider_anim;
 8014aa8:	4b15      	ldr	r3, [pc, #84]	; (8014b00 <lv_ta_add_char+0x11c>)
        lv_anim_create(&a);
 8014aaa:	a805      	add	r0, sp, #20
        a.var = ta;
 8014aac:	9505      	str	r5, [sp, #20]
        a.fp = (lv_anim_fp_t)pwd_char_hider_anim;
 8014aae:	9306      	str	r3, [sp, #24]
        a.time = LV_TA_PWD_SHOW_TIME;
 8014ab0:	f240 53dc 	movw	r3, #1500	; 0x5dc
        a.act_time = 0;
 8014ab4:	f8ad 602e 	strh.w	r6, [sp, #46]	; 0x2e
        a.time = LV_TA_PWD_SHOW_TIME;
 8014ab8:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
        a.end_cb = (lv_anim_cb_t)pwd_char_hider;
 8014abc:	4b11      	ldr	r3, [pc, #68]	; (8014b04 <lv_ta_add_char+0x120>)
        a.start = 0;
 8014abe:	9609      	str	r6, [sp, #36]	; 0x24
        a.end_cb = (lv_anim_cb_t)pwd_char_hider;
 8014ac0:	9307      	str	r3, [sp, #28]
        a.end = 1;
 8014ac2:	2301      	movs	r3, #1
        a.repeat_pause = 0;
 8014ac4:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
        a.end = 1;
 8014ac8:	930a      	str	r3, [sp, #40]	; 0x28
        a.repeat = 0;
 8014aca:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
        a.playback_pause = 0;
 8014ace:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
        a.playback = 0;
 8014ad2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8014ad6:	f366 0300 	bfi	r3, r6, #0, #1
 8014ada:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
        a.path = lv_anim_path_step;
 8014ade:	4b0a      	ldr	r3, [pc, #40]	; (8014b08 <lv_ta_add_char+0x124>)
 8014ae0:	9308      	str	r3, [sp, #32]
        lv_anim_create(&a);
 8014ae2:	f7f8 fdf9 	bl	800d6d8 <lv_anim_create>
    lv_ta_set_cursor_pos(ta, lv_ta_get_cursor_pos(ta) + 1);
 8014ae6:	4628      	mov	r0, r5
 8014ae8:	f7ff fdfa 	bl	80146e0 <lv_ta_get_cursor_pos>
 8014aec:	1c41      	adds	r1, r0, #1
 8014aee:	4628      	mov	r0, r5
 8014af0:	b209      	sxth	r1, r1
 8014af2:	f7ff fb31 	bl	8014158 <lv_ta_set_cursor_pos>
 8014af6:	e7bf      	b.n	8014a78 <lv_ta_add_char+0x94>
 8014af8:	200000b0 	.word	0x200000b0
 8014afc:	200000bc 	.word	0x200000bc
 8014b00:	08014049 	.word	0x08014049
 8014b04:	08014081 	.word	0x08014081
 8014b08:	0800d775 	.word	0x0800d775

08014b0c <lv_ta_get_cursor_type>:
{
 8014b0c:	b508      	push	{r3, lr}
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8014b0e:	f7f4 f9b4 	bl	8008e7a <lv_obj_get_ext_attr>
    return ext->cursor.type;
 8014b12:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
}
 8014b16:	f000 0003 	and.w	r0, r0, #3
 8014b1a:	bd08      	pop	{r3, pc}

08014b1c <lv_ta_get_accepted_chars>:
{
 8014b1c:	b508      	push	{r3, lr}
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8014b1e:	f7f4 f9ac 	bl	8008e7a <lv_obj_get_ext_attr>
}
 8014b22:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8014b24:	bd08      	pop	{r3, pc}

08014b26 <lv_ta_get_max_length>:
{
 8014b26:	b508      	push	{r3, lr}
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8014b28:	f7f4 f9a7 	bl	8008e7a <lv_obj_get_ext_attr>
}
 8014b2c:	8f00      	ldrh	r0, [r0, #56]	; 0x38
 8014b2e:	bd08      	pop	{r3, pc}

08014b30 <lv_ta_add_text>:
{
 8014b30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014b34:	b08b      	sub	sp, #44	; 0x2c
 8014b36:	4604      	mov	r4, r0
 8014b38:	460f      	mov	r7, r1
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8014b3a:	f7f4 f99e 	bl	8008e7a <lv_obj_get_ext_attr>
    if(ext->pwd_mode != 0) pwd_char_hider(ta);  /*Make sure all the current text contains only '*'*/
 8014b3e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8014b42:	4606      	mov	r6, r0
    if(ext->pwd_mode != 0) pwd_char_hider(ta);  /*Make sure all the current text contains only '*'*/
 8014b44:	07da      	lsls	r2, r3, #31
 8014b46:	d502      	bpl.n	8014b4e <lv_ta_add_text+0x1e>
 8014b48:	4620      	mov	r0, r4
 8014b4a:	f7ff fa99 	bl	8014080 <pwd_char_hider>
    if(lv_ta_get_accepted_chars(ta) || lv_ta_get_max_length(ta)) {
 8014b4e:	4620      	mov	r0, r4
 8014b50:	f7ff ffe4 	bl	8014b1c <lv_ta_get_accepted_chars>
 8014b54:	b160      	cbz	r0, 8014b70 <lv_ta_add_text+0x40>
        uint32_t i = 0;
 8014b56:	ad0a      	add	r5, sp, #40	; 0x28
 8014b58:	2300      	movs	r3, #0
            uint32_t c = lv_txt_encoded_next(txt, &i);
 8014b5a:	4e35      	ldr	r6, [pc, #212]	; (8014c30 <lv_ta_add_text+0x100>)
            lv_ta_add_char(ta, lv_txt_unicode_to_encoded(c));
 8014b5c:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8014c44 <lv_ta_add_text+0x114>
        uint32_t i = 0;
 8014b60:	f845 3d24 	str.w	r3, [r5, #-36]!
        while(txt[i] != '\0') {
 8014b64:	9b01      	ldr	r3, [sp, #4]
 8014b66:	5cfb      	ldrb	r3, [r7, r3]
 8014b68:	bb23      	cbnz	r3, 8014bb4 <lv_ta_add_text+0x84>
}
 8014b6a:	b00b      	add	sp, #44	; 0x2c
 8014b6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(lv_ta_get_accepted_chars(ta) || lv_ta_get_max_length(ta)) {
 8014b70:	4620      	mov	r0, r4
 8014b72:	f7ff ffd8 	bl	8014b26 <lv_ta_get_max_length>
 8014b76:	4605      	mov	r5, r0
 8014b78:	2800      	cmp	r0, #0
 8014b7a:	d1ec      	bne.n	8014b56 <lv_ta_add_text+0x26>
    lv_label_ins_text(ext->label, ext->cursor.pos, txt);
 8014b7c:	463a      	mov	r2, r7
 8014b7e:	f8b6 1042 	ldrh.w	r1, [r6, #66]	; 0x42
 8014b82:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8014b84:	f7fd fa20 	bl	8011fc8 <lv_label_ins_text>
    if(ext->pwd_mode != 0) {
 8014b88:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
 8014b8c:	07db      	lsls	r3, r3, #31
 8014b8e:	d541      	bpl.n	8014c14 <lv_ta_add_text+0xe4>
        ext->pwd_tmp = lv_mem_realloc(ext->pwd_tmp, strlen(ext->pwd_tmp) + strlen(txt) + 1);
 8014b90:	f8d6 9030 	ldr.w	r9, [r6, #48]	; 0x30
 8014b94:	4648      	mov	r0, r9
 8014b96:	f7eb fb41 	bl	800021c <strlen>
 8014b9a:	4680      	mov	r8, r0
 8014b9c:	4638      	mov	r0, r7
 8014b9e:	f7eb fb3d 	bl	800021c <strlen>
 8014ba2:	eb08 0100 	add.w	r1, r8, r0
 8014ba6:	4648      	mov	r0, r9
 8014ba8:	3101      	adds	r1, #1
 8014baa:	f7f9 f9d5 	bl	800df58 <lv_mem_realloc>
 8014bae:	6330      	str	r0, [r6, #48]	; 0x30
        lv_mem_assert(ext->pwd_tmp);
 8014bb0:	b960      	cbnz	r0, 8014bcc <lv_ta_add_text+0x9c>
 8014bb2:	e7fe      	b.n	8014bb2 <lv_ta_add_text+0x82>
            uint32_t c = lv_txt_encoded_next(txt, &i);
 8014bb4:	4629      	mov	r1, r5
 8014bb6:	6833      	ldr	r3, [r6, #0]
 8014bb8:	4638      	mov	r0, r7
 8014bba:	4798      	blx	r3
            lv_ta_add_char(ta, lv_txt_unicode_to_encoded(c));
 8014bbc:	f8d8 3000 	ldr.w	r3, [r8]
 8014bc0:	4798      	blx	r3
 8014bc2:	4601      	mov	r1, r0
 8014bc4:	4620      	mov	r0, r4
 8014bc6:	f7ff ff0d 	bl	80149e4 <lv_ta_add_char>
 8014bca:	e7cb      	b.n	8014b64 <lv_ta_add_text+0x34>
        lv_txt_ins(ext->pwd_tmp, ext->cursor.pos, txt);
 8014bcc:	463a      	mov	r2, r7
 8014bce:	f8b6 1042 	ldrh.w	r1, [r6, #66]	; 0x42
 8014bd2:	f7f9 fd47 	bl	800e664 <lv_txt_ins>
        a.fp = (lv_anim_fp_t)pwd_char_hider_anim;
 8014bd6:	4b17      	ldr	r3, [pc, #92]	; (8014c34 <lv_ta_add_text+0x104>)
        lv_anim_create(&a);
 8014bd8:	a801      	add	r0, sp, #4
        a.var = ta;
 8014bda:	9401      	str	r4, [sp, #4]
        a.fp = (lv_anim_fp_t)pwd_char_hider_anim;
 8014bdc:	9302      	str	r3, [sp, #8]
        a.time = LV_TA_PWD_SHOW_TIME;
 8014bde:	f240 53dc 	movw	r3, #1500	; 0x5dc
        a.act_time = 0;
 8014be2:	f8ad 501e 	strh.w	r5, [sp, #30]
        a.time = LV_TA_PWD_SHOW_TIME;
 8014be6:	f8ad 301c 	strh.w	r3, [sp, #28]
        a.end_cb = (lv_anim_cb_t)pwd_char_hider;
 8014bea:	4b13      	ldr	r3, [pc, #76]	; (8014c38 <lv_ta_add_text+0x108>)
        a.start = 0;
 8014bec:	9505      	str	r5, [sp, #20]
        a.end_cb = (lv_anim_cb_t)pwd_char_hider;
 8014bee:	9303      	str	r3, [sp, #12]
        a.end = 1;
 8014bf0:	2301      	movs	r3, #1
        a.repeat_pause = 0;
 8014bf2:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
        a.end = 1;
 8014bf6:	9306      	str	r3, [sp, #24]
        a.repeat = 0;
 8014bf8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
        a.playback_pause = 0;
 8014bfc:	f8ad 5020 	strh.w	r5, [sp, #32]
        a.repeat = 0;
 8014c00:	f365 0341 	bfi	r3, r5, #1, #1
        a.playback = 0;
 8014c04:	f365 0300 	bfi	r3, r5, #0, #1
 8014c08:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        a.path = lv_anim_path_step;
 8014c0c:	4b0b      	ldr	r3, [pc, #44]	; (8014c3c <lv_ta_add_text+0x10c>)
 8014c0e:	9304      	str	r3, [sp, #16]
        lv_anim_create(&a);
 8014c10:	f7f8 fd62 	bl	800d6d8 <lv_anim_create>
    lv_ta_set_cursor_pos(ta, lv_ta_get_cursor_pos(ta) + lv_txt_get_encoded_length(txt));
 8014c14:	4620      	mov	r0, r4
 8014c16:	f7ff fd63 	bl	80146e0 <lv_ta_get_cursor_pos>
 8014c1a:	4b09      	ldr	r3, [pc, #36]	; (8014c40 <lv_ta_add_text+0x110>)
 8014c1c:	4605      	mov	r5, r0
 8014c1e:	4638      	mov	r0, r7
 8014c20:	681b      	ldr	r3, [r3, #0]
 8014c22:	4798      	blx	r3
 8014c24:	1829      	adds	r1, r5, r0
 8014c26:	4620      	mov	r0, r4
 8014c28:	b209      	sxth	r1, r1
 8014c2a:	f7ff fa95 	bl	8014158 <lv_ta_set_cursor_pos>
 8014c2e:	e79c      	b.n	8014b6a <lv_ta_add_text+0x3a>
 8014c30:	200000b0 	.word	0x200000b0
 8014c34:	08014049 	.word	0x08014049
 8014c38:	08014081 	.word	0x08014081
 8014c3c:	0800d775 	.word	0x0800d775
 8014c40:	200000bc 	.word	0x200000bc
 8014c44:	200000c0 	.word	0x200000c0

08014c48 <lv_ta_set_text>:
{
 8014c48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014c4c:	4605      	mov	r5, r0
 8014c4e:	b08b      	sub	sp, #44	; 0x2c
 8014c50:	460e      	mov	r6, r1
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8014c52:	f7f4 f912 	bl	8008e7a <lv_obj_get_ext_attr>
 8014c56:	4604      	mov	r4, r0
    if(lv_ta_get_accepted_chars(ta) || lv_ta_get_max_length(ta)) {
 8014c58:	4628      	mov	r0, r5
 8014c5a:	f7ff ff5f 	bl	8014b1c <lv_ta_get_accepted_chars>
 8014c5e:	b388      	cbz	r0, 8014cc4 <lv_ta_set_text+0x7c>
        lv_label_set_text(ext->label, "");
 8014c60:	4939      	ldr	r1, [pc, #228]	; (8014d48 <lv_ta_set_text+0x100>)
        uint32_t i = 0;
 8014c62:	af0a      	add	r7, sp, #40	; 0x28
        lv_label_set_text(ext->label, "");
 8014c64:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8014c66:	f7fd f863 	bl	8011d30 <lv_label_set_text>
        lv_ta_set_cursor_pos(ta, LV_TA_CURSOR_LAST);
 8014c6a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8014c6e:	4628      	mov	r0, r5
            uint32_t c = lv_txt_encoded_next(txt, &i);
 8014c70:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8014d58 <lv_ta_set_text+0x110>
        lv_ta_set_cursor_pos(ta, LV_TA_CURSOR_LAST);
 8014c74:	f7ff fa70 	bl	8014158 <lv_ta_set_cursor_pos>
            lv_ta_add_char(ta, lv_txt_unicode_to_encoded(c));
 8014c78:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8014d5c <lv_ta_set_text+0x114>
        uint32_t i = 0;
 8014c7c:	2300      	movs	r3, #0
 8014c7e:	f847 3d24 	str.w	r3, [r7, #-36]!
        while(txt[i] != '\0') {
 8014c82:	9b01      	ldr	r3, [sp, #4]
 8014c84:	5cf3      	ldrb	r3, [r6, r3]
 8014c86:	bb63      	cbnz	r3, 8014ce2 <lv_ta_set_text+0x9a>
    if(lv_obj_get_width(ext->label) == 0) {
 8014c88:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8014c8a:	f7f4 f81f 	bl	8008ccc <lv_obj_get_width>
 8014c8e:	b958      	cbnz	r0, 8014ca8 <lv_ta_set_text+0x60>
        lv_style_t * style = lv_obj_get_style(ext->label);
 8014c90:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8014c92:	f7f4 f827 	bl	8008ce4 <lv_obj_get_style>
        lv_obj_set_width(ext->label, lv_font_get_width(style->text.font, ' '));
 8014c96:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8014c98:	2120      	movs	r1, #32
 8014c9a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8014c9c:	f7f8 fe98 	bl	800d9d0 <lv_font_get_width>
 8014ca0:	b201      	sxth	r1, r0
 8014ca2:	4638      	mov	r0, r7
 8014ca4:	f7f3 fd4c 	bl	8008740 <lv_obj_set_width>
    if(ext->pwd_mode != 0) {
 8014ca8:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8014cac:	07db      	lsls	r3, r3, #31
 8014cae:	d548      	bpl.n	8014d42 <lv_ta_set_text+0xfa>
        ext->pwd_tmp = lv_mem_realloc(ext->pwd_tmp, strlen(txt) + 1);
 8014cb0:	4630      	mov	r0, r6
 8014cb2:	f7eb fab3 	bl	800021c <strlen>
 8014cb6:	1c41      	adds	r1, r0, #1
 8014cb8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8014cba:	f7f9 f94d 	bl	800df58 <lv_mem_realloc>
 8014cbe:	6320      	str	r0, [r4, #48]	; 0x30
        lv_mem_assert(ext->pwd_tmp);
 8014cc0:	b9e0      	cbnz	r0, 8014cfc <lv_ta_set_text+0xb4>
 8014cc2:	e7fe      	b.n	8014cc2 <lv_ta_set_text+0x7a>
    if(lv_ta_get_accepted_chars(ta) || lv_ta_get_max_length(ta)) {
 8014cc4:	4628      	mov	r0, r5
 8014cc6:	f7ff ff2e 	bl	8014b26 <lv_ta_get_max_length>
 8014cca:	2800      	cmp	r0, #0
 8014ccc:	d1c8      	bne.n	8014c60 <lv_ta_set_text+0x18>
        lv_label_set_text(ext->label, txt);
 8014cce:	4631      	mov	r1, r6
 8014cd0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8014cd2:	f7fd f82d 	bl	8011d30 <lv_label_set_text>
        lv_ta_set_cursor_pos(ta, LV_TA_CURSOR_LAST);
 8014cd6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8014cda:	4628      	mov	r0, r5
 8014cdc:	f7ff fa3c 	bl	8014158 <lv_ta_set_cursor_pos>
 8014ce0:	e7d2      	b.n	8014c88 <lv_ta_set_text+0x40>
            uint32_t c = lv_txt_encoded_next(txt, &i);
 8014ce2:	4639      	mov	r1, r7
 8014ce4:	f8d9 3000 	ldr.w	r3, [r9]
 8014ce8:	4630      	mov	r0, r6
 8014cea:	4798      	blx	r3
            lv_ta_add_char(ta, lv_txt_unicode_to_encoded(c));
 8014cec:	f8d8 3000 	ldr.w	r3, [r8]
 8014cf0:	4798      	blx	r3
 8014cf2:	4601      	mov	r1, r0
 8014cf4:	4628      	mov	r0, r5
 8014cf6:	f7ff fe75 	bl	80149e4 <lv_ta_add_char>
 8014cfa:	e7c2      	b.n	8014c82 <lv_ta_set_text+0x3a>
        strcpy(ext->pwd_tmp, txt);
 8014cfc:	4631      	mov	r1, r6
 8014cfe:	f000 ff20 	bl	8015b42 <strcpy>
        a.end_cb = (lv_anim_cb_t)pwd_char_hider;
 8014d02:	4a12      	ldr	r2, [pc, #72]	; (8014d4c <lv_ta_set_text+0x104>)
        a.fp = (lv_anim_fp_t)pwd_char_hider_anim;
 8014d04:	4b12      	ldr	r3, [pc, #72]	; (8014d50 <lv_ta_set_text+0x108>)
        lv_anim_create(&a);
 8014d06:	a801      	add	r0, sp, #4
        a.end_cb = (lv_anim_cb_t)pwd_char_hider;
 8014d08:	9203      	str	r2, [sp, #12]
        a.end = 1;
 8014d0a:	2201      	movs	r2, #1
        a.fp = (lv_anim_fp_t)pwd_char_hider_anim;
 8014d0c:	9302      	str	r3, [sp, #8]
        a.time = LV_TA_PWD_SHOW_TIME;
 8014d0e:	f240 53dc 	movw	r3, #1500	; 0x5dc
        a.end = 1;
 8014d12:	9206      	str	r2, [sp, #24]
        a.repeat = 0;
 8014d14:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
        a.time = LV_TA_PWD_SHOW_TIME;
 8014d18:	f8ad 301c 	strh.w	r3, [sp, #28]
        a.act_time = 0;
 8014d1c:	2300      	movs	r3, #0
        a.playback = 0;
 8014d1e:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
        a.var = ta;
 8014d22:	9501      	str	r5, [sp, #4]
        a.act_time = 0;
 8014d24:	f8ad 301e 	strh.w	r3, [sp, #30]
        a.playback = 0;
 8014d28:	f363 0200 	bfi	r2, r3, #0, #1
        a.start = 0;
 8014d2c:	9305      	str	r3, [sp, #20]
        a.repeat_pause = 0;
 8014d2e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
        a.playback_pause = 0;
 8014d32:	f8ad 3020 	strh.w	r3, [sp, #32]
        a.path = lv_anim_path_step;
 8014d36:	4b07      	ldr	r3, [pc, #28]	; (8014d54 <lv_ta_set_text+0x10c>)
        a.playback = 0;
 8014d38:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
        a.path = lv_anim_path_step;
 8014d3c:	9304      	str	r3, [sp, #16]
        lv_anim_create(&a);
 8014d3e:	f7f8 fccb 	bl	800d6d8 <lv_anim_create>
}
 8014d42:	b00b      	add	sp, #44	; 0x2c
 8014d44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d48:	08087e8b 	.word	0x08087e8b
 8014d4c:	08014081 	.word	0x08014081
 8014d50:	08014049 	.word	0x08014049
 8014d54:	0800d775 	.word	0x0800d775
 8014d58:	200000b0 	.word	0x200000b0
 8014d5c:	200000c0 	.word	0x200000c0

08014d60 <lv_ta_cursor_right>:
{
 8014d60:	b510      	push	{r4, lr}
 8014d62:	4604      	mov	r4, r0
    uint16_t cp = lv_ta_get_cursor_pos(ta);
 8014d64:	f7ff fcbc 	bl	80146e0 <lv_ta_get_cursor_pos>
    cp++;
 8014d68:	1c41      	adds	r1, r0, #1
    lv_ta_set_cursor_pos(ta, cp);
 8014d6a:	4620      	mov	r0, r4
 8014d6c:	b209      	sxth	r1, r1
}
 8014d6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_ta_set_cursor_pos(ta, cp);
 8014d72:	f7ff b9f1 	b.w	8014158 <lv_ta_set_cursor_pos>

08014d76 <lv_ta_cursor_left>:
{
 8014d76:	b510      	push	{r4, lr}
 8014d78:	4604      	mov	r4, r0
    uint16_t cp = lv_ta_get_cursor_pos(ta);
 8014d7a:	f7ff fcb1 	bl	80146e0 <lv_ta_get_cursor_pos>
    if(cp > 0)  {
 8014d7e:	b130      	cbz	r0, 8014d8e <lv_ta_cursor_left+0x18>
        cp--;
 8014d80:	1e41      	subs	r1, r0, #1
        lv_ta_set_cursor_pos(ta, cp);
 8014d82:	4620      	mov	r0, r4
 8014d84:	b209      	sxth	r1, r1
}
 8014d86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        lv_ta_set_cursor_pos(ta, cp);
 8014d8a:	f7ff b9e5 	b.w	8014158 <lv_ta_set_cursor_pos>
 8014d8e:	bd10      	pop	{r4, pc}

08014d90 <lv_ta_cursor_down>:
{
 8014d90:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014d92:	4606      	mov	r6, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8014d94:	f7f4 f871 	bl	8008e7a <lv_obj_get_ext_attr>
    lv_label_get_letter_pos(ext->label, lv_ta_get_cursor_pos(ta), &pos);
 8014d98:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8014d9a:	4604      	mov	r4, r0
    lv_label_get_letter_pos(ext->label, lv_ta_get_cursor_pos(ta), &pos);
 8014d9c:	4630      	mov	r0, r6
 8014d9e:	f7ff fc9f 	bl	80146e0 <lv_ta_get_cursor_pos>
 8014da2:	aa01      	add	r2, sp, #4
 8014da4:	4601      	mov	r1, r0
 8014da6:	4628      	mov	r0, r5
 8014da8:	f7fc fc16 	bl	80115d8 <lv_label_get_letter_pos>
    lv_style_t * label_style = lv_obj_get_style(ext->label);
 8014dac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8014dae:	f7f3 ff99 	bl	8008ce4 <lv_obj_get_style>
    pos.y += font_h + label_style->text.line_space + 1;
 8014db2:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8014db6:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8014db8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8014dba:	3501      	adds	r5, #1
    if(pos.y < lv_obj_get_height(ext->label)) {
 8014dbc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    pos.y += font_h + label_style->text.line_space + 1;
 8014dbe:	442b      	add	r3, r5
 8014dc0:	f892 5020 	ldrb.w	r5, [r2, #32]
 8014dc4:	441d      	add	r5, r3
    pos.x = ext->cursor.valid_x;
 8014dc6:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    pos.y += font_h + label_style->text.line_space + 1;
 8014dca:	b22d      	sxth	r5, r5
    pos.x = ext->cursor.valid_x;
 8014dcc:	f8ad 3004 	strh.w	r3, [sp, #4]
    pos.y += font_h + label_style->text.line_space + 1;
 8014dd0:	f8ad 5006 	strh.w	r5, [sp, #6]
    if(pos.y < lv_obj_get_height(ext->label)) {
 8014dd4:	f7f3 ff80 	bl	8008cd8 <lv_obj_get_height>
 8014dd8:	4285      	cmp	r5, r0
 8014dda:	da0b      	bge.n	8014df4 <lv_ta_cursor_down+0x64>
        uint16_t new_cur_pos = lv_label_get_letter_on(ext->label, &pos);
 8014ddc:	a901      	add	r1, sp, #4
 8014dde:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8014de0:	f7fc fcd6 	bl	8011790 <lv_label_get_letter_on>
        lv_coord_t cur_valid_x_tmp = ext->cursor.valid_x;   /*Cursor position set overwrites the valid positon */
 8014de4:	f9b4 5040 	ldrsh.w	r5, [r4, #64]	; 0x40
        lv_ta_set_cursor_pos(ta, new_cur_pos);
 8014de8:	b201      	sxth	r1, r0
 8014dea:	4630      	mov	r0, r6
 8014dec:	f7ff f9b4 	bl	8014158 <lv_ta_set_cursor_pos>
        ext->cursor.valid_x = cur_valid_x_tmp;
 8014df0:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
}
 8014df4:	b002      	add	sp, #8
 8014df6:	bd70      	pop	{r4, r5, r6, pc}

08014df8 <lv_ta_cursor_up>:
{
 8014df8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014dfa:	4605      	mov	r5, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8014dfc:	f7f4 f83d 	bl	8008e7a <lv_obj_get_ext_attr>
    lv_label_get_letter_pos(ext->label, lv_ta_get_cursor_pos(ta), &pos);
 8014e00:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8014e02:	4604      	mov	r4, r0
    lv_label_get_letter_pos(ext->label, lv_ta_get_cursor_pos(ta), &pos);
 8014e04:	4628      	mov	r0, r5
 8014e06:	f7ff fc6b 	bl	80146e0 <lv_ta_get_cursor_pos>
 8014e0a:	aa01      	add	r2, sp, #4
 8014e0c:	4601      	mov	r1, r0
 8014e0e:	4630      	mov	r0, r6
 8014e10:	f7fc fbe2 	bl	80115d8 <lv_label_get_letter_pos>
    lv_style_t * label_style = lv_obj_get_style(ext->label);
 8014e14:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8014e16:	f7f3 ff65 	bl	8008ce4 <lv_obj_get_style>
    pos.y -= font_h + label_style->text.line_space - 1;
 8014e1a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014e1e:	8e42      	ldrh	r2, [r0, #50]	; 0x32
    uint16_t new_cur_pos = lv_label_get_letter_on(ext->label, &pos);
 8014e20:	a901      	add	r1, sp, #4
    pos.y -= font_h + label_style->text.line_space - 1;
 8014e22:	3301      	adds	r3, #1
 8014e24:	1a9b      	subs	r3, r3, r2
 8014e26:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    uint16_t new_cur_pos = lv_label_get_letter_on(ext->label, &pos);
 8014e28:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    pos.y -= font_h + label_style->text.line_space - 1;
 8014e2a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8014e2e:	1a9b      	subs	r3, r3, r2
 8014e30:	f8ad 3006 	strh.w	r3, [sp, #6]
    pos.x = ext->cursor.valid_x;
 8014e34:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 8014e38:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint16_t new_cur_pos = lv_label_get_letter_on(ext->label, &pos);
 8014e3c:	f7fc fca8 	bl	8011790 <lv_label_get_letter_on>
    lv_coord_t cur_valid_x_tmp = ext->cursor.valid_x;   /*Cursor position set overwrites the valid positon */
 8014e40:	f9b4 6040 	ldrsh.w	r6, [r4, #64]	; 0x40
    lv_ta_set_cursor_pos(ta, new_cur_pos);
 8014e44:	b201      	sxth	r1, r0
 8014e46:	4628      	mov	r0, r5
 8014e48:	f7ff f986 	bl	8014158 <lv_ta_set_cursor_pos>
    ext->cursor.valid_x = cur_valid_x_tmp;
 8014e4c:	f8a4 6040 	strh.w	r6, [r4, #64]	; 0x40
}
 8014e50:	b002      	add	sp, #8
 8014e52:	bd70      	pop	{r4, r5, r6, pc}

08014e54 <lv_ta_signal>:
{
 8014e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    res = ancestor_signal(ta, sign, param);
 8014e58:	4b66      	ldr	r3, [pc, #408]	; (8014ff4 <lv_ta_signal+0x1a0>)
{
 8014e5a:	4604      	mov	r4, r0
 8014e5c:	460e      	mov	r6, r1
 8014e5e:	4617      	mov	r7, r2
    res = ancestor_signal(ta, sign, param);
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8014e64:	2801      	cmp	r0, #1
    res = ancestor_signal(ta, sign, param);
 8014e66:	4680      	mov	r8, r0
    if(res != LV_RES_OK) return res;
 8014e68:	d108      	bne.n	8014e7c <lv_ta_signal+0x28>
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8014e6a:	4620      	mov	r0, r4
 8014e6c:	f7f4 f805 	bl	8008e7a <lv_obj_get_ext_attr>
 8014e70:	4605      	mov	r5, r0
    if(sign == LV_SIGNAL_CLEANUP) {
 8014e72:	b936      	cbnz	r6, 8014e82 <lv_ta_signal+0x2e>
        if(ext->pwd_tmp != NULL) lv_mem_free(ext->pwd_tmp);
 8014e74:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8014e76:	b108      	cbz	r0, 8014e7c <lv_ta_signal+0x28>
 8014e78:	f7f9 f80a 	bl	800de90 <lv_mem_free>
}
 8014e7c:	4640      	mov	r0, r8
 8014e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 8014e82:	2e03      	cmp	r6, #3
 8014e84:	d13b      	bne.n	8014efe <lv_ta_signal+0xaa>
        if(ext->label) {
 8014e86:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d0f7      	beq.n	8014e7c <lv_ta_signal+0x28>
            lv_obj_t * scrl = lv_page_get_scrl(ta);
 8014e8c:	4620      	mov	r0, r4
 8014e8e:	f7fe f992 	bl	80131b6 <lv_page_get_scrl>
 8014e92:	4607      	mov	r7, r0
            lv_style_t * style_ta = lv_obj_get_style(ta);
 8014e94:	4620      	mov	r0, r4
 8014e96:	f7f3 ff25 	bl	8008ce4 <lv_obj_get_style>
 8014e9a:	4681      	mov	r9, r0
            lv_style_t * style_scrl = lv_obj_get_style(scrl);
 8014e9c:	4638      	mov	r0, r7
 8014e9e:	f7f3 ff21 	bl	8008ce4 <lv_obj_get_style>
            if(ext->one_line) {
 8014ea2:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
            lv_style_t * style_scrl = lv_obj_get_style(scrl);
 8014ea6:	4606      	mov	r6, r0
            if(ext->one_line) {
 8014ea8:	079b      	lsls	r3, r3, #30
 8014eaa:	d515      	bpl.n	8014ed8 <lv_ta_signal+0x84>
                lv_style_t * style_label = lv_obj_get_style(ext->label);
 8014eac:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8014eae:	f7f3 ff19 	bl	8008ce4 <lv_obj_get_style>
                lv_obj_set_height(ta, font_h + (style_ta->body.padding.ver + style_scrl->body.padding.ver) * 2);
 8014eb2:	f9b9 1020 	ldrsh.w	r1, [r9, #32]
 8014eb6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8014eb8:	4620      	mov	r0, r4
 8014eba:	f9b6 3020 	ldrsh.w	r3, [r6, #32]
 8014ebe:	440b      	add	r3, r1
 8014ec0:	f892 1020 	ldrb.w	r1, [r2, #32]
 8014ec4:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8014ec8:	b209      	sxth	r1, r1
 8014eca:	f7f3 fc40 	bl	800874e <lv_obj_set_height>
            lv_label_set_text(ext->label, NULL);
 8014ece:	2100      	movs	r1, #0
 8014ed0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8014ed2:	f7fc ff2d 	bl	8011d30 <lv_label_set_text>
 8014ed6:	e7d1      	b.n	8014e7c <lv_ta_signal+0x28>
                lv_obj_set_width(ext->label, lv_obj_get_width(scrl) - 2 * style_scrl->body.padding.hor);
 8014ed8:	4638      	mov	r0, r7
 8014eda:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8014edc:	f7f3 fef6 	bl	8008ccc <lv_obj_get_width>
 8014ee0:	8c71      	ldrh	r1, [r6, #34]	; 0x22
 8014ee2:	eba0 0141 	sub.w	r1, r0, r1, lsl #1
 8014ee6:	4620      	mov	r0, r4
 8014ee8:	b209      	sxth	r1, r1
 8014eea:	f7f3 fc29 	bl	8008740 <lv_obj_set_width>
                lv_obj_set_pos(ext->label, style_scrl->body.padding.hor, style_scrl->body.padding.ver);         /*Be sure the Label is in the correct position*/
 8014eee:	f9b6 2020 	ldrsh.w	r2, [r6, #32]
 8014ef2:	f9b6 1022 	ldrsh.w	r1, [r6, #34]	; 0x22
 8014ef6:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8014ef8:	f7f3 fa78 	bl	80083ec <lv_obj_set_pos>
 8014efc:	e7e7      	b.n	8014ece <lv_ta_signal+0x7a>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 8014efe:	2e02      	cmp	r6, #2
 8014f00:	d12e      	bne.n	8014f60 <lv_ta_signal+0x10c>
        if(ext->label) {
 8014f02:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d0b9      	beq.n	8014e7c <lv_ta_signal+0x28>
            if(lv_obj_get_width(ta) != lv_area_get_width(param) ||
 8014f08:	4620      	mov	r0, r4
 8014f0a:	f7f3 fedf 	bl	8008ccc <lv_obj_get_width>
    return area_p->x2 - area_p->x1 + 1;
 8014f0e:	88bb      	ldrh	r3, [r7, #4]
 8014f10:	883a      	ldrh	r2, [r7, #0]
 8014f12:	3301      	adds	r3, #1
 8014f14:	1a9b      	subs	r3, r3, r2
 8014f16:	b21b      	sxth	r3, r3
 8014f18:	4298      	cmp	r0, r3
 8014f1a:	d016      	beq.n	8014f4a <lv_ta_signal+0xf6>
                lv_obj_t * scrl = lv_page_get_scrl(ta);
 8014f1c:	4620      	mov	r0, r4
 8014f1e:	f7fe f94a 	bl	80131b6 <lv_page_get_scrl>
 8014f22:	4607      	mov	r7, r0
                lv_style_t * style_scrl = lv_obj_get_style(scrl);
 8014f24:	f7f3 fede 	bl	8008ce4 <lv_obj_get_style>
 8014f28:	4604      	mov	r4, r0
                lv_obj_set_width(ext->label, lv_obj_get_width(scrl) - 2 * style_scrl->body.padding.hor);
 8014f2a:	4638      	mov	r0, r7
 8014f2c:	6aee      	ldr	r6, [r5, #44]	; 0x2c
 8014f2e:	f7f3 fecd 	bl	8008ccc <lv_obj_get_width>
 8014f32:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 8014f34:	eba0 0141 	sub.w	r1, r0, r1, lsl #1
 8014f38:	4630      	mov	r0, r6
 8014f3a:	b209      	sxth	r1, r1
 8014f3c:	f7f3 fc00 	bl	8008740 <lv_obj_set_width>
                lv_obj_set_pos(ext->label, style_scrl->body.padding.hor, style_scrl->body.padding.ver);
 8014f40:	f9b4 2020 	ldrsh.w	r2, [r4, #32]
 8014f44:	f9b4 1022 	ldrsh.w	r1, [r4, #34]	; 0x22
 8014f48:	e7d5      	b.n	8014ef6 <lv_ta_signal+0xa2>
                    lv_obj_get_height(ta) != lv_area_get_height(param)) {
 8014f4a:	4620      	mov	r0, r4
 8014f4c:	f7f3 fec4 	bl	8008cd8 <lv_obj_get_height>
    return area_p->y2 - area_p->y1 + 1;
 8014f50:	88fb      	ldrh	r3, [r7, #6]
 8014f52:	887a      	ldrh	r2, [r7, #2]
 8014f54:	3301      	adds	r3, #1
 8014f56:	1a9b      	subs	r3, r3, r2
            if(lv_obj_get_width(ta) != lv_area_get_width(param) ||
 8014f58:	b21b      	sxth	r3, r3
 8014f5a:	4298      	cmp	r0, r3
 8014f5c:	d1de      	bne.n	8014f1c <lv_ta_signal+0xc8>
 8014f5e:	e78d      	b.n	8014e7c <lv_ta_signal+0x28>
    } else if(sign == LV_SIGNAL_CONTROLL) {
 8014f60:	2e10      	cmp	r6, #16
 8014f62:	d11d      	bne.n	8014fa0 <lv_ta_signal+0x14c>
        uint32_t c = *((uint32_t *)param);      /*uint32_t because can be UTF-8*/
 8014f64:	6839      	ldr	r1, [r7, #0]
        if(c == LV_GROUP_KEY_RIGHT)     lv_ta_cursor_right(ta);
 8014f66:	4620      	mov	r0, r4
 8014f68:	2913      	cmp	r1, #19
 8014f6a:	d102      	bne.n	8014f72 <lv_ta_signal+0x11e>
 8014f6c:	f7ff fef8 	bl	8014d60 <lv_ta_cursor_right>
 8014f70:	e784      	b.n	8014e7c <lv_ta_signal+0x28>
        else if(c == LV_GROUP_KEY_LEFT) lv_ta_cursor_left(ta);
 8014f72:	2914      	cmp	r1, #20
 8014f74:	d102      	bne.n	8014f7c <lv_ta_signal+0x128>
 8014f76:	f7ff fefe 	bl	8014d76 <lv_ta_cursor_left>
 8014f7a:	e77f      	b.n	8014e7c <lv_ta_signal+0x28>
        else if(c == LV_GROUP_KEY_UP)   lv_ta_cursor_up(ta);
 8014f7c:	2911      	cmp	r1, #17
 8014f7e:	d102      	bne.n	8014f86 <lv_ta_signal+0x132>
 8014f80:	f7ff ff3a 	bl	8014df8 <lv_ta_cursor_up>
 8014f84:	e77a      	b.n	8014e7c <lv_ta_signal+0x28>
        else if(c == LV_GROUP_KEY_DOWN) lv_ta_cursor_down(ta);
 8014f86:	2912      	cmp	r1, #18
 8014f88:	d102      	bne.n	8014f90 <lv_ta_signal+0x13c>
 8014f8a:	f7ff ff01 	bl	8014d90 <lv_ta_cursor_down>
 8014f8e:	e775      	b.n	8014e7c <lv_ta_signal+0x28>
        else if(c == LV_GROUP_KEY_DEL)  lv_ta_del_char(ta);
 8014f90:	291c      	cmp	r1, #28
 8014f92:	d102      	bne.n	8014f9a <lv_ta_signal+0x146>
 8014f94:	f7ff f99c 	bl	80142d0 <lv_ta_del_char>
 8014f98:	e770      	b.n	8014e7c <lv_ta_signal+0x28>
            lv_ta_add_char(ta, c);
 8014f9a:	f7ff fd23 	bl	80149e4 <lv_ta_add_char>
 8014f9e:	e76d      	b.n	8014e7c <lv_ta_signal+0x28>
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 8014fa0:	2e11      	cmp	r6, #17
 8014fa2:	d102      	bne.n	8014faa <lv_ta_signal+0x156>
        *editable = true;
 8014fa4:	f887 8000 	strb.w	r8, [r7]
 8014fa8:	e768      	b.n	8014e7c <lv_ta_signal+0x28>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8014faa:	2e05      	cmp	r6, #5
 8014fac:	d10c      	bne.n	8014fc8 <lv_ta_signal+0x174>
 8014fae:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 8014fb0:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8014fb4:	b2da      	uxtb	r2, r3
 8014fb6:	b119      	cbz	r1, 8014fc0 <lv_ta_signal+0x16c>
 8014fb8:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) {  /*Find the last set data*/
 8014fba:	2b07      	cmp	r3, #7
 8014fbc:	d1f8      	bne.n	8014fb0 <lv_ta_signal+0x15c>
 8014fbe:	461a      	mov	r2, r3
        buf->type[i] = "lv_ta";
 8014fc0:	4b0d      	ldr	r3, [pc, #52]	; (8014ff8 <lv_ta_signal+0x1a4>)
 8014fc2:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
 8014fc6:	e759      	b.n	8014e7c <lv_ta_signal+0x28>
    } else if(sign == LV_SIGNAL_DEFOCUS) {
 8014fc8:	2e0f      	cmp	r6, #15
 8014fca:	d109      	bne.n	8014fe0 <lv_ta_signal+0x18c>
        cur_type = lv_ta_get_cursor_type(ta);
 8014fcc:	4620      	mov	r0, r4
 8014fce:	f7ff fd9d 	bl	8014b0c <lv_ta_get_cursor_type>
        lv_ta_set_cursor_type(ta, cur_type | LV_CURSOR_HIDDEN);
 8014fd2:	f040 0110 	orr.w	r1, r0, #16
 8014fd6:	b2c9      	uxtb	r1, r1
        lv_ta_set_cursor_type(ta, cur_type & (~LV_CURSOR_HIDDEN));
 8014fd8:	4620      	mov	r0, r4
 8014fda:	f7ff f9d1 	bl	8014380 <lv_ta_set_cursor_type>
 8014fde:	e74d      	b.n	8014e7c <lv_ta_signal+0x28>
    } else if(sign == LV_SIGNAL_FOCUS) {
 8014fe0:	2e0e      	cmp	r6, #14
 8014fe2:	f47f af4b 	bne.w	8014e7c <lv_ta_signal+0x28>
        cur_type = lv_ta_get_cursor_type(ta);
 8014fe6:	4620      	mov	r0, r4
 8014fe8:	f7ff fd90 	bl	8014b0c <lv_ta_get_cursor_type>
        lv_ta_set_cursor_type(ta, cur_type & (~LV_CURSOR_HIDDEN));
 8014fec:	f000 01ef 	and.w	r1, r0, #239	; 0xef
 8014ff0:	e7f2      	b.n	8014fd8 <lv_ta_signal+0x184>
 8014ff2:	bf00      	nop
 8014ff4:	20017448 	.word	0x20017448
 8014ff8:	08088001 	.word	0x08088001

08014ffc <tabpage_pressing_handler>:
 * Called when a tab's page or scrollable object is being pressed
 * @param tabview pointer to the btn view object
 * @param tabpage pointer to the page of a btn
 */
static void tabpage_pressing_handler(lv_obj_t * tabview, lv_obj_t * tabpage)
{
 8014ffc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015000:	460d      	mov	r5, r1
 8015002:	4606      	mov	r6, r0
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 8015004:	f7f3 ff39 	bl	8008e7a <lv_obj_get_ext_attr>
 8015008:	4604      	mov	r4, r0
    lv_indev_t * indev = lv_indev_get_act();
 801500a:	f7f3 f8a3 	bl	8008154 <lv_indev_get_act>
    lv_point_t point_act;
    lv_indev_get_point(indev, &point_act);
 801500e:	a901      	add	r1, sp, #4
 8015010:	f7f3 f8c2 	bl	8008198 <lv_indev_get_point>
    lv_coord_t x_diff = point_act.x - ext->point_last.x;
    lv_coord_t y_diff = point_act.y - ext->point_last.y;

    if(ext->draging == 0) {
 8015014:	7ea3      	ldrb	r3, [r4, #26]
 8015016:	f013 0702 	ands.w	r7, r3, #2
 801501a:	d110      	bne.n	801503e <tabpage_pressing_handler+0x42>
        if(x_diff >= LV_INDEV_DRAG_LIMIT || x_diff <= -LV_INDEV_DRAG_LIMIT) {
 801501c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8015020:	8a21      	ldrh	r1, [r4, #16]
 8015022:	3209      	adds	r2, #9
 8015024:	1a52      	subs	r2, r2, r1
 8015026:	b292      	uxth	r2, r2
 8015028:	2a12      	cmp	r2, #18
 801502a:	d948      	bls.n	80150be <tabpage_pressing_handler+0xc2>
            ext->drag_hor = 1;
            ext->draging = 1;
 801502c:	f043 0306 	orr.w	r3, r3, #6
            lv_obj_set_drag(lv_page_get_scrl(tabpage), false);
 8015030:	4628      	mov	r0, r5
            ext->draging = 1;
 8015032:	76a3      	strb	r3, [r4, #26]
            lv_obj_set_drag(lv_page_get_scrl(tabpage), false);
 8015034:	f7fe f8bf 	bl	80131b6 <lv_page_get_scrl>
 8015038:	4639      	mov	r1, r7
 801503a:	f7f3 fcf4 	bl	8008a26 <lv_obj_set_drag>
        } else if(y_diff >= LV_INDEV_DRAG_LIMIT || y_diff <= -LV_INDEV_DRAG_LIMIT) {
            ext->drag_hor = 0;
            ext->draging = 1;
        }
    }
    if(ext->drag_hor) {
 801503e:	7ea3      	ldrb	r3, [r4, #26]
 8015040:	075b      	lsls	r3, r3, #29
 8015042:	d539      	bpl.n	80150b8 <tabpage_pressing_handler+0xbc>
        lv_obj_set_x(ext->content, lv_obj_get_x(ext->content) + point_act.x - ext->point_last.x);
 8015044:	68a7      	ldr	r7, [r4, #8]
 8015046:	4638      	mov	r0, r7
 8015048:	f7f3 fe34 	bl	8008cb4 <lv_obj_get_x>
 801504c:	8a23      	ldrh	r3, [r4, #16]
 801504e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8015052:	1ac9      	subs	r1, r1, r3
 8015054:	4401      	add	r1, r0
 8015056:	4638      	mov	r0, r7
 8015058:	b209      	sxth	r1, r1
 801505a:	f7f3 fb2c 	bl	80086b6 <lv_obj_set_x>
        ext->point_last.x = point_act.x;
 801505e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
        ext->point_last.y = point_act.y;

        /*Move the indicator*/
        lv_coord_t indic_width = lv_obj_get_width(ext->indic);
 8015062:	6860      	ldr	r0, [r4, #4]
        ext->point_last.x = point_act.x;
 8015064:	8223      	strh	r3, [r4, #16]
        ext->point_last.y = point_act.y;
 8015066:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801506a:	8263      	strh	r3, [r4, #18]
        lv_coord_t indic_width = lv_obj_get_width(ext->indic);
 801506c:	f7f3 fe2e 	bl	8008ccc <lv_obj_get_width>
 8015070:	4607      	mov	r7, r0
        lv_style_t * tabs_style = lv_obj_get_style(ext->btns);
 8015072:	6820      	ldr	r0, [r4, #0]
 8015074:	f7f3 fe36 	bl	8008ce4 <lv_obj_get_style>
 8015078:	4680      	mov	r8, r0
        lv_style_t * indic_style = lv_obj_get_style(ext->indic);
 801507a:	6860      	ldr	r0, [r4, #4]
 801507c:	f7f3 fe32 	bl	8008ce4 <lv_obj_get_style>
        lv_coord_t p = ((tabpage->coords.x1 - tabview->coords.x1) * (indic_width + tabs_style->body.padding.inner)) / lv_obj_get_width(tabview);
 8015080:	f9b5 5010 	ldrsh.w	r5, [r5, #16]
        lv_style_t * indic_style = lv_obj_get_style(ext->indic);
 8015084:	4681      	mov	r9, r0
        lv_coord_t p = ((tabpage->coords.x1 - tabview->coords.x1) * (indic_width + tabs_style->body.padding.inner)) / lv_obj_get_width(tabview);
 8015086:	f9b6 0010 	ldrsh.w	r0, [r6, #16]
 801508a:	1a28      	subs	r0, r5, r0
 801508c:	f9b8 5024 	ldrsh.w	r5, [r8, #36]	; 0x24
 8015090:	443d      	add	r5, r7
 8015092:	4345      	muls	r5, r0
 8015094:	4630      	mov	r0, r6
 8015096:	f7f3 fe19 	bl	8008ccc <lv_obj_get_width>

        lv_obj_set_x(ext->indic, indic_width * ext->tab_cur + tabs_style->body.padding.inner * ext->tab_cur + indic_style->body.padding.hor - p);
 801509a:	f9b8 1024 	ldrsh.w	r1, [r8, #36]	; 0x24
 801509e:	f8b9 2022 	ldrh.w	r2, [r9, #34]	; 0x22
 80150a2:	19cb      	adds	r3, r1, r7
 80150a4:	8aa1      	ldrh	r1, [r4, #20]
        lv_coord_t p = ((tabpage->coords.x1 - tabview->coords.x1) * (indic_width + tabs_style->body.padding.inner)) / lv_obj_get_width(tabview);
 80150a6:	fb95 f0f0 	sdiv	r0, r5, r0
        lv_obj_set_x(ext->indic, indic_width * ext->tab_cur + tabs_style->body.padding.inner * ext->tab_cur + indic_style->body.padding.hor - p);
 80150aa:	fb11 2103 	smlabb	r1, r1, r3, r2
 80150ae:	1a09      	subs	r1, r1, r0
 80150b0:	6860      	ldr	r0, [r4, #4]
 80150b2:	b209      	sxth	r1, r1
 80150b4:	f7f3 faff 	bl	80086b6 <lv_obj_set_x>
    }
}
 80150b8:	b003      	add	sp, #12
 80150ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        } else if(y_diff >= LV_INDEV_DRAG_LIMIT || y_diff <= -LV_INDEV_DRAG_LIMIT) {
 80150be:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80150c2:	8a61      	ldrh	r1, [r4, #18]
 80150c4:	3209      	adds	r2, #9
 80150c6:	1a52      	subs	r2, r2, r1
 80150c8:	b292      	uxth	r2, r2
 80150ca:	2a12      	cmp	r2, #18
            ext->draging = 1;
 80150cc:	bf82      	ittt	hi
 80150ce:	f003 03fb 	andhi.w	r3, r3, #251	; 0xfb
 80150d2:	f043 0302 	orrhi.w	r3, r3, #2
 80150d6:	76a3      	strbhi	r3, [r4, #26]
 80150d8:	e7b1      	b.n	801503e <tabpage_pressing_handler+0x42>

080150da <tabpage_pressed_handler.isra.2>:
static void tabpage_pressed_handler(lv_obj_t * tabview, lv_obj_t * tabpage)
 80150da:	b510      	push	{r4, lr}
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 80150dc:	f7f3 fecd 	bl	8008e7a <lv_obj_get_ext_attr>
 80150e0:	4604      	mov	r4, r0
    lv_indev_t * indev = lv_indev_get_act();
 80150e2:	f7f3 f837 	bl	8008154 <lv_indev_get_act>
    lv_indev_get_point(indev, &ext->point_last);
 80150e6:	f104 0110 	add.w	r1, r4, #16
}
 80150ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_indev_get_point(indev, &ext->point_last);
 80150ee:	f7f3 b853 	b.w	8008198 <lv_indev_get_point>
	...

080150f4 <lv_tabview_set_tab_act>:
{
 80150f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80150f8:	b08b      	sub	sp, #44	; 0x2c
 80150fa:	460f      	mov	r7, r1
 80150fc:	4616      	mov	r6, r2
 80150fe:	4681      	mov	r9, r0
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 8015100:	f7f3 febb 	bl	8008e7a <lv_obj_get_ext_attr>
 8015104:	4604      	mov	r4, r0
    lv_style_t * style = lv_obj_get_style(ext->content);
 8015106:	6880      	ldr	r0, [r0, #8]
 8015108:	f7f3 fdec 	bl	8008ce4 <lv_obj_get_style>
    if(id >= ext->tab_cnt) id = ext->tab_cnt - 1;
 801510c:	8ae5      	ldrh	r5, [r4, #22]
    if(ext->tab_load_action && id != ext->tab_cur) ext->tab_load_action(tabview, id);
 801510e:	69e3      	ldr	r3, [r4, #28]
    lv_style_t * style = lv_obj_get_style(ext->content);
 8015110:	4680      	mov	r8, r0
    if(id >= ext->tab_cnt) id = ext->tab_cnt - 1;
 8015112:	42bd      	cmp	r5, r7
 8015114:	bf9c      	itt	ls
 8015116:	f105 35ff 	addls.w	r5, r5, #4294967295
 801511a:	b2af      	uxthls	r7, r5
    if(ext->tab_load_action && id != ext->tab_cur) ext->tab_load_action(tabview, id);
 801511c:	b12b      	cbz	r3, 801512a <lv_tabview_set_tab_act+0x36>
 801511e:	8aa2      	ldrh	r2, [r4, #20]
 8015120:	42ba      	cmp	r2, r7
 8015122:	d002      	beq.n	801512a <lv_tabview_set_tab_act+0x36>
 8015124:	4639      	mov	r1, r7
 8015126:	4648      	mov	r0, r9
 8015128:	4798      	blx	r3
    ext->tab_cur = id;
 801512a:	82a7      	strh	r7, [r4, #20]
    lv_coord_t cont_x = -(lv_obj_get_width(tabview) * id + style->body.padding.inner * id + style->body.padding.hor);
 801512c:	4648      	mov	r0, r9
 801512e:	f7f3 fdcd 	bl	8008ccc <lv_obj_get_width>
 8015132:	f9b8 5024 	ldrsh.w	r5, [r8, #36]	; 0x24
    if(ext->anim_time == 0 || anim_en == false) {
 8015136:	8b23      	ldrh	r3, [r4, #24]
    lv_coord_t cont_x = -(lv_obj_get_width(tabview) * id + style->body.padding.inner * id + style->body.padding.hor);
 8015138:	4405      	add	r5, r0
 801513a:	f8b8 0022 	ldrh.w	r0, [r8, #34]	; 0x22
 801513e:	fb15 0507 	smlabb	r5, r5, r7, r0
 8015142:	426d      	negs	r5, r5
 8015144:	b22d      	sxth	r5, r5
    if(ext->anim_time == 0 || anim_en == false) {
 8015146:	b103      	cbz	r3, 801514a <lv_tabview_set_tab_act+0x56>
 8015148:	bb06      	cbnz	r6, 801518c <lv_tabview_set_tab_act+0x98>
        lv_obj_set_x(ext->content, cont_x);
 801514a:	4629      	mov	r1, r5
 801514c:	68a0      	ldr	r0, [r4, #8]
 801514e:	f7f3 fab2 	bl	80086b6 <lv_obj_set_x>
    lv_coord_t indic_width = lv_obj_get_width(ext->indic);
 8015152:	6860      	ldr	r0, [r4, #4]
 8015154:	f7f3 fdba 	bl	8008ccc <lv_obj_get_width>
 8015158:	4680      	mov	r8, r0
    lv_style_t * tabs_style = lv_obj_get_style(ext->btns);
 801515a:	6820      	ldr	r0, [r4, #0]
 801515c:	f7f3 fdc2 	bl	8008ce4 <lv_obj_get_style>
    lv_coord_t indic_x = indic_width * id + tabs_style->body.padding.inner * id + tabs_style->body.padding.hor;
 8015160:	f9b0 5024 	ldrsh.w	r5, [r0, #36]	; 0x24
 8015164:	8c41      	ldrh	r1, [r0, #34]	; 0x22
 8015166:	4445      	add	r5, r8
    if(ext->anim_time == 0 || anim_en == false) {
 8015168:	8b23      	ldrh	r3, [r4, #24]
    lv_coord_t indic_x = indic_width * id + tabs_style->body.padding.inner * id + tabs_style->body.padding.hor;
 801516a:	fb15 1507 	smlabb	r5, r5, r7, r1
 801516e:	b22d      	sxth	r5, r5
    if(ext->anim_time == 0 || anim_en == false) {
 8015170:	b103      	cbz	r3, 8015174 <lv_tabview_set_tab_act+0x80>
 8015172:	bb66      	cbnz	r6, 80151ce <lv_tabview_set_tab_act+0xda>
        lv_obj_set_x(ext->indic, indic_x);
 8015174:	4629      	mov	r1, r5
 8015176:	6860      	ldr	r0, [r4, #4]
 8015178:	f7f3 fa9d 	bl	80086b6 <lv_obj_set_x>
    lv_btnm_set_toggle(ext->btns, true, ext->tab_cur);
 801517c:	8aa2      	ldrh	r2, [r4, #20]
 801517e:	2101      	movs	r1, #1
 8015180:	6820      	ldr	r0, [r4, #0]
 8015182:	f7fa f99d 	bl	800f4c0 <lv_btnm_set_toggle>
}
 8015186:	b00b      	add	sp, #44	; 0x2c
 8015188:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        a.var = ext->content;
 801518c:	68a0      	ldr	r0, [r4, #8]
 801518e:	9001      	str	r0, [sp, #4]
        a.start = lv_obj_get_x(ext->content);
 8015190:	f7f3 fd90 	bl	8008cb4 <lv_obj_get_x>
        a.time = ext->anim_time;
 8015194:	8b22      	ldrh	r2, [r4, #24]
        a.fp = (lv_anim_fp_t)lv_obj_set_x;
 8015196:	4b1e      	ldr	r3, [pc, #120]	; (8015210 <lv_tabview_set_tab_act+0x11c>)
        a.time = ext->anim_time;
 8015198:	f8ad 201c 	strh.w	r2, [sp, #28]
        a.fp = (lv_anim_fp_t)lv_obj_set_x;
 801519c:	9302      	str	r3, [sp, #8]
        a.playback = 0;
 801519e:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
        a.path = lv_anim_path_linear;
 80151a2:	4b1c      	ldr	r3, [pc, #112]	; (8015214 <lv_tabview_set_tab_act+0x120>)
        a.repeat = 0;
 80151a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
        a.start = lv_obj_get_x(ext->content);
 80151a8:	9005      	str	r0, [sp, #20]
        a.path = lv_anim_path_linear;
 80151aa:	9304      	str	r3, [sp, #16]
        a.end_cb = NULL;
 80151ac:	2300      	movs	r3, #0
        lv_anim_create(&a);
 80151ae:	a801      	add	r0, sp, #4
        a.end = cont_x;
 80151b0:	9506      	str	r5, [sp, #24]
        a.repeat = 0;
 80151b2:	f363 0241 	bfi	r2, r3, #1, #1
        a.end_cb = NULL;
 80151b6:	9303      	str	r3, [sp, #12]
        a.act_time = 0;
 80151b8:	f8ad 301e 	strh.w	r3, [sp, #30]
        a.playback_pause = 0;
 80151bc:	f8ad 3020 	strh.w	r3, [sp, #32]
        a.repeat = 0;
 80151c0:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
        a.repeat_pause = 0;
 80151c4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
        lv_anim_create(&a);
 80151c8:	f7f8 fa86 	bl	800d6d8 <lv_anim_create>
 80151cc:	e7c1      	b.n	8015152 <lv_tabview_set_tab_act+0x5e>
        a.var = ext->indic;
 80151ce:	6860      	ldr	r0, [r4, #4]
 80151d0:	9001      	str	r0, [sp, #4]
        a.start = lv_obj_get_x(ext->indic);
 80151d2:	f7f3 fd6f 	bl	8008cb4 <lv_obj_get_x>
        a.time = ext->anim_time;
 80151d6:	8b22      	ldrh	r2, [r4, #24]
        a.fp = (lv_anim_fp_t)lv_obj_set_x;
 80151d8:	4b0d      	ldr	r3, [pc, #52]	; (8015210 <lv_tabview_set_tab_act+0x11c>)
        a.time = ext->anim_time;
 80151da:	f8ad 201c 	strh.w	r2, [sp, #28]
        a.fp = (lv_anim_fp_t)lv_obj_set_x;
 80151de:	9302      	str	r3, [sp, #8]
        a.playback = 0;
 80151e0:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
        a.path = lv_anim_path_linear;
 80151e4:	4b0b      	ldr	r3, [pc, #44]	; (8015214 <lv_tabview_set_tab_act+0x120>)
        a.repeat = 0;
 80151e6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
        a.start = lv_obj_get_x(ext->indic);
 80151ea:	9005      	str	r0, [sp, #20]
        a.path = lv_anim_path_linear;
 80151ec:	9304      	str	r3, [sp, #16]
        a.end_cb = NULL;
 80151ee:	2300      	movs	r3, #0
        lv_anim_create(&a);
 80151f0:	a801      	add	r0, sp, #4
        a.end = indic_x;
 80151f2:	9506      	str	r5, [sp, #24]
        a.repeat = 0;
 80151f4:	f363 0241 	bfi	r2, r3, #1, #1
        a.end_cb = NULL;
 80151f8:	9303      	str	r3, [sp, #12]
        a.act_time = 0;
 80151fa:	f8ad 301e 	strh.w	r3, [sp, #30]
        a.playback_pause = 0;
 80151fe:	f8ad 3020 	strh.w	r3, [sp, #32]
        a.repeat = 0;
 8015202:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
        a.repeat_pause = 0;
 8015206:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
        lv_anim_create(&a);
 801520a:	f7f8 fa65 	bl	800d6d8 <lv_anim_create>
 801520e:	e7b5      	b.n	801517c <lv_tabview_set_tab_act+0x88>
 8015210:	080086b7 	.word	0x080086b7
 8015214:	0800d751 	.word	0x0800d751

08015218 <tab_btnm_action>:
 * @param tab_btnm pointer to the tab's button matrix object
 * @param id the id of the tab (>= 0)
 * @return LV_ACTION_RES_OK because the button matrix in not deleted in the function
 */
static lv_res_t tab_btnm_action(lv_obj_t * tab_btnm, const char * tab_name)
{
 8015218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801521c:	4604      	mov	r4, r0
 801521e:	4688      	mov	r8, r1
    lv_obj_t * tab = lv_obj_get_parent(tab_btnm);
 8015220:	f7f3 fcce 	bl	8008bc0 <lv_obj_get_parent>
 8015224:	4606      	mov	r6, r0
    const char ** tabs_map = lv_btnm_get_map(tab_btnm);
 8015226:	4620      	mov	r0, r4

    uint8_t i = 0;

    while(tabs_map[i][0] != '\0') {
 8015228:	2400      	movs	r4, #0
    const char ** tabs_map = lv_btnm_get_map(tab_btnm);
 801522a:	f7fa f989 	bl	800f540 <lv_btnm_get_map>
 801522e:	4607      	mov	r7, r0
 8015230:	b2e5      	uxtb	r5, r4
    while(tabs_map[i][0] != '\0') {
 8015232:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 8015236:	7803      	ldrb	r3, [r0, #0]
 8015238:	b133      	cbz	r3, 8015248 <tab_btnm_action+0x30>
        if(strcmp(&tabs_map[i][1], tab_name) == 0) break;   /*[1] to skip the control byte*/
 801523a:	4641      	mov	r1, r8
 801523c:	3001      	adds	r0, #1
 801523e:	f7ea ffe3 	bl	8000208 <strcmp>
 8015242:	3401      	adds	r4, #1
 8015244:	2800      	cmp	r0, #0
 8015246:	d1f3      	bne.n	8015230 <tab_btnm_action+0x18>
        i++;
    }

    lv_tabview_set_tab_act(tab, i, true);
 8015248:	4630      	mov	r0, r6
 801524a:	2201      	movs	r2, #1
 801524c:	4629      	mov	r1, r5
 801524e:	f7ff ff51 	bl	80150f4 <lv_tabview_set_tab_act>

    return LV_RES_OK;
}
 8015252:	2001      	movs	r0, #1
 8015254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015258 <tabpage_press_lost_handler>:
{
 8015258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801525a:	460f      	mov	r7, r1
 801525c:	4605      	mov	r5, r0
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 801525e:	f7f3 fe0c 	bl	8008e7a <lv_obj_get_ext_attr>
    ext->drag_hor = 0;
 8015262:	7e83      	ldrb	r3, [r0, #26]
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 8015264:	4606      	mov	r6, r0
    ext->draging = 0;
 8015266:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 801526a:	f36f 0341 	bfc	r3, #1, #1
 801526e:	7683      	strb	r3, [r0, #26]
    lv_obj_set_drag(lv_page_get_scrl(tabpage), true);
 8015270:	4638      	mov	r0, r7
 8015272:	f7fd ffa0 	bl	80131b6 <lv_page_get_scrl>
 8015276:	2101      	movs	r1, #1
 8015278:	f7f3 fbd5 	bl	8008a26 <lv_obj_set_drag>
    lv_indev_t * indev = lv_indev_get_act();
 801527c:	f7f2 ff6a 	bl	8008154 <lv_indev_get_act>
 8015280:	4604      	mov	r4, r0
    lv_indev_get_point(indev, &point_act);
 8015282:	4669      	mov	r1, sp
 8015284:	f7f2 ff88 	bl	8008198 <lv_indev_get_point>
    lv_indev_get_vect(indev, &vect);
 8015288:	a901      	add	r1, sp, #4
 801528a:	4620      	mov	r0, r4
 801528c:	f7f2 ffa1 	bl	80081d2 <lv_indev_get_vect>
    while(vect.x != 0)   {
 8015290:	2100      	movs	r1, #0
 8015292:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
        vect.x = vect.x * (100 - LV_INDEV_DRAG_THROW) / 100;
 8015296:	2064      	movs	r0, #100	; 0x64
    lv_coord_t x_predict = 0;
 8015298:	460a      	mov	r2, r1
    while(vect.x != 0)   {
 801529a:	b9fb      	cbnz	r3, 80152dc <tabpage_press_lost_handler+0x84>
 801529c:	b109      	cbz	r1, 80152a2 <tabpage_press_lost_handler+0x4a>
 801529e:	f8ad 3004 	strh.w	r3, [sp, #4]
    lv_coord_t page_x1 = tabpage->coords.x1 - tabview->coords.x1 + x_predict;
 80152a2:	8a2b      	ldrh	r3, [r5, #16]
    lv_coord_t page_x2 = page_x1 + lv_obj_get_width(tabpage);
 80152a4:	4638      	mov	r0, r7
    lv_coord_t page_x1 = tabpage->coords.x1 - tabview->coords.x1 + x_predict;
 80152a6:	8a3c      	ldrh	r4, [r7, #16]
 80152a8:	1ae4      	subs	r4, r4, r3
 80152aa:	4414      	add	r4, r2
    lv_coord_t page_x2 = page_x1 + lv_obj_get_width(tabpage);
 80152ac:	f7f3 fd0e 	bl	8008ccc <lv_obj_get_width>
 80152b0:	4607      	mov	r7, r0
    lv_coord_t treshold = lv_obj_get_width(tabview) / 2;
 80152b2:	4628      	mov	r0, r5
 80152b4:	f7f3 fd0a 	bl	8008ccc <lv_obj_get_width>
 80152b8:	2302      	movs	r3, #2
    lv_coord_t page_x1 = tabpage->coords.x1 - tabview->coords.x1 + x_predict;
 80152ba:	b2a4      	uxth	r4, r4
    uint16_t tab_cur = ext->tab_cur;
 80152bc:	8ab1      	ldrh	r1, [r6, #20]
    lv_coord_t treshold = lv_obj_get_width(tabview) / 2;
 80152be:	fb90 f0f3 	sdiv	r0, r0, r3
    if(page_x1 > treshold) {
 80152c2:	b223      	sxth	r3, r4
    lv_coord_t treshold = lv_obj_get_width(tabview) / 2;
 80152c4:	b200      	sxth	r0, r0
    if(page_x1 > treshold) {
 80152c6:	4283      	cmp	r3, r0
 80152c8:	dd12      	ble.n	80152f0 <tabpage_press_lost_handler+0x98>
        if(tab_cur != 0) tab_cur--;
 80152ca:	b109      	cbz	r1, 80152d0 <tabpage_press_lost_handler+0x78>
 80152cc:	3901      	subs	r1, #1
        if(tab_cur < ext->tab_cnt - 1) tab_cur++;
 80152ce:	b289      	uxth	r1, r1
    lv_tabview_set_tab_act(tabview, tab_cur, true);
 80152d0:	2201      	movs	r2, #1
 80152d2:	4628      	mov	r0, r5
 80152d4:	f7ff ff0e 	bl	80150f4 <lv_tabview_set_tab_act>
}
 80152d8:	b003      	add	sp, #12
 80152da:	bdf0      	pop	{r4, r5, r6, r7, pc}
        x_predict += vect.x;
 80152dc:	189c      	adds	r4, r3, r2
        vect.x = vect.x * (100 - LV_INDEV_DRAG_THROW) / 100;
 80152de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80152e2:	2101      	movs	r1, #1
 80152e4:	011b      	lsls	r3, r3, #4
        x_predict += vect.x;
 80152e6:	b222      	sxth	r2, r4
        vect.x = vect.x * (100 - LV_INDEV_DRAG_THROW) / 100;
 80152e8:	fb93 f3f0 	sdiv	r3, r3, r0
 80152ec:	b21b      	sxth	r3, r3
 80152ee:	e7d4      	b.n	801529a <tabpage_press_lost_handler+0x42>
    lv_coord_t page_x2 = page_x1 + lv_obj_get_width(tabpage);
 80152f0:	443c      	add	r4, r7
    } else if(page_x2 < treshold) {
 80152f2:	b224      	sxth	r4, r4
 80152f4:	4284      	cmp	r4, r0
 80152f6:	daeb      	bge.n	80152d0 <tabpage_press_lost_handler+0x78>
        if(tab_cur < ext->tab_cnt - 1) tab_cur++;
 80152f8:	8af3      	ldrh	r3, [r6, #22]
 80152fa:	3b01      	subs	r3, #1
 80152fc:	4299      	cmp	r1, r3
 80152fe:	dae7      	bge.n	80152d0 <tabpage_press_lost_handler+0x78>
 8015300:	3101      	adds	r1, #1
 8015302:	e7e4      	b.n	80152ce <tabpage_press_lost_handler+0x76>

08015304 <lv_tabview_get_tab>:
{
 8015304:	b570      	push	{r4, r5, r6, lr}
    while(page != NULL && i != id) {
 8015306:	2400      	movs	r4, #0
{
 8015308:	460e      	mov	r6, r1
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 801530a:	f7f3 fdb6 	bl	8008e7a <lv_obj_get_ext_attr>
    lv_obj_t * page = lv_obj_get_child_back(ext->content, NULL);
 801530e:	2100      	movs	r1, #0
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 8015310:	4605      	mov	r5, r0
    lv_obj_t * page = lv_obj_get_child_back(ext->content, NULL);
 8015312:	6880      	ldr	r0, [r0, #8]
 8015314:	f7f3 fcc2 	bl	8008c9c <lv_obj_get_child_back>
    while(page != NULL && i != id) {
 8015318:	b108      	cbz	r0, 801531e <lv_tabview_get_tab+0x1a>
 801531a:	42b4      	cmp	r4, r6
 801531c:	d100      	bne.n	8015320 <lv_tabview_get_tab+0x1c>
}
 801531e:	bd70      	pop	{r4, r5, r6, pc}
        page = lv_obj_get_child_back(ext->content, page);
 8015320:	4601      	mov	r1, r0
 8015322:	68a8      	ldr	r0, [r5, #8]
 8015324:	f7f3 fcba 	bl	8008c9c <lv_obj_get_child_back>
 8015328:	3401      	adds	r4, #1
 801532a:	e7f5      	b.n	8015318 <lv_tabview_get_tab+0x14>

0801532c <lv_tabview_get_sliding>:
{
 801532c:	b508      	push	{r3, lr}
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 801532e:	f7f3 fda4 	bl	8008e7a <lv_obj_get_ext_attr>
    return ext->slide_enable ? true : false;
 8015332:	7e80      	ldrb	r0, [r0, #26]
}
 8015334:	f000 0001 	and.w	r0, r0, #1
 8015338:	bd08      	pop	{r3, pc}
	...

0801533c <tabpage_signal>:
{
 801533c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    res = page_signal(tab_page, sign, param);
 801533e:	4b13      	ldr	r3, [pc, #76]	; (801538c <tabpage_signal+0x50>)
{
 8015340:	4606      	mov	r6, r0
 8015342:	460c      	mov	r4, r1
    res = page_signal(tab_page, sign, param);
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8015348:	2801      	cmp	r0, #1
    res = page_signal(tab_page, sign, param);
 801534a:	4607      	mov	r7, r0
    if(res != LV_RES_OK) return res;
 801534c:	d10d      	bne.n	801536a <tabpage_signal+0x2e>
    lv_obj_t * cont = lv_obj_get_parent(tab_page);
 801534e:	4630      	mov	r0, r6
 8015350:	f7f3 fc36 	bl	8008bc0 <lv_obj_get_parent>
    lv_obj_t * tabview = lv_obj_get_parent(cont);
 8015354:	f7f3 fc34 	bl	8008bc0 <lv_obj_get_parent>
 8015358:	4605      	mov	r5, r0
    if(lv_tabview_get_sliding(tabview) == false) return res;
 801535a:	f7ff ffe7 	bl	801532c <lv_tabview_get_sliding>
 801535e:	b120      	cbz	r0, 801536a <tabpage_signal+0x2e>
    if(sign == LV_SIGNAL_PRESSED) {
 8015360:	2c06      	cmp	r4, #6
 8015362:	d104      	bne.n	801536e <tabpage_signal+0x32>
        tabpage_pressed_handler(tabview, tab_page);
 8015364:	4628      	mov	r0, r5
 8015366:	f7ff feb8 	bl	80150da <tabpage_pressed_handler.isra.2>
}
 801536a:	4638      	mov	r0, r7
 801536c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if(sign == LV_SIGNAL_PRESSING) {
 801536e:	2c07      	cmp	r4, #7
 8015370:	d104      	bne.n	801537c <tabpage_signal+0x40>
        tabpage_pressing_handler(tabview, tab_page);
 8015372:	4631      	mov	r1, r6
 8015374:	4628      	mov	r0, r5
 8015376:	f7ff fe41 	bl	8014ffc <tabpage_pressing_handler>
 801537a:	e7f6      	b.n	801536a <tabpage_signal+0x2e>
    } else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
 801537c:	3c08      	subs	r4, #8
 801537e:	2c01      	cmp	r4, #1
 8015380:	d8f3      	bhi.n	801536a <tabpage_signal+0x2e>
        tabpage_press_lost_handler(tabview, tab_page);
 8015382:	4631      	mov	r1, r6
 8015384:	4628      	mov	r0, r5
 8015386:	f7ff ff67 	bl	8015258 <tabpage_press_lost_handler>
 801538a:	e7ee      	b.n	801536a <tabpage_signal+0x2e>
 801538c:	2001745c 	.word	0x2001745c

08015390 <tabpage_scrl_signal>:
{
 8015390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    res = page_scrl_signal(tab_scrl, sign, param);
 8015392:	4b15      	ldr	r3, [pc, #84]	; (80153e8 <tabpage_scrl_signal+0x58>)
{
 8015394:	4605      	mov	r5, r0
 8015396:	460c      	mov	r4, r1
    res = page_scrl_signal(tab_scrl, sign, param);
 8015398:	681b      	ldr	r3, [r3, #0]
 801539a:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 801539c:	2801      	cmp	r0, #1
    res = page_scrl_signal(tab_scrl, sign, param);
 801539e:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
 80153a0:	d110      	bne.n	80153c4 <tabpage_scrl_signal+0x34>
    lv_obj_t * tab_page = lv_obj_get_parent(tab_scrl);
 80153a2:	4628      	mov	r0, r5
 80153a4:	f7f3 fc0c 	bl	8008bc0 <lv_obj_get_parent>
 80153a8:	4607      	mov	r7, r0
    lv_obj_t * cont = lv_obj_get_parent(tab_page);
 80153aa:	f7f3 fc09 	bl	8008bc0 <lv_obj_get_parent>
    lv_obj_t * tabview = lv_obj_get_parent(cont);
 80153ae:	f7f3 fc07 	bl	8008bc0 <lv_obj_get_parent>
 80153b2:	4605      	mov	r5, r0
    if(lv_tabview_get_sliding(tabview) == false) return res;
 80153b4:	f7ff ffba 	bl	801532c <lv_tabview_get_sliding>
 80153b8:	b120      	cbz	r0, 80153c4 <tabpage_scrl_signal+0x34>
    if(sign == LV_SIGNAL_PRESSED) {
 80153ba:	2c06      	cmp	r4, #6
 80153bc:	d104      	bne.n	80153c8 <tabpage_scrl_signal+0x38>
        tabpage_pressed_handler(tabview, tab_page);
 80153be:	4628      	mov	r0, r5
 80153c0:	f7ff fe8b 	bl	80150da <tabpage_pressed_handler.isra.2>
}
 80153c4:	4630      	mov	r0, r6
 80153c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if(sign == LV_SIGNAL_PRESSING) {
 80153c8:	2c07      	cmp	r4, #7
 80153ca:	d104      	bne.n	80153d6 <tabpage_scrl_signal+0x46>
        tabpage_pressing_handler(tabview, tab_page);
 80153cc:	4639      	mov	r1, r7
 80153ce:	4628      	mov	r0, r5
 80153d0:	f7ff fe14 	bl	8014ffc <tabpage_pressing_handler>
 80153d4:	e7f6      	b.n	80153c4 <tabpage_scrl_signal+0x34>
    } else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
 80153d6:	3c08      	subs	r4, #8
 80153d8:	2c01      	cmp	r4, #1
 80153da:	d8f3      	bhi.n	80153c4 <tabpage_scrl_signal+0x34>
        tabpage_press_lost_handler(tabview, tab_page);
 80153dc:	4639      	mov	r1, r7
 80153de:	4628      	mov	r0, r5
 80153e0:	f7ff ff3a 	bl	8015258 <tabpage_press_lost_handler>
 80153e4:	e7ee      	b.n	80153c4 <tabpage_scrl_signal+0x34>
 80153e6:	bf00      	nop
 80153e8:	20017458 	.word	0x20017458

080153ec <lv_tabview_get_style>:
{
 80153ec:	b538      	push	{r3, r4, r5, lr}
 80153ee:	460c      	mov	r4, r1
 80153f0:	4605      	mov	r5, r0
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 80153f2:	f7f3 fd42 	bl	8008e7a <lv_obj_get_ext_attr>
    switch(type) {
 80153f6:	2c06      	cmp	r4, #6
 80153f8:	d818      	bhi.n	801542c <lv_tabview_get_style+0x40>
 80153fa:	e8df f004 	tbb	[pc, r4]
 80153fe:	1704      	.short	0x1704
 8015400:	13110f09 	.word	0x13110f09
 8015404:	15          	.byte	0x15
 8015405:	00          	.byte	0x00
            return lv_obj_get_style(tabview);
 8015406:	4628      	mov	r0, r5
}
 8015408:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            return lv_obj_get_style(tabview);
 801540c:	f7f3 bc6a 	b.w	8008ce4 <lv_obj_get_style>
            return lv_btnm_get_style(ext->btns, LV_BTNM_STYLE_BG);
 8015410:	2100      	movs	r1, #0
            return lv_btnm_get_style(ext->btns, LV_BTNM_STYLE_BTN_TGL_PR);
 8015412:	6800      	ldr	r0, [r0, #0]
}
 8015414:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            return lv_btnm_get_style(ext->btns, LV_BTNM_STYLE_BTN_TGL_PR);
 8015418:	f7fa b897 	b.w	800f54a <lv_btnm_get_style>
            return lv_btnm_get_style(ext->btns, LV_BTNM_STYLE_BTN_REL);
 801541c:	2101      	movs	r1, #1
 801541e:	e7f8      	b.n	8015412 <lv_tabview_get_style+0x26>
            return lv_btnm_get_style(ext->btns, LV_BTNM_STYLE_BTN_PR);
 8015420:	2102      	movs	r1, #2
 8015422:	e7f6      	b.n	8015412 <lv_tabview_get_style+0x26>
            return lv_btnm_get_style(ext->btns, LV_BTNM_STYLE_BTN_TGL_REL);
 8015424:	2103      	movs	r1, #3
 8015426:	e7f4      	b.n	8015412 <lv_tabview_get_style+0x26>
            return lv_btnm_get_style(ext->btns, LV_BTNM_STYLE_BTN_TGL_PR);
 8015428:	2104      	movs	r1, #4
 801542a:	e7f2      	b.n	8015412 <lv_tabview_get_style+0x26>
}
 801542c:	2000      	movs	r0, #0
 801542e:	bd38      	pop	{r3, r4, r5, pc}

08015430 <tabview_realign>:
/**
 * Realign and resize the elements of Tab view
 * @param tabview pointer to a Tab view object
 */
static void tabview_realign(lv_obj_t * tabview)
{
 8015430:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015434:	4606      	mov	r6, r0
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 8015436:	f7f3 fd20 	bl	8008e7a <lv_obj_get_ext_attr>

    lv_obj_set_width(ext->btns, lv_obj_get_width(tabview));
 801543a:	6805      	ldr	r5, [r0, #0]
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 801543c:	4604      	mov	r4, r0
    lv_obj_set_width(ext->btns, lv_obj_get_width(tabview));
 801543e:	4630      	mov	r0, r6
 8015440:	f7f3 fc44 	bl	8008ccc <lv_obj_get_width>
 8015444:	4601      	mov	r1, r0
 8015446:	4628      	mov	r0, r5
 8015448:	f7f3 f97a 	bl	8008740 <lv_obj_set_width>

    if(ext->tab_cnt != 0) {
 801544c:	8ae3      	ldrh	r3, [r4, #22]
 801544e:	b343      	cbz	r3, 80154a2 <tabview_realign+0x72>
        lv_style_t * style_btn_bg = lv_tabview_get_style(tabview, LV_TABVIEW_STYLE_BTN_BG);
 8015450:	2102      	movs	r1, #2
 8015452:	4630      	mov	r0, r6
 8015454:	f7ff ffca 	bl	80153ec <lv_tabview_get_style>
        lv_style_t * style_btn_rel = lv_tabview_get_style(tabview, LV_TABVIEW_STYLE_BTN_REL);
 8015458:	2103      	movs	r1, #3
        lv_style_t * style_btn_bg = lv_tabview_get_style(tabview, LV_TABVIEW_STYLE_BTN_BG);
 801545a:	4605      	mov	r5, r0
        lv_style_t * style_btn_rel = lv_tabview_get_style(tabview, LV_TABVIEW_STYLE_BTN_REL);
 801545c:	4630      	mov	r0, r6
 801545e:	f7ff ffc5 	bl	80153ec <lv_tabview_get_style>
 8015462:	4607      	mov	r7, r0

        /*Set the indicator widths*/
        lv_coord_t indic_width = (lv_obj_get_width(tabview) - style_btn_bg->body.padding.inner * (ext->tab_cnt - 1) -
 8015464:	4630      	mov	r0, r6
 8015466:	f7f3 fc31 	bl	8008ccc <lv_obj_get_width>
 801546a:	8ae2      	ldrh	r2, [r4, #22]
 801546c:	f9b5 3024 	ldrsh.w	r3, [r5, #36]	; 0x24
 8015470:	1e51      	subs	r1, r2, #1
 8015472:	fb01 0113 	mls	r1, r1, r3, r0
                                  2 * style_btn_bg->body.padding.hor) / ext->tab_cnt;
 8015476:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
        lv_obj_set_width(ext->indic, indic_width);
 801547a:	6860      	ldr	r0, [r4, #4]
        lv_coord_t indic_width = (lv_obj_get_width(tabview) - style_btn_bg->body.padding.inner * (ext->tab_cnt - 1) -
 801547c:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
                                  2 * style_btn_bg->body.padding.hor) / ext->tab_cnt;
 8015480:	fb91 f1f2 	sdiv	r1, r1, r2
        lv_obj_set_width(ext->indic, indic_width);
 8015484:	b209      	sxth	r1, r1
 8015486:	f7f3 f95b 	bl	8008740 <lv_obj_set_width>

        /*Set the tabs height*/
        lv_coord_t btns_height = lv_font_get_height(style_btn_rel->text.font) +
                                 2 * style_btn_rel->body.padding.ver +
 801548a:	8c29      	ldrh	r1, [r5, #32]
 801548c:	8c3b      	ldrh	r3, [r7, #32]
 801548e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015490:	440b      	add	r3, r1
                                 2 * style_btn_bg->body.padding.ver;
        lv_obj_set_height(ext->btns, btns_height);
 8015492:	6820      	ldr	r0, [r4, #0]
        lv_coord_t btns_height = lv_font_get_height(style_btn_rel->text.font) +
 8015494:	f892 1020 	ldrb.w	r1, [r2, #32]
                                 2 * style_btn_rel->body.padding.ver +
 8015498:	eb01 0143 	add.w	r1, r1, r3, lsl #1
        lv_obj_set_height(ext->btns, btns_height);
 801549c:	b209      	sxth	r1, r1
 801549e:	f7f3 f956 	bl	800874e <lv_obj_set_height>
    }

    lv_obj_set_height(ext->content, lv_obj_get_height(tabview) - lv_obj_get_height(ext->btns));
 80154a2:	4630      	mov	r0, r6
 80154a4:	68a7      	ldr	r7, [r4, #8]
 80154a6:	f7f3 fc17 	bl	8008cd8 <lv_obj_get_height>
 80154aa:	4605      	mov	r5, r0
 80154ac:	6820      	ldr	r0, [r4, #0]
 80154ae:	f7f3 fc13 	bl	8008cd8 <lv_obj_get_height>
 80154b2:	1a29      	subs	r1, r5, r0
 80154b4:	4638      	mov	r0, r7
 80154b6:	2500      	movs	r5, #0
 80154b8:	b209      	sxth	r1, r1
 80154ba:	f7f3 f948 	bl	800874e <lv_obj_set_height>
    switch(ext->btns_pos) {
 80154be:	7ea2      	ldrb	r2, [r4, #26]
        case LV_TABVIEW_BTNS_POS_TOP:
            lv_obj_align(ext->btns, NULL, LV_ALIGN_IN_TOP_LEFT, 0, 0);
            lv_obj_align(ext->content, ext->btns, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
            break;
        case LV_TABVIEW_BTNS_POS_BOTTOM:
            lv_obj_align(ext->content, NULL, LV_ALIGN_IN_TOP_LEFT, 0, 0);
 80154c0:	462b      	mov	r3, r5
 80154c2:	9500      	str	r5, [sp, #0]
    switch(ext->btns_pos) {
 80154c4:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 80154c8:	bb0a      	cbnz	r2, 801550e <tabview_realign+0xde>
            lv_obj_align(ext->btns, NULL, LV_ALIGN_IN_TOP_LEFT, 0, 0);
 80154ca:	2201      	movs	r2, #1
 80154cc:	4629      	mov	r1, r5
 80154ce:	6820      	ldr	r0, [r4, #0]
 80154d0:	f7f3 f945 	bl	800875e <lv_obj_align>
            lv_obj_align(ext->content, ext->btns, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
 80154d4:	9500      	str	r5, [sp, #0]
 80154d6:	462b      	mov	r3, r5
 80154d8:	220c      	movs	r2, #12
 80154da:	6821      	ldr	r1, [r4, #0]
 80154dc:	68a0      	ldr	r0, [r4, #8]
            lv_obj_align(ext->btns, ext->content, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
 80154de:	f7f3 f93e 	bl	800875e <lv_obj_align>
            break;
    }


    lv_obj_t * pages = lv_obj_get_child(ext->content, NULL);
 80154e2:	2100      	movs	r1, #0
 80154e4:	68a0      	ldr	r0, [r4, #8]
 80154e6:	f7f3 fb6d 	bl	8008bc4 <lv_obj_get_child>
    while(pages != NULL) {
        if(lv_obj_get_signal_func(pages) == tabpage_signal) {  /*Be sure adjust only the pages (user can other things)*/
 80154ea:	4f19      	ldr	r7, [pc, #100]	; (8015550 <tabview_realign+0x120>)
    lv_obj_t * pages = lv_obj_get_child(ext->content, NULL);
 80154ec:	4605      	mov	r5, r0
    while(pages != NULL) {
 80154ee:	b9c5      	cbnz	r5, 8015522 <tabview_realign+0xf2>
            lv_obj_set_size(pages, lv_obj_get_width(tabview), lv_obj_get_height(ext->content));
        }
        pages = lv_obj_get_child(ext->content, pages);
    }

    lv_obj_align(ext->indic, ext->btns, LV_ALIGN_IN_BOTTOM_LEFT, 0, 0);
 80154f0:	9500      	str	r5, [sp, #0]
 80154f2:	462b      	mov	r3, r5
 80154f4:	6821      	ldr	r1, [r4, #0]
 80154f6:	2204      	movs	r2, #4
 80154f8:	6860      	ldr	r0, [r4, #4]
 80154fa:	f7f3 f930 	bl	800875e <lv_obj_align>

    lv_tabview_set_tab_act(tabview, ext->tab_cur, false);
 80154fe:	462a      	mov	r2, r5
 8015500:	8aa1      	ldrh	r1, [r4, #20]
 8015502:	4630      	mov	r0, r6
}
 8015504:	b002      	add	sp, #8
 8015506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_tabview_set_tab_act(tabview, ext->tab_cur, false);
 801550a:	f7ff bdf3 	b.w	80150f4 <lv_tabview_set_tab_act>
            lv_obj_align(ext->content, NULL, LV_ALIGN_IN_TOP_LEFT, 0, 0);
 801550e:	4629      	mov	r1, r5
 8015510:	68a0      	ldr	r0, [r4, #8]
 8015512:	f7f3 f924 	bl	800875e <lv_obj_align>
            lv_obj_align(ext->btns, ext->content, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
 8015516:	9500      	str	r5, [sp, #0]
 8015518:	462b      	mov	r3, r5
 801551a:	220c      	movs	r2, #12
 801551c:	68a1      	ldr	r1, [r4, #8]
 801551e:	6820      	ldr	r0, [r4, #0]
 8015520:	e7dd      	b.n	80154de <tabview_realign+0xae>
        if(lv_obj_get_signal_func(pages) == tabpage_signal) {  /*Be sure adjust only the pages (user can other things)*/
 8015522:	4628      	mov	r0, r5
 8015524:	f7f3 fca5 	bl	8008e72 <lv_obj_get_signal_func>
 8015528:	4287      	cmp	r7, r0
 801552a:	d10b      	bne.n	8015544 <tabview_realign+0x114>
            lv_obj_set_size(pages, lv_obj_get_width(tabview), lv_obj_get_height(ext->content));
 801552c:	4630      	mov	r0, r6
 801552e:	f7f3 fbcd 	bl	8008ccc <lv_obj_get_width>
 8015532:	4680      	mov	r8, r0
 8015534:	68a0      	ldr	r0, [r4, #8]
 8015536:	f7f3 fbcf 	bl	8008cd8 <lv_obj_get_height>
 801553a:	4641      	mov	r1, r8
 801553c:	4602      	mov	r2, r0
 801553e:	4628      	mov	r0, r5
 8015540:	f7f3 f8cb 	bl	80086da <lv_obj_set_size>
        pages = lv_obj_get_child(ext->content, pages);
 8015544:	4629      	mov	r1, r5
 8015546:	68a0      	ldr	r0, [r4, #8]
 8015548:	f7f3 fb3c 	bl	8008bc4 <lv_obj_get_child>
 801554c:	4605      	mov	r5, r0
 801554e:	e7ce      	b.n	80154ee <tabview_realign+0xbe>
 8015550:	0801533d 	.word	0x0801533d

08015554 <lv_tabview_signal>:
    res = ancestor_signal(tabview, sign, param);
 8015554:	4b31      	ldr	r3, [pc, #196]	; (801561c <lv_tabview_signal+0xc8>)
{
 8015556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = ancestor_signal(tabview, sign, param);
 801555a:	681b      	ldr	r3, [r3, #0]
{
 801555c:	4606      	mov	r6, r0
 801555e:	460c      	mov	r4, r1
 8015560:	4615      	mov	r5, r2
    res = ancestor_signal(tabview, sign, param);
 8015562:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8015564:	2801      	cmp	r0, #1
    res = ancestor_signal(tabview, sign, param);
 8015566:	4607      	mov	r7, r0
    if(res != LV_RES_OK) return res;
 8015568:	d115      	bne.n	8015596 <lv_tabview_signal+0x42>
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 801556a:	4630      	mov	r0, r6
 801556c:	f7f3 fc85 	bl	8008e7a <lv_obj_get_ext_attr>
 8015570:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CLEANUP) {
 8015572:	b9b4      	cbnz	r4, 80155a2 <lv_tabview_signal+0x4e>
        for(i = 0; ext->tab_name_ptr[i][0] != '\0'; i++) lv_mem_free(ext->tab_name_ptr[i]);
 8015574:	b2e2      	uxtb	r2, r4
 8015576:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801557a:	3401      	adds	r4, #1
 801557c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8015580:	7805      	ldrb	r5, [r0, #0]
 8015582:	b95d      	cbnz	r5, 801559c <lv_tabview_signal+0x48>
        lv_mem_free(ext->tab_name_ptr);
 8015584:	4618      	mov	r0, r3
 8015586:	f7f8 fc83 	bl	800de90 <lv_mem_free>
        ext->tab_name_ptr = NULL;
 801558a:	f8c8 500c 	str.w	r5, [r8, #12]
        ext->btns = NULL;     /*These objects were children so they are already invalid*/
 801558e:	f8c8 5000 	str.w	r5, [r8]
        ext->content = NULL;
 8015592:	f8c8 5008 	str.w	r5, [r8, #8]
}
 8015596:	4638      	mov	r0, r7
 8015598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        for(i = 0; ext->tab_name_ptr[i][0] != '\0'; i++) lv_mem_free(ext->tab_name_ptr[i]);
 801559c:	f7f8 fc78 	bl	800de90 <lv_mem_free>
 80155a0:	e7e8      	b.n	8015574 <lv_tabview_signal+0x20>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 80155a2:	2c02      	cmp	r4, #2
 80155a4:	d11b      	bne.n	80155de <lv_tabview_signal+0x8a>
        if(ext->content != NULL &&
 80155a6:	6883      	ldr	r3, [r0, #8]
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d0f4      	beq.n	8015596 <lv_tabview_signal+0x42>
                (lv_obj_get_width(tabview) != lv_area_get_width(param) ||
 80155ac:	4630      	mov	r0, r6
 80155ae:	f7f3 fb8d 	bl	8008ccc <lv_obj_get_width>
    return area_p->x2 - area_p->x1 + 1;
 80155b2:	88ab      	ldrh	r3, [r5, #4]
 80155b4:	882a      	ldrh	r2, [r5, #0]
 80155b6:	3301      	adds	r3, #1
 80155b8:	1a9b      	subs	r3, r3, r2
        if(ext->content != NULL &&
 80155ba:	b21b      	sxth	r3, r3
 80155bc:	4298      	cmp	r0, r3
 80155be:	d003      	beq.n	80155c8 <lv_tabview_signal+0x74>
            tabview_realign(tabview);
 80155c0:	4630      	mov	r0, r6
 80155c2:	f7ff ff35 	bl	8015430 <tabview_realign>
 80155c6:	e7e6      	b.n	8015596 <lv_tabview_signal+0x42>
                 lv_obj_get_height(tabview) != lv_area_get_height(param))) {
 80155c8:	4630      	mov	r0, r6
 80155ca:	f7f3 fb85 	bl	8008cd8 <lv_obj_get_height>
    return area_p->y2 - area_p->y1 + 1;
 80155ce:	88eb      	ldrh	r3, [r5, #6]
 80155d0:	886a      	ldrh	r2, [r5, #2]
 80155d2:	3301      	adds	r3, #1
 80155d4:	1a9b      	subs	r3, r3, r2
                (lv_obj_get_width(tabview) != lv_area_get_width(param) ||
 80155d6:	b21b      	sxth	r3, r3
 80155d8:	4298      	cmp	r0, r3
 80155da:	d1f1      	bne.n	80155c0 <lv_tabview_signal+0x6c>
 80155dc:	e7db      	b.n	8015596 <lv_tabview_signal+0x42>
    } else if(sign == LV_SIGNAL_FOCUS || sign == LV_SIGNAL_DEFOCUS || sign == LV_SIGNAL_CONTROLL) {
 80155de:	f1a4 030e 	sub.w	r3, r4, #14
 80155e2:	2b02      	cmp	r3, #2
 80155e4:	d807      	bhi.n	80155f6 <lv_tabview_signal+0xa2>
        if(ext->btns) {
 80155e6:	6800      	ldr	r0, [r0, #0]
 80155e8:	2800      	cmp	r0, #0
 80155ea:	d0d4      	beq.n	8015596 <lv_tabview_signal+0x42>
            ext->btns->signal_func(ext->btns, sign, param);
 80155ec:	6983      	ldr	r3, [r0, #24]
 80155ee:	462a      	mov	r2, r5
 80155f0:	4621      	mov	r1, r4
 80155f2:	4798      	blx	r3
 80155f4:	e7cf      	b.n	8015596 <lv_tabview_signal+0x42>
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 80155f6:	2c11      	cmp	r4, #17
 80155f8:	d101      	bne.n	80155fe <lv_tabview_signal+0xaa>
        *editable = true;
 80155fa:	702f      	strb	r7, [r5, #0]
 80155fc:	e7cb      	b.n	8015596 <lv_tabview_signal+0x42>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 80155fe:	2c05      	cmp	r4, #5
 8015600:	d1c9      	bne.n	8015596 <lv_tabview_signal+0x42>
 8015602:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 8015604:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8015608:	b2da      	uxtb	r2, r3
 801560a:	b119      	cbz	r1, 8015614 <lv_tabview_signal+0xc0>
 801560c:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) {  /*Find the last set data*/
 801560e:	2b07      	cmp	r3, #7
 8015610:	d1f8      	bne.n	8015604 <lv_tabview_signal+0xb0>
 8015612:	461a      	mov	r2, r3
        buf->type[i] = "lv_tabview";
 8015614:	4b02      	ldr	r3, [pc, #8]	; (8015620 <lv_tabview_signal+0xcc>)
 8015616:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
 801561a:	e7bc      	b.n	8015596 <lv_tabview_signal+0x42>
 801561c:	20017454 	.word	0x20017454
 8015620:	08088007 	.word	0x08088007

08015624 <lv_tabview_add_tab>:
{
 8015624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015628:	4607      	mov	r7, r0
 801562a:	4688      	mov	r8, r1
    lv_tabview_ext_t  * ext = lv_obj_get_ext_attr(tabview);
 801562c:	f7f3 fc25 	bl	8008e7a <lv_obj_get_ext_attr>
    lv_obj_t * h = lv_page_create(ext->content, NULL);
 8015630:	2100      	movs	r1, #0
    lv_tabview_ext_t  * ext = lv_obj_get_ext_attr(tabview);
 8015632:	4604      	mov	r4, r0
    lv_obj_t * h = lv_page_create(ext->content, NULL);
 8015634:	6880      	ldr	r0, [r0, #8]
 8015636:	f7fd fde1 	bl	80131fc <lv_page_create>
 801563a:	4606      	mov	r6, r0
    lv_obj_set_size(h, lv_obj_get_width(tabview), lv_obj_get_height(ext->content));
 801563c:	4638      	mov	r0, r7
 801563e:	f7f3 fb45 	bl	8008ccc <lv_obj_get_width>
 8015642:	4605      	mov	r5, r0
 8015644:	68a0      	ldr	r0, [r4, #8]
 8015646:	f7f3 fb47 	bl	8008cd8 <lv_obj_get_height>
 801564a:	4629      	mov	r1, r5
 801564c:	4602      	mov	r2, r0
 801564e:	4630      	mov	r0, r6
 8015650:	f7f3 f843 	bl	80086da <lv_obj_set_size>
    lv_page_set_sb_mode(h, LV_SB_MODE_AUTO);
 8015654:	2103      	movs	r1, #3
 8015656:	4630      	mov	r0, r6
    if(page_signal == NULL) page_signal = lv_obj_get_signal_func(h);
 8015658:	4d47      	ldr	r5, [pc, #284]	; (8015778 <lv_tabview_add_tab+0x154>)
    lv_page_set_sb_mode(h, LV_SB_MODE_AUTO);
 801565a:	f7fd fd41 	bl	80130e0 <lv_page_set_sb_mode>
    lv_page_set_style(h, LV_PAGE_STYLE_BG, &lv_style_transp);
 801565e:	4a47      	ldr	r2, [pc, #284]	; (801577c <lv_tabview_add_tab+0x158>)
 8015660:	2100      	movs	r1, #0
 8015662:	4630      	mov	r0, r6
 8015664:	f7fd fd79 	bl	801315a <lv_page_set_style>
    lv_page_set_style(h, LV_PAGE_STYLE_SCRL, &lv_style_transp);
 8015668:	4a44      	ldr	r2, [pc, #272]	; (801577c <lv_tabview_add_tab+0x158>)
 801566a:	2101      	movs	r1, #1
 801566c:	4630      	mov	r0, r6
 801566e:	f7fd fd74 	bl	801315a <lv_page_set_style>
    if(page_signal == NULL) page_signal = lv_obj_get_signal_func(h);
 8015672:	682b      	ldr	r3, [r5, #0]
 8015674:	b91b      	cbnz	r3, 801567e <lv_tabview_add_tab+0x5a>
 8015676:	4630      	mov	r0, r6
 8015678:	f7f3 fbfb 	bl	8008e72 <lv_obj_get_signal_func>
 801567c:	6028      	str	r0, [r5, #0]
    if(page_scrl_signal == NULL) page_scrl_signal = lv_obj_get_signal_func(lv_page_get_scrl(h));
 801567e:	4d40      	ldr	r5, [pc, #256]	; (8015780 <lv_tabview_add_tab+0x15c>)
 8015680:	682b      	ldr	r3, [r5, #0]
 8015682:	b92b      	cbnz	r3, 8015690 <lv_tabview_add_tab+0x6c>
 8015684:	4630      	mov	r0, r6
 8015686:	f7fd fd96 	bl	80131b6 <lv_page_get_scrl>
 801568a:	f7f3 fbf2 	bl	8008e72 <lv_obj_get_signal_func>
 801568e:	6028      	str	r0, [r5, #0]
    lv_obj_set_signal_func(h, tabpage_signal);
 8015690:	493c      	ldr	r1, [pc, #240]	; (8015784 <lv_tabview_add_tab+0x160>)
 8015692:	4630      	mov	r0, r6
 8015694:	f7f3 f9f0 	bl	8008a78 <lv_obj_set_signal_func>
    lv_obj_set_signal_func(lv_page_get_scrl(h), tabpage_scrl_signal);
 8015698:	4630      	mov	r0, r6
 801569a:	f7fd fd8c 	bl	80131b6 <lv_page_get_scrl>
 801569e:	493a      	ldr	r1, [pc, #232]	; (8015788 <lv_tabview_add_tab+0x164>)
 80156a0:	f7f3 f9ea 	bl	8008a78 <lv_obj_set_signal_func>
    if((name[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) { /*If control byte presented let is*/
 80156a4:	f898 3000 	ldrb.w	r3, [r8]
        name_dm = lv_mem_alloc(strlen(name) + 1); /*+1 for the the closing '\0' */
 80156a8:	4640      	mov	r0, r8
    if((name[0] & LV_BTNM_CTRL_MASK) == LV_BTNM_CTRL_CODE) { /*If control byte presented let is*/
 80156aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80156ae:	2b80      	cmp	r3, #128	; 0x80
 80156b0:	d107      	bne.n	80156c2 <lv_tabview_add_tab+0x9e>
        name_dm = lv_mem_alloc(strlen(name) + 1); /*+1 for the the closing '\0' */
 80156b2:	f7ea fdb3 	bl	800021c <strlen>
 80156b6:	3001      	adds	r0, #1
 80156b8:	f7f8 fbc6 	bl	800de48 <lv_mem_alloc>
        lv_mem_assert(name_dm);
 80156bc:	4605      	mov	r5, r0
 80156be:	b958      	cbnz	r0, 80156d8 <lv_tabview_add_tab+0xb4>
 80156c0:	e7fe      	b.n	80156c0 <lv_tabview_add_tab+0x9c>
        name_dm = lv_mem_alloc(strlen(name) + 2); /*+1 for the the closing '\0' and +1 for the control byte */
 80156c2:	f7ea fdab 	bl	800021c <strlen>
 80156c6:	3002      	adds	r0, #2
 80156c8:	f7f8 fbbe 	bl	800de48 <lv_mem_alloc>
        lv_mem_assert(name_dm);
 80156cc:	4605      	mov	r5, r0
 80156ce:	b900      	cbnz	r0, 80156d2 <lv_tabview_add_tab+0xae>
 80156d0:	e7fe      	b.n	80156d0 <lv_tabview_add_tab+0xac>
        name_dm[0] = '\221';
 80156d2:	2391      	movs	r3, #145	; 0x91
 80156d4:	f800 3b01 	strb.w	r3, [r0], #1
        strcpy(&name_dm[1], name);
 80156d8:	4641      	mov	r1, r8
 80156da:	f000 fa32 	bl	8015b42 <strcpy>
    ext->tab_cnt++;
 80156de:	8ae1      	ldrh	r1, [r4, #22]
    ext->tab_name_ptr = lv_mem_realloc(ext->tab_name_ptr, sizeof(char *) * (ext->tab_cnt + 1));
 80156e0:	68e0      	ldr	r0, [r4, #12]
    ext->tab_cnt++;
 80156e2:	3101      	adds	r1, #1
 80156e4:	b289      	uxth	r1, r1
 80156e6:	82e1      	strh	r1, [r4, #22]
    ext->tab_name_ptr = lv_mem_realloc(ext->tab_name_ptr, sizeof(char *) * (ext->tab_cnt + 1));
 80156e8:	3101      	adds	r1, #1
 80156ea:	0089      	lsls	r1, r1, #2
 80156ec:	f7f8 fc34 	bl	800df58 <lv_mem_realloc>
 80156f0:	4601      	mov	r1, r0
 80156f2:	60e0      	str	r0, [r4, #12]
    lv_mem_assert(ext->tab_name_ptr);
 80156f4:	b900      	cbnz	r0, 80156f8 <lv_tabview_add_tab+0xd4>
 80156f6:	e7fe      	b.n	80156f6 <lv_tabview_add_tab+0xd2>
    ext->tab_name_ptr[ext->tab_cnt - 1] = name_dm;
 80156f8:	8ae3      	ldrh	r3, [r4, #22]
    ext->tab_name_ptr[ext->tab_cnt] = "";
 80156fa:	4a24      	ldr	r2, [pc, #144]	; (801578c <lv_tabview_add_tab+0x168>)
    ext->tab_name_ptr[ext->tab_cnt - 1] = name_dm;
 80156fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8015700:	3b01      	subs	r3, #1
 8015702:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
    ext->tab_name_ptr[ext->tab_cnt] = "";
 8015706:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    lv_btnm_set_map(ext->btns, ext->tab_name_ptr);
 801570a:	6820      	ldr	r0, [r4, #0]
    ext->tab_name_ptr[ext->tab_cnt] = "";
 801570c:	605a      	str	r2, [r3, #4]
    lv_btnm_set_map(ext->btns, ext->tab_name_ptr);
 801570e:	f7f9 ff39 	bl	800f584 <lv_btnm_set_map>
    lv_style_t * style_tabs = lv_obj_get_style(ext->btns);
 8015712:	6820      	ldr	r0, [r4, #0]
 8015714:	f7f3 fae6 	bl	8008ce4 <lv_obj_get_style>
 8015718:	4680      	mov	r8, r0
    lv_coord_t indic_width = (lv_obj_get_width(tabview) - style_tabs->body.padding.inner * (ext->tab_cnt - 1) - 2 * style_tabs->body.padding.hor) / ext->tab_cnt;
 801571a:	4638      	mov	r0, r7
 801571c:	f7f3 fad6 	bl	8008ccc <lv_obj_get_width>
 8015720:	8ae1      	ldrh	r1, [r4, #22]
 8015722:	f9b8 3024 	ldrsh.w	r3, [r8, #36]	; 0x24
 8015726:	1e4d      	subs	r5, r1, #1
 8015728:	fb05 0013 	mls	r0, r5, r3, r0
 801572c:	f9b8 5022 	ldrsh.w	r5, [r8, #34]	; 0x22
 8015730:	eba0 0545 	sub.w	r5, r0, r5, lsl #1
    lv_obj_set_width(ext->indic, indic_width);
 8015734:	6860      	ldr	r0, [r4, #4]
    lv_coord_t indic_width = (lv_obj_get_width(tabview) - style_tabs->body.padding.inner * (ext->tab_cnt - 1) - 2 * style_tabs->body.padding.hor) / ext->tab_cnt;
 8015736:	fb95 f5f1 	sdiv	r5, r5, r1
 801573a:	b22d      	sxth	r5, r5
    lv_obj_set_width(ext->indic, indic_width);
 801573c:	4629      	mov	r1, r5
 801573e:	f7f2 ffff 	bl	8008740 <lv_obj_set_width>
    lv_obj_set_x(ext->indic, indic_width * ext->tab_cur + style_tabs->body.padding.inner * ext->tab_cur + style_tabs->body.padding.hor);
 8015742:	f9b8 1024 	ldrsh.w	r1, [r8, #36]	; 0x24
 8015746:	f8b8 3022 	ldrh.w	r3, [r8, #34]	; 0x22
 801574a:	440d      	add	r5, r1
 801574c:	8aa1      	ldrh	r1, [r4, #20]
 801574e:	6860      	ldr	r0, [r4, #4]
 8015750:	fb11 3105 	smlabb	r1, r1, r5, r3
 8015754:	b209      	sxth	r1, r1
 8015756:	f7f2 ffae 	bl	80086b6 <lv_obj_set_x>
    if(ext->tab_cnt == 1) {
 801575a:	8ae3      	ldrh	r3, [r4, #22]
 801575c:	2b01      	cmp	r3, #1
 801575e:	d108      	bne.n	8015772 <lv_tabview_add_tab+0x14e>
        ext->tab_cur = 0;
 8015760:	2200      	movs	r2, #0
        lv_tabview_set_tab_act(tabview, 0, false);
 8015762:	4638      	mov	r0, r7
        ext->tab_cur = 0;
 8015764:	82a2      	strh	r2, [r4, #20]
        lv_tabview_set_tab_act(tabview, 0, false);
 8015766:	4611      	mov	r1, r2
 8015768:	f7ff fcc4 	bl	80150f4 <lv_tabview_set_tab_act>
        tabview_realign(tabview);       /*To set the proper btns height*/
 801576c:	4638      	mov	r0, r7
 801576e:	f7ff fe5f 	bl	8015430 <tabview_realign>
}
 8015772:	4630      	mov	r0, r6
 8015774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015778:	2001745c 	.word	0x2001745c
 801577c:	20017bc8 	.word	0x20017bc8
 8015780:	20017458 	.word	0x20017458
 8015784:	0801533d 	.word	0x0801533d
 8015788:	08015391 	.word	0x08015391
 801578c:	08087e8b 	.word	0x08087e8b

08015790 <lv_tabview_set_style>:
{
 8015790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015792:	460f      	mov	r7, r1
 8015794:	4606      	mov	r6, r0
 8015796:	4614      	mov	r4, r2
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 8015798:	f7f3 fb6f 	bl	8008e7a <lv_obj_get_ext_attr>
 801579c:	4605      	mov	r5, r0
    switch(type) {
 801579e:	2f06      	cmp	r7, #6
 80157a0:	d82f      	bhi.n	8015802 <lv_tabview_set_style+0x72>
 80157a2:	e8df f007 	tbb	[pc, r7]
 80157a6:	2404      	.short	0x2404
 80157a8:	1e17140a 	.word	0x1e17140a
 80157ac:	21          	.byte	0x21
 80157ad:	00          	.byte	0x00
            lv_obj_set_style(tabview, style);
 80157ae:	4621      	mov	r1, r4
 80157b0:	4630      	mov	r0, r6
}
 80157b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_obj_set_style(tabview, style);
 80157b6:	f7f3 ba27 	b.w	8008c08 <lv_obj_set_style>
            lv_btnm_set_style(ext->btns, LV_BTNM_STYLE_BG, style);
 80157ba:	4622      	mov	r2, r4
 80157bc:	2100      	movs	r1, #0
            lv_btnm_set_style(ext->btns, LV_BTNM_STYLE_BTN_REL, style);
 80157be:	6828      	ldr	r0, [r5, #0]
 80157c0:	f7f9 fe9c 	bl	800f4fc <lv_btnm_set_style>
            tabview_realign(tabview);
 80157c4:	4630      	mov	r0, r6
}
 80157c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            tabview_realign(tabview);
 80157ca:	f7ff be31 	b.w	8015430 <tabview_realign>
            lv_btnm_set_style(ext->btns, LV_BTNM_STYLE_BTN_REL, style);
 80157ce:	4622      	mov	r2, r4
 80157d0:	2101      	movs	r1, #1
 80157d2:	e7f4      	b.n	80157be <lv_tabview_set_style+0x2e>
            lv_btnm_set_style(ext->btns, LV_BTNM_STYLE_BTN_PR, style);
 80157d4:	4622      	mov	r2, r4
 80157d6:	2102      	movs	r1, #2
            lv_btnm_set_style(ext->btns, LV_BTNM_STYLE_BTN_TGL_PR, style);
 80157d8:	6828      	ldr	r0, [r5, #0]
}
 80157da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_btnm_set_style(ext->btns, LV_BTNM_STYLE_BTN_TGL_PR, style);
 80157de:	f7f9 be8d 	b.w	800f4fc <lv_btnm_set_style>
            lv_btnm_set_style(ext->btns, LV_BTNM_STYLE_BTN_TGL_REL, style);
 80157e2:	4622      	mov	r2, r4
 80157e4:	2103      	movs	r1, #3
 80157e6:	e7f7      	b.n	80157d8 <lv_tabview_set_style+0x48>
            lv_btnm_set_style(ext->btns, LV_BTNM_STYLE_BTN_TGL_PR, style);
 80157e8:	4622      	mov	r2, r4
 80157ea:	2104      	movs	r1, #4
 80157ec:	e7f4      	b.n	80157d8 <lv_tabview_set_style+0x48>
            lv_obj_set_style(ext->indic, style);
 80157ee:	4621      	mov	r1, r4
 80157f0:	6840      	ldr	r0, [r0, #4]
 80157f2:	f7f3 fa09 	bl	8008c08 <lv_obj_set_style>
            lv_obj_set_height(ext->indic, style->body.padding.inner);
 80157f6:	f9b4 1024 	ldrsh.w	r1, [r4, #36]	; 0x24
 80157fa:	6868      	ldr	r0, [r5, #4]
 80157fc:	f7f2 ffa7 	bl	800874e <lv_obj_set_height>
 8015800:	e7e0      	b.n	80157c4 <lv_tabview_set_style+0x34>
 8015802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015804 <lv_tabview_create>:
{
 8015804:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8015808:	460f      	mov	r7, r1
    lv_obj_t * new_tabview = lv_obj_create(par, copy);
 801580a:	f7f2 fe33 	bl	8008474 <lv_obj_create>
    lv_mem_assert(new_tabview);
 801580e:	4605      	mov	r5, r0
 8015810:	b900      	cbnz	r0, 8015814 <lv_tabview_create+0x10>
 8015812:	e7fe      	b.n	8015812 <lv_tabview_create+0xe>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_func(new_tabview);
 8015814:	4c8e      	ldr	r4, [pc, #568]	; (8015a50 <lv_tabview_create+0x24c>)
 8015816:	6823      	ldr	r3, [r4, #0]
 8015818:	b913      	cbnz	r3, 8015820 <lv_tabview_create+0x1c>
 801581a:	f7f3 fb2a 	bl	8008e72 <lv_obj_get_signal_func>
 801581e:	6020      	str	r0, [r4, #0]
    lv_tabview_ext_t * ext = lv_obj_allocate_ext_attr(new_tabview, sizeof(lv_tabview_ext_t));
 8015820:	2120      	movs	r1, #32
 8015822:	4628      	mov	r0, r5
 8015824:	f7f3 f92c 	bl	8008a80 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 8015828:	4604      	mov	r4, r0
 801582a:	b900      	cbnz	r0, 801582e <lv_tabview_create+0x2a>
 801582c:	e7fe      	b.n	801582c <lv_tabview_create+0x28>
    ext->drag_hor = 0;
 801582e:	7e83      	ldrb	r3, [r0, #26]
    ext->tab_cur = 0;
 8015830:	2600      	movs	r6, #0
    lv_obj_set_signal_func(new_tabview, lv_tabview_signal);
 8015832:	4988      	ldr	r1, [pc, #544]	; (8015a54 <lv_tabview_create+0x250>)
    ext->slide_enable = 1;
 8015834:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
    ext->tab_cur = 0;
 8015838:	8286      	strh	r6, [r0, #20]
    ext->point_last.x = 0;
 801583a:	8206      	strh	r6, [r0, #16]
    ext->btns_pos = LV_TABVIEW_BTNS_POS_TOP;
 801583c:	f043 0301 	orr.w	r3, r3, #1
    ext->point_last.y = 0;
 8015840:	8246      	strh	r6, [r0, #18]
    ext->content = NULL;
 8015842:	6086      	str	r6, [r0, #8]
    ext->btns_pos = LV_TABVIEW_BTNS_POS_TOP;
 8015844:	f366 03c3 	bfi	r3, r6, #3, #1
    ext->indic = NULL;
 8015848:	6046      	str	r6, [r0, #4]
    ext->btns = NULL;
 801584a:	6006      	str	r6, [r0, #0]
    ext->btns_pos = LV_TABVIEW_BTNS_POS_TOP;
 801584c:	7683      	strb	r3, [r0, #26]
    ext->anim_time = LV_TABVIEW_ANIM_TIME;
 801584e:	f44f 7396 	mov.w	r3, #300	; 0x12c
    ext->tab_load_action = NULL;
 8015852:	61c6      	str	r6, [r0, #28]
    ext->anim_time = LV_TABVIEW_ANIM_TIME;
 8015854:	8303      	strh	r3, [r0, #24]
    lv_obj_set_signal_func(new_tabview, lv_tabview_signal);
 8015856:	4628      	mov	r0, r5
 8015858:	f7f3 f90e 	bl	8008a78 <lv_obj_set_signal_func>
    if(copy == NULL) {
 801585c:	2f00      	cmp	r7, #0
 801585e:	f040 8099 	bne.w	8015994 <lv_tabview_create+0x190>
        ext->tab_name_ptr = lv_mem_alloc(sizeof(char *));
 8015862:	2004      	movs	r0, #4
 8015864:	f7f8 faf0 	bl	800de48 <lv_mem_alloc>
 8015868:	60e0      	str	r0, [r4, #12]
        lv_mem_assert(ext->tab_name_ptr);
 801586a:	b900      	cbnz	r0, 801586e <lv_tabview_create+0x6a>
 801586c:	e7fe      	b.n	801586c <lv_tabview_create+0x68>
        ext->tab_name_ptr[0] = "";
 801586e:	4b7a      	ldr	r3, [pc, #488]	; (8015a58 <lv_tabview_create+0x254>)
        lv_obj_set_size(new_tabview, LV_HOR_RES, LV_VER_RES);
 8015870:	f44f 7288 	mov.w	r2, #272	; 0x110
 8015874:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
        ext->tab_name_ptr[0] = "";
 8015878:	6003      	str	r3, [r0, #0]
        lv_obj_set_size(new_tabview, LV_HOR_RES, LV_VER_RES);
 801587a:	4628      	mov	r0, r5
        ext->tab_cnt = 0;
 801587c:	82e7      	strh	r7, [r4, #22]
        lv_obj_set_size(new_tabview, LV_HOR_RES, LV_VER_RES);
 801587e:	f7f2 ff2c 	bl	80086da <lv_obj_set_size>
        ext->btns = lv_btnm_create(new_tabview, NULL);
 8015882:	4639      	mov	r1, r7
 8015884:	4628      	mov	r0, r5
 8015886:	f7f9 ffb3 	bl	800f7f0 <lv_btnm_create>
        lv_obj_set_height(ext->btns, 3 * LV_DPI / 4);
 801588a:	214b      	movs	r1, #75	; 0x4b
        ext->btns = lv_btnm_create(new_tabview, NULL);
 801588c:	6020      	str	r0, [r4, #0]
        lv_obj_set_height(ext->btns, 3 * LV_DPI / 4);
 801588e:	f7f2 ff5e 	bl	800874e <lv_obj_set_height>
        lv_btnm_set_map(ext->btns, tab_def);
 8015892:	6820      	ldr	r0, [r4, #0]
 8015894:	4971      	ldr	r1, [pc, #452]	; (8015a5c <lv_tabview_create+0x258>)
 8015896:	f7f9 fe75 	bl	800f584 <lv_btnm_set_map>
        lv_btnm_set_action(ext->btns, tab_btnm_action);
 801589a:	6820      	ldr	r0, [r4, #0]
 801589c:	4970      	ldr	r1, [pc, #448]	; (8015a60 <lv_tabview_create+0x25c>)
 801589e:	f7f9 fe09 	bl	800f4b4 <lv_btnm_set_action>
        lv_btnm_set_toggle(ext->btns, true, 0);
 80158a2:	463a      	mov	r2, r7
 80158a4:	6820      	ldr	r0, [r4, #0]
 80158a6:	2101      	movs	r1, #1
 80158a8:	f7f9 fe0a 	bl	800f4c0 <lv_btnm_set_toggle>
        ext->indic = lv_obj_create(ext->btns, NULL);
 80158ac:	4639      	mov	r1, r7
 80158ae:	6820      	ldr	r0, [r4, #0]
 80158b0:	f7f2 fde0 	bl	8008474 <lv_obj_create>
        lv_obj_set_width(ext->indic, LV_DPI);
 80158b4:	2164      	movs	r1, #100	; 0x64
        ext->indic = lv_obj_create(ext->btns, NULL);
 80158b6:	6060      	str	r0, [r4, #4]
        lv_obj_set_width(ext->indic, LV_DPI);
 80158b8:	f7f2 ff42 	bl	8008740 <lv_obj_set_width>
        lv_obj_align(ext->indic, ext->btns, LV_ALIGN_IN_BOTTOM_LEFT, 0, 0);
 80158bc:	463b      	mov	r3, r7
 80158be:	2204      	movs	r2, #4
 80158c0:	9700      	str	r7, [sp, #0]
 80158c2:	6821      	ldr	r1, [r4, #0]
 80158c4:	6860      	ldr	r0, [r4, #4]
 80158c6:	f7f2 ff4a 	bl	800875e <lv_obj_align>
        lv_obj_set_click(ext->indic, false);
 80158ca:	6860      	ldr	r0, [r4, #4]
 80158cc:	4639      	mov	r1, r7
 80158ce:	f7f3 f8a3 	bl	8008a18 <lv_obj_set_click>
        ext->content = lv_cont_create(new_tabview, NULL);
 80158d2:	4639      	mov	r1, r7
 80158d4:	4628      	mov	r0, r5
 80158d6:	f7fa fea5 	bl	8010624 <lv_cont_create>
        lv_cont_set_fit(ext->content, true, false);
 80158da:	463a      	mov	r2, r7
        ext->content = lv_cont_create(new_tabview, NULL);
 80158dc:	60a0      	str	r0, [r4, #8]
        lv_cont_set_fit(ext->content, true, false);
 80158de:	2101      	movs	r1, #1
 80158e0:	f7fa ff03 	bl	80106ea <lv_cont_set_fit>
        lv_cont_set_layout(ext->content, LV_LAYOUT_ROW_T);
 80158e4:	68a0      	ldr	r0, [r4, #8]
 80158e6:	2105      	movs	r1, #5
 80158e8:	f7fa feea 	bl	80106c0 <lv_cont_set_layout>
 * @param cont pointer to a container object
 * @param style pointer to the new style
 */
static inline void lv_cont_set_style(lv_obj_t *cont, lv_style_t * style)
{
    lv_obj_set_style(cont, style);
 80158ec:	495d      	ldr	r1, [pc, #372]	; (8015a64 <lv_tabview_create+0x260>)
 80158ee:	68a0      	ldr	r0, [r4, #8]
 80158f0:	f7f3 f98a 	bl	8008c08 <lv_obj_set_style>
        lv_obj_set_height(ext->content, LV_VER_RES - lv_obj_get_height(ext->btns));
 80158f4:	6820      	ldr	r0, [r4, #0]
 80158f6:	68a6      	ldr	r6, [r4, #8]
 80158f8:	f7f3 f9ee 	bl	8008cd8 <lv_obj_get_height>
 80158fc:	f5c0 7188 	rsb	r1, r0, #272	; 0x110
 8015900:	4630      	mov	r0, r6
 8015902:	b209      	sxth	r1, r1
 8015904:	f7f2 ff23 	bl	800874e <lv_obj_set_height>
        lv_obj_align(ext->content, ext->btns, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
 8015908:	9700      	str	r7, [sp, #0]
 801590a:	463b      	mov	r3, r7
 801590c:	6821      	ldr	r1, [r4, #0]
 801590e:	68a0      	ldr	r0, [r4, #8]
 8015910:	220c      	movs	r2, #12
 8015912:	f7f2 ff24 	bl	800875e <lv_obj_align>
        lv_theme_t * th = lv_theme_get_current();
 8015916:	f000 f8ad 	bl	8015a74 <lv_theme_get_current>
        if(th) {
 801591a:	4604      	mov	r4, r0
 801591c:	b368      	cbz	r0, 801597a <lv_tabview_create+0x176>
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_BG, th->tabview.bg);
 801591e:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
 8015922:	4639      	mov	r1, r7
 8015924:	4628      	mov	r0, r5
 8015926:	f7ff ff33 	bl	8015790 <lv_tabview_set_style>
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_INDIC, th->tabview.indic);
 801592a:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
 801592e:	2101      	movs	r1, #1
 8015930:	4628      	mov	r0, r5
 8015932:	f7ff ff2d 	bl	8015790 <lv_tabview_set_style>
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_BTN_BG, th->tabview.btn.bg);
 8015936:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
 801593a:	2102      	movs	r1, #2
 801593c:	4628      	mov	r0, r5
 801593e:	f7ff ff27 	bl	8015790 <lv_tabview_set_style>
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_BTN_REL, th->tabview.btn.rel);
 8015942:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8015946:	2103      	movs	r1, #3
 8015948:	4628      	mov	r0, r5
 801594a:	f7ff ff21 	bl	8015790 <lv_tabview_set_style>
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_BTN_PR, th->tabview.btn.pr);
 801594e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8015952:	2104      	movs	r1, #4
 8015954:	4628      	mov	r0, r5
 8015956:	f7ff ff1b 	bl	8015790 <lv_tabview_set_style>
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_BTN_TGL_REL, th->tabview.btn.tgl_rel);
 801595a:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 801595e:	2105      	movs	r1, #5
 8015960:	4628      	mov	r0, r5
 8015962:	f7ff ff15 	bl	8015790 <lv_tabview_set_style>
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_BTN_TGL_PR, th->tabview.btn.tgl_pr);
 8015966:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
 801596a:	2106      	movs	r1, #6
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_INDIC, &lv_style_plain_color);
 801596c:	4628      	mov	r0, r5
 801596e:	f7ff ff0f 	bl	8015790 <lv_tabview_set_style>
}
 8015972:	4628      	mov	r0, r5
 8015974:	b002      	add	sp, #8
 8015976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_BG, &lv_style_plain);
 801597a:	4a3b      	ldr	r2, [pc, #236]	; (8015a68 <lv_tabview_create+0x264>)
 801597c:	4639      	mov	r1, r7
 801597e:	4628      	mov	r0, r5
 8015980:	f7ff ff06 	bl	8015790 <lv_tabview_set_style>
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_BTN_BG, &lv_style_transp);
 8015984:	4a39      	ldr	r2, [pc, #228]	; (8015a6c <lv_tabview_create+0x268>)
 8015986:	2102      	movs	r1, #2
 8015988:	4628      	mov	r0, r5
 801598a:	f7ff ff01 	bl	8015790 <lv_tabview_set_style>
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_INDIC, &lv_style_plain_color);
 801598e:	4a38      	ldr	r2, [pc, #224]	; (8015a70 <lv_tabview_create+0x26c>)
 8015990:	2101      	movs	r1, #1
 8015992:	e7eb      	b.n	801596c <lv_tabview_create+0x168>
        lv_tabview_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8015994:	4638      	mov	r0, r7
 8015996:	f7f3 fa70 	bl	8008e7a <lv_obj_get_ext_attr>
 801599a:	4680      	mov	r8, r0
        ext->btns = lv_btnm_create(new_tabview, copy_ext->btns);
 801599c:	6801      	ldr	r1, [r0, #0]
 801599e:	4628      	mov	r0, r5
        ext->point_last.x = 0;
 80159a0:	8226      	strh	r6, [r4, #16]
        ext->point_last.y = 0;
 80159a2:	8266      	strh	r6, [r4, #18]
        ext->btns = lv_btnm_create(new_tabview, copy_ext->btns);
 80159a4:	f7f9 ff24 	bl	800f7f0 <lv_btnm_create>
        ext->indic = lv_obj_create(ext->btns, copy_ext->indic);
 80159a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
        ext->btns = lv_btnm_create(new_tabview, copy_ext->btns);
 80159ac:	6020      	str	r0, [r4, #0]
        ext->indic = lv_obj_create(ext->btns, copy_ext->indic);
 80159ae:	f7f2 fd61 	bl	8008474 <lv_obj_create>
        ext->content = lv_cont_create(new_tabview, copy_ext->content);
 80159b2:	f8d8 1008 	ldr.w	r1, [r8, #8]
        ext->indic = lv_obj_create(ext->btns, copy_ext->indic);
 80159b6:	6060      	str	r0, [r4, #4]
        ext->content = lv_cont_create(new_tabview, copy_ext->content);
 80159b8:	4628      	mov	r0, r5
 80159ba:	f7fa fe33 	bl	8010624 <lv_cont_create>
        ext->anim_time = copy_ext->anim_time;
 80159be:	f8b8 3018 	ldrh.w	r3, [r8, #24]
        ext->content = lv_cont_create(new_tabview, copy_ext->content);
 80159c2:	60a0      	str	r0, [r4, #8]
        ext->tab_name_ptr = lv_mem_alloc(sizeof(char *));
 80159c4:	2004      	movs	r0, #4
        ext->anim_time = copy_ext->anim_time;
 80159c6:	8323      	strh	r3, [r4, #24]
        ext->tab_load_action = copy_ext->tab_load_action;
 80159c8:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80159cc:	61e3      	str	r3, [r4, #28]
        ext->tab_name_ptr = lv_mem_alloc(sizeof(char *));
 80159ce:	f7f8 fa3b 	bl	800de48 <lv_mem_alloc>
 80159d2:	4601      	mov	r1, r0
 80159d4:	60e0      	str	r0, [r4, #12]
        lv_mem_assert(ext->tab_name_ptr);
 80159d6:	b900      	cbnz	r0, 80159da <lv_tabview_create+0x1d6>
 80159d8:	e7fe      	b.n	80159d8 <lv_tabview_create+0x1d4>
        ext->tab_name_ptr[0] = "";
 80159da:	4b1f      	ldr	r3, [pc, #124]	; (8015a58 <lv_tabview_create+0x254>)
 80159dc:	6003      	str	r3, [r0, #0]
        lv_btnm_set_map(ext->btns, ext->tab_name_ptr);
 80159de:	6820      	ldr	r0, [r4, #0]
 80159e0:	f7f9 fdd0 	bl	800f584 <lv_btnm_set_map>
 80159e4:	fa1f f986 	uxth.w	r9, r6
        for(i = 0; i < copy_ext->tab_cnt; i++) {
 80159e8:	f8b8 3016 	ldrh.w	r3, [r8, #22]
 80159ec:	f106 0a01 	add.w	sl, r6, #1
 80159f0:	454b      	cmp	r3, r9
 80159f2:	d803      	bhi.n	80159fc <lv_tabview_create+0x1f8>
        lv_obj_refresh_style(new_tabview);
 80159f4:	4628      	mov	r0, r5
 80159f6:	f7f3 f801 	bl	80089fc <lv_obj_refresh_style>
 80159fa:	e7ba      	b.n	8015972 <lv_tabview_create+0x16e>
            new_tab = lv_tabview_add_tab(new_tabview, copy_ext->tab_name_ptr[i]);
 80159fc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015a00:	b2b6      	uxth	r6, r6
 8015a02:	4628      	mov	r0, r5
 8015a04:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8015a08:	f7ff fe0c 	bl	8015624 <lv_tabview_add_tab>
            copy_tab = lv_tabview_get_tab(copy, i);
 8015a0c:	4649      	mov	r1, r9
            new_tab = lv_tabview_add_tab(new_tabview, copy_ext->tab_name_ptr[i]);
 8015a0e:	4604      	mov	r4, r0
            copy_tab = lv_tabview_get_tab(copy, i);
 8015a10:	4638      	mov	r0, r7
 8015a12:	f7ff fc77 	bl	8015304 <lv_tabview_get_tab>
            lv_page_set_style(new_tab, LV_PAGE_STYLE_BG, lv_page_get_style(copy_tab, LV_PAGE_STYLE_BG));
 8015a16:	2100      	movs	r1, #0
            copy_tab = lv_tabview_get_tab(copy, i);
 8015a18:	4606      	mov	r6, r0
            lv_page_set_style(new_tab, LV_PAGE_STYLE_BG, lv_page_get_style(copy_tab, LV_PAGE_STYLE_BG));
 8015a1a:	f7fd fbd9 	bl	80131d0 <lv_page_get_style>
 8015a1e:	2100      	movs	r1, #0
 8015a20:	4602      	mov	r2, r0
 8015a22:	4620      	mov	r0, r4
 8015a24:	f7fd fb99 	bl	801315a <lv_page_set_style>
            lv_page_set_style(new_tab, LV_PAGE_STYLE_SCRL, lv_page_get_style(copy_tab, LV_PAGE_STYLE_SCRL));
 8015a28:	2101      	movs	r1, #1
 8015a2a:	4630      	mov	r0, r6
 8015a2c:	f7fd fbd0 	bl	80131d0 <lv_page_get_style>
 8015a30:	2101      	movs	r1, #1
 8015a32:	4602      	mov	r2, r0
 8015a34:	4620      	mov	r0, r4
 8015a36:	f7fd fb90 	bl	801315a <lv_page_set_style>
            lv_page_set_style(new_tab, LV_PAGE_STYLE_SB, lv_page_get_style(copy_tab, LV_PAGE_STYLE_SB));
 8015a3a:	2102      	movs	r1, #2
 8015a3c:	4630      	mov	r0, r6
 8015a3e:	4656      	mov	r6, sl
 8015a40:	f7fd fbc6 	bl	80131d0 <lv_page_get_style>
 8015a44:	2102      	movs	r1, #2
 8015a46:	4602      	mov	r2, r0
 8015a48:	4620      	mov	r0, r4
 8015a4a:	f7fd fb86 	bl	801315a <lv_page_set_style>
 8015a4e:	e7c9      	b.n	80159e4 <lv_tabview_create+0x1e0>
 8015a50:	20017454 	.word	0x20017454
 8015a54:	08015555 	.word	0x08015555
 8015a58:	08087e8b 	.word	0x08087e8b
 8015a5c:	200002f0 	.word	0x200002f0
 8015a60:	08015219 	.word	0x08015219
 8015a64:	20017ce8 	.word	0x20017ce8
 8015a68:	20017dc0 	.word	0x20017dc0
 8015a6c:	20017bc8 	.word	0x20017bc8
 8015a70:	20017ee0 	.word	0x20017ee0

08015a74 <lv_theme_get_current>:
    return current_theme;
#else
    if(!inited) return NULL;
    else return &current_theme;
#endif
}
 8015a74:	4b01      	ldr	r3, [pc, #4]	; (8015a7c <lv_theme_get_current+0x8>)
 8015a76:	6818      	ldr	r0, [r3, #0]
 8015a78:	4770      	bx	lr
 8015a7a:	bf00      	nop
 8015a7c:	20017460 	.word	0x20017460

08015a80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8015a80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8015ab8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8015a84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8015a86:	e003      	b.n	8015a90 <LoopCopyDataInit>

08015a88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8015a88:	4b0c      	ldr	r3, [pc, #48]	; (8015abc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8015a8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8015a8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8015a8e:	3104      	adds	r1, #4

08015a90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8015a90:	480b      	ldr	r0, [pc, #44]	; (8015ac0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8015a92:	4b0c      	ldr	r3, [pc, #48]	; (8015ac4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8015a94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8015a96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8015a98:	d3f6      	bcc.n	8015a88 <CopyDataInit>
  ldr  r2, =_sbss
 8015a9a:	4a0b      	ldr	r2, [pc, #44]	; (8015ac8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8015a9c:	e002      	b.n	8015aa4 <LoopFillZerobss>

08015a9e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8015a9e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8015aa0:	f842 3b04 	str.w	r3, [r2], #4

08015aa4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8015aa4:	4b09      	ldr	r3, [pc, #36]	; (8015acc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8015aa6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8015aa8:	d3f9      	bcc.n	8015a9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8015aaa:	f7ec f801 	bl	8001ab0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8015aae:	f000 f811 	bl	8015ad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8015ab2:	f7ea fdb3 	bl	800061c <main>
  bx  lr    
 8015ab6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8015ab8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8015abc:	08088024 	.word	0x08088024
  ldr  r0, =_sdata
 8015ac0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8015ac4:	200002f4 	.word	0x200002f4
  ldr  r2, =_sbss
 8015ac8:	200002f4 	.word	0x200002f4
  ldr  r3, = _ebss
 8015acc:	20017f28 	.word	0x20017f28

08015ad0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8015ad0:	e7fe      	b.n	8015ad0 <ADC_IRQHandler>
	...

08015ad4 <__libc_init_array>:
 8015ad4:	b570      	push	{r4, r5, r6, lr}
 8015ad6:	4e0d      	ldr	r6, [pc, #52]	; (8015b0c <__libc_init_array+0x38>)
 8015ad8:	4c0d      	ldr	r4, [pc, #52]	; (8015b10 <__libc_init_array+0x3c>)
 8015ada:	1ba4      	subs	r4, r4, r6
 8015adc:	10a4      	asrs	r4, r4, #2
 8015ade:	2500      	movs	r5, #0
 8015ae0:	42a5      	cmp	r5, r4
 8015ae2:	d109      	bne.n	8015af8 <__libc_init_array+0x24>
 8015ae4:	4e0b      	ldr	r6, [pc, #44]	; (8015b14 <__libc_init_array+0x40>)
 8015ae6:	4c0c      	ldr	r4, [pc, #48]	; (8015b18 <__libc_init_array+0x44>)
 8015ae8:	f000 f834 	bl	8015b54 <_init>
 8015aec:	1ba4      	subs	r4, r4, r6
 8015aee:	10a4      	asrs	r4, r4, #2
 8015af0:	2500      	movs	r5, #0
 8015af2:	42a5      	cmp	r5, r4
 8015af4:	d105      	bne.n	8015b02 <__libc_init_array+0x2e>
 8015af6:	bd70      	pop	{r4, r5, r6, pc}
 8015af8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015afc:	4798      	blx	r3
 8015afe:	3501      	adds	r5, #1
 8015b00:	e7ee      	b.n	8015ae0 <__libc_init_array+0xc>
 8015b02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015b06:	4798      	blx	r3
 8015b08:	3501      	adds	r5, #1
 8015b0a:	e7f2      	b.n	8015af2 <__libc_init_array+0x1e>
 8015b0c:	0808801c 	.word	0x0808801c
 8015b10:	0808801c 	.word	0x0808801c
 8015b14:	0808801c 	.word	0x0808801c
 8015b18:	08088020 	.word	0x08088020

08015b1c <memcpy>:
 8015b1c:	b510      	push	{r4, lr}
 8015b1e:	1e43      	subs	r3, r0, #1
 8015b20:	440a      	add	r2, r1
 8015b22:	4291      	cmp	r1, r2
 8015b24:	d100      	bne.n	8015b28 <memcpy+0xc>
 8015b26:	bd10      	pop	{r4, pc}
 8015b28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015b2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015b30:	e7f7      	b.n	8015b22 <memcpy+0x6>

08015b32 <memset>:
 8015b32:	4402      	add	r2, r0
 8015b34:	4603      	mov	r3, r0
 8015b36:	4293      	cmp	r3, r2
 8015b38:	d100      	bne.n	8015b3c <memset+0xa>
 8015b3a:	4770      	bx	lr
 8015b3c:	f803 1b01 	strb.w	r1, [r3], #1
 8015b40:	e7f9      	b.n	8015b36 <memset+0x4>

08015b42 <strcpy>:
 8015b42:	4603      	mov	r3, r0
 8015b44:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015b48:	f803 2b01 	strb.w	r2, [r3], #1
 8015b4c:	2a00      	cmp	r2, #0
 8015b4e:	d1f9      	bne.n	8015b44 <strcpy+0x2>
 8015b50:	4770      	bx	lr
	...

08015b54 <_init>:
 8015b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b56:	bf00      	nop
 8015b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015b5a:	bc08      	pop	{r3}
 8015b5c:	469e      	mov	lr, r3
 8015b5e:	4770      	bx	lr

08015b60 <_fini>:
 8015b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b62:	bf00      	nop
 8015b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015b66:	bc08      	pop	{r3}
 8015b68:	469e      	mov	lr, r3
 8015b6a:	4770      	bx	lr
